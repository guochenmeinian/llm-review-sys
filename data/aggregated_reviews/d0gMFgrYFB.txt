ID: d0gMFgrYFB
Title: FVEL: Interactive Formal Verification Environment with Large Language Models via Theorem Proving
Conference: NeurIPS
Year: 2024
Number of Reviews: 14
Original Ratings: 7, 6, 7, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1
Original Confidences: 3, 2, 3, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents the FVEL environment for automated theorem proving with LLMs, which takes C code as input, derives specifications for the Isabelle theorem-proving assistant, and generates Isabelle proofs. The authors introduce the FVELer dataset, containing extensive C code, specifications, and proofs, addressing the accessibility of formal methods. The methodology is sound, and the dataset is a significant contribution, although the absence of code or demos for the FVEL environment limits the work's completeness.

### Strengths and Weaknesses
Strengths:  
- The paper addresses a critical need in the formal methods community by integrating ML-backed specification generation with theorem-proving.  
- The FVELer dataset is a valuable resource, addressing data scarcity issues.  
- The paper is well-organized, clearly written, and presents insightful statistics.

Weaknesses:  
- The lack of available code or demos for the FVEL environment detracts from the work's completeness.  
- Some claims, such as the assertion that symbolic solvers are time-consuming, lack supporting runtime comparisons.  
- The paper has minor writing issues, including unclear phrasing and typos.

### Suggestions for Improvement
We recommend that the authors improve the visibility of the FVEL environment by providing accessible code or demos, as this is crucial for the work's impact. Additionally, we suggest clarifying the differences between SV-COMP and SV-COMP-47 in Table 2 and considering the inclusion of SMT-based solvers as baselines. We encourage the authors to conduct more ablation studies on token numbers, prompts, and hyperparameters. Furthermore, we recommend addressing the limitations of only supporting C code by discussing the challenges of extending to other languages like Python and Java, and exploring potential collaborations with the Coq community for broader applicability. Lastly, we advise correcting minor writing issues to enhance clarity.