ID: 50rXrJNqHQ
Title: API-Assisted Code Generation for Question Answering on Varied Table Structures
Conference: EMNLP/2023/Conference
Year: 2023
Number of Reviews: 4
Original Ratings: -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a unified framework for question-answering on structured tables, termed TableQA. The authors propose a three-level unification: representing various table types as multi-index pandas DataFrames, using Python as a generic intermediate representation of natural language, and leveraging powerful code generation models for few-shot Python code generation. The framework also allows for custom API functions to enhance Pandas functionality and integrate external knowledge. Experimental results on few-shot HiTab, Spider, and WikiTQ indicate the framework's performance.

### Strengths and Weaknesses
Strengths:
- The framework is simple and generic, particularly beneficial for tables that cannot be queried by SQL.
- The multi-index representation is innovative, and the paper is well-written and accessible.
- Experimental results show significant performance on several important datasets.

Weaknesses:
- The experimental section lacks clarity regarding baseline approach selection and rationale, with insufficient comparisons to relevant baselines.
- Performance gains from multi-index transformation and API functions are modest, particularly on datasets like Spider and WikiTQ.
- Claims regarding support for arbitrarily structured tables and experimental results may be misleading.

### Suggestions for Improvement
We recommend that the authors improve the explanation of the baseline approach selection and provide a more extensive comparison with relevant baselines to convincingly showcase the superiority of their method. Additionally, please clarify the performance gains from multi-index transformation and API functions, and consider conducting ablation studies on Spider, AIT-QA, and WikiTQ. We suggest refining the scope of supported tables to avoid overgeneralization and making more rigorous claims regarding the paper's contributions. Finally, consider exploring the development of a model that can automatically generate necessary APIs to enhance the framework's adaptability.