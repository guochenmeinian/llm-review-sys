ID: kYTdzHP6Bq
Title: ORFA: Exploring WebAssembly as a Turing Complete Query Language for Web APIs
Conference: ACM
Year: 2024
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents ORFA (One Request For All), a framework that utilizes WebAssembly (Wasm) as a Turing-complete query language for Web APIs, enabling complex client-side requests within a single query. The authors argue that ORFA enhances API efficiency by minimizing network traffic and reducing latency through module splitting, caching mechanisms, and a secure Wasm-based runtime environment. The experimental evaluation indicates that ORFA outperforms existing methods in service latency, network traffic robustness, and service cost.

### Strengths and Weaknesses
Strengths:
- The paper addresses a significant research problem and provides a thorough explanation of the methodology.
- ORFA is the first to employ Wasm as a query language, demonstrating Turing completeness and significant performance improvements over REST and GraphQL.
- The framework includes practical optimizations, making it feasible for real-world deployment.

Weaknesses:
- The testing scenarios do not fully reflect real-world conditions, limiting the generalizability of results.
- The experimental evaluation lacks completeness, focusing on low-volume queries and insufficiently addressing the performance overhead from Wasm compilation and instantiation.
- Certain aspects of the presentation are unclear, requiring more precise articulation, particularly regarding debugging methods and the impact of the OpenAPI-to-GraphQL tool.

### Suggestions for Improvement
We recommend that the authors improve the experimental evaluation by testing on larger datasets to better reflect real-world scenarios and explicitly measure the performance overhead introduced by Wasm compilation and instantiation. Additionally, the authors should acknowledge the limitations of using C as the source language and consider including comparisons with other recent API optimization frameworks, such as Falcor or gRPC. To enhance clarity, we suggest providing more detailed explanations of technical terms and improving the articulation of research challenges in the introduction. Finally, addressing potential vulnerabilities associated with the Wasm-based system and providing a more detailed analysis of the trade-offs involved in the debugging approach would strengthen the paper.