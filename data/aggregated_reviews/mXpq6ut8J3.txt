ID: mXpq6ut8J3
Title: SWE-agent: Agent-Computer Interfaces Enable Automated Software Engineering
Conference: NeurIPS
Year: 2024
Number of Reviews: 7
Original Ratings: 6, 7, 8, 6, -1, -1, -1
Original Confidences: 5, 4, 4, 3, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents SWE-agent, a system that enables language model (LM) agents to autonomously perform software engineering tasks through a custom agent-computer interface (ACI). The authors argue that LM agents require interfaces tailored to their unique needs, similar to integrated development environments (IDEs) for human engineers. SWE-agent achieves state-of-the-art performance on benchmarks such as SWE-bench and HumanEvalFix, demonstrating significant improvements over non-interactive LMs. The paper includes detailed analyses of how different ACI design choices impact agent behavior and performance.

### Strengths and Weaknesses
Strengths:  
- Strong empirical results: SWE-agent significantly outperforms previous approaches on challenging benchmarks, particularly on SWE-bench.  
- Novel concept: The introduction of ACIs as a distinct category from human-computer interfaces is an important contribution.  
- Comprehensive evaluation: The paper includes extensive ablation studies and analyses, providing valuable insights into interface design choices.  
- Open-source contribution: The authors provide anonymized code and data, facilitating reproducibility and further research.  

Weaknesses:  
- Generalizability: The focus on software engineering tasks raises questions about how well ACI design principles would apply to other domains.  
- Complexity and efficiency: The ACI introduces additional layers of complexity and potential overhead that are not fully quantified.  
- Lack of methodological insights: The paper does not adequately justify the choice of specific functionalities like search and navigation, nor does it explore the potential for additional operations.  
- Limited tool support: The ACI appears to support a restricted set of tools, with unclear pathways for expansion to more advanced functionalities.  

### Suggestions for Improvement
We recommend that the authors improve the justification for the selected functionalities of the ACI by including observations or ablation studies that support the design choices. Additionally, clarifying how the ACI manages context history and handles repeated failed edits would enhance understanding. The authors should also explore the generalizability of ACI principles to other domains and consider expanding the toolset supported by the ACI. Finally, we suggest providing a more transparent method for optimizing ACI configurations to improve clarity.