ID: 30XanJanJP
Title: EffiBench: Benchmarking the Efficiency of Automatically Generated Code
Conference: NeurIPS
Year: 2024
Number of Reviews: 11
Original Ratings: 7, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1
Original Confidences: 4, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents "EFFIBENCH," a benchmark designed to evaluate the efficiency of automatically generated code, addressing the gap in performance between LLM-generated codes and standard solutions. The authors collect 2,605 LeetCode problems, narrowing it down to 1,146 typical algorithm problems, and utilize LLMs to generate test cases. The dataset aims to facilitate assessments of code efficiency, revealing that many state-of-the-art models produce correct but inefficient code.

### Strengths and Weaknesses
Strengths:
- The authors release a novel code efficiency profiling dataset and conduct a thorough analysis of model-generated code efficiency.
- The paper evaluates 42 LLMs, providing rich baseline results that enhance understanding of code generation efficiency.

Weaknesses:
- The problem distribution is limited, sourced from a narrow range of LeetCode questions.
- Clarity is lacking in the explanation of experimental results, particularly in Section 5.1, which merely rephrases results without in-depth analysis.
- There is insufficient analysis of the reliability of generated test cases and the metrics used for measuring memory usage.

### Suggestions for Improvement
We recommend that the authors improve the diversity of problem sources to enhance the dataset's robustness. Additionally, consider using the Gem5 simulator for more accurate runtime profiling, as variations in measured runtimes can occur. We suggest providing a detailed analysis of the numerical results, particularly regarding the performance differences among models based on their characteristics. Furthermore, the authors should ensure the reliability of the test cases by verifying the validity of inputs and outputs and discussing the potential data leakage from LeetCode problems. Lastly, a thorough examination of the interplay between time and space complexity in the context of efficiency metrics would be beneficial.