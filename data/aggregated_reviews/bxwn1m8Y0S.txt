ID: bxwn1m8Y0S
Title: PanoptiChrome: A Modern In-browser Taint Analysis Framework
Conference: ACM
Year: 2023
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a new taint engine built atop Chrome's V8, aiming to provide a maintainable and configurable framework for taint analyses, addressing long-standing issues in the community. The authors claim that their engine can significantly impact future research by eliminating the need for custom taint analyses. However, the engine's taint propagation mechanism is simplistic and does not adequately track taint propagation, limiting its ability to replicate more complex techniques. The authors also study potential fingerprinting vectors but label certain data flows as leaks without sufficient justification, potentially inflating their severity.

### Strengths and Weaknesses
Strengths:
- The paper offers a strong technical contribution with a maintainable taint engine.
- The design is portable across Chromium versions and requires limited modifications.
- The authors provide extensive evaluation using real-world websites, and the source code is available for community use.

Weaknesses:
- Claims regarding fingerprinting are shallow and lack depth.
- The evaluation of maintainability is unclear, and the methodology lacks detail.
- Some technical details are poorly explained, and comparisons with related works are insufficient.

### Suggestions for Improvement
We recommend that the authors improve the clarity of their claims regarding maintainability by providing insights into the maintenance process for patches, including how new bytecode instructions and AST nodes will be managed. Additionally, the authors should tone down exaggerated claims, such as the indistinguishability of their approach from normal user behavior, and provide citations for unsupported statements. It would also be beneficial to include a comparison with other taint tracking systems, such as Foxhound, and to clarify the methodology regarding API calls from third-party iframes. Finally, we suggest demonstrating more use cases for the taint engine beyond the current focus on fingerprinting to strengthen its applicability and relevance.