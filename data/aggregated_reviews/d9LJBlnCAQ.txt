ID: d9LJBlnCAQ
Title: Passage: Ensuring Completeness and Responsiveness of Public SPARQL Endpoints with SPARQL Continuation Queries
Conference: ACM
Year: 2024
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a novel approach to executing SPARQL queries over public endpoints while ensuring their completeness through the introduction of SPARQL continuation queries. The authors propose a method that returns partial results and continuation queries when timeouts occur, addressing a critical issue faced by many real-world applications. The explanation is clear, supported by formal problem definitions and illustrative examples, and the experimental evaluation compares their solution with existing SPARQL engines, demonstrating its effectiveness, particularly on systems with limited hardware resources.

### Strengths and Weaknesses
Strengths:
- The problem is well-motivated and relevant to the conference audience.
- The paper is clearly written, with a thorough formalization and illustrative examples.
- The evaluation is solid, particularly the comparison of performance with and without timeouts.
- The authors provide a well-documented code repository for reproducibility.

Weaknesses:
- The selection of SPARQL engines for comparison is limited, excluding notable engines like GraphDB and Virtuoso.
- The absence of client concurrency considerations in the experimental setup is a significant oversight.
- The discussion of results lacks depth, primarily focusing on numerical outcomes without detailed analysis.
- Some concepts and symbols are not explicitly defined, which could hinder readability.

### Suggestions for Improvement
We recommend that the authors improve the experimental evaluation by including additional SPARQL engines such as GraphDB and Virtuoso to provide a broader perspective on performance. It is essential to consider client concurrency in the evaluation, as public SPARQL endpoints typically handle multiple clients simultaneously. We suggest incorporating continuous evaluation metrics, as proposed in [1], to enhance the analysis of performance under varying client loads. Additionally, a deeper analysis of the results, including the implications of findings, would strengthen the discussion. We also advise clarifying the meaning of `#TO/Total` in Table 2 and ensuring that all symbols and functions are explicitly defined to improve clarity. Finally, addressing the questions regarding the handling of interruptions and the rationale behind the focus on NOT EXISTS filters would enhance the paper's comprehensiveness.