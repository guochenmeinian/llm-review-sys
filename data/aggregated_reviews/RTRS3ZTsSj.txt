ID: RTRS3ZTsSj
Title: ANPL: Towards Natural Programming with Interactive Decomposition
Conference: NeurIPS
Year: 2023
Number of Reviews: 15
Original Ratings: 7, 5, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Original Confidences: 4, 3, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents the Abstracted Natural Programming Language (ANPL), a programming language and system designed to enhance Large Language Model (LLM) assisted programming. ANPL organizes programs in a top-down structure, utilizing a "sketch" to define data flow and "holes" for specific functionalities. The ANPL compiler translates these programs into conventional Python, leveraging LLMs for implementation. The system includes debugging features such as execution traces and user edit merging. A human study demonstrates that ANPL enables users to complete programming tasks more quickly and successfully than traditional LLM interactions. Additionally, the authors provide a dataset of 300/400 human-decomposed reasoning tasks from the ARC benchmark.

### Strengths and Weaknesses
Strengths:
- The design of ANPL is innovative, effectively integrating LLMs into programming workflows.
- The user study is significant, providing thorough analysis and demonstrating ANPL's advantages over baseline methods.
- The paper is well-written and presents insightful experiments and ablations.

Weaknesses:
- The presentation lacks clarity regarding the specifics of ANPL programs, particularly the definitions of "sketch" and "hole."
- The user interface is not adequately discussed in the main paper, limiting understanding of the system's contributions.
- The experiments may conflate additional features with the core functionality of ANPL, complicating the assessment of its essential components.
- The evaluation is primarily based on ARC tasks, which may not reflect real-world programming scenarios.

### Suggestions for Improvement
We recommend that the authors improve the clarity of the presentation by explicitly defining what an ANPL program looks like, including clear examples of "sketch" and "hole" code in the main paper. Additionally, the authors should include a discussion of the user interface in the main text, as it is a crucial aspect of the programming system. To enhance the experimental evaluation, we suggest incorporating a baseline of users programming directly in Python to better assess ANPL's effectiveness. Furthermore, we recommend that the authors ensure that successful programs satisfy both training and test cases when measuring success rates. Finally, exploring the applicability of ANPL in more diverse and complex programming tasks would strengthen the paper's contributions.