ID: ztLdwtbVpy
Title: GRASP: Hardening Serverless Applications through Graph Reachability Analysis of Security Policies
Conference: ACM
Year: 2023
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents GRASP, a Prolog-based framework for analyzing access control policies for the Lambda serverless platform. GRASP enables querying IAM policies for potential vulnerabilities, including publicly exposed resources, read/write paths, and exfiltration to public resources. The authors evaluate GRASP on a dataset of 731 open-source applications, revealing a prevalence of over-privileged policies and discussing representative case studies.

### Strengths and Weaknesses
Strengths:
- GRASP allows querying a Serverless Framework YAML file for potential vulnerabilities in access control policy definitions.
- The authors construct a dataset of open-source applications using the Serverless Framework, which can be beneficial for future research.
- The tool provides a comprehensive analysis of application specifications and security policies, offering a holistic view of potential security risks.

Weaknesses:
- The completeness of GRASP regarding AWS features and services needs clarification, particularly concerning potential false negatives.
- The security implications of GRASP's results should be emphasized, including the actual exploitability of reported vulnerabilities.
- The paper lacks developer feedback and does not consider the serverless code itself, focusing solely on policies.
- The evaluation methodology may not comprise a sufficiently diverse sample, as many policies contain only a single statement.

### Suggestions for Improvement
We recommend that the authors improve the clarity regarding the completeness of GRASP by reporting supported AWS features in a table and discussing the potential for false negatives. Additionally, the authors should highlight the security implications of GRASP results by presenting a case study of real-world exploitability and clarifying how many of the reported vulnerabilities can be exploited. To enhance the paper's practical relevance, we suggest obtaining feedback from developers of the applications in the dataset and considering the actual serverless code in conjunction with the policies. Furthermore, including a real motivating example throughout the paper could provide more concreteness to the reader. Lastly, addressing the limitations of offline analysis and the handling of dynamic configuration values would strengthen the paper's contributions.