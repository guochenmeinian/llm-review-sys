ID: TDkBQMfNKe
Title: WEFix: Intelligent Automatic Generation of Explicit Waits for Efficient Web End-to-End Flaky Tests
Conference: ACM
Year: 2023
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents WEFix, a technique designed to automatically generate explicit waits for web end-to-end (e2e) tests that experience flakiness due to UI changes. WEFix records DOM mutations triggered by commands and generates appropriate wait oracles, utilizing a finite state machine to model these events for correctness and efficiency. The evaluation of WEFix on seven real-world web projects demonstrates its ability to fix 98% of UI-based flaky tests with minimal overhead.

### Strengths and Weaknesses
Strengths:
- The paper addresses a significant problem in web testing.
- WEFix is evaluated on popular real-world projects, showing high effectiveness in fixing flaky tests.
- The dataset is publicly available, enhancing reproducibility.
- The approach is innovative, leveraging explicit waits to improve upon traditional methods.

Weaknesses:
- There is a lack of comparison with other existing techniques for addressing UI flakiness.
- The evaluation is limited to Chrome and CircleCI, raising questions about generalizability across different browsers and platforms.
- Potential issues with false positives and false negatives are not discussed.
- The absence of user studies or feedback limits understanding of practical usability.
- Scalability evaluation on large-scale applications is not addressed.
- The paper lacks an in-depth discussion of results and specific failure cases.

### Suggestions for Improvement
We recommend that the authors improve the paper by including comparisons with other techniques, such as Flakiness Diagnosis and Fixing or Flakiness Detection and Localization, to highlight WEFix's advantages and disadvantages. Additionally, expanding the evaluation to include various browsers and platforms would demonstrate the robustness of WEFix. 

We suggest discussing the potential for false positives and false negatives, including methods to measure and mitigate these issues. Conducting a user study could provide valuable insights into developer experiences with WEFix, informing potential improvements. 

Furthermore, we recommend evaluating the scalability of WEFix on larger web applications and test suites to assess its practical applicability. Lastly, a more detailed discussion of the results, particularly regarding the two failing cases and any unnecessary delays added by WEFix, would enhance the paper's depth.