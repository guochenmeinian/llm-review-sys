ID: 483IPG0HWL
Title: ReEvo: Large Language Models as Hyper-Heuristics with Reflective Evolution
Conference: NeurIPS
Year: 2024
Number of Reviews: 17
Original Ratings: 5, 5, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Original Confidences: 5, 3, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a novel approach to combinatorial optimization problems (COPs) using a large language model (LLM)-enhanced evolutionary algorithm called ReEvo. The core idea is to integrate genetic programming (GP) with LLMs to dynamically generate and refine heuristics through short-term and long-term reflection mechanisms. The authors demonstrate the effectiveness of their method across five different COPs, comparing it with existing heuristic and neural solvers.

### Strengths and Weaknesses
Strengths:
1. The application of LLMs to generate heuristics for COPs is innovative.
2. The experiments are extensive and detailed, showcasing the proposed method's efficacy.
3. The paper is well-written, making the core ideas accessible.

Weaknesses:
1. ReEvo appears to depend on existing heuristic or neural solvers, raising questions about its ability to independently discover new heuristics.
2. The experiments do not include comparisons with state-of-the-art (SOTA) methods, such as LKH-3 or recent non-autoregressive neural solvers, which limits the assessment of ReEvo's performance.
3. Certain sections, particularly Section 4, lack clarity regarding the implementation of reflection mechanisms and the assurance of executable code.

### Suggestions for Improvement
We recommend that the authors improve the clarity of the GP algorithm details and explicitly address how short-term and long-term reflections enhance heuristic design. Additionally, it would be beneficial to conduct experiments comparing ReEvo with SOTA methods to substantiate its advantages. The authors should also consider discussing the costs associated with using LLM APIs, as this could impact reproducibility. Finally, exploring the applicability of ReEvo to other string-based optimization scenarios would strengthen the paper's contributions.