ID: FtNruwFEs3
Title: Exact Bayesian Inference on Discrete Models via Probability Generating Functions: A Probabilistic Programming Approach
Conference: NeurIPS
Year: 2023
Number of Reviews: 8
Original Ratings: 8, 6, 8, 8, -1, -1, -1, -1
Original Confidences: 4, 2, 4, 5, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a new approach to exact inference in probabilistic programs by constructing the moment-generating function ($G(x) = \mathbb{E}_{X \sim \mu}[x^X]$) for the distribution represented by the program. The authors utilize higher-order derivatives (using automatic differentiation) to compute exact posterior marginal probabilities and moments, enabling automated exact inference in a broader class of models than existing techniques. The implementation in Rust demonstrates that their approach typically computes exact answers faster than Anglicanâ€™s Monte Carlo algorithms. Additionally, the paper introduces a probabilistic programming language called statistical guarded command language (SGCL) for discrete statistical models, particularly effective for challenging distributions with infinite support.

### Strengths and Weaknesses
Strengths:
- The paper introduces a significant new approach to probabilistic programming language (PPL) inference that is clear and accessible to a broad audience.
- The generating function approach effectively addresses limitations of existing exact inference methods, particularly in marginalizing latent variables with infinite support.
- Limitations and performance concerns are transparently outlined, and the appendix includes rigorous correctness proofs and a Rust implementation that clarifies the technique.

Weaknesses:
- The differences between this work and Klinkenberg et al.'s recent LAFI abstract could be more clearly articulated, including a citation for clarity.
- The fundamental limitations of the language versus those made for simplicity in the first implementation are unclear, particularly regarding extensions to programs with loops or compound distributions.
- Experiments focus on programs where existing methods fail, lacking comparisons with existing methods on programs both can handle.
- Incorrect statements regarding WebPPL's support for SMC and particle MCMC need correction.

### Suggestions for Improvement
We recommend that the authors improve the clarity of the distinctions between their approach and that of Klinkenberg et al. by including relevant citations and explanations. Additionally, the authors should clarify whether the limitations of their language are fundamental or implementation-specific, particularly regarding extensions to more complex programs. It would be beneficial to include comparisons with existing methods on programs that both approaches can handle to better illustrate the expressiveness and efficiency trade-offs. Finally, the authors should correct the inaccuracies regarding WebPPL's capabilities and consider addressing the syntax richness in the paper.