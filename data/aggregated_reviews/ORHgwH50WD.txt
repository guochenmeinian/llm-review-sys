ID: ORHgwH50WD
Title: FusionRender: Harnessing WebGPUâ€™s Power for Enhanced Graphics Performance on Web Browsers
Conference: ACM
Year: 2023
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents FusionRender, a system designed to enhance the performance of WebGPU-backended graphics rendering frameworks. The authors analyze the causes of poor performance in existing frameworks and propose two measures: object grouping and merged rendering, aimed at optimizing rendering efficiency by minimizing redundant communication through the consolidation of draw calls. The performance of FusionRender is evaluated across various scenarios, devices, and browsers, yielding significant insights into the potential improvements offered by WebGPU.

### Strengths and Weaknesses
Strengths:
- Clear motivation and optimization goal, with well-structured and high-quality writing.
- The investigation into the underperformance of current WebGPU frameworks compared to WebGL provides valuable insights.
- The innovative approach of maximizing communication efficiency through draw call consolidation demonstrates thoughtful design, achieving promising results in both simulated and real-world experiments.

Weaknesses:
- The contribution is limited, focusing solely on the rendering framework rather than enhancing the frameworks themselves.
- The method lacks novelty, relying on common ideas without detailing the critical algorithmic aspects, particularly how the signature is calculated, which significantly influences grouping results.
- The paper does not adequately address the generalizability of the framework to various web applications or the implications of varying browser support for WebGPU.
- Scalability limitations and strategies for managing complex graphics scenarios are not discussed, which could enhance practical insights.

### Suggestions for Improvement
We recommend that the authors improve the discussion on the generalizability of FusionRender to different types of web applications beyond those mentioned. Additionally, addressing the varying levels of WebGPU support in different browsers would provide a more holistic view of the framework's applicability. We suggest that the authors elaborate on the scalability of FusionRender and include a discussion on its limitations and potential future extensions. Furthermore, clarifying the integration challenges of FusionRender with existing systems and providing insights into how it adapts to future WebGPU developments would enhance the paper's depth. Lastly, we recommend removing the performance cap in Figure 5 to better present the benefits of FusionRender and clarifying the challenges of real-world examples compared to simulated ones.