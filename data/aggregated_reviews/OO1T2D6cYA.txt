ID: OO1T2D6cYA
Title: Unveiling the Invisible: Detection and Evaluation of Prototype Pollution Gadgets with Dynamic Taint Analysis
Conference: ACM
Year: 2023
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a dynamic taint analysis system, Dasty, designed to identify gadgets used in prototype pollution attacks within Node.js applications. The authors successfully discovered 49 exploitable gadgets in real-world NPM packages and demonstrated the tool's effectiveness by constructing an end-to-end exploit for the Kibana application. The research addresses a critical issue in security by uncovering vulnerabilities that could be exploited through prototype pollution.

### Strengths and Weaknesses
Strengths:
- The research problem of gadget detection in Node.js applications is significant, and the findings are impactful, resulting in a high-severity CVE.
- Dasty effectively identifies gadgets and has been validated through manual verification and successful exploit construction.
- The authors plan to open-source Dasty, contributing to the community.

Weaknesses:
- The technical novelty is limited, as much of the detection capability derives from prior work, particularly Silent Spring, which also detects gadgets.
- The paper lacks a clear evaluation of false positives and negatives, which is crucial for understanding the tool's effectiveness.
- The contribution of the UI component for visualizing code flows is unclear, and there is insufficient detail on how user-friendly it is for regular users.
- The comparison with Silent Spring and other static tools is inadequate, leaving the advantages of Dasty's approach ambiguous.

### Suggestions for Improvement
We recommend that the authors improve the clarity of the technical contributions by providing a detailed comparison between Dasty and Silent Spring, highlighting their respective strengths and weaknesses. Additionally, the authors should conduct a user study to evaluate the usability of the IDE visualization component and report the results in the paper. It is essential to include a systematic discussion of false positives and negatives, particularly regarding the impact of force execution on the results. Furthermore, we suggest enhancing the evaluation of the vulnerabilities discovered by providing context on the popularity of the packages and conducting a more in-depth analysis of the vulnerable data flows. Finally, addressing the clarity of the effectiveness comparison between Dasty and Augur would strengthen the paper's contribution.