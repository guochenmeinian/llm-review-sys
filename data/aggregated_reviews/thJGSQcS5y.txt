ID: thJGSQcS5y
Title: (In)Security of File Uploads in Node.js
Conference: ACM
Year: 2023
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents NODESEC, a tool designed to analyze file upload vulnerabilities in Node.js libraries and applications. The evaluation highlights that Unrestricted File Upload (UFU) is the most significant vulnerability category within the Node.js ecosystem. The authors analyze six popular server-side file upload libraries, which collectively have two million weekly downloads, and conduct tests on 11 real-world web applications, categorizing 13 different attacks into three groups: (1) File Name-based Attacks, (2) File Type-based Attacks, and (3) File Content-based Attacks. The evaluation results in 19 CVEs and two US-CERT cases, primarily due to security overlay errors, misconfigurations, and unaddressed edge cases in custom implementations. While the methodology is somewhat limited, the results provide valuable guidelines for Node.js developers.

### Strengths and Weaknesses
Strengths:
- Comprehensive analysis of file upload vulnerabilities in popular Node.js libraries and applications.
- The NODESEC tool is open-sourced and facilitates responsible vulnerability disclosures.
- Clear presentation of results and findings, contributing to the understanding of UFU issues.

Weaknesses:
- Limited novelty, as the identified vulnerabilities are well-known and not unique to Node.js.
- Insufficient detail on the methodology and threat model, particularly regarding the consequences of the attacks.
- Lack of empirical evidence demonstrating the real-world impact of the vulnerabilities.

### Suggestions for Improvement
We recommend that the authors improve the explanation of the methodology in NODESEC, particularly by detailing the threat model and conducting a risk analysis of each attack, including potential consequences such as malicious file uploads, Denial of Service (DoS) attacks, and sensitive data exposure. Additionally, the authors should clarify the selection criteria for the Node.js libraries and applications evaluated, including the number of libraries matching the download criteria and the exact dates of measurement. Providing a timeline for vulnerability disclosures, including report, response, acknowledgment, CVE issuance, and patching, would enhance the paper's comprehensiveness. Finally, we suggest discussing generic countermeasures for UFU vulnerabilities and providing empirical evidence of how uploaded files can lead to successful attacks in real-world scenarios.