ID: a0yFO9gKc5
Title: Benchmarking and Improving Text-to-SQL Generation under Ambiguity
Conference: EMNLP/2023/Conference
Year: 2023
Number of Reviews: 4
Original Ratings: -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a study on the ambiguity in text-to-SQL semantic parsing, introducing AmbiQT, a benchmark with over 3000 examples where each natural language query maps to two valid SQL queries reflecting various types of ambiguity (column, table, join, aggregates). The authors analyze the limitations of current text-to-SQL models in handling ambiguity and propose LogicalBeam, a new decoding algorithm that enhances the coverage of ambiguity by generating diverse SQL skeletons and filling them in a constrained manner.

### Strengths and Weaknesses
Strengths:
- AmbiQT effectively addresses the previously overlooked problem of ambiguity in text-to-SQL, filling a significant gap in existing benchmarks.
- The paper provides insightful analysis on the shortcomings of current models in managing ambiguity.
- LogicalBeam demonstrates substantial improvements in generating diverse SQL outputs, with comprehensive results compared to state-of-the-art models.
- The writing is clear and the contributions are impactful.

Weaknesses:
- AmbiQT only covers specific predefined types of ambiguity and relies on a modified dataset, limiting its applicability to open-domain scenarios.
- There is insufficient analysis of LogicalBeam's limitations and errors.
- The two-step model training approach increases overhead, and exploring end-to-end training could be advantageous.
- The gains on the SPIDER dataset are modest, necessitating further analysis of the specific ambiguities addressed by AmbiQT.

### Suggestions for Improvement
We recommend that the authors improve the analysis of LogicalBeam's performance by investigating its limitations and identifying ambiguity patterns it struggles with. Additionally, providing a thorough explanation of the LogicalBeam algorithm, including its design principles and implementation details, would enhance clarity. Exploring end-to-end training for the skeleton generation and filling steps could reduce training overhead. Finally, we suggest validating the naturalism of the ambiguous schemas used in AmbiQT and considering broader evaluations beyond this benchmark to establish its generalizability.