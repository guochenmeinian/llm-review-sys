ID: OP2D9sIdo4
Title: Suitable is the Best: Task-Oriented Knowledge Fusion in Vulnerability Detection
Conference: NeurIPS
Year: 2024
Number of Reviews: 8
Original Ratings: 7, 4, 6, 6, -1, -1, -1, -1
Original Confidences: 4, 4, 3, 2, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents KF-GVD, a novel Knowledge Fusion-based Graph Neural Network (GNN) model aimed at detecting vulnerabilities in C/C++ source code. KF-GVD utilizes Code Property Graphs (CPGs) to effectively represent the structure and semantics of the source code, allowing for flexible feature extraction tailored to specific tasks. The experimental results indicate that KF-GVD outperforms state-of-the-art static analysis and machine learning-based methods in vulnerability detection, successfully identifying nine 0-day vulnerabilities. The integration of task-specific knowledge enhances the model's interpretability and performance, particularly for specialized tasks.

### Strengths and Weaknesses
Strengths:
- The paper is well-written and presents a comprehensive comparison of KF-GVD against various state-of-the-art methods.
- KF-GVD demonstrates significant improvements in vulnerability detection and successfully identifies previously undisclosed vulnerabilities.
- The technical implementation of the KF-GVD framework is robust, with a solid GNN architecture and a thorough empirical assessment.

Weaknesses:
- The justification for using CPGs over alternatives like Control Flow Graphs (CFG) is insufficiently discussed, and the paper lacks details on feature extraction processes.
- The explanation of statement-level vulnerability detection is ambiguous, and the paper does not provide a rigorous comparative analysis with closely related works.
- Limitations regarding the dataset size and the computational efficiency of KF-GVD are not adequately addressed.

### Suggestions for Improvement
We recommend that the authors improve the justification for using CPGs by discussing potential alternatives such as CFG and providing a comparative analysis of their effectiveness in vulnerability detection. Additionally, the authors should clarify the feature extraction process and enhance the explanation of statement-level vulnerability detection. To strengthen the paper, we suggest including more statistical metrics, such as confidence intervals or p-values, and conducting a broader evaluation across diverse software projects and vulnerability types. Finally, we encourage the authors to move the limitations section from the appendix to the main content for better visibility.