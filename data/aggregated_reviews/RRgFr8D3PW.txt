ID: RRgFr8D3PW
Title: WaSCR: A WebAssembly Instruction-Timing Side Channel Repairer
Conference: ACM
Year: 2024
Number of Reviews: 4
Original Ratings: -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents WaSCR, a tool designed to detect and repair instruction-timing side-channel vulnerabilities in WebAssembly programs. By utilizing static analysis and rule-based code transformations, WaSCR aims to identify and remediate code sections that may lead to information leakage. The authors assert that WaSCR effectively mitigates timing side-channel attacks while maintaining program correctness. However, the paper lacks depth in innovation, breadth of experiments, and comparisons with existing technologies.

### Strengths and Weaknesses
Strengths:
- The paper is well-written, with a clear problem definition and logical flow from motivation to solution.
- The evaluation demonstrates WaSCR's effectiveness in eliminating timing side channels while maintaining acceptable performance overheads.

Weaknesses:
- The claims regarding existing methods requiring extensive manual effort may be exaggerated; alternatives like CT-Wasm provide automated solutions that reduce manual intervention.
- The rule-based transformation module may lack adaptability to emerging side-channel patterns, limiting its applicability in dynamic environments.
- Experiments lack direct comparisons with other technologies, making it difficult to assess WaSCR's advantages.
- Insufficient evaluation of security enhancements post-repair raises concerns about the comprehensiveness of the approach.

### Suggestions for Improvement
We recommend that the authors improve the discussion on the limitations of existing schemes, providing specific examples to substantiate claims about platform dependency and manual effort. Additionally, the authors should enhance the design section by addressing how WaSCR handles memory access operations and the prevalence of external functions within sensitive code branches. To strengthen the evaluation, we suggest including comparisons with other baseline methods and a more detailed analysis of experimental results, particularly regarding security enhancements and performance overheads. Lastly, consider improving the presentation of technical details by incorporating better visualizations instead of relying heavily on binary code snippets.