ID: 8iytZCnXIu
Title: BricksRL: A Platform for Democratizing Robotics and  Reinforcement Learning Research and Education with LEGO
Conference: NeurIPS
Year: 2024
Number of Reviews: 7
Original Ratings: 7, 6, 5, 6, -1, -1, -1
Original Confidences: 4, 5, 3, 4, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents BricksRL, a framework for training reinforcement learning (RL) policies on LEGO robots, integrating the LEGO robotics hub PyBricks with the reinforcement learning library TorchRL. The authors demonstrate the system's capabilities through experiments on three LEGO robots (2wheeler, walker, and robotarm), validating its effectiveness for real-world applications. The framework supports off-policy algorithms and provides an offline dataset for further research. 

### Strengths and Weaknesses
Strengths:  
- The low-cost and modular nature of LEGO parts allows for flexible robot designs tailored to specific tasks, making it an inspiring platform for low-cost robotics research.  
- The paper effectively demonstrates the deployment of RL algorithms on LEGO robots, showcasing practical utility through detailed experimental results.  
- The integration of PyBricks and TorchRL facilitates robust communication between the robot, environment, and algorithms, proving the system's reliability in real-world scenarios.  
- The findings indicate that simple tasks can be trained in under 120 minutes on standard computers, enhancing accessibility for educational settings.  

Weaknesses:  
- The system's communication frequency is limited to 11 Hz due to integration overhead, restricting its ability to perform dynamic manipulation tasks.  
- The paper lacks innovation in algorithm development, focusing instead on combining existing technologies without introducing new methods.  
- The tasks demonstrated are relatively simple, raising questions about the framework's applicability to more complex scenarios.  
- Clarity issues arise from the inclusion of implementation details in the main text that could be better suited for an appendix, potentially hindering readability.  

### Suggestions for Improvement
We recommend that the authors improve the clarity of the paper by relocating implementation details, such as the PyBricksHubClass and BaseEnv descriptions, to an appendix. Additionally, consider addressing the robustness of the system more thoroughly, particularly regarding how policies adapt to communication speed limitations, sensor noise, and hardware deviations during training. Expanding discussions on the limitations of the framework, especially concerning wear and tear on low-cost robots, would enhance the paper's depth. Finally, exploring the integration of more complex manipulation tasks could broaden the impact of BricksRL in the field.