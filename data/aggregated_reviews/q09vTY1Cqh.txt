ID: q09vTY1Cqh
Title: RepoCoder: Repository-Level Code Completion Through Iterative Retrieval and Generation
Conference: EMNLP/2023/Conference
Year: 2023
Number of Reviews: 4
Original Ratings: -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a study on repository-level code completion, introducing RepoCoder, an iterative retrieval and generation framework, and a new dataset called RepoEval, which includes 1600 examples of line and API completion tasks and 373 examples of function completion tasks. The authors demonstrate that RepoCoder outperforms the in-file baseline by over 10% and provide thorough experiments showcasing its effectiveness. The paper is well-structured and accessible to a broad NLP audience.

### Strengths and Weaknesses
Strengths:
- The proposed method is simple yet effective for repository-level code completion.
- Strong analysis elucidates the sources of improvements in code completion tasks.
- The introduction of the RepoEval dataset is a significant contribution to the field.
- The paper is clearly written and easy to follow, with thorough experimental validation.

Weaknesses:
- The in-file baseline lacks strength; comparisons with existing cross-file methods are missing.
- Hyper-parameter tuning appears to be conducted on test sets, which raises concerns.
- The iterative retrieval and generation approach may not be practical due to latency issues.
- The method does not fundamentally resolve the repository-level code completion problem, particularly when API call exemplars are absent or misleading.

### Suggestions for Improvement
We recommend that the authors improve the strength of the in-file baseline by including comparisons with existing cross-file methods. Additionally, we suggest clarifying the hyper-parameter tuning process to ensure it does not involve test data. To enhance practical applicability, we encourage the authors to conduct experiments focusing on time efficiency and compare their method with commercial code completion applications like Copilot. Lastly, addressing potential data leaks and discussing relevant recent work in the related literature would strengthen the paper's contributions.