ID: 14cNPqydxL
Title: MAD: Move AI Decompiler to Improve Transparency and Auditability on Non-Open-Source Blockchain Smart Contract
Conference: ACM
Year: 2024
Number of Reviews: 3
Original Ratings: -1, -1, -1
Original Confidences: -1, -1, -1

Aggregated Review:
### Key Points
This paper presents an AI-powered tool, the Move AI Decompiler (MAD), designed to decompile non-open-source Sui Move blockchain smart contracts into readable, recompilable source code. The tool aims to enhance transparency in the Web3 ecosystem, enabling developers and auditors to verify smart contract security. The authors combine traditional decompilers with Large Language Models (LLMs) and provide evidence of the tool's effectiveness through a user study. The paper discusses the tool's ability to achieve a recompile rate exceeding 60% and highlights its user-friendly output compared to existing solutions like Revela.

### Strengths and Weaknesses
Strengths:
1. The paper is well-written and accessible.
2. The recompile rate for both unit tests and real-world cases exceeds 60%.
3. A thorough user study demonstrates that MAD produces more human-readable code with reduced mental effort.

Weaknesses:
1. The novelty is limited, as the problem has been previously addressed, and the solution relies on LLMs with hard-coded domain knowledge and few-shot prompting.
2. There is a lack of detailed comparative analysis with previous works, particularly Revela and the Move Dissambler.
3. The evaluation is underpowered, with a sample size of only N=5, raising concerns about the robustness of the findings.
4. The accuracy of the tool is questioned, as it does not test for functional equivalence and exhibits frequent hallucinations.

### Suggestions for Improvement
We recommend that the authors improve the sample size of the user study to enhance the statistical power of the results. Additionally, a detailed comparative analysis with Revela and the Move Dissambler should be included to substantiate claims of superiority. An ablation study is also suggested to demonstrate the contributions of domain-specific knowledge, error instructions, and few-shot examples. Furthermore, the authors should address the accuracy concerns by testing for functional equivalence and providing users with assurance regarding the output's accuracy.