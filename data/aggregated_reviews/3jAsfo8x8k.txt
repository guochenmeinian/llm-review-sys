ID: 3jAsfo8x8k
Title: PERFOGRAPH: A Numerical Aware Program Graph Representation for Performance Optimization and Program Analysis
Conference: NeurIPS
Year: 2023
Number of Reviews: 8
Original Ratings: 7, 7, 6, 6, -1, -1, -1, -1
Original Confidences: 5, 4, 3, 4, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents PerfoGraph, a novel graph-based program representation that builds on PrograML to enhance performance optimization and program analysis through graph neural networks (GNNs). The authors propose three key modifications: tracking reused local identifiers and memory locations, employing decimal-based encoding for numerical constants, and representing composite data types by breaking down arrays and vectors into multiple nodes. The evaluation demonstrates that PerfoGraph outperforms PrograML in various tasks, achieving significant accuracy improvements.

### Strengths and Weaknesses
Strengths:
- The paper is well-organized and clearly presents its design decisions.
- It identifies a novel set of features that are validated through a comprehensive evaluation across multiple tasks.
- The proposed modifications effectively enhance the learnability of the LLVM-IR graph for GNNs, particularly in distinguishing composite data structures.

Weaknesses:
- The experimental setup lacks convincing comparisons with PrograML, particularly regarding the choice of encoder (RGCN vs. MPNN) and its impact on performance.
- The contributions appear to be incremental rather than fundamentally new, with insufficient evidence on how each design choice contributes to overall improvements.
- The clarity of the submission is moderate, with some claims about novelty being misleading and lacking adequate explanations for certain design choices.

### Suggestions for Improvement
We recommend that the authors improve the experimental setup to ensure a fair comparison against PrograML by demonstrating that PerfoGraph outperforms PrograML under the same compute budget. Additionally, we suggest moving the ablation studies to the main text to clarify the individual contributions of each design choice. It would also be beneficial to provide a more detailed explanation of how PerfoGraph supports composite data types beyond arrays and vectors. Finally, we encourage the authors to visualize the digit embedding values and compare the computational efficiency of PerfoGraph with PrograML and traditional methods.