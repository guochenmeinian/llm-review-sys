ID: qi0Zrm6E5E
Title: Framework and Benchmarks for Combinatorial and Mixed-variable Bayesian Optimization
Conference: NeurIPS
Year: 2023
Number of Reviews: 20
Original Ratings: 7, 7, 7, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Original Confidences: 3, 3, 4, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a comprehensive framework for benchmarking Mixed-variable and Combinatorial Bayesian Optimizers (MCBO), featuring a diverse set of benchmark datasets derived from both real-world and synthetic sources for thorough evaluation. The authors propose a well-structured Python code that simplifies the implementation and testing of both new and existing Bayesian optimizers, facilitating comparisons across various optimization techniques. The framework is modular, allowing for the combination of different Bayesian Optimization (BO) primitives, and includes evaluations demonstrating the performance of various algorithms. The authors emphasize that their tasks cover a broad spectrum of problem types, enhancing the validity and generalizability of their findings, while also acknowledging limitations in handling very-high dimensional problems. They have improved documentation and provided structured tutorials to facilitate the integration of new methods into their MCBO library.

### Strengths and Weaknesses
**Strengths:**  
- The centralized repository of benchmark datasets is unique and facilitates the evaluation of new Bayesian optimizers.  
- The framework encompasses a wide range of tasks, covering 43% of previously explored tasks with open-source implementations and 60% of non-binary variable tasks.  
- Comprehensive documentation and tutorials are provided, easing the integration of new algorithms and methods.  
- The Python code is well-structured, making it easier for researchers to implement and compare different optimization techniques.  
- The authors have effectively addressed concerns regarding the statistical analysis of results, conducting Friedman tests prior to Wilcoxon tests to ensure appropriate statistical rigor.  
- The inclusion of a random-search-based acquisition optimizer and support for Sobol sampling strategies are valuable enhancements.

**Weaknesses:**  
- The paper lacks detailed discussion on the limitations of the Python code for creating new MCBO algorithms, particularly regarding the coverage of algorithm design dimensions such as multi-objective optimization and black-box constraints.  
- There is insufficient exploration of existing benchmark functions and suites, which could enhance the paper's relevance.  
- The choice of fixed parameters for function evaluations, including the initial design size of 20 points and the total of 200 function evaluations, appears arbitrary and may require further justification.  
- The framework currently lacks support for certain advanced acquisition functions, such as Knowledge Gradient and entropy-based methods, which limits its applicability in some contexts.

### Suggestions for Improvement
We recommend that the authors improve the discussion on the limitations of the Python code, specifically addressing whether any reasonable MCBO algorithm can be implemented merely by adjusting configuration parameters. Additionally, we suggest that the authors provide a more explicit definition of a combinatorial space and include a detailed discussion of the fraction of results from prior work covered by their tasks. It would also be beneficial to clarify the rationale behind the fixed number of function evaluations and the initial design size, potentially by providing more empirical evidence or comparative analysis. Furthermore, we recommend enhancing the explanation of benchmark functions in the appendix and considering the implementation of non-myopic acquisition functions in future updates. Lastly, incorporating basic utilities for analyzing algorithm runs, such as standard anytime plots and expected running time analyses for synthetic benchmarks, could significantly improve the framework's usability.