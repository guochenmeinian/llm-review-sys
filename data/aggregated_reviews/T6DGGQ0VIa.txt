ID: T6DGGQ0VIa
Title: RecurScan: Detecting Recurring Vulnerabilities in PHP Web Applications
Conference: ACM
Year: 2023
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents RecurScan, a novel approach for detecting recurring vulnerabilities in PHP web applications by leveraging security patches. The authors propose a method that combines symbolic tracking and control-flow analysis to generate signatures representing the characteristics of known vulnerabilities. This allows RecurScan to identify similar vulnerabilities despite variations in code implementation. The effectiveness of the tool is demonstrated through extensive evaluation, uncovering 232 previously unknown vulnerabilities, significantly outperforming the state-of-the-art method, HiddenCPG.

### Strengths and Weaknesses
Strengths:
- Significant empirical improvement over prior work, with a large number of previously unknown vulnerabilities identified.
- The methodology is well thought out, combining symbolic information with subgraph similarity, which is a novel technique.
- The paper is well-written and organized, making it easy to follow.
- The authors responsibly reported vulnerabilities to developers, contributing positively to the community.

Weaknesses:
- The scope is limited to PHP and injection vulnerabilities, raising questions about generalizability to other languages.
- Many technical details are unclear, including how RecurScan handles built-in functions and inter-procedural calls in taint analysis.
- The comparison with HiddenCPG lacks fairness, as it uses results from RecurScan as ground truth.
- Some descriptions in the paper are inaccurate or misleading, particularly regarding efficiency claims and technical representations.

### Suggestions for Improvement
We recommend that the authors improve the clarity of technical details, particularly regarding how RecurScan propagates taints and handles built-in functions. Additionally, addressing the limitations of the method, such as its applicability to other programming languages and the fairness of comparisons with existing tools, would strengthen the paper. We suggest including more baseline comparisons with different clone detectors to provide a broader context for the effectiveness of RecurScan. Finally, we encourage the authors to consider using transformer-based models for semantic similarity measurement to enhance their approach.