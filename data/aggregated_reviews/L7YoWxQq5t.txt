ID: L7YoWxQq5t
Title: Program Translation via Code Distillation
Conference: EMNLP/2023/Conference
Year: 2023
Number of Reviews: 4
Original Ratings: -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a novel model named Code Distillation (CoDist) for code translation, introducing a language-agnostic intermediate representation called distilled code. This representation captures the semantic and structural equivalence of code, serving as a translation pivot for any programming language. The authors demonstrate that their model outperforms baselines on the CodeXGLUE and GeeksForGeeks translation benchmarks. Key contributions include the introduction of distilled code and the application of multiple unsupervised code corpora through three distinct self-supervised pre-training tasks.

### Strengths and Weaknesses
Strengths:
- The paper introduces a novel pivot language for code translation and effectively investigates three distinct self-supervised pre-training tasks.
- The motivation is clear, and the writing is thoughtful and well-structured.
- The proposed method achieves strong performance, with results comparable to GPT-3.5-turbo.

Weaknesses:
- The paper lacks sufficient ablation analysis regarding the distilled code methods, failing to explore the impact of excluding syntax tree pruning, unifying basic morphemes, or fuzzing remaining variations individually.
- The unify basic morphemes approach requires numerous manual operations, complicating its extension to additional programming languages.
- The invented language is limited to a single object-oriented paradigm, neglecting other programming paradigms.

### Suggestions for Improvement
We recommend that the authors improve the ablation analysis by conducting studies to verify the effectiveness of the components of the method, including the impact of excluding specific techniques. Additionally, we suggest simplifying the description of the method to enhance clarity. Finally, the authors should consider expanding the applicability of their approach to accommodate multiple programming paradigms beyond the current focus.