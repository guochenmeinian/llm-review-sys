ID: ohvXBIPV7e
Title: CSPG: Crossing Sparse Proximity Graphs for Approximate Nearest Neighbor Search
Conference: NeurIPS
Year: 2024
Number of Reviews: 11
Original Ratings: 5, 7, 4, 7, -1, -1, -1, -1, -1, -1, -1
Original Confidences: 4, 4, 4, 3, -1, -1, -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents CSPG as a novel graph index for vector similarity search, which divides the dataset into sub-datasets with common routing vectors and builds separate graphs for each. During the search, it first traverses a sub-dataset to approach the query's neighborhood, then switches to routing vectors for exploration across all sub-datasets. Experimental results indicate that CSPG enhances query performance speed (QPS) while maintaining the same query recall compared to three existing graph indices.

### Strengths and Weaknesses
Strengths:  
- Vector similarity search is a significant problem, and graph indices provide state-of-the-art performance, making improvements in this area highly relevant.  
- Theoretical analysis is conducted for CSPG.  
- Promising experimental results suggest CSPG can accelerate various graph indices.

Weaknesses:  
- The relationship to HNSW needs clarification, particularly regarding the similarities in their hierarchical structures and whether HNSW can match CSPG's performance through parameter tuning.  
- Experimental validation is insufficient; larger datasets (e.g., 100M scale) should be used, and comparisons with NSG and more challenging datasets (e.g., Text-to-Image) are necessary.  
- The requirement for a larger overlap between sub-datasets limits the number of sub-datasets that can be utilized.

### Suggestions for Improvement
We recommend that the authors improve the clarity of the relationship between CSPG and HNSW, particularly addressing how their approaches differ in redundancy and performance. Additionally, enhance the experimental section by including larger datasets, incorporating NSG, and testing on more challenging datasets. A complete hyperparameter sweep for all baselines should be conducted to verify the performance improvements and ensure reproducibility by providing the experimental code. Finally, consider addressing practical issues such as dynamic updates in the algorithm design, as this aspect is crucial for real-world applications.