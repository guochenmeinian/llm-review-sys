ID: 9U8bqr8epr
Title: EMBERSim: A Large-Scale Databank for Boosting Similarity Search in Malware Analysis
Conference: NeurIPS
Year: 2023
Number of Reviews: 17
Original Ratings: 6, 7, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1
Original Confidences: 3, 4, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1

Aggregated Review:
### Key Points
This paper presents EMBERSim, an enhanced dataset derived from EMBER, aimed at facilitating malware similarity detection through similarity-derived tags. The authors propose a novel similarity method utilizing XGBoost leaf predictions, along with comprehensive metadata enrichment, to address the limitations of existing datasets and enable further research in binary code similarity. They detail workflows for tag enrichment and propose two metrics for evaluating binary code similarity (BCS) algorithms, thereby addressing the scarcity of large-scale benchmarking resources in this field.

### Strengths and Weaknesses
Strengths:
- The paper introduces a significant dataset that fills a gap in large-scale benchmarking for binary code similarity.
- The methodology for tag augmentation is presented clearly and concisely.
- Comprehensive metadata enrichment supports supervised learning and evaluation.
- Initial evaluations yield promising results for malware similarity search.
- The paper is well-written and technically sound.

Weaknesses:
- The paper does not compare the new methodology with existing BCS algorithms, limiting its contextual effectiveness.
- The tagging process is constrained by missing tags and inconsistencies between current and previous AVClass versions.
- More clarity is needed regarding the labeling accuracy of AVClass and the impact of tag co-occurrence thresholds.
- The evaluation primarily focuses on the EMBER dataset, raising concerns about generalizability to other datasets.

### Suggestions for Improvement
We recommend that the authors improve the paper by conducting performance comparisons with other ensemble methods such as Random Forest and GBM, as well as comparing the proposed method against more BCS baselines beyond ssdeep to better characterize performance. Additionally, exploring standard learning-to-rank models like RankBoost, RankNet, and LambdaMART could enhance the evaluation. For ranking performance, incorporating metrics such as NDCG and MAP would provide a more comprehensive assessment. Furthermore, the authors should clarify the computational resources required for their method, enhance the interpretability of how the generated tags relate to specific binary code features, and provide additional analysis on the labeling accuracy of AVClass. Lastly, emphasizing the relevance of malware similarity tasks in the introduction could enhance the paper's impact.