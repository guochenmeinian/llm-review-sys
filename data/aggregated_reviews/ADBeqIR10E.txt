ID: ADBeqIR10E
Title: Detecting and Understanding Self-Deleting JavaScript Code
Conference: ACM
Year: 2023
Number of Reviews: 5
Original Ratings: -1, -1, -1, -1, -1
Original Confidences: -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents a large-scale analysis of self-deleting JavaScript code across the top 1 million web pages, introducing a novel browser-based solution that records deletion behaviors and inclusion trees. The authors propose modifications to the V8 JavaScript engine, enhancing the understanding of script behaviors and their implications for web security. Notably, the paper finds that approximately 8% of self-deleting scripts exhibit some form of malicious activity, although the evaluation conflates legitimate behaviors with security concerns.

### Strengths and Weaknesses
Strengths:
- The findings regarding self-deleting scripts are intriguing and contribute to understanding web security threats.
- The modifications to the V8 engine and the development of a tool for identifying self-deleting behaviors represent a solid technical contribution.
- The paper effectively characterizes the prevalence and types of self-deleting scripts, providing valuable insights for defense mechanisms.

Weaknesses:
- The correlation between self-deletion and malicious intent is weak, with only 8% of analyzed scripts showing suspicious activity.
- Ethical considerations regarding non-intrusive data collection are insufficiently addressed, particularly given the substantial fraction of sites from which data collection failed.
- The methodology lacks comprehensiveness, as it analyzes only the landing page of each site, potentially introducing bias.
- The novelty of capturing dynamically generated JavaScript code is questionable, as similar techniques have been previously established.
- The clarity of the contributions made by the proposed system, JSRay, in handling obfuscated code is lacking.

### Suggestions for Improvement
We recommend that the authors improve the clarity of ethical compliance regarding non-intrusive data collection and address the limitations of their data collection methodology, including the high failure rate of requests. We suggest incorporating clarifications about existing methods, such as the use of Debugger.scriptParsed, to enhance the discussion of dynamic code capture. Additionally, the authors should provide explicit definitions for what constitutes suspicious or malicious behavior in their manual classification and include statistics on inter-rater reliability. Finally, it should be made clear whether JSRay will be open-source to benefit the community.