ID: RtMyTzIW6l
Title: SymILO: A Symmetry-Aware Learning Framework for Integer Linear Optimization
Conference: NeurIPS
Year: 2024
Number of Reviews: 10
Original Ratings: 6, 6, 7, 6, -1, -1, -1, -1, -1, -1
Original Confidences: 4, 5, 4, 4, -1, -1, -1, -1, -1, -1

Aggregated Review:
### Key Points
This paper presents the SymILO framework for solving combinatorial optimization problems through machine learning, specifically targeting integer linear programs (ILPs) with symmetric solutions. The authors propose a novel supervised learning formulation that incorporates symmetry by selecting optimal permutations of target solutions during training. The framework includes an alternating algorithm for updating learning parameters and permutations, demonstrating its effectiveness across various datasets and existing methods.

### Strengths and Weaknesses
Strengths:
1. The consideration of symmetry is a crucial and interesting aspect, particularly when optimal solutions serve as labels, as it addresses potential failures in learning intrinsic patterns due to symmetry-invariance in the solution space.
2. The theoretical framework is general and applicable to any supervised learning task where the target is a solution to a combinatorial optimization problem, supported by proofs that symmetry-aware risk is theoretically preferable.
3. The experimental design is robust, showing significant improvements when combined with popular deep learning frameworks.

Weaknesses:
1. The explanation of the permutation group, which is vital to the framework, is vague and requires clarification, particularly regarding its identification for new problems and its impact on computational complexity.
2. The paper lacks a discussion on classical approaches to symmetry in MILPs and how they might be integrated or compared with the proposed framework.
3. There is insufficient analysis of the potential slowdown in training due to optimizing permutations, particularly for large-scale problems.

### Suggestions for Improvement
We recommend that the authors improve the explanation of the permutation group, detailing how to identify it for new problems and clarifying its computational complexity implications. Additionally, we suggest including a discussion on classical methods for tackling symmetry in MILPs and how they could complement the proposed framework. An analysis of the training slowdown due to permutation optimization should also be provided, along with a clearer formulation of the problem as a mixed-integer programming (MIP) problem in the examples. Finally, please ensure that all experimental setups are adequately described, including the use of GPUs and the specifics of "Tuned CPLEX."