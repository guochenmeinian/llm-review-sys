# Learning the Latent Causal Structure for

Modeling Label Noise

Yexiong Lin Yu Yao Tongliang Liu

Sydney AI Centre, The University of Sydney

Correspondence to Tongliang Liu (tongliang.liu@sydney.edu.au).

###### Abstract

In label-noise learning, the noise transition matrix reveals how an instance transitions from its clean label to its noisy label. Accurately estimating an instance's noise transition matrix is crucial for estimating its clean label. However, when only a noisy dataset is available, noise transition matrices can be estimated only for some "special" instances. To leverage these estimated transition matrices to help estimate the transition matrices of other instances, it is essential to explore relations between the matrices of these "special" instances and those of others. Existing studies typically build the relation by explicitly defining the similarity between the estimated noise transition matrices of "special" instances and those of other instances. However, these similarity-based assumptions are hard to validate and may not align with real-world data. If these assumptions fail, both noise transition matrices and clean labels cannot be accurately estimated. In this paper, we found that by learning the latent causal structure governing the generating process of noisy data, we can estimate noise transition matrices without the need for similarity-based assumptions. Unlike previous generative label-noise learning methods, we consider causal relations between latent causal variables and model them with a learnable graphical model. Utilizing only noisy data, our method can effectively learn the latent causal structure. Experimental results on various noisy datasets demonstrate that our method achieves state-of-the-art performance in estimating noise transition matrices, which leads to improved classification accuracy. The code is available at: https://github.com/tmllab/2024_NeurIPS_CSGN.

## 1 Introduction

Supervised learning relies on annotated large-scale datasets, which can be both time-consuming and costly to create. Although several existing annotation methods offer cost-effective alternatives, such as online queries , crowdsourcing , and image engines , the datasets obtained by these methods are imperfect. The labels of these datasets usually contain errors. These noisy labels would be harmful to deep neural networks because the network can memorize noisy labels easily [59; 13; 3] and lead to the degradation of classification accuracy.

Modeling label noise using noise transition matrices plays an important role in label-noise learning [36; 40; 30; 15]. Let \(Y\), \(\), and \(\) denote the variables for the clean label, the instance, and the noisy label, respectively. The noise transition matrix for an instance \(\) can be represented by \(p(|Y,=)\), which reveals the probability that, given an instance, its latent clean label is translated to the observed noisy label. Given these transition matrices, a classifier trained on noisy data by leveraging these matrices can be consistent with the optimal classifier trained on clean data [36; 40; 50].

However, noise transition matrices are generally unknown and need to be estimated. When only a noisy dataset is available, only the noise transition matrices of some "special" instances can be estimated. For example, if instances belong to a clean class with a probability of one (known as anchor points), their noise transition matrices can be estimated . To utilize these learned transitions to help in estimating others, it is crucial to establish relations between the transition matrices of these "special" instances and those of the other instances. Existing studies usually build this relation by proposing similarity assumptions for noise transition matrices across different instances. For example: 1). the noise transition matrices of instances within the same class are identical ; 2). the noise transition matrices of instances lying in the same manifold are identical ; 3). the noise transition matrices are the same for the closest three instances within the same clean class . However, these predefined assumptions may not hold in real-world cases. Moreover, verifying these assumptions with only noisy data is challenging. If these assumptions are violated, it can lead to estimation errors in both transition matrices and clean labels.

In this paper, to establish relations between the transition matrices of these "special" instances and those of the others without relying on predefined similarities, we propose exploring the latent causal structure that generates noisy data. By understanding this structure, the relations among noise transition matrices across instances would be implicitly captured. Subsequently, the noise transition matrices of other instances can be estimated by making use of the estimated noise transition matrices of the "special" instances. To offer some intuition, in Fig. 1, we illustrate two noisy examples in the benchmark noisy dataset CIFAR-10N. Suppose there is a latent variable for the "presence of fur", and an annotator is biased by the "presence of fur". If the first "cat" image containing "fur" is mislabeled as "dog" by this annotator, then a second "cat" image also containing "fur" will likely be mislabeled as "dog" with high probability by the same annotator. This leads us to understand that the noise transition matrices for the two images are similar when their causal variables have the same value. In essence, _the relation between noise transition matrices across these two instances is established through the causal structure._ Such insights have driven us to develop an algorithm designed to learn the latent causal structure, thereby enabling the accurate estimation of noise transition matrices for new instances based on existing ones.

There are a few studies  that tackle the label-noise learning problem by modeling the data-generating process with a generative model and leveraging causality. However, they may fail to capture the relation among noise transition matrices as the data-generating process proposed by these methods is restrained. Specifically, as shown in Fig. 1(a), current methods assume that the instance \(\) is a direct cause of the noisy label \(\) in the data-generating process. However, this assumption does not hold for many machine learning datasets consisting of perceptual data such as images, videos, and natural language. In these datasets, the latent causal variables such as shape, color, and semantic concepts are the direct causes of the noisy label \(\) rather than the perceptual data \(\) itself. As previously mentioned, the mislabeling of an image of a "cat" as a "dog" could be due to the latent causal variable "presence of fur". Two images generated under similar latent variable values should have similar transition matrices. Therefore, it is important to consider and learn these latent causal variables in the data-generating process. Motivated by this insight, we propose to incorporate latent causal variables in the data-generating process.

As shown in Fig. 1(b), the observed instance \(\) is generated by two sets of latent variables: \(\) which are not influenced by the clean label \(Y\) and \(\) which are caused by the clean label \(Y\). Furthermore, we allow for causal dependencies among the variables in \(\). We assume that the cause of the noisy label \(\) also depends on the clean label \(Y\). For example, the latent causal variable "presence of fur" influences the noisy label \(\) and depends on the clean label (e.g., cat or dog), which satisfies this assumption. To learn the data-generating process, we employ a learnable graphical model that models all latent causal variables and their causal relations. Once the model is trained, it can infer the values of latent causal variables for

Figure 1: The pictures contain the same noisy labels.

Figure 2: Noisy data-generating processes assumed by different methods. \(\) is the variable unrelated to the clean label \(Y\).

different images, thereby implicitly capturing the relations among noise transition matrices across instances. Theoretically, we explain the sufficient conditions for identifying the latent causal variables in Appendix B. Empirically, our method achieves state-of-the-art performance in estimating the noise transition matrices and predicting clean labels.

## 2 Related Work

Modeling the Noise Transition MatricesModeling label noise by noise transition matrices plays an important role for label-noise learning. Some methods [36; 40; 50; 56; 30] assume the noise transition matrix is _instance-independent_, i.e., \(p(=i|Y=j,=)=p(=i|Y=j)\). The instance-independent transition matrix is identifiable under some mild conditions. For example, the instance-independent transition matrix can be estimated using anchor points, where the clean class posterior probability of a class is one [36; 40; 50; 56]. Li _et al._ assume that the clean class-posterior distribution is _sufficiently scattered_ and learn the instance-independent transition matrix by minimizing the volume of the transition matrix.

To learn instance-dependent transition matrices, existing methods often rely on predefined statistical dependencies to explain how noisy labels are generated. Xia _et al._ propose to linearly decompose an instance into features (or "parts"), assuming that the noisy label depends on all these features. Based on this assumption, they estimate instance-dependent transition matrices by combining the transition matrices associated with these features. Cheng _et al._ assume that noisy labels are dependent on the data manifold, which leads to a manifold-regularized method for learning transition matrices. Unlike these methods, our proposed method automatically discovers dependencies by identifying latent variables that causally influence noisy labels. Furthermore, our method can be viewed as a generalization of Xia _et al._'s work . Specifically, rather than assuming that noisy labels depend on linearly decomposed features, our method employs a nonlinear model and leverages causal representation learning  to infer the features responsible for generating the noisy labels. CausalNL  and InstanceGM  also leverage causality to learn transition matrices. However, the data-generating processes assumed by these methods can be constrained, as they do not account for the latent causal relationships and variables considered by our method. Other methods for learning with noisy labels are discussed in Appendix G.

Causal Representation LearningCausal representation learning  aims to identify latent causal variables from observations. The generating process for observations from the latent variables is typically non-linear. Previous research has established that identifying latent variables in an unsupervised manner is generally infeasible [20; 39]. Recently, the focus has shifted to weakly-supervised or self-supervised methods that incorporate additional supervised information. For example, methods utilizing temporal information [44; 18; 19], auxiliary variables that cause the latent variables [21; 23], and multiview information  have been employed to learn causal representations.

## 3 Learning the Latent Causal Structure for Generation of Noisy Data

A Data-Generating ProcessLet \(\) and \(\) denote the observed variables of instances and noisy labels, respectively. The observed variable \(\) is generated by a subset of causal variables, \(\), along with other variables \(\). Similarly, the noisy label \(\) is also generated by a subset of the causal variables \(\). The causal variables in \(\) can exhibit causal dependence, meaning some variables are effects of others. The influence of other variables on a causal variable \(Z_{i}\) can be represented as \(Z_{i}:=f_{}(pa(Z_{i}),N_{i})\), where \(f_{}\) is the causal mechanism, \(pa(Z_{i})\) denotes all the causes of \(Z_{i}\), and \(N_{i}\) is the corresponding latent noise variable. The latent causal structure, which includes the latent causal variables \(\) and the causal dependencies among them, can be represented by a Directed Acyclic Graph (DAG). Given that this latent causal structure is unknown, our aim is to learn the causal mechanisms that generate both the observed instances and the noisy labels.

The data-generating process is illustrated in Fig. 3. The latent causal variable \(Z_{i}\) is generated by its parent variables, denoted as \(pa(Z_{i})\), along

Figure 3: An illustration of the noisy data-generating process with \(4\) latent variables.

with a corresponding latent noise variable \(N_{i}\). The instance \(\) and the noisy label \(\) are generated by different subsets of latent variables. The black arrow in the graph indicates the causal direction in the structural causal model, while the blue arrow indicates the weights of the edges vary with the clean label \(Y\). The instance \(\) and the noisy label \(\) are dependent because they are generated by the common cause variables \(\)[41; 42], which implies that the transition matrices in our model are instance-dependent.

Let \(pa()\) and \(pa()\) denote the sets of causal variables for generating \(\) and \(\), respectively. Let \(}\) and \(}}\) denote nonlinear mixing functions. Let \(}\) and \(}}\) denote independent noise variables with probability density functions \(p_{}}(})\) and \(p_{}}}(}})\). The generating process of the noisy data can be modeled as a structural causal model (SCM) as follows:

\[N_{i} :(_{N_{i}}(Y),_{N_{i}}^{2}(Y)), Z_{i} :=_{i}^{T}(Y)+N_{i},\] (1) \[ :=}(pa(),)+},  :=}}(pa())+}},\]

where \((_{N_{i}}(Y),_{N_{i}}^{2}(Y))\) represents the Gaussian distribution with mean \(_{N_{i}}(Y)\) and variance \(_{N_{i}}^{2}(Y)\). The matrix \((Y)\) represents the causal association among causal variables. The conditional distribution for the causal variables \(\) given the clean label \(Y\) can be denoted as \(p_{,},^{2}}}(|Y)\).

Unlike previous methods [55; 10], we do not assume the latent causal variables are independent. We allow causal relations between different causal variables in \(\), which is more general. For example, in an image, the causal variable associated with the "presence of the sun" can influence the causal variable related to "brightness". Moreover, we allow both the latent noise variable \(\) and the weights of causal association \(W_{i,j}(Y)\) to be different across different clean labels. This variability enables latent causal variables to exert varying degrees of influence on noisy labels in different classes. For example, mislabeling a "cat" as a "dog" might be influenced by the causal variable "presence of fur", whereas mislabeling a "house" as a "car" is likely less influenced by "presence of fur" and more by other causal variable, such as the causal variable related to "shape". The data-generating process in our model is nonlinear. Specifically, the instance \(\) and the noisy label \(\) are generated through nonlinear functions. However, to establish sufficient conditions for identifiability, the causal relations within \(\) are assumed to be linear. This assumption is further elaborated in Appendix B.

Intuition about Learning Latent Data-Generating ProcessExisting theories in causal representation learning [53; 38] suggest that the data-generating process can be efficiently learned with the aid of additional supervised information. In label-noise learning, this additional supervised information typically requires some clean examples. We follow the previous methods [55; 10] that assume a subset of clean examples can be selected from the noisy training data using current techniques . With some supervised information derived from these selected clean examples, learning the data-generating process becomes feasible.

Here, we provide some intuition about the core idea behind the existing identifiability result , explaining why the data-generating process can be effectively learned. Central to this understanding is the realization that the parameters governing this data-generating process are not unique to individual examples but are shared across them. Specifically, examples from the same class share the same data-generating process. The essence of learning the data-generating process lies in learning these shared parameters. When these parameters are shared across different examples, the total number of parameters does not increase as more examples are provided. Instead, these parameters are selected to fit the examples as well as possible. For example, in a linear model, as more data are provided, the system accumulates more linear equations but maintains a fixed number of parameters. This setup leads to identifiability when the number of equations exceeds the number of parameters, which enables a precise estimation of the parameters. With a set of selected clean examples along with their noisy labels, one can calculate the most probable parameter value for generating these examples. This approach reduces the uncertainty of the parameter value. In Appendix B, we discuss the specific assumption to make the latent generating process of noisy data identifiable.

### Methodology

We propose a model-based method which learns the latent Causal Structure for the Generation of Noisy data (CSGN). The workflow of our method is illustrated in Fig. 4. A classification network \(_{Y}\) is used to model the distribution \(q_{}(Y|)\). An encoder \(}}\) is employed to model the distribution \(q_{}(,|,Y)\). Two vectors \(_{}\) and \(_{}\) are employed to mask some causal variables \(\). These vectors select different causal variables for the generation of the instance \(\) and the noisy label \(\). The distribution \(p_{_{}}(|_{},)\) is modeled by a decoder \(_{}\) for generating instances. The distribution \(p_{_{}}(|_{})\) is modeled by a decoder \(_{}\) for generating noisy labels. These encoders and decoders can be effectively learned within the Variational Autoencoder (VAE) framework .

WarmupExisting methods  that employ generative models require some clean examples. Similarly, our method also requires clean examples, where their clean labels provide additional supervised information to learn latent causal variables and their causal relations. In settings involving label-noise learning, the clean label is typically unknown. We only have a noisy dataset \(}=\{(^{(i)},^{(i)})\}_{i=1}^{n}\), where \(n\) is the number of examples. To obtain the additional supervision information, we follow the existing methods  which adopt the small-loss trick  to select some clean examples. This method is based on the observation that a classification network trained on noisy data tends to first memorize examples with correct labels before those with incorrect ones. Consequently, during the early stages of training, the losses for examples with correct labels are usually smaller than those for examples with incorrect labels. By analyzing these loss values, we can distinguish clean examples from noisy ones. We adopt a semi-supervised learning approach, as detailed in , to train the classification network for selecting clean examples. Further specifics of this approach are provided in Appendix C. After this initial warmup phase, once some clean examples have been identified, we compile a new dataset consisting of instances, noisy labels, and clean labels as \(=\{(^{(i)},^{(i)},y^{(i)})\}_{i=1}^{m}\), where \(m\) is the size of the dataset.

Modeling Latent Causal Variables and their Causal RelationsWe first model the generating process of the causal variables \(\) using the SCM in Eq. (1). Given that the relationships between the latent variables are linear functions of their causes, plus some independent Gaussian noise, this linearity implies that the distribution of the latent causal variables \(\), conditioned on the true label \(Y\), also follows a Gaussian distribution. Specifically, the conditional distribution is given by:

\[p_{,_{},^{2}_{}}(|Y)=( _{},),\] (2)

where \(_{}\) is the mean vector, and \(\) is the covariance matrix of the latent variables \(\). The mean \(_{}\) and the covariance \(\) are determined by the weight matrix \(\) and the parameters of the latent noise variables, specifically \(_{}\) and \(^{2}_{}\). Note that the weight matrix \(\) encodes the causal relationships among the latent variables \(\), with each entry representing the strength of the causal effect from one variable to another.

Let \(^{2}_{Z_{i},Z_{j}}\) denote the element in the \(i\)-th row and \(j\)-th column of the covariance matrix \(\). Given that the generating process of causal variables is modeled by a linear SCM, we can compute the parameters \(_{Z_{i}}\), \(^{2}_{Z_{i},Z_{i}}\), and \(^{2}_{Z_{i},Z_{j}}\) for a causal variable \(Z_{i}\) by the following recursion relations :

\[_{Z_{i}}=_{j p_{i}}W_{j,i}(Y)_{Z_{j}}+_{N_{i}}(Y),\] \[^{2}_{Z_{i},Z_{i}}=_{j p_{i}}W^{2}_{j,i}(Y)^{2 }_{Z_{j},Z_{j}}+^{2}_{N_{i}}(Y),\] \[^{2}_{Z_{i},Z_{j}}=_{k p_{a_{j}}}W_{k,j}(Y)^{2 }_{Z_{i},Z_{k}},\ for\ i j,\]

Figure 4: A workflow of our method. In the inference stage, a classification network is used to learn the clean labels of instances; An encoder is used to learn the causal variables. In the generation stage, different subsets of causal variables used to generate instances and noisy labels are selected by masking. Two decoders are used to generate the instances and noisy labels.

where \(pa_{i}\) represents the set of indices for the parents of the causal variable \(Z_{i}\). We let \(\), \(_{N}\) and \(_{N}}\) be influenced by \(Y\). To provide identifiable results, \(\), \(_{N}\) and \(_{N}}\) have to be determined by \(Y\). Exploring ways to relax this assumption will be a focus of our future work.

Modeling the Generation of Observed VariablesIn real-world scenarios, instances and noisy labels may be generated by different subsets of latent causal variables. To accommodate this, two learnable masks are employed to selectively activate different subsets of causal variables for generating instances and noisy labels, respectively. We also utilize distinct decoders to model the generation processes of instances and noisy labels.

Let \(_{}\) and \(_{}\) denote the subsets of causal variables used to generate the instance \(\) and the noisy label \(\). To select the subsets of causal variables \(_{}\) and \(_{}\), we employ two masks. Specifically, let \(_{}\) and \(_{}\) denote two vectors for sparsity. They contain learnable parameters that dictate which causal variables are active during the generation process. The masking process is as follows:

\[_{}=_{},\ \ _{}=_{ },\]

where \(\) is the element-wise multiplication. To let vectors \(_{}\) and \(_{}\) act as masks, these vectors are designed to be sparse. This sparsity is encouraged through an L1 regularization loss:

\[_{M}=\|_{}\|_{1}+\|_{}\|_{1}.\] (3)

Note that since parameters in the mask is learnable, our masking method can select either different subsets or the same subsets of variables for generating the instance \(\) and the noisy label \(\) by optimizing the loss defined in Eq. 5.

Instances and noisy labels are generated through different mechanisms. Thus, we employ two different decoders: \(_{}\) for the instances and \(_{}\) for the noisy labels. The generating process of these variables is defined as follows:

\[=_{}(_{},)+_{},\ \ =_{}(_{})+_{},\]

where \(_{}\) and \(_{}\) represent independent noise variables, each with its respective probability density functions \(p_{_{}}(_{})\) and \(p_{_{}}(_{})\). The above equations establish the framework for our generative models for instances and noisy labels, which are probabilistic models defined as follows:

\[p_{_{}}(|_{},) =p_{_{}}(-_{}(_{ },)),\] \[p_{_{}}(|_{}) =p_{_{}}(-_{}( _{})).\]

As shown in Fig. 3, we consider the mechanisms generating instances and noisy labels to be independent. Therefore, the joint generating process of \(\) and \(\) conditioned on the latent variables can be modeled by the product of their individual probabilities, i.e.,

\[p_{}(,|,)=p_{_{}}(|_ {},)p_{_{}}(|_{}),\]

where \(=\{_{},_{}\}\) encompasses both decoders, and \(=\{_{}_{}\}\).

We further assume that \(p()\), which is the distribution of the latent variable \(\), follows a standard multivariate normal distribution. Integrating all components, the overall generative model is defined as a probabilistic model parameterized by \(=(,,_{},_{N}})\) defined as:

\[p_{}(,,,|Y)=p_{}(,|,)p_{,_{},_{N}}}(|Y)p().\] (4)

Here, \(p_{,_{},_{N}}}(|Y)\) specifies the distribution of the latent variables conditioned on the true label \(Y\), parameterized by the weight matrix \(\) and the parameters of the independent noise, \(_{}\), \(_{N}}\).

OptimizationAfter the warmup phase, we can construct a new dataset \(=\{(^{(i)},^{(i)},y^{(i)})\}_{i=1}^{m}\), where each instance includes the data \(^{(i)}\), the noisy label \(^{(i)}\), and the corresponding true label \(y^{(i)}\). We train our model's parameters using this dataset. Let \(p(,,Y)\) denote the underlying joint distribution of the variables \(\), \(\), and \(Y\). In line with prior work , we approximate this distribution with \(q_{}(,,Y)\) using the product of the empirical data distribution and the model's predictive distribution \(q_{}(,,Y) q_{}(,)q_{ }(Y|)\) where \(q_{}(,)\) is the empirical distribution derived from the noisy dataset \(}\), and \(q_{}(Y|)\) is the estimated clean class posterior provided by the classification network \(_{Y}\). To optimize the encoder and parameters in \(\) for the generative model, we maximize the Evidence Lower Bound (ELBO) on the marginal likelihood of the observed data \(\). The ELBO is formulated as:

\[ELBO= _{(,,y) q_{}}\%}[ _{(,) q_{}}[ p_{}(,| ,)].\] \[.-KL(q_{}(|,y)||p_{,_{ },_{}^{2}}(|y))-KL(q_{}(|,y)||p())],\] (5)

where \(KL\) denotes the Kullback-Leibler divergence, \(q_{}(|,y)\) and \(q_{}(|,y)\) are approximate posterior distributions which can be derived by with the encoder \(_{,}\). The derivation of ELBO is detailed in Appendix A. The final loss function used to train the networks is

\[=_{semi}-_{ELBO}ELBO+_{M} _{M},\] (6)

where \(_{ELBO}\) and \(_{M}\) are hyperparameters. The algorithm of CSGN is given in Alg. 1.

## 4 Experiments

In this section, we report the experiment results of our method. We first compare the effectiveness of the proposed data-generating process with existing methods. We then compare the estimation error of noise transition matrices with other methods and the classification performance of the proposed method with that of state-of-the-art methods on synthetic and real-world noisy datasets. The sensitivity tests of the hyper-parameters are in Appendix H. The results of the ablation study are in Appendix I. The number and the accuracy of the selected clean samples are available in Appendix J. We report the performance of a classification network trained on these clean samples in Appendix K. To verify the effectiveness of our method in recovering the causal graph, we conduct experiments on the synthetic dataset in Appendix L. The visualization of the transition matrices is in Appendix M.

### Experiment Setup

DatasetsWe empirically verify the performance of our method on three synthesis datasets, i.e., Fashion-MNIST , CIFAR-10 , CIFAR-100 , and two real-world datasets, i.e., CIFAR-N  and Webvision . Fashion-MNIST contains 70,000 28x28 grayscale images with 10 classes total, 60,000 images for training, and 10,000 images for testing. Both CIFAR-10 and CIFAR-100 contain 50,000 training images and 10,000 testing images. The image size is 32x32. CIFAR-10 has 10 classes of images, and CIFAR-100 has 100 classes of images. The three datasets contain clean labels. We corrupted the training data manually according to the instance-dependent noisy label generation method proposed in . CIFAR-N contains CIFAR-10N and CIFAR-100N. CIFAR-10N is a real-world label-noise version of CIFAR-10. It contains human-annotated noisy labels with five different types of noise (Worst, Aggregate, Random 1, Random 2, and Random 3). The corresponding noise rates are 40.21%, 9.03%, 17.23%, 18.12%, and 17.64%. CIFAR-100N is a real-world label-noise version of CIFAR-100. It contains the type of noise (Fine). The corresponding noise rates are 40.20%. Webvision dataset  is a large-scale real-world dataset. We follow the previous work  to train the model on the first 50 classes of the Google image subset and test the model on the WebVision validation set and the ImageNet ILSVRC12 validation set.

ImplementationWe implement our algorithm using PyTorch and conduct experiments on eight RTX-3090 GPUs. We use a PreAct ResNet-18  as the classification network for Fashion-MNIST , CIFAR-10 , CIFAR-100 , and CIFAR-N , an inception-resnet v2  as the classification network for WebVision. More details about the structure of decoders and encoders are in Appendix D. To prevent the accumulation of errors from biased selection, we adopt the approach of using two neural networks to select clean examples for each other, following the approach in previous work . The number of variables in \(\) is set to 4 in all our experiments. For experiments on Fashion-MNIST, CIFAR-10, CIFAR-100 and CIFAR-N, we employed SGD with a momentum of 0.9 and a weight decay of 0.0005 to optimize the classification network \(_{Y}\). We used Adam with default parameters to optimize the encoder \(_{,}\), the decoder \(_{}\), and the decoder \(_{}\) and other parameters \(\{,_{},_{}^{2}\}\). The initial learning rate for SGD was set at 0.02 and for Adam at 0.001. Our networks were trained for 200 epochs with a batch size of 64. Both learning rates were reduced by a factor of 10 after 100 epochs. For experiments on WebVision, we changed the weight decay of SGD to 0.001. The initial learning rate for SGD was set at 0.04 and for Adam at 0.004. Other parameters of optimizers remain unchanged. Our networks were trained for 80 epochs with a batch size of 16. Both learning rates were reduced by a factor of 10 after 40 epochs. Due to limited space, more details about the hyperparameters are in Appendix D.

BaselinesThe baselines used in our experiments for comparison are: 1). CE, training the classification network using standard cross-entropy loss on noisy data directly; 2). MentorNet , pretraining a classification network to select reliable examples for the main classification network; 3). Co-Teaching , which uses two classification networks to select reliable examples for each other; 4). Reweight , using the importance reweighting method to estimate the unbiased risk defined on clean data; 5). Forward , which assumes the noise transition matrix is class-dependent, then corrects the loss function; 6). PTD , estimating instance-dependent noisy transition through the parts of instances; 7). CausalNL , which explores the information in the instances to help the learning of classification network; 8). CCR  uses forward-backward cycle-consistency regularization to learn noise transition matrtices; 9). MEIDTM , which uses Lipschitz continuity to constrain the noise transition matrix in the manifold; 10). BLTM , which learn the noise transition matrix on a part of dataset with Bayes optimal label; 11). NPC , which boosts the pre-trained classifier performances by calibrating the noisy predictions; 12). RENT , which utilizes the transition matrix for resampling. 13). DivideMix , which divides the noisy examples into labeled examples and unlabeled examples and trains the classification network using the semi-supervised technique MixMatch ; 14). SOP , which employs the sparse property of the label noise to prevent models from overfitting to label noise.

### Effectiveness the Proposed Data-Generating Process

To demonstrate our data-generating process (shown in Fig. 1(b)) is more effective than the existing one (shown in Fig. 1(a)), we replace the generative model in CausalNL and InstanceGM with our proposed model while other experiment settings remain the same. We refer to the modified versions of CausalNL and InstanceGM as CausalNL\({}^{}\) and InstanceGM\({}^{}\), respectively. Experiments are conducted on CIFAR-10 and CIFAR-100 datasets with instance-dependent label noise. The experiment results are presented in Tab. 1 and 2, which show that CausalNL\({}^{}\) and InstanceGM\({}^{}\) outperform their original

    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\  CausalNL & 90.31 \(\) 0.09 & 89.76 \(\) 0.08 & 88.06 \(\) 0.53 & 80.97 \(\) 1.99 & 57.93 \(\) 7.53 \\ CausalNL\({}^{}\) & **91.59 \(\) 0.26** & **91.29 \(\) 0.07** & **90.44 \(\) 0.05** & **89.49 \(\) 0.31** & **88.83 \(\) 0.09** \\  InstanceGM & 96.07 \(\) 0.14 & 96.00 \(\) 0.09 & 95.95 \(\) 0.11 & 95.99 \(\) 0.10 & 95.81 \(\) 0.07 \\ InstanceGM\({}^{}\) & **96.20 \(\) 0.07** & **96.59 \(\) 0.07** & **96.45 \(\) 0.11** & **96.52 \(\) 0.11** & **96.32 \(\) 0.07** \\   

Table 1: Replace the generative model of CausalNL and InstanceGM with ours. Experiments are on CIFAR-10.

    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\  CausalNL & 65.33 \(\) 0.64 & 63.40 \(\) 0.49 & 55.37 \(\) 1.09 & 48.73 \(\) 1.49 & 38.69 \(\) 1.72 \\ CausalNL\({}^{}\) & **72.24 \(\) 0.14** & **71.54 \(\) 0.09** & **70.36 \(\) 0.12** & **67.60 \(\) 0.25** & **59.64 \(\) 0.99** \\  InstanceGM & 79.30 \(\) 0.11 & 78.03 \(\) 0.15 & 77.89 \(\) 0.18 & 77.48 \(\) 0.16 & 76.64 \(\) 0.38 \\ InstanceGM & **79.87 \(\) 0.09** & **79.53 \(\) 0.17** & **79.43 \(\) 0.16** & **79.45 \(\) 0.15** & **79.23 \(\) 0.12** \\   

Table 2: Replace the generative model of CausalNL and InstanceGM with ours. Experiments are on CIFAR-100.

Figure 5: The estimation error of noise transition matrices. The datasets are MNIST, Fashion-MNIST, CIFAR-10 and CIFAR-100 with the instance-dependent label noise. The error bar for standard deviation in each figure has been shaded.

[MISSING_PAGE_FAIL:9]

[MISSING_PAGE_EMPTY:10]

[MISSING_PAGE_FAIL:11]

*  Zhuo Huang, Chang Liu, Yinpeng Dong, Hang Su, Shibao Zheng, and Tongliang Liu. Machine vision therapy: Multimodal large language models can enhance visual robustness via denoising in-context learning. In _Forty-first International Conference on Machine Learning_, 2023.
*  Zhuo Huang, Li Shen, Jun Yu, Bo Han, and Tongliang Liu. Flatmatch: Bridging labeled data and unlabeled data with cross-sharpness for semi-supervised learning. _Advances in Neural Information Processing Systems_, 36:18474-18494, 2023.
*  Zhuo Huang, Xiaobo Xia, Li Shen, Bo Han, Mingming Gong, Chen Gong, and Tongliang Liu. Harnessing out-of-distribution examples via augmenting content and style. In _The Eleventh International Conference on Learning Representations_, 2023.
*  Aapo Hyvarinen and Hiroshi Morioka. Unsupervised feature extraction by time-contrastive learning and nonlinear ICA. In Daniel D. Lee, Masashi Sugiyama, Ulrike von Luxburg, Isabelle Guyon, and Roman Garnett, editors, _Advances in Neural Information Processing Systems 29: Annual Conference on Neural Information Processing Systems 2016, December 5-10, 2016, Barcelona, Spain_, pages 3765-3773, 2016.
*  Aapo Hyvarinen and Hiroshi Morioka. Nonlinear ICA of temporally dependent stationary sources. In Aarti Singh and Xiaojin (Jerry) Zhu, editors, _Proceedings of the 20th International Conference on Artificial Intelligence and Statistics, AISTATS 2017, 20-22 April 2017, Fort Lauderdale, FL, USA_, volume 54 of _Proceedings of Machine Learning Research_, pages 460-469. PMLR, 2017.
*  Aapo Hyvarinen and Petteri Pajunen. Nonlinear independent component analysis: Existence and uniqueness results. _Neural Networks_, 12(3):429-439, 1999.
*  Aapo Hyvarinen, Hiroaki Sasaki, and Richard E. Turner. Nonlinear ICA using auxiliary variables and generalized contrastive learning. In Kamalika Chaudhuri and Masashi Sugiyama, editors, _The 22nd International Conference on Artificial Intelligence and Statistics, AISTATS 2019, 16-18 April 2019, Naha, Okinawa, Japan_, volume 89 of _Proceedings of Machine Learning Research_, pages 859-868. PMLR, 2019.
*  Lu Jiang, Zhengyuan Zhou, Thomas Leung, Li-Jia Li, and Li Fei-Fei. Mentornet: Learning data-driven curriculum for very deep neural networks on corrupted labels. In Jennifer G. Dy and Andreas Krause, editors, _Proceedings of the 35th International Conference on Machine Learning, ICML 2018, Stockholmsmassan, Stockholm, Sweden, July 10-15, 2018_, volume 80 of _Proceedings of Machine Learning Research_, pages 2309-2318. PMLR, 2018.
*  Ilyes Khemakhem, Diederik P. Kingma, Ricardo Pio Monti, and Aapo Hyvarinen. Variational autoencoders and nonlinear ICA: A unifying framework. In Silvia Chiappa and Roberto Calandra, editors, _The 23rd International Conference on Artificial Intelligence and Statistics, AISTATS 2020, 26-28 August 2020, Online [Palermo, Sicily, Italy]_, volume 108 of _Proceedings of Machine Learning Research_, pages 2207-2217. PMLR, 2020.
*  Diederik P Kingma and Max Welling. Auto-encoding variational bayes. _arXiv preprint arXiv:1312.6114_, 2013.
*  Daphne Koller and Nir Friedman. _Probabilistic graphical models: principles and techniques_. MIT press, 2009.
*  Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiple layers of features from tiny images. 2009.
*  Yann LeCun, Corinna Cortes, and CJ Burges. Mnist handwritten digit database. _ATT Labs [Online]. Available: http://yann. lecun. com/exdb/mnist_, 2, 2010.
*  Junnan Li, Richard Socher, and Steven C. H. Hoi. Dividemix: Learning with noisy labels as semi-supervised learning. In _8th International Conference on Learning Representations, ICLR 2020, Addis Ababa, Ethiopia, April 26-30, 2020_. OpenReview.net, 2020.
*  Wen Li, Limin Wang, Wei Li, Eirikur Agustsson, and Luc Van Gool. Webvision database: Visual learning and understanding from web data. _arXiv preprint arXiv:1708.02862_, 2017.
*  Xuefeng Li, Tongliang Liu, Bo Han, Gang Niu, and Masashi Sugiyama. Provably end-to-end label-noise learning without anchor points. In Marina Meila and Tong Zhang, editors, _Proceedings of the 38th International Conference on Machine Learning, ICML 2021, 18-24 July 2021, Virtual Event_, volume 139 of _Proceedings of Machine Learning Research_, pages 6403-6413. PMLR, 2021.
*  Yuncheng Li, Jianchao Yang, Yale Song, Liangliang Cao, Jiebo Luo, and Li-Jia Li. Learning from noisy labels with distillation. In _IEEE International Conference on Computer Vision, ICCV 2017, Venice, Italy, October 22-29, 2017_, pages 1928-1936. IEEE Computer Society, 2017.

*  Yexiong Lin, Yu Yao, Yuxuan Du, Jun Yu, Bo Han, Mingming Gong, and Tongliang Liu. Do we need to penalize variance of losses for learning with label noise? _arXiv preprint arXiv:2201.12739_, 2022.
*  Yexiong Lin, Yu Yao, Xiaolong Shi, Mingming Gong, Xu Shen, Dong Xu, and Tongliang Liu. Cs-isolate: Extracting hard confident examples by content and style isolation. _Advances in Neural Information Processing Systems_, 36, 2024.
*  Sheng Liu, Jonathan Niles-Weed, Narges Razavian, and Carlos Fernandez-Granda. Early-learning regularization prevents memorization of noisy labels. In Hugo Larochelle, Marc'Aurelio Ranzato, Raia Hadsell, Maria-Florina Balcan, and Hsuan-Tien Lin, editors, _Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual_, 2020.
*  Sheng Liu, Zhihui Zhu, Qing Qu, and Chong You. Robust training under label noise by over-parameterization. In Kamalika Chaudhuri, Stefanie Jegelka, Le Song, Csaba Szepesvari, Gang Niu, and Sivan Sabato, editors, _International Conference on Machine Learning, ICML 2022, 17-23 July 2022, Baltimore, Maryland, USA_, volume 162 of _Proceedings of Machine Learning Research_, pages 14153-14172. PMLR, 2022.
*  Tongliang Liu and Dacheng Tao. Classification with noisy labels by importance reweighting. _IEEE Trans. Pattern Anal. Mach. Intell._, 38(3):447-461, 2016.
*  Yang Liu, Hao Cheng, and Kun Zhang. Identifiability of label noise transition matrix. In _International Conference on Machine Learning_, pages 21475-21496. PMLR, 2023.
*  Yuhang Liu, Zhen Zhang, Dong Gong, Mingming Gong, Biwei Huang, Anton van den Hengel, Kun Zhang, and Javen Qinfeng Shi. Identifying weight-variant latent causal models. _arXiv preprint arXiv:2208.14153_, 2022.
*  Francesco Locatello, Stefan Bauer, Mario Lucic, Gunnar Ratsch, Sylvain Gelly, Bernhard Scholkopf, and Olivier Bachem. Challenging common assumptions in the unsupervised learning of disentangled representations. In Kamalika Chaudhuri and Ruslan Salakhutdinov, editors, _Proceedings of the 36th International Conference on Machine Learning, ICML 2019, 9-15 June 2019, Long Beach, California, USA_, volume 97 of _Proceedings of Machine Learning Research_, pages 4114-4124. PMLR, 2019.
*  Giorgio Patrini, Alessandro Rozza, Aditya Krishna Menon, Richard Nock, and Lizhen Qu. Making deep neural networks robust to label noise: A loss correction approach. In _2017 IEEE Conference on Computer Vision and Pattern Recognition, CVPR 2017, Honolulu, HI, USA, July 21-26, 2017_, pages 2233-2241. IEEE Computer Society, 2017.
*  Hans Reichenbach. _The Direction of Time_. Dover Publications, Mineola, N.Y., 1956.
*  Bernhard Scholkopf. Causality for machine learning. In _Probabilistic and causal inference: The works of Judea Pearl_, pages 765-804. 2022.
*  Bernhard Scholkopf, Francesco Locatello, Stefan Bauer, Nan Rosemary Ke, Nal Kalchbrenner, Anirudh Goyal, and Yoshua Bengio. Toward causal representation learning. _Proc. IEEE_, 109(5):612-634, 2021.
*  Henning Sprekeler, Tiziano Zito, and Laurenz Wiskott. An extension of slow feature analysis for nonlinear blind source separation. _J. Mach. Learn. Res._, 15(1):921-947, 2014.
*  Christian Szegedy, Sergey Ioffe, Vincent Vanhoucke, and Alexander Alemi. Inception-v4, inception-resnet and the impact of residual connections on learning. In _Proceedings of the AAAI conference on artificial intelligence_, volume 31, 2017.
*  Daiki Tanaka, Daiki Ikami, Toshihiko Yamasaki, and Kiyoharu Aizawa. Joint optimization framework for learning with noisy labels. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 5552-5560, 2018.
*  Yisen Wang, Xingjun Ma, Zaiyi Chen, Yuan Luo, Jinfeng Yi, and James Bailey. Symmetric cross entropy for robust learning with noisy labels. In _Proceedings of the IEEE/CVF international conference on computer vision_, pages 322-330, 2019.
*  Jiaheng Wei, Zhaowei Zhu, Hao Cheng, Tongliang Liu, Gang Niu, and Yang Liu. Learning with noisy labels revisited: A study using real-world human annotations. In _The Tenth International Conference on Learning Representations, ICLR 2022, Virtual Event, April 25-29, 2022_. OpenReview.net, 2022.

*  Xiaobo Xia, Tongliang Liu, Bo Han, Nannan Wang, Mingming Gong, Haifeng Liu, Gang Niu, Dacheng Tao, and Masashi Sugiyama. Part-dependent label noise: Towards instance-dependent label noise. In Hugo Larochelle, Marc'Aurelio Ranzato, Raia Hadsell, Maria-Florina Balcan, and Hsuan-Tien Lin, editors, _Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual_, 2020.
*  Xiaobo Xia, Tongliang Liu, Nannan Wang, Bo Han, Chen Gong, Gang Niu, and Masashi Sugiyama. Are anchor points really indispensable in label-noise learning? In Hanna M. Wallach, Hugo Larochelle, Alina Beygelzimer, Florence d'Alche-Buc, Emily B. Fox, and Roman Garnett, editors, _Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems 2019, NeurIPS 2019, December 8-14, 2019, Vancouver, BC, Canada_, pages 6835-6846, 2019.
*  Han Xiao, Kashif Rasul, and Roland Vollgraf. Fashion-mnist: a novel image dataset for benchmarking machine learning algorithms. _CoRR_, abs/1708.07747, 2017.
*  Yan Yan, Romer Rosales, Glenn Fung, Subramanian Ramanathan, and Jennifer G. Dy. Learning from multiple annotators with varying expertise. _Mach. Learn._, 95(3):291-327, 2014.
*  Mengyue Yang, Furui Liu, Zhitang Chen, Xinwei Shen, Jianye Hao, and Jun Wang. Causalvae: Disentangled representation learning via neural structural causal models. In _IEEE Conference on Computer Vision and Pattern Recognition, CVPR 2021, virtual, June 19-25, 2021_, pages 9593-9602. Computer Vision Foundation / IEEE, 2021.
*  Shuo Yang, Erkun Yang, Bo Han, Yang Liu, Min Xu, Gang Niu, and Tongliang Liu. Estimating instance-dependent bayes-label transition matrix using a deep neural network. In Kamalika Chaudhuri, Stefanie Jegelka, Le Song, Csaba Szepesvari, Gang Niu, and Sivan Sabato, editors, _International Conference on Machine Learning, ICML 2022, 17-23 July 2022, Baltimore, Maryland, USA_, volume 162 of _Proceedings of Machine Learning Research_, pages 25302-25312. PMLR, 2022.
*  Yu Yao, Tongliang Liu, Mingming Gong, Bo Han, Gang Niu, and Kun Zhang. Instance-dependent label-noise learning under a structural causal model. In Marc'Aurelio Ranzato, Alina Beygelzimer, Yann N. Dauphin, Percy Liang, and Jennifer Wortman Vaughan, editors, _Advances in Neural Information Processing Systems 34: Annual Conference on Neural Information Processing Systems 2021, NeurIPS 2021, December 6-14, 2021, virtual_, pages 4409-4420, 2021.
*  Yu Yao, Tongliang Liu, Bo Han, Mingming Gong, Jiankang Deng, Gang Niu, and Masashi Sugiyama. Dual t: Reducing estimation error for transition matrix in label-noise learning. _Advances in neural information processing systems_, 33:7260-7271, 2020.
*  Suqin Yuan, Lei Feng, and Tongliang Liu. Late stopping: Avoiding confidently learning from mislabeled examples. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 16079-16088, 2023.
*  Suqin Yuan, Lei Feng, and Tongliang Liu. Early stopping against label noise without validation data. In _The Twelfth International Conference on Learning Representations_, 2024.
*  Chiyuan Zhang, Samy Bengio, Moritz Hardt, Benjamin Recht, and Oriol Vinyals. Understanding deep learning requires rethinking generalization. In _5th International Conference on Learning Representations, ICLR 2017, Toulon, France, April 24-26, 2017, Conference Track Proceedings_. OpenReview.net, 2017.
*  Songzhu Zheng, Pengxiang Wu, Aman Goswami, Mayank Goswami, Dimitris Metaxas, and Chao Chen. Error-bounded correction of noisy labels. In _International Conference on Machine Learning_, pages 11447-11457. PMLR, 2020.
*  Zhaowei Zhu, Yiwen Song, and Yang Liu. Clusterability as an alternative to anchor points when learning with noisy labels. In Marina Meila and Tong Zhang, editors, _Proceedings of the 38th International Conference on Machine Learning, ICML 2021, 18-24 July 2021, Virtual Event_, volume 139 of _Proceedings of Machine Learning Research_, pages 12912-12923. PMLR, 2021.

## Appendix A Derivation of ELBO

The derivation of ELBO is shown as follows:

\[_{(,,y) q_{}}[ p_{}( ,|y)]\] \[= _{(,,y) q_{}}[ {p_{}(,,,|y)}{q_{}(,|,y)}(,|,y)}{p_{}(,|,,y)}]\] (7) \[= _{(,,y) q_{}}[ q _{}(,|,y)(,,,|y)}{q_{}(,|,y)}(,|,y)}{p_{}(,|,,y)}dzds]\] (8) \[= _{(,,y) q_{}}[ q _{}(,|,y)(,,,|y)}{q_{}(,|,y)}dzds.\] \[.+KL(q_{}(,|,y)||p_{}(,|,,y)))]\] (9) \[_{(,,y) q_{}}[  q_{}(,|,y)(,,,|y)}{q_{}(,|,y)}dzds].\] (10)\[ELBO= _{(,,y) q_{}}[ q_{ }(,|,y)(,,, |y)}{q_{}(,|,y)}dzds]\] (11) \[= _{(,,y) q_{}}[ q _{}(,|,y)}(,|,,y)p_{,},}^{2}}(|y)p()}{q_{ }(,|,y)}dzds]\] (12) \[= _{(,,y) q_{}}[ q _{}(,|,y) p_{}(,|,,y)dzds.\] \[.+ q_{}(|,y)q_{}(|,y),},}^{2}}(|y)p()}{q_{ }(|,y)q_{}(|,y)}dzds]\] (13) \[= _{(,,y) q_{}}[ _{(,) q_{}}[ p_{}(, |,,y)].\] \[.-KL(q_{}(|,y)||p_{,}, }^{2}}(|y))-KL(q_{}(|,y)||p())]\] (14) \[= _{(,,y) q_{}_{}}[_{(,) q_{}}[ p_{}( ,|,].\] \[.-KL(q_{}(|,y)||p_{,}, }^{2}}(|y))-KL(q_{}(|,y)||p()) ],\] (15)

where Eq. 13 holds because we the approximate the distribution \(q_{}(,|,Y)\) by the posterior distribution \(q_{}(|,Y)\) and \(q_{}(|,Y)\), i.e., \(q_{}(,|,Y) q_{}(|,Y)q_{ }(|,Y)\).

## Appendix B Identifiability Analysis

In this section, we discuss the required conditions for identifying latent causal structures.

The data-generating process can be defined as:

\[p_{}(,|,) =p_{}(|},)p_{ }(|}})\] \[=p_{}}(-p_{}}(},))p_{}}}(-p_{_{}}(}} )),\] (16)

which means that the value of \(\) and \(\) can be decomposed as \(=}(},)+}, =}}(}})+}}\), where \(}\) and \(}}\) are independent noise variables with probability density functions \(p_{}}(})\) and \(p_{}}}(}})\). The variables \(\) represent other variables unrelated to the clean label in the instances, such as the rotation and brightness .

Intuitively, the instances are generated by a subset of the causal variables and the variables \(\), while the noisy labels are generated by another subset of the causal variables. Let \(}\) represent the combination of the functions \(}\) and \(_{}\) given a style \(\).

Let \(m\) denote the number of the causal variables, which is also the number of the latent noise variables; Let \(k\) denote the dimension of the sufficient statistics for the causal variables \(\). We have the following theorem:

**Theorem B.1**.: _[_38_]_ _Suppose latent causal variables \(\) and the observed variables \(Y,\) follow the generative model defined in Eq. (4) with parameters \((},,},^{2}})\). Given a style \(\), assume the following holds:_

1. _The set_ _[_\(|_{}()\)_]_ _has measure zero, where is the characteristic function of the density_ \(p_{}\)_._
2. _The function_ \(}\) _is bijective._
3. _There exist_ \(2m+1\) _distinct points_ \(}_{0},}_{1},,}_{2m},\) _such that the matrix_ \[}=(}(Y={y_{N}}_{1})-}(Y={y_{N}}_{0}),, }(Y={y_{N}}_{2m})-}(Y={y_{N}}_{0}))\] (17) _of size_ \(2m 2m\) _is invertible._
4. _There exist_ \(k+1\) _distinct points_ \(}_{0},}_{1},,}_{k},\) _such that the matrix_ \[}=(}(Y={y_{Z}}_{1})-}(Y={y_{Z}}_{0}),, }(Y={y_{Z}}_{k})-}(Y={y_{Z}}_{0}))\] (18) _of size_ \(k k\) _is invertible._5. _The function class of_ \(W_{i,j}\) _can be expressed by a Taylor series: for each_ \(W_{i,j}\)_,_ \(W()_{i,j}=0\)_._

_then the true latent causal variables \(\) are related to the estimated latent causal variables \(}\) by the following relationship: \(=}+\), where \(\) denotes the permutation matrix with scaling, \(\) denotes a constant vector._

The theorem guarantees that the causal variables can be identified up to simple linear transformations, i.e., permutation and scaling, under these assumptions. Intuitively, it shows that in the worst case, given a fixed style \(s\) (fixed rotations, lighting conditions, positions, etc.), it requires \(k+1\) clean examples from distinct classes to recover the causal variables and their relations, where \(k\) is the dimension of the sufficient statistics for the causal variables \(\). For the identifiability of the causal structure among latent variables \(\), the Corollary 2 of the existing paper  demonstrates that the causal structure can be identified up to the Markov equivalence class.

In our method, we assume the causal association among causal variables is a fully-connected directed acyclic graph, and we assume the distribution of latent noise variables is Gaussian. We can obtain \(k=m+(m(m+1))/2\), where \(m\) is the number of causal variables. If \(n_{s}\) is the number of different style combinations, then \(n_{s}(k+1)\) clean examples from distinct classes are required. This is because, for each style combination, the parameters of the generative models can generally differ, necessitating the selection of clean examples for each style combination to identify the different parameters. Given that the number of latent causal variables in our causal graph is four, \(n_{s} 15\) clean examples from distinct classes are required to identify the causal model.

Note that this is the theoretical worst-case scenario under the nonlinear ICA framework. If we assume that _changes in style combinations do not affect the parameters_\((},,},^{2}})\), then the data-generating process is invariant across different styles. Under this assumption, a best-case scenario can be derived such that we only need \(k+1\) clean examples to identify the parameters. For our causal graph, which includes four latent causal variables, only 15 clean examples from distinct classes are necessary to identify the causal model.

By demonstrating both the worst-case and best-case scenarios, and showing the assumptions required to achieve the best cases, we believe the theorem not only provides valuable insight into our methods but also enhances the understanding of previous methods for learning the data-generating process .

## Appendix C More Details of the Warmup Strategy

To improve the performance of the classification network, the information of the remaining examples is exploited to train the classification network by using the semi-supervised learning method MixMatch . Specifically, let the selected clean examples be the labeled examples \(_{X}\) and the remaining examples be the unlabeled examples \(_{U}\). The labels in the labeled examples \(_{X}\) are refined through the output of the classification network \(_{Y}\). The outputs of the classification network \(_{Y}\) for unlabeled examples are used to generate guessed labels. Then, the temperature sharpening is applied to the refined labels and guessed labels on the labeled examples and unlabeled examples, respectively. After that, the labeled examples \(_{X}\) and the unlabeled examples \(_{U}\) are transformed into augmented labeled examples \(_{X}^{}\) and augmented unlabeled examples \(_{U}^{}\) by using a linear mixing. The loss function used to train the classification network is

\[_{semi}=_{_{X}}+_{u}_{ _{U}}+_{r}_{},\]

where \(_{_{X}}\) is the cross-entropy loss for the labeled examples; \(_{_{U}}\) is the mean squared error the unlabeled examples; \(_{}\) is a regularization term to prevent the model from predicting all examples to belong to a single class. These three terms are defined as follows specifically.

\[_{_{X}} =-_{X}^{}|}_{, _{X}^{}}_{i}p_{i}(q_{}(Y=i|)),\] \[_{_{U}} =_{U}^{}|}_{, _{U}^{}}\|-q_{}(Y|)\|_{2}^{2}\,,\] \[_{} =_{i}(1_{X}^{ }|+|_{U}^{}|}_{_{X}+ _{U}}q_{}(Y=i|)),\]

where \(\) is the label, \(q_{}(Y|):=[q_{}(Y=1|),,q_{}(Y=C|)]^{T}\), and \(C\) denote number of class.

More Implementation Details

We use a 6-hidden-layer convolutional network as the encoder \(}\), and the channel sizes of corresponding feature maps are 32, 64, 128, 256, 512, and 512 for Fashion-MNIST, CIFAR-10, CIFAR-100, and CIFAR-N. We use a 5-hidden-layer convolutional network as the encoder \(}\), and the channel sizes of corresponding feature maps are 32, 64, 128, 256, and 512 for WebVision. A 6-hidden-layer transposed-convolutional network as the instance decoder and the channel size of corresponding feature maps are 512, 512, 256, 128, 64, and 32 for Fashion-MNIST, CIFAR-10, CIFAR-100, and CIFAR-N. A 5-hidden-layer transposed-convolutional network is used as the instance decoder, and the channel sizes of the corresponding feature maps are 512, 256, 128, 64, and 32 for WebVision. We use a three-layer MLP with the Leak ReLU activation function as the weight model to learn the weight of causal relations among the causal variables. To generate noisy labels, a three-layer MLP with the Leak ReLU activation function is used as the noisy label decoder.

The settings of hyperparameters for semi-supervised loss follow previous work . The hyperparameter \(_{r}\) is set to 1. For FashionMNIST and CIFAR-10 dataset, the hyperparameter \(_{u}\) is set to 5, 10, 15, 20 and 25 for noise rates 10%, 20%, 30%, 40% and 50%. For CIFAR-100 dataset, the hyperparameter \(_{u}\) is set to 10, 25, 50, 100 and 150 for noise rates 10%, 20%, 30%, 40% and 50%. For the CIFAR-N dataset, \(_{u}\) is set to 20 for the noise type "Worst", 100 for the noise type "Noisy" and 0 for other noise types. For WebVision dataset, \(_{u}\) is set to 0. The hyperparameters \(_{ELBO}\) and \(_{M}\) are set to 0.5 and 0.001 for synthetic datasets. For the real-world datasets, \(_{ELBO}\) and \(_{M}\) are set to 0.1 and 0.001.

```
1:Input: A noisy dataset \(}\), Warm Up epoch \(T_{w}\), Total epoch \(T_{max}\)..
2:\(_{Y}^{1},_{Y}^{2}(})\);
3:For T = \(1,,T_{w}\):
4:For k=1, \(2\):
5: Sample \((,)}\);
6:\(_{Y}^{k}()\);
7: Sample \((,) q_{}^{k}(,|=,Y=)\);
8: Calculate the prior distribution \(p_{,},^{2}}}^{k}(|Y=)\) based on \(\);
9: Sample \(} p_{}}^{k}(|=},=)\);
10: Sample \(} p_{_{Y}}^{k}(|=}} )\);
11: Calculate the loss using Eq. (5) and update networks \(q_{}^{k}()\), \(p_{,},^{2}}}^{k}()\), \(p_{}}^{k}()\) and \(p_{}}^{k}()\);
12:For T = \(1,,T_{max}\):
13:\(_{X},_{U}(}, _{Y}^{1},_{Y}^{2})\);
14:\(_{X}^{},_{U}^{}( _{X},_{U})\);
15:For k=1, \(2\):
16: Sample \((,)}\);
17:\(_{Y}^{k}()\);
18: Sample \((,) q_{}^{k}(,|=,Y=)\);
19: Calculate the prior distribution \(p_{,},^{2}}}^{k}(|Y=)\) based on \(\);
20: Sample \(} p_{}}^{k}(|=},=)\);
21: Sample \(} p_{}}^{k}(|=}} )\);
22: Calculate the loss using Eq. (5) and update networks \(_{Y}^{k}()\), \(q_{}^{k}()\), \(p_{,},^{2}}}^{k}()\), \(p_{}}^{k}()\) and \(p_{}}^{k}()\);
23:Output: The classification networks \(_{Y}^{1},_{Y}^{2}\). ```

**Algorithm 1** CSGN

## Appendix E Pseudocode

The algorithm of the proposed method, Causal Structure for the Generation of Noisy data (CSGN), is shown in Alg. 1. To prevent the accumulation of errors from biased selection, we adopt the approach of using two neural networks, \(g^{1}_{Y}\) and \(g^{2}_{Y}\), to select clean examples for each other, following the approach in previous work . These neural networks model the distributions \(q^{1}_{}(Y|)\) and \(q^{2}_{}(Y|)\), respectively.

## Appendix F Limitations

In our paper, to provide the theoretical analysis, we assume that the causal relations among the latent causal variables are linear, i.e., the causal variables are influenced by other causal variables linearly. How to identify nonlinear causal relations among the latent causal variables is still an open problem. We will continually target this problem in our future work. Moreover, to identify causal variables, similar to many existing work [13; 28; 55; 10], we also require to selected clean examples from noisy data. In future work, we will study how to reduce the required number of clean examples to achieve better accuracy with realistic assumptions. Last, our method is a generative-based method, and it requires an additional generative network, leading to more computation costs.

## Appendix G Other Methods in Learning with Noisy Labels

Label-noise learning is a subset of learning with noisy labels. Methods in label-noise learning refer specifically to the methods that model the transition matrices. In this section, we briefly introduce other approaches in learning with noisy labels. Some algorithms [13; 28; 57; 33] select examples which likely to be correct for training. These selections are based on the memorization effect [59; 34; 3; 32; 58], which suggests deep neural networks initially memorize major patterns before progressively memorizing minor ones. In datasets containing noisy labels, correctly labeled examples often form the majority. This enables the networks to prioritize learning from these examples at the early stage of training. As a result, these examples can typically be identified by their low loss values early on. Co-Teaching  employs this principle to identify small-loss examples as probably clean examples. DivideMix  uses a Gaussian Mixture Model to separate training examples into labeled and unlabeled sets based on their training loss, with the labeled set assumed to contain correct labels and trains networks in a semi-supervised manner [4; 16]. Some methods design robust loss functions for learning with noisy labels. If a loss function \(\) is symmetric, i.e., \(_{i}(_{Y}(),i)=c\), where \(c\) is a constant, the loss function \(\) is robust to label noise [11; 12]. By combating Cross Entropy and Reverse Cross Entropy, Symmetric Cross Entropy Learning is robust to label noise . Some methods correct noisy labels in datasets [46; 60]. Tanaka _et al._ proposed a method that updates network parameters and class labels alternatively. Zheng _et al._ provided theoretical guarantees for data-re-calibrating methods and proposed a label-correction algorithm with a guaranteed success rate . NPC  is a post-processing method that models the generation process of clean labels and then uses the model to calibrate the prediction of classifiers.

## Appendix H Sensitivity Tests for Hyper-Parameters

We conduct sensitivity tests on hyperparameters \(_{ELBO}\) and \(_{M}\) on CIFAR-10 dataset under the instance-dependent label noise with the noise rate of 0.5 and CIFAR-10N dataset under the real-world label noise, the Worst human label set. The experiment results are shown in Fig. 6. The experiment results demonstrate that the hyperparameters \(_{ELBO}\) and \(_{M}\) are not sensitive.

Figure 6: Illustration of the test accuracy on CIFAR-10 under instance-dependent noise with noise rate 0.5 and Worst human label set, respectively. The error bar for standard deviation has been shaded.

the synthesis noise, the hyperparameters \(_{ELBO}\) and \(_{M}\) are set as 0.5 and 0.001. For the datasets under the real-world noise, the hyperparameters \(_{ELBO}\) and \(_{M}\) are set as 0.1 and 0.001.

We also conduct a sensitivity test for the number of causal variables on CIFAR-10 dataset under instance-dependent noise with a noise rate of 0.5. Experiment results are shown in Fig. 7. The results demonstrate that the proposed method is not sensitive to the number of causal variables ranging from 1 to 12. We set the number of causal variables at 4 for all experiments.

## Appendix I Ablation Study

Warmup StrategiesWe conduct the ablation study to assess the impact of removing the semi-supervised learning warmup phase from the CSGN method. In the study, we replaced the semi-supervised warmup with a regular early-stopping approach, where the neural networks were trained for 10 epochs on the training data. The variant of CSGN without the semi-supervised learning warmup is denoted as CSGN-WOSM. The experiment results are shown in Tab 8. The results indicate that CSGN retains its effectiveness even without the semi-supervised learning warmup.

Loss FunctionsTo evaluate the impact of the loss functions, \(ELBO\) and \(_{M}\), we conduct an ablation study by removing these loss functions and training classification networks to observe their classification performances. The experiment results are shown in Tab. 9. The results demonstrate the effectiveness of each loss function.

Semi-supervised Learning and Sample SelectionWe remove the semi-supervised learning technique and clean sample selection in our method. Instead, we use another simple algorithm PES  which trains a label-noise-robust classifier via early stopping. We leverage the prediction of this classifier for estimating the clean label. We refer to this variant of CSGN as CSGN-PES. The loss of

    &  \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\  CSGN without \(ELBO\) & 96.03 \(\) 0.11 & 95.71 \(\) 0.10 & 95.46 \(\) 0.06 & 95.44 \(\) 0.12 & 88.10 \(\) 0.26 \\ CSGN without \(ELBO\) & 96.04 \(\) 0.05 & 95.75 \(\) 0.08 & 95.54 \(\) 0.09 & 95.29 \(\) 0.05 & 88.47 \(\) 0.13 \\ CSGN without \(E_{M}\) & 96.26 \(\) 0.08 & 96.17 \(\) 0.05 & 96.24 \(\) 0.04 & 96.29 \(\) 0.07 & 95.74 \(\) 0.05 \\ CSGN (ours) & **96.46 \(\) 0.06** & **96.32 \(\) 0.05** & **96.27 \(\) 0.11** & **96.30 \(\) 0.11** & **95.88 \(\) 0.08** \\   

Table 9: Ablation study for ELBO loss and \(_{M}\). Experiments are on CIFAR-10.

    &  \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\  CSGN without \(ELBO\) & 96.03 \(\) 0.11 & 95.71 \(\) 0.10 & 95.46 \(\) 0.06 & 95.44 \(\) 0.12 & 88.10 \(\) 0.26 \\ CSGN without \(ELBO\) & 96.04 \(\) 0.05 & 95.75 \(\) 0.08 & 95.54 \(\) 0.09 & 95.29 \(\) 0.05 & 88.47 \(\) 0.13 \\ CSGN without \(E_{M}\) & 96.26 \(\) 0.08 & 96.17 \(\) 0.05 & 96.24 \(\) 0.04 & 96.29 \(\) 0.07 & 95.74 \(\) 0.05 \\ CSGN (ours) & **96.46 \(\) 0.06** & **96.32 \(\) 0.05** & **96.27 \(\) 0.11** & **96.30 \(\) 0.11** & **95.88 \(\) 0.08** \\   

Table 9: Ablation study for ELBO loss and \(_{M}\). Experiments are on CIFAR-10.

Figure 7: The test accuracy on CIFAR-10 for different numbers of causal variables under instance-dependent noise with a noise rate of 0.5. The error bar for standard deviation has been shaded.

CSGN-PES is

\[_{pes}=_{(,)}[_{ce}(q_{ }(),)]-_{ELBO}ELBO+_{M}_{M},\] (19)

where \(_{ce}\) is the cross-entropy loss.

The experiment results are shown in Tab. 10. The experiment settings follow the settings of PES. The experiment results show that our method can still work well when without using the semi-supervised learning technique and clean sample selection.

## Appendix J The Number and the Accuracy of the Selected Clean Samples

We report the number and the accuracy of the selected clean samples on CIFAR-10 and CIFAR-100 datasets. The results are shown in Tab. 11 and 12. The results indicate that our method can select a large number of clean samples while maintaining high accuracy.

## Appendix K The Performance on the Selected Clean Samples

We also conduct experiments on the selected clean samples. Specifically, we trained a classification network using standard cross-entropy loss on these samples, employing the same architecture as our model, CSGN. The results of these experiments are presented in Tab. 13 and 14. These experiment results show that the performance of the network trained on the selected clean samples is lower than

    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\  PES & 92.95 \(\) 0.10 & 92.24 \(\) 0.18 & 91.08 \(\) 0.11 & 87.82 \(\) 1.11 & 82.70 \(\) 1.25 \\ CSGN-PES & 93.05 \(\) 0.06 & 92.61 \(\) 0.11 & 91.88 \(\) 0.07 & 89.42 \(\) 0.05 & 85.45 \(\) 0.05 \\ CSGN (ours) & **96.46 \(\) 0.06** & **96.32 \(\) 0.05** & **96.27 \(\) 0.11** & **96.30 \(\) 0.11** & **95.88 \(\) 0.08** \\   

Table 10: CSGN works with PES. Experiments are on CIFAR-10.

    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\  Number Accuracy & 43707.00 \(\) 3.52 & 39911.20 \(\) 14.47 & 35040.20 \(\) 5.49 & 29913.40 \(\) 4.41 & 25016.40 \(\) 5.24 \\        \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\  Number Accuracy & 41354.40 \(\) 49.30 & 37391.40 \(\) 126.90 & 32974.80 \(\) 66.08 & 28210.00 \(\) 44.47 & 26962.40 \(\) 37.79 \\        \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\        \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\        \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\        \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    \\   & IDN-10\% & IDN-20\% & IDN-30\% & IDN-40\% & IDN-50\% \\    


Table 11: The number and the accuracy of the selected clean samples on CIFAR-10.

that of our method. The primary reasons are the reduced sample size of the selected clean samples and a distribution shift from the overall dataset, i.e., the distribution of the selected clean samples is different from the whole dataset. Consequently, despite a lower noise rate in the selected clean samples, the performance of the classification network remains below that of our method.

## Appendix L Experiments on the Synthetic Dataset

To verify the proposed method can learn the causal graph and the mask, we conduct an experiment using a synthetic dataset known as the "moon dataset". The data points have two dimensions and are categorized into two distinct categories. To create noisy labels caused by a single factor, the noise rate for each data point is dependent on the value of its second dimension. The visualization of noise rates for all training samples is shown in Fig. 8. Note that the causal variables of the moon dataset are independent. We train our model on this synthetic dataset with the dimension of the latent factor \(\) set to 2.

After training, the causal weight between two causal variables is -0.0008. The influence is small enough, which means that they are independent. The values of the mask variable \(M_{}\) for noisy labels are [0.0000, 0.0232], which shows that our mask mechanism effectively identifies and selects the critical latent factor responsible for generating noisy labels.

We also compare the performance of our method with that of MEIDTM and CausalNL. MEIDTM does not model any causal mechanism. CausalNL roughly models the data-generating process, but the direct cause of noisy labels is the image, which is not aligned with the generating process of the moon dataset. Our model is the closest to the real-world data-generating process compared with these methods. Empirically, our method can achieve a test accuracy of 98.07 \(\) 0.69% and an estimation error for the transition matrix of 0.10 \(\) 0.07. In comparison, the test accuracy for CausalNL, which does not model the latent causal structure, is 97.88 \(\) 0.75% and a transition matrix estimation error of 0.12 \(\) 0.06. At the same time, the test accuracy of MEIDTM is 91.06 \(\) 0.75%, and the estimation error of the transition matrix is 0.45 \(\) 0.16. The results show that a good causal structure can lead to good transition matrix estimation.

## Appendix M Comparison of the Noise Transition Matrix

We use t-SNE visualization to compare the noise transition matrix learned by our method with those derived from the MEIDTM . We also select 30 pairs of data points with the same predicted clean labels. The dataset is CIFAR-10 with instance-dependent label noise, and the noise rate is 50%. The experiment results are shown in Fig. 9. These data points are the same in two figures. We can see that the distance between the same pair is different in the two images. For example, the pairs with number 25 are close to each other in the first figure but are further apart in the second figure. This can verify that the similarity learned by our method is different from the instance-dependent transition matrix-based method MEIDTM.

Figure 8: The visualization of the training data. The noise rate is dependent on feature 2. The average noise rate is 0.3.

## Appendix N Impact Statements

This paper presents work whose goal is to advance the field of learning with noisy labels. This work can reduce the cost (annotation costs) of training artificial intelligence models. Therefore, the threshold for using artificial intelligence has been lowered, and artificial intelligence technology is more widely used in society. There are no foreseeable negative effects.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: We have included the motivation, research problem, and insight in the abstract and introduction. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: We have discussed the limitations in the Appendix. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper.

Figure 9: The t-SNE visualization of the similarity of the learned noise transition. The pairs of data points with the same predicted clean label are marked with the same number. The distances between two data points represent the difference between the two noise transition matrices of these data points. The distance between the pair with the same number is different in the two images.

* The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.
* The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.
* The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.
* The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.
* If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.
* While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes] Justification: We have provided the theory assumptions and proofs in the Appendix. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: We provide complete implementation details in the Appendix. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.

* Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general, releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.
* While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [No] Justification: The code is our intellectual property and we will not release it before the paper is accepted. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results?Answer: [Yes] Justification: All the details are in the Experiments Setup Section and the Appendix. We also include the sensitive test regard to the hyperparameters in the Appendix. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: We report the error bars in the main experiments, except the experiment on the WebVision dataset, since previous work also does not report the error bars on WebVision. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors). * It should be clear whether the error bar is the standard deviation or the standard error of the mean. * It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified. * For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates). * If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: We report the computation devices in the Appendix. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).

9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: The research conforms to the NeurIPS Code of Ethics in every respect. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [Yes] Justification: The societal impacts is discussed in the Appendix. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations. * The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. * The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology. * If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: Our research does not have such risks. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.

* Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.
* We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [No] Justification: We can not find the licences for some assets, but we cite them all. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided. * If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset. * For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. * If this information is not available online, the authors are encouraged to reach out to the asset's creators.
13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: This research does not release new assets. Guidelines: * The answer NA means that the paper does not release new assets. * Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc. * The paper should discuss whether and how consent was obtained from people whose asset is used. * At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: This research does not involve crowdsourcing nor research with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.

* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: This research does not involve crowdsourcing nor research with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper. * We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution. * For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.