# H2RBox-v2: Incorporating Symmetry for Boosting Horizontal Box Supervised Oriented Object Detection

Yi Yu\({}^{1}\), Xue Yang\({}^{2,3}\), Qingyun Li\({}^{4}\), Yue Zhou\({}^{2}\), Gefan Zhang\({}^{5}\), Feipeng Da\({}^{1}\), Junchi Yan\({}^{2,3}\)

\({}^{1}\)Southeast University \({}^{2}\)MoE Key Lab of Artificial Intelligence, Shanghai Jiao Tong University

\({}^{3}\)Shanghai AI Laboratory \({}^{4}\)Harbin Institute of Technology \({}^{5}\)COWAROBOT Co. Ltd.

{yuyi,dafp}@seu.edu.cn, 21b905003@stu.hit.edu.cn

{yangxue-2019-sjtu,sjtu_zy,lizaozhouke,yanjunchil}@sjtu.edu.cn

PyTorch Code: https://github.com/open-mmlab/mmrotate

Equal contribution.

###### Abstract

With the rapidly increasing demand for oriented object detection, e.g. in autonomous driving and remote sensing, the recently proposed paradigm involving weakly-supervised detector H2RBox for learning rotated box (RBox) from the more readily-available horizontal box (HBox) has shown promise. This paper presents H2RBox-v2, to further bridge the gap between HBox-supervised and RBox-supervised oriented object detection. Specifically, we propose to leverage the reflection symmetry via flip and rotate consistencies, using a weakly-supervised network branch similar to H2RBox, together with a novel self-supervised branch that learns orientations from the symmetry inherent in visual objects. The detector is further stabilized and enhanced by practical techniques to cope with peripheral issues e.g. angular periodicity. To our best knowledge, H2RBox-v2 is the first symmetry-aware self-supervised paradigm for oriented object detection. In particular, our method shows less susceptibility to low-quality annotation and insufficient training data compared to H2RBox. Specifically, H2RBox-v2 achieves very close performance to a rotation annotation trained counterpart - Rotated FCOS: 1) DOTA-v1.0/1.5/2.0: 72.31%/64.76%/50.33% vs. 72.44%/64.53%/51.77%; 2) HRSC: 89.66% vs. 88.99%; 3) FAIR1M: 42.27% vs. 41.25%.

## 1 Introduction

Object detection has been studied extensively, with early research focusing mainly on horizontal detection . When fine-grained bounding boxes are required, oriented object detection  is considered more preferable, especially in complex scenes such as aerial images , scene text , retail scenes , and industrial inspection .

With oriented object detection being featured, some horizontal-labeled datasets have been re-annotated, such as DIOR  to DIOR-R  for aerial image (192K instances) and SKU110K  to SKU110K-R  for retail scene (1,733K instances). Although re-annotation enables the training of oriented detectors, two facts cannot be ignored: **1)** Horizontal boxes (HBoxes) are more readily available in existing datasets; **2)** Rotated box (RBox) or Mask annotation are more expensive.

Such a situation raises an interesting question: Can we achieve oriented object detection directly under the weak supervision of HBox annotation? Yang et al.  explored this new task setting and proposed the first general solution called HBox-to-RBox (H2RBox) in 2023.

H2RBox gives an effective paradigm and outperforms potential alternatives, including HBox-Mask-RBox (generating RBoxes from segmentation mask) powered by BoxInst  and BoxLevelSet , the state-of-the-art HBox-supervised instance segmentation methods. Yet it is not impeccable at least in two folds: **1)** H2RBox learns the angle from the geometry of circumscribed boxes, requiring high annotation quality and a large number of training data containing the same object in various orientations. **2)** H2RBox requires quite restrictive working conditions. For example, it is incompatible with rotation augmentation and is sensitive to black borders on images.

If the above requirements are not met, H2RBox may perform far below expectations. As a result, H2RBox does not support some small datasets (e.g. HRSC ) and some augmentation methods (e.g. random rotation), leading to bottlenecks in its application scenarios and performance.

By rethinking HBox-supervised oriented object detection with a powerful yet unexplored theory, symmetry-aware self-supervision, we present H2RBox-v2, a new version of H2RBox that exploits the symmetry of objects and solves the above issues.

**Motivation:** Symmetry is a natural and popular property in vision . For example, in the DOTA dataset , many categories (planes, courts, vehicles, ships, etc.) show significant reflection symmetry. For RBox annotation, symmetry is also an important consideration--Humans can intuitively take the direction of the symmetrical axis as the orientation, even without annotation guidance. Is there a way to use symmetry as a supervising tool in deep neural networks for oriented object detection? Will this technique lead to better performance? These are the questions for which this paper is intended.

**What is new in H2RBox-v2? 1)** A new self-supervised branch leaning angle from symmetry. H2RBox-v2 directly learns angles from the image through the symmetry of objects. That means it is capable of learning the angles correctly even if the HBox annotations are inaccurate in size (not

Figure 1: Visual comparisons of HBox-supervised oriented detectors, including BoxInst-RBox (2021) , BoxLevelSet-RBox (2022) , H2RBox (2023)  in the first row, SAM-RBox (2023)  in the second row, and H2RBox-v2 (our work) in the third row.

precisely the circumscribed rectangle, see Table 9) or when the training data is relatively insufficient (see Table 10). **2)** A newly designed CircumIoU loss in the weakly-supervised branch. With this amendment, H2RBox-v2 is now compatible with random rotation augmentation. **3)** As a result, H2RBox-v2 gives a higher performance (as is displayed in Fig. 1 and Table 1), further bridging the gap between HBox-supervised and RBox-supervised oriented object detection.

**Contributions: 1)** This work is the first attempt to explore symmetry for angle regression in oriented object detection, showing that symmetry in images can help learn the orientation of objects in a self-supervised manner. **2)** A new training paradigm incorporating symmetry in images is elaborated on, and an integral and stable implementation is provided in this paper. **3)** The proposed methods are evaluated via extensive experiments, showing their capability of learning the orientation via symmetry, achieving a higher accuracy than H2RBox. The source code is publicly available.

## 2 Related Work

**RBox-supervised oriented object detection:** Representative works include anchor-based detector RotatenNet , anchor-free detector Rotated FCOS , and two-stage detectors such as RoI Transformer , Oriented R-CNN  and ReDet . Besides, R\({}^{3}\)Det  and S\({}^{2}\)A-Net  improve the performance by exploiting alignment features. Most of the above methods directly perform angle regression, which may face loss discontinuity and regression inconsistency induced by the periodicity of the angle. Remedies have been thus developed, including modulated losses [32; 33] that alleviate loss jumps, angle coders [34; 35; 36] that convert the angle into boundary-free coded data, and Gaussian-based losses [37; 38; 39; 40] that transform rotated bounding boxes into Gaussian distributions. Additionally, RepPoint-based methods [41; 42; 43] provide new alternatives for oriented object detection, which predict a set of sample points that bounds the spatial extent of an object.

**HBox-supervised instance segmentation:** Compared with HBox-supervised oriented object detection, HBox-supervised instance segmentation, a similar task also belonging to weakly-supervised learning, has been better studied in the literature. For instance, SDI  refines the segmentation through an iterative training process; BBTP  formulates the HBox-supervised instance segmentation into a multiple-instance learning problem based on Mask R-CNN ; BoxInst  uses the color-pairwise affinity with box constraint under an efficient RoI-free CondInst ; BoxLevelSet  introduces an energy function to predict the instance-aware mask as the level set; SAM (Segment Anything Model)  produces object masks from input prompts such as points or HBoxes.

Most importantly, these HBox-supervised instance segmentation methods are potentially applicable to HBox-supervised oriented object detection by finding the minimum circumscribed rectangle of the segmentation mask. Such an HBox-Mask-RBox paradigm is a potential alternative for the task we are aiming at and is thus added to our experiments for comparison.

**HBox-supervised oriented object detection:** Though the oriented bounding box can be obtained from the segmentation mask, such an HBox-Mask-RBox pipeline can be less cost-effective. The seminal work H2RBox  circumvents the segmentation step and achieves RBox detection directly from HBox annotation. With HBox annotations for the same object in various orientations, the geometric constraint limits the object to a few candidate angles. Supplemented with a self-supervised branch eliminating the undesired results, an HBox-to-RBox paradigm is established.

Some similar studies use additional annotated data for training, which are also attractive but less general than H2RBox: **1)** OAOD  is proposed for weakly-supervised oriented object detection. But in fact, it uses HBox along with an object angle as annotation, which is just "slightly weaker" than RBox supervision. Such an annotation manner is not common, and OAOD is only verified

    & **Arch.1** &  **SS View** \\ **Transform** \\  &  **Angle Acquisition** \\ **Principle** \\  &  **Aug. Applicability** \\ MS \\  &  **Dataset Applicability2** \\ **RR** \\  &  **Gap3** \\ **FAIRM** \\  \\  v1 & WS+SS & Rotate &  Geometric Constraints \\ Rotate Consistency \\  & ✓ & \(\) & ✓ & \(\) & ✓ & -3.41\% \\  v2 & WS+SS &  Flip \\ Rotate \\  & 
 Symmetry-aware \\ Learning \\  & ✓ & ✓ & ✓ & ✓ & ✓ & **+0.07\%** \\   

* WS: Weakly-supervised, SS: Self-supervised. 2 Based on whether the training converges on the dataset.
* Performance gap of AP\({}_{50}\) compared to RBox-supervision (i.e. FCOS) average on datasets with “✓”.

Table 1: Comparison between H2RBox  (denoted as “v1” and H2RBox-v2 (ours).

on their self-collected ITU Firearm dataset. **2)** Sun et al.  proposes a two-stage framework: i) training detector with the annotated horizontal and vertical objects. ii) mining the rotation objects by rotating the training image to align the oriented objects as horizontally or vertically as possible. **3)** KCR  combines RBox-annotated source datasets with HBox-annotated target datasets, and achieves HBox-supervised oriented detection on the target datasets via transfer learning.

**Symmetry detection:** Detecting the symmetry (e.g. reflection) has been a long-standing research topic in vision , with approaches including key point matching [51; 52], iterative optimization [53; 54], and deep learning [55; 56]. These methods are aimed at tasks quite different from this paper, and we are the first to introduce symmetry-aware learning for oriented object detection.

## 3 Proposed Method

An overview of the proposed H2RBox-v2 is given in Fig. 2, which consists of a self-supervised (SS) branch (Sec. 3.2) and a weakly-supervised (WS) branch (Sec. 3.3).

### Preliminaries and Approach Overview

In H2RBox-v2, SS branch is designed to learn the orientation of objects from symmetry via consistencies between several views of training images, whilst WS branch learns other properties from the HBox annotation. The core idea of symmetry-aware SS learning is described below.

**Definition of reflection symmetry:** An object has reflectional symmetry if there is a line going through it which divides it into two pieces that are mirror images of each other .

Assume there is a neural network \(f_{}()\) that maps a symmetric image \(I\) to a real number \(\):

\[=f_{}(I)\] (1)

To exploit reflection symmetry, we endow the function with two new properties: flip consistency and rotate consistency.

**Property I: Flip consistency.** With an input image vertically flipped, \(f_{}()\) gives an opposite output:

\[f_{}(I)+f_{}((I))=0\] (2)

Figure 2: The overview of H2RBox-v2, consisting of a self-supervised branch that learns angles from the symmetry of objects, and a weakly-supervised branch that learns other properties from HBoxes.

where \((I)\) is an operator of vertically flipping the image \(I\).

**Property II: Rotate consistency.** With an input rotated by \(\), the output of \(f_{}()\) also rotates by \(\):

\[f_{}((I,))-f_{} (I)=\] (3)

where \((I,)\) is an operator that clockwise rotates the image \(I\) by \(\).

Now we consider that given an image \(I_{0}\) symmetric about \(=_{}\), assuming the corresponding output is \(_{}=f_{}(I_{0})\), the image can be transformed in two ways as shown in Fig. 3:

\(\)**Way 1**: Flipping \(I_{0}\) along line \(=_{}\). According to the above definition of reflection symmetry, the output remains the same, i.e. \(f_{}(I^{})=f_{}(I_{0})=_{ }\).

\(\)**Way 2**: Flipping \(I_{0}\) vertically to obtain \(I_{1}\) first, and then rotating \(I_{1}\) by \(2_{}\) to obtain \(I_{2}\). According to flip and rotate consistencies, the output is supposed to be \(f_{}(I_{2})=-_{}+2_{}\).

On the ground that ways 1 and 2 are equivalent, the transformed images \(I^{}\) and \(I_{2}\) are identical. And thus \(f_{}(I^{})=f_{}(I_{2})\), finally leading to \(_{}=_{}\).

From the above analysis, it arrives at a conclusion that if image \(I_{0}\) is symmetric about line \(=_{}\) and function \(f_{}()\) subjects to both flip and rotate consistencies, then \(f_{}(I_{0})\) must be equal to \(_{}\), so the orientation is obtained. In the following, we further devise two improvements.

**Handling the angle periodicity:** For higher conciseness, the periodicity is not included in the above formula. To allow images to be rotated into another cycle, the consistencies are modified as:

\[f_{}(I)+f_{}((I ))= k\] (4) \[f_{}((I,))-f _{}(I)= +k\]

where \(k\) is an integer to keep left and right in the same cycle. This problem is coped with using the snap loss in Sec. 3.4. Meanwhile, the conclusion should be amended as: \(f_{}(I_{0})=_{}+k/2\), meaning that the network outputs either the axis of symmetry or a perpendicular one.

**Extending to the general case of multiple objects:** Strictly speaking, our above discussion is limited to the setting when image \(I_{0}\) contains only one symmetric object. In detail implementation, we use an assigner to match the center of objects in different views, and the consistency losses are calculated between these matched center points. We empirically show on several representative datasets (see Sec. 4.2) that our above design is applicable for multiple object detection with objects not perfectly symmetric, where an approximate axis of each object can be found via learning.

### Self-supervised (SS) Branch

The above analysis suggests that the network can learn the angle of objects from symmetry through the flip and rotate consistencies. A self-supervised branch is accordingly designed.

During the training process, we perform vertical flip and random rotation to generate two transformed views, \(I_{}\) and \(I_{}\), of the input image \(I\), as shown in Fig. 2 (a). The blank border area induced by rotation is filled with reflection padding. Afterward, the three views are fed into three parameter-shared branches of the network, where ResNet50  and FFN  are used as the backbone and the neck, respectively. The random rotation is in range \(/4 3/4\) (according to Table 7).

Similar to H2RBox, a label assigner is required in the SS branch to match the objects in different views. In H2RBox-v2, we calculate the average angle features on all sample points for each object and eliminate those objects without correspondence (some objects may be lost during rotation).

Following the assigner, an angle coder PSC  is further adopted to cope with the boundary problem. Table 4 empirically shows that the impact of boundary problem in our self-supervised setting could

Figure 3: To illustrate that the reflection symmetry (Way 1) is equivalent to a vertical flip plus a rotation (Way 2). The expected outputs at the bottom show that \(f_{}(I^{})=f_{}(I_{2}) _{}=_{}\,.\)

be much greater than that in the supervised case, especially in terms of stability. The decoded angles of the original, flipped, and rotated views are denoted as \(\), \(_{}\), and \(_{}\).

Finally, with formula in Sec. 3.4, the loss \(L_{}\) can be calculated between \(\) and \(_{}\), whereas \(L_{}\) between \(\) and \(_{}\). By minimizing \(L_{}\) and \(L_{}\), the network learns to conform with flip and rotate consistencies and gains the ability of angle prediction through self-supervision.

### Weakly-supervised (WS) Branch

The SS branch above provides the angle of objects. To predict other properties of the bounding box (position, size, category, etc.), a weakly-supervised branch using HBox supervision is further introduced. The WS branch in H2RBox-v2 is inherited from H2RBox, but has some differences:

**1)** In H2RBox, the angle is primarily learned by the WS branch, with an SS branch eliminating the undesired results. Comparably, H2RBox-v2 has a powerful SS branch driven by symmetry that can learn the angle independently, and thus the angle subnet is deleted from the WS branch.

**2)** H2RBox converts \(B_{}\) to an HBox to calculate the IoU loss  with the HBox \(B_{}\), which cannot work with random rotation where \(B_{}\) becomes an RBox. To solve this problem, CircumIoU loss (detailed in Sec. 3.4) is proposed in H2RBox-v2 to directly calculate \(L_{}\) between \(B_{}\) and \(B_{}\), so that \(B_{}\) is allowed to be an RBox circumscribed to \(B_{}\), as is shown in Fig. 2 (c).

### Loss Functions

**Loss for SS branch:** As described in Eq. (4), the consistencies encounter the periodicity problem in rotation. To cope with this problem, the snap loss \(_{s}\)3 is proposed in this paper:

\[_{s}(_{},_{})=_{k Z }(smooth_{L1}(_{},k+_{} ))\] (5)

where an illustration is displayed in Fig. 4 (a). The snap loss limits the difference between predicted and target angles to \(/2\) so that the loss calculation upon the two decoded angles will not induce boundary discontinuity. The snap loss is used in both \(L_{}\) and \(L_{}\) as:

\[L_{}=_{s}(_{}+,0 )\\ L_{}=_{s}(_{}-,) \] (6)

where \(L_{}\) is the loss for flip consistency, and \(L_{}\) for rotate consistency. \(\), \(_{}\), and \(_{}\) are the outputs of the three views described in Sec. 3.2. \(\) is the angle in generating rotated view.

With the above definitions, the loss of the SS branch can be expressed as:

\[L_{}= L_{}+L_{}\] (7)

where \(\) is the weight set to 0.05 according to the ablation study in Table 6.

**Loss for the WS branch:** The losses in the WS branch are mainly defined by the backbone FCOS detector, including \(L_{}\) for classification and \(L_{}\) for center-ness. Different from RBox-supervised

Figure 4: Illustration of the snap loss (for SS branch) and the CircumIoU loss (for WS branch).

methods, \(B_{}\) in our task is an RBox circumscribed to \(B_{}\), so we re-define the loss for box regression \(L_{}\) with CircumIoU loss as:

\[_{p}(B_{},B_{})=-}  B_{}}{B_{} B_{}}\] (8)

where \(B_{}\) is the dashed box in Fig. 4 (b), obtained by projecting the predicted box \(B_{}\) to the direction of ground-truth box \(B_{}\).

The CircumIoU loss enables H2RBox-v2 to use random rotation augmentation to further improve the performance (see Table 2), which is not supported by H2RBox.

Finally, the loss of the WS branch can be expressed as:

\[L_{}=L_{}+_{}L_{}+_{}L_{ }\] (9)

where the hyper-parameters are set to \(_{}=1\) and \(_{}=1\) by default.

**Overall loss:** The overall loss of the proposed network is the sum of the WS loss and the SS loss:

\[L_{}=L_{}+_{}L_{}\] (10)

where \(_{}\) is the weight of SS branch set to 1 by default.

### Inference Phase

Although using a multi-branch paradigm in training (as shown in Fig. 2), H2RBox-v2 does not require the multi-branch or the view generation during inference.

Due to the parameter sharing, the inference only involves the forward propagation of backbone, angle head (from SS), and other heads (i.e. regression, classification, and center-ness from WS). The only additional cost of H2RBox-v2 during inference is the PSC decoding (compared to H2RBox). Thus, FCOS/H2RBox/H2RBox-v2 have similar inference speed (see Table 2).

## 4 Experiments

Using PyTorch 1.13.1  and the rotation detection tool kits: MMRotate 1.0.0 , experiments are carried out. The performance comparisons are obtained by using the same platforms (i.e. PyTorch/ MMRotate version) and hyper-parameters (learning rate, batch size, optimizer, etc.).

### Datasets and Settings

**DOTA :** DOTA-v1.0 contains 2,806 aerial images--1,411 for training, 937 for validation, and 458 for testing, as annotated using 15 categories with 188,282 instances in total. DOTA-v1.5/2.0 are the extended version of v1.0. We follow the default preprocessing in MMRotate: The high-resolution images are split into 1,024 \(\) 1,024 patches with an overlap of 200 pixels for training, and the detection results of all patches are merged to evaluate the performance.

**HRSC :** It contains ship instances both on the sea and inshorse, with arbitrary orientations. The training, validation, and testing set includes 436, 181, and 444 images, respectively. With preprocessing by MMRotate, images are scaled to 800 \(\) 800 for training/testing.

**FAIR1M :** It contains more than 1 million instances and more than 40,000 images for fine-grained object recognition in high-resolution remote sensing imagery. The dataset is annotated with five categories and 37 fine-grained subcategories. We split the images into 1,024 \(\) 1,024 patches with an overlap of 200 pixels and a scale rate of 1.5 and merge the results for testing. The performance is evaluated on the FAIR1M-1.0 server.

**Experimental settings:** We adopt the FCOS  detector with ResNet50  backbone and FPN  neck as the baseline method, based on which we develop our H2RBox-v2. We choose average precision (AP) as the primary metric to compare with existing literature. For a fair comparison, all the listed models are configured based on ResNet50  backbone and trained on NVIDIA RTX3090/4090 GPUs. All models are trained with AdamW , with an initial learning rate of 5e-5 and a mini-batch size of 2. Besides, we adopt a learning rate warm-up for 500 iterations, and the learning rate is divided by ten at each decay step. "1x", "3x", and "6x" schedules indicate 12, 36, and 72 epochs for training. "MS" and "RR" denote multi-scale technique  and random rotation augmentation. Unless otherwise specified, "6x" is used for HRSC and "1x" for the other datasets, while random flipping is the only augmentation that is always adopted by default.

### Main Results

**DOTA-v1.0:** Table 2 shows that H2RBox-v2 outperforms HBox-Mask-Rbox methods in both accuracy and speed. Taking BoxLevelSet-RBox  as an example, H2RBox-v2 gives an accuracy of 15.02% higher, and a x7 speed faster by avoiding the time-consuming post-processing (i.e. minimum circumscribed rectangle operation). In particular, the recent foundation model for segmentation i.e. SAM  has shown strong zero-shot capabilities by training on the largest segmentation dataset to date. Thus, we use a trained horizontal FCOS detector to provide HBoxes into SAM as prompts, so that the corresponding masks can be generated by zero-shot, and finally the rotated RBoxes are obtained by performing the minimum circumscribed rectangle operation on the predicted Masks. Thanks to the powerful zero-shot capability, SAM-RBox based on ViT-B  in Table 2 has achieved 63.94%. However, it is also limited to the additional mask prediction step and the time-consuming post-processing, only 1.7 FPS during inference.

In comparison with the current state-of-the-art method H2RBox, to make it fair, we use the reproduced result of H2RBox, which achieves 70.05%, 2.23% higher than the original paper . In this fair comparison, our method outperforms H2RBox by 2.26% (72.31% vs. 70.05%, both w/o MS). When MS is applied, the improvement is 2.62% (75.35% vs. 77.97%, both w/ MS).

Furthermore, the performance gap between our method and the RBox-supervised FCOS baseline is only 0.13% (w/o MS and RR) and 0.46% (w/ RR). When MS and RR are both applied, our method outperforms RBox-supervised FCOS by 0.57% (78.25% vs. 77.68%), proving that supplemented with symmetry-aware learning, the weakly-supervised learning can achieve performance on a par with the fully-supervised one upon the same backbone neural network. Finally, H2RBox-v2 obtains 80.61% on DOTA-v1.0 by further utilizing a stronger backbone.

   & **Sched.** & **MS** & **RR** & **Size** & **FPS** & **AP\({}_{50}\)** \\   & RepPoints (2019)  & 1x & & & 1,024 & 24.5 & 68.45 \\  & RetinaNet (2017)  & 1x & & & 1,024 & 25.4 & 68.69 \\  & KLD (2021)  & 1x & & & 1,024 & 25.4 & 71.24 \\  & KFIoU (2023)  & 1x & & & 1,024 & 25.4 & 71.61 \\  & GWD (2021)  & 1x & & & 1,024 & 25.4 & 71.66 \\  & PSC (2023)  & 1x & & & 1,024 & 25.4 & 71.92 \\  & SASM (2022)  & 1x & & & 1,024 & 24.4 & 72.30 \\  & R\({}^{3}\)Det (2021)  & 1x & & & 1,024 & 20.0 & 73.12 \\  & CFA (2021)  & 1x & & & 1,024 & 24.5 & 73.84 \\  & Oriented RepPoints (2022)  & 1x & & & 1,024 & 24.5 & 75.26 \\  & S\({}^{2}\)A-Net (2022)  & 1x & & & 1,024 & 23.3 & 75.81 \\  & FCOS (2019)  & 1x & & & 1,024 & 29.5 & 72.44 \\  & FCOS (2019)  & 3x & & ✓ & 1,024 & 29.5 & 74.75 \\  & FCOS (2019)  & 1x & ✓ & ✓ & 1,024 & 29.5 & 77.68 \\   & BoxInst-RBox (2021) 1  & 1x & & & 960 & 2.7 & 53.59 \\  & BoxLevelSet-RBox (2022) 2  & 1x & & & 960 & 4.7 & 56.44 \\  & SAM-ViT-B-RBox (2023) 3  & 1x & & & 1,024 & 1.7 & 63.94 \\  & H2RBox (FCOS-based) (2023) 4  & 1x & & & 1,024 & 29.1 & 67.82 \\  & H2RBox (FCOS-based) (2023) 5  & 1x & & & 1,024 & 29.1 & 70.05 \\  & H2RBox (FCOS-based) (2023) 4  & 1x & ✓ & & 1,024 & 29.1 & 74.40 \\  & H2RBox (FCOS-based) (2023) 5  & 1x & ✓ & & 1,024 & 29.1 & 75.35 \\  & H2RBox-v2 (FCOS-based) (2023) 5  & 1x & & & 960 & 31.6 & 71.46 \\  & H2RBox-v2 (FCOS-based) & 1x & & & 1,024 & 29.1 & 72.31 \\  & H2RBox-v2 (FCOS-based) & 1x & & & 1,024 & 29.1 & 74.29 \\  & H2RBox-v2 (FCOS-based) & 1x & ✓ & & 1,024 & 29.1 & 77.97 \\  & H2RBox-v2 (FCOS-based) & 1x & ✓ & ✓ & 1,024 & 29.1 & 78.25 \\  & H2RBox-v2 (FCOS-based, Swin-T) 6  & 1x & ✓ & & 1,024 & 24.0 & 79.39 \\  & H2RBox-v2 (FCOS-based, Swin-B) 6  & 1x & ✓ & & 1,024 & 12.4 & 80.61 \\  

* \({}^{1}\) “-RBox” means the minimum rectangle operation is performed on the Mask to obtain RBox.
* \({}^{2}\) Evaluated on NVIDIA V100 GPU due to the excessive RAM usage.
* \({}^{3}\) The code is available at https://github.com/Li-Qingyun/sam-mmrotate.
* \({}^{4}\) Results reported in the original paper .
* \({}^{5}\) Results reproduced by us with same infrastructure for a fair comparison.
* \({}^{6}\) Using Swin Transformer  as backbone on four NVIDIA A100 GPUs with batch size = 4.

Table 2: Results on the DOTA-v1.0 dataset.

**DOTA-v1.5/2.0:** As extended versions of DOTA-v1.0, these two datasets are more challenging, while the results present a similar trend. Still, H2RBox-v2 shows considerable advantages over H2RBox, with an improvement of 3.06% on DOTA-v1.5 and 1.65% on DOTA-v2.0. The results on DOTA-v1.5/2.0, HRSC, and FAIR1M are shown in Table 3.

**HRSC:** H2RBox  can hardly learn angle information from small datasets like HRSC, resulting in deficient performance. Contrarily, H2RBox-v2 is good at this kind of task, giving a performance comparable to fully-supervised methods. Compared to KCR  that uses transfer learning from RBox-supervised DOTA to HBox-supervised HRSC, our method, merely using HBox-supervised HRSC, outperforms KCR by 10.56% (89.66% vs. 79.10%).

**FAIR1M:** This dataset contains a large number of planes, vehicles, and courts, which are more perfectly symmetric than objects like bridges and harbors in DOTA. This may explain the observation that H2RBox-v2, learning from symmetry, outperforms H2RBox by a more considerable margin of 6.33% (42.27% vs. 35.94%). In this case, H2RBox-v2 even performs superior to the fully-supervised FCOS that H2RBox-v2 is based on by 1.02% (42.27% vs. 41.25%).

### Ablation Studies

**Loss in SS branch:** Table 4 studies the impact of using the snap loss (see Sec. 3.4) and the angle coder. Column "PSC" indicates using PSC angle coder  and "w/o PSC" means the conv layer directly outputs the angle. Column "\(_{s}\)" with check mark denotes using snap loss (otherwise using smooth L1 loss). Without these two modules handling boundary discontinuity, we empirically find that the loss could fluctuate in a wide range, even failure in convergence (see the much lower results in Table 4). In comparison, when both PSC and snap loss are used, the training is stable.

**Loss in WS branch:** Table 5 shows that CircumIoU loss with random rotation can further improve the performance, which H2RBox is incapable of. "\(_{}\)" means using CircumIoU loss in Sec. 3.4, and otherwise, IoU loss  is used following a conversion from RBox to HBox (see H2RBox ).

**Weights between \(L_{}\) and \(L_{}\):** Table 6 shows that on both DOTA and HRSC datasets, \(=0.05\) could be the best choice under AP\({}_{50}\) metric, whereas \(=0.1\) under AP\({}_{75}\). Hence in most experiments, we choose \(=0.05\), except for Table 7 where \(=0.1\) is used.

**Range of view generation:** When the rotation angle \(\) is close to 0, the SS branch could fall into a sick state. This may explain the fluctuation of losses under the random rotation within \(-\), leading to training instability. According to Table 7, \(/4 3/4\) is more suitable.

 
**Dataset** & PSC & \(_{s}\) & **AP** & **AP\({}_{50}\)** & **AP\({}_{75}\)** \\   & & & 24.24 & 52.24 & 19.48 \\  & & ✓ & 0.01 & 0.77 & 0.02 \\  & ✓ & & 10.49 & 27.57 & 6.15 \\  & ✓ & ✓ & **40.69** & **72.31** & **39.49** \\   & & & 2.25 & 7.83 & 0.62 \\  & & ✓ & 48.95 & 88.52 & 50.03 \\  & ✓ & & 0.31 & 0.88 & 0.13 \\  & ✓ & ✓ & **58.03** & **89.66** & **64.80** \\  

Table 4: Ablation with different SS losses.

 
**Method** & **DOTA-v1.0** & **DOTA-v1.5** & **DOTA-v2.0** & **HRSC** & **FAIR1M** \\  RetinaNet (2017)  & 68.69 & 60.57 & 47.00 & 84.49 & 37.67 \\ GWD (2021)  & 71.66 & 63.27 & 48.87 & 86.67 & 39.11 \\ S\({}^{2}\)A-Net (2022)  & 75.81 & 66.53 & 52.39 & 90.10 & 42.44 \\ FCOS (2019)  & 72.44 & 64.53 & 51.77 & 88.99 & 41.25 \\  Sun et al. (2021)  & 38.60 & - & - & - & - \\ KCR (2023) \({}^{2}\) & - & - & - & 79.10 & - \\ H2RBox (2023)  & 70.05 & 61.70 & 48.68 & 7.03 & 35.94 \\ H2RBox-v2 & **72.31** & **64.76** & **50.33** & **89.66** & **42.27** \\  ^{1}\) Sparse annotation for horizontal/vertical objects. The result is cited from their paper.} \\ ^{2}\) Transfer learning from DOTA (RBox) to HRSC (HBox). The result is cited from their paper.} \\ 

Table 3: AP\({}_{50}\) performance on the DOTA-v1.0/1.5/2.0, HRSC, and FAIR1M datasets.

 
**Dataset** & \(_{}\) & RR & **AP** & **AP\({}_{50}\)** & **AP\({}_{75}\)** \\   & & & 39.35 & 71.49 & 37.03 \\  & & ✓ & 11.93 & 29.34 & 7.86 \\  & ✓ & **40.69** & **72.31** & 39.49 \\  & ✓ & ✓ & 40.17 & 71.79 & **39.77** \\   & & & 56.20 & 89.58 & 61.84 \\  & & ✓ & 41.10 & 87.19 & 33.97 \\   & ✓ & & 58.03 & **89.66** & 64.80 \\   & ✓ & ✓ & **63.82** & 89.56 & **76.11** \\  

Table 5: Ablation with different WS losses.

**Branch multiplexing:** An additional experiment that randomly selects from 5% flip or 95% rotation in only one branch (the proportion based on \(=0.05\) in Table 6) shows AP\({}_{50}\)/AP\({}_{75}\): 72.24%/39.51% (DOTA w/o MS) while reducing the training time and the RAM usage to H2RBox's level.

**Padding strategies:** Compared to the performance loss of more than 10% for H2RBox without reflection padding, Table 8 shows that H2RBox-v2 is less sensitive to black borders.

**Annotation noise:** Table 9 multiplies the height and width of annotated HBox by a noise from the uniform distribution \((1-,1+)\). When \(=30\%\), the AP\({}_{50}\) of H2RBox-v2 drops by only 1.2%, less than H2RBox (2.69%), which demonstrates the better robustness of our method.

**Training data volume:** Table 10 displays that the gap between H2RBox and H2RBox-v2 becomes larger on the sampled version of DOTA, where \(p\) denotes the sampling percentage.

## 5 Conclusion

This paper presents H2RBox-v2, a weakly-supervised detector that learns the RBox from the HBox annotation. Unlike the previous version H2RBox, H2RBox-v2 learns the angle directly from the image of the objects through a powerful symmetry-aware self-supervised branch, which further bridges the gap between HBox-supervised and RBox-supervised oriented object detection.

Extensive experiments are then carried out with the following observations: **1)** Compared to H2RBox, H2RBox-v2 achieves higher accuracy on various datasets, with an improvement of 2.32% on average over three versions of DOTA, and 6.33% on the FAIR1M dataset. **2)** H2RBox-v2 is less susceptible to low annotation quality and insufficient training data. As a result, it is compatible with small datasets such as HRSC, which H2RBox cannot handle. **3)** Even compared to fully-supervised counterpart (i.e. Rotated FCOS), H2RBox-v2 still shows quite competitive performance, proving the effectiveness and the potential of symmetry-aware self-supervision for rotating detection.

**Broader impacts.** Oriented object detection can be used for military purposes e.g. by remote sensing.

**Limitations.** There can be cases when the objects are not symmetric in appearance. This may also hold when the objects are partially occluded even from the top view. Moreover, it becomes more challenging to explore the symmetry in 3-D object rotation detection due to occlusion, which yet has been well explored in  for autonomous driving by the H2RBox (v1) method .

  
**Dataset** & \(\) & **AP** & **AP\({}_{50}\)** & **AP\({}_{75}\)** & **Dataset** & \(\) & **AP\({}_{50}\)** & **AP\({}_{75}\)** \\   & 0 & 31.60 & 66.37 & 25.03 &  & 0 & 0.06 & 0.32 & 0.00 \\  & 0.01 & 40.43 & 72.26 & 38.55 & & 0.01 & 55.78 & 89.20 & 61.72 \\   & 0.05 & **40.69** & **72.31** & 39.49 & & 0.05 & **88.03** & **89.66** & 64.80 \\   & 0.1 & 40.48 & 71.46 & **39.84** & & 0.1 & **58.22** & 89.45 & **64.99** \\   & 0.5 & 39.94 & 72.26 & 38.16 & & 0.5 & 53.85 & 88.90 & 61.47 \\   & 1.0 & 38.50 & 70.91 & 36.02 & & 1.0 & 1.57 & 6.97 & 0.38 \\   

Table 6: Ablation with different weights between flipping and rotating losses defined in Eq. 6.

  
**Dataset** & **Padding** & **AP** & **AP\({}_{50}\)** & **AP\({}_{75}\)** \\   & Zeros & 40.49 & 72.26 & 39.15 \\  & Reflection & **40.69** & **72.31** & **39.49** \\   & Zeros & 55.90 & 89.32 & 60.95 \\  & Reflection & **58.03** & **89.66** & **64.80** \\  

Table 10: Ablation training with different sampling percentages of DOTA dataset.

  
**Dataset** & **AP** & **AP\({}_{50}\)** & **AP\({}_{75}\)** \\   & Zeros & 40.49 & 72.26 & 39.15 \\  & Reflection & **40.69** & **72.31** & **39.49** \\   & Zeros & 55.90 & 89.32 & 60.95 \\  & Reflection & **58.03** & **89.66** & **64.80** \\  

Table 8: Ablation with different padding strategies for rotated view generation.

    &  &  \\   & **AP\({}_{50}\)** & **AP\({}_{75}\)** & **AP\({}_{50}\)** & **AP\({}_{75}\)** \\ 
0\% & 70.05 & 38.38 & 72.31 & 39.49 \\
10\% & 69.19 & 35.24 & 71.68 & 36.33 \\
30\% & 67.39 & 26.02 & 71.11 & 34.12 \\  

Table 9: Ablation with different levels of noise adding to HBox annotations on DOTA.