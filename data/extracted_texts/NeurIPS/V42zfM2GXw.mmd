# Shallow encoder-based approaches:

DeckL: A Deep Evolutionary Clustering Jointed Temporal Knowledge Graph Representation Learning Approach

 Qian Chen, Ling Chen

State Key Laboratory of Blockchain and Data Security

College of Computer Science and Technology

Zhejiang University

{qianchencs,lingchen}@cs.zju.edu.cn

Corresponding author: Ling Chen

###### Abstract

Temporal Knowledge Graph (TKG) representation learning aims to map temporal evolving entities and relations to embedded representations in a continuous low-dimensional vector space. However, existing approaches cannot capture the temporal evolution of high-order correlations in TKGs. To this end, we propose a **D**eep **E**volutionary **C**lustering jointed temporal knowledge graph **R**epresentation **L**earning approach (**D****ECRL**). Specifically, a deep evolutionary clustering module is proposed to capture the temporal evolution of high-order correlations among entities. Furthermore, a cluster-aware unsupervised alignment mechanism is introduced to ensure the precise one-to-one alignment of soft overlapping clusters across timestamps, thereby maintaining the temporal smoothness of clusters. In addition, an implicit correlation encoder is introduced to capture latent correlations between any pair of clusters under the guidance of a global graph. Extensive experiments on seven real-world datasets demonstrate that DECKL achieves the state-of-the-art performances, outperforming the best baseline by an average of 9.53%, 12.98%, 10.42%, and 14.68% in MRR, Hits@1, Hits@3, and Hits@10, respectively.

## 1 Introduction

Temporal Knowledge Graphs (TKGs) are collections of human temporal evolving knowledge , which are widely utilized in various fields, e.g., information retrieval , natural language understanding , and recommendation systems . A TKG represents events in the form of quadruples \((s,r,o,t)\), where \(s\) and \(o\) denote the subject and object entities, respectively, \(r\) denotes the relation between \(s\) and \(o\), and \(t\) represents the timestamp . Event prediction in TKGs is an important task that predicts future events according to historical events . TKG representation learning aims to map temporal evolving entities and relations to embedded representations in a continuous low-dimensional vector space. Due to the complex temporal dynamics and multi-relations within TKGs, TKG representation learning poses great challenges to the research community.

In recent years, many TKG representation learning approaches have used graph neural networks  (GNNs) to model pairwise entity correlations [14; 1]. Furthermore, some researchers have leveraged derived structures, e.g., communities , entity groups , and hypergraphs [26; 29], to model high-order correlations among entities, i.e., the simultaneous correlations among three or more entities.

These approaches, however, lack the capability to capture the temporal evolution of high-order correlations in TKGs. As a kind of dynamic graph, TKGs inherently feature the temporal evolution of high-order correlations. For example, within TKGs focused solely on countries, a country entity may be affiliated with different international political organizations at different timestamps, with these organizations experiencing membership adjustment over time. In addition, the membership adjustment in international political organizations does not shift suddenly. Typically, numerous events occur before the formal adjustment of their membership, gradually pushing memberships away from or drawing them closer to international political organizations. For instance, the UK's official departure from the European Union (EU) was preceded by numerous events that incrementally estranged it from the EU.

To address the aforementioned deficiencies, a Deep Evolutionary Clustering jointed temporal knowledge graph Representation Learning approach (**DECRL**) is proposed for event prediction in TKGs. To the best of our knowledge, DECRL is the first work that integrates deep evolutionary clustering approaches into TKGs, which jointly optimizes TKG representation learning with evolutionary clustering to capture the temporal evolution of high-order correlations. Our main contributions are outlined as follows:

* We propose a deep evolutionary clustering module to capture the temporal evolution of high-order correlations among entities, where clusters represent the high-order correlations between multiple entities. Furthermore, a cluster-aware unsupervised alignment mechanism is introduced to ensure precise one-to-one alignment of soft overlapping clusters across timestamps, maintaining the temporal smoothness of clusters over successive timestamps.
* We propose an implicit correlation encoder to capture latent correlations between any pair of clusters, which defines the interaction intensities between clusters to form a cluster graph. In addition, a global graph, constructed from all events of training set, is introduced to guide the assignment of different interaction intensities to different cluster pairs.
* We evaluate DECRL on seven real-world datasets. The experimental results demonstrate that DECRL achieves the state-of-the-art (SOTA) performance. It outperforms the best baseline by an average of 9.53%, 12.98%, 10.42%, and 14.68% in MRR, Hits@1, Hits@3, and Hits@10, respectively.

## 2 Related work

### TKG representation learning approach

GNNs and variants of recurrent neural networks (RNNs) are commonly integrated to model graph structural information and temporal dependency within TKGs, respectively [1; 34; 16; 14]. For example, TeMP  and RE-GCN  both utilize relation-aware GCN  to model the influence of neighbor entities and apply GRUs to model the temporal dependency. TiRGN  employs multi-relational GNNs to model graph structural information, and utilizes GRUs to capture the temporal dependency across sequential timestamps. However, these approaches often resort to stacking multiple layers to model the influence of distant neighbors, which may lead to the over-smoothing problem.

Recent research advancements have introduced paths [15; 8; 18] to enhance the modeling capability of the latent pairwise correlations between entities. For example, xERTE  utilizes a time-aware graph attention mechanism to obtain and exploit local subgraphs. TLogic  employs a time-based random walk strategy to acquire logical paths. Furthermore, some researchers have leveraged derived structures, e.g., communities , entity groups , and hypergraphs , to model high-order correlations among entities. For example, EvoExplore  utilizes a temporal point process enhanced by a hierarchical attention mechanism to establish dynamic communities for modeling latent correlations among entities. DHyper  utilizes hypergraph neural networks to model high-order correlations among entities and among relations.

While the promising results of introducing derived structures, existing approaches lack the capability to capture the temporal evolution of high-order correlations in TKGs. To address this gap, we propose DECRL, which is the first work to integrate deep evolutionary clustering approaches into TKGs. DECRL jointly optimizes TKG representation learning with evolutionary clustering to capture the temporal evolution of high-order correlations.

### Deep evolutionary clustering approach

Existing deep evolutionary clustering approaches employ different strategies for discovering stable clusters [7; 21; 36; 20; 38; 37]. For example, DYNMOGA  employs a deep evolutionary clustering approach designed to identify evolving communities within dynamic networks, which treats the process as a multi-objective optimization problem aimed at cluster stability. sE-NMF  implements linear fusion of adjacency matrices across timestamps to enhance the temporal stability of clusters. Both DNETC  and CDNE  use constructed temporal smoothness loss functions to ensure a consistent and stable evolution of clustering results through successive timestamps. TRNNGCN  introduces a decay matrix to assess the influence of historical clustering results, thereby stabilizing the current clustering configuration.

These approaches straightforwardly incorporate prior clustering results with current timestamp results over time under the presumption that clustering results are relatively stable across different timestamps. However, the nuances between similar clusters are difficult to recognize in this way. In TKG representation learning, it is necessary to discern the subtle differences in high-order correlations. To bridge this gap, in our work, a cluster-aware unsupervised alignment mechanism is introduced, which ensures the precise one-to-one alignment of soft overlapping clusters across timestamps, thereby maintaining the temporal smoothness of clusters over successive timestamps.

## 3 Preliminaries

**Definition 1** (Tkg).: A TKG is a set of events formalized as \(=\{(s,r,o,t) s,o,r,t\}\), where \(\), \(\), and \(\) denote the set of entities, relations, and timestamps, respectively. \(^{t}\) denotes the set of events at timestamp \(t\).

**Definition 2** (Entity Graph).: The entity graph is constructed based on \(^{t}\), which is a multi-relational graph, and can be denoted as \(G^{t}_{}=(V^{t}_{},E^{t}_{})\), where \(V^{t}_{}\) and \(E^{t}_{}\) denote the set of nodes and edges of the entity graph at timestamp \(t\), respectively. The nodes in \(V^{t}_{}\) represent entities, while the edges in \(E^{t}_{}\) represent relations between entities at timestamp \(t\).

**Definition 3** (Cluster Graph).: The cluster graph is constructed based on \(G^{t}_{}\), which is a fully connected graph, and can be denoted as \(G^{t}_{}=(V^{t}_{},E^{t}_{})\), where \(V^{t}_{}\) and \(E^{t}_{}\) denote the set of nodes and edges of the cluster graph at timestamp \(t\), respectively. The nodes and edges of cluster graphs represent clusters and the latent correlations between them, respectively, where each cluster represents the high-order correlations among entities.

**Task (Event Prediction).** Given a query \((s,?,o,t)\), the event prediction task in TKGs aims to predict the conditional probability of all relations with the subject entity \(s\), the object entity \(o\), and the historical event sets \(^{1:T-1}\), which can be denoted as \(p(}|s,o,^{1:T-1})\), where \(T\) denotes the number of historical timestamps.

## 4 Methodology

### Overview

The proposed DECRL approach is illustrated in Figure 1. At each timestamp, entity and relation representations updated by the cluster graph message passing module are merged with input representations from the previous timestamp using a time residual gate, serving as the input for the current timestamp. The multi-relational interactions among entities are modeled by the relation-aware GCN. The deep evolutionary clustering module captures the temporal evolution of high-order correlations among entities, maintaining the temporal smoothness of clusters over successive timestamps through an unsupervised alignment mechanism. The implicit correlation encoder captures the latent correlations between any pair of clusters, enabling message passing within the cluster graph to update entity representations. Finally, the attentive temporal encoder captures temporal dependencies among entity and relation representations across timestamps, integrating them with temporal information for future event prediction. The computational complexity of DECRL can be found in Appendix A.1.

### Evolutionary clustering module

The entity graph \(G^{t}_{}=(V^{t}_{},E^{t}_{})\) is constructed based on the historical events at timestamp \(t\), which can be used to capture the structural dependency among concurrent events. Since the entity graphis a multi-relational graph, relation-aware GCN  is utilized to model the structural dependency, which is formulated as:

\[_{}^{t,l+1}=(}}_{(s,r), (s,r,o)^{t}}_{1}(_{}^{t,l}+_{ }^{t,l})+_{2}_{}^{t,l})\] (1)

where \(_{}^{t,l}\), \(_{}^{t,l}\), and \(_{}^{t,l}\) denote the \(l^{th}\) layer representations of subject entity \(s\), object entity \(o\), and relation \(r\) at timestamp \(t\), respectively. \(_{1}\) and \(_{2}\) are learnable parameters for aggregating neighbor entity representations and self-loop, respectively. \(d_{}\) denotes the in-degree of object entity \(o\). Initially, entities are assigned random representations based on their in-degree, such that entities with the same in-degree have the same initial representations, thereby efficiently accelerating the update process of entity representations. Relations are given with the random initial representations. For simplicity, the subscript \(l\) of variables is omitted in the following sections without causing ambiguity.

The representation of the relation \(r\) at timestamp \(t\) is influenced by the \(r\)-related entity representations at timestamp \(t\) and its representation at timestamp \(t-1\). The updating of the relation representation is formulated as \(_{}^{t}=[_{_{}^{t}}^{t}; _{}^{t-1}]\), where \([;]\) denotes the concatenation operation. \(\) denotes the mean pooling operation. \(_{_{}^{t}}^{t}\) denotes \(r\)-related entity representations at timestamp \(t\), where \(_{}^{t}=\{i|(i,r,o,t)\:or\:(s,r,i,t)^{t}\}\).

A country entity may be affiliated with different international political organizations at different timestamps within TKGs. Thus, the fuzzy c-means clustering method  is utilized to obtain the soft overlapping clusters, which outputs the membership matrix between entities and clusters by optimizing the object function as follows:

\[J=_{i=1}^{N_{}}_{j=1}^{N_{}}u_{i,j}^{t,m}(1- _{i}^{t},_{j}^{t}}{\|_{i}^{t}\|\|_{j}^{t}\|}),s.t._{j=1}^{N_{}}u_{i,j}^{t,m}=1,0<_{i= 1}^{N_{}}u_{i,j}^{t,m}<N_{}\] (2)

where \(N_{}\) and \(N_{}\) are the number of entities and clusters, respectively. \(u_{i,j}^{t}\) denotes the membership degree of the entity representation \(_{i}^{t}\) to the cluster centroid \(_{j}^{t}\) at timestamp \(t\). \(m\) denotes the fuzzy

Figure 1: The framework of DECRL.

smoothing hyper-parameter, which is typically set to a value greater than \(1\). \(\) denotes the dot product. \(\|\|\) denotes the norm of a vector. Then, the representation of clusters is formulated as:

\[_{j}^{t}=_{_{i}^{t} V_{}^{t}}u_{i,j}^{t}_{i}^{t},  u_{i,j}^{t}=_{j}^{t},_{i}^{t} \|_{j}^{t}}{\|_{i}^{t}\|\|_{j}^{t}\|})^{ {1}{m-1}}}{_{k=1}^{N}(_{j}^{t},_{i}^{ t}\|_{k}^{t}\|}{\|_{k}^{t}\|})^{}}\] (3)

where \(_{j}^{t}\) denotes the representation of cluster \(j\) at timestamp \(t\), weighted by the membership degree of different entities to the cluster.

The maximum weight matching can be found in polynomial time using the Hungarian algorithm . Herein, a cluster-aware Hungarian matching algorithm is introduced to ensure a smooth one-to-one alignment of clusters across timestamps. The cluster-aware Hungarian matching algorithm quantifies the similarity between clusters of consecutive timestamps, i.e., \(t-1\) and \(t\), which creates an affinity matrix \(A\), where each element \(a_{j,k}\) represents the similarity between the cluster \(j\) at timestamp \(t-1\) and the cluster \(k\) at timestamp \(t\):

\[a_{j,k}=(_{j}^{t-1},_{k}^{t})\] (4)

With the affinity matrix established, the cluster-aware Hungarian algorithm seeks an optimal assignment that maximizes the sum of similarities across matched clusters. It is formulated as an optimization problem: \(_{}_{j=1}^{N_{}}a_{j,(j)}\), where \(\) is the permutation function representing the one-to-one alignment between clusters of consecutive timestamps. Therefore, \((j)\) denotes the index of the cluster at timestamp \(t\) matched with the cluster \(j\) at timestamp \(t-1\).

Subsequently, the fused cluster representations are computed by taking a weighted combination of the cluster representations at consecutive timestamps, which is formulated as:

\[_{j}^{t}=_{j}^{t-1}+(1-)_{(j)}^{t}\] (5)

where \(\) is the fusion weight, which indicates the relative contribution of each cluster representation at consecutive timestamps to the fused cluster representation.

What's more, it is essential to ensure the temporal smoothness of these cluster representations across consecutive timestamps. To this end, a temporal smoothness loss is introduced to penalize significant deviations of cluster representations across consecutive timestamps, which is formulated as:

\[_{}=_{t=1}^{T-1}_{j=1}^{N_{}}(1 -_{j}^{t-1},_{j}^{t}}{\|_{j}^{t-1}\|\| _{j}^{t}\|})\] (6)

### Cluster graph message passing module

Due to the intricate relationships and alliances formed among international political organizations, it is crucial to capture the latent correlations between clusters for event prediction. Herein, an implicit correlation encoder is proposed to capture the latent correlations between any pair of clusters. The cluster graph is designed to be a fully connected graph to avoid missing any relevant information between clusters. The representations of the latent correlations are formulated as:

\[_{i,j}^{t}=((_{i}^{t},_{j}^{t}))\] (7)

where \(_{i}^{t}\) and \(_{j}^{t}\) are representations of the cluster \(i\) and \(j\) at timestamp \(t\), respectively. \(\) is the transformation function, which is implemented by the multi-layer perceptron.

It is worth noting that clusters exhibit varying degrees of interaction, characterized by different intensities of latent correlations. Thus, we quantify the intensity of latent correlations between clusters, which is formulated as:

\[q_{i,j}^{t}=((_{i,j}^{t}))\] (8)

where \(\) is the sigmoid function, which ensures the resulting correlation intensity bounded between \(0\) and \(1\). \(()\) represents the convolution operation.

The intensity of the latent correlations between clusters varies in the short term and intensifies over time; a higher frequency of interactions indicates a stronger latent correlation. To this end, we construct a global graph, which is a static graph composed of all events from the training set. The spectral clustering approach is then applied to this global graph to obtain global clusters \(_{i}^{}\). The similarity between global clusters is used to enhance the intensity of latent correlations between cluster pairs, which is formulated as:

\[_{i,j}^{t}=q_{i,j}^{t} m_{i,j}^{t}, m_{i,j}^{t}=_{^{t}(i)}^{},_{^{t}(j)}^{} }{\|_{^{t}(i)}^{}\|\|_{^{t}(j)}^{}\|}\] (9)

where \(_{^{t}(i)}^{}\) and \(_{^{t}(j)}^{}\) are global clusters matched with the cluster \(i\) and \(j\) at timestamp \(t\), respectively. \(m_{i,j}^{t}\) is the similarity between the global cluster \(i\) and \(j\) at timestamp \(t\). \(_{i,j}^{t}\) is the enhanced intensity of latent correlations, which also integrates structural information from the global graph.

In the message passing process of the cluster graph, the stronger the intensity of the latent correlation, the more critical the latent correlation is, and vice versa. The aggregation operation is formulated as:

\[_{c_{i}}^{t}=_{i j}_{i,j}^{t}_{i,j}^{t}\] (10)

where \(_{i,j}^{t}\) and \(_{i,j}^{t}\) denote the enhanced intensity and the representation of latent correlation calculated by Equation 9 and Equation 7, respectively. Then, the representation of clusters is updated through:

\[}_{i}^{t}=(_{c_{i}}^{t},_{i}^{t})\] (11)

To implement information transfer from clusters to individual entities, we use the membership matrix from Section 4.2. Entity representations are updated based on their associated cluster representations, which are formulated as \(_{i}^{ t}=_{j=1}^{N_{}}_{i,j}^{t}}_{j}^{t}\), where \(N_{}\) denotes the number of clusters.

### Time residual gate

The time residual gate is introduced to combine updated entity and relation representations with input representations of the current timestamp through a weighted mechanism. This approach preserves inherent characteristics while capturing the temporal evolution of entities and relations. For simplicity, the subscripts \(i\) and \(j\) of variables are omitted in the following sections without causing ambiguity. The final updated representations at timestamp \(t\) are formulated as:

\[^{t}=^{t}_{}^{t}+(1-^{t})^ {t-1},^{t}=(_{3}^{t-1}+)\] (12)

where \(_{}^{t}\) denotes the entity or relation representations updated by the cluster graph message passing module at timestamp \(t\). \(^{t-1}\) denotes the output of entity or relation representations at timestamp \(t-1\), and also is the input of timestamp \(t\). The time residual gate, i.e., \(^{t}\), determines the inherent characteristics to be preserved, where \(\) is the sigmoid function. \(_{3}\) and \(\) are learnable parameters.

### Attentive temporal encoder

In the context of sequence modeling, the attentive temporal encoder is introduced to capture the temporal dependency among the final updated representations across timestamps. The position-enhanced representations of entity and relation are formulated as:

\[^{t}=[^{t};(t)],(t)=}[(_{ 1}^{t}),(_{2}^{t}),...,(_{d}^{t})]\] (13)

where \(^{t}\) is the final updated representation of entity or relation at timestamp \(t\). \([;]\) denotes the concatenation operation. \((t)\) is the time position encoder. \(d\) denotes the value of the representation dimension. \(_{1}\) to \(_{d}\) are learnable parameters. \(^{t}\) is the timestamp. Then, the temporal dependency is captured by a position-enhanced self-attention mechanism based on representation sequence \(^{1:T-1}=\{^{1},^{2},...,^{T-1}\}\). For simplicity, the subscript \(t\) of variables is omitted in the following sections. The integrated entity or relation representation is formulated as:

\[_{m,n}=_{q}_{m},_{k}_{n}}{ },_{m,n}=)}{_{i=1}^{T-1} (_{m,i})},}_{m}=_{n=1}^{T-1}_ {m,n}_{m,n}\] (14)

where \(_{q}\) and \(_{k}\) are learnable parameters. \(_{m,n}\) is the attention weight. \(}_{m}\) is the integrated representation of entity or relation, which integrates the temporal information.

### Event prediction

ConvTransE  is employed as the decoder of DECRL, which predicts the probability of each relation between an entity pair, which is formulated as:

\[p(}|s,o,^{1:T-1})=(_{}( }_{},}_{}))\] (15)

where \(}\) is the probability vector of relations. \(\) is the sigmoid function. \(_{}\) is the relation representation matrix, each row of which corresponds to an integrated relation representation \(}\). \(()\) contains a one-dimensional convolution layer and a fully connected layer.

The event prediction training objective is minimizing the cross-entropy loss, which is formulated as:

\[_{}=-_{i=1}^{S}_{j=1}^{N_{}} \{y_{i,j} p_{i,j}+(1-y_{i,j})(1-p_{i,j})\}\] (16)

where \(S\) and \(N_{}\) denote the numbers of samples in the training set and relations, respectively. \(y_{i,j}\) denotes the label of relation \(j\) for sample \(i\), of which the element is \(1\) if the event occurs, otherwise \(0\). \(p_{i,j}\) is the predicted probability of relation \(j\) for sample \(i\), calculated by Equation 15.

Finally, the total loss for DECRL is formulated as:

\[=(1-)_{}+_{}\] (17)

where \(\) is a hyper-parameter that controls the trade-off between event prediction and temporal smoothness, which is bounded between \(0\) and \(1\).

## 5 Experiments

In this section, we evaluate the performance of DECRL through comprehensive experiments. We first describe the datasets and experimental settings, followed by a comparison with 12 SOTA TKG representation learning approaches. Next, we present an ablation study and hyper-parameter sensitivity analysis (see Appendix A.5). Finally, we offer case studies showcasing the effectiveness of DECRL.

### Datasets and experimental settings

We evaluate DECRL on seven real-world datasets: ICEWS14 , ICEWS18 , ICEWS14C , ICEWS18C , GDELT , WIKI , and YAGO . The ICEWS14 and ICEWS18 datasets span January 1, 2014, to December 31, 2014, and January 1, 2018, to October 31, 2018, respectively. We derive ICEWS14C and ICEWS18C datasets by filtering the original datasets to focus exclusively on events involving countries. The GDELT dataset spans January 1, 2018, to January 31, 2018. The WIKI and YAGO datasets are subsets of the Wikipedia history and YAGO3 , respectively. Dataset statistics and experimental settings are detailed in Appendices A.2 and A.3.

### Comparison with baselines

DECRL is compared against 12 SOTA TKG representation learning approaches, categorized into shallow encoder-based approaches, i.e., TTransE  and HyTE , DNN-based approaches, i.e., RE-NET , Glean , TeMP , RE-GCN , DACHA , and TiRGN , and derived structure-based approaches, i.e., TTfer , EvoExplore , GTRL , and DIhyper . All baselines are evaluated following consistent experimental settings with well-tuned hyper-parameters. The detailed descriptions of compared baselines can be found in Appendix A.4.

Tables 1, 2, and 3 display the MRR and Hits@1/3/10 results of event prediction on ICEWS14, ICEWS18, ICEWS14C, ICEWS18C, and GDELT datasets. "*" denotes the statistical superiority of DECRL over compared approaches based on pairwise t-tests at a 95% confidence level. The best results are highlighted in bold, while the second-best results are underlined. Notably, DECRL consistently exhibits superior performance, yielding average improvements of 13.24%, 12.98%, 10.42%, and 14.68% in MRR and Hits@1/3/10 metrics, respectively. These findings affirm the efficacy of integrating deep evolutionary clustering for capturing the temporal evolution of high-order correlations among entities. Furthermore, it is evident that approaches leveraging derived structures

    &  &  \\  Approach & MRR & Hits@1 & Hits@3 & Hits@10 & MRR & Hits@1 & Hits@3 & Hits@10 \\  TTransE (WWW 2018) & 23.79* & 14.24* & 29.17* & 34.56* & 11.79* & 13.24* & 19.97* & 24.88* \\ HyTE (EMNLP 2018) & 25.12* & 18.15* & 30.15* & 45.37* & 22.17* & 18.15* & 27.28* & 35.37* \\  RE-NET (EMNLP 2020) & 45.77* & 37.98* & 49.07* & 58.87* & 43.27* & 36.97* & 47.08* & 55.19* \\ Glean (KDD 2020) & 42.20* & 36.86* & 47.68* & 52.39* & 40.24* & 34.62* & 45.48* & 50.09* \\ TeMP (EMNLP 2020) & 46.04* & 39.07* & 49.84* & 59.74* & 44.17* & 37.37* & 47.78* & 55.66* \\ RE-GCN (SIGIR 2021) & 45.65* & 38.09* & 50.37* & 62.44* & 41.76* & 36.67* & 45.37* & 51.74* \\ DACHA (TKDD 2022) & 45.44* & 37.88* & 49.47* & 58.69* & 44.26* & 37.59* & 44.18* & 53.19* \\ TiRGN (IJCAI 2022) & 46.07* & 39.83* & 52.17* & 63.95* & 44.73* & 38.13* & 49.77* & 60.91* \\  TTfer (EMNLP 2021) & 46.12* & 39.08* & 50.76* & 60.39* & 44.86* & 39.37* & 48.84* & 55.79* \\ EvoExplore (KBS 2022) & 47.71* & 40.68* & 52.37* & 65.94* & 49.77* & 40.12* & 54.37* & 65.83* \\ GTRL (TKDE 2023) & 46.25* & 40.11* & 51.09* & 65.79* & 50.95* & 40.31* & 52.09* & 64.89* \\ DIhyper (TOIS 2024) & 56.15* & 43.76* & 65.46* & 85.89* & 54.16* & 41.45* & 62.03* & 75.35* \\
**DECRL** & **62.61** & **48.73** & **70.57** & **93.03** & **58.55** & **44.62** & **66.52** & **82.06** \\ 
**Improvement** & **11.50\%** & **11.36\%** & **7.81\%** & **8.31\%** & **8.11\%** & **7.65\%** & **7.24\%** & **8.91\%** \\   

Table 1: The performance of DECRL and the compared approaches on ICEWS14 and ICEWS14C

   Approach & MRR & Hits@1 & Hits@3 & Hits@10 \\  TTransE (WWW 2018) & 8.62* & 7.73* & 11.03* & 23.34* \\ HyTE (EMNLP 2018) & 10.63* & 8.39* & 14.23* & 28.79* \\  RE-NET (EMNLP 2020) & 17.55* & 11.73* & 18.14* & 35.52* \\ Glean (KDD 2020) & 15.60* & 10.35* & 17.61* & 37.40* \\ TEMP (EMNLP 2020) & 19.19* & 11.07* & 19.84* & 40.52* \\ RE-GCN (SIGIR 2021) & 20.84* & 10.80* & 21.09* & 43.65* \\ DACHA (TKDD 2022) & 21.91* & 11.27* & 17.49* & 47.13* \\ TiRGN (IJCAI 2022) & 24.61* & 13.78* & 25.66* & 49.02* \\  TTfer (EMNLP 2021) & TLE & TLE & TLE & TLE \\ EvoExplore (KBS 2022) & 18.53* & 10.74* & 19.45* & 42.07* \\ GTRL (TKDE 2023) & 22.44* & 12.48* & 18.03* & 50.82* \\ DIhyper (TOIS 2024) & OOM & OOM & OOM & OOM \\
**DECRL** & **27.58** & **15.74** & **29.16** & **59.54** \\ 
**Improvement** & **12.07\%** & **14.22\%** & **13.64\%** & **17.16\%** \\   

Table 4: The performance of DECRL and the compared approaches on WIKI and YAGO with MRR

   Approach & MRR & Hits@1 & Hits@3 & Hits@10 \\  TTransE (WWW 2018) & 8.62* & 7.73* & 11.03* & 23.34* \\ HyTE (EMNLP 2018) & 10.63* & 8.39* & 14.23* & 28.79* \\  RE-NET (EMNLP 2020) & 17.55* & 11.73* & 18.14* & 35.52* \\ Glean (KDD 2020) & 15.60* & 10.35* & 17.61* & 37.40* \\ TEMP (EMNLP 2020) & 19.19* & 11.07* & 19.84* & 40.52* \\ RE-GCN (SIGIR 2021) & 20.84* & 10.80* & 21.09* & 43.65* \\ DACHA (TKDD 2022) & 21.91* & 11.27* & 17.49* & 47.13* \\ TiRGN (IJCAI 2022) & 24.61* & 13.78* & 25.66* & 49.02* \\  TTfer (EMNLP 2021) & TLE & TLE & TLE \\ EvoExplore (KBS 2022) & 18.53* & 10.74* & 19.45* & 42.07* \\ GTRL (TKDE 2023) & 22.44* & 12.48* & 18.03* & 50.82* \\ DIhyper (TOIS 2024) & OOM & OOM & OOM & OOM \\
**DECRL** & **27.58** & **15.74** & **29.16** & **59.54** \\ 
**Improvement** & **12.07\%** & **14.22\%** & **13.64\%** & **17.16\%** \\   

Table 3: The performance of DECRL and the compared approaches on GDELT. “OOM” and “TLE” indicate out of memory and a single epoch exceeded 24 hoursgenerally outshine those relying on DNNs, which in turn surpass approaches employing shallow encoders.

Since most approaches do not report event prediction results on WIKI and YAGO datasets, we compare DECRL with TiRGN and DHyper, both of which provide results on these datasets, as shown in Table 4. Furthermore, TiRGN and DHyper are the SOTA DNN-based approach and the SOTA derived structure-based approach, respectively. As a result, DECRL shows improvements of 0.29% and 0.25% over the runner-up, DHyper, on WIKI and YAGO datasets, respectively, underscoring its effectiveness. Detailed entity prediction results are presented in Appendix A.6 due to space limitation.

### Ablation study

To dissect the contributions of each module within DECRL, we conduct the ablation study on ICEWS14. The detailed descriptions of variants are as follows:

* **DECRL-w/o-alignment**: Removing unsupervised alignment mechanism.
* **DECRL-w/o-fusion**: Removing fusion operation between clusters across timestamps.
* **DECRL-w/o-ICE**: Removing implicit correlation encoder, resulting in a fully connected graph where all edges are assigned uniform weights.
* **DECRL-w/o-global-graph**: Removing the guidance of the global graph on the assignment of different interaction intensities to different cluster pairs.
* **DECRL-w/o-\(_{}\)**: Removing the temporal smoothness loss term.

Table 5 displays the MRR and Hits@1/3/10 results of DECRL and the variants on ICEWS14. From the ablation study, several conclusions can be drawn: Firstly, the most substantial performance degradation is observed in the DECRL-w/o-fusion variant, which indicates the effectiveness of capturing the temporal evolution of high-order correlations among entities. Moreover, the performance degradation of the DECRL-w/o-global-graph variant justifies the effectiveness of leveraging structural information from the global graph for guiding the assignment of different interaction intensities to different cluster pairs. Lastly, the performance degradation of DECRL-w/o-alignment and DECRL-w/o-\(_{}\) variants shows the importance of preserving the temporal smoothness of clusters over successive timestamps.

### Case study

To demonstrate the efficacy of DECRL, we conducted a case study with two variants: DECRL-w/o-alignment and DECRL-w/o-fusion, both of which are elaborated in Sub-section 5.3. In Figure 2, we utilize t-SNE  for the visualization of entity representations on ICEWS14C, where red dots represent individual entities in the TKGs, with their groupings indicating entity clusters. Notably, the entities marked in Figure 2, i.e., China, Thailand, Vietnam, Laos, Malaysia, Philippines, and Cambodia, are countries in East Asia participating in the Belt and Road Initiative. "Middle" and "Final" denote the entity representations obtained after training at the penultimate epoch and the final epoch, respectively, for different variants.

By comparing the visualizations in the first row of sub-figures in Figure 2, we observe that DECRL exhibits the best entity clustering phenomena during the mid-training phase. By comparing the visualizations in the second row of sub-figures in Figure 2, Figure 2d (Final DECRL) showcases pronounced clustering phenomena, and inter-cluster distances indicate significant differences in

   Method & MRR & Hits@1 & Hits@3 & Hits@10 \\  DECRL-w/o-alignment & 59.16 (-3.5) & 43.92 (-4.8) & 67.57 (-3.0) & 92.31 (-0.7) \\ DECRL-w/o-fusion & 57.98 (-4.3) & 41.90 (-6.8) & 66.97 (-3.6) & 92.00 (-1.0) \\ DECRL-w/o-ICE & 60.53 (-2.8) & 46.33 (-2.4) & 68.29 (-2.3) & 91.14 (-1.9) \\ DECRL-w/o-global-graph & 58.67 (-3.9) & 43.45 (-5.3) & 69.46 (-1.1) & 91.07 (-2.0) \\ DECRL-w/o-\(_{}\) & 58.74 (-3.9) & 44.43 (-4.3) & 65.33 (-5.2) & 89.85 (-3.2) \\ 
**DECRL** & **62.61** & **48.73** & **70.57** & **93.03** \\   

Table 5: The performance of DECRL and the variants on ICEWS14clusters, i.e., international political organizations. Figure 1(e) (Final DECRL-w/o-alignment) demonstrates moderate clustering phenomena among countries, but inter-cluster distances are not significant enough. This observation implies that the lack of precise one-to-one alignment may lead to proximity between different clusters. Figure 1(f) (Final DECRL-w/o-fusion, which only models high-order correlations without temporal evolution) exhibits increased inter-cluster distances, with less distinct clustering phenomena. The comparison between Figure 1(d) (Final DECRL) and Figure 1(f) (Final DECRL-w/o-fusion) shows that capturing temporal evolution leads to better entity representations, as indicated by larger inter-cluster distances and tighter intra-cluster groupings. Comparing the first and third rows of Figure 2 further highlights the training progression, where modeling temporal evolution gradually enhances cluster separation and tightens the grouping of entities within clusters. This demonstrates that the capability of DECRL to model the temporal evolution of high-order correlations significantly enhances its ability to capture more nuanced cluster representations. Additional case study details are provided in Appendix A.7.

## 6 Conclusions and limitations

In this paper, a **D**eep **E**volutionary **C**lustering jointed temporal knowledge graph **R**epresentation **L**earning approach (**DECRL**) is proposed for event prediction in TKGs, which jointly optimizes TKG representation learning with evolutionary clustering to capture the temporal evolution of high-order correlations. Comprehensive experiments are conducted on seven real-world datasets, including the comparison with baselines, ablation study, hyper-parameter sensitivity analysis, and case studies, which demonstrate the superior performance of DECRL. However, this study overlooks the continuous temporal evolution of diverse high-order correlations. Currently, the implicit correlation encoder assumes uniform correlations across all clusters, which may not reflect the complexity of real-world interactions between political organizations. In future work, we will address this issue by developing a multi relation-aware inter-cluster correlation encoder. Furthermore, DECRL currently models the temporal evolution of high-order correlations by considering only the previous and current timestamps. Future work will focus on explicitly modeling the continuous influence of high-order correlations from different past timestamps on the current timestamp.

Figure 2: The visualization of entity representations on ICEWS14C.