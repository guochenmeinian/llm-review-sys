# Scaling Continuous Latent Variable Models as Probabilistic Integral Circuits

Gennaro Gala\({}^{1,}\)

Corresponding author: g.gala@tue.nl

Cassio de Campos\({}^{1}\)

Antonio Vergari\({}^{2,}\)

Shared supervision

Erik Quaeghebeur\({}^{1,}\)

\({}^{1}\)Eindhoven University of Technology, NL

\({}^{2}\)School of Informatics, University of Edinburgh, UK

###### Abstract

Probabilistic integral circuits (PICs) have been recently introduced as probabilistic models enjoying the key ingredient behind expressive generative models: continuous latent variables (LVs). PICs are symbolic computational graphs defining continuous LV models as hierarchies of functions that are summed and multiplied together, or integrated over some LVs. They are tractable if LVs can be analytically integrated out, otherwise they can be approximated by tractable probabilistic circuits (PC) encoding a hierarchical numerical quadrature process, called QPCs. So far, only tree-shaped PICs have been explored, and training them via numerical quadrature requires memory-intensive processing at scale. In this paper, we address these issues, and present: (i) a pipeline for building DAG-shaped PICs out of arbitrary variable decompositions, (ii) a procedure for training PICs using tensorized circuit architectures, and (iii) neural functional sharing techniques to allow scalable training. In extensive experiments, we showcase the effectiveness of functional sharing and the superiority of QPCs over traditional PCs.

## 1 Introduction

_Continuous_ latent variables (LVs) are arguably the key ingredient behind many successful generative models, from variational autoencoders  to generative adversarial networks , and more recently diffusion models . While these models allow to learn expressive distributions from data, they are limited to _sampling_ and require task-specific approximations when it comes to perform _probabilistic reasoning_, as even simple tasks such as computing marginals or conditionals are intractable for them. On the other hand, performing these tasks can be tractable for (hierarchical) _discrete_ LV models , but these prove to be more challenging to learn at scale .

This inherent trade-off among tractability, ease of learning, and expressiveness can be analyzed and explored with _probabilistic integral circuits_ (PICs) , a recently introduced class of deep generative models defining hierarchies of continuous LVs using _symbolic_ functional circuits. PICs are tractable when their continuous LVs can be analytically integrated out. Intractable PICs can however be systematically approximated as (tensorized) _probabilistic circuits_ (PCs) , the representation language of discrete LV models. An instance of such PCs encodes a hierarchical numerical quadrature process of the PIC to approximate, and as such is called _quadrature PC_ (QPC).

Distilling QPCs from PICs has proven to be an effective alternative way to train PCs, but it has only been explored for tree-shaped PICs, as building and scaling to richer LV structures is an open research question that requires new tools . In this paper, we fill this gap by redefining the semantics of PICs and extending them to DAG-shaped hierarchies of continuous LVs. Specifically, wedesign PICs as a language to represent hierarchical quasi-tensors factorizations , parameterized by light-weight multi-layer perceptrons.

**Contributions.****(1)** We present a systematic pipeline to build DAG-shaped PICs, starting from arbitrary variable decompositions (Section 3.1). **(2)** We show how to learn and approximate PICs via a hierarchical quadrature process which we encode in tensorized QPCs that match certain circuit architectures proposed in different prior works [43; 42; 31; 36] (Section 3.2). **(3)** We present functional sharing techniques to scale the training of PICs, which lead us to parameterize them with multi-headed multi-layer perceptrons (MLPs) requiring comparable resources as PCs (Section 3.3). **(4)** In extensive experiments (Section 4), we show that (i) functional sharing proves remarkably effective for scaling and that (ii) QPCs outperform PCs commonly trained via EM or SGD, while being distilled from PICs with up to 99% less _trainable parameters_.

## 2 Probabilistic integral circuits

**Notation.** We denote input variables as \(\) and latent variables (LVs) as \(\) and \(\), with \(,\) and \(\) as their realization respectively. We denote scalars with lower-case letters (e.g., \(w\)), vectors with boldface lower-case letters (e.g., \(^{N}\)), matrices with boldface upper-case letters (excluding \(,,\), e.g., \(^{M N}\)), and tensors with boldface calligraphic letters (e.g., \(}^{L M N}\)).

A _probabilistic integral circuit_ (PIC) \(c\) is a symbolic computational graph representing a non-negative function \(c()= c(,)\,\), i.e. \(c() 0\), over observed variables \(\) and _continuous_ latent variables \(\). Similar to probabilistic circuits (PCs) [53; 4], PICs have _input_, _sum_ and _product_ units.2 Different from PCs, however, PICs operate on functions, not scalars, and make use of a new type of unit: the _integral_ unit \(}\), which allows to represent continuous LVs. To satisfy non-negativity, we parameterize PICs with non-negative functions and positive sum weights, specifically:

* An input unit \(u\) (depicted as \(}\) in our figures) represents a possibly non-normalized distribution \(f_{u}(_{u},_{u})^{+}\), where \(_{u}\) and \(_{u}\);
* A sum unit \(u\) (}\) outputs a weighted sum of the functions it receives from its input units, i.e. \(g_{u}(_{u},_{u})\!=\!_{i(u)}w_{i}g_{i }(_{i},_{i})\), where \((u)\) is the set of units \(u\) takes as input, \(w_{i}\!>\!0\), \(_{u}\!=_{i(u)}_{i}\) and \(_{u}\!=_{i(u)}_{i}\). Similarly, a product unit \(u\) (}\)) outputs the product of its incoming functions, i.e. \(g_{u}(_{u},_{u})\!=\!_{i(u)}g_{i}( _{i},_{i})\);
* Finally, an integral unit \(u\) (}\)) encodes an "uncountable weighted sum" whose weights are compactly represented by a function \(f_{u}(_{u},_{u})\!\!^{+}\), where \(_{u}\! \!$}}\) are the LVs that are being integrated out by \(u\), while \(_{u}\) can potentially be empty, i.e. \(_{u}\!=\!\). The unit receives a function \(g_{i}(_{i},_{u})\) from its only input unit \(i\) and outputs the function \(g_{u}(_{i},_{u})\!=\!_{}f_{u}(_{u}, _{u})\,g_{i}(_{i},_{u})\,_{u}\), where \(\!=\!(_{u})\) is the support of \(_{u}\). For instance, an integral unit \(u\) with \(f_{u}(\{Z\},\{Y\})\!=\!2Z-Y^{2}\) and \((Y)=[-1,1]\) receiving function \(g_{i}(\{X\},\{Y\})\!=\!X^{2}-3X+4Y\) would output \(g_{u}(\{Z\},\{X\})=}{{3}}X(X-3)(6Z-1)\).

Fig. 1(b) and Fig. 2(b) show example PICs. Note that we use \(f\) to indicate the functions attached to input and integral units which are essentially parameters of the model, while we use \(g\) to indicate functions being outputted by all type of units. The output of a PIC \(c\) is the output function returned by its root unit \(u\), which is only defined on \(\), i.e. \(c()\) = \(g_{u}()\) and \(_{u}\!=\!\). Similar to PCs, imposing structural constraints over PICs can unlock tractable inference . As such, we assume that (i) all \(}\)-units receive functions defined on the same input variables (aka _smoothness_), and (ii) all \(}\)-units receive functions defined over disjoint sets of input variables (aka _decomposability_).

PICs are tractable when their LVs can be analytically integrated out, meaning that we can _pass-through_ integral units computing the integration problem they define, eventually outputting a function. Notably, this is possible when LVs are in linear-Gaussian relationships  or when functions are polynomials. Intractable PICs can however be approximated via a hierarchical numerical quadrature process that can be encoded as a PC called _quadrature PC_ (QPC). Intuitively, each PIC integral unit can be approximated by a set of sum units in a QPC, each conditioning on some previously computed quadrature values, with a large but finite number of input units . Materializing a QPC allows to train PICs by approximate maximum likelihood: Given a PIC, gradients to its parametersattached to input, sum and integral units can be backpropagated through the corresponding QPC . This also provides an alternative way to train PCs that can rival traditional learners.

So far, the construction of PICs has been limited to a simple _compilation_ process from probabilistic graphical models (PGMs)  with continuous LVs . In a nutshell, the LV nodes of a PGM become integral units of a PIC model, and the PGM (conditional) distributions become the functions \(f_{u}\) attached to input and integral units of the PIC, as we illustrate in Fig. 1. However, the PGM structure _needs to be limited to a tree_, as to avoid that the hierarchical quadrature process would yield an exponentially large QPC, thus hindering learning. This imposes a semantics for current PICs as simple latent tree models , and clearly limits their expressiveness as more complex LV interactions are not possible. Building more expressive PICs requires reinterpreting this semantics and introducing new tools, which we do next.

## 3 Building, learning and scaling PICs

In Section 3.1, we systematize the construction of DAG-shaped PICs, showing how to build them starting from arbitrary variable decompositions, going beyond the current state-of-the-art . Then, in Section 3.2, we show how to learn and approximate such PICs with QPCs encoding a hierarchical quadrature process, retrieving PC architectures proposed in prior works . Finally, in Section 3.3, we present (neural) functional sharing, a technique which we use to parameterize PICs as to make their QPC materialization fast and cheap, allowing scaling to larger models and larger datasets.

### Building PICs from arbitrary variable decompositions

Standard PCs can be built according to established pipelines that allow to flexibly represent arbitrary variable decompositions, as well as rich discrete LV interactions [36; 41]. In the following, we derive an analogous pipeline for PICs that allows to take care of continuous LVs, going beyond their current tree-shaped semantics (Section 2) yet allowing to perform hierarchical quadrature without blowing up the size of the materialized QPCs. To do so, we start by formalizing the notion of hierarchical variable decomposition, or region graph, out of which we will build our PIC structures.

**Definition 1** (Region Graph (RG) ).: _An RG \(\) over input variables \(\) is a bipartite and rooted directed acyclic graph (DAG) whose nodes are either regions, denoting subsets of \(\), or partitions, specifying how a region is partitioned into other regions (Fig. 2(a))._

RGs can be (i) compiled from PGMs [5; 27; 3; 31], (ii) randomly initialized [43; 16], (iii) learned from data [15; 19; 40; 57], or (iv) built according to the data modality (e.g. images) [45; 42; 36]. If we compile from a tree PGM, as in (Fig. 1), the resulting RG will be a tree, thus yielding a tree-like PIC . Our pipeline, detailed in Algorithm 1, takes an arbitrary DAG-shaped RG as input, and can deliver DAG-like PICs. Without loss of generality, we assume to have an RG \(\) which only allows for (i) binary partitionings of regions (i.e. all product units will have two input units) and (ii) univariate leaves, as shown in Fig. 2(a). Our construction iteratively builds a PIC in a bottom-up fashion, associating regions to PIC units. For every leaf region \(X_{u}\!\!\) in \(\), we instantiate an input unit \(u\) with function \(f_{u}(\{X_{u}\},\{Z_{u}\})\), where \(Z_{u}\!\!\) is an arbitrary continuous LV (Line \(8\), Algorithm 1). Such functions can be univariate conditional densities, i.e. \(p_{u}(X_{u}|Z_{u})\), resembling small VAE-like decoders  amenable to be numerically integrated.

Once all leaf regions have been processed, we move to the inner ones. Let \(\) be an inner region partitioned in \(N 1\) different ways as \(\{(_{1}^{(n)},_{2}^{(n)})\}_{n=1}^{N}\), i.e. \((_{1}^{(n)}_{2}^{(n)})=\) and \((_{1}^{(n)}_{2}^{(n)})=\) for every \(n\). For each partition \((_{1}^{(n)},_{2}^{(n)})\), we will merge the PIC units associated to regions \(_{1}^{(n)}\) and \(_{2}^{(n)}\) using consecutive applications of product and integral units--as we explain next--eventually associating a unit the partition itself. One can design such merging as desired, as long as smoothness and decomposability are not violated. Finally, in case \(N\!=\!1\), we associate to \(\) the unit associated to its only partition, otherwise, in case \(N\!>\!1\), we merge the \(N\) units associated to each \(n\)-th partition using a sum unit which we then associate to \(\) (Line \(6\), Algorithm 1).

Figure 1: PGM (a) \(\) tree PIC (b)

**Merging PIC units.** Let \(u_{1}\) and \(u_{2}\) be candidate units to merge, each outputting functions with LV \(Z_{u_{1}}\) and \(Z_{u_{2}}\) respectively. We present two ways of merging units: Tucker-merge and CP-merge, which we detail in Algorithm 2 and whose names will be clearer in the next section. If \(Z_{u_{1}}{}\,Z_{u_{2}}\), we use Tucker-merge: We merge \(u_{1}\) and \(u_{2}\) with a product, which is then input to an integral unit \(u\) with function \(f_{u}(\{Z_{u}\},\{Z_{u_{1}},Z_{u_{2}}\})\), where \(Z_{u}\{Z_{u_{1}},Z_{u_{2}}\}\). Otherwise, if \(Z_{u_{1}}{=}\,Z_{u_{2}}\), we use CP-merge: We add two integral units, \(u_{3}\) with input \(u_{1}\) and \(u_{4}\) with input \(u_{2}\), which we finally merge with a product. We parameterize unit \(u_{3}\) (resp. \(u_{4}\)) with \(f_{u_{3}}(\{Z_{u_{3}}\},\{Z_{u_{1}}\})\) (resp. \(f_{u_{4}}(\{Z_{u_{4}}\},\{Z_{u_{2}}\})\)), where \(Z_{u_{3}}{}\,Z_{u_{1}}\) (resp. \(Z_{u_{4}}{}\,Z_{u_{2}}\)). Note that whenever merging two units defined on \(\), we need to marginalize out the remaining LVs, without introducing new ones. We illustrate the application of Algorithm 1 in Fig. 2(a-b). Our pipeline generalizes the PICs used in prior work  (Fig. 1) as we can build them by just converting latent tree structures in tree RGs and using CP-merge as merging procedure. While we now do _not_ need a PGM to build a complex PIC structure, one could try to reverse-engineer our PICs to retrieve a PGM via _decompilation_, the result would be a very intricate hierarchy over continuous LVs .

### Learning PICs via tensorized QPCs

Given a DAG-shaped (intractable) PIC, we now show how to approximate it with a tensorized PC encoding a hierarchical quadrature process, namely a QPC. Intuitively, we interpret PICs as to encode a set of _quasi-tensors_, a generalization of tensors with potentially infinite entries in each dimension corresponding to a continuous LV, which we materialize into classical tensors via quadrature. We begin with a definition of tensorized circuits and a brief refresher on numerical quadrature.

**Definition 2** (Tensorized Circuit [36; 43]).: _A **tensorized circuit**\(c\) is a parameterized computational graph encoding a function \(c()\), and comprising of input \(\), product \(\) and sum \(\) layers. Each layer consists of many computational units defined over the same variables, and every non-input layer receives vectors as input from one or more layers. Each input layer \(\) is defined on variables \(}}\) and computes a collection of \(K_{}\) parametric functions \([f_{k}:\ (}}) ]_{k=1}^{K_{}}\), outputting a \(K_{}\)-dimensional vector. Each product layer \(\) computes either an Hadamard product (\(\)) or a Kronecker product (\(\)) of the vectors it receives from its inputs layers. Specifically, the Hadamard product is an element-wise product of vectors, and therefore applicable when these have same size, while the outer product of two vectors \(\!\!^{N}\) and \(\!\!^{M}\) is \(\!=\!\!\!=\!||_{i=1}^{N}u_{i} ^{NM}\), where \(||\) is the concatenation operator. Finally, a sum layer \(\) with \(S_{}\) sum units receives inputs from

Figure 2: **The pipeline presented in this paper: \(\). Starting from a (fragment of) a DAG-shaped region graph (a), we build a DAG-like PIC via Algorithm 1 using Tucker-merge (b). Then, we materialize a tensorized QPC encoding a hierarchical quadrature process via Algorithm 3, using \(K\!=\!2\) quadrature points, which we fold to allow faster inference (d).**\(N\) layers \(\{_{i}\}_{i=1}^{N}\) and computes the matrix-vector product \(||_{i=1}^{N}_{i}(_{_{i}})\), where \(^{S K}\), \(K{=}_{i=1}^{N}K_{_{i}}\), are the sum layer parameters. When \(N{=}1\), then it simply computes \(_{1}(_{_{1}})\)._

**Numerical quadrature.** A numerical quadrature rule is an approximation of the definite integral of a function as a weighted sum of function evaluations at specified points . Specifically, given some integrand \(f\!:\!\!\!\) and interval \(\!:\!=\![a,b]\), a quadrature rule consists of a set of \(K\) integration points \(}\!\!^{K}\) and weights \(}\!\!^{K}\) minimizing the integration error \(_{K}=|_{}f(z)\,z-_{k=1}^{K} _{k}f(_{k})|\), which goes to zero as \(K{}\). To approximate an integral of an \(N\)-dimensional function \(f\), we can phrase the multiple integral as repeated one-dimensional integrals by applying Fubini's theorem , aka tensor product rule, as follows.

\[_{^{K}}\!\!f()=_{}\!\!... _{}\!\!f(z_{1},...,z_{N})z_{1}... z_{N}\!\!_{i_{1}[K]}\!\!_{i_{1}}...\!\!_{i_{N} [K]}\!\!_{i_{N}}f(_{i_{1}},...,_{i_{N}}).\] (1)

**From PICs to QPCs.** Given a candidate PIC, we will explore it in post order traversal, and iteratively associate a circuit layer (Definition 2) to each PIC unit, a process that we call _materialization_. We detail such procedure in Algorithm 3, which essentially applies Eq. (1) hierarchically over the PIC units. Each unit encodes a function over potentially continuous and discrete variables, hence representing a quasi-tensor, which we approximate by evaluating it over the quadrature points only, thus materializing a classical tensor (Fig. 3 (a,b)). We facilitate quadrature by assuming that all PIC LVs have bounded domain \(\!:\!=\![-1,1]\). This way, we can always use the same quadrature rule \((},})\) for each required (multivariate) approximation, and also simplify treatment and exposition.

We begin materializing every PIC input unit \(u\) with function \(f_{u}(\{X_{u}\},\{Z_{u}\})\) w.r.t. integration points \(}\), effectively creating an input layer \(\!:\!(X_{u})\!\!^{K}\) as \([\,f_{u}(X_{u},Z_{u}{=}_{k})\,]_{k=1}^{K}\) (Line 4, Algorithm 3). The parameters of such layer can be materialized as a matrix of shape \(K P\), where \(P\) is the number of parameters \(f_{u}\) requires. For example, if \(f_{u}\) is a univariate conditional Gaussian \(p_{u}(X_{u}|Z_{u})\), we use a \(K\!\!2\) matrix for parameterizing the layer, where each row stores the mean and standard deviation at each integration point \(_{k}\).

Next, we address the most important part of this quadrature process, i.e. the materialization of PIC integral units as sum layers. Specifically, let \(u\) be an integral unit with \(N\)-dimensional function \(f_{u}(_{u},_{u})\), where \(|_{u}|\!=\!N_{Z},|_{u}|\!=\!N_{Y}\) and \(N\!=\!N_{Z}+N_{Y}\). We materialize \(f_{u}\) w.r.t. integration points \(}\), effectively creating an \(N\)-dimensional tensor \(}^{(u)}^{K K}\), such that

\[w_{i_{1},,i_{N}}^{(u)}=f_{u}(\{Z_{1}{=}_{i_{1}},,Z_{N_{Z}} {=}_{i_{N_{Z}}}\},\{Y_{1}{=}_{i_{1}+_{N_{Z}}},,Y_{N_{Y} }{=}_{i_{N}}\}).\] (2)

After materializing tensor \(}^{(u)}\), we flatten it w.r.t. variables \(_{u}\) and \(_{u}\), so as creating a matrix \(^{(u)}\) of size \(K^{N_{Z}} K^{N_{Y}}\), an operation aka _matricization_. As last step, we plug-in the quadrature

Figure 3: **From functions to sum-product layers via multivariate numerical quadrature** (Section 3.2). We illustrate how the 3-variate function \(f(\{Z\},\{Y_{1},Y_{2}\})\) (a) can be seen as an infinite (quasi) tensor that we first materialize w.r.t. integration points \(}\) as a finite tensor \(}\) of size \(K K K\) (b, Equation (2)), then flatten as a matrix accounting for integration weights \(}\) (c, Equation (3)), and finally use to parameterize a Tucker layer (d, Equation (Tucker-layer)).

weights \(}^{K}\) in \(^{(u)}\), arriving to matrix \(}^{(u)}\) of \(K^{N_{Z}} K^{N_{Y}}\), whose \(i\)-th row is

\[}^{(u)}_{i:}=(} })\,^{(u)}_{i:}=}^{  N_{Y}}\,^{(u)}_{i:},\] (3)

where \(}^{ N_{Y}}\) is the vector of size \(K^{N_{Y}}\) resulting from the \(N_{Y}\)-times application of the Kronecker product \(\) over \(}\) (Line 6, Algorithm 3). We illustrate this process in Fig. 3(a-c). Similarly, we also materialize every PIC sum unit \(u\) with weights \(\{w_{i}\}_{i=1}^{N}\) as a sum layer, but parameterized by

\[^{(u)}=||_{i=1}^{N}w_{i}\,_{K}^{K NK},\] (4)

where \(_{K}\) is the \(K K\) identity matrix and \(||\) the concatenation operator (Line 8, Algorithm 3). Note that such sum layer can be seen as a _mixing layer_. Finally, consider a PIC product unit \(u\) with inputs \(u_{1}\) and \(u_{2}\), each outputting functions with LVs \(Z_{u_{1}}\) and \(Z_{u_{2}}\) respectively. We associate to \(u\) an Hadamard product layer if \(Z_{u_{1}}=Z_{u_{2}}\), or a Kronecker product layer if \(Z_{u_{1}} Z_{u_{2}}\), reflecting the fact that we are marginalizing out two different LVs. We summarize our PIC materialization--illustrated in Fig. 2--in Algorithm 3, where we iteratively associate a PIC unit to a circuit layer, eventually delivering a tensorized QPC. We stress that being QPCs just standard PCs they enjoy their same properties (e.g. tractable marginalization). We will learn PICs via maximizing the likelihood of its QPC materialization.

**QPCs as existing tensorized architectures.** Materializing PICs built via Algorithm 1 delivers tensorized PCs with alternating sum and product layers, aka _sum-product layers_. An instance of such layers is the Tucker layer, used in architectures like RAT-SPNs  and EiNets . Specifically, a binary Tucker layer \(\) computes

\[(_{})=(_{1}(_{_{1}})_{2}( _{_{2}})),\] (Tucker-layer)

where \(^{K K^{2}}\) and \(_{1},_{2}\) are input layers of \(\), each outputting a \(K\)-dimensional vector. In contrast, the recent HCLT architectures  use the canonical polyadic (CP) layer \(\), i.e.

\[(_{})=(^{(1)} _{1}(_{_{1}}))( ^{(2)}_{2}(_{_{2}}) ),\] (CP-layer)

where \(^{(1)},^{(2)}^{K K}\). We exactly recover Tucker (resp. CP) layers in our QPCs when these are materialized from PICs built via Tucker-merge (resp. CP-merge) in Algorithm 2, and hence the name of the merging procedure. Therefore, some QPCs can exactly match existent tensorized architectures, and this certainly happens when these are materialized from PICs built via Algorithm 1. This gives a new point of view on traditional tensorized architectures, and new possibilities for representation learning . Figure 3 illustrates how the materialization of a 3-variate function leads to a Tucker layer. This 1-to-1 mapping between tensorized PC architectures and QPCs will allow for a fair comparison in our experiments.

**Folding tensorized circuits for faster inference.** The layers of a tensorized circuit that (i) share the same functional form and that (ii) can be evaluated in parallel, can be stacked together as to create a _folded layer_ which speeds up inference and learning on GPU by orders of magnitude. For instance, let \(\{_{i}\}_{i=1}^{F}\) be \(F\) parallelizable Tucker layers each parameterized by a matrix \(^{(i)}\) of size \(K{}K^{2}\). Such layers can be evaluated as a folded layer \(\) parameterized by a tensor \(}\) of size \(F{}K{}K^{2}\), which computes the--otherwise sequential--\(F\) tucker layers in parallel. We illustrate folding in Fig. 2(d), and later on in Fig. 4(c). Note that (i) the input layers sharing the same function form can always be folded and that (ii) although a tensorized circuit may have many types of sum-product layers, using one type only is common in practice, and promotes depth-wise folding.

### Scaling PICs with neural functional sharing

Materializing QPCs can be memory intensive and time consuming, depending on: (i) the cost of evaluating the functions we need to materialize, (ii) the degree of parallelization of the required function evaluations, and (iii) the number of integration points \(K\). To solve these issues, we introduce _neural functional sharing_, i.e. we share multi-layer perceptrons as to parameterize multiple PIC units at once. This allows us to scale to larger models and datasets, as we make materialization faster and more memory-efficient than previous work .

**PIC functional sharing.** Functional sharing is to PICs as parameter-sharing is to PCs. This type of sharing can be applied over a _group_ of input/integral units--grouped according to some criteria--whose functions have all the same number of input and output variables. Specifically, let \(\{u_{i}\}_{i=1}^{N}\) be a group of \(N\) input/integral units, each with function \(f_{i}:^{I}^{O}\). The simplest form of functional sharing is to set all functions to be equal, i.e. \( i,j\!\![N]:f_{i}=f_{j}\). In this way, we reduce the number of function evaluations from \(NK\) to \(K\) as long as we materialize each \(f_{i}\) w.r.t. the same integration points \(}^{K}\), which is the case for Algorithm 3. We call this type of sharing **F-sharing**, as per _full-sharing_. More interestingly, leveraging functional composition, we may define \(f_{i}=h_{i} f\), so as sharing an _inner_ function \(\) for all unit functions. Similarly as before, as long as we materialize each \(f_{i}\) w.r.t. the same quadrature points \(}^{K}\), we would only need \(K\) function evaluations for \(f\) instead of \(NK\), as we can share them with all _outer_ functions \(h_{i}\) for further evaluation. We call this type of sharing **C-sharing**, as per _composite-sharing_. The original implementation of PICs  used neither F-sharing nor C-sharing.

Finally, we present and apply two different ways of grouping units. The first consists of grouping all input units, a technique which is only applicable when all input variables share the same domain. With this grouping, coupled with F-sharing, we would only need to materialize \(K P\) parameters, and use them to parameterize every QPC input layer. The second consists of grouping all integral units at the same depth of the PIC structure, which we couple with C-sharing and materialize as a folded sum-product layer. Despite grouping units that materialize into a folded layer is a natural and convenient choice, note that we can also group units that do not materialize as such. Once all units in a PIC have been grouped, materialization can be performed per-group.

**PIC functional sharing with (multi-headed) MLPs.** Similar to , we parameterize PIC input and integral units with light-weight multi-layer perceptrons (MLPs). However, instead of using a single MLP for each function, we will apply functional sharing as we strive to make the QPC materialization faster and memory efficient. Specifically, consider a group of integral units \(\!=\!\{u_{i}\}_{i=1}^{N}\), each with function \(f_{i}:^{I}\), over which we want to apply functional sharing. For every group \(\), we would have an \(L+1\) layered MLP of the form:

\[^{()}:^{I}^{M}:=_{L}^{()} _{1}^{()},\] (5)

where \(:^{I}^{M}\) is a Fourier-feature layer , and each \(_{i}^{()}:^{M}^{M}\) is a standard linear layer followed by an element-wise non linearity \(\), i.e. \((+)\), with \(^{M M},^{M}\), and \(M\) being the size of the MLP. Applying F-sharing over \(\) would simply consist of setting

\[f_{i}:^{M}:=(^{()} ^{()}+b^{()}),\] (neural F-sharing)

where \(^{()}^{M}\) and \(b^{()}\) are group-dependent parameters, therefore making all functions in the group equal. Instead, to implement C-sharing, we parameterize each \(f_{i}\) as

\[f_{i}:^{M}:=(^{(i)}^ {()}+b^{(i)}),\] (neural C-sharing)

where \(^{(i)}^{M}\) and \(b^{(i)}\) are function-dependent parameters, effectively creating a multi-headed MLP. As an example, consider a folded CP-layer with \(F\!=\!500\) and \(K\!=\!512\)--which we actually used in practice--resulting in \(2FK^{2} 262\)M trainable parameters. Assuming no bias term, an MLP with \(L\!=\!2\) and \(M\!=\!256\) would only instead require \(LM^{2}+2FM 387\)K trainable parameters to materialize the same tensor, resulting in more than 99% less trainable parameters. We illustrate such C-sharing in Fig. 4. In Appendix C.1 we provide more details about our MLPs.

Figure 4: **From neural C-sharing to folded CP-layer (Section 3.3). We sketch a 4-headed MLP with Fourier-Features (a) which we use to parameterize a group of 4 integral units (at the same depth) of a PIC (b), whose materialization leads to a folded CP-layer parameterized by a tensor \(}\) of size \(2 2 K K\) (c), with \(K\) being the number of integration point. Note that, during materialization, the FF-MLP block in (a) will be only evaluated \(K^{2}\) times, and not \(4K^{2}\).**

**Fast & memory-efficient QPC materialization.** Combing PIC functional sharing and per-group materialization allows scaling the training of PICs via numerical quadrature, as we drastically reduce the number and the cost of function evaluations required for the QPC materialization. We can now materialize very large QPCs, matching the scale of recent over-parameterized PCs yet requiring up to 99% less trainable parameters when using a large \(K\). This was not possible in the original formulation of PIC  as (i) the entire QPC was materialized in one-shot, not per-group, and (ii) no functional sharing was implemented, as each input/integral function had its own MLP.

## 4 Experiments

In our experiments, we first benchmark the effectiveness of functional sharing for scaling the training of PICs via numerical quadrature, comparing it with standard PCs and PICs w/o functional sharing . Then, following prior work [10; 32; 33; 18], we compare QPCs and PCs as distribution estimators on several image datasets. We always train using the trapezoidal integration rule. We use an NVIDIA A100 40GB throughout our experiments. Our code is available at github.com/gengala/tenpics.

Thanks to our pipeline, we can now use two recently introduced RGs tailored for image data which deliver architectures that scale better than those built out of classical RGs [45; 43; 31]: _quad-trees_ (QTs), tree-shaped RGs, and _quad-graphs_ (QGs), DAG-shaped RGs . These are perfectly balanced RGs, and therefore applying Algorithm1 over them would deliver balanced PIC structures amenable to depth-wise C-sharing of integral units. We report full details about QTs and QGs in AppendixB. We denote a tensorized architecture as [RG]-[sum-product layer]-[\(K\)], e.g. QT-CP-16, which can be trained as a standard PC or materialized as QPC from a PIC. We treat pixels as categorical variables, and, as such, our architectures model probability mass functions.

**Scaling PICs.** For each model type, \(\{,\}\), we specify a pair \((,)\) where the first (resp. second) argument specifies the sharing technique, \(\{,,\}\), for the input (resp. inner) layers/groups, where N stands for _no sharing_. In Fig.5, we report the time and GPU memory required to perform an Adam  optimization step using PCs (), and PICs with () and without () functional C-sharing over the integral unit groups. We note that PICs using functional sharing () proves very effective for scaling, requiring comparable resources as standard PCs (), while those who do not ()--like prior work --are orders of magnitude slower and quickly go Out-Of-Memory (OOM) for \(K\!>\!64\). Remarkably, some QG-TK configurations of PICs (), see TableD.2, require even less GPU memory than PCs, and this is because of the significant difference in the number of trainable parameters, since copies of these have to be stored by Adam during optimization. In fact, the number of parameters for PCs and PICs w/o functional sharing (,) is in the order of hundreds of millions

Figure 5: **Learning PICs using functional sharing requires (i) comparable resources as PCs and (ii) up to 99% less trainable parameters.** We compare the GPU memory (top-left) and time (bottom-left) required to perform an optimization step with PCs (), PICs with functional sharing (), and without (), while considering three different architectures (QT-CP, QG-CP, QG-TK). To the right, we report the number of trainable parameters for (i) PCs () at different \(K\), and (ii) for PICs (), at different MLP sizes \(M\). The isolated \(\) nodes refer to refer to to PIC (F, N) with QG-TK which we could only run at \(K\!=\!16\). The benchmark is conducted using a batch of 128 RGB images of size 64x64 and Adam . Extra details in AppendixD.1.

(hitting 2B+), while PICs with functional sharing () scale much more gracefully, hitting only 6M+ parameters. We emphasize that the number of trainable parameters of PICs is independent of the \(K\) at which we materialize, but only dependent on the size of the MLPs \(M\) we use to parameterize them, which can also be thought as the cost of evaluating PIC functions. We report more (tabular) details in Appendix D.1.

**Distribution estimation.** Following prior work , we extensively test QPCs and PCs as distribution estimators on standard image datasets. Our full results are in Appendix D.2, while we only report here the bits-per-dimension (bpd) of the best performing models, which _always belong to a QG-CP architecture, reflecting the additional expressiveness of DAG-shaped RGs._ Our full results also highlights how the the more expressive yet expensive Tucker layers we introduced for PICs deliver the best performance for small \(K\), but are hard to scale. All QPCs are materialized from PICs applying F-sharing over input units and C-sharing over groups of integral units, i.e. PIC (F, C). We begin with the Mnist-family, which includes 6 datasets of gray-scale 28x28 images: Mnist, FashionMnist, and EMNIST with its 4 splits . Fig. 6 shows that QPCs generally perform best, improving over standard PCs (5/6), complex heuristic-based PC learning schemes as pruning-and-growing (5/6) , and some deep generative models (DGMs) (6/6).

Then, we move to larger RGB image datasets as CIFAR , ImageNet32, ImageNet64 , and CelebA . To compare against prior work , we have to preprocess the datasets using the YCoCg transform, a lossy color-coding that consistently improves performance for PCs when applied to RGB images.3 We also report results over datasets preprocessed with the lossless YCoCg-R transform , effectively doubling the number of datasets. We report details about these transforms in Appendix C.3. From Table 1, we see that QPCs prove again very competitive, consistently outperforming standard PCs commonly trained with Adam, and the best performing PC from the literature, HCLT, which is trained via EM schemes and patch-wise methods . Furthermore, QPCs are close to PCs trained via latent variable distillation (LVD, LVD-PG in Table 1) , a framework that requires extra supervision over their latent spaces by distilling information from existing deep generative models (DGMs). This technique requires pre-trained DGMs, several heuristics, and a final fine-tuning stage via EM or SGD, while PIC training method is instead end-to-end and self-contained.

    & QPC\({}^{}\) & PC\({}^{}\) & QPC\({}^{}\) & PC\({}^{}\) & HCLT\({}^{}\) & LVD\({}^{}\) & LVD-PG\({}^{}\) \\  CIFAR & **5.09** & 5.50 & **4.48** & 4.85 & 4.61 & 4.37 & 3.87 \\ ImgNet32 & **5.08** & 5.25 & **4.46** & 4.63 & 4.82 & 4.38 & 4.06 \\ ImgNet64 & **5.05** & 5.22 & **4.42** & 4.59 & 4.67 & 4.12 & 3.80 \\ CelebA & **4.73** & 4.78 & **4.11** & 4.16 & - & - & - \\   

Table 1: **QPCs improve over PCs.** We mark results with * for YCoCg-R and \(\) for YCoCg. QG-CP-512 (resp. QG-CP-256) is the best performing architecture for QPCs and PCs on CIFAR & ImgNet32 (resp. ImgNet64 & CelebA).

Figure 6: **QPCs improve over PCs and other DGM baselines** in terms of test-set bpd for the mnist-family datasets. We compare against SparsePC , HCLT , RAT-SPN , IDF , BitSwap , BBans  and McBits . HCLT results are taken from . Columns QPC and PC report results from this paper, with QG-CP-512 being the best performing architecture for both. Scatter plot (right): bpd for QPCs (y-axis) and PCs (x-axis) paired by architecture and min-max normalized for the mnist and F-mnist datasets. A point below the diagonal is a win for QPCs.

Discussion & Conclusion

With this work, we systematized the construction of PICs, extending them to DAG-like structures (Section 3.1), tensorizing (Section 3.2), and scaling their training with functional sharing (Section 3.3). In our experiments (Section 4), we showed how this pipeline is remarkably effective when the tractable approximations of PICs, QPCs, are used as distribution estimators. This in turn becomes a new and effective tool to learn PCs at scale. In fact, prior work has shown that naively training large PCs via EM or gradient-ascent is challenging, and that PC performance plateau as their size increases . Our contributions go beyond these limitations, while offering a simple, principled and fully-differentiable pipeline that delivers performance that rival more sophisticated alternatives  (Section 4). We conjecture that this happens as training PCs via PICs drastically reduces the search space while allowing (i) smoother training dynamics and (ii) the materialization of arbitrarily large tractable models.

The development of tractable models is an important task in machine learning as they provide many inference routines, and can be used in many down-stream applications such as tabular data modeling , generative modeling , lossless compression , genetics , knowledge-graphs , constrained text generation , and more. Our work has also certain parallels with tensor networks and (quasi-)tensor decompositions , as  recently showed how hierarchical tensor decompositions can be represented using the language of tensorized circuits. Furthermore, we note that the recent non-monotonic PCs  (i.e., PCs with negative sum parameters) can also be thought as the result of a quadrature process from PICs whose function can return negative values.

Our work does not come without limitations. Although we showed that training PICs with function sharing requires comparable resources as standard PCs, traditional continuous LV models as VAEs, flows and diffusion models are more scalable. Also, sampling from PICs is currently not possible, as we cannot perform differentiable sampling from our (multi-headed) MLPs. Future work may include the investigation of more efficient ways of training PICs, possibly using techniques as LVD or variational inference  to directly maximize PIC lower-bounds, requiring numerical quadrature only as fine-tuning step to distill a performant tractable model. We believe our work will foster new research in the field of generative modeling, and specifically in the realm of tractable models.

## Author Contributions

GG led the project, proposed neural functional sharing, and ran all experiments. GG and AV devised the original idea of a pipeline to build PICs, and leverage tensorized folded circuits for training them. AV and EQ equally supervised all the phases of the project. CdC supervises the project, and critically read the manuscript and provided feedback.