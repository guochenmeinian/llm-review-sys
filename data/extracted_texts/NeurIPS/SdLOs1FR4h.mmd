# Fugal:

Feature-fortified Unrestricted Graph Alignment

 Aditya Bommakanti

IIT Delhi

adityabommakanti2002@gmail.com &Harshith Reddy Vonteri

IIT Delhi

harshithreddyvonteri@gmail.com &Konstantinos Skitsas

Aarhus University

skitsas@cs.au.dk &Sayan Ranu

IIT Delhi

sayanranu@cse.iitd.ac.in &Davide Mottin

Aarhus University

davide@cs.au.dk &Panagiotis Karras

University of Copenhagen & Aarhus University

piekarras@gmail.com

###### Abstract

The necessity to align two graphs, minimizing a structural distance metric, is prevalent in biology, chemistry, recommender systems, and social network analysis. Due to the problem's **NP**-hardness, prevailing graph alignment methods follow a _modular_ and _mediated_ approach, solving the problem restricted to the domain of intermediary graph representations or products like embeddings, spectra, and graph signals. Restricting the problem to this intermediate space may distort the original problem and are hence predisposed to miss high-quality solutions. In this paper, we propose an _unrestricted_ method, Fugal, which finds a permutation matrix that maps one graph to another by directly operating on their adjacency matrices with judicious constraint relaxation. Extensive experimentation demonstrates that Fugal consistently surpasses state-of-the-art graph alignment methods in accuracy across all benchmark datasets without encumbering efficiency.

## 1 Introduction and Related Work

_Graph alignment_ seeks to match a pair of graphs to each other, i.e., to correlate nodes of one graph to those of the other. For instance, biological systems such as protein-protein interaction networks and gene regulatory networks can be represented as graphs. The alignment of such biological networks across species reveals _orthologous_ proteins or genes (i.e., homologous genes that evolved from a common ancestor) and thereby conveys the biological function of uncharted genes in one species through their better-studied counterparts in another species . The same problem also arises in other high-impact network science tasks , such as identifying users in social networks  and feature matching in computer vision . The problem can be formulated as an instance of the _quadratic assignment problem_ (QAP)  between nodes of the two graphs, which treats the edges in one graph as units of _flow_ and the edges in the other graph as _distances_ between nodes. This relation renders the problem \(\)-hard to approximate even within an approximation factor that grows linearly with the number of nodes .

### Related Works

Owing to the problem's hardness, several heuristics have been proposed. Nevertheless, state-of-the-art graph alignment methods refrain from directly addressing the edge-aware QAP. Instead, they craft intermediate representations of nodes that allow for the computation of _similarities_ and settle for solving an _assignment problem_ over those representations. We call these methods _mediated_ due to their restriction to _intermediary_ graph representations. While the transformation from the original graph space to an intermediate space enables computational efficiency, the transformation incurs loss of information. In this work, we propose an _unrestricted_ graph alignment method that avoids restricting the problem to an intermediate space, while also retaining efficiency. We call our method "unrestricted" rather than "unmediated" since, while we retain the full graph information in the core QAP, we also avail of help from mediated representations to solve the QAP. In the subsequent discussion, we summarize the various mediated and unmediated approaches in the literature.

**Mediated Approaches:** GWL  jointly learns embeddings and alignments using the dissimilarity notion of Gromov-Wasserstein discrepancy; it estimates distance matrices using the embeddings when learning the optimal transport, and regularizes the learning of embeddings using the learned transport. S-GWL  addresses the scalability drawback of GWL by adopting a partitioning method on the input graphs. CONE  models intra-network proximity with node embeddings and uses them to match nodes across networks after aligning embedding subspaces. REGAL  identifies node matchings by greedily aligning their latent feature representations learnt from graph structures. GRAMPA  constructs a similarity matrix as a weighted sum of outer products between all pairs of eigenvectors of the two graphs. GRASP  uses the spectral properties of the graphs grounded on the eigenvectors of their normalized Laplacian matrices. IsoRank  uses neighborhood similarity to extract structural graph information and recursively updates the score of a node pair using the score of their neighbors. GRAAL  is a greedy alignment method that matches nodes using a similarity score based on a dictionary of small frequent graph patterns. GOT  employs the probabilistic distribution of smooth graph signals defined with respect to the graph topology, and seeks alignments by minimizing the distance between these graph signal distributions. fGOT  adopts a dissimilarity metric that aligns two graphs using the probability distribution of data generated via graph filters. PARROT  presents a semi-supervised methodology which encodes graph topology through random walks with restart (RWR) for a position-aware transport cost and addresses a regularized Optimal Transport (OT) problem to determine node mappings. GW  and FGW  compute Gromov-Wasserstein discrepancy using similarity matrices of shortest path distances between nodes.

**Unmediated Approaches:** FAQ  is an unmediated algorithm that addresses the QAP by relaxing constraints to attain computational tractability. GLAG  proposes a problem formulation that retains the full graph information and relaxes the permutation constraints. As we will see in SS 5, these methods of relaxing constraints lead to inferior accuracy.

**Unrestricted Approaches:** In addition to the full graph information, PATH  and FGM  also use feature matching, while DSPP  employs all-pairs-shortest-paths for graph alignment. We characterize these methods as unrestricted, since they also avail of help from mediated representations. As we will see in SS 5, these methods are significantly inferior to Fugal in terms of accuracy.

### Contributions

**Optimization problem formulation:** We present Fugal (_Feature-fortified Unrestricted Graph Alignment_), a graph alignment method that retains full graph information by integrating the quadratic assignment problem (QAP) in the optimization objective. To augment quality, we utilize a regularizer in the form of a linear assignment (LAP) supplement incorporating graph structural features.

**Unrestricted solution:** Fugal relaxes the solution space to _doubly stochastic_ matrices and uses a customized optimization strategy that guides the Frank-Wolfe algorithm  through a Sinkhorn distance objective  to steer the resulting doubly stochastic solution towards a _quasi-permutation_ matrix. We call our approach _unrestricted_, as it does not rely _solely_ on intermediate representations. On the other hand, it is not entirely _unmediated_, as the LAP regularizer using structural features is mediated. Thereby, we retain the full graph information and also enable mediating representations to efficiently guide the optimization process and thereby enable both efficacy and tractability.

**Experimental evaluation:** Through extensive experimentation with real-world and synthetic datasets across varying graph density and noise levels, we demonstrate that Fugal outperforms state-of-the-art graph alignment methods in accuracy without a detrimental efficiency overhead.

## 2 Problem Formulation

**Definition 2.1**.: Let \((,)\) denote an unlabelled, undirected _graph_, where \(\) is the set of nodes each identified by a number \([n]=\{1,,n\}\) and \(\) is the edge set. The adjacency matrix of \(\) is \(\{0,1\}^{n n}\) such that \(a_{ij}=a_{ji}=1\) if and only if \((i,j)\).

We denote an all-ones vector as \(\), an all-ones square matrix as \(\), and an all-zero square matrix as \(\). The dimensions of entities are inferred from the equations employing them.

**Definition 2.2**.: We denote the set of binary-valued _permutation matrices_ as \(^{n}=\{\{0,1\}^{n n}:=,^{}=\}\) and that of real-valued _doubly stochastic_ matrices as \(^{n}=\{^{n n}:=,^{}=\}\).

**Definition 2.3**.: Let \(=[a_{ij}]_{i[n],j[m]}^{n m}\). We denote the _Frobenius norm_ as the entry-wise \(2\)-norm \(\|\|_{F}=(_{i=1}^{n}_{j=1}^{m}|a_{ij}|^{2})^{i/2}\).

**Definition 2.4**.: We denote the _trace_ of a matrix \(\) as \(()\).

**Theorem 2.5**.: _A doubly-stochastic matrix \(\) with \((^{}(-))=0\) is a permutation matrix._

Proof.: From \((^{}(-))=0\) follows that \(_{i}_{j}a_{ij}(1-a_{ij})=0\). Since \(\) is doubly-stochastic, \(0 a_{ij} 1\) for all \(i\) and \(j\). Thus, \(a_{ij}(1-a_{ij}) 0\) for \(1 i,j n\). Therefore, \(a_{ij}(1-a_{ij})=0\) for all \(i\) and \(j\). As a consequence, \(a_{ij}\{0,1\}\) for each \(i\) and \(j\). Given that \(\) is doubly-stochastic and all its entries are either 0 or 1, by Definition 2.2, \(\) is a permutation matrix. 

**Problem 1** (Unmediated Graph Alignment).: _Consider two graphs \(_{1}:=(_{1},_{1})\) and \(_{2}:=(_{2},_{2})\) with adjacency matrices \(,\) respectively. The objective of unmediated graph alignment is to identify a bijection \(f:_{1}_{2}\) between the two graphs that minimizes the number of edge disagreements. Formally, the problem is expressed as:_

\[_{^{n}}\|- \|_{F}^{2},\] (1)

_where \(^{n}\) denotes the set of permutation matrices._

The appellation _unmediated_ denotes that we seek a correspondence among nodes without using any information other than the adjacency matrix. The problem is an instance of the \(\)-hard _quadratic assignment problem_ (QAP) .

Due to the problem's hardness, a popular approximation path utilizes _intermediaries_ such as node embeddings. A _mediated_ graph alignment is thus expressed as a linear assignment between embeddings rather than a quadratic assignment between adjacency matrices:

\[_{^{n}}\|_{1}-_{2} \|_{F}^{2}\] (2)

where \(_{k}^{|_{k}| F}\) is the embedding matrix of \(_{k}\) and \(_{k}[i,:]\) is the \(F\)-dimensional vector representation of node \(i\) of \(_{k}\). The optimization problem in Equation (2) is a _linear assignment problem_ (LAP), which is solvable optimally in \((N^{3})\) by the Hungarian algorithm , while sub-optimal solutions reduce complexity to \((N^{2})\).

**Extension to graphs of unequal sizes.** Consider two graphs \(_{1}\) and \(_{2}\) with node counts \(n_{1}\) and \(n_{2}\), respectively (\(n_{1}<n_{2}\)). To enable alignment despite the size difference, we augment \(_{1}\) with \((n_{2}-n_{1})\) isolated dummy nodes and discard mappings involving dummy nodes from the output.

## 3 Fugal

To design Fugal, we augment the core QAP of Eq. (1) with a LAP supplement that leverages simple _structural_ graph features (SS 3.1) to form a unified optimization problem over the set of permutation matrices \(^{n}\) (SS 3.2). As this problem is \(\)-hard, we relax its solution space to the set of _doubly stochastic_ matrices \(^{n}\) (SS 3.3), a superset of the set of permutation matrices. We refine the solution to obtain a _quasi-permutation matrix_, i.e., _almost_ a permutation matrix, which we adjust to a permutation matrix that signifies a valid alignment by solving a simple LAP using the _Hungarian_ algorithm . We dub this approach "unrestricted" as it eschews the information loss incurred by mediated solutions, which rely solely on intermediary representations. However, we still employ supplementary mediating representations to ensure tractability and efficiency.

### LAP Formulation

Here, we formalize the Linear Assignment Problem (LAP), which is auxiliary to our framework. We construct a node feature vector using four structural features proposed in NetSimile. This includes **(1)**\(d_{i}\), the degree of node \(v_{i}\), **(2)**\(c_{i}\), the clustering coefficient of \(v_{i}\), **(3)**\(_{N_{i}}\), the mean degree of \(v_{i}\)'s neighbors, **(4)** and \(_{N_{i}}\), the mean clustering coefficient of \(v_{i}\)'s neighbours. Other features, such as betweenness centrality, PageRank, may also be used. Ultimately, the decision resides on the trade-off between the utility of including these features on alignment quality and the efficiency of computing these features.

Using these features, we construct a feature matrix \(_{k}^{|_{k}| 4}\) for each graph \(_{k}\) and, by the rationale that the structural features of corresponding nodes are similar, we formulate a Linear Assignment Problem for \(_{1}\) and \(_{2}\) as:

\[_{^{n}}\|_{1}-_{2}\| _{F}^{2}\] (3)

By the Frobenius norm definition, Eq. (3) is equivalent to:

\[_{^{n}}_{i}\|_{1}[i,:]-_{j} _{ij}_{2}[j,:]\|_{F}^{2}\] (4)

Utilizing the property of permutation matrices that each row contains only one 1, we reformulate Eq. (4) to:

\[_{^{n}}_{i,j}_{ij}\|_{1}[i,:]-_{2}[j,:]\|_{F}^{2}=_{^{n}}_{i,j }_{ij}_{ij}\] (5)

where \(\) is a distance matrix with \(_{ij}\) denoting the squared Euclidean distance between \(_{1}[i,:]\) and \(_{2}[j,:]\). Since each row \([i,:]\) contributes exactly one term to this sum, being the element of \(\) corresponding to the single 1 entry in \([i,:]\), the result is equal to the trace of the matrix product:

\[_{^{n}}\,(^{} )\] (6)

### Optimization Problem

Our problem formulation augments the QAP of Eq. (1) with a LAP regularizing term as in Eq. (6):

\[_{^{n}}\|-\|_{F}^{2}+ (^{})\] (7)

where \(\) and \(\) denote the adjacency matrices of \(_{1}\) and \(_{2}\), respectively, \(\) follows Eq. (6), and \(\) regulates the LAP's significance; since \(^{}=\), this is expanded to:

\[_{^{n}}(^{} )+(^{})-2(^{}^{})+( ^{})\] (8)

equivalently, ignoring constant terms and reversing the sign,

\[_{^{n}}(^{} ^{})-(^{})\] (9)

In the case of \(=0\), the first term alone corresponds to the maxQAP problem , which is \(\)-hard to approximate even within an approximation factor that grows linearly with the number of nodes. Given this hardness of the QAP alone and the fact that relaxing combinatorial constraints often results in a substantial deterioration of solution quality, we introduce the LAP regularization to ground the QAP solution on pragmatic features and thereby guide it, even after we relax combinatorial constraints.

### Approximating the Optimization Problem

The problem in Eq. (9) is \(\)-hard, due to the non-convex nature of the space of permutation matrices . A natural way to overcome this hardness is to enlarge the allowed solution space to the convex set of _doubly stochastic_ matrices \(^{n}\), as considered in FAQ :

\[_{^{n}}-(^{} ^{})+(^{})\] (10)Since the problem in Eq. (10) calls to minimize a function subject to linear constraints implied by \(^{n}\), the solution can be efficiently found  by algorithms such as _Adam_ and _Frank-Wolfe_. The FAQ algorithm  follows such an approach to solve the relaxed optimization with the Frank-Wolfe algorithm and project the solution back onto \(^{n}\), yet addresses exclusively the first, QAP term in Eq. (10). To further augment quality, as we elaborate later in Section 5, we include the LAP term in Eq. (10) and also add a regularizing term that guides the solution towards a quasi-permutation matrix. By Theorem 2.5, which establishes that a doubly-stochastic matrix \(\) with \((^{}(-))=0\) is a permutation matrix, we rewrite the problem in Eq. (9) as:

\[_{^{n}}-(^{}^{})+( ^{})\\ (^{}(-))=0\] (11)

and turn the constraint to a regularizer with parameter \(\):

\[_{^{n}}-(^{}^{})+( ^{})+((^{}( -)))\] (12)

Equivalently, by reformulating the constraints:

\[_{}-(^{ }^{})+(^{} )+((^{}(-))) \\ =,^{} =,0_{ij} 1\] (13)

We solve the problem in eq. (13) for \(=0\) by the Frank-Wolfe (FW) algorithm  with updates guided by an objective computed via the Sinkhorn-Knopp algorithm , due to the computational efficiency they confer. We use the solution to this optimization problem as a warm start, and refine it by gradually increasing \(\) over \(T\) iterations, each initiating with the solution obtained in the preceding one and solving the problem in Eq. (13) by FW. Alg. 1 outlines the process.

**Rounding Algorithm:** Alg. 1 yields a _quasi-permutation_ matrix \(\). Next, to obtain an one-to-one mapping between nodes of \(_{1}\) and \(2\), we need to adjust \(\) to a permutation matrix by rounding. We pose this problem as an assignment problem, maximizing the sum of \(_{ij}\) entries selected for rounding up to 1, while rounding the rest down to 0, and solve it optimally by the Hungarian algorithm . Alg. 2 in the appendix presents the complete Fugal pseudocode.

```
0: Adjacency Matrices \(\), \(\), Distance matrix \(\), control parameter \(\), num\(s\)\(T\) Output: Quasi-Permutation matrix \(\)
0:
1:\(f():(^{}^{})+ (^{})\)
2:\(g():(^{}(-))\)
3:\(:=^{}^{}\)
4:for\(=0\)to\(T-1\)do
5:for\(i=1\)to\(10\)do
6:\(grad= f()+ g()\)
7:\(g_{it}:=_{i}(grad,q)\)Sinhhorn-Knopp
8:\(\)
9:\(+(q_{it}-)\)
10:endfor
11:endfor
12:return\(\) ```

**Algorithm 1**FindQuasiPermutation (\(,,,,T\))

## 4 Customized Optimization Strategy for Node Alignment

In this section, we elucidate the intricacies of Algorithm 1, which derives a quasi-permutation matrix, focusing on two pivotal steps: _(i)_ initialization of the quasi-permutation matrix; _(ii)_ finding the local solution for a given \(\).

**Initialization:** Any doubly stochastic matrix is a viable option for initialization. However, we opt for an _uninformative flat_ matrix, \(^{}/n\). Our empirical observations indicated that this initialization consistently performs well across diverse datasets, contrary to _informative_ initializations like the _identity matrix_, which exhibit inconsistency in performance, as we further elaborate in Section A.8.

**Local Solution for a given \(\):** Given a specific \(\), our objective is to solve the optimization problem of Eq. (13) under linear constraints. To achieve this, we employ the Frank-Wolfe algorithm (FW), a successive first-order optimization technique devised for solving convex quadratic programs . While FW is a widely utilized solver as a subroutine for QAP algorithms, we tailor its application to Fugal. Specifically, each iteration commences from the local solution obtained in the previous iteration and involves the following steps:

**Computing the Gradient:** The gradient of the objective function \(f()=-(^{}^{})+ (^{})\) with respect to \(\), evaluated at \(\), is \( f()=-^{}-^{} +\). Additionally,

[MISSING_PAGE_FAIL:6]

### Experimental Setup

We ran all experiments on a 40-core Intel Xeon E5-2687W CPU machine @3.10GHz with Python implementations of Fugal1 and competitors;2 the latter include CONE , IsoRank , S-GWL , GRAMPA , GRASP-B , FAQ , PARROT , fGOT , GOT , GW  and FGW . Due to scalability limitations, we excluded fGOT from consideration for graphs with more than 1000 nodes, on which it failed to terminate within 5 hours. Moreover, due to the inability of GOT, PATH, and DSPP to scale for the smallest dataset in our analysis, we assess them separately on smaller graphs in Appendix A.4. We exclude GWL from evaluation in favor of its scalable and superior variant, S-GWL . We omit from the comparison algorithms such as GRAAL , GLAG  and REGAL  due to their inferior performance [39; 29]. As we focus on non-attributed graphs, we exclude FINAL , which is equivalent to IsoRank on graphs without attributes. For the prerequisite similarity score in IsoRank, we devise a customized weight scheme as \(sim(u,v)=1--d_{v}|}{\{d_{u},d_{v}\}}\), where \(d_{u}=|N(u)|\) denotes the degree of node \(u\). With all baselines, we use author-recommended parameters and derive node matchings from similarity scores using the Hungarian algorithm. In Appendix A.5, we benchmark Fugal against S-GWL and CONE in terms of Matched Neighborhood consistency (MNC)  and the Frobenius norm between aligned graph adjacency matrices.

### Accuracy on varying noise

Graphs with real Noise:We evaluate all algorithms on accuracy with three real-world networks: MultiMagna, Voles, and High School. MultiMagna represents a yeast protein-protein interaction (PPI) network and noisy variants incorporating an additional \(q\%\) of low-confidence interactions, with \(q\) (\(\) {5, 10, 15, 20, 25}). High School and Voles are temporal proximity networks; we align the last graph version to versions containing 80%, 85%, 90%, and 99% of edges. Figure 1 presents our results. Fugal consistently achieves accuracy surpassing its counterparts across all datasets, with S-GWL being the closest baseline on average. On MultiMagna, Fugal attains a 4% improvement over the next best algorithm, S-GWL, on the first graph variant, and this gap steadily increases to 16% on the last variant. On Voles, CONE and S-GWL follow Fugal's accuracy with up to 90% of edges, yet with 80% of edges, they achieve 83% and 75% accuracy, respectively, vs. 90% of Fugal. On the High School network, Fugal, FAQ and PARROT align graphs perfectly, while S-GWL attains near-perfect alignment. IsoRank, GRAMPA, GRASP-B fGOT, GW and FGW fall short of Fugal's performance across all three datasets. Despite performing comparably to Fugal on the HighSchool dataset, FAQ and PARROT exhibit notably poorer performance on other datasets. The consistently superior performance of Fugal underscores its robustness.

Large Real Graphs with Partially Aligned nodes:ACM and DBLP are two co-authorship networks of the ACM Digital Library and DBLP bibliography. In these networks, nodes represent authors, and an edge exists between two authors if they have collaborated on at least one publication. Across both networks, there are 6,325 authors who appear in both. Although both networks are attributed, we did not incorporate this information in our experiments. Note that S-GWL and GRASP-B are not scalable for networks of this magnitude, hence omitted from the analysis. Furthermore, the experiment was conducted in an unsupervised manner, meaning that the methods were not provided with any prior information regarding node alignment. Our results, detailed in Table 2, showcase

Figure 1: Accuracy, real graphs with real noise.

the fraction of correctly aligned nodes out of the 6,325 aligned nodes. Fugal demonstrated a significant improvement of 30% compared to the closest baseline, CONE. This underscores the superior scalability of Fugal without compromising accuracy.

**Real Graphs with Injected Noise:** Figure 2 illustrates the results on real datasets subject to synthetic one-way and bimodal noise. Consistent with the trends observed in real noise, Fugal exhibits superior performance across all evaluated networks and noise types. This consistent superior performance of Fugal establishes it as a robust graph alignment solution. Appendix A.3 zooms in on the performance of Fugal vs. baselines with noise levels in the range 0% to 5% to better highlight the performance superiority of Fugal.

**Synthetic Graphs:** Figure 3 portrays accuracy results on Newmann-Watts graphs of 1000 nodes with node degree \(k\) = 7 and rewiring probability \(p\) = 0.1 subject to synthetic noise. Under one-way noise, all methods except CONE and FAQ achieve perfect alignment at 0% noise. With noise of 5% and 10%, Fugal attains a 60% and 14% gain, respectively, over the 2nd-best method, S-GWL-Beyond these noise levels, all methods experience failures. Bimodal noise at 0% results in perfect alignment for most methods. However, alignment failures occur as noise grows. Figure 3 further zooms in noise levels in the range of 0% to 5%. Fugal significantly outperforms all baselines under one-way noise, achieving a margin of 60% at 3% and 5% levels. Moreover, Fugal performs

    & **CONE** & **IsoRank** & **GRAMPA** & **FAQ** & **PARROT** & **GW** & **FGW** & **Fugal** \\ 
**Accuracy** & 0.183 & 0.042 & 0.011 & 0.025 & 0.000 & 0.028 & 0.012 & **0.487** \\   

Table 2: Accuracy in alignment across ACM-DBLP.

Figure 3: Accuracy, Newmann-Watts graphs.

Figure 2: Accuracy, one-way (top) & bimodal (bottom) noise.

superiorly in the bimodal noise within the 5% noise threshold, gaining nearly 40% at 1% and 3% noise levels. These results underscore the efficacy of Fugal in handling diverse graph structures.

### Varying Density

Here, we examine performance under varying graph density. In Newmann-Watts graphs, the rewiring probability parameter \(p\) affects the edge density of sampled graphs for a fixed number of nodes \(n\), while the parameter \(k\), representing the number of nearest neighbors per node, affects the minimum and expected degree. Figure 4 shows our results when varying \(p\) and \(k\) in NW graphs comprising 1000 nodes. Methods other than Fugal consistently fail to handle sparse graphs (low \(p\)). However, Fugal attains accuracy 92% at \(p=0.25\), outperforming S-GWL, which achieves only 54%. Sparse graphs pose a challenge for alignment, as they provide less discriminating evidence in terms of density differentials. When varying \(k\), Fugal consistently achieves near-perfect alignment, surpassing all baselines. These findings corroborate the resilience of Fugal across graph densities and its adaptability to varying degrees of connectivity.

### Efficiency

Here we compare the computational efficiency of Fugal to that of S-GWL, which ranks as the second-best performer across most benchmark datasets.

Figure 5 plots running times _in logarithmic axes_. Fugal achieves lower running times on MultiMagna, Voles, curroroad, arenas, and Newmann-Watts networks with an up to 3x speed up, highlighting its capacity to handle _large_ networks. Conversely, S-GWL marginally outperforms Fugal on _smaller_ networks. S-GWL did not scale for ACM-DBLP, failing to terminate even after 5 hours. This discrepancy indicates S-GWL's incapacity to scale to large networks, which restricts its broader applicability. We emphasize that Fugal achieves a substantial accuracy advantage without compromising efficiency, affirming its prowess as an efficient and effective solution. Appendix A.2 presents running times for all baselines.

### Scalability

Given the results of Section 5.5, we delve into the scalability of Fugal and S-GWL with Newmann-Watts graphs of increasing nodes. Figure 6 plots our findings. At \(512\) nodes, Fugal and S-GWL have comparable running times. Still, as nodes grow, Fugal outpaces S-GWL.

Figure 4: Accuracy varying density and one-way noise.

Figure 5: Running time comparison, Fugal vs S-GWL.

Figure 6: Scalability on NW graphs, \(k=7\), \(p=0.5\).

### Parameters and Ablation

Table 3 in Appendix lists the parameters we employ in Fugal with each dataset. We set the number of iterations \(T\) to 15 for all datasets. The parameter \(\) controls the sway of node features in the optimization. Sparser graphs, characterized by lower connectivity and less information in adjacency matrices, benefit from higher reliance on node features, hence we recommend a higher \(\). Sparser datasets such as inf-eurorooad, ca-netscience, and NW (\(k=7\), \(p=0.1\)) benefit from higher values of \(\) (1-2), denser graphs from smaller values (0.1-0.5).

We also conduct an extensive ablation study to assess the impact of the structural features outlined in Section 3.1. We craft five variants of Fugal, where Fugal-\(i\) utilizes only the \(i^{}\) structural feature while excluding others. Fugal-0 abstains from all structural features. Figure 7 juxtaposes the accuracy of these variants to that of Fugal on two networks. Each variant employing structural features attains higher accuracy than Fugal-0, corroborating the usefulness of these features. Further, Fugal, leveraging all features, outperforms other variants. Notably, Fugal-1 performs second-best, underscoring the significance of degree in identifying node alignments. We also investigate a variant setting \(=0\), denoted as Fugal-DS (for _doubly stochastic_), instead of iteratively increasing it. As Figure 8 shows, Fugal-DS attains worse accuracy.

## 6 Conclusions

We introduced Fugal, an _unrestricted_ algebraic approach to graph alignment that works directly on graph adjacency matrices and identifies node correspondences by relaxing permutation matrix constraints and steering the solution to the desired form, followed by rounding. Through extensive experimentation, we established that Fugal surpasses state-of-the-art graph alignment methods in accuracy across network types, noise conditions, and graph densities, even while maintaining a scalability advantage.

**Broader Impact and Ethical consequences:**Fugal opens the way to improved solutions in graph alignment, as reflected in its performance across diverse networks, noise types, and graph density. This outcome can spark further research in optimization techniques and advances in bioinformatics, social network analysis, and infrastructure mapping. Still, advances in graph alignment also enhance the abilities of attackers attempting to de-anonymize sensitive social network and biological data. Therefore, preventing attacks on privacy is crucial, calling for the enforcement of advanced anonymization methods  before publishing such data.

## 7 Acknowledgements

AB was supported by Graviton Research Capital LLP. HRV was supported by the CSE Research Acceleration Fund of IIT Delhi. KS was supported by the Independent Research Fund Denmark.

Figure 8: The effect of setting \(\) = 0 (Fugal-DS) against the default option of iteratively increasing.

Figure 7: Accuracy of Fugal variants, one-way noise.