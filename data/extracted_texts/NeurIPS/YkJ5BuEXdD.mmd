# Preference Learning Algorithms Do Not Learn Preference Rankings

Angelica Chen

New York University

ac5968@nyu.edu &Sadhika Malladi

Princeton University

smalladi@princeton.edu &Lily H. Zhang

New York University

lily.h.zhang@nyu.edu &Xinyi Chen

Google DeepMind; Princeton University

xinyc@google.com &Qiuyi Zhang

Google DeepMind

qiuyi2@google.com &Rajesh Ranganath

New York University

rajeshr@cims.nyu.edu &Kyunghyun Cho

New York University; Genentech; CIFAR LMB

kyunghyun.cho@nyu.edu

###### Abstract

Preference learning algorithms (e.g., RLHF and DPO) are frequently used to steer LLMs to produce generations that are more preferred by humans, but our understanding of their inner workings is still limited. In this work, we study the conventional wisdom that preference learning trains models to assign higher likelihoods to more preferred outputs than less preferred outputs, measured via _ranking accuracy_. Surprisingly, we find that most state-of-the-art preference-tuned models achieve a ranking accuracy of less than \(60\%\) on common preference datasets. We also derive the _idealized ranking accuracy_ that a preference-tuned LLM would achieve if it optimized the DPO or RLHF objective perfectly. We demonstrate that existing models exhibit a significant _alignment gap_ - _i.e._, a gap between the observed and idealized ranking accuracies. We attribute this discrepancy to the DPO objective, which is empirically and theoretically ill-suited to fix even mild ranking errors in the reference model, and derive a simple and efficient formula for quantifying the difficulty of learning a given preference datapoint. Finally, we show that ranking accuracy strongly correlates with the empirically popular win rate metric when the model is close to the reference model, shedding further light on the differences between on-policy (e.g., RLHF) and off-policy (e.g., DPO) preference learning algorithms.

## 1 Introduction

Recent work on aligning LLMs has focused predominantly on tuning models to adhere to human preferences - commonly through reinforcement learning (RLHF; Stiennon et al. ) or directly via offline supervision (DPO; Rafailov et al. ). Preference learning algorithms [20; 55; 58] were originally designed to use a dataset of pairwise preferences over candidates to train a model with high _ranking accuracy_ - that is, the model can precisely rank preferred outputs over dispreferred ones. In the case of language models, the ranking is determined by the likelihood assigned to each candidate.

Many LLM alignment techniques are designed to yield models with a high preference ranking accuracy, including SLiC [68; 67], RAFT , PRO , and RRHF . Most prominently, Rafailov et al.  claimed that their popular direct preference optimization (DPO) algorithm "increasesthe relative log probability of preferred to dispreferred response." It is standard to evaluate these various objectives by measuring how often the resulting model's generations are preferred over another model's (i.e., a _win rate_) . However, the relationship between the loss, ranking accuracy, and win rate is unclear, leaving open the question of what these alignment techniques are actually accomplishing during training.

In this work, we demonstrate that RLHF and DPO struggle to increase ranking accuracy in practice and explore both the theoretical and empirical reasons why. Our findings highlight an intricate relationship between offline optimization and online behavior, and motivate the need for more fine-grained analyses of preference training dynamics. Our contributions are as follows:

1. **Existing models do not achieve high ranking accuracies.** We demonstrate that a wide variety of open-access preference-tuned LLMs (e.g., Llama 2 7B Chat, Gemma 7B IT, and Zephyr 7B DPO) achieve a ranking accuracy below \(60\%\) across a range of validation splits from commonly used preference datasets, such as UltraFeedback , Anthropic helpfulness and harmlessness (HH-RLHF, ), and Stanford Human Preferences (SHP, ) (Figure 1). Although we do not advocate for ranking accuracy as a measure of model quality, we analyze LLMs' ranking accuracies nonetheless because (1) ranking accuracy has motivated the design of many preference learning algorithms, and (2) DPO directly optimizes for ranking accuracy (Theorem 3.1).
2. **Existing models exhibit a significant _alignment gap_ between the ranking accuracy they achieve and the accuracy achievable under idealized conditions.** We derive a simple formula (Theorem 3.1) for the _idealized ranking accuracy_ (i.e., the ranking accuracy achieved from training on ground-truth preference data and perfectly optimizing the DPO or RLHF objective). We observe that models suffer from a significant _alignment gap_ in that they achieve ranking accuracy far below the idealized ranking accuracy (Table 1, Figure 1).
3. **Preference learning rarely corrects incorrect rankings.** We prove theoretically that even mild ranking errors in the reference model can make it virtually impossible for DPO and its variants to correct the ranking (Theorem 4.1), and demonstrate that in practice, the rankings are rarely flipped (Fig. 2) and the reference model likelihoods generally determine the ranking accuracy (Fig. 3). Our results permit straightforward and efficient identification of hard-to-learn preference datapoints without any tuning.
4. **Ranking accuracy and win rate are closely correlated when the model is close to the reference model.** We observe that the ranking accuracy and win rate trend together when the model is close to the reference model during the early phase of alignment, but become anti-correlated once the model has moved too far away, adding to the ongoing discussion on the differences between on-policy and off-policy behaviors of preference-tuned LLMs.

Crucially, our work highlights fundamental flaws in RLHF and DPO that prevent the preference-tuned model from achieving a high ranking accuracy _even on the training dataset_.

## 2 Preliminaries

### Learning from Human Preferences

Preference DataHuman preference data typically takes the form of pairwise preferences. Each prompt \(x\) is paired with two possible continuations - \(y_{1}\) and \(y_{2}\). One or more human raters then annotate which continuation is preferred. When there are multiple raters, we use \((x,y_{1},y_{2})\) to denote the proportion of raters who prefer \(y_{1}\) over \(y_{2}\).1

**Definition 2.1** (Aggregated Preference Datapoint).: Consider a prompt \(x\) with two possible continuations \(y_{1}\) and \(y_{2}\) and the proportion of raters \((x,y_{1},y_{2})\) who preferred \(y_{1}\) over \(y_{2}\). Then, the aggregated preference datapoint for each prompt \(x\) is denoted \((x,y_{w},y_{l})\) where \(y_{w}\) is the completion preferred by the majority of voters.

We note that at the time of writing, the vast majority of datasets either use a single rater  or only release aggregated preference data [11; 26], so we often do not have access to \((x,y_{1},y_{2})\)A standard assumption is that the ground-truth human preferences obey the Bradley-Terry model (Assumption A.1).

Supervised Fine-Tuning (SFT)In the first step of the preference learning pipeline, the model is typically trained using the standard cross-entropy objective on some choice of offline instruction-tuning dataset(s). In some implementations , a variety of third-party datasets are selected, whereas in other implementations [47; 41; 43] the model is instead trained on the preferred continuations \((x,y_{w})\) from the same preference learning dataset that is used in downstream preference learning. The resulting model is often used as a _reference model_, denoted as \(_{}\) or \(_{}\), and it typically serves as the initialization when learning from human preferences.

Reinforcement Learning from Human Feedback (RLHF)Learning from human feedback originally required using reinforcement learning . In this setting, the possible continuations for each prompt are sampled from a reference model (i.e., \((y_{w},y_{l})_{}( x)\)) and then annotated and aggregated to create a preference dataset \(\). Then, one frames the problem as binary classification between the two continuations and trains a reward model \(r_{}(x,y)\) to minimize \(_{R}(r_{},)=-_{(x,y_{w},y_{l})}[(r_{}(x,y_{w})-r_{}(x,y_{l}))]\). Finally, one trains the model \(_{}\) to maximize the reward without straying too far from the reference model \(_{}\). Because sampling generations from the model is non-differentiable, it is common to use PPO to maximize the reward \(r(x,y)=r_{}(x,y)-(_{}(y x)-_{}(y x ))\), where \(>0\) is a regularization coefficient designed to prevent the model from straying too far from its initialization.

Preference Learning with DPORafailov et al.  demonstrated that one can avoid using PPO by reparametrizing the objective to operate over policies instead of over rewards. Then, one can minimize the differentiable DPO objective.

**Definition 2.2** (DPO Objective ).: Let \(\) be the sigmoid function and \(>0\) be a hyperparameter. Then, the DPO objective for an aggregated preference dataset \(\) and a reference model \(_{}\) is defined as

\[_{}(_{},_{}) =-,y_{l})}{} (y_{w} x)}{_{ }(y_{w} x)}-(y_{l} x)}{_{ {Ref}}(y_{l} x)}}\] \[=-,y_{l})}{} (y_{w} x)}{_{ }(y_{l} x)}}_{}+}(y_{l} x)}{_{}(y_{w} x)}}_{}\]

We denote the DPO loss on the aggregated datapoint \((x,y_{w},y_{l})\) as \(_{}(x,y_{w},y_{l};_{},_{})\).

### Evaluation Metrics

Evaluating the alignment of a preference-tuned LLM is both under-specified and multi-dimensional. Many knowledge-based and logic-based benchmarks (e.g. MMLU, GLUE, BIG-Bench, HELM) already exist, but these benchmarks largely fail to capture nuanced aspects of human preference, such as helpfulness or harmlessness . As such, one standard evaluation is to ask human or machine raters how often the model produces a favorable completion compared to a baseline (_i.e._, win rate). Human win rate is the gold standard but is costly to compute and can be biased based on size and nature of the worker pool [19; 25]. Rating completions using another LLM (e.g., MT-bench) can be cheaper but similarly suffers from various biases [39; 69; 62], and several studies have revealed failures in many LLM judges to identify violations of instruction-following [66; 29]. Nevertheless, since win rate evaluations are so prevalent, we compare ranking accuracy against win rate in Sec. 5 and describe when the former off-policy metric is correlated with the popular on-policy metric.

Besides the win rate, preference learning algorithms are also benchmarked by the frontier of the rewards versus the divergence from the initialization , which serves as a heuristic of how well the model can incorporate preference data without unlearning prior information. However, it is unclear how well rewards can describe the success of alignment.

As aforementioned, the current paper investigates the _ranking accuracy_, which is defined as follows:

**Definition 2.3** (Ranking Accuracy).: The ranking accuracy \(\) of a model \(_{}\) on an aggregated preference datapoint \((x,y_{w},y_{l})\) is defined as

\[(x,y_{w},y_{l};_{})=1&_{}(y_{w} x )_{}(y_{l} x)\\ 0&.\] (1)

Analogously, the ranking accuracy of policy \(_{}\) on a dataset \(=\{(x,y_{w},y_{l})\}\) is \((;_{})=_{(x,y_{w},y_{l})}(x,y_{w},y_{l};_{})\). In the rare case where a dataset has more than two outputs \(y\) per prompt \(x\), we use the generalized ranking accuracy definition stated in App. A.6. We do not advocate for ranking accuracy as a metric of model quality, but as a lens into the inner workings of common preference learning algorithms.

**Remark 2.4** (Lengths of Completions).: We note that \(y_{w}\) and \(y_{l}\) can have different lengths; for example, Singhal et al.  showed that \(y_{w}\) is usually longer. Length can deflate \(_{}(y_{w} x)\) and reduce the ranking accuracy. One can normalize the likelihoods by the length of the response, but the length-normalized ranking accuracy may not be meaningful in practice, because it is currently unclear how to sample from the length-normalized likelihood. For completeness, we report the ranking accuracies of both the unnormalized and normalized policies, denoted \(\) and \(}\), respectively.

**Remark 2.5** (Difference between Ranking Accuracy and Reward Accuracy).: For RLHF models and DPO models, the ranking accuracy is not equivalent to the reward accuracy (_i.e._, the metrics evaluated in RewardBench ). In the RLHF case, we are evaluating the ranking accuracy of the final policy rather than the reward model. In the DPO case, reward accuracy measures whether \((y_{w} x)}{_{}(y_{w} x)}> (y_{w} x)}{_{}(y_{w} x)}\) instead of whether \(_{}(y_{w} x)>_{}(y_{l} x)\). Since we ultimately sample from \(_{}\) rather than \((y x)}{_{}(y x)}\), we find the ranking accuracy to be of greater practical importance.

Moreover, we demonstrate that under very stringent conditions, minimizing the DPO objective results in a model with high ranking accuracy. We characterize the phenomenon on individual datapoints, as is the case throughout the paper, but note that Markov's inequality can be straightforwardly applied to extend the results to a low loss on the entire dataset.

**Proposition 2.6** (Sanity Check).: _Recall the definition of \(y_{w}\), \(y_{l}\) in Definition 2.1. If \(_{}(y_{w} x)_{}(y_{l} x)\) and \(_{}(x,y_{w},y_{l};_{},_{}) 0.6\), then \((x,y_{w},y_{l})=1\)._

This result, proved in App. A.1, requires the condition that the reference model already has the correct ranking, so it is unlikely to hold across all datapoints in practice and somewhat moot. The remainder of the paper focuses on more realistic settings where the reference model is imperfect.

## 3 The Alignment Gap

Prop. 2.6 showed that training a low DPO loss with a perfect reference model yields a model with perfect ranking accuracy. However, Fig. 0(a) shows that real-world reference models exhibit low ranking accuracies, which prompts us to study more realistic, imperfect reference models.

### Existing Reference Models Rarely Have Correct Rankings

Fig. 0(a) indicates that reference models rarely achieve high ranking accuracy on common preference datasets (except Synthetic Instruct GPT-J Pairwise), even though many were likely trained on the preferred completions (see Sec. 2.1). Many of the models do not have documented training data so we do not know which preference datasets, if any, are in-distribution. We also fine-tune several pretrained LLMs on the preferred completions (see App. B.1) and observe that ranking accuracy does not increase significantly.2 Based on our findings, we turn to the case of imperfect reference models.

### Idealized Ranking Accuracy

We showed above that empirically, reference models exhibit poor accuracy when ranking the plausible completions. However, the RLHF reward and DPO objective were formulated to ensure that themodel learns the preference dataset but does not move too far from the reference model \(_{}\), so there may be a limit on the possible accuracy of the preference-tuned model. Here, we formalize this intuition by studying what the optimal policies would be when perfectly optimizing DPO or RLHF with access to perfect data (i.e., true proportions of human preferences).3

**Theorem 3.1** (Simulating Perfect RLHF4).: _Fix a reference model \(_{}\) and an aggregated preference datapoint \((x,y_{w},y_{l})\). Assume the dataset includes the ground-truth human preferences: that is, \((x,y_{w},y_{l})=(y_{w} y_{l})\), and that these preferences obey the Bradley-Terry model (Assumption A.1). Let \(^{*}\) be the model resulting from perfectly optimizing the DPO or RLHF objective on \((x,y_{w},y_{l})\) as described in Section 2.1. Then, \(^{*}\) satisfies_

\[(y_{w} x)}{^{*}(y_{l} x)}=}(y_{w}  x)}{_{}(y_{l} x)}(,y_{l})}{1- (x,y_{w},y_{l})})^{1/}\] (2)

_where \((x,y_{w},y_{l})\) is the proportion of raters who preferred \(y_{w}\) over \(y_{l}\) and \(\) is a hyperparameter in the DPO and RLHF objectives._

**Remark 3.2**.: We prove this result in App. A.2. Note that deterministic preferences, i.e., \((x,y_{w},y_{l})=1\), should not be confused with settings that only report a single individual's preference, i.e., \((x,y_{w},y_{l})=1\). In the former, the optimal probability ratio is infinity. The latter requires a better estimate of \((y_{w} y_{l})\), e.g., more samples.

This result allows us to simulate the policy resulting from perfect optimization of either the RLHF or the DPO learning objective. As such, given a reference model \(_{}\) and preference dataset \(\), we can easily measure the _idealized ranking accuracy_ of a model. We prove this result in App. A.3.

**Corollary 3.3** (Idealized Ranking Accuracy).: _Given a reference model \(_{}\), the DPO or RLHF hyperparameter \(\), a dataset of aggregated preferences \(=\{(x,y_{w},y_{l})\}\) and their corresponding rater proportions \((x,y_{w},y_{l})\), the ranking accuracy of the optimum of the RLHF or DPO objective \(^{*}\) is given by_

\[^{*}(;_{})=*{}_{(x,y _{w},y_{l})}[[}(y_{w}  x)}{_{}(y_{l} x)}(,y_{l})}{1- (x,y_{w},y_{l})})^{1/}>1]]\] (3)

Figure 1: **Both reference and preference-tuned models exhibit low ranking accuracy on most preference datasets. Each point represents the length-normalized or non-length-normalized ranking accuracy of individual (1a) reference models (pre-trained or fine-tuned), or (1b) preference-tuned models (trained with DPO or RLHF). The random chance accuracy for each dataset is indicated with a black ‘X’. We sub-sample 1K examples from each dataset and use the test split when available. We describe datasets in B.2 and list all numbers in Tables 2, 3, and 4. For UltraFeedback, ranking accuracy is measured with exact match across all 4 outputs (see App. A.6).**

_where \([]\) is the indicator function. When computed on length-normalized likelihoods from \(}}\), we denote the idealized ranking accuracy as \(}^{*}\)._

### Measuring the Alignment Gap

Given access to \(_{}\), \(\), and the \((x,y_{w},y_{l})\) values for each triple \((x,y_{w},y_{l})\) in a given preference dataset, we can compute the idealized ranking accuracy from Eq. 3.5 The results are shown in Table 1 and further details are given in App. B.4.

We identify several surprising findings. Firstly, even under ideal conditions (_i.e._ perfectly optimizing the objective on ground-truth preference data), the idealized ranking accuracy is still sometimes below \(100\%\). This distance varies with the choice of \(\), which indicates that the limits of DPO/RLHF depend largely upon how strong the reliance on \(_{}\) is. Furthermore, we find that many state-of-the-art models do not achieve a ranking accuracy anywhere close to the idealized ranking accuracy, exhibiting alignment gaps ranging from 19 to 59 percentage points (measured to the median idealized \(\) or \(}\)).

## 4 Understanding Ranking Accuracy with DPO

We now turn to the training objectives to account for the alignment gap. We focus our analysis on the DPO objective (Definition 2.2), because its failure to achieve high ranking accuracy is especially surprising (Table 1). In particular, DPO directly maximizes the reward margin between preferred-dispreferred pairs over an offline dataset so we would expect it to perform well on in-distribution held-out data. We also note that DPO is a popular choice in the community for aligning LLMs, because it is less costly than performing RLHF.

In this section, we study real-world characteristics of DPO. First, we show empirically that DPO rarely flips the ranking of the two continuations. This result combined with the observation that reference models exhibit poor ranking accuracy (Sec. 3.1) provides an explanation for the observed poor ranking accuracies in Table 1. We then formally characterize how hard it is for DPO to correct the ranking of each datapoint.Our result highlights how the reference model conditions the optimization: as the reference model log-ratio (Definition 2.2) grows larger, one has to reduce the DPO loss to a dramatically small value to flip the incorrect ranking (Fig. 3).

### DPO Rarely Flips Preference Rankings

To study how ranking accuracy changes over the course of DPO training, we train three sizes of models (GPT-2 , Pythia 2.8B , and Llama 2-7B ) across three seeds each on the Anthropic HH-RLHF  preference dataset and study the ranking accuracy on different partitions of the training dataset. We present the results from training one seed of Pythia 2.8B in Fig. 2, and defer training

    Preference-Tuned \\ Model \\  } &  &  \\   & \(}\) & \(}^{*}\) & \(\) & \(^{*}\) \\  & & (Min./Med./Max.) & & (Min./Med./Max.) \\  Zephyr-7B-DPO & 54\% & 86\% / 98\% / 100\% & 42\% & 90\% / 99\% / 100\% \\ Tulu-2-DPO-7B & 53\% & 87\% / 97\% / 100\% & 42\% & 91\% / 99\% / 100\% \\ Google-Gemma-7B-IT & 54\% & 73\% / 73\% / 97\% & 40\% & 67\% / 93\% / 100\% \\ LLAMA-2-7B-Chat-HF & 53\% & 87\% / 97\% / 100\% & 40\% & 91\% / 99\% / 100\% \\   

Table 1: **The idealized ranking accuracy of existing algorithms is not perfect, but preference-tuned models exhibit ranking accuracies far even from this idealized case. We provide both the length-normalized (\(}\)) and non-length-normalized (\(\)) ranking accuracies for a variety of open-access preference-tuned models on the Alpaca Farm  validation dataset (described in App. B.2). We also provide the idealized ranking accuracy (\(^{*}\) or \(}^{*}\), Corollary 3.3). Since idealized ranking accuracy can be computed with a variety of values of \(\), we provide the minimum, median, and maximum idealized ranking accuracy values for a range of \(\). For more details, see App. B.4.**details to App. C.1 and results on the other two models to App. C.2. In Fig. 2, we partition a random subsample of 1K examples from the training dataset into four groups based on whether the reference model \(_{}\) had the correct ranking and whether the current model \(_{}\) has the correct ranking.

Surprisingly, Fig. 2 demonstrates that DPO rarely flips the ranking of \((y_{w},y_{l})\) over the course of training despite consistently reducing the loss \(_{}\). Aside from the group of points for which the model unlearns the correct preference ranking, we observe that the loss decreases and the reward margin increases consistently while training. However, **at the point of lowest validation loss (marked by the vertical dashed line in Fig. 2c), less than \(10\%\) of the originally incorrectly ranked points have been flipped to have the correct ranking**. Past this point, the model begins to overfit (_i.e._, the validation loss begins to increase). DPO does not substantially improve the ranking accuracy until far past the point of overfitting. Although Theorem 3.1 predicts that the theoretically optimal DPO model exhibits high ranking accuracy, in practice the empirical endpoint of training occurs far from the theoretical optimum. This indicates that the DPO objective is ill-formulated to induce a high ranking accuracy in practice.

### Analysis: How Easy Is It To Flip A Ranking?

In the result below, we show that the DPO loss can decrease substantially without any improvement on the ranking accuracy of the model. Specifically, the DPO loss that the model needs to reach in order to have the correct ranking on an example \((x,y_{w},y_{l})\) depends on the quality of the reference model, quantified by the reference model log-ratio. This dependence is highly ill-conditioned, whereby using a reference model with moderately incorrect likelihoods assigned to each continuation can effectively prevent DPO from learning the correct ranking.

**Theorem 4.1**.: _Consider an aggregated preference datapoint \((x,y_{w},y_{l})\) such that the reference model log-ratio is some constant \(c\), i.e. \(}(y_{l}|x)}{_{}(y_{w}|x)}=c\). Then, \((x,y_{w},y_{l})=1\) if and only if \(_{}(x,y_{w},y_{l})-( c)\), where \(\) is the sigmoid function._

**Remark 4.2**.: It is straightforward to extend our analysis to popular variants of DPO. For illustration, we prove an analogous result for identity preference optimization (IPO, Azar et al. ) in App. A.5.

We prove this result in App. A.4. Our theoretical result allows us to formally identify the points that will be hard to flip in their rankings. Fig. 3 visualizes the reference model log-ratio for several settings and highlights that datapoints with even mild ranking errors in the reference model will require the loss to be reduced to a very low value in order to flip the ranking. App. E contains examples of hard

Figure 2: **Despite continuously decreasing the loss, DPO rarely flips the rankings of pairs before the point of overfitting (marked by the vertical dashed line) and instead mostly increases the reward margin of already correctly ranked pairs. We train a Pythia-2.8B model for 5 epochs using the DPO objective and categorize the training dataset into four subsets – examples that initially have the correct ranking and are flipped to (1) correct or (2) incorrect, and examples that initially have the incorrect ranking and are flipped to (3) correct or (4) incorrect. In all three figures, the hue of the point indicates the category. The dashed vertical line indicates the training step at which the lowest eval. loss occurs. Past this point, the model begins to overfit (_i.e._, the eval. loss starts to increase). We also present results for two other models with three seeds each in Appendix C.**

to-learn, easy-to-learn, and easy-to-flip datapoints. We observe that the hard-to-learn datapoints are substantially longer than the easy ones, and that the easy datapoints generally contain less ambiguous preference annotations. More generally, our result motivates the use of stronger \(_{}\) models and iterative or on-policy variants of DPO .

## 5 Ranking Accuracy and Win Rate

Our results on ranking accuracy illuminate how well DPO and RLHF can align to preference data, but we have not yet related these insights to how the generative behavior of the model changes during alignment. In particular, ranking accuracy is a convenient but off-policy metric and is thus not as widely adopted as the on-policy metric of win rate (see Sec. 2.2). Indeed, one could maximize the ranking accuracy by learning a strong classifier on the preference data, but that model may not generate high-quality text. Here, we explore the gap between on-policy (i.e., generative) and off-policy (i.e., classification) behaviors of LLMs through the lens of ranking accuracy and win rate. Since the DPO objective directly optimizes for ranking accuracy (Proposition 2.6), the relationship between these two metrics is a direct reflection of how off-policy training affects on-policy behavior.

We study the relationship between win rate and ranking accuracy in two settings: (1) during DPO training, and (2) in a DPO variant modulating the influence of \(_{}\). We measure the win rate on 500 responses to prompts from the training dataset using the Alpaca Eval GPT-4  auto-annotator.

Setting 1: DPO Training.We measure the win rate and the ranking accuracy of a Pythia 2.8B model  during DPO training with the same configuration as in Section 4. See Fig. 9 for the results.

Setting 2: Attenuating the reference model.Theorem 4.1 showed that \(_{}\) exerts a negative influence on the ranking accuracy in most cases, so we design a new objective that scales the reference model log-ratio in \(_{}\) to further characterize how win rate and ranking accuracy relate.

\[_{DPO}^{}(_{},_{})=- }_{(x,y_{w},y_{l})}[(((y_{w} x)}{_{}(y_{l} x)}+}(y_{l} x)}{_{}(y_{w} x)}))]\] (4)

Note that \(_{}^{}=_{}\) (Definition 2.2) when \(=1\), and a larger value of \(\) increases the role of the reference model. Also, \(\) directly scales \(c\) in Theorem 4.1, thereby controlling how easy it is to fit the data and increase the ranking accuracy. We train a range of Pythia-2.8B models using the \(_{DPO}^{}\) objective for \(\{0,0.25,0.5,0.75,1.0,1.25,1.5,1.75,2.0\}\) and measure the ranking accuracies and win rates of the best model for each \(\) value.6

Figure 3: **DPO loss alone does not predict ranking accuracy, due to the influence of the reference model log-ratio in the loss.** Each point represents the DPO loss on a separate training example \((x,y_{w},y_{l})\) from a subsample of 1K examples from the training dataset, using the model \(_{^{*}}\) that corresponds to the checkpoint with the lowest validation loss. The color of each point indicates whether \(_{^{*}}\) achieves the correct ranking on that example, _i.e._, whether \(_{^{*}}(y_{w}|x)>_{^{*}}(y_{l}|x)\). The dashed line is the function \(f(c)=-( c)\), from Theorem 4.1. In summary, the examples that \(_{^{*}}\) classifies correctly tend to be those that were already classified correctly by the reference model. Results for the other two seeds of each model are given in Fig. 8.

Takeaway: Ranking accuracy correlates with win rate when the model is close to the reference model.In both settings, we observe that the win rate and ranking accuracy are highly correlated with one another in the early phase of training but become anti-correlated (i.e., ranking accuracy increases but win rate declines) as the model \(_{}\) moves away from the reference \(_{}\) (Fig. 4). Unlike traditional overfitting, the test loss is continuing to decline at this point (Fig. 8(b)). Experiments in Fig. 10 with the attenuated objective in Equation (4) further show that ranking accuracy and win rate trend together when the influence of the reference model is stronger (i.e., \(\) is larger).

We speculate that when the model is far from the reference model, overly optimizing the reward margin can harm the generative capabilities of the model, which are primarily acquired during pre-training. In other words, the off-policy behavior of the model can no longer predictably describe the on-policy generations when the reference model used in the offline objective is far from the current model. Our findings confirm the fundamental tradeoff between fitting the preference data and maintaining generative capabilities acquired during pre-training  and align with prior observations that adding on-policy preference data can make offline learning more effective [50; 65; 24; 53].

## 6 Related Work

Analyses of Preference Learning AlgorithmsMany works have investigated the role of the preference dataset [56; 61], the reliability of the evaluations [69; 29], and the confounding factor of response length [45; 10; 57; 37]. Theoretical works have unified the many preference learning algorithms into clear taxonomies that permit analysis and, sometimes, yield new variants [2; 61; 48; 50; 63; 34]. Several works study idiosyncrasies of preference learning, such as why DPO decreases the likelihood of both rejected and chosen outputs from the dataset [42; 13; 35] and why RLHF exhibits vanishing gradients . In contrast, our work approaches understanding DPO and RLHF through the lens of ranking accuracy, and our findings emphasize the role of the reference model regularization in preference learning. Relatedly, SliC-HF , CPO , and pairwise crime loss  optimize log probability margins \((y_{w}|x)-(y_{l}|x)\), effectively removing the regularization toward the reference model. Liu et al.  recommend using the reference model at inference time to exert more granular control over the regularization. Meng et al.  remove the \(_{}\) terms altogether and use a target reward margin to prevent over-optimization. Additionally, Chennakesavalu et al.  design a DPO-like objective that includes an additional hyperparameter controlling the strength of the \(_{}\) terms, similar to our \(_{DPO}^{}\) objective (Eq. 4). Tang et al.  also analyze the role of regularizing toward a reference model, though our work focuses the effect of this regularization on ranking accuracy.

On-policy and Off-policy Preference LearningPreference-tuning LLMs originally required using an on-policy algorithm , but many recent works have derived off-policy methods that can use a static preference dataset for supervision [41; 12; 18; 37]. Off-policy methods are preferred for their efficiency and ease of implementation, but several works have suggested that on-policy methods

Figure 4: **When the model weights have not travelled far from \(_{}\), ranking accuracy and win rate increase together. \(_{t}\) represents the model weights at checkpoint \(t\) during DPO training, and \(_{}\) represents the weights for a model trained to convergence with \(_{}^{}\).**

are superior [48; 61; 49; 31]. Several iterative training methods aim to bridge this gap, where the reference model and the dataset are refreshed during the alignment procedure to contain annotated preferences on generations from the model at that point in training [65; 24; 53]. These intuitions align strongly with our observation that win rate and ranking accuracy, and thus, on-policy and off-policy behavior, are strongly correlated when the model is close to the reference model.

## 7 Discussion

Our work highlights the significant but nuanced relationship between preference learning and ranking accuracy. We have demonstrated both theoretically and empirically that RLHF and DPO struggle to teach the model to correctly rank preferred and dispreferred outputs, even in the training dataset. Although the learning objective promotes high ranking accuracy in theory (Proposition 2.6), we observed a prominent _alignment gap_ resulting from the poor conditioning of reference models. We then drew connections between the off-policy nature of ranking accuracy and the on-policy evaluations of win rate, identifying specific scenarios in which on-policy behavior can or cannot be reliably predicted by off-policy behavior. App. 8 details the limitations of our work.

Connections to SafetyOur work shows that it is difficult to steer pre-trained LLMs to adhere to even the preference data used for training. When LLMs are used to judge responses from other models [30; 69] or to improve their own abilities [33; 65], poor ranking accuracies can induce strong negative feedback loops that are costly to mitigate.

We also observe that win rate does not monotonically increase during training (Fig. 9a), despite the decrease in both train and test loss (Fig. 9b) and the modest gain in ranking accuracy (Fig. 9a). As such, it is clear that we still do not understand the behaviors of preference learning. For example, others have observed that DPO can cause the likelihoods of both chosen and rejected outputs to decrease [42; 13; 35; 36], which implies that the policy must be moving probability mass to possibly undesirable sequences outside the data distribution. Moreover, our investigation of the non-monotonic relationship between ranking accuracy and win rate emphasizes the need for concrete evaluations that can more reliably and transparently measure the success of preference learning.

Future WorkOur theoretical results only describe the behavior of the model on the preference data used during training, but they can serve as a starting point for understanding generalization to different distributions of data, especially the one prescribed by the model itself . Furthermore, we hope to analyze the optimization dynamics of preference learning, given the intriguing relationship observed between ranking accuracy and win rate. For instance, identifying when the win rate begins to diverge from the ranking accuracy can motivate adding fresh on-policy training data. Our initial investigation into ranking accuracy also suggests that it is worthwhile to explore how alignment techniques interact with other calibration metrics.

## 8 Limitations

Although we reproduce our main results (Sec. 4) on three types of models across three seeds each, these models are trained on a single dataset due to the computational constraints. Our theoretical results lead us to believe that our findings would generalize to other datasets, but empirical verification is still valuable. As mentioned previously, our work is optimization-agnostic and only describes model behavior on the training dataset, making it difficult to draw general claims about other distributions. In particular, we cannot rigorously describe the generative capabilities, though Sec. 5 initiates an investigation into when off-policy behavior can describe on-policy behaviors.

Acknowledgements

We thank Sanjeev Arora, Tianyu Gao, Eric Mitchell, Richard Pang, and Mengzhou Xia for helpful discussions during the development of this project. We also thank Nikita Nangia, Eshaan Nichani, and Alexander Wettig for their help in proofreading the work. This work was supported by National Science Foundation Award 1922658, the Samsung Advanced Institute of Technology (under the project Next Generation Deep Learning: From Pattern Recognition to AI), NIH/NHLBI Award R01HL148248, NSF CAREER Award 2145542, ONR N00014-23-1-2634, Apple, and Google. SM is additionally supported by ONR, NSF, and DARPA. We also thank Princeton Language and Intelligence (PLI) for computing resources and OpenAI credits, and NYU High Performance Computing (HPC) for computing resources and in-kind support.