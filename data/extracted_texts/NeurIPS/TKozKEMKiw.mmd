# Interpretable Decision Tree Search as a Markov Decision Process

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

Finding an optimal decision tree for a supervised learning task is a challenging combinatorial problem to solve at scale. It was recently proposed to frame this problem as a Markov Decision Problem (MDP) and use deep reinforcement learning to tackle scaling. Unfortunately, these methods are not competitive with the current branch-and-bound state of the art. Instead, we propose to scale the resolution of such MDPs using an information-theoretic _tests generating function_ that heuristically, and dynamically for every state, limits the set of admissible test actions to a few good candidates. As a solver, we show empirically that our algorithm is at the very least competitive with branch-and-bound alternatives. As a machine learning tool, a key advantage of our approach is to solve for multiple complexity-performance trade-offs at virtually no additional cost. With such a set of solutions, a user can then select the tree that generalizes best and which has the interpretability level that best suits their needs, which no current branch-and-bound method allows.

## 1 Introduction

Decision trees (DTs) remain the dominant machine learning model in applications where interpretability is essential (Costa and Pedreira, 2023). Thanks to recent advances in hardware, a new class of decision tree learning algorithms returning optimal trees has emerged (Bertsimas and Dunn, 2017; Demirovic et al., 2022; Mazumder et al., 2022). These algorithms are based on a branch-and-bound solver that minimizes a regularized empirical loss, where the number of nodes is used as a regularizer. These optimization problems have long been known to be NP-Hard (Hyafil and Rivest, 1976) and despite hardware improvements, solvers of such problems do not scale well beyond trees of depth 3 when attributes take continuous values (Mazumder et al., 2022). On the other hand, greedy approaches such as CART (Breiman et al., 1984) are still considered state-of-the-art decision tree algorithms because they scale and offer more advanced mechanisms to control the complexity of the tree. By framing decision tree learning as a sequential decision problem, and by carefully controlling the size of the search space, we achieve in this paper a best of both worlds, solving the combinatorial optimization problem with accuracies close to optimal ones, while improving scaling and offering a better control of the complexity-performance trade-off than any existing optimal algorithm.

To do so, we formulate the problem of decision tree learning as a Markov Decision Problem (MDP, (L. Puterman, 1994)) for which the optimal policy builds a decision tree. Actions in such an MDP include tests comparing an attribute to a threshold (a.k.a. splits). This action space could include _all_ possible splits or a heuristically chosen subset, yielding a continuum between optimal algorithms and heuristic approaches. Furthermore, the reward function of the MDP encodes a trade-off between the complexity and the performance of the learned tree. In our work, complexity takes the meaning of simulatability (Lipton, 2018), i.e. the average number of splits the tree will perform on the train dataset. The MDP reward is parameterized by \(\), trading-off between train accuracy and regularization. Oneof the main benefits of our formulation is that the biggest share of the computational cost is due to the construction of the MDP transition function which is completely independent of \(\), allowing us to find optimal policies for a large choice of values of \(\) at virtually no additional cost.

Branch-and-Bound (BnB) algorithms similarly optimize a complexity performance trade-off (Demirovic et al., 2022; Mazumder et al., 2022) but require the user to provide the maximum number of test nodes as an input to their algorithm. Providing such a value a priori is difficult since a smaller tree (e.g. with 3 test nodes) might be only marginally worse on a given dataset than a larger tree (e.g. with 15 test nodes) with respect to the training accuracy but might generalize better or be deemed more interpretable a posteriori by the user. As such, it is critical to consider the multi-objective nature of the optimization problem and seek algorithms returning a set of trees that are located on the Pareto front of the complexity-performance trade-off. To the best of our knowledge, this has been so far neglected by BnB approaches. _None of the BnB implementations return a set of trees for different regularizer weights_ unlike greedy algorithms like CART or C4.5 that can return trees with different complexity-performance trade-offs using minimal complexity post-pruning (Breiman et al., 1984), making it a more useful machine learning tool in practice.

## 2 Related Work

### Optimal Decision Trees.

Decision tree learning has been formulated as an optimization problem in which the goal is to construct a tree that correctly fits the data while using a minimal number of splits. In (Bertsimas and Dunn, 2017; Aghaei et al., 2020; Verwer and Zhang, 2019), decision tree learning is formulated as a Mixed Integer Program (MIP). Instead of using a generic MIP solver, (Demirovic et al., 2022; Mazumder et al., 2022) design specialized solvers based on the Branch-and-Bound (BnB) principle. Quant-BnB (Mazumder et al., 2022) is currently the latest work in this line of research for datasets with continuous attributes and is considered state-of-the-art. However, direct optimization is not a convenient approach since finding the optimal tree is known to be NP-Hard (Hyafil and Rivest, 1976). Despite hardware improvements, Quant-BnB does not scale beyond trees depth of 3. To reduce the search space, optimal decision tree algorithms on binary datasets, such as MurTree, Blossom and Pystreed (Demirovic et al., 2022; Demirovic et al., 2023; van der Linden et al., 2023), employ heuristics to binarize a dataset with continuous attributes during a pre-processing step following for example the Minimum Description Length Principle (Rissanen, 1978). The tests generating function of our MDP formulation is similar in principle except that it is state-dependent, which, as demonstrated experimentally, greatly improves the performance of our solver.

### Greedy approaches.

Greedy approaches like CART iteratively partition the training dataset by taking the most informative splits in the sense of the Gini index or the entropy gain. CART is only one-step optimal but can scale to very deep trees. This might lead to overfitting and algorithms such as Minimal Complexity Post-Pruning (see Section 3.3 from (Breiman et al., 1984)) iteratively prune the deep tree, returning a set of smaller trees with decreasing complexity and potentially improved generalization. The trees returned by our algorithms provably dominate--in the multi-objective optimization sense--all the above smaller trees in terms of train accuracy vs. average number of tests performed, and we experimentally show that they often generalize better than the trees returned by CART.

### Markov Decision Problem formulations.

In (Topin et al., 2021), a base MDP is extended to an Iterative Bounding MDP (IBMDP) allowing the use of any Deep Reinforcement Learning (DRL) algorithm to learn DT policies solving the base MDP. While more general and scalable, this method is not state-of-the-art for learning DTs supervised learning tasks. Prior to IBMDPs, (Garlapati et al., 2015) formulated the learning of DTs for classification tasks with ordinal attributes as an MDP. To be able to handle continuous features, (Nunes et al., 2020) used Monte-Carlo tree search (Kocsis and Szepesvari, 2006) in combination with a tests generating function that limits the branching factor of the tree. Our MDP formulation is different as it considers a regularized objective while (Nunes et al., 2020) optimize accuracy on a validation set. Our tests generating function is also different and dramatically improves scaling as shown in the comparison of Sec. 5.1.1, making our algorithm competitive with BnB solvers, while (Nunes et al., 2020) only compared their algorithm against greedy approaches. A comparison of our method with other MDP approaches is presented in the supplementary material.

### Interpretability of Decision Trees.

The interpretability of a decision tree is usually associated with its complexity, e.g. its depth or its total number of nodes. For trees with 3 to 12 leaves, (Piltaver et al., 2016) observed a strong negative correlation between the number of leaves in a tree and a "comprehensibility" score given by users. Most of the literature considers the total number of test nodes as its complexity measure, but other definitions of complexity exist. (Lipton, 2018) coined the term _simulatability_, which is related to the average number of tests performed before taking a decision. This quantity naturally arises in our MDP formulation. We show in a qualitative study that both criteria are often correlated but on some datasets, DPDT returns an unbalanced tree with more test nodes that are only traversed by a few samples.

## 3 Decision Trees for Supervised Learning

Let us consider a training dataset \(=\{(x_{i},y_{i})\}_{i\{1,...,N\}}\), made of (data, label) pairs, \((x_{i},y_{i})(X,Y)\), where \(X^{p}\). A decision tree \(T\) sequentially applies tests to \(x_{i} X\) before assigning it a value in \(Y\), which we denote \(T(x_{i}) Y\). The tree has two types of nodes: test nodes that apply a test and leaf nodes that assign a value in \(Y\). A test compares the value of an attribute with a given threshold value, \(x_{,2} 3^{}\). In this paper, we focus on binary decision trees, where decision nodes split into a left and a right child with axis aligned splits as in (Breiman et al., 1984). However, all our results generalize straightforwardly to tests involving functions of multiple attributes. Furthermore, we look for trees with a maximum depth \(D\), where \(D\) is the maximum number of tests a tree can apply to classify a single \(x_{i} X\). We let \(_{D}\) be the set of all binary decision trees of depth \( D\). Given a loss \(\) defined on \(Y Y\) we look for trees in \(_{D}\) satisfying

\[T^{} =*{argmin}_{T_{D}}_{ }(T),\] (1) \[=*{argmin}_{T_{D}}^{N}}(y_{i},T(x_{i}))+ C(T),\] (2)

where \(C:\) is a function that quantifies the complexity of a tree. It could be the number of nodes as in (Mazumder et al., 2022). In our work, we are interested in the expected number of tests a tree applies on any arbitrary data \(x\). As for \(\), in a regression problem \(Y\) and \((y_{i},T(x_{i}))\) can be \((y_{i}-T(x_{i}))^{2}\). For supervised classification problems, \(Y=\{1,...,K\}\), where \(K\) is the number of class labels, and \((y_{i},T(x_{i}))=_{\{y_{i} T(x_{i})\}}\). In our work, we focus on supervised classification but the MDP formulation extends naturally to regression.

## 4 Decision Tree Learning as an MDP

Our approach encodes the decision tree learning problem expressed by Eq. (2) as a finite horizon Markov Decision Problem (MDP) \( S,A,R_{},P,D\). We present this MDP for a supervised classification problem with continuous features, but again, our method extends to regression and to other types of features. The state space of this MDP is made of subsets \(X\) of the dataset \(\) as well as a depth value \(d\): \(S=\{(X,d) P()\{0,...,D\}\}\), where \(P()\) is the power set of \(\). Let \(=\{f:f(.)=_{\{ x_{ij}\}}, i\{1,...,N\}, j\{1,...,p\}\}\) be a set of binary functions. We consider only tests that compare attributes to values within the dataset because comparing attributes to other values cannot further reduce the training objective. The action space \(A\) of the MDP is then the set of all possible binary tests as well as class assignments: \(A=\{1,...,K\}\). When taking an action \(a\), the MDP will transit from state \((X,d)\) to either its "left" state \(s_{l}=(X_{l},d+1)\) or its "right" state \(s_{r}=(X_{r},d+1)\). In particular the MDP will transit to \(s_{l}=(\{(x_{i},y_{i}) X:a(x_{i})=1\},d+1)\) with probability \(p_{l}=|}{|X|}\) or to \(s_{r}=(X X_{l},d+1)\) with probability \(p_{r}=1-p_{l}\). Furthermore, to enforce a maximum tree depth of \(D\), whenever a state is \(s=(.,D)\) then only class assignment actions are possible in \(s\). When taking an action in \(\{1,...,K\}\) the MDP will transit to a terminal state denoted \(s_{done}\) that is absorbing and has null rewards. The reward of taking an action \(a\) in state \(s\) is given by the parameterized mapping \(R_{}:S A\) that enforces a trade-off between the expected number of tests and the classification accuracy. It is defined by:

\[R_{}(s,a) =R_{}((X,d),a),\] \[=-,&a,\\ -_{y_{i} X}_{y_{i} a}&a \{1,...,K\}.\]

The complexity-performance trade-off is encoded by the value \(0 1\), which is the price to pay to obtain more information by testing a feature. A more detailed study of the trade-off is given in section 6.4. The maximum depth parameter \(D\) is a time horizon, i.e. the number of actions it is possible to take in one episode. An algorithm solving such an MDP can always return a deterministic policy (L. Puterman, 1994) of the form: \(:S A\) that maximizes the expected sum of rewards during an episode:

\[ =*{argmax}_{}J_{}(),\] (3) \[J_{}() =[_{t=0}^{D}\!R_{}(s_{t},(s_{ t}))],\] (4)

where the expectation is w.r.t. random variables \(s_{t+1} P(s_{t},(a_{t}))\) with initial state \(s_{0}=(,0)\).

**From deterministic policy to binary DT.** One can transform any deterministic policy \(\) of the above MDP into a binary decision tree \(T\) with a simple extraction routine \(E(,s)\), where \(s S\) is a state. \(E\) is defined recursively in the following manner. If \((s)\) is a class assignment then \(E(,s)\) returns a leaf node with class assignment \((s)\). Otherwise \(E(,s)\) returns a binary decision tree that has a test node \((s)\) at its root, and \(E(,s_{l})\) and \(E(,s_{r})\) as, respectively, the left and right sub-trees of the root node. To obtain \(T\) from \(\), we call \(E(,s_{0})\) on the initial state \(s_{0}=(,0)\).

**Equivalence of objectives.** When the complexity measure \(C\) of \(_{}\) is the expected number of tests performed by a decision tree, the key property of our MDP formulation is that finding the optimal policy in the MDP is equivalent to finding \(T^{*}\), as given by the following proposition

**Proposition 1**:: _Let \(\) be a deterministic policy of the MDP and \(^{*}\) one of its optimal deterministic policies, then \(J_{}()=-_{}(E(,s_{0}))\) and \(T^{*}=E(^{*},s_{0})\)._

The proof is given in the Appendix H.

## 5 Algorithm

We now present the Dynamic Programming Decision Tree (DPDT) algorithm. The algorithm is made of two essential steps. The first and most computationally expensive step constructs the MDP of Section 4. The second step is to solve it to obtain policies maximizing Eq.(4) for different values of \(\). Both steps are now detailed.

### Constructing the MDP

An algorithm constructing the MDP of Section 4 essentially computes the set of all possible decision trees of maximum depth \(D\) whose decision nodes are in \(\). This specific MDP is a directed acyclic graph. Each node of this graph corresponds to a state for which one computes the transition and reward functions. To limit memory usage of non-terminal nodes, instead of storing all the samples in \((X,d)\), we only store \(d\) and the binary vector of size \(N\), \(x_{bin}=(_{\{x_{i} X\}})_{i\{1,...,N\}}\). Even then, considering all possible splits in \(\) will not scale. We thus introduce a state-dependent action space \(A_{s}\), much smaller than \(A\) and populated by the tests generating function.

#### 5.1.1 Tests generating functions

A tests generating function is any function \(\) of the form \(:S P()\), where \(P()\) is the power set of all possible data splits \(\). For a state \(s S\), the state-dependent action space is defined by \(A_{s}=(s)\{1,...,K\}\). Because for a given state \(s\) we might have that \((s)\), solving the MDP with state-dependent actions \(A_{s}\) is not guaranteed to yield the minimizing tree in Eq. (2), as optimization is now carried on a subset of \(_{D}\). In this section, we compare different choices of \(\) on a sufficiently small dataset such that \((s)=, s S\) remains tractable. As a baseline, we use a tests generating function proposed in , and compare with our proposed \(\) in terms of quality of the best tree vs. size of the MDP.

**Exhaustive function.** When \((s)=, s S\), the MDP contains all possible data splits. In this case, the MDP'spans' all trees of depth at most \(D\) and the solution to Eq. (4) will be the optimal decision tree of Eq. (2). In this case, the number of states in the MDP would be of the order of \(_{d=0}^{D-1}K(2Np)^{d}\) which scales exponentially with the maximum depth of the tree: this limits the learning to very shallow trees (\(D 3\)) as discussed in . The goal of a more heuristic choice of \(\) is to have a maximal number of splits \(B=_{s S}|(s)|\) that is orders of magnitude smaller than that of the exhaustive case \(||=Np\) such that the size of the MDP, which is now in the order of \(_{d=0}^{D-1}K(2B)^{d}\), remains tractable for deeper trees.

**Top \(B\) most informative splits.** proposed to generate tests with a function that returns for any state \(s=(X,d)\) the \(B\) most informative splits over \(X\) in the sense of entropy gain. In practice, we noticed that the returned set of splits lacked diversity and often consists of splits on the same attribute with minor changes to the threshold value. While this still leads to improvements over greedy methods--as shown in the study presented next--it is at the expense of a much larger MDP, i.e., search space.

**Top \(B\) most discriminative splits.** Instead of returning the most informative splits, we propose at every state \(s=(X,d)\), to find the most discriminative splits, i.e. the attribute comparisons with which one can best predict the class of data points in \(X\). This is similar to the minimum description length principle used in  that transforms a dataset with continuous attributes to a binary dataset. However, we perform this transformation _dynamically_ at every state while building the MDP. In practice, this amounts to calling CART with a maximum depth \(D_{cart}\) (a hyperparameter of DPDT) on every state \(s\), and using the test nodes of the tree returned by CART as \((s)\).

While restricting the action space at a given state \(s\) to the actions of the tests generating function \((s)\) loses the guarantees of finding \(T^{*}\), we are still guaranteed to find trees better than those of CART:

**Proposition 2**:: _Let \(^{*}\) be an optimal deterministic policy of the MDP, where the action space at every state is restricted to the top \(B\) most informative or discriminative splits. Let \(T_{0}\) be the tree learned by CART and \(\{T_{1},,T_{M}\}\) be the set of trees returned by postprocessing pruning on \(T_{0}\), then for any \(>0\), \(_{}(E(^{*},s_{0}))_{0 i M}_{ }(T_{i})\)._

Figure 1: Comparison of DPDT algorithm on the Iris dataset in terms of the number of states in the MDP when using different tests generating functions. “TOP \(B\)” are tests function returning the \(B\) most informative splits for each state. “Exhaustive” returns all possible states (equivalent to the search space of Quant-BnB). DPDT-\(D_{cart}\) are the tests functions that make calls to the CART algorithm.

The proof for Prop. 5.1.1 follows from the fact that policies generating the tree returned by CART and all of its sub-trees (which is a superset of the trees returned by the pruning procedure) are representable in the MDP and by virtue of the optimality of \(^{*}\) and the equivalence in Prop. 4, are worse in terms of regularized loss \(_{}\) than the tree \(E(^{*},s_{0})\). The consequences of Prop. 5.1.1 are clearly observed experimentally in Fig. 3. While this proposition holds for the latter two test generating functions, in practice, the tests returned by our proposed function are of much higher quality as discussed next.

**Comparing tests generating functions.** We conduct a small study comparing the exhaustive \(\) (labeled "Exhaustive") against the \(\) proposed in (Nunes et al., 2020) (labeled "Top B") and the one used in our algorithm (labeled "DPDT-K", where K is the maximum depth given to CART), on the Iris dataset. Figure 1 shows that while the latter two \(\) generalize the greedy approach (labeled "CART"), DPDT scales much more gracefully than when using the \(\) of (Nunes et al., 2020). With \(D_{cart}=4\), DPDT-4 finds the optimal tree in an MDP having several orders of magnitude less states (a few hundreds vs a few millions) than the one built using the exhaustive \(\). This favorable comparison against exhaustive methods also holds for larger datasets as shown in Sec. 6.2.

The MDP construction of DPDT-K using the tests generating function is explained in Alg. 1. Starting from \(s_{0}\), the state containing the whole dataset, CART with a maximum depth of K is called which generates a tree with up to \(2^{K}-1\) split nodes. These splits are what constitutes \(A_{s_{0}}\), the set of binary tests admissible at \(s_{0}\). For every such action, we compute the reward and transition probabilities to a set of new states at depth 1. This process is then iterated for every state at depth 1, calling CART with the same maximum depth of K on each of the states at depth 1, generating a new set of binary tests \(A_{s}\) for each of these states \(s\) and so on until reaching the maximum depth. Upon termination of Alg. 1, we compute the rewards for labelling actions at every state and we call the dynamic programming routine below to extract the optimal policy.

### Dynamic Programming

Having built the MDP, we backpropagate using dynamic programming the best optimal actions from the terminal states to the initial states. We use Bellman's optimality equation to compute the value of the best actions recursively:

\[Q^{*}(s,a) =[r_{d+1}+}{}Q^{*}(s_{d+1 },a^{})|s_{d}=s,a_{d}=a],\] \[=}{}P(s,a,s^{})[R(s,a)+ }{}Q^{*}(s^{},a^{})].\]

Pareto front.As our reward function is a linear combination of the complexity and performance measures, we can reach any tree "spanned" by the MDP that lies on the convex hull of the Pareto front of the complexity-performance trade-off. In DPDT, we compute the optimal policy for several choices of \(\) using a vectorial representation of the \(Q\)-function that now depends on \(\):

\[Q^{*}(s,a,)=}{}P(s,a,s^{})[R_{ }(s,a)+}{}Q^{*}(s^{},a^{},)].\]

We can then find all policies greedy w.r.t. \(Q^{*}^{*}(s,)=}Q^{*}(s,a,)\). Such policies satisfy Eq. (4) for any value of \(\). Given a set of values of \(\) in \(\), we can compute in a single backward pass \(Q^{*}(s,a,)\) and \(^{*}(s,)\) and return a set of trees, optimal for different values of \(\) (see Fig.7 for an illustrative example). In practice, the computational cost is dominated by the construction of the MDP 1 and one can promptly back-propagate the \(Q\)-values of over \(10^{3}\) values of \(\).

## 6 Experiments

In this section we study DPDT from different perspectives. First, in Sec. 6.2, we study DPDT in terms of its performance as a solver for the combinatorial optimization problem of Eq. (2). Here, we focus on smaller problems (maximum depth \( 3\)) in which the optimal solution can be computed by Branch-and-Bound (BnB) algorithms. In this first set of experiments, we only report the training accuracy vs. the wall-clock time as done in prior work (Mazumder et al., 2022). Then we study DPDTfor model selection (Sec. 6.3). From the perspective of the end user, a decision tree algorithm may be used for selecting either a tree that generalizes well to unseen data or a tree that is interpretable. We compare classification of unseen data of trees obtained by DPDT to other baselines described below. Then, we plot the train accuracy of trees learned by CART and DPDT as a function of their complexity to observe how a user can choose the complexity-performance trade-off. We use the 16 classification datasets with continuous attributes experimented with in (Mazumder et al., 2022).

When considering other optimal BnB baselines (Demirovic et al., 2022; van der Linden et al., 2023), two problems arise for fair comparison with DPDT in terms of model selection. First, to obtain a set of tree from such baselines, the optmization algorithms need to be ran as many times as trees wanted by the user. For example, one can obtain a set of trees of depth \( 5\) by running MurTree \(2^{5}\) times with different maximum number of test nodes allowed in the learned trees. This could require up to \(2^{5}\) times the runtime of a single optimization. Second, MurTree and Pystreed(Demirovic et al., 2022; van der Linden et al., 2023) require binary attributes. Learned trees are not comparable directly with trees trained on continuous attributes because each tree node testing a binary feature actually does at least two tests on the original continuous feature (see Appendix F.1 or Appendix D1 from (Mazumder et al., 2022)). DPDT is coded in Python and the code is available in the supplementary material. All experiments are run on a single core from a Intel i7-8665U CPU. All the links to code used for the baselines are given in the Appendix A

### Baselines

**Quant-BnB.**(Mazumder et al., 2022) propose a scalable BnB algorithm that returns optimal trees. We emphasize that _Quant-BnB is not meant to scale beyond tree depths of 3_ (explicitly stated in the Quant-BnB paper) and the authors' implementation of Quant-BnB does not support learning trees of depth \(>\) 3.

**MurTree,** Pystreed. To use (Demirovic et al., 2022; van der Linden et al., 2023) with continuous features datasets, the minimum length description principle is used to obtain bins in a continuous feature domain, then a one hot encoding is applied to binarize the binned dataset. This can result in datasets with more than \(500\) features. As MurTree and Pystreed memory scales with the square of number of binary attributes, using those algorithms to find trees of depths greater than \(3\) often results in _Out Of Memory_ (OOM) errors.

**Deep Reinforcement Learning.** We use Custard (Topin et al., 2021) as a DRL baseline. Custard has two hyperparameters: the DRL algorithm to learn a policy in the IBMDP and a tests generating function that gives p tests per feature. In our experiments, Custard-5 and Custard-3 correspond to DQN agents (Mnih et al., 2015) that can test each dataset attribute against 5 or 3 values respectively.

**CART**(Breiman et al., 1984) is a greedy algorithm that can build suboptimal trees for any dataset.

### Optimality gap

Because we use a tests generating function that heuristically reduces the search space, a first question we want to investigate is how good is our solver for the combinatorial problem of decision tree search. To do so, we focus on max depth 3 problems for which \(T^{*}\) can be computed exactly using Quant-BnB(Mazumder et al., 2022). As Quant-BnB has a different complexity regularization (number of nodes in the tree) than DPDT (average number of tests per classified data), we set the complexity regularizing term \(\) to 0 to allow direct comparisons. This does not create an artificial learning and on 14 out of 16 datasets, trees with \(=0\) generalize best, and second best on the remaining 2. That is because at depth 3 the risk of overfitting is small.

We run DPDT with calls to CART with maximum depth 4 or 5 as a tests generating function (DPDT-4 and DPDT-5 respectively). Quant-BnB is first run without a time limit to obtain optimal decision trees w.r.t. Eq.(2). Quant-BnB is also run a second time with a time limit equal to DPDT-5's runtime (we also added in the supplementary material results for Quant-BnB-\(T\)+5 and Quant-BnB-\(T\)+50 that add extra seconds to Quant-BnB-\(T\)). CART is run with the maximum depth set to 3 and the information gain based on entropy. All algorithms are run on the same hardware. Custard is run 5 times per dataset because it is a stochastic algorithm. We use stable-baselines3 implementation of DQN (Raffin et al., 2021) with default hyperparameters. A Custard run usually takes 10 minutes. We provide learning curves in Fig. 4. The key result from Table 1 is that DPDT-5 has better train accuracies than the 

[MISSING_PAGE_FAIL:8]

of tests. We can see that when CART does not generalize well, our method can have clear gains in generalization (e.g. avila, eeg and fault). Otherwise, when CART is close to 100% accuracy, our method can achieve similar results with less tests. In raisin, rice and room we need two fewer tests which is substantial when tests are expensive, e.g. an MRI scan when testing patients.

### Selecting the most interpretable tree

In this section, we show how a user can use DPDT to select a tree with complexity preferences. In Figure 3, we plot the trade-offs of trees returned by CART and DPDT. The trade-off is between accuracy and average number of tests. Because this is the trade-off that DPDT optimizes and because the trees of CART are "spanned" by the MDP created by DPDT, all trees returned by DPDT will dominate in the multi-objective sense trees returned by CART. This is well demonstrated in practice by Figure 3 where the curve of DPDT is always above that of CART. Learned trees and their accuracies as functions of number of nodes and tests are presented in Appendices 5 8 9. Finally, decision tree search being a combinatorial problem, there are always limits to scalability. In Appendix 6 we scale up to a tree depth of 10 by running DPDT-2 up to a depth of 6 then switch to DPTD-1 (i.e. greedy) thereafter. The rationale is that a non-greedy approach is more critical closer to the root.

## 7 Limitations, Future Work, and Conclusion

**Limitations.** In our opinion, both the strength and the weakness of DPDT come from the choice of the tests generating function. If the tests generating function generates too much tests in each MDP state, the runtime will grow and there is a risk for out-of-memory errors. This can be alleviated with parallelizing (expanding MDP states on different processes) and caching (only expand unseen MDP states), similar to (Demirovic et al., 2022). A rule of thumb for running DPDT on personal CPUs is to choose a tests generating function resulting in an MDP with at most \(10^{6}\) states.

**Future Work.** DPDT could scale to bigger datasets by combining Custard (Topin et al., 2021) with tests generating functions and tabular deep learning techniques (Kossen et al., 2021). The latter is a promising research avenue. The transformer-based architecture from (Kossen et al., 2021) takes a _whole_ train dataset as input and learns representations taking in account relationships between _all_ training samples and _all_ labels. Test actions are then the output of such a neural architecture: the tests generating function is _learned_.

**Conclusion.** In this work we solve MDPs whose optimal policies are decision trees optimizing a trade-off between tree accuracy and complexity. We introduced the Dynamic Programming Decision Tree algorithm that returns several optimal policies for different reward functions. DPDT has reasonable runtimes and is able to scale to trees with depth greater than 3 using information-theoretic tests generating functions. To the best of our knowledge, DPDT is the first scalable decision tree search algorithm that runs fast enough on continuous attributes to be an alternative to CART for model selection of any-depth trees. DPDT is a promising research avenue for new algorithms offering human users a greater control than CART over tree selection in terms of generalization performance and interpretability.

Figure 3: Complexity-performance trade-offs of CART and DPDT on two different classification datasets. CART returns a set of trees with the minimal complexity post-pruning algorithm. DPDT returns a set of trees by returning policies for 1000 different \(\).