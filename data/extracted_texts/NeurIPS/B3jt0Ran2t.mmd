# Probabilistic Analysis of Stable Matching in Large Markets with Siblings

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

We study a practical matching problem that involves assigning children to daycare centers. The collective preferences of siblings from the same family introduce complementarities, which can lead to the non-existence of stable matchings, as observed in the well-studied hospital-doctor matching problems involving couples. Intriguingly, stable matchings have been observed in real-world daycare markets, even with a substantial number of sibling applicants.

Our research systematically explores the presence of stable matchings in these markets. We conduct a probabilistic analysis of large random matching markets that incorporate sibling preferences. Specifically, we examine scenarios where daycares have similar priorities over children, a common characteristic in practical markets. Our analysis reveals that as the market size approaches infinity, the likelihood of stable matchings existing converges to 1.

To facilitate our investigation, we introduce significant modifications to the Sorted Deferred Acceptance algorithm proposed by Ashlagi et al. (2014). These adaptations are essential to accommodate a more stringent stability concept, as the original algorithm may yield matchings that fail to meet this criterion. By leveraging our revised algorithm, we successfully identify stable matchings in all real-life datasets examined. Additionally, we conduct comprehensive empirical investigations using synthetic datasets to validate the efficacy of our algorithm in identifying stable matchings.

## 1 Introduction

Stability is a foundational concept in preference-based matching theory (Roth and Sotomayor, 1990), with significant implications for both theoretical frameworks and practical applications (Roth, 2008). Its importance was underscored by the awarding of the 2012 Nobel Prize in Economics. This fundamental concept is crucial for the success of various markets, including the National Resident Matching Program (Roth, 1984) and public school choice programs (Abdulkadiroglu and Sonmez, 2003; Abdulkadiroglu et al., 2005).

Despite its significance, the challenge posed by complementarities in preferences often leads to the absence of a stable matching. A persistent issue in this context is the incorporation of couples into centralized clearing algorithms for professionals like doctors and psychologists (Roth and Peranson, 1999). Couples typically view pairs of jobs as complements, which can result in the non-existence of a stable matching (Roth, 1984; Klaus and Klijn, 2005). Moreover, verifying the existence of a stable matching is known to be NP-hard, even in restrictive settings (Ronn, 1990; McDermid and Manlove, 2010; Biro et al., 2014).

Nevertheless, real-life markets of substantial scale do exhibit stable matchings even in the presence of couples. For example, in the psychologists' markets, couples constituted only about \(1\%\) of allparticipants from 1999 to 2007. Kojima et al. (2013) and Ashlagi et al. (2014) demonstrate that if the proportion of couples grows sufficiently slowly compared to the number of single doctors, then a stable matching is very likely to exist in a large market.

In this paper, we shift our attention to daycare matching markets in Japan, where the issue of waiting children has become one of the most urgent social challenges due to the scarcity of daycare facilities (Kamada and Kojima, 2023). The daycare matching problem is a natural extension of matching with couples, analogous to hospitals and doctors, with the notable distinction that the number of siblings in each family can exceed two. We are actively collaborating with multiple municipalities, providing advice to design and implement new centralized algorithms tailored to their specific needs.

The objective of this research is to gain a more nuanced understanding of why stable matchings exist in practical daycare markets. Recently, stable matchings have been reported in these markets where optimization approaches are utilized, but the underlying reasons have not been thoroughly examined (Sun et al., 2023, 2024). Furthermore, theoretical guarantees established in prior research on matching with couples may not readily extend to the daycare market, primarily due to two key factors. Firstly, a distinctive characteristic of Japanese daycare markets is the substantial proportion, approximately \(20\%\), of children with siblings. This stands in contrast to the assumption of near-linear growth of couples in previous research (Ashlagi et al., 2014). Secondly, we consider a stronger stability concept tailored for daycare markets. Our proposal has been presented to government officials and esteemed economists, who concur that this modification better suits the daycare markets1.

Our contributions can be summarized as follows:

Firstly, we formalize a large random market that mirrors the characteristics of realistic daycare markets, incorporating family preferences and daycare priorities generated through probability distributions. A significant trait observed in practical markets is the tendency for daycares to exhibit similar priorities over children. Our central result demonstrates that, in such random markets, the probability of a stable matching existing approaches 1 as the market size tends to infinity (Theorem 1). To the best of our knowledge, this is the first work to explain the existence of stable matchings in these practical daycare markets.

Secondly, we modify the Sorted Deferred Acceptance algorithm (Ashlagi et al., 2014) to address our stronger stability concept, as the original algorithm may not produce a matching that satisfies this criterion (Theorem 2). We carefully rectify and extend the algorithm to meet the stronger stability requirement (Theorem 3). Notably, we employ our modified algorithm to successfully identify stable matchings in all encountered real-life datasets. Additionally, we generate a large number of synthetic datasets that closely resemble real-life markets to assess the algorithm's effectiveness across diverse scenarios.

## 2 Related Work

We next provide a brief summary of some papers that are closely related to our work. A more detailed literature review is presented in Appendix A. A classical work on matching with couples, conducted by Kojima et al. (2013), illustrates that as the market size approaches infinity, the probability of a stable matching existing converges to 1, given the growth rate of couples is suitably slow in relation to the market size, e.g., when the number of couples is \(\) where \(n\) represents the number of singles. Ashlagi et al. (2014) propose an improved matching algorithm, building on the foundation laid by Kojima et al. (2013). This refined algorithm demonstrates that, even if the number of couples grows at a near-linear rate of \(n^{}\) with \(0<<1\), a stable matching can still be found with high probability. In contrast, Ashlagi et al. (2014) highlight that as the number of couples increases at a linear rate, the probability of a stable matching existing diminishes significantly. In practical applications, the National Resident Matching Program employed a heuristic based on the incremental algorithm proposed by Roth and Vate (1990). Biro et al. (2016) proposed a different approach involves the utilization of the Scarf algorithm (Scarf, 1967) to identify a fractional matching. If the outcome proves to be integral, it is then considered a stable matching. Moreover, researchers have explored the application of both integer programming and constraint programming to address the complexities of matching with couples (Manlove et al., 2007; Biro et al., 2014; Manlove et al., 2017). Notably,these methodologies have recently been adapted in the daycare matching market as well (Sun et al., 2023, 2024).

## 3 Preliminaries

In this section, we present the framework of a daycare market, expanding upon the classical problem of hospital-doctor matching with couples. We also generalize three fundamental properties that have been extensively examined in the literature of two-sided matching markets.

### Model

The daycare matching problem is represented by the tuple \(I=(C,F,D,Q,_{F},_{D})\), where \(C\), \(F\) and \(D\) denote sets of children, families, and daycare centers, respectively.

Each child \(c C\) belongs to a family denoted as \(f(c) F\). Each family \(f F\) is associated with a subset of children, denoted as \(C(f) C\). In cases where a family contains more than one child, e.g., \(C(f)=\{c_{1},,c_{k}\}\) with \(k>1\), these siblings are arranged in a predefined order, such as by age.

Let \(D\) represent a set of daycare centers, referred to as "daycares" for brevity. A dummy daycare denoted as \(d_{0}\) is included in \(D\), signifying the possibility of a child being unmatched. Each individual daycare \(d\) establishes a quota, denoted as \(Q(d)\), where the symbol \(Q\) represents all quotas.

Each family \(f\) reports a strict _preference ordering_\(_{f}\), defined over tuples of daycare centers, reflecting the collective preferences of the children within \(C(f)\). The notation \(_{f,j}\) is used to represent the \(j\)-th tuple of daycares in \(_{f}\), and the overall preference profile of all families is denoted as \(_{F}\).

**Example 1**.: _Consider family \(f\) with \(C(f)=\{c_{1},c_{2},,c_{k}\}\) where the children are arranged in a predetermined order. A tuple of daycares in \(_{f}\), denoted as \((d_{1}^{*},d_{2}^{*},,d_{k}^{*})\), indicates that for each \(i\{1,2,,k\}\), child \(c_{i}\) is matched to some daycare \(d_{i}^{*} D\). It's possible that \(d_{i}^{*}=d_{j}^{*}\), indicating that both child \(c_{i}\) and child \(c_{j}\) are matched to daycare \(d_{i}^{*}\)._

Each daycare \(d D\) maintains a strict _priority ordering_\(_{d}\) over \(C\), encompassing both the set of children \(C\) and an empty option. A child \(c C\) is considered acceptable to daycare \(d\) if \(c_{d}\), and deemed unacceptable if \(_{d}c\). The priority profile of all daycares is denoted as \(_{D}\).

A _matching_\(\) is defined as a function \(:C D C D\) satisfying the following conditions: i) \( c C\), \((c) D\), ii) \( d D\), \((d) C\), and iii) \( c C\), \( d D\), \((c)=d\) if and only if \(c(d)\). Given a matching \(\), we designate \((c)\) as the _assignment_ of child \(c\) and \((d)\) as the assignment of daycare \(d\). For a family \(f\) with children \(C(f)=\{c_{1},...,c_{k}\}\), we denote the assignment for family \(f\) as \((f)=(c_{1}),...,(c_{k})\).

### Fundamental Properties

The first property, individual rationality, stipulates that each family is matched to some tuple of daycares that are weakly better than being unmatched, and no daycare is matched with an unacceptable child. It is noteworthy that each family is considered an agent, rather than individual children.

**Definition 1** (Individual Rationality).: _A matching \(\) satisfies individual rationality if i) \( f F,(f)(d_{0},,d_{0})\) or \((f)=(d_{0},,d_{0})\), and ii) \( d D, c(d),c_{d}\)._

Feasibility in Definition 2 necessitates that i) each child is assigned to one daycare including the dummy daycare \(d_{0}\), and ii) the number of children matched to each daycare \(d\) does not exceed its specific quota \(Q(d)\).

**Definition 2** (Feasibility).: _A matching \(\) is feasible if it satisfies the following conditions: i) \( c C\), \(|(c)|=1\), and ii) \( d D\), \(|(d)| Q(d)\)._

Stability is a well-explored solution concept within the domain of two-sided matching theory. Before delving into its definition, we introduce the concept of a _choice function_ as outlined in Definition 3. It captures the intricate process by which daycares select children, capable of incorporating various considerations such as priority, diversity goals, and distributional constraints (see, e.g., (Hatfield and Milgrom, 2005; Aziz and Sun, 2021; Suzuki et al., 2023; Kamada and Kojima, 2023)). Following the work by Ashlagi et al. (2014), our choice function operates through a greedy selection of children based on priority only, simplifying the representation of stability.

**Definition 3** (Choice Function of a Dycare).: _For a given set of children \(C^{} C\), the choice function of daycare \(d\), denoted as \(_{d}(C^{}) C^{}\), selects children one by one in descending order of \(_{d}\) without exceeding quota \(Q(d)\)._

In this paper, we explore a slightly stronger stability concept than the original one studied in Ashlagi et al. (2014). It extends the idea of eliminating blocking pairs (Gale and Shapley, 1962) to address the removal of blocking coalitions between families and a selected subset of daycares.

**Definition 4** (Stability).: _Given a feasible and individually rational matching \(\), family \(f\) with children \(C(f)=\{c_{1},...,c_{k}\}\) and the \(j\)-th tuple of daycares \(_{f,j}=(d_{1}^{*},...,d_{k}^{*})\) in \(_{f}\), form a blocking coalition if the following two conditions hold, (1) family \(f\) prefers \(_{f,j}\) to its current assignment \((f)\), i.e., \((d_{1}^{*},...,d_{k}^{*})_{f}(f)\), and (2) for each distinct daycare \(d\) in \((d_{1}^{*},...,d_{k}^{*})\), \(C(f,j,d)_{d}(((d) C(f)) C(f,j,d))\) holds, where \(C(f,j,d) C(f)\) denotes a subset of children who apply to daycare \(d\) with respect to \(_{f,j}\)._

_A feasible and individually rational matching satisfies stability if no blocking coalition exists._

Consider the input to \(_{d}()\) in Condition 2. First, we calculate \((d) C(f)\), representing the children matched to \(d\) in matching \(\) but not from family \(f\). Then, we consider \(C(f,j,d)\), which denotes the subset of children from family \(f\) who apply to \(d\) according to the tuple of daycares \(_{f,j}\).

This process accounts for situations where a child \(c\) is paired with \(d\) in \(\) but is not included in \(C(f,j,d)\), indicating that \(c\) is applying to a different daycare \(d^{} d\) according to \(_{f,j}\). Consequently, child \(c\) has the flexibility to pass his assigned seat from \(d\) to his siblings in need. Otherwise, child \(c\) would compete with his siblings for seats at \(d\) despite he intends to apply elsewhere.

In contrast, the original concept by Ashlagi et al. (2014) does not take siblings' assignments into account. We illustrate the differences between the two concepts in Example 2. More detailed motivation for our definition and further discussions are provided in Appendices B.1 and B.2.

**Example 2** (Example of Stability).: _Consider one family \(f\) with two children \(C(f)=\{c_{1},c_{2}\}\). There are three daycares: \(D=\{d_{0},d_{1},d_{2}\}\), each with one slot. The preference profile of family \(f\) is \((d_{1},d_{2})_{f}(d_{2},d_{0})\). Each daycare prefers \(c_{1}\) over \(c_{2}\)._

_The matching \((d_{2},d_{0})\) is deemed stable by Ashlagi et al. (2014), but it is not considered stable by Definition 4. This is because it is blocked by family \(f\) and the pair \((d_{1},d_{2})\). Here, child \(c_{1}\) passes his seat at \(d_{2}\) to \(c_{2}\), allowing both children to potentially be matched to a more preferred assignment._

It is well-known that a stable matching is not guaranteed when couples exist (Roth, 1984). We provide an example to illustrate that even when each family has at most two children, and all daycares have the same priority ordering over children, a stable matching may not exist. Please refer to Appendix B.3 for details.

## 4 Random Daycare Market

To analyze the likelihood of a stable matching in practice, we proceed to introduce a random market where preferences and priorities are generated from probability distributions. Formally, we represent a random daycare market as \(=(C,F,D,Q,,,L,,,,_{_{ 0},},)\).

Let \(|C|=n\) and \(|D|=m\) denote the number of children and daycares, respectively. Throughout this paper, we assume that \(m=(n)\). To facilitate analysis, we partition the set \(F\) into two distinct groups labeled \(F^{}\) and \(F^{O}\), signifying the sets of families with and without siblings, respectively. Correspondingly, \(C^{}\) and \(C^{O}\) represent the sets of children with and without siblings, respectively. The parameter \(\) signifies the percentage of children with siblings. Then we have \(|C^{O}|=(1-)n\) and \(|C^{}|= n\). For each family \(f\), the size of \(C(f)\) is constrained by a constant \(\), expressed as \(_{f F}|C(f)|\).

### Preferences of Families

We adopt the approach outlined in Kojima et al. (2013) to generate family preferences through a two-step process. In the first step, we independently generate preference orderings for each child from a probability distribution \(\) on daycares \(D\). Subsequently, we employ a function \(\) to aggregate the individual preferences of children within each family into a collective preference ordering.

The procedure for generating preference orderings for each child operates as follows. Let \(=(p_{d})_{d D}\) be a probability distribution, where \(p_{d}\) represents the probability of selecting daycare \(d\). For each child \(c\), start with an empty list, independently choose a daycare \(d\) from \(\), and add it to the list if it is not already included. Repeat this process until the length of the list reaches the maximum length \(L\), a relatively small constant in practice.

We adhere to the assumption that the distribution \(\) satisfies a _uniformly bounded_ condition, as assumed in the random market by Kojima et al. (2013) and Ashlagi et al. (2014).

**Definition 5** (Uniformly Bounded).: _For all \(d,d^{} D\), the ratio of probabilities \(p_{d}/p_{d^{}}\) falls within the interval \([1/,]\) with a constant \( 1\)._

**Lemma 1**.: _Under the uniformly bounded condition, the probability \(p_{d}\) of selecting any daycare \(d\) is limited by \(/m\) where \(m\) denotes the total number of daycares._

For families with multiple siblings, we do not impose additional constraints on the function \(\) that aggregates individual preferences into collective preferences.

### Priorities of Daycares

A notable departure from previous work (Kojima et al., 2013) and (Ashlagi et al., 2014), is our adoption of the Mallows model (Mallows, 1957) to generate daycare priority orderings over children. In the Mallows model, represented as \(_{_{0},}\), a reference ordering \(_{0}\) is first determined. New orderings are then probabilistically generated based on this reference, controlled by a dispersion parameter \(\). This model is widely used for preference generation in diverse contexts (Lu and Boutilier, 2011; Brilliantova and Hosseini, 2022). Let \(S\) denote the set of all orderings over \(C\).

**Definition 6** (Kendall-tau Distance).: _For a pair of orderings \(\) and \(^{}\) in \(S\), the Kendall-tau distance, denoted by \((,^{})\), is a metric that counts the number of pairwise inversions between these two orderings. Formally, \((,^{})=|\{c,c^{} C c^{ }c^{}c^{} c\}|\)._

**Definition 7** (Mallows Model).: _Let \((0,1]\) be a dispersion parameter and \(Z=_{ S}^{(,_{0})}\). The Mallows distribution is a probability distribution over \(S\). The probability that an ordering \(\) in \(S\) is drawn from the Mallows distribution is given_

\[[]=\,^{(,_{0})}.\]

The dispersion parameter \(\) characterizes the correlation between the sampled ordering and the reference ordering \(_{0}\). Specifically, when \(\) is close to \(0\), the ordering drawn from \(_{_{0},}\) is almost the same as the reference ordering \(_{0}\). On the other hand, when \(=1\), \(_{_{0},}\) corresponds to the uniform distribution over all permutations of \(C\).

In the practical daycare matching market, every municipality assigns a unique priority score to each child, establishing a strict priority order utilized and slightly adjusted by all daycares. Siblings within the same family usually share identical priority scores, with ties being resolved arbitrarily.

Motivated by this observation, we construct a reference ordering \(_{0}\) as follows: Begin with an empty list and include all children \(C^{O}\) in the list. For each family \(f F^{S}\), add children \(C(f)\) to the list with a probability of \(1/n^{1+}\), and include \(f\) in the list with a probability of \(1-1/n^{1+}\) for a constant \(>0\). Subsequently, shuffle all permutations of the elements in the list. Finally, \(_{0}\) is drawn from a uniform distribution over all permutations of the shuffled elements in the list. In other words, with a probability of \(1/n^{1+}\), we treat siblings from the same family separately, and with a probability of \(1-1/n^{1+}\), we treat them as a whole, or more precisely, as a continuous block in \(_{0}\).

**Definition 8** (Diameter).: _Given a reference ordering \(_{0}\) over children \(C\), we define the diameter of family \(f\), denoted by \(_{f}\), as the greatest difference in \(_{0}\) among \(C(f)\). Formally, \(_{f}=c C_{c^{} C(f)}c^{ }_{0}c_{0}_{c^{} C(f)}c^{} }+2\) where \(_{c C(f)}c\) (resp. \(_{c C(f)}c\)) refers to the child in \(C(f)\) with the highest (resp. lowest) priority in \(_{0}\)._

The methodology employed to generate the reference ordering \(_{0}\) above adheres to the following condition. For each family \(f\) with siblings, we have \(_{f}|C(f)|}\) from the construction.

We concentrate on a random market \(\) where all parameters are set as mentioned above. Our main result is encapsulated in the following theorem.

**Theorem 1**.: _Given a random market \(\) with \(=O( n/n)\), the probability of the existence of a stable matching converges to \(1\) as \(n\) approaches infinity._

We will prove Theorem 1 by demonstrating that an algorithm, namely the Extended Sorted Deferred Acceptance algorithm (to be defined in the next section), produces a stable matching with a probability that converges to \(1\) in the random market.

## 5 Extended Sorted Deferred Acceptance

In this section, we propose the Extended Sorted Deferred Acceptance (ESDA) algorithm, a heuristic approach that has proven effective in computing stable matchings across a variety of real-life daycare datasets. Importantly, the ESDA algorithm serves as a foundational component in our probability analysis for large random markets.

The ESDA algorithm is an extension of the Sorted Deferred Acceptance (SDA) algorithm (Ashlagi et al., 2014), originally designed for matching with couples. More details of the SDA algorithm are presented in Appendix C.3. In the following theorem, we demonstrate that the SDA algorithm may not produce a stable matching with respect to Definition 4 when it terminates without failure. The proof of Theorem 2 is presented in Appendix C.4.

**Theorem 2**.: _The matching returned by the original SDA algorithm may not be stable._

We next give an informal description of ESDA. The algorithm begins by computing a stable matching without considering families with siblings, denoted as \(F^{S}\), using the Deferred Acceptance algorithm (see Appendix C.1). Subsequently, it sequentially processes each family, denoted as \(f\), based on a predefined order denoted as \(\). Children without siblings who are displaced by family \(f\) are processed individually, enabling them to apply to daycare centers from their top choices in their preference orderings. If any child from family \(f^{} F^{S}\) with siblings is rejected during this process, a new order \(^{}\) is attempted, with \(f\) being inserted before \(f^{}\). If the outcome before inserting family \(f\) becomes different after processing family \(f\), then we check whether family \(f\) can be matched to a better tuple of daycares from their top choices. The algorithm terminates and returns a failure if any child from family \(f\) is rejected or if the same permutation has been attempted twice.

We offer a brief elucidation on the differences between our ESDA algorithm and the original SDA. Firstly, the input to the choice function of daycares differs. In our algorithm, children have the option to transfer their allocated seats to other siblings, a feature not present in the original SDA. Secondly, we meticulously examine whether any family could establish a blocking coalition with a tuple of daycares that previously rejected it whenever the assignment of any child without siblings is changed. In contrast, SDA goes through each tuple of daycares once without performing this check.

We illustrate how ESDA works through Example 3. A formal description of ESDA is presented in Algorithm 1 in Appendix D, along with all technical details.

**Example 3**.: _Consider three families \(f_{1}\) with \(C(f_{1})=\{c_{1}\), \(c_{2}\}\), \(f_{2}\) with \(C(f_{2})=\{c_{3}\), \(c_{4}\}\) and \(f_{3}\) with \(C(f_{3})=\{c_{5}\), \(c_{6}\}\). There are five daycares denoted as \(D=\{d_{1}\), \(d_{2}\), \(d_{3}\), \(d_{4}\), \(d_{5}\}\), each with one available slot. The order \(\) is initialized as \(\{1,2,3\}\). The preference profile of the families and the priority profile of the daycares are outlined as follows:_

\[_{f_{1}} (d_{1},d_{2}),(d_{1},d_{4}) _{d_{1}}  c_{1},c_{5} _{d_{2}}  c_{6},c_{2}\] \[_{f_{2}} (d_{3},d_{4}),(d_{5},d_{4}) _{d_{3}}  c_{3},c_{5} _{d_{4}}  c_{6},c_{4},c_{2}\] \[_{f_{3}} (d_{1},d_{4}),(d_{3},d_{4}),(d_{5},d_{2}) _{d_{5}}  c_{3},c_{5}\]

**Iteration 1:** _With order \(_{1}=\{1,2,3\}\), family \(f_{1}\) secured a match by applying to daycares \((d_{1},d_{2})\), followed by family \(f_{2}\) obtaining a match with applications to \((d_{3},d_{4})\). However, family \(f_{3}\) faced rejections at \((d_{1},d_{4})\) and \((d_{3},d_{4})\) before successfully securing acceptance at \((d_{5},d_{2})\), leading to the displacement of family \(f_{1}\). Thus we generate a new order \(_{2}=\{3,1,2\}\) by inserting \(3\) before \(1\)._

**Iteration 2:** _With order \(_{2}=\{3,1,2\}\), family \(f_{3}\) secures a match at \((d_{1},d_{4})\). Then family \(f_{1}\) applies to \((d_{1},d_{2})\) and also secures a match, resulting in the eviction of family \(f_{3}\). This leads to the generation of a modified order \(_{3}=\{1,3,2\}\) with \(1\) preceding \(3\)._

**Iteration 3:** _With order \(_{3}=\{1,3,2\}\), family \(f_{1}\) secures a match at \((d_{1},d_{2})\). Subsequent applications by \(f_{3}\) result in a match at \((d_{3},d_{4})\), but \(f_{2}\) remains unmatched due to rejections at \((d_{3},d_{4})\) and \((d_{5},d_{4})\)_The algorithm terminates, returning a stable matching \(\) with \(f_{1}\) matched to \((d_{1},d_{2})\) and \(f_{3}\) matched to \((d_{3},d_{4})\), while \(f_{2}\) remains unmatched._

### Termination without Failure

We demonstrate that ESDA always generates a stable matching if it does not terminate with failures. Our proof relies on the following two facts, which are formally presented in Appendix D.1. First, we establish that the number of matched children at each daycare does not decrease as long as no family in \(F^{S}\) is rejected and no child passes their seat to other siblings during the execution of ESDA. Second, we prove that for a given order \(\) over \(F^{S}\), if the rank of the matched child at any daycare increases, then ESDA cannot produce a matching with respect to \(\). The detailed proof for Theorem 3 is presented in Appendixes D.1 and D.2.

**Theorem 3**.: _Given an instance of \(I\), if ESDA returns a matching without failure, then the yielded matching is stable. In addition, ESDA always terminates in a finite time, either returning a matching or a failure._

### Two Types of Failure of ESDA

Theorem 3 states that if the algorithm successfully concludes, it results in a stable matching. Conversely, the algorithm returns failures in two scenarios, suggesting that a stable matching may not exist, even if one indeed exists.

Formally, a _Type-1 Failure_ happens when, during the insertion of a family \(f F^{S}\), a child \(c C(f)\) initiates a rejection chain that ends with another child \(c^{} C(f)\) from the same family, where all other children in the chain do not have siblings. This failure is further divided into two cases based on whether \(c=c^{}\) holds: Type-1-a Failure when \(c=c^{}\) and Type-1-b Failure when \(c c^{}\).

A _Type-2 Failure_ occurs if there exist two families \(f_{1},f_{2} F^{S}\) satisfying the following conditions: i) \(f_{1}\) appears before \(f_{2}\) in the current order \(\), ii) There exists a rejection chain starting from \(f_{2}\) and ending with \(f_{1}\) where all other families in the chain have an only child, and iii) A new order \(^{}\), obtained by placing \(f_{2}\) in front of \(f_{1}\), has been attempted and stored in the set of \(\), which keeps track of permutations tried during the ESDA process.

These two types of failures are crucial when analyzing the probability of the existence of stable matchings in a large random market. Detailed examples illustrating these two types of failures can be found in Appendix D.3.

## 6 Sketched Proof of Theorem 1

Our main approach to proving Theorem 1 is to set an upper limit on the likelihood of encountering the two types of failure in the ESDA algorithm.

The following two lemmas establish that as \(n\) approaches infinity, Type-1-a and Type-1-b Failures are highly unlikely to occur when the dispersion parameter \(\) is on the order of \(O( n/n)\). We defer the proofs for these results to Appendices E.2 and E.3, respectively.

**Lemma 2**.: _Given a random market \(\) with \(=O( n/n)\), the probability of Type-\(1\)-a Failure in the SDA algorithm is bounded by \(O( n)^{2}/n\)._

**Lemma 3**.: _Given a random market \(\) with \(=O( n/n)\), the probability of Type-\(1\)-b Failure in the SDA algorithm is bounded by \(O( n)^{2}/n+O(n^{-})\)._

We introduce concepts of _domination_ and _nesting_ to analyze the case of Type-2 Failure.

**Definition 9** (Domination).: _Given a priority ordering \(\), we say that family \(f\) dominates \(f^{}\) w.r.t. \(\) if \(_{c C(f)}c_{c^{} C(f^{})}c^{}\) where \(_{c C(f)}c\) (resp. \(_{c C(f)}c\)) represents the child in \(C(f)\) with the highest (resp. lowest) priority under the priority ordering \(\)._

In simple terms, if \(f\) dominates \(f^{}\), then there is a possibility that \(f^{}\) will be rejected by daycares with a certain order \(\) due to an application of \(f\).

Intuitively, a Type-2 Failure can arise from a cycle in which two families with siblings reject each other. We introduce the concept of _nesting_ as follows.

**Definition 10** (Nesting).: _Given a priority ordering \(\), two families \(f\) and \(f^{}\) are said to be nesting if they mutually dominate each other under \(\)._

**Example 4**.: _Consider three families \(F=\{f_{1},f_{2},f_{3}\}\), each with two children: \(C(f_{1})=\{c_{1},c_{2}\}\), \(C(f_{2})=\{c_{3},c_{4}\}\), and \(C(f_{3})=\{c_{5},c_{6}\}\). Suppose there is a priority ordering \(\): \(c_{1}\), \(c_{3}\), \(c_{5}\), \(c_{2}\), \(c_{4}\), \(c_{6}\). In this case, all pairs in \(F\) nest with each other with respect to \(\)._

We next show that if any two families do not nest with each other with respect to \(_{0}\), then Type-2 Failure is unlikely to occur as \(n\) tends to infinity in Lemma 4. We defer the proof to Appendix E.4.

**Lemma 4**.: _Given a random market \(\) with \(=O( n/n)\), and for any two families \(f,f^{} F^{S}\) that are not nesting with each other with respect to \(_{0}\), then Type-2 Failure occurs with a probability of at most \(O( n/n)\)._

Following an analysis of the probability that any two pairs of families from \(F^{S}\) nest with each other with respect to the reference ordering \(_{0}\), we establish the probability of Type-\(2\) Failure in Lemma 5.

**Lemma 5**.: _Given a random market \(\) with \(=O( n/n)\), the probability of Type-\(2\) Failure occurring is bounded by \(O( n/n)+On^{-2}\)._

Lemma 2, Lemma 3, and Lemma 5 imply the existence of a stable matching with high probability for the large random market, thus concluding the proof of Theorem 1. Further elaboration and details can be found in Appendix E.

## 7 Experiments

In this section, we conduct comprehensive experiments to evaluate the effectiveness of our proposed ESDA algorithm. The experimental results demonstrate our hypothesis that a stable matching exists with high probability when daycare centers have similar priority orderings over children.

We analyze two types of datasets. Firstly, we evaluate our algorithm using six real-life datasets provided by three municipalities. In Appendix F.2, we provide a detailed description of the practical daycare matching markets based on datasets. In addition, we introduce slight modifications to daycare priorities while keeping other factors constant. Secondly, we generate synthetic datasets that mirror the characteristics of real-life markets but on a much larger scale. By adjusting the dispersion parameter in the Mallows model, we create daycare priorities with varying degrees of similarity.

Given the limitations of the ESDA algorithm in computing stable matchings in certain scenarios, we employ a constraint programming (CP) approach as an alternative. This method consistently generates a stable matching whenever one exists (Sun et al., 2024). We implement them in Python and execute them on a standard laptop without additional computational resources. To generate priorities from the Mallows distributions, we utilize the PrefLib library (Mattei and Walsh, 2013)

### Experiments on Real-life Datasets

We present the experimental results on the six real-life datasets. It is noteworthy that the ESDA algorithm not only successfully identifies a stable matching but also consistently produces the same outcome as the constraint programming (CP) solution for all datasets. Moreover, the ESDA algorithm achieves a computation time that is more than 10 times faster than the CP (see Table 5 in Appendix F.2).

To investigate the importance of similarity in daycare priorities on the performance of ESDA, we generate new datasets by perturbing the original real-world data using Mallows distributions. For each daycare, we independently sample priority orders from the Mallows distribution with varying

Figure 1: Results of experiments on real-world data perturbed by the Mallows distributions.

dispersion parameters and replace the original priority order. We consider dispersion parameters ranging from \(0.0\) to \(1.0\) in increments of \(0.1\) and conduct \(100\) experiments for each case. Figure 1 illustrates the results, demonstrating that ESDA successfully computes a stable matching in more than 80% of cases when the dispersion parameter \(\) is at most \(0.8\). It is worth noting that when \(=0.0\), daycare priorities are identical to the original priorities. However, when the dispersion parameter is large, the ESDA may only find a stable matching in less than 50% of cases, even if one may exist.

### Experiments on Synthetic Datasets

We illustrate the steps to generate synthetic datasets. Initially, we define the number of families, denoted by \(|F|\), drawn from the set \(\{500,1000,2000,3000,5000,10000\}\). We next fix the parameter \(\), representing the percentage of children with siblings \(C^{S}\), as \(=0.2\). For families with siblings, denoted as \(F^{S}\), 80% of them consist of two children each, while the remaining 20% have three children each. The number of daycares, denoted by \(|D|\), is set to \(0.1*|F|\). For each child \(c\) without siblings in \(C^{O}\), we randomly select 5 daycares from \(D\). For each family \(f\) in \(F^{S}\) with siblings, we generate an individual preference ordering of length \(10\) uniformly from \(D\) for each child \(c C(f)\) and create all possible combinations. Finally, we uniformly choose a joint preference ordering of length \(10\). The dispersion parameter \(\) varies within the range \(\{0.0,0.3,0.5\}\), while the parameter \(\) used to generate common priorities \(_{0}\) remains fixed at \(1\). For each specified setting, we generate 10 instances. The figures in the first row show the number of successful runs out of the 10 experiments. In the second row, we report the mean computational complexity along with its 95% confidence intervals, calculated only for the instances where the algorithm successfully found a stable matching.

Regarding the experimental findings, the ESDA algorithm consistently identified a stable matching in all experiments. In addition to stability analysis, we conducted a comparison of the running time between the ESDA algorithm and the CP algorithm. Despite the potential requirement for the ESDA algorithm to check all permutations of \(F^{S}\) in the worst case scenario, it consistently demonstrated notably faster performance than the CP algorithm across all cases.

## 8 Conclusion

In this study, we investigate the factors contributing to the existence of stable matching in practical daycare markets. We identify the shared priority ordering among all daycares as one of the primary reasons. Our contribution includes a probability analysis for such large random markets and the introduction of the ESDA algorithm to identify stable matchings in practical datasets. Experimental results demonstrate the utility of ESDA under various conditions, suggesting its potential scalability to larger markets where optimization solutions, such as integer programming or constraint programming, may exhibit much longer processing times.

Figure 2: Results of experiments on synthetic data.