# Chain of Agents: Large Language Models

Collaborating on Long-Context Tasks

 Yusen Zhang\({}^{}\), Ruoxi Sun\({}^{}\), Yanfei Chen\({}^{}\), Tomas Pfister\({}^{}\), Rui Zhang\({}^{}\), Sercan O. Arik\({}^{}\)

\({}^{}\) Penn State University, \({}^{}\) Google Cloud AI Research

{yfz5488, rnz5227}@psu.edu, {ruoxis, yanfeichen, tpfister, soarik}@google.com

Work done while the author was a student researcher at Google Cloud AI Research.Last authors

###### Abstract

Addressing the challenge of effectively processing long contexts has become a critical issue for Large Language Models (LLMs). Two common strategies have emerged: 1) reducing the input length, such as retrieving relevant chunks by Retrieval-Augmented Generation (RAG), and 2) expanding the context window limit of LLMs. However, both strategies have drawbacks: input reduction has no guarantee of covering the part with needed information, while window extension struggles with focusing on the pertinent information for solving the task. To mitigate these limitations, we propose _Chain-of-Agents (CoA)_, a novel framework that harnesses multi-agent collaboration through natural language to enable information aggregation and context reasoning across various LLMs over long-context tasks. CoA consists of multiple worker agents who sequentially communicate to handle different segmented portions of the text, followed by a manager agent who synthesizes these contributions into a coherent final output. CoA processes the entire input by interleaving reading and reasoning, and it mitigates long context focus issues by assigning each agent a short context. We perform a comprehensive evaluation of CoA on a wide range of long-context tasks in question answering, summarization, and code completion, demonstrating significant improvements by up to 10% over strong baselines of RAG, Full-Context, and multi-agent LLMs.

## 1 Introduction

Despite their impressive performance across a wide range of scenarios, LLMs struggle with tasks that involve long contexts . Numerous application scenarios demand extremely long contexts, such as question answering , document and dialogue summarization , and code completion , where the inputs contain entire books  and long articles .

To tackle the challenge with long context tasks, two major directions have been explored as shown in Table 1: _input reduction_ and _window extension_. _Input reduction_ reduces the length of the input context before feeding to downstream LLMs. Truncation approaches  directly truncate the input. Retrieval Augmented Generation (RAG)  extends this direction by retrieving the most relevant chunks through embedding similarity. However, because of low retrieval accuracy, LLMs could receive an incomplete context for solving the task, hurting performance. _Window extension_ extends the context window of LLMs via finetuning to consume the whole input . For example, Claude-3  directly allows reading 200k tokens for each input. However, when the window becomes longer, LLMs struggle to focus on the needed information to solve the task, suffering from ineffective context utilization such as the _"lost in the middle"_ issue .

Motivated by the aforementioned challenges, we propose a novel framework, _Chain-of-Agents (CoA)_, inspired by the way humans interleave reading and processing of long contexts under limited working memory constraints of brains . The key idea of CoA is to harness multi-agent communication to enable information aggregation and context reasoning capabilities across different LLMs. As shown in Figure 1, CoA contains two stages. In stage 1, a series of worker agents in charge of different chunks of long context collaborate and aggregate evidence for answering the given query. To this end, the workers read and process sequentially, each receiving the message from previous worker and transferring the useful updated information to the next. In stage 2, the manager agent receives the complete evidence from last worker agent and generates the final response.

As shown in Table 1, CoA is a training free, task agnostic, and highly interpretable framework processing entire "receptive field" by interleaved reading-processing and mitigating the long context focusing issue by assigning each agent a short context. Different from _input reduction_ where LLMs need to start processing with low receptive field over reduced inputs ("read-then-process"), workers in CoA start to process each chunk before reading all input ("interleaved read-process"), tackling the problems that input reduction struggles with, such as, generic summarization or counting of passages . Different from _context extension_, CoA leverages the capability of communication rather than trying to feed many tokens into an LLM. This is a more natural solution for complex tasks because we assume that each LLM has its limit and there are always complex context tasks surpassing its limit. Compared with Full-Context, CoA is also cost effective by reducing time complexity from \(n^{2}\) to \(nk\), where \(n\) is input tokens and \(k\) is the context limit of LLMs.

   Category & Example Work & Rec. & Foc. & No Train & Read & Agent & Applicability & Inter. \\   & Truncation  & ✗ & ✓ & ✓ & \(k\) & Single & Generic & Low \\  & RAG  & ✗ & ✓ & ✗ & \(n+k\) & Single & Query-based & Medium \\   & Position Interpolation  & ✓ & ✗ & ✗ & \(n\) & Single & Generic & Low \\  & Long Context  & ✓ & ✗ & ✗ & \(n\) & Single & Generic & Low \\  Multi-agent LLMs & Chain-of-Agents (Ours) & ✓ & ✓ & ✓ & \(n\) & Multiple & Generic & High \\   

Table 1: Comparison between Chain-of-Agents and prior methods for long-context tasks. Rec./Foc.: being able to mitigate inaccurate receptive field/long context focusing issues. Read: the number of tokens as model input, where \(n\) is the total input length, \(k\) is the context window limit of LLMs. Inter.: the interpretability of the approach. Note that RAG is ’medium interpretable’ because of the re-ranked chunks.

Figure 1: Overview of Chain-of-Agents, a training-free, task agnostic, and highly-interpretable framework that harnesses multi-agent collaboration for long-context tasks. Blue boxes indicate communication unit \(CU_{i}\) between worker agents \(W_{i}\) and \(W_{i+1}\). It consists of multiple worker agents who sequentially communicate to handle different segmented portions of the text, followed by a manager agent who synthesizes these contributions into a coherent final output.

We conduct intensive experiments on _nine datasets_, including question answering, summarization, and code completion tasks with _six LLMs_, with PaLM 2 , Gemini , and Claude 3  models. We compare CoA with two strong baselines chosen from _input reduction_ and _window extension_ approaches, respectively: (i) RAG, which uses a state-of-the-art retriever to obtain the most relevant information to feed into the LLM and (ii) Full-Context (Vanilla), which feeds all input into the LLM until reaching the window limit. Our results show that on all nine datasets, CoA obtains significant improvement over all baselines by up to 10%. Noting that there is not enough research on multi-agent for long context tasks, we carefully create two multi-agent baselines, including a hierarchical structure and result merging approach to further demonstrate that CoA is superior among other possible multi-agent frameworks.

## 2 Related work

**Multi-agent LLMs.** Multi-agent LLMs has become a popular topic . A large proportion of works focus on social simulation [52; 53] and frameworks . Based on the success of them, some works explore the game settings [39; 74; 82; 83; 47], world wars , economy markets [36; 76], recommendation systems , and pandemics . Others advance problem solving, focusing on reasoning of short text via multi-agent debating [18; 80; 10; 66] and discussing [11; 58] for different tasks in reasoning [18; 66], mechanics problems , paper review , knowledge graph construction , and code intelligence [70; 24]. Different from the above works, we improve problem-solving on long context tasks. To the best of our knowledge, the closest work LongAgent  utilizes a tree structure to do multi-hop QA over a long input context and the sibling worker agents do not communicate, while CoA utilizes a chain structure allowing the communication units to flow between workers (detailed comparison in Appendix G and F.3).

**Long Context Modeling for LLMs.**_Input Reduction_: RAG is broadly leveraged to solve long context query-based tasks [81; 2]. Combined with a strong retriever [79; 41; 73], LLMs are expected to handle long context questions in open domains. Previous studies have augmented LLMs during pretraining [26; 72], finetuning , inference , or directly integrating [28; 61]. Moreover, some token-level retrieval approaches are proposed . Longllmlingua  removes tokens from long prompt to compress long context prompt to a desired budget. _Window Extension_: The context windows of LLMs are getting longer and longer thanks to the development of GPUs. For instance, the context window increases from 1024 (GPT-2 ), 2048 (GPT-3 ), to 128k (GPT-4 ). Moreover, the newest version of Claude-3  supports 200k context windows. To save the cost of LLM training, some continual learning or finetuning approaches are proposed to extend the context window of pretrained LLMs [46; 55; 44; 48]. For instance, position interpolation  modifies rotary position encoding  and extends the context length of LLaMA  to 32k. Different from the above works, CoA does not reduce the input length or extend the window length of LLMs, but rather leverages multi-agent collaboration and communication to obtain the full receptive field.

Recently, a few studies have employed text chunking algorithms to divide and process lengthy text inputs. Notably, RecurrentGPT  adopts a chain structure to generate long outputs in a chunk-by-chunk manner, maintaining continuity in the storyline. WalkMaze  utilizes a centralized tree structure without communication between sibling agents to do single-hop QA over a long input context. Different from these works, CoA focuses on long input tasks with a chain structure with inter-sibling communication (Append G).

**Complex Task Reasoning.** Previous works on complex reasoning have focused on decomposing the complex question into sub-questions to solve them step-by-step.  decompose the questions with an unsupervised model and answer them separately with another model. Decomposed Prompting  leverages some predefined modules to classify each decomposed sub-question, then further decompose if needed. Additionally, decomposing is used for human-computer interaction , and prompter training . Recently, many work has been proposed for LLMs, such as Chain-of-thought  Least-to-most prompting  and Pearl . However, the length of the prompt does not exceed the context limit of a single agent. By contrast, our Chain of Agents framework is proposed to effectively reason across multiple agents to support the unlimited length of source text.
Figure 1 shows the overview of our Chain-of-Agents (CoA) framework, containing two stages. In stage 1, long context is split into chunks where each chunk can be processed by a worker agent. Then, the worker agents communicate sequentially to produce evidence over the entire context. In stage 2, a manager agent consumes the knowledge from the chain of workers to generate the final answer.

To formulate the task, we denote a long-context sample as \((x,y,q)\), where \(x\) is the input of \(n\) tokens, \(y\) is the output of \(m\) tokens, \(q\) is an optional query. Given an LLM with \(k\) tokens (usually \(k n\)) as the context window limit, the target is to generate \(y\) with the limited input context window. Therefore, we divide each source text \(x\) into chunks \(x=\{c_{1},c_{2}...c_{l}\}\), so that each chunk can be completely fed into the LLM agent backbone model.

### Stage 1: Worker Agent: Segment Comprehension and Chain-Communication

In Stage 1, CoA contains a sequence of \(l\) number of worker agents. Each worker \(W_{i}\) inputs the concatenation of a chunk \(c_{i}\) from source text \(x\), a query \(q\), instruction for a specific task for worker agent \(I_{W}\), and the message passed from the previous agent, denoted as "communication unit" \(CU_{i-1}\). The communication is unidirectional, passing from worker agent \(i-1\) to \(i\). The worker agents process them and output the message \(CU_{i}\) for next worker, expressed as:

\[CU_{i}=_{W_{i}}(I_{W},CU_{i-1},c_{i},q),\] (1)

CUs produced by worker agents vary across different tasks. For question answering, CU contains the evidence for the manager to answer the question. For summarization, CU contains the summary of the previous texts. For code completion, CU contains the code summary with function/class names and explanation. Effectiveness on diverse tasks demonstrates the flexibility of CoA (Appendix C).

The multi-step worker communication in CoA expands the model context to the full receptive field, meaning that the last worker can read the full input no matter how long the input is. Therefore, CoA is extensible to inputs with different lengths by adjusting the number of worker agents.

The left side of Figure 1 underscores the necessity of collaborative communication among workers to effectively address complex, long-context reasoning tasks. We observe that 1) Although the question is unanswerable given \(c_{1}\), \(W_{1}\) generates related evidence that is useful for answering the question; 2) with the partial answer from the previous worker, \(W_{2}\) further reasons with the current source to complete the full reasoning chain across agents and generate the interpretative reasoning chain; 3) \(W_{3}\) finds no related information in the chunk 3, it directly rewrites \(CU_{2}\) by putting the correct answer as the first token of \(CU_{3}\) without adding any unrelated information (Appendix F.4). This shows that if workers are independent (such as tree structure communication), it is impossible to answer hop two while the answer of hop one is held by another worker (Appendix G).

### Stage 2: Manager Agent: Information Integration and Response Generation

In Stage 2, after multiple steps of information extraction and comprehension by worker agents, the manager agent produces the final solution. While worker agents extract relevant information in a long-context source, the manager agent synthesizes relevant information accumulated by the end of _"worker-agent-chain"_ to generate the final answer. Specifically, given the instruction for manager \(I_{M}\) and query \(q\), the manager agent consumes accumulated knowledge from last worker \(CU_{l}\) and generates the final answer \(Response\):

\[Response=_{M}(I_{M},CU_{l},q)\] (2)

The benefit of using a separate LLM as the manager agent is to decompose the duty of analyzing chunks in the long-context source _("worker agents")_ and producing the final answer (_"manager agent"_), so that every agent can fulfill its duty to the most3.

### Time Complexity Analysis

We compare the time cost of full-context input and Chain-of-Agents theoretically in a decoder-only setting. We assume the response generated by LLMs contains \(r\) tokens on average, the input has \(n\) tokens, the context limit of LLM is \(k\), and the length of each chunk in RAG is \(k^{}\). The time complexity is shown in Table 2 (Appendix A). As can be seen, the encoding time of CoA is less than Full-Context because \(k n\) in long context tasks, while they have the same decoding time. This demonstrates the efficiency of CoA compared with the Full-Context baseline.

## 4 Experiment

### Experiment Setup

Datasets.We conduct experiments on nine long context datasets across three task types (Table 3):

* **Question Answering.** We consider five QA datasets from the LongBench  and SCROLL . **HotpotQA** is a Wikipedia-based multi-hop QA dataset. It requires reasoning across multiple passages to find the answer. **MuSiQue** is a multi-hop QA dataset. It is much more difficult than HotpotQA as it contains more hops in one sample, unanswerable questions, and harder distracting content. **NarrativeQA** is a QA dataset over entire books or movie transcripts. The answers can be abstract or extractive, yes/no, and unanswerable. **Qasper** is a question answering dataset over NLP papers. It also contains extractive, abstractive, yes/no, and unanswerable questions. **QuALITY** is a dataset based on stories and articles with multiple-choice questions for each sample. The model needs to select the correct answer among choices.
* **Summarization.** We pick two summarization datasets from SCROLLS. **QMSum** is a query-based summarization dataset, formed by meeting transcripts from multiple domains such as academic and industrial products. **GovReport** is a generic summarization dataset containing long reports published by the U.S. Government Accountability Office. We also use one dataset for long context memorization tasks. **BookSum** is a collection of datasets for long-form narrative summarization, including novels, plays, and stories. We use the book-level partition of the BookSum dataset for experiments.
* **Code Completion.** We pick **RepoBench-P** which is collected from GitHub repositories, and the model needs to generate the next line of code given the long code base.

Metrics.We report the geometric mean of ROUGE  for Summarization tasks, code similarity score  for Code Completion task, exact match for QuALITY dataset , and F1 score for the rest of the Question Answering datasets .

LLMs.We use six LLMs in total as the backbone of CoA across all experiments (Appendix B). **PaLM 2** is a series of models with a dense left-to-right, decoder-only language model pretrained on a high-quality corpus of 780 billion tokens. We use **text-bison@001** and **text-unicorn@001** for the experiments with an 8k maximum context window. **Gemini 1.0** is a family of LLMs proposed by Google. We use **gemini-ultra** for experiments. The input limit is 32k tokens for Gemini. **Claude 3** is a family of large language models developed by Anthropic. The family includes three state-of-the-art models in ascending order of capability: **claude-3-haiku**, **claude-3-sonnet**, and **claude-3-opus**. These models are capable of consuming 200k tokens in the context window, providing a strong baseline for long context tasks. Although our framework is flexible to use diverse types of LLMs as workers and manager, we use the same model for each \(W_{i}\) and \(M\) if not specified.

    & Encode & Decode \\  Full-Context & \((n^{2})\) & \((nr)\) \\ CoA & \((nk)\) & \((nr)\) \\ RAG & \((nk^{})+(k^{2})\) & \((n/k^{})+(kr)\) \\   

Table 2: Time complexity.

    &  &  & Code \\   & HotpotQA & MuSiQue & NarrativeQA & Qasper & QuALITY & QMSum & GovReport & BookSum & RepoBench-P \\  Avg. Input & 10603 & 12975 & 71787 & 4236 & 4936 & 12524 & 9239 & 108478 & 7105 \\ Avg. Agents & 2.35 & 2.88 & 12.45 & 1.12 & 1.31 & 2.57 & 2.03 & 18.63 & 1.69 \\ Query-based & ✓ & ✓ & ✓ & ✓ & ✓ & ✓ & ✗ & ✓ \\   

Table 3: **Dataset Statistics**. Avg. Input/Agents is the average words/agents (8k) for source input.

Baselines.Our principle of choosing baselines is to find the strongest and most typical approaches from _input reduction_ and _window extension_. The first baseline is **Vanilla**. It directly consumes tokens until the context window of LLM is fully utilized, implying a 200k window LLM if using Claude 3. The other one is Retrieval-Augmented Generation (**RAG**). We use the state-of-the-art retriever . Following , we first segment the source text into chunks of 300 words and re-rank them using a retriever. Top-n chunks are then fed into the downstream LLM until the context window is fully utilized. GovReport dataset does not contain a query initially, we create a pseudo query "What is the summary of the whole government report?" as the query to rerank.

To evaluate the performance of CoA compared with possible multi-agent approaches, we carefully construct two approaches. Similar to CoA, we also assign each chunk \(c_{i}\) to \(W_{i}\) using similar instructions to generate \(CU_{i}\). In these approaches, worker agents are parallel and independent while CoA is sequential. **Multi-Agent Voting (Merge)** Each agent directly generate an answer \(a_{i}\) according to \(c_{i}\). A majority voting is applied to all answers \(a_{i}\) to decide the final answer. **Multi-Agent Hierarchical Structure (Hierarchical)**. Inspired by , we propose a hierarchical framework, where the communication forms a tree structure between workers \(W_{i}\) and manager \(M\). For each worker, it first judges whether \(c_{i}\) contains useful information. If true, it generates a communication unit \(CU_{i}\). Then, all \(CU_{i}\) are sent to the manager \(M\) to come up with a final answer. Besides, we append an integer number \(L\) at the end of every approach to clearly remind the window size limit of LLM. For instance, "CoA (8K)" refers to the base LLM used in CoA with window size 8K.

### Overall Results of CoA

Question Answering.Table 4 shows the results of Question Answering tasks on all three models. CoA (8k) outperforms Vanilla (8k) by a large margin on _all 8 datasets_, including 13.30% on NarrativeQA, 12.82% on MuSiQue, and 22.00% on Quality, for text-bison, text-unicorn, and gemini-ultra, respectively. Also, CoA (8k) outperforms RAG (8k) model for all 8 datasets using all three LLMs, demonstrating that CoA achieves higher performance than RAG. In other words, **using multi-agent LLMs outperforms RAG models**. It is also worth noting that for gemini-ultra, Vanilla (32k) improves the Vanilla (8k) baseline, yet it is still lower than CoA (8k). CoA also obtains compatible performance with with state-of-the-art models (Appendix E), while keeping robustness of window size (Appendix F.2).

Summarization and Code Completion.Table 4 shows the results of Summarization and Code Completion tasks. Similarly, CoA (8k) also outperforms all Vanilla (8k) and (32k) baselines on all three datasets, demonstrating the strong capability of CoA on various tasks. It is worth noting that for GovReport, RAG fails to improve the baseline with pseudo query. By contrast, CoA improves the performance significantly, showing that CoA can also be applied in non-query tasks (Appendix F.1).

Long Context LLMs.As Claude 3 models support 200k of tokens, we call these models long context models (LCM). Table 5 shows the performance of the LCM on two datasets. As can be seen, CoA (8k) outperforms Vanilla (200k) significantly, showing that with only an 8k context window, **CoA achieves a much higher performance than LCM with a 200k context window**. Also, CoA improves the performance with the samples that can be fed into a 200k context window (no truncation). Moreover, the improvements over the Vanilla (200k) and RAG (8k) become higher when the model

    & &  &  & Code \\  LLMs & Baselines & HotpoQA & MuSiQue & NarrativeQA & Qasper & QuALITY & QMSum & GovReport & RepBench-P \\   & Vanilla (8k) & 45.57 & 26.87 & 11.96 & 26.56 & 61.86 & 15.45 & 20.60 & 56.30 \\  & RAG (8k) & 51.91 & 33.83 & 14.20 & 27.20 & 55.28 & 15.59 & 20.83 & 55.63 \\  & CoA (8k) & **53.62** & **37.09** & **25.26** & **37.17** & **65.42** & **16.77** & **26.11** & **58.25** \\   & Vanilla (8k) & 51.09 & 29.67 & 14.45 & 27.81 & 83.40 & 16.61 & 23.50 & 53.87 \\  & RAG (8k) & 58.01 & 40.38 & 19.12 & 24.44 & 83.00 & 16.83 & 21.43 & 50.49 \\  & CoA (8k) & **62.04** & **42.49** & **20.37** & **38.01** & **83.80** & **17.67** & **26.48** & **60.39** \\   & Vanilla (8k) & 40.62 & 23.61 & 7.71 & 20.59 & 57.40 & 12.10 & 26.18 & 49.09 \\  & Vanilla (32k) & 45.09 & 27.93 & 7.21 & 21.71 & 58.60 & 10.24 & 26.96 & 73.04 \\   & RAG (8k) & 51.13 & 31.56 & 14.51 & 18.70 & 62.40 & 12.70 & 25.87 & 72.94 \\   & CoA (8k) & **54.26** & **35.09** & **25.26** & **35.10** & **80.60** & **12.84** & **26.98** & **73.05** \\   

Table 4: **Overall results of CoA. CoA significantly outperforms Vanilla and RAG using various backbone LLMs on all datasets.**size increases from Haiku to Opus (11.63/11.36/17.4 for NarrativeQA, 1.66/2.86/3.47 for BookSum). This demonstrates that **CoA benefits from stronger models to achieve higher improvements**.

Other Multi-Agent Frameworks.As shown in Table 6, Hierarchical (8k) outperforms Vanilla (8k) on five out of eight datasets, demonstrating the hierarchical approach can also improve the vanilla baselines significantly. Merge (8k) is lower than Vanilla (8k) except for GovReport, showing that merging is especially effective for long summarization tasks such as GovReport. As can be seen, CoA outperforms Hierarchical and Merge on all eight datasets. The reason behind the results is because Hierarchical and Merge do not allow workers to communicate with each other due to their parallel designs. Thus, each worker can only maintain the information in its own chunk \(c_{i}\) which blocks the understanding of the whole text, hurting the performance greatly.

## 5 Analyses

### CoA Improvement is More Obvious When RAG Fails to Retrieve Gold Answer

To demonstrate this, we first classify the samples in NarrativeQA dataset into different bins according to the position (index) of the chunk in RAG processed input that contains the gold answer. Then, we compute the average score of the CoA and RAG results of different bins. Figure 3 shows the results. As shown in the figure, RAG performs better when the index is smaller (the gold answer is nearer to the top), showing that downstream LLMs rely significantly on the quality of RAG re-ranking. Besides, the performance of RAG is positively correlated to CoA's when it successfully retrieves the gold answer. However, when RAG fails, CoA can greatly improve the performance (much higher than the tendency line).

    & HotpotQA & MNiQue & NarrativeQA & Qasper & QuALITY & QMSum & GovReport & RepoBench-P \\  Vanilla (8k) & 45.57 & 26.87 & 11.96 & 26.56 & 61.86 & 15.45 & 20.60 & 56.30 \\ Merge (8k) & 42.96 & 26.66 & 11.27 & 26.78 & 59.30 & 9.42 & 25.38 & 33.66 \\ Hierarchical (8k) & 50.62 & 29.40 & 17.04 & 31.39 & 64.20 & 15.19 & 16.54 & 27.96 \\ CoA (8k) & **53.62** & **37.09** & **25.26** & **37.17** & **65.42** & **16.77** & **26.11** & **58.25** \\   

Table 6: Comparison between CoA and other multi-agent frameworks. CoA with sequential agents outperforms other designs with multiple parallel agents including Merge and Hierarchical.

    &  &  &  \\   & No Trun. & Trun. & Average & No Trun. & Trun. & Average & No Trun. & Trun. & Average \\ 
**NarrativeQA** & & & & & & & & & & \\ Vanilla (200k) & 8.00 & 2.50 & 7.17 & 5.58 & 2.44 & 5.15 & 7.23 & 2.35 & 6.56 \\ RAG (8k) & 5.94 & 4.22 & 5.71 & 9.09 & 5.17 & 8.50 & 6.13 & 4.29 & 5.86 \\ CoA (8k) & **18.31** & **21.34** & **18.80** & **16.63** & **16.47** & **16.51** & **24.38** & **21.26** & **23.96** \\ 
**BookSum** & & & & & & & & & \\ Vanilla (200k) & 11.98 & 11.70 & 12.04 & 12.17 & 11.90 & 12.10 & 14.11 & 13.67 & 14.00 \\ CoA (8k) & **13.28** & **13.73** & **13.70** & **14.92** & **15.05** & **14.96** & **17.74** & **16.68** & **17.47** \\   

Table 5: Comparison with long context LLMs on NarrativeQA and BookSum. CoA significantly outperforms Claude 3 with 200k context limits. No Trun./Trun. indicates the source text in the sample is less/more than 200k tokens which does not need/needs truncation for vanilla (200k) baseline. Average is the mean value across all samples.

Figure 2: Performance of Claude 3 on BookSum. Improvement is more obvious for longer inputs.

### CoA Improvement is More Obvious When Long Context Models Meet Longer Inputs

We compare the performance of CoA and Vanilla with Claude 3 on BookSum. As shown in Figure 2, CoA can outperform the vanilla baseline by a large margin on various source lengths. It is worth noting that, when the length of the sample increases, the performance even increases for CoA, and the improvement over Vanilla (200k) baseline becomes more significant. The improvement of CoA reaches around 100% when the length is larger than 400k. Thus, we can conclude that 1) CoA can still enhance the LLM performance even though the model has a very long context window limit; and 2) CoA delivers more performance gains when the input is longer.

### CoA Mitigates "Lost-in-the-Middle" Phenomenon

To assess the "lost-in-the-middle"  effect on Vanilla and CoA models, we replicated the original study by randomly selecting 500 samples from their dataset to create a QA dataset. The results are displayed in Figure 4. The Vanilla model exhibits a significant "lost-in-the-middle" issue, with a performance range of 6.13 (\( 2.17\)). In contrast, CoA shows resilience against this issue, with a narrower performance gap of 4.89 (\( 1.91\)), demonstrating that CoA effectively mitigates this problem by providing each agent a shorter context to focus on.

### Multi-agent Collaboration in CoA Enables Complex Reasoning over Long Context

Figure 5 displays a sample prediction from HotpotQA. To find the correct answer, RAG retrieves text chunks with high semantic similarity with the _query_. However, conducting multi-hop reasoning is challenging as the critical first-hop _answer_ often lacks semantic relevance to the _query_. In contrast, CoA operates differently: the first agent explores related topics without knowing the query's answer, aiding subsequent inference. The second agent, also unaware of the answer, broadens the topic scope by incorporating new information. The third agent finally discovers the answer, synthesizing

Figure 5: A case study of RAG (left) and CoA (right) on HotpotQA. The sequential agent communication enables CoA to perform complex multi-hop reasoning over long contexts.

information from earlier agents and new data to complete the reasoning chain. This collaborative approach highlights CoA's ability to facilitate complex reasoning across long context tasks.

### Ablation Study: Effectiveness of Manager and Alternative Design Choices

To demonstrate the effect of the manager, we conduct an ablation study that uses the last worker to generate results directly. As shown in Table 7, "w/o Manager" hurts the performance significantly, dropping more than 10% on MuSiQue. This demonstrates the important role of the manager. Next, to empirically verify that left-to-right yields the best performance, we evaluate other orders of reading, including Right-to-Left by reading from the last chunk to the first one and Permutation which reads in random order. As shown in Table 7, on most of the datasets, left-to-right yields the highest score, demonstrating the advantages of natural reading order.

### Multi-path Chain-of-Agents Further Enhances Performance

We manually investigated the results over these three orders (left-to-right, right-to-left, permutation), and we found that other orders sometimes can produce better answers than left-to-right. Inspired by this observation, we explore two approaches to select the best result among multiple paths. w/ vote applies majority voting over the final results while w/ judge uses an LLM to judge the most reliable \(CU_{l}\) of diverse paths and generate the final answer. Oracle picks the best path by evaluating score of each path, yielding the upper bound performance. Table 8 compares three multi-path augmentation approaches. Surprisingly, results show that 1) all ensemble approaches (Bi-direction, Self-consistency, and Permutation) can further enhance the performance of CoA and 5-way Permutation yields the best improvement, 2) majority voting (w/ vote) of final answer is better than using an LLM as judge (w/ judge) in Self-consistency, but worse in Bi-direction, 3) using LLM judge (w/ judge) works well on long result generation tasks (QMSum, RepoBench-P), and 4) there is large space to improve because oracle (choose as answer the one with highest performance) is much higher than either w/ judge or w/ vote. We leave the direction of multi-path reasoning to future study.

### Practical Time Complexity

We run an analysis to show the practical time consumption of the proposed CoA on HotpotQA dataset. We choose llama3-8b as the backbone model for preventing additional untrackable latency due to the

    & HotpotQA & MuSiQue & NarrativeQA & Qasper & QuALITY & QMSum & RepoBench-P \\  CoA & 53.62 & **37.09** & **25.26** & **37.17** & **65.42** & **16.77** & 58.25 \\ w/o Manager & 48.58 & 26.79 & 20.80 & 29.66 & 58.80 & 16.50 & 56.16 \\ Right-to-Left & 51.83 & 29.77 & 21.57 & 36.60 & 62.80 & 15.91 & 55.10 \\ Permutation & **56.05** & 34.55 & 23.60 & 37.42 & 64.60 & 16.50 & **58.43** \\   

Table 7: Ablation on CoA. Manager plays an important role in CoA, and left-to-right yields the best performance among other reading orders including Right-to-Left and Permutation.

    & HotpotQA & MuSiQue & NarrativeQA & Qasper & QuALITY & QMSum & RepoBench-P \\   \\ w/ judge & 54.11 & 36.97 & 24.47 & 39.23 & 65.00 & 16.41 & 49.69 \\ w/ vote & 51.46 & 34.16 & 21.59 & 37.42 & 64.60 & 9.51 & 38.70 \\ oracle & 62.12 & 48.02 & 32.84 & 46.37 & 71.80 & 18.83 & 59.67 \\   \\ w/ judge & 57.17 & 38.82 & 21.58 & 36.24 & 62.80 & 17.06 & 46.97 \\ w/ vote & 57.49 & 40.78 & 25.56 & 39.15 & 68.60 & 8.35 & 35.56 \\ oracle & 67.07 & 55.74 & 39.89 & 52.74 & 80.40 & 20.81 & 63.52 \\   \\ w/ judge & 59.17 & 42.37 & 25.47 & 37.65 & 63.40 & 17.81 & 52.45 \\ w/ vote & 58.29 & 39.17 & 26.58 & 38.09 & 67.60 & 8.31 & 35.44 \\ oracle & 75.73 & 60.16 & 39.58 & 52.22 & 79.80 & 20.88 & 67.80 \\   

Table 8: Comparison of three multi-path augmentation through judge or voting. Multi-path CoA furthers enhance the performance.

network of API queries. As can be seen in the Table 9, Vanilla consumes the least amount of tokens and generates the least of tokens as well. However, it truncates the input thus maintaining a low performance. Although RAG generates fewer tokens than CoA (by adding retrieval and downstream input together), it needs to read the whole input by Retrieval models which also consumes additional time. Overall, RAG is faster than CoA by around 30% in this example. **Parallel decoding.** For decoder-only LLMs, CoA agents can run in parallel. Before CUs are produced, agents can start to read their assigned paragraphs and wait for the CUs to come. We conduct an approximation by asking the model to generate one token for each sample. The output time is shown to be short and negligible, mimicking the encoding time of each sample. We have found that the running time of CoA can be reduced by 57.21% on average, leading to a 1.32-second running time for each sample, closing to the running time of the Vanilla baseline.

### Information Loss

To probe the information loss during information propagation in \(CU_{i}\), we further propose a metric to analyze. For each sample, we compute the highest score between the communication unit and the gold answer, and if this score is higher than the score of the final prediction, we compute the difference and refer to this information loss, formulated as \(=(0,_{i=0}^{l}(CU_{i},Y)- (,Y))\) where score(*) is the performance metric for each task and dataset, \(Y\) is the gold answer and \(\) is the prediction. Table 10 shows the information loss of text-boson. If choosing the communication unit with the highest performance, around 1%-4% performance gain can be obtained, meaning that 1%-4% of the information is lost during the chain communication. While every method might have information loss, CoA design ensures final results yielding negligible information loss.

## 6 Conclusion

In this paper, we propose Chain-of-Agents, a multi-agent LLM collaboration framework for solving long context tasks. It is a training free, task/length agnostic, interpretable, and cost-effective framework. Experiments show that Chain-of-Agents outperforms RAG and Long Context LLMs by a large margin despite of its simple design. Analysis shows that by integrating information aggregation and context reasoning, CoA mitigates lost-in-the-middle and performs better on longer samples.

**Limitations.** While CoA features with a simple and effective design, future directions can address the following limitations to further improve its prowess and efficiency. First, communication effectiveness can be further improved via finetuning or in-context learning because current LLMs are aligned with human norms which is not optimal for communication between LLMs. Second, CoA does not explore other forms of communication approaches, such as debating or complex discussions. Third, the cost and latency of running CoA can be further reduced, such as replacing some LLMs with more effective models via model routing .

    & HotpotQA & MuSiQue & Qasper & NarrativeQA & QMSum \\  CoA performance & 54.87 & 40.38 & 37.03 & 24.04 & 17.01 \\ Information Loss & 1.46 & 1.65 & 3.92 & 3.88 & 0.91 \\   

Table 10: Information loss of text-boson model on different datasets.

    & Running Time (s) & Avg. \# of Input & Avg. \# of Output & Avg. \# Agent Output \\  Vanilla (8k) & 1.33 & 5912.85 & 2.40 & 2.40 \\ RAG (8k) & 2.41 & 16479.91 & 2.75 & 2.75 \\ CoA (8k) & 3.10 & 10840.95 & 38.38 & 11.30 \\   

Table 9: Practical time analysis on HotpotQA dataset. Avg. # of Input/Output shows the total input and output tokens for each model.