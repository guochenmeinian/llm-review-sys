# SeeA\({}^{*}\): Efficient Exploration-Enhanced A\({}^{*}\) Search by Selective Sampling

Dengwei Zhao\({}^{1}\), Shikui Tu\({}^{1}\), Lei Xu\({}^{1,2}\)

\({}^{1}\)Department of Computer Science and Engineering, Shanghai Jiao Tong University

\({}^{2}\)Guangdong Institute of Intelligence Science and Technology

{zdwccc, tushikui, leixu}@sjtu.edu.cn

Correspondence authors are Shikui Tu and Lei Xu.

###### Abstract

Monte-Carlo tree search (MCTS) and reinforcement learning contributed crucially to the success of AlphaGo and AlphaZero, and A\({}^{*}\) is a tree search algorithm among the most well-known ones in the classical AI literature. MCTS and A\({}^{*}\) both perform heuristic search and are mutually beneficial. Efforts have been made to the renaissance of A\({}^{*}\) from three possible aspects, two of which have been confirmed by studies in recent years, while the third is about the OPEN list that consists of open nodes of A\({}^{*}\) search, but still lacks deep investigation. This paper aims at the third, i.e., developing the Sampling-exploration enhanced A\({}^{*}\) (SeeA\({}^{*}\)) search by constructing a dynamic subset of OPEN through a selective sampling process, such that the node with the best heuristic value in this subset instead of in the OPEN is expanded. Nodes with the best heuristic values in OPEN are most probably picked into this subset, but sometimes may not be included, which enables SeeA\({}^{*}\) to explore other promising branches. Three sampling techniques are presented for comparative investigations. Moreover, under the assumption about the distribution of prediction errors, we have theoretically shown the superior efficiency of SeeA\({}^{*}\) over A\({}^{*}\) search, particularly when the accuracy of the guiding heuristic function is insufficient. Experimental results on retrosynthetic planning in organic chemistry, logic synthesis in integrated circuit design, and the classical Sokoban game empirically demonstrate the efficiency of SeeA\({}^{*}\), in comparison with the state-of-the-art heuristic search algorithms.

## 1 Introduction

In recent years, combining heuristic search algorithms with deep neural networks has demonstrated remarkable performance across a wide range of practical applications, such as board games , video games , traveling salesman problem , _de novo_ drug design , retrosynthetic planning , logic synthesis , and so on. The search algorithm is a slow reasoning process, and heuristic functions serve as counselors to narrow down the search space . Therefore, the effectiveness of search algorithms is significantly influenced by the quality of the guiding functions.

Monte-Carlo tree search (MCTS) is a widely-used, effective algorithm for combinatorial problems. However, if the backup value in MCTS is provided by a heuristic estimator rather than actual rewards, the convergence to the true state value is not guaranteed, leading to compromised search performance. In single-agent problems such as combinatorial puzzles, neural-guided MCTS tends to have a relatively long runtime and often generates solutions that are considerably longer than the shortest path .

A\({}^{*}\) search  is a best-first search algorithm that expands nodes with the minimum total path value \(f\) at each step. The evaluation function \(f(n)\) on a node \(n\) is defined as the summation of \(g(n)\), the accumulated cost from the initial node \(n_{0}\) to \(n\), and \(h(n)\), the expected cost from \(n\) to the goal, i.e.,

\[f(n)=g(n)+h(n).\] (1)

Notice that \(g(n)\) computes the cost from the known searching trajectory, whereas \(h(n)\) is a heuristic function to estimate the cost of the future path from \(n\) to the goal. In practice, it is usually difficult to obtain an accurate \(h(n)\). A\({}^{*}\) search is guaranteed to find the optimal solution if \(h(n)\) is admissible, i.e., \(h(n)\) never overestimates the real cost to the goal. However, due to its best-first expansion strategy, A\({}^{*}\) has limited exploration capability. If \(f(n)\) deviates from the true cost function \(f^{*}(n)\) too much, A\({}^{*}\) search may become trapped in local optimal branches, and significant efforts are required to resume expansion within the optimal branch. Consequently, the computational efficiency of A\({}^{*}\) search is compromised in practical applications, even though the optimality of A\({}^{*}\) might still hold under the guidance of \(f(n)\).

MCTS and A\({}^{*}\) both perform heuristic search. MCTS and reinforcement learning with the help of deep learning contributed crucially to the successes of AlphaGo and AlphaZero, which aroused the interest of comparing MCTS and A\({}^{*}\) for possible mutual benefits. Deep learning is also able to contribute to the renaissance of A\({}^{*}\), three possible aspects are addressed with a family of possible improvements proposed under the name of Deep IA-search . The first and also straightforward aspect is estimating \(f(n)\) with the help of deep learning, which makes current studies on A\({}^{*}\) including this paper into the era of learning aided A\({}^{*}\). The second aspect is seeking a better estimation of \(f(n)\) with the help of global or future information, featured by two typical mechanisms. One is lookahead or scouting before expanding the current node to collect future information to revise \(f(n)\) of the current node, which takes a crucial rule for the success of AlphaGo  and also used more than \(30\) years ago in Algorithm CNneim-A . The other is path consistency, that is, \(f(n)\) values on one optimal path should be identical, which has been further confirmed in recent studies . This third aspect is about selecting nodes among the OPEN list that consists of open nodes of A\({}^{*}\). It is an old tune even in the classical era of A\({}^{*}\), e.g., one suggestion is dividing OPEN into two sublists OPEN and WAIT according to a priori and a posteriori in a Bayesian evaluation . However, investigation is seldom made on what are effective and efficient ways for selecting among OPEN.

In this paper, SeeA\({}^{*}\) search (short for **S**ampling-**e**xploration **e**nhanced **A\({}^{*}\)**) algorithm is proposed by incorporating exploration behavior into A\({}^{*}\) search to target at the third aspect. The main contributions are summarized below.2

* SeeA\({}^{*}\) search employs a selective sampling process to screen a dynamic candidate subset \(\) from the set \(\) of open nodes that are awaiting expansion. The next expanding node is selected from \(\), and it may not be the node that has the best heuristic value in \(\) and will be selected by A\({}^{*}\), enabling SeeA\({}^{*}\) to explore other promising branches. To reduce the excessive expansion of unnecessary nodes during exploration, only the candidate node with the best heuristic value is expanded. Three sampling strategies are introduced to strike a balance between exploitation and exploration. The search efficiency is improved especially when the guiding heuristic function is not accurate enough.
* We theoretically prove that SeeA\({}^{*}\) has superior efficiency over A\({}^{*}\) search when the heuristic value function deviates substantially from the true state value function. SeeA\({}^{*}\) achieves a reduced number of node expansions to identify the optimal path. This performance improvement becomes more pronounced as the complexity of the problems increases and the reliability of the guiding heuristics decreases.
* Experiments are conducted on two real-world applications, i.e., the retrosynthetic planning problem in organic chemistry and the logic synthesis problem in integrated circuit design, as well as the classical Sokoban game. SeeA\({}^{*}\) outperforms the state-of-the-art heuristic search algorithms in terms of the problem-solving success rate and solution quality while maintaining a low level of node expansions.

## 2 Related work

MCTS [5; 13] utilizes random sampling and tree-based search to efficiently explore search space. Upper Confidence bounds applied to Trees with predictor (PUCT) have been employed by AlphaZero , achieving super-human performance in board games. A\({}^{*}\) search is widely employed for solving optimization problems, such as route planning [54; 53], cubic and puzzle games , robotics , and so on. Many variants of A\({}^{*}\) search have been proposed for performance improvement. Weighted A\({}^{*}\) search (WA\({}^{*}\))  biased the expanding policy towards states closer to the goal by

\[n^{*}=_{n}g(n)+ h(n),\] (2)

where \(\) is a hyperparameter to adjust the weight of the heuristic estimation \(h\). WA\({}^{*}\) with iteratively decreasing weights is employed by the LAMA planner [27; 44], achieving promising results in various domains including Sokoban. DeepCubeA  trained heuristic functions by reversing solution pathways from the goal state to guiding the search process of WA\({}^{*}\). Commonly, WA\({}^{*}\) traded optimality for speed, and increasing \(\) was assumed to result in faster searches. Additionally, the greedy search based on \(h\) values was considered the fastest search. However, empirical observations revealed that increasing \(\) slowed down the search in some domains. Greedy search is fast if and only if there is a strong correlation between the heuristic estimations and the true distance-to-go, or if the heuristic is extremely accurate . However, constructing a reliable heuristic function for complicated problems is challenging attributed to the vast search space and the difficulties associated with sample collection in real-world applications. Poor generalization performance also remains a pervasive issue across diverse practical domains, such as retrosynthetic planning. This paper sets out to develop an efficient search algorithm designed to minimize the adverse effects of inaccurate predictions by heuristic functions.

There have been some preliminary studies on the integration of exploration into the A\({}^{*}\) search. \(-\)greedy node selection was incorporated into LAMA, suggesting that exploration can improve the coverage of search algorithms even multiple enhancements were already employed . Type-WA\({}^{*}\) augments WA\({}^{*}\) with type-based exploration  in the focal list . The search space nodes are divided into \(T\) distinct groups, and one of these groups is randomly chosen to determine the expanded node. Levin tree search (LevinTS)  combined a penalization mechanism based on node depth to encourage exploration for A\({}^{*}\) search. Policy-guided heuristic search (PHS)  generalized LevinTS by introducing a heuristic factor, guided by both a value function and a policy. When the guiding heuristics are sufficiently accurate, the best-first search achieves optimal efficiency without the need for exploration. Insufficient exploration leads the search algorithm to be trapped in local optima guided by inaccurate heuristics. As the accuracy of the guiding heuristic diminishes, the importance of exploration becomes more pronounced in order to mitigate the potential misguidance.

Search algorithms have played a crucial role in solving diverse real-world problems, such as retrosynthetic planning and logic synthesis. Retrosynthetic planning aims to identify a feasible synthetic route using known available building block molecules for a given target molecule. Considering that the synthesis of target molecules typically requires multiple steps and each step encompasses a substantial number of potential chemical reactions, retrosynthetic planning is formulated as a search problem to identify the optimal synthetic pathway. Both MCTS [28; 47; 65] and A\({}^{*}\) search, such as Retro\({}^{*}\) and its descendants [24; 30; 33; 58], have demonstrated promising results in retrosynthetic planning. Logic synthesis (LS) is a crucial step in the design of integrated circuits, mapping the high-level logic circuit description into gate-level implementation. In recent years, reinforcement learning algorithms [10; 29; 34; 41; 69] and search methods [9; 37] have shown promising results in the field of LS. Besides, Sokoban is an NP-hard  and PSPACE-complete  problem, which is a benchmark problem for evaluating the performance of artificial intelligence planning algorithms. Recently, combining reinforcement learning algorithms with search-based methods has demonstrated remarkable performance in effectively solving the Sokoban problem [19; 20; 22; 31; 43].

## 3 Preliminaries and limitations on A\({}^{*}\) search

Single-agent problems solved in this paper are formulated as Markov decision processes. Let \(\) represent the set of nodes in the search tree, where each node \(n\) corresponds to a state \(s\) in the state space \(\). The set of \(n\)'s children is represented as \(CH(n)\). The root of the tree and the initial state are denoted as \(n_{0}\) and \(s_{0}\) respectively. At each interactive step, action \(a_{t}\) isapplied to the current state \(s_{t}\), resulting in the subsequent state \(s_{t+1}=(s_{t},a_{t})\) and transition cost \(c_{t+1}=c(s_{t},a_{t})\), where \(\) is the state transition function to obtain the following state \(s_{t+1}\) when taking action \(a_{t}\) at state \(s_{t}\), and \(c\) is the cost function giving the received cost when taking action \(a_{t}\) at state \(s_{t}\)..

The search tree of A\({}^{*}\) contains two distinct types of nodes: _closed nodes_, which have already been expanded, and _open nodes_, which are waiting to be expanded . Let \(\) and \(\) denote the set of open nodes and closed nodes respectively. The search process of A\({}^{*}\) can be summarized as follows:

* Step \(1\): Initialize \(n_{0}\) with \(s_{0}\), and mark it as open node by setting \(\{n_{0}\}\), \(\).
* Step \(2\): Select the node \(n\) with the lowest total path cost \(f(n)\) from the open set \(\), i.e., \(n=_{n^{}}f(n^{})\).
* Step \(3\): If the node \(n\) is the goal, terminate the search process successfully. Otherwise, expand the node \(n\), and update \(\{n\}\), \( CH(n)\{n\}\).
* Step \(4\): Repeat step \(2\) and \(3\) until \(\) becomes empty, or exceeding the predetermined maximum runtime or the number of expanded nodes, terminating with failure.

A\({}^{*}\) search always selects the node with the best heuristic value from the open set without exploration. When the heuristic function \(f\) can accurately estimate the true cost \(f^{*}\), this best-first search is the most efficient. However, if the estimation by \(f\) is not accurate enough, the node with the minimum \(f\) value may not correspond to the optimal one, which instead has the lowest \(f^{*}\) value. The search process might be trapped in a local optimal branch, and substantial computational efforts are required to resume expansion on the optimal branch, which diminishes the efficiency of the search algorithm. Considering an example in Figure 1(a), suppose the cost for each step (or edge) on the optimal path is \(100\), and on the non-optimal path is only \(1\). The true total path cost at any node \(n\) is given by \(f^{*}(n)=g(n)+h^{*}(n)\), where \(g(n)\) is given by adding the costs from the root to the node \(n\), and the real future cost \(h^{*}(n)\) is a summation of all costs from \(n\) to the end (or terminal state). Suppose the evaluation function \(f(n)=g(n)+h(n)\) by Equation 1 is exact on the optimal path but underestimates the real cost otherwise. Specifically, define the heuristic function \(h(n)\) as follows:

\[h(n)=\{h^{*}(n),&\\ 0,&.\] (3)

Then, \(h(n)\) satisfies the admissible assumption as it never overestimates the cost, and \(h(n) h^{*}(n)\) is established for all nodes. Therefore, A\({}^{*}\) is guaranteed to find the optimal solution guided by \(h(n)\) in Equation 3. However, as illustrated in Figure 1(b), guided by the defined heuristic \(h\), the nodes on the optimal path will not be expanded until all nodes on non-optimal branches with depths less than \(200\) have been expanded. The optimal solution is achieved within two steps under the guidance of \(f^{*}\), and the search efficiency of A\({}^{*}\) search is largely compromised when \(f(n)\) is not accurate enough.

## 4 Method

SeeA\({}^{*}\) search is proposed on the basis of A\({}^{*}\) search by introducing a candidate set \(\) of open nodes to provide exploration behavior. Three selective sampling strategies are presented for constructing the candidate set. Moreover, we present a theoretical analysis on the efficiency of SeeA\({}^{*}\).

### SeeA\({}^{*}\) search algorithm

SeeA\({}^{*}\) employs the following two steps to replace the Step \(2\) in A\({}^{*}\) search. First, a selective strategy is employed to sample a set of candidate nodes \(\) from the opening set \(\). Then, the node \(n\) with the lowest \(f\)-value from the candidate set \(\), instead of \(\), is chosen to be expanded in Step \(3\). The details of SeeA\({}^{*}\) are summarized in Algorithm 1 in Appendix A.

* Step \(2a\): Sample a candidate subset \(\) from \(\).
* Step \(2b\): Select the node \(n\) with the lowest \(f\)-value from the candidate set \(\).

As illustrated in Figure 1(c)&(d), if the node with minimum \(f\)-value is not sampled into the candidate set \(\) in Step \(2a\), the node selected to be expanded later is not the same as the one by A\({}^{*}\) search, which activates exploration on other branches. Step \(2b\) excludes the unpromising nodes by the \(f\)-value.

#### 4.1.1 Uniform sampling strategy

Uniform sampling guarantees an equal selection probability for each node, thereby generating a representative subset that has the same distribution of the population. The procedure is given in Algorithm 2 in Appendix A. If the desired number of candidate nodes, denoted as \(K\), is greater than the number of open nodes, the open set \(\) is used as \(\). Otherwise, \(K\) nodes are randomly selected from the open nodes as \(\). It should be noted that \(^{*}\) with uniform sampling is different from the \(\)-Greedy method. The \(\)-Greedy activates exploration with probability \(\) and then uniformly samples a node for expansion, which may expand low-quality nodes. In Step \(2a\) of \(^{*}\), uniform sampling is very likely to include at least one high-quality node with a reasonably low \(f\)-value and the node will be selected to expand in Step \(2b\). More discussions are referred to Appendix P.

#### 4.1.2 Clustering sampling strategy

In the uniform sampling strategy, each node is selected with equal probability. However, there is a non-negligible probability that all sampled nodes are of low quality, leading to the exclusion of nodes along the optimal expansion path from the candidate set \(\). Therefore, a clustering sampling strategy is proposed, and it partitions open nodes into multiple clusters and subsequently sampling nodes from each cluster, as illustrated in Figure 2 in Appendix B. At least one node from each cluster is sampled compulsorily. Consequently, the probability of including nodes on the optimal branch is increased, thereby facilitating search efficiency. On the other hand, uniform sampling strategy is equivalent to assume that the nodes follow a Gaussian distribution, whereas clustering sampling strategy assumes that the nodes follow a Gaussian mixture distribution from multiple clusters, which provides a more descriptive representation for sampling.

To reduce computational costs, competitive learning  is utilized for node clustering. After each node expansion, the incorporation of newly generated nodes into the set \(\) resembles the process of online sample acquisition in competitive learning. A clustering process is conducted simultaneously with the search process. Offline clustering algorithms, such as K-means or Gaussian mixture model, require recalculating the clustering when incorporating new nodes, thereby imposing additional computational overhead. Each node is represented by a vector extracted by a function \(f_{h}\). \(N_{c}\) cluster centers are randomly initialized as vectors with the same dimension of node embedding. During each expansion, the newly generated nodes are assigned to the cluster with the closest center separately, and the cluster center is updated by moving toward the position of the freshly added node. While preparing the candidate set \(\), nodes are sampled evenly from each cluster, and uniform sampling is employed to select nodes from each cluster. Details are displayed in Algorithm 3 \(\&\) 5 in Appendix A.

Figure 1: An illustration of how \(^{*}\) overcomes the \(^{*}\) search’s limitation. (a) An example of the search tree is guided by the true optimal value \(f^{*}(n)=g(n)+h^{*}(n)\). Values on the edge denote the cost of each step. (b) On the same example, the \(^{*}\) search is trapped in a suboptimal branch misled by the unreliable heuristics, i.e., \(f(n)=g(n)+h(n)\). (d) When the candidate set does not contain the node \(n_{1}^{*}\) with the best \(f\) value, \(n_{2}^{*}\) will be selected and explored, where \(n_{2}^{*} n_{1}^{*}\).

#### 4.1.3 UCT-like sampling strategy

In AlphaZero , PUCT achieved a good balance between exploitation and exploration with promising results. In light of this, a UCT-like sampling strategy is proposed. Due to the absence of Monte Carlo simulations, estimated \(f\) values are employed to substitute the \(Q\) value in PUCT, which is the average backup value obtained from multiple MCTS simulations. The depth of the node is employed as the penalization for exploration . Each node is evaluated by

\[E(n)=f(n)-c_{b}}}{1+d(n)},\] (4)

where \(c_{b}\) is an adjustable hyperparameter, \(d(n)\) is the depth of node \(n\), and \(d_{max}\) is the maximum depth of the open nodes. Nodes with smaller \(d(n)\) are more likely to be included in the candidate set for exploration. Despite potential errors in \(f\) value estimation, it remains a viable node evaluation metric to sample high-quality nodes, and the exploration term is beneficial in mitigating misleading of prediction errors. c to constitute the candidate set \(\). The details are summarized in Algorithm 4 in Appendix A.

### Efficiency of SeeA\({}^{*}\) search

We further provide a theoretical analysis on the efficiency of SeeA\({}^{*}\), demonstrating that SeeA\({}^{*}\) is superior to A\({}^{*}\) when the guiding heuristic function \(f\) does not estimate the true cost \(f^{*}\) accurately enough. It was claimed in A\({}^{*}\) search  that the \(f^{*}\) values of all nodes on the optimal path are equal to the same cost \(_{0}^{f}\) and lower than the \(f^{*}\) value of nodes outside the optimal path, which was assumed to be sampled from a Gaussian distribution in . In this paper, the prediction error for \(f^{*}\) is assumed to follow a uniform distribution. Here, Gaussian distribution is denoted as \((,)\) and uniform distribution is denoted as \((,)\). Formally, an assumption is made as follows.

**Assumption 4.1**: _For each node \(n\) on the optimal path, \(f(n)(_{0}^{f}-,_{0}^{f}+)\). For nodes not on the optimal path, \(f(n)(f^{*}(n)-,f^{*}(n)+)\), and \(\{f^{*}(n)\}\) are independently and identically sampled from \((_{1}^{f},_{s}^{2})\)._

The \(_{0}^{f}\) and \(_{1}^{f}\) are the expected total cost for optimal and non-optimal solutions, respectively. The inequality \(_{0}^{f}<_{1}^{f}\) holds because the optimal path has a lower cost. The \(\) represents the magnitude of the prediction error, and the \(_{s}^{2}\) is a constant as the variance. Under Assumption 4.1, we can derive:

**Corollary 4.2**: _For a node \(n\) on the optimal path and a node \(n^{}\) off the optimal path, the probability_

\[p_{}=P(f(n) f(n^{})|)\] (5)

_decreases as the prediction error \(\) increases._

It is worth noting that the establishment of Corollary 4.2 is not limited by the assumption of a uniform noise distribution in Assumption 4.1. When the noise follows a Gaussian distribution, Corollary 4.2 is still established. Refer to Appendix C for more detailed derivations.

Without loss of generality, assume the open set \(\) contains \(N_{o}\) nodes, \(\{n_{1},n_{2},,n_{N_{o}}\}\), and \(n_{1}\) is the optimal node. The probability of A* search expanding node \(n_{1}\) is

\[P_{A}()=P(n_{1}=_{n^{}}f(n^{}) )=_{n^{}\{n_{1}\}}P (f(n) f(n^{})|)=p_{}^{N_{o}-1}.\] (6)

SeeA\({}^{*}\) expands \(n_{1}\) with probability

\[P_{S}()=P(n_{1},n_{1}=_{n^{} }f(n^{}))=P(n_{1})_{n^ {}\{n_{1}\}}p_{}.\] (7)

If the uniform sampling strategy is used to select \(K\) candidates,

\[P_{S}()=}p_{}^{K-1}.\] (8)

Based on Equation 6 & 8, when the prediction error \(\) is large, SeeA\({}^{*}\) expands the optimal node with a higher probability than A\({}^{*}\) search at each step, which is given by the following theorem.

**Theorem 4.3**: \(P_{S}()>P_{A}()\) _holds if and only if_

\[p_{}<H(N_{o}),H(N_{o})=(})^{ -K}},N_{o}>K 1.\] (9)

\(H(N_{o})\) is a monotonically increasing function with respect to \(N_{o}\) which is the size of the open set. With increasing branching factors and longer solution paths for more complex problems, \(N_{o}\) grows and \(H(N_{o},K)\) monotonically increases with respect to \(N_{o}\). Especially, we have

\[_{N_{o}+}H(N_{o})=1.\] (10)

In this situation, Inequality 9 holds. SeeA\({}^{*}\) tends to demonstrate superior performance compared to A\({}^{*}\) in solving complex problems.

Notice that if the heuristic function \(f\) predicts the true cost \(f^{*}\) without error, it leads to \(p_{}=1\) in Equation 5. Then, Equation 9 does not hold, and in this case, A\({}^{*}\) search becomes more efficient than SeeA\({}^{*}\). However, learning an accurate heuristic function for complex real-world problems is quite challenging, and large prediction errors usually exist, which leads to small \(p_{}\) and the establishment of Equation 9. The number of candidate nodes \(K\) is a key hyperparameter to balance the exploitation A\({}^{*}\) and the exploration introduced by SeeA\({}^{*}\). \(P_{S}()\) in Equation 8 reaches its maximum value when \(K^{*}=-1/ p_{}\). When \(p_{}\) approaches \(1\), \(K^{*}\) will be the largest \(\). In this situation, the candidate set is the same as the open set, and SeeA\({}^{*}\) degenerates into best-first A\({}^{*}\). For small \(p_{}\), the optimal \(K^{*}\) is the smallest value \(1\) and SeeA\({}^{*}\) becomes random sampling. An appropriate value of \(K\) should be selected according to the specific situation. According to Equation 7, \(P_{S}()\) is related to both \(p_{}\) and \(P(n_{1})\). Utilizing more efficient sampling algorithms than uniform sampling is also capable to enhance the performance of SeeA\({}^{*}\). The clustering sampling and UCT-like sampling aim to achieve a higher \(P(n_{1})\) by constructing a more diverse candidate set, thereby enhancing the likelihood of expanding the optimal node.

For simplicity, suppose the probability of selecting the optimal node in a single expansion is \(P\), and the probability for expanding the optimal node becomes \(1-(1-P)^{}\) after \(\) expansions. To achieve a probability level of \(P_{min}\) for expanding the optimal node, we have

\[\}}{\{1-P\}}.\] (11)

Based on Theorem 4.3 and Equation 11, SeeA\({}^{*}\) is more efficient than A\({}^{*}\) search as it requires fewer expansions to find the optimal solution. It is noted that Equation 9 is derived on the uniform sampling strategy. For a more effective sampling strategy with a higher probability \(P(n_{1})\), SeeA\({}^{*}\) will become more efficient as \(P_{S}()\) increases.

## 5 Experiments

Real-world problems are usually complicated, and the amount of available samples for training the heuristic functions is typically small.Two real-world applications, i.e., retrosynthetic planning in organic chemistry and logic synthesis in integrated circuit (IC) design, are considered to evaluate the effectiveness of the proposed method. Since the molecular structures have enormous diversity but in contrast the available experimental data are very limited, the heuristic function to estimate the synthesis cost in retrosynthetic planning suffers from noticeable overfitting problems . Furthermore, the vast chemical reaction space gives rise to a substantial number of branching factors in the search tree, leading to a rapid growth in the quantity of open nodes throughout the search process. Logic synthesis is another practical problem where it is challenging to train a reliable heuristic function to evaluate the solution's quality, due to the immense diversity of circuit functionalities and variations in design methodologies. Therefore, the above two real-world problems are suitable benchmarks to verify the efficiency of SeeA\({}^{*}\) when the heuristic function is not accurate enough. In addition, Sokoban is a widely-used benchmark for combinatorial optimization solvers. It only permits a maximum of four legal actions at each step, and simulations can be leveraged to generate a substantial amount of data for training high-quality heuristic value estimators. Sokoban is included to verify the impact of an accurate heuristic function on the searching performance. All experiments are conducted using NVIDIA Tesla V\(100\) GPUs and an Intel(R) Xeon(R) Gold \(6238\)R CPU.

### Results on retrosynthetic planning

Chemical synthetic pathways are transformed into search trees following the literature . A state is a set of molecules that are able to synthesize the target molecule. The initial state contains only the target molecule. The edges in the search tree represent the chemical reactions that enable state transitions between the connected nodes. The retrosynthetic planning problem is solved if all molecules within a state are available building blocks. A single-step retrosynthetic prediction model is utilized as the policy model to generate potential chemical reactions yielding the input molecule. The \(50\) chemical reaction templates with the highest probabilities constitute the set of valid actions for the current state. A heuristic function is employed to estimate the synthesis cost of the molecule, given the available building blocks. Each molecule is encoded using a \(2048\)-dimensional Morgan Fingerprint vector  as the input for the heuristic functions. Both the single-step retrosynthetic prediction model and the cost estimator are provided by Retro\({}^{*}\)+  and used to guide the search algorithm. Details about the guiding heuristics are in Appendix D. The last hidden layer's output of the cost estimator is employed as the embedding representation of the input molecule.

Experiments are conducted on the widely-used USPTO benchmark, comprising \(190\) molecules . Commercially available molecules in _eMolecules3_ are used as building blocks. Since the invocation of the single-step retrosynthetic prediction model contributes the majority of the computational cost, all search algorithms are limited to a maximum of \(500\) single-step model calls, or \(10\) minutes of real-time, following previous works . The outputs of the single-step model are cached to avoid duplicate computation when the same molecule is encountered again . The size of the candidate set is set to \(K=50\). In the clustering sampling, the parameter \(\) is set to \(0.15\), and the number of clusters is \(5\). In the UCT-like sampling, the parameter \(c_{b}\) is set to \(0.35\). Additional pruning is not considered. Since the prior policy is already clipped at a minimum value of \(0.001\), Bayes mixing with a uniform policy to avoid zero-probability is not used in LevinTS  and PHS .

The results on the USPTO benchmark are reported in Table 14. Due to the exploration induced by selective sampling, the three SeeA\({}^{*}\) variants achieve superior performance in terms of the percentage of solved molecules and the average solution length while utilizing minimal wall-clock runtime. Among the three sampling strategies, the UCT-like sampling strategy achieves the best balance between exploration and exploitation. As in the literature , predicting the synthetic cost of molecules is challenging, and the cost estimator is not accurate with a non-negligible prediction error \(\). Then, it is expected and consistent with Theorem 4.3 that best-first search algorithms, including WA\({}^{*}\) and PHS, are less efficient because they excessively rely on the values of the heuristic function. MCTS requires more node expansions for problem-solving and generates solutions with longer lengths, which is consistent with the findings in the resolution of combinatorial puzzles . The \(\)-Greedy node selection  achieves a success rate of \(92.11\%\), surpassing the performance of A\({}^{*}\) search and demonstrating the practical benefits of introducing exploration when the reliability of guidance heuristics is compromised.

Six additional datasets are collected from the literature for further comparisons. These datasets comprise \(4719\) molecules, much more than the USPTO dataset. Details of the datasets are referred to the Appendix E. According to the results in Table 3& 4 in Appendix G, SeeA\({}^{*}\) maintains its superiority over other search algorithms, and SeeA\({}^{*}\)(Cluster) has the highest mean success rate of \(63.56\%\). The clustering sampling and UCT-like sampling are better than uniform sampling in terms of the solved rate and the route length, indicating that the utilization of a superior sampling strategy is beneficial for the performance of SeeA\({}^{*}\).

### Results on logic synthesis

For the logic synthesis problem, a Verilog-based hardware design is first converted into an and-inverter-graph (AIG) representation, and then the AIG is optimized to have the lowest area-delay product (ADP) through a sequence of functionality-preserving transformations. The optimization is combinatorial because the sequence is constructed by selecting transformations one-by-one in order from a set. Following the literature, here the set is formed by seven legal transformations, and the sequence length is fixed at \(10\). The _resyn2_ transformation sequence is used as a baseline for comparisons . More details about logic synthesis are in Appendix H. During the search

[MISSING_PAGE_FAIL:9]

state-of-the-art DeepCubeA  algorithm. Detailed results are summarized in Appendix M. To illustrate the effectiveness of SeeA\({}^{*}\) on problems where accurate heuristics could exist but the guiding heuristic used is unreliable, experiments on path finding are conducted. A\({}^{*}\) and SeeA\({}^{*}\) exhibit similar performance when the guidance heuristic is reliable enough. However, SeeA\({}^{*}\) demonstrates significant advantages over A\({}^{*}\) when the heuristic is unreliable. More details are available in Appendix N.

### The impact of the hyperparameters on the performance

The effects of three hyperparameters in SeeA\({}^{*}\) are empirically investigated below, i.e., the number of candidate nodes \(K\), the number of clusters \(N_{c}\), and the adjustable weight \(c_{b}\) in Equation 4. Experiments are conducted on the USPTO benchmark for the retrosynthesis planning problem. The number \(K\) is a critical parameter controlling the extent of exploration of SeeA\({}^{*}\). When \(K=1\), the node to be expanded is solely determined by the selective sampling strategy, where the heuristic function has no impact on the selection. When \(K\) is too large, all opening nodes will be finally chosen as candidates because every node has a positive chance to be selected by the sampling strategy. In this case, SeeA\({}^{*}\) degenerates back to A\({}^{*}\) which highly depends on the heuristic function. When \(K\) is at an appropriate range, the sampling scheme endows SeeA\({}^{*}\) with helpful exploratory capability. It is observed from Figure 11 in Appendix O that a wide range of \(K\) enables SeeA\({}^{*}\) to obtain superior performance. For the extreme cases, SeeA\({}^{*}\)(\(K=1\)) has the lowest success rate and longest solution length, and the performance of SeeA\({}^{*}\)(\(K=\)), which is equivalent to A\({}^{*}\), is also discounted.

According to the results in Figure 12 in Appendix O, the performance of the clustering sampling strategy is generally very robust against the choices of \(N_{c}\). An inadequate number of clusters makes it towards uniform sampling by ignoring the differences among the nodes, while an excessive cluster number will distract the sampling process by noise in the node representation learning. The hyperparameter \(c_{b}\) controls the balance between exploration and exploitation in the UCT-like sampling strategy. A large \(c_{b}\) favors exploration during the selection of candidate nodes. From Figure 13 in Appendix O, either too large or too small \(c_{b}\) are detrimental to the efficiency of SeeA\({}^{*}\), and the UCT-like sampling strategy achieves excellent results when \(c_{b}\) is in the range of \([0.15,0.4]\).

## 6 Conclusion

In this paper, the SeeA\({}^{*}\) search is proposed to enhance the exploration behavior of the A\({}^{*}\) search by selecting expanded nodes from the sampled candidate nodes, rather than the entire set of open nodes. A node that is evaluated not to have the best estimated heuristic value may be selected and explored, thereby jumping out of the local optimum induced by inaccuracies in the heuristic function. Three sampling strategies are presented in the paper. Furthermore, we have theoretically established that SeeA\({}^{*}\) is more efficient than A\({}^{*}\) search when the estimation of heuristic functions is not accurate enough. Experiments on two diverse real-world applications in chemistry and circuit design and one puzzle-solving game demonstrate the efficiency of SeeA\({}^{*}\).

If the model exhibits precise state evaluation, the incorporation of exploration into A\({}^{*}\) search becomes redundant. However, in practical applications, where problems tend to be intricate or lack sufficient training data, obtaining accurately predictive heuristic functions is challenging. As suggested in Equation 7, in addition to reducing the prediction error \(\), the probability of expanding the optimal nodes is also improved by using a smaller number of candidate nodes \(K\) to include the optimal node in the candidate set with a greater likelihood \(P(n_{1})\). Screening candidate nodes reduces the search space, thereby enhancing search efficiency. Investigations on more effective sampling strategies will be conducted in future work. SeeA\({}^{*}\) will contribute to solving practical problems with limited samples. However, this work is still in the nascent stages without further applications related to people's daily lives currently, and thus there are no immediate ethical or harmful social impacts.

## 7 Acknowledgement

This work was supported by the National Natural Science Foundation of China (grants No. 62172273) and the Shanghai Municipal Science and Technology Major Project, China (Grant No. 2021SHZDZX0102).