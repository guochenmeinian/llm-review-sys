# Interpreting CLIP with Sparse Linear

Concept Embeddings (SpLiCE \(\))

 Usha Bhalla

Harvard University \({}^{a,b}\)&Alex Oesterling\({}^{*}\)Harvard University \({}^{b}\)&Suraj Srinivas

Harvard University \({}^{b}\)&Flavio P. Calmon\({}^{}\)Harvard University \({}^{b}\)&Himabindu Lakkaraju\({}^{}\)Harvard University \({}^{b,c}\)

 Equal contribution, order by coin flip. \({}^{}\) Equal contribution, alphabetic order.

\({}^{a}\) Kempner Institute for the Study of Natural & Artificial Intelligence

\({}^{b}\) School of Engineering and Applied Sciences \({}^{c}\) Harvard Business School

###### Abstract

CLIP embeddings have demonstrated remarkable performance across a wide range of multimodal applications. However, these high-dimensional, dense vector representations are not easily interpretable, limiting our understanding of the rich structure of CLIP and its use in downstream applications that require transparency. In this work, we show that the semantic structure of CLIP's latent space can be leveraged to provide interpretability, allowing for the decomposition of representations into semantic concepts. We formulate this problem as one of sparse recovery and propose a novel method, Sparse Linear Concept Embeddings (SpLiCE \(\)), for transforming CLIP representations into sparse linear combinations of human-interpretable concepts. Distinct from previous work, SpLiCE is task-agnostic and can be used, without training, to explain and even replace traditional dense CLIP representations, maintaining high downstream performance while significantly improving their interpretability. We also demonstrate significant use cases of SpLiCE representations including detecting spurious correlations and model editing. Code is provided at https://github.com/AI4LIFE-GROUP/SpLiCE.

## 1 Introduction

Natural images include complex semantic information, such as the objects they contain, the scenes they depict, the actions being performed, and the relationships between them. Machine learning models trained on visual data aim to encode this semantic information in their representations to perform a wide variety of downstream tasks, such as object classification, scene recognition, segmentation, or action prediction. However, it is often difficult to enforce explicit encoding of these semantics within model representations, and it is even harder to interpret these semantics post hoc to better understand what models may have learnt and how they leverage this information. Further, model representations can be brittle, encoding idiosyncratic patterns specific to individual datasets and modalities instead of general human-interpretable semantic information. Multimodal models have been proposed as a potential solution to this issue, and methods such as CLIP  have empirically been found to provide highly performant, semantically rich representations of image data. The richness of these representations is evident from their high performance on a variety of tasks, such as zero-shot classification and image retrieval , image captioning , and image generation . However, despite their performance, it remains unclear how to quantify the semantic content contained in their dense representations. In this work, we answer the question: _can we decompose__CLIP embeddings into human-interpretable representations of the semantic concepts they encode?_ This can provide insight into the types of tasks CLIP can solve, the biases it may contain, and the manner through which downstream predictions are made.

Existing literature in areas such as concept bottleneck models , disentangled representation learning , and mechanistic intepretability  have proposed various approaches to understanding the semantics encoded by representations. However, these methods generally require predefined sets of concepts , data with concept labels , or rely on qualitative visualizations, which can be unreliable . Similar to these lines of work, we aim to recover representations that reflect the underlying semantics of the inputs. However, distinct from these works, we propose to do this in a task-agnostic manner and without concept datasets, training, or qualitative analysis of visualizations.

Our method, SpLiCE, leverages the highly structured and multimodal nature of CLIP embeddings for interpretability, and decomposes CLIP representations via a semantic basis to yield a sparse, human-interpretable representation. Remarkably, these interpretable SpLiCE embeddings have favorable accuracy-interpretability tradeoffs when compared to black-box CLIP representations on metrics such as zero-shot accuracy. Our overall contributions are:

* In Sections 3 and 4, we formalize the sufficient conditions under sparse decomposition of CLIP is feasible, and introduce SpLiCE, a novel method that decomposes dense CLIP embeddings into sparse, human-interpretable concept embeddings.
* Our extensive experiments in Section 5 reveal that SpLiCE recovers highly sparse1, interpretable representations with high performance on downstream tasks, while accurately capturing the semantics of the underlying inputs. * In Section 6, we present two case studies for applying SpLiCE: spurious correlation detection, and model editing. Using SpLiCE, we uncover a spurious correlation in the CIFAR100 dataset, where we find the "woman" concept and the "swimwear" concept to be correlated owing to the prevalence of women in swimwear in CIFAR100.

## 2 Related Work

**Linear Representation Hypothesis.** In language modeling, the _linear representation hypothesis_ suggests that many semantic concepts are approximately linear functions of model representations [10; 11; 12; 13; 14]. Recent work has also shown that multimodal models encode concepts additively, behaving like bags-of-words representations . Relatedly, [16; 17] show that there exists a linear mapping between image and text embeddings in arbitrary models. Our work makes use of these distinct but related observations to convert dense CLIP representations to sparse semantic ones.

**Concept Bottlenecks and Attribute Learning.** Concept Bottleneck Models (CBMs) , and attribute-based models [19; 20; 21] learn intermediate representations of scores over concepts or image

Figure 1: Visualization of SpLiCE, which converts dense, uninterpretable CLIP representations (**z**) into sparse semantic decompositions (**w**) by solving for a sparse nonnegative linear combination over an overcomplete concept set (**C**).

attributes for use with a final linear classification head, creating interpretable concept representations. However, these require expert-labeled concept or attribute datasets to train, which is expensive. Recent work on concept-bottlenecks for multimodal models avoids needing such labeled datasets, but still requires concept labels for specific tasks, which is obtained by querying large language models (LLMs) [22; 23; 24], making these methods task-specific and heavily reliant on the domain knowledge and subject to the biases of LLMs. On the other hand, SpLiCE uses a large-scale and overcomplete concept dictionary, avoiding dependence on training, specific domain knowledge, or a downstream task. Consequently, it can even be applied to understand unstructured, unsupervised image datasets in a label-free manner.

**Mechanistic Interpretability and Disentanglement.** Mechanistic interpretability explains representations through model activations, by labeling circuits and neurons in networks with feature visualization [6; 25] or by measuring concept activations and directions in latent space [26; 27; 7; 28; 29; 30]. Recent work  combines these methods, using dictionary learning to extract visual concept activations, whose semantics can be identified via feature visualization. Work in disentangled representation learning has developed architectures that capture independent factors of variation in data [8; 32; 33; 5; 34; 35], allowing for manual probing of disentangled representations for human-interpretable concepts. In both mechanistic interpretability and disentangled representation learning, methods typically rely on labeled concept sets, manual labeling of visualizations, or computationally intensive searches over data and latent representations or neurons to identify concepts. However, associating human-interpretable semantics with arbitrary neurons or latent directions is challenging, leading to the unreliability [9; 36] exhibited by such methods. Our approach side-steps this issue by decomposing CLIP representations into a predetermined set of concepts.

**CLIP Interpretability.** Many recent works leverage the semantic structure of CLIP and its text encoder to interpret representations. For example, , , and  construct concept similarity scores of image embeddings for use by downstream CBMs or probes, but these representations are not interpretable due to their lack of sparsity and the presence of negative concepts. Chen et al.  create a custom vision-language architecture with a sparse latent dictionary, but it requires training from scratch and cannot be used post-hoc to explain existing models. Gandelsman et al.  also leverage the text encoder of CLIP to explain components of the image embedding, but are limited to ViT architectures and take a mechanistic interpretability-style approach requiring a labeled text dataset. Chattopadhyay et al.  build concept bottlenecks for specific classification tasks by expressing CLIP image representations as a sparse linear combination of task-specific concept vectors. However, their decomposition includes negative concepts, reducing interpretability, and uses task-specific concept dictionaries. Grootendorst  generate textual topics of datasets through multimodal topic modeling, which cannot provide explanations of individual representations. Distinct from these works, SpLiCE is more interpretable due to its sparsity, overcompleteness, and non-negativity, and is task-agnostic, aiming to serve as a drop-in replacement for black-box CLIP representations without requiring training.

Figure 2: Example images from MSCOCO shown with their captions below and their concept decompositions on the right. We display the top seven concepts for visualization purposes, but images in the figure had decompositions with 7-20 concepts.

## 3 When do Sparse Decompositions Exist?

In this section, we aim to answer the question: _under what conditions can CLIP representations be decomposed into sparse semantic representations_? To do so, we must reason about both the properties of CLIP as well as the properties of the underlying data.

**Notation.** Let \(^{}^{d_{i}}\), \(^{}^{d_{i}}\) be image and text data, respectively. Given the CLIP image encoder \(f:^{d_{i}}^{d}\) and text encoder \(g:^{d_{i}}^{d}\), we define CLIP representations in \(^{d}\) as \(^{}=f(^{})\) and \(^{}=g(^{})\). Our method uses dictionary learning to approximate \(^{}\) with a concept decomposition \(^{*}^{c}_{+}\) over a fixed concept vocabulary \(^{d c}\). We define the resulting reconstruction of \(^{}\) from \(\) and \(^{*}\) as \(}^{}\).

The goal of our method is to approximate \(f(^{})^{*}\), such that \(^{*}\) is non-negative and sparse, and in this section we formalize when this is possible. We begin by considering a data-generating process for coupled image and text samples. Specifically, we model the generative process parameterized by a \(k\)-dimensional latent concept vector \(^{k}_{+}\) and a random noise vector \(^{l}\) as

\[^{}=h^{}(,),^{ }=h^{}(,),\ \ \ ,\ \ \ ,\]

where \(\) is a prior distribution over semantic concepts, \(\) is a prior distribution over nonsemantic concepts (such as camera orientation and lighting for images or arbitrary choices between synonyms for text), and \(h^{}:^{k+l}^{d_{i}}\), and \(h^{}:^{k+l}^{d_{i}}\) represent the real-world data-generating process from latent variables \((,)\) to images and text respectively. Here, each coordinate \(_{i}_{+}\) encodes the degree of prevalence of the \(i^{}\) concept in the underlying data. We now list a set of sufficient conditions for our data-generating process and CLIP that admit a sparse decomposition of images into concepts.

**Sufficient Conditions for Sparse Decomposition.**

1. Images and text are sparse in concept space: for some \( k\), we have \(\|\|_{0},\ \).
2. CLIP captures semantic concepts \(\) and not \(\): \(,^{},f h^{}(,)=f  h^{}(,^{})\) and similarly for \(h^{}\).
3. CLIP is linear in concept space: \(g h^{}\) and \(f h^{}\) are linear in \(\).
4. CLIP image and text encoders are aligned: for a given \(\), \(f h^{}(,)=g h^{}(,)\).

We emphasize that the goal of enumerating a set of sufficient conditions for sparse decomposition is not to claim that these exactly hold in practice, but rather to reason about when sparse decompositions-as done in this work-are appropriate. In the Appendix (Section A.1, Prop. 1) we formalize and prove this claim, but in the interest of simplicity we keep the discussion here informal. We note that many of these are natural; Assumption 1 reflects how real-world images and text are simple and rarely contain complex semantic content, and the CLIP training process optimizes for Assumption 2 and \(4^{2}\). Of these, the most critical one is Assumption 3, which closely relates to the linear representation hypothesis , which we investigate below.

Sanity Checking CLIP's Linearity.We provide evidence for the third assumption, the linearity of CLIP, in a toy setting. We begin by asking the following question to confirm the general linearity of CLIP embeddings: "if two inputs are concatenated, does their joint embedding equal the average

    & \(w_{a}\) & \(w_{b}\) & \((,z)\) \\  ImageNet & 0.48 \(\) 0.09 & 0.45 \(\) 0.09 & 0.76 \(\) 0.05 \\ CIFAR100 & 0.45 \(\) 0.08 & 0.42 \(\) 0.08 & 0.75 \(\) 0.03 \\ MIT States & 0.48 \(\) 0.09 & 0.45 \(\) 0.09 & 0.76 \(\) 0.05 \\  COCO Text & 0.59 \(\) 0.12 & 0.47 \(\) 0.12 & 0.88 \(\) 0.04 \\   

Table 1: Sanity checking the linearity of CLIP Embeddings.

of their two individual embeddings?". For the image domain, we combine two images, \(x_{a},x_{b}\), to form their composition \(x_{ab}\) by placing \(x_{a}\) in the top left quarter and \(x_{b}\) in the bottom right quarter of a blank image. For the text domain, we simply append text \(x_{b}\) to text \(x_{a}\) to form \(x_{ab}\). We then embed \(x_{a},x_{b},x_{ab}\) with CLIP to get \(z_{a},z_{b},z_{ab}\). Solving the equation \(w_{a}*z_{a}+w_{b}*z_{b}=z_{ab}\) for scalar weights \(w_{a},w_{b}\) then allows us to assess the linearity of \(z_{a},z_{b},z_{ab}\). We report \(w_{a},w_{b}\) and the cosine similarity between \(_{ab}=[z_{a},z_{b}][w_{a},w_{b}]\) and \(z_{ab}\) in Table 1.

In general, we find that the composition of two inputs results in an embedding that is approximately equal to the average of the two input components, with \(w_{a},w_{b}\) being very close to 0.5 across all datasets and for both modalities, providing preliminary evidence for the linearity of CLIP embeddings for both image and language.

## 4 Method

In this section, we introduce SpLiCE, a method for expressing CLIP's image representations as sparse, nonnegative, linear combinations of concept dictionary elements. We begin by framing this problem as one of sparse recovery. We then discuss our design choices, including how we choose the concept dictionary and how to address the modality gap between CLIP's images and text representations. Finally, we formalize the optimization problem used in this work.

### Sparse Nonnegative Concept Decomposition

Our goal is to construct decompositions of dense CLIP representations that are human-interpretable, useful, and faithful. To do so, we formulate decomposition as a sparse recovery problem with three main desiderata. First, for the decompositions to be interpretable to humans they must be comprised of human interpretable atoms. We argue that language is a naturally interpretable interface for humans, and construct our concept vocabulary \(\) out of 1- and 2-word atoms, such as "coffee", "silver", and "birthday party". Second, our decompositions must be simple and concise, which can be formulated as a sparsity constraint on the recovery. A large body of work in computational linguistics [43; 44; 45; 14], neuroscience [46; 47], and interpretability [48; 49; 30] have demonstrated that a human-aligned semantic model should be sparse in representation. Furthermore,  found that users can best understand explanations with fewer than 32 concepts while in linguistics, [50; 51; 52] find participants describe concepts and objects with up to 20 semantic properties, motivating our desiderata of sparsity. Third, our decompositions must be constructive, i.e., we must decompose representations in terms of their constituent concepts. For this reason, we require the weights of decompositions to be strictly nonnegative, to avoid having "negative" concept weights which do not always carry semantic meaning. Furthermore, prior work by Zhou et al.  has argued that _"negations of concepts are not as interpretable as positive concepts."_ More specifically, while a small set of concepts have well-defined antonyms which may be viewed as their negative counterparts ("day" \(\) "night"), negative concepts do not carry semantic meaning in general ("tiger" \(\)???). Furthermore, we find that even when antonyms exist, they are not negatives of each other in CLIP latent space (see Appendix B.10). To avoid dependence on negative weights and ensure that all concepts are captured, we construct an overcomplete dictionary containing a wide range of concepts, including antonyms. We build on top of this literature and provide a semantic decomposition satisfying these properties suitable for multimodal models like CLIP.

**Concept Vocabulary.** Natural language is an intuitive, interpretable, and compact medium for communicating semantic information. Thus, we choose to represent the semantic content contained in CLIP embeddings as combinations of natural language semantic concepts, where we define concepts as semantic units that can be expressed concisely, by one- or two-word phrases. Given that CLIP is used in a wide variety of downstream applications and is trained without a specific task in mind, we want our concept dictionary to be task-agnostic and to span _all possible concepts CLIP could have learnt_. To construct this vocabulary, we consider the most frequent one- and two-word bigrams in the text captions of the LAION-400m dataset , the dataset that most CLIP variants are trained on. We filter the captions to remove any NSFW samples and prune our concept set such that no two concept embeddings have a cosine similarity greater than 0.9. We also remove bigrams highly similar (\(>0.9\) cosine similarity) to the average of their individual words. We finally choose the top \(10,000\) most common single-word concepts and the top \(5000\) most common two-word concepts as our concept vocabulary. We note that this vocabulary offers distinct advantages over those used in prior works.

In particular, it is _task-agnostic_, meaning that the efficacy of the decomposition is (in principle) independent of individual datasets. Furthermore, this dataset imposes minimal priors from outside curators, such as human experts or LLMs [22; 23; 24]. This allows us to interpret data through the lens of CLIP, to understand the information encoded, including potential biases and mistakes.

**Modality Alignment.** In order to decompose images into nonnegative combinations of text concepts, we must ensure that our concept set spans the space of possible image embeddings. However,  show the existence of a modality gap in CLIP, where image and text embeddings can lie in non-identical spaces on the unit sphere. We empirically find that CLIP image and text embeddings exist on two cones, as the distribution of pairwise cosine similarities between pairs of MSCOCO images and pairs of MSCOCO text captions concentrate at positive values, whereas the distribution of pairwise cosine similarities across modalities concentrates closer to zero. (See Appendix Fig. 7). Not only does this prevent nonnegative decomposition, it also violates Assumption 4 from Section 3. To rectify this, we mean-center CLIP images with the image cone mean, estimated over MSCOCO (\(_{}\)), and compute decompositions over the mean-centered concept vocabulary (\(_{}\)). Note that the embeddings need to be re-normalized after centering to ensure they lie on the unit sphere. To convert our decompositions back into dense representations (\(}^{}\)), we uncenter the normalized dense embeddings \(}^{}\) by adding the image mean back in and normalizing once again, to ensure they lie on the same cone as the original CLIP embeddings (\(^{}\)).

**Optimization Problem.** Our optimization problem is formulated as follows. Let \(()=/\|\|_{2}\) be the normalization operation. Given a set of semantic concepts \(^{}=[^{}\), "tabby cat", "cloudy", \(\) ], we construct a centered vocabulary \(=[(g(^{}_{1})-_{}),, (g(^{}_{2})-_{})]\), where we recall that \(g()\) is the CLIP text encoder. Now, given the dictionary \(\) and a centered CLIP embedding \(=(^{}-_{})\), we seek to find the sparsest solution that gives us a cosine similarity score of at least \(1-\) for some small \(\):

\[_{^{+}_{+}}\|\|_{0}\ \ \ \  ,() 1-.\] (1)

Figure 3: Performance of SpLiCE decomposition representations on zero-shot classification tasks (bottom row) and cosine similarity between CLIP embeddings and SpLiCE embeddings (top row). Our proposed semantic dictionary (yellow) closely approximates CLIP on zero-shot classification accuracy, but not on the cosine similarity. This indicates that SpLiCE captures the semantic information in CLIP, but not its non-semantic components, explaining both the high zero-shot accuracy and low cosine similarity. See §5.2 for discussion.

As is standard practice, we relax the \(_{0}\) constraint and reformulate this as a minimization of MSE with an \(_{1}\) penalty, to construct the following convex relaxation3 of Eq. (1):

\[_{_{+}^{}}\|- \|_{2}^{2}+2\|\|_{1}.\] (2)

Given the solution to the above problem \(^{*}\), our reconstructed embedding is: \(}^{}=(^{*}+_{})\).

## 5 Experiments

In this section, we evaluate our method to ensure that SpLiCE decompositions are interpretable, performant, and accurately reflect the semantic content of representations.

### Setup

Models.All experiments shown in the main paper are done with the OpenCLIP ViT-B/32 model  with results for an additional model in Appendix B.14. For all zero-shot classification tasks, we use the prompt template "A photo of a \(\{\}\)". **Datasets.** We use CIFAR100 , MIT States , CelebA , MSCOCO , and ImageNetVal  for our experiments with results for additional datasets in the Appendix (Section B.4)

Decomposition.For all experiments involving concept decomposition, we use sklearn's  Lasso solver with a non-negativity flag and an \(l_{1}\) penalty that results in solutions with \(l_{0}\) norms of 5-20 (around 0.2-0.3 for most datasets).We use a concept vocabulary chosen from a subset of LAION tokens as described in Section 4.1. Both image embeddings and dictionary concepts are centered and normalized as mentioned in Section 4.1, with the image mean used for centering computed over the MSCOCO train set and the concept mean computed over our chosen vocabulary.

### Sparsity-Performance Tradeoffs

We assess the performance of SpLiCE decompositions by evaluating the reconstruction error in terms of cosine similarity between SpLiCE representations and CLIP embeddings, the zero-shot performance of SpLiCE decompositions, and the retrieval performance of SpLiCE embeddings. We compare the performance of decompositions generated from our semantic concept vocabulary to decompositions over random vocabulary and learned dictionary vocabulary baselines. All vocabularies are of size 15,000 concepts. The random vocabulary is sampled from a 512-dimensional normalized Gaussian distribution. The learned vocabularies are generated by using the Fast Iterative Shrinkage-Thresholding Algorithm (FISTA)  to learn optimal dictionaries given our sparse recovery problem (optimizing Equation (1) for both \(\) and \(w\)). Note that we learn separate dictionaries \(_{}\) and \(_{}\) to reconstruct MSCOCO image and text embeddings respectively. In Figure 3, we plot the cosine reconstruction and zero-shot accuracy of image decompositions with the various dictionaries. We evaluate probing performance (Tables 3, 4) and text-to-image and image-to-text retrieval in the Appendix (Figure B.3).

These results overall show SpLiCE efficiently navigates the interpretability-accuracy Pareto frontier and retains much of the performance of black-box CLIP representations with the semantic, human-interpretable LAION dictionary, significantly outperforming other dictionaries on semantic tasks such as zero-shot classification, probing, and retrieval. At the same time, we find that our semantic LAION dictionary does not result in accurate cosine similarity reconstructions of the original CLIP, often being on par with using random dictionaries. We believe this is because CLIP encodes both semantics of the underlying image and non-semantic "noise", which violates Assumption #2 in Section 3. Given that our SpLiCE decompositions only aim to encode semantics, they are unable to encode non-semantic aspects in the underlying representation, thus causing poor alignment in the cosine similarity sense, while simultaneously exhibiting excellent alignment on semantic tasks such as zero-shot accuracy. For ImageNet, we find that many classes are animal species that cannot easily be described by 1-2 words (e.g.'red-breasted merganser', 'American Staffordshire terrier'). Adding these class labels to our concept dictionary increases performance significantly, as shown by the dotted yellow line in Figure 3.

### Ablation Studies

We perform ablation studies to evaluate the effectiveness of the design decisions of SpLiCE, including the choice of vocabulary, the nonnegativity of the decompositions, and the modality alignment by ablating each choice and observing the effect on three metrics: zero-shot accuracy on CIFAR100, cosine similarity between the reconstructed and original embeddings of CIFAR100, and semantic relevance on MSCOCO. The first two metrics are the same as those presented in Figure 3. We compute semantic relevance by tokenizing and filtering stop-words from the MSCOCO human-generated captions and embedding each token with CLIP. Then, we take all non-zero concepts output by SpLiCE and compute the Hausdorff distance between the sets of SpLiCE concepts and caption token embeddings. This essentially measures how aligned decompositions are with human captions. We observe that replacing our dictionary with the LLM-generated concept dictionary used by [22; 24; 23] significantly worsens the decomposition in terms of zero shot accuracy and cosine reconstruction. While allowing for negative concept weights improves cosine reconstruction marginally, it decreases the semantic relevance of the decompositions, as negative concepts frequently correspond to concepts not present in images, and as such, are unlikely to be represented by human captions. Finally, we see that modality alignment is necessary across all three metrics. Overall, these ablation studies show that each aspect of SpLiCE is necessary for creating human-interpretable, semantically relevant and highly performant decompositions.

### Qualitative Assessment of Decompositions

**Concept Decompositions for Images.** We visualize SpLiCE decompositions to qualitatively assess the semantic content of the images they represent. In Figure 2 we provide six sample decompositions from MSCOCO with their corresponding captions. We display the top seven concepts for each

Figure 4: **Left:** SpLiCE decompositions of ImageNet ‘African Elephant’, ‘Curly-coated Retriever’, ‘Monarch Butterfly’, ‘Digital Clock’ classes. **Right:** Distribution of “Swimmer” concept in ‘Woman’ and ‘Man’ classes of CIFAR100.

Figure 5: Ablation study evaluating the efficacy of SpLiCE design choices across three metrics: Zero-shot accuracy, cosine reconstruction, and semantic relevance of recovered tags. We find that all of our design choices, namely non-negativity, modality alignment, and usage of large task-agnostic dictionary are essential to performance. See §5.3 for discussion.

image and find that they generally well describe the semantics of the images. We also find that these qualitative examples yield interesting and unexpected insights into both CLIP and the data. In the top left image, we see that the decomposition includes the text present on the sign in the image, revealing that CLIP prioritizes text in images over objects. For the bottom left image, the decomposition correctly includes the concept "macro shot", revealing that CLIP encodes information regarding geometric perspective. The bottom right decomposition similarly features the concept "blackandwhite bw", indicating that CLIP encodes not only the objects present in images but also information about the lighting and color. Overall, these results suggest that SpLiCE may also be used as a zero-shot image tagging method to understand images.

**Concept Histograms for Datasets.** Beyond concept-based explanations of individual images, we propose that SpLiCE can be used to better understand and summarize collections of images, such as entire datasets. To compute concept decompositions of sets of images, we decompose each individual image and aggregate the results, which we use to generate concept histograms of the dataset. We visualize four concept histograms for the ImageNet classes 'African Elephant', 'Curly-coated Retriever', 'Monarch Butterfly', and 'Digital Clock', in Figure 4. These decompositions provide information about the distribution of the data and how CLIP represents it. For example, digital clocks are differentiated from analog clocks through the concepts "1cd display" and "countdown". Monarch butterflies are highly correlated with the concept "1ilac flowers" in ImageNet, which we validated through manual inspection (nearly half of the monarch butterfly images in the validation set feature purple flowers). Interestingly, 'Curly-coated retrievers' are represented as combinations of "poole", "retriever dog", and "black dog", which perfectly describe the main characteristics of them: black retrievers with poodle-textured fur.

## 6 Case Studies and Applications of SpLiCE

In this section, we present two example case studies using SpLiCE: (1) spurious correlation and bias detection in datasets and (2) debiasing classification models. We present additional case studies for (1) and (2), as well as (3) monitoring distribution shift in Appendix B.6, B.7, B.8 B.9. We also present results from a user study to evaluate the human interpretability of SpLiCE in Appendix B.1, where we find that users prefer explanations generated by SpLiCE over existing Concept Bottleneck Model-based methods.

Discovering Spurious Correlations in CIFAR100.Existing methods to detect spurious correlations in datasets generally require subgroup and attribute labels or rely on manual human inspection of images (see  for an overview), making it hard to scale to large datasets. SpLiCE, on the other hand, allows for fast automatic detection of such biases, without any labels, training, or even a task. To illustrate this, we study two classes of CIFAR100:'man' and 'woman', in Figure 4. Upon decomposing these classes, we found that {'bra","swimwear"} were two of the top ten most common concepts in the 'woman' class. On the other hand, the only clothing-related concepts that appear in the top 50 most activated concepts for'man' are {"uniform", "tuxedo", "apparel"}. We visualize a histogram of the concept weights on swimwear- and undergarment-related concepts {"swimwear", "bra", "trunks", "underwear"} across both the train and test sets, and find that these concepts are much more likely to be activated for women than men. Manual inspection of CIFAR100 verifies the trend highlighted by SpLiCE, where _at least 70 of the 600 images in the 'woman' class feature women in bikinis, underclothes, or even partially undressed_, revealing stereotype bias in this popular dataset. We provide a similar study of the concept "desert" with respect to the 'camel' and 'kangaroo' classes in CIFAR100 in Appendix B.6.

Model Editing on CelebA Attribute Classifiers.Concept-based representations unlock a key application: being able to intervene on and edit models. This edit can be performed in two equivalent ways: either on the concept representations themselves, where we can zero out a concept or on linear probes built upon the decompositions, where we can edit the weight matrix between concepts and class labels (similar to concept bottleneck models ). Here, we evaluate the efficacy of SpLiCE for these forms of model editing. Specifically, we consider two tasks on CelebA, classifying gender and whether the subject is wearing glasses. To test representation editing, we remove the concept of "eyewear" or "glasses" from CelebA image representations by zeroing out any weight placed on these concepts in our SpLiCE decompositions and evaluate classifier performance. We report the performance of zero-shot classification and linear probes over our SpLiCE representation in Table2. In both cases, we find that we can surgically target and remove information pertaining to glasses and reduce classifier performance while preserving information relevant to gender classification. We perform a similar experiment on the Waterbirds dataset  to remove spurious background signals in B.7.

## 7 Discussion

In this work, we show that the information contained in CLIP embeddings can be approximated by a sparse, linear combination of simple semantic concepts, allowing us to interpret representations via sparse recovery. We propose SpLiCE, a method to transform the dense, uninterpretable embeddings of CLIP into human-interpretable sparse concept decompositions.

We empirically demonstrate that SpLiCE allows for an adjustable tradeoff on the interpretability-accuracy Pareto frontier, enabling users to decide the loss in performance they are willing to incur for interpretability. Furthermore, we find that the improved interpretability of SpLiCE allows for users to diagnose and fix model mistakes, ideally increasing the effectiveness and performance of the overall system using a VLM. We then provide concrete use cases for SpLiCE: spurious correlation detection and model intervention and editing, showcasing the benefits of using interpretable embeddings with known semantic content. We highlight that SpLiCE embeddings can serve as post-hoc interpretations of CLIP embeddings and can even replace them to ensure full transparency.

Broader Impact.Similar to many works in the field of interpretability, our work provides greater understanding of the behavior of models, including but not limited to the broader implicit biases they perpetuate as well as mistakes made on individual samples. We believe this is particularly salient for CLIP, which is used in a variety of applications that are widely used in practice at this moment. We hope that insights gained from such interpretability allow users to make more informed decisions regarding how they interact with and use CLIP, regardless of their familiarity with machine learning or domain expertise in the task they are using CLIP for. We also highlight that SpLiCE can be used as a visualization-like tool for exploring and summarizing datasets at scale, allowing for easier auditing of spurious correlations and biases in both datasets and models.

Limitations.In this work, we use a large, overcomplete dictionary of one- and two-word concepts, however future work may wish to expand this dictionary or learn a dictionary over tokens (in discrete language space), to capture concepts with more than two words. This may also reduce the size of the dictionary and improve computation time. We note that this dictionary was constructed by looking at token frequency in the LAION-5B dataset, which has its own biases and may not correctly capture all the salient concepts that CLIP encodes. Despite this, we find that SpLiCE performs well on a variety of tasks while outperforming state-of-the-art concept dictionaries (Fig. 5, Appendix Fig. 13) and thus we believe LAION is a good dataset to generate a concept vocabulary from. We also note that this vocabulary can be easily modified by practitioners to consider additional concepts as needed for specific use cases. Finally, SpLiCE also uses an \(_{1}\) penalty as the relaxation for \(_{0}\) regularization, but future work may consider alternative relaxations or even binary concept weights.

    & Gender & Glasses \\  ZS CLIP & 0.98 & 0.91 \\ ZS SpLiCE & 0.97 & 0.88 \\ ZS Intervention SpLiCE & 0.96 & **0.69** \\  Linear Probe & 0.89 & 0.88 \\ Intervention Probe & 0.85 & **0.59** \\   

Table 2: Evaluation of intervention on the concept ‘Glasses’ for the CelebA dataset. SpLiCE allows for surgical removal of information related to whether or not someone is wearing glasses, without impacting other features such as gender. (ZS = Zero Shot Accuracy)