# Graph Neural Networks and Arithmetic Circuits

Timon Barlag

Institute for Theoretical Computer Science

Leibniz University Hanover

Hanover, Germany

barlag@thi.uni-hannover.de &Vivian Holzapfel

Institute for Theoretical Computer Science

Leibniz University Hanover

Hanover, Germany

holzapfel@thi.uni-hannover.de &Laura Strieker

Institute for Theoretical Computer Science

Leibniz University Hanover

Hanover, Germany

strieker@thi.uni-hannover.de &Jonni Virtema

School of Computer Science

University of Sheffield

Sheffield, United Kingdom

j.t.virtema@sheffield.ac.uk &Heribert Vollmer

Institute for Theoretical Computer Science

Leibniz University Hanover

Hanover, Germany

vollmer@thi.uni-hannover.de

###### Abstract

We characterize the computational power of neural networks that follow the graph neural network (GNN) architecture, not restricted to aggregate-combine GNNs or other particular types. We establish an exact correspondence between the expressivity of GNNs using diverse activation functions and arithmetic circuits over real numbers. In our results the activation function of the network becomes a gate type in the circuit. Our result holds for families of constant depth circuits and networks, both uniformly and non-uniformly, for all common activation functions.

## 1 Introduction

Neural networks have recently received growing attention from a theoretical point of view in a number of papers studying their computational properties. Relevant to this paper are examinations of the computational power of neural networks after training, i.e., the training process is not taken into account but instead the computational power of an optimally trained network is studied. Starting already in the nineties, the expressive power of feed-forward neural networks (FNNs) has been related to Boolean threshold circuits, see, e.g., (Maass et al., 1991; Siegelmann and Sontag, 1995; Maass, 1997; He and Papakonstantinou, 2022). Most importantly, Maass (1997) showed that when restricting networks to Boolean inputs, a language can be decided by a family of (in a certain sense) "polynomial-size" FNNs if and only if it belongs to the class \(^{0}\), i.e., the class of all languages decidable by families of Boolean circuits of constant depth and polynomial size using negation gates and unbounded fan-in AND, OR, and threshold gates.

In the last five years attention has shifted to the study of _graph neural networks (GNNs)_ which is a model for machine learning tasks on graph-structured inputs. Their expressive power can be closely related to the Weisfeiler-Leman algorithm (Xu et al., 2019; Morris et al., 2019, 2021). Originally developed to solve the graph isomorphism problem, the WL algorithm is connected to fragments of first-order logic; hence the logical expressiveness of GNNs was subsequently studied. Barcelo et al.

 consider so-called logical classifiers--these are unary formulas of first-order (FO) predicate logic that classify a node in a given graph according to whether the formula holds for this node. Barcelo et al. proved that all classifiers definable in a certain fragment GC (guarded first-order logic with counting quantifiers) are computable by GNNs. The converse direction is a bit problematic; it is only known to hold for unary queries definable in first-order logic. This result has been broadened recently by [Benedikt et al., 2024] using logics with Presburger quantifiers. Barcelo et al. then consider an extension of GNNs by so-called global readout and show that these GNNs can compute all queries from the logic \(_{2}\) (first-order restricted to two variables, but extended with counting quantifiers, a superclass of GC), but the converse is open.

**Our motivation.** Neural networks in general and GNNs specifically have mostly been studied through the lens of Boolean functions. This does not necessarily reflect on the usage of machine learning models in real-world applications. We want to shift this focus to real-valued computations and hence, in this paper, we make real numbers first-class citizens. When networks are digitally simulated in practical applications, of course only rational numbers are used as inputs, and the real numbers that appear during their computation (e.g., via the sigmoid function) are approximated by rationals. However, we are interested in principal statements about the computational power of neural networks--hence we study networks as devices operating with real numbers. We do not solely consider networks that are restricted to Boolean inputs or Boolean outputs (Boolean queries, logical classifiers), as done in all the papers cited above. Instead, we consider GNNs as a model to compute functions from (vectors of) real numbers to (vectors of) real numbers, or from labeled graphs (i.e., undirected graphs whose nodes are annotated with vectors of real numbers) to labeled graphs.

Instead of turning to logics, we focus on a computation model that has been used to capture the expressivity of neural networks in the past: we use circuits, but since we turn away from the Boolean computation model, we use _arithmetic circuits_ over the reals, that is, circuits that take real numbers as inputs and have nodes that compute real functions such as addition, multiplication, projection, or a constant function. Why do we do that? It will turn out that in this way we obtain a close correspondence between GNNs and arithmetic circuits. Arithmetic circuits can in a second step be simulated by a Boolean computation model, but this does not say anything about the computational power of the networks. Going directly from neural networks to Boolean circuits mixes up two different issues and obscures statements about the power of GNNs. By separating the two aspects, we do not only obtain an upper bound, or correspondence with respect to discrete classification tasks, but an equivalence between GNNs and constant-depth arithmetic circuits over the real functions they compute. In this way, we shed more light on the computational model behind GNNs. Our results show very explicitly what the computational abilities of GNNs are and what elementary operations they can perform.

We also want to make a general statement about scaling and complexity. A common narrative nowadays seems to be that by making neural networks larger and larger, they can solve more complex reasoning tasks. However, theoretical limitations as proven in this paper show that scaling is not all we need. Our results show that to improve the expressivity of GNNs, more computationally complex aggregation and combine functions are needed. More precisely, these functions need to come outside of the class \(^{0}_{}\), which contains functions that can be computed by arithmetic circuits that are bounded in size and depth, see Definition 2.11 for a precise definition. Another approach would be to change the fixed depth framework of GNNs to one that includes recursion, for example.

Following a broad line of research outlined by Merrill , in this paper, we aim at a general statement about the computational power of neural networks following the GNN architecture, i.e., networks operating in layers where connections within layers and hence their communication capabilities correspond to the given input graph. However, contrary to most predecessor papers [Morris et al., 2019, Barcelo et al., 2020], we do not only consider so-called AC-GNNs, i.e., GNNs where the computation in each node of a layer of the network consists first of an aggregation step (collecting information from the adjacent nodes of the graph--very often simply summation), followed by a combine step (combining the aggregated information with the current information of the node--mostly a linear function followed by a unary non-linear activation function such as sigmoid or ReLU). AC-GNNs like these are just one example of a GNN architecture. We take a more general approach. The GNN framework defines a continuous graph-based "message passing" [Gilmer et al., 2017, Morris et al., 2019]. In our networks we keep the layout and message passing mechanisms of GNNs but equip the nodes in each layer with constant-depth arithmetic circuits (taken from a previously fixed basis of circuits), not limited to the usual aggregate-combine (AC) operations. We call these networksC-GNNs, circuit graph neural networks. AC-GNNs, whose aggregation function is computable by a constant-depth circuit, can be simulated by C-GNNs (using the same activation function). The computational upper bounds we obtain thus point out general computational limitations for networks following the GNN message passing framework.

**Main Results.** The main contribution of our paper is an exact correspondence between C-GNNs and arithmetic circuits. A function (from labeled graphs to labeled graphs) is computable by a C-GNN with a constant number of layers if and only if it is computable by a constant-depth arithmetic circuit over the real numbers. The activation function of the neural network will be a gate type in the arithmetic circuit. Thus, the (set of) actual activation function(s) becomes a parameter in a general statement equating the computational power of GNNs and arithmetic circuits.

A number of remarks are in order.

* Our result holds for all commonly used activation functions.
* Our result is uniform. If we start with a family of GNNs whose individual networks can be generated via some algorithm, the resulting family of arithmetic circuits will be uniform in the same way, and vice versa.
* Our result gives general limits for neural networks following the GNN message passing framework, including but not restricted to the currently widely used AC-GNNs. This means that in order to use a GNN to compute a function not computable by constant-depth arithmetic circuits, scaling GNNs up or adding computational power in the individual nodes will not help, but neural networks of a completely different architecture are needed.

This paper follows a modular approach. We stick to the GNN message passing framework, but allow computations of arbitrary power in the individual nodes of the graph. Our approach is adaptable and opens possibilities for many extensions; we point out a few in our conclusion section.

We would like to stress that theoretical insights like those presented in this paper have the potential to guide practical development. We prove principal limits of networks following the GNN framework, extending the current AC-GNNs. Our results enables the use of theoretical results regarding arithmetic circuit complexity for arguing about the complexity of GNNs. For example findings for a complexity hierarchy within the real valued \(_{}^{0}\) will lead to corresponding statements about the power of GNNs. They may also be used to design GNN architectures with provable expressivity bounds.

**Organization.** In the next section, we introduce the relevant notions about GNNs and arithmetic circuits. Section 3 contains our results. In Subsection 3.1, we introduce Circuit-GNNs as a generalization of AC-GNNs. In Subsections 3.2 and 3.3, we show how to simulate C-GNNs by arithmetic circuits, and vice versa. In Section 4, we point out a number of questions for further research. Due to lack of space, we only provide proof sketches for some of the proofs and refer to the arXiv version Barlag et al. (2024) for the full proofs.

**Related Work.** The first model of GNNs was introduced by Scarselli et al. (2009). Since then, their expressive power has been studied in numerous works and from various perspectives as discussed above. As mentioned already, Barcelo et al. (2020) established a close connection between classifiers definable in guarded \(_{2}\) and computable by AC-GNNs. It is worth to point out that a connection very close to the aforementioned one can be obtained by connecting the results of Sato et al. (2019), that relate graph neural networks with more general models of distributed computation, to the results of Hella et al. (2015), that logically characterize expressivity of those models of distributed computation with graded modal logics (known to be equivalent with guarded \(_{2}\)). Grohe (2023) very recently extended these characterization results for GNNs, and furthermore connected GNNs to Boolean circuits. He considers an FO-fragment GFO+C (guarded fragment of FO plus a more general form of counting than used by Barcelo et al.) and proves equivalence of this logic to GNNs for unary queries, that is for Boolean functions (functions with Boolean output). However, his overall result holds only in the non-uniform setting (that is, the sequence of GNNs for graphs of different sizes is non-uniform in the sense that there is not necessarily an algorithm that, given a graph size, computes that network from the sequence responsible for the given size), and the activation functions have to be "rpl approximable" (i.e., rational piecewise linear approximable, i. e., the real functions must in a certain way be a approximable by Boolean circuits or logic). This includes most of the commonly used activation functions. Since queries expressible in this logic are known to be \(^{0}\) computable, he obtains a \(^{0}\) upper bound for the computational power of GNNs. For the converse connection, an extension of GNNs is necessary, and it is shown that a unary query computable by a \(^{0}\) circuit is computable by a GNN with so-called random initialization. Another line of work that focuses on real-valued computations includes (Geerts et al., 2022) where the logic MPLang operating directly on real numbers was introduced to readily express GNN computations. The main goal of that paper was to reason about GNNs using a logic, extended by real-number computations. However, the converse connection, from MPLang to GNNs, is highly unclear. Other work addressing the precise characterizations of expressivity issues of GNNs outside of the restriction to the Boolean setting with GNNs using formal logic include (Cucala et al., 2023; Pfluger et al., 2024).To the best of our knowledge, there are no other works considering real-valued computations and circuits or arithmetic circuits. Another approach that leans more into comparing the expressivity when using different functions for aggregation in the GNN can be found in Rosenbluth et al. (2023), where they compared the expressivity of GNNs using sum as their aggregation with mean and max GNNs.

## 2 Preliminaries

Throughout this paper, the graphs we consider have an ordered set of vertices and are undirected unless otherwise specified. We use underlined letters to denote tuples, write \(||\) to denote the length of \(\) (i.e., the number of elements of \(\)), and use \([n]\) to denote the first \(n\) nonzero natural numbers \(\{1,,n\}\). For a \(k\) we denote all possible \(n\)-tuples for every \(n\) of \(^{k}\) with \((^{k})^{*}\). The notation \(\{\!\{\!\{\!\}\!\}\!\}\) is used for multisets. A restriction of a function \(f\) to set \(S\) is written as \(f!_{S}\).

**Definition 2.1**.: Let \(k\), and let \(G=(V,E)\) be a graph with an ordered set of vertices \(V\) and a set of undirected edges \(E\) on \(V\). Let \(g_{V} V^{k}\) be a function which labels the vertices with attribute vectors. We then call \(=(V,E,g_{V})\) a _labeled graph of dimension \(k\)_ and denote by \(\) the set of all labeled graphs and by \(_{k}\) the set of all labeled graphs of dimension \(k\).

For a node \(v V\), the _neighborhood of \(v\)_ is defined as \(N_{}(v)\{w V\{v,w\} E\}\).

In order to compare standard graph neural networks and the circuit graph neural networks which we will introduce later on, we fix the notion of a graph neural network first. Generally, GNNs can classify either individual nodes or whole graphs. For the purpose of this paper, we will only introduce node classification as graph classification works analogously. We focus on aggregate combine graph neural networks that aggregate the information of every neighbor of a node and then combine this information with the information of the node itself.

An _aggregation function_ (of dimension \(k\)) is a permutation-invariant function \(:^{k}^{k}^{k}\), a _combine function_ (of dimension \(k\)) is a function \(:^{k}^{k}^{k}\) and a _classification function_ (of dimension \(k\)) is a function \(:^{k}\{0,1\}\) that classifies a real vector as either true or false. Finally, an _activation function_ (of dimension \(k\)) is a componentwise function \(^{k}^{k}\).

**Definition 2.2** (AC-GNN, cf. (Barcelo et al., 2020)).: An \(L\) layer _aggregate combine graph neural network_ (AC-GNN) is a tuple \(=(\{^{(i)}\}_{i=1}^{L},\{^{(i)}\}_{i=1}^{L },\{^{(i)}\}_{i=1}^{L},),\) where \(\{^{(i)}\}_{i=1}^{L}\) and \(\{^{(i)}\}_{i=1}^{L}\) are sequences of aggregation and combine functions, \(\{^{(i)}\}_{i=1}^{L}\) is a sequence of activation functions and \(\) is a classification function.

Given a labeled graph \(=(V,E,g_{V})\), the AC-GNN model computes vectors \(_{v}^{(i)}\) for every \(v V\) in every layer \(1 i L\) as follows: \(_{v}^{(0)}=g_{V}(v)\) is the initial feature vector of \(v\), and for \(i>1\)

\[_{v}^{(i)}=^{(i)}(^{(i)}(_ {v}^{(i-1)},)),=^{(i)}(\{\!\{\!_{u}^{(i-1 )} u N_{}(v)\!\}\!\}).\]

The classification function \(^{k}\{0,1\}\) is applied to the resulting feature vectors \(_{v}^{(L)}\).

In this paper we focus on the real-valued computation part of GNNs and discard the classification function. We consider the feature vectors \(_{v}^{(L)}\) after the computation of layer \(L\) as our output. While we could also integrate \(\) into our model, for our concerns this is not needed.

Next we define arithmetic circuits as a model of computation for computing real functions. Since we will put them in the context of graph neural networks, which inherently operate on vectors of real numbers rather than individual reals, we will accordingly define arithmetic circuits relative to \(^{k}\) rather than relative to \(\), as is done more commonly (cf. e.g. (Blum et al., 1997)).

**Definition 2.3**.: Let \(k,n,m\). An \(^{k}\)_-arithmetic circuit_ with \(n\) inputs and \(m\) outputs is a simple directed acyclic graph of labeled nodes, also called _gates_, such that * there are exactly \(n\) gates labeled _input_, which each have indegree \(0\),
* there are exactly \(m\) gates labeled _output_, which have indegree \(1\) and outdegree \(0\),
* there are gates labeled _constant_, which have indegree \(0\) and are labeled with a tuple \(c^{k}\),
* there are gates labeled _projection\({}_{i,j}\)_ for \(1 i,j k\), which have in- and outdegree \(1\),
* there are gates labeled _addition_ and _multiplication_.

Additionally, both the input and the output gates are ordered.

An \(^{k}\)-arithmetic circuit \(C\) with \(n\) inputs and \(m\) outputs computes the function \(f_{C}(^{k})^{n}(^{k})^{m}\) as follows: Initially, the input to the circuit is placed in the input gates. Afterwards, in each step, each arithmetic gate whose predecessor gates all have a value, computes the respective function it is labeled with, using the values of its predecessors as inputs. By addition and multiplication we refer to the respective componentwise operations and the projection computes the function \(_{i,j}^{k}^{k}\), \((x_{1},,x_{i}, x_{k})(0,,0,j}{x_{i}},0,,0)\). Analogously, each output gate takes the value of its predecessor, once its predecessor has one. The output of \(f_{C}\) is then the tuple of values in the \(m\) output gates of \(C\) after the computation.

The _depth_ of \(C\) (written \((C)\)) is the length of the longest path from an input gate to an output gate in \(C\) and the _size_ of \(C\) (written \((C)\)) is the number of gates in \(C\). For a gate \(g\) in \(C\), we will write \((g)\) to denote the length of the longest path from an input gate to \(g\) in \(C\).

_Remark 2.4_.: In the context of the circuits over \(^{k}\) that we have just defined, a circuit over \(\) is just a circuit over \(^{1}\). Note that for circuits over \(^{1}\), projection gates are just identity gates and can therefore be omitted. It should also be noted that for any fixed \(k\), circuits over \(^{k}\) and circuits over \(\) can easily simulate each other. For a detailed explanation see the arXiv version Barlag et al. (2024).

Since an arithmetic circuit itself can only compute a function with a fixed number of arguments, we extend this definition to families of arithmetic circuits in a natural way.

**Definition 2.5**.: An \(^{k}\)_-arithmetic circuit family_\(\) is a sequence \((C_{n})_{n}\) of circuits, where each circuit \(C_{n}\) has exactly \(n\) input gates. Its _depth_ and _size_ are functions mapping natural numbers \(n\) to \((C_{n})\) and \((C_{n})\), respectively.

An arithmetic circuit family \(=(C_{n})_{n}\) computes the function \(f_{}(^{k})^{*}(^{k})^{*}\) defined as \(f_{}() f_{C_{||}}()\).

_Remark 2.6_.: Since a circuit family is an infinite sequence of circuits, one would be hard pressed to consider such a family a (finite) algorithm. Such models of computation, where a different instance is needed for any different input length, is called _non-uniform_. In order to deem a circuit family \((C_{n})_{n}\) to be an algorithm, a frequent requirement is the existence of an algorithm which, when given \(n\) as an input, outputs the circuit \(C_{n}\). Circuit families, for which such an algorithm exists are called _uniform_ circuit families. For more details on circuit uniformity, see e.g. Vollmer (1999) and for more on uniformity with respect to real computation, see Blum et al. (1997).

**Definition 2.7**.: For any \(k\) and any two functions \(s,d\), \(_{^{k}}(s,d)\) is the class of all functions \((^{k})^{*}(^{k})^{*}\) that are computable by arithmetic circuit families of size in \((s)\) and depth in \((d)\). Let \(\) be a set of functions of the form \(f^{k}^{k}\). Then \(_{^{k}}(s,d)[]\) is the class of functions computable by arithmetic circuits with the same constraints, but with additional gate types \(g_{f}\), with indegree and outdegree \(1\) that compute \(f\), for each \(f\).

We call all classes of the form \(_{^{k}}(s,d)[]\) (and their subclasses) _circuit function classes_. As usual in circuit complexity, an \(\)_-circuit family_, where \(\) is a class of functions, will denote a circuit family that computes a function in \(\).

We restrict this work to versions of one specific circuit function class.

**Definition 2.8**.: \(^{0}_{^{k}}\) is the class of all functions \(f(^{k})^{*}(^{k})^{*}\) that can be computed by arithmetic circuit families \((C_{n})_{n}\) of constant depth and polynomial size, i.e., \(^{0}_{^{k}}=_{ ^{k}}(n^{(1)},1)\).

By Definition 2.7, \(^{0}_{^{k}}[]\)-circuit families are \(^{0}_{^{k}}\)-circuit families where the circuits are expanded by additional gate types for all functions in \(\).

A node in a graph neural network aggregates the values of its neighbors in each step, irrespective of their order, and then combines them with its own previous value. In order for our circuits to mimic this behaviour, we impose a symmetry condition on them. We require the functions they compute to be _tail-symmetric_, i.e., to only be able to single out their first argument.

**Definition 2.9**.: A function \(f(^{k})^{*}(^{k})^{*}\) is _tail-symmetric_, if \(f(_{1},,_{n})=f(_{1},(_{2},,_{n}))\) for all permutations \(\).

_Remark 2.10_.: One way to construct a tail-symmetric function \(f\) is to take a binary function \(g\) and a fully symmetric function \(h\) of arbitrary arity and compose them: \(f(x_{1},,x_{n}) g(x_{1},h(x_{2},,x_{n}))\). Note that this is precisely the notion required for the aggregate-combine step in AC-GNNs as per Definition 2.2.

An arithmetic circuit \(C\) is _tail-symmetric_ if \(f_{C}\) is tail-symmetric. In the sequel, we will consider families of tail-symmetric functions computed by some circuit family \(\). In this setting, the circuit family computes one unique function \(f_{n}\) for each arity \(n\). We will then write \(f_{}(_{1},\{_{2},, _{n}\})\) to denote \(f_{n}(_{1},,_{n})\), when \(\{_{2},,_{n}\}\) is a multiset of cardinality \(n-1\).

**Definition 2.11**.: Let \(\) be a circuit function class. We denote by \(t\) the class which contains all functions of \(\) that are tail-symmetric.

## 3 Graph Neural Networks using Circuits

We now define the main computation model of interest for this paper, namely circuit graph neural networks (C-GNNs). C-GNNs work similarly to plain AC graph neural networks. Instead of using the concept of a two-step aggregate and combine computation via which the new feature vector of a node is computed, C-GNNs permit that this computation is done by an arithmetic circuit (with particular resource bounds). This allows us to classify GNNs based on the complexity of their internal computing functions.

### Model of Computation

A _basis_ of a C-GNN is a set of functions of a specific circuit function class along with a set of activation functions. The respective networks will be based on these functions.

**Definition 3.1**.: Let \(\) be a non-empty set of functions from \((^{k})^{*}\) to \((^{k})^{*}\) and let \(\) be a non-empty set of activation functions of dimension \(k\). Then we call the set \(\) a _C-GNN-basis_ of dimension \(k\).

C-GNNs of a particular basis essentially consist of a fixed depth and a function assigning circuit families and activation functions from its basis to its different layers.

**Definition 3.2**.: Let \(B=\) be a C-GNN-basis of dimension \(k\). A _circuit graph neural network (of dimension \(k\))_ of depth \(d\) is a function \([d] B\). If all functions in \(\) belong to a circuit function class \(\), we also say that \(\) is a \((,)\)-GNN.

**Definition 3.3**.: Let \(\) be a C-GNN of depth \(d\). The function \(f_{}_{k}_{k}\) computed by \(\) is defined as follows:

Let \(=(V,E,g_{V})\) be a labeled graph. The labeled graph \(^{}\) computed by \(f_{}()\) has the same structure as \(\), however, its nodes have different feature vectors. That is \(f_{}()=^{}\), where \(^{}=(V,E,h_{V})\) and \(h_{V}\) is defined inductively as follows:

\[h_{V}^{(0)}(w) \,g_{V}(w)\] \[h_{V}^{(i)}(w) \,^{(i)}(f_{^{(i)}}(h_{V}^{(i-1 )}(w),M)),M=\{\!\!\{h_{V}^{(i-1)}(u) u N_{ }(w)\}\!\!\}\]

where \((i)=(^{(i)},^{(i)})\). Finally \(h_{V}(w) h_{V}^{(d)}(w)\).

The C-GNN model that we have just defined computes functions from labeled graphs to labeled graphs (with the same graph structure).

Our results are stated for C-GNNs using functions from versions of the function class \(_{^{k}}^{0}\) as defined in Definitions 2.8 and 2.11.

_Remark 3.4_.: We can relate our C-GNN model to the continuous computation of traditional AC-GNNs. For any AC-GNN following Definition 2.2 with activation functions \(\) and where the aggregation functions are computable by \(^{0}_{^{k}}\)-circuit families, there exists a \((^{0}_{^{k}},)\)-GNN with a constant number of layers which computes the same function, omitting only the functionality of the classification function. This holds for the common aggregation functions like the sum, product or mean.

### Simulating C-GNNs with arithmetic circuits

**Definition 3.5**.: Let \(=(V,E,g_{V})\) be a labeled graph, \(n|V|\), and \(M=()\) be the adjacency matrix of \((V,E)\), where the columns are ordered in accordance with the ordering of \(V\). We write \( M\) to denote the encoding of \(M\) as the \(n^{2}\) matrix entries written using vectors \((0,,0)\) and \((1,,1)\) in \(^{k}\), ordered in a row wise fashion. We denote them by \(_{ij}\) encoding the matrix entry \(m_{ij}\). We write \(\) to denote the encoding of \(\) as a tuple of real valued vectors, such that \(=( M,())( ^{k})^{n^{2}+n}\), which consists of the encoding of \(M\) followed by \(()\), the feature vectors of \(\). The feature vectors \(()\) are \(g_{V}(v)\) for all \(v V\) and ordered like \(V\).

**Theorem 3.6**.: _Let \(\) be a \((t^{0}_{^{k}}[],\{\})\)-GNN. Then there exists an \(^{0}_{^{k}}[]\)-circuit family \(\), such that for all labeled graphs \(\) the following holds: \(f_{}()=^{}\) iff \(()=^{}\), where \(=((), ())\)._

Proof.: We essentially roll out the given \((t^{0}_{^{k}}[],\{\})\)-GNN \(\) by using a circuit to simulate each individual layer of \(\) and concatenating these circuits to then simulate \(\). Since the computation in each node of \(\) can be performed by a circuit of an \(^{0}_{^{k}}[]\)-family, simulating this computation can be done without an issue. Similarly, connecting the simulated nodes and layers can be done relatively simply, and thus the resulting circuit family is an \(^{0}_{^{k}}[]\)-family. The full proof can be found in the arXiv version Barlag et al. (2024). 

_Remark 3.7_.: Note that this proof preserves uniformity: if the sequence of C-GNNs is uniform, so is the circuit family. Furthermore, for any set of activation functions \(\), \((t^{0}_{^{k}}[],\{\})\)-GNNs are at least as powerful as \((t^{0}_{^{k}},\{\})\)-GNNs and \((t^{0}_{^{k}},\{\})\)-GNNs. The latter do not have access to the functions of \(\) at all and \((t^{0}_{^{k}},\{\})\)-GNNs are more restricted in the use of the functions than \((t^{0}_{^{k}}[],\{\})\)-GNNs.

### Simulating arithmetic circuits with C-GNNs

In order to simulate \(^{0}_{^{k}}\)-circuit families using C-GNNs, we utilize the following normal form.

**Definition 3.8**.: A circuit \(C\) is in _path-length normal form_ if every path from an input to an output gate has the same length and every non-input and non-output gate has exactly one successor.

**Lemma 3.9**.: _Let \(\) be an \(^{0}_{^{k}}\)-circuit family. Then for every circuit \(C\) there exists a circuit \(C^{}\) of the same depth in path-length normal form such that \(f_{C^{}}()=f_{C}()\), for all \((^{k})^{*}\)._

Proof.: We describe a procedure that transforms \(C\) to \(C^{}\). If a gate \(h\) in \(C\) has more than one successor, the subgraph consisting of \(h\) and all paths from input gates to \(h\) are copied in \(C^{}\) for each successor of \(h\). These copies are then used as the respective input for those successors which results in every gate in \(C^{}\) having only one successor. This is done iteratively, where in each step only gates in one depth layer of the circuit are modified, starting with depth 1, the gates closest to the input gates. Each step in this procedure incurs a polynomial overhead in size. Since \(C\) is of constant depth there are only constantly many iteration steps and thus \(C^{}\) remains polynomial in size.

Let \(_{max}=(C)(=(C^{}))\) be the length of the longest path from an input to an output node in \(C\). For every path of length \(\) which is shorter than \(_{max}\), we add to \(C^{}\)\(_{max}-\) unary addition gates directly after the input. The depth of the resulting circuit \(C^{}\) equals the one of \(C\), as all changes to path lengths are made with this upper bound in mind. Since all changes made preserve the computed function and the produced \(C^{}\) is in path-length normal form, the claim follows. 

Since C-GNNs get labeled graphs as their input, while arithmetic circuits typically work on vectors over \(^{k}\), we show next how to represent a circuit as an input to a C-GNN.

**Definition 3.10**.: If \(C\) is a circuit with input \(\) whose gates are additionally numbered with unique elements of \(\), let \(_{C,}\) be the labeled graph \((G,g_{V})\), where \(G=(V,E)\) is the underlying graph of the circuit and the function \(g_{V}\) is defined as follows. The feature vector of a graph node corresponding to an input gate is the corresponding input value. Each other node gets its own number according to the gate numbering of the circuit as its feature vector.

The following theorems describe how C-GNNs are able to simulate arithmetic circuits. The proofs are given for \(\) circuits, but as mentioned in Remark 2.4 families of constant depth and polynomial size \(^{k}\) and \(\) circuits can simulate each other with constant increase/decrease in size, so they also hold for \(^{k}\) circuits.

**Theorem 3.11**.: _Let \(=(C_{n})_{n}\) be an \(^{0}_{}\)-circuit family. Then there exists a \((t^{0}_{},\{\})\)-GNN \(\), such that for all \(n\) and \(^{n}\), the feature vectors of the nodes of \(f_{}(_{C_{n},})\) corresponding to output gates in \(C_{n}\) are exactly the components of \(f_{C_{n}}()\) in the same order. The number of layers in \(\) is equal to the depth of \(\)._

Proof.: The general idea is to use the graphs of the circuits from \(\) as input graphs for a C-GNN and then simulate the gates layerwise. The gates of \(\) are numbered and the numbering is represented in the feature vectors for each node. In each layer circuits of the C-GNN use a lookup table to decide which operation is applied to a feature vector. An example illustrating the proof idea is given in Figure 1 and Table 1. For simplicity reasons an example omitting any special cases is chosen. The full proof can be found in the arXiv version Barlag et al. (2024). 

Since we have shown in Section 3.2 that C-GNNs can be simulated by \(^{0}_{^{k}}[]\)-circuit families we now examine the converse direction: simulating these families with C-GNNs.

**Theorem 3.12**.: _Let \(=(C_{n})_{n}\) be an \(^{0}_{}[]\)-circuit family. Then there exists a \((t^{0}_{}[],\{\})\)-GNN \(\), such that for all \(n\) and \(^{n}\), the feature vectors of the nodes of \(f_{}(_{C_{n},})\) corresponding to output gates in \(C_{n}\) are exactly the components of \(f_{C_{n}}()\) in the same order. The number of layers in \(\) is equal to the depth of \(\)._

   Layer & \(_{_{1}}\) & \(_{_{2}}\) & \(_{_{3}}\) & \(_{+}\) & \(_{}\) \\ 
1 & 6 & 9 & 5 & 1 & 2 \\
2 & 6 & 9 & 5 & \(6+9=15\) & 2 \\
3 & 6 & 9 & 5 & \(15\) & \(5 15=75\) \\   

Table 1: Example illustrating the proof of Theorem 3.11: The values of the feature vectors during the computation of the C-GNN.

Figure 1: Example illustrating the proof of Theorem 3.11. 3Proof.: The proof follows the same concept as the proof of Theorem 3.11. With the exception that the internal circuits of the C-GNN now have access to the same set of functions \(\) in the form of gates that compute them. Those are then used to simulate gates from \(\) that compute functions of \(\). The full proof can be found in the arXiv version Barlag et al. (2024). 

In the previous two theorems, we have shown that C-GNNs can simulate \(^{0}_{}\)-circuit families as is and that they can simulate \(^{0}_{}[]\)-circuit families if they have arbitrary access to the functions in \(\). If we consider \(\) to consist of activation functions, though, it would be more natural to only permit them as such in our C-GNN model. In the following we will introduce a structural restriction of circuits, which will allow us to capture a subset of \(^{0}_{}[]\) using C-GNNs that have access to \(\) only as activation functions.

**Definition 3.13**.: A circuit \(C\) is said to be in _function-layer form_ if it is in path-length normal form and for each depth \(d}(C)\) all gates of \(C\) at depth \(d\) have the same gate type.

**Definition 3.14**.: Let \(\) be a circuit function class. We denote by \(f\) the class which contains all functions of \(\) that can be computed by circuit families where all circuits are in function-layer form.

We also need a small restriction on the functions we will permit as activation functions.

**Definition 3.15**.: A computable function \(f^{k}^{k}\) is _countably injective_ if there is a countably infinite set \(S^{k}\) such that \(f|_{S}\) is injective. We also say that \(f\) is countably injective on \(S\).

_Remark 3.16_.: The commonly used activation functions \((x)=(0,x)\), \((x)=^{-x}}\) and \((x)=^{x}-^{-x}}{^{x}+^{-x}}\) are countably injective.

**Theorem 3.17**.: _Let \(\) be a set of countably injective activation functions and let \(=(C_{n})_{n}\) be a \(f^{0}_{}[]\)-circuit family. Then there exists a \((t^{0}_{},\{\})\)-GNN \(\), such that for all \(n\) and \(^{n}\), the feature vectors of the nodes of \(f_{}(_{C_{n},})\) corresponding to output gates in \(C_{n}\) are exactly the components of \(f_{C_{n}}()\) in the same order. The number of layers in \(\) is equal to the depth of \(\)._

Proof.: Contrary to the proof of Theorem 3.12 the gates in \(\) computing a function \(\) are simulated in the C-GNN by using the respective function as an activation function applied to all

   Layer & \(_{_{1}}\) & \(_{_{2}}\) & \(_{}\) & \(_{}^{}\) & \(_{+}\) \\ 
1 & \(6\) & \(9\) & \(1\) & \(2\) & \(3\) \\
2 & \((6)\) & \((9)\) & \((1)\) & \((9)\) & \((^{-1}(3))=3\) \\
3 & \((6)\) & \((9)\) & \((1)\) & \((9)\) & \((6)+(9)\) \\   

Table 2: Example illustrating the proof of Theorem 3.17: The values of the feature vectors during the computation of the C-GNN.

Figure 2: Example illustrating the proof of Theorem 3.17. 3

nodes. To distinguish between nodes where this function should and should not be applied we assign \(^{-1}\) of the respective feature vectors of nodes where we do not want to change the value. This is done prior to the application of the activation function. Therefore the function needs to be injective on some countable set. An example illustrating the proof idea is given in Figure 2 and Table 2. As in the proof of Theorem 3.17 an example omitting any special cases is chosen. The full proof can be found in the arXiv version Barlag et al. (2024). 

## 4 Conclusion

In this paper we showed a correspondence between arithmetic circuits and a generalization of graph neural networks using circuits. However, some restrictions needed to be imposed on the particular circuits used in our constructions. In particular, the circuits used in our C-GNNs need to be tail symmetric, and in Theorem 3.17 the corresponding \(^{0}_{}[]\)-circuit family needs to be in function-layer form as well. An interesting avenue for further research is the question, whether those restrictions can be made "on both sides in our simulations". This means, in particular, to ask if \((t^{0}_{^{k}},\{id\})\)-GNNs can be simulated by \(f^{0}_{^{k}}[]\) families and, if \((tf^{0}_{^{k}},\{id\})\)-GNNs and \(f^{0}_{^{k}}[]\) can simulate each other. Another direction of further work is to study whether by relating our C-GNNs to variants of so-called VVc-GNNs of Sato et al. (2019), we may drop the assumption of tail-symmetry.

We already mentioned the issue of uniformity. If the sequence of GNNs, one for each graph size, is uniform in the sense that there is an algorithm that, given the size of the graph as an input, outputs the GNN responsible for that size, then the sequence of arithmetic circuits will also be uniform, because our simulation proof explicitly shows how to construct the circuit; and vice versa. In future work, this should be made more precise. In the case of Boolean circuits, logtime-uniformity (\(_{E*}\)-uniformity) has become the standard requirement (Vollmer, 1999). What is the corresponding precise uniformity notion for GNNs?

In the introduction we mentioned the complexity of the problem of training neural networks. We studied the expressiveness (or computational power) of neural networks. The higher the expressiveness of a network is, the more complicated the training process will be; however, the question to decide if a trained network of given quality exists might become easier to decide. Can this be made precise? Is there a formal result connecting complexity of training and network expressiveness?

Further investigations are required to obtain practical implications of our theoretical results. Once we fix the architecture of our C-GNNs (i.e., a circuit function class for the GNN nodes), we obtain a specific circuit class that characterizes the computational power of the C-GNN model which can be then rigorously studied. The question of what can be computed by arithmetic circuits using activation functions is related to the question of which functions can be computed using other functions, or in other words, which functions are "more complex" than others. We are only aware of very little work in this area. Results include a PTIME upper bound (in the so-called _BSS_-model of computation) for the arithmetic circuit complexity class \(_{}\) that uses the sign function Cucker (1992).

As it currently stands, there does not seem to be meaningful experiments that could be run for our model of computation. The problem is that not much is known about the computational power of the circuit classes we utilize. Further research into functions computable by practically implementable arithmetic circuits of different sizes and depths would be required. This could e.g. be done by investigating the Boolean parts of different complexity classes defined by families of arithmetic circuits, i.e., the classes when restricted to Boolean inputs. This research would pinpoint properties that would be provably outside of the capabilities of particular GNN models, whose learnability could be then tested in practice. We believe that our results will motivate research for these circuit classes.

Merrill et al. (2022), Merrill and Sabharwal (2022) have studied transformer networks from a computational complexity perspective and obtained a \(^{0}\) upper bound, similar to the result for GNNs by Grohe (2023). We think it is worthwhile to study the computational power of transformers from the point of view of computation over the reals, similar to what we have done in this paper for GNNs.