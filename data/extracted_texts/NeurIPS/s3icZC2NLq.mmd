# A Nearly Optimal and Low-Switching Algorithm for Reinforcement Learning with General Function Approximation

A Nearly Optimal and Low-Switching Algorithm for Reinforcement Learning with General Function Approximation

Heyang Zhao

Department of Computer Science

University of California, Los Angeles

Los Angeles, CA 90095

hyzhao@cs.ucla.edu

Jiafan He

Department of Computer Science

University of California, Los Angeles

Los Angeles, CA 90095

jiafanhe19@ucla.edu

&Quanquan Gu

Department of Computer Science

University of California, Los Angeles

Los Angeles, CA 90095

qgu@cs.ucla.edu

###### Abstract

The exploration-exploitation dilemma has been a central challenge in reinforcement learning (RL) with complex model classes. In this paper, we propose a new algorithm, Monotonic Q-Learning with Upper Confidence Bound (MQL-UCB) for RL with general function approximation. Our key algorithmic design includes (1) a general deterministic policy-switching strategy that achieves low switching cost, (2) a monotonic value function structure with carefully controlled function class complexity, and (3) a variance-weighted regression scheme that exploits historical trajectories with high data efficiency. MQL-UCB achieves minimax optimal regret of \((d)\) when \(K\) is sufficiently large and near-optimal policy switching cost of \((dH)\), with \(d\) being the eluder dimension of the function class, \(H\) being the planning horizon, and \(K\) being the number of episodes. Our work sheds light on designing provably sample-efficient and deployment-efficient Q-learning with nonlinear function approximation.

## 1 Introduction

In reinforcement learning (RL), a learner interacts with an unknown environment and aims to maximize the cumulative reward. As one of the most mainstream paradigms for sequential decision-making, RL has extensive applications in many real-world problems (Kober et al., 2013; Mnih et al., 2015; Lillicrap et al., 2015; Zoph and Le, 2016; Zheng et al., 2018). Theoretically, the RL problem is often formulated as a Markov Decision Process (MDP) (Puterman, 2014). Achieving the optimal regret bound for various MDP settings has been a long-standing fundamental problem in RL research. In tabular MDPs where the state space \(\) and the action space \(\) are finite, the optimal regret bound has been well-established, ranging from the episodic setting (Azar et al., 2017; Zanette and Brunskill, 2019; Simchowitz and Jamieson, 2019; Zhang et al., 2020), average-reward setting (Zhang and Ji, 2019) to the discounted setting (He et al., 2021). Nevertheless, these regret guarantees are intolerably large in many real-world applications, where the state space \(\) and the action space \(\) are often large or even infinite.

As is commonly applied in applications, _function approximation_ has been widely studied by theorists to demonstrate the generalization across large state-action spaces, proving the performance guarantees of various RL algorithms for specific function classes. There are recent works on RL with linear function approximation under different assumptions such as linear MDPs (Yang and Wang, 2019; Jin et al., 2020), linear mixture MDPs (Modi et al., 2020; Ayoub et al., 2020; Zhou et al., 2021). Among them, Zhou et al. (2021) achieved nearly optimal regret bounds for linear mixture MDPs through a model-based approach adopting variance-weighted linear regression. Later, Hu et al. (2022) proposed LSVI-UCB+ algorithm, making an attempt to improve the regret for linear MDP through an over-optimistic value function approach. However, their analysis was later discovered to suffer from a technical issue (Agarwal et al., 2022; He et al., 2022). To fix this issue, Agarwal et al. (2022) introduced similar over-optimistic value functions to construct a monotonic variance estimator and a non-Markov policy, achieving the first statistically optimal regret for linear MDPs. They also proposed a novel algorithm dubbed VOQL for RL with general function approximation. Concurrently, He et al. (2022) proposed LSVI-UCB+, which takes a different approach and employs a rare-switching technique to obtain the optimal regret. In a parallel line of research, there has been a growing body of literature proposing more general frameworks to unify sample efficient RL algorithms, e.g., Bellman rank (Jiang et al., 2017), Witness rank (Sun et al., 2019), eluder dimension (Russo and Van Roy, 2013), Bellman eluder dimension (Jin et al., 2021), Bilinear Classes (Du et al., 2021), Decision-Estimation Coefficient (Foster et al., 2021), Admissible Bellman Characterization (Chen et al., 2022) and Decoupling Coefficient (Agarwal and Zhang, 2022, 2022). However, when applying these frameworks to linear MDPs, none of them can achieve the minimax optimal regret. To our knowledge, Agarwal et al. (2022) is the only algorithmic framework achieving optimal regret for RL beyond linear function approximation. Since VOQL requires a non-Markov planning procedure, where the resulting policy does not act greedily with respect to a single optimistic value function, it is natural to ask

_Can we develop a RL algorithm with Markov policy1 to solve MDPs with general function approximation and achieve the optimal regret?_

While the sample efficiency of RL algorithms for MDPs with nonlinear function classes has been comprehensively researched, _deployment efficiency_(Matsushima et al., 2020) is also a major concern in many real-world application scenarios. For example, in recommendation systems (Afsar et al., 2022), it may take several weeks to deploy a new recommendation policy. On the other hand, the system is capable of collecting an enormous amount of data every minute implementing a fixed policy. As a result, it is computationally inefficient to change the executed policy after each data point is collected as is demanded by most of the online RL algorithms in theoretical studies. To resolve this issue, Bai et al. (2019) first introduced the concept of switching cost, defined as the number of policy updates. Following this concept, a series of RL algorithms have been proposed on the theoretical side with low switching cost guarantees (e.g., Zhang et al., 2020; Wang et al., 2021; Qiao et al., 2022; Kong et al., 2021; Velegkas et al., 2022; Li et al., 2023). Xiong et al. (2023) considered low-switching RL with general function approximation, which achieves \((dH)\) switching cost. However, their algorithm has an intractable planning phase and is not statistically optimal. Kong et al. (2021), Velegkas et al. (2022), and Li et al. (2023) considered RL with general function approximation, all of which achieved the switching cost of \(O(d^{2}H(K))\), where \(d\) is the eluder dimension of the underlying function class, \(H\) is the planning horizon, and \(K\) is the number of episodes. In contrast, Gao et al. (2021) proved an \((dH/ d)\) lower bound of switching cost for any deterministic algorithms in learning linear MDPs. Therefore, the following question remains open:

_Can we design an efficient algorithm with \((dH)\) switching cost for MDPs with bounded eluder dimension?_

In this paper, we answer the above two questions simultaneously by proposing a novel algorithm _Monotonic Q-Learning with UCB (MQL-UCB)_ with all the aforementioned appealing properties. At the core of our algorithmic design are the following innovative techniques:* We propose a novel policy-switching strategy based on the cumulative sensitivity of historical data. To the best of our knowledge, this is the first computationally-tractable deterministic rare-switching algorithm for RL with general function approximation which achieves \((dH)\) switching cost. We also prove a nearly matching lower bound for any algorithm with arbitrary policies including both deterministic and stochastic policies (See Theorem B.1). Previous approaches for low switching cost in RL with general function approximation are sampling-based (Kong et al., 2021; Velegkas et al., 2022; Li et al., 2023) and highly coupled with a sub-sampling technique used for regression, making it less efficient. When restricted to the linear case, sampling-based rare-switching has a worse switching cost of \((d^{2}H)\) (Section 3.3 in Kong et al. 2021; Theorem 3.3 in Velegkas et al. 2022; Section C in Li et al. 2023) than that in Wang et al. (2021).
* With the novel policy-switching scheme, we illustrate how to reduce the complexity of value function classes while maintaining a series of monotonic value functions, strictly generalizing the LSVI-UCB++ algorithm (He et al., 2022) to general function class with bounded eluder dimension. Based on the structure of the value functions, we further demonstrate how MQL-UCB achieves a variance-dependent regret bound that can gracefully reduce to a nearly constant regret for deterministic MDPs. While in the worst case, our algorithm still attains a nearly minimax optimal regret guarantee. Our work is the first work for RL with general function approximation that achieves the nearly minimax optimal regret when specialized to linear MDPs, while still enjoys simple Markov planning phase.

It is worth noting that recently, Qiao et al. (2023) also considered RL with low-switching cost beyond linear function approximation, i.e., MDPs with low inherent Bellman error (Zanette et al., 2020) and generalized linear MDPs (Wang et al., 2020). Their approach can be seen as a slight extension of RL with low-switching cost for linear MDPs, since in both settings, the covariance matrix still exists and they can still use the determinant of the covariance as a criterion for policy switching.

Notation.We use lower case letters to denote scalars and use lower and upper case bold face letters to denote vectors and matrices respectively. We denote by \([n]\) the set \(\{1,,n\}\). For two positive sequences \(\{a_{n}\}\) and \(\{b_{n}\}\) with \(n=1,2,,\) we write \(a_{n}=O(b_{n})\) if there exists an absolute constant \(C>0\) such that \(a_{n} Cb_{n}\) holds for all \(n 1\) and write \(a_{n}=(b_{n})\) if there exists an absolute constant \(C>0\) such that \(a_{n} Cb_{n}\) holds for all \(n 1\). We use \(()\) to further hide the polylogarithmic factors except log-covering numbers. We use \(\{\}\) to denote the indicator function.

   Algorithm & Regret & \# of Switches & Model Class \\  LSVI-UCB & \(d^{3/2}H\) & \(K\) & \\ Jin et al. (2020) & & & \\ LSVI-UCB-RareSwitch & & & \\ Wang et al. (2021) & & & \\ LSVI-UCB++ & & & \\ He et al. (2022) & & & \\  \(\)-LSVI & & & \\ Wang et al. (2020) & & & \\ GOLF & & & \\ Jin et al. (2021) & & & Bounded eluder dimension \\ VOQL & & & + Completeness \\ Agarwal et al. (2022) & & & \\ MQL-UCB & & & \\ (Theorem 4.1) & & & \\   

Table 1: A comparison of existing algorithms in terms of regret and switching cost for linear MDP and general function class with bounded eluder dimension and Bellman completeness. The results hold for in-homogeneous episodic RL with horizon length \(H\), number of episodes \(K\) where the total reward obtained in an episode is not larger than 1. For regret, we only present the leading term when \(K\) is large enough compared to other variables and hide poly-logarithmic factors in \(K\), \(d\) or \(\), \(H\) and the constant. For linear MDPs, \(d\) is the dimension of the feature vectors. For general function class, \(\) is a shorthand of the eluder dimension of the underlying function class, \(N\) is the covering number of the value function class, and \(N_{,}\) is the covering number of the state-action space.

## 2 Preliminaries

### Time-Inhomogeneous Episodic MDP

We consider a time-inhomogeneous episodic Markov Decision Process (MDP), denoted by a tuple \(=M(,,H,\{_{h}\}_{h=1}^{H},\{r_{h}\}_{h= 1}^{H})\). Here, \(\) and \(\) are the spaces of state and action, respectively, \(H\) is the length of each episode, \(_{h}:\) is the transition probability function at stage \(h\) which denotes the probability for state \(s\) to transfer to the next state \(s^{}\) with current action \(a\), and \(r_{h}:\) is the deterministic reward function at stage \(h\). A policy \(:=\{_{h}\}_{h=1}^{H}\) is a collection of mappings \(_{h}\) from an observed state \(s\) to the simplex of action space \(\). For any policy \(=\{_{h}\}_{h=1}^{H}\) and stage \(h[H]\), we define the value function \(V_{h}^{}(s)\) and the action-value function \(Q_{h}^{}(s,a)\) as follows:

\[Q_{h}^{}(s,a)=r_{h}(s,a)+_{h^{}=h+1}^{H}r_{h^{ }}s_{h^{}},_{h^{}}(s_{h^{}}) s_{h}=s,a_{h}=a,V_{h}^{}(s)=Q_{h}^{}(s,_{h}(s)),\]

where \(s_{h^{}+1}_{h^{}}(|s_{h^{}},a_{h^{ }})\). Then, we further define the optimal value function \(V_{h}^{*}\) and the optimal action-value function \(Q_{h}^{*}\) as \(V_{h}^{*}(s)=_{}V_{h}^{}(s)\) and \(Q_{h}^{*}(s,a)=_{}Q_{h}^{}(s,a)\). For simplicity, we assume the total reward for each possible trajectory \((s_{1},a_{1},...,s_{H},a_{H})\) satisfies \(_{h=1}^{H}r_{h}(s_{h},a_{h}) 1\). Under this assumption, the value function \(V_{h}^{}()\) and \(Q_{h}^{}(,)\) are bounded in \(\). For any function \(V:\) and stage \(h[H]\), we define the following first-order Bellman operator \(_{h}\) and second-order Bellman operator \(_{h}^{2}\) on function \(V\):

\[_{h}V(s_{h},a_{h})=_{s_{h+1}}r_{h}+V(s_{h+1})|s_{h },a_{h},_{h}^{2}V(s_{h},a_{h})=_{s_{h+1}} r_{h}+V(s_{h+1})^{2}|s_{h},a_{h},\]

where \(s_{h+1}_{h}(|s_{h},a_{h})\) and \(r_{h}=r_{h}(s_{h},a_{h})\). For simplicity, we further define \([_{h}V](s,a)=_{s^{}_{h}(|s,a)}V(s ^{})\) and \([_{h}V](s,a)=_{h}^{2}V(s_{h},a_{h})-_{h }V(s_{h},a_{h})^{2}\). Using this notation, for each stage \(h[H]\), the Bellman equation and Bellman optimality equation take the following forms:

\[Q_{h}^{}(s,a)=_{h}V_{h+1}^{}(s,a), Q^{*}(s,a)=_{h}V_{h+1}^{*}(s,a),\]

where \(V_{H+1}^{}()=V_{H+1}^{*}()=0\). At the beginning of each episode \(k[K]\), the agent selects a policy \(^{k}\) to be executed throughout the episode, and an initial state \(s_{1}^{k}\) is arbitrarily selected by the environment. For each stage \(h[H]\), the agent first observes the current state \(s_{h}^{k}\), chooses an action following the policy \(_{h}^{k}\), then transits to the next state with \(s_{h+1}^{k}_{h}(|s_{h}^{k},a_{h}^{k})\) and reward \(r_{h}(s_{h},a_{h})\). Based on the protocol, we defined the suboptimality gap in episode \(k\) as the difference between the value function for selected policy \(^{k}\) and the optimal value function \(V_{1}^{*}(s_{1}^{k})-V_{1}^{^{k}}(s_{1}^{k})\). Based on these definitions, we can define the regret in the first \(K\) episodes as follows:

**Definition 2.1**.: For any RL algorithm Alg, the regret in the first \(K\) episodes is denoted by the sum of the suboptimality for episode \(k=1,,K\),

\[(K)=_{k=1}^{K}V_{1}^{*}(s_{1}^{k})-V_{1}^{^{k}}(s_{1}^{k}),\]

where \(^{k}\) is the agent's policy at episode \(k\).

### Function Classes and Covering Numbers

**Assumption 2.2** (Completeness).: Given \(:=\{_{h}\}_{h=1}^{H}\) which is composed of bounded functions \(f_{h}:[0,L]\). We assume that for any function \(V:\) there exists \(f_{1},f_{2}_{h}\) such that for any \((s,a)\),

\[_{s^{}_{h}(|s,a)}r_{h}(s,a)+V(s^{ })=f_{1}(s,a),_{s^{}_{h}(|s,a)}r_{h}(s,a)+V(s ^{})^{2}=f_{2}(s,a).\]

We assume that \(L=O(1)\) throughout the paper.

**Remark 2.3**.: Completeness is a fundamental assumption in RL with general function approximation, as recognized in Wang et al. (2020); Jin et al. (2021); Agarwal et al. (2022). Our assumption is the same as that in Agarwal et al. (2022) and is slightly stronger than that in Wang et al. (2020) andJin et al. (2021). More specifically, in Wang et al. (2020a), completeness is only required for the first-order Bellman operator. In contrast, we necessitate completeness with respect to the second-order Bellman operator, which becomes imperative during the construction of variance-based weights. Jin et al. (2021) only requires the completeness for the function class \(_{h+1}\) (\(_{h}_{h+1}_{h}\)). However, the GOLF algorithm (Jin et al., 2021) requires solving an intricate optimization problem across the entire episode. In contrast, we employ pointwise exploration bonuses as an alternative strategy, which requires the completeness for function class \(=\{V:\}\), i.e., \(_{h}_{h}\). The completeness assumption on the second moment is first introduced by Agarwal et al. (2022), and is crucial for obtaining a tighter regret bound. More specifically, making use of the variance of the value function at the next state is known to be crucial to achieve minimax-optimal regret bound in RL ranging from tabular MDPs (Azar et al., 2017) to linear mixture MDPs (Zhou et al., 2021) and linear MDPs (He et al., 2022). In RL with general function approximation, the second-moment compleness assumption makes the variance of value functions computationally tractable.

**Definition 2.4** (Generalized Eluder dimension, Agarwal et al. 2022).: Let \( 0\), a sequence of state-action pairs \(=\{z_{i}\}_{i[T]}\) and a sequence of positive numbers \(=\{_{i}\}_{i[T]}\). The generalized Eluder dimension of a function class \(:[0,L]\) with respect to \(\) is defined by \(_{,T}():=_{,:|Z|=T, }(,,)\),

\[(,,):=_{i=1}^{T}1,^{2}}D_{}^{2}(z_{i};z_{[i-1]},_{[i-1]}) ,\]

\[D_{}^{2}(z;z_{[t-1]},_{[t-1]}):=_{f_{1},f_{2}}(z)-f_{2}(z))^{2}}{_{s[t-1]}^{2}}(f_{ 1}(z_{s})-f_{2}(z_{s}))^{2}+}.\]

We write \(_{,T}():=H^{-1}_{h[H]}_{,T}( _{h})\) for short when \(\) is a collection of function classes \(=\{_{h}\}_{h=1}^{H}\) in the context.

**Remark 2.5**.: The \(D_{}^{2}\) quantity has been introduced in Agarwal et al. (2022) and Ye et al. (2023) to quantify the uncertainty of a state-action pair given a collected dataset with corresponding weights. It was inspired by Gentile et al. (2022) where an unweighted version of uncertainty has been defined for active learning. Prior to that, Wang et al. (2020a) introduced a similar'sensitivity' measure to determine the sampling probability in their sub-sampling framework. As discussed in Agarwal et al. (2022), when specialized to linear function classes, \(D_{}^{2}(z_{t};z_{[t-1]},_{[t-1]})\) can be written as the elliptical normal \(\|z_{t}\|_{_{t-1}}^{2}\), where \(_{t-1}\) is the weighted covariance matrix of the feature vectors \(z_{[t-1]}\).

**Definition 2.6** (Bonus oracle \(_{}^{2}\)).: In this paper, the bonus oracle is denoted by \(_{}^{2}\), which computes the estimated uncertainty of a state-action pair \(z=(s,a)\) with respect to historical data \(z_{[t-1]}\) and corresponding weights \(_{[t-1]}\). In detail, we assume that a computable function \(_{}^{2}(z;z_{[t-1]},_{[t-1]})\) satisfies \(_{}(z;z_{[t-1]},_{[t-1]})}{D_{}(z;z_{ [t-1]},_{[t-1]})}[1,C]\), where \(C\) is a fixed constant.

**Remark 2.7**.: Agarwal et al. (2022) also assumed access to such a bonus oracle defined in Definition 2.6, where they assume that the bonus oracle finds a proper bonus from a finite bonus class (Definition 3, Agarwal et al. 2022). Our definition is slightly different in the sense that the bonus class is not assumed to be finite but with a finite covering number. Previous works by Kong et al. (2021) and Wang et al. (2020a) proposed a sub-sampling idea to compute such a bonus function efficiently in general cases, which is also applicable in our framework. In a similar nonlinear RL setting, Ye et al. (2023) assumed that the uncertainly \(D_{}^{2}\) can be directly computed, which is a slightly stronger assumption. But essentially, these differences in bonus assumption only lightly affect the algorithm structure.

**Definition 2.8** (Covering numbers of function classes).: For any \(>0\), we define the following covering numbers of the involved function classes:

1. For each \(h[H]\), there exists an \(\)-cover \((_{h},)_{h}\) with size \(|(_{h},)| N(_{h},)\), such that for any \(f\), there exists \(f^{}(_{h},)\), such that \(\|f-f^{}\|_{}\). For any \(>0\), we define the uniform covering number of \(\) with respect to \(\) as \(N_{}():=_{h[H]}N(_{h},)\).
2. There exists a bonus class \(:\) such that for any \(t 0\), \(z_{[t]}()^{t}\), \(_{[t]}^{t}\), the oracle defined in Definition 2.6\(_{}(;z_{[t]},_{[t]})\) is in \(\).
3. For bonus class \(\), there exists an \(\)-cover \((,)\) with size \(|(,)| N(,)\), such that for any \(b\), there exists \(b^{}(,)\), such that \(\|b-b^{}\|_{}\).

**Remark 2.9**.: In general function approximation, it is common to introduce the additional assumption on the covering number of bonus function classes. For example, in Ye et al. (2023), Agarwal and Zhang (2022a), and Di et al. (2023), the covering number of the bonus function class is bounded.

## 3 Algorithm and Key Techniques

In this section, we will introduce our new algorithm, MQL-UCB. The detailed algorithm is provided in Algorithm 1. Our algorithm's foundational framework follows the Upper Confidence Bound (UCB) approach. In detail, for each episode \(k[K]\), we construct an optimistic value function \(Q_{k,h}(s,a)\) during the planning phase. Subsequently, in the exploration phase, the agent interacts with the environment, employing a greedy policy based on the current optimistic value function \(Q_{k,h}(s,a)\). Once the agent obtains the reward \(r_{h}^{k}\) and transitions to the next state \(s_{h+1}^{k}\), these outcomes are incorporated into the dataset, contributing to the subsequent planning phase. We will proceed to elucidate the essential components of our method.

### Rare Policy Switching

For MQL-UCB algorithm, the value functions \(Q_{k,h},_{k,h}\), along with their corresponding policy \(_{k}\), undergo updates when the agent collects a sufficient number of trajectories within the dataset that could significantly diminish the uncertainty associated with the Bellman operator \(_{h}V(,)\) through the weighted regression. In the context of linear bandits (Abbasi-Yadkori et al., 2011) or linear MDPs (He et al., 2022), the uncertainty pertaining to the least-square regression is quantified by the covariance matrix \(_{k}\). In this scenario, the agent adjusts its policy once the determinant of the covariance matrix doubles, employing a determinant-based criterion. Nevertheless, in the general function approximation setting, such a method is not applicable in the absence of the covariance matrix which serves as a feature extractor in the linear setting. Circumventing this issue, Kong et al. (2021) proposed a sub-sampling-based method to achieve low-switching properties in nonlinear RL. Their subsampling technique is inspired by Wang et al. (2021), which showed that one only needs to maintain a small subset of historical data to obtain a sufficiently accurate least-square estimator. Such a subset can be generated sequentially according to the _sensitivity_ of a new coming data point. However, their approach leads to a switching cost of \((d^{2}H)\), which does not match the lower bound in linear MDPs proposed by Gao et al. (2021).

To resolve this issue, we proposed a more general deterministic policy-updating framework for non-linear RL. In detail, we use \(^{2}_{_{h}}(z_{i,h;};z_{[I_{last}-1],h},_{[I_ {last}-1],h})\) to evaluate the information collected at the episode \(i\), given the last updating \(k_{last}\). Once the collected information goes beyond a threshold \(\) from last updating, i.e.,

\[_{i=k_{last}}^{k-1}_{i,h}^{2}}^{2}_{ _{h}}(z_{i,h};z_{[k_{last}-1],h},_{[k_{last}-1],h}) .\] (3.1)

the agent will perform updates on both the optimistic estimated value function and the pessimistic value function. Utilizing the \(D^{2}_{_{h}}\)-based criterion, we will show that the number of policy updates can be bounded by \(O(H_{,K}())\). This further reduces the complexity of the optimistic value function class and removes additional factors from a uniform convergence argument over the function class. Specifically, we showcase under our rare-switching framework, the \(\)-covering number of the optimistic and the pessimistic value function class at episode \(k\) is bounded by

\[N_{}(k):=[N_{}(/2) N(,/2 _{K})]^{l_{k}+1},\] (3.2)

where \(_{K}\) is the maximum confidence radius as shown in Algorithm 1, which will be specified in Lemmas G.3 and G.4, \(l_{k}\) is the number of policy switches before the end of the \(k\)-th episode according to Algorithm 1.

### Weighted Regression

The estimation of \(Q\) function in MQL-UCB extends LSVI-UCB proposed by Jin et al. (2020) to general function classes. While the estimators in LSVI-UCB are computed from the classic leastsquares regression, we construct the estimated value function \(_{k,h}\) for general function classes by solving the following weighted regression:

\[_{k,h}=*{argmin}_{f_{h}_{h}}_{i[k- 1]}_{i,h}^{2}}(f_{h}(s_{h}^{i},a_{h}^{i})-r_{h}^{i}- V_{k,h+1}(s_{h+1}^{i}))^{2}.\]

In the weighted regression, we set the weight \(_{k,h}\) as

\[_{k,h}=_{k,h},,_{ _{h}}^{1/2}(z;z_{[k-1],h},_{[k-1],h})},\]

where \(_{k,h}\) is the estimated variance for the stochastic transition process, \(_{_{h}}(z;z_{[k-1],h},_{[k-1],h})\) denotes the uncertainty of the estimated function \(_{k,h}\) conditioned on the historical observations and

\[^{2}:=2HK^{2}2(L^{2}k/^{4})+2 ((4L/^{2})+2 N_{}^{4}() N_ {}^{2}(K)/\] (3.3)

is used to properly balance the uncertainty across various state-action pairs. It is worth noting that Ye et al. (2023) also introduced the uncertainty-aware variance in the general function approximation with a distinct intention to deal with the adversarial corruption from the attacker. In addition, according to the weighted regression, with high probability, the Bellman operator \(_{h}V_{k,h}\) satisfies:

\[+_{i[k-1]}_{i,h}^{-2}(_{k,h}(s_{h}^ {i},a_{h}^{i})-_{h}V_{k,h+1}(s_{h}^{i},a_{h}^{i}))^{2} _{k}^{2},\]

where \(_{k}\) is the exploration radius for the \(Q\) functions, which will be specified in Theorem 4.1. According to the definition of Generalized Eluder dimension, the estimation error between the estimated function \(_{k,h}\) and the Bellman operator is upper bounded by:

\[|_{k,h}(s,a)-_{h}V_{k,h+1}(s,a)|_{k} D_{_{h}}(z;z_{[k-1],h},_{[k-1],h}).\]

Therefore, we introduce the exploration bonus \(b_{k,h}\) and construct the optimistic value function \(Q_{k,h}(s,a)\),i.e., \(Q_{k,h}(s,a)_{k,h}(s,a)+b_{k,h}(s,a),\) where \(b_{k,h}(s,a)=_{k}_{}(s,a);z_{[k- 1],h},_{[k-1],h}\). Inspired by Hu et al. (2022); He et al. (2022); Agarwal et al. (2022), in order to estimate the gap between the optimistic value function \(V_{k,h}(s)\) and the optimal value function \(V_{h}^{*}(s)\), we further construct the pessimistic estimator \(_{k,h}\) by the following weighted regression

\[_{k,h}=*{argmin}_{f_{h}_{h}}_{i [k-1]}_{i,h}^{2}}(f_{h}(s_{h}^{i},a_{h}^{i})-r_{h}^ {i}-_{k,h+1}(s_{h+1}^{i}))^{2},\]

and introduce a negative exploration bonus when generating the pessimistic estimator. \(_{k,h}(s,a)_{k,h}(s,a)-_{k,h}(s,a)\), where \(_{k,h}(s,a)=_{k}_{}((s,a) ;z_{[k-1],h},_{[k-1],h}\). Different from Agarwal et al. (2022), the pessimistic value function \(_{k,h}\) is computed from a similar weighted-regression scheme as in the case of the optimistic estimator, leading to a tighter confidence set.

### Variance Estimator

In this subsection, we provide more details about the variance estimator \(_{k,h}\), which measures the variance of the value function \(V_{k,h+1}(s_{h+1}^{k})\) caused by the stochastic transition from state-action pair \((s_{h}^{k},a_{h}^{k})\). According to the definition of \(_{k,h}\), the difference between the estimator \(_{k,h}\) and \(_{h}V_{k,h+1}\) satisfies

\[+_{i[k-1]}_{i,h}^{2}}(_{k,h} (s_{h}^{i},a_{h}^{i})-_{h}V_{k,h+1}(s_{h}^{i},a_{h}^{i}))^{2} 2 _{i[k-1]}_{i,h}^{2}}f(s_{h}^{i},a_{h}^ {i})-_{k}^{*}(s_{h}^{i},a_{h}^{i})_{h}^{i} (V_{k,h+1}),\]

where the noise \(_{h}^{k}(V)=r_{h}^{k}+V(s_{h+1}^{k})-_{s^{} _{h}(s_{h}^{k},a_{h}^{k})}[r_{h}(s_{h}^{k},a_{h}^{k},s^{} )+V(s^{})]\) denotes the stochastic transition noise for the value function \(V\). However, the generation of the target function \(V_{k,h+1}\) relies on previously collected data \(z_{[k_{}]}\), thus violating the conditional independence property. Consequently, the noise term \(_{h}^{k}(V_{k,h+1})\) may not be unbiased. To address this challenge, it becomes imperative to establish a uniform convergence property over the potential function class, which is first introduced in linear MDPs by Jin et al. (2020).

Following the previous approach introduced by Azar et al. (2017); Hu et al. (2022); Agarwal et al. (2022); He et al. (2022), we decompose the noise of _optimistic_ value function \(_{h}^{k}(V_{k,h+1})\) into the noise of _optimal_ value function \(_{h}^{k}(V_{h+1}^{*})\) and the noise \(_{h}^{k}V_{k,h+1}-V_{h+1}^{*}\) to reduce the extra \(N_{}(K)\) dependency in the confidence radius. With the noise decomposition, we evaluate the variances \([_{h}V_{h+1}^{*}](s,a)\) and \(_{h}(V_{k,h+1}-V_{h+1}^{*})(s,a)\) separately.

For the variance of the _optimal_ value function \([_{h}V_{h+1}^{*}](s,a)\), since the optimal value function \(V_{h+1}^{*}\) is independent with the collected data \(z_{[b_{}]}\), it prevents a uniform convergence-based argument over the function class. However, the optimal value function \(V_{h+1}^{*}\) is unobservable, and it requires several steps to estimate the variance. In summary, we utilize the optimistic function \(V_{k,h+1}\) to approximate the optimal value function \(V_{h+1}^{*}\) and calculate the estimated variance \([}_{h}V_{k,h}]\) as the difference between the second-order moment and the square of the first-order moment of \(V_{k,h}\)

\[[}_{k,h}V_{k,h+1}]=_{k,h}-_{k,h}^{2}.\]

Here, the approximate second-order moment \(_{k,h}\) and the approximate first-order moment \(_{k,h}\) is generated by the least-square regression (Lines 6 and 8). In addition, we introduce the exploration bonus \(E_{k,h}\) to control the estimation error between the estimated variance and the true variance of \(V_{k,h+1}\) and \(F_{k,h}\) to control the sub-optimality gap between \(V_{k,h+1}\) and \(V_{h+1}^{*}\):

\[E_{k,h} =(2L_{k}+_{k})1,_{ _{k}}(z;z_{[k-1],h},_{[k-1],h}),\] \[F_{k,h} =(N(,) N_{}(K)) 1,2_{k,h}(s_{h}^{k},a_{h}^{k})-2_{k,h }(s_{h}^{k},a_{h}^{k})+4_{k}_{_{k}}(z;z_{[k-1],h},_{[k-1],h}),\]

where

\[_{k}=(k) N(, ) H}{}+64L k},_{k}=(k) N(,)H}{}+64L k /^{2}}.\]

For the variance of the sub-optimality gap, \(_{h}(V_{k,h+1}-V_{h+1}^{*})(s,a)\), based on the structure of optimistic and pessimistic value function, it can be approximate and upper bounded by

\[[_{h}(V_{k,h+1}-V_{h+1}^{*})](s_{h}^{k},a_{h}^{k}) 2[_{h}( V_{k,h+1}-V_{h+1}^{*})](s_{h}^{k},a_{h}^{k})\]\[ 2[_{h}(V_{k,h+1}-_{k,h+1})](s_{h}^{k},a_{h}^{k})  2_{k,h}(s_{h}^{k},a_{h}^{k})-2_{k,h}(s_{h}^{k},a_{h}^{k}),\]

where the approximate first-order moments \(_{k,h}\), \(_{k,h}\) are generated by the least-square regression (Lines 6 and 7) and can be dominated by the exploration bonus \(F_{k,h}\).

In summary, we construct the estimated variance \(_{k,h}\) as:

\[_{k,h}=_{k,h}V_{k,h+1}]}(s_{h}^{k},a_{h}^{k})+E_{k,h}+ F_{k,h}.\] (3.4)

### Monotonic Value Function

As we discussed in the previous subsection, we decompose the value function \(V_{k,h}\) and evaluate the variance \([_{h}V_{h+1}^{*}](s,a)\), \(_{h}(V_{k,h+1}-V_{h+1}^{*})(s,a)\) separately. However, for each state-action pair \((s_{h}^{k},a_{h}^{k})\) and any subsequent episode \(i>k\), the value function \(V_{i,h}\) and corresponding variance \([_{h}(V_{i,h+1}-V_{h+1}^{*})](s_{h}^{k},a_{h}^{k})\) may differ from the previous value function \(V_{k,h}\) and variance \([_{h}(V_{k,h+1}-V_{h+1}^{*})](s_{h}^{k},a_{h}^{k})\). Extending the idea proposed by He et al. (2022) for linear MDPs, we ensure that the pessimistic value function \(_{k,h}\) maintains a monotonically increasing property during updates, while the optimistic value function \(Q_{k,h}\) maintains a monotonically decreasing property. Leveraging these monotonic properties, we can establish an upper bound on the variance as follows:

\[[_{h}(V_{i,h+1}-V_{h+1}^{*})](s_{h}^{k},a_{h}^{k}) 2[_{h }(V_{i,h+1}-_{i,h+1})](s_{h}^{k},a_{h}^{k}) 2[_{h }(V_{k,h+1}-_{k,h+1})](s_{h}^{k},a_{h}^{k}) F_{k,h}.\]

In this scenario, the previously employed variance estimator \(_{k,h}\) offers a consistent and uniform upper bound for the variance across all subsequent episodes.

## 4 Main Results

In this section, we present the main theoretical results. In detail, we provide the regret upper bound of Algorithm MQL-UCB in Theorem 4.1. As a complement, in Section B.1, we provide a lower bound on the communication complexity for cooperative linear MDPs. Finally, in Section B.2, we discussed the connection between the generalized eluder dimension and the standard eluder dimension.

The following theorem provides the regret upper bound of Algorithm MQL-UCB.

**Theorem 4.1**.: Suppose Assumption 2.2 holds for function classes \(:=\{_{h}\}_{h=1}^{H}\) and Definition 2.4 holds with \(=1\). If we set \(=1/\), \(=(KLH)^{-1}\), and set \(_{k}^{2}=_{k}^{2}:=O 2(L^{2}k/^{4})+2(4L/^{2})+2 }{/H}[(N_{}())+1]+O()+ O( kL/^{2})\), then with probability \(1-O()\), the regret of MQL-UCB is upper bounded as follows:

\[(K)=)}  N H_{K}\] \[+H^{2.5}^{2}() (N N_{b}))(N N_ {b})}\]

where \(_{K}:=_{k=1}^{K}_{h=1}^{H}[_{h}V_{h+1}^{^{k}} ](s_{h}^{k},a_{h}^{k})=(K)\), we denote the covering number of bonus function class by \(N_{b}\), the covering number of function class \(\) by \(N\), and the dimension \(_{,K}()\) by \(()\). Meanwhile, the switching cost of Algorithm 1 is \(O(_{,K}() H)\).

In the worst case, when the number of episodes \(K\) is sufficiently large, the leading term in our regret bound is \() N HK}\). Our result matches the optimal regret achieved by Agarwal et al. (2022). While their proposed algorithm involves the execution of a complicated and non-Markovian policy with an action selection phase based on two series of optimistic value functions and the prefix trajectory, MQL-UCB only requires the knowledge of the current state and a single optimistic state-action value function \(Q\) to make a decision over the action space. In addition, our theorem also provides a variance-dependent regret bound, which is adaptive to the randomness of the underlying MDP encountered by the agent. Our definition of \(_{K}\) is inspired by Zhao et al. (2023) and Zhou et al. (2023), which studied variance-adaptive RL under tabular MDP setting and linear mixture MDP setting, respectively.

As a direct application, we also present the regret guarantee of MQL-UCB for linear MDPs.

**Corollary 4.2**.: Under the same conditions of Theorem 4.1, assume that the underlying MDP is a linear MDP such that \(:=\{_{h}\}_{h[H]}\) is composed of linear function classes with a known feature mapping over the state-action space \(:^{d}\). If we set \(=1\), \(=1/\), then with probability \(1-O()\), the following cumulative regret guarantee holds for MQL-UCB:

\[(K)=d+H^{2.5}d^{5}} .\]

**Remark 4.3**.: The leading term in our regret bound, as demonstrated in Corollary 4.2, matches the lower bound proved in Zhou et al. (2021) for linear MDPs. Similar optimal regrets have also been accomplished by He et al. (2022) and Agarwal et al. (2022) for linear MDPs. Since we also apply weighted regression to enhance the precision of our pessimistic value functions, the lower order term (i.e., \(H^{2.5}d^{5}}\)) in our regret has a better dependency on \(H\) than VOQL (Agarwal et al., 2022) and LSVI-UCB++ (He et al., 2022), which may be of independent interest when considering long-horizon MDPs. In addition, the switching cost of Algorithm 1 is bounded by \((dH)\), which matches the lower bound in Gao et al. (2021) for deterministic algorithms and our new lower bound in Theorem B.1 for arbitrary algorithms up to logarithmic factors. For more details about our lower bound, please refer to Appendix E.

## 5 Conclusion and Future Work

In this paper, we delve into the realm of RL with general function approximation. We proposed the MQL-UCB algorithm with an innovative uncertainty-based rare-switching strategy in general function approximation. Notably, our algorithm only requires \((dH)\) updating times, which matches with the lower bound established by Gao et al. (2021) up to logarithmic factors, and obtains a \((d)\) regret guarantee, which is near-optimal when restricted to the linear cases.