# SuperEncoder: Towards Iteration-Free Approximate Quantum State Preparation

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

Numerous quantum algorithms operate under the assumption that classical data has already been converted into quantum states, a process termed Quantum State Preparation (QSP). However, achieving precise QSP requires a circuit depth that scales exponentially with the number of qubits, making it a substantial obstacle in harnessing quantum advantage. Recent research suggests using a Parameterized Quantum Circuit (PQC) to approximate a target state, offering a more scalable solution with reduced circuit depth compared to precise QSP. Despite this, the need for iterative updates of circuit parameters results in a lengthy runtime, limiting its practical application. To overcome this challenge, we introduce SuperEncoder, a pre-trained classical neural network model designed to directly estimate the parameters of a PQC for any given quantum state. By eliminating the need for iterative parameter tuning, SuperEncoder represents a pioneering step towards iteration-free approximate QSP.

## 1 Introduction

Quantum Computing (QC) leverages quantum mechanics principles to address classically intractable problems [47; 36]. Various quantum algorithms have been developed, encompassing quantum-enhanced linear algebra [15; 48; 45], Quantum Machine Learning (QML) [26; 19; 1; 33; 50; 3], quantum-enhanced partial differential equation solvers [31; 13], etc. A notable caveat is that those algorithms assume that classical data has been efficiently loaded into a specific quantum state, a process known as Quantum State Preparation (QSP).

However, the realization of QSP presents significant challenges. Ideally, we expect each element of the classical data to be precisely transformed into an amplitude of the corresponding quantum state. This precise QSP is also known as Amplitude Encoding (AE). However, a critical yet unresolved problem of AE is that the required circuit depth grows exponentially with respect to the number of qubits [34; 41; 29; 46; 49]. Extensive efforts have been made to alleviate this issue, but they fail to address it fundamentally. For example, while some methods introduce ancillary qubits for shallower circuit [57; 56; 2], they may encounter an exponential number of ancillary qubits. Other methods aim at preparing _special_ quantum states with lower circuit depth, being only effective for either sparse states [12; 32] or states with some special distributions [14; 17]. To summarize, realizing AE for _arbitrary_ quantum states still remains _non-scalable_ due to its exponential resource requirement with respect to the number of qubits. Moreover, in the Noisy Intermediate-Scale Quantum (NISQ) era , hardware has limited qubit lifetimes and confronts a high risk of decoherence errors when executing deep circuits, further exacerbating the problem of AE.

In fact, precise QSP is unrealistic in the present NISQ era due to the inherent errors of quantum devices. Hence, iteration-based Approximate Amplitude Encoding (AAE) emerges as a promising technique [59; 35; 52]. Specifically, AAE constructs a quantum circuit with tunable parameters, thenit iteratively updates the parameters to approximate a target quantum state. Since the updating of parameters can be guided by states obtained from noisy devices, AAE is robust to noises, becoming especially suitable for NISQ applications. More importantly, AAE has been shown to have shallow circuit depth [35; 52], making it more scalable than AE.

Unfortunately, AAE possesses a drawback that significantly undermines its potential advantages -- the lengthy runtime stemming from iterative optimizations of parameters. For example, when a Quantum Neural Network (QNN)  is trained and deployed, the runtime of AAE dominates the inference time as we demonstrated in Fig. 1. Since loading classical data into quantum states becomes the bottleneck, the potential advantage of QNN diminishes no matter how efficient the computations are done on quantum devices.

Compared to AAE, AE employs a pre-defined arithmetic decomposition procedure to construct a circuit, thereby becoming much _faster_ than AAE at runtime. Therefore, it is natural to ask: can we realize both _fast_ and _scalable_ methods for _arbitrary_ QSP? This is precisely the question we tackle in this paper. Overall, we present three major contributions.

* Given a Parameterized Quantum Circuit (PQC) \(U()\) that approximates a target quantum state, with \(\) the parameter vector. We show that there exists a _deterministic_ transformation \(f\) that could map an arbitrary state \(|\) to its corresponding parameters \(\). Consequently, the parameters can be designated by \(f\) without time-intensive iterations.
* We show that the mapping \(f\) is _learnable_ by utilizing a classical neural network model, which we term as SuperEncoder. With SuperEncoder, you can have your cake and eat it too, i.e., simultaneously realizing _fast_ and _scalable_ QSP. We develop a prototype model and shed light on insights into its training methodology.
* We verify the effectiveness of SuperEncoder on both synthetic dataset and representative downstream tasks, paving the way toward iteration-free approximate quantum state preparation.

## 2 Preliminaries

In this section, we commence with some basic concepts about quantum computing , and then proceed to a brief retrospect of existing QSP methods.

### Quantum Computation

We use Dirac notation throughout this paper. A _pure quantum state_ is defined by a vector \(|\) named 'ket', with the unit length. A state can be written as \(|=_{j=1}^{N}_{j}|j\) with \(_{j}|_{j}|^{2}=1\), where \(|j\) denotes a computational basis state and \(N\) represents the dimension of the complex vector space. _Density operators_ describe more general quantum states. Given a mixture of \(m\) pure states \(\{|_{i}\}_{i=1}^{m}\) with probabilities \(p_{i}\) and \(_{i}^{m}p_{i}=1\), the density operator \(\) denotes the _mixed state_ as \(=_{i=1}^{m}p_{i}|_{i}_{i}|\) with \(()=1\), where \(|\) refers to the conjugate transpose of \(|\). Generally, we use the term _fidelity_ to describe the similarity between an erroneous quantum state and its corresponding correct state.

The fundamental unit of quantum computation is the quantum bit, or _qubit_. A qubit's state can be expressed as \(=|0+|1\). Given \(n\) qubits, the state is generalized to \(|=_{j}^{2^{n}}|j\), where \(|j=|j_{1}j_{2} j_{n}\) with \(j_{k}\) the state of \(k\)th qubit in computational basis, and \(j=_{k=1}^{n}2^{n-k}j_{k}\). Applying _quantum operations_ evolves a system from one state to another. Generally, these operations can be categorized into quantum gates and measurements. Typical single-qubit gates include the Pauli gates \(X[0&1\\ 1&0]\), \(Y[0&-i\\ i&0]\), \(Z[1&0\\ 0&-1]\). These gates have associated rotation operations \(R_{P}()^{-i P/2}\), where \(\) is the rotation angle and \(P\{X,Y,Z\}\)1. Muti-qubit operations create

Figure 1: Breakdown of normalized runtime for QNN inference. Original data are listed in Table 1.

entanglement_ between qubits, allowing one qubit to interfere with others. In this work, we focus on the controlled-NOT (CNOT) gate, with the mathematical form of \(|0 0|_{2}+|1 1| X\). Quantum measurements extract classical information from quantum states, which is described by a collection \(\{M_{m}\}\) with \(_{m}M_{m}^{}M_{m}=\). Here, \(m\) refers to the measurement outcomes that may occur in the experiment, with a probability of \(p(m)=|M_{m}^{}M_{m}|\). The post-measurement state of the system becomes \(M_{m}|/p(m)\).

A _quantum circuit_ is the graphical representation of a series of quantum operations, which can be mathematically represented by a unitary matrix \(U\). In the NISQ era, PQC plays an important role as it underpins variational quantum algorithms [11; 39]. Typical PQC has the form of \(U()=_{i}U_{i}(_{i})V_{i}\), where \(\) is its parameter vector, \(U_{i}(_{i})=^{-i_{i}P_{i}/2}\) with \(P_{i}\) denoting a Pauli gate, and \(V_{i}\) denotes a fixed gate such as CNOT. For example, a PQC composed of \(R_{y}\) gates and CNOT gates is depicted in Fig. 2.

### Quantum State Preparation

Successful execution of many quantum algorithms requires an initial step of loading classical data into a quantum state [5; 15], a process known as _quantum state preparation_. This procedure involves implementing a quantum circuit to evolve a system to a designated state. Here, we focus on _amplitude encoding_ and formalize its procedure as follows. Let \(\) be a real-valued \(N\)-dimensional classical vector, AE encodes \(\) into the amplitudes of an \(n\)-qubit quantum state \(|\), where \(N=2^{n}\). More specifically, the data quantum state is represented by \(|=_{j=0}^{N-1}d_{j}|j\), where \(d_{j}\) denotes the \(j\)th element of the vector \(\), and \(|j\) refers to a computational basis state. The main objective is to generate a quantum circuit \(U\) that initializes an \(n\)-qubit system by \(U|0^{ n}=_{j=0}^{N-1}_{j}|j\), whose amplitudes \(\{_{j}\}\) are equal to \(\{d_{j}\}\). It is widely recognized that constructing such a circuit generally necessitates a circuit depth that scales exponentially with \(n\)[41; 34]. This property makes AE impractical in current NISQ era, as decoherence errors  can severely dampen the effectiveness of AE as the number of qubits increases .

In response to the inherent noisy nature of current devices, _approximate amplitude encoding_ has emerged as a promising technique [59; 35; 52]. Specifically, AAE utilizes a PQC (a.k.a. ansatz) to approximate the target quantum state by iteratively updating the parameters of circuit, following a similar procedure of other variational quantum algorithms [39; 11]. AAE has been shown to be more advantageous for NISQ devices due to its ability to mitigate coherent errors through flexible adjustment of circuit parameters, coupled with its lower circuit depth . We denote an ansatz as \(U()\), where \(\) refers to a vector of tunable parameters for optimizations. A typical ansatz consists of several blocks of operations with the same structure. For example, a two-block ansatz with 4 qubits is shown in Fig. 2, where the rotation layer is composed of single-qubit rotational gates \(R_{y}(_{r})=^{-i_{r}Y/2}\), and the entangler layer comprises CNOT gates. Note that the entangler layer is configurable and hardware-native, which means that we can apply CNOT gates to physically adjacent qubits, thereby eliminating the necessity of additional SWAP gates to overcome the topological constraints . This type of PQC is also known as _hardware-efficient ansatz_, being widely adopted in previous studies of AAE [59; 35; 52].

Figure 2: An example PQC with two blocks, with each block consisting of a rotation layer (filled blue) plus an entangler layer (filled red).

SuperEncoder

### Motivation

Although AAE can potentially realize high fidelity QSP with \(O((n))\) circuit depth  with \(n\) the number of qubits, it requires repetitive _online_ tuning of parameters to approximate the target state, which may result in an excessively long runtime that undermines its feasibility. Specifically, we could consider a simple application scenario in QML. The workflow with AAE is depicted in Fig. 2(a). During the inference stage, we must iteratively update the parameters of the AAE ansatz for each input classical data vector, which may greatly dampen the performance. To quantify this impact, we measure the runtime of AAE-based data loading and the total runtime of model inference. As one can observe from Table 1, AAE dominates the runtime, thereby becoming the performance bottleneck.

The necessity of time-intensive iterations is grounded in the following assumption -- Given an arbitrary quantum state \(|\), there _does not_ exist a deterministic transformation \(f:|\), where \(\) refers to the vector of parameters enabling a PQC to prepare an approximated state of \(|\). This assumption seems intuitively correct given the randomness of target states. However, we argue that a universal mapping \(f\) exists for any arbitrary data state \(|\). Taking a little thought of AE, we see that it implies the following conclusion: given an arbitrary state \(|\), there exists an universal arithmetic decomposition procedure \(g:| U\) satisfying \(U|0=|\). Inspired by this deterministic transformation, it is natural to ask: is there an universal transformation \(g^{}:| U^{}\) satisfying \(E(U^{}|0,|)\)? Here \(E\) denotes the deviation between the prepared state by a circuit \(U^{}\) and the target state, and \(\) refers to certain acceptable error threshold. Since the structure of PQC in AAE is the same for any target state, \(U^{}\) is determined by \(\). Then, the problem is reduced to exploring the existence of \(f:|\). Should \(f\) exist, the overhead of online iterations could be eliminated, resulting in a novel QSP method being both fast and scalable.

  \(\) & \(}(s)}\) & \(}}-}(s)}\) \\ 
4 & **5.0086** & 0.0397 \\
6 & **20.1810** & 0.0573 \\
8 & **59.4193** & 0.0978 \\  

Table 1: **Performance overhead of AAE**. We break down the averaged inference runtime per sample from the MNIST dataset. \(T_{}\) denotes time spent on loading classical data into quantum state using AAE, and \(T_{}\) refers to total runtime.

Figure 3: Comparison between AAE and SuperEncoder.

### Design Methodology

Let \(|\) be the target state, and \(U()\) be the PQC used in AAE with \(\) the optimized parameters. Our goal is to develop a model, termed SuperEncoder, to approximate the mapping \(f:|\). Referring back to the scenario in QML, the workflow with SuperEncoder becomes iteration-free, as depicted in Fig. 2(b).

Since neural networks could be used to approximate any continuous function , a natural solution is to use a neural network to approximate \(f\). Specifically, we adopt a Multi-Layer Perceptron (MLP) as the backbone model for approximating \(f\). However, training this model is nontrivial. Particularly, we find it challenging to design a proper loss function. In the remainder of this section, we explore three different designs and analyze their performance.

The first and most straightforward method is _parameter-oriented_ training -- setting the loss function \(_{1}\) as the MSE between the target parameters \(\) from AAE and the output parameters \(}\) from SuperEncoder. To evaluate the performance of \(_{1}\), we train a SuperEncoder using MNIST dataset, and test if it could load a test digit image into a quantum state with high fidelity. All images are downsampled and normalized into 4-qubit states for quick evaluation.

Unfortunately, results in Table 2 show that \(_{1}\) achieves poor performance. The average fidelity of prepared quantum states is only 0.6208. As demonstrated in Fig. 4, \(_{1}\) generates a state that losses the patterns of the original state. Additionally, utilizing \(_{1}\) implies that we need to first generate target parameters using AAE, of which the long runtime hinders pre-training on larger datasets. Consequently, required is a more effective loss function design without involving AAE.

To address this challenge, we propose a _state-oriented_ training methodology, which employs quantum states as targets to guide optimizations. Specifically, we may apply \(}\) to the circuit and execute it to obtain the prepared state \(\). Then it is possible to calculate the difference between \(\) and \(\) as the loss to optimize SuperEncoder. In contrast to parameter-oriented training, this approach applies to larger datasets as it decouples the training procedure from AAE. We utilize two different state-oriented metrics, the first being the MSE between \(\) and \(\), denoted as \(_{2}\), and the second is the _fidelity_ of \(\) relative to \(\), expressed as \(_{3}=1-|||^{2}\). Results in Table 2 show that \(_{2}\) and \(_{3}\) achieve remarkably higher fidelity than \(_{1}\). Besides, we observe that \(_{3}\) prepares a state very similar to the target one (Fig. 4), verifying that state-oriented training is more effective than parameter-oriented training.

**Landscape Analysis**. To understand the efficacy of these loss functions, we further analyze their landscapes following previous studies [28; 40; 18]. To gain insight from the landscape, we plot Fig. 6 using the same scale and color gradients . Compared to state-oriented losses (\(_{2}\) and \(_{3}\)), \(_{1}\) has a largely flat landscape with non-decreasing minima, thus the model struggles to explore a viable path towards a lower loss value, a similar pattern can also be observed in Fig. 5. In contrast, \(_{2}\)

  \(_{1}\) & \(_{2}\) & \(_{3}\) \\ 
0.6208 & 0.9873 & 0.9908 \\  

Table 2: Fidelity comparison between SuperEncoders trained with different loss functions.

Figure 4: Virtualization of states generated by SuperEncoder trained with different loss functions. \(_{2}\) is omitted as it produces very similar results to \(_{3}\).

Figure 5: Convergence of different loss functions.

and \(_{3}\) have much lower minima and successfully converge to smaller loss values. Furthermore, we observe from Fig. 6 that \(_{3}\) has a wider minima than \(_{2}\), which may indicate a better generalization capability .

**Gradient Analysis**. Based on the landscape analysis, we adopt \(_{3}\) as the loss function to train SuperEncoder. We note that \(_{3}\) can be written as \(1-||\). If \(\) is a pure state, it is equivalent to \(||\). Then \(_{3}\) is given by \(_{3}=1-||\).

This re-formalization is important as only the mixed state \(\) could be obtained in noisy environments. Suppose an \(n\)-qubit circuit is parameterized by \(m\) parameters \(}=[_{1},,_{k},, _{m}]\). Let \(\) be the weight matrix of MLP, with \(k,l\) the element indices. We analyze the gradient of \(_{3}\) w.r.t. \(W_{k,l}\) to showcase its feasibility in different quantum computing environments.

\[_{W_{k,l}}_{3}&= _{3}}{ W_{k,l}}=-|}{ W_{k,l}}|\\ &=-|_{j=1}^{m}_{1,1}}{_{j}}}{ W_{k,l}}& &_{j=1}^{m}_{1,N}}{_{j}} }{ W_{k,l}}\\ &&&\\ _{j=1}^{m}_{N,1}}{_{j}}}{ W_{k,l}}&&_{j=1}^{m}_{N,N}}{_{j}}}{ W_{k, l}}|,\] (1)

The calculation of \(}{ W_{k,l}}\) can be easily done on classical devices using backpropagation supported by automatic differentiation frameworks. Therefore, we only focus on \(_{i,j}}{_{k}}\). In a simulation environment, the calculation of \(\) is conducted via noisy quantum circuit simulation, which is essentially a series of tensor operations on state vectors. Therefore, the calculation of \(_{i,j}}{_{k}}\) is compatible with backpropagation. The situation on real devices becomes more complicated. On real devices, the mixed state \(\) is reconstructed through _quantum tomography_ based on classical shadow [55; 16]. Here, for notion simplicity, we denote the process of classical shadow as a transformation \(\), and denote the measurement expectations of the ansatz as \(U(})\). Thus the reconstructed density matrix is given by \(=(U(}))\). Then the gradient of \(_{i,j}\) with respect to \(_{k}\) is \(_{u}_{i,j}}{ U(}) }})}{_{k}}\). Here \(_{i,j}}{ U(})}\) can be efficiently calculated on classical devices using backpropagation, as \(\) operates on expectation values on classical devices. However, \(U(})\) involves state evolution on quantum devices, where back-propagation is impossible due to the No-Cloning theorem . Fortunately, it is possible to utilize the _parameter shift_ rule [8; 4; 53] to calculate \(})}{_{k}}\). In this way, the gradients of the circuit function \(U\) with respect to \(_{j}\) are \(})}{_{k}}= (U(_{+})-U(_{-}))\), where \(_{+}=[_{1},,_{k}+,,_{m}], _{-}=[_{1},,_{k}-,,_{m}]\). To summarize, training SuperEncoder with \(_{3}\) is theoretically feasible on both simulators and real devices.

Figure 6: Landscape virtualization of different loss functions.

Numerical Results

### Experiment Setup

**Datasets.** To train a SuperEncoder for arbitrary quantum states, we need a dataset comprising a wide range of quantum states with different distributions. To our knowledge, there is no dataset dedicated for this special purpose. A natural solution is to use readily available datasets from classical machine learning domains (e.g., ImageNet , Places , SQuAD ) by normalizing them to quantum states. However, QSP is essential in various application scenarios besides QML. The classical data to be loaded may not only contain natural images or languages but also contain arbitrary data (e.g., in HHL algorithm ). Therefore, we construct a training dataset adapted from FractalDB-60  with 60k samples, a formula-driven dataset originally designed for computer vision without any natural images. We also construct a separate dataset to test the performance of QSP, which consists of data sampled from different statistical distributions, including uniform, normal, log-normal, exponential, and Dirichlet distributions, with 3000 samples per distribution. Hereafter we refer this dataset as the _synthetic dataset_.

**Platforms.** We implement SuperEncoder using PennyLane , PyTorch  and Qiskit . Simulations are done on a Ubuntu server with 768 GB memory, two 32-core Intel(R) Xeon(R) Silver 4216 CPU with 2.10 GHz, and 2 NVIDIA A-100 GPUs. IBM quantum cloud platform2 is adopted to evaluate the performance on real quantum devices.

**Metrics.** We evaluate SuperEncoder and compare it to AE and AAE in terms of runtime, scalability, and fidelity. _Runtime_ refers to how long it takes to prepare a quantum state. _Scalability_ refers to how the circuit depth grows with the number of qubits. _Fidelity_ evaluates the similarity between prepared quantum states and target quantum states. Specifically, the fidelity for two mixed states given by density matrices \(\) and \(\) is defined as \(F(,)=(})^{2}\). A larger \(F\) indicates a better fidelity.

**Implementation.** We implement SuperEncoder using an MLP consisting of two hidden layers. The dimensions of input and output layers are respectively set to \(2^{n}\) and \(m\), where \(n\) refers to the number of qubits and \(m\) refers to the number of parameters. We adopt \(_{3}\) as the loss function. Training data are down-sampled, flattened, and normalized to \(2^{n}\)-dimensional state vectors. We adopt the hardware efficient ansatz  (Fig. 2) as the backbone of quantum circuits and use the same structure for AAE. Given a target state, a pre-trained SuperEncoder model is invoked to generate parameters and thus the circuit for QSP. While for AAE, we employ online iterations for each state. For AE, the arithmetic decomposition method in PennyLane  is adopted. We defer more details about implementation to Appendix A. Our framework is open-source at https://anonymous.4open.science/r/SuperEncoder-A733 with detailed instructions to reproduce our results.

### Evaluation on Synthetic Dataset

For simplicity and without loss of generality, we focus our discussion on the results of 4-qubit QSP tasks. The outcomes for larger quantum states are detailed in Appendix B.1. The parameters of both AAE and SuperEncoder are optimized based on ideal quantum circuit simulation.

**Runtime.** The runtime and fidelity results, evaluated on the synthetic dataset, are presented in Table 3. We observe that SuperEncoder runs faster than AAE by orders of magnitudes and has a similar runtime to AE, affirming that SuperEncoder effectively overcomes the main drawback of AAE.

   &  &  &  \\  & **Fidelity** & **Runtime** & **Fidelity** & **Runtime** & **Fidelity** & **Runtime** \\  Uniform & & & 0.9996 & & 0.9731 \\ Normal & & & 0.9992 & & 0.8201 \\ Log-normal & & & 0.9993 & & 0.9421 \\ Exponential & & & 0.9996 & & 0.9464 \\ Dirichlet & & & 0.9995 & & 0.9737 \\  Average & 1.0000 & 0.0162 s & 0.9994 & 5.0201 s & 0.9310 & 0.0397 s \\  

Table 3: Comparison between AE, AAE and SuperEncoder in terms of runtime and fidelity.

**Scalability.** Although AE runs fast, it exhibits poor scalability since the circuit depth grows exponentially with the number of qubits. The depth of AAE is empirically determined by increasing depth until the final fidelity does not increase, same depth is adopted for SuperEncoder. We deter the details of determining the depth of AAE/SuperEncoder to Appendix A. As shown in Fig. 6(a), the depth of AE grows fast and becomes much larger than AAE/SuperEncoder, e.g., the depth of AE for a 8-qubit state is 984, whereas the depth of AAE/SuperEncoder is only 120.

**Fidelity.** From Table 3, it is evident that SuperEncoder experiences notable fidelity degradation when compared with AAE and AE. Specifically, the average fidelity of SuperEncoder is 0.9307, whereas AAE and AE achieve higher average fidelities of 0.9994 and 1.0, respectively. Note that, although AE demonstrates the highest fidelity under ideal simulation, its performance deteriorates significantly in noisy environments. Fig. 6(b) presents the performance of these three QSP methods on quantum states with 4, 6, and 8 qubits on the ibm_osaka machine. While the fidelity of AE is higher than AAE/SuperEncoder on the 4-qubit and 6-qubit states, its fidelity on the 8-qubit state is only 0.0049, becoming much lower than AAE/SuperEncoder. This decline is primarily attributed to its large circuit depth as shown in Fig. 6(a).

### Application to Downstream Tasks

**Quantum Machine Learning.** We first apply SuperEncoder to a QML task. MNIST dataset is adopted for demonstration, we extract a sub-dataset composed on digits 3 and 6 for evaluation. The quantum circuit that implements a QNN is depicted in Fig. 8, which consists of an encoder block and \(m\) entangler layers. Here the encoder block is implemented via QSP circuits, either AE, AAE, or SuperEncoder, of which the parameters are frozen during the training of QNN. The test results are shown in Fig. 8, we observe that SuperEncoder achieves similar performance with AAE and AE. The reason lies in the fact that classification tasks can be robust to noises. Consequently, approximate QSP (AAE and SuperEncoder) with a certain degree of fidelity loss is tolerable.

**HHL Algorithm.** Besides QML, quantum-enhanced linear algebra algorithms are another important set of applications that heavily rely on QSP. The most famous algorithm is the HHL algorithm . The problem can be defined as, given a matrix \(^{N N}\), and a vector \(^{N}\), find \(^{N}\) satisfying \(=\). A typical implementation of HHL utilizes the circuit depicted in Fig. 9. The outline of HHL is as follows. (i) Apply a QSP circuit to prepare the quantum state \(|\). (ii) Apply Quantum Phase Estimation  (QPE) to estimate the eigenvalue of \(\) (iii) Apply conditioned rotation gates on ancillary qubits based on the eigenvalues (R). (iv) Apply an inverse QPE (QPE_inv) and measure the ancillary qubits to reconstruct the solution vector \(\). Note that, HHL does not return the solution \(\) itself, but rather an approximation of the expectation value of some operator \(\) associated with \(\), e.g.,

Figure 8: Schematic of a QNN (above) and test accuracies of QSP methods on the QML task (below).

Figure 7: Comparison between AE, AAE, and SuperEncoder in terms of circuit depth and fidelity on real devices.

Figure 9: Schematic of HHL.

\(^{}\). Here, we adopt an optimized version of HHL proposed by Vazquez et al.  for evaluation. To compare the performance between different QSP methods, we construct linear equations with fixed matrix \(\) and operator \(\), while we sample different vectors from our synthetic dataset as \(\). Results are concluded in Table 4. Unlike QML, HHL expects precise QSP, thus we take the results from AE as the ground truth values and compare the relative error between AAE/SuperEncoder and AE. The relative error of SuperEncoder is 2.4094%, while the error of AAE is only 0.3326%.

### Discussion and Future Work

The results of our evaluation can be concluded in two folds. (i) SuperEncoder effectively eliminates the iteration overhead of AAE, thereby becoming both fast and scalable. However, it has a notable degradation in fidelity. (ii) The impact of fidelity degradation varies across different downstream applications. For QML, the fidelity degradation is affordable as long as the prepared states are distinguishable across different classes. However, algorithms like HHL rely on precise QSP to produce the best result. In these algorithms, SuperEncoder suffers from higher error ratio than AAE.

Note that, the current evaluation results may not reflect the actual performance of SuperEncoder on real NISQ devices. Recent work has shown that AAE achieves significantly better fidelity than AE does . This is due to the intrinsic noise awareness of AAE, as it could obtain states from noisy devices to guide updating parameters with better robustness. In essence, the proposed SuperEncoder possesses the same nature as AAE. Unfortunately, although the noise-robustness of AAE can be evaluated on a small set of test samples, it is difficult to perform noise-aware training for SuperEncoder as it requires a large dataset for pre-training. Consequently, SuperEncoder relies on huge amounts of interactions with noisy devices, thereby becoming extremely time-consuming. As a result, the effectiveness of SuperEncoder in noisy environments remains largely unexplored, which we leave for future exploration. More discussion about this perspective is in Appendix C.

## 5 Related Work

Besides QSP, there are other methods for loading classical data into quantum states. These methods can be roughly regarded as _quantum feature embedding_ primarily used in QML, which maps classical data to a completely different distribution encoded in quantum states. A widely used embedding method is known as angle embedding. Li et al. have proven that this method has a concentration issue, which means that the encoded states may become indistinguishable as the circuit depth increases . Lei et al. proposed an automatic design framework for efficient quantum feature embedding, resolving the issue of concentration . The central idea of this framework is to search for the most efficient circuit architecture for a given classical input, which is also known as Quantum Architecture Search (QAS) [38; 30; 54]. While the application scenario of quantum feature embedding is largely limited to QML, QSP has broader usage in general quantum applications, distinguishing SuperEncoder from all aforementioned work.

## 6 Conclusion

In this work, we propose SuperEncoder, a neural network-based QSP framework. Instead of iteratively tuning the circuit parameters to approximate each quantum state, as is done in AAE, we adopt a different approach by directly learning the relationship between target quantum states and the required circuit parameters. SuperEncoder combines the scalable circuit architecture of AAE with the fast runtime of AE, as verified by a comprehensive evaluation on both synthetic dataset and downstream applications.

    & AE & AAE & SuperEncoder \\  \(_{0}\) & 0.7391 & 0.7404 & 0.7355 \\ \(_{1}\) & 0.7449 & 0.7445 & 0.7544 \\ \(_{2}\) & 0.7492 & 0.7469 & 0.8134 \\ \(_{3}\) & 0.7164 & 0.7099 & 0.7223 \\ \(_{4}\) & 0.7092 & 0.7076 & 0.7155 \\  Avg err & & 0.3326\% & 2.4094\% \\   

Table 4: Performance of different QSP methods in HHL algorithm. ‘Avg err’ denotes the average relative errors between AAE/SuperEncoder and AE.