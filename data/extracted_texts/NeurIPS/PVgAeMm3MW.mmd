# SF-V: Single Forward Video Generation Model

Zhixing Zhang\({}^{1,2}\)1  Yanyu Li\({}^{1}\)  Yushu Wu\({}^{1}\)  Yanwu Xu\({}^{1}\)  Anil Kag\({}^{1}\)

**Ivan Skorokhodov\({}^{1}\)**  Willi Menapace\({}^{1}\)  Aliaksandr Siarohin\({}^{1}\)  Junli Cao\({}^{1}\)

**Dimitris Metaxas\({}^{2}\)**  Sergey Tulyakov\({}^{1}\)  Jian Ren\({}^{1}\)2

\({}^{1}\)Snap Inc. \({}^{2}\) Rutgers University

Project Page: https://snap-research.github.io/SF-V

###### Abstract

Diffusion-based video generation models have demonstrated remarkable success in obtaining high-fidelity videos through the iterative denoising process. However, these models require multiple denoising steps during sampling, resulting in high computational costs. In this work, we propose a novel approach to obtain _single_-step video generation models by leveraging adversarial training to fine-tune pre-trained video diffusion models. We show that, through the adversarial training, the multi-steps video diffusion model, _i.e._, Stable Video Diffusion (SVD), can be trained to perform _single_ forward pass to synthesize high-quality videos, capturing both temporal and spatial dependencies in the video data. Extensive experiments demonstrate that our method achieves competitive generation quality of synthesized videos with significantly reduced computational overhead for the denoising process (_i.e._, around \(23\) speedup compared with SVD and \(6\) speedup compared with existing works, with even better generation quality), paving the way for real-time video synthesis and editing.

Figure 1: Example generation results from our _single_-step image-to-video model. Our model can generate high-quality and motion consistent videos by only performing the sampling _once_ during inference. Please refer to our webpage for whole video sequences.

Introduction

Video generation is experiencing unprecedented advancements by leveraging large-scale denoising diffusion probabilistic models [1; 2] to create photo-realistic frames with natural and consistent motion [3; 4], revolutionizing various fields, such as entertainment and digital content creation [5; 6].

Early efforts on image generation show that diffusion models have the significant capabilities when scaled-up to generate diverse and high-fidelity content [1; 2]. Additionally, these models benefit from a stable training and convergence process, demonstrating a considerable improvement over their predecessors, _i.e._, generative adversarial networks (GANs) . Therefore, many studies on video generation are built upon the diffusion models. Some of them utilize the pre-trained image diffusion models for video synthesis through introducing temporal layers to generate high-quality video clips [8; 9; 10; 11]. Inspired by this design paradigm, numerous video generation applications have emerged, such as animating a given image with optional motion priors [12; 13; 14; 15], generating videos from natural language descriptions [16; 17; 5], and even synthesizing cinematic and minutes-long temporal-consistent videos [18; 4].

Despite the impressive generative performance, video diffusion models suffer from tremendous computational costs, hindering their widespread and efficient deployment. The iterative nature of the sampling process makes video diffusion models significantly slower than other generative models (_e.g._, GANs [19; 20]). For instance, in our benchmark, it only takes \(0.3\) seconds to perform a single denoising step using the UNet from the Stable Video Diffusion (SVD)  model to generate \(14\) frames on one NVIDIA A100 GPU, while consuming \(10.79\) seconds to run the UNet with the conventional \(25\)-step sampling.

The significant overhead introduced by iterative sampling highlights the necessity to generate videos in fewer steps while maintaining the quality of multi-step sampling. Recent works [21; 22; 23] extend consistency training  to video diffusion models, offering two main benefits: reduced total runtime by performing fewer sampling steps and the preservation of the pre-trained ordinary differential equation (ODE) trajectory, allowing high-quality video generation with fewer sampling steps (_e.g._, \(8\) steps). Nevertheless, these approaches still struggle to achieve _single_-step high-quality video generation.

On the other hand, distilling image diffusion models into one step via adversarial training have shown promising progress [25; 26; 27; 28; 29]. However, scaling up such approaches for video diffusion model training to achieve single-step generation has not been well studied. In this work, we leverage adversarial training to obtain an image-to-vide o generation model that requires only _single_-step generation, with the contributions summarized as follows:

* We build the framework to fine-tune the pre-trained state-of-the-art video diffusion model (_i.e._, SVD) to be able to generate videos in _single_ forward pass, greatly reducing the runtime burden of video diffusion model. The training is conducted through adversarial training on the latent space.
* To improve the generation quality (_e.g._, higher image quality and more consistent motion), we introduce the discriminator with spatial-temporal heads, preventing the generated videos from collapsing to the conditional image.
* We are the first to achieve one-step generation for video diffusion models. Our one-step model demonstrates superiority in FVD  and visual quality. Specifically, for the denoising process, our model achieves around \(23\) speedup compared with SVD and \(6\) speedup compared with exiting works, with even better generation quality.

## 2 Related Work

**Video Generation** has been a long studied problem, aiming for high-quality image generation and consistent motion synthesis. Early efforts in this domain utilize adversarial training [31; 32]. Though extensively investigated, the trained models still suffer from low resolution, limited generated sequences, and inconsistent motion. Recent studies leverage denoising diffusion probabilistic models [1; 33; 34] to scale the video generators up to billions of model parameters, achieving high-fidelity generation sequences [35; 36; 37; 38; 39; 5; 4; 3; 18]. Nonetheless, the tremendous computation cost of video diffusion models hinders their wide deployment. It takes tens of seconds to generate a single video batch even for high-tier server GPUs. Consequently, the reduction of denoising steps [21; 40; 22] is pivotal to efficient video generation, which linearly scales down the total runtime.

**Step Distillation of Diffusion Models.** Initially developed upon image diffusion models, progressive distillation [41; 42] aims to distill a less-step student mimicking the full-step counterpart. Specifically, at each step, the student learns to predict a teacher location in the ODE flow, resulting in fewer required denoising steps during inference time. Latent Consistency Models (LCM) [24; 43; 44; 45; 46; 47; 48] instead proposes to refine the prediction objective into clean data, and achieves high-fidelity generation with fewer (\(2 4\)) steps. Rectified flow [49; 50] progressively straights the ODE flow where each denoising step becomes a substitution of a long trajectory. UFOGen , ADD , and its latent-space successor LADD  further incorporate adversarial loss to distill teacher signal into the few-step student, enabling one-step generation with reasonable quality, and outperforming the teacher model with about \(4\) steps. DMD  proposes to combine a distribution matching objective and a regression loss to distill a one-step generator. The recent SDXL-Lightning  combines progressive distillation with adversarial loss to mitigate the blurry generation issue and ease the convergence of multi-step settings. In addition, SDXL-Lightning refines the design of the discriminator and proposes two adversarial loss objectives to balance sample quality and mode convergence.

When it comes to video models, VideoLCM  and AnimateLCM  adopt consistency distillation to enable 4-step generation with comparable quality to the full-step pre-trained video diffusion model. However, in the one-step setting, there are still considerable performance gaps observed for the visual quality. Animate-Diff Lightning  incorporates adversarial distillation to further reduce warps and blurs in the \(1\)-\(2\) step setting, despite that the model still underperforms full-step baselines.

## 3 Method

Our goal is to generate high-fidelity and temporally consistent videos in as few sampling steps as possible (_i.e._, \(1\) step). The adversarial objective has been proven effective in reducing the number of sampling steps required by diffusion models in image space [27; 28; 25; 51]. However, limited efforts have been conducted on scaling up the effective adversarial training to reduce the number of sampling steps for video diffusion models. In the following, we introduce the framework of latent adversarial training to obtain efficient video diffusion model by running sampling in _single_ step. In this framework, we initialize the generator and part of the discriminator with the weights of a pre-trained video diffusion model. Moreover, we introduce a structure with separate spatial and temporal discriminator heads to enhance frame quality and motion consistency.

### Preliminaries of Stable Video Diffusion

Our method is built upon the Stable Video Diffusion (SVD) , which is an implementation of the EDM-framework  for conditional video generation, where the diffusion process is conducted in latent space. We choose the _publicly released_ image-to-video generation pipeline of SVD due to its superior performance in generating high-quality and motion-consistent videos.

**Training Diffusion Models with EDM.** To facilitate the presentation, let \(p_{data}(x_{0})\) denote the data distribution and \(p(x;)\) represent the distribution obtained by adding \(^{2}\)-variance Gaussian noise to the data. For sufficiently large \(_{}\), \(p(x;_{})(0,_{}^{2})\). Starting from high variance Gaussian noise \(x_{M}(0,_{}^{2})\), the diffusion models sequentially denoise towards \(_{0}=0\) through the numerical simulation of the _Probability Flow_ ODE . The denoiser, \(D_{}\), attempts to predict the clean \(x_{0}\) and is trained via denoising score matching:

\[_{x_{0} p_{data}(x_{0}),(,) p(, )}[_{}\|D_{}(x_{0}+;)-x_{0 }\|_{2}^{2}],\] (1)

where \(p(,)=p()(;0,^{2})\), \(p()\) is a distribution over noise levels \(\), and \(_{}:^{+}^{+}\) is a weighting function.

EDM  parameterizes the denoiser \(D_{}\) as:

\[D_{}(x;)=c_{skip}()x+c_{out}()F_{}(c_{in}( )x;c_{noise}()),\] (2)

where \(F_{}\) is the network to be trained. The preconditioning functions are set as \(c_{skip}()=(^{2}+1)^{-1}\), \(c_{out}()=+1}}\), \(c_{in}()=+1}}\), and \(c_{noise}()=0.25\).

**Stable Video Diffusion.** The training of video model asks for a dataset of videos, each consisting of \(N\) frames with height \(H\) and width \(W\). Given a video \(_{0}=\{_{0}^{i}\}_{i=0}^{N}\), where \(_{0}^{i}^{3 H W}\), SVD  maps each frame separately to latent space using a frame encoder, \(E\). The encoded frames are represented as \(x_{0}=\{E(_{0}^{i})\}_{i=0}^{N}\), resulting in \(x_{0}^{N 4}\). Here, \(x_{0} p_{data}(x_{0})\) is a sequence of \(N\) latent frames with 4 channels, height \(\), and width \(\).

SVD inflates a text-to-image diffusion model to a text-to-video diffusion model . The text conditioning is replaced with image conditioning to create an image-to-video diffusion model. Consequently, the parameterized denoiser \(D_{}\) in Eq. (2) is modified as follows:

\[D_{}(x;,)=c_{skip}()x+c_{out}()F_{}( c_{in}()x;c_{noise}(),),\] (3)

where \(\) is the image condition \(_{0}^{0}\), _i.e._, the first frame of the video.

At sampling time, \(D_{}\) is leveraged to restore \(x_{t-1}\) from \(x_{t}\) using the following relation :

\[d_{t}=(x_{t}-D_{}(x_{t};_{t},))/_{t};\ \ x_{t-1}=x_{t}+( _{t-1}-_{t}) d_{t},\] (4)

where \(_{t}\) is obtained with

\[_{t}=(_{}^{1/}+(_{}^{1/}- _{}^{1/}))^{},\] (5)

where \(T\) is the total number of denoising steps and \(\) is a hyper-parameter controlling the emphasis level to low noise levels.

### Latent Adversarial Training for Video Diffusion Model

**Design of Networks.** Diffusion-GAN hybrid models are designed for training with large denoising step sizes [25; 27; 28; 51]. Our training procedure, illustrated in Fig. 2, involves two networks: a generator \(_{}\) and a discriminator \(_{}\). The generator is initialized from a pre-trained UNet diffusion model with weights \(\) (_i.e._, the UNet from SVD). The discriminator is _partially_ initialized from a pre-trained UNet diffusion model. Namely, the backbone of the discriminator shares the same architecture and weights as the pre-trained UNet encoder, and the weights of this backbone are kept frozen during training. Additionally, we _augment_ the discriminator by adding a spatial discriminator head and

Figure 2: **Training Pipeline.** We initialize our generator and discriminator using the weights of a pre-trained image-to-video diffusion model. The discriminator utilizes the encoder part of the UNet as its backbone, which remains _frozen_ during training. We add a spatial discriminator head and a temporal discriminator head after each downsampling block of the discriminator backbone and only update the parameters of these heads during training. Given a video latent \(x_{0}\), we first add noise \(_{t}\) through a forward diffusion process to obtain \(x_{t}\). The generator then predicts \(_{0}\) given \(x_{t}\). We calculate the reconstruction loss \(_{recon}\) between \(x_{0}\) and \(_{0}\). Additionally, we add noise level \(_{t}^{}\) to both \(x_{0}\) and \(_{0}\) to obtain real and fake samples, \(x_{t}^{}\) and \(_{t}^{}\). The adversarial loss \(_{adv}\) is then calculated using these real and fake sample pairs.

a temporal discriminator head after each backbone block. Therefore, in total, the discriminator comprises four spatial discriminator heads and four temporal discriminator heads. Only the parameters in these heads are trained during the discriminator training steps. The detailed architecture of these heads will be further discussed in Sec. 3.3.

**Latent Adversarial Training.** We use a pair of generated samples \(_{0}\) and real samples \(x_{0}\) to conduct the adversarial training. Specifically, during training, the generator \(_{}\) produces _generated_ samples \(_{0}(x_{t};_{t},)\) from noisy data \(x_{t}\). The noisy data points are derived from a dataset of _real_ latents \(x_{0}\) via a forward diffusion process \(x_{t}=x_{0}+_{t}\). We sample \(_{t}\) uniformly from the set \(\{_{1},,_{T_{g}-1}\}\), obtained by setting \(T\) to \(T_{g}\) and \(t\{1,2,,T_{g}-1\}\) in Eq. (5). In practice, we set \(T_{g}=4\). The generated sample \(_{0}\) is given by:

\[_{0}(x_{t};_{t},)=c_{skip}(_{t})x_{t}+c_{out}( _{t})_{}(c_{in}(_{t})x_{t};c_{noise}(_{t} ),).\] (6)

To train the discriminator, we forward the generated samples \(_{0}\) and real samples \(x_{0}\) into it, aiming to let the discriminator distinguish between them. However, for a more stabilized training, inspired by exiting works , we add noise to the samples before passing them to the discriminator, since the backbone of the discriminator is initialized from a pre-trained UNet with weights frozen during training. Namely, we sample \(_{t}^{}\) from the set \(\{_{1}^{},,_{T_{d}-1}^{}\}\), obtained by setting \(T\) to \(T_{d}\) and \(t\{1,2,,T_{d}-1\}\) in Eq. (5), according to a discretized lognormal distribution defined as:

\[p(_{t}^{})^{ }-P_{mean})}{P_{std}}-^{}-P_{mean})}{P_{std}}\,,\] (7)

where \(P_{mean}\) and \(P_{std}\) control the noise level added to the samples before passing them to the discriminator. A visualization of how different \(P_{mean}\) and \(P_{std}\) affect the probability of \(^{}\) sampled is illustrated in Fig. 6. In practice, we set \(T_{d}=1,000\). We diffuse the real and generated samples through the forward process to obtain \(_{t}^{}=_{0}+_{t}^{}\) and \(x_{t}^{}=x_{0}+_{t}^{}\), respectively.

Following literature , we use the hinge loss  as the adversarial objective function for improved performance. The adversarial optimization for the generator \(_{adv}^{}(_{0},)\) is defined as:

\[_{adv}^{}=_{,^{},x_{0}}[ _{}(c_{in}(_{t}^{})_{t}^{})],\] (8)

Furthermore, we notice that a reconstruction objective, \(_{recon}\), between \(x_{0}\) and \(_{0}\) can significantly improve the stability of the training process. We use Pseudo-Huber metric  for reconstruction loss, as:

\[_{recon}(_{0},x_{0})=_{0}-x_{0}\|_{2}^{2}+c^ {2}}-c,\] (9)

where \(c>0\) is an adjustable constant. Thus, the overall objective for training the generator is as follows with \(\) balances two losses:

\[^{}=_{adv}^{}+_ {recon}(_{0},x_{0}).\] (10)

Other other hand, the discriminator is trained to minimize:

\[_{adv}^{}=_{^{},x_{0}}[(0,1+ _{}(c_{in}(_{t}^{})x_{t}^{}))+  R1]+_{,^{},x_{0}}[(0,1-_{ }(c_{in}(_{t}^{})_{t}^{})))],\] (11)

where \(R1\) denotes the R1 gradient penalty . Here, we omit other conditional input for \(_{}\), such as \(c_{noise}(^{})\) and image conditioning \(\), for simplicity.

**Discussion.** Our latent adversarial training framework is largely inspired by LADD . Similar to LADD, we set \(T_{g}=4\) in practice and utilize a pre-trained diffusion model as part of the discriminator. However, our approach has several key differences compared with LADD . _First_, we extend the image latent adversarial distillation framework to the video domain by incorporating spatial and temporal heads to achieve one-step generation for video diffusion models. The specifics of the spatial and temporal heads are discussed in Sec. 3.3. _Second_, based on the EDM-framework , we observe that sampling \(t^{}\) using a discretized lognormal distribution provides more stable adversarial training compared to the logit-normal distribution used in LADD . _Finally_, unlike LADD , we utilize real video data instead of synthetic data for training and incorporate a reconstruction objective (_i.e._, Eq. (9)) to ensure more stable training.

### Spatial Temporal Heads

To train the discriminator for better understanding of the spatial information and temporal correlation, we employ separate spatial and temporal discriminator heads for adversarial training . The backbone of the discriminator is the encoder from the pre-trained diffusion model (_i.e._, UNet), which consists of four spatial-temporal blocks sequentially . The first three blocks downsample the spatial resolution by a factor of \(2\), and the last block maintains the spatial resolution. We extract the output features from each spatial-temporal block and utilize a spatial head and a temporal head to determine whether the sample is real or fake. The discriminator can be conditioned on additional information via projection  to enhance performance. In our setting, we use the image condition \(\) and \(^{}\) as the projected condition \(\).

**Spatial Head.** For an input feature of shape \(b t c h w\), the spatial discriminator first reshapes it to \((bt) c h w\). This way, each frame feature in a video is processed separately. The architecture for our proposed spatial head is illustrated in the left part of Fig. 3.

**Temporal Head.** Even though the features obtained from the discriminator backbone contain spatial-temporal information, we observe that using only spatial discriminator heads causes the generator to produce frames that are all identical to the image condition. To achieve better temporal performance (_e.g._, more vivid motion), we propose to add a temporal discriminator head parallel to the spatial discriminator head. The input features are reshaped to \((bhw) c t\) instead. The architecture for our temporal head is illustrated in the right part of Fig. 3.

## 4 Experiment

**Implementation Details.** We apply Stable Video Diffusion  as the base model across our experiments. All the experiments are conducted on an internal video dataset with around one million videos. We fix the resolution of the training videos as \(768 448\) with the FPS as \(7\). The training is conducted for \(50\)K iterations on \(8\) NVIDIA A100 GPUs, using the SM3 optimizer  with a learning rate of \(1e-5\) for the generator (_i.e._, UNet) and \(1e-4\) for the discriminator. We set the momentum and \(\) for both optimizers as \(0.5\) and \(0.999\), respectively. The total batch size is set as \(32\) using a

   Name & FVD\(\) & Steps & Latency (s) \\   & 153.4 & 25 & 10.79 \\  & 194.4 & 16 & 6.89 \\  & 488.6 & 8 & 3.44 \\  & 1687.0 & 4 & 1.72 \\  ^{*}\)} & 321.1 & 8 & 3.25 \\  & 403.2 & 4 & 1.62 \\  & 521.9 & 2 & 0.82 \\   & 281.0 & 8 & 1.85 \\  & 801.4 & 4 & 0.92 \\  & 1158.4 & 2 & 0.46 \\  UFOGent\({}^{}\) & 1917.2 & 1 & 0.30 \\ LADD\({}^{}\) & 1893.8 & 1 & 0.30 \\  Ours & 180.9 & 1 & 0.30 \\   

Table 1: **Comparison Results.** We compare our method against SVD , AnimateLCM , UFOGent , and LADD  using different numbers of sampling steps. AnimateLCM\({}^{*}\) indicates the usage of the officially provided \(25\)-frame model, with only the first \(14\) frames considered for FVD calculation. \({}^{}\) indicates our implementations. We also report the latency of the denoising process for each setting, measured on a single NVIDIA A100 GPU.

Figure 3: **Spatial & Temporal Discriminator Heads.** Our discriminator heads take in intermediate features of the UNet encoder. Follow exiting arts , we use image conditioning and frame index as the projected condition \(\). **Left:** For spatial discriminator heads, the input features are reshaped to merge the temporal axis and the batch axis, such that each frame is considered as an independent sample. **Right:** For temporal discriminator heads, we merge spatial dimensions to batch axis.

steps gradient accumulation. We set the EMA rate as \(0.95\). We set \(P_{mean}=-1,P_{std}=-1\), and \(=0.1\) if not otherwise noted. At inference time, we sample videos at resolution of \(1024 576\).

### Qualitative Visualization

To comprehensively evaluate the capabilities of our method, we use SDXL  (with refiner) to generate images of different scenes at the resolution of \(1024 1024\). We then perform center crop on the generated images to get resolution as \(1024 576\), which serves as the condition of our approach to synthesize videos of \(14\) frames at \(7\) FPS. As shown in Fig. 4, our method can successfully generate videos of high-quality frames and consistent object movements with _only_\(1\) step during inference.

### Comparisons Results

**Quantitative Comparisons.** We present a comprehensive evaluation of our method compared to the existing state-of-the-art approach, AnimateLCM , UFOGen , LADD , and SVD . To

Figure 4: **Video Generation on Single Conditioning Images from Various Domains. We employ our method on various images generated by SDXL  to synthesized videos. The videos contain \(14\)-frame at a resolution of \(1024 576\) with \(7\) FPS. The results demonstrate that our model can generate high-quality motion-consistent videos of various objects across different domains. Please refer to our webpage for whole video sequences.**

Figure 5: **Comparison between SVD , AnimateLCM , LADD , UFOGen , and Our Approach.** We provide the synthesized videos (sampled frames) under various settings for different approaches. We use SVD to generate videos under \(25\), \(16\), and \(8\) sampling steps, AnimateLCM to synthesize videos under \(4\) sampling steps, LADD and UFOGen to generate videos under \(1\) sampling step. AnimateLCM, LADD and UFOGen generates blurry frames with few-steps and single-step sampling. Our approach can accelerate the sampling speed by \(22.9\) compared with SVD while maintaining similar frame quality and motion consistency.

conduct a fair comparison on the SVD model, we train the AnimateLCM, UFOGen, and LADD on SVD using our video dataset. We follow the released code and instructions provided by AnimateLCM authors. Additionally, we include the officially released AnimateLCM-xt1.1  by evaluating the first \(14\) generated frames and denote the approach as AnimateLCM\({}^{}\). We try our best to implement LADD  and UFOGen  and denote respectively as LADD\({}^{}\), and UFOGen\({}^{}\). Note that simply re-using the discriminator from LADD  and UFOGen  leads to _out-of-memory issue_, since the computation in the video model is much larger than the image model. Here we replace the discriminator from LADD  and UFOGen  with the one proposed in our work.

We follow exiting works  by using Frechet Video Distance (FVD)  as the comparison metric. Specifically, we use the first frame from the UCF-101 dataset  as the conditioning input and generate \(14\)-frame videos at a resolution of \(1024 576\) at \(7\) FPS for all methods. The generation results are then resized back to \(320 240\) for FVD calculation. Our method is compared against SVD  and AnimateLCM , each using a different number of sampling steps. Furthermore, to better demonstrate the effectiveness of our method, we measure the generation latency of each method, which is calculated on running the diffusion model (_i.e._, UNet). Note that only for SVD , classifier-free guidance  is used, leading to higher computational cost.

As shown in Tab. 1, our method achieves comparable results to the base model using \(16\) discrete sampling steps, resulting in approximately a \(23\) speedup. Our method also outperforms the \(8\)-steps sampling results for AnimateLCM and AnimateLCM\({}^{*}\), indicating a speedup of more than \(6\). For _single-step_ evaluation, our method performs much better than existing step-distillation methods [25; 28] built upon image-based-diffusion models.

**Qualitative Comparisons.** We further provide qualitative comparisons across different approaches by using publicly available web images. Fig. 5 presents generation results from SVD  with \(25\), \(16\), and \(8\) sampling steps, AnimateLCM  with \(4\) sampling steps, UFOGen , LADD , and our method with \(1\) sampling step. As can be seen, our method achieves results comparable to the sampling results of SVD using \(16\) or \(25\) denoising steps. We notice significant artifacts for videos synthesized by SVD when using \(8\) denoising steps. Compared to AnimateLCM ,UFOGen , and LADD , our method produces frames of higher quality and better temporal consistency, with fewer or same denoising steps, demonstrating the effectiveness of our proposed approach.

### Ablation Analysis

**Effect of Discriminator Heads.** We explore the effect of our proposed spatial and temporal heads by measuring the FVD on the UCF-101 dataset. We conduct latent adversarial training with three different discriminator settings to analyze the impact of our spatial and temporal discriminators. As shown in Tab. 2, training with only spatial heads (denoted as _SP_) or only temporal heads (denoted as _TE_) results in significantly worse performance than using all of them (denoted as _SP+TE_).

Nevertheless, since our discriminator backbone shares the same architecture as the spatial-temporal generator, the receptive field of each pixel on the feature maps provided by the backbone can cover a region both spatially and temporally. Additionally, we embed the frame index as an additional projected condition. Consequently, even when using only spatial heads or only temporal heads, the generated videos still exhibit reasonable frame quality and temporal coherence.

**Effect of Noise Distribution for Discriminator.** As shown in Fig. 6, following Eq. (5), \(P_{mean}\) and \(P_{std}\) control the distribution of \(^{}_{t}\), which is the noise level added to \(x_{0}\) or \(_{0}\) before passing to the discriminator as real and fake samples, respectively. We explore the effect of different noise distributions on model performance by calculating FVD on the UCF-101 dataset.

When the sampled \(^{}_{t}\) is concentrated on small values, _e.g._, \(P_{mean}=-2\) and \(P_{std}=-1\) in our case, we notice that the discriminator can quickly learn to distinguish real samples from fake ones. This leads to a significant drop in performance, as shown in Tab. 3 and Fig. 7.

On the other hand, when the noise level becomes too high, _e.g._, \(P_{mean}=1\) and \(P_{std}=1\), the discriminator input, which is \(c_{}(^{}_{t})^{}_{t}=_{0}+ ^{}_{t}}{_{t}}^{2}+1}}\), results in small adversarial gradients for the generator. This causes increased artifacts in the generated videos, as shown in Fig. 7 and Tab. 3.

## 5 Discussion and Conclusion

In this work, we leverage adversarial training to reduce the denoising steps of the video diffusion model and thus improve its generation speed. We further enhance the discriminator by introducing spatial-temporal heads, resulting in better video quality and motion diversity. We are the first to achieve _1-step_ generation for video diffusion models while preserving comparable visual quality and FVD scores, democratizing efficient video generation to a broader audience by delivering more than \(20\) speedup for the denosing process.

**Limitations.** We observe that when the given conditioning image indicates complex motion, _e.g._running, our model tends to generate unsatisfactory results, _e.g._blurry frames, as shown in Fig. 8. Such artifacts are introduced by the original SVD model, as can be observed in Fig. 8. We believe a better text-to-video model can solve such issue.

This work successfully achieves _single_ sampling step for video diffusion models. However, under such setting, the temporal VAE decoder and the encoder for image conditioning take a considerable portion of the overall runtime. We leave the acceleration of these models as future work.

    & SP+TE & SP & TE \\  FVD & **180.9** & 514.7 & 539.2 \\   

Table 2: **Analysis of discrim-** Table 3: **FVD _vs._\(^{}\) distributions.**

Figure 8: **Limitations.** We show that, for some conditional images, our model tends to generate a few unsatisfactory frames when complex motion might be required (_Second Row_). Similar artifacts can also be observed in frames generated from SVD by sampling at \(25\)-steps (_First Row_).

Figure 7: **Analysis of \(^{}\) Distributions.** We investigate the impact of changing the distribution of \(^{}\) by adjusting \(P_{mean}\) and \(P_{std}\). The results are shown with the same image conditioning. The first row and the second row display the first and last frames generated, respectively.