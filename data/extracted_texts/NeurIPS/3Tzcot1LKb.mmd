# SimPO: Simple Preference Optimization

with a Reference-Free Reward

 Yu Meng\({}^{1}\)1 Mengzhou Xia\({}^{2}\)2 Danqi Chen\({}^{2}\)

\({}^{1}\)Computer Science Department, University of Virginia

\({}^{2}\)Princeton Language and Intelligence (PLI), Princeton University

yumeng5@virginia.edu

{mengzhou,danqic}@cs.princeton.edu

Equal Contribution.Code and models can be found at https://github.com/princeton-nlp/SimPO.

###### Abstract

Direct Preference Optimization (DPO) is a widely used offline preference optimization algorithm that reparameterizes reward functions in reinforcement learning from human feedback (RLHF) to enhance simplicity and training stability. In this work, we propose SimPO, a simpler yet more effective approach. The effectiveness of SimPO is attributed to a key design: using the _average_ log probability of a sequence as the implicit reward. This reward formulation better aligns with model generation and eliminates the need for a reference model, making it more compute and memory efficient. Additionally, we introduce a target reward margin to the Bradley-Terry objective to encourage a larger margin between the winning and losing responses, further improving the algorithm's performance. We compare SimPO to DPO and its recent variants across various state-of-the-art training setups, including both base and instruction-tuned models such as Mistral, Llama 3, and Gemma 2. We evaluate on extensive chat-based evaluation benchmarks, including AlpacaEval 2, MT-Bench, and Arena-Hard. Our results demonstrate that SimPO consistently and significantly outperforms existing approaches without substantially increasing response length. Specifically, SimPO outperforms DPO by up to 6.4 points on AlpacaEval 2 and by up to 7.5 points on Arena-Hard. Our top-performing model, built on Gemma-2-9B-it, achieves a 72.4% length-controlled win rate on AlpacaEval 2, a 59.1% win rate on Arena-Hard, and ranks 1st on Chatbot Arena among \(<\)10B models with real user votes.1

## 1 Introduction

Learning from human feedback is crucial in aligning large language models (LLMs) with human values and intentions , ensuring they are helpful, honest, and harmless . Reinforcement learning from human feedback (RLHF)  is a popular method for fine-tuning language models to achieve effective alignment. While the classical RLHF approach  has shown impressive results, it presents optimization challenges due to its multi-stage procedure, which involves training a reward model and then optimizing a policy model to maximize that reward .

Recently, researchers have been exploring simpler offline algorithms. Direct Preference Optimization (DPO)  is one such approach. DPO reparameterizes the reward function in RLHF to directly learn a policy model from preference data, eliminating the need for an explicit reward model. It has gained widespread practical adoption due to its simplicity and stability. In DPO, the implicit reward is formulated using the log ratio of the likelihood of a response between the current policy model and the supervised fine-tuned (SFT) model. However, this reward formulation is not directly aligned withthe metric used to guide generation, which is approximately the average log likelihood of a response generated by the policy model. We hypothesize that this discrepancy between training and inference may lead to suboptimal performance.

In this work, we propose SimPO, a simple yet effective offline preference optimization algorithm (Figure 1). The core of our algorithm aligns the reward function in the preference optimization objective with the generation metric. SimPO consists of two major components: (1) a length-normalized reward, calculated as the _average_ log probability of all tokens in a response using the policy model, and (2) a target reward margin to ensure the reward difference between winning and losing responses exceeds this margin. In summary, SimPO has the following properties:

* **Simplicity**: SimPO does not require a reference model, making it more lightweight and easier to implement compared to DPO and other reference-based methods.
* **Significant performance advantage**: Despite its simplicity, SimPO significantly outperforms DPO and its latest variants (_e.g._, a recent reference-free objective ORPO ). The performance advantage is consistent across various training setups and extensive chat-based evaluations, including AlpacaEval 2  and the challenging Arena-Hard  benchmark. It achieves up to a 6.4 point improvement on AlpacaEval 2 and a 7.5 point improvement on Arena-Hard compared to DPO (Figure 1).
* **Minimal length exploitation**: SimPO does not significantly increase response length compared to the SFT or DPO models (Table 1), indicating minimal length exploitation .

Extensive analysis shows that SimPO utilizes preference data more effectively, leading to a more accurate likelihood ranking of winning and losing responses on a held-out validation set, which in turn translates to a better policy model. As shown in Table 1, our Gemma-2-9B-it-SimPO model achieves state-of-the-art performance, with a \(72.4\%\) length-controlled win rate on AlpacaEval 2 and a \(59.1\%\) win rate on Arena-Hard, establishing it as the strongest open-source model under 10B parameters. Most notably, when evaluated on Chatbot Arena  with real user votes, our model significantly improved upon the initial Gemma-2-9B-it model, advancing from 36th to 25th place and ranking first among all \(<\)10B models on the leaderboard.2

## 2 SimPO: Simple Preference Optimization

In this section, we first introduce the background of DPO (SS2.1). Then we identify the discrepancy between DPO's reward and the likelihood metric used for generation, and propose an alternative reference-free reward formulation that mitigates this issue (SS2.2). Finally, we derive the SimPO objective by incorporating a target reward margin term into the Bradley-Terry model (SS2.3).

  
**Model** & **LC (\%)** & **WR (\%)** & **Len.** \\ 
**Gemma-2-9B-it-SimPO** & 72.4 & 65.9 & 1833 \\ GPT-4 Turbo (04/09) & 55.0 & 46.1 & 1802 \\ Gemma-2-9B-it & 51.1 & 38.1 & 1571 \\
**Llama-3-8B-Instruct-SimPO** & 44.7 & 40.5 & 1825 \\ Claude 3 Opus & 40.5 & 29.1 & 1388 \\
**Llama-3-8B-Instruct-DPO** & 40.3 & 37.9 & 1837 \\ Llama-3-70B-Instruct & 34.4 & 33.2 & 1919 \\ Llama-3-8B-Instruct & 26.0 & 25.3 & 1899 \\   

Table 1: Length-controlled (LC) and raw win rate (WR), and generation lengths of top models on the AlpacaEval 2 Leaderboard. **Bold** are the models we trained.

Figure 1: SimPO and DPO mainly differ in their reward formulation, as indicated in the shaded box. SimPO outperforms DPO significantly across a range of settings on AlpacaEval 2 and Arena-Hard.

### Background: Direct Preference Optimization (DPO)

DPO  is one of the most popular preference optimization methods. Instead of learning an explicit reward model , DPO reparameterizes the reward function \(r\) using a closed-form expression with the optimal policy:

\[r(x,y)=(y x)}{_{}(y x)}+  Z(x),\] (1)

where \(_{}\) is the policy model, \(_{}\) is the reference policy, typically the supervised fine-tuned (SFT) model, and \(Z(x)\) is the partition function. By incorporating this reward formulation into the Bradley-Terry (BT) ranking objective , \(p(y_{w} y_{l} x)=(r(x,y_{w})-r(x,y_{l}))\), DPO expresses the probability of preference data with the policy model rather than the reward model, yielding the following objective:

\[_{}(_{};_{})=-_{(x,y_{w},y_{l})}[((y_{w}  x)}{_{}(y_{w} x)}-(y_{l}  x)}{_{}(y_{l} x)})],\] (2)

where \((x,y_{w},y_{l})\) are preference pairs consisting of the prompt, the winning response, and the losing response from the preference dataset \(\).

### A Simple Reference-Free Reward Aligned with Generation

Discrepancy between reward and generation for DPO.Using Eq. (1) as the implicit reward has the following drawbacks: (1) it requires a reference model \(_{}\) during training, which incurs additional memory and computational costs; and (2) it creates a mismatch between the reward optimized in training and the log-likelihood optimized during inference, where no reference model is involved. This means that in DPO, for any triple \((x,y_{w},y_{l})\), satisfying the reward ranking \(r(x,y_{w})>r(x,y_{l})\) does not necessarily mean that the likelihood ranking \(p_{}(y_{w} x)>p_{}(y_{l} x)\) is met (here \(p_{}\) is the average log-likelihood in Eq. (3)). In our experiments, we observed that only \( 50\%\) of the triples from the training set satisfy this condition when trained with DPO (Figure 3(b)). This observation aligns with a concurrent work , which finds that existing models trained with DPO exhibit random ranking accuracy in terms of average log-likelihood, even after extensive preference optimization.

Length-normalized reward formulation.One solution is to use the _summed_ token log probability as the reward, but this suffers from _length bias_-longer sequences tend to have lower log probabilities. Consequently, when \(y_{w}\) is longer than \(y_{l}\), optimizing the summed log probability as a reward forces the model to artificially inflate probabilities for longer sequences to ensure \(y_{w}\) receives a higher reward than \(y_{l}\). This overcompensation increases the risk of degeneration. To address this issue, we consider using the _average_ log-likelihood as the implicit reward:

\[p_{}(y x)=_{}(y x)=_ {i=1}^{|y|}_{}(y_{i} x,y_{<i}).\] (3)

This metric is commonly used for ranking options in beam search [33; 49] and multiple-choice tasks within language models [12; 37; 58]. Naturally, we consider replacing the reward formulation in DPO with \(p_{}\) in Eq. (3), so that it aligns with the likelihood metric that guides generation. This results in a length-normalized reward:

\[r_{}(x,y)=_{}(y x)= {|y|}_{i=1}^{|y|}_{}(y_{i} x,y_{<i}),\] (4)

where \(\) is a constant that controls the scaling of the reward difference. We find that normalizing the reward with response lengths is crucial; removing the length normalization term from the reward formulation results in a bias toward generating longer but lower-quality sequences (see Section 4.4 for more details). Consequently, this reward formulation eliminates the need for a reference model, enhancing memory and computational efficiency compared to reference-dependent algorithms.

### The SimPO Objective

Target reward margin.Additionally, we introduce a target reward margin term, \(>0\), to the Bradley-Terry objective to ensure that the reward for the winning response, \(r(x,y_{w})\), exceeds thereward for the losing response, \(r(x,y_{l})\), by at least \(\):

\[p(y_{w} y_{l} x)=(r(x,y_{w})-r(x,y_{l})-).\] (5)

The margin between two classes is known to influence the generalization capabilities of classifiers .3 In standard training settings with random model initialization, increasing the target margin typically improves generalization. In preference optimization, the two classes are the winning and losing responses for a single input. In practice, we observe that generation quality initially improves with an increasing target margin but degrades when the margin becomes too large (SS4.3). One of DPO's variants, IPO , also formulates a target reward margin similar to SimPO. However, its full objective is not as effective as SimPO (SS4.1).

Objective.Finally, we obtain the SimPO objective by plugging Eq. (4) into Eq. (5):

\[_{}(_{})=-_{(x,y_{w},y_{l}) }[(|}_{}(y_{w}| x)-|}_{}(y_{l}|x)-)].\] (6)

In summary, SimPO employs an implicit reward formulation that directly aligns with the generation metric, eliminating the need for a reference model. Additionally, it introduces a target reward margin \(\) to help separating the winning and losing responses. In Appendix F, we provide a gradient analysis of SimPO and DPO to further understand the differences between the two methods.

Preventing catastrophic forgetting without KL regularization.Although SimPO does not impose KL regularization, we find that a combination of practical factors ensures effective learning from preference data while maintaining generalization, leading to an empirically low KL divergence from the reference model. These factors are: (1) a small learning rate, (2) a preference dataset that covers diverse domains and tasks, and (3) the intrinsic robustness of LLMs to learn from new data without forgetting prior knowledge. We present KL divergence experiments in Section 4.4.

## 3 Experimental Setup

Models and training settings.We perform preference optimization with two families of models, Llama-3-SB  and Mistral-7B , under two setups: Base and Instruct. In this section, our goal is to understand the performance of SimPO vs. other preference optimization methods in different experimental setups. Our strongest model is based on Gemma-2-9B (Instruct setup) with a stronger reward model, RLHFlow/ArmoRM-Llama3-8B-v0.1  (Table 1). We will present and discuss these results in Appendix J.

For the **Base** setup, we follow the training pipeline of Zephyr . First, we train a base model (_i.e._, mistralai/Mistral-7B-v0.1, or meta-llama/Meta-Llama-3-8B) on the UltraChat-200k dataset  to obtain an SFT model. Then, we perform preference optimization on the UltraFeedback dataset  using the SFT model as the starting point. This setup provides _a high level of transparency_, as the SFT models are trained on open-source data.

For the **Instruct** setup, we use an off-the-shelf instruction-tuned model (_i.e._, meta-llama/Meta-Llama-3-8B-Instruct, or mistralai/Mistral-7B-Instruct-v0.2) as the SFT models.4 These models have undergone extensive instruction-tuning processes, making them more powerful and robust than the SFT models in the Base setup. However, they are also _more opaque_ because their RLHF procedure is not publicly disclosed. To mitigate the distribution shift between SFT models and the preference optimization process, we generate the preference dataset using the SFT models following . This makes our Instruct setup closer to an _on-policy_ setting. Specifically, we use prompts from the UltraFeedback dataset and regenerate the chosen and rejected response pairs \((y_{w},y_{l})\) with the SFT models. For each prompt \(x\), we generate 5 responses using the SFT model with a sampling temperature of 0.8. We then use llm-blender/PairRM  to score the 5 responses, selecting the highest-scoring one as \(y_{w}\) and the lowest-scoring one as \(y_{l}\). We only generated data in a single pass instead of iteratively as in .5

In summary, we have four setups: Llama-3-Base, Llama-3-Instruct, Mistral-Base, and Mistral-Instruct. We believe these configurations represent the state-of-the-art, placing our models among the top performers on various leaderboards. We encourage future research to adopt these settings for better and fairer comparisons of different algorithms. Additionally, we find that tuning hyperparameters is crucial for achieving optimal performance with all the offline preference optimization algorithms, including DPO and SimPO. Generally, for SimPO, setting \(\) between 2.0 and 2.5 and \(\) between 0.5 and 1.5 leads to good performance across all setups. For more details, please refer to Appendix B.

Evaluation benchmarks.We primarily assess our models using three of the most popular open-ended instruction-following benchmarks: MT-Bench , AlpacaEval 2 , and Arena-Hard v0.1 . These benchmarks evaluate the models' versatile conversational abilities across a diverse set of queries and have been widely adopted by the community (details in Table 2). AlpacaEval 2 consists of 805 questions from 5 datasets, and MT-Bench covers 8 categories with 80 questions. The most recently released Arena-Hard is an enhanced version of an MT-Bench, incorporating 500 well-defined technical problem-solving queries. We report scores following each benchmark's evaluation protocol. For AlpacaEval 2, we report both the raw win rate (WR) and the length-controlled win rate (LC) . The LC metric is specifically designed to be robust against model verbosity. For Arena-Hard, we report the win rate (WR) against the baseline model. For MT-Bench, we report the average MT-Bench score with GPT-4 and GPT-4-Preview-1106 as the judge model.6 For decoding details, please refer to Appendix B. We also evaluate on downstream tasks from the Huggingface Open Leaderboard benchmarks , with additional details in in Appendix C.

Baselines.We compare SimPO with other _offline_ preference optimization methods listed in Table 3.7 RRHF  and SLiC-HF  are ranking losses. RRHF uses length-normalized log-likelihood, similar to SimPO's reward function, while SLiC-HF uses log-likelihood directly and includes an SFT objective. IPO  is a theoretically grounded approach method that avoids DPO's assumption that pairwise preferences can be replaced with pointwise rewards. CPO  uses sequence likelihood as a reward and trains alongside an SFT objective. KTO  learns from non-paired preference data.

    & **\# Exs.** & **Baseline Model** & **Judge Model** & **Scoring Type** & **Metric** \\ 
**AlpacaEval 2** & 805 & GPT-4 Turbo & GPT-4 Turbo & Pairwise comparison & LC \& raw win rate \\
**Arena-Hard** & 500 & GPT-4-0314 & GPT-4 Turbo & Pairwise comparison & Win rate \\
**MT-Bench** & 80 & - & GPT-4/GPT-4 Turbo & Single-answer grading & Rating of 1-10 \\   

Table 2: Evaluation details for AlpacaEval 2 , Arena-Hard , and MT-Bench . The baseline model refers to the model compared against. GPT-4 Turbo corresponds to GPT-4-Preview-1106.

  
**Method** & **Objective** \\   RRHF  & \((0-(y_{w}|x)+(y_{l}|x) )-(y_{w}|x)\) \\  SLiC-HF  & \((0,-(y_{w}|x)+(y_{l}|x))-(y_{ w}|x)\) \\  DPO  & \(-(|x)}{(y_{w}|x)}-|x)}{(y_{l}|x)})\) \\  IPO  & \((|x)}{(y_{w}|x)}-|x)}{(y_{w}|x )}-)\) \\  CPO  & \(-((y_{w}|x)-(y_{w}|x))- (y_{w}|x)\) \\  KTO  & \(-_{w}(|x)}{(y_{w}|x)}- (y_{w}|x))\) \\   & where \(_{x}=(x,y_{w})((_{}(y|x)| (y_{w}|x)))\) \\  ORPO  & \(- p_{}(y_{w}|x)-(|x)}{(y_{ w}|x)}-|x)}{1-p_{}(y|x)})\) \\  & where \(p_{}(y|x)=((y|x))\) \\  R-DPO  & \(-(|x)}{(y_{w}|x)}-|x)}{(y_{w}|x)}+(|y_{w}|-|y|))\) \\  
**SimPO** & \(-(|x)}(y_{w}|x)-_{}(y|x)-)\) \\   

Table 3: Various preference optimization objectives given preference data \(=(x,y_{w},y_{l})\), where \(x\) is an input, and \(y_{w}\) and \(y_{l}\) are the winning and losing responses.

ORPO 8 introduces a reference-model-free odd ratio term to directly contrast winning and losing responses with the policy model and jointly trains with the SFT objective. R-DPO  is a modified version of DPO that includes an additional regularization term to prevent exploitation of length. We thoroughly tune the hyperparameters for each baseline and report the best performance. We find that _many variants of DPO do not empirically present an advantage over standard DPO_. Further details can be found in Appendix B.

## 4 Experimental Results

In this section, we present main results of our experiments, highlighting the superior performance of SimPO on various benchmarks and ablation studies (SS4.1). We provide an in-depth understanding of the following components: (1) length normalization (SS4.2), (2) the margin term \(\) (SS4.3), and (3) why SimPO outperforms DPO (SS4.4). Unless otherwise specified, the ablation studies are conducted using the Mistral-Base setting.

### Main Results and Ablations

**SimPO consistently and significantly outperforms existing preference optimization methods.** As shown in Table 4, while all preference optimization algorithms enhance performance over the SFT model, SimPO, despite its simplicity, achieves the best overall performance across all benchmarks and settings. These consistent and significant improvements highlight the robustness and effectiveness of SimPO. Notably, SimPO outperforms the best baseline by 3.6 to 4.8 points on the AlpacaEval 2 LC win rate across various settings. On Arena-Hard, SimPO consistently achieves superior performance,

    &  &  \\   & **AlpacaEval 2** & **Arena-Hard** & **MT-Bench** & **AlpacaEval 2** & **Arena-Hard** & **MT-Bench** \\   & **LC (\%)** & **WR (\%)** & **WR (\%)** & **GPT-4 Turbo** & **GPT-4** & **LC (\%)** & **WR (\%)** & **WR (\%)** & **GPT-4 Turbo** & **GPT-4** \\  SFT & 8.4 & 6.2 & 1.3 & 4.8 & 6.3 & 17.1 & 14.7 & 12.6 & 6.2 & 7.5 \\  RRHF  & 11.6 & 10.2 & 5.8 & 5.4 & 6.7 & 25.3 & 24.8 & 18.1 & 6.5 & 7.6 \\ SLiC-HF  & 10.9 & 8.9 & 7.3 & 5.8 & **7.4** & 24.1 & 24.6 & 18.9 & 6.5 & **7.8** \\ DPO  & 15.1 & 12.5 & 10.4 & 5.9 & 7.3 & 26.8 & 24.9 & 16.3 & 6.3 & 7.6 \\ IPO  & 11.8 & 9.4 & 7.5 & 5.5 & 7.2 & 20.3 & 20.3 & 16.2 & 6.4 & **7.8** \\ CPO  & 9.8 & 8.9 & 6.9 & 5.4 & 6.8 & 23.8 & 28.8 & **22.6** & 6.3 & 7.5 \\ KTO  & 13.1 & 9.1 & 5.6 & 5.4 & 7.0 & 24.5 & 23.6 & 17.9 & 6.4 & 7.7 \\ ORPO  & 14.7 & 12.2 & 7.0 & 5.8 & 7.3 & 24.5 & 24.9 & 20.8 & 6.4 & 7.7 \\ R-DPO  & 17.4 & 12.8 & 8.0 & 5.9 & **7.4** & 27.3 & 24.5 & 16.1 & 6.2 & 7.5 \\  SimPO & **21.5** & **20.8** & **16.6** & **6.0** & 7.3 & **32.1** & **34.8** & 21.0 & **6.6** & 7.6 \\   

Table 4: AlpacaEval 2 , Arena-Hard , and MT-Bench  results under the four settings. LC and WR denote length-controlled and raw win rate, respectively. We train SFT models for Base settings on the UltraChat dataset. For Instruct settings, we use off-the-shelf models as the SFT model.

though it is occasionally surpassed by CPO . We find that CPO generates responses that are, on average, 50% longer than those generated by SimPO (See Table 10). Arena-Hard might favor longer generations due to the absence of a length penalty in its evaluation.

Benchmark quality varies.Although all three benchmarks are widely adopted, we find that MT-Bench exhibits poor separability across different methods. Minor differences between methods on MT-Bench may be attributed to randomness, likely due to the limited scale of its evaluation data and its single-instance scoring protocol. This finding aligns with observations reported in . In contrast, AlpacaEval 2 and Arena-Hard provide more meaningful distinctions between different methods. We observe that the win rate on Arena-Hard is significantly lower than on AlpacaEval 2, indicating that Arena-Hard is a more challenging benchmark.9

The _Instruct_ setting introduces significant performance gains.Across all benchmarks, we observe that the _Instruct_ setting consistently outperforms the _Base_ setting. This improvement is likely due to the higher quality of SFT models used for initialization and the generation of more high-quality preference data by these models.

Both key designs in SimPO are crucial.In Table 5, we demonstrate results from ablating each key design of SimPO: (1) removing length normalization in Eq. (4) (_i.e._, w/o LN); (2) setting the target reward margin to be 0 in Eq. (6) (_i.e._, \(=0\)). Removing the length normalization has the most negative impact on the results. Our examination reveals that this leads to the generation of long and repetitive patterns, substantially degrading the overall quality of the output (See Appendix E). Setting \(\) to 0 yields also leads to a performance degradation compared to SimPO, indicating that it is not the optimal target reward margin. In the following subsections, we conduct in-depth analyses to better understand both design choices.

### Length Normalization (LN) Prevents Length Exploitation

LN leads to an increase in the reward difference for all preference pairs, regardless of their length.The Bradley-Terry objective in Eq. (5) essentially aims to optimize the reward difference

    &  &  \\   & **AlpacaEval 2** & **Arena-Hard** & **MT-Bench** & **AlpacaEval 2** & **Arena-Hard** & **MT-Bench** \\   & **LC (\%)** & **WR (\%)** & **WR (\%)** & **GPT-4 Turbo** & **GPT-4** & **LC (\%)** & **WR (\%)** & **WR (\%)** & **GPT-4 Turbo** & **GPT-4** \\  DPO & 15.1 & 12.5 & 10.4 & 5.9 & 7.3 & 26.8 & 24.9 & 16.3 & 6.3 & 7.6 \\  SimPO & 21.5 & 20.8 & 16.6 & 6.0 & 7.3 & 32.1 & 34.8 & 21.0 & 6.6 & 7.6 \\  w/o LN & 11.9 & 13.2 & 9.4 & 5.5 & 7.3 & 19.1 & 19.7 & 16.3 & 6.4 & 7.6 \\ \(=0\) & 16.8 & 14.3 & 11.7 & 5.6 & 6.9 & 30.9 & 34.2 & 20.5 & 6.6 & 7.7 \\   

Table 5: Ablation studies under Mistral-Base and Mistral-Instruct settings. We ablate each key design of SimPO: (1) removing length normalization in Eq. (4) (_i.e._, w/o LN); (2) setting target reward margin \(\) to 0 in Eq. (6) (_i.e._, \(=0\)).

Figure 2: Effect of length normalization (LN). (a) Relationship between reward margin and length difference between winning and losing responses. (b) Spearman correlation between average log probability and response length for SimPO. (c) Spearman correlation for SimPO without LN.

\( r=r(x,y_{w})-r(x,y_{l})\) to exceed the target margin \(\). We investigate the relationship between the learned reward differences and the length difference \( l=|y_{w}|-|y_{l}|\) between the winning and losing responses from the training set of UltraFeedback. We measure the difference of reward (\(r_{}\); Eq. (4)) using the SFT model, the SimPO model, and a model trained with SimPO but without length normalization. We present the results in Figure 2 and observe that SimPO with LN consistently achieves a positive reward margin for all response pairs, regardless of their length difference, and consistently improves the margin over the SFT model. In contrast, SimPO without LN results in a negative reward difference for preference pairs when the winning response is shorter than the losing response, indicating that the model learns poorly for these instances.

Removing LN results in a strong positive correlation between the reward and response length, leading to length exploitation.Figures 2 and 2 illustrate the average log likelihood (\(p_{}\) in Eq. (3)) versus response length on a held-out set for models trained with SimPO and SimPO without LN. The model trained without LN exhibits a much stronger positive Spearman correlation between likelihood and response length compared to SimPO, indicating a tendency to exploit length bias and generate longer sequences (see Appendix E). In contrast, SimPO results in a Spearman correlation coefficient similar to the SFT model (see Figure 6).

### The Impact of Target Reward Margin in SimPO

Influence of \(\) on reward accuracy and win rate.We investigate how the target reward margin \(\) in SimPO affects the reward accuracy on a held-out set and win rate on AlpacaEval 2, presenting the results in Figure 3. Reward accuracy is measured as the percentage of preference pairs where the winning response ends up having a higher reward for the winning response than the losing response (_i.e._, \(r(x,y_{w})>r(x,y_{l})\)). We observe that reward accuracy increases with \(\) on both benchmarks, indicating that enforcing a larger target reward margin effectively improves reward accuracy. However, the win rate on AlpacaEval 2 first increases and then decreases with \(\), suggesting that generation quality is not solely determined by the reward margin.

Impact of \(\) on the reward distribution.We visualize the distribution of the learned reward margin \(r(x,y_{w})-r(x,y_{l})\) and the reward of winning responses \(r(x,y_{w})\) under varying \(\) values in Figure 2 and Figure 2. Notably, increasing \(\) tends to flatten both distributions and reduce the average log likelihood of winning sequences. This initially improves performance but can eventually lead to model degeneration. We hypothesize that there is a trade-off between accurately approximating the true reward distribution and maintaining a well-calibrated likelihood when setting the \(\) value. Further exploration of this balance is deferred to future work.

### In-Depth Analysis of DPO vs. SimPO

In this section, we compare SimPO to DPO in terms of (1) likelihood-length correlation, (2) reward formulation, (3) reward accuracy, and (4) algorithm efficiency. We demonstrate that SimPO outperforms DPO in terms of reward accuracy and efficiency.

DPO reward implicitly facilitates length normalization.Although the DPO reward expression \(r(x,y)=(y|x)}{_{}(y|x)}\) (with the partition function excluded) lacks an explicit term for length normalization, the logarithmic ratio between the policy model and the reference model can serve to

Figure 3: Study of the margin \(\). (a) Reward accuracy and AlpacaEval2 LC win rate under different \(\) values. (b) Reward difference distribution under different \(\) values. (c) Log likelihood distribution on chosen responses under different \(\) values.

implicitly counteract length bias. As shown in Table 6 and Figure 3(a), employing DPO reduces the Spearman correlation coefficient between average log likelihood and response length compared to the approach without any length normalization (referred to as "SimPO w/o LN"). However, it still exhibits a stronger positive correlation when compared to SimPO.10

DPO reward mismatches generation likelihood.There is a divergence between DPO's reward formulation, \(r_{}(x,y)=(y|x)}{_{w}(y|x)}\), and the average log likelihood metric, \(p_{}(y x)=_{}(y x)\), which directly impacts generation. As shown in Figure 3(b), among the instances on the UltraFeedback training set where \(r_{}(x,y_{w})>r_{}(x,y_{l})\), almost half of the pairs have \(p_{}(y_{w} x)<p_{}(y_{l} x)\). In contrast, SimPO directly employs the average log likelihood (scaled by \(\)) as the reward expression, thereby eliminating the discrepancy completely, as demonstrated in Figure 5(b).

DPO lags behind SimPO in terms of reward accuracy.In Figure 3(c), we compare the reward accuracy of SimPO and DPO, assessing how well their final learned rewards align with preference labels on a held-out set. SimPO consistently achieves higher reward accuracy than DPO, suggesting that our reward design facilitates better generalization and leads to higher quality generations.

KL divergence of SimPO and DPO.In Figure 4(a), we present the KL divergence between the policy model trained with DPO and SimPO and the reference model with different \(\), measured on the winning responses from a held-out set during training. Figure 4(b) shows the corresponding AlpacaEval 2 LC win rate. Although SimPO does not apply any form of regularization against the reference model, the KL divergence of SimPO is reasonably small. Increasing \(\) reduces the KL divergence for both DPO and SimPO, with DPO exhibiting a more pronounced reduction at higher \(\) values. In this particular setting (Mistral-base), Figure 4(b) demonstrates that a smaller \(\) can

    & DPO & SimPO \\  \(\) & 0.82 & 0.59 & 0.34 \\   

Table 6: Spearman correlation \(\) between average log likelihood of different models and response length on a held-out set.

Figure 4: Comparison between SimPO and DPO, measured on UltraFeedback. (a) Spearman correlation between average log probability and response length for DPO. (b) Contingency table of rankings based on DPO rewards and the average log likelihood (measured on the training set). (c) Reward accuracy of DPO and SimPO.

Figure 5: Comparison between SimPO and DPO (continued). (a) With different \(\) in DPO and SimPO, KL divergence from the policy model to the reference model on \(y_{w}\). (b) AlpacaEval2 LC win rate of DPO and SimPO with different \(\). (c) Runtime and memory usage for DPO and SimPO.

improve AlpacaEval 2 performance, despite the higher KL divergence.11 We hypothesize that when the reference model is weak, strictly constraining the policy model to the reference model may not be beneficial. As a caveat, while we did not observe any training collapse or degeneration with proper tuning, in principle, SimPO could potentially lead to reward hacking without explicit regularization against the reference model. In such a scenario, the model might achieve a low loss but degenerate.

SimPO is more memory and compute-efficient than DPO.Another benefit of SimPO is its efficiency as it does not use a reference model. Figure 5c illustrates the overall run time and per-GPU peak memory usage of SimPO and DPO in the Llama-3-Base setting using 8xH100 GPUs. Compared to a vanilla DPO implementation,12 SimPO cuts run time by roughly 20% and reduces GPU memory usage by about 10%, thanks to eliminating forward passes with the reference model.

## 5 Related Work

Reinforcement learning from human feedback.RLHF is a technique that aligns large language models with human preferences and values [18; 97; 58; 7]. The classical RLHF pipeline typically comprises three phases: supervised fine-tuning [96; 71; 32; 21; 44; 25; 77; 15; 81], reward model training [31; 56; 16; 52; 35; 46], and policy optimization [65; 4]. Proximal Policy Optimization (PPO)  is a widely used algorithm in the third stage of RLHF. The RLHF framework is also widely applied to various applications, such as mitigating toxicity [3; 45; 92], ensuring safety , enhancing helpfulness [73; 78], searching and navigating the web , and improving model reasoning abilities . Recently,  has highlighted challenges across the whole RLHF pipeline from preference data collection to model training. Further research has also demonstrated that RLHF can lead to biased outcomes, such as verbose outputs from the model [28; 66; 80].

Offline vs. iterative preference optimization.Given that online preference optimization algorithms are complex and difficult to optimize [95; 64], researchers have been exploring more efficient and simpler alternative offline algorithms. Direct Preference Optimization (DPO)  is a notable example. However, the absence of an explicit reward model in DPO limits its ability to sample preference pairs from the optimal policy. To address this, researchers have explored augmenting preference data using a trained SFT policy  or a refined SFT policy with rejection sampling , enabling the policy to learn from data generated by the optimal policy. Further studies have extended this approach to an iterative training setup, by continuously updating the reference model with the most recent policy model or generating new preference pairs at each iteration [27; 42; 62; 82; 87]. In this work, we focus exclusively on offline settings, avoiding any iterative training processes.

Preference optimization objectives.A variety of preference optimization objectives have been proposed besides DPO. Ranking objectives allow for comparisons among more than two instances [26; 54; 67; 86]. Another line of work explores simpler preference optimization objectives that do not rely on a reference model [38; 84], similar to SimPO.  proposes a method to jointly optimize instructions and responses, finding it effectively improves DPO.  focuses on post-training extrapolation between the SFT and the aligned model to further enhance model performance. In this work, we compare SimPO to a series of offline algorithms, including RRHF , SLiC-HF , DPO , IPO , CPO , KTO , ORPO , and R-DPO , and find that SimPO can outperform them in both efficiency and performance. Recently,  proposed a generalized preference optimization framework unifying different offline algorithms, and SimPO can be seen as a special case.

## 6 Conclusion

In this work, we propose SimPO, a simple and effective preference optimization algorithm that consistently outperforms existing approaches across various training setups. By aligning the reward function with the generation likelihood and introducing a target reward margin, SimPO eliminates the need for a reference model and achieves strong performance without exploiting the length bias. Extensive analysis demonstrates that the key designs in SimPO are crucial and validates the efficiency and effectiveness of SimPO. A detailed discussion of the limitations can be found in Appendix A.