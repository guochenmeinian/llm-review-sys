# Experimental Result Reproducibility

Can Custom Models Learn In-Context? An Exploration of Hybrid Architecture Performance on In-Context Learning Tasks

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

In-Context Learning (ICL) is a phenomenon where task learning occurs through a prompt sequence without the necessity of parameter updates. ICL in Multi-Headed Attention (MHA) with absolute positional embedding has been the focus of more study than other sequence model varieties. We examine implications of architectural differences between GPT-2 and LLaMa as well as Llama and Mamba. We extend work done by Garg et al. (2022) and Park et al. (2024) to GPT-2/LLaMa hybrid and LLaMa/Mamba hybrid models - examining the interplay between sequence transformation blocks and regressive performance in-context. We note that certain architectural changes cause degraded training efficiency/ICL accuracy by converging to suboptimal predictors or converging slower. We also find certain hybrids showing optimistic performance improvements, informing potential future ICL-focused architecture modifications. Additionally, we propose the "ICL regression score", a scalar metric describing a model's whole performance on a specific task. Compute limitations impose restrictions on our architecture-space, training duration, number of training runs, function class complexity, and benchmark complexity. To foster reproducible and extensible research, we provide a typed, modular, and extensible Python package on which we run all experiments. This code is available at https://github.com/anonymous64/neurips2024-submission21757.

## 1 Introduction

Popularized by Large Language Models such as GPT-2  and GPT-3 , In-Context Learning (ICL) is the ability for highly expressive generative sequence models to predict phenomena by processing demonstrations without performing traditional gradient steps. Such phenomena vary from effective control systems  to answering questions in natural language [4; 5]. A large body of recent work has studied this phenomenon in transformer models [6; 7; 2; 1; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25], which derive in structure from Vaswani et al. .

Some recent examples of this research on ICL include Garg et al , which studies ICL by providing a variety of function classes for models to learn, additionally benchmarking robustness by testing performance on out-of-distribution data. Guo et al shows the validity of composing simple function classes to produce complex ones, while Liu et al  produced a metric for model information recall. These works give us a set of metrics with which we can use to compare model performance on ICL.

ICL was initially primarily studied in attention-based models but has recently been explored in other sequence models, creating discussion on its differences across those models and why these occur architecturally. In our paper, we study this by substituting key modern transformer (Llama) components with Mamba blocks and GPT-2 components and richly benchmarking.

Since ICL for complete natural language understanding often requires training models with over a billion parameters, the effects of architectural changes on fine-grained ICL abilities are often left unexplored. As a consequence, although language models have progressed quickly and entertained radically new architectures, there is limited extensible research that explores the effects of fine-grained architecture choices on ICL ability [8; 14]. Garg et al. established using simple function classes to evaluate ICL ability and examined solely GPT-2 as a sequence model. Lee et al.  expanded this analysis on a slightly different set of function classes for a variety of base models. Park et al.  evaluated ICL performance of 2 hybrid architectures between Mamba and GPT-2. Using unmodified Llama/Mamba/GPT-2 as a control, we analyze GPT2-Llama and Llama-Mamba hybrid architectures derived from replacing portions of GPT2 components with analogous Llama sections and LLama with Mamba blocks, respectively, in 12 total architectures (3 unmodified + 9 hybrid).

We observe that the code written to analyze ICL with simple function classes - although almost unanimously extensions of Garg et al.'s - often requires substantial, structural changes to the parent codebase1, greatly heightening the barrier to extending each project in turn. Inspired by Donoho's ideal of Frictionless Reproducibility , we provide a set of simple abstractions and interfaces to facilitate extensions and modifications to our code while promoting interoperability between forks.

## 2 Related Work

There are many ways to capture qualitative aspects of ICL with quantitative measures. Weber et al.  compare the agreement between generations of a language model under varying prompts of equal meaning to test robustness to variations. Olsson et al.  compute a heuristic "ICL score" to measure an accuracy increase in predictions of a model given more context. We adapt this metric to fit our experimental setup more aptly, regularizing along both the number of in-context examples and against a baseline predictor.

In general, evaluating ICL ability has been approached from two primary avenues: both when the only solution at train time is to meta-learn an algorithm [6; 8; 28; 11; 19] and when optimal loss at train time can also be satisfied by memorization or otherwise leveraging previously trained-on data [10; 23]. In this work, we take the former approach through learning a regression algorithm to randomized simple function classes [6; 11; 15].

Further still, non-transformer architectures are capable of ICL . Lee et al.  observed ICL in numerous sequence model architectures (e.g. RNNs, Mamba, S4, CNNs, GPT-2, and Llama) and found qualitative differences in each architecture's performance. Chan et al.  found that Transformers depend on "burstiness" and long-tail distributions of natural data to outperform RNNs and LSTMs in ICL tasks. Park et al.  uses simple function classes similar to Garg et al.  in evaluating the ICL ability of Mamba, S4, S4-Mamba, and GPT-2. They find an overlapping but inequivalent set of function classes for which each model succeeds and construct a hybrid architecture

  Task & dim \((d)\) & points \((N)\) & \(x\) distribution & \(y\) calculation / parameter distribution & Task-specific \\   Linear Regression & 20 & 41 & \((0,I_{d})\) & \(w(0,I_{d})\) & \(-\) \\ Sparse Linear & 20 & 41 & \((0,I_{d})\) & \(w(0,I_{d})\), \((w) k\) & \(k=3\) \\
2-Layer MLP & 20 & 101 & \((0,I_{d})\) & \(W^{(1)}_{ij},W^{(2)}_{ij}(0,1)\) & \(=100\) \\ Decision Tree & 20 & 101 & \((0,I_{d})\) & \((0,1),\{1,...,d\}\) & \(=4\) \\ Sparse Parity & 10 & 140 & \(\{-1,1\}^{d}\) & \(y=_{j J}x^{j}[j]\) & \(k=2\) \\ Vector MQAR & 20 & 128 & \((^{d-1})\) & \(y(^{d-1})\) & \(-\) \\  

Table 1: Summary of tasks. Each regression target \(f_{}(x_{i})\) is either parametrized by a randomly sampled \(\) or directly computed/sampled as detailed above.

to achieve the union of these abilities. We further this work by closely examining the contributions of individual architectural changes for GPT-2 and Llama-style transformers towards ICL ability.

## 3 Methods

As established by Garg et al. and extended by recent work, our ICL tasks take the following form [6; 8; 14]:

\[,f_{}(x_{0}),x_{1},f_{}(x_{1}),...,}^{}}_{\,P},(x_{N})}_{}\]

where \(P\) is a series of input-output pairs followed by a lone query. The model predicts a completion based on the prompt it received. The function parameters \(\) and the inputs \(x_{i}\) are randomly sampled from a function class domain and an input domain, respectively. The tasks we regress to are summarized in Table 1 and detailed in Section 3.1

We train models for ICL by minimizing the expected loss over a distribution of prompts and corresponding function outputs. This approach allows us to observe qualitative differences in model architectures by their ability to behave similarly to optimal or baseline estimators. To further simplify ICL aptitude evaluation, we introduce a proxy value summarizing a given model's ICL ability for a specific task. This metric averages the error of a model normalized by the baseline error at each context length. We detail this further in Section 3.3.

### Training

To determine task-specific ICL ability, our sequence models regress onto the functions shown above . We replicate the function classes Linear Regression, Sparse Linear Regression, 2-Layer MLP Regression, and Decision Tree Regression from Garg et al.  as they present a wide range of "difficulty" for sequence models. In addition, to capture the existence of some ICL ability, we also regress onto the two function classes examined in Park et al. : parity function with induced sparsity (Sparse Parity) and parallel associative recall (Vector MQAR).

Unless otherwise specified, we train all models with 12 layers, 8 attention heads, an expansion factor of 4 (in the case of models with Mamba Mixer layers), and linear layers to transform the input sequences into and from the embedding dimension of 256. We use the ADAM optimizer with a learning rate of \(0.0001\) for 500k steps. Our expansion factor was selected to ensure similar parameter counts across baselines and all other hyperparameters were chosen for consistency with Garg et al. . Note for the four function classes from Garg et al., the same curriculum was used during training. No curriculum is used for the two new function classes from Park et al. . For our compute2, we utilized 898.90 hours on an A10, 55.74 hours on an RTX 3090, 151.90 hours on an RTX 4090, 75.48 hours on an RTX 4070 Ti, and 9.83 hours on an RTX 6000.

**Linear Regression and Sparse Linear Regression** Each function in these tasks is parametrized as a single weight vector (\(w\)) of dimension equal to that of the \(x\)-values (i.e. 20) so that \(y=w^{T}x\). We sample the coordinate values from a normal distribution and (in the Sparse Linear case) zero out all values except a uniformly at random selected \(k\) coordinates. In essence, one can consider Linear Regression to be the degenerate case where the \(k=20\). We preserve these tasks from Garg et al.  to verify that none of our hybrid modifications lose the near-optimal performance that was already found with GPT-2.

**2-Layer MLP Regression** We fill two weight matrices \(W^{(1)}^{100 20}\) and \(W^{(2)}^{1 100}\) with scalar samples from a normal distribution. \(y\) values are computed as the result of a forward pass through a 2-layer multi layer perceptron with a ReLU activation. That is: \(y=W^{(2)}(W^{(1)}x)\). This is a more complex function class that Garg et al.  found that GPT-2 can perform very well at, suggesting that this task can capture some ICL ability of an architecture.

Decision Tree RegressionWe construct full decision trees of depth 4 with leaf values sampled from a normal distribution and branching conditions to be selected uniformly at random over the coordinates of the input dimension. The left branch is taken if the selected input coordinate is less than 0 and the right branch is taken otherwise. Garg et al.  found that GPT-2 was able to achieve much lower error for lower context lengths than XGBoost or Greedy Tree Learning, suggesting that this task can capture some ICL ability of an architecture.

Sparse ParityWe select \(k=2\) values to consider and compute their parity, expressed as either \(-1\) or \(1\). That is, we uniformly sample without replacement \(\{1,...,10\}^{k}\) and compute \(y=_{i}x[i]\). Along with a higher learning rate of \(0.0004\), this is identical to the scheme implemented in Park et al. . They  found that GPT-2 style transformers do not perform well on this task, suggesting that this is a discerning proxy for measuring ICL ability. Finally, as convergence was quick for this task, we only trained models up to 200k steps.

Vector MQARWe sample \(2N\) points from the \(d\)-sphere of radius \(\) and group them randomly into pairs to forming \(N\) key-value pairs. For consistency with the experiments of Park et al.  and to reliably allow for the formation of transformer circuits highly relevant to this task [22; 14], we reduce model complexity by using an embedding dimension of 128, 2 layers, and a higher learning rate of \(0.0002\). Park et al.  found that Mamba, our representative of SSM-type models, performed poorly, suggesting that this task can serve to ensure we don't lose capabilities provided by transformers.

### Architectures

As detailed by Radford et al. , GPT-2 is almost identical to the original decoder-only transformer, with absolute positional embedding, pre-norm layer normalization, and a GELU activation function in the feed-forward network (FFN) (which is otherwise a multi-layer perceptron). In contrast, Llama [29; 30] combines a number of modern transformer modifications, including swapping layer norm with RMS norm , changing the architecture and activation function of the FFN, and using rotary

Figure 1: Visual aid for our explored hybrid models in tabular and graphical format.

positional embeddings instead of absolute positional embeddings . We acknowledge that the larger variations of Llama2  and both variations of Llama3  used Grouped-Query Attention (GQA), however we surmise that at our model scales of \(\)10 million parameters, GQA will not significantly affect the performance of our models. From an entirely different method of sequence modeling, Mamba forgoes positional embedding entirely, combining features of the Gated Linear Unit and state space expansion to remove the need for distinct attention and feed-forward blocks. We summarize these architectural differences in Table 2. We examine all combinations of these different components, training 12 total architectures (listed in Figure 0(a)) on our 6 tasks for a total of 72 model-task pairs. Figure 0(b) illustrates how each of these variations compose into a model. We provide individual diagrams of each architecture in Appendix A.

### Evaluation

In addition to the baseline metric (squared error as a function of context length) from Garg et. al. , we've established another metric: ICL regression score. This is a scalar expressing overall performance of a model on a task. Abstractly, the metric aims to capture the proportion of the baseline error saved by a model. The regression score is calculated by (1) computing the difference in error achieved by the model and the zero estimator at each context length, (2) computing the average of this value over the length of the sequence, (3) computing the same value for the baseline estimator, and (4) taking the ratio of these.

In summary, ICL regression score can be calculated as follows:

\[S_{}=(_{}^{(i)}-_{0}^{(i)} )}{_{i}(_{}^{(i)}-_{0}^{(i)})}\] (1)

where \(_{}^{(i)}\) is the squared error of the model of interest at context length \(i\). Sim. \(_{}^{(i)}\) for baseline and \(_{0}^{(i)}\) for the zero estimator

Summation over context length allows our ICL regression score to be used for the comparison of tasks with significantly differing context lengths. An interpretation for each of different possible values of our ICL regression score is given in 1(a). This approach builds off of Olsson et al.'s "ICL Score"  by generalizing their selection of 500 and 50 in-context examples and reducing along the context length, allowing for tasks with widely different context lengths to be directly compared. We list our baselines in Table 1(b).

We replicate the baseline predictors for linear regression, sparse linear regression, and MLP regression from Garg et al.  due to the lack of a higher-performing baseline. However, we opted to use a pretrained GPT-2 model with identical structure to that used in Garg et al. to serve as a more calibrated baseline than Greedy Tree Learning or XGBoost. They showed superior decision tree ICL performance for a trained GPT-2 transformer compared to Greedy Tree Learning or XGBoost. For consistency with Park et al.  and due to the algorithmic hardness of Sparse Parity, we used our Mamba model trained on this task. Park et al. showed that Mamba can effectively learn this task, so we repeat our strategy as in Decision Tree Regression with our Mamba model (instead of GPT-2) as a baseline.

### Reproducibility Statement

For ease of experimentation and reproducibility, we have built a typed, extensible, and modular Python codebase. We achieved this by identifying isolated processes in the training regime and

    & GPT-2 & Llama & Mamba \\   Positional Embedding & Absolute & RoPE & None \\  Feed Forward Network & \(2\) layer MLP & Convolutional MLP & None \\  Attention Mechanism & Multi-Query Multi-Head & Multi-Query Multi-Head & Mamba Mixer \\  Normalization & Layer Norm & RMS Norm & RMS Norm \\   

Table 2: A summary of the primary architectural differences between GPT-2, Llama, and Mamba. We examine all variations between GPT-2 and Llama and all variations between Llama and Mamba.

structuring our code to reflect them. In particular, the specification of (1) a function class, (2) a model type, (3) an evaluation scheme, and (4) a stage of training under a curriculum are all inherent to the experiment archetype as proposed by Garg et al.  and repeated by others [8; 15; 14]. We integrate standard reporting software Weights and Biases  and leverage fast implementations of attention  and 1-D convolutions . We also implement a configuration-based system for training, loading, and evaluating models to facilitate frictionless repeatability of all experiments.

## 4 Results

We confirm the results from Garg et al.  and Park et al.  that GPT-2 and Mamba can learn our first four regression tasks in context. Park et al.  that Mamba struggles to perform Vector MQAR while transformers and hybrid architectures excel. We note that Llama and GPT-2 have very comparable performance in Sparse Parity and Vector MQAR. We plot all qualitatively non-optimal squared error profiles in Figure 3 and all squared error profiles in Appendix B.

**Models can converge to suboptimal regression schemes.** We find that some model-task pairs produce suboptimal predictions, not as a result of insufficient training. A clear example is GPT-2 RMS SwiGLU (model 1.4) on Sparse Linear. This model appears to not achieve optimal error - achieving an ICL Regression Score of only \(0.754\), opposed to \( 0.93\) by other models - and yet its performance does not significantly improve with more gradient steps. We plot the squared error achieved by various checkpoints for model 1.4 in Figure 3(a). We observe that this error profile appears similar to that of models trained on the Linear task and so also examine the prediction quality of the

Figure 3: Squared error profiles that do not exhibit near-optimal behavior. Shaded regions are 99% confidence intervals.

Figure 2: Predictors and conditions for computation and interpretation of ICL regression score.

same model (GPT-2 RMS SwiGLU trained on Sparse Linear) on Linear in Figure 3(b). We find that it indeed mimics the error profile of least squares. This result builds on Akyurek et al.'s findings  in what functions transformer models develop representations of. Akyurek et al. analyzed algorithms representable by GPT-2 like architectures. We note that they did not examine other layer types such as Mamba Mixer or SwiGLU.

**Models can escape suboptimal regression schemes.** We see that GPT-2 SwiGLU (model 1.3) Sparse Linear on adopts a suboptimal regression scheme (least squares) partway in training, eventually unlearning its scheme in favor of the optimal regression scheme (lasso). We plot the squared error on Sparse Linear achieved by various checkpoints for Model 1.3 in Figure 4(a), noting that the error of the checkpoint at 100k steps closely matches the error of least squares. Further, we examine the squared errors on Linear Regression for the various checkpoints for Model 1.3 in 4(b) and see that the checkpoint at 100k most closely matches least squares. This suggests that model 1.3 learned the linear regression scheme in the beginning of training, but was eventually able to learn to utilize the sparse nature of its training data.

**Models can fail to converge within our training horizon.** We find that a number of models performed strikingly poorly in their trained task. In particular, GPT-2 with Layer norm replaced by RMS norm (model 1.1) performed very poorly on Sparse Linear Regression and Decision Tree, as indicated by the lowest ICL Regression Score achieved in those tasks (\(0.535\) and \(0.114\), respectively) and in Figures 2(a) and 2(b). We also observe that GPT-2 with RMS and SwiGLU (model 1.4) also did not converge to a regression scheme, despite apparently modelling a different regression scheme entirely. Similarly, Mamba (model 3) did not converge to a training scheme on Decision Tree as illustrated in Figure 5(a). We believe this suggests a lower training efficiency for certain architectures on these tasks.

**Models can fail to learn the task entirely.** In the case of Decision Tree, GPT-2 with RMS (model 1.1) failed to learn the task entirely as not only indicated by its final ICL Regression Score but also its consistency in achieving very high error throughout training. We plot squared error for various checkpoints in Figure 5(b).

**ICL Regression Scores reflect qualitative information contained in squared-error plots.** Computed ICL Regression Scores are summarized in Table 3. Overall, most models are able to perform comparably to our baseline estimators, with nearly all examined models achieving a regression score of approximately 1 on all four function classes from Garg et al. (Linear Regression, Sparse Linear Regression, 2-Layer MLP, Decision Tree). The ICL Regression Scores for Linear

Figure 4: Detailing plots to showcase GPT-2 RMS SwiGLU (model 1.4) learning a more general but sub-optimal regression scheme when trained on Sparse Linear. Shaded regions are 99% confidence intervals.

Regression and 2-Layer MLP, along with their corresponding graphs of squared error as a function of context length, corroborate the claims from Garg et al.  that transformers can "learn" these tasks. Further, the ICL Regression Scores for Sparse Parity are consistent with Park et al. , with all hybrids between GPT-2, and Llama failing to "learn" the task and all hybrids between Llama and Mamba succeeding in "learning" the task. Indeed, the ICL Regression Score achieved by Mamba captures the qualitatively sub-optimal performance detailed above on Decision Tree.

## 5 Discussion

**Even simple function classes leave room for local minima.** We find that despite distilling down the phenomenon of In Context Learning to regression against simple function classes, there still exists room for models to adopt various regression schemes. This is supported by the apparent convergence

Figure 5: Detailing plots to showcase GPT-2 SwiGLU (model 1.3) starting by learning a more general but sub-optimal regression scheme but eventually converging to the optimal regression scheme when trained on Sparse Linear. Shaded regions are 99% confidence intervals.

Figure 6: Squared error as a function of context length computed for various checkpoints for both Mamba (model 3) and GPT-2 RMS (model 1.1) on Decision Tree. Shaded regions are 99% confidence intervals.

of the error profiles of GPT-2 RMS (model 1.1) and GPT-2 RMS SwiGLU (model 1.4) to least squares regression for shorter context lengths.

**Hybrid architectures and function classes have varying levels of compatibility.** Specific hybrid architectures can hesitate to learn/converge for certain function classes. This behavior is especially apparent in GPT-2 RMS's (model 1.1) Decision Tree error graph and GPT-2 RMS SwiGLU's (model 1.4) Sparse Linear performance. It seems that GPT-2 RMS SwiGLU shows greater affinity towards learning least squares instead of LASSO. Certain hybrid architecture variations may place inductive biases on certain solution forms, resulting in extreme convergence times when these solution forms greatly vary from the optimal predictor's form.

**Extensible Research as Reproducible Research.** In the development of this work, continuously iterating to minimize the friction of reproduction has enabled rapid extension of our Python artifacts to support even abstractly defined _hybrid architectures_, which are often considered inextricable from highly bespoke code or dedicated packages such as xFormers . We implore the reader to seriously consider the value of making their research extensible with a minimum of friction. We hope that our attempts to maximize extensibility and reproducibility contribute to the longevity of this work as a reliable, tested, and simple framework to use for studying simple function classes in context.

### Limitations and Future Work

**We have only one training run performed on each model-task pair.** As a result, we have no estimation for how consistently observed phenomena appear with the given architectures. **We only train each model for a maximum of 500K steps.** Thus, when a model fails to converge within this window, we lose information on insightful trends that could possibly occur with further training.

**We do not empirically evaluate the effectiveness of ICL Regression Score or the usability of our provided code platform.** We compute no verifying metrics to establish how well ICL Regression Score generalizes or is robust to qualitatively distinct ICL regression tasks. Similarly, we perform no user study on the effectiveness of our code platform, presenting only our own experience.

**Future Work** In this paper we analyze ICL performance for GPT-2-Llama and Llama-Mamba hybrid architectures (9 total) on 6 tasks. Future relevant research could entail 1) expanding our architecture-space and streamlining our training-to-evaluation pipeline by creating an architecture search mechanism, 2) assessing our models on other sets of tasks, such as ones relating to language modeling or image classification, 3) verifying our results with additional training runs, 4) benchmarking model performance along hardware-related metrics.

  \\  
**(1)** & **GPT-2** & 0.996 & 0.932 & 1.130 & 1.000 & 0.023 \\  (1.1) & GPT-2 RMS & 0.997 & 0.535 & 1.130 & 0.114 & – \\  (1.2) & **GPT-2 RoPE** & 0.995 & 0.927 & 1.130 & 1.004 & – \\  (1.3) & GPT-2 SwiGLU & 0.997 & 0.913 & 1.128 & 0.994 & – \\  (1.4) & **GPT-2 RMS SwiGLU** & 0.997 & 0.754 & 1.129 & 0.971 & – \\  (1.5) & GPT-2 RMS RoPE & 0.996 & 0.927 & 1.128 & 1.005 & – \\  (1.6) & **GPT-2 RoPE SwiGLU** & **0.996** & 0.929 & 1.129 & 1.011 & – \\  (2) & Llama & **0.997** & 0.933 & 1.129 & 1.007 & 0.023 \\  (2.1) & Llama RePE-less & 0.996 & 0.928 & 1.130 & 1.018 & 1.000 \\  (2.2) & Llama SwiGLU-less & 0.996 & 0.927 & 1.129 & 0.980 & 1.000 \\  (2.3) & Llama RoPE SwiGLU-less & **0.996** & **0.938** & **1.130** & 1.012 & 1.000 \\  (3) & Mamba & 0.995 & 0.925 & 1.123 & 0.832 & 1.000 \\  

Table 3: **ICL Regression Scores for each architecture on each task, averaged over many sampled functions, with 95% confidence intervals in the headers for each row. Best-in-task values are in boldface except when not statistically significant from another architecture. GPT-2/Llama hybrids were not evaluated on Sparse Parity due to compute constraints and lack of supporting evidence that they should succeed. *These models were used as the baseline for this task.**