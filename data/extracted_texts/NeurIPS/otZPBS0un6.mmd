# FreqBlender: Enhancing DeepFake Detection by Blending Frequency Knowledge

Hanzhe Li\({}^{1,}\)1 Jiaran Zhou\({}^{1,}\)1 Yuezun Li\({}^{1,}\)2 Baoyuan Wu\({}^{2}\) Bin Li\({}^{3}\) Junyu Dong\({}^{1}\)

\({}^{1}\) School of Computer Science and Technology, Ocean University of China

\({}^{2}\) School of Data Science, The Chinese University of Hong Kong, Shenzhen, China

\({}^{3}\) Guangdong Provincial Key Laboratory of Intelligent Information Processing,

Shenzhen University, Shenzhen, China

Equal contributionCorresponds to Yuezun Li (liyuezun@ouc.edu.cn)

###### Abstract

Generating synthetic fake faces, known as pseudo-fake faces, is an effective way to improve the generalization of DeepFake detection. Existing methods typically generate these faces by blending real or fake faces in spatial domain. While these methods have shown promise, they overlook the simulation of frequency distribution in pseudo-fake faces, limiting the learning of generic forgery traces in-depth. To address this, this paper introduces _FreqBlender_, a new method that can generate pseudo-fake faces by blending frequency knowledge. Concretely, we investigate the major frequency components and propose a Frequency Parsing Network to adaptively partition frequency components related to forgery traces. Then we blend this frequency knowledge from fake faces into real faces to generate pseudo-fake faces. Since there is no ground truth for frequency components, we describe a dedicated training strategy by leveraging the inner correlations among different frequency knowledge to instruct the learning process. Experimental results demonstrate the effectiveness of our method in enhancing DeepFake detection, making it a potential plug-and-play strategy for other methods.

## 1 Introduction

DeepFake refers to face forgery techniques that can manipulate facial attributes, such as identity, expression, and lip movement . The recent advancement of deep generative models [2; 3] has

Figure 1: Overview of our method. In contrast to the existing spatial-blending methods (right part), our method explores face blending in frequency domain (left part). By leveraging the frequency knowledge, our method can generate pseudo-fake faces that closely resemble the distribution of wild fake faces. Our method can complement and work in conjunction with existing spatial-blending methods.

greatly sped up the evolution of DeepFake techniques, enabling the creation of highly realistic and visually imperceptible manipulations. However, the misuse of these techniques can pose serious security concerns , making DeepFake detection more pressing than ever before.

There have been many methods proposed for detecting DeepFakes, showing their effectiveness on public datasets . However, with the continuous growth of AI techniques, new types of forgeries constantly emerge, posing a challenge for current detectors to accurately expose unknown forgeries. To address this challenge, recent efforts  have focused on improving the generalizability of detection, _i.e._, the ability to detect unknown forgeries based on known examples. One effective approach to address this problem is to enhance the training data by generating synthetic fake faces, known as _pseudo-fakes_. The intuition behind this approach is that the DeepFake generation process introduces artifacts in the step of blending faces, and these methods generate pseudo-fake faces by simulating various blending artifacts. By training on these pseudo-fake faces, the models can be driven to learn corresponding artifacts. However, existing methods concentrate on simulating the _spatial_ aspects of face blending (see Fig. 1 (right)). While they can make the pseudo-fake faces resemble the distribution of wild fake faces in the spatial domain, they do not explore the distribution in the _frequency_ domain. Thus, current pseudo-fake faces lack frequency-based forgery clues, limiting the models to learn generic forgery features.

In this paper, we shift our attention from the spatial domain to the frequency domain and propose a new method called _FreqBlender_ to generate pseudo-fake faces by blending frequency knowledge (see Fig. 1 (left)). To achieve this, we analyze the composition of the frequency domain and accurately identify the range of forgery clues falling into. Then we replace this range of real faces with the corresponding range of fake faces to generate pseudo-fake faces. However, identifying the frequency range of forgery clues is challenging due to two main reasons: 1) this range varies across different fake faces due to its high dependence on face content, and 2) forgery clues may not be concentrated on a single frequency range but could be an aggregation of various portions across multiple ranges. Thus, general low-pass, high-pass, or band-pass filters are incapable of precisely pinpointing the distribution.

To address this challenge, we propose a Frequency Parsing Network (FPNet) that can adaptively partition the frequency domain based on the input faces. Specifically, we hypothesize that the faces are composed of three frequency knowledge, which represents _semantic information_, _structural information, and noise information_, respectively, and the forgery traces are likely hidden in structural information. This hypothesis is validated in our preliminary analysis (refer to Sec. 3 for details). Based on this footstone, we design the network consisting of a shared encoder and three decoders to extract corresponding frequency knowledge. The encoder transforms the input data into a latent frequency representation, while the decoders estimate the probability map of the corresponding frequency knowledge.

Training this network is non-trivial since no ground truth of frequency distribution is provided. Therefore, we propose a novel training strategy that leverages the inner correlations among different frequency knowledge. To be specific, we describe dedicated-crafted objectives that are performed on various blending combinations of the output from each decoder and emphasize the properties of each frequency knowledge. The experimental results demonstrate that the network successfully parses the desired frequency knowledge within the proposed training strategy.

Once the network is trained, we can parse the frequency component corresponding to the structural information of a fake face, and blend it with a real face to generate a pseudo-fake face. It is important to note that our method is not in conflict with existing spatial blending methods, but rather complements them by addressing the defect in the frequency domain. Our method is validated on multiple recent DeepFake datasets (_e.g._, FF++ , CDF , DFDC , DFDCP , FFIW ) and compared with many state-of-the-art methods, demonstrating the efficacy of our method in improving detection performance.

The contributions of this paper are summarized in three-fold: **1)** To the best of our knowledge, we are the first to generate pseudo-fake faces by blending frequency knowledge. Our method pushes pseudo-fake faces closer to the distribution of wild fake faces, enhancing the learning of generic forgery features in DeepFake detection.**2)** We propose a Frequency Parsing Network that can adaptively partition the frequency components corresponding to semantic information, structural information, and noise information, respectively. Since no ground truth is provided, we design dedicated objectivesto train this network. **3)** Extensive experimental results on several DeepFake datasets demonstrate the efficacy of our method and its potential as a plug-and-play strategy for existing methods.

## 2 Related Works

The rapid progress of AI generative models has spawned the development of DeepFake detection methods. These methods mainly rely on deep neural networks to identify the inconsistency between real and fake faces using various features, including biological signals , spatial artifacts [18; 14; 15; 16], frequency abnormality [13; 19; 20], auto-learned clues from dedicated-designed models [21; 22]. These methods have shown promising results on public datasets. However, some of their performance significantly deteriorates when confronted with unknown DeepFake faces due to the large distribution discrepancy resulting from limited training datasets. To tackle this issue, many methods have been proposed to improve their generalizability by learning the generic DeepFake traces, _e.g._, [10; 14; 15; 16; 12; 23; 24]. One effective approach is to create synthetic fake faces during training, known as pseudo-fake faces, _e.g._, [10; 14; 15; 16]. FWA  is a pioneering method that conducts self-blending to simulate fake faces. Several extended variants (Face X-ray , PCL , SBI , BiG-Arts ) have been proposed to blend faces using curated strategies, further improving detection performance. By increasing the diversity of training faces, the gap in the distribution of wild fake faces can be reduced, allowing the models to learn the invariant DeepFake traces across different distributions. To generate the pseudo-fake faces, existing methods usually design spatial blending operations to combine different faces. This involves extracting the face region from a source image and blending it into a target image. However, these methods overlook the distribution of wild fake faces in the frequency domain. While the synthetic faces may resemble the spatial-based distribution, the lack of consideration for frequency perspective hinders the models from learning the fundamental generic DeepFake traces.

## 3 Preliminary Analysis

We perform a statistical analysis of the frequency distribution of real and fake faces and present preliminary results for the main frequency components corresponding to semantic information, structural formation, and noise information, respectively.

**Inspiration and Verification.** The investigation in previous works [26; 27] has indicated that the forgery traces mainly exist in high-frequency areas. However, the precise range of these areas has not been described, driving us to re-investigate the frequency distribution of forgery traces.

Specifically, we conduct verification experiments using FaceForensics++ (FF++)  datasets. We extract the frames from all videos and randomly select \(3,000\) real images and \(3,000\) fake images for each manipulation method (_e.g._, DF, F2F, FS, and NT). Then we crop out the face region in these selected images using a face detector  and apply DCT  to generate frequency maps. For analysis, we sum up all frequency maps of real and fake images and adopt the visualization process of azimuthal average described in previous work [30; 27]. This process involves logarithmic transformation and the calculation of azimuthally-averaged flux in circular annuli apertures. By placing the center of the circular annuli aperture at the top-left corner of the frequency map, we can obtain a one-dimensional array representing the spectrum diagram. The visual results of their distribution are shown in Fig. 2 (top). It can be observed that this figure is consistent with the results in . However, when we directly plot their distribution differences without logarithmic operation, the results do not match the previous figure. It can be seen that the disparities in high-frequency regions are not as substantial as expected, while the differences in the lower range become more noticeable (see Fig. 2 (bottom)). This is because the logarithmic operation mitigates the degree of differences in lower frequency ranges, causing the illusion that only the high-frequency range exhibits differences between real and fake faces. Therefore, we conjecture that the forgery traces may not only be concentrated in a very high-frequency range but could possibly spread to the low-frequency range.

**Hypothesis and Validation.** As shown in Fig. 2, the most significant difference can be observed in the range of very low frequency. Given the significant dissimilarity in appearance between real and fake faces, we hypothesize that the semantic information is mainly represented in this low-frequency band. Moreover, we hypothesize that the mid-to-high frequency components capture the structural information, making them more susceptible to containing forgery traces. Furthermore, we hypothesize that the highest frequency components likely correspond to the noise introduced by various video preprocessing operations, such as compression, decompression, and encoding.

To validate our hypothesis, we directly visualize the difference between real and fake faces on their frequency maps in Fig. 3. By observing these results, we empirically split the frequency map into three non-overlap bands. The split operations follow the general band-pass filters. Denote the position in the frequency map as \((x,y)\), where \((0,0),(1,1)\) denotes the top-left corner and bottom-right corner. Specifically, we identify the region where \(x+y 1/16\) as containing semantic information, the region where \(1/16<x+y 1/2\) as containing structural information, and the region where \(x+y>1/2\) as containing noise information. The corresponding results are visualized in Fig. 4, validating that these three ranges provide empirical evidence that aligns with our frequency distribution hypothesis.

## 4 FreqBlender

We describe a new method to create pseudo-fakes by blending specific frequency knowledge. The motivation is that existing methods only focus on spatial domain blending, which overlook the disparity between real and fake faces in the frequency domain. By considering the frequency distribution, the pseudo-fakes can closely resemble the fake faces. To achieve this, we propose

Figure 4: Image visualization corresponding to different frequency components.

Figure 3: Visualization of the frequency difference between real and fake faces. The lighter color indicates the larger difference.

Figure 2: Statistics of frequency distribution. The top part shows the frequency distribution of real and fake faces using algorithms in [30; 27]. The bottom part shows the frequency difference between real and fake. The values on the vertical axis are logarithmic with \(2\).

a Frequency Parsing Network (FPNet) to partition the frequency domain into three components, corresponding to semantic information, structural information, and noise information, respectively. We then blend the structural information of fake faces with the real faces to generate the pseudo-fakes. The details of the Frequency Parsing Network are elaborated in Sec. 4.1, and the objective and training process for this network is described in Sec. 4.2. Then we introduce the deployment of our method with existing methods in Sec. 4.3.

### Frequency Parsing Network

**Overview.** The Frequency Parsing Network (FPNet) is composed of one shared encoder and three independent decoders. The encoder transforms the input faces into frequency-critical features and the decoders aim to decompose the feature from the encoder and extract the respective frequency components.

Denote the encoder as \(\) and three decoders as \(_{},_{},_{}\) respectively. Given an input face image \(\{0,255\}^{h w 3}\), we first convert this face to the frequency map as \(()^{h w 3}\), where \(\) denotes the operations of Discrete Cosine Transform (DCT). Then we send this frequency map into model and generate three distribution maps as \(_{}((()))^{h w},_{}((()))^{h w}\), and \(_{}((()))^{h w}\) respectively. Each distribution map indicates the probability of the corresponding frequency component distributed in the frequency map. Given these distribution maps, we can select the corresponding frequency components conveniently. For example, the frequency component corresponding to semantic information can be selected by \(_{}()=()_{}( (()))\) and the same is for other two frequency components, _i.e._, \(_{}()=()_{}( (()))\) and \(_{}()=()_{}( (()))\). The overview of FPNet is shown in Fig. 5 (left).

**Network Architecture.** The encoder simply consists of four convolution layers with a kernel size of \(3 3\), a stride of \(2\), and a padding of \(1\). Each decoder also consists of four layers, and each layer is a combination of a convolutional layer and PixelShuffle operation  (see Fig. 5 (right)).

### Objective Design for FPNet

The most challenging and crucial aspect of our method is to train the network for frequency parsing, as there is no ground truth available for the different frequency components. Note that the only available resources for supervising the training are the preliminary analysis results in Section 3. Nevertheless, these results are not precise and can not be adaptive to different inputs, which are insufficient for model training. Therefore, we meticulously craft a couple of auxiliary objectives to instruct the learning of networks, allowing for the self-refinement of the network.

These objectives are designed based on the following proposition.

**Proposition 1**.: _Each frequency component exhibits the following properties:_

1. _Semantic information can reflect the facial identity._

Figure 5: Overview of the proposed Frequency Parsing Network (FPNet). Given an input face image, our method can partition it into three frequency components, corresponding to the semantic information, structural information, and noise information respectively. Since there is no ground truth, we propose four corollaries to supervise the training. The architecture of the encoder and decoders is shown in the right part.

2. _Structural information serves as the carrier of forgery traces._
3. _Noise information has minimal impact on visual quality._
4. _The preliminary analysis findings are generally applicable._

**Corollary 1**.: _For a given face \(\), the transformed face based on its semantic information will retain the same facial identity as \(\), i.e., \(\ \{0,255\}^{h w 3},\ ( ^{-1}(_{}()))=()\), where \(\) denotes a face recognition model and \(^{-1}\) denotes the Inverse Discrete Cosine Transform (IDCT)._

**Facial Fidelity Loss.** We introduce a facial fidelity loss \(_{}\) to penalize the discrepancy in identity between the input face image and the spatial content represented by semantic information. To measure the identity discrepancy, we employ the MobileNet  as our face recognition model and train it using ArcFace . We select MobileNet for its balance between computational efficiency and recognition accuracy. Let \(\) be the MobileNet and \(_{f}()\) be the facial features extracted from the face image \(\). The facial fidelity loss can be defined as

\[_{}()=\|_{f}(^{-1}(_{ }())-_{f}()\|_{2}^{2}.\] (1)

Note that the input face \(\) can be either real or fake, as the identity information is present in both cases.

**Corollary 2**.: _For a given real face \(_{r}\), it can be detected as fake if and only if it is inserted the structural information from a fake face \(_{f}\), i.e., \((_{r})=0\) iff \(_{r}_{r}_{}(_{ f})\), where \(\) denotes a Deepfake detector with labels of fake and real in \(\{0,1\}\), \(\) indicates the inserting operation._

**Authenticity-determinative Loss.** This loss is designed to emphasize the determinative role of structural information. To evaluate the authenticity of faces, we develop a DeepFake detector \(\), which is implemented using a ResNet-34  trained on real and fake faces. Then we construct two sets of faces by blending frequency components.

The first set contains three types of faces transformed from frequency components corresponding to 1) the semantic information of the real face, 2) the semantic information of the fake face, and 3) the semantic information of the real face blended with the structural information of the real face. We denote this set as \(_{r}=\{^{-1}(_{}(_{r})),^{-1}( _{}(_{f})),^{-1}(_{}(_{r})+_{}(_{r}))\}\). Since there is no structural information from fake faces in this set, all the faces should be detected as real.

Similarly, the second set contains two types of faces: 1) blending the semantic information of the fake face with the structural information of the fake face, and 2) blending the semantic information of the real face with the structural information of the fake face. We denote this set as \(_{f}=\{^{-1}(_{}(_{f})+_{}(_{f})),^{-1}(_{}(_{r})+_{ }(_{f}))\}\). Since all blended faces in this set contain the structural information of fake faces, they should be detected as fake. Thus the authenticity-determinative loss \(_{}\) can be written as

\[_{}(_{r},_{f})= _{r}|}_{_{r}}(,1)+_{f}|}_{_{f}}(,0)\] (2)

where CE denotes the cross-entropy loss.

**Corollary 3**.: _The face should exhibit no visible change if the frequency component of noise information is removed, i.e., \(\ \{0,255\}^{h w 3},\  _{}(_{f})\), where \(\) indicates the removing operation._

**Quality-agnostic Loss.** As noise information does not contain decisive details for the overall depiction of the image, the face image is expected to be similar to the face image transformed using the frequency components of semantic and structural information. This similarity can be quantified using the quality-agnostic Loss \(_{}\), defined as

\[_{}()=\|-^{-1}(_{}()+_{}())\|_{2}^{2},\] (3)

where the face \(\) can be either real or fake.

**Corollary 4**.: _Each frequency component is bound by the preliminary results, i.e., there should be no significant deviation between the predicted frequency component and the approximate frequency distribution in preliminary analysis._

**Prior and Integrity Loss.** According to our analysis in the Preliminary Analysis section, we have an initial understanding of the approximate frequency distribution. Denote the initial frequency maps for semantic, structural, and noise information as \(m_{},m_{},m_{}\), respectively. These maps are utilized to accelerate the convergence of the model towards the desired direction. Moreover, we add a constraint on the integrity of their distributions, ensuring that their combination covers all elements of the frequency map. This loss \(_{}\) can be expressed as

\[_{}= \|_{}((()))-m_{ }\|_{2}^{2}+\|_{}((()))-m_{}\|_{2}^{2}+\|_{}((( )))-m_{}\|_{2}^{2}+\] \[\|(_{}((()))+ _{}((()))+_{ }((())))-\|_{2}^{2},\] (4)

where \(\) denotes a mask where all the elements in it is \(1\).

**Overall Objectives.** The overall objectives are the summation of all these loss terms, as

\[=_{1}_{}+_{2}_{ }+_{3}_{}+_{4}_{ },\] (5)

where \(_{1},_{2},_{3},_{4}\) are the weights for different loss terms.

### Deployment of FreqBlender

Given a fake face \(_{r}\) and a real face \(_{f}\), we can generate a pseudo-fake face by

\[_{f}^{}=^{-1}(\,(_{r})_{ }(((_{f})))+(_{f})_{}(((_{f})))+(_{r}) _{}(((_{f})))\,\,).\] (6)

_Note that in our method, **it is not necessary to perform the blending using wild fake faces.** Instead, we can tactfully substitute wild fake faces with the pseudo-fake faces generated by existing spatial face blending methods. It allows us to overcome the limitations in the frequency distribution of existing pseudo-fake faces._

## 5 Experiments

### Experimental Setups

**DataSets.** Our method is evaluated using several standard datasets, including FaceForensics++  (FF++), Celeb-DF (CDF) , DeepFake Detection Challenge (DFDC) , DeepFake Detection Challenge Preview (DFDCP) , and FFIW-10k (FFIW)  datasets. Specifically, the FF++ dataset consists of \(1000\) pristine videos and \(4000\) manipulated videos corresponding to four different manipulation methods, that are Deepfakes (DF), Face2Face (F2F), FaceSwap (FS), and NeuralTextures (NT). CDF dataset comprises \(590\) pristine videos and \(5639\) high-quality fake videos created from DeepFake alterations of celebrity videos available on YouTube. DFDC is a large-scale deepfake dataset, that consists of \(100,000\) video clips, and DFDCP is a preview version of DFDC, which is also widely used in evaluation. The FFIW dataset contains \(8250\) pristine videos and \(8250\) DeepFake videos with multi-face scenarios. We follow the original training and testing split provided by the datasets for experiments.

**Implementation Details.** Our method is implemented using PyTorch 2.0.1  with a Nvidia 3090ti. In the training stage of FPNet, the image size is set to \(400 400\). The batch size is set to \(8\) and the Adam optimizer is utilized with an initial learning rate of \(1e^{-4}\). The training epoch is set to \(200\). The hyperparameters in the objective function in Eq. (5) are set as follows: \(_{1}=1/12,_{2}=1,_{3}=1e^{-3},_{4}=1/4\). For DeepFake detection, we employ the vanilla EfficientNet-b4  as our model following . In the training phase, we create pseudo-fake faces on-the-fly. We first generate synthetic faces using the spatial-blending method  and then blend them with real faces using our method with a probability of \(=0.2\). Other training and testing settings are the same as . _More analysis of parameters are provided in Supplementary._

### Results

To showcase the effectiveness of our method, we train our method solely on the FF++ dataset and test it on the other different datasets. We employ the Area Under the Receiver Operating Characteristic Curve (AUC) as the evaluation metric following previous work . Our method is compared with **five** video-based detection methods, including **Two-branch**, **DAM**, **LipForensics**,

**FTCN** and **SST**. Moreover, we involve **thirteen** frame-level state-of-the-art methods for comparison, which are **DSP-FWA**, **Face X-ray**, F3-Net , **LRL**, **FRDM**, **PCL**, **DCL**, **SBI**, **TALL-Swin**, **UCF**, **SST**, **F-G**, **LSDA**,respectively.

**Cross-dataset Evaluation.** We evaluate the cross-dataset performance of our method compared to other counterparts in Table 1. The best performance is highlighted in blue and the second-best is marked by red. It should be noted that our method operates on pseudo-fake faces generated by SBI, thus we do not need fake faces. In comparison to video-level methods, our method achieves the best performance, which outperforms all the methods by a large margin.

When compared to frame-level methods, our method still outperforms the others. For example, our method improves upon the performance of the most relevant counterpart SBI by \(1.41\%\), \(2.17\%\), \(1.41\%\), \(1.31\%\) on CDF, DFDC, DFDC, and FFIW respectively. This improvement can be attributed to the incorporation of frequency knowledge in pseudo-fake faces, enhancing the generalization of detection models. Note that the performance of the compared methods (except SBI* and F3-Net) is extracted from their original papers. SBI* denotes the performance obtained using the officially released codes, and F3-Net is reproduced using the codes implemented by others 3. The results closely align with the reported scores, which verifies the correctness of our configuration of their codes. In subsequent experiments, we employ their release codes for comparison.

**Cross-manipulation Evaluation.** Since SBI is the most recent and effective method, we compare our method with it for demonstration. Specifically, we compare our method with two variants of the SBI method. The first is trained using the raw set of real videos in the FF++ dataset, while the second is trained using the c23 set. According to the standard protocols, all methods are tested on c23 videos. The results are shown in Table 2. It can be seen that our method outperforms SBI-raw by \(3.62\%\) and SBI-c23 by \(3.89\%\), demonstrating the efficacy of our method on cross-manipulation scenarios.

### Analysis

**Effect of Each Objective Term.** This part studies the effect of each objective term on CDF, DFDC, and DFDCP datasets. The results are shown in Table 3. Note that Baseline denotes only using prior and integrity loss \(_{}\) and "w/o" denotes without. It can be seen that without one certain objective

   &  &  &  \\   & & Real & Fake & CDF & DFDC & DFDCP & FFIW \\  Two-branch (ECCV’20)  & Video & ✓ & ✓ & 76.65 & - & - & - \\ DAM (CVPR’21)  & Video & ✓ & ✓ & 75.3 & - & 72.8 & - \\ LipForensics (CVPR’21)  & Video & ✓ & ✓ & 82.4 & 73.50 & - & - \\ FTCN (ICCV’21)  & Video & ✓ & ✓ & 86.9 & 71.00 & 74.0 & 74.47 \\ SST (CVPR’24)  & Video & ✓ & ✓ & 89.0 & - & - & - \\  DSP-FWA (CVPRW’19 ) & Frame & ✓ & ✓ & 69.30 & - & - & - \\ Face X-ray (CVPR’20)  & Frame & ✓ & - & - & - & 71.15 & - \\ Face X-ray (CVPR’20)  & Frame & ✓ & ✓ & - & - & 80.92 & - \\ F3-Net (ECCV’20)  & Frame & ✓ & ✓ & 72.93 & 61.16 & 81.96 & 61.58 \\ LRL (AAAI’21)  & Frame & ✓ & ✓ & 78.26 & - & 76.53 & - \\ FRDM (CVPR’21)  & Frame & ✓ & ✓ & 79.4 & - & 79.7 & - \\ PCL+l2G (ICCV’21)  & Frame & ✓ & - & 90.03 & 67.52 & 74.37 & - \\ DCL (AAAI’22)  & Frame & ✓ & ✓ & 82.30 & - & 76.71 & 71.14 \\ SBI* (CVPR’22)  & Frame & ✓ & - & 92.94 & 72.08 & 85.51 & 85.99 \\ SBI (CVPR’22)  & Frame & ✓ & - & 93.18 & 72.42 & 86.15 & 84.83 \\ TALL-Swin (ICCV’23)  & Frame & ✓ & ✓ & 90.79 & 76.78 & - & - \\ UCF (ICCV’23)  & Frame & ✓ & ✓ & 82.4 & **80.5** & - & - \\ BiG-Arts (PR’23)  & Frame & ✓ & ✓ & 77.04 & - & 80.48 & - \\ F-G (CVPR’24)  & Frame & ✓ & ✓ & 74.42 & 61.47 & - & - \\ LSDA (CVPR’24)  & Frame & ✓ & ✓ & 83.0 & 73.6 & 81.5 & - \\ 
**FreqBlender (Ours)** & Frame & ✓ & - & **94.59** & 74.59 & **87.56** & **86.14** \\  

Table 1: The cross-dataset evaluation of different methods. Blue indicates best and red indicates second best.

term, the performance drops on all datasets, which demonstrates that different objective terms have distinct impacts, and their collective contributes most to our method.

**Complementary to Spatial-blending Methods.** To validate the complementary of our method, we replace the SBI method with other spatial-blending methods and study if the performance is improved. Specifically, we reproduce the pseudo-fake face generation operations in DSP-FWA, I2G, and Face X-ray, and combine them with our method. Note that I2G and Face X-ray have not released their codes, we re-implement them rigorously following their original settings. The results on FF++, CDF, DFDCP, FFIW datasets are presented in Table 4. It can be seen that by combining with DSP-FWA, our method improves \(0.12\%\) averagely. A similar trend is also observed in the I2G, which improves \(0.84\%\) on average. For Face X-ray, we improve the performance by \(3.08\%\) on average. It is noteworthy that I2G and Face X-ray have not released their codes yet. We rigorously follow the instructions as in their papers and run the codes widely used by others45.

**Different Network Architectures.** This part validates the effectiveness of our method on different networks, including ResNet-50 , EfficientNet-b1 , VGG16 , Xception , ViT , F3-Net , and GFFD. We compare our method with SBI on these networks, which are tested on CDF, FF++, DFDCP, and FFIW datasets. The results are shown in Table 5. It can be observed that our method improves the performance by \(1.78\%\), \(0.41\%\), \(1.51\%\), \(0.2\%\), \(2.75\%\), and \(4.68\%\) averagely on ResNet-50, EfficientNet-b1, Xception, Vit networks, F3-Net, and GFFD networks respectively. It is noteworthy that our method slightly reduces the performance of VGG16 by \(0.01\%\). It is possibly because the capacity of VGG16 is limited than other networks, and learning spatial pseudo-fake faces almost fills up this capacity, leaving no room for the learning of frequency knowledge.

   Method & FF++ & CDF & DFDCP & FFIW & Avg \\  DSP-FWA  & 48.14 & 62.91 & 60.74 & 40.65 & 53.11 \\ DSP-FWA  + Ours & 49.46 & 65.47 & 56.18 & 41.81 & 52.32 \\ I2G  + Ours & 59.56 & 53.55 & 48.02 & 46.75 & 51.97 \\ I2G  + Ours & 63.84 & 48.89 & 49.53 & 48.96 & 52.81 \\  Face X-ray  & 82.26 & 67.99 & 65.00 & 63.65 & 69.73 \\ Face X-ray  + Ours & 84.03 & 76.05 & 63.90 & 67.24 & **72.81** \\   

Table 4: Effect of our method complementary to spatial-blending methods.

   Method &  &  \\    & DF & F2F & FS & NT \\  SBI-raw  & 98.35 & 91.07 & 96.92 & 83.69 & 92.51 \\ SBI-c23  & 98.60 & 92.60 & 95.44 & 82.30 & 92.24 \\ 
**FreqBlender (Ours)** & 99.18 & 96.76 & 97.68 & 90.88 & **96.13** \\   

Table 2: The cross-manipulation evaluation of different methods.

   Method & CDF & FF++ & DFDCP & FFIW & Avg \\  ResNet-50  + SBI & 84.82 & 95.39 & 73.51 & 81.67 & 83.85 \\  ResNet-50  + Ours & 85.44 & 94.61 & 76.16 & 86.32 & **85.63** \\  EfficientNet-b1  + SBI & 90.25 & 94.66 & 87.54 & 82.55 & 88.75 \\  EfficientNet-b1  + Ours & 90.53 & 94.65 & 87.70 & 83.76 & **89.16** \\  VGG16  + SBI & 78.22 & 93.05 & 74.13 & 87.26 & **83.16** \\ VGG16  + Ours & 78.38 & 93.10 & 73.47 & 87.63 & 83.15 \\  Xception  + SBI & 87.00 & 91.40 & 75.68 & 70.24 & 81.08 \\ Xception  + Ours & 90.52 & 93.32 & 76.07 & 70.43 & **82.59** \\  ViT  + SBI & 85.85 & 96.09 & 87.71 & 86.05 & 88.92 \\ ViT  + Ours & 86.34 & 96.10 & 87.17 & 86.88 & **89.12** \\  F3-Net  + SBI & 84.94 & 93.42 & 79.29 & 73.42 & 82.77 \\ F3-Net  + Ours & 88.10 & 95.16 & 84.32 & 74.49 & **85.52** \\  GFFD  + SBI & 81.34 & 91.81 & 77.19 & 65.53 & 78.97 \\ GFFD  + Ours & 86.71 & 92.18 & 78.25 & 77.45 & **83.65** \\   

Table 5: The effect of our method on different networks.

**Saliency Visualization.** We employ Grad-CAM  to visualize the attention of our method compared to SBI on four manipulations in the FF++ dataset. Compared to SBI, our method concentrates more on the structural information, such as the manipulation boundaries. For example, our method highlights the face outline in DF, F2F, and FS, while focusing on the mouth contour in NT.

**Effect of Using Wild Fake or Spatial Pseudo-fake Faces.** As described in Sec. 4.3, our method is performed using real and spatial-blending pseudo-fake (SP-fake) faces. The rationale is that SP-fake faces are greatly diversified, containing more spatial forgery traces. Applying our method to these faces can consider both frequency and spatial traces effectively. To verify this, we directly perform our method on real and wild fake faces. The results in Table 6 indicate a notable performance drop when only wild fakes are used.

**Limitations.** Our method is designed to address the drawbacks of existing spatial-blending methods. Hence, it inherits the assumption that the faces are forged by face-swapping techniques. Further research is needed to validate our performance on other types of forgery operations, such as whole-face synthesis and attribute editing.

## 6 Conclusion

This paper describes a new method called _FreqBlender_ that can generate pseudo-fake faces by blending frequency knowledge. To achieve this, we propose a Frequency Parsing Network that adaptively extracts the frequency component corresponding to structural information. Then we can blend this information from fake faces into real faces to create pseudo-fake faces. The extensive Experiments demonstrate the effectiveness of our method and can serve as a complementary module for existing spatial-blending methods.

**Acknowledgement.** This work is supported in part by the National Natural Science Foundation of China (No.62402464), Shandong Natural Science Foundation (No.ZR2024QF035), and China Postdoctoral Science Foundation (No.2021TQ0314; No.2021M703036). Jiaran Zhou is supported by the National Natural Science Foundation of China (No.62102380) and Shandong Natural Science Foundation (No.ZR2021QF095, No.ZR2024MF083). Baoyuan Wu is supported by Guangdong Basic and Applied Basic Research Foundation (No.2024B1515020095), National Natural Science Foundation of China (No. 62076213), and Shenzhen Science and Technology Program (No. RCYX20210609103057050). Bin Li is supported in part by NSFC (Grant U23B2022, U22B2047).