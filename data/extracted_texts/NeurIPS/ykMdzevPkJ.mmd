# DiffTraj: Generating GPS Trajectory with Diffusion Probabilistic Model

Yuanshao Zhu1,2, Yongchao Ye1, Shiyao Zhang1, Xiangyu Zhao2, James J.Q. Yu3,*

1 Southern University of Science and Technology

2 City University of Hong Kong

3University of York

{zhuys2019, 12032868}@mail.sustech.edu.cn

zhangsy@sustech.edu.cn

xianzhao@cityu.edu.hk

james.yu@york.ac.uk

Corresponding author

###### Abstract

Pervasive integration of GPS-enabled devices and data acquisition technologies has led to an exponential increase in GPS trajectory data, fostering advancements in spatial-temporal data mining research. Nonetheless, GPS trajectories contain personal geolocation information, rendering serious privacy concerns when working with raw data. A promising approach to address this issue is trajectory generation, which involves replacing original data with generated, privacy-free alternatives. Despite the potential of trajectory generation, the complex nature of human behavior and its inherent stochastic characteristics pose challenges in generating high-quality trajectories. In this work, we propose a spatial-temporal diffusion probabilistic model for trajectory generation (DiffTraj). This model effectively combines the generative abilities of diffusion models with the spatial-temporal features derived from real trajectories. The core idea is to reconstruct and synthesize geographic trajectories from white noise through a reverse trajectory denoising process. Furthermore, we propose a Trajectory UNet (Traj-UNet) deep neural network to embed conditional information and accurately estimate noise levels during the reverse process. Experiments on two real-world datasets show that DiffTraj can be intuitively applied to generate high-fidelity trajectories while retaining the original distributions. Moreover, the generated results can support downstream trajectory analysis tasks and significantly outperform other methods in terms of geo-distribution evaluations.

## 1 Introduction

GPS trajectory data play a crucial role in numerous spatial-temporal data mining applications, including urban traffic planning, business location selection, and travel time estimation . Despite the substantial progress in urban applications through GPS trajectory analysis, few attention was paid to data accessibility and privacy concerns . For example, real-world trajectory data, which contain sensitive personal geolocation information, raise significant privacy issues when using directly . Additionally, the time-consuming and labor-intensive nature of trajectory data collection leads to challenges in obtaining accessible, publicly available datasets that preserve privacy. Therefore, it is essential to develop methods that facilitate the efficient use of trajectory data in urban applications while safeguarding personal privacy. One promising approach involves generating synthetic trajectories by learning from real trajectory distributions and replacing privacy-sensitivereal trajectories with these synthetic counterparts. The generated trajectories allow for equivalent data analysis outcomes and support high-level decision-making without compromising privacy.

However, generating GPS trajectory that accurately reflect real-world distributions will encounter the following challenges in practice. First, most cities contain various regions with diverse functions and population densities, resulting in non-independent and identically distributed trajectories among these regions . This complex distribution makes it difficult to learn a global trajectory model that captures regional nuances. Second, the inherent stochastic nature of human activities makes each trajectory unique, posing challenges in modeling and predicting individual movement patterns . Third, external factors, such as traffic conditions, departure time, and local events, significantly influence personal travel schedules . Accounting for these factors and understanding their impact on the correlations between individual GPS locations within a trajectory adds to the complexity of modeling trajectory generation accurately.

To address the above challenges, we propose a trajectory generation method based on the spatial-temporal diffusion probabilistic model, which can effectively capture the complex behaviors of real-world activities and generates high-quality trajectories. The core idea behind this method is to perturb the trajectory distribution with noise through a forward trajectory diffusion process and then recover the original distribution by learning the backward diffusion process (denoising), resulting in a highly flexible trajectory generation model . We propose this framework based on three primary motivations: (i) The diffusion model is a more reliable and robust method of generation than canonical methods . (ii) Human activities in the real world exhibit stochastic and uncertain characteristics , and the diffusion model reconstructs data step-by-step from random noise, making it suitable for generating more realistic GPS trajectory. (iii) Since the diffusion model generates trajectories from random noise, it eliminates the risk of privacy leakage.

While the diffusion model shows promise for generating high-quality trajectories, it is a non-trivial task when applied to GPS trajectory generation. Firstly, the spatial-temporal nature of trajectory data presents complexity to the diffusion process, requiring the model to consider the spatial distribution of GPS points and the temporal dependencies among them. Secondly, external factors such as traffic conditions, departure time, and regions can significantly impact human mobility patterns , posing challenges for modeling these factors within the diffusion framework. Finally, the inherently stochastic nature of human activities demands that the diffusion model be capable of capturing a wide range of plausible trajectory patterns, which can be difficult due to the need to balance diversity and realism in the generated trajectories. Addressing these challenges is crucial for successfully applying the diffusion model to GPS trajectory generation and ensuring privacy-preserving, accurate, and computationally efficient outcomes.

Building on the identified motivations and addressing the limitations of applying the diffusion model to trajectory generation, we propose a **Dif**fusion probabilistic model **Tra**jectory generation (DiffTraj) framework. This framework can generate infinite trajectories while preserving the real-world trajectory distribution. DiffTraj incorporates spatial-temporal modeling of raw trajectories without the need for additional operations, allowing for direct application to trajectory generation tasks. Crucially, the synthetic trajectories generated by DiffTraj ensure high generation accuracy while maintaining their utility, offering a promising solution to privacy-preserving GPS trajectory generation. To summarize, the contributions of this work are concluded as follows:

* We propose a DiffTraj framework for trajectory generation, leveraging the diffusion model to simulate real-world trajectories while preserving privacy. In addition, this framework can be applied to generate high-fidelity trajectory data with high efficiency and transferability. To the best of our knowledge, our work is the first exploration of trajectory generation by the diffusion model.
* We design a novel denoising network structure called Traj-UNet, which integrates residual blocks for spatial-temporal modeling and multi-scale feature fusion to accurately predict the noise level during denoising. Meanwhile, Traj-UNet integrates Wide and Deep networks  to construct conditional information, enabling controlled trajectory generation.
* We validate the effectiveness of DiffTraj on two real-world trajectory datasets, showing that the proposed methods can generate high-fidelity trajectories and preserve statistical properties. At the same time, the generated trajectories can support downstream trajectory analysis tasks with replaceable utility and privacy-preserving.

Related Work

**Trajectory Data Synthesizing**. Existing methods for trajectory data can be generally divided into two main categories: non-generative and generative . Non-generative methods include perturbing real trajectories [1; 37] or combining different real trajectories . Adding random or Gaussian perturbations protects privacy but compromises data utility by altering the spatial-temporal characteristics and data distribution. Striking a balance between trajectory utility and privacy protection is challenging . Although Mehmet et al. generated forged trajectories by mixing different trajectories, this method relies on massive data and sophisticated mixing processes .

Besides, the principle of the generative method is to leverage deep neural networks that learn the spatial-temporal distribution underlying the real data. New trajectory data are therefore generated by sampling from the learned distribution. Liu et al. proposed a preliminary solution that employs generative adversarial networks (GAN) for trajectory generation, yet it failed to go further towards a detailed design. Subsequently, some works divided the city map into grids and performed trajectory generation by learning the distribution of trajectories among the grids [38; 24]. However, there is a trade-off between generation accuracy and grid size. Meanwhile, researchers used the image generation capability of GAN to convert the trajectory data into images for time-series generation [4; 31], while the transformation between images and trajectories imposed an additional computational burden. Compared with previous methods, DiffTraj uses the diffusion model for trajectory generation, which can better explore the spatial and temporal distributions without additional data manipulation.

**Diffusion Probabilistic Model**. The diffusion model is a probabilistic generative model, which was first proposed by Sohl-Dickstein et al.  and then further improved by Ho et al.  and Song et al. . A typical diffusion model generates synthetic data via two sequential processes, i.e., a forward process that gradually perturbs the data distribution by adding noise on multiple scales and a reverse process that learns how to recover the data distribution. In addition, researchers have made extensive attempts to improve generative sample quality and sampling speed. For example, Song et al. proposed a non-Markovian diffusion process to reduce the sampling steps , Nichol et al. proposed to learn the variance of reverse processes allowing fewer sampling steps , and Dhariwal et al. searched for the optimal structure of the reverse denoising neural network to obtain better sampling quality. As a new type of advanced generative model, diffusion models have achieved superior performance over alternative generative models in various generative tasks, such as computer vision , natural language processing , multi-modal learning [2; 19], and traffic forecasting . Nevertheless, the diffusion probabilistic model calls for efforts in spatial-temporal trajectory data generation. To the best of our knowledge, this work is a pioneering attempt that uses diffusion probabilistic model to generate GPS trajectory.

## 3 Preliminary

In this section, we first introduce the definitions and notations we use in this paper and then briefly present the fundamentals of the diffusion probabilistic model.

### Problem Definition

**Definition 1: (GPS Trajectory)**. A GPS trajectory is defined as a sequence of continuously sampled private GPS location points, denoted by \(=\{p_{1},\ p_{2},,p_{n}\}\). The \(i\)-th GPS point is represented as a tuple \(p_{i}=[_{i},\ _{i}]\), where \(_{i}\) and \(_{i}\) denote longitude and latitude, respectively.

**Problem Statement: (Trajectory Generation)**. Given a set of real-world GPS trajectories, \(=\{^{1},\ ^{2},,^{m}\}\), where each \(^{i}=\{p^{i}_{1},\ p^{i}_{2},,p^{i}_{n}\}\) is a sequence of private GPS location points. The objective of the trajectory generation task is to learn a generative model, \(G\), that can generate synthetic GPS trajectories, \(=\{^{1},\ ^{2},,^{k}\}\), where each \(^{i}=\{q^{i}_{1},\ q^{i}_{2},,q^{i}_{n}\}\). such that:

* **Similarity**: The generated trajectories \(^{i}\) preserve the spatial-temporal characteristics and distribution of the real trajectories \(^{i}\). In practice, there are various physical meanings, such as the regional distribution of trajectory points, the distance between successive points, etc.
* **Utility**: The generated trajectories \(^{i}\) maintain utility for downstream applications and analyses.
* **Privacy**: Privacy is preserved, meaning that the generated trajectories \(^{i}\) do not reveal sensitive information about the individuals associated with the real trajectories \(^{i}\).

### Diffusion Probabilistic Model

The diffusion probabilistic model is a powerful and flexible generative model, which has gained increasing attention in recent years for its success in various data generation tasks [11; 28; 29]. In general, the diffusion probabilistic model consists of two main processes: a forward process that gradually perturbs the data distribution with noise, and a reverse (denoising) process that learns to recover the original data distribution.

**Forward process**. Given a set of real data samples \(_{0} q(_{0})\), the forward process adds \(T\) time-steps of Gaussian noise \(()\) to it, where \(T\) is an adjustable parameter. Formally, the forward process can be defined as a Markov chain from data \(_{0}\) to the latent variable \(_{T}\):

\[q(_{1:T}_{0})=_{t=1}^{T}q(_{t} _{t-1});\ \ q(_{t}_{t-1})=(_{t}; }_{t-1},_{t}).\] (1)

Here, \(\{_{t}(0,1)\}_{t=1}^{T}\) (\(_{1}<_{2}<<_{T}\)) is the corresponding variance schedule. Since it is impractical to back-propagate the gradient by sampling from a Gaussian distribution, we adopt a reparameterization trick to keep the gradient derivable  and the \(_{t}\) can be expressed as \(_{t}=}_{0}+_{t}}\), where \((0,)\) and \(_{t}=_{i=1}^{t}(1-_{i})\).

**Reverse process**. The reverse diffusion process, also known as the denoising process, aims to recover the original data distribution from the noisy data \(_{T}(0,)\). Accordingly, this process can be formulated by the following Markov chain:

\[p_{}(_{0:T})=p(_{T})_{t=1}^{T}p_{ }(_{t-1}_{t});\ \ \ p_{}(_{t-1}_{t})=(_{t -1};_{}(_{t},t),_{}(_{t},t)^{2})\] (2)

where \(_{}(x_{t},t)\) and \(_{}(x_{t},t)\) are the mean and variance parameterized by \(\), respectively. Based on the literature , for any \(_{t}=_{t-1}}{1-_{t}}_{t}\) (\(t>1\)) and \(_{1}=_{1}\), the parameterizations of \(_{}\) and \(_{}\) are defined by:

\[_{}(_{t},t)=}}( _{t}-}{_{t}}}_{} (_{t},t)),\ \ _{}(_{t},t )=_{t}^{}.\] (3)

## 4 DiffTraj Framework

In this section, we present the details of the DiffTraj framework shown in Fig. 1, which applies the diffusion model to trajectory generation. The primary goal of DiffTraj is to estimate the real-world trajectory distribution \(q(_{0}_{0}^{})\) using a parameterized model \(p_{}(_{0}^{}_{0}^{})\). Given a random noise \(_{T}(0,)\), DiffTraj generates a synthetic trajectory \(_{0}^{}\), conditioned on the observations \(_{0}^{}\). The reverse (generation) process from the Eq. (2) can be reformulated for DiffTraj as:

\[p_{}(_{t-1}^{}_{t}^{},_{ 0}^{}):=(_{t-1}^{};\ _{}(_{t}^{},t_{0}^{} ),\ _{}(_{t}^{},t_{0}^{} )^{2}).\] (4)

In this context, \(_{}\) serves as a conditional denoising function that takes the conditional observation \(_{0}^{}\) as input. We then extend the Eq. (3) to account for the conditional observation as follows:

\[\{_{}(_{t}^{},t _{0}^{})=_{}(_{t}^{},t,_{}(_{t}^{},t_{0}^{}))\\ _{}(_{t}^{},t_{0}^{} )=_{}(_{t}^{},t).\] (5)

**Training**. In practice, the reverse trajectory denoising process can be summarized as learning the Gaussian noise \(_{}(_{t}^{},t_{0}^{})\) through \(_{t}^{}\), \(t\) and \(_{0}^{}\) (refer to Fig. 1). Then solving \(_{}(_{t}^{},t_{0}^{})\) according to Eq. (3). This process can be trained by following objective :

\[_{}():=_{}_{t,x_{0},} \|-_{}(_{t}}_{ 0}+_{t}},\ t)\|^{2}.\] (6)

The above equations show that the core of training the diffusion model is to minimize the mean squared error between the Gaussian noise \(\) and predicted noise level \(_{}(_{t}^{},t_{0}^{})\).

**Sampling**. Given the reverse process presented in Sec. 3.2, the generative procedure can be summarized as sampling the \(_{T}^{}(0,)\), and iterative sampling based on \(_{t-1} p_{}(_{t-1}^{}_{t}^{ },_{0}^{})\). The final sampled output is \(_{0}^{}\).

### Traj-UNet Architecture

While developing the DiffTraj framework, accurately predicting the noise level at each diffusion time step is non-trivial. A model must capture these complex spatial-temporal dependencies to accurately predict the noise level at each diffusion time step. Inaccurate noise predictions can lead to excessively noisy trajectories, resulting in unrealistic patterns. Thus, we employ Traj-UNet to predict the noise of each diffusion time step in DiffTraj, i.e., \(_{}(_{t}^{s},t_{0}^{co})\). Specifically, we construct a network based on the UNet architecture , which has been extensively used in generative applications involving diffusion models [35; 20; 5]. The Traj-UNet is composed of two parts: down-sampling and up-sampling, each featuring multiple 1D-CNN-based stacked residual network blocks (Resnet block) with a kernel size of \(3\) in each layer. An attention mechanism-based transitional module is integrated between the two parts  (Detailed information about Traj-UNet can be found in Fig. 4 of the **Appendix** A). To enhance the learning of noise for each diffusion time step, Traj-UNet incorporates time step embedding and then fed to each block. Specifically, we employ Sinusoidal embedding  to represent each \(t\) as a \(128\)-dimensional vector. Subsequently, we apply two shared-parameter fully connected layers and add them to the input of the Resnet block.

**Input trajectory.** It is important to note that the input/output data for this model is a two-dimensional trajectory tensor (\([2,\ ]\)), with each dimension representing the longitude and latitude of the trajectory, respectively. Considering CNN-based models can only accept fixed-shape data, we initially up-sample or down-sample the training trajectories using linear interpolation methods . The generated trajectories are then transformed to the desired length using the same approach.

**Why use CNN based structure?** In DiffTraj, we adopt a CNN-based UNet structure over other temporal processing modules such as recurrent neural networks (RNNs) and WaveNet for several reasons. First, CNN-based methods can alleviate the vanishing gradient problem often encountered in RNNs, enabling more efficient learning of long-term dependencies. Second, compared to models like RNNs, CNNs hold a smaller number of parameters and offer greater computational efficiency, which is crucial during the reverse process. Finally, the UNet architecture excels in various generative tasks, particularly when combined with diffusion models [28; 11; 7]. Its multi-level structure with skip connections enables multi-scale feature fusion, helping the model better capture local and global contextual information in GPS trajectory data. We found that RNN and WaveNet-based architectures led to worse trajectory quality, as will be presented in Sec. 5.

### Conditional Generation

Various external factors, such as the region of the trip and departure time, influence real-world trajectories. This conditional information should provide meaningful guidance for the generation process, ensuring that synthetic trajectories exhibit similar patterns and behaviors. In the proposed DiffTraj framework, a Wide & Deep network  structure is employed to effectively embed conditional information, enhancing the capabilities of the Traj-UNet model. The wide component emphasizes memorization, capturing the significance of individual features and their interactions, while the deep component concentrates on generalization, learning high-level abstractions and feature combinations. This combination effectively captures both simple and complex patterns in the trajectory. For a given trajectory, several numerical motion properties (e.g., velocity and distance)

Figure 1: An illustration for trajectory generation with diffusion model. (Left) Forward and the reverse process (multiple GPS trajectories presented). (Right) Coupled the neural network model structure for reverse denoising.

and discrete external properties (e.g., departure time and regions) are derived. A wide network is utilized for embedding the numerical motion attributes, whereas a deep network is employed for the discrete categorical attributes. The wide network consists of a fully connected layer with \(128\) outputs, capturing linear relationships among motion attributes. In regard to the discrete categorical attributes, the deep network initially embeds them into multiple \(128\)-dimensional vectors, concatenates these vectors, and subsequently employs two fully connected layers to learn intricate feature interactions. Finally, the outputs generated by the Wide & Deep networks are combined and integrated into each Resnet block.

### Ensuring Generation Diversity

In practice, it should be avoided that conditional information results in a model with overly smooth or deterministic behavior patterns, which could undermine the intended privacy protections. To regulate the diversity of the generated trajectories and prevent the DiffTraj from following the conditional guidance too closely, we employ the classifier-free diffusion guidance method . Specifically, we jointly train conditional and unconditional diffusion models with a trade-off between sample quality and diversity by using a guiding parameter \(\). That is, the noise prediction model can be written as:

\[_{}=(1+)_{}(_{t}^{},t_{0}^{})-_{ }(_{t}^{},t),\] (7)

where \(\) denotes a vector in which all conditional information is \(\), essentially not encoding any information. When \(=0\), the model is a general diffusion model with conditional information only. By increasing the \(\), the model will focus more on unconditionally predicting noise (i.e., more diversity) when generating trajectories. Therefore, we can strike a balance between maintaining the quality of the generated trajectories and increasing their diversity, ensuring that the model does not generate overly deterministic behavior patterns.

### Sampling Speed up

As described in Sec. 3.2, DiffTraj relies on a large Markov process to generate high-quality trajectories, rendering a slow reverse diffusion process. Therefore, it is a significant challenge for the proposed model to generate valid and usable trajectories in a reasonable time frame. To address this issue, we adopt a non-Markov diffusion process approach with the same optimization objective , thus allowing the computation of efficient inverse processes. Specifically, we can sample every \( T/S\) steps with the skip-step method presented in . The corresponding set of noise trajectories changes to \(\{_{1},,_{S}\},_{i}[1,T]\). Through this approach, the sampling steps during trajectory generation can be significantly reduced from \(T\) steps to \(S\) steps. Compared to the typical diffusion model , this method can generate higher quality samples in fewer steps .

### Discussion on Privacy

The DiffTraj inherently protects privacy in GPS trajectory generation due to its generative nature and the manner in which it reconstructs synthetic data from random noise. It offers effective privacy protection through two key aspects. **(1) Generative Approach:** The DiffTraj generates trajectories by sampling from a learned distribution, rather than directly relying on or perturbing real-world data. By reconstructing trajectories from random noise during the reverse diffusion process, the model effectively decouples synthetic data from specific real data points. This ensures that the generated trajectories do not contain personally identifiable information or reveal sensitive location details, thus protecting their privacy. **(2) Learning Distribution:** The Traj-UNet learns the distribution of real trajectories and generates synthetic ones that exhibit similar patterns and behaviors, which avoids direct replicating individual real trajectories. The diverse and realistic synthetic trajectory generation ensures that sensitive information about specific individuals or their movement patterns is not inadvertently leaked. Moreover, it prevents the possibility of reverse engineering real trajectories from synthetic ones. By combining these aspects, the DiffTraj offers robust privacy protection for GPS trajectory generation, addressing concerns about data privacy while maintaining utility.

## 5 Experiments

We conduct extensive experiments on two real-world trajectory datasets to show the superior performance of the proposed DiffTraj in GPS trajectory generation. In this section, we only include the basic setup, comparison of the main experimental results, and visualization analysis. Owing to space limitation, we leave other details (dataset, baselines, network structure, hyperparameters, etc.) and more results (conditional generation, case studies, etc.) in the **Appendix**. All experiments are implemented in PyTorch and conducted on a single NVIDIA A100 40GB GPU. The code for the implementation of DiffTraj is available for reproducibility2.

### Experimental Setups

**Dataset and Configuration**. We evaluate the generative performance of DiffTraj and baselines on two real-world GPS trajectory datasets of Chinese cities, namely, Chengdu and Xi'an. A detailed description of the dataset and statistics is available in **Appendix** B.1, and experiment about Porto dataset is shown in **Appendix** C.1.

**Evaluation Metrics**. To fully evaluate the quality of the generated trajectories, we follow the design in  and use four utility metrics at different levels. Specifically, 1) Density error measures the geo-distribution between the entire generated trajectory and the real one, which measures the quality and fidelity of the generated trajectories at the global level. For trajectory level, 2) Trip error measures the distributed differences between trip origins and endpoints, and 3) Length error focuses on the differences in real and synthetic trajectory lengths. Moreover, we use 4) Pattern score to calculate the pattern similarity of the generated trajectories (see **Appendix** B.2 for details).

**Baseline Methods**. We compare DiffTraj with a series of baselines, including three typical generative models (VAE, TrajGAN and DP-TrajGAN) and a range of variants based on the diffusion model approach. Specifically, Diffwave is a diffusion model based on the WaveNet structure , while Diff-LSTM replaces the 1D-CNN-based temporal feature extraction module with an LSTM. In addition, Diff-scatter and Diff-wo/UNet can be considered as ablation studies of the proposed method to evaluate the effectiveness of diffusion models and UNet structures, respectively. Furthermore, DiffTraj-wo/Con indicates no integration of the conditional information embedding module, which is used to evaluate the efficiency of the Wide & Deep module for trajectory generation. Finally, we also compare Random Perturbation (RP) and Gaussian Perturbation (GP), two classes of non-generative approaches, to compare the superiority of generative methods in privacy preservation. The details of the implementation are presented in **Appendix** B.3.

### Overall Generation Performance

Table 1 presents the performance comparison of DiffTraj and the selected baseline methods on two real-world datasets. Specifically, we randomly generate \(3,000\) trajectories from each generative method and then calculate all metrics. From the results, we observe several trends that highlight the advantages of the proposed DiffTraj method. Non-generative methods, RP and GP, exhibit poor performance due to their reliance on simple perturbation techniques, which fail to capture the complex spatial-temporal dependencies and motion properties of the real GPS trajectories. This leads to lower-quality synthetic trajectories compared to generative models. Generative models, VAE and TrajGAN, show better performance than RP and GP but are still inferior to DiffTraj (or DiffTraj-wo/Con). This is because VAE and TrajGAN primarily focus on spatial distribution and may not adequately capture the temporal dependencies within trajectories. Additionally, the DiffTraj is designed to reconstruct the data step-by-step from random noise, which makes it more suitable for generating real GPS trajectory that reflect the inherent stochastic nature of human activities.

Diff-LSTM achieves good results in some metrics compared to the model without UNet, but falls short of DiffTraj due to the differences in the backbone network. The LSTM-based approach in Diff-LSTM is inherently designed for sequence processing and may be less effective in capturing spatial dependencies in the data compared to the CNN-based approach used in DiffTraj. The CNN-based backbone in DiffTraj can better model local spatial patterns and multi-channel dependencies more effectively, leading to higher-quality generated trajectories. Nevertheless, such results advocate the employment of diffusion models in future studies related to spatial-temporal data generation.

**Ablation Study**. The other diffusion model variants, Diffwave, Diff-scatter, and Diff-wo/UNet, do not perform as well as DiffTraj due to differences in their network structures or the absence of the UNet architecture. The Traj-UNet structure in DiffTraj is specifically designed for spatial-temporalmodeling and multi-scale feature fusion, enabling the accurate prediction of noise levels during denoising and resulting in high-quality generated trajectory. It is also noteworthy that satisfactory results can still be accomplished when only generating scattered locations or discarding the Traj-UNet structure. Finally, the conditional version of DiffTraj outperforms the unconditional version (DiffTraj-wo/Con) because it incorporates conditional information into the trajectory generation process. This allows the model to better account for external factors such as traffic conditions, departure time, and regions, which significantly influence human mobility patterns. This result can also be verified by the performance on the pattern indicator, where this indicator significantly outperforms other models.

**Geographic Visualization**. We also visualized the generated results to better present the performance of different generative models. Fig. 2 shows the trajectory distributions generated by baseline methods for Chengdu (Please refer to Fig. 10 and Fig. 11 in **Appendix** D for Xi'an and larger view). From visualizations, we can see that all the generated trajectories show geographic profiles of the city. Notably, DiffTraj and Diff-LSTM generate trajectories almost identical to the original trajectories and significantly surpass the other methods. However, Diff-LSTM performs poorly compared to DiffTraj on sparse roads, suggesting that CNNs are skilled in capturing local and global spatial features, making them more suitable for handling sparse road scenes. In addition, developing a tailor-made UNet architecture is also essential. Comparing Fig. 2(c) and Fig. 2(e), we can observe that the latter is able to generate a visually more realistic trajectory distribution.

### Utility of Generated Data

As the generated trajectory serves downstream tasks, its utility is critical to determine whether the data generation method is indeed practical. In this section, we evaluate the utility of generated trajectory through an inflow (outflow) prediction task, which is one of the important applications of trajectory data analysis [13; 39]. Specifically, we train multiple advance prediction models using the original and generated trajectory separately, and then compare the prediction performance (detail experimental setup refer to **Appendix** C.3). As concluded in Table 2, the performance of the models when trained on the generated data is comparable to their performance on the original data. This result shows that our generative model, DiffTraj, is able to generate trajectory that retain the key statistical properties of the original one, hence making them useful for downstream tasks such as inflow and outflow prediction. However, there is a slight increase in error metrics when using the generated data, implying there's still room for further improvements in trajectory generation. Nevertheless, this result encourages the use of generated, privacy-free alternatives to the original data in future studies related to trajectory data analysis.

    &  &  \\   & Density (\(\)) & Trip (\(\)) & Length (\(\)) & Pattern (\(\)) & Density (\(\)) & Trip (\(\)) & Length (\(\)) & Pattern (\(\)) \\  RP & 0.0698 & 0.0835 & 0.2337 & 0.493 & 0.0543 & 0.0744 & 0.2067 & 0.381 \\ GP & 0.1365 & 0.1590 & 0.1423 & 0.233 & 0.0928 & 0.1013 & 0.2164 & 0.233 \\  VAE & 0.0148 & 0.0452 & 0.0383 & 0.356 & 0.0237 & 0.0608 & 0.0497 & 0.531 \\ TrajGAN & 0.0125 & 0.0497 & 0.0388 & 0.502 & 0.0220 & 0.0512 & 0.0386 & 0.565 \\ DP-TrajGAN & 0.0117 & 0.0443 & 0.0221 & 0.706 & 0.0207 & 0.0498 & 0.0436 & 0.664 \\ Diffwave & 0.0145 & 0.0253 & 0.0315 & 0.741 & 0.0213 & 0.0343 & 0.0321 & 0.574 \\ Diff-scatter & 0.0209 & 0.0685 & – & – & 0.0693 & 0.0762 & – & – \\ Diff-wo/UNet & 0.0356 & 0.0868 & 0.0378 & 0.422 & 0.0364 & 0.0832 & 0.0396 & 0.367 \\ DiffTraj-wo/Con & 0.0072 & 0.0239 & 0.0376 & 0.643 & 0.0138 & 0.0209 & 0.0357 & 0.692 \\ Diff-LSTM & 0.0068 & 0.0199 & 0.0217 & 0.737 & 0.0142 & 0.0195 & 0.0259 & 0.706 \\ DiffTraj & **0.0055** & **0.0154** & **0.0169** & **0.823** & **0.0126** & **0.0165** & **0.0203** & **0.764** \\    Bold indicates the statistically best performance (i.e., two-sided t-test with \(p<0.05\)) over the best baseline.

Table 1: Performance comparison of different generative approaches.

Figure 2: Geographic visualization of generated trajectory in Chengdu (Larger view in **Appendix** D).

### Additional Experiment

**Transfer Learning**. Transfer learning is an essential aspect to investigate in the context of trajectory generation, as it can demonstrate the robustness and generalization capabilities of the proposed DiffTraj framework. In this paper, we pre-train the DiffTraj model in one city, and then continue the training in another city using a different percentage (\(5\% 100\%\)) of data. We also compared these results with only training DiffTraj on different percentages of data. As shown in Fig. 3, 'origin' indicates that transfer learning is not applicable, while 'transfer' indicates applying transfer learning. Notably, even with just \(5\%\) of the data, the transfer learning model achieves a significantly lower error compared to the original one. As the percentage of data increases, the gap between the two models narrows. The results show that the DiffTraj model exhibits strong adaptability and generalization capabilities when applied to different urban scenarios. This allows the model to quickly adapt to new urban contexts and capture the inherent mobility patterns with less data, thereby reducing training time and improving applicability to diverse real-world scenarios.

**Speed up Sampling**. As discussed in Sec. 3.2, the diffusion model requires numerous sampling steps for gradual denoising, resulting in a slow trajectory generation process. By incorporating the sampling speed-up technique outlined in Sec. 4.4, we examine the efficiency of generating \(50 256\) trajectories using a well-trained DiffTraj on two datasets. The results are summarized in Fig. 3, where the X-axis represents the total sample steps after speed-up, and the two Y-axes indicate the time spent and Density error, respectively. All models trained with \(T=500\) diffusion steps consistently yield high-quality trajectories resembling the original distribution. Moreover, the model matches the outcomes of the no skipped steps method at \(T=100\), saving \(81\%\) of the time cost. However, too few sampling steps (\(S<100\)) result in a significant divergence between the generated and real trajectory. This occurs because fewer sample steps lead to more skipped reverse operations, causing Diff-Traj to discard more noise information during denoising. Nonetheless, these results highlight the substantial efficiency improvements achieved by the speed-up methods presented in Sec. 4.4.

## 6 Conclusion

In this work, we propose a new GPS trajectory generation method based on diffusion model and spatial-temporal data mining techniques. This method, named DiffTraj, leverages the data generation ability of the diffusion model and learning from spatial-temporal features by Traj-UNet. Specifically, real trajectories are gradually transformed into random noise by a forward trajectory noising process. After that, DiffTraj adopts a reverse trajectory denoising process to recover forged trajectories from the noise. Throughout the DiffTraj framework, we develop a Traj-UNet structure and incorporate Wide & Deep conditional module to extract trajectory features and estimate noise levels for the reverse process. Extensive experiments validate the effectiveness of DiffTraj and its integrated Traj-UNet. Further experiments prove that the data generated by DiffTraj can conform to the statistical properties of the real trajectory while ensuring utility, and provides transferability and privacy-preserving.

   Task &  &  \\  Methods & AGCRN & GWNet & DCRNN & MTGNN & AGCRN & GWNet & DCRNN & MTGNN \\  MSE & 4.33/4.55 & 4.42/4.50 & 4.45/4.62 & 4.28/4.56 & 4.45/4.70 & 4.64/4.72 & 4.72/5.01 & 4.39/4.77 \\ RMSE & 2.08/2.13 & 2.10/2.12 & 2.11/2.15 & 2.07/2.13 & 2.11/2.16 & 2.15/2.17 & 2.17/2.24 & 2.10/2.18 \\ MAE & 1.49/1.52 & 1.50/1.50 & 1.51/1.53 & 1.48/1.51 & 1.50/1.54 & 1.53/1.54 & 1.53/1.57 & 1.49/1.53 \\   

Table 2: Data utility comparison by inflow/outflow prediction.

Figure 3: Additional Experiment. (a) and (b) Transfer learning; (c) and (d) Speed up sampling.

## 7 Acknowledgments

This work is supported by the Stable Support Plan Program of Shenzhen Natural Science Fund under Grant No. 20220815111111002. This research was partially supported by Research Impact Fund (No. R1015-23), APRC - CityU New Research Initiatives (No.9610565, Start-up Grant for New Faculty of City University of Hong Kong), CityU - HKIDS Early Career Research Grant (No.9360163), Hong Kong ITC Innovation and Technology Fund Midstream Research Programme for Universities Project (No.ITS/034/22MS), Hong Kong Environmental and Conservation Fund (No. 88/2022), SIRG - CityU Strategic Interdisciplinary Research Grant (No.7020046, No.7020074), Tencent (CCF-Tencent Open Fund, Tencent Rhino-Bird Focused Research Fund), Huawei (Huawei Innovation Research Program), Ant Group (CCF-Ant Research Fund, Ant Group Research Fund) and Kuaishou.