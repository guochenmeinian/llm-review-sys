# GTBench: Uncovering the Strategic Reasoning Limitations of LLMs via Game-Theoretic Evaluations

Jinhao Duan\({}^{1}\) Renming Zhang\({}^{2*}\) James Diffenderfer\({}^{3}\) Bhavya Kailkhura\({}^{3}\)

**Lichao Sun\({}^{4}\) Elias Stengel-Eskin\({}^{5}\) Mohit Bansal\({}^{5}\) Tianlong Chen\({}^{5,6,7}\) Kaidi Xu\({}^{1}\)\({}^{1}\)**

\({}^{1}\)Drexel University \({}^{2}\)Boston University \({}^{3}\)LLNL \({}^{4}\)Lehigh University

\({}^{5}\)UNC Chapel Hill \({}^{6}\)MIT \({}^{7}\)Harvard University

 Equal contribution.Correspondence to: Tianlong Chen tianlong@mit.edu, Kaidi Xu kx46@drexel.edu

###### Abstract

As Large Language Models (LLMs) are integrated into critical real-world applications, their strategic and logical reasoning abilities are increasingly crucial. This paper evaluates LLMs' reasoning abilities in competitive environments through game-theoretic tasks, e.g., board and card games that require pure logic and strategic reasoning to compete with opponents. We first propose GTBench, a language-driven environment composing 10 widely-recognized tasks, across a comprehensive game taxonomy: complete versus incomplete information, dynamic versus static, and probabilistic versus deterministic scenarios. Then, we \(\) Characterize the game-theoretic reasoning of LLMs; and \(\) Perform LLM-vs.-LLM competitions as reasoning evaluation. We observe that \(\) LLMs have distinct behaviors regarding various gaming scenarios; for example, LLMs fail in complete and deterministic games yet they are competitive in probabilistic gaming scenarios; \(\) Most open-source LLMs, e.g., CodeLlama-34b-Instruct and Llama-2-70b-chat, are less competitive than commercial LLMs, e.g., GPT-4, in complex games, yet the recently released Llama-3-70b-Instruct makes up for this shortcoming. In addition, code-pretraining greatly benefits strategic reasoning, while advanced reasoning methods such as Chain-of-Thought (CoT) and Tree-of-Thought (ToT) do not always help. We further characterize the game-theoretic properties of LLMs, such as equilibrium and Pareto Efficiency in repeated games. Detailed error profiles are provided for a better understanding of LLMs' behavior. We hope our research provides standardized protocols and serves as a foundation to spur further explorations in the strategic reasoning of LLMs.

## 1 Introduction

Large Language Models (LLMs) are increasingly being integrated into critical real-world applications, such as cybersecurity (Ameri et al., 2021; Aghaei et al., 2022), decision science (Jiang et al., 2023), and finance (Wu et al., 2023). These areas involve advanced strategic thinking and logical reasoning skills, including the ability to foresee possible dangers and weaknesses (Yao et al., 2024; Duan et al., 2024), systematically examine difficulties, and make informed decisions based on provided evidence. However, evaluation environments that thoroughly assess these situations are not sufficiently explored.

There has been an emerging trend where LLMs are evaluated in various interactive role-playing environments, including collaborative environments such as CAMEL (Li et al., 2023), ReConcile (Chen et al., 2023), and competition environments such as Diplomacy (Bakhtin et al., 2022), Werewolf (Xu et al., 2023), Avalon (Light et al., 2023; Stepputtis et al., 2023), multi-agent debate (Liang et al., 2023; Du et al., 2023; Chan et al., 2023; Xiong et al., 2023), board and card games (Duan et al.,2024b). By engaging LLMs in simulated scenarios, role-playing-based environments offer useful potential for analyzing the cognitive reasoning abilities of LLMs. However, the extensive background and intricate details involved in role-play-based games dilute the pureness of logic and strategic reasoning that is typically found in game-theoretic tasks. Additionally, the evaluation is primarily verbal as it hinges on spoken or written exchanges between the LLMs. This could mask instances where LLMs might _lack concrete reasoning abilities but navigate the scenario effectively through the proficient use of language_.

_Why are game-theoretic tasks unique and necessary for LLM reasoning evaluation?_ Game-theoretic tasks are typically conceptualized based on prevalent trade-offs and dilemmas manifesting in real-life scenarios and are designed to be easy to understand yet require difficult skills to be mastered. In contrast to the rich narrative contexts afforded in verbal- or role-playing-based games, e.g., Werewolf (Xu et al., 2023a) and Avalon (Light et al., 2023), the reality of game-theoretic games such as Chess and Go involve: \(\) pure logic and strategic reasoning without the added complexity of backgrounds or character roles; \(\) embracing rigorous rules with well-defined action/state space, which allow for an in-depth examination of the strategic reasoning of LLMs.

Hence, in order to spur more research in the LLM Game-Theoretic evaluation domain, we propose GTBench, an environment consisting of 10 widely recognized game-theoretic tasks, across a comprehensive taxonomy of games, e.g., complete- (Tic-Tac-Toe, Connect-4, Breakthrough) versus incomplete-information (Kuhn Poker, Liar's Dice) gaming, deterministic (Nim) versus probabilistic (Negotiation, Pig) gaming, static versus dynamic (Iterated Prisoner's Dilemma, Blind Auction) gaming. These environments require a variety of abilities including board strategy, collaboration, auction, and bidding. There are two key issues investigated in this paper:

**Characterizing Strategic Reasoning of LLMs:**_How LLMs will perform when facing various game-theoretic scenarios? How do they perform compared to conventional solvers? How do essential factors, e.g., pertaining, parameter sizes, and reasoning methods, affect strategic reasoning?_

**LLM-vs-LLM Competitions as New Reasoning Evaluation:**_A new automated and adaptive benchmark that can be effective in evaluating reasoning errors even for future LLMs._

To address these crucial problems, we conduct experiments over two configurations: (a) **LLM-vs-Conventional** where conventional solvers such as optimization- or search-based solvers, e.g., Monte-Carlo Tree Search (MCTS) (Chaslot et al., 2008), are taken as the opponent of LLMs; (b) **LLM-vs-LLM** where two LLMs compete directly to reveal the reasoning limitations in an automated manner. We find that: \(\) LLMs almost always fail when playing against simple MCTS opponents in complete and deterministic gaming scenarios (Section 4.1), while \(\) LLMs remain competitive in incomplete and probabilistic scenarios (Section 4.2); \(\) Code-pretraining benefits game-theoretic

Figure 1: The overall schematic of GTBench. There are three main components from _right_ to _left_: **Environments** (c) for game hosting, observation providing, and action execution; **Prompt Adapter** (b) for converting observation to prompt and extracting actions from participantsâ€™ generations; **Participants** (a) for reasoning and action generation.

reasoning, e.g., CodeLlama-34b-Instruct (Roziere et al., 2023) achieves comparable results as GPT-3.5-turbo, and significantly outperforms LLama-2-70b-chat (Touvron et al., 2023) (Section 4.3); \(\) Advanced reasoning methods, such as Chain-of-Thought (CoT) (Wei et al., 2022), Self-Consistent CoT (SC-CoT) (Wang et al., 2022), Tree-of-Thought (ToT) (Yao et al., 2024) are not always helpful; \(\) Most open-source LLMs are less competitive than commercial LLMs in games with complex rules and large action/state space, while the recently released Llama-3-70b-Instruct (Meta, 2024) makes up for this shortcoming. The interfaces of GTBench leaderboard can be found in Appendix A11. Our contributions can be summarized as the following:

* **LLM Game-Theoretic Evaluation (GTBench):** An LLM environment supporting 10 well-recognized tasks across comprehensive game-theoretic taxonomy, is presented to spur future work for the community. The code and leaderboard will be public and continuously updated for future reasoning agents and LLMs.
* **Essential Factors for the Strategic Reasoning of LLMs:** We investigate how essential factors, e.g., parameter size, code-pretraining, and reasoning methods, affect strategic reasoning. A detailed error profile is provided for a better understanding of LLMs' behaviors.
* **Characterize the Game-Theoretic Properties of LLMs:** We characterize distinct LLM behaviors when facing different game-theoretic scenarios, such as LLMs fail in complete-information and deterministic gaming yet remain competitive in probabilistic gaming. We further study the equilibrium and Pareto efficiency during the gameplay.

## 2 Background and Problem Definition

### Background and Related Work

**LLM-as-Agent Evaluation.** Several studies have been conducted to measure the effectiveness of LLMs as agents in recent years. Hausknecht et al. (2020) carried out an extensive study to evaluate the performance of LLMs in interactive fiction games. Zhu et al. (2023) provides a valuable dataset for finetuning LLMs to improve usefulness in the strategic game Dungeons & Dragons. GRUE (Ramamurthy et al., 2023) uses reinforcement learning-based metrics to benchmark the performance of generation tasks in six different languages. Gandhi et al. (2023) test the use of LLMs as a broker with human contestants in the negotiation game "Deal or No Deal". A few studies have explored the use of text-based games as a means of facilitating learning in such environments. ALFWorld (Shridhar et al., 2020) introduced a novel virtual environment that allows agents to acquire learning in a text-based environment while executing in a visual environment. The environment was developed in conjunction with Building Understanding in Text world via Language for Embodied Reasoning (BUTLER) agent, which can acquire abstract text knowledge in the text world. Similarly, TextWorld (Cote et al., 2019) is introduced as an environment that enables RL agents to play text games. Wang et al. (2022) proposed ScienceWorld, a benchmark used for evaluating agents' reasoning ability, and their findings showed that transformer-based models are not effective at reasoning in novel contexts. MTBench (Zheng et al., 2024) introduces LLM-as-a-Judge where GPT-4 (Achiam et al., 2023) is utilized as a judge to evaluate the quality of LLM generations. It indicates that GPT-4 shares close criteria as humans. There have been works evaluating LLMs in solving real-world tasks, such as graph reasoning (Besta et al., 2023), WebShop (Yao et al., 2022), AgentBench (Liu et al., 2023) for pragmatic missions, MINT (Wang et al., 2023) for tool utilization.

**Multiple LLMs-as-Agnents in Gaming.** A key research area is the competition and collaboration between LLMs. Many studies examine LLMs' strategic reasoning and performance, using evaluation frameworks to assess multiple LLM agents in individual games, such as: Social deduction or deception games (Xu et al., 2023, 20; O'Gara, 2023; Light et al., 2023), diplomacy games (Mukobi et al., 2023; ; FAIR), negotiation games (Abdelnabi et al., 2023; Davidson et al., 2023), coordination and cooperation games (Akata et al., 2023), and Minecraft (Gong et al., 2023; Wang et al., 2023; Fan et al., 2022). These works not only provide evaluation frameworks for games and demonstrate the flexibility of LLMs to a variety of gaming tasks but some provide meaningful datasets for fine-tuning, policies for reinforcement learning to produce better strategies, or evaluate the strategic reasoning of LLMs. However, many of these standalone works quantify either individual or a subset of desirable strategic reasoning capabilities of LLMs, such as negotiation, deception, or coordination. Further, they often evaluate these capabilities for LLMs using one or two games which may produce less robust assurances of LLM abilities.

We make an additional crucial contribution in this line of work by measuring strategic reasoning capabilities with games that are not found in the existing unified benchmark suites (Zhang et al., 2024), such as clembench (Chalamalasetti et al., 2023) focusing on conversational agents over non-zero-sum games and LMRL-Gym (Abdulhai et al., 2023) on verbal reinforcement learning tasks. (Chen et al., 2024) and Duan et al. (2024) also proposes multi-agent strategic reasoning evaluation. However, they overlooked the analysis of LLM behaviors in response to different game-theoretic scenarios and their associated properties. Differently, GTBench seeks to provide a unified suite of games that are carefully curated to (1) evaluate a comprehensive collection of strategic reasoning abilities for a given agent and (2) enable competition-based scenarios (i.e., LLM agent-1 vs LLM agent-2) allowing for competition-based comparisons of strategic reasoning capabilities by LLM-based agents.

### Problem Definition

**Notation: Gameplay.** We formulate the gameplay as a Markov Decision Process \((,,,)\) under a given game environment, among the alternating interaction of two participants. This process composes of an infinite state space \(\), an infinite action space \(\), the participants \(=\{_{1},_{2}\}\), and an observation space \(\). Considering the decision of \(_{i}\) (\(i=1,2\)) at the \(t\)-th step of the process, we denote by \(s_{t}\) the state that \(_{i}\) are placed and \(o_{t}\) the observation that \(_{i}\) are observing. We assume \(_{i}\) follows policy \(_{_{i}}(a_{t}|s_{t},o_{t})\) for state transition \(:\), where \(a_{t}\) is the action sampled by \(_{_{i}}\) under conditions \(s_{t}\) and \(o_{t}\). \(_{i}\) is determined by the implementation by \(_{i}\), e.g., optimization-based solver, LLM-driven agents, which will be discussed in Section 3.2 in detail. In this way, the two-participate gameplay can be represented as \((s_{0},a_{0},s_{1},a_{1},s_{2},,s_{n})\), where \(s_{0}\) is the initial state and \(s_{n}\) is a terminal state, i.e., end of the game. The progress is driven by the alternating execution of actions sampled by participants. Please refer to Section 3.1 and Appendix A2 for all the supported games with the corresponding actions and observations.

**Evaluation Metric: Normalized Relative Advantage.** We introduce **Normalized Relative Advantage (NRA)**, denoted \((_{i},_{o},f_{s})\), to measure to relative advantage of \(_{i}\) when competing against \(_{o}\), under the score calculation \(f_{s}\):

\[(_{i},_{o},f_{s})=f_{s}( _{i},m)-_{m}f_{s}(_{o},m)}{_{m}f_{s}(_{i},m)+_{m}f_{s}(_{o},m)},\]

where \(f_{s}(_{i},m)\) refers to the score earned by \(_{i}\) at the \(m\)-th match (\(1 m K\), \(K\) is the number of performed matches):

* For zero-sum games, e.g., \(\), \[f_{s}(M_{i},m)=1,&_{i}\\ 0,&_{i}\\ 0.5,&_{i}_{o}\]
* For non-zero-sum games, e.g., \(\), \(f_{s}(M_{i},m)\) is the rewards earned by \(_{i}\) at the \(m\)-th match. \((_{i},_{o},f_{s})\) is naturally normalized to \([-1,1]\), providing an interpretable meaning regarding the performance of \(_{i}\): \((_{i},_{o},f_{s})>0\) means \(_{i}\) is better than \(_{o}\); \((_{i},_{o},f_{s})<0\) means \(_{i}\) is worse than \(_{o}\); \((_{i},_{o},f_{s})=0\) means \(_{i}\) is as competitive as \(_{o}\).

    & &  &  \\ 
**Game** & Zero- & First-player & \(\) Complete & \(\) Dynamic & \(\) Probabilistic & \(\) Probabilistic & \(\) Deterministic & Board Strategy & Bids & Collaboration & Bluff & Math

* The iterated version of Privacyâ€™s Dalemma allows participants access to the actions made by their opponents in the past round, achieving implicit collaboration.
* Inapplicable due to complex combination and dynamic environment.

Table 1: Game environments explored in GTBench.

**Evaluation Metric: Elo Rating.** Following the conventional rating mechanism in the real world, e.g., Chess, we employ the popular **Elo Rating**(Elo, 1960) for calculating the relative skill levels of players in zero-sum games. Please refer to Appendix A7 for more details of Elo rating.

## 3 GTBench: Game-Theoretic Evaluation of LLMs

GTBench is a language-driven environment, making participating agents compete against each other in a game-theoretic manner. It is designed to be flexible and extensible, providing unified interfaces to participants and games, and supporting various multi-turn-based games which can be extended in the future. The overall framework is presented in Figure 1. There are three main components: _Environment_, _Prompt Adapter_, and _Participant_. Please refer to Appendix A1 for a detailed introduction of each component.

### Taxonomy of Game-Theoretic Tasks

The chosen tasks and their detailed configurations are presented in Table 1. To comply with the common taxonomy (Lanctot et al., 2019) of game-theoretic tasks and provide diverse gaming scenarios, GTBench supports 10 different gaming environments, including Tic-Tac-Toe, Connect-4, Kuhn Poker, Breakthrough, Liar's Dice, Blind Auction, Negotiation, Nim, Pig, Iterated Prisoner's Dilemma, covering 6 mainstream game-theoretic configurations, including _complete-_ and _incomplete-information_ gaming, _dynamic_ and _static_ gaming, and _probabilistic_ and _deterministic_ gaming. The preferred abilities of each game could be characterized as the combination of _board strategy_, _bids_, _collaboration_, _bluff_, and _math_. Please refer to Appendix A2.1 for the rules of each game and Appendix A2.2 for an explanation of game-theoretic taxonomy.

### Participants and Protocols

**Conventional Agents** output actions through a conventional optimization or searching process. To provide fair comparisons, we employ the powerful Monte Carol Tree Search (MCTS) (Chaslot et al., 2008) as the conventional agent for most of the games, with the number of simulations as 1000. Since Iterated Prisoner's Dilemma is dynamic gaming with very limited action space, i.e., \(<\)Testify\(>\) or \(<\)Silent\(>\), we utilize the more popular Tit-for-Tat (Axelrod, 1981) strategy, which simply repeating the opponent's last action, as the conventional agent. We also include Random Agent that randomly selects action at each turn, serving as a baseline and sanity check. Please refer to Appendix A3.1 for more details about MCTS Agent and Tit-for-Tat Agent.

**LLM-Driven Reasoning Agent** consists of backbone LLMs and reasoning paradigms. For reasoning schemes, we consider the following reasoning paradigms as they are widely known to be effective for general reasoning tasks: _Prompt_: Directly Prompt LLMs to generate responses, without additional reasoning steps; _Chain-of-Thought (CoT)_(Wei et al., 2022): CoT Agent prompts LLMs by thinking step by step; _Self-Consistent CoT_(Wang et al., 2022): SC-CoT Agent prompts LLMs by generating multiple step-by-step thinking trajectories and performing majority voting to get the final response. The number of trajectories is set to 5 in this paper; _Tree-of-Thought (ToT)_(Yao et al., 2024): ToT Agent prompts LLMs to generate responses by incorporating exploration and deliberate decision-making, e.g., self-evaluation. The number of sequences for both answer generation and answer evaluations is set to 3.

**Prompt Templates.** Prompts are designed to be modular, consisting of four individual components: _System Prompt_, _Head Prompt_, _Observation Prompt_, and _Reasoning Prompt_. Reasoning prompts, e.g., CoT/ToT, are designed to only focus on instructing LLM how to think, regardless of the game environment. Thus, they could be automatically adapted when adding a new game. Please refer to Appendix A5 for the detailed prompts and observations for each game and agent.

**Sanity Check.** We provide the task completion rates of all the LLMs and reasoning agents in Appendix A5.6. We show that all the LLM agents achieve \( 90\%\) completion rate, indicating that the prompts are properly configured and LLMs are capable of following instructions to finish the game.

## 4 Are LLMs Capable of Strategic Reasoning?

In this section, we evaluate the strategic reasoning capabilities of LLMs by conducting experiments among conventional solvers and LLM-driven agents.

**Experimental Settings.** We consider well-recognized LLMs such as commercial LLMs: GPT-3.5-turbo-1106 and GPT-4-0613 (Achiam et al., 2023), and open-source LLMs: Llama-3-70b-Instruct (Meta, 2024), Deepseek-LLM-67b-chat (Bi et al., 2024), Llama-2-70b-chat (Touvron et al., 2023), CodeLlama (Roziere et al., 2023), and Mistral-7b-Orca (Jiang et al., 2023; Mukherjee et al., 2023). For all the LLMs, the temperature is set to 0.2 and the max number of generated tokens is 1024. For each competition, we run 50 valid matches. The final performance is measured by the averaged NRA over the 50 valid matches. To mitigate the first-player advantage, we have each participant take the first turn in 25 matches.

### Complete and Deterministic Gaming

There are four complete and deterministic tasks supported in GTBench: Tic-Tac-Toe, Connect-4, Breakthrough, and Nim. We compare LLM-driven agents with Random Agent and MCTS Agent. Results are summarized in Figure 2. In general, we show that all LLMs achieve substantial relative advantages when competing against the Random Agent. Among all the agents, GPT-4 w/ CoT reasoning achieves the highest NRA. For open-source LLMs, Llama-3-70b-Instruct outperforms other open-source LLMs, achieving comparable capabilities as GPT-4.

However, when competing against the MCTS Agent, all the LLM agents equipped with various reasoning methods achieve NRA as \(-1\), meaning that LLM agents can barely win even a single match. This is because for board games with moderate action/state space such as the four involved complete and deterministic games in GTBench, MCTS agents with a sufficient number of simulations can achieve near-optimal strategies. Consequently, LLMs are not competitive in complete and deterministic games.

### Probabilistic and Dynamic Gaming

Figure 3: The game-wise NRA of LLMs when against MCTS/ITf Agents and Random Agents, over incomplete and probabilistic scenarios. Error bars are obtained over different reasoning methods. Green and gray lines mean the maximum NRA achieved by LLM agents.

Figure 2: The NRA of state-of-the-art LLM-driven reasoning agents when against MCTS Agents and Random Agents, over complete and deterministic scenarios. Red and gray lines mean the maximum NRA achieved by LLM agents.

There are five probabilistic game-theoretic gaming tasks: Kuhn Poker, Liar's Dice, Blind Auction, Negotiation, Pig, and one dynamic task: Iterated Prisoner's Dilemma. We group these games together as they all involve stochasticity in the gameplay, which is essentially different from complete and deterministic games. The Random Agent as the opponent is omitted for both Negotiation and Iterated Prisoner's Dilemma because the Random Agent rarely chooses to collaborate, resulting in meaningless evaluation. Results are summarized in Figure 3. When competing against the MCTS Agent, it is shown that Liar's Dice shares a similar trend as the complete and deterministic scenarios (Figure 2), where LLM-driven agents achieve near \(-1\) NRA. This is because the 2-player Liar's Dice has very limited stochasticity, making the gameplay tend to be complete information. For other tasks, we found that LLMs do not always fail. We observe that the NRA of LLM agents is close to 0 over all the tasks, indicating that they are equally competitive as conventional solvers or even better (e.g., Kuhn Poker where GPT-4 outperforms MCTS Agent).

### LLM-vs.-LLM Competition

We investigate whether popular LLMs remain competitive in game-theoretic scenarios. Specifically, we take GPT-3.5-turbo with Prompt Agent as the _common opponent_ and make other LLM-driven agents compete against it. Please refer to Figure A6 for the full leaderboard evaluated by NRA. The Elo rating results are placed in Table 6. In general, GPT-4 is the most powerful LLM in strategic reasoning among all the examined LLMs. Moreover, Llama-3-70b-Instruct achieves comparable performances as GPT-4 and outperforms GPT-3.5-turbo. Here we break the results into 3 takeaways:

**Code-Pretraining Benefits Game-Theoretic Tasks.** In Table 2, we show code-pretrained LLMs, e.g., CodeLlama-34b-Instruct and Deepseek-Coder-6.7b-Instruct, significantly outperform larger chat LLMs, e.g., Llama-2-70b-chat and Deepseek-LLM-67b-chat. These code-pretrained LLMs have less than half of the parameters, suggesting that code-pretraining benefits game-theoretic tasks. This verifies recent discoveries where code-pretraining benefits (Madaan et al., 2022; Liang et al., 2022; Ma et al., 2023).

**Advanced Reasoning Methods Do Not Always Help.** We observe that advanced reasoning methods may lead to worse results in game-theoretic scenarios. To make it more clear, we present the averaged NRA obtained by reasoning methods across different LLMs when against Random Agent in Figure 4. In general, only Mistral-7b-Orca has a substantial improvement when equipped with CoT reasoning while advanced reasoning leads to worse results for other LLMs.

In Table 3, we present the results when against GPT-3.5-turbo w/ Prompt Agent. We show that advanced reasoning benefits powerful LLMs, e.g., GPT-3.5-turbo, while it results in worse results for other LLMs. It suggests that advanced reasoning is a

  
**Model** & **avg. NRA in** & **avg. NRA in** & **avg. NRA in** \\  & **Det. Games** & **Prob.** & **avg. NRA** \\  GPT-4 & 0.09 & 0.15 & 0.13 \\ Llama-3-70b-Instruct & -0.07 & 0.11 & 0.04 \\  Llama-2-70b-chat & -0.25 & -0.17 & -0.20 \\ CodeLlama-34b-Instruct & **-0.05** & **0.02** & **-0.01** \\  Deepseek-LLM-7b-chat & -0.09 & -0.08 & -0.08 \\ Deepseek-LLM-67b-chat & **0.10** & -0.17 & -0.05 \\ Deepseek-Coder-6.7b-Instruct & -0.14 & **0.07** & **-0.03** \\   

Table 2: Code-pretraining benefits strategic reasoning. Gray rows are code-pretrained LLMs.

Figure 4: The NRA of LLM agents when competing against Random Agent. Advanced reasoning does not always result in better results.

  
**Component** & **Model** & **Reasoning** & **avg. NRA \(\)** \\   & GPT-3.5-turbo & Prompt & 0.00 \\   & CoT-3.5-turbo w/ Prompt Agent & Prompt & 0.04 \\   & Llama-3.70b-Instruct & CoT & **0.07** \\   & GPT-4 & Prompt & 0.13 \\   & CoT-4 & CoT & 0.13 \\   & CoT-4Llama-34b-Instruct & Prompt & -0.01 \\   & CoT-4 & Compt & -0.09 \\  GPT-4 w/ Prompt Agent & CoT-4 & Compt & -0.01 \\   & Llama-2.70b-chat & Prompt & -0.10 \\   & CoT & -0.23 \\   

Table 3: The NRA of LLM agents w/ CoT reasoning. Cyan cells mean CoT results in better performance. Magenta cells mean CoT results in worse performance.

double-edged sword: \(\) powerful LLMs are capable of leveraging advanced reasoning to achieve better results; \(\) advanced reasoning may also impose reasoning errors and risks during the inference of ordinary LLMs. In Appendix A.8, we further examine five different CoT strategies over the GPT-3.5-turbo model to mitigate the effect brought by prompt sensitivity, along with some failure cases presented. These CoT prompts resulting in different performances are all worse than the naive Prompt Agent.

**Most Open-source LLMs are Less Competitive than Commercial LLMs in Complex Games.** We observe that most of open-source LLMs such as Llama-2-70b-chat and CodeLlama-34b-Instruct are not good at games with complex rules and board states. In Table 4, we present the average NRA when including and excluding Breakthrough3. It is shown that both Llama-2-70b-chat and CodeLlama-34b-Instruct fail in Breakthrough, resulting in worse NRA scores than GPT-4. However, we found that the recently released Llama-3-70b-Instruct (Meta, 2024) has a significant performance in Breakthrough. This indicates that open-source LLMs achieve comparable capabilities when dealing with complex tasks and environments as commercial LLMs.

### Error Profiles

We introduce the most prevalent mistake patterns observed across different games, comprising _Misinterpretation_, _Factual Inaccuracies_, _Overconfidence_, _Calculation Mistakes_, and _Endgame_:

**Misinterpretation** denotes the misinterpretation of the game's current state by LLMs, including errors like misattributing piece ownership and failing to recognize vacant spots on the board. **Factual Errors** refer to situations where the player has a reasonable plan but their actions do not align with their plan. For instance, in Breakthrough, GPT-4 w/ CoT agent plans to fend off frontal attacks by the opponent, which is reasonable. However, it takes rear pieces to achieve that, which is impossible. **Over-confidence** describes a scenario where a player overlooks potential risks in pursuit of greater rewards. **Calculation Errors** refer to errors that occur in arithmetic, such as calculating XOR in Nim. **Endgame Misdetection** means a failure to recognize immediate win/lose situations, e.g., a player fails to recognize a potential winning move. Demonstrations of each mistake pattern are presented in Appendix A.9.

In Table 5, we present the quantitative results regarding these error patterns. It is obtained from GPT-4 w/ CoT agent when playing against conventional solvers, e.g., MCTS/TFT agent, as the opponent. We manually examined a total of 157 turns (50 matches, with 5 turns per match). We observe that LLM agents are capable of generating reasonable planning/strategies. However, they have difficulties in selecting the correct actions to align with their thoughts. Also, LLMs miss endgame situations, leading to a failure to recognize winning and losing moves.

  
**Model** & **Tie-Tac-Toe** & **Breakthrough** & **Blind Auction** & **Kuhn Poker** & **Llarâ€™s Dice** & _avg. Elo_ \\  GPT-4 & 1554.34 & 1667.11 & **1581.94** & 1479.87 & 1676.70 & **1591.99** \\ Llama-3-70b-Instruct & 1371.68 & **1669.42** & 1524.11 & **1625.46** & **1694.64** & 1577.06 \\ GPT-3.5-turbo & 1579.80 & 1576.37 & 1514.27 & 1441.80 & 1459.26 & 1514.30 \\ CodeLlama-34b-Instruct & **1589.94** & 1398.10 & 1533.48 & 1414.57 & 1374.40 & 1462.10 \\ Llama-2-70b-chat & 1479.08 & 1320.42 & 1484.32 & 1521.82 & 1485.00 & 1458.13 \\ Mistral-7B-Instruct & 1440.15 & 1338.57 & 1361.89 & 1516.48 & 1310.00 & 1393.42 \\   

Table 6: The Elo rating results of LLM-vs.-LLM experiments.

  
**Taxonomy** & GPT-4 &  Llama-3- \\ 70b-Instruct \\  &  CodeLlama- \\ 34b-Instruct \\  & 
 Llama-2- \\ 70b-chat \\  \\ 
**w Breakthrough** & 0.13 & 0.04 & -0.01 & -0.20 \\
**w/o Breakthrough** & 0.11 (+0.02) & -0.01 (+0.05) & 0.08 (+0.09) & -0.18 (+0.02) \\   

Table 4: The average NRA of LLM-driven agents when Breakthrough is included and excluded.

    &  \\   &  Endgame \\ Misdetection \\  &  Mis- \\ interpretation \\  &  Over- \\ confidence \\  &  Calculation \\ Error \\  & 
 Factual \\ Error \\  \\  GPT-4 & 33.33 & 9.80 & 15.69 & 9.80 & 45.10 \\   

Table 5: Quantitative results of error patterns.

## 5 The Game-Theoretic Properties of LLMs

**Nash Equilibrium with Regret.** In game theory, being close to a Nash Equilibrium (Nash Jr, 1950) indicates that the strategies chosen by the players are near to optimal. It has been popular to approximate Nash Equilibrium with Regret4(Johanson et al., 2012; Nisan and Noti, 2017; Zinkevich et al., 2007). In Figure 4(a), we present the regret values of LLMs on Blind Auction and Iterated Prisoner's Dilemma. Please refer to Appendix A.10 for how regret values are calculated for these two tasks. For Blind Auction, GPT-4 shows lower Regret, indicating achieving closer to optimal solutions than other LLMs. However, in Iterated Prisoner's Dilemma, CodeLlama-34b-Instruct exhibits lower regret compared to GPT-4. Through human examination, we found that this is because GPT-4 tends to \(<\)Silent\(>\) more frequently, whereas Codellama has a significantly higher probability of \(<\)Testify\(>\). This discrepancy may be due to the human preference alignment in GPT-4, such as a higher emphasis on morality (Pan et al., 2023) or maximizing system reward5, which makes GPT-4 less likely to \(<\)Testify\(>\).

**Pareto Efficiency.** We study Pareto Efficiency in two games: Negotiation and (Iterated) Prisoner's Dilemma. In Figure 4(b), we count all agreements reached by participants and record the values attributed to each based on the agreed division. Most agreements result in substantial values for both participants, though some LLMs, like Llama-2-70b-chat and CodeLlama-34b-Instruct, may accept unfair resource divisions. In contrast, GPT-4 and Mistral struggle to reach agreements and tend to negotiate for Pareto improvements. A repeated game is a standard game that is played multiple times by the same players, with each player is able to observe the history of past plays (Aumann et al., 1995; Akata et al., 2023). In Figure 4(c), we investigate the Pareto Improvement in Iterated Prisoner's Dilemma and ordinary Prisoner's Dilemma, i.e., each round is played individually. The Pareto Improvement is observed in the repeated-game scenario during the rounds, indicating that LLMs are capable of leveraging history to adjust their strategies.

## 6 Conclusion

This work investigated LLMs' strategic and logical reasoning abilities under competitive scenarios. To achieve this, we created a broad evaluation scope by considering various classic and LLM-based gaming agents and \(10\) representative games. We conducted the benchmark study of game-theoretic evaluations for LLMs, shedding light on their reasoning performance. Our extensive evaluations revealed insightful LLMs' gaming behavior, such as their intrinsic failure in complete and deterministic games, impressive reasoning in incomplete and probabilistic games, and benefiting from code-generation pertaining and appropriate prompt designs.

LimitationsThis research prompts LLMs to generate actions regarding various game scenarios, relying on pre-defined prompt templates. Thus, the results may suffer from certain variances introduced by prompt sensitivities. Although the introduced games are popular, their actions/state

Figure 5: Game-theoretic properties. The results are obtained when competing against GPT-3.5-turbo w/ Prompt Agent as the opponent. In (b), each dot \((x,y)\) represents an agreement in a resource distribution with Player 1 obtaining reward \(x\) and Player 2 obtaining reward \(y\). In (c), the system reward is calculated by the sum of the payoffs of all players.

space is limited, which may not be well-distinguished for LLMs in the same skill levels. The generated actions may be illegal due to the incapabilities of the following instructions.

Impact StatementsThis paper examines the game-theoretic task proficiency of AI models. We acknowledge concerns about models becoming autonomous entities with their own objectives, especially in deception or negotiation scenarios. It's important to note that our research measures the current capabilities of models, rather than enhancing their abilities. We do not train AI models to be competent in game theory tasks or to bluff or defect. Instead, we assess existing competencies, contributing to a deeper understanding that can inform innovative measures against potential risks. We believe our work paves the way for responsible and effective AI safety.