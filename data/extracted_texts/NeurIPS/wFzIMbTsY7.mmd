# Decision Mamba: Reinforcement Learning via Hybrid Selective Sequence Modeling

Sili Huang\({}^{1}\)  Jifeng Hu\({}^{2}\)  Zhejian Yang\({}^{3}\)  Liwei Yang\({}^{4}\)  Tao Luo\({}^{5}\)  Hechang Chen\({}^{6}\)  Lichao Sun\({}^{7}\)  Bo Yang\({}^{8}\)

\({}^{1,8}\)Key Laboratory of Symbolic Computation and Knowledge Engineering of Ministry of Education

\({}^{1,2,3,6}\)School of Artificial Intelligence, Jilin University, China

\({}^{4,5}\) Institute of High Performance Computing, Agency for Science, Technology and Research, Singapore

\({}^{7}\)Lehigh University, Bethlehem, Pennsylvania, USA

Corresponding Author. Bo Yang and Hechang Chen.

###### Abstract

Recent works have shown the remarkable superiority of transformer models in reinforcement learning (RL), where the decision-making problem is formulated as sequential generation. Transformer-based agents could emerge with self-improvement in online environments by providing task contexts, such as multiple trajectories, called in-context RL. However, due to the quadratic computation complexity of attention in transformers, current in-context RL methods suffer from huge computational costs as the task horizon increases. In contrast, the Mamba model is renowned for its efficient ability to process long-term dependencies, which provides an opportunity for in-context RL to solve tasks that require long-term memory. To this end, we first implement Decision Mamba (DM) by replacing the backbone of Decision Transformer (DT). Then, we propose a Decision Mamba-Hybrid (DM-H) with the merits of transformers and Mamba in high-quality prediction and long-term memory. Specifically, DM-H first generates high-value sub-goals from long-term memory through the Mamba model. Then, we use sub-goals to prompt the transformer, establishing high-quality predictions. Experimental results demonstrate that DM-H achieves state-of-the-art in long and short-term tasks, such as D4RL, Grid World, and Tmaze benchmarks. Regarding efficiency, the online testing of DM-H in the long-term task is 28\(\) times faster than the transformer-based baselines.

## 1 Introduction

Large transformer models  have achieved notable successes across a variety of domains, including text , image , and audio . In the field of reinforcement learning (RL), large transformer models can treat RL tasks as a type of sequential prediction problem and have shown impressive results with offline training . However, these methods lack self-improvement when used in online environments, where online environments could differ from offline training. To overcome this, in-context RL has been proposed, which enables continued policy improvement .

Recent works demonstrated that in-context RL methods can automatically improve online performance by providing prompt conditions called across-episodic contexts . The construction of the across-episodic context is flexible and easy to implement, such as multiple historical trajectories arranged in ascending order of returns . Although no gradient updates are required for self-improvement, current in-context RL still suffers from high computational costs on long-term tasks . This arises from (1) the quadratic complexity of the self-attention mechanism and (2) the multiplicative growth of the long-term sequence caused by across-episodic contexts.

Facing the challenge of handling long-term sequences, a novel foundation model called Mamba has attracted widespread attention for its ability to capture long-term dependencies with linear computational costs [17; 6]. Mamba is a state space model-based framework with good potential in natural language processing and vision tasks . Motivated by the success of Mamba in language and vision modeling, it is appealing that we can also transfer this success to RL tasks. Therefore, a natural question arises:

_"Can Mamba boost in-context RL with both effectiveness and efficiency on long-term tasks?"_

Taking the famous in-context RL method Decision Transformer (DT)  as an example, we replace its transformer backbone with a Mamba backbone. Regarding efficiency, there is no doubt that Mamba is superior to transformers as the task length increases because Mamba uses a data-dependent selection mechanism that computes independently on each input of sequences . Compared with the attention mechanism that computes input pairs, the data-dependent selection mechanism makes it easier for Mamba to handle long sequences but also introduces additional independence assumptions. In RL tasks, since there is a sequential relationship between states rather than independence, the attention mechanism may be intuitively more suitable for capturing the information between states, thereby outperforming Mamba in effectiveness.

To this end, instead of implement a Decision Mamba (DM) that simply replaces the backbone of DT, we propose the Decision Mamba-Hybrid (DM-H) with the merits of transformers and Mamba in high-quality prediction and long-term memory. Specifically, the Mamba model first generates sub-goals, represented by a vector, based on long-term contexts. Then, we combine the sub-goal and short-term contexts as a prompt condition to the transformer. The setting of sub-goals enables DM-H to leverage Mamba's ability to efficiently recall long-term contexts while using the transformer to predict high-quality actions. However, it remains to be seen whether the transformer will benefit from sub-goals or ignore them and predict actions focused on short-term contexts. Therefore, we select high-value states from offline trajectories to form extra sub-goals and serve them as input conditions for the transformer. Then, the predicted actions will associate with these selected sub-goals and, in turn, encourage Mamba to generate high-value sub-goals. Our contributions are as follows:

* We investigate Mamba model compared to the transformer model in traditional RL tasks, D4RL, and find that Mamba model is more efficient but slightly inferior to the transformer model in terms of effectiveness.
* We propose DM-H, an in-context RL method that connects Mamba and the transformer with high-value sub-goals. DM-H inherits the merits of Mamba and transformers, achieving both high effectiveness and efficiency in long-term tasks.
* Our extensive experiments across Grid World, D4RL, and Tmaze reveal the superiority of DM-H over other baselines. In the online testing of long-term tasks, DM-H can be \(28\) times faster than baselines and more than double the effectiveness.

## 2 Related Work

Mamba for Long Sequence Modeling.The structured State-Space Sequence (S4) model is a novel alternative to CNNs or transformers to model the long-term dependency . The promising property of linearly scaling in sequence length attracts further exploration. Based on the S4, Smith et al.  propose a new S5 layer by introducing MIMO SSM and an efficient parallel scan into the S4 layer. Fu et al.  design a new SSM layer, H3, that nearly fills the performance gap between SSMs and transformers in language modeling. Mehta et al.  build the Gated State Space layer on S4 by introducing more gating units to improve the expressivity. Recently, Gu and Dao  propose a data-dependent SSM layer and build a generic language model backbone, Mamba, which outperforms transformers at various sizes on large-scale real data and enjoys linear scaling in sequence length. Later, Vision Mamba adds position coding and bidirectional scanning to extend it to visual tasks . In this work, we explore transferring Mamba's success to RL, i.e., achieving high effectiveness and efficiency for long-term memory.

Transformer for Decision-Making.In general, reinforcement learning was proposed as a fundamental online paradigm . The nature of online learning comes with some limitations when meeting the applications for which it is impossible to gather online data and learn simultaneously, such as autonomous driving. To this end, offline RL proposed that the agent can learn from a fixed offline dataset without gathering new data during learning [15; 28; 45; 27; 21; 23; 19; 24]. In the context of offline RL, recent works explored using transformer-based policy by treating RL tasks as a type of sequential prediction problem . Among them, a decision transformer  was proposed to model trajectories as sequences and autoregressively predict action conditioning on desired return-to-go, past states, and actions. Trajectory transformer  demonstrated that transformer could learn single-task policies from offline data. Subsequently, the multi-game decision transformer  and Gato  further showed that transformer-based policies could address multi-tasks in the same domain and cross-domain tasks. However, these works focused on distilling expert policies from offline data and failed to enable self-improvement like DM-H. When the offline data are sub-optimal, or the agent is required to adapt to new tasks, the multi-game decision transformers need to finetune the model parameters, while Gato is required to get prompted with expert demonstrations.

**Meta RL.** DM-H falls into the category of methods of learning to learn, which is also known as meta-learning. More precisely, recent in-context RL methods can be categorized as in-context meta-RL methods. The general idea of learning self-improvement has a long history in RL but is limited to hyper-parameters in the early stages . In-context meta-RL methods [44; 10] are commonly trained in the online setting by maximizing multi-episodic value functions with memory-based architectures through environment interactions. Another online meta-RL attempts to find good network parameter initializations and then quickly adapt through additional gradient updates [11; 36]. More recently, meta-RL has seen substantial breakthroughs, from performance gains on popular benchmarks to offline settings, such as Bayesian RL  and optimization-based meta-RL . Considering the difficulty of a completely offline setting, recent work has explored hybrid offline-online settings [46; 37]. DM-H is similar to the hybrid offline-online setting but saves more computing resources because the online phase does not involve gradient updates.

**In-Context RL.** In-context RL is the one that addresses tasks by providing prompts or demonstrations [5; 26]. By training agents at a large scale, transformer-based policies usually have the ability to learn in context [31; 39]. The learning process is performed entirely in context and does not involve parameter updates of neural networks. In this work, we consider incremental in-context RL, which involves learning from one's own behaviors in a trial-and-error manner. Laskin et al.  proposed Algorithm Distillation (AD), which automatically improved its performance by providing multiple historical trajectories. Subsequently, Lee et al.  proposed a Decision-Pretrained Transformer, which trained the agent to find optimal behaviors faster by only predicting the optimal trajectory. More recently, Hao Liu  further demonstrated that across-episodic contexts encourage large transformer models' emerging self-improvement behaviors. However, these methods suffer from huge computational costs as across-episodic contexts induce too-long sequences. In contrast, DM-H leverages Mamba's ability to efficiently process long-term dependencies while using the transformer to establish high-quality predictions.

## 3 Preliminaries

**Partially Observable Markov Decision Process.** We consider learning problems in the context of Partially Observable Markov Decision Processes (POMDP) represented by a tuple \(=(,,,P,)\). The POMDP tuple consists of states \(s\), observations \(o\), actions \(a\), rewards \(r\), and a transition probability function \(P(s_{t+1}|s_{t},a_{t})\), where \(t\) is an integer denoting the timestep. At each timestep \(t\), the agent receives the observation \(o_{t}\), selects an action \(a_{t}(|o_{t})\) based on its policy, and then receives the next observation \(o_{t+1}\). For convenience, we uniformly use \(s\) to denote the observations or states received from the environment. A trajectory is a sequence that consists of observations, actions, and rewards and is denoted by \(=(s_{0},a_{0},r_{0},,s_{T},a_{T},r_{T})\). In addition, a completion token \(d_{t}\), a binary identifier, is used to indicate whether a trajectory ends at time \(t\).

**Transformers.** The Transformer  architecture consists of multiple layers of self-attention operation and MLP. The self-attention begins by projecting input data \(X\) with three separate matrices onto \(D\)-dimensional vectors called queries \(Q\), keys \(K\), and values \(V\). These vectors are then passed through the attention function:

\[(Q,K,V)=(QK^{T}/)V.\] (1)

The \(QK^{T}\) term computes an inner product between two projections of the input data \(X\). The inner product is then normalized and projected back to a \(D\)-dimensional vector with the scaling term \(V\). Transformers utilize self-attention as a core part of the architecture to process sequential data [3; 7].

In this work, we use GPT  architecture that modifies the transformer with a causal self-attention mask to focus on the previous tokens in the sequence (\(j[1,i]\)), enabling us to do autoregressive generation at test time.

S4 and Mamba.S4  and Mamba  are inspired by the continuous system, which maps a \(1-\)D function or a sequence \(x(t) y(t)\) through a hidden state \(h(t)^{N}\). The mapping process can be represented as the following linear ordinary differential equation:

\[h^{}(t)= h(t)+x(t),\] (2) \[y(t)= h(t),\]

where \(^{N N}\) denotes the evolution parameter, \(^{N 1}\) and \(^{1 N}\) denote the projection parameters. For application to a discrete input sequence instead of a continuous function, S4 uses the zero-order hold to transform the continuous parameters \(,\) to discrete parameters \(},}\). Then, the Equation (2) can be rewritten as:

\[h_{t}= }h_{t-1}+}x_{t},\] (3) \[yt= h_{t},\]

where \(}=()\), \(}=()^{-1}(()-)()\), and \(\) is a timescale parameter. Based on the S4 framework, Mamba introduces a data-dependent selection mechanism while leveraging a hardware-aware parallel algorithm in recurrent mode. Compared with the Transformer, the combined architecture of Mamba empowers it to capture contexts effectively and maintains computational efficiency, particularly for long sequences.

## 4 Method

In this section, we first compare Mamba and transformer models in the D4RL dataset, and investigate the potential of Mamba in RL tasks. Then, We present DM-H, which can handle long-term dependencies from contexts with high effectiveness and efficiency, as shown in Figure 1.

### Mamba vs. Transformer in RL tasks

We first consider the Algorithm Distillation (AD) as the baseline, which is a classic in-context RL method using a transformer as the backbone . AD can predict high-quality actions by recalling the historical trajectories from the context, but it also incurs higher computational costs. Under the same settings, we replace the transformer in the AD algorithm with Mamba to compare their effectiveness and efficiency.

As shown in Table 1, the simple backbone replacement did not significantly improve effectiveness. Regarding efficiency, Mamba brings predictable improvements, thus saving training time under the same settings. Compared with the attention mechanism acting on state pairs, Mamba uses a data-dependent selection mechanism acting on each state independently, which brings a more efficient method of recalling long-term memory. However, since states in RL tasks commonly exhibit sequential relationships, the attention mechanism is more suitable for capturing the information between states, thereby outperforming Mamba in terms of effectiveness. To this end, we aim at a new in-context RL approach that leverages Mamba's strengths in processing long-term memory while preserving high-quality predictions from transformers.

### Decision Mamba-Hybrid

In-context RL can automatically improve its performance through trial-and-error when across-episodic contexts serve as prompt conditions. Specifically, an across-episodic context consisting of

    &  &  &  \\   &  &  &  &  &  &  &  &  \\   & Transformer & **94.21\(\)**0.48** & **42.28\(\)**1.18** & **41.28\(\)**0.41** & 108.32\(\)**0.05** & 72.58\(\)**0.45** & **91.32\(\)**0.48** & **89.36\(\)**0.48** & **89.22\(\)**1.48** \\  & Mamba & 92.21\(\)**0.48** & 41.92\(\)0.11 & 39.68\(\)0.13 & **110.82\(\)**0.48** & **73.65\(\)**0.23** & 82.65\(\)**0.12** & 108.31\(\)0.52 & 78.26\(\)0.58 & 70.92\(\)**1.17** \\   & Transformer &  &  &  \\  & Mamba &  &  &  \\   

Table 1: Mamba vs. Transformer on D4RL datasets.

trajectories is represented as \((^{1},^{2},,^{n})\), where

\[^{i}=(s^{i}_{0},a^{i}_{0},r^{i}_{0},d^{i}_{0},,s^{i}_{T},a^{i}_{T},r^{ i}_{T},d^{i}_{T}).\] (4)

The trajectories are sorted according to their total rewards, i.e.,\(_{t=0}^{T}r^{1}_{t}_{t=0}^{T}r^{2}_{t}_{t=0}^{T}r^{n}_{t}\). With autoregressive training and generation, the transformer can uncover meaningful patterns from multiple trajectories and improve itself conditioned on experience. However, the quadratic complexity of the attention mechanism suffers from huge computational costs along with the growth in task horizon. Inspired by Mamba's success with long sequences, we propose that Mamba handles across-episodic contexts and preserves local short-term sequences for the transformer. For Mamba, we reconstruct the long-term sequences \((^{1}_{m},^{2}_{m},,^{n}_{m})\) from across-episodic contexts. Each \(^{i}_{m}\) is denoted as

\[^{i}_{m}=(s^{i}_{0},^{i}_{0},d^{i}_{0},s^{i}_{c},^{i}_{c},d^ {i}_{c},,s^{i}_{kc},^{i}_{kc},d^{i}_{kc}),\] (5)

where \(c\) represents the local sequence length for the transformer, \(T-c kc T\), and \(^{i}_{c}=_{t=0}^{2c-1}r^{i}_{t}\) is the sum of \(c\) steps rewards. Mamba module will generate sub-goals to prompt the transformer, where the sub-goal is represented by a vector \(\) sampled from a multivariate Gaussian distribution. Then, the local short-term sequence is represented as:

\[^{i,j}_{}=(^{i}_{j},s^{i}_{j},a^{i}_{j},r^{i}_{j}, ^{i}_{j},s^{i}_{j+1},a^{i}_{j+1},r^{i}_{j+1},,^{i}_ {j},s^{i}_{j+c-1},a^{i}_{j+c-1},r^{i}_{j+c-1}),\] (6)

where \(^{i,j}_{}\) starts from the generation step \(j\{0,c,,kc\}\) and completes \(c\) steps actions based on the generated sub-goal \(^{i}_{j}\).

### Decision Mamba-Hybrid with Valuable Sub-goals

DM-H links Mamba and the transformer through the sub-goal \(\) to efficiently recall long-term contexts while ensuring high-quality predictions. As sub-goals are commonly hidden in the offline data, Mamba must infer them along with the transformer training. However, it remains to be seen whether the transformer will benefit from \(\) or ignore it and only imitate expert behaviors based on the local context. Therefore, we select extra high-value states from the offline data and transform them into sub-goals \(\) to align actions generated by the transformer.

Figure 1: The architecture of DM-H. During offline training, Mamba module generates sub-goals from long-term experience, where the long-term experience consists of multiple historical trajectories arranged in ascending order of the total rewards. Based on the generated sub-goals, the transformer is required to predict better actions by supervising the expert behaviors. Meanwhile, the linear layer feeds the valuable sub-goals into the transformer module and associates them with the generated actions. During online testing, DM-H can automatically improve its performance in a trial-and-error manner without requiring gradient updates.

Valuable sub-goals.Intuitively, a sub-goal should be highly valuable for the agent to reach and have a high probability of appearing at subsequent time steps of the current state in the trajectory. When reached sequentially, these states should mark milestones in the trajectory, making it highly probable that the agent successfully performs the task. In this point, the valuable sub-goals guide the agent through the task, meaning they have the same purpose as the returns-to-go in the Decision Transformer . Therefore, we can model this behavior by finding states with high accumulated reward values in the trajectory. Specifically, for state \(s_{i}\) at timestep \(i\), the value of state \(s_{j}\) at timestep \(j\) is \(_{t=i+1}^{j}r_{k}\), where \(i+1 j T\). However, this may prioritize the last state of trajectories when the environment only provides positive rewards. To encourage selecting states that are close to the current state \(s_{i}\), we divide the accumulated rewards by the distance between their timesteps \(_{t=i+1}^{j}r_{k}/(j-i)\). With the punishment of the distance, the weighted average of accumulated rewards can identify the short-term and important future states.

Based on the selected sub-goals, we reconstruct the local short-term sequence (Equation (6)) by replacing \(\) generated from Mamba. The reconstructed local short-term sequence is represented as:

\[_{g}^{i,j}=(f(s_{g}^{i}),s_{j}^{i},a_{j}^{i},r_{j}^{i},f(s_{g}^{i}),s_{j+1} ^{i},a_{j+1}^{i},r_{j+1}^{i},,f(s_{g}^{i}),s_{j+c-1}^{i},a_{j+c-1}^{i},r _{j+c-1}^{i}),\] (7)

where \(s_{g}^{i}\) is the most valuable sub-goal for state \(s_{j}^{i}\) and \(f\) is a linear layer that maps \(s_{g}^{i}\) to the same dimension of \(_{j}^{i}\). The reconstructed local short-term sequence aligns the actions generated by the transformer with subsequent high-valued states. Since Equation (6) is consistent with the reconstructed sequence except for \(_{j}^{i}\), this encourages Mamba module to generate high-value sub-goals from the long-term context to ensure that the transformer module predicts similar actions.

### Implementation of DM-H

Architecture.We feed \(n\) trajectories into Mamba module, which results in \(3 n T/c\) tokens, with one token for each of the three modalities: state, reward, and completion. In the transformer module, we feed \(4 c\) tokens, with one token for each of the four modalities: sub-goal, state, action, and reward. To create the token embeddings, we train a linear layer for each modality, which transforms the raw inputs into the desired embedding dimension, followed by layer normalization . Finally, we freeze a linear layer that maps the high-value sub-goals \(s_{g}\) in Equation (7) to the same dimensions as the sub-goals \(\) generated by Mamba.

Offline Training and Online Testing.During offline training, we are given a dataset of offline trajectories, where the trajectories can be suboptimal. In each iteration, we sample minibatches of trajectories from the dataset. Then, Mamba module first predicts the sub-goals \(_{t}\) every \(c\) steps, given the input token \(s_{t}\) and past trajectories. Then, the transformer module autoregressively predicts \(c\) steps of actions \(\{a_{t},,a_{t+c-1}\}\) given \(_{t}\) and \(\{s_{t},,s_{t+c-1}\}\). Meanwhile, we use the weighted average of accumulated rewards to select valuable sub-goals from the offline data and feed them to the transformer model to predict the same \(c\) steps actions. The predicted actions are evaluated with either cross-entropy loss or mean-squared error, depending on whether the actions are discrete or continuous. The losses from each step are averaged and updated in all modules end-to-end. At online testing, we roll out the DM-H with multiple trajectories and report the return of the last trajectory. Following the configuration from related works [20; 29], we set a context size across \(n=4\) episodes. The pseudocode for DM-H is summarized in Appendix A. Source code and more hyperparameters are described in Appendix B.

## 5 Experiments

In this section, we will introduce datasets and baselines in Section 5.1. Then, in Section 5.2, Section 5.3, Section 5.4, and 5.5, we report the comparison results, ablation study, and parameters sensitivity analysis. In Appendix C, we report additional results about offline training time, online testing time, and ablation study.

### Environmental Settings

Dataset: Grid World.We first consider the discrete control environments from the Grid World , which is a commonly used benchmark for recent in-context RL methods. The environments support many tasks that cannot be solved through zero-shot generalization after pre-training because these tasks cannot be inferred easily from the observation. Specifically, we test our method on three environments: Darkroom, Darkroom Hard, and Dark Key-to-Door. In addition, we create a long-term variant of Large Darkroom, Large Darkroom Hard, and Large Darkroom Key-to-Door, where the coordinate space of each environment is expanded to 20 times, and the episode length is expanded 10 times. The dataset is collected from learning histories that are generated by training gradient-based RL algorithms, such as Deep Q-Network . For each environment, we randomly create 60 tasks from the coordinate space and collect data for 1 million steps.

Dataset: Tmaze.We also evaluate our method on the Tmaze , a benchmark for testing the recall ability of in-context agents. In Tmaze, any policy that achieves the maximum return must be able to recall information from the first step at the final step. Since the task horizon can be set arbitrarily, it is often used to test the limits of the model's processing of long-term memory.

Dataset: D4RL.D4RL  is a commonly used offline RL benchmark, including continuous control tasks. The dataset is collected from Mujoco environments, including HalfCheetah, Hopper, and Walker. The episode length in D4RL is 1000, which is far more than that of Grid World. Therefore, current in-context RL methods require huge computational costs in D4RL, even though it is a commonly used benchmark for conventional RL algorithms.

Baselines.We investigate the effectiveness and efficiency of DM-H relative to in-context RL, dedicated offline RL, and imitation learning algorithms. Our baselines can be categorized as follows:

* In-context RL: These methods use the transformer to model trajectory sequences and predict actions autoregressively. We compare with recent methods, AMAGO , Decision Pretrained Transformer (DPT) , and Algorithm Distillation (AD) , which achieve impressive results based on the setting of across-episodic contexts.
* Temporal-difference learning: Most temporal-difference (TD) learning methods use an action space constraint or value pessimism and will serve as faithful comparisons to DM-H, representing standard RL methods. Following recent work , we consider state-of-the-art TD3+BC  that is demonstrated to be effective on D4RL.
* Imitation learning: Imitation learning methods similarly utilize supervised losses for training, such as Behavior Cloning (BC)  and Decision Transformer (DT) . We compare with BC-10\(\%\), which is shown to be competitive with state-of-the-art on D4RL. DT also uses a transformer to predict actions autoregressively but is limited to a single episode context.

For all comparison methods, we adhere closely to the original hyper-parameter settings. To evaluate DM-H and other in-context RL algorithms, we roll out 10 episodes in D4RL and 20 episodes in Grid World and Tmaze. For each result, we report mean and standard error across 10 random seeds.

Figure 2: Results for Grid World. An agent is expected to solve a new task by interacting with the environments for 20 episodes without online model updates. Our DM-H significantly outperforms baselines on long-term tasks with sparse rewards because it inherits the merits of transformers and Mamba in high-quality prediction and long-term memory.

### Grid World Results

To evaluate DM-H's self-improvement capabilities in unseen tasks, we compared recent in-context RL methods in the Grid World environments. The agent is required to solve an unseen task by interacting with the environments for 20 episodes without online model updates. In addition, we added a variant of the representative in-context RL AD, replacing the transformer with Mamba as the backbone.

As shown in Figure 2, DM-H achieves state-of-the-art performance in a wide range of tasks. DM-H achieves 28\(\) times faster than baselines and more than double the effectiveness as the task horizon increases and rewards become sparse. In long-term tasks, DM-H leverages Mamba's ability to obtain long-term memories while retaining high-quality predictions established by the transformer in decision-making. On the contrary, AD (transformer) and AD (Mamba) only retain one aspect of the advantages of DM-H. In terms of sparse rewards, DM-H is similar to the structure of hierarchical RL, in which Mamba performs a decision every \(c\) steps and is, therefore, better at handling reward sparse scenarios. Overall, DM-H demonstrated that the hybrid method is not only feasible but combines more advantages synergetically.

### Image Results

In this section, we test the limits of DM-H's recall capabilities in the Tmaze task. Solving this task requires accurate recall of the first step at the last step. Therefore, we set the context length equal to the task horizon and compare it with DT and DM, where DM replaces the DT's transformer backbone with a Mamba backbone. We train each method to recover the optimal policy until we run out of GPU memory at a context size equal to 20k (DM-H) or 10k (DT and DM).

As shown in Figure 3, DM-H achieves the maximum reward with minimum online testing costs at any task horizon, demonstrating that Mamba's recalled memory positively prompts the transformer. Regarding efficiency, DM-H is comparable to DM using only Mamba during online testing and outperforms DM during offline training (Figure 5 in Appendix C). This is because (1) the context of

   Dataset & Environment & BC-10\% & TD3+BC & TD3 & DT & AD (Mamba) & AD (Transformer) & DM-H \\  Med-Expert & HalfCheetah & 94.11 & **96.59** & 87.60 & 93.40 & 92.21\(\)0.60 & 94.21 \(\)0.46 & 96.21\(\)0.28 \\ Med-Expert & Hopper & 113.13 & 113.22 & 98.41 & 111.18 & 110.82\(\)0.56 & 108.32 \(\)0.45 & **117.19\(\)0.46** \\ Med-Expert & Walker2d & 109.90 & 112.21 & 100.52 & 108.71 & 108.31 \(\)0.52 & 111.36 \(\)0.46 & **118.21\(\)0.56** \\  Med & HalfCheetah & 43.90 & **48.93** & 34.60 & 42.73 & 41.92\(\)0.11 & 42.28 \(\)1.18 & 45.45\(\)0.75 \\ Med & Hopper & 73.84 & 70.44 & 56.98 & 69.42 & 73.65\(\)1.23 & 72.58 \(\)0.54 & **83.15\(\)0.63** \\ Med & Walker2d & 82.05 & 86.91 & 70.95 & 74.70 & 78.26\(\)0.55 & 85.96 \(\)0.46 & **88.29\(\)0.56** \\  Med-Replay & HalfCheetah & 42.27 & 45.84 & 38.81 & 40.31 & 39.68\(\)0.13 & 41.28 \(\)0.21 & **45.26\(\)0.43** \\ Med-Replay & Hopper & 90.57 & 98.12 & 78.90 & 88.74 & 82.65\(\)1.15 & 91.32 \(\)0.66 & **98.36\(\)0.51** \\ Med-Replay & Walker2d & 76.09 & 91.17 & 65.94 & 71.22 & 70.92\(\)1.21 & 89.21 \(\)1.42 & **95.66\(\)1.16** \\  Total Average & 80.65\(\)1.34 & 84.83\(\)1.10 & 70.28\(\)1.30 & 77.69\(\)1.48 & 76.97\(\)0.67 & 82.84\(\)0.20 & **87.53\(\)0.89** \\   

Table 2: Results for D4RL datasets. DM-H outperforms both in-context RL (DT, AD) and supervised learning (BC) and performs competitively with conventional RL algorithms (TD3+BC and TD3) on almost all tasks.

Figure 3: Results for (a) performance and (b) online testing times on Tmaze tasks. We train each method to address Tmaze tasks that have different horizons until we run out of GPU memory at context length to achieve 10k (DT, DM) or 20k (our DM-H). We report the online testing time for 20 episodes of Tmaze tasks.

the transformer in DM-H is fixed to the hyperparameter \(c\), which does not change with the task length. (2) Mamba model generates a sub-goal every \(c\) steps, thereby shortens the sequence it processes by \(c\) times. Benefiting from these merits, DM-H handles tasks twice the length and has fewer memory resource requirements than DT and DM.

### D4RL Results

In addition to navigation tasks, we also test DM-H on the control tasks from the D4RL dataset, which is commonly used in conventional offline RL methods. Based on previous work , the results on D4RL are normalized so that 100 denotes an expert policy. Baseline numbers are reported by the Agentic Transformer  and from the D4RL paper. As shown in Table 2, DM-H outperforms baselines in a majority of the tasks and is competitive with the state-of-the-art in the remaining tasks. In the TD learning and imitation learning categories, TD3+BC is generally the most remarkable algorithm. Compared with them, the superior performance demonstrates the self-improvement of DM-H on suboptimal data.

### Ablation Study and Parameter Sensitivity Analysis

Ablation Study on Valuable Sub-goals.To validate the effectiveness of valuable sub-goals, we conduct an ablation study of DM-H in Grid World tasks. Figure 4 (a) presents the ablation results, which report the mean episode return across 10 seeds. We can observe that sub-goals can significantly improve DM-H's performance, proving that the sub-goal strengthens the transformer's dependency on long-term contexts from Mamba. In Appendix C, we also carry out ablation studies in the D4RL dataset. Please refer to Figure 6.

Sensitivity of Key Hyperparameters.In this experiment, we introduce an important hyperparameter \(c\). A large \(c\) enables Mamba model to scan multiple episodes with smaller context sizes, significantly improving the computational efficiency. In addition, \(c\) also controls the short-term context length in the transformer, which affects the quality of generated actions. As shown in Figure 4 (b), DM-H performs well within the appropriate range of \(c\), i.e., \(10 c 20\).

## 6 Conclusion, Limitations, and Broader Impacts

In this work, we propose an in-context RL method DM-H that achieves both high effectiveness and efficiency in long-term tasks. The core idea of DM-H is to use sub-goal settings to leverage Mamba's ability to efficiently recall long sequence contexts while using the transformer to perform high-quality predictions. Unlike current in-context RL methods limited to short-term tasks, DM-H is also good at standard RL benchmarks, which typically have long-term sequences under the across-episodic context setting. On the Grid World, D4RL, and Tmaze benchmarks, we demonstrate that DM-H can outperform baselines in both efficiency and effectiveness.

Regarding limitations, our method has an important hyperparameter, which is the context length of the transformer "\(c\)." As "\(c\)" increases, Mamba model can scan multiple episodes with smaller context sizes, significantly improving the computational efficiency. On the contrary, as "\(c\)" decreases, Mamba can generate high-quality sub-goals from the context that is closer to the original episode. However, this reduces the short-term context available to the transformer when making predictions. Therefore, a meaningful future direction is for "\(c\)" to adapt autonomously to different tasks. In terms of the

Figure 4: (a) The ablation study on DM-H with or without valuable sub-goals. (b) The parameter sensitivity analysis of “\(c\).”

potential broader impact, we do not anticipate any negative ethical and societal impacts of our work while using our method in practice.