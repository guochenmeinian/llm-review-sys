# Unified Convergence Theory of Stochastic and Variance-Reduced Cubic Newton Methods

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

We study stochastic Cubic Newton methods for solving general possibly non-convex minimization problems. We propose a new framework, which we call the _helper framework_, that provides a unified view of the stochastic and variance-reduced second-order algorithms equipped with global complexity guarantees. It can also be applied to learning with auxiliary information. Our helper framework offers the algorithm designer high flexibility for constructing and analysis of the stochastic Cubic Newton methods, allowing arbitrary size batches, and the use of noisy and possibly biased estimates of the gradients and Hessians, incorporating both the variance reduction and the lazy Hessian updates. We recover the best-known complexities for the stochastic and variance-reduced Cubic Newton, under weak assumptions on the noise and avoiding artificial logarithms. A direct consequence of our theory is the new lazy stochastic second-order method, which significantly improves the arithmetic complexity for large dimension problems. We also establish complexity bounds for the classes of gradient-dominated objectives, that include convex and strongly convex problems. For Auxiliary Learning, we show that using a helper (auxiliary function) can outperform training alone if a given similarity measure is small.

## 1 Introduction

In many fields of machine learning, it is common to optimize a function \(f()\) that can be expressed as a finite sum:

\[_{^{d}}\ f() = _{i=1}^{n}f_{i}()\ },\] (1)

or, more generally, as an expectation over some given probability distribution: \(f()=_{}f(,)\). When \(f\) is non-convex, this problem is especially difficult, since finding a global minimum is NP-hard in general . Hence, the reasonable goal is to look for approximate solutions. The most prominent family of algorithms for solving large-scale problems of the form (1) are the _first-order methods_, such as the Stochastic Gradient Descent (SGD) [25; 16]. They employ only stochastic gradient information about the objective \(f()\) and guarantee the convergence to a stationary point, which is a point with a small gradient norm.

Nevertheless, when the objective function is non-convex, a stationary point may be a saddle point or even a local maximum, which is not desirable. Another common issue is that first-order methods typically have a slow convergence rate, particularly when the problem is _ill-conditioned_. Therefore, they may not be suitable when high precision for the solution is required.

To address these challenges, we can take into account _second-order information_ (the Hessian matrix) and apply Newton's method (see, e.g. ). Among the many versions of this algorithm, the Cubic Newton method  is one of the most theoretically established. With the Cubic Newton method, wecan guarantee _global convergence_ to an approximate _second-order_ stationary point (in contrast, the pure Newton method without regularization can even diverge when it starts far from a neighborhood of the solution). For a comprehensive historical overview of the different variants of Newton's method, see . Additionally, the rate of convergence of the Cubic Newton is _provably better_ than those for the first-order methods.

Therefore, theoretical guarantees of the Cubic Newton method seem to be very appealing for practical applications. However, the basic version of the Cubic Newton requires the exact gradient and Hessian information in each step, which can be very expensive to compute in the large scale setting. To overcome this issue, several techniques have been proposed:

* One popular approach is to use inexact _stochastic gradient and Hessian estimates_ with subsampling [33; 17; 32; 21; 12; 6; 1]. This technique avoids using the full oracle information, but typically it has a slower convergence rate compared to the exact Cubic Newton.
* _Variance reduction_ techniques [35; 29] combine the advantages of stochastic and exact methods, achieving an improved rates by recomputing the full gradient and Hessian information at some iterations.
* _Lazy Hessian_ updates [26; 9] utilize a simple idea of reusing an old Hessian for several iterations of a second-order scheme. Indeed, since the cost of computing one Hessian is usually much more expensive than one gradient, it can improve the arithmetic complexity of our methods.
* In addition, exploiting the special structure of the function \(f\) (if known) can also be helpful. For instance, some studies [20; 18] consider _gradient-dominated objectives_, a subclass of non-convex functions that have improved convergence rates and can even be shown to converge to the global minimum. Examples of such objectives include convex and star-convex functions, uniformly convex functions, and functions satisfying the PL condition  as a special case.

In this work, we revise the current state-of-the-art convergence theory for the stochastic Cubic Newton method and propose a unified and improved complexity guarantees for different versions of the method, which combine all the advanced techniques listed above.

Our developments are based on the new _helper framework_ for the second-order optimization, that we present in Section 3. For the first-order optimization, a similar in-spirit techniques called _learning with auxiliary information_ was developed recently in [7; 30]. Thus, our results can also be seen as a generalization of the Auxiliary Learning paradigm to the second-order optimization. However, note that in our second-order case, we have more freedom for choosing the "helper functions" (namely, we use one for the gradients and one for the Hessians). That brings more flexibility into our methods and it allows, for example, to use the lazy Hessian updates.

Our new helper framework provides us with a unified view of the stochastic and variance-reduced methods and can be used by an algorithm designed to construct new methods. Thus, we show how to recover already known versions of the stochastic Cubic Newton with the best convergence rates, as well as present the new _Lazy Stochastic Second-Order Method_, which significantly improves the total arithmetic complexity for large-dimension problems.

**Contributions.**

* We introduce the _helper framework_ which we argue encompasses multiple methods in a unified way. Such methods include stochastic methods, variance reduction, Lazy methods, core sets, and semi-supervised learning.
* This framework covers previous versions of the variance-reduced stochastic Cubic Newton methods with known rates. Moreover, it provides us with new algorithms that employ _Lazy Hessian_ updates and significantly improves the arithmetic complexity (for high dimensions), by using the same Hessian snapshot for several steps of the method.
* In the case of Auxiliary learning we provably show a benefit from using auxiliary tasks as helpers in our framework. In particular, we can replace the smoothness constant by a similarity constant which might be smaller.
* Moreover, our analysis works both for the general class of non-convex functions, as well as for the class of gradient-dominated problems, that includes convex and uniformly convex functions. Hence, in particular, we are the first to establish the convergence rates of the stochastic Cubic Newton algorithms with variance reduction for the gradient-dominated case.

## 2 Notation and Assumptions

For simplicity, we consider the finite-sum optimization problem (1), while it can be also possible to generalize our results to arbitrary expectations. We assume that our objective \(f\) is bounded from below and denote \(f^{}\,:=_{}f()\), and use the following notation: \(F_{0}:=f(_{0})-f^{},\) for some initial \(_{0}^{d}\). We denote by \(\|\|:=,^{1/2}\), \(^{d}\), the standard Euclidean norm for vectors, and the spectral norm for symmetric matrices, \(\|\|:=\{_{}(),-_{}()\}\), where \(=^{}^{d d}\). We will also use \(x y\) to denote \((x,y)\).

Throughout this work, we make the following smothness assumption on the objective \(f\) :

**Assumption 1** (Lipschitz Hessian): _The Hessian of \(f\) is Lipschitz continuous, for some \(L>0\):_

\[\|^{2}f()-^{2}f()\|  L\|-\|,,^{d}\]

Our goal is to explore the potential of using the Cubically regularized Newton methods to solve problem (1). At each iteration, being at a point \(^{d}\), we compute the next point \(^{+}\) by solving the subproblem of the form

\[^{+}\ \ *{arg\,min}_{^{d}} _{M,,}(,):=,-+ (-),-+\| -\|^{3}\,}.\] (2)

Here, \(\) and \(\) are estimates of the gradient \( f()\) and the Hessian \(^{2}f()\), respectively. Note that solving (2) can be done efficiently even for non-convex problems (see ). Generally, the cost of computing \(^{+}\) is \((d^{3})\) arithmetic operations, which are needed for evaluating an appropriate factorization of \(\). Hence, it is of a similar order as the cost of the classical Newton's step.

We will be interested to find a second-order stationary point to (1). We call \((,c)\)_-approximate second-order local minimum_ a point \(\) that satisfies:

\[\| f()\|  _{min}(^{2}f())  -c,\]

where \(,c>0\) are given tolerance parameters. Let us define the following accuracy measure (see ):

\[_{c}() := \| f()\|^{3/2},\,( ^{2}f())^{3}}{c^{3/2}},^{d},\ c>0.\]

Note that this definition implies that if \(_{c}()^{3/2}\) then \(\) is an \((,c)\)-approximate local minimum.

Computing gradients and Hessians.It is clear that computing the Hessian matrix can be much more expensive than computing the gradient vector. We denote the corresponding arithmetic complexities by _HessCost_ and _GradCost_. We will make and follow the convention that _HessCost_\(=d\)_GradCost_, where \(d\) is the dimension of the problem. For example, this is known to hold for neural networks using the backpropagation algorithm . However, if the Hessian has a sparse structure, the cost of computing the Hessian can be cheaper . Then, we can replace \(d\) with the _effective dimension_\(d_{}:=}{}\ \ d.\)

## 3 Second-Order Optimization with Helper Functions

In this section, we extend the helper framework previously introduced in  for first-order optimization methods to second-order optimization.

General principle.The general idea is the following: imagine that, besides the objective function \(f\) we have access to a help function \(h\) that we think is similar in some sense (that will be defined later) to \(f\) and thus it should help to minimize it.

Note that many optimization algorithms can be framed in the following sequential way. For a current state \(\), we compute the next state \(^{+}\) as:\[^{+}  ^{d}}{}\,_{}()+Mr_{}()\,},\]

where \(_{}()\) is an approximation of \(f\) around current point \(\), and \(r_{}()\) is a regularizer that encodes how accurate the approximation is, and \(M>0\) is a regularization parameter. In this work, we are interested in cubically regularized second-order models of the form (2) and we use \(r_{}():=\|-\|^{3}\).

Now let us look at how we can use a helper \(h\) to construct the approximation \(\). We notice that we can write

\[f() := )}_{}\,+\,) -h()}_{}\]

We discuss the actual practical choices of the helper function \(h\) below. We assume now that we can afford the second-order approximation for the cheap part \(h\) around the current point \(\). However, approximating the part \(f-h\) can be expensive (as for example when the number of elements \(n\) in finite sum (1) is huge), or even impossible (due to lack of data). Thus, we would prefer to approximate the expensive part less frequently. For this reason, let us introduce an extra _snapshot point_\(}\) that is updated less often than \(\). Then, we use it to approximate \(f-h\). Another question that we still need to ask is _what order should we use for the approximation of \(f-h\)?_ We will see that order \(0\) (approximating by a constant) leads as to the basic stochastic methods, while for orders \(1\) and \(2\) we equip our methods with the variance reduction.

Combining the two approximations for \(h\) and \(f-h\) we get the following model of our objective \(f\):

\[_{,}}() = C(,})+(h,,}),-+(h,,})(-),-,\] (3)

where \(C(,})\) is a constant, \((h,,})\) is a linear term, and \((h,,})\) is a matrix. Note that if \(}\), then the best second-order model of the form (3) is the Taylor polynomial of degree two for \(f\) around \(\), and that would give us the exact Newton-type method. However, when the points \(\) and \(}\) are different, we obtain much more freedom in constructing our models.

For using this model in our cubically regularized method (2), we only need to define the gradient \(=(h,,})\) and the Hessian estimates \(=(h,,})\), and we can also treat them differently (using two different helpers \(h_{1}\) and \(h_{2}\), correspondingly). Thus we come to the following general second-order (meta)algorithm. We perform \(S\) rounds, the length of each round is \(m 1\), which is our key parameter:

```
0:\(_{0}^{d}\), \(S\), \(m 1\), \(M>0\).
1:for\(t=0,,Sm-1\)do
2:if\(tm=0\)then
3: Update \(}_{t}\) (using previous states \(_{i t}\))
4:else
5:\(}_{t}=}_{t-1}\)
6: Form helper functions \(h_{1},h_{2}\)
7: Compute the gradient \(_{t}=(h_{1},_{t},}_{t})\), and the Hessian \(_{t}=(h_{2},_{t},}_{t})\)
8: Compute the cubic step \(_{t+1}_{^{d}}\,_{M,_{t}, _{t}}(,_{t})\)return\(_{out}\) using the history \((_{i})_{0 i Sm}\) ```

**Algorithm 1** Cubic Newton with helper functions

In Algorithm 1 we update the snapshot \(}\) regularly every \(m\) iterations. The two possible options are

\[}_{t} = _{tm}\] (4)

or

\[}_{t} = }{}\,f(_{i}) \] (5)

Clearly, option (5) is available only in case we can efficiently estimate the function values. However, we will see that it serves us with better global convergence guarantees, for the gradient-dominated functions.

It remains only to specify how we choose the helpers \(h_{1}\) and \(h_{2}\). We need to assume that they are somehow similar to \(f\). Let us present several efficient choices that lead to implementable second-order schemes.

### Basic Stochastic Methods

If the objective function \(f\) is very "expensive" (for example of the form (1) with \(n\)), one option is to ignore the part \(f-h\) i.e. to approximate it by a zeroth-order approximation: \(f()-h() f(})-h(})\). Since it is just a constant, we do not need to update \(}\). In this case, we have:

\[(h_{1},,}) :=  h_{1}(),(h_{2},, }) := ^{2}h_{2}()\,.\]

To treat this choice of the helpers and motivated by the form of the errors in Lemma 5, we assume the following similarity assumptions:

**Assumption 2** (Bounded similarity): _Let for some \(_{1},_{2} 0\), it holds_

\[_{h_{1}}[\|(h_{1},,})- f( )\|^{3/2}]_{1}^{3/2},\ _{h_{2}}[\|(h_{2},,})-^{2}f( {x})\|^{3}]_{2}^{3},,} ^{d}.\]

Under this assumption, we prove the following theorem:

**Theorem 1**: _Under Assumptions 1 and 2, and \(M L\), for an output of Algorithm 1\(_{out}\) chosen uniformly at random from \((_{i})_{0 i Sm}\), we have:_

\[[_{M}(_{out})] = F_{0}}{Sm}+^{ 3}}{M^{3/2}}+_{1}^{3/2}.\]

We see that according to this result, we can get \([_{M}(_{out})]^{3/2}\) only for \(>_{1}\). In other words, we can converge only to a certain _neighbourhood around a stationary point_, that is determined by the error \(_{1}\) of the stochastic gradients.

However, as we will show next, this seemingly pessimistic dependence leads to the same rate of classical subsampled Cubic Newton methods discovered in .

Let us discuss now the specific case of stochastic optimization, where \(f\) has the specific form (1), with \(n\) potentially being very large. In this case, it is customary to sample batches at random and assume the noise to be bounded in expectation. Precisely speaking, if we assume the standard assumption that for one index sampled uniformly at random, we have \(_{i}\| f()- f_{i}()\|^{2}_{g}^{2}\) and \(_{i}\|^{2}f()-^{2}f_{i}()\|^{3}_{ h}^{3},\) then it is possible to show that for

\[h_{1} = }_{i_{g}}f_{i}  h_{2}\ =\ }_{i_{h}}f_{i},\] (6)

for batches \(_{g},_{h}[n]\) sampled uniformly at random and of sizes \(b_{g}\) and \(b_{h}\) respectively, Assumption 2 is satisfied with : \(_{1}=}{}}\) and \(_{2}=}(}{}})\). Note that we can use the same random subsets of indices \(_{g},_{h}\) for all iterations.

**Corollary 1**: _In Algorithm 1, let us choose \(M=L\) and \(m=1\), with basic helpers (6). Then, according to Theorem 1, for any \(>0\), to reach an \((,L)\)-approximate second-order local minimum, we need at most \(S=F_{0}}{^{3/2}}\) iterations with \(b_{g}=}{}^{2}\) and \(b_{h}=^{2}}{}\). Therefore, the total arithmetic complexity of the method becomes_

\[^{2}}{^{7/2}}+ ^{2}}{^{5/2}}d_{}.\]

It improves upon the complexity \((})\) of the first-order SGD for non-convex optimization , unless \(d_{}>}\) (high cost of computing the Hessians).

### Let the Objective Guide Us

If the objective \(f\) is such that we can afford to access its gradients and Hessians from time to time (functions of the form (1) with \(n<\) and "reasonable"), then we can do better than the previous chapter. In this case, we can afford to use a better approximation of the term \(f()-h()\). From a theoretical point of view, we can treat the case when \(f\) is only differentiable once, and thus we can only use a first-order approximation of \(f-h\), in this case, we will only be using the hessian of the helper \(h\) but only gradients of \(f\). However, in our case, if we assume we have access to gradients thenwe can also have access to the Hessians of \(f\) as well (from time to time). For this reason, we consider a second-order approximation of the term \(f-h\), if we follow the procedure that we described above we find:

\[(h_{1},,}) :=  h_{1}()- h_{1}(})+ f(})+(^{2}f(})-^{2}h_{1}(}))(- })\] (7) \[(h_{2},,}) := ^{2}h_{2}()-^{2}h_{2}(})+^{2 }f(})\] (8)

We see that there is an explicit dependence on the snapshot \(}\) and thus we need to address the question of how this snapshot point should be updated in Algorithm 1. In general, we can update it with a certain probability \(p\), and we can use more advanced combinations of past iterates (like the average). However, for our purposes, we simply choose option 4 (i.e. the last iterate), thus it is only updated once every \(m\) iterations.

We also need to address the question of the measure of similarity in this case. Since we are using a second-order approximation of \(f-h\), it is very logical to compare them using the difference between their third derivatives or equivalently, the Hessian Lipschitz constant of their difference. Precisely we make the following similarity assumption :

**Assumption 3** (Lipschitz similarity): _Let for some \(_{1},_{2} 0\), it holds, \(,}^{d}\):_

\[_{h_{1}}[\|(h_{1},,})-  f()\|^{3/2}]  _{1}^{3/2}\|-}\|^{3},\] \[_{h_{2}}[\|(h_{2},,})- ^{2}f()\|^{3}]  _{2}^{3}\|-}\|^{3}.\]

In particular, if \(f-h_{1}\) and \(f-h_{2}\) have \(_{1}\) and \(_{2}\) Lipschitz Hessians respectively then \(h_{1}\) and \(h_{2}\) satisfy Assumption 3.

Under this assumption, we show that the errors resulting from the use of the snapshot can be successfully balanced by choosing \(M\) satisfying:

\[4}{M}^{3/2}+73}{M} ^{3}  }.\] (9)

And we have the following theorem.

**Theorem 2**: _For \(f,h_{1},h_{2}\) verifying Assumptions 1,3. For a regularization parameter \(M\) chosen such that \(M L\) and (9) is satisfied. For an output of Algorithm 1\(_{out}\) chosen uniformly at random from \((_{i})_{0 i Sm:=T}\), we have:_

\[[_{M}(_{out})] = F_{0}}{Sm},\]

In particular, we can choose \(M=(L,32_{1}m^{2},16_{2}m)\) which gives

\[[_{M}(_{out})] = F_{0}}{Sm}+}F_{0}}{S}+}F_{0}}{S}.\] (10)

Based on the choices of the helpers \(h_{1}\) and \(h_{2}\) we can have many algorithms. We discuss these in the following sections. We start by discussing variance reduction and Lazy Hessians which rely on sampling batches randomly, then move to core-sets which try to find, more intelligently, representative weighted batches of data, after this, we discuss semi-supervised learning and how unlabeled data can be used to engineer the helpers. More generally, auxiliary learning tries to leverage auxiliary tasks in training a given main task, the auxiliary tasks can be treated as helpers.

### Variance Reduction and Lazy Hessians

The following lemma demonstrates that we can create helper functions \(h\) with lower similarity to the main function \(f\) of the form (1) by employing sampling and averaging.

**Lemma 1**: _Let \(f=_{i=1}^{n}f_{i}\) such that all \(f_{i}\) are twice differentiable and have \(L\)-Lipschitz Hessians. Let \(\{1,,n\}\) be of size \(b\) and sampled with replacement uniformly at random, and define \(h_{}=_{i}f_{i}\), then \(h_{}\) satisfies Assumption 3 with \(_{1}=}\) and \(_{2}=(L}{})\)._

Choice of the parameter \(m\) in Algorithm 1.Minimizing the total arithmetic cost, we choose \(m=_{m}\#Grad(m,)+d\#Hess(m,)\), where \(\#Grad(m,)\) and \(\#Hess(m,)\) denote the number of gradients and Hessians required to find an \(\) stationary point.

Now we are ready to discuss several special cases that are direct consequences from Theorem 2.

First, note that choosing \(h_{1}=h_{2}=f\) gives the classical Cubic Newton method , whereas choosing \(h_{1}=f\) and \(h_{2}=0\), gives the Lazy Cubic Newton . In both cases, we recuperate the known rates of convergence.

General variance reduction.If we sample batches \(_{g}\) and \(_{h}\) of sizes \(b_{g}\) and \(b_{h}\) consecutively at random and choose

\[\ \ =\ \ }_{i_{g}}f_{i} h_{2}\ =\ }_{i_{h}}f_{i},\ }\]

and use these helpers along with the estimates (7), (8), we obtain the _Variance Reduced Cubic Newton_ algorithm . According to Lemma 1, this choice corresponds to \(_{1}=}}\) and \(_{2}=}(}})\). For \(b_{g} m^{4} n,b_{h} m^{2} n\) and \(M=L\), we have the non-convex convergence rate \(F_{0}}{Sm}\), which is the same as that of the cubic Newton algorithm but with a smaller cost per iteration. Minimizing the total arithmetic cost, we can choose \(m=_{m} nm)+(m^{5} nm)}{m}\).

Let us denote by \(g^{VR}(n,d)\) the corresponding optimal value. Then we reach an \((,L)\)-approximate second-order local minimum in at most \(((n,d)}{^{b/2}})\)_GradCost_ arithmetic operations.

Variance reduction with Lazy Hessians.We can also use lazy updates for Hessians combined with variance-reduced gradients. This corresponds to choosing

\[\ \ =\ \ }_{i_{g}}f_{i}  h_{2}\ =\ 0,\ }\]

which implies (according to Lemma 1) that \(_{1}=}}\) and \(_{2}=L\). In this case, we need \(b_{g} m^{2}\) to obtain a convergence rate of \(F_{0}}{S}\), which matches the convergence rate of the Lazy Cubic Newton method while using stochastic gradients. We choose this time \(m=_{m} mn)}{}\), as before. Let us denote \(g^{Lazy}(n,d)\) the corresponding minimum. Then we guarantee to reach an \((,mL)\)-approximate second-order local minimum in at most \(((n,d)}{^{b/2}})\)_GradCost_ operations.

To be lazy or not to be?We show that \(g^{Lazy}(n,d)(nd)^{5/6} n\) and \(g^{VR}(n,d)(nd)^{4/5}(n^{2/3}d+n)\). In particular, for \(d n^{2/3}\) we have \(g^{Lazy}(n,d) g^{VR}(n,d)\) and thus for \(d n^{2/3}\)_it is better to use Lazy Hessians_ than variance-reduced Hessians from a gradient equivalent cost perspective. We note also that for the Lazy approach, we can keep a factorization of the Hessian (this factorization induces most of the cost of solving the cubic subproblem) and thus it is as if we only need to solve the subproblem once every \(m\) iterations, so the Lazy approach has a big advantage compared to the general approach, and the advantage becomes even bigger for the case of large dimensions.

Note that according to the theory, we could use the same random batches \(_{g},_{h}[n]\) generated once for all iterations. However, using the resampled batches can lead to a more stable convergence.

### Other Applications

The result in (10) is general enough that it can include many other applications that are only limited by our imagination. To cite a few such applications there are:

**Core sets.** The idea of core sets is simple: can we summarize a potentially big data set using only a few (weighted) important examples? Many reasons such as redundancy make the answer yes. Devising approaches to find such core sets is outside of the scope of this work, but in general, we can see from (10) that if we have batches \(_{g},_{h}\) such that they are \((_{1},1)\) and \((_{2},2)\) similar to \(f\) respectively, then we can keep reusing the same batch \(_{g}\) for at least \(}}\) times, and \(_{h}\) for \(}\) all the while guaranteeing an improved rate. So then if we can design such small batches with small \(_{1}\) and \(_{2}\) then we can keep reusing them, and Joy the improved rate without needing large batches.

**Auxiliary learning.**[4; 2; 31] study how a given task \(f\) can be trained in the presence of auxiliary (related) tasks. Our approach can be indeed used for auxiliary learning by treating the auxiliaries as helpers. If we compare (10) to the rate that we obtained without the use of the helpers: \((F_{0}}{S})\), we see that we have a better rate using the helpers/auxiliary tasks when \(+}}{}+}}{ } 1\).

**Semi-supervised learning.** Semi-supervised learning is a machine learning approach that combines the use of both labeled data and unlabeled data during training. In general, we can use the unlabeled data to construct the helpers, we can start for example by using random labels for the helpers and improving the labels with training. There are at least two special cases where our theory implies improvement by only assigning random labels to the unlabeled data. In fact, for both regularized least squares and logistic regression, we notice that the Hessian is independent of the labels (only depends on inputs) and thus if the unlabeled data comes from the same distribution as the labeled data, then we can use it to construct helpers which, at least theoretically, have \(_{1}=_{2}=0\). Because the Hessian is independent of the labels, we can technically endow the unlabeled data with random labels. Theorem 2 would imply in this case \([_{L}(_{out})]=(F_{0}}{ Sm})\), where \(S\) is the number of times we use labeled data and \(S(m-1)\) is the number of unlabeled data.

## 4 Gradient-Dominated Functions

We consider now the class of gradient-dominated functions defined below.

**Assumption 4**: \((,)\)**-gradient dominated.** _A function \(f\) is called gradient dominated on set if it holds, for some \( 1\) and \(>0\):_

\[f()-f^{}  \| f()\|^{}, {x}^{d}.\] (11)

Examples of functions satisfying this assumption are convex functions (\(=1\)) and strongly convex functions (\(=2\)), see Appendix D.1. For such functions, we can guarantee convergence (in expectation) to a _global minimum_, i.e. we can find a point \(\) such that \(f()-f^{}\).

The Gradient-dominance property is interesting because many non-convex functions have been shown to satisfy it [28; 13; 18]. Furthermore, besides convergence to a global minimum, we get accelerated rates.

We note that for \(>3/2\) (and only for this case), we needed to assume the following (stronger) inequality:

\[f(_{t})-f^{}  \| f(_{t})\|^{ },\] (12)

where the expectation is taken with respect to the iterates \((_{t})\) of our algorithms. This is a stronger assumption than (11). To avoid using this stronger assumption, we can assume that the iterates belong to some compact set \(Q^{d}\) and that the gradient norm is uniformly bounded: \( Q:\| f()\| G\). Then, a \((,)\)-gradient dominated on set \(Q\) function is also a \(( G^{-3/2},3/2)\)-gradient dominated on this set for any \(>3/2\).

In Theorem 3 we extend the results of Theorem 1 to gradient-dominated functions.

**Theorem 3**: _Under Assumptions 1,2,4, for \(M L\) and \(T:=Sm\) we have: - For \(1 3/2\): \([f(_{T})]-f^{}=^{3/(2)}}{(3-2)T}^{}+ ^{2}}{M^{}}+_{1}^{}\). - For \(3/2< 2\), let \(h_{0}=(}{(^{})^{}})\), then for \(T t_{0}=({h_{0}}^{}(h_{0}))\) we have:_

\[E[f(_{T})]-f^{} = (^{})^{}^{()^{T-t_{0}}}+ ^{2}}{M^{}}+_{1}^{}\;.\]

Theorem 3 shows (up to the noise level) for \(1<3/2\) a sublinear rate, for \(=3/2\) a linear rate (obtained by taking the limit \( 3/2\)) and a superlinear rate for \(>3/2\).

We do the same thing for Theorem 2 which we extend in Theorem 4. In this case, we need to set the snapshot line 3 in Algorithm 1) as in 5 i.e. the snapshot corresponds to the state with the smallest value of \(f\) during the last \(m\) iterations.

**Theorem 4**: _Under Assumptions 1,3,4, for \(M=(L,34_{1}m^{2},11_{2}m)\), we have: - For \(1 3/2\) : \([f(_{Sm})]-f^{}=^{3/(2)}}{(3-2)Sm}^{} \;.\) - For \(3/2< 2\), let \(h_{0}=(}{(}{m}^{})^{ }})\), then for \(S s_{0}=({h_{0}}^{}(h_{0}))\) we have:_

\[[f(_{Sm})]-f^{} = }{m}^{})^{ {2}{3-2}}^{()^{S-t_{0}} }\]

Again, the same behavior is observed as for Theorem 3 but this time without noise (variance reduction is working). To the best of our knowledge, this is the first time such analysis is made. As a direct consequence of our results, we obtain new global complexities for the variance-reduced and lazy variance-reduced Cubic Newton methods on the class of gradient-dominated functions.

To compare the statements of Theorems 3 and 4, for convex functions (i.e. \(=1\)), Theorem 3 guarantees convergence to a \(-\)global minimum in at most \((}+})\)_GradCost_, whereas Theorem 4 only needs \((})\)_GradCost_, where \(g(n,d)\) is either \(g^{Lazy}(n,d)=(nd)^{5/6} n\) or \(g^{VR}(n,d)=(nd)^{4/5}(n^{2/3}d+n)\). See the Appendix D.3 for more details.

## 5 Limitations and possible extensions

**Estimating similarity between the helpers and the main function.** While we show in this work that we can have an improvement over training alone, this supposes that we know the similarity constants \(_{1},_{2}\), hence it will be interesting to have approaches that can adapt to such constants.

**Engineering helper functions.** Building helper task with small similarities is also an interesting idea. Besides the examples in supervised learning and core-sets that we provide, it is not evident how to do it in a generalized way.

**Using the helper to regularize the cubic subproblem.** We note that while we proposed to approximate the "cheap" part as well in Section 3, one other theoretically viable approach is to keep it intact and approximately solve a "proximal type" problem involving \(h\), this will lead to replacing \(L\) by \(\), but the subproblem is even more difficult to solve. However our theory suggests that we don't need to solve this subproblem exactly, we only need \(m\). We do not treat this case here.

## 6 Conclusion

In this work, we proposed a general theory for using auxiliary information in the context of the cubically regularized Newton's method. Our theory encapsulates the classical stochastic methods as well as variance reduction and Lazy methods. For auxiliary learning, we showed a provable benefit compared to training alone. Besides studying the convergence for general non-convex functions for which we show convergence to approximate local minima, we also study gradient-dominated functions, for which convergence is accelerated and is to approximate global minima.