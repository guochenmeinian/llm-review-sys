# QWO: Speeding Up Permutation-Based Causal Discovery in LiGAMs

Mohammad Shahverdikondori

College of Management of Technology

EPFL, Lausanne, Switzerland

mohammad.shahverdikondori@epfl.ch

&Ehsan Mokhtarian

School of Computer and Communication Sciences

EPFL, Lausanne, Switzerland

ehsan.mokhtarian@epfl.ch

&Negar Kiyavash

College of Management of Technology

EPFL, Lausanne, Switzerland

negar.kiyavash@epfl.ch

###### Abstract

Causal discovery is essential for understanding relationships among variables of interest in many scientific domains. In this paper, we focus on permutation-based methods for learning causal graphs in Linear Gaussian Acyclic Models (LiGAMs), where the permutation encodes a causal ordering of the variables. Existing methods in this setting do not scale due to their high computational complexity. These methods are comprised of two main components: (i) constructing a specific DAG, \(^{}\), for a given permutation \(\), which represents the best structure that can be learned from the available data while adhering to \(\), and (ii) searching over the space of permutations \(\)s (i.e., causal orders) to minimize the number of edges in \(^{}\). We introduce QW-Orthogonality (QWO), a novel approach that significantly enhances the efficiency of computing \(^{}\) for a given permutation \(\). QWO has a speed-up of \(O(n^{2})\) (\(n\) is the number of variables) compared to the state-of-the-art BIC-based method, making it highly scalable. We show that our method is theoretically sound and can be integrated into existing search strategies such as GRaSP and hill-climbing-based methods to improve their performance. The implementation is publicly available at [https://github.com/ban-epfl/QWO](https://github.com/ban-epfl/QWO).

## 1 Introduction

Causal discovery is fundamental to understanding and modeling the relationships between variables in various scientific domains . A causal graph, typically represented by a directed acyclic graph (DAG), is a graphical model that represents how variables within a system influence one another . The problem of causal discovery refers to learning the causal graph from available data , which has broad applications across numerous fields such as economics , genetics , and social sciences .

Score-based methods are an important class of approaches for causal discovery . They involve defining a score function over the space of DAGs and seeking the graph that maximizes this score. However, the computational complexity of exploring the space of all possible DAGs, which is in the order of \(2^{(n^{2})}\), where \(n\) is the number of variables, poses a significant challenge . Ordering-based methods, introduced by , significantly reducethe search space of score-based methods to \(2^{(n(n))}\) by considering only topological orderings of DAGs, rather than the DAGs themselves . Building on this premise, various permutation-based methods have been proposed that further refine the search for causal structures . These methods have two main ingredients:

1. **Constructing \(^{}\):** A module that for any given permutation \(\) constructs a specific DAG, denoted by \(^{}\). We will formally define \(^{}\) in Definition 3.1, but roughly speaking, this DAG represents the _best_ structure that can be inferred from the data while conforming to the given permutation \(\).
2. **Search over \(\):** The work by  (which proposed the Sparsest Permutation algorithm) showed that the correct permutation minimizes the number of edges in \(^{}\). Accordingly, permutation-based methods are equipped with a search strategy that, using the module mentioned above for computing \(^{}\), searches through the space of permutations to minimize the number of edges in \(^{}\).

In recent years, various search methods have been developed to enhance the accuracy, robustness, and scalability of the algorithm for the second part, i.e., searching over the permutations . These methods typically involve traversing over the space of permutations by iteratively updating a permutation to reduce the number of edges in \(^{}\), using the first module to construct \(^{}\) multiple times during the algorithm's execution. To construct \(^{}\) or update \(^{}\) after a permutation update, most methods utilize a decomposable score function and identify the parent set that maximizes the score of each variable. Table 1 presents a time complexity comparison of different methods for computing and updating \(^{}\). We will delve into a more detailed discussion of these methods and their computational complexity in Section 3.

In this paper, we focus on linear Gaussian acyclic models (LiGAMs), an important class of continuous causal models. We propose a novel method called QW-Orthogonality (QWO) for computing \(^{}\) for a given permutation \(\), which significantly enhances the computational efficiency of this module. Specifically, as shown in Table 1, QWO's complexity is independent of the number of data points \(N\). Moreover, it speeds up computing/updating \(^{}\) by \(O(n^{2})\) compared to the state-of-the-art BIC-based method. Some key advantages of QWO are as follows:

1. **Soundness:** QWO is theoretically sound for LiGAM models. That is, it is guaranteed to learn \(^{}\) accurately for any given permutation \(\) when sufficient samples are available.
2. **Scalability:** The proposed method is scalable to large graphs. Its time complexity is independent of the number of samples, and its dependence on the number of variables \(n\) is \(O(n^{2})\) faster than the state-of-the-art BIC-based method.
3. **Compatibility with existing search methods:** After updating a permutation, QWO efficiently updates \(^{}\) to improve its compatibility with established search methods. In our experiments, we combine QWO with both GRaSP  and a hill-climbing-based search technique , showing its superior performance in terms of time complexity.

## 2 Notations

Throughout this paper, matrices are denoted by capital letters, and sets or vectors of random variables are denoted by bold capital letters. We use the terms "variable" and "vertex" interchangeably in graphs. \([n]\) denotes the set of natural numbers from 1 to \(n\), and \(([n])\) denotes the set of all \(n!\) permutations over \([n]\). For a permutation \([n]\), \(P_{}\) denotes the permutation matrix, such that for any \(n n\) matrix \(A\), the product \(P_{}AP_{}^{T}\) permutes the rows and columns of \(A\) according to the permutation \(\). The identity matrix is denoted by \(I\), and its dimension is implied by the context.

   Method & **QWO** & BIC & BDeu & CV General \\  Initial Complexity & \(O(n^{3})\) & \(O(n^{5})\) & \((n^{3}N(N))\) & \(O(N^{2}}{2N^{2}})\) \\ Update Complexity & \(O(n^{2}d)\) & \(O(n^{4}d)\) & \((n^{2}dN(N))\) & \(O(N^{3}}{k^{2}})\) \\   

Table 1: Time complexity comparison of various methods for computing and updating \(^{}\) in LiGAMs. Here, \(n\) is the number of variables, \(d\) is the length of the updated block of the permutation, and \(k\) is the number of folds considered in \(k\)-fold cross-validation.

\(\|A\|_{0}\) denotes the number of non-zero entries in matrix \(A\). The set of \(n n\) diagonal matrices is represented by \(_{n}\). \( a,b\) denotes the inner product of vectors \(a\) and \(b\). For a set \(=\{X_{1},,X_{n}\}\) and \([n]\), we define \(_{}=\{X_{i}|i\}\). \((A)\) denotes a diagonal matrix with the same diagonal elements as matrix \(A\).

In a directed graph (DG), edges are directed and may form cycles. A DG without cycles is called a directed acyclic graph (DAG). If there is a directed edge from \(X\) to \(Y\), then \(X\) is a parent of \(Y\). \(X\) is an ancestor of \(Y\) if there is a directed path from \(X\) to \(Y\). In a DAG \(\), for any vertex \(X\), \(e()\), \(_{}(X)\), and \(_{}(X)\) denote the number of edges, the parent set of \(X\), and the ancestor set of \(X\), respectively. Suppose \(\) is a permutation over the vertices of a DAG \(=(,)\). \(\) is a topological order for \(\), or equivalently \(\) is compatible with \(\), if for any edge \(X_{(i)} X_{(j)}\), \(i<j\).

**Definition 2.1** (LiGM, LiGAM, \(G(B)\)).: _Suppose \(=[X_{1},,X_{n}]^{T}\) is a random vector, \(B\) is an \(n n\) matrix such that \(I-B\) is invertible, and \(_{n}\). Pair \(=(B,)\) is called a linear Gaussian model (LiGM) that generates \(\) if_

\[=(I-B)^{-1}, \]

_where \((0,)\) is a Gaussian random vector with covariance matrix \(\). Equivalently, we have_

\[=B+. \]

_The causal graph of \(\), denoted by \(G(B)\), is a DG with the adjacency matrix corresponding to the support of \(B^{T}\). A LiGM is a linear Gaussian acyclic model (LiGAM) if its causal graph is a DAG._

The covariance matrix of \(\) in a LiGM \(=(B,)\) is given by

\[()=(I-B)^{-1}(I-B)^{-T}. \]

For distinct indices \(1 i,j n\), and \(\), we use \(X_{i}\!\!\! X_{j}|X_{}\) to denote that \(X_{i}\) and \(X_{j}\) are independent conditioned on \(X_{}\). The notion of _d-separation_ defined over DAGs is a graphical criterion to encode conditional independence (CI) within a graph. We similarly use \(X_{i}\!\!\! X_{j}|X_{}\) to denote that \(X_{i}\) and \(X_{j}\) are d-separated given \(X_{}\) in a DAG. For a formal definition of d-separation, see .

**Definition 2.2** ([\(\)]).: _Two DAGs are Markov equivalent if they impose the same d-separations. For a DAG \(\), the set of its Markov equivalent DAGs are represented by \([]\)._

In a LiGAM, the _Markov property_ states that if two variables are d-separated in the DAG, then they are conditionally independent in the corresponding probability distribution. This property holds for structural equation models (SEMs), including LiGAMs; see Theorem 1.2.5 in  for more details. Conversely, the _faithfulness_ assumption posits that if two variables are conditionally independent in the distribution, then they are d-separated in the DAG. Together, the Markov property and faithfulness establish a one-to-one correspondence between the graphical d-separations and the conditional independencies in the distribution.

While the faithfulness assumption provides a strong correspondence between the distribution and the graph, it can be restrictive in practical applications. Recognizing this limitation, weaker versions of faithfulness have been proposed. One such alternative is the _sparsest Markov representation (SMR)_ assumption introduced by . Formally, for a DAG \(\) and a distribution \(P\) defined over the vertices of \(\), \((,P)\) satisfies the SMR assumption if \((,P)\) satisfies the Markov property, and for every DAG \(^{}\) such that \((^{},P)\) also satisfies the Markov property and \(^{}[]\), it holds that \(|^{}|>||\). Here, \(||\) denotes the number of edges in \(\).

## 3 Permutation-Based Causal Discovery in LiGAMs

In this section, we discuss permutation-based methods for causal discovery in LiGAMs. We begin by formalizing our assumptions, which will be referenced throughout the remainder of the paper.

**Assumption 1**.: _Let \(^{*}=(B^{*},^{*})\) be a LiGAM that generates the random vector \(=[X_{1},X_{2},,X_{n}]^{T}\). Let \(D\) be an \(N n\) data matrix, where each row is an i.i.d. sample from \(\). We assume that the pair \((^{*},P^{*})\) satisfies the (SMR) assumption, where \(^{*}=G(B^{*})\) is the causal graph of \(^{*}\) and \(P^{*}\) is the joint distribution of \(\)._Under Assumption 1, our goal is to learn the causal graph \(^{*}\) from the observational data \(D\). However, using mere observational data--even when the number of samples \(N\) approaches infinity--\(^{*}\) can only be identified up to its Markov equivalence class (MEC) . Therefore, the best we can aim for in the causal discovery of LiGAMs is to identify \([^{*}]\), a problem known to be computationally NP-hard .

As briefly discussed in the introduction, score-based methods aim to minimize a score function in the space of DAGs, whereas permutation-based methods restrict this space to topological orderings of DAGs. Thus, they seek a permutation \(\) such that \(\) is a topological order of a DAG in \([^{*}]\).

**Definition 3.1** (\(^{}\)).: _Under Assumption 1, for any arbitrary permutation \(([n])\), we denote by \(^{}=(,^{})\) the unique DAG constructed from \(P^{*}\) as follows: For distinct indices \(1 i,j n\), there is an edge from \(X_{(i)}\) to \(X_{(j)}\) in \(^{}\) if and only if_

\[i<j X_{(i)} X_{(j)}|X_{\{(1),(2), ,(j-1)\}\{(i)\}}. \]

**Remark 3.1**.: _For any \(\), \(^{}\) is compatible with \(\). Furthermore, if a DAG \([^{*}]\) is compatible with \(\), then \(^{}=\)._

 showed that a permutation \(\) minimizes the number of edges in DAG \(^{}\) if and only if \(\) is the topological order of a DAG in \([^{*}]\). Therefore, permutation-based methods typically formulate causal discovery as follows.

\[*{arg\,min}_{([n])}|^{}| \]

Various algorithms have been proposed for solving (5) . As discussed in the introduction, these methods include two components:

1. **Constructing \(^{}\):** A module that for a given permutation \(\) constructs \(^{}\).
2. **Search over \(\):** A search strategy over the space of permutations to solve (5).

Given that minimization in (5), search strategies typically traverse the space of permutations and greedily update the permutation. To maintain computational efficiency, these methods use a module to update \(^{}\) incrementally rather than recomputing it from scratch. Moreover, good search strategies are ideally consistent in permutation-based causal discovery. A consistent search method guarantees to solve (5) as long as it is equipped with a module that correctly computes \(^{}\). In Appendix A, we review two search strategies: GRaSP  and hill-climbing-based methods . GRaSP is consistent, ensuring that it finds the correct permutation that minimizes the number of edges in \(^{}\). In contrast, hill-climbing methods do not provide consistency guarantees but are shown to be efficient in practice.

Existing methods for computing \(^{}\) are primarily score-based and involve the following optimization:

\[*{arg\,max}_{\,} S(;D,)\] s.t. \[, \]

where \(S\) is typically a decomposable score function, summing individual scores for each variable given its parents within the graph:

\[S(;D,)=_{i=1}^{n}S(X_{i},_{}(X_{i});D,). \]

To find the parent set of each variable in \(^{}\), the following optimization is performed for all \(1 i n\):

\[_{^{}}(X_{(i)})=*{arg\,max}_{\{X_{(1)},,X_{(i-1)}\}}S(X_{(i)},;D,). \]

To solve (8), various approaches have been proposed. Note that the complexity of a brute-force search over all subsets \(\) is exponential, which makes it impractical. Instead, the state-of-the-art search methods apply the _grow-shrink (GS)_ algorithm  on the candidate sets \(\) to find the parent set of each variable. These methods require computing the score function \(S\), \(O(n^{2})\) times.

It is noteworthy that the chosen score function must ensure that the solution to this optimization problem equals \(^{}\). Examples of such scores include BIC , BDeu , and CV General . Table 1 compares the time complexity of our proposed method (QWO) against these methods. The Bayesian Information Criterion (BIC) is a well-known score in the literature, particularly for LiGAMs. BIC's complexity for calculating the initial graph is \(O(n^{5})\); the update is \(O(n^{4}d)\). The Bayesian Dirichlet equivalent uniform (BDeu) score applies a uniform prior over the set of Bayesian networks and uses this prior to evaluating the model's accuracy. While BDeu was originally designed for discrete data, it has been adapted for continuous data by dividing the real numbers into intervals and assigning a constant value for each interval. The time complexity of BDeu depends on the number of distinct values each variable can take (i.e., intervals). Its initial and update complexities are lower-bounded by \((n^{3}Nlog(N))\) and \((n^{2}dNlog(N))\), respectively. The Generalized Cross-Validated Likelihood (CV General) score involves splitting the dataset into training and test sets multiple times. The final score for a variable given its parents is the average log-likelihood evaluated on the test sets using the regression functions learned from the training data. The CV General method has an initial complexity of \(O(N^{3}}{k^{2}})\) and an update complexity of \(O(}{k^{2}})\). This method typically uses a small constant \(k\) for \(k\)-fold cross-validation, which significantly increases the computational complexity. Among the aforementioned three strategies, BIC is the fastest. Our proposed method, QWO, attains a speed-up of \(O(n^{2})\) compared to BIC.

## 4 Qwo

In this section, we present a novel approach for computing \(^{}\) for a permutation \(\), with improved computational complexity, which can be easily integrated into existing search methods. Our proposed method proceeds with an alternative formulation for causal discovery in LiGAMs, but first, we need a definition.

**Definition 4.1** (\(()\)).: _For a random vector \(\), we denote by \(()\) the set of coefficient matrices of LiGMs that generate \(\), i.e.,_

\[()=\{B|_{n}()=(I-B)^{-1}(I-B)^{-T}\}.\]

Note that in this definition, the causal graphs corresponding to the elements of \(()\) can be cyclic, but we restrict our attention to a subset of \(()\) with acyclic corresponding graphs. We reformulate causal discovery in LiGAMs as follows:

\[()}{} \|B\|_{0}.\] (9) s.t. \[G(B)\]

It has been shown that for any solution \(B\) of (9), \(G(B)\) belongs to \([^{*}]\). Furthermore, for any graph \([^{*}]\), there exists a solution \(B\) to (9) such that \(G(B)=\). Therefore, solving (9) is equivalent to performing causal discovery in LiGAMs.

In the following, we establish the relationship between \(()\) and \(^{}\).

**Theorem 4.2**.: _Under Assumption 1, for any permutation \(([n])\), there exists a unique \(B()\) such that \(G(B)\) is compatible with \(\). Furthermore, for this \(B\), \(G(B)=^{}\)._

All proofs are provided in Appendix C. Theorem 4.2 implies that to compute \(^{}\), we can directly find the unique \(B()\) whose corresponding graph \(G(B)\) is compatible with \(\). Next, we propose a characterization for \(()\) using whitening transformation .

**Definition 4.3** (Whitening matrix \(W\)).: _Let \(Cov()=USU^{T}\) be the singular value decomposition (SVD) of \(Cov()\), where \(S\) is a diagonal matrix including the singular values of \(Cov()\) on its diagonal and \(U\) is an orthonormal matrix (i.e., \(UU^{T}=I\)). The whitening matrix \(W\) is defined as_

\[W:=US^{-}U^{T}. \]

We note that the 'W' in QWO corresponds to the whitening matrix \(W\). Whitening is a linear transformation \(_{I}:=W\) that transforms the Gaussian random vector \(\) to another Gaussian random vector \(_{I}\), where \(Cov(_{I})=I\). Furthermore, for an arbitrary orthogonal matrix \(Q\) (i.e., \(QQ^{T}_{n}\)), if we define \(_{Q}:=Q_{I}=QW\), then it is straightforward to show that \(_{Q}\) is also a Gaussian random vector with mean zero and a diagonal covariance matrix. Therefore, \((I-QW,_{Q})\) is a LiGM that generates \(\) since

\[=(I-QW)+_{Q}.\]

In the following, we show that such LiGMs create all possible LiGMs that generate \(\).

**Theorem 4.4** (Characterizing \(()\)).: _For any \(B()\), there exists a unique orthogonal matrix \(Q\) such that \(B=I-QW\), and vice versa. That is,_

\[()=\{I-QW|\,QQ^{T}_{n}\}. \]

By combining Theorems 4.2 and 4.4, to learn \(^{}\), it is sufficient to identify the unique orthogonal matrix \(Q\) such that \(G(I-QW)\) is compatible with \(\). To verify this compatibility, we impose the following two constraints:

\[P_{}QWP_{}^{T}(P_{}QWP_{ }^{T})=I. \]

### The QWO Method

In this subsection, we introduce QW-Orthogonality (QWO), our proposed approach for computing \(^{}\) in LiGAMs. The function QWO in Algorithm 1 presents the pseudocode of our method. The function takes a permutation \(\) and a whitening matrix \(W\) as inputs, with optional arguments \(l\), \(r\), and \(Q\). First, we consider the case where these optional arguments are not provided, and they are initialized as follows: \(_{l}=1\), \(_{r}=n\), and \(Q\) to be an arbitrary \(n n\) matrix. The goal of this function is to create a matrix \(Q\) that is the unique solution of (12) and subsequently to compute \(^{}\).

Denote the columns of \(Q^{T}\) by \(\{q_{i}\}_{i=1}^{n}\) and the columns of \(W\) by \(\{w_{i}\}_{i=1}^{n}\). Since \(W=US^{-}U^{T}\), all the eigenvalues of \(W\) are positive, and thus \(\{w_{i}\}_{i=1}^{n}\) are \(n\) linearly independent vectors in an \(n\)-dimensional space. Furthermore, because \(Q\) is an orthogonal matrix for each pair \((i,j)\), \(1 i j n\), \(q_{i} q_{j}\). The condition \(P_{}QWP_{}^{T}\) is upper triangular in (12) implies that \(q_{(i)}\) should be orthogonal to \(w_{(j)}\) if \(j>i\). Therefore, we need to find \(\{q_{i}\}_{i=1}^{n}\) such that this condition holds. Note that each zero in \(\|I-QW\|_{0}\) corresponds to an orthogonality between \(\{q_{i}\}_{i=1}^{n}\) and \(\{w_{i}\}_{i=1}^{n}\).

With this intuition, we propose our approach for constructing \(Q\), which maximizes the number of aforementioned orthogonality. To do so, we apply the Gram-Schmidt algorithm to the vectors \(\{w_{i}\}_{i=1}^{n}\) in the following order: \((n)\), \((n-1)\),..., \((1)\). In Algorithm 1, we iteratively for each \(i\), compute \(r_{i}\), the residual of projecting \(w_{(i)}\) on the span of \(\{w_{(i+1)},,w_{(n)}\}\). This is equivalent to projecting \(w_{(i)}\) on the span of \(\{q_{(i+1)},,q_{(n)}\}\), which are orthogonal to each other. \(q_{(i)}\) is set to normalized residual \(r_{i}\), which ensures that the product of \(q_{(i)}\) and \(w_{(i)}\) is 1, and consequently, \((P_{}QWP_{}^{T})=(QW)=I\). Finally, we use Theorem 4.2 to construct \(^{}=G(I-QW)\) and return \(^{}\) and \(Q\).

**Theorem 4.5** (Soundness of Algorithm 1).: _Under Assumption 1 and given the correct whitening matrix \(W\) as input, matrix \(Q\), the output of Algorithm 1 is the unique solution to (12). Consequently, the returned graph corresponds to the true \(^{}\) defined in Definition 3.1._

The optional arguments \(_{l}\), \(_{r}\), and \(Q\) allow for incremental efficient updates to \(\).

**Lemma 4.6**.: _If the block between the \(_{l}\)-th and \(_{r}\)-th positions of \(\) is modified, the vectors \(q_{(k)}\) for \(k<_{l}\) or \(k>_{r}\) remain unchanged._

A consequence of Lemma 4.6 is that \(q_{(k)}\) for \(k<_{l}\) or \(k>_{r}\) from the previous computed \(Q\) can be reused and it sufficed to merely recompute the vectors within the updated block by iterating through the for loop in lines 4-7.

```
1:Input: Data matrix \(D\), Search method \(\)
2:Estimate \(()\) using data matrix \(D\)
3:\(U,S\) Compute the SVD decomposition of \(()\), such that \(()=USU^{T}\)
4:\(W US^{-}U^{T}\) % Whitening matrix
5:\(\) An initial permutation
6:\(^{},Q\)QWO(\(,W\))
7:while\(\) has not stopped do
8:\(^{}\) Update \(\) according to \(\), and let \(_{l}\) and \(_{r}\) be the leftmost and rightmost index of \(\) that have been updated, respectively
9:\(^{^{}},Q^{}\)QWO(\(,W\), \(_{l}\), \(_{r}\), \(Q\))
10:if\(^{^{}}\) has less number of edges than \(^{}\)then
11:\(,Q,^{}^{},Q^{},^{^{ }}\)
12:endif
13:endwhile
14:Return\(^{}\)
```

**Algorithm 2** Integrating QWO into a simple search method for causal discovery

**Theorem 4.7** (Time complexity of Algorithm 1).: _QWO algorithm as implemented in Algorithm 1 has the following time complexities:_

* \(O(n^{3})\) _for initially computing_ \(^{}\) _without optional arguments._
* \(O(n^{2}d)\) _when called with optional arguments to update_ \(^{}\)_, where_ \(d=_{r}-_{l}\)_._

### Integrating QWO in Existing Search Methods

Algorithm 2 demonstrates how QWO can be integrated into existing search methods such as GRaSP  and Hill-Climbing . This algorithm integrates QWO into a simple permutation-based search method for causal discovery that iteratively updates the permutation to minimize the number of edges in \(^{}\). Initially, the algorithm estimates the covariance matrix of \(\) and applies SVD to compute the whitening matrix. Starting from an initial permutation, it calls function QWO to compute \(Q\) and \(^{}\). Subsequently, the algorithm iteratively updates the permutation using the given search method \(\)1. For each updated permutation, it calls function QWO with optional arguments to compute the new \(Q\) and \(^{}\) graph. Next, the algorithm checks if the new permutation is better than the previous one by checking whether the new graph has fewer edges. If the new permutation is better, it updates the permutation and proceeds to the next iteration. The search algorithm stops when its stopping criterion is satisfied and returns the final \(\) and \(^{}\).

## 5 Experiments

In this section, we present a comprehensive evaluation of QWO, which is designed for the module that computes \(^{}\) in permutation-based causal discovery methods in LiGAMs. As discussed earlier, a permutation-based method consists of two components: a search method and a module for computing \(^{}\). Our comparison focuses on the module for computing \(^{}\), where we benchmark QWO against existing methods, namely BIC , BDeu , and CV General . For the search method, we utilized two specific algorithms: GRaSP  and Hill-Climbing (HC) . Please refer to Appendix B for the implementation details of these methods and additional results.

We generated random graphs according to an Erdos-Renyi model with an average degree of \(i\) for each node, denoted by \(ERi\). We did not impose any constraints on the maximum degree of the nodes. To generate the data matrix \(D\) using a LiGAM \((B^{*},^{*})\), we sampled the entries of \(B^{*}\) from \([-2,-0.5][0.5,2]\) and the noise variances uniformly from \(\). Each reported number on the plots is an average of \(30\) random graphs.

Two metrics were used to evaluate the performance of the methods:

* **Skeleton F1 Score (SKF1):** The F1 score between the skeleton of the predicted graph and the skeleton of the true graph, which ranges from 0 to 1, where 1 indicates perfect accuracy.
* **Complete PDAG SHD (PSHD):** For the true DAG \(\) and predicted DAG \(}\), PSHD calculates the complete PDAGs of \([]\) and \([}]\) and evaluates the number of changes (edge addition, removal, and type change) needed to obtain one PDAG from the other, normalized by the number of nodes. This metric shows the distance between the Markov equivalence classes of the predicted graph and the true graph.

We carried out our experiments in four settings:

* **Low-Dimensional Data:** We evaluated the performance of QWO and other methods on small real-world graphs, namely ASIA , CANCER , SACHS , and SURVEY , as well as \(ER2\) graphs with 5 nodes. The number of data samples for this part is set to 500. The results of different methods using both search strategies are presented in Table 2. As shown in the table, QWO demonstrates comparable accuracy to the other approaches for different graph structures while being significantly faster.
* **High-Dimensional Data:** In this setting, we assessed the performance of QWO on larger graphs with 10,000 data samples. Due to the exceedingly long runtime of BDeu and CV General, which are orders of magnitude slower in this setting, they were not included in this experiment. Instead, we compared QWO with the BIC score using both GRaSP and Hill-Climbing search methods. As illustrated in Figure 1, while maintaining high accuracy, QWO demonstrates a significant speedup over BIC for both search methods.

    & CANCER & SURVEY & ASIA & SACHS & ER2 \\   &  &  &  & 11 & 5 \\  &  &  &  & 3.09 & 2 \\   &  & SKF1 & 1 & 1 & 0.87 & 0.88 & 0.85 \\  & & PSHD & 0 & 0 & 0.87 & 0.63 & 0.2 \\  & & Time (s) & 0.003 & 0.004 & 0.01 & 0.04 & 0.002 \\   &  & SKF1 & 0.88 & 0.92 & 0.94 & 0.88 & 0.97 \\  & & PSHD & 0.6 & 0.5 & 0.625 & 0.63 & 0.4 \\  & & Time (s) & 0.01 & 0.01 & 0.01 & 0.05 & 0.003 \\   &  & SKF1 & 1 & 1 & 1 & 0.93 & 1 \\  & & PSHD & 0 & 0 & 0 & 0.81 & 0 \\  & & Time (s) & 0.06 & 0.07 & 0.08 & 0.39 & 0.02 \\   &  & SKF1 & 0.88 & 0.61 & 0.94 & 0.93 & 0.97 \\  & & PSHD & 0.8 & 1.33 & 0.625 & 0.54 & 0.4 \\  & & Time (s) & 0.01 & 0.05 & 0.08 & 0.83 & 0.15 \\   &  & SKF1 & 0.25 & 0.36 & 0.26 & 0.29 & 0.12 \\  & & PSHD & 1.4 & 1.5 & 1.5 & 1.72 & 1.4 \\  & & Time (s) & 44.1 & 72.1 & 116.6 & 211.6 & 41.1 \\   &  & SKF1 & 0.5 & 0.54 & 0.4 & 0.37 & 0.6 \\  & & PSHD & 1.2 & 1.16 & 1.374 & 1.81 & 1.2 \\  & & Time (s) & 64.4 & 95.1 & 224.4 & 496.6 & 78.2 \\   &  & SKF1 & 1 & 0.57 & 0.76 & 0.87 & 0.85 \\  & & PSHD & 0 & 1.66 & 1.12 & 0.90 & 0.2 \\   & & Time (s) & 109.6 & 296.3 & 641.1 & 867.5 & 101.6 \\    &  & SKF1 & 1 & 0.5 & 0.88 & 0.87 & 0.9 \\   & & PSHD & 0 & 1.33 & 1.12 & 0.72 & 0.6 \\   & & Time (s) & 176.7 & 358.6 & 1169.4 & 1325.7 & 213.3 \\   

Table 2: Results for small graphs using GRaSP and Hill-Climbing as search methods.

* **Non-Gaussian Noise Experiments:** To test the robustness of our method, we conducted experiments where the main assumption of Gaussian noise in the data-generating process was violated. We evaluated QWO on linear models with non-Gaussian noise distributions (specifically exponential and Gumbel distributions). The results of these experiments appear in Appendix B. Although QWO is designed for linear models with Gaussian noise, these experiments show that QWO achieves almost similar accuracy to LiGAMs on models with exponential and Gumbel noise distributions.
* **Oracle Inverse Covariance Experiments:** In practice, errors in learning the graph may arise from two sources: the error in calculating the inverse of the covariance matrix and the error in the optimization problem. To study the effect of each error separately, we designed an experiment to eliminate the first source of error by providing the correct inverse covariance matrix (similar to the approach in ). We then compared the performance of the algorithms under this condition. The results of these experiments appear in Appendix B. The plots show that the accuracy

Figure 1: Results of performing QWO and BIC on both search methods GRaSP and HC on data generated by LiGAMs for different Erdos-Renyi graphs (\(ER2\), \(ER3\), \(ER4\)).

of our method is now significantly high, indicating that the main source of error lies in the initial step of estimating the covariance matrix.

## 6 Conclusion, Limitations, and Future Work

In this paper, we proposed QWO, a module to accelerate permutation-based causal discovery in LiGAMs. Our method reduces the computational complexity of constructing and updating the graph \(^{}\) for a given permutation by \(O(n^{2})\), resulting in a significant speed-up compared to the state-of-the-art BIC-based method, as demonstrated both theoretically and through extensive experiments. Furthermore, QWO seamlessly integrates into existing search strategies, enhancing their scalability without compromising accuracy.

While our method offers substantial improvements, it is important to acknowledge its limitations. The primary assumptions underpinning QWO are that the underlying causal model is a LiGAM--that is, it assumes linear relationships among variables, additive Gaussian noise, and an acyclic causal graph structure. These assumptions, though common in many applications, restrict the applicability of our method to scenarios where these conditions hold. In real-world datasets, relationships may be nonlinear, noise may not be Gaussian, or the causal graph may contain cycles due to feedback loops or reciprocal relationships among variables. Notably, our experiments indicate that QWO maintains competitive performance even when the Gaussian noise assumption is violated, achieving similar accuracy on models with non-Gaussian noise distributions such as exponential and Gumbel (see Appendix B). However, the acyclicity assumption can be particularly limiting in domains where feedback mechanisms are inherent, such as economics, biology, and control systems, where causal graphs are cyclic and methods designed for acyclic graphs are not directly applicable.

Despite this limitation, our work opens avenues for extending permutation-based causal discovery to more general settings. Notably, the set \(()\) is defined over all LiGMs, encompassing both cyclic and acyclic models. Therefore, our characterization of \(()\) in Theorem 4.4 holds for LiGMs as well. Combining this result with our reformulation of causal discovery in LiGAMs in (9), we can generalize the formulation to LiGMs as follows:

\[*{arg\,min}_{Q:QQ^{T}_{n}}\|I-QW\|_{0}. \]

This suggests that causal discovery in LiGMs can be approached by finding an orthogonal matrix \(Q\) that sparsifies \(I-QW\). Some recent works have explored causal discovery in cyclic models using orthogonal transformations similar to ours . However, solving the optimization problem in Equation (13) is challenging due to its non-convexity and the orthogonality constraint on \(Q\). Developing efficient algorithms to solve this problem is a promising direction for future work.