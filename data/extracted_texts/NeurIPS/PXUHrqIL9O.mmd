# Selective Mixup Helps with Distribution Shifts,

But Not (Only) because of Mixup

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

**Context.** Mixup is a highly successful technique to improve generalization of neural networks by augmenting the training data with combinations of random pairs. Selective mixup is a family of methods that apply mixup to specific pairs, e.g. only combining examples across classes or domains. These methods have claimed remarkable improvements on benchmarks with distribution shifts, but their mechanisms and limitations remain poorly understood.

**Findings.** We examine an overlooked aspect of selective mixup that explains its success in a completely new light. We find that the non-random selection of pairs affects the training distribution and improve generalization by means completely unrelated to the mixing. For example in binary classification, mixup across classes implicitly resamples the data for a uniform class distribution -- a classical solution to label shift. We show empirically that this implicit resampling explains much of the improvements in prior work. Theoretically, these results rely on a "regression toward the mean", an accidental property that we identify in several datasets.

**Takeaways.** We have found a new equivalence between two successful methods: selective mixup and resampling. We identify limits of the former, confirm the effectiveness of the latter, and find better combinations of their respective benefits.

## 1 Introduction

Mixup and its variants are some of the few methods that improve generalization across tasks and modalities with no domain-specific information . Standard mixup replaces training data with linear combinations of random pairs of examples, proving successful e.g. for image classification , semantic segmentation , natural language processing , and speech processing .

This paper focuses on scenarios of distribution shift and on variants of mixup that improve out-of-distribution (OOD) generalization. We examine the family of methods that apply mixup on selected pairs of examples, which we refer to as _selective mixup_. Each of these method uses a predefined criterion.1 For example, some methods combine examples across classes  (Figure 1) or across domains . These simple heuristics have claimed remarkable improvements on benchmarks such as DomainBed , WILDS , and Wild-Time .

Despite impressive empirical performance, the theoretical mechanisms of selective mixup remain obscure. For example, the selection criteria proposed in  include the selection of pairs of the same class / different domains, but also the exact opposite.

This raises questions:

1. What mechanisms are responsible for the improvements of selective mixup?
2. What makes each selection criterion suitable to any specific dataset?

This paper presents surprising answers by highlighting an overlooked side effect of selective mixup. **The non-random selection of pairs implicitly biases the training distribution and improve generalization by means completely unrelated to the mixing**. We observe empirically that simply concatenating - rather than mixing - the selected pairs along the mini-batch dimension often produces the same improvements as mixing them. This critical ablation was absent from prior studies.

We also analyze theoretically the resampling induced by different selection criteria. We find that conditioning on a "different attribute" (e.g. combining examples across classes or domains) brings the training distribution of this attribute closer to a uniform one. Consequently, the imbalances in the data often "regress toward the mean" with selective mixup. We verify empirically that several datasets do indeed shift toward a uniform class distribution in their test split (see Figure 10). We also find remarkable correlation between improvements in performance and the reduction in divergence of training/test distributions due to selective mixup. This also predicts an unknown failure mode of selective mixup when the above property does not hold.

**Our contributions are summarized as follows.**

* We point out an overlooked resampling effect when applying selective mixup (Section 3).
* We show theoretically that certain selection criteria induce a bias in the distribution of features and/or classes equivalent to a "regression toward the mean" (Theorem 3.1). In binary classification for example, selecting pairs across classes is equivalent to sampling uniformly over classes, the standard approach to address label shift and imbalanced data.
* We verify empirically that multiple datasets indeed contain a regression toward a uniform class distribution across training and test splits (Section 4.6). We also find that improvements from selective mixup correlate with reductions in divergence of training/test distributions over labels and/or covariates. This strongly suggests that resampling is the main driver for these improvements.
* We compare many selection criteria and resampling baselines on five datasets. In all cases, improvements with selective mixup are partly or fully explained by resampling effects (Section 4).

**The implications for future research are summarized as follows.**

* We connect two areas of the literature by showing that selective mixup is sometimes equivalent to resampling, a classical strategy for distribution shifts . This hints at possible benefits from advanced methods for label shift and domain adaptation on benchmarks with distribution shifts.
* The resampling explains why different criteria in selective mixup benefit different datasets: they affect the distribution of features and/or labels and therefore address covariate and/or label shift.
* There is a risk of overfitting to the benchmarks: we show that much of the observed improvements rely on the accidental property of a "regression toward the mean" in the datasets examined.

Figure 1: Selective mixup is a family of methods that replace the training data with combined pairs of examples fulfilling a predefined criterion, e.g. pairs of different classes. As an overlooked side effect, this modifies the training distribution: in this case, sampling classes more uniformly. This effect is responsible for much of the resulting improvements in OOD generalization.

Background: mixup and selective mixup

**Notations.** We consider a classification model \(f_{}:^{d}^{C}\) of learned parameters \(\). It maps an input vector \(^{d}\) to a vector \(\) of scores over \(C\) classes. The training data for such a model is typically a set of labeled examples \(=\{(_{i},_{i},d_{i})\}_{i=1}^{n}\) where \(_{i}\) are one-hot vectors encoding ground-truth labels, and \(d_{i}\) are optional discrete domain indices. Domain labels are sometimes available e.g. in datasets with different image styles  or collected over different time periods .

**Training with ERM.** Standard empirical risk minimization (ERM) optimizes the model's parameters for \(_{}\ (f_{},)\) where the expected training risk, for a chosen loss function \(\), is defined as:

\[(f_{},)\ =\ _{(,) }\ f_{}(),.\] (1)

An empirical estimate is obtained with an arithmetic mean over instances of the dataset \(\).

**Training with mixup.** Standard mixup essentially replaces training examples with linear combinations of random pairs in both input and label space. We formalize it by redefining the training risk.

\[_{}(f_{},)\ =\ _{(,) }\ f(c\,\!+\!(1\!-\!c)},\ c\,\!+\!( 1\!-\!c)\,})\] (2)

with mixing coefficients \(c(2,2)\) and paired examples \((},})\). (3)

The expectation is approximated by sampling different coefficients and pairs at every training iteration.

**Selective mixup.** While standard mixup combines random pairs, selective mixup only combines pairs that fulfill a predefined criterion. To select these pairs, the method starts with the original data \(\), then for every \((,,d)\) it selects a \((},},)\) such that they fulfill the criterion represented by the predicate \(,\). For example, the criterion _same class/different domain_ a.k.a. "intra-label LISA" in  is implemented as follows:

\[(_{i},_{i},d_{i}),(}_{i}, }_{i},_{i})\!=\!\ \ \ \ (}\!=\!)(\!\!d)\ \] (4a) Other examples: \[(_{i},_{i},d_{i}),(}_{i}, }_{i},_{i})\!=\!\ \ \ \ ( }\!\!)\] (4b) \[(_{i},_{i},d_{i}),(}_{i},}_{i},_{i})\!=\!\ \ \ \ ( \!=\!d)\] (4c)

## 3 Selective mixup modifies the training distribution

The new claims of this paper comprise two parts.

1. Estimating the training risk with selective mixup (Eq. 2) uses a different sampling of examples from \(\) than ERM (Eq. 1). We demonstrate it theoretically in this section.
2. We hypothesize that the biased sampling of training examples influences the generalization properties of the learned model, regardless of the mixing operation. We verify this empirically in Section 4 using ablations of selective mixup that omit the mixing operation -- a critical baseline absent from previous studies.

**Training distribution.** This distribution refers to the examples sampled from \(\) to estimate the training risk (Eq. 1 or 2) -- whether these are then mixed or not. The following discussion focuses on distributions over classes (\(\)) but analogous arguments apply to covariates (\(\)) and domains (\(d\)).

**With ERM**, the training distribution equals the dataset distribution because the expectation in Eq. (1) is over uniform samples of \(\). We obtain an empirical estimate by averaging all one-hot labels, giving the vector of discrete probabilities \(_{}()\ =\ _{(,)}\  /||\) where \(\) is the element-wise sum.

**With selective mixup**, evaluating the risk (Eq. 2) requires pairs of samples. The first element of a pair is sampled uniformly, yielding the same \(_{}()\) as ERM. The second element is selected as described above, using the first element and one chosen predicate \((,)\) e.g. from (4a-4c). For our analysis, we denote these "second elements" of the pairs as the virtual data:

\[}\ =\ (}_{i},}_{i}, _{i}):\ \ (_{i},_{i},d_{i}),(}_{i}, }_{i},_{i})\!=\!true,\ \ \,i=1,,| |}.\] (5)

We can now analyze the overall training distribution of selective mixup. An empirical estimate is obtained by combining the distributions resulting from the two elements of the pairs, which gives the vector \(_{}(})\ =\ (_{}( )\ \ _{}(}))/\,2\).

**Regression toward the mean.** With the criterion _same class_, it is obvious that \(_{}(})=_{}( )\). Therefore these variants of selective mixup are not concerned with resampling effects.2 In contrast, the criteria _different class_ or _different domain_ do bias the sampling. In the case of binary classification, we have \(_{}(})\!=\!1\!-\!_{}()\) and therefore \(_{}(})\) is uniform. This means that selective mixup with the _different class_ criterion has the side effect of balancing the training distribution of classes, a classical mitigation of class imbalance [10; 13]. For multiple classes, we have a more general result.

**Theorem 3.1**.: _Given a dataset \(\!=\!\{(_{i},_{i})\}_{i}\) and paired data \(}\) sampled according to the "different class" criterion, i.e. \(}=\{(}_{i},}_{i}) \;\;\;\;}_{i}\!\!_{i}\}\), then the distribution of classes in \(}\) is more uniform than in \(\). Formally, the entropy \(_{}() _{}(})\)._

Proof.: see Appendix C.

Theorem 3.1 readily extends in two ways. First, the same effect also results from the _different domain_ criterion: if each domain contains a different class distribution, the resampling from this criterion averages them out, yielding a more uniform aggregated training distribution. Second, this averaging applies not only to class labels (\(\)) but also covariates (\(\)). An analysis using distributions is ill-suited but the mechanism similarly affects the sampling of covariates when training with selective mixup.

**When does one benefit from the resampling (regardless of mixup)?** The above results mean that selective mixup can implicitly reduce imbalances (a.k.a. biases) in the training data. When these are not spurious and also exist in the test data, the effect on predictive performance could be detrimental.

We expect benefits (which we verify in Section 4) on datasets with distribution shifts, whose training/test splits contain different imbalances by definition. Softening imbalances in the training data is then likely to bring the training and test distributions closer to one another, in particular with extreme shifts such as the complete reversal of a spurious correlation (e.g. _waterbirds_, Section 4.1).

We also expect a benefit on worst-group metrics (e.g. with _civilComments_ in Section 4.4). The challenge in these datasets comes from the imbalance of class/domain combinations in the training data, and previous work has indeed shown that balancing is a competitive baseline [8; 24].

## 4 Experiments

We performed a large number of experiments to understand the contribution of the different effects of selective mixup and other resampling baselines (see Appendix B for complete results).

**Datasets.** We focus on five datasets that previously showed improvements with selective mixup. We selected them to cover a range of modalities (vision, NLP, tabular), settings (binary, multiclass), and types of distribution shifts (covariate, label, and subpopulation shifts).

* **Waterbirds** is a popular artificial dataset used to study distribution shifts. The task is to classify images of birds into two types. The image backgrounds are also of two types, and the correlation between birds and backgrounds is reversed across the training and test splits. The type of background in each image serves as its domain label.
* **CivilComments** is a widely-used dataset of online text comments to be classified as toxic or not. Each example is labeled with a topical attribute (e.g. Christian, male, LGBT, etc.) that is spuriously associated with ground truth labels in the training data. These attributes serve as domain labels. The target metric is the worst-group accuracy where the groups correspond to all toxicity/attribute combinations.
* **Wild-Time Yearbook** contains yearbook portraits to be classified as male or female. It is part of the Wild-Time benchmark, which is a collection of real-world datasets captured over time. Each example belongs to a discrete time period that serves as its domain label. Distinct time periods are assigned to the training and OOD test splits (see Figure 10).
* **Wild-Time arXiv** contains titles of arXiv preprints. The task is to predict each paper's primary category among 172 classes. Time periods serve as domain labels.
* **Wild-Time MIMIC-Readmission** contains hospital records (sequences of codes representing diagnoses and treatments) to be classified into two classes. The positive class indicates the readmission of the patient at the hospital within 15 days. Time periods serve as domain labels.

**Methods.** We train standard architectures suited to each dataset with the methods below (details in Appendix A). We perform early stopping i.e. recording metrics for each run at the epoch of highest ID or worst-group validation performance (for _Wild-Time_ and _waterbirdscivilComments_ datasets respectively). We plot average metrics in bar charts over 9 different seeds with error bars representing \(\) one standard deviation. **ERM** and **vanilla mixup** are the standard baselines. Baseline **resampling** uses training examples with equal probability from each class, domain, or combinations thereof as in [8; 24]. **Selective mixup** (\(\)) includes all possible selection criteria based on classes and domains. We avoid ambiguous terminology from earlier works because of inconsistent usage (e.g. "intra-label LISA" means "different domain" in  but not in ). **Selective sampling** (\(\)) is a novel ablation of selective mixup where the selected pairs are not mixed, but concatenated along the mini-batch dimension. Half of the pairs are dropped at random to keep the size of mini-batches constant. Therefore any difference between selective sampling and ERM is attributable only to resampling effects. We also include **novel combinations** (\(\)) of sampling and mixup. Code to reproduce our experiments and figures: https://github.com/<anonymized>/<anonymized>.

### Results on the _waterbirds_ dataset

The target metric for this dataset is the worst-group accuracy, with groups defined as the four class/domain combinations. The two difficulties are (1) a class imbalance (77 / 23%) and (2) a correlation shift (spurious class/domain association reversed at test time). See discussion in Figure 2.

We first observe that vanilla mixup is detrimental compared to ERM. Resampling with uniform class/domain combinations is hugely beneficial, for the reasons explained in Figure 3. The ranking of various criteria for selective sampling is similar whether with or without mixup. Most interestingly, the best criterion performs similarly, but no better than the best resampling.

### Results on the _yearbook_ dataset

The difficulty of this dataset comes from a slight class imbalance and the presence of covariate/label shift (see Figure 10). The test split contains several domains (time periods). The target metric is the worst-domain accuracy. Figure 4 shows that vanilla mixup is slightly detrimental compared to ERM. Resampling for uniform classes gives a clear improvement because of the class imbalance. With selective sampling (no mixup), the only criteria that improve over ERM contain "different class". This is expected because this criterion implicitly resamples for a uniform class distribution.

Figure 3: The sampling ratios of each class/domain clearly explain the performance of the best methods (_waterbirds_).

Figure 2: Main results on _waterbirds_.

To investigate whether some of the improvements are due to resampling, we measure the divergence between training and test distributions of classes and covariates (details in Appendix A). Figure 5) shows first that there is a clear variation among different criteria (\(\) blue dots) i.e. some bring the training/test distributions closer to one another. Second, there is a remarkable correlation between the test accuracy and the divergence, on both classes and covariates.3 This means that resampling effects do occur and also play a part in the best variants of selective mixup.

Finally, the improvements from simple resampling and the best variant of selective mixup suggest a new combination. We train a model with uniform class sampling and selective mixup using the "same class" criterion, and obtain performance superior to all existing results (last row in Figure 5). This confirms the **complementarity of the effects of resampling and within-class selective mixup**.

### Results on the _arXiv_ dataset

This dataset has difficulties similar to _yearbook_ and also many more classes (172). Simple resampling for uniform classes is very bad (literally off the chart in Figure 6) because it overcorrects the imbalance (the test distribution being closer to the training than to a uniform one). Uniform _domains_ is much better since its effect is similar but milder.

All variants of selective mixup (\(\)) perform very well, but they improve over ERM even without mixup (\(\)). And the selection criteria rank similarly with or without mixup, suggesting that parts of the improvements of selective mixup is due to the resampling. Given that vanilla mixup also clearly improves over ERM, the performance of **selective mixup is explained by cumulative effects of vanilla mixup and resampling effects**. This also suggests new combinations of methods (\(\)) among which we find one version marginally better than the best variant of selective mixup (last row).

Figure 4: Main results on _yearbook_.

Figure 5: Different selection criteria (\(\)) modify the distribution of both covariates and labels (upper and lower rows). The resulting reductions in divergence between training and test distributions correlate remarkably well with test performance.3 This confirms the contribution of resampling to the overall performance of selective mixup.

### Results on the _civilComments_ dataset

This dataset mimics a subpopulation shift because the worst-group metric requires high accuracy on classes and domains under-represented in the training data. It also contains an implicit correlation shift because any class/domain association (e.g. "Christian" comments labeled as toxic more often than not) becomes spurious when evaluating individual class/domain combinations.

For the above reasons, it makes sense that resampling for uniform classes or combinations greatly improves performance, as shown in prior work .

With selective mixup (), some criterion (same domain/diff. class) performs clearly above all others. But it works **even better without mixup**! () Among many other variations, **none surpasses the uniform-combinations baseline**.

Figure 8: Main results on _civilComments_. For the above reasons, it makes sense that resampling for uniform classes or combinations greatly improves performance, as shown in prior work .

Figure 6: Main results on _arXiv_.

Figure 7: Divergence of tr./test class distributions vs. test accuracy.

### Results on the _Mimic-Readmission_ dataset

This dataset contains a class imbalance (about 78/22% in training data), label shift (the distribution being more balanced in the test split), and possibly covariate shift. It is unclear whether the task is causal or anticausal (labels causing the features) because the inputs contain both diagnoses and treatments. The target metric is the area under the ROC curve (AUROC) which gives equal importance to both classes. We report the worst-domain AUROC, i.e. the lowest value across test time periods.

Vanilla mixup performs a bit better than ERM. Because of the class imbalance, resampling for uniform classes also improves ERM. As expected, this is perfectly equivalent to the selective sampling criterion "diffClass" and they perform therefore equally well. Adding mixup is yet a bit better, which suggests again that **the performance of selective mixup is merely the result of the independent effects of vanilla mixup and resampling**. We further verify this explanation with the novel combination of simple resampling and vanilla mixup, and observe almost no difference whether the mixing operation is performed or not (last two rows in Figure 9).

To further support the claim that these methods mostly address label shift, we report in Table 1 the proportion of the majority class in the training and test data. We observe that the distribution sampled by the best training methods brings it much closer to that of the test data.

### Evidence of a "regression toward the mean" in the data

We hypothesized in Section 3 that the resampling benefits are due to a "regression toward the mean" across training and test splits. We now check for this property and find indeed a shift toward uniform class distributions in all datasets studied. For the Wild-Time datasets, we plot in Figure 10 the ratio of the minority class (binary tasks: yearbook, MIMIC) and class distribution entropy (multiclass task: arxiv). Finding this property in all three datasets agrees with the proposed explanation and the fact that we selected them because they previously showed improvements with selective mixup in .

In the _waterbirds_ and _civilComments_ datasets, the shift toward uniformity" also holds, but artificially. The training data contains imbalanced groups (class/domain combinations) whereas the evaluation with worst-group accuracy implicitly gives uniform importance to all groups.

## 5 Related work

**Mixup and variants.** Mixup was originally introduced in  and numerous variants followed . Many propose modality-specific mixing operations: CutMix  replaces linear combinations with collages of image patches, Fmix  combines image regions based on frequency contents, AlignMixup  combines images after spatial alignment. Manifold-mixup  replaces the mixing in input space with the mixing of learned representations, making it applicable to text embeddings.

  
**Proportion of majority class** & **(\%)** \\  In the dataset (training) & 78.2 \\ In the dataset (validation) & 77.8 \\ In the dataset (OOD test) & 66.5 \\ 
**Sampled by different training methods** & \\ Resampling (uniform classes) & 50.0 \\ Diff. domain + diff. class & 50.0 \\ Diff. class & 50.1 \\ Same domain + Diff. class & 49.9 \\ Resampling (uniform cl.) + concatenated pairs & [64.3] \\ Resampling (uniform cl.) + vanilla mixup & [64.3] \\   

Table 1: The performance of the various methods on _MIMIC-Readmission_ is explained by their correction of a class imbalance. The best training methods (boxed numbers) sample the majority class in a proportion much closer to that of the test data.

Figure 9: Main results on _MIMIC-Readmission_.

**Mixup for OOD generalization.** Mixup has been integrated into existing techniques for domain adaptation (DomainMix ), domain generalization (FIXED ), and with meta learning (RegMixup ). This paper focuses on variants we call "_selective mixup_" that use non-uniform sampling of the pairs of mixed examples. LISA  proposes two heuristics, same-class/different-domain and vice versa, used in proportions tuned by cross-validation on each dataset. Palakkadavath et al.  use same-class pairs and an additional objective to encourage invariance of the representations to the mixing. CIFAR  uses same-class pairs with a contrastive objective to improve algorithmic fairness. SelecMix  proposes a selection heuristic to handle biased training data: same class/different biased attribute, or vice versa. DomainMix  uses different-domain pairs for domain adaptation. DRE  uses same-class/different-domain pairs and regularize their Grad-CAM explanations to improve OOD generalization. SDMix  applies mixup on examples from different domains with other improvements to improve cross-domain generalization for activity recognition.

**Explaining the benefits of mixup** has invoked regularization  and augmentation  effects, the introduction of label noise , and the learning of rare features . These works focus on the mixing and in-domain generalization, whereas we focus on the selection and OOD generalization.

**Training on resampled data.** We find that selective mixup is sometimes equivalent to training on resampled or reweighted data. Both are standard tools [10; 13] to handle distribution shifts in a domain adaptation setting, also known as importance-weighted empirical risk minimization (IW-ERM) [25; 4]. For covariate shift, IW-ERM trains a model with a weight or sampling probability on each training point \(\) as its likelihood ratio \(p_{}()/p_{}()\). Likewise with labels \(\) and \(p_{}()/p_{}()\) for label shift [1; 17], Recently, [8; 24] showed that reweighting and resampling are competitive with the state of the art on multiple OOD and label-shift benchmarks .

## 6 Conclusions and open questions

**Conclusions.** This paper helps understand selective mixup, which is one of the most successful and general methods for distribution shifts. We showed unambiguously that much of the improvements were actually unrelated to the mixing operation and could be obtained with much simpler, well-known resampling methods. On datasets where mixup does bring benefits, we could then obtain even better results by combining the independent effects of the best mixup and resampling variants.

**Limitations.** We focused on the simplest version selective mixup as described by Yao et al. . Many papers combine the principle with modifications to the learning objective [7; 15; 19; 22; 28; 31]. Resampling likely plays a role in these methods too but this claim requires further investigation.

We evaluated "only" five datasets. Since we introduced simple ablations that can single out the effects of resampling, we hope to see future re-evaluations of other datasets.

Because we selected datasets that had previously shown benefits with selective mixup, we could not verify the predicted failure mode when there is no "regression toward the mean" in the data.

Finally, this work is **not** about designing new algorithms to surpass the state of the art. Our focus is on improving the scientific understanding of existing mixup strategies and their limitations.

**Open questions.** Our results leave open the question of the applicability of selective mixup to real situations. The "regression toward the mean" explanation indicates that much of the observed improvements are accidental since they rely on an artefact of some datasets. In real deployments, distribution shifts cannot be foreseen in nature nor magnitude. This is a reminder of the relevance of Goodhart's law to machine learning  and of the risk of overfitting to popular benchmarks .

Figure 10: The class distribution shifts toward uniformity in these Wild-Time datasets, which agrees with the explanation that resampling benefits are due to a “regression toward the mean”.