# Learning Scalar Fields for Molecular

Docking with Fast Fourier Transforms

 Bowen Jing, Tommi Jaakkola, Bonnie Berger

CSAIL, Massachusetts Institute of Technology

bjing@mit.edu, {tommi, bab}@csail.mit.edu

###### Abstract

Molecular docking is critical to structure-based virtual screening, yet the throughput of such workflows is limited by the expensive optimization of scoring functions involved in most docking algorithms. We explore how machine learning can accelerate this process by learning a scoring function with a functional form that allows for more rapid optimization. Specifically, we define the scoring function to be the cross-correlation of multi-channel ligand and protein scalar fields parameterized by equivariant graph neural networks, enabling rapid optimization over rigid-body degrees of freedom with fast Fourier transforms. Moreover, the runtime of our approach can be amortized at several levels of abstraction, and is particularly favorable for virtual screening settings with a common binding pocket. We benchmark our scoring functions on two simplified docking-related tasks: decoy pose scoring and rigid conformer docking. Our method attains similar but faster performance on crystal structures compared to the Vina and Gnina scoring functions, and is more robust on computationally predicted structures.

## 1 Introduction

Proteins are the macromolecular machines that drive almost all biological processes, and much of early-stage drug discovery focuses on finding molecules which bind to and modulate their activity. _Molecular docking_--the computational task of predicting the binding pose of a small molecule to a protein target--is an important step in this pipeline. Traditionally, docking has been formulated as an optimization problem over a _scoring function_ designed to be a computational proxy for the free energy (Torres et al., 2019; Fan et al., 2019). Such scoring functions are typically a sum of pairwise interaction terms between atoms with physically-inspired functional forms (Quiroga and Villarreal, 2016). While these terms are simple and hence fast to evaluate, exhaustive sampling or optimization over the space of ligand poses is difficult and leads to the significant runtime of docking software.

ML-based scoring functions for docking have been an active area of research, ranging in sophistication from random forests to deep neural networks (Yang et al., 2022; Cramon et al., 2022). These efforts have largely sought to more accurately model the free energy based on a docked pose, which is important for downstream identification of binders versus non-binders (_virtual screening_). However, they have not addressed nor reduced the computational cost required to produce these poses in the first place. Hence, independently of the accuracy of these workflows, molecular docking for large-scale structure-based virtual screening remains computationally challenging, especially with the growing availability of large billion-compound databases such as ZINC (Tingle et al., 2023).

In this work, we explore a different paradigm and motivation for machine learning scoring functions, with the specific aim of _accelerating scoring and optimization_ of ligand poses for high-throughput molecular docking. To do so, we forego the physics-inspired functional form of commonly used scoring functions, and instead frame the problem as that of learning _scalar fields_ independently associated with the 3D structure of the protein and ligand, respectively. We then define the score tobe the cross-correlation between the overlapping scalar fields when oriented according to the ligand pose. While seemingly more complex than existing scoring functions, these cross-correlations can be rapidly evaluated over a large number of ligand poses simultaneously using Fast Fourier Transforms (FFT) over both the translational space \(^{3}\) and the rotational space \(SO(3)\). This property allows for significant speedups in the optimization over these degrees of freedom.

Further contrasting with existing ML scoring functions, the computational cost of our method can be _amortized_ at several levels of abstraction, significantly accelerating runtimes for optimized workflows. For example, unlike methods that require one neural network forward pass per pose, our network is evaluated once per protein structure or ligand conformer _independently_. Post-amortization, we attain translational and rotational optimization runtimes as fast as 160 \(\)s and 650 \(\)s, respectively, with FFTs. Such throughputs, when combined with effective sampling and optimization, could make docking of very large compound libraries feasible with only modest resources.

Empirically, we evaluate our method on two simplified docking-related tasks: (1) decoy pose scoring and (2) rigid conformer docking. On both tasks, our scoring function is competitive with--but faster than--the scoring functions of Gnina (Ragoza et al., 2017; McNutt et al., 2021) and Vina (Trott and Olson, 2010) on PDBBind crystal structures and is significantly better on ESMFold structures. We then demonstrate the further advantages of runtime amortization on the virtual screening-like setup of the PDE10A test set (Tosstorff et al., 2022), where--since there is only one unique protein structure--our method obtains a 50x speedup in total inference time at no loss of accuracy.

## 2 Method

### Equivariant Scalar Fields

We consider the inputs to a molecular docking problem to be a pair of protein structure and ligand molecule, encoded as a featurized graphs \(G^{P},G^{L}\), and with the protein structure associated with alpha carbon coordinates \(^{P}=[_{1}^{P},_{N_{P}}^{P}]^{3 N_{P}}\). The molecular docking problem is to find the ligand atomic coordinates \(^{L}=[_{1}^{L},_{N_{L}}^{L}]^{3 N_{L}}\) of the true binding pose. To this end, our aim is to parameterize and learn (multi-channel) scalar fields \(^{P}:=(;G^{P},^{P})\) and \(^{L}:=^{L}(;G^{L},^{L})\) associated with the protein and ligand structures, respectively, such that the scoring function evaluated on any pose \(^{L}^{3N_{L}}\) is given by

\[E(^{P},^{L})=_{c}_{^{3}}_{c}^{P}( ;G^{P},^{P})_{c}^{L}(;G^{L},^{L} )\,d^{3}\] (1)

where \(_{c}\) refers to the \(c^{}\) channel of the scalar field. While neural fields that directly learn functions \(^{3}\) have been previously developed as encodings of molecular structures (Zhong et al., 2019), such a formulation is unsuitable here as the field must be defined relative to the variable-sized structure graphs \(G^{P},G^{L}\) and transform appropriately with rigid-body motions of their coordinates.

Figure 1: **Overview** of the scalar field-based scoring function and docking procedure. The translational FFT procedure is shown here; the rotational FFT is similar, albeit harder to visualize. (A) The protein pocket and ligand conformer are independently passed through equivariant scalar field networks (ESFs) to produce scalar fields. (B) The fields are cross-correlated to produce heatmaps over ligand translations. (C) The ligand coordinates are translated to the argmax of the heatmap. Additional scalar field visualizations are in Appendix D.

Instead, we propose to parameterize the scalar field as a sum of contributions from each ligand atom or protein alpha-carbon, where each contribution is defined by its coefficients in a _spherical harmonic expansion_ centered at that atom (or alpha-carbon) coordinate in 3D space. To do so, we choose a set \(R_{j}:^{+}\) of radial basis functions (e.g., Gaussian RBFs) in 1D and let \(Y_{m}^{}\) be the real spherical harmonics. Then we define

\[_{c}(;G,)=_{n,j,,m}A_{cnj m}(G,) R_{j}(\|-_{n}\|)Y_{}^{m}(-_{ n}}{\|-_{n}\|})\] (2)

where here (and elsewhere) we drop the superscripts \(L,P\) for common definitions. Given some constraints on how the vector of coefficients \(A_{cnj m}\) transforms under \(SE(3)\), this parameterization of the scalar field satisfies the following important properties:

**Proposition 1**.: _Suppose the scoring function is parameterized as in Equation 2 and for any \(R SO(3),^{3}\) we have \(A_{cnj m}(G,R.+)=_{m^{}}D_{mm^{}}^{ }(R)A_{cnj m^{}}(G,)\) where \(D^{}(R)\) are the (real) Wigner D-matrices, i.e., irreducible representations of \(SO(3)\). Then for any \(g SE(3)\),_

1. _The scalar field transforms equivariantly:_ \(_{c}(;G,g.)=_{c}(g^{-1}.;G,)\)_._
2. _The scoring function is invariant:_ \(E(g.^{P},g.^{L})=E(^{P},^{L})\)_._

See Appendix B for the proof. We choose to parameterize \(A_{cnj m}(G,R.)\) with E3NN graph neural networks (Thomas et al., 2018; Geiger and Smidt, 2022), which are specifically designed to satisfy these equivariance properties and produce all coefficients in a single forward pass. The core of our method consists of the training of two such equivariant scalar field networks (ESFs), one for the ligand and one for the protein, which then parameterize their respective scalar fields. While the second property (invariance of the scoring function) is technically the only one required by the problem symmetries, the first property ensures that different ligand poses related by rigid-body transformations can be evaluated via transformations of the scalar field itself (without re-evaluating the neural network) and is thus essential to our method.

Next, we show how this parameterization enables ligand poses related by rigid body motions to some reference pose to be rapidly evaluated with fast Fourier transforms (all derivations in Appendix B). There are actually two ways to do so: we can evaluate the score of all poses generated by _translations_ of the reference pose, or via _rotations_ around some fixed point (which we always choose to be the center of mass of ligand). These correspond to FFTs over \(^{3}\) and \(SO(3)\), respectively.

### FFT Over Translations

We first consider the space of poses generated by translations. Given some reference pose \(^{L}\), the score as a function of the translation is just the cross-correlation of the fields \(^{L}\) and \(^{P}\):

\[E(^{P},^{L}+)=_{c}_{^{3}} _{c}^{P}()_{c}^{L}(-)\,d^{3}=_ {c}(_{c}^{L}_{c}^{P})()\] (3)

where we have dropped the dependence on \(G,\) for cleaner notation and applied Proposition 1. By the convolution theorem, these cross-correlations may be evaluated using Fourier transforms:

\[_{c}^{L}_{c}^{P}=}^{-1}\{ [_{c}^{L}][_{c}^{P}]\}\] (4)

Hence, in order to simultaneously evaluate all possible translations of the reference pose, we need to compute the Fourier transforms of the protein and ligand scalar fields. One naive way of doing so would be to explicitly evaluate Equation 2 at an evenly-spaced grid of points spanning the structure and then apply a fast Fourier transform. However, this would be too costly, especially during training time. Instead, we observe that the functional form allows us to immediately obtain the Fourier transform via the expansion coefficients \(A_{cnj m}\):

\[[_{c}]()=_{n}e^{-i _{n}}_{}(-i)^{}_{m,n}A_{cnj m}_{} [R_{j}](\|\|)Y_{}^{m}(/\|\|)\] (5)

where now \(Y_{}^{m}\) must refer to the complex spherical harmonics and the coefficients must be transformed correspondingly, and \[_{}[R_{j}](k)=}_{0}^{}j_{}(kr)R_{j }(r)r^{2}\,dr\] (6)

is the \(^{}\) order spherical Bessel transform of the radial basis functions. Importantly, \(_{}[R_{j}]\) and \(Y^{m}_{}\) can be precomputed and cached at a grid of points _independently_ of any specific structure, such that only the translation terms and expansion coefficients need to be computed for every new example.

### FFT Over Rotations

We next consider the space of poses generated by rotations. Suppose that given some reference pose \(^{L}\), the protein and ligand scalar fields are both expanded around some common coordinate system origin using the complex spherical harmonics and a set of _global radial basis functions_\(S_{j}(r)\):

\[_{c}()=_{j,,m}B_{cj m}S_{j}(\|\|)Y^{m}_{ }(/\|\|)\] (7)

We seek to simultaneously evaluate the score of poses generated via rigid rotations of the ligand, which (thanks again to Proposition 1) is given by the rotational cross-correlation

\[E(^{P},R.^{L})=_{c}_{^{3}}^{P}_{c}( )^{L}_{c}(R^{-1})\,d^{3}\] (8)

Cross-correlations of this form have been previously studied for rapid alignment of crystallographic densities (Kovacs & Wriggers, 2002) and of signals on the sphere in astrophysics (Wandelt & Gorski, 2001). It turns out that they can also be evaluated in terms of Fourier sums:

\[_{^{3}}^{P}_{c}()^{L}_{c}(R^{-1})\, d^{3}=_{,m,h,n}d^{}_{mh}d^{}_{hn}I^{}_{mn}e^{i(m +h+n)}\] (9)

where \(,,\) are related to the the Euler angles of the rotation \(R\), \(d^{}\) is the (constant) Wigner \(D\)-matrix for a rotation of \(/2\) around the \(y\)-axis, and

\[I^{}_{mn}=_{j,k}B^{P}_{cj m}_{ck n}}G_{jk}  G_{jk}=_{0}^{}S_{j}(r)S_{k}(r)r^{2}\,dr\] (10)

Thus the main task is to compute the complex coefficients \(B_{cj m}\) of the ligand and protein scalar fields, respectively. This is not immediate as the fields are defined using expansions in "local" radial and spherical harmonic bases, i.e., with respect to the individual atom positions as opposed to the coordinate system origin. Furthermore, since we cannot (in practice) use a complete set of radial or angular basis functions, it is generally not possible to express the ligand or protein scalar field as defined in Equation 2 using the form in Equation 7. Instead, we propose to find the coefficients \(B_{cj m}\) that give the best approximation to the true scalar fields, in the sense of least squared error.

Specifically, suppose that \(^{N_{} N_{}}\) are the values of \(N_{}\) real local basis functions (i.e., different origins, RBFs, and spherical harmonics) evaluated at \(N_{}\) grid points and \(^{N_{}}\) is the vector of coefficients defining the scalar field \(_{c}\). Similarly define \(^{N_{} N_{}}\) using the real versions of the global basis functions. We seek to find the least-squares solution \(^{N_{}}\) to the overdetermined system of equations \(=\), which is given by

\[=(^{T})^{-1}^{T}\] (11)

Notably, this is simply a linear transformation of the local coefficients \(A_{cj m}\). Thus, if we can precompute the inverse Gram matrix of the global bases \((^{T})^{-1}\) and the inner product of the global and local bases \(^{T}\), then for any new scalar field \(_{c}\) the real global coefficients are immediately available via a linear transformation. The desired complex coefficients can then be easily obtained via a change of bases. At first glance, this still appears challenging due to the continuous space of possible atomic or alpha-carbon positions, but an appropriate discretization makes the precomputation relatively inexpensive without a significant loss of fidelity.

### Training and Inference

We now study how the rapid cross-correlation procedures presented thus far are used in training and inference. For a given training example with protein structure \(^{P}\), the scoring function \(E(^{P},^{L})\) should ideally attain a maximum at the true ligand pose \(^{L}=^{L}\). We equate this task to that of learning an _energy based model_ to maximize the log-likelihood of the true pose under the model likelihood \(p(^{L})[E(^{P},^{L})]\). However, as is typically the case for energy-based models, directly optimizing this objective is difficult due to the intractable partition function.

Instead, following Corso et al. (2023), we conceptually decompose the ligand pose \(^{L}\) to be a tuple \(^{L}=(^{C},R,)\) consisting of a zero-mean conformer \(^{C}\), a rotation \(R\), and a translation \(\), from which the pose coordinates are obtained: \(^{L}=R.^{C}+\). Then consider the following _conditional_ log-likelihoods:

\[ p(^{C},R) =E(^{P},^{L})-_{^{3}} [E(^{P},R.^{C}+^{})]\,d^{3} ^{}\] (12a) \[ p(R^{C},) =E(^{P},^{L})-_{SO(3)}[E( ^{P}-,R^{}.^{C})]\,dR^{}\] (12b)

We observe that these integrands are precisely the cross-correlations in Equations 3 and 8, respectively, and can be quickly evaluated and summed for all values of \(^{}\) and \(R^{}\) using fast Fourier transforms. Thus, the integrals--which are the marginal likelihoods \(p(^{C},R)\) and \(p(^{C},)\)--are tractable and the conditional log-likelihoods can be directly optimized in order to train the neural network. Although neither technically corresponds to the joint log-likelihood of the pose, we find that these training objectives work well in practice and optimize their sum in our training procedure.

At inference time, a rigid protein structure \(^{P}\) is given and the high-level task is to score or optimize candidate ligand poses \(^{L}\). A large variety of possible workflows can be imagined; however, for proof of concept and for our experiments in Section 3 we describe and focus on the following relatively simple inference workflows (presented in greater detail in Appendix C):

* **Translational FFT (TF)**. Given a conformer \(^{C}\), we conduct a grid-based search over \(R\) and use FFT to optimize \(\) in order to find the best pose \((^{C},R,)\). To do so, we compute the Fourier coefficients (Equation 5) of the protein \(^{P}\)_once_ and for _each_ possible ligand orientation \(R.^{C}\). We then use translational cross-correlations (Equation 3) to find the best translation \(\) for each \(R\) and return the highest scoring combination.
* **Rotational FFT (RF)**. Given a conformer \(^{C}\), we conduct a grid-based search over \(\) and use FFT to optimize \(R\). To do so, we compute the global expansion coefficients \(B^{P}_{cj m}\) of the protein \(^{L}-\) relative to _each_ possible ligand position \(\) and _once_ for the ligand \(^{C}\) relative to its (zero) center of mass (Equation 11). We then use rotational cross-correlations (Equation 8) to find the best orientation \(R\) for each \(\) and return the highest scoring combination.
* **Translational scoring (TS)**. Here we instead are given a list of poses \((^{C},R,)\) and wish to score them. Because the values of \(R\) nor \(\) may not satisfy a grid structure, we cannot use the FFT methods. Nevertheless, we can compute the (translational) Fourier coefficients of the protein \(^{P}\) and for each unique oriented conformer \(R.^{C}\) of the ligand using Equation 5. We then evaluate \[E(^{P},R.^{C}+)=_{c}_{^{3}} [^{P}_{c}]()}[^{L}_{c} (\,:,R.^{C})]() e^{-i}\,d^{ 3}\] (13) Since the Fourier transform is an orthogonal operator on functional space, this is equal to the real-space cross-correlation.
* **Rotational scoring (RS)**. Analogously, we can score a list of poses \((^{C},R,)\) using the global spherical expansions \(B_{cj m}\). We obtain the real expansion coefficients of the protein relative to each \(\) and for each ligand conformer \(^{C}\) using Equation 11. The score for \((^{C},R,)\) is then given by the rotational cross-correlation \[E(^{P},R.^{C}+)=_{c,j,k,,m,n}B^{P}_{cj m }(^{P}-)B^{L}_{ck n}(^{C})D^{}_{mn}(R)G_ {jk}\] (14) where \(G_{jk}\) is as defined in Equation 10 and \(D^{}_{mn}\) are the real Wigner \(D\)-matrices.

The runtime of these workflows can vary significantly depending on the parameters, i.e., number of proteins, ligands, conformers, rotations, and translations, with amortizations possible at several levels. Table 1 provides a summary of the computations in each workflow, their frequencies, and typical runtimes. We highlight that the **RF** workflow is well-suited for virtual screening since the precomputations for the protein and ligand translations within a pocket can be amortized across all ligands. Furthermore, if the ligands are drawn from a shared library, their coefficients can also be precomputed independent of any protein, leaving only the rotational FFT as the cost per ligand-protein pair. Thus our method can lend itself to the engineering of very high-throughput workflows.

## 3 Experiments

We train and test our model on the PDBBind dataset (Liu et al., 2017) with splits as defined by Stark et al. (2022) providing 16379, 968, and 363 train, validation, and test complexes, respectively. We train two variants of our model: ESF and ESF-N, where the latter is trained with rotational and translational noise injected into the examples to increase model robustness. In both, the protein network operates on all heavy atom nodes, but only the alpha-carbons contribute to the scalar field. The input features and message-passing layers are otherwise similar to Corso et al. (2023), except without ESM features. Hyperparameters are detailed in Appendix E. For evaluation, we consider both the co-crystal structures in the PDBBind test split and their counterpart ESMFold complexes as prepared by Corso et al. (2023). We also collect a test set of 77 crystal structures (none of which are in PDBBind) of phosphodiesterase 10A (PDE10A) with different ligands bound to the same pocket (Tostorff et al., 2022). This industrially-sourced dataset is representative of a real-world use case for molecular docking and benchmarks the benefits of runtime amortization with our approach.

To evaluate our method against baselines, we note that a scoring function by itself is not directly comparable to complete docking programs, which also include tightly integrated conformer search, pose clustering, and local refinement algorithms. Here, however, we focus on the development of the _scoring function_ itself independently of these other components. Thus, we consider two simplified settings for evaluating our model: (1) **scoring decoy poses** with the aim of identifying the best pose among them, and (2) **docking rigid conformers** to a given pocket, similar to the re-docking setup in Stark et al. (2022). The first setting focuses on evaluating only the quality of the scoring function itself, whereas the second is a simplified version of a typical docking setting that circumvents some of the confounding factors while still allowing the benchmarking of FFT-accelerated optimization.

We select Gnina (McNutt et al., 2021) as the baseline docking software, which runs parallel MCMC chains to collect pose candidates that are then refined and re-ranked to produce the final prediction. For the scoring function, we evaluate Gnina's namesake CNN (Ragoza et al., 2017) as the state-of-the-art ML scoring function, as well as the traditional scoring function of Vina (Trott and Olson, 2010), one of the most well-established docking programs in the development of the field. Both scoring functions are widely used and are natively supported by the Gnina program.

   Frequency & Computation & TF & RF & TS & RS & Runtime \\  Per protein structure & Coefficients \(A_{cnj m}\) & ✓ & ✓ & ✓ & ✓ & 65 ms \\  & FFT coefficients & ✓ & & ✓ & & 7.0 ms \\ \(\) Per translation & Global expansion\(B_{c m}\) & & ✓ & & ✓ & 80 ms \\  Per ligand conformer & Coefficients \(A_{cnj m}\) & ✓ & ✓ & ✓ & ✓ & 4.3 ms \\  & Global expansion \(B_{c m}\) & & ✓ & & ✓ & 17 ms \\ \(\) Per rotation & FFT coefficients & ✓ & & ✓ & & 1.6 ms \\   Per conformer \(\) rotation & Translational FFT & ✓ & & & & 160 \(\)s \\ Per conformer \(\) translation & Rotational FFT & & ✓ & & & 650 \(\)s \\  Per pose & Translational scoring & & & ✓ & & 1.0 \(\)s \\  & Rotational scoring & & & & ✓ & 8.2 \(\)s \\   

Table 1: **Typical runtimes** of the computations involved in inference-time scoring and optimization procedures, measured on PDBBind with one V100 GPU. The three sets of rows delineate computations that are protein-specific, ligand-specific, or involve both protein and ligand, respectively.

### Scoring Decoys

For each PDBBind test complex, we generate \(32^{3}-1=32767\) decoy poses by sampling 31 translational, rotational, and torsional perturbations to the ground truth pose and considering all their possible combinations. On median, the RMSD of the closest decoy is 0.4 angstroms (A), and 1.6% of all poses (\(n=526.5\)) are below 2 A RMSD (Appendix E). We then score all poses using the Vina and Gnina scoring functions and with our method in both **TS** (Equation 13) and **RS** (Equation 14) modes. The quality of each scoring function is evaluated with the AUROC when used as a \(<\)2A RMSD classifier, the RMSD of the top-ranked pose (Top RMSD), the rank of the lowest-RMSD pose (Top Rank), and the fraction of complexes for which the identified pose is under 2 A RMSD.

As shown in Table 2, our method is competitive with the Gnina and Vina scoring functions on crystal structures and better on ESMFold structures. This improved robustness is expected since the interaction terms in traditional scoring functions are primarily mediated by sidechain atoms, which are imperfectly predicted by ESMFold, whereas our scalar fields only indirectly depend on the sidechains via residue-level coefficients. The noise-augmented training obtains higher AUROC but is weaker in terms of identifying the best poses. Curiously, this is also true on ESMFold structures, where we expect robustness to be more important. Overall, **TS** is superior in performance to **RS**, likely due to the spatially coarser representation of the scalar fields in the global spherical harmonic expansion (i.e., Equation 7) relative to the grid-based Cartesian expansion.

In terms of runtime per pose, our method is faster than Vina by several orders of magnitude, with even greater acceleration compared to the neural network-based Gnina. The runtime improvement per complex is more tempered since the different proteins and ligand in every complex limit the opportunity for amortization. In fact, of the total runtime per complex in Table 2, only 1% (**TS**) to 5% (**RS**) is due to the pose scoring itself, with the rest due to preprocessing that must be done for every new protein and ligand independently. Hence, the total possible runtime improvement per complex is significantly greater for more suitable workflows.

### Docking Conformers

We consider the task of pocket-level docking where all methods are given as input the ground-truth conformer in a random orientation. Following common practice (McNutt et al., 2021), we aim to provide \(4\) A of translational uncertainty around the true ligand pose in order to define the binding pocket. To do so, we provide Gnina with a bounding box with 4 A of padding around the true pose, and provide our method with a cube of side length 8 A as the search space for \(\) (with a random grid offset). For PDE10A, we define the pocket using the pose of the first listed complex (PDB 5SFS) and cross-dock to that protein structure. In all docking runs, we deactivate all torsion angles so that Gnina docks the provided conformer to the pocket. Default hyperparameters--and results for varying hyperparameters--are detailed in Appendix E and Appendix F, respectively.

As shown in Table 3, the baseline scoring functions obtain excellent performance on the PDBBind crystal structures, with a success rate of 79%. Our method is slightly weaker but also obtains high success rates (73%). The performance decrease in terms of Median RMSD is somewhat larger,

    &  &  &  \\  Method & \(<\)2 Å & Top & Top & \% & \(<\)2 Å & Top & Top & \% &  &  \\  & AUROC & RMSD & Rank & \(<\)2 Å & AUROC & RMSD & Rank & \(<\)2 Å & & \\  Vina & **0.93** & **0.54** & **2** & **91** & 0.86 & 2.43 & 419 & 43 & 3.4 ms & 110 s \\ Gnina & 0.90 & 0.59 & 3 & 83 & 0.84 & 2.19 & 1110 & 46 & 13.0 ms & 426 s \\  ESF-TS & 0.87 & 0.59 & 3 & 87 & 0.82 & **1.38** & 24 & **57** & 1.0 \(\)s & 3.2 s \\ ESF-RS & 0.87 & 0.63 & 3 & 85 & 0.82 & 1.75 & **22** & 53 & 8.2 \(\)s & 5.7 s \\ ESF-N-TS & 0.92 & 0.69 & 4 & 81 & **0.87** & 1.64 & **22** & 54 & 1.0 \(\)s & 3.2 s \\ ESF-N-RS & 0.92 & 0.75 & 5 & 80 & **0.87** & 1.74 & 26 & 53 & 8.2 \(\)s & 5.7 s \\   

Table 2: **Decoy scoring results**. All RMSDs are heavy-atom symmetry aware. For ease of comparison, the best numbers from our method (ESF) are underlined if not bolded.

likely due to the coarse search grid over non-FFT degrees of freedom (Appendix F) and the lack of any refinement steps (which are an integral part of Gnina) in our pipeline. On ESMFold structures, however, our method obtains nearly twice the success rate (47% vs 28%) of the baseline scoring functions. Unlike in decoy scoring, noisy training noticeably contributes to the performance on ESMFold structures, and the **RF** procedure generally outperforms **TF**, likely due to the relatively finer effective search grid in rotational cross-correlations (Appendix F).

Because of the nature of the PDBBind workflow, the total runtime is comparable to or slower than the baselines when precomputations are taken into account. However, in terms of the pose optimization itself, our method is significantly faster than the Gnina baselines, despite performing a brute force search over the non-FFT degrees of freedom. While it is also possible to trade-off performance and runtime by changing various Gnina settings from their default values, our method expands the Pareto front currently available with the Gnina pipeline (Appendix F; Figure 6). This favorable tradeoff affirms the practical value-add of our method in the context of existing approaches.

To more concretely demonstrate the runtime improvements of our method with amortization, we then dock the conformers in the PDE10A dataset. Our method again has similar accuracy to the baselines (Table 3); however, because of the common pocket, all protein-level quantities are computed _only once_ and the total runtime is significantly accelerated. For the **RF** procedure in particular, the computation of global coefficients on the translational grid is by far the most expensive step (Appendix F; Table 5), and the remaining ligand precomputations are very cheap. The amortization of these coefficients leads to a 45x speedup in the overall runtime (67 s \(\) 1.5 s). (The runtime for Gnina is also accelerated, although to a lesser extent, due to the smaller ligand size.) As the number of ligands increases further, the total runtime per complex of our method would further decrease.

## 4 Conclusion

We have proposed a machine-learned based scoring function for accelerating pose optimization in molecular docking. Different from existing scoring functions, the score is defined as a cross-correlation between scalar fields, which enables the use of FFTs for rapid search and optimization. We have formulated a novel parameterization for such scalar fields with equivariant neural networks, as well as training and inference procedures with opportunities for significant runtime amortization. Our scoring function shows comparable performance but improved runtime on two simplified docking-related tasks relative to standard optimization procedures and scoring functions. Thus, our methodology holds promise when integrated with other components into a full docking pipeline. These integrations may include multi-resolution search, refinement with traditional scoring functions, and architectural adaptations for conformational (i.e., torsional) degrees of freedom--all potential directions of future work. In a broader context, we hope our work serves as a bridge between graph-based molecular machine learning and the literature on cross-correlations in computational structural biology and inspire related methods for other applications.

    &  & \\   &  &  &  \\  Method & \% \(<\)2 Å & Med. RMSD & \(<\)2 Å & Med. RMSD & Runtime & \% \(<\)2 Å & Med. RMSD & Runtime \\  Vina & **79** & **0.32** & 24 & 6.1 & 20 s & **74** & **0.75** & 6.1 s \\ Gnina & 77 & 0.33 & 28 & 5.9 & 23 s & 73 & 0.77 & 6.0 s \\  ESF-TF & 70 & 1.13 & 31 & 4.6 & 0.8 s / 8.3 s & 67 & 1.20 & 1.0 s / 7.1 s \\ ESF-RF & 71 & 0.97 & 32 & 4.4 & 0.5 s / 67 s & 73 & 0.82 & 0.5 s / 1.5 s \\ ESF-N-TF & 72 & 1.10 & 46 & **2.9** & 0.7 s / 8.2 s & 64 & 1.11 & 1.0 s / 7.2 s \\ ESF-N-RF & 73 & 1.00 & **47** & 3.0 & 0.5 s / 68 s & 70 & 1.00 & 0.5 s / 1.5 s \\   

Table 3: **Rigid conformer docking results.** All RMSDs are heavy-atom symmetry aware. The median RMSD of our method (ESF) is lower-bounded at 0.5–0.6 Å by the resolution of the search grid (Appendix F). The runtime is shown as an average per complex, excluding / including precomputations that can be amortized. The best numbers from ESF are underlined if not bolded.