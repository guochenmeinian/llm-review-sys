# rPPG-Toolbox: Deep Remote PPG Toolbox

Xin Liu\({}^{1}\), Girish Narayanswamy\({}^{1*}\), Akshay Paruchuri\({}^{2*}\), Xiaoyu Zhang\({}^{3}\), Jiankai Tang\({}^{3}\),

**Yuzhe Zhang\({}^{3}\), Roni Sengupta\({}^{2}\), Shwetak Patel\({}^{1}\), Yuntao Wang\({}^{3}\), Daniel McDuff\({}^{1}\)**

University of Washington Seattle \({}^{1}\)

University of North Carolina at Chapel Hill \({}^{2}\)

Tsinghua University \({}^{3}\)

{xliu0, girishvn, dmcudff}@cs.washington.edu, akshay@cs.unc.edu

\(*\) Equal Contribution

###### Abstract

Camera-based physiological measurement is a fast growing field of computer vision. Remote photoplethysmography (rPPG) utilizes imaging devices (e.g., cameras) to measure the peripheral blood volume pulse (BVP), and enables cardiac measurement via webcams and smartphones. However, the task is non-trivial with important pre-processing, modeling, and post-processing steps required to obtain state-of-the-art results. Replication of results and benchmarking of new models is critical for scientific progress; however, as with many other applications of deep learning, reliable codebases are not easy to find or use. We present a comprehensive toolbox, rPPG-Toolbox, that contains unsupervised and supervised rPPG models with support for public benchmark datasets, data augmentation, and systematic evaluation: https://github.com/ubicomplab/rPPG-Toolbox

## 1 Introduction

The vision of ubiquitous computing is to embed computation into everyday objects to enable them to perform useful tasks. The sensing of physiological vital signs is one such task and plays an important role in how health is understood and managed. Cameras are both ubiquitous and versatile sensors, and the transformation of cameras into accurate health sensors has the potential to make the measurement of health signals more comfortable and accessible. Examples of the applications of this technology include systems for monitoring neonates , dialysis patients , and the detection of arrhythmias .

Building on advances in computer vision, camera-based measurement of physiological vitals signs has developed into a research field of its own . Researchers have developed methods for measuring cardiac and pulmonary signals by analyzing skin pixel changes over time. Recently, several companies have been granted FDA De Novo status for products that use software algorithms to analyze video and estimate pulse rate, heart rate, respiratory rate and/or breathing rate12.

There are hundreds of computational architectures that have been proposed for the measurement of cardiopulmonary signals. Unsupervised signal processing methods leverage techniques such as Independent Component Analysis (ICA) or Principal Component Analysis (PCA) and assumptions about the periodicity or structure of the underlying blood volume pulse waveform. Neural network architectures can be trained in a supervised fashion using videos with synchronized gold-standard ground truth signals . Innovative data generation  and augmentation , meta-learning for personalization , federated learning , and unsupervised pretraining  have been widely explored in the field of camera-based physiological sensing and have ledto significant improvements in state-of-the-art performance. Further information regarding the background, algorithms, and potential applications of rPPG are included in the Appendix-B and C.

However, standardization in the field is still severely lacking. Based on our review of literature in the space, we identified four issues that have hindered the interpretation of results in many papers. First, and perhaps most obviously, a number of the published works are not accompanied by public code. While publishing code repositories with papers is now fairly common in the machine learning and computer vision research communities, it is far less common in the field of camera-based physiological sensing. While there are reasons that it might be difficult to release datasets (e.g., medical data privacy), we cannot find good arguments for not releasing code. Second, many papers do not compare to previously published methods in an "apples-to-apples" fashion. This point is a little more subtle, but rather than performing systematic side-by-side comparisons between methods, the papers compare to numerical results from previous work, even if the training sets and/or test sets are not identical (e.g., test samples were filtered because they were deemed to not have reliable labels). Unfortunately, this often makes it unclear if performance differences are due to data, pre-processing steps, model design, post-processing, training schemes and hardware specifications, or a combination of the aforementioned. Continuing this thread, the third flaw is that papers use pre- and post-processing steps that are not adequately described. Finally, different researchers compute the "labels" (e.g., heart rate) using their own methods from the contact PPG or ECG time-series data. Differences in these methods lead to different labels and a fundamental issue when it comes to benchmarking performance. When combined, the aforementioned issues make it very difficult to draw conclusions from the literature about the optimal choices for the design of rPPG systems.

Open source codes allow researchers to compare novel approaches to consistent baselines without ambiguity regarding the implementation or parameters used. This transparency is important as subsequent research invariably builds on prior state-of-the-art. Implementing a prior method from a paper, even if clearly written, can be difficult. Furthermore, it is an inefficient use of time for many researcher to re-implement all baseline methods. In an effort to address this, several open source toolboxes have been released for camera-based physiological sensing. These toolboxes have been a significant contribution to the community and provide implementations of methods and models [17; 18; 19]; however, they are also incomplete. McDuff and Blackford 3 implemented a set of source separation methods (Green, ICA, CHROM, POS) and Pilz  published the PPGI-Toolbox4 containing implementations of Green, SSR, POS, Local Group Invariance (LGI), Diffusion Process (DP) and Riemannian-PPGI (SPH) models. These toolboxes are implemented in MATLAB (e.g., ) and do not contain examples of supervised methods. Python and supervised neural models are now the focus of a large majority of computer vision and deep learning research. There are

Figure 1: **PPG Pipeline.** An example of the components of an rPPG pipeline including preprocessing, training, inference, and evaluation.

several implementations of popular signal processing methods in Python: Bob.rrpg.base5 includes implementations of CHROM, SSR and Boccignone et al.  released code for Green, CHROM, ICA, LGI, PBV, PCA, and POS. Several published papers have included links to code; however, often this is only inference code and not training code for neural models. Without providing training code for neural networks, it is challenging for researchers to conduct end-to-end reproducible experiments and build on existing research.

In this paper, we present an end-to-end toolbox6 for camera-based physiological measurement. This toolbox includes: 1) support for six public datasets, 2) pre-processing code to format the datasets for training neural models, 3) implementations of six neural model architectures and six unsupervised learning methods, 4) evaluation and inference pipelines for supervised and unsupervised learning methods for reproducibility and 5) enabling advanced neural training and inference such as weakly supervised pseudo labels, motion augmentation and multitask learning. We use this toolbox to publish clear and reproducible benchmarks that we hope will provide a foundation for the community to compare methods in a more rigorous and informative manner.

## 2 Related Work

In the field of remote PPG sensing, there are three significant open-source toolboxes (documented in Table 1):

**iPhys-Toolbox**: An open-sourced toolbox written in MATLAB that is comprised of implementations of numerous algorithms for rPPG sensing. It empowers researchers to present results on their datasets using public, standard implementations of baseline methods, ensuring transparency of parameters. This toolbox incorporates a wide range of widely employed baseline methods; however, it falls short on Python support, public dataset data loaders, and neural network training and evaluation.

**PPG-I Toolbox**: This toolbox provides MATLAB implementations, specifically for six unsupervised signal separation models. It incorporates four evaluation metrics, including Pearson correlation, RMSE/MSE, SNR, and Bland-Altman plots. However, similar to the iPPhys-Toolbox, it lacks support for public dataset data loading and neural network training and evaluation.

**pyVHR**: The most recent in the field, this toolbox adopts Python instead of MATLAB. While it offers ample support for numerous unsupervised methods, its capabilities are limited when it comes to modern neural networks. Notably, pyVHR supports only two neural networks for inference, and none for model training. This omission can be a roadblock for researchers aiming to reproduce and further advance state-of-the-art neural methods.

## 3 The rPPG-Toolbox

To address the gaps in the current tooling and to promote reproducibility and clearer benchmarking within the camera-based physiological measurement (rPPG) community, we present an open-source toolbox designed to support six public datasets, six unsupervised methods and six neural methods for data preprocessing, neural model training and evaluation, and further analysis.

### Datasets

The toolbox includes pre-processing code that converts six public datasets into a form amenable for training with neural models. The standard form for the videos we select includes raw frames and

   Toolbox & Dataset Support & Unsup. Eval & DNN Training & DNN Eval \\   iPPhys-Toolbox  & ✗ & ✓ & ✗ & ✗ \\ PPG-I Toolbox  & ✗ & ✓ & ✗ & ✗ \\ pyVHR [18; 21] & ✓ & ✓ & ✗ & ✓ \\  rPPG-Toolbox (Ours) & ✓ & ✓ & ✓ & ✓ \\   Unsup. = Unsupervised learning methods, DNN = Deep neural network methods. & & & \\  

Table 1: **Comparison of rPPG Toolboxes.** Comparison of rPPG-Toolbox with existing toolboxes in camera-based physiological measurement.

difference frames (the difference between each pair of consecutive frames) stored as numpy arrays in a [N, W, H, C] format. Where N is the length of the sequence, W is the width of the frames, H is the height of the frames, and C is the number of channels. There are six channels in this case, as both the raw frames and difference frames account for three color channels each. For faster data loading, all videos in the datasets are typically broken up into several "chunks" of non-overlapping N (e.g., 180) frame sequences. All of these parameters (N, W, H, C) are easy to change and customize. The PPG waveform labels are stored as numpy arrays in a [N, 1] format. The entire pre-processing procedure is supported with multi-thread processing to accelerate the data processing time.

We have provided pre-processing code for UBFC-rPPG , PURE  SCAMPS , MMPD , BP4D+ , and UBFC-Phys . Each of these datasets encompasses a diverse array of real-world conditions, capturing variations in factors such as motion, lighting, skin tones/types, and backgrounds, thus presenting robust challenges for any signal processing and machine learning algorithm. Tools (python notebooks) are provided for quickly visualizing pre-processed datasets and will be detailed further in Appendix-J. We also support the pre-processing and usage of augmented versions of the UBFC-rPPG  and PURE  datasets, a feature which we describe further in Section 4.2.

**UBFC-rPPG**: This dataset features RGB videos recorded using a Logitech C920 HD Pro webcam at 30Hz. The videos have a resolution of 640x480, and they are stored in an uncompressed 8-bit RGB format. Reference PPG data was obtained using a CMS50E transmissive pulse oximeter, thereby providing the gold-standard validation data. The subjects were positioned approximately one meter away from the camera during the recording sessions. The videos were captured under indoor conditions with a combination of natural sunlight and artificial illumination.

**PURE**: This dataset consists of recordings from 10 subjects, including 8 males and 2 females. The video footage was captured with an RGB eco274CVGE camera from SVS-Vistek GmbH, with a frequency of 30Hz and a resolution of 640x480. Subjects were positioned approximately 1.1 meters from the camera and were illuminated from the front by ambient natural light filtering through a window. The gold-standard ground truth of PPG and SpO2 were obtained at 60Hz with a CMS50E pulse oximeter affixed to the subject's finger. Each participant completed six recordings under varied motion conditions, thereby contributing to a range of data reflecting different physical states.

**SCAMPS**: This dataset encompasses 2,800 video clips, comprising 1.68M frames, featuring synthetic avatars in alignment with cardiac and respiratory signals. These waveforms and videos were generated by employing a sophisticated facial processing pipeline, resulting in high-fidelity, quasi-photorealistic renderings. To provide robust test conditions, the videos incorporate various confounders such as head motions, facial expressions, and changes in ambient illumination.

**MMPD**: This dataset includes 660 one-minute videos recorded using a Samsung Galaxy S22 Ultra mobile phone, at 30 frames per second with a resolution of 1280x720 pixels and then compressed to 320x240 pixels. The ground truth PPG signals were simultaneously captured using an HKG-07C+ oximeter, at 200 Hz and then downsampled to 30 Hz. It contains Fitzpatrick skin types 3-6, four different lighting conditions (LED-low, LED-high, incandescent, natural), four distinct

Figure 2: **Overview. An overview of the rPPG-Toolbox codebase.**

activities (stationary, head rotation, talking, and walking), and exercise scenarios. With multiple labels provided, different subsets of this dataset can be easily used for research using our toolbox.

**BP4D+**: This dataset contains video footage captured at a rate of 25 frames per second, for 140 subjects, each participating in 10 emotion-inducing tasks, amounting to a total of 1400 trials and associated videos. In addition to the standard video footage, the dataset also includes 3D mesh models and thermal video, both captured at the same frame rate. Alongside these, the dataset offers supplementary data including blood pressure measurements (wave, systolic, diastolic, mean), heart rate in beats per minute, respiration (wave, rate bpm), electrodermal activity, and Facial Action Coding System (FACS) encodings for specified action units.

**UBFC-Phys**: The UBFC-PHYS dataset, a multi-modal dataset, contains 168 RGB videos, with 56 subjects (46 women and 10 men) per a task. There are three tasks with significant amounts of unconstrained motion under static lighting conditions - a rest task, a speech task, and an arithmetic task. The dataset contains gold-standard blood volume pulse (BVP) and electrodermal activity (EDA) measurements that were collected via the Empatica E4 wristband. The videos were recorded at a resolution of 1024x1024 and 35Hz with a EO-23121C RGB digital camera. We utilized all three tasks and the same subject sub-selection list provided by the authors of the dataset in the second supplementary material of Sabour et al.  for evaluation. We reiterate this subject sub-selection list in Appendix-H.

### Methods

#### 3.2.1 Unsupervised Methods

The following methods all use linear algebra and traditional signal processing to recover the estimated PPG signal: 1) **Green**: the green channel information is used as the proxy for the PPG after spatial averaging of RGB video; 2) **ICA**: Independent Component Analysis (ICA) is applied to normalized, spatially averaged color signals to recover demixing matrices; 3) **CHROM**: a linear combination of the chrominance signals obtained from the RGB video are used for estimation; 4) **POS**: plane-orthogonal-to-the-skin (POS), is a method that calculates a projection plane orthogonal to the skin-tone based on physiological and optical principles. A fixed matrix projection is applied to the spatially normalized, averaged pixel values, which are used to recover the PPG waveform; 5) **PBV**: a signature, that is determined by a given light spectrum and changes of the blood volume pulse, is used in order to derive the PPG waveform while offsetting motion and other noise in RGB videos; 6) **LGI**: a feature representation method that is invariant to motion through differentiable local transformations.

#### 3.2.2 Supervised Neural Methods

The following implementations of supervised learning algorithms are included in the toolbox. All implementations were done using PyTorch . Common optimization algorithms, such as Adam  and AdamW , and criterion, such as mean squared error (MSE) loss, are utilized for training except for where noted. The learning rate scheduler typically follows the lcycle policy , which anneals the learning rate from an initial learning rate to some maximum learning rate and then, from that maximum learning rate, to some learning rate much lower than the initial learning rate. The total steps in this policy are determined by the number of epochs multiplied by the number of training batches in an epoch. The lcycle policy allows for convergence due to the learning rate being adjusted well below the initial, maximum learning rate throughout the cycle, and after numerous epochs in which the learning rate is much higher than the final learning rate. We found the lcycle learning rate scheduler to provide stable results with convergence using a maximum learning rate of 0.009 and 30 epochs. We provide parameters in the toolbox that can enable the visualization of the losses and learning rate changes for both the training and validation phases. Further details on these key visualizations for supervised neural methods are provided in the GitHub repository.

**DeepPhys**: A two-branch 2D convolutional attention network architecture. The two representations (appearance and difference frames) are processed by parallel branches with the appearance branch guiding the motion branch via a gated attention mechanism. The target signal is the first differential of the PPG waveform.

**PhysNet**: A 3D convolutional network architecture. Yu et al. compared this 3D-CNN architecture with a 2D-CNN + RNN architecture, finding that a 3D-CNN version was able to achieve superior performance. Therefore, we included the 3D-CNN in this case. Instead of an MSE loss, a negative Pearson loss is utilized. It is worth noting that we used difference-normalized frames as input to PhysNet as the original paper does not specify a concrete input data format. Additional experiments involving raw frame inputs are included in Appendix-D.

**PhysFormer**: PhysFormer is a video transformer-based architecture that adaptively aggregates both local and global spatio-temporal features toward rPPG representation enhancement. The architecture ultimately incorporated and emphasized long-term, global features and allowed for notable improvements in performance relative to various methods, including POS , DeepPhys , and PhysNet . Instead of an MSE loss, a dynamic loss composed of numerous hyperparameters, a negative Pearson loss, a frequency cross-entropy loss, and a label distribution loss is used. Furthermore, the chosen learning rate scheduler differs from our toolbox's default learning rate scheduler (1cycle policy ) in that we effectively opt to use a single, constant learning rate for training. We utilize difference-normalized frames as an input to PhysFormer.

**TS-CAN**: A two-branch 2D convolutional attention network architecture that leverages temporal shift operation information across the time axis to perform efficient temporal and spatial modeling. This network is an on-device, real-time algorithm. The target signal is the first differential of the PPG waveform.

**EfficientPhys-C**: A single-branch 2D convolutional neural network that aims to provide an end-to-end, super lightweight network for real-time on-device computation. The architecture has a normalization module that calculates frame differences and learnable normalization, as well as a self-attention module to help the network focus on skin pixels associated with PPG signal.

### Pre-Processing, Training, Post-Processing and Evaluation

In the rPPG-Toolbox, we offer a configuration file system that enables users to modify all parameters used in pre-processing, training, post-processing, and evaluation. A YAML file is provided for every experiment and includes blocks for pre/post-processing, training, validation, testing, model

    & & &  \\   & & & PURE  & UBFC-rPPG  & UBFC-Phys  & MMPD  \\   & & **Method** & **Train Set** & MAE\({}^{1}\) & MAPE\({}^{1}\) & MAE\({}^{1}\) & MAPE\({}^{1}\) & MAE\({}^{1}\) & MAPE\({}^{1}\) & MAE\({}^{1}\) & MAPE\({}^{1}\) \\   **PGG** \\  } & Green  & N/A & 10.09 & 10.28 & 19.81 & 18.78 & 13.55 & 16.01 & 21.68 & 24.39 \\  & ICA  & N/A & 4.77 & 4.47 & 14.70 & 14.34 & 10.03 & 11.85 & 18.60 & 20.88 \\  & CHROM  & N/A & 5.77 & 11.52 & 3.98 & 3.78 & 4.49 & 6.00 & 13.66 & 15.99 \\  & LGI  & N/A & 4.61 & 4.96 & 15.80 & 14.70 & 6.27 & 7.83 & 17.08 & 18.98 \\  & PBV  & N/A & 3.91 & 4.82 & 15.90 & 15.17 & 12.34 & 14.63 & 17.95 & 20.18 \\  & POS  & N/A & 3.67 & 7.25 & 4.00 & 3.86 & 4.51 & 6.12 & 12.36 & 14.43 \\   **PGG** \\  } &  & UBFC-rPPG & 3.69 & 3.38 & N/A & N/A & 5.13 & 6.53 & 14.00 & 15.47 \\  & & PURE & N/A & N/A & 1.29 & 1.50 & 5.72 & 7.34 & 13.93 & 15.14 \\  & & SCAMPS & 4.66 & 5.83 & 3.62 & 3.53 & 5.55 & 6.91 & 19.05 & 21.77 \\  & & UBFC-rPPG & 8.06 & 13.67 & N/A & N/A & 5.79 & 7.69 & 9.47 & 11.11 \\  & & PhysNet  & PURE & N/A & N/A & 0.98 & 1.12 & 4.78 & 6.15 & 13.93 & 15.61 \\  & & SCAMPS & 13.30 & 20.01 & 5.40 & 5.43 & 8.53 & 11.22 & 20.78 & 24.43 \\  & & UBFC-rPPG & 12.92 & 23.92 & N/A & N/A & 6.63 & 8.91 & 12.1 & 15.41 \\  & & PhysFormer  & PURE & N/A & N/A & 1.44 & 1.66 & 6.04 & 7.67 & 14.57 & 16.73 \\  & & SCAMPS & 26.58 & 42.79 & 4.56 & 5.18 & 11.91 & 15.57 & 22.69 & 27.06 \\  & & UBFC-rPPG & 5.54 & 5.32 & N/A & N/A & 6.62 & 8.21 & 17.49 & 19.26 \\  & & DeepPhys  & PURE & N/A & N/A & 1.21 & 1.42 & 8.42 & 10.18 & 16.92 & 18.54 \\  & & SCAMPS & 3.95 & 4.25 & 3.10 & 3.08 & 4.75 & 5.89 & 15.22 & 16.56 \\  & & UBFC-rPPG & 5.47 & 5.39 & N/A & N/A & 4.93 & 6.25 & 13.78 & 15.15 \\  & & PURE & N/A & N/A & 2.07 & 2.10 & 5.31 & 6.61 & 14.03 & 15.31 \\  & & SCAMPS & 10.24 & 11.70 & 12.64 & 11.26 & 6.97 & 8.47 & 20.41 & 23.52 \\    MAE = Mean Absolute Error in HR estimation (Beats/Min), MAPE = Mean Percentage Error (%).

Table 2: **Benchmark Results. Performance on the UBFC-rPPG , PURE  UBFC-Phys  and MMPD  datasets generated using the rPPG toolbox. For the supervised methods we show cross-dataset training results using the UBFC-rPPG, PURE and SCAMPS datasets.**hyperparameters, and computational resources. The pre/post-processing for neural and unsupervised methods share similar settings, such as the same input resolution and face cropping.

In terms of pre-processing, we provide three input data types: 1) "DiffNormalized", which calculates the difference of every two consecutive frames and labels, and normalizes them by their standard deviation; 2) "Standardized", which standardizes the raw frames and labels using z-score; 3) "Raw", which uses the original frames and labels without modification. Additionally, we provide parameters for face cropping, a vital aspect of our task. In the config file, users can use dynamic detection to perform face cropping every N frames and scale the face bounding box by a coefficient to maintain consistency of face cropping in motion videos. Users can also elect to use a median bounding box with dynamic detection in order to help filter out erroneous detections of the face.

With regard to the training of neural networks, our toolbox provides flexibility to parameterize which portion of the data is used for training, validation, or testing. For instance, we can use the first 80% of UBFC-rPPG for training, the last 20% of UBFC-rPPG for validation and then use the entire PURE dataset for testing. Moreover, the distinct parameters (e.g., dropout rate) of each neural network can be defined in the config file.

For post-processing and evaualtion, there are several standard post-processing steps that are typically employed to improve model predictions. A 2nd-order Butterworth filter (cut-off frequencies of 0.75 and 2.5 Hz) is applied to filter the predicted PPG waveform. The choice of filtering parameters can have a significant impact on downstream results such as heart rate errors. A Fast Fourier Transform or a peak detection algorithm is then applied to the filtered signal to calculate the heart rate. In this toolbox, we support five metrics for video-level heart rate estimations: mean absolute error (MAE), root mean squared error (RMSE), mean absolute percentage error (MAPE), signal-noise ratio (SNR), and Pearson Correlation (\(\)), along with a calculation of standard error for a better understanding of the accuracy of the aforementioned metrics. We also give users the option to visualize Bland-Altman plots as a part of evaluation. Finer details on the supported metrics (F), metric results not reported in the main paper (G), and Bland-Altman plots (J.3) appear in the respective appendices. For better reproducibility, we also provide pre-trained models in our Github repository to allow researchers to perform model inference. The detailed definition of each config parameter is also provided in the GitHub repository.

### Benchmarking

To show that the implementations of the baseline methods are functioning as expected and to provide benchmark results for consumers of the toolbox to reference and reproduce, we performed a set of baseline experiments using three commonly used video rPPG datasets for training: SCAMPS , UBFC-rPPG  and PURE  and tested on four datasets including UBFC-rPPG , PURE , UBFC-Phys , and MMPD . Except where noted in the GitHub repository, neural models utilized a training batch size of 4, 30 epochs, and an inference batch size of 4 for all experiments. Due to the multi-institution team behind this toolbox, different kinds of GPUs were utilized to produce benchmark results. Tables 2 and 4 were produced on a machine using a single NVIDIA RTX A4500 GPU. Tables 3 and 5 were produced on a machine using a single NVIDIA GeForce 2080 Ti GPU. As illustrated in Table 2, we show MAE and MAPE computed between the video-level heart rate estimations and gold standard measurements. Additional cross-dataset experiment results and metric results can be found in Appendix-G and F.

## 4 Additional Features

### Weakly Supervised Training

Supervised rPPG training requires high fidelity synchronous PPG waveform labels. However not all datasets contain such high quality labels. In these cases we offer the option to train on synchronous PPG "pseudo" labels derived through a signal processing methodology as described by . These labels are produced through POS-generated  PPG waveforms, which are then bandpass filtered around the normal heart-rate frequencies (cut-off frequencies of 0.70 and 3.0 Hz), and finally amplitude normalized using a Hilbert-signal envelope. The tight filtering and envelope normalization results in a strong periodic proxy signal, but at the cost of limited signal morphology.

For instance, in the BP4D+ dataset , the cardiac ground truth is represented by a blood pressure waveform. Although this waveform exhibits the same periodicity as the PPG signal, it has a phase shift that adversely affects model training. A figure that illustrates sample pseudo labels derived for BP4D+  videos plotted against the ground truth blood pressure waveform as shown in Figure 3. Table 3 presents results for supervised methods, trained on BP4D+  pseudo labels. We extend this feature to all of the supported datasets.

### Motion Augmented Training

The usage of synthetic data in the training of machine learning models for medical applications is becoming a key tool that warrants further research . In addition to providing support for the fully synthetic dataset SCAMPS , we provide provide support for synthetic, motion-augmented versions of the UBFC-rPPG , PURE , SCAMPS , and UBFC-PHYS  datasets for further exploration toward the use of synthetic data for training rPPG models. The synthetic, motion-augmented datasets are generated using an open-source motion augmentation pipeline targeted for increasing motion diversity in rPPG videos . We present cross-dataset results using a motion-augmented version of the UBFC-rPPG  dataset in Table 4. We also provide tools that leverage OpenFace  for extracting, visualizing, and analyzing motion in rPPG video datasets. Further details regarding these tools are shared in our GitHub repository.

### Extending the rPPG-Toolbox for Physiological Multitasking

While this toolbox is primarily targeted towards rPPG model training and evaluation, it can be easily extended to support multi-tasking of physiological signals. As an example, we implement BigSmall , an architecture that multi-tasks PPG, respiration, and facial action. Similar to  we present 3-fold cross-validation results across the action unit (AU) subset of BP4D+  (the portion of the dataset with AU labels), and use the same subject folds and hyperparameters as implemented in the original publication. These results can be found in Table 5. Note, that like , facial action metrics are calculated across 12 common AUs (AU #s 1, 2, 4, 6, 7, 10, 12, 14, 15, 17, 23, 24). Additional details of training and evaluation could be found in Appendix-I.

    &  \\
**Testing Set** &  &  &  \\  & MAE\(\) & MAPE\(\) & \(\) & MAE\(\) & MAPE\(\) & \(\) & MAE\(\) & MAPE\(\) & \(\) \\   TS-CAN  & 1.07 & 1.20 & 0.97 & 5.03 & 6.36 & 0.75 & 12.59 & 13.77 & 0.23 \\ PhysNet (Normalized)  & 17.03 & 32.37 & 0.38 & 5.51 & 7.50 & 0.68 & 10.67 & 13.99 & 0.33 \\ DeepPhys  & 1.15 & 1.40 & 0.97 & 4.95 & 6.26 & 0.75 & 12.71 & 13.70 & 0.21 \\ EfficientPhys-C  & 2.59 & 2.67 & 0.88 & 4.80 & 6.10 & 0.79 & 13.39 & 14.50 & 0.14 \\    MAE = Mean Absolute Error in HR estimation (Beats/Min), MAPE = Mean Percentage Error (%), \(\) = Pearson Correlation in HR estimation.

Table 4: **Training with Motion-Augmented Data.** We demonstrate results training on a motion-augmented (MA) version of the UBFC-rPPG  dataset generated using an open-source motion augmentation pipeline  and testing on the unaugmented version of the PURE  dataset.

    &  \\
**Testing Set** &  &  \\  & MAE\(\) & MAPE\(\) & \(\) & MAE\(\) & MAPE\(\) & \(\) \\  
**Supervised** & & & & & & \\ TS-CAN  & 4.69 & 4.51 & 0.78 & 1.29 & 1.60 & 0.97 \\ PhysNet(Normalized)  & 1.78 & 1.92 & 0.96 & 3.69 & 7.35 & 0.88 \\ DeepPhys  & 2.74 & 2.81 & 0.93 & 2.47 & 2.49 & 0.89 \\ EfficientPhys-C  & 2.43 & 2.52 & 0.90 & 3.59 & 3.27 & 0.80 \\    MAE = Mean Absolute Error in HR estimation (Beats/Min), MAPE = Mean Percentage Error (%), \(\) = Pearson Correlation in HR estimation.

Table 3: **Training with Pseudo Labels.** For the supervised methods we show results training with the (entire) BP4D+  dataset, using POS  derived pseudo training labels.

### Training, Evaluation and Analysis Features

In this toolbox, we have incorporated a diverse set of training and evaluation functionalities. These include: 1) data pre-processing visualization tools, enabling users to inspect and understand their data before feeding it into the model; 2) comprehensive tracking and visualization of key training metrics such as training loss, validation loss, and learning rate, facilitating a thorough monitoring of the model's learning progress; 3) the implementation of Bland-Altman plots, providing a robust method for assessing agreement between two ground-truth HR and predicted HR; 4) advanced motion analysis capabilities. For an in-depth exploration of these features, we direct the reader to Appendix-J and our Github page, where detailed descriptions and usage examples are provided.

## 5 Limitations

We acknowledge there are many limitations in our current toolbox and plan to continue improve it in the future. In the ensuing phases of our research, we envision a collaborative approach, working in concert with the wider scientific community, to enhance the efficacy and capabilities of the rPPG-Toolbox. The current limitations include 1) this toolbox does not support all of the latest neural architectures and diverse datasets; 2) it does not support unsupervised and self-supervised learning paradigms; 3) it does not support applications beyond of heart rate calculation such as heart rate variability, blood pressure, SpO\({}_{2}\), and other importasnt physiological measures.

## 6 Broader Impacts

Camera sensing has advantages and benefits with the potential to make important cardiac measurement more accessible and comfortable. One of the motivating use-cases for rPPG is turning everyday devices equipped with cameras into scalable health sensors. However, pervasive measurement can also feel intrusive. We are releasing the rPPG toolbox with a Responsible AI License  that

Figure 3: **Generated Pseudo Labels. Samples of POS  generated PPG pseudo labels plotted against ground truth blood pressure waveforms from BP4D+ .**

  
**Training Set** &  \\
**Testing Set** &  \\
**Task** &  &  &  \\  & MAE\(\) & MAPE\(\) & \(\) & MAE\(\) & MAPE\(\) & \(\) & F1\(\) & Prec. \(\) & Acc. \(\) \\   BigSmall  & 3.23 & 3.51 & 0.83 & 5.19 & 26.28 & 0.14 & 42.82 & 39.85 & 65.73 \\    MAE = Mean Absolute Error in HR estimation (Beats/Min), MAPE = Mean Percentage Error (%), \(\) = Pearson Correlation in HR estimation, F1 = average F1 across 12 action units, Prec. = average precision across 12 action units, Acc. = average accuracy across 12 action units.

Table 5: **Multitasking Results. For the BigSmall  method we show results for multi-tasking PPG, respiration, and action unit classification; training with the BP4D+  (AU subset) dataset, using POS  derived pseudo training PPG labels.**restricts negative and unintended uses of the toolbox. We also acknowledge the presence of several potential negative concerns and impacts, which are described as follows.

**Privacy Concerns:** Camera-based physiological sensing offers a revolutionary way to extract physiological signals from video recordings, enabling a myriad of applications, from remote patient monitoring to daily fitness tracking. However, these advancements come with significant privacy concerns. First and foremost, the very nature of remote sensing allows for the collection of personal data without direct physical interaction or, in some cases, knowledge of the individual being monitored. This can potentially enable unauthorized entities to capture sensitive physiological data covertly. Furthermore, as these systems become more widespread, there is a risk that everyday places such as shopping malls, public transport, and even workplaces might employ rPPG systems, leading to widespread passive data collection. Such extensive monitoring can lead to privacy invasions, where individuals are constantly under physiological surveillance without their explicit consent.

**Potential Negative Impact:** Beyond individual privacy, there are broader societal implications of widespread contactless camera-based physiological sensing. There's the potential for the creation of a pervasive surveillance state where citizens are continuously monitored, not just for their actions but also for their physiological responses. Such monitoring can lead to "physiological profiling," where individuals are judged, categorized, or even discriminated against based on their bodily responses. For instance, elevated heart rates or other physiological markers might be misinterpreted as signs of nervousness, guilt, or deceit, potentially affecting decision-making in areas such as law enforcement, job interviews, or public services. Moreover, a continuous emphasis on physiological metrics might foster an environment of physiological conformism, where people feel pressured to exhibit 'normal' physiological signs even if they aren't feeling well or are under duress.

**Potential Ethical Concerns:** The ethical implications of rPPG are multi-faceted. Firstly, there is the concern of informed consent. As technology becomes more integrated into our environments, it becomes challenging to ensure that individuals are aware of, and have agreed to, the collection of their physiological data. Moreover, the accuracy and reliability of rPPG systems can vary depending on factors like skin tone, lighting conditions, and other external factors. This introduces the risk of systematic biases, where certain groups might be inaccurately assessed or marginalized due to technological limitations or inherent biases in the algorithms. Ethical concerns also arise from potential misuse. For example, businesses might use rPPG data to gauge consumer reactions to products or advertisements, leading to manipulative strategies that target individual vulnerabilities. In extreme cases, authoritarian regimes might use such technologies to monitor citizens for signs of dissent or unrest. As with any potent tool, the ethical application of rPPG requires careful consideration of its potential for both benevolent and malevolent use.

## 7 Conclusion

Research relies on the sharing of ideas, this not only allows methods to be verified, saving time and resources, but also allows researchers to more effectively build upon existing work. Without these resources and open-sourced code bases, fair evaluation and comparison of methods is difficult, creates needless repetitions, and wastes resources. We present an end-to-end and comprehensive toolbox, called rPPG-Toolbox, containing code for pre-processing multiple public datasets, implementations of supervised machine learning (including training pipeline) and unsupervised methods, and post-processing and evaluation tools.

## 8 Acknowledgement

This project is supported by a Google PhD Fellowship for Xin Liu and a research grant from Cisco for the University of Washington as well as a career start-up funding grant from the Department of Computer Science at UNC Chapel Hill. This research is also supported by Tsinghua University Initiative Scientific Research Program, Beijing Natural Science Foundation, and the Natural Science Foundation of China (NSFC).