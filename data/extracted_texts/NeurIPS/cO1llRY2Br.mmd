# Initializing and Retrofitting Key-Value Adaptors for Traceable Model Editing

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

As the insight of knowledge storage in language models deepens, the ability to perform CRUD (Create, Read, Update, Delete) operations on language models becomes increasingly indispensable for satisfying the demands of managing rapidly updating knowledge. Considering the high cost of fine-tuning language models, model editing methods with low cost are usually required to manipulate models' knowledge. Evident suggests that modules carrying knowledge in a Transformer module are primarily the MLP blocks, thus we propose **iReVa**, a method that explicitly initializes and retrofits key-value pairs into MLP blocks to construct a new mapping of a piece of knowledge without damaging the irrelevant knowledge. In comparison to existing methods, iReVa reveals better interpretability and stronger capacity for carrying traceable edits. Experiment results on series of GPT series models show our prominent performance on edit success and generalization without influencing specificity. We also perform the first attempt at conducting knowledge withdrawal test of iReVa. Our codes are available at github.com/timberflow/iReVa.git.

## 1 Introduction

Language Models (LMs)  are becoming imperative tools for consulting in real-world scenarios. One significant reason for the prevalence of LMs is their ability to answer factoid questions. For example, when we ask an LM with the question "_Who is president of America?_", it returns the answer "_Joe Biden_". Even though a mass amount of knowledge is stored in the LMs, we still face the issue of out-of-date and missing knowledge [2; 3]. Alternatively, some knowledge may change over years and some domain-specific knowledge may be absent from the LMs.

To bridge the gap, the task of model editing is introduced to _edit_ the knowledge in LMs, which targets at conducting change to the parameters of LMs and inject certain knowledge to them . The difficulty of this task lies in the manipulation to the LMs, where the knowledge is implicitly stored in dense vectors. A naive solution to model editing is fine-tuning a LM with the new knowledge, whereas the cost is climbing with the surging size of LMs. More recent studies propose to directly update the models' weights in mastery phase [5; 6] via either teaching a hyper-network to learn the change of the weights or locating-then-editing knowledge neurons [7; 8; 9; 10]. While the editing methods above are efficient in updating knowledge in LMs, they encounter the difficulties of differentiating the existing and new knowledge, which makes the editing hard to control. Methods like life-long model editing , MELO , and T-Patcher  propose to learn the representation for new knowledge and merge this information with the original models.

However, these methods still conform to the paradigm of learning the batch edit [13; 14] as a whole without modeling edit parameters in a traceable way, which can not conform the edit success to each edit and have a lack interpretability to the editing. In contrast, we propose a method ofInitializing and **R**etrofitting **KEy-V**alue **A**daptors (**iReV**a**), an editing method that inserts a key-value adaptor to indicate the mapping of an edit data pair and further retrofit the adaptor with multiple objectives. Moreover, to prevent the unnecessary change to the irrelevant knowledge, we elaborately design activation mechanism for the knowledge neurons. Experimental results on series of GPT-like models show that iReV**a** is able to outperform the SOTA results by around \(9\%\) and \(6\%\) average score improvement on zsRE-10K and PARAREL-10K, respectively. Moreover, iReV**a** is able to perform knowledge withdrawal in almost perfect condition.

Our contributions are summarized as follows: 1) We introduce a novel editing method which initializes and retrofits a key-value adaptor for traceable model editing, which is compatible to most LMs. 2) Our method outperforms recent baselines on model editing tasks with noticeable margins based on various evaluation metrics. 3) We validate the interpretability and generalization capabilities of our method by conducting further analysis such as knowledge withdrawal test and generalization test.

## 2 Related Work

### Insight of Knowledge Storage in Language Models

As pre-trained LMs show strong abilities to answer factoid questions. Discussion about how LMs store knowledge has emerged.  introduced the perspective of treating LMs as knowledge bases and proved its plausibility, which attracted the subsequent attention towards the exploration on the form of knowledge incorporated by LMs. The opinion pointed out by  indicates that factual knowledge is stored in two-layer-FFN network of a Transformer due to the similar form as key-value memories. This opinion was followed by , which further derives the coefficient between final prediction and knowledge neurons in MLP blocks. In contrast, , through a casual-tracing experiment, posed viewpoints that knowledge is stored in self-attention module.  further validates that the weight update is concentrated on parameters in self-attention module when we train models with new knowledge. Our editing method is built upon the former hypothesis and we focus on the editing to the MLP blocks.

### Editing LMs by Manipulating Knowledge

With the frequent update of the knowledge, the demand of model editing increases. Diverse studies have been proposed. By analogy with human knowledge acquisition, we can categorize the editing into three distinct phases. In recognition phase , methods such as ERAC and IKE [8; 18] solved the problem by importing additional memories in the form of a relevant contexts or prompts. In association phase , parameter-efficient tuning [19; 20; 12; 11] inserts low-rank adaptors or prefix token embeddings to fine-tune new knowledge and combine them to the original models. There are also some studies directly changing the weights of Transformers in mastery phase . For example,  proposed KE and  proposed MEND to predict the updated parameters of a model with a trained hyper-network. Furthermore, ROME  and MEMIT  compute the weight update explicitly with proper representations of knowledge queries and values. However, none of them focuses on traceable model editing, which allows more flexible manipulation of the knowledge.

## 3 Problem Formulation

We follow the previous studies [21; 12; 11] to formulate the task. Suppose we are given a base model that could be a pre-trained language model \(f_{}\) parameterized by \(\), model editing aims at editing \(f_{}\) with a dataset \(_{in}=\{(x_{1},y_{1}),...,(x_{i},y_{i})...,(x_{n},y_{n})\}\), where \((x_{i},y_{i})\) denotes the edit input-output pairs. Initially, for \(x_{i}_{in}\), the base model makes prediction \(_{i}=f(x_{i})\) but \(} y_{i}\). In this case, we change \(f_{}\) by _editing_ its parameters to \(^{*}\). A good model editing to \(f_{^{*}}\) should satisfy: 1) for any \(x_{i}_{in}\), the edited model \(f_{^{*}}\) should output desired predictions, that is \(f_{^{*}}(x_{i})=y_{i}\); 2) for any input out of the scope of \(_{in}\), which is denoted as \(_{out}\), the edited model \(f_{^{*}}\) should retain the original predictions, that is \(f_{^{*}}(x_{i})=f_{}(x_{i})\); 3) the edit of \((x_{i},y_{i})\) towards \(f_{^{*}}\) should not influence any prior edits \(x_{<i}_{in}\).

## 4 Method

To develop an editing method that supports traceable edits to knowledge neurons, we introduce a novel method "**iReVa**" that initializes and **Re**trofits **kEy**-Value **A**daptors for traceable model editing. The pre-trained LM \(f_{}\) usually contains Transformer blocks, which consist of intertwined self-attention and feed-forward layers. The prior studies  have shown that the inside MLP blocks are commonly deemed as the neurons for storing implicit knowledge. Our method is able to insert new knowledge but without damaging the irrelevant knowledge in the models by inserting and retrofitting the key-value adaptors to these blocks.

Figure 3 depicts the architecture of our proposed method. For a two-layer-FFN MLP block in the \(l\)-th layer of the original model \(f_{}\), we denote the weights of the first FFN layer as \(^{l}^{d_{1} d_{2}}\) and the second FFN as \(^{l}^{d_{2} d_{1}}\). Assume a hidden state \(^{l}^{d_{1}}\) is an input of the FFN of \(l\)-th layer, the above block processes the input as follows:

\[^{l}=(^{l}+( ^{l}))\] (1)

\[^{l}=^{l}g_{act}(^{l}^{l})\] (2)

\[^{l+1}=(^{l}+^{l})\] (3)

where \(g_{act}\) is the activation layer and \(^{l+1}^{d_{1}}\) is the input of the next Transformer block. Here, \(^{l}\) and \(^{l}\) emulate neural memories, where keys capture input patterns and values are stored knowledge to be retrieved. When there comes an input vector, it first computes a distribution over the keys, then retrieve the expected knowledge. As the process is just the same for each layer, we can choose any of the layers to edit, we omit \(l\) for simplicity in the following description.

Our method inserts a key-value adaptor into the existing MLP block. Specifically, we update \(\) by inserting a new knowledge neuron to store the edit. Two matrices \(}^{d_{1} n}\) and \(}^{n d_{1}}\) perform as the key-value pair to memorize \(n\) edited knowledge, where the knowledge is well-indexed by \(n\) dimensions. Therefore, Equation 2 becomes:

\[ =[}]^{}g_{act}([}]^{})\] (4) \[=^{}g_{act}(^{})+ }^{}g_{act}(}^{}),\] (5)

Figure 1: Architecture of iReVa. The left block shows the training procedure with the newly inserted knowledge neurons. The middle block shows the inference procedure with in-scope and out-of-scope edits. We interpret the inference phase by giving some explicit examples (Please note we omit some neurons during inference due to the space limit.). When the query falls in the in-scope edit, our key-value adaptor will be activated and retrieve the corresponding knowledge. When the query falls in the out-of-scope edit, our key-value adaptor is inactive and the model retrieves knowledge from the original memory.

where \(\) denotes concatenation. As we can see, the key-value adaptor appends more information to \(\), which could overwrite the original output. And original parameter set \(\) is extended to \(^{*}\) with the new included parameters \(}\) and \(}\). Therefore, we aim to find a good key-value adaptor for model editing that can collaborate with the original knowledge neurons. Considering the independence of the above two function terms and the potential more flexible combination to the output, we relax the formulation of the adaptor to \((;},})=}^{}g_{act}(}^{})\), which may be a more expressive function with a scaling factor \(\). Next, we will introduce how to find such an optimal adaptor which not only satisfies the edit success but also preserves the original model behavior.

### Initial Key-Value Adaptors for In-Scope Editing

Given an edit \((x_{i},y_{i})_{in}\), we first initialize its knowledge neuron \(}^{0}^{d_{1}}\) and \(}^{0}^{d_{1}}\). For \(}^{0}\), we initialize each key to the \(x_{i}\) using the cached input \(\) predicted by \(f_{}(x_{i})\) at layer \(l\), which results in a high probability of matching to the input pattern. For \(}^{0}\), we initialize it using the weights corresponding to \(y_{i}\) from the last layer of \(f_{}\). Specifically, \(f_{}(x_{i})\) takes charge of generating the next token which can be deemed as the prediction to \(x_{i}\). Thus, we extract the corresponding column of the ground truth token \(y_{i}\) from the weights \(^{d_{1}|V|}\) for generating the next token distribution, where \(|V|\) and \(d_{1}\) are the sizes of the vocabulary and dimension of the last layer, respectively 1 After initialization, we build a mapping from \(x_{i}\) to \(y_{i}\) in a Transformer.

### Retrofit Adaptors for Model Editing (Training Phase)

To prevent the effect of the inconsistent scaling brought by built-in parameters in Equation 1, we first normalize \(\) to ensure that its mean value is close to \(0\) before it is fed into the adaptor. Given \((x_{i},y_{i})\), we can have the initialized key-value adaptor as follows:

\[(;},})=(}^{0})^{}g_{act}((}^{0})^{}).\]

To avoid the inserted key-value adaptor distracts the original knowledge stored in the existing neurons, we propose to use the activation functions that can activate the memory with a large matching value and ignore the memory with a small matching value. When we deploy the adaptor to models, the activation function usually remains consistent with the base model. Furthermore, we apply a hyper-parameter margin \(>0\), which allows memory to be active if \(x>\), otherwise inactivate. For example, we use GeLU  for GPT  series model and our activation function can be denoted as:

\[g_{act}(x)=(x-).\] (6)

The motivations behind the above design in our activation function are two-fold: First, the activation function works as a neuronal inhibitor to inhibit the activation of new knowledge neurons, which retains the original output in most cases. Second, the involvement of the margin further raises the bar to activate the new knowledge neurons. If a certain input is out of the editing scope, it fails to match any memory, all inserted neurons will be inhibited after the activation function as shown in Figure 1.

In practice, edit input \(x_{i}\) is shown in the form of a sequence of tokens such as "_{the_, _capital_, _of_, _China_, _is_}" and \(y_{i}\) is the single-token answer "_Beijing_". This indicates that we have a sequence of hidden states \(\{_{1},_{2},...,_{s}\}\) corresponding to input \(x_{i}=\{w_{1},w_{2},...,w_{s}\}\). To avoid damaging the original behavior of the edit model, the edit block merely works on the final token, which is the last token before generation:

\[(_{j};},})= 0&j s\\ }^{}g_{act}(}^{}_{j})&j=s.\] (7)

where \(_{j}\) is the input corresponding to the \(j\)-th hidden state \(_{j}\) in the sequence. As a result, only when the entire input sequence is fed into the model, the new knowledge is activated, which not only prevents the dramatic change to the original model but also benefits the gradient update to the key-value pairs2.

**Fine-tuning adaptors with multiple objectives**. While the above initialization effectively builds the mapping from a certain edit input to the edit output, its impact on irrelevant knowledge may lead to catastrophic forgetting  issue, which is caused by the extending key-value pairs of the adaptor. In other words, we expect \((;},})\) could dominate the output for each \(x_{i}_{in}\) but maintain unchanged prediction for \(x_{i}_{out}\) and \(x_{<i}_{in}\). Inspired by the elastic weight consolidation for neural networks , we set optimization goals to retrofit \(^{*}\) with the consideration of the following perspectives.

(1) To maximize the prediction of \(y_{i}\) from the last layer, we maximize the probability of the ground truth edit output given the edit input:

\[_{edit}=-[_{f^{*}_{}}(y_{i}|x_{i})]\] (8)

(2) Even though \(_{edit}\) enables models to fit the mapping from \(x_{i}\) to \(y_{i}\) effectively, it may push our adaptor far from the initialization, which may damage the initialized key distribution and lead to overfitting. Hence, we propose an additional term to prevent the dramatic change of the update of \(}\):

\[_{rec}=||(}^{0}-})^{} ||_{2}^{2}\] (9)

(3) Importantly, to prevent the fine-tuning from changing the irrelevant knowledge, we sample some out-of-scope edit data to form \(_{out}\)3 and retain the original outputs from the model:

\[_{irr}=-_{out}|}_{(x_{i},y_{i}) _{out}}(}^{}x_{i}-,0)\] (10)

Hence, we comprehend each aspect to form the final objective to retrofit the key-value adaptor:

\[=_{edit}+a_{rec}+b_{irr}\] (11)

where \(a\), \(b\) are hyper-parameters denoting the importance of the different objective aspects. It is worth noting that we edit one knowledge neuron at one time, but we still support sequential editing by iteratively inserting key-value pairs. During training, all parameters except for \(}\) and \(}\) for the current edit are frozen. That is, we freeze the prior edit knowledge neurons and simply update the neuron inserted for current edit. This procedure repeats until we have conducted edit over the entire dataset. Compared with parameter high-efficient tuning methods [19; 26], which injects the new knowledge into a pre-trained LM as a whole, iReVa focuses on editing parameters in a traceable manner. In other words, we can locate the edited knowledge neurons. At the end, we display the training procedure of iReVa in Algorithm 1.

```
1:Input In-scope editing pairs \(_{in}\); out-of-scope editing pairs \(_{out}\); Original model \(f_{}\); Iteration number \(T\)
2:Initial\(^{*}\)
3:for\((x_{i},y_{i})_{in}\)do
4:Initial\(}\); \(}_{[y_{i},:]}\)\(\) Initialize key-value adaptor as shown in Section 4.1
5:\(^{*}^{*}}}\)
6:for\(t=\{1,2,..,T\}\)do
7:\(_{edit}+a_{recon}+b_{ irr}\)\(\) Retrofit key-value adaptor as shown in Section 4.2
8:\(}(},})\)
9:\(}(}, })\)return\(f_{^{*}}\) ```

**Algorithm 1** Training Procedure of iReVa

### Activate Max-Matching Key in Adaptor (Inference Phase)

As we iteratively append \(}\) and \(}\) to the knowledge neurons. The above procedure will sequentially generate mappings from the edit input to the edit output. Eventually, we obtain two concatenated matrices \(}^{d_{1} n}\) and \(}^{n d_{1}}\). During inference, we further control the amount of active neurons and highlight the max-matching memory. To this end, we introduce a max-pooling layer to extract the memory with the maximum matching score:

\[(;},})=}_{j}^{}g_{act}(}_{j}^{}),\] (12)where \(j=*{argmax}_{t}(}_{t}^{})\) and \(}_{t}\) denotes the \(j\)-th column of \(}\). As we can see, when there comes a new input, this layer will highlight the inserted knowledge neurons with the highest similarity score to the input as shown in Figure 1. It is worth noting that we exclude the max-pooling layer during the training procedure because this may impede the back-propagation due to the inactivation of the neurons.

## 5 Experimental Setup

### Datasets

We perform extensive experiments on two modeling editing tasks: **zsRE** is a commonly used model editing tasks derived from question-answering benchmark. Totally \(19,086\) examples are included, each example includes a source question, paraphrase question and corresponding answer. We construct another **PARAREL** dataset. Each sentence in PARAREL is derived from a triplet \((s,r,o)\) and the object \(o\) was replaced with a "_[MASK]_" token and a paraphrased version is also involved. To apply PARAREL in model editing task, we selected those sentences that end with "_[MASK]_" token to conform to the format of next-token-prediction4. For both datasets, we sample irrelevant question-answer pair from NQ to evaluate the preservation to out-of-scope editing. We test \(10\)K edit in a batch and denote them as **zsRE**-10**K** and **PARAREL**-10**K**, respectively.

### Baselines

We compare our iReVa with \(6\) advanced baselines that support batch editing: **NO EDITING** denotes we do not modify the base model and utilize its original prediction; **FT** is the simple fine-tuning with a constraint on the key-value adaptor. **MEMIT** and **ROME** are two methods employing a casual analysis to detect the most significant hidden states. They view the editing as a minimum optimization and edit the weight directly, which is effective in batch edit; **MEND** applies rank-one decomposition to divide the model into two rank-one matrices, which is able to carry mass knowledge in the dense metrics; **MELO** activates specific LoRA block corresponding to specific queries for multiple edits, which support large-scale editing in just one process.

### Evaluation Metrics

We follow the commonly-used evaluation metrics [9; 10] to measure the effect of our editing method.

1. **Edit Success** (ES) measures the models' prediction accuracy on edited data \(x_{i}_{in}\) by calculating \(ES=_{i=0}^{N}(y_{i}=f_{}(x_{i}))\), which represents whether the new knowledge is successfully injected into the base model.
2. **Generalization** (Paraphrase Success, PS) measures the models' prediction accuracy on paraphrase questions provided by benchmarks. We compute paraphrase success with the same formulation but for \(x_{i}\) in paraphrase questions set. Paraphrase success indicates whether the model can recognize similar expressions and provide edited answers.
3. **Specificity** (Neighbhood Success, NS) measures the models' prediction accuracy on irrelevant questions. Different from \(_{out}\), these questions are only used for preventing data leakage. We compute neighborhood success with the same formulation but for \(x_{i}\) in neighborhood questions set. Neighborhood success manifests the capability of solving catastrophic forgetting and preserving irrelevant knowledge stored in model.
4. **Score** is the average of three aforementioned metrics.

### Implementation Details

Regarding editing datasets, we pre-process the edit input-output pairs following existing studies . If the multiple tokens form a single prediction, we decompose the multiple tokens into multiple data pairs by greedily appending the previous token in the edit output at the end of the edit input5. For model selection, we conduct the experiments on GPT2-XL (1.5 Billion parameters)  due to its wide application on existing model editing studies. We trained iReVa on a single NVIDIAA800 80G GPU. On two evaluated benchmarks, we set \(a=1e-3,b=1e-3,=2e-1\), and iReVa is applied in \(47\)-th (\(48\) layers totally) layer inspired by the assertion in . For the margin in activation function, we set \(=0.75\) for zsRE, \(=0.65\) for PARAREL. During training, we conduct experiments on GPT2-XL with setting learning rate as \(5e-2\), batch size as \(1\), epoch number as \(5\). We set the learning rate as \(5e-3\) for GPT-NEO-2.7B. More implementation details of baselines is displayed in Appendix A.7. We re-implement the comparable baselines using the same configuration reported in existing studies.

## 6 Results and Analyses

### Comparisons to Existing Methods

Table 6.1 exemplifies performances of iReVa and baselines on zsRE and PARAREL with \(10\)K edits in batch. As we can see, iReVa outperforms all baselines on average scores with noticeable margins. Even without retrofitting, our method is able to outperform the SOTA results by around \(9\%\) and \(6\%\) average score improvement on zsRE-10K and PARAREL-10K, respectively. Among all the baseline methods, FT achieves good results on ES and PS, this indicates that fine-tuning is simple but effective to inject knowledge but it could easily distract the irrelevant knowledge, resulting in a poor NS. Whereas other baselines can not guarantee the editing success in a batch, resulting in poor ES and PS. In comparison, iReVa achieves impressive results on all the evaluation metrics. It achieves close to \(100\%\) ES without detriment to the original NS. We observe a slight improvement from the results of iReVa to iReVa+\(\) on zsRE-10K dataset, it verifies our rationale deduce for the initialization of key-value pairs. However, the improvement brought by fine-tuning is not maintained on PARAREL-10K, we suspect this is because the involvement of irrelevant knowledge brings in little unexpected noise with possibility.

### Edit Withdrawal Test

Compared with the existing editing methods, our method has the unique advantage of interpretability and traceability, that is we can clearly identify the edit for each newly inserted key-value pair. This provides a chance to conduct an edit withdrawal test. Specifically, we test, after editing on \(10\)K examples, if iReVa is able to withdraw certain edits and recover the original output from the base model without much loss. To this end, we inhibit corresponding knowledge neurons as withdrawing the edit, which is denoted as \(f_{^{*}}^{-}}\). For evaluation, we introduce two metrics, namely

**Retrieve Success** and **Consistency**. They are formulated as \(RS=_{i=0}^{N}(f_{^{*}}(x_{i}) f_{^{*}}^{- }_{i}})\) and \(Con=_{i=0}^{N}(f_{}(x_{i})=f_{^{*}}^{-}_{i}})\), respectively. The evaluation result on zsRE-10K is shown in Table 6.2. The results which are close to \(100\%\) proves that iReVa can explicitly manipulate the activation of knowledge neurons and easily withdraw the updated knowledge. It is worth noting that this test is not applicable to any other editing methods as their edited parameters are untraceable. This is the first attempt at conducting more flexible knowledge editing.

    &  &  \\  & Score & ES & PS & NS & Score & ES & PS & NS \\  NO EDITING & \(24.17\) & \(22.89\) & \(21.96\) & \(27.65\) & \(20.03\) & \(18.66\) & \(17.24\) & \(24.18\) \\  FT & \(57.29\) & \(82.80\) & \(64.51\) & \(24.57\) & \(52.64\) & \(83.32\) & \(53.06\) & \(21.55\) \\ MEND & \(15.94\) & \(12.43\) & \(12.04\) & \(23.35\) & \(0.16\) & \(0.00\) & \(0.00\) & \(0.50\) \\ ROME & \(11.10\) & \(17.26\) & \(14.24\) & \(1.80\) & \(5.35\) & \(9.65\) & \(6.23\) & \(0.17\) \\ MEMIT & \(42.51\) & \(52.62\) & \(47.29\) & \(27.63\) & \(46.17\) & \(62.60\) & \(52.71\) & \(23.20\) \\ MELO & \(32.51\) & \(42.75\) & \(28.12\) & \(\) & \(25.95\) & \(34.19\) & \(20.83\) & \(22.83\) \\  iReVa & \(66.27\) & \(\) & \(74.89\) & \(26.03\) & \(\) & \(\) & \(\) & \(\) \\ iReVa +\(\) & \(\) & \(97.47\) & \(\) & \(26.47\) & \(56.80\) & \(89.85\) & \(56.37\) & \(\) \\   

Table 1: Editing results on various model editing tasks with GPT2-XL as the base model. In our methods, \(+\) represents iReVa with fine-tuning as described in Section 4.2.

### Efficiency Analysis

We discuss the spatial and time complexities of iReVa. Regarding time complexity during inference, iReVa only insert the adaptor in a single \(l\)-th layer and the insertion only affects the final token prediction of the input. With \(^{1 d_{1}},}^{d_{1}  n},}^{n d_{1}}\), the extra time consumption is \((d_{1}^{2}n)\), which is unrelated to the input length and number of layers. Regarding spacial complexity, as we insert two vectors for each edit in a single layer, the extra spacial consumption is \((2nd_{1})\). In practice, for GPT2-XL with \(1.5\)B parameters, the adaptor merely possesses \(0.08\)B parameters with \(10\)K edits. There is no additional spacial complexity involved in the training phase, given that only \(2d_{1}\) parameters are learnable for each edit. We empirically record that \(10\)K edits with iReVa cost \(7.5/1.6\) hours (fine-tuning/without fine-tuning) with a single NVIDIA A800 GPU, compared to \(9.16\) hours for ROME and \(5.4\) hours for MEMIT.

### Ablation Study

Table 6.4 shows iReVa's performance on zsRE-10K when we iteratively remove sub-modules: (1) w/o activation function denotes that we remove the activation function proposed in Equation 6. (2) w/o max-pooling denotes that we involve all knowledge neurons during inference instead of the design of Equation 12. (3) w/o \(_{rec}\) denotes that we train iReVa without initialization and set \(a=0\) in Equation 11. (4) w/o \(_{irr}\) means we do not apply \(_{irr}\) by setting \(b=0\) in Equation 11. As we can see, all the modules contribute to the good results. In comparison, the activation function is important to preserve the out-of-scope edit. Without activation function, we can attain better results on ES and PS, but NS will decrease sharply. We also find that the influence of max-pooling is significant, which may attribute to noisy data added by a large amount of active but irrelevant knowledge neurons. Besides, excluding \(_{rec}\) will lead to an observable drop on the three metrics because we discord the effective initialization on \(}\) and \(}\). Finally, disabling \(_{irr}\) may induce a marginal improvement in ES and PS, but at the cost of a reduction in NS.

### Generalization Capabilities of iReVa

**Layer generalization**. To evaluate the effect of iReVa in various layers, we iteratively apply iReVa and the other two baseline editing methods to different layers of GPT2-XL, which consists of \(48\) layers in total. Figure 6.5 illustrates the influence of three metrics on different layers with intervals. The tendency shows that the edit in the higher layer results in better editing results. This indicates that LMs' final prediction primarily depends on the information retrieved from higher layers and the knowledge stored in lower layers may be overshadowed. For ROME and MEMIT, apparently, they show distinct generalizations in edit layer. Their ES and PS peak at middle layer like \(17\) or \(22\), which proves that the layer generalization is remarkably relevant to the characteristics of different methods. Even though MEMIT achieves good performance in NS when the edit happens in lower layers, overall iReVa outperforms the baselines regarding the comprehensive evaluation metrics.

**LMs generalization**. We also test iReVa on different LLMs as base models, Figure 6.5 shows iReVa's generality on different backbones. We apply a larger LM GPT-NEO-2.7B  and smaller LM GPT2-LARGE  to evaluate the effect of iReVa on LMs with different sizes. Both

   Method & Retrieve success & Consistency \\  iReVa & \(98.02\%\) & \(93.03\%\) \\   

Table 2: Results of edit withdrawal on zsRE-10K dataset with GPT2-XL as the base model.

   Activation & Max & Loss & Loss &  \\ function & pooling & \(_{rec}\) & \(_{irr}\) & Score & ES & PS & NS \\  ✓ & ✓ & ✓ & ✓ & \(66.77\) & \(97.47\) & \(76.38\) & \(26.47\) \\ ✓ & ✓ & ✓ & \(\) & \(67.00\) & \(97.84\) & \(76.73\) & \(26.43\) \\ ✓ & ✓ & \(\) & ✓ & \(63.22\) & \(92.28\) & \(73.25\) & \(24.13\) \\ ✓ & \(\) & ✓ & ✓ & \(44.93\) & \(56.07\) & \(52.41\) & \(26.31\) \\ \(\) & ✓ & ✓ & ✓ & \(60.27\) & \(99.41\) & \(78.52\) & \(2.87\) \\   

Table 3: Results of ablation study on zsRE dataset with GPT2-XL as the base model.

GPT-NEO-2.7B and GPT-LARGE contain two-layer-FFN MLP blocks. IReVa can be deemed as a plug-in module for general LMs, which can be applied to more LMs. From the figure, we observe that iReVa can achieve the best average score on both LMs, which shows its general effect.

**Edit quantity generalization**. We discuss the influence on iReVa's performance with the variation of edit quantity, we simply increase the number of edits in the batch and evaluate ES, PS and NS. Figure 6.5 shows the tendency of three metrics along with the comparison to baselines ROME and MEMIT. As we can see, iReVa is robust to the number of edit in the batch. It consistently surpasses the other baselines when dealing with the various number of edits. MEMIT performs poorly even with a small number of edits. ROME drops dramatically as the edit number grows.

## 7 Conclusions

In this paper, we propose iReVa, a model editing method with traceable knowledge storage, which inserts edit key-value adaptor into the MLP module of a transformer model explicitly. iReVa displays prominent abilities of edit success, generalization and specificity and outperforms baselines with an observable margin. Besides, iReVa first successfully demonstrates its capacity on the knowledge withdrawal. For further research, we will focus on generalize iReVa to more LM architectures.

   Engine & Method & Score & ES & PS & NS \\   & ROME & \(29.09\) & \(38.59\) & \(36.41\) & \(12.27\) \\  & MEMIT & \(43.72\) & \(56.25\) & \(49.25\) & \(25.67\) \\  & iReVa & \(62.41\) & \(91.22\) & \(72.36\) & \(23.65\) \\   & ROME & \(34.56\) & \(49.43\) & \(45.61\) & \(8.64\) \\  & MEMIT & \(59.68\) & \(80.83\) & \(69.38\) & \(28.83\) \\   & iReVa & \(62.20\) & \(88.23\) & \(70.71\) & \(27.66\) \\   

Table 4: Results on zsRE dataset with GPT2-LARGE, GPT-NEO-2.7B as the base models.

Figure 3: Results of edits with various size on zsRE dataset with GPT2-XL as the base model.

Figure 2: Results of edits in various layers on zsRE dataset with GPT2-XL as the base model.