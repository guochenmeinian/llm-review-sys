# ALIM: Adjusting Label Importance Mechanism for Noisy Partial Label Learning

Mingyu Xu\({}^{1,2}\), Zheng Lian\({}^{1}\)1, Lei Feng\({}^{3}\), Bin Liu\({}^{1,2}\), Jianhua Tao\({}^{4,5}\)

\({}^{1}\)The State Key Laboratory of Multimodal Artificial Intelligence Systems,

Institute of Automation, Chinese Academy of Sciences

\({}^{2}\)School of Artificial Intelligence, University of Chinese Academy of Sciences

\({}^{3}\)School of Computer Science and Engineering, Nanyang Technological University

\({}^{4}\)Department of Automation, Tsinghua University

\({}^{5}\)Beijing National Research Center for Information Science and Technology, Tsinghua University

{xumingyu2021, lianzheng2016}@ia.ac.cn

Equal Contribution

###### Abstract

Noisy partial label learning (noisy PLL) is an important branch of weakly supervised learning. Unlike PLL where the ground-truth label must conceal in the candidate label set, noisy PLL relaxes this constraint and allows the ground-truth label may not be in the candidate label set. To address this challenging problem, most of the existing works attempt to detect noisy samples and estimate the ground-truth label for each noisy sample. However, detection errors are unavoidable. These errors can accumulate during training and continuously affect model optimization. To this end, we propose a novel framework for noisy PLL with theoretical interpretations, called "Adjusting Label Importance Mechanism (ALIM)". It aims to reduce the negative impact of detection errors by trading off the initial candidate set and model outputs. ALIM is a plug-in strategy that can be integrated with existing PLL approaches. Experimental results on multiple benchmark datasets demonstrate that our method can achieve state-of-the-art performance on noisy PLL. Our code is available at: https://github.com/zeroQiaoba/ALIM.

## 1 Introduction

Partial label learning (PLL) [1; 2] (also called ambiguous label learning [3; 4] and superset label learning [5; 6]) is a typical type of weakly supervised learning. Unlike supervised learning where each sample is associated with a ground-truth label, PLL needs to identify the ground-truth label from a set of candidate labels. Due to the low annotation cost of partially labeled samples, PLL has attracted increasing attention from researchers and has been applied to many areas, such as object recognition , web mining , and ecological informatics .

The basic assumption of PLL is that the ground-truth label must be in the candidate label set . However, this assumption may not be satisfied due to the unprofessional judgment of annotators . Recently, some researchers have relaxed this assumption and focused on a more practical setup called noisy PLL . In noisy PLL, the ground-truth label may not be in the candidate label set. To deal with this task, Lv et al.  utilized noise-tolerant loss functions to avoid overemphasizing noisy samples. However, they cannot fully exploit the useful information in noisy data. To this end, Lian et al.  and Wang et al.  proposed to detect noisy samples and estimate pseudo labels for these samples. However, detection errors are unavoidable. These errors will accumulate and continuously affect model optimization, thereby limiting their performance on noisy PLL.

To alleviate this problem, we propose a novel framework for noisy PLL called "Adjusting Label Importance Mechanism (ALIM)". Although we may make mistakes in noisy sample detection, it allows us to leverage the initial candidate set and restart correction. To reduce manual efforts in hyperparameter tuning, we propose an adaptive strategy to determine the weighting coefficient for ALIM. To further improve noise tolerance, we equip ALIM with mixup training , a powerful technique in noisy label learning . We also perform theoretical analysis from the perspective of objective functions and EM algorithms and prove the feasibility of our method. To verify its effectiveness, we conduct experiments on multiple benchmark datasets. Experimental results demonstrate that ALIM outperforms currently advanced approaches, setting new state-of-the-art records. The main contributions of this paper can be summarized as follows:

* We propose a plug-in framework for noisy PLL with theoretical interpretations. Our method can deal with noisy samples by trading off the initial candidate set and model outputs.
* We propose an adaptive strategy to adjust the weighting coefficient for ALIM. Furthermore, we combine our method with the mixup training to improve noise robustness.
* Experimental results on multiple datasets demonstrate the effectiveness of our method. ALIM is superior to currently advanced approaches on noisy PLL.

## 2 Methodology

### Problem Definition

Let \(\) be the input space and \(\) be the label space with \(c\) distinct categories. We consider a dataset \(\) containing \(N\) partially labeled samples \(\{(x,S(x))\}\). Here, \(S(x)\{0,1\}^{c}\) is the candidate set for the sample \(x\). We denote the \(i^{th}\) element of \(S(x)\) as \(S_{i}(x)\), which is equal to 1 if the label \(i\) is in the candidate set, and 0 otherwise. Meanwhile, we denote \(P(x)^{c}\), \(w(x)^{c}\), and \(y(x)^{1}\) as the prediction probabilities, the pseudo label, and the ground-truth label of the sample \(x\). The \(i^{th}\) elements of \(P(x)\) and \(w(x)\) are represented as \(P_{i}(x)\) and \(w_{i}(x)\), respectively. In this paper, all product operations between matrices are Hadamard products.

The goal of noisy PLL is to learn a classifier that can minimize the classification risk on \(\). Unlike PLL, noisy PLL allows the ground-truth label may not be in the candidate set. For a fair comparison, we adopt the same data generation procedure as previous works . Specifically, to generate candidate labels, we first flip incorrect labels into false positive labels with a probability \(q\) and aggregate the flipped ones with the ground-truth label. Then, we assume that each sample has a probability \(\) of being the noisy sample. For each noisy sample, we further select a label from the non-candidate set, move it into the candidate set, and move the ground-truth label out of the candidate set. We denote the probability \(q\) as the ambiguity level and the probability \(\) as the noise level.

Figure 1: The core structure of ALIM. The network receives an input \(x\) and produces softmax prediction probabilities \(P(x)\). Different from traditional PLL that fully trusts the candidate set, our method can deal with noisy samples through a weighting mechanism.

### Motivation

First, let us review our own exam experience. When we are unfamiliar with a test, we believe that the correct answer must be in the candidate set. Even if every option is wrong, we still choose the most likely answer. But as we become more familiar with the test, we learn to question the correctness of the candidate set. If we believe every option is wrong, we will consider answers outside the candidate set. In noisy PLL, this strategy can also be used to handle noisy samples.

### ALIM Framework

Inspired by the above idea, we propose a simple yet effective framework called ALIM. The overall structure is shown in Figure 1. Specifically, we first predict the softmax probabilities \(P(x)\) for each sample \(x\). In traditional PLL, we fully trust the candidate set and generate the pseudo label as follows:

\[w(x)=(S(x)P(x)),\] (1)

where \(()\) is a normalization function that ensures \(_{i=1}^{c}w_{i}(x)=1\). Different from traditional PLL, ALIM introduces a coefficient \(\) to control the reliability of the candidate set:

\[(x)=S(x)+(1-S(x)),\] (2)

\[w(x)=((x)P(x)).\] (3)

Here, \(=0\) means that we fully trust the given candidate set \(S(x)\); \(=1\) means that we don't believe the candidate set but trust our own judgment \(P(x)\). According to Eq. 2, the time complexity of this process is mere \(O(cN)\), where \(c\) is the number of categories and \(N\) is the number of samples.

In this paper, we discuss two choices of normalization functions: \(()\) and \(()\). Specifically, \(()\) sets the maximum value to 1 and others to 0; \(()\) introduces a scaling factor \(K>0\) and normalizes the probabilities as follows:

\[(z)=\{^{1/K}}{_{j}z_{j}^{1/K}} \}_{i=1}^{c},\] (4)

where \(z_{i}\) is the \(i^{th}\) element of \(z\).

### Theoretical Analysis

To verify the feasibility of our method, we conduct theoretical analysis from two perspectives: (1) the manually-designed objective function; (2) the classic expectation-maximization (EM) algorithm .

#### 2.4.1 Interpretation from Objective Functions

Let \(P_{i}\), \(S_{i}\), and \(w_{i}\) be abbreviations for \(P_{i}(x)\), \(S_{i}(x)\), and \(w_{i}(x)\), respectively. During training, we should optimize the following objectives:

* Minimize the classification loss on \(w(x)\) and \(P(x)\).
* \(w(x)\) should be small at non-candidate labels.
* Entropy regularization on \(w(x)\) to avoid overconfidence of pseudo labels.
* \(w(x)\) should satisfy \(0 w_{i} 1\) and \(_{i=1}^{c}w_{i}=1\).

Then, the final objective function is calculated as follows:

\[\,_{i=1}^{c}w_{i} P_{i}+M(_{i=1}^{c}w_{i}S_{ i}-1)-K_{i=1}^{c}w_{i} w_{i}\] \[s.t._{i}^{c}w_{i}=1,w_{i} 0,\] (5)where \(M\) and \(K\) are penalty factors. By using Lagrange multipliers, we can observe that the penalty factor \(K\) is different for two normalization functions: \(K=0\) for Onehot\(()\) and \(K>0\) for Scale\(()\). The penalty factor \(M\) has a strong correlation with the weighting coefficient \(\) in Eq. 2, i.e., \(=e^{-M}\). Larger \(M\) (or smaller \(\)) means that we have tighter constraints on \((_{i=1}^{c}w_{i}S_{i}-1)\), and therefore we should trust the given candidate set more. It is identical to the meaning of \(\) in our ALIM (see Section 2.3).

#### 2.4.2 Interpretation from EM Perspective

EM aims to maximize the likelihood of the corpus \(\). Following previous works , we first make a mild assumption:

**Assumption 1**: _In noisy PLL, the ground-truth label may not be in the candidate set \(S(x)\). We assume that each candidate label \(\{i|S_{i}(x)=1\}\) has an equal probability \((x)\) of generating \(S(x)\) and each non-candidate label \(\{i|S_{i}(x)=0\}\) has an equal probability \((x)\) of generating \(S(x)\)._

Besides the interpretation from objective functions, we further explain ALIM from the EM perspectivein Appendix B. We prove that the E-step aims to predict the ground-truth label for each sample and the M-step aims to minimize the classification loss. Meanwhile, ALIM is a simplified version of the results derived from EM. Specifically, EM uses an instance-dependent \((x)=(x)/(x)\), while ALIM uses a global \(\). In the future, we will explore the performance of the instance-dependent \((x)\) for noisy PLL. Additionally, EM connects traditional PLL with noisy PLL. In traditional PLL, we assume that the ground-truth label must be in the candidate set, i.e., \((x)=0\). Then, our noisy PLL approach ALIM will degenerate to the classic PLL method RC .

### Optional Key Components

We further introduce several key components to make our method more effective, including the adaptively adjusted strategy and the mixup training.

#### 2.5.1 Adaptively Adjusted Strategy

Appropriate \(\) is important for ALIM. Too small \(\) makes us fully trust the candidate set, thus easily over-fitting on noise samples; too large \(\) makes us ignore the prior information in the candidate set, thus limiting the classification performance. Therefore, we propose a manually adjusted strategy to find a proper \(\) in a predefined parameter space.

To further reduce manual efforts, we also propose an adaptively adjusted strategy. Specifically, we first estimate the noise level of the dataset. Intuitively, we can randomly select a subset from \(\), annotate the ground-truth labels by professional annotators, and estimate the noise level of the dataset. Alternatively, we can automatically estimate noise rate via the Gaussian mixture model  or cross-validation . The estimated noise level is represented as \(\). Based on Appendix C, we prove that the value of Eq. 6 can be viewed as a metric, and the \(\)-quantile of this value can be treated as the adaptively adjusted \(\).

\[\{S_{i}(x)P_{i}(x)}{_{i}(1-S_{i}(x))P_{i}(x)}\}_{ x}.\] (6)

In Section 3.2, We further present results without noise rate estimation and manually adjust \(\) as a hyper-parameter. Through experimental analysis, this approach can also achieve competitive performance. Therefore, the adaptively adjusted strategy is optional. Its main advantage is to reduce manual efforts in hyper-parameter tuning and realize a more automatic approach for noisy PLL.

#### 2.5.2 Mixup Training

Since the mixup training is powerful in noisy label learning , we further combine this strategy with ALIM for noisy PLL. Consider a pair of samples \(x_{i}\) and \(x_{j}\) whose pseudo labels are denoted as \(w(x_{i})\) and \(w(x_{j})\), respectively. Then, we create a virtual training sample by linear interpolation:

\[x_{}= x_{i}+(1-)x_{j},\] (7)

\[w_{}= w(x_{i})+(1-)w(x_{j}).\] (8)\((,)\), where \(\) is a parameter in the beta distribution. We define the mixup objective \(_{}\) as the cross-entropy loss on \(P(x_{})\) and \(w_{}\). During training, we combine the mixup loss \(_{}\) and the PLL loss \(_{}\) into a joint objective function \(=_{}+_{}_{}\), where \(_{}\) controls the trade-off between two losses. The pseudo-code of ALIM is summarized in Algorithm 1.

``` Input: Dataset \(\) with the estimated noise level \(\), predictive model \(f\), warm-up epoch \(e_{0}\), number of epoch \(E_{}\), weighting coefficient \(\), trade-off between losses \(_{}\). Output: The optimized model \(f\).
1for\(e=1,,e_{0}\)do
2 Warm up by training \(f\) with \(_{}\);
3 end for
4for\(e=e_{0},,E_{}\)do
5for\(\{x_{i},S(x_{i})\}\)do
6 Calculate the output of the predictive model \(f(x_{i})\);
7 Obtain the pseudo label \(w(x_{i})\) by Eq. 2\(\)3;
8 Get the PLL loss \(_{}\) between \(f(x_{i})\) and \(w(x_{i})\);
9ifmixup trainingthen
10 Sample \((,)\) and sample \(x_{j}\) from \(\);
11 Create the virtual sample \((x_{},w_{})\) by Eq. 7\(\)8;
12 Calculate the mixup loss \(_{}\) between \(f(x_{})\) and \(w_{}\);
13 Get the final loss \(=_{}+_{}_{}\);
14
15else
16 Get the final loss \(=_{}\);
17
18 end for
19
20 end for
210 Optimize \(f\) by minimizing \(\);
22
23ifadaptively adjusted \(\)then
24 Create an empty list \(G\);
25for\(\{x_{i},S(x_{i})\}\)do
26 Calculate the output of the predictive model \(f(x_{i})\);
27 Store the value in Eq. 6 to \(G\);
28
29 end for
30\(-\)quantile of the list \(G\);
31
32 end for ```

**Algorithm 1**Pseudo-code of ALIM.

## 3 Experiments

### Experimental Setup

Corpus DescriptionIn the main experiments, we evaluate the performance on two benchmark datasets of noisy PLL, CIFAR-10  and CIFAR-100 . We choose the noise level \(\) from \(\{0.1,0.2,0.3\}\). Since CIFAR-100 has more classes than CIFAR-10, we consider \(q\{0.1,0.3,0.5\}\) for CIFAR-10 and \(q\{0.01,0.03,0.05\}\) for CIFAR-100. In Section 3.2, we also conduct experiments on fine-grained datasets (CUB-200  and CIFAR-100H ) and consider severe noise.

BaselinesTo verify the effectiveness of our method, we implement the following state-of-the-art methods as baselines: 1) CC : a classifier-consistent PLL method under the uniform candidate label generation assumption; 2) RC : a risk-consistent PLL method under the same assumption as CC; 3) LWC : a PLL method that considers the trade-off between losses on candidate and non-candidate sets; 4) LWS : a PLL method that combines the weighted loss with the sigmoid activation function; 5) PiCO : a PLL method using contrastive learning; 6) CRDPLL : a PLL method that exploits consistency regularization on the candidate set and supervised learning on the non-candidate set; 7) IRNet : a noisy PLL method that progressively purifies noisy samples; 8) PiCO+ : a noisy PLL method using a semi-supervised contrastive framework.

Implementation DetailsThere are mainly three user-specific parameters in ALIM: \(\), \(_{}\), and \(e_{0}\). Among them, \(\) controls the trade-off between the initial candidate set and model outputs. This paper proposes two selection strategies for \(\), i.e., manually and adaptively adjusted strategies. For the first one, we treat \(\) as a hyper-parameter and select it from \(\{0.1,0.2,0.3,0.4,0.5,0.7\}\). For the second one, we automatically determine \(\) using the estimated noise level. \(_{}\) controls the trade-off between the PLL loss and the mixup loss, and we set \(_{}=1.0\) as the default parameter. \(e_{0}\) is the start epoch of ALIM, and we select it from \(\{20,40,80,100,140\}\). Following the standard experimental setup in PLL [17; 25], we split a clean validation set from the training set to determine hyper-parameters. Then, we transform the validation set back to its original PLL form and incorporate it into the training set to accomplish model optimization. To optimize all trainable parameters, we choose the SGD optimizer with a momentum of 0.9 and set the weight decay to 0.001. We set the initial learning rate to 0.01 and adjust it using the cosine scheduler. To eliminate the randomness of the results, we run each experiment three times and report the average result and standard deviation on the test set. All experiments are implemented with PyTorch  and carried out with NVIDIA Tesla V100 GPU.

### Experimental Results and Discussion

Main ResultsFor a fair comparison, we reproduce all baselines using the same data generation strategy as previous works . In Table 1, we observe that a large portion of improvement is due to mixup training rather than model innovation. To this end, we compare different approaches under the same mixup strategy. Experimental results demonstrate that our method succeeds over all baselines under varying ambiguity levels and noise levels. The main reason lies in two folds. On the one hand, existing PLL methods are mainly designed for clean samples but ignore the presence of noisy samples. Our method can deal with noisy samples by trading off the initial candidate set and model outputs. On the other hand, existing noisy PLL methods generally need to detect noisy samples, but detection errors are unavoidable. These errors can accumulate and continuously affect the training process. Differently, ALIM can deal with this problem by taking advantage of the initial candidate set and restarting correction. These results prove the effectiveness of ALIM in noisy PLL.

Compatibility of ALIMSince ALIM is a plug-in strategy, we integrate it with existing PLL methods and report results in Table 2. We observe that ALIM always brings performance improvement under noisy conditions, verifying the effectiveness and compatibility of our method. Meanwhile,

    &  &  &  \\   & \(=0.1\) & \(=0.2\) & \(=0.3\) & \(=0.1\) & \(=0.2\) & \(=0.3\) & \(=0.1\) & \(=0.2\) & \(=0.3\) \\  \(\)CC & 79.81\(\)0.22 & 77.06\(\)0.18 & 73.87\(\)0.31 & 74.09\(\)0.60 & 71.43\(\)0.56 & 68.08\(\)1.12 & 69.87\(\)0.94 & 59.35\(\)0.22 & 48.93\(\)0.52 \\ \(\)RC & 80.87\(\)0.30 & 73.28\(\)0.23 & 75.24\(\)0.17 & 79.69\(\)0.40 & 77.56\(\)0.92 & 73.10\(\)0.54 & 72.46\(\)1.51 & 59.72\(\)0.42 & 49.74\(\)0.70 \\ \(\)LWC & 79.30\(\)0.53 & 76.15\(\)0.46 & 74.76\(\)0.48 & 77.47\(\)0.56 & 74.02\(\)0.35 & 69.10\(\)0.57 & 70.59\(\)1.34 & 57.42\(\)1.44 & 8.94\(\)0.37 \\ \(\)LWS & 82.97\(\)0.24 & 79.46\(\)0.09 & 74.28\(\)0.79 & 89.03\(\)0.28 & 76.07\(\)0.38 & 69.70\(\)0.72 & 70.41\(\)2.68 & 58.26\(\)0.28 & 39.42\(\)0.39 \\ \(\)PPCO & 90.78\(\)0.24 & 87.72\(\)0.11 & 89.46\(\)0.12 & 89.71\(\)0.18 & 85.78\(\)0.38 & 82.25\(\)0.32 & 88.11\(\)0.29 & 8.24\(\)0.30 & 87.85\(\)7.26 \\ \(\)CBDPLL & 93.44\(\)0.17 & 93.13\(\)0.39 & 86.10\(\)0.48 & 92.73\(\)0.10 & 89.66\(\)0.21 & 83.40\(\)0.11 & 91.01\(\)0.00 & 82.30\(\)0.46 & 73.78\(\)0.55 \\ \(\)PPCO+ & 93.64\(\)0.19 & 93.13\(\)0.26 & 92.18\(\)0.38 & 93.22\(\)0.08 & 89.22\(\)0.01 & 89.95\(\)0.19 & 91.07\(\)0.02 & 89.68\(\)0.01 & 84.08\(\)0.42 \\ \(\)HNR & 93.44\(\)0.21 & 92.57\(\)0.25 & 92.38\(\)0.21 & 92.81\(\)0.19 & 92.18\(\)0.19 & 91.35\(\)0.08 & 91.51\(\)0.09 & 90.76\(\)0.10 & 86.19\(\)0.41 \\ \(\)ALIM-Scale & **94.15\(\)0.14** & 93.41\(\)0.04 & 93.28\(\)0.08 & 93.40\(\)0.03 & 92.69\(\)0.01 & 92.24\(\)0.10 & 92.52\(\)0.12 & 90.92\(\)0.10 & 85.51\(\)0.21 \\ \(\)ALIM-Oneh & **94.15\(\)0.15** & **94.04\(\)0.16** & **93.77\(\)0.27** & **93.44\(\)0.16** & **93.25\(\)0.08** & **92.42\(\)0.17** & **92.67\(\)0.12** & **93.83\(\)0.08** & **89.08\(\)0.38** \\  \(\)PPCO & 94.58\(\)0.29 & 94.74\(\)0.13 & 94.43\(\)0.19 & 94.02\(\)0.03 & 94.03\(\)0.01 & 92.94\(\)0.24 & 93.56\(\)0.08 & 92.65\(\)0.26 & 82.12\(\)0.37 \\ \(\)ALIM-Scale & 95.71\(\)0.01 & 95.00\(\)0.00 & 95.35\(\)0.19 & 95.31\(\)0.16 & 96.14\(\)0.74 & 97.46\(\)0.07 & 94.36\(\)0.03 & 93.74\(\)10.04 & 93.82\(\)1.03 & 90.63\(\)0.10 \\ \(\)ALIM-Oneh & **95.83\(\)0.13** & **95.86\(\)0.15** & **95.75\(\)0.19** & **95.52\(\)0.15** & **95.41\(\)0.13** & **94.67\(\)0.21** & **95.19\(\)0.24** & **93.89\(\)0.21** & **92.26\(\)0.29** \\    &  &  &  \\   & \(=0.1\) & \(=0.2\) & \(=0.3\) & \(=0.1\) & \(=0.2\) & \(=0.3\) & \(=0.1\) & \(=0.2\) & \(=0.2\) & \(=0.3\) \\  \(\)CC & 53.63\(\)0.46 & 88.44\(\)0integrating ALIM with PiCO generally achieves better performance under severe noise (\(=0.3\)). In noisy label learning, self-training suffers from accumulated errors caused by sample-selection bias . To address this issue, researchers propose co-training , which contains multiple branches and cross-updates these branches. Among all PLL methods, PiCO is a natural co-training network with two branches: one for classification and one for clustering . The output of the classification branch guides the model to update the clustering prototypes; the output of the clustering branch affects the update of the pseudo label for classification. These results verify the effectiveness of co-training under noisy conditions. Therefore, we combine ALIM with PiCO in the following experiments.

Fine-Grained Classification PerformanceConsidering that similar categories are more likely to be added to the candidate set, we conduct experiments on more challenging fine-grained datasets, CIFAR-100H  and CUB-200 . Different from previous works  that generate candidate labels from the entire label space, this section considers the case of generating candidate labels belonging to the same superclass. Experimental results in Table 3 demonstrate that ALIM outperforms existing methods on fine-grained classification tasks, verifying the effectiveness of our method.

Robustness with Severe NoiseTo demonstrate noise robustness, we conduct experiments under severe noise conditions. In this section, we compare ALIM with the most competitive baselines (RC, PiCO, CRDPLL, and PiCO+) under \(\{0.4,0.5\}\). Experimental results in Table 4 show that ALIM succeeds over all baselines under severe noise. Taking the results on \(=0.5\) as an example, our method outperforms the currently advanced approaches by 11.76%. These results demonstrate that our ALIM is more robust to noise than existing PLL and noisy PLL methods.

Discussion on Normalization FunctionsIn this section, we compare the performance of two normalization functions. In Table 1, we observe that Onehot\(()\) performs slightly better on CIFAR-10 and Scale\(()\) performs slightly better on CIFAR-100. In Table 3\(\)4, Scale\(()\) generally achieves better performance in fine-grained datasets and severe noise conditions. The main difference between these normalization functions is that Onehot\(()\) compresses estimated probabilities into a specific class, while Scale\(()\) preserves prediction information for all categories. For simple datasets like CIFAR-10, the class with the highest probability is likely to be correct. Therefore, the compression operation can

   & CIFAR-100 & CIFAR-100 \\  & \(\{q=0.05,=0.2\}\) & \(\{q=0.05,=0.5\}\) \\  \(\)CC & 26.98±1.16 & 34.57±0.99 \\ \(\)RC & 44.74±2.47 & 48.03±0.47 \\ \(\)LWS & 18.65±2.15 & 22.18±6.12 \\ \(\)GCE & 5.13±38.65 & 33.21±2.03 \\ \(\)MSE & 20.92±1.20 & 35.20±1.03 \\ \(\)CRDPLL & 44.14±0.70±2 & 53.20±21 \\ \(\)HCO & 53.05±2.03 & 59.81±0.25 \\ \(\)PHCO & 60.65±4.09 & 68.31±0.47 \\ \(\)ALIM-Scale & **68.38±0.47** & **73.42±0.18** \\ \(\)ALIM-Onehot & 63.91±0.35 & 72.36±0.20 \\  

Table 4: Performance with severe noise.

   &  &  &  &  &  \\   & & \(=0.1\) & \(=0.2\) & \(=0.3\) & \(=0.1\) & \(=0.2\) & \(=0.3\) & \(=0.1\) & \(=0.2\) & \(=0.3\) \\  \(\)RC & \(\) & 80.87±0.30 & 78.22±0.23 & 75.24±0.17 & 79.69±0.37 & 75.69±0.40 & 73.10±0.54 & 72.46±1.51 & 59.72±0.24 & 49.74±0.70 \\ \(\)RC & \(\) & 88.81±0.17 & 87.61±0.20 & 85.53±0.05 & 86.21±0.37 & 83.64±0.07 & 78.34±0.34 & 77.40±0.31 & 53.10±0.37 & 56.75±1.59 \\ \(\)PHCO & \(\) & 90.78±0.24 & 87.27±0.11 & 84.96±0.12 & 89.71±0.18 & 85.78±0.23 & 82.54±0.32 & 88.11±0.29 & 82.41±0.30 & 68.75±2.62 \\ \(\)PHCO & \(\) & 94.15±0.15 & 94.04±0.16 & 93.77±0.29 & 93.44±0.16 & 93.25±0.29 & 92.42±0.17 & 92.67±0.12 & 91.83±0.08 & 89.80±0.38 \\ \(\)CRDPLL & \(\) & 93.48±0.17 & 89.80±0.39 & 86.19±0.48 & 92.73±0.19 & 86.96±0.21 & 83.40±0.14 & 91.19±0.00 & 82.30±0.46 & 73.78±0.55 \\ \(\)CRDPLL & \(\) & 96.03±0.23 & 95.01±0.32 & 93.61±0.10 & 95.32±0.13 & 93.72±0.29 & 91.20±0.06 & 93.82±0.05 & 90.20±0.04 & 84.24±0.28 \\   
   &  &  &  &  \\   & & \(=0.1\) & \(=0.2\) & \(=0.3\) & \(=0.1\) & \(=0.2\) & \(=0.3\) & \(=0.1\) & \(=0.2\) & \(=0.3\) \\  \(\)RC & \(\) & 52.73±1.05 & 48.95±1.04 & 45.77±0.31 & 52.15±0.19 & 48.25±0.38 & 43.92±0.37 & 46.62±0.34 & 45.46±0.21 & 40.31±0.55 \\ \(\)RC & \(\) & 61.46±0.26 & 60.10±0.23 & 55.67±0.28 & 57.43±0.20 & 52.98±0.24 & 7.84±0.37 & 56.40±0.60 & 51.91±0.12 & 46.87±0.74 \\ \(\)PHCO & \(\) & 62.78±0.20 & 62.04±0.31 & 58.79±0.09 & 67.38±0.09 & 62.10±0.33 & 58.64±0.28 & 67.52±0.28 & 68.18±0.65 \\ \(\)PHCO & \(\) & 72.26±0.23 & 71.98±0.29 & 71.04±0.31 & 71.43±0.21 & 70.79±0.43 & 70.14±0.25 & 72.28±0.28 & 70.60±0.44 & 70.05±0.43 \\ \(\)CRDPLL & \(\) & 68.12±0.13 & 65.32±0.34 & 62.94±0.28 & 67.53±0.07 & 64.29±0.27 & 61.79±0.11 & 67.17±0.04 & 64.11±0.42 & 61.03±0.43 \\ \(\)CRDPLL & \(\) & 69.98±0.30 & 68.58±0.16 & 66.90±0.16 & 69.60±0.20 & 67.67±0.22 & 66.15±0.12 & 68.75±0.06 & 67.07±0.29 & 64.69±0.23 \\  

Table 2: Compatibility of ALIM on different PLL methods.

   &  & CIFAR-100H \\  & \(q=0.05,=0.2\) & \(\{q=0.5,=0.2\}\) \\  \(\)CC & 26.98±1.16 & 34.57±0.99 \\ \(\)RC & 44.74±2.47 & 48.03±0.47 \\ \(\)LWS & 18.65±reduce the negative impact of other categories and achieve better performance on noisy PLL. For challenging datasets, the class with the highest predicted value has a low probability of being correct. Therefore, this compression operation may lead to severe information loss. More importantly, ALIM consistently outperforms existing methods regardless of the normalization function. Therefore, the main improvement comes from our ALIM rather than normalization functions.

Rationality of Adaptively Adjusted StrategyIn this section, we further explain the rationality of our adaptively adjusted strategy. Figure 2 visualizes the distribution of the value in Eq. 6 for clean and noise subsets with increasing training iterations. We observe that this value is an effective indicator for distinguishing clean samples from noisy samples. At the same time, our adaptively adjusted \(\) serves as a suitable boundary for clean and noisy subsets.

Role of Adaptively Adjusted StrategyIt is important to select a proper \(\) in ALIM. In this paper, we propose two selection strategies: adaptively and manually adjusted strategies. Figure 3 presents the classification performance of these strategies. Experimental results show that different strategies can achieve similar performance. Therefore, the main advantage of this adaptively adjusted strategy is to reduce manual efforts in hyper-parameter tuning. The performance improvement still comes from ALIM, which exploits a coefficient to control the reliability of the candidate set.

Figure 4: Parameter sensitivity analysis on CIFAR-10 (\(q=0.3\)) and CIFAR-100 (\(q=0.05\)) with mixup training. The noise level of these datasets is fixed to \(=0.3\).

Figure 3: Classification performance of manually adjusted \(\) and adaptively adjusted \(\). We conduct experiments on CIFAR-10 (\(q=0.3,=0.3\)) and CIFAR-100 (\(q=0.05,=0.3\)). We mark the results of the adaptively adjusted strategy with red lines.

Figure 2: Distribution of the value in Eq. 6 for clean and noise subsets with increasing training iterations. We conduct experiments on CIFAR-10 (\(q=0.3,=0.3\)) with \(e_{0}=80\).

Parameter Sensitivity AnalysisIn this section, we perform parameter sensitivity analysis on two key hyper-parameters: the warm-up epoch \(e_{0}\), and the trade-off between the PLL loss and the mixup loss \(_{}\). In Figure 4, we observe that choosing an appropriate \(_{}\) is important for ALIM, and \(_{}=1.0\) generally achieves competitive results. Meanwhile, with the gradual increase of \(e_{0}\), the test accuracy first increases and then decreases. This phenomenon indicates that ALIM needs warm-up training. But too large \(e_{0}\) can also cause the model to overfit noise samples.

## 4 Related Work

In PLL, the ground-truth label is concealed in the candidate set. To deal with this task, the core is to disambiguate the candidate labels. In this section, we first introduce two typical disambiguation strategies, i.e., average-based methods and identification-based methods. Then, we briefly review some recent works on noisy PLL.

Average-based PLLThe most intuitive solution is the average-based approach, which assumes that each candidate label has an equal probability of being the ground-truth label. For example, Hullermeier et al.  utilized k-nearest neighbors for label disambiguation. For each sample, they treated all candidate labels of its neighborhood equally and predicted the ground-truth label through the majority vote. Differently, Cour et al.  maximized the average output of candidate labels and non-candidate labels in parametric models. However, these average-based methods can be severely affected by false positive labels .

Identification-based PLLTo address the shortcomings of the above methods, researchers have focused on identification-based methods. Different from average-based methods that treat all candidate labels equally, identification-based methods treat the ground-truth label as a latent variable and maximize its estimated probability by maximum margin  or maximum likelihood  criteria.

Recently, deep learning has been applied to identification-based methods and achieved promising results. For example, Lv et al.  proposed a self-training strategy to disambiguate candidate labels. Feng et al.  introduced classifier- and risk-consistent algorithms under the uniform candidate label generation assumption. Wen et al.  relaxed this assumption and proposed a family of loss functions for label disambiguation. To learn more discriminative representations, Wang et al.  exploited contrastive learning to deal with partially labeled samples. More recently, Wu et al.  used consistency regularization on the candidate set and supervised learning on the non-candidate set, achieving promising results under varying ambiguity levels. The above methods rely on a basic assumption that the ground-truth label must be in the candidate set. But this assumption may not be satisfied due to the unprofessional judgment of annotators.

Noisy PLLRecently, noisy PLL has attracted increasing attention from researchers due to its more practical setup. Its core challenge is how to deal with noisy samples. For example, Lv et al.  utilized noise-tolerant loss functions to avoid overemphasizing noisy samples during training. Lian et al.  proposed an iterative refinement network to purify noisy samples and reduce the noise level of the dataset. Wang et al.  detected clean samples through a distance-based sample selection mechanism and dealt with noisy samples via a semi-supervised contrastive framework. These noisy PLL methods generally need to detect noisy samples, but detection errors are unavoidable. These errors can accumulate and continuously affect model training. To reduce the negative impact of prediction errors, we propose a novel framework for noisy PLL. Experimental results on multiple datasets demonstrate the effectiveness of our method under noisy conditions.

## 5 Conclusion

This paper introduces a novel framework for noisy PLL called ALIM. To deal with noisy samples, it exploits the weighting mechanism to adjust the reliability of the initial candidate set and model outputs. To verify its effectiveness, we conduct experiments on multiple benchmark datasets under varying ambiguity levels and noise levels. Experimental results demonstrate that our ALIM achieves state-of-the-art classification performance on noisy PLL, especially in severe noise conditions and fine-grained datasets. Meanwhile, ALIM is a low-computation plug-in strategy that can be easily integrated with existing PLL frameworks. Furthermore, we interpret the rationality and effectiveness of the adaptively adjusted strategy. We also conduct parameter sensitivity analysis and reveal the impact of different hyper-parameters. It is worth noting that this paper leverages a global \(\) to measure the reliability of the candidate set. In the future, we will explore the instance-dependent \((x)\) during training. At the same time, we will investigate the performance in more experimental settings, such as class-imbalanced conditions.

## 6 Acknowledge

This work is supported by the National Natural Science Foundation of China (NSFC) (No.61831022, No.62276259, No.62201572, No.U21B2010, No.62271083), Beijing Municipal Science&Technology Commission,Administrative Commission of Zhongguancun Science Park No.Z211100004821013, Open Research Projects of Zhejiang Lab (NO. 2021KHOAB06), CCF-Baidu Open Fund (No.OF2022025), the National Natural Science Foundation of China (Grant No. 62106028), Chongqing Overseas Chinese Enterpeneurship and Innovation Support Program, Chongqing Artificial Intelligence Innovation Center, CAAI-Huawei MindSporc Open Fund, and OpenI Community (https://openi.pcl.ac.cn).