# Posterior Label Smoothing for Node Classification

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

Soft labels can improve the generalization of a neural network classifier in many domains, such as image classification. Despite its success, the current literature has overlooked the efficiency of label smoothing in node classification with graph-structured data. In this work, we propose a simple yet effective label smoothing for the transductive node classification task. We design the soft label to encapsulate the local context of the target node through the neighborhood label distribution. We apply the smoothing method for seven baseline models to show its effectiveness. The label smoothing methods improve the classification accuracy in 10 node classification datasets in most cases. In the following analysis, we find that incorporating global label statistics in posterior computation is the key to the success of label smoothing. Further investigation reveals that the soft labels mitigate overfitting during training, leading to better generalization performance.

## 1 Introduction

Adding a uniform noise to the ground truth labels has shown remarkable success in training neural networks for various classification tasks, including image classification and natural language processing (Szegedy et al., 2016; Vaswani et al., 2017; Muller et al., 2019; Zhang et al., 2021). Despite its simplicity, label smoothing acts as a regularizer for the output distribution and improves generalization performance (Pereyra et al., 2017). More sophisticated soft labeling approaches have been proposed based on the theoretical analysis of label smoothing (Li et al., 2020; Lienen and Hullermeier, 2021). However, the usefulness of smoothing has been under-explored in the graph domain, especially for node classification tasks.

In this work, we propose a _simple yet effective_ smoothing method for transductive node classification tasks. Inspired by the previous work suggesting predicting the local context of a node (Hu et al., 2019; Rong et al., 2020), such as subgraph prediction, helps to learn better representations, we propose a smoothing method that can potentially reflect the local context of the target node. To encode the neighborhood information into the node label, we propose to relabel the node with a posterior distribution of the label given neighborhood labels.

Under the assumption that the neighborhood labels are conditionally independent given the label of the node to be relabeled, we factorize the likelihood into the product of conditional distributions between two adjacent nodes. To compute the posterior, we estimate the conditionals and prior from a graph's global label statistics, making the posterior incorporate the local structure and global label distributions. Since the posterior obtained in this way does not preserve the ground truth label, we finally interpolate the posterior with the ground truth label, resulting in a soft label.

The posterior, however, may pose high variance when there are few numbers of neighborhood nodes. To mitigate the issue with the sparse labels, we further propose iterative pseudo labeling to re-estimate the likelihood and prior based on the pseudo labels. Specifically, we use the pseudo labelsof validation and test sets to update the likelihood and prior, along with the ground truth labels of the training set.

We apply our smoothing method to seven different baseline neural network models, including MLP and variants of graph neural networks, and test its performance on 10 benchmark node classification datasets. Our empirical study finds that the soft label with iterative pseudo labeling improves the accuracy in 67 out of 70 cases despite its simplicity. We analyze the cases where the soft label decreases the accuracy and reveals characteristics of label distributions with which the soft labeling may not work. Further analysis shows that using local neighborhood structure and global label statistics is the key to its success. Through the loss curve analysis, we find that the soft label prevents over-fitting, leading to a better generalization performance in classification.

## 2 Related work

In this section, we introduce previous studies related to our method. We begin by discussing various node classification methods, followed by an exploration of the application of soft labels in model training.

### Node classification

Graph structures are utilized in various ways for node classification tasks. Some studies propose model frameworks based on the assumption of specific graph structures. For example, GCN (Kipf and Welling, 2016), GraphSAGE (Hamilton et al., 2017), and GAT (Velickovic et al., 2017) aggregate neighbor node representations based on the homophilic assumption. To address the class-imbalance problem, GraphSMOTE (Zhao et al., 2021), ImGAGN (Qu et al., 2021), and GraphENS (Park et al., 2022) are proposed for homophilic graphs. H\({}_{2}\)GCN (Zhu et al., 2020) and U-GCN (Jin et al., 2021) aggregate representations of multi-hop neighbor nodes to improve performance on heterophilic graphs. Other studies concentrate on learning graph structure. GPR-GNN (Chien et al., 2020) and CPGNN (Zhu et al., 2021) learn graph structures to determine which nodes to aggregate adaptively. LDS (Franceschi et al., 2019), IDGL (Chen et al., 2020) and DHGR (Bi et al., 2022) take a graph rewiring approach, learning optimized graph structures to refine the given structure. Besides, research such as ChebNet (Defferrard et al., 2016), APPNP (Gasteiger et al., 2018), and BernNet (He et al., 2021) focus on learning appropriate filters from the graph signals.

### Classification with soft labels

Hinton et al. (2015) demonstrate that a small student model trained using soft labels generated by the predictions of a large teacher model shows better performance than a model trained using one-hot labels. This approach, known as knowledge distillation (KD), is widely adopted in computer vision (Liu et al., 2019), natural language processing (NLP) (Jiao et al., 2020), and recommendation systems (Tang and Wang, 2018) for compression or performance improvement. In the graph domain, applying KD has been considered an effective method to distill graph structure knowledge to student models. TinyGNN (Yan et al., 2020) highlights that deep GNNs can learn information from further neighbor nodes than shallow GNNs, and it distills local structure knowledge from deep GNNs to shallow GNNs. NOSMOG (Tian et al., 2023) improves the performance of multi-layer perceptrons (MLPs) on graph data by distilling graph structure information from a GNN teacher model.

On the other hand, simpler alternatives to generate soft labels are considered. The label smoothing (LS) (Szegedy et al., 2016) generates soft labels by adding uniform noise to the labels. The benefits of LS have been widely explored. Muller et al. (2019) show that LS improves model calibration. Lukasik et al. (2020) establish a connection between LS and label-correction techniques, revealing LS can address label noise. LS has been widely adopted in computer vision (Zhang et al., 2021) and NLP (Vaswani et al., 2017) studies, but has received little attention in the graph domain.

## 3 Method

In this section, we describe our approach for label smoothing for the node classification problem and provide a new training strategy that iteratively refines the soft labels via pseudo labels obtained from the training procedure.

### Posterior label smoothing

Consider a transductive node classification with graph \(=(,,)\), where \(\) and \(\) denotes the set of nodes and edges respectively, and \(^{|| d}\) denotes \(d\)-dimensional node feature matrix. For each node \(i\) in a training set, we have a label \(y_{i}[K]\), where \(K\) is the total number of classes. We use the notation \(_{i}\{0,1\}^{K}\) for one-hot encoding of \(y_{i}\), i.e., \(e_{ik}=1\) if \(y_{i}=k\) and \(_{k}e_{ik}=1\). In a transductive setting, we observe the connectivity between all nodes, including the test nodes, without having true labels of the test nodes.

We propose a simple and effective relabeling method to allocate a new label of a node based on the label distribution of the neighborhood nodes. Specifically, we consider the posterior distribution of node labels given their neighbors. Let \((i)\) be a set of neighborhood nodes of node \(i\). If we assume the distribution of node labels depends on the graph connectivity, then the posterior probability of node \(i\)'s label, given its neighborhood labels, is

\[P(Y_{i}=k|\{Y_{j}=y_{j}\}_{j(i)})==y_{j}\}_{j (i)}|Y_{i}=k)P(Y_{i}=k)}{_{=1}^{K}P(\{Y_{j}=y_{j}\}_{j (i)}|Y_{i}=)P(Y_{i}=)}\;.\] (1)

The likelihood measures the joint probability of the neighborhood labels given the label of node \(i\). To obtain the likelihood, we approximate the likelihood through the product of empirical conditional label distribution between adjacent nodes, i.e., \(P(\{Y_{j}=y_{j}\}_{j(i)}|Y_{i}=k)_{j(i )}P(Y_{j}=y_{j}|Y_{i}=k,(i,j))\), where \(P(Y_{j}=y_{j}|Y_{i}=k,(i,j))\) is the conditional of between adjacent nodes. The conditional between adjacent nodes \(i\) and \(j\) with label \(n\) and \(m\), respectively, is estimated by

\[(Y_{j}=m|Y_{i}=n,(i,j))= m,y_{u}=n,(u,v)\}|}{|\{(u,v) y_{u}=n,(u,v)\}|}\;.\] (2)

The prior distribution is also estimated from the empirical observations. We use the empirical proportion of label as a prior, i.e., \((Y_{i}=m)|\{u y_{u}=m\}|/||\). We also explore alternative designs for the likelihood and compare their performances in Section 4.2.

Note that, in implementation, all empirical distributions are computed only with the training nodes and their labels. The empirical distribution might be updated after node relabeling through the posterior computation, but we keep it the same throughout the relabeling process.

The posterior distribution can be used as a soft label to train the model, but we add uniform noise \(\) to the posterior to mitigate the risk of the posterior becoming overly confident if there are few or no neighbors. In addition, since the most probable label from the posterior might be different from the ground truth label, we interpolate the posterior with the ground truth label. To this end, we obtain the soft label \(}_{i}\) of node \(i\) as

\[}_{i}=(1-)}_{i}+_{i}\;,\] (3)

where \(_{ik} P(Y_{i}=k\{Y_{j}=y_{j}\}_{j(i)})+ \). \(\) and \(\) control the importance of interpolation and uniform noise. By enforcing \(>1/2\), we can keep the most probable label of soft label the same

Figure 1: Overall illustration of posterior node relabeling. To relabel the node label, we compute the posterior distribution of the label given neighborhood labels. Note that the node features are not considered in the relabeling process.

as the ground truth label, but we find that this condition is not necessary in empirical experiments. We name our method as PosteL (**P**osterior **L**abel smoothing). The detailed algorithm of PosteL is shown in Algorithm 1.

```
0: The set of training nodes \(_{}\), the number of classes \(K\), one-hot encoding of training node labels \(\{_{i}\}_{i_{}}\), and hyperparameters \(\) and \(\).
0: The set of soft labels \(\{}_{i}\}_{i_{}}\).  Estimate prior distribution for \(m[K]\): \((Y_{i}=m)=_{u_{}}e_{um}/|_{ }|\).  Define the set of training neighbors for each node \(u\): \(_{}(u)=(u)_{}\).  Estimate the empirical conditional for \(n,m[K]\): \((Y_{j}=m|Y_{i}=n,(i,j))_{u:u_{ },y_{u}=n}_{v_{}(u)}e_{vm}\). for\(i_{}\)do  Approximate likelihood: \(P(\{Y_{j}=y_{j}\}_{j_{}(i)}|Y_{i}=k) _{j_{}(i)}(Y_{j}=y_{j}|Y_{i}=k,(i,j) )\).  Compute posterior distribution: \(P(Y_{i}=k\{Y_{j}=y_{j}\}_{j_{}(i)})\) using Equation (1).  Add uniform noise: \(_{ik} P(Y_{i}=k\{Y_{j}=y_{j}\}_{j_{}(i)})+\).  Obtain soft label: \(}_{i}=(1-)}_{i}+_{i}\). endfor ```

**Algorithm 1** PosteL: Posterior label smoothing

### Iterative pseudo labeling

Posterior relabeling is a method used to predict the label of a node based on the labels of its neighboring nodes. However, in transductive node classification tasks where train, validation, and test nodes coexist within the same graph, the presence of unlabeled nodes can hinder the accurate prediction of posterior labels. For instance, when a node has no labeled neighbors, the likelihood becomes one, and the posterior only relies on the prior. Moreover, in cases where labeled neighbors are scarce, noisy labels among the neighbors can significantly compromise the posterior distribution. Such challenges are particularly prevalent in sparse graphs. For example, 26.35% of nodes in the Cornell dataset have no neighbors with labels. In such scenarios, the posterior relabeling can be challenging.

To address these limitations, we propose to update the likelihoods and priors through the pseudo labels of validation and test nodes. We first train a graph neural network with the soft labels obtained via Equation (3) and predict the labels of validation and test nodes to obtain the pseudo labels. We choose the most probable label as a pseudo label from the prediction. We then update the likelihood and prior with the pseudo labels, leading to the re-calibration of the posterior smoothing and soft labels. By repeating training and re-calibration until the best validation loss of the predictor no longer decreases, we can maximize the performance of node classification. We assume that if posterior label smoothing improves classification performance with a better estimation of likelihood and prior, the pseudo labels obtained from the predictor can benefit the posterior estimation as long as there are not many false pseudo labels.

## 4 Experiments

The experimental section is composed of two parts. First, we evaluate the performance of our method for node classification through various datasets and models. Second, we provide a comprehensive analysis of our method, investigating the conditions under which it performs well and the importance of each design choice.

### Node classification

In this section, we assess the enhancements in node classification performance across a range of datasets and backbone models. Our aim is to validate the consistent efficacy of our method across datasets and backbone models with diverse characteristics.

* **Datasets** We assess the performance of our method across 10 node classification datasets. To examine the effect of our method on diverse types of graphs, we conduct experiments on both homophilic and heterophilic graphs. Adjacent nodes in a homophilic graph are likely to have the same label. Adjacent nodes in a heterophilic graph are likely to have different labels. For the homophilic datasets, we use five datasets: the citation graphs Cora, CiteSeer, and PubMed [Sen et al., 2008, Yang et al., 2016], and the Amazon co-purchase graphs Computers and Photo [McAuley et al., 2015]. For the heterophilic datasets, we use five datasets: the Wikipedia graphs Chameleon and Squirrel [Rozemberczki et al., 2021], the Actor co-occurrence graph Actor [Tang et al., 2009], and the webpage graphs Texas and Cornell [Pei et al., 2020]. Detailed statistics of each dataset are illustrated in Appendix A.

Experimental setup and baselinesWe evaluate the performance of PosteL across various backbone models, ranging from MLP, which ignores underlying structure between nodes, to six widely used graph neural networks: GCN [Kipf and Welling, 2016], GAT [Velickovic et al., 2017], APPNP [Gasteiger et al., 2018], ChebNet [Defferrard et al., 2016], GPR-GNN [Chien et al., 2020], and BernNet [He et al., 2021]. We follow the experimental setup and backbone implementations of He et al. . Specifically, we use fixed 10 train, validation, and test splits with ratios of 60%/20%/20%, respectively, and measure the accuracy at the lowest validation loss. We report the mean performance and 95% confidence interval. The model is trained for 1,000 epochs, and we apply early stopping when validation loss does not decrease during the last 200 epochs. For all models, the learning rate is validated within \(\{0.001,0.002,0.01,0.05\}\), and weight decay within \(\{0,0.0005\}\). The search spaces of the other model-dependent hyperparameters are provided in Appendix B. We validate two hyperparameters for PosteL: posterior label ratio \(\{0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0\}\) and uniform noise ratio \(\{0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9\}\).

We compare our method with two different soft labeling methods, including label smoothing (LS) [Szegedy et al., 2016b] and knowledge distillation (KD) [Hinton et al., 2015]. For KD, we

    & Cora & CiteSeer & PubMed & Computers & Photo & Chameleon & Actor & Squirrel & Texas & Cornell \\  GCN & 87.142.01 & 79.8640.67 & 86.7442.32 & 83.229.33 & 88.2663.75 & 59.612.21 & 33.2324.16 & 46.7820.87 & 77.382.32 & 65.9046.43 \\ +LS & 87.717.87 & 81.606.09 & 87.7334.98 & 89.088.94 & 94.0558.3 & 64.818.33 & 33.8118.49 & 49.531.10 & 77.8718.17 & 67.7817.37 \\ +KD & 87.904.08 & 80.9745.86 & 87.043.92 & 88.5640.36 & 84.95 & 86.8043.33 & 84.953.34 & 9.3864.86 & 7.80342.64 & 67.80342.64 \\ +Postel. & **88.5642.88** & **88.0643.98** & **88.0643.98** & **8.56.043** & **8.56.043** & **3.56.043** & **8.52.766an.82** & **80.3033.82** \\ \(\) & +1.4217 & +2.2417 & +1.250(17) & +5.90(17) & +5.90(17) & +5.90(17) & +1.90(17) & +5.90(17) & +5.90(17) & +1.434(17) \\  GAT & 88.034.01 & 80.5264.07 & 80.740.42 & 83.322.70 & 9.9444.06 & 6.313.93 & 39.932.47 & 44.4998.8 & **80.5242.33** & 78.212.25 \\ +LS & 88.649.03 & 81.2740.08 & 86.334.03 & 88.9551.94 & 90.669.0 & 6.5614.34 & 34.551.54 & 9.4411.68 & 76.694.09 & 74.106.106 \\ +KD & 87.214.03 & 80.970.06 & 86.543.03 & 88.995.04 & 93.676.03 & 76.563 & 1.421.47 & 15.332.34 & 43.865.05 & 79.024.46 & 37.424.46 \\ +Postel. & **89.214.04** & **82.134.04** & **87.068.01** & **89.05.02** & **9.43.164** & **8.26.14** & **3.52.02** & **4.93.88** & 80.352.62 & **80.353.43** \\ \(\) & +1.181(1) & +1.61(17) & +0.04(17) & +6.28(17) & +3.37(17) & +1.95(17) & +1.90(17) & +4.89(17) & \(-0.49(17)\) & +2.12(17) \\  APPNP & 88.144.03 & 80.4724.03 & 88.221.38 & 83.222.70 & 83.5110.51 & 81.542 & 33.669.55 & 34.712.57 & 9.0892.04 & 91.8111.56 \\ +LS & 89.0126.14 & 81.588.89 & 88.903.22 & 87.820.7 & 94.342.03 & **8.59.147** & 9.344.04 & **3.618.09** & 9.3114.88 & 89.112.51 \\ +KD & 89.1642.08 & 81.5884.04 & 88.268.04 & 89.355.02 & 87.12.74 & **4.41.43** & **4.43.5** & **3.52.184** & 9.303.34 & 9.418.87 \\ +Postel. & **89.262.08** & **82.474.044** & **89.774.04** & **89.746.04** & **89.42.44** & **8.53.24** & 9.351.36 & 40.182.70 & 9.176.01 & **9.210.34** & **9.343.44** \\ \(\) & +1.48(1) & +2.00(17) & +1.05(17) & +2.14(17) & +5.91(17) & +1.90(17) & +5.20(17) & +2.00(17) & +1.15(17) & +1.63(17) \\  MLP & 79.696.64 & 76.5848.04 & 85.9442.28 & 82.583 & 87.422.64 & 86.561.31 & 40.198.76 & 31.031.94 & 91.451.54 & 90.8244.63 \\ +LS & 77.2149.07 & 76.8264.06 & 86.140.18 & 83.628.08 & 89.646.04 & 8.243.21 & 39.758.56 & 31.101.00 & 99.9844.04 & 90.898.11 \\ +KD & 76.326.03 & 77.7524.05 & 85.109.23 & 83.89.58 & 83.236.36 & 47.404.15 & **41.320.35** & 39.258.03 & 89.342.197 & 91.808.15 \\ +Postel. & **73.930.08** & **74.048** & **85.151.03** & **8.208.09** & **89.09.04** & **85.451.04** & **1.515.40** & **1.518.40** & **1.311.29** & **9.258.04** & **9.36.128** \\ \(\) & +1.43(1) & +1.82(17) & +1.05(17) & +1.35(17) & +1.50(17) & +1.50(17) & +1.60(17) & +0.04(17) & +2.08(17) & +1.50(17) & +2.79(17) \\  ChebNet & 86.6728.78 & 79.1120.75 & 87.953.03 & 87.54.03 & 93.776.32 & 59.282.12 & 37.6191.09 & 40.552.42 & 86.

use an ensemble of average logits from three independently trained GNNs as a teacher model. The temperature parameter for KD is set to four following the previous work (Stanton et al., 2021).

ResultsIn Table 1, the classification accuracy and 95% confidence interval for each of the seven models across the 10 datasets are presented. In most cases, PosteL outperforms baseline methods across various settings, demonstrating significant performance enhancements and validating its effectiveness for node classification. Specifically, our method performs better in 67 cases out of 70 settings against the ground truth labels. Furthermore, among these settings, 39 cases show improvements over the 95% confidence interval. Notably, on the Cornell dataset with the GCN backbone, our method achieves a substantial performance enhancement of 14.43%. When compared to the other soft label methods, PosteL performs better in most cases as well. The knowledge distillation method shows comparable performance with the GPR-GNN baseline, but even in this case, there are marginal differences between the two approaches.

### Analysis

In this section, we analyze the main experimental result from various perspectives, including design choices, ablations, and computational complexity.

Learning curves analysisWe investigate the influence of soft labels on the learning dynamics of GNNs by visualizing the loss function of GCNs with and without soft labels. Figure 2 visualizes the differences between training, validation, and test losses with and without the PosteL labels on the Squirrel dataset. From the training loss, we observe that the cross entropy with the PosteL labels converges to a higher loss than that with the ground truth labels. The curve shows that predicting soft labels is more difficult than predicting ground truth labels. On the other hand, the validation and test losses with the soft labels converge to lower losses than those with the ground truth labels. Especially, up to 200 epochs, we observe that no overfitting happens with the soft labels. We conjecture that predicting the correct PosteL label implies the correct prediction of the local neighborhood structure since the PosteL labels contain the local neighborhood information of the target node. Hence, the model trained with PosteL labels could have a better understanding of the graph structure, potentially leading to a better generalization performance. A similar context prediction approach has been proposed as a pertaining method in previous studies (Hu et al., 2019; Rong et al., 2020). We provide the same curves for all datasets in Figure 6 and Figure 7 in Appendix D. All curves across all datasets show similar patterns.

Influence of neighborhood label distributionOur approach assumes that the distribution of neighborhood labels varies depending on the label of the target node. If there are no significant differences between the neighborhood's label distributions, the posterior relabeling assigns similar soft labels for all nodes, making our method similar to the uniform noise method.

Figure 3 shows the neighborhood label distribution for three different datasets. In the PubMed and Texas datasets, we observe a notable difference in the conditionals when w.r.t the different labels of a target node. The PubMed dataset is known to be homophilic, where nodes with the same labels are likely to be connected, and the conditional distributions match the characteristics of the homophilic dataset. The Texas dataset, a heterophilic dataset, shows that some pairs of labels more frequently appear in the graph. For example, when the target node has the label of 1, their neighborhoods will likely have the label of 5. On the other hand, the conditionals of the Actor dataset do not vary much

Figure 2: Loss curve of GCN trained on PosteL labels and ground truth labels on the Squirrel dataset.

regarding the label of the target node. In such a case, the prior will likely dominate the posterior. Therefore, the posterior may not provide useful information about neighborhood nodes, potentially limiting the effectiveness of our method. This analysis aligns with the results in Table 1, where the improvement of the Actor dataset is less significant than those of the PubMed and Texas datasets. The neighborhood label distributions for all datasets are provided in Figure 8 and Figure 9 in Appendix E.

Visualization of node embeddingsFigure 4 presents the t-SNE (Van der Maaten and Hinton, 2008) plots of node embeddings from the GCN with the Chameleon and Squirrel datasets. The node color represents the label. For each dataset, the left plot visualizes the embeddings with the ground truth labels, while the right plot visualizes the embeddings with PosteL labels. The visualization shows that the embeddings from the soft labels form tighter clusters compared to those trained with the ground truth labels. This visualization results coincide with the t-SNE visualization of the previous work of Muller et al. (2019).

Effect of iterative pseudo labelingWe evaluate the impact of iterative pseudo labeling by analyzing the loss curve at each iteration. Figure 5 illustrates the loss curves for different iterations on the Cornell dataset. As the iteration progresses, the validation and test losses after 1,000 epochs keep decreasing. In this example, the model performs best after four iteration steps. We find that the best validation performance is obtained from 1.13 iterations on average. We provide the average iteration steps in Appendix C used to report the results in Table 1.

Figure 4: t-SNE plots of the final layer representation of the Chameleon and Squirrel datasets. For each dataset, the left figure displays the representations trained on the ground truth labels, while the right figure displays the representations trained on the PosteL labels.

Figure 3: Empirical conditional distributions between two adjacent nodes. We omit the adjacent condition \((i,j)\) from the figures for simplicity.

**Design choices of likelihood model** We explore various valid design choices for likelihood models. We introduce two variants of PosteL: PosteL (normalized) and PosteL (local-\(H\)). In Equation (2), each edge has an equal contribution to the conditional. The conditional can be influenced by a few numbers of nodes with many connections. To mitigate the importance of high-degree nodes, we alternatively test the following conditional, denoted as PosteL (normalized):

\[^{}(Y_{j}=m|Y_{i}=n,(i,j)):= =n}_{v(u)}(u)|} 1[y_{v}=m]}{|\{y_{u}=n  u\}|}\,\]

where \(\) is an indicator function.

In PosteL (local-\(H\)), we estimate the likelihood and prior distributions of each node from their respective \(H\)-hop ego graphs. Specifically, the likelihood of PosteL (local-\(H\)) is formulated as follows:

\[^{H}(Y_{j}=m|Y_{i}=n,(i,j)):==m,y_{u}=n,(u,v),u,v^{(H)}(i)\}|}{|\{(u,v)| y_{u}=n,(u,v),u,v^{(H)}(i)\}|}\,\]

where \(^{(H)}(i)\) denotes the set of neighborhoods of node \(i\) within \(H\) hops. Through the local likelihood, we test the importance of global and local statistics in the smoothing process.

Table 2 shows the comparison between these variants. The likelihood with global statistics, e.g., PosteL and PosteL (normalized), performs better than the local likelihood methods, e.g., PosteL (local-1) and PosteL (local-2) in general, highlighting the importance of simultaneously utilizing global statistics. Especially in the Cornell dataset, a significant performance gap between PosteL and PosteL (local) is observed. PosteL (normalized) demonstrates similar performance to PosteL.

**Ablation studies** To highlight the importance of each component in PosteL, we perform ablation studies on three components: posterior smoothing without uniform noise (PS), uniform smoothing (UN), and iterative pseudo labeling (IPL). Table 3 presents the performance results from the ablation studies.

The configuration with all components included achieves the highest performance, underscoring the significance of each component. The iterative pseudo labeling proves effective across almost all datasets, with a particularly notable impact on the Cornell dataset. However, even without iterative pseudo labeling, the performance remains competitive, suggesting that its use can be decided based on available resources. Additionally, incorporating uniform noise into the posterior distribution enhances performance on several datasets. Moreover, PosteL consistently outperforms the approach using only uniform noise, a widely used label smoothing method.

    & Cora & CiteSeer & Computers & Photo & Chameleon & Actor & Texas & Cornell \\  GCN & 87.14\(\)1.01 & 79.86\(\)6.07 & 83.32\(\)0.33 & 88.26\(\)0.73 & 59.61\(\)2.21 & 33.23\(\)1.16 & 77.38\(\)3.26 & 65.90\(\)4.43 \\ +PosteL (local-1) & 88.26\(\)1.07 & 81.42\(\)4.06 & 89.08\(\)3.01 & 93.61\(\)4.00 & 65.36\(\)1.25 & 33.48\(\)1.03 & 79.02\(\)1.11 & 71.97\(\)4.10 \\ +PosteL (local-2) & 88.62\(\)0.97 & 81.92\(\)4.02 & 88.62\(\)4.08 & 93.95\(\)0.37 & 65.10\(\)1.55 & 34.63\(\)0.46 & 78.20\(\)2.79 & 73.28\(\)4.10 \\ +PosteL (norm.) & **89.00\(\)0.99** & 81.86\(\)3.00 & **89.30\(\)0.39** & **94.13\(\)0.39** & **66.00\(\)0.14** & 34.90\(\)0.63 & 80.33\(\)2.95 & 80.00\(\)1.57 \\ +PosteL & 88.56\(\)0.90 & **82.10\(\)5.50** & **89.30\(\)0.23** & 94.08\(\)0.35 & 65.80\(\)1.23 & **35.16\(\)0.43** & **80.82\(\)2.79** & **80.33\(\)4.80** \\   

Table 2: Classification accuracy with various choices of likelihood model. PosteL (local-1) and (local-2) indicate that the likelihood is estimated within one- and two-hop neighbors of a target node, respectively. PosteL (norm.), shortened from PosteL (normalized), indicates that the likelihood is normalized based on the degree of a node.

Figure 5: The impact of the iterative pseudo labeling: loss curves of GCN on the Cornell dataset.

Complexity analysisThe computational complexity of calculating the posterior label is \(O(||K)\). Since the labeling is performed before the learning stage, the time required to process the posterior label can be considered negligible. The training time increases linearly w.r.t the number of iterations with the pseudo labeling. However, experiments show that an average of 1.13 iterations is needed, making our approach feasible without having too many iterations. The proof of computational complexity is in Appendix C.

### Training with sparse labels

Our method relies on global statistics estimated from training nodes. However, in scenarios where training data is sparse, the estimation of global statistics can be challenging. To assess the effectiveness of the label smoothing from graphs with sparse labels, we conduct experiments with varying sizes of a training set. We vary the size of the training set from 5% to 40% of an entire dataset and conduct the classification experiments with the same setting used in the previous section. The percentage of validation nodes is set to 20% for all experiments. Table 4 provides the classification performance with sparse labels. Even in scenarios with sparse labels, PosteL consistently outperforms models trained on ground truth labels in most cases. These results show that our method can effectively capture global statistics even when training data is limited.

## 5 Conclusion

In this paper, we proposed a novel posterior label smoothing method, PosteL, designed to enhance node classification performance in graph-structured data. Our approach integrates both local neighborhood information and global label statistics to generate soft labels, thereby improving generalization and mitigating overfitting. Extensive experiments across various datasets and models demonstrated the effectiveness of PosteL, showing significant performance gains compared to baseline methods despite its simplicity.

    & ratio & Cora & CiteSeer & Computers & Photo & Chameleon & Actor & Texas & Cornell \\  GCN & 5\% & 80.03±0.57 & 70.19±0.49 & 85.32±0.60 & 92.39±0.24 & 45.96±0.28 & 25.20±0.83 & 54.23±0.55 & **50.58±54** \\ +PosteL & 5\% & **80.42±0.64** & **71.08±0.65** & **86.22±0.65** & **92.66±0.21** & **51.35±1.19** & **27.04±0.51** & **57.52±1.97** & 50.36±3.43 \\  GCN & 10\% & 83.05±0.51 & 72.09±0.46 & 86.68±0.59 & 92.49±0.29 & 51.55±1.67 & 26.78±0.68 & 60.08±2.56 & 53.64±3.49 \\ +PosteL & 10\% & **83.50±0.36** & **73.76±0.24** & **87.47±0.37** & **92.88±0.30** & **56.33±1.86** & **28.07±0.19** & **61.63±2.87** & **57.75±1.36** \\  GCN & 20\% & 84.46±0.68 & 73.93±0.60 & 87.12±0.33 & 93.24±0.33 & 55.57±1.18 & 27.42±0.60 & 63.33±2.55 & 52.91±2.65 \\ +PosteL & **85.32±0.65** & **75.73±0.39** & **87.77±0.19** & **93.47±0.81** & **60.91±1.97** & **29.23±0.49** & **63.67±2.37** & **56.92±2.39** \\  GCN & 30\% & 85.76±0.46 & 75.56±0.44 & 87.02±0.49 & 93.14±0.27 & 59.41±1.08 & 28.81±0.50 & 65.64±3.66 & 60.04±3.96 \\ +PosteL & **86.04±0.37** & **77.30±0.46** & **88.09±0.31** & **93.47±0.27** & **63.64±0.98** & **30.21±0.39** & **69.80±2.36** & **64.95±2.08** \\  GCN & 40\% & **86.32±0.43** & 77.17±0.52 & 87.88±0.58 & 93.76±0.26 & 60.44±1.20 & 29.71±0.72 & 67.88±2.47 & 62.00±2.12 \\ +PosteL & 86.23±0.37 & **79.22±0.32** & **88.21±0.29** & **93.99±0.24** & **63.82±1.44** & **31.05±0.40** & **73.76±2.59** & **67.41±4.71** \\   

Table 4: Accuracy of the model trained with sparse labels. The ratio indicates the percentage of nodes used for training.

   PS & UN & IPL & Cora & CiteSeer & Computers & Photo & Chameleon & Actor & Texas & Cornell \\  ✗ & ✗ & ✗ & 87.14±1.01 & 79.86±0.57 & 83.32±0.33 & 88.26±0.73 & 59.61±2.21 & 33.23±1.16 & 77.38±3.28 & 65.90±4.43 \\ ✓ & ✗ & ✗ & 88.11±2.22 & 80.95±5.82 & 88.86±0.40 & 93.55±0.30 & 64.53±1.23 & 33.48±0.62 & 78.52±2.46 & 68.52±4.43 \\ ✗ & ✓ & ✗ & 87.77±0.37 & 81.06±0.59 & 89.08±0.30 & 94.05±0.26 & 64.81±1.53 & 33.81±0.75 & 77.87±3.77 \\ ✓ & ✗ & ✗ & **85.66±0.30** & 81.64±0.57 & 88.70±2.73 & 93.70±0.37 & 64.25±1.93 & 34.71±0.76 & **80.82±2.79** & 80.16±1.97 \\ ✓ & ✓ & ✗ & 87.83±0.32 & 82.09±0.44 & 89.17±0.31 & 93.98±0.34 & **66.19±1.60** & 34.91±0.48 & 79.51±3.61 & 71.97±5.25 \\ ✓ & ✓ & 1 & 87.96±0.30 & **82.33±5.2** & 89.16±0.30 & 90.46±0.27 & 65.89±1.51 & 34.96±0.48 & 80.16±2.79 & **80.33±1.97** \\ ✓ & ✓ & ✓ & **88.56±0.30** & 82.10±0.50 & **89.30±0.23** & **94.08±0.38** & 65.80±1.23 & **35.16±0.40** & **80.82±2.79** & **80.33±1.90** \\   

Table 3: Ablation studies on three main components of PosteL on GCN. PS stands for posterior label smoothing without uniform noise, UN stands for uniform noise added to the posterior distribution, and IPL stands for iterative pseudo labeling. We use ✓ to indicate the presence of the corresponding component in training and ✗ to indicate its absence. IPL with one indicates the performance with a single pseudo labeling step.