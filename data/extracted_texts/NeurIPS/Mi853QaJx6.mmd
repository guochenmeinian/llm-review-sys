# On the Worst Prompt Performance of Large Language Models+

Footnote â€ : The work described in this paper is partially supported by a grant from the Research Grant Council of the Hong Kong Special Administrative Region, China (Project Code: 14200719).

Bowen Cao\({}^{,}\) Deng Cai\({}^{,}\) Zhisong Zhang\({}^{}\) Yuexian Zou\({}^{}\) Wai Lam\({}^{}\)

\(\) The Chinese University of Hong Kong

\(\) Tencent AI Lab \(\) Peking University

bwcao@link.cuhk.edu.hk, thisisjcykcd@gmail.com, zhisonzhang@tencent.com

zouyx@pku.edu.cn, wlam@se.cuhk.edu.hk

###### Abstract

The performance of large language models (LLMs) is acutely sensitive to the phrasing of prompts, which raises significant concerns about their reliability in real-world scenarios. Existing studies often divide prompts into task-level instructions and case-level inputs and primarily focus on evaluating and improving robustness against variations in tasks-level instructions. However, this setup fails to fully address the diversity of real-world user queries and assumes the existence of task-specific datasets. To address these limitations, we introduce RobustAlpacaEval, a new benchmark that consists of semantically equivalent case-level queries and emphasizes the importance of using the worst prompt performance to gauge the lower bound of model performance. Extensive experiments on RobustAlpacaEval with ChatGPT and six open-source LLMs from the Llama, Mistral, and Gemma families uncover substantial variability in model performance; for instance, a difference of 45.48% between the worst and best performance for the Llama-2-70B-chat model, with its worst performance dipping as low as 9.38%. We further illustrate the difficulty in identifying the worst prompt from both model-agnostic and model-dependent perspectives, emphasizing the absence of a shortcut to characterize the worst prompt. We also attempt to enhance the worst prompt performance using existing prompt engineering and prompt consistency methods, but find that their impact is limited. These findings underscore the need to create more resilient LLMs that can maintain high performance across diverse prompts. Data and code are available at https://github.com/bwcao/RobustAlpacaEval.

## 1 Introduction

In recent years, large language models (LLMs) have made extraordinary progress (Brown et al., 2020; Touvron et al., 2023; Jiang et al., 2023; Team et al., 2024) and one key factor in their success is their ability to adapt to diverse tasks through prompting. However, the performance of these LLMs is significantly sensitive to the prompts they receive (Gu et al., 2022; Mizrahi et al., 2024; Sun et al., 2023; Li et al., 2024). Even minor alterations in format, without semantic changes, can trigger substantial performance degradation (Sclar et al., 2023). Consequently, prompt engineering has surfaced as a critical component, playing a critical role in unlocking the full potential of these models (Shin et al., 2020; Zhou et al., 2022; Pryzant et al., 2023; Prasad et al., 2023; Gonen et al., 2022; Schulhoff et al., 2024).

Despite the efficacy of prompt engineering, it is not without its drawbacks. First, it is unrealistic to expect users to master the art of designing optimal prompts or to invest a significant amount of time in doing so. Second, automatic prompt engineering often necessitates testing on substantial labeled data to pinpoint the most effective prompts (Shi et al., 2022; Prasad et al., 2023), a process that is impractical for users who just have one or a few unlabeled queries. Therefore, investigating LLMs' robustness to prompt variances is of great research and practical value.

Previous research on prompt robustness (Mizrahi et al., 2024; Sclar et al., 2023; Sun et al., 2023) divides a user query into two parts: _task-level instruction_ and _case-level input_. The task-level instruction is an abstract task definition and explanation supplemented by case-level concrete input (See the left part of Figure 1). This setup is reminiscent of conventional NLP practice, where task-specific models are developed using a testing set for each well-defined NLP task. Consequently, they have focused on the LLM's resilience to task-level instructions exclusively, reporting the average performance across testing set cases. Nonetheless, these studies have limitations. First, they disregard that the best task-level instruction might vary across individual cases. Second, they overlook the impact of variations in case-level input on model performance. Last but not least, real-world user queries often do not explicitly segregate task-level instruction and case-level input (See the right part of Figure 1). These queries may cover a wide array of tasks and it is not possible to optimize the prompts through evaluating on a task-specific testing set.

In this paper, we present a comprehensive study that goes beyond the conventional approach of evaluating LLMs. We shift the focus from task-level instructions to diverse real-world user queries. Our work introduces a new benchmark, RobustAlpacaEval, that includes semantically equivalent case-level queries across various tasks, offering a more holistic analysis. We argue that the _worst prompt performance_, defined as the lowest performance a model exhibits across different paraphrases of a query with equal semantics and fluency, is a crucial metric for assessing the lower bound of LLM performance. Our extensive experiments on ChatGPT (gpt-3.5-turbo-1106) and six open-source LLMs from the Llama, Mistral, and Gemma families reveal substantial variability in model performance. For instance, Llama-2-70B-chat model shows a difference of up to 45.48 points in win-rate against GPT4 using RobustAlpacaEval, and its worst prompt performance can be as low as 9.38%. Our findings further reveal that the worst prompts, which cause the model to perform the worst in specific cases, are not universally applicable across different models. Each model also exhibits unique preferences towards all paraphrases, as demonstrated by their inconsistent performance rankings on identical cases. Beyond the absence of model-agnostic traits in identifying the worst prompts, model-dependent prompt features, such as perplexity and hidden states, also prove inadequate in forecasting model performance. Furthermore, we also find that different models are more sensitive in different cases, which further underscores the complexity involved in tackling the issue of worst prompt performance.

In summary, the contributions of this paper can be summarized as follows:

* We introduce a new benchmark, RobustAlpacaEval, that encompasses semantically equivalent queries of diverse real-world tasks, offering a more holistic assessment compared to existing benchmarks that focus solely on rephrasing task-level instructions.

Figure 1: An example illustrating the gap between existing benchmarks that evaluate prompt consistency and real user queries.

* Through extensive experiments on ChatGPT and six open-source LLMs from the Llama, Mistral, and Gemma families, we unveil significant variability in model performance and highlight the difficulty in predicting prompts that lead to the worst performance.
* We show the shortcomings of most existing methods in improving the worst prompt performance of models. Yet a voting-based method effectively enhances the stability of model performance.

## 2 Related Work

Existing research on prompt robustness can be classified into two categories. On the one hand, research efforts have been focused on enhancing the inherent resilience of LLMs to prompt variations, namely _prompt consistency_. On the other hand, progress has been made in automating _prompt engineering_, the process to find the optimal prompt that yields the best performance.

Prompt Consistency.Previous studies (Gu et al., 2022; Wang et al., 2023; Zhu et al., 2023; Wang et al., 2023; Salinas and Morstatter, 2024) have explored the robustness of LLMs to intentional perturbations such as word deletion and sentence shuffling. Our work deviates from these perturbation-based studies, as we are interested in model performance across semantically equivalent and syntactically fluent prompts. While it is anticipated that a flawed prompt would lead to performance decline, we do not expect such performance variations in our setting.

Recent research (Mizrahi et al., 2024; Sclar et al., 2023; Sun et al., 2023) has also examined the variability in model performance with semantically equivalent prompts. However, these studies solely focused on task-level instructions and overlooked the variations within case-level inputs. Moreover, the models used in these studies are trained and evaluated on traditional NLP datasets, while today's LLMs are predominantly instruction-tuned on and serve diverse user prompts. This discrepancy suggests that the findings of these studies may not fully apply to the latest generation of LLMs.

Prompt Engineering.A number of studies utilize gradient-based methods for prompt optimization (Shin et al., 2020; Shi et al., 2022; Li and Liang, 2021; Qin and Eisner, 2021; Lester et al., 2021; Liu et al., 2023). However, their dependence on substantial labeled training data and gradient computing limits their applicability for users with only a few unlabeled queries or gradient-less APIs. Furthermore, these methods incur significant computational costs as the model scale increases.

Conversely, gradient-free methods aim to find the optimal prompt through exploration and scoring (Prasad et al., 2023; Zhou et al., 2022; Pryzant et al., 2023; Chen et al., 2023; Yang et al., 2023). During the exploration phase, they create analogous prompts using techniques such as rephrasing the current prompts with an LLM. Subsequently, the best prompts are selected based on the model's performance on downstream tasks. This process can be iterative. Although these approaches can proficiently pinpoint prompts that result in better performance for a specific task, they all necessitate a test set for prompt scoring. However, in real-world scenarios, such test sets are often absent. Gonen et al. (2022) suggests that prompt perplexity can be an effective data-free criterion. However, our experiment results tell a different story, indicating that prompt perplexity is not a reliable metric.

## 3 Benchmarking the Worst Prompt Performance

We present the construction process of our new benchmark, RobustAlpacaEval (SS3.1) and report the results on ChatGPT and six open-source LLMs from Llama, Mistral, and Gemma families.

### A New Benchmark: RobustAlpacaEval

Data.Our benchmark is based on TinyAlpaceEval (Polo et al., 2024), which is a condensed subset of the AlpacaEval (Li et al., 2023) benchmark, created to enable efficient assessment of LLMs. We develop RobustAlpacaEval by creating ten4 paraphrases for each query within TinyAlpacaEval. To save manual efforts, this is first accomplished automatically through GPT4. Subsequently, each paraphrase is manually reviewed and revised to ensure semantic integrity and human-like fluency. Weuse carefully crafted prompts to promote the diversity of paraphrases, which is evidenced by the fact that the average of length-normalized edit distance5 between each pair of paraphrases is 0.7234 at the word level. The few-shot paraphrasing instruction utilized in this process is detailed in Appendix A.2.

Metrics.In line with common practice, we use weighted win-rate (Li et al., 2023) as our performance metric; It uses an evaluator to compare the output of the target model against that of a reference model, and estimates the winning probability of the target model. Specifically, we employ the gpt4_turbo model as the evaluator and the reference model. We term the model's performance on the original prompt as _original_ performance. We also report the _worst_, _best_, _average_ performances across all eleven prompts as well as the standard deviation. For each metric, we average the results across all cases in RobustAlpacaEval.

### Results

The results shown in Table 1 reveal several key findings:

**There is a significant gap between the worst performance (lower bound) and best performance (upper bound) for all models.** For instance, the worst and best performance of Llama-2-70B-chat are 0.094 and 0.549, respectively, indicating a difference of 0.455. This suggests that the current LLMs' ability to follow instructions is not robust enough. Even instructions with identical semantics and fluent expressions could lead models like Llama2-70B-chat to plummet from a level comparable to GPT4 (0.5 indicates equivalence to the reference model) to far below the average level (0.292).

**While scaling up models enhances their ability to follow instructions, it does not correspondingly increase their robustness.** For example, the average performance of Llama-2-7B/13B/70B-chat shows a marked improvement, rising from 0.195 to 0.24, and finally to 0.292, but their robustness (indicated by the Standard Dev.) exhibits a slight decline, recorded at 0.133, 0.163, and 0.156 respectively. A similar trend can be observed with the Gamma family models. Despite Gamma-7b outperforming the 2b model with an average performance of 0.31 compared to 0.153, its robustness is inferior, registering at 0.191 compared to the 2b model's 0.118.

**The original performance assessment only provides a narrow perspective of a model's overall performance.** Specifically, the original performance serves as a reliable metric for ranking within the same model family, as it aligns well with the best, worst, and average performances. However, we find that this alignment weakly correlates when comparing across different model families, such as Gemma and Llama, questioning the methodological validity of using just one type of phrasing for a query to assess performance. Furthermore, the original performance does not fully encapsulate a model's potential, including the boundary and average of its performance, and fails to reflect the stability of the model's performance.

  
**Model** & **Orig. Perf. \(\)** & **Worst Perf. \(\)** & **Best Perf. \(\)** & **Avg. Perf. \(\)** & **Standard Dev. \(\)** \\  Gemma-1.1-2b-it & 16.32 & 4.42 & 36.60 & 15.27 & **11.78** \\ ChatGPT & 17.46 & 5.44 & 39.88 & 19.96 & 12.86 \\ Mistral-7b-instruct & 24.56 & 4.22 & 45.26 & 21.82 & 14.60 \\ Llama-2-7b-chat & 25.61 & 5.42 & 43.54 & 19.52 & 13.32 \\ Llama-2-13b-chat & 27.48 & 4.83 & 52.05 & 23.97 & 16.25 \\ Gemma-1.1-7b-it & 29.57 & 8.73 & **62.38** & **31.04** & 19.07 \\ Llama-2-70b-chat & **32.23** & **9.38** & 54.86 & 29.18 & 15.61 \\   

Table 1: Results on our RobustAlpacaEval benchmark. The model order is arranged according to their original performance. The substantial range between the worst and best performance suggests the robustness issues in LLMsâ€™ instruction-following ability. Scaling up model sizes, while improving average performance, does not enhance robustness.

Identifying the Worst Prompts

Given the noticeable performance disparities across semantically equivalent prompts, our next question is: can we identify the worst prompt among these paraphrases? This would not only aid our understanding of the model's lower bound but also be instrumental in improving model performance by guiding the refinement of prompts. We investigate this matter from both model-agnostic (SS4.1) and model-dependent (SS4.2) perspectives.

### Model-agnostic Analysis

We examine the model-agnostic attributes of the worst prompts from two perspectives: (_i_) we assess whether the worst prompts overlap across diverse models, and (_ii_) we probe whether the rankings of prompts are consistent across different models.

Overlap of the worst prompts across different models.If many of the worst prompts are model-agnostic, there must exist certain prompts that, among their semantically equivalent paraphrases, consistently rank as the worst performing across all models. To quantify the prevalence of such prompts, we calculate the rate of the model-agnostic worst-\(k\) prompt. Let \(W_{m}(x,k)\) denote the worst-\(k\)-performing prompts for model \(m\) on case \(x\), and let the set of worst-\(k\) prompts for model \(m\) on dataset \(D\) be \(W_{m}(D,k)=_{x D}W_{m}(x,k)\). We calculate the overlap rate of the worst-\(k\) prompts for the tested models, which ranges from 0 to 1, as follows:

\[R(M,k,D)=W_{m}(D,k)}{k*|D|}\] (1)

As shown in Figure 2, the overlap rate of the worst-\(k\) prompts for Llama/Gemma family models is noticeably higher than that for all models, indicating a stronger consistency among models from the same family. However, even so, when \(k=1\) (considering only the worst prompt), the metric for Llama family models is only 2% (13% for Gemma), and less than 10% (20% for Gemma) when \(k=2\). Not to mention the results of all models are much lower, nearly zero. These results suggest that the prompts showcasing the lower-bound performance of the models are often model-specific.

Performance Rankings of prompts across different models.We continue to check if the rankings among different models are consistent. We utilize Kendall's W (Kendall and Smith, 1939), commonly referred to as the coefficient of concordance, as a means to quantify the correlation among performance rankings derived from various models. Mathematically, Kendall's W is defined as follows:

\[W=^{n}{(R_{i}-)^{2}}}{k^{2}(n^{3}-n)}\] (2)

where \(R_{i}\) represents the sum of the ranks assigned to the \(i\)-th prompt by all models. \(\) is the mean of total ranks, calculated as \(=_{i=1}^{n}{R_{i}}\). \(k\) is the number of models, and \(n\) is the number of prompts being ranked. The value of W ranges from 0 to 1, where 0 indicates no agreement and 1 indicates complete agreement among the judges6.

We compute the average Kendall's W across all cases as the overall consistency. The results presented in Table 2 reveal the following observations: (_i_) The rankings within the Llama and Gemma family models exhibit only moderate consistency. The slightly higher consistency of the Gemma family models could be attributed to the fewer scales (2b/7b). This suggests that individual models within the same family still possess their unique strengths and weaknesses. (_ii_) The consistency between all models is significantly lower, underscoring the difficulty in establishing a model-agnostic standard for determining "good" and "bad" prompts.

Figure 2: The overlap rate of model-agnostic worst-\(k\) prompts across different models. The low result indicates a minimal occurrence of universally poor prompts.

Overlap of Sensitive Cases.The above experiment results underscore that the worst prompt is almost unpredictable in advance without given the model. Our next question is whether different models suffer from the same prompt variances. Concretely, we classify a case as a sensitive case if and only if the model's performance range (the difference between the best and worst performances) exceeds a threshold (_e.g._, 0.5).7 Figure 10 in Appendix B presents an example of a sensitive case. We measure the overlap of sensitive cases between different models by calculating the average Intersection over Union (IoU) of each pair of models within the tested model set. Let \(S_{m}(D)\) represent the set of sensitive cases for model \(m\) on dataset \(D\). The overlap measure of the tested model set \(M\) is:

\[IoU(M,D)=_{m_{i},m_{j} M,i j}IoU(m_{i},m_{j},D)\] (3)

\[IoU(m_{i},m_{j},D)=}(D) S_{m_{j}}(D)}{S_{m_{i}}(D) S_{m _{j}}(D)}\] (4)

Figure 3 illustrates the fluctuation of IoU in response to varying sensitive case thresholds across diverse model sets. The observations are as follows: (i) The IoU is markedly higher among the Llama/Gemma family models, indicating a greater commonality of vulnerabilities within the same model family. For models from different families, such as the 7B models of Llama, Gemma, and Mistral, their IoU is lower despite similar overall performance (as shown in Table 1). (ii) When considering all models, the IoU drops significantly to less than 0.2, suggesting _the absence of a clear model-agnostic characteristic_. (iii) As the threshold increases, there is a consistent decrease in the IoU across all model sets. This suggests that the most sensitive cases for a model are often unique to it, thereby emphasizing the existence of distinct issues inherent to each model.

Discussion.The above experiments demonstrate that the performance rankings of different prompts are inconsistent among different models. Furthermore, different models may suffer from different prompt variances. **Therefore, it is unlikely to characterize the worst prompts using model-independent features.** To this end, we omit further analyses on the relationship between model performance and linguistic features of the prompts, such as sentence length, syntactical complexity, wording choice, and paraphrasing methods.

### Model-dependent Analysis

The findings from SS4.1 suggest that we can hardly predict the prompt performance in advance without access to the model. We then turn to explore the possibilities of building the worst prompt predictors using model-aware features.

    &  &  \\  & & **Negligible** & **Weak** & **Moderate** & **Strong** \\  Llama family & 0.443 & 0 & 0.242 & 0.414 & 0.343 \\ Gemma family & 0.548 & 0 & 0.08 & 0.28 & 0.64 \\ Llama/Gemma/Mistral-7B & 0.401 & 0.011 & 0.326 & 0.411 & 0.253 \\ All models & 0.238 & 0.053 & 0.723 & 0.202 & 0.021 \\   

Table 2: We report the average value of Kendallâ€™s W across all cases. We also calculate the proportion of cases with different levels of consistency. The ranges for each level of consistency are as follows: Negligible (W < 0.1), Weak (0.1 \(\) W < 0.3), Moderate (0.3 \(\) W < 0.5), and Strong (W \(\) 0.5).

Figure 3: IoU fluctuation across varying sensitive case thresholds for diverse model sets. The IoU drops below 0.2 across all models, indicating a scarcity of model-agnostic traits.

* **Prompt Perplexity.** Gonen et al. (2022) report that lower prompt perplexity generally correlates with superior model performance. To verify this assertion, we compute the Pearson correlation coefficients between perplexity and performance across all cases. The results are illustrated in Figure 4 (left half). The layout divides correlations into negative and positive (left/right of the 0 tick), with correlation strengths categorized as weak/no (0 to 0.3), moderate (0.3 to 0.6), and strong (0.6 to 1). Analyzing the Llama family models, we note the following: (_i_) About 45% of cases show weak or no correlation. (_ii_) Positive and negative correlations are nearly equally distributed. (_iii_) The distribution of cases across different correlation degrees is fairly balanced. These results are consistent with observations from other models analyzed (detailed in Appendix B), indicating no definitive correlation between prompt perplexity and model performance.
* **Min-K% Prob.** We also explore the potential relationship between model performance and the prompt's Min-K% Prob (Shi et al., 2023), a method related to pre-training data detection, which judges the model's familiarity with the text based on the average log-likelihood of the lowest k% tokens in the sentence. Intrigued by this, we carry out an analysis akin to that for perplexity, only to find weak positive correlations that lack statistical significance, as shown in the right half of Figure 4.
* **Hidden States.** We shift our focus to investigate model perceptions of prompt quality through the lens of model representation, using: (i) Principal Component Analysis (PCA) for direct visualization of hidden states, as shown in Figure 5 (a). The color gradient reflects the model's performance ranking across 11 prompts per case, revealing no distinct separation between different performance levels. (ii) Probing technique to quantify the extent to which the model's internal representations are predictive of its performance. We train a reward model (a 3-layer MLP in practice) that scores prompts based on hidden states and apply the standard training loss function (Ouyang et al., 2022), which is defined as: \[_{(p_{g},p_{b}) P}[((r_{}(p_{g}) -r_{}(p_{b})))]\] (5)

Figure 4: Distribution of Pearson correlation coefficients between model performance and prompt perplexity (left) and promptâ€™s Min-K% Prob (right) for Llama-family models across all cases. The absolute values of correlation in the ranges of (0, 0.3], (0.3, 0.6], and (0.6, 1] respectively denote weak/no correlation, moderate correlation, and strong correlation.

Figure 5: (a) Visualization of Llama-2-7B-chat modelâ€™s hidden states using 2-dimensional PCA. The color gradient, from light to dark, represents the ranking of model performance on each caseâ€™s 11 prompts, from low to high. (b) Probing Llama-2-7B-chat modelâ€™s hidden states for prompt scoring. The x-axis stands for training steps. The y-axis represents the accuracy of the modelâ€™s predictions, quantified as the proportion of correctly judged prompt pairs out of all test pairs.

where \(P\) represents the entire set of paraphrase pairs, each pair being formed by combining two paraphrases from the same case, \(r_{}(p)\) is the output of the reward model, and \(p_{g}\) is the preferred prompt when compared to \(p_{b}\) in a pair. We implement two training-test set partitioning strategies: (_i_) Intra: Dividing prompts within each case into training and testing sets at a 3:1 ratio. (_ii_) Inter: Dividing all cases into training and testing sets at a 3:1 ratio. For each case in the test set, we pair up the paraphrases and determine the correctness of the model's scoring on each pair based on their performance ranking. We report the average correctness rate across all pairs as the accuracy. As shown in Figure 5 (b), the accuracy is near chance (0.5), suggesting hidden states provide limited insight into prompt quality.

\(\) **Model Preference.** We then delve into the model's ability to perceive the quality of prompts. We begin by giving the model two prompts and asking it to choose the one that would enable it to generate a more helpful, accurate, and comprehensive response. Then, we evaluate the model in two ways: (_i_) by pairing all paraphrases and asking the model's preference, and (_ii_) by only inquiring about the model's preference between the best and worst prompts.

In all experiments, we test both arrangements of the given pair of prompts to eliminate any bias that may arise from their positioning. The metric we report is the proportion of times the model selects the prompt that leads to its superior performance. As shown in Table 3, given all pairs of paraphrases, the accuracy of the Llama family models and ChatGPT hovers around 50%, with Llama-2-70B-chat slightly higher at 53.02%. When dealing with worst-best pairs, although the performance of all models, except for Llama-7B-chat, slightly improved, the highest score is only 58.92, suggesting that the models are largely unable to perceive the impact of the given prompts on their own performance.

DiscussionOur explorations over prompt perplexity, Min-k% Prob, hidden states, and model preference show that **it is very challenging to identify the worst prompt in advance even with the access to the model.** Note that this difficulty is often overlooked in previous studies as they primarily focus on task-level instructions and assume a corresponding test set for prompt selection. Specifically, they obtain the generation results on the test set and directly measure the downstream task performance. However, this is not possible for diverse real-world user queries, which further underscores the importance of the case-level setup in RobustAlpacaeval.

## 5 Improving Worst Prompt Performance

As discussed in SS2, prompt engineering and prompt consistency approaches are commonly employed to improve model performance on arbitrary prompts. In this section, we investigate the effectiveness of applying these techniques to improve the worst prompt performance.

Prompt EngineeringMost existing prompt engineering methodologies fall short in tackling the worst-performance issue, due to the lack of a test set for a single unlabeled prompt. Therefore, we explore two alternative strategies: (_i_) allowing the model to refine the prompts itself, and (_ii_) implementing a voting-based generation process that takes into account all paraphrases.

\(\) **Self-refinement.** First, we allow the model to rewrite the given prompts according to its own preferences, making them more conducive to generating better responses.

\(\) **Voting.** Another solution is to let the model perform voting-based generation based on all prompts, which can be mathematically represented as:

\[P(y_{i}|X,y_{<i})=_{x X}P(y_{i}|x,y_{<i})\] (6)

where \(X\) represents the set of paraphrases.

  
**Model** & **All Pairs** & **Worst-Best** \\  Llama-2-7B-chat & 50.05 & 49.73 \\ Llama-2-13B-chat & 49.84 & 50.57 \\ Llama-2-70B-chat & **53.02** & **58.92** \\ ChatGPT & 50.16 & 51.00 \\   

Table 3: In the model preference experiment, the model is tested with all paraphrase pairs (All Pairs) or best and worst prompt pairs (Worst-Best). We report the proportion of times the model prefers the prompt that leads to its better performance.

Prompt ConsistencyDrawing inspiration from the swarm distillation method proposed by Zhou et al. (2022b), we implement an unsupervised consistency regularization strategy that encourages the model's predictions for various paraphrases to converge.

\({}^{}\)**Swarm Distillation.** To construct the training data, we utilize the SFT set (10k prompts) from the alpaca-farm dataset, and collect paraphrases based on the strategy outlined in Section 3.1. For all prompts in any given case, we sample \(x_{i}\) and \(x_{j}\) from them and guide the output of \(x_{j}\) based on the model's output for \(x_{i}\), thereby training the model in an unsupervised manner. To devise an unsupervised model selection criterion, we define the following metric:

\[C(X,Y)=_{Y_{j} Y}_{i=1}^{N}(S_{ij}- })^{2}}\] (7)

\[S_{ij}=|}_{k=1}^{|Y_{j}|} P(Y_{j,k}|X_{i},Y_{j,<k})\] (8)

where \(}\) is the mean of \(S_{ij}\) over j. The value of \(C(X,Y)\) ranges from 0 to +\(\), reflecting the degree of consistency in the model's log confidence of generating outputs (\(Y\)) based on given instructions (\(X\)), with 0 indicating totally consistent. We obverse that the consistency always decreases at first, followed by increasing, which aligns with the findings in Zhou et al. (2022b). We train models based on LoRA and stop training at the checkpoint from which \(C(X,Y)\) starts to increase.

ResultsTable 4 presents several key findings: (_i_) Model performance significantly declines when subjected to self-refined prompts, as demonstrated by Llama-2-7/13/70B-chat model's average performance, which dropped by 10.04%, 13.15%, and 13.53%, respectively. This trend suggests that direct prompt engineering without reference to test data can lead to degraded model behaviors. (_ii_) When applying the voting method, the model's best performance significantly decreases, and the average performance may also be affected (a 6.71% drop for Llama-2-13b-chat). However, it effectively improves the worst performance, for instance, boosting the Llama-2-70B-chat model by 21.98, surpassing its average performance. We believe this method is particularly effective in scenarios where the lower bound of model performance is of concern. This is because, even when faced with a less-than-optimal prompt from the user, the paraphrasing-then-voting strategy can still deliver satisfactory results. However, this improvement comes at the cost of a several-fold increase in

  
**Method** & **Orig. Perf. \(\)** & **Worst Perf. \(\)** & **Best Perf. \(\)** & **Avg. Perf. \(\)** & **Standard Dev. \(\)** \\    \\  Raw & 25.61 & 5.42 & 43.54 & 19.52 & 13.32 \\ Self-refinement & 10.09(-15.52) & 1.05(-4.37) & 27.38(-16.16) & 9.48(-10.04) & 8.72(-4.60) \\ Voting & 22.35(-3.26) & 22.35(+16.93) & 22.35(-21.19) & 22.35(+2.83) & - \\ Distillation & 18.29(-7.32) & 3.89(-1.53) & 40.27(-3.27) & 19.31(-0.21) & 12.72(-0.60) \\   \\  Raw & 27.48 & 4.83 & 52.05 & 23.97 & 16.25 \\ Self-refinement & 12.02(-15.46) & 1.32(-3.51) & 31.40(-20.65) & 10.82(-13.15) & 10.46(-5.79) \\ Voting & 17.26(-10.22) & 17.26(+12.43) & 17.26(-34.79) & 17.26(-6.71) & - \\ Distillation & 25.90(-1.58) & 5.99(+1.16) & 47.78(-4.27) & 22.09(-1.88) & 14.30(-1.95) \\   \\  Raw & 32.23 & 9.38 & 54.86 & 29.18 & 15.61 \\ Self-refinement & 13.80(-18.43) & 1.02(-8.36) & 49.80(-5.06) & 15.65(-13.53) & 17.33(+1.72) \\ Voting & 31.36(-0.87) & 31.36(+21.98) & 31.36(-23.50) & 31.36(+2.18) & - \\ Distillation & 29.30(-2.93) & 7.99(-1.39) & 50.15(-4.71) & 26.44(-2.74) & 14.83(-0.78) \\   

Table 4: Model performance after prompt engineering (Self-refinement and Voting) and prompt consistency regularization (Distillation). The red numbers indicate a decrease in performance, while the green ones represent an improvement.

computational expense. (_iii_) While swarm distillation enhances the model's performance consistency, it unfortunately results in a decrease in overall performance. This is likely because the model is over-fitting to its self-generated outputs, which could introduce noise or be of lower quality than its original training data, thereby reducing the overall performance of the model.

## 6 Conclusion

In conclusion, this paper addressed a critical gap in understanding the robustness of LLMs to prompt variations. We introduced a new benchmark that shifts the focus from task-level instructions to case-level queries. Extensive experiments on ChatGPT and six open-source LLMs, revealed the substantial performance variability across different prompts, the challenge of predicting worst prompts, and the limited efficacy of existing methods for improving the worst prompts performance. Our findings underscored the importance of continued research into prompt robustness in more realistic settings. Despite the efforts, our study is not without limitations. The range of models we examined may not be extensive enough to capture a full spectrum of insights. Additionally, alternative approaches to pinpointing worst prompts could offer deeper understanding. We advocate for future studies to delve into these areas, enhancing our collective understanding.