# Mobilizing Personalized Federated Learning in Infrastructure-Less and Heterogeneous Environments via Random Walk Stochastic ADMM

Mobilizing Personalized Federated Learning in Infrastructure-Less and Heterogeneous Environments via Random Walk Stochastic ADMM

 Ziba Parsons

CIS Department

University of Michigan

Dearborn, MI

zibapars@umich.edu

&Fei Dou

School of Computing

University of Georgia

Athens, GA

fei.dou@uga.edu

&Houyi Du

CIS Department

University of Michigan

Dearborn, MI

houyidu@umich.edu

Zheng Song

CIS Department

University of Michigan

Dearborn, MI

zhesong@umich.edu

&Jin Lu

School of Computing

University of Georgia

Athens, GA

jin.lu@uga.edu

###### Abstract

This paper explores the challenges of implementing Federated Learning (FL) in practical scenarios featuring isolated nodes with data heterogeneity, which can only be connected to the server through wireless links in an infrastructure-less environment. To overcome these challenges, we propose a novel mobilizing personalized FL approach, which aims to facilitate mobility and resilience. Specifically, we develop a novel optimization algorithm called Random Walk Stochastic Alternating Direction Method of Multipliers (RWSADMM). RWSADMM capitalizes on the server's random movement toward clients and formulates local proximity among their adjacent clients based on hard inequality constraints rather than requiring consensus updates or introducing bias via regularization methods. To mitigate the computational burden on the clients, an efficient stochastic solver of the approximated optimization problem is designed in RWSADMM, which provably converges to the stationary point almost surely in expectation. Our theoretical and empirical results demonstrate the provable fast convergence and substantial accuracy improvements achieved by RWSADMM compared to baseline methods, along with its benefits of reduced communication costs and enhanced scalability.

## 1 Introduction

Federated Learning (FL) [1; 2; 3; 4] is a distributed machine learning paradigm that enables clients to learn a shared model without sharing their private data. Unlike traditional machine learning approaches that rely on central servers for model training, FL allows clients to collaborate and train the model in a distributed manner, overcoming privacy issues related to passing data to a central server. Despite its advancements, real-world applications in environments with insufficient network support continue to face challenges. a) Maintaining consistent and reliable connections between the central server and clients becomes exceedingly challenging in environments lacking network infrastructures, e.g., natural disasters or military warzones. While intermittent connectivity may be available through satellite networks, the instability and limited capacity of such networks prevent the transmission of large data volumes, making it difficult to collect model updates from soldiers or first responders. b) The non-IID (non-independent and identically distributed) nature of clients' data, characterized by heterogeneity across the network, can hinder the generalization of the global model for each client. Addressing these challenges is crucial for practical FL in such environments. In this paper, we propose RWSADMM, a novel FL scheme that uses Random Walk (RW) algorithm to enable server mobility among client clients. These dynamic approach benefits scenarios with limited internet connectivity, where clients form clusters using local short-range transmission devices.

For example, in various contexts such as robotics, emergency response, or military operations, consider a scenario where individuals or entities are equipped with integrated visual augmentation systems (IVAS) . To facilitate the collection of model updates from these entities, a mobile unit equipped with a powerful computer navigates the environment , communicating with locations through a network, which might be satellite-based or another suitable alternative. Upon reaching an entity, the mobile unit employs short-range communication technologies such as WiFi direct, Zigbee , or Bluetooth to establish connections with nearby IVAS devices. Through these connections, the unit collects model updates and distributes new models as necessary. A graph-based representation is utilized to determine the order of interactions, where entities are depicted as nodes, and the edge between an entity and its neighbor indicates that the neighbor is within the communication range of the unit that reaches the entity. This graph assists the mobile unit in making informed decisions about the order in which it engages with the entities.

Various applicable examples of such constrained network situations span across different domains, including ad hoc wireless learning , wildlife tracking , Internet of Underwater Things (IoUT) , natural disaster management , military operations , or fostering a digital democracy  which assists in overcoming restrictions imposed by regimes that prohibit internet access to civilians.

Specifically, to address challenge a), we propose an algorithmic framework called RWSADMM (Fig. 1), short for Random Walk Alternating Directional method of Multipliers, which considers a dynamic reachability graph among distributed clients using a movable vehicle as the central server. Clients are represented as nodes in the graph, with edges denoting neighborhood connections. Personal devices, referred to as local clients, establish dynamic connectivity with the server when the server is nearby. The server connects with a selected client and its neighbors while moving between locations using a non-homogeneous RW algorithm for probabilistic navigation. In each computation round, the vehicle broadcasts and gathers local model updates from residing clients, who rely on short-range communication to interact with the moving server, when it's within the communication range. The received updates are aggregated and used to update the global model iteratively.

To tackle the second challenge (b) arising from the heterogeneity of data distribution among clients, RWSADMM incorporates model personalization through local proximity among adjacent clients using hard inequality constraints, as opposed to unconstrained optimization with regularization techniques that may induce model bias. By formulating the problem with these constraints, RWSADMM reduces the computational complexity for clients, effectively mitigating the limitations of local computational power. This is achieved by designing the solver to the stochastic approximation of the minimization subproblem within the typical ADMM algorithm.

Figure 1: This illustration showcases the training process using the RWSADMM algorithm. A vehicle, serving as the mobile server, navigates between different clients using a random walk strategy. (a) In step \(k\), the server moves to client \(13\), covering the clients in \((13)\) for FL model training and completing the aggregation step. (b) In step \(k+1\), client 5 is selected, and the vehicle moves to client 5. The training and aggregation steps occur within the zone encompassing \((5)\).

Our research makes three main contributions. Firstly, our proposed RWSADMM algorithm is **the first attempt to enable mobilizing FL with efficient communication and computation in an infrastructure-less setting**. The RWSADMM framework involves a server dynamically moving between different regions of clients and receiving updates from one or a few clients residing in the selected zone, which reduces communication costs and enhances system flexibility. Secondly, to address the issue of data heterogeneity among clients, RWSADMM **formulates local proximity among adjacent clients based on hard inequality constraints, avoiding the introduction of model bias via consensus updates**. This approach provides an alternative realization of personalization, which is crucial when dealing with highly heterogeneous data distributions. Thirdly, to mitigate the computational burden on the clients, an efficient stochastic solver of the subproblem is designed in RWSADMM, which **provably converges to the stationary point almost surely in expectation** under mild conditions independent of the data distributions. Our theoretical and empirical results demonstrate the superiority of our proposed algorithm over state-of-the-art personalized Federated Learning (FL) algorithms, providing empirical evidence for the effectiveness of our approach.

## 2 Related Work

This paper is relevant to two distinct research areas, which are reviewed in two separate sections: FL frameworks that tackle data heterogeneity and ADMM-based FL frameworks.

**FL with data heterogeneity** FL was initially introduced as FedAvg, a client-server-based framework that didn't allow clients to personalize the global model to their local data . This led to poor convergence due to local data heterogeneity, negatively impacting the global FL model's performance on individual clients. Recent works proposed a two-stage approach to personalize the global model. In the first stage, the FL global model is trained similarly to FedAvg. However, the second stage is included to personalize the global model for each local client through additional training on their local data.  demonstrated that FedAvg is equivalent to Reptile, a new meta-learning algorithm, when each client collects the same amount of local data. To learn a global model that performs well for most participating clients,  proposed an improved version, Per-FedAvg. This new variant aims to learn a good initial global model that can adapt quickly to local heterogeneous data. An extension of Per-FedAvg, called pFedMe , introduced an \(_{2}\)-norm regularization term to balance the agreement between local and global models and the empirical loss.  proposed Ditto, a multi-task learning-based FL framework that provides personalization while promoting fairness and robustness to byzantine attacks. Ditto uses a regularization term to encourage personalized local models to be close to the optimal global model.  proposed to interpolate local and global models to train local models while also contributing to the global model. However, scaling these approaches can be challenging due to high communication costs, reliance on strong assumptions about network connectivity, or the requirement to compute second-order gradients. Additionally, there is a potential for enhancing the algorithms' overall performance.

**ADMM-based FL** The Alternating Direction Method of Multipliers (ADMM) is a widely recognized algorithm that effectively tackles optimization problems across multiple domains. In recent studies, ADMM has been successfully employed in distributed learning, as demonstrated by several works [26; 27; 28; 29; 30; 31; 32; 33]. In Federated Learning (FL) context, researchers have proposed various methods to address specific challenges. For handling falsified data in Byzantine settings,  introduced a robust ADMM-based approach. To mitigate local computational burdens in FL,  developed an inexact ADMM-based algorithm suitable for edge learning configurations. FL itself enables local training without the need to share personal data between clients and the server. Despite the advantages of FL, there is still a concern regarding clients' privacy. Analyzing the parameter differences in the trained models uploaded by each client can compromise their privacy. To tackle this issue,  proposed an inexact ADMM-based federated learning algorithm that incorporates differential privacy (DP) techniques . By leveraging DP, the algorithm enhances privacy protection during the FL process. These ADMM-based frameworks also have high communication costs, ranging from \(O(n)\) to \(O(n^{2})\) per iteration, depending on the network's density with \(n\) clients.  introduced a Proximal Primal-Dual Algorithm (Prox-PDA) to enable network nodes to compute the set of first-order stationary solutions collectively. Moreover, these algorithms do not account for data heterogeneity in their framework designs, leading to performance deterioration in such scenarios. The most similar algorithm to RWSADMM is called Walkman . Walkman is an ADMM-based framework utilizing the random walk technique for distributed optimization. InWalkman, the communication and computation costs are reduced by activating only one agent at each step. Compared to other ADMM-based approaches, including Walkman, RWSADMM has several distinctive features. RWSADMM leverages stochastic approximation to reduce computation costs per iteration and enforces hard inequality constraints instead of consensus to manage heterogeneous data, resulting in increased robustness. Additionally, RWSADMM considers the dynamic graph, allowing it to adapt to changing network conditions and potentially improve communication efficiency. RWSADMM also incorporates a hard constraint parameter \(\) to promote local proximity among clients instead of using a regularization term as Walkman does to promote client consensus. This approach better balances personalization and global optimization. Finally, while Walkman is fully distributed without server involvement, RWSADMM is a server-based approach in which the server aggregates information from a small group of clients in each computation round.

## 3 Random Walk Stochastic ADMM (RWSADMM)

Before delving into the specifics of the proposed algorithm, we present the key notation used throughout this research. \(^{d}\) represents a vector with length \(d\) and \(\) is defined as a vector with entries equal to 1 and \(^{l d}\) depicts a matrix with \(l\) rows and \(d\) columns. \([]_{i}\) represents the \(i\)th element of vector \(\) and \([]_{ij}\) is the \((i,j)\)th element of matrix \(\). \([]_{i}\), \([]^{j}\) represent the \(i\)th row and \(j\)th column of matrix \(\), respectively. \(( f())_{j}\) is used to denote the \(j\)th entry of the gradient of \(f()\). The inner product of \(A\) and \(B\) is shown as \( A,B\). \(_{t}[.]\) indicates the expectation given the past \(_{1},,_{t-1}\). \(\) represents the Hadamard product/element-wise product and \(\) represents the Kronecker product between two matrices. Finally, Norm p of vector \(\) is denoted as \(||||_{p}^{p}=_{i=1}^{d}|x_{i}|^{p}\), \(^{d}\) and Frobenius norm of matrix \(\) is written as \(\|\|_{F}=^{n}_{j=1}^{m}|x_{ij}|^{2}}\).

Let us first define our Mobilizing FL problem. Mobilizing FL, which involves a mobile server, can be formulated as an optimization problem on a connected graph \(}=(,)\). The graph comprises a set of \(n\) clients, represented as \(=v_{1},v_{2},,v_{n}\), and a set of \(m\) edges, denoted as \(\). The objective is to minimize the average loss function across all clients while adhering to inequality constraints that ensure local proximity among the clients' respective local models. The optimization problem can be formulated mathematically as follows:

\[_{_{i,n}^{p}}_{i=1}^{n}f_{i}( _{i}) s.t.|_{i}-_{j}| _{i}, i\{1,,n\}, j(i)/v_{i}.\] (1)

where \(f_{i}(_{i})\) represents the local loss function with the model parameter as \(_{i}\) for the client \(i\), the vertex set \((i)\) contains client \(i\) and its neighboring clients, and \(_{i}\) is the non-consensus relaxation between local neighboring clients to replace model consensus requirement in typical FL. In our proposed FL method, we model the server's movement as a dynamic Markov Chain, introducing a dynamic element to the traditional ADMM-based approach. This work is the first to consider a dynamic mobile server within the ADMM-based FL framework. In RWSADMM, client-server communication occurs only when the server is close to a client. The sequence of client indices that are updated, denoted as \(i_{k}\), evolves based on a non-homogeneous Markov Chain with a state space of \(1,,n\). To describe the transition dynamics of the Markov Chain, we employ the non-homogeneous Markovian transition matrix \((k)\), which represents the probabilities of transitioning between clients at time \(k\). Specifically, the conditional probability of selecting client \(j\) as the next client, given that client \(i\) is the current client, is defined as:

\[[(k)]_{i,j}=Pr\;\{i_{k+1}=j|i_{k}=i\}\] (2)

Additionally, it is assumed that the server determines the probability of all possible locations for its next destination based on the transition matrix \((k)\) at time \(k\). This provides a probabilistic approach to server navigation, allowing it to move around the network more effectively. To guarantee convergence, RWSADMM depends on the frequency of revisiting each agent. This quality is described by the _mixing time_ of the algorithm. An assumption for the mixing time is as follows:

**Assumption 3.1**.: The random walk \((i_{k})_{k 0},v_{i_{k}}\) forms an irreducible and aperiodic (ergodic) Markov Chain with transition probability matrix of \((k)^{n n}\) defined in Eq. (2) and stationary distribution \(\) satisfying \(_{k}^{T}(k)=^{T}\). The mixing time (for a given \(>0\)) is defined as the smallest integer \(()\) such that \( i V\),

\[\|[(k)^{()}]_{i}-^{}\| _{}\] (3)where \(_{*}:=_{i}_{i}\). This inequality states the fact that regardless of the current state \(i\) and time \(k\), the probability of visiting each state \(j\) after \(()\) steps is \((_{*})\)-close to \(_{j}\), that is, \( i,j\),

\[\|[(k)^{()}]_{ij}-_{j}\| _{*}\] (4)

Eq. (4) is used to prove the sufficient descent of a Lyapunov function \(L_{}\) in Section 3.1. Let's also define

\[_{max}=_{k=}\{||_{ij}=_{k}[ (k)]_{ij}\},\] (5)

from which one can further obtain \(\|(k)\|\|_{max}\|\) for all \(k\). Namely, the matrix \(P_{max}\) is computed as the element-wise maximum matrix among all the matrices \(P(k)\), for \(k=0,,\). Therefore, the mixing time requirement in Eq. (3) is guaranteed to hold for

\[()=)}}{ _{*}}}{{}}_{max})}}{_{*}}\] (6)

where \(():=\{\|f^{T}\|/\|f\|:f^{T} =0,f^{n}\}\). Using Eq. (5), we have \(,\ ()()_{max}\) and the inequality \((a)\) can be inferred.

### Algorithm

In this section, we derive RWSADMM by integrating random walk and stochastic inexact approximation techniques into ADMM. Considering \(:=row(_{1},_{2},,_{n}) ^{p n},\ F():=_{i=1}^{n}f_{i}(_{i})\), where the operation \(row(.)\) refers to row-wise stacking of vectors \(_{i}\)'s. The mobilizing FL problem (1) can be expressed as:

\[_{_{1:n},}\ F()\ | _{i}-_{(i)}|_{i}/2, i=1,,n\] (7)

where \(=[1\ 1\ 1 1]^{n_{i}}\), \(n_{i}\) denotes the volume of the vertex set \((i)\). The constraint implies that \(|_{i}-_{j}|_{i}\), \( i=1 n\) and \( j(i)\) through the triangle inequality. \(_{i}\) stored on the server is necessarily introduced as a local proximity of \((i)\). We can obtain the augmented Lagrangian for problem (7)

\[L_{}(_{1:n},,_{1:n})= [F()+_{i=1}^{n}_{i },|_{i}-_{(i)}|- _{i}+_{i=1}^{n}\|\| _{i}-_{(i)}\|-_{i}\|_{F}^{2}]\] (8)

where \(_{i}=_{i}/2\) and \(_{i}^{n_{i}p}\) are the dual variable and \(>0\) is the barrier parameter. The RWSADMM algorithm minimizes the augmented Lagrangian \(L_{}(_{1:n},,_{1:n})\) in an iterative manner. At each iteration \(k\), only a subset of clients covered by the mobilized server, the clients in \((i_{k})\), participate in the federated update. The following updates are performed:

\[_{i_{k}}=\ _{_{i_{k}}}L_{}(^{}_{ i_{k}},_{i_{k}},^{}_{i_{k}}),\ \ \ _{i_{k}}=_{_{i_{k}}}L_{}(_{i_{k}}, _{(i_{k})},^{}_{(i_{k})}),\]

where \(^{}_{i_{k}},_{i_{k}}\), and \(^{}_{i_{k}}\) denote the groups of variables of the local parameters stored by client \(i_{k}\) at the \((k-1)th\) update. After solving these subproblems, we update the multiplier \(_{i_{k}}\) as follows:

\[_{i_{k}}= ^{}_{i_{k}}+(|_{i_{k}}- _{i_{k}}|-_{i}),\]

Next, we derive the solver of each subproblem. The three steps are noted as Updating \(_{i_{k}}\), Updating \(_{i_{k}}\), and Updating \(_{i_{k}}\).

\[\ _{i_{k}}\ \ \ \ _{_{i_{k}}}[f_{i_{k}}( _{i_{k}})+^{}_{i_{k}},|^{ }_{i_{k}}-_{i_{k}}|-_{i_{k}} +\|^{}_{i_{k}}-_{i_{k}}\|- _{i_{k}}\|_{2}^{2}]\] (9)

The Problem (9) can be solved iteratively, consuming significant computational resources for the local clients. Furthermore, the computational complexity increases as the local dataset grows, as is often true in real-world applications. By utilizing the stochasticity and first-order subgradient expansion, we arrive at a more computationally efficient approximation of the original problem in Eq. (10).

\[_{_{i_{k}}}[g_{i_{k}}(^{}_{i_{k}},_{i_{k}})(_{i_{k}}-^{}_{i_{k}})+ ^{}_{i_{k}},|^{}_{i_{k}}-_{i_{k}} |-_{i_{k}}+\|^{ }_{i_{k}}-_{i_{k}}\|_{2}^{2}]\] (10)

In Eq. (10), \(_{i_{k}}\) denotes one or a few samples randomly selected by client \(i_{k}\) from its feature set and their ground truth labels in pairs at the \(k\)-th iteration. The function \(g_{i_{k}}(^{}_{i_{k}},_{i_{k}})\) is defined as the stochastic gradient of \(f_{i_{k}}(^{}_{i_{k}})\) at \(^{}_{i_{k}}\). The stochastic approximation can tremendously reduce memory consumption and save computational costs in each iteration. By setting the subgradient of the objective function in Eq. (10) to zero, we can derive the closed-form solution in Eq. (11).

\[_{i_{k}}=^{}_{i_{k}}+^{ }_{i_{k}} sgn(^{})-sgn(^{ })(_{i}+g_{i_{k}}(^{}_{i_{k}}, _{i_{k}}))=^{}_{i_{k}}+sgn( ^{})(^{}_{i_{k}}-_{i}-g_{i_{k}}(^{}_{i_{k}},_{i_{k}}))\] (11)

where the signum function \(sgn()\) extracts the signs of a vector and \(^{}_{i_{k}}=^{}_{i_{k}}-^{}_{ i_{k}}\).

Updating \(_{i_{k}}\): We solve the following problem

\[_{_{i_{k}}}_{(i_{k})},| _{i_{k}}-_{(i_{k})}|- _{i_{k}}+\| _{i_{k}}-_{(i_{k})}|- _{i_{k}}\|_{F}^{2}\] (12)

one can readily derive a closed-form solution for the problem (12) as:

\[_{i_{k}}=}}_{j_{i_{k}}} _{i_{k}}-(_{i_{k}}}{}+_ {i_{k}}) sgn(_{i_{k}})\] (13)

where \(_{i_{k}}=^{}_{i_{k}}-_{i_{k}}\) is similar to that of Eq. (11) except the updated \(\). Specifically, via mathematical induction, we can attain the new updated form of \(_{i_{k}}\) below, which can also reduce the communication cost from \(O(n)\) to \(O(1)\):

\[_{i_{k}}=\] (14)

Updating \(_{i_{k}}\): The Lagrangian multiplier \(_{i_{k}}\) can be updated strictly following the standard ADMM scheme below:

\[_{i_{k}}=^{}_{i_{k}}+_{i _{k}}-^{}_{i_{k}}-_{i_{k}}\] (15)

The \(\) coefficient used in Eq. (15) is decayed in each process step to achieve better convergence.

Please refer to Appendix A for the entire RWSADMM algorithm framework.

## 4 Theoretical Analysis

In this section, we present the theoretical convergence guarantee of RWSADMM. To ensure its convergence, certain common assumptions are made regarding the properties of the loss functions. The assumptions are as follows:

**Assumption 4.1**.: The objective function \(f()\) is bounded from below and coercive over \(^{p}\), that is, for any sequence \(\{^{k}\}_{k 0}^{p}\),

\[\|^{k}\| _{i=1}^{n}f_{i}()\] (16)

**Assumption 4.2**.: The objective function \(f_{i}()\)'s are L-smooth, that is, \(f_{i}\) are differentiable, and its gradients are L-Lipschitz, that is, \(,^{p}\),

\[\| f_{i}()- f_{i}()\| L\|- \|,\ \  i=1,,n\] (17)

Remark: In consequence it also holds that \(,^{p}\)

\[f_{i}()-f_{i}() f_{i}()^{T}(-)+\|-\|^{2},\ \  i=1,,n.\] (18)

**Assumption 4.3**.: The objective function \(f\) is M-Lipschitz, that is, \(,^{p}\),

\[|f()-f()| M\|-\|\] (19)

**Assumption 4.4**.: The first-order stochastic gradient is sampled, which returns a noisy but unbiased estimate of the gradient of \(f\) at any point \(^{p}\), that is, \(^{p}\),

\[_{}[g(,)]= f()\] (20)

Remark: Substituting Eq. (20) into Eq. (17), one can obtain that for \(i=1,,n\), we have

\[\|_{}[g(,)]-_{}[g(,)]\|  L\|-\|\] (21)

Substituting Eq. (20) into Eq. (18), for \(i=1,,n\), we can obtain

\[f_{i}()-f_{i}()_{}[g(,)]^{T} (-)+\|-\|^{2},\] (22)

**Assumption 4.5**.: The noise variance of the stochastic gradient is bounded as:

\[_{}(\| f()-g(,)\|^{2})(1), { for all }.\] (23)

This condition bounds the expectation of \(\| f(_{t})-g(_{t},_{t})\|^{2}\). Using Jensen's inequality, this condition implies a bounded variance .

We revisit the related crucial properties of the Markov Chain. The first time that the Markov Chain \((i_{k})_{k 0}\) hits agent \(i\) is denoted as \(T_{i}:=\{k:i_{k}=i\}\), and maximum value of \(T\) over all clients is defined as \(T:=\{T_{1},,T_{n}\}\). For \(k>T\), let \((k,i)\) denote the iteration of the last visit to agent \(i\) before \(k\), mathematically we have

\[(k,i)=\{k^{}:i_{k^{}}=i,k^{}<k\}.\] (24)

To prove the convergence of our proposed algorithm, two Lyapunov functions defined for RWSADMM are required to be investigated:

\[L_{}^{k}:=L_{}(^{k},^{k};^{k}),\ \ M_{}^{k}:=L_{}^{k}+}{n}_{i=1}^{n}\|_ {i}^{(k,i)+1}-_{i}^{(k,i)}\|^{2}\] (25)

where \(L_{}(^{k},^{k};^{k})\) is defined in Eq. (8). The \(M_{}^{k}\) is utilized in the convergence analysis. To guarantee the convergence of our algorithm, first, we refer to the asymptotic analysis of the nonhomogeneous Markov chain presented in . Define \((k,l)\) with \(k l\) as the product of the transition probability matrices for the Markov chain from time \(l\) to \(k\), i.e., \((k,l)=(k)(l)\) with \(k l\). Then we have the following convergence result:

**Lemma 4.6**.: Consider

1. \( s\), \(_{k}(k,l)=^{T}\).
2. The convergence of \(\) is geometric and the rate of convergence considering \( k,l,\) with \(k l 0\), is given by \[|[(k,l)]_{i,j}-|(1-})^{-2}\] (26)

Using Lemma 4.6, the convergence analysis of the algorithm is as follows.

**Lemma 4.7**.: Under Assumptions 4.1 and 4.2, if \(>2L^{2}+L+2\), \((M_{}^{k})_{k 0}\) is lower bounded and convergent, the iterates \((^{k},^{k},^{k})_{k 0}\) generated by RWSADMM is bounded.

The proof sketch and the detailed convergence proof are presented in Appendix B. Using Lemma 4.7 and B.6, we can present the convergence of RWSADMM in Theorem 4.8.

**Theorem 4.8**.: _Let Assumption 4.5 hold. For \(>2L^{2}+L+2\), it holds that any limit point \((^{*},^{*},^{*})\) of the sequence \((^{k},^{k},^{k})\) generated by RWSADMM satisfies \(^{*}=}^{*},\ i=1,,n\) where \(^{*}\) is a stationary point of Eq. (7), with probability \(1\), that is,_

\[Pr0_{i=1}^{n}f_{i}(^{*}) =1\] (27)

_If the objective function of Eq. (7) is convex, then \(^{*}\) is a minimizer._

Next, Theorem 4.9 further presents that the algorithm converges sublinearly. This is comparable to the convergence rate of other FL methods , but the existing methods didn't consider the dynamic graph and infrastructure-less environment. The detailed proof is offered in Appendix C.

**Theorem 4.9**.: _Under Assumptions (3.1), (4.1), and (4.2), with given \(\) in Lemma 4.7, and local variables initiated as \(f_{i}(_{i}^{0})=_{i}^{0}=_{ i}^{0}, i\{1,,n\}\), there exists a sequence \(\{g^{k}\}_{k 0}\) with \(\{g^{k}\} L_{}^{k+1}\) satisfying_

\[}g^{k}^{2} {K}(L_{}^{0}-), K>()+2\] (28)

_where \(C\) is a constant depending on \(\), \(L\), and \(\), \(n\), and \(()\)._

**Communication Complexity** Using Theorem 4.9, the communication complexity of RWSADMM for nonconvex nonsmooth problems is as follows. To achieve ergodic gradient deviation \(E_{t}:=}g^{k}^{2}\) for any \(K>()+2\), it is sufficient to have\[(L_{}^{0}-f)}{{ }}K O.+1}{(1- )n_{*}}\] (29)

(a) is achieved by taking \(L_{}^{0}\) and \(f\) as constants and independent of \(n\) and the network structure.

Using the \(()\) definition from (6), by setting \(=1/2\) and assuming the reversible Markov chain with \(P(k)^{T}=P(k)\), the communication complexity is

\[O.n}{(1-_{2}((k)))^{2}} \] (30)

#### 4.2.2 Communication Comparison

Among the baseline frameworks, Per-FedAvg  and APFL  have addressed the communication complexity of their respective frameworks. By assuming that Assumption 3.1 holds and utilizing Eq. (30), we can determine the communication complexity of RWSADMM as \(O(^{-1})\) for \(K\) iterations. In comparison, Per-FedAvg exhibits a higher communication complexity of \(O(^{-3/2})\). In the case of APFL, all clients are assumed to be used in each computation round to ensure convergence in nonconvex settings. The communication complexity of APFL is determined as \(O(n^{3/4}^{-3/4})\), where \(n\) represents the total number of clients. Consequently, when \(n\) is large, APFL exhibits a significantly higher communication rate than RWSADMM. Overall, the communication complexity analysis suggests that RWSADMM offers superior scalability and communication efficiency compared to existing methods.

## 5 Experimental Results

#### 5.0.1 Setup

We evaluate the performance of RWSADMM using heterogeneous data distributions. All the experiments are conducted on a workstation with Threadripper Pro 5955WX, 64GB DDR4 RAM, and NVidia 4090 GPU. All frameworks are performed on standard FL benchmark datasets (MNIST , Synthetic , and CIFAR10 ) with 10-class labels and convex and non-convex models. Multinomial logistic regression (MLR), multilayer perceptron network (MLP), and convolutional neural network (CNN) models are utilized for strongly convex and two non-convex settings, respectively. We create a moderately dynamic connected graph of randomly placed nodes where each node has at least \(5\) neighboring nodes at \(k\)-th update. We set the probability transition matrix \((k)\) as \([(k)]ij=1/deg(i_{k})\) and set up the experiments for \(N=20\) clients with a regeneration frequency of 10 steps for the dynamic graph. The data is split among clients using a pathological non-IID setting. The data on each client contains a portion of labels (two out of ten labels), and the allocated data size for each client is variable. For the Synthetic data, we use the same data generative procedures of  with 60 features and 100 clients. All local datasets are split randomly with \(75\%\) and \(25\%\) for training and testing, respectively. The models' details, the rationale behind graph construction, and hyperparameter tuning for \(\), \(\), and selected \(\) value are further described in Appendix D.

#### 5.0.2 Performance Comparison

The performance of RWSADMM is compared with FedAvg  as a benchmark and several state-of-the-art personalized FL algorithms such as Per-FedAvg , pFedMe , APFL , and Ditto . The test accuracy and training loss for the MNIST dataset is depicted in Fig. 2. (Synthetic and CIFAR10 figures are presented in Appendix D). Test accuracy and time cost for all the datasets are reported in Table 1.

The test accuracy progress curves of RWSADMM for all the models (2a-2c) have a significantly faster convergence. For the non-convex models (2b), RWSADMM reaches convergence after 200 iterations, while the rest of the algorithms, except Ditto, work toward convergence until 600 iterations. The performance curves are shown for 100 iterations for consistency. When tested on MNIST with MLP, RWSADMM demonstrated comparable performance against pFedMe. In the test on Synthetic data with MLR models, RWSADMM exhibited a significant advantage over the other methods, with an improved margin of \(14.95\%\). Regarding computational efficiency, RWSADMM is slower than FedAvg and Per-FedAvg, but faster than pFedMe. Furthermore, RWSADMM converges in fewer iterations (200 iterations) than pFedMe (600 iterations). RWSADMM is also run for more extensive networks with 50 and 100 nodes as a separate set of experiments. The performance comparison results and diagrams are also in Appendix D.

## 6 Conclusion and Future Work

This study proposes a novel approach called RWSADMM, designed for systems with isolated nodes connected via wireless links to the mobile server without relying on pre-existing communication infrastructure. The algorithm enables the server to move randomly toward a local client, establishing local proximity among adjacent clients based on hard inequality constraints, addressing the challenge of data heterogeneity. Theoretical and experimental results demonstrate that RWSADMM is fast-converging and communication-efficient, surpassing current state-of-the-art FL frameworks. This study primarily focuses on the methodological framework for RWSADMM. Future research directions should explore essential techniques such as incorporating differential privacy techniques and examining scalability in more extensive network and dataset scenarios. Further investigation is needed to assess the implementation in physical networks and evaluate the effect of communication delays in the real world.

   &  &  \\   &  &  &  &  &  \\   & acc(\%) & t(s) & acc(\%) & t(s) & acc(\%) & t(s) & acc(\%) & t(s) \\  FedAvg & \(83.96 0.022\) & \(128\) & \(98.79 0.03\) & \(155\) & \(97.83 0.15\) & \(265\) & \(77.62 0.11\) & \(592\) & \(83.64 0.22\) & \(680\) \\ PerAvg & \(94.37 0.04\) & \(154\) & \(98.90 0.02\) & \(203\) & \(98.97 0.08\) & \(243\) & \(81.49 0.00\) & \(267\) & \(85.01 0.10\) & \(269\) \\ pFedMe & \(95.62 0.04\) & \(448\) & \(\) & \(699\) & \(99.05 0.06\) & \(541\) & \(83.20 0.06\) & \(254\) & \(86.36 0.15\) & \(1413\) \\ Ditto & \(97.37 0.02\) & \(276\) & \(97.79 0.03\) & \(423\) & \(99.02 0.11\) & \(327\) & \(86.24 0.03\) & \(72\) & \(85.26 0.10\) & \(79\) \\ APFL & \(92.64 0.03\) & \(304\) & \(97.74 0.02\) & \(533\) & \(85.85 0.03\) & \(593\) & \(83.40 0.04\) & \(95\) & \(82.52 0.15\) & \(111\) \\ RWSADMM (our method) & \(\) & \(167\) & \(\) & \(295\) & \(\) & \(3857\) & \(\) & \(473\) & \(\) & \(692\) \\   &  \\   &  &  &  \\   & acc(\%) & t(s) & acc(\%) & t(s) & acc(\%) & t(s) & t(s) \\  FedAvg & \(40.84 0.01\) & \(160\) & \(41.02 0.05\) & \(69\) & \(38.65 0.05\) & \(78\) \\ PerAvg & \(47.43 0.09\) & \(192\) & \(60.25 0.07\) & \(253\) & \(83.52 0.01\) & \(800\) \\ pFedMe & \(67.53 0.34\) & \(515\) & \(78.12 0.38\) & \(340\) & \(83.56 0.05\) & \(3480\) \\ Ditto & \(75.22 0.01\) & \(225\) & \(81.87 0.13\) & \(259\) & \(83.86 0.02\) & \(2189\) \\ APFL & \(75.17 0.32\) & \(50\) & \(78.00 0.18\) & \(55\) & \(66.23 0.03\) & \(702\) \\ RWSADMM (our method) & \(\) & \(131\) & \(\) & \(253\) & \(\) & \(3759\) \\  

Table 1: Performance comparisons of FedAvg, Per-FedAvg, pFedMe, Ditto, APFL, and RWSADMM frameworks on MNIST, Synthetic, and CIFAR10 datasets. Three models are utilized for each dataset, and each model’s converged accuracy (%) and time consumption (seconds) are reported. Each configuration is executed for ten iterations, and variance is calculated to compute the degree of confidence for test accuracy rates.

Figure 2: Performance comparison (test accuracy and training loss) of RWSADMM, pFedMe, Per-Avg, FedAvg, APFL, and Ditto for MNIST dataset for the MLR (2a, 2d), MLP (2b, 2e), and CNN (2c, 2f) models. The first 100 iterations are plotted to show the convergence progress better.

Acknowledgement

This research was partially supported by the NSF 2122309 and NSF 2104337.