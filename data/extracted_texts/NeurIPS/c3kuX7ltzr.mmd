# FORB: A Flat Object Retrieval Benchmark for

Universal Image Embedding

 Pengxiang Wu, Siman Wang, Kevin Dela Rosa, Derek Hao Hu

Snap Inc.

{pwu,swang7,kevin.delarosa,hao.hu}@snap.com

###### Abstract

Image retrieval is a fundamental task in computer vision. Despite recent advances in this field, many techniques have been evaluated on a limited number of domains, with a small number of instance categories. Notably, most existing works only consider domains like 3D landmarks, making it difficult to generalize the conclusions made by these works to other domains, \(e\)._g_., logo and other 2D flat objects. To bridge this gap, we introduce a new dataset for benchmarking visual search methods on flat images with diverse patterns. Our flat object retrieval benchmark (FORB) supplements the commonly adopted 3D object domain, and more importantly, it serves as a testbed for assessing the image embedding quality on out-of-distribution domains. In this benchmark we investigate the retrieval accuracy of representative methods in terms of candidate ranks, as well as matching score margin, a viewpoint which is largely ignored by many works. Our experiments not only highlight the challenges and rich heterogeneity of FORB, but also reveal the hidden properties of different retrieval strategies. The proposed benchmark is a growing project and we expect to expand in both quantity and variety of objects. The dataset and supporting codes are available at https://github.com/pxiangwu/FORB/.

## 1 Introduction

Image retrieval is a fundamental and long-standing task in computer vision. Given a query image, this task aims to search for the most similar images from a large database. Recent methods have achieved remarkable performance on certain domains, such as 3D landmark  and clothes . To perform image retrieval, the prevailing practice is to map the query image into a compact embedding space, where similar images are close to each other while dissimilar ones are separated away. This embedding space can be handcrafted and one classic design is the Bag of Words (BoW) . A more effective idea is to learn the embedding automatically, based on deep neural netowrks . However, all these methods have only been evaluated on a limited number of domains (_e_.\(g\)., 3D landmarks), and as a result, it remains unclear if the embedding of one method is more general than the others. In particular, for learning-based methods, since they are usually trained on a specific restricted dataset with limited object classes (_e_.\(g\)., ImageNet  and Open Images ), their feature embeddings could be not universal enough to generalize to various open-world objects. Therefore, it is necessary to have benchmarks supplementary to the existing ones for a more comprehensive evaluation of the embeddings, especially in terms of their out-of-distribution (OOD) generalization ability.

In particular, existing image retrieval benchmarks mainly involve domains of 3D objects. Examples of the commonly considered objects include 3D landmarks, clothes, natural living things and online products. While many recent benchmarks that curate the images of these objects have sufficiently large query image sets, they are typically limited to a small number of object categories or instances. Moving beyond 3D objects, there are several datasets focusing on 2D flat objects. However, thesedatasets are mostly small in size and related to one particular type of object, _i.e_., logo . Besides, their query images tend to be in canonical pose without much distraction from the background, making the retrieval less challenging.

In order to fill the domain gap of existing benchmarks and to encourage future research in this area, we present a Flat Object Retrieval Benchmark (FORB) which contains diverse flat objects with different query difficulties. The flat objects are those with 2D surface only, which bears the textures and patterns of the object (_e.g_., painting and logo; see Figure 1). Despite being one dimension less than 3D objects, such flat surfaces still pose many challenges for image retrieval. In particular, there can be large variations between the query and database images, due to surface and color distortions, perspective transformation, view occlusion, and illumination change. Our benchmark takes into account all these challenges and covers objects with a variety of textures (see Section 3). Notably, these objects are common in daily life and our benchmark could benefit diverse real-world visual search applications, such as recognizing logos for brand promotion, augmenting artwork exhibits in a museum, online shopping and more.

To understand how different image embeddings perform on our benchmark, we evaluate the retrieval accuracy from two perspectives: (1) Candidate rank, which corresponds to the sorted order of database images based on their similarities to the query image. The correctness of ranks reflects the discriminative ability of image embedding and can be measured with mean Average Precision (mAP). (2) Matching score margin. For a query image, ideally its matching scores against ground-truth database images should be high (_e.g_., assuming cosine similarity), while the scores against non-relevant images should be low. Therefore, the degree of compliance with this ideal margin also delineates the quality of image embedding, a viewpoint which is largely ignored by previous works. To measure this margin, we propose to query the given image against distractor images, giving _false positive_ candidates. By thresholding the matching scores, we can compute a specific false positive rate (FPR) and an updated mAP, which together quantify the margin of image embeddings. In particular, an ideal embedding should have a low FPR while keeping a high mAP.

To establish baselines on our benchmark, we evaluate a series of representative methods, including both learning-based models and handcrafted designs. Our results reveal intriguing properties of

Figure 1: Example database and query images from our FORB benchmark. For each query image, we show its corresponding index image and the retrieval difficulty. The images are from different content domains: (a)(b) photorealistic trading card; (c)(d) book cover; (e)(f) painting; (g)(h) logo; (i)(j) packaged goods; (k)(l) movie poster; (m)(n) animated trading card; (o)(p) currency.

embeddings built from different feature levels. Specifically, we show that even a model is trained on 3D objects, its embedding induced from low- or mid-level image features can still be universal enough to distinguish diverse flat objects. Moreover, for feature-scarce images, embeddings based on high-level features tend to achieve better accuracy.

Our contributions include: (1) We introduce FORB, a new visual search benchmark for evaluating image embeddings on flat objects. FORB supplements the commonly used 3D object benchmarks and essentially provides a platform for assessing the OOD generalization ability of an embedding method. (2) We propose a new evaluation metric motivated by matching score margin. This metric is complementary to mAP and offers a new perspective on image embedding quality. (3) We conduct comprehensive comparisons for different representative methods, providing solid baselines for future method developments. (4) Our evaluation results reveal the hidden properties of different retrieval strategies as well as their limitations, providing insights into the development of new techniques.

## 2 Related Work

### Existing Datasets and Benchmarks for Image Retrieval

There has been a long history of developing benchmarks for image retrieval. For example, to promote research in instance-level recognition and search, Oxford  and Paris  datasets were introduced and have motivated a wealth of innovations in this field. With a similar motivation, researchers curated CUB  and Cars196  to facilitate fine-grained object matching. Despite the popularity of these datasets, they are small in size and only involve a limited number of instances and categories. To further enrich the object domains for image retrieval and increase the size and complexity of the task, several more challenging datasets were constructed, such as SOP , DeepFashion , VehicleID , iNaturalist , and Google Landmarks dataset v2 (GLDv2) . In particular, GLDv2 has gained widespread attention since being introduced due to its significant scale and variability, and serves as a solid benchmark for testing emerging retrieval techniques.

One limitation of these datasets is that they only focus on the task of 3D object retrieval, involving a restricted number of object domains (_e.g._, 3D landmarks). In fact, compared to 3D objects, there exist few benchmarks on other domains, especially 2D flat objects. In real-world visual search applications, flat objects also make up a large fraction of queries. However, there are only few benchmarks on such objects and most of them are for logo [41; 45]. To fill this domain gap, our FORB benchmark includes a variety of flat objects and supplements existing 3D object benchmarks. In particular, FORB effectively serves as an OOD query set for evaluating the embeddings trained on 3D objects. In Table 1 we compare FORB against existing image retrieval datasets in detail.

It is worth mentioning that there exists another similar benchmark for assessing the generalization abilities of image embeddings, _i.e._, Google Universal Image Embedding Challenge1. However, this benchmark mainly involves 3D objects and its evaluation data is kept private. We believe our FORB

  Dataset & Domain & \# Query & \# Database & Has distractor & Has difficulty label \\  Oxford  & 3D landmark & 55 & 5K & ✗ & ✗ \\ Paris  & 3D landmark & 55 & 6K & ✗ & ✗ \\ \(\)-Oxford  & 3D landmark & 70 & 5K + 1M & ✓ & ✓ \\ \(\)-Paris  & 3D landmark & 70 & 5K + 1M & ✓ & ✓ \\ GLD  & 3D landmark & 118K & 1.1M & ✓ & ✗ \\ GLDv2  & 3D landmark & 118K & 762K & ✓ & ✗ \\ CUB  & Bird & 6K & 6K & ✗ & ✗ \\ Cars196  & Car & 8K & 8K & ✗ & ✗ \\ SOP  & 3D product & 60K & 60K & ✗ & ✗ \\ DeepFashion  & Clothes & 14K & 13K & ✗ & ✗ \\ VehicleID  & Vehicle & 35.6K & 4.8K & ✗ & ✗ \\ iNaturalist  & Plant \& Animal & 136K & 136K & ✗ & ✗ \\  FlickrLogos  & Flat object (logo) & 4K & 320 & ✓ & ✗ \\  FORB & Flat object & 14K & 54K & ✓ & ✓ \\  

Table 1: Comparison of our benchmark against existing image retrieval datasets.

supplements this benchmark and will facilitate the development of visual search applications, such as organizing photo collections, visual commerce and more.

### Out-of-Distribution Query

Most existing benchmarks only have "on-topic" queries without considering the out-of-distribution ones. As a result, they fail to present real-world challenges and are not enough to fully evaluate the quality of an image embedding. Notably, in a generic visual search app, the system tends to be queried with a large number of irrelevant queries, _i.e_., OOD queries, for which it is expected to not yield any results. Therefore, OOD queries provide an additional important view into the robustness of image embeddings. This issue of lacking OOD queries in existing benchmarks was recognized in GLDv2  and addressed with plenty of non-landmark queries. In practice, to assess the discriminative ability of image embeddings between true positive and false positive candidates, GLDv2 employs micro Average Precision (\(\)AP), which both measures ranking performance and penalizes false positive predictions. Our FORB benchmark shares a similar motivation to GLDv2, but with a few key differences: (1) We do not provide additional OOD queries with respect to the database images. Instead, we split database into index images and distractors, and query the images against distractors. In this way we effectively turn all the query images into OOD queries. (2) Instead of using \(\)AP, we propose a new metric, \(t\)-mAP, which computes an averaged mAP over different confidence thresholds. The thresholds are determined through quantiles of false positive rates. Compared to \(\)AP and mAP, our \(t\)-mAP takes into account the matching score margin, which directly reflects the discriminability of image embeddings.

### Universal Image Embedding

The quality of image embeddings determines the performance of modern image retrieval methods. Based on the design of image features, existing embeddings can be divided into two categories: handcrafted and learning-based. The former one builds image embeddings based on handcrafted low-level features (_e.g_., SIFT ), using a bag of words (BoW). This design paradigm dominates many classic methods, such as [34; 27; 2; 18; 44], and usually leads to embeddings that generalize well over various domains. With the rapid advancement of deep learning, such handcrafted embeddings have been replaced with the learning-based ones in the community. The learning of image embeddings is commonly conducted in a supervised manner, on crowd-labeled datasets [15; 17; 16; 10]. However, supervised learning is not scalable since manual annotation of large-scale training data is time-consuming and costly. As a result, the training data usually contains limited pre-defined object classes (_e.g_., ImageNet  and Open Images ), and embeddings learned from these data are not universal enough to generalize to various open-world objects . In recent years, self- and weakly-supervised learning have gained extensive attention due to their less reliance on labeled data. By designing appropriate pre-text tasks and training strategies (_e.g_., image-text matching), these learning paradigms can easily leverage a large number of unlabeled or noisy data, producing image embeddings of greater generality than supervised learning [14; 13; 7; 6; 12; 40; 19].

## 3 The FORB Benchmark

Our FORB benchmark only provides testing query images without training data. It serves as a testbed supplementary to existing benchmarks, with the following goals.

GoalsOur proposed benchmark aims to enrich the object domains considered in image retrieval tasks and measure the generalization ability of embedding models with respect to out-of-distribution queries. Besides, we also seek to understand the effects of image features from different levels on the embedding quality, thereby shedding light on future development of embedding models.

### Data Collection

There are 8 different types of flat objects involved in our benchmark: (1) _Animated trading card_. We consider one particular type of card, _i.e_., Pokemon trading card. (2) _Photorealistic trading card_. We consider cards for different sports, such as baseball, basketball, and football. (3) _Book cover_, which comes from books in different languages, such as English and Chinese. (4) _Painting_, which involvesvarious styles, such as impressionism and baroque, etc. (5) _Currency_, which involves banknotes of modern and antique designs from different countries. We consider both the front and back of a banknote. (6) _Logo_. We consider common logos (_e.g._, Nike) as well as long-tailed logos (_e.g._, brands of local small businesses). (7) _Packaged goods_. We only consider products for which the corresponding index images are displayed on flat surface. (8) _Movie poster_. We consider posters from different countries, such as America and Japan. In Figure 1 we show examples for each object. As can be seen, these objects have diverse textures, involving animation and artificial patterns, etc, and thus offer various retrieval challenges. Also, they are common in daily life and retrieving such objects serves as a practical use case in real applications. For example, eBay builds an image retrieval system2 for trading cards to facilitate the sales of cards.

To build our benchmark, we collected the query and index images mainly via Google Images. Specifically, before collecting images, for each type of objects we firstly curated a list of object names. Their names can be obtained from dedicated websites, such as TCGplayer3 for animated trading card and Wikimedia Commons4 for painting. Next, we queried Google Images with each of the names and retrieved the corresponding query and index images. The returned results were typically noisy and we manually filtered out the irrelevant images as well as those that could be copyright protected. In this way, we effectively matched each index image with diverse query images, giving image-level ground truths. Note that our collected query images are in the wild whereas the database images are in canonical pose (see Figure 1). Besides Google Images, we also leveraged some other sources to further augment the benchmark, such as Google Lens API, eBay, and Amazon.

To increase retrieval difficulty and challenge, similar to previous works [37; 49] we also introduced distractors to the benchmark. The distractors are images that share similar semantics, contents, or textures with the index images. They can be from the same domains as the index images, or from other domains. Distractors are primarily introduced to increase the retrieval difficulty, as they would bring perplexing features that deceive retrieval algorithms and reduce the accuracy of retrieval results. Ideally, a strong retrieval algorithm should be robust against distractors. In our benchmark, the distractor images were all from the 8 object domains and crawled from different specific websites, such as TCGplayer and Wikimedia Commons. See supplementary material for some examples. The details of our benchmark can be found in Table 2.

### Data Annotation and Metadata

As mentioned above, we provide image-level retrieval ground truths for each query image. To enable a more detailed evaluation on the quality of image embeddings, we also offer annotations on the retrieval difficulties for each query image. Specifically, we break down difficulty into three levels: easy, medium, and hard. The specific difficulty level for a query image is subject to the following factors: (1) occlusion; (2) blur; (3) truncation; (4) color distortion; (5) perspective distortion; (6) texture complexity; (7) area of the object in the query image. For example, if the target object only occupies a small area in the image, we tag "hard" for the given query image due to the distraction of background; see Figure 1(h)(n). Similarly, if the object does not bear severe perspective distortion or truncation, we tag "easy"; see Figure 1(b). In practice, assigning difficulty levels to query images can

  Object Type & \# Query & \# Index & \# Distractor & \# Easy & \# Medium & \# Hard \\  Animated trading card & 6,025 & 1,392 & 11,137 & 714 & 4,868 & 443 \\ Photorealistic trading card & 2,187 & 484 & 521 & 67 & 2,039 & 81 \\ Book cover & 1,461 & 470 & 10,739 & 66 & 1,277 & 118 \\ Painting & 988 & 430 & 615 & 119 & 710 & 159 \\ Currency & 758 & 395 & 1,188 & 112 & 576 & 70 \\ Logo & 1170 & 535 & 174 & 24 & 957 & 189 \\ Packaged goods & 800 & 476 & 2,382 & 24 & 727 & 49 \\ Movie poster & 512 & 403 & 23,094 & 49 & 426 & 37 \\  Total & 13,901 & 4,585 & 49,850 & 1,175 & 11,580 & 1,146 \\  

Table 2: Overview of the proposed FORB benchmark.

be a subjective process. To reduce bias and ensure precise difficulty assessment, we involve different annotators in manually labeling the difficulty of each image and then use majority voting to determine the final difficulty level. As shown in Table 4, the annotated difficulty levels are quite consistent with retrieval accuracies for all methods, _i.e_., the accuracies are high on easy queries, whereas they are low on hard queries.

We store the annotations with a newline delimited JSON file, where each line contains the metadata corresponding to a query image. Specifically, each line is comprised of the following information: (1) query image ID; (2) the file name of query image; (3) the source URL of query image; (4) the file names of ground-truth index images; (5) the source URLs of ground-truth index images; (6) difficulty level. Here the source URL corresponds to where we downloaded the image. Apart from this annotation information, we also provide newline delimited JSON files for tracking the set of query and database images, respectively, where each line contains information regarding the image file name and source URL.

We host the metadata files at https://github.com/pxiangwu/FORB/, which is publicly accessible. As for the query and database images, they can be downloaded via the provided source image URLs. Alternatively, these images are also accessible from a Google drive, where we snapshot all the images from source URLs. Both the metadata and image files are licensed under CC BY-NC-SA.

### Metrics

Our FORB benchmark uses the commonly adopted mAP metric, as well as a new one that takes into account the matching score margin.

mAPThe mean Average Precision metric considers both the true positives and false positives in the ranked retrieval results. The metric is defined as follows:

\[@k=_{q=1}^{Q}@k(q),\ \ @k(q)=,k)}_{k=1}^{(n_{q},k)}_{q}(k)_{q}(k),\] (1)

where \(Q\) is the total number of query images; \(m_{q}\) is the number of ground-truth index images matched with query image \(q\); \(n_{q}\) is the number of predictions made by the retrieval method; \(_{q}(k)\) is the precision at rank \(k\) for query image \(q\); and \(_{q}(k)\) is a relevance indicator function which equals 1 if the result at rank \(k\) is relevant and equals to 0 otherwise. Note that for some query images (_e.g_., OOD images) they do not have associated index images to retrieve, and mAP does not penalize the method even if it retrieves some results for the query images.

\(t\)-mAPTo take into account OOD queries and false positive results, we introduce threshold mAP, _i.e_., \(t\)-mAP. This metric measures the matching score margin with the aid of OOD queries, and is computed as below:

\[t=_{0}^{(1)}(t)dt,\] (2)

where \((x)\) is the threshold that leads to a false positive rate of \(1-x\) on OOD queries after thresholding the retrieved candidates with respect to their matching scores; formally, \((x)=\{()=1-x\}\), where \(()\) is the false positive rate at threshold \(\). \((t)\) is the mAP computed after the retrieval results are suppressed at threshold \(t\). Note that \((t)\) tends to decrease with increasing threshold \(t\). However, for an ideal universal image embedding, it is expected to still have a high mAP even at threshold \((1)\), due to its strong discriminability between true positives and false positives.

In practice, to numerically compute Equation (2), we uniformly sample 11 thresholds and average \((t)\) over them:

\[t=_{t\{0,(0.1),,(1.0)\}}(t).\] (3)

As can be seen, \(t\)-mAP takes value from \(\), with higher value indicating better performance.

## 4 Experiments

In this section, we evaluate several representative image retrieval methods on our FORB benchmark. Based on the evaluation results, we also provide a detailed analysis on the behavior of different image embeddings and their intriguing properties.

### Baseline Methods

We consider 10 existing image retrieval methods as baselines and investigate their image embedding qualities. According to how the embedding is built, these methods can be categorized into 3 groups.

Bottom-upThis strategy builds a global image embedding based on local image features. The related methods include: (1) BoW . This method extracts RootSIFT  local features from the given image, which are then quantized using a codebook and finally assembled into a sparse feature vector, \(i\)._e_., image embedding. Since BoW only relies on handcrafted low-level image features, the produced embedding tends to have better generalization ability than learning-based ones that fit to certain domains. (2) FIRe , which extracts mid-level image features and then aggregates them in a manner similar to BoW. However, different from BoW, FIRe is deep learning-based and the feature extraction needs to be learned with certain training data, \(e\)._g_., SfM-120k .

Top-downContrary to the bottom-up approach, this strategy learns to extract local image features through image-level supervision on global image embeddings. The local features typically correspond to the convolutional feature maps and are used for feature matching or reranking. In contrast, the global image embeddings are used in the first stage of a retrieval system to efficiently select the most similar images. In our experiment, we consider one representative approach, DELG , which jointly extracts deep local features and global image embeddings.

Top-onlyThis strategy performs image retrieval with learned global image embeddings directly, without the need of extracting and using local image features. The global image embeddings are typically produced from a deep model that is trained on a large dataset, in a supervised or self- / weakly-supervised manner. In the experiment, we consider the following state-of-the-art methods: (1) CLIP ; (2) SLIP ; (3) BLIP ; (4) BLIP2 ; (5) DINO ; (6) DINOv2 ; (7) DiHT . Note that apart from the design differences, another major distinction among these methods lies in their training data; see Table 3 for more details. In Table 6 we also show the specific neural network model used in each method.

It is worth mentioning that for some top-only methods, their training data may overlap with our FORB benchmark. In particular, we find a few images from FORB are also included in LAION-5B , and therefore training data based on the subset of LAION-5B (_e_.\(g\)., LAION-438M  and 129M ) may also share duplicate images with FORB. In addition, since the training set of CLIP are collected from web, it may overlap with FORB as well. This test set overlap issue has been discussed in previous works [40; 42] and is considered to have little impact on the validity of performance evaluations. In the supplementary material we perform extra experiments on a deduplicated version of FORB and observe the evaluation results closely resemble those from the original FORB (see Section A.4)

  Method & Training data & Domain & \# images & Method & Training data & Domain & \# images \\  BoW  & - & - & BLIP  & 129M  & 3D objects + web images & 129M \\ FIe  & SfM-120k  & 3D landmark & 120K & BLIP2  & 129M  & 3D objects + web images & 129M \\ DELG  & GLD  & 3D landmark & 960K & DINO  & ImageNet  & 3D objects & 1M \\ CLIP  & Proprietary 400M & Web images & 400M & DINOv2  & LYP-142M  & 3D objects & 142M \\ SLIP  & YYCC15M  & Web images & 15M & DHT  & LAION-438M  & Web images & 438M \\  

Table 3: The training data used by different image retrieval methods. “Web images” means the training data are sourced from the Internet and typically comprise various 3D objects along with some flat objects. We use the generic term “3D objects” to indicate the training data involve diverse 3D objects, such as 3D landmarks, plants, and animals, etc.

### Implementation

In the experiment, we resize the query and database images to standardize the inputs, ensuring that the longest side is no more than 480 while maintaining the original aspect ratio. For the baseline methods, we implement BoW in Python according to , while for the others we adapt their open source implementations to image retrieval task. Specifically, for both BoW and FIRe, we build the codebook using 10k images randomly sampled from the database images. For DELG, we follow its default protocols and extract multi-scale local and global features for both query and database images. For all top-only methods, we produce multi-scale feature representations as well. To be specific, we firstly build an image pyramid by resizing the input image and then center cropping. In our implementation, to strike a balance between accuracy and inference speed, we use 3 scales, \(\{},1,\}\), for query images, and 7 scales  for database images. Next, we compute the global image features at each scale and apply \(L_{2}\) normalization to them. Finally, we aggregate all the features by average-pooling, followed by another \(L_{2}\) normalization step. Such multi-scale features mitigate the issue of lacking scale invariance for top-only methods. In practice, we observe much improved accuracy of multi-scale features compared to the single-scale ones.

The source code for all the implementations is available at https://github.com/pxiangwu/FORB/, and licensed under the MIT license.

### Evaluation

In Table 4 we report image retrieval accuracy for different methods in terms of mAP@5 and \(t\)-mAP@5 (see supplementary material for more results). It can be observed that:

(1) Image embeddings built from handcrafted low-level features can be more universal than many learning-based global image descriptors. In particular, while BoW was introduced decades ago and manually designed, it still outperforms DELG and many top-only methods on our FORB benchmark, demonstrating its strong generalization ability. Moreover, from \(t\)-mAP it can be observed that BoW is better at separating true positives from irrelevant candidates, giving a larger matching score margin.

(2) Mid-level image features are more discriminative than low-level descriptors, and their induced global image embeddings exhibit a superior generalization ability over OOD domains. In Table 4 we investigate one baseline method, _i.e._, FIRe, which builds embeddings from mid-level features. It can be observed that FIRe overall achieves the best performance among all baselines, with the highest \(t\)-mAP while giving an mAP on par with CLIP. To extract mid-level features, FIRe needs a model training procedure. Surprisingly, although FIRe was trained on 3D landmark images, it can still work well on 2D flat object domains. This could be because in principle the mid-level features of FIRe are similar to the low-level ones, but they typically cover a larger image region and thus incorporate more semantic information, leading to much improved discriminative ability.

   &  &  \\  Method & Overall & Easy & Medium & Hard & Overall & Easy & Medium & Hard \\  BoW  & 78.44 & 90.38 & 79.78 & 52.65 & 62.49 & 78.29 & 63.61 & 35.00 \\ BoW (+ rerank)  & 80.38 & 92.69 & 81.77 & 53.70 & 67.83 & 81.95 & 69.04 & 41.03 \\ FIRe  & 88.08 & **98.48** & **90.14** & 56.58 & **77.50** & **90.38** & **79.41** & **44.97** \\  DELG  & 48.81 & 79.45 & 48.11 & 24.48 & 34.92 & 65.44 & 33.79 & 15.04 \\ DELG (+ rerank)  & 58.74 & 87.96 & 58.43 & 31.91 & 39.47 & 70.64 & 38.45 & 17.74 \\  CLIP\({}^{}\) & **89.36** & 98.23 & 90.00 & **73.84** & 67.23 & 87.10 & 67.48 & 44.27 \\ SLIP  & 39.01 & 64.45 & 38.58 & 17.22 & 24.43 & 50.27 & 23.42 & 8.07 \\ BLIP\({}^{}\) & 74.11 & 94.67 & 74.65 & 47.53 & 49.98 & 81.31 & 49.58 & 21.89 \\ BLIP\({}^{}\) & 81.73 & 94.28 & 82.72 & 58.85 & 57.11 & 81.59 & 57.43 & 28.77 \\ DINO  & 55.20 & 85.08 & 55.28 & 23.79 & 42.28 & 74.51 & 41.75 & 14.56 \\ DINOv2  & 68.86 & 92.85 & 69.53 & 37.51 & 48.21 & 72.04 & 48.44 & 21.39 \\ DiHT\({}^{}\) & 84.77 & 96.56 & 85.47 & 65.55 & 60.54 & 83.79 & 61.06 & 31.43 \\  

Table 4: Comparison of different image retrieval methods on our FORB benchmark. **Bolded** numbers indicate the **best** results. \(\) means the model training data may overlap with FORB and the retrieval accuracy can be interpreted as an “upper bound” performance.

[MISSING_PAGE_FAIL:9]

that embeddings based on low- and mid-level image features overall are more universal than those constructed from high-level semantics. Notably, we observe that the mid-level features introduced by FIRe are surprisingly general and give the best overall retrieval performance, even if the model is trained on 3D landmarks. However, despite the overall inferiority, embeddings of high-level semantics are usually more effective for images that contain sparse features. These findings suggest that one potential future direction would be to develop methods that jointly leverage the mid- and high-level image features and combine the strengths of both.

**Limitations and future work.** In our experiment, we compare baselines which have different model sizes and are trained on various datasets. As a result, the comparisons among these methods and their corresponding embeddings could be unfair to some extent. In addition, our FORB benchmark currently only considers distractors from the same domain as the index images. To improve the diversity and challenges of our benchmark, in the future we plan to collect more distractors from other domains. In addition, to further enrich the OOD queries, we also plan to curate queries beyond the domains of index images, a practice which is similar to GLDv2 . In this way we can better measure the matching score margins of different methods with \(t\)-mAP. Despite these limitations, our benchmark still serves as a supportive dataset for further research in the task of image retrieval. We hope our work would facilitate the understanding of different image embeddings and promote the design of new methods.