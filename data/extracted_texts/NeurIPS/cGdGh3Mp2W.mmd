# NeuroGF: A Neural Representation for Fast Geodesic Distance and Path Queries

Qijian Zhang\({}^{1}\), Junhui Hou\({}^{1}\), Yohanes Yudhi Adikusuma\({}^{2}\), Wenping Wang\({}^{3}\), Ying He\({}^{2}\)

\({}^{1}\)Department of Computer Science, City University of Hong Kong, Hong Kong SAR, China

\({}^{2}\)School of Computer Science and Engineering, Nanyang Technological University, Singapore

\({}^{3}\)Department of Computer Science and Engineering, Texas A&M University, Texas, USA

qijizhang3-c@my.cityu.edu.hk, jh.hou@cityu.edu.hk

Yohanes.adikusuma@ntu.edu.sg, wenping@tamu.edu, yhe@ntu.edu.sg

Corresponding author

###### Abstract

Geodesics play a critical role in many geometry processing applications. Traditional algorithms for computing geodesics on 3D mesh models are often inefficient and slow, which make them impractical for scenarios requiring extensive querying of arbitrary point-to-point geodesics. Recently, deep implicit functions have gained popularity for 3D geometry representation, yet there is still no research on neural implicit representation of geodesics. To bridge this gap, we make the first attempt to represent geodesics using implicit learning frameworks. Specifically, we propose neural geodesic field (NeuroGF), which can be learned to encode all-pairs geodesics of a given 3D mesh model, enabling to efficiently and accurately answer queries of arbitrary point-to-point geodesic distances and paths. Evaluations on common 3D object models and real-captured scene-level meshes demonstrate our exceptional performances in terms of representation accuracy and querying efficiency. Besides, NeuroGF also provides a convenient way of jointly encoding both 3D geometry and geodesics in a unified representation. Moreover, the working mode of per-model overfitting is further extended to generalizable learning frameworks that can work on various input formats such as unstructured point clouds, which also show satisfactory performances for unseen shapes and categories. Our code and data are available at https://github.com/keeganhk/NeuroGF.

## 1 Introduction

The computation of geodesic distances and paths on 3D mesh models has been extensively studied over the past few decades and plays a critical role in many geometry processing tasks, including texture mapping, shape description, correspondence, and deformation. Traditional computational geometry methods, such as discrete wavefront propagation [25; 8; 39; 41; 32] and geodesic graphs [46; 2], excel at computing exact or high-quality approximate geodesic distances and paths on meshes with arbitrary triangulation. However, these methods often suffer from computational inefficiency or require a pre-computation step. On the other hand, partial differential equation (PDE) methods [17; 10; 36] are renowned for their efficiency, flexibility and ease of implementation, but the accuracy of their results is sensitive to the quality of mesh triangulation.

It is also worth mentioning that existing geodesic algorithms are primarily designed for computing single-source all-destination (SSAD) or multiple-sources all-destination (MSAD) geodesics on meshes. While there are some works focused on all-pairs geodesic computations, such as [40; 4; 12], these methods are built upon relatively complex computational and optimization processes.

Dealing with the trade-off among accuracy, speed, and complexity for geodesic computation remains technically non-trivial.

As 3D deep learning continues to advance, integrating geodesic information into deep learning frameworks becomes increasingly important for a wide range of applications, enabling more accurate and efficient analysis and manipulation of complex 3D shapes. However, until now, none of the existing geodesic algorithms have been seamlessly integrated into deep neural networks.

In this paper, we make the first attempt to utilize deep neural networks for accurately and efficiently answering geodesic distance and path queries. Towards this goal, we propose neural geodesic fields (NeuroGFs), an overfitting paradigm for representing geodesic distances and paths of a given 3D shape in a single neural model in an implicit fashion. Our approach is highly desirable to applications that require extensive and frequent online queries of point-to-point geodesic computations. Evaluations on common 3D models demonstrate that NeuroGFs excel in solving both SSAD and point-to-point geodesic problems. They achieve exceptional performance and strike a satisfactory balance between representation accuracy, model compactness, and query efficiency. Specifically, NeuroGFs are capable of achieving computation times of less than 1 ms for solving SSAD on 3D meshes consisting of 400K vertices, surpassing traditional methods, such as the heat method and discrete geodesic graphs, by two orders of magnitude. Besides, NeuroGFs offer the unique advantage of encoding both 3D geometry and geodesics in a unified representation. It is important to note that despite its compact size, with only 259K hyperparamters, the NeuroGF network consistently delivers high accuracy, with a relative mean error of less than 0.5%. Moreover, to facilitate more diverse applications, we further investigate generalizable learning frameworks of NeuroGFs by introducing different types of 3D shape feature encoders, which can well generalize to unseen shapes and novel categories. These results strongly demonstrate that NeuroGF is an effective and efficient tool for geodesic queries on 3D meshes, opening up exciting possibilities for a wide range of potential applications in the field of 3D deep learning. The main contributions of this work can be summarized as follows:

* We make the first attempt to explore neural implicit representations for answering geodesic queries on 3D meshes.
* In addition to geodesic distances, we model shortest paths as discrete sequences of ordered 3D points and customize a learning process of feature-guided curve deformation, which can flexibly approximate the shortest path between any pair of source and target query points.
* We construct a unified representation structure for both geometric and geodesic information of given 3D shapes. Compared with traditional computational and optimization-based approaches, the proposed NeuroGF framework is easy to implement, highly efficient for online query, and naturally enjoys the powerful parallelism of modern GPUs.
* We evaluated the performances of our NeuroGF representation paradigms in both overfitted and generalizable working modes, demonstrating the great potential and technical extensibility of our approach.

## 2 Related Work

**Discrete Geodesics.** The existing techniques for computing geodesics on 3D surfaces can be broadly classified into six categories: computational geometry methods, graph methods, PDE methods, surface partitioning methods, and iterative methods.

Traditional computational geometry methods [25; 8; 39; 47; 41; 32] are capable of computing exact geodesic distances and paths on arbitrary meshes. However, these methods are computationally expensive, especially when dealing with large meshes. Additionally, while these methods are well-suited to solving the single-source/multiple-sources and all-destinations problem, they are not practical for computing all-pairs geodesic distances due to their high computational costs.

Graph-based methods [46; 2] exploit the local nature of the discrete geodesic problem by constructing a sparse graph, where each edge represents a short geodesic path. These paths are computed locally by using exact geodesic algorithms. By transforming the mesh-based geodesic problem into a graph-based shortest-path problem, graph-based methods can use efficient algorithms such as Dijkstra's algorithm to compute geodesic distances and paths. Furthermore, their results are guaranteed to be a true distance metric and have controllable accuracy. However, achieving high-accuracy geodesic computation often requires significant memory for storing the graphs, as the complexity of the graph increases with the desired accuracy.

PDE methods are highly flexible and can work for a wide range of discrete domains, including point clouds, implicit functions, polygonal meshes, regular grids and even broken meshes. They solve the Eikonal equation either directly  or indirectly . PDE methods are efficient and easy to implement. However, since they compute only a first-order approximation of geodesic distances, they typically require meshes with fairly good tessellation. To obtain geodesic paths using PDE methods, the negative gradient of the computed geodesic distances must be back-traced. However, the accuracy of the resulting paths also depends on the mesh quality, as the gradient may not be continuous or may have sharp discontinuities at the mesh edges. Nevertheless, PDE methods remain popular for their efficiency and versatility in computing geodesics on various discrete domains, including those beyond polygonal meshes.

Surface partition methods aim to break down the discrete geodesic problem into small sub-problems. The geodesic tracks (GT) method  places evenly-spaced, source-independent Steiner points on edges. Given a source vertex, it constructs a Steiner-point graph that partitions the surface into mutually exclusive tracks. Within each triangle, the tracks form sub-regions with approximately linear change in the distance field, enabling efficient approximation of geodesic distances. While the GT method supports high-quality geodesic path and isoline tracing, it remains inefficient for point-to-point distance and path queries due to the need for constructing the Steiner point graph using a Dijkstra-like sweep. The separator-based method (SEP)  performs a nested bisection of the input mesh using separator curves. It approximates the distances between each mesh vertex and a small relevant subset of these curves using polynomials. Consequently, the geodesic distance between any two mesh vertices can be approximated by solving a small number of simple univariate minimization problems. The SEP method efficiently handles point-to-point distance queries but does not provide geodesic paths. Furthermore, it is limited to query points located on mesh vertices, and it may not perform well on anisotropic meshes.

Additionally, there are iterative approaches like the edge flipping method  and the curve shortening method  that specially target the computation of geodesic paths and loops. These methods typically rely on an initial path and proceed in an iterative manner. Their time complexities depend on the area of the region the path sweeps. In contrast, our method does not require an initial path and can efficiently compute geodesics with a single forward pass through the network. It provides flexibility in solving both SSAD/MSAD and point-to-point geodesics. Furthermore, our method takes advantage of the high parallelism offered by modern graphics hardware, resulting in impressive runtime performance.

**3D Deep Learning with Geodesics.** Geodesics provide valuable structural information that can be seamlessly integrated into deep learning frameworks for diverse tasks in shape analysis. Several existing works have leveraged geodesic information within deep learning models. For example, GCNN  introduces manifold-adapted convolutional operators, constructing local geodesic coordinate systems for patch extraction. MeshCNN  combines specialized convolution and pooling layers operating on mesh edges by leveraging intrinsic geodesic connections for performing feature extraction on triangular meshes. Geodesic-Former  proposes geodesic-guided transformer model for few-shot instance segmentation of 3D point clouds, where geodesic distance information is leveraged to tackle the issue of imbalanced point density. GSA  designs geodesic self-attention to facilitate capturing long-range geometrical dependencies of point cloud objects. In the above studies, geodesics are exploited as additional input information to boost the subsequent learning models. Differently, GeoNet  explicitly learns geodesics-informed representations from unstructured point clouds in a supervised manner, which can be considered as a pre-training process of the target backbone networks. More recently, GraphWalks  proposes a differentiable geodesic path estimator learned in a supervised manner, but its prediction accuracy is still unsatisfactory. In terms of working modes,  targeted at learning generalizable deep models for geodesics prediction, while in this work we tend to explore both overfitted and generalizable learning frameworks. Concurrently,  proposes a graph-based geodesic learning network that works on mesh models, while our implicit field-based modeling paradigm shows better flexibility for various input formats such as unstructured point cloud data.

**Neural Implicit Representation for 3D Shape Geometry**. The working mechanisms of existing neural implicit representations can be categorized as generalizable  and overfittedparadigms [34; 35; 27; 21; 26; 45; 19]. Essentially, the former category of approaches tends to learn generalizable shape priors from a large collection of shapes at the cost of a lower-fidelity representation, while the latter category of approaches aims at reproducing a single shape with high-fidelity by accordingly overfitting a single neural network model. In this paper, we start by following the representation paradigm of the latter overfitted neural implicit models, i.e., separately overfitting a single neural network on a single target mesh model, to validate the representation power of our NeuroGFs. Then, we further make efforts to extend generalizable schemes to learn geodesics for unseen shapes and novel categories. Generally, despite the proliferation of research on deep implicit geometric information representation, to the best of our knowledge, there is still no such effort on implicit geodesics representation.

## 3 Proposed Method

### Problem Formulation

Denote by \(\) a given geometric shape represented in the form of a 3D mesh model \(_{}=(,,)\), where \(\), \(\), \(\) are the sets of vertices, edges, and faces, respectively. In an overfitted representation paradigm, our ultimate goal is to construct a neural model \(_{}\) parameterized by network weights \(\), which are particularly optimized on the given shape \(\) for fitting geodesic information. Specifically, given an arbitrary pair of geodesic queries, we deduce their corresponding point-to-point geodesic distance and shortest path through \(_{}\), which can be formulated as:

\[\{d,_{s t}\}=_{}(_{s}; _{t}),\] (1)

where \(_{s}\) and \(_{t}\) denote the source and target 3D points located on the underlying surface of shape \(\), \(d^{+}\) is a scalar value representing the geodesic distance between the two geodesic query points, and \(_{s t}^{M 3}\) represents the shortest path from source \(_{s}\) to target \(_{t}\) modeled as a discrete sequence of \(M\) ordered 3D points, i.e., \(_{s t}=\{_{m}\}_{m=0}^{M-1}\), where the subscript \(m\) indicates the order index of each point.

In the offline training phase, we employ a supervised learning approach to overfit the neural network \(_{}\) on a specific shape \(\). The training is performed using a collection of ground-truth geodesics pre-computed from its corresponding 3D mesh \(\). Once the overfitting process is completed, we can efficiently compute point-to-point geodesics for arbitrary online queries via a single forward pass through the trained network \(_{}\).

### Architectural Design

In principle, we stick to the most concise technical implementation of the overall learning pipeline, without highly introducing sophisticated modules or mechanisms, for exploring the viability and potential of our proposed NeuroGF representation paradigm. As illustrated in Figure 1, all required learnable components of \(_{}\) are simply built upon the stack of either fully-connected (FC) layers or point-wisely shared multi-layer perceptrons (MLPs). The input query points are individually lifted to high-dimensional feature vectors using FC layers, enabling subsequent manipulation of the data. For ease of representation, the feature embeddings of a pair of source and target queries, \(_{s},_{t}^{3}\), are denoted as \(_{s},_{t}^{D_{s}}\). These embeddings are obtained by passing the inputs through three consecutive FC layers, progressively increasing the output channels. After obtaining the source and

Figure 1: Overall workflow of querying point-to-point geodesic distances and shortest paths as well as extracting signed distance fields for surface geometry representation from NeuroGFs.

target feature embeddings \(_{s}\) and \(_{t}\), we proceed by deploying two separate learning branches to predict the geodesic distance \(d\) and the shortest path \(_{s t}\).

In addition to the geodesic distance and shortest path learning branches, we also incorporate an auxiliary learning branch for surface geometry representation by predicting the corresponding signed distance field (SDF). Given a query point \(^{}^{3}\) and its lifted \(D_{e}\)-dimensional feature embedding \(^{}\), we predict its signed distance \(s^{}\). This allows us to obtain a unified representation that encodes both geodesics and geometry. It is worth emphasizing that, during training, \(^{}\) is sampled from the entire bounding sphere of the given shape \(\), while \(_{s}\) and \(_{t}\) are selected from the mesh vertex set \(\). During testing, \(_{s}\) and \(_{t}\) can be arbitrary points on the underlying shape surface, not limited to the vertices of the given mesh.

Overall, after the initial query point embedding, our neural network architecture consists of three parallel learning branches for predicting geodesic distances, shortest paths, and signed distance fields. While the three types of outputs are closely correlated, we deliberately design the intermediate learning processes in an inter-independent manner. This means that there is no explicit interaction (such as feature fusion or propagation) among the branches. We make this design choice to avoid redundant computations in scenarios where only one specific property is required for online query.

_Neural Fitting of Geodesic Distances._ The geodesic distance regression is modeled as a learnable function of the "feature-space difference" between source and target queries. We compute an absolute difference vector between query embeddings \(_{s}\) and \(_{t}\), which is further mapped to a scalar value of the geodesic distance through a stack of FC layers, which can be formulated as:

\[d=_{}(|_{s}-_{t}|),\] (2)

where \(|*|\) means element-wisely taking the absolute value of each vector entry, and the geodesic distance learning branch \(_{}:^{D_{e}}^{+}\) is implemented as three consecutive FC layers, where the output dimension of the last layer is set to \(1\).

_Neural Fitting of Shortest Paths._ The shortest path generation is achieved as a feature-guided curve deformation process by adapting previous "folding-style" 3D shape reconstruction decoders , where pre-defined 2D regular grid primitives conditioned on unique shape signatures are smoothly deformed to the target 3D shape surface. Inheriting the same working mechanism, we tend to deform the straight line segment between a pair of source and target geodesic query points to the 3D curve of their shortest path, which is conditioned on a learnable deformation guidance vector exported from source and target point embeddings.

Formally, we start by sequentially sampling \(M\) discrete 3D points with uniform intervals along the directed straight line segment from source \(_{s}\) to target \(_{t}\), as given by:

\[_{s t}=\{_{s}+(_{t}-_{s})/(M-1)  m\}_{m=0}^{M-1},\] (3)

where \(_{s t}^{M 3}\) serves as the initial line primitive to be deformed. In the online query phase, one can flexibly adjust the density of curve points according to the actual requirements by simply sampling the initial straight line segment with different uniform intervals. Next, the required curve deformation guidance vector can be deduced by:

\[_{s t}=([_{s};_{t}]),\] (4)

where \(_{s t}^{D_{e}}\) uniquely determines the deformation result of the corresponding \(_{s t}\), \([*;*]\) denotes channel concatenation, \(:^{D_{e}+D_{e}}^{D_{e}}\) represents a learnable mapping function that can be simply implemented as a single FC layer.

To perform feature-guided curve deformation, we append \(_{s t}\) to each point in the initial line primitive \(_{s t}\). The resulting \(M\)-by-\((D_{e}+3)\) feature matrix is row-wisely embedded for shortest path generation, which can be formulated as:

\[_{s t}=_{}([_{s  t};_{s t}]),\] (5)

where \(_{}\) comprises four point-wise MLPs with the output dimension of the last layer set to \(3\).

_(Auxiliary) Neural Fitting of Signed Distances._ As discussed before, there is an auxiliary learning branch that consumes the feature embedding \(^{}\) of the given geometric query point \(^{}\) as input and regresses a scalar value of its signed distance, which can be formulated as:

\[s^{}=^{}_{}(^{}),\] (6)

where \(^{}_{}:^{D_{e}}\) is implemented as three consecutive FC layers with the output dimension of the last layer set to \(1\).

### Learning Objective

Corresponding to the three types of outputs, the overall learning objective of NeuroGF representations comprises three loss function terms for the supervision of predicted geodesic distances \(d\), curve points of shortest paths \(_{s t}\), and signed distances \(s^{}\). Additionally, we also impose two auxiliary constraint terms on the generated shortest paths to enhance the consistency of the three output shape properties. Specific mathematical formulations are given as follows.

_1) Supervision of Geodesic Distances._ We compute \(L_{1}\) loss between the predicted and ground-truth geodesic distances \(d\) and \(\) as:

\[_{}=\|d-\|_{1}.\] (7)

_2) Supervision of Shortest Paths._ We point-wisely compute \(L_{1}\) losses between the generated and ground-truth curve points of shortest paths \(_{s t}\) and \(}_{s t}\) as:

\[_{}=\|_{s t}-}_{s  t}\|_{1}.\] (8)

Note that since we uniformly use \(M\) curve points for approximating shortest paths during training, the raw ground-truth geodesic paths typically contain different numbers of points. For the convenience of supervision, during data pre-processing, points in the raw ground-truth geodesic paths are densely interpolated and then resampled to the desired number of \(M\) points.

_3) Supervision of Signed Distances._ We compute \(L_{1}\) loss between the predicted and ground-truth signed distances \(s^{}\) and \(^{}\) as:

\[_{}=\|s^{}-^{}\|_{1}.\] (9)

_4) Consistency Constraint of Curve Lengths._ For the same input pair of geodesic query points, we can simultaneously obtain their geodesic distance \(d\) and shortest path \(_{s t}=\{_{m}\}_{m=0}^{M-1}\). To promote the consistency between \(d\) and \(_{s t}\), we explicitly minimize the difference of curve lengths between the predicted \(_{s t}\) and its ground-truth \(}_{s t}=\{}_{m}\}_{m=0}^{M-1}\) as:

\[_{}=\|_{m=1}^{M-1}(\|}_{m}- }_{m-1}\|_{2})-_{m=1}^{M-1}(\|_{m}- _{m-1}\|_{2})\|_{1},\] (10)

where we roughly approximate the curve length as the summation of pair-wise Euclidean distances between adjacent points.

_5) Distribution Constraint of Curve Points._ Theoretically, each curve point \(_{m}\) of the shortest path is supposed to be located on the underlying shape surface, with zero signed distance value. However, under the generative modeling framework, there is no strict guarantee to eliminate deviation between the generated geodesic curves and the corresponding shape surface. To this end, we further constrain the spatial distribution of the generated curve points by minimizing the absolute values of their signed distances, as given by:

\[_{}=_{m=0}^{M-1}|_{}( _{m})|\] (11)

where \(_{}:^{3}\) represents an independent neural model overfitted on the given shape for the fitting of signed distance fields in advance, whose network parameters are fixed. Given an arbitrary spatial query, \(_{}\) outputs a scalar of the corresponding signed distance value, offering a natural way of constraining the generated curve points in a differentiable manner.

## 4 Experiments

### Implementation Details

_Testing Shapes._ We experimented with a variety of 3D shape models that are commonly adopted in the geometry processing community, covering different complexity in terms of both geometry and topology, as displayed in Figure 2. Detailed mesh statistics can be found in Table 1. The anisotropy \(\) quantifies the level of anisotropy in the meshes. Meshes with \(>3\) are classified as anisotropic models. In our experiments, all the testing models have already been uniformly scaled into a unit sphere.

Training Data Preparation.We employed DGG-VTP  and fast discrete geodesic graphs (fDGG)  to generate the ground-truth geodesic distances and shortest paths, respectively. Specifically, we set the accuracy control parameter \(=10^{-7}\) for both DGG-VTP and fDGG. This parameter ensures that the computed geodesic distances and paths have accuracy comparable to the results obtained from the exact VTP method  using single-precision floating points. It is worth emphasizing that training NeuroGF on a given mesh does not require the utilization of geodesics between every pair of mesh vertices, which would be computationally expensive. Instead, we selected a subset of vertices and then uses the distances and paths between them. In our implementation, we sampled 20K vertices using mesh simplification tools, such as QSIim , for each input mesh. Our experiments show that the down-sampling strategy is sufficient for achieving satisfactory learning results. We also observed that exhaustive preparation of all-pairs geodesics for the input mesh did not further bring any obvious gain of accuracy.

_Network Configuration._ The overall learning framework is composed of four network components. The initial query point feature embedding is achieved through a stack of three FC layers with output dimensions of \(\{D_{e}/4,D_{e}/2,D_{e}\}\), where \(D_{e}\) is an adjustable hyperparameter that controls the whole network size. Then comes the subsequent three learning branches for the fitting of geodesic distances, shortest paths, and signed distances, respectively. Specifically, \(_{}\) comprises three FC layers with output dimensions of \(\{D_{e}/4,64,1\}\), \(_{}\) is a stack of point-wise MLPs with output dimensions of \(\{128,64,32,3\}\), \(^{}_{}\) comprises three FC layers with output dimensions of \(\{D_{e}/4,64,1\}\).

We adopted \(D_{e}=256\) for constructing our baseline representation model, which totally contains \(259\)K network parameters. Note that the same number of parameters applies to all different testing shapes without changing the network structure.

_Optimization Strategy._ We adopted the popular AdamW  optimizer for parameter updating with \(500\) training epochs, with the learning rate gradually decaying from \(0.01\) to \(0.0001\) scheduled by cosine annealing. During each training epoch, we randomly sampled around \(30\)K spatial points as signed distance queries, \(90\)K paired mesh vertices as geodesic distance queries, and \(20\)K paired mesh vertices as shortest path queries, which are repeatedly consumed as inputs for \(200\) iterations. In the whole training phase, we specified the number of geodesic curve points as \(M=128\) and \(M=32\) for long and short shortest paths, respectively, to facilitate batch-wise processing.

_Evaluation Protocol._ We evaluated the geodesic representation accuracy and online SSAD query efficiency of the proposed NeuroGF learning framework and made necessary quantitative comparisons with two representative computational approaches HM  and fDGG . The quality of geodesic

   &  &  &  &  \\   & & & VTP  & HM  & fDGG  & NeuroGF & HM  & fDGG  & NeuroGF \\   armadillo & 173 & 1.3 & 1778 & 194 & 59 & **0.5** & 1.03 & 0.59 & **0.51** \\ bimba & 75 & 1.1 & 985 & 82 & 20 & **0.5** & 0.67 & 0.57 & **0.46** \\ bucket & 35 & 14.1 & 500 & 18 & 16 & **0.5** & 3.35 & 0.96 & **0.18** \\ bunny & 35 & 1.4 & 374 & 29 & 10 & **0.5** & 0.87 & 0.58 & **0.44** \\ cow & 46 & 1.6 & 593 & 28 & 11 & **0.5** & 2.19 & 0.57 & **0.51** \\ dragon & 436 & 12.7 & 6209 & 246 & 145 & **0.7** & 10.6 & **0.46** & 0.68 \\ fandisk & 20 & 1.4 & 359 & 14 & 4 & **0.5** & 0.88 & 0.66 & **0.35** \\ heptroid & 287 & 2.6 & 5789 & 212 & 86 & **0.6** & 1.75 & **0.48** & 0.87 \\ maxplanck & 49 & 1.2 & 797 & 33 & 11 & **0.5** & 0.79 & 0.57 & **0.39** \\ nail & 2.4 & 4.6 & 16 & 1.4 & 0.6 & **0.4** & 2.71 & **0.42** & 0.50 \\  

Table 1: Comparison of geodesic representation accuracy and time efficiency for SSAD querying.

Figure 2: Visualization of selected testing shapes, among which the _ dragon_, _bucket_, and _mail_ meshes are highly anisotropic, and the _heptroid_ mesh is with high genus.

distance representation is measured by the mean relative error (MRE), which can be formulated as \(|d-|/ 100\%\). For shortest path evaluation, we densely interpolate the predicted and ground-truth curves to around 1K points and compute their similarity as Chamfer-\(L_{1}\) distance.

### Quantitative Evaluations and Visualization Examples

We performed quantitative evaluations on geodesic distances produced from different approaches, as compared in Table 1, where our NeuroGF achieves the lowest mean relative errors for most testing shapes. Particularly, the performance of the heat method (HM)  suffers from obvious degradation when dealing with anisotropic meshes (especially for _dragon_ and _bucket_ with anisotropy degree \(>10\)), while our approach shows satisfactory robustness. We also visualized geodesic distance fields using isolines in Figure 4, which shows the smoothness of our results. We further compared the time efficiency of different approaches (including exact VTP  for ground truth geodesic distances and paths), where [32; 10; 2] run on the CPU (Intel i5 7500), while NeuroGF runs on the GPU (NVIDIA GeForce RTX 3090). fDGG allows the user to specify the desired accuracy of geodesic distances and paths. We set its accuracy parameter \(=2.5\%\) so that its results have an accuracy similar to ours, which enables us to make a fair comparison in terms of speed. Computational results show that our approach is much faster than the others for answering online SSAD queries.

In addition, the quality of the shortest paths exported from NeuroGFs is measured in Table 2 and visualized in Figure 3. We can observe that our predicted geodesic curves are highly close to ground truths even for _heptoroid_, which is characterized by highly complicated topological structures.

### Extension to Generalizable Learning Frameworks

We made further efforts to extend the overfitting working mode of NeuroGFs introduced previously to generalizable learning frameworks. More specifically, as illustrated in Figure 5, we designed three versions of generalizable NeuroGFs using (a) _autodecoder-based_ (i.e., DeepSDF-like ), (b) _point transformer-based_, and (c) _graph convolution-based_ feature extraction strategies. Notably, NeuroGF equipped with (a) or (b) for shape encoding can directly work on point clouds during testing. We used the popular ShapeNet  mesh dataset pre-processed by , covering 13 different shape categories. We collected 3000 models from 8 categories as our training set. For each model, we only sparsely generated 2K ground-truth training pairs. For evaluation, we constructed different testing sets: 1)

   _Mesh_ & _Chamfer-\(L_{1}\)_ (\( 10^{-2}\)) \\   armadillo & 1.366 \\ bimba & 1.301 \\ nail & 0.354 \\ bunny & 1.559 \\ cow & 0.941 \\ dragon & 1.319 \\ fandisk & 0.822 \\ heptoroid & 2.244 \\ maxplanck & 1.434 \\ bucket & 1.183 \\   

Table 2: Chamfer-\(L_{1}\) errors between ground-truth and our predicted shortest path points.

Figure 4: Visualization of our predicted geodesic distance fields. \(\) Zoom in to see details.

Figure 3: Visual comparison of shortest paths.

SN-Airplane, SN-Chair, and SN-Car are collected within the same categories of _airplane_, _chair_, and _car_, each of which containing 500 models; 2) SN-8x50 is collected from the same 8 categories as in the training set, but each shape is unseen during training. 3) SN-5x50 is collected from the other 5 different categories.

Quantitative results are reported in Table 3. The testing results on (a) validate the category-specific representation capability (with about 3% MRE). The testing results on (b) show that our extended approach equipped with a powerful deep point encoder works well on point clouds for both seen and unseen categories. (c) further incorporates mesh connectivity cues, thus achieving better performance.

### Ablation Studies

In the preceding experiments, we uniformly configured \(D_{e}=256\), corresponding to \(259\)K network parameters. Here, we further investigated the effects of scaling the network size by changing \(D_{e}\) to \(64\), \(128\), and \(512\), leading to three different variants with \(35\)K and \(84\)K, and \(916\)K parameters, respectively. As illustrated in Figure 6, as the network complexity increases, the geodesic representation accuracy gets stably enhanced. Furthermore, to reveal the specific influences of the different learning components and supervision objectives involved in our approach, we performed necessary ablative analyses as presented in Table 4. We can observe that removing any of them leads to some degree of performance degradation, which demonstrates their necessity and effectiveness.

## 5 Conclusion and Discussion

This paper made the first effort to investigate learning-based neural implicit representations for 3D surface geodesics in both overfitted and generalizable working modes. The proposed NeuroGF achieves accurate and highly efficient point-to-point queries of both geodesic distances and shortest paths, which can be naturally combined with the learning of signed distances to further produce a

Figure 5: Illustration of extending our NeuroGFs to generalizable learning frameworks. From the architectural point of view, we only need to replace the single-object query point embedding module (**red box**) by a multi-object embedding module (orange box).

Figure 6: Statistics of SSAD geodesic distance querying with different network complexity.

unified geodesic and geometric representation structure. Experiments demonstrated that our approach achieves comparable, if not better, geodesic representation accuracy against previous representative computational and optimization-based approaches. We believe that NeuroGF opens up new and promising paradigms for the complicated problem of geodesic representation and computation.

While we have demonstrated superior runtime performance of NeuroGF in answering point-to-point distance queries and solving the SSAD problem, our approach is still subject to a few limitations. There is no guarantee that the generated geodesic path strictly lies on the underlying surface, as the path points may exhibit varying degrees of deviation from the surface. To enhance the accuracy of geodesic paths, post-projection/refinement techniques can be employed, utilizing direction cues from signed distance fields. As shown in Table 5, the shortest path representation accuracy will further improve after pre-processing for making curve points locate exactly on the underlying surface. Although our approach achieves highly stable and satisfactory mean relative errors, it is worth noting that the metric of maximal errors can sometimes reach higher values, as depicted in Figure 7, where the relative error can rise up to approximately \(5\%\). To address this, incorporating more advanced optimization strategies, such as online hard example mining, may be necessary.