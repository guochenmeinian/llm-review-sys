# MKGL: Mastery of a Three-Word Language

Lingbing Guo\({}^{1,2}\), Zhongpu Bo\({}^{3}\), Zhuo Chen\({}^{1,2}\), Yichi Zhang\({}^{1,2}\), Jiaoyan Chen\({}^{4}\),

**Yaorno Lan\({}^{1,2}\), Mengshu Sun\({}^{3}\), Zhiqiang Zhang\({}^{3}\), Yangyifei Luo\({}^{5}\), Qian Li\({}^{6}\), Qiang Zhang\({}^{1,2}\), Wen Zhang\({}^{7,2}\)1 and Huajun Chen\({}^{1,2}\)1 \({}^{1}\)College of Computer Science and Technology, Zhejiang University \({}^{2}\)ZJU-Ant Group Joint Lab of Knowledge Graph \({}^{3}\)Ant Group \({}^{4}\)Department of Computer Science, The University of Manchester \({}^{5}\)School of Computer Science and Engineering, Beihang University \({}^{6}\)School of Computer Science, Beijing University of Posts and Telecommunications \({}^{7}\)School of Software Technology, Zhejiang University**

###### Abstract

Large language models (LLMs) have significantly advanced performance across a spectrum of natural language processing (NLP) tasks. Yet, their application to knowledge graphs (KGs), which describe facts in the form of triplets and allow minimal hallucinations, remains an underexplored frontier. In this paper, we investigate the integration of LLMs with KGs by introducing a specialized KG Language (KGL), where a sentence precisely consists of an entity noun, a relation verb, and ends with another entity noun. Despite KGL's unfamiliar vocabulary to the LLM, we facilitate its learning through a tailored dictionary and illustrative sentences, and enhance context understanding via real-time KG context retrieval and KGL token embedding augmentation. Our results reveal that LLMs can achieve fluency in KGL, drastically reducing errors compared to conventional KG embedding methods on KG completion. Furthermore, our enhanced LLM shows exceptional competence in generating accurate three-word sentences from an initial entity and interpreting new unseen terms out of KGs.

## 1 Introduction

Knowledge graphs (KGs) are important resources for many data-driven applications, offering structured repositories of factual information that empower a variety of intelligent tasks . Yet, the strides made through the rapid advancement of large language models (LLMs) have challenged the conventional reliance on KGs. Nonetheless, LLMs are often critiqued for their susceptibility to generating factually incorrect or nonsensical outputs-a phenomenon known as the "hallucination problem" . Many recent studies propose to resort KGs to mitigate this problem .

In this paper, we investigate the capacity of LLMs to assimilate and generate knowledge graph facts proficiently. For example, the natural language sentence, "Wendee Lee is an actor in Mighty Morphin Power Rangers," translates into a KG triplet format as _(Wendee Lee, actor of, Mighty Morphin Power Rangers)_. It is worth noting that, English names such as _Wendee Lee_ and _Mighty Morphin Power Rangers_, while can serve as identifiers for entities, are perceived as atomic elements within the KG framework. They are indivisible and distinct from their constituent words or characters.

When the LLMs interpret these text identifiers as mere sequences of tokens, they risk producing output that misrepresents entities or relations, therefore compromising the integrity of KG-based tasks. Consequently, existing research that integrates LLMs with KGs tends to limit its scope to relatively straightforward tasks. Examples of these limitations include validating the correctness offully-formed triplets , or picking an appropriate entity from a limited set of options . Given the sheer volume of entities in a KG, such narrow applications fall short in addressing more complicated tasks like KG completion, wherein a model predicts missing components of a provided incomplete triplet, e.g., identifying the unknown tail entities in _(Wendee Lee, actor of,?)_ against thousands of candidates. While these methods may lean on pretrained KG embedding models to narrow down possible candidates, the process remains inefficient.

To transcend the limitations on predictive scope, we propose a novel approach, named _MKGL_, to instruct an LLM in the lexicon of the unique _KG language (KGL)_. KGL sentences are strictly three-word sentences, starting with an entity noun, followed by a relation verb, and ending with another entity noun. The vocabulary of KGL does not immediately resonate with the machines. A common triplet like _(Wendee Lee, actor of, Mighty Morphin Power Rangers)_ is encoded abstractly as \(e_{i}r_{k}e_{j}\), with \(e_{i}\), \(e_{j}\) symbolizing the entity nouns and \(r_{j}\) denoting the relation verb. For an LLM such as Llama-2 , these symbols are entirely alien, absent from its pretraining corpus. Our investigation thus centers on how an LLM can navigate and master this specialized, atomic language of KGs.

As illustrated in Figure 1, to bridge this comprehension gap, we introduce an English-KGL dictionary, and the LLM is supposed to assemble new KG sentences using the provided linguistic building blocks. The basic elements of KGL, while different from our natural language, are familiar to the LLM as they are constructed from the pretrained token embeddings. We leverage a context retriever to retrieve the text information and relational information of a KGL token, which transforms the sequential token embeddings of its name into an embedding vector. Subsequently, we update the LLM token embedding layer with new KGL token embeddings. In the scoring layer, we also employ a KG score retriever to supplement the LLM with extra KG relational information for prediction.

Instructing an LLM in KGL offers three main advantages over prompt-based methods [10; 13] or conventional KG embedding methods [14; 15]: (1) Broadened applicability. KGL tokens originate from textual tokens of an LLM, thus our method does not mandate that all entities be observed during training. (2) End-to-end framework. Unlike recent LLM-based methods that necessitate pre-sorted results from conventional KG embedding methods, our approach can rapidly rank all candidate entities at one-step. (3) High efficiency. The representations of KG tokens are derived from pretrained token embeddings rather than learned from scratch. The proposed KGL context and score retrievers also leverage a LoRA-like adaption. Using Llama-2-7b  as the base LLM, the number of training parameters is less than 0.3%.

Figure 1: A workflow of MKGL (from bottom to top). The instruction to the LLM includes a dictionary exemplifying the entity \(e_{i}\) and relation \(r_{k}\). The task is to construct new KG sentences initialized with \(e_{i}r_{k}\). The tokenizer first tokenizes the input text, where the entities and relations are represented as special tokens out of the original vocabulary. (a) To process these special tokens, MKGL collects the embeddings of their constituting text tokens; (b) Then, a retriever performs a 4-step process to aggregate textual and relational information into KGL token embeddings. The first and the last steps are LoRA-like down-scaling and up-scaling operations ; (c) The output is assigned as the embeddings of these special KGL tokens; (d) Similar to the context retriever, we design a score retriever to retriever the score information. (f) The output is in a form of probability distribution among candidate entities.

However, instructing an LLM in KGL also has its limitations, as it demands more computational resources compared with conventional methods. For instance, fine-tuning MKGL (Llama-2-7b) on the FB15k-237 dataset  to outperform most conventional methods requires only \(1\) epoch. Nevertheless, with \(8\) A100 GPUs, it still takes half an hour, which is comparable to training a TransE model from scratch with a single GPU.

## 2 Related Works

We category the related works into two groups:

Knowledge Graph CompletionKG completion can be regarded as a classification problem like many NLP tasks [17; 18; 19; 20; 21], such as node classification and semantic role labeling. However, its label space is significantly larger than most NLP tasks. For example, the WN18RR  dataset contains over 40,000 different entities, making it impractical to simply feed them all as possible results and let the LLM select one as output. Most conventional KG completion methods are embedding-based methods, including the triplet-based methods [23; 24; 25; 26; 27], e.g, TransE , ComplEx , RotatE ; the GNN-based methods [15; 28; 29; 30; 31; 32], e.g., DAN , CompGCN , CoKE ; and other neural-based methods [33; 34; 35; 22], e.g., ConvE  and RSN . Despite differences in their neural methods and input forms, all these methods focus on relational information and are not good at utilizing other types of information such as textual attributes.

Pretrained Language Models for Knowledge GraphsLeveraging Pretrained language models for KG completion has been explored for many years . Some works treat BERT as a GNN model to encode graph features [37; 30], while others consider the textual information of KGs and use pretrained BERT to encode the textual labels of entities and relations [38; 39; 40; 14]. The resulting outputs are regarded as the entity and relation embeddings or their concatenations.

With the rapid advancements in leveraging LLMs for KG completion, recent works have begun designing prompts or instructions to guide LLMs in this task. Initially, the results were not promising , as it appeared that even state-of-the-art LLMs without context information could not outperform basic KG embedding models like TransE. However, subsequent works such as KGLama  and KoPA  discovered that LLMs might perform better in triplet classification, i.e., estimating the correctness of a given triplet.

More recently, KICGPT  has proposed leveraging in-context learning [43; 44] to provide explicit instructions and guide the behavior of LLMs. This involves a triplet-based KG embedding model to generate the initial rankings of the top-k entities, followed by a multi-round interaction with the LLM, providing textual information and triplet demonstrations for the query entity and relation. The LLM should then re-rank the initial list. KICGPT has achieved state-of-the-art results on KG completion tasks. However, its performance not only depends on the LLM and the instructions but also on the pretrained KG embedding model. Additionally, KICGPT cannot be deployed offline due to the demand of commercial LLMs . It also cannot provide embeddings for downstream tasks.

In contrast, the proposed MKGL has an embedding module based on the LLM token embeddings and KG relational information, which overcomes the weaknesses of existing KG embedding methods that cannot provide embeddings for unseen entities. The context information is implicitly encoded into the KGL token embeddings and efficiently captured by the LLM during fine-tuning.

## 3 Mastery of KG Language

In this section, we discuss the details of MKGL. We first introduce the general architecture of an LLM and how to convert a KG triplet into a fine-tuning instruction. Then, we present the details of constructing KGL token embeddings and scores. Finally, we illustrate how to train an MKGL and analyze its complexity.

### Preliminaries

We start by a brief introduction to KGs and LLMs.

Knowledge Graph and Knowledge Graph LanguageKnowledge graphs are conceptualized as directed, multi-relational graphs. We describe a knowledge graph by \(=(,,)\), where \(\), \(\), \(\) are the sets of triplets, entities, and relations, respectively. KG language (KGL) is construed as a rigorously defined three-word construct, mirroring the structure of a simple sentence. Specifically, a KGL sentence \(e_{i}r_{k}e_{j}\) invariably commences with an entity noun \(e_{i}\), proceeds with a relation verb \(r_{k}\), and culminates with another entity noun \(e_{j}\). Analogous to the syntactic conventions in Chinese, KGL sentences eschew the use of spaces or commas to demarcate KGL terms.

Knowledge Graph CompletionKG completion is one of the most important tasks in the KG area. The target of KG completion is to predict the head entity \(e_{i}\) given the relation and tail entity \((?,r_{j},e_{k})\), or predict the tail entity \(e_{k}\) given \((e_{i},r_{j},?)\). In the scenario of KGL, this task is equivalent to completing the KG sentence \(?r_{j}e_{k}\) or \(e_{k}r_{j}?\).

The inductive KG completion focus on completing an unobserved KG \(_{}=(_{},_{}, _{})\). Specifically, the relation set \(_{}\) is identical to the original set \(\), but the inductive entity set \(_{}\) shares no elements with \(\), i.e., \(_{}=\). The triplet set \(_{}\) is further split into the fact set \(_{}\) and test set \(_{}\). We train a model on the original triplet set \(\) and use the fact set \(_{}\) as context to evaluate it on the test set \(_{}\).

Large Language ModelsAs depicted on the left side of Figure 1, the architecture of a typical LLM can be divided into four main components:

* Tokenizer, which breaks down the input sequence of words \(w_{0},w_{1},...,w_{m}\) into tokens \(t_{0},t_{1},...,t_{n}\);
* Token embedding, which maps the input tokens \(t_{0},t_{1},...,t_{n}\) to a sequence of low-dimensional vectors \(_{0},_{1},...,_{n}\);
* Transformer \(\), the core of the LLM, which consists of multiple attention-based blocks that process the input token embeddings into hidden states: \[_{0},_{1},...,_{n}=(_{0}, _{1},...,_{n});\] (1)
* Score layer, which features a weight matrix \(^{N d}\) with an identical shape to the token embedding matrix \(^{N d}\), where \(N\), \(d\) denote the vocabulary size and hidden size, respectively. The score layer projects the output of Transformer at the \(n\)-th step to a probability distribution \(_{n+1}\) for predicting the next token \(t_{n+1}\): \[_{n+1}=_{n},\] (2)

### Instruct an LLM in KG Language

Recent studies reveal that LLMs harbor the potential to acquire unfamiliar natural languages [46; 47]. Given this premise, it is of particular interest to investigate how LLMs might interpret and operate within our KGL. We first design a prototype instructional text for this purpose. For a given triplet _(Wendee Lee, actor of, Mighty Morphin Power Rangers)_, suppose that the task is to predict the tail entity _Mighty Morphin Power Rangers_, the instructional text is formatted as follows:

**Instruction 3.1**.: _Supposed that you are a linguist versed in an esoteric three-word knowledge graph language. Given the following dictionary comprising two words from this language, please kindly complete the following sentence: \(<\)kgl: Wendee Lee\(>\)\(<\)kgl: actor of\(>\)_

Here, \(<\)kgl: Wendee Lee\(>\) denotes the definitive KGL token (corresponding to \(e_{i}\) in previous sections and Figure 1) assigned to the entity _Wendee Lee_. We enrich the tokenizer's vocabulary with all pertinent KGL tokens, thereby enabling it to translate these KGL tokens into token IDs, which append sequentially to the LLM's original vocabulary range. It is worth noting that we only provide at most one example KGL sentence for each KGL word. Our intention is to introduce the schematics of KGL sentences to the LLM, rather than leveraging augmented KG data for in-context learning. To mitigate potential biases, the example sentences are sampled randomly.

  Word & Type & Translation & Example \\  \(<\)kgl: Wendee Lee\(>\) & entity noun & Wendee Lee & \(<\)kgl: Wendee Lee 

### In-Context Learning versus Special Token Embedding

The practice of incorporating supplementary context information alongside instructional prompts, known as in-context learning (ICL), has proven effective in enhancing performance across many NLP tasks . However, the concatenation of retrieved context on KGs with the input text can easily exceed the input length constraints of LLMs. Processing such long input sequences remains computationally intensive even with truncation. To address these constraints, we propose an alternative approach to encode context information into compact vector representations. Our experiments in Section 4.6 also demonstrate its superiority in terms of both efficiency and performance.

### LoRA-based KGL Context Retriever

We propose the low-rank adaption (LoRA)-based KGL context Retriever \(R_{}\) to effectively aggregate textual and KG information into KGL token embeddings. Typically, the vocabulary scope of a KG (comprising both entities and relations) usually surpasses that of an LLM. For instance, WN18RR is a KG completion dataset set sampled from WordNet . It has over 40,000 unique entities, while the vocabulary size of Llama-2-7b is 32,000. Therefore, initializing new token embeddings for each KG elements and optimizing them from scratch would be prohibitively resource-intensive.

Moreover, the dynamic nature of real-world KGs consistently introduces new entities. This is analogous to the evolution of human language, where new words are often synthesized or derived from existing ones. Drawing inspiration from this linguistic adaptability, we propose leveraging existing textual tokens to generate new KGL tokens, thereby avoiding the computational burden of learning unique embeddings for every KG element.

Scale DownAs illustrated in Figure 2, the first step is to reduce the dimensionality of LLM token embeddings to lower computational demands during text and KG context aggregation. Inspired by LoRA , we leverage a projection matrix \(_{T}^{d r}\) to transform the token embedding matrix \(^{N d}\) into a reduced space \(^{N r}\):

\[_{r}=W_{T}, \]

where \(_{r}^{N r}\) represents the compact token embedding matrix.

Retrieve Text InformationWe leverage a text encoder to encode the textual token embeddings of each KGL token into a unified vector. For example, the entity name "Mighty Morphin Power Rangers" would be converted into individual token embeddings \(_{e_{i},0},_{e_{i},1},...,_{e_{i},n}\), which are then aggregated into a single vector for the entity \(e_{i}\):

\[_{e_{i}}=_{}(_{e_{i},0},_{ e_{i},1},...,_{e_{i},n}), \]

Figure 2: Illustration of LoRA-based KGL Context Retriever. (a) The token embeddings are first scaled down to lower-dimensional vectors; (b) For each input KGL token, their constituting textual token embeddings are aggregated by a PNA encoder; (c) The output embeddings are further aggregated by multi-layered PNA encoders to retrieve neighboring information within KG; (e) The final embeddings are assigned to the KGL tokens.

where \(_{e_{i}}\) is the textual token embedding for \(e_{i}\). The choice of the encoder \(_{}\) is free. In this paper, we leverage principal neighbourhood aggregation (PNA) , which can be roughly understood as applying multiple pooling operations (including max, min, mean, std etc.) on the token embedding sequences. A detailed introduction to PNA can be found in Appendix C.

Retrieve KG InformationWe employ a multi-layered PNA encoder \(_{}\) to aggregate the KG information of \(e_{i}\) and its adjacent entities, which can be formulated as:

\[^{}_{e_{i}}=_{}(_{e_{i}}, (e_{i})), \]

where \((e_{i})\) denotes the neighboring entities to \(e_{i}\). The adoption of PNA for encoding both textual and relational data of KGL tokens is due to its parameter efficiency and superior performance compared to attention-based alternatives like GAT . An empirical comparison of different encoders can be found in Appendix F.

Scale UpTo finalize, we adjust the dimensionality of the output embeddings to align with the LLM input requirements:

\[^{}_{e_{i}}=^{}_{e_{i}}_{B} \]

For the sake of clarity, we will continue to use \(_{e_{i}}\) to represent the KGL token embedding in subsequent discussions. For efficiency, we retrieve the KG information only for entities. This operation also make the embeddings of entities and relations distinguishable.

### Reconstructing Vocabulary or Constraining the Output Space

While recent studies have adapted LLMs to various tasks by either restricting the output space or reformulating tasks into multiple-choice questions , such strategies pose challenges for KG completion. Specifically, the existing methods are inapplicable to entity constrastive learning as their main objective is optimized against text tokens instead of entities. Also, they incur significantly slow inference times, as the LLM must traverse to the output tree's leaf nodes to generate predictions. Even then, the generation of top-\(k\) results, dependent on beam search parameters, may not accurately reflect the true likelihoods of entities.

In contrast, in this paper we propose a new approach to reconstruct the KGL scores through LLM's score layer and hidden states, providing a one-shot probability distribution for all candidates. Our method seamlessly integrates with contrastive loss and negative sampling techniques , making it highly compatible with prevalent KG completion frameworks. This compatibility also ensures that MKGL has the potential of being applied for downstream KG embedding tasks .

### LoRA-based KGL Score Retriever

We propose a LoRA-based KGL score retriever \(R_{}\) to produce the probability distribution of KGL tokens, which can be formulated as follows:

\[^{} =W_{S},^{}_{n}=_{n} _{H}\] (Down Scaling) (7) \[^{}_{j} =_{}(^{}_{j,0},^ {}_{j,1},...,_{j,n}),\] (Text Information Retrieval) (8) \[^{}_{e_{j}|e_{i},r_{k}} =_{}([^{}_{n},^{ }_{j}],(e_{j}))\] (Conditioned Retrieval) (9) \[p_{e_{j}|e_{i},r_{k}} =^{}_{e_{j}|e_{i},r_{k}}_{O}\] (Score Estimation) (10)

The score retriever also starts from a down-scaling layer to reduce the dimensionality of the score matrix \(^{N d}\) to \(_{R}^{N r}\) with \(_{S}\), and similarly scales down the LLM's output hidden vector \(_{n}\) with \(_{H}\). Subsequently, the text information (i.e., the token score vectors \(^{}_{j,0},^{}_{j,1},...,_{j,n}\)) associated with target entity \(e_{j}\) is fed to the score text encoder \(_{}\) to construct the KGL score vector \(^{}_{j}\). It is then concatenated with the LLM hidden state \(^{}_{n}\) to obtain the conditioned input \([^{}_{n},^{}_{j}]\). Upon gathering the neighboring information of the target entities via a multi-layered PNA \(_{}\), an output matrix \(_{O}^{r 1}\) is employed to map the result \(^{}_{e_{j}|e_{i},r_{k}}^{r}\) to the \(1\)-d probability estimate \(p_{e_{j}|e_{i},r_{k}}\).

OptimizationWith the above score retriever, estimating the probability for any candidate entity becomes straightforward at a single step. To refine MKGL, we consider a contrastive loss leveraged in most existing KG embedding methods [22; 23; 28; 34], expressed as:

\[=_{(e_{i},r_{k},e_{j})_{}}-( p_{e_{j}|e_{i},r_{k}})+_{}(e_{j})|}_{e_{ }_{}(e_{j})}(1-p_{e_{}|e_{i}, r_{k}}), \]

where \(_{}(e_{j})=\{e_{}|e_{} e_{j},e_{ }\}\) is the sampled negative entity set for the target entity \(e_{j}\). The loss function \(\) is in a form of a binary cross-entropy, contrasting the likelihood of correctly predicting the relation \(p_{e_{j}|e_{i},r_{k}}\) as positive example, against the probabilities of erroneously predicting relations \((e_{i},r_{k},e_{})\) as negative examples. We also present an algorithm to demonstrate the step-by-step fine-tuning process, please refer to Appendix D for details.

### Complexity

It is clear that the primary computational cost for MKGL lies in the LLM. By employing LoRA-based KGL retrievers to retrieve context vectors instead of texts, we can significantly reduce the major expenditure. For instance, our retrievers can reduce the average input lengths from 811.2 to 91.4 on the FB15k-237 dataset, compared to using one-hop neighbors for in-context learning. All operations within the LoRA-based retrievers are performed under low dimensionality. Furthermore, the token embeddings and score matrix of the LLM are frozen during fine-tuning, thus ignoring their gradient computation. In the worst case, the complexity of text information retrieval is \((N_{}L_{}r)\), where \(N_{}\), \(L_{}\), \(r\) are the number of KGL tokens, maximum text token lengths of KGL tokens, and the reduced dimensionality, respectively. Subsequently, the complexity of KG information retrieval in the worst case is linear to the number of triplets, i.e., \((||N_{}r)\), where \(||\), \(N_{}\) denote the number of triplets in the KG and the number of PNA layer, respectively.

## 4 Experiments

In this section, we evaluate the performance of the proposed MKGL through extensive experiments, comparing it against both LLM-based and KG embedding methods. The source code and datasets are available at github.com/zjukg/MKGL.

### Datasets

We evaluate MKGL on the FB15k-237 and WN18RR datasets, which are widely used by most KG completion methods [22; 23; 26; 28; 34; 56; 57]. We also evaluate MKGL on the inductive version of

    &  &  \\   & MRR\(\) & Hits@1\(\) & Hits@3\(\) & Hits@10\(\) & MRR\(\) & Hits@1\(\) & Hits@3\(\) & Hits@10\(\) \\  TransE  &.310 &.218 &.345 &.495 &.232 &.061 &.366 &.522 \\ RotatE  &.338 &.241 &.375 &.533 &.476 &.428 &.492 &.571 \\ TuckER  &.358 &.266 &.394 &.544 &.470 &.443 &.526 &.526 \\  CompGCN  &.355 &.264 &.390 &.535 &.479 &.443 &.494 &.546 \\ DAN  &.354 &.261 & - &.544 &.458 &.422 & - &.537 \\ CoKE  &.364 &.272 &.400 &.549 &.484 &.450 &.496 &.553 \\  KG-BERT  & - & - & - &.420 &.216 &.041 &.302 &.524 \\ StAR  &.296 &.205 &.322 &.482 &.401 &.243 &.491 &.709 \\ KGLM  &.289 &.200 &.314 &.468 &.467 &.330 &.538 &.741 \\ FTL-LM  &.348 &.253 &.386 &.521 &.543 &.452 &.637 & **.773** \\ DET  &.376 &.281 & - &.560 &.507 &.465 & - &.585 \\  KG-Llama-7b  & - & - & - & - & - &.242 & - & - \\ GPT 3.5Y turbo  & - &.267 & - & - & - &.212 & - & - \\ KICOPT  &.412 & **.327** &.448 &.554 &.549 &.474 & **.585** &.641 \\  MKGL & **.415** &.325 & **.454** & **.591** & **.552** & **.500** &.577 &.656 \\   

Table 2: The KG completion results on FB15k-237 and WN18RR. The best and second-best results are **boldfaced** and underlined, respectively. \(\): higher is better; \(\): lower is better. -: unavailable entry.

these two datasets . We follow REDGNN  to evaluate MKGL on all entities rather than \(50\) sampled candidates. Please refer to Appendix E for dataset statistics.

### Settings

For our experiments, we employ Llama-2-7b  as the base LLM and train MKGL using \(8\) A100 GPUs. A standard LoRA adaptation is applied to the query and value layers of the LLM. Full hyper-parameter details are available in Appendix D. We evaluate performance using MRR (mean reciprocal rank of target entities) and Hits@\(k\) (percentage of target entities ranked in the top \(k\)).

Our baselines include conventional KG embedding methods such as TransE , RotatE , and TuckER ; GNN-based methods like CompGCN , DAN , and CoKE ; methods that integrate language models including KG-BERT , StAR , KGLM , FTL-LM , and DET ; and LLM-based methods: KG-Llama , GPT 3.5 , and KICGPT . In the inductive scenario, we compare against rule-based reasoning methods such as RuleN , NeuralLP , DRUM , GraIL  and RED-GNN , acknowledging that standard methods fail to predict relations without entity embeddings.

### Knowledge Graph Completion

The knowledge graph completion results are presented in Table 2. MKGL outperforms other baselines in nearly all metrics. Notably, MKGL and KICGPT significantly surpass other LLM-based methods, demonstrating the importance of KG relational information. Contrarily, many BERT-based methods fall short against GNN-based methods, suggesting that merely incorporating text information may not yield the anticipated benefits. In summary, the proposed MKGL clearly outshines its counterparts, particularly those founded on commercial LLMs.

To our knowledge, existing LLM-based methods have not addressed the inductive KG completion challenge. We benchmark MKGL against the state-of-the-art inductive methods. Although we can

Figure 3: Illustration of KGL modeling. The left shows the performance degradation (in lighter shades) from consecutive predictions of relations and entities. The right presents sentences generated by MKGL, with deeper hues indicating higher probabilities. In the final column, colors grey, green, yellow, and red represent existing, valid, valid but not within the KG, and invalid, respectively.

    &  &  \\   & MRR\(\) & Hits@1\(\) & Hits@10\(\) & MRR\(\) & Hits@1\(\) & Hits@10\(\) \\  RuleN  &.363 &.309 &.446 &.668 &.635 &.730 \\ NeuralLP  &.325 &.243 &.468 &.649 &.592 &.772 \\ DRUM  &.333 &.247 &.474 &.666 &.613 &.777 \\ GraIL  &.279 &.205 &.429 &.627 &.554 &.760 \\ RED-GNN &.369 &.302 &.483 &.701 &.653 &.799 \\ ChaGPT 3.5 Turbo  & - &.288 & - & - &.279 & - \\  MKGL & **.475** & **.400** & **.595** & **.746** & **.700** & **.822** \\   

Table 3: The inductive KG completion results on FB15k-237-ind and WN18RR-ind (v1). The results on other subsets can be found in Appendix F.

not assess KICGPT  due to unavailable source code, it is worth mentioning that our MKGL could potentially augment KICGPT by supplying a candidate list, facilitating seamless integration between the two methods. We present the results in Table 3. MKGL significantly outperforms all the baseline methods across metrics. As most inductive reasoning methods do not have an embedding module for entities, the proposed MKGL represents the first embedding-based method to deliver state-of-the-art results in inductive KG completion.

### Knowledge Graph Language Modeling

Beyond its capability as a KG completion tool, MKGL also serves as a language model for KG languages. To evaluate its proficiency in generating KGL sentences, we employ a sequence generation loss and remove the relation context from the input prompts. We leverage the second-to-last output of the LLM for relation prediction.

The results are shown in Figure 3. The left section contrasts the sequence prediction results against standard KG completion, revealing only a modest loss in performance. MKGL still outperforms many conventional methods, especially on WN18RR dataset. The right panel displays sample sentences generated by MKGL, illustrating its potential to discover legitimate KGL sentences absent from the existing KG. We observe that WN18RR is more difficult than anticipated as it contains many plausible entities that challenge even an LLM's discernment.

### Ablation Study

We conduct ablation studies to assess the importance of each module, as detailed in Table 4. The unmarked cells indicate that we either substitute the text retrieval module with a learnable embedding module or remove the KG retrieval module. Clearly, the method with complete features achieves best results, while replacing or removing either module significantly impacts performance. Notably, removing the KG retrieval module yields more performance loss on WN18RR, as many entities in this dataset have similar names. For example, there are \(14\) different entities named "call". In this case, incorporating with KG information becomes necessary.

### Computational Cost

We examine the computational efficiency of our method (MKGL) relative to "in-context" baselines. Specifically, we develop several variants: LLM randomly-initialized new entity token embeddings (NewToken), LLM with KGL context from 1-hop neighbors (NewToken (1-hop)), LLM with KGL context from 2-hop neighbors (NewToken (2-hop)), and MKGL without score retriever (MKGL w/o

    &  &  &  \\  Text & KG & Text & KG & MRR\(\) & Hits@1\(\) & Hits@10\(\) & MRR\(\) & Hits@1\(\) & Hits@10\(\) \\  \(\) & \(\) & \(\) & \(\) & **.415** & **.325** & **.591** & **.552** & **.500** & **.656** \\  & \(\) & \(\) & \(\) &.382 &.294 &.556 &.541 &.482 &.649 \\  & & \(\) & \(\) &.365 &.272 &.550 &.512 &.470 &.622 \\  & & & \(\) &.359 &.260 &.546 &.492 &.437 &.615 \\  & & & &.335 &.247 &.535 &.466 &.376 &.574 \\   

Table 4: Ablation studies on FB15k-237 and WN18RR.

Figure 4: A comprehensive comparison between the methods with randomly-initialized new entity token embeddings (denoted by NewToken) and MKGL on FB15k-237. 1-hop and 2-hop are the versions leveraging the 1-hop and 2-hop KG neighboring information. MKGL w/o SR denotes MKGL without the score retriever.

SR). The results are shown in Figure 4. MKGL surpasses all alternatives in performance. NewToken variants slightly lag behind MKGL w/o SR, but notably, our proposed methods demand fewer trainable parameters than NewToken variants. By encoding all context information within KGL token embeddings, the average input length is significantly reduced, which decreases training time considerably. Moreover, MKGL supports larger batch sizes during both training and inference phases, enhancing computational efficiency.

## 5 Conclusion and Future Work

In this paper, we propose MKGL to instruct the LLM in the language of KGs. MKGL employs a context retriever that efficiently provides LLMs with pertinent textual and relational context, markedly reducing input lengths relative to in-context-learning and supervised fine-tuning methods. Meanwhile, MKGL also leverages a score retriever to supply score information and aid in KGL inference. Extensive experiments confirm the superiority of MKGL in terms of both performance and computational efficiency. The proposed context and score retrievers point out a new direction in incorporating LLMs with semantic data, such as question answering and entity linking. They may also shed lights on a more broaden area where the input cannot be precisely represented by text, e.g., node classification and protein representation learning. Furthermore, the construction of KGL vocabulary enables contrastive learning not only limited on tokens, which may provide insights on general machine learning. Therefore, there are plenty of future directions. We would like to pretrain LLM using the mixture corpora of KG and natural languages, such that the LLM could understand and create responses with linked data.