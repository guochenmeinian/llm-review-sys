# Modelling Microbial Communities

with Graph Neural Networks

 Albane Ruaud

Cluster of Excellence - ML for Science

University of Tubingen, Germany

aruaud@tue.mpg.de

&Cansu Sancaktar

Max Planck Institute for

Intelligent Systems

Germany

&Marco Bagatella

ETH Zurich, Switzerland

Max Planck Institute

for Intelligent Systems

Germany

&Christoph Ratzke

Cluster of Excellence - CMFI

University of Tubingen, Germany

&Georg Martins

University of Tubingen

Max Planck Institute for

Intelligent Systems, Germany

###### Abstract

Understanding the interactions and interplay of microorganisms is a great challenge with many applications in medical and environmental settings. In this work, we model bacterial communities directly from their genomes using graph neural networks (GNNs). GNNs leverage the inductive bias induced by the set nature of bacteria, enforcing permutation invariance and granting combinatorial generalization. We propose to learn the dynamics implicitly by directly predicting community relative abundance profiles at steady state, thus escaping the need for growth curves. On two real-world datasets, we show for the first time generalization to unseen bacteria and different community structures. To investigate the prediction results more deeply, we create a simulation for flexible data generation and analyze effects of bacteria interaction strength, community size, and training data amount.

## 1 Introduction

Microorganisms are ubiquitous and essential: in our gut, they digest our food and influence our behavior ; in industrial plants, they treat our wastewater ; their biomining ability outside of Earth was even tested on the International Space Station . Accordingly, understanding their functioning and optimizing their use are crucial challenges.

Microbial communities are driven by interactions that dictate the assembly of communities and consequently microbial output. To comprehend the functioning of a community, it is necessary to characterize these interactions. Ideally, one would acquire time-series data for every combination of bacteria to obtain a complete understanding of their dynamics. However, in reality, this is not possible because the number of experiments grows exponentially with the number of bacteria. Accordingly, several challenges are faced when modeling bacterial interactions: (i) available data generally depict a single time-point of a community; (ii) models of interactions should generalize to new bacteria and communities to limit the need for additional experiments; (iii) models should be interpretable and provide insights on the system.

The most common approach to model interactions in bacterial communities is to use generalized Lotka-Volterra models [17; 32; 28] (gLV, see Sec. 2.1). However, these deterministic models fit parameters on time-series data for each bacterium in the system: therefore, they cannot generalize to new bacteria and are limited by experimental data. Furthermore, as they only model pairwiseinteractions, they may fail to recover higher-order/complex interactions [8; 17; 28]. However, it should be noted that there is a debate in the field about whether bacterial communities are shaped by simple [14; 16] or complex [1; 8] assembly rules. To address the potential complexity of microbial systems, neural networks are emerging as alternatives to gLV models, as they can capture complex interactions [3; 26]. For instance, Baranwal et al.  fit recurrent neural networks to microbial communities of up to 26 bacteria to predict their assembly and ultimately a function of interest, namely butyrate production. Although their results are encouraging, their models are fitted on growth trajectories and rely on time-series, impeding their generalization to new bacteria and communities.

In this work, we model bacterial communities directly from bacterial genomes using graph neural networks (GNNs). Our contribution can be described as follows.

1. We propose using GNNs as a powerful class of function approximators to model microbial communities, thus granting permutation invariance and combinatorial generalization.
2. We explore learning community dynamics directly from genomes: since nucleic acids are the universal information carrier of living organisms, this can in principle allow generalizing to any unseen microorganisms.
3. We propose learning dynamics implicitly by directly predicting community relative abundance profiles at steady state, thus escaping the need for growth curves.
4. We propose a simulation framework to facilitate explorative benchmarks for models of microbial communities using genome features.

In practice, we evaluate the ability of conventional architectures (i.e. MLPs) and GNNs to model bacterial communities on two publicly available datasets [14; 3], and further explore hypotheses in simulations. Our results show that GNNs can accurately predict the relative abundances of bacteria in communities from their genomes for communities of various compositions and sizes. Furthermore, GNNs can generalize to marginally bigger communities and new bacteria not seen during training.

## 2 Methods

### Terminology and problem definition

Bacterial communitiesA _bacterium_, plural _bacteria_, is a unicellular microorganism. Bacteria are classified via a taxonomy based on the DNA, the finer-grained groupings being the _genus_, _species_, and _strain_. The bacteria in one strain are clones with almost identical DNA. In this work, we will use the species designation to refer to different bacteria. A bacterial _community_ is formed by two or more species of bacteria that grow in the same environment. A community can be described by a set \(S\) of bacterial species. At any time \(t\), each bacterial species \(s_{i} S\) is present in the environment in _abundance_\(n_{i}(t)\). We define \(y_{i}(t):=n_{i}(t)/_{j[1,|S|]}n_{j}(t)\) as the _relative abundance_ of bacterium \(s_{i}\) at time \(t\). Over time, these metrics vary according to the properties of each species (e.g. growth rate), as well as complex inter-species interactions. Extrinsic factors may affect the amount of bacteria in the environment, for instance, the amount of resources, but we will ignore them for simplicity as in previous work . This is especially justified in the case of experimental data from controlled environments .

Generalized Lotka-Volterra modelOur method learns to model community dynamics implicitly through a neural network and thus makes minimal modeling assumptions. Nevertheless, to give an intuition of how bacterial communities change over time, we now describe a simplified predictive model.

Figure 1: We propose to leverage Graph Neural Networks to implicitly learn bacterial communitiesâ€™ dynamics from bacterial genomes. This method allows accurate predictions of steady-state community profiles and generalization to larger communities and unseen bacteria.

The generalized Lotka-Volterra model [23; 34] describes the change in abundances in the environment [32; 17] according to

\[n_{i}}{t}=n_{i}(t)_{i}1-}_{j=1}^{|S|}a_{i,j}n_{j}(t),\] (1)

with \(S\) the set of bacterial species in the environment. For a given species \(s_{i} S\), \(_{i}\) is the growth rate and \(K_{i}\) represents the carrying capacity, which limits the amount of bacteria that can exist in the environment. Finally, \(a_{i,j}\) is an interaction factor describing the effect of species \(s_{i}\) on species \(s_{j}\), and \(a_{i,i}=1\  i[1,|S|]\).

GenomesBacterial genomes consist of DNA sequences organized into genes, coding for all information related to bacterial functioning, e.g. metabolism, growth. Thus, genomes can be represented by the presence/absence of genes or groups of genes. An example of gene grouping is their mapping to the KEGG Orthology database to group them by molecular function . For instance, the genome of _Anaerostipes caccae_ carries the gene coding for the enzyme EC 1.3.8.1, which is a butyryl-CoA dehydrogenase belonging to the KEGG group KO K00248. Through the KEGG Orthology database mapping, genes coding for proteins with similar functions across species have the same annotation, and bacteria with similar molecular abilities have more similar representations.

In the context of this work, we represent genomes using feature vectors. Such vectors should have the same dimensionality and semantics across all bacteria. To represent all bacteria in a unified way, we consider all genes that occur in any genome in the pool of bacteria and record their presence/absence in the feature vector. Given an ordered set of \(M\) genes \((g^{k})_{k=0}^{M}\), we represent the genome of species \(s_{i} S\) as a binary indicator vector \(_{i}=(x_{i}^{k})_{k=0}^{M}\) such that \(x_{i}^{k}\) is one if gene \(g^{k}\) is present in the genome of \(s_{i}\), and zero otherwise.

TaskOur aim is to predict the composition of bacterial communities \(C S\) at steady state from the genomes of the mixed bacteria. More specifically, we cast this task as a supervised learning problem. Assuming an equilibrium is reached at time-step \(T\), our learning target is the observed relative abundance of each bacterial species \(s_{i} C\) at equilibrium: \((T)=(y_{1}(T),,y_{|C|}(T))\). Our inputs are the feature vector representation of genomes of bacteria present in the mixture \(_{i}\  i[1,|C|]\). To compare architectures with fixed length input, namely MLPS, we add null feature vectors \(_{i}=(0)_{k=0}^{M}\) for the bacteria absent from the mix.

### Models

Our method learns an _implicit_ model of the dynamics of a bacterial community. Instead of estimating the parameters of a differential equation, which can then be solved to retrieve an equilibrium, we apply a flexible class of function approximators and directly regress the solution at equilibrium. MLPs constitute a simple baseline, as they can in principle approximate arbitrary functions . As most commonly used neural network architectures, MLPs assume that the position of each input carries a semantic value. The prediction of bacterial community dynamics, however, has an interesting property, namely permutation equivariance. This is due to the fact that a community is a _set_ of species, and the predictions of the model should not be affected by the order in which the species are presented. For this reason, we propose to leverage Graph Neural Networks (GNNs) [30; 15; 21; 5] to exploit this particular inductive bias.

GNNs can be formalized as Message Passing Neural Networks (MPNNs) . A graph is described by the tuple \(G=(V,E)\), where \(V\) denotes the set of vertices and \(E\) the edges. The neighborhood of a vertex, i.e. node, \(v V\) is described by \((v)=\{u|\{u,v\} E\}\). The attribute of each node is given by \(_{i}\) for \(i[1,|V|]\). In general, the attribute \(_{i}\) of each node in the graph is updated as follows in each message passing step:

\[_{(i,j)} =g_{e}_{i},_{j}\] (2) \[_{i}^{} =g_{v}_{i},_{j(i)} (e_{(i,j)}).\] (3)

where \(g_{e}\) and \(g_{v}\) are arbitrary functions used for the edge and node computations respectively. The permutation-invariant aggregation function is given by \(\). Depending on the choice of the node and edge update rules, we can recover different GNN architectures. In this work, we investigate two architectures: a spatial-convolutional GNN using the GraphSage implementation , and a slight variation of the message passing GNN architecture in Kipf et al. (2017), which we will refer to as MPGNN.

For GraphSage, the edge computation \(_{(i,j)}\) simply returns the attributes of neighboring nodes \(j(i)\), i.e. \(g_{e}_{i},_{j}=_{j}\). The node update function \(g_{v}\) is given by: \(_{i}^{}=W_{1}_{i}+W_{2}_{j (i)}\,_{j}\), where \(W_{1}\) and \(W_{2}\) are learnable parameters. The mean is used as the aggregation function. By using \(k\) graph convolutional layers after one another, we can achieve \(k\)-hop information propagation. Finally, we have an additional linear layer at the end with sigmoid activation for the node attribute readouts.

In the MPGNN, we update the node attributes as \(_{i}^{}=g_{v}_{j(i)}(g_{e} (_{i},_{j}))\). Here, \(g_{v}\) and \(g_{e}\) are MLPs with \(l\) linear layers, each followed by a non-linearity, e.g. ReLU activation. Layer normalization is applied in the final layer. For the mapping from the node attributes to the outputs, we also have a linear layer with sigmoid activation. For MPGNN, \(k\) message-passing steps are equivalent to the \(k\)-hop information propagation we get by stacking \(k\)GraphSage layers. We treat \(k\) as a hyperparameter for both MPGNN and GraphSage. For MPGNN, the number and size of the hidden layers of \(g_{e}\) and \(g_{v}\) are both tuned as hyperparameters, more details are given in Table S2.

Models were trained with the Adam optimizer (Kingma and Ba, 2014) to minimize the Mean Squared Error (MSE). Implementation details, data splits, and reported metrics are detailed in Appendix A.

### Publicly available real data

We use two publicly available datasets independently recorded by separate laboratories; we describe them here and provide more details in Appendix A.2. Experimental data Friedman2017 consists of the relative abundances of 2, 3, 7, and 8-bacteria communities (Fig. S3, Fig. S4, and Fig. S5). The dataset contains 93 samples with 2 to 15 replicates each. Raw data was kindly provided by Friedman et al. (2017) and is now available on our project webpage https://sites.google.com/view/microbegnn. BaranwalClark2022 is published by Baranwal et al. (2018), with certain samples originally produced by Clark et al. (2018). The dataset is composed of relative abundances of 459 samples of 2 to 26-bacteria communities, each replicated 1 to 9 times.

When testing generalization to excluded bacteria (see Sec. 3.3), we do not attempt to generalize to (i) _Holdemanella biformis_ (HB) as the samples containing this bacterium are only present in two community sizes (2 and 26), resulting in a small test set, and (ii) _Coprococcus comes_ (CC), _Eubacterium rectale_ (ER), _Roseburia intestinalis_ (RI), and _Faecalibacterium praustnitzii_ (FP) due to their over-representation in samples, and so the resulting small training sets.

Genomes of bacterial species were downloaded from NCBI (Kipf et al., 2017) or the ATCC Genome Portal (Roseburia et al., 2019), annotated with the NCBI prokaryotic genome annotation pipeline (Kipf et al., 2020), and genes were mapped to the KEGG database to obtain functional groups (Kipf et al., 2017). When a specific strain's genome was unavailable, the genome of the closest type strain was used instead. Details on strain genomes are provided in Supplementary Table S4. We used the presence/absence of each KO group as input for fitting models; KO annotations present in all genomes in a dataset were excluded.

### Modeling bacterial communities in simulation

Due to the scarcity of real data, we additionally design a simulator for the growth of bacterial communities based on the generalized Lotka-Volterra model (see Sec. 2.1). This simulator, as illustrated in Fig. 1, is not meant to produce a faithful representation of real communities, but rather to provide a generative procedure that captures certain challenges in the data, e.g. large dimensionality, while controlling other characteristics, e.g. sample size.

Bacterial growthThe growth of each bacterium in the community was simulated using the generalized Lotka-Volterra equation (Eq. 1), with: \((_{i})(1,0.5^{2})\) clipped to \([0.5,2]\), \(K_{i}~{}~{}(5,15)\), and \(a_{i,j}(0,0.2^{2})\) clipped to \([-2,2]\), \( i,j[1,|S|]\). The target relative abundance was calculated by simulating community growth until equilibrium: \(n_{i}(0)=1~{} i[1,|S|]\) and equilibrium was reached when \(n_{i}/t 10^{-4}~{} i[1,|S|]\) (Fig. S1).

Bacterial genomes Bacterial genomes are generated to encode the simulated growth parameters such that there exists an approximately bijective mapping from genomes to parameters. We achieve this by rescaling parameters to \(\), discretizing them, and performing a simple binary encoding to \(n_{g}\) bits as \(g_{}=(\,((g-g_{})/(g_{ }-g_{})(2^{n_{g}}-1)))\). Although the encoding is not representative of any biological process, the mapping can be computed efficiently, provides a compact representation, and can be inverted up to discretization. This method is applied directly to the parameters \(\) and \(K\), resulting in two binary vectors of size \(n_{g}\).

Encoding the interaction factors \(a_{i,j}\) into the genomes of each bacteria requires an additional step. Given a bacterial community \(S\), two intermediate \(n_{}\)-dimensional vectors for each bacterium \(s_{i} S\) are needed: one determining its effect on interaction partners, \(_{i}^{s}^{n}\), and the other determining how it is affected by others, \(_{i}^{r}^{n}\). These vectors should contain sufficient information, such that the influence of bacterium \(s_{i}\) on \(s_{j}\) (encoded in \(a_{i,j}\)) can be retrieved from \(_{i}^{s}\) and \(_{j}^{r}\). For each pair of bacteria \((s_{i},s_{j}) S^{2}\), we simply reconstruct interactions through inner products: \(_{i,j}=_{i}^{s}_{j}^{r}\). We treat intermediate vectors as learnable parameters, and optimize them through gradient descent by minimizing the distance of the reconstructed interaction matrix from its ground truth: \(J=_{i[1,|S|]}_{j[1,|S|]}(_{i,j}-a_{i,j})^{2}\). The \(n_{}\) vector coordinates for both vectors are finally encoded in the genomes as described above for \(\) and \(K\).

Here, we use \(n_{g}=7\) for all parameters, \(n_{}=20\) for the 25 simulated bacteria, and add 5 % of random genes. Empirically, we verify that \(\), \(K\), and \(^{s},^{r}\) can be accurately recovered from simulated genomes.

## 3 Experiments and results

The general goal of this work is to train and evaluate neural models for the dynamics of bacterial communities, directly from their genomes. On real data (Friedman2017 and BaranwalClark2022), we first investigate whether in-distribution predictions of unseen bacterial communities with known bacteria are possible. Then, we evaluate the generalization of learned models to (i) larger communities and (ii) unseen bacteria with respect to those used for training. Finally, due to the scarcity of real data, we leverage our proposed simulator to produce a dense and controllable distribution over communities: by retraining models on simulated data, we are able to validate whether trends emerging in real data can be explained in a simplified setting.

### Can we model real communities? -- Yes

We first set out to evaluate the general feasibility of predicting bacterial community profiles from bacterial genomes using GNNs (Fig. 2 A-B). Due to the set nature of communities, their dynamics are inherently permutation invariant. This known property of the target function might however not be captured by universal function approximators such as MLPs. To confirm this, we train both GNNs and MLPs on the Friedman2017 dataset. When shuffling the order of bacteria within the train and test communities, the accuracy of MLPs drops significantly, clearly showing that the dynamics learned by MLPs are not invariant to permutations (Fig. 2 A), and thus fundamentally incorrect. Both MPGNN and GraphSAGE provide accurate predictions. After some parameter tuning (see Supplementary Table S2), our best model predicts unseen bacterial mixes with a goodness of fit \(R^{2}=0.7778\) and \(R^{2}=0.8386\), for Friedman2017 and BaranwalClark2022 respectively (Fig. 2 A).

Figure 2: **Accuracy of MLP and GNN models on predictions of in-distribution and bigger bacterial communities.****A**: \(R^{2}\) values for predictions on in-distribution test (higher is better). Points represent data splits and model seeds. For each data split, the ensemble accuracy (i.e. over the model seeds) is displayed with a cross.

### Can we generalize to larger communities? -- Marginally.

We assess the ability of the models to generalize to communities of larger or smaller sizes. The motivation in the former case is to transfer knowledge from lab experiments on smaller communities to larger ones observed in the wild. In the latter case, the motivation is to evaluate whether one can learn a model from a large dataset of observed samples, and infer a model of bacterial interactions from it to monitor bacteria in the lab.

We train GNNs on communities with 2- and 3-bacteria and predict those with 7- and 8-bacteria from the Friedman2017 set. For the BaranwalClark2022 dataset, we train either on communities with 2- to 15- or 2- to 22-bacteria and predict the 23- to 26-bacteria communities(Fig. 2 B-D). The best ensemble models for each dataset have an accuracy of \(R^{2}=0.3021\), \(R^{2}=0.3136\), and \(R^{2}=0.4730\), respectively (Fig. 3 and Fig. 4). For BaranwalClark2022, including communities of sizes closer to test sizes greatly improves accuracy, suggesting that interactions may be different in larger communities, hence limiting the models' ability to generalize; we explore this hypothesis on simulated data in Sec. 2.4. This may explain why the models wrongly predict the growth of _Pseudomonas citromellosis_ (Pci) and _Serratia marcescens_ (Sm) in the Friedman2017 dataset (Fig. 3). Although in the observed communities, these bacteria do not survive, the models predict a significant abundance. For the BaranwalClark2022 data, predictions on _Anaerostipes cacae_ (AC) are the less accurate: the relative abundance of the bacterium is largely overestimated with an \(=0.0185\) compared to \(=0.0006\) for the other bacteria (Fig. 4). This difficulty to generalize to AC is consistent across our results (see Sec. 3.3).

Training on larger communities to predict smaller ones does not achieve good results (not shown). For Friedman2017, the \(R^{2}\) is lower than zero, indicating worse accuracy than predicting the average. For BaranwalClark2022, we train on communities with \(>15\) bacteria and predict those with \( 15\) bacteria. The results are also disappointing, with an \(R^{2}=0.31\) and \(R^{2}=0.29\) for the GraphSAGE and MPGNN respectively. Empirically, our results suggest that generalization to smaller communities poses different challenges with respect to generalization to larger communities.

### Can we generalize to unknown bacteria? -- Sort of.

The results vary depending on which species was left out as an unseen bacterium (Fig. 5). For instance, reasonable accuracies were obtained on the Friedman2017 dataset for predicting unseen bacteria _Enterobacter aerogenes_ (Ea) and Sm (Fig. 5 A and Fig. S7 C; \(R^{2}=0.6792\) and \(R^{2}=0.7051\), respectively). Interestingly, these two bacteria were the most distant to the rest, being the only non-_Pseudomonas_ (Fig. 5 B). A hypothesis is that they do not interact much with the _Pseudomonas_,

Figure 4: **Prediction of rel. abundance for larger communities in BaranwalClark2022.** Models trained on communities of size \( 22\), predictions for \( 23\).

Figure 3: **Prediction of larger communities in Friedman2017.** Each point represents a bacterium in a community of size \( 7\) bacteria; x-axis: average of the observed rel. abundance; the y-axis: model predictions. Models trained on communities of size \( 3\).

or that they both interact in a similar manner. In line with this hypothesis, for _Pseudomonas_, growing with either Sm or Ea led to resembling communities, making it possible for the knowledge gained from the genome of one non-_Pseudomonas_ to be accurately transferred to the other. This hypothesis is supported by the comparable relative abundances of _Pseudomonas_ in 2- and 3-bacteria communities with Sm or Ea (Fig. S7 A). Predictions of communities with _Pseudomonas chlororaphis_ (Pch) achieve the lowest accuracy, in fact lower than predicting the mean relative abundance for both types of models (Fig. 5 A, \(R^{2}<0\)). The genome of this species is not available on public databases, so the genome of the closest species had to be used instead. Hence, an uncontrolled error was introduced in the data. Furthermore, the substitute genome belongs to the same species as _Pseudomonas aurantiaca_ (Pa), which has a different phenotype than Pch in cultures, leading to different relative abundances in communities (Fig. S7 B). Nonetheless, models generalize well to Pa (Fig. 5 A, \(R^{2}=0.3539\) for GraphSAGE). Hence, we can hypothesize that the models learn well from other _Pseudomonas_ genomes, but cannot generalize well to Pch due to its substitute genome.

The results obtained on BaranwalClark2022 are superior to those on Friedman2017 data (Fig. 5 C). This could be attributed to the larger dataset size, which includes more bacteria and community sizes, thus providing a better resolution of the feature space (a wider range of genomes to learn from) and output space (more examples of co-cultures due to the increased number of communities). Nevertheless, we report significantly lower accuracy when generalizing to communities including AC. This bacterium is not particularly phylogenetically distant from others (Fig. S6), but is the only one that can produce butyrate from lactate and is a driver of butyrate production . Empirically, it inhibits the growth of CC, CH, BO, BT, BU, BC, and BY in communities of 11- to 13-bacteria while promoting the growth of CA and DL (Fig. S8 A; see the abbreviations in Supplementary Table S4). However, these effects are less clear in communities of 23- to 25-bacteria (Fig. S8 B). The other bacterium to which models can transfer less accurately is _Bacteroides thetaiotaomicron_ (BT; Fig. 5 C). This bacterium is considered a keystone of the human gut microbiota, as it drives community assembly . Consequently, communities including such a bacterium may be harder to predict due to the changes in interactions compared to communities without the bacterium, which explains the lower accuracy of the GNNs when generalizing to communities with BT. Actinobacteria, the phylum to which AC belongs, are also considered a keystone of the human microbiota . Although AC itself has not been reported to be a keystone, our results, together with the observation of butyrate production from Clark et al. , suggests that it may be one. We explored this hypothesis on simulated data in Sec. 2.4.

Our results suggest that GNNs can generalize predictions of bacterial relative abundances to communities including unseen bacteria. In practice, the performance of models may still be limited due to noise in inputs (genomes) and output resolution (similar genomes but different phenotypes).

### Validating sources of model inaccuracies through simulation

Due to the scarcity and lack of control of real data, we take advantage of the simulator introduced in Sec. 2.4 to assess whether model inaccuracies originate from community-specific features. We

Figure 5: **Accuracy of GNN models on predictions of bacterial communities containing unseen bacteria**. For each bacterium, communities containing the bacterium are used for testing, and not for training. \(R^{2}\) values on the test set are shown with a circle for each model (3 per GNN type), and crosses represent the ensemble of 3 models (i.e. for each prediction, the average of the three models is taken). A-B: Results and phylogenetic tree for Friedman2017. C: Results for BaranwalClark2022.

remark that these experiments are carried out on simulated data, generated through a simplified process, and therefore results in this section are meant to undergo further validation in the real world.

First, we investigate the effect of dense the community interactions on the performance of GNNs. We simulate communities with more and less interactions between bacteria by controlling the probability of an edge in the interaction matrix. We observe that, as we vary the edge density and simulate denser interactions in the train and test sets, the accuracies do not decrease (Fig. 6 A).

Next, we test the ability of the models to generalize to unseen keystone bacteria, which could explain the drop in accuracy for certain species in Fig. 5. For that, we increase the edge density for two specific bacteria by increasing the probability of an edge to exist from 0.2 to 0.8 for these nodes only. We simulate communities, exclude each keystone from training, and predict the growth for communities including them as in Sec. 3.3. We perform the same procedure on five non-keystone bacteria for comparison. However, the results do not validate our hypothesis (Fig. 6 B). This implies that GNNs are, in principle, capable of generalizing well to keystone bacteria and that other factors may explain the lack of generalization to AC and its communities in BaranwalClark2022.

Finally, we explore the impact of community sizes in training versus testing. We initially assess whether we can reproduce the decrease in accuracy when generalizing to larger communities with our simulations (see Fig. 2). Crucially, while in real data higher-order interactions can drive the drop in accuracy on the test sets, this effect cannot be verified with our simulated data, as it includes only pairwise interactions. Indeed the accuracy decreases when the size of the training communities is reduced compared to the test communities (Fig. 6 C). Specifically, models trained on samples with communities of up to 10 bacteria are unable to accurately predict communities of 16 to 25 bacteria (\(R^{2}<0\)).

We perform a sanity check by increasing the number of training communities for models trained on communities of smaller sizes. We observe that this only helps marginally, and training on a smaller number of larger communities remains preferrable. Accordingly, while gathering data for a large number of training community is helpful, accuracy may still be bounded by their size, even when ignoring higher-order interactions. Furthermore, we find that, in simulation, relative abundances are systematically over-estimated in predictions with larger communities. This is likely a consequence of the higher relative abundances in the smaller communities of the training set, indicating a tendency to overfit to training communities. It also suggests that in real data where over and underestimations are observed, other factors must influence the lack of generalization.

## 4 Conclusion

Our work sets the stage for the application of GNNs to microbial communities. These models can implicitly learn growth dynamics, and empirically outperform MLPs in terms of accuracy and generalization. Empirically, they outperform MLPs in terms of accuracy and generalization capabilities. Altogether, GNNs hold great potential for further applications. Furthermore, our results show that genomes are sufficient to learn an accurate model that can generalize predictions beyond observed communities. To our knowledge, this is the first attempt at predicting microbial community profiles from genomes directly. Recently, Lam et al.  employed genome-scale metabolic models (GEMs)  adapted for microbial communities  to predict pairwise bacterial interactions. Hence,

Figure 6: **Evaluation on simulated data.** Bacterial communities were simulated following the procedure described in Sec. 2.4 with varying parameters. A/ The the probability of an edge is varied between 0.1 and 0.6. B/ The edge density is set to 0.2 except for 2 bacteria with an edge density of 0.8 to mimic keystone bacteria. Each keystone (key) and five random (rdm) bacteria are excluded from training as in Sec. 3.3, results are shown for the test set including communities with these bacteria. C/ Models predict communities of 16 to 25 bacteria. Max: maximal number of bacteria in communities for training. Size: training sample size, i.e. number of communities.

a potential next step would be to apply GNNs to such GEMs. Finally, our simulations provide a flexible data generation procedure, which can be used to benchmark models for bacterial growth from genomes. In the future, the simulation can be further improved to account for higher-order interactions and potentially environmental factors. Nonetheless, we hope that its accessibility will encourage the explainable ML community to develop tools to interpret GNN models of bacterial communities. As new properties emerge from microbial communities, scientific discoveries may arise from interactions between our fields.