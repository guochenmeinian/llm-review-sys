# Benign overfitting in leaky ReLU networks with moderate input dimension

Kedar Karhadkar\({}^{1*}\)  Erin George\({}^{1*}\)  Michael Murray\({}^{1}\)  Guido Montufar\({}^{12}\)  Deanna Needell\({}^{1}\)

{kedar,egeo,mmurray,montufar,deanna}@math.ucla.edu

\({}^{1}\)UCLA \({}^{2}\)Max Planck Institute for Mathematics in the Sciences

\({}^{*}\)Equal contribution

###### Abstract

The problem of benign overfitting asks whether it is possible for a model to perfectly fit noisy training data and still generalize well. We study benign overfitting in two-layer leaky ReLU networks trained with the hinge loss on a binary classification task. We consider input data that can be decomposed into the sum of a common signal and a random noise component, that lie on subspaces orthogonal to one another. We characterize conditions on the signal to noise ratio (SNR) of the model parameters giving rise to benign versus non-benign (or harmful) overfitting: in particular, if the SNR is high then benign overfitting occurs, conversely if the SNR is low then harmful overfitting occurs. We attribute both benign and non-benign overfitting to an approximate margin maximization property and show that leaky ReLU networks trained on hinge loss with gradient descent (GD) satisfy this property. In contrast to prior work we do not require the training data to be nearly orthogonal. Notably, for input dimension \(d\) and training sample size \(n\), while results in prior work require \(d=(n^{2} n)\), here we require only \(d=(n)\).

## 1 Introduction

Intuition from learning theory suggests that fitting noise during training reduces a model's performance on test data. However, it has been observed in some settings that machine learning models can interpolate noisy training data with only _nominal_ cost to their generalization performance (Zhang et al., 2017; Belkin et al., 2018, 2019), a phenomenon referred to as _benign overfitting_. Establishing theory that can explain this phenomenon has attracted much interest in recent years and there is now a rich body of work on this topic particularly in the context of linear models. However, the study of benign overfitting in the context of non-linear models, in particular shallow ReLU or leaky ReLU networks, has additional technical challenges and subsequently is less well advanced.

Much of the effort in regard to theoretically characterizing benign overfitting focuses on showing, under an appropriate scaling of the dimension of the input domain \(d\), size of the training sample \(n\), number of corruptions \(k\) and number of model parameters \(p\) that a model can interpolate noisy training data while achieving an arbitrarily small generalization error. Such characterizations of benign overfitting position it as a _high dimensional phenomenon1_: indeed, the decrease in generalization error is achieved by escaping to higher dimensions at some rate relative to the other aforementioned hyperparameters. However, for these mathematical results to be relevant for explaining benign overfitting as observed in practice, clearly the particular scaling of \(d\) with respect to \(n,k\) and \(p\) needs to reflect the ratios seen in practice. Although a number of works, which we discuss in Section 1.2, establish benign overfitting results for shallow neural networks, a key and significant limitation they share is the requirement that the input features of the training data are at least approximatelyorthogonal to one another. To study benign overfitting, these prior works typically assume the input features consist of a small, low-rank signal component plus an isotropic noise term. Therefore, for the near orthogonality property to hold with high probability it is required that the input dimension \(d\) scales as \(d=(n^{2} n)\) or higher. This assumption highly restricts the applicability of these results for explaining benign overfitting in practice.

In this work we assume only \(d=(n)\) and establish both harmful and benign overfitting results for shallow leaky ReLU networks trained via gradient descent (GD) on the hinge loss. In particular, we consider \(n\) data point pairs \((_{i},y_{i})^{d}\{ 1\}\), where, for some vector \(^{d-1}\) and scalar \(\), the input features are drawn from a pair of Gaussian clusters \(_{i}(,( _{d}-^{T}))\) and \(y_{i}=([_{i}],)\). The training data is noisy in that \(k\) of the \(n\) points in the training sample have their output label flipped. We assume equal numbers of positive and negative points among clean and corrupt ones. We provide a full description of our setup and assumptions in Section 2. Our proof techniques are novel and identify a new condition allowing for the analysis of benign and harmful overfitting which we term _approximate margin maximization_, wherein the norm of the network parameters is upper bounded by a constant of the norm of the max-margin linear classifier.

### Summary of contributions

Our key results are summarized as follows.

* In Theorem 3.1, we prove that a leaky ReLU network trained on linearly separable data with gradient descent and the hinge loss will attain zero training loss in finitely many iterations. Moreover, the network weight matrix \(\) at convergence will be approximately max-margin in the sense that \(\|\|=O(^{*}\|}{})\), where \(\) is the leaky parameter of the activation function, \(m\) is the width of the network, and \(^{*}\) is the max-margin linear classifier. We apply this result to derive generalization bounds for the network on test data.
* In Theorem 3.2, we establish conditions under which benign overfitting occurs for leaky ReLU networks. If the input dimension \(d\), number of training points \(n\), number of corrupt points \(k\), and signal strength \(\) satisfy \(d=(n)\) and \(=()\), then the network will exhibit benign overfitting. We emphasize that existing works on benign overfitting require \(d=(n^{2} n)\) to ensure nearly orthogonal data.
* In Theorem 3.3, we find a complementary lower bound for the generalization error to show that, for gradient descent classifiers, the bound in Theorem 3.2 is tight up to a constant in the exponent that can depend on \(\).
* In Theorem 3.4, we find conditions under which non-benign overfitting occurs. If \(d=(n)\) and \(=O()\), then the network will exhibit non-benign overfitting: in particular its generalization error will be at least \(\).

### Related work

There is now a significant body of literature theoretically characterizing benign overfitting in the context of linear models, including linear regression (Bartlett et al., 2020; Muthukumar et al., 2020; Wu and Xu, 2020; Zou et al., 2021; Hastie et al., 2022; Koehler et al., 2021; Wang et al., 2021; Chatterji and Long, 2022; Shamir, 2022), logistic regression (Chatterji and Long, 2021; Muthukumar et al., 2021; Wang et al., 2021), max-margin classification with linear and random feature models (Montanari et al., 2023, 2023; Mei and Montanari, 2022; Cao et al., 2021) and kernel regression (Liang and Rakhlin, 2020; Liang et al., 2020; Adlam and Pennington, 2020). However, the study of benign overfitting in non-linear models is more nascent.

Homogeneous networks trained with gradient descent and an exponentially tailed loss are known to converge in direction to a Karush-Kuhn-Tucker (KKT) point of the associated max-margin problem (Lyu and Li, 2020; Ji and Telgarsky, 2020)2. This property has been widely used in prior works to prove benign overfitting results for shallow neural networks. Frei et al. (2022) consider a shallow, smooth leaky ReLU network trained with an exponentially tailed loss and assume the data is drawn from a mixture of well-separated sub-Gaussian distributions. A key result of this work is, given sufficient iterations of GD, that the network will interpolate noisy training data while also achieving minimax optimal generalization error up to constants in the exponents. Xu & Gu (2023) extend this result to more general activation functions, including ReLU, as well as relax the assumptions on the noise distribution to being centered with bounded logarithmic Sobolev constant, and finally also improve the convergence rate. George et al. (2023) also study ReLU as opposed to leaky ReLU networks but do so in the context of the hinge loss, for which, and unlike exponentially tailed losses, a characterization of the implicit bias is not known. This work also establishes transitions on the margin of the clean data driving harmful, benign and no-overfitting training outcomes. Frei et al. (2023) use the aforementioned implicit bias of GD for linear classifiers and shallow leaky ReLU networks towards solutions that satisfy the KKT conditions of the margin maximization problem to establish settings where the satisfaction of said KKT conditions implies benign overfitting. Kornowski et al. (2023) also use the implicit bias results for exponentially tailed losses to derive similar benign overfitting results for shallow ReLU networks. Cao et al. (2022); Kou et al. (2023) study benign overfitting in two-layer convolutional as opposed to feedforward neural networks: indeed, whereas in most prior works data is modeled as the sum of a signal and noise component, in these two works the signal and noise components are assumed to lie in disjoint patches. The weight vector of each neuron is applied to both patches separately and a non-linearity, such as ReLU, is applied to the resulting pre-activation. In this setting, the authors prove interpolation of the noisy training data and derive conditions on the clean margin under which the network benignly versus harmfully overfits. A follow up work (Chen et al., 2023) considers the impact of Sharpness Aware Minimization (SAM) in the same setting. Finally, and assuming \(d=(n^{5})\), Xu et al. (2024) establish benign overfitting results for a data distribution which, instead of being linearly separable, is separated according to an XOR function.

We emphasize that the prior work on benign overfitting in the context of shallow neural networks requires the input data to be approximately orthogonal. Under standard data models studied this equates to the requirement that the input dimension \(d\) versus the size of the training sample \(n\) satisfies \(d=(n^{2} n)\) or higher. Here we require only \(d=(n)\). The weaker dimensionality requirement requires substantially different proof techniques. George et al. (2023) study a setting most similar to the one studied here, however, the techniques are very different. In particular, the results presented in this other work are derived by carefully tracking neuron activation patterns. While in high dimensions this is feasible due to the near orthogonality of the noise in low dimensions this is far more challenging as noise vectors can be highly correlated leading to coupling effects.

Finally, we remark that our proof technique for the convergence of GD to a global minimizer in the context of a shallow leaky ReLU network (Theorem 3.1) is closely related to the proof techniques used by Brutzkus et al. (2018). While this work does establish a generalization bound, the bound assumes that population dataset is linearly separable rather than just the training dataset. Hence, it cannot be applied when the training dataset has label-flipping noise, which is the setting that we are interested in for benign overfitting.

## 2 Preliminaries

Let \([n]=\{1,2,,n\}\) denote the set of the first \(n\) natural numbers. We remark that when using big-\(O\) notation we implicitly assume only positive constants. We use \(c,C,C_{1},C_{2},\) to denote absolute constants with respect to the input dimension \(d\), the training sample size \(n\), and the width of the network \(m\). Note constants may change in value from line to line. Furthermore, when using big-\(O\) notation all variables aside from \(d,n,k\) and \(m\) are considered constants. However, for clarity we will frequently make the constants concerning the confidence \(\) and failure probability \(\) explicit. Moreover, for two functions \(f,g:\), if we say \(f=O(g)\) implies property \(p\), what we mean is there exists an \(N\) and a constant \(C\) such that if \(f(n) Cg(n)\) for all \(n N\) then property \(p\) holds. Likewise, if we say \(f=(g)\) implies property \(p\), what we mean is there exists an \(N\) and a constant \(C\) such that if \(f(n) Cg(n)\) for all \(n N\) then property \(p\) holds. Finally, we use \(\|\|\) to denote the \(^{2}\) norm of the vector argument or \(^{2}^{2}\) operator norm of the matrix argument.

### Data model

We study data generated as per the following data model.

**Definition 2.1**.: _Suppose \(d,n,k\), \((0,1)\) and \(^{d-1}\). If \((,},,,y)(d,n,k,,)\) then_

1. \(^{n d}\) _is a random matrix whose rows, which we denote_ \(_{i}\)_, satisfy_ \(_{i}=y_{i}+_{i}\)_, where_ \(_{i}(_{d},(_{d}-^ {T}))\) _are mutually i.i.d.._
2. \(\{ 1\}^{n}\) _is a random vector with entries_ \(y_{i}\) _that are mutually independent of one another as well as the noise vectors_ \((_{i})_{i[n]}\) _and are uniformly distributed over_ \(\{ 1\}\)_. This vector holds the true labels of the training set._
3. _Let_ \([n]\) _be any subset chosen independently of_ \(\) _such that_ \(||=k\)_. Then_ \(}\{ 1\}^{n}\) _is a random vector whose entries satisfy_ \(_{i} y_{i}\) _for all_ \(i\) _and_ \(_{i}=y_{i}\) _for all_ \(i^{c}=:\)_. This vector holds the observed labels of the training set._
4. \(y\) _is a random variable representing a test label which is uniformly distributed over_ \(\{ 1\}\)_._
5. \(^{d}\) _is a random vector representing the input feature of a test point and satisfies_ \(=y+\)_, where_ \((_{d},(_{d}-^{T}))\) _is mutually independent of the random vectors_ \((_{i})_{i[n]}\)_._

_We refer to \((,})\) as the training data and \((,y)\) as the test data. Furthermore, for typographical convenience we define \(}=:\{ 1\}^{n}\)._

To provide some interpretation to Definition 2.1, the training data consists of \(n\) points of which \(k\) have their observed label flipped relative to the true label. We refer to \(\) and \(_{i}\) as the signal and noise components of the \(i\)-th data point respectively: indeed, with \(>0\) then for \(i\)\(y_{i}_{i},=>0\). The test data is drawn from the same distribution and is assumed not to be corrupted. We say that the training data \((,})\) is _linearly separable_ if there exists \(^{d}\) such that

\[_{i},_{i} 1,i[n].\]

For finite \(n\), this condition is equivalent to the existence of a \(\) with \(_{i},_{i}>0\) for all \(i[n]\). We denote the set of linearly separable datasets as \(_{lin}^{n d}\{ 1\}^{n}\). For a linearly separable dataset \((,})\), the _max-margin linear classifier_ is the unique solution to the optimization problem

\[*{arg\,min}_{^{d}}\|\|_{i},_{i} 1i[n].\]

Observe one may equivalently take a strictly convex objective \(\|\|^{2}\) and the constraint set is a closed convex polyhedron that is non-empty iff the data is linearly separable. The max-margin linear classifier \(^{*}\) has a corresponding geometric margin \(2/\|^{*}\|\). When \(d n\) and \(>0\), input feature matrices \(\) from our data model almost surely have linearly independent rows \(_{i}\) and thus \((,})\) is almost surely linearly separable for any observed labels \(}\{ 1\}^{n}\).

### Architecture and learning algorithm

We study shallow leaky ReLU networks with a forward pass function \(f:^{2m d}^{d}\) defined as

\[f(,)=_{j=1}^{2m}(-1)^{j}(_{j}, ),\] (1)

where \(^{2m d}\) are the parameters of the network, \(:\) is the leaky ReLU function, defined as \((x)=(x, x)\), where \((0,1]\) is referred to as the leaky parameter. We remark that we only train the weights of the first layer and keep the output weights of each neuron fixed. Although \(\) is not differentiable at \(0\), in the context of gradient descent we adopt a subgradient and let \((z)=1\) for \(z 0\) and let \((z)=\) otherwise. The _hinge loss_\(:_{ 0}\) is defined as

\[(z)=\{0,1-z\}.\] (2)

Again, \(\) is not differentiable at zero; adopting a subgradient we define for any \(j[2m]\)

\[_{_{j}}(f(,))=(-1)^{j+1} (_{j},)&f(,)<1,\\ 0&f(,) 1.\]The training loss \(L:^{2m d}^{n d}^{n} \) is defined as

\[L(,,})=_{i=1}^{n}(_{i}f(,_{i})).\] (3)

Let \(^{(0)}^{2m d}\) denote the model parameters at initialization. For each \(t\) we define \(^{(t)}\) recursively as

\[^{(t)}=^{(t-1)}-_{}L(^{(t-1)},,}),\]

where \(>0\) is the step size. Let \(^{(t)}[n]\) denote the set of all \(i[n]\) such that \(_{i}f(^{(t)},_{i})<1\). Then equivalently each neuron is updated according to the following rule: for \(j[2m]\)

\[_{j}^{(t)}=GD(^{(t-1)},):=_{j}^{(t-1)}+(-1)^{j} _{i^{(t-1)}}_{i}_{i}(_{j} ^{(t-1)},_{i}).\] (4)

For ease of reference we now provide the following definition of the learning algorithm described above.

**Definition 2.2**.: _Let \(_{GD}:^{n d}\{ 1\}^{n} ^{2m d}^{2m d}\) return \(_{GD}(,},,^{(0)})=:\), where the \(j\)-th row \(_{j}\) of \(\) is defined as follows: let \(_{j}^{(0)}\) be the \(j\)-th row of \(^{(0)}\) and generate the sequence \((_{j}^{(t)})_{t 0}\) using the recurrence relation \(_{j}^{(t)}=GD(^{(t-1)},)\) as defined in equation 4._

1. _If for_ \(j[2m]\)_,_ \(_{t}_{j}^{(t)}\) _does not exist then we say_ \(_{GD}\) _is undefined._
2. _Otherwise we say_ \(_{GD}\) _converges and_ \(_{j}=_{t}_{j}^{(t)}\)_._
3. _If there exists a_ \(T\) _such that for all_ \(j[2m]\)__\(_{j}^{(t)}=_{j}^{(T)}\) _for all_ \(t T\)_, then we say_ \(_{GD}\) _converges in finite time._

We often find that all matrices in the set

\[\{_{GD}(,},,^{(0)}): j\,\| _{j}^{(0)}\|\}\]

agree on all relevant properties. In this case, we abuse notation and say that \(_{GD}(,},,)=\) where \(\) is a generic element from this set.

Finally, in order to derive our results we make the following assumptions concerning the step size and initialization of the network.

**Assumption 1**.: _The step size \(\) satisfies \( 1/(mn_{i[n]}\|_{i}\|^{2})\) and for all \(j[2m]\) the network at initialization satisfies \(\|_{j}^{(0)}\|/(m_{i[n]}\|_{i}\|)\)._

Under our data model the input data points have approximately unit norm; therefore these assumptions reduce to \(\) and \(\|_{j}^{(0)}\|}{m}\).

### Approximate margin maximization

We now introduce the notion of an approximate margin maximizing algorithm, which plays a key role in deriving our results. Although the primary setting we consider in this work is the learning algorithm \(_{GD}\) (see Definition 2.2), we derive benign overfitting guarantees more broadly for any learning algorithm which fits into this category. Recall \(_{lin}\) denotes the set of linearly separable datasets \((,})^{n d}\{ 1\}^{n}\).

**Definition 2.3**.: _Let \(f:^{p}^{d}\) denote a predictor function with \(p\) parameters. An algorithm \(:^{n d}^{n}^{p}\) is approximately margin maximizing with factor \(M>0\) on \(f\) if for all \((,})_{lin}\)_

\[_{i}f((,}),_{i}) 1\;\;i[n]\] (5)

_and_

\[\|(,})\| M\|^{*}\|,\] (6)

_where \(^{*}\) is the max-margin linear classifier of \((,})\). Moreover, if \(\) is an approximate margin maximizing algorithm we define_

\[||=\{M>0:M\}.\] (7)In the above definition we take the standard Euclidean norm on \(^{p}\). In particular if \(^{p}=^{2m d}\) is a space of matrices we take the Frobenius norm.

## 3 Main results

In order to prove benign overfitting it is necessary to show that the learning algorithm outputs a model that correctly classifies all points in the training sample. The following theorem establishes this for \(_{GD}\) and bounds the margin maximizing factor \(|_{GD}|\).

**Theorem 3.1**.: _Let \(f:^{p}^{n}\) be a leaky ReLU network with forward pass as defined by equation 1. Suppose the step size \(\) and initialization condition \(\) satisfy Assumption 1. Then for any linearly separable data set \((,})\)\(_{GD}(,},,)\) converges after \(T\) iterations, where_

\[T^{*}\|^{2}}{^{2}m}.\]

_Furthermore \(_{GD}\) is approximately margin maximizing on \(f\) (Definition 2.3) with_

\[|_{GD}|}.\]

A proof of Theorem 3.1 can be found in Appendix D.1. Note also by Definition 2.3 that the solution \(=_{GD}(,})\) for \((,})_{lin}\) is a global minimizer of the training loss defined in equation 3 with \(L(,,})=0\). Our approach to proving this result is reminiscent of the proof of convergence of the perceptron algorithm and therefore is also similar to the techniques used by Brutzkus et al. (2018).

For training and test data as per Definition 2.1 we provide an upper bound on the generalization error for approximately margin maximizing algorithms. For convenience we summarize our setting as follows.

**Assumption 2**.: _Setting for proving generalization results._

* \(f:^{2m d}^{d}\) _is a shallow leaky ReLU network as per equation 1._
* \(:^{n d}\{ 1\}^{n}^{2m  d}\) _is a learning algorithm that returns the weights_ \(^{2m d}\) _of the first layer of_ \(f\)_._
* _We let_ \(^{d-1}\) _and consider training data_ \((,})\) _and test data_ \((,y)\) _distributed according to_ \((,},,,y)(d,n,k,,)\) _as per Definition_ 2.1_._

Under this setting we have the following generalization result for an approximately margin maximizing algorithm \(\). Note this result requires \(\), and hence the signal to noise ratio of the inputs, to be sufficiently large.

**Theorem 3.2**.: _Under the setting given in Assumption 2, let \((0,1)\) and suppose \(\) is approximately margin-maximizing (Definition 2.3). If \(n=()\), \(d=(n)\), \(k=O(|^{2}})\), and \(=()\) then there is a fixed positive constant \(C\) such that with probability at least \(1-\) over \((,})\)_

\[(yf(,) 0,})(-C |^{2})}).\]

A proof of Theorem 3.2 is provided in Appendix D.2. To comment informally on the relationship between \(k\) and \(\), we require \(=(k^{-1})\) in order to guarantee that any network which achieves zero hinge loss does so by focusing on the signal component \(\) rather than the noise components \(_{i}\). We use the projection of the model weights onto the signal subspace as a measure of the strength of the signal the model has learned and derive our generalization results based on this measure. In Section 4 we provide a proof sketch of this framework in the simpler, linear model setting. Combining Theorems 3.1, and 3.2 we arrive at the following benign overfitting result for shallow leaky ReLU networks trained with GD on hinge loss.

**Corollary 3.2.1**.: _Under the setting given in Assumption 2, let \((0,1)\) and suppose \(=_{GD}\) where \(,_{>0}\) satisfy Assumption 1. If \(n=()\), \(d=(n)\), \(k=O(^{2}n)\), and \(=()\) then the following hold._1. _The algorithm_ \(_{GD}\) _terminates almost surely after a finite number of updates. If_ \(=_{GD}(,})\)_, then_ \(L(,,})=0\)_._
2. _There is a fixed positive constant_ \(C\) _such that, with probability at least_ \(1-\) _over the training data_ \((,})\)_,_ \[(yf(,) 0,})(-C d}{k}).\]

We remark that the upper bound is at most \((-Cd/n)\) for a different constant \(C\) as we assume \(k=O(^{2}n)\).

If \(k\) is large enough, this bound is tight up to constants and factors of \(\) in the exponent. This is given by the following theorem, proven in Appendix D.2.

**Theorem 3.3**.: _Under the setting given in Assumption 2, let \((0,1)\) and suppose \(=_{GD}\) where \(,_{>0}\) satisfy Assumption 1. If \(n=(k)\), \(d=(n)\), and \(k=(+)\), then there is a fixed positive constant \(C\) such that with probability at least \(1-\) over \((,})\)_

\[(yf(,) 0,})(-C ).\]

In addition to this benign overfitting result we also provide the following non-benign overfitting result for \(_{GD}\). Note that conversely this result requires \(\), and hence the signal to noise ratio of the inputs, to be sufficiently small.

**Theorem 3.4**.: _Under the setting given in Assumption 2, let \((0,1)\) and suppose \(=_{GD}\), where \(,_{>0}\) satisfy Assumption 1. If \(n=(1),d=(n+)\) and \(=O(}{d})\) then the following hold._

1. _The algorithm_ \(_{GD}\) _terminates almost surely after finitely many updates. With_ \(=_{GD}(,})\)_,_ \(L(,,})=0\)_._
2. _With probability at least_ \(1-\) _over the training data_ \((,})\)__ \[(yf(,)<0,}).\]

A proof of Theorem 3.4 is provided in Appendix D.3.

## 4 Approximate margin maximization and generalization: insight from linear models

In this section we outline proofs for the analogues of Theorems 3.2 and 3.4 in the context of linear models. The arguments are thematically similar and clearer to present. We provide complete proofs of benign and non-benign overfitting for linear models in Appendix C.

An important lemma is the following, which bounds the largest and \(n\)-th largest singular values (\(_{1}\) and \(_{n}\) respectively) of the noise matrix \(\):

**Lemma 4.1**.: _Let \(^{n d}\) denote a random matrix whose rows are drawn mutually i.i.d. from \((0_{d},(_{d}-^{T}))\). If \(d=(n+)\), then there exists constants \(C_{1}\) and \(C_{2}\) such that, with probability at least \(1-\),_

\[C_{1}_{n}()_{1}() C_{2}.\]

We prove this lemma in Appendix B using results from Vershynin (2018) and Rudelson & Vershynin (2009). A consequence of this lemma is that with probability at least \(1-\), the condition number of \(\) restricted to \(\,\) can be bounded above independently of all hyperparameters. For this reason, we refer to the noise as being well-conditioned.

Now let \(=(,})\) be the linear classifier returned by the algorithm. Observe that we can decompose the weight vector into a signal and noise component

\[=a_{v}+,\]

where \(\) and \(a_{v}\). Based on this decomposition the proof proceeds as follows.

**1. Generalization bounds based on the SNR:** For test data as per the data model given in Definition 2.1 we want to bound the probability of misclassification: in particular, we want to bound the probability that

\[X:=y,=a_{v}+, 0.\]

As the noise is normally distributed, \(X(a_{v},\|\|^{2})\) and the desired upper bound therefore follows from Hoeffding's inequality,

\[(X 0)(-^{2}}{2(1-)\| \|^{2}}).\]

Using Gaussian anti-concentration, we also obtain a lower bound for the probability of misclassification:

\[(y, 0)\{- }}{\|\|}, (-^{2}}{\|\|^{2}} )\}.\]

**2. Upper bound the norm of the max-margin classifier:** In order to use the approximate max-margin property we require an upper bound on \(\|^{*}\|\). As by definition \(\|^{*}\|\|}\|\), it suffices to construct a vector \(}\) that interpolates the data and has small norm. Using that the noise matrix of the data is well-conditioned with high probability, we achieve this by strategically constructing the signal and noise components of \(}\). This yields the bound

\[\|^{*}\|\|}\| C(},+}),\]

where the arguments of the min function originate from a small and large \(\) regime respectively.

**3. Lower bound the SNR using the approximate margin maximization property:** Based on step 1 the key quantity of interest from a generalization perspective is the ratio \(a_{v}/\|\|\), which describes the signal to noise ratio (SNR) of the learned classifier. To lower bound this quantity we first lower bound \(a_{v}\). In particular, if \(a_{v}\) is small, then the only way to attain zero loss on the clean data is for \(\|\|\) to be large. However, under appropriate assumptions on \(d,n,k\) and \(\) this can be shown to contradict the bound \(\|\|\|\|||\|^{*}\|\), and thus \(a_{v}\) must be bounded from below. A lower bound on \(a_{v}/\|\|\) then follows by again using \(\|\|\|^{*}\|\). Hence we obtain a lower bound for the SNR and establish benign overfitting.

**4. Upper bound the SNR using the zero loss condition:** For the generalization lower bound, we compute an upper bound for the ratio \(a_{v}/\|\|\) rather than a lower bound. Since the model perfectly fits the training data with margin one,

\[1_{i},_{i}=_{i}a_{v}+ _{i},_{i}\]

for all \(i[n]\). The above inequality implies that \(_{i}_{i},\) is at least \([]{}a_{v}\) for all corrupt points. Since the noise is well-conditioned, this gives a lower bound on \(\|\|\) in terms of \(a_{v}\) and hence an upper bound on the SNR \(a_{v}/\|\|\). By the second generalization lower bound in step 1, the generalization error is bounded below at a similar exponential rate to the upper bound.

**5. Upper bound the SNR using the zero loss condition and maximum margin property:** To prove non-benign overfitting, we again compute an upper bound for the ratio \(a_{v}/\|\|\). We return to the zero loss condition:

\[1_{i},_{i}=_{i}a_{v}+ _{i},_{i}\]

for all \(i[n]\). If \(\) is small and \(|a_{v}|\) is large, then \(\|\|\) will be large, contradicting the approximate margin maximization. Hence the above inequality implies that \(_{i}_{i},\) is large for all \(i[n]\). Since the noise is well-conditioned, this can only happen when \(\|\|\) is large. This gives us a lower bound on \(\|\|\). As before, we can also upper bound \(a_{v}\) by \(\|\|\), giving us an upper bound on the SNR \(a_{v}/\|\|\). By the first generalization lower bound in step 1, the classifier generalizes poorly and exhibits non-benign overfitting.

### From linear models to leaky ReLU networks

The proof of benign and non-benign overfitting in the linear case uses the tension between the two properties of approximate margin maximization: fitting both the clean and corrupt points with margin versus the bound on the norm. To extend this idea to a shallow leaky ReLU network as per equation 1, we consider the same decomposition for each neuron \(j[2m]\),

\[_{j}=a_{j}+_{j},\]

where \(a_{j}\) and \(_{j}\). In the linear case \( a_{v}\) can be interpreted as the activation of the linear classifier on \(\) respectively: in terms of magnitude the signal activation is the same in either case and thus we measure the alignment of the linear model with the signal using \(|a_{v}|\). For leaky ReLU networks we define their activation on \(\) respectively as \(A_{1}=f(,)\) and \(A_{-1}=-f(,-)\), and then define the alignment of the network as \(A_{}=\{A_{1},A_{-1}\}\). Considering the alignment of the network with the noise, then if \(^{2m d}\) denotes a matrix whose \(j\)-th row is \(_{j}\), then we measure the alignment of the network using \(\|\|_{F}\). As a result, analogous to \(a_{v}/\|\|\), the key ratio from a generalization perspective in the context of a leaky ReLU network is \(A_{}/\|\|_{F}\). The proof Theorems 3.2, 3.3, and 3.4 then follow the same outline as Steps 1-3 above but with additional non-trivial technicalities.

## 5 Conclusion

In this work we have proven conditions under which leaky ReLU networks trained on binary classification tasks exhibit benign and non-benign overfitting. We have substantially relaxed the necessary assumptions on the input data compared with prior work; instead of requiring nearly orthogonal data with \(d=(n^{2} n)\) or higher, we only need \(d=(n)\). We achieve this by using the distribution of singular values of the noise rather than specific correlations between noise vectors. Our emphasis was on networks trained by gradient descent with the hinge loss, but we establish a new framework that is general enough to accommodate any algorithm that is approximately margin maximizing.

There are a few limitations of our results which would be natural questions to address in future work. While we improve upon existing results in our dependence on the input dimension of the data, we still require that the training dataset is linearly separable. This leaves open the question of whether an overparameterized network will perfectly fit the training data and generalize well for lower dimensional data, or satisfy a similar margin maximization condition. We also focus mainly on two-layer networks with fixed outer layer weights trained with the hinge loss. It would be interesting to investigate whether analogous results hold for deeper architectures or different loss functions and data models.

#### Acknowledgments

This material is based upon work supported by the National Science Foundation under Grant No. DMS-1928930 and by the Alfred P. Sloan Foundation under grant G-2021-16778, while the authors EG and DN were in residence at the Simons Laufer Mathematical Sciences Institute (formerly MSRI) in Berkeley, California, during the Fall 2023 semester. EG and DN were also partially supported by NSF DMS 2011140. EG was also supported by a NSF Graduate Research Fellowship under grant DGE 2034835. GM and KK were partly supported by NSF CAREER DMS 2145630 and DFG SPP 2298 Theoretical Foundations of Deep Learning grant 464109215. GM was also partly supported by NSF grant CCF 2212520, ERC Starting Grant 757983 (DLT), and BMBF in DAAD project 57616814 (SECAI).