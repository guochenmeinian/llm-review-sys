# The Importance of Online Data:

Understanding Preference Fine-tuning via Coverage

 Yuda Song

Carnegie Mellon University

yudas@cs.cmu.edu

&Gokul Swamy

Carnegie Mellon University

gswamy@cs.cmu.edu

&Aarti Singh

Carnegie Mellon University

aarti@cs.cmu.edu

&J. Andrew Bagnell

Aurora Innovation, Carnegie Mellon University

dbagnell@aurora.tech

&Wen Sun

Cornell University

ws455@cornell.edu

###### Abstract

Learning from human preference data has emerged as the dominant paradigm for fine-tuning large language models (LLMs). The two most common families of techniques - online reinforcement learning (RL) such as Proximal Policy Optimization (PPO) and offline contrastive methods such as Direct Preference Optimization (DPO) - were positioned as equivalent in prior work due to the fact that both have to start from the same offline preference dataset. To further expand our theoretical understanding of the similarities and differences between online and offline techniques for preference fine-tuning, we conduct a rigorous analysis through the lens of _dataset coverage_, a concept that captures how the training data covers the test distribution and is widely used in RL. We prove that a global coverage condition is both necessary and sufficient for offline contrastive methods to converge to the optimal policy, but a weaker partial coverage condition suffices for online RL methods. This separation provides one explanation of why online RL methods can perform better than offline methods, especially when the offline preference data is not diverse enough. Finally, motivated by our preceding theoretical observations, we derive a hybrid preference optimization (HyPO) algorithm that uses offline data for contrastive-based preference optimization and online unlabeled data for KL regularization. Theoretically and empirically, we demonstrate that HyPO is more performant than its pure offline counterpart DPO, while still preserving its computation and memory efficiency.

## 1 Introduction

Due to the difficulty of manually specifying reward functions for complex tasks , preference-based learning has emerged as a critical component in the fine-tuning procedure for large language models (LLMs) . There are two predominant flavors of preference learning for LLMs: online reinforcement learning (RL) methods such as PPO  and offline contrastive methods like Direct Preference Optimization (DPO)  and Identity Preference Optimization (IPO) .

Online RL methods usually follow the two-stage procedure prescribed in : one first trains a reward model (classifier) on a fixed offline preference dataset before using it to provide reward labels for on-policy generations, which are then fed to a downstream RL algorithm like Proximal Policy Optimization (PPO) . Since the reward model is learned from static offline preference data, to avoid over-optimizing the reward model , one typically adds a reverse KL penalty to encourage the model to stay close to some reference policy. We will refer to this procedure as reinforcement learning from human feedback (RLHF) in this paper. While empirically performant, RLHF requires repeated querying of the reward model (which is often itself an LLM) as well as sampling from the current policy. In response to the computational expense and relatively complex nature of thisprocedure, purely offline methods like DPO  and IPO  have been proposed as alternative methods for preference fine-tuning. These methods do not need to fit separate reward models, instead opting to simply train the policy directly on the offline preference dataset via a ranking loss.

Offline contrastive methods like DPO are usually derived via applying a reparameterization trick to the closed-form solution of the minimum relative entropy problem  that RLHF techniques attempt to approximate. Thus, several authors have described these methods as equivalent (at least in theory) to the standard RLHF procedure . However, recent (mostly empirical) work has contradicted this perspective:  find that online methods out-perform offline methods and attribute this fundamentally to on-policy sampling,  argues that the online RL methods produce an often desirable subset of the possible DPO loss minimizers, and  provide empirical support for the claim that online and contrastive training provided orthogonal benefits. However, a rigorous theoretical separation is still lacking in the pre-existing literature, which motivates our key questions:

_What is the statistical separation between the online RLHF method and offline contrastive methods? What causes this separation and what does it imply?_

To answer these questions, we focus on the coverage of the preference dataset, a key concept that is widely used in RL  for analyzing the impact of offline or exploratory data distributions. Through the lens of coverage of the offline preference dataset, we make the following contributions:

* in short, _there is no free lunch from bypassing explicit reward learning and online rollouts_. As global coverage might sometimes be violated in practice, our separation result can perhaps explain why RLHF works better than offline methods .
* Although offline contrastive methods are derived from a reverse-KL objective, we prove that the policies trained via offline methods can still have infinite reverse-KL in the partial coverage setting. In contrast, we show that RLHF can always control the reverse KL via directly optimizing reverse KL using online samples. This means that on realistic problems, RLHF has stronger guarantees for remaining close to the reference policy than offline contrastive methods.
* We propose Hybrid Preference Optimization (HyPO) to address the deficiencies of offline contrastive methods while maintaining some of their computational simplicity. HyPO is a hybrid RL algorithm  where offline data is used for the DPO objective while online samples are used to explicitly control the reverse KL divergence to the reference policy. We empirically demonstrate that HyPO outperforms DPO, on the _TL;DR_ summarization task  on all metrics including both the GPT4 win-rate and the reverse KL divergence to the reference policy, and on general chat benchmarks such as AlpacaEval 2.0 , trained with the UltraFeedback dataset . In addition, HyPO also mitigates the overfitting issues observed in the offline constrastive based methods .
* We provide an explanation of why RLHF and offline contrastive methods decrease the probability of both preferred and rejected responses during training. In particular, under our function approximation-based global coverage condition, we show that such behavior is actually desirable for DPO and RLHF policies to extrapolate and generalize to optimal actions that do not appear in the training dataset. However, without function approximation, algorithms like DPO can mistakenly increase the likelihood of sub-optimal actions. This establishes the importance of function approximation for the success of the algorithms such as DPO.

Taken together, our results establish the critical role _coverage_ plays in terms of convergence properties of preference learning algorithms as well as in the design of new, performant empirical approaches.

## 2 Related Work

Preference Fine-Tuning (PFT).As discussed in the introduction of our work, there are two major paradigms for preference fine-tuning of LLMs. The first one, online RL methods , proposes to first train a reward model (classifier) to predict human preferences, followed by running an RL method to optimize this learned reward function. While PPO  is the most popular RL algorithm used in the online RLHF framework by far , more recent work by  shows that simpler online RL algorithms like REINFORCE  also work well. The second class of methods, offline contrastive techniques , avoid explicit reward modeling and directly optimize their objective on the offline preference dataset. Recently there are _hybrid_ methods that combine offlinepreference data with online preference labels [52; 19; 35; 3] - we leave extending our analysis to this setting to future work. Throughout our paper, we assume for simplicity of analysis that preferences are generated by an underlying utility function and therefore contain no intransitivities [29; 41].

Understanding PFT.Prior work has studied different parts of the standard RLHF recipe [17; 23; 38; 16] and the impact of preference data quality . In our work, we instead take a converge-based perspective on the relationship between online RL methods and offline contrastive methods. Although derived from the same minimum relative entropy objective  and perceived as equivalent by some early work [33; 3], more recent work has started to unravel the distinctions between these two classes of methods.  repeatedly observe better performance from online rather than offline methods and after rigorously validating a variety of hypotheses, conclude that on-policy sampling is indispensable for ensuring a high quality policy.  perform an in-depth study of the effects of preference data, contrastive losses, and on-policy sampling and conclude that a combination of contrastive losses and interactive training is most preferable in practice.  also observe better performance from online PPO than from offline DPO and argue this is because the former is able to eliminate a larger set of policies that are undesirable from the perspective of the later. We supplement these mostly empirical observations with a rigorous theoretical explanation for the observed behavior through the lens of dataset coverage, as well as designing an algorithm that addresses the key weaknesses of offline contrastive approaches.

We defer additional related works to Appendix A.

## 3 Preliminaries

Following a wide range of recent works [33; 3], we consider the RLHF problem in the contextual bandit formulation . This is a reasonable simplification, as one can consider the generated sequence of tokens as one single action, due to the fact that the states are the generated tokens, and the dynamics are deterministic. We denote the context (prompt) space as \(\), and the action (response) space as \(\). Note that due to the finiteness of the possible tokens, the action space is finite but combinatorially large. We use \(()\) to denote the distribution of the prompts, and \(:()\) as policies (LLMs) that map prompts to a distribution of responses. We also consider the reward function class \(:\), which assigns a reward to each context-response pair.

We assume access to a reference policy \(_{}\), which is usually referred to as the policy learned using supervised data when training the LLM, that needs to be further fine-tuned to align with human values. An offline preference dataset is collected in the format of \(=\{x,y^{+},y^{-}\}\) triplets: given context \(x\), the preference policy samples two responses \(y^{1},y^{2}( x)\), where \(\) is the offline response distribution. Previous works assume either \(\) to be the same distribution as \(_{}\) or different offline distribution [3; 35; 18]. Then, \(y^{1}\) is labelled as \(y^{+}\) (thus \(y^{2}\) as \(y^{-}\)) with probability \(p^{*}(y^{1} y^{2} x)\), where \(p^{*}\) is defined by the Bradley-Terry model :

\[p^{*}(y^{1} y^{2} x)=(x,y^{1}))}{(r^{*}(x,y^{1})) +(r^{*}(x,y^{2}))},\]

where \(r^{*}\) is the human's implicit reward function. Note that this rules out intransitive preferences [41; 29]. Throughout the paper, we will make the following assumption on the reward function:

**Assumption 3.1** (Boundedness of the reward).: \( r^{*}_{} R\)_._

In many previous works, this formulation has been the canonical way to model the preference data in the RLHF literature [11; 33; 3]. The goal is to learn a policy \(\) to maximize the objective \(J()\), where

\[J()=_{x}_{y( x)}[r^{*}(x,y)]-(( x)||_{}( x)), \]

i.e., we want to both maximize the human implicit reward, and not deviate too much from the reference policy. We denote the optimal policy \(^{*}*{argmax}_{}J()\). Here we call \((( x)||_{}( x))\) reverse KL because \(\) - the policy to be optimized, appears first. We will call \((_{}( x)||( x))\) forward KL. By the definition of KL, we have

\[(( x)||_{}( x)):=_{y( x)}[((y x)/_{ }(y x))]. \]

Note that the expectation in reverse KL is under \(\), indicating that evaluating and optimizing reverse KL requires drawing _online samples_ from \(\). In contrast, evaluating forward KL only requires _offline_samples_ drawn from \(_{}\). As we will show, this key difference between reverse KL and forward KL plays an important role of separating online RLHF and offline contrastive methods such as DPO. In this paper, we consider two types of algorithms: online RL-based algorithms, and offline contrastive-based algorithms.

Online RLHF Algorithms.We consider algorithms such as [11; 1] as the online RL based methods. We abstract these algorithms as the following procedure: the algorithm performs the following two-stage procedure: one first trains a reward model \(\) that minimizes the Bradley-Terry loss 1

\[*{argmax}_{r}}_{x,y^{+},y^{-}}))}{(r(x,y^{+}))+(r(x,y^{-}))}, \]

and perform policy optimization (such as PPO ) to optimize the policy with the reward model \(\):

\[_{}*{argmax}_{}}_{x}_{y( x)}[ (x,y)]-(( x)||_{}(  x)).\]

However, this policy optimization step requires extensive online sampling, and possibly training an additional critic model (e.g., PPO), in addition to the reward model and policy.

Offline Contrastive Algorithms.To circumvent the above-mentioned computational burden, several purely offline contrastive-based methods (i.e., without RL) have been proposed. In this paper, we focus on the following two most representative methods. The first is Direct Preference Optimization (DPO) , where the objective is \(_{}*{argmax}_{r}_{}()\) with

\[_{}()=}_{x,y^{+},y^{-} } x)}{_{}(y^{+} x)}}{  x)}{_{}(y^{+} x)} + x)}{_{}( y^{-} x)}}. \]

Another offline contrastive method we will discuss in our paper is Identity Preference Optimization , but we will defer its technical details to the appendix.

## 4 Offline Contrastive Methods Require a Stronger Coverage Condition than Online RL Methods

We start by introducing the mathematical formulation of the coverage framework. The strongest coverage condition is the following global coverage condition : we say any offline distribution \(\) covers a policy \(\) if we have \(_{x,y:(x)>0} C_{}\). Throughout this section, we will adopt the setting where \(=_{}\). Formally, we assume the following condition:

**Assumption 4.1** (Global Coverage).: _For all \(\), we have_

\[_{x,y:(x)>0}}(y x)} C_{ }.\]

For the coverage terms, we always adopt the convention that \(=0\). Note that one sufficient condition for this assumption is that, for any prompt \(x\), and any token sequence \(y\), we have \(_{}(y x) 1/C_{}\).

As has been recognized in the offline RL literature, global coverage is a strong assumption, and efforts have been made to circumvent this assumption with more relaxed coverage conditions [46; 10; 58]. In this paper, we will consider the following partial coverage assumption that is weaker than Assumption 4.1:

**Assumption 4.2** (Local KL-ball Coverage).: _For all \(_{}<\) and all policy \(\) such that \(_{x}[(( x)||_{}(  x))]_{}\), we have_

\[_{x,y:(x)>0}}(y x)} C_{ _{}}.\]

Note that \(C_{_{}}\) depends on \(_{}\). This coverage notion is relatively new in the RL literature and only appeared in previous analysis of RLHF algorithms . We call this local coverage condition since it only requires \(_{}\) to cover the policies that is within some KL-divergence ball centered at \(_{}\). The intuition of this assumption is, for any algorithm that can control the reverse KL of the output policy, we can leverage the coverage condition to relate the error under the output policy to its error under the offline distribution, and thus guarantee its performance. Finally, we note that since the policies with bounded KL is a subset of all policies, for a fixed \(_{}\), we always have \(C_{_{}} C_{}\).

**Remark 4.1**.: Taking a closer look at Assumption 4.2, we can see that this assumption is always true in the sense that for any policy with \(_{}<\), \(_{x,y:(x)>0}}(y|x)}<\), i.e., \(C_{_{}}<,\) for any \(_{}\). However, while being bounded, \(C_{_{}}\) can be large. Indeed a simple calculation can show that \(_{x,y:(x)>0}}(y|x)}\) can be as large as \(_{x,y:(y|x)>0}}}{(y|x)} \). This can be undesirable because this suggests bounded reverse KL itself is not enough to guarantee optimality: the error can have an _exponential_ amplification when switching from \(_{}\) to \(\). Thus this motivates Assumption 4.2, which assumes that \(C_{_{}}\) is reasonably small.

In what follows, we will show that the global coverage assumption (Assumption 4.1) is necessary for offline contrastive-based algorithms such as DPO and IPO, but partial coverage assumption such as Assumption 4.2 is sufficient for online RL based algorithms. This establishes a separation between the two types of algorithms. We emphasize this theoretical separation explains why in practice online methods is less prone to problems such as reward hacking and producing out-of-distribution responses that are due to dataset with insufficient coverage.

### Global Coverage is Necessary for Offline Contrastive Algorithms

Failure of DPO Under Partial Coverage.Now we show that if the strong coverage Assumption 4.1 breaks, then DPO can not guarantee any performance with respect to the objective function Eq. (1). The intuition is based on a rather common observation of the DPO algorithm: the DPO policy \(_{}\) may generate out of distribution responses, while in contrast, RLHF does not generate responses outside of the support of \(_{}\) due to online reverse-KL constraint. For example,  provides a construction where \(_{}\) chooses a response where RLHF policy assigns 0 mass, thus proving that RLHF policies are a subset of DPO policies.

However, such construction assumes that the reward learning procedure of DPO makes arbitrarily large errors. Also, previous constructions assume deterministic preference, which is only true if the underlying reward function is unbounded. This violates the natural assumption of Assumption 3.1. In the following, we relax these constraints and thus show that DPO fails to guarantee any performance in a rather strong sense. Concretely, DPO constructs the following implicit reward class with the policy class \(\): \(_{}=}(y|x)Z(x)}}\), where \(Z(x)\) is a partition function that maps context to a real number and is independent of \(y\). Plugging this formulation into the BT loss (Eq. (3)) recovers exactly the DPO loss (Eq. (4)) as the partition functions are canceled. Now we can characterize the returned policy by DPO as exactly whose corresponding reward function is accurate _in distribution_:

**Assumption 4.3** (In Distribution Reward Learning).: _We assume the DPO policy \(_{}\) satisfies that:_

\[_{x,y_{}} }(y x)}{_{}(y x)Z(x) }-r^{*}(x,y)^{2}_{}.\]

Note that this is a rather strong assumption for BT loss - by Lemma B.2, at best one can only hope: for any learned reward function \(\), for each context \(x\), there exists a constant \(c(x)\) such that

\[_{x,y_{}}(x,y)-r^{*}(x,y)-c(x)^{2}, \]

i.e., the reward model predicts the human reward up to a gap that is independent of \(y\). This is due to the fact that BT loss only requires the reward function to capture the relative difference, or in other word, any constant shift (with respect to context) in the reward will be canceled in the BT loss. However, for the rest of the section, we will make the stronger learning assumption that the gap \(c(x)=0\) (such as in the case of Assumption 4.3). Previous counterexamples analysis violates this assumption, but we will show that even under this strong assumption, DPO still can not guarantee any performance.

**Proposition 4.1**.: _Denote \(_{}\) as any reference policy such that Assumption 4.1 breaks. Let \(_{}\) be the set of DPO returned policies such that Assumption 4.3 holds. Then there exists policy \(_{}\) such that \(J()=-\)._

Proof sketch.: Without loss of generality, we consider a promptless setting, and assume that the response space is \(=\{y_{1},y_{2},y_{3}\}\). Again without loss of generality, we assume \(_{}\) only covers \(y_{1}\) and \(y_{2}\), and thus Assumption 4.1 breaks. We assume partition function \(Z=1\) for all \(\) but we will berigorous in the formal proof. Then consider the following policy \(\) such that

\[)}{_{}(y_{1})}=r^{*}(y_{ 1})-}}, )}{_{}(y_{2})}=r^{*}(y_{2})-}},\]

One can check \(\) satisfies Assumption 4.3. Now consider the optimal policy \(^{*}(y_{i})=_{}(y_{i})r^{*}(y_{i}) \), for \(i\{1,2\}\), and \(^{*}(y_{3})=0\). Since \(^{*}(y_{1})+^{*}(y_{2})=1\), combining everything we get \((y_{3})>0\), which implies \((||_{})\) is unbounded, thus we complete the proof. 

One can first relate the above construction to the partial coverage assumption Assumption 4.2: since the policy \(\) considered in the proof has unbounded reverse KL with respect to \(_{}\), thus it is not in the KL-ball of \(_{}\) around \(_{}\), which implies that Assumption 4.2 is not sufficient for DPO. Next we show that global coverage is necessary for the IPO algorithm.

Failure of IPO Under Partial Coverage.To show that the global coverage is necessary for IPO, we can even assume a stronger in-distribution learning guarantee, that is, the returned policy achieves the smallest error on its population loss in distribution.

**Proposition 4.2** (Informal).: _Denote \(_{}\) as any reference policy such that Assumption 4.1 breaks. Let \(_{}\) be the set of IPO returned policies such that it is the minimizer of in-distribution error on its population loss. Then there exists policy \(_{}\) such that \(J()=-\)._

We defer the detailed setup and formal version to Appendix D, but the construction for the above proofs share the same intuition: the reverse KL term in the objective function can be unbounded. For offline contrastive-based algorithms, the KL regularization is only enforced under the data distribution, and thus the algorithm can not guarantee bounded reverse KL if the reference policy does not cover the response space well. Although we only showed counterexamples for DPO and IPO, we conjecture that the same intuition holds for other offline contrastive-based algorithms. One natural question at this point would be: how about the forward KL? Not surprisingly, the forward KL for DPO (but we conjecture for other offline constructive-based methods as well) is vacuously large, and we formalize this result in Appendix C.2.

**Remark 4.2**.: The folklore that DPO is equivalent to RLHF is often based on some assumption that is much stronger than Assumption 4.3: it requires that the learned policy has a point-wise accuracy guarantee \((_{}(y|x)/_{}(y|x))=r^{*}(x,y)\) for all \(x,y\). Such a point-wise guarantee is unrealistic in reality and does not hold in general in the supervised learning sense. The in-distribution style guarantee in Assumption 4.3 is the best one could hope for from a supervised learning algorithm.

### Global Coverage is Sufficient for Offline Contrastive Algorithms

After showing that global coverage is necessary for DPO to guarantee any performance, we now show that it is sufficient for the performance guarantee.

**Theorem 4.1**.: _Let \(_{}\) be any reference policy such that Assumption 4.1 holds. For any policy \(_{}\) such that the event in Assumption 4.3 holds, we have that_

\[J(^{*})-J(_{})=O(C_{}}}).\]

Proof.: By Lemma B.1, we have

\[J(^{*})-J(_{}) _{x}_{y^{1}^{*}(|x), y^{2}_{}(|x)}r^{*}(x,y^{1})-}}(x,y^{1})-r^{*}(x,y^{2})+}}(x,y^{2}) \] \[_{x}_{y^{1}^{*}( |x),y^{2}_{}(|x)}(r^{*}(x,y^{1})- {r_{}}(x,y^{1})-r^{*}(x,y^{2})+}}(x,y^{2} ))^{2}}\] \[}^{2}_{x}_{ y^{1},y^{2}_{}(|x)}(r^{*}(x,y^{1})-}}(x,y^{1})-r^{*}(x,y^{2})+}}(x,y^{2}))^{ 2}},\]

and we can complete the proof by plugging in the error guarantee from Assumption 4.3. 

Note that as the proof suggests, the result holds with the more general reward learning guarantee as in Lemma B.2 - one only needs to be accurate in predicting the relative rewards between response pairs.

### Online RL Method Under Partial Coverage

Finally, we contrast the previous negative results in Section4.1 for offline contrastive-based algorithms to a positive result for online RL-based algorithms, under the partial coverage setting. We will show that in general global coverage is not necessary for RLHF, i.e., it can guarantee performance under partial coverage. In fact, one might still be able to show an impossibility result for RLHF under partial coverage, by reusing the same counterexample as in the previous section (c.r., Proposition4.1). Concretely, as long as the learned reward \((y_{3})\), \(_{}(y_{3})\) will be \(1\) and thus the reverse KL will be unbounded. However, this is a rather unrealistic scenario, as the construction requires a reward model (e.g., a neural network) to output an unbounded value. Thus this motivates the following assumption:

**Assumption 4.4**.: _For all learned reward model \(\) from the reward model class, we have that \(_{} R^{}\)._

At this point, one might ask why a similar assumption is missing for the offline contrastive-based analysis, since in Remark4.2 we argued that a point-wise learning guarantee is unrealistic but Assumption4.4 is indeed also a point-wise boundedness assumption. The reason lies in the different construction of the model class \(\) for those algorithms: for DPO and IPO, the reward model is constructed as \(}}=(} 2 })\), and there is no natural function class for \(\) such that point-wise assumptions such as the one in Remark4.2 or Assumption4.4 holds. In contrast, post-processing such as clipping, offline normalization and on-the-fly normalization of rewards is standard in practice, which means the policy will always witness bounded rewards  during online RL training (e.g., PPO). As we will show in the following, the difference in the reward function (which is tied to the offline vs. online nature of the algorithms) can explain the different coverage requirement of the algorithms. Note that we use the same in-distribution reward learning assumption for both types of methods.

To relate to Assumption4.2, we first show that the reverse KL divergence of the RLHF policy is always bounded under Assumption4.4.

**Lemma 4.1**.: _Suppose that Assumption4.4 holds. Then for any RLHF policy \(_{}\), we have that_

\[(_{}||_{}):=_{x} _{y_{}(|x)}}(y x)}{_{}(y x)} }{}.\]

Then we can show that the RLHF algorithm can guarantee performance under partial coverage:

**Theorem 4.2**.: _Suppose that Assumption4.4 holds. Then for any reference policy \(_{}\) for which Assumption4.2 holds with \(_{}=\), and any RLHF policy \(_{}\) with \(\) such that (c.r. Assumption4.3) \(_{x,y_{}}(r^{}(x,y)-(x,y))^{2}_{},\)_

\[J(^{})-J(_{}) O(C_{_{_{_{ _{_{_{_{_{_{_{ _{_{_{_{_{}}}}}}}}}}}}}}}}}).\]

Conditioned on Lemma4.1, the proof of this theorem is similar to that of Theorem4.1 so we defer it to AppendixD. Similar to Theorem4.1, we note that Theorem4.2 holds under a weaker reward learning guarantee as in LemmaB.2. We also remark that as long as \(_{}\) is finite, \(C_{_{}}\) is finite, so the bound is never vacuous. _Since \(C_{_{_{_{_{_{_{_{ {_{_{_{_{}}}}}}}}}}}}} C_{_ {_{_{_{_{_{_{_{ {}_{_{_{_{}_{_{}_{ {}}}}}}}}}}}}}}}\) for all \(_{}\), it indicates the regret bound of RLHF is never worse and can be much better than the regret bound of DPO._ Combining Theorem4.1 and Theorem4.2, we complete the separation result between offline contrastive methods and online RL methods.

A natural question at this point could be: can we further relax the local KL-ball coverage condition in Assumption4.2 to a single-policy coverage condition, i.e., just assuming \(_{x,y}^{}(y|x)/_{}(y|x) C\)? Prior work  shows that with explicit pessimism, it is possible. However, using pessimism makes the algorithm from  not computationally tractable and hard to scale to LLM experiments. Our conjecture is that for the RLHF policy \(_{}\), it is not possible to achieve meaningful regret under the single policy coverage condition, due to KL not being strong enough to induce pessimism (i.e., bounded KL between \(\) and \(_{}\) can still imply exponentially large density ratio \(/_{}\)). Developing a lower bound for \(_{}\) under single policy coverage in this case can be an interesting future work.

```
1: Pretrained LLM \(_{_{0}}\), reference policy \(_{}\), offline data \(\), learning rate \(\), KL coefficient \(\).
2:for\(t=1,,T\)do
3: Sample a minibatch of offline data \(D_{}:=\{x,y^{+},y^{-}\}\).
4: Compute DPO loss \(_{}:=_{x,y^{+},y^{-} D_{}}( (}(y^{+}|x)}{_{}(y^{+}|x)} -(}(y^{-}|x)}{_{}(y^{-}|x)} )\).
5: Sample (unlabeled) online data \(D_{}:=\{x,y\}\) where \(x,y_{_{t-1}}(x)\).
6: Compute \(_{}:=_{x,y D_{}}(_{_{t-1}}(y|x)) (}(y|x))}{(_{} (y|x))}\).
7: Update \(_{t}=_{t-1}+_{_{t-1}}(_{}- _{})\). return\(_{T}\).
```

**Algorithm 1** Hybrid Preference Optimization (HyPO)

## 5 Hybrid Preference Optimization: Regularizing Offline Learning with Unlabeled Online Samples

In this section, we will provide a practical algorithm that bridges the gap between the offline contrastive-based algorithms and the online RL-based algorithms. As we see in the previous sections, the difference between the two types of algorithms is their reward model parametrization, and whether to perform online rollouts. In the following, we will show that these two properties are in fact tightly intervened with each other.

Here we will focus on the DPO algorithm. One way to fix the issue of the unbounded reverse KL of DPO (which is caused by the unbounded reward model class) is to consider the following ideal procedure: at the beginning of the algorithm, we first go through the policy class \(\), and then we filter out all the policies such that \((||_{})}{}\), where \(R^{}\) is the boundedness of the reward function class for RLHF. Now applying the same analysis of Theorem 4.2, we can show that this revised DPO algorithm can guarantee performance under the partial coverage assumption, because now the Lemma 4.1, a sufficient condition for Theorem 4.2, is explicitly enforced by the constraints. We defer the detailed statement and analysis to Appendix F.1.

However, such a filtering procedure is not possible in practice, but we can instead consider the following constrained optimization problem: we call the definition of DPO loss in Eq. (4), we want to solve

\[_{}_{}()(||_{ })}{}, \]

using the KKT conditions, we can show that the following Lagrangian form is equivalent to Eq. (6):

\[_{}_{}()-(||_{}), \]

where \(\) is the Lagrange multiplier. However, in reality, since we do not know the exact value of \(R^{}\), we can consider setting \(\) to be a hyperparameter. We present the pseudocode in Algorithm 1. Note that due to the reverse KL term, the Hybrid Preference Optimization (HyPO) algorithm optimizes Eq. (7) via both offline and online samples where the offline samples are used for constructing and optimizing \(_{}\) (here \(\) denotes the sigmoid function), and the online samples \(y( x)\) are for KL (i.e., \(_{kl}\)). Note that regularizing with reverse KL via online samples is widely used in online RLHF (e.g., PPO , APA , REBEL ). Here \(\) refers to the stop gradient operation, which is a common practice in optimizing reverse KL in the LLM fine-tuning setting . Finally, previous iterative RLHF methods  can be interpreted as hybrid methods as well, but they require labeling online samples from an additional reward model while HyPO only requires unlabeled online samples.

Summarization.Our first experiment is on the TL;DR dataset . Our experiment setup mostly follows : we use a maximum context length of 512 and a maximum generation length of 53. We use Pythia 1.4B and Pythia 2.8B  as the pre-trained model. For the supervised fine-tuning (SFT) model, we train it over 1 epoch of the dataset with human reference responses as labels. We train the reward model on top of the SFT over 1 epoch of preference data. Both HyPO and DPO are trained over 1 epoch of preference data with Low-rank Adaptation (LoRA) . We defer more experiment details in Appendix F.

We summarize the results in Table 1: HyPO outperforms DPO in terms of GPT4 win-rage and reverse KL. Particularly, the significant reduction in reverse KL implies the impact of including a reverse KL term explicitly into the DPO objective. While comparing with PPO (e.g., Table 1 in ), HyPO's performance is still lower in winrate, HyPO does preserve the key advantages of DPO over PPO: we avoid training additional reward model and a value network.

General Chat.In the general chat setting, the model is required to produce a response \(y\) given user instruction \(x\). We again follow the experiment setup in , where we finetune the Meta-Llama-3-8B-Instruct  model on the ultrafeedback dataset . Due to the computation constrain, we follow the setup in  where we only train the last 4 layers of the network for both HyPO and DPO.

For evaluation, we use the common metrics including AlpacaEval 2.0 , MT-bench  and Open LLM leaderboard tasks: MMLU , GSM8K , Arc , TruthfulQA  and HellaSwag . We provide the results for AlpacaEval and MT-bench in Table 2, and the the results of the remaining tasks can be found in Table 3.

HyPO Mitigates Overfitting in Contrastive Methods.Since the offline contrastive based methods only work with a static offline dataset, the overfitting issue has been observed . In our last experiment, we show that HyPO can effectively address the overfitting issue by leveraging the unlabeled online data. We follow the setup of the summarization task with Pythia-2.8B base model. We train DPO and HyPO for 5 epochs respectively, and evaluate on the first 300 data in the validation dataset. We plot the validation KL in Figure 1: we observe that HyPO is better at preventing the deviation from the reference policy caused by overfitting from training on excessive epochs, even though the methods theoretically both have KL regularization to the reference policy.

## 6 Function Approximation Coverage: Can Fine-tuned Policies Extrapolate?

Our final result is a theoretical explanation of the extrapolation behavior of preference fine-tuning algorithms under the global coverage assumption in the function approximation (FA) setting. The extrapolation behavior refers to the phenomenon of RLHF algorithms (e.g., DPO) can improve SFT models despite the fact that during training the policies assign decreasing likelihood to both the preferred and rejected responses (i.e., they must increase the likelihood of responses outside of the training data) .

A previous attempt  to explain this behavior is based on the assumption that the responses from the reference policy have the same distribution as the _preferred_ responses from the dataset, i.e., \(y^{+}y_{}\). However, as mentioned in Section 3, more realistically, one should assume that

    &  &  &  \\  & & 1st Turn & 2nd Turn & Average & LC Win Rate & Win Rate \\  Meta-Llama-3-8B-Instruct  & 8.31 & 7.89 & 8.10 & 26.0 & 25.3 \\ DPO-Llama-3 & 8.08 & 7.41 & 7.75 & 28.4 & 30.9 \\ HyPO-Llama-3 & 8.43 & 7.75 & 8.09 & 30.7 & 32.2 \\   

Table 2: Results on general chat benchmarks. We evaluate the base model (Meta-Llama-3-8B-Instruct), DPO-fine-tuned model, and HyPO-fine-tuned model.

Figure 1: Mean validation reverse KL to the reference policy when DPO and HyPO are trained for 5 epoch on the TL;DR dataset. We repeat the experiment for 3 random seeds and plot the median and the shaded areas denote the min and max over the 3 repetitions.

    &  &  &  \\  & & 1st Turn & 2nd Turn & Average & LC Win Rate & Win Rate \\  Meta-Llama-3-8B-Instruct  & 8.31 & 7.89 & 8.10 & 26.0 & 25.3 \\ DPO-Llama-3 & 8.08 & 7.41 & 7.75 & 28.4 & 30.9 \\ HyPO-Llama-3 & 8.43 & 7.75 & 8.09 & 30.7 & 32.2 \\   

Table 1: Results on TL;DR dataset. Winrate is evaluated by GPT4 and RM score is from the trained reward model. Experiments are repeated for 3 random seeds. Mean and standard deviation are reported.

\(y}{{=}}y_{}\) since it is more natural to use the reference policy to generate pairs of responses to collect labels; or even more generally by considering \(()(_{})\). The latter is common in practice, for example, the dataset is often precollected, or the reference policy might have a small mass on some responses, so with a high probability they are not sampled during the data collection process.

In the following, we illustrate this behavior using linear function approximation:

**Definition 6.1** (Linear function approximation).: _Consider the promptless setting with response space \(\). For all \(y\), the ground truth reward \(r^{*}(y)=w^{}(y)\), where \(w^{d}\) is a universal linear weight vector and \(:^{d}\) is a \(d\)-dimensional feature map. In addition, all policies are parametrized as softmax linear policies, i.e., \((y)(w_{}^{}(y))\). The feature map \(\) is known to the learner, and \(w\) is unknown. Finally, let \(y^{*}=*{argmax}_{y}r^{*}(y)\) be the optimal action._

In general, we should not expect the offline dataset to contain the optimal action \(y^{*}\) under all situations. We show that thanks to the linear function approximation and the dataset coverage, DPO has hope to extrapolate correctly, i.e., it can increase the model's likelihood of the optimal action while decreasing the likelihood of both the preferred and rejected actions from the offline data:

**Proposition 6.1**.: _Under linear function approximation (Definition 6.1), there exists dataset collected from distribution \(\) that does not cover \(y^{*}\), i.e., \((y^{*})=0\), but has global coverage in the linear function approximation setting : let \(_{}=_{y}(y)(y)^{}\), then for all \(\), \(_{y}\|(y)\|_{_{}^{-1}}^{2} C_{}\). Then DPO will return a policy \(_{}\) such that \(_{}(y^{*})>0\), but \(_{}(y)_{}(y)\) for all \(y\) in the offline data support, i.e., \((y)>0\)._

We defer the proof to Appendix D.3. The above result shows when the training dataset together with the function approximation allow the learned function to generalize (e.g., learn a function that can predict well on test examples beyond the training data -- a property supervised learning can have), algorithms like DPO can extrapolate correctly, i.e., they can push up the likelihood of the optimal responses outside of the training data while pushing down the likelihood of all the responses in the training data. Although it is not possible to show that extrapolation is guaranteed to always happen: suppose in the offline dataset, there is an action \(y^{}\) whose feature \((y^{})\) is almost identical to \((y^{*})\), then in the finite sample case, with small learning error the final policy might increase the probability of \(y^{}\) instead of extrapolate to \(y^{*}\), but in this case the policy is still near optimal. That said, our construction in the proof is general enough to explain non-edge-cases under function approximation.

To validate our theory result, in Appendix E we perform a synthetic experiment on global coverage with linear function approximation.

## 7 Discussion

There are a few limitations of our work: 1) our theoretical analysis only considers the statistical perspective of each algorithm, but we believe our result is complementary to the other work that considers the optimization perspectives . 2) we only conduct experiments on limited models and benchmarks. 3) The experiment result shows that HyPO's performance is still below the one of online RLHF: this might suggest that our theory does not fully explain the benefit of all the components of online RLHF. For example, one hypothesis is that the learn reward function may have better generalization ability. 4) It is not clear that the KL-ball coverage is necessary for online RL-based methods. However, as we discussed, since a bounded reverse KL might still induce exponential error amplification, we conjecture that at least the single policy coverage  is not sufficient for online RLHF-based methods that use reverse KL. We believe these limitations lead to several interesting further directions. Finally, our method may not explicitly address the potential hallucinations or toxic behavior of LLMs, which is a common shortcoming of general-purpose fine-tuning algorithms.

    & MMLU & GSM8K & Arc & TruthfulQA & HellaSwag \\  & (5-shot) & (5-shot) & (25-shot) & (0-shot) & (10-shot) & Average \\  Meta-Llama-3-8B-Instruct  & 65.68 & 74.91 & 62.12 & 43.88 & 78.76 & 65.07 \\ DPO-Llama-3 & 65.82 & 73.62 & 63.14 & 45.02 & 79.1 & 65.34 \\ HyPO-Llama-3 & 65.74 & 73.84 & 62.71 & 45.55 & 79.74 & 65.51 \\   

Table 3: Results on Open LLM leaderboard. We evaluate the base model (Meta-Llama-3-8B-Instruct), DPO-fine-tuned model, and HyPO-fine-tuned model.