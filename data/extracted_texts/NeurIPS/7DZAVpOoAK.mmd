# Defending against Data-Free Model Extraction by Distributionally Robust Defensive Training

Zhenyi Wang\({}^{1}\), Li Shen\({}^{2}\), Tongliang Liu\({}^{3}\), Tiehang Duan\({}^{4}\),

Yanjun Zhu\({}^{5}\), Donglin Zhan\({}^{6}\), David Doermann\({}^{7}\), Mingschen Gao\({}^{7}\)

\({}^{1}\)University of Maryland, College Park, USA \({}^{2}\)JD Explore Academy, China

\({}^{3}\)The University of Sydney, Australia \({}^{4}\)West Virginia University, USA

\({}^{5}\)Northeastern University, USA \({}^{6}\)Columbia University, USA

\({}^{7}\)University at Buffalo, USA

zwang169@umd.edu; mathshenli@gmail.com; tongliang.liu@sydney.edu; tiehang.duan@gmail.com; ya.zhu@northeastern.edu; dz2478@columbia.edu; {doermann, mgao8}@buffalo.edu

###### Abstract

Data-Free Model Extraction (DFME) aims to clone a black-box model without knowing its original training data distribution, making it much easier for attackers to steal commercial models. Defense against DFME faces several challenges: (i) effectiveness; (ii) efficiency; (iii) no prior on the attacker's query data distribution and strategy. However, existing defense methods: (1) are highly computation and memory inefficient; or (2) need strong assumptions about attack data distribution; or (3) can only _delay_ the attack or _prove_ a model theft after the model stealing has happened. In this work, we propose a Memory and Computation efficient defense approach, named MeCo, to _prevent_ DFME from happening while maintaining the model utility simultaneously by distributionally robust defensive training on the target victim model. Specifically, we randomize the input so that it: (1) causes a mismatch of the knowledge distillation loss for attackers; (2) disturbs the zeroth-order gradient estimation; (3) changes the label prediction for the attack query data. Therefore, the attacker can only extract misleading information from the black-box model. Extensive experiments on defending against both decision-based and score-based DFME demonstrate that MeCo can significantly reduce the effectiveness of existing DFME methods and substantially improve running efficiency.

## 1 Introduction

Model extraction attack aims to replicate the functionality of a public API with only query access. Most model extraction methods focus on _data-based model extraction_, i.e., an attacker can access a small subset of the in-distribution training data , or a relevant surrogate dataset  of the target model. Beyond data-based model extraction (DBME), recent promising results with data-free model extraction (DFME) 2 show that the attacker can clone a model with performance close to that of the target black-box model even without prior knowledge of the distribution of the proprietary training data. Those DFME techniques make it much easier for attackers to steal the model without collecting and annotating relevant training data. DFME can be further categorized into _score-based_ DFME , where the target model provides softmax probability outputs to the users; and _decision-based_ DFME , where the target model only provides the top-1 label. Thus, the model ownersface a more critical problem - how to prevent those black-box pre-trained models from stealing in the data-free setting while simultaneously guaranteeing a high-quality inference service? The main challenges of defending against DFME are: (1) effectiveness requirement: the defender should substantially reduce the clone model accuracy; (2) efficiency requirement: the defense procedure should be memory and computation efficient; (3) lack of knowledge on the attackers: the attack query data distribution and attack strategy are unknown to the defender.

Existing work on Model Extraction (ME) defense primarily focuses on data-based ME attacks. We categorize the existing ME defense methods into pre-attack, delay-attack, and post-attack defenses. Pre-attack defenses aim to _prevent_ ME attack from happening. They either perturb the output probabilities  or integrate _multiple_ models  or detect attack queries from benign queries . Delay-attack defenses aim to _delay_ the ME attack instead of preventing it . Post-attack defenses neither prevent nor delay the ME; instead, they aim to _prove_ a model theft . Our work falls under the _pre-attack defense_ category since our goal is to _prevent_ ME from happening. However, existing pre-attack defense methods have limitations when applied to DFME: (1) output perturbation-based methods perform optimization during deployment is computationally and memory expensive; (2) ensemble-based methods are memory inefficient since they need to store multiple models; (3) detection-based methods require strong assumptions about the query data distribution; the attacker can easily make the attack queries indistinguishable from benign ones  and circumvent the detection , rendering the defense ineffective; (4) some defense methods  require the knowledge of the attack query data. However, this prior knowledge is unknown to the defender.

To address existing defense methods' limitations, we propose a new and orthogonal class of defense method, named Memory and Computation efficient defense (MeCo), through a randomized defense strategy. Specifically, MeCo adds data-dependent random perturbation to the query input. MeCo can effectively defend against DFME for several reasons. For _score-based_ DFME: (i) it leads to a mismatch of the knowledge distillation loss for attackers; (ii) existing DFME methods heavily rely on zeroth-order gradient estimation. MeCo can disturb the zeroth-order gradient estimation so that the attacker can only obtain its _inaccurate_ estimation. For _decision-based_ DFME, MeCo can change the label prediction of attack query data. The attacker can only learn from incorrectly labeled data.

MeCo would reduce the target model utility on benign queries without additional mechanisms. Maintaining the target model utility needs to : (i) minimally sacrifice the classification accuracy on the test set, and (ii) minimize the perturbation magnitude of the output class probability. To maintain the target model utility on benign queries, we propose a principled distributionally robust optimization (DRO) framework to train the target model and perturbation generator. Our DRO framework simulates the worst-case in-distribution (ID) test data from the training data (accessible for the defender). Then, we apply the random perturbation to the simulated test data and train the target model and perturbation generator on the simulated test data to ensure the worst-case generalization on the ID test data. Compared to existing works, MeCo has numerous advantages, including (1) MeCo is substantially more computation and memory efficient without complex optimization and storing multiple models during deployment; (2) it avoids detecting attack queries from benign ones; (3) does not need the knowledge of the attack query data distribution. More importantly, even if attackers know our defense strategy and adopt an adaptive attack strategy, MeCo is still effective since stealing a _random function_ further increases the difficulty of ME thanks to the randomness introduced in MeCo. Extensive experiments compared to various defense methods show that MeCo significantly reduces the accuracy of the clone model across different query budgets.

In summary, our main contributions are three-fold:

* We propose a novel principled defensive training framework that substantially improves the memory and computation efficiency during deployment to defend against DFME attacks.
* We propose a distributionally robust optimization (DRO) method to randomly perturb the inputs to defend against DFME effectively while maintaining the model utility simultaneously.
* Extensive experiments on defending against both score-based and decision-based DFME show the effectiveness of MeCo, reducing the clone model accuracy by up to \(35\%\), while maintaining the target model utility. Further, MeCo can also effectively defend against data-based ME and boost its performance. More importantly, MeCo achieves substantially more computation and memory efficiency than existing methods, e.g., \(17 172\) speed up.

Related Work

**Data-Free Model Extraction (DFME).** Model extraction (ME) attack aims to extract and clone the functionality of the public API with only query access; representative works include [31; 9; 50; 53; 35; 36; 7; 63; 16; 40; 4; 60; 27]. Recently, ME has been extended to the data-free setting, named DFME, which cannot access original training data. ZSDB3KD  and DFMS-HL  focus on the decision-based setting, i.e., only the hard label (top-1 label) is predicted for the attacker. MAZE and DFME [21; 51] are score-based methods, i.e., soft label (softmax output) is delivered to the attacker.

**Model Extraction Defense.** We categorize the model extraction defense methods into three categories: pre-attack defenses, delay-attack defenses, and post-attack defenses, according to when the defense happens during an attack. **(i) Pre-attack defenses** aim to _prevent_ the ME attack from happening. There are three classes of methods: (1) output probabilities perturbation-based methods [26; 38; 33]: Prediction poisoning (P-poison)  and GRAD  perform a complex optimization during deployment; (2) ensemble-based methods: EDM  integrates multiple models for diverse predictions. (3) detection-based methods: Adaptive misinformation , PRADA  and VarDetect  detect the attack queries from the benign queries. However, those methods have limitations when applied to DFME: (1) they [38; 33] significantly increase the computation and memory cost; (2) they [23; 19; 39] have a high risk of incorrectly classifying attack or benign queries. The attacker can easily evade the detection [28; 11], making the defense ineffective. (3) GRAD , Adaptive misinformation , and EDM  need to know the prior knowledge and distribution of attack query distribution, which is unknown to defenders in the data-free setting. _Our method falls under this pre-attack defense category_ and addresses their limitations from a novel and orthogonal perspective. **(ii) Delay-attack defenses** aim to _delay_ the ME attack instead of preventing the attack. Proof of work (PoW) _delays_ model stealing by significantly increasing the computation cost of query access for model extraction, e.g., solving a puzzle. Ours is fundamentally different from PoW in two aspects: (1) PoW could not prevent model stealing if the users spend more time, computation cost, money, etc. By contrast, our method is to _prevent_ model stealing instead of delaying model stealing; (2) PoW needs multiple teachers to evaluate the privacy leakage of queries . Our method only requires a single teacher; thus, ours is substantially more memory and computation efficient than PoW. **(iii) Post-attack defenses** aim to _prove_ a model theft after a pre-trained model has been stolen, e.g., through watermark-based [1; 12] methods [17; 49], proof-of-learning  and dataset inference . However, the post-attack defenses only perform verification of model theft but cannot prevent the model from being stolen. This requires a model owner to obtain access to the stolen model. If the stolen model is not used as API, the defender cannot verify whether the model has been stolen.

**Distributionally Robust Optimization (DRO)** DRO is a flexible and powerful optimization framework to make decisions under uncertainty [43; 55], where robustness is an important factor [62; 56]. DRO constructs a set of probability distributions, known as an ambiguity set, and then minimizes the worst-case performance within the ambiguity set, thus guaranteeing the model performance. There have been various machine learning applications of DRO, such as dealing with group-shift , subpopulation shift , and long-tailed learning . To the best of our knowledge, our work is the _first_ principled method with DRO for DFME defense.

## 3 Problem Setup and Preliminaries

### Problem Setup

**Data-Free Model Extraction (Attacker).** In DFME, the attacker sends a query input \(\) to the target victim model \(T\) parameterized with \(_{T}\) and receives a prediction \(P(|)=T(;_{T})\). For the score-based setting [21; 51], the target model delivers the soft label (output class probabilities) to the attacker. In the decision-based setting , the target model only delivers the hard label (the top-1 class) prediction to the attacker. Following [54; 21; 51], we assume the following attacker knowledge: (1) _data-free_: the attacker cannot access the original training data distribution of the target victim model. The attacker typically employs synthetic out-of-distribution (OOD) data to query the target model in an attempt to steal it. (2) _black-box_: the attacker does not know the architecture and model parameters of the target model. Given a test dataset \(_{test}\) associated with the black-box model, the attacker aims to train a compact clone model \(C\) with parameters \(_{C}\) that maximize the testing accuracy.

**Defense against DFME (Defender).** Following [38; 22], we assume the defender does not know: (1) whether a query is malicious or benign; (2) the attack strategies adopted by an attacker; (3) the model architecture used by an attacker. The goals of the defender are three-fold: (1) effective: minimize the test accuracy that the attacker can achieve; (2) utility preserving: maintain the accuracy on benign inputs and minimize the perturbation magnitude of the output probability; (3) efficient: the defense procedure should be memory and computation efficient.

### Preliminaries

**Knowledge Distillation (KD).** Existing DFME methods build on top of KD [5; 14; 44; 58; 24]. Assume we have a pre-trained teacher (target) model \(T\) with parameters \(_{T}\), and a student (clone) model \(C\) with parameters \(_{C}\). Suppose the output probabilities of teacher and student for the input \(\) are \(T(;_{T})\) and \(C(;_{C})\), respectively. The training objective of KD is as the following:

\[(,y)=_{c}(,y)+(T(; {}_{T}),C(;_{C})), \]

where \(_{c}(,y)\) is the cross-entropy loss, \(\) is the KL divergence between two probability distributions, and \(\) is the weighting factor. In this work, we focus on defending against score-based and decision-based DFME methods. Due to space limitations, we give a brief description of score-based DFME while placing the details of decision-based DFME in Appendix 8.

**Score-based DFME.** The representative score-based DFME works are [51; 21]. We briefly describe how they work. The attacker has a pseudo data generator \(G\) parameterized by \(_{G}\) with random vector \(\) as input. It generates pseudo data by \(=G(;_{G})\), where \( N(0,)\). Then, the attacker sends the query \(\) to the target and clone model; they output class probabilities according to the generated pseudo data, i.e., \(_{T}=T(;_{T})\) and \(_{C}=C(;_{C})\). The attacker jointly optimizes the clone model \(\) and generator \(\) as below:

\[_{}=(_{T}||_{C}), _{}=-(_{T}||_{C}) \]

Since the target network is black-box, to backpropagate into the generator network weights, they apply zeroth-order gradient  on the outputs of the generator, i.e.,

\[_{_{G}}_{G}=_{G}}{ _{G}}=_{G}}{}}{_{G}}, 28.452756pt\;\; _{G}}{}=_{i=1}^{m}_{G}(+_{i})-_{G}()}{} _{i} \]

where \(_{i}\) is a random direction; \(m\) is the number of queries; \(\) is a small step size. The generator \(G\) and the clone model \(C\) alternatively update their parameters by minimizing the loss \(_{}\) and \(_{}\). The attacker can obtain a clone model \(C(;_{C})\) after a certain number of training iterations.

## 4 Methodology

To defend against DFME, we propose a DRO defensive training strategy. We present the defense method in Section 4.1. We then discuss the defensive training details and deployment algorithm in Section 4.2. We illustrate how the proposed defense can defend against DFME in Section 4.3.

### Distributionally Robust Defensive Training

The core techniques of the score-based DFME are two-fold: (1) using KD loss to match the target and clone model outputs; (2) zeroth-order gradient estimation. On the other hand, decision-based DFME mainly relies on the label prediction of the target model. We propose a random perturbation technique to make the attacker estimate misleading information. However, adding random noise to the query input strongly restricts the flexibility of random perturbation since it is difficult to maintain the model utility while effectively defending against DFME simultaneously. Furthermore, the added randomness to the input should be input-dependent since different inputs have different sensitivities to the neural network decision boundary. We thus propose a flexible random perturbation generator to learn a data-dependent random perturbation that can adaptively generate different perturbations for different inputs while maintaining the performance on benign input. First, we denote the data-dependent random perturbation generator as \(h_{}(,)\) parameterized by parameters \(\) with query \(\) and random noise \(\) as input. The perturbation generator is a two-block ResNet with filter 64. It only accounts for a tiny proportion of the target model. We explain our intuition in Figure 1. Our method buildson the intuition  that the attack query is closer to the decision boundary, while the benign query is farther away from the decision boundary in the DFME setting. We add random perturbation to the query input so that the attack query is closer to or crosses the decision boundary. Their output probabilities from the target model will be perturbed more significantly in the score-based setting. Their labels are more likely to be flipped in the decision-based setting. In contrast, benign queries are far from the decision boundary, thus not influencing benign queries much.

Simply adding the proposed data-dependent random perturbation to the query inputs would reduce the model utility. We propose a Distributionally Robust Optimization (DRO) framework to train the target model and perturbation generator to maintain the target model utility, i.e., (i) minimally sacrifice the classification accuracy on the test set, and (ii) minimize the perturbation magnitude of the output class probabilities. In addition, as depicted in Figure 2, we conducted a comparative analysis of three scenarios: one without random input perturbation, another with random input perturbation, and the third involving DRO defensive training. Our DRO defensive training exhibits a dual capability in effectively defending against DFME while maintaining the model utility.

Since the test data distribution is unknown during deployment, we propose a flexible framework with DRO to optimize under _uncertainty_. DRO constructs an ambiguity set of probability distributions and optimizes the worst-case performance within the ambiguity set, thus guaranteeing

Figure 1: Illustration of our defense method. (a) The perturbation generator takes the input image and random Gaussian noise as input to generate data-dependent perturbation, which is added to the original data to disturb model extraction. (b) According to , the attack queries are closer to the decision boundary than the benign (positive and negative) queries. All queries with added perturbation become even closer to the decision boundary, causing some attack queries to invert labels while leaving the labels of benign queries unaffected. (c) The perturbation generator generates large perturbation on attack queries so that the output class probabilities are perturbed more significantly (top-1 label may change). In contrast, the outputs on benign queries are only perturbed slightly due to the DRO defensive training.

Figure 3: The proposed DRO framework perturbs original training data distribution to simulate worst-case test data distributions considering the high uncertainty of test data distribution represented by the blue and orange color on the right figure.

Figure 2: Illustration of our proposed defense mechanisms. (a) Using query inputs without any input perturbation results in favorable model utility but could not defend against model extraction attack. (b) The red region represents the distribution of benign query data. Applying input perturbation to every input yields excellent defense performance but compromises model utility. (c) The red region illustrates the distribution of benign query data. Distributionally robust optimization (DRO) ensures model utility by minimizing loss on the worst-case perturbed training data (simulation of test data), leading to significantly smaller perturbation magnitudes on benign inputs compared to training without DRO. Beyond the distribution of benign query data distribution (attack queries), DRO isn’t employed, leading to arbitrary perturbation magnitudes on those inputs and strong defense against DFME.

the performance. Our framework takes that the underlying probability distribution of test data \(\) is _unknown_ and lies in an ambiguity set of probability distributions around the training data distribution \(_{0}\). The proposed DRO framework perturbs the training data distribution to simulate the test data distribution, illustrated in Figure 3. It optimizes the worst-case performance in the ambiguity set to guarantee the model utility after adding random perturbation. We formulate the proposed DRO framework in the probability measure (distributions or densities) space :

\[_{_{T},\;_{}}_ {}(_{T},+h_{}(,),y)\] (4) s.t. \[=\{:(||_{0})\} \] \[_{}||T(+h_{}(,))-T()||_{1}, \]

where the inner \(\) optimization in Eq. (4) is to compute and simulate the worst-case test data distribution (denoted as \(\)) around the training data distribution (denoted as \(_{0}\)). \(\) is defined as the probability distribution that achieves \(_{}_{}(_{T},+h_{}(,),y)\). \(\) in Eq. (5) denotes the ambiguity set of probability measures for the test data distribution to characterize its uncertainty. One common choice to define \(\) is through KL divergence. \((||_{0})\) denotes the KL divergence between probability measure \(_{0}\) and \(\). \(\) is a constant to characterize the closeness between \(_{0}\) and \(\) to ensure the worst-case test data distribution \(\) does not deviate from the raw training data distribution \(_{0}\) much. Eq. (6) ensures that model utility (output class probabilities, i.e., \(T()\)) does not change much after adding random perturbation, i.e., \(T(+h_{}(,))\). The probability perturbation magnitude is measured by \(l_{1}\) norm, i.e., \(||||_{1}\). It is crucial to guarantee target model output class probabilities after query perturbation close to that of without query perturbation since _benign users_ need these informative probabilities to derive helpful knowledge . \(\) is a constant.

To solve the above optimization problem, we convert Eq. (4-6) into the following unconstrained optimization problem by Lagrange duality  (detailed derivations are put in Appendix 11.1):

\[_{_{T},\;_{}}_{}[_{ }(_{T},+h_{}(,),y)-(||_{0})]+_{}||T( +h_{}(,))-T()||_{1} \]

The constant \(\) controls the regularization magnitude for model utility. The KL-divergence \((||_{0})\) is handled by Wasserstein gradient flow (WGF) (presented in the following sections), therefore for simplicity, the regularization weight for it is set to 1.0 throughout the paper. We name Eq. (7) as **Defense DRO**. The optimization in Eq. (7) is still challenging to solve as the inner \(\) optimization is over probability measure space, which is an infinite-dimensional _function space_.

**Solution to the Defense DRO.** To make the solution of the Defense DRO (Eq. (7)) tractable, we reformulate it from a new continuous dynamics perspective. To achieve this goal, we first define the energy functional \(F()\) as follows:

\[F()=V()+(||) \]

where \(V()=-_{}\;(_{T},+h_{ {}}(,),y)\). By defining such energy functional \(F()\), the Eq. (7) can be equivalently formulated by the following gradient flow system Eq. (9, 10):

\[\{ _{t}_{t}&= _{W_{2}}F(_{t}):=div(_{t}(_ {t}))\;;\\ _{T}}{dt}&=-_{_{ T}}[_{_{t}}(_{T},+h_{}(,),y)\;\;+_{_{t}}||T( +h_{}(,))-T()||_{1}],. \]

where Eq. (9) solves the inner \(\) problem in Eq. (7) with WGF in Wasserstein space (Details provided in Appendix 11.2) and Eq. (10) solves the outer minimization problem in Eq. (7) for parameter update with gradient flow in Euclidean space. Below, we propose a method for efficiently solving the Eq. (9). We view each training data as one particle and arrive at the following test data distribution simulation solution (solution to Eq. (9)) (Details are provided in Appendix 11.2):

\[_{t+1}^{i}-_{t}^{i}=-_{j=1}^{j=N}[k(_{t} ^{i},_{t}^{j})_{_{t}^{i}}U(_{t}^{j},_{T}) +_{_{t}^{j}}k(_{t}^{i},_{t}^{j})] \]

where \(_{t}^{i}\) denotes the \(i^{th}\) training data \(^{i}\) perturbed at time \(t\); \(\) is the data transformation rate. \(U(,_{T})=-(_{T},\)\(_{,}y)\). \(k(_{i},_{j})\) is the Gaussian kernel, i.e., \(k(_{i},_{j})=(-_{i}-_{j})^{2}}{2})\). The first term in the RHS of Eq. (11) moves the training data towards the worst-case simulated test data distribution by raising the energy functional. The data distribution change is controlled by the sum of gradients from the mini-batch of the training data, which are weighted by the kernel function \(k(_{t}^{i},_{t}^{j})\), smoothing the gradients of training data. The second term (kernel gradient) acts as a repelling force that keeps the transformed data from concentrating on a single data point, thus diversifying the simulated test data.

### End-to-end Defensive Training for DFME

We summarize the defensive training algorithm in Algorithm 1. Line 3-4 simulates the worst-case test data distribution. Line 5-8 adds data-dependent random perturbation to the simulated test data and trains the target model and perturbation generator on the simulated test data.

**MeCo Deployment.** During testing, we perform similar perturbation for each query. Given any query input \(\), \(_{p}=T_{_{T}}(+h_{}(,))\); \( N(0,)\). Then, return the results \(_{p}\) to the user.

```
1:REQUIRE: Target model \(T\) with parameters \(_{T}\); data-dependent perturbation generator \(h_{}\) with parameters \(\); target model learning rate \(\); \(Q\) is the number of test data simulation steps; \(_{tr}\) is the training dataset.
2:for\(k=1\) to \(M\)do (\(M\) is the number of training iterations)
3: randomly sample a new mini-batch data \((,y)\) from \(_{tr}\)
4: perturb mini-batch data to be \((_{Q},y)\)\(Q\) steps by Eq. (11).
5: add random perturbation to \((_{Q},y)\) to be \((_{Q}+h_{}(_{Q},),y)\)
6: calculate the loss \(g(_{T},)=(_{T}^{},_{Q}+ h_{}(_{Q},),y)+||T(+h_{}( ,))-T()||_{1}\)
7: train the target model by \(_{T}^{+1}=_{T}^{}-_{_{T} }[g(_{T},)]\)
8: train the perturbation generator by \(^{k+1}=^{k}-_{}[g(_{T}, )]\)
9:endfor
```

**Algorithm 1** McCo **Training**.

### Why Can MeCo Defend against DFME

Below, we give explanations on why Algorithm 1 could intrinsically defend against both score-based and decision-based DFME from the perspective: (1) mismatch the KD loss for the attacker; (2) disturb the zeroth-order gradient estimation; (3) change the label prediction on attack query.

**Mismatch the KD learning objective.** The KL-divergence loss Eq. (1) is critical to match the probability output between the target and clone model. By adding data-dependent random perturbation, we can encourage the mismatch of the KD loss between the target model and clone model, i.e.,

\[(T(+h_{}(,);_{T}),C( ;_{C})) \]

The mismatch would mislead the attacker to learn in the wrong direction since they think that \(T(+h_{}(,);_{T})\) is the desired output for \(\) but should be \(T(,_{T})\), as illustrated in Figure 1.

**Disturb the zeroth-order gradient estimation.** By adding data-dependent random perturbation, the zeroth-order gradient estimation of score-based DFME (\(_{G}}{}\) in Eq. (3)) becomes:

\[_{G}}{}=_{i=1}^{m}_{G}(+_{i}+_{i}^{1})-_{G}( {x}+_{i}^{2})}{}_{i}, \]

where \(_{i}^{1}\) and \(_{i}^{2}\) are two data-dependent perturbations correspond to the two model inputs \(+_{i}\) and \(\), respectively. Compared with Eq. (3), Eq. (13) would make inaccurate gradient estimation by changing the gradient estimation direction due to the inconsistent random perturbation added to different inputs. Consequently, this would lead the gradient of the pseudo data generator in the wrong direction, i.e., \(_{_{G}}_{G}\) in Eq. (3) would be inaccurate. Then, the generator would not generate informative samples. The uninformative pseudo samples would cause the clone model Eq. (2) to learn incorrect information.

Therefore, by jointly (i) mismatching the KD loss for the attacker; (ii) disturbing the zeroth-order gradient estimation, MeCo can effectively defend against DFME. In summary, MeCo has many advantages compared to existing methods since it _does not need to_: (1) solve a complex optimization during testing; (2) store multiple models for ensemble; (3) detect the attack query from the benign query; (4) know the attack query data distribution. Due to the space limitations, we additionally show why MeCo can defend against decision-based DFME methods by changing the label prediction on attack query in Appendix 8.

**Theoretical Analysis** In this section, we delve into the theoretical analysis of our proposed method. We assess the effectiveness of our approach by analyzing it from the perspective of gradient-bias injection . As depicted in Figure 4, our method progressively introduces perturbations into the gradients calculated by the attacker. This process increases the optimization error that accumulates during the model-stealing process, rendering it more challenging for the attacker to successfullyextract the target model. For a more comprehensive understanding, we have provided detailed theoretical analysis in the Appendix due to space constraints.

## 5 Experiments

### Experimental Setup

**Datasets.** We perform experiments on four standard datasets used in DFME literature, including MNIST, CIFAR10, CIFAR100  and MiniImageNet  (100 classes).

**Baselines.** We compare SOTA DFME and defense baselines. **Attack Baselines**: (1) _decision-based_ DFME methods: DFMS-HL . We do not compare to ZSDB3KD  since it requires a much larger number of queries and is very slow. (2) _score-based_ DFME methods: MAZE  and DFME . **Defense Baselines**: we compare to: (1) _Undefended_: the target model without using any defense strategy; (2) Random Perturb (_RandP_) : randomly perturb the output probabilities. (3) _P-poison_; (4) GRAD : gradient redirection defense. We set a large \(l_{1}\) perturbation budget equal to 1.0 for those defense baselines in the experiments to generate strong defense. That is, \(||-}||_{1} 1.0\); where \(\) and \(}\) are the unmodified/modified output probabilities, respectively. We put more baseline details in Appendix 10.

**Implementation Details.** The random perturbation generator is a two-block ResNet structure with a filter size of 64, which is a small network compared to the backbone (only accounts for a tiny proportion of the backbone). For decision-based DFME methods, following , we use a query budget of \(10M\) for CIFAR100 and \(8M\) for CIFAR-10. For score-based DFME methods, following , we set the number of queries to be \(2M\) for MNIST, \(20M\) for CIFAR10, and \(200M\) for CIFAR100, respectively. We perform each experiment for 5 runs with a mean and standard deviation of results. We provide more implementation details in Appendix 7.

### Results of Defense against DFME

**Clone model accuracy.** For score-based DFME setting (soft label), we show the results on CIFAR10 and CIFAR100 in Table 1. For decision-based DFME setting (hard label), we show the results in

    &  &  &  &  \\   & & ResNet18-8.8X & MobileNetV2 & DenseNet121 \\   &   } & \(87.36 0.78\) & \(75.23 1.53\) & \(73.89 1.29\) \\  & & \(84.28 1.27\) & \(70.56 2.23\) & \(70.63 2.38\) \\  & & \(78.06 1.73\) & \(65.2 1.36\) & \(60.78 1.40\) \\  & & GRAD \(\) & \(79.33 1.68\) & \(65.82 1.67\) & \(60.96 1.57\) \\  & & McCQ \(\) & \(\) & \(\) & \( \\   &   } & \(45.17 0.78\) & \(23.28 1.67\) & \(20.38 1.76\) \\  & & \(28.76 2.38\) & \(22.03 1.50\) & \(18.79 1.38\) \\  & & \(28.61 2.19\) & \(20.89 1.58\) & \( \\  & & \(26.06 1.51\) & \(21.18 1.58\) & \(15.09 1.72\) \\  & & McCQ \(\) & \(\) & \(\) & \(17.95 1.46\) \\   &  &  &  &  \\   & & ResNet18-8.X & MobileNetV2 & DenseNet121 \\   &   } & \(85.72 2.82\) & \(28.36 1.97\) & \(27.28 2.08\) \\  & & \(41.69 2.91\) & \(22.75 2.19\) & \(23.61 2.70\) \\  & & \(80.72 3.00\) & \(20.87 2.61\) & \(21.89 2.93\) \\  & & GRAD \(\) & \(39.07 2.07\) & \(20.71 2.80\) & \(22.08 2.78\) \\  & & McCQ \(\) & \(\) & \(\) & \( \\   &  & \(-\) & \(-\) & \(-\) \\   & & & & & \\ 

Table 1: Clone model accuracy after applying defense methods on **CIFAR-10** and **CIFAR-100** with ResNet34-8x as the target model, which provides soft label

Figure 4: Theoretical explanations illustration: (a) We showcase the optimization trajectory employing the ground truth loss function that the attacker should ideally adopt (it remains inaccessible to the attacker owing to the unknown input perturbation generator). The cloned model converges toward the globally optimal stolen model, effectively emulating the target victim model. (b) Contrastingly, we depict the optimization trajectory utilizing a noisy and imprecise loss function, which is the actual choice of the attacker. The introduction of gradient bias due to the stochastic input perturbation generator causes the cloned model to deviate from the optimal stolen model, leading to ineffective model theft.

Table 2. Due to the space limitations, we present the results on _MinImageNet and MNIST_ in Table 8 and 7 in Appendix. \(\) indicates the accuracy the lower, the better, \(\) indicates the accuracy the higher, the better. For CIFAR10/CIFAR100 in Table 1, we use ResNet34 He et al. (2016) as the target model. The clone model architecture includes, ResNet-18, MobileNetV2 He et al. (2016), DenseNet121 He et al. (2016). We further change the target model architecture as GoogLeNet Russakovsky et al. (2015) for CIFAR10 in Table 9 in Appendix.

The results show MeCo significantly reduces the effectiveness of existing DFME methods by up to 35% and is substantially more effective than the compared methods since (1) RandIP lacks data-dependent information; it maintains the utility for almost all the query data, which is unnecessary for attack queries since the attacker can still learn useful information. (2) P-poison needs a random initialized surrogate attacker model, which acts as an adversary model. (3) GRAD needs to know the attack query set to train the surrogate model. Those surrogates have large gaps compared to the DFME attacker model. Those methods thus perform poorly since the attack query data distribution and model are unknown to the defender. While MeCo does not need a surrogate model.

**Target model utility.** We evaluate the target model utility by (1) target model test accuracy after adopting the defense strategy; (2) \(l_{1}\) norm between the target model output probabilities with and without input perturbation averaged on the test dataset, i.e., \(_{_{}}||T(+h_{}(,))-T()||_{1}\). The results (see Table 3 (MNIST with LeNet, CIFAR10 and CIFAR100 with ResNet34-8x)) indicate that MeCo maintains the target model utility with a slight trade-off of benign accuracy but with much better preservation of output probabilities in terms of \(l_{1}\) norm. The baselines have large perturbations because the baseline defense methods perturb all the query data with the same magnitude (\(l_{1}\) perturbation budget of 1.0); this is unnecessary since the in-distribution benign query does not need such significant perturbation. In contrast, MeCo explicitly optimizes the \(l_{1}\) norm of perturbation with DRO on the simulated test data distribution so that the perturbation magnitude is much smaller.

### Application on Data-Based ME (DBME) Attack

We apply MeCo to defend against traditional DBME methods with Knockoff Nets Ren et al. (2015) and Jacobian-Based Dataset Augmentation (JBDA) Zhu et al. (2017). We present the results in Appendix 9.1. MeCo can significantly outperform existing methods and further reduce the clone model accuracy. When the distribution of attack query data is closer to the training data distribution of the target model, the effectiveness of MeCo defense weakens. This is due to the fact that MeCo applies smaller perturbations to the data distribution similar to the training data of the target model as a result of defensive training.

### Adaptive Attacks

We further analyze the robustness of MeCo against the attacker's countermeasures. Namely, we consider the situations where attackers know about our defense and have tailored the attacks to our defense method by adding data-dependent random perturbation to the query inputs to learn an additional random perturbation generator. In Table 4, MeCo is still effective since the random perturbation added by the defender and attacker are different due to randomness. There is still a mismatch in the KD loss and zeroth-order gradient estimation for the attacker. Interestingly, the performance of the clone model becomes even worse after the attacker performs an adaptive attack.

    &  &  &  &  \\   & & ResNet18.8X & MobileNetV2 & DenseNet121 & ResNet18.8X & MobileNetV2 & DenseNet121 \\   & undfended \(\) & \(84.67 1.90\%\) & \(79.28 1.87\%\) & \(68.87 2.08\%\) & \(72.57 1.28\%\) & \(62.71 1.68\%\) & \(63.58 1.79\%\) \\  & RandIP \(\) & \(84.02 2.31\%\) & \(78.71 1.90\%\) & \(68.16 2.23\%\) & \(72.43 1.43\%\) & \(62.06 1.82\%\) & \(63.16 1.73\%\) \\  & P-poison \(\) & \(84.06 1.87\%\) & \(79.02 1.90\%\) & \(60.86 2.17\%\) & \(71.83 1.32\%\) & \(61.83 1.79\%\) & \(62.73 1.91\%\) \\  & GRAD \(\) & \(84.28 1.95\%\) & \(78.83 1.91\%\) & \(68.11 1.93\%\) & \(71.89 1.37\%\) & \(62.60 1.11\%\) & \(62.57 1.80\%\) \\  & MeCo \(\) & \(\) & \( & \( & \( & \( & \(\) \\   

Table 2: Clone model accuracy after applying different defense methods on CIFAR-10 and CIFAR-100 with ResNet34-8x as the target model, which only provides **hard label**

    &  &  &  \\   & ACC\(\) & \(l_{1}\) norm\(\) & ACC\(\) & \(l_{1}\) norm\(\) & ACC\(\) & \(l_{1}\) norm\(\) \\   underfended \\ RandIP \\ PR-poison \\ GRAD \\ **MeCo** \\  } & \(98.91 0.16\%\) & \(0.0\) & \(94.91 0.37\%\) & \(0.0\) & \(76.71 1.25\%\) & \(0.0\) \\  & P-poison \(\) & \(98.52 0.19\%\) & \(1.0\) & \(93.98 0.28\%\) & \(1.0\) & \(75.23 1.39\%\) & \(1.0\) \\  & P-poison \(\) & \( & \(1.0\) & \(94.58 0.61\%\) & \(1.0\) & \(75.42 1.21\%\) & \(1.0\) \\  & GRAD \(\) & \(98.73 0.31\%\) & \(1.0\) & \( & \(1.0\) & \( & \(1.0\) \\  & MeCo \(\) & \(98.63 0.28\%\) & \(\) & \(94.17 0.56\%\) & \(\) & \(75.36 0.68\%\) & \(\) \\   

Table 3: Target model utility (test accuracy and \(l_{1}\) norm of the output probabilities perturbation magnitude)We believe this is because after the attacker adds the random perturbation, they will need to learn a random function, increasing the difficulty of model extraction. In addition, for score-based DFME, following , we also compare to the adaptive attack method where attackers use only hard label, not probability outputs. We show the results in Table 5. MeCo is still very effective since the pseudo samples are nearer to the decision boundary, and perturbing the input would easily change the model outputs on those samples. Consequently, the attacker still cannot learn useful information.

### Ablation Study

**Effect of DRO.** We evaluate how much improvement DRO can bring to the model utility preservation in Table 12 in Appendix. We can observe that with DRO, our method significantly improves the model utility by \(5.3\%-5.6\%\) compared to the one without DRO training.

**Effect of different query budgets for attacker.** To evaluate the effect of different query budgets on defense performance, we evaluate the clone model accuracy with varying defense methods on CIFAR10 in Figure 5 in Appendix. MeCo substantially outperforms various baselines with varying query budgets.

**Hyperparameter Sensitivity.** We evaluate the hyperparameter sensitivity for \(\) and \(Q\) in Table 10 and Table 11 in Appendix. We observe that model utility increases as \(\) increases with a trade-off of a decrease in defense performance. Results show that \(Q=2\) performs the best. With the increase of \(Q\), the simulated test data may be harder to learn; thus, the benign accuracy slightly decreases.

**Test time speed and memory comparisons.** We compare the running time of best-performing methods in Table 13 in Appendix. MeCo achieves \(17 172\) speed up on CIFAR10 and CIFAR100. This is because P-poison and GRAD solve computationally expensive optimization during testing. In contrast, MeCo does not need this optimization. We provide the results in Table 14 in Appendix for memory consumption evaluation. MeCo is very memory efficient compared to baselines.

**Training efficiency.** We compare our training efficiency to baselines in Table 15 in Appendix. MeCo increases the training cost by \(1.3\). However, MeCo substantially improves the test time running efficiency. We believe this slightly additional computation cost is worth it.

## 6 Conclusion

In this paper, we explore the defense against DFME. We propose a memory and computation efficient (MeCo) defense method through distributionally robust defensive training by adding a data-dependent random perturbation generator to perturb the input data so that the attacker cannot steal useful information from the black-box model. At the same time, MeCo maintains the target model utility. Extensive experiments demonstrate MeCo's effectiveness, computation, and memory efficiency.

**Limitations and Broader Impacts.** Our proposed defensive training helps build safe and trustworthy AI systems. This would be beneficial for protecting current large-scale pre-trained models used in the public APIs since they spend lots of money and time to tune and deploy those valuable large-scale models. However, sharing models and insights is a key driver of progress in the AI research field, and if the community becomes more protective of their models, it could slow down advancements.