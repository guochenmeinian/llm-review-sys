# LoCoDL: Communication-Efficient Distributed Learning with Local Training and Compression

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

In Distributed optimization and Learning, and even more in the modern framework of federated learning, communication, which is slow and costly, is critical. We introduce LoCoDL, a communication-efficient algorithm that leverages the two popular and effective techniques of Local training, which reduces the communication frequency, and Compression, in which short bitstreams are sent instead of full-dimensional vectors of floats. LoCoDL works with a large class of unbiased compressors that includes widely-used sparsification and quantization methods. LoCoDL provably benefits from local training and compression and enjoys a doubly-accelerated communication complexity, with respect to the condition number of the functions and the model dimension, in the general heterogenous regime with strongly convex functions. This is confirmed in practice, with LoCoDL outperforming existing algorithms.

## 1 Introduction

Performing distributed computations is now pervasive in all areas of science. Notably, Federated Learning (FL) consists in training machine learning models in a distributed and collaborative way (Konecny et al., 2016, 2016; McMahan et al., 2017; Bonawitz et al., 2017). The key idea in this rapidly growing field is to exploit the wealth of information stored on distant devices, such as mobile phones or hospital workstations. The many challenges to face in FL include data privacy and robustness to adversarial attacks, but communication-efficiency is likely to be the most critical (Kairouz et al., 2021; Li et al., 2020; Wang et al., 2021). Indeed, in contrast to the centralized setting in a datacenter, in FL the clients perform parallel computations but also communicate back and forth with a distant orchestrating server. Communication typically takes place over the internet or cell phone network, and can be slow, costly, and unreliable. It is the main bottleneck that currently prevents large-scale deployment of FL in mass-market applications.

Two strategies to reduce the communication burden have been popularized by the pressing needs of FL: 1) **Local Training (LT)**, which consists in reducing the communication frequency. That is, instead of communicating the output of every computation step involving a (stochastic) gradient call, several such steps are performed between successive communication rounds. 2) **Communication Compression (CC)**, in which compressed information is sent instead of full-dimensional vectors. We review the literature of LT and CC in Section 1.2.

We propose a new randomized algorithm named LoCoDL, which features LT and unbiased CC for communication-efficient FL and distributed optimization. It is variance-reduced (Hanzely and Richtarik, 2019; Gorbunov et al., 2020; Gower et al., 2020), so that it converges to an exact solution. It provably benefits from the two mechanisms of LT and CC: the communication complexity is doubly accelerated, with a better dependency on the condition number of the functions and on the dimension of the model.

### Problem and Motivation

We study distributed optimization problems of the form

\[_{x^{d}}\ _{i=1}^{n}f_{i}(x)+g(x),\] (1)

where \(d 1\) is the model dimension and the functions \(f_{i}:^{d}\) and \(g:^{d}\) are _smooth_, so their gradients will be called. We consider the server-client model in which \(n 1\) clients do computations in parallel and communicate back and forth with a server. The private function \(f_{i}\) is owned by and stored on client \(i[n]\{1,,n\}\). Problem (1) models empirical risk minimization, of utmost importance in machine learning (Sra et al., 2011; Shalev-Shwartz and Ben-David, 2014). More generally, minimizing a sum of functions appears in virtually all areas of science and engineering. Our goal is to solve Problem (1) in a communication-efficient way, in the general **heterogeneous** setting in which the functions \(f_{i}\), as well as \(g\), can be _arbitrarily different_: we do not make any assumption on their similarity whatsoever.

We consider in this work the strongly convex setting -- an analysis with nonconvex functions would certainly require very different proof techniques, which we currently do not know how to derive. That is, the following holds:

**Assumption 1.1** (strongly convex functions).: The functions \(f_{i}\) and \(g\) are all \(L\)-smooth and \(\)-strongly convex, for some \(0< L\).1 Then we denote by \(x^{}\) the solution of the strongly convex problem (1), which exists and is unique. We define the condition number \(\).

Problem (1) can be viewed as the minimization of the average of the \(n\) functions \((f_{i}+g)\), which can be performed using calls to \((f_{i}+g)= f_{i}+ g\). We do not use this straightforward interpretation. Instead, let us illustrate the interest of having the **additional function**\(g\) in (1), using 4 different viewpoints. We stress that we can handle the case \(g=0\), as discussed in Section 3.1.

\(\) Viewpoint 1: _regularization_. The function \(g\) can be a regularizer. For instance, if the functions \(f_{i}\) are convex, adding \(g=\|\|^{2}\) for a small \(>0\) makes the problem \(\)-strongly convex.

\(\) Viewpoint 2: _shared dataset_. The function \(g\) can model the cost of a common dataset, or a piece thereof, that is known to all clients.

\(\) Viewpoint 3: _server-aided training_. The function \(g\) can model the cost of a core dataset, known only to the server, which makes calls to \( g\). This setting has been investigated in several works, with the idea that using a small auxiliary dataset representative of the global data distribution, the server can correct for the deviation induced by partial participation (Zhao et al., 2018; Yang et al., 2021, 2023). We do not focus on this setting, because we deal with the general heterogeneous setting in which \(g\) and the \(f_{i}\) are not meant to be similar in any sense, and in our work \(g\) is handled by the clients, not by the server.

\(\) Viewpoint 4: _a new mathematical and algorithmic principle_. This is the idea that led to the construction of LoCoDL, and we detail it in Section 2.1.

In LoCoDL, the clients make all gradient calls; that is, Client \(i\) makes calls to \( f_{i}\) and \( g\).

### State of the Art

We review the latest developments on communication-efficient algorithms for distributed learning, making use of LT, CC, or both. Before that, we note that we should distinguish uplink, or clients-to-server, from downlink, or server-to-clients, communication. Uplink is usually slower than downlink communication, since uploading different messages in parallel to the server is slower than broadcasting the same message to an arbitrary number of clients. This can be due to cache memory and aggregation speed constraints of the server, as well as asymmetry of the service provider's systems or protocols used on the internet or cell phone network. In this work, we focus on the **uplink communication complexity**, which is the bottleneck in practice. Indeed, the goal is toexploit parallelism to obtain better performance when \(n\) increases. Precisely, with LoCoDL, the uplink communication complexity decreases from \((d^{-1})\) when \(n\) is small to \(^{-1}\) when \(n\) is large, where the condition number \(\) is defined in Assumption 1.1, see Corollary 3.2. Many works have considered bidirectional compression, which consists in compressing the messages sent both ways (Gorbunov et al., 2020; Philippenko and Dieuleveut, 2020; Liu et al., 2020; Philippenko and Dieuleveut, 2021; Condat and Richtarik, 2022; Gruntkowska et al., 2023; Tyurin and Richtarik, 2023b) but to the best of our knowledge, this has no impact on the downlink complexity, which cannot be reduced further than \((d^{-1})\), just because there is no parallelism to exploit in this direction. Thus, we focus our analysis on theoretical and algorithmic techniques to reduce the uplink communication complexity, which we call communication complexity in short, and we ignore downlink communication.

**Communication Compression (CC)** consists in applying some lossy scheme that compresses vectors into messages of small bit size, which are communicated. For instance, the well-known rand-\(k\) compressor selects \(k\) coordinates of the vector uniformly at random, for some \(k[d]\{1,,d\}\). \(k\) can be as small as \(1\), in which case the compression factor is \(d\), which can be huge. Some compressors, such as rand-\(k\), are unbiased, whereas others are biased; we refer to Beznosikov et al. (2020); Albasyoni et al. (2020); Horvath et al. (2022); Condat et al. (2022b) for several examples and a discussion of their properties. The introduction of DIANA by Mishchenko et al. (2019) was a major milestone, as this algorithm converges linearly with the large class of unbiased compressors defined in Section 1.3 and also considered in LoCoDL. The communication complexity \(d^{-1}\) of the basic Gradient Descent (GD) algorithm is reduced with DIANA to \((+d)^{-1}\) when \(n\) is large, see Table 2. DIANA was later extended in several ways (Horvath et al., 2022; Gorbunov et al., 2020; Condat and Richtarik, 2022). An accelerated version of DIANA called ADIANA based on Nesterov Accelerated GD has been proposed (Li et al., 2020b) and further analyzed in He et al. (2023); it has the state-of-the-art theoretical complexity.

Algorithms converging linearly with biased compressors have also been proposed, such as EF21(Richtarik et al., 2021; Fatkhullin et al., 2021; Condat et al., 2022b), but the acceleration potential is less understood than with unbiased compressors. Algorithms with CC such as MARINA (Gorbunov et al., 2021) and DASHA (Tyurin and Richtarik, 2023a) have been proposed for nonconvex optimization, but their analysis requires a different approach and there is a gap in the achievable performance: their complexity depends on \(}\) instead of \(\) with DIANA, where \(\) characterizes the compression error variance, see (2). Therefore, we focus on the convex setting and leave the nonconvex study for future work.

**Local Training (LT)** is a simple but remarkably efficient idea: the clients perform multiple Gradient Descent (GD) steps, instead of only one, between successive communication rounds. The intuition behind is that this leads to the communication of richer information, so that the number of communication rounds to reach a given accuracy is reduced. We refer to Mishchenko et al. (2022) for a comprehensive review of LT-based algorithms, which include the popular FedAvg and Scaffold algorithms of McMahan et al. (2017) and Karimireddy et al. (2020), respectively. Mishchenko et al. (2022) made a breakthrough by proposing Scaffnew, the first LT-based variance-reduced algorithm that not only converges linearly to the exact solution in the strongly convex setting, but does so with accelerated communication complexity \((d^{-1})\). In Scaffnew, communication can occur randomly after every iteration, but occurs only with a small probability \(p\). Thus, there are in average \(p^{-1}\) local steps between successive communication rounds. The optimal dependency on \(\)(Scaman et al., 2019) is obtained with \(p=1/\). LoCoDL has the same probabilistic LT mechanism as Scaffnew but does not revert to it when compression is disabled, because of the additional function \(g\) and tracking variables \(y\) and \(v\). A different approach to LT was developed by Sadiev et al. (2022a) with the APDA-Inexact algorithm, and generalized to handle partial participation by Grudzien et al. (2023) with the 5GCS algorithm: in both algorithms, the local GD steps form an inner loop in order to compute a proximity operator inexactly.

**Combining LT and CC** while retaining their benefits is very challenging. In our strongly convex and heterogeneous setting, the methods Osparse-local-SGD (Basu et al., 2020) and FedPAQ (Reisizadeh et al., 2020) do not converge linearly. FedCOMGATE features LT + CC and converges linearly (Haddadpour et al., 2021), but its complexity \((d^{-1})\) does not show any acceleration. We can mention that random reshuffling, a technique that can be seen as a type of LT, has been combined with CC in Sadiev et al. (2022b); Malinovsky and Richtarik (2022). Recently, Condat et al. (2022a) managedto design a specific compression technique compatible with the LT mechanism of Scaffnew, leading to CompressedScaffnew, the first LT + CC algorithm exhibiting a doubly-accelerated complexity, namely \(+}{}+d ^{-1}\), as reported in Table 2. However, CompressedScaffnew uses a specific linear compression scheme that requires shared randomness; that is, all clients have to agree on a random permutation of the columns of the global compression pattern. No other compressor can be used, which notably rules out any type of quantization.

### A General Class of Unbiased Random Compressors

For every \( 0\), we define the \(()\) as the set of random compression operators \(:^{d}^{d}\) that are unbiased, i.e. \([(x)]=x\), and satisfy, for every \(x^{d}\),

\[(x)-x^{2}\|x \|^{2}.\] (2)

In addition, given a collection \((_{i})_{i=1}^{n}\) of compression operators in \(()\) for some \( 0\), in order to characterize their joint variance, we introduce the constant \(_{} 0\) such that, for every \(x_{i}^{d}\), \(i[n]\), we have

\[_{i=1}^{n}_{i}(x_{ i})-x_{i}^{2}}}{n}_{i=1}^{ n}\|x_{i}\|^{2}.\] (3)

The inequality (3) is not an additional assumption: it is satisfied with \(_{}=\) by convexity of the squared norm. But the convergence rate will depend on \(_{}\), which is typically much smaller than \(\). In particular, if the compressors \(_{i}\) are mutually independent, the variance of their sum is the sum of their variances, and (3) is satisfied with \(_{}=\).

### Challenge and Contributions

This work addresses the following question: _Can we combine LT and CC with any compressors in the generic class \(()\) defined in the previous section, and fully benefit from both techniques by obtaining a doubly-accelerated communication complexity?_

We answer this question in the affirmative. LoCoDL has the same probabilistic LT mechanism as Scaffnew and features CC with compressors in \(()\) with arbitrarily large \( 0\), with proved linear convergence under Assumption 1.1, without further requirements. By choosing the communication probability and the variance \(\) appropriately, double acceleration is obtained. Thus, LoCoDL achieves the same theoretical complexity as CompressedScaffnew, but allows for a large class of compressors instead of the cumbersome permutation-based compressor of the latter. In particular, with compressors performing sparsification and quantization, LoCoDL outperforms existing algorithms, as we show by experiments in Section 4. This is remarkable, since ADIANA, based on Nesterov acceleration and not LT, has an even better theoretical complexity when \(n\) is larger than \(d\), see Table 2, but this is not reflected in practice: ADIANA is clearly behind LoCoDL in our experiments. Thus, LoCoDL sets new standards in terms of communication efficiency.

## 2 Proposed Algorithm LoCoDL

### Principle: Double Lifting of the Problem to a Consensus Problem

In LoCoDL, every client stores and updates _two_ local model estimates. They will all converge to the same solution \(x^{}\) of (1). This construction comes from two ideas.

**Local steps with local models.** In algorithms making use of LT, such as FedAvg, Scaffold and Scaffnew, the clients store and update local model estimates \(x_{i}\). When communication occurs, an estimate of their average is formed by the server and broadcast to all clients. They all resume their computations with this new model estimate.

**Compressing the difference between two estimates.** To implement CC, a powerful idea is to compress not the vectors themselves, but _difference vectors_ that converge to zero. This way, the algorithm is variance-reduced; that is, the compression error vanishes at convergence. The technique of compressing the difference between a gradient vector and a control variate is at the core of algorithms such as DIANA and EF21. Here, we want to compress differences between model estimates, not gradient estimates. That is, we want Client \(i\) to compress the difference between \(x_{i}\) and another model estimate that converges to the solution \(x^{}\) as well. We see the need of an additional model estimate that plays the role of an anchor for compression. This is the variable \(y\) common to all clients in LoCoDL, which compress \(x_{i}-y\) and send these compressed differences to the server.

**Combining the two ideas.** Accordingly, an equivalent reformulation of (1) is the consensus problem with \(n+1\) variables

\[_{x_{1},,x_{n},y}\ _{i=1}^{n}f_{i}(x_{i})+g(y)\ \ \ \ x_{1}= =x_{n}=y.\]

The primal-dual optimality conditions are \(x_{1}==x_{n}=y\), \(0= f_{i}(x_{i})-u_{i}\  i[n]\), \(0= g(y)-v\), and \(0=u_{1}++u_{n}+nv\) (dual feasibility), for some dual variables \(u_{1},,u_{n},v\) introduced in LoCoDL, that always satisfy the dual feasibility condition.

### Description of LoCoDL

LoCoDL is a randomized primal-dual algorithm, shown as Algorithm 1. At every iteration, for every \(i[n]\) in parallel, Client \(i\) first constructs a prediction \(_{i}^{t}\) of its updated local model estimate, using a GD step with respect to \(f_{i}\) corrected by the dual variable \(u_{i}^{t}\). It also constructs a prediction \(^{t}\) of the updated model estimate, using a GD step with respect to \(g\) corrected by the dual variable \(v^{t}\)

 Algorithm & Com. complexity in \# rounds & case \(=(n)\) & case \(=(n)\) \\  DIANA & \((1+)+\) & \(+\) & \(+\) \\ EF21 & \((1+)\) & \((1+)\) & \((1+)\) \\
5GCS-CC & \(1++}+\) & \((1+)+\) & \((1+)+\) \\ ADIANA\({}^{1}\) & \(1+}{n^{1/4}}+}+\) & \(1+}{n^{1/4}}+\) & \((1+)+\) \\ ADIANA\({}^{2}\) & \(1+}+\) & \(1+}+\) & \((1+)+\) \\ lower bound\({}^{2}\) & \(1+}+\) & \(1+}+\) & \((1+)+\) \\  LoCoDL & \(1++}+(1+ )\) & \((1+)+\) & \((1+)+\) \\   \({}^{1}\)This is the complexity derived in the original paper Li et al. (2020b).

\({}^{2}\)This is the complexity derived by a refined analysis in the preprint He et al. (2023), where a matching lower bound is also derived.

Table 1: Communication complexity in number of communication rounds to reach \(\)-accuracy for linearly-converging algorithms allowing for CC with independent compressors in \(()\) for any \( 0\). Since the compressors are independent, \(_{}=\). We provide the leading asymptotic factor and ignore log factors such as \(^{-1}\). The state of the art is highlighted in green.

 Algorithm & complexity in \# reals & case \(n=(d)\) \\  DIANA & \((1+)+d\) & \(+d\) \\ EF21 & \(d\) & \(d\) \\
5GCS-CC & \(+}+d\) & \(}+d\) \\ ADIANA & \(1+}+d\) & \(}+d\) \\ CompressedScaffnew & \(+}+d\) & \(}+d\) \\ FedCOMGATE & \(d\) & \(d\) \\ LoCoDL & \(+}+d\) & \(}+d\) \\  

Table 2: (Uplink) communication complexity in number of reals to reach \(\)-accuracy for linearly-converging algorithms allowing for CC, with an optimal choice of unbiased compressors. We provide the leading asymptotic factor and ignore log factors such as \(^{-1}\). The state of the art is highlighted in green.

Since \(g\) is known by all clients, they all maintain and update identical copies of the variables \(y\) and \(v\). If there is no communication, which is the case with probability \(1-p\), \(x_{i}\) and \(y\) are updated with these predicted estimates, and the dual variables \(u_{i}\) and \(v\) are unchanged. If communication occurs, which is the case with probability \(p\), the clients compress the differences \(_{i}^{t}-^{t}\) and send these compressed vectors to the server, which forms \(^{t}\) equal to one half of their average. Then the variables \(x_{i}\) are updated using a convex combination of the local predicted estimates \(_{i}^{t}\) and the global but noisy estimate \(^{t}+^{t}\). \(y\) is updated similarly. Finally, the dual variables are updated using the compressed differences minus their weighted average, so that the dual feasibility condition remains satisfied. The model estimates \(x_{i}^{t}\), \(_{i}^{t}\), \(y^{t}\), \(^{t}\) all converge to \(x^{}\), so that their differences, as well as the compressed differences as a consequence of (2), converge to zero. This is the key property that makes the algorithm variance-reduced. We consider the following assumption.

**Assumption 2.1** (class of compressors).: In LoCoDL the compressors \(_{i}^{t}\) are all in \(()\) for some \( 0\). Moreover, for every \(i[n]\), \(i^{}[n]\), \(t 0\), \(t^{} 0\), \(_{i}^{t}\) and \(_{i^{}}^{t^{}}\) are independent if \(t t^{}\) (\(_{i}^{t}\) and \(_{i^{}}^{t}\) at the same iteration \(t\) need not be independent). We define \(_{} 0\) such that for every \(t 0\), the collection \((_{i}^{t})_{i=1}^{n}\) satisfies (3).

_Remark 2.2_ (partial participation).: LoCoDL allows for a form of partial participation if we set \(=1\). Indeed, in that case, at steps 11 and 13 of the algorithm, all local variables \(x_{i}\) as well as the common variable \(y\) are overwritten by the same up-to-date model \(^{t}+^{t}\). So, it does not matter that for a non-participating client \(i\) with \(d_{i}^{t}=0\), the \(_{i}^{t^{}}\) were not computed for the \(t^{} t\) since its last participation, as they are not used in the process. However, a non-participating client should still update its local copy of \(y\) at every iteration. This can be done when \( g\) is much cheaper to compute that \( f_{i}\), as is the case with \(g=\|\|^{2}\). A non-participating client can be completely idle for a certain period of time, but when it resumes participating, it should receive the last estimates of \(x\), \(y\) and \(v\) from the server as it lost synchronization.

## 3 Convergence and Complexity of LoCoDL

**Theorem 3.1** (linear convergence of LoCoDL).: _Suppose that Assumptions 1.1 and 2.1 hold. In LoCoDL, suppose that \(0<<\), \(2-^{2}(1+_{})- 0\). For every \(t 0\), define the Lyapunovfunction_

\[^{t}(_{i=1}^{n}\|x_{i}^{t}-x^{} \|^{2}+n\|y^{t}-x^{}\|^{2})+}(_{i=1}^{n}\|u_{i}^{t}-u_{i}^{}\|^{2}+n \|v^{t}-v^{}\|^{2}),\] (4)

_where \(v^{} g(x^{})\) and \(u_{i}^{} f_{i}(x^{})\). Then \(\) converges linearly: for every \(t 0\),_

\[^{t}^{t}^{0}, ((1-)^{2},(1- L)^{2},1-}{1+ 2})<1.\] (5)

_In addition, for every \(i[n]\), \((x_{i}^{t})_{t}\) and \((y^{t})_{t}\) converge to \(x^{}\), \((u_{i}^{t})_{t}\) converges to \(u_{i}^{}\), and \((v^{t})_{t}\) converges to \(v^{}\), almost surely._

We place ourselves in the conditions of Theorem 3.1. We observe that in (5), the larger \(\), the better, so given \(\) we should set \(=2-^{2}(1+_{})\). Then, choosing \(\) to maximize \(\) yields

\[==}}.\] (6)

We now study the complexity of \(\) with \(\) and \(\) chosen as in (6) and \(=()\). We remark that \(\) has the same rate \(^{}(1-, L-1)^{2}\) as mere distributed gradient descent, as long as \(p^{-1}\), \(\) and \(_{}\) are small enough to have \(1-}{1+2}^{}\). This is remarkable: communicating with a low frequency and compressed vectors does not harm convergence at all, until some threshold.

The iteration complexity of \(\) to reach \(\)-accuracy, i.e. \([^{t}]^{0}\), is

\[((+})(1+)}{p^{2}} )^{-1}).\] (7)

By choosing

\[p=(})(1+)}{}},1),\] (8)

the iteration complexity becomes \(+(1+_{}) ^{-1}\) and the communication complexity in number of communication rounds is \(p\) times the iteration complexity, that is

\[((})(1+)}+( 1+_{}))^{-1}).\]

If the compressors are mutually independent, \(_{}=\) and the communication complexity can be equivalently written as

\[(((1++}) +(1+))^{-1} ),\]

as shown in Table 1.

Let us consider the example of independent rand-\(k\) compressors, for some \(k[d]\). We have \(=-1\). Therefore, the communication complexity in numbers of reals is \(k\) times the complexity in number of rounds; that is, \((((+})+ d(1+))^{-1})\). We can now choose \(k\) to minimize this complexity: with \(k=\), it becomes \((((+})+ d)^{-1})\), as shown in Table 2. Let us state this result:

**Corollary 3.2**.: _In the conditions of Theorem 3.1, suppose in addition that the compressors \(_{i}^{t}\) are independent rand-\(k\) compressors with \(k=\). Suppose that \(=()\), \(==\), and_

\[p=(}{nk^{2}}},1).\] (9)

_Then the uplink communication complexity in number of reals of \(\) is_

\[((+}{}+d )^{-1}).\] (10)This is the same complexity as CompressedScaffnew(Condat et al., 2022). However, it is obtained with simple independent compressors, which is much more practical than the permutation-based compressors with shared randomness of CompressedScaffnew. Moreover, this complexity can be obtained with other types of compressors, and further reduced, when reasoning in number of bits and not only reals, by making use of quantization (Albasyoni et al., 2020), as we illustrate by experiments in the next section.

We can distinguish 2 regimes:

1. In the "large \(d\) small \(n\)" regime, i.e. \(n=(d)\), the communication complexity of LoCoDL in (10) becomes \(((}{}+d)^{ -1})\). This is the state of the art, as reported in Table 2.

2. In the "large \(n\) small \(d\)" regime, i.e. \(n=(d)\), the communication complexity of LoCoDL in (10) becomes \(((+d)^{-1})\). If \(n\) is even larger with \(n=(d^{2})\), ADIANA achieves the even better complexity \(((+d)^{-1})\).

Yet, in the experiments we ran with different datasets and values of \(d\), \(n\), \(\), LoCoDL outperforms the other algorithms, including ADIANA, in all cases.

### The Case \(g=0\)

We have assumed the presence of a function \(g\) in Problem (1), whose gradient is called by all clients. In this section, we show that we can handle the case where such a function is not available. So, let us assume that we want to minimize \(_{i=1}^{n}f_{i}\), with the functions \(f_{i}\) satisfying Assumption 1.1. We now define the functions \(_{i} f_{i}-\|\|^{2}\) and \(\|\|^{2}\). They are all \(\)-smooth and \(\)-strongly convex, with \( L-\) and \(\). Moreover, it is equivalent to minimize \(_{i=1}^{n}f_{i}\) or \(_{i=1}^{n}_{i}+\). We can then apply LoCoDL to the latter problem. At Step 5, we simply have \(y^{t}-(y^{t})=(1-)y^{t}\). The rate in (5) applies with \(L\) and \(\) replaced by \(\) and \(\), respectively. Since \(=}{} 2\), the asymptotic complexities derived above also apply to this setting. Thus, the presence of \(g\) in Problem (1) is not restrictive at all, as the only property of \(g\) that matters is that it has the same amount of strong convexity as the \(f_{i}\)s.

## 4 Experiments

We evaluate the performance of our proposed method LoCoDL and compare it with several other methods that also allow for CC and converge linearly to \(x^{}\). We also include GradSkip(Maranjuan et al., 2023) and Scaffold(McMahan et al., 2017) in our comparisons. We focus on a regularized

Figure 1: Comparison of several algorithms with several compressors on logistic regression with the ‘a5a’ dataset from the LibSVM, which has \(d=122\) and 6,414 data points. We chose different values of \(n\) to illustrate the two regimes \(n<d\) and \(n>d\), as discussed at the end of Section 3.

logistic regression problem, which has the form (1) with

\[f_{i}(x)=_{s=1}^{m}1+(-b_{i,s}a_{i,s}^{}x )+\|x\|^{2}\] (11)

and \(g=\|x\|^{2}\), where \(n\) is the number of clients, \(m\) is the number of data points per client, \(a_{i,s}^{d}\) and \(b_{i,s}\{-1,+1\}\) are the data samples, and \(\) is the regularization parameter, set so that \(=10^{4}\). For all algorithms other than LoCoDL, for which there is no function \(g\), the functions \(f_{i}\) in (11) have a twice higher \(\), so that the problem remains the same.

We considered several datasets from the LibSVM library (Chang and Lin, 2011) (3-clause BSD license). We show the results with the 'a5a' dataset in Figure 1 and with other datasets in the Appendix. We prepared each dataset by first shuffling it, then distributing it equally among the \(n\) clients (since \(m\) in (11) is an integer, the remaining datapoints were discarded). We used four different compression operators in the class \(()\), for some \( 0\):

* rand-\(k\) for some \(k[d]\), which communicates \(32k+k_{2}(d)\) bits. Indeed, the \(k\) randomly chosen values are sent in the standard 32-bits IEEE floating-point format, and their locations are encoded with \(k_{2}(d)\) additional bits. We have \(=-1\).
* Natural Compression (Horvath et al., 2022), a form of quantization in which floats are encoded into 9 bits instead of 32 bits. We have \(=\).
* A combination of rand-\(k\) and Natural Compression, in which the \(k\) chosen values are encoded into 9 bits, which yields a total of \(9k+k_{2}(d)\) bits. We have \(=-1\).
* The \(l_{1}\)-selection compressor, defined as \(C(x)=(x_{j})\|x\|_{1}e_{j}\), where \(j\) is chosen randomly in \([d]\), with the probability of choosing \(j^{}[d]\) equal to \(|x_{j^{}}|/\|x\|_{1}\), and \(e_{j}\) is the \(j\)-th standard unit basis vector in \(^{d}\). \((x_{j})\|x\|_{1}\) is sent as a 32-bits float and the location of \(j\) is indicated with \(_{2}(d)\), so that this compressor communicates \(32+_{2}(d)\) bits. Like with rand-\(1\), we have \(=d-1\).

The compressors at different clients are independent, so that \(_{}=\) in (3).

We can see that LoCoDL, when combined with rand-\(k\) and Natural Compression, converges faster than all other algorithms, with respect to the total number of communicated bits per client. We chose two different numbers \(n\) of clients, one with \(n<d\) and another one with \(n>2d\), since the compressor of CompressedScafInew is different in the two cases \(n<2d\) and \(n>2d\)(Condat et al., 2022a). LoCoDL outperforms CompressedScafInew in both cases. As expected, all methods exhibit faster convergence with larger \(n\). Remarkably, ADIANA, which has the best theoretical complexity for large \(n\), improves upon DIANA but is not competitive with the LT-based methods CompressedScafInew, 5GCS-CC, and LoCoDL. This illustrates the power of doubly-accelerated methods based on a successful combination of LT and CC. In this class, our new proposed LoCoDL algorithm shines. For all algorithms, we used the theoretical parameter values given in their available convergence results (Corollary 3.2 for LoCoDL). We tried to tune the parameter values, such as \(k\) in rand-\(k\) and the (average) number of local steps per round, but this only gave minor improvements. For instance, ADIANA in Figure 1 was a bit faster with the best value of \(k=20\) than with \(k=30\). Increasing the learning rate \(\) led to inconsistent results, with sometimes divergence.

## 5 Conclusion

We have proposed LoCoDL, which combines a probabilistic Local Training mechanism similar to the one of Scaffnew and Communication Compression with a large class of unbiased compressors. This successful combination makes LoCoDL highly communication-efficient, with a doubly accelerated complexity with respect to the model dimension \(d\) and the condition number of the functions. In practice, LoCoDL outperforms other algorithms, including ADIANA, which has an even better complexity in theory obtained from Nesterov acceleration and not Local Training. This again shows the relevance of the popular mechanism of Local Training, which has been widely adopted in Federated Learning. A venue for future work is to implement bidirectional compression (Liu et al., 2020; Philippenko and Dieuleveut, 2021). We will also investigate extensions of our method with calls to stochastic gradient estimates, with or without variance reduction, as well as partial participation. These two features have been proposed for Scaffnew in Malinovsky et al. (2022) and Condat et al. (2023), but they are challenging to combine with generic compression.