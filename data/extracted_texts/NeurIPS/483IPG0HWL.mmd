# ReEvo: Large Language Models as Hyper-Heuristics with Reflective Evolution

Haoran Ye\({}^{1}\), Jiarui Wang\({}^{2}\), Zhiguang Cao\({}^{3}\), Federico Berto\({}^{4}\),

Chuanbo Hua\({}^{4}\), Haeyeon Kim\({}^{4}\), Jinkyoo Park\({}^{4}\), Guojie Song\({}^{1}\)

Correspondence to: Guojie Song <gjsong@pku.edu.cn>.Work made with contributions from the AI4CO open research community.

Project Website: [https://ai4co.github.io/reevo](https://ai4co.github.io/reevo)

###### Abstract

The omnipresence of NP-hard combinatorial optimization problems (COPs) compels domain experts to engage in trial-and-error heuristic design. The long-standing endeavor of design automation has gained new momentum with the rise of large language models (LLMs). This paper introduces Language Hyper-Heuristics (LHHs), an emerging variant of Hyper-Heuristics that leverages LLMs for heuristic generation, featuring minimal manual intervention and open-ended heuristic spaces. To empower LHHs, we present Reflective Evolution (ReEvo), a novel integration of evolutionary search for efficiently exploring the heuristic space, and LLM reflections to provide verbal gradients within the space. Across five heterogeneous algorithmic types, six different COPs, and both white-box and black-box views of COPs, ReEvo yields state-of-the-art and competitive meta-heuristics, evolutionary algorithms, heuristics, and neural solvers, while being more sample-efficient than prior LHHs.

## 1 Introduction

NP-hard combinatorial optimization problems (COPs) pervade numerous real-world systems, each characterized by distinct constraints and objectives. The intrinsic complexity and heterogeneity of these problems compel domain experts to laboriously develop heuristics for their approximate solutions . Automation of heuristic designs represents a longstanding pursuit.

Classic Hyper-Heuristics (HHs) automate heuristic design by searching for the best heuristic (combination) from a set of heuristics or heuristic components . Despite decades of development, HHs are limited by heuristic spaces predefined by human experts . The rise of large language models (LLMs) opens up new possibilities for HHs. This paper introduces the general concept of _Language Hyper-Heuristics (LHH)_ to advance beyond preliminary attempts in individual COP settings . LHH constitutes an emerging variant of HH that utilizes LLMs for heuristic generations. It features minimal human intervention and open-ended heuristic spaces, showing promise to comprehensively shift the HH research paradigm.

Pure LHH (e.g., LLM generations alone) is sample-inefficient and exhibits limited inference capability for black-box COPs. This work elicits the power of LHH with _Reflective Evolution_ (ReEvo). ReEvo couples evolutionary search for efficiently exploring heuristic spaces, with self-reflections to boost the reasoning capabilities of LLMs. It emulates human experts by reflecting on the relative performance of two heuristics and gathering insights across iterations. This reflection approach is analogous to interpreting genetic cues and providing "_verbal gradient_" within search spaces. We introduce fitness landscape analysis and black-box prompting for reliable evaluation of LHHs. The dual-level reflections are shown to enhance heuristic search and induce verbal inference for black-box COPs, enabling ReEvo to outperform prior state-of-the-art (SOTA) LHH .

We introduce novel applications of LHHs and yield SOTA solvers with ReEvo: (1) We evolve penalty heuristics for Guided Local Search (GLS), which outperforms SOTA learning-based  and knowledge-based  (G)LS solvers. (2) We enhance Ant Colony Optimization (ACO) by evolving its heuristic measures, surpassing both neural-enhanced heuristics  and expert-designed heuristics . (3) We refine the genetic algorithm (GA) for Electronic Design Automation (EDA) by evolving genetic operators, outperforming expert-designed GA  and the SOTA neural solver  for the Decap Placement Problem (DPP). (4) Compared to a classic HH , ReEvo generates superior constructive heuristics for the Traveling Salesman Problem (TSP). (5) We enhance the generalization of SOTA neural combinatorial optimization (NCO) solvers  by evolving heuristics for attention reshaping. For example, we improve the optimality gap of POMO  from 52% to 29% and LEHD  from 3.2% to 3.0% on TSP1000, with negligible additional time overhead and no need for tuning neural models.

We summarize our contributions as follows. (1) We propose the concept of Language Hyper-Heuristics (LHHs), which bridges emerging attempts using LLMs for heuristic generation with a methodological group that enjoys decades of development. (2) We present Reflective Evolution (ReEvo), coupling evolutionary computation with humanoid reflections to elicit the power of LHHs. We introduce fitness landscape analysis and black-box prompting for reliable LHH evaluations, where ReEvo achieves SOTA sample efficiency. (3) We introduce novel applications of LHHs and present SOTA COP solvers with ReEvo, across five heterogeneous algorithmic types and six different COPs.

## 2 Related work

Traditional Hyper-Heuristics.Traditional HHs select the best performing heuristic from a predefined set  or generate new heuristics through the combination of simpler heuristic components . HHs offer a higher level of generality in solving various optimization problems , but are limited by the heuristic space predefined by human experts.

Neural Combinatorial Optimization.Recent advances of NCO show promise in learning end-to-end solutions for COPs . NCO can be regarded as a variant of HH, wherein neural architectures and solution pipelines define a heuristic space, and training algorithms search within it. A well-trained neural network (NN), under certain solution pipelines, represents a distinct heuristic. From this perspective, recent advancements in NCO HHs have led to better-aligned neural architectures  and advanced solution pipelines  to define effective heuristic spaces, and improved training algorithms to efficiently explore heuristic spaces , while targeting increasingly broader applications . In this work, we show that ReEvo-generated heuristics can outperform or enhance NCO methods.

LLMs for code generation and optimization.The rise of LLMs introduces new prospects for diverse fields . Among others, code generation capabilities of LLMs are utilized for code debugging , enhancing code performance , solving algorithmic competition challenges , robotics , and general task solving . Interleaving LLM generations with evaluations  yields powerful methods for prompt optimization , reinforcement learning (RL) reward design , algorithmic (self-)improvement , neural architecture search , and general solution optimization , with many under evolutionary frameworks . Most related to ReEvo, concurrent efforts by Liu et al.  and Romera-Paredes et al.  leverage LLMs to develop heuristics for COPs. We go beyond and propose generic LHH for COPs, along with better sample efficiency, broader applications, more reliable evaluations, and improved heuristics. In addition, ReEvo contributes to a smoother fitness landscape,showing the potential to enhance other tasks involving LLMs for optimization. We present further discussions in Appendix A.

Self-reflections of LLMs.Shinn et al.  propose to reinforce language agents via linguistic feedback, which is subsequently harnessed for various tasks [56; 84]. While Shinn et al.  leverage binary rewards indicating passing or failing test cases in programming, ReEvo extends the scope of verbal RL feedback to comparative analysis of two heuristics, analogous to verbal gradient information  within heuristic spaces. Also, ReEvo incorporates reflection within an evolutionary framework, presenting a novel and powerful integration.

## 3 Language Hyper-Heuristics for Combinatorial Optimization

HHs explore a search space of heuristic configurations to select or generate effective heuristics, indirectly optimizing the underlying COP. This dual-level framework is formally defined as follows.

**Definition 3.1** (Hyper-Heuristic).: For COP with solution space \(S\) and objective function \(f:S\), a Hyper-Heuristic (HH) searches for the optimal heuristic \(h^{*}\) in a heuristic space \(H\) such that a meta-objective function \(F:H\) is minimized, i.e., \(h^{*}=*{argmin}_{h H}F(h)\).

Depending on how the heuristic space \(H\) is defined, traditional HHs can be categorized into selection and generation HHs, both entailing manually defined heuristic primitives. Here, we introduce a novel variant of HHs, Language Hyper-Heuristics (LHH), wherein heuristics in \(H\) are generated by LLMs. LHHs dispense with the need for predefined \(H\), and instead leverage LLMs to explore an open-ended heuristic space. We recursively define LHHs as follows.

**Definition 3.2** (Language Hyper-Heuristic).: A Language Hyper-Heuristic (LHH) is an HH variant where heuristics in \(H\) are generated by LLMs.

In this work, we define the meta-objective function \(F\) as the expected performance of a heuristic \(h\) for certain COP. It is estimated by the average performance on a dataset of problem instances.

## 4 Language Hyper-Heuristic with ReEvo

LHH takes COP specifications as input and outputs the best inductive heuristic found for this COP. Vanilla LHH can be repeated LLM generations to randomly search the heuristic space, which is sample-inefficient and lacks reasoning capabilities for complex and black-box problems (see SS 6). Therefore, we propose Reflective Evolution (ReEvo) to interpret genetic cues of evolutionary search and unleash the power of LHHs.

ReEvo is schematically illustrated in Fig. 1. Under an evolutionary framework, LLMs assume two roles: a _generator LLM_ for generating individuals and a _reflector LLM_ for guiding the generation with reflections. ReEvo, as an LHH, features a distinct individual encoding, where each individual is the code snippet of a heuristic. Its evolution begins with population initialization, followed by five iterative steps: selection, short-term reflection, crossover, long-term reflection, and elitist mutation. We evaluate the meta-objective of all heuristics, both after crossover and mutation. Our prompts are gathered in Appendix B.

Individual encoding.ReEvo optimizes toward best-performing heuristics via an evolutionary process, specifically a Genetic Programming (GP). It diverges from traditional GPs in that (1) individuals are code snippets generated by LLMs, and (2) individuals are not constrained by any predefined encoding format, except for adhering to a specified function signature.

Population initialization.ReEvo initializes a heuristic population by prompting the generator LLM with a task specification. A task specification contains COP descriptions (if available), heuristic designation, and heuristic functionality. Optionally, including seed heuristics, either trivial or expertly crafted to improve upon, can provide in-context examples that encourage valid heuristic generation and bias the search toward more promising directions.

A ReEvo iteration contains the following five sequential steps.

**Selection.** ReEvo selects parent pairs from successfully executed heuristics at random, while avoiding pairing heuristics with an identical meta-objective value \(F\).

Short-term reflection.For each pair of heuristic parents, the reflector LLM reflects upon their relative performance and gives hints accordingly for improved design. Unlike prior work , ReEvo integrates the reflections into evolutionary search and reflects by performing comparative analyses. Our proposed approach is analogous to interpreting genetic cues and providing verbal gradients within search spaces, which leads to smoother fitness landscapes and better search results (see SS 6.1).

Crossover.ReEvo prompts the generator LLM to generate an offspring heuristic, given task specifications, a pair of parent heuristics, explicit indications of their relative performance, short-term reflections over the pair, and generation instructions.

Figure 1: An illustration of ReEvo.

Long-term reflection.ReEvo accumulates expertise in improving heuristics via long-term reflections. The reflector LLM, given previous long-term reflections and newly gained short-term ones, summarizes them and gives hints for improved heuristic design.

Elitist mutation.ReEvo employs an elitist mutation approach. Based on long-term reflections, the generator LLM samples multiple heuristics to improve the current best one. A mutation prompt consists of task specifications, the elite heuristic, long-term reflections, and generation instructions.

Viewing ReEvo from the perspective of an LLM agentic architecture , short-term reflections interpret the environmental feedback from each round of interaction. Long-term reflections distill accumulated experiences and knowledge, enabling them to be loaded into the inference context without causing memory blowups.

## 5 Heuristic generation with ReEvo

This section presents novel applications of LHH across heterogeneous algorithmic types and diverse COPs. With ReEvo, we yield state-of-the-art and competitive meta-heuristics, evolutionary algorithms, heuristics, and neural solvers.

Hyperparameters of ReEvo and detailed experimental setup are given in Appendix C. We apply ReEvo to different algorithmic types across six diverse COPs representative of different areas: Traveling Salesman Problem (TSP), Capacitated Vehicle Routing Problem (CVRP), and Orienteering Problem (OP) for routing problems; Multiple Knapsack Problem (MKP) for subset problems; Bin Packing Problem (BPP) for grouping problems; and Decap Placement Problem (DPP) for electronic design automation (EDA) problems. Details of the benchmark COPs are given in Appendix D. The best ReEvo-generated heuristics are collected in Appendix E.

### Penalty heuristics for Guided Local Search

We evolve penalty heuristics for Guided Local Search (GLS) . GLS interleaves local search with solution perturbation. The perturbation is guided by the penalty heuristics to maximize its utility. ReEvo searches for the penalty heuristic that leads to the best GLS performance.

We implement the best heuristic generated by ReEvo within KGLS  and refer to such coupling as KGLS-ReEvo. In Table 1, we compare KGLS-ReEvo with the original KGLS, other GLS variants , and SOTA NCO method that learns to improve a solution . The results show that ReEvo can improve KGLS and outperform SOTA baselines. In addition, we use a single heuristic for TSP20 to 200, while NCO baselines require training models specific to each problem size.

### Heuristic measures for Ant Colony Optimization

Solutions to COPs can be stochastically sampled, with heuristic measures indicating the promise of solution components and biasing the sampling. Ant Colony Optimization (ACO), which interleaves stochastic solution sampling with pheromone update, builds on this idea. We generate such heuristic measures for five different COPs: TSP, CVRP, OP, MKP, and BPP.

Under the ACO framework, we evaluate the best ReEvo-generated heuristics against the expert-designed ones and neural heuristics specifically learned for ACO . The evolution curves displayed

    &  &  &  &  &  \\  & & Opt. gap (\%) & Time (s) & Opt. gap (\%) & Time (s) & Opt. gap (\%) & Time (s) & Opt. gap (\%) & Time (s) \\  NeuOpt2*  & LS+RL & 0.000 & 0.124 & 0.000 & 1.32 & 0.027 & 2.67 & 0.403 & 4.81 \\ GNNGLS  & GLS+SL & 0.000 & 0.116 & 0.052 & 3.83 & 0.705 & 6.78 & 3.522 & 9.92 \\ NeuralGISJ  & GLS+SL & 0.000 & 10.005 & 0.003 & 10.01 & 0.470 & 10.02 & 3.622 & 10.12 \\ EoH  & GLS+LHH & 0.000 & 0.563 & 0.000 & 1.90 & 0.025 & 5.87 & 0.338 & 17.52 \\  KGLS-1  & GLS & 0.004 & 0.001 & 0.017 & 0.03 & 0.002 & 1.55 & 0.284 & 2.52 \\ KGLS-ReEvo & GLS+LHH & **0.000** & **0.001** & **0.000** & **0.03** & **0.000** & **1.55** & **0.216** & **2.52** \\   
*: All instances are solved in one batch. D2A=1; T=500, 4000, 5000, and 5000 for 4 problem sizes, respectively.
*: The results are drawn from the original literature. \(\): They are based on our own GLS implementation.

Table 1: Evaluation results of different local search (LS) variants. We report optimality gaps and per-instance execution time.

in Fig. 2 verify the consistent superiority of ReEvo across COPs and problem sizes. Notably, on 3 out of 5 COPs, ReEvo outperforms DeepACO  even when the latter overfits the test problem size (TSP50, OP50, and MKP100). We observe that most ReEvo-generated heuristics show consistent performance across problem sizes and distributions. Hence, their advantages grow as the distributional shift increases for neural heuristics.

### Genetic operators for Electronic Design Automation

Expert-designed GAs are widely adopted in EDA [69; 97; 11; 26]. Besides directly solving EDA problems, GA-generated solutions can be used to train amortized neural solvers . Here, we show that ReEvo can improve the expert-designed GAs and outperform DevFormer , the SOTA solver for the DPP problem. We sequentially evolve with ReEvo the crossover and mutation operators for the GA expert-designed by Park et al. . Fig. 3 compares online and offline learned methods, DevFormer, the original expert-designed GA, and the GA with ReEvo-generated operators, showing that the ReEvo-designed GA outperforms previous methods and, importantly, both the expert-designed GA and DevFormer.

### Constructive heuristics for the Traveling Salesman Problem

Heuristics can be used for deterministic solution construction by sequentially assigning values to each decision variable. We evaluate the constructive heuristic for TSP generated by ReEvo on real-world benchmark instances from TSPLIB  in Table 2. ReEvo can generate better heuristics than GHPP , a classic HH based on GP.

### Attention reshaping for Neural Combinatorial Optimization

Autoregressive NCO solvers suffer from limited scaling-up generalization , partially due to the dispersion of attention scores . Wang et al.  design a distance-aware heuristic to reshape

Figure 2: Comparative evaluations of ACO using expert-designed heuristics [71; 6; 72; 17; 39], neural heuristics , and ReEvo heuristics. For each COP, the same neural heuristic or the ReEvo heuristic is applied across all problem sizes; both heuristics are trained exclusively on the smallest problem size among the five. **Left**: Relative performance improvement of DeepACO and ReEvo over human baselines w.r.t. problem sizes. **Right**: ACO evolution curves, plotting the all-time best objective value w.r.t. the number of solution evaluations. The curves are averaged over three runs in which only small variances are observed (e.g., \( 0.01\) for TSP50).

the attention scores, which improves the generalization of NCO solvers without additional training. However, the expert-designed attention-reshaping can be suboptimal and does not generalize across neural models or problem distributions.

Here we show that ReEvo can automatically and efficiently tailor attention reshaping for specific neural models and problem distributions of interest. We apply attention reshaping designed by experts  and ReEvo to two distinct model architectures: POMO with heavy encoder and light decoder , and LEHD with light encoder and heavy decoder . On TSP and CVRP, Table 3 compares the original NCO solvers [37; 51], those with expert-designed attention reshaping , and those with ReEvo-designed attention reshaping. The results reveal that the ReEvo-generated heuristics can improve the original models and outperform their expert-designed counterparts. Note that implementing ReEvo-generated attention reshaping takes negligible additional time; e.g., solving a CVRP1000 with LEHD takes 50.0 seconds with reshaping, compared to 49.8 seconds without.

## 6 Evaluating ReEvo

### Fitness landscape analysis

The fitness landscape of a searching algorithm depicts the structure and characteristics of its search space \(F:H\). This understanding is essential for designing effective HHs. Here we introduce this technique to LHHs and evaluate the impact of reflections on the fitness landscape.

Traditionally, the neighborhood of a solution is defined as a set of solutions that can be reached after a single move of a certain heuristic. However, LHHs feature a probabilistic nature and open-ended search space, and we redefine its neighborhood as follows.

**Definition 6.1** (Neighborhood).: Let \(LLM\) denote an LHH move, \(x\) a specific prompt, and \(h_{c}\) the current heuristic. Given \(LLM\) and \(x\), the neighborhood of \(h_{c}\) is defined as a set \(\), where each

   Instance & Nearest Neighbour & GHPP  & ReEvo \\  ts225 & 16.8 & 7.7 & **6.6** \\ rat99 & 21.8 & 14.1 & **12.4** \\ rl1889 & 23.7 & 21.1 & **17.5** \\ u1817 & 22.2 & 21.2 & **16.6** \\ d1655 & 23.9 & 18.7 & **17.5** \\ bier127 & 23.3 & 15.6 & **10.8** \\ lin318 & 25.8 & **14.3** & 16.6 \\ eil51 & 32.0 & 10.2 & **6.5** \\ d493 & 24.0 & 15.6 & **13.4** \\ kroB100 & 26.3 & 14.1 & **12.2** \\ kroC100 & 25.8 & 16.2 & **15.9** \\    
   Instance & Nearest Neighbour & GHPP  & ReEvo \\  ch130 & 25.7 & 14.8 & **9.4** \\ pr299 & 31.4 & **18.2** & 20.6 \\ d417 & 32.4 & 22.7 & **19.2** \\ d657 & 29.7 & 16.3 & **16.0** \\ kroA150 & 26.1 & 15.6 & **11.6** \\ h1577 & 25.0 & 17.6 & **12.1** \\ u724 & 28.5 & **15.5** & 16.9 \\ pr264 & 17.9 & 24.0 & **16.8** \\ pr226 & 24.6 & **15.5** & 18.0 \\ pr439 & 27.4 & 21.4 & **19.3** \\  Avg. opt. gap & 25.4 & 16.7 & **14.6** \\   

Table 2: Comparisons of constructive heuristics designed by human, GHPP , and ReEvo. We report the average optimality gap of each instance, where the baseline results are drawn from  and the results of ReEvo are averaged over 3 runs with different starting nodes.

Figure 3: **Left**: Comparison of DevFormer , the expert-designed GA  and our ReEvo-designed GA on DPP. The evolution curves plot the best objective value over generations; the horizontal line indicates the reward of end-to-end solutions generated by DevFormer. **Right**: Evaluation results of DPP solvers. We report the number of solution generations and the average objective value of 100 test problems.

element \(h\) represents a heuristic that \(LLM\) can mutate \(h_{c}\) into, in response to \(x\):

\[(h_{c})=\{h LLM(h|h_{c},x)>\}. \]

Here, \(LLM(h|h_{c},x)\) denotes the probability of generating \(h\) after prompting with \(h_{c}\) and \(x\), and \(\) is a small threshold value. In practice, the neighborhood can be approximated by sampling from the distribution \(LLM(|h_{c},x)\) for a large number of times.

We extend the concept of autocorrelation to LHHs under our definition of neighborhood. Autocorrelation reflects the ruggedness of a landscape, indicating the difficulty of a COP [59; 22].

**Definition 6.2** (Autocorrelation).: Autocorrelation measures the correlation structure of a fitness landscape. It is derived from the autocorrelation function \(r\) of a time series of fitness values, which are generated by a random walk on the landscape via neighboring points:

\[r_{i}=^{T-i}(f_{t}-)(f_{t+i}-)}{_{t=1}^{T}(f _{t}-)^{2}}, \]

where \(\) is the mean fitness of the points visited, \(T\) is the size of the random walk, and \(i\) is the time lag between points in the walk.

Based on the autocorrelation function, correlation length is defined below .

**Definition 6.3** (Correlation Length).: Given an autocorrelation function \(r\), the correlation length \(l\) is formulated as \(l=-1/(|r_{1}|)\) for \(r_{1} 0\). It reflects the ruggedness of a landscape, and smaller values indicate a more rugged landscape.

To perform autocorrelation analysis for ReEvo, we conduct random walks based on the neighborhood established with our crossover prompt either with or without short-term reflections. In practice, we set the population size to 1 and skip invalid heuristics; the selection always picks the current and last heuristics for short-term reflection and crossover, and we do not implement mutation.

Table 4 presents the correlation length and the average objective value of the random walks, where we generate ACO heuristics for TSP50. The correlation length is averaged over 3 runs each with 40 random walk steps, while the objective value is averaged over all \(3 40\) heuristics. The results verify that implementing reflection leads to a less rugged landscape and better search results. As discussed in SS 4, reflections can function as verbal gradients that lead to better neighborhood structures.

### Ablation studies

In this section, we investigate the effects of the proposed components of ReEvo with both white and _black-box_ prompting.

    & & Correlation length \(\) & Objective \(\) \\  w/o reflection & 0.28 \(\) 0.07 & 12.08 \(\) 7.15 \\ w/reflection & **1.28**\(\) 0.62 & **6.53**\(\) 0.60 \\   

Table 4: Autocorrelation analysis of ReEvo.

    &  &  &  &  \\  & & Obj. & Opt. gap (\%) & Obj. & Opt. gap (\%) & Obj. & Opt. gap (\%) \\    \(}\) \\ \(}\) \\ \(}\) \\  } & POMO  & 11.16 & 4.40 & 22.21 & 34.43 & 35.19 & 52.11 \\  & POMO + DAR  & **11.12** & **3.98** & 21.63 & 30.95 & 33.32 & 44.05 \\  & POMO + ReEvo  & 11.12 & 4.02 & **20.54** & **24.32** & **29.86** & **29.08** \\   & LEHD  & 10.79 & 0.87 & 16.78 & 1.55 & 23.87 & 3.17 \\  & LEHD + DAR  & 10.79 & 0.89 & 16.79 & 1.62 & 23.87 & 3.19 \\  & LEHD + ReEvo & **10.77** & **0.74** & **16.78** & **1.55** & **23.82** & **2.97** \\    \(}\) \\ \(}\) \\ \(}\) \\  } & POMO  & 22.39 & 10.93 & 50.12 & 33.76 & 145.40 & 289.48 \\  & POMO + DAR  & 22.36 & 10.78 & 50.23 & 34.05 & 144.24 & 286.37 \\  & POMO + ReEvo & **22.30** & **10.48** & **47.10** & **25.70** & **118.80** & **218.22** \\    & LEHD  & 20.92 & 3.68 & 38.61 & 3.03 & 39.12 & 4.79 \\  & LEHD + DAR  & 21.13 & 4.67 & 39.16 & 4.49 & 39.70 & 6.35 \\  & LEHD + ReEvo & **20.85** & **3.30** & **38.57** & **2.94** & **39.11** & **4.76** \\   

Table 3: Evaluation results for NCO solvers with and without different attention-reshaping heuristics.

Black-box prompting. We do not reveal any information related to the COPs and prompt LHHs in general forms (e.g., edge_attr in place of distance_matrix). Black-box settings allow reliable evaluations of LHHs in designing effective heuristics for novel and complex problems, rather than merely retrieving code tailored for prominent COPs from their parameterized knowledge.

We evaluate sampling LLM generations without evolution (LLM) and ReEvo without long-term reflections, short-term reflections, crossover, or mutation on generating ACO heuristics for TSP100. Table 5 shows that ReEvo enhances sample efficiency, and all its components positively contribute to its performance, both in white-box and black-box prompting.

### Comparative evaluations

This section compares ReEvo with EoH , a recent SOTA LHH that is more sample-efficient than FunSearch . We adhere to the original code and (hyper)parameters of EoH. Our experiments apply both LHHs to generate ACO heuristics for TSP, CVRP, OP, MKP, and BPP, using black-box prompting and three LLMs: GPT-3.5 Turbo, GPT-4 Turbo, and Llama 3 (70B).

Fig. 4 compares EoH and ReEvo, and shows that ReEvo demonstrates superior sample efficiency. Besides the better neighborhood structure (SS 6.1), reflections facilitate explicit verbal inference of underlying black-box COP structures; we depict an example in Fig. 1 (b). The enhanced sample efficiency and inference capabilities of ReEvo are particularly useful for complex real-world problems, where the objective function is usually black-box and expensive to evaluate.

## 7 Discussions and limitations

When to use ReEvo as an LHH.Our experiments limit the number of heuristic evaluations to 100 shots and the results do not necessarily scale up. ReEvo is designed for scenarios where sample efficiency is crucial, such as real-world applications where heuristic evaluation can be costly. Allowing a large number of heuristic evaluations could obscure the impact of reflection or other prompting techniques, as reported by Zhang et al. .

When to use ReEvo as an (alternative to) NCO/ML4CO method.LHH can be categorized as an NCO/ML4CO method. However, to facilitate our discussion, we differentiate LHHs from

Figure 4: Comparisons between EoH  and ReEvo on five COPs with black-box prompting and using different LLMs. We perform three runs for each setting.

   Method & White-box \(\) & Black-box \(\) \\  LLM & 8.64 \(\) 0.13 & 9.74 \(\) 0.54 \\ w/o long-term reflections & 8.61 \(\) 0.21 & 9.32 \(\) 0.71 \\ w/o short-term reflections & 8.46 \(\) 0.01 & 9.05 \(\) 0.03 \\ w/o crossover & 8.45 \(\) 0.02 & 9.47 \(\) 1.40 \\ w/o mutation & 8.83 \(\) 0.09 & 9.34 \(\) 0.96 \\  ReEvo & **8.40**\(\) 0.02 & **8.96**\(\) 0.82 \\   

Table 5: Ablation study of ReEvo components with both white and black-box prompting.

"traditional" NCO methods that usually train NN-parameterized heuristics via parameter adjustment. In SS 5, we demonstrate that ReEvo can either outperform or enhance NCO methods. Below, we explore the complementary nature of LHH and NCO methods.

* **Rule-based v.s. NN-parameterized policies.** LHHs generate interpretable and rule-based heuristics (code snippets), while NCO generates black-box NN-parameterized policies. Interpretable heuristics offer insights for human designers and can be more reliable in practice when faced with dynamic environments, limited data, distributional shifts, or adversarial attacks. However, they may not be as expressive as neural networks and may underfit in complex environments.
* **Evolution and training.** LHHs require only less than 100 heuristic evaluations and about 5 minutes to evolve a strong heuristic, while many NCO methods usually require millions of samples and days of training. LHHs are more practical when solution evaluation is expensive.
* **Inference.** LHHs generate heuristics that are less demanding in terms of computational resources, as they do not require GPU during deployment. NCO methods require GPU for training and deployment, but they can also leverage the parallelism of GPU to potentially speed up inference.
* **Engineering efforts and inductive biases.** LHHs only need some text-based (and even black-box) explanations to guide the search. NCO requires the development of NN architectures, hyperparameters, and training strategies, where informed inductive biases and manual tuning are crucial to guarantee performance.

The choice of LLMs for ReEvo.Reflection is more effective when using capable LLMs, such as GPT-3.5 Turbo and its successors, as discussed by Shinn et al. . Currently, many open-source LLMs are not capable enough to guarantee statistically significant improvement of reflections . However, as LLM capabilities improve, we only expect this paradigm to get better over time . One can refer to  for extended evaluations based on more LLMs and problem settings.

Benchmarking LHHs based on heuristic evaluations.We argue that benchmarking LHHs should prioritize the number of heuristic evaluations rather than LLM query budgets  due to the following reasons.

* Prioritizing scenarios where heuristic evaluations are costly leads to meaningful comparisons between LHHs. The performance of different LHH methods becomes nearly indistinguishable when a large number of heuristic evaluations are allowed .
* The overhead of LLM queries is negligible compared to real-world heuristic evaluations. LLM inference--whether via local models or commercial APIs--is highly cost-effective nowadays, with expenses averaging around $0.0003 per call in ReEvo using GPT-3.5-turbo, and response times of under one second on average for asynchronous API calls or batched inference. These costs are negligible compared to real-world heuristic evaluations, which, taking the toy EDA problem in this paper as an example, exceeds 20 minutes per evaluation.
* Benchmarking LHHs based on LLM inference costs presents additional challenges. Costs and processing time are driven by token usage rather than the number of queries, complicating the benchmarking process. For instance, EoH  requires heuristic descriptions before code generation, resulting in higher token usage. In contrast, although ReEvo involves more queries for reflections, it is more token-efficient when generating heuristics.

## 8 Conclusion

This paper presents Language Hyper-Heuristics (LHHs), a rising variant of HHs, alongside Reflective Evolution (ReEvo), an evolutionary framework to elicit the power of LHHs. Applying ReEvo across five heterogeneous algorithmic types, six different COPs, and both white-box and black-box views of COPs, we yield state-of-the-art and competitive meta-heuristics, evolutionary algorithms, heuristics, and neural solvers. Comparing against SOTA LHH , ReEvo demonstrates superior sample efficiency. The development of LHHs is still at its emerging stage. It is promising to explore their broader applications, better dual-level optimization architectures, and theoretical foundations. We also expect ReEvo to enrich the landscape of evolutionary computation, by showing that genetic cues can be interpreted and verbalized using LLMs.