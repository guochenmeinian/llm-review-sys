# Generalized Fast Exact Conformalization

Diyang Li

Cornell University

diyang01@cs.cornell.edu

###### Abstract

Conformal prediction converts nearly any point estimator into a prediction interval under standard assumptions while ensuring valid coverage. However, the extensive computational demands of full conformal prediction are daunting in practice, as it necessitates a comprehensive number of trainings across the entire latent label space. Unfortunately, existing efforts to expedite conformalization often carry strong assumptions and are developed specifically for certain models, or they only offer approximate solution sets. To address this gap, we develop a method for fast exact conformalization of generalized statistical estimation. Our analysis reveals that the structure of the solution path is inherently piecewise smooth, and indicates that utilizing second-order information of difference equations suffices to approximate the entire solution spectrum arbitrarily. We provide a unified view that not only encompasses existing work but also attempts to offer geometric insights. Practically, our framework integrates seamlessly with well-studied numerical solvers. The significant speedups of our algorithm as compared to the existing standard methods are demonstrated across numerous benchmarks.

## 1 Introduction

In modern algorithmic practice, quantifying uncertainty is crucial for accurate and reliable model predictions. Conformal prediction  serves as a powerful statistical tool that leverages the observed data to construct prediction intervals containing the outcome with a predefined probability level. It enjoys model-free coverage guarantee regardless of the underlying distribution of the data. In recent years, conformal prediction has gained increasing attention from the community of machine learning [2; 3; 4; 5], data mining [6; 7; 8] and computer vision [9; 10]. This growing interest is attributed to the attractive properties that it operates under the assumption of exchangeability, which is a weaker condition than independence and identical distribution, allowing for a wider range of applications in real-world scenarios where data may not meet strict statistical assumptions. Meanwhile, conformal prediction can be combined with almost any existing point estimators, even when the model is potentially misspecified .

While exhibits appealing properties, the application of conformal prediction often comes at a high computational cost [11; 12]. Kindly note that in this paper we refer to the full conformal prediction that does _not_ discard training points as opposed to the split conformal prediction, as the latter involves only one single fitting. From a numerical perspective, when constructing a conformal prediction set, one needs to exhaustively search all points (potential candidates) in the label space, where for each point the learning model needs to be refitted and the conformity score needs to be re-calculated. In many scenarios like regression, the number of possible candidates is infinite as the latent label can take an uncountable number of possible values. Conventional conformal prediction works by a grid-search type method to loop over the label space [13; 14], which discretize the interval of interest and subsequently solve a sequence of individual optimization subproblems. To improve such brute-force approach, there have been many efforts in community that devoted to develop better algorithms for computing the prediction set. A natural idea is to generate the set of all solutionsindexed by the latent label candidate using numerical continuation (_a.k.a._ homotopy) method, and we name this set of optimal solutions as (exact) _solution path_, as illustrated in Figure 1.

Despite extensive theoretical and empirical efforts, the understanding of conformalization path remains rather deficient. For some simple cases, closed-form characterizations of conformal prediction sets are available, such as \(k\)-nearest neighbors, least squares regression , and ridge regression  with quadratic loss. The study by  presents an exact solution path for conformalized Lasso and elastic net using their statistical property and \(_{1}\)-sparsity analysis. Investigations into more general objectives as discussed in [17; 18] incorporate linear interpolation to approximate the intrinsic piecewise smooth structure, yielding prediction sets lacking of finite-sample calibration. In other terms, [17; 18] offer only an upper bound for the approximation error and fail to control the degree of approximation relative to the optimal solutions. We summarize these relevant prior studies in Table 1. Given that existing exact algorithms are either tailored to a select few models, or turn out to be grid-search type approaches that take a very black-box approach, it prompts the following question:

\[}\\ }}\]

We answer this question positively by introducing a differential equation perspective to analyze the ground truth solution path, which enables us to better reveal and exploit the fundamental path structure. This more profound understanding enables us to build more generalized conformalization algorithm and present improved computational guarantees.

### Our contributions

The main contributions brought by this paper are summarized as follows.

Generalizable frameworkThis study aims to extend the application of fast exact conformalization into generalized statistical estimation. We relax the assumptions by considering a cost function that is no longer globally differentiable, but rather _piecewise differentiable_, while introducing constraints on the weight vector to fit more statistical models. In our analysis, the Clarke subdifferential of the objective is derived, and the set of nonsmooth points of path can essentially be described as a level set of certain smooth functions. By adopting a reparameterization regime, our framework effectively broadens the scope of several existing algorithms in Table 1 and provides a unified view of them.

Theoretical insightsWe analyze the underlying structure of path through the first-order optimality conditions of the regularized problem, identifying sufficient conditions for a local path to be smooth around a given point and reveal that the structure of the path is inherently piecewise smooth. More precisely, if conditions are met, then the path is locally the projection of a higher-dimensional smooth manifold onto the optimization space, thus offering preliminary geometric intuitions. Our

  
**Model** & **Reference** & **Exact** & **Loss** & **Regularizer** & **Constrained** & **Path Structure** \\  Least Squares &  & \(\) & Quadratic & \(\) & \(}\) & Piecewise Linear \\ Ridge Regression &  & \(\) & Quadratic & \(\|\|_{1}^{2}\) & \(}\) & Piecewise Linear \\ Empirical Risk Minimization &  & \(}\) & Convex & Convex & \(}\) & Piecewise Smooth \\ Elastic Net &  & \(\) & Quadratic & \(\|\|_{1}\) & \(}\) & Piecewise Linear \\ Generalized Lasso Regression &  & \(}\) & Convex & \(\|\|_{1}\) & \(}\) & Piecewise Linear \\ General Formulation (**ours**) & Section 4 & \(\) & \(PC^{r}\) & \(PC^{r}\) & \(\) & Piecewise Smooth \\   

Table 1: Representative related work, which are instances of _generalized parametric estimations_.

Figure 1: Diagram of setting on fast exact conformalization, where label candidate \(y_{n+1}\) should loop over the whole latent label space \(\) and each possible \(y_{n+1}^{1}\) corresponds to one point on the (red) solution path. Conventional practice is to refit the model on each new \(y_{n+1}\) while we employ the path-following algorithm to obtain the whole solution spectrum within \(1\) execution.

investigation further suggests that leveraging the second-order information of difference equations can approximate the solution spectrum arbitrarily.

Practical efficiencyPractically, our framework is not only straightforward to implement but also computationally efficient. With theoretical analysis, we present explicit expressions for the gradient flows of objective, which is homogenized and well aligned with standard forms used by mainstream numerical libraries for ordinary differential equations (ODE), thereby easing the programming efforts. When crossing potential kinks (or nonsmooth points), the computations are facilitated by boundary conditions pre-set in the numerical solver. Notably, our algorithm eliminates the need for extensive iterations for computing the entire solution spectrum, contrasting sharply with conventional baselines. In experiments, we demonstrate the significant computational speed advantages of our algorithm over existing baselines, without compromising on accuracy.

## 2 Background

NotationFor a set \(^{p}\), we denote by \(()\) the closure and by \(()\) the interior of \(\) w.r.t. the natural topology on \(^{p}\). Define \((i)\) the \(i\)-th element of \(\) and \(()\) be the convex hull of \(\), or \(()=\{v:v=_{i=1}^{k}_{i}u_{i},u_{i} ,_{i}^{>0},_{i=1}^{k}_{i}=1\}\). The \(_{(i)}\) is the \(i\)-th element of vector \(\) and \(()\) is an indicator function. Let \((t)\) be the derivative \(\) of function \(z(t)\). Let \(\) be the zero matrix and \(\{\}\) be the event probability. The \(()\) is the sign function \((x)=(x 0)\) or \(0\) (\(x=0\)) that applied entrywise.

### Model and assumptions

Given the dataset \(\{_{i},y_{i}\}_{i=1}^{n}\), where \(_{i}^{p}\) is the sample (covariate) and \(y_{i}\) is the \(i\)-th label (response) live in label space \(^{1}\). We consider the generalized parametric estimation problem

\[^{*}_{}& _{i=1}^{n}L_{i}(y_{i},_{}(_{i}) )\,+\,_{j=1}^{m}_{j}_{j}()\\ s.t.& g_{i}()=0,& 1 i  r,\\ & h_{j}() 0,& 1 j s, \] (1)

where \(_{}\) is the model prediction function, \(L_{i}\) is the loss and \(_{j}\) is the regularizer. The \(g_{i}\), \(h_{j}\) are constraints on \(\), and parameter \(_{j}^{>0}\) controls the degree of regularity. In the following, we will define the piecewise differentiability and state main assumptions that used throughout this work.

**Definition 1** (\(PC^{r}\) Function).: _Let \(f:U\) be continuous on the open set \(U^{p}\) and \(f_{i}:U\), \(i\{1,,k\}\) be a set of \(r\)-times continuously differentiable (or \(C^{r}\)) functions for \(r\{\}\). If \(f(x)\{f_{i}(x)\}_{i\{1,,k\}}\) holds for all \(x U\), then \(f\) is an \(r\)-times piecewise continuously differentiable (or \(PC^{r}\)) function. The \(\{f_{1},,f_{k}\}\) is a set of selection functions of \(f\)._

When working with \(PC^{r}\)-functions in a local sense, it is useful to only consider the selection functions that have an impact on the local behavior around a given point.

**Definition 2** (Essentially Active Set).: _Let \(f:U\) be a \(PC^{r}\) function on the open set \(U^{p}\) with a set of selection functions \(\{f_{1},,f_{k}\}\). Denote \(I_{K}=\{1,,k\}\). Then given a \(x_{1} U\), \(I_{f}^{a}(x_{1})\{i I_{K}:f(x_{1})=f_{i}(x_{1})\}\) is called the active set at \(x_{1}\), and the \(I_{f}^{e}(x_{1})\{i I_{K}:x_{1}(\, (\,\{x_{2} U:\,f(x_{2})=f_{i}(x_{2})\}))\}\) is the essentially active set at \(x_{1}\)._

**Assumption 1**.: _We assume that \(L_{i}\) and \(_{j}\) in (1) are \(PC^{r}\) functions each with a set of selection functions \(_{k I_{L_{i}}^{e}}\{D_{L_{i}}^{k}\}\) and \(_{k I_{_{j}}^{e}}\{D_{_{j}}^{k}\}\), respectively._

**Assumption 2**.: _We assume that \(_{j}\) and \(L_{i}\) are non-differentiable at \(\) with multiple active selection functions, where \(j\{1,,m\},\ i\{1,,n+1\}\). We further assume that \(I_{_{j}}^{a}() I_{_{j}}^{e}(),I_{L_{i}}^ {a}() I_{L_{i}}^{e}()\) holds for all \(\) considered and all \(_{j},L_{i}\) in the following._

Assumption 2 ensures that all selection functions we consider are actually relevant for the representation of \(_{j},L_{i}\). _i.e._, it does not matter if we consider the active or the essentially active set in the underlying optimizing space, which allows for an easier representation of \(D_{_{j}}^{k}\) and \(D_{L_{i}}^{k}\).

### Conformal prediction

**Definition 3** (Symmetrical Algorithm).: _A deterministic algorithm \(A:(x_{1},,x_{n}) A^{}\) is symmetric if for any permutation \(\) of \(\{1,,n\}\), \(A(x_{1},,x_{n})}{{=}}A(x_{(1)},,x_{ (n)})\)._

**Definition 4** (Conformity Score).: _The conformity score function \(\), symmetric in its first \(n\) inputs, is defined as \((}_{1},,}_{n};} _{n+1})^{(p+1)(n+1)}\), where \(}_{i}(_{i},y_{i})\)._

Conformal prediction starts from a conventional model fitting stage, followed by the evaluation of conformity score and the construction of prediction set. The score function \(\) serves as a measure of deviation or conformity, assessing the extent to which the new input \(_{n+1}\) aligns with the previously fitted model. A higher conformity score indicates a better match between \(_{n+1}\) and the model [1; 14]. For a new instance \(_{n+1}\) where the prediction region is desired, the conformalization method operates by assigning a \(p\)-value to each latent \(y_{n+1}\), formalized as

\[_{y_{n+1}}=1-_{i=1}^{n+1}(_ {i}_{n+1}),\] (2)

where \(_{i}(}_{1},..,} _{i-1},}_{i+1},..,}_{n+1};}_{i})\). Specifically, in density estimation, \(\) is defined as \(_{^{}}(_{n+1})\), where \(_{^{}}\) is the density function estimated from the augmented dataset. For regression tasks, \(\) might be set as \(-|y_{n+1}-_{^{}}(_{n+1})|\), with \(_{^{}}\) being the regression function trained by the dataset including \(n+1\) samples. Under the assumption of exchangeability among the pairs \(\{_{i},y_{i}\}_{i=1}^{n+1}\), the \(_{y_{n+1}}\) returned by (2) has been demonstrated to be statistically valid [13; 14]. To generate the prediction set \(()\), one thresholds these \(p\)-values at a prescribed error level \((0,1)\), resulting in

\[(_{n+1})=\{y_{n+1}:_{y_{n+1}}\}.\] (3)

**Theorem 1**.: _[_19_]_ _Suppose that \(\{_{i},y_{i}\}_{i=1}^{n+1}\) are exchangeable and the fitting algorithm \(A\) is symmetric. Conformal prediction applied on \(\{_{i},y_{i}\}_{i=1}^{n}\{_{n+1}\}\) outputs a set \(()\) such that_

\[\{y_{n+1}^{}(_{n+1})\} 1- ,\] (4)

_where \(y_{n+1}^{}\) is the ground truth \((n+1)\)-th label._

Theorem 1 (_a.k.a._ coverage guarantee) requires only exchangeability of input data and symmetry of the conformity score function, which are met by nearly all prevalent model fitting algorithms. In alignment with the analysis taken in prior research, we treat \(y_{n+1}:=y_{n+1}(z)\) as a function of scalar variable \(z\). We utilize it to facilitate the traversal of \(y_{n+1}\) across the entire label space \(\), and compute the homotopy solution path \(\{^{}(z):z_{} z z_{}\}\) (also shown in Figure 1). We assume that \(y_{n+1}()[z_{},z_{}]\) is continuously differentiable in terms of \(z\) for simplicity.

## 3 Main results

We present our main results for fast exact conformalization. The discussions here focus on positive \(z\),1 but the derivation extends easily to include negative values as well, which will be discussed later.

### Surrogate function

**Lemma 1**.: _Let \(f U\) be a \(PC^{r}\)-function on the open set \(U^{p}\) and let \(C^{r}\)-functions \(\{f_{1},,f_{k}\}\) be a set of selection functions of \(f\). Then for any \(x U\), there exists an open neighborhood \(U^{} U\) of \(x\) on which \(f\) is also a continuous selection of \(\{f_{i} i I_{f}^{c}(x)\}\)._

Drawing insights from Lemma 1, we minimize the surrogate function of (1) as

\[_{^{p}}_{z}():= _{i=1}^{n+1}L_{i}(y_{i},_{}(_{i}))+_{j= 1}^{m}_{j}_{j}()+_{i=1}^{r}|g_{i}()|+_{j=1}^{s}\{0,h_{j}()\},\] (5)where \(^{>0}\) and \(y_{n+1}=y_{n+1}(z)\). This definition of \(_{z}()\) is meaningful regardless of whether the contributing functions are convex. Denote model estimation terms \(_{i}L_{i}+_{j}_{j}_{j}\) as \(_{M}(|z)\), and the minimizer of (5) as \(^{}(z)\). It is interesting to compare \(_{z}()\) to the Lagrangian function

\[_{z}():=_{M}(|z)+_{i=1 }^{r}_{i}g_{i}()+_{j=1}^{s}_{j}h_{j}( ),\] (6)

which captures the behavior of \(_{M}()\) near the optimum. At a constrained minimum \(^{}\), the Lagrangian satisfies the stationarity condition \((^{})=\); its inequality multipliers \(_{j}\) are nonnegative and satisfy the complementary slackness \(_{j}h_{j}(^{})=0\). In the penalized (5), one usually takes

\[>\{\|_{1}\|,,\|_{ }\|\!,_{1},,_{s}\},\] (7)

which creates the favorable circumstances: (i) \(_{z}()_{z}()\) for all \(\), (ii) \(_{z}()_{M}(|z)=_{z}( )\) for all feasible \(\), (iii) \(_{z}(^{})=_{M}(^{}|z)= _{z}(^{})\) with profound consequences.

**Theorem 2**.: _Our surrogate function \(_{z}()\) is increasing in \(\). Furthermore, \(_{z}()\) is strictly convex for one \(>0\) if and only if it is strictly convex for all \(>0\). Likewise, it is coercive for one \(>0\) if and only if it is coercive for all \(>0\). Finally, if \(_{M}()\) is strictly convex (or coercive), then \(_{z}()\) for all \(\) are strictly convex (or coercive)._

Given Theorem 2, several classical results  state that minimizing \(_{z}()\) is effective in minimizing \(_{M}()\) subject to the constraints if we choose \(\) by (7).

### Conformal path characterization

**Definition 5** (Clarke Subdifferential).: _For continuous function \(f:U\) on the open set \(U^{p}\), let \( U\) be the set of points in which \(f\) is not differentiable. The Clarke subdifferential of \(f\) at \(x U\) is defined as_

\[ f(x)(\{^{p}:\{x_{i}\}_ {i=1}^{}^{p}_{i}x_{i}=x,_{i } f(x_{i})=\}).\]

Specifically, if \(f\) is continuously differentiable in \(x\), \( f(x)=\{ f(x)\}\). While \(PC^{r}\)-functions are generally non-smooth, we can use the Clarke subdifferential to obtain first-order optimality of (5),

\[_{i=1}^{n}_{k I_{L_{i}}^{a}(^{})}_{L_{i }}^{k}(^{}) D_{L_{i}}^{k}(y_{i},_{^{}} (_{i}))+\!\!_{k I_{L_{n+1}}^{a}(^{})}\!\!\!\! _{L_{n+1}}^{k}(^{}) D_{L_{n+1}}^{k}(y_{n+1}( z),_{^{}}(_{n+1}))\!\!^{}( ^{}),\]

\[_{i=1}^{r}_{g_{i}} g_{i}(^{})\!+\! _{j=1}^{s}_{h_{j}} h_{j}(^{})\!+\!_ {j=1}^{m}_{k I_{_{j}}^{a}(^{})}\!_{j}_{_{j}}^{k}(^{}) D_{_{j}}^{k}( ^{})\!+\!^{}(^{})= ,\] (8)

where \(_{_{j}}^{k}\), \(_{L_{i}}^{k}\) is the \(k\)-th auxiliary parameter for convex hull of each \(_{j}\), \(L_{i}\). The (8) is accompanied by the active sets conditions and the subdifferentials conditions, rewritten in detail as

\[ D_{L_{i}}^{k}(^{})-D_{L_{i}}^{l_{i}} (^{})&=0,\; k I_{L_{i}}^{a}(^{ })\{l_{i}\},\; i_{L_{i}}^{e}\\ D_{_{j}}^{k}(^{})-D_{_{j}}^{r_{j}}( ^{})&=0,\; k I_{_{j}}^{a}( ^{})\{r_{j}\},\; j_{_{j}}^{e} \\ _{k I_{L_{i}}^{a}(^{})}\!\!\!\!_{L_ {i}}^{k}(^{})-\!1&=0,\;_{L_{i}}^{k}( ^{}) 0,1 i n+1\\ _{k I_{_{j}}^{a}(^{})}\!\!\!_{_{j}}^{k}(^{})-\!1&=0,\;_{ _{j}}^{k}(^{}) 0,\;1 j m\] (9)

where \(r_{j},l_{i}\) is randomly selected from \(I_{_{j}}^{a},I_{L_{i}}^{a}\) and being fixed, with coefficients satisfying \(_{g_{i}}\{-1\}&g_{i}()<0\\ ()=0$ },_{h_{j}}\{0\}&h_{j}()<0\\ ()=0$}.\)constraint functions \(g_{i}\) (\(1 i r\)) and \(h_{j}\) (\(1 j s\)) are _affine_, _i.e._, the gradients \( g_{i}(), h_{j}()\) are constant.2 We define \(g_{i}\) and \(h_{j}\) as constraint residuals \(g_{i}():=_{i}^{}-d_{i}\), \(h_{j}():=_{j}^{}-e_{j}\).

We keep track of the following index sets determined by signs of constraint residuals:

\[_{} =\{i\,:\,g_{i}()=_{i}^{}-d_{i}<0\},_{}=\{i\,:\,g_{i}()=_{i}^{} -d_{i}=0\},_{}=\{i\,:\,g_{i}()=_{i}^{}-d_{i}>0\},\] (10) \[_{} =\{j\,:\,h_{j}()=_{j}^{}-e_{j}<0\},_{}=\{j\,:\,h_{j}()=_{j}^{}-e_{j}=0\},_{}=\{j\,:\,h_{j}( )=_{j}^{}-e_{j}>0\}.\]

To characterize the path, we further introduce a _reparameterization_ in terms of an auxiliary variable \(t 0\) (thought of as _time_), whereby for a given \(>0\) we introduce functions \(z():[0,][z_{},z_{}]\) and \(():[z_{},z_{}]\) such that: \(()\) is Lipschitz, \(z()\) is differentiable on \((0,)\), and we have \(=(z(t))\) for all \(t(0,)\). In a slight abuse of notation, we define the path w.r.t. \(t\) as \(\{^{}(t)^{}(z(t)):t[0, ]\}\). To enhance structural clarity, we denote \(n_{}=|_{}_{}|\) and represent the certain matrix inversion as

\[[}(^{}|z)&_{ }^{}\\ _{}&_{n_{} n_{}} ]^{-1}=[(^{ }|z)&(^{}|z)\\ ^{}(^{}|z)&],\] (11)

where the rows of matrix \(_{}\) are the constant differentials, \(_{i}^{}\) for \(i_{}\) and \(_{j}^{}\) for \(j_{}\), and

\[}(^{}|z) _{i=1}^{n}_{k I_{L_{i}}^{}(^{})} _{L_{i}}^{k}(^{})^{2}D_{L_{i}}^{k}(y_{i}, _{^{}}(_{i}))+_{j=1}^{m}_{k I_{_{j} }^{}(^{})}_{j}_{_{j}}^{k}( ^{})^{2}D_{_{j}}^{k}(^{})\] (12) \[+_{k I_{L_{n+1}}^{}(^{})}_{L_{n+1}}^{k}(^{})^{2}D_{L_{n+1}}^{k}(y_{n+1}(z) \,,_{^{}}(_{n+1}))\,.\]

Now we are fully equipped to unveil the structure of homotopy path, as shown in next subsection.

### Piecewise smooth structure & Unified view

To describe the structure, we define the kink (non-smooth point) as the point that \(_{_{j}}^{k}\), \(_{L_{i}}^{k}\) hit the restriction bound in (9), or set in (10) is violated so the entire structure changes.

**Theorem 3**.: _Given an optimum \((_{0}^{},z_{0})\) at \(t_{0}\), and assume that \(t_{0}\) is not a kink, then there exists an open neighborhood of \(t_{0}\) such that \(^{}(t)\) is a \(C^{1}\) function of \(t\) and satisfies the following autonomous system_

\[}^{}(t)(^{},z)=-_{k  I_{L_{n+1}}^{}(^{})}_{L_{n+1}}^{k}( ^{})\,(z)(^{}|z)[_ {z} D_{L_{n+1}}^{k}(y_{n+1}(z)\,,_{^{}}(_{n +1}))],\] (13)

_where \((^{}|z)\) is obtained from the definition in (11), and the \(_{L_{i}}\), \(_{_{j}}\) can be solved from (8)._

The (13) offers an explicit gradient flow of the solution path in underlying optimization space. Solving this ODE numerically would recover all the optimal parametric solutions, which provide the conformity scores and one can obtain the required \(p\)-values (2) that used for exact conformal prediction via (3).

**Theorem 4**.: _The optimality solution \((^{}(t),z(t))\) has a unique trajectory for \(t(0,)\). The \(^{}(t)\) is continuous if selections \(D_{L_{i}}^{k}()\), \(D_{_{j}}^{k}()\) are convex. Furthermore, if gradients of constraints \(\{ g_{i}(): g_{i}()=\}\{ h _{j}(): h_{j}()=\}\) are affinely independent at the solution \(^{}(z)\) over an open neighborhood of \(z\), then the coefficient paths \(_{g_{i}}\), \(_{h_{j}}\) are unique and continuous at \(z\)._

**Theorem 5**.: _On a optimality path with set configuration (10), the coefficients for constraints satisfies_

\[_{}[_{ _{}}(^{})\\ _{_{}}(^{})]=- (^{})[^{}(^ {})+_{}^{}],\] (14)_where \((^{})\) is from (11), and_

\[_{}^{}:=-_{i_{}}_{i} +_{i_{}}_{i}+_{j_{j}} _{j}.\]

Although Theorem 3, 4, and 5 are highly technical and may difficult to grasp on first glance, they lay the groundwork for practical application, as illustrated later in Section 4. Specifically, Theorem 4 ensures continuity, which is fundamental for the numerical ODE solvers. Theorem 5, on the other hand, provides a rule for handling constraints.

**Theorem 6**.: _Suppose that \(D^{k}_{L_{i}}()\) is \(\)-strongly convex for \( 0\), \(D^{k}_{_{j}}()\) is \(\)-strongly convex for \(>0\), and \((^{}|z)\), \(_{z}D^{k}_{L_{n+1}}()\), \(_{z} D^{k}_{L_{n+1}}()\) are all locally \(\)-Lipschitz continuous. Suppose further that \(()\) is Lipschitz continuous on \([z_{},z_{}]\) and satisfies \(|(z)|\) for all \(z[z_{},z_{}]\). Then, it holds that \((,)\) defined in (13) is uniformly \(_{}\)-Lipschitz continuous with \(_{}=^{2}+}{(n+1)+_{j=1}^ {m}_{j}}\) for any \(z[z_{},z_{}]\) when the active selections \(I_{L}\), \(I_{}\) are fixed._

The essence of Theorem 6 lies in its suggestion that the dynamics of \(^{}(t)\) is piecewise continuous, _i.e._, \(^{}(t)\) maintains smoothness between two adjacent kinks. By considering specific choices of \(()\) and \(y_{n+1}(z)\), our system (13) generalizes some previously studied methodologies in fast conformalization. First, consider the scenario with an equally spaced discretization of the interval \([0,]\), namely \(t_{k}=k h^{}\) for some fixed step-size \(h^{}>0\). Thus, the sequence \(z_{k}:=z(t_{k})\) is approximately given by \(z_{k+1} z_{k}+h^{}(z_{k})\). Intuitively, the choice of \(()\) controls the dynamic of \(z()\) and generalizes some previously considered sequences \(\{z_{k}\}\) for the problem (5). For example, letting \((z):=1\) we recover the arithmetic sequence in  and letting \((z):=-z\) we recover the geometric sequence in .

## 4 Fast conformalization algorithm

The complete algorithm on the fast exact conformalization is outlined in the plate referred as Algorithm 1.

```
0: Training data \(\{_{i},y_{i}\}_{i=1}^{n}\), new covariate \(_{n+1}\), range \([z_{},z_{}]\), initial solution \(_{0}^{}\), regularization strength \(\{_{j}\}_{j=1}^{m}\), miscoverage level \((0,1)\).
1:\(\)Full Path Generation
2:\(z 0\), set \(_{}\), \(_{}\), \(_{}\) and all \(I_{L}\), \(I_{}\) by \(_{0}^{}\).
3:while\(0 z z_{}\)do
4:while partitions \(_{}\), \(_{}\), \(_{}\), \(I_{L}\), \(I_{}\) are met do
5: Calculate \(}(^{}|z)\), \(_{}\) as in (12), (14).
6: Solve ODE system (13).
7:endwhile
8: Update \(_{}\), \(_{}\), \(_{}\), \(I_{L}\), \(I_{}\) by index violator(s).
9:endwhile
10:\(z 0\).
11:while\(z_{} z 0\)do
12: Repeat the above procedure analogously for negative values of \(z\), obtaining \(\{^{}(z):z_{} z 0\}\).
13:endwhile
14:\(\)Conformal Set Generation
15:for\(i=1\) to \(n+1\)do
16: Calculate conformity score path \(_{i}\) for \(i\)-th sample.
17:endfor
18: Calculate the path of \(_{y_{n+1}}\) by (2).
19:\((_{n+1})\{y_{n+1}:_{y_{n+1}}\}\).
20:Conformal prediction set \((_{n+1})\). ```

**Algorithm 1** Fast Exact Conformalization Algorithm

### On solving (11)

To avoid the direct computation of matrix inversion (11), our practical algorithm involves sweep operator [22; 23]. Suppose \(\) is an \(p p\) symmetric matrix, sweeping on the \(k\)-th diagonal entry \(A_{kk} 0\) of \(\) results in a matrix \(}\) with entries

\[_{kk}=-},_{ik}=}{A_{kk}}(i  k),_{kj}=}{A_{kk}}(j k), _{ij}=A_{ij}-A_{kj}}{A_{kk}}\,\,\,(i,j k ).\] (15)

Since the sweeping (15) preserves symmetry, all operations can be performed solely on either the lower or upper-triangular part of \(\) to ease the computational burden . To begin with, we initiate with a sweeping tableau as \([}(^{}|z)}{ _{}}&\\ ]\), and further sweeping of diagonal entries of block \(}\) yields \([_{11}&[ ]{c}\\ _{21}&_{22}]\). Then we initialize our new tableau in the form of \([-_{22}&_{21}\\ &-_{11}]\), and further sweeping of diagonal entries of block \(_{22}\) makes \([&^{}(^{}|z)\\ &(^{}|z)]\). Compared to direct inversion, it also decreases a \((p^{2}+n_{}^{2})\) storage space.

### Efficiency

Algorithm 1 shows a very favourable behavior empirically, and converges remarkably faster than the standard grid-search type algorithm. We argue that this observation is actually quite natural. Indeed, our algorithm can follow the ground truth solution path, and the numerical integration process is fully deterministic, which avoids large fluctuations between the iteration steps like stochastic gradient descent. Therefore, the solving process of Algorithm 1 exhibits a more stable character being completely _deterministic_ and has no extensive loops, which explains the much faster convergences observed in practice. In contrast, the standard grid-search type method would cost \(N\)-times the original batch iterative algorithms, where \(N\) is the number of grid points.

## 5 Numerical experiments

We provide experimental results on real-world benchmarks to validate our derived algorithm. All experiments presented in this study were conducted on a workstation running the Ubuntu \(18.04\) operating system, equipped with Intel Xeon Gold 5218R CPU\( 64\) and \(60.9\) GB of RAM. We integrate a system of ordinary differential equations using lsoda from the FORTRAN library, where an

    &  &  &  &  \\   & & Coverage & Length & Coverage & Length & Coverage & Length & \# Kinks \\  fried & NLS(\(\)) & 0.81(0.003) & 5.82(0.53) & 0.81(0.007) & 5.55(0.94) & 0.80(0.009) & 5.30(0.22) & 6 \\ cadata & NLS(\(\)) & 0.82(0.007) & 5.54(0.12) & 0.82(0.007) & 5.53(0.94) & 0.80(0.003) & 5.35(0.02) & 2 \\ delta & NLS(\(\)) & 0.81(0.008) & 5.63(1.06) & 0.81(0.002) & 5.79(5.50) & 0.80(0.002) & 5.26(0.27) & 5 \\ cadata & \(_{1},0=0.03\) & 0.82(0.001) & 1.61(0.13) & 0.81(0.004) & 11.38(0.36) & 0.80(0.003) & 11.34(0.27) & 7 \\ cadata & \(_{1},0=0.02\) & 0.83(0.008) & 1.72(0.91) & 0.81(0.004) & 10.30(0.97) & 0.80(0.001) & 11.30(21.01) & 5 \\ elevator & \(_{3},0=0.03\) & 0.83(0.003) & 1.10(0.58) & 0.81(0.007) & 11.34(0.97) & 0.80(0.002) & 10.68(0.81) & 9 \\ fried & \(_{3}=0.1\) & \(_{3}=0.02\) & 0.81(0.002) & 19.14(0.78) & 0.81(0.001) & 19.69(0.96) & 0.81(0.002) & 19.05(0.19) & 12 \\ cadata & \(_{1},0=1.3\) & \(_{3}=0.02\) & 0.82(0.003) & 19.99(0.38) & 0.80(0.002) & 19.16(0.29) & 0.80(0.002) & 19.14(0.82) & 13 \\ elevator & \(_{1},0=2.3\) & \(_{2}=0.05\) & 0.82(0.003) & 19.99(0.85) & 0.81(0.002) & 19.33(0.53) & 0.81(0.005) & 19.48(0.75) & 7 \\   

Table 2: Numerical results for average empirical coverage, average length of the conformal prediction set, and the _total_ number of kinks observed. One standard error is given in the parenthesis following the average number.

Figure 2: The running time under different sizes of datasets.

interface for SciPy is available using the \(\). The concrete parameter settings of ODE solver are shown in the Table 3, wherein the numerical solver exploit the Runge-Kutta method of order \(4\) or \(5\). The parameterizers are set to \(y_{n+1}(z)=4z\), \((z)=1\), respectively.

ModelFor evaluation, here we employ \(3\) specific forms of (1), _i.e._, Nonnegative Least Squares (NLS) , Graph-guided Fused Model (GFM) , and Inverse Gaussian Regression (IGR) .

ConformalizationA conformal prediction set with target coverage level \(0.8\) (\(=0.2\)) is calculated for each sample in testing set using each of the \(4\) methods, _i.e._, the standard grid-point evaluation method (Grid1) , grid-point method with warm-restart strategy (Grid2) , the split conformal prediction method (SCP) , and our exact conformalization method in Algorithm 1 (Exact). We use the conformity score function \(_{i}=-|y_{i}-_{^{*}}(_{i})|\). Conventionally, the interval \([y_{n+1}^{},y_{n+1}^{}]\) (part of the input) can be chosen simply as \([y_{1},y_{[n]}]\), where \(y_{} y_{} y_{[n]}\) are the order statistics of the response variable. In experiments we set the search range even more conservatively, enlarging the sample range by \(50\%\) of length \([y_{n+1}^{},y_{n+1}^{}]:=y_{}-0.25(y_{[n]}-y_{}),y_{[n]}+ 0.25(y_{[n]}-y_{})\).

DatasetOur experiments were conducted using real-world datasets. We employ real-world datasets from OpenML  and UCI repository  in simulations. We randomly partition the dataset into training set, testing set, and calibration set (used in SCP) with 70%, 10%, and 20% of the total samples. To facilitate optimization, we have standardized the entire original dataset by removing the mean and scaling to unit variance for the features, and adjusting the mean of all labels to \(0\).

SetupOur central claim is twofold, encompassing both accuracy and efficiency. We first report the average empirical coverage, average length of the prediction set in Table 2. Regarding running efficiency, we present average training time per dataset in Figure 2 while varying the scale of training set. In Figure 3, we compare the training times when different grid numbers are used in Grid1 and Grid2. We further plot the histogram of kink numbers, and the running time against various \(y_{n+1}()\) in Figure 4.

Results & AnalysisFrom Table 2 we observe that all these methods provide valid and nearly perfect coverage. The grid and exact method give similar lengths, where the slight difference is due

Figure 4: The histogram of kink numbers and the running time of Algorithm 1 against \(k\), where \(k\) lives in \(y_{n+1}:=k z(k)\).

Figure 3: The training time against grid numbers.

 
**Parameters** & **Descriptions** & **Values** \\  rtol & allowed relative error in the solution & 1e-6 \\ atol & allowed absolute error in the solution & 1.49e-8 \\ tcrit & vector of critical points & _set by known / explicit kinks_ \\ h0 & initial step size for the integration & \(0.02(z_{max}-z_{min})\) \\ hmax & maximum absolute step size allowed & \(0.1(z_{max}-z_{min})\) \\ hmin & minimum absolute step size allowed & 1e-7 \\ mxstep & maximum number of steps allowed for each point & 400 \\ mxordn & maximum order to be allowed for the non-stiff method & 12 \\ mxords & maximum order to be allowed for the stiff method. & 5 \\ ixpr & extra printing at method switches & True \\ mxhill & maximum number of messages printed & 15 \\ tfirst & the required order of the first two arguments & True \\ full\_output & return a dictionary of optional outputs & True \\  

Table 3: List of the key parameters in the numerical solver.

to the rounding between neighboring grid points. The \(\) produces wider intervals due to a less efficient use of data. Given Figure 2, our exact method is much faster than the baselines, with same solid performance. We can also learn from the Figure 3 that the time of Algorithm 1 still compares favorably against the grid-search type method, even when the grid is sparse. Figure 4 found that there exists tiny number of kinks in majority runnings, which offers hope for the future expansion of our algorithm, and indicates that the choice of \(y_{n+1}\) can make a difference in efficiency, as it will determine the solving interval and the total query times of gradient.

## 6 Conclusion

In this work, we present a unified framework and an elaborate algorithm with statistical analysis for fast exact conformalization regarding generalized parametric estimation. We illustrate the strong and competitive performance of proposed methods in a series of benchmarks.

In future work, a potential direction is to consider scenarios where labels are multidimensional, such as multi-task learning, in which the label space \(\) would be indexed by multiple independent parameters \((z_{1},,z_{K})\). Under such conditions, the homotopy solution path would extend to a solution surface, and our ODE system could be reformulated as a corresponding system of partial differential equations. Additionally, compared to some previous work, Algorithm 1 offers increased speed but at the cost of higher memory requirements. It necessitates storing all training samples throughout the process for gradient queries. We believe it would be interesting to use recent advancements like the Kronecker-factored approximate method to potentially enhance the memory scalability.