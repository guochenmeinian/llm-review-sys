# [MISSING_PAGE_FAIL:1]

[MISSING_PAGE_FAIL:1]

geneous embodiments within a unified architecture, we tokenize states and actions into joint-level representations, since joints serve as the fundamental building blocks of robots and provide a modular representation for compositional generalization to unseen embodiments [12; 10]. Given this unified I/O, we employ a state encoder to capture both embodiment-specific knowledge about morphology and dynamics and shared knowledge about the physics governing the environment. Then we design a matching-based policy network that predicts actions from the encoded states, conditioned on a few demonstrations. Our model is trained using episodic meta-learning on a dataset comprising various embodiments and tasks, followed by few-shot behavior cloning on unseen embodiments and tasks using a few reward-free demonstrations.

Our key contributions are as follows: (1) We design a novel structure-motion encoder that operates on joint-level state representations, efficiently disentangling embodiment-specific and task-specific knowledge. (2) We propose a matching-based meta-learning framework that efficiently transfers knowledge of local motions to quickly learn unseen tasks with a few demonstrations. (3) We evaluate our framework in various environments within the DeepMind Control suite, encompassing diverse embodiments and tasks, demonstrating superior few-shot learning performance over existing baselines.

## 2 Problem Setup

A reinforcement learning (RL) problem involves an agent interacting with an environment, typically modeled as a Markov Decision Process (MDP). An MDP is represented by the tuple \((,,P,R)\), where \(\) is the state space, \(\) is the action space, \(P:\) is the transition probability, and \(R:\) is the reward function. In conventional RL, an agent learns a policy \(:\) that maximizes expected cumulative rewards \(_{}[^{t}R(s_{t},a_{t})]\), where \(^{t}\) is a discount factor. Training such an RL agent typically requires numerous interactions with the environment and a carefully designed reward function, making it burdensome to learn new tasks. Behavior cloning (BC) addresses these challenges by using supervised learning techniques to imitate an expert policy from offline demonstrations. We focus on the few-shot BC setting, where the training data consists of a few reward-free demonstrations \(=\{_{i}\}_{i N}\), with each demonstration \(_{i}=\{(s^{i}_{t},a^{i}_{t})\}_{t T}\) being a temporal sequence of states and actions performed by an expert model.

In this paper, we consider continuous control problems of multi-joint robots that involve various embodiments and tasks. An embodiment \(\) refers to the physical configuration of robots, which includes (1) the morphology, _i.e.,_ the shape, size, and arrangement of the components such as limbs, joints, and sensors, and (2) the dynamics parameters that affect the robot's behavior, _e.g.,_ motion inertia, mass, gear ratios, and damping. In terms of MDP, different embodiments can have different dimensionality of state and action spaces, _e.g.,_\((_{_{i}})(_{_{j}})\) and \((_{_{i}})(_{_{j}})\) for \(_{i}_{j}\), as well as distinct transition probabilities \(_{}\) that determine the kinematics of the robot. A task \(\) is defined by a specific goal or objective that the robot must achieve within its environment, characterized by a reward function \(R_{}\). Tasks can vary widely, ranging from locomotion and manipulation to complex interactions with dynamic environments. The combination of different embodiments \(\) and tasks \(\) creates a broad class of continuous control problems.

Our objective is to achieve simultaneous generalization to unseen embodiments and tasks of continuous control with a few-shot behavior cloning framework. In other words, the model has to learn a policy for a novel continuous control problem from only a few demonstrations \(\), where both embodiment \(\) and task \(\) can be arbitrary and previously unseen.

### Challenges and Desiderata

Despite achieving the simultaneous few-shot generalization to unseen embodiments and tasks is crucial for developing versatile and adaptive robotic systems, this problem remains less explored. We characterize two distinct challenges and desiderata to address each challenge.

**Handling Heterogeneous Embodiments.** To generalize to arbitrary embodiments in continuous control, the model must possess an architecture capable of universally handling heterogeneous states and actions of various embodiments. This necessitates a unified input/output (I/O) representation for states and actions, allowing for the sharing of structural characteristics (e.g., dimensionality) and semantics (e.g., input attributes or output control types) across different embodiments. Additionally,the encoder to extract state features should be able to capture transferable knowledge across different embodiments as well as embodiment-specific knowledge to flexibly adapt to distinct morphologies and dynamics of each embodiment.

**Few-shot Policy Adaptation.** To achieve robust few-shot learning on unseen tasks, an efficient and flexible policy adaptation mechanism is essential. Given the diverse behaviors required by continuous control problems across various embodiments and tasks, the policy network must learn transferable skills shared by different tasks. Simultaneously, the model must dynamically adapt its policy by inferring the task based on a few demonstrations, ensuring it captures the underlying structure of previously unseen tasks. Additionally, the adaptation mechanism must be robust to overfitting.

## 3 Method

In this section, we introduce Meta-Controller, a few-shot behavior cloning framework for simultaneous generalization of embodiments and tasks of continuous control. Figure 1 illustrates the overall framework. Meta-Controller addresses heterogeneous embodiments by tokenizing the states and actions into joint-level I/O (Section 3.1) and employing a state encoder that captures knowledge about the structure and dynamics of the embodiment (Section 3.2.1). Then, a matching-based policy network (Section 3.2.2) predicts the action by leveraging a few given demonstrations. The training protocol of Meta-Controller consists of episodic meta-learning and few-shot fine-tuning (Section 3.3).

### Joint-Level I/O Representation

To unify the state and action spaces of different embodiments, we adopt joint-level tokenization. Joints are fundamental components of robots, and their primary source of action is the torque or force generated by actuators attached to each joint. This allows us to standardize the states and actions of a robotic agent into per-joint observations and control commands. Consequently, joint-level states and actions provide a natural modular representation, facilitating the compositional generalization of various robot embodiments2.

Figure 1: The overall framework of Meta-Controller. First, the states and actions of various robot embodiments are tokenized into joint-level representations. The state tokens are then encoded by the state encoder to capture knowledge about the embodiments. Finally, a matching-based policy network uses few-shot demonstrations with the encoded state features to predict per-joint actions.

For any given embodiment \(\), we represent the corresponding states \(_{t}\) and actions \(_{t}\) as arrays of joint-level tokens as follows:

\[_{t}=[_{j,t}]_{j J_{}}^{J_{} d},_{t}=[_{j,t}]_ {j J_{}}^{J_{} 1},\] (1)

where \(J_{}\) is the number of joints in \(\) and \(t\) indicates the time. The state token \(_{j,t}^{d}\) represents per-joint information, such as position, velocity, movement axis, and motion types (_i.e.,_ linear or angular). The action token \(_{j,t}[-1,1]\) represents the control command of \(j\)-th joint, where we assign zero value for free joints. This joint-level representation ensures consistency across heterogeneous robotic embodiments, enabling unified learning of different continuous control problems.

### Meta-Controller

Given the tokenized representation of joint states and actions, we aim to build an adaptive controller for arbitrary robot embodiments to perform arbitrary continuous control tasks based on a set of few demonstrations \(=\{^{i}\}_{i N}\). To address the challenge discussed in Section 2.1, we employ an encoder \(f\) to extract the embodiment-aware state features and an adaptive policy network \(\) that efficiently leverages the demonstrations \(\) to predict the actions.

#### 3.2.1 State Encoder for Embodiment Generalization

The state encoder \(f\) encodes the tokens of the current state with history \(_{ t}\) into state features \(_{t}\).

\[_{t}=f(_{ t};).\] (2)

To effectively encode the states of each embodiment, we decompose our state encoder into two components: a structure encoder \(f_{s}\) that captures morphological knowledge, and a motion encoder \(f_{m}\) that captures dynamics knowledge.

**Structure Encoder.** The structure encoder models the relationships among the joints within each embodiment. As shown in Figure 2, we use a bi-directional transformer on the joint-level state tokens \(_{t}\) at each timestep \(t\) to extract the structure features \(_{t}\):

\[_{t}=f_{s}(_{t}+_{s}^{};_{s}, _{s}^{}),\] (3)

where the embodiment-specific positional embedding \(_{s}^{}\) is added to the input tokens. Note that we decompose the parameters of \(f_{s}\) into adaptive parameters \((_{s}^{},_{s}^{})\) that capture embodiment-specific knowledge and shared parameters \(_{s}\) that captures common knowledge across embodiments. The

Figure 2: The state encoder \(f\) consists of two component transformers. Joint-level state tokens are first encoded by the structure encoder \(f_{s}\) along the joint axis, where the positional embedding and a part of backbone parameters adapt the model to each embodiment. The features are then passed to the motion encoder \(f_{m}\), which computes causal attentions of per-joint features along the temporal axis, where a part of backbone parameters adapt the model both to the embodiment and task.

positional embedding \(_{s}^{}\) is crucial for adapting to local configurations (_e.g.,_ length, movement range) of joints in \(\) not explicitly given in the state \(_{t}\). Global configurations (_e.g.,_ control timestep) shared by all joints are handled through the embodiment-specific parameters \(_{s}^{}\) in the transformer backbone. Shared parameters \(_{s}\) capture common knowledge, such as the physics governing the environment.

To enable efficient yet flexible adaptation during few-shot behavior cloning, we designate only a small portion of the backbone parameters to be embodiment-specific. Inspired by parameter-efficient fine-tuning (PEFT) approaches that effectively modulate transformers with only a few parameters, we employ bias parameters , low-rank projection matrices , and also layer-scale parameters for \(_{s}^{}\). As explained in Section 3.3, only the adaptive parameters \((_{s}^{},_{s}^{})\) are updated during few-shot learning on unseen embodiments, ensuring robustness to overfitting the few demonstrations.

**Motion Encoder.** While the state encoder \(f_{s}\) encodes structural information about the embodiments, it does not model the temporal dynamics of states which is crucial for understanding continuous control tasks. Therefore, we introduce a motion encoder \(f_{m}\), which is a causal transformer that encodes the state features along the temporal axis. As illustrated in Figure 2, \(f_{m}\) rearranges the encoded structure features \(_{ t}\) into separate temporal sequences of joint-level features \(_{j, t}\), then produce the motion features for each joint \(_{j,t}\) auto-regressively:

\[_{j,t}=f_{m}(_{j, t}+_{m};_{m}, _{m}^{(,)}), j J_{}\] (4)

where \(_{m}\) denotes the positional embedding for specifying the timesteps \(t\). Additionally, we introduce a small portion of adaptive parameters \(_{m}^{(,)}\) in the causal transformer backbone, which is both specific to embodiment \(\) and task \(\). These parameters help the model understand the unique motions in the few-shot demonstrations that are specific to each task and embodiment. We use the same PEFT techniques employed in the structure encoder for the adaptive parameters.

#### 3.2.2 Few-shot Policy Adaptation for Task Generalization

To learn unseen tasks \(\), we design an adaptive policy network \(\) with a matching framework  that incorporates the demonstrations \(=\{(_{ T}^{i},_{ T}^{i})\}_{i N}\) to produce an action \(}_{t}\).

\[}_{t}=(_{ t},;).\] (5)

Figure 3 illustrates the architecture of the policy network, which consists of an action encoder \(g\), a matching module \(\), and an action decoder \(h\).

Figure 3: An illustration of the matching-based policy network \(\). (a) Each state and action token in few-shot demonstrations is encoded by the corresponding encoders \(f\) and \(g\), where we use the same encoder \(f\) used for the current state. A matching module \(\) then computes the weighted sum of action features based on the joint-wise similarity between state features. Finally, an action decoder \(h\) decodes the joint-wise matching output to predict the current action. (b) Both the action encoder \(g\) and decoder \(h\) are causal transformers operating along the temporal axis of action tokens and features.

**Matching-based Policy Network.** To incorporate the demonstrations, we encode the state and action tokens in the demonstrations using the state encoder \(f\) introduced in Section 3.2.1 and an additional action encoder \(g\), respectively.

\[^{i}_{j,t^{}} =f(^{i}_{j, t^{}};),  j J_{},\; t^{} T,\; i N,\] (6) \[^{i}_{j,t^{}} =g(^{i}_{j, t^{}}+_{g};_{g}),  j J_{},\; t^{} T,\; i N,\] (7)

where we employ a causal transformer for \(g\) with temporal position embedding \(_{g}\). Then \(\) incorporates the motion features \(_{}\) of the current state (Eq. (2)) and the encoded demonstration features (Eq. (6) and (7)) via joint-wise matching as follows:

\[}_{j,t}=_{t^{} T}_{i N}( _{j,t},^{i}_{j,t^{}})^{i}_{j,t^{}},  j J_{},\] (8)

where \(\) is a similarity function (_e.g._, cosine similarity). Finally, we employ an action decoder \(h\), a causal transformer that decodes the joint-wise matching output \(}_{j,t}\) into \(j\)-th action token \(}_{j,t}\).

\[}_{j,t}=h(}_{j, t};_{h}), j  J_{}.\] (9)

The matching-based policy network offers significant benefits for few-shot behavior cloning, particularly when dealing with unseen tasks and embodiments. Its robust adaptation capabilities stem from effectively incorporating demonstration data through a similarity function, which dynamically matches current state features with those from demonstrations. This non-parametric approach minimizes overfitting, enhancing generalization from limited examples.

**Hierarchical IL Interpretation.** Eq. (8) can also be interpreted as hierarchical imitation learning that generalizes to unseen tasks using a transferable skill set. Since the action encoder \(g\) extracts a pool of temporal action features that are composed to produce the current action \(_{t}\) in the feature space, we can treat the action features \(^{i}_{j,t^{}}\) as _local motor skills_, _i.e.,_ building blocks of joint behavior for various control tasks. This modular approach lets the network recombine these skills to efficiently tackle new challenges. By assigning high similarity scores to relevant demonstrations, the policy network ensures accurate imitation of expert behavior, improving performance on novel tasks.

### Training & Inference

The training protocol of Meta-Controller consists of two stages: episodic meta-learning and few-shot fine-tuning, where we train whole parameters \((,)\) of the model during the first stage while we train only the adaptive parameters \((^{}_{s},^{}_{s},^{(, )}_{m})\) during the second stage.

**Episodic Meta-Learning.** During episodic meta-learning, the model acquires general knowledge of continuous control through a number of episodes that mimic few-shot behavior cloning scenarios to ensure effective adaptation to unseen embodiments and tasks. To this end, we leverage a meta-training dataset that consists of demonstrations \(_{(,)}\) by expert agents with various embodiments \(\) and tasks \(\). At each episode, we first sample a continuous control problem \((,)\), then sample two subsets of \(_{(,)}\): a set of support data \(_{S}\) and query data \(_{Q}\). Then the model is trained to imitate query data using the demonstrations.

\[_{(,)}\;_{p(,)}_{_{S},_{Q}_{(,)} }_{Q}|}_{(_{t},_{t}) _{Q}}\|_{t}-}_{t}\|^{2} ,\] (10)

where \(}_{t}\) is produced by Eq. (5) using \(_{S}\), and \(p(,)\) is a uniform distribution over all control problems within the dataset.

**Few-shot Fine-Tuning.** After acquiring the meta-knowledge about continuous control problems, we apply our Meta-Controller in a few-shot behavior cloning setup, where it should adapt to both unseen embodiments and tasks with a few demonstrations \(\). To this end, we randomly split \(\) into two disjoint subsets, and fine-tune the model with Eq. (10) but _with only respect to_ the embodiment-specific and task-specific parameters \((^{}_{s},^{}_{s},^{(, )}_{m})\) while freezing the rest. After fine-tuning, the model uses the whole demonstrations \(\) in the policy network to produce the actions at evaluation.

[MISSING_PAGE_FAIL:7]

parameters and fine-tunes only these parameters for few-shot adaptation. For the task-specific parameters, we use the same parameters as \(_{m}^{(,)}\) used in our motion encoder. Prompt-based Decision Transformer (**PDT**)  adapts its policy by conditioning on the few-shot demonstrations through prompting. We also report the performance of a variant of PDT that fine-tunes task-specific parameters (**PDT+PEFT**), similar to MT-DT. Hyper Decision Transformer (**HDT**)  employs a hyper-network conditioned on few-shot demonstrations to generate parameters of the Adapter  module applied to DT. Learning To Modulate (**L2M**) incorporates parameter-efficient fine-tuning (PEFT) techniques to DT architecture. While L2M is not directly proposed for few-shot imitation learning, we include this baseline since it uses a similar PEFT technique as ours.
* **Modular Policy-based Models.** We include two modular policy learning approaches, **MetaMorph** and **MTGv2**, which utilize a transformer architecture to encode joint-level states. Originally designed for zero-shot learning of locomotion tasks, we adapt these approaches by incorporating task-specific linear heads and fine-tuning them on few-shot demonstrations. Both models are trained using the behavior cloning (BC) objective as described in .

**Implementation Details.** We implement both the structure encoder and the motion encoder using a 6-layer transformer with 4 attention heads and a hidden dimension of 512. Due to the quadratic computation cost of the transformer, we set the maximum history size of causal attention layers in the encoders to 10. The baseline models use the same transformer backbone. All models are trained for 200,000 iterations on the meta-training dataset and fine-tuned for 10,000 iterations on the few-shot demonstrations. For downstream embodiments that are structurally similar to a training task (_e.g._, **reacher-three** and **reacher-four**), we initialize the encoder's embodiment-specific parameters using the trained parameters during fine-tuning. More details are included in Appendix B.2.

### Main Results

Table 1 shows the \(5\)-shot behavior cloning results of the models on both unseen and seen embodiments. We observe that Meta-Controller consistently outperforms all baselines across various continuous control problems, demonstrating its effectiveness. Existing few-shot imitation learning approaches that lack an embodiment generalization mechanism, such as PDT and HDT, struggle to adapt to unseen embodiments, often performing comparably to the naive from-scratch baseline (DT-FS). In contrast, modular policy learning approaches like MetaMorph and MTGv2 show better adaptation to unseen embodiments (_e.g._, hopper). However, their performance is still inferior to Meta-Controller, which can be attributed to the absence of a few-shot adaptation mechanism for unseen tasks.

Notably, our model significantly outperforms all baselines in the challenging **reacher-four** embodiment, where models must understand the notion of a _goal position_ given only five demonstrations. Figure 4 shows that while baseline models converge to the pose in the demonstrations regardless of the goal position, our model successfully reaches the goal position and converges with a unique pose. We attribute this success to the modular nature of our model. Our state encoder effectively shares knowledge about joint-level motions thanks to its parametrization, and the matching-based policy network flexibly exploits the local motor skills from a few demonstrations. We provide more results and analysis in Appendix C.

    &  &  \\  Emb (\(\)) &  &  &  &  \\  Task (\(\)) & **hop** & **hop-bwd.** & **stand** & **walk** & **run** & **easy** & **hard** & **walk-bwd.** \\  FS-DT  & 1.6\(\)1.5 & 56.9\(\)6.2 & 9.8\(\)0.9 & 44.7\(\)10.8 & 35.8\(\)7.2 & -0.7\(\)4.2 & 5.5\(\)4.9 & 20.6\(\)8.6 & 21.8 \\ MT-DT & 3.2\(\)2.3 & 64.3\(\)7.0 & 10.1\(\)1.1 & 53.4\(\)11.8 & 46.2\(\)10.2 & 10.2\(\)7.4 & 8.4\(\)5.1 & **86.4\(\)5.0** & 35.3 \\ PDT  & 0.9\(\)0.7 & 29.7\(\)9.3 & 6.5\(\)1.9 & 47.0\(\)11.4 & 35.7\(\)8.3 & 3.3\(\)4.7 & 5.8\(\)3.5 & 5.0\(\)1.5 & 16.7 \\ PDT+PEFT & 2.3\(\)1.5 & 61.7\(\)7.7 & 12.3\(\)4.0 & 54.9\(\)8.4 & 52.7\(\)6.4 & -1.7\(\)3.3 & 9.1\(\)5.9 & 74.1\(\)8.5 & 33.2 \\ HDT  & 0.8\(\)0.4 & 51.6\(\)7.9 & 13.7\(\)3.7 & 56.4\(\)10.1 & 38.7\(\)9.1 & 1.2\(\)5.3 & 8.5\(\)5.5 & 3.3\(\)10 & 21.8 \\ L2M  & 4.5\(\)1.7 & 45.1\(\)7.9 & 4.0\(\)1.2 & 50.6\(\)10.7 & 65.9\(\)3.8 & 3.7\(\)6.3 & 15.5\(\)7.4 & 40.0\(\)9.8 & 28.7 \\  MetaMorph  & 33.4\(\)4.9 & 81.8\(\)2.4 & 54.1\(\)4.7 & 73.0\(\)4.4 & 29.7\(\)4.6 & -4.1\(\)2.6 & 3.8\(\)3.1 & 31.8\(\)8.6 & 37.9 \\ MTGv2  & 21.6\(\)3.3 & 83.1\(\)2.2 & 40.7\(\)6.3 & 68.2\(\)7.3 & 29.1\(\)4.3 & -1.4\(\)2.7 & 4.6\(\)4.8 & 35.5\(\)5.9 & 35.2 \\  Ours & **49.1\(\)6.1** & **87.2\(\)1.6** & **82.5\(\)4.9** & **91.7\(\)5.1** & **67.3\(\)3.1** & **56.1\(\)8.8** & **50.8\(\)10.6** & 84.3\(\)5.7 & **71.1** \\   

Table 1: \(5\)-shot behavior cloning results on DeepMind Control (DMC) suite.

### Ablation Studies

**Ablation on the Architecture.** To verify the effectiveness of each architectural component introduced in Section 3, we conduct an ablation study by progressively replacing each module--the structure encoder \(f_{s}\), the motion encoder \(f_{m}\), and the matching module \(\)--with a linear layer. To isolate the effect of adaptation parameters, we replace \(f_{s}\) with task-specific linear layers and \(f_{m}\) with embodiment- and task-specific linear layers. Table 2 summarizes the results. We observe that the structure encoder \(f_{s}\) is crucial for generalization to unseen embodiments, as performance drops drastically when it is removed (row 1 vs. row 3). This indicates that the structure encoder captures modular knowledge about various morphologies, transferrable to unseen embodiments. Combined with the structure encoder, the motion encoder further improves performance (row 2 vs. row 3), especially on the seen embodiment (walker). This shows that modeling the temporal relationships of joints is beneficial when the model understands the embodiment. Finally, the matching module consistently improves performance (row 3 vs. row 4), particularly on challenging tasks such as the hop task of hopper and the tasks of reacher-four This demonstrates the effectiveness of the matching architecture in preventing overfitting with few demonstrations. We provide more ablation studies on architectural components in Appendix D.1.

**Ablation on the Parametrization.** To analyze the impact of the embodiment-specific and task-specific parametrization introduced in the state encoder, we conduct an ablation study by removing the adaptive parameters \(_{s}^{},_{s}^{}\) in the structure encoder and \(_{m}^{(,)}\) the motion encoder. In this study, the matching module \(\) is used in all models, where we provide additional results without using it in Appendix D.2. The results show that the model without adaptive parameters in the structure encoder (row 1) performs well in many tasks, likely due to the universality of joint-level input/output representation, which allows for compositional generalization. However, adding embodiment-specific parameters consistently improves performance across all tasks, indicating the benefit of capturing embodiment-specific knowledge. The model without adaptive parameters in the motion encoder (row 2) remains competitive with the model including them (row 3) in many tasks but fails in the hop task

Figure 4: Qualitative comparison on the hard task of the reacher-four embodiment, visualizing the final states of the demonstrations and the rollout trajectories of each model. In this task, the robot must move its limb tip to the goal position (visualized as a red ball). While most of the baselines converge to one of the poses in the demonstrations and ignore the goal position, our model accurately solves the task with a distinct pose from the demonstrations.

Figure 5: Ablation study on the number of demonstrations. We plot the normalized scores for each pair of embodiment and task \((,)\) and their average, varying the number of shots as 5, 10, and 20.

of hopper and the walk-bud. task of walker. This failure, even in a seen embodiment (walker), suggests that certain unique motions cannot be adequately captured without adaptive parameters. Overall, introducing adaptive parameters in both encoders yields the best performance.

**Ablation on the Number of Demonstrations.** In Figure 5, we plot the performance of our model and the two best-performing baselines--one from modular policy learning and the other from few-shot IL--by varying the number of demonstrations. As expected, the performance of our model consistently increases with the number of demonstrations provided. The consistent superiority of our model in few-shot behavior cloning, across varying numbers of demonstrations, highlights the necessity of (1) a powerful encoder capable of handling unseen embodiments, and (2) a few-shot policy adaptation mechanism that enables robust few-shot learning on unseen tasks. These components are crucial for achieving simultaneous few-shot generalization to both unseen embodiments and tasks.

We provide more ablation studies on meta-training task composition in Appendix D.3

## 6 Conclusion

We addressed the challenging problem of few-shot behavior cloning with unseen embodiments and tasks in continuous control. Our framework, Meta-Controller, effectively handles diverse embodiments using two key components: the state encoder and the matching-based policy network. Leveraging the modular nature of joint-level input/output representations, our state encoder extracts transferable features about the morphology and dynamics of the embodiment, capturing both specific and shared knowledge. The matching-based policy network uses these features to infer task structures from few-shot demonstrations, enabling robust imitation without overfitting. Experiments showed that our model generalizes well to unseen embodiments and tasks with only five demonstrations.