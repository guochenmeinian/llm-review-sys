# MemVLT: Vision-Language Tracking with Adaptive Memory-based Prompts

Xiaokun Feng\({}^{1,2}\)  Xuchen Li\({}^{1,2}\)  Shiyu Hu\({}^{5}\)  Dailing Zhang\({}^{1,2}\)  Meiqi Wu\({}^{3}\)  Jing Zhang\({}^{2}\)  Xiaotang Chen\({}^{1,2,4}\)  Kaiqi Huang\({}^{1,2,4}\)

\({}^{1}\)School of Artificial Intelligence, University of Chinese Academy of Sciences

\({}^{2}\)Institute of Automation, Chinese Academy of Sciences

\({}^{3}\)School of Computer Science and Technology, University of Chinese Academy of Sciences

\({}^{4}\)Center for Excellence in Brain Science and Intelligence Technology, Chinese Academy of Sciences

\({}^{5}\)School of Physical and Mathematical Sciences, Nanyang Technological University

{fengxiaokun2022, lixuchen2024}@ia.ac.cn, shiyu.hu@ntu.edu.sg, zhangdailing2023@ia.ac.cn

wumeiqi18@mails.ucas.ac.cn, jing_zhang@ia.ac.cn, {xtchen,kaiqi.huang}@nlpr.ia.ac.cn

###### Abstract

Vision-language tracking (VLT) enhances traditional visual object tracking by integrating language descriptions, requiring the tracker to flexibly understand complex and diverse text in addition to visual information. However, most existing vision-language trackers still overly rely on initial fixed multimodal prompts, which struggle to provide effective guidance for dynamically changing targets. Fortunately, the Complementary Learning Systems (CLS) theory suggests that the human memory system can dynamically store and utilize multimodal perceptual information, thereby adapting to new scenarios. Inspired by this, (**i**) we propose a **Mem**ory-based **V**ision-**L**anguage **T**racker (**MemVLT**). By incorporating memory modeling to adjust static prompts, our approach can provide adaptive prompts for tracking guidance. (**ii**) Specifically, the memory storage and memory interaction modules are designed in accordance with CLS theory. These modules facilitate the storage and flexible interaction between short-term and long-term memories, generating prompts that adapt to target variations. (**iii**) Finally, we conduct extensive experiments on mainstream VLT datasets (_e.g._, MGIT, TNL2K, LaSOT and LaSOT\({}_{ext}\)). Experimental results show that MemVLT achieves new state-of-the-art performance. Impressively, it achieves 69.4% AUC on the MGIT and 63.3% AUC on the TNL2K, improving the existing best result by 8.4% and 4.7%, respectively. The code and models will be released at: https://github.com/XiaokunFeng/MemVLT.

## 1 Introduction

The vision-language tracking (VLT) task  aims to locate a user-defined object in a video sequence using multimodal prompts, which comprise a template patch and a language description. As an extension of traditional visual single object tracking (SOT) task , VLT can harness the complementary advantages of multiple modalities. Therefore, vision-language trackers (VLTs) have the potential to achieve more promising tracking performance, which has recently attracted widespread attention .

Similar to SOT, VLT still adopts the one-shot setting , providing prompts only at the initial moment. However, these fixed prompts struggle to provide continuous reference for targets in video sequences due to their inherent dynamic variability . As shown in Fig. 1 (a), the initial prompts depict a gun placed on a table. However, when the target is subsequently picked up, there is a significant deviation in the target's state from given prompts. Regarding the target state in different frames, wequantitatively evaluate its consistency with the initial multimodal prompts (implementation details are introduced in Sec. B.1). It is evident that the consistency is poor most of the time, indicating that the initial prompts are ineffective as a reference.

Despite this, most existing VLTs [11; 12; 13; 14; 15; 16] overly rely on these static prompts. As illustrated in Fig. 1 (b), they identify the target in each frame that is most similar to the initial prompts as the tracking result. Despite achieving some success, the difficulty lies in the limited generalizability of static prompts to subsequent frames, thereby impacting tracking performance.

Unlike existing VLTs, humans can adaptively locate a target, even when the target appears in a form vastly different from its initial perception state . Neuroscientists have long been interested in this ability and have conducted studies using the visual search task [18; 19], which is similar to the VLT. Numerous research findings reveal that human adaptive visual search capability can be attributed to the sophisticated memory mechanisms [20; 21].

The Complementary Learning Systems (CLS) theory , as a well-known memory model, has recently revealed the relationship between human generalization adaptability and memory . Generally speaking, humans continuously adjust their memory by integrating perceived information to better adapt to the environment. As shown in Fig. 1 (c), the human brain achieves memory through two complementary systems: the hippocampus and the neocortex. The hippocampus plays a primary role in short-term memory, which is subsequently consolidated into long-term memory stored in the neocortex [24; 23]. The interaction between short-term and long-term memories enables humans to adapt to different environments [23; 8]. Given the advantages of this memory mechanism, a critical question arises: _How can we incorporate it into the design of trackers?_

To achieve that, we propose a **M**emory-based **V**isual-**L**anguage **T**racker named **MemVLT**. As depicted in Fig. 1 (c), the core insight of MemVLT lies in efficiently adapting to the dynamic changes of the target by emulating the storage and interaction of memory information, thereby enabling effective tracking. Specifically, **(i)** we first develop a _memory storage module_ to simulate the functioning of short-term and long-term memory systems. Inspired by the system consolidation process , we introduce an efficient long-term memory storage method named _section-top_. (**ii**) Drawing upon the stored memory, we incorporate a _memory interaction module_ to emulate the interaction between short-term and long-term memories , generating adaptive visual and textual prompts. These adaptive prompts then guide subsequent tracking by integrating with the search feature. Through these modules, MemVLT facilitates adaptive tracking by utilizing memory information.

In summary, our contributions are as follows: **(i)** Inspired by the CLS theory, we introduce a novel tracker named MemVLT. Leveraging memory mechanism modeling, this approach facilitates the generation of adaptive prompts to effectively guide the tracking process. **(ii)** In the proposed MemVLT, we incorporate _memory storage_ and _memory interaction_ modules. They faithfully model the storage and flexible interaction processes between short-term and long-term memories in the human brain, yielding multimodal prompts that adapt to dynamically evolving targets. (**iii)** We evaluate the performance of MemVLT on the MGIT , TNL2K , LaSOT  and LaSOT\({}_{ext}\) and achieve state-of-the-art tracking results. Notably, MemVLT achieves 69.4% AUC on MGIT and 63.3% AUC on TNL2K, improving the existing best result by 8.4% and 4.7%, respectively.

Figure 1: (a) Illustration of a video sequence. Given the initial prompts, we respectively plot consistency curves between prompts of two modalities and the subsequent searched target. (b) Framework of previous vision-language trackers (VLTs). They primarily obtain tracking results by matching the search image with the initial prompts based on similarity. (c) Framework of our proposed **MemVLT** (left) by modeling Complementary Learning Systems (CLS) Theory (right). MemVLT effectively models the storage and interaction of long-term and short-term memories, resulting in prompts that adapt to the search image.

Related Work

### Vision-Language Tracking

Vision-language tracking is an emerging multimodal task that aims to achieve tracking by utilizing a given language description and an initial template patch. Adhering to the principle of similarity-matching , most existing VLTs [11; 12; 13; 14; 15; 16] leverage the static given prompts as reference to identify the most similar target in the search frame. Among them, SNLT  introduces a universal language region proposal network, which improves tracking performance through a dynamic aggregation module. MMTrack  designs an effective tracking pipeline that treats the VLT as a token generation task. While these VLTs perform well in simple scenes, they overlook the dynamic nature of targets, making it challenging to track when targets undergo significant changes.

To address this limitation, certain VLTs attempt to utilize temporal information to obtain the dynamic reference. GTI  and AdaSwitcher  locate the target by integrating tracking and grounding results at each time step. Their reliance on pre-defined threshold can lead to error accumulation. JointNLT  incorporates temporal information in the form of a temporal query during the prediction stage. Since the length of the query tokens is much shorter than that of the static prompt tokens, it indicates that static prompts still dominate the tracking process. Differing from them, we depart from human memory mechanisms to utilize temporal information. Building upon initial static prompts, we inject dynamic features by incorporating memory information, which not only avoids the error accumulation but also generates prompts adapted to the dynamic changes of the target.

By treating temporal information as memory, some trackers [30; 31; 32] have incorporated memory mechanism modeling. Extensive previous studies confirm that memory modeling is a viable approach, which is the paradigm our work follows. Distinguishing our work from existing research, to our knowledge, MemVLT is the first to apply CLS theory to tracker design. Recent research in CLS theory [33; 23] underscores the importance of the interaction between long and short-term memories. Motivated by this insight, we develop the _memory interaction module_ to generate adaptive prompts. In contrast, existing approaches, such as DecoupletNLL , focus solely on modeling long and short-term memories but overlook the interaction process. In addition to memory interaction, we propose the _section-top_ memory storage method, which is inspired by the system consolidation process [23; 24] within the CLS theory. Compared to the _sliding window_ storage method commonly used by existing trackers [14; 32], it demonstrates more effective tracking performance (see Sec. 4.3).

### Prompt Learning

In the natural language processing field, prompt learning  refers to the automatic learning of instructions in the form of sentences, thereby enabling better task understanding. Considering the significant advantages of this approach in enhancing model adaptability, recent studies have extended it to vision-language tasks [35; 36]. CoOp  efficiently fine-tunes CLIP  for few-shot transfer by constructing language branch inputs using a set of learnable vectors. Bahng  performs prompt tuning on CLIP by prompting on the vision branch. In this work, we exploit the core idea of prompt learning by introducing learnable vectors to model the memory information. These vectors are used to adjust the initial static prompts, making them adaptive to the dynamic changes of the target.

Recently, several vision-only trackers [38; 39; 40] have attempted to model temporal information using learnable vectors. These vectors, also referred to as temporal queries, are utilized to capture global information at each moment and guide the subsequent tracking process. What sets us apart is that, (**i**) we focus on the vision-language multimodal scenario, not only modeling temporal queries but also emphasizing their adjustment to static prompts to comprehensively leverage temporal information. (**ii**) We design a novel multimodal query storage method called _section-top_ to enhance the existing _sliding window_ storage approach.

## 3 Methodology

### Overview

The framework of MemVLT is depicted in Fig. 2 (a). Given two static prompts (text description and template patch) and the search image at a general time step (\(t>0\)), the text and vision encoders first embed them into specific feature spaces, denoted as \(f_{l}^{t}\), \(f_{z}^{t}\), and \(f_{x}^{t}\), respectively. Concurrently, we obtain the global visual and textual semantic representation tokens (_i.e_., \(f_{gv}^{t}\) and \(f_{gl}^{t}\)). Subsequently, these encoded features, along with the memory information \(M^{t-1}\) obtained from the memory storage module (MSM), are fed into the memory interaction module (MIM). Through the mutual interaction of long-term and short-term memories, we obtain the latest visual and textual short-term memories (_i.e_., \(m_{v}^{t}\) and \(m_{l}^{t}\)), as well as the adaptive prompts (_i.e_., \(f_{av}^{t}\) and \(f_{al}^{t}\)). These adaptive prompts then undergo feature fusion with the search feature, yielding the target-related feature \(f_{r}^{t}\). Next, \(f_{r}^{t}\) is fed into the prediction head to obtain the tracking result and its corresponding confidence score \(p_{c}^{t}\). Finally, \(p_{c}^{t}\) and the short-term memory are used to update the MSM, providing memory information \(M^{t}\) for tracking in the next time step (\(t+1\)). In the following sections, we will provide detailed introductions to each module and the dimensions of the above variables.

### Input Encoder

**Vision Encoder.** For the visual input of the search image and template patch, we adopt the encoding paradigm of the one-stream network , implementing it with the HiViT [42; 39; 40]. Specifically, the template patch \(z^{3 H_{z} W_{z}}\) and search image \(x_{t}^{3 H_{x} W_{z}}\) are first projected into the feature space and flattened to produce token embeddings. Additionally, we introduce a [CLS] token1 to capture global semantic feature . This token is concatenated with the template-search tokens and then fed into transformer layers for feature modeling. Finally, we obtain the search feature \(f_{x}^{t}^{N_{x} D}\), template feature \(f_{z}^{t}^{N_{x} D}\), and global visual feature \(f_{gv}^{t}^{1 D}\).

**Text Encoder.** Since being proposed, the BETR  series models have been widely used for text representation. Therefore, we utilize RoBERTa , a classic pre-trained model, as our text encoder. Specifically, for a given input sentence, we tokenize it into a sequence of text tokens. The token sequences then are fed into the RoBERTa to extract the text embedding feature \(f_{l}^{t}^{N_{l} D}\). Additionally, we perform pooling on \(f_{l}^{t}\) to obtain the sentence-level global feature \(f_{gl}^{t}^{1 D}\).

### Memory Interaction Module

Due to the constraints of initial static visual-textual prompts, the \(f_{l}^{t}\) and \(f_{z}^{t}\) derived from them face challenges in offering consistent references for dynamically changing targets . To alleviate this limitation, MIM attempts to leverage the long-term memory \(M^{t-1}\) stored in MSM to inject dynamic

Figure 2: **(a) Framework of our proposed MemVLT. Given a language description and a template patch as references, MemVLT tracks the target in search images at time \(t\). The input is first encoded using _text_ and _vision encoders_. Subsequently, the _memory interaction module_ processes static prompt features based on stored memory, generating adaptive prompts. After incorporating these prompts, the search features are fed into the _prediction head_ to obtain the tracking results. Additionally, the _memory storage module_ utilizes processed data to represent and store memory information. (b) Diagram of memory interaction. To illustrate the process of memory interaction, we organize the memory information from the perspectives of long-term and short-term memories. Through the interaction between these memories, adaptive visual and textual prompts are obtained.**

feature reflecting target variations into the static prompts, thereby better guiding the tracking. As shown in Fig. 2 (a), under the influence of long-term memories (_i.e._, \(M_{l}^{t-1}\) and \(M_{v}^{t-1}\)), we first integrate with the current features to acquire the latest short-term memories (_i.e._, \(m_{l}^{t}\) and \(m_{v}^{t}\)). Then, through the interaction between the memory information \(m^{t}\) and the initial prompts, we obtain adaptive prompts and fuse them with the search features \(f_{x}^{t}\), yielding target-related features \(f_{r}^{t}\).

Corresponding to the two modal prompts of given cues, we utilize both modalities to represent memory. Before explaining the specific construction of memory, we reiterate the short-term and long-term memory information that our model focuses on, as shown in Fig. 2 (b). For the long-term memory provided by MSM, denoted as \(M^{t}=\{m^{i}\}_{i=1}^{L_{m}}\), it consists of \(L_{m}\) short-term memory units \(m^{i}=(m_{v}^{i},m_{l}^{i})\). Here, \(m_{v}^{i}^{1 D}\) and \(m_{l}^{i}^{1 D}\) represent the \(i\)-th short-term visual and textual memory, respectively. Additionally, we also consider the initial given prompts as a form of long-term memory due to their role throughout the tracking process.

#### 3.3.1 The Acquisition of the Short-Term Memory

To begin with, we introduce the generation of short-term memory under the influence of long-term memory. Initially, we concatenate the long-term visual memory \(\{m_{v}^{i}\}_{i=1}^{L_{m}}\) and textual memory \(\{m_{l}^{i}\}_{i=1}^{L_{m}}\) with the current global semantic features \(f_{gv}^{t}\) and \(f_{gl}^{t}\) respectively. This process yields more comprehensive visual and textual memory information, \(H_{v}^{t-1}^{(L_{m}+1) D}\) and \(H_{l}^{t-1}^{(L_{m}+1) D}\).

\[H_{v}^{t-1}=[^{*}M_{v}^{t-1};f_{gv}^{t}]=[m_{v}^{1};;m_{v}^{L_{m}};f_{gv }^{t}],\] (1)

\[H_{l}^{t-1}=[^{*}M_{l}^{t-1};f_{gl}^{t}]=[m_{l}^{1};;m_{l}^{L_{m}};f_{gl} ^{t}].\] (2)

where \({}^{*}\) denotes extracting all elements in the set, and [;] indicates concatenation along the first dimension. Following this, we introduce the memory query to associate long-term memory with the current information, enabling the generated short-term memory to consider both historical and current features simultaneously.

Considering the remarkable capability of the transformer network in feature interaction , we design the short-term memory generation (SMG) layer by modifying it. In each SMG layer, the memory query sequentially interacts with long-term memory information and corresponding modality features to generate short-term memory. Taking the visual branch as an example, the computational process of the visual query \(q_{v}^{0}^{1 D}\) is as follows:

\[q_{v^{}}^{k}=Norm(q_{v}^{k}+_{CA}(q_{v}^{k},H_{v}^{t-1})),\] (3)

\[q_{v^{}}^{k}=Norm(q_{v^{}}^{k}+_{CA}(q_{v^{} }^{k},[f_{z}^{t};f_{x}^{t}])),\] (4)

\[q_{v}^{k+1}=Norm(q_{v^{}}^{k}+FFN(q_{v^{}}^{k})).\] (5)

Here, \(_{CA}(,)\) denotes the cross-attention operation where the first element serves as \(Q\) and the second element serves to obtain \(K\) and \(V\). \(Norm\) represents the layer normalization operation and \(FFN\) denotes the feed-forward network. \(q_{v}^{k}\) denotes the query after being processed by the \(k\)-th layer. For brevity, we omit the positional encoding.

After passing through \(L_{v}\) stacked SMG layers, we obtain the visual short-term memory \(m_{v}^{t}=q_{v}^{L_{v}}\). Similarly, we utilize the textual query \(q_{l}^{0}^{1 D}\) to obtain the textual short-term memory \(m_{l}^{t}=q_{v}^{L_{l}}\).

\[q_{l^{}}^{k}=Norm(q_{l}^{k}+_{CA}(q_{l}^{k},H_{l}^{t-1})),\] (6)

\[q_{l^{}}^{k}=Norm(q_{l^{}}^{k}+_{CA}(q_{l^{}}^{k},[ f_{l}^{t};f_{x}^{t}])),\] (7)

\[q_{l}^{k+1}=Norm(q_{l^{}}^{k}+FFN(q_{l^{}}^{k})).\] (8)

#### 3.3.2 The Generation and Fusion of the Adaptive Prompts

Based on the acquired short-term memory (_i.e._, \(m^{t}=(m_{v}^{t},m_{l}^{t})\)), on one hand, we feed it into MSM to update the long-term memory (see Sec. 3.4). On the other hand, we utilize it to modulate the long-term memory represented by the initial visual-textual prompts, enabling them to adapt to the variations of the target. For the textual branch, we first utilize \(m_{l}^{t}\) to modulate the initial textual feature \(f_{l}^{t}\), then use the adjusted textual feature to guide the search feature \(f_{x}^{t}\).

\[f_{al}^{t}=Trans_{Dec}(f_{l}^{t},m_{l}^{t}),\] (9)

\[f_{xl}^{t}=Trans_{Dec}(f_{x}^{t},f_{al}^{t}).\] (10)

Where \(Trans_{Dec}\) denotes the vanilla transformer decoder layer  (see Sec. A.2 for detailed computation process). \(f_{xl}^{t}\) represents the search features fused with the adaptive textual prompts \(f_{al}^{t}\).

For the visual branch, we adopt a similar approach. As shown in Eq.11 and Eq.12, we ultimately obtain the search feature \(f_{xlv}^{t}\) integrated with adaptive visual and textual prompts, simplified as \(f_{r}^{t}\). We treat \(f_{r}^{t}\) as the target-related features fed into the prediction head.

\[f_{av}^{t}=Trans_{Dec}(f_{z}^{t},m_{v}^{t}),\] (11)

\[f_{r}^{t}=f_{xvl}^{t}=Trans_{Dec}(f_{x}^{t},f_{av}^{t}).\] (12)

### Memory Storage Module

In this section, we will introduce the construction of long-term memory \(M^{t}\). Given a video sequence of length \(T\), MIM generates a short-term memory \(m^{t}\) at each time step. Typically, due to the computational burden of integrating all short-term memories, \(L_{m}\) is much smaller than \(T\). Therefore, the key to long-term memory storage is to design a short-term memory selection mechanism.

Prior trackers, _e.g_., JointNLT and AQATrack, commonly use the _sliding window_ approach to store temporal information, which can be considered a form of long-term memory. Specifically, when \(t>L_{m}\), short-term memories are selected from the most recent \(L_{m}\) frames (_i.e_., from \(t-L_{m}\) to \(t-1\)) for storage. While achieving some effectiveness, the redundancy of video frames leads to redundant memories being stored, and it can only consider a limited temporal range. The CLS theory refers to the process of integrating short-term memory into long-term memory as system consolidation . Relevant studies [33; 23] indicate the long-term memory system primarily stores short-term memory conducive to generalization. We adhere to this principle to propose a novel long-term memory storage method called _section-top_. It first uniformly divides past time intervals into \(L_{m}\) sections and then stores the most representative short-term memory within each section.

To establish a short-term memory selection criterion, we design a confidence prediction module to obtain the confidence score \(p_{c}^{t}\) corresponding to the tracking result, which will be introduced in Sec. 3.5. Intuitively, a higher confidence score suggests that the current tracking result is more conducive for subsequent tracking and should thus be stored. The thorough storage process is provided in Sec. A.3. Compared to the _sliding window_, this method can consider a longer temporal range. Additionally, the stored memories are not adjacent to each other, which reduces redundancy.

### Prediction Head and Loss

Based on the target-related search feature \(f_{r}^{t}^{N_{s} D}\), the prediction head is used to predict the final bounding box \(b^{t}\) and its corresponding confidence score \(p_{c}^{t}\). We employ a classic CNN-based tracking head [41; 40]. First, \(f_{r}^{t}\) is transformed into a 2D spatial feature map. Subsequently, after passing through the stacked Conv-BN-ReLU layers, we obtain a classification score map \(P^{1 H_{s} W_{s}}\), the size of the bounding box \(B^{2 H_{s} W_{s}}\), and the offset size \(O^{2 H_{s} W_{s}}\). Based on these features, we predict the centroid position and scale of the target, yielding the predicted bounding box \(b^{t}\). Additionally, we employ an additional CNN-based branch to predict \(p_{c}^{t}\).

For the \(b^{t}\), we employ the focal loss \(L_{cls}\), \(L_{1}\) loss, and the generalized IoU loss \(L_{iou}\) for supervision, which are widely used in tracker design. Regarding the confidence score \(p_{c}^{t}\), we first calculate the IoU value between the tracking result and the ground truth, and utilize the \(L_{2}\) loss between IoU and \(p_{c}^{t}\) for supervision. The overall loss function is formulated as follows:

\[L_{all}=_{L_{cls}}L_{cls}+_{iou}L_{iou}+_{L_{1}}L_{1}+ _{L_{2}}L_{2},\] (13)

where \(_{L_{cls}}=1\), \(_{iou}=2\), \(_{L_{1}}=5\) and \(_{L_{2}}=1\) are the regularization parameters.

## 4 Experiments

### Implementation Details

We use RoBERTa-Base  as our text encoder and HiViT-Base [42; 39; 40] as our vision encoder, with the token dimension \(D\) set to 512. The sizes of template patches and search images are \(192 192\) and \(384 384\), respectively. For the acquisition of short-term memory, both the visual and textual branches consist of three SMG layers. For the generation and fusion of adaptive prompts, all \(Trans_{Dec}\) operations are conducted using a single transformer decoder layer. Additionally, in the memory storage module, the default length for long-term memory is set to eight.

We use the training splits of LaSOT , TNL2K , RefCOCOg , and OTB99-Lang  to train our model. Each training sample consists of a text description, along with one template patch and eight search frames from the same video sequence. Utilizing the text description and template patch as prompts, we iteratively train the model by selecting one search image at a time. We employ the AdamW to optimize the network parameters and conduct a total of 200 training epochs. 20,000 image pairs are randomly sampled in each epoch. The model is trained on a server with four A5000 GPUs and tested on an RTX-3090 GPU. The tracking speed is about 32 FPS.

### Comparison with State-of-the-art

We evaluate MemVLT on four benchmarks, including MGIT , TNL2K , LaSOT  and LaSOT\({}_{ext}\). MemVLT is compared with existing state-of-the-art (SOTA) VLTs, which share the similar task setting and training datasets configuration to ensure a fair comparison.

**MGIT.** MGIT is a novel large-scale benchmark [2; 5] specifically tailored for the VLT task. Each sequence contains complex spatio-temporal causal relationships and is annotated with language descriptions at three levels of granularity: action, activity, and story . As shown in Tab. 1, MemVLT demonstrates superior performance compared to other VLTs at the action granularity. Particularly, MemVLT excels over the SOTA tracker JointNLT , surpassing it by 8.4%, 2.7%, and 19.2% in area under the curve (AUC), normalized precision (PNorm), and precision score (P), respectively. Although JointNLT is equipped with a temporal module, this temporal information does not interact with the initial prompts. In other words, the initial static prompts still dominate the tracking process. These results highlight that the utilization of adaptive prompts plays a crucial role in complex scenarios. Additionally, our model also achieves optimal performance under the activity and story text settings (see Tab. A1).

    &  &  &  & _{ext}\)} \\   & AUC & PNorm & P & AUC & PNorm & P & AUC & PNorm & P & AUC & PNorm & P \\  Wang  & - & - & - & - & - & - & 27.7 & - & 30.4 & - & - & - \\ Feng  & - & - & - & 25.0 & 34.0 & 27.0 & 50.0 & - & 56.0 & - & - & - \\ Feng  & - & - & - & 25.0 & 33.0 & 27.0 & 35.0 & - & 35.0 & - & - & - \\ GTI  & - & - & - & - & - & - & 47.8 & - & 47.6 & - & - & - \\ TNL2K-II  & - & - & - & 42.0 & 50.0 & 42.0 & 51.3 & - & 55.4 & - & - & - \\ SNLT  & 3.6 & 22.6 & 0.4 & - & - & - & 54.0 & 63.6 & 57.4 & - & - & - \\ Li  & - & - & - & 44.0 & 52.0 & 45.0 & 53.0 & 56.0 & - & - & - & - \\ VLTTT  & 46.8 & 60.2 & 31.8 & 54.7 & 71.8 & 55.3 & 67.3 & 80.2 & 71.5 & 48.4 & 59.9 & 54.3 \\ TransVLT  & - & - & - & 56.0 & 61.7 & - & 66.4 & - & 70.8 & - & - & - \\ JointNLT  & 61.0 & 78.6 & 44.5 & 56.9 & 73.6 & 58.1 & 60.4 & 69.4 & 63.6 & - & - & - \\ TransNLT  & - & - & - & 57.0 & 75.0 & 57.0 & 60.0 & - & 63.0 & - & - & \\ DecoupleTNL  & - & - & - & 56.7 & - & 56.0 & 71.2 & - & 75.3 & - & - & - \\ MMTrack  & - & - & - & 58.6 & 75.2 & 59.4 & 70.0 & 82.3 & 75.7 & 49.4 & 59.9 & 55.3 \\ QueryNLT  & - & - & - & 56.9 & 73.6 & 58.1 & 59.9 & 69.6 & 63.5 & - & - & - \\
**Ours** & 69.4 & 81.3 & 63.7 & 63.3 & 80.9 & 67.4 & 72.9 & 85.7 & 80.5 & 52.1 & 63.3 & 59.8 \\   

Table 1: Comparison with state-of-the-arts on four popular benchmarks: MGIT , TNL2K , LaSOT  and LaSOT\({}_{ext}\). The best two results are highlighted in red and blue, respectively.

[MISSING_PAGE_FAIL:8]

[MISSING_PAGE_FAIL:9]

Fig. 3 (a)-(c) depict the variations of heatmaps over the search region during the forward process. Through the integration of adaptive prompts, the model ultimately directs its focus towards the tracking target. Compared to merely fusing initial fixed multi-modal prompts (Fig. 3 (d)), MemVLT demonstrates improved capability in scenarios where the target state deviates from the given static prompts.

Taking the "advSamp_INF_bus6" sequence from TNL2K as an example, we showcase the model's confidence prediction scores against the actual IoU values in Fig. 4. It can be observed that their variations align closely, indicating the effectiveness of our confidence prediction module. This facilitates the utilization of the confidence prediction score as criteria for selecting short-term memory.

As shown in Fig. 5, we visualize the tracking results of our model and the previous two SOTA models on three challenging sequences from TNL2K . In these sequences, the scenes contain distractors, and the state of the target undergoes significant changes. It is evident that our model exhibits greater robustness  compared to others. This validates that our adaptive prompts contribute to addressing these challenges, further demonstrating the efficacy of our proposed model.

## 5 Conclusion

We propose a novel vision-language tracker, MemVLT, which models memory mechanisms to provide adaptive multimodal prompts for tracking guidance. Drawing from the Complementary Learning Systems theory, we emphasize the importance of storing and interacting between short-term and long-term memories for generalized adaptation. Therefore, we incorporate memory storage and memory interaction modules. By comprehensively leveraging memory information to generate adaptive prompts, MemVLT provides consistent references for dynamically changing targets, thus achieving effective tracking performance. Extensive experiments demonstrate that our method achieves new state-of-the-art performance on four widely used benchmarks, showcasing its generalization ability across various video environments and linguistic annotation styles.

Limitations.Our proposed method leverages learnable queries to implicitly construct the relationship between historical target information and the current situation, resulting in short-term memory representations of the target. The notable results obtained demonstrate the effectiveness of this memory modeling mechanism. However, these memory representations lack explicit supervision, which diminishes their interpretability. To address this limitation, we believe that incorporating tracking result data (such as target and background information at various time steps) into the memory representation could be beneficial. This integration could enhance the comprehensiveness of the memory representations and facilitate the design of diverse loss functions for explicit supervision. We consider this approach a promising direction for our future research.