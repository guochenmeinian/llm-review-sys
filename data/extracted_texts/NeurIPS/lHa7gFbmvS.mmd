# The CLIP Model is Secretly an Image-to-Prompt Converter

Yuxuan Ding

School of Electronic Engineering

Xidian University

Xi'an 710071, China

yxding@stu.xidian.edu.cn

&Chunna Tian

School of Electronic Engineering

Xidian University

Xi'an 710071, China

chnatian@xidian.edu.cn

This work was done while Yuxuan Ding was visiting The University of Adelaide as a visiting researcher.

Haoxuan Ding

Unmanned System Research Institute

Northwestern Polytechnical University

Xi'an 710072, China

haoxuan.ding@mail.nwpu.edu.cn

&Lingqiao Liu

Australian Institute for Machine Learning

The University of Adelaide

Adelaide 5005, Australia

lingqiao.liu@adelaide.edu.au

This work was done while Yuxuan Ding was visiting The University of Adelaide as a visiting researcher.Corresponding author.

###### Abstract

The Stable Diffusion model is a prominent text-to-image generation model that relies on a text prompt as its input, which is encoded using the Contrastive Language-Image Pre-Training (CLIP). However, text prompts have limitations when it comes to incorporating implicit information from reference images. Existing methods have attempted to address this limitation by employing expensive training procedures involving millions of training samples for image-to-image generation. In contrast, this paper demonstrates that the CLIP model, as utilized in Stable Diffusion, inherently possesses the ability to instantaneously convert images into text prompts. Such an image-to-prompt conversion can be achieved by utilizing a linear projection matrix that is calculated in a closed form. Moreover, the paper showcases that this capability can be further enhanced by either utilizing a small amount of similar-domain training data (approximately 100 images) or incorporating several online training steps (around 30 iterations) on the reference images. By leveraging these approaches, the proposed method offers a simple and flexible solution to bridge the gap between images and text prompts. This methodology can be applied to various tasks such as image variation and image editing, facilitating more effective and seamless interaction between images and textual prompts.

## 1 Introduction

In recent years, there has been a surge of interest in vision-and-language research, particularly in the field of text-to-image generation. Prominent models in this domain include autoregression models like DALL-E  and Make-A-Scene , as well as diffusion models like DALL-E 2  and Stable Diffusion . These models have revolutionized the quality of generated images. They leverage text prompts to synthesize images depicting various objects and scenes that align with the given text. Among these models, Stable Diffusion  stands out as a significant open-source model. It serves as a foundation for many recent works, including image generation , image editing , and more.

However, text prompts have limitations when it comes to incorporating unspeakable information from reference images. It becomes challenging to generate a perfect and detailed prompt when users want to synthesize images related to a picture they have seen. Image variation techniques aim to address this limitation by enabling users to generate multiple variations of an input image, without relying on complex prompts. As illustrated in Fig. 2, the generated variations closely resemble the reference image, often sharing the same scene or objects but with distinct details.

Stable Diffusion Reimagine (SD-R) 3 is a recently proposed image variation algorithm. It achieves this goal by retraining Stable Diffusion , where the text encoder is replaced with an image encoder to adapt the model for image input. The model is trained using millions of images and over 200,000 GPU-hours, enabling it to effectively generate image variations based on reference images.

In this paper, we make a significant discovery that allows a more cost-effective image-to-prompt conversion approach. We find the CLIP model , as utilized in Stable Diffusion, can be repurposed as an effective image-to-prompt converter. This converter can be directly employed or served as a valuable initialization for a data-efficient fine-tuning process. As a result, the expenses associated with constructing or customizing an image-to-prompt converter can be substantially reduced.

More specifically, our method is built upon a surprising discovery: the control of image generation through text is primarily influenced by the embedding of the end-of-sentence (EOS) token. We found that masking all word tokens, except for the start and end tokens, does not adversely affect the quality of image generation, as illustrated in Figure 2. Simultaneously, during CLIP training, the projection of the end-token embedding is trained to align with the visual embedding. This inherent relationship enables us to derive a closed-form projection matrix that converts visual embedding into an embedding that is capable of controlling the generation of Stable Diffusion . We call this method Stable Diffusion Image-to-Prompt Conversion (SD-IPC).

In addition, we introduce two methods to enhance the quality and flexibility of image-to-prompt conversion. The first approach involves parameter-efficient tuning using a small amount of data, consisting of only 100 images and requiring just 1 GPU-hour. This method encourages the model to better preserve image information and enables practitioners to control the specific content they want to retain when generating new images. The second approach involves customizing the model on reference images using a few iterations, ensuring that the generated images are closer to specific concepts. While this approach has been explored in previous research, we demonstrate that with the advantageous initialization provided by SD-IPC, the online fine-tuning requires significantly fewer iterations to achieve desirable results.

## 2 Background and Related Works

### Diffusion Model

Firstly, we present a brief overview of the Stable Diffusion , which serves as our underlying model. Diffusion models (DMs) [16; 17; 18; 19] belong to a class of latent variable models. In DMs, there exist two Markov chains known as the _diffusion process_ and the _reverse process_, both having a fixed length \(T\). The diffusion process progressively introduces Gaussian noise to the original data (\(_{0}\)) until the signal becomes corrupted (\(_{T}\)). During DMs training, the reverse process is learned, which operates in the opposite direction of the diffusion process. The reverse process can be viewed as a denoising procedure, moving from \(_{t}\) to \(_{t-1}\) at each step. After multiple denoising steps, the model obtains instances that closely resemble the real data.

Stable Diffusion  is built on the Latent Diffusion Model (LDM) . LDM  proposed to do diffusion process in a latent space rather than the usual pixel space, significantly reducing the training and inference cost of the diffusion model. The authors proposed to utilize a VAE compression to get the latent code \(_{0}\), which is \(_{0}\) above. Diffusion process will build on the latents. A U-Net architecture  with timestep and text conditions would do the reverse. The text prompt is injected into the model with cross-attention layers. We denote \(_{}(_{t},c_{txt}(p_{txt}),t)\) as the output of the U-Net, which is the predicted denoising result. \(p_{txt}\) is the textual prompt and \(c_{txt}(p_{txt})\) is the prompt embedding from the text encoder. \(t\) is the timestep. The training objective of DMs is as followed:

\[_{,,p_{txt},t}[\|-_{ }(_{t},c_{txt}(p_{txt}),t)\|_{2}^{2} ],\] (1)

where \((,)\) is the noise used to corrupt clean latent variables. During the generation, the latent \(_{t}\), which starts at a random Gaussian noise \(_{T}\), will recursively go through a denoising operation until \(_{0}\) is sampled. Finally, \(_{0}\) is reconstructed to an image by the VAE.

### CLIP Model

The CLIP model  has garnered significant acclaim as a groundbreaking zero-shot model in recent years. Its training process demands optimizing a contrastive loss function using extensive 400-million pairs of images and corresponding text descriptions. Through the meticulous training, the model has been able to achieve unparalleled capabilities in zero-shot classification and image-text retrieval.

The model comprises an image encoder \(_{i}()\), a text encoder \(_{t}()\), a visual projection layer \(W_{i}\), and a textual projection layer \(W_{t}\). The image encoder encodes an input image \(x\) into a visual embedding \(_{img}\) derived from a special class-token. By applying the visual projection layer, the embedding is projected into the CLIP visual embedding \(_{img}^{c}\). Similarly, the text encoder processes the input text, yielding a sequence of output embeddings \(_{txt}\) for each text token and a start token and end-of-sentence (EOS) token. The embedding of the EOS token \(_{txt}^{t,(cos)}\), where \(t\) denotes the length of the sentence, is projected into the CLIP textual embedding \(_{txt}^{c}\) through \(W_{t}\). Formally,

\[_{img}=_{i}(x),\ \ \ _{img}^{c}=W_{i} _{img},\] (2) \[_{txt}=_{t}(s),\ \ \ _{txt}^{c}=W_{t} _{txt}^{t,(cos)}.\] (3)

The training objective of CLIP is to maximize the cosine similarity between \(_{txt}^{c}\) and \(_{img}^{c}\) for matched sentence-image pair while minimizing this similarity for unmatched pairs. For the simplicity of discussion, we denote the space spanned by \(_{txt}\) as \(\)-space and the space spanned by \(_{}^{c}\) as \(\)-space.

The CLIP text encoder  is directly used in Stable Diffusion to encode text prompts. It encodes a text prompt as a sequence of embeddings:

\[_{txt}:=[_{txt}^{0,(cos)},_{txt }^{1,w_{0}},...,_{txt}^{t,(cos)},...,_{txt}^{ 76,(cos)}]\] (4)

where \(_{txt}^{0,(sos)}\), \(_{txt}^{i,w}\) and \(_{txt}^{t,(cos)}\) denote the embeddings corresponding to the start-token, the \(i\)-th word token and end-token, respectively. From \(_{txt}^{t+1,(cos)}\) to \(_{txt}^{76,(cos)}\) are padded tokens.

### Image Variation & Customized Generation

Image Variation.Image variation aims to generate images similar to the reference image but not identical. SD-R  is proposed to address this problem, which builds upon the Stable-unCLIP model4. The authors fine-tuned the Stable Diffusion model  to align with the CLIP visual embedding. In SD-R , images can be directly input into the diffusion model through CLIP image encoder. Since the original Stable Diffusion is conditioned on text only, an expensive fine-tuning is required to accommodate this new input. The process took 200,000 GPU-hours on NVIDIA A100-40GB GPU while our approach only requires 1 GPU-hour on NVIDIA A5000-24GB GPU5.

**Customized Generation.** Recent works such as DreamBooth , Textual Inversion , and Custom Diffusion  focus on learning a special text prompt to feature specific objects or persons from the reference images. For instance, given several photos of a particular cat, these methods use a special-token "\( s\) cat" to represent the concept and incorporate it with the text prompt. DreamBooth  and Custom Diffusion  also perform simultaneous fine-tuning of diffusion model parameters. However, the fine-tuning process is still somewhat time-consuming, with Custom Diffusion  requiring nearly 6 minutes on 2 NVIDIA A100 GPUs. In contrast, our fast update SD-IPC only needs 1 minute on 2 A5000 GPUs.

**Image Editing.** Stable Diffusion  is commonly used for image editing tasks. Prompt-to-Prompt  and Plug-and-Play  utilize attention map as a bridge to enable concept and style manipulation. Null-Text Inversion  and Pix2Pix-Zero  relies on inversion-based methods. InstructPix2Pix  creates a dataset of paired edited images and fine-tunes Stable Diffusion  as an editing model. It's important to highlight that while our primary focus in developing this method was to enhance image variation, it can also be employed to generate images based on prompts that combine both textual instructions and accompanying images. Notably, unlike existing approaches that frequently reproduce the layout of the original image in the generated output, our method operates without being confined to replicating the exact layout of the source image.

## 3 Methodology

### Image-to-Prompt Conversion via Projecting CLIP embedding

By design, the image generation process in the stable diffusion model should be influenced by embeddings of all tokens in a prompt, like Eq. (4). Interestingly, we have discovered that masking word tokens, by setting their attention weights to 0 except for the start-/end-token, does not have a negative impact on the quality of generated images. This finding is visually illustrated in Figure 2.

On another note, the training objective of CLIP  is to match the embeddings \(^{c}_{img}\) and \(^{c}_{txt}\), with \(^{c}_{txt}\) being essentially a projection of \(^{t, eos}_{txt}\). This inherent relationship, coupled with the aforementioned observation, leads us to establish a connection between \(^{c}_{img}\) and \(^{t, eos}_{txt}\), effectively converting the visual embedding to a prompt embedding.

Formally, we assume that after training, CLIP model can induce high cosine similarity between the \(^{c}_{img}\) and \(_{txt}\) and we can further make the following approximation:

\[^{c}_{img}}{\|^{c}_{img}\|}^ {c}_{txt}}{\|^{c}_{txt}\|},\ \ \ \ ^{c}_{txt}=W_{t}^{t, eos }_{txt}.\] (5)

By using Moore-Penrose pseudo-inverse  on \(W_{t}\)6, we obtain an estimate of \(^{t, eos}_{txt}\) from \(^{c}_{img}\):

\[^{t, eos}_{txt}^{c}_{txt}\|} {\|^{c}_{img}\|}W_{t}^{t}^{c}_{img}:=^{cnwrt}_{txt },\ \ ,\ W_{t}^{+}=W_{t}^{}W_{t}^{-1}W_{t}^{},\] (6)

where we empirically observe \(\|^{c}_{txt}\|\) can be well approximated by a constant, e.g., \(\|^{c}_{txt}\|=27\) and \(W_{t}\) can be obtained from the pretrained CLIP model . We denote the converted embedding as \(^{cnwrt}_{txt}\) and use it to assemble a pseudo-prompt sequence with the following format:

\[}_{txt}:=[^{0, eos}_{txt}, ^{1,cnwrt}_{txt},...,^{76,cnwrt}_{txt}],\] (7)

where \(^{1,cnwrt}_{txt}==^{76,cnwrt}_{txt}=^{cnwrt}_ {txt}\). In other words, we replace all word-tokens, pad-tokens and end-token in Eq. (4) with the converted \(^{cnwrt}_{txt}\), based on the fact that \(^{cnwrt}_{txt}\) is an approximation of \(^{t, eos}_{txt}\) and masking word-tokens does not influence the generation7.

This approximation allows immediate conversion of an image to a text prompt by directly mapping it to an (approximately) equivalent prompt. **We refer to this method as Stable Diffusion Image-to-Prompt Conversion (SD-IPC).** Experimental results in Fig. 3 demonstrate that SD-IPC effectively captures the semantic information present in the reference image and enables image variation.

Furthermore, we have identified a simple yet effective approach to combine both the text prompt and the converted image prompt within our framework. To achieve this, we perform a weighted average of the two embeddings. Formally, the process can be described as follows:

\[^{comb}_{txt}=^{cnvrt}_{txt}+^{t,( cos)}_{txt},\ \ \ }^{edit}_{txt}=[^{0, cos }_{txt},^{1,w_{0}}_{txt},...,^{t,comb}_{txt},..., ^{76,comb}_{txt}],\] (8)

where \(^{i,comb}_{text}=^{comb}_{text}\) is the combined-token embedding and \(\) is a hyperparameter to control the expression of editing text. Notice that the editing word-token \(^{i,w}_{txt}\) are also in the embedding sequence. Conditioning on \(}^{edit}_{text}\) could generate images that match both the visual and textual conditions. We report some editing results in Appendix D.2.

### Fine-tuning with Image-to-Prompt Conversion

While the aforementioned SD-IPC method demonstrates reasonable performance, it still faces challenges when it comes to real-world applications due to two main reasons. Firstly, the conversion process in SD-IPC relies on approximations, which may not always yield optimal results. Secondly, determining the exact topic or theme of an image introduces ambiguity. As the saying goes, "an image is worth a thousand words", but precisely which words? The same reference image can be interpreted differently based on its objects, scenes, styles, or the identities of people depicted within. Therefore, it becomes crucial to have a method that allows control of the content we wish to preserve and convert into the prompt. To address these concerns and cater to the needs, we propose a partial fine-tuning approach for the CLIP converter derived from Sec. 3.1.

In proposed approach, we focus on fine-tuning two specific types of parameters. Firstly, we address the optimization of the projection matrix within the cross-attention layer of the U-Net in Stable Diffusion . This aspect aligns with the methodology employed in Custom Diffusion . Furthermore, we incorporate deep prompt tuning  into the transformer of the CLIP image encoder. Deep prompt tuning  introduces learnable tokens within all layers of the transformer while keeping the weights of other components fixed. More details can be found in Appendix A.

Figure 3: Image variation results on MSCOCO . SD w/ Text  is generation from the ground-truth text prompts that are not available for variation methods such as SD-R and SD-IPC. SD-IPC is our method, notice that SD-IPC does not need any training compared to SD-R .

The parameters can be learned by using the following loss:

\[_{,,x_{},t}[\|-_{ }(_{t},c_{img}(x_{}),t)\|^{2} ]+_{,,p_{},t}[\| -_{}(_{t},c_{txt}(p_{txt}),t)\|^{2} ],\] (9)

here the first term is \(_{cnvrt}\), which is fine-tuning with the image-to-prompt input, and the second term is \(_{text}\), which is the original text-to-image training loss, we utilize this as a regularization to keep the text-to-image generation. In the proposed approach, \(c_{img}()\) refers to the image-to-prompt conversion derived from SD-IPC. It encompasses the CLIP image transformer augmented with the newly-introduced learnable prompts in deep prompting and the fixed inverse matrix derived from Eq. (6). During tuning, the inverse projection matrix remains unchanged. \(_{t}\) represents the latent representation of the target image \(x_{}\) at time step \(t\). The objective function aims to encourage the image-to-prompt conversion to extract information from \(x_{}\) that facilitates the recovery of \(x_{}\). There are two possible choices for \(x_{}\): (1) \(x_{}\) can be selected to be the same as \(x_{}\). (2) \(x_{}\) and \(x_{}\) can be different images, but with a shared visual concept that we intend to extract as the prompt. This usually poses stronger supervision to encourage the converter to extract information related to the shared theme. The schematic representation of this scheme is illustrated in Appendix C.2.

We use images randomly sampled from ImageNet , CelebA-HQ , and Places365  dataset to encourage the model extract object, identity, and scene information, respectively. Experiments show that merely 100 images and 1 GPU-hour of training are sufficient for achieving satisfied results thanks to the good initialization provided by SD-IPC. **We call this approach SD-IPC-FT**, the results are shown in Fig. 4. Some editing examples are listed in Fig. 5, Fig. 6, and Appendix D.4.

### Fast Update for Customized Generation

Existing methods, such as DreamBooth  and Custom Diffusion , suggest that partially fine-tuning the model on given concept images before generation can be an effective way to synthesized images with customized visual concepts, _e.g._, people with the same identity. Our approach can also benefit from this scheme by performing such an online update with SD-IPC. This can be achieved by simply replacing the training images in SD-IPC-FT with reference images and use \(_{convrt}\) only. **We call this method SD-IPC-CT** (CT stands for customized concept tuning). Interestingly, we find that our method can generate customized images with much fewer updates. As a comparison, SD-IPC-CT only takes 30-iteration updates with around 1 minute on 2 A5000 GPUs while the Custom Diffusion  needs 250 iterations (6 minutes on 2 A100 GPUs). We report customized generation in Fig. 7.

Figure 4: Fine-tuned SD-IPC, denoted as SD-IPC-FT, can enhance the image-to-prompt conversion quality.

## 4 Experiments

### Training Details

**Datasets & Evaluations.** In previous discussion, we propose three different fine-tuning schemes, using ImageNet  for object understanding, CelebA-HQ  for portrait understanding, and Places365  for scene understanding. The specific training classes or identities we have selected for each dataset can be found in Appendix B. Each dataset includes 100 images, the test images are non-overlap with the training classes. In order to enable customized generation, we choose two objects and two identities as examples, each accompanied by five images. To assess the quality and semantic consistency of our generated outputs, we measure FID-Score  and CLIP-Score .

**Architecture & Hyperparameter.** We utilize Stable Diffusion v1.48 and CLIP ViT-L/149 models in this paper. We compare our method with the larger Stable-unCLIP-small model10 using CLIP ViT-H/14 and a 1,024-dimensional attention feature. Our method uses DDIM  for sampling, while

Figure 5: Image editing result with SD-IPC-FT trained with 100 images sampled from ImageNet . SD-IPC-FT shows better editing performance than that of SD-R .

Figure 6: Image editing result with SD-IPC-FT trained with 100 images sampled from CelebA-HQ . SD-IPC-FT shows better editing performance than that of SD-R .

Stable-unCLIP uses PNDM , both with 50 sampling steps. SD-IPC-FT is trained for 100, 50, and 100 epochs on ImageNet , CelebA-HQ , and Places365 , respectively. The learning rates for all datasets are \(1e\)-5 with cosine decay. Customized generation has a constant learning rate of \(5e\)-6 for 30-iteration updates. Training is conducted on 2 A5000 GPUs. The editing \(\) is set to 0.9.

### Image Variation Results

**SD-IPC.** We evaluate image variation on MSCOCO  using all 5,000 images in the 2017-split validation set. Fig. 3 compares text-based generation, SD-R , and our SD-IPC. Both SD-R 

Figure 8: Results of DreamBooth  benchmark, the training images are listed at top-left corner.

Figure 7: Customized generation examples. The images at left are training images, they are all from one concept or one identity. We compared our SD-IPC-CT with Custom Diffusion , notice that both results are trained by 5 reference images with merely 30 iterations.

[MISSING_PAGE_FAIL:9]

our inverse projection matrix. We train the FC models with the same training data as SD-IPC-FT. However, the results in Fig. 10 indicate SD-IPC-FC suffers from overfitting. SD-IPC-FC(I) slightly alleviates the overfitting but still gets inferior results, shown in Fig. 10. This highlights that our SD-IPC-FT benefits from the good initialization of SD-IPC and preserves knowledge in CLIP .

**Prompt Learning & U-Net Fine-tuning.** We perform quantitative tests on (text-edited) image variation for the comprehensive ablation studies following the testing in Sec. 4.2. For text-edited variation, we use the editing text as the prompt, such as "A [Class Name] with a mountain in the background.". We present the results of individual fine-tuning for two components: SD-IPC-FT (C) for CLIP and SD-IPC-FT (U) for the U-Net. Qualitative results are available in Fig. 10, while quantitative results are provided in Tab. 5 and Tab. 6. It demonstrates that fine-tuning each component contributes to model adaptation, with the best performance achieved when simultaneously fine-tuning both two parts. Some editing comparisons are in Appendix C.3.

Additionally, we investigate the influence of the editing parameter \(\) in Appendix C.1.

### Limitations & Feature Directions

While SD-IPC offers an alternative to SD-R , there are remaining challenges. Firstly, the editing text must be contextually appropriate, as using "on the beach" to edit a portrait may result in a person being on the beach but lacking facial features. Secondly, SD-IPC currently does not support multiple image inputs. Another future study is to extend our method to generate a sequence of images with consistency. Appendix E shows some potential of our method in this direction.

## 5 Conclusion

This paper reveals that the CLIP model  serves as an image-to-prompt converter, enabling image variation in text-to-image Stable Diffusion  without extensive training. This finding enhances our understanding of the CLIP embedding space, demonstrating that a simple inverse matrix can convert visual embeddings into textual prompts. Leveraging this image-to-prompt conversion, our SD-IPC methods achieve impressive image variation and editing capabilities, while also enabling fast adaptation for customized generation. Experimental results also show the potential of our method in more multi-modal tasks. We anticipate that this study will inspire future research exploring the image-to-prompt pathway in CLIP-based or LDM-based models.

  Method & DNIO & CLIP-I & CLIP-T \\  SD-IPC & 31.09 & 68.66 & 26.84 \\ SD-IPC-FT (C) & 29.10 & 67.03 & 27.99 \\ SD-IPC-FT (U) & 35.21 & 69.99 & 28.56 \\ SD-IPC-FT & **40.28** & **71.97** & **28.69** \\  

Table 6: Results of text-edited image variation with different fine-tuning settings.

  Method & DNIO & CLIP-I & CLIP-T \\  SD-IPC & 44.60 & 77.44 & 25.47 \\ SD-IPC-FT (C) & 49.11 & 76.51 & 25.82 \\ SD-IPC-FT (U) & 48.53 & 79.06 & **26.17** \\ SD-IPC-FT & **52.03** & **79.59** & 25.90 \\  

Table 5: Results of image variation with different fine-tuning settings.

Figure 10: Effectiveness of using Eq. 6 for SD-IPC-FT.

Figure 9: Image variation results of different fine-tuning settings. SD-IPC-FT (C) means only training CLIP prompts, SD-IPC-FT (U) means only training U-Net cross-attention layers, SD-IPC-FC (I) means initializing the FC-layer with the inverse matrix.

Acknowledgement

This work was partly supported by the China Scholarship Council under Grant 202006960047 and partly by the National Natural Science Foundation of China (No.62173265). Lingqiao Liu is supported by Centre of Augmented Reasoning.