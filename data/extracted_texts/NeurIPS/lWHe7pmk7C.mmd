# From Chaos to Clarity: 3DGS in the Dark

Zhihao Li Yufei Wang Alex Kot Bihan Wen

Department of EEE, Nanyang Technology University, Singapore

https://lizhihao6.github.io/Raw3DGS

Both authors contributed equally to this research.Corresponding author. Email: bihan.wen@ntu.edu.sg

###### Abstract

Novel view synthesis from raw images provides superior high dynamic range (HDR) information compared to reconstructions from low dynamic range RGB images. However, the inherent noise in unprocessed raw images compromises the accuracy of 3D scene representation. Our study reveals that 3D Gaussian Splatting (3DGS) is particularly susceptible to this noise, leading to numerous elongated Gaussian shapes that overfit the noise, thereby significantly degrading reconstruction quality and reducing inference speed, especially in scenarios with limited views. To address these issues, we introduce a novel self-supervised learning framework designed to reconstruct HDR 3DGS from a limited number of noisy raw images. This framework enhances 3DGS by integrating a noise extractor and employing a noise-robust reconstruction loss that leverages a noise distribution prior. Experimental results show that our method outperforms LDR/HDR 3DGS and previous state-of-the-art (SOTA) self-supervised and supervised pre-trained models in both reconstruction quality and inference speed on the RawNeRF dataset across a broad range of training views. Code can be found in https://lizhihao6.github.io/Raw3DGS.

## 1 Introduction

Novel view synthesis (NVS) is fundamental to 3D vision, with extensive applications in virtual and augmented reality (VR/AR) [16; 17], autonomous driving [18; 34], and 3D asset creation [22; 4; 20]. Neural Radiance Fields (NeRF)  have revolutionized this field by rendering colors through the accumulation of RGB values along sampling rays, employing an implicit MultiLayer Perceptron (MLP) representation. Typically, this method uses low dynamic range (LDR) RGB images processed by image signal processing (ISP) modules, leading to a significant loss of crucial scene details, especially in high-contrast areas like highlights and shadows, which can degrade performance in high dynamic range (HDR) environments such as tunnels, sunsets, or dimly lit scenes. Moreover, reliance on ISP-processed RGB images restricts post-capture color and tone adjustments, presenting significant challenges for photographers and modelers during post-production.

In contrast, raw images before ISP offer a higher dynamic range and preserve more scene information. Recent research has indicated that utilizing raw images can significantly enhance the performance of downstream computer vision tasks in complex lighting conditions  and offer greater flexibility in post-production adjustments [37; 5]. Building on this advantage, RawNeRF  first employed raw images as the optimization target in NeRF, achieving marked improvements over traditional RGB-based LDR NeRF approaches. However, RawNeRF's reliance on implicit 3D representation is computationally demanding, requiring up to 48 hours to train a single scene and about one minute to render a single view, which limits its practicality for real-time applications.

Very recently, the advance on 3D Gaussian Splatting (3DGS)  offers an explicit 3D representation that employs a set of learnable 3D Gaussian points to depict color, shape, and opacity, thereby enabling real-time novel view rendering. However, utilizing raw images directly as the optimization target in 3DGS can introduce significant artifacts and adversely affect rendering speed, especially in scenarios with limited training views--a common challenge in real-world applications, as depicted in Fig. 1. These challenges arise primarily from the inherent noise in raw images, which is more pronounced than in RGB images due to the absence of noise reduction and smoothing processes typically performed by ISPs. As demonstrated in Fig. 1(a), the presence of noise in raw images is an inevitable consequence of physical phenomena such as the photoelectric effect and hardware limitations like dark current leakage. Unlike NeRF, where the Multilayer Perceptron (MLP) acts as a low-frequency filter  to mitigate high-frequency noise, 3DGS tends to produce numerous thin, elongated Gaussians to represent noise, as seen in Fig. 0(c).

To address these challenges, we propose a novel self-supervised framework that jointly denoises and constructs HDR 3DGS representations within noisy raw images using a noise robust reconstruction loss. Specifically, our method utilizes a noise extractor to predict the underlying noise in raw images, constrained by a predefined noise model. Simultaneously, the 3DGS branch is optimized towards pseudo noise-free raw images. This dual-branch approach allows the noise extractor to accurately predict and separate noise from the raw images. Compared to using the standard RawNeRF loss function with conventional 3DGS, our approach significantly reduces noise artifacts in rendered views and enhances the rendering speed. Our contributions can be summarized as follows:

* We discover that noisy raw images significantly degrade the rendering quality and speed of 3DGS, especially in scenarios with limited training views. We provide a detailed analysis of how noise impacts the optimization of 3DGS, and we model its relationship with the number of training views and the noise distribution.
* We propose a novel self-supervised framework that incorporates a noise robust reconstruction loss. This framework leverages a physical-based noise model to jointly denoise and enhance the HDR representation of 3DGS within noisy raw images.
* Our method substantially outperforms conventional 3DGS methods that employ RawNeRF loss, along with both self-supervised and pre-trained supervised denoisers, in terms of rendering quality and processing speed across various training view counts.

Figure 1: Comparative analysis of 3DGS trained with clean raw images, denoted \(\), versus noisy raw images, denoted \(}\), across various training view counts \(N\). The clean raw images, captured in daylight, are selected from the RawNeRF dataset . The noisy raw images are generated from these clean images using the noise model from PMN  with calibrated camera noise parameters. (a) Training with noisy raw images results in decreased PSNR in the test views, with a widening performance gap as the number of training views is reduced. (b) The rendering speed (FPS) shows a similar trend to PSNR. (c) Test view visualizations show that training with noisy images causes 3DGS to produce numerous thin, flat Gaussian shapes, leading to visual artifacts and reduced FPS, especially with fewer training views.

Related work

### Neural Radiance Fields and 3D Gaussian Splatting

Recently, Neural Radiance Fields (NeRF)  have spearheaded a significant advancement in novel-view synthesis by reconstructing 3D scenes. NeRF models achieve scene representation by optimizing coordinate-based multi-layer perceptrons (MLPs) to estimate color and density values through differentiable volume rendering. Typically, NeRF utilizes tone-mapped low dynamic range (LDR) images as inputs. These images are processed by image signal processing (ISP), which, while reducing noise and smoothing details, also maps high dynamic range (HDR) to LDR, often clipping highlights and shadows. To counter these limitations, RawNeRF  modified NeRF with a scaling loss to directly train on linear raw images, thus preserving the scene's full dynamic range. However, like most previous NeRF-based methods, RawNeRF is computationally demanding, requiring up to 48 hours to train a single scene and about one minute to render a single view, which constrains its usability in real-time applications. To accelerate rendering, various methods have been explored, including space discretization [7; 8; 10; 26; 29; 33; 35], codebooks , and hash tables . Yet, these approaches still require a substantial number of queries to render a single pixel, rendering them unsuitable for real-time applications. More recently, 3D Gaussian Splatting (3DGS)  introduced a novel approach by explicitly representing scenes with learnable 3D Gaussians. Utilizing differentiable splatting and tile-based rasterization, 3DGS enables real-time novel view rendering. However, the initial 3DGS models did not achieve rendering quality comparable to NeRF. To address this, Scaffold-GS  introduces an anchor-level feature to capture correlations between adjacent Gaussian points, which significantly enhances the rendering quality of 3DGS, achieving comparable results to NeRF while maintaining real-time rendering speeds.

### Raw image and video denoising methods

Raw image denoising is critical in both photography  and scientific imaging [15; 12]. Traditional ISPs typically employ self-similarity-based methods such as BM3D  to reduce noise. Recent advancements such as SID  and SIDD  demonstrate that data-driven, deep-learning approaches can surpass these traditional techniques. Innovatively, noise model-based methods like the ELD  have extended denoising capabilities into extreme low-light scenarios. It challenges conventional Gaussian noise models by introducing a row-based noise model that uses the Tukey Lambda distribution, which more accurately captures long-tail noise patterns in low-light conditions. The PMN  further investigates Fixed Pattern Noise in dark frames, enhancing alignment with the Poisson-Gaussian (P-G) distribution. These methods, however, often rely on large datasets of paired or clean images for training, as addressed by Neighbor2Neighbor , which trains denoising models solely on noisy images without clean counterparts. Building on the Neighbor2Neighbor approach, LGBPN  introduces more diverse masks to denoise spatially relevant noise. Nevertheless, Neighbor2Neighbor and LGBPN lack integration of a precise noise model or a physical prior of the 3D world, aspects our framework incorporates by merging a noise model with 3DGS to effectively separate noise from noisy images, eliminating the need for clean images. Complementing image-based methods, Yue et al.  expanded the scope to raw video. They introduced a dataset specifically curated for raw video denoising, along with multi-frame-based networks that leverage temporal information across frames to enhance the denoising process.

## 3 Preliminaries

In this section, we describe the noise model that we have adopted to regularize the extracted noise from raw images, provide an overview of the background of 3D Gaussian Splatting (3DGS), and review the RawNeRF scaling loss for handling the wide dynamic range in raw images.

**Noise model.** In the camera imaging process, depicted in Fig. 1(a), the raw image \(}\) derived from the ideal clean raw image \(\) inevitably contains noise \(\). This relationship is expressed as:

\[}=+.\] (1)

Drawing on existing noise models [32; 6], we decompose \(\) into various noise components as:

\[=_{shot}+_{read}+_{fp},\] (2)where \(_{shot}\), \(_{read}\), and \(_{fp}\) denote shot noise, read noise, and fixed pattern noise, respectively. A comprehensive description of each noise component is provided in the Supplemental Material. Given that \(_{shot}\) can be approximated from the Poisson distribution \((}{k}) k-\) to a Gaussian distribution \((0, k)\), where \(k\) represents the camera system gain, it can be seamlessly combined with \(_{read}\), which also follows a Gaussian distribution \((0,_{read}^{2})\). This integration yields a heteroscedastic Gaussian noise model:

\[_{hg}(0,_{hg}^{2}), _{hg}^{2}=_{read}^{2}+ k.\] (3)

Thus, the overall noise model simplifies to:

\[=_{hg}+_{fp}.\] (4)

Utilizing Eq. (4) as the prior for noise modeling allows for the potential separation of the clean image \(\) from noise corruption, enabling more precise 3DGS reconstructions.

**3D Gaussian Splitting.** 3D Gaussian Splitting (3DGS)  models a 3D scene using a collection of 3D Gaussians, _i.e._, \(=\{_{1},,_{M}\}\), which are rendered from various viewpoints via a differentiable splatting and tile-based rasterization process. Each Gaussian \(_{i}\) is initialized from Structure-from-Motion (SfM) and characterized by a 3D covariance matrix \(_{i}=^{3 3}\), position vectors \(_{i}^{3}\), a color vector \(_{i}^{3}\), and opacity \(o_{i}\). To maintain the positive semi-definiteness of \(_{i}\), it is parameterized as \(_{i}=_{i}_{i}_{i}^{T} _{i}^{T}\), where \(_{i}^{3 3}\) and diagonal matrix \(_{i}^{3 3}\) represent rotation and scaling matrices, respectively. To render a pixel \(}()\) at a pixel position \(\) in the reconstructed image \(}\) from a selected viewpoint within the camera projection \(\), 3DGS utilizes a differentiable splatting operation to splat 3D Gaussians onto the 2D surface as follows:

\[}()&=_{i=1 }^{M}_{i}_{i}()_{j=1}^{i-1}(1-_{j}( )),\\ _{i}()&=o_{i}(-(-(_{i}))^{T}( _{i}^{-1})(-(_{i})) ).\] (5)

All attributes, _i.e._, \(_{i}=\{_{i},_{i},_{i},_{i},o_{i}\}\), are learnable and optimized through the loss function:

\[_{}(},)=(1-)_ {1}(},)+ L_{}(}, ).\] (6)

**RawNeRF scaling loss.** As discussed in RawNeRF , the dynamic range of colors in a raw image is vast, which complicates the application of standard \(_{1}\) or \(_{2}\) loss. These losses tend to overemphasize errors in brighter areas, leading to tone-mapped images with poorly rendered, low-contrast dark regions. To address this, RawNeRF proposes a scaling loss as:

\[_{}(},)=(}-}{(})+})^{2},\] (7)

where \(()\) is the stop gradient function, and \(\) is a small constant to prevent division by zero.

## 4 Methodology

### Motivation

Consider a set of noisy raw images, denoted as \(}=\{}_{1},,}_{N}\}\), which are captured from different viewpoints using the same camera settings. For any real-world point, _e.g._, \(\), that is captured by all cameras, its intensity is recorded at a specific pixel coordinate \(_{i}\) in each raw image \(}_{i}\), with the corresponding pixel value \(}_{i}(_{i})\). As discussed in Sec. 3, the noisy pixel value is the sum of the noise-free value and the noise at that location, _i.e._, \(}_{i}(_{i})=()+_{i}( _{i})\). Given the same camera settings and real-world point \(\), the clean value \(()\) remains constant across images.

To further explore the noise impact on 3D Gaussian Splitting (3DGS)  optimization, we simplify our analysis by utilizing an \(_{2}\) loss function. The optimal target for the 3DGS output \(}()\), which corresponds to different positions \(_{i}\) in each image \(}_{i}\) after the splatting process with camera projection \(_{i}\), is the following:

\[}()=_{}()}_{i=1}^ {N}_{2}(}(),}_{i}(_{i}))=()+_{i=1}^{N}_{i}( _{i}).\] (8)Considering a real-world flat surface around point \(\) where intensities remain consistent, independent noise will cause variations in the optimal target across the surface as:

\[(}())=}(_{i}(_{i}))=}_{hg}^{2}.\] (9)

With the same camera settings, it is evident that the variance of the optimal target \(}()\) is inversely proportional to the number of training views \(N\). Since 3D Gaussians are splatted according to Eq. (5), the splatting process tends to produce numerous thin, flat Gaussian shapes to compensate for this variance. With fewer viewpoints, which is a common setting in real-world applications, these elongated Gaussians dominate, as illustrated in Fig. 1. This dominance not only degrades the reconstruction quality but also affects rendering speed, as the performance is directly linked to the number of Gaussian points \(M\).

Although 3DGS decomposes the variance on a flat surface into numerous elongated Gaussians, we observed that these Gaussian points tend to collapse and are subsequently divided during the later stages of the optimization process. In this process, the low-frequency signals are the first to be approximated before noise, as depicted in Fig. 3, which aligns with Deep Image Prior (DIP) , in which the low-frequency image components are typically reconstructed before noise. Based on such an observation, we propose incorporating a noise model as a prior in Sec. 4.3 to relax the constraints in the 3DGS optimization framework.

### Lens distortion correction

Unlike NeRF , which employs ray-tracing directly from image data, 3DGS maps 3D Gaussians onto a 2D image plane through a splatting operation. To enhance processing efficiency, 3DGS adopts the straightforward pinhole camera model. However, this model does not account for the nonlinear distortions--primarily radial--that are typical with real-world camera lenses. These distortions are more significant in raw images, where the typical lens corrections provided by ISP are absent.

To effectively correct for both radial and tangential lens distortions, we employ a distortion mapping function \(()\). This function transforms the undistorted image coordinates \((x,y)\) into their

Figure 3: Visualization of the 3DGS test view changes across optimization iterations. Initially, the 3DGS model fits the clean signal (at 1,000 and 3,000 iterations). However, as the iterations progress (from 10,000 to 30,000), the model starts to overfit the noise.

Figure 2: An illustration of how prevalent noise in raw images impacts the 3DGS optimization. (a) The imaging process inherently introduces additive noise at various stages due to physical principles and hardware limitations, represented as \(}=+\), where \(}\) and \(\) denote the noisy and clean images, respectively. (b) For a real-world point \(\), a collection of raw images \(}=\{}_{1},}_{2}\}\) records its intensity at pixel coordinates \(\{_{1},_{2}\}\), influenced by noise. The optimal target of 3DGS for this point, denoted as \(}()=_{}() }}\), has a discrepancy from the clean pixel intensity \(()\). The variance of this discrepancy is detailed in Eq. (9).

corresponding distorted coordinates \((x_{d},y_{d})\), based on the distortion model used in COLMAP . The distortion map is derived through an iterative Newton-Raphson method. This computation is performed once prior to the training phase, thereby not affecting the training duration. Detailed explanations of the distortion mapping process are provided in the Supplemental Material.

### Noise robust reconstruction loss

To mitigate overfitting to noise in 3DGS, we have revised the reconstruction loss function, now termed the noise-robust reconstruction loss function \(_{}\), as depicted in Fig. 4. This function is defined as follows:

\[_{}((}),})= _{}((}),} -})+_{}_{}(},),\] (10)

where \(()\) denotes the lens distortion mapping as described in Sec. 4.2. The function \(_{}(},)\) measures the noise divergence between the estimated noise \(} q_{}}\) and the physical noise model \( p_{}\). The term \(_{}\) is a Lagrangian relaxation parameter that balances fidelity and noise reduction. To estimate the noise, we introduce a noise extractor \(F_{n}(;)\), a neural network parameterized by \(\), which predicts the noise \(}\) from the input raw image \(}\) as:

\[}=F_{n}(}-_{fp};)+_ {fp}.\] (11)

Here, we subtract the input by the fixed pattern noise \(_{fp}\) before feeding it into the noise extractor \(F_{n}(;)\), due to the consistent nature of fixed pattern noise across different captures.

For the noise divergence loss \(_{}(},)\), we first use the NLL Loss to measure the divergence between the estimated noise and the physical noise in corresponding pixel coordinates. The NLL loss is defined as:

\[(},)=_{q_{}}}[-  p_{}(})], p_{}=(0, _{hg}^{2})+_{fp},\] (12)

where \(_{hg}^{2}=_{read}^{2}+} k\) is calculated according to Eq. (3).

The NLL loss models the distribution of predicted noise across each pixel, but it does not address the inter-pixel correlations, which ideally should be minimal. To tackle this, we then standardize the predicted noise \(}\) to a standard Gaussian distribution \((0,1)\) and introduce a covariance loss \(_{}\) to minimize spatial dependencies:

\[_{}(},)=_{q_{}|}}}[I-}^{T}}], }=(}-_{fp})/_{hg},\] (13)

where \(I\) is the identity matrix, ensuring the decorrelation of noise across pixels.

Consequently, the comprehensive noise divergence loss \(_{}(},)\) is formulated as:

\[_{}(},)=(},)+_{}/_{}_{ }(},).\] (14)

Finally, the complete noise-robust reconstruction loss can be formulated as:

\[_{}((}),})= _{}((}),} -})+_{}(}, )+_{}_{}(},).\] (15)

Figure 4: Illustration of the noise-robust reconstruction loss, \(_{}\), which comprises three components: the reconstruction loss \(_{}\), the negative likelihood loss (NLL), and the covariance loss \(_{}\). A noisy raw image, \(}\), is first input to the noise extractor \(F_{n}(;)\) to estimate the noise, \(}\). The estimated noise \(}\) is then used to calculate the NLL loss relative to the noise distribution. After that, the normalized noise, \(}\), undergoes a covariance loss, \(_{}\), to minimize spatial dependencies among noise components. Finally, the reconstruction loss, \(_{}\), is computed between the rendered distorted image \((})\) and the pseudo clean image \(}-}\).

## 5 Experiments

In this section, we introduce the experimental setup, followed by comparing our methods with existing baselines. Finally, we conduct ablation studies to facilitate a thorough discussion of our approach.

### Implementation details

Our framework is built upon Scaffold-GS . Considering the challenges associated with training \(F_{n}(,)\) from scratch within only 30,000 iterations, we opted to pretrain it on the SID dataset , which features paired images of noise and noise-free scenes. Notably, the SID dataset is captured using a Sony DSLR camera, distinctly different from the iPhone X used in the RawNeRF dataset  for evaluation (e.g., bit depth differences: 14 vs 12), thereby mitigating the risk of data leakage.

Noise extractor \(F_{n}(,)\) is optimized using the Adam optimizer with an initial learning rate of \(1 10^{-4}\), reduced to \(1 10^{-5}\) after 25,000 iterations. The hyperparameters \(_{nd}\) and \(_{}\), as defined in Eq. (15) and Eq. (14), are set to 5 and 20 for full-views settings, and 3 and 20 for limited views settings, respectively. All 3DGS models are trained on a single NVIDIA RTX 3090 GPU, following the default parameter settings of Scaffold-GS.

### Comparison with baselines

**Baselines.** We first compare our method with LDR Scaffold-GS , which uses RGB images processed by an ISP as the optimal target, to demonstrate the benefits of training on raw images. The ISP settings are the same as those used in RawNeRF. We also benchmark our method against HDR Scaffold-GS optimized with the \(_{}\) loss using raw images as a fair baseline. Additionally, we evaluate our approach against two-stage denoiser+3DGS pipelines optimized using the \(_{}\) loss, where 3DGS is optimized on denoised raw images produced by the denoiser. These comparisons

Figure 5: Comparative evaluation of various baselines and our method on rendering quality and speed in limited views training settings. The two-stage denoiser + 3DGS methods are represented by dotted lines, while training on RGB images is indicated by square markers. All metrics are evaluated on test views within the RGB domain.

include traditional denoiser BM3D , state-of-the-art pretrained image denoisers such as ELD  and PMN , the pretrained video denoiser RViDeNet , and advanced self-supervised methods like Neighbor2Neighbor  and LGBPN  for thorough evaluations. For the pretrained supervised denoisers, we utilized the checkpoints provided by the authors. For the self-supervised methods, we initially pretrained the denoisers on the SID dataset  and subsequently fine-tuned them on the training views. All compared methods apply the lens distortion function \(()\) to the rendered images to align with distorted raw images, ensuring a fair comparison.

**Datasets and metrics.** We utilize the RawNeRF dataset 3, which comprises raw images captured in dark scenes using an iPhone X with various ISO settings. For the full-views training setting, we adhere to the same train-test view splits as in RawNeRF. For limited views settings, we randomly select subsets (4, 8, 12, 16, 20 views) from the training views, while maintaining a consistent test view set across all experiments to ensure fair comparison. Following RawNeRF, we assess the rendering quality of various methods using PSNR, SSIM, and LPIPS metrics in the RGB domain. Additionally, we report the frames per second (FPS) to evaluate the real-time rendering capabilities of each method.

**Limited views training results.** In Fig. 5, we present the quantitative results of our approach compared to other baselines in limited views training settings. At first glance, it is evident that our method (indicated by red lines) significantly surpasses both the LDR Scaffold-GS, HDR Scaffold-GS, and two-stage methods across all view numbers. Compared to LDR Scaffold-GS (green lines), which utilizes RGB images processed by an ISP, our method achieves approximately a 4 dB improvement in PSNR, demonstrating the benefits of training with raw images. Additionally, when both are trained with raw images, our approach outperforms HDR Scaffold-GS (pink lines), optimized by \(_{}\), by approximately 3 dB in PSNR across different training views, and about 4 times faster in FPS with limited 4-view settings, highlighting the efficiency of our noise robust reconstruction loss \(_{}\). Furthermore, our method also exceeds the two-stage denoiser + 3DGS pipelines by 1 dB, which may lose high-frequency details during the denoising process. Fig. 6 provides a visualization comparison. Notably, with 12 views, both LDR- and HDR- Scaffold-GS exhibit significant elongated Gaussian artifacts, while our method produces more accurate and detailed reconstructions.

Figure 6: Visual comparison using ours and competing methods under the 12-view training settings.

Figure 7: Visual comparison across various methods in full views (100-view) training settings.

### Ablation study and discussions

**Impact of lens distortion function \(()\).** As detailed in Table 2, the absence of lens distortion correction results in a marginal decrease in reconstruction quality. In RawNeRF datasets, this effect is negligible due to the minimal lens distortion inherent in the iPhone X. However, for cameras with more pronounced distortion characteristics, the impact could be significantly more substantial.

**Impact of hyperparameters.** The hyperparameters \(_{}\) and \(_{}\) within the \(_{}\) play a pivotal role in striking the right balance between denoising efficacy and gradient accumulation. As delineated in Table 4, an undersized \(_{}\) leads to inadequate constraints on the noise model, culminating in imprecise noise extraction. On the flip side, an over-amplified \(_{}\) engenders excessively strong gradients emanating from the noise regularization loss, which can detrimentally impact the optimization process of 3DGS. The parameter \(_{}\), when assigned values that are either too low or too high, can incite similar challenges.

**Limitations.** Our method has several limitations. The noise extractor and covariance loss computation require more training time compared to standard Scaffold-GS, as shown in Table 3. Additionally, some high-frequency signal distributions are similar to noise, making it difficult to differentiate them using the distribution divergence loss. This can result in over-smoothing in full-views training settings, as discussed in the Supplemental Material.

## 6 Conclusion

In this work, we identify the unavoidable noise in raw images as a significant detriment to the rendering quality and speed of HDR 3DGS, particularly in scenarios with limited training views. We provide a comprehensive analysis of how noise affects the optimization of 3DGS, modeling its relationship with both the number of training views and the noise distribution. To tackle these challenges, we

   \(_{}\) & \(_{}\) & Raw PSNR & RGB PSNR & RGB SSIM & RGB LPIPS \\ 
0.5 & 20 & 56.36 & 21.95 & 0.508 & 0.591 \\
10 & 20 & 56.84 & 22.18 & 0.509 & 0.539 \\
5 & 0 & 55.38 & 22.41 & 0.515 & 0.523 \\
5 & 2 & 57.10 & 22.52 & 0.516 & 0.520 \\
0.5 & 50 & 56.72 & 21.98 & 0.514 & 0.576 \\
**5** & **20** & **59.49** & **23.53** & **0.535** & **0.499** \\   

Table 4: Ablation study on the selection of \(_{}\) and \(_{}\). All models are trained using full views.

   Method & Loss & Raw PSNR\(\) &  & FPS\(\) \\   & & PSNR\(\) & SSIM\(\) & LPIPS\(\) \\  BM3D  & & 58.46 & 22.70 & 0.526 & 0.521 & 76 \\ ELD  & & 54.70 & 19.82 & 0.511 & 0.544 & 80 \\ PMN  & & 53.69 & 19.00 & 0.498 & 0.584 & 94 \\ Neighbor2Neighbor  & \(_{}\) & 58.40 & 22.22 & 0.531 & 0.518 & 78 \\ LGBPN  & & 53.62 & 19.09 & 0.481 & 0.624 & 84 \\ RViDeNet  & & 57.59 & 22.05 & 0.518 & 0.548 & 74 \\  LDR Scaffold-GS  & \(_{}\) & - & 17.34 & 0.486 & 0.622 & 56 \\ HDR Scaffold-GS  & \(_{}\) & 58.08 & 22.69 & 0.521 & 0.513 & 73 \\ Ours & \(_{}\) & 59.49 & **23.53** & **0.535** & 0.499 & 80 \\   

Table 1: Quantitative results of our approach and other baselines in full views training settings.

   Method &  Ne2Ne  \\ Scaffold-GS  \\  & 
 LGBPN  \\ Ours \\  \\  Time cost & 2.5h & 5.3h \\
1.6h & 3.1h \\   

Table 2: Ablation study on the lens distortion \(()\). All models are trained using full views.

propose a novel self-supervised framework that incorporates a noise-robust reconstruction loss. This framework utilizes a physically-based noise model to simultaneously denoise and enhance the HDR representation within noisy raw images. Our approach markedly outperforms LDR/HDR 3DGS that employs 3DGS/RawNeRF loss, as well as both self-supervised and supervised pre-trained two-stage methods, in terms of rendering quality and speed across various training view counts.