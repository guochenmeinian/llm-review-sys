# PLASTIC: Improving Input and Label Plasticity

for Sample Efficient Reinforcement Learning

Hojoon Lee1 Haneul Cho1 Hyunseung Kim1 Daehoon Gwak Joonkee Kim

Jaegul Cho Se-Young Yun Chulhee Yun

Kim Jaechul Graduate School of AI, KAIST

{joonleesky, jhs4015, mynsng, daehoon.gwak, joonkeekim,

jchoo, yunseyoung, chulhee.yun}@kaist.ac.kr

Equal contributions.

###### Abstract

In Reinforcement Learning (RL), enhancing sample efficiency is crucial, particularly in scenarios when data acquisition is costly and risky. In principle, off-policy RL algorithms can improve sample efficiency by allowing multiple updates per environment interaction. However, these multiple updates often lead the model to overfit to earlier interactions, which is referred to as the _loss of plasticity_. Our study investigates the underlying causes of this phenomenon by dividing plasticity into two aspects. _Input plasticity_, which denotes the model's adaptability to changing input data, and _label plasticity_, which denotes the model's adaptability to evolving input-output relationships. Synthetic experiments on the CIFAR-10 dataset reveal that finding smoother minima of loss landscape enhances input plasticity, whereas refined gradient propagation improves label plasticity. Leveraging these findings, we introduce the **PLASTIC** algorithm, which harmoniously combines techniques to address both concerns. With minimal architectural modifications, PLASTIC achieves competitive performance on benchmarks including Atari-100k and Deepmind Control Suite. This result emphasizes the importance of preserving the model's plasticity to elevate the sample efficiency in RL. The code is available at https://github.com/dojeon-ai/plastic.

## 1 Introduction

In Reinforcement Learning (RL), achieving sample efficiency is crucial in various domains including robotics, autonomous driving, and healthcare, where data acquisition is constrained and expensive . In theory, off-policy RL algorithms promise increased sample efficiency by allowing multiple updates of policy or value functions from a single data instance . However, they tend to suffer from the _loss of plasticity_, a phenomenon where the models overfit to earlier interactions and fail to adapt to new experiences .

The origins of the loss of plasticity are a focus of contemporary research. One avenue of study points is the role of the smoothness of the loss surface. Models seeking smoother minima of loss landscape tend to exhibit more stable learning patterns and enhanced plasticity .

Figure 1: Scaling of our proposed method, PLASTIC, on the Atari-100k benchmark compared to state-of-the-art methods (Section 4.3).

Another line of investigation emphasizes the role of gradient propagation, highlighting that as training continues, the saturation of active units can impede weight updates, diminishing the model's adaptability .

To understand the interplay of these factors within the context of RL, we designed a couple of synthetic experiments. The RL agent often confronts two adaptation scenarios, which involve adjusting to new data inputs and evolving input-label dynamics. In particular, an example of the latter might be an action once considered to be positive but later perceived as negative. Therefore, throughout this work including our synthetic experiments, we categorize the model's plasticity into two cases:

* **Input Plasticity:** adaptability to shifts in input data distributions, \(p(x)\).
* **Label Plasticity:** adaptability to evolving labels (returns) for given inputs (observations), \(p(y|x)\).

For our exploration, we employ the CIFAR-10 dataset . To assess input plasticity, we train the model from a progressively growing dataset, where the data is segmented into 100 chunks and sequentially added to the buffer. On the other hand, label plasticity is examined by altering labels at intervals, reflecting the dynamic nature of input-output associations in RL. We also adopt strategies to enhance loss smoothness and gradient propagation in the tested models. The Sharpeness-Aware Minimization (SAM) optimizer  and Layer Normalization (LN)  are employed for the former, while periodic reinitialization of the last few layers (Reset)  and Concatenated ReLU (CReLU) activations  are used to enhance the latter.

Our synthetic experiments yield clear distinctions between the proposed two concepts of plasticity. As illustrated on the left side of Figure 2, smoother minima of loss largely improve input plasticity, while maintaining the amount of gradient propagation has a pronounced impact on label plasticity. Building on these findings, we propose an algorithm called **PLASTIC**, which combines SAM optimizer, LN, periodic Reset, and CReLU activation to improve both input and label plasticity. The simplicity of PLASTIC facilitates its seamless integration into standard off-policy RL frameworks, requiring minimal code modifications. Notably, across the Atari-100k and Deepmind Control Suite benchmarks, PLASTIC achieved competitive performance to the leading methods, underscoring its potential in enhancing RL's sample efficiency.

In summary, our main contributions are listed as follows:

* Through synthetic experiments, we find out that loss smoothness and refined gradient propagation play separate roles in improving the model plasticity (Section 3).
* We introduce the PLASTIC, a simple-to-use and efficient algorithm that improves the model's plasticity by seeking a smooth region of loss surface and preserving gradient propagation.
* Empirically, PLASTIC achieved competitive performance on challenging RL benchmarks, including Atari-100k and Deepmind Control Suite (Section 4.2-4.5).

Figure 2: **Left:** Performance of Synthetic Experiments. Layer Normalization (LN) and Sharpeness-Aware Minimization (SAM) considerably enhance input plasticity, while their effect on label plasticity is marginal. Conversely, Concatenated ReLU (CReLU) and periodic reinitialization (Reset) predominantly improve label plasticity with subtle benefits on input plasticity. **Right:** Performance of RL Benchmarks. PLASTIC consistently outperforms individual methods, highlighting the synergistic benefits of its integrated approach.

Preliminaries

### Sample Efficient Reinforcement Learning

Achieving sample efficiency is crucial for applying RL to real-world problems. Constraints such as limited online data collection (e.g., robotics, educational agents) or safety considerations (e.g., autonomous driving, healthcare) emphasize the need for efficient RL algorithms [36; 42].

Off-policy RL algorithms like Rainbow  and SAC  offer improved sample efficiency by permitting multiple policy or value function updates based on a single data collection. However, this advantage may introduce a pitfall: the increased update rate can lead to overfitting, undermining the model's generalizability and adaptability to new datasets [29; 43].

To overcome these challenges, various methods have been proposed:

* Data Augmentation: Renowned for its effectiveness in computer vision [16; 80], data augmentation excels in visual RL algorithms [73; 72; 40; 55; 68], particularly when combined with self-supervised learning methods [39; 58; 77].
* Regularization: Diverse regularization strategies have also demonstrated their effectiveness, including L2 regularization , spectral normalization [23; 11], dropout , and both feature mixing  and swapping .
* Self-Supervised Learning: By incorporating auxiliary learning objectives, self-supervised learning has emerged as a potential solution. Objectives encompass pixel or latent space reconstruction [74; 77], future state prediction [58; 19; 41], and contrastive learning focusing on either instance [39; 20] or temporal discrimination [53; 64; 48].

Despite these advancements, a key question remains. Why does an overfitted model face challenges when adapting to new datasets?

### Understanding Plasticity in Reinforcement Learning

The question for understanding model plasticity in RL is driven by the inherent need for plasticity as agents consistently encounter new inputs and evolving input-output relationships.

A seminal contribution by Lyle et al.  highlighted the importance of smoother loss landscapes. By applying layer normalization across all convolutional and fully connected layers, they managed to flatten the loss landscapes, subsequently enhancing performance in Atari environments. While the emphasis on smooth loss landscapes is relatively new in RL, its importance has been substantiated in supervised learning, where empirical evidence suggests models converged on a wider and smoother loss surface generalize better to unseen datasets [34; 30; 71]. Following this insight, the sharpness-aware minimization (SAM) optimizer  has recently gained attention in supervised learning [13; 44], aiming to minimize both training loss and its sharpness.

Concurrently, various studies point out a progressive decline in a network's active units as a probable cause for the loss of plasticity [2; 18]. As neural networks iteratively adjust their weights to minimize training losses, the number of active units tends to shrink, often culminating in the dead ReLU phenomenon [28; 17]. This reduction in active units hampers the gradient propagation to upper layers, thus impairing network adaptability. Proposed remedies include periodic neuron reinitialization [52; 19; 63] or employing Concatenated ReLU activation [61; 2], both showing promise in RL.

With these observations in mind, our primary endeavor is to delve into the complex interplay of these factors. We aim to analyze whether these factors synergistically affect the model's plasticity or operate as distinct, individual contributors.

### Off-Policy Reinforcement Learning Algorithms

Rainbow.Rainbow  is a widely used off-policy algorithm for discrete control settings that integrates six different extensions to the standard DQN algorithm . The extensions include Double Q-learning , Prioritized Experience Replay , Dueling Networks , Multi-Step Return, Distributional Q-function , and Noisy Networks . Rainbow significantly improves the performance and robustness of the standard DQN algorithm, thereby addressing shortcomings in function approximation and exploration-exploitation trade-offs.

The Q-value updates in the Rainbow algorithm follow the principle of minimizing the Temporal-Difference (TD) error which is defined as:

\[(,^{-},)=[Q_{}(s,a)-(r+_{a^{}}Q_ {^{-}}(s^{},a^{}))]^{2}\] (1)

where \(\) denotes the model weights, \(^{-}\) is the weights of the target model, and \(=(s,a,r,s^{})\) is the transition sampled from the replay buffer \(\).

Noisy Networks  introduce stochasticity into the model weights, reparameterizing them as:

\[=+}\] (2)

where \(\) and \(\) are the learnable weights, whereas \(}\) is a random vector sampled from an isotropic Gaussian distribution, adding randomness to the layer. (We denote element-wise product by '\(\)'.)

Soft Actor-Critic.Soft Actor-Critic (SAC) , a prevalent off-policy algorithm for continuous control, aims to maximize the expected return coupled with an entropy bonus. SAC consists of a policy \(\) and a critic model \(Q\), each parameterized by weights \(\) and \(\) respectively.

In training, the critic \(Q_{}\) is trained to minimize the following objective, defined as

\[_{Q}(,;)=[Q_{}(s,a)-(r+(Q_{ }(s^{},a^{})-_{}(s^{},a^{}))) ]^{2}, a^{}_{}(|s^{})\] (3)

where \(\) is the entropy coefficient and \(=(s,a,r,s^{})\) is the transition sampled from the buffer \(\).

Subsequently, the policy \(_{}\) is jointly trained to maximize the following objective:

\[_{}(,;s)=_{a_{}}[( Q_{}(s,a)-_{}(a|s)].\] (4)

Throughout this paper, all of the plasticity-preserving methods (LN, SAM, Reset, CReLU) will be integrated and evaluated on top of these standard off-policy RL algorithms.

## 3 Synthetic Experiments

Analyzing the loss of plasticity in RL is indeed intricate given RL's multifaceted nature, encompassing challenges such as credit assignments, noisy targets, and the exploration-exploitation tradeoff. To alleviate this complexity, we design synthetic supervised learning experiments within a controlled framework using the CIFAR-10 dataset . Our focus is to evaluate the model's adaptive capabilities under two distinct adaptation scenarios:

**Input Adaptation:** In RL, as the agent continually interacts with the environment, it constantly encounters new data through exploration. Effective adaptation to this data is paramount for effective decision-making. To simulate this scenario, we partitioned the training data into 100 chunks, sequentially adding them to a buffer. The training was conducted by sampling data from this progressively growing buffer. Overfitting to earlier data chunks and failing to adapt to newer ones would indicate performance degradation compared to a model trained on the entire dataset.

**Label Adaptation:** The RL domain often experiences shifts in the relationships between inputs and labels. Our synthetic experiment mirrored this dynamic by periodically altering labels during the training phase. The labels were randomly shuffled 100 times, with each class's labels uniformly reassigned, ensuring a consistent reassignment within a class (e.g., all 'cat' images transition from class 3 to class 4). A model's overfitting to initial relationships would impede its capability to adeptly adapt to evolving relationships.

Our experimental setup resonates with common design choices in RL [50; 26; 73], comprising three convolutional layers for the backbone and three fully connected layers for the head. Employing Stochastic Gradient Descent (SGD) with momentum [56; 54] as the optimizer, and a batch size of 128, the model underwent 50,000 updates, with 500 updates at each alternation step (i.e., appending a chunk for input adaptation and alternating labels for label adaptation). An exhaustive sweep was carried out for the learning rate and weight decay range from \(\{0.1,0.01,0.001,0.0001,0.00001\}\), integrating weight decay to minimize variance across individual runs. Each methodology was trained over 30 random seeds, with results presented within a 95% confidence interval.

To delve into the impact of pursuing a smooth loss surface and preserving gradient propagation, we selected four distinct methods: Layer Normalization (LN) and Sharpness-Aware Minimization(SAM) optimizer for the former, and Concatenated Rectified Linear Unit (CReLU) activation and Reset for the latter. For the SAM optimizer, the perturbation parameter was tuned across the set \(\{0.1,0.03,0.01\}\), and for the Reset method, the reset interval was tuned over \(\{5,10,20\}\) data chunks. Our analysis extended to exploring the synergistic interplay between these methods. To this end, we examined all unique pair-wise combinations of the selected methods (LN + SAM,..., CReLU + Reset) with a combination of all methods. This exploration aimed to unveil synergetic effects between different methods in promoting smoother model landscapes and enhancing gradient propagation.

In Figure 3, we observed a clear distinction between the effects of various methods on input and label adaptation capabilities. The left panel illustrates the performance of applying individual methods. We found that LN and SAM excel in enhancing input adaptation, yet only offer marginal improvements for label adaptation. In contrast, CReLU and Reset yield modest enhancements in input adaptation while exhibiting a significant impact on label adaptation.

Turning our attention to the right panel, the focus is on the combined synergies of methods. The pairing of LN with SAM predominantly enhances input adaptation. When LN is merged with either CReLU or Reset, there's a marked improvement across both adaptation types. Likewise, the combination of SAM with either CReLU or Reset benefits both input and label adaptation scenarios. Among these combinations, the CReLU and Reset pairing is skewed towards improving label adaptation. Notably, PLASTIC, which integrates all of these methods yielded the most significant enhancements.

In summary, while individual methods are tailored towards specific enhancement areas, the integration of these techniques can yield synergies across both adaptation landscapes. These findings reinforce our notion of distinct yet complementary roles of seeking smooth loss surface and enhancing gradient propagation to improve the model's plasticity.

## 4 Experiments

In this section, we evaluate the effectiveness of enhancing the model's plasticity towards achieving sample-efficient reinforcement learning. Our experiments span two widely recognized benchmarks: the Atari-100k  for discrete control tasks and the DeepMind Control Suite (DMC)  for continuous control tasks. We have organized our experimental pursuits into four main subsections:

* Assessing the performance of the PLASTIC algorithm across both domains (Section 4.2).
* Analyzing the scaling behavior of PLASTIC. Specifically, we focus on the model's responsiveness with respect to the number of updates per environment interaction (Section 4.3).
* Exploring the advantages of improving plasticity on a large pre-trained model (Section 4.4).
* Ablation study for different combinations of plasticity-preserving methods (Section 4.5).

### Experimental Setup

Atari-100k.Following the standard evaluation protocol from [58; 32], we evaluate the performance of 26 games on Arcade Learning Environments , limited to 100k interactions. The results are

Figure 3: Comparative performance improvements of various methods and their combinations on input and label adaptation tasks. The left panel showcases individual method performance, while the right panel delves into the synergistic benefits of combining multiple methods.

[MISSING_PAGE_FAIL:6]

Table 1 showcases the comparative outcomes of these methods. From the results, we observed that while individual plasticity-preserving methods enhanced sample efficiency across both discrete and continuous control benchmarks, the PLASTIC algorithm outperformed them all. This integration of multiple methods within PLASTIC clearly demonstrates superior results over any single approach. A comprehensive set of results for each environment is available in the Appendix.

To delve deeper into the mechanisms driving these performance enhancements, we focused on two specific metrics: the maximum eigenvalue of the Hessian (\(_{}\)) and the fraction of active units in the head layers. As illustrated in Figure 4, methods such as LN and SAM encourage the model to converge on a smoother loss landscape. On the other hand, CReLU and Reset exhibit a pronounced presence of active units. Notably, by integrating these methods, PLASTIC succeeded in converging to a smooth loss region while maintaining a large number of active units.

Our prior synthetic experiments provided insight that convergence on a smoother loss landscape improves the model's input plasticity while enhanced gradient propagation enhances the model's label plasticity. Consequently, we conjecture that PLASTIC's superior performance is attributed to its capability to synergistically enhance both input and label plasticity.

### Scaling Replay Ratio

Off-policy RL algorithms, in theory, promise enhanced sample efficiency by increasing the updates per environment interaction, commonly known as the replay ratio. Yet, a practical challenge arises: escalating updates often inversely affect sample efficiency due to the loss of the model's plasticity. This section delves into whether our PLASTIC algorithm can combat this decrement in plasticity, thereby improving sample efficiency with a scaling replay ratio.

For our analysis, we scaled the replay ratio up to 8 and evaluated the efficacy of PLASTIC on the Atari-100k benchmark. In addition, we compared PLASTIC against notable state-of-the-art (SOTA) model-based and model-free algorithms.

To ensure consistency and comparability in our evaluation, we computed the GPU hours for every method by leveraging their official codebases. For instance, PlayVirtual , MLR , SR-SPR , and PLASTIC can parallelize multiple runs on a single GPU. Thus, for a fair comparison, we followed the protocol as outlined by , dividing the total execution time by the total number of executed runs.

Given that SAM requires an auxiliary gradient computation during optimization, and CReLU increases the number of parameters, we introduced a simplified alternative, PLASTIC\({}^{}\). This simplified version only integrates Layer Normalization (LN) and the reset mechanism, ensuring minimal computational overhead. In addition, for each reset, we incorporate the Shrink & Perturb  method on the backbone network parameters. Shrink & Perturb softly reinitializes the model's parameters as \(_{t}=_{t-1}+(1-)\), where \(\). While Shrink & Perturb slightly lower performance at a replay ratio of 2, it demonstrated enhanced sample efficiency when scaling the replay ratio upwards.

As depicted in Table 2 and Figure 1, PLASTIC\({}^{}\) establishes a Pareto frontier between Inter-Quartile Mean (IQM) and computational cost, illustrating its notable computational efficiency. While Ef

Figure 4: **Left: The maximum eigenvalue of Hessian (\(_{}(^{2})\)), representing the curvature of the loss landscape. Right: Fraction of active units in the head layers. Both metrics were derived from the DrQ algorithm’s evaluation on the Atari-100k benchmark.**

ficientZero exhibits state-of-the-art performance, it uniquely employs a search algorithm coupled with a domain-specific heuristic, namely early environment resets. When excluding these specific elements, PLASTIC stands out as a strong competitor against the other methods.

Through these results, we found that PLASTIC can effectively prevent the loss of plasticity by incorporating various plasticity-preserving strategies. Furthermore, for practitioners, the construction of the Pareto frontier by PLASTIC\({}^{}\) is particularly beneficial. By simply incorporating layer normalization and implementing resets in the underlying off-policy RL algorithms, they can achieve improved sample efficiency. This comes with the advantage of minimal computational overhead and only requires minor code adjustments.

In conclusion, our experiments underscore the potential of leveraging enhanced plasticity as a means to improve sample efficiency in RL.

### Compatibility with a Large Pretrained Model

Recent years have seen growing interest in leveraging large pretrained models to improve sample efficiency in RL [59; 60; 7]. We investigate how combining PLASTIC's principles with these models can counteract the loss of plasticity, a common obstacle to rapid adaptation.

For our evaluation, we selected the SimTPR model . Using a 30-layer convolutional network, SimTPR is pretrained via self-predictive representation learning on suboptimal Atari video datasets. As SimTPR does not employ Layer Normalization (LN) and Concatenated ReLU (CReLU) activations, we employ SAM to seek a smoother loss landscape and use Reset techniques to facilitate gradient propagation. Following the approach in section 4.3, for each reset, we applied Shrink & Perturb to the backbone network. In the fine-tuning phase, we initialized an MLP-based head network on top of the frozen, pretrained backbone network. This head network underwent training for 100k environment steps, leveraging the Rainbow algorithm. See the Appendix section for more details.

Table 3 provides a summary of applying either SAM or Reset to the pretrained model. Solely scaling the replay ratio during fine-tuning leads to a noticeable decrement in its efficacy. However, we observed that the usage of Reset or SAM can counteract this decrease, leading to a pronounced enhancement in performance. Furthermore, the integration of both techniques surpassed individual contributions, indicating the presence of synergy.

These observations imply that elevating both input and label plasticity can play a pivotal role in enhancing sample efficiency, even in large, pre-trained models.

   Type & Method & Search & Params (M) & RR & GPU hours & IQM & Median & Mean & OG \\   & IRIS  & - & 30.4 & - & 36.3 & 0.501 & 0.289 & 1.046 & 0.512 \\  & DreamerV3  & - & 17.9 & - & 5.1\({}^{}\) & 0.497 & 0.466 & 1.097 & 0.505 \\  & EfficientZero  & ✓ & 8.4 & - & 28.0 & n/a & 1.090 & 1.943 & n/a \\   & PlayVirtual  & - & 7.4 & 2 & 4.9 & 0.374 & n/a & n/a & 0.558 \\  & MLR  & - & 161.7 & 2 & 3.7 & 0.432 & n/a & n/a & 0.522 \\   & & & & 2 & 2.7 & 0.444 & 0.336 & 0.910 & 0.516 \\  & SR-SPR  & - & 7.3 & 4 & 5.3 & 0.544 & 0.523 & 1.111 & 0.470 \\  & & & & 8 & 10.2 & 0.589 & 0.560 & 1.188 & 0.452 \\   & & & & 2 & 0.5 & 0.396 & 0.425 & 0.702 & 0.541 \\  & PLASTIC\({}^{}\) & - & 6.8 & 4 & 1.0 & 0.518 & 0.517 & 0.858 & 0.478 \\  & & & & 8 & 1.9 & 0.583 & 0.542 & 0.939 & 0.448 \\   & & & & 2 & 1.0 & 0.421 & 0.347 & 0.933 & 0.535 \\  & PLASTIC & - & 7.2 & 4 & 1.9 & 0.545 & 0.407 & 1.002 & 0.475 \\  & & & & 8 & 3.8 & 0.571 & 0.494 & 0.968 & 0.461 \\   

Table 2: **Comparison to the SOTA on Atari-100k.** For IRIS, DreamerV3, EfficientZero, PlayVirtual, MLR, SR-SPR, and PLASTIC the results are averaged over 5, 5, 32, 15, 3, 10, and 5 seeds respectively.

   RR & SAM & Reset\({}^{}\) & IQM \\   & & & 0.366 (0.324, 0.397) \\  & & ✓ & 0.709 (0.650, 0.745) \\  & ✓ & ✓ & 0.776 (0.703, 0.854) \\   & & & & 0.243 (0.214, 0.267) \\  & & ✓ & 0.780 (0.706, 0.865) \\   & ✓ & ✓ & 0.834 (0.769, 0.889) \\   

Table 3: **Fine-tuning from a pretrained model.** Reset\({}^{}\) applies a soft reset to the backbone and a hard reset to the head.

### Ablation Studies

To further analyze the interplay between seeking a smooth loss surface and improving gradient propagation, we have conducted a series of ablation studies for different combinations of plasticity-preserving methods. Here, we averaged the performance over 10 random seeds.

Table 4 showcases the results when applying various combinations to the Atari-100k benchmark. The first five and the last rows echo the results from Table 1. It becomes clear that the concurrent pursuit of a smooth loss surface and the enhancement of gradient propagation surpasses the individual application of either strategy (for instance, LN + CReLU \(>\) LN \(\) CReLU). The comprehensive integration of all methods, referred to as PLASTIC, demonstrates the highest performance.

For practitioners considering our approach, it's worth highlighting its adaptability. The methodology does not necessitate the application of all methods across every plasticity category to reap substantial benefits. Instead, deploying just one technique from each category can yield notable improvements. For scenarios constrained by computational resources, using LN and Reset is recommended over SAM, due to the latter's extra computational burden, and CReLU, given its added parameters (as noted in PLASTIC\({}^{}\) in Section 4.3). Additionally, when one is working with a pre-trained network where altering the overall architecture is not feasible, LN and CReLU might not be practical since they inherently change the network's structure. In such instances, as detailed in Section 4.4, the combination of SAM and Reset emerges as a potent solution to improve downstream performance.

## 5 Conclusion, Limitations, and Future Work

In this paper, we aimed to address the prevalent issue of the "loss of plasticity" in off-policy RL algorithms. Through synthetic experiments on CIFAR-10, we discovered that finding a smoother point of loss landscape largely improves input plasticity, while maintaining effective gradient propagation enhances label plasticity. From these insights, we proposed PLASTIC, an algorithm that synergistically combines the SAM optimizer, LN, periodic Reset, and CReLU activation. Empirically, this combination substantially improves both forms of plasticity. Demonstrating robust performance on benchmarks including Atari-100k, PLASTIC offers a promising avenue for advancing sample efficiency in RL.

Nevertheless, our study has certain constraints. Our empirical evaluations were primarily limited to the Atari and DMC environments. A compelling direction for future work would be to assess PLASTIC's efficacy in more intricate settings, such as MetaWorld , or Procgen . These environments introduce greater non-stationarities, challenging the model's adaptability.

While the smoothness of loss surfaces and gradient propagation are fundamental to our findings, they might not capture the full complexity of the "loss of plasticity" phenomenon. Notably, even though SAM was sufficient to find the smoothest loss surfaces, Layer Normalization's integration amplifies its efficacy. Similarly, while CReLU inherently mitigates the reduction of active units, introducing periodic resets offers pronounced enhancements. We hypothesize that the nuanced attributes like the smoothness of loss landscapes and the number of active units might only scratch the surface of deeper determinants influencing model plasticity. Therefore, an in-depth understanding and measurement of network plasticity can pave the way for more foundational solutions.

In conclusion, while we acknowledge the constraints, our research offers practioncal insights for amplifying the plasticity of RL agents We hope our findings open up a diverse possibility for future exploration, potentially leading to more sample-efficient and adaptable algorithms in RL.

   LN & SAM & CReLU & Reset & IQM \\   &  & & & 0.258 (0.224, 0.292) \\  & & & & 0.259 (0.235, 0.293) \\  & ✓ & & & 0.325 (0.296, 0.354) \\  & & ✓ & & 0.256 (0.224, 0.287) \\  & & & ✓ & 0.343 (0.314, 0.373) \\  ✓ & ✓ & & & 0.341 (0.325, 0.366) \\ ✓ & & ✓ & & 0.284 (0.257, 0.314) \\ ✓ & & & ✓ & 0.396 (0.365, 0.430) \\  & ✓ & ✓ & & 0.372 (0.357, 0.408) \\  & ✓ & ✓ & ✓ & 0.411 (0.377, 0.447) \\  & & ✓ & ✓ & 0.373 (0.344, 0.402) \\  ✓ & ✓ & ✓ & ✓ & **0.421 (0.388, 0.457)** \\   

Table 4: Performance comparison of various plasticity-preserving method combinations on the Atari-100k benchmark.