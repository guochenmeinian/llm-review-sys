# NeuralClothSim: Neural Deformation Fields

Meet the Thin Shell Theory

 Navami Kairanda  Marc Habermann  Christian Theobalt  Vladislav Golyanik

Max Planck Institute for Informatics, Saarland Informatics Campus

###### Abstract

Despite existing 3D cloth simulators producing realistic results, they predominantly operate on discrete surface representations (_e.g._, points and meshes) with a fixed spatial resolution, which often leads to large memory consumption and resolution-dependent simulations. Moreover, back-propagating gradients through the existing solvers is difficult, and they hence cannot be easily integrated into modern neural architectures. In response, this paper re-thinks physically accurate cloth simulation: We propose NeuralClothSim, _i.e._, a new quasistatic cloth simulator using thin shells, in which surface deformation is encoded in neural network weights in the form of a neural field. Our memory-efficient solver operates on a new continuous coordinate-based surface representation called neural deformation fields (NDFs); it supervises NDF equilibria with the laws of the non-linear Kirchhoff-Love shell theory with a non-linear anisotropic material model. NDFs are adaptive: They 1) allocate their capacity to the deformation details and 2) allow surface state queries at arbitrary spatial resolutions without re-training. We show how to train NeuralClothSim while imposing hard boundary conditions and demonstrate multiple applications, such as material interpolation and simulation editing. The experimental results highlight the effectiveness of our continuous neural formulation. See our project page: https://4dqv.mpi-inf.mpg.de/NeuralClothSim/.

## 1 Introduction

Realistic cloth simulation is a central, long-standing and challenging problem in computer graphics. It arises in game engines, computer animation, movie production, digital art, and garment digitisation, only to name a few areas. To date, it has been mostly addressed with physics-based simulators operating on explicit geometric representations, _i.e._, meshes and particle systems. While recent simulators  can produce realistic 3D simulations that obey various types of boundary conditions and consider secondary effects, but their operational principle remains limited in several ways. First, they work on discrete surface representations such as meshes and points inherently assuming a pre-defined spatial resolution that cannot be easily changed once the simulation is accomplished. Second, re-running with different meshing of the same initial template leads to different folds and wrinkles, which is often problematic for downstream applications. Third, explicit geometries require notoriously large amounts of storage for the detailed simulation: the memory size grows linearly with the number of points. Moreover, it is difficult to integrate simulators into learning frameworks and to edit the output 3D state without re-running the simulation.

The recent advances in physics-informed neural networks  as well as the success of neural fields , makes us question if continuous coordinate-based representations can alleviate these limitations. All these considerations motivate us to rethink the fundamentals of physically accurate cloth simulation and we introduce a new approach for cloth quasistatics, in which the surface deformation is encoded in neural network weights. The proposed neural architecture is coordinatebased and has multiple advantages compared to previous simulators; see Fig. 1 for an overview. Our neural fields are adaptive, _i.e.,_ the parameters are used to encode the deformations as they occur. As a matter of efficiency, we neither need to know the resolution in advance before the simulation nor do we require complex re-meshing schemes . Realistic cloth simulation requires modelling geometric non-linearities and non-linear anisotropic elasticity. It involves large bending deformations and rigid transformations leading to non-linear point displacements. To efficiently model this, we rely on neural networks as they are good universal (non-linear) function approximators.

We model cloth simulation as a thin shell boundary-value problem with the deformation governed by the _Kirchhoff-Love shell theory_. In contrast to previous simulators using Kirchhoff-Love shell relying on isogeometric analysis  or subdivision surface algorithms [24; 20], we model thin shell deformations as implicit neural representations, _i.e.,_ 3D deformation fields encoding cloth quasistatics. During training, our formulation supervises a neural deformation field (NDF), minimising the cloth's potential energy functional. In contrast to classical simulators [38; 36] sensitive to the finite element discretisations of the initial surface, which could lead to inconsistent folds, we generate simulations with consistent drapes, folds, and wrinkles. This is important for downstream applications that might query (_e.g.,_ in the case of a renderer) or even modify (_e.g.,_ like inverse methods) the simulation with adaptive sampling. Next, our representation is memory-efficient, and the simulation states are generated directly in a compressed form. In summary, our core technical contributions are as follows:

* A new continuous coordinate-based neural representation (Sec. 4.1)--and a new neural solver for cloth quasistatics based on thin shell theory that accepts boundary conditions such as external forces or guiding motions (Sec. 4.2).
* Modelling of thin shell's deformation with non-linear Kirchhoff-Love theory supervising the neural deformation fields (Sec. 4.3). Upon convergence, the equilibrium state can be queried continuously and consistently.
* Applications of the proposed neural simulator including material interpolation and fast editing of simulations according to updated simulation parameters (Sec. 5.4).

We want to point out that we do _not_ claim qualitative superiority over classical cloth simulation methods and _completeness_ of our formulation (_e.g._, our method does not consider collisions). However, we believe that our new way of deeply integrating neural networks as a surface representation and solver into cloth simulation has the potential to stimulate future research in this direction, and we show that our formulation overcomes multiple fundamental limitations of existing discrete approaches.

## 2 Related Work

_Cloth Simulation_ is a well-studied problem [1; 9; 21; 26; 59; 38; 34; 51], with the first methods dating back to the 1980s [2; 55]. The computational flow of the modern simulation approaches includes: Discretisation using the finite element method (FEM) [18; 45], implicit time-integration [1; 32], frictional contact [33; 42], and collision handling [46; 54; 26]. Cloth simulators model real fabric behaviors [15; 61], which is typically done by fitting constitutive material models. Liang et al.  and Li et al.  introduced differentiable cloth simulators, which were subsequently shown to be

Figure 1: NeuralClothSim is the first neural cloth simulator representing surface deformation as a neural field. It is supervised for each target scenario with the laws of the Kirchhoff-Love thin shell theory with non-linear strain (left). Once trained, the simulation can be queried _continuously_ and _consistently_ enabling different spatial resolutions (center). NeuralClothSim can also incorporate learnt priors such as material properties that can be edited at test time (right).

also useful in 3D reconstruction as a physics-based prior [28; 37]. Zhang _et al_.'s approach [67; 68] enables interactive exploration of cloth parameters with progressively consistent quasistatics. Another category of methods constitutes _neural cloth simulators_. Pfaff et al.  proposed to learn simulations using graph neural networks. Bertiche et al.  is a neural simulator for static draping of garments on a virtual character. It is further extended with self-supervised approaches [51; 8] to learning garment dynamics. They leverage physics-based loss terms and do not require simulated ground-truth data. However, these methods are application-oriented rather than approaches for general cloth simulation, as the garments are skinned to the human body and garment deformations are driven by body shape and poses. Several methods for cloth simulation rely on the Kirchhoff-Love shell theory [19; 24]. The energy functionals in the theory require higher-order derivatives, which are not available for general unstructured triangle meshes. In their pioneering work, Cirak et al.  present Loop subdivision with control meshes that meet this additional \(C^{1}\) interpolation requirement, which is extended to dynamic cloth simulation with corotational strains . NURBS isogeometry  also enables continuity, whereas recent methods [16; 31] rely on Catmull-Clark subdivision surfaces and model the geometric non-linearity of shells. All the aforementioned cloth simulators (traditional FEM, neural, and Kirchhoff-Love) use discrete surface representation (_i.e._, meshes) with several inherent limitations. The representation is not adaptive, and simulations suffer from coarse-to-fine inconsistency and are sensitive to initial discretisation.

_Neural Fields._ Recent approaches parameterising surfaces as neural fields [62; 53; 44; 43; 58] offer a promising alternative to meshes. As a common theme, these methods use coordinate-based MLP for neural field parameterisation, which takes coordinates in the spatio-temporal domain and returns the task-specific property, _e.g._ occupancy or SDF values. For a detailed discussion, we refer to the survey of Xie et al. . However, none of the works focus on integrating such neural fields into the cloth simulation, which is the main goal of the proposed work.

_Neural Networks for Solving PDEs/ODEs._ Several recent approaches [50; 49; 12; 66; 35], also dubbed Physics-Informed Neural Networks (PINNs), leverage neural networks for solving tasks that are supervised by the laws of physics; we refer to a recent survey from Hao et al.  for a detailed review. Chen _et al_. [11; 10] use implicit neural representation to accelerate  or replace  PDE solvers. However, they do not demonstrate thin-shell simulation. While previous works such as Rao _et al_.  and Zehnder _et al_.  applied neural implicit representations for volumetric elastodynamic problems, our approach focuses on realistic thin-shell and cloth simulation. It addresses important simulation aspects such as geometric non-linearities and the integration of non-linear anisotropic models that are crucial for simulating large deformations and rotations. Another method  allows the processing of neural fields encoding geometric structures. Conceptually, the most closely related to ours is the work of Bastek and Kochmann , however, there are important differences to our work. First, they model linear small-strain regime for Naghdi shells, whereas we model the full non-linear stretching and bending behaviour of clothes. Second, we propose several architectural improvements --periodic activation functions, periodic boundary conditions, data-driven orthotropic material model-- that are necessary for producing realistic wrinkles and folds, and demonstrate generalisation to point loads, different material and boundary values. Next, we present a short background on Kirchhoff-Love theory that enables us to model a cloth deformation as a thin shell.

## 3 Kirchhoff-Love Thin Shell Theory for Cloth Modeling

Before we explain our method, we define our cloth representation. We characterise cloth as a thin shell and model its behaviour with the Kirchhoff-Love theory [39; 63]. A thin shell is a 3D geometry with a high ratio of width to thickness. The shell continuum can be kinematically described by the _midsurface_ located in the middle of the thickness dimension and the _director_, a unit vector directed along fibres in the shell that are initially perpendicular to the midsurface. The Kirchhoff hypothesis states the director remains straight and normal, and the shell thickness \(h\) does not change with deformation (see inset). We provide a detailed review of Kirchhoff-Love thin shell theory in App. B.

_Notation._ Throughout the document, we use Greek letters for indexing quantities on the midsurface, _e.g._, \(_{},,,...=1,2\), and Latin letters for indexing quantities on the shell, _e.g._, \(_{i},i,j,...=1,2,3\). Italic letters \(a,A\) indicate scalars, lower case bold letters \(\) indicate first-order tensors (vectors), and upper case bold letters \(\) indicate second-order tensors. An index can appear as a superscript or subscript. Superscripts \(()^{i}\) refer to contravariant components of a tensor, which scale inversely with the change of basis, whereas subscripts \(()_{i}\) refer to covariant components that change in the same way as the basis transforms. Moreover, we use upper dot notation for time derivatives, lower comma notation for partial derivatives with respect to the curvilinear coordinates, \(^{i}\), and vertical bar for covariant derivatives, _e.g._, \(}=/ t\), \(_{:}=/^{}\), and \(u_{}|_{}\), respectively. Geometric quantities with overbar notation \(()\) refer to the reference configuration. Additionally, Einstein summation convention of repeated indices is used for tensorial operations, _e.g._, \(_{}_{}^{}=_{ 1}_{ }^{1}+_{ 2}_{}^{2}\). A detailed list of notations can be found in Tab. 2 in Appendix B.

## 4 Method

We propose NeuralClothSim, _i.e.,_ a new approach for continuous and consistent quasistatic cloth simulation relying the thin shell theory. We seek to generate a complex simulation state at equilibria given a cloth geometry in a reference configuration, its material properties and external forces. The physical basis for our cloth quasistatics is the nonlinear Kirchhoff-Love thin shell equations that model the stretching and bending of cloths in a unified manner. We parameterise the cloth states as a neural deformation field (NDF) defined over a continuous parametric domain (Sec. 4.1). We explicitly account for positional and periodic boundary conditions, incorporated as hard constraints (Sec. 4.2). NDF is optimised using a loss function based on the potential energy functional (Sec. 4.3). Fig. 3 provides a method overview.

### Neural Deformation Field (NDF)

At the core of our approach is a _neural deformation field_ (NDF), a continuous representation of cloth quasistatics, entirely parameterised by a neural network. Following Sec. 3, we model cloth geometry as a Kirchhoff-Love thin shell. Given the rest state \(}()\) of a cloth, we describe the equilibrium state \(()\) of its midsurface under the action of external forces \(()\) and boundary constraints \(_{d}()\) using

\[()=}()+(),:=(^{1},^{2}).\] (1)

The curvilinear coordinate space \((^{1},^{2})\) can (but does not need to) naturally correspond to the orthotropic warp-wert structure of woven clothes. As examples, the reference state associated with a flat square cloth of side \(L\) in the \(xy\)-plane and that of a garment sleeve (radius \(R\), length \(L\)) admitting a natural parameterisation with cylindrical coordinates are:

\[}()&=[^{1}, ^{2},0]^{},(^{1},^{2})[0,L]^{2},\\ }()&=[R^{1},^{2},R ^{1}]^{},\ ^{1}[0,2);^{2}[0,L].\] (2)

Analytically defining surface parameterisations might not be feasible for reference geometries given as meshes. In such cases, we learn the reference parametrisation by fitting an MLP \(}(;)\) with parameters \(\) to the reference mesh. Specifically, we learn \(}\) by supervising it with the \(_{2}\)-loss \(()=||}(};)-}||_{2}^{2}\), where \(}^{3}\), \(}^{2}\) are the vertices and texture coordinates of the given reference mesh. The advantage of this preprocessing over directly using the reference mesh is that we can continuously sample in the parametric domain by querying the MLP and compute all the geometric quantities at these points, similar to analytical access to the reference surface. Our key

Figure 3: **NeuralClothSim** takes as input a thin shell in the reference state and its material properties, boundary motion and external forces. It then learns an NDF, _i.e.,_ a coordinate-based implicit 3D deformation field. At inference, NDF can be _continuously_ queried for the deformed state of the surface at equilibrium using curvilinear coordinates from the parametric domain. We use the Kirchhoff-Love thin shell modelling to supervise the cloth quasistatics with the potential energy functional.

Figure 2: Kirchhoff-Love shell

idea is to regress the displacement field \(()\) using an MLP \(_{}:^{3}\) and optimise its weights \(\) to minimise the total potential energy of the thin-shell cloth. Specifically, the NDF \(\) is formulated as follows:

\[(;)=_{}(_{p}()) _{d}(),\] (3)

where \(_{p}()\) and \(_{d}()\) are functions that respectively account for periodic and Dirichlet boundary conditions. In Sec. 4.2, we elaborate on encoding such conditions as hard constraints.

Apart from being parameter-differentiable, _i.e.,_ the gradient \(_{}_{}\) is defined everywhere, \(_{}\) needs to be input-differentiable, _i.e.,_\(_{}^{2}_{}\) must exist likewise, in order to compute the strains required for the Kirchhoff-Love energy functional. This restricts the activation function used in the network; only \(C^{2}\)-continuous non-linearities can be used. Therefore, we use periodic sine as the preferred activation function  as it can represent high-frequency signals (needed for folds and wrinkles) while allowing for computing higher-order derivatives. Note that unlike NDF \((;)\), we use GELU  activations for smoothly fitting the reference shape, \(}(;)\). Sec. 4.3 describes the optimisation procedure to train the deformation field \((;)\).

Once trained, \(_{}\) provides _continuous_ access to the cloth quasistatics, where the network can be queried at any point in the spatial domain \(\). Based on the requirement for downstream applications, parametric input samples during inference can be _different_ and their number can be _higher_ than those during training, since it does not require the expensive computations of physical quantities; see Fig. 1. Thanks to our continuous formulation, at inference, different discretised meshing and texturing operations in the parametric domain \(\) can be lifted from 2D to 3D using \((;)\), which will lead to consistent result irrespective of the specific discretisation (see also Fig. 6).

### Boundary Conditions

A practical cloth simulator allows for imposing conditions such as a user-specified corner motion; for most garments, the simulation needs to be continuous and consistent along the seams. We seek to strictly enforce these conditions in our method. We achieve this by formulating boundary conditions as spatial distance functions, and seams as periodicity constraints along a curvilinear coordinate (such as the azimuthal angle of a cylindrically parameterised sleeve), and directly apply them to the NDF in Eq. (3).

_Dirichlet Boundary Conditions._ To constrain boundary positions, we require \((_{})=\) for some specified list of parameter space points \(_{}\) along the boundary segment \(\). While we elaborate on the simpler case here, it is also possible to specify complex conditions _i.e.,_\((_{})=(_{})\), detailed in Appendix D. One solution is to sample points in the boundary segment and enforce the boundary conditions through separate loss terms. As shown in previous physics-informed neural networks , having competing objectives during training can lead to unbalanced gradients, which causes the network to often struggle with accurately learning the underlying solution. Further, there is no guarantee that the boundary conditions will always be enforced. Therefore, we propose to modify the NDF to embed _essential_ boundary conditions as hard constraints . Specifically, a distance function \(_{d}()\) satisfying \(_{d}()=0,\\ >0,\) ensures that any instance of deformation field \((,t;)\) automatically satisfies the boundary conditions. We set

\[_{d}(^{1},^{2}):=1-e^{-((^{1}-^{2}_{})^{2 }+(^{2}-^{2}_{})^{2})/}(^{1}_{},^{2}_{}) ,(^{1},^{2})\] (4)

as a distance function with small support \(=0.01\). Fig. 4 provides an illustrative example.

The above formulation supports point and shape constraints in the cloth interior, _i.e.,_\(\) can likewise be a boundary segment inside the domain (Fig. 4-appendix). Moreover, if the initial geometry is provided as a mesh (instead of an analytical definition), point constraints can be directly provided as mesh vertices, with \((^{1}_{},^{2}_{})\) corresponding to texture coordinates of the vertex; see Fig. 6-(right).

_Periodic Boundary Conditions._ In contrast to the positional or motion-dependent boundary conditions specified as per the user's desires, additional boundary conditions can arise from the geometric

Figure 4: **Boundary conditions.** In contrast to Dirichlet conditions that alter the network output (c), we impose periodic boundaries by remapping the network input to its sine and cosine values (d).

cloth parametrisation. Points along the panel seams of the garment share the world-space position and velocity, though they are mapped to different values in the parametric domain. We express continuity in geometry and simulation using periodic conditions. Consider any simulation involving a sleeve: Our method needs to guarantee the additional condition due to the parametrisation, _i.e.,_\((^{1},^{2})=(^{1} 2n,^{2})\). Whereas the Dirichlet condition is imposed by altering the network output, we _strictly_ impose periodic boundaries by modifying its input. Recall that any continuous periodic function can be written using its Fourier series. If \(()\) is a periodic deformation field with period \(P\) w.r.t. the input coordinate \(^{}\), \(()\) can be decomposed into a weighted sum \(\{1,(2n^{}/P),(2n^{}/P)\},n\). Due to the universal approximation power of MLP, only the first cosine and sine terms need to be considered, as the others can be expressed as the nonlinear continuous functions of \((2^{}/P)\) and \((2^{}/P)\). Hence, we map \(^{}\) using \(^{}\{^{},^{}\}\) when feeding it to the MLP, enforcing periodicity of the predicted NDF along \(^{}\). This completes the definition of boundary conditions applied during both training and inference.

### NDF Optimisation

We next explain optimisation in NDF learning. Note \(\) for \(()\) and derived quantities are dropped.

_Strain Computation._ To compute the geometric strains due to the thin shell deformation, we evaluate the NDF on samples from the curvilinear coordinate space \(\). We generate \(N_{}\) points using a stratified sampling approach. This ensures that the samples are random, yet well-distributed. At each training iteration, we re-sample coordinates to learn an NDF that fully explores the continuous domain over the course of the optimisation. We evaluate NDF \(()\) at all samples using Eq. 3 and this prediction (_i.e.,_\(_{i}\)) is assumed to be in the Cartesian coordinate system, _i.e.,_\(=_{i}_{}\). Our further strain computations (Eq. 6) require covariant deformation components in the reference contravariant basis, _i.e.,_\(=u_{}}^{}+u_{3}}^{3}\), therefore we use the basis transformation matrix \(=[}^{1}\ }^{2}\ }^{3}]^{-1}\) for converting from Cartesian deformation coordinates to covariant coordinates (see Appendix B for detailed Kirchhoff-Love preliminaries). While it is possible to predict in the local contravariant basis directly, the global basis is better suited for NDF training since the local basis vectors are not normalised, and the basis varies with the input position \(\), especially noticeable for reference geometries such as sleeve (Fig. I-(b)-appendix).

Next, we describe the ingredients required to evaluate the internal strain energy \(\). Membrane strain \(=[_{}]\) and bending strain \(=[_{}]\) measure the in-plane stretching and the curvature change, respectively, and are defined as \(_{}:=(a_{}-_{})\), and \(_{}:=_{}-b_{}\) where \((_{},a_{})\), and \((_{},b_{})\) are the metric and curvature tensors of reference and deformed misturface. With the assumptions of Kirchhoff-Love theory and following , we simplify these equations to directly operate on \(\) and evaluate strains as

\[_{}&=( _{}+_{}+_{}_{ }^{}+_{}_{ 3}),\\ _{}&=-_{}|_{ }-_{}^{}_{}+_{3}^{}( _{}|_{}+_{}_{  3}-_{}_{ 3}),\] (5)

where the deformation gradients \(_{},_{ 3}\) are the components of \(_{,}\) such that

\[_{,}=_{}}^{}+ _{ 3}}^{3},_{}:=u_{}|_{}- _{}u_{3},\ \ _{ 3}:=u_{3,}+_{ }^{}u_{}.\] (6)

We do not linearise the strain. Orange and teal correspond to the linear and the non-linear components, respectively. To evaluate the derivatives of geometric quantities based on NDF \(\) w.r.t. inputs \(\) (as part of strain computation), we use automatic differentiation of machine learning frameworks .

_Cloth Material Model._ A thin shell develops an internal potential energy due to deformation and the material's hyperelasticity. As in the cloth simulation literature [34; 67], we write the internal hyperelastic energy density as a function of the stretching and bending strains, \((,,^{3};z(}),,h)\). Here, \(\) are the cloth's material parameters and \(^{3}[-,]\) is the thickness coordinate, and \(z(})\) are geometric quantities derived from the reference multivace \(}\). Our neural field-based cloth simulation is orthogonal to the research on material modelling and can, thus, be formulated with many different elastic models, as long as the elasticity can be represented as an energy density function. For example, a linear isotropic  stress-strain relationship leads to strain energy of the form \(=(DH^{}_{} _{}+BH^{}_{} _{}),\) where \(D\) is the in-plane stiffness and \(B\) is the bending stiffness computed as \(D:=}\) and \(B:=}{12(1-^{2})},\) with Young's modulus \(E\), Poisson'sratio \(\), and \(H^{}:=^{}^{}+ (1-)(^{}^{}+^{ }^{})\) with \(^{}\) being the contravariant metric tensors. Alternatively, we support the data-driven non-linear anisotropic material model of Clyde _et al_.  that has been carefully constructed to fit measured woven fabrics. We refer to Appendix B.3 for the mathematical details of the non-linear model.

Energy Optimisation.A thin shell's stable equilibrium is characterised by the principle of minimum potential energy, i.e. the sum of external potential energy owing to forces \(\) and internal potential energy \(\) due to material elasticity. The total potential energy \(\) reads as \([]=_{}\,d-_{} \,d\), and the stable equilibrium deformation \(^{*}\) can be found by minimising the energy functional subject to boundary constraints \((^{1},^{2})=(^{1},^{2})\) on \(\). We take advantage of the variational structure of \([]\) and minimise it directly with gradient descent. All operations of our energy computation are naturally differentiable, and we estimate the integral as a sum over continuous parametric domain. For linear isotropic materials, we arrive at the following loss function to optimise the MLP weights for a physically-principled cloth simulation encoded as \(^{*}(;)\):

\[()=}_{i=1}^{_{ }}(D^{}(_{i};)(_{i})(_{i};)+B^{}( _{i};)(_{i})(_{i};)- ^{}(_{i})(_{i};))(_{i})},\] (7)

where \((;)^{4}\), \((;)^{4}\) are vectorised strains computed using (5); \(||=_{}\,d^{1}d^{2}\) is the area of the parametric domain; \(()^{4 4}\) depends only on the reference surface. For data-driven materials , the strain energy is additionally a function of thickness coordinate \(^{3}\). Hence, we integrate \(\) along the thickness with the Simpson's 3-point rule (similar to ) _i.e_., \([]=_{}_{-}^{} \,d^{3}\,d-_{}_{-}^{}}\,d^{3}\,d\), where \(}=+^{3}\) is the deformation for a point on the shell continuum and \(\) quantifies the change in the midsurface orientation (see Appendix B.2).

## 5 Experimental Evaluation

We next present the qualitative and empirical results highlighting the new characteristics of our continuous neural fields, including validation (Sec. 5.1), simulation results (Sec. 5.2), comparison to prior works (Sec. 5.3), and applications (Sec. 5.4).

### Obstacle Course

A scrupulously modelled thin shell, and consequently cloth, must be able to handle inextensional bending modes, complex membrane states of stress, and rigid body motion without straining. Therefore, for validation, we use the engineering obstacle course of benchmark problems from Belytschko et al. , for which the analytical solutions are known for linearised functionals. Such problems were previously used in computer graphics  for testing the performance of finite mesh elements. Specifically, we test our method on the square plate , the Scordelis-Lo roof, and the pinched cylinder with rigid diaphragms and free ends examples, for which the original and our deformed shells are shown in Fig. 5. See Tab. 1 for converged numerical results. The results, which show that our method outperforms prior works by a significant margin, demonstrate our method's excellent modelling ability. We further present details

  
**Method** & **Square plate** & **Scordelis-Lo roof** & **Rigid-end cylinder** & **Free-end cylinder** \\  Analytical & 0.487 & 0.3024 & \(1.825\) & \(4.52\) \\ Guo _et al_. & 2.566* & n/a & n/a & n/a \\ Bastek _et al_. & n/a & 0.297 & n/a & n/a \\ Ours, full & 0.487 & 0.3018 & \(1.81\) & \(4.58\) \\  Ours, no periodicity & n/a & n/a & \(3.6\) & \(3.13\) \\ Ours, GELU & 0.496 & 0.288 & \(1.74\) & \(5.7\) \\   

Table 1: **Quantitative evaluation.** We validate the displacements obtained with our method on the Belytschko obstacle course with analytical solutions from . Guo et al.  use different material and match the corresponding reference result. Below, we show the ablation. We highlight that our method outperforms prior works and baselines by a large margin.

Figure 5: **Belytschko obstacle course** for which we generate accurate displacements (rescaled for better visualisation).

of the experiments with the square plate and pinched cylinder, including the experimental setup and visualisations of the full displacement fields, in App. C.

_Scordelis-Lo Roof_ is a non-flat reference shape subject to complex membrane strains, i.e. an open cylindrical shell with radius \(R=$25\,$\), length \(L=$50\,$\) and subtends an angle of \(80^{}\). It is supported with two rigid diaphragms at the ends and loaded by gravity \(=[0,-90,0]^{}\). The shell's material is given as \(E=$4.328\,$,=0$\) and thickness \(h=$0.25\,$\). We obtain the maximum vertical displacement \(u_{2}\) at the centre of the edge (averaged over the two sides) as \(0.3018\), closely approximating the analytical \(u_{2}=0.3024\).

### Qualitative Results

We next present our simulation results. The experiments are performed with the values \(E=$5000\,$\), \(=0.25\), \(h=$0.0012\,$\) for the linear isotropic material, and with parameters from Clyde et al.  for the nonlinear orthotropic material. For the supplemental video, we extend the method to visualise the deformation trajectory (_i.e._, transition from the reference to the equilibrium state). Details on boundary conditions, external forces, and time-stepping can be found in Appendix D.

_Napkin._ We first consider a square napkin of length \(L=$1\,$\), falling freely under the effect of gravitational force. The napkin has a flat reference state in the _xy_-plane given by (2), and the gravitational force field is applied along the negative _y_-axis, _i.e._, external force density \(=[0,-9.8,0]^{}\). We specify a fixed boundary condition at the top left corner to constrain the napkin movement. The meshes extracted from the trained NDF are visualised in Fig. 1-(center). Note that apart from its realism, one can also query the simulation at arbitrary resolution in the case of NeuralClothSim. Next, we perform another experiment with a napkin subject to gravity and dynamic boundary condition, _i.e.,_ in which the corners move inwards. This leads to fold formation at the top, as visualised in Fig. 4-(a) and in Fig. 2 for varying fabrics such as cotton and silk.

_Sleeve._ We also consider a cylindrical shell and perform sleeve compression and twisting. In both cases, we consider the reference state (2) with \(L=$1\,$\) and \(R=$0.25\,$\). See Figs. 4-(b) and 7-(b) for visualisations. In the first case, we apply torsional motion on the sleeve, _i.e.,_ a total rotation of \(\) around the _y_-axis to both the top and bottom rims. The optimised NDF forms wrinkles at the centre as expected . In the second case, we compress the sleeve to produce the characteristic buckling effect. There are no external forces here and the compression is entirely specified by boundary conditions. We achieve a total displacement of \(0.2\,\) due to compression with the inward motion of the top and bottom rims along the cylinder axis; see Fig. 4-(right). The demonstrated simulation is a representative example of strain localisation, with noticeable diamond patterns of shell buckling.

### Comparisons to Previous Methods

In this section, we compare NeuralClothSim to state-of-the-art FEM cloth simulators and physics-informed neural networks for shell structures. We do not compare to other neural simulators [8; 51], as they do not support simulating non-garment cloths, whereas ours is a general neural cloth simulator.

_Cloth Simulators._ Next, we validate the consistency of cloth simulations at different discretisations of the reference state. We consider two scenarios: 1) A napkin with a fixed corner under gravity simulated with our approach and DiffARCSim  (Fig. 6-left), and 2) a flag with two fixed corners deforming under wind and gravity simulated with our approach and DiffCloth  (Fig. 6-right). In both scenarios, we simulated ours and compared methods thrice, starting with a marginally perturbed meshing of the same initial geometry resulting in different mesh discretisations. In the case of NeuralClothSim, we learn the reference parameterisation by fitting an MLP \(}(;)\) for each initial discretisation followed by NDF optimisation. We find that the simulated meshes extracted from NDF are consistent for all discretisations. In contrast, for competing FEM-based methods, simulation is sensitive to the discretisation; while multiple simulations with the same initial mesh produce identical results, slightly different meshing generates inconsistent simulations. Theoretically, a well-defined FEM-based cloth solver should lead to consistent simulation results under different discretisation at high mesh resolutions. To investigate this, we perform an additional experiment where we increase the resolution of the ARCSim simulation (\(10k\) vertices) so that the computation time roughly matches ours. However, the results still contain noticeable inconsistencies (Fig. XIV-appendix), possibly due to several operations that are highly discretisation-dependent  (such as the bending model relying on the dihedral angles). In contrast, our method leads to consistent results already at much coarser discretisations (400 vertices, Fig. 6).We next evaluate the memory efficiency for simulations generated by NeuralClothSim, DiffARCSim and DiffCloth. The simulations are chosen to be of similar complexity, and qualitative results are visualised in Fig. XIII-appendix. In Fig. XV-appendix, we then plot the memory requirement as a function of spatial resolution. Memory is recorded for the simulated mesh states for the compared methods and weights of the NDF network for ours. While the memory requirement of finite-element-based methods grows linearly as the function of the number of vertices in the simulated cloth, our approach requires a constant and comparably small memory volume to store the quasistatic simulations. For better memory efficiency, existing simulators offer adaptive refinement (such as ARCSim ) by re-meshing at each time step (coarse triangulation is used at smooth regions, and fine meshes are used for wrinkles). However, this requires additional computation and loss of important characteristics, such as differentiability. In contrast, our approach is adaptive without the overhead and without losing correspondence and differentiability due to re-meshing.

_PINNs for Shells._ Bastek _et al._ focus on engineering scenarios, and we compare the solutions to the Scordelis-Lo roof and a square plate in Tab. 1; both ours and theirs closely match the reference solutions. Bastek _et al._ note instabilities during training a neural network trained on a point load, therefore, define the Gaussian force kernel in their pinched hemisphere example. In contrast to their, we propose a new loss function for point loads (see App. C) addressing the pinched cylinder obstacle course. While Bastek _et al._ show converged results on engineering examples, their method cannot capture the high-frequency signal (folds and wrinkles) required for cloth simulation; see Fig. 7 for an illustrative example. The main reasons for their failure are 1) the linear strain and 2) that their activation function (GELU) can capture only smooth signals.

### Ablation and Applications

_Ablation._ We evaluate the following ablated versions of our approach: 1) Contravariant coordinate system for NDF components, 2) Using a linear approximation of the strains instead of our model, 3)

Figure 6: **Simulation consistency.** At different initial state discretisations, FEM-based simulators lead to inconsisies with often differences in the folds or wrinkles. In contrast, ours overfits an MLP to the reference mesh and encodes the surface evolution using another MLP (_continuous_ neural fields). lead to inconsistent results with often occurring differences in the folds or wrinkles.

Figure 7: **Comparison to Bastek _et al._ on sleeve twisting. While the cylinder in (a) twists without wrinkles, our result (b) is correctly wrinkled, similar to .**

Variants of boundary constraint imposition and 4) Choice of activation functions for NDF. For the latter two, we present the numerical results in Tab. 1. See Appendix E for further details.

Material-conditioningNeuralClothSim can incorporate learnt priors: Our NDF can be directly extended by making it dependent on the material properties, _i.e.,_ it can accept the material parameters as an extra input. This is possible since the material parameter space is typically low-dimensional. Once such NeuralClothSim modification is trained, we can edit the simulated geometry at test time, as shown in Fig. 1-(bottom right). We provide implementation details of conditioning in Appendix F.

Simulation editingFor high-dimensional scene parameters such as reference pose and external forces, we can edit simulations: The user can interrupt the training of NDF at any point, change the parameters and continue the training. Moreover, editing can also be done after full convergence (aka pre-training) and then fine-tuned with gradually modified design parameters. Editing an NDF has multiple advantages over NDF training from scratch: It is computationally and memory efficient, and provides access to interpolated simulations. We provide further details and results in Appendix F.

## 6 Discussion and Conclusion

NeuralClothSim closely matches reference values in challenging cloth deformation scenarios (e.g. the Belytschko course), thanks to compact NDF representation governed by the non-linear Kirchhoff-Love shell theory with (non-)linear orthotropic material. An extended NDF allows test-time interpolation of material properties and simulation editing. In contrast to the previous mesh-based simulators, NeuralClothSim enables querying continuous and consistent equilibrium cloth states. The shown results are physically plausible in different scenarios under time-varying external forces and boundary motions. We also see multiple avenues for future research, such as adding dynamic effects, _i.e._ inertia and damping. Our simulator currently does not support contacts and friction necessary for many applications beyond what is demonstrated here (_cf._ Appendix J on this standalone research problem).

In conclusion, we see NeuralClothSim as an exciting step towards neural-field-based continuous and differentiable cloth simulation. Inverse problems in vision could benefit from its multi-resolution consistency. While there is a long way until other functionalities such as collision handling are unlocked, we believe it can pave the way towards a new generation of physics simulation engines.