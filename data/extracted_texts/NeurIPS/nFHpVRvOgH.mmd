# Inverse-Free Sparse Variational Gaussian Processes

Stefano Cortinovis

University of Oxford

Laurence Aitchison

University of Bristol

James Hensman

Microsoft Research

Stefanos Eleftheriadis

No affiliation

Mark van der Wilk

University of Oxford

## 1 Introduction

Gaussian processes (GPs)  are priors over functions with many desirable properties, but also with many computational difficulties. Despite progress, the popular variational method  is still complicated by the need to invert/decompose the kernel matrix, which is **1)** difficult in low-precision, **2)** less parallelisable than matnuls, and **3)** incurs cubic time cost in model capacity.

Van der Wilk et al.  proposed variational bounds that involve only matnuls by introducing an additional variational parameter \(^{M M}\), which becomes the required inverse at the optimum. This turns the inversion operation into an optimisation problem. Although, in theory, this would not introduce performance gaps, _practical_ success requires the optimisation of \(\) to be fast enough to keep up with the changing kernel throughout training. Unfortunately, typical deep learning optimisers were shown to converge unusably slowly.

We solve this through **1)** a preconditioner for a variational parameter, **2)** a tailored update for \(\) based on natural gradients or Newton's method, and **3)** a stopping criterion to determine the number of updates. This leads to an inverse-free method on-par with existing approaches on an iteration basis, with low-precision computation and wall-clock speedups being the next step.

## 2 Sparse variational Gaussian process (SVGP) parameterisations

We consider learning a function \(f:^{D}\) through Bayesian inference, with a prior \(f()(0,k_{}(,))\) and an arbitrary factorised likelihood with density \(p(|)=_{n=1}^{N}p(y_{n}|f(_{n}),)\). To make predictions, we need to approximate the maximum marginal likelihood hyperparameters \(^{*}=*{argmax}_{} p(|)\), and the posterior \(p(f|)\). To do so, the predominant approach is to use sparse variational Gaussian processes (SVGPs) , which select an approximate posterior distribution \(q(f)\) by minimising the KL-divergence to the true posterior \(p(f|)\). The approximate posterior is constructed by conditioning the prior on \(M\!\!N\) inducing points , at input locations \(\!\!^{M D}\) and output values \(\!=\!f()\), resulting in a variational posterior \(q(f)= p(f_{}|)q()\) (see ). Following variational inference , we minimise \([q(f)||p(f|)|\) by maximising the evidence lower bound (ELBO) with respect to \(\) and parameters \(q()\). In this case, the ELBO becomes 

\[=_{n=1}^{N}_{(_{n},_{n}^{2})} [ p(y_{n}|f(_{n}))]-[q()||p ()],\] (1)

where \(_{n}\) and \(_{n}\) are, respectively, the predictive mean and variance at the input location \(_{n}\). The choice of the parameterisation of the Gaussian distribution \(q()\) can have a significant impact on the optimisation stability and the tightness of the ELBO. Below, we briefly review two commonparameterisations, as well as their relationship with the inverse-free variational bound of van der Wilk et al. . We highlight with red colour the terms in \(_{n}\), \(_{n}^{2}\) and \([q()||p()]\) that involve matrix decompositions.

Marginal parameterisation (M-SVGP).The most common freeform \(q()=(,)\) results in

\[_{n}=_{n}_{}^{-1} ,_{n}^{2}=k_{nn}-_{n}_{ }^{-1}_{}+_{n}_{ }^{-1}_{}^{-1}_{},\] (2) \[[q()||p()]= ((_{}^{-1})+^{} _{}^{-1}-M+|_{}|- ||),\] (3)

where \(_{}=k(,)\), \(_{n}=_{n}^{}=k(,_{n})\), and \(k_{nn}=k(_{n},_{n})\).

Likelihood parameterisation (L-SVGP).Panos et al.  suggest to reparameterise \(q()=(,)\) with \(=_{}}\) and \(=(_{}^{-1}+}^{-1})^{-1}\), where \(}\) is PD diagonal. This results in

\[_{n}=_{n}},_{n}^{2}=k_{nn}- _{n}}^{-1}_{}=: _{n}^{2()},\] (4)

\[[q()||p()]= (-(}^{-1}_{})+}^{}_{}}-M+|}|-|}|),\] (5)

where \(}=_{}+}\). Inverting \(}\) instead of \(\) is more stable and does not need _jitter_ terms, due to having lower-bounded minimum eigenvalue thanks to \(}\).

Inverse-free likelihood parameterisation (R-SVGP).Van der Wilk et al.  develop an inverse-free bound for L-SVGP, starting by upper bounding the predictive variance as

\[_{n}^{2()} k_{nn}+k_{n}( }-2)_{n}=:U_{n},\] (6)

where \(^{M M}\), and with equality when \(=}^{-1}\). Working backwards, they then find that, if the variance \(\) of the marginal parameterisation is reparameterised as \(=_{}-_{}(2- })_{}\), the predictive variance matches the upper bound \(_{n}^{2}=U_{n}\). This improves over the previous inverse-free bound for M-SVGP  by allowing for a closed-form inverse-free bound for the KL term

\[[q()||p()](((}-2) _{})+}^{}_{} }.\] \[.+(})-M-| |-|}|),\] (7)

with equality when \(=}^{-1}\). Putting all this together leads to a new ELBO that **1)** depends on the additional parameter \(\), **2)** is free of matrix decompositions, **3)** is always a lower bound to the L-SVGP ELBO and **4)** recovers the L-SVGP solution when \(=}^{-1}\).

Alternative inverse-free parameterisations.While we do not pursue the idea further in this work, we note that the R-SVGP construction, whereby one exploits an inverse-free upper bound to the predictive variance, is more general and may be applied to parameterisations other than L-SVGP. For instance, starting from M-SVGP, reparameterise \(=_{}}\) and \(=_{}}^{ }_{}\), where \(}\) is PD and \(\) is lower triangular. This results in

\[_{n}=_{n}},_{n}^{2 }=k_{nn}-_{n}(_{}^{-1}- }^{})_{n}.\] (8)

Similarly to Eq. (6), the predictive variance can be upper bounded as

\[_{n}^{2} k_{nn}+_{n}(^{ }_{}-2+})^{}_{n},\] (9)

with equality when \(=(_{}^{-1})\). Working backwards, the upper bound above is equal to the predictive variance induced by the reparameterisation \(=_{}+_{}(^{ }_{}-2+})^{}_{}\). The KL term implied by this choice of \(\) and \(\) admits the upper bound

\[[q()||p()]( ((}-2)^{}_{ })+}^{}^{} _{}}.\] \[.-|}|+[( ,^{})||(,_{ }^{-1})]),\] (10)

with equality when \(=(_{}^{-1})\). The resulting ELBO, which depends on the additional parameter \(\), recovers the popular whitened SVGP parameterisation  at its optimum \(=(_{}^{-1})\). Moreover, while Eq. (10) still contains an inverse in the inner KL term, we show in the next section how one can efficiently minimise the latter with respect to \(\), thereby making the required update for the rest of the parameters effectively inverse-free.

Optimising the inverse-free variational bound

The effectiveness of the R-SVGP parameterisation relies on the ability to optimise \(\) close to its optimal value. In their experiments, Van der Wilk et al.  parameterise \(\) through its Cholesky factor \(\) as \(=^{}\), which they update jointly with the other model parameters using Adam . However, they report that this results in poor optimisation performance even with simple datasets. Here, we solve this problem with a tailored optimisation procedure.

### Inverting matrices iteratively with natural gradients

Given a symmetric PD matrix \(\), the Cholesky factor \(_{^{-1}}\) of its inverse \(^{-1}\) can be written as

\[_{^{-1}}=_{}\,_{}( )\,,_{}():=[(,^{})||(, ^{-1})].\] (11)

Natural gradient (NG) updates are known to converge quickly on KL objectives . In particular, we descend along the natural gradient \(_{}=^{-1}(_{})\), which is found by preconditioning the standard gradient by the inverse Fisher information matrix \(=-_{(x;,^{} )}[_{}^{2}(;0, ^{})]\). For Eq. (11), the natural gradient admits a simple closed-form expression, derived in Appendix A.

**Proposition 1**.: _Let \(()\) be as in Eq. (11). Then,_

\[_{}=[(^{ })-(+(^{ }))],\] (12)

_where \(()\) and \(()\) return the lower triangular part and the diagonal of a matrix._

With this, we can optimise the R-SVGP bound by alternating between two steps:

* **NG step**: for the current \(}\), update \(\) by applying \(_{t+1}=_{t}-_{}_{ {}}\), \(t^{*}\) times.
* **Adam step**: given the current value of \(\), update the other model parameters by applying an Adam update to maximise the R-SVGP bound.

Crucially, the expression for the natural gradient in Eq. (12) does not involve matrix decompositions, thereby maintaining the overall optimisation procedure _inverse-free_. Interestingly, such an update for \(\) is related to the well-known Newtonian iteration for computing the inverse of a matrix .

The R-SVGP parameterisation introduces some slack to the L-SVGP objective through the upper bound on the predictive variance \(_{n}^{2()}\) in Eq. (6). For Gaussian likelihoods, we can monitor such a bias to choose the number \(t^{*}\) of NG updates for \(\). This approach is similar in spirit to several stopping criteria used for conjugate gradient approximations of Gaussian processes [11; 4]. We start by deriving the following lower bound on \(_{n}^{2()}\), which is proved in Appendix B.

**Proposition 2**.: _Let \(_{n}^{2(L)}\) be as in Eq. (4). Since \(}\) is diagonal and PD, without loss of generality, we can rewrite it as \(}=}^{}+^{2}\), where \(}^{}\) is diagonal and PD. Then,_

\[_{n}^{2(L)} k_{nn}-}(_{nu}_{n}-2_{nu}}_{-}_{ n}+_{nu}}_{-} }_{n})=:L_{n},\] (13)

_where \(}_{-}=_{}+}^{}\), so that \(}=}_{-}+^{2}\)._

By subtracting the upper and lower bounds on \(_{n}^{2()}\), we find the quantity

\[G_{n}:=U_{n}-L_{n}=}||(-})_{n}||^{2}.\] (14)

Moreover, for Gaussian likelihoods, the predictive variance \(_{n}^{2}\) enters the expectation component of the ELBO through the term \(-}^{2}}_{n=1}^{N}_{n}^{2}\), where \(_{}^{2}\) is the likelihood variance. Therefore, the stopping criterion \(G:=_{n=1}^{N}G_{n} 2_{}^{2}\) ensures that the gap between the R-SVGP and L-SVGP bounds due to the approximation of \(_{n}^{2()}\) is at most \(\).

### Improving the performance of L-SVGP with inducing mean preconditioning

When \(\) is optimised perfectly, the R-SVGP bound coincides with the L-SVGP bound. Hence, the ability for L-SVGP to reach competitive performance is a necessary condition for R-SVGP to do the same. Unfortunately, we find across a range of experiments that the L-SVGP bound is more difficult to optimise than the standard M-SVGP bound, often leading to worse predictive performance. We identify the cause of this issue in the inducing mean parameterisation \(=_{}}\) and we propose to address it by pre-multiplying \(}\) with the matrix \(}^{-1}=(_{}+})^{-1}\). The intuition behind this change is that, in the case where the data points \(\) and the inducing inputs \(\) coincide, the resulting posterior mean \(_{n}=_{n}(_{}+}) ^{-1}}\) is precisely in the form of the true posterior mean of a GP with Gaussian likelihood, for which \(}=_{}^{2}\) and \(}=\)[14; 2]. However, in the R-SVGP bound, we cannot simply pre-multiply \(}\) with \(}^{-1}\) without defeating the purpose of it being inverse-free. Instead, we use \(\) as an approximate preconditioner. In doing so, we also hardcode the custom gradient of \(}\) wrt \(}\) as if \(\) was exactly equal to \(}^{-1}\). Our hope is that, when \(\) is sufficiently well optimised, this will lead to similar benefits.

## 4 Results

To assess the effectiveness of the NG updates for \(\) (Section 3.1) and the inducing mean preconditioning (Section 3.2), we compare versions of the R-SVGP bound that take advantage of either or both of these tools. The main baseline is the R-SVGP bound without preconditioning and where \(\) is trained with Adam, as in van der Wilk et al. . In this context, the optimisation of the R-SVGP bound is successful when the resulting model matches the performance of the one trained with the corresponding L-SVGP bound. In all comparisons, we include the M-SVGP parameterisation, which is the de facto standard baseline for stochastic variational GP approximations. The setup of all the experiments discussed below is presented in Appendix C.

The benefits of the tools proposed in Section 3 are apparent even in toy datasets. Fig. 1 shows training loss traces for each bound optimised on the snelson regression and banana classification datasets. In both cases, the R-SVGP bounds with NG updates (i.e. R-SVGP-N and R-SVGP-NP) match the performance of the corresponding L-SVGP bounds (i.e. L-SVGP and L-SVGP-P, respectively).

Conversely, the bounds trained only with Adam suffer from either much slower convergence (R-SVGP) or worse results (R-SVGP-P) than their NG-counterparts. Furthermore, preconditioning is crucial for the L-SVGP and R-SVGP bounds to match the performance of M-SVGP. However, it is only beneficial for R-SVGP when coupled with the NG updates. This is explained by the fact that, as discussed in Section 3.2, preconditioning is expected to help only when \(\) is a good enough approximation to \(}\). As shown in Appendix D.1, this is usually only the case when we use NG updates.

Figure 1: Loss traces on snelson and banana datasets. The P and N suffixes in the legend names refer to the use of inducing mean preconditioning (Section 3.2) or NG updates (Section 3.1), respectively.

[MISSING_PAGE_FAIL:5]

*  James Hensman, Nicolo Fusi, and Neil D. Lawrence. "Gaussian processes for big data". In: _arXiv preprint arXiv:1309.6835_ (2013).
*  James Hensman, Alexander G. de G. Matthews, Maurizio Filippone, and Zoubin Ghahramani. "MCMC for variationally sparse Gaussian processes". In: _Advances in neural information processing systems_ (2015).
*  Diederik P. Kingma. "Adam: a method for stochastic optimization". In: _arXiv preprint arXiv:1412.6980_ (2014).
*  David J. C. MacKay and Mark Gibbs. "Efficient implementation of Gaussian processes". In: _Neural Computation_ (1997).
*  Alexander G. de G. Matthews. "Scalable Gaussian process inference using variational methods". PhD thesis. University of Cambridge, 2017.
*  Alexander G. de G. Matthews, Mark Van Der Wilk, Tom Nickson, Keisuke Fujii, Alexis Boukouvalas, Pablo Le, Zoubin Ghahramani, James Hensman, et al. "GPflow: a Gaussian process library using TensorFlow". In: _Journal of Machine Learning Research_ (2017).
*  Aristeidis Panos, Petros Dellaportas, and Michalis K. Titsias. _Fully scalable Gaussian processes using subspace inducing inputs_. arXiv:1807.02537 [cs, stat]. 2018. doi: 10.48550/arXiv.1807.02537.
*  Joaquin Quinonero-Candela and Carl E. Rasmussen. "A unifying view of sparse approximate Gaussian process regression". In: _The Journal of Machine Learning Research_ (2005).
*  Andrew Richards. _University of Oxford Advanced Research Computing_. 2015. doi: Zenodo.10.5281/zenodo.22558.
*  Hugh Salimbeni and Marc Deisenroth. "Doubly stochastic variational inference for deep Gaussian processes". In: _Advances in neural information processing systems_ (2017).
*  Hugh Salimbeni, Stefanos Eleftheriadis, and James Hensman. "Natural gradients in practice: non-conjugate variational inference in Gaussian process models". In: _International Conference on Artificial Intelligence and Statistics_. PMLR. 2018.
*  Edward Snelson and Zoubin Ghahramani. "Sparse Gaussian processes using pseudo-inputs". In: _Advances in neural information processing systems_ (2005).
*  Michalis Titsias. "Variational learning of inducing variables in sparse Gaussian processes". In: _Proceedings of the Twelfth International Conference on Artificial Intelligence and Statistics_. 2009.
*  Mark Van der Wilk. "Sparse Gaussian process approximations and applications". PhD thesis. University of Cambridge, 2019.
*  Mark van der Wilk, Artem Artemev, and James Hensman. "Improved inverse-free variational bounds for sparse Gaussian processes". In: _Fourth Symposium on Advances in Approximate Bayesian Inference_. 2022.
*  Mark van der Wilk, ST John, Artem Artemev, and James Hensman. "Variational Gaussian process models without matrix inverses". In: _Symposium on Advances in Approximate Bayesian Inference_. PMLR. 2020.
*  Christopher K. I. Williams and Carl E. Rasmussen. _Gaussian processes for machine learning_. MIT press Cambridge, MA, 2006.

Proof of Proposition 1

Proof.: Given the decomposition for our variational parameter \(=^{}\), our goal is to find the optimal \(\) so that \(=(_{}+})^{-1}\), without explicitly computing the inverse. We consider the problem of finding the Cholesky factor of the inverse of a matrix \(\) via:

\[_{^{-1}}=_{}\,_{}()_{}():=[( ,^{})||(,^{- 1})].\] (15)

The above optimisation problem describes the update we take in the direction of the natural gradient:

\[}=^{-1},\] (16)

where \(\) and \(}\) are column vectors denoting the gradient and the natural gradient of \(_{}\) wrt \(\), while we denote with \(\) the Fisher information matrix of the distribution \(p(;)=(|,^{})\) parameterised by \(\):

\[=-_{p}[}{()\,(^{})} p( ;)],\] (17)

with \(()\) the column-wise vectorisation operator.

We start by computing the gradient of the loss \(_{}\) wrt \(\). As in Eq. (11),

\[_{}()=[p(;) ||(,^{-1})]=( {tr}(^{})-|^{} |)+c_{1},\] (18)

where \(c_{1}\) is a constant that does not depend on \(\). The first differential of \(_{}\) with respect to \(\) is given by

\[_{}= (^{})}_{(a)}- |^{}|}_{(b)}.\] (19)

Term \((a)\) can be computed as

\[( ^{}) =((^{ }))\] \[=( ^{}+^{})\] \[=(^{} )+( ^{})\] \[=2()^{}(),\] (20)

where the last equality holds because \(\) is symmetric. Term \((b)\) is given by

\[|^{}| =^{}|}|^{}|\] \[=^{}|}|^{ }|(^{-}^{-1}( ^{}))\] \[=(^{-}^{-1}^{}+^{-}^{-1} ^{})\] \[=(^{-1})+ (^{-}^{})\] \[=2(^{-})^{}().\] (21)

Putting it all together, the differential of \(_{}\) takes the form

\[_{}=(()+ (^{-}))^{}(),\] (22)

which implies that

\[=()-(^{-}).\] (23)

We now move to computing the Fisher information matrix \(\) of \(p(;)\) wrt \(\). We have that

\[ p(;)=-|^{}|- ^{}^{-}^{-1}+c_{2},\] (24)

where \(c_{2}\) is a constant that does not depend on \(\). The quantity of interest is the expected value of the second differential of \( p(;)\) wrt \(p\), which takes the form

\[_{p}[^{2} p(;)] =-^{2}|^{} |}_{(c)}-_{p}[^{2}( ^{}^{-}^{-1})}_{(d)}]\] (25)because \(|^{}|\) does not depend on \(\). By taking advantage of Eq. (21), term \((c)\) is given by

\[^{2}|^{}| =2\,\,(^{-1}\,\,)\] \[=-2\,(^{-1}\,\,^{-1} \,\,)\] \[=-2\,((^{-1}\,\,)^{ })^{}\,(^{-1}\,\,)\] (26) \[=-2[\,(^{-1}\, \,)]^{}(^{-1}\,\,)\] \[=-2[(^{-1})\,()]^{}(^{-1})\, (\,)\] \[=-2\,()^{}( ^{-})(^{-1})\, (\,)\] \[=-2\,(\,)^{}( ^{-}^{-1})\,(\,),\] (27)

where Eq. (26) follows from \((^{})=()^{}\, ()\), and \(=^{}\) is the commutator matrix such that \(\,()=(^{})\) and \(()=()\).

Similarly, term \((d)\) can be computed starting from the first differential

\[(^{}^{-}^{-1} ) =^{}\,(^{-}^{-1}) \] \[=-(^{-}^{-1}^{}^{-}^{-1}+^{-}^{-1}\, \,^{-1})\] \[=-(^{-}^{-1}^{}^{-}\,^{})-(^{-1} ^{}^{-}^{-1}\,\, )\] \[=-2\,(^{-1}^{} ^{-}^{-1}\,\,).\] (28)

Then, the second differential takes the form

\[^{2}(^{}^{-}^{-1} ) =-2\,((^{-1}^{ }^{-}^{-1}\,\,))\] \[=2[(^{-1}\,\, ^{-1}^{}^{-}^{- }^{-1}\,\,).\] \[+(^{-1}^{ }^{-}^{-}^{-}^{-1} \,\,)\] \[.+(^{-1} ^{}^{-}^{-1}\,\, ^{-1}\,\,)].\] (29)

By taking the expectation wrt \(p\), we have that

\[_{p}[^{2}(^{}^{ -}^{-1})] =2[(^{-1}\,\, ^{-1}^{}^{-}^{-1} \,\,).\] \[+(^{-1} ^{}^{-}^{-}^{-}^{-1}\,\,)\] \[.+(^{-1} ^{}^{-}^{-1}\,\, ^{-1}\,\,)]\] \[=2[2\,(^{-1}\,\, ^{-1}\,\,)+(\, ^{}^{-}^{-1}\,\,)]\] \[=2[2\,(\,)^{}( ^{-}^{-1})\,(\,).\] (30) \[.+(\,)^{ }\,(^{-}^{-1}\,\,)]\] \[=2\,(\,)^{}[2( ^{-}^{-1})+(^{-} ^{-1})]\,(\,),\] (31)

where the first component of Eq. (30) follows from the expression already derived in Eq. (27). Overall, the expectation in Eq. (25) becomes

\[_{p}[^{2} p(;)] =-(\,)^{}[( ^{-}^{-1})+(^{- }^{-1})](\,),\] (32)

which implies that the Fisher information matrix \(\) takes the form

\[ =-_{p}[}{\, \,\,\,^{}} p(; )]\] \[=(^{-}^{-1})+( ^{-}^{-1})\] \[=(^{-})(+)( ^{-1}).\] (33)

By rearranging the terms of \(Eq.\) (16), we have that the natural gradient may be found without explicitly computing the inverse \(\) by solving the equation

\[}=\] (34)for \(}\), under the constraint that the latter is the vectorisation of a lower triangular. Before we proceed, let us introduce the matrix form of the the natural gradient vector as \(}=(})\). Then we compute

\[} =(^{-})(+)( ^{-1})}\] \[=(^{-})(+) (^{-1}})\] \[=(^{-})( ^{-1}}+(^{-1}})^{})\] \[=(^{-}^{-1}}+^{-}(^{-1}})^{}).\] (35)

Then, Eq. (34) is equivalent to

\[^{-}^{-1}}+^{-}( ^{-1}})^{}=-^{- }.\] (36)

By left-multiplying both sides by \(^{}\), we obtain

\[^{-1}}+(^{-1}})^{} =^{}-\] \[=(^{})+(^{})-(^{} )-\] \[=(^{})- (+(^{}))\] \[+[(^{} )-(+(^{} ))]^{},\] (37)

which implies that

\[^{-1}}=(^{} )-(+(^{} )).\] (38)

Finally, by left-multiplying both sides by \(\), we find that

\[}=[(^{} )-(+(^{} ))].\] (39)

Notice that a similar procedure as the one above can be used to derive the natural gradient of the loss \(_{}\) with respect to different parameterisations of the covariance matrix of \(p()\). This includes the marginal parameterisation \(p(;)=(,)\), as well as a general square root parameterisation \(p(;)=(,)\). In particular, it can be shown that, when using the marginal parameterisation, natural gradient descent with unit step size recovers the well-known Newtonian iteration for computing the inverse of a matrix .

## Appendix B Proof of Proposition 2

Proof.: As in the statement of Proposition 2, we use the shorthand \(}_{-}=_{}+}^ {}\), so that \(}=}_{-}+^{2}\). Then, proving the inequality

\[_{n}^{2()} =k_{nn}-_{n}}^{-1}_{n}\] \[ k_{nn}-}(_{n} _{n}-2_{n}} _{-}_{n}+_{n}}_{-}}_{n})\] \[=L_{n}\] (40)

is equivalent to showing that

\[}(_{n}_{n}-2 _{n}}_{-}_{n }+_{n}}_{-}} _{n})_{n}}^{-1}_{n}.\] (41)We write \(_{n}=}^{-1}_{n}+\), where \(\) is the discrepancy due to the error with which \(\) approximates \(}^{-1}\). Notice that both \(}_{-}\) and \(}\) are PSD. Then, we have

\[}(_{n}_{ n}-2_{n}}_{-}_{n}+_{nu}}_{-}} _{n})\] \[=}(_{nu}_{n }-2_{nu}}^{-1}_{n}+ )^{}}_{-}_{n}+(}^{-1}_{n}+)^{}}_{-} }(}^{-1}_{n}+))\] \[=}(_{nu}_{n }-2_{nu}}^{-1}}_{-}_{ n}}}}}.\] \[.+_{nu}}^{- 1}_{n}+ }}}})\] \[=}(_{nu}_{ n}-_{nu}}^{-1}(}-^{2} )_{n}+^{}}_{-} })\] \[=_{nu}}^{-1}_{n}+ }^{}}_{-}}\] \[_{nu}}^{-1}_{n},\] (42)

where the last inequality follow from the fact that the product of two PSD matrices \(}_{-}\) and \(}\) is also PSD, and with equality when \(=\), which is implied by \(=}^{-1}\). 

As already discussed in Section 3, the upper bound \(U_{n}\) in Eq. (6) and the lower bound \(L_{n}\) in Eq. (13) that we proved above can be monitored to choose the number of NG optimisation steps for \(\). In particular, by subtracting \(U_{n}\) and \(L_{n}\), we find the quantity

\[G_{n} =U_{n}-L_{n}\] \[=k_{n}} _{n}-2_{nu}_{n}+}(_{n}_{n}-2_ {n}}_{-}_{n}+_{nu}}_{-}} _{n})\] \[=}(_{nu}_{ n}-2_{nu}(}_{-}+^{2}) _{n}+_{nu}(}_{-}+ ^{2})}_{n})\] \[=}||_{n}-} employing upper and lower bounds on Eq. (47), which resemble the bounds \(U_{n}\) and \(L_{n}\), with \(_{}\) replaced by \(\).

## Appendix C Experimental details

### Datasets

For the experiments presented in Section 4 and Appendix D, we use datasets from three sources:

* **UCI repository1**: the elevators (\(N=16599\), \(D=18\), \(B=1000\)), kegglirected (\(N=48827\), \(D=20\), \(B=1000\)), keggundirected (\(N=63608\), \(D=27\), \(B=1000\)) and kin40k (\(N=40000\), \(D=8\), \(B=1000\)) regression datasets; * **OpenML2**:.: the banana (\(N=5300\), \(D=2\), \(B=64\)) classification dataset; * **Other**: the snslon (\(N=200\), \(D=1\), \(B=10\)) regression dataset .

For the snslon and banana datasets we only consider the training fit on the whole dataset, whereas for the UCI datasets we perform a 90/10 train/test split.

### Model setup

For all the bounds and throughout all the experiments:

* We use the ARD squared exponential kernel initialised using the GPFlow defaults;
* We initialise the inducing locations \(\) drawing uniformly without replacement from the training observations;
* We initialise the Gaussian (regression) or Bernoulli (classification) likelihood using the GPFlow defaults.

By default, GPFlow applies whitening to the M-SVGP parameterisation. In particular, the inducing mean and variance are reparameterised, respectively, as \(=_{}}\) and \(=_{}}_{}^ {}\), where \(_{}\) is the Cholesky factor of \(_{}\). In experiments not reported here, we found M-SVGP with whitening to generally exhibit better optimisation performance than standard M-SVGP on the datasets used in this work. For this reason, the results for M-SVGP in Section 4 and in Appendix D refer to the whitened version.

Furthermore, depending on the bound, we initialise the inducing parameters as follows:

* M-SVGP: \(}\) and \(}\) are initialised using the GPFlow defaults;
* L-SVGP: we initialise \(}=\) and \(}=_{}}^{2}\) with \(_{}}^{2}=1^{-4}\);
* R-SVGP: we initialise \(}\) and \(}\) as with L-SVGP, and \(=_{}^{2}\) with \(_{}^{2}=1^{-6}\).

### Training

The mini-batch sizes \(B\) are listed in Appendix C.1, while the number of training iterations is either clear from the figures or mentioned in each specific experimental section in Appendix D, when needed. The learning rate of Adam is kept fixed during training to \(1^{-2}\) for the banana dataset, and to \(5^{-3}\) everywhere else. Lastly, the schedule of the NG updates for \(\) is as follows:

* UCI datasets with \(\) trainable: the initial step size of \(1^{-2}\) is doubled after every NG update until the stopping criterion \(G\) falls below the threshold values of \(1.0\) for elevators and kin40k, and \(1^{-3}\) for kegglirected and keggundirected;
* Everywhere else: a single NG update with step size \(1.0\) is used.

### Implementation

We implement our methods using GPFlow , which is based on Tensorflow . All the experiments were run on a single NVIDIA V100 GPU with 16GB of memory.

## Appendix D Additional results

### Quality of learned \(\)

We aim to evaluate the effectiveness of Adam and NG in keeping the matrix \(\) close to its optimal value throughout training. To do so, we consider the kin40k dataset with \(M=1000\) and initialise \(\) to its optimal value \(}^{-1}\). Then, we train the R-SVGP and R-SVGP-N bounds for \(100000\) iterations. Fig. 2 shows the quality of the \(\) matrix learned by the two methods during training, as measured by \([(,^{}),(,^{-1})]\), which is the NG objective for \(\).

As it can be clearly seen, the NG updates are able to consistently keep \(\) close to its optimal value, whereas this is not the case for Adam. In particular, the R-SVGP bound exhibits the same erratic behaviour observed by van der Wilk et al. , where the quality of \(\) repeatedly improves until a point where it suddenly gets worse, hampering effective training.

### UCI datasets with fixed inducing locations

We evaluate the ability of our method to optimise the R-SVGP bound beyond toy datasets by testing it on four larger UCI regression datasets. In particular, we use each of the bounds discussed in Section 4 to train a sparse variational GP model with fixed inducing locations \(\) for \(20000\) iterations following the specifics described in Appendix C.

Fig. 3 shows the training loss and predictive metrics (RMSE and NLPD) achieved by the models at the end of training for four choices of the number of inducing points \(M\) ranging from \(1000\) and \(4000\). As it can be seen, each of the R-SVGP bounds trained with NG (RSVGP-N and RSVGP-NP) consistently matches the performance of the corresponding L-SVGP bound (LSVGP and LSVGP-P, respectively). In particular, the R-SVGP-NP bound achieves competitive performance compared to the standard M-SVGP parameterisation.

As reported by van der Wilk et al. , we find that the R-SVGP bounds trained only with Adam (i.e. R-SVGP and R-SVGP-P) exhibit erratic performance, and we report their results separately in Fig. 4.

### UCI datasets with trained inducing locations

We repeat the experiments in Appendix D.2, while also training the inducing locations \(\) as part of the Adam step. In this case, the optimisation of \(\) in the inverse-free bounds is more challenging because, when \(\) moves, we expect the optimal value of \(\), \(}^{-1}=(}+})^{-1}\), to change more between iterations compared to when \(\) is fixed. For this reason, for R-SVGP-N and R-SVGP-NP, we perform multiple NG updates at each iteration according to the schedule described in Appendix C.3.

Fig. 5 shows the training loss and predictive metrics (RMSE and NLPD) achieved by the models at the end of training for four choices of the number of inducing points \(M\) ranging from \(1000\) and

Figure 2: Quality of the \(\) matrix learned during training by optimising the RSVGP bound with NG (left) and with Adam (right).

\(4000\). In this case, training \(\) introduces a bit more variance between runs compared to the case where \(\) is fixed. We believe that using a more refined scheduling for the step-size of the NG updates, such as commonly used log-linear scheduling , may help to reduce it. In any case, the main takeaway remains the same: the R-SVGP-NP bound achieves competitive performance compared to the standard M-SVGP parameterisation even when \(\) is trained.

As before, the results for the inverse-free bounds trained only with Adam (R-SVGP and R-SVGP-P) are unstable, and we report them separately in Fig. 6.

Figure 3: Final loss (negative ELBO) and predictive metrics (RMSE and NLPD) on four UCI datasets for different choices of \(M\) with fixed \(\). The legend keys are as in Fig. 1.

Figure 4: Same content as in Fig. 3, with the addition of the RSVGP bounds trained solely with Adam, both with (R-SVGP-P) and without (R-SVGP) inducing mean preconditioning.

Figure 5: Final loss (negative ELBO) and predictive metrics (RMSE and NLPD) on four UCI datasets for different choices of \(M\) with trainable \(\). The legend keys are as in Fig. 1.

Figure 6: Same content as in Fig. 5, with the addition of the RSVGP bounds trained solely with Adam, both with (R-SVGP-P) and without (R-SVGP) inducing mean preconditioning.