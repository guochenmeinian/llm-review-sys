# Privacy-Preserving Logistic Regression Training with

A Faster Gradient Variant

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

Logistic regression training over encrypted data has been an attractive idea to security concerns for years. In this paper, we propose a faster gradient variant called quadratic gradient for privacy-preserving logistic regression training. The core of quadratic gradient can be seen as an extension of the simplified fixed Hessian .

We enhance Nesterov's accelerated gradient (NAG) and Adaptive Gradient Algorithm (Adagrad) respectively with quadratic gradient and evaluate the enhanced algorithms on several datasets. Experiments show that the enhanced methods have a state-of-the-art performance in convergence speed compared to the raw first-order gradient methods. We then adopt the enhanced NAG method to implement homomorphic logistic regression training, obtaining a comparable result by only \(3\) iterations.

There is a promising chance that quadratic gradient could be used to enhance other first-order gradient methods for general numerical optimization problems.

## 1 Introduction

Given a person's healthcare data related to a certain disease, we can train a logistic regression (LR) model capable of telling whether or not this person is likely to develop this disease. However, such personal health information is highly private to individuals. The privacy concern, therefore, becomes a major obstacle for individuals to share their biomedical data. The most secure solution is to encrypt the data into ciphertexts first by Homomorphic Encryption (HE) and then securely outsource the ciphertexts to the cloud, without allowing the cloud to access the data directly. iDASH is an annual competition that aims to call for implementing interesting cryptographic schemes in a biological context. Since 2014, iDASH has included the theme of genomics and biomedical privacy. The third track of the 2017 iDASH competition and the second track of the 2018 iDASH competition were both to develop homomorphic-encryption-based solutions for building an LR model over encrypted data.

Several studies on logistic regression models are based on homomorphic encryption. Kim et al.  discussed the problem of performing LR training in an encrypted environment. They used the full batch gradient descent in the training process and the least-squares method to get the approximation of the sigmoid function. In the iDASH 2017 competition, Bonte and Vercauteren , Kim et al. , Chen et al. , and Crawford et al.  all investigated the same problem that Kim et al.  studied. In the iDASH competition of 2018, Kim et al.  and Blatt et al.  further worked on it for an efficient packing and semi-parallel algorithm. The papers most relevant to this work are  and . Bonte and Vercauteren  developed a practical algorithm called the simplified fixed Hessian (SFH) method. Our study complements their work and adopts the ciphertext packing technique proposed by Kim et al.  for efficient homomorphic computation.

Our specific contributions in this paper are as follows:

1. We propose a new gradient variant, quadratic gradient, which can combine the first-order gradient methods and the second-order Newton-Raphson method as one.
2. We develop two enhanced gradient methods by equipping the original methods with quadratic gradient. The resulting methods show a state-of-the-art performance in the convergence speed.
3. We adopt the enhanced NAG method to implement privacy-preserving logistical regression training, to our best knowledge, which seems to be the best candidate without compromising much on computation and storage.

## 2 Preliminaries

We adopt the square brackets "\([\ ]\)" to denote the index of a vector or matrix element in what follows. For example, for a vector \(^{(n)}\) and a matrix \(M^{m n}\), \([i]\) or \(_{[i]}\) means the \(i\)-th element of vector \(\) and \(M[i][j]\) or \(M_{[i][j]}\) the \(j\)-th element in the \(i\)-th row of \(M\).

### Fully Homomorphic Encryption

Fully Homomorphic Encryption (FHE) is a type of cryptographic scheme that can be used to compute an arbitrary number of additions and multiplications directly on the encrypted data. It was not until 2009 that Gentry constructed the first FHE scheme via a bootstrapping operation . FHE schemes themselves are computationally time-consuming; the choice of dataset encoding matters likewise to the efficiency. In addition to these two limits, how to manage the magnitude of plaintext  also contributes to the slowdown. Cheon et al.  proposed a method to construct an HE scheme with a rescaling procedure which could eliminate this technical bottleneck effectively. We adopt their open-source implementation HEAAN while implementing our homomorphic LR algorithms. It is inevitable to pack a vector of multiple plaintexts into a single ciphertext for yielding a better amortized time of homomorphic computation. HEAAN supports a parallel technique (aka SIMD) to pack multiple numbers in a single polynomial by virtue of the Chinese Remainder Theorem and provides rotation operation on plaintext slots. The underlying HE scheme in HEAAN is well described in [12; 14; 10].

### Database Encoding Method

Kim et al.  proposed an efficient and promising database-encoding method by using SIMD technique, which could make full use of the computation and storage resources. Suppose that a database has a training dataset consisting of \(n\) samples with \((1+d)\) covariates, they packed the training dataset \(Z\) into a single ciphertext in a row-by-row manner.

Using this encoding scheme, we can manipulate the data matrix \(Z\) by performing HE operations on the ciphertext \(Enc[Z]\), with the help of only three HE operations - rotation, addition and multiplication.

Han et al.  introduced several operations to manipulate the ciphertexts, such as a procedure named "SumColVec" to compute the summation of the columns of a matrix. By dint of these basic operations, more complex calculations such as computing the gradients in logistic regression models are achievable.

### Logistic Regression

Logistic regression is widely used in binary classification tasks to infer whether a binary-valued variable belongs to a certain class or not. LR can be generalized from linear regression  by mapping the whole real line \((^{T})\) to \((0,1)\) via the sigmoid function \((z)=1/(1+(-z))\), where the vector \(^{(1+d)}\) is the main parameter of LR and the vector \(=(1,x_{1},,x_{d})^{(1+d)}\) the input covariate. Thus logistic regression can be formulated with the class label \(y\{ 1\}\) as follows:\[(y=+1|,) =(^{T}) =^{T}}},\] \[(y=-1|,) =1-(^{T}) =^{T}}}.\]

LR sets a threshold (usually \(0.5\)) and compares its output with it to decide the resulting class label.

The logistic regression problem can be transformed into an optimization problem that seeks a parameter \(\) to maximize \(L()=_{i=1}^{n}(y_{i}|_{i},)\) or its log-likelihood function \(l()\) for convenience in the calculation:

\[l()= L()=-_{i=1}^{n}(1+e^{-y_{i}^{T} _{i}}),\]

where \(n\) is the number of examples in the training dataset. LR does not have a closed form of maximizing \(l()\) and two main methods are adopted to estimate the parameters of an LR model: (a) gradient descent method via the gradient; and (b) Newton's method by the Hessian matrix. The gradient and Hessian of the log-likelihood function \(l()\) are given by, respectively:

\[_{}l() =_{i}(1-(y_{i}^{T}_{i}))y_{i} _{i},\] \[_{}^{2}l() =_{i}(y_{i}_{i})((y_{i}^{T}_{i})-1)(y_{i}^{T}_{i})(y_{i}_{i})\] \[=X^{T}SX,\]

where \(S\) is a diagonal matrix with entries \(S_{ii}=((y_{i}^{T}_{i})-1)(y_{i}^{T} _{i})\) and \(X\) the dataset.

The log-likelihood function \(l()\) of LR has at most a unique global maximum , where its gradient is zero. Newton's method is a second-order technique to numerically find the roots of a real-valued differentiable function, and thus can be used to solve the \(\) in \(_{}l()=0\) for LR.

## 3 Technical Details

It is quite time-consuming to compute the Hessian matrix and its inverse in Newton's method for each iteration. One way to limit this downside is to replace the varying Hessian with a fixed matrix \(\). This novel technique is called the fixed Hessian Newton's method. Bohning and Lindsay  have shown that the convergence of Newton's method is guaranteed as long as \(_{}^{2}l()\), where \(\) is a symmetric negative-definite matrix independent of \(\) and "\(\)" denotes the Loewner ordering in the sense that the difference \(_{}^{2}l()-\) is non-negative definite. With such a fixed Hessian matrix \(\), the iteration for Newton's method can be simplified to:

\[_{t+1}=_{t}-^{-1}_{}l().\]

Bohning and Lindsay also suggest the fixed matrix \(=-X^{T}X\) is a good lower bound for the Hessian of the log-likelihood function \(l()\) in LR.

### the Simplified Fixed Hessian method

Bonte and Vercauteren  simplify this lower bound \(\) further due to the need for inverting the fixed Hessian in the encrypted domain. They replace the matrix \(\) with a diagonal matrix \(B\) whose diagonal elements are simply the sums of each row in \(\). They also suggest a specific order of calculation to get \(B\) more efficiently. Their new approximation \(B\) of the fixed Hessian is:

\[B=[_{i=0}^{d}_{0i}&0&&0\\ 0&_{i=0}^{d}_{1i}&&0\\ &&&\\ 0&0&&_{i=0}^{d}_{di}],\]

where \(_{ki}\) is the element of \(\). This diagonal matrix \(B\) is in a very simple form and can be obtained from \(\) without much difficulty. The inverse of \(B\) can be approximated in the encrypted form by means of computing the inverse of every diagonal element of \(B\) via the iterative of Newton's method with an appropriate start value. Their simplified fixed Hessian method can be formulated as follows:

\[_{t+1} =_{t}-B^{-1}_{}l(),\] \[=_{t}-[b_{00}&0&&0\\ 0&b_{11}&&0\\ &&&\\ 0&0&&b_{dd}][_{0}\\ _{1}\\ \\ _{d}]=_{t}-[b_{00} _{0}\\ b_{11}_{1}\\ \\ b_{dd}_{d}],\]

where \(b_{ii}\) is the reciprocal of \(_{i=0}^{d}_{0i}\) and \(_{i}\) is the element of \(_{}l()\).

Consider a special situation: if \(b_{00},,b_{dd}\) are all the same value \(-\) with \(\) > 0, the iterative formula of the SFH method can be given as:

\[_{t+1}=_{t}-(-)[_{0 }\\ _{1}\\ \\ _{d}]=_{t}+_{}l( ),\]

which is the same as the formula of the naive gradient \(ascent\) method. Such coincident is just what the idea behind this work comes from: there is some relation between the Hessian matrix and the learning rate of the gradient (descent) method. We consider \(b_{ii}_{i}\) as a new enhanced gradient variant's element and assign a new learning rate to it. As long as we ensure that this new learning rate decreases from a positive floating-point number greater than 1 (such as 2) to 1 in a bounded number of iteration steps, the fixed Hessian Newton's method guarantees the algorithm will converge eventually.

The SFH method proposed by Bonte and Vercauteren  has two limitations: (a) in the construction of the simplified fixed Hessian matrix, all entries in the symmetric matrix \(\) need to be non-positive. For machine learning applications the datasets will be in advance normalized into the range , meeting the convergence condition of the SFH method. However, for other cases such as numerical optimization, it doesn't always hold; and (b) the simplified fixed Hessian matrix \(B\) that Bonte and Vercauteren  constructed, as well as the fixed Hessian matrix \(=-X^{T}X\), can still be singular, especially when the dataset is a high-dimensional sparse matrix, such as the MNIST datasets. We extend their work by removing these limitations so as to generalize this simplified fixed Hessian to be invertible in any case and propose a faster gradient variant, which we term quadratic gradient.

### Quadratic Gradient

Suppose that a differentiable scalar-valued function \(F()\) has its gradient \(\) and Hessian matrix \(H\), with any matrix \( H\) in the Loewner ordering for a maximization problem as follows:

\[=[g_{0}\\ g_{1}\\ \\ g_{d}], H=[_{00}^{2}& _{01}^{2}&&_{0d}^{2}\\ _{10}^{2}&_{11}^{2}&&_{1d}^{2}\\ &&&\\ _{d0}&_{d1}&&_{dd} ],=[_{00}&_{01} &&_{0d}\\ _{10}&_{11}&&_{1d}\\ &&&\\ _{d0}&_{d1}&&_{dd}],\]

where \(_{ij}^{2}=_{ji}^{2}=F}{ x_{i} x _{j}}\). We construct a new Hessian matrix \(\) as follows:

\[=[--_{i=0}^{d}|_{0i} |&0&&0\\ 0&--_{i=0}^{d}|_{1i}|&&0\\ &&&\\ 0&0&&--_{i=0}^{d}|_{di}|],\]

where \(\) is a small positive constant to avoid division by zero (usually set to \(1e-8\)).

As long as \(\) satisfies the convergence condition of the above fixed Hessian method, \( H\), we can use this approximation \(\) of the Hessian matrix as a lower bound. Since we already assume that \( H\), it will suffice to show that \(\). We prove \(\) in a similar way that  did.

**Lemma 1**.: _Let \(A^{n n}\) be a symmetric matrix, and let \(B\) be the diagonal matrix whose diagonal entries \(B_{kk}=--_{i}|A_{ki}|\) for \(k=1,,n\), then \(B A\)._

Proof.: By definition of the Loewner ordering, we have to prove the difference matrix \(C=A-B\) is non-negative definite, which means that all the eigenvalues of \(C\) need to be non-negative. By construction of \(C\) we have that \(C_{ij}=A_{ij}++_{k=1}^{n}|A_{ik}|\) for \(i=j\) and \(C_{ij}=A_{ij}\) for \(i j\). By means of Gerschgorin's circle theorem, we can bound every eigenvalue \(\) of \(C\) in the sense that \(|-C_{ii}|_{i j}|C_{ij}|\) for some index \(i\{1,2,,n\}\). We conclude that \( A_{ii}++|A_{ii}|>0\) for all eigenvalues \(\) and thus that \(B A\). 

**Definition 3.1** (Quadratic Gradient).: _Given such a \(\) above, we define the quadratic gradient as \(G=\) with a new learning rate \(\), where \(\) is a diagonal matrix with diagonal entries \(_{kk}=1/|_{kk}|\), and \(\) should be always no less than 1 and decrease to 1 in a limited number of iteration steps. Note that \(G\) is still a column vector of the same size as the gradient \(\). To maximize the function \(F()\), we can use the iterative formulas: \(_{k+1}=_{k}+ G\), just like the naive gradient. To minimize the function \(F(x)\) is the same as to just maximize the function \(-F(x)\), in which case we need to construct the \(\) by any good lower bound \(\) of the Hessian \(-H\) of \(-F(x)\) or any good upper bound \(\) of the Hessian \(H\) of \(F(x)\). We point out here that \(\) could be the Hessian matrix \(H\) itself._

In our experiments, we use \(\) = \(-X^{T}X\) to construct our \(\).

### Two Enhanced Methods

Quadratic Gradient can be used to enhance NAG and Adagrad.

NAG is a different variant of the momentum method to give the momentum term much more prescience. The iterative formulas of the gradient \(ascent\) method for NAG are as follows:

\[V_{t+1} =_{t}+_{t} J(_{t}),\] (3) \[_{t+1} =(1-_{t}) V_{t+1}+_{t} V_{t},\] (4)

where \(V_{t+1}\) is the intermediate variable used for updating the final weight \(_{t+1}\) and \(_{t}(0,1)\) is a smoothing parameter of moving average to evaluate the gradient at an approximate future position . The enhanced NAG is to replace (3) with \(V_{t+1}=_{t}+(1+_{t}) G\). Our enhanced NAG method is described in Algorithm 1.

Adagrad is a gradient-based algorithm suitable for dealing with sparse data. The updated operations of Adagrad and its quadratic-gradient version, for every parameter \(_{[i]}\) at each iteration step \(t\), are as follows, respectively:

\[_{[i]}^{(t+1)} =_{[i]}^{(t)}- ^{t}_{[i]}^{(t)}_{[i]}^{(t)}}}_{[i]}^{(t)},\] \[_{[i]}^{(t+1)} =_{[i]}^{(t)}-^{t}G_{[i]}^{(t)} G_{[i]}^{(t)}}} G_{[i]}^{(t)}.\]

**Performance Evaluation** We evaluate the performance of various algorithms in the clear using the Python programming language on the same desktop computer with an Intel Core CPU G640 at 1.60 GHz and 7.3 GB RAM. Since our focus is on how fast the algorithms converge in the training phase, the loss function, maximum likelihood estimation (MLE), is selected as the only indicator. We evaluate four algorithms, NAG, Adagrad, and their quadratic-gradient versions (denoted as Enhanced NAG and Enhanced Adagrad, respectively) on the datasets that Kim et al.  adopted: the iDASH genomic dataset (iDASH), the Myocardial Infarction dataset from Edinburgh (Edinburgh), Low Birth weight Study (Ibw), Ninanes III (nhanes3), Prostate Cancer study (pcs), and Umaru Impact Study datasets (uis). The genomic dataset is provided by the third task in the iDASH competition of 2017, which consists of 1579 records. Each record has 103 binary genotypes and a binary phenotype indicating if the patient has cancer. The other five datasets all have a single binary dependent variable. Figures 1 and 2 show that except for the enhanced Adagrad method on the iDASH genomic dataset our enhanced methods all converge faster than their original ones in other cases. In all the Python```
0: training dataset \(X^{n(1+d)}\); training label \(Y^{n 1}\); learning rate \(lr()\); and the number \(\) of iterations;
0: the parameter vector \(V^{(1+d)}\)
1: Set \(-X^{T}X\)\(\)\(^{(1+d)(1+d)}\)
2: Set \(V\), \(W\), \(\)\(\)\(V^{(1+d)}\), \(W^{(1+d)}\), \(^{(1+d)(1+d)}\)
3:for\(i:=0\) to \(d\)do
4:\([i][i]\)\(\)\(\) is a small positive constant such as \(1e-8\)
5:for\(j:=0\) to \(d\)do
6:\([i][i][i][i]+|[i][j]|\)
7:endfor
8:endfor
9: Set \(_{0} 0.01\), \(_{1} 0.5(1+^{2}})\)
10:for\(count:=1\) to \(\)do
11: Set \(Z\)\(\)\(Z^{n}\) is the inputs for sigmoid function
12:for\(i:=1\) to \(n\)do
13:for\(j:=0\) to \(d\)do
14:\(Z[i] Z[i]+Y[i] V[j] X[i][j]\)
15:endfor
16:endfor
17: Set \(\)\(\)\(^{n}\) is to store the outputs of the sigmoid function
18:for\(i:=1\) to \(n\)do
19:\([i] 1/(1+(-Z[i]))\)
20:endfor
21: Set \(\)
22:for\(j:=0\) to \(d\)do
23:for\(i:=1\) to \(n\)do
24:\([j][j]+(1-[i]) Y [i] X[i][j]\)
25:endfor
26:endfor
27: Set \(G\)
28:for\(j:=0\) to \(d\)do
29:\(G[j][j][j][j]\)
30:endfor
31: Set \((1-_{0})/_{1}\), \( lr/(n count)\)\(\)\(n\) is the size of training data; \(lr\) is set to 10.0 in this work
32:for\(j:=0\) to \(d\)do
33:\(w_{temp} V[j]+(1+) G[j]\)
34:\(V[j](1-) w_{temp}+ W[j]\)
35:\(W[j] w_{temp}\)
36:endfor
37:\(_{0}_{1}\), \(_{1} 0.5(1+^{2}})\)
38:endfor
39:return\(V\) ```

**Algorithm 1** The Enhanced Nesterov's Accelerated Gradient method experiments, the time to calculate the \(\) in quadratic gradient \(G\) before running the iterations and the time to run each iteration for various algorithms are negligible (few seconds).

**Results Analysis In Figure 0(a), the enhanced Adagrad algorithm failed to outperform the original Adagrad algorithm. The possible reason for that might be related to the limitations of the raw Adagrad method. Without a doubt, Adagrad is a novel algorithm initiated to accelerate each element of the gradient with different learning rates. However, Adagrad tends to converge to a suboptimal solution due to its aggressive, monotonically decreasing learning rates. This would lead to its main limitation that in the later training phase every learning rate for different components of the gradient is too close to zero due to keeping adding positive additional terms to the denominator, stopping the algorithm from learning anything.**

**On the other hand, the original Adagrad method has another little-noticed limitation: the learning rate in the first few iterations tends to be large. While this limitation does not affect the performance of the original Adagrad method to some extent, the enhanced Adagrad method exacerbates this phenomenon by a factor of about \(10^{2}^{t}g_{(t)}^{(t)}g_{(t)}^{(t)}}}{ +^{t}g_{(t)}^{(t)}g_{(t)}^{(t)}}}\), leading to the Learning-Rate Explosion. Therefore, the enhanced Adagrad  cannot be applied to general optimization problems such as Rosenbrock's function. The exploding learning rate would be too large for the algorithm to survive the first several iterations, finally leading the optimization function to some point where its output cannot be represented by the computer system. This might explain why the performance of this algorithm in all cases, not just on the iDASH genome dataset, seems to be meaningless, numerically unstable, and fluctuates in the first few iterations.**

**Several improved algorithms upon the Adagrad method, such as RMSProp, have been proposed in order to address these issues existed, via using an exponential moving average of historical gradients rather than just the sum of all squared gradients from the beginning of training. We might be able to overcome the problems existing in the enhanced Adagrad method by adopting the enhanced Adagrad-like variants, like the enhanced Adadelta method and the enhanced RMSProp method. One research work that could confirm this hypothesis is the enhanced Adam method .**

Figure 1: Training results in the clear for Adagrad and Enhanced Adagrad

## 4 Privacy-preserving LR Training

Adagrad method is not a practical solution for homomorphic LR due to its frequent inversion operations. It seems plausible that the enhanced NAG is probably the best choice for privacy-preserving LR training. We adopt the enhanced NAG method to implement privacy-preserving logistic regression training. The difficulty in applying the quadratic gradient is to invert the diagonal matrix \(\) in order to obtain \(\). We leave the computation of matrix \(\) to data owner and let the data owner upload the ciphertext encrypting the \(\) to the cloud. Since data owner has to prepare the dataset and normalize it, it would also be practicable for the data owner to calculate the \(\) owing to no leaking of sensitive data information.

Privacy-preserving logistic regression training based on HE techniques faces a difficult dilemma that no homomorphic schemes are capable of directly calculating the sigmoid function in the LR model. A common solution is to replace the sigmoid function with a polynomial approximation by using the widely adopted least-squares method. We can call a function named " polyfit(\(\)) " in the Python package Numpy to fit the polynomial in a least-square sense. We adopt the degree 5 polynomial approximation \(g(x)\) by which Kim et al.  used the least square approach to approximate the sigmoid function over the domain \([-8,8]\): \(g(x)=0.5+0.19131 x-0.0045963 x^{3}+0.0000412332 x^{5}\).

Given the training dataset \(^{n(1+d)}\) and training label \(^{n 1}\), we adopt the same method that Kim et al.  used to encrypt the data matrix consisting of the training data combined with training-label information into a single ciphertext \(_{Z}\). The weight vector \(^{(0)}\) consisting of zeros and the diagnoal elements of \(\) are copied \(n\) times to form two matrices. The data owner then encrypt the two matrices into two ciphertexts \(^{(0)}_{}\) and \(_{}\), respectively.

The public cloud takes the three ciphertexts \(_{Z}\), \(^{(0)}_{}\) and \(_{}\) and evaluates the enhanced NAG algorithm to find a decent weight vector by updating the vector \(^{(0)}_{}\). Refer to  for a detailed description about how to calculate the gradient by HE programming.

Figure 2: Training results in the clear for NAG and Enhanced NAGExperiments

ImplementationWe implement the enhanced NAG based on HE with the library HEAN. The C++ source code is publicly available at https://anonymous.4open.science/r/IDASH2017-245B. All the experiments on the ciphertexts were conducted on a public cloud with 32 vCPUs and 64 GB RAM.

For a fair comparison with , we utilized the same 10-fold cross-validation (CV) technique on the same iDASH dataset consisting of 1579 samples with 18 features and the same 5-fold CV technique on the other five datasets. Like , We consider the average accuracy and the Area Under the Curve (AUC) as the main indicators. Tables 1 and 2 show the two experiment results, respectively. The two tables also provide the average evaluation running time for each iteration and the storage (encrypted dataset for the baseline work and encrypted dataset and \(\) for our method). We adopt the same packing method that Kim et al.  proposed and hence our solution has similar storage of ciphertexts to  with some extra ciphertexts to encrypt the \(\).

The parameters of HEAN we set are same to : \(logN=16\), \(logQ=1200\), \(logp=30\), \(slots=32768\), which ensure the security level \(=80\). Refer  for the details of these parameters. Since our enhanced NAG method need to consume more modulus to preserve the precision of \(\), we use \(logp=60\) to encrypt the matrix \(\) and thus only can perform \(3\) iterations of the enhanced NAG method. Yet despite only \(3\) iterations, our enhanced NAG method still produces a comparable result.

## 6 Conclusion

In this paper, we proposed a faster gradient variant called quadratic gradient, and implemented the quadratic-gradient version of NAG in the encrypted domain to train the logistic regression model.

The quadratic gradient presented in this work can be constructed from the Hessian matrix directly, and thus somehow combines the second-order Newton's method and the first-order gradient (descent) method together. There is a good chance that quadratic gradient could accelerate other gradient methods such as Adagrad, Adadelta, RMSprop, Adam , AdaMax and Nadam, which is an open future work.

Also, quadratic gradient might substitute and supersede the line-search method, for example when using enhanced Adagrad-like methods, and could use gradient descent methods to accelerate Newton's method, resulting in super-quadratic algorithms.

  Dataset & Sample Num & Feature Num & Method & deg \(g\) & Iter Num & Storage (GB) & Learn Time (min) & Accuracy (\%) & AUC \\   &  &  & Ours & 5 & 3 & 0.08 & 3.61 & 53.38 & 0.681 \\   & & &  & 5 & 7 & 0.04 & 6.07 & 62.87 & 0.689 \\  

Table 1: Implementation Results for iDASH datasets with 10-fold CV

  Dataset & Sample Num & Feature Num & Method & deg \(g\) & Iter Num & Storage (GB) & Learn Time (min) & Accuracy (\%) & AUC \\   &  &  & Ours & 5 & 3 & 0.04 & 0.5 & 84.40 & 0.847 \\   & & &  & 5 & 7 & 0.02 & 3.6 & 91.04 & 0.958 \\   &  &  & Ours & 5 & 3 & 0.04 & 0.4 & 68.65 & 0.635 \\   & & &  & 5 & 7 & 0.02 & 3.3 & 69.19 & 0.689 \\   &  &  & Ours & 5 & 3 & 0.31 & 3.7 & 79.22 & 0.490 \\   & & &  & 5 & 7 & 0.16 & 7.3 & 79.22 & 0.717 \\   &  &  & Ours & 5 & 3 & 0.04 & 0.6 & 64.00 & 0.720 \\   & & &  & 5 & 7 & 0.02 & 3.5 & 68.27 & 0.740 \\   &  &  & Ours & 5 & 3 & 0.04 & 0.5 & 74.43 & 0.585 \\   & & &  & 5 & 7 & 0.02 & 3.5 & 74.44 & 0.603 \\  

Table 2: Implementation Results for other datasets with 5-fold CV