# Language Semantic Graph Guided

Data-Efficient Learning

 Wenxuan Ma

Beijing Institute of Technology

wenxuanma@bit.edu.cn

&Shuang Li

Speijing Institute of Technology

shuangli@bit.edu.cn

&Lincan Cai

Beijing Institute of Technology

linancai@bit.edu.cn

&Jingxuan Kang

University of Liverpool

sgjkang3@liverpool.ac.uk

###### Abstract

Developing generalizable models that can effectively learn from limited data and with minimal reliance on human supervision is a significant objective within the machine learning community, particularly in the era of deep neural networks. Therefore, to achieve data-efficient learning, researchers typically explore approaches that can leverage more related or unlabeled data without necessitating additional manual labeling efforts, such as Semi-Supervised Learning (SSL), Transfer Learning (TL), and Data Augmentation (DA). SSL leverages unlabeled data in the training process, while TL enables the transfer of expertise from related data distributions. DA broadens the dataset by synthesizing new data from existing examples. However, the significance of additional knowledge contained within labels has been largely overlooked in research. In this paper, we propose a novel perspective on data efficiency that involves exploiting the semantic information contained in the labels of the available data. Specifically, we introduce a **Language Semantic Graph (LSG)** which is constructed from labels manifest as natural language descriptions. Upon this graph, an auxiliary graph neural network is trained to extract high-level semantic relations and then used to guide the training of the primary model, enabling more adequate utilization of label knowledge. Across image, video, and audio modalities, we utilize the LSG method in both TL and SSL scenarios and illustrate its versatility in significantly enhancing performance compared to other data-efficient learning approaches. Additionally, our in-depth analysis shows that the LSG method also expedites the training process.

## 1 Introduction

Deep learning has achieved remarkable breakthroughs in various domains, including speech recognition, visual object recognition, object detection, drug discovery, genomics, and many others . However, the increasing size of deep neural networks has led to a growing demand for large volumes of data. Unfortunately, not all application domains have access to extensive datasets due to the high costs associated with data collection and human annotation . Consequently, substantial efforts have been dedicated to studying methods that enable data-efficient learning , aiming to alleviate the requirement of extensive training data and, in particular, human supervision.

The current primary approaches to achieving data-efficient learning encompass semi-supervised learning (SSL) , transfer learning (TL) , and other techniques such as data augmentation(DA) [78; 9]. Semi-supervised learning [19; 34; 58; 4; 69] involves using both labeled and unlabeled data to reduce manual labeling effort and enhance model performance. By exploring vast amounts of unlabeled samples, artificial learners acquire a more comprehensive understanding of the underlying data structure and achieve improved predictions, even in scenarios where labeled samples are scarce . Transfer learning leverages data from other related source domains typically offer abundant data and annotations [42; 14; 2], or it utilizes models pretrained on large-scale datasets to transfer general knowledge to minimize the data requirements in the target domain [76; 74]. Data augmentation technique creates novel examples from existing ones, thereby expanding and diversifying the training dataset. From this perspective, these data-efficient learning approaches share a common objective: to leverage additional training data without necessitating extra manual labeling efforts. In this paper, we approach data-efficient learning from a different angle: by investigating improved methods to harness the available data-label pairs. This novel perspective motivates the core objective of our work: _to fully exploit semantic information contained in the labels to improve model performance with data efficiency._

In particular, it is worth noting that original human annotations typically manifest as natural language descriptions of the training data, such as "bicycle" and "kangaroo" in object recognition tasks or "jogging" and "playing piano" in action recognition. We refer to these descriptive labels with descriptions as the labeled concepts. The prevailing approach of converting these labeled concepts into indices simplifies the machine learning problem but sacrifices semantic information. Consequently, our objective is to enhance data utilization by reintegrating this information into the training process. Our idea involves introducing an auxiliary branch during training to facilitate high-level interactions between data representations and label semantics. This interaction guides the model in extracting appropriate features that capture accurate semantics. Notably, the auxiliary branch is discarded after the training process, thus avoiding an increase in inference cost. However, the question that remains is how to achieve such interaction effectively.

To this end, we propose employing graphs to model high-level semantics of the labeled concepts, owing to their generality and flexibility . The initial node features within the graph comprise language embeddings of these concepts, which are generated by pretrained language models. The edges of the graph capture strong semantic connections between the concepts. We refer to this graph as the Language Semantic Graph (LSG) and train an auxiliary graph neural network to extract the knowledge within the graph and transfer it to the primary neural network model. During formal training, the data representations produced by the primary model are incorporated into the Language Semantic Graph as new nodes, based on their true labels. Consequently, the graph neural network can propagate information across all nodes in the augmented graph. Building upon this interaction mechanism, we propose two additional optimization objectives to implicitly align and explicitly regularize the data representations, ensuring their adherence to the correct semantics.

LSG demonstrates applicability across models in various modalities and exhibits improved data-efficient learning performance. To validate its effectiveness, we conduct experiments on two typical data-efficient scenarios: transfer learning and semi-supervised learning, and apply it to image, video, and audio datasets. The experimental results demonstrate that LSG significantly enhances performance and outperforms other data-efficient approaches. Our contribution includes:

* We propose a novel perspective towards data-efficient learning via enhancing the utilization efficiency on the available annotated data. Particularly, we introduce a Language Semantic Graph (LSG) to model the high-level label semantics and provide extra supervision.
* We design a comprehensive method with an auxiliary graph neural network that extracts knowledge from LSG and two novel objectives that guide the primary model to learn efficiently. Furthermore, we extend the method by incorporating semi-supervised learning to leverage unlabeled samples for further enhancement.
* Experiments on both transfer learning and semi-supervised learning scenarios are conducted, crossing image, video and audio modalities. The superior performance achieved by our proposed method, along with an in-depth analysis, confirms its effectiveness.

## 2 Related Work

**Data-efficient learning** investigates the problem of data hungriness of modern machine learning algorithms, and proposes algorithms to reduce the reliance on extensive training data. Twoprominent approaches in the roadmap of data-efficient learning are Transfer Learning (TL) and Semi-Supervised Learning (SSL). TL focuses on transferring knowledge from source domains to minimize the number of labeled examples required in a target domain . Within this research area, Domain Adaptation [14; 55; 82; 35] investigates transductive transfer learning where source and target domain possess different data distributions but share the same task. Fine-tuning have emerged with deep neural networks [12; 48; 76; 18], enabling the flexible transfer of knowledge from large pretrained models to benefit various downstream tasks [56; 74; 41; 23; 61]. In conclusion, TL generally leverages data from elsewhere to enhance data efficiency in the current task.

On the other hand, SSL takes a different approach by harnessing large-scale unlabeled data to reduce the need for manual labeling. Prevalent SSL methods [34; 58; 60; 3; 24] explore unlabeled samples to capture the intrinsic data structural information . Notably, a widely adopted strategy in SSL is the assignment of pseudo-labels to samples , enabling models to improve in a self-training manner [53; 5; 75]. The combination of TL and SSL approaches has also been embraced to achieve more promising results [54; 67]. In contrast, our work presents a novel perspective within data-efficient learning. Instead of exploring data from various sources, we aim to exploit annotated data more comprehensively. We identify semantic relations between labels and utilize them to guide the model in learning better representations.

**Graph neural network as a learning component**. Graph neural networks (GNN) [28; 17; 63; 64] have gained significant popularity not only for their standard applications in graph-related tasks such as node classification and link prediction but also as a component within learning systems to process graph-structured inputs and propagate crucial information [15; 71; 50; 45]. In the domain of computer vision, Garcia and Bruna  leverage GNN for few-shot learning, NGM  generates graph with continuously updated adjacency matrix for 3D action recognition, BGRNet  includes GNN in their framework for panoptic segmentation, and Knowledge-CLIP  learns multi-modal representations. Furthermore, GNNs have found applications in natural language processing , recommendation systems  and etc. In our method, a GNN is trained on the semantic graph constructed from labels to guide the learning process of the primary model.

**Language models for non-language tasks**. The beneficial interaction between modalities, justified by the success of multimodal learning [51; 79; 85; 57], has sparked growing interest in borrowing knowledge from other modalities. LIFT  formalizes non-language inputs into sentences and adopts GPT  as general interface. Vision-Language model-based finetuning methods [84; 83; 43; 81; 80] leverage the jointly pretrained text encoders to construct robust classifiers for downstream vision tasks. Our method draws inspiration from these works but differs in its objective as well as the way to leverage linguistic knowledge. Concretely, LSG promotes data-efficient learning on independent non-language models that are not restricted to multi-modal model. Furthermore, instead of building a robust classification head, the linguistic knowledge in our method is leveraged to construct a graph that models label semantic relations then guide the non-language model learn more semantically meaningful representations.

## 3 Method

Training a deep neural network to achieve satisfying performance could be challenging in many real-world applications due to the lack of sufficient label supervision. Our approach seek to improve the utilization of labeled data that is currently available for enhancing data efficiency. Formally, we consider training a model on a task-related labeled dataset \(\{_{i},y_{i}\}_{i=1}^{n}\), where \(\) could be images, video clips or audio clips etc. for different tasks and \(y\) is the corresponding category label that is represented using natural language description such as a word or a phrase. The model (also referred as the **primary model** in the following content) can be regard as a feature encoder \(F(|)\) that maps the input data to embedding space and follows by a task-specific head \(C(|)\) that turns feature embeddings into predictions, with \(\) and \(\) as parameters. The standard training objective utilizing the labeled dataset is the minimization of the empirical risk. By omitting the network parameters and denote \(C F()=C(F())\), the empirical risk minimization can be formulate as:

\[_{,}_{emp}=_{i=1}^{n}(C F (_{i}),y_{i}),\] (1)

where \((,)\) typically be cross-entropy loss, and labels are converted to indices during computation.

We argue that such conversion of labels inevitably losses information and results in data inefficiency. Therefore, our method introduces two additional losses \(_{align}\) and \(_{r}\) that exploit the discarded label semantic information for complement.

This section first introduces the construction process of the Language Semantic Graph (LSG) and the training process of the auxiliary model, which are conducted before the primary training stage to capture the semantic information. Then it moves on to explain the objectives \(_{align}\) and \(_{r}\) guide the data-efficient training of the primary model through LSG.

### Language Semantic Graph

LSG aims to model the semantic relationship between labeled concepts with high generality and flexibility. We propose a straightforward approach to construct the graph, leveraging the text embedding space that contains rich semantics. Specifically, given the natural language descriptions of the concepts \(\{_{k}\}_{k=1}^{K}\) where \(K\) is the total number of concepts or categories, we use a set of \(m\) predetermined prompts (_e.g._, 'This is a photo of a {concept}') to contextualize the concepts. We then obtain a set of text embeddings \(T\) by inputting contextualized concepts into a frozen pretrained language model such as BERT , where \(T=_{k=1}^{K}\{_{k}^{(1)},_{k}^{(2)},...,_{k}^{(m)}\} ^{d_{t}}\), \(|T|=mK\), with \(d_{t}\) being the dimension of the text embedding space. Then we define the text embedding matrices \(}\) and \(}}\), such that \(}=[_{1}^{(1)},...,_{1}^{(m)},_{2}^{(1)},..., _{K}^{(m)}]^{d_{t}|T|}\) and \(}}\) be its column normalized matrix. We compute the cosine similarity matrix between text embeddings as \(=}}^{}}}\). Additionally, we define a text label vector \(_{t}=[_{m},...,_{m}]\) to indicate the category for each text embedding.

Next, we define the language semantic graph adjacency matrix based on text embedding similarities:

\[=[a_{ij}]_{1 i|T|,1 j|T|}=(_{i,j},0)&y_{t,i}=y_{t,j},\\ _{i,j}&y_{t,i} y_{t,j}_{i,j},\\ 0&.\] (2)

Note that \(\) is a weighted adjacency matrix. The first line means that we connect nodes representing the same concept with their similarity scores as weight. The second line allows certain edge connections between nodes that represent different concepts but share high feature similarities, which is controlled be an edge threshold hyper-parameter \(\). Finally, the language semantic graph we defined can be represented as: \(=(,,})\), where \(\) is the node set, \(||=|T|,\) and \(}\) is used as the node feature matrix.

To fully leverage the LSG to guide the data-efficient training of the primary model, we propose to train an **auxiliary graph neural network** to extract semantic information from LSG. We adopt the

Figure 1: Illustration of the LSG training framework. In the first stage, labeled concepts are turned into text embeddings via pretrained language model (PLM), and then the Language Semantic Graph (LSG) is constructed according to the embeddings. We train a GNN on the graph to extract semantic knowledge. In the second or the formal training stage, the data representations \(\) are connected to the graph based on their labels (and the new graph topology is described in the augmented adjacency matrix). Representations are then transformed into \(^{}\) by the GNN. The proposed alignment loss and regularization loss is applied on these features to guide the primary model.

standard GCN  architecture, which consists of several consecutive graph convolution layers. It is expected that GCN, with its strength in massage passing, first refines the initial node embeddings (or text embeddings) by leveraging graph topology and then serves as a bridge connecting the primary model and the LSG. Let \(\) be the degree matrix of \(\), \(()\) be the ReLU  activation function, \(^{(l)}\) be the learnable weight matrix for the \(l_{}\) layer and \(}^{(0)}=}\), the update function of the node features can be formulated as:

\[}^{(l)}=(^{-}^{-} }^{(l-1)}^{(l)}).\] (3)

Analogues to the primary model, we regard our GCN model as the composition of node feature encoder \(_{g}\) and node classifier \(_{g}\). Particularly, the encoder \(_{g}\) is designed to output node features that have the same dimension as input features for the later computation of \(_{r}\). The whole network is trained using the node classification objective that aims to correctly predict category for each node:

\[_{node}=-_{i=1}^{||}_{k=1}^{K}_{[k=y _{t,i}]}(_{g}_{g}(}_{ ,i}))_{k},\] (4)

where \(()\) is the softmax function. To this end, we obtain the LSG and the auxiliary model trained on it, which contain semantic information from the labeled concepts and will be leveraged to boost the data-efficient training of the primary model.

**Remark**: \(_{node}\) is only used for training GCN in this first stage. By doing this, each node processed by the GCN aggregates discriminative and more comprehensive semantic information from neighboring nodes. Also note that both the LSG and the GCN only depend on the categories of the current task. Hence, they can be constructed and trained on each task once and for all.

### LSG Guided Data-Efficient Learning

To enable language semantic guidance, we add a new projector \(H(|)\) on top of the feature encoder \(F\) of the primary model to project the data representation to the same dimension as the text embeddings. We denote \(_{i}=H(F(_{i}))^{d_{t}}\) as the projected representation of \(_{i}\) and \(}\) as its embedding after \(l_{2}\) normalization. We would like to enable interactions between the data representations and the node features within the semantic graph. Henceforth, we propose to connect features generated by the primary model into LSG according to the label \(y\) of the data.

During training process, for every minibatch of \(B\) images \(\{_{j},y_{j}\}_{j=1}^{B}\), we obtain their representations \(\{_{i}\}_{i=1}^{B}\) and construct an augmented graph of the original Language Semantic Graph, denoted as \(_{aug}=(_{a},_{a},}_{a})\). In this augmented graph, \(|_{a}|=|T|+B\), the augmented node feature matrix \(}_{a}=[},_{1},...,_{B}] ^{d_{t}(|T|+B)}\) is the node feature matrix plus \(B\) data features, and the augmented adjacency matrix is defined as \(_{a}=&\\ ^{}&\), where \(^{|T| B}\) is a binary matrix indicating the connection between label nodes and data nodes, \(=[p_{ij}]=1&y_{t,i}=y_{j},\\ 0&,\) and \(^{B B}\) is a symmetric binary matrix indicating the connection among data nodes, \(=[m_{ij}]=1&y_{i}=y_{j},\\ 0&.\) Based on the true label of training data, these edges build connection between the primary model and the LSG, which allows the graph neural network to propagate information and transfer knowledge that is embedded inside the labels.

With the augmented graph, we conduct language semantic guidance to the primary model through optimizing two objectives: \(_{align}\) that implicitly aligns the data representation to the semantic graph and \(_{r}\) that explicitly regularize the model to extract more semantically meaningful representations. We utilize the frozen auxiliary model to encode new data nodes in the augmented graph and predict their categories. Given that the trained auxiliary model can correctly predict the label nodes in the original graph and its weights are no longer updated, the data representations \(_{i}\) are forced to become similar to their corresponding label node features during optimization, achieving the alignment between features from different node. The implicit alignment objective is as follows:

\[_{,}_{align}=-_{i=1}^{B}_{k=1}^{K} _{[k=y_{i}]}(_{g}_{g}(_{ i}))_{k}.\] (5)

Besides the implicit alignment loss that guides the data representations to have correct semantic relations, we further propose an explicit regularization loss to transfer the knowledge embeddedin the label nodes to the primary model. Notice that after being processed by the trained GCN, the output features of the data nodes have already aggregated information from their label node neighbors on the augmented graph, which are desirable representations that contain information from both the data samples and the semantic graph. Thus, we propose the graph semantic feature regularization loss \(_{r}\) that directly uses the output features of the auxiliary model encoder \(_{g}\) to promote their initial input features, which is why both features are designed to have the same dimension. Specifically, we denote \(_{g}(_{i})\) as the output graph feature for \(_{i}\). Then we normalize both features \((}_{})=_{g}(_{i})/|| _{g}(})||_{2}\), \(}_{i}=}/||}||_{2}\) and use the normalized graph feature as the target for normalized input feature. We have the following regularization objective:

\[_{,}_{r}=-_{i=1}^{B}||( _{g}(}_{}))-}}||_{2}^{2},\] (6)

where \(()\) denotes stop gradient. By explicitly regularizing the original data representation to include more information embedded in the graph as Eq. (6), the primary model learns more informative features from the LSG and thus allows this auxiliary branch to be discarded during inference.

Two proposed objectives \(_{align}\) and \(_{r}\) work in a complementary manner to convey the semantic relations between labeled concepts to primary model, whereas the classical empirical risk minimization helps the model to discriminate. Combining the three losses, our proposed method achieves fully exploitation of the information inside human annotations, and improves the data utilization efficiency. The final optimization objective of LSG is the weighted sum of the three losses joined by trade-off parameters \(\) and \(\). The full two-stage training process is shown in Fig. 1.

\[_{,,}=_{emp}+_ {align}+_{r}.\] (7)

**Remark**: The GCN and correspondingly the projector is not used during inference, and the classification result is still produced by the primary model. For this reason, no extra computational cost is needed in inference time.

### Extend LSG to Unlabeled Data

We further discuss a straightforward extension of the proposed LSG on unlabeled training dataset \(\{\}\) that share a same label space with the labeled data. By simply assigning a hard pseudo-label to each of them, these unlabeled data can also be connected to the semantic graph and be leveraged to guide the model. We find surprisingly that the vanilla Pseuso-Labeling strategy  works satisfactory with our method in semi-supervised learning. To be specific, we assign pseudo-labels to all unlabeled data according to the maximum class in model output: \(=*{arg\,max}_{c}(C F())\), and these pseudo-labels are updated after each epoch. To this end, we extend LSG to semi-supervised learning by jointly utilize labeled and unlabeled data for constructing the augmented semantic graph, and the objective now becomes

\[_{,,}_{sst}=_{emp}()+ _{align}(,)+_{r}(,).\] (8)

With these pseudo-labeled samples, our method achieves significant performance boost despite that there exists noisy pseudo-labels. We hypothesis that it is because the pseudo-labels are leveraged only for the auxiliary branch and hence do not bias the classification head, as also suggested in . We believe that further improvements can be achieved via combining our method with more advanced pseudo-labeling strategies in SSL, which will be left as future works.

## 4 Experiments

**Datasets and Models**. We conduct experiments on 7 standard datasets that are intensively studied in Transfer Learning [77; 41; 27] and Semi-supervised learning [67; 24] and cover input data ranging images, videos and audios. For image datasets, we adopt _FGVC Aircraft_ (10,000 images for 100 aircraft variants), _Stanford Cars_ (16,185 images for 196 car categories) and _CUB-200-2011_ (11,788 images for 200 bird species) for fine-grained classification analysis and _Office Home_ (four domains, each contains roughly 4,000 images for 65 categories) to evaluate out-of-distribution performance. For video datasets, we use _UCF-101_ (13,320 video clips in 101 categories) and _HMDB51_ (6,766 clips form 51 actions) For audio dataset, we report the performance on _AudioSet-20K_.

Several deep neural networks with different architecture and pretraining dataset are included in the experiments. For image tasks, we use ResNet-50  and ConvNext-S  pretrained on ImageNet-1k , ViT-B pretrained on CLIP WIT , and Swin-B  pretrained on ImageNet-21k. For video and audio tasks, we adopt pretrained ViT-L  from VideoMAE  and ViT-B from Audio-MAE , respectively.

**Implementation Details**. We utilize a pretrained BERT-L  as the language model to transform labels to text embeddings. For each concept, we contextualize it into complete sentences using 20 handcrafted prompts. When constructing the Language Semantic Graph, the similarity threshold \(\) is determined adaptively to include the top \(=0.3\%\) edges that connects between nodes of different labels of the fully connected graph. The GCN is trained on full graph for 5,000 iterations.

For LSG guided training process, the projector \(H\) is implemented by a fully-connected layer with an output dimension of 1024 and randomly initialized weights. We find that setting \(\) and \(\) to 1.0 and 8.0 generally achieves satisfying results within all the experiments. In image classification tasks, we adopt SGD with a momentum of 0.9 as the optimizer. The learning rate is set as 1e-3 for the visual backbone in most experiments and a 10\(\) larger value is applied for the classifier and projector in SSL and SDG. In video and audio tasks, we adopt the same configurations as finetuning in the official released VideoMAE and Audio-MAE codebase. Please refer to the appendix for more details.

### Results of Image Experiments

To examine the effectiveness of our method, we first conduct experiments on three fine-grained image classification benchmarks _FGVC-Aircraft_, _Stanford Cars_ and _CUB-200-2011_ following [77; 67]. Similar to previous works, we analyze the performance of LSG under labeled data partition ratio of \(15\%\), \(30\%\), \(50\%\) as well as the full training set. We adopt ImageNet-1k pretrained ResNet-50 as backbone and compare LSG with previous transfer learning baselines: vanilla fine-tuning, LWF , DELTA , BSS , StochNorm  and Co-Tuning . In addition, to show that LSG is applicable to self-supervised pretraining models, we adopt CLIP pretrained ViT-B and compare LSG to vision-language fine-tuning methods CoOP , ProDA , Tip-Adapter . Finally, we extend LSG to semi-supervised learning setting by including the rest training data as unlabeled data. As discussed in SS 3.3, we adopt Pseudo-Labeling  strategy for unlabeled data (which can be regarded as the baseline for extended LSG) and compare the extended LSG with SSL methods including FixMatch , DebiasMatch , SimCLRv2  and Self-Tuning .

    &  &  &  \\   & 15\% & 30\% & 50\% & 100\% & 15\% & 30\% & 50\% & 100\% & 15\% & 30\% & 50\% & 100\% \\  Fine-tuning & ✗ & 41.6 & 57.8 & 68.7 & 80.2 & 41.1 & 65.9 & 78.4 & 87.8 & 51.2 & 64.6 & 74.6 & 81.8 \\ LWF  & ✗ & 44.1 & 60.6 & 68.7 & 82.4 & 44.9 & 67.0 & 77.6 & 87.5 & 56.7 & 66.8 & 73.4 & 81.5 \\ DELTA  & ✗ & 43.6 & 59.5 & 69.6 & 81.2 & 43.3 & 67.6 & 79.6 & 88.0 & 53.4 & 66.7 & 76.0 & 82.0 \\ BSS  & ✗ & 44.4 & 61.9 & 71.4 & 82.7 & 45.0 & 68.4 & 79.6 & 88.4 & 54.8 & 67.3 & 76.3 & 82.3 \\ StochNorm  & ✗ & 44.3 & 60.6 & 70.1 & 81.5 & 44.4 & 68.1 & 79.3 & 87.9 & 54.8 & 66.8 & 75.8 & 82.2 \\ Co-Tuning  & ✗ & 45.9 & 61.6 & 72.7 & 83.9 & 49.0 & 70.6 & 81.9 & 89.5 & 57.6 & 70.1 & 77.3 & **82.5** \\ 
**LSG** & ✗ & **55.6** & **72.0** & **79.5** & **86.7** & **55.4** & **75.5** & **83.8** & **90.7** & **57.7** & **70.6** & **77.5** & 82.2 \\  Pseudo-Labeling  & ✗ & 46.8 & 62.8 & 73.2 & – & 40.9 & 67.0 & 78.7 & – & 45.3 & 62.0 & 72.3 & – \\ FixMatch  & ✗ & 55.5 & 71.6 & 78.3 & – & 49.9 & 77.5 & 84.8 & – & 44.1 & 63.5 & 76.0 & – \\ SimCLRv2  & ✗ & 40.8 & 59.0 & 68.5 & – & 45.7 & 61.7 & 77.5 & – & 45.7 & 62.7 & 71.1 & – \\ Self-Tuning  & ✗ & 64.1 & 76.0 & 81.2 & – & 72.5 & 83.6 & 88.1 & – & 64.2 & 75.1 & 80.2 & – \\ DebiasMatch  & ✗ & 59.5 & 71.2 & 77.1 & – & 75.3 & 86.1 & 90.0 & – & 64.7 & 75.1 & 77.7 & – \\ 
**LSG** (**extended**) & ✗ & **71.4** & **85.3** & **87.1** & **88.6** & **79.3** & **87.7** & **90.9** & **91.9** & **66.1** & **76.1** & **80.6** & **82.6** \\   

Table 1: Classification accuracy (%) on three fine-grained image benchmarks under fully-supervised and semi-supervised learning settings. ResNet-50 pretrained on ImageNet-1k is adopted as backbone and SSL indicates whether the rest training data is leveraged as unlabeled samples.

    &  &  &  \\   & 15\% & 30\% & 50\% & 100\% & 15\% & 30\% & 50\% & 100\% & 15\% & 30\% & 50\% & 100\% \\  CoOp  & 34.8 & 38.2 & 42.9 & 49.8 & 75.0 & 81.3 & 83.7 & 84.0 & 64.4 & 72.3 & 76.3 & 78.7 \\ ProDA  & 33.9 & 36.6 & 43.5 & 50.8 & 75.4 & 81.5 & 84.0 & 84.2 & 65.5 & 73.1 & 76.4 & 79.2 \\ Tip-Adapter  & 36.9 & 41.7 & 46.7 & 53.8 & 75.6 & 81.4 & 84.1 & 85.0 & 69.0 & 74.9 & 77.9 & 81.2 \\
**LSG** & **48.9** & **58.6** & **65.0** & **74.5** & **79.4** & **83.2** & **86.1** & **90.1** & **70.2** & **78.4** & **81.9** & **85.4** \\   

Table 2: Classification accuracy (%) with self-supervised pretraining model (CLIP ViT-B).

The results are shown in Table 1 and Table 2. We observe that our method outperforms its counterparts on each task and in both fully-supervised and semi-supervised scenarios. In fully supervised experiments, LSG significant outperforms other methods on _FGVC-Aircraft_ and _Stanford Cars_ especially when the available labeled data is more scarce. It also achieves comparable performance on _CUB200_. At 15% sampling ratio, LSG improves from the vanilla fine-tuning by 14.0%, 14.3% and 6.5% on three datasets, and surpasses Co-tuning by an average accuracy of 5.3%. Similarly, LSG shows promising potential in semi-supervised setting, achieving the best performance across all of the labeling rate and all three datasets. Notably, since the extended LSG incorporates data augmentation techniques adopted in semi-supervised learning, its results improvement over LSG under 100% training data shows that the proposed method is mutually beneficial to other data-efficient strategies. When applied on self-supervised pretrained model, LSG also demonstrates consistent gains comparing to fine-tuning methods that are specifically designed for vision-language models.

We also conduct experiments on cross-domain benchmark _Office-Home_ to evaluate the out-of-distribution performance of the LSG guided training. Following , we consider the challenging single domain generalization setting where models are trained on one single source domain and tested on the rest target domains without seeing any data from them. We compare LSG against the vanilla empirical risk minimization (ERM) baseline and the more advanced approach LP-FT .

We report the prediction accuracies of both in-distribution (ID) and out-of-distribution (OOD) in Table 3. Specifically, samples in the source domain are randomly partitioned into 80% training data and 20% test data, and the results refers to accuracy on test data. OOD results are obtained evaluating all data in each target domain. The results show that LSG improves model performance on both ID and OOD samples, demonstrating that the label semantic relations help the model learn features that are more robust to distribution shift.

### Results of Video and Audio Experiments

Category labels in video and audio tasks also have their natural language descriptions, such as "push up", "kiss" in _HMDB51_ dataset and "singing", "groan" in _AudioSet_. This enables LSG to construct semantic graph and improve the model training process. We adopt VideoMAE pretrained ViT-L as backbone for small-scaled video datasets _UCF-101_ and _HMDB51_, and use Audio-MAE pretrained ViT-B for audio benchmark _AudioSet_.

Following previous data efficient studies [24; 73] on the two video benchmarks, we train the model using 1% and 10% labeled data respectively. We also conduct SSL experiments similar to image experiments and compare LSG against SSL approaches in video. From the results in Table 4, we observe that LSG consistently improves the fine-tuning accuracy over all tasks with only limited amount of labeled samples available. With unlabeled data being included, two classical SSL methods Pseudo-Labeling and FixMatch both achieve certain improvements, whereas CMPL , a method designed specifically for video SSL tasks, performs better. On top of that, LSG obtains superior results than these method on all of the tasks, boosting the accuracy from

    &  &  &  \\   & & 1\% & 10\% & 1\% & 10\% \\  VideoMAE fin  & ✗ & 26.80 & 73.26 & 11.82 & 46.85 \\
**LSG** & ✗ & **29.07** & **74.49** & **13.28** & **50.50** \\  Pseudo-Labeling  & ✗ & 28.11 & 76.08 & 11.97 & 47.72 \\ FixMatch  & ✗ & 30.51 & 76.45 & 13.12 & 48.30 \\ CMPL  & ✗ & 32.24 & 77.82 & 13.58 & 50.81 \\
**LSG (extended)** & ✗ & **35.32** & **80.36** & **15.40** & **52.65** \\   

Table 4: Accuracies (%) of video action recognition on _UCF-101_ and _HMDB51_ under label rate of 1% and 10%. Backbone: ViT-L pretrained by VideoMAE.

    &  &  &  &  &  Source-F0} &  Avg. \\ (OD) \\  } &  Avg. \\ (OD) \\  } \\   & & & & & & & & & & & & & & & & & & & & \\   & ERM  & 85.0 & 53.4 & 72.7 & 78.6 & 85.0 & 67.5 & 72.9 & 75.4 & 91.7 & 61.8 & 49.0 & 80.0 & 91.4 & 72.2 & 52.7 & 80.9 & 89.0 & 68.1 \\  & LF-PT  & 85.1 & 55.3 & 73.9 & 75.5 & 85.0 & 70.4 & 73.4 & 77.5 & 95.1 & 92.0 & 82.0 & 91.4 & 72.0 & 51.4 & 81.2 & 82.9 & 89.6 \\   & EERM  & 88.8 & **87.2** & **70.90** & **78.03** & 86.3 & 70.7 & **78.48** & 77.5 & **65.8** & **84.7** & **84.21** & 72.0 & **72.8** & **50.0** & **82.3** & 89.6 & **74.1** \\   & ERM  & 91.8 & **70.7** & **86.1** & 85.8 & 89.1 & 80.6 & 84.3 & 86.7 & 95.3 & 77.9 & 66.1 & 88.3 & 95.2 & 82.6 & 69.1 & 90.4 & 93.2 & 81.0 \\  & LF-PT  & 91.5 & 70.4 & 85.9 & **88.6** & 89.4 & 81.3 & 85.4 & 87.1 & 96.7 & 78.8 & 68.0 & 88.9 & 95.1 & 82.9 & 70.3 & **90.5** & 93.2 & 81.5 \\   & EERG & 92.4 & **72.4** & 85.7 & **88.3** & 89.8 & **88.7** & **87.1** & **88.3** & 96.7 & **80.9** & **89.9** & **89.4** & 92.5 & **83.0** & **70.8** & **90.5** & 93.8 & **82.5** \\   

Table 3: Out-of-distribution accuracy (%) for single domain generalization on _Office-Home_. Backbone ConvNext-S and Swin-B are pre-trained on ImageNet-1k and ImageNet-22k respectively.

its baseline Pseudo-Labeling by 4.28% and 4.93%, and achieves 80.36% and 52.65% accuracies on two datasets with only 10% labeled data.

For audio experiment, we utilize the Audio-MAE ViT-B model pretrained on the full _AudioSet-2M_ and report its finetuning results on a class-balanced _AudioSet-20K_ subset using 10%, 25% and 50% labeled audio clips. Our results is illustrated in Table 5 where we compare LSG with vanilla fine-tuning method. As a consequence, LSG achieves an average of 5.56% accuracy enhancement from the baseline, which demonstrates that guiding the audio representation by their label semantic information could also be beneficial. These results on video and audio experiments demonstrate that LSG is widely application to various modalities.

### Analytical Experiments

**Ablation Study**. We report the accuracy of different LSG variants on _FGVC-Aircraft_ with 15% labeled data (Table 6). We begin with respectively removing the regularization loss \(_{r}\) and the alignment loss \(_{align}\) from the total objective. The performance drops of 14.4% and 4.9% prove that both objectives contribute to the semantic guidance. Moving on, we investigate two variants: replacing the trainable classifier by a fixed head from language embeddings, and removing the stop gradient in \(_{r}\). Both variants performs much worse than the current design.

**Effectiveness of the GCN model**. Here we conduct two experiments to verify the effectiveness of the GCN model on refining the label embeddings and promoting semantic knowledge transfer from LSG to the primary model. First, we compares the Calinski-Harabasz Index between the original and refined la

   Method & \(_{emp}\) & \(_{align}\) & \(_{r}\) & \(_{r}\) w/ sg. & classifier & language head & Acc. \\  LSG w/o \(_{r},_{align}\) & & & n/a & & & 41.6 (-14.0) \\ LSG w/o \(_{r}\) & & & n/a & & & 44.2 (-11.4) \\ LSG w/o \(_{align}\) & & & & & & 50.7 (-4.9) \\ LSG & & & & & & & **55.6 (+0.0)** \\  Classifier\(\)Language Head & & & & & & & 47.9 (-7.7) \\ LSG w/o stop gradient & & & & & & & 48.3 (-7.3) \\   

Table 6: Ablation study of losses and alternative design choices on _FGVC Aircraft_, 15% labeled data.

    &  &  &  &  &  \\    & 15\% & 30\% & 50\% & 15\% & 30\% & 50\% & 15\% & 30\% & 50\% & (ID) & (OOD) \\  Vanilla (No Alignment) & 41.6 & 57.8 & 68.7 & 41.1 & 65.9 & 78.4 & 51.2 & 64.6 & 74.6 & 89.0 & 68.1 \\ Text Prototype Alignment & 51.1 & 68.8 & 76.5 & 52.4 & 73.0 & 82.6 & 56.0 & 70.1 & 76.8 & 89.0 & 68.8 \\ Contrastive Alignment & 54.2 & 70.7 & 78.3 & 54.3 & 73.8 & 83.2 & 56.7 & 69.9 & 77.1 & 89.4 & 69.3 \\ LSG & & **55.6** & **72.0** & **79.5** & **55.4** & **75.5** & **83.8** & **57.7** & **70.6** & **77.2** & **89.6** & **71.1** \\   

Table 7: Ablation study using different alignment strategy to transfer language semantic knowledge to the primary model on four image datasets. _OH_ denotes for _Office-Home_ dataset.

   Method & _Aircraft_ & _Stanford Cars_ & _CUB200_ & _OH_ \\  Original & 86.5 & 137.2 & 157.8 & 85.5 \\
**GCN refined** & **1364.1** & **1481.7** & **916.3** & **1395.2** \\   

Table 8: Calinski-Harabasz Indexes of the original label embeddings from pretrained language model and the GCN refined label embeddings. _OH_ denotes for _Office-Home_ dataset.

superior to the two alternatives, which indicates that the GCN model is more effective in transferring the label semantic knowledge to the primary model.

**LSG speeds up model training**. It is discovered that applying LSG to guide the representation learning encourages the model to achieve a satisfactory performance faster. The accuracy curves on validation set of LSG and its baseline in both video (_UCF-101_) and audio (_AudioSet_) training are depicted in Fig. 2(a)(b). The accuracy curve of LSG rises faster and higher than vanilla fine-tuning.

**Substitute GCN by GAT**. To further investigate the effect of the graph neural network in our system, we change the implementation from GCN to Graph Attention Network (GAT), which is another wildly adopted GNN. The biggest different is that GAT automatically learns the weight between connected nodes instead of relying on manual definition as GCN does. We compare the two variants on _FGVC Aircraft_ SSL with 15% labeled data and discover an interesting trend. As shown in Fig. 2(c), GAT outperforms GCN in low label regime ( labeled data \( 15\%\)) whereas GCN is more beneficial with more labeled samples.

**Analysis of the LSG edge connection threshold \(\)**. The hyper-parameter \(\) in Eq. (2) controls the topology (i.e., the number of edges that connect different labels) of the Language Semantic Graph. We study the effect of this threshold on both the GCN node classification accuracy and more importantly the primary model accuracy. We observe (in Fig. 2(d)) that as the ratio of cross-label edges decrease, the graph topology becomes more simple and GCN accuracy increases. However, due to lack of beneficial cross-label interaction, the primary model performs worse. In contrast, if the ratio is overwhelmingly high, the graph topology becomes too complicated and results in degradation in both GCN and primary model performance.

## 5 Limitation and Future Work

The proposed semantic graph is a general concept that aims to capture the high-level semantic relations between labeled concepts. In this paper, we only use the natural language descriptions of the labeled concepts and leverage the pretrained language model to construct the graph. Although using language embedding is effective in many data-efficient scenarios across various modalities, it is still limited when the labeled concepts in the task are not well described by natural language.However, the semantic relations between concepts can also be captured by other ways, such as manually determining the relationship between categories based on expert knowledge or leveraging a knowledge graph. In the future, we will explore how to combine the semantic relations from different modalities to construct a more comprehensive graph.

Meanwhile, since the proposed LSG is a simple and lightweight modification to the standard training process and does not alter the inference procedure, another promising direction would be to extend the proposed method to other data-efficient scenarios, such as semantic segmentation and object detection.

## 6 Conclusion

In this paper, we study how to exploit the semantic information in labels for improving data efficiency. We present LSG, a novel and effective data-efficient learning method that leverages Language Semantic Graph to guide the model learn semantic relations between labeled concepts. LSG consists of two parts: an auxiliary graph neural network that extracts knowledge from the semantic graph and two novel optimization objectives that transfer the knowledge to primary model. We demonstrate that LSG is applicable on image, video and audio models and brings significant performance gains to the model under Transfer Learning and Semi-Supervised Learning scenarios.

Figure 2: Analytical experiments: (a) and (b) Model accuracy on validation sets during training. (c) Comparison between GCN and GAT. (d) Effect of the threshold hyper-parameter \(\).