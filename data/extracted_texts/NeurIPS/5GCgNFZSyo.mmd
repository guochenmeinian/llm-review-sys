# Minimizing UCB: a Better Local Search Strategy in

Local Bayesian Optimization

 Zheyi Fan\({}^{1,2}\), Wenyu Wang\({}^{3}\), Szu Hui Ng\({}^{3}\), Qingpei Hu\({}^{1,2}\)

\({}^{1}\)Academy of Mathematics and Systems Science, Chinese Academy of Sciences, China

\({}^{2}\)School of Mathematical Sciences, University of Chinese Academy of Sciences, China

\({}^{3}\)Department of Industrial Systems Engineering & Management, National University of Singapore, Singapore

\({}^{1,2}\){fanzheyi,qingpeihu}@amss.ac.cn, \({}^{3}\){wangy,isensh}@nus.edu.sg

Corresponding author.

###### Abstract

Local Bayesian optimization is a promising practical approach to solve high dimensional black-box function optimization problem. Among them is the approximated gradient class of methods, which implements a strategy similar to gradient descent. These methods have achieved good experimental results and theoretical guarantees. However, given the distributional properties of the Gaussian processes applied on these methods, there may be potential to further exploit the information of the Gaussian processes to facilitate the Bayesian optimization search. In this work, we develop the relationship between the steps of the gradient descent method and one that minimizes the Upper Confidence Bound (UCB), and show that the latter can be a better strategy than direct gradient descent when a Gaussian process is applied as a surrogate. Through this insight, we propose a new local Bayesian optimization algorithm, MinUCB, which replaces the gradient descent step with minimizing UCB in GIBO . We further show that MinUCB maintains a similar convergence rate with GIBO. We then improve the acquisition function of MinUCB further through a look ahead strategy, and obtain a more efficient algorithm LA-MinUCB. We apply our algorithms on different synthetic and real-world functions, and the results show the effectiveness of our method. Our algorithms also illustrate improvements on local search strategies from an upper bound perspective in Bayesian optimization, and provides a new direction for future algorithm design.

## 1 Introduction

Bayesian Optimization  is one of the most well-known black box function optimization methods, where objectives can be extremely expensive to evaluate, noisy, and multimodal. The high efficiency of Bayesian Optimization in finding global optima leads to the widespread application in various research fields, such as hyperparameter tuning [10; 11; 28], neural architecture search , chemical experiment design , reinforcement learning , aerospace engineering . However, the performance of Bayesian optimization is limited by the input dimension \(d\), as the theoretical regret bound grows exponentially with input dimension . This difficulty hinders the application of Bayesian optimization when the actual dimension of problem is rather high .

There are various methods that have been proposed to handle this difficult task, including works that rely on some assumptions on the model structure, such as the assumption that the majority of the variables have no effect  or the kernel satisfies an additive structure . Local Bayesian optimization methods, which focus on finding a local optima (instead of the global one), have also been a popular (and less restrictive) compromise to manage the curse of dimensionality. Representativemethods of these include those based on local trust region methods , local latent space , and approximated gradient methods [22; 23; 36]. Among them the approximate gradient method has demonstrated strong performance in practical applications compared with other methods. The approximate gradient method can be described as a two-stage algorithm, which loops through the following two processes: first sample points to decrease the uncertainty of the local area according to a local exploration acquisition function, and then moving to the next point with a trustworthy high reward through a local exploitation acquisition function. Muller et al.  applied the idea of gradient descent and first proposed the GIBO algorithm, which was designed to alternate between sampling points to minimize the posterior variance of the gradient at a given location, and then moving in the direction of the expected gradient. Nguyen et al.  proposed MPD, which improved the local exploitation acquisition function through defining the descent direction by maximizing the probability of descent, and designed corresponding local exploration acquisition function to match this strategy. Wu et al.  further provided the detailed proof on the local convergence of GIBO with a polynomial convergence rate, for both the noiseless and noisy cases.

Although the approximated gradient method has been shown to be practical in dealing with high-dimensional problems, there may be still some room to potentially improve on the current methods. We motivate the ideas for improvement with the following two questions.

1) We observe that GIBO only utilizes the posterior distributions of the gradient at a point, which will ignore most of the information provided by Gaussian process surrogate in the region, which may lead to an inefficient descent. MPD attempts to make better use of Gaussian processes by performing multi-step descent, but this strategy can exhibits numerical instability and may lead to suboptimal performance of the algorithm (as seen in Section 8). This motivates us to think: is there a better local exploitation acquisition function that can ensure the algorithm fully utilizes Gaussian process information, and also guarantee the convergence to local optima points?

2) Do these acquisition functions necessarily need to depend on accurate gradient estimates at a point, or are there other acquisition functions that can improve the efficiency and still ensure local convergence?

In this paper, we attempt to answer the above two questions through our two new local Bayesian optimization algorithms. To address the first question, we first develop the relationship between the step of the gradient descent method and minimizing the Upper Confidence Bound (UCB). When the Gaussian process is applied as the surrogate model, minimizing the UCB can usually achieve a point with a higher reward than simply doing gradient descent. Motivated by this idea, we propose our first algorithm, Local Bayesian Optimization through Minimizing UCB (MinUCB), which replaces gradient descent step with a step that minimizes the UCB in the GIBO algorithm. We show that MinUCB will also converge to local optima with a similar convergence rate as GIBO. This discovery is also meaningful as it opens up possibilities for new designs on local Bayesian optimization algorithms. In this work we further apply the look ahead strategy to construct the local exploration acquisition function that is more compatible with minimizing the UCB, and propose our second algorithm, Look Ahead Bayesian Optimization through Minimizing UCB (LA-MinUCB). This algorithm is shown to be one step Bayesian optimal, and address our second question as a local efficient BO acquisition function does not require the additional step and accuracy of a gradient estimate. We implement extensive experiments to demonstrate the performance of our algorithms under different settings. The experimental results illustrate that our algorithms have better performance compared to other methods across many synthetic and real-world functions. We summarize our contributions as follows:

* We develop the relationship between the gradient descent step and minimizing the UCB, and show that minimizing UCB is more efficient when the Gaussian process is the underlying surrogate.
* We show that minimizing UCB is an efficient and accurate objective for local exploitation and propose MinUCB.
* We improve the local exploration acquisition function of MinUCB and obtain a more efficient local Bayesian optimization algorithm LA-MinUCB.
* We apply different synthetic and real-world function on our algorithm, and the results show the effectiveness of our methods.

## 2 Literature Review

High dimensional optimization is a growing research area, where many different methods have been proposed to solve this problem, including Bayesian optimization methods. Among the BO methods, the most widely studied approach focuses on structured Gaussian processes, which imposes additional assumptions, such as low dimensional active spaces or additive spaces, on kernel function or data structure. This includes the Additive and ANOVA Models , in which the kernel of Gaussian process is defined through the summation of univariate kernels. This essentially decompose the original Gaussian process into a sum of low dimensional Gaussian processes, which facilitates computations and convergence [9; 37; 13]. Another approach along these lines assumes that the objective function depends only on low dimensional subspace, and examples include hyperparameter optimization for neural networks . Most of these methods suppose a subspace is a linear subspace of the original Euclidean space. Wang et al. apply random linear embeddings to approximate this subspace and propose REMBO. Letham et al.  improve on this and tries to fix over exploration of boundary and distortions in embedding through adaptive linear embeddings . Other methods to learn the subspace structure include low-dimension matrix recovery  and nonlinear embeddings .

As mentioned in the Section 1, another line of research to address the computational and high dimensional challenges is to compromise and focus the BO to be more local, limiting the search region to facilitate computational feasibility and efficiency. Typical approaches along these lines look at incorporating the information about the local optimum , restricting the problem to a sequence of iteratively chosen one-dimensional sub-problems [14; 15], using trust regions [7; 32; 20], which expands and shrinks the size of its trust regions with information in each iteration, and approximated gradient methods [22; 23; 36]. Among them, the gradient based method MPD , proposed by Nguyen et al. has demonstrated very strong performance compared with other local methods, including gradient based method GIBO , trust region method Turbo  and Augmented Random Search (ARS) . Given the promising performance of approximate gradient methods, we leverage and extend the works of GIBO and MPD, to provide a simplier and more general local BO approach that can perform as well.

## 3 Preliminaries

### Bayesian Optimization

In this paper, we focus on the problem of minimizing a black-box function \(f()\):

\[_{}f()\]

Figure 1: This function \(f\) is sampled from \(GP(0,k(x,x^{{}^{}}))\), where \(k(x,x^{{}^{}})=exp(-(x-x^{{}^{}})^{2})\), with standard derivation of white noise \(=0.05\). The dataset contains 2 points, which is marked as black hollow circle. We attempt to search the next point from \(_{0}\). The left figure shows that UCB bound is much tighter than other two gradient based bounds, and the minimum points of UCB has the best performance. This shows that minimizing UCB in this example can achieve a much better move to lower point than the gradient descent approach. The right figure illustrates UCB across the design space. Here we see that it is small only near the sampled point, and increases as it moves further away, indicating that minimizing UCB can be viewed as local strategy.

We assume that no higher order information can be obtained from the oracle (Zeroth-Order-Oracle), where only \(i.i.d\) noisy function evaluations \(y=f()+\), \((0,^{2})\) can be observed. Here we focus on applying Bayesian optimization to solve the problem. BO is a surrogate based optimization approach where the objective function is typically modeled with a Gaussian process, and an acquisition function is constructed to sequentially determine next evaluation points in the optimization process.

### Gaussian process and its derivatives

Currently Gaussian process (GP) is one of the most widely used surrogate model today as it has nice analytical form and is flexible to capture various functional forms. A \(GP(m(),k(,^{{}^{}}))\) is specified by its mean function \(m()\) and kernel function \(k(,)\). Without loss of generality, we assume the mean function \(m() 0\). Suppose \(f\) is sampled from the \(GP(0,k(,^{{}^{}}))\), and we already have a dataset \(=\{(_{1},y_{1}),...,(_{n},y_{n})\}\), and set \(_{}=[_{1},...,_{n}]\), \(_{}=[y_{1},...,y_{n}]^{T}\), then the posterior over \(f\) is also a \(GP(_{}(),k_{}(,^{{}^{ }}))\), where

\[_{}() =k(,_{})(k(_{},_{})+^{2}I)^{-1}_{}\] \[k_{}(,^{{}^{}}) =k(,^{{}^{}})-k(,_{ })(k(_{},_{})+^{2} I)^{-1}k(_{},^{{}^{}})\] \[^{2}_{}() =k_{}(,)\]

where \(k(,_{})=[k(,_{1}),...,k( ,_{n})]\), \(k(_{},)=k(,_{})^ {T}\), and \(k(_{},_{})\) is the positive definite kernel matrix \([k(_{i},_{j})]_{i,j n}\).

It should be noted that if the kernel function \(k\) is differentiable, then the derivative of \(f\) is also a GP. Given the dataset \(\), The posterior of \(f\) satisfies:

\[ f| GP(_{}(), k_{ }(,)^{T})\]

In this work we only consider the noisy case, i.e. the standard derivation of white noise \(>0\).

## 4 The relationship between gradient descent and minimizing UCB

We first review the traditional gradient descent approach. This approach is fundamentally based on the assumption of the smoothness of the function:

**Definition 1**.: _(Smoothness) A function \(f\) is L-smooth if and only if for all \(_{1},_{2}\), we have_

\[\| f(_{1})- f(_{2})\|_{2} L\|_ {1}-_{2}\|_{2}\]

Suppose the initial point is \(_{0}\), and function \(f()\) is L-smooth, then we will have the following inequality:

\[f() f(_{0})+ f(_{0}),-_{0}+\|-_{0}\|_{2}^{2}\] (1)

This provides a quadratic upper bound on \(f\), and the minimum value of this upper bound is taken at \(=_{0}- f(_{0})\). In the gradient descent approach, the minimum value of this upper bound is taken as the descent step, where \(=\) is used as the step size in traditional gradient descent analysis. In this view gradient descent can be treated as selecting the minimum point of this quadratic upper bound Eq. (1).

As direct gradient information is not observable in practice, the upper bound Eq. (1) cannot be obtained, and approximate gradient methods instead attempt to derive a looser upper bound based on Eq. (1). In GIBO [22; 36], they replace the gradient \( f(_{0})\) with the derivative of the Gaussian process \(_{}(_{0})\), and apply the strategy \(=_{0}-_{}(_{0})\) when the variance of this gradient is small enough. According to the proof of Lemma 15 in , GIBO is also a result of optimizing a different upper bound of \(f()\). If \(\) is chosen to be the form of \(=_{0}-_{}(_{0})\) and \(\), this upper bound is:

\[f() f(_{0})-\| f(_{0}) \|_{2}^{2}+\|_{}(_{0})- f( _{0})\|_{2}^{2}\] (2)

If the approximation error of gradient \(\|_{}(_{0})- f(_{0})\|_{2}\) is small enough, then the optimal \(\) is chosen as \(\). This upper bound Eq.(2) is actually the local exploitation acquisition function of GIBO.

Although these two bounds have intuitive application in the gradient descent, they do have some limitations. The first is the obtainment of the L-smooth coefficient. Although it is possible to estimate the L-smooth coefficient through the Gaussian process, this estimation is expensive as it needs many samples, especially in high dimensional cases. The second is that these two bounds are relatively loose, and the minimum points of these two bounds tend to be too close to \(_{0}\). Upper bound Eq. (1) is quadratic and increase very fast when the point \(\) is far from \(_{0}\), and upper bound Eq. (2) only allows the stepsize \(\) to be less than \(\). When \(L\) is unknown and we have to give it a large estimate to ensure convergence (usually in real case), the above phenomenon becomes more severe. Taking this view of gradient descent approaches as moving along the minimum of an upper bound of \(f()\), then leads us to explore if it is possible to discover some tighter upper bounds, where the minimum point is lower than that in Eq. (1) and Eq. (2). This can lead us to find a point with a possible higher reward.

A commonly used concept in Bayesian Optimzation is the upper confidence bound (UCB), which is defined as followed:

\[()=_{}()+_{}()\] (3)

Previous work mainly focused on maximizing UCB to find the maximum value of a function . However, it should be noted that UCB is also a natural bound for function \(f()\). UCB fully utilizes the posterior distribution of \(f()\), and give every point a probabilistic bound depending on the coefficient \(\). The standard deviation term \(_{}()\) has an upper bound and will not grow faster than the quadratic function, which means the UCB will not change drastically. This indicates that if we select \(\) to be

\[^{}=_{}_{}()+ _{}()\] (4)

Then the function value \(f(^{})\) more likely to have a smaller value than the points obtained through optimizing the upper bound Eq. (1) and Eq. (2). This is because the points obtained by minimizing UCB can be further away from the initial point compared to simply gradient descent.

Fig (1) shows a simple 1-dimension illustrative example. In this example, we sample a function \(f\) from \(GP(0,k(x,x^{{}^{}}))\), where \(k(x,x^{{}^{}})=exp(-(x-x^{{}^{}})^{2})\), and the standard deviation of white noise \(=0.05\). Here we illustrate the search of the next point from \(x_{0}\) based on the upper bound perspective of three methods. Suppose we have already sampled two points, which are marked as black hollow circles. These two data points are selected through Central Finite Difference Approximations , which is aimed to better estimate the gradient of \( f(_{0})\). In the left figure, the green line represent the real quadratic upper bound Eq. (1) at \(_{0}\), and the blue line is calculated through Eq. (2). The coefficient \(\) in UCB bound Eq. (3) is set as 3, which means that for any point \(\), the probability of \(f()<UCB()\) is close to \(99.9\%\). It can be seen from the left figure in Fig (1) that the UCB bound is much tighter than other two bounds, and the minimum point of the UCB bound has a much lower function value than the gradient based method. The right figure plots the UCB across the input space, and we see that the UCB changes relatively slowly and will not reach infinity. Further we observe that UCB is only small near the sampled point, indicating that minimizing the UCB can be viewed as a local strategy. This simple example illustrates that with a Gaussian process function, minimizing UCB can achieve a better point than the gradient methods, as UCB efficiently utilizes the information from Gaussian process. Based on these insights, we propose two new local Bayesian optimization algorithms, and demonstrate their performances in several numerical examples.

Local Bayesian Optimization through Minimizing UCB

The analysis the above section provides us with an important idea, that if we replace the gradient descent step with a step that minimizes a tighter upper bound such as UCB, we may be able to achieve a better result in local optimization. Our first algorithm, Local Bayesian Optimization through Minimizing UCB (MinUCB) (Algorithm 1), is developed with this idea, and we show that minimizing the UCB for the step move is an efficient objective for the local exploitation, that can guarantee the convergence with an appropriate local exploration acquisition function.

MinUCB can be viewed as a modified version of GIBO  (we list GIBO algorithm in Appendix A for reference). In our approach, we adopt the same local exploration acquisition function to sample points as in GIBO (to keep that constant) (line 4 in Algorithm 1), and only set the objective of local exploitation acquisition function that drives the step move to minimizing the UCB, instead of gradient descent step \(_{t+1}=_{t}-_{t}_{_{t}}(_{t})\), as shown in line 8 in Algorithm 1. We first introduce some notations here for better illustration of our algorithm. We define \(k_{}(_{t},_{t})=k_{}( _{t},_{t})-k_{}(_{t},)(k_{ }(,)+^{2}I)^{-1}k_{}(,_{t})\), which is exactly the posterior variance of \(f(_{t})\) conditioned on the dataset \(\) and a new input \(\). Because the estimation of variance does not require \(\), we have omitted the symbol here. The local exploration acquisition function for sampling is defined on this posterior variance:

\[_{}(_{t},)=( k_{ _{t-1}}(_{t},_{t})^{T})\] (5)

which is the trace of the posterior covariance matrix of the \( f(_{t})\) conditioned on the dataset and input. This trace quantifies the uncertainty of gradient \( f(_{t})\). With a large batch size \(b_{t}^{(2)}\), minimizing this trace will result in a lower uncertainty on the estimation of gradient. Although UCB doesn't involve gradient descent, we keep this step constant and argue that the candidates selected through this local exploration acquisition function will still efficiently decrease the uncertainty on this local area, which will benefit the local exploitation move when minimizing the UCB.

In the local exploitation part, the \(_{t}\) controls the search area for each step. The larger the \(_{t}\), the closer \(_{t+1}\) will be to the existing data point. Minimizing the UCB can bring performance improvements, and we show later in Section 6 (Theorem 2) that MinUCB will have a similar convergence rate as GIBO with carefully selection on coefficients \(_{t}\) and batch size \(b_{t}^{(1)}\), \(b_{t}^{(2)}\). The results of MinUCB can provide inspiration on the design for more efficient local Bayesian optimization algorithm, as shown in Section 7.

It should be noted that in MinUCB we resample multiple times on the local exploitation result \(_{t}\) with a batch size \(b_{t}^{(1)}\) (line 3 in Algorithm 1). This step is mainly added to ensure the theoretical convergence of the algorithm. This step will typically be only a very small proportion of sampling points, especially in the high dimensional case.

## 6 Convergence Analysis of MinUCB

In this section, we establish a convergence analysis of MinUCB to demonstrate the effectiveness of using minimizing UCB as the objective of local exploitation. We prove that MinUCB has a polynomial convergence rate, and this rate also exhibits a polynomial relationship with the input dimension, indicating that MinUCB performs very well in high-dimensional case. For the whole convergence proof of MinUCB, please refer to Appendix B.1-B.4. In our convergence analysis, we set a mild assumption on kernel function \(k\):

**Assumption 1**.: _The kernel \(k(,)\) is stationary, four times continuously differentiable, strictly positive definite, and bounded: \(_{_{t}}k(,) 1\)_

Many common kernels such as RBF kernel and Matern kernel with \(>2\) will satisfy this assumption. We also need the definition domain of Gaussian process is bounded:

**Assumption 2**.: _The Gaussian process \(f()\) is defined on a bounded closed set \(\), i.e. there exist a constant \(r>0\) that \(_{1},_{2}\), \(\|_{1}-_{2}\|_{2} r\)._

The next we borrow the definition of Error function from Wu et al. . The Error function measures the maximum reduction of uncertainty about the gradient estimation at \(=0\) when there are \(b\) data points \(\) without any extra dataset:

**Definition 2**.: _(Error function) Given input dimensionality \(d\), kernel \(k\) and noise standard deviation \(\), we define the following error function:_

\[E_{d,k,}(b)=_{^{k d}}(  k(,)^{T}- k(,)(k( ,)+^{2}I)^{-1}k(,)^{T})\] (6)

Based on the above assumptions, we develop the convergence theory for MinUCB:

**Theorem 1**.: _Suppose \(f\) is sampled from a zero mean Gaussian process with a continuously differentiable covariance function \(k(,)\), and \(k(,)\) satisfies Assumption 1. Then after \(t\) iterations of MinUCB algorithm, with the batch size \(b_{t}^{(1)}\) and \(b_{t}^{(2)}\), it satisfies that_

\[_{T/2 t T}\| f(_{t})\|_{2} }}_{t=1}^{T} {_{t}}{^{(1)}}}+_{t=1}^{T} _{t}^{2}_{t}E_{d,k,}(b_{t}^{(2)})+O( )}\] \[+}}_{T/2}}(b_{T/2}^{(2)})}\]

_where \(_{t}\) and \(_{t}\) are both decreasing sequence. They satisfies \(_{t}=O(_{t})\) and \(}=O(dd^{2}}{}}+d^{})\), and \(_{t}=t^{2}}{}}\)_

**Proof Outline of Theorem 1**:

* From the definition of \(_{t+1}\),we can obtain \(f(_{t+1})_{x^{d}}_{_{t}}()+_{t}_{_{t}}()_{_{t}}( }_{t+1})+_{t}_{_{t}}(}_{t +1})\), where \(}_{t+1}\) is a pseudo gradient descent step. \(}_{t+1}=_{t}-_{t}_{_{t}}( _{t})\). The probability of the above inequality being true can be controlled by \(_{t}\).
* We try to build the relationship of \(_{_{t}}(_{t})+_{t}_{_{t}}( _{t})\) and \(_{_{t}}(}_{t+1})+_{t}_{_{t} }(}_{t+1})\). We apply the local properties of the mean function \(_{_{t}}()\) and standard deviation function \(_{_{t}}()\) (proved in Appendix B.1 and B.2), which is: \[_{_{t}}(}_{t+1}) _{_{t}}(_{t})-_{t}\|_{ _{t}}(_{t})\|_{2}^{2}+}}{2}_{t}^{2} \|_{_{t}}(_{t})\|_{2}^{2}\] \[_{_{t}}(}_{t+1}) c_{1}_{_{t}}(_{t})+error(\|_{_{t}} (_{t})\|_{2})\]
* We bring the above relationship into the initial inequality, and use the triangle inequality to establish the relationship between \(_{_{t}}(_{t})\) and \( f(_{t})\). After a few more simple steps of derivation, the final result can be obtained.

It can be seen that the convergence of gradient \(\| f(_{t})\|_{2}\) heavily depend on the batch size \(b_{t}^{(1)}\) and \(b_{t}^{(2)}\). The large batch size will accelerate the convergence, with the additional cost of sampling. The upper bound of \(E_{d,k,}(b)\) and its theoretical property can be referred in Wu et al. , and we also list them at Appendix B.3, lemma 6-9. Thus if we combine the above result, the convergence rate of MinUCB is obtained:

**Theorem 2**.: _Suppose \(f\) is sampled from a zero mean Gaussian process with a continuously differentiable covariance function \(k(,)\), then if the kernel is RBF kernel or Matern kernel with \(=2.5\), and satisfy \(_{t}=t^{2}}{}}\), batch size_

\[b_{t}^{(1)}=^{2}t\\ t\\ t^{2} b_{t}^{(2)}=d^{2}t\\ dt\\ dt^{2}\]

_Then MinUCB will achieve the convergence rate of_

\[_{T/2 i T}\| f(x_{i})\|_{2}^{2}O( d^{ }T^{-1}^{}T^{2}}{})+O( d^{2}) \\ O( d^{2}T^{-}^{}T^{2}}{})=O(  d^{}n^{-}^{})\\ O( d^{2}T^{-1}^{}T^{2}}{}))=O( d^{ }n^{-}^{}))\]

where \(n\) is the number of samples. Our method achieves similar results to Wu et al. , except for some logarithmic term and the order of \(d\). The dimension \(d\) in our boundary is larger than that inWu's work, which is because we also take the upper bound of the L-smooth coefficient of Gaussian process into consideration, while this upper bound also increases at the polynomial rate with the data dimension \(d\), as seen in Theorem 3 in Appendix B.1. According to Theorem 2, we need to iteratively increase the UCB coefficient \(_{t}\) and batch size \(b_{t}^{(1)}\), \(b_{t}^{(2)}\) to guarantee the convergence of MinUCB. This phenomenon can be explained that, when the algorithm approaches the local optima, the area around local optima will usually be flatter than other areas (as the gradient is near 0). The algorithm needs more detailed local exploration to ensure a better descent. The polynomial convergence rate demonstrates that our local exploitation strategy, minimizing UCB, is accurate and powerful. It can ensure the accuracy of the local search and fully utilize the information of Gaussian processes.

## 7 Look Ahead Bayesian Optimization through Minimizing UCB

Our proposed MinUCB enjoy good theoretical properties and provide an alternative idea of minimizing the UCB as a good way to progress the local search under a Gaussian process surrogate. However, there are still improvements that can be made to the local exploration in MinUCB. Specifically, UCB itself does not require any gradient information, and the local exploration in MinUCB still focuses on learning the information at a single current point. This under utilizes the Gaussian process surrogate, and the potential information in the local region. Based on the above, we focus here on selecting a better local exploration acquisition function for minimizing UCB, which can help to accelerate the local Bayesian optimization.

In this section we apply a look ahead strategy. The motivation here is to obtain desired candidates to improve the UCB bound, and help the next local exploitation achieve better results under an expectation view. With this idea we propose our second algorithm, Look Ahead Bayesian Optimization through Minimizing UCB (LA-MinUCB) (Algorithm 2).

```
1Input: A black-box function \(f\).
2for\(t=1,2,...,T\)do
3\(=_{}_{}}_{} (,_{t-1},,})\) where \(^{b_{k} d}\)   #Local exploration
4 evaluate the black-box function \(f\) on \(\), obtaining noisy measurements \(\)
5\(_{t}=_{t-1}(,)\)
6\(_{t+1}=_{}_{_{t}}()+ _{t}_{_{t}}()\)   #Local exploitation via minimizing UCB
7\(y_{t+1}=f(_{t+1})+_{t}\)
8\(_{t}=_{t}(_{t+1},y_{t+1})\)
9 end for
10\(_{T}=_{}_{_{T}}()+_{T }_{_{T}}()\) ```

**Algorithm 2**LA-MinUCB: Look Ahead Bayesian Optimization through Minimizing UCB

Suppose we have the input \(\) and their labels \(_{Z}\) (this part is unknown before sampled), we define \(_{Z}\) as \(_{Z}=\{(_{i},y_{i})\}\), \(i=1,...,b_{t}\) as the dataset formed through \(\) and \(_{Z}\). Then we define

\[(,_{t-1},,})=_{ _{t-1}_{Z}}()+_{t}_{ _{t-1}_{Z}}()\]

This is the upper confidence bound when we already have the dataset \(_{t-1}_{Z}\), and we want to find the input \(\) to minimize the minimum point of UCB: \(_{}(,_{t-1},,})\). However, as the label \(_{Z}\) is unknown, we can only choose to optimize it through its expectation. We adopt this look ahead predictive as the local exploration acquisition function in LA-MinUCB:

\[=_{}_{}}_{} (,_{t-1},,})\] (7)

Although the local exploration in LA-MinUCB does not need to be specified around a certain point, it is still necessary to have an local exploitation step. Local exploitation step may find a point with current best reward, and will provide a better foundation for subsequent local exploration.

LA-MinUCB has a similar structure with traditional Knowledge Gradient  except for the standard derivation term \(_{_{t}}()\). This standard derivation term behaved as a regularization term, that force the sampled points to be not too far away from current area. This is because only when the selected points are closer to the current optimal point, are they more likely to learn which nearby area may contain smaller values, thereby achieving a greater decrease in the next exploitation step. This extra standard derivation term restrict the over-exploration of the original Knowledge Gradient to help it perform better exploitation. Benefiting from this property, LA-MinUCB is able to focus on doing local search and quickly find local optima points.

The significant advantage of using LA-MinUCB is that its strategy has good theoretical properties:

**Theorem 3**.: _If only one iteration is left and we can observe the function value through sampling, then the local exploration in LA-MinUCB is Bayes-optimal among all feasible policies._

The proof of this theorem is listed in Appendix B.5. This indicates that LA-MinUCB is a greedy strategy, where in each step it use the optimal acquisition function to enhance the exploitation. From this perspective, LA-MinUCB is likely to be superior to MinUCB because LA-MinUCB is better prepared for the next step of exploitation. This is also reflected in our experiments results, which shows that LA-MinUCB have a very competitive performance in numerical experiments and practical applications. Meanwhile, this also illustrates that good local Bayesian optimization algorithms can be constructed without the need for approximate gradients.

## 8 Experiments

In this section we apply varies experimental settings to assess the efficacy of our proposed two algorithms, Min-UCB and LA-MinUCB, relative to two established methodologies. These include two approximated gradient methods, (1) GIBO  and (2)MPD , which has shown strong performance in local Bayesian optimization methods, and one trust region based method (3) TurBO . Our code is based on Nguyen et al. , where they provide the program of GIBO, MPD, and various of objective functions. Our experimental settings on synthetic (Sect. 4.1) and reinforcement learning (Sect. 4.2) objectives are same as their papers. Each algorithm is executed a total of ten times for every objective function that we examine, initiating from an identical set of starting points sampled across the bounded domain via a Sobol sequence. We illustrate the results in Fig. (2) (synthetic objective) and (3) (reinforcement learning objective). The figures shows the mean of current best reward on the number of queries with an error bar (defined through the standard derivation). Our experimental framework was executed on a workstation of 20 Intel Xeon CPU cores, with a 32GB

Figure 3: Progressive optimized reward on the MuJuCo tasks. LA-MinUCB has consistently optimal performance.

Figure 2: Progressive optimized reward on high-dimensional synthetic functions. LA-MinUCB demonstrates fast and accurate convergence compared to other methods.

of memory. The codes can be viewed on https://github.com/chinafzy1/Minimizing-UCB. For more computational details, please refer to Appendix A. For more experimental results and ablation study, please refer to Appendix C.

### Synthetic Objectives

In our first experiments, we focused on optimizing synthetic objective functions within the d-dimensional unit hypercube \(^{d}\). These functions were generated by sampling from a Gaussian Process (GP) with a Radial Basis Function (RBF) kernel. This Synthetic objective is first mentioned in Muller et al. , and for a more comprehensive understanding of this experimental setup, please refer to SS4.1 in their work. Each experiment was allocated a budget of 500 function evaluations, under the dimension \(\{25,50,100\}\) separately. The error bar here is defined as plus or minus 0.2 standard derivation for better illustration, as the functions sampled by Gaussian processes have significant differences. Fig. (2) illustrates that our proposed LA-MinUCB and Min-UCB achieve highly competitive performance in both efficiency and accuracy, where LA-MinUCB is slightly better. The MPD ascent very rapidly at the beginning, but soon shows instability. Although each ascent applies the direction of maximum probability, it considers multiple ascent in one iteration in the algorithm. This strategy may instead lead to a small probability that the final point is greater than the original point, causing the algorithm to fall into suboptimal solutions. GIBO can achieve very close to the real local optimum, but its strategy is too conservative, resulting in slow convergence. Similarly, when the dimensionality is particularly high, TurBO performs relatively poorly and does not have much competitiveness.

### Reinforcement Learning Objective

In this experiment, we turned to reinforcement learning, specifically MuJoCo-based locomotion tasks . In these tasks, we try to learn a linear policy that maps states into actions in order to maximize the rewards given by the learning environment. We adopt the experiments similar with Nguyen et al.  including three environments: CartPole-v1 with 4 parameters, Swimmer-v1 with 16 parameters, and Hopper-v1 with 33 parameters. The only difference is that we apply the Hopper-v1 without the state normalization, as in Nguyen's work they show that this state normalization will cause a significant unstable change in the function value. The error bar here is defined as plus or minus one standard derivation. Our results, depicted in Fig. (3), show that LA-MinUCB has an excellent performance in all three cases. LA-MinUCB exhibits faster convergence speed and may achieve a better local optima than other methods. Although MinUCB has also shown slightly better performance than GIBO, it is still not that efficient as LA-MinUCB. This reflects the powerful performance of LA-MinUCB in real applications, and also indicates that efficient local Bayesian optimization algorithm can be designed without the estimation of gradient information.

## 9 Conclusion

In this paper we find the connection between gradient descent and minimizing the UCB, demonstrating that minimizing UCB is an efficient local exploitation strategy with the Gaussian Processes surrogate. We introduce MinUCB, an algorithm applying minimizing the UCB as the objective of local exploitation, that will converges to local optima within a polynomial rate. By enhancing the local exploration acquisition function of MinUCB, we have developed a more advanced local Bayesian optimization algorithm, LA-MinUCB. We have tested our algorithm on various synthetic and reinforcement learning objectives, and the results have confirmed the efficacy of our approaches.

In this article, we have not provided the convergence proof of the LA-MinUCB algorithm. One consideration is whether LA-MinUCB have a better theoretical convergence rate compared to other methods, such as GIBO? Additionally, are there any other better local exploitation strategy in local Bayesian optimization? These will become interesting research directions in the future.