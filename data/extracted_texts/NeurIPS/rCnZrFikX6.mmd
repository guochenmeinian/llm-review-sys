# Neural Persistence Dynamics

Sebastian Zeng\({}^{{}/{}}\), Florian Graf\({}^{{}}\), Martin Uray\({}^{{}/{}}\), Stefan Huber\({}^{{}}\), Roland Kwitt\({}^{{}}\)

\({}^{{}}\)University of Salzburg, Austria

\({}^{{}}\)Josef Ressel Centre for Intelligent and Secure Industrial Automation,

University of Applied Sciences, Salzburg, Austria

{sebastian.zeng, florian.graf, roland.kwitt}@plus.ac.at,

{martin.uray, stefan.huber}@fh-salzburg.ac.at

###### Abstract

We consider the problem of learning the dynamics in the topology of time-evolving point clouds, the prevalent spatiotemporal model for systems exhibiting collective behavior, such as swarms of insects and birds or particles in physics. In such systems, patterns emerge from (local) interactions among self-propelled entities. While several well-understood governing equations for motion and interaction exist, they are notoriously difficult to fit to data, as most prior work requires knowledge about individual motion trajectories, i.e., a requirement that is challenging to satisfy with an increasing number of entities. To evade such confounding factors, we investigate collective behavior from a _topological perspective_, but instead of summarizing entire observation sequences (as done previously), we propose learning a latent dynamical model from topological features _per time point_. The latter is then used to formulate a downstream regression task to predict the parametrization of some a priori specified governing equation. We implement this idea based on a latent ODE learned from vectorized (static) persistence diagrams and show that a combination of recent stability results for persistent homology justifies this modeling choice. Various (ablation) experiments not only demonstrate the relevance of each model component but provide compelling empirical evidence that our proposed model - _Neural Persistence Dynamics_ - substantially outperforms the state-of-the-art across a diverse set of parameter regression tasks.

## 1 Introduction

Understanding emerging behavioral patterns of a collective through the interaction of individual entities is key to elucidate many phenomena in nature on a macroscopic and microscopic scale. Prominent examples are coherently moving flocks of birds, the swarming behavior of insects and fish or the development of cancerous cells, all understood as 2D/3D point clouds that _evolve over time_. Importantly, several widely-accepted governing equations for collective behavior exist  which, _when appropriately parameterized_, can reproduce different incarnations of typically observed patterns. Even more importantly, these equations are tied to physically interpretable parameters and can provide detailed insights into the intrinsic mechanisms that control various behavioral regimes. However, while it is fairly straightforward to simulate collective behavior from governing equations (see ), the _inverse_ problem, i.e., _identifying_ the model parameters from the data, turns out to be inherently difficult. Confounding factors include the often large number of observed entities and the difficulty of reliably identifying individual trajectories across point clouds at possibly non-equidistant observation times.

However, as several works  have recently demonstrated, it may not be necessary to rely on individual trajectories for parameter identification. In fact, collective behavior is characterized by global patterns that emerge from local interactions, and we observe the emergence of these patterns through changes to the "shape" of point clouds over time. For instance, birds may form a flock, splitinto groups, and then merge again. This perspective has prompted the idea of summarizing such topological events over time and then phrasing model identification as a downstream _prediction/regression task_. The key challenge here lies in the transition from topological summaries of point clouds at specific observation times, typically obtained via _persistent homology (PH)_[3; 9; 22], to the _dynamic_ regime where the temporal dimension plays a crucial role.

Yet, despite the often remarkable performance of topological approaches in terms of parameter identification for models of collective behavior, it remains unclear in which situations they are preferable over more traditional (learning) methods that can handle point cloud data, as, e.g., used in computer vision problems [24; 46]. In the spirit of , we highlight this point by previewing a snapshot of one ablation experiment from Sec. 4. In particular, Tbl. 1 compares the parameter regression performance of our proposed approach, using PH, to a variant where we instead use PointNet++ representations. Referring to Fig. 1, this means that the \(_{_{}}\) are computed by a PointNet++ model. As can be seen in Tbl. 1, relying on representations computed via PH works well on _both datasets_, while PointNet++ representations fail on one dataset (vicesk-10k), but indeed perform reasonably well on the other (dorsogna-1k).

In light of this observation, it is worth emphasizing that there is a clear distinction in terms of the _source_ of point cloud dynamics when comparing collective behavior to problems in computer vision where moving objects are of primary interest and PointNet variants (see ) have shown stellar performance: in particular, point clouds in vision primarily evolve due to a change in pose or camera motion, whereas collective behavior is driven by (local) intrinsic point interactions. The latter induces changes to the "shape" of the point clouds, i.e., a phenomenon that is typically not observed in vision.

**Contribution(s).** Our key idea is to learn a generative model that can reproduce topological summaries _at each point in time_. This contrasts prior work, which primarily aims to extract _one_ summary representation of the entire timeline. In detail, we advocate for modeling the dynamics of vectorized persistence diagrams via a continuous latent variable model (e.g., a latent ODE), see Fig. 1, and to use the resulting latent paths as input to a downstream parameter regression task. Recent stability results for vectorizations of persistence diagrams - relating distances among the latter to the Wasserstein distance between point clouds - justify this modeling choice. Aside from state-of-the-art performance on various parameter identification tasks for established models of collective behavior, our approach scales favorably with the number of observed sequences, accounts for non-equidistant observation times, and is easily combinable with other sources of information.

    & \(\)**VE**\(\) & \(\)**SMAPE**\(\) \\   &  \\  Ours (PointNet++, v2) & 0.274\(\)0.085 & 0.199\(\)0.014 \\ Ours (PH, v1) & **0.579\(\)**0.034 & **0.146\(\)**0.006 \\   &  \\  Ours (PointNet++, v2) & 0.816\(\)0.031 & 0.132\(\)0.018 \\ Ours (PH, v1) & **0.851\(\)**0.008 & **0.096\(\)**0.004 \\   

Table 1: PointNet++ vs. persistent homology (PH) representations; \(\) means higher and \(\) means lower is better.

Figure 1: Conceptual overview of _Neural Persistence Dynamics_. Given is a sequence of observed point clouds \(_{_{0}},,_{_{N}}\). _First_, we summarize each \(_{_{i}}\) via (Vietoris-Rips) persistent homology into persistence diagrams (zero-, one- and two-dimensional; only the zero-dimensional diagrams are shown) which are then vectorized into \(_{_{i}}\) via existing techniques. _Second_, we model the dynamics in the sequence \(_{_{0}},,_{_{N}}\) via a continuous latent variable model (in our case, a latent ODE) and then use a summary of the latent path to predict the _parameters_ of specific governing equation(s) of collective behavior. Precomputed steps are highlighted in red.

Related work

Our work is partially related to the literature on learning with dynamic point clouds in vision problems, but _primarily_ connects to work on summarizing topological features over time and inferring interaction laws of collective behavior from data.

**Summarizing topological features over time.** A common denominator in the literature on encoding topological changes in dynamic point clouds is the use of _persistent homology_, extended to accommodate the temporal dimension in various ways. One of the early works along this direction are _persistence vineyards_, introduced as a means to study folding trajectories of proteins. Based on the idea of tracking points in persistence diagrams over time, vineyards come with stability properties similar to persistent homology , but are expensive to compute and compare on a large scale. In cases where one would know the "right" scale at which to compute homology, one may also use _zigzag persistence_, as done in [17; 54], to track homological changes over time. Nevertheless, for problems with a large number of observation sequences, scale selection per sequence is nontrivial and highly impractical.

Alternatively, instead of thinking about the evolution of individual points in persistence diagrams over time, one may discard the matching between points and instead focus on _sequences of summary representations_ of said diagrams. In , for instance, the authors work directly with persistence diagrams (per time point) to identify changes in the topology of time-varying graphs. In terms of temporal summary representations,  introduce _crocker plots_ to encode the evolution of topological features by stacking discretized Betti curves over time. _Crocker stacks_, an extension of this concept, adds a smoothing step that gradually reduces the impact of points of low persistence and, upon discretization, yields a third dimension to crocker plots. In our context, both crocker plots & stacks have been successfully used as input to regression methods to estimate the parametrization of models of collective behavior . By drawing on prior work on kernels for sequentially ordered data ,  follow a conceptually similar strategy as [52; 57], introducing a _path signature kernel (PSK)_ for sequences of summary representations of persistence diagrams.

Along a different line of research, [28; 29] propose _formigrams_ as summaries of dynamic metric data, encoding the evolution of _connected components_. In subsequent work,  construct multidimensional (i.e., spatiotemporal) persistent homology modules from dynamic metric data and compare invariants of these modules. While these works provide important theoretical stability results for zero-dimensional homological features, i.e., connected components, it is unclear how their construction extends to homological features of higher dimension in a tractable manner. However, it is worth pointing out that recent progress along the lines of vectorizations of multiparameter persistent homology  in combination with  (who essentially construct multiparameter persistence modules) might, in the future, constitute a tractable approach to study dynamically changing point clouds with learning methods.

Notably, computational challenges also arise in the context of crocker plots/stacks and PSKs. Despite their remarkable performance in distinguishing different configurations of models for collective behavior, both approaches suffer scalability issues: either (i) in terms of unfavorable scalability with respect to the dimensionality of vectorized persistence diagrams (as with the PSK approach of ), or (ii) in terms of unfavorable scalability with the number of observation sequences (as is the case for crocker plots/stacks, due to the need for extensive cross-validation of the discretization parameters). As we show in Sec. 4, our method not only outperforms these techniques by a large margin, but also scales to large amounts of training sequences and requires little hyperparameter tuning.

In addition to the closely related works discussed above, we highlight that there is a large body of literature on the topological analysis of time-varying signals, such as studying fMRI data via cubical persistence , or the persistent homology of delay embeddings [43; 44] of time series. In our context, however, these works are only partially related/relevant, as they do assume precise knowledge about individual trajectories over time (e.g., voxel IDs in fMRI data), which is unrealistic when seeking to infer parametrizations of models for collective behavior from data.

**Inferring interaction laws for models of collective behavior.** In the context of studying characteristics of collective behavior, there is a second line of closely related work on inferring interaction laws (see, e.g., [2; 5; 6; 27; 39; 61]), ranging from metric-distance-based models and topological interaction models to non-parametric estimators of interaction kernels. While a thorough survey of this literature is beyond the scope of this paper, we highlight that one _common denominator_ in these works is their reliance on correspondences between points across time, e.g., to infer individual point velocities or trajectories. To give an example, in recent work [39; 61], the authors derive non-parametric estimators for interaction kernels (certain functions of pairwise distances) between observed points which crucially hinges on the traceability of each particle over time. While such approaches are conceptually appealing and even allow for reconstructing or extrapolating trajectories, they operate in the _observation space_. Even under a moderate number of points \(m\), computing these estimators becomes prohibitively expensive (as, e.g., in 3D, the state space is \(^{3m}\)). In contrast, our approach only requires positional information and can handle larger point clouds. Furthermore, although we only present results on predicting parameters for a class of a priori specified governing equations, by formulating an auxiliary regression task, our underlying model may also be used to predict other quantities of interest.

Finally, taking a slightly broader perspective on prior art, we want to highlight recent progress on learning-based approaches that study inverse problems in the context of classic partial differential equations (PDEs). It might be possible to apply such approaches [37; 55; 60] to specific models of collective behavior such as volume exclusion , for which the asymptotics of infinitely many particles are solutions to parametric PDEs . However, for other models, the number of particles strongly influences the dynamics. For instance, in the D'Orsogna model , particle distances can collapse to zero as the number of particles tends to infinity.

## 3 Method

Below, we present our method with a focus on its application to modeling collective behavior in point clouds. Importantly, the latter represents only one of many conceivable use cases. In fact, the core ideas can be applied in exactly the same way whenever one can extract topological features from time-dependent data (e.g., graphs or images).

**Notation**. In the following, \(=\{_{1},,_{M}\}^{3}\) denotes a point cloud with \(M\) points and \(d(,)=\|-\|\) denotes the Euclidean metric. Point clouds may be indexed by \(t_{i}\) (or \(_{i}\)) to highlight the dependence on time \(t_{i}\). If necessary, we clearly distinguish between \(_{i}\) as a time point with an available observation, and \(t_{i}\) as a general placeholder for time.

**Problem statement**. Given a sequence of point clouds \(_{_{0}},,_{_{N}}\), observed at possibly non-equidistant time points \(_{i}\), we (1) seek to model their topological evolution over time and then (2) use this model to predict the parametrization of an a priori defined governing equation of collective behavior. The latter is typically specified by a small number of parameters \(_{1},,_{P}\) that control the motions \(_{i}/t\) of individual points \(_{i}\) and specify (local) interactions among neighboring points.

As preparation for our model description, we first briefly establish how one may extract topological features from a point cloud \(\), using _persistent homology_[3; 9; 22] - the arguably most prominent and computationally most feasible approach.

**Persistent homology of point clouds.** Persistent homology seeks to uncover and concisely summarize topological features of \(\). To this end, one constructs a topological space from \(\) in the form of a simplicial complex, and studies its homology across multiple scales. The most relevant construction for our purposes is the _Vetoris-Rips_ complex \(()_{}\), with vertex set \(\). This complex includes an \(m\)-simplex \([_{0},,_{m}]\) iff \(d(_{i},_{j})\) for all \(0 i,j m\) at a given threshold \(\). The "shape" of this complex can then be studied using homology, a tool from algebraic topology, with zero-dimensional homology (H\({}_{0}\)) encoding information about connected components, one-dimensional homology (H\({}_{1}\)) encoding information about loops and two-dimensional homology (H\({}_{2}\)) encoding information about voids; we refer to this information as _homological/topological features_. Importantly, if \(_{b}_{d}\), then \(()_{_{b}}()_{ _{d}}\), inducing a sequence of inclusions when varying \(\), called a _filtration_. The latter in turn induces a sequence of vector spaces \(_{k}(()_{_{b}})_{ k}(()_{_{d}})\) at the homology level. Throughout this sequence, homological features (corresponding to basis vectors of the different vector spaces) may appear and disappear; we say they are _born_ at some \(_{b}\) and _die_ at \(_{d}>_{b}\). For instance, a one-dimensional hole might appear at a particular value of \(_{b}\) and disappear at a later \(_{d}\); in other words, the hole _persists_ from \(_{b}\) to \(_{d}\), hence the name _persistent homology_. As different features may be born and die at the same time, the collection of (birth, death) tuples is a multiset of points, often represented in the form of a persistence diagram, which we denote as \(_{k}(())\). Here, the notation \(()\) refers to the full filtration and \(_{k}\) indicates that we have tracked \(k\)-dimensional homological features throughout this filtration.

Clearly this construction does not account for any temporal changes to a point cloud, but reveals features that are present at a _specific_ time point. Furthermore, due to the inconvenient multiset structure of persistence diagrams for learning problems, one typically resorts to appropriate _vectorizations_ (see, e.g., ), all accounting for the fact that points close to the diagonal \(=\{(x,x):x\}\) contribute less (0 at \(\)) to the vectorization. The latter is important to preserve stability (see paragraph below) with respect to perturbations of points in the diagram. In the following, we refer to a vectorized persistence diagram of a point cloud \(_{t_{i}}\) as

\[_{t_{i},k}:=(_{k}(( _{t_{i}}))),\] (1)

where \(_{t_{i},k}^{d}\) and \(d\) is controlled by hyperparameter(s) of the chosen vectorization technique. For brevity, we omit the subscript \(k\) when referring to vectorizations unless necessary.

**Remark 1**.: _As our goal is to model the dynamics of vectorized persistence diagrams using a continuous latent variable model, it is important to discuss the dependence of the vectorizations on the input data. In particular, for our modeling choice to be sound, vectorizations should vary (Lipschitz) continuously with changes in the point clouds over time. We discuss this aspect next._

**Stability/Continuity aspects.** First, we point out that persistence diagrams can be equipped with different notions of _distance_, most prominently the bottleneck distance and Wasserstein distances, both based upon the cost of an optimal matching between two diagrams, allowing for matches to the diagonal \(\). We refer the reader to  for a detailed review. _Stability_ in the context of persistent homology is understood as persistence diagrams varying (Lipschitz) continuously with the input data. While seminal stability results exist for the Wasserstein distances  and the bottleneck distance , most results from the literature focus on the latter.

In the case of _vectorization techniques_ for persistence diagrams (e.g., ), it turns out that, most of the time, vectorizations are only Lipschitz continuous with respect to Wasserstein distances, and existing results are typically of the form

\[d((F),(G)) K\,W_{1}(F,G),\] (2)

where \(W_{1}\) denotes the \((1,2)\)-Wasserstein distance as defined in [51, Def. 2.7], \(F,G\) are two persistence diagrams and \(K>0\) is a Lipschitz constant. In the context of Rem. 1, one may be tempted to combine Eq. (2) with the seminal _Wasserstein stability theorem_ from  to infer stability of vectorizations with respect to the input data. Yet, the conditions imposed in  actually eliminate a direct application of this result in most practical cases, as discussed in . However, the latter work also provides an alternative: in our particular case of Vietoris-Rips persistent homology, one can upper bound \(W_{1}\) in terms of the standard _point set_ Wasserstein distance \(_{1}\). Specifically, upon relying on a stable vectorization technique, we obtain the inequality chain

\[ d((F_{k}),(G_{k}))& ]}}}}{{}}K\,W_{1}(F_{k},G_{k})\\ &]}}}}{{}}2K _{1}(,),\] (3)

where \(F_{k}=_{k}(())\), \(G_{k}=_{k}(())\) denote the \(k\)-dimensional persistence diagrams of point clouds \(\) and \(\) of equal cardinality \(M\). In particular, we realize \(\) via the approach outlined in [26, Def. 10] using _exponential structure elements_[26, Def. 19].

Overall, the continuity property in Eq. (3) guarantees that small changes in dynamic point clouds over time only induce small changes in their vectorized persistence diagrams, and therefore provides a solid justification for the model discussed next.

**Latent variable model for persistence diagram vectorizations.** As we presume that the dynamic point clouds under consideration are produced (or can be described sufficiently well) by equations of motions with only a few parameters, cf. Fig. 3, it is reasonable to assume that the dynamics of the (vectorized) persistence diagrams are equally governed by a somewhat simpler unobserved/latent dynamic process in \(^{z}\) with \(z d\). We model this latent dynamic process via a neural ODE , learned in a variational Bayes regime1. In this setting, one chooses a recognition/encoder network (\(_{}\)) to parametrize an approximate variational posterior \(q_{}(_{t_{0}}|\{_{_{i}}\}_{i})\), an ODE solver to yield latent states \(\{_{_{i}}\}_{i}\) at observed time points \(_{i}[0,T]\) and a suitable generative/decoder network (\(_{}\)) to implement the likelihood \(p_{}(_{_{i}}|_{_{i}})\). Upon choosing a suitable prior \(p(_{t_{0}})\), one can then train the model via ELBO maximization, i.e.,

\[,=_{,}_{_{t_{0}} q_{}}_{i} p_{}( _{_{i}}|_{_{i}})-D_{}(q_{}(_{t_{0}}|\{_{_{i}}\}_{i})\|\,p(_{t _{0}})).\] (4)

Different to , we do not implement the recognition/encoder network via another neural ODE, but rather choose an attention-based approach (mTAN)  which can even be used in a standalone manner as a strong baseline (see Sec. 4). In our implementation, the recognition network yields the parametrization \((,)\) of a multivariate Gaussian in \(^{z}\) with diagonal covariance, and the prior is a standard Gaussian \((,_{z})\). Furthermore, the ODE solver (e.g., Euler) can yield \(_{t_{i}}\) at any desired \(t_{i}\), however, we can only evaluate the ELBO at observed time points \(_{i}\).

**Regression objective**. To realize our downstream regression task, i.e., predicting parameters \(_{1},,_{P}\) of an underlying governing equation for collective behavior (see Fig. 3) from a given observation sequence, we have multiple choices. By our assumption of a latent dynamic process that carries information about the dynamic nature of the topological changes, it is reasonable to tie the simulation parameter estimates \(_{1},,_{P}\) to the _latent path_\(\{_{t_{i}}\}_{i}\) via a regression network \(_{}\) that accepts \(\{_{t_{i}}\}_{i}\) as input. In particular, we re-use the attention-based encoder architecture \(_{}\) to allow attending to different parts of this path. However, different to \(_{}\), which parametrizes the approximate posterior from _observations_ at time points \(_{i}\), the regression network \(_{}\) (with its own set of parameters \(\)) receives _latent states_\(_{t_{i}}\) at equidistant \(t_{i}[0,T]\), then summarizes this sequence into a vector and linearly maps the latter to \(_{1},,_{P}\), cf. Fig. 2. As in , for training, we extend the ELBO objective of Eq. (4) by an additive auxiliary regression loss, such as the mean-squared error (MSE), between the predictions \(_{p}\) and the ground truth \(_{p}\), implicitly making a Gaussian noise assumption.

A schematic overview of our Neural Persistence Dynamics approach is shown in Fig. 1. Additional details, including different model variants, are illustrated in Fig. 2.

**Remark 2**.: _Clearly, our presented framework allows for many architectural choices. While some components affect downstream (regression) performance only marginally, others have a more profound impact, and we have already identified some recommended choices above (based on our experiments in Sec. 4). This includes (1) our choice of a stable persistent homology vectorization \(\), where we rely on  due to consistently reliable performance without much hyperparameter tuning, and (2) our choice of recognition network, where we choose an attention-based approach (mTAN)  which has proven to be very effective in practice . In Sec. 4.2, we will provide additional configuration details for our experimental study._

## 4 Experiments

### Datasets

Similar to previous work [4; 23; 52; 57], we evaluate and compare our approach on simulation data that is generated from parametric models of collective behavior. Specifically, we consider

Figure 2: Schematic illustration of different model variants. The first three variants (_left_ to _right_) explicitly model latent dynamics (later denoted as _w/ dynamics_), the baseline variants do not (later denoted as _w/o dynamics_), but still incorporate the attention mechanism of the encoder from , which we use throughout.

three different models in \(^{3}\): D'Orsogna , Vicsek  and volume exclusion , using the publicly-available implementations in the SiSyPHE library 2. The corresponding equations of motion (and interaction laws) are summarized in Fig. 3. The parameters that are varied to generate the datasets, i.e., the response variables of the regression tasks, are highlighted in red. We sample these parameters, as specified in Appendix A, to cover a wide range of macroscopic behavioral regimes. For each sampled parameter configuration, we simulate one sequence of point clouds, to a total of 10,000 sequences per model. All simulations are run for 1,000 time steps (with step size 0.01, starting at \(t=0\)) on point clouds of size \(M=200\). We take every 10th time step as an observation, yielding observation sequences of length 100. At \(t=0\), points are drawn independently and uniformly in \([-0.5,0.5]^{3}\), and initial velocities are uniformly distributed on the unit sphere. For direct comparison to , we also simulated their parameter configuration of the D'Orsogna model. This setup yields four datasets: dorsogna-1k (from ), dorsogna-10k, vicsek-10k and volex-10k.

### Implementation, training & evaluation metrics

**Implementation.** The model variants from Fig. 2 can be realized in many ways. Below, we specify the configuration that was used to run the experiments. For the encoder \(_{}\), as well as the regression network \(_{}\), we use the attention-based mTAN architecture . As decoder network \(_{}\), we choose a two-layer MLP with ReLU activations, and as ODE solver, we select the Euler method. Each model is trained for 150 epochs using ADAM  (with a weight decay of 0.001), starting at a learning rate of 0.001 (decaying according to a cosine annealing schedule) and MSE as a reconstruction (i.e., to evaluate the first term in Eq. (4)) and regression loss. In case a model uses topological features, we use Ripser++  to compute (prior to training) persistent homology of dimension up to two, i.e., \(_{0}\), \(_{1}\), and \(_{2}\). Vectorizations of _each_ persistence diagram are then obtained using _exponential structure elements_ from [26, Def. 19]. In particular, we use 20 structure elements per diagram, which yields a \(d=3 20\) dimensional representation per point cloud and time point. The location of each structure element is set to one of 20 \(k\)-means++ cluster centers, obtained by running the latter on a random subset of 50,000 points (per dimension) selected from all persistence diagrams available during training; the scale parameter of each structure element is set according to [48, Eq. (2)]. To model the dynamics, we fix the latent space dimensionality to \(z=20\) and scale the ODE integration time to \(\). While other settings are undoubtedly possible, we did not observe any noticeable benefits from increasing the dimensionality of the vectorizations or the latent space. Our publicly available reference implementation can be found at https://github.com/plus-rkwitt/neural_persistence_dynamics.

**Evaluation metrics.** We randomly partition each dataset into five training/testing splits of size 80/20. To obtain a robust performance estimate for different regimes of missing and unevenly spaced observations, we train three models (per split) using only a fraction (i.e., 20%, 50%, and 80%) of

Figure 3: Models of collective behavior. Parameters that are varied to obtain different behavior are highlighted in red; the range of each parameter is listed in Appendix A. In the **Vicesek** model, \(_{t}\) denotes Brownian motion.

randomly chosen time points per sequence. Similarly, all testing splits undergo the same sampling procedure. All scores (see below) are reported as an average (\(\) one standard deviation) over the five splits and the three time point sampling percentages. Specifically, we report the _variance explained (VE)_ (in \(\); higher is better \(\)) and the _symmetric mean absolute percentage error (SMAPE)_ (in \(\); lower is better \(\)). For each testing sequence in each split, the scores are computed from the _true_ simulation parameters (see variables marked red in Fig. 3) and the corresponding _predictions_ (denoted by \(_{i}\) in Fig. 2). Finally, when reporting results on a dataset, we mark the best score in **bold**, as well as all other scores that _do not_ show a statistically significant difference in mean (assessed via a Mann-Whitney test at 5% significance and correcting for multiple comparisons).

### Ablation

In our ablation study, we assess (1) the relevance of different point cloud representations (PH vs. PointNet++), (2) any potential benefits of modeling latent dynamics and (3) the impact of varying the observation timeframe. Additional ablation experiments can be found in Appendix B.3.

**Are representations complementary?** We first investigate the impact of different point cloud representations (from PH and PointNet++, resp.), by comparing variants v1,v2 and v3 from Fig. 2.

Tbl. 2 shows an extension of Tbl. 1, listing results for the vicsek-10k and dorsogna-1k data. While using PointNet++ representations on vicsek-10k yields rather poor performance, combining them with representations computed from PH is at least _not_ detrimental. On the other hand, on dorsogna-1k, where PointNet++ yields decent SMAPE and VE scores, the combination of both sources substantially outperforms each single source in isolation. Although, the complementary nature of a topological perspective on data has been pointed out many times in the literature, it is rarely as pronounced as in this particular experiment. _Hence, we will stick to the combination of PH+PointNet++ representations (i.e., v3 in Fig. 2) in any subsequent experiments._

**Are explicit latent dynamics beneficial?** To assess the impact of explicitly modeling the dynamics of persistence diagram vectorizations, we ablate the latent ODE part of our model. In detail, we compare v3 from Fig. 2 against using \(_{}\) operating _directly_ on concatenated point cloud representations from PH and PointNet++ (i.e., a combination of variants v4 & v5 from Fig. 2). The latter approach constitutes an already _strong baseline_ (cf. ) as \(_{}\) incorporates an attention mechanism that allows attending to relevant parts of each sequence. For a fair comparison, we increase the size of \(_{}\) to approximately match the number of parameters to our latent dynamic model.

As in Tbl. 2, we list results for the vicsek-10k and dorsogna-1k data in Tbl. 3. First, we see that explicitly modeling the latent dynamics is beneficial, with considerable improvements in the reported scores across both datasets. While differences are quite prominent on the dorsogna-1k data, they are less pronounced in the SMAPE score on vicsek-10k, but still statistically significant. Second, it is important to point out that even without any explicit latent dynamics, the regression performance (see Tbl. 4) is already above the current state-of-the-art (i.e., compared to PSK ), highlighting the necessity for strong baselines.

**Impact of the observation timeframe.** So far, we have presented results (as in prior work) where observation sequences are extracted from the beginning of a simulation (i.e., starting from \(t_{0}=0\)), which corresponds to observing the emergence of patterns out of a random yet qualitatively similar, initial configuration of points. In the following experiment, we investigate the impact of extracting observation sequences with _starting points randomly spread across a much longer simulation time_.

  
**Source** & \(\)**VE**\(\) & \(\)**SMAPE**\(\) \\   &  \\   & 0.274\(\)0.085 & 0.199\(\)0.014 \\ PH (v1) & **0.579\(\)**0.034 & **0.146\(\)**0.006 \\ PH+PointNet++ (v3) & **0.576\(\)**0.030 & **0.144\(\)**0.006 \\   &  \\  PointNet++ (v2) & 0.816\(\)0.031 & 0.132\(\)0.018 \\ PH (v1) & 0.851\(\)0.008 & 0.097\(\)0.005 \\ PH+PointNet++ (v3) & **0.931\(\)**0.004 & **0.067\(\)**0.002 \\   

Table 2: Ablation study on the relevance of different point cloud representations.

    & \(\)**VE**\(\) & \(\)**SMAPE**\(\) \\  [0,T-1000]\), assessed on the dorsogna-10k dataset.

**Limitation(s).** One obvious limitation in the presented implementation is the reliance on VietorisRips persistent homology of point clouds. In fact, the underlying simplicial complex will become prohibitively large (especially for H\({}_{2}\)) once we scale up the number of points by, e.g., an order of magnitude. Using an Alpha  or a Witness complex  might be a viable alternative to mitigate this issue. Similarly, one may explore subsampling strategies for persistent homology, as in , and learn a latent ODE from a combination of estimates.

**Societal impact.** The present work mainly deals with an approach to capture the dynamics observed in data representing collective behavior. We assume that this has no direct societal impact, but point out that any application of such a model (aside from synthetic data), e.g., in the context of behavioral studies on living beings or health sciences (e.g., to study the development of cancer cells), should be carefully reviewed. This is especially advisable when drawing conclusions from missing measurements, as these are based on imputations and may be biased.

#### Acknowledgments

This work was supported by the Land Salzburg within the EXDIGIT project 20204-WISS/263/6-6022 and projects 0102-F1901166- KZP, 20204-WISS/225/197-2019. M. Uray and S. Huber are supported by the Christian Doppler Research Association (JRC ISIA). _We also thank all reviewers for the valuable feedback during the review process._

    & & \(\)**VE \(\)** & \(\)**SMAPE \(\)** \\   & Ours (joint, v3) & **0.931\(\)**0.004 & **0.067\(\)**0.002 \\   & Ours (PH-only, v1) & 0.851\(\)0.008 & 0.097\(\)0.005 \\  & PSK  & 0.828\(\)0.016 & 0.096\(\)0.006 \\  & Crocker Stacks  & 0.746\(\)0.023 & 0.150\(\)0.005 \\   & Ours (joint, v3) & **0.689\(\)**0.021 & **0.088\(\)**0.004 \\   & Ours (PH-only, v1) & **0.680\(\)**0.025 & **0.090\(\)**0.005 \\  & PSK  & 0.647\(\)0.005 & 0.100\(\)0.003 \\  & Crocker Stacks  & 0.343\(\)0.016 & 0.145\(\)0.001 \\   & Ours (joint, v3) & **0.576\(\)**0.030 & **0.144\(\)**0.006 \\   & Ours (PH-only, v1) & **0.579\(\)**0.034 & **0.146\(\)**0.006 \\   & PSK  & 0.466\(\)0.009 & 0.173\(\)0.003 \\   & Crocker Stacks  & 0.345\(\)0.005 & 0.190\(\)0.001 \\   & Ours (joint, v3) & **0.871\(\)**0.019 & **0.081\(\)**0.006 \\   & Ours (PH-only, v1) & **0.869\(\)**0.018 & **0.082\(\)**0.007 \\    & PSK  & 0.509\(\)0.003 & 0.190\(\)0.003 \\    & Crocker Stacks  & 0.076\(\)0.019 & 0.292\(\)0.004 \\   

Table 4: Comparison to the state-of-the-art across four diverse datasets of collective behavior. Ours (joint) refers to the variant v3 of Fig. 2, Ours (PH-only) refers to variant v1. The latter setting is directly comparable to the PSK and Crocker stacks approach. Best results are marked **bold**. Multiple bold entries indicate that there is no significant difference in mean. Note that \(\) is simulated exactly as in  varying only _two parameters_, whereas for\(\) we vary _four_ parameters (as with \(\) and \(\)).