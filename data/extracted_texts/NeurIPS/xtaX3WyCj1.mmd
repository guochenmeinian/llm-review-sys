# Ties-Merging: Resolving Interference When Merging Models

Prateek Yadav\({}^{1}\) Derek Tam\({}^{1}\)

**Leshem Choshen\({}^{2,3}\) Colin Raffel\({}^{1}\) Mohit Bansal\({}^{1}\)**

\({}^{1}\) University of North Carolina at Chapel Hill \({}^{2}\) IBM Research \({}^{3}\) MIT

leshem.choshen@ibm.com

{praty,dtredsox,craffel,mbansal}@cs.unc.edu

###### Abstract

Transfer learning - i.e., further fine-tuning a pre-trained model on a downstream task - can confer significant advantages, including improved downstream performance, faster convergence, and better sample efficiency. These advantages have led to a proliferation of task-specific fine-tuned models, which typically can only perform a single task and do not benefit from one another. Recently, model merging techniques have emerged as a solution to combine multiple task-specific models into a single multitask model without performing additional training. However, existing merging methods often ignore the interference between parameters of different models, resulting in large performance drops when merging multiple models. In this paper, we demonstrate that prior merging techniques inadvertently lose valuable information due to two major sources of interference: (a) interference due to redundant parameter values and (b) disagreement on the sign of a given parameter's values across models. To address this, we propose our method, Trim, Elect Sign & Merge (Ties-Merging), which introduces three novel steps when merging models: (1) resetting parameters that only changed a small amount during fine-tuning, (2) resolving sign conflicts, and (3) merging only the parameters that are in alignment with the final agreed-upon sign. We find that Ties-Merging outperforms several existing methods in diverse settings covering a range of modalities, domains, number of tasks, model sizes, architectures, and fine-tuning settings. We further analyze the impact of different types of interference on model parameters, and highlight the importance of resolving sign interference.1

## 1 Introduction

Pre-trained models (PTMs) have become widespread in many real-world applications . Using PTMs typically involves fine-tuning them to specialize on a specific task , which can lead to improved performance with less task-specific labeled data. These benefits have resulted in the release of thousands of finetuned checkpoints  derived from popular PTMs such as ViT  for vision and T5  for language. However, having a separate fine-tuned model for each task has various drawbacks: (1) for each new application, a separate model has to be stored and deployed , and (2) models trained in isolation cannot leverage information from related tasks to improve in-domain performance or out-of-domain generalization . Multitask learning  could address these concerns but requires costly training and simultaneous access to all tasks . Moreover, it can be complex and resource-intensive to determine how best to mix datasets to ensure that multitask training is beneficial for all tasks .

Recently, a growing body of research has focused on _model merging_. One application of merging involves combining multiple task-specific models into a single multitask model without performing additional training. Previous works merge models by summing the individual model weights with different weighting schemes, either via a simple average , via more sophisticated means that incorporate parameter importance  or account for permutation invariances . Combining fine-tuned models in this way can be seen as adding together _task vectors_ that are computed by subtracting the pre-trained model's parameter values from those of the fine-tuned model.

While weighted averaging of model parameters has proven effective for merging, all of these methods ignore the possibility that values may interfere across models, thereby harming the performance of the merged model. In this paper, we first demonstrate that interference can stem from two major causes (see Fig. 2), both of which can reduce parameter magnitudes in the merged model and eliminate subtle distinctions among values: (1) Interference from redundant parameters: Previous studies on model pruning  have shown that during fine-tuning, many model parameters can change over the course of fine-tuning  but only have a small impact on performance. However, when merging a parameter that is influential for one model but redundant (i.e. not influential) for other models, the influential value may be obscured by the redundant values, lowering the overall model performance (\(\) in Fig. 2). (2) Interference from sign disagreement: A given parameter might have a positive value for some models and a negative value for others. Consequently, employing simple averaging might compromise the performance on both tasks (\(\) in Fig. 2). In both of these situations, simply aggregating the values lead to interference that shrinks the parameter's value in the merged model. This interference between influential parameters might explain why the performance gap between the merged model and multitask-trained model increases as the number of models increases .

To address these sources of interference, we propose Ties-Merging (Trim, Elect Sign & Merge) method, a method for merging models by combining task vectors that has three steps (visualized in Fig. 1): First, we trim each task vector to retain only the influential parameter values by setting the redundant values in each task vector to zero (or, equivalently, resetting the fine-tuned

Figure 1: A depiction of the steps involved in Ties-Merging. We visualize each parameter in a model as a square. The arrows depict the update (task vector, \(\)) to a parameter produced by fine-tuning on different tasks (coded by colors), with direction denoting sign and length denoting magnitude. We first _trim_ the task vector values based on their magnitude, then we _elect_ the sign for each parameter (\(_{m}\), green vector containing \(+1\) or \(-1\)) by resolving sign conflicts. Finally, we pick only the values that align with the elected sign and take their mean as the final parameter value.

Figure 2: Different types of conflict and merged outputs produced by either averaging or Ties-Merging. The parameters causing interference are denoted by dotted arrows.

parameter value back to the value from the pre-trained model). After this step, sign conflicts may still persist among influential parameter values, as visualized in Fig. 4. Our second step therefore resolves the sign conflicts between different values and our last step only averages parameters whose sign agrees with the direction of the largest total movement across models.

We demonstrate the effectiveness of our proposed Ties-Merging method in various setups with: (1) different modalities, including language and vision benchmarks, (2) distinct model sizes and families, such as T5-base and T5-large  as well as ViT-B/32 and ViT-L/14 , (3) in-domain and out-of-domain tasks, (4) full finetuning or parameter-efficient finetuning, and (5) in the presence or absence of a validation set for setting merging hyperparameters. We show that Ties-Merging outperforms other merging methods, such as Task Arithmetic , RegMean , Fisher Merging , and weight averaging [9; 82] across all these experimental settings. Notably, for in-domain evaluation, Ties-Merging outperforms the strongest baseline by an average of 2.3% and 1.7% absolute in NLP and vision settings (Table 1), respectively. For out-of-domain generalization (Table 2), Ties-Merging outperforms the strongest baseline by \(1.0\%\) and \(4.4\%\) absolute for T5-base and T5-large models respectively. In Section 7, we perform ablations on our method components and demonstrate the impact of interference on parameter values. Additionally, we showcase the increased advantage of Ties-Merging over task arithmetic  as the number of tasks increases. Finally, we examine the importance of obtaining the correct sign vector. Our results and analysis establish Ties-Merging as a powerful and effective method for combining fine-tuned models into a single multi-task model.

## 2 Related Work

Loss Landscape and Weight Interpolation.While the loss function of a neural network is generally non-convex, recent work has demonstrated that the parameter values from different training runs can sometimes be interpolated without increasing the loss (i.e. they are _mode-connected_) [15; 20; 21; 32; 22]. For example, Frankle et al.  showed that if a part of the optimization trajectory is shared between two neural networks then they can be interpolated without lowering accuracy. On the other hand, Neyshabur et al.  showed that naively interpolating two neural networks with completely disjoint optimization trajectories can result in a catastrophic drop in their accuracies. Entezari et al.  hypothesized that if we account for the permutation symmetry of neural networks, then all neural networks of a given architecture trained on the same dataset are linear mode connected. Ainsworth et al. , Singh and Jaggi , Wang et al.  therefore used techniques based on finding permutations [79; 1] and optimal transport  to better align neural networks trained from scratch so that they can be interpolated without increasing the loss.

Model Merging and Different Use Cases.Different fine-tuned models initialized from the same pre-trained model effectively share a part of the optimization trajectory, and can therefore often be merged without accounting for permutation symmetry [82; 83; 29; 31]. Therefore, merging fine-tuned models can improve performance on a single target task [30; 23; 82; 9], improving out-of-domain generalization [31; 29; 7; 4; 60; 59], creating a multitask models from different tasks [31; 29; 38], for federated learning [46; 41], compression , multimodal merging models , continual learning [86; 85], and other settings [38; 13]. The range of applications has led to a proliferation of methods to improve beyond simple parameter averaging. _RegMean_ proposed a closed-form solution for the merged model's parameters by solving a local linear regression problem for each individual linear layer in the model. However, this requires transmitting additional data statistics that are the same size as the model and requires additional inference steps to calculate them. _Fisher Merging_ goes beyond simple averaging to identify the importance of individual parameters using Fisher Information Matrix [18; 3; 34] and uses it to weigh the parameters in each model when merging. However, this shows little gains when merging multiple checkpoints and also requires computing gradients which has a high memory cost. _Task Arithmetic_ presented a method for merging models by generating task vectors and performing arithmetic operations, such as addition, to obtain a multitask checkpoint. A concurrent work by Ortiz-Jimenez et al.  provided theoretical insights on model merging based on the weight disentanglement property that arises during pretraining. They showed that finetuning models in their tangent space enhance this property, leading to better-merged models. Our method follows these past works on model merging but additionally takes into account the interference between different parameters during merging.

## 3 Background and Motivation

Problem SettingGiven a set of tasks \(\{t_{1},,t_{n}\}\) and a pre-trained model such as T5  or ViT , we either finetune the entire model or employ a parameter-efficient finetuning (PEFT) method [43; 26]. In both cases, we denote the trainable parameters as \(\), the initialization as \(_{}\), and the finetuned parameters as \(_{}\). In this paper, we assume access to finetuned model parameters \(_{}\) for multiple tasks and devise a method to merge the weights of these models into a single multitask model proficient on both in-domain and out-of-domain datasets. We follow Ilharco et al.  and perform merging with task vectors. Specifically, for a task \(t\), the task-vector \(_{t}^{d}\) is defined as \(_{t}=_{}^{t}-_{}^{t}\). This operation allows us to focus on the changes that happen during the fine-tuning phase of each task-specific model and is equivalent to computing a weighted average of the models' weights with appropriate scaling.

Redundancies in Model ParametersFirst, we demonstrate that in a given task vector, many values are redundant (denoted by \(\) in Fig. 2), and removing them does not affect the performance of the task. Specifically, Fig. 3 shows the average performance across eleven task-specific models when _"trimming"_ each task vector to retain only the top-\(k\%\) largest-magnitude values and resetting the rest to their initial value (i.e. setting the corresponding value in the task vector to \(0\)). Fig. 3 shows the average performance across varying values of \(k\), demonstrating that keeping only the top-\(20\%\) of values delivers comparable results to retaining all parameters. For additional details and the results on the T5 model, please refer to Appendix C.3. This shows that many parameter changes introduced during fine-tuning are redundant. Hence, disregarding those values during merging could prevent interference with the influential parameters without compromising the task's performance.

Disagreement between Parameter Signs:Different fine-tuned models might introduce opposing changes to a parameter in their task vectors, causing interference due to conflicting signs (denoted by \(\) in Fig. 2). Fig. 4 presents an analysis of the frequency of sign conflicts when merging varying numbers of models. We first trim the task vectors for eleven tasks by keeping only the top 20% of influential parameters. Then, we plot the percentage of parameters that have a sign conflict as weincrease the number of models to be merged from 2 to 11. Notably, sign conflicts occur even when merging only 2 models from different tasks or when merging multiple models from the same task (see Appendix Figure 10), and the likelihood of a sign conflict increases with the number of models being merged. For additional details and the results on the T5 model, please refer to Appendix C.3.

## 4 Ties-Merging: TrIm, Elect Sign & Merge

To address the aforementioned issues, we present Ties-Merging (TrIm, Elect Sign & Merge), which aims to address the kinds of interference mentioned above before performing merging.

### Preliminaries

A task vector \(_{t}^{d}\) represents a direction and the amount of movement required in the \(d\)-dimensional parameter space relative to the initialization that leads to a low loss region for the task \(t\). Each entry in \(_{t}\) (corresponding to a particular parameter) can be thought of as an axis in the \(d\)-dimensional space. The sign of a parameter denotes the direction along this axis (positive or negative) that decreases the loss on task \(t\). Hence, a given task-vector \(_{t}\) can be decomposed into a _sign vector_\(_{t}^{d}\) and a _magnitude vector_\(_{t}^{d}\) as \(_{t}=_{t}_{t}\), where \(\) is the elementwise product. Formally, \(_{t}=(_{t})\), where \((x)*|x|=x\) and returns a value of \(+1\), \(0\), or \(-1\). The magnitude vector \(_{t}\) is defined as \(_{t}=|_{t}|\) and the value \(_{t}^{i}\) tells us the movement required in the \(i\)-th dimension from the initialization.

### Steps in Ties-Merging

To merge multiple task-specific models \(\{_{t}\}_{t=1}^{n}\), we first create corresponding task vectors \(\{_{t}\}_{t=1}^{n}\). Given these task vectors, Ties-Merging method follows three steps in order to perform a merge (see Fig. 1 for a diagram and Algorithm 1):

1. **Trim:** For each task \(t\), we trim the redundant parameters from the task vector \(_{t}\) to create \(_{t}\) by keeping the top-\(k\%\) values according to their magnitude and trimming the bottom \((100-k)\%\) of the redundant parameters by resetting them to 0. This can be decomposed further as \(_{t}=_{t}_{t}\).
2. **Elect:** Next, we create an aggregate elected sign vector \(_{m}\) for the merged model that resolves the disagreements in the sign for each parameter \(p\) across different models. To create the elected sign vector, we choose the sign with the highest total magnitude across all relevant models. For each parameter \(p\{1,2,,d\}\), we separate the values \(\{_{t}^{p}\}_{t=1}^{n}\) based on their sign (\(+1\) or \(-1\)) and take their sum to calculate the total mass (i.e., total magnitude) in the positive and the negative direction. We then assign \(_{m}^{p}\) as the sign with greater total movement. This can be efficiently computed using \(_{m}^{p}=(_{t=1}^{n}_{t}^{p})\).
3. **Disjoint Merge:** Then, for each parameter \(p\), we compute a _disjoint mean_ by only keeping the parameter values from the models whose signs are the same as the aggregated elected sign and calculate their mean. Formally, let \(^{p}=\{t[n]_{t}^{p}=_{m}^{p}\}\), then \(_{m}^{p}=^{p}|}_{t^{p}}_{ t}^{p}\). Note that the disjoint mean always ignores the zero values.

Given the final merged task vector \(_{m}\), we scale it and add it to the initial parameter values to obtain the merged model parameters \(_{m}\) as \(_{m}=_{}+*_{m}\), where \(\) is a scaling hyperparameter (as used in past work ).

## 5 Experimental Setup

Baseline Methods.We compare Ties-Merging with four baseline merging methods: (1) **Simple Averaging**[9; 82] calculates the element-wise mean of all the individual models and can be expressed as \(_{m}=_{t=1}^{n}_{t}/n\). (2) **Fisher Merging** uses a diagonal approximation of the Fisher Information Matrix \(_{t}\)[34; 3; 18] to measure the importance of each parameter for task \(t\), where \(_{t}=_{x D_{t}}_{y p_{t_{t}}(y|x)}_{ _{t}}( p_{_{t}}(y|x_{t}))^{2}\). The final merged model is obtained by reweighting each parameter in each fine-tuned model by the corresponding value in the model's approximate Fisher matrix as \(_{m}=_{t=1}^{n}_{t}_{t}/_{t=1}^{n}_{t}\). (3) **RegMean** computes a closed-form solution to a least-squares regression problem that aims to minimize the distance between the merged model's activations and the individual models' activations as \(_{m}=(_{t=1}^{n}X_{t}^{T}X_{t})^{-1}_{t=1}^{n}(X_{t}^{T}X_{t}_ {t})\), where \(X_{t}\) is the input activation of a given layer. (4) **Task Artithmetic** scales and then adds the task vectors to the initial model to produce the merged model as \(_{m}=_{}+*_{t=1}^{n}_{t}\). In addition to these baselines, we present the performance of the individual **fine-tuned models** involved in the merging process as well as the performance of a **multi-task model** trained on the concatenation of all tasks' datasets. For more details on compute resources, dataset licenses, and the finetuning procedures, refer to Appendix C.1, C.2, and C.6.

Merging in Absence of the Validation Set.Prior works [29; 45; 82] on model merging assume access to a validation set, which is utilized to compute the Fisher matrix or tune hyper-parameters. To avoid the need for a validation set, RegMean  proposed storing and transmitting inner product matrices of the training data for each task that are the same size as the original model. This can quickly become expensive for large models as the storage and transmission scale linearly with model size and the number of tasks.

To consider the setting where no validation set is available, we developed a generic recipe of TiesMerging with fixed hyperparameters that could be applied in any setting without hyperparameter tuning on a validation set. The recipe keeps the top-\(20\%\) parameters in the task vector resetting the rest to 0 and sets \(=1\). We chose this recipe based on results in the parameter-efficient fine-tuning (PEFT) setting, so we only apply it to the unseen settings of full model fine-tuning on ViT (vision) and T5 (language) models. We also compare Ties-Merging with the Task Arithmetic method without a validation set by utilizing the recommended value of \(=0.4\). For further details on how this recipe was created please refer to Appendix C.4.

## 6 Main Results

Our main goal is to merge multiple task-specific models into a single multitask model that can perform well on both in-domain and out-of-domain scenarios. In this section, we evaluate the performance of Ties-Merging with other methods across multiple different experimental settings.

Merging PEFT Models.Consider the setting where task vectors are computed based on parameters introduced during parameter-efficient fine-tuning. Specifically, we focus on (IA)\({}^{3}\), a PEFT method that scales the base model activations with learned vectors. We follow Liu et al.  and use T0-3B  as the base model and finetune (IA)\({}^{3}\) models on the train split of eleven datasets including sentence completion (COPA , H-SWAG , and Story Cloze  datasets), natural language inference (ANLI , CB , and RTE ), coreference resolution (WSC  and Winogrande ), and word sense disambiguation (WiC ). When fine-tuning (IA)\({}^{3}\) parameters added to the T0-3B model, we use prompt templates from the Public Pool of Prompts (P3 ) to convert each example in each dataset to a prompted text-to-text format where each label corresponds to a different string. For experiments with (IA)\({}^{3}\), for each dataset, we report the median score across all templates.

  
**Method (\(\))** & **Validation** & **PEFT** &  \\ 
**Model (\(\))** & ^{3}\)} & **T5-Base** & **T5-Large** & **ViT-B/32** & **ViT-L/14** \\  Fine-tuned & - & 71.4 & 82.8 & 88.8 & 90.5 & 94.2 \\ Multitask & - & 73.1 & 83.6 & 88.1 & 88.9 & 93.5 \\  Averaging [82; 9] & ✗ & - & 65.9 & 59.6 & 65.8 & 79.6 \\ Task Arithmetic  & ✗ & - & **73.2** & 73.5 & 60.4 & 83.3 \\
**Ties-Merging** & ✗ & - & 69.7 [-3.2] & **74.4** [+0.9] & **72.4** [+6.6] & **86.0** [+2.7] \\  Fisher Merging  & ✓ & 62.2 & 68.9 & 64.6 & 68.3 & 82.2 \\ RegMean  & ✓ & 58.0 & 71.2 & 73.2 & 71.8 & 83.7 \\ Task Arithmetic  & ✓ & 63.9 & 73.2 & 73.3 & 70.1 & 84.5 \\
**Ties-Merging** & ✓ & **66.4** [+2.5] & **73.9** [+0.7] & **76.9** [+3.6] & **73.6** [+1.8] & **86.0** [+1.5] \\   

Table 1: Comparing model merging methods across multiple fine-tuning settings and modalities (NLP and Vision) with and without the availability of a validation set.

Table 1 using Ties-Merging to merge models trained with (IA)\({}^{3}\) exceeds the performance of all other merging methods - with a validation set, Ties-Merging shows an average enhancement of \(2.5\%\) across 11 tasks compared to the top baseline. For detailed results, refer to Appendix Table 8.

Merging Fully Finetuned Vision Models.For image classification, we adhere to the experimental setting from Ilharco et al. . We employ two variants of the CLIP model  with ViT-B/32 and ViT-L/14 models  as visual encoders. Subsequently, we finetune the visual encoder on the eight tasks derived from Ilharco et al. , Radford et al.  while keeping the text encoder fixed. This setting considers a variety of classification domains such as remote sensing, traffic classification, and satellite imagery recognition. Specifically, we work with the following datasets: Cars , DTD , EuroSAT , GTSRB , MNIST , RESISC45 , SUN397 , and SVHN .

Table 1 shows that using Ties-Merging to merge fully fine-tuned ViT-B/32 and ViT-L/14 models leads to an average improvement of \(1.8\%\) and \(1.5\%\) over 8 tasks, given the availability of a validation set. In the absence of a validation set, Ties-Merging improves by \(6.6\%\) and \(2.7\%\) over other methods for ViT-B/32 and ViT-L/14, respectively. Notably, Ties-Merging without validation outperforms Task Arithmetic  with validation by \(2.3\%\) and \(1.5\%\) for ViT-B/32 and ViT-L/14. For more detailed results, refer to Appendix Table 11 and 12.

Merging Fully Finetuned NLP Models.For the NLP domain, we use the T5-base and T5-large  models, which are encoder-decoder transformers  pretrained via masked language modeling on a large text corpus. We finetune both T5-base and T5-large on seven tasks: question answering (QASC , WikiQA , and QuaRTz ), Paraphrase Identification (PAWS ), Sentence Completion (Story Cloze ), and Coreference Resolution (Winogrande  and WSC ).

Table 1 shows that using Ties-Merging on T5-base and T5-large models with a validation set produces an improvement of \(0.7\%\) and \(3.6\%\) respectively over 7 tasks compared to the state-of-the-art. Moreover, for T5-large Ties-Merging without validation outperforms all baselines (even with a validation set) by \(1.1\%\). For more detailed results, refer to Appendix Table 9 and 10.

Out-of-Domain Generalization.In many use-cases, multitask models are used for their ability to generalize better to domain shift. Hence, we use the T5-base and T5-large models merged on the seven in-domain datasets from the previous experiments and evaluate them on six held-out datasets from T0 mixture  to measure out-of-domain generalization. Specifically, we report the average performance over the following tasks and datasets: Cosmos QA , Social IQA , and QuaIL  for question answering; WiC  for word sense disambiguation; and COPA , and H-SWAG  for sentence completion. Table 2 shows that Ties-Merging outperforms the strongest baseline for both T5-base and T5-Large by \(1.0\%\) and \(4.4\%\) respectively, demonstrating better out-of-domain generalization. For more elaborate results please refer to Appendix B.6 and Table 13 and 14.

Merging Different Number of Tasks.We evaluate the performance of the merged model on the in-domain tasks as we vary the number of tasks being merged. In Fig. 5, we normalize the accuracy of each task by its fine-tuned model performance and report the average normalized accuracy on the in-domain tasks. We compare with the strongest baseline - Task Arithmetic  - as well as simple averaging . Each data point signifies merging a subset of the tasks, with the solid line representing the mean performance across multiple subsets. For similar results with the T5-base model, please refer to Appendix C.5 and Figure 13.

From Fig. 5, we observe the following: (1) As the number of merged tasks increases, the performance of all methods decreases. (2) When merging two tasks, both Ties-Merging and Task Arithmetic achieve an average normalized accuracy close to one, indicating negligible performance loss. In contrast, Simple Averaging suffers from a \(10\%\) performance drop. (3) As the number of tasks increases, the merging performance of Task Arithmetic declines more rapidly than Ties-Merging. This suggests that task interference is present when merging multiple tasks and that Ties-Merging is more effective at mitigating this issue.

Merging Checkpoints of the Same Task For Better RobustnessWe perform additional experiments to merge multiple checkpoints trained on the same task (as done in ModelSoups ) to see if it can improve robustness. Typically, ensembling is used to combine different models on the same task for better generalization. We use the experimental setting and the code from Fisher Merging  to merge top-10 fine-tuned base sized BERT models from huggingface for RTE, MRPC, and WNLI datasets from GLUE. From the results presented in Table 3, we observe that Ties-Merging works the best in all cases except WNLI, where it only slightly underperforms Task Vectors. Notably, Ties-Merging provides a dramatic boost over both Fisher Merging, averaging, and outperforms _ensembling_ in all cases. Moreover, in Appendix B.4, we show that interference exists even between differently finetuned checkpoints of the same tasks.

Merging Models for Better Initialization.Next, we perform experiments following the setting , where we merge checkpoints from different tasks for a better initialization when fine-tuning on a downstream task. We take the finetuned bert-base-uncased checkpoints for 8 GLUE  tasks (wnli, sst2, rte, qnli, mrpc, cola, mnli, qqp) from Huggingface . We consider three of these GLUE tasks (RTE, MRPC, WNLI) as our downstream tasks. When fine-tuning on a particular

  
**Init Method** & **RTE** & **MRPC** & **WNLI** \\ 
**PTM Init** & 66.4 & 81.8 & **56.3** \\
**Average** & 75.8 & 86.5 & **56.3** \\
**Task Arithmetic** & 78.3 & 86.2 & 50.7 \\ 
**Ties-Merging** & **80.1** & **88.0** & 54.9 \\   

Table 4: **A TIES-merged model is a better initialization for finetuning. For each task, we merge the checkpoints from the 7 other GLUE tasks and then finetune and evaluate on the selected task.**

Figure 6: **Trimming Parameters and Electing Signs prevents interference. Demonstration of parameter interference between different models and its impact on parameter values. The Standard Mean (red) shrinks magnitudes and does it more when there is less agreement on the sign (right) or the parameter is influential for multiple tasks (left).**

    & **RTE** & **MRPC** & **WNLI** \\ 
**Averaging** & 59.9 & 78.2 & 56.3 \\
**Fisher** & 65.7 & 81.4 & 52.1 \\
**Ensembling** & 70.8 & 86.0 & 45.1 \\ 
**Task Arithmetic** & 71.8 & 86.0 & **59.2** \\
**Ties-Merging** & **72.2** & **86.8** & 58.8 \\   

Table 3: **Model soups experimental setup. TIES improves performance when merging checkpoints on the same tasks. For each task, we merge 10 checkpoints from Huggingface hub and evaluate on the one task they were trained on.**downstream task (say RTE), we merge all the checkpoints from the other seven tasks together (apart from the chosen task). From Table 4, we find that Ties-Merging works well in this setting and outperforms all other merging methods by a significant margin (apart from Averaging for WNLI).

## 7 Additional Results and Analysis

### Types of Interference and Their Effect on Merging

(a) Importance of Removing Redundant Parameters.To better disentangle the effect of redundant parameters on the resulting magnitude of merged parameters, we separate the parameters into three groups: redundant parameters (using a trimming threshold of \(20\%\)), parameters that are influential to exactly one model, and parameters that are influential to more than one model. We then compare the parameter values when they are directly merged versus when they are first trimmed and then (disjointly) merged without deleting signs. Specifically, we only take the mean of non-trimmed values. The results are shown for the PEFT setting in Fig. 5(a), which demonstrates that redundant parameters cause interference. Specifically, we find that when a parameter is not an influential parameter for any of the task-specific models, the mean value is low, and therefore may be considered noise. However, when only one model sees the parameter as influential, the merged value can still be low since other models assign a small value to this parameter. The merged value is larger when more models see the parameter as influential. When trimming, we see this interference is mostly avoided, and the average size is mostly the same whether one or more models consider a parameter influential. This is because we remove the effect of noisy parameters that unnecessarily decrease the magnitude (see \(\) in Fig. 2). In the Appendix B.5, we bring a more detailed view, including a comparison to applying Ties-Merging and show reducing interference encourages diversity in specific parameter values (std) together with the similarity of their influence (mean).

(b) Importance of Resolving Sign Interference.To quantify the impact of sign interference, we group the parameters by their _sign agreement_. A value of \(0.5\) indicates an equal number of positive and negative signs for a given parameter across different models, whereas \(1\) implies all the parameters have the same sign. We compare the parameter values when those are merged, or when sign disagreement is first resolved by election and then they are (disjointly) merged. The results in the PEFT setting are shown in Fig. 5(b), where we demonstrate that the Elect step preserves the relative parameter magnitudes to avoid sign interference. Specifically, we find that resolving signs increases the overall parameter magnitudes across different ranges of sign agreements. Parameters with low agreement tend to be smaller on average regardless of the interference. One potential cause could be that the sign from noisy parameters pulls the average down, as seen in Fig. 5(a). We show in Appendix B.5 that combining both methods indeed reduces some of the difference, but not all, suggesting that a high agreement is correlated with overall influential parameters.

Figure 7: **Flipping the signs of high magnitude parameters leads to catastrophic performance drops.** Average Performance when flipping the directions of Top-\(k\%\) and Bottom-\(k\%\) parameters for each task. We report the results averaged over eleven (IA)\({}^{3}\) tasks.

  
**Method** & **Average** \\ 
**Fine-Tuned** & 71.4 \\
**Multitask** & 73.1 \\ 
**Averaging** & 58.0 \\
**Task Vectors** & 63.9 \\
**Ties-Merging** & **66.4** \\ 
**Ties-Merging (Oracle Sign)** & **72.0** [\(+5.6\)] \\   

Table 5: **Ties-Merging can perform close to multitask models if the signs can be estimated correctly.** We use the signs from the multitask vector as the elected sign and perform merging and report the performance.

### Relevance of Signs of the Top-k% Parameters

In this experiment, we work with the (IA)\({}^{3}\) models and aim to quantify the importance of the top-\(k\%\) parameters and their directions on a task's performance. For each task vector \(_{t}\), we flip the direction of each of the top-\(k\%\) parameters (by magnitude) with a probability \(p\) to obtain \(_{t}\). Flipping the direction is done by multiplying the parameters with \(-1\). Then we add back this direction flipped \(_{t}\) to the initialization to get \(_{t}=_{}+_{t}\). Finally, we evaluate \(_{t}\) and compute the average performance over all tasks \(t\) for each value of \(k\) and \(p\). As a baseline, we also flip the directions of the bottom \((100-k)\%\) of the parameters. We report the results averaged over three independent runs.

In Fig. 7, we plot the average performance as a function of \(p\), the probability of flipping the direction. A probability of \(0\) means that the direction of none of the top-\(k\%\) parameters is flipped and a value of \(1\) means that the direction of all the top-\(k\%\) parameters is flipped. For the top-\(20/30\%\) of the parameters (solid lines), we observe that the performance monotonically decreases as we increase the probability of flipping the direction. In contrast, flipping the directions of the bottom-\(80/70\%\) of the parameters (dashed lines) has little impact on the performance. These results establish the importance of having the right directions for the parameters with a high magnitude and show the catastrophic performance drop that happens with incorrect directions.

### Ablation of Ties-Merging Components

We perform ablations on the individual components of Ties-Merging to assess their importance. In Table 6, we start with Ties-Merging and remove one component at a time and report the performance on the validation set for full model merging (T5-base) and merging PEFT models ((IA)\({}^{3}\) on T03B). Removing elect while keeping the disjoint mean refers to taking the mean of values with signs \(+1\) and \(-1\) but not including the \(0\) values of the trimmed task vectors in the mean. Removing disjoint mean but trimming and electing refers to taking the mean of the values with the elected signs and the \(0\) for the trimmed values. Removing scaling means using \(=1\). Table 6 shows that all components of the method are crucial for optimal performance. Specifically, scaling and the disjoint mean emerge as the most crucial, causing performance declines of \(2.5\%\) and \(1.9\%\) in T5-base, and \(5.2\%\) and \(3.2\%\) in (IA)\({}^{3}\), respectively.

### Importance of Estimating Correct Signs When Merging Models

Given the importance of sign vectors, we now aim to understand the performance that can be obtained by Ties-Merging if we can use the oracle sign vector from the multitask model. To test this, we train a multitask (IA)\({}^{3}\) model, \(_{}\), on the eleven tasks under consideration (as in SS 6). We then create the multitask vector \(_{}\) and the multitask sign vector \(_{}\). Next, while merging models using Ties-Merging, we assume access to the oracle multitask-sign-vector \(_{}\). Hence, we skip the conflict resolution step and directly set \(_{m}=_{}\). Surprisingly, from Table 5, we observe that when merging tasks by using the oracle sign vector, we get a performance of \(72\%\) compared to \(73.1\%\) for the multitask trained model. Moreover, on average the merged model performs better task-specific models. This implies that if we can obtain the correction directions for the merged model, then we can closely bridge the gap to multitask models. In Appendix B.1 and Table 7, we attempt to estimate the multitask-sign-vector by using limited data.

## 8 Conclusion

We introduced Ties-Merging to address interference when merging models. Ties-Merging trims low-magnitude changes in fine-tuned model's values and then resolves sign disagreements across the models being merged. We found experimentally that Ties-Merging enhances the performance of the merged multitask model across various settings and domains, despite being simple with fixed hyperparameters. Our study also sheds light on the impact of different types of interference on model parameters and emphasizes the importance of signs in the merging process. For some discussion on limitations and future directions please refer to Appendix A.

  
**Method** & **T5-base** & **(IA)\({}^{3}\)** \\ 
**Ties-Merging** & **74.5** & **70.7** \\  \(-\) Trim & 73.0 & 70.6 \\ \(-\) Elect & 73.1 & 69.6 \\ \(-\) Disjoint Mean & 72.6 & 67.5 \\ \(-\) Scale & 72.0 & 65.5 \\   

Table 6: Ablation on all the steps of Ties-Merging.