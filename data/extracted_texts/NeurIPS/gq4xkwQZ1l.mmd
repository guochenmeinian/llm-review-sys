# Diffusion with Forward Models: Solving Stochastic Inverse Problems Without Direct Supervision

Ayush Tewari\({}^{1}\)

Equal Contribution. Project page: diffusion-with-forward-models.github.io

Tianwei Yin\({}^{1}\)

George Cazenavette\({}^{1}\)

Semon Rezchikov\({}^{4}\)

Joshua B. Tenenbaum\({}^{1,2,3}\)

Fredo Durand\({}^{1}\)

William T. Freeman\({}^{1}\)

Vincent Sitzmann\({}^{1}\)

\({}^{1}\)MIT CSAIL

MIT BCS

MIT CBMM

Princeton IAS

###### Abstract

Denoising diffusion models have emerged as a powerful class of generative models capable of capturing the distributions of complex, real-world signals. However, current approaches can only model distributions for which training samples are directly accessible, which is not the case in many real-world tasks. In inverse graphics, for instance, we seek to sample from a distribution over 3D scenes consistent with an image but do not have access to ground-truth 3D scenes, only 2D images. We present a new class of conditional denoising diffusion probabilistic models that learn to sample from distributions of signals that are never observed directly, but instead are only measured through a known differentiable forward model that generates partial observations of the unknown signal. To accomplish this, we directly integrate the forward model into the denoising process. At test time, our approach enables us to sample from the distribution over underlying signals consistent with some partial observation. We demonstrate the efficacy of our approach on three challenging computer vision tasks. For instance, in inverse graphics, we demonstrate that our model in combination with a 3D-structured conditioning method enables us to directly sample from the distribution of 3D scenes consistent with a single 2D input image.

## 1 Introduction

Consider the problem of reconstructing a 3D scene from a single picture. Since much of the 3D scene is unobserved, there are an infinite number of 3D scenes that could have produced the image, due to the 3D-to-2D projection, occlusion, and limited field-of-view that leaves a large part of the 3D scene unobserved. Given the ill-posedness of this problem, it is desirable for a reconstruction algorithm to be able to sample from the distribution over all plausible 3D scenes that are consistent with the 2D image, generating unseen parts in plausible manners. Previous data-completion methods, such as in-painting in 2D images, are trained on large sets of ground-truth output images along with their incomplete (input) counterparts. Such techniques do not easily extend to 3D scene completion, since curating a large dataset of ground-truth 3D scene representations is very challenging.

This 3D scene completion problem, known as inverse graphics, is just one instance of a broad class of problems often referred to as _Stochastic Inverse Problems_, which arise across scientific disciplines whenever we capture partial observations of the world through a sensor. In this paper, we introduce a diffusion-based framework that can tackle this problem class, enabling us to sample from a distribution of signals that are consistent with a set of partial observations that are generated from the signal by a non-invertible, generally nonlinear, forward model. For instance, in inverse graphics, we learn to sample 3D scenes given an image, yet never observe paired observations of images and 3D scenes at training time, nor observe 3D scenes directly.

While progress in deep learning for generative modeling has been impressive, this problem remains unsolved. In particular, variational autoencoders and conditional neural processes are natural approaches but have empirically fallen short of modeling the multi-modal distributions required in, for instance, inverse graphics. They have so far been limited to simple datasets. Emerging diffusion models , in contrast, enable sampling from highly complex conditional distributions but require samples from the output distribution that is to be modeled for training, e.g. full 3D models. Some recent work in inverse graphics has resorted to a two-stage approach, where one first reconstructs a large dataset of 3D scenes to then train an image-conditional diffusion model to sample from the conditional distribution over these scenes [2; 3]. To avoid a two-stage approach, another recent line of work trains a conditional diffusion model to sample from the distribution over novel views of a scene, only requiring image observations at training time [4; 5]. However, such methods do _not_ model the distribution over 3D scenes directly and therefore cannot sample from the distribution over 3D scenes consistent with an image observation. Thus, a multi-view consistent 3D scene can only be obtained in a costly post-processing stage . A notable exception is the recently proposed RenderDiffusion , demonstrating that it is possible to train an unconditional diffusion model over 3D scenes from observing only monocular images. While one can perform conditional sampling even with unconditional models, they are fundamentally limited to simple distributions, in this case, single objects in canonical orientations.

Our core contribution is a novel approach for integrating any differentiable forward model that describes how partial observations are obtained from signals, such as 2D image observations and 3D scenes, with conditional denoising diffusion models. By sampling an observation from our model, we jointly sample the signal that gave rise to that observation. Our approach has a number of advantages that make it highly attractive for solving complex Stochastic Inverse Problems. First, our model is trained end-to-end and does away with two-stage approaches that first require reconstruction of a large dataset of signals. Second, our model directly yields diverse samples of the signal of interest. For instance, in the inverse graphics setting, our model directly yields highly diverse samples of 3D scenes consistent with an observation that can then be rendered from novel views with guaranteed multi-view consistency. Finally, our model naturally leverages domain knowledge in the form of known forward models, such as differentiable rendering, with all guarantees that such forward models provide. We validate our approach on three challenging computer vision tasks: inverse graphics (the focus of this paper), as well as single-image motion prediction and GAN inversion.

In summary, we make the following contributions:

1. We propose a new method that integrates differentiable forward models with conditional diffusion models, replacing prior two-step approaches with a conditional generative model trained end-to-end.
2. We apply our framework to build the first conditional diffusion model that learns to sample from the distribution of 3D scenes trained only on 2D images. In contrast to prior work, we _directly_ learn image-conditional 3D radiance field generation, instead of sampling from the distribution of novel views conditioned on a context view. Our treatment of inverse graphics exceeds a mere application of the proposed framework, contributing a novel, 3D-structured denoising step that leverages differentiable rendering both for conditioning and for the differentiable forward model.
3. We formally prove that under natural assumptions, as the number of observations of each signal in the training set goes to infinity, the proposed model maximizes not only the likelihood of observations, but also the likelihood of the unobserved signals.
4. We demonstrate the efficacy of our model for two more downstream tasks with structured forward models: single-image motion prediction, where the forward model is a warping operation, and GAN inversion, where the forward model is a pretrained StyleGAN  generator.

## 2 Method

Consider observations \((^{i}_{j},^{i}_{j})\) that are generated from underlying signals \(_{j}\) according to a known forward model \(()\), i.e., \(^{i}_{j}=(_{j},^{i}_{j})\), where \(^{i}_{j}\) are parameters of the forward model corresponding to observation \(^{i}_{j}\). Each observation can be _partial_. Specifically, given a _single_ observation, there is an infinite number of signals that could have generated this observation. However, we assume that given a hypothetical set of _all possible_ observations, the signal is fully determined. In the case of inverse graphics, \(_{j}^{i}\) are image observations of 3D scenes \(_{j}\) and \(_{j}^{i}\) are the camera parameters, where we index scenes with \(j\) and observations of the \(j\)-th scene via \(i\). \(()\) is the rendering function. Note that if we were to capture _every possible image_ of a 3D scene, the 3D scene is uniquely determined, but given a _single_ image, there are an infinite number of 3D scenes that could have generated that image, both due to the fact that rendering is a projection from 3D and 2D, and due to the fact that a single image only constrains the visible part of the 3D scene. We will drop the subscript \(j\) in the following, and leave it implied that we always consider _many_ observations generated from _many_ signals. Fig. 1 provides an illustration of the data.

We are now interested in training a model that, at test time, allows us to sample from the distribution of signals that are consistent with a previously unseen observation \(\). Formally, we aim to model the conditional distribution \(p(|,)\). We make the following assumptions:

* We have access to a differentiable implementation of \(()\).
* We have access to a large dataset of observations and corresponding parameters of the forward model, \(\{(^{i},^{i})\}_{i}^{N}\).
* In our training set, we have access to _several_ observations per signal.

Crucially, we do _not_ assume that we have direct access to the underlying signal that gave rise to a particular observation, i.e., we do _not_ assume access to tuples of \((,,)\). Further, we also do _not_ assume that we have access to any prior distribution over the signal of interest, i.e., we never observe a dataset of signals of the form \(\{^{j}\}_{j}\), and thus cannot train a generative model to sample from an unconditional distribution over signals.

Recent advances in deep-learning-based generative modeling have seen the emergence of denoising diffusion models as powerful generative models that can be trained to generate highly diverse samples from complex, multi-modal distributions. We are thus motivated to leverage denoising diffusion probabilistic models to model \(p(|,)\). However, existing approaches cannot be trained if we do not have access to signals \(\). In the following, we give background on denoising diffusion models and discuss the limitation.

### Background: Denoising Diffusion Probabilistic Models and their Limitation

Denoising diffusion probablistic models are a class of generative models that learn to sample from a distribution by learning to iteratively denoise samples. Consider the problem of modeling the distribution \(p_{}()\) over samples \(\). A forward Markovian process \(q(_{0:T})\) adds noise to the data as

\[q(_{t}_{t-1})=(_{t};}_{t-1},_{t}). \]

Here, \(_{t}\), \(t 1 T\) are the hyperparameters that control the variance schedule. A denoising diffusion model learns the reverse process, where samples from a distribution \(p(x_{T})=(,)\) are transformed incrementally into the data manifold as \(p_{}(_{0:T})=p(x_{T})_{t=1}^{T}p_{}(_{t-1 }_{t})\), where

\[p_{}(_{t-1}_{t})=(_{t-1}; (_{t},t),(_{t},t)). \]

A neural network \(_{}()\) with learnable parameters \(\) learns to reverse the diffusion process. It is also possible to model conditional distributions \(p_{}(_{0:T})\), where the output is computed as

Figure 1: **Overview of our proposed method. (a) We assume a dataset of tuples of observations \((,)^{i}\), generated from _unobserved_ signals \(\) via a differentiable forward model. (b) We propose to integrate the forward model directly into the denoising step of a diffusion model: given a pair of observations of the same signal, we designate context \(^{}\) and target \(^{}\). We add noise to \(^{}\), then feed \((^{},^{},^{}_{t},^{ })\) to a neural network \(\) to estimate the signal \(_{:1}\). We then apply the forward model to obtain an estimate of the clean target observation, \(^{}_{t:1}\). (c) The graphical model of the diffusion process.**

\(_{}(_{t},t,)\). The forward process does not change in this case; in practice, we merely add the conditional signal as input to the denoising model.

Unfortunately, we cannot train existing denoising diffusion models to sample from \(p(,)\), or, in fact, even from an unconditional distribution \(p()\). This would require computation of the Markovian forward process in Eq. 1. However, recall that we do not have access to any signals \(\{^{j}\}_{j}\) - we thus can not add any noise to any signals to then train a denoising neural network. In other words, since no \(\) is directly observed, we _cannot_ compute \(q(_{t}_{t-1})\).

### Integrating Denoising Diffusion with Differentiable Forward Models

We now introduce a class of denoising diffusion models that we train to directly model the distribution \(p(^{};^{})\) over signals \(\) given an observation \((^{},^{})\). Our key contribution is to directly integrate the differentiable forward model \(()\) into the iterative conditional denoising process. This enables us to add noise to and denoise the observations, while nevertheless sampling the underlying signal that generates that observation.

Our model is trained on pairs of "context" and "target" observations of the same signal, denoted as \(^{}\) and \(^{}\). As in conventional diffusion models, for the forward process, we have \(q(^{}_{t}^{}_{t 1})= (^{}_{t};}^{}_{t-1},_{t})\). In the reverse process, we similarly denoise \(^{}\) conditional on \(^{}\):

\[p_{}(^{}_{0:T}^{ 1};^{},^{})=p(^{}_{T})_ {t=0}^{T}p_{}(^{}_{t-1}^{} _{t},^{1};^{},^{}), \]

However, unlike conventional diffusion models, we implement \(p_{}(^{}_{t-1}^{}_{t}, ^{1};^{},^{})\) by first predicting an estimate of the underlying signal \(_{t 1}\) and then mapping it to an estimate of the denoised observations via the differentiable forward:

\[_{t 1} =_{}(^{},^{ }_{t};t,^{},^{}), \] \[}^{}_{t 1} =(_{t 1},^{})\] (5) \[^{}_{t 1} (^{}_{t 1};C_{t 1} }^{}_{t 1},\ _{t 1}) \]

Here, \(}^{}_{t 1}\) is an estimate of the _clean_ observation, and the constants \(C_{t 1}\) and \(_{t 1}\) are chosen to match the total noise added by the forward process at time \(t\)-\(1\). See Fig. 1 for an overview. At test time, a signal is sampled by iterating Eq. 4, 5, and 6 starting with \(p(^{}_{t=T})(,)\). Importantly, our models define a generative model over the underlying signal via Eq. 4:

\[p_{,^{}}(_{0:T}^{}; ^{})=_{t=1}^{T}p_{}(_{t 1}^{ }_{t},^{1};^{},^{}). \]

We will suppress the subscript in the notation, and refer to this distribution as \(p(_{0:T}^{1};^{})\) for brevity from now.

**Loss Function.** We train to minimize the following two loss terms:

\[^{}_{}=_{^{}, ^{},^{},^{},t}\| ^{}-(_{ }(^{},^{}_{t};t,^{ },^{}),^{})}_{=}^{}_{t  1}}\|^{2}, \]

\[^{}_{}=_{^{}, ^{1},^{1},^{},^{},t}\|^{}-(_{ }(^{},^{}_{t};t,^{ },^{}),^{})}_{=}^{}_{t  1}}\|^{2}. \]

Here, we compute the estimate of the observation from the target, as well as a separate, novel forward model parameter \(^{}\). In the supplemental document, we show that these losses approximate a total observation loss, maximizing the likelihood of all possible observations of the signal \(\).

**Characterizing the Conditional Distribution Over Signals.** Due to the complexity of the reverse process, it may not be clear that the learned distribution over signals will agree with the true distribution, even in the limit of infinite data. However, this model will indeed asymptotically learn the true conditional distribution over signals, as we formally prove in the supplement:

**Proposition 1**.: Suppose that any signal \(\) can be reconstructed from the set of all _all possible_ observations of \(\). Under this assumption, if in the limit as the number of known observations per signal goes to infinity, there are parameters \(\) such that \(_{}^{}+^{}\) is minimized, then the conditional probability distribution over signals discovered by our model \(p(^{};^{})\) agrees with the true distribution \(p^{}(^{};^{})\).

The proof follows by showing that our losses implicitly minimize a diffusion model loss over _total observations_, which are collections of all possible observations of our signal. As such, when the observations suffice to completely reconstruct the signal, the correctness of the estimated distribution over total observations forces the estimated distribution over signals to be correct, as well.

## 3 Prior Work on Latent Variable Models for Inverse Problems

Variational Autoencoders [10; 11], normalizing flows , conditional  and attentive neural processes  are latent-variable models that can be combined with forward models to learn to sample from the distribution of unobserved signals from observations [15; 16]. However, they empirically fall short of accurately modeling complex signal distributions - in inverse graphics, for instance, such models have so far been limited to synthetic 3D scenes. Generative Adversarial Networks can be trained with differentiable forward models in-the-loop, and have yielded impressive results in unconditional generative modeling of unobserved signals [17; 18; 19]. Similarly, in concurrent work, diffusion models have been leveraged for unconditional generative modeling through differentiable forward models [2; 7; 20]. However, unconditional models are limited to tight distributions, and no conditional generative modeling of similar quality has been demonstrated. Diffusion models trained directly on signals have been effectively applied to diverse inverse problems such as super-resolution [21; 22; 23; 24; 25], inpainting [21; 23; 24; 25], and medical imaging . These works utilize the learned prior of the data distribution to recover the latent signal through a "plug and play" approach [28; 29; 30], integrating the diffusion model with a forward measurement process according to Bayes' rule. These approaches are versatile and can easily adapt to new inverse problems without retraining. However, unlike our models, they rely on direct supervision over the signals in the form of large datasets.

## 4 Applications

We now apply our framework to three stochastic inverse problems. We focus on applications in computer vision, where we tackle the problems of inverse graphics, single-image motion prediction, and GAN inversion. For each application, we give a detailed description of the forward model, the dataset and baselines, as well as a brief description of prior work.

Figure 2: **Overview of 3D Generative Modeling. We build a 3D-structured denoise operator on top of pixelNeRF  that learns to sample from the distribution of 3D scenes from image observations only. Given a context image \(^{}\) with camera pose \(^{}\), we pick a target pose \(^{}\). We render out a deterministic estimate of the depth, RGB, and features of the target view \(^{}_{}\) using pixel-aligned features \(^{}\) extracted from the context view with encoder \(_{t=0}\) (left, only RGB shown here). To generate a 3D scene, we concatenate the deterministic estimate with noise \(^{}_{t}\), and extract features \(^{}_{t}\) for the _target_ view with \(_{t}\). \(^{}_{t}\) and \(^{}\) now jointly parameterize the radiance field of the generated scene \(_{t-1}\), and we may render an estimate of the clean target view \(}^{}_{t:1}\). The model is trained end-to-end via a re-rendering loss.**

### Inverse Graphics

We seek to learn a model that, given a single image of a 3D scene enables us to sample from the distribution over 3D scenes that are consistent with the observation. We expect that 3D regions visible in the image are reconstructed faithfully, while unobserved parts are generated plausibly. Every time we sample, we expect a _different_ plausible 3D generation. Signals \(\) are 3D scenes, and observations are 2D images \(\) and their camera parameters \(\). At training time, we assume that we have access to at least two image observations and their camera parameters per scene, such that we can assemble tuples of \((^{},^{},^{},^{ {trgt}})\), with 2D images \(^{},^{}\), and camera parameters \(^{},^{}\).

**Scope.** We note that our treatment of inverse graphics exceeds a mere application of the presented framework. In particular, we not only integrate the differentiable rendering forward function, but further propose a novel 3D-structured denoise function. Here, we enable state-of-the-art conditional generation of complex, real-world 3D scenes.

**Related Work.** Few-shot reconstruction of 3D scene representations via differentiable rendering was pioneered by deterministic methods  that blur regions of the 3D scene unobserved in the context observations. Probabilistic methods have been proposed that can sample from the distribution of novel views trained only on images . While results are impressive, these methods do not allow sampling from the distribution of _3D scenes_, but only from the distribution of _novel views_. Generations are not multi-view consistent. Obtaining a 3D scene requires costly post-processing via score distillation . Several approaches  use a two-stage design: they first reconstruct a dataset of 3D scenes, and then train a 3D diffusion model. However, pre-computing large 3D datasets is expensive. Further, to obtain high-quality results, dense observations are required per scene. RenderDiffusion  and HoloDiffusion  integrate differentiable forward rendering with an unconditional diffusion model, enabling unconditional sampling of simple, single-object scenes. Similar to us, RenderDiffusion performs denoising in the image space, while HoloDiffusion uses a 3D denoising architecture. Other methods use priors learned by text-conditioned image diffusion models to optimize 3D scenes . Here, the generative model does not have explicit knowledge about the 3D information of scenes. These methods often suffer from geometric artifacts.

**Structure of S and forward model render.** We can afford only an abridged discussion here - please see the supplement for a more detailed description. We use NeRF  as the parameterization of 3D scenes, such that \(\) is a function that maps a 3D coordinate \(\) to a color \(\) and density \(\) as \(()=(,)\). We require a _generalizable_ NeRF that is predicted in a feed-forward pass by an encoder that takes a set of \(M\) context images and corresponding camera poses \(\{(_{i},_{i})\}_{i}^{M}\) as input.

Figure 3: **Sample Diversity. We illustrate different 3D scenes sampled from the same context image for RealEstate10k and Co3D datasets. Unlike deterministic methods like pixelNeRF , our method generates diverse and distinct 3D scenes that all align with the context image. Co3D results are generated using autoregressive sampling, where a 360 degree trajectory can be generated by iteratively sampling target images. Note the photorealism and diversity of the generated structures for the indoor scene, such as doors and cabinets. Also note the high-fidelity geometry of the occluded parts of the hydrant and the diverse background appearance.**We base our model on pixelNeRF . pixelNeRF first extracts image features \(\{_{i}\}_{i}\) from each context observation via an encoder enc as \(_{i}=(_{i})\). Given a 3D point \(\), it obtains its pixel coordinates in each context view via \(_{i}^{}=(,_{i})\) via the projection operator \(\), and recovers a corresponding feature as \(_{i}=_{i}(_{i}^{})\) by sampling the feature map at pixel coordinate \(_{i}^{}\). It then parameterizes \(\) via an MLP as:

\[()=((),())=(\{(_{i}_{i}\}_{i}^{M}), \]

where \(\) is concatenation and \(_{i}\) is the 3D point \(\) transformed into the camera coordinates of observation \(i\). The number of context images \(M\) is flexible, and we may condition \(\) on a single or several observations. It will be convenient to refer to a pixelNeRF that is reconstructed from context and target observations \((^{},^{})\) and \((^{},^{})\) as

\[((^{}),( ^{})), \]

where we make the pixelNeRF encoder enc explicit and drop the poses \(^{}\) and \(^{}\). We leverage differentiable volume rendering  as forward model, such that

\[=(,), \]

where \(\) is rendered from a camera with parameters \(\).

**Implementation of**denoise. Fig. 2 gives an overview of the denoising procedure. Following our framework, we obtain the denoised target observation \(}^{}_{t-1}\) as:

\[}^{}_{t-1}=(_{t -1},^{}), \] \[_{t 1}=(_{t=0}( ^{}),_{t}(^{}_{t})), \]

where the image encoder enc\({}_{t}\) is now conditioned on the timestep \(t\). In other words, we will generate a target view \(}^{}_{t-1}\) by rendering the pixelNeRF conditioned on the context and noisy target observations. However, feeding the noisy \(^{}_{t}\) directly to pixelNeRF is insufficient. This is because the pixel-aligned features enc\({}_{t}()\) are obtained from each view separately - thus, the features generated by enc\({}_{t}(^{}_{t})\) will be uninformative. To successfully generate a 3D scene, we have to augment the \(^{}_{t}\) with information from the context view. We propose to generate conditioning information for \(^{}_{t}\) by rendering a _deterministic estimate_\(^{}_{}=(( _{t=0}(^{})),^{})\). I.e., we condition pixelNeRF only on the context view, and render an estimate of the target view via volume rendering. However, in the extreme case of a completely uncertain target view, this results in a completely blurry image. We thus propose to additionally render high-dimensional features. Recall that any 3D point \(\), we have \(((),())=_{t}()\). We modify MLP\({}_{t}\) to also output a high-dimensional feature and

Figure 4: **Qualitative Comparison for Inverse Graphics application.** We benchmark with SparseFusion  and the deterministic pixelNeRF . SparseFusion samples 2D novel views conditioned on a deterministic rendering (Diffusion Out.), and generates multi-view consistent 3D scenes only after Score Distillation. Our method consistently generates higher-quality scenes, while directly sampling 3D scenes.

render a deterministic feature map to augment \(_{t}^{}\) (only RGB shown in figure). We generate the final 3D scene as \(_{}=(_{t=0}(^{}),_{t}(_{}^{}_{t}^{}))\). The final denoised target view is then obtained according to the rendering Eq. 13 above.

**Loss and Training.** Our loss consists of simple least-squares terms on re-rendered views, identical to the general loss terms presented in Eqs. 8 and 9, in addition to regularizers that penalize degenerate 3D scenes. We discuss these regularizers, as well as training details, in the supplement.

#### 4.1.1 Results

**Datasets** We evaluate on two challenging real-world datasets. We use Co3D hydrants  to evaluate our method on object-centric scenes. For scene-level 3D synthesis, we use the challenging RealEstate10k dataset , consisting of indoor and outdoor videos of scenes.

**Baselines** We compare our approach with state-of-the-art approaches in deterministic and probabilistic 3D scene completion. We use pixelNeRF as the representative method for deterministic methods that takes a single image as input and deterministically reconstructs a 3D scene. Our method is the first to probabilistically reconstruct 3D scenes in an end-to-end manner. Regardless, we compare with the concurrent SparseFusion  that learns an image-space generative model over novel views of a 3D scene. Score distillation of this generative model is required every time we want to obtain a multi-view consistent 3D scene, which is costly.

**Qualitative Results.** In Fig. 3, we show multiple samples of 3D scenes sampled from a monocular image. For the indoor scenes of RealEstate10k, there are large regions of uncertainty. We can sample from the distribution of valid 3D scenes, resulting in significantly different 3D scenes with plausible geometry and colors. The objects are faithfully reconstructed for the object-centric Co3D scenes, and the uncertainty in the scene is captured. We can sample larger 3D scenes and render longer trajectories by autoregressive sampling, i.e., we treat intermediate diffused images as additional context observations to sample another target observation. The Co3D results in Fig. 3 were generated autoregressively for a complete 360 degrees trajectory. In Fig. 4, we compare our results with pixelNeRF  and SparseFusion . pixelNeRF is a deterministic method and thus leads to very blurry results in uncertain regions. SparseFusion reconstructs scenes by score-distillation over a 2D generative model. This optimization is very expensive, and does not lead to natural-looking results.

**Quantitative Results.** For the object-centric Co3D dataset, we evaluate the accuracy of novel views using PSNR and LPIPS  metrics. Note that PSNR/LPIPS are not meaningful metrics for large scenes since the predictions have a large amount of uncertainty, i.e., a wide range of novel view images can be consistent with any input image. Thus, we report FID  and KID  scores to evaluate the realism of reconstructions in these cases. Our approach outperforms all baselines for LPIPS, FID, and KID metrics, as our model achieves more realistic results. We achieve slightly lower PSNR compared to pixelNeRF . Note that PSNR favors mean estimates, and that we only evaluate our model using a single randomly sampled scene for an input image due to computational constraints.

### Single-Image Motion Prediction

Here, we seek to train a model that, given a single static image, allows us to sample from _all possible motions_ of pixels in the image. Given, for instance, an image of a person performing a task, such as kicking a soccer ball, it is possible to predict potential future states. This is a stochastic problem, as there are multiple possible motions consistent with an image. We train on a dataset of natural videos . We only observe RGB frames and never directly observe the underlying motion, i.e, the pixel correspondences in time are unavailable. We use tuples of two frames from videos within a small temporal window, and use them as our context and target observations for training.

Figure 5: Qualitative Results for Single-Image Motion Prediction (left) and GAN Inversion (right).

**Related Work.** Several papers tackle this problem, where motion in the form of optical flow [57; 58; 59], 2D trajectories [60; 61], and human motion [62; 63] are recovered from a static image; however, all these methods assume supervision over the underlying motion. Learning to reason about motion requires the neural network to learn about the properties and behavior of the different objects in the world. Thus, this serves as a useful proxy task for representation learning, and can be used as a backbone for many downstream applications [64; 60].

**Structure of S and forward model warp.** Our signal \(\) stores the appearance and motion information in a 2D grid. At any pixel \(\), the signal is defined as \(()=(_{c}(),_{m}())\), where \(_{c}()^{3}\) is the color value, and \(_{m}()^{2}\) is a 2D motion vector. The forward model is a warping operator, such that \((,)(+_{m}())= _{c}()\) and \(\) is a scalar that changes the magnitude of motion. We implement this function using a differentiable point splitting operation .

**Implementation of denoise.** The inset figure illustrates our design. We use a 2D network that takes \(^{}\), \(_{t}^{}\), and \(t\) as input, and generates the motion map \(_{m}\) as the output. The signal is then reconstructed as \(=(^{},_{m})\). Context and target frames correspond to parameters \(^{}=0\) and \(^{}=1\), and can be reconstructed from the signal using warp.

**Loss and Evaluation.** Similar to inverse graphics, we use reconstruction and regularization losses. The reconstruction losses are identical to Eqs. 8 and 9, and the regularization loss is a smoothness term that encourages a natural motion of the scene, see supplement for details. We show results in Fig. 5 (left), where we can estimate a diverse set of possible motion flows from monocular images. By smoothly interpolating \(\), we can generate short video sequences, even though our model only saw low-framerate video frames during training. We also train a deterministic baseline, which only generates a single motion field. Due to the amount of uncertainty in this problem, the deterministic estimate collapses to a near-zero motion field regardless of the input image, and thus, fails to learn any meaningful features from images.

### GAN Inversion

Projecting images onto the latent space of generative adversarial networks is a well-studied problem [66; 8], and enables interesting applications, as manipulating latents along known directions allows a user to effectively edit images [67; 68; 69]. Here, we solve the problem of projecting partial images: given a small visible patch in an image, our goal is to model the distribution of possible StyleGAN2  latents that agree with the input patch. There are a diverse set of latents that can correspond to the input observation, and we train our method without observing supervised (image, latent) pairs. Instead, we train on pairs of \((^{}\), \(^{})\) observations, where \(^{}\) are the small patches in images, and \(^{}\) are the full images.

**Related Work.** While most GAN inversion methods focus on inverting a complete image into the generator's latent space [70; 71; 72; 73; 74; 75; 76; 77; 78], some also reconstruct GAN latents from small patches via supervised training. Inversion is not trivial, and papers often rely on regularization  or integrate the inversion with editing tasks  for higher quality. We also integrate the inpainting task with the inversion, and seek to model the uncertainty of the GAN inversion task given only a partial observation (patch) of the target image.

**Structure of S and forward model** synthesize.** Our signal \(^{512}\) is a 512 dimensional latent code representing the "w" space of StyleGAN2  trained on the FFHQ  dataset. The forward model \((,)=()[]\) first reconstructs the image corresponding to \(\) using a

  &  &  \\   & PSNR\(\) & LPIPS\(\) & FID\(\) & KID\(\) & FID\(\) & KID\(\) \\  pixelNeRF & **17.93** & 0.54 & 180.20 & 0.14 & 195.40 & 0.14 \\ SparseFusion & 12.06 & 0.63 & 252.13 & 0.16 & 99.44 & 0.04 \\ Ours & 17.47 & **0.42** & **84.63** & **0.05** & **42.84** & **0.01** \\  
  &  \\   & FID\(\) & KID\(\) \\  Determ. & 25.7 & 0.019 \\ Ours & **7.45** & **0.002** \\ 

Table 1: **Quantitative evaluation.** (left) We benchmark our 3D generative model with state-of-the-art baselines pixelNeRF  and SparseFusion . (right) We benchmark with a deterministic baseline on GAN inversion, which we drastically outperform.

forward pass of the GAN. It then extracts a patch using the forward model's parameters \(\) that encode the patch coordinates.

**Implementation of** denoise, **Loss, and Evaluation.** Please see the inset figure for an illustration of the method. The denoising network receives \(^{}\), \(_{t}^{}\), and timestep t as input, and generates an estimate of the StyleGAN latent \(\). The loss function is identical to Eq. 8 and compares the reconstructed sample with ground truth. We show results in Fig. 5 (right). We obtain diverse samples that are all consistent with the input patch. We also compare with a deterministic baseline that minimizes the same loss but only produces a single estimate. While this deterministic estimate also agrees with the input image, it does not model the diversity of outputs. We consequently achieve significantly better FID  and KID  scores than the deterministic baseline, reported in Tab. 1 (right).

## 5 Discussion

**Limitations.** While our method makes significant advances in generative modeling, it still has several limitations. Sampling 3D scenes at test time can be very slow, due to the expensive nature of the denoising process and the cost of volume rendering. We need multi-view observations of training scenes for the inverse graphics application. Our models are not trained on very large-scale datasets, and can thus not generalize to out-of-distribution data.

**Conclusion** We have introduced a new method that tightly integrates differentiable forward models and conditional diffusion models. Our model learns to sample from the distribution of signals trained only using their observations. We demonstrate the efficacy of our approach on three challenging computer vision problems. In inverse graphics, our method, in combination with a 3D-structured conditioning method, enables us to directly sample from the distribution of real-world 3D scenes consistent with a single image observation. We can then render multi-view consistent novel views while obtaining diverse samples of 3D geometry and appearance in unobserved regions of the scene. We further tackle single-image conditional motion synthesis, where we learn to sample from the distribution of 2D motion conditioned on a single image, as well as GAN inversion, where we learn to sample images that exist in the latent space of a GAN that are consistent with a given patch. With this work, we make contributions that broaden the applicability of state-of-the-art generative modeling to a large range of scientifically relevant applications, and hope to inspire future research in this direction.

**Acknowledgements.** This work was supported by the National Science Foundation under Grant No. 2211259, by the Singapore DSTA under DST00OECI20300823 (New Representations for Vision), by the NSF award 1955864 (Occlusion and Directional Resolution in Computational Imaging), by the ONR MURI grant N00014-22-1-2740, and by the Amazon Science Hub. We are grateful for helpful conversations with members of the Scene Representation Group David Charatan, Cameron Smith, and Boyuan Chen. We thank Zhizhuo Zhou for thoughtful discussions about the SparseFusion baseline. This article solely reflects the opinions and conclusions of its authors and no other entity.

**Author contributions.** Ayush and Vincent conceived the idea of diffusion with forward models, designed experiments, generated most figures, and wrote most of the paper. Ayush contributed the key insight to integrate differentiable rendering with diffusion models by denoising in image space while generating 3D scenes. Ayush and Vincent generalized this to general forward models, and conceived the single-image motion application. Vincent contributed the 3D-structured conditioning and generated the overview and methods figures. Ayush wrote all initial code and ran all initial experiments. Ayush and Tianwei implemented the inverse graphics application and generated most of the 3D results of our model, while George helped with the baseline 3D results. Ayush executed all single-image motion experiments. George conceived, implemented, and executed all GAN inversion experiments. Semon helped formalizing the method and wrote the proposition and its proof. Fredo and Bill were involved in regular meetings and gave valuable feedback on results and experiments. Josh provided intriguing cognitive science perspectives and feedback on results and experiments, and provided a significant part of the compute. Vincent's Scene Representation Group provided a significant part of the compute, and the project profited from code infrastructure developed by and conversations with other members of the Scene Representation Group.