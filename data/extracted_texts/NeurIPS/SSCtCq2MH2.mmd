# GIC: Gaussian-Informed Continuum for Physical Property Identification and Simulation

Junhao Cai\({}^{1*}\) Yuji Yang\({}^{2*}\) Weihao Yuan\({}^{3}\) Yisheng He\({}^{3}\)

**Zilong Dong\({}^{3}\) Liefeng Bo\({}^{3}\) Hui Cheng\({}^{2}\) Qifeng Chen\({}^{1}\)**

\({}^{1}\)The Hong Kong University of Science and Technology, \({}^{2}\)Sun Yat-sen University, \({}^{3}\)Alibaba Group

\({}^{*}\) Equal contribution, order determined by coin toss. \({}^{}\) Corresponding author.

###### Abstract

This paper studies the problem of estimating physical properties (system identification) through visual observations. To facilitate geometry-aware guidance in physical property estimation, we introduce a novel hybrid framework that leverages 3D Gaussian representation to not only capture explicit shapes but also enable the simulated continuum to render object masks as 2D shape surrogates during training. We propose a new dynamic 3D Gaussian framework based on motion factorization to recover the object as 3D Gaussian point sets across different time states. Furthermore, we develop a coarse-to-fine filling strategy to generate the density fields of the object from the Gaussian reconstruction, allowing for the extraction of object continuums along with their surfaces and the integration of Gaussian attributes into these continuums. In addition to the extracted object surfaces, the Gaussian-informed continuum also enables the rendering of object masks during simulations, serving as 2D-shape guidance for physical property estimation. Extensive experimental evaluations demonstrate that our pipeline achieves state-of-the-art performance across multiple benchmarks and metrics. Additionally, we illustrate the effectiveness of the proposed method through real-world demonstrations, showcasing its practical utility. Our project page is at https://jukgei.github.io/project/gic.

## 1 Introduction

Identifying the physical properties of objects (i.e., system identification) is essential for numerous applications such as games, digital twins, and robotic manipulation . Although humans can intuitively deduce the underlying physical properties with a single glance when the object undergoes deformation, estimating the properties with only visual observations remains challenging for computational perceptual algorithms.

To tackle this challenge, many established methods  adopt the assumption of elastic material  and perform physics-based modeling based on mass-spring systems (MSS) or finite element method (FEM) to model and simulate the dynamics of the objects. Such an assumption inevitably restricts the ability to simulate more general types beyond elastic materials, such as fluids or granular media. Another problem of previous methods lies in that many methods  require the ground-truth full knowledge of object geometry for the identification, which limits their practicality. Some subsequent methods  turn to recover the geometries and physical properties from observations in a decoupled manner. Specifically, these methods first extract object geometries by making use of stereo observations or dynamic neural reconstruction  from RGB video sequences, and then perform simulation directly on the point clouds or after the tetrahedral mesh conversion. While these methods introduce explicit geometries to guide the estimation of physical properties, the noisy reconstruction results usually lead to degraded system identification performance.

Recently, PAC-NeRF  integrates neural radiance fields (NeRF)  with a continuum dynamic model to tackle the above problems. The object geometries and physical properties are captured in a unified framework. Despite its effectiveness, this method possesses two limitations. Firstly, the implicit shapes represented by NeRF often lead to inferior geometries, which might cause inaccurate trajectories during simulation. Secondly, PAC-NeRF renders the novel views of deformed objects based on the appearance radiance field reconstructed from the static scene, which might introduce texture distortion, particularly when objects undergo significant deformations, resulting in discrepancies between the rendered and the observed images .

To address these limitations, this paper proposes a novel hybrid solution based on 3D Gaussians [15; 16] and material point method (MPM) [17; 18]. The core strength of this work is that we make use of both 3D shapes from dynamic 3D Gaussian reconstruction and 2D shapes rendered by the Gaussian-informed continuum for physical property estimation.

To generate more precise shapes to reason physical property, we first propose a _motion-factorized dynamic 3D Gaussian network_ to conduct dynamic scene reconstruction. We then extract the continuum from the recovered 3D Gaussians at each frame by leveraging a _coarse-to-fine filling strategy_ to generate the density field of the object progressively. The resulting density fields can be used to sample continuum particles for simulation and extract object surfaces as 3D-shape supervision in physical property estimation. To eliminate the appearance distortion caused by large deformation in PAC-NeRF, we further assign Gaussian attributes to the continuum particles where the opacity and scale attributes are evaluated from the density field. Such _Gaussian-informed continuum_ are able to render object masks during simulation, which can be regarded as a 2D-shape representation to guide the estimation and effectively avoid using inferior rendering results for learning physical properties.

To demonstrate the superiority of the proposed method over other baselines, we conduct three types of experiments, including evaluations of physical properties, dynamic reconstruction, and future state simulation. We also demonstrate a real-world application in digital twins and robotic manipulation, showing the applicability of the proposed method in real-world scenarios.

Our contributions are summarized as follows.

* We propose a novel hybrid pipeline that takes advantage of the 3D Gaussian representation of the object to both acquire 3D shapes and empower the simulated continuum to render 2D shapes for physical property estimation.
* We propose a novel dynamic 3D Gaussian framework with motion factorization to achieve more precise dynamic reconstruction. We also propose a coarse-to-fine filling strategy to generate the density field of the object, which can be utilized to extract object surfaces and obtain Gaussian-informed continuum particles.
* Extensive experiments show that our pipeline attains state-of-the-art performance on existing benchmarks with a wide range of metrics. We also present a real-world demonstration to show the efficiency of the proposed method.

## 2 Related Work

**Dynamic reconstruction**. Reconstructing dynamic scenes from monocular or multi-view video(s) is a long-standing problem in the computer vision community [19; 20]. Previous works exploit neural implicit representation [21; 22] for non-rigid reconstruction. These methods either reconstruct the scene in a frame-wise manner [23; 24] or maintain a canonical shape and model the deformation with a neural network [25; 26; 11; 27]. While effective for novel view synthesis, these methods often require extensive training time and can result in noisy deformations owing to the implicit representation, which may compromise the utility of the recovered geometries for physical property estimation . Recent progress in 3D Gaussian Splitting (3DGS) technique  stands out to be a prevalent method for 3D reconstruction and novel view synthesis because of the abilities of explicit shape modeling and extremely fast view rendering. Similar to non-rigid NeRF, many follow-up works extend the 3DGS into 4D by treating each frame separately  or decomposing a scene into a canonical 3D Gaussian point cloud and a deformation model that warps the canonical shape into a specific scene [16; 29; 30]. In this paper, we draw upon these prior studies [16; 29] and propose a novel motion-factorized dynamic 3D Gaussian network to achieve better performance on reconstruction and novel view synthesis.

**System identification**. Understanding the physics laws of the 3D world is beneficial for simulation [31; 32; 33; 34; 6] and manipulation [3; 36; 37; 38; 3; 38]. However, unveiling these properties from visual information is an extremely difficult task due to the ambiguity introduced by incomplete observation and the high degrees of freedom of the scene. Early works [39; 40] study the problem by learning physical properties via interactions. With recent improvements in differentiable physics simulation [17; 18; 41; 42; 43; 44; 45], many methods turn to evaluate the physical properties by comparing the rendering results with 2D ground truth given the prior knowledge about the object geometry. VEO  presents a differentiable simulator to learn patterns from 4D reconstruction and force-displacement measurements. Another approach  eliminates the dependence of captured forces by proposing an iteration framework between deformation tracking and parameter optimization. While these methods demonstrate promising results, the inferior reconstruction might lead to degraded performance, and the assumption of elastic material restricts the applicability. PAC-NeRF  instead proposes a single framework to recover both the unknown geometry and physical properties of deformable objects from multi-view video sequences. However, the inferior geometries and blurry rendered images might have detrimental effects on physical property reasoning. In this work, we adopt MPM as our simulation framework following the approach used in PAC-NeRF due to its ability to simulate a variety of materials [46; 47; 48; 6]. Unlike previous approaches, we utilize dynamic 3D Gaussians to reconstruct explicit 3D geometries and generate simulatable continuum particles. Furthermore, we enhance the particles with Gaussian attributes, facilitating the rendering of 2D shapes, and thereby improving physical parameter estimation.

## 3 Preliminary

In this section, we briefly review the core idea of 3D Gaussian Splatting (3DGS)  and introduce its point-based alpha blending to render depth maps and foreground masks. Typically, 3DGS utilizes 3D Gaussians, each defined by a central point \(_{0}\), a covariance matrix \(_{0}\), a density value \(\), and a color attribute \(c\), to efficiently render images from specific viewpoints. Each point is denoted as

\[G(x)=(-(x-_{0})^{T}_{0}^{-1}(x-_{0})),\] (1)

where \(_{0}\) can be factorized as \(_{0}=R_{0}S_{0}S_{0}^{T}R_{0}^{T}\), in which \(R_{0}\) is a rotation matrix represented by a quaternion vector \(r_{0}^{4}\), and \(S_{0}\) is a a diagonal scaling matrix characterized by a 3D vector \(s_{0}^{3}\). If we consider isotropic Gaussian representation, the scaling matrix can be written as \(s_{0}I\), where \(s_{0}\) is a scalar and \(I\) is the identity matrix. When performing splatting, the 3D Gaussians are projected into 2D with the covariance matrix defined as \(_{0}^{}=JW_{0}W^{T}J^{T}\), where \(J\) is the Jacobian of affine approximation of the projective transformation , and \(W\) is the viewing transformation matrix. The rendered color \(I(u)\) with its foreground mask \(A(u)\) at pixel \(u\) are then evaluated by integrating \(N\) ordered slanted Gaussians via the point-based alpha blending. Since the depth of each Gaussian point at a specific view can be obtained according to its transformation matrix, we can further render the depth map \(D\) using the same blending method [50; 16], as

\[I(u)=_{i N}T_{i}_{i}c_{i}, A(u)=_{i N}T_{i}_{i }, D(u)=_{i N}T_{i}_{i}d_{i},\] (2)

where \(T_{i}=_{j=1}^{i-1}(1-_{j})\) is the accumulated transmittance, \(_{i}\) is the probability of termination at point \(i\), and \(d_{i}\) is the depth of the Gaussian point at the specific view.

## 4 Method

### Problem Definition and Overview

In this work, we aim to reconstruct the geometries and the physical properties of various object types from multi-view videos. Formally, given a set of video sequences \(\{V_{i}|i=1...n\}\) with moving object and the corresponding camera extrinsic and intrinsic parameters \(\{(T_{i},K_{i})|i=1...n\}\), the goal of this task is to recover the explicit geometries of the object represented by continuum particles \(P(t)\) and its corresponding physical parameters \(\) (e.g., Young's modulus \(E\) and Poisson's ratio \(\) for elastic objects). We follow the assumption in PAC-NeRF and PhysGaussian [12; 51] that the object types (e.g., elastic, granular, Newtonian/non-Newtonian, plastic) are known and the physical phenomenon follows continuum mechanics [52; 17].

The overview of the proposed pipeline is illustrated in Fig. 1, which consists of three modules: a motion-factorized dynamic 3D Gaussian network (Sec. 4.2) for 4D reconstruction of the object, a coarse-to-fine density field generation strategy (Sec. 4.3) for continuum generation, surface extraction, and Gaussian attribute assignment, and a procedure (Sec. 4.4) showing how we leverage Gaussian-informed continuum and extracted surfaces to estimate physical properties.

### Motion-factorized Dynamic 3D Gaussian Network

Our dynamic 3D Gaussian network follows existing frameworks [16; 29; 30] that simultaneously maintain a canonical 3D Gaussian set and a deformation field modeled by a neural network to warp the canonical shape into object states at specific times. The core idea of this pipeline, presented in Fig. 2, is that the motion of every point in the object can be decomposed into a small range of motion bases.

**Architecture**. We first factorize the entire motion into \(N_{m}\) bases that are modeled by a fully connected neural network, where every basis shares a common backbone except the final layer. The output of each basis consists of the deformations at position \(d_{i}(t)^{3}\) and at scale \(ds_{i}(t)\). To model the exact deformation for each position, we next propose a lightweight coefficient network that maps the positions at canonical space with specific time to their corresponding motion coefficients \(w(_{0},t)^{N_{m}}\). Therefore, the deformed position and the scale for each Gaussian point are evaluated by the linear combination of the motion basis according to the motion coefficients:

\[(t)=_{0}+_{i=1}^{N_{m}}w_{i}(_{0},t)d_{i}(t), s(t)=s_{0} +_{i=1}^{N_{m}}w_{i}(_{0},t)ds_{i}(t).\] (3)

In this work, we regard all the Gaussians as isotropic kernels, which has been demonstrated as an effective way to simplify the model and better reconstruct the scene [6; 53]. We should note that

Figure 1: Overview. (a) **Continuum Generation:** Given a series of multi-view images capturing a moving object, the motion-factorized dynamic 3D Gaussian network is trained to reconstruct the dynamic object as 3D Gaussian point sets across different time states. From the reconstructed results, we employ a coarse-to-fine strategy to generate density fields to recover the continuums and extract object surfaces. The continuum is endowed with Gaussian attributes to allow mask rendering. (b) **Identification:** The MPM simulates the trajectory with the initial continuum \((0)\) and the physical parameters \(\). The simulated object surfaces and the rendered masks are then compared against the previously extracted surfaces (colored in blue) and the corresponding masks from the dataset. The differences are quantified to guide the parameter estimation process. (c) **Simulation:** Digital twin demonstrations are displayed. Simulated objects (colored by stress increasing from blue to red), characterized by the properties estimated from observation, exhibit behavior consistent with real-world objects.

although previous works [29; 54] also perform motion decomposition modeling, our pipeline shows two major differences: 1) instead of modeling each basis with an independent neural network, our module shares a common backbone. Our key observation is that for reconstructing a dynamic object, all points on the object should follow a similar moving tendency, and the final heads of the neural network are sufficient to model the details of different parts of the object; 2) to increase the ability to fit high rank of the dynamic scene , we model the motion coefficients as time-variant variables rather than constant Gaussian attributes .

**Optimization**. We employ the same setting in  to train our pipeline. Concretely, the canonical 3D Gaussians are initialized with points randomly sampled from the given bounding box of the scene. We start training the deformation network after 3,000 iterations of warm-up for the 3D Gaussians. Similar to previous works [16; 29], we optimize the pipeline by computing the L1 norm and Structural Similarity Index Measure (SSIM) between the rendered image \(I\) and the ground truth image \(\). Moreover, since large scales may lead to inaccurate reconstructed shapes , we thus perform L1 norm on the scale attributes of all the points to recover more fine-grand shapes of the object. Therefore, the overall loss function is defined as:

\[_{gs}=_{1}(I,)+_{1}_{ssim}(I,)+_{2}_{1}(s(t)),\] (4)

where \(_{1}\) and \(_{2}\) are balancing hyperparameters. More in-depth analysis of the proposed pipeline, including implementation details and effects of scale regularization, are presented in Appendix A.1.

### Gaussian-informed Continuum Generation

**Coarse-to-fine density field generation**. Since the reconstructed Gaussian particles are served for rendering only, meaning that they are not evenly distributed on the objects, they cannot be directly used for simulation . Therefore, we propose a novel coarse-to-fine filling strategy to iteratively generate density fields of the object based on the reconstructed Gaussian particles from Eqn. 3 and the internal particles filtered by the rendered depth maps. The proposed strategy is presented in Alg. 1. The implementation details and visual results are illustrated in Appendix A.2.

Concretely, the internal particles, initialized by uniform sampling from the bounding box of Gaussian particles, are filtered by projecting the particles to various images to compare the projected depth with rendered depth values (lines 1-6 in Alg. 1). The resulting particles can roughly represent the shape of the object. However, as denoted in Eqn. 2, the rendered depth maps are evaluated in an accumulated manner, making them less precise in representing the object surface.

Therefore, We employ a coarse-to-fine filling strategy by iteratively upsampling the density field and reassigning the densities on the indices computed from both the Gaussian and internal particles (lines 8-16 in Alg. 1). Fig. 3 provides a sketch illustration of the proposed strategy. Specifically, due to the large grid size at the initial stage, the object is completely inside the voxels with high densities. Next, we sequentially perform upsampling (line 10), mean filtering (line 13), and reassigning the

Figure 2: The pipeline of the proposed dynamic 3D Gaussian network. The motion network backbone consists of 8 fully connected (FC) layers. The output of the motion block is fed to \(N_{m}\) heads to generate motion residuals. The coefficient network contains 4 FC layers.

field (line 14) at each iteration. The first two operations produce more fine-grained shapes, and the reassigning operation ensures high densities at the surface to avoid over-erosion caused by the first two steps. Finally, the continuum particles with the corresponding object surfaces can be extracted by thresholding the density field (lines 16-17 in Alg. 1).

```
0: Gaussian particles at time \(t\): \(_{G}(t)=\{((t),s(t),,c)\}\); \(n\) pairs of camera extrinsic and intrinsic parameters: \(\{(_{i},K_{i})|i=1...n\}\); parameters: grid size \( x\); number of upsampling steps \(n_{u}\); thresholds \(th_{min}\), \(th_{min}\);
0: Continuum particles \((t)\) and the corresponding surface \((t)\);
1: Randomly sample an initial particle set \(P_{in}\) from the bounding box of \(\{(t)\}\);
2:for\(i 1,n\)do
3:\(_{i}=GaussianSplitting(_{G}(t),T_{i},K_{i})\); \(\) render depth map at view \(i\)
4:\((u_{in},v_{in}),d_{in} Proj(P_{in},T_{i},K_{i})\); \(\) obtain image indices and depths of \(P_{in}\) at view \(i\)
5:\(P_{in} P_{in}[_{i}(u_{in},v_{in}) d_{in}]\); \(\) filter out particles that are outside the object
6:endfor
7: Initialize the zero-value density field \(F(t)\) with \( x\) and the bounding box of \(\{(t)\}\);
8:for\(j 1,n_{u}\)do
9:if\(j 1\)then
10:\(F(t)-TriminearInterpolation(F(t),2)\)\(\) upsample \(F(t)\) with scale factor 2
11:\(F(t)[p,q,r]=1\), where \(p,q,r Discretize(P_{in}\{(t)\})\);
12:endif
13:\(F(t) MeanFiltering(F(t))\);
14:\(F(t)[p,q,r]=1\), where \(p,q,r Discretize(P_{in}\{(t)\})\);
15:endfor
16:\((t) GetPosition(th_{min} F(t))\);
17:\((t) GetPosition(th_{min} F(t) th_{max})\); ```

**Algorithm 1** Pseudo code for coarse-to-fine filling

**Gaussian-informed continuum**. In PAC-NeRF, the particles are equipped with appearance features to enable image rendering for the continuum at different states. We can also achieve this function by treating the particles as Gaussian kernels and re-train the particles using the visual data. However, this process is cumbersome and will also face the same issue in PAC-NeRF where distorted RGB images will be rendered when large deformation occurs. Therefore, instead of injecting appearance attributes, we opt to assign density and scale attributes to the particles where the densities originate from the density field, and the scale attributes can be directly obtained by the field grid size. The Gaussian-informed continuum is defined as a set of triplets:

\[_{}=\{(,s_{ x},_{F})\},\] (5)

where \(\), \(s_{ x}= x/2^{n_{u}}\), and \(_{F}=F[Discretize()]\) (we neglect \(t\) in the notation for simplicity). Therefore, we only render object masks as 2D shape surrogates for supervision.

Figure 3: Sketch illustration of the coarse-to-fine filling strategy. Gaussian and internal particles are depicted in green and blue, respectively. (a) Voxels containing particles are assigned high densities. (b) Following the upsampling and smoothing of the field, densities near boundaries become blurred (indicated in light yellow). (c) The particles are again used to correct the voxels that contain particles with high densities. (d) and (e) repeat the previous operations to achieve a more detailed shape.

### Geometry-aware Physical Property Estimation

With the Gaussian-informed continuum at initial state \(_{}(0)\) and the extracted surfaces \((t)\) in place, we can employ MPM to perform simulation on the continuum and evaluate the difference in terms of both the 3D and 2D shapes. Concretely, after a rollout by MPM given the current estimation of physical parameters, we obtain a trajectory \(P(t)\) with corresponding object surfaces \(S(t)\). We thus can render object masks over the trajectory. Then the loss of the current rollout can be computed as:

\[_{ppe}=_{i=1}^{m}[_{CD}(S(t_{i}), (t_{i}))+_{j=1}^{n}_{1}(A_{j}(t_{i}),_{j}(t_{ i}))],\] (6)

where \(_{CD}\) and \(_{1}\) are chamfer distance and L1 norm respectively, \(S(t_{i})\) denotes the simulated surface at time \(t_{i}\), \(A_{j}(t_{i})\) is the rendered mask at view \(j\), and \(_{j}(t_{i})\) represents the object mask of the image extracted from video \(V_{j}\) at time \(t_{i}\). Due to the differential property of the simulator, the evaluated loss is used to optimize the target physical parameters \(\).

## 5 Experiments

**Datasets**. To thoroughly assess our proposed method, we employ two sources of data introduced by PAC-NeRF  and Spring-Gaus . Concretely, PAC-NeRF contributes two synthetic datasets generated by MLS-MPM framework . Each object in both datasets includes RGB images from 11 distinct viewpoints, with approximately 14 frames per viewpoint. The datasets feature a range of materials, including elastic and plastic objects, granular media, and both Newtonian and non-Newtonian fluids. The first dataset contains 45 cross-shape objects with different initial conditions and ground-truth values of physical properties, while the second one consists of 9 objects with different shapes. The interpretation of the physical parameters is listed in Appendix A.9 and A.10. Spring-Gaus generates a synthetic dataset of elastic objects and collects a real-world dataset containing both static and dynamic scenes. The synthetic data contains 30 frames in each of 10 viewpoints. While the real-world data only contains 3 viewpoints for each object in the dynamic scene, it captures 50-70 images from various viewpoints for the static scene. Moreover, we follow previous works [12; 6] and use the off-the-shelf matting  or segmentation  techniques to obtain object masks.

**Baselines**. For dynamic reconstruction, we compare with PAC-NeRF and the current state-of-the-art deformable 3D Gaussian method DefGS  on the PAC-NeRF synthetic dataset. More comparison of our dynamic 3D Gaussian pipeline on other widely-used datasets such as D-NeRF  is presented in Appendix A.1.3. For system identification, we employ PAC-NeRF as the baseline and evaluate the performance using the two datasets introduced in PAC-NeRF. To further demonstrate the precision of the proposed method in terms of geometry recovery and future prediction, we perform experiments on the Spring-Gaus synthetic dataset and compare the results with PAC-NeRF and Spring-Gaus.

**Metrics**. The evaluation metrics in the experiments include 1) Chamfer Distance (CD), with units expressed in \(10^{3}mm^{2}\); 2) Earth Mover's Distance (EMD); 3) Peak Signal-to-Noise Ratio (PSNR); 4) Structural Similarity Index Metric (SSIM) ; and 5) Mean Absolute Error (MAE), with values scaled by a factor of \(100\). The first two metrics are used to evaluate discrepancies between the reconstructed and ground-truth point clouds. PSNR and SSIM are leveraged on the Spring-Gaus dataset to validate the precision of future state prediction. We compute the mean absolute error for the evaluation of physical property estimation.

### Evaluation on PAC-NeRF Synthetic Dataset

**Comparison on dynamic reconstruction**. In this experiment, we first perform dynamic Gaussian reconstruction on the cross-shaped object dataset using DefGS and our proposed method, respectively. We then employ the same filling strategy on the reconstructed Gaussians at each time state to generate the continuum, which is regarded as the final recovered geometry of the object and used to make comparisons with the oracle shape to compute CD and EMD. Since PAC-NeRF jointly recovers both geometries and physical parameters, we use the final estimated results to generate the trajectory for evaluation.

The results, reported in Tab. 1, show that our method outperforms the baselines on both metrics and achieves more precise reconstruction performance on most objects. Specifically, we find thatthe NeRF representation used by PAC-NeRF usually leads to overly large shape generation. While DefGS performs well on elastic objects, its performance degenerates when modeling objects with large deformations, such as granular media and fluids. Our method can better handle these objects due to the flexibility of trajectory representation.

**Comparison on system identification**. We evaluate the performance of system identification of the two datasets proposed by PAC-NeRF. For the first dataset, we compute the MAE of the parameters for each type of object. To demonstrate the effectiveness of the 2D shape representation, we also conduct experiments on the second dataset by only using masks for supervision on our method, namely "Ours*". For the second dataset, we execute 10 times of our method with different random seeds for each object instance and report the mean value of the estimation results. The training details are illustrated in Appendix A.3.

The results, reported in Tab. 2 and Tab. 3, show that the proposed hybrid pipeline can achieve more accurate estimation over a wide range of entries and objects, which demonstrate the effectiveness of the geometry-aware guidance. Fig. 4 visualizes the RGB images rendered by PAC-NeRF and the masks rendered by our method. We can see that when large deformation occurs, the rendered RGB image becomes distorted, while the rendered mask can effectively reduce such effect and get better perfor

   } &  &  \\   & PAC-NeRF  & DefGS  & Ours & PAC-NeRF  & DefGS  & Ours \\   & 0.277 & 0.269 & **0.243** & 0.027 & 0.027 & **0.025** \\  & 0.236 & 0.216 & **0.195** & 0.025 & 0.024 & **0.022** \\  & 0.238 & 0.191 & **0.178** & 0.025 & 0.022 & **0.02** \\  & 0.429 & 0.213 & **0.196** & 0.029 & 0.024 & **0.022** \\  & **0.212** & 0.281 & 0.25 & 0.025 & 0.028 & **0.025** \\  & 0.278 & 0.234 & **0.212** & 0.026 & 0.025 & **0.023** \\   

Table 1: Dynamic Reconstruction on PAC-NeRF Dataset

   } & Parameters & PAC-NeRF & Ours* & Ours \\   & \(_{10}()\) & 11.6\(\)6.60 & 1.53\(\)1.45 & **1.53\(\)**1.31 \\  & \(_{10}()\) & 16.7\(\)5.37 & 16.0\(\)22.4 & **14.8\(\)**19.2 \\  & \(v\) & 0.86\(\)1.45 & 0.20\(\)0.08 & **0.20\(\)**0.07 \\   & \(_{10}()\) & 24.1\(\)21.9 & 32.9\(\)44.6 & **13.5\(\)**18.2 \\  & \(_{10}()\) & 44.0\(\)26.3 & 17.7\(\)20.2 & **12.9\(\)**16.8 \\  & \(_{10}(_{})\) & 5.09\(\)7.41 & **3.74\(\)**3.72 & 4.80\(\)3.92 \\  & \(_{10}()\) & **28.7\(\)**23.3 & 34.9\(\)24.1 & 40.7\(\)24.6 \\  & \(v\) & 0.29\(\)0.13 & 0.68\(\)0.28 & **0.19\(\)**0.09 \\   & \(_{10}(E)\) & 3.02\(\)3.72 & 3.27\(\)4.13 & **2.43\(\)**3.29 \\  & \(\) & 4.35\(\)5.08 & 3.10\(\)2.00 & **2.52\(\)**2.03 \\  & \(v\) & **0.50\(\)**0.23 & 0.78\(\)0.26 & 0.82\(\)0.32 \\   & \(_{10}(E)\) & 83.8\(\)68.4 & 28.1\(\)24.4 & **25.6\(\)**29.4 \\  & \(_{10}(_{})\) & 11.2\(\)14.5 & **1.24\(\)**0.90 & 1.67\(\)1.21 \\  & \(\) & 18.9\(\)15.7 & 10.2\(\)5.34 & **9.59\(\)**5.00 \\  & \(v\) & 0.56\(\)0.17 & **0.13\(\)**0.04 & 0.22\(\)0.10 \\   & \(_{fric}\) & 4.89\(\)1.10 & 4.21\(\)0.08 & **4.18\(\)**0.52 \\  & \(v\) & 0.21\(\)0.08 & 0.24\(\)0.08 & **0.17\(\)**0.05 \\   

Table 2: System identification performance on PAC-NeRF cross-shaped object Dataset

Figure 4: Comparison between rendered and ground-truth images. (a) Rendered RGB images by PAC-NeRF. (b) Rendered masks by our method. (c)-(d) Ground-truth RGB images and masks. The mask-based supervision can introduce fewer discrepancies compared with the RGB-based guidance when the estimated shapes are correct.

[MISSING_PAGE_FAIL:9]

static scene, 2) transform the static Gaussian set to the initial state of the dynamic scene based on a registration network similar as iNeRF [6; 59], and 3) perform system identification from the dynamic observation by our method "Ours*" due to the lack of sufficient images for dynamic reconstruction. Subsequently, we establish robotic platforms in both simulated and real-world environments, each equipped with UR10 robot arms configured identically. We then execute grasp attempts on both the reconstructed objects with the estimated properties in the simulation and the corresponding real-world objects under the same configuration. The results of more objects, and more details about the training and the experiment setting are presented in Appendix A.5. From the results shown in Fig. 5, we see that our method demonstrates its capability to effectively model the deformation experienced by the objects upon impact with a surface. Furthermore, by applying identical gripper forces to both the simulated and real-world versions of the objects, we observe similar deformation behaviors. This consistency in deformation under identical conditions supports that the estimated physical parameters closely mirror the real-world properties of the objects.

## 6 Conclusion and Limitations

This paper proposes a novel solution that leverages the 3D Gaussian representation of objects to acquire explicit shapes while concurrently enabling the simulated continuum to render 2D shapes to facilitate the estimation of physical properties. A novel motion-factorized dynamic 3D Gaussian framework is proposed to reconstruct precise dynamic scenes. Object surfaces and Gaussian-informed continuum are obtained by utilizing the proposed coarse-to-fine density field generation strategy. Extensive experiments demonstrate the efficacy and applicability of our method.

Despite the performance we achieve, this method still suffers from limitations, such as the assumption of continuum mechanics, the requirements of multi-view images with known camera poses, and the need for prior knowledge of object constitutive models. Integrating the pose-free method  or generalized constitutive  model with our method will be an interesting direction for future work.

From the perspective of application, while this method can yield accurate estimations, it may pose risks for fragile objects, as the interaction required for property inference could potentially cause damage. Moreover, the computational demands of our framework are substantial which require at least 1.5 hours to simultaneously recover both the geometry and physical properties of each object. Future work could explore leveraging multi-model large language models  and large reconstruction models [63; 64; 65; 66] to facilitate the recovery process.

## 7 Acknowledgements

This research was supported by the Research Grant Council of the Hong Kong Special Administrative Region under grant number 16212623. We thank Licheng Zhong for providing us with details about real data collection and links for purchasing objects for real-world experiments.

Figure 5: Real-world application. Left: Identification and future state simulation. Right: Grasping simulation. The stress on the simulated object is indicated by blue (low) to red (high). The gripper widths from top to bottom are set to 6cm, 4.5cm, and 3.5cm, respectively.