# Offline Behavior Distillation

Shiye Lei

School of Computer Science

The University of Sydney

shiye.lei@sydney.edu.au &Sen Zhang

School of Computer Science

The University of Sydney

sen.zhang@sydney.edu.au &Dacheng Tao

College of Computing & Data Science

Nanyang Technological University

dacheng.tao@ntu.edu.sg

###### Abstract

Massive reinforcement learning (RL) data are typically collected to train policies offline without the need for interactions, but the large data volume can cause training inefficiencies. To tackle this issue, we formulate offline behavior distillation (OBD), which synthesizes limited expert behavioral data from sub-optimal RL data, enabling rapid policy learning. We propose two naive OBD objectives, DBC and PBC, which measure distillation performance via the decision difference between policies trained on distilled data and either offline data or a near-expert policy. Due to intractable bi-level optimization, the OBD objective is difficult to minimize to small values, which deteriorates PBC by its distillation performance guarantee with quadratic discount complexity \((1/(1-)^{2})\). We theoretically establish the equivalence between the policy performance and action-value weighted decision difference, and introduce action-value weighted PBC (Av-PBC) as a more effective OBD objective. By optimizing the weighted decision difference, Av-PBC achieves a superior distillation guarantee with linear discount complexity \((1/(1-))\). Extensive experiments on multiple D4RL datasets reveal that Av-PBC offers significant improvements in OBD performance, fast distillation convergence speed, and robust cross-architecture/optimizer generalization. The code is available at https://github.com/LeavesLei/OBD.

## 1 Introduction

Due to the costs and dangers associated with interactions in reinforcement learning (RL), learning policies from pre-collected RL data has become increasingly popular . Consequently, numerous offline RL datasets have been constructed . However, these offline data are typically massive and collected by sub-optimal or even random policies, leading to inefficiencies in policy training. Inspired by dataset distillation (DD) , which synthesizes a small number of training images while preserving model training effects, we further investigate the following question: _Can we distill vast sub-optimal RL data into limited expert behavioral data?_ Achieving this would enable rapid offline policy learning via behavioral cloning (BC) , which can (1) reduce the training cost and enable green AI; (2) facilitate downstream tasks by using distilled data as prior knowledge (_e.g._ continual RL , multi-task RL , efficient policy pretraining , offline-to-online fine-tuning ); and (3) protect data privacy .

Unlike DD whose objective is prediction accuracy and directly obtainable from real data, the policy performance in RL is measured by the expected return through interactions with environment. In anoffline paradigm, where direct interaction with environment is not possible, a metric based on RL data is necessary to guide the RL data distillation. Therefore, we formalize the offline behavior distillation (OBD): a limited set of behavioral data, comprising (state, action) pairs, is synthesized from sub-optimal RL data, so that policies trained on the compact synthetic dataset by BC can achieve small OBD objective loss, which incarnates high return when deploying policies in the environment.

The key obstacle for OBD is constructing a proper objective that efficiently and accurately estimates the policy performance based on the sub-optimal offline dataset, allowing for a rational evaluation of the distilled data. To this end, data-based BC (DBC) and policy-based BC (PBC) present two naive OBD objectives. Specifically, DBC reflects the policy performance by measuring the mismatch between the policy decision and vanilla offline data. Leveraging existing offline RL algorithms that can extract near-optimal policies from sub-optimal data (Levine et al., 2020), PBC improves upon DBC by correcting actions in offline data using a near-optimal policy before measuring the decision difference. However, due to the complex bi-level optimization in OBD, the objectives are difficult to minimize effectively, resulting in an inferior distillation performance guarantee with the _quadratic_ discount complexity \((1/(1-)^{2})\) for PBC (Theorem 1). We tackle this problem and propose the action-value weighted PBC (Av-PBC) as the OBD objective with superior distillation guarantee by taking inspirations from our theoretical findings. Concretely, we theoretically prove the equivalence between the policy performance gap and the action-value weighted decision difference (Theorem 2). Then, by optimizing the weighted decision difference, we can obtain a much tighter distillation performance guarantee with _linear_ discount complexity \((1/(1-))\) (Corollary 1). Consequently, we weigh PBC with the simple action value, introducing Av-PBC as the OBD objective.

Extensive experiments on nine datasets of D4RL benchmark (Fu et al., 2020) with multiple environments and data qualities illustrate that our Av-PBC remarkably promotes the OBD performance, which is measured by normalized return, by \(82.8\%\) and \(25.7\%\) compared to baselines of DBC and PBC, respectively. Moreover, Av-PBC has a significant convergence speed and requires only a quarter of distillation steps compared to DBC and PBC. By evaluating the synthetic data in terms of different network architectures and training optimizers, we show that distilled datasets possess decent cross-architecture/optimizer performance. Apart from evaluations on single policy, we also investigate policy ensemble performance by training multiple policies on the synthetic dataset and combining them to generate actions. The empirical findings demonstrate that the ensemble operation can significantly enhance the performance of policies trained on Av-PBC-distilled data by \(25.8\%\).

Our contributions can be summarized as:

* We formulate the offline behavior distillation problem, and present two naive OBD objectives of DBC and the improved PBC;
* We demonstrate the unpleasant distillation performance guarantee of \((1/(1-)^{2})\) for PBC, and theoretically derive a novel objective of Av-PBC that has much tighter performance guarantee of \((1/(1-))\);
* Extensive experiments on multiple offline RL datasets verify significant improvements on OBD performance and speed by Av-PBC.

## 2 Related works

Offline RLData collection can be both hazardous (_e.g._ autonomous driving) and costly (_e.g._ healthcare) with the online learning paradigm of RL. To alleviate the online interaction, offline RL has been developed to learn the policy from a pre-collected dataset gathered by sub-optimal behavior policies (Lange et al., 2012; Fu et al., 2020). However, the offline paradigm limits exploration and results in the distributional shift problem: (1) the state distribution discrepancy between learned policy and behavior policy at test time; and (2) only in-dataset state transitions are sampled when conducting Bellman backup (Bellman, 1966) during the training period (Levine et al., 2020). Various offline RL algorithms have been proposed to mitigate the distributional shift problem. Fujimoto and Gu (2021); Tarasov et al. (2024) introduce policy constrain that control the discrepancy between learned policy and behavior policy. To address the problem of over-optimistic estimation on out-of-distribution actions, Kumar et al. (2020); Nakamoto et al. (2023); Kostrikov et al. (2022) propose to regularize the learned value function for conservative Q learning. Moreover, ensemble approaches have also proven effective in offline RL (An et al., 2021). Readers can refer to (Tarasov et al., 2022) for a detailed comparison of offline RL methods. Albeit these advancements, the offline dataset is extremely large (million-level) and contains sensitive information (_e.g._ medical history) (Qiao and Wang, 2023), necessitating consideration of training efficiency, data storage, and privacy concerns. To address these issues, we distill a small behavioural dataset from vast subpar offline RL data to enable efficient policy learning via BC.

Dataset DistillationGiven the resource constraints in era of big data, numerous approaches have focused on improving learning efficiency through memory-efficient model (Han et al., 2016; Jing et al., 2021) and effective data utilization (Mirzasoleiman et al., 2020; Jing et al., 2023; Lei et al., 2023). Recently, dataset distillation (DD) has emerged as a promising technique for condensing large real datasets into significantly smaller synthetic ones, such that models trained on these tiny synthetic datasets achieve comparable generalization performance to those trained on large original datasets (Sachdeva and McAuley, 2023; Yu et al., 2024; Lei and Tao, 2024). This approach addresses key issues such as training inefficiency, data storage limitations, and data privacy concerns. There are two primary frameworks for DD: the meta-learning framework, which formulates dataset distillation as a bi-level optimization problem (Wang et al., 2018; Deng and Russakovsky, 2022), and the matching framework, which matches the synthetic and real datasets in terms of gradient (Zhao et al., 2021; Zhao and Bilen, 2021), feature (Zhao and Bilen, 2023; Wang et al., 2022), or training trajectory (Cazenavette et al., 2022; Cui et al., 2023).

While most DD methods focus on image data, Lupu et al. (2024) propose behavior distillation (BD), extending DD to online RL regime. In (online) BD, a small number of state-action pairs are synthesized for fast BC training by (1) directly computing policy returns through online interactions; and (2) estimating the meta-gradient _w.r.t._ synthetic data via evolution strategies (ES) (Salimans et al., 2017). We underline that our OBD is not an extension of online BD, but rather a novel and parallel field because of different objectives that incur distinct challenges: (1) online BD uses the ground truth objective, _i.e._, policy return, by sampling many long episodes from environments. As a result, backpropagating the meta-gradient of return _w.r.t._ synthetic data is extremely inefficient, and Lupu et al. (2024) tackle the challenge by estimating meta-gradient with the zero-order algorithm of ES; and (2) OBD objective solely relies on offline data instead of long episode sampling, thereby making meta-gradient backpropagation relatively efficient and feasible, and the primary obstacle for OBD lies in designing an appropriate objective that accurately reflects the policy performance.

## 3 Preliminaries

Reinforcement LearningThe problem of reinforcement learning can be described as the Markov decision process (MDP) \(,,,r,,d^{0}\), where \(\) is a set of states \(s\), \(\) is the set of actions \(a\), \((s^{}|s,a)\) denotes the transition probability function, \(r(s,a)\) is the reward function, \((0,1)\) is the discount factor, and \(d^{0}(s)\) is the initial state distribution (Sutton and Barto, 2018). We assume that the reward function is bounded by \(R_{}\), _i.e._, \(r(s,a)[0,R_{}]\) for all \((s,a)\). The objective of RL is to learn a policy \((a|s)\) that maximizes the long-term expected return \(J()=_{}[_{t=0}^{}^{t}r_{t}]\), where \(r_{t}=r(s_{t},a_{t})\) is the reward at \(t\)-step, and \(\) usually is close to \(1\) to consider long-horizon rewards in the most RL tasks. We define \(d^{t}_{}(s)=(s_{t}=s;)\) and \(^{t}_{}(s,a)=(s_{t}=s,a_{t}=a;)\) as \(t\)-th step state distribution and state-action distribution, respectively. Then, the discounted stationary state distribution \(d_{}(s)=(1-)_{t=0}^{}^{t}d^{t}_{}(s)\), and the discounted stationary state-action distribution \(_{}(s,a)=(1-)_{t=0}^{}^{t}^{t}_{}(s,a)\). Intuitively, the state (state-action) distribution depicts the overall "frequency" of visiting a state (state-action) with \(\). The action-value function of \(\) is \(q_{}(s,a)=_{}[_{t=0}^{}^{t}r_{t} s_ {0}=s,a_{0}=a]\), which is the expected return starting from \(s\), taking the action \(a\). Since \(r_{t} 0\), we have \(q_{}(s,a) 0\) for all \((s,a)\).

Instead of interacting with the environment, offline RL learns the policy from a sub-optimal offline dataset \(_{}=\{(s_{i},a_{i},s^{}_{i},r_{i})\}_{i=1}^{N_{ }}\) with specially designed Bellman backup (Levine et al., 2020). Although \(_{}\) is normally collected by sub-optimal behavior policies, offline RL algorithms can recapitulate a near-optimal policy \(^{*}\) and value function \(q_{^{*}}\) from \(_{}\).

Behavioral Cloning (Pomerleau, 1991) can be regarded as a special offline RL algorithm and only copes with high-quality data. Given the expert demonstrations \(_{}=\{(s_{i},a_{i})\}_{i=1}^{N_{}}\), the policy network \(_{}\) parameterized by \(\) is trained by cloning the behavior of the expert dataset \(_{}\) in a supervised manner: \(_{}_{}(,_{}) _{(s,a)_{}}[(_{}(a|s )-^{*}(a|s))^{2}]\), where \(^{N_{}}\{|s_{i}=s_{i},a_{i}=a.\}}{ _{i=1}^{N_{}}\|(s_{i}=s).}\) is an empirical estimation based on \(_{}\). Compared to general offline RL algorithms that deal with subpar \(4\)-tuples of \(_{}\), BC only handles expert \(2\)-tuples, while it has better convergence speed due to the supervised paradigm. This paper aims to distill massive sub-optimal 4-tuples into a few expert 2-tuples, thereby enabling rapid policy learning via BC.

### Problem Setup

We first introduce behavior distillation (Lupu et al., 2024) that aims to synthesize few data points \(=_{}=\{(s_{i},a_{i})\} _{i=1}^{N_{}}\) with small \(N_{}\) from the environment, so the policy trained on \(_{}\) has a large expected return \(J\). The problem of behavior distillation can be formalized as follows:

\[_{}^{*}=_{}J(_{( )})()=_{ }_{}(,).\] (1)

During behavior distillation, the return \(J\) is directly estimated by the interaction between policy and environment. However, in the offline setting, the environment can not be touched, and only the previously collected dataset \(_{}\) is provided. Hence, we employ \((_{},_{})\) as a surrogate loss to estimate the policy performance of \(_{}\) given the offline data \(_{}\) without interactions with the environment. Then, by setting \(N_{} N_{}\), _offline behavior distillation_ can be formulated as below:

\[_{}^{*}=_{}(_{ ()},_{}) ()=_{}_{}(,).\] (2)

### Backpropagation through Time

The formulation of offline behavior distillation is a bi-level optimization problem: the inner loop optimizes the policy network parameters based on the synthetic dataset with BC by multiple iterations of \(\{_{1},_{2},,_{T}\}\). During the outer loop iteration, synthetic data are updated by minimizing the surrogate loss \(\). With the nested loop, the synthetic dataset gradually converges to one of the optima. This bi-level optimization can be solved by backpropagation through time (BPT) (Werbos, 1990):

\[_{}=}{}=}{^{(T)}}(_{k=0}^{k=T} }{^{(k)}}}{}),}{ ^{(k)}}=_{i=k+1}^{T}}{ ^{(i-1)}}.\] (3)

Although BPTT provides a feasible solution to compute the meta-gradient for OBD, the objective \(H\) is hardly minimized to near zero in practice owing to the severe complexity and non-convexity of bi-level optimization (Wiesemann et al., 2013).

## 4 Methods

The key challenge in OBD is _determining an appropriate objective loss \((_{},_{})\) to estimate the performance of \(_{}\)_. While policy performance could be naturally estimated using episode return by learning a MDP environment from \(_{}\), as done in model-based offline RL (Kidambi et al., 2020), this approach is computationally expensive. Apart from the considerable time required to sample the episode for evaluation, the corresponding gradient computation is also inefficient: although Policy Gradient Theorem \(=_{s}d_{}(s)_{a}q_{}(s,a)_ {}_{}(a|s)\) provides a way to compute meta-gradients (Sutton and Barto, 2018), the gradient estimation often exhibits high variance due to the lack of information _w.r.t._\(d_{}(s)\) and \(q_{}(s,a)\).

### Data-based and Policy-based BC

Compared to both sampling and gradient computation inefficiency of policy return, directly using \(_{}\) is a more feasible way to estimate the policy performance in OBD, and a natural option is BC loss, _i.e._, \((_{},_{})=_{}( ,_{})\), which we refer to as **data-based BC (DBC)**. However, as \(_{}\) is collected by sub-optimal policies, DBC hardly evaluates the policy performance accurately.

Benefiting from offline RL algorithms, we can extract the near-optimal policy \(^{*}\) and corresponding value function \(q_{^{*}}\) from \(_{}\) via carefully designed Bellman updates. Consequently, a more rational choice is to correct actions in \(_{}\) with \(^{*}\), leading to \((,_{})=_{s_{ }}[D_{}(^{*}(|s),(|s))]\), where \(D_{}(^{*}( s),( s))=_ {a}[|^{*}(a|s)-(a|s)|]\) is the total variation (TV) distance that measures the decision difference between \(^{*}\) and \(\) at state \(s\), and we term this metric as **policy-based BC (PBC)**. With the exemplar \(^{*}\), offline behavior distillation performance \(J()\), where \(\) is trained on \(_{}\), can be guaranteed by the following theorem.

**Theorem 1** (Theorem 1 in (Xu et al., 2020)).: _Given two policies of \(^{*}\) and \(\) with \(_{s d_{^{*}}(s)}[D_{}(^{*}(|s), (|s))]\), we have \(|J(^{*})-J()|}}{(1-)^{2}}\)._

**Remark 1**.: _The proof of Theorem 1 does not necessitate that \(^{*}\) is superior to \(\), and thus substituting \(s d_{^{*}}(s)\) in \(_{s d_{^{*}}(s)}[D_{}(^{*}(|s), (|s))]\) with \(s d_{}(s)\) does not alter the outcome._

Theorem 1 elucidates that \(\) has close performance to the good policy \(^{*}\) as long as they act similarly, and \(J() J(^{*})\) if their decision difference \(D_{}(^{*}( s),( s)) 0\). This is optimistic for the conventional BC setting where the loss can be easily optimized to near zero. However, because of intractable bi-level optimization, the empirical objective \(\) is rarely decreased to small values in OBD. According to (Xu et al., 2020), the upper bound in Theorem 1 is tight as quadratic discount complexity \((1/(1-)^{2})\) is inevitable in the worst-case, implying that the distillation performance guarantee collapses quickly as the PBC objective increases. To this end, a more effective OBD objective should be considered to ensure stronger distillation guarantees.

### Action-value weighted PBC

The preceding analysis highlights the inferior distillation guarantee of \((1/(1-)^{2})\) with PBC. To establish a superior OBD objective, we prove the equivalence between the performance gap of \(J(^{*})-J()\) and action-value weighted \(^{*}(a|s)-(a|s)\) (Theorem 2). By optimizing the weighted decision difference, the performance gap can be non-vacuously bounded with a reduced discount complexity of \((1/(1-))\) (Corollary 1). Motivated by these theoretical insights, we propose action-value weighted PBC as the OBD objective for a tighter distillation performance guarantee.

**Theorem 2**.: _For any two policies \(\) and \(^{*}\), we have_

\[J(^{*})-J()=_{s d_{}(s)}[q_{^ {*}}(s,)(^{*}(|s)-(|s ))],\] (4)

_where the dot notation \(()\) is a summation over the action space, i.e., \(q_{^{*}}(s,)(^{*}(|s)-( |s))=_{a}q_{^{*}}(s,a)( ^{*}(a|s)-(a|s))\)._

Proof Sketch.(1) With RL definitions, we represent \(J(^{*})-J()\) by

\[J(^{*})-J()=_{s d_{^{*}}^{}(s)}[q_{^{ *}}(s,)(^{*}(|s)-(|s))]+ _{_{}^{}(s,a)}[q_{^{*}}(s,a)-q _{}(s,a)];\]

(2) then we prove the iterative formula _w.r.t._\(_{_{}^{}(s,a)}[q_{^{*}}(s,a)-q _{}(s,a)]\):

\[_{_{}^{}(s,a)}[q_{^{*}}(s,a)-q_{}(s,a)]\] \[= _{s d_{}^{}(s)}[q_{^{ *}}(s,)(^{*}(|s)-(|s))]+ _{_{}^{}(s,a)}[q_{^{*}}(s,a )-q_{}(s,a)];\]

(3) integrating the two equations above yields the desired result

\[J(^{*})-J()=_{t=0}^{}^{t}_{s d_{}^{ }(s)}[q_{^{*}}(s,)(^{*}(|s)- (|s))].\]

The complete proof can be found in Appendix A.1. Since \(q_{^{*}}(s,a)\)_represents the expected return under the decent policy \(^{*}\) when staring from \((s,a)\) and reaches the maximum if \(^{*}\) is truly optimal, it can be interpreted as the importance of \((s,a)\), and higher return is likely to be achieved when starting from more important \((s,a)\)._ Consequently, the gap between \(J(^{*})\) and \(J()\) directly depends on the importance-weighted decision difference between \(^{*}\) and \(\). Based on Theorem 2 and \(q_{^{*}} 0\), we can readily derive a bound on the guarantee on \(|J(^{*})-J()|\) by applying the triangle inequality.

**Corollary 1**.: _Given two policies of \(^{*}\) and \(\) with \(_{s d_{}(s)}[q_{^{*}}(s,)|^{*} (|s)-(|s)|]\), we have \(|J(^{*})-J()|\)._

TightnessSince only the triangle inequality is applied, there exists the worst case for \(\) where \(^{*}(a|s)-(a|s)<0\) holds only when \(q_{^{*}}(s,a)=0\). This makes the inequality collapse to equality in Corollary 1, thereby demonstrating that the upper bound in Corollary 1 is _non-vacuous_.

Comparison to Thm. 1With the fact \(q_{^{*}}(s,a)_{t=0}^{}R_{}=}{1-}\), we have

\[_{s d_{}(s)}[q_{^{*}}(s,)|^{*}( |s)-(|s)]}{1-}_{s d_{}(s )}[|^{*}(|s)-(|s)|],\] (5)

therefore our bound in Corollary 1 is significantly tighter than Theorem 1, as \(q_{^{*}}(s,a)=_{t=0}^{}R_{}\) requires \(^{*}\) to achieve the maximum reward at every step. This condition is particularly difficult for sparse-reward environments where most \(r(s,a)\) are close to zero. Moreover, combining the proof of Theorem 2 and Eq. 5 provides a more straightforward proof of Theorem 1.

As shown by the theoretical analysis, action-value weighted objective offers stronger distillation guarantees due to the linear discount factor complexity \((1/(1-))\). This improvement alleviates the loose guarantee caused by limited optimization in OBD compared to former quadratic \((1/(1-)^{2})\). Accordingly, we propose **action-value weighted PBC (Av-PBC)** as the OBD objective:

\[(,_{})=_{s_{ }}[q_{^{*}}(s,)((|s)-^{*} (|s))^{2}].\] (6)

While Av-PBC is theoretically induced, it is quite intuitive to understand: states \(s\) in \(_{}\) are normally sampled by a mixture of policies instead of the expert \(^{*}\). If we sampled a bad state \(s\) with extremely small \(q_{^{*}}(s,a)\), measuring the decision difference between \(\) and \(^{*}\) will be less important. As for practical implementation, Eq. 6 requires summing over the entire action space \(\) to compute \(_{a}\), which is highly inefficient for large \(||\). Considering the expert policy is typically highly concentrated, _i.e._, only a few actions are selected by \(^{*}\) with large action values, we instead sample \(a^{*}(|s)\) to efficiently estimate Eq. 6. The pseudo-code of Av-PBC is presented in Algorithm 1.

``` Input :offline RL dataset \(_{}\), synthetic data size \(N_{}\), loop step \(T\), \(T_{}\), learning rate \(_{0}\), \(_{1}\), momentum rate \(_{0}\), \(_{1}\) Output :synthetic dataset \(_{}\) \(^{*},q_{^{*}}(_{})\)  Initialize \(_{}=\{(s_{i},a_{i})\}_{i=1}^{N_{ }}\) by randomly sampling \((s_{i},a_{i})_{}\) for\(t_{}=1\)to\(T_{}\)do  Randomly initialize policy network parameters \(_{0}\) \(\) Behavioral cloning with synthetic data. for\(t=1\)to\(T\)do  Compute the BC loss w.r.t.  synthetic data \(_{t-1}=_{}(_{t-1},_{})\)  Update \(_{t}(_{_{t-1}}_{t-1},_{0},_{0})\)  end for  Construct the minibatch \(=\{(s_{i},a_{i})\}_{i=1}^{||}\) by sampling \(s_{i}_{}\) and \(a_{i}^{*}(|s_{i})\)  Compute \((_{_{T}},)=|}_{i=1}^{| |}q_{^{*}}(s_{i},a_{i})(_{_{T}}(a_{i}|s_{i} )-^{*}(a_{i}|s_{i}))^{2}\)  Update \(_{}(_{_ {}}(_{_{T}},),_{1},_{1})\)  end for ```

**Algorithm 1**Action-value weighted PBC

## 5 Experiments

In this section, we evaluate the proposed ODB algorithms across multiple offline RL datasets from perspectives of (1) distillation performance, (2) distillation convergence speed, (3) cross-architecture and cross-optimizer generalization, and (4) policy ensemble performance _w.r.t._ distilled data.

DatasetsWe conduct offline behavior distillation on D4RL (Fu et al., 2020), a widely used offline RL benchmark. Specifically, OBD algorithms are evaluated on three popular environments of Halfcheetah, Hopper, and Walker2D. For each environment, three offline RL datasets of varying quality are provided by D4RL, _i.e._, medium-replay (M-R), medium (M), and medium-expert (M-E) datasets. Thus, a total of \(3 3=9\) datasets are employed to assess OBD algorithms. medium dataset is collected from the environment with "medium" level policies; medium-replay dataset consists of recording all samples in the replay buffer observed during training this "medium" level policy; and medium-expert dataset is a mixture of expert demonstrations and sub-optimal data.

SetupThe advanced offline RL algorithm of Cal-QL (Nakamoto et al., 2023) is utilized to extract the decent \(^{*}\) and \(q_{^{*}}\) from \(_{}\). A four-layer MLP serves as the default architecture for policy networks. The size of synthetic data \(N_{}\) is set to \(256\). Standard SGD is employed in both inner and outer optimization, and learning rates \(_{0}=0.1\) and \(_{1}=0.1\) for the inner and outer loop, respectively, and corresponding momentum rates \(_{0}=0\) and \(_{1}=0.9\). Additional implementation details are provided in Appendix B.

EvaluationTo accesss the performance of \(_{}\), we train policy networks on \(_{}\) with standard BC, and obtain the corresponding averaged return by interacting with the environment for \(10\) episodes. We use normalized return(Fu et al., 2020) for better visualization: normalized return\(=100\), where random return and expert return refer to returns of random policies and the expert policy (online SAC (Haarnoja et al., 2018)), respectively.

Baselines(1) _Random Selection_: randomly selecting \(N_{}\) real state-action pairs from \(_{}\); (2) _DBC_; (3) _PBC_; (4) _Av-PBC_. We also report policy performance of behavioral cloning and Cal-QL in terms of training on the whole offline dataset \(_{}\) for a comprehensive comparison.

### Main Results

We first investigate the performance of various OBD algorithms (DBC, PBC, Av-PBC) across offline datasets of varying quality and environments, as detailed in Table 1. Several observations are obtained from the results: (1) offline behavior distillation effectively synthesize informative data that enhance policy training (DBC/PBC/Av-PBC _vs._ Random Selection); (2) PBC demonstrates better distillation performance than the basic DBC, especially given the low-quality RL data, highlighting the benefit of action correction in the sub-optimal data (\(30.4\)_vs._\(20.9\)); (3) Av-PBC considerably outperforms PBC across all datasets (\(38.2\)_vs._\(30.4\)); (4) when the offline data are collected by low-quality policies (medium-replay), Av-PBC can surpass BC trained on the whole data, while it gradually lags behind BC with higher-quality offline data (medium-replay and medium-expert); (5) given that the objective of OBD is to approximate the decent policy extracted by offline RL algorithms, offline RL serves as an upper bound for OBD performance. In summary, the empirical results show that Av-PBC increases OBD performance by a substantial margin compared to the baselines (\(82.8\%\) for DBC and \(25.7\%\) for PBC).

An interesting phenomenon observed with Av-PBC is that _synthetic data distilled from medium-replay offline datasets exhibit better performance than those distilled from medium-expert offline datasets_. We explain here: while medium-expert data offer better quality, medium-replay data contains more diverse states due to being sampled by a mixture of less-trained policies that explore a wider rage of states. This is similar to exploration-exploitation dilemma in RL (Sutton and Barto, 2018) and underscores the importance of state coverage in original data for OBD.

Training Time ComparisonTo further illustrate the advantages of OBD, we compare the time required for training polices on original data versus OBD-distilled data. For synthetic data with a size of \(256\), only \(100\) optimization steps are necessary, corresponding to a training time of \(0.2\)s, while \(25\)k\(\)\(125\)k steps are required for BC on original data. With distilled data, the training time can be reduced by over \(99.5\%\). A detailed list of training steps for all datasets is provided in Appendix C.

    &  &  &  &  \\  & M-R & M & M-E & M-R & M & M-E & M-R & M & M-E \\  Random & \(0.9\) & \(1.8\) & \(2.0\) & \(19.1\) & \(19.2\) & \(11.6\) & \(1.9\) & \(4.9\) & \(6.7\) & \(7.6\) \\ DBC & \(2.5\) & \(28.2\) & \(\) & \(12.1\) & \(\) & \(31.1\) & \(6.1\) & \(29.3\) & \(11.7\) & \(20.9\) \\ PBC & \(19.4\) & \(30.9\) & \(20.5\) & \(35.6\) & \(25.1\) & \(33.4\) & \(41.5\) & \(33.2\) & \(34.0\) & \(30.4\) \\ Av-PBC & \(35.9\) & \(\) & \(22.0\) & \(40.9\) & \(32.5\) & \(\) & \(55.0\) & \(\) & \(\) & \(\) \\  BC (Whole) & \(14.0\) & \(42.3\) & \(59.8\) & \(22.9\) & \(50.2\) & \(51.7\) & \(14.6\) & \(65.9\) & \(89.6\) & \(45.7\) \\ OffRL (Whole) & \(45.8\) & \(47.6\) & \(50.8\) & \(98.0\) & \(56.4\) & \(107.3\) & \(87.4\) & \(84.0\) & \(109.0\) & \(70.1\) \\   

Table 1: Offline behavior distillation performance on D4RL offline datasets. The result for Random Selection (Random) is obtained by repeating \(10\) times. For DBC, PBC, and Av-PBC, the results are averaged across five seeds and the last five evaluation steps. The best OBD result for each dataset is marked with **bold** scores, and orange-colored scores denote instances where OBD outperforms BC.

Convergence Speed of OBDTo compare the convergence speed of OBD algorithms, we plot the performance of various OBD algorithms over distillation step; please see Figure 1. These plots demonstrate that Av-PBC not only improves the OBD performance, but has significant convergence speed and requires only a quarter of the distillation steps compared to DBC and PBC, which is essential for OBD considering the compute-intensive bi-level optimization.

Cross Architecture and Optimizer PerformanceWe evaluate the synthetic data across various training configurations to assess the cross-architecture/optimizer generalization of Av-PBC. Concretely, we employ the data distilled by Av-PBC with the default network (\(4\)-layer MLP) and optimizer (SGD) to train (1) different networks of \(2\)/\(3\)/\(5\)/\(6\)-layer and residual MLPs and (2) the default \(4\)-layer MLP with different optimizers of Adam, AdamW, and SGDm (SGD with momentum=\(0.9\)). The

    & Arch/Opt &  &  &  &  \\  & & M-R & M & M-E & M-R & M & M-E & M-R & M & M-E & \\   OBD \\  } & \(2\)-layer & \(37.1\) & \(35.9\) & \(10.9\) & \(29.9\) & \(26.2\) & \(33.9\) & \(49.2\) & \(41.3\) & \(51.1\) & \(35.1\) (3.1) \\  & \(3\)-layer & \(38.6\) & \(39.7\) & \(19.4\) & \(39.0\) & \(28.1\) & \(41.5\) & \(63.2\) & \(44.1\) & \(55.3\) & \(41.0\) (2.8) \\  & \(5\)-layer & \(36.1\) & \(37.7\) & \(20.0\) & \(37.1\) & \(29.1\) & \(36.6\) & \(52.0\) & \(36.7\) & \(31.6\) & \(35.2\) (3.0) \\  & \(6\)-layer & \(32.1\) & \(36.0\) & \(17.3\) & \(36.9\) & \(29.6\) & \(32.8\) & \(47.1\) & \(28.2\) & \(25.5\) & \(31.7\) (6.5) \\  & Residual & \(36.9\) & \(36.4\) & \(20.0\) & \(38.8\) & \(29.8\) & \(40.3\) & \(47.5\) & \(35.7\) & \(37.1\) & \(35.8\) (2.4) \\   OBD \\  } & Adam & \(35.8\) & \(37.6\) & \(22.9\) & \(40.5\) & \(31.2\) & \(40.2\) & \(55.8\) & \(41.9\) & \(47.7\) & \(39.3\) (1.1) \\  & AdamW & \(36.8\) & \(37.9\) & \(21.4\) & \(40.6\) & \(33.3\) & \(41.1\) & \(55.4\) & \(44.2\) & \(43.2\) & \(39.3\) (1.1) \\  & SGDm & \(36.4\) & \(37.3\) & \(21.8\) & \(40.4\) & \(30.9\) & \(39.2\) & \(54.7\) & \(40.2\) & \(42.1\) & \(38.1\) (0.1) \\   

Table 2: Offline behavior distillation performance across various policy network architectures and optimizers (Optim). Red-colored scores and green-colored scores in brackets denote the performance degradation and improvement, respectively, compared to the default training setting. The results are averaged over five random seeds and the last five evaluation steps.

Figure 1: Plots of OBD performance, represented by the normalized returns of policies trained on synthetic data, as functions of distillation steps on (a) Halfcheetah; (b) Hopper; and (c) Walker2D environment. Each curve is averaged over five random seeds.

results are presented in Table 2. As shown in the last column of average performance, we observe that (1) albeit a slight drop, synthetic data distilled by Av-PBC are still valid in training different policy networks, and (2) the performance of distilled data is relatively robust to the variation of optimizers. Therefore, the Av-PBC-distilled data possess satisfied cross-architecture/optimizer performance.

Policy Ensemble on OBD DataWith the tiny distilled dataset, policy ensemble can be efficiently performed to further enhance policy performance. This is achieved by training multiple policy networks on synthetic data and then combining their outputs to generate actions. To evaluate the performance gain from policy ensemble, we train \(10\) policy networks with different seeds; please see Table 3. The results demonstrate that (1) policies trained on synthetic data can be substantially boosted through ensemble (\(25.8\%\) for Av-PBC); and (2) Av-PBC exhibits a larger performance gain than DBC and PBC (\(9.9\)_vs._\(7.07.3\)), highlighting the advantages of Av-PBC in policy ensemble.

## 6 Discussion

ApplicationsDistilled behavioral data encapsulate critical decision-making knowledge from offline RL data and associated environment, making them highly applicable to various downstream RL tasks. Through BC on distilled data, we can _rapidly pretrain a good policy_ for online RL fine-tuning (Goecks et al., 2019). On the other hand, after offline pretraining, the policy can be further enhanced by online fine-tuning, while there exists _catastrophic forgetting w.r.t._ offline data knowledge during fine-tuning (Luo et al., 2023). To tackle this challenge, Zhao et al. (2022) propose to use BC loss _w.r.t._ offline data as a constraint during the fine-tuning phase. By replacing the massive offline data with distilled data, we can achieve more efficient loss computation and thus better algorithm convergence. A similar approach can be achieved to circumvent catastrophic forgetting in continual offline RL (Gai et al., 2023), where the goal is to learn a sequence of offline RL tasks while retaining good performance across all tasks. Moreover, _multi-task offline RL_(Yu et al., 2021), which learns multiple RL tasks jointly from a combination of specific offline datasets, also receives benefits from OBD in terms of efficiency by alternative training on the mixture of distilled data via BC (Lupu et al., 2024).

Beyond benefits in efficient policy training, OBD shows potential for _protecting data privacy_: given that offline datasets often contain sensitive information, such as medical records, privacy concerns are significant in offline RL due to various privacy attacks on the learned policies (Qiao and Wang, 2023). OBD can enhance privacy preservation by publishing smaller, distilled datasets instead of the full, sensitive data. Besides, distilled behavioral data is also beneficial for _explainable RL_ by highlighting the critical states and corresponding actions. A example of this is provided in Appendix D.

LimitationsThe OBD data are 2-tuples of (state, action) and exclude reward. Thus, the distilled data are solely leveraged by the supervised BC and invalid for conventional RL algorithms with Bellman backup. Despite this deficiency, OBD data can still facilitate the applications above by efficiently injecting high-quality decision-making knowledge into policy networks with BC loss.

We note that two major challenges remain in current OBD algorithms: distillation inefficiency and policy performance degradation. While our Av-PBC substantially decreases the distillation steps, the OBD process is still computationally expensive (\(25\) hours for \(50\)k distillation steps on a single NVIDIA V100 GPU) due to the bi-level optimization involved. Moreover, there remains a notable performance gap between OBD and the whole data with offline RL algorithms (\(38.2\)_vs._\(70.1\) in Table 1). These limitations also shed light on future directions in improving the efficiency of OBD and bridging the gap between synthetic data and the original offline RL dataset.

    &  &  &  &  \\  & M-R & M & M-E & M-R & M & M-E & M-R & M & M-E \\  DBC & \(2.0\) & \(30.0\) & \(31.8\) & \(9.3\) & \(44.9\) & \(43.3\) & \(5.8\) & \(50.6\) & \(33.6\) & \(27.9\) (\(7.0\)) \\ PBC & \(12.9\) & \(33.4\) & \(31.6\) & \(36.6\) & \(36.7\) & \(41.8\) & \(64.1\) & \(41.6\) & \(42.0\) & \(37.9\) (\(7.3\)) \\ Av-PBC & \(39.8\) & \(41.4\) & \(37.2\) & \(39.7\) & \(27.6\) & \(38.8\) & \(75.9\) & \(58.6\) & \(73.7\) & \(48.1\) (\(9.9\)) \\   

Table 3: Offline behavior distillation performance on D4RL offline datasets with ensemble num of \(10\). Green-colored scores in brackets denote the performance improvement compared to the non-ensemble setting. The results are averaged over five random seeds and the last five evaluation steps.

Conclusion

In this paper we integrate the advanced dataset distillation with offline RL data, formalizing the concept of offline behavior distillation (OBD). We introduce two OBD objectives: the naive offline data-based BC (DBC) and its policy-corrected variant, PBC. Through comprehensive theoretical analysis, we demonstrate that PBC offers inferior OBD performance guarantee of \((1/(1-)^{2})\) under complex bi-level optimization, which inevitably incurs significant distillation loss.. To tackle this issue, we theoretically establish the equivalence between policy performance gap and action-value weighted decision difference, leading to the proposal of action-value weighted BC (Av-PBC). This novel Av-PBC objective significantly improves the performance guarantee to \((1/(1-))\). Extensive experiments on multiple offline RL datasets demonstrate that Av-PBC vastly enhances OBD performance and accelerates the distillation process by several times.

## Acknowledge

The authors thank the anonymous reviewers for their helpful comments and feedback. The authors are also grateful to Zhihao Cheng for thoughtful discussions and fruitful comments. Dr Tao is partially supported by NTU RSR and Start Up Grants.