# Graph Neural Networks Need

Cluster-Normalize-Activate Modules

Arseny Skryagin\({}^{1}\) Felix Divo\({}^{1}\) Mohammad Amin Ali\({}^{1}\)

Devendra Singh Dhami\({}^{2}\) Kristian Kersting\({}^{1,3,4,5}\)

\({}^{1}\)AI & ML Group, TU Darmstadt \({}^{2}\)TU Eindhoven \({}^{3}\)Hessian Center for AI (hessian.AI)

\({}^{4}\)German Research Center for AI (DFKI) \({}^{5}\)Centre for Cognitive Science, TU Darmstadt

{arseny.skryagin,felix.divo,kersting}@cs.tu-darmstadt.de

amin.ali@stud.tu-darmstadt.de d.s.dhami@tue.nl

###### Abstract

Graph Neural Networks (GNNs) are non-Euclidean deep learning models for graph-structured data. Despite their successful and diverse applications, oversmoothing prohibits deep architectures due to node features converging to a single fixed point. This severely limits their potential to solve complex tasks. To counteract this tendency, we propose a plug-and-play module consisting of three steps: Cluster \(\) Normalize \(\) Activate (CNA). By applying CNA modules, GNNs search and form super nodes in each layer, which are normalized and activated individually. We demonstrate in node classification and property prediction tasks that CNA significantly improves the accuracy over the state-of-the-art. Particularly, CNA reaches 94.18% and 95.75% accuracy on Cora and CiteSeer, respectively. It further benefits GNNs in regression tasks as well, reducing the mean squared error compared to all baselines. At the same time, GNNs with CNA require substantially fewer learnable parameters than competing architectures.

## 1 Introduction

Graph Neural Networks (GNNs) are a promising approach to leveraging the full extent of the geometric properties of various types of data in many different key domains . For instance, they are used to predict the stability of molecules , aid in drug discovery , recommend new contacts in social networks , identify weak points in electrical power grids , predict traffic volumes in cities , and much more . To solve such tasks, one typically uses message-passing GNNs, where information from nodes is propagated along outgoing edges to their neighbors, where it is aggregated and then projected by a learned non-linear function. Increasing the expressivity of GNNs is crucial to learning more complex relationships and eventually improving their utility in a plethora of applications.

Figure 1: **Evolution of node embeddings for the Cora dataset. The colors indicate the membership of one of the seven target classes.**A natural approach to increasing expressivity is to increase depth, effectively enabling further-reaching and higher-level patterns to be captured. This combats under-reaching, where information cannot propagate far enough. For example, this limits the effective radius of information on road crossings in traffic prediction tasks, where information on specific bottlenecks in road networks cannot propagate to the relevant \(k\)-hop neighbors. In practice, one wants to increase the depth of the employed GNNs. However, this soon triggers a phenomenon called _oversmoothing_, where node features are converging more and more to a common fix-point with an increasing number of layers (NT and Maehara, 2019; Rusch et al., 2023a). For example, in the specific task of node classification, node features of different classes become increasingly overlapping and, thus, essentially indistinguishable. There are many attempts to prevent this issue from occurring. Among them is Gradient-Gating (G\({}^{2}\)), which gates updates to nodes once features start converging (Rusch et al., 2023b). However, G\({}^{2}\) adaptively chokes message passing in each node right before oversmoothing can occur, effectively reducing the functionality of deeper GNN layers to an identity mapping. This idea of adaptively controlling the flow of information in each node is still a very promising approach. But, instead of regulating message passing, we propose learning an adaptive node feature update. We argue that it is crucial to ensure that while the node features are iteratively exchanged, aggregated, and projected, they stay sufficiently different from each other to solve the eventual task, like classification or regression. This has the benefit of maintaining effective information propagation even in deeper layers. Figure 1 visualizes the final node features during training, showing how our method improves the separation of the learned classes over the oversmoothed baseline.

To ensure sufficiently distinct nodes, we present Cluster \(\) Normalize \(\) Activate (CNA) modules,1 specifically designed to improve the expressivity of GNNs:

* Transformation of the node features should be shared and yet differ at the same time. For this reason, our first inductive bias is to assume several groups of nodes with shared properties.
* Stabilization of training in deep architectures, including Transformers (Vaswani et al., 2017), is typically provided by normalization. By employing normalization, CNA effectively maintains beneficial numerical ranges and combats collapse tendencies.
* To preserve distinct representations, the clusters must be transformed individually. By introducing learnable activation functions, we learn separate projections for each of them. This generalizes the typical affine transformation following the normalization to a general learned function that can better adjust to the specific node features.

We use rational Activations (Molina et al., 2019; Delfosse et al., 2024) as powerful yet efficient point-wise non-linearities. The complete procedure is shown in Figure 2.

Figure 2: **CNA replaces the activation function in each iteration of any GNN architecture. When employing classical activations like ReLU to all nodes undifferentiatedly, we observe oversmoothing. With CNA, we cluster the node features and then normalize and project them with a separate learned activation function each, effectively increasing their expressiveness even in deeper networks.**

CNA modules can also be viewed as adding additional hierarchical structure to the problem: By grouping nodes into clusters of similar representations, we effectively introduce super-nodes with different non-linear activation functions. Each of their constituents shares the same activation function yet has distinct node property vectors and neighbors. Moreover, the node features in each super-node are less varied since the members of the clusters share some common characteristics. This divide-and-conquer approach breaks up the challenging task of transforming the node features into many smaller ones.

The presented work introduces the novel CNA modules which limit oversmoothing and thereby improve performance. They allow for many advancements, delivering better performance compared to the state-of-the-art in many tasks and datasets. In summary, we make the following contributions:

1. We introduce the plug-and-play CNA modules for more expressive GNNs and motivate their construction.
2. We show that they empirically allow training much deeper GNNs.
3. Our experiments demonstrate the effectiveness of CNA in diverse node and graph-level classification, node-property prediction, and regression tasks.
4. Lastly, we show that architectures with CNA are parsimonious, achieving better performance than the state-of-the-art with fewer parameters.

We proceed as follows: We next relate our work to the existing research on GNNs and their specific challenges (Section 2). We then describe and discuss our proposed solution CNA (Section 3) and conduct a comprehensive evaluation in different scenarios (Section 4). Finally, we conclude and suggest promising next steps for further improving the expressiveness of GNNs (Section 5).

## 2 Related Work

Machine Learning on Graphs and its Challenges.Machine learning on graphs has a long history, with graph neural networks as their more recent incarnations . Since then, several new models like Graph Convolutional Networks (GCN) , Graph Attention Networks (GAT) , and GraphSAGE  have been proposed. Gilmer et al.  then unified them into the Message Passing Neural Networks (MPNNs) framework, the most common type of GNNs . In addition to the typical machine learning pitfalls like overfitting and computationally demanding hyperparameter optimization, MPNNs pose some specific challenges: _oversquasching_ is the effect of bottlenecks in the graph's topology, limiting the amount of information that can pass through specific nodes . The other widely studied challenge is _oversmoothing_, where the node features converge to a common fixed point with increasing depth of the MPNN . This essentially equates to the layers performing low-pass filtering, which is harmful to solving the problem beyond some point. This phenomenon has also been studied in the context of Transformers , where repeated self-attention acts similarly to an MPNN on a fully connected graph . Different metrics have since been proposed to measure oversmoothing: cosine similarity, Dirichlet energy, and mean average distance (MAD). Rusch et al.  organize the existing mitigation approaches into three main groups. First, as discussed in more detail in the next paragraph, normalization and regularization are beneficial and are also performed by our CNA modules. Second, one can change the propagation dynamics, as done by GraphCON , Gradient Gating , and RevGNN . Finally, residual connections can alleviate some of the effects but cannot entirely overcome them. Solving these challenges is an open task in machine learning on graphs.

Normalization in Deep Learning.In almost all deep learning methods in the many subfields, normalizations have been studied extensively. They are used to improve the training characteristics of neural networks, making them faster to train and better at generalizing . The same applies to GNNs, where normalization plays a key role . However, selecting the correct reference group to normalize jointly is key. For example, a learnable grouping is employed in Deep Group Normalization (DGN), where normalization is performed within each cluster separately . The employed soft clustering of DGN is only of limited suitability to fostering distinct representations of the node features. Instead, we argue that simple hard clustering, for example, provided by the classic \(k\)-means algorithm, is sufficient and more desirable. Zhao and Akoglu (2020) suggest PairNorm, where layerwise normalization ensures a constant total pairwise squared distance of node features. Instead of adjusting the node features against collapse, Caso et al. (2023) rewire the topology based on clusters of node features. For the case of multi-graph datasets, Cai et al. (2021) provide a good overview of existing approaches, and argue that normalization shall be performed per graph.

**Learnable Activation Functions.** Using non-polynomial activation functions is crucial for neural networks to be universal function approximators (Leshno et al., 1993). While most works use rectified-based functions like ReLU, GeLU, SiLU, etc., there are also attempts at learning some limited shape parameters as in PReLU or Swish (Apicella et al., 2021). There has since been further work on learnable activations with reduced flexibility, namely LEAFs (Bodyanskiy and Kostiuk, 2023), a combination of polynomials and exponentials. However, one can even learn the overall shape of the activations, as demonstrated by rational activation functions (Molina et al., 2019; Boulle et al., 2020; Trimmel et al., 2022). They have proven to be very helpful in a diverse set of applications, in particular, due to their inherently high degree of plasticity during training (Delfosse et al., 2024). More importantly, rationals are smoothly differentiable universal function approximators (Molina et al., 2019; Telgarsky, 2017), for which reason we select them as flexible activation functions for CNA. Furthermore, changing the activation function has been found beneficial against oversmooting by Kelesis et al. (2023) too, which increased the slope of the classic ReLU activation to reduce oversmoothing in MPNNs. This further motivates taking a closer look at activations such as done by Khalife and Basu (2024) and in this work.

## 3 Cluster-Normalize-Activate Modules

This section will formally define CNA modules and discuss their design. Adaptive control of the information flow is a promising approach to limit oversmoothing in GNNs. We, therefore, propose learning an adaptive node feature update, ensuring distinct node feature representations during the iterative exchange, aggregation, and projection. This benefits the maintenance of effective information propagation in deeper layers. We start by introducing the notation used throughout this work, proceed to recall message-passing GNNs, and finally highlight the three main components of CNA. The overall module is shown in Figure 3.

**Notation.** We consider undirected graphs \(=(,)\), where the edges \(\) are unordered pairs \(\{i,j\}\) of nodes \(i,j\). The set of neighbors of a node \(i\) is denoted as \(_{i}=\{j|\{i,j\}\}\). We additionally identify each node \(i\) with a feature vector \(_{i}^{d}\). Together, these form the feature matrix \(^{d||}\), where each column represents the features of a single node. Similarly, depending on whether we model a node-level classification, property prediction, or regression task, we have corresponding target vectors \(_{i}^{t}\), with the special case of \(t=1\) for classification. The target matrix for all nodes is \(^{t||}\) or a vector for graph-level.

**Message-Passing Neural Networks (MPNNs).** The most prevalent type of GNNs are MPNNs, with GCN, GAT, and GraphSAGE as their best-known representatives. They iteratively transform a graph by a sequence of \(L\) layers \(=_{L}_{1}\), with \(=(,)\)(Zhou et al., 2020; Lachaud et al., 2022). In each layer \(\), two steps of computation are performed. First, the node

Figure 3: **The components of CNA modules:** They cluster node features without changing the adjacency matrix, normalize them separately, and finally activate with distinct learned functions.

features \(_{j}^{(l)}\) of the neighbors \(j_{i}\) of each node \(i\) are aggregated into a single vector \(}_{i}^{()}=(\{\{_{j}^{(l)}\,|\,j _{i}\}\})\). Importantly, the Aggregate operation must be invariant to permutations of the neighbors. Popular choices include the point-wise summation or averaging of feature vectors across all neighbors of a node. Second, these features \(}_{i}^{()}\) are projected jointly with the previous node features, as \(_{i}^{(+1)}=(_{i}^{(l)},\ }_{i}^{()})\). The resulting node features \(_{i}^{(+1)}\) then form the input to the next layer. Both the Aggregate and the Update steps can be learned, where the latter is often instantiated by Multi-layer Perceptrons (MLPs). Note that the features of the very first layer are simply the node features \(^{(1)}=\), and the resulting last hidden representation is our target output: \(^{(L)}=\).

We propose improving the Update-step to elevate the effectiveness of the overall architecture. Usually, the learned projection ends with a non-linear activation, like \(\). Instead, we propose performing the three steps of CNA, which we will outline below. We want to emphasize that our general recipe is applicable to any MPNN following the above structure.

### Step 1: Cluster

The node features of typical graph datasets can be clustered into groups of similar properties. In the case of classification problems, a reasonable clustering would at least partially recover class membership. Note that this unsupervised procedure does not require labels and is applicable to a wide range of tasks. So, even in regression tasks, the target output for each node will usually differ; therefore, partitioning nodes into groups of similar patterns is advantageous, too. We, therefore, cluster the nodes by their features \(_{i}\) to obtain \(K\) groups \(_{1},,_{K}\) at the end of each Update-step. This separation allows us to then normalize representations and learn activation functions that are specific to the characteristics of these subsets of nodes. It is important to note that the geometry, i.e., the arrangement of edges between nodes, does not change in the progression through GNN layers, while the features associated with each node do. Likewise, cluster membership does not necessarily indicate node adjacency and thus allows learning on heterophilic data as well. Note that this approach is, therefore, distinct from the graph partitioning often performed to shard processing of graphs based on its geometry (Chiang et al., 2019).

In principle, any clustering algorithm yielding a fixed number of clusters \(K\) can be used to group the node features. Popular choices include the classic \(k\)-means (MacQueen, 1967) and Gaussian Mixture Model (GMM) algorithms (Bishop, 2006), which estimate spherical and elliptical clusters, respectively. However, we need to pay attention to the computational costs of such operations. Typical definitions of \(k\)-means run in \((||Kd)\) per iteration (Manning et al., 2009). Expectation-maximization can be used to learn GMM clusters in \((||Kd^{2})\) per iteration (Moore, 1998). We found that the more expensive execution of GMMs did not materialize in substantial improvements in downstream tasks. We, therefore, opted to use a fast implementation of \(k\)-means. This confirms that k-means often provides decent clustering in practical settings and is sufficiently stable (Ben-David et al., 2007). In our work, we compared nodes by their Euclidean distance, which we found to work reliably in our experiments. However, CNA permits the flexible use of different and even domain-specific data distances.

### Step 2: Normalize

To ensure even scaling of the data across layers, we perform normalization per cluster \(_{k}\) and per feature \(j\) across all nodes \(i_{k}\) separately:

\[_{ij}=-_{kj}}{^{2}+}}, _{kj}=_{k}|}_{p_{k}}x_{pj}, _{kj}^{2}=_{k}|}_{p_{k}} (x_{pj}-_{kj})^{2},\] (1)

where \(\) is introduced for numerical stability. We want to emphasize that this step is similar to Instance Normalization, yet is nonparametric and does not apply the usual affine transformation to restore the unique cluster representation (Huang et al., 2023). Similarly, it is not required to scale the mean we subtract as in GraphNorm (Cai et al., 2021). Instead, we learn a much more powerful transformation in the subsequent Activate step, which subsumes the expressivity of a normal affine projection and thus renders it redundant. The idea of normalizing per cluster \(_{k}\) is related to GraphNorm. However, instead of normalizing per graph in the batch, we propose normalizing per cluster within each graph, yet with the same motivation of maintaining the expressivity of the individual node features.

### Step 3: Activate

Using an element-wise non-polynomial activation function is crucial for MLPs to be universal function approximators (Leshno et al., 1993). To maintain distinct representations of node features at large depths, we employ learnable activation functions. Specifically, we use rational activations (Molina et al., 2019) of degree \((m,n)\):

\[R(x)==^{m}a_{k}x^{k}}{1+|_{k=1}^{n}b_{k}x ^{k}|}.\] (2)

Their purpose is twofold: Firstly, they act as non-polynomial element-wise projections to increase the representational power of the model. Secondly, they replace and subsume the affine transformation in the typical Instance Normalization formulation. Additionally, their strong adaptability allows for appropriate learnable adjustments in the dynamic learning of deep neural networks. This is in line with the findings of Kelesis et al. (2023), who increased the slope of ReLU activations to combat overfitting. Our rationals subsume their approach by further lifting restrictions on the activation function and tuning the slopes automatically while learning the network.

Removing activation functions from GNN layers altogether can-surprisingly-improve overall performance due to reduced oversmoothing (Wu et al., 2019). Our CNA modules limit oversmoothing further, maintaining strong representational power even in deeper networks. We will demonstrate this in the next section.

### Theoretical Underpinnings

We first show how previous proofs of the necessary occurrence of oversmoothing in vanilla GNNs are not applicable when CNA is used. Next, we explain why these proofs are not easily reinstated by illustrating how CNA breaks free of the oversmoothing curse.

Previous Theoretical FrameworksThe Rational activations of CNA trivially break the assumptions of many formalisms due to their potential unboundedness and not being Lipschitz continuous. This includes Prop. 3.1 of Rusch et al. (2023), where, however, the core proofs on oversmoothing are deferred to Rusch et al. (2022). Again, the activation \(\) is assumed to be point-wise and further narrowed to ReLU in the proof in Appendix C.3. Regarding the more recent work of Nguyen et al. (2023), we again note that CNA violates the assumptions neatly discussed in Appendix A. The CNA module can either be modeled as part of the message function \(_{k}\) or as part of the aggregation \(\). However, in both cases, the proof of Prop. 4.3 (which is restricted to regular graphs) breaks down. In the former case, there appears to be no immediate way to repair the proof of Eq. (15) in Appendix C.3. In the latter case, providing upper bounds in Appendix C.2 is much more difficult.

How CNA Escapes OversmoothingRestoring the proofs for the occurence of oversmoothing is difficult because CNA was built precisely to break free of the current limitations of GNNs. This can be seen by considering two possible extremes that arise as special cases of CNA. Consider a graph with \(N\) nodes. On one end of the spectrum, we can consider CNA with \(K=N\) clusters and Rationals that approximate some common, fixed activation, such as ReLU. This renders the normalization step ineffective and exactly recovers the standard MPNN architecture, which is known to be doomed to oversmooth under reasonable assumptions (Rusch et al., 2022; Nguyen et al., 2023). The same holds with only a single cluster (\(K=1\)), i.e., MPNNs with global normalization (Zhou et al., 2020). Conversely, we can consider \(K=N\) clusters, but now with fixed distinct Rational activations given by \(R_{i}(x)=i\) for each cluster \(i\). The Dirichlet energy of that output is constant, lower-bounded, and, therefore, does not vanish, no matter the number of layers. In practice, we employ, of course, between \(K=1\) one and \(K=N\) clusters and thereby trade off the degree to which the GNN is affected by oversmoothing. The following section will investigate this and other questions empirically.

## 4 Experiments

To evaluate the effectiveness of CNA with GNNs, we aim to answer the following research questions:

1. Does CNA limit oversmoothing?
2. Does CNA improve the performance in node classification, node regression, and graph classification tasks?
3. Can CNA allow for having fewer parameters while maintaining strong performance when scaling to very large graphs?
4. Model Analysis: How important are each of the three steps in CNA? How do hyperparameters affect the results?

Setup.We implemented CNA based on PyTorch Geometric (Fey and Lenssen, 2019) to answer the above questions. We searched for suitable architectures among Graph Convolutional Network (GCN) (Kipf and Welling, 2016), Graph Attention Network (GAT) (Velickovic et al., 2018), Sample and Aggregate (GraphSAGE) (Hamilton et al., 2017), Transformer Convolution (Transformer-Conv) (Shi et al., 2021b) and Directional GCN (Dir-GNN) (Rossi et al., 2023). They offer diverse approaches to information aggregation and propagation within graph data, catering to a wide range of application domains and addressing specific challenges inherent to graph-based tasks. Details on the choice of hyperparameters and training settings are provided in Appendix A.2. Average performances and standard deviations are over 5 seeds used for model initialization for all results, except for Tables 1 and 6, where we used 20.

(Q1) Limiting Oversmoothing.Since the phenomenon occurs only within deep GNNs, we systematically increased the number of layers in node classification. We mainly compare vanilla GNNs with ReLU to GNNs with CNA. To complete the analysis, we also consider linearized GNNs without any activation function, since they were found to be more resilient against oversmoothing at the expense of slightly reduced performance (Wu et al., 2019). Figure 4 shows the resulting accuracies for depths of 2 to 96. We can confirm the strong deterioration of vanilla GNNs at greater depths and the partial resilience of linearized GNNs. On the other hand, CNA modules limit oversmoothing drastically and are even more effective than linearized models. At the same time, they significantly alleviate the model's performance shortcomings, effectively eliminating the practical relevance of oversmoothing.

(Q2) Node Classification, Node Regression, and Graph Classification.We evaluated CNA by incorporating it into existing architectures and compared the resulting performances with the unmodified variants. As the results in Table 1 demonstrate, our CNA modules significantly improve classification performance on the Cora dataset (McCallum et al., 2000) by up to 13.53 percentage points. Moreover, this improvement shows across different architectures, highlighting CNA's versatility. Next, we extend our analysis to many more datasets and compare CNA to the best-known models from the literature. Specifically, we evaluate the performance on the following datasets: Cora,

Figure 4: **CNA limits oversmoothing and improves the performance of deep GNNs.**CoraFull (Kipf and Welling, 2016), CiteSeer (Bojchevski and Gunnemann, 2018), PubMed (Sen et al., 2008), DBLP (Tang et al., 2008), Computers and Photo (Shchur et al., 2019), Chameleon, Squirrel, Texas, and Wisconsin (Pei et al., 2020). The results in Table 4 demonstrate the effectiveness of CNA. Out of 11 of those datasets, CNA outperforms the SOTA on 8 of them. In particular, for CiteSeer, CNA achieves a classification accuracy of 95.75% compared to 82.07% for ACMI-Snowball-2. This suggests that CNA is particularly effective in dealing with the imbalanced class distribution in CiteSeer. The application of CNA is successful on the famous Cora dataset, achieving 94.18% accuracy compared to the 90.16% of SSP. Considering the results in relation to the dataset properties listed in Appendix A.1, we can see that CNA is particularly effective on larger datasets and such ones with many features. It is largely unaffected by the usually detrimental degree of heterophily and the number of classes due to the clustering step being mostly independent of them.

Table 3 displays the comparison in performance in multi-scale node regression task as considered by Rusch et al. (2023) on the Chameleon and Squirrel datasets (Rozemberczki et al., 2021). Here, _multi-scale_ refers to the wide range of regression targets from \(10^{-5}\) to 1. CNA modules consistently outperform alternative methods in terms of normalized mean squared error (NMSE) based upon the ten pre-defined splits by Pei et al. (2020). This superior performance highlights the effectiveness of

   Architecture & Baseline & CNA \\  GCN & 81.59\(\)0.43 & **93.66\(\)0.48** \\ GraphSAGE & 80.58\(\)0.49 & **93.68\(\)0.50** \\ TransformerConv & 79.97\(\)0.78 & **93.50\(\)0.58** \\ GAT & 80.57\(\)0.81 & **92.94\(\)0.71** \\   

Table 1: **CNA consistently increases the accuracy (\(\)) of each architecture on Cora.**

   Graph Dataset & Baseline & CNA \\  Mutag & 78.42\(\)6.55 & **81.60\(\)4.18** \\ Enzymes & 36.97\(\)3.08 & **50.00\(\)3.25** \\ Proteins & 72.72\(\)2.60 & **74.44\(\)2.49** \\   

Table 2: **CNA systematically improves graph classification accuracy (\(\)).**

  
**Model** & **Chameleon** & **Squirrel** \\  GCN & 0.207\(\)0.039 & 0.143\(\)0.039 \\ GAT & 0.207\(\)0.038 & 0.143\(\)0.039 \\ PairNorm & 0.207\(\)0.038 & 0.140\(\)0.040 \\ GCNII & 0.170\(\)0.034 & 0.093\(\)0.031 \\ G\({}^{2}\)-GCN & 0.137\(\)0.033 & 0.070\(\)0.028 \\ G\({}^{2}\)-GAT & 0.136\(\)0.029 & 0.069\(\)0.029 \\ Trans.Conv & 0.133\(\)0.033 & 0.072\(\)0.025 \\  
**Trans.Conv+CNA** & **0.131\(\)0.033** & **0.068\(\)0.027** \\   

Table 3: **CNA reduces the NMSE (\(\)) on two multiscale node regression datasets.**

    &  &  \\ 
**Dataset** & **Architecture** & **Accuracy (\(\))** & **Architecture** & **Accuracy (\(\))** \\  Chameleon & Dir-GNN & **85.86\(\)1.80** & DJ-GNN (Begga et al., 2023) & 80.48\(\)1.46 \\ CiteSeer & GAT & **95.75\(\)0.58** & ACMI-Snowball-2 (Luan et al., 2022) & 82.07\(\)1.04 \\ Computers & TransformerConv & **92.68\(\)0.27** & Exphormer (Shirzad et al., 2023) & 91.47\(\)0.17 \\ Cora & GraphSAGE & **94.18\(\)0.33** & SSP (Izadi et al., 2020) & 90.16\(\)0.59 \\ CoraFull & TransformerConv & **71.82\(\)0.25** & CoLinkDist (Luo et al., 2021) & 70.32 \\ DBLP & GCN & **86.90\(\)0.45** & GRACE (Zhu et al., 2020) & 84.2\(\)0.1 \\ Photo & TransformerConv & **95.96\(\)0.29** & CGT (Hoang and Lee, 2023) & 95.73\(\)0.84 \\ Pubmed & TransformerConv & 90.16\(\)0.13 & ACM-Snowball-3 (Luan et al., 2022) & **91.44\(\)0.59** \\ Squirrel & Dir-GNN & **77.47\(\)1.28** & Dir-GNN (Rossi et al., 2023) & 75.31\(\)1.92 \\ Texas & GraphSAGE & 90.00\(\)3.65 & 2-HiGCN (Huang et al., 2024) & **92.45\(\)0.73** \\ Wisconsin & TransformerConv & 89.29\(\)2.26 & 5-HiGCN (Huang et al., 2024) & **94.99\(\)0.65** \\  \#Wins & & **8/1** & 3/11 \\   

Table 4: **Comparison of our method CNA with the leaderboard on Papers with Code (PwC).2 as of writing on a diverse set of node classification datasets from five typical collections. CNA outperforms the respective leaders, and thereby all compared methods, in eight out of eleven cases (\(73\%\)). For some, it does so by a significant margin, e.g., on the popular _Cora_ and _CiteSeer_ datasets.**

[MISSING_PAGE_FAIL:9]

find that CNA is very robust to the choice of these hyperparameters and works best with moderate numbers of features, as the results from (Q3) would suggest. Answering (Q4), we observed that all three operations of CNA are necessary for the method's efficacy, and it permits practitioners to choose hyperparameters flexibly.

## 5 Conclusions

In this work, we proposed Cluster-Normalize-Activate modules as a drop-in method to improve the Update step in GNN training. The experimental results demonstrated the effectiveness of CNA modules in various classification, node-property prediction, and regression tasks. Furthermore, we found it to be beneficial across many different GNN architectures. CNA permits more compact models on similar or higher performance levels. Although CNA does not entirely prevent oversmoothing, it does considerably limit its effects in deeper GNNs. Our ablation studies have shown that each step in CNA contributes to the overall efficacy and its overall robustness. CNA provides a simple yet effective way to improve the performance of GNNs, enabling their use in more challenging applications, such as traffic volume prediction, energy grid modeling, and drug design.

Limitations.We focused our evaluation on very popular architectures and datasets. While it is likely that CNA is beneficial in many other configurations, we did not evaluate its effects on GNNs that are not convolutional MPNNs. Similarly, while we did scale or method to the ogbn-arxiv dataset with about 169k nodes and more than a million edges, yet larger datasets might require further work on the speed of the clustering procedure. Our experiments suggest that oversmoothing is of limited practical relevance. Yet, we did not scale this investigation to even greater depth or establish a formal link to existing theories for oversmoothing.

Future Work.The presented results motivate further enhancing CNA in multiple ways. Notably, there are three possible directions. Firstly, regarding clustering, we investigated \(k\)-means and GMMs, yet it is important to consider other algorithms. For example, Differentiable Group Normalization  is a promising direction for introducing a learnable clustering step. Further, clustering algorithms need not only to yield a fixed number of clusters \(k\), but should also produce equally sized clusters. Beyond discovering more stable super nodes, this is likely to improve the learning of the rational projections as well. Apart from representational power, investigating faster clustering procedures paves the way toward scaling GNNs via CNA to dynamic and continuous training settings. Secondly, even more potential for improvement lies in combining CNA with other techniques. For example, representing the Aggregate step as learnable sequence models . These can be beneficial to distill local information to a greater degree, which in turn could further improve performance and limit oversmoothing. Also, combining CNA with established methods like Edge Dropout or Global Pooling can yield compounding benefits. Finally, the abstract idea behind CNA, namely grouping representations and performing distinct updates, is a more general concept and applicable beyond the architectures we have considered in this work. For instance, Transformers  are known to be equivalent to MPNNs on fully connected graphs and can similarly exhibit oversmoothing , motivating a closer look at this connection. Unifying the theory about the different clustering-based normalization approaches and their effect on expressivity and phenomena such as oversmoothing might uncover further opportunities for improvements.

   Cluster & Normalize & Activate & Cora & ogbn-arxiv \\   & & & 81.59\(\)0.43 & 69.65\(\)0.19 \\ ✓ & & & 81.25\(\)0.64 & 69.65\(\)0.19 \\ ✓ & ✓ & & 93.02\(\)0.36 & 69.47\(\)0.36 \\ ✓ & & ✓ & 81.64\(\)0.61 & 69.42\(\)0.15 \\  & & ✓ & 81.49\(\)0.54 & 69.36\(\)0.13 \\  & ✓ & & 81.60\(\)0.72 & 69.66\(\)0.21 \\  & ✓ & ✓ & 81.60\(\)0.70 & 69.42\(\)0.13 \\  ✓ & ✓ & ✓ & **93.66\(\)0.48** & **74.16\(\)0.33** \\   

Table 6: **Ablation Study measured in accuracy (\(\)) on two datasets.**

Figure 6: **Hyperparameter sensitivity analysis.**