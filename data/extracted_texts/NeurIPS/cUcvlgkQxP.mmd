# Are Multiple Instance Learning Algorithms

Learnable for Instances?

Jaeseok Jang and Hyuk-Yoon Kwon

Graduate School of Data Science, Seoul National University of Science and Technology

{jangjs1027, hyukyoon.kwon}@seoultech.ac.kr

###### Abstract

Multiple Instance Learning (MIL) has been increasingly adopted to mitigate the high costs and complexity associated with labeling individual instances, learning instead from bags of instances labeled at the bag level and enabling instance-level labeling. While existing research has primarily focused on the learnability of MIL at the bag level, there is an absence of theoretical exploration to check if a given MIL algorithm is learnable at the instance level. This paper proposes a theoretical framework based on probably approximately correct (PAC) learning theory to assess the instance-level learnability of deep multiple instance learning (Deep MIL) algorithms. Our analysis exposes significant gaps between current Deep MIL algorithms, highlighting the theoretical conditions that must be satisfied by MIL algorithms to ensure instance-level learnability. With these conditions, we interpret the learnability of the representative Deep MIL algorithms and validate them through empirical studies.

## 1 Introduction

The performance of supervised learning models is greatly influenced by the amount of labeled data . While various models utilizing large-scale datasets have achieved excellent performance, the cost and time of labeling have emerged as issues, especially in domains requiring expert knowledge. For example, in the case of pathology images, detailed labeling requires a significant amount of expert time .

To address these issues, multiple instance learning (MIL) techniques have been introduced. MIL encompasses all methodologies that learn to predict the labels of instances by learning from the labels of bags composed of instances . This approach allows for detecting disease areas in pathology images through whole-image labeling without requiring the labeling of regions within the image. This can significantly reduce overall labeling costs and maximize the efficiency of the method . As illustrated in Figure 1, if at least one instance in a bag is positive, the bag is positive, and if all instances are negative, the bag is negative in MIL. To achieve instance-level learning, it was necessary first to confirm that learning at the bag level could be performed at a high level. Therefore, traditional MIL research focused primarily on the feasibility of learning at the bag level rather than the instance level , and some studies validated instance-level learning only for specific algorithms .

Recently, with the advancement of deep learning technologies, traditional MIL has evolved into Deep MIL, enabling more effective extraction of features from individual instances and consideration of interactions between instances, leading to significant improvements in prediction performance. Despite these advancements, MIL research still predominantly focuses on learning at the bag level, with a lack of exploration into the feasibility of instance-level learning .

Figure 1: The data structure consisting of multi-instances (Blue: Negative, Red: Positive) .

In this study, we propose a new framework to theoretically validate that Deep MIL can learn at the instance level, overcoming the aforementioned issues. The contributions of this study are summarized as follows:

1. The proposed theoretical framework derives conclusions about the instance-level learnability of Deep MIL algorithms, assuming that MIL algorithms are learnable at the bag level (Assumption 1).
2. Utilizing the probably approximately correct (PAC) learning theory, we divide the hypothesis space of the dataset into two cases: 1) each instance being statistically independent and 2) the general case without any constraints on instance distributions, including statistically dependent instances. We theoretically derive the necessary and sufficient conditions for learnability in each hypothesis space (i.e., Condition 4 and Condition 7).
3. By applying the derived conditions to the existing representative types of Deep MIL, we verify their instance-level learnability.
4. Through Theorem 10 and Theorem 11, we show that additional information (e.g., positional information of each time point in time series, medical records provided alongside pathology images for better disease diagnosis) beyond the features directly extracted from the original data must act as weights in the independent hypothesis space of each instance.

This paper is organized as follows. Section 2 defines the problem. Section 3 outlines the conditions for Deep MIL to be instance learnable and provides theoretical proof. Section 4 evaluates existing Deep MIL algorithms and validates the results through experiments. Finally, Section 5 concludes the paper.

## 2 Problem Definition

**Notation 1**: _(MIL domain spaces) Given the feature space for an instance \(_{inst_{t}}^{d}\) and the feature space for \(N\) instances \(:=\{_{inst_{t}},_{inst_{2}},...,_ {inst_{t}}\}\), along with the label space \(:=\{1,...,k\}\), we can define the joint distribution \(D_{XY}\) on \(\). Here, \(X_{inst_{t}}_{inst_{t}}\), \(X:=(X_{inst_{t}},X_{inst_{2}},...,X_{inst_{t}})\), and \(Y\) are random variables. The MIL instance domain \(D_{X_{min}Y}\) represents the joint distribution of individual instances and their respective labels. The MIL bag domain \(D_{XY}\) is the joint probability distribution composed of multiple instance domains \(D_{X_{inst_{t}}Y}\). Here, the term "domain" refers to these joint distributions._

Based on Notation 1, the MIL Problem can be defined as in Definition 1.

**Definition 1**: _(MIL problem) Given a training dataset \(S:=\{((x_{1}^{1},...,x_{n}^{1}),y^{1}),...,((x_{1}^{m},...,x_{n}^{m})\\,y^{m})\}\) drawn IID from the joint distribution \(D_{XY}\), the goal of MIL is to learn a classifier \(f_{bag}\) for the data and \((f_{inst_{1}},...,f_{inst_{n}})\) such that for any arbitrary bag random variable \(x:=(x_{1},...,x_{n})\) drawn from the marginal distribution \(D_{X}\): 1) It should be able to classify the class corresponding to the bag \(x\). 2) It should be able to classify the class corresponding to the \(i^{th}\) instance \(x_{i}\) of the bag. Here, a random sample \((x,y):=((x_{1},...,x_{n}),y)\) of the training data represents a bag consisting of \(n\) instances drawn from \(D_{XY}\), with a total of \(m\) bags. The training data for the \(i^{th}\) instance is given by \(S_{inst_{t}}:=\{(x_{i}^{1},y^{1}),...(x_{i}^{m},y^{m})\}\). _

The MIL problem defined in Definition 1 is performed within the following MIL hypothesis spaces.

**Notation 2**: _(MIL hypothesis spaces) 1) The bag hypothesis space \(_{bag}\{h_{bag}:X Y\}\) is a set of hypothesis functions \(h_{bag}\) that classify bags with the correct labels. Here, \(h_{bag}=f(X)\), where \(f_{bag}\). 2) The \(i^{th}\) instance hypothesis space \(_{inst_{t}}\{h_{inst_{t}}:X_{inst_{t}} Y\}\) is a set of hypothesis functions \(h_{inst_{t}}\) that classify the \(i^{th}\) instance with the correct labels using the feature space of the \(i^{th}\) instance. Here, \(h_{inst_{t}}=f(X_{inst_{t}})\), where \(f_{inst_{t}}\). Here, \(_{bag}\) and \(_{inst_{t}}\) are sets of functions that take a bag or the \(i^{th}\) instance as input and generate the corresponding labels._

According to Notations 1, 2, and Definition 1, the risk for a bag in MIL is defined as in Definitions 2 and 3.

**Definition 2**: _(Bag Risk) If the loss for a bag in the MIL algorithm is given by \(_{bag}(h_{bag}(x),y)\), the risk for a bag is defined as follows:_\[R_{bag}=_{(x,y) D_{XY}}_{bag}(h_{bag}(x),y)\] (1)

**Definition 3**: _(Instance Risk) If the loss for the \(i^{th}\) instance in the MIL algorithm is given by \(_{inst_{i}}(h_{inst_{i}}(x_{i}),y)\), the risk for the \(i^{th}\) instance is defined as follows:_

\[R_{inst_{i}}=_{(x_{i},y) D_{X_{inst_{i}}}Y}_{inst_{i}}(h_{ inst_{i}}(x_{j}),y)\] (2)

Based on the definitions of bag risk and instance risk in Definition 2 and 3, the learnability for bags and instances can be defined as in Definition 4 and Definition 5.

**Definition 4**: _(PAC Learnability of Bag) Given the domain space \(_{XY}\) and the bag hypothesis space \(_{bag}\{h_{bag}:\}\), the MIL algorithm \(A\) is said to be learnable on \(_{bag}\) with respect to \(_{XY}\) if, for all domains \(D_{XY}_{XY}\), the following condition is satisfied:_

\[_{S D_{XY}^{}}[|R_{bag}(A(S))-_{h_{ bag}}R_{bag}(h)|] 1-\] (3)

_Here, \(\) represents the acceptable error between the learning algorithm and the actual optimal hypothesis. In contrast, \(\) represents the confidence level that the learning algorithm will return accurate results within a certain error range. Both \(\) and \(\) have a range of \(0<,<1\)._

**Definition 5**: _(PAC Learnability of Instance) When given the \(i^{th}\) instance domain space \(_{X_{inst_{i}}Y}\) and instance hypothesis space \(_{inst_{i}}\{h_{inst_{i}}:X Y\}\), the algorithm \(A\) is said to be learnable over \(_{inst_{i}}\) from \(_{X_{inst_{i}}Y}\) if it satisfies the following for all domains \(D_{X_{inst_{i}}Y}_{X_{inst_{i}}Y}\):_

\[_{S_{inst_{i}} D_{X_{inst_{i}}Y}^{}}[|R_{inst_{i}}(A(S _{inst_{i}}))-_{h_{inst_{i}}}R_{inst_{i}}(h)|]  1-\] (4)

Based on the relationship between Definitions 4 and 5, according to Theorem 1, if a MIL algorithm is not learnable with respect to bags, it is not learnable with respect to instances.

**Theorem 1**: _If MIL algorithm \(A\) satisfies Condition 1, then this algorithm is not PAC learnable for any instance domain space \(_{X_{inst_{i}}Y}\) and instance hypothesis space \(_{inst_{i}}\{h_{inst_{i}}:X Y\}\)._

\[[_{i=1}^{n}|R_{inst_{i}}(A(S_{inst_{i}}))-_{h _{inst_{i}}}R_{inst_{i}}(h)|>]>\] (5)

**Condition 1**: _The MIL algorithm \(A\) is not PAC learnable for the given domain space \(_{XY}\) and bag hypothesis space \(_{bag}\{h_{bag}:X Y\}\):_

\[[|R_{bag}(A(S))-_{h_{bag}}R_{bag}(h)|> ]>\] (6)

_Proof_: _The proof of Theorem 1 is conducted in Appendix C.1._

According to Theorem 1, MIL algorithms that are not learnable for bags do not guarantee learnability for instances. Therefore, in this study, we discuss the learnability of instances under Assumption 1.

**Assumption 1**: _The MIL algorithm is PAC learnable for bags._

Based on the definitions, theorem, and assumption above, we can formulate the definition of when the proposed Deep MIL is learnable for instances as follows:

**Definition 6**: _If the MIL algorithm satisfies Condition 2, it is learnable for instances._

[MISSING_PAGE_EMPTY:4]

**Condition 3**: _For each Instance Space \(D_{X_{inst_{i}}Y}\) within \(^{Ind}_{XY}\), there must exist a corresponding bag domain space \(D_{XY}^{Ind}_{XY}\), which should be determined as the union of each instance domain space, as follows:_

\[D^{Ind}_{XY}:=_{i=1}^{N}D_{X_{inst_{i}}Y}^{Ind}_{XY}\] (8)

Since \(D^{Ind}_{XY}\) satisfies Condition 3, implying independence among instances, the hypothesis space for each instance is unaffected by other instances. In this case, for MIL algorithms to be learnable for instances, they must satisfy Condition 4 according to Theorem 2.

**Theorem 2**: _If a MIL algorithm satisfies Condition 4 in \(^{Ind}_{XY}\), it is learnable for instances._

**Condition 4**: _The risk of the optimal hypothesis for \(D^{Ind}_{XY}\) must ensure that it equals the sum of the risks of the optimal hypotheses for individual instance spaces within \(D^{Ind}_{XY}\):_

\[_{h}R_{^{Ind}_{XY}}=_{i=1}^{N} R_{inst_{ i}}\] (9)

_Consequence: If Condition 4 is satisfied, then Condition 2 is also satisfied. Hence, Condition 4 becomes a necessary and sufficient condition for learnability for instances in \(D^{Ind}_{XY}\)._

_Proof_: _The proof of Theorem 2 is provided in Appendix C.2._

### PAC Learnability for General Bag Domain Spaces

The definition of \(^{Gen}_{XY}\) is provided in Definition 8.

**Definition 8**: _The general bag domain space \(^{Gen}_{XY}\) is defined as a domain space that encompasses all instance spaces while satisfying Condition 5 and 6:_

**Condition 5**: _For every instance space \(_{X_{inst_{i}}Y}\) within \(^{Gen}_{XY}\), there exists a corresponding bag domain space \(D_{XY}^{Gen}_{XY}\), determined as the sum of each instance domain space._

**Condition 6**: \(^{Gen}_{XY}\) _is formed using weights \(_{i}(0,1)\) to reflect the importance of relationships among instances. Each instance domain space \(D_{X_{inst_{i}}Y}\) should be defined along with its weight \(_{i}\) as follows:_

\[D^{Gen}_{XY}=_{i=1}^{N}_{i}D_{X_{inst_{i}}Y}^{Gen}_{XY }_{i=1}^{N}_{i}=1, 0_{i} 1\] (10)

Since \(^{Gen}_{XY}\) satisfies Condition 5 and Condition 6, implying the existence of relationships among instances, the hypothesis space for each instance is influenced by other instances. In this case, for MIL algorithms to be learnable for instances, they must satisfy Condition 7 according to Theorem 3.

**Theorem 3**: _If a MIL algorithm satisfies Condition 7 in \(^{Gen}_{XY}\), it is learnable for instances._

**Condition 7**: _The risk of the optimal hypothesis for \(D^{Gen}_{XY}\) must ensure that it equals the weighted sum of the risks of the optimal hypotheses for individual instance spaces within \(D^{Gen}_{XY}\):_

\[_{h}R_{^{Gen}_{XY}}=_{i=1}^{N}_{i} R _{inst_{i}}_{i=1}^{N}_{i}=1, 0 _{i} 1\] (11)

_Consequence_: _If a MIL algorithm satisfies Condition 7, it also satisfies Condition 2. Hence, Condition 7 becomes a necessary and sufficient condition for MIL algorithms to be learnable for instances in \(^{Gen}_{XY}\)._

_Proof_: _The proof of Theorem 3 is provided in Appendix C.3._Theoretical Verification of Existing Deep MILs

### Classifications of Existing Deep MIL Methodologies

The Deep MIL algorithms proposed so far are primarily categorized based on 1) whether they perform Aggregation at the Embedding-level  or at the Instance-level . Additionally, they can be further classified into 5 types of pooling techniques according to 2) whether they do not use an attention mechanism , perform Aggregation by multiplying attention weights at the embedding-level , or perform aggregation by multiplying attention weights at the instance-level , as shown in Table 1.

A detailed explanation of the pooling techniques is provided in Appendix A.2.

### Theoretical Verification

#### 4.2.1 Relationship between Attention Mechanism and Learnability for Bag

The application of an attention mechanism to MIL algorithms depends on the range of the domain space that the MIL algorithm can learn from. This implies that the feasibility of PAC learning for bags may vary depending on whether attention is applied or not.

**Theorem 4**: _In \(_{XY}^{Ind}\), the MIL algorithm is PAC learnable for bags._

_Proof_: _The proof of Theorem 4 is conducted in Appendix C.4._

**Theorem 5**: _In \(_{XY}^{Gen}\), MIL algorithms that aggregate independent hypothesis spaces for each instance must utilize attention satisfying Condition 8 to be PAC learnable for bags._

**Condition 8**: _The hypothesis space \(_{bag_{att}}\) of Attention MIL should be equal to the sum of independent hypothesis spaces \(h_{inst_{i}}\) multiplied by attention weights \(Att_{i}\):_

\[_{bag_{att}}=\{h_{bag_{att}} h_{bag_{att}}=_{i=1}^{n} Att_{i} h_{inst_{i}},0<Att_{i}<1,\;_{i=1}^{n}Att_{i}=1\}\] (12)

_Proof_: _The proof of Theorem 5 is conducted in Appendix C.5._

_Validation_: _Experimental validation is performed in Section 4.4.1._

_Consequence: Theorems 4 and 5 are not direct theorems about the learnability of MIL for instances. However, the learnability for bags is a prerequisite for MIL algorithms to be able to learn from instances. According to Theorem 4, in PAC learnable \(_{XY}^{Ind}\), all MIL algorithms satisfy Assumption 1 regardless of the presence of attention mechanisms. On the other hand, in \(_{XY}^{Gen}\), according to Theorem 5, the application of attention mechanisms satisfying Condition 8 becomes a necessary condition for MIL algorithms to be learnable for instances._

#### 4.2.2 Verification Learnability for Instances by MIL Pooling Method

The type of pooling technique used in Deep MIL algorithms becomes a determining factor in whether they are learnable for instances when they are learnable for bags. In this case, to verify whether a Deep MIL algorithm is learnable for instances, a definition of Lemma 1 should be established in advance, extending Condition 4 to ensure that no additional hypothesis space is included for instances.

**Lemma 1**: _Condition 9 serves as a necessary condition for the learnability of instances, when the hypothesis space for the \(i^{th}\) instance of a MIL algorithm is \(_{inst_{i}}_{add_{i}}\). Here, \(_{inst_{i}}\) represents the hypothesis space for the \(i^{th}\) instance, and \(_{add_{i}}\) denotes the hypothesis space for the \(i^{th}\) instance generated through elements outside the \(i^{th}\) instance._

   & Instance & Embedding & Attention & Additive & Conjunctive \\  & -pooling  & -pooling  & -pooling  & -pooling  & -pooling  \\  Aggregation-level & Instance & Embedding & Embedding & Instance & Instance \\ Attention-target & None & None & Embedding & Embedding & Instance \\  

Table 1: Classification of existing Deep MIL methodologies.

**Condition 9**: \(_{add_{i}}\) _must be a subset of \(_{inst_{i}}\):_

\[_{inst_{i}}_{add_{i}}:=\{h_{add_{i}}:_ {add_{i}}\}\] (13)

_Proof_: _The proof of Lemma 1 is conducted in Appendix C.6._

In the case of instance-pooling, as attention mechanisms are not utilized, Condition 8 is not satisfied. Therefore, in \(_{XY}^{Gen}\), the algorithm is not learnable for bags, and consequently, not learnable for instances either. However, according to Theorem 6, the algorithm is learnable for instances in \(_{XY}^{Ind}\).

**Theorem 6**: _In \(_{XY}^{Ind}\), MIL algorithms that perform instance-pooling are PAC learnable for instances._

_Proof_: _The proof of Theorem 6 is conducted in Appendix C.7._

Unlike Instance-Pooling, where the hypothesis for bags is combined from instance-level hypotheses, Embedding-Pooling does not combine bag hypotheses from instance-level hypotheses. As a result, it does not satisfy Condition 9, leading to a scenario similar to Theorem 7.

**Theorem 7**: _MIL algorithms that perform Embedding-Pooling are not learnable for instances._

_Proof_: _The proof of Theorem 7 is conducted in Appendix C.8._

_Consequence: In \(_{XY}^{Ind}\), Deep MIL algorithms exhibit reproducibility when they avoid overfitting to easy information at the bag-level and effectively learn positive instances at the instance-level. Reproducibility in this context refers to the learnability of positive instances. They demonstrated experimentally that Deep MIL algorithms using Instance-Pooling, such as mi-Net  and Causal MIL , exhibit reproducibility, while those using Embedding Pooling, such as Mi-Net , do not. However, Raff et al.  failed to provide a theoretical explanation for these results. In contrast, this study theoretically demonstrated that Instance-Pooling is learnable for instances while Embedding-Pooling is not, through Theorems 6 and 7. This provides theoretical support for the experimental findings of Raff et al. ._

To compute the attention applied to each instance's features in Attention Pooling and Additive Pooling, the bag's features \(X\) are used as input. Multiplying attention weights to the features at the feature level results in additional hypothesis space \(h_{add_{i}}\) formed by the attention operations on each instance. As a consequence, since Condition 9 is not satisfied, according to Theorem 8, the algorithm becomes not PAC Learnable for instances.

**Theorem 8**: _If the MIL algorithm does not adhere to Condition 10, it is not learnable for instances._

**Condition 10**: _The risk \(R_{inst_{i}}\) for the \(i^{th}\) instance should be as follows:_

\[R_{inst_{i}}=_{(x_{inst_{i}},y) D_{X_{inst_{i}}}Y}_{inst_{ i}}(h,y) h_{inst_{i}}_{bag-level_{i}}\] (14)

_Here, \(_{bag-level_{i}}\) denotes the hypothesis space for the \(i^{th}\) instance generated through bag-level features, and \(_{bag-level_{i}}:=\{h_{bag-level}:\}\)._

_Consequence: Attention-Pooling and Additive-Pooling multiply attention weights to each instance's feature-level. As a result, the hypothesis space for the \(i^{th}\) instance includes, in addition to Instance-Pooling, \(h_{bag-level}=\{h h=f(X_{bag}),f_{bag}\}\). In other words, it incorporates the hypothesis space for bag-level features into the prediction for the \(i^{th}\) instance. This, according to Theorem 8, renders it not learnable for instances._

_Proof_: _The proof of Theorem 8 is conducted in Appendix C.9._

_Validation_: _Experimental verification of Theorem 8 is demonstrated in Section 4.4.2._

On the other hand, Conjunctive-Pooling does not multiply attention at the feature level of instances, but rather at the prediction level of instances. Therefore, predictions are made based on individual features of instances, resulting in \(_{bag-level_{i}}=\), satisfying Condition 10. Additionally, Theorem 9 demonstrates that Conjunctive-Pooling operates in a manner that is learnable for instances.

**Theorem 9**: _When MIL algorithms use Conjunctive-Pooling for aggregation in \(_{XY}^{Gen}\), they are learnable for instances.__Consequence: According to Theorem 9, Conjunctive-Pooling becomes the unique pooling technique learnable for instances in \(_{XY}^{}\). Specifically, since \(_{XY}^{}\) includes \(_{XY}^{Ind}\) by definition, Conjunctive-Pooling becomes a methodology that satisfies all cases._

_Proof_: _The proof of Theorem 9 is conducted in Appendix C.10._

_Validation_: Experimental validation for Theorem 9 is presented in Section 4.4.2._

Javed et al. demonstrated that the contribution of instances in MIL algorithms performing Additive-Pooling is proportional to the shapley value. However, their proof contained an error where the feature multiplied by attention was mistakenly assumed to be the feature of the \(i^{th}\) instance. Our theoretical framework identifies that when attention is applied to features, it fails to satisfy Condition 10, leading to the algorithm being not learnable.

In this study, we confirmed that the error causing failure to satisfy Condition 10 also appears in studies proposing MIL based on Conjunctive-Pooling . Details on this are explained in Section 4.3.1.

### Additional Considerations

#### 4.3.1 Rethinking Position Dependencies of Instances on Deep MILs

Text data and time series data exhibit temporal dependencies, while image data often has spatial dependencies. Therefore, research in relevant fields has utilized neural networks capable of capturing dependencies, such as RNNs and CNNs , or additional positional encoding on extracted features to enhance performance . Following this trend, Deep MIL studies have also employed RNN-based neural networks or positional encoding during the feature extraction process to capture temporal dependencies of instances for performance enhancement . However, as per Theorem 10 and Theorem 11, these approaches render the models unable to learn from instances.

**Theorem 10**: _If the MIL algorithm extracts features of instances through RNN-based neural networks for aggregation, it is unable to learn from instances._

_Proof_: _The proof for Theorem 10 is conducted in Appendix C.11._

_Validation_: The experimental validation for Theorem 11 is presented in Section 4.4.3._

**Theorem 11**: _If the hypothesis space \(_{Pos-Encode_{i}}\) generated through positional encoding values for the \(i\)-th position of the MIL algorithm is not a subset of \(_{inst_{i}}\), then the algorithm is not PAC learnable for instances._

_Proof_: _If \(_{Pos-Encode_{i}}_{inst_{i}}\), the algorithm fails to satisfy Condition 9, rendering it not learnable for instances._

_Validation_: Experimental validation for Theorem 10 is shown in Section 4.4.3._

_Consequence: According to Theorem 11, using values outside of an instance's features in the prediction process makes it unlearnable. Therefore, positional encoding should not be used in the process of predicting instances._

According to the investigation conducted in this study, it was observed that existing Deep MIL research using Conjunctive-Pooling, such as MILNET  and MILLET , all utilized RNN-based neural networks for feature extraction or performed positional encoding on instance features. Therefore, they failed to satisfy Condition 9, making them unable to learn about instances. Furthermore, these theoretical findings provide a basis for the ablation study conducted by Early et al. on time series data classification problems, where Conjunctive-Pooling and positional encoding were applied to predict the class at each time step. In essence, Early et al. demonstrated that while positional encoding contributed to improving prediction performance at the bag level, it acted as a detrimental factor in predicting instances. When utilizing external information such as positional dependencies through supplementary weighting factors like attention operations alone, Condition 9 may be satisfied, thereby enabling learnability concerning instances.

#### 4.3.2 Learnability for Instances in Each Dimension for Multidimensional Deep MILs

In the real world, data is often composed of bags consisting of multi-dimensional instances rather than simple instances of uniform dimensions. For instance, in video data, each frame(images)is composed of patches in multi-dimensional structures for each frame dimension. Similarly, in multivariate time series data, each timestamp is composed of multivariate data points. In the case of multi-dimensional instances, Multi-dimensional Deep MIL (MD-MIL) methodologies have emerged to perform predictions on lower-level instances based solely on labels at the top level of the bag. These methodologies apply aggregation recursively, performing aggregation on data in the first dimension and sequentially on subsequent dimensions. Existing MD-MIL approaches have employed Embedding-Pooling or Attention-Pooling for each dimension's instances. However, these pooling methods have been shown by Theorems 7 and 8 to be incapable of learning about instances. Therefore, existing MD-MIL methodologies are not suitable for learning from multi-dimensional instances.

Therefore, to design methodologies capable of learning from multi-dimensional data, it is essential to use aggregation techniques that are capable of learning about instances, based on Theorem 6 or 9. Additionally, to ensure learnability from the top-level bag and bags in each dimension, the attention operation's results should be set to be within the instance's hypothesis space based on whether the relationships among instances in each dimension are independent or dependent. Through the experiments in Appendix E.2, we confirmed that Conjunctive-Pooling can capture the relationships between instances across different bags in an MD-MIL architecture, leading to performance improvements. These findings confirm that our proposed theoretical framework serves as a valuable guide in designing learnable models.

### Experimental Validation

In this section, we conduct the following experimental validations to demonstrate whether existing Deep MIL approaches are learnable for instances based on the theorems: 1) **(Theorem 5)**: Demonstrating the learnability of the attention mechanism for bags in \(_{XY}^{Gen}\). 2) **(Theorem 8, 9)**: Showing that multiplying attention at the feature level is not learnable for instances. 3) **(Theorem 10, 11)**: Demonstrating that inputting position-related values into instance positions is not learnable for instances. As this study assumes an environment where bags are PAC learnable, we preprocess the MNIST dataset to match the difficulty level of each experiment. For the validation of Theorem 10 and 11, we use the WebTraffic dataset from Early et al. , which is a synthetic time-series classification dataset. Detailed experimental settings can be found in Appendix D.

#### 4.4.1 Experimental Validation of Theorem 5

To validate Theorem 5, we conducted experiments on MIL algorithms [5; 21; 38; 2; 39; 40; 19; 9; 10] representing each pooling technique. Table 2 compares prediction performance on the synthetic datasets, detailed in Appendix D.1. This reveals that Instance-Pooling based MIL algorithms [5; 21; 38], which do not apply weights to the hypothesis space, degraded learning performance for bags in \(_{XY}^{Gen}\). In contrast, the other algorithms [2; 39; 40; 19; 9; 10] that apply weights to the hypothesis space through the attention mechanism demonstrate superior performance, which is even comparable to a none-pooling-based method that, by using fully connected layers, preserves all instance-level information without any loss during prediction. This experimentally validates Theorem 5.

   Pooling Methods & Deep MIL Algorithms & Macro-F1 & Micro-F1 & Weighted-F1 \\  Instance-Pooling & mi-Net  & 0.3286 & 0.5548 & 0.4550 \\  & Causal MIL  & 0.2341 & 0.3577 & 0.2645 \\  & MIREL  & 0.3623 & 0.5318 & 0.4372 \\  Attention-Pooling & Attention MIL  & 0.7652 & 0.7683 & 0.7583 \\  & Loss-Attention  & 0.7935 & 0.7832 & 0.7753 \\  & SA-AbMILP  & 0.7540 & 0.7619 & 0.7562 \\  & TransMIL  & 0.7834 & 0.7711 & 0.7738 \\  Additive-Pooling & Additive MIL  & 0.5314 & 0.6341 & 0.5732 \\  Conjunctive-Pooling & Conjunctive MIL  & 0.7544 & 0.7701 & 0.7683 \\  None-Pooling & Fully Connected & 0.7704 & 0.7724 & 0.7714 \\   

Table 2: Prediction performance of Deep MIL on Bags in \(_{XY}^{Gen}\).

#### 4.4.2 Experimental Validation of Theorems 8 and 9

To assess whether the algorithm  is learnable for instances when weights from an attention mechanism that satisfies Condition 8 are multiplied at the feature level, we compared the predictive performance on instances by adjusting the variance of attention weights.

Table 3 shows the results on the synthetic dataset, which details in Appendix D.2. Attention-Pooling based  and Additive-Pooling based  MIL algorithms, where attention weights are multiplied at the feature level and aggregation is performed, showed significantly lower predictive performance for instances compared to bags. In particular, SA-AbMILP  and TransMIL , which perform iterative attention operations, show a significant performance gap between bag-level predictions and instance-level predictions. This demonstrates that the Attention-Pooling process does not guarantee the learnability of MIL. In contrast, Conjunctive-Pooling based MIL algorithms  exhibited a much smaller difference in predictive performance between bags and instances than other algorithms. This validates, in accordance with Theorem 9, that Conjunctive-Pooling is learnable for instances. Additionally, experiments adjusting the variance of attention to determine its impact on the discrepancy between bag and instance performance are detailed in Appendix E.1.

#### 4.4.3 Experimental Validation of Theorems 10 and 11

Table 4 compares the performance of Conjunctive MIL under various conditions, reflecting information on positional dependency: 1) Applying attention and prediction on features extracted via Positional Encoding or a GRU-layer (All), 2) Using positional information only for attention operations (Att), 3) Using positional information only for prediction (Predict), and 4) The baseline model without any positional adaptations (Default).

Comparative results on the WebTraffic dataset's instance prediction performance reveal that configurations All and Predict, which provide additional positional information to features as in Theorem 10 and 11, showed poorer prediction performance than Default. Particularly, RNN, which reflects more additional information than positional encoding, was found to significantly degrade performance. However, the Att configuration, which utilized positional information solely for attention operations, achieved better performance than Default. This demonstrates that incorporating helpful information such as positional data, into MIL should be selectively applied to attention computations only.

## 5 Conclusions

In this study, we proposed a novel framework to theoretically validate that deep MIL can learn at the instance level, overcoming the aforementioned issues. The proposed theoretical framework derived conclusions about the instance-level learnability of deep MIL algorithms, assuming that MIL algorithms are learnable at the bag level. Utilizing the PAC learning theory, we theoretically derived the necessary and sufficient conditions for learnability in each hypothesis space. This provides theoretical guidance for building learnable MIL models in various domains. The practical application of our proposed framework to real-world MIL scenarios is presented in Appendix F. Limitations and future work are explained in Appendix G.

    & Default & PE (All) & PE (Att) & PE (Predict) & RNN (All) & RNN (Att) & RNN (Predict) \\  AOPCR & 13.041 & 12.372 & 14.555 & 12.256 & 9.011 & **17.502** & 12.21 \\ NDCG@n & 0.676 & 0.665 & **0.727** & 0.642 & 0.620 & 0.714 & 0.523 \\   

Table 4: Test positional dependencies for WebTraffic datasets .

    & \))} & \))} & -P_{Bag}\)} \\  Deep MIL Algorithms & Macro-F1 & AUROC & Macro-F1 & AUROC & Macro-F1 & AUROC \\  Attention MIL  & 0.8434 & 0.9516 & 0.3215 & 0.7317 & -0.5219 & -0.2199 \\ Loss-Attention  & 0.8228 & 0.9574 & 0.4797 & 0.7951 & -0.3431 & -0.1623 \\ SA-AbMILP  & 0.7692 & 0.9552 & 0.3340 & 0.5464 & -0.4352 & -0.4088 \\ TransMIL  & 0.8515 & 0.9622 & 0.2192 & 0.5369 & -0.6323 & -0.4253 \\  Additive MIL  & 0.4776 & 0.9181 & 0.2320 & 0.8092 & -0.2456 & -0.1089 \\ 
**Conjunctive MIL** & 0.7916 & 0.9463 & 0.6430 & 0.9516 & **-0.1486** & **+0.0053** \\   

Table 3: Prediction performance comparison of MIL algorithms on bags and instances.