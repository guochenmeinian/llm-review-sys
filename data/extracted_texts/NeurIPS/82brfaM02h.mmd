# XBrainLab: An Open-Source Software for

Explainable Artificial Intelligence-Based EEG Analysis

 Chia-Ying Hsieh\({}^{1}\)  Jing-Lun Chou\({}^{1}\)  Yu-Hsin Chang\({}^{1}\)  Chun-Shu Wei\({}^{1,2,3,4}\)

\({}^{1}\)Department of Computer Science, NYCU, Taiwan

\({}^{2}\)Institute for Biomedical Engineering, NYCU, Taiwan

\({}^{3}\)Institute for Education, NYCU, Taiwan

\({}^{4}\)Brain Science and Technology Center, NYCU, Taiwan

{irishsieh.cs11, jalan.c, yhcgg127.cs11, wei}@nycu.edu.tw

###### Abstract

Recent advancements in explainable artificial intelligence have significantly accelerated scientific discoveries across various fields. In the realm of neuroscience research, the application of deep interpretation techniques has yielded valuable insights into brain functioning and mechanisms. We introduce XBrainLab, an accessible EEG analysis tool featuring a user-friendly graphical user interface (GUI) seamlessly compatible with code scripting. XBrainLab offers a comprehensive, end-to-end deep learning EEG analysis pipeline, capable of converting raw EEG signals into comprehensible visualizations of neural patterns. Through practical demonstrations using diverse EEG datasets, we highlight XBrainLab's versatility in interpreting neural representations in alignment with established neuroscience knowledge. This evolving open-source platform bridges cutting-edge computational techniques with the frontier of neuroscientific research. The code repository can be accessed at https://github.com/CECNL/XBrainLab.

## 1 Introduction

Electroencephalogram (EEG) is a common modality for monitoring brain activity due to its non-invasiveness , high temporal resolution , and relatively low cost . Despite these advantages, decoding EEG has been a technical challenge due to its low signal-to-noise ratio (SNR), contamination of artifacts, and data variability [4; 5; 6]. EEG has intrinsic limitations that stem from a low signal-to-noise ratio (SNR) and the occurrence of artifacts [4; 5], which are introduced by the lack of control in physiological mechanisms. The barrier between electrodes and the actual neural system, as well as the functional connectivity between brain regions, impairs EEG spatial resolution . Additionally, the non-stationarity of neural oscillation [8; 9] makes EEG not directly understandable. To alleviate the difficulty in hand-crafting decoding algorithms for EEG, machine learning (ML) came into view for its success in automatic feature extraction and high-performance model building across various research fields. Some exemplary ML algorithms committed to EEG are: independent component analysis (ICA)  for blind source separation; fitting oscillations and one-over-F (FOOOF)  for finding periodic and aperiodic patterns in power spectral density (PSD); and filterbank common spatial pattern (FBCSP)  for automatically finding and selecting temporal-spatial informative EEG features.

Lately, the success of deep learning (DL) has driven the development of novel DL-based EEG processing. Starting with convolutional neural networks (CNNs) that have surpassed conventional machine learning techniques in classification [12; 13], DL models of various architectures and distinctive strengths, such as long short-term memory (LSTM) , transformers , or featurepyramid networks (FPN) , have elevated decoding performance in numerous EEG-related tasks. Another advancement of using DL for EEG analysis, aside from enhancing decoding performance, is the automatic feature extraction based on explainable artificial intelligence (XAI) [17; 18]. It not only reduces human labor but also avoids bias induced by prior assumptions and expert decisions while providing an objective and trustworthy deduction [12; 13].

On the other hand, incorporating machine learning (ML) into EEG analysis research requires a broad, multi-disciplinary knowledge and skills, making the development of EEG toolboxes with readily available ML algorithms of interest to the field. However, it is rare to find a tool for EEG analysis that fulfills the requirements of an open-source platform, employs cutting-edge computational techniques, and is user-friendly for users across disciplines. To address this issue, we propose the development of a novel open-source software for EEG analysis based on an XAI framework, with a focus on maximizing usability.

In this paper we present XBrainLab, an open-source software motivated to utilize XAI for EEG decoding, the pipeline and XBrainLab dashboard are shown in Fig 1. XBrainLab is fully written in Python with an interactive graphical user interface (GUI), wrapping up EEG data processing, DL-oriented program building and model interpretation. XBrainLab sets its goal as providing a DL model-agnostic, non-exclusive dataset compatibility and out-of-the-box solution for neuroscience discovery. The remainder of this paper is organized as follows: In Section 2, we review the current situation of ML algorithms in on-shelf EEG tools, including the objective of the algorithms, building platform, and the general development direction progression over the years. Section 3 gives an overview of the XBrainLab software with descriptions of each module. In Section 4, the XBrainLab software is demonstrated with three well-studied real-life datasets to show its capability to extract different features. Finally in Section 5, we discuss the contributions and limitations of the proposed software, as well as its potential and outlook for future development.

## 2 Related Works

We survey the open-source computational neuroscience toolboxes/libraries/software embodying ML methods over the past two decades. According to the ML application on EEG, we divide tools into two categories: traditional ML and DL. The referenced standalone products for EEG and their incorporation with ML are summarized in Table1.

### Traditional ML

EEGLABEEGLAB  is an open-source MATLAB toolbox for single-trial EEG processing. EEGLAB came with a MATLAB script generating GUI and notably featured ICA implementation, with other ML processing methods added in later years. As one of the earliest propositions with high user-friendliness, EEGLAB is still actively maintained with a huge user base.

Figure 1: (a) A pipeline of EEG analysis based on XAI. (b) Dashboard of XBrainLab.

BCI2000BCI2000  is an open-source general-purpose software for brain-computer interface (BCI) research and development. BCI2000 has a GUI that is operable with shell scripts, its ML implementations cover EEG processing and classification. Although providing multiple operation modules, BCI2000 is written in C++, thus not directly compatible with popular biosignal programming languages such as MATLAB and Python.

BrainstormBrainstorm  is an open-source MATLAB software for MEG/EEG processing and visualization, providing script generation from GUI for advanced users and beginners. Brainstorm covers ML for EEG processing and some general ML algorithms such as support vector machine (SVM). Proposed over a decade ago, Brainstorm is still under active construction.

FieldtripFieldtrip  is an open-source MATLAB software for MEG/EEG analysis. Fieldtrip includes a large set of analysis algorithms, ranging from EEG processing, feature extraction, visualization and classification, many of which are ML methods. Prioritizing functional flexibility, Fieldtrip is designed to not providing a GUI, thus targeting users with some degree of programming experience.

EEGsigEEGsig  is an open-source MATLAB toolbox aiming to provide a systematic EEG machine learning framework. EEGsig is inherently a GUI, with ICA for EEG processing and several machine learning classifiers for classification. Other than traditional ML classifier implementations, EEGsig outsourced MATLAB DL toolbox to provide a shallow neural network (NN). In MATLAB based environment, EEGsig is novel for being the first EEG tool accentuated on ML, and a relatively closer attempt to DL.

MnneMNE-Python  is an open-source Python package for MEG/EEG analysis. Powered by a wide selection of scientific and numeric computing packages in Python and an active community, MNE-Python is well-documented with an enormous collection of functions. The ML methods included in MNE-Python ranges from source localization, artifact removal, and pattern recognition among others. Already widely used and established, the flaw of MNE-Python is the user threshold set by the lack of GUI support, and its genetic goal was not to accommodate DL.

### Deep learning

MOABBThe mother of all BCI benchmarks (MOABB)  is a Python project aggregating the latest development on EEG analysis algorithms. The ML methods implemented in MOABB are mostly EEG specific, including less common implementations in other software listed in this paper, such as FBCSP , task-related component analysis (TRCA)  and Xdawn . In terms of DL, MOABB provides several benchmarking convolutional neural networks (CNN). Other than the lack of GUI, since MOABB is positioned as a benchmark, the drawback lies in the extra work required for user to convert custom data into a designated format, and to learn about writing the configuration file driven pipeline.

gumpyGumpy  is an open-source Python toolbox for hybrid BCI, distinguished by its collection of differently structured DL models and ability to conduct analysis in a real-time paradigm. Gumpy is designed for laboratorial/academic BCI research, hence providing a GUI does not seem to be in the developing consideration. During our time of literature survey, the gumpy GitHub repository appears to be out of maintenance. However, the package was used on public dataset for theoretical examination as well as real-time BCI experiments in recent studies [29; 30].

braindecodeBraindecode  is an open-source Python framework for EEG DL. Braindecode is centered around DL related functionalities, including dataset augmentation algorithms, dataset sampler and a wide selection of state-of-the-art (SOTA) DL models. Braindecode also features collecting a great deal of EEG datasets and augmentation methods, making it suitable for large-scale and reproducible SOTA DL model evaluation. With respect to DL model interpretation, braindecode provides visualization of amplitude of gradient response, although the computation and results  does not necessary assemble consensus XAI methods.

Overall, as DL gradually dominates the development direction of EEG decoding algorithms, the preferred environment to build toolboxes transfers from MATLAB to Python for it is the de factolanguage for DL. The review in this paper only includes some of the easily-found or well-used EEG toolbox with ML; for DL, the DN3  and BioPyC  are not listed above, respective reasons are the differences in operand data representation and the ambiguity of interface definition. Although both software packages are inactive in maintenance, they are worth mentioning for being EEG-related, Python-based, and DL-incorporated.

## 3 XBrainLab: an Overview

XBrainLab is fully written in Python and distributed on GitHub under General Public License. It consists of six modules: data loading, data processing, train configuration setting, model evaluation, model visualization, and scripting. These modules form an end-to-end framework for EEG decoding with DL, as shown schematically in figure 0(a). In XBrainLab, the core functions of data loading and processing are realized with MNE, a Python package widely used for EEG data preprocessing and analysis. DL-related functions are based on the PyTorch framework, and the GUI was built with Tkinter. The design and function of each module are expounded in the following subsections.

### Data Import

EEG dataset file formats vary depending on the collecting devices, file contents, and prerequisite software. Currently the supported formats include SET, MAT, EDF/EDF+, GDF, CNT, and NPY/NPZ. Since XBrainLab aims to automatically gather necessary information from custom files, the supported formats were chosen on account of their popularity and content predictability. SET files store the primitive data structure from the EEGLAB toolbox, usually contain not only EEG data but rich information about the recording. EDF/EDF+ and GDF files store biosignal recordings with their critical information in headers or annotations, and CNT is the output format of Neuroscan systems, containing data recording and electrode locations on the scalp. MAT files are the standard format for data storage with MATLAB, which is a numerical programming language commonly used for electrophysiological processing; similarly, NPY/NPZ files come from NumPy, a fundamental Python package for scientific computing. To deal with the high flexibility in MAT and NPY/NPZ file contents, our solution in XBrainLab GUI is to allow users specify the content with a few additional clicks. Other file formats are not yet supported, and we planned to include them in XBrainLab in the near future.

### Data Preprocessing

When analyzing EEG data, it's important to refocus on informative parts of the data by preprocessing. Several essential preprocessing methods are included in XBrainLab, and the expansion of this module will be set upon development with user feedback and advancements in preprocessing algorithms.

   Name & Language & Interface & GUI &  &  \\   & & & &  Scripting \\  &  EEG \\ specific \\  &  general \\  & 
 **DL** \\ interpr- \\  \\  EEGLAB (2004) & MATLAB & **GUI**, CLI & **Yes** & \(\) & & \(-\) \\ BCI2000 (2004) & C++ & **GUI** & **Yes** & \(\) & \(\) & \(-\) \\ Brainstorm (2011) & MATLAB & **GUI**, CLI & **Yes** & \(\) & \(\) & \(-\) \\ Fieldtrip (2011) & MATLAB & CLI & \(-\) & \(\) & \(\) & \(-\) \\ EEGsig (2021) & MATLAB & **GUI** & No & \(\) & \(\) & \(-\) \\ MNE (2013) & Python & CLI & \(-\) & \(\) & \(\)* & \(-\) \\ MOABB (2018) & Python & CLI & \(-\) & \(\) & \(\)* & \(\) & No \\ gumpy (2018) & Python & CLI & \(-\) & & \(\)* & \(\) & No \\ braindecode (2018) & Python & CLI & \(-\) & & & \(\) & **Yes** \\ XBrainLab (2023) & Python & **GUI**, CLI & **Yes** & & & \(\) & **Yes** \\   

Table 1: EEG tool with ML methods. The integration refers to method implementation in software base and utilization of external code sources in provided tutorials/examples. The latter scenarios with general ML methods are marked with asterisks. CLI: command line interface.

Time/Window EpochingSequential time series came straight out of an EEG device could be segmented based on experiment stimuli called events, and storing EEG data in cropped or uncropped representation are both possible in available datasets. For uncropped data, users can epoch them with custom event sets and time windows.

Filtering and ResamplingBy filtering, data are restricted to a specific frequency range, forcing the following analyzing steps to focus on data parts deemed informative according to past studies. Artifacts of particular frequencies, such as low-frequency drifts or power-line noises, could also be eliminated. In addition, resampling is favored to reduce data points and save computational resources since EEG data are usually recorded with a high sampling rate.

Event Editing and Channel SelectionPreviously, useful information and recording from all channels are automatically fetched from imported files; in XBrainLab, users can modify these information for the following analysis.

### Dataset Splitting

EEG feature discovery could be explored in terms of experimental subjects, sessions and trials. For example, analyzing data from a single subject can extract features without cross-subject variability intervention, while analyzing data from multiple subjects extracts universal features across individuals . The training/validation/test set split is provided with a graphical representation, and the loaded dataset will be split according to the custom configuration regarding subjects, sessions or trials.

### Deep Learning

Neural NetworksXBrainLab implements three state-of-the-art CNN models specially designed for EEG: EEGNet , SCCNet  and ShallowFBCSPNet . The three models can serve as a deep learning baseline with empirical evidence, and for users who wish to play around with other models, the XBrainLab code structure is designed to make plugging in new models effortless.

Settings of Training ConfigurationTo reach maximum customizability in training a model, for interchangeable parameters with limited possibility, such as computing devices or available optimizers in Pytorch, will be automatically parsed for user selection. Other arbitrary parameters, such as batch size or learning rate, needs user input.

Learning Progress MonitorModel's learning progress tells whether the training configuration or model selection is effective for current data besides the model performance. XBrainLab provides real-time loss and accuracy output during training, and trend curves after training is complete.

### Result and Analysis

Model evaluationAfter training, XBrainLab automatically computes accuracy, area under receiver operating characteristic curve(AUROC) and Cohen's kappa value, and plots the confusion matrix. Users can also export raw model output and prediction for custom metrics beyond XBrainLab.

Post-hoc InterpretationIn deep learning research, building models to exceed state-of-the-art performance is still one of the mainstream research motivations. The discussion on explainable artificial intelligence (XAI)  has been gaining more interest as the DL model behavior lacks transparency . In EEG analysis with DL, the model explanations could serve as a guideline for researchers to identify meaningful parts in the signal, as the intrinsic features in EEG are not obvious upon direct inspection. In XBrainLab, the gradient response of the model on inferenced data in time domain and frequency domain, usually called saliency map , is provided and attainable in channel-time representation, topological plots and 3D location-time plots. With the Captum  package being the workhorse, exploiting more model interpretation algorithms is one of our top priority in XBrainLab development.

### Scripting

Historical actions on XBrainLab GUI will be recorded, and the record can be exported as Python script at any time, which is executable with or without showing the GUI. This feature is designed to reduce the trouble of reproducing operations and to act as a boilerplate for custom scripts.

## 4 Case Studies

In this section we validate XBrainLab functionalities with multiple real EEG datasets. The analysis for all cases are in individual training scheme, where the trials used for training and testing are from the same subject . The dataset splitting ratios follow . All figures in this section are produced with XBrainLab.

### Motor imagery

Motor imagery (MI) EEG is commonly used as BCI control, the data records body part movement intention related brain oscillations . For case study, we use the BCI competition IV 2a dataset  for it's one of the most studied public datasets in the field . The dataset was collected from 9 subjects, each subject has two sessions which is consist of 72 trials per task. There are 4 tasks corresponding to different types of imagined movement, namely left hand, right hand, feet, and tongue. The subject selection and preprocessing procedure follows , only that the EEG segments in this study are extracted from 0-3.5 seconds after event cue onset.

Figure 2 and figure 4 depicts the saliency map interpretation of a trained SCCNet  model. For left and right hand tasks, there are strong responses in C4 and C3 channels respectively, which aligns with the literature  that lateral movements are corresponding to its contralateral brain region around the motor cortex. For feet and tongue tasks, the activation in middle and left of motor cortex are relatively stronger, exhibiting the model's tendency to misclassify these two tasks as each other or as the right hand. The confusion matrix of the model in analysis in shown in Figure 2(a). Figure 2(b) further shows stronger responses from all tasks in the mu rhythm (8-12Hz), as suggested in literature . Saliency map in channel-time representation and 3d location-time plots of the model in analysis can be found in the appendix.

### Event-Related Negativity

Event-related negativity (ERN) refers to EEG perturbations after the subject encounters erroneous stimuli . For case study, we use the dataset from the BCI challenge on Kaggle . The dataset contains ERN responses from 26 subjects practicing P300 BCI speller task, class 0 and 1 marks

Figure 3: Visualization of a SCCNet model in individual analysis with MI dataset subject 3. (a) Confusion matrix. (b) Saliency time-frequency spectrograms of every task. Upper left: Feet; Upper right: Right Hand; Lower left: Left Hand; Lower right: Tongue.

Figure 2: MI saliency topological map of a SCCNet model in individual analysis with subject 3. Upper left: Feet; Upper right: Right Hand; Lower left: Left Hand; Lower right: Tongue.

correct and erroneous feedback from the speller respectively. Each subject has 5 sessions, which gives a total of 340 trials per subject. The subject selection and preprocessing procedure follows .

Figure 5 shows the saliency topological map interpretation across the test trials over time, and the saliency map in channel-time representation of a trained EEGNet model . The topological map shows distinctive response in the FCz channel, consistent with previous findings that ERN is the most negative in the fronto-central region . The pattern developed around the edge of EEG cap are presumptively muscle artifacts, relatively speaking, the color-intensive area in the parietal region could be another ERN feature manifestation .

In terms of channel-time representation, both classes show strong activation in the sample points about 400 500 milliseconds into the trial. For erroneous feedback, the visualization is comparable with the EEGNet model literature , ERN literature,  and SOTA DL interpretation result . The confusion matrix, saliency map in 3d location-time plots and time-frequency spectrograms of the model in analysis are presented in the appendix.

### Steady-State Visual-Evoked Potential

Steady state visual evoked potential (SSVEP) refers to quasi-periodic oscillatory responses from the brain evoked by stimuli flickering in certain frequencies . For case study we use the MAMEM SSVEP experiment 2 dataset . The dataset was collected from 11 subjects. In the experiments, the subjects are instructed to focus on a box flickering in one from the five different frequencies, namely 6.6, 7.5, 8.57, 10, and 12Hz. In the original dataset, each subject has 5 sessions, and every session is consisted of 25 trials. Subject selection, channel selection, trial segmentation and preprocessing procedures follow .

Figure 7 shows the visualizations of a trained SCCNet model . From the saliency map in channel-time representation (figure 6(a)), the interleaved low/high values form roughly discernible patterns of different frequencies. Furthermore, the most intense activations of each class unanimously appear in the Oz channel, which locates in the middle of the occipital lobe (figure 6(c)), revealing the nature of the data are visual tasks. In figure 6(b) the fundamental and harmonic frequencies can be identified in respective spectrograms. Another observation deduced from the confusion matrix shown in figure 6 is that some stimulus frequencies are more challenging for the model. Although the training set has slightly unequal number of trials

Figure 4: Saliency map of each task plotted in 3D, camera set in the horizontal plane on top of the head. (a) Feet. (b) Right hand. (c) Left hand. (d) Tongue.

Figure 5: ERN visualization of a EEGNet model in individual analysis with subject 7. (a) saliency topological map. (b) channel-time saliency map.

Figure 6: Confusion matrix of a SCNNet model in individual analysis with SSVEP dataset subject 11.

(4:5:6:5:5 for the 5 classes) for each task, this phenomenon is likely to be stemming from the fact that the SNR is unevenly distributed across different frequency bands, as previous studies suggested.

## 5 Conclusion and Future Work

We have developed XBrainLab, an open-source Python software for explainable EEG decoding, designed for explainable EEG decoding. Apart from other computational tools, XBrainLab uniquely combines critical raw EEG signal processing, deep learning, and interpretable visualization methods, all with easy access for both basic and advanced EEG analysis. Our future plans involve extending the documentation to include examples of common EEG paradigms and broadening the range of available visualization and preprocessing algorithms. In summary, XBrainLab serves as an essential tool for researchers of all levels, facilitating neuroscientific breakthroughs through advanced explainable deep learning techniques in EEG data analysis.