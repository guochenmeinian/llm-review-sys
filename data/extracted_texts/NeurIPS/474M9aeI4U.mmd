# COVE: Unleashing the Diffusion Feature Correspondence for Consistent Video Editing

Jiangshan Wang\({}^{1}\)1, Yue Ma\({}^{2*}\), Jiayi Guo\({}^{1*}\), Yicheng Xiao\({}^{1}\), Gao Huang\({}^{1}\), Xiu Li\({}^{1}\)

\({}^{1}\)Tsinghua University, \({}^{2}\)HKUST

https://cove-video.github.io/

###### Abstract

Video editing is an emerging task, in which most current methods adopt the pre-trained text-to-image (T2I) diffusion model to edit the source video in a zero-shot manner. Despite extensive efforts, maintaining the temporal consistency of edited videos remains challenging due to the lack of temporal constraints in the regular T2I diffusion model. To address this issue, we propose **CO**rrespondence-guided **V**ideo **E**diting (COVE), leveraging the inherent diffusion feature correspondence to achieve high-quality and consistent video editing. Specifically, we propose an efficient sliding-window-based strategy to calculate the similarity among tokens in the diffusion features of source videos, identifying the tokens with high correspondence across frames. During the inversion and denoising process, we

Figure 1: We propose **CO**rrespondence-guided **V**ideo **E**diting (COVE), which leverages the correspondence information of the diffusion feature to achieve consistent and high-quality video editing. Our method is capable of generating high-quality edited videos with various kinds of prompts (style, category, background, etc.) while effectively preserving temporal consistency in generated videos.

sample the tokens in noisy latent based on the correspondence and then perform self-attention within them. To save GPU memory usage and accelerate the editing process, we further introduce the temporal-dimensional token merging strategy, which can effectively reduce redundancy. COVE can be seamlessly integrated into the pre-trained T2I diffusion model without the need for extra training or optimization. Extensive experiment results demonstrate that COVE achieves the start-of-the-art performance in various video editing scenarios, outperforming existing methods both quantitatively and qualitatively. The code will be release at https://github.com/wangjiangshan0725/COVE

## 1 Introduction

Diffusion models [27; 63; 65] have shown exceptional performance in image generation , thereby inspiring their application in the field of image editing [6; 25; 7; 53; 67; 24]. These approaches typically leverage a pre-trained Text-to-Image (T2I) stable diffusion model , using DDIM  inversion to transform source images into noise, which is then progressively denoised under the guidance of a prompt to generate the edited image.

Despite satisfactory performance in image editing, achieving high-quality video editing remains challenging. Specifically, unlike the well-established open-source T2I stable diffusion models , comparable T2V diffusion models are not as mature due to the difficulty of modeling complicated temporal motions, and training a T2V model from scratch demands substantial computational resources [26; 29; 62]. Consequently, there is a growing focus on adapting the pre-trained T2I diffusion for video editing [16; 33; 11; 72; 73; 54]. In this case, maintaining temporal consistency in edited videos is one of the biggest challenges, which requires the generated frames to be stylistically coherent and exhibit smooth temporal transitions, rather than appearing as a series of independent images. Numerous methods have been working on this topic while still facing various limitations, such as the inability to ensure fine-grained temporal consistency (leading to flickering [33; 54] or blurring  in generated videos), requiring additional components [30; 72; 11; 73] or needing extra training or optimization [73; 69; 41], etc.

In this work, our goal is to achieve highly consistent video editing by leveraging the intra-frame correspondence relationship among tokens, which is intuitively closely related to the temporal consistency of videos: If corresponding tokens across frames exhibit high similarity, the resulting video will thus demonstrate high temporal consistency. Taking a video of a man as an example, if the token representing his nose has high similarity across frames, his nose will be unlikely to deform or flicker throughout the video. However, how to obtain accurate correspondence information among tokens is still largely under-explored in existing works, although the intrinsic characteristic of the video editing task (i.e., the source video and edited video are expected to share similar motion and semantic layout) determines that it naturally exists in the source video. Some previous methods [11; 73] leverage a pre-trained optical-flow model to obtain the flowing trajectory of each token across frames, which can be seen as a kind of coarse correspondence information. Despite the self-attention among tokens in the same trajectory can enhance the temporal consistency of the edited video, it still encounters two primary limitations: Firstly, these methods heavily rely on a highly accurate pre-trained optical-flow model to obtain the correspondence relationship of tokens, which is not available in many scenarios . Secondly, supposing we have access to an extremely accurate optical-flow model, it is still only able to obtain the coarse one-to-one correspondence among tokens in different frames (Figure 1(a)), which would lead to the loss of information because one token is highly likely to correspond to multiple tokens in other frames in most cases (Figure 1(b)).

Figure 2: **Comparison between COVE (our method) and previous methods[11; 73].**

Addressing these problems, we notice that the inherent diffusion features naturally contain precise correspondence information. For instance, it is easy to find the corresponding points between two images by extracting their diffusion features and calculating the cosine similarity between tokens . However, until now none of the existing works have successfully utilized this characteristic in more complicated and challenging tasks such as video editing. In this paper, we propose COVE, which is the first work unleashing the potential of inherent diffusion feature correspondence to significantly enhance the quality and temporal consistency in video editing. Given a source video, we first extract the diffusion feature of each frame. Then for each token in the diffusion feature, we obtain its corresponding tokens in other frames based on their similarity. Within this process, we propose a sliding-window-based approach to ensure computational efficiency. In our sliding-window-based method, for each token, it is only required to calculate the similarity between it and the tokens in the next frame located within a small window, identifying the tokens with the top \(K\) (\(K>1\)) highest similarity. After the correspondence calculation process, for each token, the coordinates of its \(K\) corresponding tokens in each other frame can be obtained. During the inversion and denoising process, we sample the tokens in noisy latents based on the obtained coordinates. To reduce the redundancy and accelerate the editing process, token merging is applied in the temporal dimension, which is followed by self-attention. Our method can be seamlessly integrated into the off-the-shelf T2I diffusion model without extra training or optimization. Extensive experiments demonstrate that COVE significantly improves both the quality and the temporal consistency of generated videos, outperforming a wide range of existing methods and achieving state-of-the-art results.

## 2 Related Works

### Diffusion-based Image and Video Generation.

Diffusion Models [65; 27; 63] have recently showcased impressive results in image generation, which generates the image through gradual denoising from the standard Gaussian noise[12; 13; 52; 21; 57; 64; 22]. A large number of efforts on diffusion models [28; 34; 60] has enabled it to be applied to numerous scenarios [3; 15; 35; 39; 44; 49; 50; 14; 58; 9; 23; 47; 42; 18]. With the aid of large-scale pretraining [55; 61], text-to-image diffusion models exhibit remarkable progress in generating diverse and high-quality images [51; 71; 56; 57; 59; 19; 48; 18]. ControlNet  enables users to provide structure or layout information for precise generation. Naturally, diffusion models have found application in video synthesis, often by integrating temporal layers into image-based DMs [4; 26; 29; 70; 10]. Despite successes in unconditional video generation [29; 74; 45], text-to-video diffusion models lag behind their image counterparts.

### Text-to-Video Editing.

There are increasing works adopting the pre-trained text-to-image diffusion model to the video editing task [43; 68; 69; 46; 20], where keeping the temporal consistency in the generated video is the most challenging. Recently, a large number of works focusing on zero-shot video editing has been proposed. FateZero  proposes to use attention blending to achieve high-quality edited videos while struggling to edit long videos. TokenFlow  reduces the effects of flickering through the linear combinations between diffusion features, while the smoothing strategy can cause blurring in the generated video. RAVE  proposes the randomized noise shuffling method, suffering the problem of fine details flickering. There are also a large number of methods that enhance the temporal consistency with the aid of pre-trained optical-flow models [73; 72; 11; 30]. Although the effectiveness of them, all of them severely rely on a pre-trained optical-flow model. Recent works  illustrate that the diffusion feature contains rich correspondence information. Although VideoSwap  adopts this characteristic by tracking the key points across frames, it still needs users to provide the key points as the extra addition manually.

## 3 Method

In this section, we will introduce COVE in detail, which can be seamlessly integrated into the pre-trained T2I diffusion model for high-quality and consistent video editing without the need for training or optimization (Figure 3). Specifically, given a source video, we first extract the diffusion feature of each frame using the pre-trained T2I diffusion model. Then, we calculate the one-to-manycorrespondence of each token across frames based on cosine similarity (Figure 2(a)). To reduce resource consumption during correspondence calculation, we further introduce an efficient sliding-window-based strategy (Figure 4). During each timestep of inversion and denoising in video editing, the tokens in the noisy latent are sampled based on the correspondence and then merged. Through the self-attention among merged tokens (Figure 2(b)), the quality and temporal consistency of edited videos are significantly enhanced.

### Preliminary

**Diffusion Models.** DDPM  is the latent generative model trained to reconstruct a fixed forward Markov chain \(x_{1},,x_{T}\). Given the data distribution \(x_{0} q(x_{0})\), the Markov transition \(q(x_{t}|x_{t-1})\) is defined as a Gaussian distribution with a variance schedule \(_{t}(0,1)\).

\[q(_{t}|_{t-1})=(_{t};}_{t- 1},_{t}).\] (1)

To generate the Markov chain \(x_{0},,x_{T}\), DDPM leverages the reverse process with a prior distribution \(p(x_{T})=(x_{T};0,)\) and Gaussian transitions. A neural network \(_{}\) is trained to predict noises, ensuring that the reverse process is close to the forward process.

\[p_{}(_{t-1}|_{t})=(_{t-1};_{}( {x}_{t},,t),_{}(_{t},,t)),\] (2)

where \(\) indicates the textual prompt. \(_{}\) and \(_{}\) are predicted by the denoising model \(_{}\). Since the diffusion and denoising process in the pixel space is computationally extensive, latent diffusion  is proposed to address this issue by performing these processes in the latent space of a VAE .

**DDIM Inversion.** DDIM can convert random noise to a deterministic \(_{0}\) during sampling [64; 13]. The inversion process in deterministic DDIM can be formulated as follows:

\[_{t+1}=}{_{t}}}_{t}+}(-1}}-}-1}) _{}(_{t}),\] (3)

where \(_{t}\) denotes \(_{i=1}^{t}(1-_{i})\). The inversion process of DDIM is utilized to transform the input \(_{0}\) into \(_{T}\), facilitating subsequent tasks such as reconstruction and editing.

### Correspondence Acquisition

As discussed in Section 1, intra-frame correspondence is crucial for the quality and temporal consistency of edited videos while remaining largely under-explored in existing works. In this section, we introduce our method for obtaining correspondence relationships among tokens across frames.

Figure 3: **The overview of COVE.** (a). Given a source video, we extract the diffusion feature of each frame using the pre-trained T2I model and calculate the correspondence among tokens (detailed in Figure 4). (b). During the video editing process, we sample the tokens in noisy latent based on correspondence and apply self-attention among them. (c). The correspondence-guided attention can be seamlessly integrated into the T2I diffusion model for consistent and high-quality video editing.

**Diffusion Feature Extraction.** Given a source video \(\) with \(N\) frames, a VAE  is employed on each frame to extract the latent features \(=\{_{1},,_{N}\}\), where \(^{N H W d}\). Here, \(H\) and \(W\) denote the height and width of the latent feature and \(d\) denotes the dimension of each token. For each frame of \(\), we add noise of a specific timestep \(t\) and feed the noisy frame \(^{t}=\{_{1}^{t},,_{N}^{t}\}\) into the pre-trained T2I model \(f_{}\) respectively. The diffusion feature (i.e., the intermediate feature from the U-Net decoder) is extracted through a single step of denoising :

\[=\{_{i}\}=\{f_{}(_{i}^{t})\},i\{1,,N\},\] (4)

where \(^{N H W d}\), denoting the normalized diffusion feature of each frame.

**One-to-many Correspondence Calculation.** For each token within the diffusion feature \(\), its corresponding tokens in other frames are identified based on the cosine similarity. Without loss of generality, we could consider a specific token \(_{\{i,h_{i},w_{i}\}}\) in the \(i\)th frame \(_{i}\) with the coordinate \([h_{i},w_{i}]\). Unlike previous methods where only one corresponding token of \(_{\{i,h_{i},w_{i}\}}\) can be identified in each frame (Figure 1(a)), our method can obtain the one-to-many correspondences simply by selecting tokens with the top \(K\) highest similarity in each frame. We record their coordinates, which are used for sampling the tokens for self-attention in the subsequent inversion and denoising process. To implement this process, the most straightforward method is through a direct matrix multiplication of the normalized diffusion feature \(\).

\[=^{T},\] (5)

where \(^{(N H W)(N H W)}\) represents the cosine similarity between each token and all tokens in the diffusion feature of the video.

The similarity between \(_{\{i,h_{i},w_{i}\}}\) and all \(N H W\) tokens in the feature is given by \([i,h_{i},w_{i},:,:,:]\). The coordinates of the corresponding tokens in the \(j\)th frame (\(j\{1,,N\}\)) are then obtained by selecting the tokens with the top \(K\) similarities in the \(j\)th frame.

\[h_{j}^{k},w_{j}^{k}=k_{(x^{k},y^{k})}( [i,h_{i},w_{i},j,x^{k},y^{k}]),\] (6)

Here the top-\(k\)-\(()\) denotes the operation to find coordinates of the top \(K\) biggest values in a matrix, where \(k\{1,,K\}\). \([h_{j}^{k},w_{j}^{k}]\) represents the coordinates of the token in \(j\)th frame which has highest similarity with \(_{\{i,h_{i},w_{i}\}}\). A similar process can be conducted for each token of \(\), thereby obtaining their correspondences among frames.

**Sliding-window Strategy.** Although the one-to-many correspondence among tokens can be effectively obtained through the above process, it requires excessive computational resources because \((N H W)\) is always a huge number, especially in long videos. As a result, the computational complexity of this process is extremely high, which can be represented as \((N^{2} H^{2} W^{2} d)\). At the same time, multiplication between these two huge matrices consumes a substantial amount

Figure 4: **Sliding-window-based strategy for correspondence calculation.** represents the token \(_{\{i,h_{i},w_{i}\}}\). ** and represents the obtained corresponded tokens in other frames.

of GPU memory in practice. These limitations severely limit its applicability in many real-world scenarios, such as on mobile devices.

To address the above problem, we further propose the sliding-window-based strategy as an alternative, which not only effectively obtains the one-to-many correspondences but also significantly reduces the computational overhead (Figure 4). Firstly, for the token \(_{\{i,h_{i},w_{i}\}}\), it is only necessary to calculate its similarity with the tokens in the next frame \(_{i+1}\) instead of in all frames, i.e.,

\[_{i}=_{i}_{i+1}^{T}.\] (7)

\(_{i}^{H W H W}\) denotes the similarity between the tokens in \(i\)th frame and those in \((i+1)\)th frame. The overall similarity matrix is \(=\{_{i}\},i\{1,2,,N-1\}\), where \(^{(N-1) H W H W}\). Then, we obtain the \(K\) corresponded tokens of \(_{\{i,h_{i},w_{i}\}}\) in \(_{i+1}\) through \(_{i}\),

\[h_{i+1}^{k},w_{i+1}^{k}=k_{(x^{k},y^{k})}( {S}_{i}[h_{i},w_{i},x^{k},y^{k}]),\] (8)

For tokens in \((i+2)\)th frame, instead of considering \(_{\{i,h_{i},w_{i}\}}\), we identify the tokens in \((i+2)\)th frame which have the top \(K\) largest similarity with the token \(_{\{i+1,h_{i+1}^{1},w_{i+1}^{1}\}}\) through the \(_{i+1}\). Similarly, we can obtain the corresponding token in other future or previous frames.

\[h_{i+2}^{k},w_{i+2}^{k}=k_{(x^{k},y^{k})}( {S}_{i+1}[h_{i+1}^{1},w_{i+1}^{1},x^{k},y^{k}]),\] (9)

Through the above process, the overall complexity is reduced to \(((N-1) H^{2} W^{2} d)\). Furthermore, it is noteworthy that frames in a video exhibit temporal continuity, implying that the spatial positions of corresponding tokens are unlikely to change significantly between consecutive frames. Consequently, for the token \(_{\{i,h_{i},w_{i}\}}\), it is enough to only calculate the similarity within a small window of length \(l\) in the adjacent frame, where \(l\) is much smaller than \(H\) and \(W\),

\[_{i+1}^{w}=_{i+1}[h_{i}-l/2:h_{i}+l/2,w_{i}-l/2:w_{i}+l/2,:].\] (10)

\(_{i+1}^{w}^{l l d}\) represents the tokens in \(_{i+1}\) within the sliding window. We calculate the cosine similarity between \(_{\{i,h_{i},w_{i}\}}\) and the tokens in \(_{i+1}^{w}\), selecting tokens with top \(K\) highest similarity within \(_{i+1}^{w}\). This approach further reduces the computational complexity to \(((N-1) H W l^{2} d)\) and the GPU memory consumption is also significantly reduced in practice. Additionally, it is worth noting that calculating correspondence information from the source video is only conducted once before the inversion and denoising process of video editing. Compared with the subsequent editing process, this process only takes negligible time.

### Correspondence-guided Video Editing.

In this section, we explain how to apply the correspondence information to the video editing process (Figure 2(c)). In the inversion and denoising process of video editing, we sample the corresponding tokens from the noisy latent for each token based on the coordinates obtained in Section 3.2. For the token \(_{i,h_{i},w_{i}}^{t}\), the set of corresponding tokens in other frames at a timestep \(t\) is:

\[=\{_{\{j,h_{j}^{k},w_{j}^{k}\}}^{t}\},j\{1,,i-1,i+1, ,N\},k\{1,,K\}.\] (11)

We merge these tokens following , which can accelerate the editing process and reduce GPU memory usage without compromising the quality of editing results:

\[}=().\] (12)

Then, the self-attention is conducted on the merged tokens,

\[=_{\{i,h_{i},w_{i}\}}^{t},==},\] (13)

\[(,,)=( ^{T}}{}}),\] (14)

where \(}\) is the scale factor. The above process of correspondence-guided attention is illustrated in Figure 2(b). Following the previous methods [73; 11], we also retain the spatial-temporal attention  in the U-Net. In spatial-temporal attention, considering a query token, all tokens in the video serve as keys and values, regardless of their relevance to the query. This correspondence-agnostic self-attention is not enough to maintain temporal consistency, introducing irrelevant information into each token, and thus causing serious flickering effects [11; 16]. Our correspondence-guided attention can significantly alleviate the problems of spatial-temporal attention, increasing the similarity of corresponding tokens and thus enhancing the temporal consistency of the edited video.

## 4 Experiment

### Experimental Setup

In the experiment, we adopt Stable Diffusion (SD) 2.1 from the official Huggingface repository for COVE, employing 100 steps of DDIM inversion and 50 steps of denoising. To extract the diffusion feature, the noise of the specific timestep \(t=261\) is added to each frame of the source video following . The feature is then extracted from the intermediate layer of the 2D Unet decoder during a single step of denoising. The window size \(l\) is set to 9 for correspondence calculation, and \(k\) is set to 3 for correspondence-guided attention. The merge ratio for token merging is 50%. For both qualitative and quantitative evaluation, we select 23 videos from social media platforms such as TikTok and other publicly available sources [1; 2]. Among these 23 videos, 3 videos have a length of 10 frames, 15 videos have a length of 20 frames, and 5 videos have a length of 32 frames. The experiments are

Figure 5: **Qualitative results of COVE.** COVE can effectively handle various types of prompts, generating high-quality videos. For both global editing (e.g., style transferring and background editing) and local editing (e.g., modifying the appearance of the subject), COVE demonstrates outstanding performance. Results are best-viewed zoomed-in.

conducted on a single RTX 3090 GPU for our method unless otherwise specified. We compare COVE with 5 baseline methods: FateZero , TokenFlow , FLATTEN , FRESCO  and RAVE . For all of these baseline methods, we follow the default settings from their official Github repositories. The more detailed experimental settings of our method are provided in Appendix A.

### Qualitative Results

We evaluate COVE on various videos under different types of prompts including both global and local editing (Figure 5). Global editing mainly involves background editing and style transferring. For background editing, COVE can modify the background while keeping the subject of the video unchanged (e.g. Third row, first column. "a car driving in milky way"). For style transfer, COVE can effectively modify the global style of the source video according to the prompt (e.g. Third row, second column. "Van Gogh style"). Our prompts for local editing include changing the subject of the video to another one (e.g. Third row, third column. "A cute raccoon") and making local edits to the subject (e.g. fifth row, third column. "A sorrow woman"). For all of these editing tasks, COVE demonstrates outstanding performance, generating frames with high visual quality while successfully preserving temporal consistency. We also compare COVE with a wide range of state-of-the-art video editing methods (Figure 6). The experimental results illustrate that COVE effectively edits the video with high quality, significantly outperforming the previous methods.

### Quantitative Results

For quantitative comparison, we follow the metrics proposed in VBench , including Subject Consistency, Motion Smoothness, Aesthetic Quality, and Imaging Quality. Among them, Subject Consistency assesses whether the subject (e.g., a person) remains consistent throughout the whole

Figure 6: **Qualitative comparison of COVE and various state-of-the-art methods. Our method outperforms previous methods across a wide range of source videos and editing prompts, demonstrating superior visual quality and temporal consistency. Results are best-viewed zoomed-in.**

video by calculating the similarity of DINO  feature across frames. Motion Smoothness utilizes the motion priors of the video frame interpolation model  to evaluate the smoothness of the motion in the generated video. Aesthetic Quality uses the LAION aesthetic predictor  to assess the artistic and beauty value perceived by humans on each frame. Imaging Quality evaluates the degree of distortion in the generated frames (e.g., blurring, flickering) through the MUSIQ  image quality predictor. Each video undergoes editing with 3 global prompts (such as style transferring, background editing, etc.) and 2 local prompts (such as editing the appearance of the subject in the video), generating a total of 115 text-video pairs. For each metric, we report the average score of these 115 videos. We further conducted a user study with 45 participants following . Participants are required to choose the most preferable results among these methods. The result is shown in Table 1. Among various methods, COVE achieves outstanding performance in both qualitative metrics and user studies, further demonstrating its superiority.

### Ablation Study

We conduct an ablation study to illustrate the effectiveness of the **Correspondence-guided attention** and the number of tokens selected in each frame (i.e., the value of \(K\)). The experimental results (Table 2 and Figure 7) illustrate that without correspondence-guided attention, the edited video exhibits obvious temporal inconsistency and flickering effects (which is marked in yellow and orange boxes in Figure 7), thus severely impairing the visual quality. As \(K\) increases from 1 to 3, the generated video contains more fine-grained details, exhibiting better visual quality. However, further increasing \(K\) to 5 does not significantly improve the video quality. We also illustrate the effectiveness of **temporal dimensional token merging**. By merging the tokens with high correspondence across frames, the editing process becomes more efficient (Table 3) while there is no significant decrease in the quality of the edited video (Figure 8). The ablation of the **sliding-window size**\(l\) is shown in Appendix B. If the window size is too small, the actual corresponding token may not be included within the window, resulting in suboptimal correspondence and poor editing results. On the other hand, a too-large window size is not necessary for identifying the corresponding tokens, which would lead to high computational complexity and excessive memory usage. The experiment results illustrate that \(l=9\) is suitable to strike a balance. Additionally, we also **visualize the correspondence** obtained by COVE, which is shown in Appendix C.

    & Subject Consistency & Motion Smoothness & Aesthetic Quality & Imaging Quality & User Study \\  FateZero  & 0.9622 & 0.9547 & 0.6258 & 0.6951 & 7.4\% \\ TokenFlow  & 0.9513 & 0.9803 & 0.6904 & 0.7354 & 13.0\% \\ HATHEN  & 0.9617 & 0.9622 & 0.6544 & 0.7155 & 14.8\% \\ FRESCO  & 0.9358 & 0.9737 & 0.6823 & 0.6319 & 9.2\% \\ RAVE  & 0.9518 & 0.9732 & 0.6369 & 0.7355 & 11.1\% \\
**COVE (Ours)** & **0.9731** & **0.9892** & **0.7122** & **0.7441** & **44.5\%** \\   

Table 1: **Quantitative comparison** among COVE and a wide range of state-of-the-art video editing methods. The evaluation metrics can effectively reflect the temporal consistency and frame quality of generated videos. COVE illustrates superior performance in both keeping the temporal consistency and generating frames with high quality in edited videos.

    & Subject Consistency & Motion Smoothness & Aesthetic Quality & Imaging Quality \\  w/o & 0.9431 & 0.9049 & 0.6913 & 0.7132 \\ \(K=1\) & 0.9637 & 0.9817 & 0.6979 & 0.7148 \\ \(K=3\) & 0.9731 & **0.9892** & 0.7122 & **0.7441** \\ \(K=5\) & **0.9745** & 0.9886 & **0.7167** & 0.7429 \\   

Table 2: **Ablation study on the value of \(K\) in correspondence-guided attention. w / o means without correspondence-guided attention in Unet. When \(K=3\) the quality of the video is the best.**

Figure 7: Ablation study about the correspondence-guided attention and the value of \(K\). w / o means do not apply correspondence-guided attention.

## 5 Conclusion

In this paper, we propose COVE, which is the first to explore how to employ inherent diffusion feature correspondence in video editing to enhance editing quality and temporal consistency. Through the proposed efficient sliding-window-based strategy, the one-to-many correspondence relationship among tokens across frames is obtained. During the inversion and denoising process, self-attention is performed within the corresponding tokens to enhance temporal consistency. Additionally, we also apply token merging in the temporal dimension to improve the efficiency of the editing process. Both quantitative and qualitative experimental results demonstrate the effectiveness of our method, which outperforms a wide range of previous methods, achieving state-of-the-art editing quality.

**Limitations.** The limitation of our method is discussed in Appendix G.