# Why Not Transform Chat Large Language Models to Non-English?

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

The scarcity of non-English data limits the development of non-English large language models (LLMs). Transforming English-centric LLMs to non-English has been identified as an effective and resource-efficient method. Previous works start from base LLMs and perform knowledge distillation (KD) with data generated by stronger LLMs, e.g. GPT-4. Compared to base LLMs, chat LLMs are further optimized for advanced abilities, e.g. multi-turn conversation and human preference alignment, and thus more powerful in both helpfulness and safety. However, transforming a chat LLM involves two critical issues: (1) How can we effectively transfer advanced abilities without their supervised data? (2) How can we prevent the original knowledge from catastrophic forgetting during transformation? We target these issues by introducing a simple framework called TransLLM. For the first issue, TransLLM divides the transfer problem into some common sub-tasks with the translation chain-of-thought, which uses the translation as the bridge between English and non-English step-by-step. We further enhance the performance of sub-tasks with publicly available data. For the second issue, we propose a method comprising two synergistic components: low-rank adaptation for training to maintain the original LLM parameters, and recovery KD, which utilizes data generated by the chat LLM itself to recover the original knowledge from the frozen parameters. In the experiments, we transform the LLaMA-2-chat-7B to the Thai language. Our method, using only single-turn data, outperforms strong baselines and ChatGPT on multi-turn benchmark MT-bench. Furthermore, our method, without safety data, rejects more harmful queries of safety benchmark AdvBench than both ChatGPT and GPT-4.

## 1 Introduction

Recently, significant influence has been demonstrated by chat large language models (LLMs), such as ChatGPT (OpenAI, 2022), Palm-2 (Anil et al., 2023), and LLaMA-2-chat (Touvron et al., 2023). Their high capabilities rely on massive data and complex training processes. Taking the LLaMA-2-chat as an example, the training usually includes the following steps: (1) pre-training (PT) on a

Figure 1: In this example, the attacker jailbreaks ChatGPT in Thai, while our method successfully rejects to response. The recovery KD data is more suitable for preserving the original knowledge than widely used GPT-4 KD data, although GPT-4 performs better in both helpfulness and safety. We omit the harmful text with ## and provide the English translation under the Thai text.

large monolingual corpus to obtain the base LLM; (2) supervised fine-tuning (SFT) on multi-turn dialogue datasets; (3) iteratively refining on human preference datasets using reinforcement learning with human feedback (RLHF) methodologies (Ouyang et al., 2022). These steps help in creating LLMs that not only understand and generate human-like text but also align with human values, and therefore provide safe and useful responses.

Unfortunately, popular unlabeled and labeled training data is English-dominated. Consequently, LLMs are less satisfying in terms of both usefulness and safety when being applied to non-English. Yong et al. (2023) have shown that even powerful LLMs, such as GPT-4, are vulnerable to safety concerns in non-English.

To improve the non-English performance, recent works attempt to transfer knowledge from English to non-English. However, they focus on base LLMs instead of powerful chat LLMs. Basically, they start from base LLMs and use knowledge distillation (KD) data generated by the strong LLM, like GPT-4, for transfer training and instruction tuning. For example, PolyLM (Wei et al., 2023) transfers English knowledge implicitly via multilingual instruction tuning on a multilingual base LLM. X-LLaMA (Zhu et al., 2023) supplements the multilingual instruction-following task with the translation task to build semantic alignment across languages.

When transforming the base LLMs, instruct tuning is performed simultaneously with or after transfer training. Therefore, the instruction following knowledge, i.e. the basic conversation knowledge, will not be overridden by extra knowledge. However, for chat LLMs, the advanced conversation knowledge, especially human preference, has been incorporated into the model parameters during fine-tuning. As a result, subsequent transfer training in previous works will result in catastrophic forgetting of such knowledge. What is worse, the high-quality STF data used for training the chat LLM is precious and usually unavailable. Therefore, transforming a chat LLM involves two critical issues: (1) How can we transfer advanced abilities with limited available data? (2) How can we prevent the original English knowledge from catastrophic forgetting during transfer?

To build safe non-English LLMs as shown in Figure 1, we target these issues by introducing a simple framework called TransLLM. For the first issue, TransLLM utilizes the translation chain-of-thought (TCOT) (Zhang et al., 2023), which models the transfer as some common sub-tasks. During TCOT, the LLM will handle the non-English query step-by-step in single inference: it first translates the query to English; then it responds to the query in English; and finally it, generates the non-English answer based on all the above context. We further enhance the the performance of sub-tasks with publicly available data thus TCOT can transfer English knowledge effectively. For the second issue, we propose a method comprising two synergistic components: (1) We employ the low-rank adaptation (LoRA) (Hu et al., 2021) for training to maintain the original LLM parameters. (2) We introduce recovery KD, utilizing data generated by the chat LLM itself, to recover the original knowledge from the frozen parameters. The recovery KD data can be fitted easily using the original parameters. This enables the LLM to learn a "shortcut" that uses the English knowledge from the original parameters.

As shown in Figure 2, TransLLM organizes all the above ideas into the following steps: (1) Model extension: we extend the model with LoRA modules and fine-grained target language vocabulary. (2) Target language pre-training: we pre-train the chat LLM on the monolingual target language data so that the LLM can leverage such knowledge to improve translation and target language responses. (3) Translation pre-training: we further train the LLM with a bi-directional translation task between English and the target language, and we also introduce the English language modeling task to protect the English embeddings. (4) Transfer fine-tuning: we fine-tune the LLM on TCOT, recover KD, and translation data so that the LLM can respond in English, the target language, and the translation tasks automatically.

We conduct comprehensive experiments for transforming the LLaMA-2-chat-7B from English to Thai. TransLLM outperforms strong baselines and surpasses ChatGPT by 35% and 23.75% for the first and second turns on the MT-bench with statistical significance. More importantly, we attain an improvement of 14.8% and 8.65% over ChatGPT and GPT-4 respectively on the safety benchmark AdvBenchmark with statistical significance.

Our main contributions are summarized as follows:

* In this paper, we highlight the advantages and challenges of transforming a chat LLM to non-English and propose a simple yet effective framework for this end.

* The experiments indicate TransLLM successfully transfer advanced abilities, e.g. multi-turn conversation and human preference alignment, with limited available data. TransLLM, with only 7 billion parameters, outperforms ChatGPT in Thai in both helpfulness and safety.
* Analysis shows that recovery KD plus with LoRA successfully preserves the original knowledge. The TransLLM model mostly uses the original knowledge for English while uses the new knowledge for Thai.
* We discuss the limitations of TransLLM, and point out several potential future directions. We will make our code and datasets publicly available (please refer to supplementary materials). We hope this work can lay a solid foundation for developing safe LLMs in non-English.

## 2 Background

The language models are trained to predict the next token in a sequence given the previous tokens by maximum likelihood estimation (MLE), which can be represented by the following equation:

\[J_{}=_{}_{i=1}^{|y|} P(y_{i}|y_{<i};),\] (1)

where \(\) denotes learnable model parameters, and \(y_{<i}\) are the tokens preceding \(y_{i}\) in the sequence.

For fine-tuning on a supervised dataset, each instance contains a query \(x\) and its corresponding label \(y\). The SFT loss is only calculated on the label \(y\), ignoring the query \(x\):

\[J_{}=_{}_{i=1}^{|y|} P(y_{i}|x,y_{<i};).\] (2)

For both PT and SFT, the special tokens <>> and </s> are added at the beginning and the end of the training instance respectively.

## 3 Method

In this section, we first describe the model architecture, then we introduce the training and inference procedures in detail.

### Model Architecture

Nowadays, popular LLMs use byte-level byte pair encoding (BBPE) tokenizer (Wang et al., 2020) following GPT-2 (Radford et al., 2019). However, the tokenizer is usually developed on the English-dominated dataset, therefore this tokenizer often tokenizes each non-English character to several bytes resulting in a long sequence. Inspired by Cui et al. (2023) and Pipatanakul et al. (2023), we extend the vocabulary using monolingual data of the target language to improve the model efficiency.

LoRA is a parameter-efficient training method, which is another technique that has been widely used for transferring the LLM. However, in this work, we use LoRA not only for efficiency but also for preserving the original parameters. Considering a weight matrix \(W^{d k}\) of the target LLM, LoRA represents its update \( W\) using two low rank matrices \(B^{d r}\) and \(A^{r k}\) as follows:

\[=Wh,\;=+ Wh=+BAh,\] (3)

Figure 2: TransLLM pipeline.

where \(r\) denotes the pre-determined rank, \(h\) denotes the input, \(\) denotes the output of the original module, and \(\) denotes the output of the updated module. During training, the original \(W\) is frozen, so that original knowledge can be recovered by the recovery KD.

### Training

#### 3.2.1 Target Language Pre-Training

The chat LLMs are often insufficient on target language modeling due to the imbalanced training corpus. Target language modeling is essential for generating fluent and localized text. Furthermore, many works show that the monolingual pre-training can significantly improve the translation quality (Zheng et al., 2019; Xu et al., 2023). To build a solid foundation for the target language, we pre-train the TransLLM model on monolingual data of the target language using Eq. 1.

We do not introduce any English task in this stage because of the following two reasons: first, the pre-training involves quite computational consumption, and it can be unacceptable to find a proper mixing ratio between the English and target language data; second, the English embeddings are rarely updated on the target language data, therefore all the parameters of original LLM are almost unchanged.

#### 3.2.2 Translation Pre-Training

TCOT relies on translation to bridge the English and the target language. Therefore, we introduce translation pre-training to improve the bidirectional translation quality between English and the target language. Inspired by mBART (Liu et al., 2020), we use the special language id token to denote translation directions. Considering we transform the LLM from language \(\) to \(\), where \(=\) English in this paper, we formulate the parallel pair \((s^{},s^{})\) as two instances: cat(\(s^{},\)<\(\)>, \(s^{}\)) and cat(\(s^{},\)<\(\)>, \(s^{}\)), where cat(\(\)) denotes the concatenate operation.

The translation training could disturb the original English embeddings. Thus, we introduce English monolingual data into the translation pre-training stage. Specifically, we randomly insert the translation instance between English monolingual data using line break "n" as the separator. Based on the first stage, we train the TransLLM model on the mixed data by pre-training objective in Eq. 1.

#### 3.2.3 Transfer Fine-Tuning

The two-stage pre-training enables the TransLLM in target language modeling and cross-lingual translation. However, the TransLLM inevitably forgets the original knowledge. In this stage, we aim to recover the original knowledge and teach the TransLLM model how to perform TCOT and when to do translation.

Recovery Knowledge Distillation Data.Previous works focus on transferring knowledge from base LLMs. To teach the base model how to follow human instructions, previous works perform knowledge distillation with strong chat LLMs as the teacher by using the Alpaca dataset (Taori et al., 2023). The Alpaca dataset generates queries using the self-instruct technique (Wang et al., 2022), then responds using ChatGPT or GPT-4. Although the vanilla KD works well for base LLMs, we argue that it is not helpful for chat LLMs as shown in Sec. 5.2. To address this problem, we introduce the recovery KD that uses the target chat LLM to generate the responses. Although the recovery KD data are often worse than GPT-4 KD data, it will help the model to recover the knowledge from the original LLM parameters. We also introduce a special token <RESPONSE> in recovery KD to direct the behavior of the TransLLM model. Considering a KD instance in English with query \(q^{}\) and answer \(a^{}\), we formulate the query and label in Eq. 2 as \(x=q^{}\) and \(y=\) cat(<RESPONSE>,\(a^{}\)) respectively.

TCOT Data.Based on the recovery KD data \((q^{},a^{})\), we use machine translation to obtain its translations \((q^{},a^{})\). Finally, we can organize the TCOT data as \(x=q^{}\) and \(y=\) cat(<\(\)>,\(q^{},\)<RESPONSE>,\(a^{},\)<\(\)>,\(a^{}\)). That means when we input a query in \(\), the model should first translate it into \(\) as \(q^{}\). Then the model should <RESPONSE> the English query as \(a^{}\) using original knowledge as we teach in recovery KD. Finally, the TCOT outputs the response in \(\) as \(a^{}\) based on all previous sequences. As discussed in Sec. 5.3, the previous sequences also contribute to the final response. Different from Zhang et al. (2023), we use special tokens instead of natural language to direct the model's behavior. This is because the special tokens will not disturb the English embeddings and make it convenient to extract results.

Translation Data.Due to the TCOT data, the model may be confused about the translation instruction in \(\) without extra translation SFT. Therefore, we also construct bi-direction translation data based on previous parallel pairs \((q^{},q^{})\) and \((a^{},a^{})\). Taking the parallel pair \((q^{},q^{})\) as an example, we first wrap the source sentence using translation prompt templates as prompt(\(q^{}\)).1 Then we can obtain \(x=(q^{})\) and \(y=(}}}$}$}$}}}}$}}$} \!\!}}}$}$}$}}}}}$}}$},q^{})\).

Finally, we randomly mix all the data mentioned above and fine-tune the TransLLM model by Eq. 2.

### Inference

The final TransLLM model can respond in both \(\) and \(\), including \(\)-\(\) bi-direction translation. For a single-turn conversation, the TransLLM model will decide the proper mode by itself given only the input query \(x\). To leverage the powerful multi-turn conversation ability of the original LLM for \(\), we follow the original multi-turn format. For the multi-turn task in \(\), we only take the English parts of the previous TCOT output as history. To be specific, we organize the input as \(x=(q^{}_{1},a^{}_{1},,q^{}_{n},a^{}_{n },q^{}_{n+1})\), where \(n\) is the number of past turns. We do not use any special tokens in the history as the original LLM does. Interestingly, even in this unseen setting, the model still outputs the TCOT format as \(y=(}}}$}$}$}}}$}}$}} \!\!_{n+1}},}}}$}$}}}}}}}$}$},q^{}_{n+1})\), \(}}}}$}}$}}}}}}}}},q^{}},a^{}_{n+1})\). We show the whole multi-turn template in Appendix A.3.

## 4 Experiments

### Settings

It is extravagant to train and evaluate a chat LLM in non-English. Therefore, during our experiment, we mainly transform LLMs from English (EN) to Thai (TH) language, i.e. \(=\)EN and \(=\)TH. We describe our basic settings as follows.

Models.We implement our pipeline using Chinese-LLaMA-Alpaca-22 project, which is based on Transformers3. For the TransLLM model, we use the LLaMA2-Chat-7B as the target chat LLM. Following Cui et al. (2023), we use SentencePiece (Kudo and Richardson, 2018) to learn the TH vocabulary on the monolingual TH data that we use in target language pre-training. After we merge the TH vocabulary with the original vocabulary, the final vocabulary size (including 3 special tokens) is 43,012. The new embeddings are randomly initialized. We apply LoRA on the weights of the attention module and multi-layer perceptron blocks. The LoRA rank is set as \(r=64\). Overall, there are a total of 512.27 million trainable parameters including embeddings and LM heads. After all of the training is completed, we merge the LoRA modules into the main backbone, the final model has 6.83 billion parameters. For a fair comparison, we re-implement most of the baselines by our setting following their papers. The details of our model and baselines are in Appendix A.1.

Training Data.For target language pre-training, we use the monolingual TH data from mC4 (Xue et al., 2020). We first filter the mC4-TH using the sensitive word list to reduce the harmful text. Then, we use MinHashLSH4 to deduplicate documents in mC4-TH following GPT-3 (Brown et al., 2020). Finally, we have about 11 billion tokens of TH data. Compared to the 2 trillion tokens EN data used in LLaMA-2, the TH dataset is quite small. For translation pre-training, we collect the EN-TH parallel data from CCAligned (Chaudhary et al., 2019), Tatoeha Challenge Data (Tiedemann, 2020), and OpenSubtitles (Lison et al., 2018). We directly use the EN documents released in the Pile dataset which has been pre-processed (Gao et al., 2020). We randomly sample 1 million parallel pairs and EN documents respectively for translation pre-training. For the transfer fine-tuning, we use the 

[MISSING_PAGE_FAIL:6]

of LLaMA-2 in EN. We leave exploring TransLLM on more powerful open-source LLMs in the future.

**High agreement between humans and GPT-4 in TH.** Following Zheng et al. (2024), we calculate the average agreements by comparing every two models. In Table 2, GPT-4 shows high consistency with human annotators. The consistency (w/tie) between GPT-4 and humans reaches 75.42% and 70.42% in the first and second turns, which are much higher than random guesses and even higher than the consistency in EN. Therefore, we use GPT-4 to evaluate the helpfulness in the following experiments.

**Higher safety than ChatGPT and GPT-4.** In Table 3, TransLLM has a rejection rate of 94.61%, close to 99.23% of the original model. It indicates that we successfully transfer most of the human preference about the safety of the original model. TransLLM attains an improvement of 14.8% and 8.65% over ChatGPT and GPT-4 for rejecting harmful queries with statistical significance. More importantly, although GPT-4 is as safe as the original LLM in EN, the performance of our w/ GPT-4 KD is much below our w/ recovery KD. Later, we will demonstrate that this is because recovery KD successfully recovers the original knowledge.

#### 4.2.2 GPT-4 Evaluation Results

**Better performance than strong baselines.** As shown in Table 4, TransLLM significantly outperforms baselines that are built on open-source resources. Notably, we specifically build the baseline NLLB-bridge which uses the powerful translation model NLLB-3B (Costa-jussa et al., 2022) as the bridge between LLaMA-2-chat-7B and the TH language. Using the multi-turn ability of LLaMA-2-chat-7B, NLLB-bridge achieves good performance in the second turn.

Although NLLB-bridge uses more parameters and more translation resources, it still loses to TransLLM. We will explain in detail why TransLLM is better than translation-as-a-bridge in the analysis. Typhoon with TH pre-training achieves sub-optimal second-turn performance among baselines. It is probably because the TH documents teach the LLM how to model long context in TH. Under GPT-4 evaluation, we slightly outperform ChatGPT without statistical significance. It seems difficult for GPT-4 to compare two strong LLMs on small datasets in TH. We select the baselines that perform well on the first turn of the MT-bench, for further evaluation on Alpaca-Eval. On the larger dataset, TransLLM outperforms baselines and ChatGPT by a large margin with statistical significance as shown in Table 5.

## 5 Analysis

### All Components Work Together

    &  &  \\  & Win & Tie & Loss & \(\) & Win & Tie & Loss & \(\) \\  PolyLM (Wei et al., 2023) & 78.75 & 16.25 & 5.00 & **73.75** & 90.00 & 10.00 & 0.00 & **90.00** \\ X-LLaMA (Zhu et al., 2023) & 72.50 & 17.50 & 10.00 & **62.50** & 85.00 & 8.75 & 6.25 & **78.75** \\ Typhoon (Pipatanakul et al., 2023) & 75.00 & 18.75 & 6.25 & **68.75** & 62.50 & 30.00 & 7.50 & **55.00** \\ PLUG (Zhang et al., 2023) & 72.50 & 13.75 & 13.75 & **58.75** & 87.50 & 8.75 & 3.75 & **83.75** \\ NLLB-bridge (Costa-jussa et al., 2022) & 75.00 & 16.25 & 8.75 & **66.25** & 63.75 & 18.75 & 17.50 & **46.25** \\ ChatGPT (OpenAI, 2022) & 42.50 & 26.26 & 31.25 & 11.25 & 42.50 & 22.50 & 35.00 & 7.50 \\ GPT4 (OpenAI, 2023) & 26.25 & 28.75 & 45.00 & -18.75 & 30.00 & 18.75 & 51.25 & **-21.75** \\   

Table 4: Comparison between our model and different methods on MT-Bench under GPT-4 evaluation.

   Model & Bypass (\%) & Reject (\%) & Unclear (\%) \\  ChatGPT & 10.96 & 79.81 & 9.23 \\ GPT4\({}^{}\) & 10.38 & 85.96 & 3.66 \\ Ours w/ GPT4 \(\) KD & 31.15 & 63.46 & 5.38 \\ Ours & **2.69** & **94.61** & 2.69 \\  LLaMA-2-chat (EN) & 0.58 & 99.23 & 0.19 \\ GPT4\({}^{}\) (EN) & 0.96 & 99.04 & 0.00 \\   

Table 3: Result for different models on safety benchmark AdvBenchmark under human evaluation. \({}^{}\) GPT-4 results are from Yong et al. (2023).

[MISSING_PAGE_FAIL:8]

formance on TH-EN. We also ask the naive TH speaker to provide a fluency score for each model on MT-Bench in Table 9. The fluency of NLLB is as poor as its translation performance on EN-TH. NLLB usually translates the responses literally. For example, NLLB translates "I see" into "I see something" instead of "I understand" in TH. Surprisingly, the response of GPT-4 is not very fluent and natural. GPT-4 often uses full-stops and commas which are not used in TH. ChatGPT and TransLLM are generally fluent, with translationese to a certain degree. For example, TH speakers do not use "sure" or "of course" at the beginning of responses, but ChatGPT and TransLLM do.

TransLLM is more than translation.Translation performance is important but not the whole story. TransLLM outputs an EN query, EN response, and TH response at once. It means that TransLLM can use all previous information for TH responses and therefore achieve better performance. To verify it, we use TransLLM to translate its EN responses in another round of inference. The performance is worse than the standard response with \(=13.75\%\) and \(=18.75\%\) on first and second turn. The attention map of TransLLM in Appendix B.2 shows that TransLLM outputs the TH response mostly based on the TH response itself and then the EN response. However, the TH response also pays a little attention on the TH query and EN query. Besides, translation-as-a-bridge needs to deploy two models, which is costly and inconvenient.

## 6 Related Works

Recently, there have been many works that attempt to transfer knowledge from English to non-English for LLMs. For example, Chinese LLaMA (Cui et al., 2023) and Typhoon(Pipatanakul et al., 2023) directly perform continuous pre-training and instruct tuning with extended vocabulary using LoRA. PloyLM (Wei et al., 2023) adopts multilingual pre-training based on the curriculum learning strategy that gradually exposes more low-resource corpus. ChatGPT (OpenAI, 2022) and GPT-4 (OpenAI, 2023) are also well-known multilingual LLMs. Zhu et al. (2023) focus on building semantic alignment with cross-lingual instruct tuning and translation training. Bansal et al. (2024) augment LLMs by combining the English-dominated LLM with the non-English model. Some other works focus on transfer reasoning abilities: Qin et al. (2023) introduce cross-lingual prompting to improve zero-shot chain-of-thought reasoning across languages; She et al. (2024) propose multilingual alignment-as-preference optimization to align reasoning abilities across languages. PLUG (Zhang et al., 2023) only uses the TCOT data to train the base LLMs directly. Different from PLUG, we propose a systematic framework for transforming chat LLMs. We highlight that the TCOT highly relies on the performance of its sub-tasks and introduce how to preserve the knowledge of the chat LLM.

## 7 Conclusion

Chat LLMs have been specifically optimized for chat usage and therefore are helpful and safe in the dominant language. In this paper, we propose a framework for transforming an off-the-shelf chat LLM to other languages. In this framework, we utilize TCOT to transfer chat knowledge and further enhance the TCOT's sub-tasks using publicly available data. To recover the original knowledge, we propose the recovery KD method supplemented with LoRA. The experiments in TH show that we transfer desired abilities to TH and outperform ChatGPT in both helpfulness and safety. Overall, we hope that this work can become the foundation for developing safe LLMs in many languages other than English.

Limitations and future works.Due to limited resources, we only conduct experiments that transform LLaMA-2-chat-7B to TH. However, we conduct comprehensive experiments and in-depth analysis to reveal the mechanism of the proposed TransLLM. For now, TransLLM is still highly dependent on translation. Consequently, TransLLM can not handle the queries related to TH text, e.g. word games in TH. A simple solution is to enable TransLLM, through training, to choose whether respond to with TH mode or TCOT mode. Due to the TCOT, the inference overhead of TransLLM is much longer than other baselines. Recently, Goyal et al. (2023) and Deng et al. (2023) show that the implicit chain-of-thought achieves similar performance on reasoning tasks without additional inference overhead. We would like to explore TransLLM with implicit TCOT in the future.

   Model & Score \\  NLLB-bridge & 5 \\ GPT4 & 6 \\ ChatGPT & 7 \\ Our & 7 \\   

Table 9: Fluency on MT-Bench.