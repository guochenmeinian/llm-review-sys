# Time-FFM: Towards LM-Empowered Federated Foundation Model for Time Series Forecasting

Qingxiang Liu\({}^{1,2}\)  Xu Liu\({}^{3}\)  Chenghao Liu\({}^{4}\)  Qingsong Wen\({}^{5}\)  Yuxuan Liang\({}^{1}\)

\({}^{1}\) The Hong Kong University of Science and Technology (Guangzhou)

\({}^{2}\) Institute of Computing Technology Chinese Academy of Sciences

\({}^{3}\) National University of Singapore \({}^{4}\) Salesforce AI Research \({}^{5}\) Squirrel AI

qingxiangliu737@gmail.com, liuxu@comp.nus.edu.sg

chenghao.liu@salesforce.com, qingsongedu@gmail.com, yuxliang@outlook.com

Y. Liang is the corresponding author. This work was done when Q. Liu was an intern at HKUST(GZ).

###### Abstract

Unlike natural language processing and computer vision, the development of Foundation Models (FMs) for time series forecasting is blocked due to data scarcity. While recent efforts are focused on building such FMs by unlocking the potential of language models (LMs) for time series analysis, dedicated parameters for various downstream forecasting tasks need training, which hinders the common knowledge sharing across domains. Moreover, data owners may hesitate to share the access to local data due to privacy concerns and copyright protection, which makes it impossible to simply construct a FM on cross-domain training instances. To address these issues, we propose Time-FFM, a Federated Foundation Model for Time series forecasting by leveraging pretrained LMs. Specifically, we begin by transforming time series into the modality of text tokens. To bootstrap LMs for time series reasoning, we propose a prompt adaption module to determine domain-customized prompts dynamically instead of artificially. Given the data heterogeneity across domains, we design a personalized federated training strategy by learning global encoders and local prediction heads. Our comprehensive experiments indicate that Time-FFM outperforms state-of-the-arts and promises effective few-shot and zero-shot forecaster. The code is available at https://github.com/CityMindLab/NeurIPS24-Time-FFM/tree/main.

## 1 Introduction

Time series forecasting plays an important role in many real-world application domains , such as energy consumption prediction, weather forecasting, and disease transmission. Recently, a multitude of deep learning models have been designed for time series forecasting based on Convolutional Neural Networks [2; 3; 4], Recurrent Neural Networks [5; 6], and Transformers [7; 8; 9; 10]. Inspired by the prominent performance gained by Foundation Models (FMs) in the realms of Natural Language Processing (NLP) [11; 12; 13; 14] and Computer Vision (CV) [15; 16], great research interests have been triggered to build pretrained FMs for time series community [17; 18; 19; 20; 21]. Nonetheless, due to significant time series data scarcity, these FMs are of poor capability to cultivate general representations, failing to promise remarkable fine-tuning or zero-shot performance for diverse downstream forecasting tasks [22; 23]. As a result, a collection of methods have been proposed to borrow the pretrained language FMs to time series community by _cross-modality adaption_[24; 22; 23], thus unlocking the tapped potential of language models (LMs) for time series modeling.

While these endeavors provide FMs for time series forecasting, the incorporated cross-modality adaption modules and unfrozen components of pretrained LMs need training from scratch for specific domains, thus restricting the mining of underlying temporal commonality in cross-domain time series data. As is shown in Figure 1(a), disease and economics datasets are employed for training the FM respectively to obtain domain-optimal model parameters, hardly generalizing to other domains.  proposes to train a unified model (named UniTime) on the mixture of cross-domain time series data (Figure 1(b)), which ensures the cultivation of general-purpose representations, thus promising the zero-shot performance on unseen domains. Despite its effectiveness, they adopt the **centralized** training mode, where the historical records of time series across diverse domains are uploaded to a central server for optimizing the unified model. _Due to copyright protection and privacy concerns, data owners may hesitate to share the access to these domain-specific raw records._

Federated Learning (FL) [26; 27] provides the mainstream solution for the aforementioned problem, where data owners train prediction models locally and exchange the intermediate model parameters or gradients with the central server, without the disclosure of raw data records. Moreover, in UniTime, a retractable prediction head is introduced to accommodate the heterogeneous output needs whereas FL paradigm makes it possible to construct domain-customized heads. However, current efforts are merely focused on how to fine-tune LMs in federated setting for NLP tasks (i.e., _in-modality adaption_ of LMs for target tasks in Figure 1(c)) [28; 29; 30; 31], rather than cross-modality adaption of LMs for time series forecasting. The realization of this federated FM is non-trivial technically, given the ubiquitous heterogeneity in cross-domain time series data. **(1) Heterogeneous inputs**: Cross-domain time series data input into the FM are heterogeneous in terms of dimensions and historical readings, posing evident difficulty to modality alignment. **(2) Rigid instructions as prompts**: Prompts are adopted to bootstrap LMs for time series reasoning hinging on rigid domain-specific instructions [25; 22], rather than the understanding of LMs, exhibiting poor robustness for unseen domains. **(3) Conflicts between generalization and personalization**: The ideal FM needs to learn the common temporal representations across domains and simultaneously enable the personalized prediction for domain-specific inputs.

To address the challenges, we propose Time-FFM, a Federated Foundation Model for Time series forecasting by repurposing LMs (Figure 1(d)). First, we perform modality alignment by transforming time series data into text tokens to empower the pretrained LM for time series reasoning. Second, we design a prompt adaption module to dynamically determine domain-specific prompts, which can bootstrap the LM for cross-domain time series analysis from the perspective of LM itself, rather than from human cognition by employing hand-crafted instructions as prompts. To tackle the data heterogeneity across domains, we introduce a personalized federated training strategy by learning a global encoder and personalized prediction heads, given the shared representations across domains. Our main contributions are summarized as follows.

* We present the first attempt to build a federated FM for time series forecasting by exploiting the sequence reasoning potential of LMs, avoiding the disclosure of local data.
* We propose Time-FFM, which firstly aligns the modality from time series data to natural language and adaptively determines prompts to guide the LM for time series reasoning. Moreover, we intro

Figure 1: (a) Specific prediction models are trained for diverse domains. (b) A unified model is trained for cross-domain time series. (c) The current in-modality adaption in FL setting fine-tunes LM for NLP tasks, with all the trained parameters are exchanged between clients and the server. (d) Our proposal investigates how to construct a FM by unlocking the potential of LM for cross-domain time series forecasting in FL paradigm.

duce a personalized FL strategy to strike a balance between sharing common temporal knowledge and ensuring customized prediction results.
* The extensive evaluation results demonstrate that Time-FFM leads to state-of-the-art performance in mainstream forecasting tasks, especially in few-shot or zero-shot forecasting settings.

## 2 Related Work

**FMs for Time Series Forecasting.** Recent studies have demonstrated the effectiveness of fine-tuning pretrained FMs for various downstream tasks, such as BERT , GPT , GPT2 , and LLaMA  in NLP and DEiT  and BEiT  in CV. Inspired by the success, some efforts have been focused on developing FMs for time series community, such as [17; 18; 21; 32]. However, due to data deficiencies, these pretrained models cannot guarantee the learning of general-purpose representations for time series analysis and hence fail to apply to a multitude of downstream tasks. Another line of researches attempt to leverage pretrained FMs in NLP or CV for time series analysis by cross-modality adaption strategies [33; 34; 35; 24; 23; 22], such as fine-tuning and model reprogramming, which hinges on the powerful generalization capability of Transformers for sequence tokens.  freezes the self-attention modules and feedforward layers of GPT2, and only fine-tunes the positional embedding and normalization layers. The proposed GPT4TS outperforms the relevant models in most time series tasks. On the contrary,  freezes the LM as a whole and transforms the modality of time series to natural language by patch reprogramming. These methods enable unified model structure rather than unified parameters for diverse downstream tasks, which makes the proposed FMs learn impaired temporal commonality.  proposes to train a unified prediction model for cross-domain time series forecasting, which enables to learn the intrinsic temporal patterns. However, the centralized training mode brings privacy concerns for cross-domain data owners and FL paradigm may provide a promising solution.

**Federated Fine-tuning of LMs.** Given the exceptional performance of LMs and the emerging privacy preserving resolutions, incorporating LMs with FL is becoming a popular research trend. There have been some implementation frameworks [36; 29; 37; 38; 39; 40] to support fine-tuning LMs in FL setting. Moreover, considering the immense communication cost, some communication-efficient federated fine-tuning methods have been proposed, such as [38; 41; 30; 28]. A few researches aim to investigate the effects of data heterogeneity on fine-tuning performance, and then propose the personalized federated instruction tuning methods, e.g., [42; 29; 31]. Nonetheless, these methods concentrate on fine-tuning or fully-tuning pretrained LMs in FL paradigm for NLP tasks, but fail to cover the cross-modality adaption of LMs for time series forecasting.

## 3 Methodology

### Problem Definition

Given \(N\) domains, let \(_{i,t}=\{x_{i,t}^{1},,x_{i,t}^{c_{i}}\}^{c_{i}}\) denote the observation of domain \(i\) at the time step \(t\), where \(c_{i}\) represents the number of dimensions (channels). In the context of time series forecasting, we denote \(_{i}=\{_{i,1},,_{i,L_{i}}\}^{L_{i} c _{i}}\) as the input of the prediction model \(f_{i}()\), where \(L_{i}\) represents the domain-variant lookback window. The ground truths can be denoted as \(_{i}=\{_{i,L_{i}+1},,_{i,L_{i}+F_{i}}\} ^{F_{i} c_{i}}\), where \(F_{i}\) represents the future prediction window. Let \(_{i}=\{(_{i};_{i})\}\) denote the local data set of \(i\) and \(D_{i}=|_{i}|\) the data size. Given the set of personalized model parameters \(\{w_{i}\}\), the objective of federated FM for cross-domain time series forecasting can be formulated as

\[_{\{w_{1},,w_{N}\}}=_{i=1}^{N}}{_{(_{i};_{i})_{i}}}_{i}-f_{ i}(w_{i};_{i})_{2}^{2}.\] (1)

### Model Structure

The model architecture is elaborated in Figure 2. Our model encompasses three components: (1) modality alignment and prompt adaption, (2) LM backbone, and (3) prediction head. The modules of modality alignment and prompt adaption are designed for cross-modality alignment and adaptive prompt determination. We employ the backbone of GPT2  with freezing all parameters. The prediction head enables domain-specific prediction results.

**Modality Alignment.** Here we transform time series into the modality of text tokens. To accommodate domain-variant channels \(c_{i}\), we adopt the channel-independent strategy  to split multivariate time series \(_{i}\) into \(c_{i}\) univariate series and individually process each. Let \(_{i}^{j}=\{x_{i,1}^{j}, x_{i,L_{i}}^{j}\}^{1 L_ {i}}\) denote the \(j\)-th univariate series from \(_{i}\). Then we normalize each series \(_{i}^{j}\) to mitigate the effect of distribution diversity . Since each data point of \(_{i}^{j}\) does not have explicit semantic knowledge like words in sentences, we adopt the patching technique  to segment \(_{i}^{j}\) into subseries (termed _patches_), each of which can _aggregate the local information and better retain the temporal knowledge_. Specifically, let \(P\) denote the patch length and \(S_{i}\) denote the stride length of domain \(i\). Hence, the number of patches can be defined as \(B_{i}=-P}{S_{i}}+1\). We denote \(_{i,S}^{j}^{B_{i} P}\) as the generated patches from \(_{i}^{j}\). We subsequently employ a linear layer to project the patches into tokens \(}_{i,S}^{j}^{B_{i} D}\), where \(D\) is the input dimension size of the LM backbone. \(}_{i,S}^{j}\) together with prompt tokens (in the next part) will be input into the LM backbone.

**Prompt Adaption.** In the time series forecasting FMs based on LMs, domain instructions are designed as prompts to complement the patch tokens and inform the LM backbone of domain-specific knowledge [22; 25]. These manually-designed prompts depend completely on experts' knowledge and may vary from each other due to different understandings. Furthermore, according to the results, more detailed instructions can always yield better prediction performance , which may make us naturally draw a conclusion that the ultimate performance hinges on the length of prompts. However, longer prompt tokens will present substantial challenge on the computation burden. Different from images  or acoustic data , which can be "translated" into natural language seamlessly, the manually-crafted prompts are error-prone to describe the characteristics of the raw time series. **To this end, a better way is to design prompts from LM's understandings of the patch tokens rather than human cognition of raw time series data.** Here, we propose to adaptively determine prompts

Figure 2: Overall architecture of Time-FFM. Each round begins with 1�⃝ downloading global parameters of modality alignment and prompt adaption modules. We 2� conduct modality alignment to generate patch tokens and 3� adaptively determine prompt tokens. 4� The two tokens are input into the LM backbone and 5� the outputs are projected to generate the prediction results. After local optimization, 6� the updated parameters of modality alignment and prompt adaption modules are uploaded to the server for aggregation.

based on patch tokens from the source corpus of pretrained LM (which includes \(V\) pretrained word embeddings, denoted as \(^{V D}\)). Similar to , we project \(\) to a smaller collection of _text prototypes_, denoted as \(^{}^{V^{} D}\) by a linear layer, with \(V^{} V\), to avoid the potential large parameter space. We adopt a modified multi-head attention layer to obtain the correlation between \(^{}\) and \(}_{i,S}^{j}\), and subsequently select \(M\) mostly related text prototypes as prompts. Concretely, for each head \(h\{1,,H\}\), we have the query matrix \(_{i,h}^{j}=^{}_{h}^{Q}\) and the key matrix \(_{i,h}^{j}=}_{i,S}^{j}_{h}^{K}\), where \(_{h}^{Q},_{h}^{K}^{D d}\) and \(d=\). Since we do not aim to return a weighted value matrix according to the given query but merely evaluate the correlation of text prototypes and patch tokens, we omit the value matrix here. The attention score matrix is denoted as \(_{i,h}^{j}^{V^{} B_{i}}\) and can be calculated as

\[_{i,h}^{j}=(_{i,h}^{j}_{i,h}^{j}} {}).\] (2)

We obtain \(}_{i,h}^{j}^{V^{} 1}\) by calculating the summation of \(_{i,h}^{j}\) per row. Each value in \(}_{i,h}^{j}\) represents the correlation degree of the corresponding text prototype in \(^{}\) to all patch tokens \(}_{i,S}^{j}\). We select \(M\) prototypes from \(_{i,h}^{j}\) with top attention scores to form the potential prompts \(_{i,h}^{j}^{M d}\), i.e., \(_{i,h}^{j}=_{i,h}^{j}[(}_{i,h}^{j})]\). We can obtain \(_{i}^{j}^{M D}\) by aggregating \(_{i,h}^{j}\) from all \(H\) heads. Finally, we employ a linear layer to project \(_{i}^{j}\) to the prompt tokens \(}_{i}^{j}^{M D}\).

**Prediction Head.** We input the concat of \(}_{i}^{j}\) and \(}_{i,S}^{j}\) into the LM backbone and obtain the representations \(_{i}^{j}^{(M+B_{i}) D}\), which will be flattened and projected to the final results \(}_{i}^{j}^{1 F_{i}}\) by a linear layer.

**Personalized Strategy.** Time series across different domains could be substantially heterogeneous. Consequently, a generalized global model in FL may fail to capture the disparate temporal patterns and ultimately compromises the prediction performance. Inspired by , which indicates that diverse data may share common feature representations, we propose to learn a global encoder (i.e., _modality alignment_, _prompt adaption_ and _LM backbone_) and domain-customized _prediction heads_. The underlying motivation is to strike a balance between generalization and personalization: (1) increasing the generalization of modality alignment and prompt adaption by access to cross-domain temporal patterns; (2) ensuring prediction results specific for certain domains by personalized heads. Since we keep the LM backbone intact, in each federating round, _only the parameters of modality alignment and prompt adaption are communicated_. The server performs aggregation by averaging strategy. The training strategy differs from Federated Averaging framework, where the parameters of encoder and decoder are both aggregated at the central server after local optimization.

### Training Process

We denote \(w_{t}^{g}\) as the global parameters of modality alignment and prompt adaption at the \(t\)-th federated round and \(w_{i,t}^{p}\) as prediction head parameters of \(i\) at the \(t\)-th round. We clarify that \((_{i},_{i})\) here is reused to represent a training batch. \(}_{i,S},}_{i},_{i}\), and \(}_{i}\) denote the patch tokens, prompt tokens, representations and prediction results of such batch respectively. The training procedure of Time-FFM is elaborated in Algorithm 1. **(1)** In the \(t\)-th federated round, the server distributes the global parameters \(w_{t}^{g}\) (Line 8 and 9). **(2)** Each domain loads the global parameters and local head parameters to perform prediction following modality alignment, prompt adaption as well as representation obtaining from LM backbone (Line 12-15) and uploads \(w_{i,i}^{g}\) to the server after optimization. **(3)** Finally, the server aggregates local updated parameters by averaging mechanism to obtain the fresh global parameters \(w_{t+1}^{g}\) for the \((t+1)\)-th round (Line 6).

## 4 Experiments

We comprehensively compare the proposed Time-FFM with state-of-the-art models in FL or centralized settings, especially those by fine-tuning LM for time series forecasting. The numerical results demonstrate the effectiveness of Time-FFM in time series forecasting. We employ GPT2backbone of the first 6 layers as the default LM backbone and freeze all parameters. To guarantee a fair comparison, we adhere to the experimental configurations in .

**Baselines.** Our baselines cover a board collection of relevant methods, which can be categorised into 3 types: **TY1** (_federated fine-tuning methods_): FedIT , FedAdapter\({}^{}\)[47; 41], and FedAdapter\({}^{}\)[48; 41]; **TY2** (_across-dataset centralized methods_): UniTime , GPT4TS , and PatchTST ; 2**TY3** (_dataset-specific centralized methods_): TimesNet , DLinear , FEDformer , Autoformer , and Informer . We directly cite the results from  if applicable.

**Setups.** We evaluate on 8 benchmark datasets from various domains: ETTh1, ETTh2, ETTm1, ETTm2, Electricity, Weather, Exchange, and ILI, which have been widely adopted for evaluating time series forecasting performance. Each dataset corresponds to a FL participant. Detailed introduction of implementation and datasets can be found in Appendix A. We use Mean Square Error (MSE) and Mean Absolute Error (MAE) as the evaluation metrics.

### Main Results

Main forecasting results are presented in Table 1. Time-FFM consistently outperforms the other FL methods (in **TY1**) on all datasets, except ETTh2. Specifically, Time-FFM can improve the performance gains over all datasets by 39.01% in terms of MSE, compared with the second best-performed FL method. Furthermore, the averaged prediction results of Time-FFM are even superior to those of the centralized models. When compared with UniTime, the recently-proposed centralized unified model for cross-domain time series forecasting, Time-FFM can provide more performance gains, which underscores the effectiveness of the proposed cross-modality adaption modules and personalized approach.

### Few-Shot Forecasting

Given the remarkable few-shot learning performance of LMs, we evaluate whether Time-FFM can retain such capability for time series forecasting. In this section, we compare the prediction performance across **TY1** and **TY2** in few-shot settings with 10% and 5% time steps adopted as training samples, which is in line with the setups in [23; 22].

Main results of 10% and 5% few-shot forecasting are presented in Table 2 and 3 respectively. Time-FFM outperforms the other FL methods and even achieves comparable performance in contrast to the centralized methods, which further underscores that Time-FFM inherits the few-shot capability of LMs and promises proficient FM for time series forecasting. Specifically, Time-FFM outperforms the centralized methods in the realm of 5% few-shot learning, with 20% reduction in averaged MSE w.r.t UniTime. Interestingly, for all methods except UniTime, results in 10% few-shot learning are worse than those in 5% few-shot learning. We deduce that the pretrained LM is fully-tuned in UniTime and fewer training samples fail to support optimizing masses of parameters. While in the other methods, the pretrained LMs are frozen or fine-tuned, which can retain the original reasoning capability of LMs even with fewer training instances.

    &  &  &  \\  Method & Time-FFM & FeffT & FeffAdopter\({}^{}\) & FeffAdopter\({}^{}\) & UniTime & GPHT4TS & PatchIST & TimeNet & DLinear & FEDformer & Autoformer & Informer \\  Metric & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE \\  ETH1 & **0.424** & **0.434** & 0.591 & 0.564 & 0.488 & 0.467 & 0.503 & 0.479 & **0.442** & **0.448** & 0.502 & 0.461 & 0.472 & 0.451 & 0.458 & 0.450 & 0.452 & **0.440** & 0.460 & 0.496 & 0.487 & 1.040 & 0.795 \\  ETH2 & 0.382 & 0.406 & 0.387 & 0.375 & 0.389 & 0.380 & 0.403 & 0.378 & 0.403 & 0.386 & 0.406 & 0.398 & 0.416 & 0.414 & 0.427 & 0.559 & 0.515 & 0.437 & 0.449 & 0.450 & 0.459 & 4.431 & 1.729 \\  ETH1 & 0.399 & **0.402** & 0.644 & 0.517 & 0.643 & 0.516 & **0.385** & **0.399** & 0.551 & 0.433 & 0.371 & 0.629 & **0.383** & 0.406 & 0.403 & 0.407 & 0.448 & 0.452 & 0.588 & 0.517 & 0.961 & 0.734 \\  ETH2 & **0.266** & **0.382** & 0.297 & 0.341 & 0.295 & 0.344 & 0.298 & 0.342 & 0.293 & 0.334 & 0.231 & 0.365 & 0.340 & 0.373 & **0.291** & **0.322** & 0.350 & 0.401 & 0.305 & 0.348 & 0.327 & 0.371 & 1.410 & 0.810 \\  Electricity & 0.216 & **0.299** & 0.390 & 0.478 & 0.408 & 0.489 & 0.381 & 0.281 & 0.216 & 0.336 & 0.251 & 0.338 & 0.221 & 0.311 & **0.193** & **0.295** & **0.212** & 0.300 & 0.214 & 0.327 & 0.227 & 0.338 & 0.311 & 0.397 \\  Weather & 0.270 & 0.288 & 0.282 & 0.310 & 0.285 & 0.381 & 0.287 & 0.309 & **0.251** & **0.276** & 0.293 & 0.309 & 0.304 & 0.322 & **0.259** & **0.287** & 0.265 & 0.317 & 0.369 & 0.360 & 0.338 & 0.382 & 0.634 & 0.548 \\  Exchange & **0.338** & **0.391** & 0.389 & 0.423 & 0.382 & 0.419 & 0.380 & 0.402 & 0.364 & **0.404** & 0.421 & 0.446 & 0.411 & 0.444 & 0.416 & 0.443 & **0.345** & 0.414 & 0.519 & 0.500 & 0.613 & 0.539 & 1.550 & 0.998 \\ 
**1.1** & **2.107** & **0.324** & **0.565** & **1.488** & 0.547 & 1.621 & 5.251 & 1.600 & **2.137** & **0.929** & 3.678 & 1.372 & 4.210 & 1.480 & 2.139 & 0.931 & 2.616 & 1.090 & 2.847 & 1.144 & 3.006 & 1.161 & 5.137 & 1.544 \\  Average & **0.556** & **0.434** & **0.591** & 0.569 & 1.009 & 0.561 & **0.559** & **0.437** & 0.800 & 0.521 & 0.916 & 0.553 & 0.569 & 0.445 & 0.652 & 0.487 & 0.690 & 0.505 & 0.756 & 0.532 & 1.934 & 0.944 \\   \(1^{54}\) Count & 8 & 1 & 1 & 0 & 3 & 0 & 0 & & 4 & 0 & & 1 & 0 & & & & \\   

Table 2: 10% few-shot forecasting results. All results are averaged across four prediction windows, i.e., \(F_{i}\{96,192,336,720\}\). \(}\): the best in **TY1**; \(}\): the second best in **TY1**. \(}\): the best over both types; \(}\): the second best over both types. Full results are presented in Table 14.

    &  &  \\  Method & Time-FFM & FeffLeRA & FeffAdopter\({}^{}\) & FeffAdopter\({}^{}\) & UniTime & GPHT4TS & PatchIST \\  Metric & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE \\  ETH1n1 & **0.393** & **0.500** & 0.627 & 0.326 & 0.672 & 0.539 & 0.697 & 0.543 & **0.589** & **0.494** & 0.638 & 0.501 & 1.071 & 0.662 \\ ETH2n2 & **0.294** & **0.335** & **0.297** & **0.340** & 0.298 & 0.341 & 0.298 & 0.343 & 0.299 & 0.338 & **0.295** & **0.338** & 0.345 & 0.378 \\ Electricity & 0.266 & 0.344 & **0.275** & 0.360 & 0.421 & 0.498 & 0.408 & 0.486 & **0.254** & **0.342** & **0.524** & **0.534** & 0.362 & 0.429 \\ Weather & 0.288 & **0.314** & 0.256 & 0.320 & **0.284** & **0.311** & **0.257** & 0.315 & **0.272** & **0.290** & 0.300 & 0.322 & 0.257 & 0.316 \\ Exchange & **0.230** & 0.336 & 0.238 & 0.339 & **0.277** & 0.344 & 0.220 & 0.335 & **0.220** & **0.331** & 0.242 & 0.344 & **0.220** & **0.339** \\  Average & **0.334** & **0.366** & 0.349 & 0.374 & 0.380 & 0.403 & 0.384 & 0.404 & **0.327** & **0.361** & 0.345 & 0.

### Zero-Shot Forecasting

Given that language FMs are effective zero-shot forecasters, we evaluate the zero-shot learning capability of Time-FFM, which is essential for a FM. We adhere to the zero-shot learning settings in , where we first train Time-FFM on ETTh1, ETTm1, and ETTm2, and then evaluate the zero-shot testing performance on ETTh2, Electricity, and Weather.

Since ETTh2 hails from the same domain of ETTh1, we directly reuse the _local parameters_ (including both encoder and head) of ETTh1 for inferring ETTh2. For the other two target datasets from different domains of the source datasets, we successively reuse local parameters of the three source datasets to perform zero-shot testing. The results presented in Table 15 show that local parameters of ETTh1 excel on both target datasets. Hence, we adopt the model parameters of ETTh1 for zero-shot testing on Electricity and Weather. For other methods in **TY1**, we train an optimized global model on ETTh1, ETTm1, and ETTm2, and then adopt the obtained global model to conduct zero-shot testing on ETTh2, Electricity, and Weather. The comparison in zero-shot forecasting is presented in Table 4. Time-FFM consistently ensures significant performance gains on all three datasets, with prediction MSE decreasing by 13.9% w.r.t the second best. It is remarkable that the centralized unified model UniTime exhibits inferior zero-shot testing performance compared to Time-FFM. We attribute the performance gains of Time-FFM to the valid knowledge transferability across domains.

### Model Analysis

**Model Ablation.** We conduct ablation studies on five variants of Time-FFM and the corresponding results are presented in Table 5 (**A.1**-**A.6**). Thereinto, Time-FFM-D represents the distributed version of Time-FFM, which ablates the aggregation process. The results demonstrate that ablating either components will compromise the forecasting performance. We have the following key observations: **(1)** The prompt tokens can bootstrap the LM for target domains. The absence of prompt adaption (**A.2**) will affect the forecasting performance. When employing instructions in  as prompts, **A.3** is inferior to Time-FFM, which underscores the efficacy of prompt adaption. **(2)** The ablation of personalized heads (**A.4**) will hurt the performance most. In **A.4**, a global prediction head is learned for all domains, hardly ensuring the personalization for cross-domain heterogeneous data. **(3)** In **A.6**, the common temporal knowledge fails to be shared among domains, which makes poorer generalization of cross-modality adaption modules, thus yielding inferior performance. This underscores the significance of building a unified model for cross-domain traffic series forecasting.

    &  &  \\  Method & Time-FFM &  & ^{}\)} & ^{}\)} &  &  &  \\  Metric & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE \\  ETH2 & **0.373** & **0.399** & **0.387** & **0.407** & 0.388 & 0.408 & **0.437** & **0.407** & 0.388 & 0.409 & 0.397 & 0.418 & 0.421 & 0.429 \\  Electricity & **0.265** & **0.343** & **0.398** & **0.470** & 0.401 & 0.474 & 0.409 & 0.482 & 0.436 & 0.500 & 0.462 & 0.526 & 0.534 & 0.565 \\  Weather & **0.271** & **0.318** & **0.295** & **0.317** & 0.302 & 0.324 & 0.302 & 0.324 & 0.301 & 0.320 & 0.322 & 0.339 & 0.327 & 0.339 \\  Average & **0.310** & **0.353** & **0.360** & **0.399** & 0.364 & 0.402 & 0.366 & 0.404 & 0.375 & 0.410 & 0.394 & 0.428 & 0.427 & 0.444 \\   

Table 4: Zero-shot forecasting results. All results are averaged across four prediction windows, i.e., \(F_{i}\{96,192,336,720\}\). \(\)Yellow : the best in **TY1**; \(\)Blue : the second best in **TY1**. \(\)**Underline**: the best over both types; **Bold**: the second best over both types. Full results are presented in Table 17.

    &  &  &  &  \\  Metric & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE \\ 
**A.1** Time-FFM & **0.480** & **0.449** & **0.462** & **0.456** & **1.953** & **0.894** & **1.976** & **0.916** \\
**A.2** w/o Prompt Adoption & 0.495 & 0.450 & 0.496 & 0.471 & 2.222 & 0.947 & 2.118 & 0.952 \\
**A.3** w/ Instructions & 0.487 & 0.457 & 0.465 & 0.465 & 2.109 & 0.953 & 2.170 & 0.977 \\
**A.4** w/o Personalized Head & 0.537 & 0.471 & 0.526 & 0.480 & 4.953 & 1.591 & 4.068 & 1.450 \\
**A.5** w/o All & 0.562 & 0.498 & 0.523 & 0.495 & 8.153 & 2.037 & 6.509 & 1.804 \\
**A.6** Time-FFM-D & 0.499 & 0.450 & 0.503 & 0.472 & 2.453 & 1.022 & 2.427 & 1.026 \\   

Table 5: Ablation studies of Time-FFM on ETTh1 and ILI datasets with \(F_{i}\{336,720\}\) and \(F_{i}\{48,60\}\) respectively. **Bold**: the best.

**Language Model Variants.** We investigate the variants of LM, in terms of optimization modes (**B.1**-**B.3**) and backbone layers (**C.1** and **C.2**). Here we train all variants on seven datasets except Electricity, due to GPU memory limitation. In **B.3**, the backbones of LM are full-tuned. While in **B.2**, we only tune the positional embeddings and layer normalization components of the backbone . Table 6 shows that **B.3** performs best, followed by **B.2** and **B.1**. We argue that the performance remains comparable when we freeze all backbone parameters. This demonstrates that LMs are capable in processing time series tokens by effectively modularity alignment. In **C.1** and **C.2**, 6 and 12 backbone layers are adopted. The results shows that more backbone layers ensure better performance, which indicates the scaling laws of LMs retain in Time-FFM for time series forecasting .

**Model Efficiency.** Table 7 demonstrates that Time-FFM can reduce the training parameter quantity and communication overhead with insignificant increase in training time. Moreover, _the number of training parameters and communication parameters keeps intact_, regardless of backbone layers.

**Case Study.** We provide a case study on prompt adaption in Figure 3. **(a)** shows the attention scores between 6 patch tokens and 100 text prototypes for 8 heads on ETH1 dataset. For each head, only a small set of text prototypes (columns) have remarkable scores, which indicates that each patch token is only related to limited pretrained word embeddings and dynamically prompt adaption is promising. **(b)-(d)** show top \(M\) prototypes of 8 heads on ETH1, Electricity, and ILI respectively. Darker colors correspond to text prototypes with higher attention scores. From these three subplots, we have the following key observations: (1) different datasets correspond to variant text prototypes; (2) the distribution of text prototypes on different datasets has commonality, i.e., gathering in shadow areas. These observations indicate the global prompt adaption module has great generalization for diverse datasets and simultaneously ensures personalization across various domains.

## 5 Conclusion and Discussion

In this paper, we propose the first federated foundation model for time series forecasting, with adaptively generating domain-specific prompts and tackling time series heterogeneity for general

   Forecasting Task &  &  &  &  \\  Metric & MSE & MAE & MSE & MAE & MSE & MAE & MSE & MAE \\ 
**B.1** Freeze (**Default**) & 0.422 & 0.412 & 0.473 & 0.439 & 0.295 & 0.308 & 0.367 & 0.354 \\
**B.2** FFT & 0.396 & 0.409 & 0.450 & 0.441 & 0.290 & 0.305 & 0.363 & 0.352 \\
**B.3** Full & **0.394** & **0.403** & **0.448** & **0.431** & **0.287** & **0.305** & **0.360** & **0.351** \\ 
**C.1** GPT2 (6) (**Default**) & 0.422 & 0.412 & 0.473 & 0.439 & 0.295 & 0.308 & 0.367 & 0.354 \\
**C.2** GPT2 (12) & **0.406** & **0.409** & **0.456** & **0.436** & **0.294** & **0.307** & **0.367** & **0.353** \\   

Table 6: Ablation studies of LM on ETH1 and Weather datasets with \(F_{i}\{96,192\}\) and \(F_{i}\{336,720\}\) respectively. **Bold**: the best.

   Method & Training Param. (M) & Total Param. (M) & Training Param. PCT. (\%) & Training Time (s/iter) & Comm. Param. (M) \\ FedLoRa & 8.543 & 90.456 & 9.445 & 0.048 & 8.543 \\ FedAdapterHt & 47.998 & 90.945 & 52.777 & 0.062 & 47.998 \\ FedAdapterP & 47.550 & 90.498 & 52.543 & 0.046 & 47.550 \\ Time-FFM & 8.138 & 90.050 & 9.037 & 0.088 & 6.811 \\ GPT (12) & 8.138 & 132.578 & 6.138 & 0.156 & 6.811 \\   

Table 7: Efficiency analysis of Time-FFM on ETH1 dataset.

Figure 3: A showcase of prompt adaption.

purpose learning and personalized prediction. Specifically, given the differentiation of dimensionality and horizon, we introduce the modality alignment module encompassing the channel-independent and patching techniques, which may follow the track of GPT4TS and Time-LLM. For bootstrapping the pre-trained GPT2 backbone for cross-domain time series reasoning, we propose to adaptively construct prompts from how to understand patch tokens, rather than from rigid domain instructions. Due to cross-domain time series heterogeneity, we devise a personalized federated strategy, with global encoder and personalized prediction heads.

**Rationale of Time-FFM.** Compared with the modality of text, time series is more domain-specific and copyright-sensitive, i.e., private knowledge may be inferred from historical time series readings, especially in finance and healthcare domain. Hence, it is of great significance to take data privacy into account when constructing time series foundation models. Moreover, a multitude of public data cannot even be adopted for pre-training foundation models due to data license restriction, such as Kaggle public datasets. Hence, our work uniquely bridges the gap between foundation models and federated learning, which not only enhances the privacy and applicability of foundation models in sensitive domains but also opens up new avenues for leveraging rich, yet previously inaccessible, time series data for advanced predictive analytics, addressing a crucial need in this field.

**Limitations and Future Works.** We recognize some limitations of our work: the training time is increased compared with the **TY1** and the performance in some case is suboptimal. In the future work, we will explore more effective and efficient modality alignment strategies. Moreover, further researches will investigate the correspondence between patch embeddings and word embeddings to explore whether time series data can be seamlessly "translated" into natural language.