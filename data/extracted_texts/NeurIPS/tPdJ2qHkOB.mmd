# Toward Self-Improvement of LLMs via Imagination, Searching, and Criticizing

Ye Tian\({}^{1,2}\)1, Baolin Peng\({}^{1}\)1, Linfeng Song\({}^{1}\)1, Lifeng Jin\({}^{1}\), Dian Yu\({}^{1}\), Lei Han\({}^{2}\)

Haitao Mi\({}^{1}\)2, Dong Yu\({}^{1}\)

\({}^{1}\)Tencent AI Lab, Bellevue, WA

\({}^{2}\)Tencent Robotics X

{baolinpeng,lfsong,lifengjin,judian,haitaomi,dyu}@global.tencent.com

{yaptian,lxhan}@tencent.com

Equal Contribution; \(\)Corresponding Author

###### Abstract

Despite the impressive capabilities of Large Language Models (LLMs) on various tasks, they still struggle with scenarios that involves complex reasoning and planning. Self-correction and self-learning emerge as viable solutions, employing strategies that allow LLMs to refine their outputs and learn from self-assessed rewards. Yet, the efficacy of LLMs in self-refining its response, particularly in complex reasoning and planning task, remains dubious. In this paper, we introduce AlphaLLM for the self-improvements of LLMs, which integrates Monte Carlo Tree Search (MCTS) with LLMs to establish a self-improving loop, thereby enhancing the capabilities of LLMs without additional annotations. Drawing inspiration from the success of AlphaGo, AlphaLLM addresses the unique challenges of combining MCTS with LLM for self-improvement, including data scarcity, the vastness search spaces of language tasks, and the subjective nature of feedback in language tasks. AlphaLLM is comprised of prompt synthesis component, an efficient MCTS approach tailored for language tasks, and a trio of critic models for precise feedback. Our experimental results in mathematical reasoning tasks demonstrate that AlphaLLM significantly enhances the performance of LLMs without additional annotations, showing the potential for self-improvement in LLMs. The code is available at https://github.com/YeTianJHU/AlphaLLM.

## 1 Introduction

LLMs, trained on trillions of tokens with billions of parameters have shown unparalleled capabilities in a wide range of natural language processing tasks (Touvron et al., 2023; Team et al., 2023; OpenAI, 2023). Nevertheless, they continue to face challenges in scenarios requiring complex reasoning and strategic planning (Valmcekam et al., 2022; Stechly et al., 2024). While advanced prompting approaches such as Chain, Tree, Graph-of-Thought (Wei et al., 2022; Yao et al., 2024; Besta et al., 2024; Ding et al., 2023), it remains essential to fine-tune LLMs using a substantial volume of high-quality, supervised data to fundamentally improve the model performance (Nye et al., 2021; Lewkowycz et al., 2022; Chung et al., 2022). This methodology is inherently limited by the scope and quality of data that humans can provide.

Considering these challenges, the concept of self-correction and self-learning have been proposed as promising solutions (Madaan et al., 2024; Saunders et al., 2022; Chen et al., 2024). Within these framework, LLMs typically operate by employing two main strategies: 1) they continuously refinetheir responses based on the feedback of their past responses, and 2) they extensively sample responses then learn from preferences judged by itself as reward models with PPO or DPO (Yuan et al., 2024, 2024, 2024). However, it remains a matter of ongoing research whether LLMs can effectively critique their own outputs to either enhance response quality or apply a scalar reward to indicate the quality of responses, especially in contexts demanding intricate planning and reasoning (Valmeekam et al., 2022; Stechly et al., 2024; Huang et al., 2023; Hong et al., 2023). On the other hand, advanced search algorithms such as MCTS, combined with reinforcement learning, have enabled models to learn from self-play and achieve human parity or even surpass human performance in complex tasks such as the game of Go (Silver et al., 2016, 2017). This naturally raises a question: is it viable to leverage the strengths of MCTS alongside LLMs to inaugurate a novel paradigm of self-improving? More precisely, could the assimilation of MCTS empower LLMs to more effectively explore better responses, guided by strategic signals, and subsequently optimize these responses to enhance overall performance?

To answer this question, we begin with a systematic examination of AlphaGo, identifying three critical aspects for its success: (_i_) The large volume of data, including self-play data. (_ii_) The use of tree search, which facilitates the exploration of potential moves through statistical sampling of the large search space. (_iii_) Accurate and unambiguous environment feedback; the direct and accurate feedback (win or loss) provided by the game of Go offers a clear and unequivocal learning signal (Silver et al., 2017). The integration of MCTS with LLMs for self-improvement has several challenges: (_i_) Limited Data: High-quality annotated data for LLMs is generally scarce. Furthermore, how to construct of synthetic data for LLMs training, similar to AlphaGo's self-play data, remains unclear. (_ii_) Search Efficiency: The vast number of potential token combinations in natural language tasks results in an exponentially large search space, posing a significant challenge to the efficiency of MCTS (Ramamurthy et al., 2022). (_iii_) Imperfect Feedback: In contrast to the clear win/loss feedback in Go, feedback in natural language tasks is often subjective and nuanced, without a straightforward measure of success.

In this paper, we introduce AlphaLLM, an imagination-searching-criticizing framework designed for the self-improvement of LLMs. AlphaLLM consists of three key components, as illustrated in Figure 1. First, an imagination component is designed to synthesize prompts, alleviating the issues of data scarcity. Second, we propose \(\)Mcts tailored for efficient searching in language tasks. Particularly, it has been show that planning at multiple levels of temporal abstraction is critical for RL problems with a long horizon and large action space (Sutton et al., 1999; Peng et al., 2017; Luketina et al., 2019). As such, we propose formulating the text generation process as options over a Markov Decision Process (MDP) problem, where each option represents the generation of a collection of tokens for a specific subtask, similar to the concept of chains in chain-of-thought prompting. This formulation improves search efficiency by substantially reducing the search depth. Additionally, we propose the use of state merge and adaptive branching factors to further enhance search efficiency by balancing the trade-off between search width and depth. Lastly, since accurate feedback is crucial to the success of MCTS, we introduce a trio of critic models to guide \(\)Mcts, including a value function for estimating expected rewards, a process reward model for assessing node correctness, and an outcome reward model for evaluating the overall trajectory. For complex tasks with which LLMs struggle assessing such as arithmetic computation and code execution, to ensure the accuracy

Figure 1: Imagination-Searching-Criticizing self-improvement loop: Imagination component synthesizes prompts as new learning examples, with MCTS searching better trajectories guided by signals from critics for policy improving.

of feedback, we augment the critics with the capacity to make dynamic decisions on which tools to use, when to use them, and how to use them effectively. After \(\)MCTS stage, we collect the trajectory with the largest reward from the critic models as the training examples to improve LLMs.

The experimental results on mathematical reasoning tasks demonstrate that AlphaLLM can efficiently search for better responses and use them to improve LLMs' performance, forming an effective self-improving loop. Notably, based on Llama-2-70b and WizardMath-70B-V1.0, AlphaLLM can improve its performance from 57.8 to 92.0 on GSM8K and from 20.7 to 51.0 on MATH, performing comparably to GPT-4.

## 2 Related Work

Search with LLMEffective search strategy has been shown crucial for tasks that involve complex reasoning and planning, such as go (Silver et al., 2016) and math reasoning (Cobbe et al., 2021; Hendrycks et al., 2021). For math reasoning tasks, various search methods have been studied. One direction of research (Zhu et al., 2024; Xie et al., 2024) designed beam search with dynamic pruning, where beam items of low quality are pruned. Another line of work (Yao et al., 2024; Long, 2023; Besta et al., 2024; Hao et al., 2023; Feng et al., 2023) maintains a tree or a graph that represents the current progress of solving the input question where potential branches are iteratively expanded. Both our approach and Feng et al. (2023) are based on the MCTS algorithm, while one main difference is how to define a search step: Feng et al. (2023) fix a search step to be either a token or a sentence, while our approach is more flexible on deciding steps. We have also carefully designed the MCTS process, incorporating multiple critique signals to guide the search more effectively and introducing adaptive search parameters for improved state exploration. As the result, our approach achieves much better performances.

LLM Self-improvingBeing a key to the success of scalable oversight (Bowman et al., 2022), self-improving for LLM aims to align the LLM to human preference and values mainly using the supervision from the knowledge inside the LLM (Zelikman et al., 2022, 2024). One crucial part of self-improving is how to obtain reliable signal of critique to distinguish between good responses from the LLM and bad ones. Initial work (Bai et al., 2022; Wang et al., 2022) first asks the LLM to generate input queries of diverse tasks and the corresponding outputs. They then rely on hand-crafted heuristic rules to filter out redundant or low-quality data pairs (e.g. the query is too long or too short). Since it is non-trivial to compose effective heuristic rule, later work (Sun et al., 2023; Li et al., 2023; Guo et al., 2024) proposes a few general principles or judging criteria and ask the LLM itself to evaluate the quality its responses based on these guidance, hoping that LLMs can automatically designate these principles into each data point to better guide data filtering. However, this requires LLMs to have strong abilities to apply these principles for each specific case and make correct judgements. Different from previous work, we propose to leverage the supervision from MCTS for LLM self-improvement: taking the outputs of MCTS to continue train the LLM. This is because the outputs from MCTS are usually in much better quality then standard nucleus sampling, and the large gap ensure that the LLM can self improve.

## 3 Preliminaries

### Problem Formulation

In this paper, we consider a LLM characterized by probability \(p_{}\) and denoted as policy \(_{}\). It takes a sequence \(=[x_{1},,x_{n}]\) as input, which is typically referred as prompt, to generate the response \(=[y_{1},,y_{m}]\). In the context of LLMs, each \(x_{i}\) and \(y_{i}\) represents a token from a pre-defined vocabulary. The policy \(_{}\) operates in an autoregressive manner, where each token is generated sequentially, relying solely on the context provided by the previously generated tokens. The policy therefore constitutes a Markov process in which the conditional probability distribution \(p_{}(|)\) can be decomposed and expressed with the chain rule as \(p_{}(|)=_{i=1}^{m}p_{}(y_{i}|,_{<i})\).

With this property, the text generation task can be formulated as an Markov Decision Process (MDP) problem consisting of \((,,T,R,)\) in which, \(_{t}\) represents the context information of current trajectory, _i.e.,_ current status of the generation process, _e.g.,_ a partial response to a prompt; \(a_{t}\) denotes a single action or sampled token from the vocabulary, leading to a transition to a new state \(_{t+1}\), by concatenating \(_{t}\) and \(a_{t}\); \(r_{t}=R(_{t},a_{t})\) manifest the evaluation of the generation to the prompt, reflecting the desirability or preferences of each state-action pair.

This MDP framework sets the stage for applying Reinforcement Learning (RL) methods to optimize the policy \(_{}\) aiming to maximize the expected cumulative reward \(R\). Base on these setups, we describe the self-improving problem. Given a LLM \(_{}\) and an initial dataset \(^{0}\), which consists of \(N\) expert-generated prompt-response pairs \(\{(_{i}^{0},_{i}^{0}) i[N]\}\), the goal of self-improving is to iteratively refine \(_{}\) to maximize the reward. The refinement process includes learning from synthesized prompts and corresponding responses. These responses are obtained using an advanced search algorithm that navigates the space of possible responses to maximize the expected reward. The detailed process is described in Algorithm 1 in Appendix. The primary challenges in forming an effective self-improving loop lie in synthesizing suitable prompts, efficiently searching over a vast action space, and obtaining precise feedback, which will be discussed in SS4.

### Monte Carlo Tree Search

MCTS is a sampling-based search algorithm for policy optimization in decision-making problems. It would iteratively build a search tree, by repeating four phases: selection, expansion, evaluation, and backpropagation. In the selection phase, it would recursively select the children from the root node by Upper Confidence Bound (UCB) (Auer et al., 2002), \(UCB(i)=w_{i}+C*}{n_{i}}}\), where \(n_{i}\) and \(N_{i}\) are the visit counts for the node \(i\) and its parent respectively, \(C\) represents a hyperparameter balancing exploration and exploitation, and the \(w_{i}\) is the average value of all descendant nodes of \(i\).

## 4 AlphaLLM

### Overview

The architecture of AlphaLLM is depicted in Figure 1, comprising three key components. Firstly, the imagination component is tasked with synthesizing prompts as learning examples. Secondly, an efficient search component, named \(\)MCTS, is proposed to search high-quality trajectories for optimizing the policy. Lastly, the search process is guided by critics specifically designed to provide reliable signals.

### Data Synthesizing

Let \(^{0}=\{(_{i},_{i}) i[N]\}\) denote the initial dataset consisting of \(N\) expert-generated prompt-response pairs. The data synthesizing process aims to expand this dataset by generating a set of synthesized prompts \(^{1}=\{(_{i}^{1},) i[N]\}\). The generation of each synthesized prompt \(_{i}^{1}\) can be mathematically described as a transformation \(g\) applied to one or more examples from \(^{0}\), \(_{i}^{1}=g(_{i_{1}}^{0},,_{i_{m}}^{0},^{0})\) where \(_{i_{1}}^{0},,_{i_{m}}^{0}\) are selected examples from \(^{0}\). The transformation function \(g\) controls the synthesis process, which can be a learnable function, manually defined heuristic rules, a strong LLM or the policy model itself \(^{0}\) equipped with data synthesis instructions. The data synthesizing process aims to enrich the diversity and complexity presented for the training of the policy model. Among various strategies, such as Self-instruct (Wang et al., 2022), Evol-instruct (Xu et al., 2023), we opt for a method akin to that described in Yu et al. (2023).

### \(\)MCTS

#### 4.3.1 Option-level MCTS

When applying MCTS to LLMs, it is natural to perform token-level search, where each token is considered as an action (Liu et al., 2023). However, the substantial vocabulary size typical of LLMs presents a significant challenge _i.e.,_ conducting a deep search in such a vast space becomes increasingly complex as the search space expands exponentially. To mitigate this, some efforts proposed a sentence-level search, treating each sentence or step as a search node (Feng et al., 2023). While this method reduces the search space, it might compromise the flexibility and effectiveness of applying MCTS to LLMs, which is particularly true for tasks where subtle variations in token can dramatically impact the outcome, or where a more comprehensive search beyond a sentence is necessary.

Inspired by Sutton et al. (1999a); De Waard et al. (2016), we use the term option as a search node and propose option-level MCTS where each option represents a sequence of tokens, which can range from multiple tokens to several sentences. A comparisons of different levels search is listed in Table 1. Mathematically, an option \(o=,,\), where \(\) is a set of initial states for the option; \(:\) is a policy to generate actions, which in our case is a LLM; and \(:^{+}\) is the termination function. Starting from a state \(s_{t}\), we can choose all the options for which \(s_{t}\). Once an option is chosen, the policy \(\) will generate actions for several steps until the option terminates according to the termination function \(\). The option-level MCTS consists of stages including selection, expansion, simulation, and backpropagation. The option-level formulation offers more flexibility compared to the sentence-level, as a new line can be treated as a special case of the termination function, as demonstrated in Table 1. Additional detailed steps of the option-level MCTS can be found in Appendix A.2.

#### 4.3.2 Importance-Based Adaptive Branching

In previous works related to option/sentence level tree search (Feng et al., 2023; Yao et al., 2024), it was a common practice to assume that each node in the tree has the same predefined width, _i.e._, branching factor. This assumption was due to the fact that unlike token-level MCTS with a limited action space, the sample space at the option-level is exceedingly large, with an unlimited number of token combinations. As a result, it was necessary to set a predefined maximum width for each node. However, this predefined branching factor is hard to set, as an improper choice can lead to a search tree that is either too shallow or too thin, resulting in an inefficient exploration of the search space.

To quantify the error induced by the branching factor limit, we defined the branching error \(E_{}(t)\). For a node \(t\) with a branching factor of \(m_{t}\), it aims to use the \(m_{t}\) child options \(_{t}^{i}_{t}^{children}\) (where \(i\{1,,m_{t}\}\)) to represent all possible options. Consequently, for a legal option \(_{t}^{j}(_{t})\) from the option space, we can calculate the minimal value difference between it and the \(m_{t}\) existing options, which captures the error associated with representing other possible options using the \(m_{t}\) available options. It can be formulated as \(E_{}(t)=_{_{t}^{j}(_{t})}[_{_{t}^{j }}|v_{}^{}([_{t},_{t}^{j}])-v_{}^{}([_{t}, {o}_{t}^{i}])|]\), where \(v_{}^{}\) is the value function which will be detailed in SS4.4. Here we define the importance of node \(_{t}\) as \(I(_{t})=_{_{t}^{j}}|v_{}^{}([_{t},_{t}^{j}] )-v_{}^{}(_{t})|.\) For simplicity, we assume that the value of the children nodes are uniformly distributed (a detailed analysis of the Gaussian distribution can be found in Appendix A.4). Under this assumption, we show in Appendix A.3 that \(E_{}(t)_{t})}{m_{t}-1}\). While \(E_{}\) is less than some \(\), we aim to use a smaller total number of nodes for efficiency.

**Theorem 4.1**.: _The optimal branching factor \(m_{t}\) in a tree search is set such that \(m_{t}-1\) is proportional to the node importance \(I(_{t})\), under the condition \(_{t})}{m_{t}-1}\). Refer to Appendix A.3 for the detailed proof._

A similar concept has also been proposed in Taylor et al. (2014); Clouse (1996). Intuitively, \(I(_{t})\) captures the maximum value deviation from the current state. When this value is small, there is no need to explore further on this node, as there will not be a significant difference by rolling out on this node. Conversely, if the value is large, it is worth trying different children. We set the number of children allowed for a node \(n(_{t})\) (after extracting \(1\)) to be linear with this importance, using a factor \(\). In practice, to avoid extreme cases of large variance of \(I(_{t})\) in the early stage, we bound the number of children by depth-dependent constants \(c_{}(t)\) and \(c_{}(t)\), \(n(_{t})=(c_{}(t),( I(_ {t})+1,c_{}(t))).\)

  Search Node & Example & Termination \\  Token-level & \(y_{0} y_{1} y_{2} y_{3} y_{5} y_{6} y_{7} y_{8}\) & token \\  Sentence-level & \(y_{0}y_{1}y_{2}\) [\(\)] \( y_{4}y_{5}y_{6}\) [\(\)] \( y_{7}y_{8}y_{9}y_{10}\) & new line \\  Option-level & \(y_{0} y_{1}y_{2}\) [\(\)] \( y_{4}y_{5}y_{6}\) [\(\)] \(y_{7}y_{8}y_{9}\) [\(\)] \( y_{10}\) & termination function \\  

Table 1: Comparative illustration of token-level, sentence-level, and option-level MCTS search nodes. \(y\) denotes a token sampled from the policy model. The arrow \(\) represents the transition from one search node to the subsequent node within the search process.

#### 4.3.3 State Merge

With \(n(_{t})\) determined, another issue is that options under the same node may be very similar, leading to many unnecessary sub-trees. Since we cannot directly control the \(_{t}(_{t})\), one strategy to mitigate this issue is to utilize the concept of move groups, as discussed in Van Eyck and Muller (2012). By merging similar nodes into the same group, we can increase the diversity among groups, thereby covering a larger problem space with limited search rollouts and making the search process more efficient.

Here, we adapt the definition of node predicate \(p_{vM}\) from Abel et al. (2018) and Fu et al. (2024) to represent whether two nodes are extremely similar. In practice, each time we generate a new option from the policy, we use heuristic functions as \(p_{vM}\) to check its similarity with all existing groups. The heuristic function can either be a faster rule-based measurement (e.g., edit distance) or a model-based method (e.g., prompting a language model). Based on this, we decide whether to merge this option with a previous one or create a new group.

#### 4.3.4 Fast Rollout with Specialized LM

The simulation operation which employs a rollout policy to project future trajectories from a given state, is crucial for an effective MCTS. This process significantly improves the efficiency of exploration and exploitation, and enhances the accuracy of reward estimation2. Estimations made at the end of trajectories tend to have lower bias but higher variance; thus, simulating multiple possible trajectories yields low-bias, low-variance estimates, enabling a more informed and effective search process. Ideally, \(_{}\) would serve as the rollout policy, yet its computational demands render it impractical for the rapid simulations required by MCTS. To address this challenge, we propose the use of a smaller, specialized LM as the fast rollout policy \(^{}\). Given a state \(_{t}\), the fast rollout policy \(^{}\) efficiently continues generation until it reaches a termination condition, denoted as \(^{}(_{t})\).

### Critic

In AlphaLLM, we design three types of critic models to guide the search process.

Value FunctionThe value function, denoted as \(v^{}()\), represents the expected return starting from state \(\) and following policy \(\) thereafter, given by \(v^{}()=_{}[R()|s_{0}=]\) where \(R()\) represents the discounted return of trajectory \(\). To train a parameterized value function \(v^{}_{}()\), given the prompts \(=\{(_{i},) i[N]\}\), for each prompt \(_{i}\), we generate multiple trajectories \(^{j}_{i}=\{_{i},^{j}_{i1},^{j}_{i2},,^ {j}_{iT}\}\) by following policy \(\) for \(J\) times. A final reward \(r^{j}_{i}\) is assigned to indicate whether \(^{j}_{i}\) aligns with \(_{i}\)--for example, rewarding trajectories that contain correct answers in mathematical tasks or closely follow instructions as ground truth. We then construct a dataset \(_{}=\{(s^{j}_{it},v^{j}_{it}) i[N],t[T],j [J]\}\) where \(^{j}_{it}=[_{i}^{j}_{<it}]\) and \(v^{j}_{it}=r^{j}_{i}\). The value function \(v^{}_{}\) is optimized by minimizing the mean squared error: \(_{}=-_{(,v)_{}}( v^{}_{}()-v)^{2}\). Similar to Feng et al. (2023), \(v^{}_{}\) is a LLM with an MLP layer on top to output a scalar on each token, using the scalar prediction at the last token of each state as the value.

PrmThe value function often struggles with credit assignment problem (Sutton, 1984) and its learning could be inefficient due to delayed and sparse rewards (Sutton and Barto, 2018). Therefore, we propose to incorporate PRM that introduces process supervision (Lightman et al., 2023) for direct option assessment. PRM generates intrinsic rewards (Chentanez et al., 2004) to encourage explorations of advantageous options, effectively mitigating issues of reward sparsity by providing immediate, action-specific rewards. Given a state \(_{t}\) and an option \(_{t}\) at time \(t\), the PRM aims to predict the immediate reward \(r^{}_{t}\) that results from taking option \(_{t}\) in state \(_{t}\). Formally, the PRM is a function \(R(_{t},_{t}) r^{}_{t}\). While PRM ideally requires quality labels for each state (Uesato et al., 2022), due to the high cost and time involved in obtaining these, MC estimation with prefix sampling (Wang et al., 2023) is used as a proxy, which aligns with the objective of the value function. Instead of adding a MLP layer on top of the policy model for outputting a scalar reward (Ouyang et al., 2022), we formulate PRM as a text generation task to best leverage LLM's intrinsic knowledgefor assessing the quality of an option. We adapt the dataset constructed for the value function as \(_{}=\{(_{it},_{t},r_{t}^{})|i[N],t[T]\}\) where \(r_{t}^{}\) is the textual description of the reward, _e.g.,_ an option can be regarded as good if \(v_{it}\) is larger than certain threshold. To train PRM, we initialize it from the policy model \(\) and use the following prompt templates and typical language model loss. The prompt template is shown in Appendix A.5.

OrmIn additional to the value function and PRM, ORM is also used to guide MCTS. ORM is designed to evaluate options sequences in their entirety, assessing the extent to which the complete trajectory aligns with the desired end goal (Uesato et al., 2022; Lightman et al., 2023; Wang et al., 2023; Feng et al., 2023). The outcome evaluation complements value function and PRM by offering a comprehensive assessment of trajectories. Crucially, ORM plays a vital role in the simulation stage of MCTS by providing more accurate signals on the terminal state, which in turn facilitates a more balance between exploration and exploitation strategies. ORM is formulated as a text generation task, similar to PRM. We leverage the same dataset for the value function training and construct \(_{}=\{(_{i},_{1:T}^{i},r_{i}^{} )|i[N]\}\), where each instance includes a initial state or prompt \(_{i}\), a sequence of actions or options \(_{1:T}^{i}\) taken from that state, and a textual reward \(r_{i}^{}\) indicating the sequence's success or quality. Similarly, ORM is initialized from the policy model \(\) and the following prompt templates and language model loss are used for training. The prompt template is shown in Appendix A.5.

The final score evaluation of a state \(\) is a weighted sum of the value function, PRM, and ORM: \(s()=_{} v_{}^{}()+_{}()+_{}_{ ^{}()}[()]\), where \(^{}()\) represents trajectories starting from \(\) under \(^{}\), and \(_{}\), \(_{}\), \(_{}\) are hyperparameters. In practice, we found that the value function model has better precision and calibration, while PRM has superior recall (Appendix A.10). Although ORM with fast rollouts provides low-bias, low-variance estimates, it still inherits some bias from \(^{}\). Thus, combining these critics yields a stronger evaluation signal.

### Policy Self-Improvement

The policy improvement an iterative process with each iteration containing two main steps: _data generation_ and _policy finetuning_.

Data generationIn this step, we assume to have the current policy \(_{_{k}}\) and synthetic prompts \(_{k}=\{_{1}^{k},\}\) at the \(k\)-th round, where each \(_{1}^{k}\) represents a question. We obtain the corresponding training data \(_{k}\) for policy \(_{_{k}}\) by firstly performing \(\)MCTS on \(_{k}\) (SS4.3) and then sampling a trajectory \(_{i}^{k}\) from the corresponding tree for each question \(_{i}^{k}\). Here we choose the trajectory that yield the highest critic score on the leaf node for each input question. Next, we filter out instances where the corresponding trajectory is substandard forming \(_{k}=\{(_{i}^{k},_{i}^{k}) f(_{i}^{k},_ {i}^{k})>\}\) where \(f\) represents a function for quality scoring, and \(\) indicates a threshold. There can be several ways to implement the function, and here we simply use the DRM (SS4.4).

Policy finetuningWith the obtained training data \(_{k}\), we organize the data into the prompt templates shown in Appendix A.5. Then the policy \(_{_{k}}\) is finetuned using target-loss: \(_{_{k}}=_{(_{i}^{k},_{i}^{k}) _{k}}_{_{k}}(_{i}^{k}|_{i}^{k})\), resulting in an updated policy \(_{_{k+1}}\). We leave other training methods, such as DPO (Rafailov et al., 2023) or PPO (Schulman et al., 2017) in future work.

## 5 Experiments

### Experiment Setups

AlphaLLM is generally applicable to a wide spectrum tasks. As an early exploration, in this paper, we conduct experiments on mathematical reasoning problems where the learning signals are clear to define _i.e.,_, final answer is correct or wrong. We choose to evaluate on two widely used datasets GSM8K (Cobbe et al., 2021) and MATH (Hendrycks et al., 2021). For GSM8K, we utilize the whole test set while for MATH, due to computation constraints, we utilize a subset following the same procedure of Lightman et al. (2023). We evaluate the performance of predicting answers correctly for policy models. In addition, we calculate the average rollouts, represented by the number of nodes in the tree, as a measure of computational efficiency. We compare the performance of AlphaLLM with a suite of proprietary model, including OpenAI's GPT-4 and GPT-3.5, Anthropic's Claude-2, as well as Google's PaLM-2 and the gemini model family. To ensure a fair and consistent evaluation, we employ CoT as our primary prompting method. Additionally, we conduct comparisons with strong open-source models, including Llama-2-70b (Touvron et al., 2023) and WizardMath-70B-V1.0 (Luo et al., 2023).

We select Llama-2-70b as the policy model for the GSM8K dataset and WizardMath-70B-V1.0 for the MATH dataset. To construct the training dataset for the value function, PRM and ORM, we generate 50 trajectories for each prompt and construct the training target following Section 4.4. Both PRM and ORM are initialized using the weights from the policy model, while the value function uses a smaller Llama-2-13b model, as we observed no performance gains from increasing the value function model size. In the design of ORM, tool usage is not incorporated for GSM8K. However, for MATH, we enhance ORM by incorporating tools like python sympy to assess the quality of a trajectory, in a manner similar to that described by Gou et al. (2023). The training employ a learning rate of 1e-6 and are trained for one epoch. For the fast rollout policy model, we opt for the Abel-002-7B model (Chern et al., 2023) for both the GSM8K and MATH tasks for its high efficiency and superior performance. For the MCTS parameters, they are configured at different scales, as shown in Appendix A.6. We set \(_{}\), \(_{}\), and \(_{}\) all to 1.0.

For policy self-improving (SS4.5), we train the policy model up to 3 epochs, setting batch size to 128, learning rate to \(5 10^{-6}\) and minimal learning rate to \(1 10^{-6}\). Linear warm-up and decay is used with warm-up percent to be 10%. We perform early stopping based on a devset held out from the training instances. For GSM8K experiments, we perform two rounds of self-improving, synthesizing 6.4k and 7.9k prompts(Yu et al., 2023) respectively to obtain the corresponding MCTS outputs for training. For MATH experiments, we only perform one round of self-improving due to limited computation resources, and 5.9k prompts are synthesized.

The termination function for options can be either be learned or rule-based. In practice, for the GSM8K dataset, the termination condition occurs at the end of each line. This is based on the typical structure of this dataset, where each line represents a distinct step or point. For the MATH dataset, due to its complexity and the base model's tendency to generate many \(\)n line breaks with some less meaningful content between them, termination occurs at the end of a line if a formula pattern is detected. During inference, if \(\)n\(\)n is encountered, we perform a rule-based check for formula patterns. It terminates if a pattern is found or continues generating until the next \(\)n.

### Results

Table 2 lists the performance comparisons of various methods on the GSM8K and MATH datasets. Our findings reveal that AlphaLLM, based on Llama-2-70B and WizardMath-70B-V1.0, utilizes only final answer annotations and continues to improve through training on responses from \(\)Mcts. This comparison underscores the efficacy and broad applicability of our imagination-searching-criticizing self-improving framework. Moreover, when our model is augmented with \(\)Mcts decoding strategy, its performance markedly improves, achieving scores of 88.9 and 48.7 on the GSM8K and MATH datasets, respectively. Following two iterations of self-improvement using synthetic prompts, AlphaLLM demonstrates performance comparable to that of GPT-4. This suggests a viable approach to improving LLMs' capabilities in complex problem-solving tasks in a self-improving fashion, leveraging a minimal amount of labeled data. We also analyze the performance of various search methods in Appendix A.8.

### Ablation Study

We assess the effectiveness of each component in AlphaLLM and report the results on GSM8K in Table 3(a). Vanilla MCTS, configured with only the value function and a fixed number of children per node, achieves an accuracy of 79.5%. This serves as a reference point for evaluating the incremental benefits introduced by each additional component. The use of adaptive branching increae the accuracy to 84.9%. The addition of PRM improves the accuracy modestly to 85.9%, showing the effectivens of process supervision for searching. A more significant improvement is observed with the introduction of ORM with fast rollout, which boosts the accuracy to 86.5%. Integrating state merging results in a further increase in accuracy, reaching 87.0%. Finally the combined of increasing the number of rollouts with the other components yields the best performance on this task.

Table 3(b) presents the ablation study of option formulation and the tool-augmented critic on the MATH dataset. Our proposed \(\)Mcts achieves an accuracy of 45.4 with 148 rollouts. When options are excluded, reverting to essentially sentence-level MCTS, the performance decreases to 44.1 with a noticeable increase in the number of rollouts to 198. This demonstrates that option formulation introduces enhanced flexibility to MCTS, enabling better performance with fewer search efforts. Furthermore, the most significant decrease in performance is observed when only intrinsic knowledge is utilized for ORM, which drops to an accuracy of 38.8. This suggests that the absence of an external tool critically impedes the ORM's capability to effectively assess challenging math problems.

Figure 2 depicts a comparative results on GSM8K of two rounds of self-improving trained on trajectories collected using reranking and \(\)Mcts. We report the performance of greedy decoding, \(\)Mcts with a relatively small number of rollouts (50-60), and \(\)Mcts with a larger number of rollouts (200-300) for each model. We observe that 1) Models trained on the trajectories from reranking or \(\)Mcts outperform the initial policy by a significant margin. In addition, the performance can be iteratively improved with training suggesting that self-improving has the potential to achieve continual performance gain. 2) While both reranking and \(\)Mcts can generate high-quality trajectories for self-improving, \(\)Mcts is performant with high efficiency and better accuracy. Models trained on trajectories generated by it not only exceed the performance of those trained on reranked trajectories

Table 2: Comparison results of AlphaLLM on the GSM8K and MATH datasets. #Annotation indicates the quantity of labeled data employed for fine-tuning policy or training critic models. The annotation used for training are noted as RN for rationales and FA for final answers. SYN means models trained on synthetic prompts, where trajectories were generated using \(\)Mcts.

Table 3: **(a)**: Ablation studies on the GSM8K test set of various components of \(\)Mcts, including adaptive branching, PRM, fast-rollout with ORM, state merge, and large number of rollouts. **(b)**: Ablation studies of the impacts of tool-augmented ORM and option-level formulation on MATH.

but also, when decoded with \(\)Mcts, demonstrate on par performance with GPT-4, revealing that AlphaLLM is an effective self-improving framework.

We further analyze the impact of different hyperparameters and design choices for each component. Table 4(a) shows that varying heuristic functions (with hyperparameters) for state merge has limited impact on performance. Table 4(b) shows that, as the number of fast-rollouts increases, there is a corresponding improvement in performance. This is due to the reduction in the variance of the estimates. We used \(n=4\) in our experiments for better trade-off between performance and efficiency. Additional ablations on the choice of fast-rollout models, are provided in Appendix A.7.

## 6 Conclusion

In this paper, we introduce AlphaLLM, an imagination-searching-criticizing framework designed for the self-improvement of LLMs without the necessity of additional annotations. At the heart of it is the integration of MCTS with LLMs. To tackle the inherent challenges associated with this integration, including data scarcity, the vastness of search spaces, and the subjective nature of feedback in language tasks, we introduce a data synthesizer for strategic prompt synthesis, an optimized MCTS tailored for efficient search in language tasks, and a trio of critic models to provide precise feedback. Our experimental findings on mathematical reasoning tasks reveal that AlphaLLM significantly boosts the performance of LLMs without requiring extra data annotations. Moreover, when decoded with \(\)Mcts, AlphaLLM performs comparably to GPT-4, highlighting the potential for self-improvement in LLMs.

Table 4: **(a)**: Ablation studies on the choice of heuristic/model-based functions in state merge on GSM8K with base Llama2-70b. The model used in the model-based state merge is Llama-2-70b-chat. **(b)**: Ablation studies of the number of rollout trajectories in fast-rollout estimation on GSM8K with base Llama2-70b.

Figure 2: Empirical analysis on GSM8K of different self-improving data collection methods and number of iterations. Models are evaluated with greedy decoding, \(\)Mcts with small #rollout and large #rollout.