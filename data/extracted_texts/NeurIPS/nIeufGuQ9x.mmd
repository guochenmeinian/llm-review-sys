# DiffSF: Diffusion Models for Scene Flow Estimation

Yushan Zhang  Bastian Wandt Maria Magnusson  Michael Felsberg

Linkoping University

{firstname.lastname}@liu.se

###### Abstract

Scene flow estimation is an essential ingredient for a variety of real-world applications, especially for autonomous agents, such as self-driving cars and robots. While recent scene flow estimation approaches achieve reasonable accuracy, their applicability to real-world systems additionally benefits from a reliability measure. Aiming at improving accuracy while additionally providing an estimate for uncertainty, we propose _DiffSF_ that combines transformer-based scene flow estimation with denoising diffusion models. In the diffusion process, the ground truth scene flow vector field is gradually perturbed by adding Gaussian noise. In the reverse process, starting from randomly sampled Gaussian noise, the scene flow vector field prediction is recovered by conditioning on a source and a target point cloud. We show that the diffusion process greatly increases the robustness of predictions compared to prior approaches resulting in state-of-the-art performance on standard scene flow estimation benchmarks. Moreover, by sampling multiple times with different initial states, the denoising process predicts multiple hypotheses, which enables measuring the output uncertainty, allowing our approach to detect a majority of the inaccurate predictions. The code is available at https://github.com/ZhangYushan3/DiffSF.

## 1 Introduction

Scene flow estimation is an important research topic in computer vision with applications in various fields, such as autonomous driving  and robotics . Given a source and a target point cloud, the objective is to estimate a scene flow vector field that maps each point in the source point cloud to the target point cloud. Many studies on scene flow estimation aim at enhancing accuracy and substantial progress has been made particularly on clean, synthetic datasets. However, real-world data contains additional challenges such as severe occlusion and noisy input, thus requiring a high level of robustness when constructing models for scene flow estimation.

Recently, Denoising Diffusion Probabilistic Models (DDPMs) have not only been widely explored in image generation [12; 28] but also in analysis tasks, e.g. detection , classification , segmentation [1; 10], optical flow , human pose estimation , point cloud registration , etc. Drawing inspiration from the recent successes of diffusion models in regression tasks and recognizing their potential compatibility with scene flow estimation, we formulate scene flow estimation as a diffusion process following DDPMs  as shown in Figure 1. The forward process initiates from the ground truth scene flow vector field and gradually introduces noise to it. Conversely, the reverse process is conditioned on the source and the target point cloud and is tasked to reconstruct the scene flow vector field based on the current noisy input. To learn the denoising process, a new network is proposed inspired by state-of-the-art scene flow estimation methods FLOT  and GMSF .

Previous methods [43; 5; 36; 4] usually suffer from inaccuracies when occlusions occur or when dealing with noisy inputs. During inference, based on the fixed parameters learned during training, they cannot provide information about their inaccurate predictions, which might lead to problems in safety-critical downstream tasks. Our proposed method approaches this problem in two aspects:First, denoising diffusion models are capable of handling noisy data by modeling stochastic processes. The noise caused by sensors in the real world is filtered out, which allows the model to focus on learning underlying patterns. By learning feature representations that are robust to noise, the prediction accuracy is improved. Second, since the diffusion process introduces randomness into the inherently deterministic prediction task, it can provide a measure of uncertainty for each prediction by averaging over a set of hypotheses, notably without any modifications to the training process. Extensive experiments on multiple benchmarks, FlyingThings3D , KITTI Scene Flow , and Waymo-Open , demonstrate state-of-the-art performance of our proposed method. Furthermore, we demonstrate that the predicted uncertainty correlates with the prediction error, establishing it as a reasonable measure that can be adjusted to the desired certainty level with a simple threshold value.

To summarize, our contributions are: (1) We introduce DiffSF, leveraging diffusion models to solve the full scene flow estimation problem, where the inherent noisy property of the diffusion process filters out noisy data, thus, increasing the focus on learning the relevant patterns. (2) DiffSF introduces randomness to the scene flow estimation task, which allows us to predict the uncertainty of the estimates without being explicitly trained for this purpose. (3) We develop a novel architecture that combines transformers and diffusion models for the task of scene flow estimation, improving both accuracy and robustness for a variety of datasets.

## 2 Related Work

**Scene Flow Estimation** has rapidly progressed since the introduction of FlyingThings3D , KITTI Scene Flow , and Waymo-Open  benchmarks. Many existing methods [2; 23; 25; 31; 35; 42] assume scene objects are rigid and break down the estimation task into sub-tasks involving object detection or segmentation, followed by motion model fitting. While effective for autonomous driving scenes with static background and moving vehicles, these methods struggle with more complex scenes containing deformable objects, and their non-differentiable components impede end-to-end training without instance-level supervision. Recent advancements in scene flow estimation focus on end-to-end trainable models and are categorized into encoder-decoder, coarse-to-fine, recurrent, soft correspondence methods, and runtime optimization-based methods. Encoder-decoder techniques, exemplified by FlowNet3D [22; 39] and HPLFlowNet , utilize neural networks to learn scene flow by adopting an hourglass architecture. Coarse-to-fine methods, such as PointPWC-Net , progressively estimate motion from coarse to fine scales, leveraging hierarchical feature extraction and warping. Recurrent methods like FlowStep3D , PV-RAFT , and RAFT3D  iteratively refine the estimated motion, thus enhancing accuracy. Some approaches like FLOT , STCN, and GMSF  frame scene flow estimation as an optimal transport problem, employing convolutional layers and point transformer modules for correspondence computation. Different from the previously mentioned methods, which are fully trained and supervised offline, the runtime optimization-based

Figure 1: **Diffusion process. In the forward process, we start from a ground truth scene flow vector field \(_{0}\) and gradually add noise to it until we reach \(_{T}\), which is completely Gaussian noise. In the reverse process, we recover the scene flow vector field \(_{0}\) from the randomly sampled noisy vector field \(_{T}\) conditioned on the source point cloud \(_{}\) and the target point cloud \(_{}\).**

methods [19; 20; 6] are optimized during the evaluation time based on each pair of inputs. While these methods have the advantage of without the need for training datasets, it also means that they can not take advantage of large-scale training datasets. Due to the online optimization, they also suffer from slow inference speed. Moreover, most of them focus only on autonomous driving scenes. On the other hand, we aim to estimate the scene flow of more general scenarios. Our proposed method takes the current state-of-the-art soft correspondence method GMSF  as a baseline. Given the fact that being able to indicate uncertainty of the estimation is an important feature for safety-critical downstream tasks, we propose to leverage the diffusion models for this purpose, whose ability of uncertainty indication has been proven by other relevant research areas [11; 29].

**Diffusion Models for Regression.** Diffusion models have been widely exploited for image generation [12; 28]. Beyond their capacity to generate realistic images and videos, researchers have also explored their potential to approach regression tasks. CARD  introduces a classification and regression diffusion model to accurately capture the mean and the uncertainty of the prediction. DiffusionDet  formulates object detection as a denoising diffusion process from noisy boxes to object boxes. Baranchuk _et al_.  employ diffusion models for semantic segmentation with scarce labeled data. DiffusionInst  depicts instances as instance-aware filters and casts instance segmentation as a denoising process from noise to filter. Jiang _et al_.  introduce diffusion models to point cloud registration that operates on the rigid body transformation group. Recent research on optical flow and depth estimation  shows the possibility of using diffusion models for dense vision tasks. While there have been attempts to employ diffusion models for scene flow estimation , they mainly focus on refining an initial estimation. On the contrary, our goal is to construct a model to estimate the full scene flow vector field instead of a refinement plug-in module. To the best of our knowledge, we are the first to propose using diffusion models to estimate the full scene flow directly from two point clouds.

## 3 Proposed Method

### Preliminaries

Scene Flow Estimation.Given a source point cloud \(_{}^{N_{1} 3}\) and a target point cloud \(_{}^{N_{2} 3}\), where \(N_{1}\) and \(N_{2}\) are the number of points in the source and the target point cloud respectively, the objective is to estimate a scene flow vector field \(^{N_{1} 3}\) that maps each source point to the correct position in the target point cloud.

Diffusion Models.Inspired by non-equilibrium thermodynamics, diffusion models [12; 32] are a class of latent variable (\(x_{1},...,x_{T}\)) models of the form \(p_{}(x_{0})= p_{}(x_{0:T})dx_{1:T}\), where the latent variables are of the same dimensionality as the input data \(x_{0}\) (any dimensionality). The joint distribution \(p_{}(x_{0:T})\) is also called the _reverse process_

\[p_{}(x_{0:T})=p(x_{T})_{t=1}^{T}p_{}(x_{t-1}|x_{t}),\;\;\;p_ {}(x_{t-1}|x_{t})=(x_{t-1};_{}(x_{t},t),_{ }(x_{t},t)).\] (1)

The approximate posterior \(q(x_{1:T}|x_{0})\) is called the _forward process_, which is fixed to a Markov chain that gradually adds noise according to a predefined noise scheduler \(_{1:T}\)

\[q(x_{1:T}|x_{0})=_{t=1}^{T}q(x_{t}|x_{t-1}),\;\;\;q(x_{t}|x_{t-1})= (x_{t};}x_{t-1},_{t}).\] (2)

The training is performed by minimizing a variational bound on the negative log-likelihood

\[_{q}[- p_{}(x_{0})]& _{q}[-(x_{0:T})}{q(x_{1:T}|x_{0})}]\\ &=_{q}[D_{}(q(x_{T}|x_{0})\|p(x_{T}))\\ &+_{t>1}D_{}(q(x_{t-1}|x_{t},x_{0})\|p_{}(x_ {t-1}|x_{t}))- p_{}(x_{0}|x_{1})],\] (3)

where \(D_{}\) denotes the Kullback-Leibler divergence.

### Scene Flow Estimation as Diffusion Process

We formulate the scene flow estimation task as a conditional diffusion process that is illustrated in Figure 1. The _forward process_ starts from the ground truth scene flow vector field \(_{0}\) and ends at pure Gaussian noise \(_{T}\) by gradually adding Gaussian noise to the input data as in Eq. (2). Given that \(_{t}\) is small, \(q(_{t}|_{t-1})\) in Eq. (2) has a closed form 

\[q(_{t}|_{0})=(_{t};_ {t}}_{0},(1-_{t})),\] (4)

where \(_{t}:=_{s=1}^{t}(1-_{s})\). The _reverse process_ predicts the ground truth \(_{0}\) from the noisy input \(_{t}\) conditioned on both the source point cloud \(_{}\) and the target point cloud \(_{}\),

\[p_{}(_{t-1}|_{t},_{}, _{})=(_{t-1};_{}( _{t},_{},_{}), ).\] (5)

The forward process posterior is tractable when conditioned on \(_{0}\),

\[q(_{t-1}|_{t},_{0})=(_{t-1 };_{t}(_{t},_{0}),_{t}),\] (6)

where \(_{t}(_{t},_{0}):=-1} _{t}}{1-_{t}}_{0}+}(1- _{t-1})}{1-_{t}}_{t}\), and \(_{t}:=_{t-1}}{1-_{t}}_{t}\). Minimizing the variational bound in Eq. (3) breaks down to minimizing the difference between \(_{t}(_{t},_{0})\) and \(_{}(_{t},_{},_{})\). Since \(_{t}\) is constructed from \(_{0}\) by a predefined fixed noise scheduler \(_{1:T}\), the training objective is further equivalent to learning \(_{0}\) by a neural network \(f_{}(_{t},_{},_{})\). The training loss can be written as

\[=\|f_{}(_{t},_{},_ {})-_{0}\|,\] (7)

where the neural network \(f_{}(_{t},_{},_{})\) takes the current noisy input \(_{t}\), the source point cloud \(_{}\), and the target point cloud \(_{}\) as input and output \(}_{}\), which is an prediction of \(_{0}\). The detailed architecture of \(f_{}\) is presented in section 3.3. The reverse process in Eq. (5) can be rewritten by replacing \(_{}\) with \(f_{}\) as

\[p_{}(_{t-1}|_{t},_{}, _{})=(_{t-1};_{t}( _{t},f_{}(_{t},_{},_{})),).\] (8)

During _inference_, starting from randomly sampled Gaussian noise \(_{T}\), \(_{0}\) is reconstructed with the model \(f_{}\) according to the reverse process in Eq. (8). The detailed training and sampling algorithms are given in Algorithm 1 and Algorithm 2.

```
1repeat
2\(_{0} q(_{0}),(,)\);
3\(t(1,...,T)\);
4\(_{t}=_{t}}_{0}+_{t}}\);
5 estimate \(}_{}=f_{}(_{t},_{ },_{})\);
6 optimize loss: \(_{t}=(}_{},_{0})\);
7untilconverged; ```

**Algorithm 1**Training

### Architecture

To train the diffusion process with Eq. (7), we need to design the neural network to predict \(_{0}\), i.e. the ground truth scene flow vector field. The reverse process with the detailed architecture of \(}_{}=f_{}(_{t},_{ },_{})\) is given in Figure 2. We take the state-of-the-art method GMSF  as our baseline. All the building blocks, Feature Extraction, Local-Global-Cross Transformer, and Global Correlation are the same as in GMSF . We modify the model architecture of GMSF following the recent work [26; 8; 17] of scene flow estimation by adding an initial estimation before the final prediction. More specifically, the source point cloud \(_{}^{N_{1} 3}\) is first warped with \(_{t}^{N_{1} 3}\). The warped source point cloud and the target point cloud are sent to the Feature Extraction block to expand the three-dimensional coordinate into higher-dimensional features for each point. Based on the similarities between point pairs in the warped source and the target point cloud, a Global Correlation is applied to compute an initial estimation \(}_{}^{N_{1} 3}\). We then warp the source point cloud \(_{}^{N_{1} 3}\) with the initial estimation \(}_{}^{N_{1} 3}\). The same Feature Extraction block is applied on both the warped source point cloud and the target point cloud, but with different weights than the previous block. A Local-Global-Cross Transformer is then applied to the higher-dimensional features to get a more robust and reliable feature representation for each point. The output features are then sent into the Global Correlation block to get the final prediction \(}_{}^{N_{1} 3}\). The detailed architecture of Feature Extraction, Local-Global-Cross Transformer, and Global Correlation is given in the following paragraphs using the same notation as GMSF .

Feature ExtractionThe three-dimensional coordinate for each point is first projected into a higher feature dimension \(_{i}^{h}^{1 d}\) by the off-the-shelf feature extraction backbone DGCNN . Each layer of the network can be written as

\[_{i}^{h}=_{_{j}(i)}h(_{i}, _{j}-_{i}),\] (9)

where \(i\) and \(j\) denote the index of a single point in the point cloud. \(_{j}(i)\) denotes the neighboring points of point \(_{i}\) found by a \(k\)-nearest-neighbor (KNN) algorithm. The number of \(k\) is set to 16. The point feature \(_{i}\) and the edge feature \(_{j}-_{i}\) are first concatenated together along the feature dimension and then passed through a neural network \(h\). \(h\) consists of a sequence of linear layer, batch normalization, and leaky ReLU layer. The output feature dimension \(d\) is set to 128. The maximum value of the \(k\) nearest neighbors is taken as the output. Multiple layers are stacked together to get the final feature representation \(_{i}^{h}\).

Local-Global-Cross Transformertakes the output high-dimensional features \(_{i}^{h}^{1 d}\) as input to learn more robust and reliable feature representations,

\[_{i}^{l}=_{_{j}(i)}( _{l}(_{i}^{h})-_{l}(_{j}^{h})+ )(_{l}(_{j}^{h})+),\] (10) \[_{i}^{g}=_{_{j}_{i}} _{g}(_{i}^{l}),_{g}(_{j}^{l}) _{g}(_{j}^{l}),\] (11) \[_{i}^{c}=_{_{j}_{2}} _{c}(_{i}^{g}),_{c}(_{j}^{g}) _{c}(_{j}^{g}),\] (12)

where local, global, and cross transformers are given in Eq. (10) (11) (12) respectively. \(\), \(\), and \(\) denote linear layers to generate the query, key, and value. The indices \(_{l}\), \(_{g}\), and \(_{c}\) indicate local transformer, global transformer, and cross transformer, respectively. For the local transformer, \(\) is a sequence of linear layer, ReLU, linear layer, and softmax. \(\) is the relative positional embedding that gives the information of the 3D coordinate distance between \(_{i}\) and \(_{j}\). \(\) denotes element-wise multiplication. The output \(_{i}^{l}\) is further processed by a linear layer and a residual connection from the input before being sent to the global transformer. For the global and cross transformer, \(_{1}=_{}+(_{t}}_{}) ^{N_{1} 3}\) and \(_{2}=_{}^{N_{2} 3}\) represent the warped source point cloud and the target point cloud, respectively. \(,\) denotes the scalar product. The output of the global and cross transformer is further processed by a linear layer, a layer normalization, and a residual connection from the input. A feedforward network with a multilayer perceptron and layer normalization is applied to the output of the cross transformer to aggregate information. To acquire more robust feature representations, the global-cross transformers are stacked and repeated multiple times (\(14\) times in our experiment). For simplicity, we only give the equations for learning the features of \(_{1}\). The features of \(_{2}\) are computed by the same procedure. The output point features \(_{i}^{c}\) and \(_{j}^{c}\) for each point cloud are stacked together to form feature matrices \(_{1}^{N_{1} d}\) and \(_{2}^{N_{2} d}\).

Figure 2: The reverse process with detailed denoising block for scene flow estimation. The denoising block takes the current noisy input \(_{t}\), the source point cloud \(_{}\), and the target point cloud \(_{}\) as input. The output \(}_{}\) is the denoised scene flow prediction. Shared weights for the feature extraction are indicated in the same color.

Global Correlationpredicts the scene flow vector solely based on two feature similarity matrices, cross feature similarity matrix \(_{}^{N_{1} N_{2}}\) and self feature similarity matrix \(_{}^{N_{1} N_{1}}\).

\[_{}=(_{1}_{2}^{T}/ ),\] (13)

\[_{}=(W_{q}(_{1})W_{k}(_{1})^{T}/),\] (14)

where \(W_{q}\) and \(W_{k}\) are linear projections. \(d\) is the feature dimensions. The softmax is taken over the second dimension of the matrices. The cross feature similarity matrix \(_{}^{N_{1} N_{2}}\) encodes the feature similarities between all the points in the source point cloud \(_{}\) and all the points in the target point cloud \(_{}\). The self feature similarity matrix \(_{}^{N_{1} N_{1}}\) encodes the feature similarities between all points in the source point cloud \(_{}\). The global correlation is performed by a matching process guided by the cross feature similarity matrix followed by a smoothing procedure guided by the self feature similarity matrix

\[}=_{}(_{}_{}-_{}).\] (15)

We follow GMSF  and employ a robust loss defined as

\[=_{i}(\|}_{}(i)-_{}(i)\|_{1}+)^{q},\] (16)

where \(}_{}\) is the output prediction of the neural network, i.e. \(f_{}(_{t},_{},_{})\) in Eq. (7). \(_{}\) denotes the ground truth scene flow vector field i.e. \(_{0}\) in Eq. (7). \(i\) is the index of the points. \(\) is set to 0.01 and \(q\) is set to 0.4.

## 4 Experiments

### Implementation Details

We use the AdamW optimizer and a weight decay of \(1 10^{-4}\). The initial learning rate is set to \(4 10^{-4}\) for FlyingThings3D  and \(1 10^{-4}\) for Waymo-Open . We employ learning rate annealing by using the Pytorch OneCycleLR learning rate scheduler. During training, we set \(N_{1}\) and \(N_{2}\) to \(4096\), randomly sampled by furthest point sampling. The model is trained for \(600\)k iterations with a batch size of \(24\). During inference, we follow previous methods [43; 21; 5] and set \(N_{1}\) and \(N_{2}\) to \(8192\) for a fair comparison. The number of diffusion steps is set to \(20\) during training and \(2\) during inference. The number of nearest neighbors \(k\) in DGCNN and Local Transformer is set to \(16\). The number of global-cross transformer layers is set to \(14\). The number of feature channels is set to \(128\). Further implementation details are given in the supplemental document and the provided code.

### Evaluation Metrics

We follow the most recent work in the field [43; 21; 5] and use established evaluation metrics for scene flow estimation. \(_{}\) measures the endpoint error between the prediction and the ground truth \(\|}_{}-_{}\|_{2}\) averaged over all points. \(_{}\) measures the percentage of points with an endpoint error smaller than \(5\) cm or relative error less than \(5\%\). \(_{}\) measures the percentage of points with an endpoint error smaller than \(10\) cm or relative error less than \(10\%\). Outliers measures the percentage of points with an endpoint error larger than \(30\) cm or relative error larger than \(10\%\).

### Datasets

We follow the most recent work in the field [43; 21; 5] and test the proposed method on three established benchmarks for scene flow estimation.

**FlyingThings3D** is a synthetic dataset consisting of 25000 scenes with ground truth annotations. We follow Liu _et al_. in FlowNet3D  and Gu _et al_. in HPLFlowNet  to preprocess the dataset and denote them as F3D\({}_{}\), with occlusions, and F3D\({}_{}\), without occlusions. The former consists of 20000 and 2000 scenes for training and testing, respectively. The latter consists of 19640 and 3824 scenes for training and testing, respectively.

**KITTI Scene Flow** is a real autonomous driving dataset with 200 scenes for training and 200 scenes for testing. Since the annotated data in KITTI is limited, the dataset is mainly used for evaluating the generalization ability of the models trained on FlyingThings3D. Similar to the FlyingThings3D dataset, following Liu _et al_. in FlowNet3D  and Gu _et al_. in HPLFlowNet , the KITTI dataset is preprocessed as KITTI\({}_{}\), with occlusions, and KITTI\({}_{}\), without occlusions. The former consists of 150 scenes from the annotated training set. The latter consists of 142 scenes from the annotated training set.

**Waymo-Open** is a larger autonomous driving dataset with challenging scenes. The annotations are generated from corresponding tracked 3D objects to scale up the dataset for scene flow estimation by approximately \(1000\) times compared to previous real-world scene flow estimation datasets. The dataset consists of 798 training sequences and 202 testing sequences. Each sequence consists of around 200 scenes. Different preprocessing of the dataset exists [7; 15; 16], we follow the one employed in our baseline method .

### State-of-the-art Comparison

We give state-of-the-art comparisons on multiple standard scene flow datasets. Table 1 and Table 2 show the results on the F3D\({}_{}\) and the F3D\({}_{}\) datasets, with generalization results on the KITTI\({}_{}\) and the KITTI\({}_{}\) datasets. Table 3 shows the results on the Waymo-Open dataset. On the F3D\({}_{}\) dataset, DiffSF shows an improvement (over the failure cases) of 31% in EPE\({}_{}\), 44% in ACC\({}_{}\), 35% in ACC\({}_{}\), and 45% in Outliers compared to the current state-of-the-art method GMSF . Similar improvement is also shown on the F3D\({}_{}\) dataset with an improvement of 32% in EPE\({}_{}\), 34% in ACC\({}_{}\), 24% in ACC\({}_{}\), and 38% in Outliers, demonstrating DiffSF's ability to handle occlusions. The generalization abilities on the KITTI\({}_{}\) and the KITTI\({}_{}\) datasets are comparable to state of the art. All the four metrics show the best or second-best performances. On the Waymo-Open dataset, a steady improvement in both accuracy and robustness is achieved, demonstrating DiffSF's effectiveness on real-world data.

### Uncertainty-error Correspondence

One of the key advantages of our proposed method DiffSF compared to other approaches is that DiffSF can model uncertainty during inference, without being explicitly trained for this purpose.

   Method & _{}\)} & KITTI\({}_{}\) \\  & EPE\({}_{}\) ACC\({}_{}\) ACC\({}_{}\) Outliers \(\) & EPE\({}_{}\) ACC\({}_{}\) ACC\({}_{}\) Outliers \(\) \\  FlowNet3D cvpr-19 & 0.1136 & 41.25 & 77.06 & 60.16 & 0.1767 & 37.38 & 66.77 & 52.71 \\ HPLFlowNet cvpr-19 & 0.0804 & 61.44 & 85.55 & 42.87 & 0.1169 & 47.83 & 77.76 & 41.03 \\ PointPWC ECCV\({}^{20}\) & 0.0588 & 73.92 & 97.06 & 34.24 & 0.0694 & 72.81 & 88.84 & 26.48 \\ FLOT ECCV\({}^{20}\) & 0.0520 & 73.20 & 92.70 & 35.70 & 0.0560 & 75.50 & 90.80 & 24.20 \\ Bi-PointFlow ECCV\({}^{22}\) & 0.0280 & 91.80 & 97.80 & 14.30 & 0.0300 & 92.00 & 96.00 & 14.10 \\
3DFlow ECCV\({}^{22}\) & 0.0281 & 92.90 & 98.17 & 14.58 & 0.0309 & 90.47 & 95.80 & 16.12 \\ MSRNR ECCV\({}^{23}\) & 0.0150 & 97.30 & 99.20 & 5.60 & 0.0110 & 97.10 & 98.90 & 8.50 \\ DiFlow3D ECCV\({}^{24}\) & 0.0140 & 97.76 & 99.33 & 4.79 & **0.0898** & 98.13 & 99.30 & **8.25** \\ GMSF NPS\({}^{23}\) & 0.0090 & 99.18 & 99.69 & 2.55 & 0.0215 & 96.22 & 98.25 & 9.84 \\ 
**DiffSF(ours)** & **0.0062** & **99.54** & **99.80** & **1.41** & 0.0098 & **98.59** & **99.44** & 8.31 \\   

Table 1: **State-of-the-art comparison on F3D\({}_{}\) and KITTI\({}_{}\).** The models are only trained on F3D\({}_{}\) without occlusions. The number of time steps is set to 20 for training and 2 for inference. The bold and the underlined numbers represent the best and the second best performance respectively.

   Method & _{}\)} & KITTI\({}_{}\) \\  & EPE\({}_{}\) ACC\({}_{}\) ACC\({}_{}\) Outliers \(\) & EPE\({}_{}\) ACC\({}_{}\) ACC\({}_{}\) Outliers \(\) \\  FlowNet3D cvpr-19 & 0.157 & 22.8 & 58.2 & 80.4 & 0.183 & 9.8 & 39.4 & 79.9 \\ HPLFlowNet cvpr-19 & 0.168 & 26.2 & 57.4 & 81.2 & 0.343 & 10.3 & 38.6 & 81.4 \\ PointPWC ECCV\({}^{20}\) & 0.155 & 41.6 & 69.9 & 63.8 & 0.118 & 40.3 & 75.7 & 49.6 \\ FLOT ECCV\({}^{20}\) & 0.153 & 39.6 & 66.0 & 66.2 & 0.130 & 27.8 & 66.7 & 52.9 \\ Bi-PointFlow ECCV\({}^{22}\) & 0.073 & 79.1 & 89.6 & 27.4 & 0.065 & 76.9 & 90.6 & 26.4 \\
3DFlow ECCV\({}^{22}\) & 0.063 & 79.1 & 90.9 & 27.9 & 0.073 & 81.9 & 89.0 & 26.1 \\ MSBRN ECCV\({}^{23}\) & 0.053 & 83.6 & 92.6 & 23.1 & 0.044 & 87.3 & 95.0 & 20.8 \\ DiFlow3D ECCV\({}^{24}\) & 0.047 & 88.2 & 94.0 & 15.0 & **0.029** & **95.9** & **97.5** & **10.8** \\ GMSF NPS\({}^{23}\) & 0.022 & 95.0 & 97.5 & 5.6 & 0.033 & 91.6 & 95.9 & 13.7 \\ 
**DiffSF(ours)** & **0.015** & **96.7** & **98.1** & **3.5** & **0.029** & 94.5 & 97.00 & 13.0 \\   

Table 2: **State-of-the-art comparison on F3D\({}_{}\) and KITTI\({}_{}\).** The models are only trained on F3D\({}_{}\) with occlusions. The number of time steps is set to 20 for training and 2 for inference. The bold and the underlined numbers represent the best and the second best performance respectively.

With uncertainty, we refer to the epistemic uncertainty, which reflects the confidence the model has in its predictions. In our case, we predict an uncertainty for the prediction of each point. We exploit the property of diffusion models to inject randomness into inherently deterministic tasks. Without having to train multiple models, we predict multiple hypotheses using a single model with different initial randomly sampled noise.

Figure 3 shows that the standard deviation of \(20\) hypotheses for each point gives a reliable uncertainty estimation, which correlates very well with the inaccuracy of the prediction. Figure 3 (left) shows the relationship between the EPE and the standard deviation of the predictions averaged over the F3D\({}_{}\) dataset. There is an almost linear correlation of the predicted uncertainty with the EPE underlining the usefulness of our uncertainty measure. Figure 3 (right) shows the recall and precision of the outlier prediction by the uncertainty. An outlier is defined as a point that has an EPE larger than 0.30 meters. The horizontal axis is the threshold applied to the uncertainty to determine the outliers. The recall is defined as the number of correctly retrieved outliers divided by the number of all the outliers. The precision is defined as the number of correctly retrieved outliers divided by the number of all the retrieved outliers. The precision-recall break-even point obtains around 55% of recall and 55% of precision.

Figure 4 shows visual examples that compare our outlier prediction with the actual outliers. The first row marks the scene flow estimation outliers with an EPE larger than 0.30 meters in red. The second row marks the outliers predicted by the uncertainty estimation in red. In summary, while every learned scene flow prediction model inevitably makes mistakes, our novel formulation of the task as a diffusion process not only produces state-of-the-art results but also allows for an accurate prediction of these errors. Moreover, our analysis shows that downstream tasks can select a threshold according to its desired precision and recall, therefore, mitigating potential negative effects that uncertain predictions might produce.

### Ablation Study

We investigate several key design choices of the proposed method. For the denoising model architecture, we investigate how the number of global-cross transformer layers and the number of feature

   Method & EPE\({}_{}\)\(\) & ACC\({}_{}\)\(\) & ACC\({}_{}\)\(\) & Outliers \(\) \\  FlowNet3D cvVR19 & 0.225 & 23.0 & 48.6 & 77.9 \\ PointPVC ccV20 & 0.307 & 10.3 & 23.1 & 78.6 \\ FESTA cvVR21 & 0.223 & 24.5 & 27.2 & 76.5 \\ FH-Net ccV22 & 0.175 & 35.8 & 67.4 & 60.3 \\ GMSF NIPS23 & 0.083 & 74.7 & 85.1 & 43.5 \\ 
**DiffSF(ours)** & **0.080** & **76.0** & **85.6** & **41.9** \\   

Table 3: **State-of-the-art comparison on Waymo-Open dataset.** The number of time steps is set to 20 for training and 2 for inference.

Figure 3: Analysis of uncertainty estimation on F3D\({}_{}\) dataset. **Left**: Uncertainty-error correspondences. The horizontal axis is an interval of EPE. The vertical axis is the estimated uncertainty averaged over all the points that fall in the interval and the indication of the scaled uncertainty standard deviation. **Right**: Recall (red) and precision curve (blue) of outliers prediction. The horizontal axis is the threshold of the estimated uncertainty to determine the outliers.

channels affect the results. For the diffusion process, we investigate the influence of the number of time steps for training and sampling.

**Model Architecture.** To evaluate different architectural choices we select a diffusion model with five denoising blocks during training and one denoising step during testing with the DDIM  sampling strategy. Table 4 shows the influence of the number of global-cross transformer layers on the results. The experiments show that the best performance is achieved at the number of \(14\) layers. Table 5 shows the influence of the number of feature channels on the results. The experiments show that a smaller number of feature channels results in worse performance. The best performance is achieved at \(128\) feature channels.

**Number of Time Steps.** We set the number of global-cross transformer layers to \(14\) and the number of feature channels to \(128\). We investigate the influence of different number of time steps during training and sampling on the results. The number of time steps investigated is \(5\), \(20\), and \(100\) for training and \(1\), \(2\), \(5\), and \(20\) for sampling. The fast sampling is done by DDIM  instead of DDPM  sampling. Table 6 shows the results on the F3D\({}_{}\) dataset, where \(a@b\) denotes using \(b\) training steps and \(a\) sampling steps. While the results are very stable across a wide range of values, the best performance is achieved at \(2@20\) time steps. We hypothesize that compared to the standard setting of image generation, the lower dimensionality and variance of the scene flow data results in a smaller number of required time steps. For the number of time steps during inference, DDIM sampling works well with the best performance achieved at \(2\) steps.

   Layers & \(_{}\) & ACC\({}_{}\) & ACC\({}_{}\) & Outliers \(\) & \(_{}\) & ACC\({}_{}\) & ACC\({}_{}\) & Outliers \(\) \\  & & & all & & & non-occ & & \\ 
8 & 0.0439 & 91.6 & 94.8 & 7.9 & 0.0205 & 95.2 & 97.5 & 5.1 \\
10 & 0.0413 & 92.6 & 95.1 & 7.1 & 0.0189 & 95.8 & 97.6 & 4.5 \\
12 & 0.0381 & 93.0 & 95.5 & 6.4 & 0.0168 & 96.1 & 97.8 & 3.9 \\
14 & **0.0361** & **93.7** & **95.7** & **5.9** & **0.0153** & **96.5** & **98.0** & **3.5** \\
16 & 0.0383 & 93.0 & 95.5 & 6.5 & 0.0168 & 96.1 & 97.8 & 4.0 \\   

Table 4: Ablation study on the number of global-cross transformer layers on F3D\({}_{}\). The number of feature channels is set to \(128\). The number of time steps is set to \(5\) for training and \(1\) for inference.

Figure 4: Visualization of outlier prediction on F3D\({}_{}\) dataset. **Black**: Accurate prediction. **Red**: Outliers. Top row: Outliers defined as EPE > 0.30. Bottom row: Outliers predicted by Uncertainty.

**Ablation study compare to baseline GMSF.** To show the improvement of our method compared to the baseline GMSF , we provide an additional ablation study on F3D\({}_{}\). Since the original paper GMSF has a different training setting as our proposed DiffSF, for a fair comparison we retrain the GMSF baseline with our training setting. The result is given in Table 7 (first line). The check in the two columns denotes the implementation of improved architecture and diffusion process, respectively. The results clearly show that the proposed method DiffSF achieves superior performance than GMSF. Both the improvement of the architecture and the introduction of the diffusion process contribute to the superior performance. The improved percentage (for the introduction of the diffusion process) over the failure case is marked in the table. The results show that the proposed method has a moderate improvement in the accuracy metric EPE\({}_{}\) and a huge improvement (more than \(10\%\)) in the robustness metrics ACC\({}_{}\), ACC\({}_{}\), and Outliers. Besides the better performance, the proposed method can also provide a per-prediction uncertainty.

## 5 Conclusions

We propose to estimate scene flow from point clouds using diffusion models in combination with transformers. Our novel approach provides significant improvements over the state-of-the-art in terms of both accuracy and robustness. Extensive experiments on multiple scene flow estimation benchmarks demonstrate the ability of DiffSF to handle both occlusions and real-world data. Furthermore, we propose to estimate uncertainty based on the randomness inherent in the diffusion process, which helps to indicate reliability for safety-critical downstream tasks. The proposed uncertainty estimation will enable mechanisms to mitigate the negative effects of potential failures.

**Limitations.** The training process of the diffusion models relies on annotated scene flow ground truth which is not easy to obtain for real-world data. Incorporating self-supervised training methods to leverage unannotated data might further improve our approach in the future. Furthermore, the transformer-based architecture and the global matching process limit the maximum number of points, and further research is required for peforming matching at scale.

**Potential Negative Social Impact.** As any other tracking algorithm, scene flow estimation can be used in surveillance scenarios, which might raise privacy concerns and ethical issues. From an ecological perspective, training of deep learning models usually takes time and resources, thus environmental impact should be taken into consideration when training and applying such compute-intensive models. However, future development in more efficient implementations will enable the positive impact of our work in e.g. robotics and autonomous driving without a significant negative impact on the environment.

   Steps & EPE\({}_{}\)(cm) \(\) & ACC\({}_{}\) \(\) & ACC\({}_{}\) \(\) & Outliers \(\) & EPE\({}_{}\)(cm) \(\) & ACC\({}_{}\) \(\) & ACC\({}_{}\) \(\) & Outliers \(\) \\  & & & all & & & & non-occ & \\ 
1@5 & 3.608 & 93.701 & 95.732 & 5.904 & 1.527 & 96.549 & 97.973 & 3.527 \\
2@5 & 3.590 & 93.718 & 95.727 & 5.910 & 1.518 & 96.558 & 97.957 & 3.544 \\
5@5 & 3.592 & 93.716 & 95.720 & 5.911 & 1.521 & 96.556 & 97.953 & 3.545 \\
1@20 & 3.588 & 93.879 & 95.912 & 5.798 & 1.504 & 96.738 & 98.080 & 3.520 \\
2@20 & **3.576** & **93.871** & **95.919** & 5.791 & **1.491** & **96.736** & **98.083** & 3.511 \\
5@20 & 3.580 & 93.865 & 95.917 & 5.791 & 1.492 & 96.730 & **98.083** & **3.507** \\
2@20 & 3.579 & 93.865 & 95.915 & 5.789 & **1.491** & 96.731 & 98.082 & 3.508 \\
1@100 & 3.678 & 93.503 & 95.665 & 6.016 & 1.587 & 96.376 & 97.844 & 3.689 \\
2@100 & 3.663 & 93.545 & 95.662 & 6.010 & 1.579 & 96.398 & 97.838 & 3.697 \\
5@100 & 3.668 & 93.546 & 95.663 & 6.010 & 1.583 & 96.400 & 97.842 & 3.695 \\
2@100 & 3.670 & 93.545 & 95.663 & 6.015 & 1.584 & 96.396 & 97.843 & 3.700 \\   

Table 6: Ablation study on the number time steps for training and sampling on F3D\({}_{}\). The number of global-cross transformer layers is set to \(14\). The number of feature channels is set to \(128\). \(a@b\) denotes an inference of \(b\) training steps and \(a\) sampling steps.

   improved & diffusion & _{}\)-nonoccluded} \\ architecture & process & EPE\({}_{}\)\(\) & ACC\({}_{}\)\(\) & ACC\({}_{}\)\(\) & Outliers \(\) & EPE\({}_{}\)\(\) & ACC\({}_{}\)\(\) & ACC\({}_{}\)\(\) & Outliers \(\) \\   & & 0.039 & 92.9 & 95.4 & 6.7 & 0.017 & 96.0 & 97.8 & 4.2 \\  & & 0.061 & 84.8 & 92.3 & 16.7 & 0.037 & 88.9 & 95.3 & 13.9 \\ ✓ & & 0.037 & 93.2 & 95.4 & 6.5 & 0.016 & 96.2 & 97.7 & 4.1 \\ ✓ & ✓ & 0.036(-2.7\%) & 93.9(+10.3\%) & 95.9(+10.9\%) & 5.8(-10.8\%) & 0.015(-6.3\%) & 96.7(+13.2\%) & 98.1(+17.4\%) & 3.5(-14.6\%) \\   

Table 7: Ablation Study compare to baseline GMSF on F3D\({}_{}\).

**Acknowledgements.** This work was partly supported by the Wallenberg Artificial Intelligence, Autonomous Systems and Software Program (WASP), funded by Knut and Alice Wallenberg Foundation, and the Swedish Research Council grant 2022-04266; and by the strategic research environment ELLIIT funded by the Swedish government. The computational resources were provided by the National Academic Infrastructure for Supercomputing in Sweden (NAISS) at C3SE partially funded by the Swedish Research Council grant 2022-06725, and by the Berzelitus resource, provided by the Knut and Alice Wallenberg Foundation at the National Supercomputer Centre.