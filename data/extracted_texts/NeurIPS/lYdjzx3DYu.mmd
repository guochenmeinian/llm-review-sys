# EMR-Merging: Tuning-Free High-Performance Model Merging

Chenyu Huang\({}^{1}\)

\({}^{1}\) Fudan University \({}^{2}\) Shanghai AI Laboratory

\({}^{3}\) The Chinese University of Hong Kong

cyhuang24@m.fudan.edu.cn

Peng Ye\({}^{1,3}\)\({}^{1}\)\({}^{1}\), Tao Chen\({}^{1}\)

\({}^{1}\) Fudan University \({}^{2}\) Shanghai AI Laboratory

\({}^{3}\) The Chinese University of Hong Kong

cyhuang24@m.fudan.edu.cn

Tong He\({}^{2}\)

\({}^{1}\) Fudan University \({}^{2}\) Shanghai AI Laboratory

\({}^{3}\) The Chinese University of Hong Kong

cyhuang24@m.fudan.edu.cn

Xiangyu Yue\({}^{3}\)

\({}^{1}\) Fudan University \({}^{2}\) Shanghai AI Laboratory

\({}^{3}\) The Chinese University of Hong Kong

cyhuang24@m.fudan.edu.cn

Wanli Ouyang\({}^{3}\)

\({}^{1}\) Fudan University \({}^{2}\) Shanghai AI Laboratory

\({}^{3}\) The Chinese University of Hong Kong

cyhuang24@m.fudan.edu.cn

###### Abstract

The success of pretrain-finetune paradigm brings about the release of numerous model weights. In this case, merging models finetuned on different tasks to enable a single model with multi-task capabilities is gaining increasing attention for its practicability. Existing model merging methods usually suffer from (1) significant performance degradation or (2) requiring tuning by additional data or training. In this paper, we rethink and analyze the existing model merging paradigm. We discover that using a single model's weights can hardly simulate all the models' performance. To tackle this issue, we propose Elect, Mask & Rescale-Merging (EMR-Merging). We first (a) elect a unified model from all the model weights and then (b) generate extremely light-weight task-specific modulators, including masks and rescalers, to align the direction and magnitude between the unified model and each specific model, respectively. EMR-Merging is tuning-free, thus requiring no data availability or any additional training while showing impressive performance. We find that EMR-Merging shows outstanding performance compared to existing merging methods under different classical and newly-established settings, including merging different numbers of vision models (up to **30**), NLP models, PEFT models, and multi-modal models. 1

## 1 Introduction

With the rapid development of deep learning, different model architectures [36; 22; 71; 88] are proposed, along with multiple training strategies [89; 86]. Pre-trained models' capabilities are enhanced, thus showing increasing significance [54; 22; 7; 19]. Finetuning models on downstream tasks from a pre-trained model has become a standard paradigm in both NLP and vision fields [20; 51; 19; 22; 5; 87], which usually leads to improved performance with less labeled data. With the development of open-source repositories such as Huggingface , timm , and torchvision , the number of pre-trained and finetuned checkpoints exponentially rise. However, applying individual models to different tasks results in high storage and deployment costs. Multi-task learning (MTL) partially solves this problem by jointly training a model using multiple datasets [70; 93; 95], but it suffers from (i) high computational costs and (ii) data unavailability due to privacy . Recently, model merging attempts to solve these drawbacks by combining weights instead of additional training, thus showing vital significance and broad application prospects.

A simple strategy of model merging is averaging the model weights , but it usually causes obvious performance degradation, as shown in Fig. 1. To this end, there are multiple model merging methods proposed to improve the performance of the merged model, which can be roughly divided into threecategories: (i) _Weighted averaging of model weights_ include Fisher-Merging  and RegMean . They use pre-computed Fisher information matrices  and inner-product matrices  to tune the coefficients for weighted averaging. (ii) _Task vector-based methods_ that add task vectors together instead of model weights, include Task Arithmetic , Ties-Merging , and AdaMerging . Ties-Merging handles the interference issue and AdaMerging adaptively tunes the merging coefficients. (iii) _Pre-processing techniques_ include DARE . It reduces interference by dropping most elements and rescaling the others in task vectors. Despite the promising results, there are two unresolved problems with the existing model merging methods: (1) The performance gap between the merged model and individual models or MTL is still obvious, as shown in Fig. 1. (2) The performance improvement of existing methods depends on tuning by data or training, as shown in Tab. 1.

To boost the performance of model merging, we rethink and analyze the existing model merging paradigm. We discover that the goal of all the existing methods is to obtain a single model applicable to all the \(N\) tasks, as follows:

\[W_{M}=([W_{1}..W_{N}]),\] (1)

where \([W_{1}..W_{N}]\) are the model weights to be merged, \(\) denotes the merging function, and \(W_{M}\) is the merged model weight. This paradigm may inevitably lead to a non-negligible gap between the merged model and each individual model, especially when there are numerous models or models on challenging tasks. We argue that using a single model weight to simulate all the model weights is sub-optimal. To tackle this issue, we propose a brand new merging paradigm: We first extract a unified model weight from all the models' weights, and then we calculate and store significant but lightweight task-specific parts of each model weight. This process can be written as:

\[W_{uni},[E_{1}..E_{N}]=^{}([W_{1}..W_{N}]),\] (2)

where \(W_{uni}\) represents the common and shared part of all model weights and \([E_{1}..E_{N}]\) denote the task-specific parts of each model weight. \(^{}\) is the revised merging function following our paradigm.

Based on the above paradigm, we propose EMR-Merging (Elect, Mask & Rescale-Merging). We first elect a unified model from all the model weights. The election strategy is choosing the maximum absolute value of each parameter on the specified sign direction to minimize interference and avoid additional tuning. Then we generate additional lightweight task-specific modulators, including masks and rescalers. Their functions are respectively to align the direction and magnitude of the unified model with the original task-specific model. We find that applying the task-specific modulators to the unified model can better approximate the task-specific model, thus improving performance. The detailed process, theoretical and empirical analysis of the proposed method are illustrated in Section 3. By applying our method, the performance of model merging is significantly enhanced and is comparable to MTL or individual models, as shown in Fig. 1. Meanwhile, EMR-Merging requires no data, tuning, or any additional training, as shown in Tab. 1.

We first demonstrate the effectiveness of the proposed EMR-Merging under the existing setting of (1) merging Vision Transformer (ViT)  models of different sizes on 8 vision tasks, (2) merging parameter-efficient finetuning (PEFT) models on 11 language tasks, and (3) merging GPT-2  models on 7 language tasks. Our method shows significant performance improvement under these settings, even when compared to the strongest baseline. We further validate the method's effectiveness under newly-established and more challenging settings including: (4) merging ViTs on **30** vision

   &  &  &  Tuning by \\ Training \\  }} \\  &  &  &  \\  &  &  &  &  \\  Weight Averaging & \(\) & \(\) & \(\) & \(\) \\  Traditional MTL & ✓ & \(\) & \(\) & ✓ \\  Fisher-Merging  & \(\) & ✓ & \(\) & \(\) \\  Task-RegMean  & \(\) & ✓ & ✓ & \(\) \\  Task Arithmetic  & \(\) & ✓ & ✓ & \(\) \\ Ties-Merging  & \(\) & ✓ & ✓ & \(\) \\ AdaMerging  & \(\) & ✓ & \(\) & ✓ \\ 
**EMR-Merging**(Ours) & \(\) & \(\) & \(\) & \(\) \\  

Table 1: Prerequisites for each method’s working.

Figure 1: The average accuracy of the multi-task performance of different model merging methods on eight vision tasks. Among all the merging methods, our EMR-Merging is the only one comparable to the performance of MTL and even individual models.

tasks, (5) merging RoBERTa  models on 8 NLP tasks, and (6) merging BEiT3  models on 5 multi-modal tasks.

Our contributions can be summarized as: (1) We propose a novel merging method called EMR-Merging, which merges task-specific models into a unified model and lightweight task-specific modulators (i.e., masks and rescalers), requiring no data, tuning, or additional training. (2) The proposed EMR-Merging is simple-but-effective, and its effectiveness is validated on various classical benchmarks and newly-established benchmarks under various vision, NLP, PEFT, and multi-modal settings. (3) We show that the masks and rescalers of EMR-Merging for aligning task-specific direction and amplitude of task vectors are applicable to most kinds of merging methods.

## 2 Related Work

**Model Merging** obtains a model using the existing task-specific model weights instead of training [33; 30; 84; 85; 66; 90; 46]. Simply averaging  usually causes severe performance degradation. Various methods are proposed to handle this problem. Fisher-Merging  and RegMean  use fisher information matrices  and inner-product matrices  to calculate the merging coefficients for weighted merging. However, they require additional matrices released by model owners or manually computed. Task Arithmetic  merges models by adding together task vectors, which is the difference between the finetuned and pre-trained models. Ties-Merging  and AdaMerging  are based on task vectors. Ties-Merging resolves interference and AdaMerging adaptively learns the merging coefficients. However, the performance of Task Arithmetic and Ties-Merging highly depends on manually tuning the merging coefficients and AdaMerging needs additional training to obtain them. DARE  reduces interference by randomly dropping most elements and rescaling the remaining ones in each task vector before merging. However, DARE's performance is only validated under the setting of merging a limited number of tasks and the performance gain is also limited. In addition, all the existing methods merge models into a single one, and have not been verified under experimental settings of more models to merge, models on more difficult tasks, and

Figure 2: **Framework overview**. In the (a) Merging Procedure, we merge task-specific vectors into a unified task vector and lightweight task-specific modulators to modulate direction and amplitude. During the (b) Inference Procedure, we apply the corresponding mask and rescaler to the unified task vector to obtain a specific task vector. The process of (c)Task-specific Direction and Amplitude Modulation includes obtaining task-specific masks and scalers.

multi-modal models. In this paper, we propose EMR-Merging, which requires no tuning while showing impressive performance under various settings.

**Multi-Task Learning** trains a single model using training data from multiple tasks together [70; 93; 95]. MTL typically necessitates access to the labeled data of multiple tasks for training the model from scratch. Though enabling the model multi-task capabilities, MTL suffers from not only (i) the expensive computational cost for training, especially for large models, but also (ii) the limited data availability due to data privacy . In comparison, model merging solves the mentioned problems by combining the model weights without using training data or additional training, thus obtaining a multi-task model while sharply reducing the costs.

**Supervised Finetuning** from pre-trained models on down-stream tasks is becoming a standard paradigm in both NLP and vision fields [20; 51; 19; 22; 5]. Depending on whether all the parameters of models are adjusted, SFT can be divided into conventional full finetuning (FFT) and parameter-efficient finetuning (PEFT), which is proposed to reduce the number of trainable parameters for downstream tasks by adjusting the inserted small modules called adapters while keeping the whole model frozen [28; 29; 42]. PEFT is becoming the prevailing method to adapt pre-trained large models because of its efficiency . There are a large number of pre-trained, full finetuned model weights, and PEFT module weights available on public repositories [79; 77; 44]. In this paper, the proposed EMR-Merging is based on the common pretrain-finetune paradigm and we show the applicability of our method to both full finetuned models and PEFT modules.

## 3 Method

### Motivation

Given \(N\) tasks \([T_{1}..T_{N}]\), the goal of model merging is to obtain a model applicable to all the tasks using finetuned models \([W_{1}..W_{N}]\) from the same pre-trained model \(W_{pre}\) on each task. Existing methods focus on merging the models into a single model \(W_{M}\). Please check Appendix C for detailed information on the existing merging methods. However, a single model can hardly represent all the model weights, thus causing severe performance drops. We discover that the combination of a unified task vector and lightweight task-specific modulators can settle this issue to a significant extent by approximating the task-specific vectors better without any additional tuning. The size of proposed task-specific modulators is discussed in Section 4.4, which is much smaller than that of a model.

### Elect, Mask & Rescale-Merging

The overall framework of EMR-Merging is shown in Fig. 2. We follow the setting of task vector-based methods [30; 84; 85] and we merge models using task vectors. For task \(T_{i}\), \(i[1..N]\), the corresponding task vector is defined as \(_{i}=W_{i}-W_{pre}\), where \(_{i}^{d}\).

**Electing a unified task vector** We first create an aggregate elected sign vector \(_{uni}=sgn(_{t=1}^{N}_{t})\) by choosing the sign with the higher total magnitude of each parameter across all relevant task vectors. Then we choose the maximum absolute value of each parameter with the sign consistent with \(_{uni}\) from all the task vectors and obtain absolute value vector \(_{uni}^{d}\). By combining \(_{uni}\) and \(_{uni}\), the unified task vector can be obtained by \(_{uni}=_{uni}_{uni}\). The electing procedure can reserve the maximum amplitude and sign information shared by the task vectors, thereby maximally reducing interference. The unified task vector \(_{uni}\) corresponds the \(W_{uni}\) in Eq. 2. Before being applied to task \(T_{i}\), the \(_{uni}\) needs to be modulated in advance by task-specific modulators, which are corresponding to \(E_{i}\) in Eq. 2. The generation of task-specific modulators is described below:

**Task-specific masks.** Next, we compare the unified task vector \(_{uni}\) with each task vector \(_{i}\). The task-specific mask \(M_{i}=(_{i}_{uni}>0)\) for task \(i\) sets the elements whose signs are not correspondent with \(_{uni}\) to zero and the rest to one. The function of the masks is to align the direction of the unified model with the task-specific model. The masks share the same structure with the task-specific models but due to their 1-bit nature, the size of a mask is much smaller than that of a task vector.

**Task-specific Rescalers** Then, for each task, we compute a rescaler parameter to keep the average absolute value of the elements in \(_{t}\) and \(M_{t}_{uni}\) equal. The function of the rescalers \(_{i}=))}{sum(abs(M_{i}_{F}))}\) is to align the parameter magnitude of the unified model with the task-specificmodel. The significance of rescaling is also reported by DARE , which claims that after dropping most elements in a task vector, rescaling the rest leads to better results compared to not.

Before being applied to a task, a task-specific modulation is required to be conducted to the unified task vector. After that, we add it to the pre-trained parameter values \(W_{pre}\). The inference steps of applying the merged model to task \(t\) are as follows: \(_{t}=W_{pre}+_{t}\), where \(_{t}=_{t} M_{t}_{uni}\). It should be noted that during the whole process, no additional tuning is needed, thus requiring no data or additional training. We summarize the algorithm flow in Appendix A.

### Theoretical analysis

Our goal is to merge model weights by minimizing the distance between the merged model \(W_{uni}\) and each individual model \(W_{i}\), where the distance can be calculated by:

\[Dis=^{N}\|W_{i}-W_{uni}\|^{2}}{N}=^{N}\|_{ i}-_{uni}\|^{2}}{N}\] (3)

where \(_{i}\) refers to the task vector for task \(T_{i}\) and \(_{uni}\) is the unified task vector.

**Analysis 1: Effectiveness of Masks.** After applying the masks \(M_{i}=(_{i}_{uni}>0)\) to the unified model \(_{uni}\), the distance \(Dis^{M}\) can be formulated as:

\[Dis^{M}=^{N}\|_{i}-M_{i}_{uni}\|^{2}}{N} Dis\] (4)

where \(Dis\) refers to the distance before applying the masks. Eq. 4 demonstrates that the distance between the merged model and each individual model can be reduced after applying the masks.

**Analysis 2: Effectiveness of Rescalers.** After applying the rescalers \(_{i}=))}{sum(abs(M_{i}_{F}))}\) to the masked task vectors \(M_{i}_{uni}\), the distance \(Dis^{M,}\) is formulated as:

\[Dis^{M,}=^{N}\|_{i}-_{i} M_{i} _{uni}\|^{2}}{N} Dis^{M}\] (5)

Eq. 5 demonstrates that the distance between the merged model and each individual model can be minimized after applying the rescalers. Please check Appendix B for detailed proof.

### Empirical analysis

In Fig. 3, we visualize partial results of merging eight ViT-B/32 models on different tasks using t-SNE  and Grad-CAM . It can be seen that each procedure of EMR-Merging can help improve the performance of the merged model and perform closer to individual models. Specifically, a more obvious distinction is shown in t-SNE and a more precise target is focused by Grad-CAM. Please check Section 4.1.1 for experimental details and Appendix E for more visualization results.

Figure 3: Partial (a) t-SNE and (b) Grad-CAM visualization results of EMR-Merging’s procedures.

In Fig. 4, we compare sign conflicts, L2 distance, and cosine similarity between the merged model weights obtained by different merging methods and the task-specific model weights. It can be seen that EMR-Merging significantly reduces sign conflicts and L2 distance and improves the cosine similarity, indicating that EMR-Merging approximates each task-specific model weight effectively. The configuration of Fig. 4 can be found in Appendix F.

## 4 Experiment Validation

**Baseline methods.** We compare the proposed EMR-Merging with: (1) Individual Models, (2) Traditional MTL, (3) Weight Averaging, (4) Fisher Merging , (5) RegMean , (6) Task Arithmetic , (7) Ties-Merging , (8) AdaMerging . For more details about baseline methods, please check Appendix C.

### Merging vision models

#### 4.1.1 Merging 8 ViTs.

**Settings.** We follow the setting from Task Arithmetic , Ties-Merging , and AdaMerging . We employ ViT-B/32 and ViT-L/14, two variants of CLIP  models' visual encoders, as the pre-trained models. The performance of each method is evaluated by eight image classification tasks, including SUN397 , Cars , RESISC45 , EuroSAT , SVHN , GTSRB , MNIST , and DTD . All the datasets are evaluated by accuracy.

**Results.** The experimental results of merging ViT-B/32 and ViT-L/14 on eight tasks are shown in Tab. 2 and Tab. 3. We observe that EMR-Merging shows significant performance improvement

   Methods & SUN397 & Cars & RESISC45 & EuroSAT & SVHN & GTSRB & MNIST & DTD & **Avg Acc** \\  Individual & 75.3 & 77.7 & 96.1 & 99.7 & 97.5 & 98.7 & 99.7 & 79.4 & 90.5 \\ Traditional MTL & 73.9 & 74.4 & 93.9 & 98.2 & 95.8 & 98.9 & 99.5 & 77.9 & 88.9 \\  Weight Averaging & 65.3 & 63.4 & 71.4 & 71.7 & 64.2 & 52.8 & 87.5 & 50.1 & 65.8 \\  Fisher Merging  & 68.6 & 69.2 & 70.7 & 66.4 & 72.9 & 51.1 & 87.9 & 59.9 & 68.3 \\ RegMean  & 65.3 & 63.5 & 75.6 & 78.6 & 78.1 & 67.4 & 93.7 & 52.0 & 71.8 \\  Task Arithmetic  & 63.8 & 62.1 & 72.0 & 77.6 & 74.4 & 65.1 & 94.0 & 52.2 & 70.1 \\ Ties-Merging  & 64.8 & 62.9 & 74.3 & 78.9 & 83.1 & 71.4 & 97.6 & 56.2 & 73.6 \\ AdaMerging  & 64.5 & 68.1 & 79.2 & 93.8 & 87.0 & 91.9 & 97.5 & 59.1 & 80.1 \\ AdaMerging+ & 66.6 & 68.3 & 82.2 & 94.2 & 89.6 & 89.0 & 98.3 & 60.6 & 81.1 \\ 
**EMR-Merging (Ours)** & **75.2** & **72.8** & **93.5** & **99.5** & **96.9** & **98.1** & **99.6** & **74.4** & **88.7** \\   

Table 2: Multi-task performance when merging ViT-B/32 models on eight tasks.

Figure 4: Comparison of (a) sign conflicts, (b) L2 distance, and (c) cosine similarity of model weights obtained by different methods and task-specific model weights.

   Methods & SUN397 & Cars & RESISC45 & EuroSAT & SVHN & GTSRB & MNIST & DTD & **Avg Acc** \\  Individual & 82.3 & 92.4 & 97.4 & 100 & 98.1 & 99.2 & 99.7 & 84.1 & 94.2 \\ Traditional MTL & 80.8 & 90.6 & 96.3 & 96.3 & 97.6 & 99.1 & 99.6 & 84.4 & 93.5 \\  Weight Averaging & 72.1 & 81.6 & 82.6 & 91.9 & 78.2 & 70.7 & 97.1 & 62.8 & 79.6 \\  Fisher Merging  & 69.2 & 88.6 & 87.5 & 93.5 & 80.6 & 74.8 & 93.3 & 70.0 & 82.2 \\ RegMean  & 73.3 & 81.8 & 86.1 & 97.0 & 88.0 & 84.2 & 98.5 & 60.8 & 83.7 \\  Task Arithmetic  & 74.1 & 82.1 & 86.7 & 93.8 & 87.9 & 86.8 & 98.9 & 65.6 & 84.5 \\ Ties-Merging  & 76.5 & 85.0 & 89.3 & 95.7 & 90.3 & 83.3 & 99.0 & 68.8 & 86.0 \\ AdaMerging  & 79.0 & 90.3 & 90.8 & 96.2 & 93.4 & 98.0 & 99.0 & 79.9 & 90.8 \\ AdaMerging+ & 79.4 & 90.3 & 91.6 & 97.4 & 93.4 & 97.5 & 99.0 & 79.2 & 91.0 \\ 
**EMR-Merging (Ours)** & **83.2** & **90.7** & **96.8** & **99.7** & **97.9** & **99.1** & **99.7** & **82.7** & **93.7** \\   

Table 3: Multi-task performance when merging ViT-L/14 models on eight tasks.

compared to existing merging methods, respectively \(7.6\%\) and \(2.7\%\). Notably, EMR-Merging requires no additional training, tuning, or any dataset accessibility while outperforming AdaMerging and Ties-Merging, which require additional training or careful hyper-parameter tuning using datasets. Under this setting, EMR-Merging performs very close to or even better than traditional MTL, which is normally considered as a reference upper bound for model merging work . For visualized comparison, we provide some visualization results of different merging methods using t-SNE and Grad-CAM in Fig. 5. It can be seen that among all the merging methods, the visualization results of EMR-Merging are the closest to individual models, which corresponds to quantitative results. Please check Appendix E for more visualization results.

#### 4.1.2 Merging 30 ViTs.

**Settings.** To further explore the performance of EMR-Merging, we establish a new benchmark on merging vision models, expanding the number of task-specific models from eight to **30**. We employ ViT-B/16  pre-trained on ImageNet-21k  as the pre-trained model. The performance is evaluated by image classification datasets including MNIST , CIFAR-10 , Vegetables , Food-101 , Kvasir-v2 , Cars , Intel Images , EuroSAT , Weather , Cats and dogs , MangoLeafBD , Beans , CIFAR-100 , GTSRB , SVHN , Dogs , Fashion MNIST , Oxford-IIIT-Pet , Landscape Recognition , Flowers Recognition , STL-10 , CUB-200-2011 , EMNIST , DTD , RESISC45 , SUN397 , Kenyan-Food13 , Animal-10N , Garbage Classification , and Fruits-360 , covering tasks from common food classification to disease detection. All of them are evaluated by accuracy.

**Results.** The experimental results are shown in Tab. 4. It can be clearly seen that under this challenging setting of merging **30** models, all the existing methods show significant performance drops compared to individual models. Even RegMean, which performs best among existing methods, still exhibits a performance decay of nearly \(25\%\). However, EMR-Merging can reduce this value

  
**Task-specific Acc** & MNIST & CIFAR-10 & Vegetables & Food-101 & Kvasir-v2 & Intel-Images & Cars & EuroSAT & Weather & Cars and Dogs \\  Individual & 99.22 & 97.88 & 100.006 & 87.93 & 94.31 & 94.63 & 85.96 & 99.04 & 98.52 & 99.05 \\  Weight Averaging & 27.63 & 42.91 & 83.20 & 69.02 & 23.27 & 82.40 & 7.34 & 24.37 & 61.96 & 91.28 \\ RegMean  & 90.71 & 89.65 & 99.10 & 70.14 & 71.00 & 93.60 & 16.28 & 74.13 & 86.62 & 98.54 \\  Task Antheme  & 30.81 & 98.96 & 91.97 & 77.06 & 30.15 & 89.03 & 9.34 & 31.25 & 72.96 & 93.61 \\ Tree Merging  & 23.11 & 24.32 & 92.31 & 23.22 & 21.09 & 89.39 & 5.30 & 10.98 & 72.26 & 91.88 \\ AdaMerging  & 81.27 & 87.54 & 97.77 & 52.35 & 22.76 & 91.23 & 0.42 & 44.60 & 89.13 & 96.91 \\ 
**EEM-Merging (Oord)** & **89.99** & **89.99** & **99.97** & **89.65** & **99.47** & **95.27** & **77.48** & **95.42** & **97.76** & **99.27** \\    & Dogs & Fashion & Fata & Landscape & Flowers & STL-10 & CUB-200-2011 & EMNIST & DTD & RESISC45 \\  Individual & 85.16 & 90.26 & 90.23 & 86.83 & 91.99 & 90.07 & 84.29 & 94.67 & 71.76 & 98.90 \\  Weight Averaging & 47.80 & 24.46 & 31.26 & 72.14 & 86.92 & 37.17 & 37.74 & 37.66 & 77.33 & 14.63 & 13.56 \\ RegMean  & 42.89 & 83.42 & 34.62 & 83.64 & 95.26 & 78.94 & 49.78 & 48.67 & 39.53 & 34.66 \\  Task Antheme  & 6.65 & 37.11 & 53.24 & 79.59 & 86.86 & 99.66 & 41.86 & 11.05 & 14.73 & 15.50 \\ In-Merging  & 50.33 & 70.76 & 28.24 & 83.73 & 43.33 & 67.11 & 31.28 & 56.1 & 37.11 & 6.79 \\ AdaMerging  & 53.09 & 76.85 & **43.31** & 81.96 & 95.69 & 69.81 & 46.19 & 86.02 & 16.68 & 24.83 \\   \\  
**EEM-Merging (Oord)** & **81.99** & **92.41** & **94.75** & **81.87** & **97.74** & **96.64** & **74.94** & **98.23** & **60.65** & **98.01** \\    & MangoLeafBD & Beans & Cite-100 & GTSRB & SVHN & SUN397 & KarsuFlow13 & Animal-10N & Garbage & Fruits-360 \\  Individual & 100.60 & 97.73 & 89.85 & 69.74 & 96.22 & 78.94 & 85.53 & 92.52 & 93.16 & 99.63 \\  Weight Averaging & 64.88 & 10.78 & 77.98 & 15.60 & 16.08 & 87.42 & 33.58 & 46.00 & 22.29 & 5.38 \\ RegMean  & 98.10 & 92.58 & 82.59 & 56.96 & 66.13 & 58.58 & 57.11 & 68.74 & 65.31 & 10.79 \\  Task Antheme  & 87.02 & 84.62 & 80.30 & 37.01 & 74.14 & 55.88 & 36.32 & 51.14 & 25.23 & 6.15 \\ Tree Merging  & 50.53 & 62.22 & 78.61 & 40.40 & 17.04 & 52.69 & 19.50 & 71.53 & 39.74 & 15.30 \\ AdaMerging  & **99.13** & 93.38 & 84.19 & 59.90 & 23.50 & 64.09 & 48.66 & 66.55 & 35.46 & 7.94 \\   \\ 
**EEM-Merging (Oord)** & **100.00** & **94.88** & **80.99** & **99.98** & **82.33** & **71.69** & **74.12** & **87.76** & **87.11** & **96.97** \\    & Individual & Weight Averaging & RegMean  & Task Antheme  & Ties-Merging  & AdaMerging  & **ExIR-Merging (Oord)** \\  Acc & 91.02 & 42.52 & 68.14 & 48.89 & 37.53 & 60.25 & **89.54** \\  

Table 4: Task-specific and average performance when merging ViT-B/16 models on **30** tasks.

Figure 5: Partial visualization results of different merging methods, (a) t-SNE and (b) Grad-CAM.

to \(3.48\%\). This shows that the proposed method maintains the performance comparable to individual models when merging vision models even if the number of tasks increases.

### Merging language models

#### 4.2.1 Merging fully finetuned RoBERTa models

**Settings.** We partially follow the setting from DARE . However, instead of merging two or three models at a time, we merge all eight models finetuned on each task. RoBERTa-base  model is selected as the pre-trained model. The performance of each method is evaluated by eight tasks from GLUE  benchmark, respectively CoLA , SST-2 , MRPC , STS-B , QQP , MNLI , QNLI , and RTE . Among them, CoLA is evaluated by the Matthews correlation coefficient, STS-B is evaluated by the average value of Pearson and Spearman correlation coefficients, and the rest tasks are evaluated by accuracy.

**Results.** The experimental results are shown in Tab. 5. It can be seen that EMR-Merging outperforms all the existing methods on every task, verifying the applicability of the proposed method to language models. Note that the reported results of Ties-Merging, Task Arithmetic, and RegMean are the best among multiple hyper-parameter settings. Please check Appendix D.4 for more detailed information. It should also be noted that we find that under our setting of merging multiple models, DARE may not help improve the performance. Similar results were also reported by . This may be due to DARE's random dropping strategy can no longer resolve conflicts among task vectors under the setting of merging multiple models. Please check Appendix D.3 for DARE's experimental results.

#### 4.2.2 Merging fully finetuned GPT-2 models

**Settings.** We follow the setting from FusionBench , a benchmark for model merging. We merge GPT-2  models on seven tasks from GLUE , each with a different head for classification. Under this setting, each task is evaluated by accuracy.

**Results.** The experimental results are shown in Tab. 6. EMR-Merging outperforms all the merging methods by over \(10\%\) and decreases the performance degradation caused by model merging from \(12\%\) to \(1.6\%\). This validates the applicability of EMR-Merging to fully finetuned GPT-scale language models.

#### 4.2.3 Merging PEFT models

**Settings.** We follow the setting from Ties-Merging . (IA)\({}^{3}\) is a PEFT method that uses learned vectors to scale the base model activations. We use T0-3B  as the base model and merge (IA)\({}^{3}\) modules. The performance is evaluated using eleven datasets, including RTE , CB ,

   Method & CoLA & MNLI & MRPC & QNLI & QQP & RTE & SST-2 & Avg. \\  Individual & 76.8 & 82.1 & 80.4 & 88.3 & 89.6 & 65.3 & 91.2 & 82.0 \\  Weight Averaging & 55.0 & 55.1 & 51.0 & 57.6 & 76.7 & 44.8 & 52.5 & 56.1 \\ Fisher Merging  & 54.8 & 58.0 & 39.5 & 63.3 & 81.5 & 49.1 & 64.7 & 58.7 \\ RegMean  & 61.7 & 70.4 & 65.4 & 69.7 & 78.8 & 56.0 & 79.7 & 68.8 \\ Task Arithmetic  & 68.7 & 68.6 & 69.6 & 70.5 & 81.8 & 47.3 & 83.6 & 70.0 \\ Ties-Merging  & 68.4 & 71.4 & 68.4 & 69.6 & 82.4 & 47.7 & 81.8 & 70.0 \\ 
**EMR-Merging (Ours)** & **72.8** & **81.1** & **79.2** & **84.8** & **88.1** & **66.5** & **90.3** & **80.4** \\   

Table 6: Multi-task performance when merging GPT-2 models on seven text classification tasks.

    &  &  &  \\  & **CoLA** & **SST2** & **MRPC** & **STSB** & **QQP** & **MNLI** & **QNLI** & **RTE** \\  Individual & 0.6018 & 0.9404 & 0.8922 & 0.9063 & 0.9141 & 0.8720 & 0.9271 & 0.7906 \\  Weight Averaging & 0.1396 & 0.6411 & 0.6936 & 0.3184 & 0.7536 & 0.4219 & 0.587 & 0.5523 \\ RegMean  & 0.3667 & 0.906 & 0.7574 & 0.6268 & 0.8355 & 0.7002 & 0.8235 & 0.5848 \\ Task Arithmetic  & 0.1878 & 0.8589 & 0.7990 & 0.7403 & 0.8378 & 0.5908 & 0.6967 & 0.6209 \\ Ties-Merging  & 0.2048 & 0.8440 & 0.8113 & 0.5819 & 0.8570 & 0.6465 & 0.7481 & 0.4296 \\ 
**EMR-Merging (Ours)** & **0.3996** & **0.9335** & **0.8627** & **0.8277** & **0.8972** & **0.8545** & **0.8957** & **0.7437** \\   

Table 5: Results of merging RoBERTa models on eight datasets from GLUE benchmark.

Winogrande , WiC , WSC , COPA , H-SWAG , Story Cloze , and ANLI  from R1 to R3. All the datasets are evaluated by accuracy.

**Results.** The experimental results are shown in Tab. 7. EMR-Merging outperforms all the merging methods. Compared to methods without validation, EMR-Merging improves the average accuracy on each task by \(2.2\%\). When compared to methods that require validation data to tune hyper-parameters or compute matrices for weighted merging, EMR-Merging still improves the average performance by \(0.7\%\), validating the applicability of our method to PEFT models.

### Merging multi-modal models

**Settings.** We merge BEiT3-base  models finetuned on five datasets from different kinds of tasks, respectively ImageNet-1k  (Image Classification), VQAv2  (Visual Question Answering), NLVR2  (Visual Reasoning), COCO Captioning  (Image Captioning), and COCO Retrieval  (Image-Text Retrieval). Among them, COCO Captioning is evaluated by BLEU4 , CIDEr , METEOR , and ROUGE-L . The other tasks are evaluated by accuracy.

**Results.** The experimental results are shown in Tab. 8. It can be seen that EMR-Merging performs best on all the vision-language tasks regardless of which evaluation metric is applied among all the merging methods, validating the effectiveness of EMR-Merging in merging multi-modal models.

### Merging different number of models

In Fig. 6, we compare the number of parameters and performance using individual models, Ties-Merging, and EMR-Merging when merging different numbers of ViT-B/32 models under the setting of no-validation.

**Number of parameters.** Compared to other merging methods, EMR-Merging requires a little additional storage for task-specific modulators. However, compared to a single 32-bit model, the additional storage caused by a task-specific 1-bit mask equals a binarized network, whose size is 32 times smaller than a single 32-bit model . Additionally, the storage required by a task-specific rescaler, which is a single parameter, is negligible. In Fig. 6(a), we compare the number of parameters when merging different numbers of models, and we observe that EMR-Merging's parameter number is slightly more than Ties-Merging but significantly fewer than individual models.

   Methods & Validation & RTE & CB & Winegandle & WSC & COPA & H-SWAG & Story Cloze & ANLI-R1 & ANLI-R2 & ANLI-R3 & **Avg Acc** \\  Individual & - & 82.7 & 95.8 & 75.1 & 71.7 & 65.3 & 88.3 & 44.4 & 94.9 & 70.2 & 46.5 & 53 & 71.4 \\ Traditional MTL & - & 88.6 & 95.5 & 75.5 & 61.1 & 80.6 & 94.1 & 42.3 & 97.6 & 70.5 & 49.8 & 47.7 & 73.1 \\  Filter Merging  & \(\) & 83.3 & 83.3 & 86.7 & 54.2 & 83.8 & 83.1 & 42.2 & 94.1 & 45.9 & 41.0 & 42.2 & 62.2 \\ RegGAN (3) & \(\) & 81.2 & 85.3 & 53.5 & 52.5 & 80.9 & 40.1 & 92.5 & 43.1 & 39.2 & 40.2 & 58 \\ Task Arithmetic  & \(\) & 74.1 & 83.3 & 62.8 & 40.1 & 49.3 & 87.5 & 41.5 & 95.3 & 60.8 & 94.4 & 50.0 & 61.9 \\ Ties-Merging  & \(\) & 78.0 & 83.3 & 67.9 & 57.6 & 59.7 & 81.7 & 42.8 & 90.3 & 66.9 & 51.3 & 51.1 & 66.4 \\  Weight Averaging & \(\) & 81.2 & 58.3 & 53.8 & 55.2 & 53.5 & 80.9 & 40.1 & 92.5 & 43.3 & 39.2 & 40.2 & 58 \\ Task Arithmetic  & \(\) & 76.5 & 79.2 & 72.7 & 57.6 & 51.6 & 56.2 & 31.4 & 53.1 & 59.8 & 47.5 & 48.2 & 59.2 \\ Ties-Merging  & \(\) & 81.2 & 87.5 & 60.8 & 59.9 & 58.3 & 80.2 & 42.6 & 91.1 & 58.1 & 46.5 & 47.4 & 64.9 \\
**EMR-Merging (Ours)** & \(\) & **81.8** & **87.5** & **66.6** & **56.1** & **65.3** & **82.4** & **44.7** & **93.6** & **65.7** & **43.8** & **50.8** & **67.1** \\   

Table 7: Results of merging (IA)\({}^{3}\) models on eleven NLP tasks.

   Methods &  Task \\ Metric \\  &  **COCO-Retrieval** \\ Accuracy(\(\)) \\  &  **COCO-Captioning** \\ BLEU(\(\)) \\  &  **ImageNet-1k Classification** \\  &  **NLVR2** \\ Accuracy(\(\)) \\  & 
 **VQAv2** \\ Accuracy(\(\)) \\  \\  Individuals & 0.8456 & 0.394 & 1.337 & 0.31 & 0.601 & 0.8537 & 0.7765 & 0.8439 \\  Weight Averaging & 0.1893 & 0.081 & 0.091 & 0.115 & 0.159 & 0.6771 & 0.2800 & 0.6285 \\  Task Arithmetic  & 0.3177 & 0.033 & 0.000 & 0.118 & 0.176 & 0.7081 & 0.3809 & 0.6933 \\ Ties-Merging  & 0.3929 & 0.029 & 0.001 & 0.108 & 0.167 & 0.6978 & 0.3206 & 0.6717 \\ 
**EMR-Merging(Ours)** & **0.7946** & **0.289** & **1.060** & **0.772** & **0.534** & **0.7742** & **0.7475** & **0.7211** \\   

Table 8: Results of merging multi-modal BEiT3 models on five vision-language tasks.

Figure 6: Comparison of the (a) number of parameters and (b) average normalized performance when using individual models, Ties-Merging, and EMR-Merging.

Performance.The performance comparison when merging different numbers of models is shown in Fig. 6(b). Compared to Ties-Merging, the performance of EMR-Merging is higher and decreases more slowly as the task increases. Note that EMR-Merging outperforms individual models under the 2-task setting. Similar findings are reported by DARE . More details are shown in Appendix D.5.

### Ablation Study

We perform ablations on all the components of EMR-Merging as follows.

**Ablation on Electing procedure.** Tab. 9 shows the results of merging eight ViT-B/32 models when the Electing procedure is replaced by other task vector-based merging methods. The effectiveness of our Electing strategy is verified by outperforming the combination of other merging methods with masking and rescaling. Another interesting finding is that as a post-processing procedure, masking and rescaling can help improve the performance of task vector-based merging methods, respectively \(6.8\%\), \(5.0\%\), and \(6.6\%\) for Task Arithmetic, Ties-Merging, and AdaMerging++.

**Ablation on Masking and Rescaling procedures.** Then, we further validate the importance of Masking and Rescaling procedures by disabling either or both of them. The results are shown in Tab. 10. It can be seen that simply electing results in a severe performance drop while adding Masking and Rescaling can improve the performance by \(27.5\%\) and \(12.6\%\), respectively. Furthermore, compared to separately applying either of these two procedures, jointly applying Masking and Rescaling leads to greater improvement, up to \(29.4\%\).

## 5 Conclusion

In this paper, we study on tuning-free and high-performance model merging. We first attribute the severe performance degradation of existing merging methods to that a single model can hardly simulate all the models' performance. Then we propose Elect, Mask & Rescale-Merging (EMR-Merging), which does not require any data access or additional training for tuning. The effectiveness of EMR-Merging is validated by comprehensive experiments on various classical benchmarks and newly-established benchmarks under vision, NLP, PEFT, and multi-modal settings.

## 6 Acknowledgement

This work is supported by Shanghai Natural Science Foundation (No. 23ZR1402900), National Natural Science Foundation of China (No. 62071127 and No. 62306261), National Key Research and Development Program of China (No. 2022ZD0160101). The computations in this research were performed using the CFFF platform of Fudan University.

   Methods & SUN397 & Cars & RESISC45 & EuroSAT & SVHN & GTSRB & MNIST & DTD & **Avg Acc** \\  Ours (Elect) & 31.7 & 34.7 & 51.8 & 65.9 & 85.7 & 64.0 & 98.2 & 42.2 & 59.3 \\ Ours (Elect \& Mask) & 70.7 & 65.9 & 92.2 & 98.7 & 96.9 & 97.6 & 99.6 & 72.3 & 86.8 [ 27.5] \\ Ours (Elect \& Rescale) & 58.2 & 57.2 & 69.1 & 81.6 & 85.2 & 73.0 & 98.4 & 52.2 & 71.9 [ 12.6] \\ Ours (Elect, Mask \& Rescale) & **75.2** & **72.8** & **93.5** & **99.5** & **96.9** & **98.1** & **99.6** & **74.4** & **88.7** [ 29.4] \\   

Table 10: Ablation on the Masking and Rescaling procedures of EMR-Merging.

   Methods & SUN397 & Cars & RESISC45 & EuroSAT & SVHN & GTSRB & MNIST & DTD & **Avg Acc** \\  Task Arithmetic & 63.8 & 62.1 & 72.0 & 77.6 & 74.4 & 65.1 & 94.0 & 52.2 & 70.1 \\ Task Arithmetic w/ M\&R & **67.6** & **67.3** & **80.2** & **91.3** & **79.3** & **75.7** & **96.0** & **57.9** & **76.9** [ 6.8] \\  Ties-Merging & 64.8 & 62.9 & 74.3 & 78.9 & 83.1 & 71.4 & 97.6 & 56.2 & 73.6 \\ Ties-Merging w/ M\&R & **68.8** & **68.9** & **82.2** & **91.6** & **81.4** & **80.0** & **96.6** & **59.3** & **78.6** [ 5.0] \\  AdaMerging++ & 66.6 & 68.3 & 82.2 & 94.2 & 89.6 & 89.0 & 98.3 & 80.6 & 81.1 \\ AdaMerging++ w/ M\&R & **74.0** & **76.2** & **93.1** & **98.2** & **93.3** & **96.3** & **99.4** & **71.2** & **87.7**[ 6.6] \\  EMR-Merging (Ours) & **75.2** & **72.8** & **93.5** & **99.5** & **96.9** & **98.1** & **99.6** & **74.4** & **88.7** \\   

Table 9: Ablation on the Electing procedure of EMR-Merging.