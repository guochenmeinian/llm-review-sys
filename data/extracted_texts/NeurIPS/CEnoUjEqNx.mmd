# Convergence of No-Swap-Regret Dynamics in Self-Play

Renato Paes Leme

Google Research

Georgios Piliouras

Google Deepmind

&Jon Schneider

Google Research

###### Abstract

In this paper, we investigate the question of whether no-swap-regret dynamics have stronger convergence properties in repeated games than regular no-external-regret dynamics. We prove that in almost all _symmetric_ zero-sum games under _symmetric_ initializations of the agents, _no-swap-regret_ dynamics in self-play are guaranteed to converge in a strong "frequent-iterate" sense to the Nash equilibrium: in all but a vanishing fraction of the rounds, the players must play a strategy profile close to a symmetric Nash equilibrium. Remarkably, relaxing any of these three constraints, i.e. by allowing either i) asymmetric initial conditions, or ii) an asymmetric game or iii) no-external regret dynamics suffices to destroy this result and lead to complex non-equilibrating or even chaotic behavior.

In a dual type of result, we show that the power of no-swap-regret dynamics comes at a cost of imposing a time-asymmetry on its inputs. While no-external-regret dynamics can be completely determined by the cumulative reward vector received by each player, we show there does not exist any general no-swap-regret dynamics defined on the same state space. In fact, we prove that any no-swap-regret learning algorithm must play a time-asymmetric function over the set of previously observed rewards, ruling out any dynamics based on a symmetric function of the current set of rewards.

## 1 Introduction

The analysis of learning dynamics in games is a well-established problem situated at the intersection of game theory, online optimization and evolutionary game theory [16; 47; 54]. The significance of this area has been amplified by the emergence of prominent machine learning architectures and applications relying on multi-agent, typically zero-sum, games [42; 32; 46; 52; 14; 49; 10]. Symmetric zero-sum games and their dynamics are actually of particular interest both from a traditional evolutionary perspective [54; 13] as well as from a modern Machine Learning perspective as creating a population of agents that compete against each other in a heads-up fashion to outperform each other ("self-play") has been shown to be a reliable recipe for creating super-humanly capable agents for a wide range of tasks [9; 38].

Despite growing interest in understanding and predicting the long-term behavior of such systems, recent studies have revealed a wide array of negative results, demonstrating the elusiveness of game dynamics. These range from non-convergence results to the establishment of chaotic or even essentially arbitrary behavior [44; 28; 30; 40; 3; 4; 55; 26; 45]. Notably, these instability and chaotic behaviors persist even in the analysis of well-known online optimization algorithms, such as Multiplicative Weights Updates (MWU/Hedge), Online Gradient Descent, Follow-the-Regularized-Leader a.o., even within the narrow but seminal class of (symmetric) zero-sum games [7; 18; 19; 20].

Although it is possible to stabilize learning dynamics in zero-sum games using e.g., optimistic variants of MWU [22; 43; 23], such results leave something to be desired as they presuppose that the agents coordinate to use a specific instantiation of a learning algorithm. Ideally, we would like instead to be able to prove such strong convergence results based on more abstract properties of the dynamics.

Swap (internal) regret is once such abstract property of online learning dynamics. Unlike the more permissive case of no-(external) regret, where the algorithm's performance needs to compete against the best fixed action with hindsight, no-swap-regret algorithms need to compete against the best adaptive deviation policy with hindsight (i.e., for each occurrence of action \(i\) we consider to the best possible deviating action \(j\) with hindsight). Somewhat surprisingly, it is possible to adapt no-regret algorithms to no-internal-regret algorithms efficiently [11; 53] with very recent work providing further efficient such reductions [21; 48]. The stronger nature of swap regret results into numerous applications, such as (multi)-calibration [31; 37; 51; 35; 33], robustness against dynamic strategic behavior [24; 41; 15; 5] and AI Safety . Arguably, however, its most important application is due to its tight connection to correlated equilibria, introduced by Aumann , as it is well known that the time-average empirical distribution of play resulting from no-internal/swap regret algorithms is guaranteed to converge to the set of correlated equilibria (CE)1, a (typically strict) relaxation of the predominant game theoretic solution concept of Nash equilibria. In contrast, no-regret algorithms only guarantee time-average convergence to the even more relaxed solution concept of coarse correlated equilibria (CCE) (see preliminary section for precise definitions). Interestingly, in the special case of zero-sum games, for almost all but pathological zero-measure instances of them, the notions of Nash equilibria and correlated equilibria coincide and are in fact unique (whereas CCE do not). This opens the following tantalizing possibility:

_Does no-swap-regret minimization suffice for Nash convergence in (almost) all zero-sum games?_

The answer to above question is strongly negative. Even in trivial two strategy zero-sum games, such as Matching Pennies, swap regret minimization does not suffice for convergence. Interestingly, however, a sweeping positive result holds for the case of **symmetric** zero-sum games.

**Informal theorem:** In almost all symmetric zero-sum games, under arbitrary symmetric initializations for both agents, any no-swap-regret algorithm in self-play is guaranteed to converge to the Nash equilibrium, except2 for a vanishingly small fraction of iterates.

At a technical level, the result depends on two different arguments. First, even in the case of symmetric zero-sum games it is still possible to show that generically the correlated equilibria remain unique, however, the argument does not follow the analysis of general zero-sum games as symmetric cases are themselves non-generic within the larger class. Secondly, we leverage the symmetry of the trajectories to show that time-averaged convergence of symmetric action profiles to a product distribution implies the desired convergent behavior.

This unexpected connection between swap regret minimization and symmetry in games inspires the investigation of other ways that symmetry can insert itself in the study of online learning itself. For example, it is well understood that most standard no-regret algorithms such as MWU, can be completely determined by the vector of cumulative rewards and thus their outputs remain invariant to any permutation of their history, i.e. they exhibit a strong type of time-symmetry. Interestingly, we show that such time-symmetry is provably at odds with swap regret minimization. At a technical level, this argument is based on a construction that couples the behavior of online learning dynamics to particular classes of card guessing games (e.g., ) that enable precise control over the algorithm's optimal expected utility (in particular, showing that the play of any such algorithm must be very close to the Follow-The-Leader algorithm, at least when averaged over certain segments of time).

## 2 Model and Preliminaries

### Games and learning

We consider a setting where two learners (Alice and Bob) are repeatedly playing a game \(G\) for \(T\) rounds. We assume the game \(G\) has \(N\) actions for both Alice and Bob, and Alice and Bob will play mixed strategies belonging to the \(N\)-dimensional simplex \(_{N}\). The game \(G\) can be thought of as a pair of bilinear functions \((G_{A},G_{B})\) describing the payoffs for Alice and Bob: in round \(t\), if Alice plays action \(a_{t}_{N}\) and Bob plays action \(b_{t}_{N}\), then Alice receives payoff \(G_{A}(a_{t},b_{t})\) and Bob receives utility \(G_{B}(a_{t},b_{t})\). One specific class of games we consider are _zero-sum games_, where \(G_{B}(a_{t},b_{t})=-G_{A}(a_{t},b_{t})\); for such games we will omit the subscript and write \(G(a_{t},b_{t})\) to denote \(G_{A}(a_{t},b_{t})\).

For our purposes, a learning algorithm for Alice in this repeated game is a function which maps the history of played mixed strategies (e.g., \(a_{1},b_{1},a_{2},b_{2},,a_{t-1},b_{t-1}\)) to the mixed strategy that Alice will play next (\(a_{t}\)). Learning algorithms for Bob are defined symmetrically. Note that we operate in the deterministic full-information setting where both Alice and Bob know the game \(G\) and can see each other's mixed strategy after each round3.

We consider two classes of learning algorithms, _no-regret algorithms_ and _no-swap-regret algorithms_. Alice's (external) regret is defined via

\[_{A}=_{t=1}^{T}G_{A}(a_{t},b_{t})-_{a^{*}_{N}} _{t=1}^{T}G_{A}(a^{*},b_{t})\] (1)

(with Bob's external regret \(_{B}\) defined similarly). Alice's swap regret is defined via

\[_{A}=_{t=1}^{T}G_{A}(a_{t},b_{t})-_{_{A}:[N][N] }_{t=1}^{T}G_{A}(_{A}(a_{t}),b_{t}).\] (2)

In (2), the maximum is over all "swap functions" \(\) mapping the set of \(N\) actions to itself. We extend \(\) to act on mixed strategies (elements of \(_{N}\)) in the natural way (i.e., \((x)_{i}=_{j}x_{j}((j)=i)\)). We say Alice's learning algorithm is _no-regret_ if it is guaranteed that \(_{A}=o(T)\). Similarly, we say it is _no-swap-regret_ if it is guaranteed that \(_{A}=o(T)\). It is known that both efficient no-regret and no-swap-regret algorithms exist, with regret scaling as \(()\).

#### 2.1.1 Symmetric games and symmetric learners

In this note we primarily consider symmetric learning dynamics in symmetric games. A game \(G\) is _symmetric_ if \(G_{A}(a_{t},b_{t})=G_{B}(b_{t},a_{t})\). As with zero-sum games, for symmetric games we will omit subscripts and use \(G(a_{t},b_{t})\) to refer to \(G_{A}(a_{t},b_{t})\). Some games are both symmetric and zero-sum (e.g., the Rock-Paper-Scissors example we introduce later in Example 1).

In a symmetric game, it's natural to consider the setting where Alice and Bob play identical learning algorithms with identical initialization. This results in completely symmetric learning dynamics for Alice and Bob (i.e., \(a_{t}=b_{t}\) for all rounds \(t\)). We write \(x_{t}_{N}\) to denote the common strategy that Alice and Bob play at time \(t\).

### Equilibria in games

We are interested in the convergence of various types of learning algorithms to specific equilibria of \(G\). We begin by defining the equilibria of interest.

For a game \(G\), a (not necessarily symmetric) _joint strategy profile_\(\) is a distribution over all \(N^{2}\) pairs of pure strategies for Alice and Bob. Note that this is not necessarily a product distribution, and in particular allows for Alice's mixed strategy and Bob's mixed strategy to be correlated. It is convenient to identify the set of joint distributions \(_{N^{2}}\) with the convex subset \(\) of the tensor product space \(^{N}^{N}\) defined as the convex hull of all elements of the form \(a b\) where \(a,b_{N}\). In particular, given \(a,b_{N}\), the element \(a b\) corresponds to the joint strategy profile where Alice plays mixed strategy \(a\) and Bob independently plays mixed strategy \(b\). In other words, the pair \((i,j)\) is played with probability \(a_{i}b_{j}\).

We consider three different types of equilibria, which are (in increasing order of fineness) coarse-correlated equilibria, correlated equilibria, and Nash equilibria. We define these below:

* A _coarse-correlated equilibrium_ is a joint strategy profile where neither Alice nor Bob has an incentive to unilaterally deviate to a single pure action. Formally, \(\) is a coarse-correlated equilibrium if both \[}_{(i,j)}[G_{A}(i,j)]}_{(i,j) }[G_{A}(i^{*},j)], i^{*}[N]\] \[}_{(i,j)}[G_{B}(i,j)]}_{(i,j )}[G_{B}(i,j^{*})], j^{*}[N]\]
* A _correlated equilibrium_ is a joint strategy profile where neither Alice nor Bob has an incentive to deviate from their assigned action, where their deviation may depend on their original action. Formally, \(\) is a correlated equilibrium if both \[}_{(i,j)}[G_{A}(i,j)]}_{(i,j)}[G_{A}(_{A}(i),j)],_{A}:[N][N]\] \[}_{(i,j)}[G_{B}(i,j)]}_{(i,j)}[G_{B}(i,_{B}(j))],_{B}:[N][N]\]
* Finally, \(\) is a _Nash equilibrium_ if \(\) is a product distribution \(=a b\) and neither Alice nor Bob has an incentive to deviate (\(G_{A}(a,b) G_{A}(a^{},b)\) and \(G_{B}(a,b) G_{B}(a,b^{})\)). Note that we can alternatively think of Nash equilibria as the intersection of coarse-correlated (or correlated) equilibria with the set of product distributions.

**Example 1**.: Consider the Rock-Paper-Scissors zero-sum game, defined via:

\[G(i,i)=0,G(i,(i+1) 3)=1,G(i,(i-1) 3)=-1.\]

The unique correlated equilibrium (and hence unique Nash equilibrium) in this game is the product distribution \((+e_{2}+e_{3}}{3})(++e_{3}}{3})\). However, the set of coarse correlated equilibria is much larger - it contains, for example, the element \((e_{1} e_{1}+e_{2} e_{2}+e_{3} e_{3})\). Here there is no incentive to unilaterally deviate, but there is an incentive to deviate based on your choice of action (e.g., whenever you play \(e_{1}\), you can improve your utility by instead playing \(e_{3}\)).

### Convergence to equilibria

When players run learning algorithms in repeated games, they may over time converge to an equilibrium. There are three senses in which this may happen (that we discuss here). We say that Alice and Bob's strategies have _time-averaged convergence_ to a joint strategy profile \(\) if

\[_{T}\|(_{t=1}^{T}a_{t} b_{t} )-\|=0.\]

In other words, time-averaged convergence means that the average of the joint strategy profiles Alice and Bob play converges over time to \(\).

Likewise, we say that Alice and Bob's strategies have _frequent-iterate convergence_ to \(\) if for any \(>0\),

\[_{T}_{t T}[\|(a_{t} b_{t})-\| >]=0.\]

Here the probability is taken over \(t\) being drawn uniformly at random from all rounds between 1 and \(T\). In other words, frequent-iterate convergence means that, as time goes on, almost all joint strategies profiles Alice and Bob play will be arbitrarily close to \(\).

Finally, we say that Alice and Bob's strategies have _last-iterate convergence_ to \(\) if

\[_{T}\|(a_{T} b_{T})-\|=0.\]

Last-iterate convergence means that the sequence of joint action profiles played by Alice and Bob directly converge to \(\). Note that last-iterate convergence is a stronger property than frequent-iterate convergence, which in turn is a stronger property than time-averaged convergence.

It is known that if Alice and Bob run certain types of learning algorithms, they will have time-averaged convergence to a certain type of equilibrium. Here are some known facts about learning dynamics []:* If Alice and Bob are running no-regret algorithms in a general game \(G\), their strategies will have time-averaged convergence to a coarse correlated equilibrium of \(G\).
* If Alice and Bob are running no-swap-regret algorithms in a general game \(G\), their strategies will have time-averaged convergence to a correlated equilibrium of \(G\).
* There exist zero-sum games \(G\) (including Rock-Paper-Scissors of Example 1) where if Alice and Bob run certain no-regret algorithms (e.g. Multiplicative Weights) Alice and Bob's strategies will not have last-iterate convergence to a coarse correlated equilibrium.

Figure 1: Trajectories of two learning algorithms (Multiplicative Weights and Blum-Mansour) playing Rock-Paper-Scissors. The axis corresponds to the probability of playing Rock and Paper. The blue dot corresponds to the probabilities at Nash equilibrium while the red dot is the last iterate after 10000 steps with learning rate \(=0.001\).

Figure 2: Trajectories of Multiplicative Weights and Blum-Mansour for Rock-Paper-Scissors-Lizard-Spock (a the 5-strategy generalization of Rock-Paper-Scissors).

Convergence of Symmetric Swap Regret in Symmetric Zero Sum Games

There exist zero-sum games \(G\) (including Rock-Paper-Scissors of Example 1) where if Alice and Bob run certain no-regret algorithms (e.g. Multiplicative Weights) Alice and Bob's strategies will not have last-iterate convergence to a equilibrium. In the left side of Figure 1 plot the trajectory of Multiplicative Weights when Alice and Bob have the same initialization. The blue dot in the middle corresponds to the Nash equilibrium. While the strategies played average to the equilibrium, they never converge there.

In this section, we will show that for almost all _symmetric_, _zero-sum_ games \(G\), if Alice and Bob employ the same no-swap-regret learning algorithms with symmetric initializations they will have frequent-iterate convergence to a Nash equilibrium of \(G\). In the right side of the same figure, we show the Blum-Mansour trajectory converging to equilibrium. In Appendix A, we show via a simple counter-example that symmetric initializations are necessary to achieve such strong convergence guarantees.

Our main tool is the following technical lemma, which shows that time-averaged convergence of symmetric action profiles to a product distribution implies frequent-iterate convergence to the same distribution.

**Lemma 1**.: _Let \(x_{1},x_{2},\) be a sequence of elements in \(_{N}\) such that_

\[_{T}\|(_{t=1}^{T}x_{t} x_{t} )-(y y)\|=0\]

_for some element \(y\) of \(_{N}\) (i.e., the profiles \(x_{t} x_{t}\) time-averaged converge to \(y y\)). Then it is the case that for any \(>0\),_

\[_{T}_{t T}[\|(x_{t} x_{t})-(y y)\|> ]=0.\]

_(i.e., the profiles \(x_{t} x_{t}\) frequent-iterate converge to \(y y\))._

Proof.: For any \(y_{N}\), we will show that there exists a linear functional \(L_{y}:^{N}^{N}\) with the property that, among all elements of the form \(x x\) with \(x_{N}\), \(L_{y}\) is uniquely minimized at \(y y\). As a consequence, this implies that that there exists a \(>0\) such that if

\[\|(x x)-(y y)\|>,\]

for some element \(x_{N}\), then \(L_{y}(x x)-L_{y}(y y)>\). In particular, if for some \(T\) we have that

\[_{t T}[\|(x_{t} x_{t})-(y y)\|>],\]

then we consequently have that

\[_{t=1}^{T}(L_{y}(x_{t} x_{t})-L_{y}(y y) ),\]

and in turn that

\[\|(_{t=1}^{T}(x_{t} x_{t}))-(y y )\|\|L_{y}\|_{*},\]

(where \(\|L_{y}\|_{*}\) is the dual norm of the linear functional \(L_{y}\) and is bounded below by some constant). This directly implies the lemma statement (it is impossible for the second quantity to approach zero as \(T\) goes to infinity without the first quantity approaching zero).

We now describe the linear functional \(L_{y}\). Let \(y=(y_{1},y_{2},,y_{N})\) (and for a general \(x_{N}\), let \(x=(x_{1},x_{2},,x_{N})\)). Note that for any linear functional \(L_{y}:^{N}^{N}\), the value of \(L_{y}(x x)\) will be a homogeneous quadratic polynomial over the \(x_{i}\); conversely, any such polynomial can be implemented as a linear functional over \(^{N}^{N}\). Moreover, since \( x_{i}=1\), we can convert any (non-homogeneous) quadratic polynomial to a homogeneous one (e.g. transforming \(x_{1}^{2}+x_{1}+1\) to \(x_{1}^{2}+x_{1} x_{i}+( x_{i})^{2}\)). It therefore suffices to find a quadratic polynomial over the \(x_{i}\) that is minimized when \(x=y\).

We begin with the case where all \(y_{i}>0\). In this case, we claim that the polynomial

\[L_{y}(x x)=_{i=1}^{N}}x_{i}^{2}\]

satisfies these constraints. To see this, note that by Cauchy-Schwartz,

\[_{i=1}^{N}}x_{i}^{2}=(_{i=1}^{N}^{2}}{y_ {i}})(_{i=1}^{N}y_{i})(_{i=1}^{N}x_{i} )^{2}=1,\]

with equality only holding when \(x_{i}^{2}/y_{i}= y_{i}\) for some fixed \(\). Since \(x\) and \(y\) both belong to \(_{N}\), this is only possible when \(=1\) and \(x=y\).

What if some of the \(y_{i}\) equal zero? Without loss of generality, assume \(y_{i}>0\) for \(1 i n\) and \(y_{i}=0\) for \(n+1 i N\). Now, consider the polynomial

\[L_{y}(x x)=(_{i=1}^{n}}x_{i}^{2})-2( _{i=1}^{n}x_{i}).\]

We begin by minimizing this expression subject to \(_{i=1}^{n}x_{i}=s\), for some \(0 s 1\). In this case, the second term in the above polynomial is identically \(-2s\), so it suffices to minimize the first term. Again applying Cauchy-Schwartz, we find the minimum of the first term occurs only when \(x_{i}=sy_{i}\), where it equals \(s^{2}\). The overall minimum of \(L_{y}\) (subject to this constraint) is therefore \(s^{2}-2s\). This is in turn uniquely minimized when \(s=1\) (and \(x_{i}=0\) for all \(i>n\)), and therefore this \(L_{y}\) is uniquely minimized at \(x=y\). 

Next we show a _'generic'_ symmetric zero-sum game has a unique correlated equilibrium and hence coincides with the Nash equilibrium of this game. First, we define what we mean by generic. We can identify the set of zero-sum games with \(^{N N}\), where each element corresponds to an \(N N\) payoff matrix for Alice. We say that a property \(\) holds for a generic zero-sum game, if the set of points in \(^{N N}\) for which \(\) doesn't holds form a measure zero subset of \(^{N N}\).

By this definition, the set of symmetric zero-sum games forms a measure zero subset of the set of zero-sum games, so we need a refined definition to describe a generic symmetric zero-sum game. We can identify the set of symmetric zero-sum games with with \(^{N(N-1)/2}\) where each element corresponds to a skew-symmetric \(N N\) payoff matrix for Alice. We say that a property \(\) holds for a generic symmetric zero-sum game, if the set of points in \(^{N N}\) for which \(\) doesn't holds form a measure zero subset of \(^{N(N-1)/2}\).

The uniqueness of a correlated equilibrium for zero-sum games is known for generic zero-sum games by combining results by Forges  and Bohnenblust, Karlin and Shapley . But since symmetric zero-sum games are a measure zero subset of zero-sum games, this result does not directly extend. Below, we extend it to symmetric zero-sum games.

Finally, to complete the picture, we further establish that this generic uniqueness of correlated equilibria strongly does not extend to the case of coarse correlated equilibria, which are the limit points of (external) regret-minimizing algorithms.

**Lemma 2**.: _Almost all (i.e., all but a measure zero set of) two-player symmetric zero-sum games have a unique correlated/Nash equilibrium._

Proof.: By  a zero-sum game has a unique correlated equilibrium if and only if it has a unique Nash equilibrium, thus it suffices to prove the generic uniqueness of Nash equilibria. Let \(A\) be the skew-symmetric (\(A^{}=-A\)) payoff matrix corresponding to the symmetric zero-sum game. A Nashequilibrium is called quasi-strict (sometimes also referred to as regular or quasi-strong ) if for all agents deviations to strategies outside their support result in a strict decrease of their payoff. By Corollary 3.4 in  we have that in any two agent game if all equilibria are quasi-strict then the number of equilibria is finite. Thus, if a symmetric zero-sum game has multiple equilibria, this implies the existence of a non-quasi-strict equilibrium/optimal strategy. Let \(x\) be that non-quasi-strict mixed strategy and let \(S_{x}\) denote its support, i.e., the set of strategies played in \(x\) with positive probability and let \(i\) be the index of the strategy not in \(S_{x}\) such that deviating to that strategy from the symmetric \((x,x)\) Nash equilibrium still results into payoff of zero (since the game value of any zero-sum symmetric game is zero). This implies that both antisymmetric sub-matrices of \(A\) defined by its restrictions to the sets \(S_{x}\) and \(S_{x} i\) respectively have a zero eigenvalue where the corresponding eigenvector is the analogously restricted subvector of \(x\). Thus, both of their determinants are equal to zero. However, at least one of them has even dimension. It is well known that the determinant of an even dimension skew-symmetric matrix is a non-trivial polynomial (and in fact is the square of a polynomial in its coefficients, see e.g. ). The entries of this submatrix correspond to the vanishing set of a non-trivial polynomial and therefore have Lebesgue measure zero. Thus, the set of all symmetric zero-sum games with unique Nash/correlated equilibrium has zero measure.

Combining Lemma 1 and Theorem 2, we arrive at the result mentioned at the beginning of this section.

**Theorem 3**.: _In a generic symmetric zero-sum game \(G\), if Alice and Bob run identical no-swap-regret algorithms with the same initialization to play \(G\) repeatedly, their joint strategy profiles will have frequent-iterate convergence to a Nash equilibrium of \(G\). Furthermore, this result is tight, i.e., it is not possible to prove (last-iterate) convergence to Nash equilibrium._

Proof.: Since Alice and Bob are both running the same no-swap-regret algorithm, their strategy profiles stay identical and hence their joint strategy profile is of the form \(x_{t} x_{t}\). Since no-swap-regret algorithms have time average convergence to correlated equilibrium, then there is a correlated equilibrium \(\) of \(G\) such that \(\|_{t=1}^{T}x_{t} x_{t}-\| 0\). By Lemma 2, \(\) is a Nash equilibrium, so we can write \(=y y\). Now, we can apply Lemma 1 to obtain frequent iterated convergence to \(\).

It is not possible to prove anything stronger, i.e., convergence to Nash, based on (symmetric) no-swap-regret learning because we can take any such no-swap-regret dynamics and interject for a vanishing fraction of the history some arbitrary symmetric play where those payoff inputs are ignored by the learning dynamics (e.g. the Blum-Mansour algorithm does not see these fictitious entries). This rare interleaving of the trajectory with noise does not significantly affect the swap regret analysis which will remain sublinear if the original dynamic is no-swap-regret but at the same time it suffices to destroy any hope of true last iterate convergence. 

### Differences with respect to External Regret

It is useful to consider which parts of the proof break when we move from swap to external regret. Both Lemma 1 and Lemma 2 no longer hold.

Consider for example the executions of MWU and BM in Figure 1. In both cases we have that \((_{t}x_{t}) x_{}:=(,, )\). If we look at the empirical joint distribution \(_{T}=(_{t}x_{t} x_{t})\) we obtain the following:

\[_{T}^{}=0.111&0.111&0.111\\ 0.111&0.111&0.111\\ 0.111&0.111&0.111_{T}^{}= 0.120&0.105&0.105\\ 0.105&0.120&0.105\\ 0.105&0.105&0.120\]

Only in the swap regret algorithm we have \( x_{} x_{}\). Lemma 1 crucially relies on \((_{t}x_{t} x_{t})\) converging a product distribution.

Lemma 2 also breaks when we replace CE (achieved by swap regret minimization) with CCE (achieved by external regret minimization):

**Lemma 4**.: _Given any symmetric zero-sum game as long as its set of optimal strategies does not consist of a single pure (i.e., deterministic) strategy then it has a continuum of coarse correlated equilibria._Proof.: In any such game there exists an optimal (Nash) strategy that is randomizing amongst at least two strategies. We will define the correlated distribution that applies positive probability only symmetric outcomes of the game (e.g, such as (Rock, Rock) (Paper, Paper) and (Scissors, Scissors) in the RPS game) such as its resulting marginal distribution corresponds to the Nash equilibrium strategy. The expected payoff of each agent in this distribution is equal to zero. Furthermore, any deviating strategy cannot result in positive payoff since the marginal distribution encodes a Nash equilibrium. Thus, the original distribution is a CCE. By taking convex combinations of these CCE and the Nash equilibrium we have that each such game has a continuum of CCE. 

An immediate corollary of Lemma 4 is that the rich, non-equilibrating behavior of MWU and other no-regret dynamics, even under symmetric initializations, shown for Rock-Paper-Scissors and Rock-Paper-Scissors-Lizard-Spock shown in Figures 1,2 should be common for many other symmetric games and regret-minimizing dynamics as well.

### Asymmetric Zero Sum Games

We remark that the results don't generalize to asymmetric zero sum games. One example of such games is matching pennies where no-external regret dynamics like MWU are known not to exhibit last-iterate convergence and in fact diverge chaotically towards the boundary for all interior initializations, including all symmetric (non-Nash) initial conditions . For games with \(2\) actions per player, any no-external-regret algorithm is also no-swap-regret as we show in the following lemma.

**Lemma 5**.: _For a game with \(2\) actions per player, \( 2\,\)._

Proof.: Let \(\{0,1\}\) be Alice's actions in let \(a_{t},b_{t}_{2}\) be a sequence of strategies played by Alice and Bob. There are \(3\) non-trivial swap strategies \(:\) for Alice: \(s 0\), \(s 1\), \(s 1-s\). The regret of using the first two swap strategies is bounded by \(\) since they map to a constant action. Let \(a_{t}[s]\) be the \(s\)-th component of \(a_{t}_{2}\). Then, the regret of the third strategy \(\) is bounded by:

\[_{t}G_{A}(a_{t},b_{t})-G_{A}((a_{t}),b_{t}) =_{t}a_{t}(G_{A}(0,b_{t})-G_{A}(1,b_{t}))+_{t}a_{t} (G_{A}(1,b_{t})-G_{A}(0,b_{t}))\] \[=[_{t}G_{A}(a_{t},b_{t})-G_{A}(1,b_{t})]+[ _{t}G_{A}(a_{t},b_{t})-G_{A}(0,b_{t})] 2\,\]

## 4 No-Swap-Regret Algorithms are Time-Asymmetric

One interesting feature of no(-external)-regret algorithms in two-player games is that the action they select at time \(t\) can depend entirely on the average historical strategy played by the other player up to time \(t-1\), and not on any other information about how this strategy (or the player's own strategy) evolved over time.

In this section we show that it is impossible for a no-swap-regret learning algorithm to have this property. In fact, we prove the following more general statement.

**Theorem 6**.: _Consider any learning algorithm \(\) which decides what action to take on behalf of Alice in a game \(G\) at round \(t\) via a symmetric function \(A_{t}(b_{1},b_{2},,b_{t-1})\) of Bob's mixed strategies up until \(t-1\) (here symmetric means that the function is unchanged for any permutation of the inputs). Then there exists a game \(G\) and a sequence of play for Bob where Alice incurs \((T)\) swap regret._

As mentioned, many no-external-regret algorithms (such as multiplicative weights, and follow-the-regularized leader) have the property that each \(A_{t}\) can be written as a function of the average \(_{s=1}^{t-1}b_{s}\), and hence are symmetric.

We provide a sketch of the proof of Theorem 6, deferring all details and proofs of lemmas to Appendix B. We will consider the game \(G\) given by the three-action generalization of Matching Pennies. Specifically, Alice and Bob will both have \(3\) actions, and \(G_{A}(i,j)\) equals \(1\) if \(i=j\) and \(0\) otherwise (since we will specify Bob's sequence of actions adversarially, his payoff \(G_{B}\) is irrelevant).

We will construct an adversarial sequence of actions for Bob where in each round Bob plays one of the three pure actions in \(_{3}\) (i.e., \(b_{t}\{e_{1},e_{2},e_{3}\}\)). For each \(i\), let \(n_{t,i}\) equal the number of rounds \(s t-1\) where Bob played action \(i\). Since \(A_{t}\) is a symmetric function of the \(b_{s}\) for \(1 s t-1\), we can write \(A_{t}\) as a function \(A_{t}(n_{t,1},n_{t,2},n_{t,3})\). Moreover, since we must have \(n_{t,1}+n_{t,2}+n_{t,3}=t-1\), we can summarize the entire learning algorithm with a single 3-variable function \(A(n_{1},n_{2},n_{3}):_{ 0}^{3}_{3}\) satisfying

\[A(n_{1},n_{2},n_{3})=A_{n_{1}+n_{2}+n_{3}+1}(n_{1},n_{2},n_{3}).\]

Our main strategy will be to show that if \(A\) has no swap regret (or even no external regret), on average \(A\) must be very close to the "follow the leader" strategy, which puts all the weight on action \(i\) if \(n_{i}\) is significantly larger than the other \(n_{j}\). We formalize this in the following lemma (which employs a result of  on the number of mistakes necessary in certain card guessing games):

**Lemma 7**.: _Assume that the algorithm \(\) guarantees that Alice incurs at most sublinear external regret, i.e., \(_{A}=o(T)\). Then for any \(L T/100\) and \(n_{1},n_{2} n_{3} T-L\), we have that_

\[_{m=n_{3}+1}^{n_{3}+L}A(n_{1},n_{2},m)_{3}=1-o(1).\]

Lemma 7 shows that \(\) mostly plays the leader (i.e., highest-utility) action in any sufficiently long segment of rounds where Bob is playing the leader action. We would also like to show that \(\) mostly plays the leader action in stretches where Bob is playing some other fixed action. The following lemma gives a weak form of this claim (but that will be sufficient for proving Theorem 6).

**Lemma 8**.: _Fix any \(L,L^{} T/100\) and let \(n_{2}(n_{1},L^{})\). Then there exists an \(n_{3}[n_{2},n_{2}+L]\) such that_

\[}_{m^{}=n_{2}-L^{}}^{n_{2}-1}A(n_{1},m^{ },n_{3})_{3}=1-o(1).\]

With Lemmas 7 and 8 (and their symmetric counterparts), we can construct a sequence of play for Bob where Alice incurs high swap regret. Roughly, this sequence of play proceeds as follows.

* First Bob plays action \(1\) for approximately \(T/3\) rounds. By Lemma 7, we can guarantee that Alice plays action \(1\) for most of these rounds.
* Bob then plays action \(2\) for approximately \(T/3\) rounds. By the guarantee of Lemma 8, Alice will still play action \(1\) for most of these rounds.
* Bob then plays action \(3\) for the remaining rounds. Again by applying Lemma 8, we can guarantee that Alice will play action \(2\) for most of these rounds.

It is straightforward to check that Alice incurs linear swap regret in the above trajectory - Alice would improve her expected utility by \((T)\) if she played action 3 every time she played action 2. The details of this proof are deferred to Appendix B.

## 5 Conclusion

In this paper, we study the role of symmetry in the behavior of no-swap regret dynamics. In our first result, we show that no-swap-regret dynamics in self-play in symmetric zero-sum games lead to converge in a strong "frequent-iterate" sense to the Nash equilibrium. Specifically, in all but a vanishing fraction of the rounds, the players must play a strategy profile close to a symmetric Nash equilibrium. Furthermore, we show that the power of no-swap-regret dynamics comes at a cost of imposing a time-asymmetry on its inputs. Specifically, any such algorithm, unlike no-external regret dynamics, must apply a time-asymmetric function over the set of previously observed rewards.

The interplay between symmetry, (external/swap) regret and learning in games emerges as as interesting direction for future work. One particularly interesting such direction would be to explore generalizations of our results beyond two player games.