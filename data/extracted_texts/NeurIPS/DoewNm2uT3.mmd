# Neural Combinatorial Optimization for Robust Routing Problem with Uncertain Travel Times

Pei Xiao\({}^{1}\), Zizhen Zhang\({}^{1*}\), Jinbiao Chen\({}^{1}\), Jiahai Wang\({}^{1}\), Zhenzhen Zhang\({}^{2}\)

School of Computer Science and Engineering, Sun Yat-sen University, P.R. China \({}^{1}\)

School of Economics and Management, Tongji University, P.R. China \({}^{2}\)

xiaop39@mail2.sysu.edu.cn, zhangzzh7@mail.sysu.edu.cn

chenjb69@mail2.sysu.edu.cn, wangjiah@mail.sysu.edu.cn

zhenzhenzhang@tongji.edu.cn

###### Abstract

We consider the robust routing problem with uncertain travel times under the min-max regret criterion, which represents an extended and robust version of the classic traveling salesman problem (TSP) and vehicle routing problem (VRP). The general budget uncertainty set is employed to capture the uncertainty, which provides the capability to control the conservatism of obtained solutions and covers the commonly used interval uncertainty set as a special case. The goal is to obtain a robust solution that minimizes the maximum deviation from the optimal routing time in the worst-case scenario. Given the significant advancements and broad applications of neural combinatorial optimization methods in recent years, we present our initial attempt to combine neural approaches for solving this problem. We propose a dual multi-head cross attention mechanism to extract problem features represented by the inputted uncertainty sets. To tackle the built-in maximization problem, we derive the regret value by invoking a pre-trained model, subsequently utilizing it as the reward during the model training. Our experimental results on the robust TSP and VRP demonstrate the efficacy of our neural combinatorial optimization method, showcasing its ability to efficiently handle the robust routing problem of various sizes within a shorter time compared with alternative heuristic approaches.

## 1 Introduction

The classic Traveling Salesman Problem (TSP) and Vehicle Routing Problem (VRP) represent fundamental NP-hard combinatorial optimization challenges. In these routing problems, an agent commences from a designated node and fulfills specific task requisites. The primary objective is to minimize the total travel time or cost of access. However, the classic routing problem is mathematically simplified and idealized, lacking the necessary robustness to handle the complexities of the real world. In actual scenarios, the existence of various uncertain factors may significantly impact the final outcome. For example, considering the travel time between two nodes, it is not only affected by objective factors such as traffic conditions, road quality, and weather, but also by subjective factors such as the traveler's status and mood. When planning a trip and estimating travel time, uncertainty about the actual travel conditions may arise. To ensure a satisfactory travel experience, it is sensible to adopt a robust approach, which involves seeking a solution that is less vulnerable to adverse conditions, even in the worst-case scenario.

While there are several robust routing formulations in the literature, this study primarily focuses on classic robust routing problems featuring a _budget uncertainty set_. The underlying idea is that the uncertainty support set is represented by a set of interval data, but usually not all arcs are affected toachieve their worst values simultaneously in one realistic scenario. More concretely, the travel time between two nodes is given by a range with upper and lower values, and a parameter \(\) is used to specify the number of affected arcs. In addition, the _min-max regret_ criterion (also known as _robust deviation criterion_) is generally considered, which avoids overconservatism while considering certain degree of robustness. It aims to minimize the maximum deviation from the optimal route over the realization of edge costs in all scenarios. Detailed definition of such criterion will be provided in Section 3.

To tackle the robust routing problem, traditional robust optimization methods have been employed, including both exact and heuristic approaches. These methods treat the problem instances individually and aim to generate optimal or near-optimal robust solutions within a reasonable computation time. However, their efficiency diminishes when dealing with a large set of instances that exhibit similar interval uncertainty structures. Specifically, the uncertain travel time of edges in different instances may share comparable upper and lower limits, following certain hourly or daily patterns. To overcome these limitations, we can leverage advanced neural techniques to exploit the underlying patterns and similarities in the data, thus enabling the derivation of more efficient solutions.

In summary, this paper attempts to explore the neural combination optimization methods to address the robust routing problem with uncertain travel times characterized by budget uncertainty set. The contributions of our work can be highlighted as follows.

* We introduce the robust routing problem with the general budget uncertainty set, which covers the interval uncertainty set as a special case, and treat the problem from the perspective of deep reinforcement learning.
* We propose an end-to-end neural model to capture the features of robust routing problem, and use a pre-trained neural model to efficiently calculate the reward with respect to the worst-case scenario during training.
* We conduct extensive experiments on Robust Traveling Salesman Problem (RTSP) and Robust Capacitated Vehicle Routing Problem (RVCRP) instances. The results substantiate the efficacy of our approach in efficiently handling robust routing problems across diverse scales within shorter computation time.

The remainder of the paper is structured as follows. In Section 2, we provide an overview of existing works related to robust optimization and neural combinatorial optimization, respectively. In Section 3, taking the Robust Traveling problem as an example, we describe the problem definition of RTSP in detail. In Section 4, we elaborate the proposed neural combinatorial optimization method. In Section 5, we provide experimental results for different RTSP and RCVRP instances. In Section 6, we conclude our work with possible future directions. 1

## 2 Related Work

Robust Optimization.As early as the 1950s, Bellman and Zadeh  initiated research on uncertainty optimization. Robust optimization, as introduced by Ben-Tal et al. , adopts a conservative approach based on worst-case optimization, ensuring that the obtained solution remains feasible for any possible realization of uncertain parameters. The formulation of robust optimization models varies significantly depending on the choice of uncertainty sets and robustness standards. Uncertainty sets encompass various types, including interval sets , ellipsoid sets , polyhedron sets , budget sets , and more. Robustness standards encompass criteria such as the normal min-max standard, min-max-regret standard , adjustable robustness , etc. Considering the literature of RTSP, Montemanni et al.  proposed exact algorithms for RTSP with interval uncertainty sets, employing the robust deviation criterion. Chassen and Goerigk  introduced a recoverable robust model that allows a tour to modify a limited number of edges once a scenario becomes known. Lu et al.  proposed a heuristic method based on simulated annealing and the LKH algorithm to solve RTSP with the min-max regret criterion and interval uncertainty sets. Additionally, Hasegawa and Wu  presented an intriguing heuristic edge generation algorithm to tackle this problem. On the issue of Robust VRP, Sungur et al.  applied the MTZ model to the traditional CVRP problem and robustly modeled demand uncertainty. Subsequently, Solano-Charris et al.  introduced a meta-heuristic algorithm based on local search to address the lexicographic min-max criterion. Eufinger et al.  proposed a heuristic algorithm for solving the \(k\)-adaptability min-max-min criterion.

Neural Combinatorial Optimization.Neural combinatorial optimization methods for end-to-end solving of the Vehicle Routing Problem (VRP) can be broadly categorized into supervised learning (SL) and deep reinforcement learning (DRL) approaches . While SL requires high-quality solutions to the VRP as training labels [16; 17; 18], DRL methods are divided into value-based [19; 20; 21] and policy-based techniques. Given the complexity of routing policies, policy-based DRL approaches have become the mainstream choice, achieving notable success in various combinatorial optimization problems [22; 23; 24], including routing [25; 26; 27; 28]. In recent years, advancements have continued. For example, Zhang et al.  introduced a DRL method employing an edge-based graph attention network for solving the practical Vehicle Routing Problem with Time Windows (VRPTW). Additionally, Kwon et al.  designed a neural model utilizing cross attention to handle matrix inputs, while Zhou et al.  presented a general meta-learning framework that considers the generalization of size and distribution in vehicle routing problems. These studies collectively contribute to the advancement of neural combinatorial optimization methods, showcasing their ability to tackle various types of routing problems.

Neural Methods for Robust Optimization.In recent studies, there have been initial attempts to apply neural methods to the field of robust optimization. Jacobs et al.  employed reinforcement learning to solve min-max robust optimization problems. They precisely solved the inner minimization problem and utilized the DQN method to handle the outer problem. Dumouchelle et al.  proposed an efficient machine-learning-driven instantiation of the column-and-constraint generation algorithm for two-stage min-max-min robust optimization problems. Our approach differs in that we solely train a neural model capable of rapidly constructing high-quality solutions through inference. By focusing on training a neural model, we aim to provide a novel perspective on addressing the robust routing problem.

## 3 Problem Description

In the subsequent discussion, we employ RTSP as a paradigmatic illustration of the robust routing problem for comprehensive exposition. More detailed formulations of RTSP and RCVRP can be referenced in Appendix 7.3.

### Nominal TSP

The traveling salesman problem is a classic combinatorial optimization problem mathematically defined as follows. Given a complete symmetric graph \(G=(V,E)\), where \(V=\{1,2...,n\}\) is the node set, \(t_{ij}\), as a nominal value, denote the expected travel time of edge \((i,j) E\). Here, \(x_{ij}\) is a binary variable that indicates whether the edge \((i,j)\) is selected for the route, with 1 for selection and 0 for non-selection. The objective is to find a close route with the minimum total travel time.

For simplicity, we hereinafter use \(\) to represent the solution space, which is the set of all feasible TSP routes.

### Robust TSP

Based on historical data, it is relatively straightforward to determine the fluctuation range \([t_{ij}^{-},t_{ij}^{+}]\) of travel time for each edge \((i,j)\), where \(t_{ij}^{-}\) and \(t_{ij}^{+}\) denote the lower and upper bounds of possible values, respectively. The _interval uncertainty set_ is defined as \(_{interval}=\{t|t_{ij}[t_{ij}^{-},t_{ij}^{+}],(i,j) E\} =\{t|t_{ij}=t_{ij}^{-}+_{ij}_{ij},0_{ij} 1,(i,j)  E\}\), where \(_{ij}=t_{ij}^{+}-t_{ij}^{-}\). To provide flexibility to control the conservatism of obtained solutions, the _budget uncertainty set_ is usually considered, which is defined as \(_{budget}=\{t|t_{ij}=t_{ij}^{-}+_{ij}_{ij},0_{ij}  1,(i,j) E;_{(i,j) E}_{ij}\}\). Here, the parameter \(\) controls the number of affected edges. It is apparent that the budget uncertainty set simplifies to the interval uncertainty set when \(\) and to the deterministic version when \(=0\). Hence, the budget uncertainty set demonstrates a certain level of generalization.

To specify the objective of RTSP, the _min-max-regret_ criterion is adopted. For better understanding, we first introduce the concept of _regret_.

**Definition 3.1** (regret).: _Given a TSP solution \(x\) and a scenario \(u\), the regret value denotes the difference between the objective value of \(x\) and the optimal solution under \(u\)._

\[regret(x,u)=_{(i,j) E}t_{ij}^{u}x_{ij}-_{y}_{(i,j)  E}t_{ij}^{u}y_{ij}, \]

_where \(t_{ij}^{u}\) is the actual travel time of edge \((i,j)\) under scenario \(u\). \(y\) is the 0-1 decision variable of nominal TSP under scenario \(u\)._

**Definition 3.2** (min-max-regret criterion).: _It aims to find a TSP solution that minimizes the maximum regret over all realizations of edge costs._

\[_{x}_{u}regret(x,u), \]

_where \(\) is the uncertainty set including all possible scenarios._

From Equation (2), it is evident that RTSP is difficult to solve directly due to its triple optimality judgment. However, it is worth mentioning that in Montemanni et al. , a theorem regarding the derivation of the worst-case scenario in budget uncertainty set is proposed under the min-max-regret criterion. By leveraging this theorem, the complexity of RTSP can be significantly reduced.

**Theorem 1**.: _Given a TSP solution \(x\), the worst-case scenario in budget uncertainty set for solution \(x\) (i.e., the scenario that maximizes the regret of solution \(x\)) is the one where exactly \(\) edges with the largest upper bound in \(x\) takes its upper bound (i.e., \(_{ij}=1\) and \(t_{ij}=t_{ij}^{-}+_{ij}\)), and the remaining edges take its lower bound (i.e., \(_{ij}=0\) and \(t_{ij}=t_{ij}^{-}\))._

Proof.: See Appendix 7.1. 

Given that the interval uncertainty set is a special case of the budget uncertainty set with \(\), a corollary can be outlined as follows.

**Corollary 1**.: _Given a TSP solution \(x\), the worst-case scenario in interval uncertainty set for solution \(x\) (i.e., the scenario that maximizes the regret of solution \(x\)) is the one where all the traversed edges of solution \(x\) reach their upper bound limit and the remaining edges reach their lower bound limit._

Taking the interval uncertainty for example, let \(wc(x)\) denote the worst-case scenario for solution \(x\). Its associated travel time \(t_{ij}^{wc(x)}\) is given by:

\[t_{ij}^{wc(x)}=x_{ij}t_{ij}^{+}+(1-x_{ij})t_{ij}^{-},(i,j) E \]

Therefore, the formulation of RTSP can be simply expressed as:

\[_{x}\{_{(i,j) E}t_{ij}^{+}x_{ij}-_{y} _{(i,j) E}t_{ij}^{wc(x)}y_{ij}\}. \]

In Figure 1, we give a specific example to illustrate the solution process of RTSP with interval uncertainty. There are 4 nodes and 6 edges. Each edge is associated with an uncertainty interval (see Figure 0(a)). Assuming that a feasible solution \(x\) is "\(1 2 3 4 1\)" represented by the green edges, its nominal total time is \(5+9+4+4=22\). According to Corollary 1, we can obtain the worst-case scenario \(wc(x)\) with respect to \(x\), as indicated by the edge values in Figure 0(b). In this case, we can determine the optimal solution under the scenario \(wc(x)\), represented by the red edges in Figure 0(c), with a total time \(5+1+4+4=14\). The max-regret value for \(x\) is then calculated as \(22-14=8\). By obtaining the _max-regret_ for every feasible solution, the final optimal solution is the one with the minimum _max-regret_.

## 4 Methodology

The objective of the robust routing problem is to discover a robust route that minimizes the _max-regret_. Only when a route is complete can we calculate its _max-regret_ value. This observation bears resemblance to the concept of delayed reward in deep reinforcement learning. We propose employing the neural combinatorial optimization method to construct such route in an end-to-end manner. To elaborate on our approach, we also employ RTSP with interval uncertainty for the study.

### Solution Framework

The overall solution framework, as illustrated in Figure 2, is based on the encoder-decoder model. In this model, the encoder component receives the input data and exploits a series of neural networks to extract embeddings that represent the problem features. These embeddings are then utilized by the decoder component to compute probabilities for node selection and construct a complete solution in an autoregressive manner. Specifically, the model trains a stochastic policy \(p(|s)\) to generate a solution \(x\), or a permutation \(\) equivalently, for an instance \(s\). It is parameterized by \(\) as:

\[p_{}(|s)=_{t=1}^{n}p_{}(_{t}|s,_{1:t-1}). \]

Note that the input data consists of a dual-weighted graph, where each edge is associated with an upper value and a lower value. Taking inspiration from MatNet , we treat the input as two matrices: one composed of the upper range values ("Up_Matrix"), and the other composed of the lower range values ("Low_Matrix"). These matrices are then fed into the encoder.

Furthermore, the model requires a reward signal for adjusting the network weight parameters. Once all the decoding steps are complete, we obtain a nominal solution \(\) for the instance \(s\). The loss function is defined as:

\[L(|s)=_{p_{}(|s)}[R()], \]

where \(R()\) is the expectation of the robustness of \(\), or its (negative) reward, given by

\[R()=t^{+}()-TSP^{*}(wc()). \]

Equation (7) is originated from Equation (4), where \(t^{+}()\) is the total travel time of solution \(\) using the upper range value. \(TSP^{*}(wc())\) calculates the optimal TSP route under the worst-case scenario

Figure 1: An instance of RTSP with interval uncertainty. (a) Interval support set. (b) Worst case scenario \(wc(x)\) corresponding to route \(x\). (c) Optimal TSP solution under scenario \(wc(x)\).

Figure 2: The complete solution framework of our method. Variable \(a\) represents the action of selecting the next node according to the probability distribution. The reward \(r\) is a sparse variable that takes its max-regret value only in the complete sequence, while being set to zero for all other time steps.

with respect to solution \(\). Because a large number of samples has to be generated to train the model, we need to find a solver to tackle TSP efficiently. In fact, it is not necessary to exactly solve TSP in the training stage due to the expectation of \(R()\) and high complexity of TSP. We turn to approximate optimal solutions by using a pre-trained TSP model detailed in Section 4.3.

### Model Architecture

#### 4.2.1 Encoder

The encoder takes two matrices ("Up_Matrix" and "Low_Matrix") as the input. Each matrix can be regarded as a bipartite graph \(G=(,,D)\), where \(=(_{1},,_{n})\) is the set of nodes with outgoing edges, \(=(_{1},,_{n})\) is the set of nodes with incoming edges, and \(D=[d_{ij}]_{n n}\) gives the edge values by the corresponding matrix.

We extract the feature embeddings of \(\) and \(\), denoted as \(h_{}\) and \(h_{}\), using MatNet  (detailed architecture can be found in Appendix 7.7). To achieve this, we initialize the initial embedding \(h^{0}_{_{i}}\) for each \(_{i}\) as a zero vector, enabling the model to support variable-sized inputs. For each \(_{j}\), the initial embedding \(h^{0}_{_{j}}\) is initialized as a one-hot vector to obtain discriminative first attention layer representations. Next, these initial embeddings are combined with the corresponding matrix \(D\) and passed through \(L\) attention layers to iteratively update the embeddings. It should be noted that the encoding process for sets \(\) and \(\) is performed mutually. Specifically, for the encoding process of set \(\), \(h_{}\) serves as the query vector, \(h_{}\) acts as the key-value vector, and the matrix \(D\) is utilized for weighted fusion. Therefore, we obtain the updated embedding \(h^{}_{}\) as the output of the MatNet: \(h^{}_{}=(h_{},h_{},D)\). Conversely, for the encoding process of set \(\), we swap the roles of \(h_{}\) and \(h_{}\) and employ the transpose of matrix \(D\). Consequently, we have \(h^{}_{}=(h_{},h_{},D^{T})\).

Since there are two matrices involved, we use \(h^{+}_{}\) and \(h^{+}_{}\) to denote the output embeddings for "Up_Matrix". Similarly, we use \(h^{-}_{}\) and \(h^{-}_{}\) to denote the output embeddings for "Low_Matrix". Finally, the graph embeddings, denoted as a pair \((},})\), are obtained by fusing the features of "Up_Matrix" and "Low_Matrix". We simply perform the summation on their embeddings: \(}=h^{+}_{}+h^{-}_{}\), \(}=h^{+}_{}+h^{-}_{}\).

#### 4.2.2 Decoder

The decoder module generates a complete solution in an autoregressive manner based on the graph embeddings \((},})\) obtained from the encoder.

The key component of the decoder is the _masked multi-head cross attention_ mechanism. At each decoding step \(t\), it utilizes \(}}\) (\(j=1,,n\)) as the key/value vector (\(k/v\) for short), and a context vector \(h_{c}\) as the query vector (\(q\) for short), which is formed by concatenating \(}\) with the first and last nodes of the current solution, i.e., \(h_{c}=[}},}}}]\). The multi-head cross attention operation is then performed and mask nodes that have already been visited.

After calculating the compatibilities \(u_{(c)j}\) (\(c\) symbolizes the current context node), the decoder proceeds to compute the probabilities for the remaining unmasked nodes. This probability computation is accomplished using a single-head attention mechanism. To scale the compatibility results within the range of \([-,]\) (\(=10\)), the _tanh_ function is applied. Subsequently, a _softmax_ function is utilized to calculate the final output probability vector.

\[u_{(c)j}=*(k^{T}_{j}}{}}),& ;\\ -,&. \]

\[p_{j}=p_{}(_{t}=j|s,_{1:t-1})=}}{_{j^{ }=1}^{n}e^{u_{(c)j^{}}}}. \]

At last, the decoder selects a node according to the probability vector and proceeds to the next decoding step.
To train the model for RTSP, we adopt a combination of the classic REINFORCE  policy gradient algorithm and the POMO training approach , which primarily exploits the solution symmetry. We utilize Monte Carlo methods to sample \(n\) solution trajectories for each instance, with each trajectory using a different starting node. The reward is computed for each of these \(n\) trajectories, and the average reward of the \(n\) trajectories is used as a shared baseline within a mini-batch. To maximize the expected return \(J\), we employ gradient ascent to approximate \(J\), and the Adam optimizer  is used to optimize the policy network parameters.

In the following equations, \(_{i}\) represents the generated solution in the \(i\)-th sampled trajectory, and \(R()\) denotes the reward of the solution as defined in Equation (7).

To efficiently calculate the reward \(R()\), a pre-trained "MatNet" is used as a TSP solver. Since a TSP instance can also be represented by a bipartite graph, it is inputted into the MatNet to construct a TSP route. Multiple greedy trajectories with different starting nodes and instance augmentation are utilized to generate TSP solutions.

\[_{}J()_{i=1}^{n}(R(_{i})-b(s)) _{}_{p_{}}(_{i}|s), b(s)=_{i=1}^{n}R( _{i}). \]

Finally, Algorithm 1 outlines the training process for RTSP. In line 7, we feed the worst-case scenario corresponding to the current solution into the pre-trained TSP model, which provides us with a near-optimal TSP solution as feedback.

```
0: instance \(s\), augmentation factor \(K\), policy \(p_{}\), total number of starting nodes per instance \(n\)
0: target solution \(^{*}\), target objective value \(obj^{*}\)
1:\(\{s_{1},...,s_{K}\}\) Augment_Onehot_Embeddings(\(s\)).
2:\(\{st_{k}^{i},...,st_{k}^{n}\}\) StartNodes(\(s_{k}\)) \( k\{1,...,K\}\).
3:\(_{k}^{j}\) GreedyRollut\(st_{i}^{j},s,p_{})\) \( j\{1,...,n\}, k\{1,...,K\}\).
4:\(wc_{k}^{j}\) WorstCaseTSP(\(_{k}^{j}\)) \( j\{1,...,n\}, k\{1,...,K\}\).
5:\(R(_{k}^{j}) wc_{k}^{j}_{k}^{j}\) - PretrainedTSP(\(wc_{k}^{j}\) ) \( j\{1,...,n\}, k\{1,...,K\}\).
6:\(k_{max},j_{max} argmax_{k,j}R(_{k}^{j})\).
7:\(^{*}_{k_{max}}^{j_{max}}\).
8:\(obj^{*} wc(^{*})^{*}-Gurobi(wc(^{*}))\).
9:return\(^{*},obj^{*}\).
```

**Algorithm 2** Inference with the pre-trained TSP model

### Inference

Once the RTSP model is trained, it can be used to make fast inference on a batch of instances. Algorithm 2 presents the overall inference process.

We use the POMO inference approach to sample multi-start solutions. Instance augmentation  during inference can also be adjusted to improve the solution quality. Concretely, we employ multiple independent randomizations on the initial one-hot node embeddings \(h_{_{j}}^{0}\) for each instance to explore various paths towards the optimal solution. Since two matrices are inputted to our model, they share the same randomized one-hot vector. Ultimately, the best solution is selected from the multiple generated solutions.

Recall that our proposed method is still an approximate approach. To ensure a fair and accurate comparison of the final results during the experimental sessions, we adopt a consistent approach by utilizing an exact TSP solver, namely _Gurobi2_, to determine the target value achieved through different methods (line 8).

**Input**: : Sample set \(S\), number of epochs \(E\), number of steps per epoch \(T\), batch size \(B\), total number of starting nodes per instance \(n\)

**Initialization**: policy network parameter \(\)

```
1:for\(epoch 1\) to \(E\)do
2:for\(step 1\) to \(T\)do
3:\(s_{i}\) SampleInstance(\(S\)) \( i\{1,...,B\}\).
4:\(\{st_{i}^{1},st_{i}^{2},...,st_{i}^{n}\}\) StartNodes(\(s_{i}\)) \( i\{1,...,B\}\).
5:\(_{k}^{j}\) SampleRollut(\(st_{i}^{j},s_{i},p_{}\)) \( i\{1,...,B\}, j\{1,...,n\}\).
6:\(wc_{k}^{j}\) WorstCaseTSP(\(_{k}^{j}\)) \( i\{1,...,B\}, j\{1,...,n\}\).
7:\(R(_{k}^{j}) wc_{k}^{j}_{k}^{j}\) - PretrainedTSP(\(wc_{k}^{j}\)) \( i\{1,...,B\}, j\{1,...,n\}\).
8:\(b_{i}_{j=1}^{n}R(_{k}^{j}) i\{1,...,B\}\).
9:\(_{}J()_{i=1}^{B}_{j=1}^{n}(R( _{i}^{j})-b_{i})_{} p_{}(_{i}^{j})\).
10:\(+_{}J()\).
11:endfor
12:endfor
```

**Algorithm 1** Training process for the RTSP model Experiments

Our proposed approach was programmed with Pytorch. All the experiments were conducted on a workstation with Intel(R) Core(TM) i5-4590 CPU @ 3.30GHz, 8.0 GB RAM and TITAN Xp GPU.

### Experimental Setup of RTSP

Experimental Data.The experimental data in this study was generated following the work of Montemanni et al. . The data generation process follows a specific rule: a "R-\(N\)-\(M\)" type problem is considered, where \(N\) represents the number of nodes, and \(M\) is a range threshold (for the upper bounds). The control parameter is set to \(\). In this case, the upper bound travel time for each pair of nodes, denoted as \(t_{ij}^{+}\), is randomly selected from set \(\{0,1,2,...,M\}\). The lower bound travel time, denoted as \(t_{ij}^{-}\), is randomly chosen from set \(\{0,1,...,t_{ij}^{+}\}\). To maintain consistency, the distance values of the upper and lower bounds are then normalized using a scale factor of \(M\). In addition, we ensure the upper and lower bound values to satisfy the triangle inequality, respectively.

Hyper-parameters.During the training process, we follow specific configurations based on the scale of the problem. For small-scale instances with 20 and 30 nodes, training is conducted on a single GPU. The batch size is set to 200 and 100, respectively. We use the Adam optimizer with a learning rate \(=4 10^{-4}\). Each epoch consists of training on 1000 instances. For larger-scale instances with 40 and 50 nodes, training is performed on two and three GPUs, respectively. The batch size is adjusted to 64 and 32, respectively, to accommodate the GPU memory limitations. The learning rate for the Adam optimizer is set to \(=2 10^{-4}\). Each GPU handles 400 training instances per epoch. For the built-in TSP models, they are trained for 2000 epochs to ensure their effectiveness and convergence.

Baselines.We have collected typical algorithms for solving RTSP as our baselines. These algorithms can be further categorized into exact and heuristic approaches.

* **Exact approaches:** Branch-and-Cut (BC) and Benders Decomposition (BD) are exact algorithms proposed by Montemanni et al.  for solving RTSP. We have implemented these algorithms using the Python programming language and the Gurobi optimizer. For small-scale problems, such as those with 20 nodes, these two algorithms exhibit fast solution speeds. However, as the problem size increases, for example, with 50 nodes, the computation time required to obtain a solution is significantly increased.
* **Heuristic approaches:** There are three heuristic baselines introduced for comparisons: heuristic algorithms based on simulated annealing (SA-based) , iterated dual substitution method (iDS) , and edge generation algorithm (EGA) . To ensure fairness, we utilize the source codes provided by the authors, with the exception of SA-based, which we re-implemented ourselves. Furthermore, we maintain most of the original settings of these algorithms.

The time limit of all above algorithms are set to 3600 seconds for every instance, except that the SA-based method has a time limit of \(15n\) due to the limitation of repeated calls of the LKH algorithm. Nevertheless, some algorithms may stop earlier when reaching their termination criteria.

For the experimental setting of RCVRP, please refer to Appendix 7.5.

### Results and Discussions

In the following reported tables, "Obj" represents the average objective value accurately computed using _Gurobi_ to solve the worst-case routing scenario. "Gap" indicates the relative difference between the objective value obtained by each algorithm and the best-known optimal value, expressed as a percentage: \(Gap=}{Obj_{best}} 100\%\). "Time" represents the average solving time per instance.

Comparison Results of RTSP.Table 1 presents the main results of our trained model and other methods on randomly generated instances. The methods are categorized into three groups: exact methods, heuristic methods, and our proposed methods. The results of our methods are reported

[MISSING_PAGE_EMPTY:9]

strong generalization capability. Conversely, the models trained on smaller scales exhibit weaker generalization capability.

Ablation Studies of RTSP.We investigate the impact of different designs for feature encoding of the uncertainty support set. We explore three encoding methods, namely "ours", "blended"(a blended matrix is computed by the weighted sum of the upper and lower bound matrices, which is then encoded by MatNet) and "fusion"(two distance matrices and attention scores are fused through an MLP in the multi-head mixed score attention layer of the encoder), with their architectures depicted in Figure 5 in Appendix 7.4.

We compare these encoding methods on R-40-100 with 20 random instances. As shown in Table 2, our method outperforms both "blended" and "fusion" methods in all cases, including scenarios without instance augmentation, as well as those with \( 8\) and \( 128\) instance augmentation.

Comparison Results of RCVRP.Table 3 shows the comparison results between our method and the exact algorithm. The results are all obtained using the Gurobi solver in a uniform manner. To our knowledge, this specific type of RCVRP has never been discussed before. The results show that our algorithm still achieves high solution quality and has a clear advantage in the solution time of RCVRP. On a 20-node scale, our gap is around 0.5%. On a 50-node scale, our gap is below 4.5%. In terms of time consumption, we only need a few tenths of a second to dozens of seconds.

## 6 Conclusions

This paper focuses on addressing the robust routing problem with uncertain travel times, relevant to real-world scenarios. We introduce a neural combinatorial optimization approach, employing an end-to-end model with attention mechanism for automatic policy learning. Leveraging a pre-trained model, experimental results demonstrate that our method can generate near-optimal solutions much faster than exact and heuristic approaches. However, due to hardware memory limitations and constraints of the POMO algorithm used in training, our method is currently limited in scale and to problems satisfying the max-regret theorem. Moving forward, we aim to expand our approach to handle larger-scale problems and tackle a broader range of robust optimization problems.