# PRODIGY: Enabling In-context Learning Over Graphs

Qian Huang\({}^{1}\)

qhwang@cs.stanford.edu

&Hongyu Ren\({}^{1}\)

hyren@cs.stanford.edu

&Peng Chen\({}^{1}\)

pengc@stanford.edu

&Gregor Krzmanc\({}^{2}\)

gregor.krzmanc@ijs.si

&Daniel Zeng\({}^{1}\)

dzeng@cs.stanford.edu

&Percy Liang\({}^{1}\)

pliang@cs.stanford.edu

&Jure Leskovec\({}^{1}\)

jure@cs.stanford.edu

\({}^{1}\)Stanford University

\({}^{2}\) University of Ljubljana

indicates equal contribution.

###### Abstract

In-context learning is the ability of a pretrained model to adapt to novel and diverse downstream tasks by conditioning on prompt examples, without optimizing any parameters. While large language models have demonstrated this ability, how in-context learning could be performed over graphs is unexplored. In this paper, we develop **P**retraining **O**ver **D**iverse **I**n-**C**ontext **G**raph **S**ystems (PRODIGY), the first pretraining framework that enables in-context learning over graphs. The key idea of our framework is to formulate in-context learning over graphs with a novel _prompt graph_ representation, which connects prompt examples and queries. We then propose a graph neural network architecture over the prompt graph and a corresponding family of in-context pretraining objectives. With PRODIGY, the pre-trained model can directly perform novel downstream classification tasks on unseen graphs via in-context learning. We provide empirical evidence of the effectiveness of our framework by showcasing its strong in-context learning performance on tasks involving citation networks and knowledge graphs. Our approach outperforms the in-context learning accuracy of contrastive pretraining baselines with hard-coded adaptation by 18% on average across all setups. Moreover, it also outperforms standard finetuning with limited data by 33% on average with in-context learning.

## 1 Introduction

In-context learning is a novel and one of the most intriguing capabilities of language models . It refers to the capability of a pretrained model to perform novel and diverse tasks directly at the prediction time when prompted with just a few examples, without the need to update the model weights. For example, a person may describe the new task (_e.g._, question answering, machine translation, or code generation) using natural language and demonstrate it to the language model with several prompt examples. The language model then directly without any model training or finetunning performs the task.

However, how to enable in-context learning for diverse graph machine learning tasks, such as identifying misinformation spreader in social networks  and product suggestions across online e-commerce websites , still remain unexplored and challenging. An in-context learner for graphs should be able to solve novel tasks on novel graphs. For example, give music productrecommendations on Spotify when being trained on Amazon purchasing graph. The first challenge here is how to formulate and represent node-, edge- and graph-level tasks over graphs with a unified task representation that allows the model to solve diverse tasks without the need for retraining or parameter tuning. In other words, the key challenge is: what is an analog of natural language prompting for graph machine learning tasks? The second challenge is how to design model architecture and pretraining objectives that enable models to achieve in-context learning capability across diverse tasks and diverse graphs in the unified task representation. Existing graph pretraining methods  only aim to learn a good graph encoder and require fine-tuning to adapt to different tasks, while existing meta-learning methods over graphs  only aim to generalize across different tasks within the same graph. On the other hand, achieving in-context learning requires tackling the more difficult setting of generalizing across the graphs _and_ tasks without finetuning.

Here we present a general approach for solving these two challenges for classification tasks on graphs: (1) _prompt graph_, an in-context graph task representation, and (2) **P**retraining **O**ver **D**ivers **I**n-Context **G**raph **S**ystems (PRODIGY), a framework for pretraining an in-context learner over prompt graphs.

We propose _prompt graph_ (Figure 1) to provide unified way to represent diverse node-, edge- and graph-level machine learning tasks. Prompt graph first contextualizes the input nodes/edges on which we make prediction (including both the prompt examples and the queries), then connects them with additional label nodes, such that the prompt examples are interconnected with queries. Such a unified representation allows us to specify diverse graph machine learning tasks to the same model regardless of the graph size.

PRODIGY then designs both model architecture and pretraining objectives with the prompt graph in-context task formulation, such that the model is pretrained to solve tasks across a wide range of tasks and graphs, and can continue to do so out-of-the-box. We design a graph architecture that utilizes graph neural networks to learn node/edge representations and an attention mechanism to communicate over prompt graph. Furthermore, we propose a family of in-context pretraining objectives over prompt graph. In particular, this includes a novel self-supervised pretraining task, _neighbor matching_, where we classify which neighborhood a node or edge belongs to.

We use PRODIGY framework to pretrain on citation networks (MAG240M ) and knowledge graphs (Wiki ). We then show that such model (without any retraining) provides strong performance on in-context paper category classification and knowledge graph completion tasks on novel graphs it was never trained on (arXiv, Concept, FB15K-237, NELL) . Specifically, PRODIGY improves upon contrastive pretraining baselines with hard-coded adaptation for in-context setup by 18% on average across all datasets and numbers of labels to classify among. Moreover, it also outperforms standard finetuning with limited data by 32.6% on average with in-context learning. It even outperforms the state-of-the-art few-shot learning methods trained on the testing downstream graph with pure in-context learning. Finally, we further demonstrate that our methods achieve increasingly higher performance with more examples in the prompt even beyond what it was pretrained with, which shows that the model really learns to learn from context.

Figure 1: In-context few-shot prompting over graphs with prompt graph for _edge classification_ in PRODIGY. (A) Given the source graph \(\), we provide prompt examples \(\) that consist of the input head/tail nodes and their labels, as well as the queries. (B) For each datapoint from both prompt examples and the queries, we first construct its data graph \(^{}\) by retrieving context from the source graph \(\). (C) Then we create a task graph to capture the connection between each datapoint and each label, which includes a data node \(v_{x}\) for each datapoint and a label node \(v_{y}\) for each label in \(\). Each pair of data and label nodes are connected with edge attributes corresponding to their binary labels.

In-context Learning over Graphs

In this work, we specifically focus on in-context learning for node and edge classification tasks on graphs with few-shot prompting, which are the forms of the most standard and important graph machine learning tasks. In this section, we introduce the concrete classification tasks over graphs and few-shot prompting over them with our in-context task representation prompt graph.

### Classification Tasks over Graphs

We define a graph as \(\!=\!(,,)\), where \(\), \(\), \(\) represent the set of nodes, edges and relations. An edge \(e\!=\!(u,\!r,\!v)\!\!\) consists of a subject \(u\!\!\), a relation \(r\!\!\) and an object \(v\!\!\).

Given a set of classes \(\), a standard classification task is predicting the labeling \(y\!\!\) of each input \(x\!\!\). A node-level classification task is similar but each input is a single node in \(\), _i.e._, \(\!=\!\), with the additional auxiliary information of the entire graph \(\). For example, over a citation network consisting of authors and papers, a node-level classification task could be predicting the primary institution of each author. Similarly, an edge-level classification task is predicting the best labeling of potential edges formed by any pair of nodes, _i.e._, \(\!=\!\!\!\). A common special case is that the classes are the same as the relations \(\!=\!\), such as predicting the relation between entities over knowledge graphs. More generally, the same definitions can be extended to subgraph and graph-level classification tasks, where the input data \(x\) may consist of more nodes and edges, and essentially represents a subgraph of \(\).

Since we are interested in tasks of different types/levels, we design a unified formulation, where the space of the input \(\) consists of graphs, _i.e._, \(x_{i}\!\!,\!x_{i}\!=\!(_{i},_{i},_{i})\). For node classification task, \(_{i}\) only consists of the input node that we aim to make predictions on, _i.e._, \(|_{i}|\!=\!1\) and \(|_{i}|\!=\!0\); for edge classification task, it consists of (subject, object) pair, _i.e._, \(|_{i}|\!=\!2\) and \(|_{i}|\!=\!0\).

### Few-shot Prompting

Here we define in-context learning setup for classification tasks over graphs with few-shot prompting. For a \(k\)-shot prompt with a downstream \(m\)-way classification tasks with \(||\!=\!m\) classes, we use a small number of input-label pairs \(\!=\!\{(x_{i},\!y_{i})\}_{i=1}^{m\!\!k}\) as _prompt examples_ of the task specification, such that there are \(k\) input-label pairs with label \(y\) for each \(y\!\!\). We also give the model a set of queries \(\!=\!\{x_{i}\}_{i=1}^{n}\) that we want to predict labels for.

We emphasize an important difference of classification tasks on graphs from language and other modalities. Namely, since all input datapoints are nodes/edges/subgraphs from the larger source graph \(\), this graph contains critical information and provides contexts for the inputs, _e.g._, the local neighborhood of the input node that we aim to predict. Hence, besides \(\) and \(\), we also need to include the source graph \(\) in the prompt.

Given the above information as the prompt, the pretrained model should be able to directly output the predicted labels for each datapoint in \(\) via in-context learning. Thus, how to formulate the information as a unified and efficient form of input poses a unique challenge and affects the model architecture. Below, we present our in-context task formulation prompt graph designed to do so.

### Prompt Graph Representation

Inspired by , we propose prompt graph as a unified representation of a \(k\)-shot prompt over graphs for an \(m\)-way classification task (Figure 1). A prompt graph is composed of _data graphs_ and a _task graph_:

**Data graph.** To construct a prompt graph, we first perform contextualization of each datapoint \(x_{i}=(_{i},_{i},_{i})\) in \(\) and \(\) in the source graph \(\) to form data graphs. The goal is to gather more information about the \(x_{i}\) from the source graph \(\) without having to represent the entire source graph explicitly. There are many potential designs for contextualization, from explicitly retrieving subgraphs to implicitly using embedding-based methods. Here we construct data graph \(^{}_{i}\) by sampling \(k\)-hop neighborhood of \(_{i}\) in \(\). In other words, \(^{}_{i}=(^{}_{i},^{ }_{i},^{}_{i})_{i=0}^{k}(_{i},,i)\), where \(_{i}^{}_{i}\), \(_{i}^{}_{i}\), \(_{i}^{}_{i}\), and Neighbor is a function that returns the exact \(i\)-hop neighbors of each node in \(_{i}\). With this data graph \(^{}_{i}\), we call the node set that corresponds to the nodes in \(_{i}\) before contextualization _input node set_, _e.g._, the target node to classify in node classification task and the pair of nodes in link prediction task.

**Task graph.** After contextualizing each datapoint to a data graph \(^{}\), we then construct task graph \(^{}\) to better capture the connection and relationship among the inputs and the labels. For each data graph \(^{}_{i}\) from the previous stage, we have a _data node_\(v_{x_{i}}\) that represents each input; for each label, we have a _label node_\(v_{y_{i}}\). So overall, a task graph contains \(m k+n\) data nodes (\(m k\) prompt examples and \(n\) queries) and \(m\) label nodes, as shown in Figure 1.

Now we add edges between the data nodes and the label nodes: For the query set, since we do not know the labels of each graph, we add single directional edges from all label nodes to each datapoint in the query set, _i.e._, each query data node \(v_{x_{i}}\) will be connected to all the label nodes as shown by the yellow edges in Figure 1; For the prompt examples, we connect each data node to all the label nodes, where the edge with the true labels is marked as T while the others are marked as F, as shown by the green and red edges in Figure 1 respectively.

Together we propose the prompt graph that consists of both data graphs and a task graph. Prompt graph effectively captures the relationship between input data \(x_{i}\) and the label \(y_{i}\) through the context captured in data graph \(^{}_{i}\) and the data node \(v_{x_{i}}\) and the label node \(v_{y_{i}}\) in the task graph \(^{}\). It is also possible to extend prompt graph to non-classification tasks and free-form text prompting. For example, for numerical regression (e.g. molecular energy prediction) and other free-form generation tasks (e.g. text generation), one can extend our task graph to contain vector values on the edges to represent \(y_{i}\). Then different label nodes would represent different prediction tasks. To support more general forms of prompting, one can include additional task information and instructions in the feature of label nodes, and additional description paired with each datapoint in the global feature in data graph.

## 3 Pretraining to Enable In-context Learning

So far given a few-shot prompt for a classification task over graphs, we have defined a prompt graph representation for it that captures relationships between the prompt examples, queries, and labels. Now we need to design a pretraining strategy that can pretrain a generalizable model capable of in-context learning. We assume access to a pretraining graph \(_{}\) that is independent of the source graph \(\) for the downstream task.

In this section, we introduce PRODIGY, a general pretraining framework over \(_{}\) that is designed specifically for enabling in-context learning over downstream classification tasks without any additional finetuning steps on arbitrary graphs. Our framework PRODIGY has two main components: model architecture over prompt graph and in-context pretraining objectives.

### Message Passing Architecture over prompt graph

Next we introduce our model architecture over the prompt graph consisting of two submodules:

**Data graph Message Passing.** First, we apply a message passing GNN module \(M_{}\) that learns node representation \(E\) for nodes in each \(^{}\).

\[E^{|^{}| d}=M_{}(^{ })\] (1)

where \(d\) is the embedding dimension. \(M_{}\) can be implemented in multiple ways, such as using Graph Convolutional Network (GCN) or Graph Attention Networks (GAT) [11; 18].

To read out a single embedding \(G_{i}\) for each data graph, we perform another aggregation step to pool node embeddings. For node classification tasks, we take the updated node representation of the single input node that we aim to predict, _i.e._:

\[G_{i}=E_{_{i}}\] (2)

For link prediction tasks, we concatenate the pair of nodes, which we want to predict a link between, as well as a max pooling over all node representations following  with an additional linear projection layer at the end to convert the embedding size back to \(d\).

\[G_{i}=W^{T}(E_{v_{1}_{i}}||E_{v_{2}_{i}}||(E_ {i}))+b,\] (3)

where \(||\) represents concatenation, \(W^{3d d}\) is a learnable weight matrix and \(b\) is the learnable bias.

**Task graph Message Passing.** Note in the previous step there is no communication between different datapoints in \(\) and \(\). Now we would like to communicate between them via message passing overthe task graph \(^{}\). We apply another GNN \(M_{}\) on the task graph to obtain updated representation of data nodes and label nodes.

\[H=M_{}(^{})\] (4)

where H is the obtained embedding per node. The initial embedding of data node \(v_{x_{i}}\) is \(G_{i}\) and the embedding of label node \(v_{y_{i}}\) can either be initialized with random Gaussian or additional information available about the labels. Each edge also has two binary features \(e_{ij}\) that indicate 1) whether the edge comes from an example or a query, and 2) the edge type of T or F. For \(M_{}\), we use an attention-based GNN, where each node performs attention to other nodes at each layer. See the architecture detail in the appendix C.

The goal of this step is to learn a better representation of the label nodes using the support examples and propagate label information back to the support and query graph representation for a more task-specific graph representation.

**Prediction Read Out.** Finally, we readout the classification logits \(O_{i}\) by taking cosine similarity between each pair of query graph representation and label representation, as in contrastive learning:

\[O_{i}=[(H_{x_{i}},H_{y}), y]\] (5)

Note that we could perform the two message passing steps for multiple rounds to have more communication between \(x_{i}\) and learn a better representation. One key insight is that different in-context prompt examples share information through the label nodes, which can be seen as an information bottleneck.

### In-context Pretraining Objectives

In order to pretrain the model for solving the downstream graph tasks in-context, we propose a set of in-context pretraining objectives. The goal is to pretrain the graph model using a large pretraining graph \(_{}\) independent of the downstream task graph, such that the model can directly be applied on downstream tasks with in-context learning.

Our main design principle is that we formulate each pretraining objective in an in-context learning way. Most previous graph pretraining objectives only pretrain a shared graph encoder to perform various tasks with task-specific heads, so they require finetuning for another task-specific head over each downstream task. In contrast, we explicitly construct in-context pretraining tasks in prompt graph form and pretrain the model to solve diverse tasks in-context with the same set of weights, such that it can perform in-context learning directly over downstream tasks.

Below, we detail our proposed family of in-context pretraining objectives in terms of three components: 1) pretraining task generation, including few-shot prompt (_i.e._ Figure 1(A)) and corresponding labels, 2) converting generated few-shot prompt to prompt graph format (_i.e._ Figure 1(B,C)) with augmentation, and 3) pretraining loss over the generated prompt graph.

#### 3.2.1 Pretraining Task Generation

We propose two methods to generate pretraining tasks from the pretraining graph \(_{}\) in the form of few-shot prompts: _neighbor matching_ and _multi-task_.

**Neighbor Matching.** Given the pretraining graph, we construct self-supervised in-context pretraining tasks with the goal of classifying which local neighborhood a node belongs to, where each local neighborhood is defined by the example nodes belonging to that neighborhood. Intuitively, we sample multiple subgraphs from the pretraining graph \(_{}\) as the local neighborhoods, and we say a node belongs to a local neighborhood if it is in the sampled subgraph.

Formally, we denote \(\!_{k,m}\) as a sampler that generates \(m\)-way neighbor matching tasks, where each includes a \(k\)-shot prompt (\(_{}\),\(\!\),\(\!\)) (see subsection 2.2 and Figure 1(A)) and the labels of the queries. For simplicity of the notation, we will include the labels in \(\!\) as paired with the inputs:

\[(_{},\!,\! )\!_{k,m}(_{})\] (6)

To generate these, we first sample \(m\) nodes from the pretraining graph \(_{}\), where each of the sampled node corresponds to one class.

\[=\{c_{i}\}_{i=1}^{m} c_{i}(_{ })\] (7)

[MISSING_PAGE_FAIL:6]

the data graphs as inspired by Contrastive Learning. The key insight is to corrupt data graph such that the pretrained model learns representation invariant to various corruptions.

Here we demonstrate how we adopt graph augmentation techniques during the construction of prompt graph from a few-shot prompt generated from \(_{}\). We first still sample the \(k\)-hop neighbor subgraph of each sample \(_{i}\) in the prompt examples and queries: \(_{i}^{}\!\!_{j=1}^{k}\!( _{i},_{},j)\). Then we adopt the following two augmentation techniques to create augmented data graph \(_{i}^{aug}\), including (1) node dropping, and (2) node feature masking . For node dropping, we randomly drop nodes from the \(k\)-hop neighbor subgraph and take the remaining graph as \(_{i}^{aug}\!=\!(_{i}^{})\). For node feature masking, we randomly mask the feature of a subset of nodes with value zero to create \(_{i}^{aug}\!=\!(_{i}^{})\). With the augmented data graphs for each datapoint in the prompt examples and the queries, we may accordingly construct the task graph \(^{}\) by creating a data node \(v_{x_{i}}\) for each augmented data graphs and the label node \(v_{y_{i}}\) as introduced in subsection 2.3. Combining data graphs with task graph, we obtain the prompt graph formulation with augmentation for the few-shot prompt.

#### 3.2.3 Pretraining Loss

Finally, we pretrain the model with the cross-entropy objectives over generated prompt graphs:

\[(_{},_{}, _{}) \!\!\!M_{k,m}(_{})\] (15) \[(_{},_{}, _{}) \!\!\!T_{k,m}(_{},f)\] (16) \[ \!=\!}_{x_{i}_{}} \!\!}(O_{,i},y_{,i})\!+\!}_{x_{i}_{}}\!\!}(O_{ ,i},y_{,i})\] (17)

where \(O_{,i}\) is the logits produced by our model over input of \(_{i}^{aug}\) and \(^{}\) produced from \(_{}\), as described in subsection 3.1; \(y_{,i}\) is the corresponding label of \(x_{i}\) in \(_{}\); Similar for MT terms.

## 4 Experiments

### Experimental Setup

Datasets.For pretraining, we use two datasets: MAG240M, a large scale citation network with 122 million nodes and 1.3 billion edges; and Wiki, a knowledge graph (KG) constructed from Wikipedia  with 4.8 million nodes and 5.9 million edges. After the model is pretrained we evaluate its in-context learning capability on diverse classification tasks over 4 graphs: arXiv, ConceptNet, FB15K-237, NELL. We use subsets of knowledge graph datasets same as in [10; 23]. For arXiv, the downstream task is an \(m\)-ways node classification task that predicts the paper category. For knowledge graph datasets (ConceptNet, FB15K-237, NELL), the downstream task is an \(m\)-ways relation type classification task that predicts the relationship connecting the two input nodes.

Evaluation.We pretrain our model on MAG240M and Wiki and then we evaluate the in-context learning performance on differnt downstream datasets that belong to similar domain as the pretraining dataset (e.g., pretraining on Wiki and evaluating on ConceptNet, FB15K-237, and NELL). Each of the downstream classification datasets has its original train, validation, and test splits. To simulate the situation where there are a limited amount of labeled data in the downstream task, we randomly select 10 nodes (or edges) from the training split per way as the prompt examples with known labels. Then, we construct a \(k\)-shot prompt for test nodes (or edges) from the test split by randomly selecting \(k\) examples per way from these available examples. This allows us to test the model's ability to learn in-context relationships and perform well on classification tasks with truly limited known labels. By default we use \(k\!=\!3\) shots in our experiments.

Methods and Baselines.We consider three versions of our proposed framework PRODIGY: 1) PG-NM, which uses neighbor matching task for pretraining; 2) PG-MT, which employs multi-task pretraining; and 3) full PRODIGY, which combines the previous two methods. To augment the data, we use DropNode and MaskNode augmentations with a probability of 0.5 per node for each method.

We consider three baselines for comparison: 1) NoPretrain, which uses a randomly-initialized model with the same architecture as our pretrained models; 2) Contrastive , which employs a standard contrastive learning method with the same augmentation as above and uses a hard-coded nearest neighbor algorithm to adapt to our in-context learning setting. Specifically, we classify the query by comparing its pretrained embedding against the average embedding of the example inputs of each class. 3) Finetune , which trains an additional linear classification head on top of the graph encoder pretrained with contrastive learning, following the standard practice.

### In-Context Learning Results

We first evaluate the in-context learning capability for node classification and link prediction with various numbers of ways (i.e. number of classes to classify among). The results are presented in Table 1 and 2 for node classification and link prediction.

Strong in-context learning performance.The results demonstrate that our method PRODIGY consistently outperforms all other baselines in this setting. It achieves the highest average accuracy across all ways on arXiv, with an average improvement of 28.6% and up to 48% over the best baseline of Contrastive. Over KGs, PRODIGY also outperforms contrastive learning on average by 12.2%. PRODIGY also demonstrates similar-to-better performance compared to Finetune, which requires additional training on downstream tasks. On arXiv, we see an average improvement of 77.7% over all ways. This can be attributed to the diverse set of pretraining tasks incorporated in PRODIGY, which allows the model to avoid overfitting on specific tasks and learn in-context.

Self-supervised pretraining PG-NM bridges different tasks.In particular, we highlight that the pure self-supervised pretraining method PG-NM produces significantly higher in-context learning performance over arXiv than baselines, even though the model is pretrained on different tasks from the downstream task. This advantage can be further leveraged by pretraining on even larger-scale unlabeled datasets. On the other hand, PG-MT follows the supervised pretraining objective that directly resembles the format of downstream tasks. On KGs, this allows PG-MT to adapt better to downstream task even sometimes compared to the full PRODIGY ( marked by underlines), while PG-NM might have overfitted to the incorrect strategy of only identifying co-occurring nodes. Yet, PG-MT performs worse on arXiv potentially due to less diversity. The full PRODIGY, which ensembles the two, achieves more diversity than either single task and therefore achieves the best performance over both worlds.

Outperforming meta-learning method trained on test graph.Finally, we compare PG-NM in-context learning performance against state-of-the-art meta-learning method TENT  over the downstream test graph arXiv. We evaluate the average 3-ways classification tasks performance over only test labels, since TENT trains on train labels from arXiv. PG-NM achieves \(69.07\%\) over the \(65.13\%\) of TENT, even though PG-NM has never been trained on any paper category classification

   Classes & NoPretrain & Contrastive & PG-NM & PG-MT & PRODIGY & Finetune \\ 
3 & 33.16 \(\) 0.30 & 65.08 \(\) 0.34 & 72.50 \(\) 0.35 & 65.64 \(\) 0.33 & **73.09 \(\) 0.36** & 65.42 \(\) 5.53 \\
5 & 18.33 \(\) 0.21 & 51.63 \(\) 0.29 & 61.21 \(\) 0.28 & 51.97 \(\) 0.27 & **61.52 \(\) 0.28** & 53.49 \(\) 4.61 \\
10 & 9.19 \(\) 0.11 & 36.78 \(\) 0.19 & 46.12 \(\) 0.19 & 37.23 \(\) 0.20 & **46.74 \(\) 0.20** & 30.22 \(\) 3.77 \\
20 & 4.72 \(\) 0.06 & 25.18 \(\) 0.11 & 33.71 \(\) 0.12 & 25.91 \(\) 0.12 & **34.41 \(\) 0.12** & 17.68 \(\) 1.15 \\
40 & 2.62 \(\) 0.02 & 17.02 \(\) 0.07 & 23.69 \(\) 0.06 & 17.19 \(\) 0.08 & **25.13 \(\) 0.07** & 8.04 \(\) 3.00 \\   

Table 1: In-context learning accuracy (%) on arXiv paper category classification on 500 sampled test tasks with 3-shot prompts. PRODIGY was pretrained on MAG240M and is then applied in-context to arXiv, which has completely different structure and a different set of paper categories. PG-NM and PG-MT are ablations of PRODIGY.

   Classes & NoPretrain & Contrastive & PG-NM & PG-MT & PRODIGY & Finetune \\ 
4 & 30.4 \(\) 0.63 & 44.01 \(\) 0.61 & 46.94 \(\) 0.61 & 51.78 \(\) 0.63 & **53.97 \(\) 0.63** & 53.85 \(\) 9.29 \\ 
5 & 33.54 \(\) 0.61 & 81.35 \(\) 0.58 & 80.35 \(\) 0.57 & 89.15 \(\) 0.46 & **88.02 \(\) 0.48** & 82.01 \(\) 12.83 \\
10 & 20.0 \(\) 0.35 & 70.88 \(\) 0.48 & 71.68 \(\) 0.45 & 82.26 \(\) 0.40 & **81.1 \(\) 0.39** & 71.97 \(\) 6.16 \\
20 & 9.2 \(\) 0.18 & 59.8 \(\) 0.35 & 59.9 \(\) 0.35 & 73.47 \(\) 0.32 & **72.04 \(\) 0.33** & 64.01 \(\) 4.66 \\
40 & 2.5 \(\) 0.08 & 49.39 \(\) 0.23 & 46.82 \(\) 0.21 & 58.34 \(\) 0.22 & **59.58 \(\) 0.22** & 57.27 \(\) 3.33 \\ 
5 & 20.95 \(\) 0.52 & 83.38 \(\) 0.5 & 82.39 \(\) 0.53 & 85.26 \(\) 0.48 & **88.09 \(\) 0.43** & 87.22 \(\) 12.75 \\
10 & 11.0 \(\) 0.26 & 74.54 \(\) 0.46 & 75.14 \(\) 0.43 & 78.15 \(\) 0.41 & **82.47 \(\) 0.39** & 71.90 \(\) 5.90 \\
20 & 5.34 \(\) 0.13 & 65.68 \(\) 0.34 & 65.68 \(\) 0.34 & 68.38 \(\) 0.33 & **74.72 \(\) 0.31** & 66.19 \(\) 8.46 \\
40 & 2.5 \(\) 0.06 & 56.7 \(\) 0.23 & 54.91 \(\) 0.22 & 51.24 \(\) 0.25 & **60.04 \(\) 0.23** & 55.06 \(\) 4.19 \\   

Table 2: In-context learning accuracy (%) on ConceptNet, FB15K-237 and NELL (from top to bottom) on 500 sampled test tasks with 3-shot prompts. PRODIGY was pretrained on Wiki, which has completely different node and relation types from graphs it is then applied on in-context.

task during pretraining. This demonstrates the power of self-supervised pretraining over large amount of data compared to supervised meta-learning over the limited labeled data (train labels in arXiv).

### Ablations

Aside from PG-NM and PG-MT, we also conduct ablation studies on various configurations of the self-supervised objective PG-NM as described in 3.2. See the full results in Appendix E and Table 4. Overall, the ablation results reveal that using all of the elements together results in the highest performance. Specifically, attribute prediction (see appendix A) has the greatest impact on PG-NM's performance, as its removal results in an average 7% drop across all ways, shown in the 'No-Attr' column.

### Evaluation using different numbers of in-context examples

We investigate our method's ability to learn from the context by analyzing its performance as the number of prompt examples changes. Figure 3 shows the result on ConceptNet. See full results on other datasets in Appendix F. As the number of prompt examples increases, the margin of our proposed PG models over the baseline increases. This supports the hypothesis that the PRODIGY models can more effectively learn the unknown task by reasoning about the common characteristics of prompt examples.

### Scaling with Data Size

Finally, we explore how the model scales with more pretraining data. The result on arXiv in a 5-ways setting is illustrated in Figure 4. It shows that the Contrastive baseline saturates quickly and its performance fluctuates as trained over more pretraining data. Instead, PRODIGY consistently shows an improvement in performance as more data is pretrained on, since the pretraining tasks are harder and more diverse.

## 5 Related Work

### In-context Learning of Large Language Models

Pretrained large language models can make predictions for diverse downstream tasks directly by prompting with a few examples of the task or more generally any textual instructions. This ability is called in-context learning. Comparing to previous language encoder models like BERT , it drastically reduces the adaptation effort comparing to fine-tuning, and has demonstrated strong performance in a broad range of models and tasks. Our work extends this success similarly to graph data compared to the current pretrained graph encoders, such that a single pretrained model can be adapted to different classification tasks over different graphs without additional fine-tuning but only few-shot prompting.

### Pretraining on Graphs

There are many existing works on pretraining over graphs[7; 24; 8; 13]. However, they all follow the general paradigm of learning a good graph encoder that can perform certain pretraining tasks, such as masked feature prediction  and paired graph classification . To adapt to any downstream tasks, it then requires finetuning a classification head on top of the encoder with large amount of task specific data for each downstream task. In contrast, we explore pretraining methods for inducing general in-context learning ability, such that the pretrained model can be directly used for various downstream tasks with no gradient updates.

### Meta Learning on Graphs

Another closely related line of works is meta-learning methods over graphs that aim to address standard few shot learning problems over graphs[19; 9; 3; 17; 25]. However, existing meta-learning methods are only designed and tested for generalizing across different tasks on the same graph: the methods are trained on a set of training tasks on a graph, then tested over a disjoint but similar set of test tasks over the same graph. They are shown to exhibit optimal performance only when trained on similar curated tasks . Different from this, our work explicitly focuses on the in-context learning performance, i.e. model performance on graphs and tasks completely different from the pretraining without additional fine-tuning.

## 6 Conclusion

We introduce PRODIGY, the first framework that enables in-context learning on graphs. A model that is pretrained using PRODIGY can seamlessly execute a new classification task over new graphs represented by prompt graph. It markedly surpasses the performance of other baseline models with in-context learning, even those that employ finetuning, in both the node and edge classification tasks.