# How Diffusion Models Learn to Factorize and Compose

Qiyao Liang  Ziming Liu  Mitchell Ostrow  Ila Fiete

Massachusetts Institute of Technology

{qiyao,zmliu,ostrow,fiete}@mit.edu

###### Abstract

Diffusion models are capable of generating photo-realistic images that combine elements which likely do not appear together in the training set, demonstrating the ability to _compositionally generalize_. Nonetheless, the precise mechanism of compositionality and how it is acquired through training remains elusive. Inspired by cognitive neuroscientific approaches, we consider a highly reduced setting to examine whether and when diffusion models learn semantically meaningful and factorized representations of composable features. We performed extensive controlled experiments on conditional Denoising Diffusion Probabilistic Models (DDPMs) trained to generate various forms of 2D Gaussian bump images. We found that the models learn factorized but not fully continuous manifold representations for encoding continuous features of variation underlying the data. With such representations, models demonstrate superior feature compositionality but limited ability to interpolate over unseen values of a given feature. Our experimental results further demonstrate that by training with independent factors of variation, diffusion models can attain compositionality with few compositional examples, suggesting a more efficient way to train DDPMs. Finally, we connect manifold formation in diffusion models to percolation theory in physics, offering insight into the sudden onset of factorized representation learning. Our thorough toy experiments thus contribute a deeper understanding of how diffusion models capture compositional structure in data.

## 1 Introduction

Large-scale text-to-image generative models can produce photo-realistic synthetic images that combine elements in a novel fashion (compositional generalization). Nonetheless, the ability of models to do so, as well as their failure modes, are not well-studied systematically in large diffusion models due to the size of the model and the complex and high-dimensional nature of their training datasets. Factorization and compositional generalization have been theoretically and empirically investigated in many deep generative models before . However, these studies have not reached a unanimous conclusion on whether factorized representations learned in the intermediate layers of the model promote compositional generalization in the model performance. Specifically, several studies  have found little correlation between factorization and compositionality, contrary to others that suggest that factorization promotes compositionality . As a result, there is no consensus on the exact mechanism of compositionality and how models gain the ability to compositionally generalize. However, these previous studies involve data with a complex mix of discrete and continuously varying features, making it difficult to explicitly analyze the model's learned representations beyond the disentanglement score, and thereby hindering a deeper understanding of factorization and compositionality.

Despite the remarkable compositional abilities demonstrated by diffusion-based text-to-image generative models, explicit exploration of factorization and compositional generalization of diffusion models has been relatively limited. In a recent empirical study of toy diffusion models, Okawa et. al.  shows that diffusion models learn to compositionally generalize multiplicatively. They too, however, did not focus on the mechanistic aspect of compositional generalization within the model or analyze the representations learned by the models. To investigate factorization and compositionality in diffusion models, we conduct extensive experiments on conditional denoising diffusion probabilistic models (DDPMs)  trained with various 2D Gaussian datasets to characterize their learned representations and generalization performance.1 Drawing inspiration from traditional cognitive psychology and neuroscience studies on animals and humans, we design straightforward cognitive tasks for models to perform while analyzing both their generation output ("behavior") and their intermediate layer representations ("neural activities"). Specifically, we evaluate the diffusion model's ability to generalize by generating 2D Gaussian bumps centered at specified \(x,y\) coordinates on a finite canvas. We deliberately chose a low-dimensional dataset and a simplified experimental setup to enable a clear analysis of how the model's representation factorization relates to its generalization capabilities.

Conceptually, the models can adopt different parameterizations of the \(x,y\) coordinates for the Gaussian bumps, each with varying implications for data efficiency. Consider a \(K\)-dimensional dataset created from the composition of multiple independently varying 1-dimensional (1D) latent features (e.g. a factorizable data distribution \(P(x_{1},x_{2},,x_{K})=P(x_{1})P(x_{2}) P(x_{K})\)). Hypothetically, a model may learn either a joint representation of all \(K\) dimensions \(P(x_{1},x_{2},,x_{K}) P(x_{1})P(x_{2}) P(x_{K})\) or learn independent 1D representations \(P(x_{1})P(x_{2}) P(x_{K})\). In the former case, if there were \(N\) states per dimension, the model would need to see approximately \(N^{K}\) samples during training. If the model could somehow recognize the independence of the different factors, as few as \(KN\) training samples might suffice. We term the former a _coupled_ representation, while the latter is a _factorized_ one. Factorized representations could be far more sample efficient to learn, potentially permitting better generalization, and are more robust and adaptable for downstream applications. In biological neural networks, features of independent variation are typically represented in a factorized manner. For instance, primates encode allocentric pose information in a factorized fashion, leveraging grid cells for two-dimensional location and head direction cells for orientation . Further, spatial information about objects in the environment is factorized into place cells and other spatial coding cells .

Across three related studies, we investigate how diffusion models learn to encode independent features of the dataset, how that informs the model's ability to generalize out-of-training-distribution in terms of composition and interpolation, and how variations in the training data could impact such generalization. To be precise, here we define _compositionality_ as the ability to generate novel combinations of feature values that are not observed during training (e.g., given \(\{(a,b),(c,d)\}\), output \(\{(a,d),(c,b)\}\)). We define _interpolation_ as the ability to linearly combine different feature values (e.g., output \(x=16\) given \(x=15\) and \(x=17\)). The failure of the model to perform the designed tasks could be due to its inability to handle composition, interpolation, or a combination of both. We train the model on 2D Gaussian data and, in some cases, explicitly include 1D Gaussian stripes with specified \(x,y\) positions that can be combined to form the desired 2D Gaussian. We then pose the following questions:

1. Do diffusion models learn factorized representations? If so, when do these emerge over training?
2. Do the trained models learn to generalize beyond the training distribution, and what kind of training data is sufficient for this generalization?
3. Does the inclusion of a few explicitly factorized examples in training (e.g. the 1D Gaussian data) improve sample efficiency and generalization?

**Contributions.** In three experiments, we find that:

1. Given factorized, continuous conditional inputs, diffusion models learn "hyper-factorized" representations that are orthogonal not only for independent features but also different values of the same feature (Section 3.1).

2. Models compose well but interpolate poorly. Models can compositionally generalize when they observe the full extent of each independent latent feature along with a few compositional examples (Section 3.2).
3. Models trained on datasets containing isolated factors of variation require an exceptionally small number of compositional examples to compositionally generalize, showing remarkable data efficiency (Section 3.2).
4. Formation of a factorized representation for each continuous dimension of variation requires a threshold amount of correlated data, related to percolation theory in physics (Section 3.3).

Our results suggest that diffusion models can learn factorized, though not fully continuous, representations of continuous features with independent variations. These models demonstrate exceptional compositionality but have limited interpolation ability, even with sufficient training and data. Our analysis offers deeper diagnostic insights into the mechanism of factorization and compositionality of diffusion models from a microscopic representation perspective. Moreover, our insights on the data efficiency of training with isolated factors of variation with few compositional examples suggest the possibility of far more data efficient methods of training diffusion models.

## 2 Methods

**Dataset.** We generate \(N N\) pixel grayscale images. By default, we set \(N=32\) unless otherwise specified. Each image contains one 2D Gaussian bump ("blob"), the multiplication of a vertical and a horizontal 1D Gaussian stripe, or one 2D Gaussian addition, the sum of a vertical and a horizontal 1D Gaussian stripe ("sum of stripes (SOS's)"), at various \(x,y\) locations. The brightness \(v_{(x,y)}\) of the pixel at position \((x,y)\) for a 2D Gaussian blob centered at \((_{x},_{y})\) with standard deviation \((_{x},_{y})\) is given as \(v_{(x,y)}^{}=255(1-e^{-(x-_{x})^{2}/4_{x}^{2}-(y- _{y})^{2}/4_{y}^{2}})\) and as \(v_{(x,y)}^{}=255[1-(e^{-(x-_{x})^{2}/4_{x} ^{2}}+e^{-(y-_{y})^{2}/4_{y}^{2}})]\) for a 2D Gaussian SOS with the normalized range of \(v_{(x,y)}\) to be \(\). Each image is generated with a ground truth label of \((_{x},_{y})\), which continuously vary within \([0,N]^{2}\) unless otherwise specified. In our convention of notation, we label the top left corner of the image as \((1,1)\) while the bottom right corner of the image as \((N,N)\). Sample \(32 32\) images of 2D Gaussian bump and SOS centered at \(_{x}=_{y}=16\) with \(_{x}=_{y}=1\) are shown in Fig. 1.

A single dataset of these images consist of the enumeration of all possible Gaussians tiling the whole \(N N\) canvas at increment \(d_{x}\) in the \(x\)-direction and \(d_{y}\) in the \(y\)-direction. A larger \(d_{x}\) or \(d_{y}\) means a sparser tiling of the image space and fewer data while a smaller \(d_{x}\) or \(d_{y}\) result in more data with denser tiling of the total image space. Moreover, each 2D Gaussian have independent spread in the \(x\) and \(y\) direction given by \(_{x}\) and \(_{y}\), with a larger spread leading to more spatial overlap of neighboring Gaussians and a smaller spread less overlap. By parameterically tuning the increments \(d_{x}\) and \(d_{y}\) and the spread \(_{x}\) and \(_{y}\), we can generate datasets of various sparsities and overlaps. We provide a more detailed analysis of the various attributes of the data based on these parameters in Appendix A.5. For the majority of the experimental results we show in Sec. 3, we have chosen to fix \(:=_{x}=_{y}=1.0\) and \(d:=d_{x}=d_{y}=0.1\) unless otherwise specified. A default \(32 32\) dataset of \(d=0.1\) contains 102400 images.

**Models & Evaluations.** We train a conditional DDPM [12; 24; 25] with a standard UNet architecture as shown in Appendix Fig. 7. For each image in the training dataset, we provide an explicit ground truth label \((_{x},_{y})\) as an input to the network. For reference, we investigate the internal representation learned by the model using the output of layer 4 as labeled in Fig. 7. Since each dataset has inherently two latent dimensions, \(x\) and \(y\), we use dimension reduction tools such as PCA or UMAP  to reduce the internal representation of the model to a 2D/3D embedding for the ease of visualization and analysis. We defer the details of model architecture, dimension reduction, and experimentation to Appendix A.1 and A.2. Briefly, we assess the performance of the model based on the accuracy of

Figure 1: Example \(32 32\) image data of a 2D Gaussian bump (left) and a 2D Gaussian SOS (right).

its generated images at correctly displaying the center location of the 2D Gaussian. Further details on the precise definition of the accuracy metric can be found in Appendix A.3.

## 3 Results

### Models learn factorized but not fully continuous representations

In this section, we aim to understand the factorization of the model's learned representation via explicit inspection of its topology and geometry. Given a conditional DDPM trained on the 2D Gaussian **bump** dataset described above, we first investigate whether the model learns a coupled or factorized representation. Naively, a 2D Gaussian dataset with two independent features of variation, \(x\) and \(y\), has a 2D plane-like latent representation. Unfortunately, simply inspecting the learned representation would not allow us to easily differentiate between a coupled versus a factorized representation since the Cartesian product of two lines \(L^{1} L^{1}=^{2}\) is topologically and geometrically equivalent to a plane \(P^{2}^{2}\). To overcome this issue, we perform a simple modification to the Gaussian dataset. We impose periodic boundary conditions in the image space to connect the left-right and top-bottom boundaries of the image such that the latent representation of the dataset forms a torus. Mathematically, a torus is defined by the Cartesian product of two circles \(S^{1} S^{1}\). A Clifford Torus is an example of a factorized representation of the torus, with each circle independently embedded in \(^{2}\), resulting in a 4-dimensional object. However, the most efficient representation in terms of extrinsic dimensionality is the regular torus \(T^{2}\), which is embedded in \(^{3}\), albeit unfactorized. Various 2D projections of the 3D torus and the Clifford (4D) torus are shown in Fig. 2(a). Due to geometric differences between the Clifford and the 3D torus, we can now distinguish whether the model learns a factorized representation. If the model were to represent \(x\) and \(y\) independently with two ring manifolds, we expect to see a Clifford torus in the neural activations, rather than a different geometry such as the 3D torus.

To apply the geometry tests for differentiating between the 3D and the Clifford torus, we first need to confirm that the model indeed learns a torus representation of the dataset by computing the topological features of the learned representation via persistent homology. In Fig. 2(b), we compare the persistence diagrams of a standard torus (left) with the final learned representation of the model (right). Both diagrams exhibit the similar topological features, rank-1 \(H_{0}\) group, rank-2 \(H_{1}\) group (with overlapping orange points on top in both diagrams), and rank-1 \(H_{2}\) group, signaling that the model indeed learns a torus representation.

We then investigate when this torus representation emerges during training. In Fig. 2(c), we show the model's performance as measured by the accuracy of its generated images (top) and the corresponding effective dimension (bottom) of the learned representations across training, as measured by the participation ratio ( given by \((_{i}_{i})^{2}/_{i}_{i}^{2}\), where \(_{i}\) is the eigenvalue of the \(i\)-th principal component ). Intuitively, the participation ratio counts the dominant eigen-components, providing a measure of the effective dimension of the geometric object of interest. A detailed inspection of the effective dimension of the learned representations over the training duration informs us of whether and how the model arrives at a factorized, 4D representation. We see in Fig. 2(c) that as training progresses, the model's internal representation first undergoes a dimension increase then a decrease, eventually converging to around 7 dimensions after 200 epochs. While the dimensionality converged to a higher dimension than 4, the top 4 eigenvectors became notably more prominent as the training converges, as indicated in the eigenspectra in Fig. 2(d). This signals that a 4D, rather than 3D, torus representation is eventually learned. Various PCA projections of the learned representations along the training process are shown in Fig. 2(g)-(i), where the projections in the last epoch resembles those of the Clifford torus shown in (a).

To confirm whether the model learns a Clifford torus, we employ the orthogonality and parallelism tests of tori  (details found in Appendix B). In an ideal Clifford torus, the rings along the poloidal direction should be parallel with each other, and similarly for those along the toroidal direction. Moreover, the rings along the poloidal direction should be orthogonal with respect to the rings in the toroidal direction. The orthogonality and parallelism tests measure the orthogonality and parallelism of subspaces spanned by various rings on the torus. If the model learns a Clifford torus representation, the subspaces that code for \(x\) and \(y\) should be orthogonal, and the subspaces that code for \(x\) (\(y\)) for any given \(y\) (\(x\)) should be equivalent (parallel). Given a pair of \(x\) and \(y\), we construct 2D subspaces of rings \(S(\,x)\) and \(S(\,y)\) spanned by fixing \(x\) while varying \(y\) and fixing \(y\) while varying \(x\)respectively. We perform 3 sets of tests: 1) \(x\)_-on-\(y\) tests_ test orthogonality and parallelism between surfaces \(S(x)\) and \(S(y)\) for all combinations of \(x\) and \(y\); 2) \(x\)_-on-\(x\) tests_ test orthogonality and parallelism between \(S(x_{1})\) and \(S(x_{2})\) for all combinations of different \(x\)'s; 3) \(y\)_-on-\(y\) tests_ test orthogonality and parallelism between \(S(y_{1})\) and \(S(y_{2})\) for all combinations of different \(y\)'s.

In Fig. 3, we compare the orthogonality and parallelism test statistics between an ideal 3D torus (left), the model's learned representation at the final epoch (center), and an ideal Clifford torus (right). Comparing test 1 statistics (top row) between the model representation and the standard 3D and Clifford tori, we see that the model encodes \(x\) and \(y\) independently in mostly orthogonal subspaces, similar to a Clifford torus. The test 2 and 3 statistics (middle and bottom row) of the model representation, however, does not match those of either the 3D or the Clifford torus. In fact, the statistics from tests 2 and 3 of the model representation closely resemble those from test 1 of the 3D torus. This means that the model is encoding different values of \(x\) in an almost orthogonal, as opposed to parallel, fashion, similarly for different values of \(y\). These observations signify that the models "hyper-factorizes" each individual factor of variation by treating them more similarly to categorical variables with nonzero overlaps between neighboring categories rather than fully-continuous variables, which explains why the effective dimension of the model's learned representation is higher than 4 after convergence in Fig. 2(c). Although these observations are made from a model trained on a torus dataset, we expect the model to have similar encoding schemes across all variants of our Gaussian bump datasets.

### Models can compose but not interpolate

In this section, we examine the model's ability to compositionally generalize. Specifically, we train the model on incomplete datasets of 2D Gaussian SOSs, in which we leave out all Gaussian SOSs

Figure 2: **Metrics of a model trained using 2D Gaussian bump datasets with periodic boundaries.****(a)** 2D projections of a standard 3D torus (left) and a 4D Clifford torus (right). The 3D torus is an example of a coupled representation that can be learned by the model while the 4D torus is a factorized one. **(b)** Persistence diagrams of a standard torus (left, the diagram looks the same for Clifford tori) and the learned representation of the model at the terminal epoch (right). There are two overlapping orange points for \(H_{1}\) in both diagrams. **(c)** Model accuracy (top) and effective dimension (bottom) of representation learned by the model as a function of training epochs. **(d)** PCA eigenspectrum (the first 15 dimensions) of the model’s learned representations and their corresponding sample accuracy percentage and explained variance ratio of the top 4 PCs (labeled top right of each panel) at various checkpoints during training. **(e)-(g)** PCA visualizations of the learned representations at epoch 0, 150, and terminal epoch, respectively.

centered in the red-shaded test regions (Fig. 4(f), sampling distributions shown in Fig. 4(a), (b)). We then assess the performance of the models in generating 2D Gaussian SOSs centered within and outside of the test regions. Here we choose the width of the cuts to be around 6 pixels wide, which roughly corresponds to the width of the Gaussian stripes of \(=1.0\). We design the lesions such that we can probe the model's ability at compositionally generalizing out of the training distribution as well as its ability to spatially interpolate in a single variable alone. There are 4 possible outcomes based on the model's ability to compose and interpolate, and we give predictions for the model's generalization performance in each case: 1) the model cannot compose or interpolate: here, we would see low performance across the test regions; 2) the model interpolates but cannot compose: here, we would see high performance across the test regions; 3) the model composes but cannot interpolate: here, we would see high performance in one dimension but not the other in the non-intersecting part of the test regions, low performance in the intersection; 4) the model can compose and interpolate: here, we would see higher performance across the test regions. We note that case (2) and (4) are indistinguishable via the behavior of the model.

In our first experiment, we simply train our model on a 2D Gaussian SOS dataset where all data centered in the test regions are left out, i.e. excluding all \(_{x},_{y}\) as shown in Fig. 4(a). We call this model the _2D model_ since the model is trained on only 2D Gaussian SOS data. We then examine the terminal accuracy of the 2D model in generating Gaussian SOSs at the correct \(_{x}\) and \(_{y}\) in various parts of the test regions, which we section into a horizontal part, a vertical part, both excluding the area of their intersection, and the intersection itself (shown schematically in Fig. 4(f)). We note that the 2D model achieves high accuracy in generating \(_{y}\) while suffers low accuracy in generating \(_{x}\) in the vertical section. Similarly, the 2D model achieves high accuracy in generating \(_{x}\) while suffers low accuracy in generating \(_{y}\) in the horizontal section. The model suffers low accuracy in generating both \(_{x}\) and \(_{y}\) in the intersection region. These observations have two implications: i) the model is factorized and compositional since it is able to generate the correct \(_{x}\) or \(_{y}\) irrespective of the other; ii) the model has limited ability to spatially interpolate, which suggests that it does not learn a fully continuous manifold in its activation space (see Fig. 10(c)). These observations meet our expectation for outcome case (3), when the model can compose but not interpolate and resonates our conclusion from Sec. 3.1 that the model has learned to factorize \(x\) and \(y\), but has not learned a consistent representation across all \(x\)'s (and likewise \(y\)'s). In Appendix C.3 Fig. 11, we quantitatively assess model's ability to interpolate as a function of the held-out range width in the data manifold and found that model's ability to interpolate gradually decrease as a function of the held-out region width.

To further verify our hypothesis that the model is capable of composition but not interpolation, we design an alternative dataset that includes a mixture of 2D Gaussian SOS data and 1D Gaussian stripe data (single stripes that are either horizontal or vertical). Specifically, we generate a set of 1D Gaussian stripe data across the entire range of \(x\) and \(y\) without any held-out regions, as shown in Fig. 4(b). Note that the 1D Gaussian stripe data respects the 2D structure of the conditional

Figure 3: **Comparison of orthogonality and parallelism test statistics between 3D torus, model’s learned representation, and Clifford torus.**\(x\)-on-\(y\) (top row), \(x\)-on-\(x\) (middle row), \(y\)-on-\(y\) (bottom row) orthogonality (left column) and parallelism (right column) test statistics are compared between (a) an ideal 3D torus (blue), (b) the learned representation by the model (green), and (c) an ideal Clifford torus (orange).

input embedding. The exact generation procedure for the 1D Gaussian stripe dataset is described in Appendix C.1. This 1D dataset is then combined with the previous 2D Gaussian SOS dataset with the same held-out test regions. The resulting 2D+1D dataset contains 1D data in all range of \(x\) and \(y\) but has not seen 2D data (composition of 1D) in the test regions. The model trained under this dataset, deemed the _2D+1D model_, has high performance in generating both \(_{x}\) and \(_{y}\) across all of the test regions. This shows that given the necessary "ingredients" (1D Gaussian stripes of all range of \(x\) and \(y\)), the model is able to compose them in a proper manner (2D Gaussian SOSs). These observations again confirm that the learned representation of the model is factorized but not consistent across a single feature, meaning that the model is able to compose independent features but not interpolate within a single feature dimension.

Finally, we test whether compositionality can be learned given no compositional examples in the training dataset. To test this, we train a _1D model_ on the 1D Gaussian stripe dataset as described above. Our results show that while model achieves respectable accuracy in generating the correct \(_{y}\) across the test regions, it does not simultaneously generate the correct \(_{x}\), indicating that the model did not learn to properly compose the 1D stripes. This is also evident from the generated image samples from the 1D model shown in Fig. 10(c). Without any compositional examples, the model fails to generate the intersection of two 1D Gaussian stripes and defaults back to generating one of the stripes at the correct location. While the 1D model has also learned to factorize \(x\) and \(y\) as independent concepts, it is not able to generalize here due to the lack of compositional examples. Hence, based on the performance of the 1D, 2D, and 2D+1D models that we have seen above, we conclude that complete compositional generalization requires data of all range of \(x\)'s and \(y\)'s and some compositional examples of the two to be present within the dataset.

Building on our previous results, we investigate whether combining the 2D Gaussian bump dataset with 1D stripe data can impart a different form of compositionality to the model - multiplicative rather than additive. To do this, we create a dataset that mirrors the 2D+1D Gaussian SOS set, substituting the 2D Gaussian SOS data with 2D Gaussian bump data while maintaining the same test regions. The latent representation of this dataset can be found in Fig. 9(h) in the Appendix. The resulting model trained under the 2D Gaussian bump + 1D Gaussian stripe dataset is able to generate 2D Gaussian

Figure 4: **Models trained on Gaussian SOS datasets to generalize to the test regions.** We train three models on various Gaussian SOS datasets to test their ability to compositionally generalize in the red-shaded, held-out test regions shown in the sample image (f). **(a)** The 2D Gaussian **SOS** dataset contains all combination of 2D Gaussian SOSs for all \(x\) and \(y\) between 0 and 32 except for the held-out range between 13 and 19. **(b)** The 1D Gaussian **stripe** dataset contains horizontal and vertical 1D Gaussian stripes of full range of \(x\) and \(y\) values between 0 and 32. The accuracy of the three models in generating the correct \(x\) and \(y\) location of the Gaussian SOS is shown for different sections of the test regions: **(c)** The vertical section excluding the intersection, **(d)** the horizontal section excluding the intersection, and **(e)** the intersection. **(f)** Sample image of a 2D Gaussian SOS with the different test regions labeled. **(g)** shows the accuracy of models run with various subsampling rate of the 2D Gaussian bump + 1D Gaussian stripe dataset.

bumps within the test regions up to 70% accuracy, suggesting that the model is adept at handling an alternative form of compositionality. We further investigated whether the number of 2D Gaussian bump examples in the dataset influences compositionality by subsampling the 2D Gaussian bumps in the in-distribution regions (Fig. 9(g)). The results show that models trained on datasets with varying percentages of subsampled 2D Gaussian bumps achieve similar performance across the test regions, even with as little as 20% of the original data. These findings suggest that training for compositional generalization can be efficiently achieved by using a full range of data for each individual factor of variation, along with a few compositional examples.

To validate the benefit of training with 2D + 1D datasets, we analyzed the data efficiency scaling of models trained on 2D Gaussian bumps + 1D Gaussian stripes, comparing them to models trained solely on 2D Gaussian bumps as a function of image size \(N\). For both the baseline and augmented datasets, we excluded \(20\%\) of the 2D Gaussian bumps from the center square region of the \(N N\) canvas for out-of-distribution (OOD) evaluations. The accuracy of the models are plotted against the percentage of 2D Gaussian bumps subsampled in Fig. 5(a) for the baseline dataset and (b) for the augmented dataset. The results clearly demonstrate that the model trained on the augmented dataset performs better with a significantly lower percentage of 2D Gaussian bumps in the training dataset. We then plotted the sizes of the baseline and augmented datasets required to reach a \(60\%\) accuracy threshold as a function of \(N\) on a log-log scale in Fig. 5(c). We found that models trained on the augmented datasets only require linear number of data in \(N\) while those trained on the baseline datasets require quadratic number of data in \(N\). This result suggests that augmented datasets with samples of all independent factors plus a few compositional examples provide an efficient training method that has sample complexity linear in the number of factors. In Appendix C.2 and C.4, we further discuss the sample efficiency of learning compositionality from dataset of isolated factors of variation plus few compositional examples.

In summary, our findings indicate that the model excels at compositionality but struggles with interpolation. Consequently, effective generalization necessitates that the training set encompasses the full range of each individual factor of variation, alongside compositional examples. Furthermore, we discovered that models trained on datasets featuring explicitly factorized examples exhibit remarkable data efficiency and adaptability to various forms of compositionality. These results align with the observed factorization patterns in the model representation discussed in Sec. 3.1 and suggest promising strategies for developing more data-efficient training schemes that utilize tailored datasets.

### Connection between manifold learning and percolation theory

We have established that the model learns factorized (but not fully continuous) and compositional representations. Next, we identify a potential connection between manifold learning in diffusion models and percolation theory in physics, which provides a normative explanation as to how factorization (or compositional generalization) emerges. To start, we note that our Gaussian bump datasets can be approximated as a simple Poisson Boolean (Gilbert's disk) model [29; 30], a well-studied system in continuum percolation theory. Fig. 6(a) shows a schematic illustration of our dataset of

Figure 5: **Exponential sample efficiency gains from training the model on independent factors of variation.****(a-b)**: Results on \(N=32\) Gaussian 2D bump generation. **(a)** Model accuracy in generating 2D Gaussian bumps from training on 2D Gaussian bumps, shown as a function of the subsampling percentage. **(b)** Model accuracy in generating 2D Gaussian bumps from training on mixed 2D Gaussian bumps + 1D Gaussian stripes. Red dashed lines in (a),(b) mark a threshold accuracy of 0, 60, and 100%. **(c)** Log-log plot of dataset size needed to reach 60% threshold accuracy as a function of image size \(N\) with 2D Gaussian bumps training data (blue) versus mixed 2D Gaussian bumps + 1D Gaussian stripe training data (orange): distinct scalings of data efficiency visualized by dashed gray and black lines, which provide a linear and quadratic reference, respectively.

Gaussian bumps approximated as disks of various widths on a 2D \(32 32\) lattice of grid spacings \(d_{x}\) and \(d_{y}\). In percolation theory, the quantity of interest is the critical fraction of nodes that need to have non-zero overlaps in order for the entire system to be interconnected with high probability. For most systems (finite- and infinite-sized), there exist a phase transition that occurs at the critical fraction that can be either analytically derived or numerically estimated, with the transition becoming sharper as the system size scales. In our context, since the Gaussian bump images are pixelated, overlaps between neighboring Gaussian bumps are not smooth. In Fig. 6(b), we plot the normalized L2-norm of the neighboring distance-\(d\)-separated Gaussian bumps with various spread \(\)'s. We note that since the L2-norm measure of overlap is normalized to 1 between a given Gaussian bump and itself, the overlap between a given Gaussian bump and a slightly offset Gaussian bump temporarily goes beyond 1 due to the discrete nature of the data.

We hypothesize that below a threshold amount of training data, the diffusion model cannot construct a faithful representation of the training dataset. From the percolation perspective, if there does not exist a large enough interconnected component within the dataset, the model will fail to learn the relative spatial location of the data points, making it hard to learn a faithful 2D representation. To test this hypothesis, we first simulated the mass ratio of largest interconnected components as a function of the unit area data density \(\) with our 2D Gaussian bump datasets. For simulation, we use a dataset of 1024 data points, corresponding to \(d:=d_{x}=d_{y}=1.0\) on a \(32 32\) lattice. We then randomly sample \( 1024\) points on the lattice to compute the size of the largest interconnected cluster of Gaussian bumps. Here, we define a hyperparameter of threshold overlap beyond which we consider two Gaussian bumps as overlapping. In Fig. 6(c), we show the simulation results. averaged over 5 runs, with the chosen threshold overlap of 0.005 for datasets with various \(\)'s. Additional simulation results with various chosen overlap thresholds can be found in Appendix D.

Next, we quantify the connection between percolation theory and manifold formation in diffusion models. To account for the stochasticity in sampling the datasets and avoid significant overhead in model training, we choose a fix set of grid points on the \(32 32\) lattice and generate datasets of varying \(\)'s from this fixed set of grid points. Moreover, we choose each sampled fraction of the dataset to be a strict superset of the smaller sampled fractions of the dataset. For example, dataset at \(=0.2\) contains all of dataset at \(=0.1\), and dataset at \(=0.3\) contains all of dataset at \(=0.2\) and hence all of \(=0.1\), so on and so forth. For datasets of different \(\)'s, we chose the same grid points such that the only difference between datasets of different \(\)'s is just the \(\) itself. This procedure eliminates all the stochasticity due to the probabilistic nature of

Figure 6: **Percolation theory of manifold formation and interpolation.****(a)** Schematic drawing of the Gaussian bumps of various width on a lattice of grid size \(d_{x}\) and \(d_{y}\). **(b)** Overlaps of neighboring Gaussian bumps as a function of the grid size \(d:=d_{x}=d_{y}\) for various Gaussian widths. **(c)** Theoretical simulation of largest connected mass ratio as a function of percentage of data in training set \(\) with threshold overlap of 0.005 for various Gaussian widths. **(d)** Ground truth (left) and generated image (right) of a sample Gaussian bump data of \(=0.1\) centered at \(_{x}=16\) and \(_{y}=16\). **(e)** Terminal accuracy of models as a function of \(\) trained with datasets that only differ in the Gaussian bump widths for various Gaussian bump widths.

that differences in training are only due to the differences in \(\) and \(\). To ensure fair comparison, we proportionally add training time to each model trained with fewer data such that the total amount of training batches are constant across all models.

In Fig. 6(e), we display the accuracy of models trained with different fractions of a training dataset of a total size of 1024 for various \(\)'s. We note that there are high variances in the model performance, especially for \(=0.3,0.5\). This is due to stochasticity in model training itself as well as the gradual as opposed to a sharp phase transition, as shown in simulation Fig. 6(c). In addition, we notice that based on the simulation, \(=0.1\) will not forge any connected cluster due to its minuscule spread. In Fig. 6(d), an sample image of Gaussian bumps of \(=0.1\) is shown on the left, where it is a mere pixel centered at \((_{x},_{y})\). Nonetheless, in experiment Fig. 6(e), we see that the model is able to learn the \(=0.1\) dataset at \(=0.8,0.9\). This is partially due to the fact that the noising process in diffusion training smears out the Gaussian bump of \(=0.1\) to give it a larger effective width, as shown in the generated bump image in Fig. 6(d). In general, our experimental results agree with the percolation theory prediction that smaller similarities between the samples makes it harder for the models to learn meaningful representations, despite the same quanitity of data. The portraits of the learned representations by the models generating Fig. 6(e) is shown in Fig. 15 of Appendix D.2.

## 4 Discussion

In the previous section, we have shown that diffusion models are capable of learning factorized and semi-continuous representations. This allows for compositional generalization across factors that have appeared in the training dataset, even given only a small number of compositional examples. While we studied a toy system, our results imply that the diffusion model architecture has some inductive biases favoring factorization and compositionality, as seen in astonishing compositional text-to-image generation examples such as an "astronaut riding a horse on the moon". Our results demonstrate further that if the training data include isolated factors of independent variation and some compositional examples, diffusion models are capable of attaining high performance in OOD compositional generalization. While it is true that natural images are much more complex, and there can be numerous forms of compositionality within a single image, the datasets and modes of composition we studied were not trivial. Nonetheless, further investigation is necessary to understand the compositionality and factorization of models when multiple forms of compositionality are at play.

Furthermore, we showed a connection between the models' performance, as related to its ability to learn a faithful representation of the dataset, and percolation theory in physics. Percolation theory provides a plausible mechanistic interpretation of the observed sudden emergence in the model's capability beyond a threshold number of data points. Further work is needed to characterize the precise connection between percolation theory and manifold formation, in both toy settings and realistic settings. In realistic datasets, mutual information or cosine similarity between data points can serve as abstract forms of overlap. Moreover, the idea of percolation can be further extended to study alternative observations of phase transitions in deep learning, such as percolation of the chain-of-knowledge in large language models.

## 5 Conclusion

We have shown that diffusion models are capable of learning factorized representations that can compositionally generalize OOD, given data containing the full range of each independent factor of variation and a small amount of compositional examples. Our study suggests that diffusion models have the inductive bias for factorization and compositionality, which are believed to be key ingredients for scalability. We identified that the diffusion models fail to generalize out-of-distribution when 1) there are unseen values of a given factor of variation for the composition, 2) there are no compositional examples in the training dataset, 3) there is an insufficient quantity of data, and 4) there is an insufficient amount of overlaps between data. Together, our results imply that a more efficient training dataset can be constructed by incorporating samples that feature explicit factorized examples along with a few compositional examples that have substantial overlap. By optimizing the training data in this manner, we can enhance the data efficiency scaling of diffusion-based models. Future investigations should consider controlled experiments with data optimization for improving data efficiency of diffusion models using more realistic data.