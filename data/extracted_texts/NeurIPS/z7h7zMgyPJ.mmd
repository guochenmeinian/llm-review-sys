# The Many Faces of Optimal Weak-to-Strong Learning

Mikael Moller Hogsgaard

Department of Computer Science

Aarhus University

hogsgaards@cs.au.dk

&Kasper Green Larsen

Department of Computer Science

Aarhus University

larsen@cs.au.dk

Markus Engelund Mathiasen

Department of Computer Science

Aarhus University

markusm@cs.au.dk

###### Abstract

Boosting is an extremely successful idea, allowing one to combine multiple low accuracy classifiers into a much more accurate voting classifier. In this work, we present a new and surprisingly simple Boosting algorithm that obtains a provably optimal sample complexity. Sample optimal Boosting algorithms have only recently been developed, and our new algorithm has the fastest runtime among all such algorithms and is the simplest to describe: Partition your training data into 5 disjoint pieces of equal size, run AdaBoost on each, and combine the resulting classifiers via a majority vote. In addition to this theoretical contribution, we also perform the first empirical comparison of the proposed sample optimal Boosting algorithms. Our pilot empirical study suggests that our new algorithm might outperform previous algorithms on large data sets.

## 1 Introduction

Boosting is one of the most powerful machine learning ideas, allowing one to improve the accuracy of a simple base learning algorithm \(\). The main idea in Boosting, is to iteratively invoke the base learning algorithm \(\) on modified versions of a training data set. Each invocation of \(\) returns a classifier, and these classifiers are finally combined via a majority vote or averaging. Variations of Boosting, including Gradient Boosting , are often among the best performing classifiers in practice, especially when data is tabular. Furthermore, when combined with decision trees or regressors as the base learning algorithm, these algorithms are independent of scaling of data features and provides impressive out-of-the-box performance. See the excellent survey  for further details.

The textbook Boosting algorithm for binary classification, AdaBoost , works by maintaining a weighing \(D_{t}=(D_{t}(1),,D_{t}(m))\) of a training set \(S=(x_{1},y_{1}),,(x_{m},y_{m})\) with \((x_{i},y_{i})\{-1,1\}\) for an input domain \(\) and labels \(\{-1,1\}\). In each Boosting iteration \(t\), a classifier \(h_{t}:\{-1,1\}\) is trained to minimize the \(0/1\)-loss on \(S\), but with samples weighed according to \(D_{t}\). The weights are then updated such that samples \((x_{i},y_{i})\) misclassified by \(h_{t}\) have a larger weight under \(D_{t+1}\) and correctly classified samples have a smaller weight. Finally, after a sufficient number of iterations \(T\), AdaBoost combines the classifiers \(h_{1},,h_{T}\) into a _voting classifier_\(f(x)=(_{t}_{t}h_{t}(x))\) taking a weighted majority vote among the predictions made by the \(h_{t}\)'s. Here the \(_{t}\)'s are real-valued weights depending on the accuracy of \(h_{t}\) on \(D_{t}\).

Weak-to-Strong Learning.Boosting was originally introduced to address a theoretical question asked by Kearns and Valiant  on _weak-to-strong_ learning. A learning algorithm \(\) is called a weak learner if, for _any_ distribution \(\) over \(\{-1,1\}\), when given some \(m_{0}\) i.i.d. training samples \(S\) from \(\), it produces with probability at least \(1-_{0}\), a classifier/hypothesis \(h_{S}\) with \(_{}(h_{S}) 1/2-\), where \(_{}(h)=_{(x,y)} (h(x) y)\) and \(\{-1,1\}\) is a predefined hypothesis set used by \(\). A weak learner thus produces, for any distribution \(\), a hypothesis that performs slightly better than random guessing when given enough samples from \(\). The parameter \(\) is called the _advantage_ of the weak learner and we refer to the weak learner as a \(\)-weak learner. We think of \(_{0}\) and \(m_{0}\) as constants that may depend on \(\), but not \(\). A strong learner in contrast, is an algorithm that for any distribution \(\), and any parameters \((,)\) with \(0<,<1\), when given \(m(,)\) i.i.d. samples \(S\) from \(\), produces with probability at least \(1-\) a hypothesis \(h_{S}:\{-1,1\}\) with \(_{}(h_{S})\). Here \(m(,)\) is the _sample complexity_ of the strong learner. A strong learner thus obtains arbitrarily high accuracy when given enough training samples. With these definitions in place, Kearns and Valiant asked whether it is always possible to produce a strong learner from a weak learner. This was indeed shown to be the case , and AdaBoost is one among many examples of algorithms producing a strong learner from a weak learner.

Sample Complexity.Given that weak-to-strong learning is always possible, a natural question is "what is the best possible sample complexity \(m(,)\) of weak-to-strong learning?". This is known to depend on the VC-dimension \(d\) of the hypothesis set \(\) used by the weak learner, as well as the advantage \(\) of the weak learner. In particular, the best known analysis  of AdaBoost shows that it achieves a sample complexity \(m_{}(,)\) of

\[m_{}(,)=O(}+).\] (1)

Larsen and Ritzert  were the first to give an algorithm improving over AdaBoost. Their algorithm has a sample complexity \(m_{}(,)\) of

\[m_{}(,)=O( }+).\]

They further complemented their algorithm with a lower bound proof showing that any weak-to-strong learning algorithm must have a sample complexity \(m(,)\) of

\[m(,)=(}+).\]

The optimal sample complexity for weak-to-strong learning is thus fully understood from a theoretical point of view.

Other Performance Metrics.Sample complexity is however not the only interesting performance metric of a weak-to-strong learner. Furthermore, \(O()\)-notation may hide constants that are too large for practical purposes. It is thus worthwhile to develop alternative optimal weak-to-strong learners and compare their empirical performance.

The algorithm of Larsen and Ritzert for instance has a rather slow running time as it invokes the weak-learner a total of \(O(m^{k_{4}\,3}^{-2} m)=O(m^{0.8}^{-2})\) times on a training set of \(m\) samples. This should be compared to AdaBoost that only invokes the weak learner \(O(^{-2} m)\) times to achieve the sample complexity stated in (1).

An alternative sample optimal weak-to-strong learner was given by Larsen  as a corollary of a proof that Bagging  is an optimal PAC learner in the realizable setting. Concretely, his work gives a weak-to-strong learner with an optimal sample complexity while only invoking the weak-learner a total of \(O(^{-2}(m/) m)\) times on a training set of \(m\) samples.

A natural question is whether the sample complexity of AdaBoost shown in (1) can be improved to match the optimal sample complexity by a better analysis. Since AdaBoost only invokes its weak learner \(O(^{-2} m)\) times on \(m\) samples, this would be an even more efficient optimal weak-to-strong learner. Unfortunately, work by Hoggsgaard et al.  shows that AdaBoost's sample complexity is sub-optimal by at least a \((1/)\) factor, i.e.

\[m_{}(,)=(}+).\] (2)It thus remains an intriguing task to design weak-to-strong learners that have an optimal sample complexity and yet match the runtime guarantees of AdaBoost. Furthermore, do the theoretical improvements translate to practice? Or are there large hidden constant factors in the \(O()\)-notation? And how does it vary among the different weak-to-strong learners?

### Our Contributions

In this work, we first present a new weak-to-strong learner with an optimal sample complexity (at least in expectation). The algorithm, called Majority-of-5 and shown as Algorithm 1, is extremely simple: Partition the training set into 5 disjoint pieces of size \(m/5\) and run AdaBoost on each to produce voting classifiers \(f_{1},,f_{5}\). Finally, combine them by taking a majority vote \(g(x)=(_{t=1}^{5}f_{t}(x))\). This simple algorithm only invokes the weak learner \(O(^{-2} m)\) times, asymptotically matching AdaBoost and improving over previous optimal weak-to-strong learners. Furthermore, since each invocation of AdaBoost is on a training set of only \(m/5\) samples, it is at least as fast as AdaBoost, even when considering constant factors. It is even trivial to parallelize the algorithm among up to \(5\) machines/threads.

``` Input: Training set \(S=(x_{1},y_{1}),,(x_{m},y_{m})\). Weak learner \(\). Result: Hypothesis \(g:\{-1,1\}\). Partition \(S\) into \(5\) disjoint pieces \(S_{1},,S_{5}\) of size \(m/5\). for\(t=1,,5\)do Run AdaBoost on \(S_{t}\) with \(\) to obtain \(f_{t}:\{-1,1\}\). \(g(_{t}f_{t})\). return\(g\) ```

**Algorithm 1**Majority-of-5(\(S,\))

The concrete guarantees we give for Majority-of-5 are as follows

**Theorem 1**.: _For any distribution \(\) over \(\{-1,1\}\) and any \(\)-weak learner \(\) using a hypothesis set \(\) of VC-dimension \(d\), it holds for a training set \(S^{m}\) that running Majority-of-5 on \(S\) to obtain a hypothesis \(g\) satisfies_

\[[_{}(g)]=O(m} ).\]

In particular, Theorem 1 implies that \([_{}(g)]\) when given \(m=(d/(^{2}))\) samples. This is a slightly weaker guarantee than the alternative optimal weak-to-strong learners in the sense that we do not provide high probability guarantees (i.e. with probability \(1-\)). On the other hand, our algorithm is extremely simple and has a running time comparable to AdaBoost. Furthermore, the proof that AdaBoost is sub-optimal (see (2)) shows that even the expected error of AdaBoost is sub-optimal by a logarithmic factor. It is interesting that combining a constant number of voting classifiers trained by AdaBoost makes it optimal when a single AdaBoost is provably sub-optimal. Let us also comment that the analysis of Algorithm 1 is based on recent work by Aden-Ali et al.  on optimal PAC learning in the realizable setting, demonstrating new applications of their techniques. Furthermore, we believe the number \(5\) is an artifact of our proof and we conjecture that it can be replaced with \(3\) by giving a better generalization bound for _large margin_ voting classifiers. See Section 3 for further details.

Empirical Comparison.Our second contribution is a pilot empirical study, which gives the first empirical comparison between the alternative optimal weak-to-strong learners, both the algorithm of Larsen and Ritzert , the Bagging+Boosting based algorithm , our new Majority-of-5 algorithm, as well as classic AdaBoost. We give the full details of the alternative algorithms in Section 2. In our experiments, we compare their performance both on real-life data as well as the data distribution used by Hogsgaard et al.  in their proof that AdaBoost is sub-optimal as shown in (2). Our pilot empirical study give an indication that our new algorithm Majority-of-5 may outperform previous algorithms on large data sets, whereas Bagging+Boosting performs best on small data sets. See Section 4 for further details and the results of these experiments.

Previous Optimal Weak-to-Strong Learners

In this section, we present the two previous optimal weak-to-strong learners. The first such algorithm, by Larsen and Ritzert , builds on a sub-sampling technique due to Hanneke  in his seminal work on optimal PAC learning in the realizable setting. This sub-sampling technique, named SubSample, is shown as Algorithm 2.

``` Input: Training set \(S\), Stash \(T\) Result: List of training sets \(L\). if\(|S|<4\)then
2 Let \(L\) contain the single training set \(S T\). return\(L\) Partition \(S\) into \(4\) disjoint pieces \(S_{0},S_{1},S_{2},S_{3}\) of size \(|S|/4\) each. Let \(L\) be an empty list. Append SubSample(\(S_{0}\), \(T S_{2} S_{3}\)) to \(L\). Append SubSample(\(S_{0}\), \(T S_{1} S_{3}\)) to \(L\). Append SubSample(\(S_{0}\), \(T S_{1} S_{2}\)) to \(L\). return\(L\) ```

**Algorithm 2**SubSample(\(S,T\))

Given a training set \(S\), SubSample generates a list \(L\) of subsets \(S_{i} S\). The list \(L\) has size \(m^{_{4},3} m^{0.79}\) when invoking SubSample(\(S,\)) for a training set \(S\) of size \(m\). Larsen and Ritzert now give an optimal weak-to-strong learner using SubSample as a sub-routine as shown in Algorithm 3.

``` Input: Training set \(S=(x_{1},y_{1}),,(x_{m},y_{m})\). Weak learner \(\). Result: Hypothesis \(g:\{-1,1\}\). Invoke SubSample(\(S,\)) to obtain list \(L=S_{1},,S_{k}\). for\(t=1,,k\)do
3 Run AdaBoost on \(S_{t}\) with \(\) to obtain \(f_{t}:\{-1,1\}\). \(g(_{t}f_{t})\). return\(g\) ```

**Algorithm 3**LarsenRitzert(\(S,\))

Finally, the algorithm by Larsen  based on Bagging (a.k.a. Bootstrap Aggregation) by Breiman , combines AdaBoost with sampling subsets of the training data with replacement. Unlike the algorithm above by Larsen and Ritzert, it requires a target failure probability \(\) as input. The algorithm is shown as Algorithm 4.

``` Input: Training set \(S=(x_{1},y_{1}),,(x_{m},y_{m})\). Weak learner \(\). Failure probability \(0<<1\). Result: Hypothesis \(g:\{-1,1\}\). for\(t=1,,O((m/))\)do
1 Let \(S_{t}\) be a set of \(m\) independent samples with replacement from \(S\). Run AdaBoost on \(S_{t}\) with \(\) to obtain \(f_{t}:\{-1,1\}\). \(g(_{t}f_{t})\). return\(g\) ```

**Algorithm 4**BaggedAdaBoost(\(S,,\))

## 3 Analysis of Majority-of-5

In this section, we give the proof of Theorem 1, showing that our new algorithm Majority-of-5 has an optimal expected error. Before giving the formal details, we present the main ideas in our proof. Our analysis is at a high level inspired by recent work of Aden-Ali et al.  for realizable PAC learning. The first ingredient we need is the notion of margins. For a voting classifier \(f(x)=(_{h}_{h}h(x))\) with \(_{h} 0\) for all \(h\), consider the function \(f^{}(x)=_{h}_{h}^{}h(x)\) with \(_{h}^{}=_{h}/_{h}_{h}\). That is, \(f^{}\) is simply the voting classifier \(f\) without the \(()\) and normalized to have coefficients summing to \(1\). The margin of \(f\) on a sample \((x,c(x))\) is then \(c(x)f^{}(x)[-1,1]\). The margin is \(1\) if all hypotheses combined by \(f\) agree and are correct. It is \(0\) if half of the mass is on hypothesis that are correct and half of the mass is on the hypothesis that are wrong. We can thus think of the margin as a confidence of the voting classifier. Margins have been extensively studied in the context of boosting and were originally introduced to give theoretical justification for the impressive practical performance of AdaBoost . In particular, there are strong generalization bounds for voting classifiers with large margins . Indeed, the best known sample complexity bound for AdaBoost, as stated in (1), is derived by showing that AdaBoost produces a voting classifier with margins \(()\).

Returning to our outline of the proof of Theorem 1, recall that the optimal error for weak-to-strong learning as a function of the number of samples \(m\) is \(O(d/(^{2}m))\). Now assume we can prove that for a set of \(m\) i.i.d. samples from a distribution \(\), the expected maximum error under \(\) of any voting classifier that has margins \(()\) on all the samples, is no more than \(O(m)})\). This fact follows from previous work on Rademacher complexity. Note that this is sub-optimal compared to our target error by a polynomial factor since \( x\) for \(x\) between \(0\) and \(1\). We want to argue that combining \(5\) instantiations of AdaBoost on disjoint training sets reduces this expected error to optimal \(O(d/(^{2}m))\).

For this argument, consider running AdaBoost on \(n=m/5\) samples. For any \(x\), consider the probability \(p_{x}=_{S^{n}}[f_{S}(x) c(x)]\) where \(f_{S}\) is the hypothesis produced by AdaBoost on \(S\) and \(c(x)\) is the correct label of \(x\). Inspired by Aden-Ali et al. , we now partition the input domain \(\) into sets \(R_{i}\), such that \(R_{i}\) contains all \(x\) for which \(p_{x}(2^{-i},2^{-i+1}]\). The crucial observation is that if we consider \(k\) independently trained AdaBoosts, then the probability they all err on \(x\) is precisely \(p_{x}^{k}\). Since a majority vote among 5 classifiers only fails when at least 3 of the involved classifiers fail, combining \(5\) AdaBoosts intuitively reduces the contribution to the expected error from points \(x R_{i}\) to \(_{X}[X R_{i}]2^{-3i}\). What remains is thus to argue that \([X R_{i}]\) is small.

This last step is done by considering the distribution \(_{i}\), which is \(\) conditioned on receiving a sample from \(R_{i}\). The expected number of samples we see from \(R_{i}\) is \(m_{i}=[X R_{i}]m\). Furthermore, since AdaBoost obtains margins \(()\) on all its training data, it in particular obtains margins \(()\) on all its samples from \(_{i}\). This leads to an error probability of \(p_{i}=O(m_{i})})\) under \(_{i}\). But the definition of \(R_{i}\) implies \(p_{i} 2^{-i}\). Hence \(m_{i})}=(2^{-i}) m_{i}=O(2^{2i}d/^{ 2})[X R_{i}]=O(2^{2i}d/(^{2}m))\). By summing over all \(R_{i}\), the final expected error is hence

\[_{i=1}^{}d^{2-3i}}{^{2}m}=O(d/(^{2}m)).\]

This completes the proof overview. Let us end by making a few remarks. First, it is worth noting that the generalization bound \(O(m)})\) seems much worse than the bound in (1) claimed for AdaBoost and other voting classifiers with large margins. Unfortunately, if we examine (1) carefully and state \(\) as a function of \(m\), we get \(=O(d(m/d) m/(^{2}m))\). The problem is that the two log-factors are not bounded by a polynomial in \(d/(^{2}m)\). In particular for \(m=Cd/^{2}\) with \(C>0\) a constant, any polynomial in \(d/(^{2}m)\) must be constant. But \( m=(Cd/^{2})\) is not a constant independent of \(d\) and \(\). Thus we have to use the generalization bound with \(\) that fortunately is within a polynomial factor of optimal for the full range of \(m\). Let us also comment that if the lower bound for AdaBoost stated in (2) is tight also for \(\)-margin voting classifiers, i.e. matched by an upper bound, then it suffices to take a majority of 3 AdaBoosts for optimal sample complexity.

This concludes the description of the high level ideas in our proof.

### Formal Analysis

We now give the formal details of the proof. We start by introducing some notation.

Preliminaries.For a hypothesis set \(\), we let \(()\) denote the set of _linear_ classifiers using hypothesis from \(\) that is

\[()=\{f\{-1,1\}^{}:f=_{h} _{h}^{f}h, h,_{h}^{f} 0,_{h} _{h}^{f}=1\}.\]

Note that we have termed these _linear_ classifiers rather than voting classifier, to distinguish that we have not yet applied a \(()\) and insist on normalizing the coefficients so they sum to \(1\). We define the \(\) function as being 1 when the value is non-negative (so also \(1\) when \(x=0\)) and \(-1\) when negative.

We let \(c\{-1,1\}^{}\) be a true labeling that we are trying to learn. For a distribution \(\) over \(\), we define the expected loss of \(f[-1,1]^{}\) as \(_{}(f):=_{X}[1\{(f)(X) c(X)\}]\) and we will use \(S^{m}\) to denote a point set of \(m\) i.i.d. samples from \(\) i.e. \(S^{m}\) (we see the point set as a vector so we allow repetition of points). Define for any \(k\) the majority of \(k\) linear classifiers \(f_{1},,f_{k}[-1,1]^{}\) as \(Maj(f_{1},,f_{k})(x)=(_{i}(f_{i}(x)))\). Let \(s\) be a set of points, i.e. \(s_{i=1}^{}^{i}\) and \(c(s)\{-1,1\}^{|s|}\) the labeling of the points that \(s\) contains with \(c\), that is \(c(s)_{i}=c(s_{i})\). We define a \(\)-margin classifier algorithm \(f:_{i=1}^{}(\{-1,1\})^{i}[-1,1]^{ }\) to be a mapping that takes as input a point set with labels \((s,c(s))_{i=1}^{}(\{-1,1\})^{i}\) and outputs a function \(f(s,c(s))()\) from \(\) to the interval \([-1,1]\), where \(f(s,c(s))()\) is such that for \(x s\), \(f(s,c(s))(x)c(x)\). In the following we will use \(f_{s}\) to denote \(f(s,c(s))\) and write \(f()\) if for any \((s,c(s))_{i=1}^{}(\{-1,1\})^{i}\) we have that the output of the \(\)-margin classifier algorithm \(f(s,c(s))\) is in \(()\).

Analysis.We now prove Theorem 1, which is a direct consequence of the following Corollary 2. Corollary 2 states that running a \(\)-margin classifier algorithm on \(5\) disjoint training sets of size \(m\) and forming the majority vote of the produced \(5\) classifiers, has the optimal \(O(d/(^{2}m))\) expected error. Since AdaBoost, after \(O((m)/^{2})\) iterations, has \(()\) margins on all points  [Section 5.4.1], Corollary 2 gives the claim in Theorem 1. Alternatively one could run AdaBoost\({}_{v}^{*}\) instead of AdaBoost. The proof of Corollary 2 follows the method used in  where the authors show a similar bound for PAC learning in the realizable setting. We now state Corollary 2.

**Corollary 2**.: _For any distribution \(\) over \(\), hypothesis set \(\) with VC-dimension \(d\), i.i.d. point sets \(S_{1},,S_{5}\) from \(^{m}\), margin \(0< 1\) and \(f()\) being a \(\)-margin classifier algorithm, we have that_

\[_{S_{1},,S_{5}^{m}}[_{}(Maj(f_{S_{1}},,f_{S_{5}}))]=O(m}).\]

The result in Corollary 2 is primarily a consequence of the following Lemma 3, which says that, in expectation, the probability that \(f_{S_{1}},f_{S_{2}},f_{S_{3}}\) all misclassifying a sample from \(\) is \(O(d/(^{2}m))\). We now state Lemma 3 and give the proof of Corollary 2. We postpone the proof of Lemma 3 to later in this section.

**Lemma 3**.: _For any distribution \(\) over \(\), hypothesis set \(\) with VC-dimension \(d\), i.i.d. point sets \(S_{1},S_{2},S_{3}\) from \(^{m}\), margin \(0< 1\) and \(f()\) being a \(\)-margin classifier algorithm we have that_

\[_{S_{1},S_{2},S_{3}^{m}}[_{X D} [_{i=1}^{3}\{(f_{S_{i}}(X)) c(X)\}]]=O (m}).\]

Proof of Corollary 2.: For the majority of \(f_{S_{1}},,f_{S_{5}}\) to fail on an \(x\), it must be the case that at least \(3\) of the trained \(\)-margin classifiers \(f_{S_{i}}\) have \((f_{S_{i}}(x)) c(x)\). Using this combined with the \(S_{i}\)'s being i.i.d. we get that

\[_{S_{1},,S_{5}^{m}}[ _{}(Maj(f_{S_{1}},,f_{S_{5}}))]\] \[ _{1 j_{1}<j_{2}<j_{3} 5}_{S_{j_{1}},S_{j_{2}},S_{j_{3} }^{m}}[_{X D}[_{i=1}^{3}\{(f_{S_{j_{i}}}(X)) c(X)\}]]\] \[ _{S_{1},S_{2},S_{3}^{m}}[_ {X D}[_{i=1}^{3}\{(f_{S_{i}}(X)) c(X)\}] ]_{1 j_{1}<j_{2}<j_{3} 5}1.\]

Now using Lemma 3 and \(=O(1)\), we get that the above is \(O(m})\) as claimed.

We now move on to prove Lemma 3. For this we need Lemma 4 which we now state and give the proof in Appendix A.

**Lemma 4**.: _Let \(a>1\) denote a universal constant. For \(\) a distribution, \(R\) a subset of \(\) such that \([R]:=_{X}[X R] 0\), hypothesis set \(\) with VC-dimension \(d\), \(S\) a point set of \(m\) i.i.d. points from \(\), margin \(0< 1\) and \(f()\) being a \(\)-margin classifier algorithm we have that_

\[_{S}[_{X_{R}}[1\{f_{S}(X) c( X)\}]]=_{S}[_{_{k}}(f_{S}) ][R]^{2}m}}.\]

_where we use \(_{R}\) to denote the conditional distribution on the subset \(R\). That is, for any measurable function \(g\), \(_{X_{R}}[g(X)]:=_{X}[g(X)1\{X R\}]/_{X}[X R]\)._

Proof of Lemma 3.: For \(x\) let \(p_{x}=_{S^{m}}[1\{f_{S}(x) c(x)\}]\) and define for \(i=1,\) the sets \(R_{i}=\{x:p_{x}(2^{-i},2^{-i+1}]\}\). Now using Tonelli, and that \(S_{1},S_{2},S_{3}\) are i.i.d. with distribution \(^{m}\), and that \(p_{x} 2^{-i+1}\) for \(x R_{i}\) we get that

\[_{S_{1},,S_{3}^{m}}[ _{X}[_{i=1}^{3}\{f_{S_{i}}(X) c(X)\}]]\] \[= _{X}[_{S_{1},,S_{3} ^{m}}[1\{_{i=1}^{3}\{f_{S_{i}}(X) c(X)\}\}]]\] \[= _{X}[p_{X}^{3}]=_{i=1}^{ }_{X}[p_{X}^{3} X R_{i}] [X R_{i}] 2^{3}_{i=1}^{}2^{-3i} [X R_{i}],\]

thus if we can show that there exists a universal constant \(c^{}>0\) such that \(_{X}[X R_{i}]d2^{2 i}}{^{2}m}\) we get that

\[_{S_{1},,S_{3}}[_{X}[_ {i=1}^{3}\{f_{S_{i}}(X) c(X)\}]] 2^{3}d}{ ^{2}m}_{i=1}^{}2^{-i}=O(m}),\]

and we are done. Thus assume for contradiction that \(_{X}[X R_{i}]>d2^{2 i}}{^{2}m}\), for \(c^{}>1\) to be chosen large enough. Using Lemma 4 we have that there exist a universal constant \(a>1\) such that

\[_{S^{m}}[_{_{k}}(f_{S}) ][R_{i}]^{2}m}}.\]

By Tonelli, the definition of \(p_{x}\) and that for \(x R_{i}\) we have \(p_{x}(2^{-i},2^{-i+1}]\) we get that

\[_{S^{m}}[_{_{k}}(f_{S}) ]=_{X_{R_{i}}}[_{S^{m}}[1\{f_{S}(X) c(X)\}]]=_{X_{R_{i}}} [p_{X}] 2^{-i}.\]

Combining the above lower and upper bound on \(_{S^{m}}[_{_{k}}]\) and \(_{X}[X R_{i}]>d2^{2i}}{ ^{2}m}\) we get that

\[1 2^{i}[R_{i}]^{2}m}} 2^{i} d2^{2i}}{^{2}m}^{2}m}}}},\]

which for \(c^{}\) sufficiently large is strictly less than \(1\), thus we reached a contradiction. Hence it must be the case that \(_{X}[X R_{i}]d2^{2i} }{^{2}m}\), which concludes the proof of Lemma 3. 

## 4 Experiments

In this section, we present the results of our pilot empirical study between the different sample optimal weak-to-strong learners. We compare the algorithms on five different data sets. The first four are standard binary classification data sets and are the same data sets used in , whereas the last is a synthetic binary classification data set developed from the lower bound  showing that AdaBoost is sub-optimal. For all real world data sets, we have shuffled the samples and randomly set aside 20% to use as test set. The weak learner we use for these is the scikit-learn DecisionTreeClassifier with max_depth=1. This is default for the implementation of AdaBoost in scikit-learn, which is the implementation used in our experiments. We describe the data sets in greater detail below.

* **Higgs**: This data set represents measurements from particle detectors, and the labels tells whether they come from a process producing Higgs bosons or if they were a background process. The data set consists of 11 million labeled samples. However, we focus on the first 300,000 samples. Each sample consists of 28 features, where 7 of these are derived from the other 21.
* **Boone**: In this data set, we try to distinguish electron neutrinos from muon neutrinos. The data set consists of 130,065 labeled samples. Each sample consists of 50 features.
* **Forest Cover**: In this data set, we try to determine the forest cover type of 30 x 30 meter cells. The data set actually has 7 different forest cover types, so we have removed all samples of the 5 most uncommon to make it into a binary classification problem. This leaves us with 495,141 samples. Each sample consists of 54 features such as elevation, soil-type and more.
* **Diabetes**: In this data set, we try to determine whether a patient has diabetes or not from features such as BMI, insulin level, age and so on. This is the smallest real-world data set, consisting of only 768 samples. Each sample consists of 8 features.
* **Adversarial**: This data set, as well as the weak learner, have been developed using the lower bound instance in . Concretely, the data set consists of 1024 uniform random samples from the universe \(=\{1,,350\}\). Every element of the input domain has the label 1, but all weak-to-strong learners are run simply by giving them access to a weak learner. The weak learner is adversarially designed. When it is queried with a weighing of the training data set, it computes the set \(T\) containing the first 20 points from the input domain that receive zero mass under the query weighing. It then searches through a set of hypotheses (chosen randomly) and returns the hypothesis with the worst performance on \(T\), while respecting that it must have error no more than \(1/2-\) under the query weighing and having at least \(1/2+\) error on \(T\). Finally, the hypothesis set contains an additional special hypothesis \(h_{0}\) that is correct (returns 1) on all but the last 20 points of the input domain. This hypothesis is used to handle queries where none of the randomly chosen hypotheses have advantage \(\). We refer the reader to  for further details and intuition on why this construction is hard for AdaBoost.

The data sets represent both large and small training sets. For each data set, we run simple AdaBoost (accuracy shown as a blue horizontal line in the plots), BaggedAdaBoost (Algorithm 4), LarsenRitzert (Algorithm 3), and our new Majority-of-X (for X varying from 3 to 29). In our experiments, we vary the number of AdaBoosts trained by each weak-to-strong learner from \(3\) to \(29\), instead of merely following the theoretical suggestions. Each of these voting classifiers is then trained for 300 rounds on its respective input. This has been repeated 5 times with different random seeds, so the plots indicate the average accuracy across these 5 runs. For Algorithm 3 that creates \(m^{_{4}3}\) sub-samples, we use the full set of sub-samples on the two small data sets Diabetes and Adversarial. For the three large data sets Higgs, Boone and Forest Cover, this creates a huge overhead in running time and we instead randomly sample without replacement from among the sub-samples resulting from the SubSample procedure (Algorithm 2). This is the reason for the non-constant behavior of this algorithm in the corresponding experiments. For BaggedAdaBoost, we have chosen to sample 95% of the samples (with replacement) in our experiments. The results of the experiments on the three large data sets are shown in Fig. 1.

The results in Fig. 1 gives an initial suggestion that our new algorithm with disjoint training sets might have an advantage on large data sets. Quite surprisingly, we see that the two other optimal weak-to-strong learners perform no better, or even worse, than standard AdaBoost. Experiments on the small Diabetes data set, as well as the Adversarially designed data set, are shown in Fig. 2.

The results in Fig. 2 suggest that our new algorithm may perform poorly on small training sets. This makes sense, as the training data for each weak learner is extremely small on these data sets. Instead, we find that the Bagging based variant outperforms classic AdaBoost. Since Bagging has a relative small overhead compared to simple AdaBoost, this suggests running both our new algorithm Majority-of-X and BaggedAdaBoost and using a validation set to pick the best classifier. We hope these first experiments may inspire future and more extensive empirical comparisons between the various weak to strong learners.

Figure 1: Top is Higgs, Left plot is Boone. Right plot is Forest Cover

Figure 2: Left plot is Diabetes. Right plot is Adversarial

## 5 Limitations

Our main results are proved under the theoretical assumption of i.i.d. training samples as well as access to a weak-learner that always obtains an advantage of \(\) over random guessing. Since these might not be realistic assumptions, we also performed an empirical evaluation of our algorithm. Due to computational constraints, we have only been able to run experiments on 5 data sets. We have thus been careful not to over-emphasize the practical implications of our results. In all circumstances, we view the theoretical contributions as the main novelty of this work.