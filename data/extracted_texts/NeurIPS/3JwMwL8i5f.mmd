# Qihao Liu\({}^{1,2*}\), Zhanpeng Zeng\({}^{1,3*}\), Ju He\({}^{1,2*}\), Qihang Yu\({}^{1}\), Xiaohui Shen\({}^{1}\), Liang-Chieh Chen\({}^{1}\)

Alleviating Distortion in Image Generation via Multi-Resolution Diffusion Models and Time-Dependent Layer Normalization\({}^{1}\) ByteDance \({}^{2}\) Johns Hopkins University \({}^{3}\) University of Wisconsin-Madison

* equal contribution

https://qihao067.github.io/projects/DiMR

This paper presents innovative enhancements to diffusion models by integrating a novel multi-resolution network and time-dependent layer normalization. Diffusion models have gained prominence for their effectiveness in high-fidelity image generation. While conventional approaches rely on convolutional U-Net architectures, recent Transformer-based designs have demonstrated superior performance and scalability. However, Transformer architectures, which tokenize input data (via "patchification"), face a trade-off between visual fidelity and computational complexity due to the quadratic nature of self-attention operations concerning token length. While larger patch sizes enable attention computation efficiency, they

Figure 1: (Top) Randomly sampled \(512 512\) images generated by the proposed DiMR. (Bottom) Random samples of the **low visual fidelity**\(256 256\) images generated by DiMR and DiT . To detect low visual fidelity images for both models, a classifier-based rejection model is employed (with the same rejection rate). DiMR generates images with higher fidelity and less distortion than DiT.

struggle to capture fine-grained visual details, leading to image distortions. To address this challenge, we propose augmenting the **D**iffusion model with the **M**ulti-**R**esolution network (DiMR), a framework that refines features across multiple resolutions, progressively enhancing detail from low to high resolution. Additionally, we introduce Time-Dependent Layer Normalization (TD-LN), a parameter-efficient approach that incorporates time-dependent parameters into layer normalization to inject time information and achieve superior performance. Our method's efficacy is demonstrated on the class-conditional ImageNet generation benchmark, where DiMR-XL variants surpass previous diffusion models, achieving FID scores of 1.70 on ImageNet \(256 256\) and 2.89 on ImageNet \(512 512\). Our best variant, DiMR-G, further establishes a state-of-the-art 1.63 FID on ImageNet \(256 256\).

## 1 Introduction

Diffusion and score-based generative models [23; 53; 55; 19; 54] have demonstrated promising results for high-fidelity image generation [7; 38; 44; 46; 48]. These models generate images through an iterative process of gradually denoising Gaussian random noise to create realistic samples Central to this process is a neural network, tasked with denoising the inputs through a mean squared error loss function. Traditionally, U-Net architectures  (enhanced with residual blocks  and self-attention blocks  at lower resolution) have been prevalent. However, recent advancements have introduced Transformer-based designs [59; 8], offering superior performance and scalability.

In practice, Transformer-based architectures face the challenge of balancing visual fidelity and computational complexity, primarily stemming from the self-attention operation and the patchification process employed for downsampling inputs  (_i.e._, a smaller patch size results in better visual fidelity at the cost of a longer token length and thus more computational complexity by the self-attention operation). The quadratic complexity inherent in self-attention concerning token length necessitates larger patch sizes to facilitate more efficient attention computations. However, the adoption of large patch sizes inevitably compromises the model's capacity to capture finer visual details, resulting in image distortion (_i.e._, low visual fidelity). This dilemma prompts DiT  to conduct a systematic study on the impact of patch size on image distortion, as depicted in Fig. 7 of their paper. Consequently, they settled on a patch size of 2 for their final design. Similarly, U-ViT  opted for a patch size of 2 for input sizes of \(256 256\) and a patch size of 4 for \(512 512\) images, effectively balancing the token length for different image sizes. Despite these meticulous adjustments, the generated results still exhibit discernible image distortion, as illustrated in Fig. 1.

One simplistic solution to mitigate image distortion in Transformer-based architectures is adopting a patch size of 1, but this significantly increases computational complexity. Instead, inspired by the success of _image cascade_[20; 48] which generate images at increasing resolutions, we propose a _feature cascade_ approach that progressively upsamples lower-resolution features to higher resolutions, alleviating distortion in image generation. In this study, we present DiMR, which enhances the **D**iffusion model with a **M**ulti-**R**esolution network. DiMR tackles the challenge of balancing visual detail capture and computational complexity through improvements in the denoising backbone architecture. We employ a multi-resolution network design that comprises multiple branches to progressively refine features from low to high resolution, preserving intricate details within the input data. Specifically, the first branch handling the lowest resolution incorporates Transformer blocks , leveraging the superior performance and scalability observed in prior works [2; 41], while the remaining branches utilize ConvNeXt blocks , which are efficient for high resolution features. The network processes inputs progressively from the lowest resolution, with additional features from the preceding resolution. The last branch refines features at the same spatial resolution as the input, effectively mitigating image distortion arising from the patchification.

Additionally, we observe that existing time conditioning mechanisms [42; 25; 7], such as adaptive layer normalization (adaLN) , are parameter-intensive. In contrast, we propose a more efficient approach, Time-Dependent Layer Normalization (TD-LN), that integrates time-dependent parameters directly into layer normalization , achieving superior performance with fewer parameters.

To demonstrate its effectiveness, we evaluate DiMR on the class-conditional ImageNet generation benchmark . On ImageNet \(64 64\), DiMR-M (133M parameters) and DiMR-L (284M), without classifier-free guidance , achieve FID scores of 3.65 and 2.21, respectively, outperforming the Transformer-based U-ViT-M/4 and U-ViT-L/4 by 2.20 and 2.05 FID. On ImageNet \(256 256\), DiMR-XL (505M) achieves FID scores of 4.50 without classifier-free guidance and 1.70 with classifier-free guidance. Meanwhile, DiMR-G (1.06B) further improves the FID scores to 3.56 without classifier-free guidance and 1.63 with classifier-free guidance. On ImageNet \(512 512\), DiMR-XL (525M) achieves FID scores of 7.93 and 2.89, without and with classifier-free guidance, respectively. These results demonstrate superior performance compared to all previous methods, despite having similar or smaller model sizes, establishing a new state-of-the-art performance. In summary, our main contributions are as follows:

1. We develop effective strategies for integrating multi-resolution networks into diffusion models, introducing the novel feature cascade approach that captures visual details and reduces image distortions in high-fidelity image generation.
2. We propose TD-LN, a simple yet effective parameter-efficient method that explicitly encodes crucial temporal information into the diffusion model for enhanced performance.
3. We introduce DiMR, a novel architecture that enhances diffusion models with the proposed multi-resolution network and the TD-LN. DiMR demonstrates superior performance on the class-conditional ImageNet generation benchmark compared to existing methods.

## 2 Related Work

**Diffusion models.** Diffusion [53; 19] and score-based generative models [23; 55], centered around a denoising network trained to progressively produce denoised variants of the input data. They have driven significant advances across various domains [34; 29; 58; 56; 62; 40; 61], particularly excelling in high-fidelity image generation tasks [38; 44; 46; 48]. Key advancements in diffusion models include the improvements in sampling methodologies [19; 54; 26] and the adoption of classifier-free guidance . Latent Diffusion Models (LDMs) [46; 41; 43; 63] address the challenges of high-resolution image generation by conducting diffusion in the lower-resolution latent space via a pre-trained autoencoder . In this study, our focus lies on designing the denoising network within diffusion models and examining its applicability across both pixel diffusion models and LDMs.

**Architecture for diffusion models.** Early diffusion models employed convolutional U-Net architectures  as the denoising network, which were subsequently strengthened through explorations of either computing attention [7; 39] or performing diffusion directly at multiple scales [20; 13]. Recently, Transformer-based architectures [2; 41; 14] along with other explorations [64; 57; 27] have emerged as promising alternatives, showcasing superior performance and scalability. Specifically, for Transformer-based architectures, U-ViT  treats all inputs, including time, condition, and noisy image patches, as tokens and employs long-skip connections between shallow and deep transformer layers inspired by U-Net. Similarly, DiT  leverages Vision Transformers (ViTs)  to systematically explore the design space under the Latent Diffusion Models (LDMs) framework, demonstrating favorable properties such as scalability, robustness, and efficiency. In this study, we introduce the Multi-Resolution Network as a new denoising architecture for diffusion models, featuring a multi-branch design where each branch is dedicated to processing a specific resolution.

**Time conditioning mechanisms.** Following the widespread usage of adaptive normalization  in GANs [3; 25], diffusion models similarly explore adaptive group normalization (AdaGN)  and adaptive layer normalization (AdaLN)  to encode the time information. These methods share the similarity in requiring computing a linear projection of the timestep, which significantly increases the parameter of the model. Recently, U-ViT  introduces a new strategy to simply treat time as a token and process with Transformer blocks. Even though effective, it is not feasible to treat time as input for other blocks (_e.g._, ConvNeXt blocks ). In this study, we introduce Time-Dependent Layer Normalization (TD-LN), a parameter-efficient approach that explicitly encodes temporal information by incorporating time-dependent parameters into layer normalization .

## 3 Preliminary

**Diffusion models [53; 19]** are characterized by a forward process that gradually injects noises to destroy data \(_{0} q(_{0})\), and a reverse process that inverts the forward process corruptions. Formally,the noise injection process is formulated as a Markov chain:

\[q(_{1:T}|_{0})=_{t=1}^{T}q(_{t}|_{t-1}),\]

where \(_{t}\) for \(t[1:T]\) is a family of random variables obtained by progressively injecting Gaussian noise into the data \(_{0}\), and \(q(_{t}|_{t-1})=(_{t}|}_{t- 1},_{t})\) represents the noise injection schedule such that \(_{t}+_{t}=1\). In the reverse process, a Gaussian model \(p(_{t-1}|_{t})=(_{t-1}|_{t}(_{t}), _{t}^{2})\) is learned to approximate the ground truth reverse transition \(q(_{t-1}|_{t})\). This step is equivalent to predicting the denoised variant of the input \(_{t}\), and thus the learning objective can be further simplified to predicting the noise \(_{t}\) via a noise prediction network (with parameters \(\)), _i.e._, \(_{}(_{t})\): \(_{}_{t,_{0},_{t}}\|_{t}-_{}(_{t})\|_{2}^{2}\). The condition information \(c\) can be incorporated into the learning objective when the diffusion process is guided by the class condition , _i.e._, \(_{}(_{t},c)\): \(_{}_{t,_{0},c_{t}}\|_{t}-_{}(_{t},c)\|_{2}^{2}\). Traditionally, learning this objective relies on the U-Net , with the condition \(c\) encoded into the U-Net through various methods [2; 7; 41; 46].

**Classifier-free guidance **, an effective approach to generating high-fidelity samples, combines the score estimates from a conditional diffusion model and a jointly trained unconditional diffusion model. Formally, the classifier-free guidance encourages the sampled \(\) to have high \(p(|c)\) by setting: \(_{}(_{t},c)=_{}(_{t}, )+s_{} p(|c)_{}(_{t}, )+s(_{}(_{t},c)-_{}(_{t},))\), where \(s\) is the scale of guidance, \(s 1\), and setting \(s=1\) becomes the standard sampling. Following prior arts [2; 41], we also exploit classifier-free guidance.

## 4 Method

In this section, we begin by introducing the proposed Multi-Resolution Network (Sec. 4.1), which progressively refines features from low to high resolution. Next, we detail the proposed Time-Dependent Layer Normalization (Sec. 4.2). We then discuss several micro-level design enhancements (Sec. 4.3). Finally, we present the DiMR model variants, scaled for different model sizes (Sec. 4.4).

### Multi-Resolution Network

**Motivation.** There is a trade-off between generation quality and computational complexity as depicted in the ablation study in Fig. 7 of DiT . Their careful study revealed that Transformer-based diffusion models with smaller patch sizes operate at higher feature resolutions and produce better generation quality but incur higher computational costs due to the increased input size.

We conjecture that the distortion in U-ViT  and DiT  arises from their oversimplified upsampling module, where lower-resolution feature maps are upsampled directly to the target size of the generated images via a simple linear layer (for increasing channels) and pixel shuffling upsampling . Inspired by _image cascade_[20; 48]--a method for generating high-resolution images by using multiple cascaded diffusion models to produce images of progressively increasing resolution--we propose _feature cascade_, which progressively upsample lower-resolution features to higher resolutions to alleviate distortion in image generation. The _feature cascade_ is implemented through the proposed Multi-Resolution Network, deployed as the denoising network in diffusion models.

**Overview of multi-branch design.** The proposed Multi-Resolution Network comprises \(R\) branches, where each branch is dedicated to process a specific resolution. For the \(r\)-th branch (\(r\{1,,R\}\)), the input features are processed by a convolution with a kernel size of \(2^{R-r} 2^{R-r}\) and a stride of \(2^{R-r}\), which effectively patchifies the input for different resolutions. The first branch (_i.e._, \(r=1\)) downsamples the input features by a factor of \(2^{R-1}\), and subsequently handles the lowest resolution features via the Transformer blocks , which enjoys the superior performance and scalability of self-attention operations [2; 41]. For higher resolution features, the remaining branches utilize the ConvNeXt blocks , which leverages the efficiency of large kernel depthwise-convolution operations [22; 50]. Intermediate features from the previous branch (last block's output) are upsampled and added with the inputs for the current branch. Following U-ViT , all branches employ the long skip connections and an additional \(3 3\) convolution in the end. The final branch (_i.e._, \(r=R\)) refines features at the same spatial resolution as the input.

**Design details.** For \(r\{1,,R\}\), we define the \(r\)-th branch as a function \(f_{,r}\) as follows:

\[}(_{t},c,r),_{r}=f_{,r}(_{t}, _{r-1},t,c),\] (1)

where the function \(f_{,r}\), parameterized by \(\) and \(r\), takes as input the input features \(_{t}\) and the features from previous resolution \(_{r-1}\) (also time \(t\) and condition \(c\)). The outputs of \(f_{,r}\) contain the intermediate features \(_{r}\) (last block's output, before the final \(3 3\) convolution) and the predicted noise \(}(_{t},c,r)\) for the resolution specific to \(r\)-th branch.

To process the inputs, the function \(f_{,r}\) first patchifies the input features \(_{t}\), and adds it with the upsampled features \(_{r-1}\) from the previous resolution \(r-1\). The resulting features are then processed by either a stack of Transformer blocks (when \(r=1\)) or ConvNeXt blocks (when \(r 1\)) with another \(3 3\) convolution added in the end. Formally, we have:

\[f_{,r}(_{t},_{r-1},t,c)=_{3 3}(g_{ {},r}((_{t})+(_{r-1}),t,c)),\] (2)

where \(_{3 3}\) is \(3 3\) convolution, Patchify is patchification instantiated via a convolution with a kernel size of \(2^{R-r} 2^{R-r}\) and a stride of \(2^{R-r}\), Upsample is the pixel shuffling upsampling operation , and \(g_{,r}\) is a stack of Transformer blocks or ConvNeXt blocks, depending on \(r\), augmented with the long skip connections . For the first branch (_i.e_., \(r=1\)), \(_{0}\) is set to zero. The noise prediction \(}(_{t},c,R)\) at the last branch (_i.e_., \(r=R\)) is used for the iterative diffusion process. We illustrate the proposed Multi-Resolution Network with three branches in Fig. 2. Note that the input features can be either raw image pixels or latent features after VAE , where the latent features facilitate efficient high-resolution image generation .

### Time-Dependent Layer Normalization

**Motivation.** Time conditioning plays a crucial role in the diffusion process. While the ConvNeXt blocks in the Multi-Resolution Network efficiently process high-resolution features, they also present a new challenge: _How do we inject time information into ConvNeXt blocks?_ To address this, we carry out a systematic ablation study (details in Tab. 2), starting with the U-ViT architecture , which encodes time information via an in-context conditioning mechanism, Time-Token (_i.e_., treating time as input token to Transformer). Unlike Transformer blocks, however, it is not feasible to add a time token directly to ConvNeXt blocks, which can only process 2D features. As an alternative, we explored the adaptive normalization mechanism, particularly the adaptive layer normalization

Figure 2: **Model overview. We propose DiMR that enhances Diffusion models with a Multi-**R**esolution Network. In the figure, we present the Multi-Resolution Network with three branches. The first branch processes the lowest resolution (4 times smaller than the input size) using powerful Transformer blocks, while the other two branches handle higher resolutions (2 times smaller than the input size and the same size as the input, respectively) using effective ConvNeXt blocks. The network employs a _feature cascade_ framework, progressively upsampling lower-resolution features to higher resolutions to reduce distortion in image generation. The Transformer and ConvNeXt blocks are further enhanced by the proposed Time-Dependent Layer Normalization (TD-LN), detailed in Fig. 4.**AdaLN-Zero . Interestingly, we found AdaLN-Zero to be more effective than Time-Token on the ImageNet \(64 64\) benchmark, contradicting U-ViT's findings on CIFAR-10  (See Fig. 2(b) in ). However, AdaLN-Zero significantly increases model parameters (from 130.9M to 202.4M) due to the Multi-Layer Perceptron (MLP) used to adaptively learn the scale and shift parameters.

To understand how time information is utilized in adaLN-Zero, we conducted Principal Component Analysis (PCA) on the learned scale \((_{1},_{2})\) and shift \((_{1},_{2})\) parameters from a parameter-heavy MLP in adaLN-Zero using a pre-trained DiT-XL/2  model, as shown in Fig. 3. Intriguingly, we observed that the learned parameters can be largely explained by two principal components, suggesting that a parameter-heavy MLP might be unnecessary and that a simpler function could suffice. To address the increase in parameters, we introduce Time-Dependent Layer Normalization (TD-LN), a straightforward and lightweight method to inject time into layer normalization. We detail the designs below.

**adaLN design.** Building on layer normalization , adaLN additionally learns the scale parameter \(_{1}\) and shift parameter \(_{1}\) via an MLP from the sum of the embedding vectors of time \(t\) and class condition \(c\). Formally, given the input \(\) (ignoring the dependency on \(t\) for simplicity), we have:

\[_{1},_{1} =((t)+(c)),\] (3) \[ =_{1}(,,)+_{1},\] (4)

where \(_{1}\) and \(_{1}\) scale and shift the output from the layer normalization LN, the function Embed generates the embedding vectors for time \(t\) and class condition \(c\), and \(\) is the output. The LN has its own learnable affine transform parameters \(\) and \(\). adaLN-Zero  introduces another scale parameter \(_{1}\), obtained from the same MLP for zero initialization of a residual block . We note that DiT employs two sets of \((_{1},_{1},_{1})\) and \((_{2},_{2},_{2})\) in a Transformer block, as shown in Fig. 4.

**TD-LN design.** In contrast, our proposed method, Time-Dependent Layer Normalization (TD-LN), directly incorporates time \(t\) into layer normalization by formulating LN's learnable affine transform parameters \(\) and \(\) as functions of \(t\). Motivated by the observation that the learned parameters of adaLN-Zero can be largely explained by two principal components, we propose to model this through the linear interpolation of two learnable parameters \(p_{1}\) and \(p_{2}\). Formally,

\[s(t) =(w t+b),\] (5) \[(t) =s(t) p_{1}+(1-s(t)) p_{2},\] (6)

where \(s(t)\) is a transformation of time \(t\), \(w\) and \(b\) are the learnable weight and bias, and Sigmoid is the sigmoid activation function. The other affine transform parameter, \((t)\), is formulated similarly with

Figure 4: **Time conditioning mechanisms.** (Left) adaLN-Zero  learns scale and shift parameters (\(_{i}\), \(_{i}\), \(_{i}\), \(i=\{1,2\}\)) using parameter-heavy MLPs. (Right) The proposed Time-Dependent Layer Normalization (TD-LN) formulates the LN statistics as functions of time (\((t)\), \((t)\)), making it parameter-efficient.

Figure 3: **Principal Component Analysis (PCA) of learned scale and shift parameters in adaLN-Zero .** We conduct PCA on the learned scale (\(_{1}\), \(_{2}\)) and shift (\(_{1}\), \(_{2}\)) parameters obtained from a parameter-heavy MLP in adaLN-Zero using a pre-trained DiT-XL/2  model. The vertical axis represents the explained variance ratio of the corresponding Principal Components (PCs). Our observations reveal that the learned parameters can be largely explained by two principal components, suggesting the potential to approximate them by a simpler function.

another two parameters \(p_{3}\) and \(p_{4}\). Consequently, the proposed TD-LN is represented as follows:

\[=(,(t),(t)).\] (7)

Unlike adaLN, which learns additional re-scaling \(_{1}\) and re-centering \(_{1}\) variables, TD-LN directly incorporates the time-dependent \((t)\) and \((t)\) into layer normalization, eliminating the need for a parameter-heavy MLP. Furthermore, TD-LN is a versatile mechanism, enabling the injection of time information into both Transformer blocks and ConvNeXt blocks. In DiMR, we replace all layer normalizations with the proposed TD-LN, and treat the class condition \(c\) as input token for the Transformer blocks.

### Micro-Level Design

In addition to the major architectural modifications discussed earlier, we also explore several micro-level design changes to enhance model performance.

**Multi-scale loss.** The proposed Multi-Resolution Network comprises \(R\) branches, each dedicated to processing features at a specific resolution, naturally producing multi-scale outputs. To leverage this, we explore training the network with a multi-scale loss \(_{multi}\), which is a weighted sum of mean squared error loss at each resolution. Formally, the multi-scale loss is defined as follows:

\[_{multi}=_{r=1}^{R}_{r}_{t,_{0},c,_{t}}||(_{t},r)-_{ }(_{t},c,r)\|_{2}^{2},\] (8)

where \(_{r}\) is the loss weight for the \(r\)-th branch, and \((_{t},r)\) downsamples the target noise \(_{t}\) by a factor of \(2^{R-r}\) using average pooling (the \(R\)-th branch, containing no downsampling, is our final output). We set \(_{r}=1/(2^{R-r} 2^{R-r})\), motivated by the prior work  which found that the signal to noise ratio increases by a factor of \(k^{2}\) when the noised input is average-pooled with a \(k k\) kernel. Intuitively, our target output (the \(R\)-th branch) has a loss weight \(_{R}=1\), and the loss weights for the intermediate outputs are scaled down quadratically based on the downsampling factor.

**Gated linear unit.** In the proposed Multi-Resolution Network, both Transformer and ConvNeXt blocks include an MLP block, consisting of two linear transformations with GeLU activation  in between. We also explore replacing the first linear layer with GeGLU , an enhanced version of the Gated Linear Unit (GLU)  that has \(2\) expansion rate.

### DiMR Model Variants

We now introduce the DiMR model variants, scaled appropriately for different model sizes. We present four sizes: DiMR-M (medium, 133M parameters), DiMR-L (large, 284M parameters), DiMR-XL (extra-large, around 500M parameters) and DiMR-G (giant, 1.06B parameters). Three hyperparameters--\(R\) (number of branches), \(N\) (number of layers per branch), and \(D\) (hidden size per branch)--define each DiMR variant. Specifically, \(R\) determines the number of branches in the multi-resolution network. We append 2R or 3R to the model name to indicate whether two or three branches are used. The number of layers \(N\) in the multi-resolution network is represented as a tuple of \(R\) numbers, where the \(r\)-th number specifies the number of layers in the \(r\)-th branch. Similarly, the hidden size \(D\) is also a tuple of \(R\) numbers. We follow a straightforward scaling rule: most layers are stacked in the first branch, which is processed by Transformer blocks, while the remaining branches use only half the number of layers of the first branch. Additionally, when the resolution is doubled, the hidden size is reduced by a factor of two. The model variants details are presented in Tab. 4 in Sec. B in the Appendix.

## 5 Experimental Results

### Experimental Setup

**Datasets.** We consider class-conditional image generation tasks at \(64 64\), \(256 256\), and \(512 512\) resolutions on ImageNet-1K . For images at \(64 64\), we train DiMR on pixel space. For images at \(256 256\) and \(512 512\), following the baselines [2; 41], we utilize an off-the-shelf pre-trained variational autoencoder  from Stable Diffusion  to extract the latent representations sized at \(32 32\) and \(64 64\), respectively. Then we train our DiMR to model these latent representations.

**Evaluation.** We measure the model's performance using Frechet Inception Distance (FID) . We report FID on 50K generated samples to measure the image quality (_i.e_., FID-50K). To ensure fair comparisons, we follow the same evaluation suite as the baselines [7; 41] to compute the FID scores. We also report Inception Score  and Precision/Recall  in Sec. D as secondary metrics.

**Implementation details.** We use AdamW optimizer  with a constant learning rate of \(2 10^{-4}\) for most experiments, except for the \(64 64\) models where we use \(3 10^{-4}\). A batch size of 1024 is used for most architectures. For a fair comparison with DiT , we train the \(256 256\) and \(512 512\) models for 1M iterations, and also report results for 500K iterations to compare with U-ViT . We train the \(64 64\) models for 300K iterations, following the U-ViT protocol. _Our training hyperparameters are almost entirely retained from U-ViT . We did not tune learning rates, decay/warm-up schedules, Adam \(_{1}\)/\(_{2}\) values, or weight decays._ Further details on hyperparameters and configurations are provided in Sec. C in the Appendix.

### State-of-the-Art Diffusion Models

We compare DiMR with state-of-the-art diffusion models on ImageNet \(256 256\) and \(512 512\) in Tab. 1, and provide more comparisons with other types of generative models in Tab. 7 and Tab. 8 in the Appendix. Results on ImageNet \(64 64\) are reported in Tab. 6 in the Appendix. More random samples of the generated images are also presented in Fig. 7 to Fig. 18 in the Appendix.

**ImageNet \(256 256\).** From Tab. 0(a), we observe that our DiMR-XL/2R outperforms all previous diffusion-based models and achieves a state-of-the-art FID-50K score of 1.70. Specifically, with a comparable model size and equal or fewer training epochs, our model surpasses previous state-of-the-art transformer-based diffusion models, including U-ViT (1.77 _vs_. 2.29 with Classifier-Free Guidance  (CFG) and 4.87 _vs_. 6.58 without CFG) and DiT  (1.70 _vs_. 2.27 with CFG and 4.50 _vs_. 9.62 without CFG). Our best model, DiMR-G/2R, scales up to the billion-parameter level, setting a new state-of-the-art with an FID of 1.63 with CFG and 3.56 without CFG.

**ImageNet \(512 512\).** Our DiMR outperforms all previous diffusion-based models on ImageNet \(512 512\) and achieves a state-of-the-art FID-50K score of 2.89 as shown in Tab. 0(b). It is worth noting that, although both Gflops and model sizes are critical for improving performance, as discussed in the DiT paper , we still outperform it with only \(39.2\%\) of the GFLOPs and \(77.8\%\) of the model size, improving the FID-50K from 3.04 to 2.89. As transformers and diffusion models have demonstrated good scaling behavior, we believe that further scaling up our DiMR will lead to better performance, which we have left as future work.

### Alleviating Distortion

Transformer-based architectures encounter the challenge of balancing visual fidelity with computational complexity. Despite adopting a small patch size of 2, current models still struggle with distortions. To illustrate the effectiveness of DiMR in alleviating these distortions, we adopt a classifier-based rejection model following previous work . However, we diverge from previous approaches by _solely_ using the rejection model to analyze distorted images, rather than filtering out bad images and computing metrics only on selected 'good' images. It is important to note that all metrics in our paper are computed without using the rejection model to ensure fair comparisons.

  &  &  &  \\ Model & Epoch & \#Params. & Gflops & FID & \#/s CFG\({}_{}\) & FID\({}_{}\) & Model & Epoch & \#Params. & Gflops & FID (w/o CFG)\({}_{}\) & FID\({}_{}\) \\  ADM-U  & 396 & 608M & 742 & 7.49 & 3.94 & ADM & - & 422M & - & 23.24 & 7.72 \\ LDM-4  & 166 & 400M & 104 & 10.56 & 3.60 & ADM-U & 1081 & 731M & 2813 & 9.96 & 3.85 \\ U-ViT-H2  & 400 & 501M & 133 & 6.58 & 2.29 & U-ViT-L4  & 400 & 287M & 77 & - & 4.67 \\ DT-XL/2L  & 1399 & 675M & 119 & 9.62 & 2.27 & U-ViT-H4  & 400 & 501M & 133 & 15.70 & 4.05 \\ DMR-XL/2R (Ours) & 400 & 505M & 160 & 4.85 & 1.77 & DT-XL/2  & 599 & 675M & 525 & 12.03 & 3.04 \\ DiMR-XL/2R (Ours) & 800 & 505M & 160 & 4.50 & 1.70 & DMR-XL/3R (Ours) & 400 & 525M & 206 & 8.56 & 3.23 \\ DMR-G/2R (Ours) & 800 & 1.06B & 331 & **3.56** & **1.63** & DiMR-XL/3R (Ours) & 800 & 525M & 206 & **7.93** & **2.89** \\ 

Table 1: **Class-conditional image generation on ImageNet \(256 256\) and ImageNet \(512 512\). We report training epochs, number of parameters (#Params), GFLOPs, and FID-50K with and without Classifier-Free Guidance (CFG). Best results are marked in bold.**Specifically, we randomly generate 80K images for each model and utilize a pretrained Vision Transformer classifier  to identify low-fidelity images based on the predicted probabilities. Images with a probability below a threshold of 0.2 are considered low-fidelity or potentially distorted. Fig. 5 shows random samples of low-fidelity images detected by the classifier. However, we find that not all detected images are distorted; many are classified with low probability due to classifier errors. To accurately identify distorted images among those detected by the classifier, we conduct user studies where human evaluators manually assess the images. Images generated by all three methods are merged and presented, along with their corresponding class labels, to human evaluators, who are instructed to determine whether each image is distorted (_i.e_., identify low-fidelity images). Each image is evaluated by five different human evaluators. We consider the proportion of distorted images generated by different models, _i.e_. distortion rate. We compute three distortion rates, one for each model, from each evaluator based on the images they evaluate. The final distortion rate for each model is obtained by averaging the rates from all evaluators. As reported in Fig. 5, we observe that even among those low-fidelity images, only \(29.2\%\) of the images generated by DiMR are distorted, while previous methods yield much higher distortion rates of \(63.5\%\) and \(71.0\%\).

### Ablation Studies

We conduct the primary ablation experiments on ImageNet \(64 64\), progressively building on the baseline U-ViT-M/4  to validate the effectiveness of the proposed designs, leading to our final model, DiMR-M/3R, as presented in Tab. 2. Additionally, we explore alternative design choices on ImageNet \(256 256\) with DiMR-XL/2R, including adopting a pure convolutional architecture, replacing addition with concatenation in feature cascading, and introducing skip connections between branches, as shown in Tab. 3.

**AdaLN-Zero _vs_. TD-LN.** Since the time token used in U-ViT cannot be adopted for ConvNeXt blocks, we first apply AdaLN-Zero  to the original U-ViT and our multi-branch network. As observed in row 2 of Tab. 2, AdaLN-Zero slightly improves the performance of U-ViT from 5.85 to

 Model & AdaLN-Zero  & TD-LN & Multi-branch & GLU  & Multi-scale Loss & FID(\(\)) & \# Params. \\ 
1 Baseline (U-ViT-M/4 ) & & & & & & 5.85 & 130.9M \\
2 & & ✓ & & & & & 5.44 & 202.4M \\
3 & & ✓ & & ✓ & & & 7.91 & 217.9M \\
4 & & & ✓ & ✓ & & & 5.21 & 154.0M \\
5 & & ✓ & ✓ & ✓ & & 4.86 & 132.9M \\
6 DiMR-M/3R (Ours) & & ✓ & ✓ & ✓ & ✓ & 3.65 & 132.9M \\ 

Table 2: **Ablation study**. Beginning with the baseline, we verify the effectiveness of each component.

Figure 5: **DiMR alleviates distortions and improves visual fidelity. In this figure, we randomly visualize the detected low-fidelity images, identified by a pretrained classifier, which are generated by the best models from the baselines and our DiMR. The first column reports both their FID-50K scores and the proportion of distorted images based on human evaluation. DiMR demonstrates better generation performance and lower distortion rates than the baselines.**

5.44. However, it does not perform well on ConvNeXt blocks and thus decreases the performance from 5.44 to 7.91 (row 3). Additionally, AdaLN-Zero significantly increases the model size from 130.9M to 202.4M. In contrast, our TD-LN is more flexible and parameter-efficient: it efficiently provides time information to both Transformer blocks and ConvNeXt blocks, improving the FID-50K score from 7.91 to 5.21 (row 4), and also reduces the model size from 217.9M to 154.0M.

**GLU further reduces model size.** In Tab. 2, row 5 shows the improvement of GLU compared with the vanilla MLP block. We observe that using GLU slightly improves the performance from 5.21 to 4.86 and further reduces the model size from 154.0M to 132.9M.

**Multi-scale loss is critical for multi-resolution network.** Training a multi-resolution network presents additional challenges and can result in sub-optimal results. In Tab. 2, row 6 illustrates that our multi-scale loss significantly enhances the performance, achieving a FID-50K score of 3.65.

**Multi-branch design improves visual fidelity and alleviates distortions in image generations.** Finally, comparing the multi-branch design in row 6 (incorporating TD-LN, GLU, and multi-scale loss to facilitate training) with the baseline in row 1 reveals a significant improvement in FID-50K, from 5.85 to 3.65, with just a 1.5% increase in model size (130.9M to 132.9M). Additionally, from Fig. 5, it's evident that the multi-branch design generates images with higher fidelity and less distortion.

**Transformer is essential for low-resolution processing.** As shown in Table (a)a, replacing the Transformer blocks in the 1st (lowest-resolution) branch with ConvNeXt blocks results in a DiMR variant that uses only convolutional layers. However, this configuration performs worse compared to combining Transformer blocks with ConvNeXt blocks across different resolutions. This indicates that Transformers are more effective at capturing fine-grained details, while their usage at the lowest resolution maintains a manageable computational cost.

**Simple addition suffices for multi-resolution feature cascading.** As shown in Table (b)b, a straightforward addition operation effectively transfers information from lower-resolution features to higher-resolution features. Replacing addition with concatenation leads to slightly worse results. We also validate the necessity of adding skip-connection between branches. As shown in Table (c)c, introducing skip-connection not only degrades performance but also complicates the model architecture. Therefore, we adopt a simple upsampling followed by an addition operation for feature cascading.

## 6 Conclusion

In this work, we introduce DiMR, which enhances diffusion models through the Multi-Resolution Network, progressively refining features from low to high resolutions and effectively reducing image distortion. Additionally, DiMR incorporates the proposed parameter-efficient Time-Dependent Layer Normalization (TD-LN), further improving image generation quality. The effectiveness of DiMR has been demonstrated on the popular class-conditional ImageNet generation benchmark, outperforming prior methods and setting new state-of-the-art performance on diffusion-style generative models. We hope that DiMR will inspire future designs of both denoising networks and time conditioning mechanisms, paving the way for even more advanced image generation models.