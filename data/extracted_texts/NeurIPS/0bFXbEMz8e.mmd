# FlowLLM: Flow Matching for Material Generation

with Large Language Models as Base Distributions

 Annuroop Sriram

FAIR, Meta

annuops@meta.com

&Benjamin Kurt Miller

University of Amsterdam

b.k.miller@uva.nl

&Ricky T. Q. Chen

FAIR, Meta

rtqichen@meta.com

&Brandon M. Wood

FAIR, Meta

bmwood@meta.com

###### Abstract

Material discovery is a critical area of research with the potential to revolutionize various fields, including carbon capture, renewable energy, and electronics. However, the immense scale of the chemical space makes it challenging to explore all possible materials experimentally. In this paper, we introduce FlowLLM, a novel generative model that combines large language models (LLMs) and Riemannian flow matching (RFM) to design novel crystalline materials. FlowLLM first finetunes an LLM to learn an effective base distribution of meta-stable crystals in a text representation. After converting to a graph representation, the RFM model takes samples from the LLM and iteratively refines the coordinates and lattice parameters. Our approach significantly outperforms state-of-the-art methods, increasing the generation rate of stable materials by over three times and increasing the rate for stable, unique, and novel crystals by \( 50\%\) - a huge improvement on a difficult problem. Additionally, the crystals generated by FlowLLM are much closer to their relaxed state when compared with another leading model, significantly reducing post-hoc computational cost.

## 1 Introduction

Material discovery holds transformative potential across numerous industries including carbon capture, batteries, photovoltaics, and energy storage. However, the vastness of the chemical space has hindered experimental synthesis of the majority of possible materials. Generative models offer a promising avenue for exploring this untapped potential.

Generating crystalline materials is particularly challenging as it involves simultaneously generating both discrete (atomic types) and continuous values (atomic positions and lattice geometry). While existing approaches, namely autoregressive large language models (LLMs) and denoising models, _e.g._, denoising diffusion and flow matching , have demonstrated success, they exhibit _complementary_ strengths and weaknesses. LLMs excel at modeling discrete values, but they can struggle with continuous values due to their reliance on finite precision representations. Conversely, denoising models more effectively handle continuous values and can easily ensure equivariances, but they face challenges with discrete elements.

LLMs also offer the distinct advantage of natural language prompting, enabling versatile and intuitive conditional generation. This capability is further enhanced by training LLMs on vast corpora of chemistry text, equipping them with valuable prior knowledge to generate chemically valid outputs. Queries like "Generate materials with a high bandgap and thermal stability" or "Propose a novel perovskite structure for efficient solar energy conversion" can be directly integrated into the LLMprompt, while denoising models typically require bespoke changes to the architecture and training procedure to handle conditional generation.

To harness the strengths of both paradigms, we introduce **FlowLLM**, a novel hybrid approach that uses an LLM to generate an initial material representation, which is iteratively refined with a Riemannian Flow Matching (RFM; ) model. This synergistic approach allows us to effectively bridge the gap between discrete and continuous modeling, resulting in a significant improvement in the rate of generation of stable, unique, and novel (S.U.N.) materials. Such materials expand the limited knowledge we have of "material space" and are much more likely to be synthesizable than unstable generations. Our experiments demonstrate that **FlowLLM generates stable materials at over 300\(\%\) higher rate, and S.U.N. materials at \( 50\%\) higher rate** compared to prior models, while retaining the LLM's ability to be prompted with natural language instructions.

We offer two interpretations for the effectiveness of our approach. 1) The **LLM learns a good base distribution for RFM**: the LLM's output distribution serves as a learned base distribution for RFM, replacing the common practice of using the uniform base distribution. Since the LLM has been trained on material data, this learned base distribution is closer to the target distribution, greatly simplifying integration with RFM. 2) **RFM refines the output of the LLM**: The LLM generates an approximate material representation due to its finite precision when handling continuous values. The RFM then refines this approximation through iterative denoising, to generate a much more accurate representation.

Our contributions are as follows:

* We introduce FlowLLM, a novel hybrid approach for materials generation that combines LLMs and RFM, effectively leveraging their complementary strengths.
* We demonstrate that FlowLLM significantly outperforms existing state-of-the-art generative models in generating novel and stable materials.
* We show through ablation experiments that our method of combining LLM and RFM models through FlowLLM significantly outperform simpler combination approaches.

Code for training the FlowLLM model is available at https://github.com/facebookresearch/flowmm.

Figure 1: FlowLLM generative process: the fine-tuned LLM is first prompted with an unconditional query to generate an initial material representation. This material is then iteratively transformed by the RFM model to update its atom positions and lattice parameters. The atom types are static in RFM.

Related Work

In the past, computational materials discovery relied on generating numerous candidate materials through random atomic substitutions in known materials, followed by computationally expensive quantum mechanical screening to assess stability. Genetic algorithms[8; 33], and machine learning models trained to predict energies[37; 25] have accelerated this process, but the fundamental bottleneck of brute force search remains.

Recent research has focused on generative models that directly produce stable materials, bypassing brute-force search. Diffusion models, either combined with Variational Autoencoders (VAEs) for partial variable prediction or jointly diffusing all variables[16; 48; 49] have shown promise. Additionally, Riemannian Flow Matching, Normalizing Flows , and Variational Autoencoders have also been adapted for material generation.

A parallel line of work utilizes autoregressive Large Language Models (LLMs) for material generation [6; 11], representing materials as a sequence of discretized tokens. Pretraining these models on natural language imbues them with powerful prior knowledge not attainable by other approaches.

## 3 Preliminaries

Our approach models probability distributions over crystal lattices, defined as periodic arrangements of atoms in three-dimensional space. A crystal lattice is created by tiling a fundamental unit cell, where the unit cell contains a specific atomic configuration, forming the entire lattice when repeated. In this section, we present a high-level overview of crystal representations, building up to explain our model in section 4. Background details for the crystal representation are in appendix A.

Crystal representationIn the paper, we represent an \(n\) atom crystal in a product space: \((,,)\), indicating the atom types, positions and unit cell geometry, respectively [47; 26]. The atom types are represented by a matrix of categorical vectors: \([a^{1},,a^{n}]\), where \(a^{i}\). The atomic coordinates are represented using fractional coordinates within the unit cell, \([f^{1},,f^{n}]\), where \(f^{i}=^{3}\) with \(\) denoting the unitary length, flat torus manifold, _i.e._, the fractional coordinates satisfy periodic boundary conditions; that is, the atoms "wrap around" the unit cell. The unit cell geometry is defined using lattice parameters \(\), where \(\) is the space formed by a 6-tuple of three side lengths \((a,b,c)^{+}\) (A, i.e. Angstrom) and three internal angles \((,,)[60^{},120^{}]\). This representation is not unique as the same crystal can be produced by different choices of unit cell. To make the representation unique, we select the minimum-volume unit cell and employ Niggli reduction  that uniquely determines the unit cell parameters.

Equivariance & InvarianceGiven a group \(G\) with \(g\)- denoting a group action for some \(g G\), a function \(f\) is called _\(G\)-equivariant_ if \( x, g G\), \(f(g x)=g f(x)\), while it is called _\(G\)-invariant_ if \( x, g G\), \(f(g x)=f(x)\). Since a crystal is not uniquely defined by any particular representation \(\) but an infinite set, we know that the data distribution has a \(G\)-invariant density, where \(G\) represents symmetries of a crystal.

Symmetries of crystalsConcretely, our crystal representation exhibits multiple symmetries that we detail here. The symmetric group \(S_{n}\) on \(n\) atoms permutes the atom indices: \(=([a^{(1)},,a^{(n)}],[ f^{(1)},,f^{(n)}],)\). The special Euclidean group \((3)\) consists of orientation preserving rigid rotations and translations: (\(Q,T\)) where \(Q(3)\) and \(T[-,]^{3 1}\) denote 3D rotations and translations respectively. This element transforms the crystal as: (Q, \(\)) \(=(,+\,-+\,,)\). We emphasize that the representation \(\) is completely invariant w.r.t. \(Q\) because lattice parameters do not contain orientation information. Since these represent symmetries fundamental to crystals, the data distribution \(q()\) is invariant to these group operations.

## 4 Method

Our goal is to fit a parametric generative model \(p(;)\) to approximate the distribution of known meta-stable materials \(q()\) using a dataset of samples. The distributions \(p\) and \(q\) are defined on the Riemannian manifold \(\). Our FlowLLM model generates samples from the parametric distribution using a two-step procedure (see figure 1). First it samples the LLM, then it refines the LLM output using RFM, like so:

\[_{0}  p_{}(;_{0}),\] (1) \[_{1}  p_{}(|_{0};_{1})\] (2)

where \(p_{}\) is modeled using a large language model[6; 11], and \(p_{}\) is modeled using Riemannian Flow Matching (RFM)[3; 26], and \(=(_{0},_{1})\). Both the LLM and RFM frameworks are trained to estimate the data distribution over meta-stable crystals on samples from the Materials Project .

Overview of trainingFirst, we fine-tune an LLM to generate string representations of meta-stable materials . Once trained, we can sample the LLM distribution using next token prediction, optionally conditioning on a prompt (see figure 2). Next, we train the RFM model using the FlowMM objective  where, conditioned on the chemical formula, will learn to transport between the LLM's model distribution and the data distribution. The full training process is described in Algorithm 1.

Overview of samplingWe give the standard prompt to the LLM and allow it to do next token prediction until it produces a stop token. As long as all atom types are actual elements and the lattice parameters are physical, we move forward. Otherwise we reject the sample. Then, we convert the text to a crystal representation that serves as the initial sample. This sample's fractional coordinates \(\) and lattice parameters \(\) are iteratively refined by the RFM model to produce the final sample of FlowLLM. This sampling process is illustrated in figure 1.

### Large Language Model (\(p_{}\)) for Crystals

LLMs define a distribution over sequences through an autoregressive decomposition, \(_{t=1}^{T}p(w_{t+1}|w_{0:t})\), where each \(p(w_{t+1}|w_{0:t})\) follows a categorical distribution conditioned on all previous tokens (\(w_{0:t}\)) in the sequence. Our LLM model closely follows Gruver et al. .

TokenizationLanguage models interact with strings in text datasets after the string is converted into a sequence of tokens. The choice of tokenizer can have a large impact on the performance of the language model. In terms of tokens, we represent a crystal \(\) using fixed precision numbers - two decimal places for fractional coordinates, and one for lattice lengths. Angles are represented as integers. Atom types are represented as discrete tokens. We use LLaMA-2 models  for our LLM architecture since these models break numbers into a sequence of digits, which has been shown to dramatically improve performance on arithmetic tasks .

TrainingWe rely on the extensive pretraining of LLaMA-2 models to instill useful biases over numerical operations. To train \(p_{}\), we fine-tune a pre-trained LLaMA-2 model on a dataset of crystal structures represented as strings along with a prompt indicating that the model should generate bulk materials by writing the lattice in lengths and angles along with atom types and coordinates. An example of such a representation along with a prompt is shown in figure 2.

The flexibility of LLMs allows us to optionally include different kinds of conditional information in the prompt such as the chemical formula. We can also solve other tasks such as infilling by making changes to the prompt. For this hypothetical conditional generation, the prompt could include a desired

Figure 2: Left: String encoding of materials used to train the LLM based on Gruver et al.. Right: An example prompt used during training. The conditioning information in blue is optional, and can be replaced with conditioning on other properties as well. The text in red is replaced with the crystal string representation shown on the left.

chemical formula, material properties, or a combination of such information. In this work, we used the same conditioning used in Gruver et al., and we leave a more detailed study of this to future work.

SamplingTo generate sequences from the model, the conditional distribution is sampled sequentially. The sampling procedure is modulated to control the diversity and sampling speed using the temperature (\(\)) and nucleus size (\(P\)) hyperparameters of nucleus sampling . Temperature controls the entropy of the conditional distributions, introducing a trade-off between diversity and mode sampling. The nucleus size limits the number of tokens that can be sampled. Given a nucleus size \(P\) with \(0<P 1\), sampling is restricted to the most probable tokens with cumulative probability \(P\).

Symmetries in LLMsThe LLM architecture does not inherently produce a symmetric density, _i.e._, the distribution of meta-stable crystals that the LLM learns is _not_ symmetric according to the fundamental properties of crystals. We perform no fractional coordinate data augmentation via translation, and no token permutation data augmentation. Unlike the other symmetries, rotation invariance holds for the learned LLM distribution due to our choice of representing the unit cell with lattice parameters.

### Riemannian Flow Matching (\(p_{}\)) for Crystals

Riemannian Flow MatchingRFM produces a Continuous Normalizing Flow , _i.e._, a continuous, parametric, diffeomorphism between the LLM base distribution \(p_{0} p_{}\) and an approximation to our target distribution \(p_{1} q\). To model \(p_{} p_{1}\), we fit a time-dependent vector field \(v_{t}^{_{1}}\) that has been adapted to crystals and is implemented using a neural network with parameters \(_{1}\). Continuous Normalizing Flows are computationally expensive to train using maximum likelihood, but an alternative objective called Conditional Flow Matching  is more stable and scales better. The objective was generalized to Riemannian manifolds , and specifically to labeled point clouds with periodic boundary conditions, _i.e._ crystals, by Miller et al. .

Concretely, each point \(\) has an associated _tangent space_\(_{}\) with an inner product \( u,v\) for \(u,v_{}\), enabling the definition of distances, volumes, angles, and minimum length curves (_geodesics_). The geodesics for any \(\) that we consider can be written in closed form using the exponential and logarithmic maps. The geodesic connecting \(_{0},_{1}\) at time \(t\) is

\[_{t}_{_{0}}(t_{_{0}}(_{1})),\] (3)

where \(_{}\) and \(_{}\) are the exponential and logarithm maps for the manifold \(\). These geodesics help define the supervision signal used to train RFM.

Our RFM generative model \(v_{t}^{_{1}}\) is parameterized as a time-dependent, smooth vector field. Training proceeds by regressing onto conditional vector fields \(u_{t}(|_{1})\) that generate single data points \(_{1}\). For the geodesic path, this corresponds to \(u_{t}(|_{1})=-_{_{1}}()\). The general RFM training objective is then:

\[(_{1})=_{t,p(_{0})q(_{1})}\|v_{t}^{ _{1}}(_{t})-u_{t}(_{t}|_{1})\|^{2}.\] (4)

Since we only use flat manifolds, \(\|\|\) is the Euclidean norm. At the optimal solution, \(v_{t}^{_{1}}\) generates \(p_{t}\) with endpoints \(p_{0}=p\), \(p_{1}=q\). At sampling time, we draw a sample from \(_{0} p\) and solve the ordinary differential equation \(_{t}=v_{t}^{_{1}}(_{t})\) with initial value \(_{0}\) at \(t=0\); the solution at \(t=1\) is then the sample from our RFM model.

Geometry of \(\)We apply the conditional vector field for a point cloud living on a \(n 3\)-dimensional product of flat tori invariant to global translations, _i.e._ fractional coordinates with periodic boundary conditions . This is a geodesic path, which may cross the periodic boundary:

\[_{f^{i}}(^{i}) f^{i}+^{i}- f^{i}+^{i },_{f^{i}_{0}}(f^{i}_{1})[(^{i}),(^{i})],\] (5)

where \(^{i} 2(f^{i}_{1}-f^{i}_{0})\), and \(^{i}_{f^{i}}^{i}\) for \(i=1,,n\). Computing the geodesic of \(n\) atoms amounts to an atom-wise application of \(_{_{0}}\) on \(_{1}\) and \(_{}\) on \(}_{f}}\) respectively. Additionally, following Miller et al.  we address translation-invariance by removing the mean torus translation:

\[u_{t}^{}(_{1})_{_{1}}()- _{i=1}^{n}_{f^{i}_{1}}(f^{i}).\] (6)

Geometry of \(\)The space of lattice parameters, \(^{+3}^{3}\), is a Euclidean space with boundaries. We can ignore these boundaries for the lattice lengths in \(^{+3}\) since (i) the data does not lie on the boundary (\(a,b,c>0\)) and (ii) we can clamp our base distribution to be positive with rejection. The boundary issue for the lattice angles \(,,\) can be addressed  using a diffeomorphism \([60^{},120^{}]\) to _unconstrained space_, applied element-wise to each angle:

\[()(), ^{-1}(^{})=120\,(^{})+60,\] (7)

where \((.)\) and logit are the sigmoid and the log-odds functions, respectively. We directly apply RFM in the unconstrained space, and for sampling, we map the angles back into \([60^{},120^{}]\) using \(^{-1}\).

The RFM training objectiveWith this formulation, our training objective based on (4) becomes:

\[_{t,p_{}(_{0},_{0}|)q(_{1},_{1},)} }}{3n}\|v_{t}^{,_{1}}( _{t})+_{_{1}}(_{0})-_{i=1}^{n}_{f^{i} _{1}}(f^{i}_{0})\|^{2}\] (8) \[+}}{6}\|v_{t}^{,_{1}}( _{t})+_{0}-_{1}\|^{2},\]

where we now use \(p_{}\) as the base distribution, and \(_{t}=(_{t},_{t},)\). The loss coefficients \(_{},_{}^{+}\) are hyperparameters. We use a graph neural network (GNN) inspired by  for \(v_{t}^{_{1}}()\). This GNN enforces equivariance to atom permutations via message passing, invariance to atom translation by featurizing graph edges as relative displacements of nodes, and invariance to rotations by our choice of lattice representation. See appendix B for more details about the GNN architecture.

### Consequences of using an LLM as the base distribution

Model symmetriesJust like the LLM, the orientation-invariant representation of the unit cell leads to global rotation invariance. However, permutation and translation symmetries are not so simple. If the parameterization of the RFM velocity field is \(G\)-equivariant, and the _base distribution is \(G\)-invariant_, then the model density is \(G\)-invariant . We use graph neural networks , and additional projections , to ensure that the RFM velocity predictions are \(G\)-equivariant to both permutation and translation. However, we will generally _not_ recover a translation invariant density because the base distribution defined by the LLM is _not_ invariant to translation. The density _will be_ permutation invariant in our RFM representation because the each atom is a node in an unordered point cloud and the LLM ordering is ignored by the RFM, but the density _will not be_ permutation invariant in the text representation, due to the LLM's lack of token permutation invariance.

Empirically, we do not find the lack of exact invariance to be a problem, and FlowLLM outperforms methods with exact invariance (section 5). This is because an LLM trained to generate crystals is approximately invariant to crystal symmetries. This was verified by Gruver et al. who proposed a new metric, _Increase in Perplexity under Transformation (IPT)_, to quantify this approximation:

\[(s)=_{g G}[(t_{g^{*}}(s))-(t_{g^{*} }(s))]\] (9)

where \(g^{*}=*{arg\,min\,}(t_{g^{*}}(s))\), and PPL is the perplexity of the sequence, the exponent of the length-normalized cross entropy loss, \((s)=2^{(s)/n}\). They find that a well-trained LLM obtains a small IPT value, implying that it is approximately invariant.

Invalid crystalsThe LLM base distribution is not constrained to \(\), _i.e._ the LLM can generate invalid crystals. We find that this is extremely rare and easy to detect. In such cases, we simply reject that sample, and draw a new sample until we get a valid crystal. Empirically, we found this rejection rate to be \( 0.5\%\) with a softmax temperature of 0.7.

Text is not continuous in \(\) or \(\)The LLM base distribution only takes non-zero values over a small number of discrete points due to the use of finite precision representations. For example, we represent fractional coordinates with only 2 decimal places, so they can only take one of 100 distinct values. We can mitigate this problem by adding a small amount of random zero-mean gaussian noise to all continuous values predicted by the LLM. Empirically, we do not observe any noticeable difference in performance due to this added noise (see appendix F).

## 5 Experiments

### Setup

We trained our model on the widely used MP-20 dataset1 of inorganic crystalline materials. MP-20 comprises 45,231 materials, a subset of the Materials Project containing up to 20 atoms known to be metastable (see section 5.2).

We first train our LLM independently using the various prompting strategies described in Section 4. Unless otherwise specified, we employed a pretrained LLaMA-2 70B model  for all experiments, that was fine-tuned with the Low-Rank Adapters (LoRA) method  using PyTorch and Transformers.

Next, we trained the RFM model using the fine-tuned LLM (with frozen weights) as the base distribution and the MP-20 dataset as the target distribution. For computational efficiency, we sampled a large number (\(N_{tr}\)) of examples from the base distribution in advance, and used the same set for all of our training runs. To create this set, we sampled \(N_{tr}\) materials, with replacement from MP-20, and queried the LLM with a prompt conditioned on the chemical formula of each of these materials. This results in a set of \(N_{tr}\) pairs, \(\{(_{0}^{i},_{1}^{i})\}_{i=0}^{N_{tr}}\), of LLM generated materials and ground truth materials that constitutes the training set for the RFM model. We list the hyperparameter values used in our experiments in appendix C.

To generate new samples, we first generate a material from the LLM using an unconditional query. We then perform an integration with the RFM model, starting from this LLM-generated material. During sampling, we can adjust hyperparameters such as temperature \(\), nucleus probability \(P\), and the number of integration steps to achieve different trade-offs between diversity, accuracy, and efficiency.

### Metrics

Our primary metrics are _Stability Rate_, the percentage of generated materials that are thermodynamically stable, a key indicator of synthesizability, and the _S.U.N. rate_, the percentage of materials that are stable, unique and novel. Since computing stability is computationally expense, Xie et al.  proposed a number of proxy metrics. We explain these metrics in more detail in appendix D.

One key difference in evaluation between the proxy metrics and the stability metrics is the use of pre-relaxation and relaxation techniques. Proxy metrics are computed on raw samples without any further processing. Stability metrics are computed on structures that are first pre-relaxed using CHGNet then relaxed using Density Functional Theory.

Density Functional Theory is extremely expensive, even with speedups using pseudo-potentials. Ideally, the generative model can generate many S.U.N. structures that are already close to their relaxed ground state. Generating structures close to ground state may also indicate that the model has done a better job capturing the data distribution. It can also speed up or obviate the need for relaxing the generated structures, which has huge computational benefits. We include several additional metrics to measure the closeness of generated and corresponding ground state structures, that are described in appendix E.

### Results

We compare our model to four prior methods: CD-VAE, a hybrid Variational Autoencoder & diffusion model; DiffCSP, a diffusion model; FlowMM, a Riemannian Flow Matching model; and CrystalLLM, which fine-tunes a LLaMA-2 model on materials represented as sequences. The LLM and RFM components of FlowLLM closely resemble the formulations in CrystalLLM and FlowMM, respectively. To compare different models, we generate 10,000 new structures from each model and compare the metrics described in section 5.2.

Our main results are presented in table 1. On the most important metrics, namely the Stability & S.U.N. rates, FlowLLM significantly outperforms all prior methods across various LLM sampling parameters. For our best FlowLLM model (\(=0.7\), \(P=0.9\)), \(17.82\%\) of the generated structures are stable, out of which \(48\%\) are novel (not similar to any training or validation structure). Of the remaining structures, \(58\%\) are unique, leading a to a S.U.N. rate of 4.92%. **FlowLLM  obtains a \( 300\%\) higher stability rate and \( 50\%\) higher S.U.N. rate than the best prior model!**

Figure 2(a) shows histograms comparing the \(E^{}\) values of generated materials from FlowLLM compared to prior models. Clearly, FlowLLM generates many more materials with lower \(E^{}\) values than the other models.

The results on proxy metrics, on the other hand, remain mixed. Diffusion and flow matching methods excel on Coverage Recall, while CrystalLLM has the best Composition Validity. FlowLLM  achieves the best compromise between coverage and validity, potentially explaining its superior Stability & S.U.N. rates. It is important to note that many of these metrics have become saturated, offering limited discriminatory power for evaluating state-of-the-art models. As a result, we anticipate a decreased reliance on these metrics in future research.

Comparison of generated and relaxed structuresWhile the stability rate and S.U.N metrics capture whether the generated structures can be relaxed to stable / S.U.N. states, they do not address the question: _How close are the generated structures to their relaxed state?_ To answer this question, we compared generated structures to those same generated structures after relaxation using CHGNet, computing the following metrics between generated and CHGNet relaxed states: _Match Rate_ and _RMSD_, as defined by StructureMatcher, along with the \(\)_-Energy_ and the average _Num steps_ between the states. Definitions for these metrics can be found in appendix E.

   Method & LLM Phrains & large. Steps & Validity (\( 1\)) & Average (\( 1\)) & Average (\( 1\)) & Average (\( 1\)) & Average (\( 1\)) & \(\)Subity & Rate (\( 1\)) \\  & & StrøntelLLM & Compression & Recall & Precision & \(\) & \(\) & \(\) & \(\) & \(\) & \(\) \\  CDVAE  & – & 5000 & **100.00** & 86.70 & 99.15 & 99.49 & 6.685 & 0.278 & 1.57 & \\ DirectSF  & – & 1000 & **100.00** & 83.25 & **99.17** & 99.76 & 0.350 & 0.125 & 5.06 & 3.4 \\ FlowMM  & \(=0.00\) & 400 & 86.53 & 81.99 & 99.74 & 95.28 & **0.038** & 4.65 & 2.34 \\ CrystalLLM (700)  & \(=0.7\) & – & 99.6 & **95.4** & 85.5 & 99.9 & 0.81 & 0.44 & 5.28 & – \\  FlowLLM-Types & \(=0.5\), \(P=0.9\) & 750 & 99.96 & 93.32 & 96.85 & 99.78 & 0.846 & 0.209 & 8.79 & – \\  & \(=0.5\), \(P=0.9\) & 750 & 99.88 & 91.69 & 97.18 & 99.76 & 1.14 & 0.20 & 8.95 & – \\  FlowLLM & \(=1.0\), \(P=0.9\) & 250 & 99.81 & 89.05 & 99.06 & 99.68 & 0.66 & **0.09** & 10.07 & 4.89 \\  & \(=0.7\), \(P=1.0\) & 250 & 99.83 & 99.45 & 99.06 & 99.71 & 0.73 & 0.14 & 13.93 & 4.88 \\  & \(=0.7\), \(P=0.9\) & 250 & 99.94 & 90.84 & 96.95 & **99.82** & 1.14 & 0.15 & **17.52** & **4.92** \\   

Table 1: Results for material generation on the MP-20 dataset. Stability rate is the percentage of generated materials with \(E^{}<0.0\) & \(N\)-ary \( 2\).

Table 2 shows a comparison of FlowMM and FlowLLM. The samples generated by FlowLLM are significantly closer to ground state compared to FlowMM, according to our metrics.

Importance of learned base distributionOne motivation for a hybrid LLM-RFM model is to leverage the LLM's superior ability to generate accurate atom types compared to denoising models. To isolate this effect, we trained the _FlowLLM-Types_ model, following a similar procedure as FlowLLM but using simple base distributions for lattice parameters and fractional coordinates identical to those used in FlowMM. Thus, the LLM only contributes to atom type prediction in this model. Despite this simplification, FlowLLM-Types still surpasses prior models on the Stability Rate metric (table 1), highlighting the benefits of employing an LLM for atom type prediction. The stability rate of FlowLLM-Types remains considerably lower than that of FlowLLM, underscoring the substantial value of using learned base distributions.

N-ary analysisThe number of distinct element types in a material is called the \(N\)_-ary_ value of that material. Figure 2(b) compares the distribution of N-ary values for different models with the target data distribution. FlowMM and FlowLLM match the data distribution better than the diffusion models, which tend to generate too many materials with high n-ary.

Number of RFM integration stepsCompared to diffusion and flow matching models which require hundreds or thousands of integration steps, FlowLLM is able to converge in as little as 50 steps (figure 2(c)). This is not surprising given our use of a learned base distribution.

   Method & Match Rate (\%) \(\) & RMSD (\(\)) \(\) & \(\)-Energy (eV/atom) \(\) & Num Steps \(\) \\  FlowMM & 74.3 & 0.096 & 0.3031 & 191.98 \\ FlowLLM & **94.9** & **0.023** & **0.0898** & **37.97** \\   

Table 2: Comparison of generated and corresponding ground state structures from the CHGNet relaxation. Compared to FlowMM, FlowLLM generates structures much closer to the ground state.

Figure 3: (a) Histogram of \(E^{}\) values comparing FlowLLM with prior models. The dashed line shows thermodynamic stability threshold (\(E^{}\) = 0). (b) Histogram of N-ary compared to the data distribution. (c) Structural validity as a function of number of integration steps.

Discussion

The discovery of novel, stable materials holds the potential to help revolutionize numerous industries, but progress has been slow due to the high computational costs involved. Widely used random structure search methods yield less than a 1% success rate in identifying stable materials. Given the substantial cost of validating generated structures using density functional theory, improving this rate is of paramount importance.

Recent breakthroughs with denoising models[16; 26] and large language models have increased the stability rate to \( 5\%\), a significant improvement over traditional approaches. In this work, we propose a novel generative model which harnesses the strengths of both paradigms to further increase this number by over \(3\), representing a major advancement in the field.

LimitationsWhile FlowLLM excels at generating stable materials, a key limitation is its lack of end-to-end differentiability. This hinders its direct application to inverse design, where generative models are optimized to generate material with specific properties, as explored in prior work using denoising models[49; 47]. Future research could investigate extending FlowLLM for inverse design.

Broader impactThis work can accelerate the discovery of new materials for renewable energy, electronics, and carbon capture, ultimately benefiting society by enabling more efficient and sustainable technologies. However, the adoption of generative models also raises concerns, such as the creation of harmful substances and access inequalities.