# Time-Constrained Robust MDPs

Adil Zouitine\({}^{*}\)\({}^{1,2}\), David Bertoin\({}^{*}\)\({}^{1,3,6}\), Pierre Clavier\({}^{*}\)\({}^{4,5}\)

Matthieu Geist\({}^{7}\), Emmanuel Rachelson\({}^{2,6}\)

\({}^{1}\)IRT Saint-Exupery, \({}^{2}\)ISAE-SUPAERO, Universite de Toulouse,\({}^{3}\)IMT, INSA Toulouse

\({}^{4}\)Ecole Polytechnique, CMAP, \({}^{5}\)Inria Paris, HeKA

\({}^{6}\)ANIT, \({}^{7}\)Cohere

{adil.zouitine, david.bertoin}@irt-saintexupery.com, pierre.clavier@polytechnique.edu

These authors contributed equally to this work

###### Abstract

Robust reinforcement learning is essential for deploying reinforcement learning algorithms in real-world scenarios where environmental uncertainty predominates. Traditional robust reinforcement learning often depends on rectangularity assumptions, where adverse probability measures of outcome states are assumed to be independent across different states and actions. This assumption, rarely fulfilled in practice, leads to overly conservative policies. To address this problem, we introduce a new time-constrained robust MDP (TC-RMDP) formulation that considers multifactorial, correlated, and time-dependent disturbances, thus more accurately reflecting real-world dynamics. This formulation goes beyond the conventional rectangularity paradigm, offering new perspectives and expanding the analytical framework for robust RL. We propose three distinct algorithms, each using varying levels of environmental information, and evaluate them extensively on continuous control benchmarks. Our results demonstrate that these algorithms yield an efficient tradeoff between performance and robustness, outperforming traditional deep robust RL methods in time-constrained environments while preserving robustness in classical benchmarks. This study revisits the prevailing assumptions in robust RL and opens new avenues for developing more practical and realistic RL applications.

## 1 Introduction

Robust MDPs capture the problem of finding a control policy for a dynamical system whose transition kernel is only known to belong to a defined uncertainty set. The most common framework for analyzing and deriving algorithms for robust MDPs is that of \(sa\)-rectangularity , where probability measures on outcome states are picked independently in different source states and actions (in formal notation, \((s^{}|s,a)\) and \((s^{}|,)\) are independent of each other). This provides an appreciable decoupling of worst transition kernel search across time steps and enables sound algorithms like robust value iteration (RVI). But policies obtained for such \(sa\)-rectangular MDPs are by nature very conservative , as they enable drastic changes in environment properties from one time step to the next, and the algorithms derived from RVI tend to yield very conservative policies even when applied to non-\(sa\)-rectangular robust MDP problems.

In this paper, we depart from the rectangularity assumption and turn towards a family of robust MDPs whose transition kernels are parameterized by a vector \(\). This parameter vector couples together the outcome probabilities in different \((s,a)\) pairs, hence breaking the independence assumption that is problematic, especially in large dimension . This enables accounting for the notion of transitionmodel consistency across states and actions: outcome probabilities are not picked independently anymore but are rather set across the state and action spaces by drawing a parameter vector. In turn, we examine algorithms for solving such parameter-based robust MDPs when the parameter is constrained to follow a bounded evolution throughout time steps. Our contributions are the following.

1. We introduce a formal definition for parametric robust MDPs and time-constrained robust MDPs, discuss their properties and derive a generic algorithmic framework (Sec. 2).
2. We propose three algorithmic variants for solving time-constrained MDPs, named vanilla TC, Stacked-TC and Oracle-TC (Sec. 4), which use different levels of information in the state space, and come with theoretical guaranties (Sec. 6).
3. These algorithms are extensively evaluated in MuJoCo  benchmarks, demonstrating they lead to non-conservative and robust policies (Sec. 5).

## 2 Problem statement

**(Robust) MDPs.** A Markov Decision Process (MDP)  is a model of a discrete-time, sequential decision making task. At each time step, from a state \(s_{t} S\) of the MDP, an action \(a_{t} A\) is taken and the state changes to \(s_{t+1}\) according to a stationary Markov transition kernel \(p(s_{t+1}|s_{t},a_{t})\), while concurrently receiving a reward \(r(s_{t},a_{t})\). \(S\) and \(A\) are measurable sets and we write \(_{S}\) and \(_{A}\) the set of corresponding probability distributions. A stationary policy \((|s)\) is a mapping from states to distributions over actions, prescribing which action should be taken in \(s\). The value function \(v_{p}^{}\) of policy \(\) maps state \(s\) to the expected discounted sum of rewards \(_{p,}[_{t}^{t}r_{t}]\) when applying \(\) from \(s\) for an infinite number of steps. An optimal policy for an MDP is one whose value function is maximal in any state. In a Robust MDP (RMDP) [1; 2], the transition kernel \(p\) is not set exactly and can be picked in an adversarial manner at each time step, from an uncertainty set \(\). Then, the pessimistic value function of a policy is \(v_{p}^{}(s)=_{p}v_{p}^{}(s)\). An optimal robust policy is one that has the largest possible pessimistic value function \(v_{p}^{}\) in any state, hence yielding an adversarial \(_{}_{p}\) optimization problem. Robust Value Iteration (RVI) [1; 7] solves this problem by iteratively computing the one-step lookahead best pessimistic value:

\[v_{n+1}(s)=T_{}^{*}v_{n}(s):=_{(s)_{A}}_{P }_{a(s)}[r(s,a)+_{p}[v_{n}(s^{})]].\]

The \(T_{}^{*}\) operator is called the robust Bellman operator and the sequence of \(v_{n}\) functions converges to the robust value function \(v_{}^{*}\) as long as the adversarial transition kernel belongs to the simplex of \(_{S}\).

**Zero-sum Markov Games.** Robust MDPs can be cast as zero-sum two-players Markov games [8; 9] where \(B\) is the action set of the adversarial player. Writing \(:S A_{B}\) the policy of this adversary, the robust MDP problem turns to \(_{}_{}v^{,}\), where \(v^{,}(s)\) is the expected sum of discounted rewards obtained when playing \(\) (agent actions) against \(\) (transition models) at each time step from \(s\). This enables introducing the robust value iteration sequence of functions

\[v_{n+1}(s):=T^{**}v_{n}(s):=_{(s)_{A}}_{(s,a) _{S}}(T^{,}v_{n})(s)\]

where \(T^{,}:=_{a(s)}[r(s,a)+_{s^{ }(s,a)}v_{n}(s^{})]\) is a zero-sum Markov game operator. These operators are also \(-\)contractions and converge to their respective fixed point \(v^{,}\) and \(v^{**}=v_{}^{*}\). This formulation will be useful to derive a practical algorithm in Section 4.

Often, this convergence is analyzed under the assumption of \(sa\)-rectangularity, stating that the uncertainty set \(\) is a set product of independent subsets of \(_{S}\) in each \(s,a\) pair. Quoting , rectangularity is a sort of independence assumption and is a minimal requirement for most theoretical results to hold. Within robust value iteration, rectangularity enables picking \((s_{t},a_{t})\) completely independently of \((s_{t-1},a_{t-1})\). To set ideas, let us consider the robust MDP of a pendulum, described by its mass and rod length. Varying this mass and rod length spans the uncertainty set of transition models. The rectangularity assumption induces that \((s_{t},a_{t})\) can pick a measure in \(_{S}\) corresponding to a mass and a length that are completely independent from the ones picked in the previous time step. While this might be a good representation in some cases, in general it yields policies that are very conservative as they optimize for adversarial configurations which might not occur in practice.

We first step away from the rectangularity assumption and define a parametric robust MDP as an RMDP whose transition kernels are spanned by varying a parameter vector \(\) (typically the mass and rod length in the previous example). Choosing such a vector couples together the probability measures on successor states from two distinct \((s,a)\) and \((s^{},a^{})\) pairs. The main current robust deep RL algorithms actually optimize policies for such parametric robust MDPs but still allow the parameter value at each time step to be picked independently of the previous time step.

**Parametric MDPs.** A parametric RMDP is given by the tuple \((S,A,,p_{},r)\) where the transition kernel \(p_{}(s,a)_{S}\) is parameterized by \(\), and \(\) is the set of values \(\) can take, equipped with an appropriate metric. This yields the robust value iteration update :

\[v_{n+1}(s)=_{(s)_{A}}_{}(T_{}^{}v_{n})(s) :=_{(s)_{A}}_{}_{a(s)}[r(s,a)+ _{s^{} p_{}(s,a)}v_{n}(s^{})].\]

A parametric RMDP remains a Markov game and the Bellman operator remains a contraction mapping as long as \(p_{}\) can reach only elements in the simplex of \(_{S}\), where the adversary's action set is the set of parameters instead of a (possibly \(sa\)-rectangular) set of transition kernels.

**Time-constrained RMDPs (TC-RMDPs).** We introduce TC-RMDPs as the family of parametric RMDPs whose parameter's evolution is constrained to be Lipschitz with respect to time. More formally a TC-RMDP is given by the tuple \((S,A,,p_{},r,L)\), where \(\|_{t+1}-_{t}\| L\), that is the parameter change is bounded through time. In the previous pendulum example, this might represent the wear of the rod which might lose mass or stretch length. Similarly, and for a larger scale illustration, TC-RMDPs enable representing the possible evolutions of traffic conditions in a path planning problem through a busy town. Starting from an initial parameter value \(_{-1}\), the pessimistic value function of a policy \(\) is non-stationary, as \(_{0}\) is constrained to lay at most \(L\)-far away from \(_{-1}\), \(_{1}\) from \(_{0}\), and so on. Generally, this yields non-stationary value functions as the uncertainty set at each time step depends on the previous uncertainty parameter. To regain stationarity without changing the TC-RMDP definition, we first change the definition of the adversary's action set. The adversary picks its actions in the constant set \(B=(0_{},L)\), which is the ball of radius \(L\) centered in the null element in \(\). In turn, the state of the Markov game becomes the pair \(s,\) and the Markov game itself is given by the tuple \(((S),A,B,p_{},r)\), where the Lipschitz constant \(L\) is included in \(B\). Thus, given an action \(b_{t} B\) and a previous parameter value \(_{t-1}\), the parameter value at time \(t\) is \(_{t}=_{t-1}+b_{t}\). Then, we define the pessimistic value function of a policy as a function of both the state \(s\) and parameter \(\):

\[v_{B}^{}(s,) :=_{(b_{t})_{t},\\ b_{t} B}^{t}r_{t}|_{-1}=,s_{0}=s,b_{t} B,_{t}=_{t-1}+b_{t},a,s_{t} p_{_{t} },\] \[v_{B}^{*}(s,) =_{(s,)_{A}}v_{B}^{}(s,).\]

In turn, an optimal robust policy is a function of \(s\) and \(\) and the TC robust Bellman operators are:

\[v_{n+1}(s,) :=T_{B}^{*}v_{n}(s,):=_{(s,)_{A}}T_{B}^{ }v_{n}(s,),\] \[:=_{(s,)_{A}}_{b B}_{a (s)}[r(s,a)+_{s^{} p_{+b}(s,a)}v_{n}(s^{ },+b)].\]

This iteration scheme converges to a fixed point according to Th. 2.1.

**Theorem 2.1**.: _The time-constrained (TC) Bellman operators \(T_{B}^{}\) and \(T_{B}^{*}\) are contraction mappings. Thus the sequences \(v_{n+1}=T_{B}^{}v_{n}\) and \(v_{n+1}=T_{B}^{*}v_{n}\), converge to their respective fixed points \(v_{B}^{}\) and \(v_{B}^{*}\)._

Proof of Th. 2.1 can be found in Appendix B. We refer to this formulation as algorithm Oracle-TC (see Section 4 for implementation details) since an oracle makes the current parameter \(\) visible to the agent. Therefore, it is possible to derive optimal policies for TC-RMDPs by iterated application of this TC Bellman operator. These policies have the form \((s,)\). In the remainder of this paper, we extend state-of-the-art robust deep RL algorithms to the TC-RMDP framework. In particular, we compare their performance and robustness properties with respect to classical robust MDP formulations, we also discuss their relation with the \((s)\) robust policies of classical robust MDPs.

If the agent is unable to observe the state variable \(\), it is not possible to guarantee the existence of a stationary optimal policy of the form \((s)\). Similarly, there is no guarantee of convergence of value functions to a fixed point. Nonetheless, this scenario, in which access to the \(\) parameter is not available, is more realistic in practice. It turns the two-player Markov game into a partially observable Markov game, where one can still apply the TC Bellman operator but without these guarantees of convergence. We call vanilla TC the repeated application of the TC Bellman operator in this partially observable case. Vanilla TC will be tested in practice, and some theoretical properties of the objective function will be derived using the Lipschitz properties (Sec 6).

## 3 Related works

Since our method is a non-rectangular, Deep Robust RL algorithm, (possibly non-stationary for Stacked-TC and TC ), we discuss the following related work.

**Non-stationary MDPs.** First, non-stationarity has been studied in the Bandits setting in . Then, for episodic, non-stationary MDPs [11; 12; 13] have explored and provided regret bounds for algorithms that use oracle access to the current reward and transition functions. More recently [14; 15] have facilitated oracle access by performing a count-based estimation of the reward and transition functions based on the recent history of interactions. Finally, for tabular MDPs, past data from a non-stationary MDP can be used to construct a full Bayesian model  or a maximum likelihood model  of the transition dynamics. We focus on the setting not restricted to tabular representations

**Non-rectangular RMDPs.** While rectangularity in practice is very conservative, it can be demonstrated that, in an asymptotic sense, non-rectangular ellipsoidal uncertainty sets around the maximum likelihood estimator of the transition kernel constitute the smallest possible confidence sets for the ground truth transition kernel, as implied by classical Cramer-Rao bounds. This is in accordance with the findings presented in SS 5 and Appendix A of . More recently,  extends the rectangular assumptions using a factored uncertainty model, where all transition probabilities depend on a small number of underlying factors denoted \(_{1},,_{r}^{}\), such that each transition probability \(P_{sa}\) for every \((s,a)\) is a linear (convex) combination of these \(r\) factors. Finally,  use policy gradient algorithms for non-rectangular robust MDPs. While this work presents nice theoretical guarantees of convergence, there is no practical Deep RL algorithms for learning optimal robust policies.

**Deep Robust RL Methods.** Many Deep Robust algorithms exist such as M2TD3 , M3DDPG , or RARL , which are all based on the two player zero-sum game presented in 2. We will compare our method against these algorithms, except  which is outperformed by  in general. We also compare our algorithm to Domain randomization (DR)  that learns a value function \(V(s)=_{}_{p()}V_{p}^{}(s)\) which maximizes the expected return on average across a fixed (generally uniform) distribution on \(\). As such, DR approaches do not optimize the worst-case performance but still have good performance on average. Nonetheless, DR has been used convincingly in applications [22; 23]. Finally, the zero-sum game formulation has lead to the introduction of action robustness  which is a specific case of rectangular MDPs, in scenarios where the adversary shares the same action space as the agent and interferes with the agent's actions. Several strategies based on this idea have been proposed. One approach, the Game-theoretic Response Approach for Adversarial Defense (GRAD)  builds on the Probabilistic Action Robust MDP (PR-MDP) . This method introduces time-constrained perturbations in both the action and state spaces and employs a game-theoretic approach with a population of adversaries. In contrast to GRAD, where temporal disturbances affect the transition kernel around a nominal kernel, our method is part of a broader setting in which the transition kernel is included in a larger uncertainty set. Robustness via Adversary Populations (RAP)  introduces a population of adversaries. This approach ensures that the agent develops robustness against a wide range of potential perturbations, rather than just a single one, which helps prevent convergence to suboptimal stationary points. Similarly, State Adversarial MDPs [26; 27; 28; 24] address adversarial attacks on state observations, effectively creating a partially observable MDP. Finally, using rectangularity assumptions, [29; 30] use Wasserstein and \(^{2}\) balls respectively for the uncertainty set in Robust RL.

## 4 Time-constrained robust MDP algorithms

The TC-RMDP framework addresses the limitations of traditional robust reinforcement learning by considering multifactorial, correlated, and time-dependent disturbances. Traditional robust reinforcement learning often relies on rectangularity assumptions, which are rarely met in real world scenarios, leading to overly conservative policies. The TC-RMDP framework provides a more accurate reflection of real-world dynamics, moving beyond the conventional rectangularity paradigm.

We cast the TC-RMDP problem as a two-player zero-sum game, where the agent interacts with the environment, and the adversary (nature) changes the MDP parameters \(\). Our approach is generic and can be derived within any robust value iteration scheme, performing \(_{(s)_{A}}_{}_{a(s)}[r(s,a)+ _{s^{} p_{}(s,a)}v_{n}(s^{})]\) updates, by modifying the adversary's action space and potentially the agent's state space to obtain updates of the form \(_{(s,)_{A}}_{b B}_{a(s)}[r(s,a)+ _{s^{} p_{+b}(s,a)}v_{n}(s^{})]\). In Section 5, we will introduce time constraints within two specific robust value iteration algorithms, namely RARL  and M2TD3  by simply limiting the search space for worst-case \(\) at each step. This specific implementation extends the original actor-critic algorithms. For the sake of conciseness, we refer the reader to Appendix E.1 for details regarding the loss functions and algorithmic details.

Three variations of the algorithm are provided (illustrated in Figure 1) but all fall within the training loop of Algorithm 1.

``` Input: Time-constrained MDP: \((S,A,,p_{},r,L)\), Agent \(\), Adversary \(\) for each interaction time step \(t\)do \(a_{t}_{i}(s_{t},_{i})\)// Sample an action with Oracle-TC or \(a_{t}_{i}(s_{t},a_{t-1},s_{t-1})\)// Sample an action with Stacked-TC or \(a_{t}_{i}(s_{t})\)// Sample an action with TC \(_{t+1}_{i}(s_{t},a_{t},_{t})\)// Sample the worst TC parameter \(s_{t+1} p_{_{t+1}}(s_{t},a_{t})\)// Sample a transition \(\{(s_{t},a_{t},r(s_{t},a_{t}), _{t},_{t+1},s_{t+1})\}\)// Add transition to replay buffer \(\{s_{i},a_{i},r(s_{i},a_{i}),_{i},_{i+1},s_{i+1}\}_{i[1,N]} \)// Sample a mini-batch of transitions \(_{t+1} UpdatePolicy(_{t})\)// Update Agent \(_{t+1} UpdatePolicy(})\)// Update Adversary ```

**Algorithm 1** Time-constrained robust training

Oracle-TC. As discussed in Section 2, the Oracle-TC version includes the MDP state and parameter value as input, \(:\). This method assumes that the agent has access to the true parameters of the environment, allowing it to make the most informed decisions and possibly reach the true robust value function. However, these parameters \(\) are sometimes non-observable in practical scenarios, making this method not always feasible.

Stacked-TC. Since \(\) might not be observable but may be approximately identified by the last transitions, the Stacked-TC policy uses the previous state and action as additional inputs in an attempt to replace \(\), \(:\). This approach leverages the information in the transitions, even though it might be insufficient for a perfect estimate of \(\). It aims to retain (approximately) the convergence properties of the Oracle-TC algorithm.

Figure 1: TC-RMDP training involves a temporally-constrained adversary aiming to maximize the effect of temporally-coupled perturbations. Conversely, the agent aims to optimize its performance against this time-constrained adversary. In orange, the oracle observation, and in blue the stacked observation.

Vanilla TC. Finally, the vanilla TC version takes only the state, \(:\), as input, similar to standard robust MDP policies. This method does not attempt to infer the environmental parameters or the transition dynamics explicitly. Instead, it relies on the current state information to guide the agent's actions. While this version is the most straightforward and computationally efficient, it may not perform as robustly as the Oracle-TC or Stacked-TC versions in environments with significant temporal disturbances, since it attempts to solve a partially observable Markov game, for which there may not exist a stationary optimal policy based only on the observation. Despite this, it remains a viable option in scenarios where computational simplicity and quick decision-making are prioritized.

## 5 Results

**Experimental settings**. This section evaluates the robust time-constrained algorithm's performance under severe time constraints and in the static settings. Experimental validation was conducted in continuous control scenarios using the MuJoCo simulation environments . The approach was categorized into three variants. The Oracle-TC, where the agent accessed environmental parameters \((s_{t},)\); the Stacked-TC, where the agent took in input \((s_{t},s_{t-1},a_{t-1})\); and the vanilla TC, which did not receive any additional inputs \((s)\). For each variant of the time-constrained algorithms, we applied them to RARL , and M2TD3 , renaming them TC-RARL and TC-M2TD3, respectively. The algorithms were tested against two state-of-the-art robust reinforcement learning algorithms, M2TD3 and RARL. Additionally, the Oracle versions of M2TD3 and RARL, where the agent's policy included \(\) in the input \(:\), were evaluated for a more comprehensive assessment. Comparisons were also made with Domain Randomization (DR)  and vanilla TD3.  to ensure a thorough analysis. A 3D uncertainty set is defined in each environment \(\) normalized between \(^{3}\). Appendix G provides detailed descriptions of uncertainty parameters. Performance metrics were gathered after five million steps to ensure a fair comparison. All baselines were constructed using TD3, and a consistent architecture was maintained across all TD3 variants. The results presented below were obtained by averaging over ten distinct random seeds. Appendices E.4, E.3, E.2, and H.2 discuss further details on hyperparameters, network architectures, and implementation choices, including training curves for our methods and baseline comparisons. In the following tables 1, 2, 3, the best performances are shown in bold. Oracle methods, with access to optimal information, are shown in black. Items in bold and green represent the best performances with limited information on \(\), making them more easily usable in many scenarios. When there is only one element in bold and green, this implies that the best overall method is a non-oracle method.

**Performance of TCRMDPs in worst-case time-constrained**. Table 1 reports the worst-case time-constrained perturbation. To address the worst-case time-constrained perturbations for each trained agent \(^{*}\), we utilized a time-constrained adversary using TD3 algorithm \(^{*}=_{ B}_{a ^{*}(s),b(s,a,)}[r(s,a)+s^{}  p_{+b}(s,a)v_{n}(s^{})]\) within a perturbation radius of \(L=0.001\) for a total of 5 million steps. The sum of episode rewards was averaged over 10 episodes. A heuristic to choose the perturbation radius is explained in Appendix K. To compare metrics across different environments, each method's score \(v\) was standardized relative to the reference score of TD3. TD3 was trained on the environment using default transition function parameters, with its score denoted as \(v_{TD3}\). The M2TD3 score, \(v_{M2TD3}\), was used as the comparison target. The formula applied was \((v-v_{TD3})/(|v_{M2TD3}-v_{TD3}|)\). This positioned \(v_{TD3}\) as the minimal baseline and \(v_{M2TD3}\) as the target score. This standardisation provides a metric that quantifies the

   & Ant & HalfCheeta & Hopper & Humanoid & Walker & Agg. \\  Oracle M2TD3 & \(1.11 0.07\) & \(0.95 0.1\) & \(1.51 0.84\) & \(2.07 0.19\) & \(1.31 0.36\) & \(1.39 0.31\) \\ Oracle RARL & \(0.72 0.18\) & \(-0.71 0.05\) & \(-1.3 0.28\) & \(-2.8 1.62\) & \(-0.19 0.2\) & \(-0.86 0.47\) \\ Oracle-TC-M2TD3 & \(1.61 0.32\) & \(\) & \(\) & \(1.69 2.14\) & \(1.49 0.41\) & \(\) \\ Oracle-TC-RARL & \(\) & \(2.63 0.12\) & \(6.86 1.46\) & \(0.19 1.68\) & \(1.34 0.11\) & \(2.54 0.74\) \\  Stacked-TC-M2TD3 & \(1.33 0.21\) & \(\) & \(\) & \(-1.42 1.44\) & \(\) & \(2.1 0.55\) \\ Stacked-TC-RARL & \(1.48 0.22\) & \(1.76 0.08\) & \(3.28 0.27\) & \(1.39 0.57\) & \(1.01 0.21\) & \(1.78 0.27\) \\ TC-M2TD3 & \(1.52 0.2\) & \(\) & \(5.16 0.2\) & \(\) & \(1.38 0.25\) & \(\) \\ TC-RARL & \(1.57 0.26\) & \(1.54 0.15\) & \(2.04 0.49\) & \(1.25 1.91\) & \(0.89 0.2\) & \(1.46 0.6\) \\ TD3 & \(0.0 0.19\) & \(0.0 0.27\) & \(0.0 1.27\) & \(0.0 1.18\) & \(0.0 0.23\) & \(0.0 0.63\) \\ DR & \(\) & \(1.59 0.12\) & \(2.28 0.42\) & \(0.87 1.79\) & \(1.03 0.19\) & \(1.47 0.54\) \\ M2TD3 & \(1.0 0.19\) & \(1.0 0.14\) & \(1.0 0.96\) & \(1.0 1.31\) & \(1.0 0.31\) & \(1.0 0.58\) \\ RARL & \(0.63 0.2\) & \(-0.61 0.18\) & \(-1.5 0.33\) & \(0.8 0.88\) & \(0.27 0.25\) & \(-0.08 0.37\) \\  

Table 1: Avg. of normalized time-coupled worst-case performance over 10 seeds for each method improvement of each method over TD3 in relation to the improvement of M2TD3 over TD3. In each evaluation environment, agents trained with the time-constrained framework (indicated by TC in the method name) demonstrated significantly superior performance compared to those trained using alternative robust reinforcement learning approaches, including M2TD3 and RARL. Furthermore, they outperformed those trained through domain randomisation (DR). Notably, even without directly conditioning the policy with \(\), the time-constrained trained policies excelled against all baselines, achieving up to a 2.9-fold improvement. The non-normalized scores are reported in Appendix H. Additionally, when policies were directly conditioned by \(\) and trained within the robust reinforcement learning framework, they tended to be overly conservative in the time-constrained framework. This is depicted in Table 1, comparing the performances of Oracle RARL, Oracle M2TD3, Oracle TC-RARL, and Oracle TC-M2TD3. Both policies also observe \(\). The only difference is that Oracle RARL and Oracle M2TD3 were trained in the robust reinforcement learning framework, while Oracle TC-RARL and Oracle TC-M2TD3 were trained in the time-constrained framework. The performance differences under worst-case time-coupled perturbation are as follows: for Oracle RARL (resp. M2TD3) and Oracle TC-RARL (resp. M2TD3), the values are \(-0.86\) (\(1.39\)) vs. \(2.54\) (\(3.07\)). This observation highlights the need for a balance between robust training and flexibility in dynamic conditions. A natural question arises regarding the worst-case time-constrained perturbation. Was the adversary in the loop adequately trained, or might its suboptimal performance lead to overestimating the trained agent's reward against the worst-case perturbation? The adversary's performance was monitored during its training against all fixed-trained agents. The results in Appendix F show that our adversary converged.

**Robust Time-Constrained Training under various time fixed adversaries**. The method was evaluated against various fixed adversaries, focusing on the random fixed adversary shown in Figure 2. This evaluation shows that robustly trained agents can handle dynamic and unpredictable conditions. The random fixed adversary simulates stochastic changes by selecting a parameter \(_{t}\) at each timestep within a radius of \(L=0.1\). This radius is 100 times larger than in our training methods. At the start of each episode, \(_{0}\) is uniformly sampled from the uncertainty set \(_{0}()\). This tests the agents' adaptability to unexpected changes. Figures 1(a) through 1(e) show our agents' performance. Agents trained with our robust framework consistently outperformed those trained with standard methods. The policy was also assessed against five other fixed adversaries: cosine, exponential, linear, and logarithmic. Detailed results are provided in the Appendix. H.1.

**Performance of Robust Time-Constrained MDPs in the static setting**. In static environments, the Robust Time-Constrained algorithms were evaluated for worst-case and average performance metrics, shown in Tables 2 and 3. A fixed uncertainty set \(\) was used, dividing each dimension of \(\) into ten segments, creating a grid of 1000 points \((10^{3})\). Each agent ran five episodes at each grid point, and the rewards were averaged. The scores were normalized as described for the

Figure 2: Evaluation against a random fixed adversary, with a radius \(L=0.1\)

[MISSING_PAGE_FAIL:8]

on the evolution of the parameter that leads to smoothness on reward and transition kernel in the following definition 6.1.

**Definition 6.1** (Reward/Kernel Lipchitz TC-RMDPs ).: _We say that a parametric RDMPs is time constrained if the parameter change is bounded through time ie. \(\|_{t+1}-_{t}\| L\). Moreover, we assume that this variation in parameter implies a variation in the reward and transition kernel of_

\[ s, a,\|P_{t}( s,a)- P_{t+1}( s,a)\|_{1} L_{P};|r_{t}(s,a)- [r_{t+1}(s,a)]| L_{r}\]

From a theoretical point of view, a TC-RMDP can be seen as a sequence of stationary MDPs with time indexed reward and transition kernel \(r_{t}\), \(P_{t}\) that have continuity. More formally for \(M_{t}=(S,A,,p_{_{t}},r_{t},L=(L_{p},L_{r}))\), we can then define the sequence of stationary MDPs with Lipchitz variation :

\[_{t}^{L} =\{M_{t}\}_{t^{}=t_{0}}^{t}; L_{ r} s, a,\|P_{t}^{ }( s,a)-P_{t^{}+1}( s,a)\|_{1} L_{P};\] \[|r_{t^{}}(s,a)-r_{t^{}+1}(s,a)|  L_{r}}\] (1)

Defining \(r_{t}^{k}\) as the random variable corresponding to the reward function at time step \(t\) for stationary MDPs, but iterating with index \(k\), the stationary roll return at time \(t\) is \(G(,M_{t})=_{k 0}^{k}r_{t}^{k}\). Assuming that at a fixed \(t\) the reward and transition kernel \(r_{t},P_{t}\) are fixed, the robust objective function is:

\[J^{R}(,t):=_{m=\{m_{t}^{}\}_{t^{}=t_{0}}^{t}_ {t}^{L}}[G(,m)]\]

This leads to the following guarantee for vanilla TC and Stacked-TC algorithms.

**Theorem 6.2**.: _Assume TC-RMPDS with \(L=(L_{r},L_{P})\) smoothness. Then \( t,r_{t}\),_

\[ t^{+}, t_{0}^{+},|J^{R}( ,t_{0})-J^{R}(,t_{0}+t)| L^{}t.\]

_with \(L^{}:=(}L_{P}+L_{r})\)_

This theorem states that a small variation of the Kernel and reward function will not affect too much the robust objective. In other terms, despite the fact that the TC Bellman operator may not admit a fixed point and yield a non-stationary sequence of value functions, variations of the expected return remain bounded. Proof of the Th. 6.2 can be found in Appendix C.

## 7 Conclusion

This paper presents a novel framework for robust reinforcement learning, which addresses the limitations of traditional methods that rely on rectangularity assumptions. These assumptions often result in overly conservative policies, which are not suitable for real-world applications where environmental disturbances are multifactorial, correlated, and time-constrained. In order to overcome these challenges, we proposed a new formulation, the Time-Constrained Robust Markov Decision Process (TC-RMDP). The TC-RMDP framework is capable of accurately capturing the dynamics of real-world environments, due to its consideration of the temporal continuity and correlation of disturbances. This approach resulted in the development of three algorithms: The three algorithms, Oracle-TC, Stacked-TC, vanilla TC which differ in the extent to which environmental information is incorporated into the decision-making process. A comprehensive evaluation of continuous control benchmarks using MuJoCo environments has demonstrated that the proposed TC-RMDP algorithms outperform traditional robust RL methods and domain randomization techniques. These algorithms achieved a superior balance between performance and robustness in both time-constrained and static settings. The results confirmed the effectiveness of the TC-RMDP framework in reducing the conservatism of policies while maintaining robustness. Moreover, we provided theoretical guaranties for Oracle-TC in Th. 2.1 and for Stacked-TC and vanilla TC in Th. 6.2. This study contributes to the field of robust reinforcement learning by introducing a time-constrained framework that more accurately reflects the dynamics observed in real-world settings. The proposed algorithms and theoretical contributions offer new avenues for the development of more effective and practical RL applications in environments with complex, time-constrained uncertainties.