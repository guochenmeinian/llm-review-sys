# Object-Centric Slot Diffusion

Jindong Jiang

Rutgers University

jindong.jiang@rutgers.edu

&Fei Deng

Rutgers University

fei.deng@rutgers.edu

Gautam Singh

Rutgers University

singh.gautam@rutgers.edu

&Sungjin Ahn

KAIST

sungjin.ahn@kaist.ac.kr

Correspondence to sungjin.ahn@kaist.ac.kr.

KAIST

###### Abstract

The recent success of transformer-based image generative models in object-centric learning highlights the importance of powerful image generators for handling complex scenes. However, despite the high expressiveness of diffusion models in image generation, their integration into object-centric learning remains largely unexplored in this domain. In this paper, we explore the feasibility and potential of integrating diffusion models into object-centric learning and investigate the pros and cons of this approach. We introduce Latent Slot Diffusion (LSD), a novel model that serves dual purposes: it is the first object-centric learning model to replace conventional slot decoders with a latent diffusion model conditioned on object slots, and it is also the first unsupervised compositional conditional diffusion model that operates without the need for supervised annotations like text. Through experiments on various object-centric tasks, including the first application of the FFHQ dataset in this field, we demonstrate that LSD significantly outperforms state-of-the-art transformer-based decoders, particularly in more complex scenes, and exhibits superior unsupervised compositional generation quality. In addition, we conduct a preliminary investigation into the integration of pre-trained diffusion models in LSD and demonstrate its effectiveness in real-world image segmentation and generation. Project page is available at https://latentslotdiffusion.github.io

## 1 Introduction

The fundamental structure of the physical world is compositional and modular. While this structure is naturally revealed in some data modalities like language in the form of tokens or words, in other modalities such as images, it is elusive how one may discover this structure. However, this representational compositionality and modularity is essential for various applications that require the systematic manipulation of knowledge pieces to achieve high-level cognitive abilities. This includes reasoning , causal inference , and out-of-distribution generalization .

Object-centric learning  aims to discover the latent compositional structure from unstructured observation by learning to bind relevant features, thereby forming useful tokens in an unsupervised way. For images, one of the most popular approaches is to auto-encode the image via the Slot Attention  encoder. Slot Attention applies competitive spatial attention to partition the image into separate local areas and then obtain a representation, called a slot, from each area. Then, a decoder generates the image from the slots with the aim of minimizing the reconstruction error. Due to the limited capacity and competition between slots, each slot is encouraged to capture a reusable and compositional entity, such as an object.

The primary challenge that remains in the framework of unsupervised object-centric learning is making it work for complex naturalistic scene images. Until recently, most object-centric models have adopted a special type of decoder known as the _mixture decoder_. While a weak slot-wise decoder  is predominantly employed in this mixture decoder due to its efficacy in promoting the emergence of object-centric representation in relatively simple scene images, further studies [70; 73] have shown that this strong prior can make handling complex naturalistic scene images more challenging. Contrary to conventional belief, Singh _et al._ recently proposed departing from this low-capacity mixture-decoder approach and suggested to use an expressive transformer-based autoregressive image generator in object-centric learning [70; 73]. It was shown that increasing the decoder capacity is crucial for handling complex and naturalistic scenes in this framework [8; 7; 69; 84; 71].

The success of transformer-based image generative modeling in object-centric learning naturally leads to the question: _can diffusion models, another pillar of modern deep generative modeling known for their highly expressive generation capabilities, also benefit object-centric learning?_ Diffusion models [75; 31] are based on a stochastic denoising process and have demonstrated impressive performance in a variety of image generation tasks [61; 58; 65; 14; 63; 66], sometimes surpassing transformer-based autoregressive models. Moreover, diffusion models possess unique modeling capabilities that transformer-based autoregressive models cannot provide . However, despite their potential, the applicability of diffusion models to unsupervised object-centric learning remains largely unexplored. Consequently, it is crucial to examine the feasibility of this approach and to identify the associated benefits and limitations.

In this paper, we address this question by introducing a novel model called Latent Slot Diffusion (LSD). The LSD model can be interpreted from two perspectives. From the perspective of object-centric learning, LSD can be viewed as the first model substituting conventional slot decoders with a conditional latent diffusion model, in which the conditioning is object-centric slots provided by Slot Attention. From the diffusion model perspective, our approach is the first _unsupervised_ compositional conditional diffusion model. While traditional conditional diffusion models [61; 63; 65; 52] require supervised annotations, such as a text description of an image for compositional generation, LSD is a diffusion model that enables the construction of such compositional descriptions in terms of visual concepts extracted from images through unsupervised object-centric learning.

In our experiments, we evaluate the proposed model across various object-centric tasks, including unsupervised object segmentation, downstream property prediction, compositional generation, and image editing. We show that the LSD model delivers significantly superior performance compared to the state-of-the-art model, namely, the transformer-based autoregressive generative model. A notable attribute of the proposed model is that LSD's performance advantage over autoregressive transformers increases as the scene complexity increases. In particular, LSD enables exploring, for the first time, the applicability of object-centric model to the FFHQ dataset , a collection of high-resolution and high-quality face images that surpasses the generative capabilities of existing object-centric models. Additionally, we discuss the overfitting issue faced by LSD on very simple scene images, such as those in the CLEVR dataset , and offer suggestions for addressing this problem.

## 2 Latent Slot Diffusion

In this section, we outline the auto-encoding framework of our proposed model, Latent Slot Diffusion or LSD 2, beginning with our object-centric encoder and subsequently describing our proposed decoder.

### Object-Centric Encoder

Given an input image \(^{H W C}\), our object-centric encoder seeks to decompose and represent it as a collection of \(N\) vectors or slots \(^{N D}\), where each slot (denoted as \(_{n}^{D}\)) is encouraged to represent a compositional entity in the image. For this, we adopt Slot Attention, an architecture that is also used in the current state-of-the-art object-centric learning approaches [53; 70; 43]. We now describe how Slot Attention works in our model.

In Slot Attention, we first encode the input image \(\) as a set of \(M\) input features \(^{M D_{}}\) via a backbone network \(f^{}_{}\), _i.e._, \(=f^{}_{}()\). The network \(f^{}_{}\) is implemented as a CNN(detailed in Appendix D.2) whose final output feature map is flattened to form a set. Next, the features in \(\) are grouped into \(N\) spatial groupings and the information in each grouping is aggregated to produce a _slot_. The grouping is achieved via an iterative slot refinement procedure. At the start of the refinement procedure, the slots \(\) are filled with random Gaussian noise. Then, they are refined via _competitive attention_ over the input features, where the \(N\) slots act as the queries and the \(M\) input features act as the keys and values. The queries and keys undergo a dot-product to produce \(N M\) attention proportions. Next, on these attention proportions, the softmax function is applied along the axis \(N\) to produce attention weights \(\) that capture the soft assignment of each input feature to a slot. Then, for each \(n\), all input features are sum-pooled weighted by their attention weights \(_{n,1},,_{n,M}\) to produce an attention readout \(_{n}^{D}\). These steps can be formally described as follows:

\[=}() k( )^{T}}{})\;\;\;\;_{n,m}= _{n,m}}{_{m=1}^{M}_{n,m}}\;\;\; \;_{n}=_{m=1}^{M}v(_{m})_{n,m},\]

where, \(q,k,v\) are linear projections that map the slots and input features to a common dimension \(D\). Using the bottom-up information captured by the readout \(_{n}\), the slots are updated by an RNN as \(_{n}=f_{}^{}(_{n},_{n})\). In practice, competitive attention and RNN update are performed iteratively several times and slots from the last iteration are considered the final slot representation \(\).

### Latent Slot Diffusion Decoder

In this section, we describe our proposed decoding approach called _Latent Slot Diffusion Decoder_ or _LSD decoder_ for reconstructing the image given the slot representation \(\). The design of the LSD decoder takes advantage of the recent advances in generative modeling based on diffusion [63; 31]. An overview of our decoding approach is provided in Figure 1.

#### 2.2.1 Pre-Trained Image Auto-Encoder

One of the key design components of the LSD decoder is a pre-trained auto-encoder (AE) [21; 63], which provides a way to map an image \(\) to a lower-dimensional _latent representation_\(_{0}\) via an encoder \(f_{}^{}\). This enables LSD to reduce the computational burden of reconstructing high-resolution images by using the lower-dimensional latent \(_{0}\) as an intermediate reconstruction target. It also allows us to later obtain the original resolution image without compromising image content and fidelity by decoding the latent \(_{0}\) using the AE decoder \(g_{}^{}\). These can be summarized as:

\[_{0}=f_{}^{}(),}=g_{ }^{}(_{0}),\;_{0} ^{H_{} W_{} D_{}},\;\;}^{H W C}.\]

In our model, we employ an auto-encoder pre-trained on OpenImages 3.

Figure 1: **Method.**_Left:_ In training, we encode the given image as image latent and as slots. We then add noise to the image latent and we train a denoising network to predict the noise given the noisy latent and the slots. _Right:_ Given the trained model, we can generate novel images by composing a slot-based concept prompt and decoding it using the trained latent slot diffusion decoder.

#### 2.2.2 Slot-Conditioned Diffusion

In LSD, we leverage diffusion modeling to reconstruct the image latent \(_{0}\) conditioned on the slots \(\). This modeling approach has been primarily explored in supervised contexts, _e.g._, for text-to-image generation in Latent Diffusion Models (LDM) . However, unlike LDM, in this work, instead of conditioning the decoder on embeddings of supervised labels, we condition it on slots where the process of obtaining the slots themselves, _i.e._, Slot Attention, is jointly trained with the decoder without supervision. Following LDM, our decoder works by training a decoding distribution \(p_{}(_{0}|)\) to maximize the log-likelihood \( p_{}(_{0}|)\) of the image latent \(_{0}\) given the slots \(\). This decoding distribution \(p_{}(_{0}|)\) is modeled as a \(T\)-step denoising process:

\[p_{}(_{0}|)= p(_{T})_{t=T,, 1}p_{}(_{t-1}|_{t},t,)\,_{1:T},\]

where \(p(_{T})=(,)\), \(p_{}(_{t-1}|_{t},t,)\) is a one-step denoising distribution, and \(_{T},_{T-1},,_{0}\) is a sequence of progressively denoised latents. The one-step denoising distribution \(p_{}(_{t-1}|_{t},t,)\) is parametrized via a neural network \(g_{}^{}\) in the following manner:

\[p_{}(_{t-1}|_{t},t,)=( }}(_{t}-}{_{t}}}}_{t}),_{t} ),}_{t}=g_{}^{}( _{t},t,),\]

\(_{1},,_{T}\) is a linearly increasing variance schedule, \(_{t}=1-_{t}\), and \(_{t}=_{i=1}^{t}(1-_{i})\).

**Sampling Procedure.** To sample a \(_{0} p_{}(_{0}|)\), we adopt an iterative denoising procedure as in [63; 31]. The sampling process starts with a latent representation \(_{T}(,)\) filled with random Gaussian noise. Next, conditioned on the slots, we denoise it \(T\) times by sampling sequentially from the one-step denoising distribution \(_{t-1} p_{}(_{t-1}|_{t},t,)\) for \(t=T,,1\). This produces a sequence of latents \(_{T},_{T-1},,_{0}\) that become progressively cleaner. Finally, \(_{0}\) can be considered as the reconstructed latent representation.

**Training Procedure.** Following LDM , the training of \(p_{}(_{0}|)\) can be cast to a simple procedure for training \(g_{}^{}\) as follows. Given an image \(\), its slot representation \(\), and its image latent \(_{0}\), we first randomly choose a noise level \(t\{1,,T\}\) from a uniform distribution. Given the \(t\), we corrupt the clean latent \(_{0}\) and obtain a noised latent \(_{t}\) as follows:

\[_{t}=_{t}}_{0}+_{t} }_{t},_{t}(, ),_{t}=_{i=1}^{t}(1-_{i}).\]

The noised latent \(_{t}\) is then given as input to \(g_{}^{}\) along with the slots \(\) and denoising time-step \(t\) to predict the noise \(_{t}\). The network \(g_{}^{}\) is trained by minimizing the mean squared error between the predicted noise \(}_{t}\) and the true noise \(_{t}\):

\[}_{t}=g_{}^{}(_{t},t,)(,)=||}_{t}-_{t}||^{2}.\]

#### 2.2.3 Denoising Network

We implement the denoising network \(g_{}^{}\) as a variant of the conventional UNet architecture adapted to incorporate slot-conditioning. Our denoising network consists of a stack of \(L\) layers where each layer \(l\) is a UNet-style CNN layer followed by a slot-conditioned transformer:

\[}_{l}=-2.0pt_{}^{l}([ _{l-1},_{(l)}],t),_{l}= -2.0pt_{}^{l}(}_{l}+ _{l},),\]

where \(_{0}=_{t}\) is the input, \(_{1},,_{L-1}\) are the hidden states and \(}_{t}=_{L}\) is the output.

**CNN Layers.** Following UNet , the convolutional layers \(-2.0pt_{}^{1},,-2.0pt_{ }^{L}\) downsample the feature map via the first \(\) layers and then upsample it back to the original resolution via the remaining layers. Following standard UNet, these CNN layers also receive inputs via skip connection from an earlier layer denoted by \((l)\). This network design has also been explored in LDM .

**Slot-Conditioned Transformer.** The role of the transformer is to incorporate the information from the slots into the UNet-based denoising process. For this, in each layer \(l\), the intermediate feature map \(}_{l}\) produced by the CNN layer is flattened into a set of features. To this, positional embeddings \(_{l}\) are added and the resulting features are provided as input to the transformer. Within the transformer, these features interact with each other and with the slots \(\), thus incorporating the information from the slots into the denoising process. The transformer output is then reshaped back to a feature map \(_{l}\)

## 3 Compositional Image Synthesis

In this section, we describe how a trained LSD model can be used to compose and synthesize novel images. The conventional approach to composing novel images is commonly supervised and rely on text prompts. This involves using words from a vocabulary to create a sentence, which is then given to a text-to-image model to synthesize the desired image [62; 61; 65; 63; 58]. However, in a fully unsupervised setting like ours, we first need to build a library of visual concepts by simply observing a large set of unlabelled images. Then, similarly to composing a sentence prompt using words, we compose a _concept prompt_ by selecting concepts from the visual concept library. By providing this concept prompt to the LSD decoder, we can then synthesize a desired novel image. This approach of unsupervised compositional image synthesis was also explored in .

**Unsupervised Visual Concept Library.** To build a library of visual concepts from unlabelled images, we first take a large batch of \(B\) images \(_{1},,_{B}\). We then apply slot attention to obtain slots for these images \(_{1},,_{B}\). Next, we gather all these slots into a single set \(\) and perform \(K\)-means on it. The \(K\)-means procedure assigns each slot in \(\) to one of the \(K\) clusters. We consider the set of slots assigned to a \(k\)-th cluster as a visual concept library \(_{k}\). With \(K\) as the number of clusters, this method results in \(K\) visual concept libraries \(_{1},,_{K}\). Our experiments will demonstrate that this basic \(K\)-means technique can generate semantically meaningful concept libraries. For example, on a dataset of human face images like FFHQ , the \(K\) libraries correspond to practical concept categories such as hair style, face, clothing, and background.

**Novel Image Synthesis.** Given libraries \(_{1},,_{K}\), we can compose a concept prompt \(_{}\) by picking \(K\) slots, each from the corresponding \(k\)-th library, and stacking them together:

\[_{}=(_{1},,_{K}),\] where \[_{k}(_{k})\]

We then give the composed prompt \(_{}\) to the LSD decoder to generate the image latent: \(_{} p_{}(_{0}|_{}})\). Applying the image decoder on \(_{}\) generates the desired novel scene image \(_{}=g_{}^{}(_{})\). For instance, in the FFHQ dataset, the concept prompt can be a collection of chosen hair style, face, clothing, and background. Decoding this prompt would generate a face image that conforms to this prompt.

## 4 Related Work

**Unsupervised Object-Centric Learning.** Object-centric representation learning aims to decompose multi-object scenes into meaningful object entities. A common approach to this is by auto-encoding. In this line, the focus has been to design an appropriate decoder that supports good decomposition. The most widely used decoders include the mixture-decoder [6; 25; 53; 26; 19; 78; 1; 17; 18; 39; 89; 80], spatial transformer decoder [20; 12; 50; 35; 13; 9; 36; 49; 72; 86], Neural Radiance Fields (NeRF) [77; 83; 74], transformer decoder [70; 73; 71; 84; 7; 67; 23], energy-based models  and complex-valued functions . Among these, the mixture decoder has been shown to struggle on complex scene images [70; 73] while the spatial transformer decoder requires careful tuning of hyperparameters which limits their applicability in realistic scenes. Neural Radiance Fields require camera poses, and the learning setting involves 3D scenes unlike ours. Another line of work seeks object-centric scene decomposition without reconstruction. This includes works such as [69; 82; 28; 79; 3; 54; 87]. However, unlike ours, these approaches lack the ability to generate images. Preceding object-centric learning, several works pursued disentanglement within a single-vector representation of the scene and use it for compositional image generation [11; 30; 42; 45; 10]. However, lacking spatial binding mechanisms, these methods struggle in multi-object scenes  unlike ours.

**Diffusion Models.** Diffusion models (DMs) are a recent class of generative models that can produce high-quality images by reversing a stochastic process that gradually adds noise to an image [31; 76]. DMs have been applied to various tasks in computer vision, such as class-conditioned generation, text-to-image generation, image editing, super-resolution, and inpainting [14; 33; 61; 58; 65; 56; 32; 66]. Recently,  proposed Latent Diffusion Models (LDM). By virtue of operating on a low-dimensional latent space, LDM reduces the computational demands of DMs significantly.  introduced a method for multi-object scene generation by combining signals from multiple text-conditioned denoising networks. However, to achieve controllable generation, many of these existing DMs require additional labels such as text descriptions to train and control the generation process. In contrast, our model can generate images compositionally using object concepts directly extracted from images. Moreover,DMs have also been used for representation learning.  demonstrated that the intermediate features of a learned DM are useful representations for label-efficient semantic segmentation.  introduced an image encoder that compresses an image into a latent representation, jointly trained with the denoising objective. Nevertheless, these representations are unstructured and not modular like ours.

**Concurrent Research.** A concurrent study in  also explores a similar idea of object-centric learning using DMs and its downstream applications such as the image editing tasks akin to our experiments. Just like LSD, they employ the Latent Diffusion Model (LDM) as the slot decoder. However, unlike our method,  independently train a latent encoder for each dataset, whereas LSD employs a pre-trained latent encoder shared across all input data.

## 5 Experiments

We extensively evaluate our proposed Latent Slot Diffusion (LSD) model on various object-centric tasks, including unsupervised object segmentation, downstream property prediction, compositional generation, and image editing. As will be shown, our model demonstrates substantial improvements over the state-of-the-art on multiple challenging datasets with complex texture and background, including FFHQ  which has been beyond the generative capability of object-centric models. In addition, we also include a preliminary exploration into the potential of LSD using pre-trained diffusion models, discussing its performance in both multi-object datasets and unconstrained real-world images in Section 5.4 and Appendix C.

**Datasets.** We evaluate our model on five datasets. Four of them are synthetic multi-object datasets--CLEVR , CLEVRTex , MOVi-C, MOVi-E . They present increasing levels of difficulty--CLEVRTex adds texture to objects and backgrounds, MOVi-C uses more complex objects and natural backgrounds, and MOVi-E contains large numbers of objects (up to 23) per scene. Furthermore, we explore the applicability of object-centric models to FFHQ , a dataset of high-quality face images. Unlike previous works in this line that only investigate low-resolution images, _e.g._, up to \(128 128\), we use a resolution of \(256 256\) for all datasets in our experiments.

**Baselines.** We compare our model against SLATE, the state-of-the-art object-centric learning and unsupervised compositional image generation approach. We use its improved version , which is more robust in complex scenes. For a fair comparison with LSD that leverages pre-trained auto-encoder, we also develop a variant of SLATE denoted as SLATE\({}^{+}\), where its low-capacity dVAE  is replaced with a pre-trained VQGAN model . For all models in this work, we use OpenImages-pretrained auto-encoders .

### Object-Centric Representation Learning

In line with previous work , we use unsupervised object segmentation and downstream property prediction to evaluate the object-centric learning capability and representation quality. Within each dataset, all models we compare use the same number of slots.

Figure 2: **Visualization of Unsupervised Object Segmentation. We show visualizations of predicted segments on CLEVR, CLEVRTex, MOVi-E, and FFHQ datasets.**

**Unsupervised Object Segmentation.** Following , to measure segmentation quality, we report the foreground adjusted rand index (FG-ARI), the mean intersection over union (mIoU), and the mean best overlap (mBO). These metrics are computed based on the attention masks generated by Slot Attention. Specifically, we utilize the attention weights described in Section 2.1, where attention weights \(\) are computed as \(=}() k( )^{T}}{})\).

Our results in Table 1 suggest that LSD is particularly strong in visually complex scenes. For example, on the most challenging MOVi-E dataset, LSD outperforms the strongest baseline by \(>\)\(8\%\) in mBO, \(>\)\(9\%\) in mIoU, and \(>\)\(6\%\) in FG-ARI. On CLEVRTex and MOVi-C featuring complex textures, LSD also achieves \(>\)\(9\%\) and \(>\)\(6\%\) gain respectively, in both mBO and mIoU. We visually show the superior segmentation quality of LSD in Figure 2. LSD obtains tighter object boundaries, less object splitting, and cleaner background segmentation. The advantages are most noticeable on CLEVRTex and MOVi-E, where the baselines over-segment the objects more frequently, or exhibit a common failure mode that divides images into approximately uniformly distributed block masks.

We also note that the FG-ARI score is sometimes not an ideal metric for evaluating segmentation quality, because it only considers the foreground pixels and disregards the correctness of the mask shape, as also highlighted by . In the MOVi-E experiment, even though SLATE\({}^{+}\) partitions the images arbitrarily into uniform patches, as shown in Figure 2, it still achieves a FG-ARI score comparable to SLATE, which produces significantly more reasonable object masks. This highlights the need for additional metrics, such as the mIoU score that we also measure for evaluating the segmentation quality in this work.

**Downstream Property Prediction.** Following , we evaluate the quality of the learned object-centric representations through downstream property prediction. Specifically, for each property, we train a network to predict the property given a frozen slot representation as input. The correspondence between the slot and its true label is determined by Hungarian matching  using masks. We use linear heads and 2-layer MLP as the prediction networks for discrete and continuous values, respectively. We report prediction accuracy for discrete properties (_e.g._, shape and material), and mean squared error for continuous properties (_e.g._, position).

As shown in Table 1, LSD is competitive with or better than the strongest baseline on CLEVRTex, MOVi-C, and MOVi-E, which is consistent with our finding in unsupervised object segmentation that

Table 1: **Segmentation Performance and Representation Quality.**_Left_: We evaluate the segmentation quality and report mBO, mIoU, and FG-ARI scores across various datasets and baselines. _Right_: We measure the representation quality by learning a probe to predict object properties given frozen slots. For position and 3D bounding box, we report MSE. For shape, material, and category, we report accuracy. The results are averaged over three random seeds, and the complete table, including standard deviations, can be found in Figure 5 in appendix.

LSD shines in visually complex scenes. For example, LSD obtains \(>\)\(4\%\) gain in predicting object category on MOVi-E and object material on CLEVRTex.

### Compositional Generation with Visual Concept Library

Like text-to-image generative models, LSD is able to take unseen slot-based prompts at test time and compose new images. Unlike text-to-image models, however, LSD obtains the compositional generation ability solely from images without relying on additional supervision like text inputs. As described in Section 3, we first build a concept library. Then, we sample one slot representation from each visual concept library and concatenate them into a sequence to form a slot-based prompt. We then feed the slot-based prompts to the LSD decoder to generate the images. This produces scenes with novel object layouts and faces with unseen attribute combinations.

We report in Table 2 the FID score  as a measure of the compositional generation quality. Following standard practice , we compute the FID score using 2K generated images and the full training dataset. Across all datasets, LSD achieves significantly better FID scores than SLATE and SLATE\({}^{+}\). We further demonstrate the superior compositional generation quality of LSD in Figure 3. We observe that on the more challenging MOVi-E and FFHQ datasets, LSD generates images with substantially more clear details and better coherence. In contrast, SLATE is limited by its decoder and produces images with missing details in the objects or human faces. While the details can be improved by the pre-trained auto-encoder in SLATE\({}^{+}\), some samples still exhibit severe distortions.

### Slot-Based Image Editing

In addition to generating new images from randomly sampled slot-based prompts, LSD also allows editing existing images by directly modifying their slot representations. Our experiments showcase LSD's capability in slot-based image editing, including object removal, single-object segmentation, object insertion, background extraction, and background swapping. Remarkably, we demonstrate, for the first time in object-centric generative models, the ability to perform face editing in real-world images, as illustrated in Figure 4.

   FID \(\) & SLATE & SLATE\({}^{+}\) & LSD (Ours) \\  CLEVRTex & 105.83 & 69.23 & **29.53** \\ MOVi-C & 170.83 & 148.27 & **69.12** \\ MOVi-E & 169.32 & 126.51 & **64.76** \\ FFHQ & 112.38 & 98.76 & **27.83** \\   

Table 2: **Compositional Image Generation.** On various datasets, we generate images using object slots randomly sampled from the dataset. We compare the fidelity of the generated images via the FID score. The lower the FID score, the better the fidelity. We find that our model produces the best fidelity scores compared to the baselines.

Figure 3: **Compositional Generation Samples.** We qualitatively compare the quality of image samples generated by our model with the baselines. We observe that LSD provides significantly higher fidelity and more clear details compared to the other methods.

We perform slot manipulation on the CLEVRTex dataset, including object removal, single-object extraction, object insertion, background extraction, and background swapping. To remove an object or extract the background, we discard the relevant slot or all object slots, respectively. Our findings indicate that with near-perfect object decomposition, removing an object can be achieved by simply discarding its slot. Additionally, the background image can be rendered from a single background slot, even without single-slot conditioning during training. In single-object extraction, we render an object with the same background using the respective object and background slots. For object insertion and background swapping, we split the image into top and bottom pairs (Figure 4_left_) and introduce a slot from another image or swap background slots. This demonstrates that an image's background can be entirely altered while preserving its original objects.

We further explore face replacement on the FFHQ dataset. LSD decomposes each image into four slots, corresponding to face, hairstyle, clothing, and background. Our results show that by replacing the face slots of the images, we are able to coherently change the image while maintaining the hairstyle, clothing, and background. The resulting images look realistic, suggesting that LSD can effectively blend various attributes even when given novel combinations.

Figure 4: **Slot-Based Image Editing.**_Left:_ Our model demonstrates image editing capabilities, including object removal, extraction, insertion, background extraction, and swapping. _Right:_ In the FFHQ dataset, we showcase face replacement by combining face slots from Source-B images with hairstyle, clothing, and background slots from Source-A images.

Figure 5: **Unsupervised Object-Centric Learning and Conditional Generation on Real-World Images with Pre-Trained Diffusion Models. Each image sample is conditioned on the same set of learned slots and with a different initial noise map in the denoising process. We use \(=1.3\) for all samples. Additional details are available in Appendix C.**

### Pre-Trained Diffusion Models and Real-World Object-Centric Learning.

In recent studies of DMs, much attention has been given to controllable image generation using large-scale pre-trained diffusion models such as Stable Diffusion [47; 57; 88]. One intriguing question is whether such pre-trained diffusion models can facilitate the learning of object-centric representation. In this regard, we present a preliminary investigation in Appendix C, where we test two LSD variants utilizing the pre-trained Stable Diffusion. Our findings indicate that (1) although the pre-trained Stable Diffusion model has not been trained on any multi-object datasets, it still provides a learning signal for reasonable object-centric learning, (2) with the strong generative capabilities of pre-trained DMs, LSD can scale up object-centric learning to real-world images; however, we also note the part-whole ambiguity issue in slot-based object learning in real-world scenarios, and (3) remarkably, the propose LSD variant achieves conditional generation with unconstrained real-world objects by applying classifier-free guidance  to the learned slot, which also provide a visualization of the semantic information captured in the learned representations. We show some image samples in Figure 5, please refer to Appendix C for additional details. We believe these preliminary attempts to be valuable explorations toward large-scale object-centric learning and hope our finding will inspire future research in this area.

## 6 Discussion

**LSD on Simple Images.** While LSD shows significant gains in complex naturalistic scenes, our preliminary investigation suggests a somewhat diminished performance in terms of segmentation and representation when the dataset consists of only visually simple and monotonous scene images like CLEVR. We conjecture that LSD may suffer from an overfitting problem when its high expressiveness encounters visually simple images. To address this issue, additional complexities can be introduced during training, such as integrating images from other datasets. In Appendix B, we offer a more detailed analysis of this challenge using the CLEVR dataset and introduce a training scheme that includes data samples from CLEVRTex to alleviate the problem. Our findings indicate that by integrating greater complexities into the training set, LSD can be effectively employed on simple datasets as well.

**Computation Requirement.** We compare the computation requirement of LSD and the baseline models in the CLEVRTex setting. LSD requires approximately 32 GB of training memory, compared to 31 GB and 36 GB for SLATE and SLATE\({}^{+}\), respectively. Notably, LSD does not require much higher memory consumption than regular unconditional latent diffusion, which takes 28 GB under the same setting. We train LSD on 2 NVIDIA RTX 6000 GPUs for 4.5 days, while SLATE and SLATE\({}^{+}\) are trained in 1 day and 2.7 days using the same GPU setup. For test-time generation, LSD takes 50.7 seconds to generate 50 images, while SLATE and SLATE\({}^{+}\) takes 86.1 and 87.6 seconds, respectively.

## 7 Conclusion

The integration of diffusion models into unsupervised object-centric learning has been largely unexplored, but holds significant potential. To assess the feasibility of this approach and to identify its strengths and weaknesses, we introduced the Latent Slot Diffusion model in this study, which serves two purposes: (1) the first model integrating diffusion models into unsupervised object-centric learning, and also (2) the first unsupervised compositional diffusion model which does not require supervised annotations like text. Our key findings indicate that the proposed model surpasses state-of-the-art transformer-based object-centric models in multiple tasks, with its performance advantage increasing as image complexity grows. Furthermore, the unsupervised compositional generation quality of our model exceeds that of transformer-based counterparts. Finally, we also introduce LSD variants that utilize pre-train Diffusion Models and demonstrate their ability in real-world object-centric learning and conditional generation with real-world objects. We believe that this work represents a significant advancement in object-centric learning towards dealing with complex naturalistic images.