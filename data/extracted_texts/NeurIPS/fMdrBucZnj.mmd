# Expected Probabilistic Hierarchies

Marcel Kolovieh\({}^{1,2,3}\)Bertrand Charpentier\({}^{4}\)Daniel Zugner\({}^{5}\)Stephan Gunnemann\({}^{1,2,3,4}\)

\({}^{1}\) School of Computation, Information and Technology, Technical University of Munich

\({}^{2}\) Munich Data Science Institute \({}^{3}\) Munich Center for Machine Learning

\({}^{4}\) Pruna AI \({}^{5}\) Microsoft Research AI for Science

Correspondence to: m.kolovieh@tum.de

###### Abstract

Hierarchical clustering has usually been addressed by discrete optimization using heuristics or continuous optimization of relaxed scores for hierarchies. In this work, we propose to optimize _expected_ scores under a probabilistic model over hierarchies. **(1)** We show _theoretically_ that the global optimal values of the expected Dasgupta cost and Tree-Sampling divergence (TSD), two unsupervised metrics for hierarchical clustering, are equal to the optimal values of their discrete counterparts contrary to some relaxed scores. **(2)** We propose Expected Probabilistic Hierarchies (EPH), a probabilistic model to learn hierarchies in data by optimizing expected scores. EPH uses _differentiable hierarchy sampling_ enabling end-to-end gradient descent based optimization, and an _unbiased subgraph sampling_ approach to scale to large datasets. **(3)** We evaluate EPH on synthetic and real-world datasets including _vector_ and _graph_ datasets. EPH outperforms all other approaches quantitatively and provides meaningful hierarchies in qualitative evaluations.

## 1 Introduction

A fundamental problem in unsupervised learning is clustering. Given a dataset, the task is to partition the instances into similar groups. While _flat_ clustering algorithms such as \(k\)-means group data points into disjoint groups, a _hierarchical_ clustering divides the data recursively into smaller clusters, which yields several advantages over a flat one. Instead of only providing cluster assignments of the data points, it captures the clustering at multiple granularities, allowing the user to choose the desired level of fine and coarseness depending on the task. The hierarchical structure can be easily visualized in a _dendrogram_ (e.g., see Fig. 4), making it easy to interpret and analyze. Hierarchical clustering finds applications in many areas, from personalized recommendation  and document clustering  to gene-expression  and phylogenetics . Furthermore, the presence of hierarchical structures can be observed in various real-world graphs in nature and society .

A first family of methods for hierarchical clustering are discrete approaches. They aim at optimizing some hierarchical clustering quality scores on a discrete search space, i.e.:

\[_{}}(,})}, \]

where \(\) denotes a given (vector or graph) dataset. Examples of score optimization could be the minimization of the discrete Dasgupta score , the minimization of the error sum of squares , the maximization of the discrete TSD , or the maximization of the modularity score . Discrete approaches have two main limitations: the optimization search space of discrete hierarchies is large and constrained, which often makes the problem intractable without using heuristics, and the learning procedure is not differentiable and thus not amenable to gradient-based optimization, as done bymost deep learning approaches. To mitigate these issues, a second, more recent family of continuous methods proposes to optimize some (soft-)scores on a continuous search space of relaxed hierarchies:

\[_{}(,) . \]

Examples are the relaxation of Dasgupta [7; 10; 41] or TSD scores . A major drawback of continuous methods is that the optimal hierarchy of soft scores might not align with their discrete counterparts.

**Contributions.** In this work, we propose to optimize _expected_ discrete scores, called Exp-Das and Exp-TSD, moving away from prior work on _relaxed_ soft scores. In particular, our contributions can be summarized as follows:

* **Theoretical contribution**: We analyze the _theoretical_ properties of both soft and expected scores. We show that the minimal value of a continuous relaxation can be different from that of the discrete Dasgupta cost while the optimal values of the expected scores are equal to their optimal discrete counterparts.
* **Model contribution**: We propose a new method called Expected Probabilistic Hierarchies (EPH) to optimize Exp-Das and Exp-TSD. EPH provides an _unbiased_ estimate of Exp-Das and Exp-TSD with biased gradients based on differentiable hierarchy sampling. By utilizing an _unbiased_ subgraph sampling procedure, EPH _scales_ to large (vector) datasets.
* **Experimental contribution**: In quantitative experiments, we show that EPH outperforms other baselines on 20/24 cases on 16 datasets, including both _graph_ and _vector_ datasets. In qualitative experiments, we show that EPH provides _meaningful_ hierarchies.

## 2 Related Work

**Discrete Methods.** We further differentiate between agglomerative (bottom-up) and divisive (top-down) discrete algorithms. Well-established agglomerative methods are the linkage algorithms that subsequently merge the two clusters with the lowest distance into a new cluster. There are several ways to define the similarity of two clusters. The average linkage (AL) method uses the average similarity, while single linkage (SL) and complete linkage (CL) use the minimum and maximum similarity between the groups, respectively . Finally, the ward linkage (WL) algorithm  operates on Euclidean distances and merges the two clusters with the lowest increase in the sum of squares. In contrast, Bayesian Hierarchical Clustering  uses statistical hypothesis tests to decide which clusters to merge. Another agglomerative approach is the Louvain algorithm , which iteratively maximizes the modularity score. A more recent parallelized agglomerative graph-based approach, ParHAC, enables scaling to massive datasets. In terms of quality, however, ParHAC performs inferior to AL w.r.t. the Dasgupta cost . Unlike agglomerative methods, divisive algorithms work in a top-down fashion. Initially, all leaves share the same cluster and are recursively divided into smaller ones using flat clustering algorithms. Famous examples are based on the \(k\)-means algorithm  or use approximations of the sparsest cut .

**Continuous Methods.** In recent years, many continuous algorithms have emerged to solve hierarchical clustering. These methods minimize continuous relaxations of the Dasgupta cost using gradient descent based optimizers. Monath et al.  optimized a probabilistic cost version. To parametrize the probabilities, they performed a softmax operation on learnable routing functions from each node on a fixed binary hierarchy. Chierchia and Perret  proposed UFit, a model operating in the ultrametric space. Furthermore, to optimize their model, they presented a soft-cardinal measure to compute a differentiable relaxed version of the Dasgupta cost. Other approaches operate on continuous representations in hyperbolic space, such as gHHC  and HypHC .

Zugner et al.  recently presented a flexible probabilistic hierarchy model (FPH). FPH directly parametrizes a probabilistic hierarchy and substitutes the discrete terms in the Dasgupta cost and Tree-Sampling Divergence with their probabilistic counterparts. This results in a differentiable objective function, which they optimize using projected gradient descent.

**Differentiable Sampling Methods.** Stochastic models with discrete random variables are difficult to train as the backpropagation algorithm requires all operations to be differentiable. To address this problem, estimators such as the Gumbel-Softmax  or Gumbel-Sinkhorn  are used to retain gradients when sampling discrete variables. These differentiable sampling methods have been used for several tasks, including DAG predictions , spanning trees or subset selection , and generating graphs . In contrast to prior work, EPH enables optimizing the expected clustering scores under a probabilistic hierarchy by utilizing differentiable sampling. Note that sampling spanning trees is not applicable in our case since we have a restricted structure where the nodes of the graph correspond to the leaves of the tree.

## 3 Probabilistic Hierarchical Clustering

We consider a graph dataset. Let \(=(V,E)\) be a graph with \(n\) vertices \(V=\{_{1},,_{n}\}\) and \(m\) edges \(E=\{_{1},,_{m}\}\). Let \(w_{i,j}\) denote the weight of the edge connecting the nodes \(_{i}\) and \(_{j}\) if \((i,j) E\), 0 otherwise, and \(w_{i}=_{j}w_{i,j}\) the weight of the node \(_{i}\). In general, we assume a directed graph, i.e., \(w_{i,j} w_{j,i}\). We define the edge distribution \(P(_{i},_{j})\) for pairs of nodes, \(P(_{i},_{j}) w_{i,j}\), s.t. \(_{_{i},_{j} V}P(_{i},_{j})=1\) and equivalently the node distribution \(P(_{i}) w_{i}\), s.t. \(_{_{i} V}P(_{i})=1\). We can extend this representation to any vector dataset \(=\{_{1},,_{n}\}\) and interpret the dataset as a graph by using the data points \(_{i}\) as nodes and pairwise similarities (e.g., cosine similarities) as edge weights.

**Discrete Hierarchical Clustering.** We define a discrete hierarchical clustering \(}\) of a graph \(\) as a rooted tree with \(n\) leaves and \(n^{}\) internal nodes. The leaves \(V=\{_{1},_{2},,_{m}\}\) represent the nodes of \(\), while the internal nodes \(Z=\{_{1},_{2},,_{n^{}}\}\) represent clusters, with \(_{n^{}}\) being the root node. Each internal node groups the data into disjoint sub-clusters, where edges reflect memberships of clusters. We can represent the hierarchy using two binary adjacency matrices \(}\{0,1\}^{n n^{}}\) and \(}\{0,1\}^{n^{} n^{}}\), i.e., \(}=(},})\). While \(}\) describes the edges from the leaves to the internal nodes, \(}\) specifies the edges between the internal nodes. Since every node in the hierarchy except the root, has exactly one outgoing edge, we have the following constraints: \(_{j}^{n}_{i,j}=1\) for \(1 i n\), \(_{j}^{n}_{i,j}=1\) for \(1 i<n^{}\), and \(_{j}^{n}_{n^{},j}=0\) for the last row. Thus, except for the last row of \(}\), both matrices are row-stochastic. We denote the ancestors of \(\) as \(()\), and the lowest common ancestor (LCA) of the two leaves \(_{i}\) and \(_{j}\) in \(}\) as \(_{i}_{j}\).

**Probabilistic Hierarchical Clustering.** Zugner et al.  recently proposed probabilistic hierarchies. The idea is to use a continuous relaxation of the binary adjacency matrices while keeping the row-stochasticity constraints. Thus, we end up with two matrices \(^{n n^{}}\) and \(^{n^{} n^{}}\). The entries represent parent probabilities, i.e., \(A_{i,j}:=p(_{j}_{i})\) describes the probability of the internal node \(_{j}\) being the parent of \(_{i}\) and \(B_{i,j}:=p(_{j}_{i})\) the probability of the internal node \(_{j}\) being the parent of \(_{i}\). Together, they define a probabilistic hierarchy \(=(,)\). Given such a probabilistic hierarchy, one can easily obtain a discrete hierarchy by interpreting the corresponding rows of \(\) and \(\) as categorical distributions. We sample an outgoing edge for each leaf and internal node. Since \(\) is restricted to be an upper triangular matrix, this tree-sampling procedure will result in a valid discrete hierarchy, denoted by \(}=(},}) P_{,}()\). Alternatively, instead of sampling a discrete hierarchy, one can take the most likely edge for each node. This can be efficiently done by selecting the entry with the highest probability in each row, resulting in the discrete matrices \(}\) and \(}\). This approach serves as a greedy approximation to extract the most likely hierarchy from the probabilistic one.

## 4 Expected Probabilistic Hierarchical Clustering

### Expected Metrics

Unlike flat clusterings, there has been a shortage of objective functions for hierarchical clusterings. Thus, many algorithms to derive hierarchies were developed without a precise objective. An objective function not only allows us to evaluate the quality of a hierarchy but also yields possibilities for optimization techniques. Recently, the two unsupervised functions Dasgupta cost **(Das)** and Tree-Sampling Divergence **(TSD)** were proposed, triggering the development of a new generation of hierarchical clustering algorithms. The Dasgupta cost is a well-established metric for graphs and vector data, while the TSD is a recent metric specifically tailored to graphs. In addition to being unsupervised, i.e., applicable in cases where the data is unlabeled, both metrics have intuitive motivations. The metrics can be written as:

\[(})=_{_{i},_{j} V}P( _{i},_{j})c(_{i}_{j}) (})=(p()\|q( )), \]where \(c()\) is the number of leaves whose ancestor is \(\), i.e., \(c()=_{_{i} V}_{[( _{i})]}\), and \(p()\) and \(q()\) are two distributions induced by the edge and node distributions, i.e., \(p()=_{_{i},_{j}}_{[= _{i}_{j}]}P(_{i},_{j})\) and \(q()=_{_{i},_{j}}_{[= _{i}_{j}]}P(_{i})P(_{j})\). Dasgupta favors similar leaves to have their lowest common ancestor low in the hierarchy . TSD quantifies the ability to reconstruct the graph from the hierarchy in terms of information loss . Hence, any hierarchy achieving a good score provides a good compression of the original graph. In practice, both metrics are good indicators of meaningful hierarchies . Recently, Zugner et al.  proposed the Flexible Probabilistic Hierarchy (FPH) method. FPH substitutes the indicator functions with their corresponding probabilities under the tree-sampling procedure (see App. A.1), obtaining cost functions for probabilistic hierarchies called Soft-Das and Soft-TSD. These two metrics correspond to the scores of the _expected hierarchies_ under the tree-sampling procedure. In contrast, we propose to optimize the _expected metrics_ in this work. Intuitively, this corresponds to moving the expectation from inside the metric functions to outside, reflecting the natural way of performing Monte-Carlo approximation via (tree-) sampling. More specifically, our objectives are:

\[_{,}_{}}(})} P_{,}()_{,}_{}}(})} P_{,}(), \]

which we denote as **Exp-Das** and **Exp-TSD**. Note that we optimize over \(\) and \(\), which parametrize a probabilistic hierarchy, while the edge weights are given by the dataset and used to compute the node and edge distribution. We show in Sec. 4.2 that the optimal values of the expected scores share the same intuitive meaning as their discrete counterparts. While the probabilities used in the FPH computation are consistent, their relaxed scores are not consistent with the expected scores under the tree-sampling procedure. In Fig. 2, we show a simple case where Soft-Das does not align with the global optimal value, whereas Exp-Das does.

Note that while the Dasgupta cost favors binary branches , EPH and the probabilistic hierarchies are not limited to these. While binary hierarchies offer fine-grained clustering, non-binary hierarchies provide more flexibility by allowing nodes to have more than two children, which often aligns better with real-world clustering tasks.

Figure 1: Overview of our proposed EPH model. During training, EPH first samples discrete hierarchies using our differentiable hierarchy sampling (Sec. 4.3) and a subgraph using our subgraph sampling procedure (Sec. 4.4). The expected scores are then computed and averaged. Finally, the probabilistic hierarchy is updated via backpropagation. A formal description is given in App. C.7.

### Theoretical Analysis of EPH and FPH

The main motivation to use the expected metrics is the property that their global _optimal value_, i.e., the _score_ obtained by the globally optimal hierarchy (the _optimizer_), is equal to their discrete counterparts, as we show in Prop. 4.1.

**Proposition 4.1**.: _Let \(\) and \(\) be transition matrices describing a probabilistic hierarchy. Then, the following equalities hold:_

\[_{,}_{} P_{, }(})}(})= _{}}(}) _{,}_{} P_{,}(})}(})=_{}}(}). \]

_(See proof in App. A.5)_

Consequently, optimizing our cost function aims to find the optimal discrete hierarchy. Furthermore, we prove in Prop. 4.2 that Soft-Das is a lower bound of Exp-Das, therefore its minimum is a lower bound of the optimal discrete Dasgupta cost.

**Proposition 4.2**.: _Let \(\) and \(\) be transition matrices describing a probabilistic hierarchy. Then, Soft-Das will be lower than or equal to the expected Dasgupta cost under the tree-sampling procedure:_

\[()_{} P _{,}(})}(}) . \]

_(See proof in App. A.4)_

In Fig. 2, we provide a specific example illustrating a case where the minimizer of Soft-Das is continuous, and FPH fails to find the optimal hierarchy, i.e., obtaining a minimal Dasgupta cost. We know an integral solution exists for EPH since Exp-Das and Exp-TSD are convex combinations of their discrete counterparts. Furthermore, Exp-Das is neither convex nor concave, as we show in App. A.6. In Tab. 1, we provide an overview of properties of the cost functions of FPH and EPH.

### Unbiased Computation of Expected Scores via Differentiable Sampling

In order to compute the expected scores, one could attempt to use a closed-form expression. To derive these for Exp-Das and Exp-TSD, however, we would need to calculate the probability \(p(=_{i}_{j},( ))\) for which no known solution exists, and the expectation of a logarithm, respectively (see Eq. 13 and Eq. 14). An alternative to the closed-form solution is to approximate the

 Property & Problem Type & Convex/Concave & Integral & Optimal & Consistent \\  Soft-Das & Min. & Neither w.r.t. \(\) and \(\) (see Fig.14 (left)) & ✗ & ✗ & ✗ \\ Exp-Das & Min. & Neither w.r.t. \(\) and \(\) (see App.A.6) & ✓ & ✓ & ✓ \\ Soft-TSD & Max. & Convex w.r.t. LCA probabilities  & ✓ & ✓ & ✗ \\ Exp-TSD & Max. & - & ✓ & ✓ & ✓ \\ 

Table 1: Properties of Soft-Das, Exp-Das, Soft-TSD, and Exp-TSD.

Figure 2: An example where FPH fails to infer a minimizing hierarchy. A hierarchy minimizing the Dasgupta cost and the inferred hierarchies by FPH and EPH on the unweighted \(K_{4}\) graph, i.e., every normalized edge weight is equal to \(\). While FPH achieves a Dasgupta cost of 4.0 after discretization, the continuous hierarchy has a Soft-Das score below 3.0. On the other hand, EPH finds a minimizing hierarchy with a cost of \(\). A weighted example is shown in Fig. 8.

expectations via the Monte Carlo method. We propose to approximate Exp-Das and Exp-TSD with \(N\)_differentiably_ sampled hierarchies \(\{}^{(1)},,}^{(N)}\}\) (see "Loss computation" in Fig. 1):

\[()_{i=1}^{N}( }^{(i)}). \]

However, differentiable sampling of discrete structures like hierarchies is often complex. To this end, our differentiable hierarchy sampling algorithm consists of three steps integrating the tree-sampling procedure and the straight-through Gumbel-Softmax estimator : **(1)** We sample the parents of the leaf nodes by interpreting the columns of \(A\) as parameters of straight-through Gumbel-Softmax estimators. **(2)** We sample the parents of the internal nodes by interpreting the columns of \(B\) as parameters of straight-through Gumbel-Softmax estimators. This procedure is _differentiable_ -- each step is differentiable -- and _expressive_ -- it can sample any hierarchy with \(n\) leaves and \(n^{}\) internal nodes. **(3)** We use the Monte Carlo method to approximate the expectation by computing the arithmetic mean of the scores of the sampled hierarchies. We reuse the _differentiable_ computation of Soft-Das and Soft-TSD, which match the discrete scores for discrete hierarchies while providing gradients w.r.t. \(A\) and \(B\) (see Fig. 1 for an overview).

**Complexity.** Since we sample \(N\) hierarchies from \(n^{}+n-1\) many categorical distributions with \((n^{})\) classes, the sampling process can be done with a complexity of \((N n n^{}+N n^{ 2})\). The dominating term is the computation of the Das and TSD scores with a complexity of \((N m n^{ 2})\) for graph datasets and \((N n^{2} n^{ 2})\) for vector datasets . This is often efficient as we typically have \(n^{} n\) and for graphs \(m n^{2}\). In Sec. 4.4, we propose a subgraph sampling approach to reduce the complexity to \((N M n^{ 2}+n^{2})\) for large vector datasets, where \(M<n^{2}\).

### Scalable Expected Dasgupta Cost Computation via Subgraph Sampling

As discussed in the complexity analysis, the limiting factor is \((n^{2} n^{ 2})\), corresponding to the evaluation of the Dasgupta cost, which becomes prohibitive for large datasets. To reduce the complexity, we propose an _unbiased_ subgraph sampling approach. First, we note that we can interpret the normalized similarities \(P(_{i},_{j})\) as a probability mass function of a categorical distribution. This interpretation allows us to rewrite the Dasgupta cost as an expectation and approximate it via a sampling procedure. More specifically,

\[(})=_{(_{i},_{j})  P(_{i},_{j})}[c(_{i} _{j})]_{k=1}^{M}c(_{i}^{(k)} _{j}^{(k)}), \]

where \(\{(_{i}^{(1)},_{j}^{(1)}),,(_{i}^{(M)}, _{j}^{(M)})\}\) are \(M\) edges sampled from the edge distribution \(P(_{i},_{j})\), which can be done in \((M+n^{2})\). We refer to this sampling approach as subgraph sampling (see Fig. 1). We can approximate the expected Dasgupta cost using the same procedure. In contrast to Exp-Das, Exp-TSD cannot be easily viewed as an expectation of edges, thus making the approximation via subgraph sampling impractical. However, since TSD is a metric originally designed for graphs, which are generally sparse, it would yield little benefits.

Note that we end up with two different sampling procedures. First, we have the _differentiable hierarchy sampling_ (see Eq. 7). This is necessary to approximate the expectations. Since we do not have a closed-form expression of Exp-Das and Exp-TSD, we sample discrete hierarchies from the probabilistic ones and average the scores. Secondly, we have the _subgraph sampling_ (see Eq. 8), which interprets the Dasgupta cost as an expectation. This is done to reduce the computational overhead for vector datasets since the number of pairwise similarities grows quadratically in the number of data points. This estimation is unbiased and introduces an additional parameter, i.e., the number of sampled edges, which allows a trade-off between computational cost and quality. By inserting the probabilistic edge sampling approach into the tree sampling, we estimate Exp-Das to scale it to large vector datasets. An overview of our model is shown in Fig. 1, and a formal description is given in App. C.7.

In contrast to other approaches, the loss function of EPH is consistent with the discrete scores, meaning that probabilistic hierarchies with a better training score encode better discrete hierarchies. Following from Prop. 4.1, we know that any discrete hierarchy sampled from the optimal probabilistic hierarchy is an optimal discrete hierarchy. While global optimality is not guaranteed, the training loss provides a reliable indicator of the discrete evaluation performance since the loss functions, Exp-Das and Exp-TSD, are computed on discrete hierarchies.

Experiments

### Experimental Setup

**Datasets.** We evaluate our method on both graph and vector datasets. _Graph datasets:_ We use the datasets Pollblogs , Brain , Citeseer , Genes , Cora-ML , OpenFlight , WikiPhysics , and DBLP . To preprocess the graph, we first collect the largest connected component. Secondly, every edge is made bidirectional and unweighted. An overview of the graphs is shown in Tab. 7 in App. B.1. _Vector datasets:_ We test our method on vector data for the Dasgupta cost. Here, we selected the seven datasets Zoo, Iris, Glass, Digits, Segmentation, Spambase, and Letter from the UCI Machine Learning repository . Furthermore, we also use Cifar-100 . Digits and Cifar-100 are image datasets, the remaining are vector data. While we only flatten the images of Digits, we preprocess Cifar-100 using the ResNet-101 BiT-M-R101x1 by Kolesnikov et al. , which was pretrained on ImageNet-21k . More specifically, we use the 2048 dimensional activations of the final layer for each image in Cifar-100 as feature vectors. Furthermore, we normalize all features to have a mean of zero and a standard deviation of one. We compute cosine similarities between all pairs of data points using their normalized features. This results in dense similarity matrices. Finally, we remove the self-loops. Note that in contrast to the graph datasets, the vector data similarities are weighted. An overview is shown in Tab. 8 in App. B.1. Since we are in an unsupervised setting, we have no train/test split, i.e., we train and evaluate on the whole graph.

**Baselines.** We compare our model against both discrete and continuous approaches. For discrete approaches, we use the single, average, complete , and ward linkage  algorithms, respectively referred to as **SL**, **AL**, **CL**, and **WL**. We do not report the results of SL and CL on the graph datasets that do not have edge weights since these methods are not applicable to unweighted graphs. In addition to the linkage algorithms, we also compare to the recursive sparsest cut (**RSC**)  and the Louvain method (**Louv.**) . For continuous approaches, we use the gradient-based optimization approaches Ultrametric Fitting (**UF**) , Hyperbolical Hierarchical Clustering (**HypHC**) , gradient-based Hyperbolic Hierarchical Clustering (**gHHC**) , and Flexible Probabilistic Hierarchy (**FPH**) . While the linkage algorithms derive a hierarchy based on heuristics or local objectives, UF, HypHC, gHHC, and FPH aim to optimize a relaxed Dasgupta cost or TSD score. We set a time limit of 120 hours for all the methods and provided a budget of 512GB of memory for each experiment.

**Practical Considerations.** We repeat the randomized methods with five random seeds and report the best score of the discrete hierarchies. We use the same experimental setup as Zugner et al. , i.e., we use \(n^{}=512\) internal nodes, compress full hierarchies using the scheme presented by Charpentier and Bonald , and use DeepWalk embeddings  on the graphs for methods that require features. We train EPH using PAdamax (projected Adamax ), reduce the learning rate for \(\) by a factor of 0.1 every 1000 epochs, and reset the probabilistic hierarchy to the so-far best discrete hierarchy. To approximate the expectation of EPH, we use 20 samples, except for Spambase, Letter, and Cifar-100, where we use 10, 1, and 1, respectively, to reduce the runtime. On the datasets Digits, Segmentation, Spambase, Letter, and Cifar-100, we train EPH and FPH by sampling \(n\) edges. For the remaining datasets and during all validation steps, we use the whole graph. Both EPH and FPH are initialized using the average linkage algorithm. We train FPH with its original setting and our proposed scheduler and report the minimum of both for each dataset. For the remaining methods, we use the recommended hyperparameters. An overview of the hyperparameters is shown in Tab. 10, and an ablation study in App. C.4. Finally, all methods are evaluated on discrete hierarchies. For EPH, we take the most likely edge for each node as explained in Sec. 3.

### Results

**Graph Dataset Results.** We report the discrete Dasgupta costs and TSD scores for the graph datasets in Tab. 2. EPH achieves best scores across 13/16 settings and second-best otherwise. In particular, EPH, which optimizes Exp-Das, consistently achieves a better Dasgupta cost than FPH, which optimizes Soft-Das. This observation aligns with the theoretical advantages of Exp-Das compared to Soft-Das (see Sec. 4.2). EPH and FPH, which both use the tree-sampling probabilistic framework, consistently achieve the best results. This underscores the effectiveness of tree sampling for hierarchical clustering.

[MISSING_PAGE_FAIL:8]

We show in Fig. 3 (right) the effect of the number of sampled edges on the EPH performances on vector datasets. Using more edges consistently leads to better results. In particular, going from \(n\) to \(n\) shows a significant performance improvement while going from \(n\) to \(n^{2}\) yields only minor improvements. Hence, controlling the amount of sampled edges allows us to scale our method to large datasets while maintaining high performance. On the small datasets Zoo, Iris, and Glass, we use the whole graph, while for the other datasets, we sample \(n\) edges as a trade-off between runtime and quality of the hierarchical clustering. We provide further experiments in Sec. C.4, including a minimized version of EPH outperforming FPH in terms of runtime and results.

**External Evaluation.** As the Dasgupta cost and Tree-Sampling Divergence are internal metrics and do not necessarily measure how closely a derived hierarchy aligns with an external ground truth, we complement our unsupervised quantitative evaluation with an external evaluation. Given that ground-truth hierarchies are typically unavailable in real-world data, we evaluate EPH on synthetic graph datasets with known ground-truth hierarchies. Additionally, we analyze to what extent the inferred hierarchies preserve the flat class labels for the vector datasets in Sec. C.3 in the appendix.

We augment the graph datasets with two hierarchical stochastic block models (**HSBMs**), which enables us to compare the inferred hierarchy with the ground truth. As the HSBM graphs are generated in a stochastic process, the ground-truth hierarchy is not necessarily optimal in terms of the Dasgupta cost or Tree-Sampling Divergence. Furthermore, we compute the normalized mutual information (**NMI**) across the different levels of the hierarchies, and the cophenetic correlations for the shortest path distance (**SPD**) and the Euclidean distance of DeepWalk embeddings (see Tab. 4 and Tab. 5). We observe that EPH recovers the first three levels of the ground-truth hierarchy almost perfectly. Moreover, the inferred hierarchies by EPH obtain even better scores than the ground-truth hierarchies on the HSBMs, underlining the remarkable capacity of EPH to optimize the Dasgupta and TSD scores. Additionally, the TSD objective proves to be a more suitable metric for recovering the ground-truth levels of the HSBM in terms of NMI. The cophenetic correlations observed between Exp-Das and Exp-TSD are notably high

  &  &  \\  Method & HSBM Small & HSBM Large & HSBM Small & HSBM Large \\  GT & 26.29 & 130.16 & 43.14 & 51.50 \\ EPH & 26.19 & 121.08 & 43.56 & 51.53 \\  Level & Normalized Mutual Information & Normalized Mutual Information \\  Level 1 & 1.0 & 1.0 & 1.0 & 1.0 \\ Level 2 & 1.0 & 1.0 & 1.0 & 1.0 \\ Level 3 & 0.77 & 0.81 & 0.87 & 0.99 \\  

Table 4: Results of EPH for the HSBMs with \(n^{}=\#\)Cluster.

Figure 4: Ground truth clusters and dendrograms compared to the inferred ones for the HSBMs.

  &  \\   &  &  \\  Method & HSBM Small & HSBM Large & HSBM Small & HSBM Large \\  GT & **0.77453** & **0.67839** & 0.94001 & 0.90920 \\ Exp-Das & 0.77174 & 0.67692 & 0.93973 & 0.89788 \\ Exp-TSD & 0.77440 & 0.67838 & **0.94027** & **0.90922** \\  

Table 5: Cophenetic correlations (\(\)) of EPH for different distances on the HSBMs with \(n^{}=\#\)Cluster.

and closely align with the ground truth, with Exp-TSD even surpassing the ground truth on DeepWalk distances. We attribute this to the fact that a minimal Dasgupta cost favors binary branches, which does not reflect the hierarchies of the HSBMs. Our visual analysis of the graphs and hierarchies (see Fig. 4) confirms this observation. Additional results for FPH are provided in App. C.1.

**Qualitative Evaluation.** We visualize the largest cluster inferred on Cifar-100 using EPH. More specifically, we select the internal nodes with the most directly connected leaves. Additionally, we sort the images by their probability, i.e., their entry in the matrix \(\). We show the 16 images with the highest probability and the 16 with the lowest probability for the largest cluster in Fig. 5. We observe that the images with high probabilities are all similar and related to insects. This shows that EPH is able to group similar images together. In contrast, the last images with the lowest probability do not fit into the group. This demonstrates the capacity of EPH to measure the uncertainty in the cluster assignments. We provide additional results with the same behavior for other clusters in App. C.2 (see Fig. 9, Fig. 10, and Fig. 11). Furthermore, we visualize the graph and inferred hierarchies of EPH for OpenFlight in Fig. 12 in the appendix. Both minimizing Exp-Das and Exp-TSD generate reasonable clusters and successfully distinguish different world regions. Finally, we visualize the ground truth classes and clusters of selected vector datasets in Fig. 13.

## 6 Discussion

**Limitations.** While the Gumbel-Softmax estimators of the expectations are unbiased in the forward pass, the estimation of the gradients is not  and thus impacts the EPH optimization. Furthermore, even though the global optimal values of the expected and discrete scores match, EPH does not guarantee convergence into a global optimum when optimizing using gradient descent methods.

**Conclusion.** In this work, we propose EPH, a novel end-to-end learnable approach to infer hierarchies in data. EPH operates on probabilistic hierarchies and directly optimizes the expected Dasgupta cost and Tree-Sampling Divergence using _differentiable hierarchy sampling_. We show that the global optima of the expected scores are equal to their discrete counterparts. Furthermore, we present an _unbiased subgraph sampling_ approach to scale EPH to large datasets. We demonstrate the capacity of our model by evaluating it on several synthetic and real-world datasets. EPH outperforms traditional and recent state-of-the-art baselines.