# Estimating Generalization Performance Along the Trajectory of Proximal SGD in Robust Regression

Kai Tan

Department of Statistics

Rutgers University

Piscataway, NJ 08854

kai.tan@rutgers.edu

&Pierre C. Bellec

Department of Statistics

Rutgers University

Piscataway, NJ 08854

pierre.bellec@rutgers.edu

###### Abstract

This paper studies the generalization performance of iterates obtained by Gradient Descent (GD), Stochastic Gradient Descent (SGD) and their proximal variants in high-dimensional robust regression problems. The number of features is comparable to the sample size and errors may be heavy-tailed. We introduce estimators that precisely track the generalization error of the iterates along the trajectory of the iterative algorithm. These estimators are provably consistent under suitable conditions. The results are illustrated through several examples, including Huber regression, pseudo-Huber regression, and their penalized variants with non-smooth regularizer. We provide explicit generalization error estimates for iterates generated from GD and SGD, or from proximal SGD in the presence of a non-smooth regularizer. The proposed risk estimates serve as effective proxies for the actual generalization error, allowing us to determine the optimal stopping iteration that minimizes the generalization error. Extensive simulations confirm the effectiveness of the proposed generalization error estimates.

## 1 Introduction

Consider the linear model:

\[=^{*}+,\] (1)

where \(^{n}\) is the response vector, \(^{n p}\) is the design matrix, \(^{*}^{p}\) is the unknown regression vector, and \(^{n}\) is the noise vector that we assume independent of \(\). The entries of \(\) may be heavy-tailed, for instance our working assumptions allow for infinite second moment.

For the estimation of \(^{*}\), we consider the following regularized optimization problem

\[}*{arg\,min}_{^{p}}_{i=1}^{n}(y_{i}-_{i}^{})+g(),\] (2)

where \(:\) is a data-fitting loss and \(g:^{p}\) is a regularization function. In the present robust regression setting, typical examples of \(\) include the Huber  loss \((r;)=^{2}_{0}^{ r/}(1,x )\,x\), the Pseudo-Huber loss \((r;)=^{2}(}-1)\) or other Lipschitz loss functions to combat the possible heavy-tails of the additive noise. Typical examples of penalty functions include the L1/Lasso  penalty \(g()=\|\|_{1}\), group-Lasso penalty  for grouped variables, or their non-convex variants including for instance SCAD  or MCP .

In order to solve the optimization problem (2), practitioners resort to iterative algorithms, for instance gradient descent, accelerated gradient descent, stochastic gradient descent, and the corresponding proximal methods  in the presence of a non-smooth regularizer. Let the algorithm starts withsome initializer \(}^{1}^{p}\) (typically \(}^{1}=\)) followed by consecutive iterates \(}^{2},}^{3},\), where \(}^{t}\) is typically obtained, for gradient descent and its variants as will be detailed below, from \(}^{t-1}\) and by applying an additive correction involving the gradient of the objective function. Our goal of this paper is to quantify the predictive performance of each iterate \(}^{t}\).

We assume throughout that the covariance \([_{i}_{i}^{}]=\) of the feature vectors is finite. We measure the predictive performance of \(}^{t}\) using the out-of-sample error

\[_{new}^{}}^{t}-_{new}^ {}^{*}^{2}(_{i},y_{i})_{i[n]}=\|^{1/2}(}^{t}-^{*})\|^{2}\]

where \(_{new}\) is a new feature vector, independent of the data \((_{i},y_{i})_{i[n]}\) and has the same distribution as \(_{i}\). The above squared metric is used because the noise \(_{i}\) (and thus \(y_{i}\)) is allowed to have infinite variance, and in this case the squared prediction error \([(_{new}^{}}^{t}-y_{new})^{2}(_{ i},y_{i})_{i[n]}]=+\) irrespective of the value of \(}^{t}\).

The paper proposes to estimate the out-of-sample error \(\|^{1/2}(}^{t}-^{*})\|^{2}\) of the \(t\)-th iterate using the right-hand side of the approximation

\[\|^{1/2}(}^{t}-^{*})\|^{2}+\| \|^{2}/n(-}^{t})+_{s=1}^{t-1}w_{ t,s}_{s}(-}^{s})^{2}/n,\] (3)

where \(:^{n}\) is the derivative of \(\) acting component-wise on each coordinate in \(^{n}\) and \(_{s}\) is a diagonal matrix of the form \(_{s}=_{i I_{s}}_{i}_{i}^{}\) where \(I_{s}[n]\) is the batch for the \(s\)-th stochastic gradient update and \(_{i}^{n}\) is the \(i\)-th canonical basis vector. Here the \(w_{t,s}\) are quantities, introduced in Section 3.3 below, that can be computed from data and do not require the knowledge of \(\). The approximation (3) is made rigorous in Theorem 3.6, where the right-hand side is proved to be consistent (i.e., the difference between the two sides of the inequality converges to 0 in probability) for a first set of weights \((w_{s,t})_{s<t}\), and in Theorem 3.7 where a second set of weights are proposed.

Because the right-hand side of (3) is observable from the data and the iterates \((}^{s})_{s t}\) are computed from the iterative algorithm, the approximation (3) lets us compare the out-of-sample error of iterates \(}^{t}\) at different time \(t\) up to the additive term \(\|\|^{2}/n\) (which does not depend on \(t\) nor on the choice of the iterative scheme or the choice of loss and penalty). It also lets us compare different tuning parameters, for instance learning rate, multiplicative parameter of the penalty function, batch size in Stochastic Gradient Descent (SGD). The right-hand side of (3) can serve as the criteria to choose the iteration number or tuning parameters that achieves the smallest out-of-sample error.

### Related literature

Estimation of prediction risk of regression estimates has received significant attention in the last few decades. One natural avenue to estimate the generalization performance is to use \(V\)-fold cross-validation or leave-one-out schemes. In the proportional regime of interest here, where dimension \(p\) and sample size \(n\) are of the same order, \(V\)-fold cross-validation with finite \(V\), e.g., \(V=5,10\) is known to fail at consistently estimate the risk of the estimator trained on the full dataset [23, Figure 1]; this is simply explained because training with the biased sample size \(n(V-1)/V\) may behave differently than training with the full dataset. Leave-one-out schemes, or drastically increasing \(V\), requires numerous refitting and is thus computationally expensive.

This motivates computationally efficient estimates of the risk of an estimator trained on the full dataset without sample-splitting, including Approximate Leave-One-out (ALO) schemes  that do not rely on sample-splitting and refitting; see  and the references therein for recent developments. For ridge regression and other estimators constructed from the square loss, the Generalized Cross-Validation (GCV)  has been shown be to be effective, and it avoids data-splitting and refitting; it only needs to fit the full data once and then adjust the training error by a multiplicative factor larger than 1. Beyond ridge regression, the extension of GCV using degrees-of-freedom has been studied for Lasso regression , and alternatives were developed for robust M-estimators . While ALO or GCV and its extensions are good estimators of the predictive risk of a solution \(}\) to the optimization problem (2), they are not readily applicable to quantify the prediction risk of iterates \(}^{t}\) obtained by widely-used iterative algorithms such as gradient descent (GD), stochastic gradient descent (SGD) or their proximal variants: ALO and GCV focus on estimating the final \((t+)\) iterate of the algorithm, when a solution \(}\) in (2) is found. Our goal in the present paper is to develop risk estimation methodologies along the trajectory of the algorithm.

Luo et al.  developed methods to estimate the cross-validation error of iterates that solves an empirical risk minimization problem. Their approach requires the Hessian of the objective function to be well-conditioned (i.e., the smallest and largest eigenvalues are bounded) along all iterates. This condition is not satisfied for the regression problems we consider in this paper, such as high-dimensional robust regression with a Lasso penalty. In the context of least squares problems with both \(p\) and \(n\) being large,  studied the fundamental limits on the performance of first order methods, showing that these are dominated by a specific Approximate Message Passing algorithm. Paquette et al.  demonstrated that the dynamics of Stochastic Gradient Descent (SGD) become deterministic in the large sample and dimensional limit, providing explicit expressions for these dynamics when the design matrix is isotropic. Our work differs from  in two key ways: First, we address a more general regression problem incorporating a non-smooth regularizer, thereby considering both SGD and proximal SGD; second, we offer explicit risk estimates for each iteration, rather than focusing solely on the theoretical dynamics of the iterates. Celentano et al.  and  characterize the dynamical mean-field dynamics of iterative schemes, and identify that the limiting process involves a "memory" kernel, describing how the dynamics of early iterates affect later ones.

Most recently, and most closely related to the present paper,  proposed risk estimate for iterates \(}^{t}\) obtained by running gradient descent and proximal gradient descent methods for solving penalized least squares optimizations. However,  focuses exclusively on the square loss for \(\) in (3), which is not readily applicable to robust regression with heavy tailed noise for which the Huber or other robust losses must be used. Bellec and Tan  is further restricted to gradient updates using the full dataset, which does not cover stochastic gradient descent. While several proof techniques used in the present paper are inspired by , we will explain in Remark 3.8 that directly generalizing  to SGD in robust regression leads to a poor risk estimate for small batch sizes. The proposal of the present paper leverages out of batch samples to overcome this issue.

For gradient descent for the square loss and without penalty, Patil et al.  demonstrates both the failure of GCV along the trajectory and the success of computationally expensive leave-one out schemes, and develops a proposal to reduce the computational cost. Finally, let us mention the works [10; 16] that characterize the dynamics of the iterates in phase retrieval and matrix sensing problems, assuming that a fresh batch of observations (independent of all previous updates) is used at each iteration. This is different from the usual SGD setting studied in the present paper where the observations used during a stochastic gradient update may be reused in future stochastic gradient updates, creating intricate probabilistic dependence between gradient updates at different iterations.

Robust regression is highly valuable in real data analysis due to its ability to handle heavy-tailed noise effectively, and we will see below that the use of stochastic gradient updates and data-fitting loss functions different from the square loss require estimates that have a drastically different structure that in the square loss case. The present paper develops generalization error estimates in situations where no consistent estimate have been proposed: (1) we develop generalization error estimates along the trajectory of iterative algorithms aimed at solving (2) for robust loss functions including the pseudo-Huber loss; (2) the estimates are applicable not only to gradient updates involving the full dataset (gradient descent and its variants), but also to SGD and proximal SGD where a random batch is used for each update.

## 2 Problem setup

The paper studies iterative algorithms aimed at solving the optimization problem (2). We consider the algorithm that generates iterates \(}^{t}\) for \(t=1,2,...,T\) according to the following iteration:

\[}^{t+1}=_{t}}^{t}+}{|I_{t}|}^{}_{t}(-}^{t}) ,\] (4)

where \(_{t}^{n n}\) is the diagonal matrix \(_{t}=_{i I_{t}}_{i}_{i}^{}\) for \(I_{t}[n]\) the \(t\)-th batch (independent of \((,)\)), where \(_{t}:^{p}^{p}\) and \(:^{n}^{n}\) are two functions and \(_{t}\) is the step size. Typically, \(:^{n}^{n}\) is the componentwise application of \(^{}\) (where \(\) is the data-fitting loss in (2)), and the matrix \(_{t}^{n n}\) is diagonal with elements in \(\{0,1\}\) encoding the observations \(i[n]\)used in the \(t\)-th stochastic gradient update. The presence of \(_{t}\) and possibly nonlinear function \(\) is such that the above iteration scheme is not covered by previous related works including [5; 21], which only tackle \(_{t}=_{n}\) (full batch gradient updates) and \(:^{n}^{n}\) the identity map (\(\) in (2) restricted to be the square loss). The iterative scheme (4), on the other hand, covers SGD with robust loss functions.

In the next section, we first provide a few examples of algorithms encompassed in the general iteration (4). This includes Gradient Descent (GD), Stochastic Gradient Descent (SGD), and their corresponding proximal methods , Proximal GD and Proximal SGD. GD and SGD are widely used in practice, while the proximal methods are particularly useful for solving the optimization problem (2) with non-smooth regularizers.

### Robust regression without penalty

If there are no penalties in (2), i.e., \(g()=0\), then the minimization problem becomes

\[}*{arg\,min}_{^{p}}_{i=1}^{n}(y_{i}-_{i}^{}).\]

To solve this problem, provided \(\) is differentiable, one may use gradient descent (SGD) and stochastic gradient descent (SGD).

**Example 2.1** (Gd).: The GD method consists of the following iteration:

\[}^{t+1}=}^{t}+}{n}^{} (-}^{t}),\] (5)

where \(\) is the derivative of \(\) acting component-wise on its argument, and \(_{t}\) is the step size (also known as learning rate). For the least squares loss \((x)=x^{2}/2\), we have \(()=\).

**Example 2.2** (SGD).: Suppose at \(t\)-th iteration, we use the batch \(I_{t}[n]\) to compute the gradient,

\[}^{t+1}=}^{t}+}{|I_{t}|}_{i  I_{t}}_{i}(y_{i}-_{i}^{}}^{t})= {}^{t}+}{|I_{t}|}^{}_{t}(- }^{t}),\] (6)

where \(_{t}=_{i I_{t}}_{i}_{i}^{}\) and \(_{i}\) is the \(i\)-th canonical vector in \(^{n}\). If \(I_{t}=[n]\) for each \(t\), then \(|I_{t}|=n\) and \(_{t}=_{n}\), hence this SGD method reduces to the GD method in (5).

### Robust regression with Lasso penalty

Regularized regression is useful for high-dimensional regression problems where \(p\) is larger than \(n\). We consider the Lasso penalty \(g()=\|\|_{1}\) to fight for the curse of dimensionality and obtain sparse estimates (our working assumptions, on the other hand, do not assume that the ground truth \(^{*}\) is sparse). While GD and SGD are not directly applicable to solve the optimization problem (2) with Lasso penalty due to \(\|\|_{1}\) lacking differentiability at 0, Proximal Gradient Descent (Proximal GD)  and Stochastic Proximal Gradient Descent (Proximal SGD) can be used to solve this optimization with Lasso penalty.

**Example 2.3** (Proximal GD).: For \(g()=\|\|_{1}\) in (2), the Proximal GD gives the following iterations:

\[}^{t+1}=*{soft}_{_{t}} {}^{t}+}{n}^{}(-}^{t}),\]

where \(*{soft}_{}()\) applies the soft-thresholding \(u*{sign}(u)(|u|-)_{+}\) component-wise.

**Example 2.4** (Proximal SGD).: Similar to the Proximal GD, the Proximal SGD consists of the following iterations:

\[}^{t+1}=*{soft}_{_{t}}}^{t}+}{|I_{t}|}^{}_{t}(- }^{t}).\]

Let \(^{}:^{n}^{n}\) be the function applies the derivative of \(:\) to each of its component, i.e., \(^{}()=(^{}(u_{1}),...,^{}(u_{n}))^{}\). Then the above examples can be summarized in the following table with different definition of \(\), \(_{t}\), and \(_{t}\).

To define the proposed estimators of the generalization error, we further define the following Jacobian matrices:

\[_{t}=()}{}_{=-}^{t}}^{n n},}_ {t}=_{t}()}{}_{= {}^{t}+}{|I_{t}|}^{}_{t}(- }^{t})}^{p p}.\]

Then, we have \(}_{t}=_{p}\) for GD and SGD, and \(}_{t}=_{j_{t}}_{j}_{j}^{}\) for Proximal GD and Proximal SGD based on soft-thresholding, where \(_{t}=\{j[p]:_{j}^{}}^{t+1} 0\}\).

## 3 Main results

**Assumption 3.1**.: The design matrix \(\) has i.i.d. rows from \(_{p}(,)\) for some positive definite matrix \(\) satisfying \(0<_{}() 1_{}()\) and \(\|\|_{}\|^{-1}\|_{}\). We assume \([_{i}^{}^{*}]^{2}\), that is, the signal of the model (1) is bounded from above.

**Assumption 3.2**.: The noise \(\) is independent of \(\) and has i.i.d. entries from a fixed distribution independent of \(n,p\), with \([|_{i}|]\), that is, bounded first moment.

**Assumption 3.3**.: The data fitting loss \(:\) is convex, continuously differentiable and its derivative \(\) is 1-Lipschitz and \(|(x)|\) for all \(x\). The function \(_{t}\) is 1-Lipschitz and satisfies \(_{t}()=\). The matrices \(_{t}=_{i I_{t}}_{i}_{i}^{}\), and \(|I_{t}| c_{0}n\) for some positive constant \(c_{0}(0,1]\). Let \(_{}=_{t[T]}_{t}\).

Huber loss and Psuedo-Huber loss all satisfy Assumption 3.3.

**Assumption 3.4**.: The data fitting loss \(\) is twice continuously differentiable with positive second derivative.

**Assumption 3.5**.: The sample size \(n\) and feature dimension \(p\) satisfy \(p/n\) for a constant \((0,)\).

### Intuition regarding the estimates of the generalization error

This subsection provides the intuition behind the definition of the estimates define below. For the sake of clarify, and in this subsection only, assume that

\[=_{p},=,_{t}/|I_{t}|=1 /n.\] (7)

With the above working assumptions, the validity of the estimates defined below relies on the probabilistic approximation

\[\|}^{t}-^{*}\|^{2}_{i=1}^{n} -_{i}^{}(}^{t}-^{*})+_{j=1}^{p}_{j}^ {}}^{t}}{ x_{ij}}^{2},\]

which was developed in  for risk estimation purposes, but outside the context of iterative algorithms. Above, \(_{j}^{p}\) is the \(j\)-th canonical basis vector. In the present noiseless case with \(=\), the first term inside the squared norm in the right-hand side is equal to the residual \(y_{i}-_{i}^{}}^{t}\), so that the above display resembles (3). Taking this probabilistic approximation for granted, to study the second term in the right-hand side, we must understand the derivatives of \(}^{t}\) with respect to the entries \((x_{ij})_{i[n],j[p]}\) of \(\). In (4), each iterate is a relatively simple function of the previous ones, with the simplifications (7) this is \(}^{t+1}=_{t}(}^{t}+^{}_ {t}(-}^{t})/n)\). For \(t=1\), given that \(}^{1}\) is a constant initialization, \(}}^{2}=}_{1} _{j}_{i}^{}_{1}(-}^{t} )/n-}_{1}^{}_{1}_{1}_{i}( {}^{1}-^{*})_{j}/n\). We find in the proof, that when summing these quantities over \(j[p]\), the second term involving

    & GD & SGD & Proximal GD & Proximal SGD \\  \(()\) & \(^{}()\) & \(^{}()\) & \(^{}()\) & \(^{}()\) & \(^{}()\) \\ \(_{t}()\) & \(\) & \(\) & \(_{_{t}}()\) & \(_{_{t}}()\) \\ \(_{t}\) & \(_{n}\) & \(_{t}\) & \(_{n}\) & \(_{t}\) \\   

Table 1: Specification of \(,_{t},_{t}\) for each algorithm \((}^{1}-^{*})_{j}\) is negligible, and the same negligibility holds at later iterations with terms involving \((}^{t}-^{*})_{j}\) (or any \((}^{s}-^{*})_{j}\), \(s t\)). By performing a similar simple calculation at the next iteration, and ignoring these terms, we find with \(f_{i}^{1}=_{i}^{}_{1}(-}^{ 1})\) and \(f_{i}^{2}=_{i}^{}_{2}(-}^{2})\) by the chain rule

\[_{j=1}^{p}_{j}^{}}^{2}}{ x_ {ij}}}_{1}}{n} }_{w_{2,1}}f_{i}^{1},_{j=1}^{p}_{j}^{}}^{3}}{ x_{ij}} }_{2}}{n}}_{w_{3,2}}f_{i}^{2}+}_{2}(_{p}-^{}_{2} {D}_{2}/n)}_{1}/n}_{w_{3,1}}f_{i}^{1}.\]

This reveals the weights \((w_{s,t})_{s<t}\) in (3) at iteration \(t=2\) and \(t=3\). We could continue this further by successive applications of the chain rule, although for later iterations this unrolling of the derivatives, capturing the interplay between the Jacobians \(_{t}\), \(}_{t}\) and the stochastic gradient matrix \(_{t}\), becomes increasingly complex. This recursive unrolling of the derivatives can be performed numerically at the same time as the computation of the iterates. On the other hand, for the mathematical proof, for the formal definition of the weights in (3) and for the proposed estimates of the generalization error, the matrix notation defined in the next subsection exactly captures this unrolling of the derivatives.

### Formal matrix notation to capture recursive derivatives

We now set up the matrix notation that captures this recursive unrolling of the derivatives by the chain rule. Throughout, \(T\) is the final number of iterations. Define three block diagonal matrices \(^{nT nT}\), \(}^{pT pT}\), and \(^{nT nT}\) by \(=_{t=1}^{T}(_{t}_{t}^{})_{ t}\), \(}=_{t=1}^{T}(_{t}_{t}^{}) }_{t}\), and \(=_{t=1}^{T}(_{t}_{t}^{})_{ t}\). Now we are ready to introduce the following matrices of size \(T T\):

\[ =_{j=1}^{p}(_{T}_{j}^{})(_{T} ^{1/2})(_{T}^{1/2})(_{T}_{j}),\] (8) \[} =_{i=1}^{n}(_{T}_{i}^{})( _{T})(_{T}^{})(_{T }_{i}),\] (9) \[} =_{t=1}^{T}(_{t})_{t}_{t}^{ }-_{i=1}^{n}(_{T}_{i}^{})(_{T} )(_{T}^{})(_{ T}_{i}),\] (10)

where \(=^{-1}(_{p})}^{pT pT}\), \(=_{t=2}^{T}(_{t}_{t-1}^{})_{p} \), \(=_{t=1}^{T}}{|_{t}|}_{t}_{t}^{ }\),

\[=_{p}&&&\\ -_{1}&_{p}&&\\ &&&\\ &&-_{T-1}&_{p}_{t}= }_{t}_{p}-}{|_{t}|}^{ }_{t}_{t}.\]

Although notationally involved, the purpose of these matrices is just to formalize the recursive computation of the derivatives by the chain rule mentioned in Section 3.1.

### Main results: estimating the generalization error consistently

For each iterate \(}^{t}\), define the target \(r_{t}\) (generalization error) and its estimate \(_{t}\) by

\[r_{t}}}{{=}}\|^{1/2}(}^{t}-^{*})\|^{2}+\|^{2}}{n},_{t}= (-}^{t})+_{s=1}^{t-1}w_{t,s} _{s}(-}^{s})^{2},\] (11)

where \(w_{t,s}:=_{t}^{}_{s}\) and \(^{T T}\) is the matrix defined in (8). The following shows that \(|_{t}-r_{t}|^{P}0\) (convergence to 0 in probability) under suitable assumptions.

**Theorem 3.6** (Proved in Appendix C.1).: _Let Assumptions 3.1, 3.3 and 3.5 be fulfilled. Then \(>0\),_

\[|_{t}-r_{t}|>1,,c_{0},,)}{}}}+1,\|}{n}} .\] (12)

_If additionally Assumption 3.2 holds then \([\{1,\|}{n}\}] 0\), so that, as \(n,p+\) while \((T,,_{},c_{0},,,)\) are held fixed, the right-hand side converges to 0 and \(_{t}-r_{t}\) converges to 0 in probability._This establishes that \(_{t}\) is consistent at estimating \(r_{t}\). The statement \([\{1,\|\|/n\}] 0\) is equivalent to \(\|\|^{2}/n^{2}^{P}0\) (convergence in probability), and is proved in  under the assumption that \(|_{i}|<+\) with \(_{i}\) i.i.d. from a fixed distribution; this allows \([_{i}]=+\) as long as the first moment is finite. The expression of \(\) involves \(\), which is typically unknown in practice. Our next result provides a consistent estimate of \(\) using quantities that do not require the knowledge of \(\).

We propose to estimate \(\) by \(}}}{{=}} }^{-1}}\) where \(}\) and \(}\) are the \(T T\) matrices defined in (9)-(10). We define another estimate \(_{t}\) by replacing \(\) in (11) with \(}=}^{-1}}\):

\[_{t}=\!\!\|(-}^{t})+ _{s=1}^{t-1}_{t,s}_{s}(-}^ {s})\|^{2},\]

where \(_{t,s}=_{t}^{}}_{s}\).

**Theorem 3.7** (Proved in Appendix C.3).: _Under Assumptions 3.1 and 3.3 to 3.5, for any \(>0\),_

\[|_{t}-r_{t}|> 2e^{-n/18}+ \!\{1,,c_{0},,)}{} \}\![}+[(1,\|}{n})]]\!.\]

_If additionally Assumption 3.2 holds then \([\{1,\|}{n}\}] 0\), so that, as \(n,p+\) while \((T,,_{},c_{0},,,)\) are held fixed, the right-hand side converges to 0 and \(_{t}-r_{t}\) converges to 0 in probability._

This establishes the consistency of \(_{t}\). The simulations presented next confirm that the two estimates \(_{t}\) and \(_{t}\) both are accurate estimates of \(r_{t}\). The estimate \(_{t}\) has the advantage of not relying on the knowledge of \(\) and are recommended in practice.

_Remark 3.8_.: We highlight that directly generalizing the approach in  would lead to the approximation \(}}\), where \(}\) and \(}\) are given in (23) and (26), respectively. From \(}}\), obtaining an estimate of \(\) requires inverting \(}\). However, this inversion fails for SGD for small (but still very realistic) batch sizes of order \(0.1n\) in simulations (see Figure 4). The matrix \(}\) is lower triangular, and the reason for the lack of invertibility of \(}\) can be seen in the diagonal terms equal to \([_{t}_{t}]\) in (26), where \(_{t}\{0,1\}^{n n}\) is the diagonal matrix with 1 in position \((i,i)\) if and only if the \(i\)-th observation is used in the \(t\)-th batch. This diagonal element of \(}\) can easily be small (or even 0) for small batches, if the batch only contains observations such that \((_{t})_{ii}\) is 0 or small. Let \(_{t}^{}\) denote the estimate of the same form as \(_{t}\) but using the weight matrix \(}^{-1}}\) instead. Simulation results in Figure 4 confirm that \(_{t}^{}\) is suboptimal compared to our proposed \(_{t}\). For SGD and proximal SGD, we solved this issue regarding the invertibility of \(}\) by using out-of-batch samples in the construction of \(}\) and \(}\), in order to avoid \(_{t}\) in the diagonal elements of \(}\) in equation (31). This is the key to making these estimators work for SGD and proximal SGD, and this use of out-of-batch samples is new compared to  (which only tackles the square loss with full-batch gradients).

_Remark 3.9_.: The constant \(C(T,,_{},c_{0},,)\) in the above results is not explicit. Inspection of the proof reveals that the dependence of this constant in \(T\) is currently \(T^{T}\), allowing \(T\) of order \((n)/ n\) before the bound becomes vacuous. Improving this dependence in \(T\) appears challenging and possibly out of reach of current tools, even for the well-studied Approximate Message Passing (AMP) algorithms. The papers  feature for instance the same \((n)/ n\) dependence for approximating the risk of AMP. The preprint  offers the latest advances on the dependence on \(T\) in the bounds satisfied by AMP. It allows \(T(n)\) while still controlling certain AMP related quantities, although for the risk [15, equations (16)-(17)] the condition required on \(T\) is still logarithmic in \(n\). This suggests that advances on this front are possible, at least for isotropic design and specific loss and regularizer such as those studied in : Lasso or Robust M-estimation with no regularizer. Since these latest advances in  are obtained for specific estimates (Lasso or Robust M-estimation with no regularizer), it may be possible to follow a similar strategy and improve our bounds for specific examples of iterative algorithms closer to AMP, or algorithms featuring only separable losses and penalty. We leave such improvements for specific examples for future work, as the goal of the current paper is to cover a general framework allowing iterations of the form (4) with little restriction on the nonlinear functions except being Lipschitz.

Simulation

In this section, we present numerical experiments to assess the performance of the proposed risk estimates. All necessary code for reproducing these experiments is provided in the supplementary material and is publicly available in the GitHub repository https://github.com/kaitan365/SGD-generalization-errors. Our goal is to compare the performance of the proposed risk estimates with the true risk \(r_{t}\) for different regression methods and iterative algorithms.

We generate the dataset \((,)\) from the linear model (1), that is, \(=^{*}+\). Here, the rows of \(^{n p}\) are sampled from a centered multivariate normal distribution with covariance matrix \(=_{p}\). The noise vector \(\) consists of i.i.d. entries drawn from a \(t\) distribution with two degrees of freedom so that the noise variance is infinite. The true regression vector \(^{*}^{p}\) is chosen with \(p/20\) nonzero entries, set to a constant value such that the signal strength \(\|^{*}\|^{2}\) equals 10.

We explore two scenarios of the \((n,p)\) pairs and corresponding iterative algorithms:

1. \((n,p)=(10000,5000)\): In this configuration, with \(n\) much larger than \(p\), we examine Huber regression and Pseudo-Huber regression (without penalty or soft-thresholding). Both the gradient descent (GD) and stochastic gradient descent (SGD) algorithms are implemented for each type of regression.
2. \((n,p)=(10000,12000)\): Here, we investigate Huber regression and Pseudo-Huber regression with an L1 penalty, \(\|\|_{1}\) (\(=0.002\)) and corresponding soft-thresholding step. For each penalized regression, we employ the Proximal Gradient Descent (Proximal GD) and Stochastic Proximal Gradient Descent (Proximal SGD) algorithms.

In all algorithms, we start with the initial vector \(}^{1}=_{p}\) and proceed with a fixed step size \(=(1+})^{-2}\) where \(n_{*}=n\) for GD and proximal GD, and \(n_{*}=n/5\) for SGD and proximal SGD. We run each algorithm for \(T=100\) steps. For SGD and Proximal SGD, batches \(I_{t}\{1,2,,n\}\) are randomly sampled without replacement and independently of \((,,(I_{s})_{s t})\), each with cardinality \(|I_{t}|=\).

A crucial component of the proposed risk estimates \(_{t}\) and \(_{t}\) involve the weight matrices \(\) and \(}\). The matrix \(\) is defined in Theorem 3.6, and \(}=}^{-1}}\) is defined in Theorem 3.7. We employ Hutchinson's trace approximation to compute \(\), \(}\), and \(}\). This implementation is computationally efficient. We refer readers to [5, Section 4] for more details.

Recall that we have proposed two estimates for \(r_{t}=\|^{1/2}(}^{t}-^{*})\|^{2}+\|\|^{2}/n\), one is \(_{t}\) in Theorem 3.6 which requires knowing \(=[_{i}_{i}^{}]\), and the other is \(_{t}\) in Theorem 3.7 which does not need \(\). Since the quantity \(\|\|^{2}/n\) remains constant along the algorithm trajectory, we only focus on the estimation of \(\|^{1/2}(}^{t}-^{*})\|^{2}\). We repeat each numerical experiment 100 times and present the aggregated results in Figures 1, 2 and 3.

In Figure 1, we focus on the scenario with \((n,p)=(10000,5000)\), and plot the actual risk \(\|^{1/2}(}^{t}-^{*})\|^{2}\), and its two estimates \(_{t}-\|\|^{2}/n\) and \(_{t}-\|\|^{2}/n\) along with the 2 standard error bar for GD and SGD algorithms applied to both Huber and Pseudo Huber regression. In Figure 2, we focus on the scenario with \((n,p)=(10000,12000)\), and present the risk curves for the Proximal GD and Proximal SGD algorithms applied to both L1-penalized Huber regression and Pseudo-Huber regression.

Figure 1 and Figure 2 confirm the three curves are in close agreement, indicating that the proposed estimates \(_{t}-\|\|^{2}/n\) and \(_{t}-\|\|^{2}/n\) are consistent estimates of the actual risk \(\|^{1/2}(}^{t}-^{*})\|^{2}\). The two estimates closely capture the risk \(\|^{1/2}(}^{t}-^{*})\|^{2}\) over the entire trajectory of the algorithms. For GD and Proximal GD, the risk curves exhibit a U-shape, first decreasing and then increasing, and the estimates \(_{t}\) and \(_{t}\) closely capture this pattern. This suggests that the proposed estimates are reliable and can be used to monitor the risk of the iterates and find the optimal iteration (the iteration minimizing the generalization error) along the trajectory of the algorithm.

Additional experiments: varying step sizes for different iterations.We also conduct simulations to investigate the accuracy of the proposed risk estimates in a setting with varying step size. We consider two types of step sizes: 1). \(_{t}=1\) if \(t\) is odd, and \(_{t}=0\) if \(t\) is even; 2). \(_{t}=1\) if \(t\) is odd,and \(_{t}=0.5\) if \(t\) is even. While the above choices of step size are not preferred in practice, here the goal is show that the proposed risk estimates is able to accurately capture the dynamics of the risk even when the step size changes along the trajectory of the algorithm. For instance, the first choice of step size should produce a risk curve that is flat when \(t\) is even. The results are presented in Figure 3, illustrating that the risk estimates accurately capture the flat segments of the true risk curve.

Additional experiments: the estimate \(_{t}^{ sub}\) is suboptimal.We compare the performance of \(_{t}^{ sub}\) with our proposed estimates in Huber regression with \((n,p,T)=(4000,1000,20)\) and batch size \(|I_{t}|=n/10\) and \(_{t}=0.2\) for all \(t[T]\). It is clear from Figure 4 that \(_{t}\) is more accurate than the suboptimal estimator \(_{t}^{ sub}\), especially when \(t\) increases.

Figure 1: Risk curves for Huber and Pseudo-Huber regression with GD and SGD algorithms for the scenario \((n,p)=(10000,5000)\). **Upper row:** Huber regression, **Lower row:** Pseudo-Huber regression. **Left column:** GD, **Right column:** SGD.

## 5 Discussion

This paper proposes a novel risk estimate for the generalization error of iterates generated by the proximal GD and proximal SGD algorithms in robust regression. The proposed risk estimates accurately capture the predictive risk of the iterates along the trajectory of the algorithms, and are provably consistent (Theorems 3.6 and 3.7). Three matrices in \(^{T T}\) in (8)-(10) reveal the interplay between the squared risk, the residuals and the gradients, so that the approximation (3) holds. This structure is different from the square loss case studied in  where only two matrices (inverse of each other) are sufficient.

Let us mention some open questions along with potential future research directions. The first question regards the probabilistic model: we currently assume Gaussian features \(_{i}\), and it would be of interest to study the extension in which our consistency results are universal, allowing non-Gaussian feature distributions. Second, it is of interest to extend the current estimates to more general optimization problems of the form (2) with non-smooth data-fitting loss, for instance the Least Absolute Deviation loss \(\|-\|_{1}\). In this case the gradient does not exist at the origin, which calls for different algorithms than the GD and SGD variants presented here, for instance the Alternating Direction Method of Multipliers (ADMM) . It is of independent interest to derive the risk estimates for iterates obtained by such primal-dual methods.

Figure 2: Risk curves for L1-penalized Huber and Pseudo-Huber regression with Proximal GD and Proximal SGD algorithms for the scenario \((n,p)=(10000,12000)\). **Upper row:** L1-penalized Huber regression, **Lower row:** L1-penalized Pseudo-Huber regression. **Left column:** Proximal GD, **Right column:** Proximal SGD.