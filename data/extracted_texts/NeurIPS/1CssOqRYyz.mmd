# Diff-PCC: Diffusion-based Neural Compression for 3D Point Clouds

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

Stable diffusion networks have emerged as a groundbreaking development for their ability to produce realistic and detailed visual content. This characteristic renders them ideal decoders, capable of producing high-quality and aesthetically pleasing reconstructions. In this paper, we introduce the first diffusion-based point cloud compression method, dubbed Diff-PCC, to leverage the expressive power of the diffusion model for generative and aesthetically superior decoding. Different from the conventional autoencoder fashion, a dual-space latent representation is devised in this paper, in which a compressor composed of two independent encoding backbones is considered to extract expressive shape latents from distinct latent spaces. At the decoding side, a diffusion-based generator is devised to produce high-quality reconstructions by considering the shape latents as guidance to stochastically denoise the noisy point clouds. Experiments demonstrate that the proposed Diff-PCC achieves state-of-the-art compression performance (e.g., 7.711 dB BD-PSNR gains against the latest G-PCC standard at ultra-low bitrate) while attaining superior subjective quality. Source code will be made publicly available.

## 1 Introduction

Point clouds, composed of numerous discrete points with coordinates (x, y, z) and optional attributes, offer a flexible representation of diverse 3D shapes and are extensively applied in various fields such as autonomous driving , game rendering , robotics , and others. With the rapid advancement of point cloud acquisition technologies and 3D applications, effective point cloud compression techniques have become indispensable to reduce transmission and storage costs.

### Background

Prior to the widespread adoption of deep learning techniques, the most prominent traditional point cloud compression methods were the G-PCC  and V-PCC  proposed by the Moving Picture Experts Group(MPEG). G-PCC compresses point clouds by converting them into a compact tree structure, whereas V-PCC projects point clouds onto a 2D plane for compression. In recent years, numerous deep learning-based methods have been proposed [50; 45; 11; 12; 7; 30; 46; 14; 42], which primarily employ the Variational Autoencoder (VAE) [1; 2] architecture. By learning a prior distribution of the data, the VAE projects the original input into a higher-dimensional latent space, and reconstructs the latent representation effectively using a posterior distribution. However, previous VAE-based point cloud compression architectures still face recognized limitations: 1) Assuming a single Gaussian distribution \(N(,^{2})\) in the latent space may prove inadequate to capture the intricate diversity of point cloud shapes, yielding blurry and detail-deficient reconstructions [56; 10]; 2) The Multilayer Perceptron (MLP) based decoders [50; 45; 11; 12; 46] suffer from feature homogenization, which leads to point clustering and detail degradations in the decoded point cloud surfaces, lacking theability to produce high-quality reconstructions. Recently, Diffusion models (DMs)  have attracted considerable attention in the field of generative modeling [34; 48; 41; 19] due to their outstanding performance in generating high-quality samples and adapting to intricate data distributions, thus presenting a novel and exciting opportunity within the domain of neural compression [33; 44; 25]. By generating a more refined and realistic 3D point cloud shape, DMs offer a distinctive approach to reduce the heavy dependence of reconstruction quality on the information loss of bottleneck layers.

### Our Approach

Building on the preceding discussion, we introduce Diff-PCC, a novel lossy point cloud compression framework that leverages diffusion models to achieve superior rate-distortion performance with exceptional reconstruction quality. Specifically, to enhance the representation ability of simplistic Gaussian priors in VAEs, this paper devises a dual-space latent representation that employs two independent encoding backbones to extract complementary shape latents from distinct latent spaces. At the decoding side, a diffusion-based generator is devised to produce high-quality reconstructions by considering the shape latents as guidance to stochastically denoise the noisy point clouds. Experiments demonstrate that the proposed Diff-PCC achieves state-of-the-art compression performance (e.g., 7.711 dB BD-PSNR gains against the latest G-PCC standard at ultra-low bitrate) while attaining superior subjective quality.

### Contribution

Main contributions of this paper are summarized as follows:

* We propose Diff-PCC, a novel diffusion-based lossy point cloud compression framework. To the best of our knowledge, this study presents _the first_ exploration of diffusion-based neural compression for 3D point clouds.
* We introduce a dual-space latent representation to enhance the representation ability of the conventional Gaussian priors in VAEs, enabling the Diff-PCC to extract expressive shape latents and facilitate the following diffusion-based decoding process.
* We devise an effective diffusion-based generator to produce high-quality noises by considering the shape latents as guidance to stochastically denoise the noisy point clouds.

## 2 Related Work

### Point Cloud Compression

Classic point cloud compression standards, such as G-PCC, employ octree to compress point cloud geometric information. In recent years, inspired by deep learning methods in point cloud analysis[26; 27] and image compression[1; 2; 22], researchers have turned their attention to learning-based point cloud compression. Currently, point cloud compression methods can be primarily divided into two branches: voxel-based and point-based approaches. Voxel-based methods further branch into

Figure 1: Diff-PCC pipeline. \(X_{t}\) and \(_{t}\) represents the \(t\)th original point cloud and noisy point cloud, respectively; \(p\) refers to the forward process and \(q\) refers to the reverse process; \(N(0,)\) means the pure noise. Entropy model and arithmetic coding is omitted for a concise explanation.

sparse convolution[36; 37; 38; 49; 51; 52] and octree[9; 24; 31]. Among them, sparse convolution derives from 2D-pixel representations but optimizes for voxel sparsity. On the other hand, octree-based methods, utilize tree structures to eliminate redundant voxels, representing only the occupied ones. Point-based methods[11; 45; 46; 11] are draw inspiration from PointNet , utilizing symmetric operators (max pooling, average pooling, attention pooling) to handle permutation-invariant point clouds and capture geometric shapes. For compression, different quantization operations categorize point cloud compression into lossy and lossless types. In this paper, we focus on lossy compression to achieve higher compression ratios by sacrificing some precision in the original data.

### Diffusion Models for Point Cloud

Recently, diffusion models have ignited the image generation field[58; 17; 32], inspiring researchers to explore their potential in point cloud applications. DPM pioneered the introduction of diffusion models in this domain. Starting from DPM, PVD combines the strengths of point cloud and voxel representations, establishing a baseline based on PVCNN. LION employs two diffusion models to separately learn shape representations in latent space and point representations in 3D space. Dit-3D innovates by integrating transformers into DDPM, directly operating on voxelized point clouds during the denoising process. PDR employs diffusion model twice during the process of generating coarse point clouds and refined point clouds. Point-E[] utilizes three diffusion models for the following processes: text-to-image generation, image-to-point cloud generation, and point cloud upsampling. PointInfinity utilizes cross-attention mechanism to decouple fixed-size shape latent and variable-size position latent, enabling the model to train on low-resolution point clouds while generating high-resolution point clouds during inference. DiffComplete enhances control over the denoising process by incorporating ControlNet, achieving new state-of-the-art performances. These advancements demonstrate the promise of DMs in point cloud generation tasks, which motivates our exploring its applicability in point cloud compression. Our research objective is to explore the effective utilization of diffusion models for point cloud compression while preserving its critical structural features.

## 3 Method

Figure 1 illustrates the pipeline of the proposed Diff-PCC, which can also represent the general workflow of diffusion-based neural compression. A concise review for Denoising Diffusion Probabilistic Models (DDPMs) and Neural Network (NN) based point cloud compression is first provided in Sec. 3.1; The proposed Diff-PCC is detailed in Sec. 3.2.

### Preliminaries

Denoising Diffusion Probabilistic Models (DDPMs) comprise two Markov chains of length T: diffusion process and denoising process. Diffusion process adds noise to clean data \(}\), resulting in a series of noisy samples \(\{},}...}\}\). When \(T\) is large enough, \(x_{T} N(0,)\). The denoising process is the reverse process, gradually removing the noise added during the diffusion process. We formulate them as follows:

\[q(},,}|})=_{t=1}^{T}q(}|}),\;\;q(}|})=(}; }},_{t})\] (1)

\[p_{}(},,}|})=_{t=1}^{T}p_{ }(}|}),\;\;p_{}(}|})=(};}(},t), _{t}^{2})\] (2)

where \(\) is a hyperparameter representing noise level. \(t\{1,,T\}\) represents time step. Via reparameterization trick, we can sample from \(q(}|})\) and \(p_{}(}|})\) as following:

\[x_{t}=}}x_{t-1}+}}\] (3)

\[x_{t-1}=}(_{t},t)+_{t}=}{}}(}-}{_{t }}}}(},t))+_{t- 1}}{1-_{t}}}_{t}\] (4)where \(_{t}=1-_{t},_{t}=_{i=1}^{t}_{i}\), \(\) denotes random noise sampled from \((0,)\). Note that \(}(},t)\) is a neural network used to predict noise during the denoising process, and \(}\) can be directly sampled via \(x_{t}=_{t}}x_{0}+_{t}}\).

DDPMs train the reverse process by optimizing the model parameters \(\) through noise distortion. The loss function \(L(,_{0})\) is defined as the expected squared difference between the predicted noise and the actual noise, with the mathematical expression as follows:

\[L(,_{0})=_{t,}||-_{ }(_{t},t)||^{2}\] (5)

### Diff-Pcc

#### 3.2.1 Overview

As shown in Fig. 2, two key components, i.e., compressor and generator, are respectively utilized in the diffusion process and denoising process. In Diff-PCC, the diffusion process is identified as the encoding, in which a compressor extracts latents from the point cloud and compresses latents into bitstreams; at the decoding side, the generator accepts the latents as a condition and gradually restoring point cloud shape from noisy samples.

#### 3.2.2 Dual-Space Latent Encoding

Several research have demonstrated that a simplistic Gaussian distribution in the latent space may prove inadequate to capture the complex visual signals [56; 3; 6; 10]. Although previous works have proposed to solve these problems using different technologies such as non-gaussian prior  or coupling between the prior and the data distribution , these techniques may not be able to directly employed on neural compression tasks.

In this paper, a simple yet effective compressor is introduced, which composed of two independent encoding backbones to extract expressive shape latents from distinct latent spaces. Motivated by PointPN , which excels in capturing high-frequency 3D point cloud structures characterized by sharp variations, we design a dual-space latent encoding approach that utilizes PointNet to extract low-frequency shape latent and leverages PointPN to characterize complementary latent from high frequency domain. Let \(x\) be the original input point cloud, we formulate the above process as:

\[\{y_{l},y_{h}\}=\{E_{l}(x),E_{h}(x)\}\] (6)

Figure 2: Detailed Structure of the Utilized Compressor and Generator. \(y_{l}\) and \(y_{h}\) refer to the low-frequency shape latent and high-frequency detail latent, respectively; \(z\) means hyperprior latent; \(Q\) refers to the quantization; AE and AD represents the arithmetic encoding and decoding.

where \(y_{l}^{1 C}\) and \(y_{h}^{S C}\) represent the low-frequency and high-frequency latent features, respectively; \(E_{l}\) and \(E_{h}\) refer to the PointNet and PointPN backbones, respectively. Next, the quantization process \(Q\) is applied on the obtained features \(_{l}\) and \(_{h}\), i.e.,

\[\{_{l},_{h}\}=\{Q(y_{l}),Q(y_{h})\}\] (7)

where function \(Q\) refers to the operation of adding uniform noise during training  and the rounding operation during test.

Then, fully factorized density model  and the hyperprior density model  are employed to fit the distribution of quantized features \(_{l}\) and \(}\), respectively. Particularly, the hyperprior density model \(p_{}(_{h})\) can be described as:

\[p_{}(_{h})=(N(,^{2})*(-,))(_{h})\] (8)

where \((-,)\) refers to the uniform noise ranging from \(-\) to \(\); \(N(,^{2})\) refers to the normal distribution with expectation \(\) and standard deviation \(\), which can be further estimated by a hyperprior encoder \(E_{hyper}\) and decoder \(D_{hyper}\):

\[(,^{2})=D_{hyper}()=D_{hyper}(Q(z))=D_{hyper}(Q(E_{hyper}(y_{h} )))\] (9)

In this way, a triplet containing quantized low-frequency feature \(_{l}\), quantized high-frequency feature \(_{h}\), and quantized hyperprior \(\) will be compressed into three separate streams. Let \(p()\) and \(p_{()}()\) respectively represents the actual distribution and estimated distribution of latent features, then the bitrate \(\) can be estimated as follows:

\[=_{_{l} p(_{l})}[-_{2}p_{ }(_{l})]+_{_{h} p(_{h})}[- _{2}p_{}(_{h})]+_{ p()} [-_{2}p_{}()]\] (10)

#### 3.2.3 Diffusion-based Generator

The generator takes noisy point cloud \(x_{t}\) at time \(t\) and necessary conditional information \(C\) as input. We hope generator to learn positional distribution \(F\) of \(x_{t}\) and fully integrate \(F\) with \(C\) to predict noise \(_{t}\) at time \(t\). In this paper, we consider all information that could potentially guide the generator as conditional information, including time \(t\), class label \(l\), noise coefficient \(_{t}\), and decoded latent features (\(_{l}\) and \(_{h}\)).

DiffComplete  uses ControlNet  to achieve refined noise generation. However, the denoiser of DiffComplete is a 3D-Unet, adapted from its 2D version . This structure is not suitable for our method, because we directly deal with points, instead of voxels. We embraced this idea and specially designed a hierarchical feature fusion mechanism to adapt to our method. Note that 3D-Unet can directly downsample features \(F\) through 3D convolution with a stride greater than one. It is very complex for point-based methods to achieve equivalent processing. Therefore, we did not replicate the same structure as DiffComplete does, but directly used AdaLN to inject conditional information, formulated as:

\[AdaLN(F_{in},C)=Norm(F_{in}) Linear(C)+Linear(C)\] (11)

where \(F_{in}\) denotes the original features in the Generator and \(C\) denotes the condition information.

Now we detail the structure: First, we need to exact the shape latent of noise point cloud \(x_{t}\) and we choose PointNet for structural consistency. However, in the early stages of the denoising process, \(x_{t}\) lacks a regular surface shape for the generator to learn. Therefore, we adopt the suggestion from PDR , adding positional encoding to each noise point so that the generator can understand the absolute position of each point in 3D space. Then we inject shape latent \(_{l}\) from the compressor via ADaLN. We formulate the above process as:

\[F_{x_{t}} =PointNet(x_{t})+PE(x_{t})\] (12) \[F^{{}^{}}_{xt} =AdaLN(F_{x_{t}},C)\] (13)

Next, we need to fuse high-frequency features. We extract the local high-frequency features of \(x_{t}\) using PointPN and add them to \(F\) from the previous step, Then we inject the high-frequency features from the compressor via AdaLN. We use K-Nearest Neighbor (KNN) operation to partition locally and set the number of neighbor points to 8, which allows the generator to learn local details. We formulate the above process as:

\[F^{{}^{}}=PointPN(x_{t})+FPS(F_{in})\] (14) \[F_{out}=AdaLN(F^{{}^{}},C)\] (15)

After that, we use the self-attention mechanism to interact with information from different local areas. And through a feature up-sampling module, we generate features for n points. Finally, we output noise through a linear layer. We formulate the above process as:

\[F^{{}^{}}=SA(F_{in})\] (16) \[F^{{}^{}}=UP(F^{{}^{}})\] (17) \[_{t}=Linear(F^{{}^{}})\] (18)

#### 3.2.4 Training Objective

We follow the conventional rate-distortion trade-off as our loss function as follows:

\[=+\] (19)

where \(\) refers to the evaluated distortion; \(\) represents bitrate as shown in Eq. 10; \(\) serves as the balance the distortion and bitrate. Specifically, a combined form of distortion \(\) is used in this paper, which considers both intermediate noises (\(\), \(\)) and global shapes (\(x_{0}\), \(_{0}\)):

\[=_{MSE}(,)+_{CD }(x_{0},_{0})\] (20)

where \(_{MSE}\) denotes the Mean Squared Error (MSE) distance; \(_{CD}\) refers to the Chamfer Distance; \(\) means the weighting factor. Here, the overall point cloud shape is additively supervised under the Chamfer Distance \(_{CD}(x_{0},_{0})\) to provide a global optimization. The following function is utilized to predict the reconstructed point cloud \(_{0}\) in practice:

\[x_{0}=_{t}}}(x_{t}-_{t}} _{}(x_{t},t,c))\] (21)

where \(_{t}\) means the noise level; \(x_{t}\) refers to the noisy point cloud at time step t; \(_{}\) denotes the predicted noise from the generator; \(c\) represent the conditional information we inject into the generator.

## 4 Experiments

### Experimental Setup

**Datasets** Based on previous work, we used ShapeNet as our training set, sourced from . This dataset contains 51,127 point clouds, across 55 categories, which we allocated in an 8:1:1 ratio for training, validation, and testing. Each point cloud has 15K points, and following the suggestions from , we randomly select 2K points from each for training. Additionally, we also used ModelNet10 and ModelNet40 as our test sets, sourced from . These datasets contain 10 categories and 40 categories respectively, totaling 10,582 point clouds. During training and testing, we perform individual normalization on the shape of each point cloud.

**Baselines & Metric** We compare our method with the state-of-the-art non-learning-based method: G-PCC, and the latest learning-based methods from the past two years: IPDAE, PCT-PCC, Following , we use point-to-point PSNR to measure the geometric accuracy and the number of bits per point to measure the compression ratio.

**Implementation** Our model is implemented using PyTorch  and CompressAI , trained on the NVIDIA 4090X GPU (24GB Memory) for 80,000 steps with a batch size of 48. We utilize the Adam optimizer  with an initial learning rate of 1e-4 and a decay factor of 0.5 every 30,000 steps, with \(_{1}\) set to 0.9 and \(_{2}\) set to 0.999. Since the positional encoding method requires the dimension (dim) to be a multiple of 6, we designed the bottleneck layer size to be 288. For diffusion, we employ a cosine preset noise parameter, setting the denoising steps T to 200, which is used for both training and testing.

### Baseline Comparisons

**Objective Quality Comparison** Table 1 shows the quantitative indicators using BD-Rate and BD-PSNR, and Fig. 3 demonstrates the rate-distortion curves of different methods. It can be seen that, under identical reconstruction quality conditions, our method achieves superior rate-distortion performance, conserving between 56% to 99% of the bitstream compared to G-PCC. At the most minimal bit rates, point ot point PSNR of our proposed method surpasses that of G-PCC by 7.711 dB.

**Subjective Quality Comparison** Fig 4 presents the ground truth and decoded point clouds from different methods. We choose three point cloud:airplane, chair,and mug. to be tested across a comparable bits per pixel (bpp) range. The comparative analysis reveals that at the lowest code rate, our method preserves the ground truth's shape information to the greatest extent while simultaneously achieving the highest Peak Signal-to-Noise Ratio (PSNR).

### Ablation Studies

We conduct ablation studies to examine the impact of key components in the model. Specifically, we investigate the effectiveness of low-frequency features, high-frequency features, and the loss function designed in Sec. 3.2.4. As shown in Table 2, utilizing solely low-frequency features to guide the reconstruction of the diffusion model results in a 20% reduction in the code rate, along with a decrease in the reconstruction quality by 0.397dB. This indicates that high-frequency features play an effective role in guiding the model during the reconstruction process. Conversely, discarding the low-frequency features, which represent the shape of the point cloud, leads to a reduction in the code rate and significantly diminishes the reconstruction quality. Therefore, we argue that the loss of the shape variable is not worth it. Lastly, we ascertain the impact of \(_{CD}(x_{0},_{0})\), and the results indicate that this loss marginally increases the bits per point (bpp) while diminishing the reconstruction quality.

  Dataset & Metric & G-PCC & IPDAE & PCT-PCC & Diff-PCC \\    & BD-Rate (\%) & - & -34.594 & -87.563 & **-99.999** \\   & BD-PSNR (dB) & - & +3.518 & +8.651 & **+11.906** \\   & BD-Rate (\%) & - & -35.640 & **-68.899** & -56.910 \\   & BD-PSNR (dB) & - & +4.060 & **+6.333** & +5.876 \\   & BD-Rate (\%) & - & -53.231 & -34.127 & **-56.451** \\   & BD-PSNR (dB) & - & +4.245 & **+6.167** & +5.350 \\   & BD-Rate (\%) & - & -41.550 & -63.530 & **-71.117** \\   & BD-PSNR (dB) & - & +3.941 & +4.384 & **+7.711** \\    & Encoding & 0.002 & 0.004 & 0.046 & 0.152 \\   & Decoding & 0.001 & 0.006 & 0.001 & 1.913 \\  

Table 1: Objective comparison using BD-PSNR and BD-Rate metrics. G-PCC serves as the anchor. The best and second-best results are highlighted in **bold** and underlined, respectively.

Figure 3: Rate-distortion curves for performance comparison. From left to right: ShapeNet, ModelNet10, and ModelNet40 dataset.

## 5 Limitations

Although our method has achieved advanced rate distortion performance and excellent visual reconstruction results, there are several limitations that warrant discussion. Firstly, the encoding and decoding time are relatively long, which could potentially be improved by the acceleration techniques employed in several explorations [18; 19]. Secondly, the model is currently limited to compressing small-scale point clouds, and further research is required to enhance its capability to handle large-scale instances.

## 6 Conclusion

We propose a diffusion-based point cloud compression method, dubbed Diff-PCC, to leverage the expressive power of the diffusion model for generative and aesthetically superior decoding. We introduce a dual-space latent representation to enhance the representation ability of the conventional Gaussian priors in VAEs, enabling the Diff-PCC to extract expressive shape latents and facilitate the following diffusion-based decoding process. At the decoding side, an effective diffusion-based generator produces high-quality reconstructions by considering the shape latents as guidance to stochastically denoise the noisy point clouds. The proposed method achieves state-of-the-art compression performance while attaining superior subjective quality. Future works may include reducing the coding complexity and extending to large-scale point cloud instances.

  \(E_{l}\) backbone & \(E_{h}\) backbone & \(_{CD}(x_{0},_{0})\) & BD-PSNR (dB) & BD-Rate (\%) \\  \(\) & \(\) & & -0.397 & -20.637 \\  \(\) & \(\) & & -2.276 & -16.523 \\  \(\) & \(\) & & -0.132 & +4.658 \\  

Table 2: Ablation study of the proposed method. The original Diff-PCC serves as the anchor.

Figure 4: Subjective quality comparison. Example point clouds are selected from the ShapeNet dataset, each with 2k points.