# A Decision-Language Model (DLM) for Dynamic Restless Multi-Armed Bandit Tasks in Public Health

Nikhil Behari

MIT, Harvard University

&Edwin Zhang

Harvard University

&Yunfan Zhao

GE Healthcare, Harvard University

&Aparna Taneja

Google

&Dheeraj Nagaraj

Google

&Milind Tambe

Harvard University, Google

Equal contribution.

###### Abstract

Restless multi-armed bandits (RMAB) have demonstrated success in optimizing resource allocation for large beneficiary populations in public health settings. Unfortunately, RMAB models lack flexibility to adapt to evolving public health policy priorities. Concurrently, Large Language Models (LLMs) have emerged as adept automated planners across domains of robotic control and navigation. In this paper, we propose a Decision Language Model (DLM) for RMABs, enabling dynamic fine-tuning of RMAB policies in public health settings using human-language commands. We propose using LLMs as automated planners to (1) interpret human policy preference prompts, (2) propose reward functions as code for a multi-agent RMAB environment, and (3) iterate on the generated reward functions using feedback from grounded RMAB simulations. We illustrate the application of DLM in collaboration with ARMMAN, an India-based non-profit promoting preventative care for pregnant mothers, that currently relies on RMAB policies to optimally allocate health worker calls to low-resource populations. We conduct a technology demonstration in simulation using the Gemini Pro model , showing DLM can dynamically shape policy outcomes using only human prompts as input.

## 1 Introduction

Limited resource allocation is a frequent challenge in public health settings. For instance, in the maternal and child health domain, preventative care awareness programs play a key role in reducing maternal mortality, where global rates are currently more than double the UN Sustainable Development Goal target of fewer than 70 deaths per 100K live births . These essential programs help avoid preventable deaths [3; 4], yet are often operated by non-profits supporting low-resource communities [5; 6], and thereby face _two key challenges_ in distributing resources to large beneficiary populations. First, programs typically operate with insufficient financial and human resources, necessitating effective resource allocation strategies to maximize health outcomes [7; 8]. Second, these programs must frequently adapt to changing population needs and intervention priorities . Adaptability is especially important for prioritizing care for known subpopulations with higher risk , and for adjusting strategies using community or expert-driven insights .

To address the first problem, restless multi-armed bandits (RMAB) have proven effective in real-world deployment for optimally allocating limited resources in critical public health domains [11; 12; 13; 14]. In the classical RMAB formulation, a central planner chooses arms to allocate resources, observing a per-arm state-dependent reward. However, while RMABs are well-suited for resource allocation, a significant challenge persists in developing models capable of adapting to changing policy objectives. For instance: public health experts must often dynamically allocate resources tospecific underprivileged socioeconomic groups [15; 16; 17], yet existing works in RMABs largely focus on fixed objectives, requiring significant human design to achieve new desired health outcomes.

Recently, large language models (LLMs) have emerged as adept planners in tasks such as navigation , spatio-temporal reasoning  and interactive decision-making . Recent works have also demonstrated that LLMs, from language prompts, can generate reward functions as code, automating complex robotic manipulation tasks in reinforcement learning (RL) . While there is growing research in LLMs for healthcare , the potential of LLMs to dynamically adapt resource allocation using language prompts--potentially enabling automated policy tuning using expert and community health insights --remains unstudied.

In this work, we propose a Decision-Language Model (DLM) for RMABs, enabling dynamic fine-tuning of resource allocation policies for public health using human language prompts. We propose: 1) using LLMs to disambiguate language-expressed policy preferences, 2) using LLMs to directly propose reward functions as code to reach desired RMAB objectives, and 3) a fully automated self-reflection stage to iteratively refine LLM-generated reward functions using grounded RMAB simulations, without requiring ground truth feedback. Stepping beyond existing work in LLMs for health, we uniquely propose using LLMs to tune _RMAB-driven resource allocation_ through reward function design, enabling: 1) more principled resource allocation using RMABs as a central planner, rather than direct LLM output, 2) continual alignment of reward functions to specified prompts using simulated RMAB allocation outcomes to refine LLM proposals, and 3) improved interpretability of proposed rewards through the use of code for reward function output.

We assess our proposed method within a _simulated_ public health environment created in partnership with ARMMAN, an India-based non-profit that spreads preventative care awareness to pregnant women and new mothers through an automated call service. To increase program listenership, ARMMAN employs health workers to provide live service calls to beneficiaries; however, due to limited support staff, ARMMAN faces a resource allocation problem to improve program listenership through optimal assignment of health workers. Prior works modeling the ARMMAN setting with RMABs have shown that RMAB policies can reduce engagement drops by \( 30\%\) in real-world deployment [24; 25; 26]. However, these prior works fail to address a persistent challenge within ARMMAN: tuning policies dynamically to prioritize disadvantaged groups, a common issue when targeting new regions or shifting population dynamics [27; 28]. We utilize an _anonymized_ (Appendix B) dataset from ARMMAN to develop a _simulation_ (Appendix C) representing changing priorities within the maternal health setting, and evaluate our method within this simulated public health environment. We provide a detailed discussion of our consideration of ethical guidelines during the design process of this work in Appendix A, B, C.

**In summary, our key contributions are as follows:**

* To the best of our knowledge, we are the first to propose using LLMs to adapt to changing resource allocation objectives in public health through reward design in the RMAB setting.
* We introduce a reward proposal loop that enhances LLM-generated reward functions using feedback from restless multi-armed bandit (RMAB) simulations, enabling LLMs to iteratively refine reward design to achieve specific, human-specified policy outcomes.
* To assess the feasibility of our system in simulation, we evaluate our algorithms' performance using the Gemini Pro model  in a real-world inspired task of resource allocation in maternal and child care, demonstrating near human-level policy tuning to achieve human-specified outcomes using only language prompts as input.

## 2 Related Work

**RMABs**: The RMAB problem, introduced by Whittle , is classically solved through the Whittle index heuristic policy [30; 31]. Subsequent works have generalized to multi-action RMABs [32; 33]. RMABs gained prominence in public health domains and are deployed to disseminate preventative healthcare information, monitor health program adherence, and model disease spread [34; 24; 35]. However, existing works focus on fixed reward functions and fail to consider that public health planners often have evolving priorities .

**Reward Design**: Designing reward functions that effectively condense long-term agent goals into immediate behavioral signals is a central problem in RL . Manual designs are prone to task misspecification and overfitting . Brys _et al._ and Hussein _et al._ reshape reward through expert behavior observation; however, expert examples may not be available in resource and data-limited public health domains. Using LLMs as dense reward signals has been investigated [40; 41]. Ma _et al._ and Li _et al._ further use LLMs to output reward function code from language-specified goals. However, this work fails to address multi-agent settings, where a central planner could prioritize certain groups through reward design, and where the ground truth return signal is unknown.

## 3 Background

We consider an RMAB problem with \(N\) arms, each representing public health program beneficiaries, following prior work in the ARMMAN setting [24; 33; 14]. Each arm \(n[N]\) follows a Markov decision process \((_{n},_{n},_{n},T_{n},R_{n},_{n})\) with state space \(_{n}\), action space \(_{n}\), action costs \(_{n}\) - \(_{n}\), and unknown transition probabilities \(T_{n}:_{n}_{n}(_{n})\). We define reward function \(R_{n}:_{n}\) and discount factor \([0,1)\).

When \(_{n}\), \(_{n}\), and \(_{n}\) are the same for all arms \(n[N]\), such as the public health setting we focus on, we omit the subscript \(n\). Note our algorithms still apply to more general settings. A planner learns a policy \(\) that maps states \( S\) to actions in the set \(\), given the constraint that the sum cost of actions does not exceed budget \(B\). The objective is to learn a policy that maximizes the Bellman equation: \(_{}\{J():=_{n=1}^{N}R(_{n})+ }_{^{} T(,( ))}[J(^{})]\}\) s.t. \((s_{n}),\  n\) and \(_{n=1}^{N}c_{(s_{n})} B\) for cost of action \(c_{(s_{n})}_{n}\). We take the Lagrangian relaxation , fixing an action charge \(\) to decouple the value function across arms:

\[J(s,^{}) =_{ 0}(+_{n=1}^{N} _{a_{n}}\{Q_{n}(_{n},a_{n},) \}),\] (1) s.t. \[Q_{n}(_{n},a_{n},)=R(_{n} )- c_{a_{n}}+}[Q_{n}(_{n}^{},a_{n},)()].\]

Defined for Q-function \(Q\), arm \(n\), action \(a_{n}\), transitioning from state \(s_{n}\) under action \(a_{n}\) to \(s_{n}^{}\), and \(()\) an optimal policy under \(\). [43; 21]. We additionally build on deep RL approaches for RMABs [44; 33], which we discuss in Appendix F.

## 4 Decision-Language Model for RMABs

Below, we provide an overview of DLM (see Figure 1). We first describe the reward generation setting and the context provided to the LLM for initial reward candidate generation (Figure 1 Steps 1,2). We

Figure 1: Overview of the DLM language-conditioned reward design loop. We provide three context descriptions to the LLM: a language command (full list of commands in Table 3), a list of per-arm demographic features available for proposed reward functions, and syntax cues enabling LLM reward function output directly in code. From this context, the _1) LLM_ then proposes _2) candidate reward functions_ which are used to train _3) optimal policies_ under proposed rewards. Trained policies are simulated to generate _4) policy outcome comparisons_ showing state-feature distributions over key demographic groups. Finally, we query an LLM to perform _5) self-reflection_[43; 21] by choosing the best candidate reward aligning with the original language command; selected candidates are used as context to guide future reward generation.

next discuss the independent simulation stage (Step 3) and subsequent policy outcome comparison stage that simulates each policy reward outcomes (Step 4). We then discuss LLM reflection, which identifies top candidates to guide future in-context learning for LLM reward generation (Step 5). Finally, we motivate the use of LLMs for reward generation from a theoretical perspective.

### Problem Setting: Reward Generation for RMABs

We first define the goal of language-conditioned reward design in the RMAB setting. We consider a human-specified language policy goal \(\) with a corresponding base reward function that maps policies \(\) to real, scalar values: \(F:\). This base reward function \(F\) establishes a scalar "ground truth" evaluation that corresponds directly to the human-specified command. Then, our key objective is, given a human-specified language prompt \(\) and arm features \(\), to generate the reward function \(R\) that maximizes base function \(F\) through optimal policy \(^{R*}\) for reward \(R\):

\[_{R}F(^{R*}),^{R*}= *{argmax}_{}\{_{n=1}^{N}R( _{n},)+\,[J( ^{}),]\}\] \[(s_{n}),\; n _{n=1}^{N}c_{(s_{n})} B.\]

Note that we do _not assume access_ to the ground truth reward function \(F\) during training; however, we may query this ground truth "Base" reward at test time to evaluate a proposed policy. We propose using LLMs to: 1) propose reward function \(R\), such that optimal policy \(^{R*}\), when evaluated via the unknown base function \(F\), maximizes reward output, and 2) automatically refine \(R\) through self-reflection.

### Provided DLM Context

In the reward function generation phase, we prompt the LLM with three key contextual components (shown in Alg. 1, line 1). First, we include a human-language command \(\) that describes a desired policy outcome targeting a feature-based group (see Table 3 for examples). In practice, this is the _only human input required_ for the proposed DLM technique. Second, we provide arm feature information, denoted \(\). In the public health setting, features may include demographic information, socioeconomic data, or other descriptors relevant to policy outcomes; we provide the features used in our simulated setting in Appendix Figure 4. We propose that LLMs, given a language prompt \(\), may be used to extract the relevant features \(_{}\) from \(\) to design a reward function \(R\). Third, we provide context regarding the RMAB setting and code implementation. Specifically, we include information describing state, a per-arm binary value, and syntax for accessing feature information (example prompt shown in Appendix I). Using this context, we then query an LLM to propose reward functions as code (following [21; 42]) to achieve language-specified outcomes; to improve the alignment of proposed functions to these language-specified goals, we then introduce a key multi-agent simulation stage within the DLM loop.

```
1:Input: Task \(\), feature \(\), and code \(\) context, Output:\(R_{}\)
2:Hyperparams: Loop tiers. \(I\), proposal batch \(K\), sim. epochs \(n_{}\), sim. steps \(n_{}\), num. arms \(N\)
3:for iteration \(=1\) to \(I\)do
4: ## LLM reward proposal: Sample LLM reward funcs: \(R_{1:K}(,,)\), init. reflection string \(\)
5: ## Multi-agent simulations: Init. policy and critic net. \(,\)
6:for reward \(i=1\) to \(K\)do
7: Init. \(\)-net. \(\), buffer \(\), states \(=_{0}\), features \(\) and clear reflection string \(=[]\)
8:for epoch \(=1\) to \(n_{}\)do
9: Get lambda for current states: \(=()\)
10:for timestep \(t=1\) to \(n_{}\)do
11: Sample actions: \(a_{n}(s_{n},) n[N]\), simulate: \(^{},=(,,R_{i}, )\),
12: update buffer \(\{(,,, ^{},)\}\), update states: \(^{}\)
13: Update \((,)\) with PPO using \(\) and update \(\) with \(\)
14: ## Outcome comparison (Alg. 2): Update \((,,, )\)
15: ## Top candidate selection: \(R_{}(,,})\), \(\{R_{}\}\) ```

**Algorithm 1** DLM

### Multi-Agent Simulation

We evaluate each LLM-proposed reward function \(R_{1:K}\) by training a policy network \(\) under each proposed reward \(R_{i}\) (shown Alg. 1, lines 5:13). We consider a simulation space which defines the number of arms \(N\), each with fixed, but hidden, transition dynamics. Following the procedure defined in Alg. 1, for a given reward \(R_{i}\), we first sample an action-charge \(\), which is used to decouple the learning of arm policies (Eq. 1, Alg. 1 line 9). Then, we simulate \(n_{s}\) timesteps, sampling trajectories for each arm under the action-charge \(\) (Alg. 1 lines 10:12), following [25; 45]. These trajectories are used in a buffer \(\) (Alg. 1 line 12) to eventually update the policy and critic \((,)\) (Alg. 1 line 13). Note that we compute PPO advantage estimates for the actor from estimated Q-values.

### Reflection Stage

We propose enabling LLM self-reflection using a policy outcome comparison procedure described in Appendix D Algorithm 2. Unlike prior works , we do not assume access to a numerical, scalar fitness function \(F\) to validate reward functions. In the absence of this scalar feedback, we propose showing state-feature distributions, described below, for LLMs to select top candidate reward functions, and use these top candidates to guide future generations. Given trained policy and critic network \(,\), learnt lambda value \(\), and feature matrix \(^{N m}\), we first simulate over \(n_{}\) evaluation timesteps (Alg. 2 lines 5:7). For stored accumulated agent states \(\), we designate preferred "positive states"; this may be customized depending on the setting, but we consider a binary per-agent state with preferred "positive" state 1. Using accumulated states, we then compute the percentage of positive _states_, out of all positive states observed, accrued from each key feature group \(g\) over the evaluation timesteps, as a signal for intervention effect (Alg. 2 lines 9:11). These _state-feature distributions_ quantify the distribution of accumulated positive _states_ over key demographic _features_, ultimately describing the percentage of total positive intervention effects attributed to each discretized age range, education level, or income bracket, for example. Each distribution is reported as an output string (see Appendix M for examples).

We then query an LLM to select the best candidate example given the original prompt \(\) and the outcome distribution string \(\) (Alg. 1 line 15). This selected example is then added as context in the prompt of the next iteration of reward generation (Alg. 1 line 15). Intuitively, because we focus on resource allocation in the public health domain, _we propose that simulated state-feature distributions provide sufficient signal for the LLM to analyze proposed rewards and select top candidate examples_ for future in-context learning. This approach has two key strengths. First, we enable greater transparency through state-feature distribution analysis. By providing _only_ simulated outcomes of policies under specified rewards \(^{R_{*}}\) for reflection, we ensure that self-reflection focuses purely on alignment between the stated language goal and the health resource allocation outcomes, _without assuming any access to ground truth reward_. Second, we allow for greater flexibility; by investigating only the outcome distributions of the proposed rewards, rather than original policies themselves, we enable a model-agnostic approach to self-iteration in reward design.

### LLM Reward Generation Capability

We theoretically justify our method and provide further insight into how LLMs generate a reward function via reflection. We propose that the LLM can be interpreted as following a hyperparameter optimization algorithm: (1) Find the relevant features from \(z\) using world knowledge (2) Generate a reward function which is a weighted sum of the relevant features and observe the outcome of the optimal policy corresponding to this reward via state-feature distribution feedback (see Section 4.4) (3) Find the state-feature distribution that best conforms to the human language command (4) Optimize the weights to obtain a better candidate reward function.

We find empirically in Table 1 and Appendix H that the LLM indeed implements the first step of the proposed algorithm, by analyzing the precision and recall of finding relevant features through the usage of world knowledge and logical reasoning. This finding corroborates the results found in the logical reasoning analysis of language models done by Clark et al. . We assume that the LLM can evaluate reward functions by assigning a value to their state-feature distribution. In this section, we prove by construction that a transformer can implement the second step of this algorithm and give complexity bounds and correctness guarantees of this optimization process.

In our setting, we consider the embedding space \(^{d}\), whose elements encode states and features of an arm. We assume that there is an embedding function \(\) which maps features of an arm (denoted by \(z\)) and its state \(s\) to a vector in \(^{d}\). That is \(:(s,z)^{d}\). We consider each entry of the vector \((s,z)\)to correspond to some simple single feature of the arm such as (age group) or a complex combination of simple features such as (age group, education level). Let \(1()\) denote the indicator function. For example, the first entry of the vector \(\) could be \(_{1}(s,z)=1(20(z) 25,s=0)\) allowing us to set the rewards to arms in state 0 and age between 20 and 25. The \(10\)-th entry could be \(_{10}(s,z)=1(20(z) 25,(z)=,s=1)\), allowing us to set the rewards for arms in state 1, ages between 20 and 25 and education level being high school.

Based on empirical evidence of the LLM generated rewards, we consider the reward function for arm with features \(z\) in state \(s\) is of the form \(R(s,z)=w^{T}(s,z)\) for some \(d\) dimensional vector \(w^{d}\) with non-negative entries. This represents a rich class of rewards. In the example above, if \(w_{1}=1\) and \(w_{10}=10\) and all other entries of \(w\) are zeros, the reward function is:

\[R(s,z)=120(z) 25,s=0\\ 1020(z) 25,(z)=,s=1\\ 0\] (2)

We let the true reward function to be \(R^{*}(s,z)=(w^{*})^{T}(s,z)\) for some \(w^{*}^{n}\) with non-negative entries. Assume that \(w^{*}\) is a sparse vector - i.e, the number of non-zero entries is a constant independent of \(n\). This roughly means that the reward depends on only a few features. Let \((w^{*})\) be the set of indices where \(w^{*}\) has non-zero entries. Let \(\|w^{*}\|_{0}:=|(w^{*})|\).

Finding \((w^{*})\) can be a challenging task, since \(n\) can be very large. Based on the discussion above, in Step 1, the LLM is able to use its world knowledge and find \((w^{*})\). We now try to understand how the LLM approximates the corresponding entries of \(w^{*}\) via steps 2,3 and 4. Based on empirical analysis of LLM outputs, we propose the following hyperparameter search algorithm in the log-space to model its behavior. For some \(>1\), denote the search space to be \(S=\{^{k}:-K k K\}\) for some integer \(K\). The algorithm searches for \((w_{i})_{i(w^{*})} S^{|(w^{*})|}\). Here, \(\) represents the base of the logspace, or level of granularity of the discretization. In practice, we found that \(\) was often set to be 10 by the LLM. Let \(V(w,w^{*})\) denote the value assigned by the LLM to the state-feature distribution corresponding to the reward \(w^{T}(s,z)\) (as proposed in Step 3). We assume that the \(V(,)\) has the following monotonicity property, which roughly states that if \(w\) comes closer to \(w^{*}\), then \(V(w,w^{*})\) increases.

**Definition 1** (Monotonicity).: _We say that the return function \(V\) is monotone if for any \(u,v^{n}\), if \(|u_{i}-w^{*}_{i}||v_{i}-w^{*}_{i}|\) for every \(i[n]\), then \(V(u,w^{*}) V(v,w^{*})\)._

**Proposition 1**.: _Assume monotonicity for \(V(,w^{*})\) and let \(:=*{arg\,max}_{w S^{|(w^{*})|}}V(w,w^{*})\). There exists a transformer \(T\) with constant depth \(D\) and width \(O(\|w^{*}\|_{0}K)\) which can find \(\) with \(O(\|w^{*}\|_{0}K)\) samples, with oracle access to \(V(,w^{*})\)._

This shows that the LLM has the capability to correctly optimize reward weights and converge to a good reward function, under certain assumptions. We give a detailed proof in Appendix G.

## 5 Experimental Evaluation

### Simulated Public Health Setting

We evaluate DLM in a _simulated setting_ developed in collaboration with ARMMAN, an India-based non-profit that enrolls pregnant women (beneficiaries) from low-income communities  into an automated messaging service sharing preventative healthcare information. ARMMAN employs health workers to provide live service calls to beneficiaries with a higher risk of program drop-out, however, the beneficiary population far outnumbers the available health workers. Currently, deployed RMABs in the ARMMAN setting model beneficiaries as arms, live health worker calls as intervention actions , and binary arm states \(0\) as "not engaged" and \(1\) as a preferred "engaged" (positive) state when beneficiaries listen to an automated message for \(>30\) seconds. The RMAB policy then identifies _individuals across the entire beneficiary population_ to live call such that overall program engagement is maximized . We consider this the old, fixed "Default" policy goal. However, a key challenge for ARMMAN is training _dynamic_ policies to support specific underrepresented groups, for example when the program is deployed in different regions . We simulate these dynamic policy goals with 16 distinct prompts (Table 3) that describe demographic feature-based subpopulation priorities. We simulate this environment using a fully anonymized dataset collected by ARMMAN in January 2022, created from a service quality improvement study of 7,668 mothers; we compute transition probabilities from this dataset to simulate actions of real-world beneficiaries.

**Data usage and safety**: We use a fully anonymized dataset to simulate the ARMMAN public health setting; all experiments are a secondary analysis using this anonymized dataset, and are conducted with approval from the ARMMAN board of ethics. There is _no actual deployment_ of this technology demonstration in the real-world ARMMAN setting. Results from a _simulated setting_ are shown to highlight potential use cases of our proposed system. For more details about the dataset and consent of data collection, please see Appendix Section B and Section C.

### Tasks, Baselines, and Metrics

We provide experimental results for 16 prompts (Table 4) which include examples emphasizing both single and multiple combined feature categories. We compute per-prompt _mean normalized reward_ (described below) over 200 seeds. We evaluate DLM against several baseline reward functions:

**Random**: This policy samples arms uniformly at random, and has an MNR score of 0 through normalization. **No Action**: This policy samples no arms at each timestep, typically yielding negative MNR or near-random MNR in certain sparse reward tasks. **Default**: This policy is trained with reward prioritizing _all beneficiaries equally_, representing the old, fixed ARMMAN goal; thus, reward=1 for state 1 and reward=0 for state 0. Most prior work in RMABs assume this reward. **Base**: Reward is equal to the ground truth fitness function, a human-specified goal function described by the potentially ambiguous language prompt. At test time, we evaluate all methods using Base reward, and consider Base-trained policy as topline (MNR=1). To be clear, each method uses a different reward at train time, but uses _Base_ reward at evaluation time. **DLM (No Reflection)**: This version of our proposed method ablates the reflection and iterative refinement process, allowing us to assess the importance of reflection in improving zeroshot LLM-generated reward functions. **DLM (Reflection)**: This is the full version of our proposed method.

We compute mean normalized reward (MNR) as the average reward achieved per policy, over 200 training seeds, _using base reward during test-time evaluation_. We normalize each reward \(R\) as

Figure 2: Main results. We compute normalized reward (Section 5.2) for each method over 200 seeds, and report the interquartile mean (IQM) and standard error of the IQM across all runs . We compare the topline Base reward policy to the performance of DLM with No Reflection and with Reflection. We also compare to a No Action and Random policy, and a Default policy that demonstrates how the original (fixed) reward function would perform for each new task. Our method is able to achieve near-base reward performance across tasks, and consistently outperform the fixed Default reward policy in a completely automated fashion. For some tasks, DLM with Reflection is also able to significantly improve upon zero-shot proposed reward.

\((R-R_{})/(R_{}-R_{})\). An MNR of 0 therefore implies a policy's performance equivalent to random allocation, while an MNR of 1 implies performance at the level of base reward policy.

### Training Details

We use the Gemini Pro LLM model  from Google to generate reward functions, and train our downstream policy with RL using PPO (Alg. 1 line 13) [52; 45] and the generated reward function. The downstream policy is trained for \(5\) epochs, with each epoch containing 100 simulation steps accumulated in a buffer. Thus, we train on a total of 500 samples for each arm. Each such training is run for each proposed reward function, over \(2\) rounds of reflection and \(2\) candidate reward functions per round. We evaluate each _prompt_ over \(200\) seeds, with \(50\) separate trials per seed and \(10\) trajectory steps per trial, totaling \(100,000\) total steps per task.

### Evaluation of DLM Performance

We present the experimental evaluation of DLM in Figure 2. To the best of our knowledge, _we are the first to demonstrate LLMs as capable policy designers for resource allocation tasks in public health._ We make several observations on the results shown in Figure 2.

**DLM approaches Base reward performance**: We find DLM approaches Base reward performance across a broad range of tasks. Note that mean normalized reward (MNR) scores reported in Figure 2 are normalized as described in Section 5.2; this score therefore represents performance above random policy (MNR=0) compared to the topline Base reward policy (MNR=1). We find that DLM (Reflection) achieves an average MNR score of \(0.93 0.006\), achieving 90% or higher of base level performance in 11/16 tasks, demonstrating to the best of our knowledge the first example of using LLMs to adapt to changing resource allocation objectives in public health through reward design.

**Reflection improves performance for many tasks**: We find that over the 16 tested prompts DLM (No Reflection) achieves an average MNR of \(0.87 0.008\), while DLM (Reflection) achieves an average MNR of \(0.93 0.006\). Further, 8/16 of the prompts showed a significant increase in performance after reflection (Appendix Table 5). Notably, we observe that in cases where reflection does not improve performance, DLM (No Reflection) often achieves high zero-shot reward, obviating the need for the reflection stages. For example, we observe for the _Age Distribution Tail Emphasis_ prompt that DLM (No Reflection) achieves an MNR score approximately equal to the normalized Base score. Thus, DLM (Reflection) may unnecessarily iterate on functions that already achieve Base reward, resulting in degraded performance. Such occurrences are rare, and may have little practical difference in the resulting performance, which still achieves near-Base score.

**DLM consistently outperforms Default reward**: We observe that DLM consistently outperforms the Default reward policy, which represents the performance of the previously-used, fixed reward function across the given prompts. We observe an average Default reward MNR score of \(0.57 0.027\), compared to \(0.87 0.008\) for DLM (No Reflection) and \(0.93 0.006\) for DLM (Reflection). Furthermore, we observe that in 11/16 prompts DLM (No Reflection) significantly outperforms Default policy, while in 16/16 prompts DLM (Reflection) outperforms Default (Table 5 in Appendix). In summary, we find that DLM can meaningfully adjust policies, using only language input, to align more closely to human preferences. Additionally, this highlights that the previous fixed Default

Figure 3: Examples of DLM-generated reward functions vs. ground truth Base reward. Rewards reformatted for clarity; \(\) represents the binary state, numbers are scalar multiplier quantities, and named features, each binary quantities, are shown. In some cases (ex: Older Bias) DLM may identify relevant features zeroshot, and use reflection to refine weights. Alternatively, reflection may help refine features (ex: Age Distribution Tail Emphasis). However, when prompts are ambiguous (ex: Technically Challenged), reflection may not have sufficient signal to effectively iterate; in these cases, additional human feedback may be required.

reward is ineffective in accommodating the diverse prompts, and hence policy goals, described by humans in our simulated setting.

### LLM-Generated Rewards and Reflection in Public Health Settings

In this section we provide insight into LLM-generated reward functions and the reward Reflection module. We find that LLMs can reliably design and improve upon reward functions for public health goals, enabling automated policy tuning in resource-limited settings.

**LLMs accurately interpret language prompts for policy shaping**: We provide examples of LLM-generated reward functions compared to ground truth Base rewards in Figure 3. We find that DLM can consistently capture the ground truth Base reward, and use reflection to improve upon these proposed functions. However, in cases where language is ambiguous (e.g. "Technically Challenged" example), inherent language ambiguities may result in misaligned proposals. These findings suggest that LLMs can automatically tune public health allocation policies using only language-described preferences. Ultimately, while human input may be required to overcome ambiguities of language prompts, DLM allows a human decision-maker to monitor state-feature distributions and iteratively provide expert opinion to guide LLM-proposed policies.

**LLMs as feature extractors for reward proposal in resource allocation tasks**: We find LLMs can accurately extract relevant features from language-described resource allocation preferences. We demonstrate these results in Table 1. LLM-proposed rewards have consistently high precision and recall, effectively capturing the features used in the Base reward function. We find in some cases, for instance Task 15 (Technically Challenged), that ambiguous prompts (see Appendix Table 4) may lead to lower recall ability. Interestingly, however, we still observe reasonable performance in these cases (Figure 2), suggesting that DLM may identify potentially correlated substitute features even for challenging prompts. Note, additionally, that effective feature extraction does not necessarily imply the correct usage of features; however, the findings suggest that LLMs are effective at the first critical "filtering" step of reward design, particularly in our task of public health resource allocation.

### Limitations

We test our method in a purely simulated environment; any potential consideration of real-world deployment would require comprehensive field testing after approvals from relevant ethics boards. Additionally, we test with prompts in English; further testing in local (Indian) languages is required. Furthermore, whereas we present results on DLM with Chain-of-Thought (CoT) reasoning in Table 6, indicating no significant improvement due to CoT, we recognize that additional LLM reflection techniques have the potential to improve DLM. Finally, in any potential deployment of the proposed method, we expect that health experts should monitor state-feature distributions to intervene on proposed policies, ensuring safety and proper disambiguation of unclear input prompts.

### Ethical Considerations in the Use of DLM

Extending our discussion of the ethical considerations we take in developing DLM (Appendix A, B, C), we further consider the broader implications of algorithmic resource allocation, particularly in public health. We note the need for mitigating data bias in the health setting, especially to

  
**Task** & **0** & **1** & **2** & **3** & **4** & **5** & **6** & **7** \\ 
**Prec. (zeroshot)** & 0.49 \(\) 0.028 & 0.27 \(\) 0.016 & 0.93 \(\) 0.014 & 0.45 \(\) 0.022 & 0.81 \(\) 0.019 & 0.48 \(\) 0.017 & 0.07 \(\) 0.014 & 0.33 \(\) 0.017 \\
**Prec. (reflection)** & 0.54 \(\) 0.026 & 0.29 \(\) 0.015 & 0.87 \(\) 0.017 & 0.45 \(\) 0.022 & 0.84 \(\) 0.018 & 0.54 \(\) 0.016 & 0.11 \(\) 0.017 & 0.38 \(\) 0.015 \\ 
**Rec. (zeroshot)** & 0.72 \(\) 0.032 & 0.64 \(\) 0.034 & 1.00 \(\) 0.000 & 0.87 \(\) 0.024 & 0.89 \(\) 0.016 & 0.74 \(\) 0.025 & 0.11 \(\) 0.021 & 0.67 \(\) 0.027 \\
**Rec. (reflection)** & 0.84 \(\) 0.026 & 0.72 \(\) 0.032 & 1.00 \(\) 0.000 & 0.92 \(\) 0.020 & 0.94 \(\) 0.013 & 0.84 \(\) 0.020 & 0.107 \(\) 0.026 & 0.80 \(\) 0.020 \\ 
**Task** & **9** & **10** & **11** & **12** & **13** & **14** & **15** \\ 
**Prec. (zeroshot)** & 0.78 \(\) 0.018 & 0.41 \(\) 0.012 & 0.93 \(\) 0.014 & 0.87 \(\) 0.015 & 0.93 \(\) 0.012 & 0.97 \(\) 0.009 & 0.96 \(\) 0.010 & 0.04 \(\) 0.009 \\
**Prec. (reflection)** & 0.83 \(\) 0.015 & 0.42 \(\) 0.010 & 0.93 \(\) 0.013 & 0.84 \(\) 0.013 & 0.95 \(\) 0.011 & 0.96 \(\) 0.009 & 0.94 \(\) 0.011 & 0.06 \(\) 0.010 \\ 
**Rec. (zeroshot)** & 0.65 \(\) 0.015 & 0.46 \(\) 0.014 & 0.43 \(\) 0.013 & 0.97 \(\) 0.009 & 0.96 \(\) 0.009 & 0.98 \(\) 0.006 & 0.98 \(\) 0.006 & 0.09 \(\) 0.017 \\
**Rec. (reflection)** & 0.74 \(\) 0.013 & 0.51 \(\) 0.011 & 0.54 \(\) 0.015 & 0.98 \(\) 0.006 & 0.99 \(\) 0.004 & 1.00 \(\) 0.002 & 0.99 \(\) 0.005 & 0.13 \(\) 0.020 \\   

Table 1: Average precision/recall of features used in LLM-proposed reward functions compared to ground truth Base reward function. Comparison between zeroshot DLM (No Reflection) and DLM (Reflection). Cells in yellow showed improvement from Reflection with \(p<0.1\); cells in green showed improvement from Reflection with \(p<0.05\). Results indicate LLMs are very effective feature extractors for reward function generation. Furthermore, the Reflection module is particularly useful for improving recall rates, as 13/16 tasks showed significant recall improvement with Reflection.

minimize harmful discrimination for underrepresented groups , and to avoiding data bias by enabling participatory design , all key considerations we make in collaboration with our partner NGO for this work. We further highlight the importance of democratized decision-making criteria for algorithmic allocation techniques , as well as the importance of complete beneficiary autonomy through guaranteed consent and the opportunity to deny allocations , as we do in this work. Finally, one extension of this work that future studies may consider is to directly incorporate prior work in fairness guarantees in resource allocation settings .

## 6 Conclusion

In this paper we introduce a Decision-Language Model (DLM) for resource allocation in public health, which can take language prompts describing complex, potentially ambiguous public health policy goals as input, and generate downstream control policies specialized for such goals. We uniquely demonstrate, beyond existing work in LLMs for public health, the strength of LLMs to shape _principled, RMAB-based resource allocation strategies_, potentially enabling rapid community-driven policy adjustment in critical, resource-constrained public health settings. For all future work considering potential deployment, DLM enables health experts to monitor state-feature distributions to intervene on proposed policies and guide LLM generation to ensure safety.