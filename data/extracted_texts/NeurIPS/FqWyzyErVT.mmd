# Federated Transformer: Multi-Party Vertical Federated Learning on Practical Fuzzily Linked Data

Zhaomin Wu, Junyi Hou, Yiqun Diao, Bingsheng He

National University of Singapore, Singapore

zhaomin@nus.edu.sg,{junyi.h,yiqun,hebs}@comp.nus.edu.sg

###### Abstract

Federated Learning (FL) is an evolving paradigm that enables multiple parties to collaboratively train models without sharing raw data. Among its variants, Vertical Federated Learning (VFL) is particularly relevant in real-world, cross-organizational collaborations, where distinct features of a shared instance group are contributed by different parties. In these scenarios, parties are often linked using fuzzy identifiers, leading to a common practice termed as _multi-party fuzzy VFL_. Existing models generally address either multi-party VFL or fuzzy VFL between two parties. Extending these models to practical multi-party fuzzy VFL typically results in significant performance degradation and increased costs for maintaining privacy. To overcome these limitations, we introduce the _Federated Transformer (FeT)_, a novel framework that supports multi-party VFL with fuzzy identifiers. FeT innovatively encodes these identifiers into data representations and employs a transformer architecture distributed across different parties, incorporating three new techniques to enhance performance. Furthermore, we have developed a multi-party privacy framework for VFL that integrates differential privacy with secure multi-party computation, effectively protecting local representations while minimizing associated utility costs. Our experiments demonstrate that the FeT surpasses the baseline models by up to 46% in terms of accuracy when scaled to 50 parties. Additionally, in two-party fuzzy VFL settings, FeT also shows improved performance and privacy over cutting-edge VFL models.

## 1 Introduction

Federated Learning (FL) is a learning paradigm that enables multiple parties to collaboratively train a model while preserving the privacy of their local data . Among its various forms, Vertical Federated Learning (VFL)  is particularly prevalent form in real-world applications as highlighted in a recent technical report . In VFL, participants possess different features of the same set of instances, where common features, such as names or addresses, serve as _identifiers_ (a.k.a. _keys_) to link datasets across these parties.

Real-world applications often necessitate _multi-party fuzzy VFL_, characterized by two key attributes. First, it supports collaboration among _multiple parties_, commonly observed in collaborations across hospitals , sensors , and financial institutions . Second, it accommodates scenarios where these parties are linked using fuzzy identifiers, such as addresses. Such scenarios are prevalent in applications, as illustrated in an analysis  of the German Record Linkage Center . For instance, multiple vehicle rental companies that are fuzzily linked by source and destination addresses in the same city can collaborate to predict travel times.

To illustrate the significance of multi-party fuzzy VFL, consider the application of travel cost prediction in a city through collaboration among taxi, car, bike, and bus companies, as shown in Figure 1. Since personal travel information is private and cannot be shared, VFL is essential.

Additionally, route identifiers - starting and ending GPS locations - can only be linked using fuzzy methods. However, linking closely related source and destination points with multi-party fuzzy VFL can significantly enhance prediction accuracy.

Existing VFL approaches generally address either the multi-party aspect or the fuzzy identifier issue. Several methods  facilitate multi-party VFL using Private Set Intersection (PSI)  to link datasets. These methods often presume the existence of precise, universal keys, which are not feasible in common VFL scenarios involving fuzzy identifiers. Conversely, other studies  propose two-party fuzzy VFL models that utilize cross-party key similarities for training. However, when extended to multi-party fuzzy VFL, these similarity-based approaches encounter significant challenges in performance and privacy. While some methods achieve reasonable performance, they often compromise privacy or incur prohibitive costs.

Despite the potential of multi-party fuzzy VFL, several significant challenges must be addressed for effective implementation. First, as the number of parties with _fuzzy identifiers_ increases, maintaining performance becomes increasingly challenging. The addition of parties leads to a quadratic growth in the number of key pairs, an increase in incorrect linkages between fuzzy identifiers, and larger model sizes. These factors collectively heighten the risk of overfitting and adversely impact model performance. Second, the rising costs of preserving privacy intensify as more parties with _correlated data_ participate, leading to either significant computational costs  or accuracy loss . Third, in a collaboration of multiple parties, a communication bottleneck arises for the party with labels, termed the _primary party_. This party must communicate with all other parties without labels, termed _secondary parties_, in each training round, placing substantial demands on the primary party's bandwidth. These challenges significantly hinder the practical deployment of VFL.

To address these issues, we introduce the _Federated Transformer (FeT)_ to enhance performance and reduce privacy costs in multi-party fuzzy VFL. First, to tackle performance issues, we encode key similarities into data representations aligned by _positional encoding averaging_, which eliminates the need for quadratic calculations of key pairs. Additionally, we have designed a trainable _dynamic masking_ module that automatically filters out incorrectly linked pairs, enhancing model accuracy by up to 13% in 50-party fuzzy VFL on the MNIST dataset. Second, to mitigate the escalating costs of privacy protection, we introduce SplitAvg, a hybrid approach that merges encryption-based and noise-based methods, maintaining a consistent noise level regardless of the number of participating parties. Third, to alleviate communication overhead on the primary party, we implement a _party dropout_ strategy, which randomly excludes certain secondary parties during each training round. This effectively reduces communication costs by approximately 80% and improves model generalization. Our codes are available on GitHub1. In summary, our contributions are as follows:

* We design _Federated Transformer (FeT)_, a novel model achieving promising performance under multi-party fuzzy VFL.
* We introduce _SplitAvg_ to enhance the privacy of FeT by protecting local representations in multi-party fuzzy VFL, with a theoretical proof of its differential privacy.
* Experimental results demonstrate that FeT significantly outperforms baseline models by up to 46% in terms of accuracy in 50-parties VFL. Moreover, while providing enhanced privacy, FeT consistently surpasses state-of-the-art models even in traditional two-party fuzzy VFL scenarios.

Figure 1: Real application of multi-party fuzzy VFL: travel cost prediction in a city

Preliminaries

In this section, we provide the foundational concepts necessary for understanding our approach to differential privacy. Differential Privacy (DP) offers a rigorous mathematical framework for preserving individual privacy. It quantifies privacy in terms of the probability of producing the same output from two similar datasets that differ by exactly one record.

**Definition 1**.: _Consider a randomized function \(:^{d}\) and two neighboring databases \(D_{0},D_{1}^{d}\) that differ by exactly one record. For every possible output set \(O\), \(\) satisfies \((,)\)-differential privacy if_

\[[(D_{0}) O] e^{}[(D_{1}) O]+,\]

_where \( 0\) and \( 0\)._

A single query that adheres to differential privacy is termed a _mechanism_. For example, the Gaussian mechanism  is commonly used to achieve DP by adding Gaussian noise to the output of the function.

**Theorem 1** (Gaussian Mechanism ).: _For a function \(f:^{d}\) characterized by a global \(L_{2}\) sensitivity \(_{2}\), which signifies that the maximum difference in the \(L_{2}\)-norm of the outputs of \(f\) on any two neighboring databases is \(_{2}\), and for any \( 0\) and \(\), the Analytic Gaussian Mechanism is defined as \((x)=f(x)+Z\), where \(Z(0,^{2})\). This mechanism satisfies \((,)\)-differential privacy if \((}{2}-} )-e^{}(-}{2}-}),\) where \((t)=}_{-}^{t}e^{-x^{2}/2}dx\) is the cumulative distribution function (CDF) of the standard univariate Gaussian distribution._

When multiple queries are made on the same database, independent Gaussian noise is added to each query to maintain differential privacy. The privacy loss of the composition of Gaussian mechanisms is formulated in Theorem 2.

**Theorem 2** (Moments Accountant ).: _There exist constants \(c_{1}\) and \(c_{2}\) so that given the sampling probability \(q=\) and the number of steps \(T\), for any \(<c_{1}q^{2}T\), DPSGD  is \((,)\)-differentially private for any \(>0\) if we choose \(>c_{2}}{}.\)_

## 3 Related Work

Performance.Traditional VFL approaches [29; 7] are typically limited to two-party scenarios. In contrast, existing multi-party VFL methods [12; 51; 33; 52; 38; 21; 26] often rely on the assumption of precise identifiers that ensure perfect alignment across all parties. These methods generally employ the SplitNN framework , where each party maintains a portion of the model, and the models are collaboratively trained on well-aligned data samples through the transfer of representations and gradients, commonly known as split learning. However, the requirement for perfect data alignment is impractical in many real-world scenarios [50; 3], where identifiers are often imprecise.

To address this limitation, semi-supervised VFL [22; 30; 19; 20] has emerged, attempting to improve model performance by leveraging unlinked records through semi-supervised or self-supervised learning. However, these methods still assume that datasets from each party can be precisely linked using exact identifiers, a premise that is often untenable in real-world settings [50; 3]. Given that the quality of linkage significantly impacts VFL accuracy , exploring effective linkage methods remains a pivotal issue in VFL.

On the other hand, FedSim , based on real linkage projects at the German Record Linkage Center (GRLC) , acknowledges that the keys of each party are usually not precisely linkable and that records may have one-to-many relationships, leading to fuzzy linkage scenarios, as seen with keys like GPS addresses. FedSim enhances training performance by performing soft linkage and conducting training based on transmitted key similarities. Nonetheless, it faces limitations in scalability beyond two parties and introduces new privacy concerns by directly transferring similarities.

In summary, while existing studies face significant performance challenges when handling fuzzy keys in multi-party settings, our proposed FeT demonstrates a scalable design that addresses these challenges and shows promising performance improvements in both multi-party fuzzy VFL and two-party settings compared to FedSim.

Privacy.The privacy concerns associated with VFL are multifaceted. First, the primary party may infer data representations from secondary parties . Second, the secondary party may derive gradients from the primary party . Third, external attackers could conduct membership inference attacks  on the deployed model . This paper primarily addresses the second concern: safeguarding representations, while acknowledging other concerns as open challenges.

To address the privacy of representations in VFL, various methods have been proposed, falling into two primary categories: encryption-based methods and noise-based methods. Encryption-based methods  utilize computationally intensive cryptographic techniques to encrypt intermediate results. However, these methods often incur significant communication overhead when scaled to multiple parties. Conversely, noise-based methods  protect data by perturbing  or manipulating  local representations. These methods typically do not provide theoretical privacy guarantees or require substantial amounts of noise when scaling to multiple parties in VFL, which can degrade performance. Unlike existing studies that rely solely on either approach, this paper explores a combined strategy incorporating both encryption-based and noise-based methods, ensuring the model scales effectively to multiple parties without the need for excessive noise.

## 4 Problem Statement

In this section, we formalize the concept of multi-party fuzzy VFL. We consider a supervised learning task where one party holding labels, termed the _primary party_\(P\), collaborates with \(k\) parties that do not hold labels, referred to as the _secondary parties_. The primary party \(P\) possesses \(n\) data records denoted as \(^{P}:=\{x_{i}\}_{i=1}^{n}\) along with corresponding labels \(:=\{y_{i}\}_{i=1}^{n}\). Each secondary party \(S_{k}\) maintains its own dataset \(^{S_{k}}\). All parties share common features, referred to as identifiers, expressed as \(^{i}=[^{i},^{i}]\), where \([]\) signifies concatenation. These identifiers \(^{i}\) may exhibit inaccuracies and fuzziness, despite residing within the same range.

\[_{}_{i=1}^{n}(f(;x_{i}^{P},^{S_{1}},,^{S_{k}});y_{i})+()\]

In this formulation, \(()\) denotes the loss function, \(\) represents the model parameters, and \(()\) refers to the regularization term. The symbol \(n\) indicates the number of samples in the primary party \(P\).

**Threat Model.** This study focuses on defending feature reconstruction attacks , which target local representations shared with the primary party. FeT operates under the assumption that all participating parties are _honest-but-curious_, meaning they adhere to the protocol but may attempt to infer additional information about other parties. Furthermore, we assume that the parties do not collude with one another. While other forms of attacks, such as label inference attacks  and backdoor attacks aimed at compromising labels and gradients, exist, they are considered orthogonal to the objectives of this study. These additional threats will be explored in our future research.

## 5 Approach

In this section, we address the performance and communication challenges inherent in multi-party fuzzy VFL. To tackle these issues, we introduce a transformer-based architecture named the Federated Transformer (FeT). This model encodes keys into data representations, thereby reducing reliance on key similarities. To accurately exclude incorrectly linked data records, we propose a trainable dynamic masking module that generates masks based on keys. Furthermore, to combat overfitting caused by the large model and to alleviate communication bottlenecks faced by the primary party, we introduce a party dropout strategy that randomly invalidates some parties during training. Additionally, we identify a positional encoding misalignment issue across parties in the FeT and propose positional encoding averaging to ensure consistent alignment, thereby enhancing model performance.

### Model Structure

The architecture of the FeT is illustrated in Figure 2. In FeT, each secondary party has an encoder, while the primary party has both an encoder and a subsequent decoder. The internal structure of both the encoder and decoder closely adheres to the conventional transformer model . We utilize multi-dimensional positional encoding  to integrate key information into feature vectors. Outputs from the encoders at the secondary parties are aggregated and then fed into the decoder. Details regarding the privacy mechanisms employed during this aggregation phase are discussed in Section 6, while the details of the training process are elaborated in Section 5.2. We then elaborate on three techniques designed to improve performance and reduce communication costs.

Dynamic Masking.The size of the neighborhood varies significantly depending on the party and key values. Consequently, including a large number of neighbors \(K\) for all parties can hinder the model's ability to extract meaningful information and result in overfitting. To address this, we introduce a dynamic "key padding mask" in the transformer, generated from the identifier values using a trainable MLP. This approach allows the model to effectively disregard distant data records, thereby eliminating the influence of irrelevant data when \(K\) is large. This concept resembles the weight gate in FedSim, but it diverges by using identifiers as inputs instead of similarities, enhancing privacy by preventing the transmission of similarity data across parties.

The learned dynamic masking is visualized in Figure 3. We derive two key insights from the visualization: (1) Dynamic masking effectively focuses on a localized area around the primary party's identifiers. Data records with distant identifiers on secondary parties (in cooler colors) receive small negative mask values, reducing their significance in the attention layers - without accessing the primary party's original identifiers. (2) The focus area varies in scale and direction across samples: for example, the left figure concentrates on a small bottom area, the middle figure on a small top area, and the right figure on a broad area in all directions.

Party Dropout.Extending the Federated Transformer (FeT) to support multiple parties can be challenging for several reasons. First, the communication bandwidth required by the primary party becomes a significant bottleneck within the SplitAvg framework, increasing linearly with the number of parties. Second, the inclusion of many parties can result in an excessive number of parameters, which may lead to overfitting. To mitigate these issues, we introduce the concept of _party dropout_. Inspired by traditional dropout , we randomly set a portion \(r_{d}\) of the parties' representations to zero during training. This method serves as a form of regularization, thus helping to reduce overfitting, while also significantly cutting down on communication overhead. In our experiments, we demonstrate that increasing the party dropout rate to 0.8 leads to minimal accuracy loss and can

Figure 2: Structure of federated transformer (PE: multi-dimensional positional encoding)

even improve accuracy. Consequently, the communication overhead on the primary party can be reduced by up to 80%, enhancing scalability when dealing with large numbers of parties.

Like traditional dropout, it is crucial to maintain consistent scaling of the representations during both training and testing phases. This consistency is naturally achieved within the SplitAvg framework. During the averaging process, if a ratio \(r_{d}k\) of parties is set to zero, we adjust by dividing only by the number of non-zero parties, \((1-r_{d})k\). This method ensures that the scale of the averaged representations remains consistent across training and testing, regardless of the value of \(r_{d}\).

Positional Encoding Averaging.In positional encoding (PE), it is generally expected that the distances between encoded representations are positively correlated with the distances between identifiers. In FeT, each party employs its own encoder and PE layer, each tasked with encoding its local identifiers into representations. This configuration leads to significant PE misalignment issues, as illustrated in Figure 4. Although the identifiers and their corresponding encoded representations maintain a positive correlation within the PE layer of each party, there is almost no correlation between the identifiers and encoded representations across different parties. This lack of correlation causes integration issues and affects accuracy. However, directly sharing a PE layer among all parties is not viable due to privacy concerns. To address this, we propose positional encoding averaging.

Every \(T_{pe}\) epoch, the positional encoding layers are averaged and broadcast to all parties under a secure multi-party computation (MPC) scheme, akin to FedAvg  in horizontal federated learning . While the privacy of the transmitted model can be a concern, this issue is an orthogonal open problem in horizontal federated learning.

### Training

The FeT training process begins with employing Privacy-Preserving Record Linkage (PPRL)  to evaluate identifier similarities between the primary party \(P\) and each secondary party. Secondary parties each contribute a random subset for linkage (line 5). For each \(P\)'s record, \(K\) nearest neighbors within these subsets from secondary parties are determined (line 6). The training leverages data embeddings of dimensions \(B L H\), where \(B\) is batch size, \(L\) is the sequence length, and \(H\) is the hidden layer size, following the transformer architecture. In FeT's context, \(L=1\) for the primary and \(L=K\) for secondary parties, linking each primary record with \(K\) neighboring records from the secondaries. Identifiers are transformed into vectors using multi-dimensional positional

Figure 4: Misalignment of positional encoding (\(P_{0}\): primary party; \(P_{1} P_{3}\): secondary parties)

Figure 3: Learned dynamic masks of different samples: Each figure displays one sample (red star) from the primary party fuzzily linked with 4900 samples (circles) from 49 secondary parties. The position indicates the sample’s identifier, and colors reflect learned dynamic mask values. Larger mask values signify higher importance in attention layers.

encoding  and combined with data representations for processing via self-attention blocks (lines 7, 10). Secondary parties' representations are averaged under the MPC protocol. The primary party then employs attention blocks for forward propagation to compute the final prediction (line 13). Backpropagation sends gradient updates from the primary to secondary parties to refine their local models (lines 14-16). The privacy mechanism including norm clipping (lines 8, 11) and distributed Gaussian noise (line 12) are further discussed in Section 6.

``` Input : Primary party \(^{P}\), secondary parties \(^{S_{1}},,^{S_{k}}\), label \(\), noise scale \(\), sampling ratio \(q\), clipping threshold \(C\) Output : Local models \(_{l}^{P},_{l}^{S_{1}},,_{l}^{S_{k}}\) and aggregation model \(_{a}^{P}\)
1 Initialize model parameters \(_{a}^{P},_{l}^{P},_{l}^{S_{1}},,_{l}^{S_{k}}\)forepoch\(t[T]\)do
2forinstance\(x_{i}^{P}^{P}\) on primary partydo
3forparty\(h\{S_{1},,S_{k}\}\)do
4\(}^{h}\) randomly choose \(q\) ratio from \(^{h}\)
5\(}^{h}_{i}\) link \(K\) records with \(x_{i}^{P}\) from \(}^{h}\)
6\(}^{h}_{i} f(_{i}^{h};}^{h})\)\(}^{h}_{i}}^{h}_{i}/(1, }^{h}_{i}\|_{2}}{C})\)// Norm clipping
7
8 end for
9\(^{P}_{i} f(_{l}^{P};x_{i}^{P})\)\(}^{P}_{i}^{P}_{i}/(1, \|^{P}_{i}\|_{2}}{C})\)// Norm clipping
10\(_{i}\) MPCAvg \((^{S_{1}}_{i},,^{S_{k}}_{i},(0,C^{2 }^{2}))\)\(_{i} f(_{a}^{P};_{i})\)\(_{_{a}^{P}},_{i})}{_{a} ^{P}},\ _{a}^{P}_{a}^{P}-_{t}_{_{a}^{P}}\)forparty\(h\{P,S_{1},,S_{k}\}\)do
11\(_{_{l}^{h}},_{l})}{ _{a}^{h}},\ _{l}^{h}_{t}_{_{l}^{h}}\)
12
13 end for
14
15 end for ```

**Algorithm 1**Training Process of Federated Transformer

## 6 Privacy

In this section, we address the challenges of privacy in multi-party fuzzy VFL. First, the risk of transferring raw similarities has been mitigated by the design of the FeT itself. Second, to address the increasing costs when more parties join, we introduce a multi-party privacy-preserving VFL framework, _SplitAvg_, which is compatible with FeT. The architecture of SplitAvg is illustrated in Figure 5. SplitAvg integrates differential privacy (DP), secure multi-party computation (MPC) , and norm clipping to enhance the privacy of representations. Additionally, to further improve the utility of FeT under DP, we employ privacy amplification techniques that reduce the noise scales by incorporating random sampling.

### Differentially Private Split Neural Network - SplitAvg

This section outlines three techniques applied to the SplitAvg to improve privacy: representation norm clipping, privacy amplification, and MPC with distributed Gaussian noise. These strategies collectively protect the privacy of each secondary party's representations through differential privacy and ensure that privacy risks do not escalate with an increase in the number of parties due to MPC.

**Representation Norm Clipping.** The magnitude of the \(_{2}\)-norm is pivotal in determining the sensitivity of differential privacy. To limit the maximum change of the \(_{2}\)-norm, norm clipping is essential. Specifically, for a representation \(\), we ensure that \(\|\|_{2} C\), where \(C\) is a predefined positive real number. This is achieved by scaling \(\) by a factor of \(C\), formally, \(}=/(1,\|\|_{2}/C)\). Through this process, any representation \(\) with \(\|\|_{2}\) exceeding \(C\) is scaled to \(C\), while values of \(\|\|_{2}\) below \(C\) remain unaffected.

**Secure Multi-Party Computation with Distributed Gaussian Noise.** To address the challenges of applying differential privacy in multi-party VFL, we propose a method that integrates noise addition into the process of aggregating representations, facilitated through MPC. In this setup, each secondary party first independently conducts representation norm clipping to limit the scale of their data. Subsequently, these clipped representations, along with Gaussian noise \((0,/k^{2})\) independently generated by each of the \(k\) secondary parties, are aggregated through averaging under MPC. For the primary party, this aggregation is equivalent to adding independent Gaussian noise \((0,^{2})\) to the averaged result. The adoption of MPC in our framework ensures that the secondary parties do not need to individually add \((0,^{2})\) noise to their representations. Instead, as the primary party only has access to the averaged result under MPC, each secondary party can add a smaller amount of noise. This method effectively improves utility with a small efficiency cost due to MPC.

**Privacy Amplification by Secondary Subsampling.** This technique is specifically designed for FeT configurations. According to the principle of privacy amplification , applying a function to a randomly sampled subset of data enhances privacy compared to applying the same function to the entire dataset. By initiating linkage from a randomly sampled subset rather than the full dataset, the privacy parameters effectively shift from \((,)\) to \((q,q)\), where \(q<1\) represents the sampling rate. In FeT, the primary party typically selects subsets of candidate data records for training from each secondary party, targeting those with neighboring identifiers. By pre-sampling these subsets at a rate of \(q\) before conducting a k-nearest neighbors (kNN) search, we avoid processing the entire dataset, which in turn reduces the noise required to maintain the same privacy level.

### Privacy Guarantee

Our analysis of differential privacy focuses on a hypothetical global dataset linked using all secondary parties, denoted as \(^{S_{1}},,^{S_{k}}\). Since these datasets are correlated, removing one data record from this global dataset will result in changes to the representations in all secondary parties. Consequently, privacy loss accumulates across secondary parties without the use of MPC. However, with MPC, a single aggregated noise, formed by distributing smaller noise contributions among parties, can be added, effectively reducing the overall required noise. The privacy guarantee for these representations is formally articulated in Theorem 3, with the proof provided in Appendix A.

**Theorem 3**.: _For certain constants \(c_{1}\) and \(c_{2}\), given a sampling rate \(q\), the total number of epochs \(T\), and the number of batches \(B\) in each epoch, each representation \(^{S_{k}}\) achieves \((,)\)-differential privacy for all \(<c_{1}q^{2}T\), with any \(>0\), by selecting the standard deviation \(\) of the Gaussian noise mechanism as follows:_

\[>c_{2}}{}.\] (1)

## 7 Experiments

This section presents the experimental setup and results. We begin by outlining the experimental settings in Section 7.1, followed by an assessment of performance across varying numbers of parties and neighbors in Section 7.2. We then analyze the privacy of FeT in Section 7.3. Additionally, an ablation study is conducted in Appendix C to evaluate the contribution of each component to performance, including dynamic masking, party dropout, positional encoding, key fuzziness, and

Figure 5: Differentially private split-sum neural network

SplitAvg. The performance of FeT with exact key matching is assessed in Appendix D, while the computational and memory efficiency of MPC and training is evaluated in Appendix E. Privacy evaluation on two-party real datasets is included in Appendix F. Furthermore, FeT's performance under imbalanced feature splits across parties, based on VertiBench , is presented in Appendix G.

### Experimental Settings

Datasets.Our experiments utilize five datasets, including three real-world datasets: house, bike, and hdb, along with two high-dimensional datasets: gisette and MNIST. Detailed descriptions of these datasets can be found in Appendix B. To simulate multi-party fuzzy VFL, we partition the features equally and randomly among the parties. The primary party's feature dimensions are reduced to 4 using principal component analysis (PCA) to serve as universal keys. To create fuzzy linked scenarios, we add independent Gaussian noise with a scale of 0.05 to the keys of each party.

Baselines.We include three baselines in our experiments: (1) Solo: training only on the primary party; (2) Top1Sim: linking each data record in the primary party only with its most similar neighbor in the secondary parties; (3) FedSim : training on the top \(K\) neighboring data records.

### Performance

Two-party fuzzy VFL.In this experiment, we evaluate the performance of FeT in two-party settings without privacy mechanisms. The detailed results are presented in Table 1. Our experiments demonstrate that FeT consistently outperforms the leading two-party fuzzy VFL methods. Notably, this performance improvement is achieved while enhancing privacy protections, as FeT does not involve transferring similarity data.

Effect of Number of Neighbors \(K\).In this experiment, we assess the impact of the number of neighbors, \(K\), on FeT's performance by varying \(K\) from 1 to 100. The results are displayed in Figure 6. The FedSim baseline is trained using the optimal \(K\) value (i.e., 50 for hdb and 100 for house and bike). The figure reveals two key insights: First, FeT's performance improves as \(K\) increases, demonstrating its ability to filter useful information even as the number of unrelated data records grows. Second, FeT consistently outperforms all baselines at larger values of \(K\), highlighting its superiority in fuzzy VFL scenarios.

Effect of Number of PartiesIn this experiment, we assess FeT's performance in fuzzy VFL with various numbers of parties. Due to the absence of real multi-party VFL data, we employ synthetic data for our evaluations. We partition the features equally and randomly among the parties, reducing

  
**Algorithm** & **house** & **bike** & **hdb** \\  Solo & \(73.27 0.16\) & \(244.33 0.75\) & \(33.97 0.61\) \\ Top1Sim & \(58.54 0.35\) & \(256.19 1.39\) & \(31.56 0.21\) \\ FedSim & \(42.12 0.23\) & \(235.67 0.27\) & \(27.13 0.06\) \\  FeT & \(\) & \(\) & \(\) \\   

Table 1: Root Mean Squared Error (RMSE) on real-world two-party fuzzy VFL datasets

Figure 6: Effect of Different Number of Neighbors \(K\) on FeT Performance

the primary party's feature dimensions to 4 using PCA as the universal keys. To simulate fuzzy linked scenarios, we add independent Gaussian noise with a scale of 0.05 to the keys of each party.

Figure 7 shows that FeT generally outperforms the baselines, particularly with a larger number of parties. This advantage is attributed to Solo's lack of informative features and Top1Sim's noise-affected linkage. FedSim performs poorly as the top-1 linked secondary parties are unaware of the primary parties' keys, leading to misalignment in subsequent soft linkage and training steps. On the gisette dataset with \(k=10\), FeT and other models slightly underperform compared to Solo, likely due to overfitting given gisette's small size.

### Privacy

In this subsection, we analyze how the performance of FeT varies with different noise scales (\(\)) and sampling rates on secondary parties, demonstrating the impact of privacy constraints on its accuracy. The results are depicted in Figure 8. We observe three key points: First, a moderate sampling rate has a negligible effect on model performance and may even slightly improve performance (e.g., on the MNIST dataset) by reducing overfitting. Second, despite increasing noise levels and enhanced privacy guarantees, FeT consistently outperforms baseline models. Third, the \(-\) privacy-noise curves illustrate that solely adding Gaussian noise without MPC, even with advanced analysis theorems such as Renyi Differential Privacy (RDP) , would require much larger noise scales compared to our approach that integrates MPC.

## 8 Conclusion

In this study, we introduce the Federated Transformer (FeT), specifically designed to support multi-party VFL while effectively addressing critical challenges related to performance, privacy, and communication. Furthermore, we provide theoretical proof of FeT's differential privacy, ensuring that data representations remain protected from secondary parties. Notably, our experiments demonstrate that FeT surpasses baseline models, even under stringent privacy guarantees and within the traditional two-party setting, establishing its efficacy and robustness in complex federated environments.

**Broader Impact.** The architecture of FeT, even without privacy mechanisms, has potential applications in multimodal learning. Multimodal tasks often require the alignment of data records across different modalities, which can be quite challenging. For instance, aligning 24Hz video streams with 48kHz audio tracks is complex, as each video frame may correspond to a range of audio samples. FeT has shown its capability to effectively learn from such fuzzily aligned data. Furthermore, the transformer model has proven effective across various data types, including images, text, and tabular data, highlighting FeT's suitability for multimodal learning applications.

Figure 8: Impact of noise scale \(\) on FeT accuracy and relationship between \(\) and \(\) under 10-party fuzzy VFL (RDP: without MPC, privacy loss calculated by Rényi differential privacy)

Figure 7: Impact of number of parties on FeT performance