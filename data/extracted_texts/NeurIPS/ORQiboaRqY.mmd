# On the Power of Small-size Graph Neural Networks

for Linear Programming

 Qian Li1,2,*, Tian Ding1,2,*, Linxin Yang2,3,*, Minghui Ouyang4, Qingjiang Shi5, Ruoyu Sun1,2,3,\({}^{1}\)

\({}^{1}\) Shenzhen International Center For Industrial And Applied Mathematics, Shenzhen, China

\({}^{2}\) Shenzhen Research Institute of Big Data, Shenzhen, China

\({}^{3}\) School of Data Science, The Chinese University of Hong Kong, Shenzhen, China

\({}^{4}\) Peking University, Beijing, China

\({}^{5}\) Tongji University, Shanghai, China

These authors contributed equally to this work.Corresponding Author. Email:sunruoyu@cuhk.edu.cn

###### Abstract

Graph neural networks (GNNs) have recently emerged as powerful tools for addressing complex optimization problems. It has been theoretically demonstrated that GNNs can universally approximate the solution mapping functions of linear programming (LP) problems. However, these theoretical results typically require GNNs to have large parameter sizes. Conversely, empirical experiments have shown that relatively small GNNs can solve LPs effectively, revealing a significant discrepancy between theoretical predictions and practical observations. In this work, we aim to bridge this gap by providing a theoretical foundation for the effectiveness of smaller GNNs. We prove that polylogarithmic-depth, constant-width GNNs are sufficient to solve packing and covering LPs, two widely used classes of LPs. Our proof leverages the capability of GNNs to simulate a variant of the gradient descent algorithm on a carefully selected potential function. Additionally, we introduce a new GNN architecture, termed GD-Net. Experimental results demonstrate that GD-Net significantly outperforms conventional GNN structures while using fewer parameters.

## 1 Introduction

Learning to Optimize (L2O) has emerged as a compelling research area, leveraging machine learning techniques to enhance the efficiency of optimization processes. Unlike traditional theory-driven optimization methods, L2O approaches are primarily data-driven, learning optimization strategies from existing problem instances. This new paradigm has yielded notable advancements in both continuous optimization  and combinatorial optimization [4; 21].

Recently, graph neural networks (GNN) have become increasingly popular in the field of L2O [6; 27]. GNNs are a class of neural networks specifically designed to process and analyze data structured as graphs, leveraging the relationships between nodes to perform tasks such as node classification, link prediction, and graph classification . Due to their properties of permutation equivariance and natural adaptation to varying input dimensions, GNNs are well-suited for graph-related optimization problems such as minimum vertex covering  and traveling salesman . Recent research has demonstrated that GNNs can effectively accelerate the solving process for both linear programming (LP) and mixed integer linear programming (MILP) problems, which are among the most important and widely applied types of optimization problems. For instance, Li et al.  proposed a GNN-based reformulation method for LP to enhance the solver performance. Furthermore, Chen et al.  andQian et al.  explored the potential of GNNs to approximate the solution mapping of LP and reported encouraging results. Additionally, several studies have proposed various approaches to guide MILP solvers with GNNs [10; 11; 14; 18; 26; 32].

Despite the numerical success, the theoretical foundation of using GNN to solve optimization problems remains less clear. Initial steps towards a theoretical understanding have been made by Chen et al.  and Qian et al. . They demonstrated that with a sufficient number of parameters, GNNs can approximate the solution mapping of LPs with arbitrary precision. However, a significant gap persists between the theoretical progress and empirical evidence. The proof in  relies heavily on the universal approximation theorem for multi-layer perceptions (MLP), which necessitates a large number of parameters in principle. Similarly, the result of  requires the depth of GNN to be polynomial in the problem dimension. In practice, however, GNN with a modest width and fewer than ten layers often suffice to achieve good performance in approximating the optimal solution of LP with hundreds of nodes and constraints.

This gap between theory and practice raises an intriguing open question:

_When and why can small-size GNNs effectively solve LPs?_

As larger networks usually require more training examples and higher computational resources, addressing this question is not only of theoretical interest but also provides potential guidance to L2O practitioners. While current GNNs may not yet rival theoretically grounded LP solvers in precision, they could still accelerate LP solving by providing high-quality initializations to warm-start traditional solvers. Understanding the principles behind the success of small-sized GNNs can potentially lead to more parameter-efficient models, thus reducing the computational resources required for LP solving. Moreover, these insights could potentially enhance MILP solvers. Specifically, the leading approach for MILP is the branch-and-bound framework, which involves selecting variables and dividing the search space. A prevalent variable selection approach is strong branching, where variables are scored by solving associated LPs to guide the branching decisions. Researchers have exploited GNNs to score these variables, with GNNs essentially solving the associated LPs [9; 10; 11; 23; 31]. By uncovering the mechanism behind the success of small-sized GNNs in solving LPs, these models could be further improved, leading to more efficient MILP solving.

### Our contribution

In this paper, we show that _polylogarithmic-depth constant-width_ GNNs can approximate the solution mapping for a broad class of LPs, namely packing LPs and covering LPs, with arbitrary precision (Theorem 3 and Theorem 5). This result advances previous theoretical results on general LPs [8; 29], narrowing the gap between existing theoretical progress and empirical evidence.

Packing and covering LPs and their norm form.A _packing LP_ and its dual _covering LP_ are nonnegative LPs of the canonical form: \(\{^{T}, 0\}\) and \(\{^{T}^{T}, 0\}\) respectively. Here, \(_{ 0}^{n m}\), \(_{ 0}^{n}\), and \(_{ 0}^{n}\). Packing LPs and covering LPs are broad classes of linear programming problems that can be used to approximate or relax a wide range of fundamental problems in combinatorial optimization. They include fractional versions of the vertex cover problem, the set cover problem, the hypergraph matching problem, the dominating set problem, and the maximum independent set problem. Without loss of generality, we assume the packing and covering LPs are presented in their _normal form_, where the vectors \(\) and \(\) are all-ones vectors and \(A_{ij}\) is either zero or greater than 1. The details of the reduction to the normal form can be found in the appendix.

Our results.We present a new theoretical explanation of the phenomenon that small-size GNNs can solve general packing LPs and covering LPs, by unrolling gradient descent algorithms. Specifically, we first propose a variant of the gradient descent (GD) algorithm proposed by Awerbuch and Khandekar  for solving packing and covering LPs (Algorithms 1 and 2), so that our variant can be more naturally simulated by GNNs, where one iteration of the algorithm can be simulated by one GNN layer of constant width. Importantly, our variant of GD is guaranteed to output a \((1+)\)-approximate solution in \((mnA_{}/)\) iterations. Therefore, we affirm the feasibility of solving general packing and covering LPs with _polylogarithmic-depth constant-width_ GNNs. Here, we remark that the polylogarithmic dependency on depth is also necessary. Specifically, Kuhn etal.  showed that: for the fractional maximum matching problem, a special kind of packing LP, every constant-factor approximation distributed algorithm requires at least \(()\) rounds. Moreover, since one layer of GNNs can be naturally simulated by one round of distributed LP algorithms (see, e.g., the second paragraph on page 5 in ), we conclude that GNNs need at least \(()\) layers.

Building on our theoretical proof, we propose a new GNN architecture, termed GD-Net, for solving packing and covering LPs. We empirically demonstrate that, when appropriately trained, GD-Net can effectively adapt to given problem instance distributions. Experiments across various datasets demonstrate that GD-Net outperforms classical graph convolutional network (GCN), a predominant GNN architecture in L2O for LP and MILP solving. Specifically, GD-Net generates better solutions with an order of magnitude fewer parameters than GCN. These performance enhancements become increasingly significant as the problem dimensions expand. The numerical success of GD-Net not only corroborates our theoretical framework but also suggests a potential direction for designing more parameter-efficient GNNs for L2O. This direction involves developing architectures that can simulate well-established, theoretically grounded algorithms, potentially leading to improvements in both computational efficiency and solution quality.

### Related works

The design of GD-Net is based on the concept of unrolling iterative algorithms as GNNs. Indeed, there is a body of research that has explored this approach. For example, Velickovic et al.  investigated solving basic graph problems (e.g., the shortest path, the minimum spanning tree) by GNNs. By unrolling classical graph algorithms (e.g., breadth-first search, Prim's algorithm) as GNNs, they suggest that message-passing neural networks with a maximization aggregator may be best suited for such graph problems. Aiming at mitigating oversmoothing, long-range dependencies, and spurious edges issues of GNNs, Yang et al.  proposed a new family of GNN layers by unrolling and integrating the update rules of two classical iterative algorithms, namely the proximal gradient descent and iterative reweighted least squares. Papers [20; 38] showed that many existing GNN models (such as GCN, GAT, APPNP) can be viewed as unrolling gradient descent serving specific graph signal denoising problems. Chen et al.  proposed new GNNs to improve graph signal denoising by unrolling sparse coding and trend filtering algorithms. Papers [24; 39; 37] bridge the gap between graph convolution and iterative algorithms by providing a unified optimization framework for GNNs.

## 2 Gradient descent algorithm for packing and covering LPs

Throughout the paper, we use boldface to represent vectors or matrices, e.g., \(\) and \(\). Let \(_{p q}\) denote the \(p q\)-dimensional all-ones matrix, and \(_{p}\) denote the \(p\)-dimensional all-ones column vector. Similarly, we can define \(_{p q}\) and \(_{p}\).

Algorithm for packing LPs.Awerbuch and Khandekar  proposed a simple \((1+)\)-approximation algorithm for packing LPs of the normal form:

\[\{^{T}, 0\}\] (1)

where \(A_{ij},b_{i},c_{j}\) are all non-negative and \(A_{ij}\) is either 0 or \( 1\). The algorithm is described as follows: given parameters \(=}{}\), \(=\), \(=\), and \(=}\);

- Start with \(:=_{m}\); Then, repeat the following procedure:

1. \(y_{i}:=[(_{i}-1)]\) for each \(i[n]\);
2. For any \(j[m]\) do 1. If \(_{j}^{T} 1-\), then \(x_{j}:=\{x_{j}(1+),\}\); 2. If \(_{j}^{T} 1+\), then \(x_{j}:=x_{j}(1-)\).

The intuition behind this algorithm is that it can be viewed as applying gradient descent on a carefully chosen potential function defined as

\[_{p}()=_{i=1}^{n}()}{}-_{j=1}^{m}x_{j}=_ {i=1}^{n}-1)]}{}-_{j=1}^{m}x_{j},\]

which enjoys the following nice properties : (i) \(_{p}()\) is differentiable and convex; (ii) \(_{p}()=^{T}\); and (iii) any stationary point of \(_{p}\) is a nearly optimal solution to the packing LP (1): For any \(\) where \(_{p}()=0\), \(\) is feasible and \(^{T}(1-4)\). It turns out that this algorithm has _polylogarithmic convergence_. Precisely, given any \(>0\), this algorithm always maintains a feasible solution (i.e. \( 0\) and \(\) always hold), and returns a \((1+)\)-approximation solution to the packing LP (1) in \((^{2}(mA_{max})^{2}(nA_{})/^{5})\) iterations. Here \(\) hides lower order terms like \((mnA_{})\) and \((1/)\).

Algorithm for covering LPs.In the same paper , Awerbuch and Khandekar also considered solving the dual covering LP of the normal form

\[\{^{T}^{T}, 0\},\] (2)

and designed the following algorithm: given \(:=}{}\), \(=\), \(=\), and \(=}\),

- Start with \(:=_{n}\); Then repeat the following procedure:

1. \(x_{j}:=[(1-_{j}^{T})]\) for each \(j[m]\);
2. For any \(i[n]\) do 1. If \(_{i} 1+\), then \(y_{i}:=\{y_{i}(1+),\}\); 2. If \(_{i} 1-\), then \(y_{i}:=y_{i}(1-)\).

Similarly, this algorithm can also be thought of as applying a variant of gradient descent on a carefully selected potential function :

\[_{c}()=_{j=1}^{m}()}{}+_{i=1}^{n}y_{i}= _{j=1}^{m}_{j}^{T})]}{}+_{i=1}^{n}y_{i},\]

which satisfies that: (i) \(_{c}()\) is differentiable and convex; (ii) \(_{c}()=-\); and (iii) for any \(\) where \(_{d}()=0\), \(\) is feasible and \(^{T}(1+4)\). This algorithm was shown to enjoy polylogarithmic convergence as well . Formally, this algorithm always maintains a feasible solution (i.e. \( 0\) and \(^{T}\) always hold), and returns a \((1+)\)-approximation solution to the covering LP (2) in \((^{2}(nA_{max})^{2}(mnA_{})/^{5})\) iterations.

A variant of Awerbuch-Khandekar algorithms.We propose a variant of the Awerbuch-Khandekar algorithms, specifically Algorithm 1 for solving packing LPs (1) and Algorithm 2 for covering LPs (2). The motivation and advantage of our variant is that it can be simulated more naturally by GNNs.

Basically, we replace \(x_{j}\{x_{j}(1+),\}\) with \(x_{j} x_{j}(1+)+\) in their algorithm for packing LPs, and \(y_{j}\{y_{j}(1+),\}\) with \(y_{j} y_{j}(1+)+\) in their algorithm for covering LPs. Through almost the same proof, one can verify that the polylogarithmic convergence still holds.

**Theorem 1**.: _Algorithm 1 always maintains a feasible solution and returns a \((1+)\)-approximation solution to the packing LP (1) in \((^{2}(mA_{max})^{2}(nA_{})/^{5})\) iterations._

_Algorithm 2 always maintains a feasible solution and returns a \((1+)\)-approximation solution to the covering LP (2) in \((^{2}(nA_{max})^{2}(mnA_{})/^{5})\) iterations._

Connection to GNN.For LPs, an instance can be naturally encoded as a labeled bipartite graph [1; 3; 15; 25], where (a) a left node represents a variable, (b) a right node represents a constraint (and equivalently, the associated dual variable), and (c) a left node and a right node are connected if the corresponding variable participates the corresponding constraint. In our GD algorithms, the matrix-vector multiplication \(\) (or \(^{T}\)) can be interpreted as a message passing step from left nodes to right nodes (or from right nodes to left nodes). In the next sections, we will demonstrate how one iteration of our GD algorithms can be transformed into a single layer of GNN.

## 3 Design of packing GD-Net

By combining the idea of Algorithm 1 and techniques from graph neural networks, we design a graph neural network architecture, named packing GD-Net, for solving packing LPs.

One iteration of Algorithm 1 consists of two steps: first, the algorithm updates \(\) from \(\), and calculates the gradient \(_{p}()=^{T}-\); second, using \(_{p}()\), it applies a variant of gradient descent to update \(\). Our packing GD-Net modifies the second step by replacing it with a learnable neural network block, while leaving the first step unchanged. Thus, the packing GD-Net can also be viewed as utilizing a neural network block to accelerate the convergence of the gradient descent.

ELU activation for \(\)-update.We apply the Exponential Linear Unit (ELU) activation function to replicate the \(\)-update: \(y_{i}^{k}=[(_{i}^{k}-1)]\). We will fix the parameter \(\) in \(\) to \(1\), then \((t)+1=(t)\) for \(t 0\). In addition, as mentioned in Theorem 1, \(_{i}^{k}-1 0\) always holds in the execution of Algorithm 1. Thus the ELU function can exactly replicate the \(\)-update. Specifically, our packing GD-Net updates \(\) as follows:

\[y_{i}^{k}:=(_{i}^{k}-1)+1.\] (3)

Since \(\) is fixed to 1 and \(\) is fixed to \(}{}\), no learnable parameters are involved here.

Learnable gradient descent procedure.The gradient descent in Algorithm 1 can be rewritten as

\[x_{j}^{k+1}:= x_{j}^{k}+f(_{j}^{T}^{k}-1) x_{j}^{k} +g_{j}^{T}^{k}-1=x_{j}^{k}+f(_{p}/  x_{j}) x_{j}^{k}+g_{p}/ x_{j} \]where \(f,g:\) are sums of Heaviside step functions defined as:

\[f(t)=,&t-;\\ 0,&- t;\\ -,&t. g(t)=,&t-;\\ 0,&\] (4)

As the Heaviside step function can be naturally approximated by the sigmoid function \((t)=\), the packing GD-Net adopts the following learnable functions as substitutes for \(f\) and \(g\):

\[f_{^{k}}(t)=_{=1}^{L_{1}}[_{,1}^{k} (_{,2}^{k} t+_{,3}^{k})+_{,1}^{k} (_{,2}^{k} t-_{,3}^{k})-_{,1}^{ k}]\] (5)

and

\[g_{^{k}}(t)=_{=1}^{L_{2}}_{,4}^{k}[ (_{,5}^{k} t+_{,6}^{k})-(_{,6} ^{k})].\] (6)

Note that it is guaranteed that \(f_{^{k}}(t)=-f_{^{k}}(-t)\), in particular \(f_{^{k}}(0)=0\), and \(g_{^{k}}(0)=0\). So if the packing GD-Net reaches a stationary point of \(_{p}\), it will remain there. Additionally, the packing GD-Net applies the ReLU activation to keep \(x_{j}^{k} 0\).

Channel expansion and architecture of packing GD-NetWe integrate the channel expansion technique to further strengthen the expressive power. Specifically, we expand the \(m\)-dimensional column vector \(^{k}\) into a \((m d)\)-dimensional matrix \(^{k}\), and \(n\)-dimensional column vector \(^{k}\) into a \((n d)\)-dimensional matrix \(^{k}\). Now, we are ready to present the packing GD-Net architecture:

- Initialize \(^{0}:=_{m d}\) and \(^{0}=_{n d}\).

- For \(k=0,1,2,,K-1\)

* \(^{k}:=(_{i}^{k}-_{n d })+_{n d}\).
* \(^{k+1}=(\{^{k}+f_{^{k}} ^{T}^{k}-_{m d}^{k}+g_{ {}^{k}}[^{T}^{k}-_{m d}]\} ^{k})\).

- Output \(^{final}:=^{K}^{K}^{m}\).

Here, \(\) denotes entry-wise multiplication (a.k.a. Hadamard product), and \(f_{^{k}},g_{^{k}}:\) are applied entrywise to the matrix \(^{T}^{k}-_{m d}\). The learnable parameter is \(:=\{^{k},^{k}\}_{k=0}^{K-1}\{^{K}\}\), where \(^{k}=\{_{,1}^{k},_{,2}^{k},_{,3}^{k} \}_{=1}^{L_{1}}\{_{,4}^{k},_{,5}^{k},_{, 6}^{k}\}_{=1}^{L_{2}}\), \(^{k}^{d d}\), and \(^{K}^{d 1}\). So the total number of parameters is \(K(d^{2}+3L_{1}+3L_{2})+d\). The following theorem reveals the ability of the packing GD-Net to reproduce Algorithm 1 with arbitrarily small precision.

Figure 1: The architectures of a single layer in packing (left) and covering (right) GD-Nets. Learnable parameters are colored in red.

**Theorem 2**.: _Given any network depth \(K\), any network width \(d 1\), and any precision \(>0\), there exists a \(K\)-layer packing GD-Net with a specific choice of parameters such that, for any packing LP instance (1), \(\|^{final}-^{alg}\|\). Here, \(^{alg}\) is the output of \(K\)-iteration Algorithm 1._

By combining Theorems 1 and 2, we conclude that the packing GD-Nets with polylogarithmic depth and constant width are sufficient to solve packing LPs.

**Theorem 3**.: _Given any \(>0\) and \(>0\), there exists a packing GD-Net of \((^{2}(mA_{max})^{2}(nA_{})/^{5})\) depth and constant width, using the parameter assignment \(_{}\), that satisfies the following condition: For any packing LP instance (1), \(^{final}\) is \(\)-close to being a \((1+)\)-approximate solution._

**Remark 1**.: _We can establish a similar theorem with general-purpose GNNs (such as GCNs) where we can still derive polylogarithmic depth in the bound but constant width is no longer guaranteed. Specifically, by the universal approximation theorem, the \(\) function can be simulated with arbitrary precision by a 2-layer and sufficiently wide perceptron. So if we replace each occurrence of \(\) with this 2-layer perceptron, we then obtain a GCNs. Note that this GCN still has polylogarithmic depth but the required width is no longer a constant._

Network training.The training data set is a set \(=\{(,^{*})\}\) of packing LP instances in the normal form. More specifically, the input of an instance is identified by the constraint matrix \(\), with \(\) and \(\) being both all-ones vectors; the label \(^{*}\) represents the corresponding optimal solution. Let \(^{final}(,)\) denote the output of the packing GD-Net parameterized by \(\) running on the input \(\). The goal of the training process is to find a parameter \(^{*}\) minimizing loss function defined as:

\[_{p}(;)=|}_{(A, {x}^{*})}\|^{final}(,)-^{*}\|^{2}.\]

Feasibility resorotation.Note that the \(^{final}\) returned by packing GD-Net may be infeasible. To restore feasibility, we implement the following post-processing procedure:

- First, for each \(j[m]\), update \(x_{j}:=(0,(1,x_{j}))\);

- Then, for \(i=1\) to \(n\) do

* If \(_{i} 1\), then update \(x_{j}:=}{_{i}}\) for each \(j\) with \(A_{ij} 0\).

## 4 Design of covering GD-Net

In one iteration of Algorithm 2, the process begins by updating \(\) from \(\), followed by the calculation of the gradient \(_{d}()=-\). Finally, it applies a variant of gradient descent to update \(\). Our covering GD-Net retains the original \(\)-update and gradient-calculation modules, but replaces the gradient descent with a learnable neural network block to accelerate convergence.

Architecture of covering GD-Net.Similarly, we substitute the ELU activation with \(\) fixed to 1 for the \(()\) function, and replace the \(\)-update \(x_{j}^{k}=[(1-_{j}^{T}^{k})]\) with

\[x_{j}^{k}:=(1-_{j}^{T}^{k})+1.\] (7)

As we will show in Theorem 4, (7) can exactly simulate the \(\)-update in Algorithm 2.

The gradient descent procedure in Algorithm 2 can be rewritten as

\[y_{i}^{k+1}:= y_{i}^{k}+f(1-_{i}^{k}) y_{i}^{k}+g 1-_{i}^{k}=y_{i}^{k}+f(_{d}/  y_{i}) y_{i}^{k}+g_{d}/ y_{i} \]

where \(f,g:\) are the same functions as those defined in (4) for packing GD-Net. So, in the covering GD-Net, we also substitute \(f\) and \(g\) with the learnable functions \(f_{^{k}}\) and \(g_{^{k}}\) defined in (5) and (6) respectively. In addition, we also apply \(\) to keep \(y_{i}^{k} 0\).

Besides, the channel expansion technique is also incorporated: similarly, we expand \(^{k}^{m}\) into \(^{k}^{m d}\), and \(^{k}^{n}\) into \(^{k}^{n d}\). Then, we propose our covering GD-Net architecture:

- Initialize \(^{0}:=_{n d}\) and \(^{0}=_{m d}\).

- For \(k=0,1,2,,K-1\)* \(^{k}:=(_{m d}-^{T}^{k}) +_{m d}\);
* \(^{k+1}=(\{^{k}+f_{^{k}} _{n d}-^{k}^{k}+g_{ ^{k}}[_{n d}-^{k}]\}^{k} ).\)

- Output \(^{final}:=^{K}^{K}^{n}\).

The learnable parameter is \(:=\{^{k},^{k}\}_{k=0}^{K-1}\{^{K}\}\), where \(^{k}=\{^{k}_{,1},^{k}_{,2},^{k}_{,3 }\}_{=1}^{L_{1}}\{^{k}_{,4},^{k}_{,5},^{k}_{ ,6}\}_{=1}^{L_{2}}\), \(^{k}^{d d}\), and \(^{K}^{d 1}\). So the total number of parameters is \(K(d^{2}+3L_{1}+3L_{2})+d\), the same as in packing GD-Net.

**Theorem 4**.: _Given any network depth \(K\), any network width \(d 1\), and any precison \(>0\), there exists a \(K\)-layer covering GD-Net with a specific choice of parameters such that, for any covering LP instance (2), \(\|^{final}-^{alg}\|\). Here, \(^{alg}\) is the output of \(K\)-iteration Algorithm 2._

Theorems 1 and 4 together imply the capacity of polylogarithmic-depth constant-width covering GD-Nets for solving covering LPs.

**Theorem 5**.: _Given any \(>0\) and \(>0\), there exists a covering GD-Net of \((^{2}(nA_{max})^{2}(mnA_{})/^{5})\) depth and constant width, using the parameter assignment \(_{}\), that satisfies the following condition: For any covering LP instance (2), \(^{final}\) is \(\)-close to being a \((1+)\)-approximate solution._

**Remark 2**.: _Similar to Remark 1, we can establish a similar theorem with general-purpose GNNs where the polylogarithmic bound on the depth still holds but constant width is no longer guaranteed._

Network training.The training dataset is a set \(=(,^{*})\) consisting of instances where \(^{*}\) is the optimal solution to the covering LP (2) with constraint matrix \(\). The goal of the training process is to find a parameter \(^{*}\) minimizing the following loss function:

\[_{c}(;):=|}_{(A, {y}^{*})}\|^{final}(,)-^{*}\|_{2}^ {2},\]

Feasibility resorotation.Since the \(^{final}\) may be infeasible, we implement the following post-processing procedure to restore feasibility:

- First, for each \(i[n]\), update \(y_{i}:=(0,(1,y_{i}))\);

- Then, for \(j=1\) to \(m\) do

* If \(_{j}^{T} 1\), then update \(y_{i}:=}{_{j}^{T}}\) for each \(i\) with \(A_{ij} 0\).

## 5 Experimental study

### Experimental Setup

Datasets.We utilized four LP relaxations of publicly available mixed-integer optimization instances as benchmarks. Specifically, we included the Maximal Independent Set (IS), Packing Problem (Packing), Edge Covering Problem (ECP), and Set Covering (SC). The problem definitions are adopted from [9; 29]. Each benchmark comprises four sets of problem instances with varying sizes, including one set designated for the generalization experiment. Detailed information regarding the problem sizes and data splitting ratios can be found in the appendix.

To construct datasets for training, each instance \(M_{i}\{^{i},^{i},^{i}\}\) undergoes normalization to \(_{i}\{}^{i},_{n},_{m}\}\). Subsequently, via the optimization solver SCIP , we obtain the optimal solution and optimal objective value pair \(\{^{i},_{i}^{*}\}\) for each instance \(_{i}\). Finally, we utilize the input-target pair to compose the dataset \(\{}^{i},^{i}\}_{i=1}^{|M|}\).

Models and Training settings.For comparison, our experiments also include the graph convolutional network (GCN), a predominant GNN architecture in L2O for LP and MILP. Specifically,we adopt the GCN implementation from , which is tailored for predicting the optimal solutions for LPs. Both the GCN and the proposed GD-Net utilize a four-layer architecture with 64 hidden units in each layer. Consequently, the number of parameters is 1,656 for GD-Net and 34,306 for GCN. Note that our GD-Net has an order of magnitude fewer parameters compared to GCN. For GD-Net, we set \(=0.2\). All models were trained using a learning rate of \(10^{-3}\). We trained each model for 10,000 epochs, and the checkpoint with the lowest validation loss was saved for evaluation. For reproducibility, our code to conduct the experiments can be found at https://anonymous.4open.science/r/GD-Net-GFC7/.

Metrics.To effectively evaluate the GNN's ability to solve LP problems, we employed two distinct metrics: the relative gap R. Gap \(=|_{i}-obj_{i}^{*}|/obj_{i}^{*}\) and the absolute gap (A. Gap \(=|_{i}-obj_{i}^{*}|\)), where \(_{i}\) denotes the predicted objective value of the respective approach after feasibility restoration.

### Comparing against GCNs

In this section, we assess the effectiveness of the proposed GD-Net and the GCNs adopted from  in predicting the optimal solution for LP problems. As shown in Table 1, we report relative and absolute gaps, along with validation and test errors, to evaluate the quality of solutions generated by each model.

The results indicate that GD-Net typically achieves narrower gaps compared to GCNs. Even in instances where GD-Net does not surpass GCNs, the performance discrepancy remains minimal, which is noteworthy given GD-Net's significantly fewer parameters. Notably, in scenarios like Packing-L, although GD-Net records a higher test error, it still outperforms GCNs. This suggests that GD-Net may better capture the structural nuances of the problem. Overall, GD-Net generally demonstrates superior performance over conventional GCNs.

### Generalization to larger instances

In this section, we evaluate the generalization capability of our proposed GD-Net, trained on smaller instances, to larger problem domains. We train GD-Nets on the largest dataset available for each problem and subsequently test these models on problem instances with \(10\%\) more constraints and variables. Table 2 presents the results, showcasing relative and absolute gaps, along with validation and test errors. The results reveal that GD-Nets possess a notable ability to generalize to larger problem instances with only minimal performance degradation. This suggests robustness in handling increased problem complexity, underscoring the adaptability and scalability of the proposed GD-Nets.

    &  &  &  \\   & & V. Err & T. Err & R. Gap & A. Gap & V. Err & T. Err & R. Gap & A. Gap \\   & S & 0.062 & 0.062 & **4.41\(\%\)** & 1.478 & 0.145 & 0.122 & 15.46\(\%\) & 5.155 \\  & M & 0.156 & 0.135 & **3.55\(\%\)** & 12.201 & 0.156 & 0.135 & 16.18\(\%\) & 55.318 \\  & L & 0.085 & 0.085 & **6.84\(\%\)** & 43.073 & 0.154 & 0.131 & 15.35\(\%\) & 96.785 \\   & S & 3.40E-4 & 3.39E-4 & **16.53\(\%\)** & 0.184 & 2.7E-4 & 2.6E-4 & 19.50\(\%\) & 0.220 \\  & M & 6.53E-4 & 6.53E-4 & **10.68\(\%\)** & 0.118 & 5.05E-4 & 5.09E-4 & 10.69\(\%\) & 0.118 \\  & L & 2.18E-4 & 2.20E-4 & **7.35\(\%\)** & 0.082 & 1.69E-4 & 1.69E-4 & 7.37\(\%\) & 0.082 \\    & S & 0.099 & 0.097 & **7.84\(\%\)** & 1.478 & 0.173 & 0.153 & 36.83\(\%\) & 12.41 \\  & M & 0.129 & 0.115 & **21.51\(\%\)** & 74.80 & 0.172 & 0.153 & 38.73\(\%\) & 134.50 \\  & L & 0.123 & 0.115 & **18.28\(\%\)** & 116.05 & 0.172 & 0.153 & 39.22\(\%\) & 249.06 \\   & S & 3.12E-4 & 2.91E-4 & 26.68\(\%\) & 0.297 & 2.53E-4 & 2.54E-4 & **21.91\(\%\)** & 0.244 \\  & M & 6.64E-6 & 6.50E-6 & 13.09\(\%\) & 0.145 & 5.05E-6 & 5.10E-6 & **10.91\(\%\)** & 0.121 \\   & L & 2.19E-6 & 2.19E-6 & **8.42\(\%\)** & 0.094 & 1.81E-6 & 1.77E-6 & 8.90\(\%\) & 0.099 \\   

Table 1: Results of comparing the proposed GD-Net against GCNs from . We report valid/test errors measured by MSE (V.Err/T.Err) and the relative/absolute objective gap from the optimal solution (R. Gap/A.Gap). Better performances are highlighted in bold. Results are averaged across 100 instances.

### Comparing against more Baselines

To further demonstrate the effectiveness of the proposed framework, we include two additional baselines: the traditional first-order solver PDLP  and the commercial solver Gurobi . Specifically, we used Gurobi's primal simplex method, which efficiently produces feasible primal solutions. The table below shows the time taken by each method to achieve solutions with the same precision level as GD-Net's solutions. The experiment was conducted on both the SC and Packing datasets across all three size variants.

As shown in Table 3, GD-Net consistently outperforms both general-purpose solvers on all datasets. Notably, PDLP, a first-order method known for its fast early-stage convergence, is unable to produce solutions of comparable quality to those of GD-Net in shorter time. This further highlights GD-Net's ability to efficiently generate high-quality solutions. Additionally, as previously mentioned, the simplex method requires matrix factorization, which is computationally expensive. In this case, it required up to 300\(\) more time to converge to a solution of the same quality as GD-Net. These findings strongly support the effectiveness of GD-Net, demonstrating its capability to consistently generate high-quality solutions.

Moreover, we also include experiments under a more practical setting and compare the inference time, which can be found in Appendix G and H.

## 6 Conclusion

Inspired by Awerbuch and Khandekar's gradient descent algorithms for packing and covering LPs, we introduce packing and covering GD-Net, and prove that they can approximate the solution mapping of packing and covering LPs respectively. Importantly, they only need polylogarithmic depth and constant width, significantly narrowing the gap between existing theoretical prediction and empirical evidence. Experiments are also conducted to demonstrate their effectiveness. We list some directions for future work: (1) How to further reduce the size of GNNs theoretically, since there is still a gap between our theoretical progress and empirical evidence; (2) How low the size of GNNs can go for solving general LPs, noting that our nets only work for packing and covering LPs; (3) To explore our nets in L2O for MILP. Recall that GD-Nets can be viewed as unrolling the gradient descent on a carefully selected potential function with some good properties. For (2) and (3), a natural direction is to design other potential functions that still enjoy those good properties.

   dataset & n & m & V. Err & T. Err & R. Gap & A. Gap \\  IS &  &  & 0.085 & 0.085 & \(6.81\%\) & 47.681 \\ Packing &  &  & 2.18E-4 & 1.85E-6 & \(7.06\%\) & 0.078 \\ ECP &  &  & 0.123 & 0.115 & \(17.48\%\) & 120.63 \\ SC &  &  & 2.19E-6 & 1.87E-6 & \(10.68\%\) & 0.119 \\   

Table 2: Results of generalizing GD-Nets trained on smaller instances to larger instances. All models are trained on datasets of size L. We report valid/test errors measured by MSE (V.Err/T.Err) and the relative/absolute objective gap from the optimal solution (R. Gap/A.Gap). Results are averaged across 100 instances.

  
**Instance** & **\#Vars.** & **Optimal Obj.** & **GD-Net Obj.** & **GD-Net Time** & **Gurobi Time** & **PDLP Time** \\   & 1,000 & 3.334 & 3.701 & 0.105s & 0.244s & 0.919s \\  & 5,000 & 100.667 & 130.931 & 0.218s & 9.401s & 0.921s \\  & 10,000 & 407.386 & 546.666 & 0.335s & 103.322s & 1.001s \\   & 1,000 & 3.334 & 3.018 & 0.095s & 0.208s & 0.746s \\  & 5,000 & 100.88 & 78.994 & 0.216s & 3.980s & 0.756s \\   & 10,000 & 406.946 & 302.04 & 0.314s & 8.593s & 0.809s \\   

Table 3: Performance comparison of GD-Net, Gurobi, and PDLP on achieving the same precision.