# Noise Contrastive Alignment of Language Models with Explicit Rewards

Huayu Chen\({}^{1,2}\), Guande He\({}^{1,2}\), Lifan Yuan\({}^{1}\), Ganqu Cui\({}^{1}\), Hang Su\({}^{1,2,3}\), Jun Zhu\({}^{1,2}\)

\({}^{1}\)Department of Computer Science and Technology, Tsinghua University

\({}^{2}\)Institute for AI, BNRist Center, Tsinghua-Bosch Joint ML Center, THBI Lab, Tsinghua University

\({}^{3}\)Zhongguancun Laboratory, Beijing, China

The corresponding author

###### Abstract

User intentions are typically formalized as evaluation rewards to be maximized when fine-tuning language models (LMs). Existing alignment methods, such as Direct Preference Optimization (DPO), are mainly tailored for pairwise preference data where rewards are implicitly defined rather than explicitly given. In this paper, we introduce a general framework for LM alignment, leveraging Noise Contrastive Estimation (NCE) to bridge the gap in handling reward datasets explicitly annotated with scalar evaluations. Our framework comprises two parallel algorithms, NCA and InfoNCA, both enabling the direct extraction of an LM policy from reward data as well as preference data. Notably, we show that the DPO loss is a special case of our proposed InfoNCA objective under pairwise preference settings, thereby integrating and extending current alignment theories. By comparing NCA and InfoNCA, we demonstrate that the well-observed decreasing-likelihood trend of DPO/InfoNCA is caused by their focus on adjusting relative likelihood across different responses. In contrast, NCA optimizes the absolute likelihood for each response, thereby effectively preventing the chosen likelihood from decreasing. We evaluate our methods in both reward and preference settings with Mistral-8\(\)7B and 7B models. Experiments suggest that InfoNCA/NCA surpasses various preference baselines when reward datasets are available. We also find NCA significantly outperforms DPO in complex reasoning tasks like math and coding. Code: https://github.com/thu-ml/Noise-Contrastive-Alignment.

## 1 Introduction

Aligning pretrained Language Models (LMs) with scalar rewards that reflect human intentions is crucial for enhancing their ability to follow instructions . These rewards can be given either explicitly or implicitly. Explicit rewards can be scalar ratings of human annotators or advanced models like GPT-4, while implicit rewards are usually preference labels assigned to pairwise responses.

One effective approach for aligning LMs with preference data is Direct Preference Optimization (DPO, ). DPO applies a reward training loss but parameterizes the reward model as the response likelihood ratio between two LMs, allowing for training reward models and extracting LM policies simultaneously. This approach is more streamlined and thus more favorable compared with traditional Reinforcement Learning (RL) methods , which typically require a two-stage training process: first training reward models, then extracting LM policies.

Despite its simplicity and effectiveness, DPO is only tailored for preference data (\(x\{y_{w}>y_{l}\}\)). When multiple responses are available, directly assigning a scalar reward to each response is usually more convenient and efficient than comparing them in a pairwise manner. The resulting rewarddatasets (\(x\{y_{i},r_{i}\}_{1:K}\)), however, cannot be directly leveraged for DPO training. Previous work  usually prunes reward datasets by selecting the best response and pairing it with a random remaining one. This is suboptimal as all reward values and additional dispreferred responses are thrown away in its data-preprocessing process.

To address this issue, we present **InfoNCA**, an alignment method that allows directly extracting LM policies from both reward datasets and preference datasets with arbitrary response numbers (Figure 2). Notably, InfoNCA subsumes DPO loss as a special case under pairwise preference settings and can thus be seen as a natural extension of DPO (Sec. 3.2). With strong theoretical guarantees, we show DPO is a binary classification loss while InfoNCA is its multi-category version (Figure 4). However, unlike DPO which is built upon assumptions of Bradley-Terry models or Plackett-Luce models, InfoNCA is strictly derived from Information Noise Contrastive Estimation (InfoNCE, ), an established contrastive method that is widely applied in language and visual representation learning . This closes the theoretical gap between current preference alignment methods and classic contrastive learning frameworks.

A well-observed problem with DPO is that the likelihood of the preferred response tends to _decrease_ throughout training . Similar trends are shared by InfoNCA. We find this issue arises mainly from InfoNCA/DPO's focus on adjusting the _relative_ likelihood across different responses per instruction. In Sec. 4, we propose **NCA** as an alternative alignment method to InfoNCA to mitigate this problem. NCA differs from InfoNCA by only loss definition and is also suitable for both preference and reward datasets. However, NCA is built on NCE , a parallel contrastive learning algorithm to InfoNCE, which optimizes the _absolute_ data likelihood during training. In practice, NCA effectively prevents the chosen likelihood from decreasing (Figure 2).

We evaluate our methods on Mistral-7B and 8\(\)7B models from two dimensions. When reward datasets  are available, we show that directly applying our reward-based alignment offers clear improvement compared with preference-based algorithms, achieving higher evaluation rewards in GPT-4  evaluations. We further validate this improvement comes from InfoNCA/NCA's ability to fully leverage the additional suboptimal responses. When only preference data is given , we compare pairwise NCA against the DPO loss. Our experimental results spanning various benchmarks show that NCA outperforms DPO in complex reasoning tasks such as math and coding.

Our main contributions: 1. We bridge the theoretical gap between DPO and classic contrastive learning theories. InfoNCA and NCA are uniquely suited for both reward and preference data, offering a general framework that integrates preference-based algorithms. 2. We show that suboptimal responses are also important for LM optimization. Our method outperforms various preference methods by fully exploiting data information in reward datasets. 3. NCA effectively mitigates the data likelihood decline issue of DPO and offers practical performance improvement.

## 2 Background: Direct Preference Optimization

LM alignment is essentially a constrained policy optimization problem:

\[_{_{}}_{p(x)}_{_{}(y|x)}r(x, y)- D_{}(_{}(|x)||(|x)) ,\] (1)

where \(\) represents the pretrained LM. \(x\) and \(y\) are respectively instructions and responses. \(r\) is a reward function that reflects human intentions. \(\) is some temperature coefficient. Prior work has proved that the optimal solution for the optimization problem in Eq. 1 is:

\[^{*}(y|x)=(y|x)}{Z(x)}(y|x)e^{r(x,y)/}.\] (2)

Direct Preference Optimization (DPO)  assumes we only have access to some pairwise preference data \(x\{y_{w}>y_{l}\}\) for each instruction \(x\). The preference probability of human annotators is modeled by a learnable implicit reward model \(r_{}\) under Bradley-Terry theories :

\[_{}(y_{w}>y_{l}|x):=(r_{}(y_{w},x)-r_{}(y_{l},x)),\]

where \(\) is the sigmoid function. To learn \(r_{}\), DPO simply adopts a binary classification loss:

\[_{}=-_{\{x,y_{w}>y_{l}\}}(r_{}( y_{w},x)-r_{}(y_{l},x)).\] (3)

In practice, the latent function \(r_{}\) is parameterized by the log-likelihood ratio between \(_{}\) and \(\):

\[r_{}(x,y):=(y|x)}{(y|x)},\]

where \(\) a linear coefficient for scaling \(r_{}\). This parameterization is crucial because it ensures \(^{}(y|x)(y|x)e^{r_{}(x,y)/}\) constantly hold. It transforms generative policy optimization into a simple discriminative classification task: When \(r_{}=r\) and \(=\) are satisfied, we naturally have \(_{}=^{*}\).

## 3 InfoNCA: Extending DPO from Preference to Explicit Rewards

Compared with constructing preference datasets, annotating each response with scalar rewards can be more flexible and convenient. Preference methods are only suitable for pairwise data (\(x\{y_{w}>y_{l}\}\)) and would require \(C_{K}^{2}\) evaluations for comparing \(K\) responses. In contrast, reward datasets (\(x\{y_{i},r_{i}\}_{1:K}\)) allow an arbitrary number of responses per prompt with \(K\) evaluations.

Despite its simplicity in handling preference data, DPO is not tailored for reward datasets. We introduce a new alignment method termed InfoNCA to mitigate this gap. We first strictly derive InfoNCA in Sec. 3.1. We show that reward alignment can be solved by constructing a classification problem to identify the optimal response from multiple candidates. We then demonstrate that InfoNCA subsumes DPO as a special case and thus is a natural extension of DPO (Sec. 3.2).

### Reward Alignment through Multi-Class Classification

In essence, DPO represents response rewards as LM likelihoods and constructs a _binary_ classification task for learning the reward model. Given that there are more than two (\(K>2\)) responses per prompt in reward datasets, we seek to construct a _multi-class_ classification task for learning reward models from explicit rewards instead of preference labels. We begin by formally defining this task:

Consider a batch of \(K\) responses \(\{y_{i}\}_{1:K}\) for an instruction \(x\). \(\{y_{i}\}_{1:K}\) consists of one optimal response \(y_{}\), that is sampled from \(^{*}(y|x)(y|x)e^{r(x,y)/}\), and \(K-1\) suboptimal noises independently sampled from \((y|x)\). \( 1:K\) is the random index of that optimal response. Our goal is to identify which of the \(K\) candidates is \(y_{}\), given only reward labels \(r(y_{i})\) for each response.

Intuitively, the response with higher rewards should have a higher probability of being the target response. This intuition can be more rigorously expressed:

**Proposition 3.1** (proof in Appendix A.1).: _Given the above \(K\) response candidates and their respective rewards, the posterior probability for the \(\)-th response being drawn from \(^{*}\) is_

\[p(|x,\{y_{i}\}_{1:K})=)}}{_{i=1}^{K}e^{r(x,y_{i})}}.\] (4)

This finding is highly appealing because it shows response optimality is solely related to response rewards. This allows us to conveniently train reward models \(r_{}\) via maximum likelihood (MLE).

**Theorem 3.2** (InfoNCA, proof in Appendix A.1).: _We define \(^{*}(y|x)(y|x)e^{r(x,y)/}\) and \(_{}(y|x)(y|x)e^{r_{}(x,y)}\). For any \(K>1\), \(>0\), we have:_

_(a) Equivalent objective. The MLE objective for training \(r_{}\) has an equivalent form:_

\[_{}_{p(x,\{y_{i}\})} p_{}(|x,\{y_{i}\}) _{}-_{p(x)(y_{i}|x)}_{i=1}^{K }[)/}}{Z(x)}(x,y_{i})}}{ _{j=1}^{K}e^{r_{}(x,y_{j})}}],\] (5)

_where \(Z(x)=_{(y|x)}e^{r(x,y)/}\)._

_(b) Optimal solution. Assume unlimited model capacity. The optimal_ \(r_{^{*}}\) _and_ \(_{^{*}}\) _for solving (_5_) are_

\[r_{^{*}}(x,y) =r(x,y)/+C(x),\] \[_{^{*}}(y|x) =^{*}(y|x)(y|x)e^{r(x,y)/},\]

_where_ \(C(x)\) _is an arbitrary function conditioning on_ \(x\)_._

In practical implementation of Eq. 5, we estimate \(Z(x) e^{r_{j}/}\) and parameterize \(r_{}(x,y):=(y|x)}{(y|x)}\) following DPO (Eq. 2). The loss function becomes

\[_{}^{}(x,\{y_{i},r_{i}\}_{1:K})=- _{i=1}^{K}/}}{_{ {c}j=1\\ }^{/$}}}}}_{ }(x,y_{i})}}{_{j=1}^{K }e^{r_{}(x,y_{j})}}}_{}_{r_{}(x,y):= (y|x)}{(y|x)}}.\] (6)

The loss function in Eq. 6 is termed **InfoNCA**, where **A** stands for **A**lignment. This naming reflects its functional similarity to the Infomation Noise Contrastive Estimation (InfoNCE, ). Both methods transform generative modeling problems into classification tasks by contrasting multiple data points.

**How does InfoNCA work?** InfoNCA loss (Eq. 6) can be seen as a \(K\)-category cross-entropy loss. The soft label is calculated by dataset rewards through a softmax operation. The model's predictions are represented by learned reward \(r_{}\). The loss reaches 0 when \(r_{^{*}}(x,y)=r(x,y)/+C(x)\).

### InfoNCA Subsumes DPO as A Special Case

Below we show that DPO is a special case of InfoNCA asymptotically. Specifically, setting response number \(K=2\) and reward temperature \( 0\), we can fully recover the DPO objective:

\[_{}^{}(x,\{y_{i},r_{i}\}_{1:K}) =-_{i=1}^{K}(r_{i}=r_{})(x,y_{i})}}{_{j=1}^{K}e^{r_{}(x,y_{j})}}\] ( \[ 0\] ) \[=-(x,y_{w})}}{e^{r_{}(x,y_{w})}+e^{r _{}(x,y_{l})}}\] ( \[K=2\], \[r_{w}>r_{l}\] ) \[=-(r_{}(x,y_{w})-r_{}(x,y_{l}))\] (DPO loss, Eq. 3)

Figure 3: DPO, InfoNCA, and NCA all optimize LLM through classification tasks. **DPO** compares two responses and tells which one is preferred. **InfoNCA** compares multiple responses and identifies the one sampled from \(^{*}\) (Sec. 3.1). **NCA** predicts the model source of a single response (Sec. 4.1).

**Empirical effect for varying hyperparameter \(K\) and \(\).** As indicated by the derivation above, the root difference between preference-based and reward-based methods lies in the choices of \(K\) and \(\). \(K\) affects how accurately we can estimate the partition function \(Z(x)_{j=1}^{K}e^{r_{j}/}\) in Eq. 5. In practice, we find larger \(K\) can lead to better performance (Sec. 5.1). \(\) indicates a trade-off between diversity and optimality. At \(a 0\), the InfoNCA loss increases the likelihood only for the optimal response and decreases it for all other responses, turning the reward dataset \(x\{y_{i},r_{i}\}\) into a preference dataset \(x\{y_{w}>y_{l}\}\). We provide ablation studies of \(\) and \(\) in Appendix D.

## 4 NCA: Fixing Decreased Response Likelihood Issue for InfoNCA

A well-observed issue with DPO is that the likelihood of _all_ responses continually _decrease_ throughout training [27; 32]. We find InfoNCA shares this trend due to their inherent equivalence. Decreased data likelihood is concerning because it directly contradicts the maximum likelihood objective for supervised training and may eventually harm performance .

We hypothesize the main cause of this decreasing likelihood is that InfoNCA methods only adjust _relative_ rewards among responses, rather than optimizing their _absolute_ value. To address this problem, we take inspiration from NCE, another contrastive learning method parallel to InfoNCE, and propose **NCA**(lignment) (Sec. 4.1). Similar to InfoNCA, NCA can also guarantee convergence to the optimal LM policy under ideal conditions (Theorem 4.2). However, it directly learns the absolute reward for each response, thereby counteracting the decreasing likelihood trend (Sec. 4.2).

### Reward Alignment through Absolute Reward Prediction

To avoid optimizing relative rewards across multiple responses, we construct a binary classification task that deals with a single response.

Specifically, imagine sampling a response \(y\) randomly from either the optimal LM \(^{*}(y|x)=(y|x)}{Z(x)}\), or the pretrained LM \((y|x)\). The marginal probability of \(y\) is \(p(y|x):=(y|x)+^{*}(y|x)\). Our goal is to guess its model source when given a response \(y\) and its reward \(r(y)\).

**Proposition 4.1** (proof in Appendix A.2).: _Let a binary variable \(=1\) indicates the response \(y\) is sampled from \(^{*}\). The posterior probability of the distribution source given the response \(y\) satisfies:_

\[p(=1|x,y)=(y|x)}{(y|x)+^{*}(y|x)}=}{Z(x)+e^{r(x,y)/}}.\] (7)

Note that \(p(|x,y)\) is related to the partition function \(Z(x)\). In order to represent model likelihood \(p_{}(|x,y)\) by only employing \(r_{}\) similarly to Proposition 3.1, we have to redefine

  Alignment Method & **InfoNCA** (Sec. 3) & **NCA** (Sec. 4) \\  Modeling Target & \(^{*}(y|x)(y|x)e^{r_{}(x,y)/}\) & \(_{}(y|x)=(y|x)e^{r_{}(x,y)}\) \\  Reward Dataset & \(x\{y_{l},r_{i}\}_{1:K}\) \\ Loss (\(K\)\(>\)1,\(\)\(>\)0) & \(-_{i=1}^{K}[/}}{_{j}e^{r_{j}/}}(x,y_{l})}}{_{j}e^{r_{}(x,y_{l})}}]\) & \(-_{i=1}^{K}[/}}{_{j}e^{r_{j}/}} (r_{}(x,y_{l}))+(-r_{}(x,y_{l}))]\) \\  Preference Dataset & \(x\{y_{w}>y_{l}\}\) \\ Loss (\(K\)\(=\)2, \(\)\(\)\(\)0) & \(-(r_{}(x,y_{w})-r_{}(x,y_{l}))\)(DPO) & \(|.\) & \(-(r_{}(x,y_{w}))-_{y\{y_{w},y_{l}\}} (-r_{}(x,y))\) \\  Loss Type & InfoNCE loss  & NCE loss  \\ Optimizing Target & _relative_ value of log likelihood ratio & _absolute_ value of log likelihood ratio \\ Optimal \(r_{^{*}}(x,y)\) & \(r(x,y)/+C(x)\) & \(r(x,y)/-_{(y|x)}e^{r(x,y)/}\) \\ \(r_{^{*}}(x,y_{}) 0\)? & not guaranteed & \((y|x)\)=\((y|x)e^{r_{}(x,y)}\) by absorbing \(Z_{}\) into \(r_{}\). Then we have

\[p_{}(=1|x,y)=(y|x)}{(y|x)+_{}(y|x)}= (r_{}(x,y)).\] (8)

Similarly to Theorem 3.2, we can derive a MLE-based training objective for optimizing \(r_{}\).

**Theorem 4.2** (NCA, proof in Appendix A.2).: _Let \(>0\), we have the maximum likelihood objective:_

_(a) Equivalent objective._

\[_{}_{p(x,y)} p_{}(|x,y)_{ }-_{p(x)(y|x)}}{Z(x)} (r_{}(x,y))+(-r_{}(x,y)),\] (9)

_where_ \(Z(x)=_{(y|x)}e^{r(x,y)/}\)_._

_(b) Optimal solution._ _Assume unlimited model capacity. The optimal_ \(r_{^{*}}\) _and_ \(_{^{*}}\) _for solving (_9_) are_

\[r_{^{*}}(x,y) =r(x,y)/-_{(y|x)}e^{r(x,y)/},\] (10) _and_ \[_{^{*}}(y|x) (y|x)e^{r(x,y)/}.\]

For reward datasets (\(x\{y_{i},r_{i}\}_{1:K}\)), we estimate \(Z(x)_{i=1}^{K}e^{r_{i}/}\) in Eq. 9 and construct \(r_{}\) similarly to InfoNCA:

\[_{}^{}(x,\{y_{i},r_{i}\}_{1:K})=-_{i=1}^{K} /}}{_{j=1}^{K}e^{r_{j}/}} (r_{}(x,y_{i}))}_{\\ }+(x,y_{i}))}_{}_{r_{}(x,y):= (y|x)}{(y|x)}}\] (11)

**How does NCA work?** The loss function for NCA involves two opposing forces that jointly determine the trend of increasing or decreasing \(r_{}(x,y)\). Since \(()\) is a monotonically increasing function, the first term in Eq. 11 tends to increase \(r_{}(x,y)\) while the second term tends to decrease it.

At the start of training, when \(r_{}=-r_{}=0\), the direction of the combined force for \(r_{}\) is decided by the difference in their weights, expressed as \(/}}{_{j=1}^{K}e^{r_{j}/}}-\). Responses with higher rewards would, in principle, attain higher likelihood after training.

### Connection between NCA and InfoNCA/DPO

Although both NCA and InfoNCA originate from solving a noise contrastive classification problem, their optimization targets are markedly different (Table 1).

InfoNCA and DPO both calibrate _relative_ values of reward models across various responses \(\{y_{i}\}_{1:K}\) for an instruction \(x\). In other words, the absolute value of \(r_{}(x,y)\) is not directly constrained. This can lead to some counterintuitive behaviors. For instance, the learned reward for even the highest-reward response could decrease over time without contradicting the loss definition, as long as the reward margin keeps increasing. This could lead to poor performance or training instability (Sec. 5.2).

In contrast, NCA specifically focuses on optimizing _absolute_ values of the reward model. This characteristic is determined by its model definition: \(_{}(y|x)\)=\((y|x)e^{r_{}(x,y)}\), where \(r_{}\) has to be _self-normalized_: \(_{(y|x)}e^{r_{}(x,y)}=1\). In practice, NCA effectively prevents the likelihood of the preferred responses from decreasing. We find this is particularly helpful for math and coding tasks.

## 5 Experiments

We mainly seek to answer two questions in our experiments:

1. If we have access to reward-annotated datasets with \(>\)\(2\) responses per prompt, does InfoNCA or NCA offer empirical improvement compared with preference-based approaches that simply prune reward datasets into preference datasets? (Sec. 5.1)
2. If only pairwise preference data is available, when should one choose NCA over DPO? What benefits does NCA offer? (Sec. 5.2) Note that InfoNCA is exactly DPO in this setting.

### Aligning Language Models with Explicit Rewards

**Reward dataset and Evaluation metric.** We consider UltraFeedback, an instruction-following dataset annotated by GPT-4. This dataset comprises \(\)64k instructions. Each instruction has 4 responses generated by various LMs. GPT-4 rates each response with a scalar reward on a scale of 0-10. Prior research indicates that these GPT-4 rewards closely align with human annotations , establishing them as an efficient, cost-effective alternative to human feedback. In order to align exactly with the definition of dataset rewards, we similarly choose well-acknowledged GPT4-based benchmarks like MT-bench  and AlpacaEval  for evaluation. Human preference studies are also conducted on evaluation prompts from MT-bench. The rating system is in Appendix C.

**InfoNCA and NCA outperform preference-based methods given reward dataset.** To handle reward datasets with \(K>2\) responses per instruction, one approach is to simply prune them into pairwise data and apply preference learning like DPO. For instance, Zephyr  selects the highest-reward response and a random remaining one from UltraFeedback for each instruction. This procedure discards two additional suboptimal responses in the dataset as well as their reward information.

In Table 2, we fine-tune a Mistral-7B model on UltraFeedback and compare InfoNCA/NCA against the DPO baseline. Results show that our methods outperform preference baselines. This improvement can be attributed to InfoNCA/NCA's ability to exploit all information in the reward dataset.

**Suboptimal responses are also important.** Previous practices always ensure selecting the highest-performing response when constructing preference data. The assumption behind this strategy is that the dataset's best-performing response determines the upper limit of alignment performance. However, our experiments contradict this assumption. Results in Figure 4 indicate that extra suboptimal responses can also be advantageous for policy training. Specifically, we observe consistent

    & **Name** & **Annotation Type** & **MT-bench** & **AlpacaEval** & **Win vs. DPO** \\    } & Mixtral-7B-sft & SFT Data & 6.45 & 85.20 & - \\  & \(+\)KTO  & Preference & 7.12 & 91.93 & - \\  & \(+\)IPO  & Preference & 7.45 & 90.62 & - \\  & \(+\)DPO (Zephyr-\(\)) & Preference & 7.34 & 90.60 & 50.0 \\  & \(+\)DPO\(\)3 & Preference & 7.22 & 91.60 & 58.1 \\  & \(+\)DPO\( C_{4}^{2}\) & Preference & 7.38 & 90.29 & 48.1 \\    } & **\(+\)InfoNCA** & **Reward** & **7.63** & **92.35** & 56.9 \\  & \(+\)NCA & Reward & 7.52 & 90.31 & **59.4** \\    } & Mixtral-ORPO-\(\) & Preference+SFT & 7.32 & 91.41 & - \\  & Mistral-7B-instruct & SFT Data & 6.84 & 92.78 & - \\  & LLaMA2-chat-70b & Reward Model & 6.86 & 92.66 & - \\  & GPT-4 & Reward Model & 9.18 & 93.78 & - \\   

Table 2: Comparison between reward-based methods (InfoNCA, NCA) and preference-based methods (DPO, IPO, etc.) in LLM alignment. We focus on the general instruction-following abilities of each method measured by GPT-4 evaluations and human preference. The highest number in each benchmark is **bolded** and the second highest is underlined.

Figure 4: More suboptimal responses can also increase LLM’s instruction-following ability. We fix the highest-reward response in the UltraFeedback dataset and ablate the number of suboptimal responses per prompt, resulting in different contrastive response numbers \(K\) during training. **Left:** Evaluation results under the same set of hyperparameters. **Right:** Performance-KL trade-off under various \(\) and \(\). Each dot represents an independent experiment trained for 1 epoch.

performance improvements when increasing the number of data responses from \(K=2\) to \(K=4\) for both InfoNCA and NCA algorithms, across various hyperparameters.

**Combinatorial DPO are suboptimal solutions.** Regarding the performance improvement offered by more suboptimal responses, one might predict that applying the DPO to a combinatorially constructed preference dataset would yield results comparable to NCA/InfoNCA. To investigate this, we examined two variants of DPO that utilize all available responses in UltraFeedback.

**DPO\(\)3:** We pair the highest-performing response with each of the remaining three separately.

**DPO\( C_{4}^{2}\):** We sum up all DPO loss possibilities for two out of the four responses.

Our experiments, detailed in Table 2, reveal that naively applying combinatorial DPO loss to leverage all response information underperforms InfoNCA/NCA. The DPO\(\)3 shows some benefit, while DPO\( C_{4}^{2}\) is harmful compared with simple data pruning. This is expected because InfoNCA and NCA possess theoretical guarantees (Theorem 3.2 and Theorem 4.2) that ensure convergence to the optimal LM policy whereas combinatorial preference methods do not.

### NCA vs. DPO in Aligning Language Models with Pairwise Preference

In previous experiments, our focus is on the reward dataset with \(K>2\) responses per prompt (\(x\{y_{i},r_{i}\}_{1:K}\)). However, at present most alignment datasets are pairwise (\(x\{y_{w}>y_{l}\}\)), making it essential also to evaluate our proposed methods in pairwise preference settings.

Since InfoNCA is equivalent to DPO when only pairwise preference data is available (Sec. 3.2), we will focus on comparing and clarifying the differences between the DPO and NCA algorithms.

**Preference dataset and evaluation metrics.** We consider fine-tuning Mistral-7B and Mistral-8\(\)7B models on UltraInteract , a pairwise alignment dataset specifically designed for complex reasoning tasks. Before alignment, we perform SFT on UltraInteract's preferred responses for the 8\(\)7B model and use the existing Mistral-SFT model in Sec. 5.1. We evaluate the model's performance in various challenging tasks. This includes BBH-Hard  for CoT reasoning, HumanEval  and LeetCode  for coding, GSM-Plus , MATH, TheoremQA , SVAMP , and ASDiv  for math.

**DPO may hurt reasoning performance while NCA helps.** Results are presented in Table 3. Overall, NCA consistently outperforms DPO in various benchmarks. Notably, we observe DPO hurts the overall performance in most reasoning tasks regarding the Mistral-8\(\)7B-SFT model. This indicates that DPO might not be suitable for improving reasoning abilities, which echoes findings in concurrent work . In contrast, NCA shows clear improvement on both the 7B and 8\(\)7B models.

**NCA prevents the chosen-likelihood from decreasing.** What distinct optimization characteristics could cause performance differences between pairwise NCA and DPO? To understand this, we empirically inspect how the data likelihood changes during training. As shown in Figure 5. The likelihood of preferred responses interestingly decreases after DPO training and increases for NCA training. This pattern is consistent across both preference and reward learning. The decreasing chosen-likelihood trend is concerning because it directly contradicts the maximum-likelihood objective used

Figure 5: Comparision of data likelihood between InfoNCA/DPO and NCA.

   Model & Reasoning &  &  &  &  \\  & BBH (CoT) & LeetCode & HumanEval & GSMPLUS & MATH & TheoremQA & SVAMP & ASDiv & Avg. \\  Mistral-7B-SFT & 60.9 & 3.3 & 28.1 & 28.5 & 5.8 & 7.0 & 26.9 & 35.8 & 24.5 \\ + DPO & **61.7** & 2.2 \(\) & **31.7** & 12.1 \(\) & 6.4 & 9.8 & 34.1 & 46.1 & 25.5 \\ + **NCA** & 60.8 \(\) & **3.3** & 26.8 \(\) & **32.3** & **11.7** & **11.0** & **65.3** & **74.3** & **35.7** \\  Mistral-8\(\)7B-SFT & **75.6** & 16.7 & 61.0 & 57.6 & 40.1 & 25.9 & 85.9 & 87.5 & 56.3 \\ + DPO & 74.9 \(\) & 17.2 & 47.6 & 55.8 \(\) & 35.3 \(\) & **26.9** & 67.3 & 75.7 \(\) & 50.1 \\ + **NCA** & **75.6** & **21.1** & **62.8** & **61.5** & **41.6** & **26.9** & **86.8** & **86.9** & **57.9** \\   

Table 3: Alignment results for UltraInteract. We mark numbers that have decreased (\(\)) after training.

during the SFT stage. This drawback is exacerbated in reasoning tasks, where the preferred response is often the ground truth answer. Consequently, we hypothesize that NCA's superior performance in reasoning tasks is due to its ability to avoid decreasing chosen likelihood.

Since DPO is essentially a specialization of InfoNCA, their contrasting likelihood trends can be explained theoretically. As we have elaborated in Sec. 4.2, NCA adjusts the absolute likelihood of data, while DPO/InfoNCA only considers relative likelihood across different responses. Thus, a declining chosen likelihood directly contradicts NCA's training objective but not DPO's.

**Empirical takeaway: When to choose NCA over DPO?** DPO and pairwise NCA have similar theoretical guarantees. Their different performance in alignment tasks is largely empirical, depending on the specific characteristics of datasets and the nature of tasks. Our observations show that NCA is more suitable for reasoning tasks such as math and coding (Table 3), where high-quality responses are sparse, and adhering closely to the preferred responses in the dataset is critical. DPO may be more suitable for general instruction-following tasks like summarization/role-playing (Table 2), where datasets only reflect human relative preference but do not contain "golden" answers. In essence, NCA benefits from better dataset regularization, while DPO relies more on LLMs' generalization abilities.

We also observe that NCA has a greater tolerance for divergence from the initial SFT policy and is more robust to hyperparameter changes. As evidenced in Figure 6, we conduct a grid search on \(\) and \(\). DPO can drastically fail to improve alignment performance if the learned policy strays too far from the SFT policy, and may randomly collapse under certain hyperparameters. In contrast, the NCA method does not exhibit similar issues. These observations suggest that NCA may be a worthwhile alternative if DPO training is unstable.

## 6 Related Work

**Language model alignment.** Current approaches cater to either explicit reward data or preference data, often lacking the versatility to address both concurrently. Reinforcement Learning  is inherently suitable for explicit reward scenarios. However, its on-policy nature necessitates learning a reward model from data first, leading to an indirect two-stage optimization process [8; 26; 36]. Recent developments in preference-based alignment techniques [33; 1; 11; 42; 16; 13] have streamlined this process. They enable direct alignment of LMs through a singular loss, but this comes at the expense of being confined to pairwise preference data. Other alignment approaches [43; 37; 45; 38] are also not tailored for aligning with reward datasets. Recent work  attempts to extend DPO's parameterization technique to explicit reward contexts. However, it only considers binary rewards. In comparison, our methods can handle both continuous rewards and preference data.

**Noise contrastive estimation.** NCE  and its variant, InfoNCE , are established optimization methods for training unnormalized generative models . NCE primarily leverages a binary classification loss and can be applied in self-supervised representation learning. Examples are Word2Vec , MoCo , and SimCLR . InfoNCE is related to maximizing mutual information between two distributions through a multiclass cross-entropy loss. It has successful applications in representation learning, such as CLIP . It is also widely used in language modeling , diffusion modeling , and reinforcement learning .

Figure 6: NCA is more robust to hyperparameter changes and KL derivations. **Left:** Ablation results of \(\) and \(\) for UltraFeedback-binarized. **Right:** Results for UltraFeedback-reward (\(K=4\)).

Conclusion

In this work, we formally consider the language model alignment problem in the context of explicit reward settings. By adeptly harnessing the NCE and InfoNCE theories, we introduce two practical algorithms: NCA and InfoNCA. Our proposed methods are uniquely suited for both reward data and preference data, including DPO as a special case. Our experiments show that reward-based alignment methods outperform preference baseline by fully leveraging suboptimal responses in reward datasets. In preference settings, pairwise NCA outperforms DPO in complex reasoning tasks by effectively preventing data likelihood from decreasing.