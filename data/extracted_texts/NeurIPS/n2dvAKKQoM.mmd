# Task-oriented Time Series Imputation Evaluation via Generalized Representers

Zhixian Wang\({}^{1,2}\), Linxiao Yang\({}^{2}\), Liang Sun\({}^{2}\), Qingsong Wen\({}^{2}\), Yi Wang\({}^{1}\)

\({}^{1}\)The University of Hong Kong, \({}^{2}\)DAMO Academy, Alibaba Group

zxwang@eee.hku.hk, linxiao.ylx@alibaba-inc.com, liang.sun@alibaba-inc.com, qingsongedu@gmail.com, yiwang@eee.hku.hk

Corresponding author.

###### Abstract

Time series analysis is widely used in many fields such as power energy, economics, and transportation, including different tasks such as forecasting, anomaly detection, classification, etc. Missing values are widely observed in these tasks, and often leading to unpredictable negative effects on existing methods, hindering their further application. In response to this situation, existing time series imputation methods mainly focus on restoring sequences based on their data characteristics, while ignoring the performance of the restored sequences in downstream tasks. Considering different requirements of downstream tasks (e.g., forecasting), this paper proposes an efficient downstream task-oriented time series imputation evaluation approach. By combining time series imputation with neural network models used for downstream tasks, the gain of different imputation strategies on downstream tasks is estimated without retraining, and the most favorable imputation value for downstream tasks is given by combining different imputation strategies according to the estimated gain. The corresponding code can be found in the repository https://github.com/hkuedl/Task-Oriented-Imputation.

## 1 Introduction

Time series analysis plays a crucial role in many real-world applications, such as energy, finance, healthcare, and other fields . For example, forecasting load series forms the basis for further decision-making in power dispatch in the power grid system, thereby generating a significant amount of economic benefits . However, collecting time series data, especially high-quality ones, is challenging. Due to the instability of the external environment, sensor failures, and even ethical and legal privacy issues, missing values are prevalent in time series data . For instance, in the BDG2 load series dataset , widely used in building energy analysis, the ratio of complete time series data is less than 10\(\%\).

To handle missing values in time series data, numerous methods have been proposed for time series imputation in the literature. Based on the features of the imputation methods, these approaches can be divided into statistical and machine learning methods, such as ARIMA and KNN , as well as deep learning-based methods . Both types of methods generally use reconstruction errors of missing values to guide learning and perform evaluation. Recently, some researchers have turned their attention to evaluation strategies based on downstream task performance . However, in most cases, downstream tasks are classification tasks , while forecasting tasks, as another important branch of time series-related tasks, have not been fully considered. The main challenge for time series forecasting is that the time series serves as both input and label (output) for the model during training, whereas in classification tasks, it only serves as input for the model.

In supervised learning, training labels influence the calculation of the loss function, which in turn affects the optimization of model parameters and, ultimately, the performance of the model on the test set.  indicates that noise in input data (missing data can be considered a type of noise) often has a limited impact on forecasting results. In contrast, label noise can significantly affect the model and, consequently, the final test results from the beginning to the end of the time series. Therefore, when evaluating the impact of different time imputation methods on downstream forecasting tasks, it is essential to focus on assessing the quality of training labels constructed through various imputation methods.

To evaluate how the quality of the imputation labels affects downstream forecasting tasks, it is important to clarify that an excellent imputation strategy does not necessarily mean that the imputed value at each time step is superior to any other method.  provides a benchmark for various methods in time series imputation tasks. Although SAITS , as one of the latest SOTA methods, has achieved remarkable results, there are still methods that surpass SAITS in some cases. This demonstrates that time series imputation is a complex task, making it difficult to find a universal method capable of handling all situations, let alone considering the performance of downstream forecasting tasks. A more realistic scenario is that while one method may perform better overall, it may not outperform other methods locally. In time series, this means that one method may excel in some time steps, while others do better in different time steps. However, to examine the impact of each time step on forecasting, retraining the forecasting model multiple times is necessary, which is impractical due to time and computational costs. Therefore, an efficient estimation method is needed to examine the impact of each time step with different imputation methods. Additionally, since finding a universal method is difficult, it is natural to shift focus toward combining the advantages of current methods to obtain a better imputation strategy. Consequently, determining how to combine different strategies becomes a challenge.

Based on the above situation, we have developed a task-oriented time series imputation evaluation strategy. Specifically, we summarize our contributions into the following points.

1. We propose a strategy that evaluates each time series imputation method by estimating the impact of missing (imputed) labels at each time step on downstream tasks without requiring multiple retraining, which significantly reduces time and computational consumption. To the best of our knowledge, we are the first to consider the impact of missing values in time series as labels on downstream forecasting tasks.
2. We introduce a simple and effective similarity calculation method based on the characteristics of long time series to estimate the impact of imputed values more quickly, striking a balance between performance and computational cost.
3. We develop a time series imputation framework guided by maximizing the gains of downstream tasks, enabling the combination of advantages from different time series imputation strategies to achieve a better one. This results in improved performance in the downstream forecasting task.

### Related Work

**Time Series Imputation** Time series imputation can be primarily classified into two categories: traditional techniques and neural network-based techniques. Traditional methods replace missing values with statistics, such as the mean value or the last observed value . They include simple statistical models like ARIMA , ARFIMA, SARIMA , and machine learning techniques such as KNNI , TIDER , MICE , BayOTIDE . In recent years, deep learning imputation methods have demonstrated remarkable capabilities in capturing intricate temporal relationships and complex variation patterns inherent in time series data. These methods employ deep learning models like Transformers [24; 13], generative neural networks such as VAEs [12; 25], GANs [26; 27], and diffusion models  to capture complex dynamic relationships within time series data. Although different methods exhibit various advantages, no universal method currently outperforms others in all scenarios and datasets. This observation inspires us to consider combining existing advanced methods in this work to achieve better time series imputation strategies.

**Sample-based Explaination** Sample-based explainable methods can be divided into two categories . One is based on retraining, which evaluates the importance of corresponding data by comparing the impact of removing data points on the model and even the final test results [30; 31; 32].

Among them, the introduction of shapley value by  naturally ensures the fairness of data attribution. The other type is based on gradient methods, which directly estimate the influence of data points without the need for retraining. This type of method can be subdivided into three main categories, which are based on representative theories, Influence Function, and training loss trajectory.  is a representative of the method of the first type, whose core idea is to fix the other layers and only focus on the last layer of the neural network, so that the influence of each sample can be explicitly calculated. On the other hand, the Influence Function  is based on the assumption of convergence and uses the Hessian matrix to estimate the influence of samples. The last type of method takes into account the entire training process of the neural network, continuously tracking the impact of samples on each parameter update . In addition,  summarizes the gradient-based method and unifies them as generalized representers.

## 2 Methodology

### Problem Statement

Consider a multivariate time series dataset represented by \(\{(_{i},_{i})\}_{i=1}^{n}\), incorporating \(n\) samples. In this dataset, \(_{i}^{D L_{1}}\) corresponds to a feature matrix containing \(D\) distinctive features over \(L_{1}\) temporal intervals, whereas \(_{i}^{L_{2}}\) signifies the target time series, which spans \(L_{2}\) temporal intervals. It is crucial to recognize that \(_{i}\) may include several missing entries, a common complication within real-world datasets. For example, in the context of electrical load forecasting, \(_{i}\) encompasses daily weather-related time series data, comprising variables such as temperature, humidity, and wind speed, while \(_{i}\) represents the electrical load time series of a given day, possibly containing missing entries due to issues in data collection or transmission.

Addressing missing values in \(\{_{i}\}\) through imputation is a fundamental preprocessing step for machine learning tasks involving this data, underscoring the necessity to assess the effectiveness of various imputation methods. Consider \(\{_{i}^{(1)}\}\) and \(\{_{i}^{(2)}\}\) as two time series resulting from the imputation of \(\{\}\) via two different methods. The goal is to ascertain whether the imputation performed on \(\{_{i}^{(2)}\}\) is superior to that on \(\{_{i}^{(1)}\}\). Moreover, we seek to evaluate the quality of imputation at each temporal interval, determining if the imputation of the \(l\)-th interval in \(_{i}^{(2)}\) is more accurate than that in \(_{i}^{(1)}\).

Conventionally, the quality of imputation is quantified by measuring the discrepancy between the imputed values and the actual data, favoring methods that minimize this deviation. In this study, however, we propose to assess imputation quality based on the performance of subsequent tasks.

One step further, we evaluate the quality of imputation on a timestep basis, examining if the imputation for the \(l\)-th interval in \(_{i}^{(2)}\) exhibits improved efficacy over \(_{i}^{(1)}\), thereby offering a more nuanced and comprehensive evaluation of imputation methodologies.

Let us define the loss function for the downstream task as \((f(,),)\), where \(f(,)\) denotes the model used in the downstream task parameteered by \(\). And let \(\{(_{i}^{v},_{i}^{v})\}_{i=1}^{m}\) constitute a test dataset that will be used to gauge model performance. We denote \(y_{i,l}^{(1)}\) and \(y_{i,l}^{(2)}\) as the \(l\)-th entries of \(_{i}^{(1)}\) and \(_{i}^{(2)}\), respectively. According to our intuition, if \(y_{i,l}^{(2)}\) is superior to \(y_{i,l}^{(1)}\), swapping \(y_{i,l}^{(1)}\) for \(y_{i,l}^{(2)}\) should result in a decrease in the test set's loss. Guided by this rationale, we define the indicator function \(I(i,l)\), which discerns whether \(y_{i,l}^{(2)}\) is preferable over \(y_{i,l}^{(1)}\) as follows:

\[I(i,l) =_{k=1}^{m}I(i,l,_{k}^{v})=_{k=1}^{m}((f(_{k}^{v},_{1}),_{k}^{v})-(f(_{k}^{v },_{2}),_{k}^{v}))\] s.t. \[_{1} =_{}_{k=1}^{n}(f(_{k}, {}),_{k}^{(1)})\] \[_{2} =_{}(f(_{i},), _{i}^{(2,l)}})+_{k i}^{n}(f(_{k}, {}),_{k}^{(1)}).\] (1)Here, \(_{i}}^{(2,l)}\) denotes a vector identical to \(_{i}^{(1)}\), except at the \(l\)-th entry, which matches that of \(_{i}^{(2)}\). Clearly, \(I(i,l) 0\) implies that the substitution of \(y_{i,l}^{(1)}\) with \(y_{i,l}^{(2)}\) leads to a decreased test set loss, suggesting that \(y_{i,l}^{(2)}\) is superior. Conversely, if \(I(i,l)<0\), it suggests that \(y_{i,l}^{(1)}\) is preferable to \(y_{i,l}^{(2)}\).

Despite the effectiveness of the definition provided by Equation (1), computing \(I(i,l)\) for every missing value in the dataset is impractical due to the extensive model retraining required, which can be prohibitive in terms of time. To overcome this challenge, in the next section, we put forth an efficient methodology for estimating \(I(i,l)\) without retraining the model.

### Approximation Model Construction

To compute \(I(i,l)\) efficiently, we propose a retrain-free method in this subsection. As both \(^{(1)}\) and \(^{(2)}\) are imputation of \(\), then we assume that \(y_{i,l}^{(1)}\) is close to \(y_{i,l}^{(2)}\), with which we approximate \(I(i,l)\) using the first order Tolyer expansion as

\[I(i,l) _{k=1}^{m}(f(_{k}^{v},),_{k}^{v})}{ y_{i,l}}_{y_{i,l}=y_{i,l}^{(1)}}(y_ {i,l}^{(1)}-y_{i,l}^{(2)})\] \[= _{k=1}^{m}(f(_{k}^{v},),_{k}^{v})}{ f(_{k}^{v},)}^{T}_{k}^{v},)}{ y_{i,l}}_{y_{i,l}=y_{ i,l}^{(1)}}(y_{i,l}^{(1)}-y_{i,l}^{(2)}).\] (2)

Equation (2) provides an approximation for computing \(I(i,l)\), where \(_{k}^{v},)}{ y_{i,l}}\) measures how the training target \(y_{i,l}\) affect the prediction of the test data, and \((f(_{k}^{v},),_{k}^{v})}{  f(_{k}^{v},)}\) computes how the changing of the prediction of \(_{k}^{v}\) affect the final loss. Note that the symbolic expression \(_{k}^{v},)}{ y_{i,l}}\) can be conceptually broken down into \(_{k}^{v},)}{}}{ y_{i,l}}\), elucidating the role of the label \(y_{i,l}\) in shaping the model parameters \(\) throughout the training process. This, in turn, has repercussions on the model's prediction when evaluated on unseen data from the test set, i.e. \(f(_{k}^{v},)\). By focusing on the derivative \(_{k}^{v},)}{ y_{i,l}}\), our goal is to assess the extent to which changes in label values \(y_{i,l}\) influence the model's predictions on the test set, thereby affecting overall model efficacy.

When it comes back to the estimation, dispite \((f(_{k}^{v},),_{k}^{v})}{  f(_{k}^{v},)}\) and \(y_{i,l}^{(1)}-y_{i,l}^{(2)}\) are easy to compute, estimating \(_{k}^{v},)}{ y_{i,l}}\) is difficult. The difficulty comes from two aspects. Firstly, for the complex \(f(,)\), the final parameter is not only affected by the training data, some other factors, such as the structure of the network and learning rate during the learning process. Secondly, all of the \(n\) training samples affect the parameters of the model, leading to the mixture of the effect of data points on the final model. Thus isolating the effect of a single data point is difficult.

To overcome these two difficulties, we propose to approximate \(_{k}^{v},)}{ y_{i,l}}\) using a white-box model, where how each training datapoint affects the final prediction is clear from the design of the model. To this end, we propose to approximate \(_{k}^{v},)}{ y_{i,l}}\) using a kernel machine, i.e. \(_{i,l}^{T}K(_{i},_{k}^{v})\), where \(K(_{i},)\) is a kernel between the training sample \(_{i}\) and test samples measuring the similarity between the \(_{i}\) and \(_{k}^{v}\), and \(\) is a learnerable hyperparameter. It can be proven that the indicator function based on this definition satisfies many desirable properties (please see Appendix for details) to construct an axiomatic attribution. Formally, the coefficient \(}^{L_{2}}\) can be computed by solving the following optimization problem:

\[}=*{argmin}_{^{n} ^{L_{2}}^{L_{2}}}\{_{i=1}^{n}_{l=1}^{L_ {2}}_{j=1}^{n}(_{i,l}^{T}K(_{i},_{j}),_{j},)}{ y_{i,l}} )\}.\] (3)

To solve this problem, \(_{j},_{1})-f(_{j},_{2})}{y_{i,l}^{(1) }-y_{i,l}^{(1)}}\) can act as a substitute of \(_{j},)}{ y_{i,l}}\) since there is no ground truth. However, the problem is still not practical to solve because we can not obtain \(f(_{j},_{2})\) without retraining the model. Even though it isn't necessary to traverse all \(i\), \(j\), and \(l\) to obtain the complete data, it still goes against our original intention to calculate \(I(i,l)\) efficiently. Furthermore, it is also difficult for us to determine how much data is sufficient to ensure the accuracy of the solution. Fortunately, with the help of Remark 1, we can bypass the process of finding enough \(_{j},_{1})-f(_{j}, _{2})}{y_{i,l}^{(1)}-y_{i,l}^{(2)}}\) and directly approximate \(_{j},)}{ y_{i,l}}\).

**Remark 1**.: _Given two infinitely differentiable functions \(f()\) and \(g()\) in a bounded domain \(D R^{n}\), \(||f()-g()||\) is always less than \(\). For any given \(\) and \(_{2}\), there exists an \(\) such that, in the domain \(D\), the measure of the region \(I\) that satisfying \(||)}{}-)}{}||>\) is not greater than \(_{2}\), i.e, \(m(I)_{2}\)._

Remark 1 gives us the intuition that we can avoid retraining our downstream models by first-order approximation. However, some issues still need to be clarified. First, we consider neural networks used in the downstream task as infinitely differentiable functions since in practical applications, it is unlikely for computed floating-point numbers to precisely equal non-differentiable points. Second, Remark 1 limits the definition domain to a bounded region \(D\). Time series data is usually bounded (for example, the renewable generation sequence cannot be greater than the installed capacity), making this assumption reasonable. Finally, Remark 1 can be rephrased as the better the approximation of the original function, the better the approximation of its derivative, that is, we can have a \(}{m(D)}\) probability of fitting the derivative well. Therefore, the optimization problem (3) can be transformed into an easier one. (Note that we indicate the existence of \(\) that meets the conditions in this remark, but make no restrictions on \(\), while it is often difficult for us to make the approximation error of the original function sufficiently small. If the \(\) in the remark is infinitely close to 0, practical applications will encounter difficulties. However, in gradient descent-based neural network training, such situations often do not hinder our practical applications. Due to the space limit, the full theoretical discussion is provided in the Appendix.)

\[}} =*{argmin}_{}^{n}^{L_{2}}}\{_{i=1}^{n}(_{j=1}^{n} _{j}^{JT}K(_{i},_{j} ),f(_{i},))\},\] (4) \[_{i,l}} =}}_{i}}{ y _{i,l}}.\] (5)

Now the problem is converted to solving the problem (4). Intuitively, we solve it by projecting it onto the RKHS subspace spanned by the kernels,

\[}}=*{argmin}_{}^{n}^{L_{2}}}\{_{i=1}^{ n}(^{n}_{j}^{JT}K (_{i},_{j})}_{f_{K}(_{i}) },f(_{i},))+^{L_{2}}_{,l}^{}_{l} _{,l}^{}}_{\|f_{K}\|_{_{K}}^{2}}\},\] (6)

where \(_{l}\) is the kernel gram matrix defined as \(_{l,ij}=(_{i},_{j })_{l}\). Considering the first-order optimality condition, \(_{i,l}^{}=-(_{K}(_{i}),f(_{i},))}{  f_{K}(_{i})_{l}}\). Recalling our goal of estimating the relationship between \(}}\) and \(y_{i,l}\) in (5), their relationship is still unclear. This is because the objective of the optimization problem is to construct an approximation model without considering the role of label value \(y_{i,l}\). To clarify the effect of \(y_{i,l}\), we introduce an approximation by trigonometric inequality that \((f_{K}(_{i}),f(_{ i},))(_{i},f (_{i},))+(f_{K }(_{i}),_{i})\). The second term on the right side is the loss function corresponding to the downstream model, and in the case of training convergence, this should be close to a constant. Therefore, the optimization problem (6) can be rewritten as

\[}}=*{argmin}_{}^{n}^{L_{2}}}\{_{i=1}^{n} ((_{i},f(_{i}, {}))+(f_{K}(_{i}), _{i}))+^{L_{2}} _{,l}^{}_{l}_{,l }^{}}_{\|f_{K}\|_{_{K}}^{2}}\}.\] (7)Formally, the solution are \(}_{i}^{}=-(f_{K}( _{i}),_{i})}{ f_{K}(_{i})}\) and \(}_{i,l}=-(f_{K}( _{i}),_{i})}{ f_{K}(_{i}) y_{i,l}}\). Furthermore, since \(f_{K}()\) is used to approximate \(f(,)\), we use \(f(,)\) to replace \(f_{K}()\) to simplify the calculation. With the above preparation, the \(I(i,l)\) can be represented as follow with NTK kernel ,

\[_{k=1}^{m}-(f(_{i}^{v},),_{k}^{v})}{ f(_{k}^{v},)}(f(_{i},),_{i})^{T}}{ f(_{i},_{l}) y _{i,l}}}_{_{i,l}^{}}_{i}, ) f(_{k}^{v},)}{} }_{NTKkernel}.\] (8)

### Similarity Calculation Acceleration

In the previous section, to gauge the effects of substituting \(y_{i,l}^{(1)}\) with \(y_{i,l}^{(2)}\) on the downstream task, we utilized the Neural Tangent Kernel to assess the similarity between the model outputs for inputs \(_{i}\) and \(_{k}^{v}\). Given that the model's output length is \(L_{2}\), the computational complexity of calculating \(I(i,l)\) for all time steps in \(\) scales as \((mL_{2}P)\), where \(P\) denotes the total number of parameters in the model \(f(,)\), i.e., \(||\). In numerous time series applications, such as forecasting, \(L_{2}\) can be substantially large (e.g., 128), rendering the evaluation process for all imputations time-consuming. To mitigate this challenge, we propose a method to compress the size of \(_{i},)}{}\). Our approach is inspired by the observation that in time series forecasting, the output of \(f(,)\) typically exhibits smooth variability across different \(l\) values. Therefore, we posit that the model output \(f(_{i},)\) resides in a low-dimensional space spanned by a limited number of smooth basis functions. In mathematical terms, \(f(_{i},)^{}f(_{i},)\) where \(^{r L_{2}}\) consists of rows each representing a predefined smooth vector, \(^{}^{L_{2} r}\) is the pseudo-inverse of \(\), and \(r\), which is significantly smaller than \(L_{2}\), denotes the number of basis functions employed to approximate \(f(_{i},)\). Consequently, we can approximate \(_{i},)}{}\) as:

\[_{i},)}{} ^{}f(_{i}, )}{}.\] (9)

This approximation allows for the compression of the model output, thereby reducing the number of gradients that require computation. Through this simplification, the computational complexity for calculating \(I(i,l)\) decreases to \((mrP)\), substantially less than the original complexity.

In our experiments, we further simplify by assuming \(\) to be a block diagonal matrix, defined as \((,_{2},,_{c})\), where \(_{1}==_{c-1}\) are vectors of length \( L_{2}/c\) with all elements equal to 1, and \(_{c}^{L_{2}-(c-1) L_{2}/c}\) is a vector with all elements equal to 1.

### Task-oriented Imputation Evaluation

We have introduced a method for computing the indicator \(I(i,l)\), which assesses if replacing \(y_{i,l}^{(1)}\) with \(y_{i,l}^{(2)}\) results in a reduced loss for the downstream task. Given two sets of imputation results, \(\{_{i}^{(1)}\}_{i=1}^{n}\) and \(\{_{i}^{(2)}\}_{i=1}^{n}\), derived from distinct imputation techniques, we can evaluate \(I(i,l)\) across all samples and time steps, and identify that \(_{i}^{(2)}\) outperforms \(_{i}^{(1)}\) at time step \(l\) if \(I(i,l)\) greater than zero and vice versa if the value is lesser. In contrast to conventional evaluation strategies, our proposed method does not necessitate the availability of the ground truth \(\), thereby enhancing its practical utility in myriad real-world scenarios where actual values remain unobtainable. This feature renders our approach significantly more adaptable to situations where empirical truths are elusive.

### Task-oriented Imputation Ensemble

Given that our proposed method can evaluate the quality of two imputations at the time step level, a natural extension is to combine these two sets of imputations to derive an improved result. Specifically, we can generate a new set of imputations \(_{i}^{}\) for the \(i\)-th sample, where the \(l\)-th entry is \(y_{i,l}^{(2)}\) if \(I(i,l)>0\), and \(y_{i,l}^{(1)}\) otherwise. Based on the definition of \(I(i,l)\), we anticipate that a model trained using \(_{i}^{}\) will incur a lower loss compared to one trained with \(_{i}^{(1)}\), thereby yielding better imputation results. It is important to note, however, that the calculation of \(I(i,l)\) is predicatedon the scenario where only the \(l\)th timestep in the \(i\)th sample from \(\{^{(1)}\}_{i=1}^{n}\) is substituted with \(y_{i,l}^{(2)}\). This consideration omits the potential interactions among samples. Consequently, in practical implementations, we opt to substitute only the timesteps that rank within the top \(c\%\) of \(I(i,l)\) values. Our experiments, detailed in 3.3.2, confirm the efficacy of our proposed task-oriented imputation ensemble method. Our proposed ensemble process is summarized in Algorithm 1.

``` Data: Training data \(\{(_{i},_{i}^{(1)})_{n}\}\) and \(\{(_{i},_{i}^{(2)})\}_{n}\); Estimated gain on Validation data \(\{I(i,l)\}_{i=1:n,l=1:L_{2}}\); Downstream task model \(f(,)\); Replacing percentage \(c\%\)
1 Calculate \(threshold=P_{1-c}\{\{I(i,l)|I(i,l)>0\}\}\)
2for\(i=1\) to \(n\), \(l=1\) to \(L_{2}\)do
3if\(I(i,l)>threshold\)then
4 Let \(y_{i,l}^{}=y_{i,l}^{(2)}\)
5else
6 Let \(y_{i,l}^{}=y_{i,l}^{(1)}\)
7 end if
8
9 end for
10
11 Train \(f(,)\) on \(\{(_{i},_{i}^{})\}_{n}\) Result:\(f(,)\) ```

**Algorithm 1**Task-oriented Imputation Ensemble.

## 3 Experiment

### Datasets and Experiment Setup

To validate our method, we conduct experiments on six datasets: the GEF load forecasting competition dataset with the corresponding temperature , the UCI dataset (electricity load and air quality) , the Traffic dataset containing road occupancy rates2, and two transformer datasets, ETTH1 and ETTH2 . Note that we use the hourly resolution version of the UCI electricity dataset from  in the main experiment. In our main experiment, we set the downstream task as univariate time series forecasting, with both input sequence and prediction lengths set to 24. In addition to the GEF dataset, we implement our method on the 'OT' time series in ETH1 and ETH2, the mean value of the road occupancy rate in Traffic, the temperature in the UCI air quality dataset, and the total electricity consumption of 321 users in the UCI electricity dataset. It is important to note that there are no original missing values in these datasets. To simulate the missing values situation, we randomly set masks with lengths in , and replace the original values with the average value at the corresponding positions as the baseline. For the missing rate setting, if the missing rate is too low, the difference between different imputation methods may be small, while if the missing rate is too high, the even best imputation method will also be difficult to obtain reasonable results. Based on the above considerations, we mainly consider 40% missing rates as our main experimental setup. Meanwhile, we will provide experimental results under other missing rate settings in [30%, 50%, 60%] in the Appendix.

### Time Series Imputation Methods

To verify the performance of our strategy in evaluating different time imputation methods, we introduce multiple advanced time imputation methods. Firstly, as mentioned in the last subsection, we use the basic mean value imputation as the baseline. Secondly, we consider several time series imputation methods based on deep neural networks. They are GPVAE  and USGAN  based on generative neural network, mRNN  and BRITS  based on RNN structure, SAITS , and ImputeFormer  based on attention mechanism. All the implementations of the above models are with the help of the toolkit called PyPOTS . In addition, we also implement the network structure of a spatiotemporal graphs-assisted method called SPIN  for time series imputation. All the details of the neural network setting will be described in the Appendix.

### Experimental Results

#### 3.3.1 Application 1: Estimate the Gain

In this section, we examine the estimated gains of imputation for each time step. We divide the GEF dataset into a training set and a test set, where the training set includes load data from 2011 and the test set includes load data from 2012. We replace 40% of the load data in the training set with the average value at the corresponding position as the baseline, apply the linear interpolation method to replace the corresponding baseline, and use them as training labels separately. In the training set, we have obtained a total of 8760 training samples. Therefore, we replace the labels of each sample one by one to construct new 8760 sets of samples, retrain 8760 forecasting models, test their performance on the test set, and compare the performance of the new model with the model trained on the mean value-based samples. Note that although our estimation is done at each time step of each sample, the time consumption of replacing each time step and retraining is too high. Therefore, we replace all the time steps in each sample and sum up the benefit estimates for each time step as the benefit estimate for the entire sample after replacement. We adopt the 3-layer MLP structure used in  and extend it to be used for time series. In addition, we have also added a simple and widely used forecasting model, DLinear , as our forecasting backbone model.

As shown in Figure 1, we use two metrics to compare the performance of different methods, where Corr represents the correlation between estimated gain and actual gain, and accuracy represents the percentage of the same sign between actual gain and estimated gain. In the MLP model, the Influence Function achieves a good correlation. However, in terms of accuracy, the accuracy of the Influence Function rapidly decreases as the percentage of estimated data to total data increases. On the contrary, our method exhibits good characteristics at different percentages. In addition, the

   Time & Seq-sim & Seg-4 & Seg-2 & Seg-1 & Retraining \\   MLP & 46s & 18s & 17s & 11s & 48h \\ DLinear & 10s & 8s & 8s & 7s & 48h \\   

Table 1: Time comparison between different methods.

Figure 1: The correlation and accuracy comparison between the estimation of imputation value gain and actual gain (MSE\(\)), where INF (section D.5) represents our modified Influence Function, Seq-sim represents our original method, and Seg-N represents the acceleration method divided by N segments. The horizontal axis here represents selecting the sample with the highest x% influence based on the absolute value of the estimation.

segmented acceleration method generally shows that the more segments there are, the better the performance. Although it performs poorly in small percentages, it exhibits good performance in a wide range of data. In the DLiner model, both our method and the segmented acceleration method present similar situations to those in the MLP model. However, the Influence Function exhibits poor performance, with estimation accuracy and correlation significantly lagging behind our method. In addition, Table 1 reports the total time required for different methods to run on the GTX4090, indicating that retraining requires a significant amount of time while our method achieves a good balance between performance and time consumption. It is worth mentioning that when we focus not only on the small portion of time steps with the greatest impact but also examine the impact of relatively large time steps on the forecasting results, our segmented acceleration method achieves very good performance while reducing the required time.

#### 3.3.2 Application 2: Combine Different Time Series Imputation

Similar to the previous section, we use mean value as a baseline to estimate the benefits on the validation set (not test set) obtained by imputation at each time step and replace the \(10\%\) time step with the highest benefits to train the forecasting model. In addition, the missing values in the time series damage the original characteristic of the time series. Although imputation values can repair it to some extent, they may still have adverse effects on downstream tasks. Therefore, we also introduce the Influence Function as a comparison, using it to estimate the \(10\%\) points with the worst impact on the forecasting results after imputation and remove them, which is often the case in the application of Influence Function .

Table 2 reports the comparison of MSE for downstream forecasting tasks (here we use the DLinear as the backbone model), and we will analyze from two aspects.

**I. Comparison between Original and Gain Estimation**. Part I and II in Table 2 demonstrate that combining different imputations can enhance the performance of downstream tasks on all datasets. The improvements in the GEF dataset, Electricity dataset, and Traffic dataset are significant, while the enhancement in others is relatively less noticeable. The primary reason is that, in those datasets, the performance of other imputation methods considerably lags behind the original one, making the replacement of the original label with a newly imputed label seem less impactful. However, after incorporating our estimation, there is still a slight improvement in forecasting performance. On the other hand, when considering combining two imputation methods with similar original performance, incorporating our method will bring significant gains (as seen in the GEF datasets). It's worth noting that the mean value used as a baseline outperforms other imputation methods in most cases, primarily because the training data input is also based on mean value imputation, facilitating unified and convenient comparisons. In practical applications, we can also apply other advanced imputation methods to the input data and modify the labels based on the estimated benefits.

**II. Comparison between Gain Estimation and Influence Function**. Part I, II, and III Table 2 indicate that discarding a certain number of samples according to the Influence Function can indeed improve the performance of forecasting; however, such improvement is not universal. In the AIR dataset, discarding some data can negatively impact the performance of most methods. This may be due to the small amount of data contained in the AIR dataset, resulting in a greater adverse effect when discarding data. The operation of discarding data can only consider one imputation method, while our method can combine any two imputation methods to achieve better results. Furthermore, the results of repeated experiments show that the strategy of modifying values at specific time steps can make performance more stable, as its variance is significantly smaller than that of discarding data.

In addition to the univariate input results displayed in Table 2, we also include the results of multivariate inputs, which are common in practical applications. For instance, when predicting power loads, temperature is a crucial external variable. A large amount of research has focused on studying the relationship between load and temperature . In this experimental setting, unlike multivariate forecasting, temperature plays an auxiliary role in load forecasting while there is no need to forecast temperature itself. Consequently, we conduct experiments on the GEF dataset, inputting temperature as an external variable into the model to forecast loads. Table 3 presents the performance of our model under multivariate input, which is consistent with the univariate input scenario, and incorporating our method proves to be beneficial.

## 4 Conclusion and Future Work

In this work, we propose to evaluate the imputation values at each time step for the impact on downstream forecasting tasks. On the one hand, our method can accurately estimate the gain of each imputation value without retraining. On the other hand, our method can also combine different time series imputation strategies based on the estimation of gain to obtain better imputation for downstream tasks. To ensure the applicability of this method in practical scenarios, we also provide an accelerated calculation method. In the future, we will focus on further downstream tasks, such as optimization tasks based on prediction values, and build an end-to-end evaluation strategy.

## 5 Acknowledgement

The work was supported in part by the National Key R&D Program of China (2022YFE0141200), in part by the Research Grants Council of the Hong Kong SAR (HKU 27203723), and in part by the Alibaba Group through Alibaba Research Intern Program.