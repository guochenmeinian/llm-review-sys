# Yo'LLaVA:

Your Personalized Language and Vision Assistant

 Thao Nguyen Haotian Liu Yuheng Li Mu Cai Utkarsh Ojha Yong Jae Lee

University of Wisconsin-Madison

https://thaoshibe.github.io/YoLLaVA/

###### Abstract

Large Multimodal Models (LMMs) have shown remarkable capabilities across a variety of tasks (e.g., image captioning, visual question answering). While broad, their knowledge remains generic (e.g., recognizing a dog), and they are unable to handle personalized subjects (e.g., recognizing a user's pet dog). Human reasoning, in contrast, typically operates within the context of specific subjects in our surroundings. For example, one might ask, "What should I buy for _my dog_'s birthday?"; as opposed to a generic inquiry about "What should I buy for _a dog_'s birthday?". Similarly, when looking at a friend's image, the interest lies in seeing their activities (e.g., "_my friend_ is holding a cat"), rather than merely observing generic human actions (e.g., "_a man_ is holding a cat"). In this paper, we introduce the novel task of personalizing LMMs, so that they can have conversations about a specific subject. We propose Yo'LLaVA, which learns to embed a personalized subject into a set of latent tokens given a handful of example images of the subject. Our qualitative and quantitative analyses reveal that Yo'LLaVA can learn the concept more efficiently using fewer tokens and more effectively encode the visual attributes compared to strong prompting baselines (e.g., LLaVA).

## 1 Introduction

Consider the following questions: "What is <bo> doing in this photo?" or "I'm thinking about buying a birthday gift for <bo>. What do you recommend?"1 While simple, existing Large Multimodal Models (LMMs)  are not designed to answer such _personalized_ questions. For example, while these models can use their broad knowledge to categorize objects and people in an image (e.g., Fig. 1

Figure 1: Given just a few images of a novel subject (e.g., a dog named <bo>), Yo’LLaVA learns to facilitate textual/visual conversations centered around that subject.

(Right), "There are two individuals who appear in a home setting..."), they cannot recognize those objects as specific subjects known to the user nor provide any personalized details (e.g., "The man in the image is your friend <A>, and he is holding a cat."), without access to additional context.

Personalized AI assistants would be useful for a wide range of applications including health and wellness, education and learning, entertainment, etc. In particular, the way that individuals interact with and perceive modern AI systems can vary widely, underscoring the need for such systems to adapt to user-specific concepts and contexts . LMMs by default lack personalization primarily due to the nature of their training data (e.g., ), which predominantly consists of common and generic concepts (e.g., person, dog, bicycle), without personalized concepts (e.g., a person named <A>). Unfortunately, gathering a training dataset that is personalized at scale can be difficult due to privacy concerns and also because the number of images for each subject might be limited (e.g., a user is only willing to share 4-5 images of a person named <A>).

In this paper, we introduce Yo'LLaVA, a novel personalized LMM built upon the state-of-the-art LLaVA framework . Given just a handful of images of a personalized concept (e.g., a personal stuffed animal), Yo'LLaVA learns to embed the concept into a few special tokens (e.g., <sks>), and can then answer questions about it when prompted. While one could try to describe the personalized visual concept using language (e.g., "My stuffed animal named <sks> is a yellow-white plush shaped like a dog"), textual descriptions can often be vague and may not capture all visual details (e.g., <sks> has a unique appearance that resembles a Shiba Inu) . In these cases, learning a visual representation of the personalized concept can be much more precise.

There are two key challenges for learning a personalized LMM. First, when personalizing an LMM, we want to ensure that its broad pre-trained knowledge is unaffected (i.e., there is no catastrophic forgetting ). To this end, we freeze nearly all the LMM's pre-trained weights, and introduce a set of learnable input tokens : one special token <sks> and \(k\) latent tokens <token1><token2>...<tokenk>. The special token acts as an identifier for the personalized concept, so that the user and model can refer to it in the input and output, respectively, while the latent tokens help to capture <sks>'s relevant visual details. The only pre-trained weights that we train are the output weights for the special token. In this way, the model can acquire new personalized knowledge through the learnable tokens, while retaining all of its prior knowledge in its original weights. This design has the added benefit of being fast to train and lightweight to store.

The second challenge is enabling the LMM to capture fine-grained visual details. For example, when learning about a personalized subject e.g., <A>, we want the model to learn to recognize and distinguish <A> from other objects of the same category in a meaningful way; e.g., that <A> is an Asian man who wears black glasses, has short black hair, etc., and is visually distinct from other Asian men who have similar features. To this end, we perform hard negative mining  to gather negative examples that are visually similar but not identical to the personalized concept. We then train the model with a large set of questions (e.g., "Is <A> is in this photo?") with both positive and negative image samples (e.g., "Yes" and "No"). In this way, the model learns to embed the fine-grained visual attributes of the personalized concept into the learnable tokens.

**Contributions.** In summary, our main contributions are:

* _Personalized Large Multimodal Models_: We introduce a novel task of personalizing LMMs, enabling them to adapt to and answer to user-specific concepts.
* a personalized LMM that efficiently learns personalized concepts with only a handful of images of each concept, while retaining broad pre-trained knowledge.
* _Training dataset_: We create a novel dataset specifically designed to explore the task of personalizing LMMs, providing a solid foundation for both training and evaluation.
* _Open source_: We will publicly release the training and evaluation data for the personalized concept modeling task, as well as our code and models.

  
**Prompting** & **Learnable Prompt (Ours)** \\  sks> is a yellow-white plush shaped like a dog. & sks> is token1><token2>... token1>. \\ Can you check if sks> in this photo? & Can you check if sks> in this photo? \\   

Table 1: Prompting vs. Learnable Prompt (Yo’LLaVA). Instead of using an implicit text-based prompt (left), we personalize LLMs for a subject (e.g., <sks>) by employing a learnable prompt (right).

Related Work

**Large Multimodal Models.** In recent years, we have witnessed the emergence of large language models (LLMs) [1; 24; 25; 3], with significantly improved general question-answering and reasoning capabilities. These advancements have been further extended and we now have systems capable of language understanding as well as visual perception, i.e., Large Multimodal Models (LMMs) [26; 2; 4; 10]. These LMMs represent a groundbreaking frontier, enabling models to process and reason with input images alongside text, with applications spanning various domains such as embodied AI and robotics. However, while these models can showcase their general knowledge in many ways (e.g., recognizing and writing about a famous person or a dog breed in given image), they are not designed to handle personalized queries (e.g., recognizing _you_ or _your dog_). In this work, we propose a method to extend the existing general purpose knowledge of such a LMM model to some new, personalized knowledge important for a user so that a tailored, personalized experience can be given to that users (e.g., answering questions that relate to _your dog_).

**Parameter-Efficient Fine-Tuning.** Traditionally, fine-tuning has been the standard approach to adapt trained models to new tasks or concepts. However, in the era of LLMs/LMMs, fine-tuning these models can be extremely costly in both compute and memory requirements. To overcome this limitation, Parameter-Efficient Fine-Tuning (PEFT) methods has been introduced to adapt these models for various downstream tasks with only a small number of trainable parameters. There are two main directions: (1) Introducing additional trainable parameters into existing layers of the model (e.g., LoRA , LLaMA-Adapter ). (2) Soft prompt tuning: learning prompts (e.g., text prompts) that can guide the models to adapt to new tasks or datasets. The latter concept is inspired by the ability of prompt engineering, which leverages task-specific instructions (prompts) to enhance model abilities without modifying model parameters. Soft prompt tuning has shown impressive results in various tasks (e.g., agent tool calling ) and the concept has been extended to other domains (e.g., recovering prompts from generated images , learning image edits ). In this paper, we leverage the idea of soft prompt tuning to learn personalized concepts within the context of LMMs.

**Personalizing Multimodal Models.** In the context of image generation, personalization often refers to the task of enabling models to recreate pixel-level visual details of a given subject [29; 13; 30]. Proposed methods often optimize either or both of the following: (1) token(s) for a specific concept (e.g., [13; 30]) or (2) the part/entire of image generation model (e.g., ). In contrast, in the NLP community, personalization usually involves making LLMs behave in a specific way (e.g., adopting a humorous or informal tone) [31; 32] or enabling LLMs to provide personalized responses (e.g., recommending movies for specific user ). The main approaches include (1) prompting (e.g., modifying system prompts for specific persona "You are a humorous person") or (2) information retrieval (e.g., referring to users' saved metadata during communication). In the context of LMMs, however, personalization has been understudied. Personalizing a LLM requires extracting information not only from text (e.g., "<bo> is a Shiba Inu"), but also from visual inputs (e.g., "This is a photo of <bo>"). To the best of our knowledge, our paper is a pioneer in the personalization task for LMMs. A concurrent work tackling the same problem is MyVLM ; but it relies on external modules to recognize subjects, and is therefore not a completely integrated system. We position our work in the in-between image understanding and personalized conversation: After personalization, the LMM can not only recognize visual aspects of the subject, but also retain reasoning abilities about that subject (e.g., "<bo> is a Shiba Inu, so he may be very alert and loyal"). We also aim to have a lightweight, complete system in which no external modules are involved, relying solely on the LMM itself.

## 3 Yo'LLaVA: Personalizing LMMs to Understand User-Specific Concepts

Given a handful of images of a person or a subject \(I^{1},,I^{n}\) (e.g., 5 images of your plush toy called <sks>) without any textual labels or captions, our goal is to embed _this subject_ into a pre-trained LMM (in our case, LLaVA [2; 10; 35]), so that both the user and model can communicate using an identifier (e.g., <sks>) for that subject, while also retaining the broad pre-trained knowledge.

After being personalized, our method (Yo'LLaVA) can: (1) recognize _the subject_ in new images during testing (e.g., Yo'LLaVA can determine whether <sks> is in a photo or not); (2) support visual question answering about _the subject_ (e.g., given a new photo, one can ask about <sks>'s location); and (3) support text-only conversations without any test-time reference images about _the subject_ (e.g., ask questions about intrinsic attributes of <sks> like its color, shape, etc.).

We start by detailing how we represent _the subject_ as a learnable concept for LLaVA in Sec. 3.1. We then discuss our methods to enable Yo'LLaVA's to recognize _the subject_ with hard negative example mining in Sec. 3.2, followed by a discussion on enhancing understanding through hard negative examples enhancement in Sec. 3.2.

### Personalizing the Subject as a Learnable Prompt

Prompting is a straightforward and natural way to steer multimodal models. For example, when presented with an image, if one wishes to ask an LMM whether their personal toy (e.g., called <sks>) is in that image, one might begin by providing a personalized description (e.g., "<sks> is a yellow-white plush shaped like a dog", Table 1, Left). However, manually crafting such prompts can be cumbersome and often impractical, as it can require an excessive number of words (tokens) to accurately capture the subject. Crucially, describing all (subtle) visual details of a subject with words can be extremely challenging.

Specifically, given a set of images \(I^{1},,I^{n}\) of a subject (e.g., called <sks>), we define a personalized soft-prompt for the subject as:

"<sks> is <token1><token2>...<token2>."

Here, <sks> is a newly added vocabulary token that serves as an identifier for the subject, allowing both the user and the model to reference this subject when asking or answering questions. The tokens {<token;>}\({}_{i=1}^{k}\) are soft tokens that are learned to embed visual details about the subject. Since <sks> is a new entry to the token vocabulary, we expand the final classifier head matrix of the language model \(W\) from \(C N\) to \(C(N+1)\), where \(C\) is the hidden feature dimension and \(N\) is the original vocabulary size. In our Yo'LLaVA framework, the trainable parameters are:

\[=\{_{k},\,W_{(:,N+1)}\}.\]

Herein, we train the \(k+1\) newly added input tokens and the final classifier head matrix \(W\) associated with the identifier token <sks> only. Except from this, all other components of the pre-trained LLaVA  are frozen (i.e., vision encoder, vision projector, and language model).

To help the model learn the new visual concept, we generate conversational training data triplets \((I^{i},_{}^{i},_{}^{i})\), where \(I^{i}\) is an input image, \(_{}^{i}\) is the question, and \(_{}^{i}\) is the corresponding answer (Details on dataset creation are in Sec. 3.2 and 3.3). We use the standard masked language modeling loss to compute the probability of the target responses \(_{}\) for each conversation of length \(L\) by:

\[p(_{}|I^{i})=_{j=1}^{L}p_{}(_{j}|I^ {i},_{,<j}),\] (1)

where \(\) is the trainable parameters, and \(_{,<j}\) are the instruction and answer tokens in all turns before the current prediction token \(_{j}\), respectively.

### Enhancing Recognition with Hard Negative Mining

The most basic and essential ability for a personalized LMM is its capability to recognize a personalized subject (e.g., <sks>). A direct approach to achieve this is by creating visual recognition question and answer templates for training images. These questions can be as simple as asking whether <sks> is in the photo. However, training with only positive examples (or in another words, only images of <sks>) can lead to an undesirable shortcut, where the model learns to always answer _"Yes"_ for any question relating to the subject regardless of whether the subject is actually in the photo; rather than

Figure 2: Training pipeline.

learn the necessary visual attributes to recognize the subject. To overcome this, we randomly sample 100 images from LAION  to serve as negative examples (images that do not contain <sks>). Training with a mixture of positive and negative examples helps the model understand the visual attributes of the subject (e.g., <sks> is a stuffed animal), but it can also lead to over-generalization. For example, if <sks> is a yellow dog-shaped plush, the model can overgeneralize and assume that all yellow stuffed animals are <sks>, which is undesirable. The challenge remains in how to improve the model's ability to distinguish more fine-grained features of the subject that can help differentiate it from visually similar ones (e.g., other similar yellow stuffed animals).

To overcome this, we employ hard negative mining . If the subject <sks> is a stuffed animal, the hard negative examples would be other stuffed animals that are not identical to the subject (Fig. 3, more examples of hard negatives can be found in Appendix I). By exposing the model to a diverse range of visually similar but non-identical objects, we encourage it to learn more discriminative features and prevent over-generalization. We retrieve the negative examples from LAION . Specifically, for each training image \(I^{i}\), \((i=1,...,n)\), we retrieve the top \(m\) images with highest CLIP image embedding similarity . Finally, the negative example data are: 100 _easy_ and \(n m\)_hard_ negative examples for the subject <sks>.

To enable the model to recognize subjects in an image, we pair training images with recognition question-answer template. This process involves asking whether a specific subject (e.g., <sks>) is present in the photo. In particular, during training, each positive and negative image is randomly paired with one of the question-answer templates (Details in Appendix F). Answer templates are sampled based on the type of input image (Positive vs. Negative). Essentially, all question-answer pairs are framed as binary classifications, with Yes/No questions determining if the subject (e.g., <sks>) is visible in the photo (See Type 2 and 3 QA in Table 2).

### Learning to Engage in Natural Conversations about the Subject

So far, Yo'LLaVA is capable of recognizing a subject in a new image. However, learning with recognition data alone does not enable the model to communicate with users about anything beyond recognition. For example, while the model may correctly answer whether <sks> is present in an image, it might struggle with other questions (e.g., "Describe <sks> in detail", see Tab. 7).

Thus, we next aim to create more generic conversations for training (e.g., visual question answering). These conversations focus on the subject's visual characteristics, as opposed to the recognition abilities used in the previous recognition conversations.

For this, we use a template consisting of 10 manually written, basic questions related to intrinsic attributes, divided into two main categories: human-related questions (e.g., "What is the hair color of this person?") and subject-related questions (e.g., "What color is this subject?"). We exclude complex or nuanced questions that may not generalize to all (e.g., "What is the tail color of this toy?"). We show a specific example in the Type 1 QA in Table 2 (Please refer to Sec. C for details). For each image \(I^{i}\), we employ LLaVA  to generate an answer for each template question, forming a conversation with triplet \((I^{i},^{i}_{},^{i}_{})\).

 
**Positive Examples** \\ _1 — Basic question answering_ \\ Question: What type of object is <sks>? (Note: No image) \\ Answer: <sks> is a stuffed animal. \\ _2 — Positive recognition task_ \\ Question: <image> Can you see if <sks> is in this photo? \\ Answer: Yes, <sks> is in the photo. \\ 
**Negative Examples** \\ _3 — Negative recognition task_ \\ Question: <image> Can you check if <sks> is in this photo? \\ Answer: I have analyzed the image, \\ and I can confirm that <sks> is not present in the photo. \\  

Table 2: Example of training dataset for subject <sks>.

Figure 3: Training data creation.

[MISSING_PAGE_FAIL:6]

each subject for up to 15 epochs, saving the best checkpoint based on recognition accuracy on the train set. All experiments are conducted on a single A6000 GPU.

**Dataset.** We collect a new dataset of 40 subjects: Person (10), Pets (5), Landmarks (5), Objects (15), and Fiction Characters (5). The dataset is divided into train and test splits. The number of images per subject varies from 10-20 images. Please refer to Appendix C for more details about our dataset.

**Baselines.** We choose Vanilla LLaVA  as our main baseline. We consider two main variants of LLaVA: Naive LLaVA, which is simply LLaVA itself without any personalized information; and LLaVA + Personalized Description, where LLaVA is assisted with personalized descriptions about the subject. We employ two methods to acquire personalized descriptions: (1) Human-written: We manually write a description for each subject (see Table 4, "Human"), mimicking a real scenario where a user describes a personalized subject to LMMs. (2) Automated description: We first prompt LLaVA to generate captions for all training images of this subject. We provide two ways to use these captions: (a) We concatenate all captions together resulting in a long, rich description for the subject; (b) We prompt LLaVA to summarize these captions into a brief personalized description (See Table 4 "LLaVA"). These automated descriptions correspond to "LLaVA + Prompt, Text" with \(\)1.3k (long) and \(\)16 (summarized) tokens in Table 5, respectively.

To expand our evaluation of prompting, we extend our analysis to GPT-4V, a leading proprietary multimodal chatbot. We use the same methodology to generate brief personalized descriptions (Table 4, "GPT-4V"). Additionally, as GPT-4V supports multi-image conversations (a feature not supported by LLaVA), we also experiment with personalized image prompting. Specifically, we present training images/s of the subject together with an introduction text (e.g., "You are seeing photo(s) of a subject named <sks>"). These experiments correspond to "GPT-4V + Prompt, Image" with \(\)1k (given 1 image) and \(\)5k tokens (given 5 images), respectively (Table 5). Since images convey more information than text, we hypothesize that personalized image prompts represent the upper bound for prompting effectiveness. Notably, due to GPT-4V's closed-source nature, our approach cannot be directly integrated, making this comparison purely for reference.

## 5 Results

We showcase Yo'LLaVA's performance across two primary tasks: (1) Recognition Ability and (2) Question Answering. The first task evaluates Yo'LLaVA's ability in recognizing personalized subject within a test image, while the second assesses the model's capacity to have natural conversations (i.e., refer to and respond to queries) about a personalized subject.

### Recognition Ability

First, we evaluate the model's ability to recognize a personalized subject <sks>. We have 40 subjects, each with 5 to 10 test images containing the corresponding subject. For each subject, all of its test images serve as positive test images, while test images from the remaining 39 categories serve as negative test images. In total, there are 333 positive and 13,320 negative testing samples in our experiment.

During testing, we show a photo to the model and ask, "Can you see if <sks> is in this photo? Answer with a single word or phrase." The ground-truth response is "Yes" for photos containing <sks>, and "No" for others. We report the accuracy for positive and negative test images in Table 5. Given the imbalanced test set, we calculate the weighted accuracy: weighted \(=0.5*\) accuracy positive \(+0.5*\) accuracy negative.

Table 5 shows results. As expected, the Vanilla LLaVA baseline cannot recognize the personalized subject, an ability not present in it, and we empirically notice that it always answers "No, it is not <sks>" (thus resulting in 0.5 accuracy). When we prompt it with a short personalized description (whether self-generated or crafted by a human), LLaVA achieves decent accuracy (i.e., 0.819-0.822 with \(\)16 tokens). On the other hand, overly lengthy descriptions negatively impact its performance (i.e., 0.650 with 1.3k tokens), likely due to too much side information that may not be helpful (e.g.,

  
**Human** & **LLaVA ** & **GPT-4V ** \\   <sks> is a male \\ Asian model with \\ white hair. \\  &  <sks> is wearing a \\ black jacket with a skeleton \\ ton design on the front. \\  & 
 <sks> is a fashionable individual with \\ short, styled, platinum blonde hair, often \\ seen in modern, stylish outfits. \\  \\   

Table 4: Example generated descriptions for a subject, which can be used in place of the image as references (In this case, a person).

details about the background). In contrast, Yo'LLaVA displays clear advantages with trainable tokens, achieving the highest accuracy (i.e., 0.924) with the roughly same amount of tokens.

We also present results using GPT-4V with both text and image prompting. Results indicates that Yo'LLaVA is better than GPT-4V with text prompting (i.e., 0.924 vs. 0.838-0.841). In terms of image prompting, GPT-4V performance improves with more reference images of the subject. Yo'LLaVA with just 16 tokens outperforms GPT-4V with single image prompting (\(\)1k tokens). Also, it is worth noting that Yo'LLaVA, even only with 16 tokens, yields almost comparable results with GPT-4V using 5k tokens (5 images as reference); see Fig. 4. We anticipate that integrating Yo'LLaVA with GPT-4V could significantly reduce the number of tokens used while maintaining performance; however, we could not try this since GPT-4V is a closed-source framework.

### Question and Answering

To evaluate the performance of the model on a question-answering task, we develop new benchmarks for both visual and text-only question answering. For the visual component, we present a photo of a <sks> subject and pose questions about it (e.g., "Where is <sks>?"). For the text-only component, we focus on questions concerning the intrinsic visual features of <sks> (e.g., "Is <sks> a dog or a cat?"). All questions are structured as multiple-choice options (A or B). In total, we create 571 questions; 171/400 visual/text-only questions. Examples are given in Appendix H. We report the accuracy of correctly answering the questions in Tab. 5.

Yo'LLaVA is the leading method in visual question answering (i.e., 0.929), followed by LLaVA  with a human-drafted personalized prompt. Overall, it is evident that if given an image, LMMs can use the presented information to answer questions accurately (e.g., given a photo of a dog, they can correctly identify the color of the dog's coat without knowing that the dog is named <bo>). For text-only question answering, where we do not have a test image and we directly ask questions about the subject, results indicate that text prompt (even by human) may not capture as many details as a trainable prompt, as evidenced by Yo'LLaVA still being the leading method (i.e., accuracy of 0.883) compared with both LLaVA and GPT-4V. When given image(s) as a prompt, GPT-4V can answer all the intrinsic questions very well (i.e., 0.982-0.987). But this is expected, because all the information can be found in the given image. However, it is worth noting that using an image as a personalized prompt requires at least 1k tokens, while Yo'LLaVA uses only 16 tokens!

### Comparison with MyVLM

We compare our method with the concurrent work of MyVLM  using their dataset, which consists of 29 different objects, and exactly follow their experimental protocol.

To evaluate a model's ability to recognize the personalized subject in an image, we utilize the same accuracy metric as MyVLM. If the subject is in the photo, we set the ground truth as "Yes"; otherwise, "No." We prompt Yo'LLaVA with "Can you see if <sks> is in this photo? Answer with a single word or phrase."

    &  &  &  &  \\   & Captions & External Recognizer & Visual & Text & Positive & Negative & Weighted & Average \\  MyVLM  & yes & yes & ✓ & 96.6 & 90.9 & 93.8 & 96.0 \\ Ours & no & no & ✓ & ✓ & **97.0** (+0.1) & **95.7** (+2.7) & **96.4** (+2.6) & **100.0** (+0.0) \\   

Table 6: Ours vs. MyVLM  following the experiment settings in . Yo’LLaVA (Ours) demonstrates advantages over MyVLM without relying on external recognition modules.

    &  &  &  &  \\   & Learnable & \(\) & Text & Human & Text & Human & Image & 0.925 \\ \# tokens & 16 & 0 & \(\)16 & \(\)1.3k & \(\)16 & \(\)16 & \(\)16 & \(\)1k & \(\)5k \\    \\ _Positive_ & 0.949 & 0.000 & 0.734 & 0.320 & 0.740 & 0.697 & 0.696 & 0.809 & 0.851 \\ _Negative_ & 0.898 & 1.000 & 0.903 & 0.980 & 0.903 & 0.979 & 0.985 & 0.992 & 0.998 \\ Weighted & **0.924** & 0.500 & 0.819 & 0.650 & 0.822 & 0.838 & 0.841 & 0.901 & **0.925** \\   \\ Visual & **0.929** & 0.899 & 0.913 & 0.883 & 0.925 & 0.932 & **0.936** & 0.866 & 0.887 \\ Text & **0.883** & 0.659 & 0.803 & 0.663 & 0.790 & 0.770 & 0.798 & 0.982 & **0.987** \\   

Table 5: Comparisons of Yo’LLaVA with LLaVA ; GPT-4V results with personalized prompt presented as reference. Figure 4: Number of prompting To-4V results with personalized prompt presented as reference.

We compare to the reported numbers for MyVLM, which evaluates their concept heads (external face/object recognizers). We also evaluate whether the trained LMM can generate a caption containing the subject's identifier e.g., <sks>. Following MyVLM, we measure "recall", which is whether <sks> appears at least once in the generated caption for its image. Table 6 shows the results. Our approach shows clear advantages for both metrics compared to MyVLM, despite being simpler and not relying on an external recognizer (e.g., a face recognizer).

## 6 Ablation Studies

**Number of trainable tokens.** We set the number of training images per subject at \(n=10\) and vary the number of trainable tokens \(k\) from 0 to 36. With \(k=0\), training is limited to the identifier token (e.g., <sks>). As shown in Fig. 5 (first row), training just this token yields a low accuracy of 24% in recognizing the personalized subject. Overall, as the number of latent tokens increases beyond \(k=8\), the model's ability to recognize personalized objects generally improves for both positive and negative examples. To balance accuracy (higher is better) and token length (lower is more efficient), we select \(k=16\) for our final model, which yields 91% accuracy in this ablation study.

**Number of images.** Next, we set the number of trainable tokens to \(k=16\) and vary the number of training images from \(n=1\) to \(n=10\). Fig. 5 (second row) shows that the model's recognition ability improves gradually with more photos. We opt for \(n=5\) in final version of Yo'LLaVA, as it is the minimum number of training images required to achieve 90+% accuracy in this ablation study.

**Dataset creation.** Finally, we conduct an ablation study on dataset creation. Table 7 presents the weighted accuracy for the recognition task and a qualitative example of a personalized model <bo> to demonstrate the model's capability in supporting question answering. Vanilla LLaVA  cannot perform either text conversation or recognition (it always answers "No" to all test images, 50%). After training solely on the recognition task (i.e., determining whether <sks> is in a given photo), LLaVA can recognize the subject to some extent (i.e., 70%), however, it still cannot perform text conversation tasks. After training with both synthesized conversation and recognition data, both recognition accuracy and conversation ability improve (i.e., 75%). Finally, with the introduction of retrieved hard negative examples (Yo'LLaVA), the accuracy is significantly boosted to 91%.

    & Acc. & Describe bo> in great detail. _(Note: Yo’LLaVA is not trained on this question)_ \\  Vanilla LLaVA & 0.500 & ✗ & I’m sorry, but I’m not sure what you’re asking for... _[omitted]_ \\ + Recognition & 0.707 (+0.207) & ✗ & I’m sorry, but I’m not sure what you’re asking for... _[omitted]_ \\ + Conversation data & 0.754 (+0.047) & ✓ & bo> is a Shiba Inu dog with a distinctive fox-like appearance... _[omitted]_ \\ + Retrieval Negative & 0.914 (+0.160) & ✗ & bo> is a Shiba Inu dog with a distinctive fox-like appearance... _[omitted]_ \\   

Table 7: Ablation study on dataset creation. To visualize the question-answering ability, a qualitative example of the personalized model for <bo> is shown (Training photos are provided in Fig. 1 ).

Figure 5: Ablation studies on the number of trainable tokens and training images. Overall, the model’s ability to recognize personalized subjects increases as these parameters increase.

Conclusion

We introduced the novel task of personalizing LLMs, which requires learning visual attributes of a given subject (e.g., a dog named <bo>) from only a handful of images, and then recognizing that subject in new images and performing question answering about that subject when prompted. To tackle this problem, we proposed Yo'LLaVA, where a personalized subject is represented by learnable prompts with an identifier (e.g., <sks>), and a series of \(k\) latent tokens (e.g., <token1>). Experiments showed that Yo'LLaVA can learn the concept more efficiently using fewer tokens and more effectively by capturing more visual attributes compared to strong prompting baselines (e.g., GPT-4 and LLaVA). A promising future direction involves integrating Yo'LLaVA with users' metadata (e.g., linking personalized concepts about a dog named <bo> to its medical records or preferences) for enhanced personalization in real-world applications.

Acknowledgements.This work was supported in part by NSF IIS2404180, Adobe Data Science award, Microsoft Accelerate Foundation Models Research Program, and Institute of Information & communications Technology Planning & Evaluation (IITP) grants funded by the Korea government (MSIT) (No. 2022-0-00871, Development of AI Autonomy and Knowledge Enhancement for AI Agent Collaboration) and (No. RS-2022-00187238, Development of Large Korean Language Model Technology for Efficient Pre-training).