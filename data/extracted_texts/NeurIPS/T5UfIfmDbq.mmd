# Monte Carlo Tree Search based Space Transfer

for Black-box Optimization

Shukuan Wang\({}^{1,2}\), Ke Xue\({}^{1,2}\), Lei Song\({}^{1,2}\), Xiaobin Huang\({}^{1,2}\), Chao Qian\({}^{1,2}\)

\({}^{1}\)National Key Laboratory for Novel Software Technology, Nanjing University

\({}^{2}\)School of Artificial Intelligence, Nanjing University

{wangsk, xuek, huangxb, songl, qianc}@lamda.nju.edu.cn

Equal ContributionCorresponding Author

###### Abstract

Bayesian optimization (BO) is a popular method for computationally expensive black-box optimization. However, traditional BO methods need to solve new problems from scratch, leading to slow convergence. Recent studies try to extend BO to a transfer learning setup to speed up the optimization, where search space transfer is one of the most promising approaches and has shown impressive performance on many tasks. However, existing search space transfer methods either lack an adaptive mechanism or are not flexible enough, making it difficult to efficiently identify promising search space during the optimization process. In this paper, we propose a search space transfer learning method based on Monte Carlo tree search (MCTS), called MCTS-transfer, to iteratively divide, select, and optimize in a learned subspace. MCTS-transfer can not only provide a well-performing search space for warm-start but also adaptively identify and leverage the information of similar source tasks to reconstruct the search space during the optimization process. Experiments on synthetic functions, real-world problems, Design-Bench and hyper-parameter optimization show that MCTS-transfer can demonstrate superior performance compared to other search space transfer methods under different settings. Our code is available at https://github.com/lamda-bbo/mcts-transfer.

## 1 Introduction

In many real-world tasks such as neural architecture search [56; 41; 42], hyper-parameter optimization [55; 4], and integrated circuit design [19; 30], we often need to solve black-box optimization (BBO) problems, where the objective function has no analytical form and can only be evaluated by different inputs, regarded as a "black-box" function. BBO problems are often accompanied by expensive computational costs of the evaluations, requiring a BBO algorithm to find a good solution with a small number of objective function evaluations.

Bayesian optimization (BO) [29; 8] is a widely used sample-efficient method for such problems. At each iteration, BO fits a surrogate model, typically Gaussian process (GP) , to approximate the objective function, and maximizes an acquisition function to determine the next query point. Under the limited evaluation budget, traditional BO methods only have a few observations, which are, however, insufficient for constructing a precise surrogate model, leading to slow convergence. Thus, traditional BO methods struggle to effectively solve expensive BBO problems, preventing their broader applications.

To tackle this issue, recent research tries to apply transfer learning methods for BO . Transfer BO methods operate under the assumption that similar tasks may share common characteristics, andthe knowledge acquired from similar source tasks can be helpful for optimizing the current target task. They typically gather offline datasets from the source tasks and utilize them to expedite the target task. These methods can be categorized based on the learned components of BO, such as the acquisition function [51; 40], initialization point [45; 47], or search space [49; 23; 17].

Among these, learning the search space is a promising research area due to its effectiveness and orthogonal relationship with optimization methods. By learning and partitioning the search space, we can more effectively utilize potential subspaces and significantly accelerate the algorithm's search for optimal solutions. While the methods for partitioning the search space have demonstrated great potential [22; 14; 23; 17], they still have several limitations, particularly in terms of flexibly adjusting the search space for the current target task. In many scenarios, we are uncertain about which tasks are truly "similar" to the target task before optimizing it. Our comprehension about this similarity can only deepen gradually as we progress in optimizing the target task. Therefore, we hope that a search space transfer algorithm can automatically identify the most relevant source tasks during the optimization process, and give them more consideration when constructing the subspaces. However, existing methods have limited flexibility in adjusting in this manner.

In this paper, we propose a search space transfer learning method based on Monte Carlo tree search (MCTS), called MCTS-transfer, to iteratively divide, select, and optimize in a learned subspace. Each node of MCTS-transfer represents a subspace, whose potential is calculated as a weighted sum of the source and target sample values, assessing the node's utilization value. To better identify and leverage the information from source tasks, we assign different weights to different source tasks based on their similarity to the target task, which are adjusted dynamically during the optimization process. These weights are then used to calculate the potential of the node. Our proposed MCTS-transfer offers several notable advantages. First, it can provide a better initial search space for a warm-start of the optimization of the target task. Second, it can provide multiple promising compact subspaces by MCTS, to improve optimization efficiency. The upper confidence bound (UCB)-based node selection of MCTS can also automatically balance the trade-off between exploration and exploitation. Third, it can automatically identify source tasks similar to the current target task based on new observations, and re-construct the search space to make it more consistent with the current target task.

To evaluate the effectiveness of the proposed method, we compare MCTS-transfer with various search space transfer methods and conduct experiments on multiple BBO tasks, including synthetic functions, real-world problems, Design-Bench and hyper-parameter optimization problems. In different scenarios, such as varying similarity between the source tasks and target task, MCTS-transfer demonstrates superior performance. We also analyze the effectiveness of the adaptive weight adjustment, showing that MCTS-transfer can identify source tasks that are similar to the target task and assign them higher weights accordingly. Note that MCTS-transfer can be combined with any BBO algorithm. We only implemented it with the basic BO algorithm (i.e., using GP as the surrogate model and expected improvement (EI) as the acquisition function) in the experiments, and the performance can be further enhanced by advanced techniques.

## 2 Background

### Bayesian Optimization

We consider the problem \(_{}f()\), where \(f\) is a black-box function and \(^{D}\) is the domain. The basic framework of BO contains two critical components: a surrogate model and an acquisition function. GP is the most popular surrogate model. Given the sampled data points \(\{(_{i},y_{i})\}_{i=1}^{t-1}\), where \(y_{i}=f(_{i})+_{i}\) and \(_{i}(0,^{2})\) is the observation noise, GP at iteration \(t\) seeks to infer \(f((),k(,)+^{2})\), specified by the mean \(()\) and covariance kernel \(k(,)\), where \(\) is the identity matrix of size \(D\). After that, an acquisition function, e.g., probability of improvement (PI) , EI  or UCB , is optimized to determine the next query point \(_{t}\), balancing exploration and exploitation.

### Transfer Bayesian Optimization

When solving new BBO problems, traditional BO methods need to conduct optimization from scratch, leading to slow convergence. Transfer learning reuses knowledge from source tasks to boost the performance of current tasks, and thus can be naturally applied to address this issue, i.e., it can utilize source task data to accelerate the convergence of current target task . The main assumption of transfer learning for BBO is that many real-world problems exhibit certain similarities, and similar tasks often share similar characteristics that can be exploited.

Various transfer learning approaches have been explored concerning the surrogate model, acquisition function, initialization, and search space of BO. Several methods learn all available information from both source and target tasks in a single GP surrogate, and make the data comparable through multi-task GP [37; 16; 38], noisy GP model [31; 25; 13], and deep kernel learning model [47; 11; 10]. Additionally, certain approaches involve training multiple base surrogates and then combining them into a single surrogate [50; 28].

Transfer learning methods on surrogate models, however, may encounter difficulties when scaling to high-dimensional cases, because the influence of the source tasks is easy to diminish progressively with the increase of new observation points . Alternatively, transferring knowledge via the acquisition function can circumvent these issues. Previous research has approached transfer learning for acquisition functions through multi-task BO [37; 20], ensemble GPs , and meta-learning strategies such as reinforcement learning-driven strategies .

Several approaches consider selecting multiple valuable points for better initial evaluations for the warm-start of optimization. Feurer et al.  simply selected the best point from the \(t\) most similar tasks as the initialization point. Other works [48; 45] achieved warm-start by constructing a meta-loss, organically combining the mean function of the GP model from source tasks, and using gradient descent to find a set of solutions that minimize the meta-loss. Wistuba and Grabocka  tried to find suitable initial points to warm-start BO by minimizing the loss on the source tasks using an evolutionary algorithm.

### Search Space Transfer

Compared to the aforementioned methods, search space transfer has many advantages, especially in not limiting the transfer to a specific algorithm component (e.g., acquisition function in BO), but considering the search space that can be used by all BBO algorithms as the transfer object. That is, the learned search space is orthogonal to the optimization process and can be integrated with any advanced optimizer. A well-learned search space can greatly improve optimization efficiency and guide the optimization process to a good result.

The concept of search space transfer was first proposed by Wistuba et al. , which defined a region by a center point and a diameter, and pruned away regions deemed less promising. Instead of pruning space, Perrone and Shen  considered designing a promising search space for the target task. This approach extracts an optimal solution \(_{i}^{*}\) from each task, and employs a simple geometric form (e.g., a box or ellipsoid) to define the smallest subspace encompassing all optimal solutions \(_{i}^{*}\). However, it ignores the correlation between tasks, and the space constructed with regular geometry may be too loose for the target task. To address this issue, Li et al.  selected the most similar source tasks to the target task in a certain proportion, and used a binary classification method to learn good spaces and bad spaces among these tasks. A voting mechanism is then employed to aggregate information from all selected tasks to determine a newly generated search space for the target task.

These current space transfer methods, however, lack mechanisms to adjust the search space when it is not well-suited for the target task. Furthermore, when source tasks differ significantly from the target task, they tend to devolve into full-space search. The binary nature of evaluating the search space as simply "good" or "bad" is another limitation. Our proposed method will overcome these drawbacks by adapting the search space dynamically according to the similarity between source tasks and the target task, applying MCTS to find a proper subspace, and using a more nuanced and precise numerical evaluation for the goodness of a search subspace.

### Monte Carlo Tree Search

MCTS  is a search algorithm combining random sampling with a tree search structure, which has been widely applied in the filed of game-playing and decision-making [32; 34]. A tree node represents a particular state in the search space, e.g., stone positions on the board in a GO game. Each tree node has an UCB  value during the search procedure, to balance exploration and exploitation.

The UCB of each tree node is calculated by its value \(v_{m}\) and its visit times \(n_{m}\), defined as:

\[_{m}=}{n_{m}}+2C_{p})/n_{m}},\] (1)

where \(C_{p}\) is a hyper-parameter controlling the balance between exploration and exploitation, and \(n_{p}\) is the visit times of the parent node. In the iterative process of MCTS, a leaf node is systematically selected for expansion, involving four key steps: selection, expansion, simulation, and back-propagation. Initially, the algorithm recursively navigates from the root node to child nodes, prioritizing those with higher UCB values to identify the leaf node \(m\). Subsequently, an action is executed based on the state of \(m\), leading to the expansion of a new child node (state), \(k\). In the simulation step, the node value \(v_{k}\) is determined through random sampling. Finally, through back-propagation, the value and visitation count of the ancestors of \(k\) are updated.

MCTS has been used to select important variables automatically for high dimensional BO . LA-MCTS  is a scalable BBO algorithm based on learning space partition. Utilizing MCTS, it iteratively divides the search space into small subspaces for optimization. In this framework, the tree's root represents the entire search space denoted as \(\), and each tree node \(m\) represents a sub-region \(_{m}\). The value \(v_{m}\) is determined by the average objective value of the sampled points within the sub-region \(_{m}\). During each iteration, after selecting a leaf node \(m\), LA-MCTS conducts optimization within \(_{m}\). The sampled points are then employed for clustering and classification, leading to the bifurcation of \(_{m}\) into two distinct sub-regions: "good" and "bad". These sub-regions are expanded as two child nodes, with the left one denoted as "good" and the right as "bad".

## 3 MCTS-transfer

In this section, we propose a search space transfer learning method based on MCTS, called MCTS-transfer, which can be divided into two major stages: pre-learning stage and optimizing stage. The main idea is to apply MCTS to divide the entire space based on source task data in the pre-learning stage, and adaptively adjust the partition based on newly generated target task data during the optimization process. MCTS-transfer iteratively chooses one partitioned subspace for search and adjusts the partition after sampling each new data point. Assume that there are \(K\) source tasks \(\{f_{i}\}_{i=1}^{K}\) and a target task \(T\) that we are going to optimize \(_{}f_{T}()\), where \(\) is the entire search space. For the \(i\)-th source task, we have offline dataset \(D_{i}=\{(_{i,j},y_{i,j})\}_{j=1}^{|D_{i}|}\), where \(y_{i,j}\) is the observed objective value of \(_{i,j}\), and \(|D_{i}|\) is the number of data points. Let tree \(\) denotes the search space division process by MCTS.

In the pre-learning stage, \(\) initially has only one root node, representing the entire search space \(\). The expansion of a tree node \(m\) corresponds to the division of the search space \(_{m}\) that the node \(m\) represents. The node expansion follows the rules below. With a set of source task samples \(\{(_{i},y_{i})\}_{i=1}^{n}\) in the space \(_{m}\), we use \(k\)-means clustering to divide them into two groups. The cluster with a higher average objective value is regarded as the "good" cluster, while the other is the "bad" one. A binary classifier then establishes a decision boundary between the two clusters. In our approach, the space associated with the good cluster becomes the left node, while the space of the bad cluster becomes the right node. We recursively apply this partition process within each node, as shown in Figure 1. The depth of the resulting Monte Carlo tree \(\) is determined by a threshold hyperparameter \(\): a node is divided if it contains more than \(\) samples and the contained samples can be clustered into two clusters. The tree \(\) generated at this stage can give a suitable space partition in advance based on source task data, which serves as a warm-start for the following optimization process. Details of pre-learning will be introduced in Section 3.1.

In the optimization process, we follow the four key steps of MCTS: selection, expansion, simulation, and back-propagation. At each iteration, we select a target node \(m\) by tracing the nodes' UCB values. That is, starting from the root, we recursively choose the child node with higher UCB value, until a leaf node \(m\) is reached, as Figure 1 displayed. The space \(_{m}\) represented by \(m\) is then considered as a promising search space, where a BO optimizer is used to optimize. The BO optimizer can build a surrogate model using samples in either \(_{m}\) or \(\). The newly sampled point will be evaluated and used for expanding the node \(m\) after updating the clustering in the node. It will further be utilized in back-propagation, where the number of visits and the potential value of each node will be updated. The potential value of a node is calculated by a weighted sum of objective values of the source and target task samples. Note that the tree structure will be reconstructed if there exists a node that the potential value of its right child exceeds that of the left one, violating the rule of our tree construction and implying that the current structure is not good. Please see Sections 3.2 and 3.3 for the details of node potential update and tree structure reconstruction.

Unlike LA-MCTS, MCTS-transfer not only considers the information of the target task when calculating node values but also takes into account the information from source tasks, enabling it to be used for search space transfer. Additionally, we propose adaptive weights for source tasks and validate their effectiveness through our experiments.

### Search Space Pre-Learning

Compared to standard BBO algorithms, which sample randomly across the entire space at the beginning, our method leverages information from source tasks to concentrate sampling within a generally "good" space, providing a warm-start initialization.

In the pre-learning stage, tree \(\) initially has only one node, i.e., ROOT node. All source task samples are collected in this node, recursively clustered and classified, leading to node expansion. When none of the leaf nodes can be further bifurcated, i.e., contains more than \(\) samples and can be clustered into two clusters, \(\) is finally formed. In this process, we keep the rule that the left node is "better" (i.e., has a larger potential value) than the right node, so that we can easily identify that the leftmost leaf is the best and the rightmost leaf is the worst. The potential value of a node \(m\) in the pre-learning stage is estimated by the average \(y_{i,j}\) of all source task points within it, i.e.,

\[p_{m}=_{(_{i,j},y_{i,j}) D_{i}_{m }}y_{i,j}}{_{i K}|D_{i}_{m}|}.\] (2)

This tree embed historically good regions into specific tree nodes. Intuitively, the spaces represented by left leaves have higher potential of being good spaces than right ones.

The first iteration of MCTS-transfer will utilize the resulting tree \(\) generated in the pre-learning stage. Starting from the root node, it recursively selects nodes with higher UCB values until reaching a leaf node. The UCB value is calculated as Eq. (1), where \(v_{m}\) is replaced by the potential value \(p_{m}\) in Eq. (2). In MCTS-transfer, \(n_{m}\) and \(n_{p}\) represent the number of samples, including those from source and target tasks, in the subspace \(_{m}\) and the parent subspace of \(_{m}\), respectively. Consequently, the algorithm preferentially samples from those regions that have shown to yield favorable outcomes in the source tasks.

### Node Potential Update

In each iteration of MCTS-transfer, after evaluating a new sample, we use it to update the similarity between the source tasks and the target task, and then update each node potential. Note that the potential value \(p_{m}\) used in the pre-learning stage only contains information from source tasks. But in

Figure 1: The workflow of MCTS-transfer. In pre-learning stage, MCTS-transfer builds the tree by clustering and classifying the samples apart recursively, until all nodes are not splitable. In optimization stage, the initial search space is based on the pre-learned tree. We will trace child node with greater UCB from ROOT and find the target leaf node to do optimization.

the optimizing stage, the calculation of \(p_{m}\) includes both information from the source tasks \(\{D_{i}\}_{i=1}^{K}\) and the target task \(D_{T}=\{(_{T,j},y_{T,j})\}_{j=1}^{t}\), and considers the similarity between them, i.e.,

\[p_{m}=^{t-1}w_{i}_{i,m}}{_{i K}w_ {i}}+_{T,m},\] (3)

where \(_{i,m}=_{(_{i,j},y_{i,j}) D_{i}_{m}}y_{i,j} /|D_{i}_{m}|\), and \(_{T,m}=_{(_{T,j},y_{T,j}) D_{T}_{m}}y_{T,j} /|D_{T}_{m}|\), which are the average objective values of the samples of \(D_{i}\) and \(D_{T}\) in \(_{m}\), respectively. There are two important parameters in Eq. (3).

* \(\): A decay factor, which is used to adjust the overall influence of source tasks throughout the optimization process. A smaller \(\) accelerates the forgetting of the source task data.
* \(w_{i}\): A weighting factor, which reflects the influence of the \(i\)-th source task, and is determined by the similarity between the \(i\)-th source task and the target task. A larger weight represents higher similarity and implies a greater influence of the \(i\)-th source task's samples on the potential calculation of a tree node.

To calculate \(w_{i}\), we measure the distance \(Distance(D_{i},D_{T})\) between the \(i\)-th source task and the target task by \(Distance(_{i}^{*},_{T}^{*})\), where \(_{i}^{*}\) and \(_{T}^{*}\) denote the mean of the best \(N\) sampled points of these two tasks, respectively. The source tasks are ranked according to their distances to the target task. A smaller rank implies a smaller distance, i.e., a higher similarity. The weight \(w_{i}\) is then calculated as

\[w_{i}=1.0-}{ N_{m}}&r_{i}< N_{m} \\ 0.1&,\] (4)

where \(r_{i}\) is the rank of the \(i\)-th source task, \(N_{m}\) is the number of source tasks that have solutions located in \(_{m}\), and \(\). After sampling a new data point in each iteration of MCTS-transfer, the ranks and weights are updated accordingly, which are then used to update the potential value of each node. We also consider other ways of calculating distances and weights, which are introduced and empirically compared in Appendix C.

### Tree Structure Reconstruction

When constructing the search tree, the left child of a node is always better than the right child, i.e., the potential of the left child always exceeds that of the right child. However, after sampling a new data point and updating the potential of each node in each iteration of MCTS-transfer, this property may be violated. If this happens, it indicates that the current space partition is not ideal and needs adjustment. Specifically, we backtrack from the problematic leaf nodes to the highest-level ancestor node that upholds the desired property, and then proceed to reconstruct the subtree from that ancestor node. The subtree reconstruction process is consistent with the process of node expansion.

The detailed process is presented in Algorithm 2. We apply breadth-first search to traverse all tree nodes and use a queue \(\) to manage the sequence of nodes. In addition, we set a queue \(\) to store the nodes that need to be reconstructed. If the potential of the right child of a node is better than that of the left child (line 6), the subtree of this node is deleted (line 7), and it should be reconstructed and is added into the queue \(\) (line 8). Otherwise, the two child nodes will enter into the queue \(\) (lines 10-11) and will be examined later. After traversing the tree \(\), we reconstruct the subtrees of nodes in \(\) (lines 15-19). If a node in \(\) is splitable, i.e., the contained samples in the node exceeds \(\) and can be clustered and divided by a binary classifier, it will be further expanded. Thus, Treeify can fine-tune the tree structure and reserve some history information; meanwhile, it can adaptively be more suitable to the target task.

### Details of MCTS-transfer

The detailed procedure of MCTS-transfer is presented in Algorithm 1. It begins with a pre-learnned MCTS model \(\) based on source task data (line 1), and initializes an empty set \(D_{T}\) to store samples of the target task (line 2). In each iteration, it selects a leaf node \(m\) based on the UCB value (line 4). If the target task already has samples in the space \(_{m}\) represented by \(m\), the algorithm conducts BO within \(_{m}\) and gets a candidate point \(_{T,t}\) (lines 8-9); otherwise, the candidate point is randomly selected in \(_{m}\) (line 6). The sampled point \(_{T,t}\) is then evaluated and added into \(D_{T}\) (line 11). Tomake full use of the information from the source tasks, we take the similarity between a source task and the target task into account, and try to assign higher weights to more similar source tasks, as introduced in Section 3.2. With new samples added in \(D_{T}\), the distance between each source task \(D_{i}\) and the target task \(D_{T}\) may change. Thus, the distance, rank and weight of each source task are re-calculated in lines 12-13 according to Eq. (4), and the potential value of each node in the tree is re-evaluated in line 14 according to Eq. (3). After that, the node \(m\) is expanded in lines 15-17 if it is splitale, i.e., contains more than \(\) samples of the target task and can be clustered into two clusters. Note that for node expansion, only samples of the target task are considered. In line 18, the back-propagation step is performed to refresh the information of each node on the path to \(m\), including the visit times and the contained samples. Finally, we will check whether the updated tree conforms to the property that the left child of a node has a larger potential value than its right node. For any node violating this property, its sub-tree will be reconstructed. This process is accomplished by employing the Treeify procedure in Algorithm 2 in Appendix A.

```
1:Initialize a MCTS model \(\) by search space pre-learning as introduced in Section 3.1;
2:\(D_{T}=\);
3:for\(t=1,2,,N\)do
4: Select a leaf node \(m\) by UCB-based selection;
5:if\(|D_{T}|=0\)then
6: Select a candidate point \(_{T,t}\) randomly in \(_{m}\)
7:else
8: Train a GP model on \(D_{T}\);
9: Select a candidate \(_{T,t}\) in \(_{m}\) by optimizing an acquisition function
10:endif
11: Evaluate \(_{T,t}\) to get \(y_{T,t}\), and let \(D_{T}=D_{T}\{(_{T,t},y_{T,t})\}\);
12: Calculate \(Distance(D_{i},D_{T})\), and sort them in ascending order to get the ranks \(r_{i}\);
13: For each source task \(f_{i}\), update its weight \(w_{i}\) by Eq. (4), where \(i=1,,K\);
14: For each node \(n\), update its potential value \(p_{n}\) by Eq. (3);
15:if\(m.\)isSplitable then
16: Expand \(m\)
17:endif
18: Back-propagate and update the visit times and samples of nodes on the path to \(m\);
19:\(\)**Treeify** (\(\))
20:endfor ```

**Algorithm 1** MCTS-transfer

In MCTS-transfer, the tree structure exhibits several properties that align with the requirements of search space transfer learning. 1) Tree structure is natural to model the search space, where the root represents the entire search space, and the node expansion corresponds to the space partition with each child node representing a subspace. 2) The node potential evaluation allows for the extraction of multiple irregularly shaped promising search subspaces represented by multiple leaf nodes. 3) The tree can be adjusted by updating and expanding nodes on the basis of the original tree, so that new information can be absorbed while historical information can also be retained, i.e., the tree structure is inheritable. This enables the knowledge of space partition from source task data to be transferred to the target task.

## 4 Experiments

In this section, we introduce a simple case to highlight the features of existing search space transfer algorithms and assess the effectiveness of MCTS-transfer. We also conduct experiments across a variety of tasks, including the synthetic benchmark BBOB, real-world problems, Design-Bench and the hyper-parameter optimization benchmark HPOB. The details of the problems, data and experimental results can be seen in Appendix B.2, B.3 and E.

**Compared methods.** Our baselines consist of two non-transfer BO, i.e., basic GP, and LA-MCTS , three search space transfer algorithms, i.e., Box-GP , Ellipsoid-GP , SupervisedGP ), and one state-of-the-art surrogate model transfer BO algorithm PFN . Detailed configurations and settings of the hyper-parameters for each algorithm are provided in Appendix B.1.

**Basic Settings.** In our experimental settings, we explore two types of transfer learning--similar and mixed transfer--to demonstrate the advantages of MCTS-transfer in handling complex source tasks. Similar transfer involves using data from similar source tasks, while mixed transfer uses a combination of similar and dissimilar source task data for pre-training. Given the challenges in real-world scenarios of determining task similarity and selecting appropriate tasks, our focus will be on evaluating MCTS-transfer's performance in the more complex scenario, i.e., mixed transfer.

### Motivating Cases: Sphere2D

We first conduct a simple but important experiment on Sphere2D to verify our motivation and evaluate the performance of existing search space transfer methods. The Sphere2D function is defined as \(f()=(-^{*})^{2}\), with \(^{*}\) representing the optimal solution. We generate three source task datasets \(D_{(5,5)}\), \(D_{(5,-5)}\), and \(D_{(-5,-5)}\), each containing 100 samples, by assigning \((5,5)\), \((5,-5)\), and \((-5,-5)\) to \(^{*}\) and sampled by standard BO. The target task is defined as \(f()\) with \(^{*}=(4,4)\).

Unlike the basic setting, we use the mixed setting and the dissimilar setting. Dissimilar setting uses only \(D_{(5,-5)}\) and \(D_{(-5,-5)}\) for pre-training, which are most dissimilar to the target task. This setting is to test MCTS-transfer's ability to handle extreme cases without similar source tasks.

MCTS-transfer-GP is compared against three search space transfer algorithms--Box-GP, Ellipsoid-GP, and Supervised-GP--in both mixed and dissimilar settings, as shown in Figure 2. Box-GP and Ellipsoid-GP ignore task similarity and limit the search space to geometric areas encompassing all source task optima. In the dissimilar transfer setting, these methods fail because the target task's optimal solution \(^{*}=(4,4)\) lies outside the defined subspace of source task optima. Supervised-GP takes task similarity to guide the selection and combination of promising region with a voting system. Although it pays attention to the importance of task similarity and can be applicable in dissimilar transfer, it tends to be an entire-space optimization algorithm when source tasks exhibit high variance or are dissimilar to the target task. MCTS-transfer recursively divides the search space, dynamically ajusts task weights and evaluates the subspace potential based on the task similarity. In addition, the method tends to increasingly rely on target task data due to decay factor \(\). Therefore, MCTS-transfer achieves successful convergence with low variance in mixed and dissimilar transfer. The right part of Figure 2 displays the weight change curves for the three source tasks, confirming the anticipated results. Higher weights are assigned to datasets \(D_{(5,5)}\) and \(D_{(-5,5)}\), indicating that our method effectively recognizes and prioritizes tasks more similar to the target task.

### Synthetic Functions

BBOB  is a popular benchmark for BBO. It offers 24 synthetic functions tailored for the continuous domain. We randomly select one function from each of the five function classes of BBOB as our target task, i.e., GriewankRosenbrock, Lunacek, Rastrigin, Rosenbrock, and SharpRidge.

As shown in Figure 2(a), compared with LA-MCTS, we find that the results can indeed be greatly improved after space transfer, proving the effectiveness of MCTS-transfer. In mixed transfer, MCTS-transfer can still maintain warm-start, thanks to its ability to provide multiple compact promising

Figure 2: Comparison of MCTS-transfer and other algorithms on Sphere2D

subspaces by effective search space pre-learning. Throughout the optimization process, MCTS-transfer, combined with a simple GP, is able to reach or even surpass SOTA's surrogate model transfer algorithm PFN, reflecting the superior performance.

### Real-world Problems

To demonstrate the practical value of MCTS-transfer, we test MCTS-transfer with three real-world problems, including LunarLander, RobotPush, and Rover.

Figure 2(b) shows comparison on similar and mixed transfer. Based on the overall ranking, MCTS-transfer-GP outperforms other search space transfer baselines.In mixed transfer, although it's surpassed by PFN initially, MCTS-transfer-GP is finally able to find better solutions even if there are dissimilar tasks misleading. The ability to adaptively correct the search space may come from the efficient utilization of source task data by reasonable node potential evaluation, node expansion, and tree reconstruction.

### Design-Bench Problems

We further verify the performance of MCTS-transfer in more complex and high-dimensional problems from Design-Bench , including three continuous problems, Superconductor, Ant morphology and D'Kitty Morphology.

In similar and mixed transfer, MCTS-transfer-GP gets the best ranking after 40 iterations. The stable performance indicates that the algorithm can effectively transfer and utilize previous experience when facing different source tasks. This ability is particularly important for black-box problems because it allows the system to quickly adapt to unseen situations while maintaining high performance.

### Hyper-parameter Optimization

Hyper-parameter optimization(HPO) is a common application of BBO transfer learning. The HPO-B benchmark , sourced from OpenML, includes 176 search spaces/algorithms and 196 datasets, totaling 6.4 million HPO evaluations. Details of Source task data selection and curves of each problem are placed in Appendix B.3 and E, respectively.

The HPOB benchmark has several challenges. Firstly, for these problems, algorithms are easy to converge on a certain area, leading to rapid convergence. Secondly, the source tasks are complex, presenting significant variability in data distribution and scale. To tackle the difficulties, the search algorithm should be equipped with ability to handle complex source tasks and robust optimization capabilities.

Experimental results are shown in Figure 3(b), which represent the mean ranks and the variance of all algorithms on 39 test problems. In both transfer settings, the baseline ranks are very close, because there are only tiny gaps among final convergence values, which can be seen in Appendix E. However, our method still have clear advantages. Although our method doesn't have enough warm-start strength when the source tasks are diverse and complex, but it can still adjust the search tree structure and locate the better search area, exceeding existing search space transfer algorithms.

Figure 3: Comparison of MCTS-transfer and other algorithms on BBOB and real-world problems

### Runtime Analysis

To verify whether MCTS-transfer incurs excessive time overhead, we analyze the runtime proportion of each component of MCTS-transfer on BBOB and three real-world tasks (i.e., LunarLander, RobotPush, and Rover). We divide MCTS-transfer into three main components: evaluation, backpropogation and reconstruction.The evaluation time includes the time required for surrogate model fitting, candidate solution selection and evaluation, which is the common component shared by all optimization algorithms. Backpropagation and reconstruction constitute the two principal modules specific to MCTS-transfer.

As shown in Figure 5, the additional computational burden introduced by MCTS-transfer (i.e., backpropagation and reconstruction) represents a relatively minor fraction of the total runtime, particularly in the three expensive real-world problems. In expensive evaluation problems, MCTS-transfer can bring great improvement by introducing small additional computational overhead. Other details, such as the exact time cost of each component and the frequency MCTS subtree reconstruction, are provided in Appendix F.

## 5 Conclusions and Limitations

In this paper, we propose MCTS-transfer to solve the expensive BBO problem. MCTS-transfer uses MCTS to perform search space transfer, extracting similar tasks during the optimization process and giving more accurate space partition results. Compared with other space transfer algorithms, our algorithm is more generalizable. Specifically, it can extract the most similar source tasks and give them higher weights to accelerate optimization. Besides, it is reliable because it can dynamically adjust the tree structure, improving the probability that the optimal solution falls in search space of the chosen node. Comprehensive experiments on BBOB, real-world problems, Design-Bench and HPOB demonstrate the effectiveness of our algorithm. However, there are still limitations, such as the inability of MCTS-transfer to handle search space transfer tasks for problems with different domains or different dimensions. Future work will focus on solving the heterogeneous space transfer , exploring more accurate similarity measures and trying to give the theoretical analysis of the effectiveness of MCTS-transfer.

Figure 4: Comparison of MCTS-transfer and other algorithms on Design-Bench and HPOB

Figure 5: Time cost proportion of evaluation, backpropogation and reconstruction of MCTS-transfer