# MAC Advice for Facility Location Mechanism Design

Zohar Barak

School of Computer Science

Tel Aviv University

zoharbarak@mail.tau.ac.il

Anupam Gupta

New York University and Google Research

anupam.g@nyu.edu

Inbal Talgam-Cohen

School of Computer Science

Tel Aviv University

inbaltalgam@gmail.com

###### Abstract

Algorithms with predictions are gaining traction across various domains, as a way to surpass traditional worst-case bounds through (machine-learned) advice. We study the canonical problem of \(k\)-facility location mechanism design, where the \(n\) agents are strategic and might misreport their locations. We receive a prediction for each agent's location, and these predictions are crucially allowed to be only "mostly" and "approximately" correct (Mac for short): a \(\)-fraction of the predicted locations are allowed to be arbitrarily incorrect, and the remainder of the predictions are required to be correct up to an \(\)-error. Moreover, we make no assumption on the independence of the errors. Can such "flawed" predictions allow us to beat the current best bounds for strategyproof facility location?

We show how natural robustness of the \(1\)-median (also known as the geometric median) of a set of points leads to an algorithm for single-facility location with MAC predictions. We extend our results to a natural "balanced" variant of the \(k\)-facility case, and show that without balancedness, robustness completely breaks down even for \(k=2\) facilities on a line. As our main result, for this "unbalanced" setting we devise a truthful random mechanism, which outperforms the best known mechanism (with no predictions) by Lu et al. (2010). En route, we introduce the problem of "second" facility location, in which the first facility location is already fixed. Our robustness findings may be of independent interest, as quantitative versions of classic breakdown-point results in robust statistics.

## 1 Introduction

Algorithms with predictions is a popular field of study in recent years within the paradigm of beyond the worst case analysis of algorithms -- see Mitzenmacher and Vassilvitskii (2022) for a comprehensive survey. Motivated by developments in machine learning, this area assumes that algorithms can access predictions regarding the input or solution, thus leveraging predictability in typical computational problems. Recently, Agrawal et al. (2022) and Xu and Lu (2022) proposed to study predictions in the context of mechanism design, where they have the potential to transform existing designs by adding information about agents' private knowledge (see Balkanski et al. (2023)).

Our focus in this work is on the canonical problem of facility location. The (utilitarian) \(k\)-facility location problem is as follows: Consider a multi-set of \(n\) points \(X^{d}\) and \(k\) facility locations; the _cost_ of point \(x X\) is the minimum distance between \(x\) and any of the \(k\) locations. The goal is to compute \(k\) locations that minimize the utilitarian cost, which is the total cost of points in \(X\). In the context of mechanism design, the points \(X\) are the privately-known true locations of strategic agents,and the mechanism receives location reports (see Chan et al. (2021) for a recent survey). Facility location mechanism design with predictions has been studied by Agrawal et al. (2022); Xu and Lu (2022).1 We diverge from previous work by assuming a prediction for each point -- that is, the advice \(X^{}\) consists of a prediction \(x^{}_{i}\) for every \(x_{i} X\). Importantly, our measure of prediction error allows for very large errors (outliers) for a \(\)-fraction of points (hence we call it the _"mostly_ approximately correct" model). Our work shows how to get improved bounds despite these large errors, and can thus be of interest beyond facility location.

**Standard worst-case prediction error.** In the majority of the literature, the goal of (algorithm or mechanism) design with predictions centers around two seemingly-conflicting properties: _robustness_ to erroneous predictions, and _consistency_ with predictions that are non-erroneous. A fairly common way of achieving both consistency and robustness is interpolating between the approaches of completely following the predictions, and applying the best worst-case algorithm while disregarding the predictions. An ideal design is one that gracefully transitions -- as the prediction error increases -- from optimal performance when the prediction is correct, to the best-known worst-case performance (Lykouris and Vassilvitskii, 2021; Purohit et al., 2018; Agrawal et al., 2022). By definition, achieving such graceful degradation hinges on how the prediction error is measured.

The most common measure of prediction error is arguably the distance between the predicted and actual values. If \(X=\{x_{1},,x_{n}\}\) contains the actual values and \(X^{}=\{x^{}_{1},,x^{}_{n}\}\) is the prediction, the error is defined as \(=_{p}(X-X^{})\), where \(_{p}\) represents either the \(_{1}\) norm (\(_{1}(t)=_{i}|t_{i}|\)) or the \(_{}\) norm (\(_{}(t)=_{i}|t_{i}|\)). This is a "worst case" measure of prediction error, since a single deviation in one of the \(n\) entries can significantly inflate the error. Prediction errors measured in this way appear in the context of ski rental Purohit et al. (2018), online caching Lykouris and Vassilvitskii (2021); Rohatgi (2020), the secretary problem Antoniadis et al. (2020), single-item auctions Xu and Lu (2022), and many other problems. In what follows, we address this type of prediction error as the "worst case" error model.

**Motivation for an alternative measure.** We demonstrate the need for an alternative measure of prediction error combined with new algorithms through the following \(k\)-facility location instance, in which a single error causes the optimal solution for prediction \(X^{}\) to perform badly for the actual dataset \(X\).2

**Example 1** (Sensitivity of \(2\)-facility location on a line).: _Let \(k=2\), and assume the \(n\) agents' actual locations \(X\) are divided evenly between 0 and 1 on the real line. Let \(X^{}\) be the prediction, with all coordinates predicted accurately except for a single coordinate \(i\), which is predicted erroneously to be located at \(x^{}_{i}=M n\). While the optimal solution for \(X\) is to place the \(k=2\) facilities at \(0\) and \(1\) for a total cost of zero, in the optimal solution for \(X^{}\) one of the facilities moves to \(M\). This solution performs badly for \(X\) -- the approximation ratio compared to the optimal solution is unbounded._

In many ML contexts, it is very possible that a small fraction of points have a large "worst case" prediction error -- even excellent predictors may err on a certain fraction of the dataset. This motivates alternative measures of prediction accuracy. Concretely, we ask:

**Question 1**.: _For \(2\)-facility location on a line (as in Example 1), can we design a mechanism that uses agent reports to get a good solution despite a large "worst case" prediction error?_

We answer this question positively, proving that, using agent reports, it is possible to design resilient mechanisms against adversarial "worst case" errors. The main take-away is that predictions can still

Figure 1: Illustration of Example 1; the predictions \(X^{}\) are on the left side and the real points \(X\) are on the right side. The triangles are the optimal facility locations for the points. A single bad prediction translates into an unbounded “worst case” error and approximation ratio.

be valuable despite high "worst case" prediction error, if the fraction of such grossly-erroneous points is small. In other words, a high "worst case" prediction error may not always justify "throwing out" the predictions and settling for the best worst-case guarantee (although it is currently standard in design with predictions). Our new error model and results thus suggest a new pathway for effectively utilizing predictive advice in strategic settings, despite significant uncertainties in the predictions.

## 2 Overview of Contributions

### Our Model

We introduce \(}\) predictions where \(}\) stands for _Mostly Approximately Correct_. This formulation captures the essential features of some closely related previous models, e.g., the model (Azar et al., 2022) formulated for online metric problems, and the PMAC model of (Balcan and Harvey, 2018) formulated in the context of learning submodular functions. A vector of predictions \(X^{}\) is \(}(,)\) with respect to dataset \(X\) if at least a \((1-)\)-fraction (i.e., most) of the predictions are approximately correct up to an additive \(\)-error. Intuitively, if we do not think it is likely that most of our predictions will be close to being correct --we would typically refrain from relying on them in decision-making processes. Throughout, \([0,0.5)\) is assumed to be small (but can still be a constant). Crucially, when a prediction is not approximately correct (i.e., it belongs to the \(\)-fraction of incorrect predictions), the error is allowed to be arbitrarily large. Also, the \(\)-fraction of wrong predictions is allowed to be arbitrary among all possible subsets of that size (there is no assumption of independence). We show that despite their adversarial nature, and the fact that the prediction error is unbounded, such predictions can be used, in combination with strategic reports, to produce a solution with better cost compared to the best no-prediction solution.

The \(}\) prediction model is suitable for capturing errors from a variety of sources including ML-generated predictions, data that accommodates changes over time, data corrupted by a malicious user, and expert advice (see Appendix B for more details). The accuracy parameters \(,\) of the \(}\) model can also be viewed as _confidence parameters_. The use of confidence parameters is prevalent in the algorithms with predictions literature (see, e.g., Agrawal et al. (2022)). Arguably, \(,\) are highly _explainable_ compared to most confidence measures in the literature, and it is also quite natural to estimate them from data.

### Our Results

We design both deterministic and randomized strategyproof anonymous mechanisms for facility location problems, with \(}\) predictions of the \(n\) agent locations. A preliminary simplifying observation is that in the context of facility location, it suffices to consider mostly-correct (i.e., \(}(0,)\)) predictions, since handling a nonzero approximation parameter \(\) follows directly (see Appendix C).

**Randomized mechanism design.** As our main technical result, for \(2\)_-facility location on a line_ we design a randomized mechanism that guarantees an expected approximation ratio of \(3.6+O()\) (see Algorithm 4 and Theorem 9). For sufficiently small (but still constant) \(\), this improves upon the best-known no-prediction expected guarantee of \(4\) by Lu et al. (2010). (The mechanism of Lu et al. (2010) works for any metric space.) This result provides a positive answer to Question 1, justifying the take-away that predictions with high "worst case" error are useful. We give a brief description of the mechanism in Section 2.3. Note that \(2\)-facility location on a line was also studied by Procaccia and Tennenholtz (2013), and they provided a _deterministic_ mechanism with an \((n-2)\) approximation ratio, which is tight (Lu et al., 2010; Potakis and Tzamos, 2014).

**Deterministic mechanism design.** For _single-facility location in \(^{d}\)_, we design a mechanism that guarantees an approximation ratio of \(\{1+,\}\) (see Algorithm 1 and Theorem 5). For sufficiently small (but still constant) \(\), this improves upon the no-prediction guarantee of \(\) by Meir (2019), which is tight for \(d=2\). For \(\)_-balanced \(k\)-facility location_ with constant \(k\) (in any metric space), which is a natural extension of facility location where at least a \(\)-fraction of the \(n\) points must be assigned to each of the \(k\) facilities (for cost-sharing or load-balancing reasons), we design a simple strategyproof mechanism which guarantees an approximation ratio of \(c+O()\), where \(c\) is a constant (see Algorithm 7 and Theorem 13). For a sufficiently small (but still constant) \(\), this greatly improves upon the best-known no-prediction guarantee of \(}{{2}}-1\) by Aziz et al. (2020) (we remark that Aziz et al. (2020) study a variant called _capacitated_, to which our result applies).3

While we have not optimized the constants, our conceptual contribution is in showing that even if the worst case error of the predictions is unbounded, it can still provide useful information for improving the performance of facility location mechanisms when coupled with strategic reports. In other words, the Mac model allows achieving robustness to outliers while still beating the no-prediction performance. Our single-facility result demonstrates how the accuracy parameter of the model, \(\), can serve as a trust parameter which has natural explainability. Another interesting feature of our results is that utilizing Mac predictions seems to suggest a richer family of mechanisms than standard interpolations of "no-predictions" and "complete trust" in the predictions.

Below we give a summary of the results in tables.

### Our Techniques and Roadmap

We break the problem into two natural conceptual steps. First, we establish what can be done by just using the predictions - this requires us to show some stability properties of algorithms for k-medians. For some problems, such as the single facility location, we show that using only the predictions is enough to get a good approximation ratio. For other problems, such as \(2\)-facility location, it is not enough, and thus we need to include the input in the computation. For this purpose, we show how to choose the first facility by just using the predictions, and a way to choose the second facility by taking the first facility and the input into account. Then, we show how the interplay between these parts allows us to get a better approximation. Let us now give a few more details for these steps.

**Robust statistics and the robustness of the geometric median and \(k\)-medians.** We first develop quantitative versions of classic results in robust statistics on _breakdown points_, which may be of possible independent interest. Consider a _location estimator_, a function that gets \(n\) points in a metric space and returns \(k\) locations. Its breakdown point is the proportion \(\) of adversarially-modified points it can handle before returning an arbitrarily far result from the original estimator. It is well-known that the mean has a breakdown point of \(=}{{n}}\) (consider changing one point to an arbitrarily large value) and that the median is robust with a breakdown point of \(=}{{2}}\). However, the notion of breakdown point is qualitative, and does not reveal the relation between the fraction \(\) of modified points, and how much the estimator changes. In Section 5 we fill this gap by defining measures of robustness (_distance robustness_ (Definition 9) and _approximation robustness_ (Definition 10)). Next, we show robustness properties of the median and its generalizations, showing that the cost of the geometric median

|p{113.8pt}|p{113.8pt}|}   \\ 
**Problem** & **Best known ”no predictions” approximation ratio** & **Approximation ratio obtained using MAC predictions** \\  Single facility location in \(^{d}\) & \(\) & \(1+O()\) \\  \(\)-balanced \(k\) facilities in \(^{d}\) & Linear (O(n))* & A constant depending on \(,\) \\  

Table 1: Deterministic Mechanism Design.

*The linear approximation ratio is of Aziz et al. (2020) for the capacitated facility location variant where there is an additional constraint of a maximum cluster size. The \(\)-balanced variant of the problem was not studied without predictions, but is comparable to the capacitated variant, since a minimum cluster size (as in the balanced variant) implies a maximum cluster size (and for \(k=2\), a maximum cluster size implies a minimum cluster size as well).

|p{113.8pt}|p{113.8pt}|}   \\ 
**Problem** & **Best known ”no predictions” approximation ratio** & **Approximation ratio obtained using MAC predictions** \\ 
2 facility location on a line & 4 & \(3.6+O()\) \\  

Table 2: Random Mechanism Designbehaves smoothly as the fraction of modified points increases. These smooth robustness results prove crucial to obtaining improved mechanisms for facility locations using predictions. Moreover, the robustness guarantees have interesting interpretations in the context of robust statistics and robust clustering in machine learning, and might also be of independent interest as explained in Appendix D.

**Second facility location.** In Section 6.2.1 we introduce the second facility location problem. It is often the case that facilities are created incrementally and not all at once. Hence, it is natural to ask how can we design a mechanism for choosing the location of a second facility (say a second hospital) given an existing first one. We show that the random proportional choice (second step) used in the _proportional mechanism_ by Lu et al. (2010) achieves a (tight) approximation ratio of \(3\) for the line metric, improving over the factor of \(4\) in the general case for the second facility location problem.

**The Robust Half Technique: Beyond interpolation.** We generate half of the solution (the first facility location) from the predictions, and use the result together with the input (agent reports) to generate the other half of the solution (the second facility location). To generate the first half of the solution, we define and analyze a robust location estimator we name Big-Cluster-Center (which turns out to be a non-trivial task); Hence the name: "Robust Half". To generate the second half of the solution from the input (given the first half) we define and analyze the second facility location on the line problem. Finally, to combine the results we consider two cases: the input either induces a balanced clustering or an unbalanced clustering. We utilize the robustness results (both for balanced k-medians and for Big-Cluster-Center) to show that in both cases we get a good approximation ratio. Our mechanism differs from many existing designs which interpolate between the two approaches of trusting the predictions and using the no-predictions algorithm.

## 3 Related Work

**Facility location mechanism design with predictions.** In the "worst case" error model, Agrawal et al. (2022) show a mechanism for _single-facility location_ on the real plane \(^{2}\). Their prediction consists of a single value representing advice for where to locate the facility. Given a trust parameter \(c\), their mechanism guarantees an approximation ratio of at most \(}{1+c}\) if the prediction is perfect, and \(}{1-c}\) in the worst case. In theory, we could reduce the Mac model to the one studied by Agrawal et al. (2022), by setting their single prediction to be the geometric median of the Mac predictions. Then \(c\) can be determined according to \(\). However, knowing \(\) and the \(\)-robustness of \(1\)-\(\), we can directly choose either the no-predictions mechanism or the predictions' \(1\)-\(\), rather than interpolating between these two solutions.

Mechanism design for the \(2\)_-facility location_ on the line with predictions is studied by Xu and Lu (2022), where the predictions are for the locations of the agents. While they do not define an error parameter, their deterministic mechanism is in line with the "worst case" prediction error model: it achieves an approximation ratio of \(\) if the predictions are perfect, and \(2n\) if they are arbitrarily bad.

**Two-facility location on a line mechanism design without predictions.** In the setting of no-predictions, the best strategyproof deterministic anonymous mechanism achieves a tight approximation ratio of \(n-2\)Procaccia and Tennenholtz (2013); Fotakis and Tzamos (2014). In comparison, in our Mac model under the additional assumption that the number of agents assigned to each facility in the optimal solution is of minimum size \(( n)\), the deterministic mechanism in Algorithm 7 achieves a constant approximation ratio. Under no further assumption, our randomized mechanism in Algorithm 4 achieves a constant expected approximation ratio for small \(\).

Additional related work is deferred to Appendix A.

## 4 Formal Definitions

Let \((V,d)\) be a metric space and \(k,n\). The input to the facility location problem is a multi-set \(X=\{x_{1},,x_{n}\} V^{n}\). We are also given a _prediction_, which is another multi-set \(X^{}=\{x^{}_{1},,x^{}_{n}\} V^{n}\). The distance between a point \(u\) and a multi-set \(W\) is \(d(u,W)=_{w W}d(u,w)\). The _Hausdorff distance_ between multi-sets \(U,W V^{n}\) is

\[d_{H}(U,W):=\{_{u U}d(u,W),_{w W}d(w,U)\},\]

that is, the maximum distance between a point in one multi-set and the other multi-set.

**Definition 1**.: _Fix \( 0\). For \(x,x^{} V\), we say \(x^{}\) is an \(\)-correct prediction of \(x\) if \(d(x,x^{})\), otherwise we say it is \(\)-incorrect._

**Definition 2**.: _The \((,r)\)-neighborhood of multi-set \(X V^{n}\) is defined to be all predictions \(X^{} V^{n}\) such that \(|\{i[n] x^{}_{i}x_{i}\}| r\)._

The \((0,r)\)-neighborhood of \(X\) is often just referred to as the \(r\)_-neighborhood_ of \(X\).

**Definition 3** (Mostly Approximately Correct (Mac) Predictions).: _Fix \( 0\), \([0,0.5)\). The point set \(X^{}\) is an \((,)\)-Mac prediction for \(X\) if \(X^{}\) belongs to the \((,|X|)\)-neighborhood of \(X\)._

**Definition 4** (Location Estimator).: _For \(n,k\), a function \(f(X):V^{n} V^{k}\) is called a location estimator._

Some common examples of location estimators with \(k=1\) for points on the real line are the minimum, maximum, mean, and median; for general metric spaces, \(k\)-means and \(k\)-medians are well-studied examples (\(k\)-means is similar to \(k\)-medians with squared distances). For \(k=1\) and \(V=^{d}\), the \(k\)-medians solution is also called the Geometric-Median which is a generalization of the median to higher dimensions. A different such median generalization is the Coordinate-Wise-Median:

**Definition 5**.: _For a multi-set of \(n\) points \(X^{d}\): Coordinate-Wise-Median\((X):=(l_{1},,l_{d})\) where where \(l_{j}\) is the median of the multi-set of the \(j\)'th coordinates of \(X\) for all \(j[d]\)._

**Definition 6** (k-medians cost function).: _Given multi-sets \(X V^{n},F V^{k}\), the \(k\)-medians cost function is_

\[_{k}(X,F):=_{x X}d(x,F).\] (1)

_In the context of the facility location problem, this function is also known as the social cost function or the utilitarian goal function._

The \(k\)_-medians problem_ takes as input a multi-set \(X V^{n}\) and outputs a multi-set \(F\) that minimizes this cost function. The minimizer \(F^{*} V^{k}\) the problem is called the k-Medians _solution_. k-Medians can be viewed as a _location estimator_ of \(X\) that optimizes the \(k\)-medians objective function:

**Definition 7** (Center-Induced Partitions).: _A collection of centers \(F=\{f_{1},,f_{k}\} V^{k}\) induces a partition \(=\{C_{1},,C_{k}\}\) of the dataset \(X\) if \(C_{i}\{x X d(x,f_{i}) d(x,f_{j})\, j\}\). This partition is called the clustering of \(X\) induced by \(F\). This partition (or clustering) is \(\)-balanced if \(|C_{i}||X|\) for all \(i[k]\)._

Note that a collection \(\) need not be unique, since points in \(X\) can "choose" between any of their closest centers in \(F\).

**Definition 8** (\(\)-balanced \(k\)-median).: _The \(\)-balanced \(k\)-medians problem takes a dataset \(X V^{n}\) as input, and outputs centers \(F V^{k}\) along with an induced \(\)-balanced partition \(\) of \(X\); the goal is to minimize the cost function \(_{k}(X,F)=_{x X}d(x,F)\)._

This problem is similar to the _lower-bounded \(k\)-median_ problem where we want to output \(F=\{f_{1},,f_{k}\} V^{k}\) as well as a partition \(\{C_{1},,C_{k}\}\) of \(X\) such that \(|C_{i}||X|\), in order to minimize \(_{x C_{i}}d(x,f_{i})\) (see Han et al. (2020), Wu et al. (2022)). A significant difference between that definition and ours is that we require the partition to be induced by \(F\) (in the sense of Definition 7), which is not required by lower-bounded \(k\)-median.

## 5 \(\)-Robustness of Location Estimators

In this section we define notions of robustness with respect to changing a \(\)-fraction of the points (hence referred to as \(\)-robustness) and analyze the \(\)-robustness of \(1\)-Median and k-Medians. These results will be very useful for the mechanism design for facility location with predictions. We consider two robustness notions for location estimators: The first notion measures the movement in the solution (as measured by the Hausdorff distance), and the second measures the change in an objective function applied to the solution.

**Definition 9** (Distance Robustness).: _Let \( 0\), \([0,0.5)\). For location estimators \(f,:V^{n} V^{k}\), we say that \(\) is \((,)\)-distance-robust with respect to \(f\) if for any \(X V^{n}\) and any \(X^{}\) in the \(|X|\)-neighborhood of \(X\),_

\[d_{H}f(X),(X^{}).\]_If \(=f\), we say that \(f\) is \((,)\)-distance-robust._

In the next definition, cost function \(F\) is evaluated for the same dataset \(X V^{n}\) with respect to two different solutions \(f(X)\) and \((X^{})\).

**Definition 10** (Approximation Robustness).: _Let \( 1\), \([0,0.5)\) and let \(F:V^{n} V^{k}_{ 0}\) be a cost measure. For location estimators \(f,:V^{n} V^{k}\), we say that \(\) is a \((,)\)-approximation-robust solution for cost function \(F\) with respect to \(f\) if for any \(X V^{n}\) and any \(X^{}\) in the \(|X|\)-neighborhood of \(X\),_

\[F(X,(X^{})) F(X,f(X)).\] (2)

_If \(=f\), we say that \(f\) is a \((,)\)-approximation-robust solution for \(F\). If Eq. (2) only holds for datasets \(X\) for some \( V^{n}\), we say that \(f\) is a \((,)\)-approximation-robust solution for \(F\) restricted to instances \(\)._

We give the the following \(\)-robustness results. For the \(1\)-Median:

**Theorem 2**.: _For \(<}{{2}}\), the \(1\)-Median location estimator is \((_{1}(X)}{|X|},)\)-distance-robust, where \(_{1}(X)\) is the optimal cost of the geometric median, that is: \(_{1}(X)=_{x_{i} X}d(x_{i},(X))\)._

**Corollary 3**.: _For \(<}{{2}}\), the \(1\)-Median estimator is \((1+,)\)-approximation-robust for \(_{1}\)._

Recall Example 1 from Section 1. In this example, no choice of \(k=2\) centers simultaneously achieves a good (bounded) approximation for the \(2\)-medians problem on both \(X\) and \(X^{}\). Given this negative example, we turn to a _balanced_ version of \(k\)-medians for which we are able to give a robustness guarantee. The following theorem shows that computing the best "slightly less balanced" solution on the predictions has a cost (on the original dataset \(X\)) that is close to the optimal one.

**Theorem 4**.: _Let \(b>2k+2\). Consider the algorithm \(\) that computes the optimal \((b-1)\)-balanced \(k\)-medians solution on its input. For any instance \(X V^{n}\) of the \(b\)-balanced \(k\)-medians problem with optimal solution \(G\), let \(X^{} V^{n}\) belong to the \(\)-neighborhood of \(X\). The algorithm \(\), when given \(X^{}\), returns a solution \(H\) such that_

\[d_{H}(G,H)_{x X}d(x,G).\]

_Moreover, the \(k\)-medians cost \(_{k}(X,H)(1+)_{k}(X,G)\), and \(H\) induces a \((b-2)\)-balanced partition \(_{H}\) of \(X\)._

For a fixed value of \(k\), this theorem gives a solution \(H\) that is \((b-2)\)-balanced and also \((1+O(}{{b}}),)\)-approximation-robust with respect to the best \(b\)-balanced solution.

Missing proofs are provided in Appendix E. The intuition behind the proofs in this section is that since most points (\(1-\)) are shared between the actual instances and the predictions, any cost-minimizing solution for the predictions will be close (in terms of Hausdorff distance) to the cost-minimizing solution for the real points, thus resulting in a similar cost as implied by Lemma 10 in Appendix E.

## 6 Mechanism Design for Facility Location with Mac Predictions

### Warmup: Deterministic Mechanism Design for Facility Location

In this section we show how to design deterministic mechanisms for facility location problems that utilize the Mac predictions to get better approximation guarantees. We do so by utilizing the \(\)-robustness results from Section 5. In the mechanism design setting, there are \(n\) agents with (true) locations \(X=\{x_{i} i[n]\}^{d}\), where \(d\) is the dimension of the facility location problem. The mechanism has access to location reports by the strategic agents, and also to \(X^{}=\{x^{}_{1},,x^{}_{n}\}\), which are the \((,)\) predictions of the true locations \(X\). The mechanism only has access to the reported locations (\(\)) and the predictions (\(X^{}\)). For any strategyproof mechanism, the reported locations will be the same as real ones (\(X=\)) as illustrated in Fig. 2.

As explained in Appendix C, for the sake of the analysis we assume that \(=0\). All proofs can be found at Appendix F.

**For the single facility location problem \((k=1)\):** In this setting we assume \(\) (or an upper bound value) is known and thus we can simply check in advance if \(1+\) or not, and use the algorithm that guarantees us the best approximation ratio.

``` if\((1+)\) then return Geometric-Median\((X^{})\) else return Coordinate-Wise-Median\((X)\); ```

**Algorithm 1**Best-Choice-Single-Facility-Loc\((X,X^{},)\)

See Appendix F.2 for a clarification on the computation of the geometric median.

**Theorem 5**.: _Algorithm 1 is strategyproof and gets an approximation ratio of \(min1+,\)._

**Supporting the weaker setting of high probability (only w.p. 1 - \(o(}{{n}})\)) Mac predictions**: In Appendix F.3 we show how to achieve the same approximation ratio as in Theorem 5.

**For the \(k\) facility location problem:** In a similar way to the single facility, we can also get a deterministic mechanism for the \(k\) facility location problem with predictions, under some balancedness condition (see Appendix G). The balancedness condition roughly translates to a minimum cluster size in the optimal solution. The resulting approximation ratio is bounded by \(1+\) where \(b\) is a constant that depends on the minimum cluster size and \(\).

### Randomized Mechanism Design for \(2\)-Facility Location on a Line

We now consider the \(2\)-facility-location problem, where the metric is given by the real line \(\). Formally, our metric is over the point set \(V=\), with \(d(x,y)=|x-y|\). There are \(n\) agents with locations on the real line \(X=\{x_{1},,x_{n}\}\), and the cost of a solution \(G V^{2}\) is \(_{k}(X,G)=_{x_{i} X}d(x_{i},G)\). In the mechanism-design setting, the agent locations \(X\) are unknown, but we are given (a) Mac predictions \(X^{}\) for these locations, as well as (b) the agents' reports for their locations. Unlike in the \(\)-balanced problem variation, we do not assume the balancedness of the optimal solution, but handle the unconstrained case where the optimal solution might induce either a balanced or an unbalanced clustering of \(X\). In this section, we present a strategy-proof random mechanism with a small (expected) approximation ratio.

Before doing so, we solve two other problems. After we solve those in Sections 6.2.1 and 6.2.2, we use the solutions in our mechanism for the \(2\)-facility-location on a line problem in Section 6.2.3.

#### 6.2.1 The Second Facility Location Problem

First, we define another independent mechanism design problem (the _second facility location_) for which we show a randomized mechanism. We later use to solve the \(2\)-facility-location problem.

**Definition 11** (Second Facility Location).: _Given a metric space \((V,d)\), a dataset \(X V^{n}\), and a single facility \(h_{S} V\), the goal is to find another facility \(h_{T}\) to minimize the \(2\)-medians cost \(_{2}(X,\{h_{S},h_{T}\})\)._

Figure 2: There are three sets of points: The real locations \(X\) (black), the reported locations \(\) (yellow), and the predicted locations \(X^{}\)(blue). The algorithm can only access \(,X^{}\). For any strategyproof mechanism, the yellow and black points overlap.

We consider the following Second-Proportional-Mechanism, which is the second step of the random mechanism for the 2 facility location on the line problem proposed by Lu et al. (2010).

\(a_{i} d(x_{i},h_{S})\);

Pick \(h X\) such that \(Pr[h=x_{i}]=}}{{_{j[n]}a_{j}}}\);

**Lemma 6**.: Second-Proportional-Mechanism _is strategyproof for any metric space._

**Theorem 7** (Second Facility Results).: _Let \(V=\). Fix any dataset \(X\) and first facility \(\{g_{S}\}\). For any second facility \(g_{T}^{*} V\); let \((S,T)\) be a partition of the dataset induced by \(F^{*}=\{g_{S},g_{T}^{*}\}\). The expected cost of Second-Proportional-Mechanism given \(X\) and \(g_{S}\) is:_

\[[_{2}(X,\{g_{S},g_{T}\})] 2_{1}(S,\{g_{S}\})+3_{1}(T,\{g_{T}^{*}\}),\] (3)

_where \(g_{T}\) is the second facility location chosen by Second-Proportional-Mechanism._

We defer the proofs of Lemma 6 and Theorem 7 to Appendix I. See Remark 29 for a tight example.

The algorithm prioritizes farther locations (belonging to agents who pay more if their location is not chosen) over agents that are near the first facility. The intuition for the strategyproofness is that if the agent deviates to a different location, it might be chosen with a higher probability, but the agent will also pay more. The largest technical difference in the analysis from Lu et al. (2010) is our introducing of a more delicate analysis for the line metric. We stress, however, that the better approximation ratio of \(3\) (rather than the ratio of \(4\) of Lu et al. (2010)) is due to the different nature of the problem (rather then the more delicate analysis) as both algorithms are tight for the line metric. One intuitive explanation for why the similar approach works better for the second facility problem is that the first facility is fixed and so we do not have to pay the cost of "guessing it" as done in Lu et al. (2010).

#### 6.2.2 The \(\)-Robustness of the Big Cluster Center

Our randomized mechanism uses the predictions to estimate one facility, and randomly chooses the second facility. For this purpose, we come up with an algorithm to "estimate" the first facility location. We formally define what it means to "estimate" one of the two facilities, and then we quantify the distance and approximation robustness of the estimator. This is the last piece of the puzzle that we need for our randomized mechanism. The idea here is that even though Example 1 shows we cannot simply compute the optimal solution, most of the predictions are correct and contain useful information: We can still get a good estimation for one of the two centers of the optimal solution. In this section, we show an algorithm (location estimator), Big-Cluster-Center, that "estimates" of the center of the bigger4 cluster center out of the two clusters induced by \(2\)-Medians.

**Definition 12** (Big-Cluster-Cost).: _For any \(X=\{x_{1},,x_{n}\} V^{n}\), let \(F\) be its optimal \(2\)-median, and let \(=(X,F)\) be the induced clustering. Let Big-Cluster\((X)\) be the cluster in clustering \(\) with at least \(}{{2}}\) points (if both clusters have the same size \((X)\) can be the one containing \(x_{1}\)). For \(t V\), define_

\[(X,t):=_{1}(( X),t).\]

**Definition 13** (Big Cluster Location Problem).: _Given \(n\) points \(X V^{n}\), the objective is to find a point \(t V\) to minimize the cost function Big-Cluster-Cost\((X,t)\)._

We specifically focus on the line metric, and only consider \(X^{n}\) instances where the clustering induced by \(2\)-Medians\((X)\) are \(b\)-unbalanced for some (some constants) \(b>1\), \([0,}{{2}})\).

\((h_{L},h_{R})=(b-1)\)-Balanced \(2\)-Median\((X)\) ;

\(L^{}=\{x_{i} X d(x_{i},h_{L}) d(x_{i},h_{R})\}\);

\(R^{}=X L^{}\);

Return \(h_{L}\) if \(|L^{}||R^{}|\) and \(h_{R}\) otherwise;

**Theorem 8**.: _Let \(\) be the collection of all datasets in \(\) for which the optimal \(2\)-medians induces no \(b\)-balanced clusterings. Then for a small enough (constant) \(\), Algorithm Big-Cluster-Center is \((1.8+O(),)\)-approximation-robust for the cost function Big-Cluster-Cost restricted to instances in \(\)._

The intuition for the proof of Theorem 8 is that one cluster has a big portion of the points, and most of them also appear in the predictions. Thus, in the cost minimizing solution computed on the predictions, there must be a big center "near" these points (since any solution far away from these points would result in a higher cost). The analysis is close to tight (see Remark 25 in Appendix H).

#### 6.2.3 The \(2\)-Facility Location Algorithm

Our randomized algorithm below first uses the Big-Cluster-Center procedure on the predictions to approximate the "big" cluster center, and then uses the Second-Proportional-Mechanism to approximate the second cluster center using only the agents' reports. (We set \(b_{>1}\) such that the approximation robustness in Theorem 4 equals 1.2.) The proof is at Appendix J.

\(h_{1}=\)Big-Cluster-Center\((X^{},b,)\);

\(h_{2}=\)Second-Proportional-Mechanism\((X,h_{1})\);

Return \(H=(h_{1},h_{2})\);

**Theorem 9**.: _For a small enough (but still constant) \(\): Algorithm 4 is strategyproof and has an expected approximation ratio of \(3.6+O()\)._

The proof uses most of the tools we came up with so far, and it considers two main scenarios: when clustering is \(b\)-balanced and when it is unbalanced. In both cases, by leveraging the \(\)-robustness of 1-median, 2-medians, big-cluster-center and the (randomized) strategic placement of the second facility, the mechanism ensures that the solution approaches the optimal cost.

## 7 Conclusion and Future Directions

We explore strategyproof facility location within our introduced Mac predictions error model. Our model integrates the trust level into the error model, handles outliers, and leads to new mechanism designs (that do not seem to be an interpolation between completely trusting the predictions and resorting to a "no-predictions" method). To analyze our designs, we utilize distance and approximation robustness notions established in Section 5.

An immediate question arising from our results is whether there is a _deterministic_ mechanism with Mac predictions for \(2\)-facility location on a line that yields a constant approximation. Another avenue for future research is improving the approximation ratio by randomized mechanisms for this problem. One promising strategy entails refining the selection process for the first facility in Algorithm 4, which can lead to a superior approximation ratio. Our current mechanisms treat the multi-sets of predictions and reported values as independent entities; an intriguing direction for further investigation is to devise mechanisms that capitalize on the matching between predictions and agent-reported values, potentially yielding a more accurate approximation ratio. Lastly, exploring the application of the Mac model to problems beyond mechanism design for facility location may yield insights into the efficacy of such predictions in diverse contexts.