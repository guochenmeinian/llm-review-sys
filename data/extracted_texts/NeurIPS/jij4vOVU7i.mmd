# Efficient Temporal Action Segmentation via

Boundary-aware Query Voting

Peiyao Wang\({}^{1}\)   Yuewei Lin\({}^{2}\)   Erik Blasch\({}^{3}\)   Jie Wei\({}^{4}\)   Haibin Ling\({}^{1}\)

\({}^{1}\)Stony Brook University, \({}^{2}\)Brookhaven National Laboratory,

\({}^{3}\)Air Force Research Laboratory, \({}^{4}\)The City College of New York

{peiyaowang, hling}@cs.stonybrook.edu, ywlin@bnl.gov,

erik.blasch@gmail.com, jwei@ccny.cuny.edu

Corresponding authors

###### Abstract

Although the performance of Temporal Action Segmentation (TAS) has been improved in recent years, achieving promising results often comes with a high computational cost due to dense inputs, complex model structures, and resource-intensive post-processing requirements. To improve the efficiency while keeping the high performance, we present a novel perspective centered on per-segment classification. By harnessing the capabilities of Transformers, we tokenize each video segment as an instance token, endowed with intrinsic instance segmentation. To realize efficient action segmentation, we introduce BaFormer, a boundary-aware Transformer network. It employs instance queries for instance segmentation and a global query for class-agnostic boundary prediction, yielding continuous segment proposals. During inference, BaFormer employs a simple yet effective voting strategy to classify boundary-wise segments based on instance segmentation. Remarkably, as a single-stage approach, BaFormer significantly reduces the computational costs, utilizing only \(\)**6%** of the running time compared to the state-of-the-art method DiffAct, while producing better or comparable accuracy over several popular benchmarks. The code for this project is publicly available at https://github.com/peiyao-w/BaFormer.

## 1 Introduction

Temporal Action Segmentation (TAS) [28; 43; 30; 29; 21; 32], a notable endeavor in the study of untrimmed videos, aims to allocate an action label to each frame, enabling the detailed analysis of complex activities by identifying specific actions within long-form videos. It has extensive applications in surveillance [11; 12], sports analytics , and human-computer interaction . Despite its critical importance, existing TAS models often grapple with high computational costs and lengthy inference times, limiting their applicability in real-time and resource-constrained scenarios.

The inefficiency of TAS arises from two primary factors:1) Long-form Input: Untrimmed videos in TAS often include tens of thousands of frames containing multiple action segments that ideally should be sparse in terms of action semantics. However, most approaches [15; 32; 21; 43] maintain frame-wise processing throughout the model to preserve dense information, aiming to enhance frame-wise prediction accuracy yet at the cost of efficiency. Conversely, the straightforward downsampling method  fails to achieve the desired accuracy for dense predictions. 2) Heavy Model Structure: The adoption of multi-stage refinement models and various time-consuming post-processing techniques further contribute to the slow runtime of TAS models. For instance, although a previousmethod  employs a single-stage model with transcripts to mitigate the heavy model structure, the algorithms used during post-processing remain time-intensive, as shown in Fig. 2.

**Our objective is to transform the long-form video into a sparse representation, thereby reducing the temporal dimension processed by the model. Additionally, we aim to employ a single-stage model coupled with an appropriate post-processing method to minimize the running time.** Benefiting from the query-based model, which allows information to be compressed into a limited number of queries, segments can be effectively represented as queries. By enabling each query to predict the corresponding class, start, and end, action segmentation can be seamlessly reframed as an action detection task. However, this significant compression of the long-form input adversely impacts the accuracy of dense predictions, as noted in . To address the limitation, we draw inspiration from recent advances in mask classification-based image segmentation, particularly MaskFormer . In TAS, rather than predicting frame-wise results directly, we propose using a set of queries to represent segments by decoupling their binary masks and their classes. The decoupling approach effectively conveys sparse information through limited queries, while preserving dense information via binary masks. Furthermore, the continuous nature of features in the temporal dimension introduces discontinuities in learning frame-wise masks. To address the issue of discontinuity, we introduce an additional query to learn boundaries, capturing global information with minimal computational overhead. The additional query should also facilitate efficient post-processing.

**Our solution**, depicted in Figure 2, involves a parallel boundary-wise segment proposal generation to yield compact and continuous segment proposals. By classifying these segment proposals via multiple query voting, our method, named **BaFormer** (Boundary-aware Transformer), realizes efficient TAS with high performance. Experiments conducted on three popular TAS datasets validate the effectiveness of our method. Specifically, on the 50Salads dataset: compared with the baseline ASFormer, our approach improves accuracy by 3.9%, F1@50 by 7.9%, and edit score by 4.6%. Compared to the state-of-the-art performer DiffAct , our approach delivers competitive results while requiring only **10%** of the FLOPs and **6%** running time. Moreover, our query-based voting mechanism significantly reduces inference time to **24%** of that required by the single-stage model UVAST . The contributions of our work are threefold:

1. A query-based Transformer is introduced to convert TAS from dense per-frame classification into a sparse per-query alternative, substantially reducing computational overhead.
2. The simple yet effective boundary-aware query voting ensures accurate and coherent action segmentation.
3. Experimental evidence demonstrates our model's superiority in efficiency over existing state-of-the-art TAS methods, without sacrificing effectiveness.

## 2 Related Work

**Temporal Action Segmentation.** In temporal action segmentation, many methods [15; 30; 7; 1; 41; 21; 45; 6; 44; 32; 3] have been developed to address the challenge of over-segmentation. Notably,MSTCN , ASFormer , and DiffAct  utilize repeating modules and multi-loss supervision to enhance long-range dependency capture and refine preliminary predictions. In addition, several methods [7; 1; 41; 42; 6; 44; 18] incorporate post-processing techniques that integrate priors, such as boundaries  and transcripts , to further refine per-frame predictions. Additionally, other methods[43; 21; 6] opt for a parallel approach to frame-wise prediction and constraint learning within end-to-end models. For instance, BCN  and ASRF  introduce boundary prediction as an auxiliary branch to enhance results, while UARL  leverages certainty learning to exploit transitional expressions. Despite these innovative efforts improving the performance, the reliance on multistage networks as the backbone structure leads to increased computation costs. Building on recent advancements, UVAST  introduces a query-based network  to predict transcripts, transitioning from a multi-stage to a single-stage network for frame-wise prediction, which results in a reduction of FLOPs compared to earlier methods. However, post-processing with the Viterbi algorithm [26; 36] incurs significant time during inference, detracting from its suitability for real-time applications.

**Query-based model for Image Detection and Segmentation.** Benefiting from Transformer architectures, query-based models have recently revolutionized object detection [4; 34; 13; 37; 33; 46; 8], which utilizes a Transformer network to predict bounding boxes and their corresponding classes. This architecture can be readily adapted for image segmentation as well. MaskFormer  and Mask2Former  offer a direct application, that predicts mask classifications and their corresponding binary masks, transforming the task from pixel-wise dense prediction to mask classification. In recent advancements, SAM (Segment Anything Model)  emerges as a powerful solution for segmenting generic objects. Integrating query-based architectures has paved the way for more effective and versatile segmentation solutions.

**Our method** is different from previous TAS ones with the use of the query-based model. UVAST , yields a query-based transcript used for the potentially heavy post-processing, is mostly related to ours. By contrast, our approach BaFormer utilizes the query-based module in conjunction with a single-stage frame-wise module to decouple frame-wise results into query masks and classifications like that in image segmentation via mask classification, which is the first for TAS. The decoupling allows our method to facilitate efficient inference via query-based majority voting, leveraging boundary information.

## 3 BaFormer

The overview of BaFormer is shown in Fig. 3, consisting of a frame-wise encoder-decoder, a Transformer decoder, output heads, and inference processing. The input is a video \(^{T 3 H W}\) comprising \(T\) frames of resolution \(H W\), and the final output is frame-wise segment results.

* In the frame-wise encoder-decoder module, the frame encoder first extracts video feature maps \(^{e}^{T C_{0}}\) from the input video **V**, which are then fed to frame decoder with \(L\) layers followed by a linear layer, resulting in \(^{d}^{T C}\). Additionally, we collect output features from \(L\) frame decoder layers as \(=\{_{l}^{T C}\}_{l=1}^{L}\).
* Next, the Transformer decoder, comprising \(L\) layers, processes \(M\) trainable instance queries \(_{0}^{M C}\). It takes features **F** and masks \(=\{_{l}^{m}^{M T}\}_{l=0}^{L-1}\) as inputs. \(_{l}^{m}=^{m}(_{l},^{d})\) corresponds to the mask prediction probability estimated by the mask prediction head \(^{m}\). \(_{l}\) is instance query embedding of the \(l^{}\) Transformer layer. As shown in Fig. 4(a), the \(l^{}\) layer utilizes \(_{l-1},_{l-1}^{m},_{l}\) to generate \(_{l}\).
* In the output heads, each instance query embedding \(_{l}\) is processed alongside frame embeddings \(^{d}\) by three distinct heads, which calculate the probabilities for query class (\(_{l}^{c}\)), masks (\(_{l}^{m}\)), and boundaries (\(_{l}^{b}\)), respectively. Fig. 3 specifically illustrates the processing of the final layer's embeddings by the output heads.
* Finally, during inference, the predictions are aggregate from the final Transformer layer, including query class probability \(_{L}^{c}\), masks prediction \(_{L}^{m}\), and boundary predictions \(_{L}^{b}\). And boundary-aware query voting is employed to finalize the results.

### Frame-wise Encoder-Decoder

The frame-wise encoder-decoder module is designed to preserve dense information essential for model's functionality. Following previous research [15; 45; 32], we employ the I3D  encoder with frozen parameters to transfer video input \(^{T 3 H W}\) into video features \(^{c}^{T C_{0}}\), setting \(C_{0}\) to 2048. Subsequently, we select the ASFormer encoder , equipped with \(L\) layers, as the frame-wise decoder. This decoder processes \(^{c}\) to yield frame-wise embeddings \(^{d}^{T C}\), enriching the model with dense information crucial for query masks and boundary predictions.

### Transformer Decoder

The Transformer decoder aims to compress video sequences into sparse representations via queries to improve model efficiency. It stacks \(L\) Transformer layers \(\{_{l}\}_{l=1}^{L}\), as illustrated in Fig. 4(a). The output of the \(l^{}\) layer \(_{l}^{M C}\) can be generated according to:

\[_{l}=_{l}(_{l-1},_{l-1}^{m},_{l} ), l=1,2,...,L\] (1)

where \(_{l}^{T C}\) represents the frame-wise features from the \(l^{}\) frame decoder layer, and \(_{l-1}^{m}=^{m}(_{l-1},^{d})^{M T}\) is the output of mask prediction head \(^{m}\) with input \(_{l-1}\) and \(^{d}\). The detailed computation of \(^{m}\) will be specified in the output heads section.

The final output of the Transformer decoder, \(_{L}\), is then directed to the output heads for the ultimate prediction. Additionally, the intermediate outputs \(_{l}\) (for \(l<L\)) are also fed into output heads, serving for auxiliary outputs, which are further discussed in output heads and loss sections.

The specific structure of each Transformer layer \(_{l}\) is illustrated in Fig. 4(b). Each layer consists of three sub-layers with normalization and residual connection: (1) a Mask-Attention (MA) layer, (2) a Self-Attention (SA) layer, and (3) a Feed-Forward Fetwork (FFN). The SA and FFN are the same as those in the vanilla Transformer . The MA layer is a variant from Mask2Former , where the thresholding of mask prediction is changed from hard into soft, which suits action segmentation within a temporally continuous feature space. Specifically, in the \(l^{}\) Transformer layer, mask-attention layer in Fig. 4(b) can be formulated as:

\[}_{l}&=( _{l-1}),}_{l}=(_{l}), }_{l}=(_{l}),\\ _{l}&=_{l-1}^{m}}{}}_{l}}_{l}^{T}}_{l}+_{l-1},\] (2)

where \(\) is the Hadamard product. The mask \(_{l-1}^{m}\) is a probability matrix, with each element within the interval \(\). This structure enables the queries to concentrate more effectively on the principal information of the frame sequence.

### Output Heads

The output heads are designed to generate key elements required by the inference module, including query classes, query masks, and class-agnostic boundaries. Given \(\{_{l}\}_{l=1}^{L}\), there will be \(L\) groups of output heads. Each \(_{l}\) is processed through the \(l^{}\) group of output heads to yield prediction. For

Figure 3: Overview of BaFormer architecture. It predicts query classes and masks, along with boundaries from output heads. Although each layer in the Transformer decoder holds three heads, we illustrate the three heads in the last layer for simplicity.

notation conciseness, we omit the subscripts of the inputs \(_{l}\), the output heads, and the predictions in this section.

Each group of output heads comprises three learnable modules: a classification head \(^{c}\), a mask prediction head \(^{m}\), and a boundary prediction head \(^{b}\). They will produce query class probability \(^{c}^{M(K+1)}\), query masks \(^{m}^{M T}\), and boundary probability \(^{b}^{T}\), respectively. They can be formulated as:

\[^{c}=^{c}()=(()),\ \ \ ^{m}=^{c}(,^{d})=(( )^{d^{}}).\] (3)

The Multi-Layer Perceptron (MLP) consists of three hidden layers. According to the \(M\) queries, we can denote output as \(^{c}=\{^{c}_{i}\}_{i=1}^{M}\), \(^{m}=\{^{m}_{i}\}_{i=1}^{M}\). The predicted class-mask pair \((^{c}_{i},^{m}_{i})\) corresponds to output of the \(i^{}\) query.

Before the instance query embeddings **Q** are fed into the boundary head, they are aggregated across the query dimension into a global query by another MLP with three layers, followed by a linear layer, resulting in \(^{}=((^{})^{ })^{}^{C}\). The global query encompasses comprehensive video information, thereby facilitating a global boundary prediction. Then the boundary head can be formulated as:

\[^{b}=^{b}(^{},^{d})= (^{}^{d^{}}).\] (4)

Moreover, outputs of previous Transformer decoder layers \(_{l}(l<L)\) are also fed into outputs heads through Equations (3) and (4) to obtain auxiliary outputs \(^{c}_{l},^{m}_{l}\), and \(^{b}_{l}\), serving as intermediate supervision.

### Matching Strategies and Loss Function

Training the model requires ground truth supervision for query classes, masks, and global boundaries. For boundary detection, we represent ground-truth boundaries as \(^{b}^{T}\), a heatmap generated by applying a Gaussian distribution to the binary boundary mask. For query class and mask ground truths, we define ground-truth segments as class-mask pairs \(\{(y^{c}_{i},^{m}_{i})\}_{i=1}^{N}\), where \(y^{c}_{i}\) indicates the action class, \(^{m}_{i}^{T}\) is the corresponding binary mask, and \(N\) represents the total number of such segments in the video.

The predicted outputs for classes and masks, denoted as \(^{c}\) and \(^{m}\), are organized into class-mask pairs \(\{(^{c}_{i},^{m}_{i})\}_{i=1}^{M}\). \(^{c}_{i}^{K+1}\) and \(^{m}_{i}^{T}\) represent the \(i^{}\) query's class and mask probability prediction, respectively, and \(K\) is the number of action class in the dataset.

Before loss computation, a crucial step is to match ground-truth data with query predictions. Depending on the ground-truth segment type, we apply different matching strategies, as shown in Fig. 5: (1) Ordered Class Matching: instance queries are sequentially aligned with the class order, ensuring a direct match. (2) Transcript Matching: instance queries are sequentially aligned with transcript ground truths by action order, with any excess query predictions aligned to a no-action label. (3) Instance Matching: instance queries are matched with instance ground truths by Hungarian matching algorithm , with extra query predictions assigned to a no-action label. The first two strategies employ fixed matching based on query order, whereas the third strategy utilizes dynamic matching, requiring the matching cost from query class matching and mask matching. We define the cost when matching a pair of mask \(^{T}\) and \(^{T}\) as:

\[_{}(,)=_{} _{}(,)+_{} _{}(,),\] (5)

where the \(_{}\) and \(_{}\) are the loss weight of focal loss  and dice loss . Defined as \(^{c}_{(i,j)}\), the probability value in the \(i^{}\) query class prediction \(^{c}_{i}\) is indexed by the \(j^{}\) class. So the cost

Figure 4: Details of Transformer decoder. (a) Transformer decoder stacks \(L\) Transformer layers. (b) Each Transformer layer consists of a masked attention, self-attention, and a feed-forward network with residual connections and normalization.

between the \(i^{}\) query prediction \((_{i}^{c},_{i}^{m})\)and the \(j^{}\) ground truth \((y_{j}^{c},_{j}^{m})\) in Hungarian matching is:

\[_{ij}=-_{(i,y_{j}^{c})}^{c}+_{}( _{i}^{m},_{j}^{m}).\] (6)

Experimental results reveal that instance matching outperforms others. Training losses for ordered class and transcript matching detailed in the supplemental material. When utilizing instance matching, the training loss for a video is defined as follows:

\[=-_{i=1}^{M}_{(i,y_{(i)}^{c})}^{c}+_{j =1}^{N}_{}(_{(j)}^{m},_{j}^{m })-_{t=1}^{T}y_{t}^{b} p_{t}^{b},\] (7)

where \((i)\) is the optimal ground truth index aligned with the \(i^{}\) query prediction, \((j)\) denotes the optimal prediction index corresponding to the \(j^{}\) ground truth, \(y_{t}^{b}\) is the \(t^{}\) element of \(^{b}\), and \(p_{t}^{b}\) is the \(t^{}\) element of \(^{b}\).

### Inference

During inference, a set of \(M\) pairs of query class-mask probability \(\{(_{i}^{c},_{i}^{m})\}_{i=1}^{M}\) are obtained, along with a boundary probability vector \(^{b}^{T}\), from the \(L^{}\) output heads. We apply a dedicated algorithm outlined in Algorithm 1 to derive the ultimate segmentation outcomes. Initially, boundary prediction produces class-agnostic segment proposals. In each segment, each query mask within the segment is summed up and we identify the majority-contributing query for the segment. Ultimately, the class of this predominant query is assigned as the class for the segment. The algorithm is based on the observation that for each segment proposal span, all the queries may be activated in the mask prediction but the query corresponding to the correct category always dominates.

``` Input: Probability of query class-mask pairs: \(\{(_{i}^{c},_{i}^{m})\}_{i=1}^{M}\), where \(_{i}^{c}^{K+1},_{i}^{m}^{T}\); Boundary probability: \(^{b}=\{p_{i}^{b}\}_{t=1}^{T}\), where \(p_{i}^{b}\) is the boundary probability in the \(t^{}\) frame. Output: Frame-wise segmentation: \(^{T}\).
1 Initialize \(^{T}\) with all zeros \(\{_{i}_{i}=_{i}(_{i}^{c};\,[K])\}_{i=1}^{M}\) \(=\{b_{i}\}_{i=1}^{N_{b}}(\{1,T\}\{t|(p_ {t}^{b}>p_{t-1}^{b})\&(p_{t}^{b}>p_{t+1}^{b}),1<t<T\})\) for\(i=1,2,...,M\)do \(w_{ij}=_{i}^{m}[b_{i}:b_{i+1}]\)  end for\(k=_{i}(\{w_{ij}\}_{j=1}^{M})\) \([b_{i}:b_{i+1}]=_{k}\)  end for ```

**Algorithm 1**Boundary-aware Query Voting

## 4 Experiments

### Setup

**Dataset and Evaluation Metric.** We use three challenging datasets, GTEA , 50Salads  and Breakfast , where 50Salads presents the longest videos while GTEA includes the shortest

Figure 5: Different matching strategies. Given an example video including ordered action \([a_{3},a_{5},a_{1}]\) from a dataset with all action classes \(\{a_{i}\}_{i=1}^{5}\), (a) and (b) are fixed matching, while (c) is dynamic matching.

[MISSING_PAGE_FAIL:7]

boundary supervision. This intermediate level of supervision likely results in finer temporal resolution and a more integrated global context, significantly improving the model's predictive accuracy.

**Why do we use query-based voting?** BaFormer efficiently compresses videos into sparse representations, thereby reducing computational demands. To derive the final frame-wise results from the predictions of query classes, masks, and boundaries, we employ two voting strategies: frame-based, and query-based voting. These strategies correspond to voting on boundaries by queries, and frames, respectively (details are provided in supplemental material). The results of these voting strategies are presented in Table 3. Specifically, the query-based voting mechanism identifies the query contributing most significantly to a segment, treating each query as an integral unit. Conversely, the frame-based voting method, detailed in the supplemental material, determines the segment's class label based on the majority class across frames within the segment. According to the comparison detailed in Table 3, query-based voting significantly surpasses frame-based voting, showcasing improvements in running time and evaluation metrics. Specifically, accuracy obtains an enhancement of 1.8%. The edit score is increased by 5.6%, and F1@50 is improved by 6.7%.

Further, we identify the reasons why query-based voting enhances the results and why it is superior to frame-based voting in Figure 6. Figure 6 comprises two parts. Specifically, to generate the top part, we binarize the predicted masks from the final transformer decoder layer \(_{L}^{m}^{M T}\) to 0 or 1 with a threshold 0.5. Thus, the positions with a value of 1 indicate the presence of actions corresponding to the query class. Next, we apply different colors to these positions and each color represents a single action. Then query masks are stacked to form the top part. In the bottom part, we present video segment results of frame-based and query-based voting, along with the ground truth. The red arrow points towards a specific query within a segment proposal, illustrated between two vertical black dashed lines. The red dashed box shows the segment results within the proposal. Query-based voting can identify new action segments, in contrast to frame-based voting, which is limited to recognizing only the predefined action classes within a segment. As demonstrated in Figure 6, we highlight intervals where new actions are discerned that would not be apparent through smoothing of frame-wise results. We hypothesize that this is due to the voting process among segmental candidates, which is independent of class probability and focuses instead on the number of frames. This approach can rectify misclassifications inherent in frame-wise analysis that overemphasizes class probability.

**Different strategies for boundary generation.** To obtain boundaries quickly, we experiment with two techniques: Non-Maximum Suppression (NMS) and peak choice, with the corresponding results presented in Table 4. Peak choice focuses on identifying boundaries within a local context. In contrast, NMS initially identifies boundaries with the maximum probability on a global scale and subsequently eliminates other boundary candidates at a local level. The analysis reveals that they yield similar outcomes and running time.

**How well would our approach perform if we had _perfect_ boundaries?** We also conduct an analysis related to class-agnostic boundaries. Given that boundary quality is crucial to our process, we aim to quantify the potential performance improvement if "perfect" boundaries are available. To this end,we run BaFormer using ground truth boundaries on the 50Salads dataset instead of our predicted class-agnostic boundaries, as shown in Table 5. All the metrics have improved significantly. This indicates that our approach yields more promising results by higher-quality class-agnostic boundaries, which can be one of the future directions.

### Comparisons with the State of the Arts

In Table 6, we categorize methods by multi-stage and single-stage. Our main comparison is with the single-stage methods since our BaFormer adopts the same single-stage frame-wise decoder. Compared with UVAST with different alignment modes, BaFormer demonstrates superior efficiency, achieving the shortest processing time while outperforming it in most metrics. Notably, BaFormer requires only 24% of the time compared to UVAST with an alignment decoder (UVAST\({}^{}\)), while enhances accuracy by 20.8%, 10%, and 8.4% on the GTEA, 50Salads, and Breakfast datasets, respectively. These results underscore the efficacy of BaFormer in decoupling frame-wise prediction into query masks and class prediction. Overall, BaFormer surpasses all multi-stage methods in terms of accuracy and achieves comparable results in F1 and Edit scores on all datasets. As for efficiency, compared to state-of-the-art multi-stage methods, _i.e._, DiffAct, our method operates with only 6% of inference time and 10% of FLOPs, demonstrating a highly efficient approach to TAS.

**Comparison with the methods with similar Running time.** We compare our method with several others that exhibit similar running time in Table 7, focusing on both CNN and Transformer-based frame-wise decoder. Specifically, 'CNN based frame-wise decoder' refers to the single-stage MSTCN structure, and 'Transformer based frame-wise decoder' refers to the single stage of ASForner structure. Within the CNN based frame-wise decoder, _i.e._, SSTCN , BaFormer achieves outstanding

   &  &  &  &  &  &  &  &  &  &  &  \\   & & 60 & **60** & **65** & **0.0** & **M** & **F10** & **(10,25,50)** & **Edit** & **Acc.** & **F11** & **(10,25,50)** & **Edit** & **Acc.** & **F11** & **(10,25,50)** & **Edit** & **Acc.** \\   & MSTCN  & 2019 & 0.094 & 4.9 & 0.80 & 88.8 & 83.4 & 69.8 & 79.0 & 76.3 & 76.0 & 64.5 & 67.9 & 80.7 & 52.6 & 48.1 & 37.9 & 61.7 & 66.3 \\  & SSTCN  & 2020 & 0.713 & 9.3 & 0.80 & 80.0 & 89.1 & 76.0 & 82.9 & 83.0 & 81.5 & 78.3 & 83.2 & 58.0 & 69.1 & 85.2 & 73.3 & 70.2 \\  & BCN  & 0.012 & 0.152 & 72.4 & 12.77 & 88.0 & 75.1 & 77.4 & 79.8 & 82.3 & 81.3 & 74.0 & 74.3 & 84.4 & 67.6 & 85.5 & 50.0 & 66.2 & 70.4 \\  & HASK  & 0.217 & 0.27 & 90.2 & 19.7 & 90.8 & 76.6 & 75.4 & 78.7 & 86.6 & 77.5 & 88.0 & 83.9 & 74.7 & 68.7 & 69.5 & 67.0 & 68.7 & 69.6 & 68.3 \\  & DTGDA  & 0.321 & 0.261 & 37.5 & 79.8 & 88.6 & 77.2 & 83.0 & 77.6 & 79.1 & 75.9 & 66.0 & 77.2 & 80.0 & 68.7 & 61.9 & 64.6 & 66.6 & 68.9 & 68.3 \\  & ASRF  & 0.163 & 7.4 & 1.3 & 180.4 & 87.8 & 79.8 & 83.7 & 73.3 & 84.9 & 53.5 & 77.3 & 79.8 & 84.5 & 74.3 & 68.9 & 86.4 & 76.2 & 67.4 & 67.6 \\  & Go-art  & 0.171 & - & 89.7 & 37.3 & 75.8 & 86.6 & 80.3 & 76.0 & 76.4 & 73.4 & 82.2 & 74.9 & 68.0 & 53.2 & 73.3 & 70.9 \\  & ASPFormer  & 0.351 & 0.39 & 6.6 & 1.3 & 90.1 & 78.2 & 89.6 & 85.1 & 79.6 & 85.3 & 77.6 & 88.4 & 76.0 & 76.9 & 85.4 & 76.0 & 75.4 & 76.0 & 73.5 \\  & UAR  & 0.302 & 0.359 & 6.6 & 1.3 & 90.1 & 82.9 & 81.7 & 89.1 & 85.3 & 85.5 & 77.8 & 84.2 & 65.2 & 69.4 & 74.6 & 67.8 \\  & UAR  & 0.302 & 0.359 & 6.6 & 1.3 & 90.1 & 82.9 & 81.7 & 89.1 & 85.3 & 85.3 & 77.5 & 88.2 & 65.2 & 69.4 & 74.6 & 67.8 \\  & UAR  & 0.302 & 0.43 & 6.6 & 1.3 & - & 87.1 & 87.5 & 88.5 & 86.9 & 88.3 & 86.9 & 78.3 & 45.2 & 62.9 & 77.7 & 75.8 \\  & DTA & 0.402 & 0.403 & 6.6 & 1.3 & - & 91.2 & 90.6 & 81.4 & 87.9 & 87.4 & 86.1 & 88.4 & 85.9 & 76.9 & 72.4 & 67.5 & 76.1 & 73.3 \\  & LCFNet  & 0.233 & 0.32 & 8.31 & 0.66 & - & 88.2 & 89.4 & 87.2 & 87.0 & 62.0 & 82.2 & 37.7 & 77.6 & 72.6 & 66.1 & 77.0 & 74.2 \\  & DefAct  & 0.232 & 2.303 & 2.36 & 49.4 & 1.21 & **92.5** & **91.5** & **81.7** & **80.2** & **81.9** & **80.2** & **83.7** & **86.0** & **88.3** & **89.3** & **89.3** & **76.4** & **78.4** & **76.4** \\  & KABI  & 20.232 & - & - & - & - & - & - & - & - & - & - & - & - & - & - &enhancements, surpassing MSTCN by 3.8% in accuracy, 10.5% in Edit score, and 8.0% in F1@50. Notably, BaFormer significantly augments SSTCN's performance, yielding a 54.3% increase in F1@50. This comparison underscores BaFormer's single-stage capability to achieve high performance efficiently, maintaining the same inference time. When leveraging a Transformer as the frame-wise decoder, we modify the number of stages in multi-stage methods to match the inference time of BaFormer. This adjustment leads to a new version of ASFormer with a single encoder and DiffAct with a simplified step decoder. Among these methods, BaFormer emerges as the top performer. This signifies that achieving frame-wise results through the decoupling of query masks and class prediction is more effective than direct frame-wise prediction.

## 5 Limitations and Conclusion

BaFormer takes the query-based Transformer framework, which is known for its slow training convergence and data thirsty. We observe that training query-based Transformer converges slower than training frame-wise approaches. For the discontinuous binary mask predictions, it may also be attributed to the limited data of action segmentation benchmarks. We hope that these factors can inspire future work.

In conclusion, we introduce BaFormer, a novel boundary-aware, query-based approach for efficient temporal action segmentation. Contrasting most of the previous methods that rely on multi-stage or multi-step processing, BaFormer employs a one-step strategy. It simultaneously predicts the query-wise class and mask, while yielding global boundary prediction for segment proposals. We apply query-based voting for segment proposal classification. BaFormer offers a unique perspective for addressing TAS challenges by integrating grouping and classification techniques, representing a novel perception in the temporal action segmentation paradigm, emphasizing both efficiency and accuracy.