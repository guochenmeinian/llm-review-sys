# Coevolving with the Other You: Fine-Tuning LLM

with Sequential Cooperative Multi-Agent Reinforcement Learning

 Hao Ma\({}^{1,2}\) Tianyi Hu\({}^{1,2}\) Zhiqiang Pu\({}^{1,2}\) Boyin Liu\({}^{3}\)

**Xiaolin Ai\({}^{2}\) Yanyan Liang\({}^{4}\) Min Chen\({}^{2}\)**

\({}^{1}\)School of Artificial Intelligence, University of Chinese Academy of Sciences

\({}^{2}\)Institute of Automation, Chinese Academy of Sciences

\({}^{3}\)Alibaba (China) Co., Ltd.

\({}^{4}\)Macau University of Science and Technology

{mahao2021, hutianyi2021, zhiqiang.pu, xiaolin.ai, chenmin2020}@ia.ac.cn liuboyin.ly@alibaba-inc.com yyliang@must.edu.mo

These authors contributed equally to this work.Corresponding author: zhiqiang.pu@ia.ac.cn.

###### Abstract

Reinforcement learning (RL) has emerged as a pivotal technique for fine-tuning large language models (LLMs) on specific tasks. However, prevailing RL fine-tuning methods predominantly rely on PPO and its variants. Though these algorithms are effective in general RL settings, they often exhibit suboptimal performance and vulnerability to distribution collapse when applied to the fine-tuning of LLMs. In this paper, we propose CORY, extending the RL fine-tuning of LLMs to a sequential cooperative multi-agent reinforcement learning framework, to leverage the inherent coevolution and emergent capabilities of multi-agent systems. In CORY, the LLM to be fine-tuned is initially duplicated into two autonomous agents: a pioneer and an observer. The pioneer generates responses based on queries, while the observer generates responses using both the queries and the pioneer's responses. The two agents are trained together. During training, the agents exchange roles periodically, fostering cooperation and coevolution between them. Experiments evaluate CORY's performance by fine-tuning GPT-2 and Llama-2 under subjective and objective reward functions on the IMDB Review and GSM8K datasets, respectively. Results show that CORY outperforms PPO in terms of policy optimality, resistance to distribution collapse, and training robustness, thereby underscoring its potential as a superior methodology for refining LLMs in real-world applications. The code can be found at: https://github.com/Harry67Hu/CORY.

## 1 Introduction

Large language models (LLMs) have achieved impressive success across diverse downstream tasks, including dialogue systems , code generation , and robotic control . However, as the capabilities of LLMs advance, the challenges associated with further performance gains become increasingly intricate. Fine-tuning LLMs for specific tasks presents a significant challenge, prompting recent exploration of LLM fine-tuning paradigm such as supervised fine-tuning (SFT) , reinforcement learning (RL) fine-tuning , and direct preference optimization(DPO) (Rafailov et al., 2024). RL fine-tuning demonstrates promising potential for refining LLM. Compared to SFT, RL fine-tuning offers a more direct optimization path, aligning training with desired outcomes and potentially leading to better out-of-distribution performance (Kirk et al., 2023). Compared to DPO, RL fine-tuning allows fine-tuning on rule-based reward functions without requiring preference data.

However, contemporary RL algorithms are not specifically designed for LLMs. When fine-tuning an LLM using these RL algorithms, they exhibit instability and vulnerability to distribution collapse, which means that the LLM is over-optimized and exhibits highly biased behavior (Zheng et al., 2023; Yang et al., 2024). From the perspective of RL, LLM fine-tuning has several challenges, including large discrete action space and sparse rewards. Taking the RL fine-tuning of Llama-2 (Touvron et al., 2023) as an example, the dimension of the action space of LLama-2 can reach to 32000, representing 32000 potential vocabulary choices. Moreover, the reward signal is received only after generating the complete response, which results in a sparse reward problem. The above challenges hinder the exploration in such a vast search space, causing the instability of popular algorithms like PPO (Schulman et al., 2017).

Cooperative multi-agent reinforcement learning (MARL) represents a paradigm shift in the field of artificial intelligence (AI), where multiple autonomous agents coevolve within a complex system, resulting in the emergence of new skills (Foerster, 2018; Yang and Wang, 2020; Oroojlooy and Hajinezhad, 2023; Zang et al., 2023). Language is an outcome of such multi-agent coevolution. In a society, numerous individuals utilize language for communication. Languages develop through agent interactions and are shaped by societal and cultural influences. As languages progress, they influence and are influenced by these interactions (Cavalli-Sforza and Feldman, 1981; Duenez-Guzman et al., 2023). Inspired by this, fine-tuning an LLM within a cooperative MARL framework might lead to the emergence of superior policies during coevolution.

In this paper, we propose a plug-and-play method named CORY, which extends the RL fine-tuning of LLMs to a sequential cooperative MARL framework. In CORY, the LLM to be fine-tuned is initially duplicated into two autonomous agents3, assigned two roles respectively: a pioneer and an observer. There are two fundamental mechanisms in CORY to enable the coevolution of the two LLM agents. The first is knowledge transfer, where the pioneer generates a response according to a task query independently, and the observer generates response based on the query as well as the response from the pioneer. The second is role exchange, where the roles of the two LLM agents are exchanged periodically during training. The two agents share a collective reward, calculated as the sum of individual task rewards, and they are trained simultaneously with their respective samples. Ultimately, CORY acts as a form of bootstrapping, wherein the collaborative learning between LLMs enhances the effectiveness of RL fine-tuning. Notably, this approach remains algorithm-agnostic, offering flexibility for integration with various RL algorithms beyond PPO, while maintaining simplicity and compatibility with existing methods.

In the experimental evaluation, we systematically investigate the efficacy of our proposed method across two types of reward functions: subjective and objective. Subjective reward functions are models trained to align human preferences, while objective reward functions are pre-defined functions typically established by domain experts. For the assessment of subjective rewards, we leverage the IMDB review dataset (Tripathi et al., 2020), a well-established benchmark for sentiment analysis. Meanwhile, the evaluation of objective rewards is conducted using the GSM8K dataset (Cobbe et al., 2021), which focuses on mathematical word problem reasoning. Experiment results indicate that CORY surpasses PPO regarding policy optimality, resilience to distribution collapse, and robustness during training, highlighting its potential as an advanced method for improving LLMs in practical applications.

## 2 Problem Formulation

To understand LLMs through the lens of RL, we present a sequential decision-making problem formulation for the next-token prediction in causal language models. The next-token prediction is precisely defined by the concept of language-augmented Markov decision process (Li et al., 2022), denoted as \(=<,,,r,P,>\). Here, \(\) represents a vocabulary of a language model,encompassing all possible tokens. The \(w\) represents a specific token within this vocabulary. The state space \(^{M}\), where \(^{M}\) is the combination space of \(M\) tokens. The action space \(^{N}\), where \(^{N}\) is the combination space of \(N\) tokens. \(M\) and \(N\) are the max token lengths for state and action, respectively. A state \(s\) is a concatenation of token sequence \(s=(w_{1},w_{2},,w_{M})\). An action \(a\) is the output of a causal language model, construed as a concatenation of token sequence \(a=(w_{1},w_{2},,w_{N})\). The states and actions are padded with pad token if the real length is less than the maximum length. The reward function \(r:\) assigns a numerical score to a sequence of tokens, which can be considered as a typical sparse reward problem within the context of RL. The state transition function \(P:\) describes a deterministic transition of states according to the auto-regressive paradigm. At each step, a predicted token is concatenated with the state of last step: \(s_{i+1}=(s_{i},w_{i+1})=(s_{0},w_{1:i+1})\), where \(s_{0}\) denotes a tokenized user's input for a causal language model, and \(w_{1:i}=(w_{1},w_{2},,w_{i})\) denotes a token sequence up to the \(i\)-th token. Then, the token-level policy of a causal language model can be encapsulated within \((w_{i}|s_{0},w_{1:i-1})\). And the sentence-level policy is defined as a joint policy:

\[(a|s_{0})=_{i=1}^{N}(w_{i}|s_{0},w_{1:i-1}).\] (1)

The reward function \(r(,)\) is related to a specific task (e.g., safety alignment (Liu, 2023; Ji et al., 2024), code generation (Shojaee et al., 2023; Liu et al., 2023)). A task reward is only obtained after \(N\) steps of decision-making via token-level policy. Under such a sparse reward, RL is prone to over-optimisation, resulting in distributional collapse of the language model. To mitigate the risk of distributional collapse, it is common practice to incorporate token-level KL penalties into the reward function, which serves to constrain the deviation of the language model from its original distribution (Go et al., 2023; Zheng et al., 2023).

\[(s_{i},w_{i})=\{- KL(_{}(|s_{ 0},w_{1:i-1}),_{0}(|s_{0},w_{1:i-1}))&i<N\\ \\ r(s_{0},a)- KL(_{}(|s_{0},w_{1:i-1}),_{0}(|s_{0},w_{ 1:i-1}))&i=N,.\] (2)

where \(\) is the KL coefficient, \((s_{i},w_{i})\) represents the token-level combined reward function. For each token, a KL penalty is imposed based on the KL divergence between current policy \(_{}(|s_{0},w_{1:i-1})\) and initial policy \(_{0}(|s_{0},w_{1:i-1})\). Only after predicting the final token, does the reward model yield a task-specific reward \(r(s_{0},a)\).

## 3 Method

### Coevolving with the Other You (CORY)

To extend the RL fine-tuning of LLMs to a cooperative MARL framework, the LLM to be fine-tuned in CORY is initially duplicated into two copies, each is treated as an autonomous agent. Then, two roles, a pioneer and an observer, are assigned to these two LLM agents. We design two fundamental mechanisms to facilitate the coevolution between the two agents. The first design is knowledge transfer. The LLMs asynchronously take action, with the pioneer transferring its response (action) to the observer. The observer then utilizes this information to guide its own decision. The second design is role exchange. Once the observer achieves a satisfactory performance, it exchanges roles with the pioneer. In the following, we provide a comprehensive description of each element, and the pipeline of our method is shown in Figure 1.

**Knowledge Transfer.** To enable collaboration between the two LLM agents for improved response generation, we introduce a knowledge transfer mechanism. Given a query denoted as \(s_{0}\), the pioneer acts first and generates a response denoted as \(a_{1}\). Subsequently, the observer receives both the original query \(s_{0}\) and the pioneer's response \(a_{1}\) to generate its own response \(a_{2}\). This sequential interaction facilitates knowledge transfer, where the observer leverages the pioneer's output to guide its own generation process, potentially leading to a superior response due to the in-context learning capabilities of LLMs. The sentence-level policies of the pioneer and observer can be formulated as follows:

\[a_{1}_{}(|s_{0}), a_{2}_{}( |s_{0},a_{1}).\] (3)

During the training process, the parameters of the pioneer and the observer are optimized separately through an RL algorithm such as PPO. A cooperative relationship exists between the two LLM agents.

To facilitate this collaboration, CORY employs a collective task reward, calculated as the sum of individual task rewards:

\[r_{}(s_{0},a_{1},a_{2})=r(s_{0},a_{1})+r(s_{0},a_{2}),\] (4)

which implies that both the pioneer and the observer receive rewards from each other's improvement. Following the form of Equation 2, we add \(r_{}\) and the KL penalty to construct a whole reward signal. Similar to Ni et al. (2022), we find that a partially correct reference can also be beneficial for the observer. Hence, it is not necessary for the pioneer to generate a high-quality response.

**Role Exchange.** During training, the observer may develop a prompt bias due to consistently receiving inputs in the form of \((s_{0},a_{1})\). This reliance on prompts that combine the original query with the pioneer's response, hinders the observer's ability to generate responses independently. To address this issue, we introduce a role exchange mechanism. This mechanism involves exchanging the roles of the pioneer and observer periodically during training:

\[_{}(|s_{0})=_{}( |s_{0};_{1}),&_{}(|s_{0},a_{1}) =_{}(|s_{0},a_{1};_{2}),\;\;swap=False\\ _{}(|s_{0})=_{}(|s_{0}; _{2}),&_{}(|s_{0},a_{1})=_{ }(|s_{0},a_{1};_{1}),\;\;swap=True,\] (5)

where \(swap\) is initialized as \(False\), and reverse periodically. This exchange ensures that both the LLMs experience both roles (pioneer and observer) multiple times throughout the training process. Through this role exchange mechanism, they are forced to adapt to both prompt formats: \(s_{0}\) alone and the combined format \((s_{0},a_{1})\). This allows us to use either LLM individually during inference. From a representational learning perspective, this role exchange mechanism encourages the LLMs to develop a unified representation for \(s_{0}\) and \((s_{0},a_{1})\). This unified representation captures the essential information from the task query, regardless of the specific prompt format presented during training or inference.

These two key mechanisms in CORY act as a form of bootstrapping. The two LLM agents collaborate, with the observer potentially learning better policies by leveraging the pioneer's output. Role exchange ensures both the LLMs benefit from this collaborative learning, similar to cooperative learning among humans. Importantly, CORY is an algorithm-agnostic approach, meaning it can be theoretically compatible with various RL algorithms beyond PPO. Additionally, CORY offers the advantages of simplicity in implementation and seamless integration with existing frameworks, making it a plug-and-play solution. The derivation of the CORY's policy update can be found in Appendix B, and the detailed pseudocodes are provided in Appendix C.

Figure 1: The framework of CORY. A traditional RL fine-tuning method can be simply extended to the CORY version with only three steps. First, duplicate the LLM into two LLM agents, one acting as a pioneer and the other as an observer; second, combine the task rewards of the two LLM agents to replace the original task reward; third, periodically exchange the roles of the two LLM agents during training. After training, either the LLM agent can perform the task independently.

### Understanding CORY

Following the explanation of CORY in Section 3.1, this section provides an empirical demonstration of why the proposed method surpasses the single-agent RL fine-tuning method.

In fact, RL fine-tuning with KL penalty inherently formulates a multi-objective reinforcement learning problem. The LLM agent strives to concurrently maximize the task reward and minimize the KL divergence. Unfortunately, these two objectives may be in opposition to one another. This is because maximizing the task reward will inevitably lead to the output distribution deviating from the pre-trained model, resulting in an increase in KL divergence. Hence, the optimization process seeks a trade-off between the task reward and the KL divergence, ideally driving the policy towards a Pareto frontier (Ngatchou et al., 2005). This frontier covers all achievable policies where no policy can improve on one objective without sacrificing performance on the other. Formally, the Pareto frontier can be defined as:

\[:=\{J_{}()^{} :J_{}(^{}) J_{}()\},\] (6)

where \(J_{}()=_{}[_{t=0}^{T}(s_{t},a_{t} )]\). \((s,a)^{m}\) is a vector-valued reward function and \(\) denotes the set of all policies. Given a fixed reference vector \(^{m}\), one could scalarize the multi-objective reward into a single objective by using the weighted sum \(^{T}(s,a)\). Under this preference weighting, the ideal outcome for the policy is to converge to a point on the Pareto frontier, as illustrated by the black dots in Figure 2(a).

However, due to the inherent complexities of natural language, achieving perfect policy convergence to the Pareto frontier is often intractable. Nevertheless, by adjusting the preferences, these sub-optimal policies can still form a frontier as illustrated in Figure 2(b). For simplicity, we term it the sub-optimal frontier. Our hypothesis is that the sub-optimal frontier achieved by CORY lies closer to the true Pareto frontier compared to that achieved by single-agent RL method.

To verify this hypothesis, we fine-tune the Llama-2-7b-chat model on the grade school math 8K (GSM8K) dataset (Cobbe et al., 2021b) using both PPO and CORY. We measure the KL divergence and the task reward obtained by each policy after convergence. By adjusting the preference, i.e., \(\) in Equation 2, we are able to generate sub-optimal frontiers for both the methods, as illustrated in Figure 2(c). It is important to note that the Y-axis represents the negative KL divergence (larger values indicate better performance). As expected, the sub-optimal frontier achieved by CORY consistently outperforms that of PPO, empirically validating the hypothesis.

Our analysis through the lens of multi-objective RL offers valuable insights into the effectiveness of CORY. The knowledge transfer mechanism inherently addresses the optimization challenges faced by the observer. By leveraging the reference response provided by the pioneer, the observer actually experiences a guided optimization process. Such guided process can alleviate the optimization pressure on the task reward side, and prioritize improvement on the KL penalty side. However, since the observer's policy during training takes both the task query and the pioneer's response as inputs, the optimized policy is not the one we really want (we need the policy which only takes the task query as input), resulting in the prompt bias issue. The role exchange mechanism can effectively address this issue, and transfer the skills learned by the observer back to the pioneer, reducing the pioneer's optimization pressure. Notably, CORY demonstrates significantly better stability and robustness compared to single-agent RL method (See details in Section 4.2 and Appendix E.1). It consistently

Figure 2: The empirical demonstration of why CORY surpasses single-agent RL fine-tuning. In (c), the values of \(\) from left to right are 1e-5, 1e-4, 1e-3, and 1e-2.

achieves a lower KL divergence between the fine-tuned and pre-trained models while maintaining strong performance on the target task, signifying a better trade-off between the two objectives.

## 4 Experiments

This section systematically investigate the performance of CORY across two types of reward functions: subjective reward function and objective reward function. Subjective reward functions are reward models trained on data capturing human preferences. They essentially translate the human sentiment or judgment into a numerical reward signal that guides alignment. Objective reward functions are pre-defined rule-based functions, typically established by domain experts. This categorization reflects real-world scenarios where reward functions might be learned from human preferences or manually crafted by domain experts. Prompts used in experiments are detailed in Appendix A.2.

### Subjective Rewards on IMDB Review

**Task Setup.** To evaluate our method under the subjective reward setting, we select the IMDB Review dataset (Tripathi et al., 2020). This dataset contains 50K <text,label> pairs, with the training set and the test set each contains 25K pieces of data. The texts in the IMDB dataset are movie reviews, and the labels are the binary sentiment classification labels. The distilbert-imdb model4 trained on the dataset is employed as the reward model. We fine-tune GPT2-Large (774M)5 by using single-agent PPO (single-PPO) and CORY respectively. In addition, GPT2-XL (1.5B)6 is fine-tuned by using single-PPO as an ablation on model size. In this task, we randomly sample text snippets from the IMDB dataset. The first 2 to 8 tokens (representing the beginning of the review) are retained as prompts for sentiment completion. The LLMs generate continuations that transform the prompts into positive sentiment comments. After that, the reward model evaluates the generated text to assign a sentiment score. The objective is to maximize the average sentiment score of the completed comments. Examples of this task are detailed in Appendix D.

In the experiments, each method undergoes 100 training iterations using a batch size of 256. For simplicity, GPT2-Large and GPT2-XL fine-tuned by single-PPO are termed as _PPO-GPT-2-l_ and _PPO-GPT-2-xl_, respectively. GPT-2-Large that fine-tuned by CORY are referred to _CORY-LLM1_ and _CORY-LLM2_, where the former one is the LLM that initialized as the pioneer, and the latter one is the LLM that initialized as the observer.

**Results and Analysis.** We monitor the training process by visualizing task reward, KL divergence, and a combined reward function that incorporates both the above objectives. Denoted as \(r_{c}(s_{0},a)\), the combined reward function can be expressed as \(r_{c}(s_{0},a)=r(s_{0},a)+*KL(s_{0},_{},_{0})\), where \(r(s_{0},a)\) and \(KL(s_{0},_{},_{0})\) are the sentence-level task reward part and the KL penalty part, respectively. And the KL penalty part can be calculated as \(KL(s_{0},_{},_{0})=_{i=0,1,,N}-KL(_{}(|s_{0 },w_{1:i-1}),_{0}(|s_{0},w_{1:i-1}))\).

It is important to note that, the actual reward used for training in CORY is not the combined reward. The actual training reward not only includes the KL penalty and the task reward from the target agent,

Figure 3: Training curves under subjective rewards on IMDB Review.

but also includes the task reward from the other agent. In fact, the combined reward \(r_{}(s_{0},a)\) is the real overall objective that needs to be optimized, and can be aligned with the single-agent RL fine-tuning, making it easier to compare performance of all the methods.

The training curves of task reward, KL divergence, and the combined reward are illustrated in Figure 12. The results show that single-PPO and CORY achieve similar task reward levels after 100 training iterations. However, the curve of KL divergence related to single-PPO is significantly higher than that of CORY, reaching more than twice the level of CORY after all the training iterations. This indicates CORY's ability to achieve similar task reward levels with a smaller deviation from the pre-trained policy. Moreover, it can be observed that the curves of _CORY-LLM1_ and _CORY-LLM2_ are very close, indicating that the two LLM agents initially playing different roles finally achieve very similar performance levels at the end of the training. Consistent with the motivation of CORY, both the fine-tuned LLM agents can be used to finish tasks individually, which verifies the effectiveness of the bootstrapped learning and coevolution principles in CORY.

Finally, Figure 12(c) visually confirms CORY's advantage in combining the two objectives. The combined reward curve for CORY consistently rises, indicating its effectiveness in simultaneously improving task reward and minimizing KL divergence. Conversely, PPO's combined reward curve exhibits a decreasing trend, suggesting its struggle in balancing these objectives. Hyperparameters used for both single-PPO and CORY are detailed in Appendix A.1.

### Objective Rewards on GSM8K

**Task Setup.** To evaluate our method under a rule-based objective reward function, we select the GSM8K task (Cobbe et al., 2021). GSM8K comprises 8.79K high-quality, linguistically diverse grade school math word problems, with 7.47K allocated for training and 1.32K for testing. For each question in the dataset, a response is obtained via LLM. The precise answer is extracted from the responses using a regular expression, typically the final set of numbers in the response. If the number in question matches the ground truth as recorded in the dataset, a reward of 1 is awarded. Conversely, if the number is incorrect, a reward of 0 is given. The Llama-2-7b-chat7 model is selected as the pre-trained model. To reduce the training overhead, the model is quantised to 4-bit. For simplicity, the 4-bit Llama-2-7b-chat model fine-tuned with single-PPO is referred to as _PPO-Llama-2_. The copied models fine-tuned with CORY are referred to _CORY-LLM1_ and _CORY-LLM2_, where the former is the LLM that initialized as the pioneer, and the latter is the LLM that initialized as the observer. Examples of this task are detailed in Appendix D.

**Results and Analysis.** Similar to Section 4.1, We monitor the training process by visualizing task reward, KL divergence, and the combined reward. As shown in Figure 4, the jitter observed in all curves suggests the challenge posed by GSM8K. The vast exploration space presents inherent instability for the RL algorithms. As Figure 4(a) illustrates, the task reward curve of single-PPO peaks around 50 training iterations, followed by a decline. Single-PPO's KL divergence exhibits no convergence trend, reaching a maximum value during training (Figure 4(b)). The instability of single-PPO results the high KL divergence after 50 iterations, leading to a poor performance on combined reward (Figure 4(c)).

Figure 4: Training curves under objective rewards on GSM8K.

In contrast, CORY demonstrates a significantly more stable task reward curve, consistently outperforming single-PPO. What's more, CORY achieves a considerably lower KL divergence compared to single-PPO, facilitating faster convergence. This characteristic is particularly valuable in the fine-tuning context, as it allows CORY to achieve similar or even better task rewards without significant modifications to the original parameter distributions.

Furthermore, the combined reward curves visually confirm CORY's superiority over single-PPO. CORY's ability to effectively balance the two objectives is reflected in its steadily increasing combined reward. Conversely, single-PPO's struggle with balancing the objectives manifest as a decreasing combined reward and training instability.

In addition, we conduct a comparative analysis of models fine-tuned with distinct methods and a pre-trained model on the GSM8K test set as shown in Figure 5. The evaluation metric utilized is \(pass@k\), which generates \(k\) corresponding repetitions for a sample and passes if at least one is correct. The test results demonstrate that the CORY fine-tuned 4bit Llama-2-chat-7b could achieve a \(pass@1\) of \(18\%\) on GSM8K test dataset.

### Ablations

In ablation experiments, we ablate the influence of model size, knowledge transfer, and role exchange under the subjective reward setting on IMDB review dataset. For method names depicted in Figure 6, _REx_ indicates role exchange, _KT_ indicates knowledge transfer, _LLM1_ and _LLM2_ refer to LLMs who are initialized as the pioneer and the observer respectively.

**Ablation on Model Size.** Our method employs two models during training, with the total parameters trained being doubled in comparison to single-PPO. In order to ablate whether the enhancement of CORY is derived from the expansion of the model parameters, an additional fine-tuning of GPT2-XL (1.5B) with single-PPO is conducted on the IMDB dataset, which has twice the number of parameters as GPT2-Large. The results are presented in Figure 12. While the task reward of the model rapidly reaches its maximum value, the KL penalty part does not exhibit a notable improvement compared to GPT2-Large. The KL divergence continues to increase, leading to the collapse of the distribution.

**Ablation on Knowledge Transfer.** We maintain role exchange, and the two models still share a collective task reward (Equation 4), but disable knowledge transfer. This resembles PPO with individual queries as inputs. However, without the observability of the pioneer's outputs, this equivalent to adding noise to the PPO reward signal. Consequently, the task rewards become unstable, and the KL divergences are higher compared to CORY as shown in Figure 6. This highlights the importance of observability for framing RL fine-tuning as a true multi-agent cooperation problem.

**Ablation on Role Exchange.** We maintain knowledge transfer but disable role exchange. As evident from Figure 6, both LLMs achieve good task rewards, but their KL divergences are much higher than that of CORY. Notably, the observer LLM exhibits significantly lower KL divergence compared to the pioneer LLM. This observation highlights a fascinating phenomenon in cooperative learning:

Figure 5: Evaluation results on GSM8K test dataset.

Figure 6: Training curves for ablations experiments.

by receiving the pioneer's response, the observer can effectively optimize the KL divergence. This suggests that the observer leverages the pioneer's exploration to refine its policy while maintaining good performance, potentially leading to a more stable learning process.

## 5 Related Work

The most related topic is reinforcement leanring from human feedback (RLHF). InstructGPT (Ouyang et al., 2022) fine-tunes GPT-3 like models (Brown et al., 2020) to enhance helpfulness by combining SFT with RL based on human preference dataset. Askell et al. (2021) trains a preference model for aligning the LLM with human values. It argues that ranked preference modeling proves to be the most effective training objective for distinguishing between desirable and undesirable LLM behaviors. Bai et al. (2022) incorporates an iterative online training mode where preference model and LLM are updated weekly using fresh human feedback data. Existing research acknowledges the inherent complexity, instability, and hyperparameter sensitivity of RLHF, particularly when employing PPO Zheng et al. (2023). Several works have attempted to address these challenges by introducing max-entropy regularization (Wen et al., 2024), hyperparameter tuning (Zheng et al., 2023), and reward shaping (Yang et al., 2024). However, these methods does not show significant improvement over the vanilla PPO algorithm. This inspires us to explore alternative method from a different perspective that extent the RL fine-tuning of LLMs to a cooperative MARL problem.

Another related topic is MARL. Under the interaction relationship (cooperation, competition, mixed), multi-agent could spontaneously emerge complex and diverse policies, so as to solve the complex problems that single-agent reinforcement learning is difficult to solve. For example, in Kim et al. (2023), the RL based prompt tuning is decomposed into multi-agent joint tuning. The huge joint action space is equally split across agents, learning better and longer prompt. Such mechanisms have also been applied in the field of combinatorial optimization. The paper that is most similar to us on the architecture of agent training is Gao et al. (2023). It proposes an asymmetric training symmetric execution framework to deal with the two-agent Stackelberg game Fang et al. (2021). In the Stackelberg game, two agents make decisions asynchronously. The agent that makes the decision later can observe the former agent, but the former agent cannot observe the later agent. The training framework proposed by the authors is able to converge in Stackelberg equilibrium empirically. This inspires us to design the training framework for LLMs under a sequential cooperative setting.

## 6 Discussion

Experimental evidence suggests that CORY yields more stable and superior performance in RL fine-tuning. This can be attributed to our extension of single-agent RL fine-tuning into a cooperative MARL version. In this section, we delve into a discussion of how the multi-agent learning can benefit LLM fine-tuning. The primary benefit is that multi-agent learning encourages the coevolution of LLMs through collective living, social relationships and major evolutionary transitions (Duenez-Guzman et al., 2023). This process generates a variety of new data, which further facilitates coevolution. This mechanism contributes to many breakthroughs in games AI, such as Go (Silver et al., 2016, 2017, Clark and Storkey, 2015), StarCraft II (Vinyals et al., 2019), and Diplomacy (Bakhtin et al., 2022).

In this paper, we investigate the application of cooperative MARL to address challenges in RL fine-tuning. Cooperative MARL fine-tuning appears to increase training robustness and prevent distribution collapse. While we concentrate on cooperation, competitive MARL, especially population-based methods, represents a promising direction for future research. These approaches create an auto-curriculum mechanism driven by a natural arms race, which propels agent learning and enables mastery of complex tasks. Besides the interaction paradigm, the scale of agents is crucial to emergence. While we examine a setting involving two LLMs, incorporating more LLMs in MARL fine-tuning is an intriguing prospect for future studies.

## 7 Conclusion

In this paper, we extend the RL fine-tuning of LLMs to a sequential cooperative MARL framework. To this end, we duplicate the pre-trained LLM into two LLM agents with different roles, and design two key mechanisms: knowledge transfer and role exchange. These mechanisms enable the two LLMagents to learn collaboratively, and after the fine-tuning process, either the LLM agent can be chosen to perform the task independently. We also provide an in-depth analysis of RL fine-tune from the perspective of multi-objective RL, revealing the existence of a Pareto frontier between KL divergence and task reward. We empirically illustrate that CORY has an advantage over single-agent RL method in approaching the Pareto frontier. Experiment results indicate that CORY surpasses PPO regarding policy optimality, resilience to distribution collapse, and robustness during training, highlighting its potential as an advanced method for improving LLMs in practical applications.

## 8 Acknowledgement

This work was supported by the Strategic Priority Research Program of Chinese Academy of Science under Grant No. XDA27030204, the National Natural Science Foundation of China under Grant 62322316, the Beijing Nova Program under Grant 20220484077 and 20230484435.