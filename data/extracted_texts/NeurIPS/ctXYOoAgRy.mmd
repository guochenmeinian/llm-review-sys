# How do Large Language Models Handle Multilingualism?

Yiran Zhao\({}^{1,2}\)  Wenxuan Zhang\({}^{2,3}\)  Guizhen Chen\({}^{2,4}\)  Kenji Kawaguchi\({}^{1}\)  Lidong Bing\({}^{2,3}\)

\({}^{1}\) National University of Singapore

\({}^{2}\) DAMO Academy, Alibaba Group, Singapore

\({}^{3}\) Hupan Lab, 310023, Hangzhou, China

\({}^{4}\) Nanyang Technological University, Singapore

This work was done during the internship of Yiran Zhao at Alibaba DAMO Academy.Wenxuan Zhang is the corresponding author: isakzhang@gmail.comGuizhen Chen is under the Joint Ph.D. Program between DAMO Academy and NTU.

###### Abstract

Large language models (LLMs) have demonstrated impressive capabilities across diverse languages. This study explores how LLMs handle multilingualism. Based on observed language ratio shifts among layers and the relationships between network structures and certain capabilities, we hypothesize the LLM's multilingual workflow (MWork): LLMs initially understand the query, converting multilingual inputs into English for task-solving. In the intermediate layers, they employ English for reasoning and incorporate multilingual knowledge with self-attention and feed-forward structures, respectively. In the final layers, LLMs generate responses aligned with the original language of the query. To verify MWork, we introduce Parallel Language-specific Neuron Detection (PLND) to identify activated neurons for inputs in different languages without any labeled data. Using PLND, we validate MMork through extensive experiments involving the deactivation of language-specific neurons across various layers and structures. Moreover, MWork allows fine-tuning of language-specific neurons with a small dataset, enhancing multilingual abilities in a specific language without compromising others. This approach results in an average improvement of \(3.6\%\) for high-resource languages and \(2.3\%\) for low-resource languages across all tasks with just \(400\) documents.1

## 1 Introduction

Recent advancements in large language models (LLMs)  have dramatically transformed the field of natural language processing (NLP). Thanks to the extensive pretraining on massive corpora mixed with different languages, these models demonstrate remarkable capabilities in understanding and generating text across multiple languages . Despite these advancements, the intricate mechanism of their multilingual processing behavior remains largely unclear, which leads to an important research question: _How do large language models handle multilingualism?_

To understand the working mechanism of LLMs, existing studies mainly focus on the relationship between model architectures and certain capabilities, with some investigating reasoning abilities with self-attention layers , and others interpreting feed-forward layers as key-value memories for storing factual knowledge . However, these works solely center on English and neglect the multilingual features of LLMs in their interpretations.

To gain an initial understanding of the multilingual mechanism of LLMs, we test LLMs with various non-English queries and decode the hidden embeddings of each layer to tokens within the LLM's vocabulary. Subsequently, we classify these decoded tokens into either English or non-English, and analyze the ratio. Figure 1 illustrates the ratio of English and non-English tokens for each layer of two LLMs. We observe that non-English queries initially generate non-English embeddings as expected. However, as queries progress through the middle layers, the representations surprisingly become English-centric. In the final layers, there is a reversion to predominantly non-English embeddings, matching the non-English queries.

Motivated by the observed transformation above, we hypothesize a three-stage multilingual workflow: _understanding_, _task-solving_, and _generating_. This involves understanding the original non-English queries and interpreting them in English, solving tasks in English, and reverting outputs back to the original language. Furthermore, building upon previous studies that link self-attention structures to reasoning and feed-forward structures to factual knowledge storage (Hou et al., 2023; Geva et al., 2021), we further decouple the task-solving stage into reasoning with self-attention structures and extracting multilingual knowledge with feed-forward structures. Therefore, our hypothesized Multilingual Workflow (MWork) illustrated in Figure 2 outlines the three operational stages of LLMs in processing multilingual queries: Initially, LLMs _understand_ queries by converting diverse linguistic features into a unified representation. In the _task-solving_ phase, LLMs reason in English and incorporate multilingual knowledge to obtain factual content, using self-attention and feed-forward structures, respectively. Finally, models _generate_ responses in the original language as the original query.

To verify the proposed MWork, we could extract language-specific parameters, selectively deactivate them within different structures, and observe their corresponding effects, thereby assessing the functionality of corresponding structures and validating our hypothesis. To identify the parameters to be activated, we develop a novel approach called Parallel Language-specific Neuron Detection (PLND). Unlike existing methods that rely on fine-tuning(Frankle and Carbin, 2018; Zhang et al., 2023), labeled data (Tang et al., 2024; Liu et al., 2024), or parallel corpora (Libovicky et al., 2020; Tanti et al., 2021; Zhang et al., 2024) to detect activated parameters, PLND measures the significance of individual neurons with respect to the input in both attention and feed-forward structures without any labeled data or parameter adjustments. Using PLND, we identify language-specific neurons by inputting a free text corpus of that language and isolating consistently activated neurons. We find that by deactivating language-specific neurons which account for only \(0.13\%\) of all neurons, LLMs' performance on a multilingual summarization task could drop by \(99\%\).

We then extensively verify the hypothesized MWork framework using the proposed PLND method. Employing various benchmark tasks, including XQuAD (Artetxe et al., 2020) for understanding,

Figure 1: Ratio of English and non-English tokens among layers given non-English queries.

Figure 2: Our hypothesized multilingual workflow, MWork, converts multilingual queries to English for reasoning in English and generates responses in the original language, demonstrating a layered processing approach.

MGSM (Shi et al., 2022) for reasoning, X-CSQA (Lin et al., 2021) for knowledge extraction, and XLSum for generation (Hasan et al., 2021), we selectively deactivate language-specific neurons in each component and verify the functionality of the component by observing a significant decline in performance on the corresponding task. For example, when deactivating the language-specific neurons in the understanding layer, the performance on the multilingual understanding task XQuAD remains stable in English, while experiencing a decrease of \(14\%\) in non-English languages. Other tasks exhibit similar pattern when deactivating corresponding neurons. More importantly, with the verified MWork framework, enhancing the multilingual capabilities of LLMs can thus be achieved through the fine-tuning of language-specific neurons for certain capabilities. With a remarkable reduction in the training corpus size to a mere few hundred documents, this fine-tuning procedure enhances the multilingual capabilities of LLMs for both high-resource and low-resource languages by an average of \(3.6\%\) and \(2.3\%\) across all tasks, respectively. Notably, even without an English training corpus, there is a noticeable improvement in English performance, as the enhancement of language-specific neurons yields greater accuracy in enhancing specific languages, while simultaneously ensuring a clear division of parameters among different languages. In summary, the verified MWork reveals how LLMs handle multilingual tasks and offers an effective approach for conducting language-specific enhancements without compromising performance in other languages.

## 2 Parallel Language-specific Neuron Detection (PLND)

To verify the hypothesized workflow, we propose PLND that effectively detects language-specific neurons without relying on any labeled data. In essence, PLND identifies neurons crucial for handling individual documents, with language-specific neurons being those that consistently show high importance when processing documents in a particular language.

### Sequential Neuron Detection

We define a neuron as a single row or column of a parameter matrix of a language model. To identify neurons responsible for a specific language, it is crucial to discern the significance of a neuron with respect to the inference of a given input. Specifically, when processing the input \(c\) in the model, we denote the hidden embedding before the \(i\)-th layer in Transformer (Vaswani et al., 2017) as \(h_{i}\), and the hidden embedding after the \(i\)-th layer as \(h_{i+1}=T_{i}(h_{i})\), where \(T_{i}\) represents the parameters of the \(i\)-th layer. For a specific neuron within the \(i\)-th layer, denoted as \(N^{(i)}\), either located in the attention or feed-forward network, we quantify its importance in processing the input \(c\) by measuring the difference in the hidden embedding after the \(i\)-th layer, i.e., \(h_{i+1}\), when \(N^{(i)}\) is activated or deactivated. Formally, the impact of neuron \(N^{(i)}\) for input \(c\) is defined as

\[(N^{(i)}|c)=\|T_{i} N^{(i)}(h_{i})-T_{i}(h_{i})\|_{2}, \]

where \(T_{i} N^{(i)}()\) denotes deactivating \(N^{(i)}\) in \(T_{i}\), i.e., setting all parameters of the neuron \(N^{(i)}\) to zero. With a set of \(n\) corpus in a specific language, denoted as \(=\{c_{1},,c_{l},,c_{n}\}\), we calculate the importance of each neuron in each layer to each corpus. Furthermore, we can obtain language-specific neurons that are important to all corpus in that language, i.e.,

\[\{N^{(i)}(N^{(i)}|c_{l}), c_{l}\}, \]

where \(\) is the pre-defined threshold.

### Parallel Neuron Detection

The sequential neuron detection requires traversal of all neurons and inputs sequentially and thus is time-consuming. To address this, we further propose a parallel algorithm for accelerating the process.

Feed-Forward Network (FFN)In the latest open-source models, when processing input \(c\), the feed-forward network in a certain layer is defined as

\[(x)=W_{gate}(x) W_{up}(x) W_{down}, \]where \(x^{l d_{model}}\) is the embedding fed into the FFN, \(W_{gate},W_{up}^{d_{model} d_{inter}}\)2, \(W_{down}^{d_{inter} d_{model}}\). The calculation of the importance of the \(k\)-th neuron in \(W_{up}\), when processing the input \(c\), as presented in Equation 1, can be equivalently transformed to

\[(W_{up}[:,k]|c)=\|(x)-(x)\|_{2}=\|h_{ }[k]W_{down}(x)\|_{2}, \]

where \(h_{} d_{inter}\) represents the embedding before \(W_{down}\), and \([k] d_{inter}\) is a vector with the \(k\)-th element equal to \(1\) and the rest equal to \(0\). To calculate \((W_{up}[:,k]|c)\) for \(k d_{inter}\) parallelly, we introduce a diagonal mask matrix of size \((d_{inter},d_{inter})\), denoted as Mask. Therefore,

\[(W_{up}|c)=\|(h_{})W_{down}(x)\|_{2}. \]

Furthermore, we observe that deactivating the \(k\)-th neuron of \(W_{down}\) is equivalent to deactivating the \(k\)-th neuron in \(W_{up}\), as they both result in \(h_{}[k]=0\). Hence, we can also derive \((W_{down}|c)\) by employing Equation (5).

Self-Attention NetworkWhen processing input \(c\), the self-attention network in a certain layer is

\[(x)=(x)W_{K}^{T}(x)}{ }W_{V}(x), \]

where \(W_{Q},W_{K},W_{V}^{d_{model} d_{mid}}\). 3 Since \(W_{V}(x)\) is not in the non-linear softmax calculation, we can calculate \((W_{V}|c)\) by applying Equation (5). For \(W_{Q}\), we obtain \((W_{Q}[:,k]|c)\) by deactivating its \(k\)-th neuron, specifically, \(_{Q} W_{Q}[:,k]=0\). Firstly, we calculate the difference in attention weight before and after deactivation, prior to scaling and softmax,

\[_{k}(x)=W_{Q}(x)W_{K}^{T}(x)-_{Q}(x)W_{K}^{T}(x)=W_{Q}(x)[:,k]W_ {K}(x)[k,:]^{l l}. \]

Next, as the changes in attention exhibit a positive correlation with the changes in the output of this layer, the importance of \(W_{Q}[:,k]\) in processing \(c\), as defined in Equation 1, can be approximated as

\[(W_{Q}[:,k]|c)&\| (x)-(x)\|_{2}\\ &(x)W_{K}^{T}(x)- _{k}(x)}{}-(x)W_{K}^{T}( x)}{}_{2}. \]

This process can also be calculated in parallel, specifically,

\[(x)&=W_{Q}(x)W_{K}^{T}(x)- {W}_{Q}(x)W_{K}^{T}(x)\\ &=W_{Q}(x).resize(l,1,d_{mid}) W_{K}(x).resize(1,l,d_{mid}) ^{l l d_{mid}}. \]

Therefore, the importance of \(W_{Q}\) in processing input \(c\) is calculated by

\[(W_{Q}|c)(x)W_{K}^{T} (x)-(x)}{}-(x)W_{K}^{T}( x)}{}_{2}. \]

Similarly, since \(W_{K}\) is symmetrical to \(W_{Q}\), \((W_{K}|c)\) can be calculated in the same way.

### Detection of Language-Specific Neurons

We then apply PLND to selected languages and models to validate its effectiveness in detecting language-specific neurons and to further investigate the relationships between languages.

Experimental Setup.We test two open-source models that perform well on multilingual tasks, including _Vicuna-7b-v1.54_ and _Mistral-7b-Instruct-v0.2_. For simplicity, we abbreviate them as Vicuna and Mistral hereafter to represent the two models respectively. We select the text summarization task with the XLSum (Hasan et al., 2021) dataset as the reference task to evaluate multilingual performance as it requires the model to comprehend the input text and generate a coherent fragment. We adopt \(4\) high-resource languages including French (Fr), Chinese (Zh), Spanish (Es), and Russian (Ru), as their initial performance on those languages is already quite reasonable for observing the multilingual processing mechanism. Furthermore, we utilize OSCAR (Caswell et al., 2020) corpus which contains web crawling texts for each language to compile a language-specific corpus without task-specific considerations. More details are presented in Appendix B.

Existence of Language-Specific NeuronsUsing PLND, we feed a corpus in a specific language to LLMs and identify neurons that are consistently activated, which are responsible for processing queries in that language. To ascertain whether these neurons are genuinely language-specific, we assess the performance of LLMs in corresponding languages when these neurons are deactivated versus when the same number of randomly sampled neurons are deactivated.

Table 1 demonstrates the decline of multilingual capabilities when deactivating language-specific neurons. Although just deactivating around \(0.13\%\) neurons, LLMs lose their multilingual capabilities and fail to generate meaningful content. In contrast, deactivating the same number of randomly selected neurons does not yield any difference. Therefore, the detected neurons are language-specific and related to handling corresponding multilingual inputs.

### Analysis of Language-Specific Neurons

We further investigate the degree of overlap among their language-specific neurons. Our findings reveal that in both Mistral and Vicuna, English shows limited overlap with other languages, indicating many language-specific neurons, while languages within the same family, such as Spanish, French, and English, demonstrate more overlap. More details are illustrated in Appendix C.

In addition, we examine two more types of multilingual LLMs, including BLOOMZ (Muennighoff et al., 2023), a _hyper-multilingual_ LLM claiming to support 46 languages, and Chinese Llama (Cui et al., 2023), a _bilingual_ LLM focusing on English and Chinese. We find that language-specific neurons in BLOOMZ follow patterns similar to Mistral and Vicuna. However, in Chinese LLama, Chinese dominates as the primary language for reasoning and knowledge extraction across all languages, with notably absent language-specific neurons. Details are shown in Appendix D.

Given the certain overlap ratio of language-specific neurons from other languages with those of English, as illustrated in the first column of Figure 5 and Figure 6, we conduct supplementary experiments to demonstrate that these neurons are not language-agnostic neurons crucial for general comprehension and logical reasoning (Liang et al., 2024; Tang et al., 2024). Instead, these overlapping neurons represent only a subset of language-specific neurons, while the language-agnostic neurons responsible for essential understanding and reasoning are those not identified as language-specific. Further elaboration and detailed results are presented in Appendix E.

## 3 Multilingual Workflow (Mwork) of LLMs

### MWork

By classifying the hidden representations of each layer in LLMs into English or non-English (as shown in Figure 1), we can observe the shift from non-English to English-centric, and back to non-English with the progression through the layers. This motivates us to hypothesize a three-stage multilingual workflow: _understanding_ the original non-English queries and interpreting them in

  
**Model** & **Method** & **Fr** & **Zh** & **Es** & **Ru** & **Avg.** \\   & Original & \(14.2\) & \(61.1\) & \(10.4\) & \(20.8\) & \(26.6\) \\  & Deactivate Random & \(14.1\) & \(61.6\) & \(10.4\) & \(20.8\) & \(26.7\) \\  & Deactivate Lang-Spec & \(\) & \(\) & \(\) & \(\) & \(\) \\   & Original & \(15.2\) & \(56.4\) & \(10.6\) & \(21.0\) & \(25.8\) \\  & Deactivate Random & \(15.4\) & \(55.9\) & \(10.2\) & \(21.2\) & \(25.7\) \\  & Deactivate Lang-Spec & \(\) & \(\) & \(\) & \(\) & \(\) \\   

Table 1: Multilingual performance on XLSum when deactivating language-specific neurons (“Lang-Spec”) and an equivalent number of randomly selected neurons (“Random”).

English, _task-solving_ in English, and _generating_ back to the original language. Nevertheless, the presence of certain non-English tokens during the English-centric task-solving stage inspires us to further investigate this stage.

With the proposed PIND method, we extract language-specific neurons from attention and feed-forward structures when processing various multilingual queries. We plot the average number of activated language-specific neurons of Mistral when processing each query in Figure 3. Notably, the number of language-specific neurons decreases within the self-attention structure in the task-solving layer but remains consistent across the layers of the feed-forward structure. This decline implies a reliance on the English language for reasoning while extracting multilingual knowledge to support query processing, which is also consistent with (Geva et al., 2021)'s interpretation of the feed-forward structure as key-value memories for knowledge extraction. Therefore, we further decompose the task-solving layer into two parts: _reasoning_ in English and _extracting knowledge_ in a multilingual context.

Considering the above insights, we propose the MWork hypothesis for explaining LLM's multilingual workflow: LLMs first _understand_ user input by unifying diverse linguistic features. They then engage in the _task-solving_ phase, employing English for reasoning and leveraging multilingual knowledge through self-attention and feed-forward structures, respectively. Finally, the models _generate_ responses aligned with the query's original language.

### Verification Experiment Setup

To verify MWork, we selectively deactivate language-specific neurons from each component. Then its functionality can be verified if this deactivation results in minimal impact on English performance while exhibiting a notable decline in multilingual performance for the corresponding task.

DatasetTo comprehensively understand how LLMs work with different abilities, we employ four kinds of tasks including MSSM (Shi et al., 2022) for reasoning task, XQuAD (Artetxe et al., 2020) for understanding task, X-CSQA (Lin et al., 2021) for knowledge question answering task, and XLSum (Hasan et al., 2021) for generation task. Detailed information regarding these datasets and the testing prompts can be found in Appendix F. We adopt 6 languages including English (En), German (De), French (Fr), Chinese (Zh), Spanish (Es), and Russian (Ru), as their initial performance on those languages is already quite reasonable for observing the multilingual processing mechanism. For XLSum, we randomly sample \(500\) data points from the whole test set for each language taking into consideration its long inference time, while for other tasks, we employ the entire test set. We evaluate the vanilla performance of Vicuna and Mistral on these datasets for later comparison as presented in Appendix G. For reasoning, understanding, and knowledge question answering tasks, we adopt accuracy as the metric. As for the generation tasks, we adopt ROUGE-L as the metric.

Deactivation StrategyWe primarily consider two aspects when selecting the deactivation settings: (1) language-specific neurons versus randomly chosen neurons, and (2) the position of neurons, which encompasses four structures. Note that for a fair comparison, we ensure the numbers of deactivated neurons in all settings are the same. More detailed settings are explained from Section 3.3 to Section 3.6. For the concrete numbers of different layers, we tune hyperparameters by XQuAD in Chinese. Details are explained in Appendix H.

NotationsTables 2 to 5 present the results of deactivating certain neurons, where "Under" denotes the understanding layers, "S-ATTN" and "S-FFN" correspond to the self-attention and the feed-forward structures within the task-solving layers respectively, "Gen" refers to the generation layers. The term "Random" is used to describe deactivating randomly chosen neurons, whereas "Lang-Spec" refers to the deactivation of language-specific neurons. We also present the gap between the original performance (as shown in Table 11) and performance after deactivation (as shown in Table 14 to Table

Figure 3: Number of language-specific neurons when processing multilingual queries.

17) for English (\(_{}\)) and averaged non-English languages (\(_{}\)), respectively. A single metric \(\) is then introduced as \(_{}-_{}\), where a high value indicates such deactivation operation does not bring much impact to the English performance but lead to performance drop in non-English. Therefore, this provides a direct single indicator that the deactivated neurons are language-specific and hold a significant responsibility in executing the corresponding task.

### Verify the Understanding Stage in MWork

Deactivating MethodTable 2 shows the results of the understanding task following the deactivation of five distinct sets of neurons: (i) neurons randomly selected from the understanding layers; (ii) neurons randomly chosen across all layers; (iii) language-specific neurons within the task-solving layers; (iv) language-specific neurons in the generation layers; (v) language-specific neurons in the understanding layers. As mentioned above, in order to verify the functionality of the understanding layer (setting v), we compare it with deactivating other types of layers, specifically setting iii for the task-solving layer and setting iv for the generation layer. Full results are listed in Appendix I.

FindingsWe find that by deactivating randomly sampled neurons, no matter in the understanding layer or all layers, the performance of LLMs in both English and non-English languages is almost unaffected compared to other deactivating methods. Note that in some cases, deactivating randomly sampled neurons may even increase the performance because irrelevant neurons are removed, which also aligns with the finding from (Sharma et al., 2023). When assessing the differential impact on English and non-English language performance after the deactivation, specifically the difference calculated as \(_{}-_{}\), it is evident that the deactivation of random neurons within the understanding layer amplifies this effect. This observation lends partial support to the hypothesized role of the understanding layer in language processing.

Furthermore, we find that deactivating language-specific neurons in the understanding layer influences the performance in English a little while significantly decreasing the performance in non-English languages. When deactivating language-specific neurons in the task-solving layer, both English and non-English languages are significantly reduced while deactivating language-specific neurons in the generation layer influences a little for both English and non-English languages. Therefore, we prove that the first several layers are responsible for understanding because deactivated neurons just disable LLMs on the NLU task in non-English languages. Furthermore, disabling language-specific neurons in the task-solving layer shows that LLMs rely on English, as performance drops across all languages.

### Verify the Reasoning Structure in MWork

Deactivating MethodTable 3 shows the result of the reasoning task, where we deactivate \(6\) sets of neurons. We adhere to the previous logic of selecting deactivation settings, with the exception that

    &  &  \\  & Under & S-ATTN & S-FFN & Gen & Neuron & Eng & n-Eng & \(_{}\) & \(_{}\) & \(_{}\) & \(\) \\   & ✗ & ✓ & ✓ & ✓ & Random & \(57.8\) & \(53.9\) & \(+0.3\) & \(-0.1\) & \(+0.4\) \\  & ✗ & ✗ & ✗ & ✗ & Random & \(57.9\) & \(54.2\) & \(+0.4\) & \(+0.3\) & \(+0.1\) \\  & ✓ & ✗ & ✗ & ✓ & Lang-Spec & \(40.9\) & \(38.6\) & \(-15.9\) & \(-15.3\) & \(-0.6\) \\  & ✓ & ✓ & ✓ & ✗ & Lang-Spec & \(57.9\) & \(52.8\) & \(-0.4\) & \(-1.1\) & \(+0.7\) \\  & ✗ & ✓ & ✓ & ✓ & Lang-Spec & \(56.5\) & \(46.0\) & \(-0.5\) & \(-7.9\) & \(+7.4\) \\   & ✗ & ✓ & ✓ & ✓ & Random & \(58.1\) & \(55.5\) & \(+1.0\) & \(-0.2\) & \(+1.2\) \\  & ✗ & ✗ & ✗ & ✗ & Random & \(57.6\) & \(55.5\) & \(+0.5\) & \(-0.2\) & \(+0.7\) \\  & ✓ & ✗ & ✗ & ✓ & Lang-Spec & \(53.2\) & \(47.0\) & \(-3.9\) & \(-8.7\) & \(+4.8\) \\  & ✓ & ✓ & ✓ & ✗ & Lang-Spec & \(56.4\) & \(54.6\) & \(-0.7\) & \(-1.0\) & \(+0.3\) \\  & ✗ & ✓ & ✓ & ✓ & Lang-Spec & \(56.2\) & \(48.3\) & \(-0.9\) & \(-7.4\) & \(+6.5\) \\   

Table 2: Results of the **understanding** task, where ‘ ✗’ indicates that chosen neurons in the corresponding layer are deactivated, and ‘✓’ signifies they are activated. \(\) is defined as the difference between the reduction in performance in English, denoted as \(_{}\), and the reduction in performance in non-English languages, denoted as \(_{}\).

we do not conduct an independent experiment on deactivating neurons in the understanding layer, as its functionality has already been verified. Details are listed in Appendix I.

FindingsWe find that deactivating randomly sampled neurons in task-solving layers disables the capabilities of LLMs in reasoning to a greater extent than deactivating randomly sampled neurons in all layers, which verifies the function of the task-solving layer. Furthermore, comparing three deactivating language-specific neuron methods, we find that deactivating the task-solving layer decreases performance in both English and non-English. On the contrary, when we only deactivate language-specific neurons not in the task-solving layer, non-English is influenced more seriously than English. Moreover, eliminating interference from the feed-forward layer achieves better results, which verifies the function of attention structure in the task-solving layer.

### Verify the Knowledge Extraction Structure in Mikork

Deactivating MethodTable 4 shows the result of the knowledge question answering task, where we deactivate \(5\) sets of neurons. Similarly, we exclude the deactivation of neurons in layers that have already been verified and instead concentrate on the self-attention structure and feed-forward structure in the task-solving layer. Details are listed in Appendix I.

FindingsLikewise, targeted deactivation of language-specific neurons within the feed-forward structure of the task-solving layer predominantly affects non-English languages. This implies that

    &  &  \\  & Under & S-ATTN & S-FFN & Gen & Neuron & Eng & n-Eng & \(_{}\) & \(_{}\) & \(\) \\   & ✓ & ✓ & ✗ & ✓ & Random & \(57.5\) & \(39.5\) & \(-0.3\) & \(+0.0\) & \(-0.3\) \\  & ✓ & ✗ & ✗ & ✓ & Random & \(56.0\) & \(38.7\) & \(-1.8\) & \(-0.8\) & \(-1.0\) \\  & ✗ & ✗ & ✗ & ✗ & Random & \(57.7\) & \(39.6\) & \(-0.1\) & \(+0.1\) & \(-0.2\) \\  & ✓ & ✗ & ✓ & ✓ & Lang-Spec & \(33.7\) & \(30.3\) & \(-24.1\) & \(-9.2\) & \(-14.9\) \\  & ✓ & ✓ & ✗ & ✓ & Lang-Spec & \(57.5\) & \(37.5\) & \(-0.3\) & \(-2.0\) & \(+1.7\) \\   & ✓ & ✓ & ✗ & ✓ & Random & \(61.0\) & \(37.0\) & \(-0.3\) & \(-0.5\) & \(+0.2\) \\  & ✓ & ✗ & ✗ & ✓ & Random & \(60.7\) & \(36.3\) & \(-0.6\) & \(-1.2\) & \(+0.6\) \\   & ✗ & ✗ & ✗ & ✗ & Random & \(61.8\) & \(37.4\) & \(+0.1\) & \(-0.1\) & \(+0.2\) \\   & ✓ & ✗ & ✓ & ✓ & Lang-Spec & \(51.2\) & \(28.9\) & \(-10.1\) & \(-8.6\) & \(-1.5\) \\   & ✓ & ✓ & ✗ & ✓ & Lang-Spec & \(61.2\) & \(35.1\) & \(\) & \(\) & \(\) \\   

Table 4: Results of the **knowledge** question answering task. The highest performance reduction difference (\(\)) is achieved by disabling all language-specific neurons in the feed-forward structure within the task-solving layer.

    &  &  \\  & Under & S-ATTN & S-FFN & Gen & Neuron & Eng & n-Eng & \(_{}\) & \(_{}\) & \(_{}\) & \(\) \\   & ✓ & ✗ & ✓ & ✓ & Random & \(20.0\) & \(11.3\) & \(-0.4\) & \(-1.8\) & \(+1.4\) \\  & ✓ & ✗ & ✗ & ✓ & Random & \(18.4\) & \(12.2\) & \(-2.0\) & \(-1.0\) & \(-1.0\) \\  & ✗ & ✗ & ✗ & ✗ & Random & \(19.6\) & \(12.5\) & \(-0.8\) & \(-0.7\) & \(-0.1\) \\  & ✓ & ✗ & ✗ & ✓ & Lang-Spec & \(7.2\) & \(3.4\) & \(-13.2\) & \(-9.8\) & \(-3.4\) \\  & ✗ & ✓ & ✓ & ✗ & Lang-Spec & \(18.1\) & \(8.3\) & \(-2.3\) & \(-4.9\) & \(+2.6\) \\  & ✗ & ✓ & ✗ & ✗ & Lang-Spec & \(19.0\) & \(7.8\) & \(\) & \(\) & \(\) \\   & ✓ & ✗ & ✓ & ✓ & Random & \(40.8\) & \(23.4\) & \(-5.2\) & \(-2.9\) & \(-2.3\) \\  & ✓ & ✗ & ✗ & ✓ & Random & \(39.2\) & \(24.0\) & \(-6.8\) & \(-2.3\) & \(-4.5\) \\   & ✗ & ✗ & ✗ & ✓ & Random & \(45.2\) & \(26.8\) & \(-0.8\) & \(+0.5\) & \(-1.3\) \\   & ✓ & ✗ & ✗ & ✓ & Lang-Spec & \(38.2\) & \(18.4\) & \(-7.8\) & \(-7.9\) & \(+0.1\) \\   & ✗ & ✓ & ✓ & ✗ & Lang-Spec & \(44.0\) & \(18.1\) & \(-2.0\) & \(-8.2\) & \(+6.2\) \\   & ✗ & ✓ & ✗ & ✗ & Lang-Spec & \(46.2\) & \(18.3\) & \(\) & \(\) & \(\) \\   

Table 3: Results of the **reasoning** task. Disabling all language-specific neurons, except for those involved in self-attention structure within the task-solving layer, greatly reduces performance.

[MISSING_PAGE_EMPTY:9]

randomly selected documents for each language, extracted from the Wikipedia corpus (Foundation). Figure 4 shows the results of enhancement on high-resource languages (De, Fr, Zh, Es, Ru). The numbers represent the sizes of the training corpus when fine-tuning language-specific neurons, while "Random" represents the fine-tuning of an equivalent number of randomly chosen neurons using a corpus of \(400\). Our findings reveal that fine-tuning with a few hundred documents yields significant performance improvements on multilingual tasks: \(3.4\%\) on MGSM, \(4.4\%\) on XQuAD, \(4.3\%\) on X-CSQA, and \(2.3\%\) on XLSum. Moreover, English performance is enhanced by an average of \(3.7\%\) across all tasks. These results further confirm the effectiveness of MWork in interpreting structure functionality for LLM's multilingual query handling, offering precise and independent methods for multilingual enhancement. When fine-tuning with 800 documents, the performance deteriorates compared to using 400 documents. This drop can be attributed to the incorporation of additional knowledge, which disrupts the original knowledge distribution and leads to overfitting of the model to Wikipedia. This can be addressed by mixing data from more sources such as textbooks or websites.

In addition, we verify the effectiveness of such enhancement method on low-resource languages, given that low-resource performance is relatively low with the original model. We select four languages including Vietnamese (Vi), Thai (Th), Arabic (Ar), and Swahili (Sw), covering languages with both latin and non-latin scripts and having corresponding testing set in our considered benchmarks. The model was then evaluated on four benchmarks, and the result shown in Table 6 is the average scores among tasks. It is evident that the fine-tuning method using language-specific neurons enhances the model's multilingual performance in low-resource languages by an average of \(2.2\%\). Notably, the improvement of \(3.5\%\) in English performance is observed even without an English training corpus, indicating the effectiveness of the distinct language responsibilities assigned to neurons.

## 5 Related Work

In the era of LLMs, numerous studies have been conducted to develop multilingual benchmarks (Zhang et al., 2023a), enhance multilingual performance without parameter adjustments through translation (Liang et al., 2023; Huang et al., 2023), aligning representations (Nguyen et al., 2023a; Salesky et al., 2023), prompting (Li et al., 2023b; Tanwar et al., 2023). Furthermore, certain works focus on improving multilingual abilities for a single task via cross-lingual transfer (Kim et al., 2017; Lin et al., 2019; Pfeiffer et al., 2020; Zhao et al., 2024b), while others aim to enhance multilingual proficiency by continuous training in one language to obtain mono-lingual LLMs (Cui et al., 2023), or in multiple domain languages to obtain domain-lingual LLMs (Nguyen et al., 2023b). Additionally, some works achieve multilingual LLMs by training from scratch (Muennighoff et al., 2023). However, these studies are limited to specific task types or require substantial training corpora due to a lack of comprehensive understanding of the multilingual mechanisms of LLMs.

Conventional interpretability research investigates the significance of input features with their corresponding outputs (Vig, 2019; Hewitt and Liang, 2019; Qiu et al., 2020). In the era of LLMs, one brunch of work includes efforts to understand knowledge storage, with (Geva et al., 2021) initiating the study of the feed-forward layer as a knowledge base. Subsequent work has furthered this by altering neuron values (Dai et al., 2022), mapping embeddings to words (Geva et al., 2022), modifying inputs to recover embeddings (Meng et al., 2022), and analyzing attention heads (Li et al., 2023a). Another line of research centers on the self-attention layer, examining its connection to reasoning capability (Hou et al., 2023; Stolfo et al., 2023; Friedman et al., 2023) by contrasting the reasoning tree based on attention weights.

## 6 Conclusion

In this work, we examine how LLMs handle multilingualism. The proposed multilingual workflow (MWork) suggests that LLMs initially understand queries by converting multilingual inputs into English, reason in English in intermediate layers while incorporating multilingual knowledge, and generate responses aligned with the original language in the final layers. The validity of MWork is verified using Parallel Language-specific Neuron Detection (PLND), which identifies activated neurons for different languages without labeled data. By detecting language-specific neurons and fine-tuning them with a small training corpus, MWork enhances multilingual abilities in specific languages without compromising others, resulting in significant improvements across tasks.