# A General Protocol to Probe Large Vision Models

for 3D Physical Understanding

 Guanqi Zhan

VGG, University of Oxford

guanqi@robots.ox.ac.uk

&Chuanxia Zheng

VGG, University of Oxford

cxzheng@robots.ox.ac.uk

&Weidi Xie

VGG, University of Oxford

SAI, Shanghai Jiao Tong University

weidi@robots.ox.ac.uk

&Andrew Zisserman

VGG, University of Oxford

az@robots.ox.ac.uk

###### Abstract

Our objective in this paper is to probe large vision models to determine to what extent they 'understand' different physical properties of the 3D scene depicted in an image. To this end, we make the following contributions: (i) We introduce a _general_ and _lightweight_ protocol to evaluate whether features of an off-the-shelf large vision model encode a number of physical 'properties' of the 3D scene, by training discriminative classifiers on the features for these properties. The probes are applied on datasets of real images with annotations for the property. (ii) We apply this protocol to properties covering scene geometry, scene material, support relations, lighting, and view-dependent measures, and large vision models including CLIP, DINOv1, DINOv2, VQGAN, Stable Diffusion. (iii) We find that features from Stable Diffusion and DINOv2 are good for discriminative learning of a number of properties, including scene geometry, support relations, shadows and depth, but less performant for occlusion and material, while outperforming DINOv1, CLIP and VQGAN for all properties. (iv) It is observed that different time steps of Stable Diffusion features, as well as different transformer layers of DINO/CLIP/VQGAN, are good at different properties, unlocking potential applications of 3D physical understanding. Our project page is https://www.robots.ox.ac.uk/~vgg/research/phy-sd/.

## 1 Introduction

The large-scale pre-trained vision foundation models have achieved great success in computer vision tasks, including classification (CLIP [18; 30]), segmentation (DINO [5; 27]), and image generation (VQGAN , Stable Diffusion ) with strong generalisation capabilities. However, they are mainly trained with 2D images, which are the projection of the 3D physical world. This naturally raises the question of to what extent these large-scale vision models have learned about the 3D scene depicted with only the 2D images. Our objective in this paper is to investigate this question, and we do this precisely by determining whether features from these large-scale pre-trained vision models can be used to estimate the true geometric and physical properties of the 3D scene. If they can, then that is evidence that the models encode the 3D properties. For example, as an indication that Stable Diffusion is 3D and physics aware, Figure 1 shows the result of the off-the-shelf Stable Diffusion model  inpainting masked regions in real images - it correctly predicts shadows and supporting structures.

To answer this question, we propose a _general_ and _lightweight_ evaluation protocol to _systematically_ and _efficiently_ 'probe' a pre-trained network on its ability to represent a number of 'properties' of the 3D scene and viewpoint. The protocol could be used for any network and any property of interest. We have probed properties including: 3D structure and material of the scene, such as surface layout; lighting, such as object-shadow relationships; and viewpoint dependent relations such as occlusion and depth.

The protocol involves three steps: _First_, a suitable real image evaluation dataset is selected that contains ground truth annotations for the property of interest, for example the SOBA dataset  is used to probe the understanding of lighting, as it has annotations for object-shadow associations. This provides a train/val/test set for that property; _Second_, a grid search is carried out over the layers and time steps of the Stable Diffusion model, and transformer layers for other models, to select the optimal feature for determining that property. The selection involves learning the weights of a simple linear classifier for that property (_e.g._ 'are these two regions in an object-shadow relationship or not'); _Third_, the selected feature (layer, time step) and trained classifier are evaluated on a test set, and its performance answers the question of how well the model 'understands' that property.

In short, we probe scene geometry, material, support relation, shadow, occlusion and depth, to answer the question "To what extent do large vision models encode 3D properties of the scene?". We apply this protocol to a wide range of networks that are trained at large scale, including OpenCLIP , DINOv1 , DINOV2 , and VQGAN . This covers networks trained generatively (Stable Diffusion), with self-supervision (DINOv1 & DINOV2), with weak supervision (OpenCLIP), and by auto-regression (VQGAN).

From our investigation, we make three observations: _First_, the Stable Diffusion and DINOv2 networks have a good 'understanding' of the scene geometry, support relations, the lighting, and the depth of a scene, with Stable Diffusion and DINOv2 having a similar and high prediction performance for these properties. However, their prediction of material and occlusion is poorer. _Second_, Stable Diffusion and DINOv2 generally demonstrate better performance for 3D properties than other networks trained at large scale: OpenCLIP, DINOV1, and VQGAN. _Third_, different time steps of Stable Diffusion

Figure 1: **Motivation: What do large vision models know about the 3D scene?** We take Stable Diffusion as an example because Stable Diffusion is generative, and so its output is an image that can be judged directly for verisimilitude. The Stable Diffusion inpainting model is here tasked with inpainting the masked region of the real images. It correctly predicts a shadow consistent with the lighting direction (top), and a supporting structure consistent with the scene geometry (bottom). This indicates that the Stable Diffusion model generation is consistent with the geometry (of the light source direction) and physical (support) properties. These examples are only for illustration and we probe a general Stable Diffusion network to determine whether there are explicit features for such 3D scene properties. The appendix provides more examples of Stable Diffusionâ€™s capability to predict different physical properties of the scene.

features, as well as different transformer layers of DINO/CLIP/VQGAN, perform best for different 3D physical properties.

Why is an understanding of the networks' ability to predict 3D properties useful? There are four reasons: (1) It begins to answer the scientific question of the extent to which these networks implicitly model the 3D scene; (2) The features we determined that are able to predict 3D physical properties can be used for this task, e.g. to predict shadow-object associations or support relations. This could either be carried out directly by incorporating them in a prediction network, in the manner of ; or they can be used indirectly as a means to train a feed forward network to predict the properties [42; 43]; (3) By knowing what properties Stable Diffusion is not good at, we have a way to spot images generated by Stable Diffusion, as has been done by ; (4) It also reveals which properties the network could be trained further on to improve its 3D modelling, _e.g.,_ via extra supervision for that property.

## 2 Related Work

### Exploration of Pre-trained Models

Building on the success of large-scale vision networks, there has been significant interest from the community to understand what has been learned by these complex models. On discriminative models, for example, [26; 49] propose inverse reconstruction to directly visualize the acquired semantic information in various layers of a trained classification network; [12; 13; 57] demonstrate that scene classification networks have remarkable localization ability despite being trained on only image-level labels; and [10; 34; 37] use the gradients of any target concept, flowing into the final convolutional layer to produce a saliency map highlighting important regions in the image for predicting the concept. In the more recent literature,  explores what has been learned in the powerful transformer model by visualizing the attention map.

On generative models, researchers have mainly investigated what has been learned in GANs, for example, GAN dissection  presents an analytic framework to visualize and understand GANs at the unit-, object-, and scene-level;  analyse the latent style space of StyleGANs . The most recent work  studies the 3D geometric relations in generated images, such as vanishing points and shadows, and notes that the errors made can be used to discriminate real from generated images.

There is concurrent work  exploring the capability of predicting depth, surface normal and geometric correspondence for visual foundation models. To probe the depth and surface normal capability, a prediction network is trained using frozen multi-layer features from the foundation models. The capability for computing geometric correspondence between images is investigated using the dense spatial feature maps directly. In contrast to their work, we have studied a wider range of properties, covering both 3D geometric properties and 3D physical properties. Additionally, we have proposed a simple, general, yet efficient protocol for any property and any model, and have investigated the performance of different time steps and layers of models for different properties.

### Exploitation of Pre-trained Models

Apart from understanding the representation in pre-trained models, there has been a recent trend for exploiting models trained at large scale, to tackle a series of downstream tasks. For example, leveraging generative models for data augmentation in recognition tasks [16; 19], utilising large vision models for semantic segmentation [2; 46], open-vocabulary segmentation , depth map estimation [21; 28; 35; 47; 48; 53; 56], correspondence estimation [17; 25; 27; 38; 54] and pose estimation [15; 55]. More recently,  searched for intrinsic offsets in a pre-trained StyleGAN for a range of downstream tasks, predicting normal maps, depth maps, segmentations, albedo maps, and shading.

### 3D Physical Scene Understanding

There have been works studying different 3D physical properties for scene understanding, including shadows [40; 41], material , occlusion , scene geometry , support relations  and depth . However, these works focus on one or two physical properties, and most of them require training a model for the property in a supervised manner. In contrast, we use a single model to predict multiple properties, and do not train the features.

## 3 Method - Properties, Datasets, and Classifiers

Our goal is to examine the ability of large-scale vision models to understand different physical and geometrical properties of the 3D scene, including: scene geometry, material, support relations, shadows, occlusion and depth. Specifically, we conduct linear probing of the features from different layers and time steps of the Stable Diffusion model, and different transformer layers for other models including OpenCLIP, DINov1, DINov2 and VQGAN. First, we set up the questions for each property (Section 3.1); and then select real image datasets with ground truth annotations for each property (Section 3.2). We describe how a classifier is trained to answer the questions, and the grid search for the optimal time step and layer to extract a feature for predicting the property in Section 3.3.

### Properties and Questions

Here, we study the large vision model's ability to predict different _properties_ of the 3D scene; the properties cover the 3D structure and material, the lighting, and the viewpoint. For each property, we propose _questions_ that classify the relationship between a pair of _Regions_, \(A\) and \(B\), in the same image, based on the features extracted from the large vision model. The properties and questions are:

* _Same Plane_: 'Are Region \(A\) and Region \(B\) on the same plane?'
* _Perpendicular Plane_: 'Are Region \(A\) and Region \(B\) on perpendicular planes?'
* _Material_: 'Are Region \(A\) and Region \(B\) made of the same material?'
* _Support Relation_: 'Is Region \(A\) (object \(A\)) supported by Region \(B\) (object \(B\))?'
* _Shadow_: 'Are Region \(A\) and Region \(B\) in an object-shadow relationship?'
* _Occlusion_: 'Are Region \(A\) and Region \(B\) part of the same object but, separated by occlusion?'
* _Depth_: 'Does Region \(A\) have a greater average depth than Region \(B\)?'

We choose these properties as they exemplify important aspects of the 3D physical scene: the _Same Plane_ and _Perpendicular Plane_ questions probe the 3D scene geometry; the _Material_ question probes what the surface is made of, _e.g.,_ metal, wood, glass, or fabric, rather than its shape; the _Support Relation_ question probes the physics of the forces in the 3D scene; the _Shadow_ question probes the lighting of the scene; the _Occlusion_ and _Depth_ questions depend on the viewpoint, and probe the disentanglement of the 3D scene from its viewpoint.

    & Same &  Perpendicular \\ Plane \\  } &  &  Support \\ Relation \\  } &  &  &  \\   &  &  &  &  &  &  &  \\   & \# Train & 400 & 400 & 400 & 400 & 400 & 400 & 400 \\  & \# Val & 100 & 100 & 100 & 100 & 100 & 100 & 100 \\  & \# Test & 1000 & 1000 & 1000 & 654 & 160 & 983 & 654 \\   & \# Train & 7600 & 4493 & 4997 & 8943 & 3576 & 6799 & 8829 \\  & \# Val & 1844 & 1112 & 1180 & 1968 & 976 & 1677 & 2075 \\  & \# Test & 17159 & 10102 & 11364 & 13968 & 1176 & 16993 & 13992 \\   & \# Train & 14360 & 17530 & 18520 & 13992 & 7152 & 19238 & 15322 \\  & \# Val & 3498 & 4232 & 4284 & 2874 & 1952 & 4724 & 3786 \\   & \# Test & 32654 & 38640 & 41824 & 21768 & 2352 & 44266 & 24880 \\   

Table 1: **Overview of the datasets and training/evaluation statistics for the properties investigated.** For each property, we list the image dataset used, and the number of images for the train, val, and test set. 1000 images are used for testing if the original test set is larger than 1000 images. Regions are selected in each image, and pairs of regions are used for all the probe questions.

### Datasets

To study the different properties, we adopt various off-the-shelf real image datasets with annotations for the different properties, where the dataset used depends on the property. We repurpose each dataset to support probe questions of the form: \(=\{(R_{A},R_{B},y)_{1},,(R_{A},R_{B},y)_{n}\}\), where \(R_{A}\), \(R_{B}\) denote a pair of regions, and \(y\) is the binary label indicating the answer to the considered question of the probed property. For each property, we create a train/val/test split from those of the original datasets, if all three splits are available. While for dataset with only train/test splits available, we divide the original train split into our train/val splits. Table 1 summarises the datasets used and the statistics of the splits used. We discuss each property and dataset in more detail next.

**Same Plane.** We use the ScanNetv2 dataset  with annotations of planes from . Regions are obtained via splitting plane masks into several regions. A pair of regions are _positive_ if they are on the same plane, and _negative_ if they are on different planes. The first row of Figure 2 is an example.

**Perpendicular Plane.** We use the ScanNetv2 dataset . We use the annotations from  which provide segmentation masks as well as plane parameters for planes in the image, so that we can obtain the normal of planes to judge whether they are perpendicular or not. A pair of regions are _positive_ if they are on perpendicular planes, and _negative_ if they are not on perpendicular planes. The second row of Figure 2 is an example.

**Material.** We adopt the recent DMS dataset  to study the material property, which provides dense annotations of material category for each pixel in the images. Therefore, we can get the mask of each material via grouping pixels with the same material label together. In total, there are 46 pre-defined material categories. Regions are obtained by splitting the mask of each material into different connected components, _i.e.,_ they are simply groups with the same material labels, yet not connected. A pair of regions are _positive_ if they are of the same material category, and _negative_ if they are of different material categories. First row of Figure 3 is an example.

**Support Relation.** We use the NYUv2 dataset  to probe the support relation. Segmentation annotations for different regions (objects or surfaces) are provided, as well as their support relations. Support relation here means an object is physically supported by another object, _i.e.,_ the second object will undertake the force to enable the first object to stay at its position. Regions are directly obtained via the segmentation annotations. A pair of regions are _positive_ if the first region is supported by the

Figure 2: **Example images for probing _scene geometry_. The first row shows a sample annotation for the _same plane_, and the second row is a sample annotation for _perpendicular plane_. Here, and in the following figures, (\(A\), \(B\)) are a positive pair, while (\(A\), \(C\)) are negative. The images are from the ScanNetv2 dataset  with annotations for planes from . In the first row, the first piece of floor (\(A\)) is on the same plane as the second piece of floor (\(B\)), but is not on the same plane as the surface of the drawers (\(C\)). In the second row, the table top (\(A\)) is perpendicular to the wall (\(B\)), but is not perpendicular to the stool top (\(C\)).

second region, and _negative_ if the first region is not supported by the second region. Second row of Figure 3 is an example.

**Shadow.** We use the SOBA dataset [40; 41] to study the shadows which depend on the lighting of the scene. Segmentation masks for each object and shadow, as well as their associations are provided in the dataset annotations. Regions are directly obtained from the annotated object and shadow masks. In a region pair, there is one object mask and one shadow mask. A pair of regions are _positive_ if the shadow mask is the shadow of the object, and _negative_ if the shadow mask is the shadow of another object. Third row of Figure 3 is an example.

**Occlusion.** We use the Segerated COCO dataset  to study the occlusion (object seperation) problem. Regions are different connected components of objects (and the object mask if it is not separated), _i.e.,_ groups of connected pixels belonging to the same object. A pair of regions are _positive_ if they are different components of the same object separated due to occlusion, and _negative_ if they are not from the same object. First row of Figure 4 is an example.

**Depth.** We use the NYUv2 dataset , which provides mask annotations for different objects and regions, together with depth for each pixel. A pair of regions are _positive_ if the first region has a greater average depth than the second region, and _negative_ if the first region has a less average depth than the second region. The average depth of a region is calculated via the average of depth value of each pixel the region contains. Second row of Figure 4 is an example.

### Property Probing

Take Stable Diffusion as an example, we aim to determine which features best represent different properties. To obtain features from an off-the-shelf Stable Diffusion network, we follow the approach of  used for DIFT, where noise is added to the input image in the latent space, and features are extracted from different layers and time steps of the model. While probing the properties, linear classifiers are used to infer the relationships between _regions_. The region representation is obtained by a simple average pooling of the diffusion features over the annotated region or object.

Figure 3: **Example images for probing _material, support relation and shadow_. The first row is for _material_, the second row for _support relation_, and the third row for _shadow_. First row: the material images are from the DMS dataset . The paintings are both covered with glass (\(A\) and \(B\)) whereas the curtain (\(C\)) is made of fabric. Second row: the support relation images are from the NYUv2 dataset . The paper (\(A\)) is supported by the table (\(B\)), but it is not supported by the chair (\(C\)). Third row: the shadow images are from the SOBA dataset . The person (\(A\)) has the shadow (\(B\)), not the shadow (\(C\)).

**Extracting Stable Diffusion Features.** We add noise \((0,)\) of time step \(t[0,T]\) to the input image \(x_{0}\)'s latent representation \(z_{0}\) encoded by the VAE encoder:

\[z_{t}=}z_{0}+(})\] (1)

and then extract features from the immediate layers of a pre-trained diffusion model, \(f_{}()\) after feeding \(z_{t}\) and \(t\) in \(f_{}\) (\(f_{}\) is a U-Net consisting of 4 downsampling layers and 4 upsampling layers):

\[F_{t,l}=f_{_{l}}(z_{t},t)\] (2)

where \(f_{_{l}}\) is the \(l\)-th U-Net layer. In this way, we can get the representation of an image \(F_{t,l}\) at time step \(t\) and \(l\)-th U-Net layer for the probe. We upsample the obtained representation to the size of the original image with bi-linear, then use the region mask to get a region-wise feature vector, by averaging the feature vectors of each pixel it contains, _i.e.,_ average pooling.

\[v_{k,t,l}=(R_{k}(F_{t,l}))\] (3)

where \(v_{k,t,l}\) is the feature vector of the \(k\)-th region \(R_{k}\). \(\) here is a per-pixel product of the region mask and the feature. For other models, including CLIP, DINOv1, DINOv2 and VQGAN, we feed the image into the ViT/Transformer and extract features from different layers. Then use average pooling as in Equation 3 to obtain the feature for each region.

**Linear Probing.** After extracting features from large-scale vision models, we use a linear classifier (a linear SVM) to examine how well these features can be used to answer questions to each of the properties. Specifically, the input of the classifier is the difference or absolute difference between the feature vectors of Region \(A\) and Region \(B\), _i.e.,_\(v_{A}-v_{B}\) or \(|v_{A}-v_{B}|\), and the output is a Yes/No answer to the question. Denoting the answer to the question as \(Q\), then since the questions about _Same Plane_, _Perpendicular Plane_, _Material_, _Shadow_ and _Occlusion_ are symmetric relations, \(Q(v_{A},v_{B})=Q(v_{B},v_{A})\). However, the questions about _Support Relation_ and _Depth_ are not symmetric. Thus, we use \(|v_{A}-v_{B}|\) (a symmetric function) as input for the first group of questions, and \(v_{A}-v_{B}\) (non-symmetric) for the rest of questions. We train the linear classifier on the train set via the positive/negative samples of region pairs for each property; do a grid search on the validation set to find (i) the optimal time step \(t\) (only for Stable Diffusion), (ii) the U-Net layer \(l\) for Stable Diffusion and the Transformer layer \(l\) for other models, and (iii) the SVM regularization parameter \(C\); and evaluate the performance on the test set. The grid search is only feasible because our proposed protocol is lightweight, and can assess the effectiveness of features for different downstream tasks with minimal resource demands.

Figure 4: **Example images for probing _viewpoint-dependent properties (occlusion & depth)_. The first row is for _occlusion_ and the second row is for _depth_. First row: the occlusion images are from the Separated COCO dataset . The sofa (_A_) and the sofa (_B_) are part of the same object, whilst the monitor (_C_) is not part of the sofa. Second row: the depth images are from the NYUv2 dataset . The chair (_A_) is farther away than the object on the floor (_B_), but it is closer than the cupboard (_C_).**Experiments

In this section, we first give details of the grid search method in Section 4.1. We then give the linear probing grid search results on features from Stable Diffusion in Section 4.2 and from other networks trained at scale in Section 4.3. Finally, we compare all models on the test set in Section 4.4.

### Implementation Details and Evaluation Metric

**Implementation Details.** For each property, we sample the same number of positive / negative pairs, to maintain a balanced evaluation set. In terms of the linear SVM, we tune the penalty parameter \(C\) on the val split to find the best \(C\) for each property. Therefore, we are grid searching 3 parameters on the val set, namely, Timestep \(t\) ranging from 1 to 1000 (only for Stable Diffusion), U-Net Layer \(l\) covering the 4 downsampling and 4 upsampling layers for Stable Diffusion and Transformer Layer \(l\) for other networks, and the SVM penalty parameter \(C\) ranging over \(0.001,0.01,0.1,1,10,100,1000\). The timestep is searched with a stride of 20 steps, since the difference in performance around the optimal value varies by less than 0.01 within 20 steps. In practice the \(C\) parameter is always between \(0.1\) and \(1\), so we carry out a finer search over values between \(0.1\) and \(1.0\) in steps of \(0.1\). The linear SVM is solved using the _libsvm_ library  with the SMO algorithm, to get the unique global optimal solution. Please refer to the appendix for more implementation details.

**Evaluation Metric.** All protocols are binary classification, therefore, we use ROC Area Under the Curve (AUC Score) to evaluate the performance of the linear classifier, as it is not sensitive to different decision thresholds.

### Results for Stable Diffusion

The results for grid search are shown in Table 2. For Stable Diffusion U-Net Layer, \(D_{l}\) means the \(l\)-th layer of the U-Net decoder, _i.e.,_ upsampling layer, from outside to inside (right to left), and we provide an illustration of the layers in Figure 5(a).

We can make observations: First, the best time step for different properties varies, but the optimal time step is usually before 400. This is expected as a large time step adds too much noise, so not

   Property & Time Step & Layer & \(C\) & Val AUC \\  Same Plane & 360 & \(D_{3}\) & 0.4 & 97.3 \\ Perpendicular Plane & 160 & \(D_{3}\) & 0.5 & 88.5 \\ Material & 20 & \(D_{3}\) & 0.5 & 81.5 \\ Support Relation & 120 & \(D_{3}\) & 1.0 & 92.6 \\ Shadow & 160 & \(D_{3}\) & 0.8 & 95.4 \\ Occlusion & 180 & \(D_{3}\) & 0.3 & 83.8 \\ Depth & 60 & \(D_{3}\) & 0.9 & 99.2 \\   

Table 2: **SVM grid search results of Stable Diffusion features.** For each property, we train the linear SVM on the training set and grid search the best combination of time step, layer, and \(C\) on the validation set. The ROC AUC score (%) is reported on the validation set using the selected combination.

Figure 5: **(a) Nomenclature for the U-Net Layers.** We probe 4 downsampling encoder layers \(E_{1}\)-\(E_{4}\) and 4 upsampling decoder layers \(D_{1}\)-\(D_{4}\) of the Stable Diffusion U-Net. **(b) A prediction failure for Material.** In this example the model does not predict that the two regions are made of the same material (fabric). **(c) A prediction failure for Occlusion.** In this example the model does not predict that the two regions belong to the same object (the sofa).

much information is contained about the image. Second, in terms of the layer, the best U-Net layer is always \(D_{3}\) in the decoder rather than the encoder. The optimal layer is in the middle, as \(D_{1}\) is too close to the noise space and \(D_{4}\) has just started decoding. Further explorations using Stable Diffusion features for downstream tasks could thus start from the U-Net decoder layers, especially \(D_{3}\). Third, in terms of the performance on the test set, we find that Stable Diffusion can understand very well about scene geometry, support relations, shadows, and depth, but it is less performant at predicting material and occlusion. Examples of its failure are shown in Figure 5 (b) (c). As noted in  and , grouping all separated parts of an object due to occlusion remains challenging even for state-of-the-art detection and segmentation models. The appendix gives grid search results at all time steps and layers.

### Results for CLIP/DINO/VQGAN Features

In this section we show grid search results for OpenCLIP [18; 30] pre-trained on LAION dataset , DINOv1  pre-trained on ImageNet dataset , DINOv2  pre-trained on LVD-142M dataset , and VQGAN  pre-trained on ImageNet dataset . We use the best pre-trained checkpoints available on their official GitHub - ViT-B for DINOv1, ViT-G for OpenCLIP and DINOv2, and the 48-layer transformer checkpoint for VQGAN. Similar to Stable Diffusion, for each of these models, we conduct a grid search on the validation set in terms of the ViT/Transformer layer and \(C\) for SVM, and use the best combination of parameters for evaluation on the test set.

    &  &  \\   & OpenCLIP & DINOv1 & DINOv2 & VQGAN & OpenCLIP & DINOv1 & DINOv2 & VQGAN \\  Optimal Layer & 27 & 8 & 24 & 12 & 27 & 9 & 22 & 12 \\ Optimal C & 0.7 & 0.7 & 0.8 & 1.0 & 1.0 & 0.2 & 0.6 & 0.6 \\ Val AUC & 94.5 & 93.2 & 96.0 & 82.6 & 72.9 & 70.9 & 84.9 & 62.8 \\        &  &  \\   & OpenCLIP & DINOv1 & DINOv2 & VQGAN & OpenCLIP & DINOv1 & DINOv2 & VQGAN \\  Optimal Layer & 30 & 8 & 23 & 11 & 32 & 9 & 40 & 14 \\ Optimal C & 0.3 & 0.2 & 0.6 & 0.3 & 0.3 & 0.3 & 0.6 & 0.4 \\ Val AUC & 77.5 & 77.4 & 81.3 & 65.8 & 92.0 & 91.5 & 93.6 & 85.4 \\        &  &  \\   & OpenCLIP & DINOv1 & DINOv2 & VQGAN & OpenCLIP & DINOv1 & DINOv2 & VQGAN \\  Optimal Layer & 28 & 2 & 29 & 8 & 31 & 3 & 29 & 2 \\ Optimal C & 1.0 & 0.8 & 1.0 & 1.0 & 0.2 & 0.2 & 0.3 & 1.0 \\ Val AUC & 94.6 & 92.4 & 96.6 & 88.7 & 80.6 & 77.0 & 84.4 & 77.4 \\    
    &  \\   & OpenCLIP & DINOv1 & DINOv2 & VQGAN \\  Optimal Layer & 32 & 7 & 30 & 45 \\ Optimal C & 0.1 & 0.4 & 1.0 & 0.5 \\ Val AUC & 99.2 & 97.4 & 99.6 & 93.7 \\   

Table 3: **SVM grid search results of CLIP/DINO/VQGAN features.** We train the linear SVM on the training set, and grid search the best combination of ViT/Transformer layer and \(C\) on the validation set. The OpenCLIP and VQGAN models we use have 48 transformer layers, DINOv1 has 12 layers and DINOv2 has 40 layers. The \(i\)-th layer means the \(i\)-th transformer layer from the input side.

Grid search results are reported in Table 3. It can be observed that different layers of different models are good at different properties.

### Comparison of Different Features Trained at Scale

We compare the state-of-the-art pre-trained large-scale vison models' representations on various downstream tasks in Table 4. It can be observed that the Stable Diffusion and DINov2 representations outperform OpenCLIP, DINov1 and VQGAN for all properties, indicating the potential of utilizing Stable Diffusion and DINov2 representations for different downstream tasks with the optimal time steps and layers found in Section 4.2 and Section 4.3.

## 5 Discussion and Future Work

In this paper, we have developed a general and lightweight protocol to efficiently examine whether models pre-trained on large scale image datasets, like CLIP, DINO, VQGAN and Stable Diffusion, have explicit feature representations for different properties of the 3D physical scene.

It is interesting to find that different time steps of Stable Diffusion and different layers of DINov2 representations can handle several different physical properties at a state-of-the-art performance, indicating the potential of utilising the Stable Diffusion and DINov2 models for different downstream tasks.

However, for some properties such as material and occlusion, the networks are not distilling the information in a manner that can be used by a linear probe. This could indicate that these properties are not modelled well by the network or that more than a linear probe is required to tease them out. We show examples of the prediction failures for these properties in Figure 5. In the appendix, we show that such prediction failures also occur in generated (i.e. synthetic) images. It is worth noting that occlusion is a challenge even for the powerful Segment Anything Model (SAM) , where the model 'hallucinates small disconnected components at times'.

In the appendix, we provide preliminary results of using the probed Stable Diffusion feature for downstream tasks (Section E). We also provide examples of another use case of spotting Stable Diffusion generated images based on the properties that the model is not good at (Section B).

This paper has given some insight into answering the question: 'To what extent do large vision models understand the 3D scene' for real images. Of course, there are more properties that could be investigated in the manner proposed here. For example, contact relations  and object orientation , as well as the more nuanced non-symmetric formulations of the questions. Please refer to arxiv version of the paper  for future updates.

Broader Impact.This paper studies the learned representations of large vision models, and can help people better understand what has been learnt by these vision foundation models. We do not think there is any negative societal impact from this investigation.

   Property & Random & OpenCLIP & DINov1 & DINov2 & VQGAN & Stable Diffusion \\  Same Plane & 50 & 92.3 & 91.4 & 94.5 & 81.3 & **96.3** \\ Perpendicular Plane & 50 & 71.8 & 71.3 & 82.1 & 62.0 & **86.0** \\ Material & 50 & 78.7 & 78.8 & 83.5 & 65.5 & **83.6** \\ Support Relation & 50 & 90.6 & 90.8 & **92.8** & 84.1 & 92.1 \\ Shadow & 50 & 94.9 & 92.2 & **95.8** & 89.0 & 95.4 \\ Occlusion & 50 & 81.2 & 79.9 & 84.4 & 78.4 & **84.8** \\ Depth & 50 & 99.2 & 97.1 & **99.7** & 91.8 & 99.6 \\   

Table 4: **Comparison of different features trained at scale.** For each property, we use the best time step, layer and \(C\) found in the grid search for Stable Diffusion, and the best layer and \(C\) found in the grid search for other features. The performance is the ROC AUC on the test set, and â€˜Randomâ€™ means a random classifier.

Acknowledgements.This research is supported by EPSRC Programme Grant VisualAI EP\(/\) T028572\(/\)1, a Royal Society Research Professorship RP\(\)R1\(\)191132, an AWS credit funding, a China Oxford Scholarship and ERC-CoG UNION 101001212. We thank Yash Bhalgat, Minghao Chen, Subhabrata Choudhury, Kai Han, Tengda Han, Jaesung Huh, Vladimir Iashin, Tomas Jakab, Gyungin Shin, Ashish Thandavan, Vadim Tschernezki, Jianyuan Wang and Yan Xia from the Visual Geometry Group for their help and support for the project.