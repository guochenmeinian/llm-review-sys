# Fetch and Forge: Efficient Dataset Condensation for Object Detection

Ding Qi\({}^{1}\) Jian Li\({}^{2}\)  Jinlong Peng\({}^{2}\) Bo Zhao\({}^{4}\)

Shuguang Dou\({}^{1}\)  Jialin Li\({}^{2}\)  Jianning Zhang\({}^{2}\)

**Yabiao Wang\({}^{3,2}\)\({}^{1}\) Chengije Wang\({}^{2}\) Cairong Zhao\({}^{1}\)\({}^{}\)**

\({}^{1}\)Tongji University \({}^{2}\)Tencent YouTu Lab

\({}^{3}\)Zhejiang University \({}^{4}\)Shanghai Jiao Tong University

Work done when Ding Qi is an intern in Tencent YouTu Lab, and the advisor is Jian Li.Corresponding author

###### Abstract

Dataset condensation (DC) is an emerging technique capable of creating compact synthetic datasets from large originals while maintaining considerable performance. It is crucial for accelerating network training and reducing data storage requirements. However, current research on DC mainly focuses on image classification, with less exploration of object detection. This is primarily due to two challenges: (i) the multitasking nature of object detection complicates the condensation process, and (ii) Object detection datasets are characterized by large-scale and high-resolution data, which are difficult for existing DC methods to handle. As a remedy, we propose DCOD, the first dataset condensation framework for object detection. It operates in two stages: Fetch and Forge, initially storing key localization and classification information into model parameters, and then reconstructing synthetic images via model inversion. For the complex of multiple objects in an image, we propose Foreground Background Decoupling to centrally update the foreground of multiple instances and Incremental PatchExpand to further enhance the diversity of foregrounds. Extensive experiments on various detection datasets demonstrate the superiority of DCOD. Even at an extremely low compression rate of 1%, we achieve 46.4% and 24.7% AP\({}_{50}\) on the VOC and COCO, respectively, significantly reducing detector training duration.

## 1 Introduction

In the past decade, the field of deep learning has witnessed the emergence of high-performance models, driven by the development of convolutional and Transformer networks . These models, while benefiting from large-scale datasets, also encounter significant challenges such as data storage and the demand for extensive training resources. Dataset condensation (or distillation)  has emerged in response, aiming to synthesize a small amount of data that approximates the training effectiveness of original datasets, thus offering hope to alleviate this dilemma.

Current dataset condensation (DC) research mainly focuses on image classification and is divided into two main frameworks: Meta-learning and Data-matching . As shown in Figure 1 (a), the Meta-learning framework  optimizes synthetic datasets by minimizing performance risks on the original dataset's validation set, using a bi-level optimization process. In contrast, Figure 1 (b) illustrates the Data-matching framework, which aligns gradients , feature distributions , or training trajectories  to simulate the original data's impact during different model training stages.

While both frameworks above make significant contributions to the field, they share common limitations. The complexity and computational expense of their bi-level optimization process restrict their application, typically confining them to smaller datasets (e.g., CIFAR10, CIFAR100, Tiny-ImageNet) and simpler network architectures (e.g., ConvNet-3, AlexNet, VGG-11, ResNet-18). This limitation is particularly pronounced in object detection tasks, which are inherently more complex than image classification. Specifically, i) the requirement in object detection for simultaneous localization and classification of multiple objects in an image considerably complicates the condensation process; and ii) the large-scale, high-resolution nature of detection dataset images, along with the complexity of detection network structures, poses significant challenges in extending existing DC methods.

In this study, we propose DCOD, **the first dataset condensation framework for object detection.** DCOD is distinct in its ability to flexibly generate foreground objects of varying sizes, shapes, and categories at any position within an image, as demonstrated in Figure 2. Additionally, DCOD streamlines the process by eliminating the complexities of traditional bi-level optimization, enhancing its compatibility with complex detection networks and large-scale, high-resolution data. **DCOD operates in two stages: Fetch and Forge.** As in Figure 1 (c), in the first stage Fetch, we train an object detector on the original dataset following a standard procedure, during which key information from the original data is stored within the detector. Then, in the second stage, we employ the model inversion to synthesize images from the trained detector. Specifically, we freeze the detector's weights and input initialization images and labels (including position, size, and category) randomly sampled from the original dataset to capture the instance distribution of real originals. During the inversion process, we propose the Foreground Background Decoupling (\(_{BD}\)) to enhance attention to the foreground areas through random erasure guided by a coarse mask and Incremental PatchExpand (\(_{PE}\)) expands a single image into multiple patches, each guided by different target labels, thus synthesizing a richer variety of instances. Finally, we utilize the detector's loss function as the guiding task loss for dataset condensation. To ensure the quality of the generated images, we implement two types of regularization: pixel-level alignment and feature-level alignment. Our method underwent rigorous evaluation on the MS COCO  and Pascal VOC [7; 6] datasets, achieving top-tier results that highlight its significant effectiveness. With some problems left open and a considerable improvement room existing, we hope this pilot study will attract more community interest.

The primary contributions of this paper can be summarized as follows:

* We propose DCOD, the first dataset condensation framework for object detection datasets. Utilizing a two-stage process of Fetch and Forge, it can simultaneously condense crucial localization and classification information from the original dataset.
* For the multi-object distribution characteristic of object detection datasets, we propose the Foreground Background Decoupling strategy and Incremental PatchExpand which notably boost the diversity of multi-instances, all within a constrained storage budget.

Figure 1: (a) Meta-learning treats synthetic set updates in DC as a meta-task; (b) Data-matching indirectly matches gradients, feature distributions, and training trajectories generated during network training; (c) Our proposed DCOD, the first for object detection, decouples the bi-level optimization of methods a and b, following a Fetch and Forge two-stage approach.

* Extensive experiments on various detection datasets underscore the superiority of DCOD. Remarkably, even at an extremely low compression rate of 1%, we achieve 46.4% and 24.5% AP50 on the VOC and COCO datasets respectively, significantly reducing the training duration for object detection.

## 2 Related work

Dataset Condensation.Dataset condensation (or distillation) aims to compress large-scale original data into a small amount of synthetic data, accelerating network training while maintaining comparable performance. Current research primarily focuses on the field of image classification and can be divided into two frameworks: meta-learning and data matching. In the meta-learning framework, methods such as DD , KIP , RFAD , and FRePo  update model parameters in the inner loop and synthetic data in the outer loop. In the data matching framework, techniques like DC , DSA , and IDC  utilize gradient matching, comparing neural network weight gradients from training on both real and synthetic data. Distribution matching approaches, exemplified by DM , CAFE , DataDAM , and IDM , align real and synthetic data distributions using Maximum Mean Discrepancy (MMD), often through a single optimization process but potentially limiting the performance. Trajectory matching, such as MTT , optimizes synthetic data by pre-calculating and storing training trajectories of expert networks from the real dataset. A critical downside of MTT is the significant storage requirement for these trajectories.

Recent research suggests compressing original data into models rather than synthetic data. DiM  minimizes the difference in predicted logits between real and generated images, using a generator to store original dataset information. \(^{2}\) indicates that key dataset information can be preserved in deep neural network training. Inspired by this, we argue that the localization and classification information of the detection data can be learned and preserved by the detector, allowing the key information to be recovered to reconstruct the synthetic image. Unlike \(^{2}\), we focus on object detection datasets with multiple instances in a single image. We propose a foreground-background decoupling strategy and incremental PatchExpand to enhance the updating of synthesized multiple instances.

Diverging from the traditional focus on image classification, our study pioneers dataset condensation in object detection. We introduce a streamlined approach that separates the traditional bi-level optimization into a two-stage Fetch and Forge process. This strategy effectively realizes dataset condensation in object detection tasks with increased efficiency.

High Training Overhead in Object Detection.Object detection methods are broadly divided into two categories: one-stage and two-stage detectors. One-stage detectors, such as YOLO series [19; 20], SSD , DSFD , are valued for their speed and simplicity. Conversely, two-stage detectors like Faster R-CNN  prioritize accuracy. Training object detectors, particularly on a single GPU, demands substantial time. Training a complex model like Faster R-CNN on datasets such as COCO can take several days or even weeks, depending on the configuration and hardware. This extensive training time underscores the pressing need for more efficient training methodologies in object

Figure 2: Visualization of images synthesized using DCOD. (a) A synthetic image contains only one category of foreground. (b) A synthetic image contains multiple foregrounds of different sizes, shapes, and categories.

detection, highlighting the growing importance of dataset condensation advancements. To address this issue, we introduce the first dataset condensation framework for object detection.

## 3 Dataset Condensation for Object Detection

### Preliminary

Dataset condensation reduces a large real dataset \(\) into a smaller synthetic dataset \(}\). We first extend the existing DC [27; 32] optimization framework to accommodate detection task. For object detection, each image is annotated with multiple bounding boxes and their associated class labels. The real dataset \(\), containing \(N\) labeled images, is given by \(=\{(X_{i},A_{i})\}_{i=1}^{N}\), where \(A_{i}=\{(x_{j},y_{j},w_{j},h_{j},c_{j})\}_{j=1}^{n_{j}}\), with \(x_{j},y_{j},w_{j},h_{j}\) representing the coordinates and sizes of the \(j\)-th bounding box, and \(c_{j}\) being the class label. The synthetic dataset \(}\), comprising \(M\) images where \(M N\), is formulated as \(}=\{(_{i},_{i})\}_{i=1}^{M}\), where \(_{i}=\{(_{j},_{j},_{j}, _{j},_{j})\}_{j=1}^{_{i}}\) represents the synthetic bounding boxes and their corresponding class labels. The optimization process for dataset condensation is twofold:

Model Parameters Update (Inner Loop): The model parameters \(\) are optimized over the synthetic dataset \(}\) to minimize the loss function \(L^{}}()\):

\[_{}}(})=}\ L^{}}().\] (1)

Synthetic Dataset Update (Outer Loop): The synthetic dataset \(}\) is refined to minimize the loss on the real dataset \(\) using the model parameters \(_{}}(})\) obtained from the inner loop:

\[}^{*}=}{}\ L^{ }(_{}}(})).\] (2)

However, this optimization process underlying this procedure involves a complex bi-level optimization scheme, which leads to high computational costs. The challenge intensifies when dealing with intricate model structures in the inner-loop or large synthetic datasets in the outer-loop. In the context of object detection, where high-resolution images and complex network structures are the norm, employing such bi-level optimization becomes even more impractical. This emphasizes the need for more streamlined and practical methods in dataset condensation, especially for tasks like object detection that involve high computational demands.

Figure 3: Overview of the DCOD framework: In the first stage, Fetch, a detector is trained on the original images, encapsulating key information from the original dataset. In the second stage, Forge, a randomly initialized synthetic set is enhanced through Foreground Background Decoupling and Incremental PatchExpand on the initial images, which are then input into the trained detector. Guided by targets, specific category targets are updated in the corresponding areas of the images. The loss of the detector serves as the task loss for condensation, while pixel-level and feature-level regularization ensure the quality of the generated images.

### Fetch and Forge: DCOD Framework

Pioneering the application of dataset condensation to object detection, we develop the Dataset Condensation for Object Detection (DCOD) framework, which is a novel two-stage process depicted in Figure 3. This method diverges from the traditional bi-level optimization that compresses information directly into synthetic data. Instead, we optimize the model and synthetic data separately. Subsequent sections will delve into the optimization objectives for the Fetch and Forge stages.

Stage-I: Fetch.For object detection tasks, the real dataset is given by \(=\{(X_{i},A_{i})\}_{i=1}^{N}\), with \(A_{i}\) encompassing bounding boxes and class labels. By training an object detector \(_{}\) parameterized with \(\) on the original dataset \(\), we capture key information crucial for the tasks of localization and recognition within images. The optimization can be expressed as:

\[_{}=_{}_{}(_{}( X),A),\] (3)

with \(_{}\) representing the composite loss function that combines localization loss \(_{}\) and classification loss \(_{}\):

\[_{}(_{}(X),A)=_{}(_{ }(X),A)+_{}(_{}(X),A),\] (4)

minimizing \(_{}\) adjusts \(\) to detect objects with higher precision.

Stage-II: Forge.In the forge stage, we borrow principles from model inversion [16; 28; 3], utilizing a well-trained detection model to guide the embedding of essential information back into the synthetic images. To achieve this, it is essential to recognize the unique aspects of detection tasks: an image typically contains multiple foreground objects with different positions, sizes, and shapes. Therefore, we propose Foreground Background Decoupling (\(_{BD}\)) and Incremental PatchExpand (\(_{PE}\)). Finally, we use the detection loss as the task loss to guide the update of the targets' corresponding areas with the foregrounds of various categories.

Foreground-Background Decoupling.We initialize the synthetic set \(}=\{(_{i},_{i})\}_{i=1}^{M}\) by randomly selecting a subset of images and their corresponding targets from the original dataset, which includes position coordinates and category labels. The primary objective of object detection is to distinguish the foreground from the background and then classify the foreground objects. Therefore, we prioritize synthesizing the foreground. Additionally, while the background is treated as a single category in detection tasks, we adopt a background suppression strategy to avoid blending different contextual semantics (e.g., integrating sky or ocean information into a grassy background).

To this end, we propose Foreground-Background Decoupling (\(_{BD}\)) to separately handle the updating of the foreground and background areas, as follows:

\[_{BD}(=\{x_{},x_{}\})=\{ &x_{} x_{}( <1)\\ &_{E}(x_{}).\] (5)

We first separate the foreground and background regions using a binary mask based on the bounding box coordinates from the original labels. For the background (\(x_{}\)), we apply a suppression strategy controlled by a hyperparameter \(\), which limits updates to preserve contextual information. For the foreground (\(x_{}\)), we employ a random erasure method \(_{E}\), ensuring the model focuses more on refining foreground pixels during the inversion phase. By strategically applying suppression and enhancement, this approach prioritizes important visual information, optimizing the model's ability to generate high-fidelity synthesized images.

Incremental PatchExpand.Unlike classification datasets that contain only one object, images in detection datasets sometimes contain multiple instances of several different categories. Inspired by curriculum learning, we propose Incremental PatchExpand (\(_{PE}\)) to learn more instances during training. By adopting this approach, we increase the number of divisions, thereby introducing complexity into the synthetic data. We first standardize all images to a uniform size via padding. Subsequently, we employ a procedure, as defined by the function:

\[_{PE}()=((( ),k),)\] (6)which divides the images into \(k k\) patches and each patch is then optimized for different targets, enhancing the diversity in object position, size, and shape. The incremental introduction of more patches allows the model to gradually adapt to various complexities and learn effectively across a broader range of scenarios.

Optimization with Pixel and Feature Regularization.Following the model inversion and decoupling framework , the synthetic images \(\) are optimized by solving the following minimization problem:

\[=}{}L_{}(_{_{T}}( ),)+R_{reg},\] (7)

where \(L_{}\) denotes the detection loss and \(\) signifies the parameters of the model applied to \(\). Here, \(\) represents the set of annotations for the targets present in \(\). The term \(R_{reg}\), a regularization term, is crucial for preserving the intrinsic qualities of the original dataset within the synthetic images and is defined as the sum of pixel and feature regularization:

\[R_{reg}=R_{pixel}+R_{feature},\] (8)

The pixel-level regularization \(R_{pixel}\) comprises two terms:

\[R_{pixel}()=_{TV}R_{TV}()+_{l_{2}}R_{ l_{2}}().\] (9)

with \(R_{TV}\) promoting spatial smoothness through the Total Variation regularization:

\[R_{TV}()=_{i,j}_{i,j}-_{i+ 1,j})^{2}+(_{i,j}-_{i,j+1})^{2}},\] (10)

and \(R_{l_{2}}\) minimizing the squared Euclidean norm of pixel values. The coefficients \(_{TV}\) and \(_{l_{2}}\) are hyperparameters that balance the Total Variation and \(L_{2}\) terms, respectively.

Feature-level regularization \(R_{feature}\) aims to align the feature statistics of the synthetic image \(\) with the batch normalization (BN) layers of the pre-trained model, as follows:

\[R_{feature}()=_{l}\|_{l}()-_{l}^{BN }\|_{2}^{2}+\|_{l}^{2}()-_{l}^{BN}\|_{2}^{2},\] (11)

where \(_{l}()\) and \(_{l}^{2}()\) represent the mean and variance of the activations at the \(l\)-th BN layer of \(\), while \(_{l}^{BN}\) and \(_{l}^{BN}\) correspond to the statistics derived from the pre-trained model. This feature regularization is fundamental for the consistency of the feature distribution and the utility of \(\) in training object detectors. At last, we summarize the complete two-stage process in Algorithm 1.

## 4 Experiment

### Experiment Setup

The standard evaluation of dataset condensation consists of two steps: first, condensing the original training set into a smaller synthetic dataset; then, training an initialized model with this synthetic data and evaluating it on the original dataset's test set to assess the synthetic data's effectiveness in model training.

Datasets and Metrics.Our DCOD method is evaluated on Pascal VOC [7; 6] and MS COCO  benchmarks, with image resolution set to 512x512. For Pascal VOC, we merge the trainval sets of VOC2007 and VOC2012 into a single training set with 16,551 images, using the VOC2007 test set for evaluation. MS COCO comprises 80 categories with 118,287 training and 5,000 test images. Both datasets are assessed using standard COCO metrics: mAP (mean Average Precision), AP\({}_{50}\) (0.5 IoU threshold), AP\({}_{75}\) (0.75 IoU threshold), and size-specific AP\({}_{s}\), AP\({}_{m}\), AP\({}_{l}\) for performance evaluation. We initialize the network with pretrained backbone weights and train it 5 times on the distilled dataset. The evaluation is conducted on the original test dataset to obtain the \( std\).

Implementation Details.The initialization of the synthetic set involves random sampling from the original images, adhering to the specified compression ratio. The compression rate in classification tasks is typically set to around 1%. In our task, for VOC, we evaluate at compression rates of 0.5%, 1%, and 2%, while for COCO, we report at 0.25%, 0.5%, and 1%. During the standard image synthesis process, we set the image learning rate at 0.002. The weight for the task loss is set at 1, while \(R_{feature}\)is assigned a weight of 0.1. The \(_{TV}\) and \(_{l2}\) is established at 1 and 0.001, respectively. The \(\) in background suppression strategy is set to 0.7. All experiments were performed on a single V100 gpu.

### Experimental Results

Counterpart Methods.As we are the first dataset condensation methods for object detection, we refer to the comparison settings of general DC in classification [27; 32] and choose three core-set selection methods: Random , K-center , and Herding [1; 4]. The Random method randomly selects real images from the original training set to form a subset. To adapt the K-center and Herding for object detection tasks, we implement a straightforward modification by using a pre-trained feature extractor (ResNet50) to process the features of entire images and employing the L2 norm to measure distances. Additionally, considering class balance, we also employ the Uniform, which is commonly used in practical applications within the field of object detection.

[MISSING_PAGE_FAIL:8]

Performance upper boundAs shown in Figure 7, we compare the performance variations of the Random baseline method and the DCOD method as the compression ratio increases. The performance of the full dataset, marked by a gray line, serves as the theoretical upper bound. When the ratio is below 5%, DCOD shows a significant advantage over the random method, while as the ratio exceeds 20%, the performance of both methods converge.

Discussion on InitializationWe discuss the impact of initialization sampling on the performance of the synthetic dataset in this section. As shown in Table 5, the Random method, which is the primary choice for the experiments in this paper, is simple and performs well. Initialization strategies based on K-center and Herding lead to a decline in performance. This is these core-set methods fail to account for the complex factors in detection datasets, such as class distribution and object size distribution, resulting in significant differences between the synthetic and original datasets. Using noise as the initialization method, due to the absence of any prior information from the original dataset, causes a notable drop in the effectiveness of the synthetic dataset.

### Visualization

We present a comparative analysis of synthetic images across various iterations, as shown in Figure 5. Notably, there is a progressive enhancement in the foreground scores with advancing iterations, indicative of the incremental integration of category-specific beneficial information into the images. Specifically, for sheep in the first row, the scores at iter500 and iter1000 start lower than the initial

Figure 5: Visualization of different iteration steps during the condensed phase. Scores are assigned using the trained YOLOv3-spp model, based on IOU@0.5. The “GT” column represents the true labels of images. “iter0” shows the initial image scores, followed by scores of synthetic images and their bounding box at iterations 500, 1000, 2000, and 3000.

Figure 6: Visualization of the multi-instance synthesized images. Scores are assigned using the trained YOLOv3-SPP model, based on IOU@0.5.

image but surpass initial scores after iter2000. This trend implies that early images are initially disrupted by noise from the update process, but as iterations progress, pixel, and feature regularization help maintain image clarity.

Additionally, we also showcase the visualization results of synthetic images containing multiple instances, as shown in Figure 6, demonstrating that DCOD effectively supports the generation of multiple instances required in detection tasks.

## 5 Conclusion, Limitations and Future Work

In this study, we introduce the first dataset condensation framework for object detection, DCOD. It is a two-stage framework where, in the first stage, Fetch stores information vital for detection from the original dataset into model parameters. In the second stage, Forge, the images are then reconstructed through model Inversion. We propose foreground background decoupling and incremental Patch-Expand, to improve the efficiency and diversity of the synthetic images. Extensive experiments are conducted on two standard detection benchmarks, Pascal VOC and MS COCO, to demonstrate that DCOD can significantly maintain superior performance even at an extremely low compression rate.

We acknowledge the limitations of our work from two perspectives. First, due to the significant differences among object detectors, we did not extend our approach to more complex detectors like DETR, as this might require more specialized designs to accommodate their structures. Second, the performance across different architectures is still insufficient and remains an area that needs improvement.