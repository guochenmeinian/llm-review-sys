# Optimizing Solution-Samplers for Combinatorial Problems: The Landscape of Policy-Gradient Methods

Constantine Caramanis

UT Austin & Archimedes / Athena RC

constantine@utexas.edu &Dimitris Fotakis

NTUA & Archimedes / Athena RC

fotakis@cs.ntua.gr &Alkis Kalavasis

Yale University

alvertos.kalavasis@yale.edu &Vasilis Kontonis

UT Austin

vkonton@gmail.com &Christos Tzamos

UOA & Archimedes / Athena RC

tzamos@wisc.edu

###### Abstract

Deep Neural Networks and Reinforcement Learning methods have empirically shown great promise in tackling challenging combinatorial problems. In those methods a deep neural network is used as a solution generator which is then trained by gradient-based methods (e.g., policy gradient) to successively obtain better solution distributions. In this work we introduce a novel theoretical framework for analyzing the effectiveness of such methods. We ask whether there exist generative models that (i) are expressive enough to generate approximately optimal solutions; (ii) have a tractable, i.e, polynomial in the size of the input, number of parameters; (iii) their optimization landscape is benign in the sense that it does not contain sub-optimal stationary points. Our main contribution is a positive answer to this question. Our result holds for a broad class of combinatorial problems including Max- and Min-Cut, Max-\(k\)-CSP, Maximum-Weight-Bipartite-Matching, and the Traveling Salesman Problem. As a byproduct of our analysis we introduce a novel regularization process over vanilla gradient descent and provide theoretical and experimental evidence that it helps address vanishing-gradient issues and escape bad stationary points.

## 1 Introduction

Gradient descent has proven remarkably effective for diverse optimization problems in neural networks. From the early days of neural networks, this has motivated their use for combinatorial optimization . More recently, an approach by , where a neural network is used to generate (sample) solutions for the combinatorial problem. The parameters of the neural network thus parameterize the space of distributions. This allows one to perform gradient steps in this distribution space. In several interesting settings, including the Traveling Salesman Problem, they have shown that this approach works remarkably well. Given the widespread application but also the notorious difficulty of combinatorial optimization , approaches that provide a more general solution framework are appealing.

This is the point of departure of this paper. We investigate whether gradient descent can succeed in a general setting that encompasses the problems studied in . This requires a parameterizationof distributions over solutions with a "nice" optimization landscape (intuitively, that gradient descent does not get stuck in local minima or points of vanishing gradient) and that has a polynomial number of parameters. Satisfying both requirements simultaneously is non-trivial. As we show precisely below, a simple lifting to the exponential-size probability simplex on all solutions guarantees convexity; and, on the other hand, _compressed_ parameterizations with "bad" optimization landscapes are also easy to come by (we give a natural example for Max-Cut in Remark 1). Hence, we seek to understand the parametric complexity of gradient-based methods, i.e., how many parameters suffice for a benign optimization landscape in the sense that it does not contain "bad" stationary points.

We thus theoretically investigate whether there exist solution generators with a tractable number of parameters that are also efficiently optimizable, i.e., gradient descent requires a small number of steps to reach a near-optimal solution. We provide a positive answer under general assumptions and specialize our results for several classes of _hard and easy_ combinatorial optimization problems, including Max-Cut and Min-Cut, Max-\(k\)-CSP, Maximum-Weighted-Bipartite-Matching and Traveling Salesman. We remark that a key difference between (computationally) easy and hard problems is not the ability to find a compressed and efficiently optimizable generative model but rather the ability to efficiently draw samples from the parameterized distributions.

### Our Framework

We introduce a theoretical framework for analyzing the effectiveness of gradient-based methods on the optimization of solution generators in combinatorial optimization, inspired by .

Let \(\) be a collection of instances of a combinatorial problem with common solution space \(S\) and \(L(;I):S\) be the cost function associated with an instance \(I\), i.e., \(L(s;I)\) is the cost of solution \(s\) given the instance \(I\). For example, for the Max-Cut problem the collection of instances \(\) corresponds to all graphs with \(n\) nodes, the solution space \(S\) consists of all subsets of nodes, and the loss \(L(s;I)\) is equal to (minus) the weight of the cut \((s,[n] s)\) corresponding to the subset of nodes \(s S\) (our goal is to minimize \(L\)).

**Definition 1** (Solution Cost Oracle).: _For a given instance \(I\) we assume that we have access to an oracle \((;I)\) to the cost of any given solution \(s S\), i.e., \((s;I)=L(s;I)\)._

The above oracle is standard in combinatorial optimization and query-efficient algorithms are provided for various problems . We remark that the goal of this work is not to design algorithms that solve combinatorial problems using access to the solution cost oracle (as the aforementioned works do). This paper focuses on landscape design: the algorithm is **fixed**, namely (stochastic) gradient descent; the question is how to design a generative model that has a small number of parameters and the induced optimization landscape allows gradient-based methods to converge to the optimal solution without getting trapped at local minima or vanishing gradient points.

Let \(\) be some prior distribution over the instance space \(\) and \(\) be the space of parameters of the model. We now define the class of solution generators. The solution generator \(p(w)\) with **parameter**\(w\) takes as **input** an instance \(I\) and **generates a random solution \(s\)** in \(S\). To distinguish between the output, the input, and the parameter of the solution generator, we use the notation \(p(;I;w)\) to denote the distribution over solutions and \(p(s;I;w)\) to denote the probability of an individual solution \(s S\). We denote by \(=\{p(w):w\}\) the above parametric class of solution generators. For some parameter \(w\), the loss corresponding to the solutions sampled by \(p(;I;w)\) is equal to

\[(w)=}_{I}[_{I}(w)]\,, \,\,\,_{I}(w)=}_{s p(;I;w)}[L(s;I)]\,.\] (1)

Our goal is to optimize the parameter \(w\) in order to find a sampler \(p(;I;w)\) whose loss \((w)\) is close to the expected optimal value \(\):

\[=}_{I}[_{s S}L(s;I) ]\,.\] (2)

The policy gradient method  expresses the gradient of \(\) as follows

\[_{w}(w)=}_{I}}_{s p(;I;w)}[L(s;I)\;_{w} p(s;I;w)]\,,\]

and updates the parameter \(w\) using the gradient descent update. Observe that a (stochastic) policy gradient update can be implemented using only access to a solution cost oracle of Definition 1.

Solution Generators.In  the authors used neural networks as parametric solution generators for the TSP problem. They provided empirical evidence that optimizing the parameters of the neural network using the policy gradient method results to samplers that generate very good solutions for (Euclidean) TSP instances. Parameterizing the solution generators using neural networks essentially _compresses_ the description of distributions over solutions (the full parameterization would require assigning a parameter to every solution-instance pair \((s,I)\)). Since for most combinatorial problems the size of the solution space is exponentially large (compared to the description of the instance), it is crucial that for such methods to succeed the parameterization must be _compressed_ in the sense that the description of the parameter space \(\) is polynomial in the size of the description of the instance family \(\). Apart from having a tractable number of parameters, it is important that the _optimization objective_ corresponding to the parametric class \(\) can provably be optimized using some first-order method in polynomial (in the size of the input) iterations.

We collect these desiderata in the following definition. We denote by \([]\) the description size of \(\), i.e., the number of bits required to identify any element of \(\). For instance, if \(\) is the space of unweighted graphs with at most \(n\) nodes, \([]=O(n^{2})\).

**Definition 2** (Complete, Compressed and Efficiently Optimizable Solution Generator).: _Fix a prior \(\) over \(\), a family of solution generators \(=\{p(w):w\}\), a loss function \(\) as in Equation (1) and some \(>0\)._

1. _We say that_ \(\) _is_ _complete_ _if there exists some_ \(\) _such that_ \(()+\)_, where_ \(\) _is defined in (_2_)._
2. _We say that_ \(\) _is_ _compressed_ _if the description size of the parameter space_ \(\) _is polynomial in_ \([]\) _and in_ \((1/)\)_._
3. _We say that_ \(\) _is_ _efficiently optimizable_ _if there exists a first-order method applied on the objective_ \(\) _such that after_ \(T=([],1/)\) _many updates on the parameter vectors, finds an (at most)_ \(\)_-sub-optimal vector_ \(\)_, i.e.,_ \(()()+\,\)_._

**Remark 1**.: _We remark that constructing parametric families that are complete and compressed, complete and efficiently optimizable, or compressed and efficiently optimizable (i.e., satisfying any pair of assumptions of Question 1 but not all 3) is usually a much easier task. Consider, for example, the Max-Cut problem on a fixed (unweighted) graph with \(n\) nodes. Note that \(\) has description size \(O(n^{2})\). Solutions of the Max-Cut for a graph with \(n\) nodes are represented by vertices on the binary hypercube \(\{ 1\}^{n}\) (coordinate \(i\) dictates the side of the cut that we put node \(i\)). One may consider the full parameterization of all distributions over the hypercube. It is not hard to see that this is a **complete and efficiently optimizable** family (the optimization landscape corresponds to optimizing a linear objective). However, it is **not compressed**, since it requires \(2^{n}\) parameters. On the other extreme, considering a product distribution over coordinates, i.e., we set the value of node \(i\) to be \(+1\) with probability \(p_{i}\) and \(-1\) with \(1-p_{i}\) gives a **complete and compressed** family. However, as we show in Appendix B, the landscape of this compressed parameterization suffers from highly sub-optimal local minima and therefore, it is **not efficiently optimizable**._

Therefore, in this work we investigate whether it is possible to have all 3 desiderata of Definition 2_at the same time_.

**Question 1**.: _Are there complete, compressed, and efficiently optimizable solution generators (i.e., satisfying Definition 2) for challenging combinatorial tasks?_

### Our Results

Our Contributions.Before we present our results formally, we summarize the contributions of this work.

* Our main contribution is a positive answer (Theorem 1) to Question 1 under general assumptions that capture many combinatorial tasks. We identify a set of conditions (see Assumption 1) that allow us to design a family of solution generators that are complete, compressed and efficiently optimizable.
* The conditions are motivated by obstacles that are important for any approach of this nature. This includes solutions that escape to infinity, and also parts of the landscape with vanishing gradient. See the discussion in Section 3 and Figure 1.

* We specialize our framework to several important combinatorial problems, some of which are NP-hard, and others tractable: Max-Cut, Min-Cut, Max-\(k\)-CSP, Maximum-Weight-Bipartite-Matching, and the Traveling Salesman Problem.
* Finally, we investigate experimentally the effect of the entropy regularizer and the fast/slow mixture scheme that we introduced (see Section3) and provide evidence that it leads to better solution generators.

We begin with the formal presentation of our assumptions on the feature mappings of the instances and solutions and on the structure of cost function of the combinatorial problem.

**Assumption 1** (Structured Feature Mappings).: _Let \(S\) be the solution space and \(\) be the instance space. There exist feature mappings \(_{S}:S X\), for the solutions, and, \(_{}: Z\), for the instances, where \(X,Z\) are Euclidean vector spaces of dimension \(n_{X}\) and \(n_{Z}\), such that_

1. (Bounded Feature Spaces) _The feature and instance mappings are bounded, i.e., there exist_ \(D_{S},D_{}>0\) _such that_ \(\|_{S}(s)\|_{2} D_{S}\)_, for all_ \(s S\) _and_ \(\|_{}(I)\|_{2} D_{}\)_, for all_ \(I\)_._
2. (Bilinear Cost Oracle) _The cost of a solution_ \(s\) _under instance_ \(I\) _can be expressed as a bilinear function of the corresponding feature vector_ \(_{S}(s)\) _and instance vector_ \(_{}(I)\)_, i.e., the solution oracle can be expressed as_ \((s,I)=_{}(I)^{}M_{S}(s)\) _for any_ \(s S,I\)_, for some matrix_ \(M\) _with_ \(\|M\|_{} C\)_._
3. (Variance Preserving Features) _There exists_ \(>0\) _such that_ \(_{s U(S)}[v_{S}(s)]\|v\|_{2}^{2}\) _for any_ \(v X\)_, where_ \(U(S)\) _is the uniform distribution over the solution space_ \(S\)_._
4. (Bounded Dimensions/Diameters) _The feature dimensions_ \(n_{X},n_{Z}\)_, and the diameter bounds_ \(D_{S},D_{},C\) _are bounded above by a polynomial of the description size of the instance space_ \(\)_. The variance lower bound_ \(\) _is bounded below by_ \(1/([])\)_._

**Remark 2** (Boundedness and Bilinear Cost Assumptions).: _We remark that Items 1, 4 are simply boundedness assumptions for the corresponding feature mappings and usually follow easily assuming that we consider reasonable feature mappings. At a high-level, the assumption that the solution is a bilinear function of the solution and instance features (Item 2) prescribes that "good" feature mappings should enable a simple (i.e., bilinear) expression for the cost function. In the sequel we see that this is satisfied by natural feature mappings for important classes of combinatorial problems._

**Remark 3** (Variance Preservation Assumption).: _In Item 3 (variance preservation) we require that the solution feature mapping has variance along every direction, i.e., the feature vectors corresponding to the solutions must be "spread-out" when the underlying solution generator is the uniform distribution. As we show, this assumption is crucial so that the gradients of the resulting optimization objective are not-vanishing, allowing for its efficient optimization._

We mention that various important combinatorial problems satisfy Assumption1. For instance, Assumption1 is satisfied by Max-Cut, Min-Cut, Max-\(k\)-CSP, Maximum-Weight-Bipartite-Matching and Traveling Salesman. We refer the reader to the upcoming Section2 for an explicit description of the structured feature mappings for these problems. Having discussed Assumption1, we are ready to state our main abstract result which resolves Question1.

**Theorem 1**.: _Consider a combinatorial problem with instance space \(\) that satisfies Assumption1. For any prior \(\) over \(\) and \(>0,\) there exists a family of solution generators \(=\{p(w):w\}\) with parameter space \(\) that is complete, compressed and, efficiently optimizable._

A sketch behind the design of the family \(\) can be found in Section3 and Section4.

**Remark 4** (Computational Barriers in Sampling).: _We note that the families of generative models (a.k.a., solution generators) that we provide have polynomial parameter complexity and are optimizable in a small number of steps using gradient-based methods. Hence, in a small number of iterations, gradient-based methods converge to distributions whose mass is concentrated on nearly optimal solutions. This holds, as we show, even for challenging (\(\)-hard) combinatorial problems. Our results do not, however, prove \(=\), as it may be computationally hard to sample from our generative models. We remark that while such approaches are in theory hard, such models seem to perform remarkably well experimentally where sampling is based on Langevin dynamics techniques . Though as our theory predicts, and simulations support, landscape problems seem to be a direct impediment even to obtain good approximate solutions._

[MISSING_PAGE_FAIL:5]

**Min-Cut and Max-Cut.** Min-Cut (resp. Max-Cut) are central graph combinatorial problems where the task is to split the nodes of the graph in two subsets so that the number of edges from one subset to the other (edges of the cut) is minimized (resp. maximized). Given a graph \(G\) with \(n\) nodes represented by its Laplacian matrix \(L_{G}=D-A\), where \(D\) is the diagonal degree matrix and \(A\) is the adjacency matrix of the graph, the goal in the Min-Cut (resp. Max-Cut) problem is to find a solution vector \(s\{ 1\}^{n}\) so that \(s^{}L_{G}s/4\) is minimized (resp. maximized).

We first show that there exist natural feature mappings so that the cost of every solution \(s\) under any instance/graph \(G\) is a bilinear function of the feature vectors, see Item 2 of Assumption 1. We consider the correlation-based feature mapping \(_{S}(s)=(ss^{})^{}^{n^{2}}\), where by \(()^{}\) we denote the vectorization/flattening operation and the Laplacian for the instance (graph), \(_{}(G)=(L_{G})^{}^{n^{2}}\). Then simply setting the matrix \(M\) to be the identity \(I^{n^{2} n^{2}}\) the cost of any solution \(s\) can be expressed as the bilinear function \(_{}(G)^{}M_{S}(s)=(L_{G}^{})^{}(ss^{})^{ }=s^{}L_{G}s\). We observe that for (unweighted) graphs with \(n\) nodes the description size of the family of all instances \(\) is roughly \(O(n^{2})\), and therefore the dimensions of the feature mappings \(_{S},_{}\) are clearly polynomial in the description size of \(\). Moreover, considering unweighted graphs, it holds that \(\|_{}(G)\|_{2},\|_{S}(s)\|_{2},\|M\|_{}(n)\). Therefore, the constants \(D_{S},D_{},C\) are polynomial in the description size of the instance family.

It remains to show that our solution feature mapping satisfies the variance preservation assumption, i.e., Item 3 in Assumption 1. A uniformly random solution vector \(s\{ 1\}^{n}\) is sampled by setting each \(s_{i}=1\) with probability \(1/2\) independently. In that case, we have \([v x]=0\) and therefore \((v x)=[(v x)^{2}]=_{i j}v_{i}v_{j}\, [x_{i}x_{j}]=_{i}v_{i}^{2}=\|v\|_{2}^{2}\), since, by the independence of \(x_{i},x_{j}\), the cross-terms of the sum vanish. We observe that the same hold true for the Max-Cut problem and therefore, structured feature mappings exist for Max-Cut as well (where \(L(s;G)=-s^{}L_{G}s\)). We shortly mention that there also exist structured feature mappings for Max-\(k\)-CSP. We refer to Theorem 4 for further details.

**Remark 6** (Partial Instance Information/Instance Context).: _We remark that Assumption 1 allows for the "instance" \(I\) to only contain partial information about the actual cost function. For example, consider the setting where each sampled instance is an unweighted graph \(G\) but the cost oracle takes the form \((G,s)=(L_{G})^{}M(ss^{})^{}\) for a matrix \(M_{ij}=a_{i}\) when \(i=j\) and \(M_{ij}=0\) otherwise. This cost function models having a **unknown weight function**, i.e., the weight of edge \(i\) of \(G\) is \(a_{i}\) if edge \(i\) exists in the observed instance \(G\), on the edges of the observed unweighted graph \(G\), that the algorithm has to learn in order to be able to find the minimum or maximum cut. For simplicity, in what follows, we will continue referring to \(I\) as the instance even though it may only contain partial information about the cost function of the underlying combinatorial problem._

**Maximum-Weight-Bipartite-Matching and TSP.** The Maximum-Weight-Bipartite-Matching (MWBP) problem is another graph problem that, given a bipartite graph \(G\) with \(n\) nodes and \(m\) edges, asks for the maximum-weight matching. The feature vector corresponding to a matching can be represented as a binary matrix \(R\{0,1\}^{n n}\) with \(_{j}R_{ij}=1\) for all \(i\) and \(_{i}R_{ij}=1\) for all \(j\), i.e., \(R\) is a permutation matrix. Therefore, for a candidate matching \(s\), we set \(_{S}(s)\) to be the matrix \(R\) defined above. Moreover, the feature vector of the graph is the (negative flattened) adjacency matrix \(E^{}\). The cost oracle is then \(L(R;E)=_{ij}E_{ij}M_{ij}R_{ij}\) perhaps for an unknown weight matrix \(M_{ij}\) (see Remark 6). For the Traveling Salesman Problem (TSP) the feature vector is again a matrix \(R\) with the additional constraint that \(R\) has to represent a single cycle (a tour over all cities). The cost function for TSP is again \(L(R;E)=_{ij}E_{ij}M_{ij}R_{ij}\). One can check that those representations of the instance and solution satisfy the assumptions of Items 1 and 4. Showing that the variance of those representations has a polynomial lower bound is more subtle and we refer the reader to the Supplementary Material.

We shortly mention that the solution generators for Min-Cut and Maximum-Weight-Bipartite-Matching are also efficiently samplable.

## 3 Optimization Landscape

Exponential Families as Solution Generators.A natural candidate to construct our family of solution generators is to consider the distribution that assigns to each solution \(s S\) and instance \(I\) mass proportional to its score \((- L(s;I))=(-_{}(I)^{}M_{S}(s))=(-  z^{}Mx)\)for some "temperature" parameter \(\), where \(_{}\) and \(_{S}\) are the feature mappings promised to exist due to Assumption1, \(z=_{}(I)\), and, \(x=_{S}(s)\). Note that as long as \(+\), this distribution tends to concentrate on solutions that achieve small loss.

**Remark 7**.: _To construct the above solution sampler one could artificially query specific solutions to the cost oracle of Definition1 and try to learn the cost matrix \(M\). However, we remark that our goal (see Definition2) is to show that we can train a parametric family via gradient-based methods so that it generates (approximately) optimal solutions and not to simply learn the cost matrix \(M\) via some other method and then use it to generate good solutions._

Obstacle I: Minimizers at Infinity.One could naturally consider the parametric family \((x;z;W)(z^{}Wx)\) (note that with \(W=- M\), we recover the distribution of the previous paragraph) and try to perform gradient-based methods on the loss (recall that \(L(x;z)=z^{}Mx\))1

\[(W)=}_{z}}_{x (;z;W)}[z^{}Mx]\,.\] (1)

The question is whether gradient updates on the parameter \(W\) eventually converge to a matrix \(\) whose associated distribution \(()\) generates near-optimal solutions (note that the matrix \(- M\) with \(+\) is such a solution). After computing the gradient of \(\), we observe that

\[_{W}(W) M=}_{z,x (;z;W)}[z^{}Mx] 0\,,\]

where the inner product between two matrices \(A B\) is the trace \((A^{}B)=_{i,j}A_{ij}B_{ij}\). This means that the gradient field of \(\) always has a contribution to the direction of \(M\). Nevertheless the actual minimizer is at infinity, i.e., it corresponds to the point \(=- M\) when \(+\). While the correlation with the optimal point is positive (which is encouraging), having such contribution to this direction is not a sufficient condition for actually reaching \(\). The objective has vanishing gradients at infinity and gradient descent may get trapped in sub-optimal stationary points, see the left plot in Figure1.

Solution I: Quasar Convexity via Entropy Regularization.Our plan is to try and make the objective landscape more benign by adding an entropy-regularizer. Instead of trying to make the objective convex (which may be too much to ask in the first place) _we are able obtain a much better landscape with a finite global minimizer and a gradient field that guides gradient descent to the minimizer._ Those properties are described by the so-called class of "quasar-convex" functions. Quasar convexity (or weak quasi-convexity ) is a well-studied notion in optimization  and can be considered as a high-dimensional generalization of unimodality.

Figure 1: In the **left** plot, we show the landscape of the “vanilla” objective of Eq.(1) for the feature domain \(X=\{(1,0),(2,2),(0,2)\}\) and linear cost oracle \(c x\) for \(c=(-3,-3)\). We see that the “vanilla” objective is minimized at the direction of \(-c\), i.e., along the direction \((1,1)\) for \(+\). We observe the two issues described in Section3, i.e., that the true minimizer is a point at infinity, and that gradients vanish so gradient descent may get trapped in sub-optimal solutions, (e.g., in the upper-right corner if initialized in the top corner). In the **middle** plot, we show the landscape of the entropy-regularized objective of Eq.(3) that makes the minimizer finite and brings it closer to the origin. Observe that even if a gradient iteration is initialized in the top corner it will eventually converge to the minimizer; however the rate of convergence may be very slow. The **right** plot corresponds to the loss objective where we combine a mixture of exponential families as solution generator, as in Eq.(5), and the entropy regularization approach. We observe that we are able to obtain a benign (quasar-convex) landscape via the entropy regularization while the mixture-generator guarantees non-vanishing gradients.

**Definition 3** (Quasar Convexity ).: _Let \((0,1]\) and let \(\) be a minimizer of the differentiable function \(f:^{n}\). The function \(f\) is \(\)**-quasar-convex** with respect to \(\) on a domain \(D^{n}\) if for all \(x D\), \( f(x)(x-)(f(x)-f())\)._

In the above definition, notice that the main property that we need to establish is that the gradient field of our objective correlates positively with the direction \(W-\), where \(\) is its minimizer. We denote by \(H:\) the negative entropy of \((W)\), i.e.,

\[H(W)=}_{z}}_{x(:z ;W)}[(x;z;W)]\,,\] (2)

and consider the _regularized_ objective

\[_{}(W)=(W)+ H(W)\,,\] (3)

for some \(>0\). We show (follows from Lemma4) that the gradient-field of the regularized objective indeed "points" towards a finite minimizer (the matrix \(=-M/\)):

\[_{W}_{}(W)(W+M/)=\] \[[z^{}(W+M/)x] 0\,,\] (4)

where the randomness is over \(z,x(;z;W)\). Observe that now the minimizer of \(_{}\) is the point \(-M/\), which for \(=(,,1/C,1/D_{S},1/D_{T})\) (these are the parameters of Assumption1) is promised to yield a solution sampler that generates \(\)-sub-optimal solutions (see also Proposition2 and AppendixC). Having the property of Equation4 suffices for showing that a gradient descent iteration (with an appropriately small step-size) will _eventually_ converge to the minimizer.

Obstacle II: Vanishing Gradients.While we have established that the gradient field of the regularized objective "points" towards the right direction, the regularized objective still suffers from vanishing gradients, see the middle plot in Figure1. In other words, \(\) in the definition of quasar convexity (Definition3) may be exponentially small, as it is proportional to the variance of the random variable \(z^{}(W+M/)x\), see Equation4. As we see in the middle plot of Figure1, the main issue is the vanishing gradient when \(W\) gets closer to the minimizer \(-M/\) (towards the front-corner). For simplicity, consider the variance along the direction of \(W\), i.e., \([z^{}Wx]\) and recall that \(x\) is generated by the density \((z^{}Wx)/(_{x X}(z^{}Wx))\). When \(\|W\|_{2}+\) we observe that the value \(z^{}Wx\) concentrates exponentially fast to \(_{x X}z^{}Wx\) (think of the convergence of the soft-max to the max function). Therefore, the variance \([z^{}Wx]\) may vanish exponentially fast making the convergence of gradient descent slow.

Solution II: Non-Vanishing Gradients via Fast/Slow Mixture Generators.We propose a fix to the vanishing gradients issue by using a mixture of exponential families as a solution generator. We define the family of solution generators \(=\{p(W):W\}\) to be

\[=\{(1-^{})(W)+^{}(^{}W):W \}\,\] (5)

for a (fixed) mixing parameter \(^{}\) and a (fixed) temperature parameter \(^{}\). The main idea is to have the first component of the mixture to converge fast to the optimal solution (to \(-M/\)) while the second "slow" component that has parameter \(^{}W\) stays closer to the uniform distribution over solutions that guarantees non-trivial variance (and therefore non-vanishing gradients).

More precisely, taking \(^{}\) to be sufficiently small, the distribution \((^{}W)\) is _almost uniform_ over the solution space \(_{S}(S)\). Therefore, in Equation4, the almost uniform distribution component of the mixture will add to the variance and allow us to show a lower bound. This is where Item3 of Assumption1 comes into play and gives us the desired non-trivial variance lower bound under the uniform distribution. We view this fast/slow mixture technique as an interesting insight of our work: we use the "fast" component (the one with parameter \(W\)) to actually reach the optimal solution \(-M/\) and and we use the "slow" component (the one with parameter \(^{}W\) that essentially generates random solutions) to preserve a non-trivial variance lower bound during optimization.

## 4 Complete, Compressed and Efficiently Optimizable Solution Generators

In this section, we discuss the main results that imply Theorem1: the family \(\) of Equation5 is complete, compressed and efficiently optimizable (for some choice of \(^{},^{}\) and \(\)).

**Completeness.** First, we show that the family of solution generators of Equation (5) is complete. For the proof, we refer to Proposition 2 in Appendix C. At a high-level, we to pick \(^{}\), \(^{}\) to be of order \((,,1/C,1/D_{S},1/D_{})\). This yields that the matrix \(=-M/\) is such that \(()+\), where \(M\) is the matrix of Item 2 in Assumption 1 and \(\) is \((/[])\). To give some intuition about this choice of matrix, let us see how \(()\) behaves. By definition, we have that

\[()=}{)}{}}[z^{}Mx]\,,\]

where the distribution \(p\) belongs to the family of Equation (5), i.e., \(p()=(1-^{})()+^{}(^{ }W)\). Since the mixing weight \(^{}\) is small, we have that \(p()\) is approximately equal to \(()\). This means that our solution generator draws samples from the distribution whose mass at \(x\) given instance \(z\) is proportional to \((-z^{}Mx/)\) and, since \(>0\) is very small, the distribution concentrates to solutions \(x\) that tend to minimize the objective \(z^{}Mx\). This is the reason why \(=-M/\) is close to \(\) in the sense that \(()+\).

**Compression.** As a second step, we show (in Proposition 3, see Appendix D) that \(\) is a compressed family of solution generators. This result follows immediately from the structure of Equation (5) (observe that \(W\) has \(n_{X}\)\(n_{Z}\) parameters) and the boundedness of \(=-M/\).

**Efficiently Optimizable.** The proof of this result essentially corresponds to the discussion provided in Section 3. Our main structural result shows that the landscape of the regularized objective with the fast/slow mixture solution-generator is quasar convex. More precisely, we consider the following objective:

\[_{}(W)=}{}}[z^{}Mx]+ R(W)\,,\] (1)

where \(p(W)\) belongs in the family \(\) of Equation (5) and \(R\) is a weighted sum of two negative entropy regularizers (to be in accordance with the mixture structure of \(\)), i.e., \(R(W)=(1-^{})H(W)+^{}/^{}H(^{}W)\). Our main structural results follows (for the proof, see Appendix E.1).

**Proposition 1** (Quasar Convexity).: _Consider \(>0\) and a prior \(\) over \(\). Assume that Assumption 1 holds. The function \(_{}\) of Equation (1) with domain \(\) is \((,,1/C,1/D_{S},1/D_{})\)-quasar convex with respect to \(-M/\) on the domain \(\)._

Since \(^{}\) is small (by Proposition 2), \(H(^{}W)\) is essentially constant and close in value to the negative entropy of the uniform distribution. Hence, the effect of \(R(W)\) during optimization is essentially the same as that of \(H(W)\) (since \(^{}\) is close to 0). We show that \(_{}\) is quasar convex with a non-trivial parameter \(\) (see Proposition 1). We can then apply (in a black-box manner) the convergence results from  to optimize it using projected SGD. We show that SGD finds a weight matrix \(\) such that the solution generator \(p()\) generates solutions achieving actual loss \(\) close to that of the near optimal matrix \(=-M/\), i.e., \(()()+\). For further details, see Appendix E.3.

## 5 Experimental Evaluation

In this section, we investigate experimentally the effect of our main theoretical contributions, the entropy regularizer (see Equation (2)) and the fast/slow mixture scheme (see Equation (5)). We try to find the Max-Cut of a fixed graph \(G\), i.e., the support of the prior \(\) is a single graph. Similarly to our theoretical results, our sampler is of the form \(e^{(s;w)}\), where \(s\{-1,1\}^{n}\) (here \(n\) is the number of nodes in the graph) is a candidate solution of the Max-Cut problem. For the score function we used a simple linear layer (left plot of Figure 2) and a 3-layer ReLU network (right plot of Figure 2).

Small Graph Instances.Focusing on instances where the number of nodes \(n\) is small (say \(n=15\)), we can explicitly compute the density function and work with an _exact_ sampler. We generate 100 random \(G(n,p)\) graphs with \(n=15\) nodes and \(p=0.5\) and train solution generators using both the "vanilla" loss \(\) and the entropy-regularized loss \(_{}\) with the fast/slow mixture scheme. We perform 600 iterations and, for the entropy regularization, we progressively decrease the regularization weight, starting from 10, and dividing it by \(2\) every 60 iterations. Out of the 100 trials we found that our proposed objective was always able to find the optimal cut while the model trained with the vanilla loss was able to find it for approximately \(65\%\) of the graphs (for 65 out of 100 using the linear network and for 66 using the ReLU network).

Hence, our experiments demonstrate that while the unregularized objective is often "stuck" at sub-optimal solutions - and this happens even for very small instances (\(n=\)15 nodes) - of the Max-Cut problem, the objective motivated by our theoretical results is able to find the optimal solutions. For further details, see Appendix I.

Large Graph Instances.A natural question is whether this improvement is also apparent in larger graphs. We focus on the case of random \(d\)-regular graphs with \(n\) nodes. It is well-known that for this family of graphs, with high probability as \(n\), the size of the maximum cut satisfies \((G(n,d))=n(d/4+P_{}+o_{d}())+o(n)\), where \(P_{} 0.7632\) is a universal constant . We aim to find a good approximation for the normalized cut-value, defined as \((/n-d/4)/\), which (roughly speaking) takes values in \([0,P_{}]\). We obtain approximate random samples from the density \(e^{f}\) using the Metropolis-Adjusted Langevin Algorithm (MALA). In particular, an approximate sample from this density is obtained by the Euler-Maruyama method for simulating the Langevin diffusion: \(x_{k+1}=x_{k}+ f(x_{k})+_{k}\), where \(_{k}\) is an independent Gaussian vector \((0,I)\). MALA incorporates an additional step based on the Metropolis-Hastings algorithm (see ). In our case, the score function \(f\) is a simple 3-layer ReLU network. In our experiments for 3 larger random regular graphs (600 nodes) using the fast/slow mixing technique along entropy regularization we see that our method leads to improvements over the vanilla objective. Plots of the trajectories of the vanilla and our method can be found in Figure 3. In the horizontal axis we plot the iterations and in the vertical axis we plot the normalized cut score of each method (higher is better) - we stop the plot of the vanilla trajectory after 200 iterations because we observed that its output has fully converged and is stuck.

Figure 3: Plot of the Max-Cut value trajectory of the “vanilla” objective and entropy-regularized objective with the slow/fast mixture scheme on large instances. On the horizontal axis we plot the number of iterations and on the vertical axis we plot the achieved value of the normalized cut-value. The 3 graphs used were random \(G(n,p)\) graphs generated with \(n=600\) nodes and edge probability \(p=0.5\). We stop the plot of the vanilla trajectory after 200 iterations because we observed that its output has fully converged and is stuck.

Figure 2: Plot of the Max-Cut value trajectory of the “vanilla” objective and entropy-regularized objective with the slow/fast mixture scheme. We remark that we plot the value of the cut of each iteration (and not the value of the regularized-loss). On the horizontal axis we plot the number of iterations and on the vertical axis we plot the achieved value of the cut. Both graphs used were random \(G(n,p)\) graphs generated with \(n=15\) nodes and edge probabilitty \(p=0.5\). For the left plot we used a linear network (the same exponential family as the one used in our theoretical results). For the right plot we used a simple \(3\)-Layer ReLU network to generate the scores. We observe that the “vanilla” loss gets stuck on sub-optimal solutions.