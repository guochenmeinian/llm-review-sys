# SSA-Seg: Semantic and Spatial Adaptive Pixel-level Classifier for Semantic Segmentation

Xiaowen Ma\({}^{1,2}\)1, Zhenliang Ni\({}^{1}\)1, Xinghao Chen\({}^{1}\)2

\({}^{1}\)Huawei Noah's Ark Lab \({}^{2}\)Zhejiang University

https://github.com/xwmaxwma/SSA-Seg

Equal contribution, \(\) Corresponding author.

###### Abstract

Vanilla pixel-level classifiers for semantic segmentation are based on a certain paradigm, involving the inner product of fixed prototypes obtained from the training set and pixel features in the test image. This approach, however, encounters significant limitations, _i.e._, feature deviation in the semantic domain and information loss in the spatial domain. The former struggles with large intra-class variance among pixel features from different images, while the latter fails to utilize the structured information of semantic objects effectively. This leads to blurred mask boundaries as well as a deficiency of fine-grained recognition capability. In this paper, we propose a novel Semantic and Spatial Adaptive Classifier (SSA-Seg) to address the above challenges. Specifically, we employ the coarse masks obtained from the fixed prototypes as a guide to adjust the fixed prototype towards the center of the semantic and spatial domains in the test image. The adapted prototypes in semantic and spatial domains are then simultaneously considered to accomplish classification decisions. In addition, we propose an online multi-domain distillation learning strategy to improve the adaption process. Experimental results on three publicly available benchmarks show that the proposed SSA-Seg significantly improves the segmentation performance of the baseline models with only a minimal increase in computational cost.

## 1 Introduction

Semantic segmentation, as a fundamental task in computer vision, aims at assigning a category label to each pixel in a given image and is widely used in various domains such as autonomous driving , industrial detection , satellite image analysis  and smart city . Mainstream methods, such as FCN , DeepLab , PSPNet , and SegNeXt  mainly use parametric softmax to classify each pixel. In recent developments, transformer-based approaches like MaskFormer , Mask2Former , and SegViT  classify masks by directly learning query vectors, termed as mask-level classification. However, these mask-level classification models often require heavyweight cross-attention decoders, which limit their deployment in resource-constrained scenarios .

Vanilla parametric softmax uses the convolutional kernel weights as the fixed semantic prototypes and obtains segmentation masks by computing the inner product of the pixel features and the prototypes. However, this pixel-level classification method has two obvious drawbacks: (1) _feature deviation in the semantic domain_. Due to complex backgrounds and varying object distributions, pixel features in the test images tend to have a large intra-class variance with pixel features in the training set. However, the fixed semantic prototypes, representing the semantic feature distribution on the training set, will be far away from the pixel features of the corresponding class when applied to the test image, as shown in Fig. 1(b). (2) _information loss in the spatial domain_. The vanilla pixel-level classifiers only performinner products of fixed prototypes and pixel features in the semantic domain, and lack modeling of the relationship between prototypes and pixel features in the spatial domain. Therefore, the explicit structural information of target objects is not fully utilized, leading to suboptimal segmentation of border regions and small targets.

Recent studies [62; 28; 46] have improved the parametric softmax classifier. ProtoSeg  proposes a nonparametric prototype to replace the standard classifier. Through prototype-based metric learning, they enhanced the construction of pixel embedding space. GMMSeg  models the joint distribution of pixels and categories and learns the Gaussian mixture classifier in the pixel feature space by using the EM algorithm. However, these methods still rely on fixed prototype classifiers, when confronted with varying data distributions on test images, the problem of feature deviation in the semantic domain still exists. Besides, the Context-aware Classifier (CAC)  is proposed, which is a dynamic classifier by utilizes contextual cues. It adaptively adjusts classification prototypes based on feature content and thus can alleviate the feature deviation in the semantic domain problem to some extent. However, due to the lack of constraints on semantic prototypes, the offset of the fixed prototype is not controllable. In extreme cases, the offset will even be in the direction away from the semantic features of the image. Besides, these works ignore modeling the relationship between prototype and pixel features in the spatial domain, which limits further improvements in model performance.

To address the above issues, a Semantic and Spatial Adaptive Classifier (SSA-Seg) is proposed, which solves the above two problems by facilitating the offset of the fixed prototype towards the center of the semantic domain and the center of the spatial domain of the test image, as shown in Fig. 1(c) and (d). Note that the semantic domain center of each class is the mean semantic features belonging to this class, and similar concepts such as class center also appear in [56; 21]. Similarly, the center of the spatial domain is the mean spatial features belonging to the class. Specifically, we retain the original \(1 1\) convolution to obtain a coarse mask. Besides, position embedding is applied to the output features to obtain the spatial information. Then, the coarse mask is applied as the guide to obtain the semantic domain center and spatial domain center in each sample, which is then processed to obtain adaptive semantic and spatial prototypes. Finally, classification decisions are made by simultaneously considering prototypes in the semantic and spatial domains.

In addition, ground truth can be used to improve classifier performance . Therefore, a training-only teacher classifier is designed to introduce ground truth information for calibrating the primary classifier. Specifically, we design multi-domain knowledge distillation to enhance the primary classifier from different domains. First, the response domain distillation method distills the outputs of the two classifiers based on a boundary-aware and category-aware distillation loss, which conveys accurate semantic and structural information in the ground truth. Then, semantic domain distillation and spatial domain distillation are used to constrain the offset of the prototype. In this way, multi-domain distillation improves the feature representation of the primary classifier, which significantly improves the test performance.

The proposed method significantly improves the segmentation performance of the baseline model with a very small increase in computational cost on three commonly used datasets: ADE20k, PASCAL-Context, and COCO-stuff-10K. Furthermore, compared to other advanced classifiers

Figure 1: A example of vanilla pixel-level classifiers, where the SeaFormer-L.  is the baseline and the feature distribution is visualized with t-SNE. (a) is a test image of the ADE20K dataset, and (b) denotes the feature distributions in the semantic domain of (a), with purple and gray dots denoting the pixel features on the test image of the door and other categories, respectively. Blue star denotes the fixed prototype trained on training set of the door category. It shows that vanilla pixel-level classifiers directly interact pixel features with the fixed semantic prototypes, which leads to feature deviation in the semantic domain and information loss in the spatial domain problems. In contrast, SSA-Seg makes classification decisions based on adaptive semantic and spatial prototypes by prompting the prototypes to offset toward the center of the semantic domain and the spatial domain, as shown in (c) and (d). Visual comparison of the baseline and SSA-Seg can be found in Fig. 5.

such as GMMSeg  and CAC , our SSA-Seg achieves significant performance improvement on several baseline methods. In particular, by applying SSA-Seg, we achieve the state-of-the-art lightweight segmentation performance. Specially, SeaFormer-L  obtain 45.36\(\%\) mIoU on ADE20k with only 0.1G more FLOPs and 0.5ms more latency. Simarlily, SegNext-T  obtain 38.91\(\%\) mIoU on COCO-stuff-10K and 52.58\(\%\) mIoU on PASCAL-Context dataset.

## 2 Related Work

### Semantic Segmentation

Semantic segmentation is one of the basic tasks in computer vision, whose goal is to assign a category to each pixel in an image. The existing semantic segmentation methods can be divided into two categories: pixel-level classification model [34; 54; 45; 57; 14; 17] and mask-level classification model [10; 9; 55; 18; 31; 51]. Since Fully Convolutional Networks (FCNs) , pixel-level classification has been the mainstream semantic segmentation method. Subsequent works focus on optimizing backbone extraction features [17; 45; 8; 52; 33; 53; 50], or improving the decode head for context modeling [37; 36; 59; 6; 15; 22; 54; 24; 29].

Recently, mask-level classification models have become popular, which learn object queries to classify masks without classifying each pixel. MaskFormer  first proposes to use mask classification for semantic segmentation tasks, which is inspired by . Mask2Former  optimizes MaskFormer  by constraining cross-attention within the predicted masked region to extract local features. SegViT  proposes to apply the mask classifier to plain vision transformers. However, mask-level classification models often have high computational complexity due to the need for multiple cross-attention to update the query, and their application fields are limited. Pixel-level classification model, as the mainstream method, has a wide range of application fields. Therefore, we rethink pixel-level classifiers to improve the performance of pixel-level classification.

### Pixel-level Classifier

The current mainstream Pixel-level classifier is essentially a discriminant classification model based on softmax. The potential data distribution is completely ignored, which limits the expressive ability of the model. Recently, some works [62; 28; 44] have improved the softmax classifier to improve the segmentation performance. ProtoSeg  proposes a non-parametric prototype to replace the standard classifier. Through prototype-based metric learning, the construction of pixel embedding space is better. GMMSeg  models the joint distribution of pixels and categories and learns the Gaussian mixture classifier in the pixel feature space by using the EM algorithm. It can capture the pixel feature distribution of each category in fine detail by using the generator pattern. Context-aware classifer  extracts the context based on the input to generate a sample adaptive classifier. However, none of these methods use position embedding to improve the classifier. Our classifier can sense both semantic and spatial information, to make more accurate classification decisions.

## 3 Method

### Preliminary: Vanilla Pixel-level Classifier

We first review the architecture of the vanilla pixel-level classifier for semantic segmentation. For an input image \(\), the features are first extracted by backbone and processed by decode head to obtain the output features \(_{f}^{H W D}\), where \(H\), \(W\), \(D\) denote the height, width, and channel of the feature map, respectively. The current mainstream strategy uses a fixed prototype classifier, _i.e._, a simple \(1 1\) convolution maps feature to the category space:

\[_{c}=_{f}^{T},\] (1)

where \(_{c}^{H W K}\) denotes the segmentation mask, \(^{K D}\) denotes the weights of \(1 1\) convolution kernel, \(\) denotes matrix multiplication and \(K\) is the number of category.

The above scheme essentially treats the convolutional kernel weights as fixed semantic prototypes and obtains segmentation masks based on the inner product with pixel features in the semantic domain. Therefore, the two questions of _feature deviation in the semantic domain_ and _information loss in the spatial domain_, which have been described before, are to be solved.

### Semantic and Spatial Adaptive Classifier

Based on the above analysis in Section 3.1, we propose a novel Semantic and Spatial Adaptive Classifier (SSA-Seg), as shown in Fig. 2. The proposed SSA-Seg consists of three parts: semantic prototype adaptation, spatial prototype adaptation, and online multi-domain distillation.

Specifically, for the semantic features \(_{f}\) output from the backbone and the decode head, we retain the original \(1 1\) convolution operation to generate the coarse mask \(_{c}\). Next, we obtain the spatial features \(_{f}\) from the semantic features \(_{f}\). Guided by \(_{c}\), we integrate the semantic and spatial features of each category to obtain the centers of the corresponding semantic and spatial domains, _i.e._, \(_{c}\) and \(_{c}\). Then, we fuse \(_{c}\), \(_{c}\) with the fixed semantic prototypes \(\) and prototype position basis \(\), respectively, to generate adaptive semantic prototypes \(_{p}\) and spatial prototypes \(_{p}\). Finally, we modify Eq. 1 to make more accurate classification decisions,

\[_{c}=(_{f}_{f})(_{p} _{p})^{T},\] (2)

where \(\) denotes element-wise summation. In addition, we introduce a teacher classifier and an online multi-domain distillation strategy to improve the performance of SSA-Seg. The teacher classifier has the same structure as the primary classifier, except that the coarse mask \(_{c}\) is replaced by the ground-truth mask \(_{g}\), as shown in Fig. 2. Therefore, the teacher classifier can output more accurate semantic prototypes \(}_{p}\), spatial prototypes \(}_{p}\) and segmentation masks \(}\). These outputs can be used as soft labels to constrain the adaptation process of prototypes through online multi-domain distillation, which consists of response domain distillation loss \(_{rd}\), semantic domain distillation loss \(_{sd}\), and spatial domain distillation loss \(_{pd}\). Therefore, the training loss \(\) is,

\[=_{c}+_{g}+_{r}_{rd}+ _{s}_{sd}+_{p}_{pd},\] (3)

where \(_{c}=_{ce}^{c}+_{dice}^{c}\), \(_{g}=_{ce}^{g}+_{dice}^{g}\), \(_{ce}^{c}\) and \(_{ce}^{g}\) denote cross-entropy loss for \(\) and \(}\), respectively. Similarly, \(_{dice}^{c}\) and \(_{dice}^{g}\) denote dice loss  for \(\) and \(}\), respectively.

#### 3.2.1 Semantic Prototype Adaptation.

Previous work  utilizes additional contextual cues to offset the fixed prototypes and thus adapt to the semantic feature distributions of different images, alleviating the feature deviation in the semantic domain problem to some extent. However, due to the lack of constraints, the offset of the fixed prototype is not controllable. In extreme cases, the offset will even be in the direction away from the semantic features (An example visualization can be found in Fig. 6.). Therefore, we propose SEmantic Prototype Adaptation (SEPA), which offsets fixed semantic prototypes based on coarse mask-guided semantic feature distributions, and constrains the adaptive semantic prototype \(_{p}\) with semantic domain distillation.

Figure 2: SSA-Seg overview. For the semantic features \(_{f}\) output from the backbone and decode head, we first generate spatial features \(_{f}\) by position encode. Then we retain the original \(1 1\) convolution to generate the coarse mask \(_{c}\). Guided by \(_{c}\), we generate the center of the semantic domain and spatial domain in the pre-classified representations and fused them with the fixed semantic prototypes \(\) and the prototype position basis \(\) to generate the semantic prototypes \(_{p}\) and the spatial prototype \(_{p}\). Finally, we consider simultaneously semantic and spatial prototypes to perform classification decisions. The right figure shows an online teacher classifier only for training, where the coarse mask is replaced with ground-truth mask to participate in model training, and constrains the prototype adaption and transfer accurate semantic and spatial knowledge to the primary classifier based on multi-domain distillation learning.

Specifically, we first multiply the semantic features \(_{f}\) and the coarse mask \(_{c}\) to obtain the semantic domain center \(_{c}\), _i.e._, \(_{c}=_{K}(_{c})_{f}\), where \(_{c}^{K D}\) denotes the average features of all pixel features belonging to different classes of the coarse mask-guided pre-classified representations. We then concatenate \(_{c}\) with the fixed prototype \(\), and fuse them through a \(1 1\) convolution layer \(_{s}\) to obtain the adaptive semantic prototype \(_{p}^{K D}\),

\[_{p}=_{s}(_{c}),\] (4)

where \(\) denotes channel concatenation operation. With the above operation and the constraint of semantic domain distillation loss, the fixed prototype offsets towards the semantic feature distribution of the test image. As a result, the pixel features possess higher similarity to the semantic prototypes of the corresponding categories, which promotes more pixels to be correctly categorized.

#### 3.2.2 Spatial Prototype Adaptation.

Previous classifiers [34; 28; 62] are mainly based on the inner product of pixel features and prototypes in the semantic domain, without utilizing the rich spatial information of the image. However, most of the target objects in semantic segmentation tasks possess regular shapes, such as doors, windows, and roads. Modeling the spatial relations of pixel and prototype can introduce structured information about the target objects, thus improving the segmentation performance for boundary regions and small targets. Therefore, we introduce spatial prototype adaptation (SPPA), which aims to make classification decisions with additional consideration of the spatial relation between pixel features and prototypes.

We first obtain the spatial features \(_{f}^{H W D}\) with position encoding of the pixel features \(_{f}\), _i.e._, \(_{f}=(_{f})\). Here we choose conditional position encoding , which is useful for encoding neighborhood information to further localize the mask region. Similarly, we perform matrix multiplication based on the coarse mask with the feature position coding to obtain \(_{c}\),

\[_{c}=_{HW}(_{c})_{f},\] (5)

where \(_{c}^{K D}\) denotes the spatial domain center of the coarse mask-guided pre-classified representations. Note that here we implement the softmax function for \(_{c}\) in spatial dimensions, which facilitates modeling the spatial distribution of the different categories and thus the spatial location of the category prototypes on the image.

In addition, only a few categories appear on the image in most cases. Therefore, only the positions of the corresponding categories in the \(_{c}\) have practical significance. In order to maintain the stability of training, we define a randomly initialized position basis \(^{K D}\) and concatenate it with \(_{c}\) to obtain the spatial prototype \(_{p}^{K D}\), after mapping with a \(1 1\) convolution layer \(_{p}\),

\[_{p}=_{p}(_{c}).\] (6)

Similarly, based on the above operation and the constraint of spatial domain distillation loss, the prototype position basis is offset towards the center of the mask region for each class of the test image, thus generating the spatial prototype \(_{p}\). Therefore, the spatial relationship of the pixel features with the prototype can be taken into account when making the classification decision, which improves the segmentation performance of the boundaries and the small target regions. This is verified by the qualitative and quantitative analysis in Section 4.2.

#### 3.2.3 Online Multi-Domain Distillation Learning.

Although semantic and spatial domain adaptations can motivate better interaction of prototypes with pixel features, the offset of semantic and spatial prototypes is not controllable due to the lack of constraint, which affects the segmentation performance of the model. In this paper, we propose an online multi-domain distillation learning to optimize the process of feature generation and constrain the adaptation of the semantic and spatial prototype.

Specifically, different from the previous widely adopted offline distillation learning method [30; 42; 47; 58; 23], we incorporate ground truth directly into the model training process  and construct soft labels, which can convey useful information to the model and do not require the additional process of training teacher models. As shown in Fig. 2, we first create a new branch with pixel features \(_{f}\) as inputs and use the ground truth \(_{g}\) to guide the adaption process of semantic and spatial prototypes, which generates the semantic prototype \(}_{p}\), spatial prototype \(}_{p}\), and segmentation mask \(}\). \(}_{p}\), \(}_{p}\), and \(}\) are used as the online teachers to distillate \(_{p}\), \(_{p}\), and \(\), respectively.

**Response Domain Distillation.** The ground truth guided segmentation mask \(}\) has a higher entropy value compared to the one-hot label, which can provide more information to the model. We first give the expression for the original response domain distillation learning,

\[_{rd}^{i}=-_{j=1}^{K}(})^{i,j} log( (^{i,j})),_{rd}=_{i=1}^{HW} _{rd}^{i},\] (7)

where \(\) denotes the Softmax function along the channel dimension. However, the original expression averages the distillation loss for pixels at all spatial locations, which results in the spatial structural information of the object and the semantic information of a few sample categories being masked by pixels at other locations. Therefore, we design a boundary-aware and category-aware distillation loss to induce the transfer of semantic and spatial information from \(}\) to the prediction masks \(\).

Specifically, we first obtain the semantic mask \(\) via \(_{g}\). We then use the Canny operation to extract the boundary of \(\) and obtain the boundary mask \(\). Based on \(\) and \(\), we modify Eq. 7,

\[_{rd}=_{k=1}^{K}(^{HW}_ {rd}^{i}_{k}^{i}}{_{i=1}^{HW}_{k}^{i}}+^{HW}_{rd}^{i}}_{k}^{i}}{_{i=1}^ {HW}}_{k}^{i}}),\] (8)

where \(_{k}=_{k}\) denotes the boundary mask of class \(k\), and \(}_{k}\) denotes the non-boundary mask of class \(k\). Finally, we retain the entropy aware of  in order to adjust the contribution of each element according to the level of information,

\[_{rd}=_{k=1}^{K}(^{HW}_ {rd}^{i}_{k}^{i}^{i}}{_{i=1}^{HW}_{k}^{ i}^{i}}+^{HW}_{rd}^{i}}_{k} ^{i}^{i}}{_{i=1}^{HW}}_{k}^{i}^{i}} ),^{i}=-_{j=1}^{K}(})^{i,j} log( (}^{i,j}))\] (9)

where \(^{i}\) denotes the entropy of the i-th pixel prediction of \(}\).

**Semantic Domain Distillation.** We propose the semantic domain distillation loss \(_{sd}\) to guide the offset process of semantic prototypes. As shown in Fig. 3 (a) and (b), the ground truth guided semantic prototype \(}_{p}\) exhibits better inter-class separation properties compared to the \(_{p}\). In fact, the inter-class separation properties are critical for optimizing the feature embedding space and making classification decisions. Previous work  focuses on constraining inter-class relationships to be identical, which is difficult to train and leads to poor generalization. Intuitively, for inter-class relationships, we only need to constrain the closer classes in the student model to be farther away. For those classes that are further away compared to the teacher model, we do not need to negatively supervise them. Specifically, we first compute the inter-class similarity matrix of semantic prototypes,

\[=(_{p}_{p}^{T}),}= (}_{p}_{p}^{T}).\] (10)

Then, the difference between \(^{K K}\) and \(}^{K K}\) is calculated as,

\[_{d}=(-}),\] (11)

where \(\) is a mask operation that sets the value of both the diagonal position and the position less than zero to zero. Finally, we compute the semantic domain distillation loss \(_{sd}\),

\[_{sd}=_{i=1}^{K}_{j=1}^{K}_{d}^{i,j}.\] (12)

Figure 3: Visualization of the inter-class relation matrix for the semantic prototypes \(_{p}\) and \(}_{p}\), and the latter possesses better inter-class separability. This motivates us to add semantic domain distillation loss to constrain the adaption of the semantic prototypes. The results show that after semantic domain distillation, the semantic prototypes have better separability, which facilitates category recognition.

Note that \(}_{p}\) in Eq. 10 is obtained based on the average semantic domain center of all training images in a batch. It can be used to minimize the negative impact of noisy images and accelerate model convergence.

With semantic domain distillation, the semantic prototype \(_{p}\) exhibits similar separability to \(}_{p}\), which facilitates the recognition of categories, as shown in Fig. 3 (c) and (d).

**Spatial Domain Distillation.** Unlike semantic domain distillation, since spatial domain distillation focuses on the spatial structure information of an object, we tend to constrain the spatial prototypes guided by the rough mask to be equal to the spatial prototypes guided by the ground-truth mask,

\[_{pd}=_{i=1}^{K}_{j=1}^{D}(_{p})^ {i,j} log((}_{p}^{i,j})).\] (13)

## 4 Experiments

We perform experiments on the ADE20K , PASCAL-Context  and COCO-Stuff-10K  datasets. We use MMSegmentation  and follow the common training settings. Please refer to the Appendix for more details.

### Main Results

**Efficiency Comparison.** We first focus on the efficiency changes introduced by SSA-Seg, as shown in Table 1. It can be observed that the additional FLOPs and latency introduced by SSA-Seg is negligible for methods of different sizes. For example, for general semantic segmentation methods such as ViT-Adapter-L, we only increase latency by 0.56% and flops by 0.03%, while for lightweight methods such as SeaFormer-L, we only increase latency by 1.70% and flops by 0.78%. It can be attributed to the fact that we add only a depth-wise convolution and some \(1 1\) convolutions to the primary classifier without changing the backbone and segmentation head. Therefore, the increased memory consumption, FLOPs and latency of SSA-Seg are negligible compared to the original model.

**Performance on state-of-the-art general methods.** As shown in Table 1, the proposed SSA-Seg can significantly improve the segmentation performance of various general models with negligible decrease in efficiency. For example, the application of SSA-Seg on UperNet-Swin-Tiny and ViT-Adapter-L bring 3.42\(\%\) and 1.01\(\%\) mIoU performance improvements on ADE20K dataset, respectively.

    &  &  &  &  &  &  \\  & & & FLOPs & mIoU & FLOPs & mIoU & FLOPs & mIoU \\   OCRNet  & HRNet-W48 & 67.2 & 8.6 & 164.8 & 43.30 & 164.8 & 36.16 & 143.2 & 48.22 \\
**+SSA-Seg** & & 69.3 & 8.7 & 165.0 & **47.47\({}_{11.77}\)** & 165.0 & **37.94\({}_{1.78}\)** & 143.3 & **50.21\({}_{1.78}\)** \\  UperNet  & Swin-T & 52.8 & 60.0 & 236.1 & 44.14 & 26.1 & 38.93 & 207.5 & 51.93 \\
**+SSA-Seg** & & 54.3 & 61.1 & 236.3 & **47.56\({}_{1.72}\)** & 236.3 & **42.30\({}_{1.75}\)** & 207.7 & **54.91\({}_{1.75}\)** \\  SegFormer  &  & 69.0 & 82.0 & 52.5 & 49.13 & 52.5 & 44.07 & 45.8 & 58.39 \\
**+SSA-Seg** & & 70.1 & 82.3 & 52.6 & **50.74\({}_{1.75}\)** & 52.6 & **45.55\({}_{1.78}\)** & 45.8 & **59.14\({}_{1.75}\)** \\  UperNet  &  & 105.5 & 233.8 & 404.9 & 51.68 & 404.9 & 46.85 & 362.9 & 60.50 \\
**+SSA-Seg** & & 107.3 & 234.9 & 405.2 & **52.69\({}_{1.78}\)** & 405.2 & **48.94\({}_{1.79}\)** & 363.2 & **61.83\({}_{1.73}\)** \\  ViT-Adapter  & ViT-Adapter-L & 283.3 & 363.8 & 616.1 & 54.40 & 616.1 & 50.16 & 541.5 & 65.77 \\
**+SSA-Seg** & & 284.9 & 364.9 & 616.3 & **55.39\({}_{1.78}\)** & 616.3 & **51.18\({}_{1.78}\)** & 541.7 & **66.05\({}_{1.78}\)** \\    AFFormer-B  & AFFormer-B & 25.1 & 3.0 & 4.3 & 39.94 & 4.3 & 33.22 & 3.7 & 48.57 \\
**+SSA-Seg** & & 26.0 & 3.3 & 4.4 & **41.92\({}_{1.78}\)** & 4.4 & **36.00\({}_{1.78}\)** & 3.7 & **49.72\({}_{1.718}\)** \\  SeaFormer-B  & SeaFormer-B & 26.8 & 8.6 & 1.8 & 40.05 & 1.8 & 33.29 & 1.6 & 45.75 \\
**+SSA-Seg** & & 27.3 & 8.8 & 1.8 & **42.46\({}_{1.76}\)** & 1.8 & **35.92\({}_{1.76}\)** & 1.6 & **47.00\({}_{1.718}\)** \\  SegNeXt-T  & MSCAN-T & 22.8 & 4.3 & 6.2 & 41.04 & 6.2 & 36.39 & 5.4 & 50.35 \\
**+SSA-Seg** & & 23.3 & 4.6 & 6.3 & **43.90\({}_{1.76}\)** & 6.3 & **38.91\({}_{1.75}\)** & 5.4 & **52.58\({}_{1.73}\)** \\  SeaFormer-L.  & SeaFormer-L & 29.4 & 14.0 & 6.4 & 42.36 & 6.4 & 35.99 & 5.6 & 49.14 \\
**+SSA-Seg** & & 29.9 & 14.2 & 6.4 & **45.36\({}_{1.78}\)** & 6.4 & **38.48\({}_{1.74}\)** & 5.6 & **49.66\({}_{1.75}\)** \\   

Table 1: Performance comparison of SSA-Seg on state-of-the-art general (top) and light weight (bottom) methods. The number of FLOPs (G) is calculated on the input size of \(512 512\) for ADE20K and COCO-Stuff-10K, and \(480 480\) for PASCAL-Context. The latency (ms) is calculated on the input size of \(512 512\) on V100 GPU. The green number indicates the increase from the baseline.

**Performance on state-of-the-art lightweight methods.** SSA-Seg helps methods such as SeaFormer and SegNeXt to achieve more superior performance without compromising efficiency. As shown in Table 1, by applying SSA-Seg, SeaFormer-L achieves 45.36% mIoU on ADE20K, while SegNext-T achieves 38.91% and 52.58% mIoU on COCO-Stuff-10K and PASCAL-Context datasets, respectively. This is the state-of-the-art performance obtained in real-time segmentation tasks.

**Comparison with state-of-the-art classifiers.** FLOPs (G) are the-art classifiers. To further prove its superior performance, the SSA-Seg is compared with other state-of-the-art classifiers, as shown in Table 2. When UperNet is used as the baseline, the proposed SSA-Seg can improve the mIoU by 1.20\(\%\), while GMMSeg and DNC only increase mIoU by 1.00\(\%\) and 0.60\(\%\), respectively. When OCRNet is used as the baseline, SSA-Seg exceeds baseline by 4.2\(\%\) mIoU, which far exceeds GMMSeg by 2.7\(\%\) mIoU. Also, SSA-Seg exceeds CAC 1.8\(\%\) mIoU. For SegNeXt-T, SSA-Seg exceeds CAC by 0.9\(\%\) mIoU. Moreover, for the lightweight model SeaFormer, CAC cannot bring growth. SSA-Seg can still achieve 2.5\(\%\) mIoU growth. The above experimental results demonstrate that the proposed SSA-Seg achieves state-of-the-art performance.

**Comparison with state-of-the-art mask classification models.** In order to validate the effectiveness of SSA-Seg, we further perform a comprehensive comparison with the state-of-the-art mask classification methods, as shown in Table 3. It should be noted that the DPG Head in CGRSeg  conflicts with SSA-Seg, and we remove the DPG Head before adding SSA-Seg.Therefore, compared with CGRSeg, CGRSeg+SSA-Seg rather reduces the efficiency metrics such as parameters, FLOPs and latency. The results show that by combining SSA-Seg, the existing pixel-level segmentation baselines achieve a better balance between efficiency and performance compared to mask classification methods.

### Ablation Study

**Ablation of the position basis.** We first explore the necessity of spatial prototype adaptation. As shown in Table 4, _Baseline+basis only_ means only randomly initialized position basis is used and the baseline is SeaFormer-L. It can be observed that when only the positional basis is retained, the performance of the model is degraded due to the lack of a spatial prototype adaptation process and the corresponding spatial domain distillation.

**Ablation of Spatial domain center.** We also conduct an ablation experiment on the spatial domain center, as shown in Table 6. The results show that applying softmax in the spatial dimension gives better performance. This can be interpreted as the model learns the relative spatial distribution of each category and thus models a more accurate spatial domain center.

**Ablation of PE.** We explore the effect of different position encoding methods on the ADE20K dataset in Table 7. We chose three widely used methods, namely Sinusoidal position coding , learnable absolute position coding , and feature-dependent conditional position coding, _i.e._, CPVT .

   Method & Params & FLOPs & Latency & mIoU \\   SSA-Seg & 14.2 & 6.4 & 29.9 & 45.4 \\ Baseline+basis only & 14.2 & 6.4 & 29.8 & 44.3 \\  

Table 4: Ablation of the position basis.

   Method & Backbone & FLOPs & ADE20K & COCO \\   FCN  & & 275.7 & 39.9 & 32.5 \\ +ProtoSeg  & & 278.5 & 41.1\({}_{-1.72}\) & 34.0\({}_{-1.8}\) \\ +DNC  & ResNet101  & 278.5 & 41.1\({}_{-1.12}\) & 33.0\({}_{-1.8}\) \\
**SSA-Seg** & & 275.9 & **44.3\({}_{-1.44}\)** & **36.6\({}_{-1.4}\)** \\  UperNet & & 297.2 & 48.0 & 42.8 \\ +GMMSegSeg  & & 302.3 & 49.0\({}_{-1.74}\) & 44.3\({}_{-1.8}\) \\ +DNC  & Swin-B  & 308.6 & **45.6\({}_{-1.74}\)** & **43.1\({}_{-1.9}\)** \\ +SSA-Seg & & 297.5 & **49.2\({}_{-1.72}\)** & **45.2\({}_{-2.74}\)** \\  OCRNet  & & 164.8 & 43.3 & 36.2 \\ +GMMSegSeg  & HRNetV2-W48  & 169.8 & 44.8\({}_{-1.74}\) & - \\ +CAC  & & 164.9 & 45.7\({}_{-1.74}\) & - \\ +SSSA-Seg & & 165.0 & **47.5\({}_{-1.02}\)** & **37.9\({}_{-1.7}\)** \\  SegNeXt-T  & & 6.2 & 41.0 & 36.4 \\ +CAC  & MSCAN-T  & 6.2 & 43.0\({}_{-1.28}\) & 37.5\({}_{-1.1}\) \\
**+SSA-Seg** & & 6.3 & **43.9\({}_{-1.72}\)** & **38.9\({}_{-1.1}\)** \\  SeaFormer-B  & & 1.8 & 40.0\({}_{-1.74}\) & 33.3 \\ +CAC  & SeaFormer-B  & 1.8 & 40.1\({}_{-1.74}\) & 35.5\({}_{-1.2}\) \\
**+SSA-Seg** & & 1.8 & **42.5\({}_{-1.75}\)** & **35.9\({}_{-1.6}\)** \\  

Table 2: Comparison with other state-of-the-art classifiers. FLOPs (G) are calculated using the input size of \(512 512\) on the ADE20K dataset.

   Method & Params & FLOPs & Latency & mIoU \\   MaskFormer  & 41.3 & 55.1 & 31.0 & 44.5 \\ MaskFormer  & 44.0 & 70.1 & 55.2 & 47.2 \\ YOSOSO  & 42.0 & 37.3 & 28.3 & 44.7 \\ PEM  & 35.6 & 46.9 & 26.8 & 45.5 \\  CGRSeg-B  & 19.1 & 7.7 & 36.0 & 45.5 \\ +**SSA-Seg** & 19.3 & 7.6 & 36.0 & 47.1 \\ CGRSeg-L  & 35.7 & 14.9 & 43.3 & 48.3 \\
**+SSA-Seg** & 35.8 & 14.8 & 42.6 & 49.0 \\  

Table 3: Comparison with state-of-the-art mask classification models. FLOPs (G) are calculated using the input size of 512 ×512. The latency (ms) is measured on a single V100 GPU with input size 512x512.

The results show that CPVT is particularly effective in improving the results. This can be explained by the fact that CPVT is able to encode neighborhood information and preserve the implicit positional priors to locate the region of interest at the center of the spatial domain for the semantic mask. In contrast, sinusoidal and learnable absolute position encoding can only describe one anchor point, which is not conducive to the localization of segmented fragments.

**Ablation of structure.** A series of ablation experiments are performed to verify the validity of the SEmantic Prototype Adaption (SEPA) and the SPatial Prototype Adaption (SPPA), respectively. The experimental results are shown in Table 8. The 1\(\)1 convolution with softmax is used as the baseline. It can be found that the baseline achieves only 42.36\(\%\) mIoU. By applying SEPA, mIoU increases by 0.52\(\%\) with a growth of less than 0.1 GFlops. When combined with \(_{sd}\) and \(_{g}\), mIoU increases by 1.90\(\%\). This validates the necessity of semantic domain distillation to constrain the semantic prototype adaptation process, _i.e._, they are structurally inseparable. Similarly, By applying SPPA and \(_{g}+_{pd}\), mIoU increases by 2.12\(\%\) and Flops increases by 0.1 G. The experimental results show that SEPA and SPPA can improve the segmentation performance.

**Effect of multi-domain knowledge distillation.** Multi-domain knowledge distillation can significantly improve the feature representation of SSA-Seg. To verify its performance, we conduct related ablation experiments. The experimental results are shown in Table 9. In the baseline, only the primary classifier is used, _i.e._, without teacher classifier. \(_{g}\) can increase mIoU by 0.60\(\%\). By applying response domain distillation \(_{rd}\), semantic domain distillation \(_{sd}\), and spatial domain distillation \(_{pd}\), the mIoU can be further increased by 0.67\(\%\), 1.09\(\%\) and 0.84\(\%\), respectively. Multi-domain distillation as a whole can achieve a 2.09\(\%\) mIoU improvement. The above experimental results show that each domain distillation can improve the accuracy, and multi-domain distillation can further significantly improve the model performance. Furthermore, we perform an ablation analysis of \(_{rd}\) design, as shown in Table 5. The results show that the introduction of entropy \(\), category mask \(\), and boundary mask \(\) has a role to play in the improvement of the model performance.

**Excluding the effect of model size.** To demonstrate that the performance improvement of the baselines are due to the effective design of the SSA-Seg rather than the introduction of additional parameters and computational consumption, we carry out the experiments shown in Table 10. Specially, _Baseline+Conv_ means we add several convolutional layers to the original SeaFormer-L decoder in order to have the same model size as SeaFormer-L+SSA-Seg. Note that although SSA-Seg has more parameters, it exhibits better computational efficiency and latency, which is more important for the efficiency of the model. The experimental results show that such a significant performance improvement (_i.e._, +3.0\(\%\)) cannot be obtained by simply increasing the baseline parameters and computational consumption.

**Effect of SSA-Seg on training.** In addition, to further validate the impact of SSA-Seg on model training, we use SeaFormer-L as the baseline model to evaluate the mIoU boost of SSA-Seg on the

  Method & mIoU \\   SSA-Seg & 45.36 \\ -\(\) & 44.82 \\ -\(\) & 44.77 \\ -\(\) & 45.11 \\     Method & mIoU \\   Softmax\({}_{K}\) & 44.86 \\ Softmax\({}_{HW}\) & 45.36 \\     Method & mIoU \\   Softmax\({}_{HW}\) & 44.86 \\ Softmax\({}_{HW}\) & 45.36 \\   
  Method & mIoU \\   Softmax\({}_{HW}\) & 44.86 \\ Softmax\({}_{HW}\) & 45.36 \\  

Table 6: Ablation experiments of generation of \(_{c}\). Softmax\({}_{HW}\) denotes apply softmax operation on spatial dimension.

  Method & mIoU \\   Baseline + SEPA + SPPA & 43.27 \\ + \(_{g}\) + \(_{rd}\) & 43.87 \\ + \(_{g}\) + \(_{rd}\) & 44.54 \\ + \(_{g}\) + \(_{pd}\) & 44.96 \\ + \(_{g}\) + \(_{sd}\) + \(_{pd}\) & 45.17 \\  + \(_{g}\) + \(_{rd}\) + \(_{sd}\)+\(_{pd}\) & **45.36** \\  

Table 10: Experiments on whether performance growth is due to model size increase.

  Method & mIoU \\   Baseline + SEPA + SPPA & 43.27 \\ + \(_{g}\) + \(_{rd}\) & 43.87 \\ + \(_{g}\) + \(_{rd}\) & 44.54 \\ + \(_{g}\) + \(_{pd}\) & 44.96 \\ + \(_{g}\) + \(_{pd}\) & 44.71 \\ + \(_{g}\) + \(_{sd}\) + \(_{pd}\) & 45.17 \\  + \(_{g}\) + \(_{rd}\) + \(_{sd}\)+\(_{pd}\) & **45.36** \\  

Table 10: Experiments on whether performance growth is due to model size increase.

  Method & mIoU \\   Baseline + SEPA + SPPA & 43.27 \\ + \(_{g}\) + \(_{rd}\) & 43.87 \\ + \(_{g}\) + \(_{rd}\) & 44.54 \\ + \(_{g}\) + \(_{pd}\) & 44.96 \\ + \(_{g}\) + \(_{pd}\) & 44.71 \\ + \(_{g}\) + \(_{sd}\) + \(_{pd}\) & 45.17 \\  + \(_{g}\) + \(_{rd}\) + \(_{sd}\)+\(_{pd}\) & **45.36** \\  

Table 9: Ablation experiment of online multi-domain knowledge distillation.

validation set with different iterations, as shown in Fig. 4. It can be observed that compared to the baseline model, our mIoU increases more significantly and only requires 1/3 of the iterations to achieve the same segmentation performance as the baseline model. This indicates that the SSA-Seg accelerates model learning and improves model performance. Note that due to the introduction of the teacher classifier, we need an average of 1.1 times the training time compared to the original model. However, the teacher classifier is removed when deploying the model, thus does not affect the efficiency.

**Visual comparison of SSA-Seg and Baseline results.** We provide the visualization results of SSA-Seg, which serves as a complementary illustration to Fig. 1, to further demonstrate that the SSA-Seg facilitates the adaptation of the fixed prototypes. As shown in Fig. 5, SSA-Seg effectively facilitates the offset of the prototype towards the center of the semantic domain (Fig. (b)). Since the adapted prototype is closer to the pixel features of the corresponding category, model can perform classification decisions more efficiently. As a result, SSA-Seg obtains more accurate segmentation masks compared to the baseline (Fig. (c) vs. Fig. (a)).

**Examples of extreme offsets without distillation.** We provide a visual sample to demonstrate our claim in 3.2.1 _i.e._, the offset will even be in the direction away from the semantic features. As shown in Fig. 6, purple and gray indicate pixel features in the wall and other categories, respectively. Orange star indicates the initial fixed prototype of wall category, and red star indicates the adapted semantic prototype. It can be observed that without distillation, the offset of the prototype is uncontrollable and in extreme cases moves away from the semantic features of the corresponding image, resulting in more pixels belonging to the wall category being misclassified as curtains. Therefore, we introduce online multi-domain distillation to constrain the adaptation of the semantic and spatial prototype.

## 5 Conclusion

In this paper, we analyze that current pixel-level classifiers for semantic segmentation suffers limitations such as feature deviation in the semantic domain and information loss in the spatial domain. To this end, we propose a novel Semantic and Spatial Adaptive Classifier (SSA-Seg). Specifically, we employ the coarse masks obtained from the fixed prototypes as a guide to adjust the fixed prototype towards the center of the semantic and spatial domains in the test image. In addition, we propose an online multi-domain distillation learning strategy to guide the adaption process. Experimental results on three publicly available benchmarks show that the proposed SSA-Seg significantly improves the segmentation performance of the baseline models with only a minimal increase in computational cost. In particular, SSA-Seg boosts the lightweight model to achieve state-of-the-art performance. The superior performance proves that SSA-Seg can replace the vanilla pixel-level classifiers and thus contribute to the semantic segmentation research.

Figure 4: mIoU of the validation set on (a) ADE20K and (b) COCO-Stuff-10K with iterations. Figure 5: Comparison of SSA-Seg and Baseline (SeaFormer-L) results. Purple and gray indicate pixel features in the door and other categories, respectively. Orange star indicates the initial fixed prototype of wall category, and red star indicates the adapted semantic prototype.