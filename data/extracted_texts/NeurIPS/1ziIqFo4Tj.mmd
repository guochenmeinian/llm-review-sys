# HOPE: Shape Matching Via Aligning Different K-hop Neighbourhoods

Barakeel Fanseu Kamhoua\({}^{1}\), Huamin Qu\({}^{1}\),

\({}^{1}\)The Hong Kong University of Science and Technology

Corresponding author: huamin@cse.ust.hk

###### Abstract

Accurate and smooth shape matching is very hard to achieve. This is because for accuracy, one needs unique descriptors (signatures) on shapes that distinguish different vertices on a mesh accurately while at the same time being invariant to deformations. However, most existing unique shape descriptors are generally not smooth on the shape and are not noise-robust thus leading to non-smooth matches. On the other hand, for smoothness, one needs descriptors that are smooth and continuous on the shape. However, existing smooth descriptors are generally not unique and as such lose accuracy as they match neighborhoods (for smoothness) rather than exact vertices (for accuracy). In this work, we propose to use different k-hop neighborhoods of vertices as pairwise descriptors for shape matching. We use these descriptors in conjunction with local map distortion (LMD) to refine an initialized map for shape matching. We validate the effectiveness of our pipeline on benchmark datasets such as SCAPE, TOSCA, TOPKIDS, and others.

## 1 Introduction

Shape matching is a very important task and has been increasingly so with the increase in the availability and affordability of 3D scans . It has important applications including but not limited to shape registration , comparison , recognition , and retrieval .

Shapes can undergo different types of transformations which we will group as isometric and non-isometric transformations in this work. Nonrigid isometric transformations preserve most of the geometric properties of the shape i.e., after the transformation, its angles, geodesic distances, scale, connectivity, and other geometric properties are mostly preserved. On the other hand, most geometric properties are not preserved under nonrigid non-isometric transformations. Examples of isometric transformations are rotations and translations (though minute scaling may also be included in this category for nonrigid cases). While examples of non-isometric transformations are splitting, scaling, dilating, and others which change the geometric properties of the shapes.

Several works have been proposed to address shape matching. However, most of these methods will either aim for smoothness  or for accuracy , but not both. Moreover, most of these methods will focus on specific types of deformations undergone by the shape either isometric  or non-isometric . Some methods such as 2D-GEM  have also tried to address both accuracy and smoothness in shapes undergoing both isometric and non-isometric deformations. However, 2D-GEM is very parameter-dependent, using different user-defined parameters for isometric shapes than for non-isometric shapes which in real life is not practical as one usually does not know whether one is dealing with isometric or non-isometric deformations.

Given these obsevations, there is a need for a pipeline that aims for accuracy and smoothness across different settings without significantly changing the pipeline. In this light, we propose HOPE, a k-hopneighborhood-based refinement technique. The rest of the paper is organized into; (a) preliminaries, (b) related work, (c) HOPE, and (d) experiments, (e) limitations and remarks, and (f) conclusion.

## 2 Preliminaries

3D shapes are usually represented by their coordinates \(^{n 3}\) and their triangulations (meshes) which can be used to build an adjacency \(^{n n}\), with \((i,j)=1\) if vertices \(i\) and \(j\) are connected in the shape and \(0\) otherwise.

Given two three-dimensional shapes \(\) and \(\) with \(n_{}\) and \(n_{}\) vertices respectively. Though our proposed pipeline (HOPE) and some other baselines work with \(n_{} n_{}\), we will assume \(n_{}=n_{}=n\), and use \(n\) for simplicity except when specified. The goal of nonrigid shape matching is to find a meaningful correspondence \(:\), where \(\) is (a) bijective, (b) continuous (smooth), and (c) similar vertices should be matched to each other [26; 35; 22]. A measure that captures both the smoothness and the accuracy of the map is the geodesic error. The geodesic error measures how far a map \(\), maps a vertex from its matching position given by the ground truth map \(}\), where a higher map accuracy will correspond to a higher proportion of vertices having geodesic error 0, and a smoother map will correspond to a huge increase in the geodesic error curve as we move slightly away from error 0 (implying that several vertices though not accurate are mapped to their intended neighborhoods).

The two main components of shape matching involve: (1) initializing a map, and (2) refining the initialized map.

First, the map is initialized either by using landmarks vertices (i.e., vertices with known correspondences) or by using robust descriptors. These descriptors can be based on: (a) the spectrum of the shape laplacian [8; 4; 33], (b) The face normals, vertex location, and triangulation [45; 41], geodesic distances [44; 1] or others [14; 46; 15; 16; 11; 43; 23]. In this work, we will assume that one such initialization approach has been utilized and we have an initial map at hand.

Second, the initialized map \(^{0}\) can then be refined by either using pair-wise descriptors [36; 26; 52; 48; 14; 38; 22] and solving:

\[^{t}=_{^{t}}||_{}( ^{t},^{t-1})-_{}||,\] (1)

or by using vertex-wise descriptors [2; 34; 39; 37; 31; 26; 35; 19; 20; 44; 1; 28] and solving:

\[^{t}=_{^{t}}||_{}( ^{t},:)-_{}f(^{t-1})||,\] (2)

Where in equation 1, \(_{}(^{t},^{t-1})(R)^{n n}\) is the pair-wise descriptors of vertices for shape \(\) with its rows and columns aligned using the map \(^{t}\) and the previous iterations map \(^{t-1}\) respectively. \(_{}\) is the pair-wise descriptor for shape \(\). Here for conciseness for aligning rows or columns we will use \(\) (while in reality if the row map is \(=argmax(\), dim=-1) the column should be \(^{{}^{}}=argmax(\), dim=-2) where \(P\) is the permutation matrix such that \(_{}=_{}\) and \(_{}^{T}=_{}\)

While in equation 2, \(_{}(^{t},:)^{n d}\) is the vertex-wise descriptors for shape \(\) with feature dimension \(d\) for each vertex and with its rows aligned according to the map \(^{t}\), \(f(^{t-1})\) is a function (such as functional map) to transfer the previous iteration's map to the descriptor space, and \(_{}^{n d}\) is the vertex-wise descriptors for shape \(\).

For the map \(\) refined by equations 1 or 2 to have a high accuracy (in the ideal case), the pair-wise descriptors \(_{}(i,:)^{1 n}\) or vertex-wise descriptors \(_{}(i,:)^{1 d}\) will need to be: (a) unique for each vertex \(i\) on shape \(\), and (b) identical to its ground truth corresponding pair-wise feature \(_{}(}(i),:)^{1 n}\) or vertex-wise feature \(_{}(}(i),:)\) on shape \(\). Where \(}\) is the ground truth map. Moreover, for smoothness, vertices should be mapped such that they remain in their relative neighborhoods before and after the mapping.

## 3 Related Work

ZoomOut  and other related works[19; 13; 1; 34; 39; 37; 26; 35] all aim for smoothness of the map and focus on the settings in which the shapes have undergone an isometric deformation, such that geometric shape properties are preserved. These works use vertex-wise descriptors usually based on some truncated (reduced) basis of specific shape properties, generally leading to some loss of information such as uniqueness. For example, consider the \(d\) dimensional vector \((i,:)^{d}\) as the vertex-wise descriptors of vertex \(i\), supposing that the matrix \(^{n d}\) contains the first \(d\) eigenvectors of the uniform shape laplacian built from \(\), it can be seen that \((i,:)\) is the soft cluster assignment of vertex \(i\), and as such most vertices in the same cluster as \(i\) will have similar vertex-wise descriptors. This can be seen in figure 1 where the second eigenvector \((:,2)^{n}\) is shown for example shapes from TOSCA and TOPKIDS. One can see that \((:,2)^{n}\) is indeed a soft cluster assignment grouping some vertices in the same cluster together. This explains the success in achieving smoothness by some methods that use the \(d\) dimensional spectrum of the shape laplacian.

**Theorem 3.1**: _Given the shape descriptor \((i,:)^{d}\) as the vertex-wise descriptors of vertex \(i\), supposing that the matrix \(^{n d}\) contains the first \(d\) eigenvectors or left singular vectors of some unique shape pairwise descriptor \(\). Using \(\) for the map refinement via Functional maps helps group nearby clusters together assuming the functional map is perfectly accurate._

**Proof 3.1**: _Recall that given a map \(^{t-1}\), and two vertex-wise descriptors \(_{}\) and \(_{}\) both \( R^{n d}\) the functional map \( R^{d d}\) is obtained as:_

\[^{t}=_{^{t}}||_{}( ^{t-1},:)-_{}^{t}||\]

_This functional map can then be used to convert functions in the basis of shape \(\) into those of shape \(\) and vice versa. This is then used to refine the map via solving equation 2 where \(f(^{t})=^{t}\). One can see that \(_{}^{t}\) converts the soft clusters (left singular vectors or first eigenvectors) of shape \(_{}\) into the basis space of the descriptors (soft clusters) of shape \(_{}\), and so solving 2 is basically aligning the soft clusters in the same basis space. Thus solving equation 2 is matching aligned soft clusters._

In fact, methods such as ZoomOut  which iteratively refine the map \(\) by using an increasing number of eigenvectors of the shape laplacian can be said to be refining the map by increasingly aligning more fine-grained clusters of the shapes. Figure 2 shows that though ZoomOut's recovered maps \(\) on the isometric SCAPE dataset are generally smooth (seen by the rapid increase of the geodesic curve), they are generally not accurate due to the non-uniqueness of the descriptors it uses to refine the initialized map (seen by the proportion of vertices at geodesic error 0).

Moreover, though geometric properties may be preserved even for some mild non-isometric deformations, they usually are not preserved when the transformation deviates significantly from isometry. For example, consider the shape Laplace Beltrami Operator (LBO) on which many vertex-wise and pair-wise descriptors are built:

\[=^{-1}\] (3)

Figure 1: For sample shapes from the TOPKIDS (first row) and TOSCA (second row), this figure shows the second eigenvector of the mesh laplacian (LBO 2), the second eigenvector of the uniform shape laplacian from the triangulation adjacency (uniform shape laplacian 2), the 2-hop and 6-hop neighborhoods of vertex 100, the second SHOT descriptor and the LMD of vertex 2.

where \(\) is the diagonal mass matrix with \((i,i)\) entry along the diagonal being the vertex area of vertex \(i\), and the matrix \(\) being defined as:

\[=\{(cot_{i,j}+cot_{ij}),&j neigh(i)\\ -_{k neigh(i)}_{i,k}&i=k\\ 0,&otherwise.\] (4)

where \(neigh(i)\) denotes the neighborhood of \(i\). It can be observed from the way the LBO is defined that a non-isometric deformation which changes angles, areas, or even merges part of the shape (such as gluing hands to face for example) will change the LBO and by implication its spectrum, hence changing the vertex-wise and pair-wise descriptors based on the LBO. Figure 2 shows the poor performance of DIR  and ZoomOut  (which use the spectrum of the LBO as vertex-wise descriptors) on a pair of sample shapes from the non-isometric dataset TOPKIDS  (which contains shapes with topological noise).

Other methods aim for accuracy use more unique descriptors. However, these descriptors are generally not smooth since they generally do not capture neighborhoods and as such do not match neighborhoods. Figure 1 shows the first SHOT  descriptor and figure 2 show that while it generally provides an accurate map  (seen by the proportion of vertices at geodesic error 0) the map is not smooth (as seen by the lack of rapid increase of the geodesic curve). That is why methods aiming for smoothness  only use these unique descriptors for initialization and then use the LBO or other smooth basis for refinement.

Others have used the 1-hop  or 2-hop  neighborhoods of vertices as witnesses to improve an initialized map. Though these methods aim for both accuracy (via uniqueness of vertex neighborhoods), and smoothness via using neighborhoods as witnesses to improve the map (matching neighborhoods that agree best), they are nonetheless affected by the fact that 1-hop or 2-hop neighborhoods may not be unique enough and distant vertices may have similar 1-hop and or 2-hop neighborhoods especially in the presence of symmetries in \(\). For example, consider GRAMPA  which initializes the map by using a graph matching kernel in the full graph spectrum and then uses the 1-hop (or 2-hop as in this figure) neighborhood to refine the map. Figure 2 shows GRAMPA  performing well on non-isometric shapes from TOPKIDS where there are few symmetries (and other graph properties) which normally cause the neighborhoods of the vertices to be non-unique. However, figure 2 shows that GRAMPA struggles on a pair of shapes from the nearly isometric dataset SCAPE  where shapes have symmetries (and other graph properties) that normally cause the neighborhoods of the vertices to be non-unique. To address this challenge, 2D-GEM proposed to use the concept of local map distortion LMD and the spectrum of the uniform shape laplacian. However, though 2D-GEM seems to perform well on non-isometric and isometric shapes (figure 2), 2D-GEM does not generalize, but rather significantly changed their model (depending on user-defined parameters) in order to handle isometric cases as discussed in Section 4.4.

Figure 2: Showing mating of sample shapes from the isometric SCAPE dataset (first row) and the non-isometric TOPKIDS (second row), this figure shows the performance of different baselines.

## 4 Hope

To address both accuracy and smoothness for correlated meshes undergoing isometric and non-isometric deformations we propose HOPE (k-HOP niEghborhood matching). HOPE is based on the iterative refinement of an initialized map by: (1) using the local map distortion (LMD) to identify poorly matched vertices, and (2) using noise robust k-hop neighborhood-based descriptors for refinement of the maps of these poorly matched vertices.

This section is organized as: (a) the local map distortion, (b) k-hop pairwise descriptors, and (c) iterative refinement pipeline and algorithm.

### Local Map Distortion (LMD)

Let \(:\) be a map between two shapes. The LMD  of the map \(\) at the vertex \(x_{i}\) is given as follows:

\[_{}()(x_{i})=_{ }(x_{i})}_{}(j)DE_{}(x_{i},x_{j})}{ _{x_{j}_{}(x_{i})}_{}(j)},\] (5)

where \(_{}(x_{i})=\{x_{j}\:|\:d_{}(x_{i},x _{j})\}\) is the \(\)-geodesic ball of \(x_{i}\), \(_{}\) is the area element of the mesh of shape \(\), and \(DE_{}(x_{i},x_{j})=|d_{}(x_{i},x_{j})-d_{}( (x_{i}),(x_{j}))|/\) represents a pairwise distance distortion of mapping nearby vertices \(x_{i}\) and \(x_{j}\) to \((x_{i})\) and \((x_{j})\). A smaller value of \(_{}()(x_{i})\) means a better map continuity of \(\) at the vertex \(x_{i}\), in other words, the local distance at the point \(x_{i}\) is well preserved. Based on the above definition of LMD, one can check that if \(\) is an isometric map, then \(_{}()(x_{i})=0, x_{i},>0\). Conversely, if \(_{}()(x_{i})=0\), \( x_{i}\) for some \(>0\), then \(\) is isometric. We use the LMD to find well-matched pairs (\(lmks\)) i.e., \(lmks=\{(x_{i},(x_{i}))|_{}()(x_{i}) \}\), where \(\) is a threshold, We fix \(\) to be the same values for all dataset for all our experiments. We then call the rest of the vertices on shape \( lmks\) as non-landmarks \(Nlmks\) (i.e., poorly mapped vertices).

### K-Hop Pairwise Descriptors

Given an initial map \(^{0}\) matching a fraction \(\) of the vertices \(n\) correctly and the fraction \(1-\) incorrectly, it has been shown that one can refine the map by (a) using the 1-hop  neighborhood contained in the graph adjacencies of the triangulations \(_{}\) and \(_{}\), or (b) using k-hop  neighborhoods contained in binary matrices \(_{,k}\) and \(_{,k}^{n n}\) indicating whether vertices are connected at a path of length \(k\) on the shape mesh adjacencies (note that \(k=1\) is the adjacency). The refinement is done by solving:

\[^{t}=_{}(_{,k} (,^{t-1})_{,k}),\] (6)

the main assumption being that 2 the meshes \(\) and \(\) are correlated i.e., their adjacencies are assumed to come from the same parent graph, with their correlation ratio being \(s\). Specifically, given a \((n,p)\) Erdos Regny parent graph and the correlation \(s\), \(1-s\) is the probability of independently randomly deleting edges from this graph to either obtain the adjacency of \(\) or that of \(\). For \(k=1\) and \(k=2\), rigorous analysis and tight bounds were given for recovering the ground truth map \(}\) (for given values of \(s,p\) and \(\)) by solving equation 6 (see  for exact bounds).

**Theorem 4.1**: _Given the k-hop based descriptors \(_{,k}\) and \(_{,k}\), solving equation 6 is matching vertices whose neighborhoods agree best under \(^{t-1}\)._

**Proof 4.1**: _Notice that:_

* _columns of_ \(_{,k}\) _and_ \(_{,k}\) _are descriptors for the vertices (rows), and these columns are the k-hop neighborhoods of vertices (rows)_
* \(^{t-1}\) _is used in equation_ 6 _for first aligning these descriptors i.e.,_ \(_{,k}(:,^{t-1})\) _rearranges the columns of_ \(_{,k}\) _thus realigning the descriptors of each vertex (the rows),_
* _each entry_ \((i,j)\) _in the product_ \(=_{,k}(:,^{t-1})_{ ,k}\) _will be the number of vertices that are common in the k-hop neighborhoods of vertices_ \(i\) _and_ \(j\)_, after the alignment of the_ \(k\)_-hop neighborhoods of vertices in_ \(\) _by_ \(_{,k}(:,^{t-1})\)* _finding_ \(\) _via equation 6 matches the vertices_ \(i\)_, and_ \(j\) _whose k-hop neighborhood have most vertices in common based on the alignment_ \(^{t-1}\)_._

However, in the presence of symmetries the next 1-hop and 2-hop neighborhoods may not be unique enough as even distant nodes may have the same 1 and or 2-hop connectivity. To address this non-uniqueness, we follow 2D-GEM, and use the LMD to first detect \(Nlmks\) vertices. Unlike 2D-GEM which used the laplacian spectrum to refine the map \((Nlmks)\) for \(Nlmks\) vertices, we instead propose to iteratively use different k-hop neighborhoods for refining the map \((Nlmks)\) for \(Nlmks\) vertices, i.e., iteratively using nodes at different lengths \(k\) to refine \((Nmlks)\). We propose this strategy because: (b) first, 2D-GEM's strategy of using the spectrum will suffer from non-uniqueness according to theorm 3.1, and will also not adapt to non-isometric shapes as discussed in Sections 3 and 4.4. (b) Second, according to theorem 4.1 our strategy will ensure that \(\) is consistent across different neighborhoods. We do so for \(1 k k_{max}\) where \(k_{max}\) is large. This strategy is inspired by the fact that it was shown that large neighborhood statistics are essential in graph matching , and other graph tasks .

### Pipeline for HOPE

Here we show the general pipeline for HOPE which consists of the two aforementioned steps, namely:

* (a) Map initialization: we use any robust map initializations e.g., the map initialized from SHOT in our experiments
* (b) map refinement for \(t\) iteration steps consisting of:
* Using the LMD  to detect the poorly matched \(Nlmks\) vertices
* refine the map for the \(Nlmks\) vertices via enforcing different noise robust k-hop neighborhoods consistency (for \(1 k k_{max}\)) by solving: \[^{t}(Nlmks)=_{}(_{,k}((Nlmks),^{t-1})_{,k}),\] (7)
* (c) returning the final map \(^{t}\)

### HOPE vs 2D-GEM

In this section, we briefly introduce 2D-GEM  and highlight some key differences between 2D-GEM and HOPE. Like us, 2D-GEM initializes its map via SHOT

Figure 3: HOPE (a pipeline) for shape matching.

and then at each iteration \(t\) 2D-GEM refined the map by:

* (1) updating the map \(\) by solving one iteration of equation 6 using the 2-hop neighborhoods, meaning \(k=2\) in equation 6,
* (2) finding the \(lmks\) well-matched pairs, and poorly matched pairs \(Nlmks\) pairs using the LMD.
* (3) using the \(lmks\) vertices to update the map of the \(Nlmks\) vertices in the spectrum by using the GMWM  on a cost matrix built from the spectrum of the laplacian of the two shapes (see their paper for more details). They showed similarity between this approach and the functional map  approach.

The main two differences between 2D-GEM and HOPE are: (a) HOPE completely removes their step (1), and (b) they used the laplacian (LBO) spectrum via their proposed 2D-graph convolution to refine the map for the \(Nlmks\) in step (3). However, as mentioned in section 3 and shown in figure 1, using LBO descriptors loses uniqueness since vertices in similar clusters will be grouped together, and in addition, these descriptors are not robust to non-isometric deformations as discussed in Section 3.

A consequence of this is that, 2D-GEM needed to deactivate step (2) and (3) of their algorithms (the \(Nlmks\) refinement step) by setting \(=100\) as their LMD threshold when dealing with non-isometric shapes. Hence though effective, their algorithm can be seen as two disjoint algorithms that are used for isometric or non-isometric shapes based on the setting of \(\). But in real life, in some cases, it is not obvious whether the deformation used is isometric or not. On the other hand, we propose refining the \(Nlmks\) map based on the preservation of different k-hop connectivity which is a constraint that holds for isometric and non-isometric shapes with correlated triangulations [51; 30; 52].

Figure 4 shows a comparison between HOPE and 2D-GEM on a non-isometric pair of shapes from TOPKIDS using the 2D-GEM \(\) parameters proposed for isometric shapes. It can be seen that when we use the isometric parameters of 2D-GEM on non-isometric shapes, 2D-GEM fails to perform well (the same holds when using their non-isometric parameter \(=100\) on isometric shapes.

### Time complexity analysis

See the algorithm for HOPE in Appendix A. Given that for step (1) HOPE follows DIR and  in using LMD, checking the LMD takes \(O(n)\). The GMWM used to solve step (2) of HOPE takes \(O(|Nlmks|^{2}logn)\). Hence the total time complexity of HOPE for all \(t\) iterations is \(O(t(|Nlmks|^{2}logn+n))\).

## 5 Experiments

We report experimental results that validate the effectiveness, efficiency, and generalization ability of HOPE in the matching of nearly-isometric and non-isometric 3D shapes.

### Experimental Set-up

All experiments are conducted in Matlab 2023 on a Windows 11 system with 32GB RAM and Intel(R) i5 13500 CPU @ 2.50-4.8GHz.

### Datasets

We evaluate the performance of HOPE on two nearly isometric benchmark datasets TOSCA , and SCAPE , as well as on the non-isometric dataset SHREC'16 (TOPKIDS) , TOPKIDS

Figure 4: Comparison on TOPKIDS showing HOPE using \(\) as in Section 5.5 for its LMD threshold (same as in the isometric cases), against 2D-GEM with \(\) set as in the isometric case (i.e., using the isometric parameters in  rather than \(=100\) as in the non-isometric case).

contains 25 shapes of the same class with up to 12K vertices, undergoing near-isometric deformations in addition to large topological noise (such as merging hands to thighs) which results in \(n_{} n_{}\). TOSCA consists of 80 shapes in 8 different categories (human and animal shapes) with vertex numbers ranging from 4k to 50k. SCAPE has 71 shapes (12,500 vertices for each) of the same person with different poses.

Furthermore, to see the generalization abilities of HOPE, we equally used datasets SCAPE_r, FAUST_r, and TOSCA_r, which are remeshed shape datasets. The SCAPE r consists of the same 71 shapes from the SCAPE dataset, but remeshed, while the FAUST_r (TOSCA_r) likewise contains the same FAUST (TOSCA) datasets but remeshed. We used the same 71 test pairs SCAPE_r as for SCAPE, and for FAUST_r and TOSCA_r we followed 

### Evaluation Metrics

We use the geodesic error as our error metric [14; 22]. Given that the map of an algorithm maps \(x_{i}\) to \(x_{j}\), and the true map maps \(x_{i}\) to \(x_{j}^{*}\), the geodesic error is defined as \(e(x_{i})=}(x_{j},x_{i}^{*})}{diam()}\), where \(d_{}\) denotes the geodesic distance on \(\), and \(diam()\) is the geodesic diameter of \(\).

### Baselines

Following 2D-GEM , we compare HOPE with the following methods: EM , GE , RF , PFM , FSPM , Kernel-Matching , and GRAMPA , , SGMDS, FM, BIM, Mobius, Best-Conformal , Kernel-Matching , DIR-500  which uses 500 eigenvectors, DIR-1000  which uses 1000 eigenvectors.

### Parameter Settings

**On ZoomOut**, we start with a functional map using the first 20 eigenvectors of the LBO, then we iteratively add an eigenvector until we reach the 120th eigenvector after which we stop.

**On all other Baselines**, we follow the settings from .

**On HOPE**, on all datasets we set the LMD threshold \(\), staring from \(=100\) and 10 equally spaced values to \(=0.2\) i.e., we use \(=linespace(100,0.2,10)\) and we set \(t=60\). When the last value of \(e\) is reached, it is maintained for the rest of the iterations. We equally set \(k_{max}=8\) for all datasets. For the LMD, we used the second ring neighborhood following [49; 22].

### Performance Analysis

**Comparison on non-isometric shapes.** On the dataset with topological noise TOPKIDS (Figure 5(a)), the top 3 methods are the noise-robust methods 2D-GEM with \(96.7\%\) vertices correctly matched, followed by HOPE with \(94.9\%\), and GRAMPA with accuracy of \(84.5\%\). This shows that 2D-GEM, HOPE, and GRAMPA are indeed adapted for non-isometric shapes.

Figure 5: Performance comparison on TOPKIDS 5(a), SCAPE 5(b), and TOSCA 5(c).

, GRAMPA is very time-consuming as it needs the full basis of the graph adjacencies of the shapes, while HOPE and 2D-GEM do not. For example on a shape with 12500 vertices from SCAPE, GRAMPA takes roughly 118 seconds on our set up while 2D-GEM and HOPE take 56 and 52 seconds respectively. Better still HOPE is a general model as it can be seen that with the same parameter of \(\) (see Section 5.5) for its LMD, it performs well on all datasets.

**Comparison on isometric shapes**. On isometric shapes, methods that enforce stronger geometric constraints on their refinement pipelines such as 2D-GEM (with appropriate parameters), DIR, and HOPE. HOPE outperform all other baselines. 2D-GEM achieves \(92.54\%\) accuracy at geodesic error 0 on the TOSCA dataset, as well as \(74.8\%\) accuracy on the SCAPE dataset, while HOPE achieves \(80.11\%\) on SCAPE and \(92.54\%\) on TOSCA using no matrix decomposition. Third is DIR-1000 with 1000 eigenvectors which achieves around \(69.5\%\) accuracy at geodesic error 0 on SCAPE, and \(59.8\%\) accuracy at geodesic error 0 on TOSCA. Moreover, unlike DIR (and 2D-GEM,), HOPE generalizes to this isometric setting using the same parameters (see Section 5.5).

**Comparison on remeshed shapes**. On the remeshed datasets FAUST_r, SCAPE_r and TOSCA_r in figure 6, methods that enforce stronger geometric constraints such as DIR performed poorly, while those that are more robust to noise such as 2D-GEM (with appropriate parameters), ZoomOut and HOPE perform relatively well. Though 2D-GEM does not outperform ZoomOut in this setting (probably due to differences in the mesh connectivity), HOPE still outperforms ZoomOut though by a smaller margin than on datasets with similar mesh connectivity amongst pairs.

**Time Comparison**. Here we compare the time usage per shape for both 2D-GEM, HOPE, and ZoomOut on the TOSCA dataset. It can be seen from figure 7 that HOPE is relatively faster than 2D-GEM, and even ZoomoOut (for the given parameters of ZoomOut that we used for our experiments).

## 6 Limitations

The main limitation of this work is the reliance on correlated triangulations between the pair of shapes to be matched as outlined in Section 4.2. One can see this drawback on figures 6 which show

Figure 6: Performance comparison on FAUST_r 6(a), SCAPE_r 6(b), and TOSCA_r 6(c).

Figure 7: Time Comparison on TOSCA showing HOPE, 2D-GEM, and ZoomOut.

that though HOPE still performs well on remeshed shapes (shapes where the triangulations are not very correlated), and even outperforms other baselines, it nonetheless does not perform as well as on figures 5(b), 5(a) and 5(c) where the triangulations of the pairs matched are strongly correlated. This is a major drawback because triangulations are often hard and expensive to get, especially consistent triangulations between shapes.

## 7 Conclusion

We introduced an effective and easy-to-implement map refinement strategy consisting of; (a) detecting poorly matched vertices (nodes) using the concept of local map distortion (LMD), and (b) improving the map of these poorly matched vertices via noise robust k-hop pairwise descriptors. We then conducted a series of experiments to show that our framework is effective and generalizable to different shape datasets. We also discussed the main limitation of our work (the fact that it is reliant on the triangulation consistency between the shapes matched).

## 8 Broader Impact

This work proposes a map refinement strategy for shape matching that is based on matching different k-hop neighborhoods of vertices. It then validates the effectiveness of this strategy on several shape matching datasets. This can spark new research on the importance of large neighborhood statistics for shape matching and other related tasks. As we focus solely proposing a framework for map refinement for shape matching, we do not see clear negative impact of this work.

## 9 Acknowledgements

This work is partially supported by Hong Kong Research Grants Council under the Areas of Excellence Scheme grant AoE/P-601/23-N.