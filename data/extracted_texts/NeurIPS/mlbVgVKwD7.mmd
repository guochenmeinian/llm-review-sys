# Multi-Chain Graphs of Graphs: A New Approach to Analyzing Blockchain Datasets

Bingqiao Luo

National University of Singapore

luo.bingqiao@u.nus.edu

&Zhen Zhang

National University of Singapore

zhen@nus.edu.sg

&Qian Wang

National University of Singapore

qiansoc@nus.edu.sg

Corresponding author

&Bingsheng He

National University of Singapore

hebs@comp.nus.edu.sg

###### Abstract

Machine learning applied to blockchain graphs offers significant opportunities for enhanced data analysis and applications. However, the potential of this field is constrained by the lack of a large-scale, cross-chain dataset that includes hierarchical graph-level data. To address this issue, we present novel datasets that provide detailed label information at the token level and integrate interactions between tokens across multiple blockchain platforms. We model transactions within each token as local graphs and the relationships between tokens as global graphs, collectively forming a "Graphs of Graphs" (GoG) approach. This innovative approach facilitates a deeper understanding of systemic structures and hierarchical interactions, which are essential for applications such as link prediction, anomaly detection, and token classification. We conduct a series of experiments demonstrating that this dataset delivers new insights and challenges for exploring GoG within the blockchain domain. Our work promotes advancements and opens new avenues for research in both the blockchain and graph communities. Source code and datasets are available at https://github.com/Xtra-Computing/Cryptocurrency-Graphs-of-graphs.

## 1 Introduction

Machine learning techniques applied to blockchain graphs present significant opportunities for in-depth data analysis and innovative applications [1; 2]. A comprehensive analysis of graph structures and patterns reveals valuable insights into transaction activities, including the investigation of transaction patterns, identification of key players, and deployment of tokenomics frameworks [3; 2; 4; 5]. Advanced graph learning algorithms have shown promise in enhancing the detection of various fraudulent activities [6; 7; 8; 9; 10] and predicting market trends [11; 12]. However, existing studies in this field face significant limitations due to the restricted availability of open and extensive datasets that include graph-level data. Most labeled blockchain datasets focus on node-level or edge-level data, lacking in-depth graph-level or advanced hierarchical graph-level studies [13; 14]. Furthermore, most existing datasets are confined to single-chain data, which restricts the ability to compare and understand the complex characteristics of various blockchain systems [15; 16; 17; 18; 3].

Concurrently, the study of Graphs of Graphs (GoG), which captures intricate relationships and structures across various domains, is gaining traction. This framework is particularly beneficial in scenarios involving multiple levels of interaction or dependency, such as in chemical, social media,and document collection domains [19; 20; 21]. Despite these advancements, most GoG datasets remain small and static, focusing predominantly on chemical and molecular interactions task [19; 22]. It is not clear whether existing GoG machine learning models can achieve satisfied performance in large-scale, real-life transaction networks.

To bridge these two gaps, we introduce novel datasets and a new GoG approach tailored to the blockchain ecosystem. On the blockchain, a wide variety of digital tokens represent diverse assets, such as DeFi tokens related to decentralized finance products and MEME tokens inspired by internet memes. While these tokens are distinct, they are interconnected, as they are implemented on the same blockchain and can interact with the same user groups. This interconnectivity allows us to design an advanced hierarchical approach that includes local graphs representing individual crypto token transactions and global graphs depicting inter-token relationships within the blockchain ecosystem. Our dataset covers two crucial aspects: first, it includes detailed label information for each token graph, categorizing tokens by behavior, including fraud identification; second, it integrates interactions between tokens across multiple blockchain platforms. Specifically, our dataset covers 268,282,924 transactions conducted by 18,600,142 cryptocurrency addresses, covering the transaction history of 24,316 tokens on three main EVM chains: Ethereum, Polygon, and Binance Smart Chain (BSC).

We conduct an in-depth analysis of the constructed GoG, employing systematic graph analysis and extensive machine learning techniques. Our findings indicate that tokens belonging to the same class can exhibit distinct graph characteristics, such as varying graph size, reciprocity, and clustering coefficient, depending on the blockchain they are on. Furthermore, tokens with a high number of edges in local graphs tend to possess high centrality in global graphs. Through experiments on machine learning models, we observe that methods based on GoG can outperform traditional GNN methods in anomaly detection, multi-class classification, and link prediction on blockchain graphs under specific conditions. However, we also note that existing GoG models often underperform in minor class classification, highlighting the need for more advanced techniques.

In summary, this work makes several key contributions:

* We introduce large-scale, cross-chain graphs-of-graphs datasets, enriching blockchain research with unprecedented depth of analysis.
* Our analysis of graph structures within the hierarchical approach reveals intriguing characteristics, underscoring the diversity of token graph structures across different chains.
* We investigate traditional graph machine learning models and GoG-based models in the datasets. Experimental results demonstrate that our datasets present new avenues and challenges for the blockchain and graph community.

## 2 Literature Review

**Blockchain Dataset.** A number of datasets have been developed for machine learning tasks on blockchain platforms. For instance, [15; 16; 17; 18] proposed Ethereum datasets specifically for account detection and link prediction.  introduced datasets for tokens and liquidity pools, conducting statistical analyses of tokenomics for Ethereum and BSC.  utilized both on-chain and off-chain data for predicting crypto trading prediction. In the realm of blockchain graph datasets, one pioneering benchmark is Chartalist , which encompasses multiple tasks across Bitcoin, Ethereum, and Dashecoin. However, the inherent differences in blockchain types, such as unspent transaction output (UTXO) and account-based systems, pose challenges for comparing tasks across these varied architectures. Recent studies have also focused on Ethereum's NFT markets. For example,  introduced a live graph lab for temporal graphs, facilitating the study of open, dynamic, and real transaction graphs from Ethereum NFT transactions. Moreover,  highlighted the significant role of linking on-chain Ethereum accounts with off-chain X accounts, emphasizing the value of off-chain data in enhancing Ethereum analysis. Despite these advancements, many studies remain focused on single chains, predominantly Ethereum, and concentrate on node-level or edge-level tasks. This narrow focus may limit the generalizability of their findings.

**Graph Representation Learning.** Graph representation learning transforms high-dimensional, sparse graph data into compact, dense vectors . The main objective is to produce representation vectors that effectively capture both structural and feature information of extensive graphs . Among various tasks in this field, one key task is graph classification, which focuses on predictingthe properties of whole graphs . This task is widely used in social community analysis [28; 25] and molecular property prediction [29; 30]. Numerous GNN-based algorithms have been proposed to address graph classification [31; 32; 33; 34]. Generally, these algorithms employ the message-passing paradigm to iteratively refine node representations, followed by a graph pooling function to generate graph-level representations [35; 26].

**Graphs-of-Graphs.** Graphs-of-graphs (GoG) extends traditional graph theory by structuring individual graphs as nodes within a larger, interconnected graph. This structure enables the analysis of complex relationships between distinct graph-structured data . Initial studies applied GoG to rank nodes in domain-specific networks  and developed clustering methods using non-negative matrix factorization (NMF) for multi-view and multi-domain graph clustering . Later research applied the GoG approach to GNNs to enhance graph classification tasks [20; 38]. Recent efforts have furthered GoG models to improve prediction capabilities in chemical and drug interactions [19; 22; 39]. Additionally,  explored the use of multi-layer network models within Ethereum and Ripple for anomalous event analysis, demonstrating the effectiveness of similarly structured concepts in blockchain analytics. However, the application of GoG in blockchain datasets remains underexplored, indicating a potential area for further research.

In summary, we provide a detailed comparison of related and public datasets with our dataset in Table 1. Specifically, our dataset includes these unique features: (1) as a graphs-of-graphs dataset, it comprises large-scale local graphs, dense global graph structures, and real-life temporal edges; (2) as a blockchain graph dataset, it stands as the first large-scale hierarchical graphs-of-graphs dataset, encompassing multi-chain transactions and graph-level labels.

## 3 Dataset Details

### Background

**Blockchain and Cryptocurrency.** Blockchain technology operates on a decentralized network secured by cryptographically linked blocks. This structure ensures data immutability and verifiability, supporting secure, irreversible, and transparent transactions. Cryptocurrencies, built on this technology, facilitate secure digital transactions without a central authority, enhancing user anonymity while complicating fraud detection.

**EVM and ERC20.** The Ethereum Virtual Machine (EVM) supports an account-based model that enables direct value transfers and complex features like smart contracts. This model has become a standard for blockchain networks and decentralized applications, utilized across prominent networks such as Ethereum, Polygon, and Binance Smart Chain (BSC). The ERC20 standard on Ethereum and the BEP20 standard on BSC provide a framework for fungible tokens, promoting interoperability and simplifying the trading process across platforms.

   &  &  **Graph-** \\ **level** \\ **(token)** \\ **labels** \\  &  **Multi-chain** \\ **comparability** \\ **graph** \\ **graph** \\  &  **Density** \\ **global** \\ **graph** \\ **node** \\  &  **Avg. Num.** \\ **local** \\ **edge** \\  & 
 **Avg. global** \\ **graph** \\ **edge** \\  &  \\   & & & & & & & \\  \) & 25.4 & 26.5 & 1707.3 & ✗ \\ CCI950  & Chemical - & - & \(4.8 10^{-4}\) & 26.2 & 27.4 & 511.4 & ✗ \\ NetBasedDDI  & Drug & - & - & \(0.7 10^{-1}\) & 24.8 & 26.7 & 442.2 & ✗ \\ ZhangDDI  & Drug & - & - & \(0.3\) & 25.2 & 27.0 & 1490.0 & ✗ \\ ChChMiner  & Drug & - & - & \(0.5 10^{-1}\) & 27.8 & 29.6 & 1418.9 & ✗ \\ DeepDI  & Drug & - & - & \(0.1\) & 27.5 & 29.2 & 6153.8 & ✗ \\ Arvis  & Text & - & - & \(2.8 10^{-4}\) & 30.9 & 200.1 & 23.31 & ✗ \\ QQ  & Social & - & - & \(2.7 10^{-3}\) & 291.2 & 2467.7 & 800.6 & ✗ \\   & & & & & & & & \\   & Blockchain & ✗ & ✗ & - & - & - & & ✓ \\ LiveGraphLab  & Blockchain & ✗ & ✗ & - & - & - & & ✓ \\ EX-Graph  & Blockchain & ✗ & ✗ & - & - & - & - & ✓ \\   & Blockchain & & & Ethereum & 0.3 & 1493.7 & 2225.2 & 14273.2 & ✓ \\   & & Polygon & 0.5 & 1184.2 & 2523.6 & 525.1 & ✓ \\    & & BSC & 0.6 & 1650.5 & 3346.4 & 4660.0 & ✓ \\  

Table 1: Comparisons among open-source graphs-of-graphs and blockchain graph datasets with ours. The symbol ”-” indicates data that is not related or applicable.

**Accounts and Transactions.** On EVM-compatible chains, two primary account types exist: externally owned accounts (EOAs) and smart contracts. EOAs resemble traditional bank accounts but are controlled by individual private keys, while smart contracts are programmable accounts that execute automatically under specified conditions. Each account has a unique address, maintains a balance, and is controlled by a private key. Transactions include details such as the sender's and receiver's addresses, timestamps, values, and the transaction hash, ensuring that each transaction is immutable and traceable.

### Data Collection

This section summarizes the statistics of our datasets, focusing on ERC20 tokens on Ethereum and Polygon, and BEP20 tokens on BSC. These token standards are among the most popular in the blockchain industry . Our datasets include three independent sets, each targeting a different blockchain, comprising a total of 268,282,924 transactions conducted by 18,600,142 addresses across 24,316 tokens. These transactions record the full history of these tokens from the inception to February 2024. Detailed statistics are presented in Table 2.

**Transaction Data.** All blockchain transactions are transparent, traceable, and publicly available, achieved through the secure linkage of blocks using cryptographic techniques . Prominent blockchain explorers provide tools to easily access blockchain transaction data. We utilize public APIs from Etherscan2, Polygonscan3, and Bscscan4 to facilitate the collection of token transactions. Each transaction includes sender and recipient addresses, transfer value, timestamp, unique transaction hash, and other relevant details.

**Tags.** We collect category tags of the tokens from the three prominent blockchain explorers as labels. We reviewed the tags for all ERC20 and BEP20 tokens launched no later than February 2024 across these platforms. We filtered the tokens to include only those with more than 10,000 addresses or 1,000,000 transactions to ensure fair data distribution. The label details are as follows:

* For fraud cases, we labeled tokens flagged by explorers as suspicious phishing or hack tokens. These include various kinds of spammed tokens, such as those that have been spammed to many users or those that pretend to be famous tokens, like fake USDT. In total, 7,198 fraud tokens were identified, representing 29.6% of the dataset.
* For other classes, we labeled tokens using the category tags given by the explorers. The most popular classes in the dataset include DeFi tokens, which are related to decentralized finance products; MEME tokens, often inspired by internet memes and characters; and Gaming tokens, which are associated with electronic gaming.

Figure 0(a) represents the diversity of categories within our dataset as a label cloud. In total, 313 categories are found in these tokens. However, the distribution of categories is very skewed, as shown in Figure 0(b). Specifically, the top 5 categories on each chain can cover more than half of all tokens in our dataset.

### Graph Construction

In this section, we present how we construct our Graphs of Graphs (GoG) datasets. We build two types of graphs: local graphs that represent transactions of tokens, and global graphs that represent token-token relationships. Figure 2 illustrates a sample of our GoG structure.

 
**Chain** & **\# Token** & **Start Month** & **End Month** & **\# Transactions** & **\# Addresses** & **\# Categories** \\  Ethereum & 14,464 & 2016-02 & 2024-02 & 81,788,211 & 10,247,767 & 290 \\ Polygon & 2,353 & 2020-08 & 2024-02 & 64,882,233 & 1,801,976 & 112 \\ BSC & 7,499 & 2020-09 & 2024-02 & 121,612,480 & 6,550,399 & 149 \\  

Table 2: Statistics of the datasets.

#### 3.3.1 Local Graph Construction

A local graph represents transactions of a single token. Defined as \(G_{local}=(N_{L},E_{L})\), the graph consists of \(|N_{L}|\) nodes representing accounts and \(|E_{L}|\) edges representing transactions. Each edge (\(e=(u,v,w,t)\)) signifies a transaction from account \(u\) to \(v\), involving a value \(w\) transferred at time \(t\). The timestamp \(t\) indicates when the transaction occurs, with the first transaction timestamp marking when the token becomes active on-chain.

#### 3.3.2 Global Graph Construction

A global graph aims to model the correlation of various tokens across blockchain platforms. Specifically, we model the transaction networks of individual tokens into nodes, forming a graph \(G_{global}=(N_{G},E_{G})\). \(N_{G}\) denotes the set of all local graphs, and \(E_{G}\) represents the inter-token relationships. The edges in the global graph are weighted by the Jaccard Coefficient, defined as:

\[J(A,B)=\]

where \(A\) and \(B\) are the node sets of the local transaction graphs for two distinct tokens. The Jaccard Coefficient quantifies the degree of overlap in user bases between different tokens, offering insights into the inter-connectedness and user-sharing across tokens. Each edge weight reflects this inter-connectedness, providing a measure of relational strength and activity overlap between tokens at a global scale. This approach of finding common addresses is inspired by previous studies on social media groups  and multi-layer blockchain analysis . We remove the null address5 when measuring to prevent all tokens involved in transactions with null addresses from being connected. As new transactions are executed on the blockchain platforms, global edges in our graph dynamically adapt to changes in local transaction information, as detailed in Appendix D.

Figure 1: Token categories analysis.

Figure 2: A sample GoG structure with 5 tokens. Blue wallets and contracts are involved in transactions of multiple tokens, while black wallets and contracts are involved in only one token’s transactions.

## 4 Observations and Analysis

### Local Graph Analysis

We examine several graph properties within distinct classes of local graphs to deepen our understanding of token transfer networks. Figure 3 displays three crucial graph properties: **number of edges**, **reciprocity**, and **clustering coefficient**, segmented by the top five most prevalent classes across three blockchains. Notably, the "FxChild" class is exclusive to Polygon, while the other four classes are observed across all chains.

Figure 2(a) illustrates the distribution of the number of edges across token graphs on three blockchains. While DeFi, MEME, and Gaming tokens generally show a comparable number of edges, Fraud tokens consistently exhibit fewer edges across all platforms, with a notably higher node count on Polygon. This suggests less connectivity among participants in fraud-related activities.

Figure 2(b) shows the reciprocity of these token graphs, reflecting the proportion of mutual connections. Results indicate that MEME tokens display higher reciprocity, aligning with the interactive nature of these communities. In contrast, Fraud tokens show the lowest reciprocity, indicating that fraudulent transactions are less likely to be reciprocal, possibly due to their unilateral nature.

Figure 2(c) presents the clustering coefficient, which indicates how closely nodes in a graph cluster, reflecting the formation of tight-knit groups or collusive clusters. A higher average clustering coefficient suggests the presence of prevalent cliques or active trading communities. Fraud tokens demonstrate the lowest clustering coefficients, suggesting sparse connectivity, whereas MEME tokens exhibit the highest, indicative of tight-knit communities. Additionally, tokens on BSC display the widest range and highest clustering coefficients compared to those on Ethereum and Polygon, pointing to more clustered network structures on BSC.

### Global Graph Analysis

To understand how the Graph of Graphs (GoG) approach enhances our comprehension of the intricate relationships and interactions within the ERC20 markets, we perform sophisticated network analyses, focusing on **edge weight analysis** and **node centrality** to identify influential tokens.

**Finding (2):** The predominance of low edge weights across the network suggests limited interaction between different tokens. High weights are predominantly observed among local graphs within the same class, especially those implicated in fraudulent activities.

Edge weights in the global graph, determined by the Jaccard coefficient of common nodes, illustrate the interconnectedness of tokens based on shared investors or smart contracts. We analyze the distribution of edge weights in the global networks, as demonstrated in Figure 4. This distribution is predominantly characterized by small values, indicating sparse connections across most token pairs, although there are exceptions with a few highly interconnected node pairs. Moreover, as shown in Table 3, the contract pairs with the highest weights on each blockchain consistently involve local graphs within the same class, notably marked by a prevalence of fraud-related contracts. This pattern suggests concentrated activity or potential collusive behaviors within these groups of tokens.

Figure 3: Distribution of graph properties across three chains.

Node degree centrality is a critical metric for identifying hub nodes--those that are most interconnected within the market. We analyze node degree centrality within each global graph, aiming to identify tokens that act as central nodes in their respective markets. First, we find that tokens with high node degrees tend to belong to the most popular classes in the blockchain. More than 70% of the top 10 nodes with the largest degree centrality belong to the most popular classes, including Fraud, FxChild, and Gaming. Second, we explore the correlation between node degree centrality in global graphs and the number of edges in local graphs, as illustrated in Figure 5. Results reveal that token graphs with a higher number of edges are more likely to become high-degree nodes in global graphs. Interestingly, we found that very few tokens have between 150 and 250 transactions, which creates a noticeable gap in the Figure 4(a).

## 5 Downstream Applications

The observations presented earlier provide a comprehensive overview of our GoG datasets. Our findings highlight how the GoG approach enhances our understanding of the complex transfer graphs across various token classes. These properties introduce new challenges for several downstream tasks. In this section, we investigate two studied tasks to address these questions:

Figure 4: Cumulative distribution of edge weights in three global graphs.

Figure 5: Global node degree centrality vs. local graph number of edge.

  
**Chain** &  &  &  &  &  \\   & 0x3d09...c61cce & 0x6752...1e761a & Fraud & Fraud & 1.0 \\  & 0x0a34...1451b & 0x5fbf...762f24 & Fraud & Fraud & 1.0 \\  & 0x3b3f...7d8429 & 0x6249...29af88 & Deprecated & Deprecated & 1.0 \\   & 0x8db00...06f7ec & 0x36f5...672c5b & FxChild & FxChild & 1.00 \\  & 0xbbcc...85e429 & 0x1a8...615f68 & FxChild & FxChild & 0.98 \\  & 0x7e8...9304f7 & 0xee35...52699c & Gaming & Gaming & 0.97 \\   & 0axaf71...020ac2 & 0x362d...881ffc & Play-to-Earn & Play-to-Earn & 1.0 \\  & 0xaefe...55aeb2 & 0x9775...4e74ec & Fraud & Fraud & 1.0 \\  & 0x5fbb...42a2e4 & 0x9775...4e74ec & Fraud & Fraud & 1.0 \\   

Table 3: Top 3 connected contracts with highest weight across different chains.

* Q1: How can the GoG approach improve accurate classification of token graph categories?
* Q2: How can the GoG approach improve fraud detection performance on blockchain graphs?
* Q3: How do graph learning models perform across different blockchain datasets?

Additionally, we explore investment prediction as a future edge prediction task in Appendix F. These experiments demonstrate the capability of the GoG approach to handle various graph learning tasks in the blockchain domain, thereby underscoring its potential for practical applications.

### Multi-class Graph Classification

Graph classification is a crucial aspect of graph learning research . By predicting the attributes of each graph within a collection, graph classification facilitates exploration across various domains, including image classification , document analysis , and chemical discovery . In this section, we focus on multi-class graph classification, aiming to categorize tokens into distinct classes. Given the scarcity of some minor classes, we concentrate on the top token categories within each chain for our classification task. Specifically, we classify tokens into two groups: (1) the top 3 categories, and (2) the top 5 categories.

**Models.** We compare two groups of models. Group 1 consists of GNN models applied to individual graphs, including: (1) GCN , (2) GAT , (3) GIN , (4) ResidualGCN , and (5) GraphSage . Group 2 comprises GNN models tailored for handling collections of graphs, including: (1) SEAL , which applies a self-attentive graph embedding approach using GCN as the base model to embed individual graph instances into fixed-length vectors for classification; (2) GoGNN , which enhances GCN's capabilities by incorporating an attention-based pooling mechanism and GAT to effectively identify key substructures within local graphs; and (3) DVGGA , which combines a denoising autoencoder with a self-attentive GNN and readout function.

**Settings.** We filter out token graphs with fewer than five nodes or edges to maintain data integrity. After applying this criterion, less than 2% of tokens were removed from all three datasets, ensuring that our analysis still represents the majority of the data. Guided by insights from subsection 4.2, we establish a threshold for edge weight, including only weights exceeding 0.01 to identify closely connected tokens. When experimenting with both groups of models, we utilize incoming degree, outgoing degree, and total degree as node features for the local graphs. For a fair comparison, we conduct all experiments as supervised learning tasks. The dataset is divided into training and testing sets following an 80/20 ratio. Then, we employ Macro-F1 and Micro-F1 as evaluation metrics. Macro-F1 computes the F1-score separately for each class and then averages them, giving equal importance to all classes regardless of their frequency. In contrast, Micro-F1 assigns more weight to classes with higher frequencies, reflecting their prevalence in the dataset.Due to the imbalance in our dataset, we primarily use Macro-F1 for model comparisons. Each experiment is repeated three times with different seeds, and we report the average performance and standard deviation.

**Results.** The results of the 3-class and 5-class classification tasks are summarized in 3. Several notable observations emerge from these results. First, GoG models exhibit superior performance compared to individual GNN models across most tasks in both classification scenarios. Specifically, SEAL demonstrates the best F1-macro performance, showing up to 28% and 16% improvements respectively in the 3-class category on BSC, and up to 44% and 11% improvements respectively in the 5-class category on Ethereum, compared to the average performance of non-GoG models. Second, as the classification task becomes more complex by including additional minor classes, the performance of both model groups notably declines. The advantage of GoG models over individual GNN models diminishes in 5-class classification compared to 3-class classification, emphasizing the necessity for further development of advanced GoG models, especially for minor-class classification. Third, all model groups demonstrate less satisfactory performance on the Polygon dataset. This could be attributed to the dataset's smaller size and greater imbalance compared to others. Therefore, there is a clear need for devising robust graph learning models capable of effectively capturing the intricacies of the Polygon dataset. In Appendix G, we conducted experiments predicting the class label of younger tokens using the information about older tokens. Results show that for Ethereum and BNB, the performance shows slight differences from the results in Table 4. However, for Polygon, the performance deteriorates significantly.

### Graph Anomaly Detection

Anomaly detection is a significant task in machine learning with numerous applications, including anti-money laundering , social media analysis , and disease detection . In this section, we focus on detecting anomalies in tokens, specifically identifying fraudulent tokens from non-fraudulent ones. Given the skewness of fraud and non-fraud tokens, we approach graph anomaly detection as an unsupervised learning task.

**Models.** We compare two groups of models. Group 1 includes anomaly detection methods for multivariate data, such as probabilistic and outlier ensemble methods. Specifically, we compare (1) COPOD , (2) IForest , (3) DIF , and (4) VAE . Group 2 includes anomaly detection methods on graphs, primarily GNN+AE methods. Specifically, we compare (1) GAE , (2) DONE , (3) DOMINANT , (4) AnomalyDAE , and (5) CoLA . Detailed introductions of these methods are presented in Appendix E.

**Settings.** We use the same dataset settings as in subsection 5.1 to filter out small token graphs and build global graphs. For multivariate data analysis, drawn from our observations in subsection 4.1, we measure various graph properties, including the number of nodes, edges, assortativity, density, and reciprocity. These features are normalized to ensure consistency across the dataset. Our experimental setup follows the frameworks provided by PyOD  and PyGOD . The dataset is divided into train/validation/test sets following an 80/10/10 ratio. Evaluation metrics include the area under the curve (AUC) and Average Precision (AP). AUC measures the model's ability to rank anomalies higher than normal instances, while AP quantifies the precision-recall balance, providing insights into model performance regarding the anomaly detection task.

**Results**. The performance of graph anomaly detection methods across three blockchains is summarized in Table 7. Interestingly, on the BSC dataset, most graph outlier detection methods outperform those based on graph structural data. For example, AnomalyDAE shows up to 3.34% improvement in AUC and 54.20% improvement in AP, compared to the average performance of detection models based on graph structural data. However, on Ethereum and Polygon, methods based on graph structural data demonstrate superior performance. This variation may be attributed to differences in fraudulent token behaviors and network structures specific to each blockchain. Additionally, consistent with the findings in subsection 5.1, both groups of methods exhibit poorer performance on the Polygon dataset, highlighting the need for further research. In Appendix H, we explored an additional method to represent token graphs by employing the DeepWalk algorithms . Results show that

    &  &  &  \\   & F1-macro & F1-micro & F1-macro & F1-micro & F1-macro \\   \\  GCN & 62.48\(\)6.31 & 85.05\(\)1.38 & 28.82\(\)1.86 & 74.24\(\)0.83 & 51.43\(\)5.93 & 57.02\(\)3.37 \\ GAT & 60.22\(\)7.04 & 84.62\(\)1.23 & 29.90\(\)2.60 & 73.94\(\)1.79 & 54.48\(\)6.15 & 59.96\(\)3.19 \\ GIN & 39.79\(\)11.02 & 78.58\(\)3.07 & 28.82\(\)1.53 & 74.26\(\)0.83 & 43.29\(\)2.93 & 55.90\(\)2.86 \\ ResidualGCN & 62.85\(\)6.07 & 84.18\(\)1.50 & 28.50\(\)0.35 & 74.37\(\)0.18 & 50.73\(\)4.59 & 56.78\(\)2.29 \\ GraphSage & 64.17\(\)8.53 & 85.51\(\)2.05 & 31.71\(\)2.56 & 74.48\(\)0.68 & 56.70\(\)6.12 & 61.36\(\)2.78 \\  SEAL & **67.31**\(\) 3.60 & **86.65**\(\) 1.30 & 29.64\(\)1.70 & **74.51**\(\) 0.16 & **63.77**\(\) 0.59 & **65.59**\(\) 0.42 \\ GoGNN & 64.20\(\)4.29 & 85.89\(\)0.47 & **36.11**\(\) 0.50 & 66.09\(\)11.02 & 53.98\(\)4.55 & 58.03\(\)2.90 \\ DVGGA & 37.23\(\)10.57 & 77.84\(\)1.16 & 28.44\(\)0.04 & 74.22\(\)0.17 & 41.31\(\)8.67 & 47.03\(\)7.64 \\   \\  GCN & 36.88\(\)4.90 & 78.37\(\)1.81 & 16.40\(\)0.65 & 68.79\(\)0.66 & 27.49\(\)3.27 & 43.09\(\)1.2 \\ GAT & 36.46\(\)4.44 & 78.46\(\)1.42 & **20.04**\(\) 3.54 & 68.85\(\)1.08 & 29.85\(\)3.12 & 44.97\(\)2.77 \\ GIN & 19.24\(\)4.62 & 71.31\(\)2.18 & 16.41\(\)0.65 & 68.82\(\)0.63 & 22.01\(\)2.32 & 41.33\(\)3.19 \\ ResidualGCN & 33.72\(\)5.56 & 76.69\(\)1.91 & 16.47\(\)0.86 & 68.6\(\)12.30 & 23.82\(\)5.09 & 40.33\(\)3.90 \\ GraphSage & 38.91\(\)5.31 & 79.73\(\)1.97 & 18.01\(\)1.64 & 68.88\(\)0.65 & 30.22\(\)3.34 & 46.15\(\)2.20 \\  SEAL & **45.09**\(\) 10.79 & **81.59**\(\) 2.06 & 16.90\(\)0.82 & **69.02**\(\) 0.15 & **31.83**\(\) 3.31 & **46.50**\(\) 1.93 \\ GoGNN & 32.51\(\)3.58 & 71.74\(\)6.56 & 19.70\(\)2.62 & 59.19\(\)12.41 & 23.33\(\)8.42 & 38.54\(\)6.30 \\ DVGGA & 21.60\(\)7.21 & 71.70\(\)2.29 & 18.03\(\)2.38 & 67.20\(\)2.42 & 16.92\(\)5.77 & 34.91\(\)4.89 \\   

Table 4: 3-class and 5-class classification performance by blockchain.

while GoG models benefit from the use of the DeepWalk algorithm, the performance of multivariate outlier detection methods decreases. In general, the adoption of the GoG approach presents new opportunities to enhance graph anomaly detection in the blockchain domain, as evidenced by the varied performance observed across different blockchains.

## 6 Conclusion

In this paper, we introduced a novel dataset based on the Graphs of Graphs (GoG) approach within the blockchain domain. Our dataset includes local graphs that detail individual token transactions and global graphs that model interactions between tokens across multiple blockchain platforms. This approach provides a comprehensive view of transaction activities within the blockchain ecosystem. We conducted systematic analyses and experiments using the GoG approach, revealing significant patterns and characteristics in the blockchain environment. Our findings suggest that GoG models have the potential improve various applications, such as link prediction, anomaly detection, and token classification, especially when compared to traditional GNN methods. We believe this work lays a foundation for future research in graph learning and encourages further exploration of the complex relationships within blockchain networks.

## 7 Border Impact and Limitation

Our datasets offer researchers fresh opportunities to explore and analyze blockchain graphs. Insights from this analysis could aid in developing stronger market structures and enhanced security protocols within crypto token platforms. Our classification and anomaly detection models aim to enhance predictive capabilities, particularly in situations where labels may be incomplete or unavailable. For instance, while only a small fraction of existing tokens has been labeled by blockchain explorers, there are over 900,000 ERC20 tokens on Ethereum, with new tokens being launched daily that may not yet be classified. Our models can predict these labels more quickly and provide detailed insights. By leveraging similarities within the data, the GoG approach reduces reliance on labeled data and improves the accuracy of predictions for unlabeled tokens.

However, our datasets have several limitations that must be acknowledged. First, the lack of restrictions on creating multiple accounts on the same blockchain allows a single entity to control multiple accounts. This can distort interaction patterns and connectivity metrics within our GoG datasets. Second, while our model is designed to enhance predictive capabilities in cases where labels are incomplete, it is limited by the fact that only a small fraction of existing tokens has been labeled by blockchain explorers. Although we rely on trusted blockchain explorers for labeling, there is always a risk of misclassification, especially with fraudulent tokens. Therefore, our model is intended to augment, not replace, human judgment; predictions should be viewed as suggestions that require further scrutiny. Third, the public nature of blockchain data raises privacy concerns. Our datasets link transactions to wallet addresses, potentially enabling the tracking of individual behaviors, which could lead to targeted advertising or surveillance.

    &  &  &  \\  Model & AUC & AP & AUC & AP & AUC & AP \\  COPOD & 83.27\(\)1.09 & 27.25\(\)0.4 & 60.52\(\)13.27 & **11.33**\(\) 6.49 & 52.87\(\)2.09 & 14.18\(\)0.69 \\ IForest & 84.10\(\)0.55 & 26.93\(\)0.56 & 64.33\(\)11.43 & 10.79\(\)5.67 & 58.36\(\)2.83 & 11.58\(\)1.57 \\ DIF & **84.56**\(\) 1.31 & 32.69\(\)0.95 & 68.04\(\)10.11 & 7.99\(\)2.06 & 51.57\(\)0.49 & 17.52\(\)0.56 \\ VAE & 67.25\(\)1.61 & 31.46\(\)0.49 & **72.45**\(\) 10.41 & 10.56\(\)0.59 & 59.03\(\)0.20 & 18.70\(\)1.13 \\  GAE & 70.85\(\)2.58 & 31.21\(\)0.68 & 62.16\(\)0.09 & 3.85\(\)0.01 & 56.33\(\)1.25 & 17.11\(\)0.35 \\ DONE & 74.93\(\)2.91 & 29.03\(\)0.92 & 62.21\(\)0.30 & 1.95\(\)0.07 & 65.86\(\)3.70 & 10.64\(\)1.10 \\ DOMINANT & 75.18\(\)2.69 & **43.14**\(\) 19.69 & 70.45\(\)7.93 & 3.55\(\)1.48 & **78.87**\(\) 0.23 & 8.49\(\)0.03 \\ AnomalyDAE & 65.82\(\)8.47 & 39.24\(\)10.09 & 60.94\(\)3.06 & 3.72\(\)0.42 & 62.49\(\)9.23 & **22.71**\(\) 6.98 \\ CoLA & 65.15\(\)7.17 & 35.80\(\)7.04 & 54.90\(\)2.74 & 3.51\(\)0.64 & 60.87\(\)3.63 & 19.64\(\)6.29 \\   

Table 5: Graph anomaly detection performance by blockchain. We report the ratio of number of non-fraud:fraud case of each data at the top.