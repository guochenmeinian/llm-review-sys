# DreamMesh4D: Video-to-4D Generation with

Sparse-Controlled Gaussian-Mesh Hybrid Representation

 Zhiqi Li\({}^{*1,2}\)   Yiming Chen\({}^{*1,2}\)   Peidong Liu\({}^{}\)\({}^{2}\)

Equal Contribution;  \({}^{}\) Corresponding author.

\({}^{1}\) Zhejiang University  \({}^{2}\) Westlake University

{lizhiqi49, chenyiming, liupeidong}@westlake.edu.cn

###### Abstract

Recent advancements in 2D/3D generative techniques have facilitated the generation of dynamic 3D objects from monocular videos. Previous methods mainly rely on the implicit neural radiance fields (NeRF) or explicit Gaussian Splatting as the underlying representation, and struggle to achieve satisfactory spatial-temporal consistency and surface appearance. Drawing inspiration from modern 3D animation pipelines, we introduce DreamMesh4D, a novel framework combining mesh representation with geometric skinning technique to generate high-quality 4D object from a monocular video. Instead of utilizing classical texture map for appearance, we bind Gaussian splats to triangle face of mesh for differentiable optimization of both the texture and mesh vertices. In particular, DreamMesh4D begins with a coarse mesh obtained through an image-to-3D generation procedure. Sparse points are then uniformly sampled across the mesh surface, and are used to build a deformation graph to drive the motion of the 3D object for the sake of computational efficiency and providing additional constraint. For each step, transformations of sparse control points are predicted using a deformation network, and the mesh vertices as well as the surface Gaussians are deformed via a novel geometric skinning algorithm. The skinning algorithm is a hybrid approach combining LBS (linear blending skinning) and DQS (dual-quaternion skinning), mitigating drawbacks associated with both approaches. The static surface Gaussians and mesh vertices as well as the dynamic deformation network are learned via reference view photometric loss, score distillation loss as well as other regularization losses in a two-stage manner. Extensive experiments demonstrate superior performance of our method in terms of both rendering quality and spatial-temporal consistency. Furthermore, our method is compatible with modern graphic pipelines, showcasing its potential in the 3D gaming and film industry. The source code is available at our website: https://lizhiqi49.github.io/DreamMesh4D.

## 1 Introduction

The emergence and development of Generative Artificial Intelligence (GenAI) have significantly revolutionized 3D generation techniques in recent years . The technology has effectively allowed the creation of static objects, including their shape, texture, and even an entire scene from a simple text prompt or a single image. Recently, the wave of advancement has been propelled to the filed of dynamic (4D) content generation , which offers immense potential in fields including, but not limited to, AR/VR, filming, gaming and animation. However, it's still quite challenging to efficientlygenerate high-quality 4D content due to its increased spatial-temporal complexity and higher demand on algorithm design.

The promising strides in 3D generation are largely attributed to the pre-trained large 2D diffusion models . In particular, score distillation sampling (SDS)  enables the 3D generation  from scratch by distilling 3D knowledge from a pre-trained 2D diffusion model . Following works on text-to-3D  and image-to-3D  have further improved the performance of 3D generation tasks both in quality and stability. Inspired by the successes of SDS-based 3D generation, recent works  explore generating 4D assets by distilling prior knowledge from pre-trained video diffusion models  or novel-view synthesis models . Both text-to-4D  and image-to-4D methods  mainly rely on pre-trained video diffusion models, which are not yet capable of generating high-quality video, thus usually struggle to generate high-quality 4D content. On the contrary, video-to-4D methods  directly generate 4D assets from off-the-shelf monocular videos, making the results more appealing and with better spatial-temporal consistency. Existing video-to-4D methods either rely on the implicit dynamic NeRFs  or explicit dynamic Gaussian splatting  as the underlying representation. Nevertheless, both of them do not have tight constrains for surface, leading to redundant optimization space and impeding the learning of deformation.

Inspired by modern graphic pipelines for 3D animation, we propose **DreamMesh4D**, which exploits 3D triangular mesh representation and sparse-controlled geometric skinning methods  for video-to-4D generation. To better supervise the generation with 2D signals, instead of using classic mesh with UV texture maps, we choose a hybrid representation, SuGaR , which marries 3D Gaussians to mesh surface for more elaborate appearance modeling. Flat Gaussians are bound to mesh faces based on barycentric coordinates hence the rendering process of 2D images is differentiable with respect to both the position of mesh vertices and the attributes of Gaussians. For high-quality object modeling and efficient motion driving of the object, our method is designed in a static-to-dynamic optimization manner. In particular, during the static stage, an initial coarse mesh is generated utilizing existing image-to-3D generation methods . Then we refine its both geometry and texture by jointly optimizing the mesh vertices as well as the attributes of bound surface Gaussians under the hybrid representation via both the reference image photometric loss and the SDS loss. For dynamic learning, we uniformly sample sparse control nodes from the surface of the refined mesh, to build a deformation graph. Then at each timestamp, transformation associated with each control node is predicted by a deformation network. The deformation of all mesh vertices and surface Gaussians are obtained from those predicted transformations via a novel geometric skinning algorithm, which benefits from both the LBS (linear blending skinning) and DQS (dual-quaternion skinning) methods. The deformation network is optimized under the supervision of photometric loss from reference video frames, novel-view SDS loss and geometric regularization terms.

Figure 1: Given monocular videos, our method is able to generate high-fidelity dynamic meshes. We also produce a composited scene demo (top bar and left side of the figure) with the generated dynamic meshes, showcasing our methodâ€™s compatibility with modern 3D engines.

Extensive experiments are conducted and demonstrate that our method can generate high-fidelity dynamic textured mesh from monocular video, and significantly outperforms previous works both quantitatively and qualitatively, establishing new benchmark in the field of video-to-4D generation. As shown in Fig. 1, our generated assets can be directly simulated in modern 3D engines, showcasing its potential in the 3D gaming and film industries.

## 2 Related Work

3D GenerationSince the introduction of score distillation sampling (SDS) by DreamFusion , subsequent works [24; 5; 57; 35; 48; 49; 23] have significantly improved the performance of optimization-based 3D generation algorithms. Many works adopt a multi-stage optimization strategy [24; 5; 57; 48] to enhance generated appearance. Another line of research [26; 44; 27; 19] focuses on training multi-view diffusion models to inject multi-view supervision into SDS loss for addressing the Janus problem. DreamGaussian  and GaussianDreamer  pioneer the usage of 3D Gaussian as the underlying representation and achieve 3D content generation in minutes. Although these methods demonstrate the potential of 3D Gaussian in 3D content generation, obtaining an object with high-quality geometry is still quite challenging. In this work, we explore to employ a Gaussian-mesh hybrid representation  in our 4D generation tasks for better modeling of both object surface geometry and texture.

4D RepresentationsDynamic 3D representations form the foundation of 4D reconstruction and generation tasks. Most current methods extend static NeRF  to dynamic scenarios. These approaches, such as deformable [32; 34; 51; 59] and time-varying [4; 7; 8; 6] NeRF-based methods, are prevalent. There are also some works trying to model dynamic with 4D neural implicit surface [56; 14]. However, these implicit representations suffer from long optimization time and low reconstruction quality due to its computationally expensive volume rendering and implicit representation. Recent interest in 4D tasks has focused on 3D Gaussian representations due to their fast rendering speed and explicit nature. Some works [63; 58; 22] train networks to predict Gaussian kernel deformations, while others model kernel motion via polynomial representation or per-frame optimization [28; 21]. Besides, both SC-GS  and HiFi4G  employ sparse control points for Gaussian kernel deformation, with SC-GS using LBS and HiFi4G using DQS to drive Gaussians motion, thus ensuring spatial-temporal consistency. In this work, we propose to deform the object through a novel geometric skinning method, handling the artifacts associated with both LBS and DQS.

4D GenerationAlthough great progress has been achieved in 3D generation tasks, 4D generation is still challenging due to its requirement on additional temporal supervision. Since current pre-trained video diffusion models [3; 54] still struggle to generate high-quality video contents, it is challenging to distill useful motion knowledge via SDS optimization. Hence, the performance of existing text-to-4D [45; 1; 25] and image-to-4D methods  usually struggle with low appearance quality. Another line of works focus on video-to-4D generation [12; 38; 65]. These methods leverage current multiview diffusion models [26; 43; 27] to calculate the SDS loss [38; 12; 60] or generate per-frame multi-view images [66; 62] as supervision signal. Among them, a concurrent work of our method, SC4D , optimizes a set of sparse-controlled dynamic 3D Gaussians by per-frame SDS loss from Zero123  with a coarse-to-fine strategy. However, the issue of unsatisfying surface quality caused by 3D Gaussian-based representation still exists. In contrast, our method is grounding on a Gaussian-mesh hybrid representation , enhancing the reconstruction quality both in texture and geometry.

## 3 Method

In this section, we first introduce the relevant preliminaries in section 3.1. Then we illustrate the details of DreamMesh4D which is divided into static stage and dynamic stage in section 3.2 and 3.3 respectively. The overview of our method is presented in Fig. 2.

### Preliminaries

Geometric Skinning AlgorithmsGiven a mesh with \(N_{v}\) vertices, \(=\{,\}\) where \(=\{_{i}|_{i}^{3}\},i\{1,2,...,N _{v}\}\) is the set of vertices and \(\) represents the triangle faces. In geometric skinning algorithms, there are also some sparse control nodes (bones/skeletons)\(\{_{i}|_{i}^{3}\},i\{1,2,...,N_{p}\}\), where \(N_{p}\) is the number of control nodes. For a mesh vertex \(\), its deformation is calculated by blending a number of neighboring control nodes \(()\) through skinning algorithms. The local deformation for a control node \(()\) can be decomposed into a deformation matrix \(F_{}^{3 3}\) and a translation vector \(t_{}^{3}\), and the deformation matrix can be further decomposed into a rotation matrix \(R_{}^{3 3}\) and a shear matrix \(S_{}^{3 3}\) using polar decomposition. The strength of the influence of node \(\) to vertex \(\) can be represented as \(w_{}\) and \(_{()}w_{}=1\). Linear blending skinning (LBS)  computes the deformation of vertex \(\) by linearly blending the influence of nodes in \(()\):

\[}^{lbs}=_{()}w_{ }(F_{}+t_{}).\] (1)

LBS is widely used due to its simple formulation and natural animations. However, it suffers from the well-known "volume loss" or "candy wrapper" artifacts under complex deformation. As an enhancement, dual-quaternion skinning (DQS)  represents the transformation of node \(\) with a unit dual-quaternion \(_{}=DQ(R_{},t_{})\). Then the deformation of \(\) can be calculated with DQS by:

\[}^{dys}=^{*},=()}w_{} _{}}{||_{()}w_{}_{}||},\] (2)

where \(^{*}\) represents the conjugate of \(\). DQS can eliminate the artifacts associated with LBS, but cannot handle non-rigid deformation since the strain effect is not considered. It also suffers from an undesirable joint-bulging artifact while blending, which requires artistic manual work to fix .

3D Gaussians and SuGaRGaussian Splatting  represents the scene as a collection of 3D Gaussians, where each Gaussian \(g\) is characterized by its center \(_{g}^{3}\) and covariance \(_{g}^{3 3}\). The covariance \(_{g}\) is parameterized by a scaling factor \(s_{g}^{3}\) and a rotation matrix represented via a unit quaternion \(q_{g}^{4}\). Additionally, each Gaussian maintains opacity \(_{g}\) and color features \(c_{g}^{C}\) for rendering via splatting. Typically, color features are represented using spherical harmonics to model view-dependent effects. During rendering, the 3D Gaussians are projected onto the 2D image plane as 2D Gaussians, and color values are computed through alpha composition of these 2D Gaussians in front-to-back depth order. While the vanilla Gaussian Splatting representation may not perform well in geometry modeling, SuGaR  introduces several regularization terms to enforce flatness and alignment of the 3D Gaussians with the object surface. This facilitates extraction of a mesh from the Gaussians through Poisson reconstruction . Furthermore, SuGaR offers a hybrid representation by binding Gaussians to mesh faces. A SuGaR mesh can be represented as \(=\{,,\}\) where \(\) denotes all surface Gaussians. For a triangle face \(f\), the Gaussians \((f)\) bound on \(f\) are defined with barycentric coordinates. This hybrid representation allows joint optimization of texture and geometry through backpropagation.

### Static Stage

The purpose of the static stage is to generate a refined Gaussian splats bounded triangular mesh. This procedure starts with a coarse mesh generated from a reference image \(I^{*}\) that is sampled from all video frames \(\). Although there exists several fast mesh generation methods [68; 61], we refer to Zero123-based SDS optimization for its stability. In particular, we conduct simple SDS training on a set of randomly initialized 3D Gaussians for a fixed number of steps with regular densification and pruning. After that, we stop densification and pruning, and include SuGaR's regularization terms  to make Gaussians aligned to object surface. Finally all Gaussians with opacity lower than a threshold \(=0.5\) are pruned, after which Poisson reconstruction  is performed to extract a coarse mesh.

On the generated coarse mesh, we attach \(x=6\) new flat Gaussians to every triangle face. For each training step, we render RGB image \(^{*}\) and mask \(^{*}\) under reference view to calculate RGB loss \(^{*}_{ref}=||^{*}-I^{*}||_{2}^{2}\) and mask loss \(^{*}_{mask}=||^{*}-M^{*}||_{2}^{2}\). The SDS loss \(^{*}_{SDS}\) based on Zero123  is also computed under randomly sampled views. The total loss for static SuGaR optimization is:

\[_{static}=^{s}_{SDS}^{s}_{SDS}+^{s}_{ref} ^{s}_{ref}+^{s}_{mask}^{s}_{mask},\] (3)

where \(^{s}_{SDS}\), \(^{s}_{ref}\) and \(^{s}_{mask}\) are the weights for different loss terms in static stage.

### Dynamic Stage

In this section, we are going to delve into the deformation procedure for the Gaussian-mesh hybrid representation. First, we will discuss the construction of the deformation graph on the surface of the refined mesh. Then, we will explain the deformation flow, which progresses from the sparse control nodes to the mesh vertices, and ultimately to the surface Gaussians. We will break down each step to give a clear picture of the entire process.

#### 3.3.1 Deformation Graph Construction

We begin by uniformly sampling \(N_{node}\) sparse points on the surface of the refined mesh to serve as control nodes. To establish connections between the mesh vertices and the sparse control nodes, instead of using simple Euclidean distance to locate the nearest nodes (KNN), we pick \(N_{neighbor}\) nodes with the shortest geodesic distance (as indicated by GeoDist in Fig. 2) based on the mesh's topology. This ensures that inappropriate connections between disparate mesh regions are avoided. Then, for a vertex \(\), the influence \(w_{}\) of each neighboring control node \(()\) is calculated following :

\[w_{}=_{}}{_{_{ }()}_{_{}}}, _{_{}}=1-- _{k}||}{d_{}}^{2},\] (4)

where \(d_{}\) is the distance to the \((N_{neighbor}+1)\)-nearest node.

#### 3.3.2 Deformation with Adaptive Hybrid Skinning

Given that the object's texture was refined in the previous static stage, we fix the Gaussians' appearance properties (color and opacity) and focus the dynamic learning phase solely on spatial properties (positions, rotations, scalings). Initially, the local deformations of the control nodes are predicted by a deformation network \(\). The updated spatial properties post-deformation are subsequently computed by integrating the local deformations of the control nodes through geometric skinning. In particular, given a control node \(\) and timestamp \(\), the deformation network predict its local deformation at \(\) following the equation below. Note that we omit the subscript "\(\)" is omitted here and in rest paragraphs for simplicity.

\[(R_{},S_{},t_{},_{}) =(),\] (5)

Figure 2: **Overview of DreamMesh4D. In static stage shown in top left part, a reference image is picked from the input video from with we generate a Gaussian-mesh hybrid representation through a image-to-3D pipeline. As for dynamic stage, we build a deformation graph between mesh vertices and sparse control nodes, and then the mesh and surface Gaussians are deformed by fusing the deformation of control nodes predicted by a MLP through a novel adaptive hybrid skinning algorithm.**where \(R_{},S_{}^{3 3}\) and \(t_{}^{3}\) are the rotation, shear matrix and translation respectively. Furthermore, to mitigate artifacts associated with LBS and DQS, we propose an adaptive fusion of their effects to calculate the deformation of mesh vertices. Here, \(_{}\) denotes the local rigid strength, indicating the extent to which the region around \(\) is influenced by DQS at time \(\).

Deformation of Control NodesThe predicted shear matrix \(S_{}\) for node \(\) is intended only for LBS, whose strength is weaken by the predicted factor \(_{}\), and the final shear matrix at this location is computed as:

\[_{}=(1-_{})S_{}+_{} ,\] (6)

where \(^{3 3}\) represents an identity matrix indicating no strain effect. Afterwards, the new position of node \(\) at timestamp \(\) is:

\[}=F_{}+t_{}=R_{} _{}+t_{}.\] (7)

Deformation of Mesh VerticesFor the deformation of a specific vertex \(\) using hybrid skinning, the new vertex position calculated with LBS, \(}^{lbs}\), and that with DQS, \(}^{dqs}\), can be obtained following Eq.1 and Eq.2 respectively. The local rigid strength at \(\) can be computed by linearly blending that of neighboring nodes:

\[_{}=_{()}w_{} _{},\] (8)

then the fused position of \(\) after deformation is the interpolation between \(}^{lbs}\) and \(}^{dqs}\):

\[}=(1-_{})}^{lbs}+_{ }}^{dqs}.\] (9)

The local rotation and strain at \(\) are the corresponding linear blending from neighboring control nodes:

\[R_{}=_{( )}w_{}R_{},\] (10) \[S_{}=_{()}w_{ }_{}.\] (11)

Deformation of Surface GaussiansNow we have obtained deformations on the level of mesh vertices, afterwards the deformation on each Gaussian kernel will be calculated. Given a Gaussian kernel \(g(f)\) on a triangle face \(f=(_{a},_{b},_{c})\), its new center at timestamp \(\) is computed as:

\[_{g}=_{a}}_{a}+_{b}}_{b}+ _{c}}_{c},\] (12)

where \((_{a},_{b},_{c})\) is the Gaussian's barycentric coordinate relative to the three triangle vertices. The new rotation is calculated by applying the local rotation \( q_{g}\) fused from related vertices to its original rotation \(q_{g}\):

\[ q_{g}=(_{a}R_{_{a}}+_{b} R_{_{b}}+_{c}R_{_{c}}),\] (13)

\[_{g}= q_{g} q_{g}.\] (14)

We further apply the local shear matrix \( S_{g}\) fused from all three vertices to the original Gaussian scaling \(s_{g}\) to obtain the new scaling:

\[ S_{g}=_{a}S_{_{a}}+_{b}S_{_{b}}+ _{c}S_{_{c}},\] (15) \[_{g}= S_{g}s_{g}.\] (16)

Training LossesAfter obtaining the deformed hybrid mesh at timestamp \(\), we render its RGB \(_{}^{*}\) and alpha \(_{}^{*}\) under reference view. We then compute the reconstruction loss \(_{ref}=||_{}^{*}-I_{}^{*}||_{2}^{2}\) and mask loss \(_{mask}=||_{}^{*}-M_{}^{*}||_{2}^{2}\), where \(I_{}^{*}\) and \(M_{}^{*}\) are the ground truth image and mask of input video at timestamp \(\). For supervision under other views, we calculate SDS loss \(_{SDS}\) based on Zero123  under randomly sampled views. Furthermore, our mesh-based representation naturally facilitates the introduction of local rigid constraints by leveraging the topology of the mesh. Specifically, the as-rigid-as-possible (ARAP) loss  is computed as:

\[_{ARAP}=_{}_{_{n} ()}_{n}()(}- }_{n})-R_{}(-_{n}) _{2}^{2},\] (17)where \(()\) represents the one-ring neighbors of vertex \(\), and \(_{n}()\) is the cotangent weight  between \(\) and its \(n\)-th connected vertex \(_{n}\). Furthermore, we also introduce the normal consistency loss \(_{NC}\) provided by PyTorch3D  on the deformed mesh to globally constrain the mesh surface. Hence, the overall objective for our dynamic stage is a weighted combination of the above loss terms:

\[_{dynamic}=_{SDS}_{SDS}+_{ref} _{ref}+_{mask}_{mask}+_{ARAP}_{ARAP}+ _{NC}_{NC},\] (18)

where \(_{SDS}\), \(_{ref}\), \(_{mask}\), \(_{ARAP}\) and \(_{NC}\) are strengths of different loss terms in dynamic optimization stage.

Figure 3: **Qualitative comparison with baselines.** We compare our method with 4 previous video-to-4D methods. The first row provides two ground truth frames for each case. For each compared method, we render each case under reference view and another novel view at the two timestamps. The result demonstrates that our method is able to generate sharper 4D content with rich details, especially for the novel views. Please zoom in for more details.

## 4 Experiments

### Experiment Setup

**Dataset**: Our quantitative results are evaluated on the test dataset provided by Consistent4D , which contains seven multi-view videos. Each video has one input view for scene generation and four testing views for evaluation. For qualitative evaluation, we curate a set of challenging videos from previous works  and those generated by the video diffusion model SVD . **Evaluation metrics**: The per-frame LPIPS  score and the CLIP-score  are computed between the testing and rendered videos, with the final scores averaged over the four testing views. These two scores serve as image-level metric to assess the structural and semantic similarity between the rendered images and the ground truth. Furthermore, we compute the FID-VID  and FVD  as video-level metrics to evaluate the video temporal coherence. Note that we report PSNR and SSIM values only for the reference view, as pixel- and patch-wise similarities are too sensitive to reconstruction differences, making them unsuitable for evaluating novel views in our generation task. However, we find they are suitable for evaluating the method's ability of modeling sharp features in the reference view. **Baselines**: We compare our method with previous video-to-4D generation methods: Consistent4D , DreamGaussian4D , 4DGen  and STAG4D . All the experiments of above baselines are conducted using the code from their official GitHub repository.

### Comparison

**Qualitative Comparison** Fig. 3 shows qualitative results of our method compared to other baseline works. The results reveal that our method generates 4D objects with higher fidelity and more details under reference view. And our method also outperforms other works with better spatial-temporal consistency, demonstrating the effectiveness of our method. Please zoom in for more details.

**Quantitative Comparison** Table 1 demonstrates superior performance of our method against other baseline works quantitatively. Specifically, our approach notably exceeds the existing state-of-the-art in all measured metrics. Our method excels in both PSNR and SSIM, indicating a high level of reconstruction accuracy. Furthermore, the FVD score is particularly impressive, being only half that of competing methods. We also achieve the lowest FID-VID score, suggesting a significant enhancement in video quality produced by our 4D generation technique. Finally, our method achieves the lowest LPIPS and highest CLIP scores, ensuring both high image realism and semantic consistency. Overall, the numerical data clearly demonstrate the superior capabilities of our method in translating video to 4D content.

### Ablation Study

In this section, we conduct ablation study to analyse the impact of various components on the performance of our method. The components under consideration include: (a) the choice between Euclidean and geodesic distance (EucDist and GeoDist) when constructing deformation graph; (b) our proposed adaptive hybrid skinning algorithm; (c) the ARAP and normal consistency terms (geometric regularization terms); (d) the choice between vanilla 3D Gaussians  and Gaussian-mesh representation for our base 3D representation.

**EucDist vs. GeoDist** Fig. 4(a) provides a comprehensive qualitative analysis of the choice between EucDist and GeoDist. When using EucDist, the vertices on the elephant are incorrectly connected

    & PSNR(ref) \(\) & SSIM(ref) \(\) & LPIPS \(\) & FVD \(\) & FID-VID \(\) & CLIP \(\) \\  Consistent4D & 26.58 & 0.935 & 0.133 & 929.39 & 31.84 & 0.917 \\ DreamGaussian4D & 31.06 & 0.947 & 0.143 & 994.11 & 32.73 & 0.913 \\
4DGen (16 frames) & 27.02 & 0.937 & 0.137 & 913.10 & 63.32 & 0.909 \\ STAG4D & 27.99 & 0.941 & 0.136 & 1048.10 & 38.77 & 0.905 \\  Ours & **37.04** & **0.980** & **0.126** & **474.96** & **29.14** & **0.938** \\   

Table 1: **Quantitative comparison with baselines. Our method achieves best score on all metrics.**to its body, resulting in significant deformation artifacts. Conversely, GeoDist correctly links the vertices to neighboring nodes, enabling smooth object motion.

Adaptive Hybrid SkinningThe upper two rows of Table 2 presents quantitative results when replacing our adaptive hybrid skinning with DQS and LBS respectively. Almost all metrics have a decrease compared to using our adaptive hybrid skinning, showcasing its robustness. We also provide a qualitative comparison on a dancing robot case in Fig. 4(b). When LBS or DQS is used, there are artifacts on the robot's deformed elbow along with uneven surface. In contrast, the artifacts are eliminated and the surface becomes smooth when our adaptive hybrid skinning is used.

Geometric Regularization TermsThe third and fourth rows of Table 2 present the scores of metrics when either the ARAP or normal consistency term, respectively, is omitted from Equation 18. Decreases are observed across all metrics compared to full loss terms and it drops significantly when disabling ARAP loss. This circumstance matches the qualitative analysis shown in Fig. 4(c). Without ARAP term, it appears serious distortions on the object geometry. When the normal consistency term is disabled, the object surface becomes less smooth, and consequently, the texture is impaired.

3D Gaussians vs. Gaussian-mesh HybridIn Fig. 5, we provide the qualitative comparison between 3D Gaussians and the Gaussian-mesh hybrid representation for our base 3D representation. It shows that when utilizing 3D Gaussians, the texture of generated objects is blurry on those parts unseen in reference image. As a contrary, Gaussian-mesh hybrid representation presents clean and high-quality texture under every view, which benefits from the sharp surface provided by mesh.

### Limitations

Despite the superior results achieved, our work still exist several limitations. In particular, our method relies on a pre-trained multi-view diffusion model (Zero123) for novel view supervision through SDS, leading to long optimization time and limited performance on which case Zero123 cannot handle well. Moreover, our method is currently only designed to generate 4D contents at object level from input

    & PSNR(ref) \(\) & SSIM(ref) \(\) & LPIPS \(\) & FVD \(\) & FID-VID \(\) & CLIP \(\) \\  Skinning=DQS & 36.28 & 0.978 & 0.126 & 479.83 & 29.78 & **0.940** \\ Skinning=LBS & 36.68 & 0.980 & 0.155 & 540.86 & 32.19 & 0.928 \\ w/o arap & 37.04 & 0.979 & 0.142 & 751.56 & 42.08 & 0.907 \\ w/o normal consistency & 36.86 & 0.980 & 0.147 & 519.49 & 30.90 & 0.932 \\  Full method & **37.04** & **0.980** & **0.126** & **474.96** & **29.14** & 0.938 \\   

Table 2: **Quantitative evaluation of ablation study on different components.** During experiments, we keep all other setup unchanged compared to the full method except the tested components. The quantitative scores show that our full method achieves best performance on almost all metrics.

Figure 4: **Qualitative evaluation of ablation studies on:** (a) choice between GeoDist and EucDist for deformation graph (DG) construction; (b) our proposed adaptive hybrid skinning (AHS) against LBS and DQS; (c) effects of ARAP and normal consistency (NC) loss.

videos captured under fixed viewpoint. The extension of our framework to scene-level generation or to videos captured with a moving camera remains an area for future exploration. Finally, due to the scarcity of test data, the performance of our method on more complex task is not evaluated. These identified limitations will be addressed in our future research endeavors.

## 5 Conclusion

In this work, we introduce DreamMesh4D, an innovative video-to-4D framework that generates dynamic meshes through a static-to-dynamic optimization process. By employing a Gaussian-mesh hybrid representation, we simultaneously refine both the geometry and texture of the object. This approach allows the static object to serve as an excellent starting point for dynamic learning. During the dynamic stage, we construct a deformation graph on the object's surface using geodesic distance. Thereafter, the motion of the entire mesh, as well as the surface Gaussians, are driven by sparse control nodes via a novel geometric skinning algorithm named adaptive hybrid skinning. It benefits from the strengths of both Linear Blending Skinning (LBS) and Dual-Quaternion Skinning (DQS), enabling more robust deformation. Extensive experiments have demonstrated the superior performance of our method in generating high-fidelity 4D objects. It significantly surpasses previous methods in both rendering quality and spatial-temporal consistency, establishing a new benchmark for video-to-4D tasks. While our method benefits a lot from the mesh-based representation, it reveals a promising direction in the field of video-to-4D generation. Furthermore, our method's compatibility with modern geometric pipelines showcases its potential applicability in the 3D gaming and film industries.