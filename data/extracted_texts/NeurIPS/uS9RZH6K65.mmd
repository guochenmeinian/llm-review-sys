# _Denoiser_: Rethinking the Robustness

for Open-Vocabulary Action Recognition

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

As one of the fundamental video tasks in computer vision, Open-Vocabulary Action Recognition (OVAR) has recently gained increasing attention, with the development of vision-language pre-trainings. To enable open-vocabulary generalization, existing methods formulate vanilla OVAR to evaluate the embedding similarity between visual samples and text descriptions. However, one crucial issue is completely ignored: the text descriptions given by users may be noisy, _e.g._, misspellings and typos, limiting the real-world practicality. To fill the research gap, this paper analyzes the noise rate/type in text descriptions by full statistics of manual spelling; then reveals the poor robustness of existing methods; and finally rethinks to study a practical task: noisy OVAR. One novel _DENOISER_ framework, covering two parts: generation and discrimination, is further proposed for solution. Concretely, the generative part denoises noisy text descriptions via a decoding process, _i.e._, proposes text candidates, then utilizes inter-modal and intra-modal information to vote for the best. At the discriminative part, we use vanilla OVAR models to assign visual samples to text descriptions, injecting more semantics. For optimization, we alternately iterate between generative-discriminative parts for progressive refinements. The denoised text descriptions help OVAR models classify visual samples more accurately; in return, assigned visual samples help better denoising. We carry out extensive experiments to show our superior robustness, and thorough ablations to dissect the effectiveness of each component.

## 1 Introduction

Action recognition is one of the fundamental tasks in computer vision that involves classifying videos into meaningful semantics. Despite huge progress that has been made, existing researches focus more on closed-set scenarios, where action classes remain constant during training and inference. Such scenarios are an oversimplification of real life, and thus limiting their practical application. Recently, another line of research considers one more challenging scenario, namely open-vocabulary action recognition (OVAR), and receives increasing attention.

OVAR allows users to give free texts to describe action classes, and the model needs to match novel (unseen) text descriptions to videos with similar semantics. To tackle OVAR task, Vision-Language Alignment (VLA) paradigm [41; 14; 57] provides one preliminary but popular idea, _i.e._, measuring the embedding similarity between text descriptions and video embeddings. Following this paradigm, recent works focus on minor improvements, _e.g._, better align vision-language modalities [16; 49; 62]. Although promising, these works all maintain one unrealistic assumption in real-world scenarios, _i.e._, the given text descriptions are absolutely clean/accurate. The concrete form is that they evaluate open-vocabulary performance by re-partitioning closed-set datasets in which text descriptions of classes are fully human-checked. But in fact, under real-world OVAR, novel text descriptions provided by users are sometimes noisy. Character misspellings (typos, missing, tense error) are inevitable [43; 25] inthousands of descriptions, since users often don't double-check, as well as differences in user habits and diversity of scenarios (Fig. 1 Left).

We are hence motivated to fill the research gap of noisy text descriptions in OVAR. We analyze the noise rate/type in real-world corpora . We also make comprehensive simulations of text noises, following NLP literature . Fig. 1 Right empirically evaluates noise hazards for existing OVAR methods . One can find that just a small amount of noise lowers recognition accuracy by a large margin, implying quite poor robustness.

To spur the community to deal with the noisy OVAR task, being necessary and practical, this paper bravely faces the challenges. One vanilla idea is using a separate language model (_e.g._, GPT ) to correct noisy class descriptions, and then adapt the off-the-shelf vision-language paradigm . However, there exist two nettlesome issues. 1) _Textual Ambiguity_. One text description is usually a few compact words, with vague semantics, _e.g._, for the noisy text "boid", there could be multiple cleaned candidates in terms of spelling, such as "bird" and "board". This short text lacks context, making phrase correction difficult for uni-modal language models. 2) _Cascaded Errors_. Text correction and action recognition are independently completed, without sharing knowledge. The noisy output of text correction is cascaded to the input of action recognition, resulting in continuous propagation of errors. To address these issues, we design one multi-modal robust framework: _DENOISER_.

Our first insight is to treat denoising of text descriptions as one _generative_ task: given noisy text descriptions, decode the clean ones, by considering text-vision information to help denoising. Specifically, it consists of three components: text proposals, inter-modal weighting, and intra-modal weighting. We first propose potential text candidates based on spelling similarity to limit the decoding space. Then, two types of weighting are combined to decide the best candidate, that is, inter-modal weighting uses assigned visual samples to vote; while intra-modal weighting relies solely on text information. Our other insight is employing existing OVAR models as off-the-shelf tools to assign visual samples at _discriminative_ step. Such tools have been proven to handle clean OVAR tasks well, also making our framework easier to adapt to previous models. For full usage of information in the same semantics, we then assign detail-rich visual samples to clarify the semantic ambiguity of compact text descriptions. To further avoid cascaded errors, we propose a solution of alternating iterations, to connect _generative_ and _discriminative_ steps. By progressive refinement, denoised text descriptions help OVAR models to match visual samples more accurately; assigned visual samples help better denoising. Under multiple iterations, denoising results and OVAR are both better.

Our main contributions are summarized as follows:

\(\) We pioneer to explore noisy text descriptions for open-vocabulary action recognition (OVAR): first fully analyze the noise rate/type in text descriptions by extensive statistics in real-world corpora; then evaluate the robustness for existing methods; finally rethink to study one practical task: noisy OVAR.

\(\) We propose a novel _DENOISER_ framework to tackle the noisy OVAR task, by alternately optimizing generative-discriminative steps. The generative step leverages knowledge of vision-text alignment to denoises noisy text descriptions, in the form of progressive decoding; while the discriminative step assigns visual samples to text descriptions for open-vocabulary action recognition.

Figure 1: **Left**: For open-vocabulary action recognition (OVAR), existing researches neglect an essential aspect: the text descriptions provided by users may be noisy (_e.g._, misspelling and typos), resulting in potential classification errors and limiting the real-world practicality. **Right:** Rethinking the robustness for popular OVAR methods . On various datasets, they exhibit high sensitivity to text noises. Besides, as the noise level increases, the performance degrades significantly.

\(\) We carry out extensive experiments to show the superior robustness of _DENOISER_ against noisy text descriptions, under various noises and datasets. Great performance improvements are achieved over existing competitors. Thorough ablations are studied to show effectiveness of every design.

## 2 Related Work

**Vision-Language-Audio Pre-training** (VLP) aims to jointly optimize multi-modal embeddings with large-scale web data, _e.g._, CLIP , ALIGN , Florence , FILIP , VideoCLIP , and LiT . In architectures, VLP uses independent encoders for vision, text, and audio, followed by cross-modal fusion. For optimization, contrastive learning [5; 61] and cross-modal matching [7; 29] are mainstream, covering self supervision [32; 34], weak supervision [28; 8] and partial supervision [19; 33]. VLP benefits various applications: image-text retrieval [6; 18], video understanding [23; 20; 22; 21], action recognition [16; 60], visual grounding [32; 56; 31], AIGC [4; 36].

**Open-Vocabulary Concept Learning** aims to understand vision, where conceptual semantics are described by free/arbitrary text descriptions. It is characterized by using vision-language pre-trainings to match text descriptions and visual samples in semantic space. Its typical evaluation metric is the downstream zero-shot performance, _i.e._, classify unseen classes [49; 62; 17; 38; 54; 48; 37]. To achieve the evaluation, most methods re-partition closed-set datasets. Although there is some plausibility, such re-partition implicitly makes an unrealistic assumption: text descriptions of unseen classes are human-checked, and thus absolutely clean, limiting real-world application. We pioneer taking noises from text descriptions (misspellings and typos) into consideration. By adding real-world noise for the above methods, we reveal their poor robustness, and design _DENOISER_ for solution.

**Robustness of Language Models** is extensively studied by adversarial attack-defense techniques [50; 59]. When text inputs are facing noises, defense methods correct the outputs, dividing into: detection-purification [63; 39], as well as adversarial training [53; 9; 35; 30; 51]. The former methods detect and correct the corrupted part of a text phrase. The latter trains a model on adversarial samples to increase its direct noise-against ability. Overall, all these methods employ solely textual information for robustness in pure NLP tasks. We differ from them by considering robustness in the context of multi-modal scenarios and by employing multi-modal information to better assist text denoising.

## 3 Method

We explore noisy text descriptions for open-vocabulary action recognition. In Sec 3.1, we introduce noisy open-vocabulary setting; in Sec 3.2, we detail our _DENOISER_ framework, covering _generative - discriminative_ sub-parts; in Sec 3.3, we report the accompanying optimization strategy.

### Preliminary & Rethinking

**Open-Vocabulary Action Recognition (OVAR).** For a video dataset \(=(v_{j}^{T H W 3})^{N}\), OVAR aims to train one model \(_{}\) that matches target videos with arbitrary text description \(\).

\[^{}=_{}(^{ }\;,^{})^{C_{}}, ^{}=_{}(^{ }\;,^{})^{C_{}},\] (1)

where \(\) refers to the matching label between \(\) and \(\). During training, (video, text, matching label) triplets from the base semantic-classes are provided; while during testing, the model is evaluated on the novel semantic-classes. Note that, the semantic-classes between training (\(C_{}\)) and testing (\(C_{}\)) are disjoint, _i.e._, \(C_{} C_{}=\).

**Vision-Language Alignment (VLA).** To enable open-vocabulary capability, recent OVAR studies [16; 49; 62; 40] embrace vision-language pre-trainings (VLPs), for their notable ability in cross-modal alignment. Specifically, OVAR could be achieved by measuring the embedding similarity between text descriptions \(\) and video samples \(\), which is formally formulated as:

\[=(_{v}*_{t}),_{v}=_ {}(_{}())^{N D}, _{t}=_{}()^{C D}.\] (2)

where \(\) refers to the softmax activation, \(_{}\) is the spatio-temporal pooling, \(_{}\) and \(_{}\) are visual and textual encoders of VLPs, \(D\) is the embedding dimension.

**Noisy Text Descriptions in OVAR.** Although great progress has been made, the VLA paradigm suffers from an unrealistic assumption, _i.e._, that text descriptions are absolutely clean/accurate,limiting the practicality in reality. Actually, the diversity of users and scenarios can easily cause text descriptions given to be somewhat noisy, especially for unseen semantic-classes, due to their enormous degree of freedom. Formally, for one text description with \(n\) words, the clean/noisy versions \(/^{}\) are:

\[^{}=(t_{1}^{},,t_{n}^{})=_{}(\,;p),=(t_{1},,t_{n}).\] (3)

where \(t_{i}\) is the \(i\)-th word of \(._{}\) refers to noise contamination in reality, _e.g._, _inserting_, _substituting_ and _deleting_ characters with probability \(p\), following . Since these three atomic operations defined in Levenshtein edit distance \(\) are of distance 1, noise rate \(p\) can also be deduced by:

\[p=(,^{})}{(,^{})}\] (4)

As a result, the noisy OVAR task can be formulated as: given \(\) and \(^{}\), the model is expected to maximize the accuracy of action recognition, and even recovering \(^{}\) to \(\).

**Robustness of Existing Methods.** Fig. 1 evaluates for typical OVAR studies , across three public datasets. In terms of Top-1 classification accuracy, existing methods are rather sensitive to noise and show one trend: the larger the noise, the more significant the performance degradation (please see quantitative experiments in Tab. 2). Such poor robustness to the noisy OVAR task, proves excessive idealization of existing studies and also motivates us to fill the research gap.

### _Denoiser_: One Robust OVAR Framework

**Motivation.** Given the complexity of noisy OVAR, we here divide it into two sub-steps: denoising of text descriptions, and then vanilla OVAR. The former is viewed as one _generative_ decoding form, by considering both vision-text information for progressive denoising. While the latter is in one natural _discriminative_ form, by assigning text descriptions to video samples. For the joint optimization of these two sub-steps, we iterate alternately between _generative_ and _discriminative_ forms. As a result, our _DENOISER_ framework progressively tackles the noisy OVAR task.

Figure 2: **Framework Overview**. _DENOISER_ is composed of one _generative_ part \(_{}\) and one _discriminative_ part \(_{}\). \(_{}\) views denoising text descriptions as a decoding process \(_{i-1}_{i}\). We first propose text candidates \(_{}\) for \(_{i-1}\) based on spelling similarity; then choose the best candidate by inter-modal weighting \(_{}\) and intra-modal weighting \(_{}\). \(_{}\) uses vision-text information, while \(_{}\) relies solely on texts. \(_{}\) assigns text semantics to visual samples, then only visual samples with the same semantics can vote for text candidates. We optimize alternatively between _generative_ and _discriminative_ steps to tackle noisy OVAR.

**Framework.** As shown in Fig. 2, our _DENOISER_ framework covers two components: _generative_ sub-step \(_{ gene}\) and _discriminative_ sub-step \(_{ disc}\). For \(_{ gene}\), we iteratively refine text descriptions by one decoding process, that is, \((_{0},_{1},,_{n})\), where \(n\) is the index of decoding steps. Upon finishing step \(i\), we will have \(_{i}=(},,},t_{i+1}^{}, ,t_{n}^{})\), where \(\) refers to the decoded version of \(t\), meaning that the \(i\)-th word of text descriptions is decoded at step \(i\). We start with \(_{0}=^{}\), and finish at \(_{n}\) to ensure that all words are denoised. While for \(_{ disc}\), we find it identical to vanilla OVAR task and thus leveraging the VLA pipeline [16; 49] for help, which is off-the-shelf and well-studied. Formally, our _DENOISER_ framework tackks noisy OVAR as follows:

\[_{i}=_{ gene}(_{i-1},_{i-1},),_{i-1}=_{ disc}(_{i-1},)= _{ OVAR}(_{i-1},).\] (5)

At the _discriminative_ step, we calculate the matching label \(_{i-1}\) to make coarse semantic classification of visual samples, _i.e._, assign \(_{i-1}\) to \(\). At the _generative_ step, we first propose \(K\) text candidates \(_{ prop}(_{i-1})\) for \(_{i}\) base on \(_{i-1}\) to limit the decoding space. Then, to vote for the best candidate, we design two novel modules, namely inter-modal weighting \(_{ inter}\) and intra-modal weighting \(_{ intra}\). Here, \(_{ inter}\) uses vision information \(\), while \(_{ intra}\) relies on text information \(_{i-1}\).

We alternate between the _generative_ and _discriminative_ steps to optimize the decoding result step by step. Please find in Algorithm 1 for comprehensive details.

### Optimization for the _DENOISER_ Framework

**Discriminative Step** consists in calculating cross-modal matching labels \(\) using \(_{ disc}\). Intuitively, visual samples \(_{c}\) whose labels \(\) are assigned to semantic-class \(c\), _i.e._\(*{argmax}=c\), are those who could help decode \(_{c,i}\) most efficiently. On the contrary, visual samples from other semantic-classes may have few connections with the current class and thus provide no meaningful aid. Here, we find this process is identical to vanilla OVAR, and hence employs \(_{ OVAR}\) as \(_{ disc}\). We theoretically prove in the Appendix that, \(_{c}\) is the best set of visual samples to choose from. With \(_{c}\) defined and \(*{argmax}=c\), \(_{ gene}\) decodes text descriptions \(_{c,i}\) for each semantic-class \(c\):

\[_{ gene}(_{c,i-1},,)=_{ gene}( _{c,i-1},_{c})=*{argmax}_{_{c,i} }p(_{c,i}|_{c,i-1},_{c}).\] (6)

Recall \(t_{c,i}\) is the \(i\)-th word to be decoded, and \(_{c,i-1}\) is from last decoding, with the first \(i-1\) words decoded. As we decode word-by-word, choosing the best \(_{c,i}\) is exactly choosing the best \(t_{c,i}\), _i.e._\(*{argmax}_{_{c,i}}p(_{c,i}|_{c,i-1},_{c})=*{argmax}_{t_{c,i}}p(t_{c,i}|_{c,i-1},_{c})\), as we do in _generative_ step.

**Generative Step** here consists in, for each semantic-class \(c\), choosing the best \(t_{c,i}\) that maximizes \(p(t_{c,i}|_{c,i-1},_{c})\). With \(p(_{c,i-1},_{c})\) and \(p(_{c})\) same for all possible \(t_{c,i}\), we make detailed derivations in the Appendix to show that:

\[p(t_{c,i}|_{c,i-1},_{c}) p(t_{c,i}, _{c,i-1},_{c})_{v_{j}_{c}}p(t_{c,i}|v_ {j})p(_{c,i-1}|t_{c,i},v_{j}).\] (7)

Here, the error model \(p(_{c,i-1}|t_{c,i},v_{j})\) evaluates how \(t_{c,i}\) may be misspelled as \(t_{c,i}^{}\), since the \(i\)-th word in \(_{c,i-1}\) is still noisy and not decoded. Knowing that errors in text descriptions are independent of visual samples, it reduces to uni-modal \(p(_{c,i-1}|t_{c,i})\). As the error that one may make given the correct text is harder to model while the reverse is much easier, we let \(p(_{c,i-1}|t_{c,i}) p(t_{c,i}|_{c,i-1})\). Please refer to detailed derivations in the Appendix. As a result, our final objective is:

\[p(t_{c,i}|_{c,i-1})_{v_{j}_{c}}p(t_{c,i}|v_{j})= _{ intra}_{v_{j}_{c}}_{ inter}.\] (8)

_Text Proposals_ consists in proposing \(K\) candidates \(\{t_{i}^{k}\}_{k}\) for \(t_{i}\) with the lowest Levenshtein Edit Distance \((,t_{i}^{})\) (a metric of spelling similarity). By replacing original noisy word \(t_{i}^{}\) in \(_{i-1}^{k}\) with \(\{t_{i}^{k}\}_{k}\), they form \(_{ prop}(_{i-1})=_{i}^{k}=(},, },t_{i}^{k},t_{i+1}^{},,t_{n}^{})\), the \(K\) candidates for \(_{i}\). The benefit of text proposals is to reduce computing complexity. Since text embeddings are quantized in the semantic space, the search is limited to proposed candidates, rather than in the entire space.

_Inter-modal Weighting_\(_{ inter}=p(t_{c,i}|v_{j}),\;v_{j}_{c}\) relies on vision samples from semantic-class \(c\) to determine the best \(t_{c,i}\) for the next iteration. Concretely, we model the probability of being chosenfor each proposed candidate to be:

\[(t_{c,i}=t_{c,i}^{k}|v_{j})=(_{c,i}=_{c,i}^{k}|v_{j})=((v_{j},_{c,i}^{k}))}{_{ k^{}}((v_{j},_{c,i}^{k^{}}))},\ v_{j} _{c}.\] (9)

where \((,)\) is the cosine similarity between video-text embeddings, both encoded by \(_{}\). The intuition is that the more unanimously visual samples agree on candidate \(_{c,i}^{k}\), the more likely it is the text descriptions corresponding to semantic-class \(c\). Besides, by letting visual samples vote on \(_{c,i}^{k}\) instead of \(t_{c,i}^{k}\), we take into consideration not only the current word \(t_{c,i}\) but also context implicitly.

_Intra-modal Weighting \(_{}=p(t_{c,i}|_{c,i-1})\)_ relies solely on text information to decide the best \(t_{c,i}\) for next iteration. Although \(_{}\) may be solved by uni-modal spell-checkers  or large language models , we here design a simple model by considering only spelling similarity (ignore contexts), to save computing costs. That is, choose \(t_{c,i}\) depending solely on \(t_{c,i}^{}\) instead of on entire \(_{c,i-1}\):

\[(t_{c,i}=t_{c,i}^{k}|_{c,i-1})=(t_{c,i}=t_{c,i} ^{k}|t_{c,i}^{})=(-(t_{c,i}^{k},t_{c,i}^{ })/)}{_{k^{}}(-(t_{c,i}^{k^{ }},t_{c,i}^{})/)}.\] (10)

The intuition is that, the more similar a word candidate \(t_{c,i}^{k}\) is, compared to the noisy word \(t_{c,i}^{}\), the more likely it is the corresponding denoised word. Here, we introduce one temperature parameter \(\) to balance \(_{}\) and \(_{}\). A larger \(\) indicates that different edit distance gives similar probabilities, meaning that we rely more on visual samples for decision, and vice versa.

## 4 Experiments

**Typical Models for Vanilla OVAR**. To illustrate the generalizability of our framework, we leverage two typical models from the VLA pipeline as \(_{}\), that is, _ActionCLIP_ and _XCLIP_. These two models adopt hand-crafted prompts and visual-conditioned prompt tuning, respectively. Under both models, we choose ViT-B/16-32F as the network backbones, for simplicity.

**Datasets**. _HMDB51_ contains 7k videos covering \(51\) action categories. _UCF101_ contains 13k videos spanning \(101\) action categories. _Kinetics700_ (K700) is simply an extension of K400, with around 650k video clips sourced from YouTube. To partition these datasets for open-vocabulary action recognition, this paper follows the standard consensus [49; 62], for the sake of fairness.

**Metric.** We use three metrics for full evaluations from multiple perspectives. Top-1 Acc refers to the top-1 classification accuracy of noisy open-vocabulary action recognition. Label Acc counts the percentage of denoised text descriptions that match exactly with ground truth. Semantic Similarity calculates the cosine similarity of embeddings, between denoised and clean text descriptions. Label Acc and Semantic Similarity measure how well noisy text descriptions are recovered.

**Implementations.** We set the proposal number \(K=10\). Intra-modal weighting and inter-modal weighting are both used to determine the best candidate. Temperature \(\) follows a linear schedule from 0.01 to 1. We use the same corpus as in PySpellChecker, which contains \(70317\) English words, for text proposals. For typical OVAR methods [49; 62], we choose the ViT-B/16-32F checkpoint pretrained on K400  to evaluate their zero-shot robustness on HMDB51 , UCF101  and K700 . Since K700 and K400 have overlapped categories, we exclude them when evaluating on K700. For UCF101, we use the separated lowercase text label. All ablation studies are conducted on UCF101 under 20% noise. For statistical significance, We do each simulation 10 times and report the mean and confidence interval of 95%. All experiments are done using a single RTX 3090.

### Statistics on Noise Type/Rate for Text Descriptions

**Real Noise.** We adopt two large-scale corpora [11; 10] of misspellings to analyze noise type in text descriptions. As shown in Fig. 3, the conclusion is similar to the NLP community [42; 47], _i.e._, three atomic types of noise are inserting, substituting, and deleting text characters. More complicated noise patterns, _e.g._ swapping, can be constructed by mixing atomic noise types. Then, following previous literature, we quantify noise rate through Levenshtein Edit Distance, a generally accepted metric, to calculate the occurrence number of atomic noise types. Specifically, GitHub Typo Corpus  contains over 350k edits of typos from GitHub. The average noise rate (per sentence) is 3.3%. Nevertheless, the distribution is highly positively skewed (skewness = 2.9). For the worst 5% cases, the noise rate (per sentence) is larger than 9.4%. TOEFL-Spell Corpus  samples essays written by candidates from various language backgrounds in TOEFL(r) iBT test. There are, on average, 6.9 spelling mistakes per essay. For misspelled words, the noise rate (per word) is on average 16.0%.

   Noise Type & Noise Rate & Competitors & Top-1 Acc & Label Acc & Semantic Similarity \\   – & 0\% & Upper Bound & 66.3 & 100 & 100 \\   &  & GPT 3.5  & \(61.2_{ 1.4}\) & \(74.7_{ 1.9}\) & \(97.1_{ 0.4}\) \\  & & Bert (NeuSpell)  & \(56.0_{ 1.1}\) & \(64.7_{ 2.0}\) & \(94.5_{ 0.4}\) \\  & & PySpellChecker  & \(59.9_{ 1.2}\) & \(79.6_{ 1.6}\) & \(96.7_{ 0.3}\) \\  & & **Ours** & \(}\) & \(}\) & \(}\) \\   &  & GPT 3.5  & \(59.7_{ 1.2}\) & \(47.6_{ 3.1}\) & \(95.9_{ 0.4}\) \\  & & Bert (NeuSpell)  & \(56.6_{ 0.5}\) & \(66.2_{ 2.3}\) & \(94.6_{ 0.4}\) \\  & & PySpellChecker  & \(60.9_{ 1.1}\) & \(82.5_{ 2.9}\) & \(97.1_{ 0.4}\) \\  & & **Ours** & \(}\) & \(}\) & \(}\) \\   &  & GPT 3.5  & \(58.5_{ 1.3}\) & \(51.6_{ 2.3}\) & \(95.8_{ 0.3}\) \\   & & Bert (NeuSpell)  & \(51.0_{ 0.5}\) & \(50.4_{ 3.6}\) & \(91.6_{ 0.6}\) \\   & & PySpellChecker  & \(55.7_{ 1.1}\) & \(69.3_{ 1.5}\) & \(94.8_{ 0.3}\) \\   & & **Ours** & \(}\) & \(}\) & \(}\) \\   

Table 1: **Comparisons between Various Competitors.** Using ActionCLIP  as \(_{}\) while evaluating on UCF101, we compare with statistical text spell-checkers (PySpellChecker ), neural based ones (Bert from NeuSpell) , and GPT 3.5 . Our method remarkably outperforms others in terms of Top-1 classification accuracy, and semantic similarity of recovered text descriptions.

Figure 3: **Statistics for Noises in Reality.** Text noises may be classified into 4 types: inserting, substituting, swapping, and deleting characters. In terms of edit distance, based on TOEFL-Spell dataset, most of the text noises have an edit distance = 1 compared to the clean version. Nevertheless, the distribution tends to be positively skewed towards larger noise.

**Noise Scenarios.** In the "Simulated" noise type, we mix three atomic noises: insertion, substitution, and deletion. Concretely, for each character, we perturb it with probability \(p\). For each perturbation, it will be insertion, substitution, and deletion with equal probability. To further ensure real-world generalizability, we ask GPT3.5 to give examples of perturbation according to real-world scenarios. We mix them into simulated noises. Noise rate \(p\) of the "Real" noise type is estimated with Eq. (3).

### Comparison with State-of-the-art Methods

**Comparison to Competitors.** Tab. 1 compares from three axes: Top-1 Acc of \(_{}\) after correction, Label Acc and Semantic Similarity. PySpellChecker is a uni-modal statistical model that corrects each word by edit distance and appearance frequency. Bert (NeuSpell)  employs a uni-modal Bert-based model to translate noisy text descriptions into clean ones. We also ask GPT 3.5 to denoise text descriptions using the prompt "The following words may contain spelling errors by deleting, inserting, and substituting letters. You are a corrector of spelling errors. Give only the answer without application. What is the correct spelling of the action of <noisy text description>?". Our method outperforms all competitors by large margins, which is impressive because our method is unsupervised without prior knowledge other than those contained in the OVAR model. Note that the output of GPT 3.5 tends to be unstable depending on prompts, which requires manual cleaning to remove irrelevant parts contained in the output, thus impending real-world usage.

**Comparisons Across Datasets/Models.** Tab. 2 compares Top-1 Acc to further reveal our solution is scalable/generalizable. Under various noise rates, our model is robust to achieve huge improvements. In terms of scalability across models, our method is not only applicable to hand-crafted prompts as in ActionCLIP but also to learnable visual-conditioned prompts as in XCLIP. Furthermore, we notice that, whenever XCLIP outperforms ActionCLIP, our method also yields a better result. A better visual encoder and well-tuned prompt may significantly increase our performance, showing that our method's upper limit could become higher, as the community continues to train better OVAR models.

### Ablation Study

**Inter-modal Weighting \(_{}\) & Intra-modal Weighting \(_{}\).** Tab. 3 shows that, both \(_{}\) and \(_{}\) contribute to denoising text descriptions and to improving the robustness of underlying \(_{}\). In terms of Top-1 Acc and Semantic Similarity, \(_{}\) performs better than \(_{}\), since \(_{}\) uses visual information as one direct optimization guideline to improve video recognition. While \(_{}\) performs better in terms of Label Acc, which focuses more on spelling correctness. Besides, \(_{}\) and \(_{}\) turn out to be complementary: visual information helps to understand noisy text descriptions; while textual information prevents the model from being misled by visual samples. We achieve the best performance when combining these two weightings.

   &  &  & }\): Typical Models for Vanilla OVAR task} \\   & &  &  \\   & & & w/o Ours & **w Ours** & w/o Ours & **w Ours** \\    &  &  &  \\   & Real & \(\)5.52\% & \(54.0_{ 2.3}\) & \(}\) & \(53.8_{ 2.7}\) & \(}\) \\   & Simulated & 5\% & \(54.9_{ 1.8}\) & \(}\) & \(55.6_{ 2.2}\) & \(}\) \\  &  & \(47.3_{ 1.4}\) & \(}\) & \(46.4_{ 1.3}\) & \(}\) \\   &  &  &  \\   & Real & \(\)6.71\% & \(37.6_{ 1.6}\) & \(}\) & \(35.3_{ 1.5}\) & \(}\) \\   & Simulated & 5\% & \(39.4_{ 1.4}\) & \(}\) & \(37.5_{ 1.8}\) & \(}\) \\  &  & \(35.2_{ 2.3}\) & \(}\) & \(31.8_{ 2.2}\) & \(}\) \\   &  &  &  \\   & Real & \(\)5.47\% & \(30.8_{ 0.51}\) & \(}\) & \(35.6_{ 0.6}\) & \(}\) \\   & Simulated & 5\% & \(31.5_{ 0.5}\) & \(}\) & \(36.7_{ 0.9}\) & \(}\) \\    &  & \(25.4_{ 0.8}\) & \(}\) & \(27.5_{ 0.7}\) & \(}\) \\   

Table 2: **Comparison Across Datasets and Models**. On three standard datasets, facing multiple noise types (real or simulated), and under various noise rates, our _DENOISER_ consistently improves the performance for noisy OVAR, regardless of underlying OVAR methods \(_{}\).

**Temperature Schedule \(\)** balances intra-modal weighting and inter-modal weighting. One larger \(\) indicates more reliance on inter-modal weighting. "Linear" means that \(\) augments from 0.01 to 1 linearly. Tab. 3 reports that it is beneficial to rely more on intra-modal at the beginning of decoding, and then gradually turn to inter-modal for more help. This indicates that, when text noises are high, \(_{}\) offers more help; when text noises are slight, \(_{}\) could help more.

**Noise Type.** Fig. 4 Left reports our robustness under various noise types/rates. "Mixed" means that three noise types: "Substitute", "Insert", "Delete" are equally possible to appear. Our method shows remarkable resilience when texts are perturbed by inserting or substituting characters. Performance degradation is observed when texts are perturbed by deleting characters. It is reasonable, as deleting characters causes huge information loss, making the model difficult to recover clean text descriptions.

**Number of Candidates \(K\)**. Fig. 4 Right shows as \(K\) increases, inter-modal weighting can reveal its full power, hence improving performance. Otherwise, if a good candidate is excluded from the proposal stage due to a small \(K\), it can be selected by neither of the inter- or intra-modal weighting, thus decreasing performance. Moreover, the performance tends towards one plateau, showing a decreasing marginal contribution of more proposals to performance. Since a larger \(K\) means more computing costs for text encoding, we select \(K=10\) by default to make reasonable trade-offs.

## 5 Conclusion

This paper investigates how noises in class-text descriptions negatively interference OVAR; and one novel framework _DENOISER_ is proposed for solutions. By incorporating visual information during denoising, we clarify the ambiguity induced by short and context-lacking text descriptions; by iteratively refining the denoised output through one generative-discriminative process, we mitigate cascaded errors which may propagate from spell-checking models to outputs of OVAR model. We conduct extensive experiments to demonstrate the generalizability of _DENOISER_ across multiple models and datasets, and also show our superiority over uni-modal spell-checking solutions.

**Limitations.** 1) We focus more on spelling noises; while in the real world, text noises can be more complex, involving semantic ambiguity. Equipping _DENOISER_ with large language models may be a feasible solution. 2) Using more text candidates or visual samples brings better results for _DENOISER_, but also costs more. There is a trade-off between performance and computational cost.

Figure 4: We evaluate on UCF101 by using ActionCLIP as \(_{}\). **Left: Ablation Study on Noise Type.** “Mixed” means that all types of text noises: “Substitute”, “Insert”, “Delete” take place with equal probability. Our _DENOISER_ shows good resilience, especially against noises of inserting or substituting. **Right: Ablation Study on Proposal Number \(K\)**. As \(K\) increases, Top-1 Acc increases and converges gradually towards the upper bound, but it also brings heavier computing costs.

   & \(_{}\) & \(_{}\) & Schedule \(\) & Top-1 Acc & Label Acc & Semantic Similarity \\   A1 & & ✓ & / & \(48.1_{ 2.2}\) & \(38.2_{ 2.5}\) & \(88.9_{ 0.4}\) \\ A2 & ✓ & & / & \(52.9_{ 1.4}\) & \(34.1_{ 2.4}\) & \(89.1_{ 0.6}\) \\ A3 & ✓ & ✓ & Constant & \(54.5_{ 2.5}\) & \(54.9_{ 4.5}\) & \(92.4_{ 0.8}\) \\ A4 & ✓ & ✓ & Linear & \(}\) & \(}\) & \(}\) \\  

Table 3: **Ablations for Inter-modal Weighting \(_{}\), Intra-modal Weighting \(_{}\), Schedule of Temperature \(\)**. \(_{}\) alone outperforms \(_{}\). Both contribute to correcting class texts, and give the best results when combined. Linear schedule of balancing factor \(\) outperforms the constant one, meaning that it helps to rely more on \(_{}\) at first, and then gradually switch to \(_{}\).