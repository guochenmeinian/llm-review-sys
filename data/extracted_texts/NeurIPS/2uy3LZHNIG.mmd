# SMART: Scalable Multi-agent Real-time Simulation

via Next-token Prediction

 Wei Wu

Tsinghua University

SenseTime Research

wuwei@senseauto.com

&Xiaoxin Feng

SenseTime Research

fengxiaoxin@senseauto.com

&Ziyan Gao

SenseTime Research

gaoziyan@senseauto.com

&Yuheng Kan

SenseTime Research

kanyuheng@senseauto.com

Equal contribution

###### Abstract

Data-driven autonomous driving motion generation tasks are frequently impacted by the limitations of dataset size and the domain gap between datasets, which precludes their extensive application in real-world scenarios. To address this issue, we introduce SMART, a novel autonomous driving motion generation paradigm that models vectorized map and agent trajectory data into discrete sequence tokens. These tokens are then processed through a decoder-only transformer architecture to train for the next token prediction task across spatial-temporal series. This GPT-style method allows the model to learn the motion distribution in real driving scenarios. SMART achieves state-of-the-art performance across most of the metrics on the generative Sim Agents challenge, ranking 1st on the leaderboards of Waymo Open Motion Dataset (WOMD), demonstrating remarkable inference speed. Moreover, SMART represents the generative model in the autonomous driving motion domain, exhibiting zero-shot generalization capabilities: Using only the NuPlan dataset for training and WOMD for validation, SMART achieved a competitive score of 0.72 on the Sim Agents challenge. Lastly, we have collected over 1 billion motion tokens from multiple datasets, validating the model's scalability. These results suggest that SMART has initially emulated two important properties: scalability and zero-shot generalization, and preliminarily meets the needs of large-scale real-time simulation applications. We have released all the code to promote the exploration of models for motion generation in the autonomous driving field. The source code is available at https://github.com/rainmaker22/SMART.

## 1 Introduction

In the context of autonomous driving, leveraging vectorized maps and vehicle trajectory data facilitates various motion generation tasks, including motion planning [17; 6; 19; 18; 7], motion prediction [47; 11; 38], and Sim Agents . Previous research [9; 5; 27] has predominantly employed encoder networks to represent driving scenes and decoder networks to generate multi-modal motions. These generated motions are then directly regressed to continuous trajectory distributions using Gaussian  or Laplace  mixture loss functions. While this framework demonstrates strong performance in prediction tasks that prioritize regression accuracy, it often underperforms in motion generative tasks that emphasize the safety and reasonableness of driving behavior, such as planning  or Sim Agents . The primary reasons for this underperformance are as follows: First, the framework does notrepresent future interactions between the motions of different agents, leading to inconsistent scene-level forecasting. Second, the model generates multi-modal motion by initializing multiple intention queries in the decoder, which is typically limited by GPU memory, resulting in a fixed number of motion modalities. Consequently, it is uncertain whether the generated modalities sufficiently represent the diversity of future behaviors. Thirdly, these models struggle to generalize across different datasets, requiring new data collection for training in new urban environments or maps.

The advent of autoregressive large language models (LLMs) [12; 42] has ushered in a new era in artificial intelligence. Drawing inspiration from this, some studies in the driving motion generation domain[30; 34], have tokenized agent trajectories into discrete motion tokens and employed a Next Token Prediction (NTP) task based on cross-entropy loss for autoregression. These models continue to utilize an encoder-decoder architecture, encoding continuous vectorized map and historical trajectory data with an encoder, and decoding discrete tokens solely in the decoder module. Compared to continuous distribution regression methods, the autoregressive paradigm of NTP has the following advantages: the model adopts a step-by-step next token prediction, allowing it to model interactions between agents' motions at each time step, and the number of modalities is not limited, leading to better diversity in generative tasks.

However, existing NTP-based motion models still fail to address the aforementioned issues of generalizability and scalability, which have a critical impact on industrial applications. Generalizability means achieving satisfactory results across diverse datasets through zero-shot and few-shot learning, while scalability involves improving model performance as dataset size or model parameters increase, following scaling laws defined by . This shortfall is due to two main factors: First, current model architectures lack generalizability under the constraints of limited data scale. Due to the high cost of acquiring extensive driving data, open-source datasets typically cover only a few hundred hours of driving in specific urban areas, with significant domain gaps caused by perceptual and regional differences. Second, unlike tasks involving the serialization of a single dimension, motion generation requires the serialization of both the temporal dimension of trajectories and the spatial interactions between maps and agents. To tackle these challenges, this paper introduces the SMART model: Scalable Multi-Agent Real-Time Motion Generation via Next-token Prediction. The model incorporates a tokenizer for map data and proposes an autoregressive prediction task for the next road token prediction to enhance the model's spatial comprehension. Subsequently, a GPT-style approach is adopted, tokenizing agent trajectories across the entire time series to establish a decoder-only transformer model. The decoder-only transformer allows SMART to compute the next token for the upcoming frame at the current moment during inference, eliminating the need to re-encode historical motion tokens with each inference, which significantly improves inference efficiency for real-time interactive autonomous driving simulation.

In summary, our contributions to the community include: (1) We propose a novel framework for motion generation, incorporating a tokenization scheme for both vectorized road and agent trajectories and utilizing a decoder-only transformer for training on the next token prediction task. This approach offers new insights into the design of motion generation algorithms for autonomous driving. (2) In the field of driving motion generation, we have pioneered a focus on the model's zero-shot generalizability across different datasets. Notably, the model trained solely on the NuPlan dataset performed well on the WOMD test dataset, despite the lack of overlap between the map areas of these two datasets. An empirical validation of SMART models' scalability emulates the appealing properties of large fundamental models. (3) SMART achieves state-of-the-art performance across most metrics in the generative Sim Agents challenge, ranking **1\({}^{}\)** on the WOMD leaderboards2. Furthermore, SMART's single-frame inference time is within 15ms, meeting the real-time requirements for interactive simulation in autonomous driving.

## 2 Related work

### Properties of auto-regressive large models

Scalability and zero-shot generalizationPower-law scaling laws [22; 12; 31] mathematically describe the relationship between the growth of model parameters, dataset sizes, computational resources, and the performance improvements of machine learning models, providing several distinct benefits. Firstly, they enable the extrapolation of a larger model's performance by scaling up model size, data size, and computational cost. Secondly, the scaling laws have demonstrated a consistent and non-saturating increase in performance, corroborating their sustained advantage in enhancing model capabilities. Zero-shot generation refers to the ability of models to generate predicted motions for time series from unseen datasets. Previous work [29; 21] on zero-shot generation typically involves training on a single time series dataset and testing on a different dataset. In this study, we utilize the NuPlan dataset for training SMART models and the WOMD validation dataset for testing. Existing methods in the autonomous driving field [37; 40] often rely on LLMs or VLMs to assist in decision-making and planning to enhance generalizability and interpretability. However, no studies have attempted to directly construct a foundational model for the driving motion field to validate scalability and zero-shot generalizability.

### Tokenizer in continuous domains

Language models [42; 43] rely on Byte Pair Encoding or WordPiece algorithms for text tokenization. Visual generation models[49; 48] based on language models also necessitate the encoding of 2D images into 1D token sequences. Early endeavors VQVAE  have demonstrated the ability to represent images as discrete tokens, although the reconstruction quality was relatively moderate. In the driving motion domain, MotionLM used a simple uniform quantization of axis-aligned deltas between consecutive waypoints of agent trajectories.

### Driving motion generation

Our work builds heavily on recent advancements in driving motion generation. A comprehensive range of generative models has been applied to this problem, including continuous motion distribution regression [33; 1; 39], diffusion models [50; 20], and discrete autoregressive models [30; 34]. MotionDiffuser  is a diffusion-based representation method for modeling the joint distribution of future trajectories across multiple agents, leveraging a simple predictor design and PCA compression for efficient, top-performing multi-agent motion prediction. While these diffusion-based models produce multi-modal future trajectories of individual agents, they only capture the marginal distributions of possible agent movements and do not model interactions among agents' future motions. Typical distribution regression models use parametric continuous distributions such as Gaussian  or Laplace  to model the future motion distribution. A limitation of these models is the uncertainty of whether the Gaussian or Laplace mixture distribution is flexible enough to represent the distribution over future states. Additionally, to generate multi-modal future motions, these models often need to incorporate motion goal candidates  or learnable latent embeddings  as multi-modal queries in the decoder module, resulting in significant memory usage and increased inference time. MotionLM  treats multi-agent motion prediction in autonomous vehicles as a language modeling task, generating interactive trajectories through a simplified autoregressive process without requiring complex optimizations and latent anchor embeddings. On this basis, Trajeglish  targets multi-agent offline closed-loop simulation.

## 3 Method

In this section, we introduce SMART, an autoregressive generative model for dynamic driving scenarios. While both language and agent motions are sequential, they differ in their representation--natural language consists of words from a finite vocabulary, whereas agent motions are continuous real-valued data. This distinction necessitates the unique design outlined in Sec. 3.1 for agent motion and road vector tokenizer, including the construction of vocabulary and the tokenization of motion sequences. Sec. 3.2 provides a comprehensive description of the model's architecture. Sec. 3.3 elaborates on the training tasks designed for the proposed model to learn the distribution of the motion token within the temporal sequence and the distribution of the road token within the spatial sequence.

### Tokenization

Agent Motion tokenizationTo apply discrete sequence modeling in continuous domains, prior works typically follow one of two approaches: either use a pre-trained tokenizer, such as VQVAE  or VQGAN , to encode continuous features into discrete tokens, or normalize continuous features and divide continuous values into discrete slots at equal intervals [2; 34]. For the former approach, establishing a latent vocabulary often requires a large amount of raw data to train the tokenizer; otherwise, the tokenizer itself will be biased towards the pre-training dataset. Since our work aims to enable the model to generalize effectively when trained on a small number of data samples, SMART opts to discretize explicit trajectory and map features. Specifically, similar to , we segment the continuous trajectories of all agents in the dataset into trajectory sets by fixed time intervals \(t=0.5s\). Then, we cluster the trajectory sets using the k-disks algorithm. As shown in Figure 1(b), the sampled trajectories serve as our final agent motion token vocabulary \(V_{a}\).

As shown in Figure 1(a), the blue box represents the tokens obtained after discretizing the ground truth trajectory. At every 0.5-second interval, a search is conducted within the token vocabulary for candidate tokens, from which an appropriate(closest) token is selected to represent the current moment. Note that to prevent matching errors that may occur during the tokenization process of the agent motion sequence, we implement a rolling matching approach for the entire continuous motion sentence in a given period \(T\). This implies that the token for the next time step is matched by referring to the position of the token currently matched, rather than relying on the actual correct position. However, due to the transformer decoder must perform sequential inference step by step, this approach inevitably leads to out-of-distribution issues due to compounding errors. Especially, in the field of autonomous driving, these accumulated errors may result in collisions and off-map events. To address this issue, we introduce noise into the tokenization process to enable the model to simulate distribution shifts during training. Specifically, we perturb the currently matched token by selecting one from the top-k tokens closest to the ground truth token in the vocabulary. Then, in the next time step, we match the motion token based on the perturbed vehicle state. This data augmentation method allows the model to effectively handle issues such as distribution shifts and accumulated errors, thereby enhancing robustness in generative tasks. Finally, the agent motion token is represented as \(A^{N_{A} N_{T} F_{A}}\), where \(N_{A}\) denotes the total number of agents, and \(N_{T}\) represents the number of time steps, with a feature size of \(F_{A}\), containing coordinates, heading, and shapes.

Road vector tokenizationTo enhance the model's generalization capabilities, we have applied a similar tokenization process to road vectors as we did with agent motion. Each road vector is a directed lane segment with features including start and end positions, length, turn direction, and other semantics from the dataset. To obtain fine-grained inputs for the road network, all road vectors are segmented into tokens spanning no longer than 5 meters in length. Unlike the motion sequence,

Figure 1: (a) At time t=0s, the current vehicle state is used as the reference to select the token closest to the ground truth bounding box within the token set. At time t=0.5s, the matched token from the previous step is used to select the next predicted token. At time t=1.0s, a noised token serves as the reference to determine the token for t=1.5s. This iterative process continues. (b) Motion token vocabulary with time granularity equal to 0.5s.(c) The original road vector features are represented as continuous sequences of map points. We divide the original map into multiple segments, each within 5 meters in length, and then perform matching with discrete tokens. The final map is composed of road vector tokens represented by different colored segments.

the tokenization process of the road sentence does not have a time-series dependency. As shown in Figure 1(c), the tokenization of the road sentence is performed in parallel, directly tokenizing all the original road vector segments. The road vector token is represented as \(R^{N_{R} F_{R}}\), where \(N_{R}\) denotes the total number of road vectors, and \(F_{A}\) represents the token features.

### Model Architecture

Figure 2 illustrates the simple but expressive model architecture of SMART. The model comprises an encoder for road map encoding and a motion decoder that predicts a category distribution based on motion token embeddings.

RoadNet: road token encoderWe employ multi-head self-attention (MHSA) to model the relationships among road tokens, after which the updated road token encodings will assist motion token decoding. For the \(i^{th}\) road token, we derive a query from its embedding \(r_{i}\) and let it attend to the neighboring tokens \(r_{j} R_{i}\):

\[r_{i^{}}= (q(r_{i}),\;\;k(r_{j},_{ij}),v(r_{j}, _{ij})), j R_{i}\] (1)

where \(R_{i}\) denotes the neighbor set of the road tokens. To incorporate spatial awareness for map encoding, we generate the \(j^{th}\) key/value vector from the concatenation of \(r_{j}\) and the relative positional embedding RPE\({}_{ij}\).

MotionNet: factorized agent motion decoderPrevailing methods for encoding agents prioritize capturing the temporal dynamics of an agent's movements, followed by the integration of agent-map and agent-agent interactions, as highlighted by . Factorized attention effectively captures detailed agent-map interactions across temporal scales . In our work, we leverage a factorized Transformer architecture with multi-head cross-attention (MHCA) to decode complex road-agent and agent-agent relationships along the time series. Akin to query-centric methodologies , we utilize relative positional embeddings to differentiate between agents' local coordinate frames, enabling symmetric encoding. Take the \(i^{th}\) agent at time step \(t\) as an example. Denoted as Eq.2a, given the query derived from the agent motion token's embedding \(e_{i}^{t}\), we employ temporal attention by computing the key and value based on which are the \(i^{th}\) agent's token embeddings from time step \(t-\) to time step \(t-1\) and the corresponding relative positional embeddings.

\[e_{i^{}}=(q(e_{i}^{t}),k(e_{i}^{t-}, _{i}^{t,t-}),v(e_{i}^{t-},_{i}^{t,t-})),  0<<t\] (2a) \[e_{i^{}}=(q(e_{i}^{t}),k(r_{j},_ {ij}),v(r_{j},_{ij})), j N_{i}\] (2b)

Figure 2: The architecture of SMART framework (a) We train a decoder-only transformer that predicts the motion tokens of multi-agents conditional on previous motion tokens, interactive agent motion tokens, and encoding road tokens. The model is trained to predict the next motion token. (b) Illustration for our proposed road spatial understanding training task.

\[e_{i^{}}=(q(e_{i}^{t}),k(e_{j}^{t},_{ij}^{t}),v(e_ {j}^{t},_{ij}^{t})), j N_{i}\] (2c)

Likewise, in Eq.2b and Eq.2c, the key and value for agent-map and agent-agent attention are derived from road token \(r_{j},j N_{i}\) and agents' motion token \(e_{j}^{t},j N_{i}\) in the neighborhood respectively, where the neighbor set \(N_{i}\) is determined by a distance threshold of 50 meters. We stack the temporal, the agent-agent, and the agent-map attention sequentially as one fusion block and repeat such blocks \(K\) times.

### Spatial-temporal next token prediction

In the training stage, we train SMART to understand the temporal and spatial relationships in the traffic scene. This is achieved with two next token prediction tasks on RoadNet and MotionNet, the model is optimized with the summation of the two tasks' objectives.

Road vector next token predictionAs shown in Figure 2(b), the road vector NTP task targets RoadNet to learn the spatial structure of road vector inputs. Unlike agent motions, road vectors form a graph rather than a sequence, making it challenging to apply next token prediction tasks directly. To address this issue, we extract the original topological information of roads and model the road vector tokens with sequential relationships based on their predecessor-successor connections. As depicted in Figure 2(b), in the pre-training NTP task, the subsequent road vector token is predicted using the preceding road token based on the road topology. This approach requires RoadNet to understand the connectivity and continuity among unordered road vectors. The loss function for a single tokenized road vector sequence is defined as:

\[()=-_{j=1}^{J}_{i=1}^{V_{r}}(_{i}^{j+1}== _{i^{}}^{j+1})(p_{}(_{i}^{j+1}|_{i}^{1:j}))\] (3)

where \(p_{}(_{i}^{j+1}|_{i}^{1:j})\) denotes the categorical distribution predicted by the RoadNet parameterized by \(\), \(J\) represents a complete polyline that has not yet been split into road vector tokens, \(^{1:j}\) Representing the road token embedding of the predecessor, and \(_{i}^{j+1}\) is the next predicted road vector token. This loss function ensures that RoadNet learns to predict the correct next road vector token given the preceding tokens, thereby capturing the spatial continuity and connectivity within the road network.

Motion next token predictionMotion NTP task targets MotionNet to understand not only the temporal dependencies in agents' motions but also the spatial dependencies between agent-map and agent-agent. SMART is trained to minimize the cross entropy between the distribution of the ground truth token label and the predicted distribution. Formally, the loss function for a single tokenized motion sentence is given by:

\[loss()=-_{t=1}^{T}_{i=1}^{V_{o}}(a_{i}^{t+1}==a_{i^{}t}^{ t+1})log(p_{}(a_{i}^{t+1}|e_{i}^{1:t},r_{j}))\] (4)

where \(p_{}(a_{i}^{t+1}|e_{i}^{1:t},m_{j})\) denotes the categorical distribution predicted by the model parameterized by \(\), \(e_{1:t}\) is the historical tokenized agent motion embeddings, \(a_{i}^{t+1} A\) is the next predicted agent motion token and \(r_{j}\) is the tokenized nearby road vector series. Note that SMART performs autoregression via classification. Opting for a categorical output distribution offers a key advantage: it imposes no restrictions on the structure of the output distribution, allowing the model to learn arbitrary distributions, including multimodal ones. This flexibility is especially valuable for a fundamental model, as agent and road tokens from diverse datasets may follow distinct output distribution patterns.

## 4 Experiments

To validate the generalizability and scalability of the SMART model, we conducted extensive experiments and trained models across various scales. On the official WOMD Sim Agents Challenge (WOSAC), we employed the SMART 7 Million parameters (7M) model, which was exclusively trained on the WOMD dataset. Concurrently, the SMART 7M model was also utilized for generalization experiments and ablation studies. In the scale law experiments, we integrated additional datasetsand trained on models of multiple scales. For all experiments, the testing datasets employed the split validation dataset from WOMD. Detailed hyperparameters for the SMART architecture can be found in Section A.1. In the following sections, Section 4.1 presents the results of rollouts generated by SMART on the WOSAC benchmark . Evaluations of SMART's generalizability and scalability are detailed in Sections 4.2 and 4.3, respectively. Finally, an ablation analysis of our design methods is conducted in Section 4.4.

### Comparison for motion generation task

Performance comparisonWe compare proposed SMART with existing motion generation approaches including diffusion models, continuous distribution regression models [46; 36], and next token autoregressive model. Because the Sim Agents challenge metrics were changed twice, to compare it more broadly with the previous methodology, we test the performance of our model using both the WOMD Sim Agents 2023 and 2024 Benchmark. As shown in Table 1 and Table 2, SMART achieves not only the best Realism Meta metric but also a high prediction precision. SMART's modeling approach for maps and motion enables it to learn the behavioral distribution within the data more effectively than prior work. Notably, SMART-zeroshot represents a model trained solely on the NuPlan dataset and directly inferred on the Waymo test set. As shown in Table 2, it achieves performance close to that of MVTE. For further detailed comparisons, please refer to A.2.

Efficiency comparisonSMART also demonstrates remarkable speed in multi-agent motion generation. Previous encoder-decoder models [34; 36] suffer from high computational costs, as the model requires multiple query embeddings in the decoder module to generate multi-modal motions. Benefiting from the advantages of the decoder-only transformer architecture, SMART only needs to compute the next token for the upcoming frame at the current moment during inference, without the need to re-encode historical motion tokens. By reusing the token embeddings computed in previous observation time horizons, the complexity of the agent motion decoder is reduced to \(O(N_{A}N_{T})+O(N_{A}N_{R})+O(N_{A}^{2})\). In contrast, for encoder-decoder models like , besides the computational load of the encoder module, additional computations of \(O(N_{A}^{2}N_{M})+O(N_{A}N_{M}N_{R})\) are required for generating multi-modalities of trajectories, where \(N_{M}\) represents the number of modalities. The average single-step inference time of SMART is influenced by the number of map

    & Realism & Kinematic & Interactive & Map-based &  \\  & Meta metric\(\) & metrics\(\) & metrics\(\) & metrics\(\) & \\  SMART 7M & **0.6587** & 0.4190 & **0.8014** & **0.8523** & 1.7453 \\ Trajeglish & 0.6451 & 0.4166 & 0.7845 & 0.8216 & 1.5712 \\ MVTE & 0.6448 & 0.4202 & 0.7666 & 0.8387 & 1.6770 \\ VPD-PRIOR & 0.6315 & **0.4261** & 0.7233 & 0.8330 & 1.3400 \\ QCNeXt & 0.4538 & 0.3109 & 0.5654 & 0.5051 & **1.0830** \\ MultiPath & 0.4766 & 0.1792 & 0.6380 & 0.6866 & 2.0517 \\   

Table 1: Comparison with state-of-the-art models on WOMD 2023 Sim Agents benchmark

    & Realism & Kinematic & Interactive & Map-based &  \\  & Meta metric\(\) & metrics\(\) & metrics\(\) & metrics\(\) & \\  SMART 101M & **0.7614** & **0.4786** & **0.8066** & **0.8648** & **1.3728** \\ SMART 7M & 0.7591 & 0.4759 & 0.8039 & 0.8632 & 1.4062 \\ BehaviorGPT & 0.7473 & 0.4333 & 0.7997 & 0.8593 & 1.4147 \\ GUMP & 0.7431 & 0.4780 & 0.7887 & 0.8359 & 1.6041 \\ MVTE & 0.7302 & 0.4503 & 0.7706 & 0.8381 & 1.6770 \\ SMART-zeroshot & 0.7210 & 0.4311 & 0.7806 & 0.8099 & 2.5703 \\ VBD & 0.7200 & 0.4169 & 0.7819 & 0.8137 & 1.4743 \\ TrafficBOTv1.5 & 0.6988 & 0.4304 & 0.7114 & 0.8360 & 1.8825 \\ congeniBOTv1.5 & 0.6288 & 0.3293 & 0.7129 & 0.6918 & - \\   

Table 2: Comparison with state-of-the-art models on WOMD 2024 Sim Agents benchmarktokens and agent motion tokens, fluctuating between 5 to 20 ms, and averaging under 10 ms. Thus, it significantly meets the current needs of interactive real-time online simulation in autonomous driving.

### Generalization

Zero-shot generalization on different datasetZero-shot generation is the ability of models to generate motions for time series from different datasets. In this work, we use the training data from NuPlan dataset to train SMART models and the test data from WOMD validation dataset. As shown in Table 3, SMART\({}^{*}\) still achieves good performance in the overall metrics. Due to significant differences in the accuracy of the calibrated ground truth values for agent position and heading between different datasets, there may be a larger gap in the agent kinematic metrics, resulting in lower scores. However, SMART\({}^{*}\) demonstrated excellent generalization in the metrics of agent interaction and drivable map. It is worth mentioning that the size of the two datasets does not differ greatly, so the SMART model can have good generalization ability based on a small number of data training.

Zero-shot generalization on different datasets. SMART denotes a model trained on WOMD only. SMART\({}^{*}\) denotes a model trained on NuPlan dataset only. SMART\({}^{*}\) denotes a model after 1 epoch of finetuning with an initial learning rate of 0.0001 on WOMD based on SMART\({}^{*}\) model.

Zero-shot generalization on unseen scenariosMultiple map scenarios as shown in Figure 3 are present only in the WOMD but not in the NuPlan dataset. Without modifications to the network architecture or tuning parameters, SMART trained only on NuPlan has achieved decent results in these scenarios, substantiating the generalization ability of SMART.

### Scalability

Prior research [22; 42] have established that scaling up large language models (LLMs) leads to a predictable decrease in test loss \(L\). This trend correlates with parameter counts \(N\), training tokens \(T\), following a power-law:

\[log(L)= log(X)+\] (5)

where \(X\) can be any of \(N\), \(T\). The exponent \(\) reflects the smoothness of power-law, and \(L\) denotes the reducible loss normalized by irreducible loss. The data sources for validating scaling laws are detailed in the A.3. Overall, we trained models across four sizes, ranging from 1M to 100M parameters, on a training set containing 2.2M scenarios (or 1B motion tokens under 0.5s agent motion tokenization).

Scaling laws with model parametersWe investigate the test loss trend as the model size increases. We assessed the final test cross-entropy loss \(L\) on the validation set of 100,000 traffic scenarios. The results are plotted in Figure 4, where we observed a clear power-law scaling trend for Loss \(L\) as a function of model size \(N\). The power-law scaling laws can be expressed as:

\[log(L)=-0.157log(X)+1.52\] (6)

These results verify the strong scalability of SMART, providing valuable insights into how model performance scales with dataset size.

### Ablation

In this study, we aim to verify the effectiveness of each component of SMART. Results are reported in Table 4. The initial model, denoted as \(M1\), is constructed on the architecture depicted in Sec.3.2, employing solely agent tokenization. The introduction of the road vector tokenization in \(M2\), which tokenized the road vector states into discrete tokens, results in marked improvements over \(M1\) in

    & Kinematic & Interactive & Map-based &  \\  & metrics\(\) & metrics\(\) & metrics\(\) & \\  SMART & 0.4537 & 0.8034 & 0.8514 & 1.5127 \\ SMART\({}^{*}\) & 0.4161 & 0.7853 & 0.7970 & 2.3041 \\ SMART\({}^{**}\) & 0.4310 & 0.8087 & 0.8559 & 1.5671 \\   

Table 3: Zero-shot generalization on different datasets. SMART denotes a model trained on WOMD only. SMART\({}^{*}\) denotes a model trained on NuPlan dataset only. SMART\({}^{**}\) denotes a model after 1 epoch of finetuning with an initial learning rate of 0.0001 on WOMD based on SMART\({}^{*}\) model.

the generalization capability. Comparing models \(M1\) and \(M2\) reveals that when trained solely on the WOMD dataset, the tokenization of road vectors results in a certain reduction in overall metrics. We speculate that discretized map tokens may lose some fine-grained geometric information about roads. \(M4\) incorporates noised agent motion tokenization, designed to address cumulative errors and distributional shifts during inference. This modification leads to enhancements in both the interaction metric and the map-based metric.

## 5 Conclusions

In this paper, we have introduced SMART, a novel paradigm for autonomous driving motion generation that leverages vectorized map and agent trajectory data, processed through a decoder-only transformer architecture in a GPT-style framework. We have observed that SMART emulates two

Figure 4: Due to limitations in dataset size, we trained models at multiple scales ranging from 1M to 101M on a total of 1 billion tokens. (a) Training loss of different models (b) Axes are all on a logarithmic scale. The power-law scaling law can be expressed as a solid line. Exponents \(=-0.157\) suggest a smooth decline in test loss \(L\) when scaling up SMART models.

Figure 3: Qualitative results of closed-loop planning for two representative scenarios from the test set. Each scenario (every row) lasts 8 seconds and we take 4 snapshots with a 2-second interval. SMART controls all the agents in the scenario. The first row depicts a parking lot area. The red vehicle in the picture effectively completed a detour around a stationary vehicle ahead in the parking lot. The second row shows a scene of a large curvature U-turn in a ramp zone, where the traffic flow in the right lane of the ramp has completed the behavior of ramp exit under the control of SMART. It is recommended to refer to supplementary materials for more videos

critical properties: scalability and zero-shot generalization, which are essential for advancing large models. We believe that our findings and the release of all codes will encourage further exploration and development of models for motion generation in the autonomous driving field, ultimately contributing to more reliable autonomous driving systems.

LimitationsIn this work, we primarily focus on the design of the learning paradigm and maintain a relatively simple design for the discrete token vocabulary. We believe that iterating SMART with an advanced tokenizer or sampling technique can further improve the performance. Although we have collected training data from multiple datasets, we are still limited by the dataset size when validating the model's scalability, restricting us to models with a maximum scale of 100 million parameters. Given the focus of this work on generalization and scaling laws, a large number of hyperparameter ablation experiments remain to be verified, including the time granularity of agent motion tokens and the size of the token vocabulary. As a motion generation model, the ability of SMART to migrate to planning and prediction tasks still needs to be verified, and this is our top priority for future work.

AcknowledgementWe thank the anonymous reviewers, area chairs, and program committee members for their valuable suggestions, which have greatly improved the quality of our work. We also appreciate the thoughtful discussions with Yue Gong and Shuxiang Lu. Authors Wei Wu, Xiaoxin, and Ziyan contributed equally to this work. Wei Wu led the project and provided funding support, while Xiaoxin and Ziyan focused on algorithm design, implementation, model training, and manuscript writing.