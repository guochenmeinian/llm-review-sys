# Ad Auctions for LLMs via

Retrieval Augmented Generation

 MohammadTaghi Hajiaghayi

University of Maryland

hajiagha@umd.edu

&Sebastien Lahaie

Google Research

slahaie@google.com

&Keivan Rezaei

University of Maryland

krezaei@umd.edu

&Suho Shin

University of Maryland

suhoshin@umd.edu

###### Abstract

In the field of computational advertising, the integration of ads into the outputs of large language models (LLMs) presents an opportunity to support these services without compromising content integrity. This paper introduces novel auction mechanisms for ad allocation and pricing within the textual outputs of LLMs, leveraging retrieval-augmented generation (RAG). We propose a _segment auction_ where an ad is probabilistically retrieved for each discourse segment (paragraph, section, or entire output) according to its bid and relevance, following the RAG framework, and priced according to competing bids. We show that our auction maximizes logarithmic social welfare, a new notion of welfare that balances allocation efficiency and fairness, and we characterize the associated incentive-compatible pricing rule. These results are extended to multi-ad allocation per segment. An empirical evaluation validates the feasibility and effectiveness of our approach over several ad auction scenarios, and exhibits inherent tradeoffs in metrics as we allow the LLM more flexibility to allocate ads.

## 1 Introduction

Large language models (LLMs)  have recently gained widespread attention, serving various functions including question answering, content generation, translation, and code completion . The emergence of AI-driven assistant models like ChatGPT, Gemini, and Claude has influenced how individuals interact with these technologies, as they increasingly use them to streamline and enhance their work.

While LLMs provide a fresh way to engage with information, the most advanced models are costly to operate . To date, online advertising has been one of the most successful business models of the digital economy. Ads support a wide variety of online content and services, ranging from search engines, online publishers, to video content and more. However, LLM services today predominantly follow a subscription model . A natural question to ask in this context is whether advertising could support LLMs to alleviate serving costs and charges to users, and what format advertising on LLMs might take.

In this paper, we develop auctions that allocate online ads within the output of LLMs using the framework of _retrieval augmented generation_ (RAG) . RAG is one of the most popular techniques to integrate factual information into the output of LLMs. When a query is submitted by a user, RAG first retrieves the top-\(k\) most relevant documents for the query from a database, and then conditions on these documents to generate the LLM's output, significantly enhancing the reliability of the generatedcontent . The RAG framework naturally lends itself to ad allocation, by retrieving relevant ads from a database rather than documents. The ads can then be incorporated into the output of the LLM via a variety of methods, most directly via prompt engineering.

In the auction design literature, a typical approach is to start with a desirable social choice function, and derive an allocation rule that maximizes this function . Here, we take the RAG allocation as given, and investigate which social choice function it corresponds to and what associated pricing rules give it good incentive properties. In particular, we are interested in pricing rules that are _individually rational_, such that there is always an incentive to participate, and ideally _incentive compatible_, such that advertisers are motivated to report their true willingness to pay for their ad to be shown .

Our Contributions.We introduce the concept of a _segment auction_, in which ads are allocated for each discourse segment, which could be a sentence, paragraph, or the entire LLM output. The architecture of a segment auction is depicted in Figure 1. Given a user query to the LLM, relevant ads together with bids are retrieved from a database. The retriever forwards the bids to the auction, along with click probabilities (aligned with retrieval probabilities). The auction implements a _randomized_ allocation rule based on these inputs, following the RAG framework, and the LLM bases its output on the winning ad. The auction can be run repeatedly for each segment, or it can compute several winners for multiple segments at once.

We first consider the case where a single ad is allocated per segment, and later study the generalization to multiple ads per segment. For single-ad allocation per segment, we show that the RAG-based allocation rule is optimal with respect to a new notion of logarithmic social welfare (LSW), a type of welfare function that balances economic efficiency and fairness. This balance is highly desirable for LLM outputs, which need to be satisfactory to users while potentially generating ad revenue. We show how the randomized RAG allocation rule can be obtained as a randomization over deterministic truthful auctions, which directly leads to a truthful implementation of RAG allocation. We confirm that the expected payment under this scheme matches the pricing rule that obtains from Myerson's lemma . For the general setting of multi-ad allocation per segment, we again provide an auction obtained as a randomization over deterministic truthful auctions. The main device for single- and multi-ad allocation is to perturb the bids with random additive offsets, drawing on ideas from discrete choice methods .

We validate the feasibility and effectiveness of our approach via experiments using publicly-available LLM APIs. We compare single- and multi-allocation segment auctions against each other, and against two naive baselines that do not consider relevance scores, or do not use the LLM to integrate ads (simply appending them to the output instead). Our key finding is that whereas repeated single-ad segment auctions generate higher revenue, a multi-allocation auction leads to higher output quality, as measured by the cosine similarity between embeddings of the output omitting ads, and the output conditioned on ads. We corroborate these results with a qualitative analysis of outputs from single- and multi-allocation segment auctions. We conclude by discussing remaining practical challenges in implementing segment auctions.

Figure 1: Segment auction architecture for LLMs via RAG.

Related Work.The question of using auctions to influence LLM output has been examined by a few very recent papers. Feizi et al.  present a high-level framework for LLM-based advertising and discuss key requirements such as privacy, latency, and reliability. Duetting et al.  propose a _token auction_ to aggregate the outputs of several distinct LLMs, weighted by bids. The motivation is that the LLMs can be provided by different competing advertisers. Under this approach every single token is the result of an auction to choose the source LLM, whereas in our work advertisers bid more traditionally to be placed in some segments of the output (e.g., the first paragraph).

Soumalias et al.  provide an auction framework for agents (e.g., advertisers) to steer LLM output according to their preferences, which can be represented by their own LLM or directly via a reward function. Their approach is closely linked to reinforcement learning with human feedback (RLHF), rather than RAG. Candidate outputs are generated by conditioning on context from each advertiser, and one of these outputs is sampled according to aggregate reward across agents. Our approach does not necessarily require generating output candidates for each ad, although this can increase allocative efficiency, as we discuss. Along similar lines, Sun et al.  investigate how to design mechanisms that incentivize truthful reporting of preferences when fine-tuning LLMs to cater to multiple user groups.

Dubey et al.  introduce a factorized framework for LLM ad auctions where an auction module allocates prominence (representing relative importance) to each ad based on their bids and predicted click-through rates. Although prominence could in practice map to ad selection probabilities under RAG, their paper focuses on the concrete application of generating ad summaries within the LLM output. The auction module's prominence allocation serves as a guide to control the output of the LLM module, ensuring that ads with higher prominence receive longer mentions and more user attention. The framework is designed to be incentive compatible and to maximize social welfare by ensuring high-quality summaries and efficient allocation of ad space.

Since the introduction of RAG by Lewis et al. , the technique has gained widespread interest in academia and industry. The retrieval component is crucial for our work, with key sub-components including the embedding model for efficient document similarity search [7; 36; 45] and query optimization to incorporate contextual information [47; 8]. For more details on RAG, see the recent survey by Gao et al.  or tutorial by Asai et al. .

## 2 Preliminaries

We now formally define the model behind LLM auctions for ad allocation via RAG. Consider a set of ads indexed by \([n]=\{1,2,,n\}\), where each ad \(i\) is provided by an advertiser. (We will refer to the ad and advertiser interchangeably for simplicity.) We often write \(a_{i}\) to denote the \(i\)-th ad for clarity. Each advertiser \(a_{i}\) has a private valuation \(v_{i}\) for its ad to be clicked. Each advertiser, possibly strategically, submits a bid \(b_{i}\) to be shown in the output in the LLM and to maximize its own payoff, which will be defined shortly. We write \(x\) to denote a user query (a prompt), \(y\) to denote the output generated from the LLM, and \(y^{(i:j)}\) to denote the sub-sequence of \(y\) from \(i\)-th token to \(j\)-th token. We use boldface to denote a vector, _e.g.,_\(=(b_{1},b_{2},,b_{n})\) is the vector of bids.

When a user enters a query \(x\) into the LLM, an auction mechanism selects an ad \(a_{i}\) to advertise, and generates an output \(y_{i}\) that includes a mention of ad \(a_{i}\) along with a hyperlink. By design, once the ad \(a_{i}\) to advertise is decided, the generation of \(y_{i}\) is independent of the auction and bids \(\).

Retrieval augmented generation.To build some intuition on how an LLM auction would operate under the RAG framework, we first recap how the original formulation of RAG proceeds given a set of documents . Given a query \(x\), suppose there exists a set of documents \(\{z_{1},z_{2},,z_{n}\}\) that can be used to inform the output of the LLM. Under RAG, the output follows the generative model:

\[P(y|x)=_{ik(P_{y}(|x))}P_{}(z_{i}|x)P_{}(y|x,z_{i}),\] (1)

where the summation is over the top-\(k\) documents with highest \(P_{}(z_{i}|x)\), retrieved via a technique like maximum inner-product search [19; 18]. The \(\) and \(\) here refer to the parameters of the retrieval and generator components, either of which can be fine-tuned for overall RAG performance. In practice, RAG is often implemented simply by including information from the selected document \(z_{i}\) into the prompt for generating \(y\). The model in (1) refers to a variant called RAG-sequence: a single document is selected probabilistically, and is then used to inform the entire output sequence. Lewis et al.  also introduce a variant called RAG-token, where a separate document is selected and considered for each token generation. The flexibility of RAG to consider different contextual inputs at separate stages of output generation is one of the features that make it particularly suitable for integrating ads. We emphasize that document retrieval in (1) is _randomized_; RAG does not just deterministically retrieve the highest-scoring document. This probabilistic integration helps the model to leverage information from multiple sources and enhances the robustness and accuracy of the generated responses.

**Auction design.** To define an auction under the RAG framework, we must specify ad selection probabilities given submitted bids, along with prices for ads that are selected. We assume that RAG provides baseline ad selection probabilities \(P_{}(a_{i}|x)\) given a query \(x\); these are the probabilities that should hold if all ads bid equally, so that there is no reason to prefer any ad based on the bids. We make the following important assumption that the retrieval component is calibrated to the expected clicks an ad \(a_{i}\) would receive under query \(x\), _i.e.,_ its click-through rate (\(_{i}\)).1

**Assumption 2.1** (Calibrated Retrieval).: Let \(C_{i}\) be the binary event that ad \(i\) is clicked. We assume that \(_{i}:=[C_{i}|x]=_{y_{i}}[C_{i}|x,y_{i}]\,P(y_ {i}|x) P_{}(a_{i}|x)=:q_{i}\) where \(y_{i}\) is the output generated from the query \(x\) augmented with the ad \(a_{i}\).

For ad retrieval purposes, the system could allocate according to \([C_{i}|x,y_{i}]\) after observing the output \(y_{i}\) generated by conditioning on each ad \(i\). Our model accommodates such generalization at the cost of additional query complexity; we elaborate on this in Appendix A and B. However, from the perspective of an advertiser, all strategizing happens before the output is generated, taking randomness in ad retrieval and output generation into account.

The quantity \(q_{i}\) can be seen as an indirect measure of the _relevance_ of \(a_{i}\) to query \(x\). Throughout we assume that advertisers are charged _per-click_. However, in mechanism design it is more standard to work with expected prices _per-impression_.2 The per-click price \(p_{i}\) and per-impression price \(p_{i}\) for ad \(i\) are related by \(_{i}=_{i} p_{i}\), by Assumption (2.1). Given this assumption, we emphasize that our auction would not directly require information on the \(_{i}\), but only requires the retrieved relevance \(q_{i}\) to run the entire mechanism and generate the output, due to inherent normalization in the auction allocation rule. We will elaborate on this shortly.

An auction defines an allocation rule \(()\), where \(x_{i}()\) is the selection probability of ad \(i\) under the given bids (which implicitly also depends on the baseline selection probabilities).3 Note that under RAG, the allocation rule is naturally randomized. The auction also defines a payment rule \(()\), where \(p_{i}()\) is the expected _per-impression_ payment of ad \(i\). Given ad \(i\)'s private value-per-click \(v_{i}\), its ex-ante utility (namely, its expected utility before ad selection and clicks are realized) is defined as \(_{i}()=_{i} v_{i}x_{i}()-_{i}()=_{i}(v_{i}x_{i}()-p_{i}())  q_{i}(v_{i}x_{i}()-p_{i}())\). We write per-click utility as \(u_{i}()=v_{i}x_{i}()-p_{i}()\). An auction is _dominant-strategy incentive-compatible_ (DSIC) if it is optimal for ad \(a_{i}\) to report its true value to the auction, holding the other bids fixed: \(u_{i}(v_{i},_{-i}) u_{i}(b_{i},_{-i})\) for all possible bids \(b_{i}\) and competing bids \(_{-i}\). An auction is _individually rational_ if no advertiser is worse off by participating in the auction: \(u_{i}(v_{i},_{-i}) 0\) for all \(_{-i}\).

## 3 Single allocation segment auction

Following the RAG framework, we introduce a _segment auction_ to retrieve and allocate ads during the LLM's process of output generation. A discourse _segment_ is an abstraction of a series of tokens that will be the minimal unit of generation for the LLM auction. For example, the segment could be a single token, sentence, paragraph, or even an entire document. The segment size can be enforced at a low-level by truncating tokens; otherwise, prompt engineering can be quite effective at limiting LLM output to a specific number of sentences or paragraphs [12; 40].

We first focus on the scenario in which a single ad is incorporated into each segment; we consider the generalization to multiple ads per segment in Section 3.2. Let \(T\) be the number of segments. Formally, we are interested in generating the \(t\)-th segment \(y^{(t)}\), given the series of previous segments \(y^{(1:t-1)}\). In generating each segment \(y^{(t)}\), we have an opportunity to incorporate one of \(k\) ads into the output. The RAG generative model is as follows.

\[P(y^{(1:T)}|x)=_{t[T]}_{i[n]}P_{}(a_{i}|x,y^{(1:t-1)}; )\,P_{}(y^{(t)}|x,y^{(1:t-1)},a_{i}).\] (2)

The probability \(P_{}(a_{i}|x,y^{(1:t-1)};)\) is an adjustment of \(P_{}(a_{i}|x,y^{(1:t-1)})\) according the advertisers' bids. We will focus on the following adjusted probability based on linear aggregation :

\[_{i}^{(t)}= q_{i}^{(t)}}{(_{j[n]}b_{j}  q_{i}^{(t)})}.\] (3)

Note that if all the bids are the same, this reduces to the baseline RAG output model.

We further impose the following assumption asserting that each segment is rich enough to capture click-through rate by itself, and importantly, the advertiser's utility is additive over each segment.

**Assumption 3.1** (Rich Segment).: Let \(C_{i}^{(t)}\) be the binary event that ad \(a_{i}\) is clicked in the \(t\)-th segment. We assume that Assumption 2.1 holds segment-wise, so that \(_{i}^{(t)}:=[C_{i}^{(t)}|x,y^{(1:t-1)}] P_{}(a _{i}|x,y^{(1:t-1)})=:q_{i}^{(t)}\) for each \(t[T]\). We also assume that utility decomposes additively across segments: \(u_{i}=_{t[T]}u_{i}^{(t)}()\).

Due to this assumption, one can observe that (3) is equivalent to \(b_{i}_{i}^{(t)}/(_{j[n]}b_{j}_{i}^{(t)})\). Thus, it suffices to only deal with the calibrated relevance instead of the actual click-through rates here.

Our segment auction is presented formally in Figure 2. The key idea is to first perturb each agent's score (i.e., bid-per-impression \(q_{i}b_{i}\)) using independent Gumbel random variables, and then run a standard second-price auction. The bid perturbation ensures that bidders win following adjusted probabilities (3), _e.g.,_ see Lemma H.1. This kind of perturbation is known as the Gumbel max-trick, and is also a familiar idea in discrete choice methods in econometrics [17; 41]. After the segment auction determines the allocation and payment, the LLM outputs \(y^{(t)}\) according to the generative model (2).4

### Theoretical analysis

We now provide a theoretical analysis of the segment auction. In the mechanism design literature, the auctioneer is typically interested in (1) incentive-compatibility, so that truth telling is a dominant strategy, (2) individual rationality, so that no participant is ever worse off by by participating in the

Figure 2: Single allocation segment auction

auction. We mainly consider the following _independent segment auction_ such that the relevance is independent from the previous segments, _i.e.,_ for every \(t[T]\):

\[q_{i}^{(t)}=q_{i} P_{}(a_{i}|x).\] (4)

A slightly more general model would be \(q_{i}^{(t)}=^{(t)}q_{i}\), where \(^{(t)}\) is a segment-wise factor that can capture a user's decreasing propensity to click as the ad is shown in later segments in the output.5 Our results extend in a straightforward fashion to monotonically decreasing segment factors, so we omit them for simplicity.

Our first result is that for the class of independent segment auctions, segment auction maximizes a new notion of logarithmic social welfare assuming truthful bidding, and further satisfies desired properties. All the proofs can be found in Appendix H.

**Theorem 3.2**.: _Given a query \(x\), the segment auction is DSIC, IR, Pareto-efficient, and has the maximal logarithmic social welfare (henceforth LSW) among independent segment auctions, where LSW is defined by 6_

\[=_{t[T]}^{(t)}=_{t[T]}_{i[n]}(x_{i }^{(t)})^{v_{i}q_{i}}.\]

Recall that we write \(x_{i}\) to denote a component of the allocation vector and \(x\) to denote the user query (see footnote 3). We remark that even though LSW is defined over \(q_{i}\), replacing it with \(_{i}\) induces the same optimization problem due to the calibrated relevance assumptions.

Intuitively, if the mechanism sets \(x_{i}^{(t)}=0\) for some \(i[n]\), then \(^{(t)}\) becomes zero, implying that the mechanism should guarantee some positive probability of selection to every ad for every segment. Note that this is indeed a logarithmic analogue of the social welfare since \((^{(t)})=_{i[n]}v_{i}q_{i} x_{i}^{(t)}\). Investigating further properties of the proposed notion of logarithmic social welfare remains as an interesting open question.

**Theorem 3.3**.: _The segment auction is a randomization over truthful auctions. For the \(t\)-th segment, its per-click payment rule takes the form_

\[}{q_{i}}b_{i}+w_{-i}}{w_{-i}} -b_{i}}{w_{-i}+q_{i}b_{i}},\] (5)

_where \(w_{-i}=_{j i}q_{j}b_{j}\). Any truthful auction for RAG allocation rule (3) has per-click payment rule (5), up to an additive constant._

The segment auction is truthful, as it is a randomization over truthful second-price auctions . The fact that payment (5) is unique up to an additive constant follows from Myerson's lemma .

### Multi-allocation segment auction

So far, we have focused on the setting in which the auction mechanism only advertises a single ad per segment. This approach, however, might be wasteful if the segment is long enough to adapt multiple ads, or if there are several ads that can be advertised naturally without compromising the segment's quality. In this section, we propose a multi-allocation segment auction that allocates multiple ads in a single segment. The main question here is how one can design the allocation and payment function to obtain a mechanism that exhibits several desired properties. To this end, we formally consider the auction procedure for the \(t\)-th segment. Assuming that we are interested in selecting \(k\) ads for each segment, it proceeds as depicted in Figure 3. Given that the mechanism selects the set of winners \(A^{*}_{k}\) where \(_{k}=\{A[n]:|A|=k\}\), we delegate the role of generating the output \(y_{A^{*}}\) entirely to the LLM. For instance, we provide a single document that concatenates the descriptions of the ads in \(A^{*}\) and query the LLM to generate the output conditioned on such a document.

The following theorem characterizes the allocation function for the multi-allocation segment auction.

**Theorem 3.4**.: _Let \(=[n] S\). For each \(S_{k}\), the probability that the set of ads \(S\) is selected as the winners is_

\[()=_{T S}(-1)^{|T|+1}q_{j}b_{j}}{_{i T}q_{i}b_{i}}.\]

Indeed, this strictly generalizes the single allocation segment auction since taking \(S=\{i\}\), we get

\[(\{i\})=(-1)^{|\{i\}|+1}}q_{j}b_{j}}{_{j\{i\}}q_{j}b_{j}}=b_{i}}{ _{j N}q_{j}b_{j}},\]

which is the standard selection probability for the single-ad setting.

In fact, the described multi-allocation segment auction can be deemed as a special case of more general _combinatorial_ segment auction (see Appendix E). Briefly speaking, in the combinatorial segment auction, we consider each set \(A_{k}\) as a single entity to retrieve in RAG, and we assign a set-wise relevance metric \(q_{A}\) to obtain the allocation probability of each set, which is further decomposed by the individual relevance \(q_{A,i}\) of each ad \(i A\).7 One advantage of the combinatorial segment auction is that the individual relevance \(q_{A,i}\) given the set \(A\) can be more naturally connected with the advertiser utility, making it easier to calibrate with the actual click-through rate. However, this comes at the cost of larger computational complexity and query complexity with respect to the relevance and the LLM module, and requires to compute the individual relevance as well as the set-wise relevance.

## 4 Experiments

We validate our theoretical findings and provide insights on operating segment auctions in practice via numerical simulations. After determining the winning advertiser, we provide the ad to the LLM context and ask the model to generate an additional segment incorporating the ad, while continuing from the previous segments and advertising the selected ad. More details on the LLM and prompts used are in Appendix F.

Setup.We consider segment auctions where each segment is a single sentence, and the entire document consists of three segments. There are five types of auctions: (1) segment auction with replacement, allowing repeated selection of the same ads across segments, (2) segment auction without replacement, requiring different ads for each segment, (3) Naive I, which uses the same allocation and payment functions as the segment auction with replacement but concatenates selected ads' texts at the end of the output, without using the LLM to integrate them into the output, (4) Naive II, similar to single allocation segment auctions but disregarding relevance (see Pseudocode in Appendix F.2, Figure 5), and (5) multi-allocation auction, which treats the three sentences as one longer segment, allocating three ads to the entire output at once.

Figure 3: Multi-allocation segment auction.

Relevance measure.To compute the relevance measure, we use a model from the sentence-transformers library.8 This model maps input sentences or paragraphs into an embedding space where semantically similar texts have higher cosine similarity, while unrelated texts have lower cosine similarity.

Scenarios.We consider three experimental scenarios, each involving a set of advertisers and their corresponding bids. However, due to space limitations we defer the analysis of two scenarios to the Appendix. We run each scenario \(500\) times (trials) and calculate the average of the metrics, which will be defined shortly. Throughout the experiments, the query is fixed to: _"Can you suggest some books similar to 'To Kill a Moksbird'?"_.

Auction outcomes.We calculate the following outcome metrics for evaluation:

* \(:=_{t[T]}_{i[n]}p_{i}^{(t)}\).
* \(:=_{t[T]}_{i[n]}v_{i}q_{i}^{(t)}x_{i}^{(t)}\).9 * \(:=_{t[T]}_{i[n]}q_{i}^{(t)}x_{i}^{(t)}\). * \(:=_{i[n]}_{j}_{i,j}\) where \(_{i,j}\) denotes the allocative utility \(_{t[T]}v_{i}q_{i}^{(t)}x_{i}^{(t)}\) of agent \(i\) in trial \(j\).

Quality of output.To capture the genuine quality of the generated output, inspired by Feizi et al. , we measure the _embedding similarity_ between the original outputs in which no ads are advertised but rather purely generated from the LLM, and the modified output corresponding to each mechanism. This similarity is computed using cosine similarity and is normalized to lie in \(\).

### Results

Auction outcomes.The scenario we consider is shown on the left of Table 1 and includes four ads with a wide range of final allocation probabilities. Note that we do not include the results for Naive I here since its auction metrics are necessarily identical to the segment auction with replacement. As seen on the right of Table 1, social welfare varies significantly between mechanisms. The segment auction with replacement has the highest social welfare, followed by the one without replacement, due to large differences in allocative efficiency (\(q_{i}v_{i}\)) among advertisers. The segment auction without replacement still outperforms Naive II in terms of social welfare. However, the multi-allocation segment auction tends to have the lowest revenue as it charges lower payments to winners.

Notably, the relevance of the segment auction with replacement far exceeds that without replacement, unlike the uniform scenario. This is due to the ad 'Bookhaven' with very large relevance (0.87). Naive II and the segment auction without replacement have similar overall relevance, likely because the number of ads (4) is small compared to the total number of slots (one for each of 3 segments). For minimum social welfare, the ordering is opposite to social welfare due to differences in allocation probabilities. Segment auction with replacement selects 'Bookhaven' repeatedly, while without replacement, different ads are chosen for different slots. Naive II has slightly larger minimum social welfare than the segment auction without replacement due to a more uniform selection procedure

   Advertiser & Bid & \(q_{i}\) & \(x_{i}\) \\  Velora & \(3\) & \(0.36\) & \(0.22\) \\ BookHaven & \(3\) & \(0.87\) & \(0.54\) \\ MassMart & \(2\) & \(0.31\) & \(0.13\) \\ EspresposeEdge & \(2\) & \(0.26\) & \(0.11\) \\    
   Mechanism & Soc. Wel. & Revenue & Relevance & Min. Soc. Wel. \\  Seg w/ repl. & \(.660\) (\(\) 0.001) & \(.371\) (\(\) 0.0070) & \(.688\) (\(\) 0.0082) & \(.185\) \\ Seg w/ repl. & \(.521\) (\(\) 0.0025) & \(.333\) (\(\) 0.0060) & \(.565\) (\(\) 0.0021) & \(.294\) \\ Naive II & \(.508\) (\(\) 0.0085) & \(.379\) (\(\) 0.0065) & \(.552\) (\(\) 0.0076) & \(.329\) \\ Multi alloc & \(.524\) (\(\) 0.0021) & \(.238\) (\(\) 0.0061) & \(.569\) (\(\) 0.0016) & \(.298\) \\   

Table 1: Experiment setup (left), and the corresponding auction outcomes (right). Note that all metrics are normalized by dividing them by their maximum possible value.

induced by similar bids in Table 1. Similar tendencies are observed in the other two scenarios, detailed in Appendix G.1.

**Output quality.** To further verify the effect of incorporating the set of ads in the context of the entire output, we implement the multi-allocation segment auction. For a fair comparison, in this auction, we define the segment to be the entire three sentences, and allocate \(k=3\) ads within it.

Interestingly, we indeed observe that the eventual output quality of the multi-allocation segment auction is the highest among every mechanism. This implies that if one gives flexibility of deciding which part to incorporate ads among the entire document, the LLM would do a much better job articulating the advertised output without compromising the output quality. In Appendix G.1, we observe that this phenomenon is amplified with more advertisers, demonstrating the superiority of the multi-allocation segment auction in terms of output quality.

**Qualitative analysis of single vs. multi-allocation.** We provide a qualitative comparison of the output quality between the single and multi-allocation segment auctions with \(11\) advertisers in Figure 4. In the multi-allocation segment auction, interestingly, we observe that an ad is not always advertised in each sentence. Indeed, both 'MassMart' and 'EspressoEdge' are advertised in the second sentence in a coherent manner (teal text), while the first sentence is devoted to fully addressing the user's query. In addition, the third sentence (teal text) is constructed in a cohesive way from the previous sentence.

This verifies our conjecture that the multi-allocation segment auction constructs more coherent output, as the LLM can optimize over the entire document to incorporate the selected ads. The LLM can decide a coherent ordering of ads within the document, unlike the single allocation segment auction, which forces one ad into each segment. For example, in the first segment of the single allocation auction, advertising 'BrainChips' is less cohesive (red text), while the second segment is more fluent (teal text), and the third segment becomes irrelevant (red text) again. Further qualitative analyses are provided in Appendix G.2.

   Mechanism & \(1\)st seg & \(2\)nd seg & \(3\)rd seg & \(k=1\) & \(k=2\) & \(k=3\) \\  Seg w/ repl. & \(.746\)\((.0040)\) & \(.596\)\((.0040)\) & \(.588\)\((.0039)\) & \(.746\)\((.0040)\) & \(.715\)\((.0039)\) & \(.700\)\((.0036)\) \\ Seg w/o repl. & \(.752\)\((.0040)\) & \(.602\)\((.0045)\) & \(.576\)\((.0043)\) & \(.752\)\((.0040)\) & \(.716\)\((.0035)\) & \(.702\)\((.0034)\) \\ Naive I & \(.743\)\((.0043)\) & \(.555\)\((.0033)\) & \(.551\)\((.0035)\) & \(.743\)\((.0043)\) & \(.740\)\((.0044)\) & \(.671\)\((.0032)\) \\ Naive II & \(.745\)\((.0048)\) & \(.600\)\((.0040)\) & \(.584\)\((.0047)\) & \(.745\)\((.0048)\) & \(.712\)\((.0045)\) & \(.698\)\((.0040)\) \\ Multi-alloc & - & - & - & - & - & \(.715\)\((.0030)\) \\   

Table 2: The \(2\)-\(4\)th columns represent the similarity of the individual segment to the original output, and the \(5\)-\(7\)th columns represent the similarity of the first \(k\) segments to the original output.

Figure 4: Outputs of single and multi-allocation segment auctions.

Conclusions

This paper considered the question of integrating ads into the output of LLMs, to offset serving costs and user subscription charges. Our approach is based on the popular RAG framework for incorporating factual information into LLM-generated content . We introduced the concept of a _segment auction_ where an auction is run to integrate single or multiple ads into each output segment (e.g., sentence, paragraph). We showed that our segment auction designs implement the RAG allocation rule while charging incentive compatible prices. We also showed that the single-ad segment auction maximizes logarithmic social welfare, which balances efficiency and fairness in the allocation. In our experimental evaluation, our key finding was that whereas repeated single-ad segment auctions have higher revenue, less-frequent multi-ad auctions lead to higher quality output, for the same number of ads. This uncovers an inherent trade-off between revenue and quality for operators of segment auctions.

We see several avenues for follow-up work. We note that while our work takes the perspective of charging ads to appear in LLM output, one could also take the reverse perspective where information sources need to be compensated for providing unique, factual information under the RAG framework. In that case a _reverse auction_ would be run to obtain high-quality information at minimum cost. We expect the main design ideas presented here to carry through, though important practical details (e.g., per-impression vs. per-click pricing) would change. Another question is the integration of _reserve prices_, which can serve to both increase revenue and maintain output quality standards. Finally, based on our findings on the relative quality of single- vs. multi-ad segment auction output, it would be worthwhile to investigate more sophisticated approaches to RAG segment auctions like joint fine-tuning of the retriever and generator components.

## 6 Acknowledgements

This work is partially supported by DARPA QuICC, NSF AF:Small #2218678, NSF AF:Small #2114269, Army-Research Laboratory (ARL) #W911NF2410052, and MURI on Algorithms, Learning and Game Theory.