# ReMoDetect: Reward Models

Recognize Aligned LLM's Generations

 Hyunseok Lee\({}^{*1}\), Jihoon Tack\({}^{*,1}\), Jinwoo Shin\({}^{1}\)

\({}^{1}\)Korea Advanced Institute of Science and Technology

{hs.lee,jihoontack,jinwoos}@kaist.ac.kr

Equal contribution

###### Abstract

The remarkable capabilities and easy accessibility of large language models (LLMs) have significantly increased societal risks (e.g., fake news generation), necessitating the development of LLM-generated text (LGT) detection methods for safe usage. However, detecting LGTs is challenging due to the vast number of LLMs, making it impractical to account for each LLM individually; hence, it is crucial to identify the common characteristics shared by these models. In this paper, we draw attention to a common feature of recent powerful LLMs, namely the alignment training, i.e., training LLMs to generate human-preferable texts. Our key finding is that as these _aligned LLMs_ are trained to maximize the human preferences, they generate texts with higher estimated preferences even than human-written texts; thus, such texts are easily detected by using the _reward model_ (i.e., an LLM trained to model human preference distribution). Based on this finding, we propose two training schemes to further improve the detection ability of the reward model, namely (i) continual preference fine-tuning to make the reward model prefer aligned LGTs even further and (ii) reward modeling of Human/LLM mixed texts (a rephrased texts from human-written texts using aligned LLMs), which serves as a median preference text corpus between LGTs and human-written texts to learn the decision boundary better. We provide an extensive evaluation by considering six text domains across twelve aligned LLMs, where our method demonstrates state-of-the-art results. Code is available at https://github.com/hyunseoklee-ai/ReMoDetect.

## 1 Introduction

Large Language models (LLMs) [8; 41] have significantly accelerated progress in natural language processing (NLP) and thus become a core technology in various real-world applications used by millions of users, such as coding assistants , search engines , and personal AI assistants . However, due to their remarkable capabilities, they also lead to multiple misuses, which raises serious safety concerns, e.g., fake news generation , plagiarism , and malicious comments  using LLMs. In this regard, developing automatic LLM-generated text (LGT) detection frameworks is becoming more crucial for the safe usage of LLMs [32; 11; 13].

To tackle this issue, there have been several efforts to build LGT detectors [21; 2]. Here, one line of the literature proposes to train a binary classifier using the human-written texts and LGTs [20; 6]. However, assuming specific knowledge (e.g., training with LGTs from specific LLMs) may introduce a bias to the detector, thus requiring a careful training. In this regard, another line of work focuses on zero-shot detection (i.e., detecting with a frozen LLM), aiming to capture a useful common characteristic of LLMs for effective detection [20; 34]. Despite their significant efforts, it is still quite challenging (and had relatively less interest) to detect texts generated by recent powerful LLMs such as GPT-4  and Claude , which is a realistic and important LGT detection scenario [11; 13].

In this regard, we draw attention to a common yet important feature of recent powerful LLMs: the _alignment training_, i.e., training LLMs to generate human-preferable texts. For instance, one way to align LLMs is to (i) train a _reward model_ that reflects the human preference distribution and (ii) then fine-tune the LLM to maximize the predicted reward of the generated text.

**Contribution.** In this paper, we present a somewhat interesting observation by using the reward model: as aligned LLMs are optimized to maximize human preferences, they generate texts with higher predicted rewards even compared to human-written texts (see Figure 1).2 Based on this, one can easily distinguish LLM-generated texts from human-written texts by simply using the predicted score of the reward model as the detection criteria, e.g., AUROC of 92.8% when detecting GPT4 generated texts (in Table 1). Inspired by this, we suggest further exploiting the reward model for aligned LGT detection by enhancing the score separation between the human- and LGTs.

We propose ReMoDetect, a novel and effective aligned LGT detection framework using the reward model. In a nutshell, ReMoDetect is comprised of two training components to improve the detection ability of the reward model. First, to further increase the separation of the predicted reward between LGTs and human-written texts, we continually fine-tune the reward model to predict even higher reward scores for LGTs compared to human-written-texts while preventing the overfitting bias using the replay technique . Second, we generate an additional preference dataset for reward model fine-tuning, namely the Human/LLM mixed text; we partially rephrase the human-written text using LLM. Here, such texts are used as a median preference corpus among the human-written text and LGT corpora, enabling the detector to learn a better decision boundary.

We demonstrate the efficacy of ReMoDetect through extensive evaluations on multiple domains and aligned LLMs. Overall, our experimental results show strong results of ReMoDetect where it significantly outperforms the prior detection methods, achieving state-of-the-art performance. For instance, measured with the average AUROC (%) across three text domains in Fast-DetectGPT benchmark , ReMoDetect demonstrates superior performance over the prior work from 90.6\(\)97.9 on the GPT-4 and 92.6\(\)98.6 on Claude3 Opus generated texts. Moreover, we highlight that ReMoDetect is robust in multiple aspects, including robustness against rephrasing attacks (i.e., detecting rephrased text originating from LGTs), detection text length, and unseen distributions.

## 2 Related Work

**Large Language Model (LLM) generated text detection.** There are several approaches to detecting text generated by LLMs, mainly categorized in two: (i) training supervised detectors and (ii) zero-shot detection methods. The first category aims to train a binary classifier (or detector) that classifies LLM-generated texts (LGTs) and human-written texts. While effective, these methods can suffer from overfitting bias, where the detector performs well on the training data but fails to generalize detection on other LGTs . It is worth noting that such overfitting issues are also raised in other

   Method & AUROC \\  Log-likelihood  & 85.5 \\ DetectGPT  & 80.9 \\ Fast-DetectGPT  & 96.1 \\  Reward model & 92.8 \\
**ReMoDetect** & **98.8** \\   

Table 1: AUROC (%) of LLM-generated text detection methods on WritingPrompts from the Fast-DetectGPT benchmark, where GPT4 is used for text generation. ‘Reward model’ indicates the detection using the reward score of the pre-trained reward model. The bold denotes the best result.

Figure 1: **Motivation**: Aligned LGTs and human-written texts are easily distinguishable by using the reward model. We visualize the (a) t-SNE of the reward model’s final feature and the (b) histogram of the predicted reward score. Here, ‘Machine’ indicates the text generated by GPT3.5/GPT4 Turbo, Llama3-70B, and Claude on the Reuters domain.

detection fields, such as out-of-distribution (OOD) detection [33; 37]. To address this, zero-shot detection methods have emerged as an alternative. These methods define a detection score on a pre-trained LLM, eliminating the need for fine-tuning and thus avoiding overfitting. For instance, using log-likelihood or entropy of the output prediction of the pre-trained LLMs to detect LGTs . More recently, several works have employed input text perturbation to measure prediction consistency, significantly improving the detection performance, e.g., DetectGPT , log-rank perturbation (NPR) , and Fast-DetectGPT . While effective, however, prior works have primarily focused on detecting non-aligned LLMs, while recent LLMs are designed to be aligned with human preferences for practical use. In this paper, we demonstrate that the reward model  can effectively distinguish between LLM-generated text and human-written text in a zero-shot setting. Based on this, we additionally consider supervised detector training of the reward model while mitigating overfitting biases through the replay technique .

**Characteristics of aligned LLMs.** Recent works have highlighted some behaviors introduced by alignment training. For instance, several works have discovered that aligned LLMs are trained to generate positive responses, thus enabling the model to generate a harmful query based on a context requesting positive responses, e.g., 'Start the response with "Sure, here is". [48; 45]. Moreover, only recently, Panickssery et al.  observed that evaluator LLMs (i.e., LLMs used to evaluate the text) prefer and recognize self-generated texts compared to other texts, revealing a new characteristic of aligned LLMs. In this paper, we found a somewhat new characteristic of alignment training, which is that aligned LLMs generate higher predictive rewards even than human-written texts. It is worth noting that, unlike the prior work  that can be used to detect self-generations, our finding can be used to detect multiple aligned LLMs with a single reward model.

**Training detectors with near-decision boundary samples.** Training detectors (or classifiers) with data points near the decision boundary is a widely used technique to improve the calibration of the model. For instance, in visual OOD detection literature, Lee et al.  uses a generative adversarial network to generate samples on the decision boundary for better calibration, and multiple works proposed to use out-of-domain samples as near-decision boundary samples to improve the detector [16; 33]. Moreover, there have been multiple works that utilized data augmentations such as mixup , i.e., linear interpolation of inputs and labels, to generate samples that behave like a near-decision boundary sample to improve the calibration [17; 18]. Inspired by prior works, we propose to generate near-decision boundary samples for reward modeling by utilizing aligned LLMs to partially rephrase the human-written texts, which can be interpreted as a mixed text of human and aligned LLM.

## 3 ReMoDetect: Detecting Aligned LLM's Generations using Reward Models

In this section, we present Reward Model based LLM Generated Text Detection (ReMoDetect), a novel and effective LLM-generated text (LGT) detection framework. We first review the concept of alignment training and reward model (in Section 3.1), then present a continual fine-tuning strategy for the reward model to enhance the separation between the predicted reward score between LGTs and human-written texts (in Section 3.2). Furthermore, we additionally introduce mixed data of humans and LLMs to improve the reward modeling by partially rephrasing the human-written texts with the aligned LLMs (in Section 3.3). We provide the overview of ReMoDetect in Figure 2.

**Problem setup.** We describe the problem setup of our interest, LGT detection. For a given context \(x\) and the given response \(y\) sampled from an unknown distribution, the goal of LGT detection is to model a detector that identifies whether \(y\) is sampled from the human-written text data distribution \(p_{}(y|x)\) or from a large language model (LLM; \(\)), i.e., \((y|x)\). To this end, existing methods for LGT detection define a score function upon the detector model that a high value heuristically represents that \(y\) is from the human-written text data distribution.

### Alignment Training and Reward Modeling

Recent LLMs are trained in two sequential steps: (i) unsupervised pre-training on a large text corpus [1; 8] then (ii) training LLMs to generate texts that align with human preferences (also known as alignment training) [27; 30; 19]. In this paper, we found that this alignment training can force the LLM to generate texts that are too close to human preferences, even compared to human-written texts. To quantify such a value of the given text, we use the prediction of the reward model , which is trained to reflect human preferences.

**Reward model.** For a given context \(x\) and the corresponding response \(y\), the reward model \(r_{}(x,y)\) parameterized by \(\), models the human preference of \((x,y)\). To train such a model, one of the most conventional ways is to use the Bradley-Terry model  based on the collection of preference labels: the labeler is required to choose the better response among two responses based on the given context \(x\), formally as \(y_{w} y_{l} x\) where \(y_{w}\) and \(y_{l}\) indicates the preferred and dispreferred response, respectively. Then the Bradley-Terry model defines the human preference distribution as follows:

\[p(y_{w} y_{l} x)=(x,y_{w}))}{( r_{}(x,y_{w}))+(r_{}(x,y_{l}))}.\]

By considering the reward modeling as a binary classification problem, one can minimize the following negative log-likelihood loss to train the reward model:

\[_{}(x,y_{w},y_{l})-(r_{}(x,y_{w })-r_{}(x,y_{l})).\]

where \(()\) is the logistic function.

**Motivation.** By utilizing the pre-trained reward model, we observed that the predicted reward score of aligned LGT is higher than the human-written text (in Figure 1 and more examples are presented in Section 4.2). This indicates that the alignment training optimizes the LLM to generate texts with high human preferences, which makes the LLM generate texts that are actually far away from the human-written text data distribution \(p_{}(y|x)\). Inspired by this observation, we suggest utilizing the reward model for aligned LGT detection.

### Continual Preference Tuning: Increasing the Separation Gap of the Predicted Reward

Based on our observation, we suggest further increasing the separation gap of the predicted rewards between aligned LGTs and human-written texts. To this end, we use the Bradley-Terry model to continually fine-tune the reward model so that the model prefers LGTs even further compared to human-written texts. Furthermore, it is important to consider the overfitting issue when fine-tuning the reward model as assuming specific prior knowledge may introduce a bias to the detector , e.g., training detector with LGTs of some specific LLMs may not generalize detection on other LLM's generated texts. In this regard, we prevent overfitting by regularizing the prediction change of the current reward model from the initial reward model using replay buffers , i.e., samples used for training the initial reward model. Formally, for a given human-written text/LGT pair \((y_{},y_{})\) based on the context \(x\), and the reward model's parameter \(\), the training objective is as follows:

\[_{}_{}(x,y_{},y_{})+\ dr_{}(x_{},y_{}),r_{_{0}}(x_{ },y_{}),\] (1)

where \(_{0}\) is the pre-trained reward model's parameter, \(\) is a parameter for controlling the deviation from the initial reward model, \(d(,)\) is the \(_{2}\) distance function, and \((x_{},y_{})\) is the replay buffer.

Figure 2: Overview of Reward Model based LLM Generated Text Detection (ReMoDetect): We continually fine-tune the reward model \(r_{}\) to prefer aligned LLM-generated responses \(y_{}\) even further while preventing the overfitting by using the replay technique: \((x_{},y_{})\) is the replay buffer and \(r_{_{0}}\) is the initial reward model. Moreover, we generate a human/LLM mixed text \(y_{}\) by partially rephrasing the human response \(y_{}\) using the aligned LLM, which serves as a median preference data compared to \(y_{}\) and \(y_{}\), i.e., \(y_{} y_{} y_{} x\), to improve the reward model’s detection ability.

### Reward Modeling of Human and LLM Mixed Dataset

We suggest utilizing the human and LLM mixed dataset to further improve the detection performance. Specifically, we partially rephrase human-written texts using aligned LLMs to generate the mixed dataset, which are considered as median preference datasets between LGTs and human-written texts. Note that such a technique introduces new samples that behave like a reasonable near-decision boundary sample, which enables the detector to learn a better decision boundary. For instance, multiple out-of-distribution detection methods utilize generated samples  such as mixup data [47; 17] as a near-decision boundary sample to improve the detector's calibration.

Concretely, for a given context \(x\) and the human-written response \(y_{}\), we partially rephrase the response with a ratio of \(p\), using LLM \(_{}\), i.e., \(y_{}_{}(y_{}|x,p)\). We consider \(y_{}\) as a median preference response between human-written text \(y_{}\) and LGT \(y_{}\) which is formally described as: \(y_{} y_{} y_{} x\). Since the Bradely-Terry modeling assumes binary classification, we consider dividing the triplet into three binary classification problems, i.e., \(y_{} y_{} x\), \(y_{} y_{} x\), and \(y_{} y_{} x\). Therefore, the final training objective of ReMoDetect additionally considers the mixed dataset's preference modeling in addition to Eq. (1), which is as follows:

\[_{}_{}+_{1}\ _{}(x,y_{},y_{})+_{2}\ _{}(x,y_{},y_{})\] (2)

where \(_{1}\) and \(_{2}\) are parameters that chooses the contribution of the mixed data \(y_{}\).

**Detection stage.** After training ReMoDetect, we use the predicted reward score \(r_{}(x,y)\) to determine whether the given text is LGT or human-written texts where a higher score indicates LGT. Unlike recent detection schemes that require multiple forwards (for perturbing the input [11; 13]), ReMoDetect only requires a single forward pass, thus showing inference efficiency (in Section 4.3).

## 4 Experiments

We provide an empirical evaluation of ReMoDetect by investigating the following questions:

* Can ReMoDetect detect texts generated from aligned LLMs? (Table 2 & Table 3)
* Do reward models recognize aligned LLM's generations? (Figure 3 & Figure 4)
* Is ReMoDetect robust to rephrasing attacks and challenging setups? (Table 4 & Table 5 & Figure 6)
* How do/Do the proposed components enhance the detection performance? (Figure 5 & Table 7)

Before answering each question, we outline the experimental protocol (more details in Appendix A).

**Evaluation setup.** We mainly report the area under the receiver operating characteristic curve (AUROC) as a threshold-free evaluation metric (results with other metrics are presented in Appendix B.3). Here, the text is written (or generated) in 6 text domains introduced in Fast-DetectGPT  and MGTBench , including PubMed , XSum , Reuters , Essay , and WritingPrompts  (each benchmark consists of different types of WritingPrompts, thus denoting the version in  as small-sized). In addition to GPT3.5 Turbo, GPT4, and Claude, which are already provided in the benchmark, we consider more aligned LLMs \(\), including LLam3 70B instruct , Claude3 Opus  Gemini pro , and GPT4 Turbo . We also consider more aligned LLMs, e.g., models trained with direct preference optimization (DPO) , in Table 6 and Appendix B.2.

**Training setup of ReMoDetect.** For the main experiment, we use the reward model from OpenAssistant , a 500M-sized LLM for efficient training and inference (we also consider other reward models in Section 4.2). We train ReMoDetect with HC3 dataset by following ChatGPT-Detector , which consists of human and ChatGPT responses to the same context. For generating Human/LLM mixed datasets, we use Llama3 70B instruct as \(_{}\) to rephrase 50% (\(p=0.5\)) of human-written texts. Unless otherwise specified, we train a single model for ReMoDetect, which is used across all experiments (i.e., we did not train separate ReMoDetect for individual datasets or aligned LLMs).

**Baselines.** We compare ReMoDetect with multiple detection methods, which fall into three categories. First, we consider zero-shot detectors, including Log-likelihood , Rank , DetectGPT , LRR , NPR , and Fast-DetectGPT  where we use GPT families as the base detector (e.g., GPT-J ) by following prior works. For supervised detectors, we consider open-source checkpoints of OpenAI-Detector  and ChatGPT-Detector , which are trained on GPT2 generated texts and HC3 datasets, respectively. Finally, we consider GPTZero , a commercial LLM-generated text (LGT) detection method. We also compare ReMoDetect with more baselines in Appendix B.1.

### Main Results

In Table 2, we show the LGT detection performance of ReMoDetect and other detection baselines. Overall, ReMoDetect significantly outperforms prior detection methods by a large margin, achieving state-of-the-art performance in average AUROC. For instance, on the Fast-DetectGPT benchmark, ReMoDetect improves the prior best average AUROC from 91.9%\(\)95.8%. Moreover, it is worth noting that the improvement is consistent in MGTbench, indicating the generalization ability of ReMoDetect, despite the fact that it's trained on specific LGTs (i.e., ChatGPT texts from HC3). Thus, we believe the continual preference tuning with replay indeed helped prevent the overfitting.

Table 2: AUROC (%) of multiple LGT detection methods, including log-likelihood (Loglik) , Rank , DetectGPT (D-GPT) , LRR , NPR , Fast-DetectGPT (FD-GPT) , OpenAI-Detector (Open-D) , ChatGPT-Detector (Chat-D) , and ReMoDetect (Ours). We consider two major LGT detection benchmarks from (a) Fast-DetectGPT  and (b) MGTBench . The bold indicates the best result within the group.

**Comparison with a commercial detection method.** We also compare ReMoDetect with a commercial LGT detection method, GPTZero, under the Fast-DetectGPT benchmark. Somewhat interestingly, as shown in Table 3, ReMoDetect significantly outperforms GPTZero in all considered aligned LLMs except for one in terms of the average AUROC. It is worth noting that ReMoDetect only has seen ChatGPT datasets and partially rephrased texts by Llama3 70B, indicating the rest of the aligned LLMs are unseen distribution to ReMoDetect. We believe further improving the performance of ReMoDetect by enlarging the training corpus using more aligned LLM will be an interesting future direction to explore, showing an impact on the open-source community.

### Reward Model Analysis

**More observation studies.** In addition to our observation study presented in Table 1 and Figure 1, we considered (i) more text domains and (ii) different types of reward models to rigorously verify our observation (i.e., aligned LLMs generate texts with higher predicted preference compared to human-written texts). To this end, we use a pre-trained reward model without further fine-tuning. First, we show that our observation is consistent across multiple text domains (in Figure 3). Interestingly, the predicted reward separation between LGTs and human-written texts is more significant in Essay and WritingPrompts-small compared to PubMed (i.e., a biology expert written data), possibly implying that alignment training is done more on relatively common texts compared to expert datasets. Second, we also observed that LGTs have higher preference compared to human-written texts on other reward models as well (in Figure 4). Intriguingly, a larger reward model within the same model family (i.e., Gemma 7B compared to 2B) shows better separation of the predicted score, showing the possibility of ReMoDetect's scaling law, i.e., using a large reward model will improve the detection performance. We also provide more results of our observation studies in Appendix B.5.

   Model & GPT 3.5 Turbo & GPT4 & GPT4 Turbo & Llama3 70B & Gemini pro & Claude3-Opus \\  GPTZero & 93.5 & 88.5 & 95.7 & 96.6 & **82.9** & 95.7 \\
**Ours** & **98.7** & **97.9** & **98.9** & **98.5** & 82.4 & **98.6** \\   

Table 3: Comparison with ReMoDetect (Ours) and GPTZero , a commercial black-box LGT detection API. We report the average AUROC (%) on the Fast-DetectGPT benchmark, including PubMed, XSum, and WritingPrompts. The bold indicates the best results.

Figure 4: Predicted reward distribution of human-written texts and LGTs on three different reward models (RMs), including (a) Gemma 2B (b) Gemma 7B, and (c) Llama3 8B. ‘Machine’ denotes GPT4 Turbo and Claude3 Opus generated texts. We use WritingPrompts-small as the text domain.

Figure 3: Predicted reward distribution of human written texts and LGTs on three different domains, including (a) Essay, (b) WritingPrompts-small, and (c) PubMed. We use the reward model from OpenAssistant . ‘Machine’ denotes GPT4 Turbo and Claude3 Opus generated texts.

**Reward distribution change after training.** We additionally analyze the predicted reward distribution change made by our training objective Eq (2). To this end, we visualize the reward distribution before and after the training the reward model by using GPT4-Turbo generated texts on Eassy domain. As shown in Figure 5, our training objective indeed increases the separation of the predicted reward distribution between human-written texts and LGTs. Interestingly, the LGT's reward distribution becomes more compact and equally higher, whereas the reward distribution of human-written texts becomes more dispersed. We conjecture that this difference arises because human-written texts are produced by diverse individuals with varying backgrounds and experiences, while aligned LLMs share somewhat similar training receipts across models.

### Additional Analysis

In this section, we provide more analysis of ReMoDetect. Here, we mainly consider baselines that show effectiveness in the main experiment (e.g., Fast-DetectGPT in Table 2) and consider the GPT4 family and Claude3 as aligned LLMs.

**Robustness to unseen distributions.** We verify the claim that training detectors on specific LGTs may introduce bias and require careful training by showing the failure cases of the prior work and the robustness of ReMoDetect to unseen distributions. To this end, we compare ReMoDetect with ChatGPT-Detector, which is trained on the same dataset (i.e., GPT3.5 Turbo generated texts on the HC3 domain) and evaluate on the unseen domain (i.e., WritingPrompts-small) and machine (i.e., Claude3 Opus). As shown in Table 5, both ReMoDetect and ChatGPT-Detector work well on the seen domain and LLM, while ReMoDetect shows significant robustness to unseen distributions compared to ChatGPT-Detector. For instance, the AUROC of ChatGPT-Detector in the seen domain dropped from 99.8%\(\)24.1% when tested on the unseen domain while ReMoDetect retains the original accuracy, i.e., 99.9%\(\)99.5%.

**Robustness against rephrasing attacks.** One possible challenging scenario is detecting the rephrased texts by another LM (known as rephrasing attacks) , i.e., first generate texts with powerful LLMs and later modify them with another LLM. To this end, we follow the prior work by using a T5-3B specifically trained for rephrasing attack . As shown in Table 4, ReMoDetect significantly and consistently outperforms all baselines. It is worth noting that our relative drop in performance is also significantly lower than other baselines, indicating strong robustness of ReMoDetect.

   Model & Accuracy & Loglik. & D-GPT & NPR & FD-GPT & **Ours** \\  GPT3.5 & Original & 93.6 & 86.1 & 82.9 & 96.1 & **98.7** \\ Turbo & Attacked & 80.5 (-14.0\%) & 60.3 (-30.0\%) & 73.5 (-11.3\%) & 87.2 (-9.3\%) & **91.4 (-7.4\%)** \\  GPT4 & Original & 91.7 & 79.9 & 79.4 & 95.2 & **98.9** \\ Turbo & Attacked & 80.0 (-12.7\%) & 50.3 (-37.0\%) & 61.3 (-22.8\%) & 87.3 (-8.3\%) & **94.6 (-4.4\%)** \\  Claude3 & Original & 91.7 & 81.1 & 80.3 & 92.6 & **98.6** \\ Opus & Attacked & 80.5 (-15.8\%) & 55.2 (-32.0\%) & 60.1 (-25.2\%) & 81.6 (-11.9\%) & **91.1 (-7.1\%)** \\   

Table 4: Robustness against rephrasing attacks. We report the average AUROC (%) before (‘Original’) and after (‘Attacked’) the rephrasing attack with T5-3B on the Fast-DetectGPT benchmark, including XSum, PubMed, and small-sized WritingPrompts. Values in the parenthesis indicate the relative performance drop after the rephrasing attack. The bold indicates the best result.

Figure 5: Predicted reward distribution of human written texts and LGTs (a) ‘Before’ and (b) ‘After’ training the reward model with Eq (2). ‘Machine’ denotes GPT4-Turbo generated texts on Eassy domain.

   Domain & HC3 (**S**) & HC3 (**S**) & WP-s (**U**) \\ Model & GPT3.5 (**S**) & Claude3 (**U**) & Claude3 (**U**) \\  ChatGPT-D & 99.8 & 96.7 & 24.1 \\ 
**Ours** & **99.9** & **99.9** & **99.5** \\   

Table 5: AUROC (%) of ChatGPT-D and ReMoDetect (ours), on datasets and models that are seen (**S**) or unseen (**U**) during training time. The bold denotes the best results.

**Robustness on input response length.** By following the prior work , we also measure the robustness of ReMoDetect on the input response length (i.e., # of words in \(y\)). Note that shorter responses are hard to detect as there is less evidence to identify the characteristics of humans and LLMs. As shown in Figure 6, ReMoDetect significantly outperforms the major baselines. Interestingly, our method can even outperform the best baseline with 71.4% fewer words, showing significant robustness on short input responses. For instance, Fast-DetectGPT reaches AUROC of 91.8% with 210 words, while ReMoDetect reaches 94.1% with 60 words under Claude3 Opus.

**ReMoDetect for non-RLHF aligned LLMs.** We additionally consider aligned LLMs that do not use reward models for alignment training, i.e., non-RLHF trained LLMs. To this end, we consider aligned LLMs that use Direct Preference Optimization (DPO) , an alternative alignment training to RLHF. Note that a recently released Phi-3  only uses DPO (followed by supervised fine-tuning; SFT) for alignment training and shows remarkable performance in various domains, thus being considered an aligned LLM in our experiment. As shown in Table 6, ReMoDetect also outperforms baselines in all cases, showing that our method can be applicable even if aligned LLMs are not trained with reward models. Furthermore, we also considered the detection scenario for the SFT-only model that does not use the alignment training. Here, we observe that ReMoDetect effectively detects the LGTs from the SFT-only model as well as outperforming other baselines. We believe this is because the SFT implicitly trains the model to reflect the human preference from the instruction tuning dataset , thus making the ReMoDetect well-detect the texts from SFT models.

   Model & Domain & Loglik. & Rank & FD-GPT & Open-D & Chat-D & **Ours** \\   & PubMed & 65.0 & 56.2 & 63.7 & 37.7 & 80.7 & **94.5** \\  & XSum & 70.3 & 64.1 & 91.0 & 82.7 & 23.4 & **97.6** \\  & WP-s & 82.4 & 73. & 96.7 & 60.0 & 31.1 & **99.3** \\   & PubMed & 57.2 & 50.4 & 59.9 & 31.9 & 82.7 & **91.7** \\  & XSum & 81.1 & 69.7 & 95.6 & 79.3 & 19.5 & **98.7** \\  & WP-s & 84.0 & 72.3 & 97.2 & 58.6 & 32.2 & **97.4** \\   & PubMed & 65.4 & 55.4 & 61.7 & 34.2 & 15.8 & **95.2** \\  & XSum & 64.5 & 61.2 & 85.4 & 75.0 & 18.1 & **98.0** \\  & WP-s & 83.1 & 73.6 & 95.7 & 53.9 & 38.5 & **98.8** \\   & PubMed & 88.4 & 60.5 & 92.8 & 62.0 & 23.6 & **94.1** \\  & XSum & 96.6 & 66.0 & **99.1** & 97.3 & 5.9 & 98.1 \\   & WP-s & 98.1 & 78.5 & 98.8 & 95.2 & 19.5 & **99.2** \\  Average & - & 86.0 & 63.8 & 91.2 & 72.2 & 43.8 & **95.3** \\   

Table 6: LGT Detection results on non-RLHF trained LLMs. We report AUROC (%) of multiple LGT detection methods, including log-likelihood (Loglik.), Rank, Fast-DetectGPT (FD-GPT), OpenAI-Detector (Open-D), ChatGPT-Detector (Chat-D), and ReMoDetect (Ours). We consider LGT detection benchmarks from Fast-DetectGPT: PubMed, XSum, and WritingPrompts-small (WP-s). Here, Phi-3 medium is DPO trained and OLMo-7B-SFT is SFT-only trained. The bold indicates the best result within the group.

Figure 6: Average AUROC (%) of various LGT detection methods on various input response lengths by monotonically increasing 30 words each. We consider three text domains from the Fast-DetectGPT benchmark and two aligned LLM, including (a) GPT4 Turbo and (b) Claude3 Opus.

**Component analysis.** We perform an analysis on each component of our method in detecting GPT4 generated texts: namely, the use of (i) continual fine-tuning with no replay \(=0\), (ii) the replay buffers, and (iii) the reward modeling with Human/LLM mixed texts, by comparing multiple detection performance metrics. Results in Table 7 show each component is indeed important, where gradually applying our techniques shows a stepwise significant improvement.

**Inference time efficiency.** In Table 8, we compared detection time, model parameter size, and average AUROC on the Fast-DetectGPT benchmark. The detection time was measured in an A6000 GPU, and the overall detection time was measured with 300 samples of the human/GPT3.5 Turbo XSum dataset. ReMoDetect shows the best average AUROC performance among the methods, but 7.2 times faster, and uses a 17.4 times smaller model than the second best model, Fast-DetectGPT.

## 5 Discussion and Conclusion

We propose ReMoDetect, a novel and effective LLM-generated text (LGT) detection framework. Based on the novel observation that the reward model well recognizes LGTs from human-written texts, we continually fine-tune the reward model to further separate reward scores of two distributions while preventing the overfitting bias using the replay technique. Furthermore, we suggest a Human/LLM mixed text dataset for reward modeling, learning a better decision boundary of the reward model detector. Experimental results further demonstrate that ReMoDetect significantly improves the prior state-of-the-art results in detecting aligned LGTs.

**Future works and limitations.** We believe it will be an interesting future direction to train LLMs using the reward model of ReMoDetect. Making the predictive reward distribution of LGTs more well-spread (like the human-written texts in Figure 5), can be a step toward making LLMs more human-like. Additionally, a potential limitation of ReMoDetect is the somewhat lack of accessibility of reward models. While there are some open-source reward models available (that we have used throughout the paper), their number is still limited compared to open-source LLMs. We believe that as the open-source community grows and more pre-trained reward models (or human preference datasets) become available, ReMoDetect will be improved further.

**Societal impact.** This paper presents ReMoDetect that improves the performance of detecting aligned LGTs. We expect that our approach will show numerous positive impacts by detecting LGTs, such as in fake news and academic plagiarism. One possible negative impact can be the improved adversarial mechanism followed by the improved detection method (i.e., ReMoDetect); thus, incorporating such a scenario will be an interesting future direction to explore, where we believe using ReMoDetect to such a scenario can be promising (as it shows robustness in multiple cases in Section 4.3).

   Continual Fine-tuning & with Replay & Mixed Text & AUROC & AUPR & TPR \\ (No Replay) & Buffers & Reward Modeling & & at FPR 1\% \\  - & - & - & 79.0 & 79.2 & 16.7 \\ ✓ & - & - & 90.5 & 91.0 & 38.9 \\ ✓ & ✓ & - & 95.5 & 95.8 & 59.3 \\ ✓ & ✓ & ✓ & **97.9** & **98.0** & **77.0** \\   

Table 7: Contribution of each proposed component of ReMoDetect on detecting aligned LGTs from human-written texts. We report the average detection performance of GPT4 under text domains in the Fast-DetectGPT benchmark. All values are percentages, and the best results are indicated in bold.

   Method & Detection Time (secs) & Model Parameters & AUROC \\  Log-likelihood & 11.7 & 2.7B & 88.6 \\ DetectGPT & 7738.8 & 3B \& 2.7B & 79.2 \\ NPR & 7837.3 & 3B \& 2.7B & 78.7 \\ Fast-DetectGPT & 62.7 & 6B \& 2.7B & 91.9 \\ Ours & **8.7** & **0.5B** & **95.8** \\   

Table 8: Comparison of detection time, model parameters, and average AUROC (%) of Fast-DetectGPT benchmark for various LGT detection methods. Detection time was measured in an A6000 GPU, and the overall detection time was measured for 300 XSum dataset samples.