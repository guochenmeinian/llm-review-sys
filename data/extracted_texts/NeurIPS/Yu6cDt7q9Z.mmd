# Schedule Your Edit: A Simple yet Effective Diffusion Noise Schedule for Image Editing

Haonan Lin\({}^{1}\) Yan Chen\({}^{1}\) Jiahao Wang\({}^{1}\) Wenbin An\({}^{3}\) Mengmeng Wang\({}^{2,5}\)

**Feng Tian\({}^{1}\) Yong Liu\({}^{4,5}\) Guang Dai\({}^{5}\) Jingdong Wang\({}^{6}\) Qianying Wang\({}^{7}\)**

\({}^{1}\) School of Comp. Science & Technology, MOEKLINNS Lab, Xi'an Jiaotong University

\({}^{2}\) College of Comp. Science & Technology, Zhejiang University of Technology

\({}^{3}\) School of Auto. Science & Engineering, MOEKLINNS Lab, Xi'an Jiaotong University

\({}^{4}\) Institute of Cyber-Systems and Control, Zhejiang University

\({}^{5}\) SGIT AI Lab, State Grid Corporation of China

\({}^{6}\) Baidu Inc \({}^{7}\) Lenovo Research

Corresponding Author.This work was completed during the internship at SGIT AI Lab, State Grid Corporation of China.

###### Abstract

Text-guided diffusion models have significantly advanced image editing, enabling high-quality and diverse modifications driven by text prompts. However, effective editing requires inverting the source image into a latent space, a process often hindered by prediction errors inherent in DDIM inversion. These errors accumulate during the diffusion process, resulting in inferior content preservation and edit fidelity, especially with conditional inputs. We address these challenges by investigating the primary contributors to error accumulation in DDIM inversion and identify the singularity problem in traditional noise schedules as a key issue. To resolve this, we introduce the _Logistic Schedule_, a novel noise schedule designed to eliminate singularities, improve inversion stability, and provide a better noise space for image editing. This schedule reduces noise prediction errors, enabling more faithful editing that preserves the original content of the source image. Our approach requires no additional retraining and is compatible with various existing editing methods. Experiments across eight editing tasks demonstrate the _Logistic Schedule_'s superior performance in content preservation and edit fidelity compared to traditional noise schedules, highlighting its adaptability and effectiveness. (Project page: https://lonelvino.github.io/SYE/)

## 1 Introduction

Text-guided diffusion models have emerged as a leading technique in image generation, offering remarkable visual quality and diversity . The noise latent space of these models can be leveraged to retain and modify images , enabling text-guided editing where a source image is adjusted based on a target prompt. This requires first inverting the source image into a latent variable (_e.g._, via DDIM inversion), due to the absence of its predefined latent space .

While DDIM inversion proves effective for unconditional diffusion models , it results in inferior content preservation and suboptimal edit fidelity when applied to conditional inputs . This phenomenon is particularly evident in image editing, which requires incorporating new conditionals into the generation process . DDIM converts the DDPM into adeterministic process by approximating the Markov process as a non-Markov process based on a local linearization assumption . This approximation introduces noise prediction errors that accumulate throughout the diffusion process, leading to deviations in the inverted latent representation from its original distribution, as illustrated in Fig. 2 left. Recently, inversion-based editing methods have emerged as a promising paradigm to address these issues by aligning the reconstruction path more closely with the DDIM inversion trajectory, thereby ensuring the preservation of the original content in the edited images . However, these methods still heavily rely on the accuracy of the DDIM inversion. This leads us to a fundamental question: **What if we correct the DDIM inversion errors to naturally reduce the loss of original content in the edited images?**

Unlike previous inversion-based editing methods that focus on minimizing the distance between \(_{}^{}\) and \(_{}^{*}\) (Fig. 2 left), we investigate the primary reason for error accumulation in DDIM inversion. Based on the fact that DDIM samplers can be derived by deterministic ODE processes , our analysis reveals that these traditional noise schedule designs result in a singularity problem (Fig. 2 right) when treating the DDIM inversion process as solving a differentiable ODE. This results in unreliable noise predictions from the start, and as errors accumulate, the editing results degrade (Fig. 1). This insight motivates us to address the problem at its source: the noise schedule itself. To our knowledge, this is the first work focusing on designing noise schedules specifically for image editing, providing an optimized solution without requiring complete model retraining .

We present a simple yet effective noise schedule, _Logistic Schedule_, designed to resolve the singularity problem of previous noise schedules and enhance inverted latents for image editing. The key ideas behind _Logistic Schedule_ are twofold: (1) creating a well-defined noise schedule to improve inversion stability, and (2) providing a better noise space that enables editing faithful to the source image. Specifically, _Logistic Schedule_ eliminates singularities at the beginning of the inversion process, thereby reducing noise prediction errors in the inverted latents. It enables more stable data perturbation to preserve the original content of the source image in the edited image. Importantly, this design is effective and compatible with other editing methods without requiring additional retraining.

Figure 1: Compared to linear noise schedule, _Logistic Schedule_ demonstrates high fidelity in attributes content editing (a, b) with EF-DDPM , preserves the high-level semantics of the source image while performing object translation (c) with pix2pix-zero  and style/scene transferring (d, e) with StyleDiffusion , and successfully conducts non-rigid alteration (f) via MasaCtrl . Text prompts corresponding to each input image are presented beneath each sample, with words introduced for image editing distinctly highlighted in red.

We conducted experiments across eight distinct editing tasks using approximately 1600 images from diverse scenes. Fig. 1 illustrates that our _Logistic Schedule_ effectively enhances editing results in terms of essential content preservation and edit fidelity compared to commonly used noise schedules like the linear schedule. Moreover, our schedule can be seamlessly integrated with various existing diffusion-based editing techniques, demonstrating its versatility and effectiveness. Our main contributions are summarized as follows: (1) **Theoretical Analysis**: We analyze the failure of DDIM inversion in real-image editing step by step, identifying the singularity in the noise schedule as the key issue to address. (2) **Methodology**: We introduce _Logistic Schedule_, a novel diffusion noise schedule specifically tailored for real-image editing, which effectively reduces prediction errors during inversion. (3) **Superiority**: We showcase _Logistic Schedule_'s adaptability by integrating it with various editing methods and demonstrate its consistent superior performance across different editing tasks.

## 2 Background

This section will introduce diffusion models and their noise schedules, along with DDIM inversion, which are crucial for text-guided editing of real images.

**Diffusion Models.** Denoising Diffusion Probabilistic Models (DDPM)  are designed to transform a random noise vector \(_{T}\) into a series of intermediate samples \(_{t}\), and eventually a final image \(_{0}\) by progressively adding Gaussian noise \((0,)\) according to a noise schedule \(_{1},,_{T}\):

\[_{t}=}_{t-1}+}_{t -1},\]

where \(t[1,T]\) and \(T\) denotes the number of timesteps. The noise schedule determines the distribution of noise scales and is designed to ensure that the noise scale at each step is proportional to the remaining signal, which is usually fixed without additional learning. According to the properties of conditional Gaussian distributions, \(_{t}\) can be derived from a real image \(_{0}\) in the following closed form by reparameterizing \(_{t}=1-_{t},}=_{i=1}^{t}_{i}\):

\[_{t}=_{t}}_{0}+_{t}}.\] (1)

Another commonly used sampling method is Denoising Diffusion Implicit Models (DDIM) , which formulate a denoising process to generate \(_{t-1}\) from a sample \(_{t}\) via:

\[_{t-1}=}_{t}- }_{}^{(t)}(_{t})}{}})}_{_{0}}+- _{t}^{2}}_{}^{(t)}(_{t})}_{ _{t}}+_{t}}_{ },\] (2)

Figure 2: **Illustration of the DDIM inversion in image editing and its challenges. Left: starting from the source image \(_{0}\), the ideal latent \(_{t}\) is approximated by the inverted latent \(_{t}^{*}\) using DDIM inversion. The perturbed noisy latent \(_{T}^{*}\) is then sampled in two branches—one for the source condition and one for the target condition—yielding the reconstructed and edited images respectively. Right: the numerical computations of \(_{t}/t\) for scaled linear and cosine noise schedules, highlighting the singularity at \(t=0\) that leads to potential inaccuracies in noise prediction during inversion.**

where \(_{t}(0,)\), \(_{t}\) is the variance schedule, and \(_{}\) is a network trained to predict the noise added. When \(_{t}=}{1-_{t}}}}{ _{t-1}}}\) for all \(t\), the forward process becomes Markovian, and the generation process becomes a DDPM. And in a special case when \(_{t}=0\) for all \(t\), the forward process become deterministic given \(_{t-1}\) and \(_{0}\), except for \(t=1\), and the generate process becomes a DDIM.

Inversion in Image Editing.Although text-to-image diffusion models [50; 52; 19] have advanced feature spaces that support various downstream tasks [67; 37; 36], applying them to real images (non-generated images) is challenging because these images lack a natural diffusion feature space. Editing a real image first requires obtaining the latent variables \(_{T}\) from the original image \(_{0}\) and then performing the generation process under new conditions. To bridge this gap, DDIM inversion  is predominantly used due to its deterministic process, which can be represented by reversing the generation process in Eq. 2 with \(_{t}=0\):

\[_{t}^{*}=}}{}}_{t -1}^{*}+}(}-1}-}-1})_{}(_{t-1}^{*},t-1).\]

However, existing editing methods that rely on vanilla DDIM inversion struggle to achieve both content preservation and edit fidelity when applied to real images [1; 4; 16]. Recently, inversion-based editing methods have improved the edited results by maintaining two simultaneous procedures: reconstruction and editing, as shown in Fig. 2 left. These methods align the reconstruction path (\(\) ) more closely with the DDIM inversion trajectory (\(^{*}\)), ensuring better preservation of the original content in the edited image [41; 15; 44; 25; 10]. Despite their effectiveness, these methods still heavily rely on the accuracy of the inverted latents obtained from DDIM inversion. In contrast, we start from a different perspective, focusing on improving the DDIM inversion accuracy to naturally enhance the edited results. In the following section, we begin with the transition from DDPM to DDIM, emphasizing the need for a better noise schedule for the inversion process.

## 3 On the Failure of DDIM Inversion

### Warmup: Error Accumulation of DDIM

DDIM inversion for real images is unstable due to its reliance on a local linearization assumption at each step, leading to error accumulation and content loss from the original image. Specifically, DDIM assumes that the denoising process in Eq. 2 is roughly invertible, meaning \(_{t}^{*}\) can be approximately recovered from \(_{t-1}^{*}\) via:

\[_{t}^{*}=_{t-1}^{*}-b_{t}(_{t}^{* },t)}{a_{t}}_{t-1}^{*}-b_{t}(_{t-1}^ {*},t)}{a_{t}},\] (3)

where \(a_{t}=/_{t}}\) and \(b_{t}=-(1-_{t})/_{t}}+}\). This approximation assumes \((_{t}^{*},t)(_{t-1}^{*},t)\), and the inversion's accuracy depends on this assumption. However, ensuring accurate inversion under this assumption requires a sufficient number of discretization steps, which increases time costs and is impractical for many applications. With fewer timesteps or higher noise levels, error accumulation becomes more pronounced, resulting in distorted reconstructions, as shown in Fig. 2 left. This occurs because once we deviate from the linearization assumption, the interpolation operation in Eq. 3 fails. The primary issue arises when estimating the "predicted \(_{0}\)" in Eq. 2 at the initial step (\(t=1\), indicated by the red arrow in Fig. 2 left), where a simple expression for the posterior mean conditioned on \(_{t}\) no longer exists . Moreover, this problem is exacerbated in image editing, where the denoising process must incorporate new conditions into the image content. This increases the difficulty of noise predictions, leading to more severe artifacts and distortions.

### The Devil Is in the Singularities

To get around this issue, our first insight is to reduce the prediction error at the beginning of the forward (inversion) process. But before we can figure out how to fix the error, we need to pinpoint the problem. We first provide the continuous generalization of DDPM, since sampling from diffusion models can be viewed alternatively as solving the corresponding ODE process [57; 38]:

\[=[(,t)-g(t)^{2} _{} p_{t}()]t,\] (4)where \((,t)\) is a vector-valued function called the _drift_ coefficient of \((t)\), and \(g()\) is a scalar function known as the _diffusion_ coefficient of \((t)\). And the ODE form of DDIM is equivalent to a special case of Eq. 4, as long as \(_{t}\) and \(_{t- t}\) are close enough (refer to details in _Appendix_ A).

By treating the DDIM inversion process as solving a differentiable ODE, we emphasize that precise and stable computation of \(_{t}/t\) at each timestep \(t\) is crucial for accurate noise prediction, especially at the start of the inversion process. Fig. 2 right highlights the pitfalls of widely-used scaled linear  and cosine  noise schedules through numerical computations of \(_{t}/t\).

**Proposition 3.1** (Singularity in Inversion Process).: _During the inversion process, there exists a singularity at \(t=0\) for both the scaled linear and cosine schedule (Fig. 2 right):_

\[t=0,._{t}}{t}|_{t  0}=()=( ).\]

_This singularity significantly affects the starting point of the inversion process during image editing tasks. Properly modeling \(_{t}/t\) ensures that the inversion closely aligns with the true continuous dynamics of the diffusion process, thereby reducing errors and enhancing the fidelity of the inverted latents, which is critical for high-quality image editing. The proof can be found in Appendix B._

We argue that singularities in modeling \(_{t}/t\) cause significant issues in inversion-based text-guided image editing. Specifically, **(1) the instability in the inversion process** arises from the singularity of the derivatives at \(t=0\), leading to inaccurate noise component estimates, making the starting point inconsistent with the data's true characteristics. The fast sampling in DDIM exacerbates error accumulation, where minor initial errors lead to substantial deviations in the final inverted latents. As a result, reconstructed or edited images may display visual inconsistencies, distorted details, or unnatural artifacts, reducing the overall quality and fidelity. Furthermore, the singularity can also lead to **(2) poor handling of complex data distributions** in the real world. Discontinuities in derivatives result in the model receiving inconsistent and unreliable signals during the diffusion probabilistic modeling. This hinders the model's ability to capture intricate patterns and details, disrupting the consistency and integrity within an image .

## 4 Better Noise Schedule Helps Inversion and Editing

### Well-Defined Schedule Improve Inversion Stability

To address the issues highlighted in _Proposition 3.1_, we propose a new noise schedule in terms of \(_{t}\), since \(_{t}\) represents the remaining signals in the latents during the diffusion process (Eq. 1). Following the recommendations from iDDPM , the noise schedule should ensure that noise is added more slowly at the beginning to preserve image information in the middle of the diffusion process. We introduce our logistic noise schedule as follows:

\[_{t}=)}},\] (5)

where \(k\) and \(t\) are hyperparameters that control the steepness and midpoint of the logistic function, respectively. In our experiments, we set \(k=0.015\) and \(t_{0}=(0.6T)\), as discussed in Section 5.3.1.

Figure 3: Left: trends of \(}\) (noise scales) for scaled linear, cosine, and logistic noise schedules. Right: \(_{t}/t\) for the logistic schedule, highlighting its smooth transition, which prevents singularities and maintains the integrity of the initial latent vector \(_{0}\).

Our logistic schedule is designed to have a linear drop-off of \(_{t}\) in the middle of the diffusion process, with minimal changes near the extremes of \(t=0\) and \(t=T\), thus preventing abrupt changes in the noise level. Fig. 3 left demonstrates the progression of \(}\) for different schedules, in which linear and cosine schedules tend to add noise too quickly during the early stage of the inversion process. Crucially, our logistic noise schedule avoid the singularity of \(_{t}/t\) at \(t=0\). For simplicity in expression, we set \(k=0.015\) and \(t_{0}=30\), resulting in the following:

\[t=0,._{t}}{t}|_{t  0}=1.486e^{-3}-1.318e^{-3}_{0}\]

The proof is provided in _Appendix_ B, and the trend of the derivatives of our logistic schedule is illustrated in Fig. 5 right. By ensuring a smooth and continuous transition in noise levels, the logistic schedule maintains the integrity of the initial latent vector \(_{0}\). This alignment with the diffusion process's continuous dynamics prevents undesired deviations, reduces errors, and leads to more accurate and stable latent predictions, improving the inversion process's fidelity.

### Exploring Noise Space of Logistic Schedule

We now explore the properties of our logistic noise schedule and its influence on the noise space, specifically comparing the logSNR trends and inversion processes of different noise schedules.

**Steady Information Perturbation.** As depicted in Fig. 4 (left), the linear and cosine schedules tend to drastically degrade image information at the initial stage of inversion, as evidenced by the rapid drop in logSNR. In contrast, our logistic schedule exhibits a more linear decrease in logSNR before the final stage, ensuring steady data perturbation. This steadiness allows the logistic schedule to capture a richer set of features and nuances from the original image, facilitating more detailed reproduction and higher fidelity in the edited images.

**Comprehensive Pattern Capture.** As shown in Fig. 4 (right), we visualize the latents during the inversion (forward) process, using 50 timesteps with the final step at 981 instead of 999. In the early stage, our _Logistic Schedule_ preserves more original image information, reflecting the logSNR trend. Considering the later stage, linear and cosine schedules retain more low-frequency components due to higher endpoint SNRs, explaining why their noise maps don't fully cover the image. In contrast, our _Logistic Schedule_ ensures that the inverted latent closely resembles pure Gaussian noise, minimizing the retention of low-frequency components. This thorough process ensures that the inversion encodes a broader array of the original image's information, thereby enhancing the quality and fidelity of the edited images.

## 5 Experiments

In the section below, we evaluate our method both quantitatively and qualitatively on text-guided editing of real images. To validate the versatility and effectiveness of our proposed _Logistic Schedule_, we compare it with linear and concise schedules by employing different editing approaches across various editing tasks. Refer to _Appendix_ E for detailed experimental results.

Figure 4: **Analysis of noise space for different schedules**. Left: logSNR trends, where the logistic schedule maintains a more gradual decline. Right: inversion processes, with the logistic schedule preserving more details in the initial stage and minimizing low-frequency retention in the final stage.

### Experimental Settings

**Implementation Details.** We perform the inference of different editing and inversion methods under consistent conditions. We use Stable Diffusion v1.5 as the base model, with 100 timesteps, an inversion guidance scale of 3.5, and a reverse guidance scale of 7.5. All experiments are conducted on a single Nvidia A100 GPU. Quantitative results are averaged over 10 random runs. Additional implementation details are provided in _Appendix_ D.2.

**Datasets.** Experiments are conducted on the PIEBench dataset . Recognizing the dataset's limited size and scenarios, we extend it by incorporating face images from FFHQ  and AFHQ , as well as indoor/outdoor common objects from MS-COCO . This results in approximately 1600 images in total, across eight editing types (see _Appendix_ D.1).

**Evaluation Metrics.** As the editing process involves altering both the foreground and background of the images, we follow Ju et al. in adopting three types of metrics: structure (DINO-I ),

Figure 5: **Qualitative comparison of the _Logistic Schedule_ with linear and cosine schedules across various image editing tasks. To preserve background content during 1� attribute editing tasks (_e.g._, colors, and materials), we employ _Edit Friendly DDPM_; for tasks requiring background preservation such as 2� object translation, we use _Zero-shot Pix2Pix_; for tasks involving 3 scene or style transfer, while maintaining object semantics, we utilize _StyleDiffusion_; to validate spatial context preservation in 4 non-rigid editing tasks (_e.g._, motion, pose), we consider _MasaCtrl_.**background preservation (PSNR, LPIPS , MSE, SSIM ), and image-image, text-image consistency (CLIP score ). Detailed descriptions of each metric can be found in _Appendix_D.3.

### Qualitative and Quantitative Comparison

**Qualitative Comparison.** As shown in Fig. 5, our _Logistic Schedule_ demonstrates superior content preservation in each task. In tasks requiring fine-grained editing, such as attributes editing, the _Logistic Schedule_ better preserves other attributes while making the desired changes. For tasks involving high-level semantics, such as object translation and style/scene transfer, the _Logistic Schedule_ maintains the overall structure and pose more effectively. In tasks that involve low-level semantics like color and texture, such as pose and attributes editing, the _Logistic Schedule_ shows better fidelity and consistency. For tasks that require background preservation, such as object translation and pose editing, the _Logistic Schedule_ excels in maintaining the background integrity. Overall, the _Logistic Schedule_ ensures higher edit fidelity across various tasks, whereas the linear and cosine schedules sometimes fail to maintain the desired quality and consistency.

**Quantitative Comparison.** Table 1 shows that when employing the _Logistic Schedule_, all editing tasks exhibit improved retention of background and overall structure. While in some situations, the _Logistic Schedule_ achieves slightly lower text alignment than the linear schedule, its preservation of background and structure is significantly superior.

### Ablation Studies

In this section, we investigate the effects of different configurations of the Logistic Schedule and the adaptability of the Logistic Schedule with various inversion techniques and diffusion models. More experiments on hyperparameters (_e.g._, guidance scale, input scale) can be found in _Appendix_E. The comparison with more design of the noise scheduler is provided in _Appendix_E.4.

#### 5.3.1 Effects of Configuration of Logistic Schedule

We conduct experiments with different configurations of the Logistic Schedule in Eq. 5, providing further evidence for the noise space analysis (Section 4.2). The parameters of the Logistic Schedule (Eq. 5)--specifically the steepness (\(k\)) and the midpoint (\(t_{0}\))--play a crucial role in balancing content preservation and edit fidelity. Table 2 provides the quantitative results of varying \(k\) and \(t_{0}\).

    &  &  &  \\  & _{ 10^{-3}}\)**} &  & _{ 10^{-3}}\)**} & _{ 10^{-4}}\)**} & _{ 10^{-2}}\)**} &  &  \\   \\  Linear & 35.66 & 20.70 & 134.88 & 113.61 & 77.60 & 79.82 & 23.06 \\ Cosine & 26.57 & 22.38 & 110.52 & 80.01 & 80.15 & 81.35 & 22.39 \\
**Logistic** & **17.37 \({}_{}\)** & **24.78 \({}_{}\)** & **81.80 \({}_{}\)** & **49.47 \({}_{}\)** & **82.97 \({}_{}\)** & **82.44 \({}_{}\)** & **23.62 \({}_{}\)**\(\)** \\   \\  Linear & 39.02 & 19.93 & 134.64 & 138.99 & 74.63 & 83.33 & 22.30 \\ Cosine & 30.83 & 21.15 & 113.03 & 107.46 & 77.23 & 84.32 & 22.46 \\
**Logistic** & **22.4 \({}_{}\)** & **22.91 \({}_{}\)** & **90.75 \({}_{}\)** & **82.05 \({}_{}\)** & **79.32 \({}_{}\)** & **84.52 \({}_{}\)** & **22.65 \({}_{}\)**\(\)** \\   \\  Linear & 38.06 & 21.17 & 93.70 & 111.01 & 81.85 & 77.65 & **25.39** \\ Cosine & 28.44 & 22.70 & 75.75 & 78.93 & 83.74 & 79.23 & 23.92 \\
**Logistic** & **18.64 \({}_{}\)** & **24.81 \({}_{}\)** & **56.79 \({}_{}\)** & **48.96 \({}_{}\)** & **85.84 \({}_{}\)** & **80.81 \({}_{}\)** & 24.77 \({}_{}\)**\(\)** \\   \\  Linear & 30.83 & 21.15 & 113.03 & 107.46 & 77.23 & 83.13 & **22.65** \\ Cosine & 22.40 & 22.91 & 90.75 & 82.05 & 79.32 & 83.33 & 21.81 \\
**Logistic** & **15.87 \({}_{}\)** & **24.66 \({}_{}\)** & **75.18 \({}_{}\)** & **59.22 \({}_{}\)** & **81.11 \({}_{}\)** & **84.32 \({}_{}\)** & 22.30 \({}_{}\)**\(\)** \\   

Table 1: Comparative table of diffusion noise schedules and their performance metrics. Bold values indicate the best results, while underlined values denote the second-best results.

**Different \(k\): Changing the steepness of logSNR.** When \(k\) is larger, the logSNR values span a larger range (Fig.6, left). However, if the range is too large, excessive steepness of logSNR results in excessive loss of original image information in edited images (Fig.6, right). Interestingly, when \(k\) is small, the logSNR resembles that of linear and cosine schedules, but the logistic schedule better preserves the original image content without altering the overall structure. This further supports Proposition 3.1 that the singularity in linear and cosine schedules tends to destroy original image information, causing undesired changes.

**Different \(t_{0}\): Introducing shifts in logSNR.** When \(t_{0}\) is close to 0, the lower bound of logSNR is higher, affecting editability by reducing diversity and fidelity, as shown in Fig. 7. Conversely, when \(t_{0}\) is close to \(T\), the original information is lost too quickly, degrading content preservation.

Balancing these parameters, we find that \(k=0.015\) and \(t_{0}=(0.6T)\) strike the optimal trade-off between content preservation and edit fidelity, providing robust performance across various tasks.

    &  **Structure** \\ **Dist \( 10^{-3}\)** \\  } &  &  \\  & & **PSNR \(\)** & **LPIPS \( 10^{-3}\)** & **MSE \( 10^{-4}\)** & **SSIM \( 10^{-2}\)** & **Visual \(\)** & **Textual \(\)** \\  \(k=0.015\) &  &  &  &  &  &  &  \\ \(t_{0}=(0.6T)\) & & & & & & & \\  \(k=0.008\) & 16.27 & **26.45** & **75.62** & **43.20** & **85.28** & **84.07** & 20.47 \\ \(k=0.011\) & 16.64 & 25.80 & 77.90 & 48.83 & 84.15 & 83.76 & 21.46 \\ \(k=0.017\) & 22.79 & 22.33 & 99.98 & 57.32 & 81.52 & 82.10 & 23.25 \\ \(k=0.029\) & 27.82 & 21.05 & 103.45 & 64.36 & 78.48 & 80.66 & 23.81 \\ \(t_{0}=(0.4T)\) & 24.31 & 22.41 & 97.21 & 60.84 & 79.72 & 79.47 & 20.33 \\ \(t_{0}=(0.8T)\) & 29.47 & 21.64 & 95.58 & 63.89 & 75.14 & 77.05 & 22.68 \\   

Table 2: Quantitative results of the Logistic Schedule across various hyperparameter settings. The best method is indicated in bold, and the worst method is shown in purple.

Figure 6: **Impact of \(k\) on the logistic schedule**. Left: change in \(_{t}\) and logSNR with different \(k\) values. Right: the effect of \(k\) on edited images.

Figure 7: **Impact of \(t_{0}\) on the logistic schedule**. Left: change in \(_{t}\) and logSNR with different \(t_{0}\) values. Right: each column represents edited results within three random seeds, under a specific \(t_{0}\).

#### 5.3.2 Adapting Inversion Techniques and Diffusion Models

To validate the adaptability and robustness of the _Logistic Schedule_, we first apply it with Plug-and-Play  using Stable Diffusion v1.5  as the baseline. We then design experiments with two other diffusion models, Stable Diffusion v2.1 and Stable Diffusion XL , and incorporate three advanced inversion approaches: Null-Text Inversion , Negative Prompt Inversion (NPI) , and Direct Inversion . As shown in Table 3, while more advanced stable diffusion models increase textual similarity, they degrade content preservation. Conversely, incorporating advanced inversion approaches improves both content preservation and edit fidelity.

Furthermore, Table 4 presents the detailed comparison between the _Logistic Schedule_ and the scaled linear schedule across different inversion techniques.

## 6 Conclusion

This paper presents the _Logistic Schedule_, a novel noise schedule that eliminates singularities and improves inversion stability for image editing. Our method enhances content preservation and edit fidelity without requiring additional retraining, making it a plug-and-play solution for existing workflows. Through in-depth analysis of the diffusion inversion process, we identify that current schedulers suffer from singularity issues at the start of inversion. The proposed Logistic Schedule provides a straightforward solution to this problem, offering superior performance and adaptability across various image editing tasks.

## 7 Acknowledgement

This work was supported by National Natural Science Foundation of China (62403429, 62293551, 62377038, 62177038, 62277042). Project of China Knowledge Centre for Engineering Science and Technology, Project of Chinese academy of engineering "The Online and Offline Mixed Educational Service System for "The Belt and Road' Training in MOOC China". "LENOVO-XJTU" Intelligent Industry Joint Laboratory Project.

    & **Structure** &  &  \\  & **Dist \(\)** & **PSNR \(\)** & **LPIPS \(\)** & **MSE \(\)** & **SSIM \(\)** & **Visual \(\)** & **Textual \(\)** \\  Null-Text + Linear & 21.00 & 23.00 & 95.00 & 63.00 & 81.50 & 81.00 & 21.30 \\ Null-Text + Logistic & 18.67 & 23.80 & 89.64 & 57.97 & 82.97 & 82.46 & 21.95 \\  NPI + Linear & 28.00 & 22.40 & 105.00 & 78.00 & 78.50 & 78.50 & 20.90 \\ NPI + Logistic & 24.82 & 23.17 & 99.19 & 71.24 & 80.26 & 80.16 & 21.53 \\  Direct + Linear & 19.00 & 24.90 & 78.00 & 45.00 & 83.50 & 82.90 & 21.90 \\ Direct + Logistic & 16.06 & 25.73 & 74.17 & 41.19 & 85.61 & 83.29 & 22.03 \\   

Table 4: Comparison of inversion techniques with the scaled linear schedule and our proposed Logistic Schedule.

    & **Structure** &  &  \\  & **Dist \(_{10^{-3}}\)** & **PSNR \(\)** & **LPIPS \(_{10^{-3}}\)** & **MSE \(_{10^{-4}}\)** & **SSIM \(_{10^{-2}}\)** & **Visual \(\)** & **Textual \(\)** \\ 
**PnP+SD-1.5** & 26.66 & 22.46 & 111.27 & 77.74 & 80.02 & 81.24 & 21.74 \\   \\ 
**SD-2.1** & 34.74 \({}_{30.3\%}\)\(\) & 19.94 \({}_{11.2\%}\)\(\) & 152.25 \({}_{36.8\%}\)\(\) & 122.86 \({}_{58.0\%}\)\(\) & 74.41 \({}_{7.0\%}\)\(\) & 79.38 \({}_{1.5\%}\)\(\) & 22.87 \({}_{5.2\%}\) \\
**SDXL** & 28.33 \({}_{6.3\%}\)\(\) & 21.57 \({}_{4.0\%}\)\(\) & 122.14 \({}_{9.8\%}\)\(\) & 89.02 \({}_{14.5\%}\)\(\) & 77.25 \({}_{3.5\%}\)\(\) & 77.52 \({}_{2.9\%}\)\(\) & **23.59** \({}_{8.5\%}\)\(\) \\    \\ 
**+ Null-Text** & 18.67 \({}_{30.0\%}\)\(\) & 23.80 \({}_{6.0\%}\)\(\) & 89.64 \({}_{19.4\%}\)\(\) & 57.97 \({}_{25.4\%}\)\(\) & 82.97 \({}_{3.7\%}\)\(\) & 82.46 \({}_{1.0\%}\)\(\) & 21.95 \({}_{1.0\%}\)\(\) \\
**+ NPI** & 24.82 \({}_{6.9\%}\)\(\) & 23.17 \({}_{3.2\%}\)\(\) & 99.19 \({}_{10.9\%}\)\(\) & 71.24 \({}_{8.4\%}\)\(\) & 80.26 \({}_{0.3\%}\)\(\) & 80.16 \({}_{0.9\%}\)\(\) & 21.53 \({}_{1.0\%}\)\(\) \\
**+ Direct** & **16.06** \({}_{39.8\%}\)\(\) & **25.73** & 14.6\% & **74.17** & 33.3\% & **41.19** \({}_{47.0\%}\)\(\) & **85.61** \({}_{7.0\%}\)\(\) & **83.29** \({}_{1.6\%}\)\(\) & 22.03 \({}_{1.3\%}\)\(\) \\   

Table 3: Comparative performance metrics with different base models and inversion techniques.