# Relational Verification Leaps Forward with RABBit

Tarun Suresh\({}^{1}\)1 Debangshu Banerjee\({}^{1}\)1 Gagandeep Singh\({}^{1,2}\)

\({}^{1}\)University of Illinois Urbana-Champaign, \({}^{2}\)VMware Research

{tsuresh3, db21, ggnds}@illinois.edu

Equal contribution. Primary Correspondence: tsuresh3@illinois.edu

###### Abstract

We propose RABBit, a Branch-and-Bound-based verifier for verifying relational properties defined over Deep Neural Networks, such as robustness against universal adversarial perturbations (UAP). Existing SOTA complete \(L_{}\)-robustness verifiers can not reason about dependencies between multiple executions and, as a result, are imprecise for relational verification. In contrast, existing SOTA relational verifiers only apply a single bounding step and do not utilize any branching strategies to refine the obtained bounds, thus producing imprecise results. We develop the first scalable Branch-and-Bound-based relational verifier, RABBit, which efficiently combines branching over multiple executions with cross-executional bound refinement to utilize relational constraints, gaining substantial precision over SOTA baselines on a wide range of datasets and networks. Code is at this URL.

## 1 Introduction

Deep neural networks (DNNs) are now widely used in safety-critical fields like autonomous driving and medical diagnosis , where their decisions can have serious consequences. However, understanding and ensuring their reliability is difficult due to their complex and opaque nature. Despite efforts to find and address vulnerabilities, such as adversarial attacks  and adversarial training techniques , ensuring safety remains a challenge. As a result, extensive research is focused on formally verifying the safety of DNNs. However, most of the existing \(L_{}\) robustness verification techniques can not handle relational properties common in practical situations. While significant efforts have been invested in verifying the absence of input-specific adversarial examples within the local neighborhood of test inputs, recent studies  emphasize that input-specific attacks are impractical regardless. Conversely, practical attack scenarios  involve the creation of universal adversarial perturbations (UAPs) , which are crafted to impact a substantial portion of inputs from the training distribution. RaVeN  and subsequently RACoon  showed that since the same adversarial perturbation is applied to multiple inputs, the executions on different perturbed inputs are related, exploiting the relationship between different executions significantly improves the precision of the verifier. Despite RaVeN and RACoon's ability to leverage cross-executional dependencies, both of them remain imprecise as they only apply a single bounding step and lack refinement using branching strategies used in SOTA complete non-relational verifiers.

**Key challenges:** For precise relational verification, we need efficient algorithms that can effectively combine branching strategies over multiple executions with bounding techniques that can leverage cross-executional dependencies. Theoretically, MILP (Mixed Integer Linear Programming) can exactly encode DNN executions with piecewise linear activation functions like ReLU over any input regions specified by linear inequalities. However, the associated MILP optimization problem is computationally expensive. For instance, encoding \(k\) executions of a DNN with \(n_{r}\) ReLU activationsintroduces \(O(n_{r} k)\) integer variables in the worst case. As the cost of MILP optimization grows exponentially with the number of integer variables, even SOTA off-the-shelf solvers like Gurobi (Gurobi Optimization, LLC, 2018) struggle to verify small DNNs for a relational property over \(k\) executions within a reasonable time limit. For scalability, SOTA non-relational verifiers like \(,\)-CROWN (Wang et al., 2021) design custom "Branch and Bound" (BaB) solvers using more scalable differentiable optimization techniques such as gradient descent. However, these verifiers ignore dependencies between multiple executions, resulting in imprecise relational verification. Conversely, the SOTA relational verifier RACoon uses parametric linear relaxation for each activation to avoid integer variables and employs gradient descent to learn parameters that leverage cross-executional dependencies for verification. This method, however, introduces imprecision due to the replacement of non-linear activations with parametric linear approximations. Therefore, precise relational verification requires scalable algorithms that can: a) scale to the large DNNs used in this paper, b) effectively reduce imprecision from parametric linear relaxations, and c) utilize cross-executional dependencies.

**Our contributions:** We advance the state-of-the-art in relational DNN verification by:

* Efficiently combining branching strategies over multiple DNN executions with a cross-executional bounding method that utilizes dependencies between DNN's outputs from different executions while reducing imprecision resulting from parametric linear relaxations.
* **a) strong bounding:** applies cross-execution bounding at each step, branching over all executions. This method provides tighter bounds than RACoon (cross-executional bound refinement without branching) and \(,\)-CROWN (branching without cross-executional bound refinement), **b) strong branching:** applies cross-execution bounding only at the start to derive fixed linear approximations for each execution. These approximations are then used to branch independently over each execution, exploring more branches per execution.
* Combining strong bounding and branching results into an efficiently optimizable MILP instance that leverages the benefits of both techniques, outperforming each individually.
* Performing extensive experiments on popular datasets and various DNNs (standard and robustly trained) to showcase the precision improvement over the current SOTA baselines.

## 2 Related Works

**Non-relational DNN verifiers:** Given a logical input specification \(\) and an output specification \(\), DNN verifiers formally prove that for all inputs \(\) satisfying \(\), the output \(N()\) of the DNN satisfies \(\). If the verification process fails, the verifier generates a counter-example where the output specification \(\) does not hold. DNN verifiers are broadly divided into three main types based on their ability to prove properties: - (i) sound but incomplete verifiers which may not always prove property even if it holds (Gehr et al., 2018; Singh et al., 2018, 2019, 2019, 2020, 2021), (ii) complete verifiers that can always prove the property if it holds (Wang et al., 2018; Gehr et al., 2018; Bunel et al., 2020, 2020, 2020, 2021, 2022, 2021, 2022, 2021, 2022, 2021, 2022, 2022] and (iii) verifiers with probabilistic guarantees (Cohen et al., 2019; Li et al., 2022). Beyond the commonly studied \(L_{}\) robustness verification problem, several works adapt DNN verification techniques for specific applications, such as robustness against image rotation (Singh et al., 2019, 2019), incremental verification (Ugare et al., 2023, 2024), interpretability (Banerjee et al., 2024), and certifiable training (Mueller et al., 2023; Palma et al., 2024; Jiang and Singh, 2024).

**Relational DNN verifier:** Existing relational verifiers fall into two main categories based on the type of relational properties they can handle: (i) verifiers for properties such as UAP and fairness, which are defined across multiple executions of the same DNN (Zeng et al., 2023; Khedr and Shoukry, 2023; Meyer et al., 2024; Banerjee et al., 2024, 2024), and (ii) verifiers for properties like local DNN equivalence, defined over multiple executions of different DNNs on the same input (Paulsen et al., 2020, 2021). For relational properties defined across multiple executions of the same DNN, existing verifiers (Khedr and Shoukry, 2023) reduce the verification problem to an \(L_{}\) robustness problem by constructing a "product DNN" that includes multiple copies of the same DNN. However, the relational verifier in (Khedr and Shoukry, 2023) treats all \(k\) executions of the DNN as independent, which results in a loss of precision. On the other hand, (Zeng et al., 2023) (referred to as the I/O formulation) tracks the relationships between inputs used in multiple executions at the input layer, but it does not maintain the relationships between the outputs fed into the subsequent hidden layers. As a result, it achieves only limited improvement over baseline verifiers that treat all executions independently. RaVeN (Banerjee et al., 2024) uses DiffPoly a abstract intepretation based framework to track linear relationships between the outputs at all layers resulting from multiple executions of the same DNN. While RaVeN is significantly more precise than the I/O formulation, tracking linear constraints at each layer across all DNN executions can be computationally expensive. The SOTA relational verifier RACon (Banerjee and Singh, 2024) improves the scalability of RaVeN while maintaining RaVeN's precision by introducing a new gradient-descent based bounding strategy called cross-executional bound refinement, as detailed in Section 3. There exist, probabilistic verifiers, (Xie et al., 2021; Zhang et al., 2022) based on randomized smoothing (Cohen et al., 2019) for verifying relational properties. However, these works can only give probabilistic guarantees on smoothed models which have high inference costs. Similar to (Banerjee et al., 2024; Banerjee and Singh, 2024), in this work, we focus on deterministic relational verifiers for DNNs with ReLU activation. However, RABBit can be extended to activations like Sigmoid with branching methods (Shi et al., 2024) and parametric bounds (Wu et al., 2023).

## 3 Preliminaries

We provide background on "branch and bound" (BaB) based non-relational DNN verification, as well as DNN safety properties that can be encoded as relational properties.

**Non-relational DNN verification:** For a single execution, non-relational DNN verification focuses on proving that, for all perturbations \(+\) of a given input \(\) specified by \(\), the network's output \(=N(+)\) meets a specified logical condition \(\). Commonly, safety properties such as \(L_{}\) robustness encode the output condition (\(\)) as a linear inequality or a conjunction of linear inequalities over the DNN output \(^{n_{l}}\). For instance, an output property could be expressed as \(()=(^{T} 0)\), where \(^{n_{l}}\). Generally, even for DNNs with piecewise-linear activation functions and input constraints defined by linear inequalities, complete verification--i.e., always proving the property or finding a counterexample--is an NP-complete problem. Given a DNN \(N:^{n_{0}}^{n_{l}}\) and a property defined by \((,)\), scalable yet sound (but incomplete) verifiers approximate the network's behavior by computing a linear approximation specified by \(^{n_{0}}\) and \(b\). For any input \(\) satisfying \(\), this linear approximation ensures that \(^{T}+b^{T}N()\). The verifier then aims to show that \(^{T}+b 0\) for all \(\) that satisfy \(\), which implies \(^{T}N() 0\). While \(^{T}+b\) provides a valid lower bound for \(^{T}N()\), it may lack precision. To enhance this precision for piecewise-linear activations, state-of-the-art non-relational verifiers use a branch-and-bound (BaB) method. In each branching step, the problem is divided into smaller subproblems, while the bounding method computes a valid lower bound for each subproblem.

**Branching for piecewise linear activation:** The non-relational verifier computes \(\) by replacing non-linear activations with linear relaxations, which introduces imprecision. However, for piecewise linear activations like ReLU, it is possible to consider each linear piece separately as different subproblems, avoiding the need for imprecise linear relaxations. For instance, for \(y=ReLU(x)\), branching on \(x\) and considering the cases \(x 0\) and \(x 0\) allows decomposing \(ReLU(x)\) into two distinct linear pieces. Still in the worst case decomposing all ReLU nodes in a DNN results in exponential blowup making it practically infeasible. Therefore, SOTA non-relation verifiers like \(,\)-CROWN (Wang et al., 2021) greedily pick a small subset of ReLU nodes for branching while using linear relaxations for the rest. We explain the bounding step used for each subproblem below.

**Bounding with parameter refinement:** Obtaining sound linear relaxations of activations \(\) like ReLU, which are not used for branching, involves computing linear lower bounds \(_{l}(x)\) and upper bounds \(_{u}(x)\) that contain all possible outputs of \(\) w.r.t all inputs \(\) satisfying \(\). That is, for all possible input values \(x\) of \(\), \(_{l}(x)(x)_{u}(x)\) holds. SOTA non-relational verifiers, such as \(,\)-CROWN, improve precision by using parametric linear relaxations instead of static linear bounds and refine the parameters to facilitate verification of the property \((,)\). For example, for \(ReLU(x)\), the parametric lower bound is \(ReLU(x) x\) with \(\). Since \( x\) remains a valid lower for any \(\), this allows optimizing \(\) while ensuring the bound remains mathematically correct. Each branched ReLU say \(y=ReLU(x)\), introduces two subproblems each with one additional constraint \(x 0\) (or, \(x 0\)) where ReLU behaves as a linear function i.e. \(y=0\) (or, \(y=x\)) respectively. To obtain the lower bound of \(^{T}+b\) over inputs satisfying \(\) with the additional branching constraints \(,\)-CROWN convert the constrained optimization problem into an unconstrained one by looking at the Lagrangian dual. The dual replaces each branching constraint by augmenting the minimization objective \(^{T}+b\) with additional terms i.e. \(^{T}+b+^{+}x\) for \(x 0\)or \(^{T}+b+^{-}x\) for \(x 0\) where \(^{+} 0\) and \(^{-} 0\). Overall, at high level, \(,\)-CROWN computes parametric linear approximations \((,)^{T}+b(,)\) and refine the parameters \(,\) to facilitate verification of \((,)\).

**DNN relational properties:** Relational properties defined for a DNN \(N:^{n_{0}}^{n_{i}}\) defined over \(k\) executions of \(N\) are specified by the tuple \((,)\). Here, \(:^{n_{0} k}\{true,false\}\) (the input specification) encodes the input region \(_{t}^{n_{0} k}\) encompassing all potential inputs corresponding to each of the \(k\) executions of \(N\). Furthermore, the safety property we expect the outputs of all \(k\) executions of \(N\) to satisfy is specified by \(:^{n_{1} k}\{true,false\}\) (the output specification). Given \(N\), an input specification \(\) and an output specification \(\), DNN relational verification seeks to formally prove whether \(_{1}^{*},,_{}^{*}^{n _{0}}(_{1}^{*},,_{}^{*})(N (_{1}^{*}), N(_{}^{*}))\) or otherwise provide a counterexample. The inputs to the \(k\) executions of \(N\) are denoted by \(_{1}^{*},,_{}^{*}\) and the corresponding outputs are denoted by \(N(_{1}^{*}),,N(_{}^{*})\). For the \(i\)-th execution, commonly, the input region \(_{t}^{i}\) is a \(L_{}\) region around a fixed point \(_{}^{n_{0}}\) defined as \(_{t}^{i}=\{_{i}^{*}^{n_{0}}\|_{}^{*}-_{}\|_{}\}\) and the corresponding output specification \(^{i}(N(_{1}^{*}))=_{j=1}^{m}(}}^{T}N( _{1}^{*}) 0)\). Consequently, \((_{1}^{*},,_{}^{*})=_{i=1}^{ k}(_{1}^{*}_{t}^{i})^{}(_{1}^{*}, ,_{}^{*})\) where \(^{}(_{1}^{*},,_{}^{*})\) encodes the relationship between the inputs used in different execution and \((N(_{1}^{*}),,N(_{}^{*}))=_{i= 1}^{k}^{i}(N(_{1}^{*}))\). Following this, we describe relational properties encoding important DNN safety configurations.

**UAP verification:** In a UAP attack, given a DNN \(N\), the adversary aims to find an adversarial perturbation with a bounded \(L_{}\) norm that maximizes the rate at which \(N\) misclassifies when the same adversarial perturbation is applied to all inputs from the distribution. The UAP verification problem aims to find the worst-case accuracy of \(N\) against the UAP adversary. We refer to this worst-case accuracy as UAP accuracy in the rest of the paper. As shown by Theorem 2 in (Zeng et al., 2023), it is possible to statistically estimate the UAP accuracy of \(N\) with respect to the input distribution if one can determine the UAP accuracy of \(N\) on \(k\) randomly selected images. We focus on the \(k\)-UAP verification problem for the rest of the paper as improving the precision of \(k\)-UAP verification directly improves the UAP accuracy on the input distribution (Banerjee and Singh, 2024). The \(k\)-UAP verification problem is fundamentally different from local \(L_{}\) robustness verification since the same adversarial perturbation is applied across the set of inputs. Thus, improving precision for the UAP verification problem requires a relational verifier that can exploit dependencies between the perturbed inputs. We provide the \(\) and \(\) of the UAP verification problem in Appendix A.1.

## 4 Cross-executional BaB

The key distinction between relational and non-relational DNN verification is the dependency between different DNN executions, which necessitates that any precise relational verifier utilizes these cross-execution dependencies. For instance, for \(k\)-UAP problem with two images \(}\), \(}\) consider the scenario where both \(}\) and \(}\) have valid adversarial perturbations \(}\) and \(}\) but no common perturbation say \(\) that works for both \(}\) and \(}\). In this case, any non-relational verification that does not account for cross-execution dependencies can never prove the absence of a common perturbation given that both \(}\), \(}\) have valid adversarial perturbations. This highlights the importance of utilizing cross-executional dependencies. The SOTA relational verifier RACon (Banerjee and Singh, 2024) leverages cross-execution dependencies to **jointly** optimize the \(\) parameters from different executions, significantly improving the precision of relational verification. However, RACoon only uses parametric linear relaxations for non-linear activations and lacks a branching step, resulting in reduced precision, as confirmed by our experimental results in Section 6. To address this, we propose two separate BaB algorithms, each with its benefits, described in Sections 4.1 and 4.2. Finally, we combine the results to formulate an efficiently optimizable MILP instance in Section 5

### Strong Bounding

Before going into the details, we briefly review the cross-executional bound refinement proposed in RACoon. For \(k\)-UAP, given any subset \(S\) of the \(k\) executions, RACoon can verify the absence of any common perturbation that works for **all** executions in \(S\) with cross-executional bound refinement. For all \(i S\), let \((_{i}(_{i}),_{i}(_{i}))\) denote the parametric linear approximations corresponding to the \(i\)-th execution. Then the optimal value \(t^{*}=_{_{i},_{i}}-\|_{i S} _{i}_{i}(_{i})\|_{1}+_{i S} _{i} a_{i}(_{i}) 0\) proves the absence of a common perturbation \(\) for \(S\). Here, \(\) is the perturbation bound i.e. \(\|\|_{}\), \(a_{i}(_{i})=_{i}(_{i})+ _{i}(_{i})^{T}}\) and \(_{i}\) with \(_{i S}_{i}=1\) are the cross-executional parameters that relate linear approximations from different execution enabling joint optimization over \(_{i}\)s. Next,we detail the first BaB method - strong bounding that combines cross-executional bounding with branching methods to verify the absence of common perturbation for any subset of \(n=|S|\) executions.

**Branching and bounding:** For \(n k\) executions, we construct a "product DNN" by duplicating the DNN \(n\) times, one for each execution. Formally, a product DNN is a function \(N^{n}:^{n_{0} n}^{n_{1} n}\) with \(N^{n}(_{1},,_{})=[N(_{1}), ,N(_{})]^{T}\). At each branching step, we greedily select a subset of unbranched ReLU activations from the product DNN and branch on them, while using parametric linear relaxations for the rest. We adapt existing greedy branching heuristics, such as BaBSR , for selecting the candidate ReLU activations. The heuristic computes a score for each unbranched ReLU activation in the product DNN, and we branch on the activations with the highest scores. Next, we detail the bounding method applied to each subproblem resulting from branching. Since the number of subproblems can be large, the bounding method needs to be fast yet capable of leveraging both branching constraints and cross-executional dependencies. However, the cross-executional bound refinement from RACoon can not handle branching constraints, while the bounding step from \(,\)-CROWN does not utilize dependencies across executions. Hence, we develop a three-step algorithm for obtaining the optimal value \(t^{*}\) with fast gradient descent-based methods. First, we replace these branching constraints by introducing dual variables \(\), resulting in new parametric linear approximations \((_{i}(_{i},_{i}),b_{i}( _{i},_{i}))\) for each subproblem for all \(i S\). Then for each subproblem, we introduce additional variables \(_{i}\) for each execution with constraints \(_{i}\) and \(_{i S}_{i}=1\). These \(_{i}\)s relate linear approximations from different executions capturing cross-executional dependencies. This reduces finding \(t^{*}\) for each subproblem to the following optimization problem \(t^{*}=_{_{i},_{i},_{i}}- \|_{i S}_{i}_{i}(_{i},_{i})\|_{1}+_{i S}_{i} a_{i} (_{i},_{i})\). Here, \(a_{i}(_{i},_{i})=b_{i}(_{i},_{i})+_{i}(_{i}, _{i})^{T}_{i}\). Finally, we apply projected gradient ascent to refine parameters \((_{i},_{i},_{i})\). The detailed derivation of the bounding step and the proof of correctness is in Appendix B. Precision gains of strong bounding over the baselines are in Section 6.2. Suppose, \((S)\) denotes the set of subproblems then Theorem 4.1 proves the absence of common perturbation for the subset of executions \(S\).

**Theorem 4.1**.: _If \(_{(S)}_{_{i},_{i}, _{i}}-\|_{i S}_{i}_{i}( _{i},_{i})\|_{1}+_{i S}_{i}  a_{i}(_{i},_{i}) 0\) then executions in \(S\) do not have a common perturbation \(^{n_{0}}\) with \(\|\|_{}\)._

Proof.: The detailed proof is in the Appendix B.

While strong bounding effectively combines cross-executional refinement with branching, it has the following drawbacks that led to the development of the 2nd BaB method. First, strong bounding branches over all executions simultaneously, which limits the number of branches explored per execution within a fixed timeout compared to branching on individual executions. For instance, if strong bounding solves \(m\) subproblems for \(n\) executions, then assuming each execution branched uniformly, each execution gets only \(m^{}\) subproblems. In contrast, given the same timeout, branching individually allows exploring \(\) subproblems per execution. Second, strong bounding only proves the absence of common perturbation, a relaxation of the \(k\)-UAP problem. To mitigate this, RACoon uses parameter refinement to obtain linear approximations and formulate a MILP, providing a more precise bound on \(k\)-UAP accuracy. However, for strong bounding, as the number of subproblems increases and each subproblem has a different linear approximation, formulating a MILP with each linear approximation is practically infeasible. Restricting the number of linear approximations can help accommodate MILP formulation by compromising on the strong cross-executional bounding.

### Strong Branching

Unlike strong bounding, strong branching explores more branches by branching on each execution independently. Additionally, for each execution, we aim to keep the number of linear approximations small post-branching, ensuring the MILP instance using these approximations remains easy to optimize. To limit the number of linear approximations for each execution \(i\), we fix a set of linear coefficients \(\{_{1},,_{m}\}\) called "target coefficients" and for each \(j[m]\), \(_{j}^{n_{0}}\) compute valid lower bound \(b_{j}^{*}\) of the following optimization problem \(_{}^{T}N(_{i}+) -_{j}^{T}(_{i}+)\) with \(\|\|_{}\) using BaB. In this case, for all \(^{n_{0}}\) with \(\|\|_{}\) the refined bias \(b_{j}^{*}\) and \(_{j}\) remain a valid lower bound of \(^{T}N(_{i}+)\) i.e. \(_{j}^{T}(_{i}+)+b_{j}^{*}^{T}N(_{i}+)\). Moreover, since we only refine the bias, the number of linear approximations remains the same as at the start of BaB, even after branching. Next, we describe how we utilize cross-execution dependencies while branching on each execution independently.

**Selecting targets:** To select target coefficients, we greedily pick subsets of executions and run cross-executional refinement from RACoon without branching on each subset of executions. We describe the greedy selection strategy in Section 5. For each set of executions, we add the linear approximations obtained by cross-executional refinement to the corresponding executions' target sets. Cross-executional refinement ensures for each execution set the parameters corresponding to the linear approximations are tailored for the relational verification.

**Bounding and branching:** Given a target coefficient \(_{t}^{n_{0}}\), since finding the exact solution of \(_{}^{T}N(_{}+ {})-_{t}^{T}(_{}+)\) is computationally expensive, strong branching aims to obtain a tight mathematically correct lower bound on the difference \(^{T}N(_{}+)-_{t}^{ T}(_{}+)\). For any subproblem, let \(((,),b(, ))\) denote the parametric linear approximation. Then for this particular subproblem, for all \(,\), \((,)^{T}(x_{i}+)+b(,)^{T}N( _{}+)\) and subsequently:

\[_{,}_{\|\|_{ }}((,)- _{t})^{T}(_{}+)+b( {},)_{\|\|_{} }^{T}N(_{}+)-_{t}^{T}(_{}+)\] (1)

The optimal solution of the max-min problem in Eq. 1 provides a mathematically correct lower bound of \(_{}^{T}N(_{}+ {})-_{t}^{T}(_{}+)\) for each subproblem. However, it is hard to solve a max-min problem with scalable differentiable optimization techniques like gradient descent typically used for large DNNs considered in this paper. Instead, we compute a closed form of the inner minimization problem reducing the optimization instance to a more tractable maximization problem (Theorem 4.2).

**Theorem 4.2**.: _For any \(,\), if \((,)^{n_{0}}\) and \(b(,)\) then \(_{\|\|_{}}((,)-_{t})^{T}(+ )+b(,)=-\|( ,)-_{t}\|_{1}+(( ,)-_{t})^{T}+b( ,)\)._

**Proof:** The proof is in Appendix C.

We apply a projected gradient ascent to optimize the maximization with the closed form obtained above (Appendix C.1). The proof of the correctness of the bounding method is in Appendix C. Note the proof of correctness does not necessitate the optimizer to find the global optimum. This is important since gradient ascent may not always converge to the global optimum. Since strong branching branch on each execution independently we reuse the branching strategy of \(,\)-CROWN.

## 5 RABBit

In this section, we detail the algorithm (Algo. 1) that combines the results from strong bounding and strong branching to formulate the MILP. Running strong bounding on all \(2^{k}-1\) non-empty subsets of \(k\) executions is impractical. Therefore, we use a greedy approach to select subsets of executions for strong bounding. Similarly, for strong branching, we greedily select the target linear coefficients. First, we describe both greedy strategies before moving on to the MILP formulation.

**Elimination of individually verified executions:** RABBit maintains a list of unverified indices and eliminates any executions that can be verified individually and does not consider them for subsequent steps (lines 3, 8, and 13 in Algo. 1). For instance, for \(k\)-UAP verification, we do not need to consider those executions that are proved to have no adversarial perturbation \(\) such that \(\|\|_{}\). Pruning individually verified executions improves the runtime without any compromise on the precision of the relational verifier (see Theorem B.1 ).

**Greedy target coefficient selection:** RABBit first runs RACoon which in turn executes an incomplete non-relational verifier \(\)-CROWN  eliminating the verified executions (line 8 in Algo. 1). Subsequently, for target selection, RABBit greedily picks the first \(k_{t}\) (hyperparameter) executions based on \(s_{i}\) the lower bound on \(^{i}(N(_{}+))\) as computed by \(\)-CROWN, prioritizing executions with higher \(s_{i}\) (line 9). Intuitively, for unverified executions, \(s_{i}\) measures the maximum violation of the output specification \(^{i}(N(_{}+))\) and thus leads to the natural choice of picking executions with smaller violations. For each selected execution \(i\), we choose up to \(m\) target coefficients by iterating over all subsets \(i S\) considered by RACoon, and selecting linear approximations corresponding to the top \(m\) subsets.The cross-executional lower bound \(t^{*}\) from RACoon decides the priority of each subset \(S\). Subsets \(S\) with higher \(t^{*}\) indicate smaller violations and are more likely to be verified for the absence of a common perturbation, making them suitable for target selection.

**Selection of subsets of executions for strong bounding:** Thereafter, until timeout \(\), we run strong bounding on subsets of executions from individually unverified executions \(I\). For each subset \(S I\)the cross-executional bound obtained by RACoon on \(S\) decides its priority. However, considering all non-empty subsets of \(I\) can be expensive. Instead, similar to strong branching, we first pick top-\(k_{t}\) executions (\(I_{2}\)) from \(I\) (Algo 1 line 19). We sort all non-empty subsets \(S I_{2}\) based on their priority and, in each iteration, run strong bounding on the highest-priority subset that has not been scheduled yet (Algo 1 line 22). Given a large timeout, RABBit would eventually select all subsets from \(I_{2}\).

**MILP Formulation:** The MILP formulation uses both the refined biases from strong branching (line 11) and the subsets \(S\) of executions verified for the absence of common perturbation from strong bounding (line 22) to compute final verified UAP accuracy. RABBit MILP formulation involves three steps. First, we deduce linear constraints between the input and output of \(N\) for each unverified execution using linear approximations of \(N\) with refined bias obtained by strong branching. Secondly, we add constraints for each subset \(S\) verified for the absence of common perturbation with strong bounding. Then, similar to the current SOTA baseline , we encode the output specification \(\) as a MILP objective, introducing only \(O(k)\) integer variables. Finally, we use an off-the-shelf MILP solver [Gurobi Optimization, LLC, 2018] to optimize the MILP.

\(\) **encoding:** First, we show the MILP objective \(\) that encodes \(\). We introduce binary variables \(z_{i}\{0,1\}\) for each individually unverified execution in \(I\) where for any perturbation \(^{n_{0}}\) and \(\|\|_{}\), \(z_{i}=1\) implies \(^{i}(N(x_{i}+))=True\). Then the finding the worst case UAP accuracy is equivalent to the following \(=(k-|I|)+min_{\|\|_{} }_{i I}z_{i}\).

Constraints encoding:We add constraints from strong bounding, strong branching, and from the linear approximation obtained from the call to RACoon (Algo. 1 line 8). Suppose for any subset \(S I\), strong bounding verifies the absence of common perturbation. Then for all \(^{n_{0}}\) and \(\|\|_{}\) at least one of the executions from \(S\) will always satisfy the corresponding output specification. Hence, for every such \(S\) we add the constraint: \(_{i S}z_{i} 1\). Now, let for any \(i I\), \(\{(_{i}^{1},b_{i}^{1}),,(_{i}^{m},b_{i}^{m})\}\) denote set of linear approximation with \(b_{i}^{m}\) either coming from RACoon or from strong branching. Then we add the following constraints \(z_{i} z_{i}^{}\), \(z_{i}^{}=(o_{i} 0)\), \(o_{i}_{i}^{jT}(}+)+b_{i}^{j}\) where \(j[m]\), and \(o_{i}\), \(z_{i}^{}\) are new real and integer variables respectively.

Limitations:Although RABBit outperforms SOTA verifiers in relational verification, like all deterministic verifiers, whether relational or non-relational (including ours), do not scale to deep neural networks (DNNs) trained on very large datasets such as ImageNet. RABBit is sound but incomplete, meaning it may not be able to prove certain relational properties even if they are true. Note that all complete non-relational verifiers are also incomplete for relational properties since they do not track any dependencies between executions.

## 6 Experimental Evaluation

We evaluate the effectiveness of RABBit on multiple relational properties such UAP accuracy ( Table 1) and top-k accuracy (Appendix Table 5), DNNs, and datasets. In our evaluation, we compare RABBit against SOTA baselines, including non-relational verifiers CROWN (Zhang et al., 2018), \(\)-CROWN (Xu et al., 2021), \(,\)-CROWN (Wang et al., 2021), MN-BaB (Ferrari et al., 2022), GCP-CROWN (Zhang et al., 2022a), as well as relational verifiers I/O Formulation (Zeng et al., 2023) and RACoon. As previously noted, RaVeN adds linear constraints for each layer, which restricts its scalability as the number of executions \(k\) increases. Therefore, we compare RABBit with RaVeN for a smaller execution count of \(k=5\), as shown in Appendix Table 4. Additionally, we show that: a) given the same time, RABBit always outperforms the SOTA BaB-based non-relational verifier \(,\)-CROWN; b) strong bounding computes a tighter bound on \(t^{*}\) than \(,\)-CROWN; and c) we provide an ablation study on \(\) and \(k\) used by RABBit.

### Experiment Setup

**Networks**. We use standard convolutional architectures, such as ConvSmall and ConvBig, which are used to evaluate both SOTA relational (Banerjee and Singh, 2024) and non-relational verifiers (Wang et al., 2021) (see Table 1). We provide the details of the DNN architectures in the Appendix D.1. We use networks trained using both standard training methods and robust training strategies, such as DiffAI (Mirman et al., 2018), SABR (Mueller et al., 2023), and CITRUS (Xu and Singh, 2024). Our experiments utilize publicly available pre-trained DNNs sourced from the CROWN repository (Zhang et al., 2020), \(,\)-CROWN repository (Wang et al., 2021), and ERAN repository (Singh et al., 2019). The clean accuracies of these networks are reported in Appendix D.2.

**Implementation details and hyperparameters**. We implemented our method in Python with Pytorch V1.11 on top of SOTA complete non-relational verifier \(,\)-CROWN (Wang et al., 2021). We used Gurobi V11.0 as the off-the-shelf MILP solver. For both strong bounding and strong branching, we use Adam (Kingma and Ba, 2014) for parameter learning and run it for 20 iterations on each subproblem. We set the value of \(k_{t}=10\) for CIFAR-10 and \(k_{t}=24\) for MNIST networks respectively. We use a single NVIDIA A100-PCI GPU with 40 GB RAM for bound refinement and an Intel(R) Xeon(R) Silver 4214R CPU @ 2.40GHz with 64 GB RAM for MILP optimization. For any relational property with \(k\) executions, we give an overall timeout of \(k\) minutes (averaging 1 minute/execution) to RABBit and all baselines. Each MILP instance gets a timeout of \(10\) minutes. We issue the MILP optimization call on line 25 of Algo. 1 in a separate thread for runtime optimization, ensuring that the MILP optimization process does not unnecessarily block the subsequent iterations of the while loop (line 20 of Algo. 1).

### Experimental Results

**Effectiveness of RABBit:** Table 1 compares the results of RABBit to all baselines across different datasets (column 1) and DNN architectures (column 2) trained with various methods (column 3), with \(\) values defining the \(L_{}\) bound of \(\) in column 4. For each DNN and \(\), we run RABBit and all the baselines on 10 relational properties each defined with \(k=50\) randomly selected inputs, and report the worst-case UAP accuracy averaged over the 10 properties. Note that for each DNN, we exclude inputs misclassified by the DNN. We compare the performance of RABBit against SOTA relational and complete non-relational verifiers as well as against strong bounding and strong branching.

The results in Table 1 demonstrate that strong bounding, strong branching, and RABBit all outperform the existing SOTA verifiers on all DNNs and \(\). Notably, RABBit gains up to \(+4.8\%\) and up to \(+3.2\%\) improvement in the worst-case UAP accuracy (averaged over 10 runs) for CIFAR10 and MNIST DNNs, respectively. RABBit also efficiently scales to the largest verifiable DNN architectures such as ConvBig, conferring up to +1.6% improvement in worst-case UAP accuracy. In some cases, strong bounding outperforms strong branching, while in others, strong branching outperforms strong

   Dataset & Network & Training & Perturbation & CROWN & \(\)-CROWN & \(,\)-CROWN & MN-BaB & GCP-CROWN & 10 & RACon & Strong & Strong & RABBit \\  & Structure & Method & Bound(\(\)) & & & & & & & & & & & & \\  & Cronwall & Standard & 1.025 & 44.8 & 45.4 & 62.2 & 55.0 & 64.8 & 45.4 & 45.4 & 63.5 (+1.6) & 63.2 (+1.0) & 65.4 (+1.2) \\  & Cronwall & Standard & 1.025 & 44.4 & 49.6 & 53.8 & 55.0 & 53.8 & 50.4 & 51.6 & 59.0 (+1.0) & 59.0 (+1.0) & 59.0 (+1.3) \\ CIFAR10 & Crosswall & SABR & 2.255 & 72.5 & 75.8 & 79.4 & 80.0 & 58.0 & 75.8 & 78.2 & 50.1 (+1.0) & 53.5 (+1.3) & 53.5 (+1.0) \\  & Cronwall & GTRUS & 2.255 & 74.8 & 76.0 & 79.2 & 79.6 & 79.6 & 77.0 & 78.2 & 81.8 (+1.0) & 32.1 (+1.0) & 33.0 (+1.0) \\  & Cron-Eng & Default & 2.255 & 46.6 & 51.8 & 61.2 & 61.6 & 64.2 & 51.2 & 53.2 & 54.6 (+1.2) & 62.5 (+1.0) & 63.0 (+1.6) \\   & Crosswall & Standard & 0.07 & 53.0 & 59.4 & 83.6 & 77.4 & 84.2 & 60.0 & 66.6 & 51.2 (+1.2) & 66.1 (+1.0) & 64.8 (+1.0) \\  & Cronwall & Pyramid & 0.13 & 51.8 & 57.0 & 76.6 & 77.0 & 77.0 & 77.2 & 57.2 & 89.0 (+1.0) & 68.1 (+1.0) \\   & Crosswall & SABR & 0.15 & 27.0 & 36.0 & 50.4 & 51.2 & 60.2 & 42.2 & 45.8 & 62.6 (+1.2) & 62.1 (+1.0) & 63.4 (+1.2) \\   & Crosswall & CTPRUS & 0.15 & 28.8 & 41.6 & 73.0 & 69.2 & 73.0 & 41.6 & 44.6 & 74.0 (+1.0) & 73.4 (+0.4) & 74.6 (+1.0) \\   

Table 1: RABBit Efficacy Analysis for Worst-Case UAP Accuracybounding, highlighting the importance of both methods. RABBit combines the strengths of both strong branching and strong bounding, producing the best results overall.

**Time vs UAP Accuracy Analysis:** Fig. 1 shows timewise the worst-case UAP accuracy (averaged over 10 runs) for different ConvSmall CIFAR10 networks with \(k=50\) on \(\) values from Table 1. Note that RABBit invokes RACoon, which in turn calls \(\)-CROWN and eliminates verified executions (Line 7 in Algorithm 1). Hence, for a fair comparison, we also run \(\)-CROWN first for \(,\)-CROWN and then run \(,\)-CROWN only on the unverified indices. For all DNNs, RABBit consistently outperforms the SOTA BaB-based non-relational verifier \(,\)-CROWN at all timestamps. This confirms that the improved precision shown in Table 1 is not dependent on the specific timeout value.

**Evaluating Bound Improvement:** In Figs 2 and 3, we present a timewise analysis of the improvement in \(t^{*}\) with strong bounding over \(,\)-CROWN and RACoon. For this experiment, we use DiffAI and CITRUS ConvSmall networks with epsilon values from Table 1. For each network and \(\), we select 30 executions at random and compute the percentage improvement in \(t^{*}\) with strong bounding over RACoon and \(,\)-CROWN.We also report the average improvement and 95% confidence intervals for all cases in Table 6 in Appendix G. The results demonstrate that the \(t^{*}\) with strong bounding is significantly tighter compared to the bounds from the SOTA verifiers \(,\)-CROWN and

Figure 1: Average Worst Case \(k\)-UAP accuracy vs Time for ConvSmall CIFAR10 DNNs.

Figure 3: Timewise Analysis of Average % Improvement in \(t^{*}\) with Strong Bounding (MNIST)

Figure 2: Timewise Analysis of Average % Improvement in \(t^{*}\) with Strong Bounding (CIFAR10)

RACoon at all timestamps. Furthermore, strong bounding improves \(t^{*}\) on average by up to 108.7% for CIFAR10 networks and 57.7% for MNIST networks. These results highlight the importance of leveraging dependencies across executions during both branching and bounding to improve precision.

**Different \(\) and \(k\) values:** Fig. 4 shows the results of RACoon, \(,\)-CROWN, and RABBit for \(k\)-UAP verification of CIFAR10 ConvSmall DNNs for 5 different \(\) values and \(k=50\). RABBit outperforms RACoon and \(,\)-CROWN for all evaluated \(\) values, notably improving the worst case \(k\)-UAP accuracy by up to 4.8%. Similarly, we analyze the performance of RACoon, \(,\)-CROWN, and RABBit for \(k\)-UAP verification of CIFAR10 ConvSmall DNNs with different \(k\) values. As presented in Fig. 5, for all \(k\) values, RABBit is more precise than both baselines. Expectedly, the worst-case \(k\)-UAP accuracy for relational verifiers is higher with larger \(k\) values as it is easier to prove the absence of a common perturbation with larger \(k\).

## 7 Conclusion

We present RABBit, a general framework for improving the precision of relational verification of DNNs through BaB methods specifically designed to utilize dependencies across executions. Our experiments, on various DNN architectures, and training methods demonstrate that RABBit significantly outperforms both SOTA relational and non-relational verifiers for relational properties. Although we focus on the worst-case UAP accuracy and top-k accuracy RABBit can be extended to properties involving different DNNs, such as local equivalence of DNN pairs Paulsen et al. (2020) or properties defined over an ensemble of DNNs.