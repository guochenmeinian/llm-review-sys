# From Similarity to Superiority: Channel Clustering

for Time Series Forecasting

Jialin Chen1, Jan Eric Lenssen2,3, Aosong Feng1, Weihua Hu2,

**Matthias Fey2, Leandros Tassiulas1, Jure Leskovec2,4, Rex Ying1**

1Yale University, 2Kumo.AI,

3Max Planck Institute for Informatics, 4Stanford University

###### Abstract

Time series forecasting has attracted significant attention in recent decades. Previous studies have demonstrated that the Channel-Independent (CI) strategy improves forecasting performance by treating different channels individually, while it leads to poor generalization on unseen instances and ignores potentially necessary interactions between channels. Conversely, the Channel-Dependent (CD) strategy mixes all channels with even irrelevant and indiscriminate information, which, however, results in oversmoothing issues and limits forecasting accuracy. There is a lack of channel strategy that effectively balances individual channel treatment for improved forecasting performance without overlooking essential interactions between channels. Motivated by our observation of a correlation between the time series model's performance boost against channel mixing and the intrinsic similarity on a pair of channels, we developed a novel and adaptable **C**hannel **C**lustering **M**odule (CCM). CCM dynamically groups channels characterized by intrinsic similarities and leverages cluster information instead of individual channel identities, combining the best of CD and CI worlds. Extensive experiments on real-world datasets demonstrate that CCM can (1) boost the performance of CI and CD models by an average margin of \(2.4\%\) and \(7.2\%\) on long-term and short-term forecasting, respectively; (2) enable zero-shot forecasting with mainstream time series forecasting models; (3) uncover intrinsic time series patterns among channels and improve interpretability of complex time series models 1.

## 1 Introduction

Time series forecasting has attracted a surge of interest across diverse fields, ranging from economics, energy , weather , to transportation planning . The complexity of the task is heightened by factors including seasonality, trend, noise in the data, and potential cross-channel information.

Despite the numerous deep learning time series models proposed recently , an unresolved challenge persists in the effective management of channel interaction within the forecasting framework . Previous works have explored two primary channel strategies: Channel-Independent (CI) and Channel-Dependent (CD) strategies. The Channel-Independent (CI) strategy has shown promise in better forecasting performance by having individual models for each channel. However, a critical drawback is its limited generalizability and robustness on unseen channels . Besides, it tends to overlook potential interactions between various channels. Conversely, the Channel-Dependent (CD) strategy models all channels as a whole and captures intricate channel relations, while they tend to show oversmoothing and have trouble fitting to individual channels, especially when the similarity between channels is very low. Moreover, existingmodels typically treat univariate data in a CI manner, neglecting the interconnections between time series samples, even though these dependencies are commonly observed and beneficial in real-world scenarios, such as stock market or weather forecasting [18; 19; 20].

**Proposed work**. To address the aforementioned challenges, we propose a Channel Clustering Module (CCM) that balances individual channel treatment and captures necessary cross-channel dependencies simultaneously. CCM is motivated by the key observations that CI and CD models typically rely on channel identity information. The level of reliance is anti-correlated with the similarity between channels (see Sec. 4.1 for an analysis). This intriguing phenomenon alludes to the model's analogous behavior on similar channels. The proposed CCM thereby involves the strategic clustering of channels into cohesive clusters, where intra-cluster channels exhibit a higher degree of similarity. To capture the underlying time series patterns within these clusters, we employ cluster-aware Feed Forward to assign independent weights to each cluster and replace individual channel treatment with individual cluster treatment. Moreover, CCM learns expressive prototype embeddings in training, which enables zero-shot forecasting on unseen samples by grouping them into appropriate clusters.

CCM is a plug-and-play solution that is adaptable to most mainstream time series models. We evaluate the effectiveness of CCM on four different time series backbones (_aka_. base models): TSMixer , DLinear , PatchTST , and TimesNet . It can also be applied to other state-of-the-art models for enhanced performance. Extensive experiments verify the superiority of CCM in long-term and short-term forecasting benchmarks, achieving an average margin of \(2.4\%\) and \(7.2\%\), respectively. Additionally, we collect stock data from a diverse range of companies to construct a new stock univariate dataset. Leveraging information from intra-cluster samples, CCM consistently shows a stronger ability to accurately forecast stock prices in the dynamic and intricate stock market. Moreover, CCM enhances zero-shot forecasting capacities of time series backbones in cross-domain scenarios, which further highlights the robustness and versatility of CCM.

The **contributions** of this paper are: (1) We propose a novel and unified channel strategy, _i.e_., CCM, which is adaptable to most mainstream time series models. CCM explores the optimal trade-off between channel individual treatment and cross-channel modeling, (2) CCM demonstrates superiority in improving performance on long-term and short-term forecasting, and (3) through learning prototypes from clusters, CCM enables zero-shot forecasting on unseen samples in both univariate and multivariate scenarios.

## 2 Related Work

### Time Series Forecasting Models

Traditional machine learning methods such as Prophet [22; 23], ARIMA  capture the trend component and seasonality in time series . As data availability continues to grow, deep learning

Figure 1: The pipeline of applying Channel Clustering Module (CCM) to general time series models. (a) is the general framework of most time series models. (b) illustrates two modified modules when applying CCM: Cluster Assigner and Cluster-aware Feed Forward. Cluster Assigner learns channel clustering based on intrinsic similarities and creates prototype embeddings for each cluster via a cross-attention mechanism. The clustering probabilities \(\{p_{i,k}\}\) are subsequently used in Cluster-aware Feed Forward to average \(\{_{k}\}_{k=1}^{K}\), which are layer weights assigned to \(K\) clusters, obtaining weights \(^{i}\) for the \(i\)-th channel. The learned prototypes retain pre-trained knowledge, enabling zero-shot forecasting on unseen samples in both univariate and multivariate scenarios.

methods revolutionized this field, introducing more complex and efficient models [26; 27]. Convolutional Neural Networks (CNNs) [13; 14; 28; 29; 30], have been widely adopted to capture local temporal dependencies. Recurrent Neural Networks (RNNs) [31; 32; 33; 34; 28] excel in capturing sequential information, yet they often struggle with longer sequences. Transformer-based models [11; 35; 12; 21; 36; 37; 9; 38; 10; 39; 40], typically equipped with self-attention mechanisms , demonstrate their proficiency in handling long-range dependencies, although they require substantial computational resources. Recently, linear models [42; 43; 44], _e.g.,_ DLinear , TSMixer , have gained popularity for their simplicity and effectiveness in long-term time series forecasting, but they may underperform with non-linear and complex patterns. Besides, traditional tricks, including trend-seasonal decomposition [8; 45; 46] and multi-periodicity analysis [47; 48; 13; 49; 50; 51; 52] continue to play a crucial role in aiding in the preprocessing stage for advanced models.

### Channel Strategies in Time Series Forecasting

Most deep learning models [12; 39; 10] adopt the Channel-Dependent (CD) strategy, aiming to harness the full spectrum of information across channels. Conversely, the Channel-Independent (CI) approaches [21; 8] build forecasting models for each channel independently. Prior works on CI and CD strategy [17; 15; 53; 54; 16] present that CI leads to higher capacity and lower robustness, whereas CD is the opposite. Predicting residuals with regularization (PRReg)  is thereby proposed to incorporate a regularization term in the objective to encourage smoothness in future forecasting. However, the essential challenge from the model design perspective has not been solved and it remains challenging to develop a balanced channel strategy. Prior research has explored effective clustering of channels to improve the predictive capabilities in diverse applications, including image classification , natural language processing (NLP) [56; 57], anomaly detection [58; 59; 60]. For instance, in traffic prediction [61; 62], clustering techniques have been proposed to group relevant traffic regions to capture intricate spatial patterns. Despite the considerable progress in these areas, the potential and effect of channel clustering in time series forecasting remain under-explored.

## 3 Preliminaries

**Time Series Forecasting**. Formally, let \(X=[_{1},_{T}]^{T C}\) be a time series, where \(T\) is the length of historical data. \(_{t}^{C}\) represents the observation at time \(t\). \(C\) denotes the number of variates (_i.e.,_ channels). The objective is to construct a predictive model \(f\) that estimates the future values of the series, \(Y=[}_{T+1},,}_{T+H}]^{H C}\), where \(H\) is the forecasting horizon. We use \(X_{[:,i]}^{T}\) (\(X_{i}\) for simplicity) to denote the \(i\)-th channel in the time series.

**Channel Dependent (CD) and Channel Independent (CI)**. The CI strategy models each channel \(X_{i}\) separately and ignores any potential cross-channel interactions. This approach is typically denoted as \(f^{(i)}:^{T}^{H}\) for \(i=1,,C\), where \(f^{(i)}\) is specifically dedicated to the \(i\)-th channel. Refer to Appendix A.2 for more details. In contrast, the CD strategy models all the channels as a whole with a function \(f:^{T C}^{H C}\). This strategy is essential in scenarios where channels are not just parallel data streams but are interrelated, such as in financial markets or traffic flows.

## 4 Proposed Method

In this work, we propose a Channel Clustering Module (CCM), a model-agnostic method that is adaptable to most mainstream time series models. The pipeline of applying CCM is visualized in Figure 1. General time series models, shown in Figure 1(a), typically consist of three core components [15; 63]: an optional normalization layer (_e.g.,_ RevIN , SAN ), temporal modules including linear layers, transformer-based, or convolutional backbones, and a feed-forward layer that forecasts the future values. Motivated by the empirical observation discussed in Sec. 4.1, CCM presents with a cluster assigner preceding the temporal modules, followed by a cluster-aware Feed Forward (Sec. 4.2). The cluster assigner implements channel clustering based on intrinsic similarities and employs a cross-attention mechanism to generate prototypes for each cluster, which stores the knowledge from the training set and endows the model with zero-shot forecasting capacities.

### Motivation for Channel Similarity

To motivate our similarity-based clustering method, we conduct the following toy experiment. We select four recent and popular time series models with different backbones. TSMixer  and DLinear are linear models. PatchTST  is a transformer-based model with a patching mechanism and TimesNet  is a convolutional network that captures multi-periodicity in data. Among these, TSMixer and TimesNet utilize a Channel-Dependent strategy while DLinear and PatchTST adopt the Channel-Independent design. We train a time series model across all channels and evaluate the channel-wise Mean Squared Error (MSE) loss on the test set. Then, we repeat training while randomly shuffling channels in each batch. Note that for both CD and CI models, this means channel identity information will be removed. We report the average performance gain in terms of MSE loss across all channels based on the random shuffling experiments (denoted as \((\%)\)) in Table 1. We attribute the models' performance decrease in the random shuffling experiments to the loss of _channel identity information_. We see that all models rely on channel identity information to achieve better performance. Next, we define channel similarity based on radial basis function kernels  as

\[(X_{i},X_{j})=(-X_{j}\|^{2}}{2^{2}}),\] (1)

where \(\) is a scaling factor. Note that the similarity is computed on the standardized time series to avoid scaling differences. More details are discussed in Appendix A.1. The performance difference in MSE from the random shuffling experiment for channel \(i\) is denoted as \(_{i}\). We define \(_{ij}:=|_{i}-_{j}|\) and calculate the Pearson Correlation Coefficients (PCC) between \(\{_{ij}\}_{i,j}\) and \(\{(X_{i},X_{j})\}_{i,j}\), as shown in Table 1. The toy example verifies the following two assumptions: **(1)** Existing forecasting methods heavily rely on channel identity information. **(2)** This reliance clearly anti-correlates with channel similarity: for channels with high similarity, channel identity information is less important. Together, these two assumptions motivate us to design an approach that provides cluster identity instead of channel identity, combining the best of both worlds: high capacity and generalizability.

### CCM: Channel Clustering Module

**Channel Clustering**. Motivated by the above observations, we first initialize a set of \(K\) cluster embeddings \(\{c_{1},,c_{K}\}\), where \(c_{k}^{d}\), \(d\) is the hidden dimension and \(K\) is a hyperparameter. Given a multivariate time series \(X^{T C}\), each channel in the input \(X_{i}\) is transformed into a \(d\)-dimensional channel embedding \(h_{i}\) through an MLP. The probability that a given channel \(X_{i}\) is associated with the \(k\)-th cluster is the normalized inner-product of the cluster embedding \(c_{k}\) and the channel embedding \(h_{i}\), which is computed as

\[p_{i,k}=(^{}h_{i}}{\|c_{k}\|\|h_{i}\|}).\] (2)

The normalization operator ensures that \(_{k}p_{i,k}=1\) and validates the clustering probability distribution across \(k\) clusters. We utilize reparameterization trick  to obtain the clustering membership matrix \(^{C K}\) where \(_{ik}(p_{i,k})\). Higher probability \(p_{i,k}\) results in \(_{ik}\) close to 1, leading to the deterministic existence of certain channels in the corresponding cluster.

**Prototype Learning**. The cluster assigner also creates a \(d\)-dimensional prototype embedding for each cluster in the training phase. Let \(=[c_{1},,c_{K}]^{K d}\) denote the cluster embedding, and \(=[h_{1},,h_{C}]^{C d}\) denote the hidden embedding of the channels. To emphasize the intra-cluster channels and remove interference from out-of-cluster channel information, we design a modified cross-attention as follows,

\[}=(()(W_{K})^{}}{})^{})W_{V} ,\] (3)

   Base Model &  &  &  &  \\ Channel Strategy & _CD_ & _CI_ & _CI_ & _CD_ \\ 
**ETTh1** & \((\%)\) & 2.67 & 1.10 & 11.30 & 18.90 \\  & _PCC_ & -0.67 & -0.66 & -0.61 & -0.66 \\ 
**ETTm1** & \((\%)\) & 4.41 & 5.55 & 6.83 & 14.98 \\  & _PCC_ & -0.68 & -0.67 & -0.68 & -0.67 \\ 
**Exchange** & \((\%)\) & 16.43 & 19.34 & 27.98 & 24.57 \\  & _PCC_ & -0.62 & -0.62 & -0.47 & -0.49 \\   

Table 1: Averaged performance gain from channel identity information (\((\%)\)) and Pearson Correlation Coefficients (_PCC_) between \(\{_{ij}\}_{i,j}\) and \(\{(X_{i},X_{j})\}_{i,j}\). The values are averaged across all test samples.

where the clustering membership matrix \(\) is an approximately binary matrix to enable sparse attention on intra-cluster channels specifically. \(W_{Q}\), \(W_{K}\) and \(W_{V}\) are learnable parameters. The prototype embedding \(}^{K d}\) serves as the updated cluster embedding for subsequent clustering probability computing in Eq. 2.

**Cluster Loss**. We further introduce a specifically designed loss function for the clustering quality, termed ClusterLoss, which incorporates both the alignment of channels with respective clusters and the distinctness between different clusters in a self-supervised context. Let \(^{C C}\) denote the channel similarity matrix \(_{ij}=(X_{i},X_{j})\) defined in Eq. 1. The ClusterLoss is formulated as:

\[_{C}=-(^{} )+((-^{} )),\] (4)

where \(\) indicates a trace operator. \((^{})\) maximizes the channel similarities within clusters, which is a fundamental requirement for effective clustering. \(((-^{}) )\) instead encourages separation between clusters, which further prevents overlap and ambiguity in clustering assignments. \(_{C}\) captures meaningful time series prototypes without relying on external labels or annotations. The overall loss function thereby becomes \(=_{F}+_{C}\), where \(_{F}\) is the general forecasting loss such as MSE loss; and \(\) is a regularization parameter for a balance between forecasting accuracy and cluster quality.

**Cluster-aware Feed Forward**. Instead of using individual Feed Forward per channel in a CI manner or sharing one Feed Forward across all channels in a CD manner, we assign a separate Feed Forward to each cluster to capture the underlying shared time series patterns within the clusters. In this way, we use cluster identity to replace channel identity. Each Feed Forward is parameterized with a single linear layer due to its efficacy in time series forecasting [8; 15; 7]. Let \(h_{_{k}}()\) represent the linear layer for the \(k\)-th cluster with weights \(_{k}\). \(Z_{i}\) represents the hidden embedding of the \(i\)-th channel before the last layer. The final forecast is thereby averaged across the outputs of all cluster-aware Feed Forward with \(\{p_{i,k}\}\) as weights, _e.g., \(Y_{i}=_{k}p_{i,k}h_{_{k}}(Z_{i})\)_ for the \(i\)-th channel. For computational efficiency, it is equivalent to \(Y_{i}=h_{^{i}}(Z_{i})\) with averaged weights \(^{i}=_{k}p_{i,k}_{k}\).

**Univariate Adaptation**. In the context of univariate time series forecasting, we extend the proposed method to clustering on samples. We leverage the similarity between two univariate time series as defined in Eq. 1, and classify univariate time series with comparable patterns into the same cluster. This univariate adaptation allows it to capture interrelation within samples and extract valuable insights from analogous time series. This becomes particularly valuable in situations where meaningful dependencies exist among various univariate samples, such as the stock market.

**Zero-shot Forecasting**. Zero-shot forecasting is useful in time series applications where data privacy concerns restrict the feasibility of training models from scratch for unseen samples. The prototype embeddings acquired during the training phase serve as a compact representation of the pre-trained knowledge and can be harnessed for seamless knowledge transfer to unseen samples or new channels in a zero-shot setting. The pre-trained knowledge is applied to unseen instances by computing the clustering probability distribution on the pre-trained clusters, following Eq. 2, which is subsequently used for averaging cluster-aware Feed Forward. The cross-attention is disabled to fix the prototype embeddings in zero-shot forecasting. It is worth noting that zero-shot forecasting is applicable to both univariate and multivariate scenarios. We refer to Appendix B for detailed discussion.

### Complexity Analysis

CCM effectively strikes a balance between the CI and CD strategies. On originally CI models, CCM introduces strategic clustering on channels, which not only reduces the model complexity but also enhances their generalizability. Simultaneously, CCM increases the model complexity on originally CD models with negligible overhead for higher capacities. We refer to Figure 5 for empirical analysis. Theoretically, the computational complexity of clustering probability computation (Eq. 2) and the cross-attention (Eq. 3) are \((KCd)\), where \(K,C\) are the number of clusters and channels, respectively, and \(d\) is the hidden dimension. One may also use other attention mechanisms [68; 69; 70] for efficiency. The complexity of cluster-aware Feed Forward scales linearly in \(C,K\), and the forecasting horizon \(H\).

Experiments

CCM consistently improves performance based on CI or CD models by significant margins across multiple benchmarks and settings, including long-term forecasting on 9 public multivariate datasets (Sec. 5.2); short-term forecasting on 2 univariate datasets (Sec. 5.3); and zero-shot forecasting in cross-domain and cross-granularity scenarios (Sec. 5.4).

### Experimental Setup

**Datasets**. For long-term forecasting, we experiment on 9 popular benchmarking datasets across diverse domains [11; 12; 71], including weather, traffic and electricity. M4 dataset  is used in short-term forecasting, which is a univariate dataset that covers time series across diverse domains and various sampling frequencies from hourly to yearly. We further provide a new stock time series dataset with 1390 univariate time series. Each time series records the price history of an individual stock spanning 10 years. Due to the potential significant fluctuations in stock performance across different companies, this dataset poses challenges for capturing diverse and evolving stock patterns in financial markets. The statistics of long- and short-term datasets are shown in Table 2 and Table 3.

We follow standard protocols [11; 12; 13] for data splitting on public benchmarking datasets. As for the stock dataset, we divide the set of stocks into train/validation/test sets with a ratio of 7:2:1. Therefore, validation/test sets present unseen samples (_i.e.,_ stocks) for model evaluation. This evaluation setting emphasizes the data efficiency aspect of time series models for scenarios where historical data is limited or insufficient for retraining from scratch given unseen instances. More details on datasets are provided in Appendix C.1.

**Base Models and Experimental Details**. CCM is a model-agnostic channel strategy that can be applied to arbitrary time series forecasting models for improved performance. We meticulously select four recent state-of-the-art time series models as base models: TSMixer , DLinear , PatchTST  and TimesNet , which mainly cover three mainstream paradigms, including linear models, transformer-based and convolutional models. For fair evaluation, we use the optimal experiment configuration as provided in the official code to implement both base models and the enhanced version with CCM. All the experiments are implemented with PyTorch on a single NVIDIA RTX A6000 48GB GPU. Experiment configurations and implementations are detailed in Appendix C.3. Experimental results in the following sections are averaged on five runs with different random seeds. Refer to Appendix C.6 for standard deviation results.

### Long-term Forecasting Results

We report the mean squared error (MSE) and mean absolute error (MAE) on nine real-world datasets for long-term forecasting evaluation in Table 2. The forecasting horizon is \(\{96,192,336,720\}\). From the table, we observe that the model enhanced with CCM outperforms the base model in general. Specifically, CCM improves long-term forecasting performance in \(90.27\%\) cases in MSE and \(84.03\%\) cases in MAE across 144 different experiment settings. Remarkably, CCM achieves a substantial boost on DLinear, with a significant reduction on MSE by \(5.12\%\) and MAE by \(3.04\%\). The last column of the table quantifies the average percentage improvement in terms of MSE/MAE, which underscores the consistent enhancement brought by CCM across all forecasting horizons and datasets. Intuitively, the CCM method is more useful in scenarios where channel interactions are complex and significant, which is usually the case in real-world data. See more analysis in Appendix C.5.

   Dataset & Channels & Length & Frequency \\  ETH1\&ETTh2 & 7 & 17420 & 1 hour \\ ETTm1\&ETTm2 & 7 & 69680 & 15 min \\ LI1 & 7 & 966 & 1 week \\ Exchange & 8 & 7588 & 1 day \\ Weather & 21 & 52696 & 10 min \\ Electricity & 321 & 26304 & 1 hour \\ Traffic & 862 & 17544 & 1 hour \\   

Table 2: The statistics of datasets in long-term forecasting. Horizon is \(\{96,192,336,720\}\).

   Dataset & Length & Horizon \\  M4 Yearly & 23000 & 6 \\ M4 Quarterly & 24000 & 8 \\ M4 Monthly & 48000 & 18 \\ M4 Weekly & 359 & 13 \\ M4 Daily & 4227 & 14 \\ M4 Hourly & 414 & 48 \\
**Stock (New)** & 10000 & 7724 \\   

Table 3: Dataset details of M4 and Stock in short-term forecasting.

[MISSING_PAGE_FAIL:7]

[MISSING_PAGE_FAIL:8]

be capturing related or redundant information within the dataset. Concurrently, channels 1, 3, 5, and 6 coalesce into another cluster.

The similarity matrix in the lower left further corroborates these findings. Clustering is also observable in ETH2 dataset, particularly among channels 0, 4, and 5, as well as channels 2, 3, and 6. Comparatively, channel 1 shows a dispersion among clusters, partly due to its capturing of unique or diverse aspects of the data that do not closely align with the features represented by any clusters. The clustering results demonstrate that CCM not only elucidates the intricate relationships and potential redundancies among the channels but also offers critical insights for feature analysis and enhancing the interpretability of time series models.

**Weight Visualization of Cluster-aware Projection**. Figure 3 depicts the weights visualization for the cluster-aware Feed Forward on ETH1 and ETTm1 datasets, revealing distinct patterns that are indicative of the model's learned features .

For instance, in the ETTm1 dataset, Cluster 0 shows bright diagonal striping patterns, which may suggest that it is primarily responsible for capturing the most dominant periodic signals in the corresponding cluster. In contrast, Cluster 1 exhibits denser stripes, indicating its role in refining the representation by capturing more subtle or complex periodicities that the first layer does not. The visualization implies the model's ability to identify and represent periodicity in diverse patterns, which is crucial for time-series forecasting tasks that are characterized by intricate cyclic behaviors.

### Ablation Studies

Figure 4 shows an ablation study on cluster ratios, which is defined as the ratio of the number of clusters to the number of channels. \(0.0\) means all channels are in a single cluster. We observe that the MSE loss slightly decreases and then increases as the cluster ratio increases, especially for DLinear, PatchTST, and TimesNet. Time series models with CCM achieve the best performance when the cluster ratio is in the range of \([0.2,0.6]\). It is worth noticing that DLinear and PatchTST, two CI models among four base models, benefit consistently from channel clustering with any number of clusters. Additional ablation studies on the look-back window length and clustering step are provided in Appendix D.

Figure 4: Ablation Study on Cluster Ratios in terms of MSE loss with four base models. The forecasting horizon is 96. (_left_: ETTh1 dataset; _right_: ETTm1 dataset)

Figure 3: Weights visualization of cluster-wise linear layers on (a) ETTh1 and (b) ETTm1 datasets. The input and output lengths are 336 and 96, respectively. We observe the different periodicities captured by different clusters.

Figure 2: t-SNE visualization of channel and prototype embedding by DLinear with CCM on (a) ETTh1 and (b) ETTh2 dataset. The lower left corner shows the similarity matrix between channels.

### Efficiency Analysis

We evaluate the model size and runtime efficiency of the proposed CCM with various numbers of clusters on ETTh1 dataset, as shown in Figure 5. The batch size is 32, and the hidden dimension is 64. We keep all other hyperparameters consistent to ensure fair evaluation. It is worth noting that CCM reduces the model complexity based on Channel-Independent models (_e.g.,_ PatchTST, DLinear), since CCM essentially uses cluster identity to replace channel identity. The generalizability of CI models is thereby enhanced as well. When it comes to Channel-Dependent models, CCM increases the model complexity with negligible overhead, considering the improved forecasting performance.

## 6 Conclusion

This work introduces a novel Channel Clustering Module (CCM) to address the challenge of effective channel management in time series forecasting. CCM strikes a balance between individual channel treatment and capturing cross-channel dependencies by clustering channels based on their intrinsic similarity. Extensive experiments demonstrate the efficacy of CCM in multiple benchmarks, including long-term, short-term, and zero-shot forecasting scenarios. Refinement of the CCM clustering and domain-specific similarity measurement could potentially improve the model performance further. Moreover, it would be valuable to investigate the applicability of CCM in other domains beyond time series forecasting in future works.