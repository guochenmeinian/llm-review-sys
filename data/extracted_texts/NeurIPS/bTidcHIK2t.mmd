# Sample-Efficient and Safe Deep Reinforcement Learning via Reset Deep Ensemble Agents

Woojun Kim\({}^{1,*}\), Yongjae Shin\({}^{2,*}\), Jongeui Park\({}^{2}\), Youngchul Sung\({}^{2}\)

\({}^{1}\)Carnegie Mellon University \({}^{2}\)KAIST

woojunk@andrew.cmu.edu {yongjae.shin, jongeui.park, ycsung}@kaist.ac.kr

Equal contribution. Correspondence to: Youngchul Sung <ycsung@kaist.ac.kr>

###### Abstract

Deep reinforcement learning (RL) has achieved remarkable success in solving complex tasks through its integration with deep neural networks (DNNs) as function approximators. However, the reliance on DNNs has introduced a new challenge called primacy bias, whereby these function approximators tend to prioritize early experiences, leading to overfitting. To mitigate this primacy bias, a reset method has been proposed, which performs periodic resets of a portion or the entirety of a deep RL agent while preserving the replay buffer. However, the use of the reset method can result in performance collapses after executing the reset, which can be detrimental from the perspective of safe RL and regret minimization. In this paper, we propose a new reset-based method that leverages deep ensemble learning to address the limitations of the vanilla reset method and enhance sample efficiency. The proposed method is evaluated through various experiments including those in the domain of safe RL. Numerical results show its effectiveness in high sample efficiency and safety considerations.

## 1 Introduction

With the remarkable success of deep learning in diverse fields such as image classification , the integration of reinforcement learning (RL) with deep learning, called deep RL, has been considered a promising approach to solving complex control tasks. In particular, using deep neural networks (DNNs) as function approximators enables the representation of state-action value function over a huge state-action space without requiring large storage as in tabular methods, which is often infeasible in complex tasks . Despite its effectiveness, however, DNN-based function approximators in deep RL can lead to an overfitting problem called _primacy bias_, which was first investigated in Nikishin et al. . Primacy bias means that DNN-based function approximators in RL may overfit to early experiences, impeding their ability as function approximators for subsequent later experiences. This phenomenon basically results from the use of an replay buffer in deep RL serving as a dynamic dataset to which experience samples are added during the training process so that experiences collected early in the training process are sampled more in training than those collected later . Due to this primacy bias, it has been shown that performance tends to deteriorate as the replay ratio, defined as the number of updates per environment interaction, increases .

To mitigate the primacy bias, Nikishin et al.  recently proposed a simple but effective method based on resetting. The reset method periodically resets either a portion or the entirety of a deep RL agent while preserving the replay buffer. This method enhances both the steady-state performance and sample efficiency by allowing the deep RL agent to increase the replay ratio, whereas the performance of the vanilla deep RL agent deteriorates with the increasing replay ratio. Despite its potential as a means to solve primacy bias, the reset method has a problem. That is, it causes periodiccollapses in performance immediately after the resets. The occurrence of periodic collapses is an undesirable side effect, which is an issue from the perspective of safe RL and regret minimization . That is, performance collapse can lead to the violation of safety constraints, thereby limiting the applicability of the reset method to real-world RL scenarios such as autonomous vehicles. In addition, the reset method can be ineffective when the replay ratio is low, or the environment requires extensive exploration with balance with exploitation, for example, MiniGrid, as we will see in Sec. 4.

In this paper, we propose a new reset-based method that is safe--_avoiding performance collapses_--and achieves _enhanced sample efficiency_, by leveraging deep ensemble learning. In the proposed method, we first construct \(N\)-ensemble agents that adaptively integrate into a single agent based on the action value function, and then reset each agent in the ensemble sequentially. The adaptive integration of the ensemble agents prevents performance collapses after the reset by minimizing the probability of selecting the action from the recently-reset agent, also improves the sample efficiency by leveraging the diversity gain of the ensemble agents. We evaluate the proposed method combined with several deep RL algorithms such as deep Q-network (DQN)  and soft-actor-critic (SAC) , on various environments including Minigrid , Atari-100k , and DeepMind Control Suite (DMC) . We show that the proposed method significantly improves the performance of the baseline algorithm in the considered environments. In addition, we apply the proposed method to a safe RL algorithm called Worst-Case SAC (WCSAC). The result demonstrates that the proposed method improves return performance while simultaneously ensuring the safety constraint. The main contributions of this work are summarized as follows:

\(\) To the best of our knowledge, this is the first work that addresses the issue of primacy bias while simultaneously avoiding performance collapses, which can be detrimental in safety-critical real-world scenarios.

\(\) We present a novel method that adaptively combines \(N\)-ensemble agents into a single agent, incorporating sequential resets for each ensemble agent, to effectively harness the diversity gain of the ensemble agents and prevent performance collapses.

\(\) We empirically demonstrate that the proposed method yields superior performance compared with the base algorithm and the vanilla reset method on various environments. We also provide a comprehensive analysis of the underlying operations, including how the proposed method effectively prevents performance collapses.

\(\) We provide a further experiment in the domain of safe RL, demonstrating that the proposed method surpasses the baseline approaches in terms of reward performance and effectively reduces the occurrence of safety constraint violations of the reset method during the training process.

## 2 Preliminaries and Related Works

We consider a Markov decision process (MDP). At each time step \(t\), the agent selects an action \(a_{t}\) based on the current state \(s_{t}\) according to its policy \((a_{t}|s_{t})\). The environment makes a transition to a next state \(s_{t+1}\) and yields a reward \(r_{t}\) to the agent according to the transition probability \(p(s_{t+1}|s_{t},a_{t})\) and the reward function \(r(s_{t},a_{t})\), respectively. Through this iterative process, the policy \(\) is optimized to maximize the discounted return \(R_{t}=_{=t}^{}^{}r_{}\), where \([0,1)\) is the discounted factor.

**Deep Ensemble Learning** Deep ensemble learning has emerged as a promising approach, showing effectiveness in domains such as image classification and RL [3; 14]. It involves aggregating an ensemble of multiple DNNs to exploit their diversity and improve performance. RL with deep ensemble learning combines policies from multiple agents with the same architecture but with different initial parameters, leveraging their diversity to enhance robustness and efficiency. For example, Anschel et al.  proposed training and averaging multiple Q-networks for stabilization and improved performance. Lee et al.  employed an ensemble-based weighted Bellman backup technique that re-weights the target Q-value based on an uncertainty estimate from the Q-ensemble.

**Off-Policy RL** Off-policy RL algorithms aim to optimize a target policy by using experiences generated by a behavior policy to increase sample efficiency compared with on-policy RL algorithms . Off-policy learning typically uses a replay buffer to store experiences and use them to train the policy. One representative off-policy RL algorithm is DQN , which employs a DNN as a function approximator for the Q-function, defined as \(Q_{DQN}^{n}(s_{t},a_{t}):=_{\{a_{t}\}}[_{l=t}^{ }^{l-t}r_{l}|s_{t},a_{t}]\). The DNN parameters of the Q-function are trained to minimize the temporal difference (TD) error. Another example is SAC , which aims to maximize the cumulative sum of reward and entropy to improve exploration. SAC is built on the actor-critic architecture, consisting of a policy \((|s_{t})\) and soft-Q function, defined as \(Q^{}_{SAG}(s_{t},a_{t}):=r_{t}+_{_{t+1}}[_{l=t +1}^{}^{l-t}(r_{l}+((|s_{l})))|s_{t},a_{t }]\). The policy is updated through soft policy iteration .

Safe RLEnsuring safety in RL is a crucial issue when applying RL to real-world applications such as autonomous vehicles and robotics. To address this issue, safe RL has emerged as an area of research that aims to learn policies satisfying safety constraints under a Constrained Markov decision Process (CMDP), which incorporates a cost function \(c:\) to the conventional MDP framework. Recent safe RL research has focused on optimizing the return-based objective function while imposing constraints on the safety-related cost function . For example, Yang et al.  introduced a SAC-based safety-constrained RL algorithm named WCSAC that aims to maintain the _Conditional Value-at-Risk (CVaR)_ below a certain threshold. CVaR quantifies the level of risk aversion with respect to safety and CVaR for risk level \(\) is defined as

\[_{_{risk}}(s,a)=Q^{c}_{}(s,a)+_{risk}^{-1}( ^{-1}(_{risk}))^{c}_{}(s,a)}, \]

where \(\) and \(\) denote the PDF and the CDF of the standard normal distribution, respectively, and \(Q^{c}_{}(s,a)\) and \(^{c}_{}(s,a)\) respectively denote the conditional mean and the conditional standard deviation of the discounted sum of costs \(C_{}(s,a)=_{t=0}^{}^{t}c(s_{t},a_{t})\) given \(s_{0}=s\) and \(a_{0}=a\), which are called safety critic. WCSAC uses DNNs to parameterize the safety critic as well as the reward critic. Based on both the safety critic and the reward critic, the actor is trained to maximize the reward while not violating the risk level \(_{risk}\).

Primacy Bias and Resetting Deep RL Agent.Enhancing sample efficiency in terms of environment interactions is a fundamental challenge in RL. One simple approach to improve sample efficiency is to increase the _replay ratio_, which is defined as the number of policy or value parameter updates per environment time step. In deep RL, however, the reliance on DNNs for function approximators can degrade performance as the replay ratio increases. This is because the deep RL agent is susceptible to overfitting on early experiences, which deteriorates the function approximation ability of DNNs for subsequent experiences. This phenomenon is referred to as primacy bias, first investigated in the context of RL by Nikishin et al. . To overcome the primacy bias, Nikishin et al.  proposed a simple method based on increasing the replay ratio and periodically resetting either a portion or the entirety of the RL agent while preserving the replay buffer. It was shown that the deep RL algorithms employing both periodic resets and high replay ratios achieved impressive performance across several environments. In this line of research, D'Oro et al.  recently proposed fixing the number of updates for resetting, rather than the number of environment time steps, to maximally increase the replay ratio. This approach leads to more frequent parameter resets as the replay ratio increases, but results in improved sample efficiency in terms of interaction with the environment.

Although the existing reset methods mentioned above were shown to be effective in many tasks, certain limitations of the current reset methods exist. First, performance collapses are unavoidable immediately after executing the reset, which is not desired in the context of safe RL and regret minimization . Second, the current reset method is ineffective for some off-policy RL algorithms such as DQN as well as on some environments requiring extensive exploration such as MiniGrid. Lastly, a high replay ratio is necessary to achieve the desired performance enhancement, which may not be supported in computing environments with limited resources.

## 3 Methodology

To overcome the aforementioned limitations and increase sample efficiency further, we propose a simple **R**eset-based algorithm by leveraging **D**eep **E**nsemble learning (RDE). The proposed method involves a sequential resetting process of ensemble agents that are adaptively integrated into a single agent. The algorithm is comprised of three main components: (1) the construction of ensemble agents, (2) the sequential resetting mechanism, and (3) the adaptive integration of the ensemble agents into a single agent. With RDE, we aim to achieve superior performance in various environments while simultaneously addressing safety concerns. The overall operation of RDE is shown in Fig. 1.

### Sequential Resetting Ensemble Agents

We first construct \(N\) ensemble agents, each with an identical neural network architecture but initialized with distinct parameters. In this paper, we denote the parameters of the \(k\)-th agent by \(_{k}\), where \(k\{1,2,,N\}\). For instance, in the case of SAC, \(_{k}\) includes all parameters for both the actor and critic of the \(k\)-th agent. Note that these ensemble agents are combined into a single agent that interacts with the environment. The integration of the ensemble into a single agent will be presented in Section 3.2.

Next, we perform the sequential and periodic resetting of the ensemble agents, while preserving the replay buffer. Specifically, every \(T_{reset}\) time-step, we reset each parameter \(_{1}\), \(_{2}\), \(\), \(_{N}\) in sequential order with time-step gap \(T_{reset}/N\), returning back to \(_{1}\) after we reset \(_{N}\). Consequently, the existence of \(N-1\) non-reset agents at the time of each reset operation serves to mitigate performance collapses, whereas the vanilla reset method with a single agent inevitably encounters performance collapse after each reset. As the reset operation is applied to all ensemble agents, our method can still tackle the issue of primacy bias effectively.

### Adaptive Ensemble Agents Composition

Despite the potential effectiveness of utilizing an ensemble of \(N\) agents to mitigate performance collapses, the use of an ensemble alone is not sufficient. Suppose that we adopt a naive approach that selects one agent uniformly from the ensemble of the \(N\) agents and follows the action that the agent generates. Then, performance collapses may still occur since the most recently initialized agent can be selected to generate untrained random actions or biased actions. Therefore, we need a method to judiciously integrate the ensemble into a single agent, considering that a lower probability should be assigned to the selection of the recently reset agent.

To achieve this, we propose the adaptive integration of the \(N\)-ensemble agents into a single agent that interacts with the environment, inspired by Zhang et al. . The proposed integration method first generates a set of actions \(=(a_{1},a_{2},,a_{N})\) given a state \(s\) from the policies \((_{_{1}},_{_{2}},,_{_{N}})\) of the ensemble agents. Subsequently, we select a single action from the set of \(N\) actions with a probability distribution that is based on the action-value function. We assign a higher selection probability to the action with a higher action value, thereby reducing the chance that the most recently reset policy will be selected. Thus, the most recently reset policy is seldom selected immediately

Figure 1: Overall diagram of RDE: We generate N ensemble agents with unique sets of initialized parameters. During the training phase, these ensemble agents are adaptively composited into a single agent that interacts with the environment. At every \(T_{reset}\) time-step, a resetting mechanism operates by selecting a single agent \(k\) and resetting all of its parameters \(_{k}\). Further details regarding the adaptive composition and sequential resetting mechanism can be found in Sections 3.2 and 3.1, respectively.

after the reset operation, and the probability of selecting this element policy gradually increases as it is trained. The designed selection mechanism effectively mitigates performance collapses, as demonstrated in Sec. 4.3.

Let us explain the adaptive integration mechanism in detail. We design the probability distribution \(p_{select}\) of selecting an action from the set of \(N\) actions as a categorical distribution whose probability values are determined as

\[p_{select}=[p_{1},p_{2},,p_{N}]=[(s,a_{1})/ ,(s,a_{2})/,,(s,a_{N})/], \]

where \(p_{k}\) denotes the probability of selecting the action from Agent \(k\) and \(\) is the temperature parameter. To deal with the scale of the Q-function, we set the temperature parameter as \(=((s,a_{1}),(s,a_{2}),,(s,a_{N}))/\) and adjust the coefficient \(\). Here, we choose \(\) to be the estimated action-value function of the agent that underwent a reset operation at the earliest point with respect to the current time step among the ensemble agents. For example, after the \(k\)-th agent is reset, the earliest reset agent is the \((k+1)\)-th agent (or the first agent if \(k=N\)). Then, \(=Q_{_{k+1}}\) (or \(Q_{_{1}}\) if \(k=N\)). The underlying rationale for adopting this approach is that the estimated Q-value function of a recently reset network is inaccurate due to lack of training time. By leveraging the oldest Q-function, which provides a more precise estimation of the true action value function, we can effectively decrease the probability of selecting action \(a_{k}\) that has a low return. We initialize \(p_{select}\) before the first reset operation as \(p_{i}=1/N\) for all \(i\).

In addition to its role in preventing performance collapse, our use of deep ensemble learning provides the potential to enhance performance through the diversity gained from ensemble agents. With ensemble agents initialized differently, we can effectively avoid getting trapped in local optima. Moreover, the adaptive integration allows the RL agent to balance the exploration-exploitation trade-off, in contrast to the vanilla reset method, which disrupts this balance by restarting from scratch and consequently losing its exploitation ability after a reset operation. The proposed method leverages the presence of \(N-1\) non-reset agents, ensuring that the exploitation ability is preserved even after a reset. Thus, the proposed reset method is a more balanced approach in terms of exploitation-exploration trade-off, and still preserves some level of exploitation while exploring the environment.

In summary, the advantages of RDE are threefold: (1) it effectively prevents performance collapses, (2) it balances the exploration-exploitation trade-off through the adaptive ensemble integration, and (3) it improves sample efficiency by addressing the primacy bias and leveraging the benefits of deep ensemble learning. The pseudo-code of the overall algorithm is provided in Appendix A.

## 4 Experiments

### Experimental Setup

**Environments** We consider both continuous and discrete tasks including DeepMind Control Suite (DMC) , Minigrid, and Atari-100k environments. Here, we consider \(9\) tasks in DMC, \(26\) Atari games, and \(5\) tasks in Minigrid. The details are provided in Appendix B.

**Baselines** We built the vanilla reset method  and the proposed method, both of which were implemented on top of the base algorithms. We used SAC  and DQN  as the base algorithms in DMC and Minigrid/Atari-100K environments, respectively. For each environment, we compared three algorithms: the base algorithm (denoted as X), the vanilla reset method (denoted as SR+X), and the proposed method (denoted as RDE+X).

**DNN Architectures** SAC employed an actor network and two critic networks, each consisting of three multi-layer perceptions (MLPs). For Atari-100k, DQN used a Convolutional Neural Network (CNN) for the first 3 layers and followed by 2 MLPs. For Minigrid, DQN employed \(5\) layers MLPs.

**Reset Depth** Both the vanilla reset and our proposed method involve resetting parts or the entirety of DNNs. The degree of reset, referred to as the reset depth, is a hyperparameter that varies depending on the specific environment. We follow  in resetting the entire layers of DNNs in the SAC for the DMC environments. For the Minigrid environment, we observed that a higher reset depth is more advantageous for tasks requiring extensive exploration, which we will see in Sec. 4.3. The used reset depth in Minigrid and Atari-100k are provided in Appendix B.

Reset FrequencyThe reset frequency \(T_{reset}\) is a hyperparameter that is fixed with respect to the number of updates, as proposed in D'Oro et al. . Accordingly, for each environment, the reset frequency in terms of timesteps is a linearly decreasing function of the replay ratio. For example, let us assume that the reset frequency is \(4 10^{5}\) timesteps when the replay ratio is \(1\). Then, a replay ratio of \(2\) and \(4\) correspond to reset frequencies of \(2 10^{5}\) and \(10^{5}\) timesteps, respectively. Note that the replay ratio can be smaller than \(1\). For instance, a replay ratio of \(0.5\) implies training DNNs every \(2\) timesteps. To ensure a fair evaluation, the reset frequency of each ensemble agent in RDE is equivalent to the reset frequency in the vanilla reset method. In summary, when the reset frequency with the replay ratio \(1\) in the vanilla reset is \(T_{reset}^{v,rr=1}\), and the reset frequency with the replay ratio of \(rr\) with \(N\)-ensemble agents is \(T_{reset}^{v,rr=1}/(N rr)\). The reset frequency values for each environment is provided in Appendix B.

### Performance Comparison

We first evaluated the performance of the proposed method in comparison with the base algorithm and the vanilla reset method by varying the replay ratio. The results on DMC, Atari-100k, and MiniGrid are shown in Fig. 2, using the interquartile mean (IQM)  performance metric. Note that the primacy bias is observed in the base algorithm, where its performance deteriorates as the replay ratio increases, as reported by Nikishin et al.  and D'Oro et al. . While the vanilla reset method demonstrates better performance than the base algorithm, particularly with high replay ratios, our proposed method outperforms both baselines even with low replay ratios, as shown in Fig. 2.

The performance results of the proposed method and the baselines on the considered environments are shown in Fig. 3, where the considered tasks are hopper-hop and humanoid-run in DMC and Fourroom and GotoDoor in MiniGrid. It is seen that the proposed method not only yields superior performance to the baselines but also prevents performance collapses. In the Fourroom environment, the proposed method solves the game whereas both the base algorithm and the vanilla reset method fail to learn. The inherent loss of exploitation ability following a reset operation in the vanilla reset method prevents effective learning of this hard task. In other environments, as we expected, the vanilla reset method suffers from performance collapses. Especially in humanoid-run, there is a clear difference between our method and the vanilla reset method: immediately after a reset operation, our method sustains performance without a significant drop, whereas the vanilla reset method collapses to the initial performance.

More results on Atari-100k are provided in Appendix C.

### Analysis

Performance CollapseThe results in Sec. 4.2 demonstrate the effectiveness of the proposed method in eliminating performance collapses. As aforementioned, the probability of selecting an action from the ensemble of \(N\) actions is determined based on Eq. (2), which assigns a lower selection

Figure 2: IQM results of the considered algorithms on (a) DMC, (b) Atari-100k, and (c) Minigrid. The y-axis in (a)-(c) represents IQM metric, based on the test return normalized by SAC with the replay ratio of \(1\), the test return normalized by DQN with the replay ratio of \(1\), and the test return, respectively. The x-axis denotes the replay ratio.

probability to an action of a recently reset agent. This effectively prevents performance collapses, and the degree of this effect can be controlled by adjusting the parameter \(\). To investigate the impact of the parameter \(\), we conducted experiments on the humanoid-run task using RDE+SAC with \(N=2\). We varied \(\) across \(\{-10,0,50,300\}\) and measured the corresponding empirical probability \(p_{1}\), which denote the probability of selecting the action generated by \(_{1}\). In Fig. 4 (b), we observe that the empirical \(p_{1}\) experiences a sudden drop immediately after resetting \(_{1}\). On the other hand, when \(_{2}\) is reset, \(p_{1}\) jumps up, indicating the sudden drop of \(p_{2}\). Note that the occurrence of performance collapses was nearly eliminated when \(\) was set to \(300\). This demonstrates the effectiveness of our adaptive integration in mitigating performance collapses by appropriately reducing the probability of selecting actions from recently-initialized agents. Furthermore, increasing the value of \(\) quickly adapt the values of \(p_{select}\), leading to effective reduction of performance collapses.

**Reset Depth** The choice of reset depth is a crucial hyperparameter that significantly impacts the final performance of reset-based methods. We observed that a higher reset depth can provide an advantage in more challenging tasks that require hard exploration, whereas it may present a slight disadvantage in relatively easy tasks. We provide the performance of RDE+DQN with two different reset depths: _reset-part_, which resets the last two layers, and _reset-all_, which completely reset all layers. These evaluations were conducted on three MiniGrid environments, comprising two challenging environments, FourRoom and SimpleCrossing9, and one comparatively easier environment, GotoDoor. As shown in Fig. 5, _reset-part_ exhibits inferior performance and instability compared with _reset-all_ in two relatively challenging tasks. However, in two relatively easy tasks, the _reset-pt_ performs marginally better than _reset-all_.

Figure 4: Performance and empirical probability of action selection from \(_{1}\) for RDE+SAC with varying \(\) values on humanoid-run.

Figure 3: Performance comparison on hopper-hop and humanoid-run in DMC and Fourroom and GotoDoor in MiniGrid. Note that the number in parentheses indicates the replay ratio. The scale of the x-axis is \(10^{6}\). Performances are averaged over 5 seeds.

**Ensemble and Reset Effect** The effectiveness of our proposed method is due to two key factors: ensemble learning and reset. To assess the contributions of these factors, we conducted two ablation studies by evaluating the performance of RDE by (1) varying the number of ensemble agents \(N\), and (2) eliminating the reset mechanism. In the first ablation study, we compared the performance of RDE+DQN with \(N=4\) and \(N=2\) on the MiniGrid environments. The results, shown in Fig. 5, demonstrate that increasing the number of ensemble agents improves the performance of the proposed method. In the second ablation study, we examined the performance of RDE+DQN with and without reset. Here, the latter approach solely relies on deep ensemble learning. As shown in Fig. 5, the reset mechanism significantly contributes to the enhanced performance of the proposed method, especially in the FourRoom environment.

## 5 Experiment: Safe Reinforcement Learning

As previously mentioned, Safe RL aims to find a high-return policy while avoiding unsafe states and actions during training as much as possible. Ray et al.  formulated the problem as a constrained RL problem, where the agent incurs a cost when it visits a hazardous state. The goal is to maximize the expected return while ensuring that the cumulative cost remains below a predefined threshold. On the other hand, Jung et al.  considered maximizing the expected return while satisfying the probability of outage events. When applying the reset mechanism in such setting, a challenge arises because the deep RL agent loses all its knowledge about states that should be avoided after operating a reset. Consequently, until the safety critic is sufficiently retrained, the agent may continue to visit these undesirable states, thereby increasing the overall training cost. We expect that RDE with a slight modification taking into account both reward and cost can maintain the training cost low while benefiting from the performance gains associated with the reset operation still.

For safe RL, we adopted WCSAC, which maximizes the expected return while constraining the CVaR defined as Eq. (1), and modified the adaptive integration method proposed in Sec. 3.2. Specifically, we modified the probability of action selection in Eq. (2) by incorporating the cost function. The modified probability of adaptive action selection is now defined as \(p_{select}^{safe}= p_{select}+(1-)p_{select}^{c}\), where \(\) is the mixing coefficient and \(p_{select}^{c}\) is given by

\[p_{select}^{c}=[p_{1}^{c},p_{2}^{c},,p_{N}^{c}]=[- (s,a_{1})/_{c},-(s,a_{2})/_{c},,-(s,a_{ N})/_{c}], \]

where \(_{c}=\{|(s,a_{1})|,|(s,a_{2})|,,|(s,a_{N}) |\}/\). Here, we choose \(\) to be the estimated CVaR value function that underwent a reset operation at the earliest point with respect to the current time step among the ensemble agent. Note that the sign of \((s,a)\) in Eq. (3) is inverted to prioritize actions with low CVaR values, as we aim to minimize the cost function.

### Result

We compared our algorithm with WCSAC and SR-WCSAC, which incorporates the reset method into WCSAC, on the 3 environments in Safety-Gym. The details are provided in Appendix B.

Figure 5: Ablation studies regarding reset depth, ensemble learning, and reset mechanism. Performances are averaged over 5 seeds.

Fig. 6 shows the test return and the training cost. As expected, although the application of the simple reset method leads to a slight performance improvement compared with the baseline WCSAC agent, it also incurred a higher training cost. In particular, the soaring cost makes the naive reset method impractical in real-world scenarios concerning safety. On the other hand, our algorithm achieved superior test performance compared with the simple reset method, while significantly reducing the training cost. Note that the presence of non-reset agents and adaptive composition prevent cost from soaring after the reset operation.

## 6 Conclusion

We have proposed a novel RDE (**R**eset with **D**eep **E**nsemble) framework that ensures safety and enhances sample efficiency by leveraging deep ensemble learning and the reset mechanism. The proposed method effectively combines \(N\) ensemble agents into a single agent to mitigate performance collapse that follows a reset. The experimental results demonstrate the effectiveness of the proposed method, which significantly improves sample efficiency and final performance, while avoiding performance collapse in various reinforcement learning tasks. In addition, in the context of safe reinforcement learning, our method outperforms the vanilla reset approach without incurring high costs, whereas the latter suffers from prohibitive training cost.