# Hierarchical Visual Feature Aggregation for

OCR-Free Document Understanding

Jaeyoo Park

ECE & \({}^{2}\)I PAI, Seoul National University

Jin Young Choi

ECE & \({}^{2}\)I PAI, Seoul National University

Jeonghyung Park

Samsung SDS

Bohyung Han

ECE & \({}^{2}\)I PAI, Seoul National University

###### Abstract

We present a novel OCR-free document understanding framework based on pretrained Multimodal Large Language Models (MLLMs). Our approach employs multi-scale visual features to effectively handle various font sizes within document images. To address the increasing costs of considering the multi-scale visual inputs for MLLMs, we propose the Hierarchical Visual Feature Aggregation (HVFA) module, designed to reduce the number of input tokens to LLMs. Leveraging a feature pyramid with cross-attentive pooling, our approach effectively manages the trade-off between information loss and efficiency without being affected by varying document image sizes. Furthermore, we introduce a novel instruction tuning task, which facilitates the model's text-reading capability by learning to predict the relative positions of input text, eventually minimizing the risk of truncated text caused by the limited capacity of LLMs. Comprehensive experiments validate the effectiveness of our approach, demonstrating superior performance in various document understanding tasks.

## 1 Introduction

In recent years, significant progress has been made in the development of Multimodal Large Language Models (MLLMs) trained on large-scale datasets , demonstrating remarkable performance in various tasks, such as visual question answering , image captioning , image-text retrieval , visual grounding  etc. MLLMs also exhibit the emergent capability achieving robust Optical Character Recognition (OCR)  performance by leveraging extensive pretraining data. Such advancements highlight the potential of MLLMs for practical and challenging tasks related to document understanding, by reducing reliance on external OCR engines which often struggle with complex layouts and varied fonts. Additionally, OCR-based models typically require additional modules to process explicit OCR outputs, adding to system complexity.

Despite their promising abilities, document understanding frameworks without external OCR engines  face significant challenges, particularly in considering multiple scales of document images, as text and visual elements often vary in size and style. Complex graphical elements, such as charts and diagrams, along with non-standard layouts, pose additional difficulties for the model due to limited receptive fields. This highlights the need for the frameworks to effectively handle the variability in document scales to achieve accurate and comprehensive understanding.

Our goal is to process visual documents over multiple scales rather than a single fixed scale. However, augmenting visual features for multiple scales inevitably increases costs, which is particularly critical for MLLMs, where LLMs have quadratic complexity due to the self-attention mechanism. To tackle this issue, we propose the Hierarchical Visual Feature Aggregation (HVFA) module to reduce thenumber of visual tokens by incorporating cross-attentive pooling within a feature pyramid. This design accommodates various document image sizes, effectively balancing the trade-off between information retention and efficiency. By reducing the visual features before feeding them into LLMs, our module maintains the original complexity of the LLMs.

In addition to incorporating multi-scale visual inputs, we introduce novel instruction tuning tasks to ensure the model's comprehensive text reading ability and capture layout information effectively. While  proposes reading all of the texts in images, we observed that certain documents contain more texts than LLMs can hold, resulting in information loss during training. To address this challenge, we propose an efficient and effective alternative task of reading, where the model learns to read partial texts in images based on their relative positions. Furthermore, teaching the model to predict the relative positions of given texts, which is an inverse task to the aforementioned reading task, enhances its ability to recognize overall layout information.

The main contributions of our paper are summarized as follows:

* We present a novel framework for OCR-free document understanding, built on a pretrained large-scale multi-modal foundation model, which integrates multi-scale visual features to handle varying font sizes in document images.
* We introduce the Hierarchical Visual Feature Aggregation (HVFA) module, which employs cross-attentive pooling to effectively balance information preservation and computational efficiency, addressing the escalating costs associated with detailed visual inputs.
* We employ a novel instruction tuning task, which aims to predict the relative positions of input text, to enhance the model's comprehensive text reading capability.
* The proposed approach presents remarkable performance gains on the multiple document understanding benchmarks among OCR-free models.

The rest of the paper is organized as follows. Section 2 reviews the related work. The details of our approach are described in Section 3, and the experimental results are presented in Section 4. Finally, we conclude this paper in Section 5.

## 2 Related Work

This section provides an overview of multimodal large language models and their applications to document understanding tasks. Research on document understanding typically falls into two categories: those that incorporate off-the-shelf OCR engines and those that bypass OCR extractors. From the extensive literature on this topic, we highlight the studies most relevant to our work.

### Multimodal Large Language Models

Contrary to early multimodal learning approaches that focused on joint embedding learning for diverse downstream tasks [1; 2; 3; 4; 5; 20; 21; 22; 23; 24], recent frameworks [9; 12; 13; 25] have shifted toward generating open-ended language responses by leveraging LLMs [26; 27]. This evolution has contributed to various architectural innovations; GiT , BLIP , and Qwen-VL  pioneer encoder-decoder architectures for unified vision-language understanding and generation. Building upon these foundations, BLIP-2  and mPLUG-Owl  introduce resamples (Q-Formers) to bridge the vision-language modality gap through query-relevant feature extraction and dimensionality reduction. Further advances have come through instructablIP  and LLAVA , which enhance multimodal capabilities by instruction tuning on vision-language conversation data.

Recent studies explore MLLMs' text-reading capabilities and their relationship with image resolution. Wang et al.  shows MLLMs gradually learn to read text in images through large-scale pretraining. However, Liu et al.  reveals that most MLLMs are constrained by their visual encoder architecture designed only for 224\(\)224 resolution inputs, significantly limiting their ability to capture fine-grained details in text-centric tasks. While Monkey  demonstrates enhanced performance by supporting high-resolution inputs, their analysis was limited to single-scale processing. These investigations collectively indicate that, although MLLMs can read text in images, their performance is significantly influenced by input resolutions, affecting their ability to handle diverse font sizes and capture fine-grained textual details.

### OCR-based Document Understanding Models

Early studies adopted external OCR engines to explicitly model and understand the texts within images . LayoutLM  directly extends BERT  to jointly model interactions between text, visual and layout information for the first time. Based on LayoutLM, there have been efforts to introduce various pretraining objectives to learn layout information effectively by incorporating image-text alignment , cell-level information from OCR outputs , and multi-modal masking . Despite their strong performance on document understanding benchmarks, these models rely on off-the-shelf OCR engines and struggle with challenging cases such as diverse fonts, handwritten texts, and degraded historical documents. Moreover, they require additional modules for processing OCR results, which increases computational complexity.

### OCR-free Document Understanding Models

To address the drawbacks of OCR-based models, OCR-free models powered by end-to-end multi-modal pretraining have been proposed. Dessurt  and Donut  combine a learnable visual encoder with an autoregressive text decoder for text recognition. Pix2Struct  focuses on layout understanding by learning from HTML data and masked webpage screenshots. However, these methods suffer from high computational costs because they require pretraining models from scratch before task-specific fine-tuning. UReader  takes a different approach by leveraging pretrained MLLMs, reducing training costs while handling diverse document types through document instruction tuning and shape-adaptive cropping. Despite these advances, current OCR-free models still struggle to capture diverse visual scales and font sizes, often missing local details in documents.

## 3 Method

This section describes our main idea, including multi-scale visual inputs, the Hierarchical Visual Feature Aggregation (HVFA) module, and relative text-position prediction tasks in detail.

### Overview

MLLMs generate instruction-following responses given multi-modal inputs, an image \(I\) and text (instruction) \(T\). The output token sequence with a length of \(n_{s}\) is denoted by \(S=\{s_{1},...,s_{n_{s}}\}\), where the probability of generating \(s_{i}\) is given by \(p(s_{i}|I,T,S_{<i})\), \(1 i n_{s}\). Given the correct

Figure 1: Illustration of the proposed framework. Our model adopts visual features from multiple scales, which are aggregated through the Hierarchical Visual Feature Aggregation (HVFA) module. The aggregated features are then fed into an LLM to generate language response in an autoregressive manner. The sub-image highlighted by the red box contains the text relevant to an input question, which requires accurately recognizing visually detailed elements from high resolution image.

answer \(Y=\{_{1},...,_{n_{y}}|_{i}^{|V|}\}\), where \(n_{y}\) is the length of the answer and \(V\) is the vocabulary set, the learning objective of the MLLMs, parameterized by \(\), is given by

\[^{*} =*{arg\,min}_{}\ _{}(I,T;)\] \[=*{arg\,min}_{}\ |}_{(I,T) }[-_{i=1}^{n_{s}}_{v=1}^{|V|}_{i,v} p (s_{i}=v|I,T,S_{<i};)],\] (1)

where \(\) is the image-text dataset.

MLLMs generally comprise three modules: 1) a vision encoder, 2) a projector, and 3) a large language model (LLM). First, we generate visual inputs at multiple scales from a given document image. The vision encoder extracts visual features for detailed image understanding. The resampler-based projector converts these visual features into a compact set of query tokens for the language model. Unlike traditional MLLMs, which feed these query tokens directly into the LLM, we introduce the Hierarchical Visual Feature Aggregation module to reduce the number of visual query tokens while preserving local information. Finally, the LLM processes both the visual and instruction tokens to generate a response autoregressively. Figure 1 illustrates the overall framework.

### Multi-Scale Visual Features

We focus on developing a document understanding framework that incorporates multi-scale visual inputs to address various image scales for MLLMs. However, using pretrained MLLMs constrains the input resolution to a small, square-shaped configuration defined by the visual encoder. This limitation hampers capturing detailed information in high-resolution images and leads to spatial distortions when handling document images of diverse resolutions and aspect ratios.

We adopt shape-adaptive cropping (SAC)  to generate multiple sub-images, allowing our model to handle varying aspect ratios and resolutions. We split each image using a predefined grid \(\{g=(n_{h} n_{w})|n_{h},n_{w}\}\), where \(n_{h}\) and \(n_{w}\) respectively denote the number of rows and columns for the grid \(g\). Then, each sub-image is resized to fit the visual encoder. Note that the optimal grid \(g^{*}=(n_{h}^{*} n_{w}^{*})\) for each image is selected by two metrics; resolution coherence, and shape similarity. Refer to Appendix C for more details.

Although SAC handles diverse aspect ratios and high-resolution images, it may miss local details within each sub-image due to its receptive fields of fixed-size. To address this issue, we consider an additional level of detail by applying \(2\) upscaling to each sub-image to capture detailed visual features and small text fonts through enlarged local resolution. To be specific, this augmentation process involves subdividing each sub-image into half along each spatial dimension, resulting in \(2n_{h} 2n_{w}\) sub-images. We again resize the subdivided images to ensure compatibility with the visual encoder. By incorporating these high-resolution representations, the model now observes the input image in three different levels: global, \(n_{h} n_{w}\), and \(2n_{h} 2n_{w}\) scales.

Unlike vision encoders and resampler-based projectors, which process sub-images in batches and thereby exhibit linear computational complexity, LLMs demonstrate quadratic complexity with respect to the number of sub-images. Thus, when the number of visual inputs increases from \(n\) to \(5n\), the computational burden of LLMs escalates 25 times, while that of vision encoders and resamplers grows 5 times. Because LLMs are represented by networks with significantly more channels than other models, this quadratic increase of computational cost is problematic in many practice scenarios.

### Hierarchical Visual Feature Aggregation

The HVFA module leverages a feature pyramid to fuse multi-scale features for LLMs and reduces computational overhead. We first construct a feature pyramid using the visual features from two adjacent scales, \(i^{}\) and \((i+1)^{}\) scales. Cross-attentive pooling is then applied to features at scale \((i+1)\) to compress and preserve detailed information, and the pooled features are aggregated with low-resolution features at scale \(i\). Figure 2 depicts the mechanism of the HVFA module.

Let \(_{i}^{n_{h}^{i} n_{w}^{i} q c}\) be the visual features for the \(i^{}\) scale extracted from resampler, where \((n_{h}^{i} n_{w}^{i})\) is the number of sub-images at \(i^{}\) scale, \(q\) denotes the number of queries from resampler, and \(c\) is the number of channels. We perform \(2 2\) max-pooling on \(_{i+1}^{n_{h}^{i+1} n_{w}^{i+1} q c}\) to obtain a pooled feature \(^{}_{i+1}^{n^{i}_{} n^{i}_{}  q c}\). To reduce the information loss by the max-pooling operation, we conduct the following operations including a lightweight cross-attention:

\[}_{i+1}=^{}_{i+1}+ (^{}_{i+1}_{})(_{i +1}_{})^{T}}{})(_{i+1}_{ })_{}\] (2) \[}_{i}=_{i}+}_{i+1},\] (3)

where \(_{},_{},_{} ^{c d}\), and \(_{}^{d c}\)are learnable parameters, and \(d\) is the embedding dimension. In Equation (3), a pooled feature \(^{}_{i+1}\) corresponds to a query and the original feature, \(_{i+1}\), works as a key and a value. The layer normalization is omitted for simplicity of the expression. We feed \(}_{i}\) to LLMs to generate the language responses. Note that our method maintains the original complexity of LLMs, despite considering multiple scales in practice, because the feature pyramid structure aggregates them into the initial local scale of visual features generated by SAC.

We assume that well-compressed features retain essential information necessary for the reconstruction of the original features. After obtaining the pooled features, based on this assumption, we introduce a small decoder network, used only for training, to reconstruct the original features from the pooled features. The decoder is trained with the mean squared error (MSE) loss between the reconstructed and original features, which is given by

\[_{}(}_{i+1},_{i+1})=[ (r(}_{i+1})-(_{i+1}))^{2}],\] (4)

where \(r()\) is an MLP-based reconstruction network and \(()\) indicates a stop-gradient operation preventing the collapse in training. By the MSE loss, we guide the model to retain important visual details while reducing feature dimensionality. The final objective function is given by

\[_{}=_{}+_{ },\] (5)

where \(\) is the weight for the balance between two terms.

Our approach is similar to pooling-based methods such as MViT  and MViT-v2 , which construct attention mechanisms utilizing pooled features as keys and values to build efficient ViT variants . However, unlike these methods, we use pooled features as queries to reduce query size rather than optimizing attention mechanisms themselves.

Our cross-attentive pooling can be seen as a form of resampler  that reduces spatial dimensionality. In this interpretation, the pooled features, \(^{}_{i+1}\), act as the query tokens for learning. Unlike traditional query-based resamplers that require a new set of trainable query vectors, our method uses pooled features, which are more effective for resampling than randomly initialized query vectors, as discussed further in Section 4.4.

Figure 2: Illustration of the Hierarchical Visual Feature Aggregation (HVFA) module. (Left) HVFA aggregates high-resolution visual features to low-resolution features leveraging feature pyramid structure. (Right) In cross-attentive pooling, each sub-image-feature attends to all of the fine-grained visual features, compressing and preserving more detailed information.

### Relative Text-Position Prediction Task

Another key challenge in document understanding is learning to read text using layout information. Although  trains models to read entire document text, this approach entails significant computational challenges and information losses due to text truncation caused by the input capacity of LLMs. To address these limitations, we introduce two novel tasks: Reading Partial Text (RPT) and Predicting Text Position (PTP). RPT focuses on reading specific text segments at given positions, while PTP aims to predict the positions of given text segments. These tasks facilitate enhanced layout understanding with reduced computational cost.

Suppose that we can access full document text, represented by a sequence of tokens and we adopt a standard reading order of text (top-to-bottom, left-to-right). For the RPT task, we randomly select one of three types: 1) _"first"_: reading up to \(p_{end}\%\) of the text, 2) _"middle"_: reading from \(p_{start}\%\) to \(p_{end}\%\) of the text, and 3) _"last"_: reading from \(p_{start}\%\) to the end. We also sample an instruction template for the selected type, where the instruction template examples are presented in Table 1 and the full list is available in Appendix I. We then compute the maximum text coverage, \(c_{}\), to mitigate text truncation, which is given by

\[c_{}=(1.0,l_{}/l),\] (6)

where \(l\) is the length of the tokenized text and \(l_{}\) is the maximum sequence length acceptable by LLMs.

We set a threshold for the minimum coverage as a hyperparameter, \(c_{}\), to ensure that sufficient text is read. The range for reading, denoted by \(t_{}\), is given by

\[t_{}=c_{}&} c_{ }$}\\ (c_{},c_{})&,\] (7)

where \((a,b)\) denotes a uniform sampling from an interval \((a,b)\). Then, the positions to predict are expressed as follows:

\[(p_{},p_{})=(0,\ t_{})&\\ (p^{}_{},\ p^{}_{}+t_{})&\\ (100-t_{},100)&.\] (8)

where \(p^{}_{start}=(0,100-t_{})\).

For the PTP task, given a segment of text, the model aims to infer its relative position within the whole text. We determine text segments and their relative positions using the same process as in the RPT task. Through diverse training examples, the model learns to understand spatial relationships between text segments and other components in a document.

## 4 Experiments

### Datasets and Evaluation Metrics

We utilize document instruction dataset corpora for training, following . The training dataset includes various types of document images, including tables, charts, natural images, and web

   Task & Instruction Templates \\  RPT (first) & Human: What’s in the first 30\% of the image text? AI: {corresponding texts}, \\  & Human: Identify words from the first 15\% of the image text. AI: {corresponding texts}. \\  RPT (middle) & Human: What are the words located between 10\% and 55\% of the text in the image? AI: {corresponding texts}. \\  & Human: List words found between 20\% and 40\% in the image text. AI: {corresponding texts}. \\  RPT (last) & Human: Identify words from the last 16\% of the image text. AI: {corresponding texts}. \\  & Human: Which words make up the last 40\% of the text in the image? AI: {corresponding texts}. \\  PTP & Human: Specify the relative position within the image where {query texts} is found. AI: 15\%-30\%. \\  & Human: Where is the text {query texts} located within the image? AI: 40\%-80\%. \\   

Table 1: Examples for Relative Text-Position Prediction Task. Refer to Appendix I for the full list.

page screenshots. The datasets used are DocVQA , InfographicsVQA , DeepForm , KleisterCharity , WikiTableQuestions , TabFact , ChartQA , VisualMRC , TextVQA , and TextCaps . The combined dataset comprises approximately 650K image-instruction pairs. For more details about the datasets, please refer to Appendix E.

We evaluate our model on the test splits of each dataset. For DocVQA and InfoVQA, we employ the ANLS score , while we adopt the F1 score for DeepForm and KLC. The performance on WTQ, TabFact, and TextVQA is measured using accuracy, whereas ChartQA utilizes relaxed accuracy . The metric for TextCaps and VisualMRC is the CIDEr score . Evaluations for TextVQA and TextCaps are conducted on their respective official challenge websites.

### Implementation Details

We conduct experiments on two pretrained resampler-based MLLMs: BLIP-2-OPT-2.7B  and mPLUG-Owl-7B . We utilize LoRA  to fine-tune the language model efficiently while keeping the vision encoder frozen. For the BLIP-2-based model, we freeze the resampler and apply LoRA, whereas for the mPLUG-Owl-based model, we train the resampler to ensure a fair comparison with . Regarding the SAC, we set the maximum number of sub-images to 9 for the BLIP-2-based model and 20 for the mPLUG-Owl-based model. Refer to Appendix D for more details.

### Quantitative Results

We compare our framework to other OCR-free baselines, including document-specific pretraining approaches [16; 17; 18] for completeness. Given that previous methods utilize varying numbers of model parameters, trainable parameters, and training data, we provide the detailed configurations in Table 2. It is important to note that our comparisons are made with OCR-free methods based on comparable MLLMs in terms of model size and dataset scale. Table 3 presents the overall results of the proposed algorithm across 10 document understanding benchmarks. When integrated with both BLIP-2 and mPLUG-Owl, our approach consistently outperforms UReader  by a significant margin across all benchmarks. Among MLLM-based methods, our framework outperforms Qwen

   Method & \# Model Params & \# Trainable Params & \# Pretraining Data & \# Fine-tuning data \\  _Document-specific Pretraining_ & & & & \\  Dessurt  & 127M & 127M & 11M & Task-specific \\ Donut  & 143M & 143M & 13M & Task-specific \\ Pix2Struct\({}_{Base}\) & 282M & 282M & 80M & Task-specific \\ Pix2Struct\({}_{Large}\) & 1.3B & 1.3B & 80M & Task-specific \\  _MLLM-based Instruction Tuning_ & & & & \\  Qwen-VL  & 9.6B & 207M & 1.4B+76.8M & Task-specific \\ Monkey  & 9.8B & 207M & 1.4B+76.8M & 1.44M \\  BLIP-2-OPT-2.7B + UReader  & 3.8B & 8M & 129M & 650K \\ BLIP-2-OPT-2.7B + Ours & 3.8B & 14M & 129M & 650K \\  mPLUG-Owl-7B + UReader  & 7.2B & 86M & 1.1B & 650K \\ mPLUG-Owl-7B + Ours & 7.2B & 96M & 1.1B & 650K \\   

Table 2: Configurations of OCR-free document understanding baselines.

   Method &  \\  _Document-specific Pretraining_ & & & & & & & & & \\  Dessurt  & 63.2 & & & & & & & & \\ Donut  & 67.5 & 11.6 & 300 & 18.8 & 54.6 & 41.8 & 93.91 & 43.5 & 74.4 \\ Pix2Struct\({}_{Base}\) & 72.1 & 38.2 & & & & & & & & \\ Pix2Struct\({}_{Large}\) & 76.6 & 40.0 & & & & & & & & \\  _MLLM-based Instruction Tuning_ & & & & & & & & & \\  Qwen-VL  & 65.1 & 35.4 & 4.1 & 15.9 & 21.6 & & **65.7** & – & 63.8 & – \\ Monkey  & 66.5 & 36.1 & 40.6 & 32.8 & 25.3 & – & 65.1 & – & **67.6** & – \\  BLIP-2-OPT-2.7B + UReader  & 38.7 & 22.9 & 5.6 & 18.3 & 17.4 & 58.5 & 37.1 & 214.3 & 43.2 & 126.3 \\ BLIP-2-OPT-2.7B + Ours & 51.4 & 29.6 & 14.6 & 23.8 & 21.2 & 59.9 & 50.4 & **228.7** & 57.3 & **135.2** \\  mPLUG-Owl-7B + UReader  & 65.4 & 42.2 & 49.5 & 32.8 & 29.4 & 67.6 & 59.3 & 221.7 & 57.6 & 118.4 \\ mPLUG-Owl-7B + Ours & **72.7** & **45.9** & **53.0** & **36.7** & **34.5** & **68.2** & 63.3 & 226.4 & 59.2 & 123.1 \\   

Table 3: Performance comparison with other OCR-free document understanding baselines. The bold-faced numbers indicate the best performance in each column.

VL-based methods [28; 32] in most benchmarks, despite using a smaller set of pretraining data and smaller model. The results show that our model successfully transfer the knowledge of pretrained MLLMs to understand document samples.

### Ablation Study

We perform several ablation studies with the BLIP-2-based model to validate the effectiveness of each component of our approach.

Effect of each componentBased on the results in Table 4, we observe several key findings. First, our multi-scale hierarchical visual feature aggregation (MS + HVFA) significantly improves performance, by leveraging the benefits of multi-scale features. Second, incorporating a reconstruction layer to learn how to reconstruct (Recon) the original features from the pooled features aids in the information compression process, in most cases. Finally, the Relative Text-Position Prediction Task (RTPP) enhances overall performance by improving the model's text-reading ability.

Spatial dimensionality reduction methodsTable 5(a) compares different operations for reducing the spatial dimensions of finer-scale features within the HVFA module. Our cross-attentive pooling outperforms simple max-pooling, which suffers from significant information loss due to its non-learnable nature. We also compare our method against a stack of linear projection layers with the same parameter count. The results demonstrate that cross-attentive pooling achieves superior performance by learning more effective feature relationships through its attention mechanism, enabling context-aware information aggregation. Additionally, we investigate a local-attention-based cross-attention mechanism, where the cross-attention is restricted to each sub-image and its corresponding scaled-up features within the feature pyramid. Its slightly inferior results indicate that the pooling operation needs to aggregate information from various regions to be effective.

Query token initialization strategyOur cross-attentive pooling can be regarded as a special form of resampler since it refines high-resolution features while reducing spatial dimensionality. In this

   MS + HVFA & Recon & RTPP & DocVQA & InfoVQA & DeepForm & KLC & WTQ & TabFact & ChartQA & VisualMRC & TextVQA & TextCaps \\   & & & 35.17 & 20.34 & 4.14 & 18.50 & 15.36 & 53.37 & 31.76 & 201.39 & 43.20 & 126.34 \\  \(\) & & & 45.22 & 25.87 & 8.23 & 19.82 & 18.14 & 58.28 & 44.16 & 221.38 & 48.56 & 129.98 \\  & & \(\) & 40.18 & 25.19 & 6.49 & 18.97 & 17.80 & 56.85 & 38.88 & 219.74 & 47.54 & 128.39 \\  \(\) & \(\) & & 47.36 & 27.37 & 10.92 & 19.17 & 18.24 & 58.14 & 46.70 & 222.56 & 52.65 & 130.86 \\ \(\) & & \(\) & 50.46 & 28.48 & 13.18 & **23.82** & 20.06 & 59.83 & 49.48 & 226.65 & 56.04 & 134.06 \\  \(\) & \(\) & \(\) & **51.38** & **29.60** & **14.58** & 23.78 & **21.15** & **59.87** & **50.41** & **228.65** & **57.32** & **135.24** \\   

Table 4: Results of main ablation studies with the BLIP-2-based model. Note that the reconstruction loss (Recon) only comes with MS + HVFA.

   Variations &  & InfoVQA & DeepForm & KLC & WTQ & TabFact & ChartQA & VisualMRC & TextVQA & TextCaps \\   \\ Max Pooling-only & 43.23 & 25.44 & 7.88 & 19.32 & 18.14 & 58.82 & 44.36 & 222.49 & 45.91 & 126.34 \\ Linear Projectors & 46.11 & 26.44 & 10.62 & 21.32 & 18.74 & 58.52 & 46.62 & 224.74 & 48.27 & 129.68 \\ Cross-Attentive Pooling (Ours) & **51.38** & **29.60** & **14.58** & **23.78** & 21.15 & **59.87** & **50.41** & 228.65 & **57.32** & **135.24** \\ Cross-Local-Attentive Pooling & 50.32 & 28.60 & 14.38 & 23.56 & **22.15** & 59.66 & 50.22 & **228.82** & 56.78 & 134.34 \\   \\ Random Vectors & 48.07 & 27.34 & 11.40 & 21.82 & 19.85 & 58.42 & 48.01 & 223.37 & 53.48 & 130.22 \\ Max-Pooled Features (Ours) & **51.38** & **29.60** & **14.58** & **23.78** & **21.15** & **59.87** & **50.41** & **228.65** & **57.32** & **135.24** \\   \\ w/ stopgrad & 49.65 & 26.80 & 12.16 & 19.73 & 19.14 & 59.11 & 48.85 & 223.42 & 55.24 & 128.44 \\ w/ stopgrad (Ours) & **51.38** & **29.60** & **14.58** & **23.78** & **21.15** & **59.87** & **50.41** & **228.65** & **57.32** & **135.24** \\   \\ \(=1.0\) & 49.90 & 28.51 & 14.41 & 22.75 & 20.13 & 59.03 & 49.76 & 225.51 & 56.79 & 133.03 \\ \(=0.1\) (Ours) & 51.38 & **29.60** & **14.58** & 23.78 & **21.15** & **59.87** & **50.41** & **228.65** & **57.32** & **135.24** \\ \(=0.01\) & **51.84** & 28.14 & 13.84 & **23.87** & 20.39 & 59.54 & 50.05 & 227.57 & 57.03 & 135.17 \\ \(=0\) & 50.46 & 28.48 & 13.18 & 23.82 & 20.06 & 59.83 & 49.48 & 226.65 & 56.04 & 134.06 \\   

Table 5: Ablation study on the variations of hierarchical visual feature aggregation techniques. We employ a BLIP-2-based model for experiments.

context, the pooled features, denoted as \(^{}_{i+1}\), serve as query tokens [13; 44] for the learning process. To explore this perspective, we compare our approach with randomly initialized queries of the same size as \(^{}_{i+1}\). As demonstrated in Table 5(b), using max-pooled features for query initialization yields superior results, even without tintroducing additional parameters for training.

Role of stop-gradientTable 5(c) presents the role of the "stop-gradient" operation in Equation (4), where the architectures and all hyperparameters remain unchanged. Empirically, \(_{}\) drops to zero at an early iteration without the stop-gradient operation due to the convergence at a trivial solution; it leads to a significant degradation in performance.

Impact of \(\) to balance the lossWe tested several different values of \(\) to determine the optimal balance for the final loss function, \(_{}\), in Equation (5). Results in Table 5(d) indicate that \(=0.1\) achieves the best performance. A value of \(=0.01\) also improves performance compared to \(=0\), whereas \(=1.0\) yields worse results than \(=0\) on some benchmarks. These findings suggest that, while \(_{}\) positively contributes by learning compressed features, excessively strong compression hampers the model's primary goal, extracting text-related features.

Effectiveness of relative text-position prediction taskTable 6 illustrates the effectiveness of RPT compared to RFT, implying that concentrating on key text segments guided by their relative positions enhances document understanding. Notably, RFT may lead to information loss due to text truncation, given the limited capacity of LLMs. Furthermore, PTP improves the performance of both RPT and RFT tasks, showing that predicting the relative positions of partial text strengthens the model's comprehension of document layout and content. This highlights the importance of considering text position in document understanding tasks.

### Complexity Analysis on Visual Input Scale

To analyze the trade-off between performance and computational cost, we compare variants of our model that process different scales of visual inputs: the first scale (\(S_{1}\)), the second scale (\(S_{2}\)), multiple scales (\(S_{1}+S_{2}\)), and multiple scales with HVFA (\(S_{1}+S_{2}\) w/ HVFA, ours). Figure 3(Left) presents the average benchmark scores and throughput for each model. The throughput is measured on a single NVIDIA Quadro RTX GPU using the largest possible batch size for each model. where the input size

   RFT  & RPT & PTP & DocVQA & InfoVQA & DeepForm & KLC & WTQ & TabFact & ChartQA & VisualMRC & TextVQA & TextCaps \\   & & & 47.36 & 27.37 & 10.92 & 19.17 & 18.24 & 56.14 & 43.88 & 222.56 & 52.65 & 130.86 \\  \(\) & & & 49.23 & 28.16 & 12.58 & 21.29 & 19.42 & 58.46 & 46.05 & 224.39 & 55.78 & 133.55 \\ \(\) & & \(\) & 50.62 & 29.49 & 12.55 & 22.88 & 20.51 & 59.28 & 48.41 & 226.55 & 57.19 & 134.44 \\   & \(\) & & 50.46 & 28.44 & **14.88** & 22.55 & 20.88 & 59.12 & 48.28 & 226.56 & 56.91 & 134.92 \\  & \(\) & \(\) & **51.38** & **29.60** & 14.58 & **23.78** & **21.15** & **59.87** & **50.41** & **228.65** & **57.32** & **135.14** \\   

Table 6: Ablation study on text reading tasks. We conduct our ablation study with the BLIP-2-based model. The bold-faced numbers indicate the best performance in each column.

Figure 3: Performance analysis on visual and textual inputs. (Left) Impact of visual input scale on model performance. We compare four variants of our model: with the first scale (\(S_{1}\)), with the second scale (\(S_{2}\)), with multiple scales (\(S_{1}+S_{2}\)), and with multiple scales with HVFA (\(S_{1}+S_{2}\) w/ HVFA, ours). (Right) Impact of truncated text in the text reading task on model performance by varying sequence length capacity of LLM.

of the visual encoder is \(224 224\). The results indicate that incorporating a finer scale significantly improves performance, albeit with increased computational cost (\(S_{1}\) vs. \(S_{2}\)). Additionally, combining features from multiple scales boosts performance over single-scale features, though at the expense of higher computational load (\(S_{1}\), \(S_{2}\) vs. \(S_{1}+S_{2}\)). Finally, our method efficiently integrates finer-scale features into a coarser scale, achieving a balance between performance gains and computational demands (\(S_{1}+S_{2}\) vs. \(S_{1}+S_{2}\) w/ HVFA).

### Analysis on Text Reading Task

To demonstrate the effectiveness and robustness of RPT against truncation, we conducted experiments varying the maximum sequence length of LLMs during training. Figure 3(Right) presents the average benchmark scores and the proportion of truncated text data across the entire dataset. RPT consistently outperforms RFT in all settings, indicating that RPT is robust to the capacity constraints of LLMs. The design of RPT is helpful for mitigating truncation issues while RFT suffers from truncation of text reading data. Notably, with a maximum sequence length of 256, approximately 33.5% of the dataset consists of truncated texts, which is a considerable amount. Consequently, model performance declines even further compared to training without any text-reading task, as represented by the red dotted line in Figure 3(Right). Our approach ensures reliable data quality while incorporating stochasticity and positional information, contributing to its effectiveness. These results imply that our partial text reading task can inspire further research on knowledge distillation and the development of compact models for OCR-related tasks.

### Visualization of Results

Figure 4 illustrates question-answer pairs from the DocVQA  and InfographicVQA  datasets for comparisons between our framework and UReader . While both models can read large text, our model is more powerful in identifying small text than UReader. This highlights our model's strength in effectively handling text at multiple scales. Furthermore, our method delivers more accurate answers for questions requiring precise reading comprehension. For instance, to answer the question "Which meeting in December has the location not finalized yet?", the model needs to accurately read the text "To be announced" as demonstrated in the rightmost example in Figure 4.

## 5 Conclusion

We present a novel OCR-free document understanding framework that leverages a pretrained large-scale multi-modal foundation model. Our approach integrates multi-scale visual features to accommodate diverse font sizes within document images. To manage the increasing costs for detailed visual inputs, we propose the Hierarchical Visual Feature Aggregation (HVFA) module with cross-attentive pooling, effectively balancing information retention and computational efficiency while adapting to varying document sizes. Moreover, our framework introduces a novel instruction tuning task to enhance the model's text-reading ability by incorporating positional information within images. Extensive experimentation demonstrates the efficacy of our framework, achieving strong performance across a range of document understanding tasks.

Figure 4: Our method vs. UReader  on DocVQA  and InfographicVQA .