# Diversity Is Not All You Need: Training A Robust Cooperative Agent Needs Specialist Partners

Rujikorn Charakorn

VISTEC

rujikorn.c_s19@vistec.ac.th

Poramate Manoonpong

VISTEC, SDU

poramate.m@vistec.ac.th

Nat Dilokthanakul

KMITL

nat.di@kmitl.ac.th

###### Abstract

Partner diversity is known to be crucial for training a robust generalist cooperative agent. In this paper, we show that partner specialization, in addition to diversity, is crucial for the robustness of a downstream generalist agent. We propose a principled method for quantifying both the diversity and specialization of a partner population based on the concept of mutual information. Then, we observe that the recently proposed cross-play minimization (XP-min) technique produces diverse and specialized partners. However, the generated partners are _overfit_, reducing their usefulness as training partners. To address this, we propose simple methods, based on reinforcement learning and supervised learning, for _extracting_ the diverse and specialized behaviors of XP-min generated partners but not their overfitness. We demonstrate empirically that the proposed method effectively removes overfitness, and extracted populations produce more robust generalist agents compared to the source XP-min populations. This result highlights the importance of considering both the diversity and specialization of training partners while carefully managing their overfitness for training robust cooperative generalists.

## 1 Introduction

Multi-agent reinforcement learning (MARL) algorithms can generate a team of agents for solving complex cooperative tasks [1; 2]. However, these agents tend to _overfit_ to teammates seen during training and cannot cooperate effectively with unseen team members [3; 4]. This problem is also known as the _ad-hoc teamwork problem_. A crucial aspect of building a robust cooperative (_generalist_) agent is the diversity of training partners [6; 7; 8; 9; 10]. Recent state-of-the-art partner generation methods utilize _cross-play minimization_ technique (XP-min) [11; 12; 13; 14; 15; 16] to produce diverse partners.

XP-min approaches generate partners that are behaviorally diverse by learning incompatible policies via some measure of incompatibility, e.g., incompatible with other agents in the same population [12; 14] or best response agents [15; 16]. Fundamentally, XP-min aims to maximize self-play (SP) return and minimize return of cross-play (XP) trajectories, in which policies from different teams interact. However, due to the nature of XP-min objective, generated partners are incentivized to learn to identify the current partner and use the partner's identity to decide to cooperate (maximize return) or sabotage (minimize return). This behavior is also known as _handshaking_[17; 18]. Importantly, _handshakes_--conventions used for handshaking--could be arbitrary and nonsensical, e.g., an agent will cooperate only if the partner moves in the north direction in the first timestep. **Handshaking behaviors are undesirable** if these partner agents were to be used for training a generalist agent, simply because they overfit to random handshakes established during training. Thus, handshaking is a form of overfitness, and we use the words "overfitness" and "handshaking" interchangeably.

The root cause of handshaking induced by XP-min is that the partners can learn to sabotage the game if they identify that the current interaction is an XP trajectory. Recently, the problem of handshaking behaviors has been tackled by [17; 18]. The core idea of these approaches is to regularize thediversified partners such that they still have high expected self-play (SP) return under XP trajectories, effectively _mixing_ the SP and XP experiences. That is, the partners should not sabotage the game as they have to maximize the return even under XP trajectories. Therefore, the partners are no longer incentivized to learn handshakes, and these partners should behave _in good faith_ regardless of which partner they interact with. We refer to this class of approaches as _mixed-play regularization_ (MP-reg).

Sarkar et al.  find that it is possible for MP-reg to _overcorrect_ the XP-min objective, resulting in a less diverse partner population. We hypothesize that, even with the right amount of experience mixing in MP-reg, the produced partners will have less _specialization_--the quality of an agent capable of solving the problem only in specific ways. We refer to this problem as _loss of specialization_ (**LOS**).

We hypothesize that a generalist agent who trains with diverse but unspecialized partners will not be exposed to diverse experiences. That is because, during training, the generalist agent can pick and choose specific solutions that give higher expected returns, ignoring other potential solutions in the environment. Furthermore, the generalist agent is not required to understand the partner's intention when the partners are willing to cooperate regardless of the solution the generalist agent attempts. Thus, we posit that the _desiderata_ of training partners are not only **diversity** but also **specialization**.

Our main insight is that _XP-min partners are not only diverse but also have rich specialized behaviors that are useful for training a generalist agent_. So, selectively using diversity and specialization of XP-min partners while reducing handshaking could prove valuable for training a robust cooperative agent. While MP-reg could increase the diversity and reduce the overfitness of generated partners, it comes with the hypothesized **LOS** problem. Hence, we are interested in an alternative method that satisfies both desiderata of good training partners. We propose a simple yet effective method to transfer the knowledge to another set of newly initialized partners via reinforcement learning (RL). Instead of reducing handshaking from XP-min partners via regularization, we could specifically _extract_ diverse and specialized knowledge from them _after_ the training process. Importantly, we aim to maintain their diversity and specialization but not the sabotaging behaviors. We call this method _specialization transfer via reinforcement learning_ (SpecTRL). Furthermore, we present SpecTRL DAgger--a combination of SpecTRL and DAgger --to stabilize the distillation process and better maintain the diversity of the source population. **Our key contributions** are as follows:

* A set of measures that quantify the quality of a training population as a whole: **diversity**, **specialization**, **overfitness** (Section 3).
* Investigation of the interaction between the proposed measures and the robustness of downstream generalist agents. We find that overfitting and lower specialization have a detrimental impact on the robustness of downstream generalist agents (Section 4).
* A novel method SpecTRL and SpecTRL DAgger that aims to transfer diversity and specialization while eliminating overfitness of XP-min partners (Section 5). Finally, we show that SpecTRL DAgger effectively reduces the number of incapable distilled partners (Section 6).

## 2 Preliminaries

We focus on cooperative environments described as decentralized partially observable Markov decision processes (Dec-POMDP, Bernstein et al. ). An N-player Dec-POMDP is defined by a tuple \((,\{^{i}\},\{^{i}\},T,O,R,,H)\), where \(\) is the global **state space**. \(^{i}^{i}\) and \(^{i}^{i}\) are the **joint-action** and **joint-observation spaces** of all players. The probability of the next state conditioned on a state and a joint action is given by the **transition function**\(T\). Players' local observations are partial views of the current state given by the **observation function**\(O\). The **reward function**\(R\) outputs a global reward, \(\) is the **discount factor**, and \(H\) is the **horizon length**.

At timestep \(t\), each player observes \(o_{t}^{i}\), a partial view of the global state \(s_{t}\), and outputs an action \(a_{t}^{i}^{i}(|_{t}^{i})\), where \(_{t}^{i}=\{o_{0}^{i},a_{0}^{i},r_{0},...,o_{t}^{i}\}\) is the local history of the trajectory of player \(i\). Collectively, all players produce a joint action \(_{t}=_{i}^{i}\), where \(\) is the joint policy. The global reward is given as \(r_{t}=R(s_{t},_{t})\). The return of a joint trajectory \(()^{H}\) is \(G()=_{t=0}^{H}^{t}r_{t}\). The expected return of a joint policy \(\) is \(J()=_{()}[G()]\), where \(()\) is the distribution of joint trajectories under a joint policy \(\). We use bold letters to represent joint quantities. We use subscripts and superscripts to indicate different joint policies and players, respectively. We use \(^{-i}\) to represent all other agents _except_\(i\), i.e., \(_{A}=\{_{A}^{i},_{A}^{-i}\}\). We define the expectedreturn of self-play (SP) trajectories as \(J_{}(_{A}):=J(_{A}^{i},_{A}^{-i})\) and the expected return of cross-play (XP) between two joint policies as \(J_{}(_{A},_{B}):=_{i=1}^{i=N}[J( _{A}^{i},_{B}^{-i})+J(_{B}^{i},_{A}^{-i})]\) and the expected return of an ad-hoc team between a generalist policy \(_{G}\) and a joint policy \(\) as \(J_{}(_{G},)=_{i=1}^{i=N}J(_{G},^ {-i})\). Note that \(_{G}\) is not a joint policy and does not have any specific role assigned to it. So, it must cooperate with other agents by filling in the missing role.

We use the word _"partner"_ for policies that are used for training or testing a _generalist_ agent. Our main interest is training a robust generalist agent \(_{G}\) that can cooperate with unseen partners. Formally, given a population of training partners \(\), the training objective of \(_{G}\) is

\[_{_{G}}J_{}(_{G};):=_{_{p} }[J_{}(_{G},_{P})]\] (1)

In this work, we prioritize task completion over literal task performance. Thus, we describe the robustness of \(_{G}\) as

\[}(_{G},_{}) :=(\{(_{G},_{T}^{-i})_{T }_{}\}),\] (2) \[() :=_{()}[()],\] (3)

where \(()\) gives the harmonic mean of a set of scalars, \(()\) is the success rate of \(\) and S, identifies whether a joint trajectory is successful.

Cross-Play Minimization (XP-min):XP-min technique has been recently proposed to generate diverse training partners . Here, we describe the variant used by Charakorn et al. , by which the partners learn to be incompatible with others in the same population:

\[_{_{A}}J_{}}(_{A}, ) =}(_{A})}^{}}J_{}(_{A}, _{+})}^{};\;_{A},\] (4) \[_{+} =*{argmax}_{_{+}(\{ _{A}\})}J_{}(_{A},_{+}),\] (5)

where \(_{+}\) is the policy that is the most compatible with \(_{A}\). In short, the XP-min objective optimizes a set of joint policies that are capable while being _incompatible_ with other policies.

Mixed-Play Regularization (MP-reg):MP-reg aims to solve a fundamental problem of XP-min, where Eq. 4 incentivizes the partners to overfit or learn handshakes. Here, we briefly explain the MP-reg objective and how it helps reduce overfitness following the description of CoMeDi .

In addition to SP and XP episodes, MP-reg introduces mixed-play (MP) episodes, which have two stages: state mixing and self-play. In state mixing, the first \(t^{}\) timesteps of an episode will evolve according to a cross-play policy, e.g., \(_{}=(_{A}^{i},_{+}^{-i})\) or \(_{}=(_{+}^{i},_{-}^{-i})\). Then, a typical SP rollout happens right after the state mixing. The training objective of MP-reg is to maximize the SP return starting from \(s_{t^{}}\) produced by \(_{}\): \(J_{}(_{A},_{+})\). Intuitively, this objective regularizes XP-min agents such that they do not "sabotage" the game when interacting under XP trajectories as they still have to maximize SP return after \(t^{}\) timesteps. The MP-reg objective of each \(_{A}\) is

\[_{_{A}}J_{}}(_{A},)= }(_{A})}^{}}J_{}(_{A}, _{+})}^{}}(_{A},_ {+})}^{};\;_{A},\] (6)

Mutual Information (MI) Objective:LIPO  uses both XP-min and MI to generate diverse partners. Here, we briefly describe how MI objective can be used in XP-min training . A joint policy \(\) is a _latent-conditioned_ policy with the form \((\,|\,)=_{ p()}_{i}^{i }(a^{i}|^{i},z^{i})\), where \(=\{z^{i}\}\) is a joint latent variable and \(p()\) is the prior distribution of \(\). The MI objective is to maximize the mutual information between the observation-action pair and the latent variable of each policy: \(I(\{o^{i},a^{i}\};z^{i})\). Since the objective is intractable, we then optimize the variational lower bound of the objective:

\[I(\{o^{i},a^{i}\};z^{i}) H(z^{i})+_{z^{i},(o^{i},a^{i})}[ q_{ _{A}}(z^{i}|o^{i},a^{i})],\] (7)

where \(H(z^{i})\) is the entropy of the random variable \(z^{i}\), and \(q_{}\) is a neural network approximating the true posterior \(p(z^{i}|\{o^{i},a^{i}\})\).

Quantifying Partner Qualities

In this section, we present three measures that quantify the different qualities of a population of partners. The purpose of these measures is to allow us to compare populations and predict which ones are better at producing more robust generalists. First, we describe the characteristics of a joint trajectory and a joint policy as follows. Given a function \(f:\), we can compute the **characteristic of a joint trajectory \(\)** as \(x=f()\), where \(\) is the _characteristic space_. For instance, \(x\) could represent the frequencies of certain events under a joint trajectory \(\). Consequently, we can think of the distribution of a random variable \(X\) under \(\), \(P(X=)\), as the **characteristic of a joint policy \(\)**. That is, the probability of observing \(x\), \(P(X=x=)\), depends on the joint policy \(\). This approach allows us to utilize domain knowledge through a well-crafted function \(f\) for better interpretability or even learn the function when expert knowledge is unavailable. Next, we present the first two partner qualities that affect the robustness of downstream generalists based on the concept of the mutual information between \(X\) and \(\): **diversity** and **specialization**.

We define the **diversity** of a population of partners \(\) as how _diverse_ the random variable \(X\) distributed under \(\). Then, the diversity of \(X\) under \(\) can be calculated using the concept of entropy:

\[}():=H(X)=-_{x}P(x)P(x)=-_{x} _{}[P(x|)](_{}[P(x|)]),\] (8)

We can see that \(}()\) has direct implication to the training distribution (Eq. 1) and, consequently, the robustness of the generalist agent (Eq. 2). For instance, if the training population \(_{}\) is characteristically diverse (i.e., \(}(_{})\) is high), it is more likely that some characteristics in \(_{}\) will be covered by the training set of the generalists.

Diversity of \(\) is not the only aspect that affects the robustness of a downstream generalist agent. We expect that another quality that affects the robustness of the generalist agent is the **specialization** of the training partners. We propose to measure the specialization of \(\) by how _single-minded_ each partner \(\) is. Mathematically, we can compute the specialization of a joint policy as the negative entropy of the characteristic of that joint policy: \(-H(X=)\). Then, we can calculate the specialization of a population by taking the average specialization of the joint policies:

\[}(): =-_{}\ [H(X=)]=-H(X),\] (9) \[H(X=) =-_{x}P(x|)P(x|)\] (10)

We argue that specialization directly impacts the robustness of the generalist agent based on the following rationale. For a generalist agent to effectively cooperate with specialized partners (\(}(_{})\) is high), it has to understand the partner's intention and learn various strategies because each partner is a specialist who solves the task in specific ways. In contrast, if the partners are _not_ specialized (\(}(_{})\) is low), the generalist no longer needs to understand the intention of the training partner and find the easiest or the most rewarding path to complete the task.

Another crucial quality of training partners is their **overfitness**. We propose a way to quantify the overfitness of policies in a population by evaluating them against an **oracle generalist**\(_{G}^{*}\), which has been trained with a set of **oracle specialists**\(_{S}^{*}\). The oracle specialists in \(_{S}^{*}\) are assumed to be collectively diverse, individually specialized, and do not use handshakes. This means that \(_{G}^{*}\) is capable of solving the task in different ways thanks to the diversity and specialization of the oracle specialists. However, \(_{G}^{*}\) will not be able to cooperate with a partner \(^{-i}\) if the partner either uses handshakes or is overfit. Thus, we can use \(_{G}^{*}\) as an overfitness evaluator of generated partners. Mathematically, we define the overfitness of a population as

\[}()=1-R(_{G}^{*};)\] (11)

Capable partners with handshaking and overfitness (\(}()\) is high) are not desirable because they cannot cooperate even with the oracle generalist, which implies that they can only cooperate only if the entire team behaves under specific state-action distribution. As a result, a downstream generalist could be _underfit_ because it might not discover the specific handshakes used by the partners.

## 4 Understanding Effects of Specialization and Overfitness

In this section, we aim to explore the relationship between the specialization and overfitness of a population and the robustness of downstream generalist agents. Thus, we perform a control 

[MISSING_PAGE_FAIL:5]

Table 1 shows that the three control populations have comparable diversity, while \(^{*}_{}\) and \(^{*}_{}\) have increased overfitness and reduced specialization, respectively. For each population, The right-most column shows the performance of generalist agents trained with each population when evaluated against \(_{}\). As expected, \(^{*}_{}\) and \(^{*}_{}\) produce much less robust generalists compare to \(^{*}_{S}\).

We can see the root cause of the lower robustness of generalists trained with \(^{*}_{}\) in the bottom subplot of Fig. 4. We can see that the recipe distribution during the training of generalist agents is less diverse, condensing at recipe R6 (the error bars represent the standard deviations over three random seeds). Furthermore, despite learning to mostly use R5 and R6, the generalists cannot cooperate well even with specialists that prefer R5 and R6 (see Appendix D for details). In Fig. 4, we can see that the generalists _overfit_ to the optimal ways for completing the most rewarding recipes (R5 and R6), achieving even higher return than self-play agents thanks to generality and flexibility of training partners in \(^{*}_{}\) (i.e., low \(}(^{*}_{})\)). As a result, they are not required to have partner understanding capability, which is crucial for generalization. While \(^{*}_{}\) generate similar training recipe completion to \(^{*}_{S}\), the generalist agents are not as robust as the ones trained with \(^{*}_{S}\). The orange training curve in Fig. 4 suggests that the generalists trained with \(^{*}_{}\) is _underfit_. Thus, it has lower performance when matched with test partners. From these results, we conclude that **unspecialized or overfit partners are not good training partners**.

## 5 Specialization Transfer

In Table 1, we see that \(_{}\) has moderate diversity and high specialization but also high overfitness. This observation suggests that an \(\) population can potentially be a desirable training population _if the overfitness is reduced_. Therefore, we seek methods to reduce the overfitness while maintaining the diversity and specialization of an \(\) population. We propose \(\) and \(\)\(\) to further reduce the overfitness **after** the training process of \(\) agents.

\(\) distills the knowledge from a source population \(\) into a distilled population \(^{}\) with the same number of agents using reinforcement learning. Specifically, each agent \(_{A^{}}^{}\) distills the knowledge of a reference agent \(_{A}\) with the reward maximization objective:

\[J_{}(_{A^{}})=_{i=1}^{i=N}J(^{i}_{A^{ }},^{-i}_{A})\] (12)

Intuitively, distilling via the reward maximization objective (Eq. 12) incentivizes the distilled partners to "_nudge_" the source partners to perform cooperative behaviors (which gives high return) and away from their sabotaging behaviors (which gives low return). Additionally, when the source partners cooperate, they do so in specialized ways as they have already learned specialized behaviors with \(\). This means that the distilled partners must learn the preferences and specialization of the \(\) partners but **not** their sabotaging behaviors.

\(\) can be further combined with \(\), using \(\) partners as experts, resulting in a knowledge transfer method that utilizes both RL and supervised learning. This combination is especially beneficial when \(\) partners heavily utilize complex handshakes that are unlikely to

Figure 4: The average training returns of generalists trained with different oracle populations.

Figure 5: An overview diagram showing the steps in the training pipeline.

be discovered by random exploration. We refer to this approach as SpecTRL DAgger:

\[J_{}(_{A^{}}) =_{i=1}^{i=N}J(_{A^{}}^{i},_{A}^{-i})+_{ }_{}(_{A^{}}^{i}),\] (13) \[_{}(_{A^{}}^{i}) =-_{_{t}^{i}(_{A^{}}^{i},_{A}^{- i})}_{A^{}}^{i}(_{t}^{i}|_{t}^{i}),\] (14)

where \(_{t}^{i}\) is the expert action, given by the source policy \(_{A}^{i}\), and \(_{} 0\). The auxiliary supervised objective Eq. 14 is useful for stabilizing the distillation process by directly transferring the knowledge from the source policy, unlike SpecTRL that fully relies on random exploration of RL training. A primary assumption of DAgger is that it requires access to experts' policies.

## 6 Experiments

We aim to empirically investigate how different training objectives (XP-min, MI, MP-reg, SpecTRL, and SpecTRL DAgger) affect the qualities of the generated partners. We use our implementation of recently proposed CoMeDi  to represent the MP-reg approach. We also include self-play (SP) as one of our baselines (see Appendix E for more details). Note that partner qualities presented in Section 3 do not depend on the size of populations of interest. In theory, we can compare populations with different sizes. For a fair comparison, we compare populations of the same size (\(||=8\)). It is possible that some generated partners are incapable due to training instability or unsuccessful

  
**Populations** & \(()\) & \(()\) & \(()\) & \((_{G},_{})\) \\  *S & \(1.79\) & \(-0.01\) & \(0.06\) & \(0.82 0.05\) \\ *Overfit & \(1.78\) & \(0.00\) & \(0.35\) & \(0.74 0.02\) \\ *Unspec & \(1.72\) & \(-1.64\) & \(0.01\) & \(0.49 0.08\) \\   & \(1.79\) & \(-0.01\) & \(0.16\) & \(0.78 0.01\) \\  & \(()\) & \(()\) & \(()\) & \(()\) \\   

Table 2: Qualities of oracle partner populations and their respective downstream generalists’ robustness. Green arrows (\(\), \(\)), red arrows (\(\)), and approximation symbol (\(\)) indicate the improvement, degradation, and no significant changes over the source population (written between brackets), respectively. We only use the arrows when the standard deviations do not overlap. \(\) represents the standard deviation over three random seeds.

  
**Populations** & \(()\) & \(()\) & \(()\) & \((_{G},_{})\) \\  SP & \(1.08 0.05\) & \(-0.49 0.12\) & \(0.08 0.02\) & \(0.18 0.08\) \\ XP-min & \(1.31 0.08\) & \(-0.13 0.05\) & \(0.51 0.05\) & \(0.56 0.07\) \\   & \(1.48 0.03\) & \(-0.38 0.16\) & \(0.47 0.04\) & \(0.44 0.04\) \\  & \(()\) & \(()\) & \(()\) & \(()\) \\
[XP-min] + MI & \(1.63 0.03\) & \(-0.63 0.12\) & \(0.54 0.06\) & \(0.61 0.02\) \\  & \(()\) & \(()\) & \(()\) & \(()\) \\
[XP-min] + MI + NP-reg & \(1.28 0.05\) & \(-0.68 0.21\) & \(0.34 0.05\) & \(0.55 0.04\) \\  & \(()\) & \(()\) & \(()\) & \(()\) \\
[XP-min] + SpecTRL & \(1.21 0.10\) & \(-0.11 0.08\) & \(0.25 0.02\) & \(0.58 0.08\) \\  & \(()\) & \(()\) & \(()\) & \(()\) \\
[XP-min] + SpecTRL DAgger & \(1.32 0.09\) & \(-0.14 0.04\) & \(0.29 0.06\) & \(0.62 0.01\) \\  & \(()\) & \(()\) & \(()\) & \(()\) \\   & \(1.44 0.04\) & \(-0.45 0.06\) & \(0.20 0.06\) & \(0.62 0.01\) \\  & \(()\) & \(()\) & \(()\) & \(()\) \\
[XP-min + MI] + SpecTRL DAgger & \(1.60 0.02\) & \(-0.56 0.08\) & \(0.30 0.03\) & \(0.64 0.01\) \\  & \(()\) & \(()\) & \(()\) & \(()\) \\   & \(1.56 0.02\) & \(-0.56 0.09\) & \(0.27 0.02\) & \(0.64 0.11\) \\  & \(()\) & \(()\) & \(()\) & \(()\) \\   

Table 3: Qualities of learned populations and their respective downstream generalists’ robustness.

distillation. If that is the case, the proposed diversity and specialization measures are undefined for incapable partners. So, we remove those partners from diversity and specialization calculation while still keeping them in their population for training downstream generalist agents. Therefore, for a fair comparison, we always incorporate _Fictitious Co-Play_ (FCP)  when training a generalist. FCP adds _weaker_ partners to a training population, including random and incapable ones, by using past checkpoints of the partners. For populations related to oracle specialists (marked with \(*\)), they have a population size of 18, and we do not use FCP as they only serve as references.

Table 2 shows the effectiveness of SpecTRL at reducing the overfitness of the overfit oracle specialists. Table 3 shows the qualities of learned populations and the robustness of corresponding downstream generalists. We also visualize the populations in the _partner quality landscape_ in Fig. 6, allowing us to visually compare populations generated by SpecTRL, SpecTRL DAgger, and MP-reg.

**SpecTRL and SpecTRL DAgger Consistently Reduce Overfitness:**SpecTRL consistently reduces overfitness of the input population as intended. It successfully reduces the overfitness of the overfit oracle specialists, thus improving the robustness of generalists (see Table 2). However, SpecTRL significantly reduces diversity when used with XP-min + MI generated populations (see Table 3). It is likely because of unsuccessful distillation, resulting in incapable distilled partners. SpecTRL DAgger fixes this problem effectively (see Table 4). Thus, it maintains the diversity of the source population while reducing overfitness. Although the reduction in overfitness is smaller than SpecTRL, the robustness of downstream generalists is higher, thanks to the preserved diversity. Interestingly, SpecTRL seems to increase the specialization of the partners while

  
**Populations** & **Capable Partners** \\  XP-min & \(7.33 0.47\) \\ XP-min+SpecTRL & \(6.00 0.82\) \\ XP-min+SpecTRL DAgger & \(7.33 0.47\) \\  XP-min+MI + SpecTRL & \(8.00 0.00\) \\ XP-min+MI + SpecTRL & \(5.33 1.25\) \\ XP-min+MI + SpecTRL DAgger & \(8.00 0.00\) \\   

Table 4: The number of capable distilled partners when using SpecTRL and SpecTRL DAgger. Other populations do not contain incapable partners.

Figure 6: The partner quality landscape, representing partner qualities from Table 3 visually. The color bar represents population diversity. The arrows show how different approaches improve partners’ qualities. XP-min + MI + SpecTRL DAgger population is marked with \(\).

SpecTRL DAgger does not. We believe that the source partners might have multi-modal behaviors, but the distilled SpecTRL partners might not discover all the behavioral modes via random exploration. So, the SpecTRL partners become more single-minded. On the other hand, SpecTRL DAgger does not significantly increase specialization as the DAgger objective helps transfer multi-modal behaviors directly from the source partners through the imitation learning objective.

MP-reg and MI Increase Diversity but Lose Specialization:We can see that XP-min populations are much less diverse than the ones that incorporate either MP-reg or MI regularization during the training process. This result agrees with Charakorn et al.  and Sarkar et al.  that find MI and MP-reg to help increase the diversity of XP-min partners. Interestingly, we find that using both MP-reg and MI simultaneously do not yield a more diverse population. However, both regularization techniques significantly reduce the specialization of the generated partners. Therefore, despite the increased diversity, the robustness of downstream generalists does not increase as the specialization is also significantly reduced. This result confirms our hypothesis that adding a regularization during XP-min training also comes with the loss of specialization (**LOS**) problem.

We believe that the **LOS** problem of both regularizations has different root causes. MP-reg incentivizes the partners to complete the task despite not being aligned with their preferences, effectively regularizing agents from having strong preferences and reducing how single-minded they are. On the other hand, MI induces the generated partners to have multi-modal behaviors, which could correspond to different high-level behaviors, e.g., completing different recipes.

Repeated Distillation Does Not Reduce Overfitness Further:So far, we can see that SpecTRL DAgger is effective at reducing the overfitness of XP-min partners. This raises the question of whether repeated distillation could further reduce the overfitness. We investigate and find that repeating distillation does not further reduce overfitness (see the last row of Table 3). We hypothesize that the sabotaging behavior has already been significantly reduced in the first round of distillation and that SpecTRL DAgger is effective at removing sabotaging behavior but not other kinds of overfitness, e.g., state distribution overfitness, which remains in all populations as shown in Table 3. Therefore, repeating the distillation no longer reduces the overfitness.

## 7 Discussion

Although MP-reg and MI regularization methods have the **LOS** problem, they are still necessary for increasing the diversity of the XP-min agents. Theoretical understanding of how regularization during XP-min training changes their specialization would lead to better regularization techniques that improve partner qualities, which will be crucial for building a robust cooperative agent.

The calculation for diversity (Eq. 8) and specialization (Eq. 9) depends on the probability of each \(\) being drawn from its population. Thus, we can alter the diversity and specialization of a population by changing how the joint policies are drawn from the population. We believe it is possible to positively modify the diversity and specialization of a population by changing how \(\) are drawn. We leave this investigation for future work.

The overfitness of a population \(()\) presented in this paper does not separate handshakes and state-action distribution overfitness. Future work could explicitly decouple types of overfitness for further interpretability of the measure. We do not use any of the measures presented in this paper to diversify; rather, we use them as a means to understand partner qualities and their relationship to the robustness of generalist agents. Using the presented measures as diversification objectives, potentially with domain knowledge, is a worthwhile future direction for much more efficient learning algorithms. We will explore this direction in future work.

Finally, training the generalist agent with auxiliary objectives, e.g., opponent modeling, might improve robustness. However, it is unclear how such training objectives affect the relationship between the proposed measures and the downstream robustness. Understanding how these measures interact with auxiliary objectives will be critical for building robust cooperative agents.

## 8 Limitations

We note that none of the presented measures alone are representative indicators of the quality of the partners. For example, two populations could be equally diverse yet yield vastly different levels of robustness of the generalist agent due to their difference in specialization or overfitness. There could be other qualities that impact the robustness of generalists. We will investigate this in future work.

In the experiments, we use domain knowledge for the function \(f\) (i.e., how to extract the characteristic of a trajectory) and for reward shaping of the training of the oracle specialists. Both of which affect the partner quality measures. We acknowledge this as the main limitation of the experiments. Nonetheless, evaluating models without expert knowledge is challenging and is not unique to cooperative multi-agent systems. For example, evaluating LLMs requires domain knowledge to generate test scenarios or human preferences. We do not aim to automate such a notorious challenge. Instead, our proposed measures give us the option to use domain knowledge to evaluate the qualities of cooperative agents while leaving an option for learning the function \(f\) as future work.

If \(f\) is not well-designed, it is possible that \(_{x}P(x|)<1\), which is not a valid probability distribution. Consequently, the diversity and specialization of the population containing \(\) is undefined. For example, an untrained \(\) might have an invalid \(P(X|=)\) if \(\) is the space of reachable goals in an environment because the policy is incapable of achieving any goal.

Our experiments are performed under only a single cooperative domain, multi-recipe Overcooked. We acknowledge this limitation and aim to investigate different domains in future work. The performance of SpecTRL and SpecTRL DAgger depends on the quality of the source partner populations. Hence, the methods should not be expected to improve arbitrary partner populations.

## 9 Related Work

**Generating Diverse Partners for Training Robust Cooperative Agents:** In recent years, much efforts in the ad-hoc teamwork literature have been put into generating diverse training partners. Using domain-knowledge, one can generate diverse partners via hand-crafted policies , domain-specific reward shaping , or Quality-Diversity (QD) algorithms . On the other hand, there are several techniques that can be used to generate diverse training partners without using domain knowledge including using past checkpoints , population-based training , a mutual information objective , trajectory-based diversification , or XP-min methods . This paper conveys an important message that there are other qualities of training partners that should be considered for training robust cooperate agents: _Diversity is not all we need_.

**Partner Qualities That Affect Robustness:** There are studies that explicitly aim to understand variables that affect the robustness of cooperative agents . McKee et al.  and Wang et al.  conclude that the number of training partners and diversity are critical factors for the robustness of downstream agents. Our work studies a different set of partner qualities and shows that specialization and overfitness are also crucial for training robust cooperative generalist agents. Notably, under the competitive multi-agent setting, Vinyals et al.  show that learning against specialized training opponents eases the learning process and increases robustness. Our work formulates the notion of _specialization_ mathematically and identifies that specialization is one of the key qualities of training partners under the cooperative setting.

**Reducing XP-min Partners' Overfitness:** NP-reg methods  aim to reduce overfitness of XP-min partners during their training process. The main idea is to mix SP and XP experiences such that XP-min partners do not learn handshaking behaviors. Unlike MP-reg, the proposed method reduces the overfitness of XP-min partners _after_ the training by knowledge distillation.

**Reducing Overfitness of Neural Networks:** Using knowledge distillation for reducing overfitness is also well known in the broad machine learning literature . Typically, the goal of knowledge distillation is to transfer knowledge of a _teacher_ model to another _student_ model to reduce the overfitness of the model's predictions. We use the same idea of knowledge distillation in the context of extracting diversity and specialization of XP-min training ("teachers") partners to another set of ("students") partners while reducing their overfitness.