# Multi-resolution Spectral Coherence for

Graph Generation with Score-based Diffusion

 Hyuna Cho Minjae Jeong Sooyeon Jeon Sungsoo Ahn Won Hwa Kim

POSTECH, South Korea

{hyunacho, minjaetidtidid, jsuyeon, sungsoo.ahn, wonhwa}@postech.ac.kr

###### Abstract

Successful graph generation depends on the accurate estimation of the joint distribution of graph components such as nodes and edges from training data. While recent deep neural networks have demonstrated sampling of realistic graphs together with diffusion models, however, they still suffer from oversmoothing problems which are inherited from conventional graph convolution and thus high-frequency characteristics of nodes and edges become intractable. To overcome such issues and generate graphs with high fidelity, this paper introduces a novel approach that captures the dependency between nodes and edges at multiple resolutions in the spectral space. By modeling the joint distribution of node and edge signals in a shared graph wavelet space, together with a score-based diffusion model, we propose a Wavelet Graph Diffusion Model (Wave-GD) which lets us sample synthetic graphs with real-like frequency characteristics of nodes and edges. Experimental results on four representative benchmark datasets validate the superiority of the Wave-GD over existing approaches, highlighting its potential for a wide range of applications that involve graph data.

## 1 Introduction

The flexible representation of graphs lets us investigate a variety of real-world phenomena such as social networks , traffic flows , molecule structure , and brain networks . The rich expressive power of graphs inherits from embodying various combinations of nodes and edges within an irregular structure. However, the analysis of graph data is challenging due to the arbitrary and heterogeneous structure, as it becomes difficult to characterize robust patterns both within a graph and across different graphs for a downstream machine learning task.

The same issue arises in graph generation, where the objective is to learn the underlying graph distribution from training samples and thereby synthetic graphs with similar characteristics to the training data can be generated, i.e., sampled. For this, accurately estimating the joint distribution of the measurements from node features and graph structures is essential. Recent graph generative methods  have been successful in sampling realistic node and edge features, however, their generated samples often fail to embed the true relationships especially given in sparse connections between nodes. This problem often occurs as existing methods derive separate embeddings of nodes and edges considering them as different entities . Moreover, successive layers of graph convolution  aggravate this issue by overly averaging signals on graphs, such that local details (i.e., high-frequency characteristics) become intractable.

**Key ideas.** Notice that the edge signals, e.g., edge weights and connectivity, should be coherent to node signals as the edges should properly explain the relationships between the nodes. Based on this homophily assumption, to address the aforementioned issues, we propose a novel generative model that precisely captures the dependency between nodes and edges in _multiple resolutions_ on local-to-global structures. This is realized via spectral graph wavelet transform (SGWT) , whichenables the filtering of graph signals at a specific level of granularity. We transform the node and edge signals into a common graph wavelet space and obtain their underlying cross-characteristics, i.e., spectral coherence, via their inner product at different scales. We expect that sparse connections between nodes (i.e., higher variation) can be captured with high fidelity as high-frequency components in the spectral space. Fig. 1 shows an example of such an effect with wavelet transforms on edges, which accentuates certain connectivity and disconnectivity over a template graph. These accentuated (dis-)connectivities at specific scales can be characterized by a generative model with multiresolution wavelet filtering. Also, we further show that the scale-specific node and edge features computed in the spectral space can be easily and jointly obtained in a spatial graph convolutional form by applying wavelet filtering to either nodes or edges for efficiency.

**Proposed Framework.** We leverage this spectral coherence to model the joint distribution of graph node and edge features embedded in a common graph wavelet space with a score-based diffusion model . As opposed to conventional approaches  where the scores for the joint distribution of nodes and edges are modeled with graph multi-head attention (GMH)  involving graph convolutions of the raw node and edge signals, our model calculates the scores over multiple scales of nodes and edges to capture different frequency characteristics. With diffusion and reverse denoising processes in multi-resolution, our Wavelet Graph Diffusion Model (Wave-GD) accurately estimates the joint distribution of the node and edge features preserving their graph frequency characteristics.

**Contributions.** To this end, we summarize our main contributions as follows: **1)** To obtain representative graph characteristics of different fidelity, we propose a novel concept to capture spectral coherence between nodes and edges in multiple scales in a common graph wavelet space. **2)** Furthermore, we show that spectral coherence can be obtained in the graph domain as a spatial graph convolutional formulation, which allows us to perform the SGWT only on the edge signals for efficiency. **3)** We propose a training scheme on the multi-resolution at which the optimal joint frequency characteristics of graph nodes and edges can be captured from training samples. The Wave-GD was tested on four representative benchmarks for graph generation which demonstrated outperforming results over state-of-the-art baselines. Extensive experiments on real-world, synthetic, and biochemical graph datasets validate the generality of the method, suggesting its potential for diverse applications with graph samples.

## 2 Related Work

Deep graph generative models aim to learn the underlying distribution of node and edge signals from the training set. They can be categorized into (1) autoregressive models that construct graphs by the iterative generation of a node or an edge signal at each step or (2) one-shot models that simultaneously update all the signals at once.

**Autoregressive models.** Autoregressive models are widely used for graph generation since they are based on a straightforward way to iteratively update the graph structure conditioned on an incomplete graph generated so far. Prior works have parameterized the autoregressive models using recurrent neural network (RNN) , variational autoencoder (VAE) , and normalizing flow . However, they suffer from high complexity since the required number of updates to generate the graph grows with the size of the graph. Furthermore, their generation is sensitive to the order of nodes being generated, i.e., autoregressive models may assign different probabilities for the construction of the same graph executed in a different way.

Figure 1: An example of SGWT with diverse scales that impacts the graph representation. (a) An undirected graph with an adjacency matrix \(\), (b) Disconnectivity between nodes with dashed lines for \(\). (c) Result from graph transform of \(\) with a band-pass kernel \(k(s)=sxe^{-sx}\) at scale \(s=1\) and (d) corresponding disconnectivity to (c). (e) Result from graph transform of \(\) using the same band-pass kernel at \(s=0.1\). (f) Corresponding disconnectivity for (e). The edge thickness denotes the magnitude of connectivity, which is controlled by a scale parameter. Compared to \(\), the sparse connection (orange) is significantly strengthened via SGWT at \(s=1\), and disconnectivities (blue) are also emphasized at the same scale.

**One-shot models.** One-shot models alleviate the issues of autoregressive models by simultaneous generation of node and edge signals. This potentially reduces the complexity of generation since the number of generation steps no longer depends on the graph size. Furthermore, their generation is often permutation invariant and assigns the same probability for generating a graph regardless of the permutation. Researchers have considered parameterizing these models using generative adversarial network (GAN) , VAE , normalizing flow models , and diffusion models .

**Diffusion models.** In particular, diffusion models are recently catching attention due to their extraordinary capability in learning the joint distributions of graph components such as nodes and edges. They are based on (1) defining a forward diffusion process to sequentially corrupt a graph using noise distributions and (2) training a reverse diffusion process parameterized by a graph neural network to reconstruct the original graph. Existing works mainly differ by defining the diffusion processes in the continuous space  or the discrete space .

## 3 Generating Graphs with Robust Spectral Characteristics

### Preliminary: Graph Wavelet Transform

Let \(G=(,)\) be an undirected graph, where \(^{N F}\) represents \(F\)-dimensional node features for \(N\) nodes and \(^{N N}\) is an adjacency matrix representing connectivity among the nodes. The graph Laplacian is defined as \(=-\), where \(\) is a diagonal degree matrix. As the \(\) is real and positive semi-definite, it has a set of orthonormal eigenvectors \(}=[u_{1},u_{2},...,u_{N}]\) and corresponding non-negative real eigenvalues \(=diag(_{1},...,_{N})\). Decomposing this Laplacian as \(=^{T}\), the connectivity, complexity, and spectral properties of the graph are characterized. Specifically, its eigenvectors and eigenvalues identify the frequencies and mode of vibrations of a graph. Eigenvectors with small eigenvalues represent large connected components in a graph structure and slow-varying signals among nodes. On the other hand, eigenvectors associated with large eigenvalues indicate the sparse and disconnected signals in the graph .

To capture localized characteristics of signals on arbitrary graph structures, the spectral graph wavelet transform  is defined by constructing a set of graph wavelet bases \(_{s}=(_{s_{1}},_{s_{2}},...,_{s_{J}})\) with \(J\) scales where \(_{s}=k(s)^{T}\). The \(_{s}\) is a realization of a kernel function \(k()\) in the spectral domain localized with \(_{n}\) in the graph space, which captures the local characteristics of the graph at each node. The scale \(s\) selects a specific bandwidth in the spectral space which corresponds to the range of locality in the original graph space. The choice of wavelet basis, i.e., mother wavelet, depends on the shape of \(k()\), which may vary depending on a target task such as smoothing or band-pass filtering. In this work, we used both types of kernel functions: (1) a band-pass kernel \(k(s)=sxe^{-sx}\) to capture both low and high frequency of graphs and (2) a low-pass kernel \(k(s)=e^{-sx}\) to capture cluster-like and smoothed features from graphs.

Using the bases \(_{s}\), graph wavelet transform projects a signal \(x\) (e.g., node feature or connectivity) from the graph domain into the spectral domain as

\[W_{x}(s)=<_{s},x>=_{s}x,\] (1)

which yields a wavelet coefficient \(W_{x}(s)\). This wavelet coefficient is a scale-filtered signal defined in the wavelet space. When admissibility condition on \(k()\) is satisfied , the inverse transform completely reconstructs the signal \(x\) by projecting \(W_{x}(s)\) back to the graph domain as follows:

\[x=}_{0}^{}_{s} W_{x}(s)\] (2)

with an admissibility constant \(C_{k}=_{0}^{}}{x}dx<\).

### Adaptive Multi-Resolution Representation of Nodes and Edges

To capture both fine and coarse graph features from an irregular graph structure, the filtering operation is performed over multiple scales. The multi-resolution representations of graph nodes and edges are derived by decomposing the graph signals \(\) and \(\) with scales \(\{s_{i}\}_{i=1}^{J}\) using (1), which result in \(\{W_{}(s_{i})\}_{i=1}^{J}\) and \(\{W_{}(s_{i})\}_{i=1}^{J}\) in the _spectral domain_. These are wavelet coefficients that contain different levels of local and global details of graph node and edge signals in a multi-resolution fashion.

To obtain the multi-resolution representations of these graph signals in the _graph space_, the inverse transform in the Eq. 2 is performed on the filtered coefficients using the bases \(_{s}\) at the same scales.

As the Eq. 2 is the superposition of multi-resolution representation of \(x\) over scales at \(s[0,)\), it allows us to define a scale-filtered signal in the graph space at specific \(s\) as

\[x^{s}=_{s} W_{x}(s)=k^{2}(s)^{T}x,\] (3)

where \(k^{2}(s)=diag(k^{2}(s_{1}),...,k^{2}(s_{N}))\) is a diagonal matrix . Therefore, the \(\) and \(\) at multiple resolutions in the spatial domain are defined as \(\{^{s_{i}}\}_{i=1}^{J}=\{k^{2}(s_{i}) ^{T}\}_{i=1}^{J}\) and \(\{^{s_{i}}\}_{i=1}^{J}=\{k^{2}(s_{i}) ^{T}\}_{i=1}^{J}\), respectively. Within our proposed framework, we make these scales _trainable_ such that the local-to-global characteristics can be obtained adaptively.

### Refining Spectral Coherence between Nodes and Edges in Multi-resolution Fashion

As the graph features \(\) and \(\) should be coherent, i.e., connectivities should explain the relationship among features from different nodes, we hypothesize that they should share similarities even when observed from different resolutions. To capture the key components that are shared on both edges and nodes at multi-resolution, we measure the underlying cross-characteristics between nodes and edges in each scale in the spectral space. We quantify their coherence as a dot product as \(W_{}(s) W_{}(s)\) and use this spectral coherence as a feature that represents a graph at a specific resolution \(s\), which is used to estimate the score function in multiple resolutions later in Section 3.5.

**Lemma 1**.: _Let \(G\) be an undirected graph, with a node signal \(\) and a symmetric adjacency matrix \(\). Given wavelet coefficients \(W_{}(s)\) and \(W_{}(s)\), which are spectral representations of \(\) and \(\) at a specific scale \(s\), a dot product of these wavelet coefficients is equivalent to the product between the scale-filtered edge signals and the node signals in the graph space, i.e., \(W_{}(s) W_{}(s)=^{s}\)._

By Lemma 1, we can efficiently extract multi-resolution coherence by applying the filtering only on the edges. Using the \(J\) number of \(^{s}\) along with the given data \(G=(,)\), we introduce our simple yet effective graph generative framework through the stochastic differential equations (SDEs) in Sec. 3.4 and explain how Lemma 1 is used in the generative model in Sec. 3.5. The proof of Lemma 1 is given in Appendix A.

### Wave-GD: Wavelet Graph Diffusion Model via Multi-resolution

Now we describe our graph generative model which captures the dependency of node and edge on both local and global structures with adaptive spectral filtering. The overall description of Wave-GD is given in Fig. 2, which demonstrates (a) multi-resolution diffusion strategy and (b) overall model architecture. In particular, we enhance the existing diffusion models for graphs  using the spectral coherence introduced in Lemma 1. The building blocks of our model are as follows: 1) the forward

Figure 2: (a) Schematic diagram of Wave-GD with multi-resolution diffusion. Note that the scale-filtering is applied to the \(_{0}\), not to the \(_{t}\). (b) Overview of Wave-GD that jointly estimates partial scores of node features \(\) and edges \(\) along with scale-filtered edges \(^{s}\). We first perform multi-resolution filtering on the given edges \(_{0}\) at \(t=0\) using graph wavelet basis \(_{s}\) with trainable scale \(s\). Forward diffusion processes smoothly transform \(\), \(\), and \(^{s}\) into noises in parallel and they are reconstructed by solving reverse-time SDEs. During the reconstruction, the knowledge across multi-resolution is shared in the score-based model \(_{,t}\). Also, the information in separate edge and node components is effectively entangled by obtaining their spectral coherence at various resolutions.

diffusion to corrupt the graph distribution in a continuous domain, 2) the reverse diffusion to recover the original graph, and 3) the training objective for our model.

**Multi-resolution forward diffusion process.** Building upon the work of GDSS , we propose a new diffusion process that sequentially corrupts a graph structure at different levels of resolution based on the Ito SDE . As the forward diffusion process is modeled by a SDE which describes a process of random variables, \(\{_{t},\{_{t}^{s_{i}}\}_{i=0}^{J}\}\) with \(_{t}^{s_{0}}=_{t}\) at timestep \(t[0,T]\) are diffused as follows:

\[ d_{t}=_{}(_{t},t)dt+_{,t}d_{},\\ d_{t}^{s_{i}}=_{^{s_{i}}}(_{t}^{s_{i}},t)dt+_{^{s_{i}},t}d_{^{s_{i} }},\] (4)

where \(_{}:^{N F}^{N F}\) and \(_{^{s_{i}}}:^{N N}^ {N N}\) are drift functions, \(_{,t}\) and \(_{^{s_{i}},t}\) are scalar diffusion coefficients, and \(_{}\) and \(_{^{s_{i}}}\) are standard Wiener processes for \(_{t}\) and \(\{_{t}^{s_{i}}\}_{i=0}^{J}\), respectively. As this diffusion process is simulated at varying levels of granularity in a multi-resolution scheme, it is likely that certain frequency characteristics are accentuated and the highlighted information will be preserved from corruption. In other words, at an arbitrary timestep \(t\), the scale-filtered edges \(\{_{t}^{s_{i}}\}_{i=1}^{J}\) are highly likely to contain richer information of edges for score estimation than the given \(_{t}\) as their edge signals are adaptively controlled and highlighted by trainable scales.

**Learning the reverse diffusion process.** Let \(G_{t}=(_{t},_{t})\) be a given graph at timestep \(t\) and \(\{G_{t}^{s_{i}}=(_{t},_{t}^{s_{i}})\}_{i=0}^{J}\) be a set of graphs for multiple scales at the same timestep. Given the multi-resolution forward diffusion process, we generate graphs from solving the associated SDE backward in time. To be specific, the reverse diffusion process can be formulated as follows:

\[ d_{t}=[_{}(_{t},t)-_{,t}^{2}_{_{t}} p_{t}(G_{t})]d +_{,t}d}_{},\\ d_{t}^{s_{i}}=[_{^{s_{i}}}(_{t}^{s_{i}},t)-_{^{s_{i}},t}^{2}_{_{t}^{s_{ i}}} p_{t}(G_{t}^{s_{i}})]d+_{^{s_{i}},t}d}_{^{s_{i}}},\] (5)

where \(p_{t}(G_{t})\) and \(p_{t}(G_{t}^{s_{i}})\) denote the distribution of the forward diffusion process evaluated at time \(t\). This reverse-time SDE recovers the original data distribution \(p_{0}(_{0},\{_{0}^{s_{i}}\}_{i=0}^{J})\) with the standard reverse-time Wiener processes \(}_{}\) and \(}_{^{s_{i}}}\) in which the direction of time is reversed as \(d\).

However, since the score functions of the joint distribution, i.e., \(_{_{t}} p_{t}(G_{t})\) and \(_{_{t}^{s_{i}}} p_{t}(G_{t}^{s_{i}})\), are unknown, we train a neural network to estimate them using the denoising score matching loss :

\[L_{}=_{}_{t}[_{}(t)\, _{G_{0},G_{t}|G_{0}}[\|_{,t}(G_{t})-_{_{t}} p_{0t}(_{t}|_{0})\|_{2}^{2}]],\] (6)

\[ L_{}&=_{,}_{t}[_{}(t)\,_{G_{0},G_{t}|G_{0}}[\| _{,t}(G_{t})-_{_{t}} p_{0t}(_{t}| _{0})\|_{2}^{2}].\\ &.+_{^{s_{i}}}(t)_{i=1}^{J}_{G _{0}^{s_{i}},G_{t}^{s_{i}}|G_{0}^{s_{i}}}[\|_{,t}(G_{t}^{s_{i}} )-_{_{t}^{s_{i}}} p_{0t}(_{t}^{s_{i}}|_{0}^{s_{i}})\|_{2}^{2}]]\!,\] (7)

where \(p_{0t}()\) denotes the transition distribution from \(p_{0}\) to \(p_{t}\), \(_{,t}\), \(_{,t}\) are score-based models which are graph neural networks trained to approximate the true score functions. The \(_{}(t),_{}(t),_{^{s_{i}}}(t)\) are time-varying scaling factors for individual loss terms and are defined as in .

Both our method and GDSS perform denoising score-matching to the partial scores of \(X_{t}\) and \(A_{t}\). However, our method additionally models the joint probability space of \(X_{t}\) and \(A_{t}^{s_{i}}\) via SDEs. This is realized by the loss in Eq. 7, and this operation allows a model to flexibly estimate the complex dependency between nodes and edges with multi-resolution SGWT. Also, note that the scales of SWGT \(\{s_{i}\}_{i=1}^{J}\) in Eq. 7 are trainable so that multi-level granularities that characterize a graph distribution can be adaptively captured during training.

**Remark.** While we solve the reverse SDEs for \(\{_{t},\{_{t}^{s_{i}}\}_{i=0}^{J}\}\) in the _training_, we only need to solve the reverse diffusion processes (5) only for the node signal \(\) and the non-filtered graph \(=^{s_{0}}\) in the _sampling_ phase. In other words, we do not generate \(\{^{s_{i}}\}_{i=1}^{J}\) in the _sampling_ phase. Also note that the parameters of the networks \(_{,t}\) are shared across different scales so that they can learn generalizable representations over different resolutions. As the shared parameters in the score function do not overfit to a specific scale, it also promotes stable training.

### Score-based Joint Density Estimation with Multi-Resolution Coherence

Finally, we describe the score-based models \(_{,t}\) and \(_{,t}\) to better capture the spectral coherence over different resolutions. In particular, we revise the graph multi-head attention (GMH)  layer to better incorporate the spectral coherence between the edge and the node attributes. In the original GMH layer, node and edge attributes were encoded into query \(Q\), key \(K\), and value \(V\) as follows:

\[Q=_{t}_{t}W_{Q}, K=_{t}_{t}W_{K},  V=_{t}_{t}W_{V},\] (8)

where \(W_{Q},W_{K},W_{V}\) are trainable weights. This layer is repeated for each \(\{s_{i}\}_{i=1}^{J}\) as follows:

\[Q^{s_{i}}=_{t}^{s_{i}}_{t}W_{Q}, K^{s_{i}}=_{t}^{s_{i}}_{t}W_{K}, V^{s_{i}}=_{t}^{s_{i}}_{t}W_{V},\] (9)

which incorporate spectral coherence at a specific scale \(s_{i}\) as given in Lemma 1. Using \(Q^{s_{i}}\), \(K^{s_{i}}\), \(V^{s_{i}}\) as the new query, key, and value for the GMH layer, one can incorporate the spectral coherence when training \(W\)'s. Consequently, the score-based models consist of multiple GMH layers followed by a multi-layer perceptron (MLP). We used the original GMH layer for the parameterization of \(_{,t}\), and the modified GMH layer is used for \(_{,t}\). Note that this parameterization preserves the permutation invariance of the original GMH layer, hence our score-based models are also permutation invariant.

## 4 Experiment

In this section, we quantitatively and qualitatively evaluate our method in comparison to various recent graph generative methods on four benchmark datasets. Ablation studies are also introduced to empirically analyze the roles of individual components within Wave-GD.

### Datasets

We evaluated Wave-GD on four public datasets with varying sizes and characteristics, demonstrating its robustness and generalizability to generate high-quality graphs for diverse graph domains. **Ego-small** consists of 200 small real sub-graphs from the Citeseer network dataset with \(4 N 18\). **Community-small** consists of 100 randomly generated synthetic graphs with \(12 N 20\). The graphs are constructed by two equal-sized communities and each community is generated by E-R model  and 0.05\(N\) inter-community edges are added with uniform probability as in previous works [17; 25]. **Grid** consists of randomly generated 100 standard 2D grid graphs with \(100 N 400\). As all nodes are arranged in a regular lattice, the maximum number of edges per node is 4. **QM9** is a molecular dataset with 133,885 molecules that are represented by attributed graphs with \(1 N 9\), four node types, and three edge types.

### Experimental Setup

For all datasets, we used 80% of the whole data as a train set and the rest 20% as a test set with the same split as in [13; 42]. As in , we sampled 10,000 molecules from the QM9 dataset, and for the remaining generic datasets, we sampled an equal number of data as the number of test data in each respective dataset. Also, the predictor-corrector sampler (PC-sampling) proposed in  was used to sample data with 1000 predictor and 1000 corrector steps.

We set two wavelet kernels \(k(s)\): one is a low-pass filter \(k(s)=e^{-sx}\) that captures signals in the low-frequency and the other \(k(s)=sxe^{-sx}\) is a band-pass filter which is 0 at the origin. To obtain the combined effect of the low-pass and band-pass filters using a total of \(J\) scales, edges at one scale are filtered using the low-pass filter. For the remaining \(J-1\) scales, the band-pass filter is applied. This approach enables selective extraction and processing of different frequency components across the spectral domain. The number of scales \(J\) was set to 11, 6, 4, and 6 for the Ego-small, Community-small, Grid, and QM9 datasets, respectively. More detailed experimental settings are given in Appendix B.

### Experiment on Generic Graphs

To assess the versatility of Wave-GD, we used both real-world and synthetic datasets with varying sizes and characteristics. Experimental results on these diverse generic datasets demonstrate the robustness of Wave-GD in sampling graphs of various characteristics.

**Baselines and metrics.** For experiments on generic graph datasets (i.e., Ego-small, Community-small, and Grid), we compared the performance of our proposed method with the following autoregressive and one-shot graph generation methods: DeepGMG , GraphRNN , GraphAF ,

[MISSING_PAGE_FAIL:7]

comparison to smaller graphs. In other words, for the Ego-small and Community-small datasets, features in relatively low frequency (e.g., cluster-related features) were captured with larger scales.

**Experiments with larger sample size.** To provide a more definitive assessment of the generated sample quality, we conducted additional experiments by generating a larger number of samples compared to the test data, as in previous works . For this, we sampled 1024 graphs for evaluating the MMD metrics for the Ego-small and Community-small datasets. As shown in Table 3, the lower MMDs of Wave-GD demonstrate superior performance to the baselines on Ego-small. For the Community-small dataset, GraphRNN performed better than ours on the averaged MMD, however, our method still surpasses recent score-based models  and normalizing flow model  with at most \(0.066\) margin. Along with these quantitative results, we present the actual visualization of the generated samples from Wave-GD in Fig. 3, which are highly similar to the training samples.

**Stability analysis.** In addition to MMDs, we present a stability analysis of Wave-GD in Fig. 4. The figure presents a comparison of the averaged MMDs between GDSS and our method on the Ego-small dataset. Specifically, between 2000-5000 epochs, while the difference between the maximum and minimum values of the averaged MMD of GDSS is \(0.016\), Wave-GD shows better stability with a difference of \(\)\(0.0018\) at the same epochs, indicating that our method can much more robustly generate high-quality samples.

### Experiment on Molecular Graphs

In addition to the generic graphs, we evaluated Wave-GD on a molecular benchmark dataset, which contains complex chemical bonds between atoms (i.e., nodes) and edges. By evaluating Wave-GD on

Figure 4: Comparison of the MMDs between GDSS and Wave-GD on the Ego-small. The sample quality of Wave-GD is stable and converges faster for a) Degree, b) Clustering, c) Orbit, and d) their average.

Figure 3: Visualization of training samples and generated graphs on Ego-small (top), Community-small (middle), and QM9 (bottom). The generated molecules from the QM9 dataset (bottom panel) are represented with the pairwise Tanimoto similarity based on the Morgan fingerprints , which show the one-to-one similarity to the real training samples at the same location in the upper panel.

the molecular graph generation task, we validated its ability to capture the complex dependencies between nodes and edges. Notably, Wave-GD successfully generated plausible graphs while adhering to the chemical valency rule, ensuring the realistic representation of molecular structures.

**Baselines and evaluation metrics.** In this experiment, we compared the results from seven baselines and Wave-GD on a real molecular QM9 dataset. Among the baselines, two are autoregressive flow-based models, namely GraphAF  and GraphDF , which employ discrete latent variables. Five others are one-shot generative models, which include MoFlow , GraphEBM , EDP-GNN , GDSS , and DiGress . Following the standard procedure as in , the molecule data were kekulized by the RDKit library  and hydrogen atoms were removed.

We evaluated the quality of generated molecular samples with six metrics as in : 1) _Validity_ is the fraction of valid molecules that hold chemical rules. In our experiment, we did not apply any valency correction or edge resampling. 2) _Novelty_ measures the proportion of valid molecules that are not present in the training set. 3) _Uniqueness_ is the proportion of generated molecules that are not duplicated. 4) _Neighborhood subgraph pairwise distance kernel_ (NSPDK)  is the MMD between the generated molecules and test molecules which considers both the nodes and edges for evaluation. 5) _Frechet ChemNet Distance_ (FCD)  evaluates the distance between distributions of the training and generated sets using the activations of the ChemNet layer. 6) _Time_ quantifies the duration required to generate 10,000 molecules in the RDKit molecule format. In addition to these metrics, we also report the average values of validity, novelty, and uniqueness to present a unified evaluation over various aspects of the generated graphs.

**Results.** As shown in Table 4, our model outperformed all baselines on the average of validity, novelty, and uniqueness and showed the second-best results on validity, uniqueness, and NSPDK. To be specific, our method showed at most \(27.49\%p\) gain over GraphEBM and \(18.06\%p\) margin over DiGress in terms of the averaged statistic. Note that, DiGress performed better than our model in NSPDK and FCD, however, its lower novelty (35.31%) inherently leads to lower FCD and NSPDK scores. As the molecular generation task aims to create previously unseen molecular structures, novelty may be a more critical measure on which Wave-GD performed better.

In general, Wave-GD outperformed most of the baselines, excelling not only in generation quality but also in generation speed. It was faster than all autoregressive models, showing 442\(\) speed up compared to GraphDF and 21\(\) speed up compared to GraphAF. Moreover, our method requires a shorter generation time than discrete-time diffusion models. For example, our method was 36\(\) faster than EDP-GNN and 5\(\) faster than DiGress. These results demonstrate that employing a continuous-time diffusion process for converting graphs into noise and vice versa is considerably more efficient compared to the discrete-step noise perturbation utilized in EDP-GNN and DiGress.

### Ablation Studies

**Ablation study on oversmoothing.** In Fig. 5, we present the effect of the number of GMH layers (i.e., depth \(D\)) on the quality of generated samples. With larger \(D\), while the sample quality of GDSS is decreased with high averaged MMDs (blue line) due to the oversmoothing, the average MMD of Wave-GD (yellow line) is consistently low representing high fidelity in the generated samples. This is because Wave-GD captures diverse graph frequency characteristics by adaptive multi-resolution filtering, which allows the model to preserve fine-grained details even in deeper layers.

    & Method & Validity (\%) \(\) & Novelty (\%) & Uniq. (\%) \(\) & Avg. (\%) \(\) & NSPDK \(\) & FCD \(\) & time (s) \(\) \\   **FCD** \\ **FCD** \\  } & GraphAF  & 67 & 88.83 & 94.51 & 83.45 & 0.020 \(\) 3\({}^{}\) & 5.27 \(\) 4 & 2.52\(e^{}\) \\  & GraphDF  & 82.67 & **98.10** & 97.62 & 92.80 & 0.063 \(\) 1\(e^{-3}\) & 10.82 \(\) 0 & 5.35\(e^{}\) \\   **FCD** \\ **FCD** \\  } & MoFlow  & 91.36 \(\) 1.2 & 94.72 \(\) 8 & 98.65 \(\) 6 & 94.91 & 0.017 \(\) 3\(e^{-3}\) & 4.47 \(\) 6 & **4.60\(e^{}\)** \\  & EDP-GNN  & 47.52 \(\) 3.6 & 86.58 \(\) 1.9 & **99.25 \(\) 1** & 77.78 & 0.005 \(\) 1\(e^{-3}\) & 2.68 \(\) 2 & 4.40\(e^{}\) \\  & GraphEBM  & 8.22 \(\) 2.2 & 97.01 \(\) 2.7 & 97.00 \(\) 1.6 & 67.71 & 0.030 \(\) 4\(e^{-3}\) & 6.14 \(\) 4 & 3.71\(e^{}\) \\  & GDSS  & 95.72 \(\) 1.9 & 86.27 \(\) 2.3 & 98.46 \(\) 6.9 & 93.48 & 0.003 \(\) 0 & 2.90 \(\) 3 & 1.14\(e^{}\) \\  & DiGress \({}^{}\) & **99.37 \(\).0** & 35.31 \(\).0 & 96.74 \(\) 0 & 77.14 & **1.4\(e^{-4}\).0** & **0.07 \(\).0** & 6.14\(e^{}\) \\   & Wave-GD (Ours) & 96.95 \(\) 3 & 89.79 \(\) 5 & 98.87 \(\) 2 & **95.20** & 0.003 \(\) 0 & 3.85 \(\) 1 & 1.21\(e^{}\) \\   

\(\): results obtained with the official public code.

Table 4: Generation results on QM9 molecular dataset. The baseline results are taken from  and all results are presented without validity correction. We report the mean of three runs and their standard deviations. The best performance is marked in bold and the second-best result is indicated by an underline.

**Ablation study on the number of scales.** In Table 5, we report degree, cluster, orbit MMDs, and their averaged value on the Community-small by changing the numbers of scales \(J\). Also, validity, uniqueness, novelty, and their averaged value are presented on the QM9 dataset for multiple \(J\)'s. All experiments were replicated three times and the averaged results are reported. We observed that the averaged MMD slightly depends on the number of scales, however, the overall quality of generated samples is still better than existing baselines in most settings.

### Limitations

Although Wave-GD is robust to varying numbers of scales as shown in Table 5, the choice of \(J\) differs across datasets which should be carefully chosen by a user. Also, as Wave-GD performs multi-resolution diffusion, it requires larger resources than conventional models during training. However, the diffusion processes are performed in parallel so there is no overhead in time. Moreover, as sampling is performed without multi-resolution filtering, the generation process is still quite efficient.

## 5 Conclusion

In this paper, we proposed Wave-GD which leverages spectral dependencies between node and edge signals to better characterize their joint distributions via a score-based diffusion model. By capturing their multi-resolution coherence, the model is able to generate graphs of high-fidelity preserving frequency characteristics of the graphs from the training samples. Extensive validation on various datasets and superior performance of Wave-GD highlights its significant potential for various application domains for graph modeling and generation.

**Acknowledgement.** This research was supported by NRF-2022R1A2C2092336 (40%), IITP-2022-0-00290 (40%), IITP-2019-0-01906 (AI Graduate Program at POSTECH, 10%), IITP-2022-2020-0-01461 (ITRC, 10%) from South Korea, and NSF IIS CRII 1948510 from the U.S.