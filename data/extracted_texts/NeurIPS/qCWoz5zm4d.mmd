# Structure Based Dataset on SAT Solving with

Graph Neural Networks

 Yi Fu

The University of New South Wales

yi.fu.1@student.unsw.edu.au

&Anthony Tompkins

The University of New South Wales

anthony.tompkins@unsw.edu.au

&Yang Song

The University of New South Wales

yang.song1@unsw.edu.au

&Maurice Pagnucco

The University of New South Wales

morri@cse.unsw.edu.au

###### Abstract

Satisfiability (SAT) solvers based on techniques such as conflict driven clause learning (CDCL) have produced excellent performance on both synthetic and real world industrial problems. While these CDCL solvers only operate on a per-problem basis, graph neural network (GNN) based solvers bring new benefits to the field by allowing practitioners to exploit knowledge gained from previously solved problems to expedite solving of new SAT problems. However, one specific area that is often studied in the context of CDCL solvers, but largely overlooked in GNN solvers, is the relationship between graph theoretic measure of _structure_ in SAT problems and the _generalisation_ ability of GNN solvers. To bridge the gap between structural graph properties (e.g., modularity) and the generalisability (or lack thereof) of GNN based SAT solvers, we present **StructureSAT**: a curated dataset, along with code to further generate novel examples, containing a diverse set of SAT problems from well known problem domains. Furthermore, we also utilise a novel splitting method that focuses on deconstructing the families into more detailed hierarchies based on their structural properties. With the new dataset, we aim to help explain problematic generalisation in existing GNN SAT solvers, and demonstrate an alternative approach to expedite GNN training efficiency by exploiting knowledge of structural graph properties. We conclude with multiple future directions that can help researchers in GNN based SAT solving develop more effective and generalisable SAT solvers.

## 1 Introduction

The satisfiability (SAT)  problem is a hallmark of computer science research with remarkable real-world utility, especially in solving combinatorial optimisation problems. SAT has formed the basis of the study of computational complexity especially around the complexity class of NP problems. Moreover, as a theoretical tool, it has facilitated research into the nature of computation and solving difficult computational problems. On the practical side, SAT has been applied to many interesting real world problems such as logistics planning , product configuration , and software verification , retaining its high relevance today.

Advances over the last decade in SAT solving have appeared to converge on conflict driven clause learning (CDCL) methods  for the best general problem solving performance. While it is widely believed that CDCL solvers are performant towards various aspects of problems , such solvers almost exclusively operate on a per-problem basis. That is to say they do not explicitly reuse knowledge from different problems. Alternatively, graph neural networks (GNNs) have emerged as acomplementary approach to representing and solving SAT problems by incorporating the benefits of deep learning . Using an optimisation based approach, as opposed to a pure search like algorithm in CDCL, GNN-based solvers have the potential to adapt useful information from training problems to accelerate solving unseen novel problems.

However, SAT problems largely reside in NP-hard problems. In reality, for machine learning methods such as GNNs, prior works have demonstrated provably negative results on challenges that are NP-hard . Although deep neural networks have the ability to ingest large datasets [39; 55], there lacks a dataset that facilitates sufficiently large and unbiased training for SAT problems, and existing SAT datasets with higher difficulties generally have a limited number of problems. Indeed, currently the largest benchmarks SATLIB  and SATCOMP  contain less than 10k industrial problems. While we can generate synthetic datasets to train GNNs , the resulting models would struggle to generalise to more diverse and challenging, or real-world problems , limiting the application of GNN-based solvers. Moreover, we believe generalisation in the context of SAT problems has currently been greatly underrated and oversimplified. More specifically, SAT problems in prior work are typically generated in a random manner without delving into what makes instances difficult or useful for training, potentially limiting the models from generalising to more challenging datasets, especially to industrial instances. For example, the largest SAT dataset on GNN - G4SATBench , which is constructed with 7 generators, only considers generalisation on the numbers of variables as a measure of performance vs. complexity. However, the impact of the _quality_ of a dataset is greatly overlooked and remains a less explored area. In particular, problem difficulty can be strongly influenced by the intrinsic _graph structure_ of each problems, as shown experimentally on traditional solver . No prior work has shown if the same structural properties studied in SAT so far could influence GNN's performance, especially their ability to generalise.

To bridge the gap between structural measures and generalisability of GNNs on SAT, we propose StructureSAT, a large-scale dataset containing diverse problem domains and structural measures. In this work, we are not interested in the set of all possible SAT problems, but rather existing, well studied, SAT problem domains which we aim to analyse through the lens of graph theoretic structure. Thus, we focus on small, easy-to-generate synthetic training datasets for developing GNN models that can better generalise. StructureSAT contains 11 SAT domains from 4 high level categories: random, crafted, pseudo-industrial and industrial, within which we study 9 structural properties that have proven to be influential to traditional SAT solvers, including both conjunctive normal form (CNF) based and graph based properties . We carefully deconstruct each problem domains based on their structural properties, and split each domain into low-value property subsets and high-value property subsets for each of the properties. Details of the dataset can be found in Appendix B. Moreover, to capture the relationship between the SAT problem structures and generalisation ability of GNN solvers, we conduct thorough experiments using 3 GNN baselines and benchmark their generalisation performance on a diverse set of in-domain and out-domain problems. Our results highlight the existing challenge and potential future directions on improving the generalisation performance of current GNN-based solvers. We bring light to training set to test set generalisation in GNN-based SAT solvers, and graph theoretic notions of structure, which have been well studied in the CDCL SAT literature but only lightly touched on for GNN-based SAT solving.

## 2 StructureSAT

StructureSAT consists of multiple problem domains, for each of which we control the corresponding attribute values. In this section, we briefly explain SAT problems and present the structure properties measured in the dataset. Then, we introduce the types of data and generators used for raw data generation. Lastly, we detail our structure-based splitting method. Detailed explanations of our dataset are presented in Appendix B.

### SAT preliminaries

In propositional logic, the SAT problem is the problem of finding an assignment of truth values (true or false) to propositional variables that make a Boolean formula satisfiable (i.e., true). Boolean formulae are typically expressed in conjunctive normal form (CNF). We denote the set of propositional variables by \(V\). A literal \(l\) is either a variable \(v V\) or its negation \( v\) (or \(\)). A clause \(c\) is a disjunction of literals (\(l_{1} l_{2}..l_{n}\)), where \(\) denotes propositional logic "or". A formula \(f\) is a conjunction of clauses \((c_{1} c_{2}...c_{n})\), where \(\) denotes propositional logic "and". Generally speaking classical SAT solvers can be divided into _complete solvers_ and _incomplete solvers_. A complete solver is able to prove unsatisfiability or find a satisfying assignment if they exist for a problem. Most complete solvers are based on the Davis-Putnam-Logemann-Loveland (DPLL) algorithm [18; 17], a backtracking search algorithm. Two popular variations of DPLL solver are the Conflict-Driven Clause Learning (CDCL) solvers , which learn and add new conflict clauses to the original formula, and look-ahead solvers , which do lookahead for a selected decision variable. In contrast, an incomplete solver cannot prove unsatisfiability such as the Moser-Tardos (MT) solver  and WalkSAT solver  that are derived from the stochastic local search (SLS) algorithm, which repeatedly selects variable and changes its value until an assignment or a limit is reached.

SAT formulas have been expressed using various graphs focusing on different structural properties . Traditional SAT community usually encodes SAT formulas as undirected weighted graph including _variable incidence graph_ (VIG) and _clause-variable incidence graph_ (CVIG) . VIG is a graph with literals as nodes and two literals are connected with edges if and only if they occur in the same clauses. CVIG is a bipartite graph having the set of variables and clauses as vertices. They are connected if a variable occurs inside a clause. Another commonly used set of graphs are unweighted graphs including VIG, _variable clause graphs_ (VCG), _literal incidence graphs_ (LIG), and _literal clause graphs_ (LCG). LIG extends VIG through extra edges between literals and their negations. VCG and LCG are bipartite graphs similar to CVIG, but without weights. LCG also has an extra edge between literals and their complements. Among all the graphs, LCG has been used most in GNN based SAT solving as others either lose important information of clause (LIG and VIG), or information of polarity (VCG). As prior research  has shown that the particular bipartite graph construction (LCG or VCG) does not have much effect on model accuracy while non-bipartite graphs (LIG or VIG), we will be focusing on LCG only.

### SAT structure properties

In this work we classify structural properties of SAT problems into two classes based on the embedding methods: CNF based properties and graph based properties . These properties are used as splitting method for training and testing in the dataset.

Given a SAT problem \(P\), the **CNF based properties** are related to the CNF encoding of \(P\). The most popular ones are **Backbone** and **Phase transition**. **Graph based properties** are structural properties from embeddings of a _LCG_ graph \(G\). Given a problem with set of variables \(V\) and set of clauses \(C\), the LCG graph \(G\) with vertex \(X\) and weight \(w\) is defined as \(G=(X,x|x C V,w)\) and the weight is either \(1/|X|\) if variable is in clause, \(1/|V|\) for weights between variables and their negations, or 0 if nodes are not connected. Each node \(x\) in graph has degree \(deg_{x}\). Included graph properties in StructureSAT are **Self-similary**, **Scale-free**, **Treewidth**, **Centrality**, **Community structure**, **Small-world** and **Entropy**.

### StructureSAT composition

We use various existing SAT generators and datasets to produce original SAT formulas in 11 domains. These include **Random-3-SAT** generated using CNFgen , **SR(_n_) , **Combinatorial problems** (5 domains) from CNFgen, **Community Attachment** (CA) from , **Popularity-Similarity** (PS) , industrial problems **SATCOMP** from SATCOMP2007 and psudo-industrial problems from Graph Generative Models **G2SAT**.

### Structure-aware splitting and generalisation selection

We also propose a novel splitting method for StructureSAT and focus on 3 types of generalisation tasks. After generating the raw datasets, instead of randomly splitting them to train/valid/test sets, we divide each raw datasets based on specific structural values. Specifically, for each domain, we select the average value \(Z\) from every calculated graph-based properties, as shown in Table 3, and split each domain into a low-value subset and a high-value subset, producing a total of 16 subsets (8 structures \(*\) 2 ranges) per domain. Each subsets contains 80k training data and 10k validation data.1For different testing sets, we focus on 3 aspects of test problems: in-domain larger problems, in-domain problems with different properties, and out-of-distribution problems. Specifically, for in-domain larger problems, we follow the random generation process and generate larger problem sets for all the synthetic generators. For example, for training with SR problems, the training and validation sets contain problems with 10-40 number of variables, while the testing sets contain problems with 40-100 and 100-200 number of variables, each with 10k pairs.

To test generalisation on in-domain problems with different structures, we are interested in random 3-SAT with different \(c/v\) ratios and different backbone values on all domains. For analysing the CNF based property - \(c/v\) ratio on random 3-SAT, the training and validation sets are problems with 10-40 number of variables, and a \(c/v\) ratio of roughly 4.7. Our testing set contain random 3-SAT problems with same number of variables, but different number of clauses. Specifically the test set has a \(c/v\) ratio of 3.5, 4, 5.5 and 6, with each ratio having 10k pairs of problems.

For out-of-distribution problems, we randomly generate 10k problem pairs from each synthetic generators without property split, while also including small-size industrial and application problems from SATCOMP and generated G2SAT problems.

We also empirically analyze the effect of augmentation to generalization, since this might cause the destroying of structure during the addition of learned clauses . Prior work  has shown that training on problems with adding learned clauses from CDCL solvers could lead to better accuracy on augmented SAT domains than training on raw problems. Thus, we gather learned clauses from produced DRAT-trim proofs  after running problems with the CadiCal solver , then augment our dataset with the collected learned clauses.

## 3 Experiment

In this section, we experimentally evaluate the out-of-distribution generalisation ability of GNN-based SAT solvers with StructureSAT. Specifically, we investigate the following questions: Q1: How does the structure influence generalisation to larger size problems; Q2: Could GNNs generalise to the same domain but for problems with different structure; Q3: How much does structure influence out of distribution generalisation; Q4: Does training on augmented problems influence out of distribution generalisation? Due to the limit in space, we will present the experiment on Q3 and Q4 only in the following section. All other experiments can be found in Appendix F.

### Evaluation setup

With the newly developed dataset, with details we conduct several experiments on the task of predicting satisfiablity of SAT problems, which is considered as supervised binary graph-classification task. We consider 3 baseline GNN models NeuroSAT , GCN  and GIN  in our experiments and follow the implementation of G4SATBench . We refer the reader to Appendix E for more implementation details. As prior work has shown that different GNN models perform similarly in general , we want to emphasise that the main focus of this paper is to find the general trend on generalisation performance of GNN-based SAT solvers with regard to various structural measures, which can guide future development of robust GNN-based solvers applicable to challenging problems.

### Generalisation to other domains

Out-of-distribution generalisation without augmentationTo answer Q3, we train NeuroSAT on the small and big split of SR(10-40), and test on different domains without splits. As presented in Table 1, the results differ vastly across the structures and domains. Taking \(D_{f}\) as an example, both \(k\)-clique and PS have similar \(D_{f}\) values. However, testing results on PS are significantly better than on \(k\)-clique. Furthermore, models trained on larger \(D_{f}\) group seems to do better on PS, while PS has a larger \(D_{f}\) value than SR(10-40) on average. This suggests that training on problems with similar metric as testing problems could possibly increase GNN performance. However, it contradicts the fact that smaller \(_{v}\) reaches better performance on CA, as CA dataset has bigger \(_{v}\) value than SR(n). One possible reasons for this contradiction would be that the performance of GNN is not determined by one single metric property, but rather a combination of properties.

Augmented problem generalisation.To get insights from Q4, we augment SR(10-40) with learned clauses from Cadel solver. Then, we test the results on different domains. Both training and testing data here are not splitted with structural properties. Although models trained on augmented datasets reach high accuracy in other augmented domains, with only a few learned clauses added (on average the ratio between learned clause and original clause is roughly 15.9% in training data), they could not solve any raw data well in any domains. While most structural parameters remain the same before and after augmentation, the relatively large change in \(D_{f}\) could be one reason for this result.

## 4 Discussion and Conclusion

This paper presents StructureSAT, a structure-based SAT dataset with various domains and property measures. We aim to help analyze GNN based generalisation in SAT solving by adapting a variety of structural properties. Through our extensive cross-domain experiments using StructureSAT, we produced useful insights in GNN generalisation with empirical analysis. As suggested from our experiments, certain properties are more influential on generalisability than other properties. Furthermore, the diverse GNN generalisation abilities on different domains could be the result of a combination of properties. We hope StructureSAT brings interest into the role of structural properties for future research into GNN based SAT solving.

LLM: With the emergent of LLM in logic and reasoning, a large dataset with various domains are needed for training and testing in the field. StructureSAT could help LLM on the task of solving SAT problems by providing data with large quantity covering wide domains, and the task of structure prediction on SAT, which can be further combined with traditional SAT solving on solver selection.