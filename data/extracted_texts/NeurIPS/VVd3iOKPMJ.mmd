# Learning from Offline Foundation Features with Tensor Augmentations

Emir Konuk\({}^{1,2}\), Christos Matsoukas \({}^{1,2}\), Moein Sorkhei \({}^{1,2}\), Phitchapha Lertsiavaramet \({}^{1,2}\)

&Kevin Smith \({}^{1,2}\)

\({}^{1}\) KTH Royal Institute of Technology, Stockholm, Sweden

\({}^{2}\) Science for Life Laboratory, Stockholm, Sweden

{ekonuk, ksmith}@kth.se

###### Abstract

We introduce Learning from Offline Foundation Features with Tensor Augmentations (LOFF-TA), an efficient training scheme designed to harness the capabilities of foundation models in limited resource settings where their direct development is not feasible. LOFF-TA involves training a compact classifier on cached feature embeddings from a frozen foundation model, resulting in up to 37\(\) faster training and up to 26\(\) reduced GPU memory usage. Because the embeddings of augmented images would be too numerous to store, yet the augmentation process is essential for training, we propose to apply tensor augmentations to the cached embeddings of the original non-augmented images. LOFF-TA makes it possible to leverage the power of foundation models, regardless of their size, in settings with limited computational capacity. Moreover, LOFF-TA can be used to apply foundation models to high-resolution images without increasing compute. In certain scenarios, we find that training with LOFF-TA yields better results than directly fine-tuning the foundation model.

## 1 Introduction

Large and expensive foundation models, designed to capture general-purpose knowledge, have become a significant focus in machine learning and computer vision research . These models excel in zero- and few-shot learning [4; 23] and adapt to various domains, especially in data-scarce scenarios, through transfer learning. But adapting these models for a specific task is a resource-intensive process . The cost of fine-tuning large foundation models today is already prohibitive to most individuals and organizations. As they continue to grow in size, the rising costs of foundation models risk excluding all but the wealthiest organizations. To mitigate this, parameter-efficient fine-tuning methods have been proposed. These methods incorporate rank-deficient  and simple affine modules  or learnable prompt parameters injected at the input stage . Their core principle is to limit the number of parameters that need to be trained. We extend this principle to its logical conclusion by introducing no intermediate parameters or prompts, and investigate whether it is possible to completely separate the foundation model from the training process.

In this study, we explore this complete separation of the resource-intensive foundation model from the training process. As seen in Figure 1, training data is passed through the foundation model at a one-time cost, and then cached. The cached feature embeddings are later loaded and used to train a lightweight classifier. By adopting this caching strategy we can train at a significantly faster rate using less memory resources and achieve similar,or even in some cases, better performance. This framework enables us to leverage the power of _foundation models of any size_ in limited resource settings. Moreover, tasks requiring high-resolution imaging, such as medical image diagnosis can benefit from the power of foundation models without increasing computational costs. However, these benefits come at the cost of inference speed, which can be slower as a consequence of our paradigm.

We call this approach "Learning from Offline Foundation Features with Tensor Augmentations", or LOFF-TA. It is a simple approach, but has not yet been explored as it is complementary to existing adaptation methods. LOFF-TA can be trivially combined with existing adaptation methods [18; 31; 20] by caching features from the adapted foundation models themselves to achieve even better performance. We conduct a series of comprehensive experiments using LOFF-TA on eleven well-known image classification benchmark datasets to demonstrate its benefits and limitations. Our key findings and contributions are outlined as follows:

* a classifier is trained on cached features from foundation models instead of images.
* Since integrating image augmentations within LOFF-TA presents a challenge due to the tremendous storage cost of caching the embeddings of augmented images, we propose to apply spatial tensor augmentations to the cached embeddings of original images when training the compact classifier. We show that they perform nearly as well as standard image augmentations.
* training speed is accelerated up to 37\(\), and GPU memory usage is reduced up to 26\(\). Additionally, LOFF-TA allows flexibility in choosing any input image size or foundation model according to need and available resources.
* Surprisingly, in some cases, LOFF-TA outperforms a fine-tuned foundation model.

Despite the simplicity of our approach, our findings indicate that there are many potential benefits, in terms of both performance and economics, to training from cached foundation features. The source code used in this work can be found at https://github.com/emirkonuk/loffta.

## 2 Related work

Foundation models  such as LLaMA  and GPT  have revolutionized natural language processing through large-scale training, requiring huge datasets and substantial computational resources. In a rapidly advancing competitive landscape, these models are

Figure 1: _Learning from Offline Foundation Features with Tensor Augmentations (LOFF-TA)._ Training data is passed through a foundation model and cached. The cached embeddings are loaded and spatial tensor augmentations are applied in lieu of standard image augmentations. A lightweight classifier is trained on the cached, augmented features. This enables the use of arbitrarily large foundation models and high-resolution images at no additional cost.

scaling up dramatically to achieve unprecedented capabilities. In computer vision, this trend is mirrored with models like DINOv2 , CLIP , OpenCLIP , BLIP , SAM  and SEEM .

The standard approach for adapting a foundation model for a specific task involves fine-tuning its parameters or integrating additional trainable layers or classifiers [3; 13]. However, as the sizes of foundation models expand, these computational demands will escalate, posing significant challenges. To overcome these challenges, researchers have developed several strategies. These include fine-tuning only a subset of a model's parameters  and using techniques like gradient check-pointing for resource optimization . Adaptation methods like [31; 17; 6; 18] introduce a limited number of tunable modules within the foundation model and incorporate learnable 'prompts' in the stem . The result from these approaches is an efficiently fine-tuned, slightly bigger foundation model. Prior to deep learning, machine learning typically involved a two-stage process: first extract relevant features from data, then train a model on these features . LOFF-TA, with its caching of features, echoes this latter approach . As such, it complements the adaptation methods [31; 17; 6; 18; 20] and can be used in conjunction with them to improve overall performance, as we show in Section 5.5.

**Augmentations.** Developing novel image augmentation strategies mostly rely on visual insights to design augmentations . The underlying principle is the manifold hypothesis  and effective augmentations should not move samples too far from the image manifold. While previous work on feature augmentations relied on interpolating features of different images  and adding noise to these interpolations  to ensure the augmented features stay close to the manifold, we find that feature augmentations need not be so limited. In this work, we show that it is surprisingly beneficial to apply spatial augmentations to features, in a manner similar to image augmentations.

## 3 Methods

In this work, we propose to pass training data through the foundation model, cache its features, and use them to train a lightweight classifier. We term this _Learning from Offline Foundation Features_ (LOFF). A key challenge is LOFF's inability to incorporate image augmentations. To overcome this, we apply spatial and noise tensor augmentations directly

Figure 2: _Overview of LOFF-TA._**Step 1:** We leverage a foundation model to process the training data and store the extracted features offline. **Step 2:** The cached tensors are loaded, tensor augmentations are applied, then the augmented tensors are passed through projection and normalization layers and used to train a lightweight classifier. The tensor augmentations include spatial-based transforms, such as flips and crops, along with additive Gaussian noise. An optional pooling step (dashed operation) reduces the spatial dimension of the stored features, allowing for training with high-resolution images at no additional cost.

to the pre-stored foundation features, resulting in LOFF-TA. Finally, to allow the use of high-resolution images, we pool the foundation features.

### Loff

Our approach embraces a straightforward yet powerful idea: to separate feature extraction using a powerful foundation model from the training process using a lightweight classifier, as depicted in 2. We use a foundation model to process training data upfront, then extract and store the output features (Step 1). These serve as rich representations of the data which can be retrieved at a later time for training one (or more) classifiers, as depicted in Step 2.

In detail, given a dataset \(D\), we generate and store a new dataset \(T\) by applying a foundation model \(F_{}\) to all images \(x\) from \(D\). Each sample \(t\) in \(T\) is a \(k d\) dimensional tensor where \(k\) is the number of tokens for each input image \(x\) and \(d\) is the embedding dimensionality.

\[T\{t^{k d},\ \ t=F_{}(x)\}.\] (1)

Importantly, _this phase only needs to be performed once_. The extracted features, \(T\), along with the corresponding labels for each image, are cached and used as a replacement for \(D\). The offline foundation features \(T\) are retrieved to train a lightweight classification model \(F_{}\). Finally, we employ a standard cross-entropy loss, denoted as \(\):

\[*{arg\,min}_{}(y,F_{}(_{proj}(t)))\] (2)

where, \(y\) is the true label, \(t T\) the stored features and \(_{proj}\) is a projection module. The role of the projection module \(_{proj}\) is to match the cached features to the dimensions expected by the classification model. \(_{proj}\) consists of a learnable linear projection layer followed by a Layer Normalization (LN) operation , which we found to improve performance.

**High-resolution images** Many foundation models are trained to handle images larger than \(224 224\), such as [23; 35], but GPU memory limitations on conventional hardware make it impossible for them to be fine-tuned on high-resolution images. LOFF can mitigate this issue by pooling the features before storing them as shown in Fig. 2 (Step 1). The reduced size of the pooled features allow them to be stored and used to train a classifier efficiently. We investigate both average pooling and max pooling operations  and assess their impact on classification performance and computational cost.

### Loff-Ta

Given that image augmentations are crucial for effective model training, the inability to apply them in the LOFF framework poses a significant challenge. The obstacle lies in the impracticality of storing tensors from augmented images during Step 1, which would result in prohibitive storage demands. To address this drawback, we introduce tensor augmentations \(_{}(t)\) on the features \(t T\). A tensor augmentation module is applied dynamically online, before a batch of features is fed into the classifier, as depicted in 2. This method, named _Learning from Offline Foundation Features with Tensor Augmentations_ (LOFF-TA), allows augmentations to be used for overcoming the aforementioned obstacle with image augmentations.

In a standard setting, the objective for image classification is given by

\[*{arg\,min}_{}(y,F_{}(_{}(x)))\] (3)

where \(F_{}\) is the model to be trained on each sample \((x,y)\) from the dataset \(\) and \(_{}\) indicates stochastic image augmentations. LOFF-TA changes the optimization task to become

\[*{arg\,min}_{}(y,F_{}(_{proj}( _{}(t))))\] (4)

where \(_{}\) denotes our tensor augmentation operator. The stored features \(t T\) and projection module \(_{proj}\) remain the same as in LOFF.

### Tensor augmentations

Spatial relationships in image data are crucial for understanding the content of the image. Directly applying augmentations haphazardly to the unstructured output tokens from the foundation model may lead to undesirable results. A key aspect of our approach involves the utilization of spatial tensor augmentations during the training phase, as depicted in 2. These augmentations are chosen to consider the spatial relationships in the data, similar to how image augmentations operate. We apply spatial augmentations, denoted as \(_{}\), to foundation features \(t T\) after a reshaping operation. These augmentations are conceptually analogous to image augmentations, treating the foundation features as if they were low-resolution, hyper-spectral images. We select a set of _spatial augmentations_ suited for feature-level transformations, chosen to enhance the training process while maintaining the integrity of spatial relationships. We _flip_ by mirroring the tensor on its height or width axis, _resize_ it by upsampling or downsampling its spatial dimensions using linear interpolation. We _shear_ the tensor using nearest neighbor interpolation and _translate_ it by shifting along its spatial dimensions. We _rotate_ the tensor in its spatial dimensions around its spatial center using nearest neighbor interpolation. In addition to spatial augmentations, we apply additive _Gaussian noise_ with zero mean to the feature tensor, similar to . Although we considered channel augmentations, analogous to contrast or color augmentations in images, we did not find them to be beneficial. We also note that, like image augmentations, not all tensor augmentations types are appropriate in every setting2.

## 4 Experimental setup

To evaluate the effectiveness of LOFF-TA we benchmark over eleven datasets from various domains using different foundation models, model capacities and image resolutions.

### Models and implementation details

**Foundation models.** We employ two foundation model families: DINOv2  and CLIP  (implemented by OpenCLIP ) as the basis for our investigations. For the majority of our experiments, we utilize the ViT-B and ViT-G architectures.

**Classifiers.** LOFF and LOFF-TA train a lightweight classifier on the features from a foundation model. While, in principle, any classifier can be used in this role, our experiments use DeiT-S . The classifier is initialized using ImageNet pre-trained weights, as we found empirically this gave a significant improvement over random initialization . In some

    &  & **APTOS**\(\) & \(\) & **AID**\(\_\)Acc. & \(\) & **DDSM**\(\_\)AUC & \(\) & **ISIC**\(\_\)Rec. & \(\) & **NABirds**\(\_\)Acc. & \(\) & **TP**\(\_\)Im/sec \(\) & **Mem**\(\_\)Gb \(\) \\  & & \(n=3.662\) & \(n=10,000\) & \(n=10,239\) & \(n=25,333\) & \(n=48,562\) & Train (Infer) & Training \\   & Frozen + linear & 256 & 88.6 \(\) 0.3 & 90.9 \(\) 0.1 & 90.3 \(\) 0.2 & 51.7 \(\) 1.0 & 86.0 \(\) 0.1 & 153 (31) & **1.8** \\  & LOFF & 256 & 89.6 \(\) 0.2 & 91.9 \(\) 0.3 & 94.2 \(\) 1.2 & 70.8 \(\) 2.1 & 83.0 \(\) 0.1 & **228** (236) & 13.2 \\  & LOFF-TA & 256 & 90.4 \(\) 0.6 & 92.3 \(\) 0.7 & 94.4 \(\) 0.1 & 72.8 \(\) 1.7 & 83.5 \(\) 0.3 & 227 (236) & 13.2 \\  & LOFF + Pol & 519 & 89.4 \(\) 1.5 & 93.2 \(\) 0.6 & 95.3 \(\) 0.5 & 74.3 \(\) 1.5 & 86.2 \(\) 0.3 & 228 (61) & 13.2 \\  & LOFF-TA + Pol & 52 & **90.5 \(\) 1.0** & **93.7 \(\) 0.3** & **95.5 \(\) 0.1** & **77.4 \(\) 0.0** & **86.6 \(\) 0.4** & 227 (61) & 13.2 \\  & Unfrozen + linear & 256 & 90.5 \(\) 0.9 & 93.7 \(\) 0.8 & 93.3 \(\) 0.9 & 76.8 \(\) 0.7 & 85.8 \(\) 0.1 & 277 (313) & 28.2 \\   & Frozen + linear & 256 & 88.2 \(\) 0.3 & 92.8 \(\) 0.2 & 90.8 \(\) 0.6 & 66.4 \(\) 1.1 & 89.8 \(\) 0.2 & 14 (28) & **7.2** \\  & LOFF & 286 & 88.6 \(\) 1.5 & 93.3 \(\) 0.5 & 94.8 \(\) 1.6 & 7.1 \(\) 0.5 & 87.4 \(\) 0.2 & 222 (27) & 13.2 \\   & LOFF + Pol & 59.0 \(\) 0.4 & 94.0 \(\) 0.2 & 95.3 \(\) 0.1 & 76.0 \(\) 0.7 & 88.5 \(\) 0.2 & 218 (27) & 13.2 \\   & LOFF + Pol & 512 & 90.3 \(\) 0.6 & 94.1 \(\) 0.2 & 95.4 \(\) 0.4 & 74.0 \(\) 1.6 & 88.8 \(\) 0.1 & 222 (27) & 13.2 \\   & LOFF-TA + Pol & **91.8 \(\) 0.3** & **94.6 \(\) 0.2** & **96.3 \(\) 0.6** & **79.9 \(\) 0.2** & 90.1 \(\) 0.2 & 218 (7) & 13.2 \\   & Unfrozen + linear & 256 & 89.6 \(\) 0.6 & 96.2 \(\) 0.1 & 96.7 \(\) 0.2 & 87.3 \(\) 1.3 & 90.2 \(\) 0.1 & 6 (28) & 345.2 1 \\   

Table 1: _Main results._ We train models on features extracted by DINOv2  ViT-B and ViT-G models. We report the results using LOFF (no augmentations) and LOFF-TA (with tensor augmentations). We consider features extracted from \(256 256\) and \(512 512\) images (using pooling as described in 3.1). _Frozen + linear_ and _Unfrozen + linear_ are points of comparison consisting of a frozen/unfrozen foundation model with a linear layer trained on images directly, with image augmentations.

[MISSING_PAGE_FAIL:6]

learning (_unfrozen + linear_). Both employ standard image augmentations. In contrast, LOFF operates without augmentations, while LOFF-TA introduces tensor augmentations. We also explore the effects of pooling on foundational features, increasing image resolution from 256 to 512, to understand how these adjustments influence the performance and efficiency.

Our observations reveal several trends. Firstly, all LOFF and LOFF-TA variants (with an exception of NABirds) surpass the baseline in performance, with only a slight increase in memory usage but significantly faster training. Secondly, LOFF-TA consistently outperforms LOFF, confirming the importance of tensor augmentations. Moreover, upgrading to a larger foundation model (from ViT-B to ViT-G) doesn't alter memory or training speed. Pooling and working with higher resolution further improves performance, again without affecting memory or throughput. Remarkably, in many cases (6 out of 10), LOFF-TA with pooling exceeds the performance of the intended upper-bound model (_unfrozen + linear_). Finally, it's worth noting the training speed and memory efficiency of LOFF and LOFF-TA compared to fine-tuning the foundation model (_unfrozen + linear_); our approach offers a 37\(\) acceleration during training, and a remarkable savings in memory as well - in fact, ViT-G is too large to fine-tune on a conventional GPU with a batch size of 64.

### Further evidence

In Table 2, we continue our analysis in a similar fashion to Table 1, but in this case focusing on seven standard visual object recognition datasets. Our focus remains on assessing performance, throughput (TP), and memory usage (Mem.), but with image resolution of 256. The analysis compares LOFF, LOFF-TA, _frozen + linear_, and _unfrozen + linear_, and introduces _frozen + DeiT-S_ as a benchmark for image vs. tensor augmentations (see Section 5.3).

The findings in Table 2 reinforce the patterns observed in Table 1. LOFF-TA maintains its superiority over LOFF, highlighting the efficacy of tensor augmentations. It's important to note that in this set of experiments, the best performing LOFF-TA + Pooling configuration using high-resolution images is not considered due to the datasets' inherent resolution limit of 256. Despite this, LOFF-TA generally matches or surpasses the baseline _frozen + linear_ in performance, while delivering a notable increase in throughput. Although _frozen + linear_ claims the smallest memory footprint, LOFF and LOFF-TA again show significant savings compared to fine-tuning a foundation model (_unfrozen + linear_). Comparing foundation models of similar capacity, we notice that DINOV2 outperforms OpenCLIP in five of the seven datasets using LOFF-TA. Finally, we once again see that swapping the foundation model (between DINOV2 ViT-B, OpenCLIP ViT-B, and DINOV2 ViT-G) results in no appreciable change in throughput or memory consumption for LOFF-TA, only differences in performance.

### Image vs. tensor augmentations

Looking at Table 2 again, we investigate the effect of image augmentations versus tensor augmentations. LOFF-TA and _frozen + DeiT-S_ share the same architecture (a cascaded model that consists of a frozen foundation model with an appended DeiT-S), and in both cases the foundation is frozen - the only difference is LOFF-TA uses tensor augmentations while _frozen + DeiT-S_ uses image augmentations. We also report results (Table 5 in the Appendix) when we unfreeze the foundation model in the cascaded setting for both OpenCLIP and DINOV2 for completeness. In Table 2, we observe that image augmentations outperform

   Foundation CLS & Layer norm & Gaussian noise & Spatial aug. & Trivial augment  & **Oxford-III Pet** & **Caltech-101** \\  ✗ & ✓ & ✓ & ✓ & ✗ & 94.1 & 95.6 \\ ✓ & ✗ & ✓ & ✓ & ✗ & 94.9 & 94.8 \\ ✓ & ✓ & ✗ & ✗ & ✗ & 94.9 & 95.4 \\ ✓ & ✓ & ✗ & ✓ & ✗ & 95.1 & 96.2 \\ ✓ & ✓ & ✓ & ✓ & ✗ & 95.2 & 96.4 \\ ✓ & ✓ & ✗ & ✗ & ✓ & **95.4** & **96.8** \\   

Table 3: _Ablations_. We systematically remove components of LOFF-TA to investigate the impact of each contribution. Results are reported with DINOV2  as the foundation model, adding trivial augment  as an augmentation strategy.

tensor augmentations. As one might expect, tensor augmentations such as tensor rotation or cropping can not replicate the exact effects of image rotation or cropping since foundation models are not linear operators. Yet, the performance impact is surprisingly less than anticipated, which, considering LOFF-TA's significant computational savings, is noteworthy.

### Ablation study

In this section, we try to understand the impact of each contribution to LOFF-TA. Utilizing DINOv2 , we conduct a study where components are systematically removed and then tested on the Oxford-III Pet and Caltech-101 datasets. Results are presented in Table 3.

**CLS token.** A perhaps obvious, but critical, insight from our study is the important role played by the foundation model's CLS token in contributing to classifier performance. When this token, representing global information, is integrated into the classifier training, it proves to be a key contributor to performance gains. However, the choice of how to integrate it was not trivial. We opted to integrate the offline CLS token from the foundation model with the learned CLS token of the classifier model by summation. Other possible ways to incorporate it could be to initialize the classifier's CLS to the offline foundation CLS, or concatenate them - although our non-exhaustive experiments testing these approaches were inferior.

**Layer norm.** We applied a Layer Norm  operation in the projection layer at the stem of the classifier. Similar to the CLS token ablation, we find that adding a layer norm operation before passing the foundation features to the classifier boosts performance. By centering input features, we believe the normalization plays a pivotal role similar to that in Dual Patchnorm , aligning and standardizing the input.

**Pooling.** Table 1 shows that pooling larger image features enhances performance without extra computational costs, enabling the use of large models for high-resolution tasks. In Appendix Table 6, we compare max and average pooling, finding both perform similarly, with max pooling slightly outperforming in larger models, possibly due to better noise reduction. Thus, max pooling is recommended for larger models. While this work focuses on pooling, alternative dimensionality reduction methods like strided convolutions or bi-linear interpolation could also be effective.

**Augmentations.** Since the cached features contain long-range spatial information that may potentially be harmed by our tensor augmentations, it is important to assess if these augmentations have a meaningful contribution to the performance of LOFF-TA. Comparing Row 3 and Row 4 of Table 3, we see that adding spatial augmentations results in a significant boost in performance. A smaller boost is observed when Gaussian noise is added in Row 5. Replacing our augmentations with Trivial augment  provides a further boost to performance, although this setup was not used in our other experiments.

### LOFF-TA vs. foundation adaptation methods

LOFF-TA enables practitioners to use large foundation models _without any modifications_. A class of methods exists that modify foundation models for new tasks, so-called adaptation methods. Adaptation methods can be used in conjunction with LOFF-TA, but we also provide a comparison between them in Table 4. The results show that standalone LOFF-TA achieves competitive performance with VPT , Adaptformer  and SSF . When LOFF-TA is combined with these methods, we observe noticeable improvements across the board, demonstrating that computationally efficient SOTA performance can be achieved by adapting foundation models and then applying LOFF-TA.

## 6 Discussion

**Performance-efficiency trade-off.** The aim of this paper is to consider the use of foundation models in a resource-limited setting. To do so, we propose to work with cached foundational features. The benefits of doing so are that training speed is significantly accelerated (up to 37\(\)), and GPU memory usage is significantly reduced (up to 26\(\)). Of course, these benefitscome with trade-offs. In most cases, LOFF-TA will perform slightly worse than directly fine-tuning the foundation model, although we did observe some cases where LOFF-TA was superior. Also, the computational cost savings at training time do not translate to inference.

An important benefit of LOFF-TA is that it affords flexibility, allowing practitioners to choose the most suitable foundation model for their task from a range of sizes and pretraining methods (refer to Table 2), including the capacity to handle high-resolution images (see Table 1). The caching and pooling of features makes these different choices come with equivalent computational costs during training, determined by the compact classifier.

**Societal impact:** As foundation models grow, their computational demands are expected to increase, potentially creating a digital divide where advanced models are accessible only to well-resourced organizations, excluding smaller entities and individual researchers. This trend underscores the importance of developing efficient methods to utilize these models, ensuring broad access and fostering progress in various application areas. There is significant potential to impact fields like medical imaging and remote sensing, which can greatly benefit developing regions and marginalized groups. But these applications often require high-resolution image processing, which is resource-intensive. LOFF-TA facilitates wider, fairer access to sophisticated foundation models in resource-limited settings.

**Limitations:** LOFF-TA is a training strategy meant for low resource settings. Given enough computational resources, full fine-tuning will generally outperform LOFF-TA or adaptation methods like SSF . Another limitation of LOFF-TA is that at inference time it is less efficient than standalone foundation models. However, we note that due to their latency, foundation models are costly to be deployed at scale without distillation  (or some other measure) to limit cost which would also alleviate the limitation for LOFF-TA.

## 7 Conclusion

Foundation models have significantly impacted the community and will likely become more crucial as they grow in size and capability. However, adapting these models for specific tasks is increasingly challenging due to their high resource demands. Revisiting the classical machine learning paradigm of _perceive, then reason_ is pragmatic in this context. Using foundation models as powerful feature extractors allows us to benefit from their rich representations, while at the same time mitigating computational costs by training a lightweight classifier on their cached features. LOFF-TA achieves a low memory footprint and high throughput during training, regardless of the chosen foundation model or input image size. It is particularly beneficial for high-resolution image processing when pooling is applied, allowing LOFF-TA to outperform linear classifiers using frozen foundation models and compete with or surpasses fine-tuned foundation models.

**Acknowledgements.** This work was supported by the Wallenberg AI, Autonomous Systems and Software Program (WASP) and the Development and Promotion of Science and Technology Talents Project. We acknowledge the Berzelius computational resources provided by the Knut and Alice Wallenberg Foundation at the National Supercomputer Centre.

  
**Method** & **APTOS**, \(\) & **AID**, Acc. \(\) & **DDSM**, AUC \(\) & **ISIC**, Rec. \(\) & **NABirds**, Acc. \(\) \\  & \(n=3,662\) & \(n=10,000\) & \(n=10,239\) & \(n=25,333\) & \(n=48,562\) \\  LOFF-TA & \(90.4 0.6\) & \(92.3 0.7\) & \(94.4 0.1\) & \(72.8 1.7\) & \(83.5 0.3\) \\  VPT  & \(89.6 0.1\) & \(93.0 0.1\) & \(91.4 0.3\) & \(75.2 1.1\) & \(85.8 0.2\) \\ VPT + LOFF-TA & \(90.8 0.4\) & \(93.1 0.3\) & \(92.4 0.3\) & \(79.7 0.9\) & \(83.7 0.1\) \\  SSF  & \(90.2 0.1\) & \(92.1 0.2\) & \(96.7 0.6\) & \(76.4 0.9\) & \(88.2 0.0\) \\ SSF + LOFF-TA & \(91.1 0.7\) & \(93.1 0.0\) & \(97.2 0.3\) & \(81.6 1.5\) & \(85.6 0.1\) \\  AdaptFormer  & \(89.6 0.6\) & \(94.3 0.1\) & \(91.8 0.8\) & \(82.6 1.0\) & \(87.1 0.3\) \\ AdaptFormer + LOFF-TA & \(90.0 0.3\) & \(94.3 0.2\) & \(93.2 0.5\) & \(83.5 0.3\) & \(85.3 0.2\) \\   

Table 4: _LOFF-TA can be used alongside foundation adaptation methods. Below we report results using ViT-B. Standalone LOFF-TA performs comparable with other foundation adaptation methods and can easily be combined with them to further enhance performance._