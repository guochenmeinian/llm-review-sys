# A Variational Perspective on High-Resolution ODEs

Hoomaan Maskan

Umea University

hoomaan.maskan@umu.se

Konstantinos C. Zygalakis

University of Edinburgh

k.zygalakis@ed.ac.uk

Alp Yurtsever

Umea University

alp.yurtsever@umu.se

###### Abstract

We consider unconstrained minimization of smooth convex functions. We propose a novel variational perspective using forced Euler-Lagrange equation that allows for studying high-resolution ODEs. Through this, we obtain a faster convergence rate for gradient norm minimization using Nesterov's accelerated gradient method. Additionally, we show that Nesterov's method can be interpreted as a rate-matching discretization of an appropriately chosen high-resolution ODE. Finally, using the results from the new variational perspective, we propose a stochastic method for noisy gradients. Several numerical experiments compare and illustrate our stochastic algorithm with state of the art methods.

## 1 Introduction

Smooth convex minimization is a fundamental class in optimization with broad applications and a rich theoretical foundation that enables the development of powerful methods. In fact, the theory and methods developed for other problem classes, such as non-smooth convex or smooth non-convex optimization, often build upon the work done in smooth convex optimization. As a result, the study of smooth convex minimization has a significant impact on the broader field of optimization. Over the last two decades, first-order methods -those relying solely on gradient information, in contrast to methods like Newton's that require Hessian information- have seen a lot of interest both in theory and applications due to their efficiency and adaptability for large-scale data-driven applications. Among these, gradient descent stands as one of the simplest and oldest. When equipped with an appropriate step-size, gradient descent guarantees a suboptimality gap (objective residual) of order \((1/k)\) after \(k\) iterations.

In his seminal work, Nesterov (1983) has shown that the gradient method can achieve faster rates by incorporating momentum deviations. Nesterov's accelerated gradient algorithm (NAG) ensures a convergence rate of \((1/k^{2})\) which is an order of magnitude faster than the gradient descent. Remarkably, this rate matches information-theoretical lower bounds for first-order oracle complexity, meaning that NAG is optimal and no other first-order method can guarantee an essentially faster convergence rate (Nesterov, 2003).

The original proof of Nesterov (1983), known as the _estimate sequence technique_, is a highly algebraic and complex procedure, difficult to interpret, and provides arguably limited insight into why momentum deviations help with the convergence rates (Hu and Lessard, 2017). Therefore, many researchers have tried to provide a better understanding of momentum-based acceleration through different perspectives. For example, Su et al. (2016); Shi et al. (2021), and Sanz Serna and Zygalakis (2021) consider a _continuous time perspective_; Lessard et al. (2016) and Fazlyab et al. (2018) use integral quadratic constraints and control systems with non-linear feedbacks; Muehlebach and Jordan (2019, 2022, 2023) present a dynamical perspective; Attouch et al. (2020, 2021) utilize inertial dynamic involving both viscous damping and Hessian-driven damping; Zhu and Orecchia (2014) view acceleration as a linear coupling of gradient descent and mirror descent updates; and Ahn and Sra (2022) provide an understanding of the NAG algorithm through an approximation of the proximal point method. Our work is focused on the _continuous-time perspective_.

In [Su et al., 2016], the authors derive a second-order ordinary differential equation (ODE) that exhibits trajectories similar to those of the NAG algorithm in the limit of an infinitesimal step-size \(s 0\). This result has inspired researchers to analyze various ODEs and discretization schemes to gain a better understanding of the acceleration phenomenon. Notably, Wibisono et al.  demonstrate that the ODE presented in [Su et al., 2016] is a special case of a broader family of ODEs that extend beyond Euclidean space. They achieve this by minimizing the action on a Lagrangian that captures the properties of the problem template, an approach known as the _variational perspective_, and they discretize their general ODE using the _rate-matching_ technique. In a related vein, Shi et al.  proposed substituting the low-resolution ODEs (LR-ODEs) introduced in [Su et al., 2016] with high-resolution ODEs (HR-ODEs) which can capture trajectories of NAG more precisely.

Our main contribution in this paper is a novel extension of the variational perspective for HR-ODEs. A direct combination of these two frameworks is challenging, as it remains unclear how the Lagrangian should be modified to recover HR-ODEs. To address this problem, we propose an alternative approach that preserves the Lagrangian but extends the variational perspective. More specifically, instead of relying on the conventional Euler-Lagrange equation, we leverage the forced Euler-Lagrange equation that incorporates external forces acting on the system. By representing the damped time derivative of the potential function gradients as an external force, our proposed variational perspective allows us to reconstruct various HR-ODEs through specific damping parameters. More details are provided in Section 2.

Other contributions of our paper are as follows: In Section 3, we show that our proposed variational analysis yields a special representation of NAG leading to superior convergence rates than [Shi et al., 2019] in terms of gradient norm minimization. In Section 4, we propose an HR-ODE based on the rate-matching technique. We demonstrate that NAG can be interpreted as an approximation of the rate-matching technique applied to a specific ODE. Then, in Section 5, we extend our analysis to a stochastic setting with noisy gradients, introducing a stochastic method that guarantees convergence rates of \(}(1/k^{1/2})\) for the expected objective residual and \(}(1/k^{3/4})\) for the expected squared norm of the gradient. Finally, in Section 6, we present numerical experiments to demonstrate the empirical performance of our proposed method and to validate our theoretical findings.

**Problem template and notation.** We consider a generic unconstrained smooth convex minimization template:

\[_{x^{n}}f(x)\] (1)

where \(f:^{n}\) is convex and \(L\)-smooth, meaning that its gradient is Lipschitz continuous:

\[\| f(x)- f(y)\| L\|x-y\|, x,y^{n},\] (2)

with \(\|\|\) denoting the Euclidean norm. We denote the class of \(L\)-smooth convex functions by \(_{L}\).

Throughout, we assume that the solution set for Problem (1) is non-empty, and we denote an arbitrary solution by \(x^{*}\), hence \(f^{*}:=f(x^{*}) f(x)\) for all \(x^{n}\).

**The NAG Algorithm.** Given an initial state \(x_{0}=y_{0}^{n}\) and a step-size parameter \(s>0\), the NAG algorithm updates the variables \(x_{k}\) and \(y_{k}\) iteratively as follows:

\[ y_{k+1}&=x_{k}-s f(x_{k}),\\ x_{k+1}&=y_{k+1}+(y_{k+1}-y_{k}).\] (NAG)

**Low-Resolution and High-Resolution ODEs.** Throughout, by LR-ODE, we refer to the second-order ODE introduced and studied in [Su et al., 2016], which exhibits a behavior reminiscent of momentum-based accelerated methods like Heavy Ball (HB) and NAG in the limit of step-size \(s 0\). Unfortunately, this generic ODE cannot distinguish the differences between HB and NAG. It is important to note, however, that the guarantees of HB and NAG differ significantly in discrete time. Specifically, HB has guarantees for only a specific subset of Problem (1), whereas NAG guarantees a solution for all instances of (1) with appropriate step sizes. Therefore, it's worth noting that the LR-ODE may not fully capture certain important aspects of the NAG trajectory. Conversely, by HR-ODEs, we refer to the ODEs proposed in [Shi et al., 2021], which extend the LR-ODE by incorporating gradient correction terms. Through this extension, HR-ODEs provide a more precise representation of the trajectory for these distinct algorithms.

## 2 External Forces and High-Resolution ODEs

Consider the Lagrangian

\[(X_{t},_{t},t)=e^{_{t}+_{t}}(\|e^{- _{t}}_{t}\|^{2}-e^{_{t}}f(X_{t})).\] (3)

Here, \(_{t}^{d}\) is the first time-derivative of \(X(t)\), and \(_{t},_{t},_{t}:\) are continuously differentiable functions of time that correspond to the weighting of velocity, the potential function \(\), and the overall damping, respectively. Using variational calculus, we define the action for the curves \(\{X_{t}:t\}\) as the functional \((X)=_{}(X_{t},_{t},t)dt\). In the absence of external forces, a curve is a stationary point for the problem of minimizing the action \((X)\)_if and only if_ it satisfies the Euler Lagrange equation \(\{}{ X_{t}}(X_{t},_{t},t )\}=}{ X_{t}}(X_{t},_{t},t)\). This was used in (Wibisono et al., 2016; Wilson et al., 2021) to calculate the LR-ODEs for convex and strongly convex functions1. Note that the Euler-Lagrange equation as written, does not account for an external force, \(F\) (which is non-conservative). In this case, the Euler-Lagrange equation should be modified to the forced Euler-Lagrange Equation

\[\{}{_{t}}(X_{t}, _{t},t)\}-}{ X_{t}}(X_{t},_{t},t)=F,\] (4)

which itself is the result of integration by parts of Lagrange d'Alembert principle (Campos et al., 2021). Using the Lagrangian (3) we have

\[}{_{t}}(X_{t},_{t},t)=e^{ _{t}}(e^{-_{t}}_{t}),}{  X_{t}}(X_{t},_{t},t)=-e^{_{t}+_{t}+_{t}}(  f(X_{t})).\] (5)

Substituting (5) in (4) gives

\[_{t}+(_{t}-_{t})_{t}+e^{2_{t}+ _{t}} f(X_{t})=e^{_{t}-_{t}}F.\] (6)

In what follows, we will present various choices of the external force \(F\), including two for convex functions and one for strongly convex functions.

### Convex Functions

**First choice for convex functions.** Let us first consider the following external force:

\[F=-e^{_{t}}[e^{-_{t}} f(X)].\] (7)

In this case, (6) becomes

\[_{t}+(_{t}-_{t})_{t}+e^{2_{t}+ _{t}} f(X_{t})=-e^{_{t}}[e^{- _{t}} f(X_{t})].\] (8)

It is possible to show the convergence of \(X_{t}\) to \(x^{*}\) and establish a convergence rate for this as shown in the following theorem (proof in Appendix A.1). The proof of this theorem (and the subsequent theorems in this section) is based on the construction of a suitable Lyapunov function for the corresponding ODE (_e.g._ see (Siegel, 2019; Shi et al., 2019; Attouch et al., 2020, 2021)). This non-negative function attains zero only at the stationary solution of the corresponding ODE and decreases along the trajectory of the ODE (Khalil, 2002). For this theorem (and the subsequent theorems), we will define a proper Lyapunov function and prove sufficient decrease of the function \(f\) along the corresponding ODE trajectory.

**Theorem 2.1**.: _Under the ideal scaling conditions \(_{t} e^{_{t}}\) and \(_{t}=e^{_{t}}\), \(X_{t}\) in (8) will satisfy_

\[f(X_{t})-f(x^{*})(e^{-_{t}})\]

_for \(f_{L}\)._Now, choosing parameters as

\[_{t}=(n(t)),_{t}=(q(t)/n(t)),_{t}=e^{ _{t}}=n(t),\] (9)

in (8) gives

\[\{_{t}+(n(t)-(t)}{n(t)}+ ^{2}f(X_{t}))_{t}+(n(t)q(t)-(t)}{n(t)})  f(X_{t})=0,\\ F=-e^{_{t}}[e^{-_{t}} f(X)],.\] (10)

which reduces to

\[_{t}+(+^{2}f(X_{t}))_{t}+ (Cp^{2}t^{p-2}+}{t}) f(X_{t})=0,\] (11)

by taking \(n(t)=,q(t)=Cpt^{p-1}\).

_Remark 2.1.1_.: For \(p=2,C=1/4\), equation (11) corresponds to the (H-ODE) in (Laborde and Oberman, 2020).

**Second choice for convex functions.** Now, we consider an external force given by

\[F=-e^{_{t}-_{t}}[e^{-(_{t}-_{t })} f(X_{t})]\] (12)

In this case, replacing \(F\) in (6) gives

\[_{t}+(_{t}-_{t})_{t}+e^{2_{t}+ _{t}} f=-e^{_{t}-_{t}}[e^{-(_ {t}-_{t})} f(X_{t})].\] (13)

We establish the following convergence result, and the proof can be found in Appendix A.2.

**Theorem 2.2**.: _Under the modified ideal scaling conditions \(_{t} e^{_{t}},_{t}=e^{ t}, _{t} e^{_{t}}_{t}+2_{t}_{t},\)\(X_{t}\) in (13) will satisfy_

\[f(X_{t})-f(x^{*})(}+e^{-2 _{t}}_{t}}),\]

_for \(f_{L}\)._

Taking the same parameters as in (9) gives

\[\{_{t}+(n(t)-(t)}{n(t)}+ ^{2}f(X_{t}))_{t}+(n(t)q(t)-((t)}{n(t)}- (t)n(t)-(t)q(t)}{n(t)q(t)})) f(X_{t})=0,\\ F=-e^{_{t}-_{t}}[e^{-(_{t}-_{t })} f(X_{t})]..\] (14)

which reduces to

\[_{t}+(+^{2}f(X_{t}))_{t} +(Cp^{2}t^{p-2}+(p+1)}{t}) f(X_{t})=0,\] (15)

for \(n(t)=p/t,q(t)=Cpt^{p-1}\).

_Remark 2.2.1_.: Note that setting \(C=1/4,p=2\) will lead to the ODE

\[_{t}+(+^{2}f(X_{t}))_{t}+ (1+}{t}) f(X_{t})=0.\] (16)

This ODE was discretized using the Semi-Implicit Euler (SIE) and the Implicit Euler (IE) discretization schemes in (Shi et al., 2019). The corresponding optimization algorithms were shown to accelerate. In addition, note that the convergence rate proved in Theorem 2.2 is faster than its counterpart in Theorem 2.1.

### Strongly Convex Functions

Our analysis is applicable to strongly convex functions as well. Consider the Lagrangian proposed in (Wilson et al., 2021) for strongly convex functions

\[(X_{t},_{t},t)=e^{_{t}+_{t}+_{t}}( \|e^{-_{t}}_{t}\|^{2}-f(X_{t})).\] (17)Then, the forced Euler-Lagrange equation (4) becomes

\[+(-_{t}+_{t}+_{t})+e^{2_{t}} f(X)=+_{t}+_{t}}}.\] (18)

Taking \(F=-e^{_{t}+_{t}}(e^{_{t}} f(X_{t}))\) in (18) gives

\[+(-_{t}+_{t}+_{t})+e^{2_{t}} f(X)=e^{2_{t}-_{t}}(e^{_{t}} f(X_{t}))}{}.\] (19)

We can establish the following convergence result for \(X_{t}\) in (19) to the unique minimizer \(x^{*}\). The proof of this result is deferred to Appendix A.3.

**Theorem 2.3**.: _Under the modified ideal scaling conditions \(_{t}=\), \(_{t} e^{_{t}}\), \(_{t}=e^{_{t}}\), and \(_{t} 0\)\(X_{t}\) in (19) satisfies_

\[f(X_{t})-f(x^{*})(e^{-_{t}})\] (20)

_for \(\)-strongly convex function \(f\)._

_Remark 2.3.1_.: Taking \(=()\) and \(_{t}=_{t}=t\) in (19) gives the NAG's corresponding HR-ODE

\[_{t}+(2+^{2}f(X_{t}))_{t}+(1+) f(X_{t})=0,\] (21)

for \(\)-strongly convex function \(f\) as in .

## 3 Gradient Norm Minimization of NAG

One of the implications of our variational study on HR-ODEs in Section 2 was the ODE (14). Reformulating this ODE gives

\[&_{t}=n(t)(V_{t}-X_{t})- f(X_{t})\\ &_{t}=-q(t) f(X_{t})-(t)n(t)-(t)q(t)} {n^{2}(t)q(t)} f(X_{t}).\] (22)

Applying the SIE on (22) for \(X(t) X(t_{k}),V(t) V(t_{k}),n(t_{k})=p/t_{k},q(t_{k})=Cpt_{k}^{ p-1},\)\(p=2,t_{k}=k\) and \(C=1/4\) gives

\[&x_{k+1}=x_{k}+(v_{k}-x_{k+1})-s f(x_{k}),\\ &v_{k+1}=v_{k}-(ks) f(x_{k+1})-s f(x_{k+1}),\] (23)

which is exactly the NAG algorithm. The interpretation of the NAG method as the SIE discretization of (22) has not been discussed before in the literature (see  for the four most studied representations). It is precisely this connection with the ODE (22) though that inspires our choice of the Lyapunov function which in turn gives rise to a faster convergence rate. The following theorem formulates this result. The proof is in Appendix A.4 and it is based on the discrete Lyapunov analysis of (23). Similar convergence rate was very recently found by  through _implicit velocity_ perspective on HR-ODEs which uses a different Lyapunov analysis than this work.

**Theorem 3.1**.: _Consider the update (23). Then, if \(f_{L}\) we have_

\[_{0 i k-1}\| f(x_{i})\|^{2}s^{2}}\|x_{0} -x^{*}\|^{2},\]

_and_

\[f(x_{k})-f(x^{*})\|x_{0}-x^{*}\|^{2}\]

_for \(0 s 1/L\), \(v_{0}=x_{0}\), and any \(x_{0}^{n}\)._

_Remark 3.1.1_ (Comparison with state of the art).: The rate in Theorem 3.1 is improved compared to the previous rate found in , which is

\[_{0 i k}\| f(x_{i})\|^{2}s^{2}}\|x_ {0}-x^{*}\|^{2},\]

for \(0<s 1/(3L)\) and \(k 0\).

## 4 Rate-Matching Approximates the NAG Algorithm

The ODE (11) when \(p=2,C=1/4\) is equivalent to

\[\{_{t}=(Z_{t}-X_{t})- f(X_ {t}),\\ _{t}=- f(X_{t})..\] (24)

which can be viewed as a perturbation of the LR-ODE

\[\{_{t}=(Z_{t}-X_{t}),\\ _{t}=- f(X_{t})..\] (25)

We now show that when the rate-matching technique in (Wibisono et al., 2016) is applied to (25), the final algorithm reveals similar behavior as (24). This result is then used to approximately recover the NAG method using rate-matching discretization.

Applying the rate-matching discretization on the ODE (25) gives

\[\{x_{k+1}=z_{k}+y_{k},\\ y_{k}=x_{k}-s f(x_{k}),\\ z_{k}=z_{k-1}-sk f(y_{k})..\] (26)

which has a convergence rate of \((1/(sk^{2}))\)(Wibisono et al., 2016). In the following proposition, we study the behavior of (26) in limit of \(s 0\). The proof is given in Appendix A.5.

**Proposition 4.1**.: _The continuous-time behavior of (26) is approximately_

\[_{t}+(+^{2}f(X_{t}))_{t}+ (1+}{t}) f(X_{t})=0,\] (27)

_which is the the high-resolution ODE (11)._

The ODE (27) is the same as (24). In this sense, rate-matching implicitly perturbs the LR-ODE. The question that naturally arises is that when do we recover the HR-ODE (16) (which corresponds to the NAG algorithm through the SIE discretization) from the rate-matching technique? To answer, we will first perturb the LR-ODE (25) in the second line. Then, the rate-matching discretization is applied. Perturbing (25) gives

\[\{_{t}=(Z_{t}-X_{t}),\\ _{t}=- f(X_{t})- f(X_{t})..\] (28)

Discretizing (28) using the rate-matching method with \(t_{k}=k\) gives

\[\{x_{k+1}=z_{k}+y_{k},\\ y_{k}=x_{k}-s f(x_{k}),\\ z_{k}=z_{k-1}-(k+2) f(y_{k}),.\] (29)

which is extremely close to the NAG algorithm. Indeed, replacing \( f(y_{k})\) with \( f(x_{k})\) in the third line of (29) gives exactly the NAG method. Typically, \(x_{k}\) and \(y_{k}\) are very close. This is due to \(x_{k}\) and \(y_{k}\) having a difference of order \(s\). Since in continuous time \(X(t_{k}) Y(t_{k})\) (due to \(s 0\)), the HR-ODE of (29) is (16). This means that the corresponding HR-ODE of (29) is

\[\{_{t}=(Z_{t}-X_{t})- f (X_{t}),\\ _{t}=- f(X_{t})- f(X_{t})..\] (30)

which is the perturbed version of (28) and the HR-ODE associated with the NAG algorithm.

## 5 Stochastic Extensions

In this section, we propose a stochastic variation of (23). We model noisy gradients by adding i.i.d noise \(e_{k}\) with variance \(^{2}\) to the gradients. Consider the update

\[\{x_{k+1}=x_{k}+}{t_{k}}(v_{k}-x_{k+1})- }{}( f(x_{k})+e_{k}),\\ v_{k+1}=v_{k}-(t_{k}s_{k}+}{})( f(x_ {k+1})+e_{k+1}).\] (31)with \( 2\). This update reduces to (23) when \(e_{k}=0,s_{k}==/,t_{k}=k\). We will refer to (31) as the Noisy NAG (NNAG) algorithm. NNAG is interesting due to its capability of dealing with perturbed gradients. This is the case in practical methods _e.g._ SGD (Bottou, 2010), SAG (Schmidt et al., 2017), SAGA (Defazio et al., 2014), SVRG (Johnson and Zhang, 2013), and etc. The following convergence result holds for NNAG, and its proof is in Appendix A.6.

**Theorem 5.1**.: _Suppose \(f_{L}\) and consider the NNAG method detailed in (31) with the following parameter choices:_

\[ 2,\ \ s_{k}=},\ \ \ \ t_{k}=_{i=1}^{k}s_{i}  c}\ \ \ \ <1.\] (32)

_We define the critical iteration \(k_{0}\) as the smallest positive integer that satisfies_

\[k_{0}}+}{8}(_{i =1}^{k_{0}}})^{2}}^{1/}.\] (33)

_Then, the following bounds hold for all \(k k_{0}:\)_

\[[f(x_{k})]-f(x^{*})[(k_{0})]+^{4}}{(1-)^{2}}[k_{0}^{3-4}-k^{3-4} ]+^{3}}{2(1-)(3-2)} [k_{0}^{2-3}-k^{2-3}]+^{2} ^{2}}{2(2-1)}[k_{0}^{1-2}-k^{1-2} ]}{}{4(1-)^{2}}((k^{1-}-1)^{2})+}{2(1-)}(k^{1-}-1)}}\]

_if \(>3/4\), and_

\[[f(x_{k})]-f(x^{*})[(k_{0})]+2 ^{2}^{4}[(}{k_{0}})]+^{3}}{}[k_{0}^{-1/4}-k^{-1/4}]+ ^{2}^{2}}{L}[k_{0}^{-1/2}-k^{-1/2}]}{4^{2} ((k^{1/4}-1)^{2})+}{}(k^{1/4}-1 )}}\] (34)

_if \(=3/4\) with \((k)=(^{2}}{4}+}{2})(f(x_{k})-f( x^{*}))+\|v_{k}-x^{*}\|^{2}\)._

Next, we show that slight modifications to the NNAG method gives rise to another stochastic method with a similar convergence rate as the NNAG algorithm, but more transparent proof (see Appendix A.7). This proof results in a convergence rate for \([_{0 i k-1}\| f(x_{i})\|^{2}]\) with a rate of \(O((k)/k^{(3/4)})\). It remains a future work to show similar result for the NNAG update.

**Theorem 5.2**.: _Suppose \(f_{L}\) and consider the following modification of the NNAG method_

\[\{x_{k+1}=x_{k}+}{t_{k}}(v_{k}-x_{k+1})- }{}( f(x_{k})+e_{k}),\\ v_{k+1}=v_{k}-((t_{k})s_{k})( f(x_{k+1})+e_{k+1})-s_{k}^{2}(  f(x_{k+1})+e_{k+1})..\] (35)

_with the same parameter choices as in (32). Then, the following convergence bounds hold:_

\[[f(x_{k})]-f(x^{*})\{[ (0)]+^{2}}{2}[16(1+(k))+32+6 ]}{2c^{2}[2(k^{4}-1)^{2}+k^{-(k^{4}-1)} ]}&=\\ [(0)]+^{2}}{8}[ (4-3)}+ {(1-)(4-1)}+]}{ }{2(1-)}[-1)^{2}}{2(1-)}+k^{- }(k^{1-})-1]}&1>>.,\] (36)

_with \([(0)]=\|v_{0}-x^{*}\|^{2}\). In addition, for \(=3/4\) we have_

\[[_{0 i k-1}\| f(x_{i})\|^{2}][(0)]+(2c^{4}^{2})(2(k)+6+ )}{16c^{3}(-1}{3}+k^{1/4}-+k^{1/2} )}.\] (37)

_Remark 5.2.1_.: The algorithm in (35) reduces to (23) when \(e_{k}=0,s_{k}==1/,t_{k}=k\).

_Remark 5.2.2_ (Connection to NAG).: When there is no noise (\(=0\)) we can also allow parameter \(\) to be zero. This is because we do not need to alleviate the effect of the noise with a decreasing step-size. Therefore, we recover the convergence rate of \(O(1/k^{2})\) for the NAG method when \(c=1/\).

_Remark 5.2.3_ (Comparison with (Laborde and Oberman, 2020)).: Laborde et al., proposed a stochastic method with noisy gradients. Their method uses another presentation of the NAG algorithm (the presentation from EE discretization). Our rate (36) has the same order of convergence as (Laborde and Oberman, 2020). However, their analysis did not achieve the bound (37) (see (Laborde and Oberman, 2020) Appendix C.4).

_Remark 5.2.4_ (Comparison between Theorems 5.1 and 5.2).: The rate in (34) is asymptotically similar to (36). However, the transient behavior of (34) is faster than both (36) and the rate in (Laborde and Oberman, 2020) when \(L\) is large (see Figure 1 top row). This is due to the tuning parameter \(\) which is usually set to \(L\) or higher. This scenario (Large \(L\)) often happens in practice, _e.g._ in training a two-layer Convolutional Neural Network (CNN) (Shi et al., 2022).

_Remark 5.2.5_ (Limitations and future directions).: One limitation of our theoretical analysis is that our convergence result for NNAG holds only for a large enough number of iterations \(k k_{0}\). However, in our numerical experiments we observed that the same bounds hold also for \(k k_{0}\), so we believe our result can be improved. Additionally, our proposed forces are currently defined only in Euclidean space, and we see potential for extending the framework to non-Euclidean spaces.

## 6 Numerical Results

In this section, we present our empirical results, divided into three parts: Theoretical upper bounds, binary classification with logistic regression, and classification with neural networks.

Upper Bounds.First, we compare the bounds in (34) and (36) with the Proposition 4.5 in (Laborde and Oberman, 2020). The results are depicted in Figure 1. In practical scenarios where \(L\) is large (Shi et al., 2022) the bound (34) is lower than the other two for large enough iterations. This observation has motivated us to analyze the behavior of NNAG in practical scenarios such as binary classification and CNN training tasks.

Binary Classification.For this task we considered \(d=1000\) randomly generated samples of dimension \(n=10\) and labels. The problem can be written as

\[_{x^{n}}_{i=1}^{d}(1+e^{-y_{i}(x_{i },x)}),\] (38)

where \(y_{i}\) and \(x_{i}\) denote the \(i\)th label and sample. For comparison, we considered the perturbed gradient descent method with Gaussian noise and decreasing step-size \(s_{k}=1/(k^{2/3})\) (Proposition 3.4 in (Laborde and Oberman, 2020)) together with accelerated noisy gradient descent (Per-FE-C) in (Laborde and Oberman, 2020). For NNAG we used \(s_{k}=1/(k^{3/4})\) and \(=L/10\). All the perturbation was done using _i.i.d._ Gaussian noise with unit variance, and we conducted 100 Monte-Carlo runs. The results are presented in Figure 2 right panel. As shown, NNAG outperforms all the other methods in this case.

In a related experiment, we combined NNAG with SGD and SVRG. For the SGD-mixing, we replaced the noisy gradients with SGD-like gradients, while for the SVRG-mixing we evaluated all the gradients at the beginning of each epoch (essentially like taking a snapshot in SVRG) and set \(t_{k}=0\). The step-sizes for SVRG (in accordance with the original implementation (Johnson and Zhang, 2013)), SGD, NNAG+SVRG, and NNAG+SGD were set as \(1/(10L)\), \(1/L\), \(c=1/,=L/10\)

Figure 1: Comparison of our upper bounds with the state-of-the-art.

and \(c=1/,=L\), respectively. We conducted 100 Monte-Carlo runs, and the results are displayed in Figure 2 left panel. Notably, when mixed with either SGD or SVRG, NNAG outperforms the original methods. This highlights NNAG's flexibility in terms of gradient noise and demonstrates its potential to accelerate various methods.

**Classification on CIFAR10.** Finally, we tackled the non-convex optimization problem of training a CNN with CIFAR10 dataset  using the SGD, SVRG, NNAG, and NNAG+SVRG methods. The network consisted of two convolutional layers each followed by max pooling and 3 fully connected linear layers each followed by ReLU activation function. The step-sizes for SGD and SVRG were set as 0.01, and for the NNAG and NNAG+SVRG algorithms we had \(c=0.05,=150^{2}\) and \(c=0.001,=100^{2}/10\), respectively. The division by 10 is due to step-size division by 10 in the SVRG method. The results for 20 Monte-Carlo simulations are depicted in Figure 3. Notably, SVRG+NNAG outperforms the other methods in terms of minimizing training error. Additionally, NNAG exhibits slightly better validation accuracy, hinting at its convergence toward a different local solution.

It is worth noting that faster convergence rates of NNAG+SVRG do not pose problems of overfitting. If necessary, one can terminate the algorithm earlier to achieve optimal performance. In Figure 3, for instance, NNAG+SVRG reaches its peak "validation accuracy" after approximately 20 epochs, with a validation accuracy of roughly 0.6 and a training error of around 0.66. After this point, a slow overfitting phase begins. Similarly, for SGD and SVRG, their peak "validation accuracy" is achieved after about 50 epochs, with a validation accuracy of approximately 0.6 and a training error of about 0.66, followed by a slow overfitting phase. Finally, NNAG achieves comparable results after approximately 100 epochs.

Figure 3: Training error and validation accuracy of NNAG, SGD, SVRG, and NNAG+SVRG when used for training a simple CNN on CIFAR10 dataset. Lower and upper confidence bounds with significance level of 0.68 are drawn with similar color to their corresponding line.

Figure 2: Comparison of the performance of various methods in binary classification problem.

Related Work

Polyak's Heavy-Ball (HB) method was one of the first momentum-based methods which could accelerate relative to the gradient descent method (Polyak, 1963). However, this was not the case for every smooth function (Lessard et al., 2016). Nesterov modified the HB and introduced the NAG method. This method achieved global convergence with a rate of \((1/k^{2})\) for smooth convex functions (Nesterov, 1983). Nesterov used estimate sequence technique to show the convergence of the NAG method. This technique does not provide immediate insights toward the success of the NAG algorithm in acceleration. Thus, many have tried to understand the essence of acceleration.

On a similar line of work, Wibisono et al. (2016) introduced a variational perspective on accelerated methods, leading to a general (non-Euclidean) ODE containing the ODE found by Su et al. (2016) as a special case. Their approach is based on the choice of a Lagrangian and its corresponding parameters. Since the choice of Lagrangian is not unique, Wilson et al. (2021) provided a variational perspective on different accelerated first-order methods using another Lagrangian. Fazlyab et al. (2017) developed a family of accelerated dual algorithms for constrained convex minimization through a similar variational approach. In a more recent development, Zhang et al. (2021) showed that the second-variation also plays an important role in optimality of the ODE found by Su et al. (2016). Specifically, they showed that if the time duration is long enough, then the mentioned ODE for the NAG algorithm is the saddle point to the problem of minimizing the action functional.

The dynamical system perspective on NAG was studied in (Muehlebach and Jordan, 2019). They showed that the NAG algorithm is recovered from the SIE discretization of an ODE. The mentioned ODE was not the result of a vanishing step-size argument. They found that a curvature-dependent damping term accounts for the acceleration phenomenon. Interestingly, (Chen et al., 2022) also used similar ODE without the SIE discretization. They showed that implicit-velocity is the reason of the acceleration. In a recent analysis, (Muehlebach and Jordan, 2023) explores the connections between non-smooth dynamical systems and first-order methods for constrained optimization.

## 8 Conclusion

In this work, we tackled the problem of unconstrained smooth convex minimization in Euclidean space. Through a variational analysis of HR-ODEs, we achieved improved convergence rates for NAG in terms of gradient norm. In addition, we showed that NAG can be viewed as an approximation of the rate-matching technique when applied on a specific ODE. Our analysis was then extended to stochastic scenarios. In particular, we proposed a method with both constant and varying step-sizes which performed comparable and sometimes better than state of the art methods.

This work entails multiple future directions. Nesterov's oracle complexity lower bound on gradient norm minimization is \((k^{-4})\)(Nesterov, 2003). It remains an open question to see if the NAG method can achieve this rate of convergence for gradient norm minimization. In this work, we noticed that the HR-ODEs follow the same external force structure. In the smooth-strongly convex case, Triple Momentum (TM) method is the fastest known globally convergent method (Van Scoy et al., 2018). However, the HR-ODE associated with the TM method is not shown to achieve the similar convergence rate as the TM method (Sun et al., 2020). One could use the external force structure proposed here to find a better convergence rate for the HR-ODE associated with the TM algorithm. In addition, our analysis was confined to the Euclidean space. We believe it is possible to explore non-Euclidean forces using a Bregman Lagrangian as in (Wibisono et al., 2016). Finally, we blended our noisy stochastic scheme with other known stochastic methods (_e.g._ SGD and SVRG). This technique improved the performance of those methods. As a future work, one can apply the same technique to other practical methods like ADAM, RMSprop, etc, and study the behavior of the final algorithm.