# Going beyond persistent homology

using persistent homology

Johanna Immonen

University of Helsinki

johanna.x.immonen@helsinki.fi

&Amauri H. Souza1

Aalto University

Federal Institute of Ceara

amauri.souza@aalto.fi

&Vikas Garg

Aalto University

YaiYai Ltd

vgarg@csail.mit.edu

Equal contribution.

###### Abstract

Representational limits of message-passing graph neural networks (MP-GNNs), e.g., in terms of the Weisfeiler-Leman (WL) test for isomorphism, are well understood. Augmenting these graph models with topological features via persistent homology (PH) has gained prominence, but identifying the class of attributed graphs that PH can recognize remains open. We introduce a novel concept of color-separating sets to provide a complete resolution to this important problem. Specifically, we establish the necessary and sufficient conditions for distinguishing graphs based on the persistence of their connected components, obtained from filter functions on vertex and edge colors. Our constructions expose the limits of vertex- and edge-level PH, proving that neither category subsumes the other. Leveraging these theoretical insights, we propose RePHINE for learning topological features on graphs. RePHINE efficiently combines vertex- and edge-level PH, achieving a scheme that is provably more powerful than both. Integrating RePHINE into MP-GNNs boosts their expressive power, resulting in gains over standard PH on several benchmarks for graph classification.

## 1 Introduction

Topological data analysis (TDA) is a rapidly growing field that provides tools from algebraic topology for uncovering the _shape_ (or structure) of data, allowing for efficient feature extraction. Its flagship tool is persistent homology (PH) , which seeks to characterize topological invariants (e.g., connected components, loops) of an underlying manifold based on data samples. Notably, PH has been successfully applied in many scientific domains, including computer vision , drug design , fluid dynamics , and material science .

For graphs, PH has been used to provide global topological signatures for graph-level prediction tasks  and act as local message modulators in graph neural networks (GNNs) for node-level tasks . By leveraging learnable filtration/vectorization maps, PH has also been integrated into neural networks as a building block in the end-to-end learning process . These strategies allow us to exploit topological features to boost the predictive capabilities of graph models. However, in stark contrast with the developments on the representational power of GNNs , the theoretical properties of PH on graphs remain much less explored. For instance, open questions include: Which graph properties can PH capture? What is the characterization of pairs of graphs that PH cannot separate? Can we improve the expressivity of PH on graphs?

In a recent work, Rieck  discusses the expressivity of PH on graphs in terms of the Weisfeiler-Leman (WL) hierarchy . The paper shows that, given different k-WL colorings, there exists a filtration such that the corresponding persistence diagrams differ. This result provides a lower bound for the expressivity in terms of WL hierarchy, but it does not describe the class of graphs which can be distinguished via PH. In this paper, we aim to fully characterize this class of graphs.

We study the expressive power of PH on attributed (or colored) graphs, viewed as 1-dim simplicial complexes. We focus on the class of graph filtrations induced by functions on these colors. Importantly, such a class is rather general and reflects choices of popular methods (e.g., topological GNNs ). We first analyze the persistence of connected components obtained from vertex colors. Then, we extend our analysis to graphs with edge colors. To obtain upper bounds on the expressive power of color-based PH, we leverage the notion of separating/disconnecting sets. This allows us to establish the necessary and sufficient conditions for the distinguishability of two graphs from 0-dim persistence diagrams (topological descriptors). We also provide constructions that highlight the limits of vertex- and edge-color PH, proving that neither category subsumes the other.

Based on our insights, we present RePHINE (short for "**Re**fining **PH** by **I**ncorporating **N**ode-color into **E**dge-based filtration"), a simple method that exploits a subtle interplay between vertex- and edge-level persistence information to improve the expressivity of color-based PH. Importantly, RePHINE can be easily integrated into GNN layers and incurs no computational burden to the standard approach. Experiments support our theoretical analysis and show the effectiveness of RePHINE on three synthetic and six real datasets. We also show that RePHINE can be flexibly adopted in different architectures and outperforms PersLay  -- a popular topological neural net.

In sum, **our contributions** are three-fold:

**(Theory)** We establish a series of theoretical results that characterize PH on graphs, including bounds on the expressivity of vertex- and edge-level approaches, the relationship between these approaches, and impossibility results for color-based PH -- as summarized in Figure 1.

**(Methodology)** We introduce a new topological descriptor (RePHINE) that is provably more expressive than standard 0-dim and 1-dim persistence diagrams.

**(Experiments)** We show that the improved expressivity of our approach also translates into gains in real-world graph classification problems.

## 2 Preliminaries

We consider arbitrary graphs \(G=(V,E,c,X)\) with vertices \(V=\{1,2,,n\}\), edges \(E V V\) and a vertex-coloring function \(c:V X\), where \(X\) denotes a set of \(m\) colors or features \(\{x_{1},x_{2},,x_{m}\}\) such that each color \(x_{i}^{d}\). We say two graphs \(G=(V,E,c,X)\) and

Figure 1: Overview of our theoretical results.

\((V^{},E^{},c^{},X^{})\) are isomorphic (denoted by \(G G^{}\)) if there is a bijection \(g:V V^{}\) such that \((v,w) E\) iff \((g(v),g(w)) E^{}\) and \(c=c^{} g\). Here, we also analyze settings where graphs have an edge-coloring function \(l\).

A _filtration_ of a graph \(G\) is a finite nested sequence of subgraphs of \(G\), that is, \(G_{1} G_{2}... G\). Although the design of filtrations can be flexible , a typical choice consists of leveraging a vertex filter (or filtration) function \(f:V\) for which we can obtain a permutation \(\) of \(n\) vertices such that \(f((1)) f((2)) f((n))\). Then, a filtration induced by \(f\) is an indexed set \(\{G_{f((i))}\}_{i=1}^{n}\) such that \(G_{f((i))} G\) is the subgraph induced by the set of vertices \(V_{f((i))}=\{v V f(v) f((i))\}\). Note that filtration functions which give the same permutation of vertices induce the same filtration. Persistent homology keeps track of the topological features of each subgraph in a filtration. For graphs \(G\), these features are either the number of connected components or independent cycles (i.e., 0- and 1-dim topological features, denoted respectively by the Betti numbers \(^{0}_{G}\) and \(^{1}_{G}\)) and can be efficiently computed using computational homology. In particular, if a topological feature first appears in \(G_{f((i))}\) and disappears in \(G_{f((j))}\), then we encode its persistence as a pair \((f((i)),f((j)))\); if a feature does not disappear in \(G_{f((n))}=G\), then its persistence is \((f((i)),)\). The collection of all pairs forms a multiset that we call _persistence diagram_. We use \(^{0}\) and \(^{1}\) to refer to the persistence diagrams for 0- and 1-dim topological features respectively. Appendix A provides a more detailed treatment for persistent homology.

Recent works have highlighted the importance of adopting injective vertex filter functions. Hofer et al.  show that injectivity of parameterized functions \(f_{}:V\) is a condition for obtaining well-defined gradients with respect to the parameters \(\), enabling end-to-end filtration learning. Also, Horn et al.  show that for any non-injective function, we can find an arbitrarily close injective one that is at least as powerful at distinguishing non-isomorphic graphs as the original (non-injective) function. However, Lemma 1 shows that filtrations induced by injective functions on vertices may result in inconsistent persistence diagrams; namely, different diagrams for isomorphic graphs.

**Lemma 1** (Injective vertex-based filtrations can generate inconsistent persistence diagrams).: _Consider persistence diagrams obtained from injective vertex filter functions. There are isomorphic graphs \(G G^{}\) such that their persistence diagrams are different, i.e., \(_{G}_{G^{}}\)._

To avoid inconsistent diagrams, we need to employ permutation equivariant filter functions -- see [32, Lemma 2]. Common choices include vertex degree , eigenvalues of the graph Laplacian , and GNN layers , which are permutation equivariant by construction. Another option is to define graph filtrations based on vertex/edge colors , which are also equivariant by design, i.e., if \(G G^{}\) with associated bijection \(g\), then \(c(v)=c^{}(g(v))\  v V\). Notably, color-based filtrations generalize the GNN-layers case since we could redefine vertex/edge-coloring functions to take the graph structure as an additional input. Thus, we now turn our attention to color-based filtrations.

Color-based filtrations.Let \(f:X\) be an injective function. Therefore, \(f\) must assign a strict total order for colors, i.e., there is a permutation \(:\{1,,m\}\{1,,m\}\) such that \(f(x_{(1)})<<f(x_{(m)})\). We define the _vertex-color filtration_ induced by \(f\) as the indexed set \(\{G_{i}\}_{i=1}^{m}\) where \(G_{i}=(V_{i},E_{i},c_{i},X_{i})\), with \(X_{i}=\{x_{(1)},x_{(2)},,x_{(i)}\}\), \(V_{i}=\{v V c(v) X_{i}\}\), \(E_{i}=\{(v,w) E c(v) X_{i},c(w) X_{i}\}\), and \(c_{i}=\{(v,c(v)) v V_{i}\}\). Similarly, we can define the _edge-color filtration_ induced by \(f\) as \(\{G_{i}\}_{i=1}^{m}\) where \(G_{i}=(V,E_{i},l_{i},X_{i})\) with \(X_{i}=\{x_{(1)},,x_{(i)}\}\), \(E_{i}=\{(v,w) E l(v,w) X_{i}\}\), and \(l_{i}=\{((v,w),l(v,w))(v,w) E_{i}\}\).

We denote the elements of a persistence diagram \(\) as pairs \((f(x^{(b)}),f(x^{(d)}))\), where \(x^{(b)},x^{(d)} X\) are the colors associated with the birth and death of a hole (topological feature) in a filtration induced by \(f()\). In the following, we use the notation \(\{\!\{\}\!\}\) to denote multisets.

## 3 The power of 0-dim persistent homology under color-based filtrations

In this section, we analyze the representational power of persistent homology when adopting color-based filtrations. We focus on the persistence of connected components (0-dimensional holes). We separately discuss vertex-color (Section 3.1) and edge-color (Section 3.2) filtrations, and then compare these approaches in Section 3.3. Proofs for all Lemmas and Theorems are in Appendix B.

### Vertex-color filtrations

To help characterize the expressivity of persistent homology, we propose classifying persistence pairs \((f(x^{(b)}),f(x^{(d)}))\) as either _real holes, almost holes, or trivial holes_. In particular, if \(f(x^{(d)})\)

[MISSING_PAGE_FAIL:4]

**Lemma 4** (**Distinct almost holes imply distinct color-separating sets)**.: _Let \(^{0}_{G}\), \(^{0}_{G^{}}\) be persistence diagrams for \(G\) and \(G^{}\). If the diagrams \(^{0}_{G}\), \(^{0}_{G^{}}\) differ in their multisets of almost holes, then there is a color-separating set for \(G\) and \(G^{}\)._

#### 3.1.3 Bounds on the expressivity of vertex-color persistent homology

Regardless of the filtration, vertex-color PH always allows counting the numbers of connected components and vertices of a graph. If all vertices have the same color, then we cannot have any expressive power beyond \(^{0}\) and \(|V|\) -- when all vertices are added simultaneously, there cannot be almost holes as the finite living times of the holes are 0. Also, all real holes are identical, and we have \(^{0}=\{\!\{(1,),,(1,),(1,1),...,(1,1)\}\!\}\), with \(|^{0}|=|V|\).

For graphs with \(m 1\) colors, 5 shows that sets of birth times correspond to vertex colors. As a consequence, if the multisets of vertex colors differ for graphs \(G\) and \(G^{}\), then the corresponding persistence diagrams are also different in all filtrations.

**Lemma 5** (**Equivalence between birth times and vertex colors)**.: _There is a bijection between the multiset of birth times and the multiset of vertex colors in any vertex-color filtration._

From 5, we can recover the multiset of colors from the persistence diagram and, consequently, distinguish graphs with different multisets. However, persistent homology uses vertex colors as input, and we do not need persistence diagrams to construct or compare such multisets. This highlights the importance of death times to achieve expressivity beyond identifying vertex colors. In fact, for non-trivial cases, the expressivity highly depends on the choice of filtration.

We have discussed the importance of color-separating sets (1) and component-wise vertex colors (2). With these notions, 1 formalizes the limits of expressivity that may be achieved with suitable filtration and characterize which pairs of graphs can, at best, be distinguished by comparing their persistence diagrams. Here, we only consider pairs of graphs that cannot be distinguished by their multisets of colors, as this corresponds to a trivial case.

**Theorem 1** (**The expressive power of vertex-color filtrations)**.: _For any two graphs \(G\) and \(G^{}\) with identical multisets of colors \(\{\!\{c(v):v V\}\!\}=\{\!\{c^{}(v):v V^{}\!\}\!\}\), there exists a filtration such that \(^{0}_{G}^{0}_{G^{}}\), if and only if there is a color-separating set for \(G\) and \(G^{}\)._

### Edge-color filtrations

We now consider the expressivity of 0-dim persistent homology obtained from edge-color filtrations. The persistence diagrams are constructed exactly the same way. However, in this case, all holes are born at the same time (all vertices appear in \(G_{0}\)). This implies that all real holes are identical. Also, the diagrams do not contain trivial holes since \(G_{0}\) does not have edges. All holes are either real holes or almost holes (of the form \((0,d)\)). We also note that persistence diagrams will always have almost holes unless the graph is edgeless.

Analogously to separating sets in vertex-color filtrations, 6 characterizes edge-based almost holes as _disconnecting sets_ -- a set of edges whose removal would increase the number of components.

**Lemma 6** (**Edge-based almost holes as disconnecting sets)**.: _Let \((0,f(x^{(d)}))\) be an almost hole from an edge-color filtration. Then \(S=\{e E f(l(e)) f(x^{(d)})\}\) is a disconnecting set of \(G\)._

1 tells us how to construct a disconnecting set from an almost hole. Now, suppose we are given a disconnecting set \(S\). Can we build an edge-color filtration for which \(S\) can be obtained from

Figure 3: (a) \(G\) and \(G^{}\) differ in their multisets of colors, but no edge-color filtration can distinguish them. For instance, assume that \(f()=1<2=f()\). Then, \(^{0}_{G}=^{0}_{G^{}}=\{\!\{(0,),(0,1),(0,1),(0,1)\}\!\}\). The same holds for \(f()>()\). (b) Graphs that have different disconnecting sets, but for which we can find filtrations that lead to identical diagrams.

an almost hole? In other words, can we obtain a diagram with an almost hole \((0,f(x^{(d)}))\) such that \(\{e E f(l(e)) f(x^{(d)})\}\) is equal to \(S\)? \(\) 7 shows that if the colors of edges in \(S\) are distinct from those in \(E S\), then there is a filtration that induces a persistence diagram with an almost hole from which we can reconstruct \(S\).

**Lemma 7** (**Reconstructing a disconnecting set)**.: _Let \(G=(V,E,l,X)\) be a graph and \(S E\) be a disconnecting set for \(G\). If the set of colors of \(S\) is disjoint from that of \(E S\), then there exists a filtration such that \(S=\{e E f(l(e)) f(x^{(d)})\}\) for an almost hole \((0,f(x^{(d)}))^{0}\)._

#### 3.2.1 Bounds on the expressivity of edge-color persistent homology

Similar to the vertex-color case, in any edge-color filtration, we have that \(|^{0}|=|V|\) and the number of real holes is \(^{0}\). Also, the lowest expressivity is achieved when all edges have the same color. In this case, two graphs with different numbers of vertices or connected components have different persistence diagrams (and can be distinguished); otherwise, they cannot be distinguished.

We have seen in \(\) 5 that vertex-color filtrations encode colors as birth times. In contrast, birth times from edge-color filtrations are always trivially equal to zero. Thus, we cannot generalize \(\) 5 to edge-color filtrations. Instead, we can show there are graphs with different multisets of edge colors such that the graphs have the same persistence diagrams for any filtration (see \(\) 3(a)).

Let us now consider lower limits for graphs with \(m>1\) edge colors. We can show that even if two graphs have different disconnecting sets (obtained from colors), there are filtrations that induce the same persistence diagrams. To see this behavior, consider the two graphs in \(\) 3(b), where the deletion of blue edges disconnects one of the graphs but not the other. Although we can build an edge-color filtration that separates these graphs (i.e., \(^{0}_{G}^{0}_{G^{}}\)), if we choose \(f()=3,f()=2\), and \(f()=1\), we obtain \(^{0}_{G}=^{0}_{G^{}}=\{(0,),(0,1),(0,2),(0,2 ),(0,2),(0,2)\}\). Interestingly, even if two graphs have different sets of edge colors, we might still find filtrations that induce identical diagrams. The reason is that unlike vertex-color filtrations where trivial holes make sure that all vertices are represented in the diagrams, in edge-color filtrations there are no trivial holes. As a result, persistence diagrams from edge-color filtrations do not account for edges that do not lead to the disappearance of connected components.

\(\) 6 and \(\) 7 showed that edge-based almost holes can be characterized as disconnecting sets, somewhat analogously to vertex-based almost holes as separating sets. We complete the analogy by introducing the notion of color-disconnecting sets in \(\) 2. We then use this notion to fully characterize the the expressive power of edge-color persistent homology in \(\) 2. More specifically, the existence of a color-disconnecting set between a given pair of graphs is a necessary and sufficient condition for distinguishing them based on \(0\)-dimensional persistence diagrams.

**Definition 2** (**Color-disconnecting sets)**.: _A color-disconnecting set for a pair of graphs \((G,G^{})\) is a set of colors \(Q\) such that if we remove the edges of colors in \(Q\) from \(G\) and \(G^{}\), we obtain subgraphs with different numbers of connected components._

**Theorem 2** (**The expressive power of edge-color filtrations)**.: _Consider two graphs \(G\) and \(G^{}\). There exists an edge-color filtration such that \(^{0}_{G}^{0}_{G^{}}\), if and only if there is a color-disconnecting set for \(G\) and \(G^{}\)._

### Vertex-color versus edge-color filtrations

To compare vertex- and edge-color persistence diagrams, we consider graphs with vertex-coloring functions \(c()\) from which we derive edge-coloring ones \(l()\). In particular, for a graph \(G=(V,E,c,X)\), its edge-coloring function \(l:E X^{2}\) is defined as \(l(v,w)=\{c(v),c(w)\}\).

Figure 4: Illustration of graphs that cannot be distinguished based on (a) edge-color filtrations, (b) vertex-color filtrations, and (c) both vertex- and edge-color filtrations.

Recall that only vertex-color filtrations can \(1\)) encode multisets of colors and \(2\)) have real holes with different birth times. Naturally, we can find pairs of graphs \((G,G^{})\) for which we can obtain \(^{0}_{G}^{0}_{G^{}}\) from vertex-color filtrations, but not from edge-color ones. Consider the graphs in Figure 4(a). The vertex-color filtration \(f()=1,f()=2\) produces \(=\{\!\!\{(1,),(1,),(1,2),(2,2),(2,2)\}\!\!\}\) and \(^{}=\{\!\!\{(1,),(1,1),(2,),(2,2),(2,2),(2,2)\}\!\!\}\). However, there is no edge-color filtration that would tell them apart -- there are only two possible edge-color filtrations, leading to either \(=\{\!\!\{(0,),(0,),(0,1),(0,2),(0,2)\}\!\!\}=^ {}\), or \(=\{\!\!\{(0,),(0,),(0,1),(0,1),(0,2)\}\!\!\}= ^{}\).

We can also show that there are graphs that can be distinguished by edge-color filtrations but not by vertex-color ones. Intuitively, one can think of this as a result of edge colors being more fine-tuned. For instance, consider the graphs in Figure 4(b). We can separate these graphs using the function \(f()=1,f()=2\), and \(f()=3\), which yields \(^{0}_{G}=\{\!\!\{(0,),(0,1),(0,1),(0,2),(0,2),(0,3)\}\!\!\} \{\!\!\{(0,),(0,1),(0,1),(0,2),(0,2),(0,2)\}\!\!\}=^{0}_{G^ {}}\). However, since there is no color-separating set for \(G\) and \(G^{}\), by Theorem 1, we have that \(_{G}=_{G^{}}\) for all vertex-color filtrations. Theorem 3 formalizes the idea that none of the classes of color-based filtrations subsumes the other. In addition, Figure 4(c) illustrates that there are very simple non-isomorphic graphs that PH under both vertex- and edge-color filtrations cannot distinguish.

**Theorem 3** (Edge-color vs. vertex-color filtrations).: _There exist non-isomorphic graphs that vertex-color filtrations can distinguish but edge-color filtrations cannot, and vice-versa._

## 4 Going beyond persistent homology

We now leverage the theoretical results in Section 3 to further boost the representational capability of persistent homology. In particular, we propose modifying edge-color persistence diagrams to account for structural information that is not captured via the original diagrams. We call the resulting approach RePHINE (Refining PH by incorporating node-color into edge-based filtration). Notably, RePHINE diagrams are not only provably more expressive than standard color-based ones but also make 1-dimensional topological features redundant. Additionally, we show how to integrate RePHINE into arbitrary GNN layers for graph-level prediction tasks.

Edge-color diagrams with missing holes.A major drawback of edge-color filtrations is that information about the multisets of (edge) colors is lost, i.e., it cannot be recovered from persistence diagrams. To reconstruct disconnecting sets, we need the edge-color permutation given by the filtration function and the number of edges -- both of which cannot be deduced from diagrams alone.

To fill this gap, we introduce the notion of _missing holes_. Conceptually, missing holes correspond to edges that are not associated with the disappearance of any connected component in a given filtration. By design, we set the birth time of missing holes to 1 -- this distinguishes them from real and almost holes, which have birth times equal to 0. The death time of a missing hole corresponds to the first filtration step \(f(x)\) that its corresponding edge color \(x\) appears. We note that missing holes correspond to cycles obtained from 1-dim persistence diagrams.

As an example, consider the edge-color filtration in Figure 5, which produces \(^{0}=\{\!\!\{(0,),(0,1),(0,2),(0,2),(0,4)\}\!\!\}\). We note that the orange edge and one of the orange-green ones do not 'kill' any 0-dim hole. This results in the missing holes \((1,3)\) and \((1,4)\). Clearly, missing holes bring in additional expressivity as, e.g., it would be possible to distinguish graphs that only differ in the orange edge in Figure 5. Still, edge-color diagrams with missing holes are not more expressive than vertex-color ones. For instance, they cannot separate the two graphs in Figure 3(a).

Augmenting edge-color diagrams with vertex-color information.To improve the expressivity of persistent homology, a simple approach is to merge tuples obtained from independent vertex- and edge-color filtrations. However, this would double the computational cost while only allowing distinguishing pairs of graphs that could already be separated by one of the filtrations. Ideally, we would like to go beyond the union of vertex- and edge-color persistence diagrams.

As in Section 3.3, we consider graphs with edge colors obtained from vertex-coloring functions. Also, we assume that \(f_{v}\) and \(f_{e}\) are independent vertex- and edge-color filtration functions, respectively. We propose adding two new elements to the tuples of edge-color diagrams with missing holes. Our augmented tuple is \((b,d,,)\) where \(\) and \(\) are the additional terms. Recall that, in any edge-color filtration, \(G_{0}\) has \(|V|\) connected components. Then, we can associate real or almost holes of edge-color diagrams with vertices in \(G\). With this in mind, we define RePHINE diagrams as follows.

**Definition 3** (RePHINE diagram).: _The RePHINE diagram of a filtration on a graph G is a multiset of cardinality \(|V|+_{G}^{1}\), with elements of form \((b,d,,)\). There are two cases:_

* _Case_ \(b=0\) _(real or almost holes). Now,_ \(b\) _and_ \(d\) _correspond to birth and death times of a component as in edge-color filtration. We set_ \((w)=f_{v}(c(w))\) _and_ \((w)=_{v(w)}f_{e}(\{\!\!\{c(w),c(v)\}\!\!\})\)_, where_ \(w\) _is the vertex that is associated with the almost or real hole. Vertices are matched with the diagram elements as follows: An almost hole (b,d) corresponds to an edge merging two connected components,_ \(T_{1},T_{2}\)_. Each of these connected components has exactly one vertex,_ \(w_{T_{1}}\) _or_ \(w_{T_{2}}\)_, which has not yet been associated with any element of the RePHINE diagram. Let_ \(w=*{arg\,max}_{w^{}\{w_{T_{1}},w_{T_{2}}\}}f_{v}(c(w^{ }))\) _, or if_ \(f_{v}(c(w_{T_{1}}))=f_{v}(c(w_{T_{2}}))\)_, then_ \(w=*{arg\,min}_{w^{}\{w_{T_{1}},w_{T_{2}}\}}(w^{ })\)_. The vertices that are associated with real holes are vertices that have not died after the last filtration step._
* _Case_ \(b=1\) _(missing holes). Here, the entry_ \(d\) _is the filtration value of an edge_ \(e\) _that did not kill a hole but produces a cycle that appears at the filtration step associated with adding the edge_ \(e\)_. The entries_ \(\) _and_ \(\) _take uninformative values (e.g., 0)._

Figure 5 provides an example of RePHINE diagrams. Further details of the procedure can be found in Appendix C. Notably, our scheme can be computed efficiently at the same cost as standard persistence diagrams and is consistent -- we obtain identical diagrams for any two isomorphic colored graphs.

**Theorem 4** (RePHINE is isomorphism invariant).: _Let \(G\), \(G^{}\) be isomorphic graphs. Then, any edge-color and vertex-color filtrations produce identical RePHINE diagrams for \(G\) and \(G^{}\)._

In addition, Theorem 5 shows that RePHINE diagrams are strictly more expressive than those from both vertex- and edge-color filtrations, including \(0\)- and \(1\)-dim topological features. Figure 4(c) provides an example of graphs that cannot be recognized by any color-based filtration, but for which we can obtain distinct RePHINE diagrams.

**Theorem 5** (RePHINE is strictly more expressive than color-based PH).: _Let \(,^{}\) be the persistence diagrams associated with any edge or vertex-color filtration of two graphs. If \(^{}\), then there is a filtration that produces different RePHINE diagrams. The converse does not hold._

Despite its power, there are simple non-isomorphic graphs RePHINE cannot distinguish. In particular, if two graphs have one color, RePHINE cannot separate graphs of equal size with the same number of components and cycles. For example, star and path graphs with 4 vertices of color \(c_{1}\) produce identical RePHINE diagrams of the form \(\{\!\!\{(0,d,a,d),(0,d,a,d),(0,d,a,d),(0,,a,d)\!\!\}\), where \(d=f_{e}(\{\!\!\{c_{1},c_{1}\}\!\!\})\) and \(a=f_{v}(c_{1})\) for arbitrary edge- and vertex-color filtration functions.

Combining RePHINE and GNNsRePHINE diagrams can be easily incorporated into general GNN layers. For instance, one can follow the scheme in  to combine non-missing hole information with node features and leverage missing holes as graph-level attributes. However, here we adopt a simple scheme that processes RePHINE tuples using DeepSets . These topological embeddings are then grouped using a pooling layer and concatenated with the graph-level GNN embedding. The resulting representation is fed to a feedforward network to obtain class predictions. Formally, let \(_{G}(u)\) denote the set of neighbors of vertex \(u\) in \(G\), and \(h_{u}^{(0)}=c(u)\) for all \(u V\). We compute

Figure 5: RePHINE diagrams. At \(G_{1}\), one component dies and creates the almost hole \((0,1,2,1)\). We also save that two nodes were discovered at \(1\) (fourth component), with colors equal to \(2\) (third component). At step \(2\), two other holes are killed, resulting in two tuples \((0,2,1,2)\). At \(G_{3}\), we obtain the missing hole \((1,3,0,0)\). Finally, \(G_{4}\) creates one almost hole and one missing hole.

GNN and RePHINE embeddings (denoted by \(r^{()}\)) at layer \(\) recursively as:

\[_{u}^{()} =^{()}(\{\!\{h_{w}^{(-1)} w_{ G}(u)\}\!\}) u V ^{()} =(f_{v}^{()},f_{e}^{()},\{\!\{h_{u}^{() }\}\!\}_{u V})\] \[h_{u}^{()} =^{()}(h_{u}^{(-1)},_{u}^{( )}) u V ^{()} =^{()}(_{d^{()}}^{()}(d))\]

where \(f_{v}^{()},f_{e}^{()},^{()},^{()},^{()}\), and Update\({}^{()}\) are arbitrary non-linear mappings, usually implemented as feedforward neural nets. After \(L\) layers, we obtain the combined RePHINE-GNN graph-level representation as \([_{1}(\{r^{()}\}_{})_{2}(\{h_{u}^{( L)}\}_{u})]\), where \(_{1}\) is either mean or concatenation, and \(_{2}\) is an order invariant operation.

## 5 Experiments

In this section, we compare RePHINE to standard persistence diagrams from an empirical perspective. Our main goal is to evaluate whether our method enables powerful graph-level representation, confirming our theoretical analysis. Therefore, we conduct two main experiments. The first one leverages an artificially created dataset, expected to impose challenges to persistent homology and MP-GNNs. The second experiment aims to assess the predictive performance of RePHINE in combination with GNNs on popular benchmarks for graph classification. All methods were implemented in PyTorch , and our code is available at https://github.com/Aalto-QuML/RePHINE.

Synthetic data.We consider three datasets of cubic graphs (or 3-regular graphs): cub08, cub10, and cub12 . These graphs cannot be distinguished by 1-WL and color-based PH as all vertices share the same color. Thus, we modify the datasets by changing the colors of 1, 2, or 3 vertices in each graph sample, resulting in the modified datasets cub08-1, cub10-2, and cub12-3. Also, we randomly partition each dataset and create a balanced binary classification task. We expect this to keep the hardness of the task while allowing some distinguishability.

We compare standard 0-dim persistence diagrams from vertex-color filtrations (referred to as PH) to 0-dim RePHINE (i.e., no missing holes). Both approaches are processed using DeepSets with exactly the same structure and optimization procedure. Also, they operate on the original colors, not on GNN embeddings. For completeness, we report results for a 2-layer graph convolutional network (GCN)  followed by an MLP. We are interested in assessing if the persistence modules can overfit the observed graphs. We also monitor if the methods obtain different representations for each graph, measured in terms of the proportion of unique graph embeddings over training (which we call _expressivity_). We provide further details and additional results with 1-dim persistence diagrams in the supplementary material.

Figure 6: Average learning curves for RePHINE, PH, and GCN on connected cubic graphs. RePHINE can learn representations in cases where PH and GNNs struggle to capture structural information. RePHINE shows better expressivity and fitting capability on Cub10-2 and Cub12-3.

Figure 6 shows the learning curves for 2000 epochs, averaged over five runs. Notably, for all datasets, the expressivity of RePHINE is significantly higher than those from PH and similar to GNN's. On cub10-2, while PH and GNN obtain accuracies of around 0.5, RePHINE allows a better fit to the observed data, illustrated by higher accuracy and lower loss values.

Real-world data.To assess the performance of RePHINE on real data, we use six popular datasets for graph classification (details in the Supplementary): PROTEINS, IMDB-BINARY, NCI1, NCI109, MOLHIV and ZINC [7; 16; 20]. We compare RePHINE against standard vertex-color persistence diagrams (simply called PH here). Again, we do not aim to benchmark the performance of topological GNNs, but isolate the effect of the persistence modules. Thus, we adopt _default_ (shallow) GNN architectures and process the persistence diagrams exactly the same way using DeepSets. We report the mean and standard deviation of predictive metrics (AUC for MOLHIV, MAE for ZINC, and Accuracy for the remaining) over five runs. We provide further implementation details in Appendix C.

Table 1 shows the results of PH and RePHINE combined with GCN  and GIN  models. Notably, RePHINE consistently outperforms PH, being the best-performing method in 10 out of 12 experiments. Overall, we note that GIN-based approaches achieve slightly better results. Our results suggest that RePHINE should be the default choice for persistence descriptors on graphs.

Comparison to PersLay .We also compare our method against another topological neural network, namely, PersLay. Since PersLay does not leverage GNNs, we adapted our initial design for a fair comparison. Specifically, we compute RePHINE diagrams with learned filtration functions and apply a linear classifier to provide class predictions. Also, we concatenate the vectorial representations of the RePHINE diagrams with the same graph-level features obtained using PersLay. We refer to our variant as RePHINE+Linear. Table 2 reports accuracy results over 5 runs on 4 datasets. For all datasets, RePHINE+Linear achieves higher accuracy, with a significant margin overall.

## 6 Conclusion, Broader Impact, and Limitations

We resolve the expressivity of persistent homology methods for graph representation learning, establishing a complete characterization of attributed graphs that can be distinguished with general node- and edge-color filtrations. Central to our analyses is a novel notion of color-separating sets.

Much like how WL test has fostered more expressive graph neural networks (GNNs), our framework of color-separating sets enables the design of provably more powerful topological descriptors such as RePHINE (introduced here). RePHINE is computationally efficient and can be readily integrated into GNNs, yielding empirical gains on several real benchmarks.

We have not analyzed here other types of filtrations, e.g., those based on the spectral decomposition of graph Laplacians. Future work should also analyze the stability, generalization capabilities, and local versions of RePHINE. Overall, we expect this work to spur principled methods that can leverage both topological and geometric information, e.g., to obtain richer representations for molecules in applications such as drug discovery and material design.

  
**GNN** & **Diagram** & **NCI109** \(\) & **PROTEINS**\(\) & **IMDB-B**\(\) & **NCI1**\(\) & **MOLHIV**\(\) & **ZINC**\(\) \\   & - & 76.46 \(\) 1.03 & 70.18 \(\) 1.35 & 64.20 \(\) 1.30 & 74.45 \(\) 1.05 & 74.99 \(\) 1.09 & 0.875 \(\) 0.009 \\  & PH & 77.92 \(\) 1.89 & 69.46 \(\) 1.83 & 64.80 \(\) 1.30 & 79.08 \(\) 1.06 & 73.64 \(\) 1.29 & 0.513 \(\) 0.014 \\  & RePHINE & **79.18**\(\) 1.97 & **71.25**\(\) 1.60 & **69.40**\(\) 3.78 & **80.44**\(\) 0.94 & **75.98**\(\) 1.80 & **0.468**\(\) 0.011 \\   & - & 76.90 \(\) 0.80 & **72.50**\(\) 2.31 & **74.20**\(\) 1.30 & 76.89 \(\) 1.75 & 70.76 \(\) 2.46 & 0.621 \(\) 0.015 \\  & PH & 78.35 \(\) 0.68 & 69.46 \(\) 2.48 & 69.80 \(\) 0.84 & 79.12 \(\) 1.23 & 73.37 \(\) 4.36 & 0.440 \(\) 0.019 \\   & RePHINE & **79.23**\(\) 1.67 & 72.32 \(\) 1.89 & **72.80**\(\) 2.95 & **80.92**\(\) 1.92 & **73.71**\(\) 0.91 & **0.411**\(\) 0.015 \\   

Table 1: Predictive performance on graph classification. We denote in bold the best results. For ZINC, lower is better. For most datasets, RePHINE is the best-performing method.

  
**Method** & **NCI109** & **PROTEINS** & **IMDB-B** & **NCI1** \\  PersLay & 70.12 \(\) 0.83 & 67.68 \(\) 1.94 & 68.60 \(\) 5.13 & 68.86 \(\) 0.86 \\ RePHINE+Linear & **73.27**\(\) 1.69 & **71.96**\(\) 1.85 & **70.40**\(\) 2.97 & **74.94**\(\) 1.35 \\   

Table 2: PersLay vs. RePHINE: Accuracy results on graph classification.