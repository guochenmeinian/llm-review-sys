# UP-NeRF: Unconstrained Pose-Prior-Free

Neural Radiance Fields

 Injae Kim

Korea University

dna9041@korea.ac.kr

&Minhyuk Choi

Korea University

sodlqnf123@korea.ac.kr

&Hyunwoo J. Kim

Korea University

hyunwoojkim@korea.ac.kr

First two authors have an equal contribution.Corresponding author.

###### Abstract

Neural Radiance Field (NeRF) has enabled novel view synthesis with high fidelity given images and camera poses. Subsequent works even succeeded in eliminating the necessity of pose priors by jointly optimizing NeRF and camera pose. However, these works are limited to relatively simple settings such as photometrically consistent and occluder-free image collections or a sequence of images from a video. So they have difficulty handling unconstrained images with varying illumination and transient occluders. In this paper, we propose **UP-NeRF** (**U**nconstrained **P**ose-prior-free **Ne**ural **R**adiance **F**ields) to optimize NeRF with unconstrained image collections without camera pose prior. We tackle these challenges with surrogate tasks that optimize color-insensitive feature fields and a separate module for transient occluders to block their influence on pose estimation. In addition, we introduce a candidate head to enable more robust pose estimation and transient-aware depth supervision to minimize the effect of incorrect prior. Our experiments verify the superior performance of our method compared to the baselines including BARF and its variants in a challenging internet photo collection, _Photototurism_ dataset. The code of UP-NeRF is available at https://github.com/mlvlab/UP-NeRF.

## 1 Introduction

Neural Radiance Fields (NeRF)  opened up a new chapter in novel view synthesis by demonstrating its capacity to generate high-quality novel view images given only a set of 2D images. Its powerful performance has enabled many practical applications including virtual/augmented reality (VR/AR) , autonomous systems , and robotics . Various follow-up studies have developed NeRF by addressing its limitations, such as the necessity of dense input views  and long training time . Also, there have been efforts  to deal with unconstrained images with varying illuminations and transient occluders to relieve the burden of collecting clean images or establishing a specialized setting to capture them. For instance, NeRF-W  introduces an appearance embedding to handle varying illumination and a transient head to filter transient occluders.

One of the popular research topics in NeRF is joint optimization for pose and neural scene representation. Originally, NeRF requires accurate camera pose priors which are generally obtained with classic methods like structure from motion (SfM) . Although the poses obtained from such a method are treated as ground truth in many works, it does not always give optimal results or even fails to converge. Hence recent works  have proposed a method so-called _unposed-NeRF_ that simultaneously trains camera poses and NeRF. This eliminates the necessity of pose priors and burdensome preprocessing. While these methods have only succeeded in forward-facing scenes, NoPe-NeRF  further improved the method to even outdoor scenes with continuous images from videos. These previous works, however, are based on the photometric loss which is not reliable forunconstrained images, so they have difficulty in training with unconstrained images. In addition, the unconstrained images have complex camera poses, which is hard to optimize if a prior like continuity of images from a video is not available. Therefore, training unposed-NeRF with unconstrained images causes contradiction: To estimate camera poses accurately, images must be photometrically consistent without transient occluders; to treat unconstrained images without photometric consistency and transient occluders, accurate camera poses are needed. Previous unposed-NeRFs in the literature are not capable of learning in an unconstrained setting, leading to suboptimal pose estimation and poor rendering quality.

To tackle the problem, we propose **UP-NeRF** (**U**nconstrained **P**ose-prior-free **Ne**ural **R**adiance **F**ield) that jointly optimizes pose and neural scene representations while minimizing the influence of photometric inconsistency and transient occluders on pose estimation. Our contributions are as follows: First, we introduce the novel architecture that enables robust pose optimization with images of complex camera poses. Second, we propose feature-surrogate bundle adjustment by adopting the deep feature as a descriptor. Third, we enable transient-free pose optimization with the isolated network. Lastly, our transient-aware depth loss suggests an effective way to impose depth prior only to the static objects. Consequently, our model enables successful training of unposed-NeRF with unconstrained images, showing its effectiveness over a naive combination of current methods.

## 2 Related Work

Neural Radiance Fields (NeRF).With the advent of techniques adopting neural fields to reconstruct 3D representations , Neural Radiance Field (NeRF)  proposed by Mildenhall _et al._ showed a promising result without the requirement of exact 3D geometry of each object in the scene. Compared to previous approaches which require a pre-defined representation of the scene by meshes , voxels , or point clouds , NeRF only requires a set of densely captured 2D images and corresponding camera parameters of each image. Despite its light requirements, it demonstrates quality reconstruction of the complex geometry of scenes. The key idea of NeRF is that even though given are only 2D images, an implicit function represented by a multilayer perceptron can be utilized to parameterize the color and density of each 3D point on a ray, which is subsequently synthesized to decide the color of a pixel from which the ray was shot. Thanks to its simple but effective architecture, many other researches  have followed the trail of NeRF to ameliorate its weakness and improve performance.

Joint optimization of camera pose.Among a lot of interesting NeRF-based works, one major group of following works deals with the requirement of accurate camera pose of each image. Accurate camera pose including intrinsic and extrinsic parameters of a camera is indispensable for NeRF in that sampling accurate 3D coordinates in the world space heavily depends on them. However, such an accurate camera pose is not easily equipped unless the dataset is custom-made like a synthetic dataset, so structure from motion (SfM)  has been a classical solution to obtain such parameters. Although a lot of works have postulated camera poses from SfM to be ground truth, they can be sub-optimal depending on properties of scenes like monotonous texture. To solve this problem, other methods  propose joint optimization of a neural field and poses.

Expansion to unconstrained scenes.Several researches  dealt with unconstrained outdoor images where color consistency is not guaranteed owing to various environments (sunshine, time, weather, etc.) and so-called _transient_ entities (pedestrian, cars, sundries, etc.) appear in images.

Figure 1: Deep feature focuses on semantic information of objects rather than their colors, which makes it an effective descriptor for images with photometric inconsistency.

S-NeRF  and CF-NeRF  proposed a Bayesian network and normalizing flow for measuring the uncertainty of transient objects. D\({}^{2}\)NeRF  and RobustNeRF  demonstrated that transient objects can be sharply decoupled from static ones without blurry floaters. Some works [45; 46] utilized mask supervision to jointly optimize camera pose with object-centric images of different illumination. In contrast to previous works which require either color consistency or the absence of transient objects to jointly optimize the pose, our method is capable of optimizing camera pose without both requirements.

## 3 Method

We present a framework dubbed UP-NeRF to optimize unposed-NeRF under challenging conditions. We first briefly summarize Neural Radiance Fields (NeRF)  followed by joint optimization of camera poses and NeRF. In Section 3.1, we propose a new architecture that handles different convergence rates of camera poses, which can enable robust training of unposed-NeRF. Next, we explain our methods in Section 3.2 and 3.3 that handle the difficulty of unconstrained image collections like different light conditions (_e.g_., weather, time, etc.) and transient occluders. In addition, we will discuss how monocular depth priors can be used to optimize unposed-NeRF with unconstrained images in Section 3.4.

Neural Radiance Fields (NeRF).Given \(N\) images \(\{_{i}\}_{i=1}^{N}\) and camera parameters, Neural Radiance Field (NeRF) \(_{}\) learns a continuous volumetric radiance field which maps a 3D point \(=(x,y,z)\) and a viewing direction \(=(d_{x},d_{y},d_{z})\) to volume density \(\) and color \(=(r,g,b)\). The mapping functions parameterized by simple neural networks, _e.g_., multi-layer perceptrons (MLPs), are defined as

\[[(t),\,(t)]=_{_{1}}_{}( (t)),(t)=_{_{2}}(t ),_{}(),\] (1)

where \(_{}()\) is a positional encoding function for 3D coordinates of each sample point on the ray \((t)=+t\), which is parameterized by the origin point \(\) and the direction \(\). Color value \((t)\) is encoded with an intermediate feature \((t)\) and a positional encoding function for view directions \(_{}()\). The synthesized RGB value \(}()\) is calculated by volume rendering as

\[}()&=_{k= 1}^{K}T(t_{k})((t_{k})_{k})(t_{k}),\\ \;\;T(t_{k})&=_{k^{}=1}^{k-1 }(1-(t_{k^{}}))=-_{k^{}=1}^{k-1} (t_{k^{}})_{k^{}},\] (2)

where \(_{k}=t_{k+1}-t_{k}\) is the distance between adjacent points for approximated rendering via quadrature on discrete points and \((t_{k})=1-(-(t_{k})_{k})\). To improve sampling efficiency, NeRF employs coarse and fine models for hierarchical sampling. The coarse model is optimized using stratified sampling, and then the fine model is optimized with samples biased toward the relevant parts of the volume. The parameters are optimized by minimizing photometric loss \(_{}=\|()-}( )\|_{2}^{2}\) with given ground-truth color \(()\). Note that even if it is not a color map, any information that represents the scene can be used for training a neural field. In this paper, we exploit deep feature map \(\) as well as color map \(\) for training, which have been studied by Kobayashi et al.  to learn selectively editable neural fields.

NeRF with camera pose estimation.Some prior works optimize NeRF with a joint estimation of camera pose. We parameterize the camera poses \(\{_{i}\}_{i=1}^{N}\) as 6 degrees of freedom and assume that the camera intrinsics are known as several prior works [23; 24; 39; 48]. Then, the problem can be formulated as

\[^{*},^{*}=_{,}}_{ }(},}|),\] (3)

where \(}\) is learnable camera pose. BARF  shows that a coarse-to-fine positional encoding strategy facilitates more stable joint optimization of NeRF and camera pose. Following BARF, we parameterize camera poses with the \((3)\) Lie algebra and use a coarse-to-fine strategy for pose optimization.

### Candidate head for robust pose optimization

Training unposed-NeRF is a joint optimization process with a chick-and-egg problem; estimation of camera pose \(}\) requires accurate scene representation \(_{}\) and vice versa. During the initial phase of joint training, we observed that inaccurate scene representation, which is represented by predicted density \(\) and color \(\) in Eq. (1), causes specific images to be optimized in the wrong poses. We refer to these images as 'hard-pose' images, which may include images that capture the details of the scene or have little overlap with other images like the image in Fig. 4. To mitigate this problem, we introduce an additional MLP head called _candidate head_. It yields image-dependent (and tentative) scene representations by density \(_{i}^{(c)}\) and color \(_{i}^{(c)}\) given candidate embeddings \(\{_{i}^{(c)}\}_{i=1}^{N}\) as:

\[[_{i}^{(c)}(t),\;_{i}^{(c)}(t)]=_{_{3}}(t),_{i}^{(c)}.\] (4)

Note that \(()^{(c)}\) denotes that it is related to the candidate embeddings. The synthesized RGB value \(}_{i}^{(c)}\) is generated by a joint volumetric rendering of the shared representation (\(\) and \(\)) and the image dependent representation (\(_{i}^{(c)}\) and color \(_{i}^{(c)}\)):

\[}_{i}^{(c)}()& =_{k=1}^{K}T_{i}^{(c)}(t_{k})((t_{k}) _{k})(t_{k})+(_{i}^{(c)}(t_{k})_{k})_{i }^{(c)}(t_{k}),\\ \;\;T_{i}^{(c)}(t_{k})&=- _{k^{}=1}^{k-1}(t_{k^{}})+_{i}^{(c)}(t_{k^ {}})_{k^{}}.\] (5)

The intuition is to consider easy pieces first to complete a large jigsaw puzzle and handle hard pieces later. In the initial stages of training, shared representation is predominantly learned by 'easy-pose' images. Meanwhile, candidate representation is primarily trained by hard-pose images. This remedy effectively prevents the shared representation from being distracted by the wrong supervision introduced by hard-pose images.

As the shared representation becomes accurate enough to facilitate the pose estimation of hard-pose images, the influence of the candidate head is gradually reduced so that hard-pose images can be assimilated into the shared representation, and the final model uses only the shared representation, \(\) and \(c\). To achieve that, we propose a loss scheduling given as:

\[=w_{u,v}\;_{}(}|)+( 1-w_{u,v})\;_{}(}_{i}^{(c)}|),\] (6)

where \(w_{u,v}\) is defined as:

\[w_{u,v}(l)=0&\;\;l<u\\ &\;\;u l<v\\ \;\;l v.\] (7)

Here \(l\) denotes training progress and \(u,v\) are hyperparameters. Then, \(w_{u,v}\) tunes the influence of \(}_{i}^{(c)}\) and \(}\). Specifically, for learning during the initial stage of training (\(l<u\)), only \(}_{i}^{(c)}\) is utilized, whereas only \(}\) is employed in the later stage (\(l>v\)). With the loss scheduling, a high-quality final NeRF model can be trained. In our final training pipeline, we will use features instead of colors, as shown in Fig. 2, which will be covered in Section 3.2.

The volume rendering method shown in Eq. (5) is similar to NeRF-W  in that it has an additional head for color and density. In our architecture, however, we do not have a regularization term and uncertainty field that hinder the candidate head from handling hard-pose images. The size of embedding \(_{i}^{(c)}\) is adjusted by how challenging the poses of the given images are, which can be viewed as adjusting the regularizers for'slack' variables in the constrained optimization problem, _e.g._, support vector machine (SVM). The quantitative analysis of the candidate embedding size is provided in Table 4.

### Feature-surrogate bundle adjustment

The motivation of this section is shown in Fig. 1. Given images with diverse appearances due to different weather and times, unposed-NeRF cannot be stably trained with a photometric loss since RGB values of corresponding pixels between images are not guaranteed to be the same. We adopt the deep features from ViT  as a surrogate, which are less sensitive to appearance changes, and we train the neural field with these features to achieve better robustness under challenging conditions.

With a slight change in Eq. (1), our feature field is defined as:

\[(t)&=_{_{2}} (t),\\ [\,_{i}^{(c)}(t),_{i}^{(c)}(t)]&= _{_{3}}(t),_{i}^{(c)}.\] (8)

Unlike the color \((t)\) encoding in Eq. (1), the feature \((t)\) encoding is performed without a viewing direction because the features ought to be independent of viewing directions. Furthermore, \(}_{i}^{(c)}()\) is rendered similarly to Eq. (5) by volume rendering with \((t)\), \((t)\), \(_{i}^{(c)}(t)\) and \(_{i}^{(c)}(t)\). It is then optimized by minimizing \(_{}()=\|_{i}()-}_{i}^{(c)}()\|_{2}^{2}\) with 2D deep feature \(_{i}()\) from a pretrained model. We replace the loss \(_{}(}_{i}^{(c)}|_{i})\) in Eq. (6) with the loss \(_{}(}_{i}^{(c)}|_{i})\) for the early training. Meanwhile, the unconstrained images can have different colors even though they have the same semantic object. As a result, the feature \((t)\) can be used to encode image-dependent static color \(_{i}^{(a)}\) along with viewing direction \(_{i}\) and appearance embedding \(\{_{i}^{(a)}\}_{i=1}^{N}\) for each image as:

\[_{i}^{(a)}(t)=_{_{4}}(t),_{}(),_{i}^{(a)}.\] (9)

Note that \((.)^{(a)}\) means it is related to the appearance embeddings. The predicted RGB value \(}_{i}^{(a)}()\) is calculated by volume rendering Eq. (2) with \(_{i}^{(a)}(t)\) and \((t)\). This static color \(}_{i}^{(a)}()\) is optimized jointly with the transient color \(}_{i}^{()}()\) that will be introduced in the next section, Section 3.3. In summary, through candidate scheduling Eq. (6), the feature field is trained only for the early stage (\(l<u\)), \(_{_{3}}\) is not involved in learning in the later stage of training (\(l v\)), and the radiance field starts training as feature field gradually stops training (\(u l<v\)). See Fig. 2 for the final NeRF model \(_{}\) architecture.

Figure 2: Overall training pipeline of our UP-NeRF (\(_{}\) is based on Section 3.2). To learn the poses robustly, image-dependent scene representation is learned by the candidate head \(_{_{3}}\) (Section 3.1). The depth loss \(_{}\) provides transient-aware depth prior to the model (Section 3.4). In the early stages of training, the deep feature \(\) is used for color-independent surrogate optimization (Section 3.2). After the poses are roughly learned, the NeRF is optimized with a separated TransientNet \(_{}\) to prevent unnecessary gradient flowing the pose parameters (Section 3.3).

### Isolated network for transient-free pose optimization

The next challenge is the occlusion of transient objects. To optimize the poses accurately, their influence must be minimized in the training process as much as possible. The previous work NeRF-W , which tackles this problem, models it in 3D space by adding a transient head. If we naively adopt it in our model, it causes a noisy gradient flowing into the learnable pose parameters, with the pose being learned in the wrong direction due to transient occluders. So we mitigate this problem by handling transients occluders at the separated _TransientNet_\(_{}\) in 2D image level. It maps deep feature \(_{i}()\) to opacity \(^{()}\), which is intended to filter out the transient based on semantic information. Then, along with transient embedding \(\{_{i}^{()}\}_{i=1}^{N}\), it encodes image-dependent transient color \(}_{i}^{()}\) and uncertainty \(_{i}^{()}\):

\[[^{()}(),^{()}( )]&=_{_{1}}_{i}( ),\\ [}_{i}^{()}(),_{i}^{( )}()]&=_{_{2}}^{( )}(),_{i}^{()}.\] (10)

Note that \((.)^{()}\) means it is related to the transient objects. The final predicted color \(}_{i}()\) is obtained by alpha blending with \(}_{i}^{(a)}()\) from Section 3.2:

\[}_{i}()=(1-^{()}())}_{i}^{(a)}()+^{()}()}_{i}^{( )}().\] (11)

The RGB loss for ray \(\) with given color \(()\) is:

\[_{}()=}_{i}( )-_{i}()\|_{2}^{2}}{2_{i}^{()}( )^{2}}+^{()}()^{2}}{2}+_{ }^{()}(),\] (12)

where \(_{i}^{()}()=^{()}()_{i}^{ ()}()+_{}\). As in NeRF-W, the uncertainty \(_{i}^{()}()\) is modeled as the variance of an isotropic normal distribution with mean \(}_{i}()\), resulting the negative log-likelihood loss of \(_{i}()\). It reduces the impact of transient occluders as noise when training static objects. \(_{}>0\) is a hyperparameter for ensuring a minimum importance. The last term suppresses \(^{()}\) as possible to prevent _TransientNet_ from rendering static objects with \(_{}>0\). We set \(_{}\) to 0.1 and \(_{}\) to 1.0.

### Transient-aware depth prior

This section is about incorporating geometric prior from monocular depth into NeRF, which is highly inspired by NoPe-NeRF . The mono-depth prior provides strong geometry cues for jointly training pose and NeRF. Even though NoPe-NeRF proposes inter-frame loss to leverage a depth prior, it can only be applied to the successive images from a video so we cannot adopt such loss for the unconstrained images. So, we apply only the depth loss Eq. (13). The predicted inverse depth \(\{_{i}^{}\}_{i=1}^{N}\) is acquired from depth network DPT . Since this is a monocular prediction, it is not an absolute inverse depth value. Therefore learnable parameters \(\{_{i}\}_{i=1}^{N}\) and \(\{_{i}\}_{i=1}^{N}\), which denote a scale and shift factor, were introduced for each mono-depth to learn undistorted depth map \(_{i}^{*}\). It is optimized with rendered NeRF depth \(}_{i}\):

\[_{i}^{*}()=_{i}^{}( )+_{i}},}_{i}()=_{k=1}^{K}T(t_ {k})((t_{k})_{k})t_{k}.\] (13)

By optimizing the L1 loss \(_{}()=\|_{i}^{*}()-}_{i}()\|\), NeRF learns a strong geometry prior. However, since NeRF should exclude transient objects, we need to apply depth prior only to the areas without transient objects. In Section 3.1, the uncertain parts are generated from the candidate density \(_{i}^{(c)}\) of the candidate head, while certain parts are generated from the shared density \(\). This implies that the portion of candidate density also filters the transient parts as in Fig. 5. Based on this observation, we can measure transient confidence weight \(_{i}^{}()\) from the ratio of candidate density \(_{i}^{(c)}\) to shared density \(\). In consequence, the depth loss is defined as follows:

\[_{}()=1- _{i}^{}()\|_{i}^{*}()-}_{i}()\|,\\ \;\;_{i}^{}()=_{k =1}^{K}T_{i}^{(c)}(t_{k})(_{i}^{(c)}(t_{k})_{k})).\] (14)

### Training pipeline

The overall training pipeline is shown in Fig. 2. Integrating the depth loss into Eq. (6) modified from Section 3.2 and Section 3.3, the overall loss is as follows:

\[=w_{u,v}_{}+(1-w_{u,v})(_{}+_{d}_{}).\] (15)

The loss implies that depth loss \(_{}\) decays as the training progresses as feature loss \(_{}\) does. This is because we exploit depth supervision only for initial pose estimation, and using it further can degenerate the rendering quality in that the geometry prior we utilize is not a ground truth but like a pseudo-label from a depth network. A hyperparameter \(_{d}\) for depth loss is set to \(0.001\).

We use a hierarchical sampling strategy, and there is a slight difference in the coarse model loss with Eq. (12). We optimize the TransientNet with the fine model alone, and the coarse model uses detached \(^{()}\) and \(}_{i}^{()}()\) to render \(}_{i}()\) in Eq. (11), and does not use uncertainty. Thus, the final RGB loss for the coarse model is as follows.

\[_{}^{}=\|}_{i}( )-_{i}()\|_{2}^{2}.\] (16)

In addition, the way of composing a sample set for the fine model is slightly different from NeRF , which only uses the density \(\) of the coarse model. Along with \(\), we also need to use candidate density \(^{(c)}\) until scheduling eliminates the effect of candidate head. Depending on the scheduling factor \(w_{u,v}\), both density \(\) and \(^{(c)}\) are used at the beginning, and only \(\) is used in the end.

## 4 Experiments

Datasets.To demonstrate our methods work well in the unconstrained images. We report results on the Phototourism dataset. It consists of internet photo collections of famous landmarks and we select 4 scenes, _Brandenburg Gate_, _Sacre Coour_, _Taj Mahal_, and _Trevi fountain_, which are also used in NeRF-W. We follow the split used by NeRF-W  and downsample each image by 2 times. All the initial camera poses are set to the identity transformation.

Implementation details.All the models are trained for 600K iterations with randomly sampled 2048 pixel rays at each step with a learning rate of \(5 10^{-4}\) decaying to \(5 10^{-5}\) for NeRF and transient network \(\), and \(2 10^{-3}\) decaying to \(1 10^{-3}\) for pose \(\) and two factors \(_{i}\) and \(_{i}\) of depth. We use Adam optimizer  across all the experiments except test-time appearance optimization, where AdamW  is used instead. The number of sampling points in each ray for volumetric rendering is set to 128 for both coarse and fine models. We use the default coarse-to-fine strategy

    & ^{}\)) \(\)} &  \\   & BARF & BARF-W & BARF-WD & UP-NeRF & BARF & BARF-W & BARF-WD & UP-NeRF & BARF-W & BARF-W & UP-NeRF \\  Brandenburg Gate & 128.32 & 21.42 & 159.00 & **0.621** & 4.479 & 2.890 & 3.334 & **0.070** \\ Trevi Fountain & 114.63 & 33.09 & 23.08 & **1.590** & 6.627 & 4.763 & 4.292 & **0.105** \\ Taj Mahal & 94.06 & 143.30 & 51.28 & **0.549** & 6.054 & 5.252 & 3.875 & **0.120** \\ Sacre Coour & 99.33 & 112.19 & 113.50 & **1.452** & 12.353 & 9.875 & 9.073 & **0.222** \\  Mean & 109.09 & 77.50 & 86.72 & **1.053** & 7.378 & 5.695 & 5.144 & **0.129** \\   

Table 2: Camera pose estimation on PhotoTourism Dataset.

    & ^{}\)) \(\)} &  \\   & BARF & BARF-W & BARF-WD & UP-NeRF & BARF & BARF-W & BARF-WD & UP-NeRF \\  Brandenburg Gate & 128.32 & 21.42 & 159.00 & **0.621** & 4.479 & 2.890 & 3.334 & **0.070** \\ Trevi Fountain & 114.63 & 33.09 & 23.08 & **1.590** & 6.627 & 4.763 & 4.292 & **0.105** \\ Taj Mahal & 94.06 & 143.30 & 51.28 & **0.549** & 6.054 & 5.252 & 3.875 & **0.120** \\ Sacre Coour & 99.33 & 112.19 & 113.50 & **1.452** & 12.353 & 9.875 & 9.073 & **0.222** \\  Mean & 109.09 & 77.50 & 86.72 & **1.053** & 7.378 & 5.695 & 5.144 & **0.129** \\   

Table 2: Camera pose estimation on PhotoTourism Dataset.

of BARF which starts from training progress 0.1 to 0.5. We set the scheduling parameters \(u\) and \(v\) to be 0.1 and 0.5, respectively, the same as the parameters of coarse-to-fine. Note that both play the same role in helping robust pose estimation in the early stages. The transient confidence weight \(^{}\) is manually detached to prevent those parameters from affecting NeRF directly. We extract deep features from the DINO model , whose powerful 2D correspondence representation has been proven in various works , and monocular depth from DPT  offline. The detailed process of extracting features follows Amir et al. . Full implementation details are provided in the supplementary material.

Evaluation.We implement the evaluation process which consists of two stages, test-time pose optimization, and appearance optimization. In NeRF-W, they do just appearance optimization since it trains with given poses. But in our case, we need to optimize pose either to evaluate novel view synthesis. Therefore, we optimize both pose and appearance on test images for pose test time optimization and then initialize appearance again and optimize it with the optimized pose. In conclusion, the results of novel view synthesis are evaluated using PSNR, SSIM , and LPIPS . The train camera poses are Procrustes-aligned for comparison with ground truth poses in the same way as BARF .

### Results

To verify the difficulty of our task, we compare our model with BARF  and its two variants. First, we implement BARF-W as a baseline by applying latent appearance modeling and the transient head of NeRF-W to BARF. The other baseline is relevant to NoPe-NeRF . NoPe-NeRF succeeded in training NeRF with no pose prior in the outdoor scene. But it uses a sequence of images which is from video, so most of their principal components are using near-frame images. It is a strong prior to estimate camera poses, but in-the-wild images do not have such a prior so only the mono-depth loss is applicable to our setting. Therefore, we add the loss term Eq. (14) without \(^{}_{i}\) to BARF-W (BARF-WD) to check whether the depth prior alone is enough to guide the model to robust pose estimation with unconstrained photos.

Table 2 shows the quantitative result of camera pose estimation, and translation errors are scaled by 10. As expected, BARF fails to estimate the poses due to the lack of photometric consistency in the unconstrained image collection. BARF-W also fails to optimize, which means that it is a hard problem that cannot be solved simply by adding appearance modeling and transient head. Although

Figure 3: Qualitative results of baselines and our model, where (*) denotes BARF-variant baselines we implement. As shown in the figure (columns 2-4), a naive combination of BARF and other methods failed to converge, resulting in poor synthesis quality. In contrast, our model achieves comparable quality to reference NeRF with perfect camera poses.

BARF-WD showed slightly better results, it can be seen that the depth prior alone is not enough to solve the photometric inconsistency. In contrast, our model succeeds in pose estimation and shows a quality result.

Table 1 and Fig. 3 show the novel view synthesis results. As shown in the figure, baselines have poor rendering quality, which must be rooted in a failure of pose estimation. Even though variants of BARF (columns 3-4) show a slight improvement over BARF, its sub-optimal quality and pose estimation gives strong evidence that a mere combination of current methods or imposing depth supervision is not enough to resolve the problem. In contrast, our model shows comparable performance against reference NeRF-W and a clear appearance that implies its accurate pose estimation.

### Ablation study

In this section, we verify the efficacy of each component in pose estimation with wild photos and provide a visualization of how these help the model optimize pose correctly.

Feature-surrogate bundle adjustment.In Section 3.2, we optimize the radiance field by minimizing \(_{}\) for the early training since the unconstrained images are not guaranteed color consistency. When training only with photometric loss \(_{}\) without feature-surrogate, it can be seen from Table 3 that it fails to find accurate camera poses and render the novel views. This result shows that the feature-surrogate method is important for the early stage of training.

Transient-free pose optimization.We demonstrate the effect of separating the transient network from NeRF by comparing our model with a baseline where the transient network remains the same as NeRF-W, meaning that transient occluders are rendered from 3D space as static objects. Table 3 (column 2) clearly shows that gradient flows of transient objects adversely affect both pose estimation and NeRF optimization.

Figure 4: Visual comparison between our model with and without candidate head for a hard pose image during the training process. The small patch images compare the ground-truth pose (black) with the optimized poses (red).

    &  &  \\   & Rot (\({}^{}\)) \(\) & Trans.\(\) & PSNR \(\) & SSIM \(\) & LPIPS \(\) \\  UP-NeRF & **1.053** & **0.129** & **23.73** & **0.800** & **0.182** \\ w/o \(_{}\) & 143.4 & 6.193 & 13.01 & 0.568 & 0.644 \\ w/o \(_{}\) & 2.329 & 0.314 & 22.51 & 0.781 & 0.224 \\ w/o \(_{i}^{}\) & 1.226 & 0.170 & 23.60 & 0.795 & 0.215 \\ w/o \(_{i}^{}\), \(_{i}^{(c)}\) & 4.972 & 1.042 & 21.23 & 0.744 & 0.283 \\   

Table 3: Quantitative results of ablation study. All metrics are an average of 4 scene results.

Figure 5: Visualization of transient confidence weight.

Transient-aware depth prior.As shown in Fig. 5, confidence score filters transient occluders while imposing depth prior to the static correctly as we intended. Even though the static (_e.g_., the gate) is slightly masked, it is justifiable in that the figure is visualized at the early of the training, meaning that the pose is not fully optimized and the model is still being trained to discern the static from the transient.

Candidate head.The last row of Table 3 shows that candidate head plays a crucial role in optimizing camera pose accurately. Additionally, we provide quantitative analysis on the candidate embedding \(_{i}^{(c)}\) size in Table 4. We observed that setting the candidate embedding to an appropriate size is of great help to camera pose estimation, and eventually succeeded in synthesizing novel view images.

### Analysis

Candidate head.Fig. 4 shows that candidate embedding facilitates appropriate pose estimation for a hard pose image, inducing the model not to vainly struggle to overfit the scene without updating the pose. In contrast to the baseline without the candidate head which is stuck in a local minima, our model successfully estimates the pose. The figure implies that if the rendered scene at the early stage is similar to the ground truth with an incorrect pose, the baseline tries to fit the scene by optimizing NeRF, rather than pursuing accurate pose optimization. However, our model is more robust against being trapped into pose local minima for the hard pose images.

Overall training timeWe compared overall learning time between NeRF-W  and UP-NeRF in Table 5. Before training NeRF-W, it is necessary to run COLMAP to get camera poses. The time required for COLMAP depends on the number of images, and the execution time becomes non-negligible as the number increases. For example, _Trevi fountain_ with about 3200 images, takes nearly 1 week to finish. However, UP-NeRF takes just 36 minutes to prepare training, which includes extracting DINO feature and DPT depth maps. The training time of UP-NeRF is also faster than NeRF-W because it renders transient objects directly from the feature maps without a volume rendering process. UP-NeRF only requires about 30 minutes of preprocessing time, so we expect using faster models such as Instant-NGP  to reduce the training time greatly.

## 5 Conclusion

We propose UP-NeRF, a robust unposed-NeRF that can learn with an unconstrained image collection with variable illumination and transient occluders. Thanks to the color-insensitive feature field, separated transient network, candidate head for robust pose optimization, and transient-aware depth prior, our model has less difficulty in estimating poses even in such challenging conditions. The experiment shows the promising results of our model compared to baselines, even comparable to the reference model with accurate poses.