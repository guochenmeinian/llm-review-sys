# PeRFlow: Piecewise Rectified Flow as

Universal Plug-and-Play Accelerator

 Hanshu Yan\({}^{*}\), Xingchao Liu\({}^{+}\), Jiachun Pan\({}^{\#}\), Jun Hao Liew\({}^{*}\), Qiang Liu\({}^{+}\), Jiashi Feng\({}^{*}\)

\({}^{*}\)ByteDance, \({}^{*}\)Univeristy of Texas at Austin, \({}^{\#}\)National University of Singapore

hanshu.yan@outlook.com

###### Abstract

We present Piecewise Rectified Flow (PeRFlow), a flow-based method for accelerating diffusion models. PeRFlow divides the sampling process of generative flows into several time windows and straightens the trajectories in each interval via the reflow operation, thereby approaching piecewise linear flows. PeRFlow achieves superior performance in a few-step generation. Moreover, through dedicated parameterizations, the PeRFlow models inherit knowledge from the pretrained diffusion models. Thus, the training converges fast and the obtained models show advantageous transfer ability, serving as universal plug-and-play accelerators that are compatible with various workflows based on the pre-trained diffusion models. Codes for training and inference have been publicly released. 1.

## 1 Introduction

Diffusion models have exhibited impressive generation performances across different modalities, such as image , video , and audio . Diffusion models generate samples by reversing pre-defined complicated diffusion processes, thus requiring many inference steps to synthesize high-quality results. Such expensive computational cost hinders their deployment  in real-world applications.

Diffusion models can be efficiently sampled by solving the corresponding probability flow ordinary differential equations (PF-ODEs) . Researchers have designed many advanced samplers, such as DDIM , DPM-solver , and DEIS , to accelerate generation, inspired by the semi-linear structure and adaptive solvers in ODEs. However, these samplers still require tens of inference steps to generate satisfying results. Researchers have also explored distilling pretrained diffusion models into few-step generative models , which have succeeded in synthesizing images within 8 inference steps. Progressive Distillation  separates the whole sampling process into multiple segments and learns the mapping from starting points to endpoints for each segment. Distribution Matching Distillation  and SwiftBrush  use the score distillation loss to align the distributions of teacher and one-step student generators. UFOGen , SDXL-Turbo  and SDXL-Lightning  resort to adversarial training for learning few-step/one-step image generators. They initialize the students from pretrained diffusion models and use adversarial and/or MSE losses to align the student model's generation with the pretrained ones. These methods suffer from the difficult tuning of the adversarial training procedure and the mode collapse issue. Latent Consistency Model (LCM)  adopts consistency distillation  to train a generator that directly maps noises to the terminal images. LCM only utilizes supervised distillation where the training procedure will be more stable and easier in comparison to adversarial training. However, the generated images have fewer details compared with SDXL-Lighting.

Unlike the existing methods above, which mainly learn the mappings from noises to images, we aim to simplify the flow trajectories and preserve the continuous flow trajectories of the original pretrained diffusion models. Specifically, we attempt to straighten the trajectories of the original PF-ODEs via a piecewise reflow operation. Previously, InstaFlow  leverages the rectified flow framework[20; 19] to learn the transformation from initial random noise to images. It bridges the two distributions with linear interpolation and trains the model by matching the interpolation. With the reflow operation, it may be able to learn straight-line flows for one-step generation via pure supervised learning. InstaFlow provides a simple pipeline for accelerating pretrained diffusion models, however, it suffers from poor sampling quality which can be attributed to synthetic data generation. The reflow operation requires generating data from the pretrained diffusion models with ODE solvers (e.g., DDIM or DPM-Solver [24; 25]) to construct a training dataset. Synthesizing training data brings two problems: (1) constructing and storing the dataset requires excessive time and space, which limits its training efficiency; (2) synthetic data has a noticeable gap with real training data in quality due to the numerical error of solving ODEs. Thus, the performance of the learned straighter flow is bounded.

To address the problems, _we propose piecewise rectified flow (PeRFlow), which divides the flow trajectories into several time windows and conducts reflow in each window_. By solving the ODEs in the shortened time interval, PeRFlow avoids simulating the entire ODE trajectory for preparing the training data. This significantly reduces the target synthesis time, enabling the simulation to be performed in real time along with the training procedure. Besides, PeRFlow samples the starting noises by adding random noises to clean images according to the marginal distributions, and solves the endpoints of a shorter time interval, which has a lower numerical error than integrating the entire trajectories. Through such a divide-and-conquer strategy, PeRFlow can straighten the sampling trajectories with large-scale real training data. Besides the training framework, _we also design a dedicated parameterization method for PeRFlow to inherit sufficient knowledge from the pretrained diffusion models_. Diffusion models are usually trained with \(\)-prediction, but flow-based generative models generate data by following the velocity field. We derive the correspondence between \(\)-prediction and the velocity field of flow, thus narrowing the gap between the pretrained diffusion models and the student PeRFlow model. Consequently, PeRFlow acceleration converges fast and the resultant model can synthesize highly-detailed images within very few steps. PeRFlow does not require unstable adversarial training or a complete modification of the training paradigm. It is a lightweight acceleration framework and can be easily applied to training unconditional/conditional generative models of different data modalities.

We conducted extensive experiments to verify the effectiveness of PeRFlow on accelerating pretrained diffusion models, including Stable Diffusion (SD) 1.5, SD 2.1, SDXL , and AnimateDiff . PeRFlow-accelerated models can generate high-quality results within four steps. Moreover, we find that the variation of the weights, \( W=-\), between the trained student model \(\) and the pretrained diffusion model \(\), can serve as universal accelerators of almost all workflows that are only trained on the pretrained diffusion models. These workflows include customized SD models, ControlNets, and multiview 3D generation. We compared PeRFlow with state-of-the-art acceleration methods. PeRFlow shows advantages in terms of FID values, visual quality, and generation diversity.

In summary, PeRFlow has the following favorable features: 1) it is simple and flexible for accelerating various diffusion pipelines with fast convergence; 2) The accelerated generators support fast generation; 3) The obtained \( W\) shows superior plug-and-play compatibility with the workflows of the pretrained models.

## 2 Methodology

### Rectified Flow and Reflow

Flow-based generative models aim to learn a velocity field \(_{}(_{t},t)\) that transports random noise \(_{1}_{1}\) sampled from a noise distribution into certain data distribution \(_{0}_{0}\). Then, one can generate samples by solving (1) from \(t=1\) to \(0\):

\[_{t}=_{}(_{t},t)t,_{1} _{1}.\] (1)

Recently, simulation-free learning of flow-based models has become prevalent [20; 19; 18; 1]. A representative method is Rectified flow [20; 19; 18], which adopts linear interpolation between the noise distribution \(_{1}\) and the data distribution \(_{0}\). It trains a neural network \(_{}\) to approximate the velocity field via the conditional flow matching loss. The corresponding optimization procedure is termed reflow [20; 19],

\[_{}_{_{1}_{1},_{0}_{0}}[_{ 0}^{1}\|(_{1}-_{0})-v_{}(_{t},t)\|^{2}t ],_{t}=(1-t)_{0}+t_{1}.\] (2)

InstaFlow  proposed to accelerate pretrained diffusion-based text-to-image models via reflow. Given a pretrained diffusion model \(f_{}\), one can generate new data by solving the corresponding probability flow ODE. We denote \((_{t},t,s)\) as the ODE solver, such as the DPM-Solver . For simplicity, our notation drops the parameters in the ODE solvers. By simulating with \(_{0}=(_{1},1,0)\), where \(_{1}\) is sampled from the random Gaussian distribution \(_{1}\), it synthesizes a dataset of (text, noise, image) triplets for reflow. Since it usually takes tens of inference steps to generate high-quality data with \((_{1},1,0)\), InstaFlow is expensive to scale up. Moreover, since InstaFlow is trained with generated images, it lacks the supervision of real data and thus compromises the resulting generation quality. In the following subsections, we target solving these problems.

### Piecewise Rectified Flow

We present Piecewise Rectified Flow (PeRFlow), aiming at training a piecewise linear flow to approximate the sampling process of a pretrained diffusion model. PeRFlow sticks to the idea of trajectory straightening. It further allows using high-quality real training data and one-the-fly optimization. PeRFlow is easier to scale up and succeeds in accelerating large-scale diffusion models, including the Stable Diffusion family.

A pretrained diffusion model \(f_{}\) corresponds to a probability flow ODE defined by a noise schedule \((t)\). In the Stable Diffusion family, the forward diffusion process follows \(_{t}=(t)}_{0}+(t)\), where \(_{0}\) and \(\) are sampled from the data distribution and random Gaussian respectively. The sampling trajectories are usually complicated curves. Even for an advanced ODE solver \((_{t},t,s)\), it still requires many steps to generate an artifact-free image. We accelerate the pretrained model by applying a divide-and-conquer strategy, that is, we divide the ODE trajectories into multiple time windows and straighten the trajectories in each time window via the reflow operation.

We create \(K\) time windows \(\{[t_{k},t_{k-1})\}_{k=K}^{1}\) where \(1=t_{K}>>t_{k}>t_{k-1}>>t_{0}=0\). For each time window \([t_{k},t_{k-1})\), the starting distribution \(_{k}\) will be the marginal distribution of the diffusion process at time \(t_{k}\). It can be derived from \(_{t_{k}}=(t_{k})}_{0}+(t_{k})\). The target end distribution \(_{k-1}\) is constructed by \((_{t_{k}},t_{k},t_{k-1})\). We train the PeRFlow model, denoted by \(\), to fit the linear interpolation between \(_{t_{k}}\) and \(_{t_{k-1}}\) for all \(k[1,,K]\).

\[_{}_{k=1}^{K}_{_{t_{k} }_{k}}[_{t_{k-1}}^{t_{k}}\|_{t_{k-1}}-_{ t_{k}}}{t_{k-1}-t_{k}}-v_{}(_{t},t)\|^{2}t],\\ _{t_{k-1}}=(_{t_{k}},t_{k},t_{k-1 })_{t}=}{t_{k}-t_{k-1}}_{t_{k}}+ -t}{t_{k}-t_{k-1}}_{t_{k-1}}.\] (3)

ParameterizationThe pretrained diffusion models are usually trained by two parameterization tricks, namely \(\)-_prediction_ and _velocity-prediction_. To inherit knowledge from the pretrained network,

Figure 1: Our few-step generator PeRFlow is trained by a divide-and-conquer strategy. We divide the ODE trajectories into several intervals and perform reflow in each time window to straighten the sampling trajectories.

we parameterize the PeRFlow model as the same type of diffusion and initialize network \(\) from the pretrained diffusion model \(\). For the _velocity-prediction_, we can train the PeRFlow model by velocity-matching in (3). To accommodate \(\)_-prediction_, we can represent the denoised state \(_{t_{k-1}}\) with the starting state \(_{t_{k}}\) and \(\):

\[_{t_{k-1}}=_{k}_{t_{k}}+_{k},\] (4)

where \(_{k}>1\) and \(_{k}\) are defined by the user. We propose to train a neural network \(_{}(_{t},t)\) to estimate the noise \(\) in (4) based on \(_{t}\) for all \(t[t_{k},t_{k-1})\):

\[_{}_{k=1}^{K}_{_{t_{k}}_{k}} [_{t_{k-1}}^{t_{k}}\|_{t_{k-1}}-_{k}_{t _{k}}}{_{k}}-_{}(_{t},t)\|^{2}\,t ],\] (5) \[_{t_{k-1}}=(_{t_{k}},t_{k},t_{k-1 })_{t}=}{t_{k}-t_{k-1}}_{t_{k}} +-t}{t_{k}-t_{k-1}}_{t_{k-1}}.\]

The optimum of (3) and (5) are,

\[v^{*}(_{t},t)=[_{t_{k-1}}-_{t_{k}}}{t_{ k-1}-t_{k}}|_{t}],^{*}(_{t},t) =[_{t_{k-1}}-_{k}_{t_{k}}}{_{k}} |_{t}].\]

Using calculus and the fact \(_{t}=}{t_{k}-t_{k-1}}_{t_{k}}+-t}{t_{k}- t_{k-1}}_{t_{k-1}},\) we get,

\[v^{*}(_{t},t)=)z_{t}-_{k}^{*}(_{t},t)}{t-t_{k-1}+_{k}t_{k}-_{k}t}\] (6)

The sampling process involves first computing \(_{}(_{t},t)\) from \(_{t}\), then estimating the velocity \((_{t})\) via (6) for solving the ODE (1). In this paper, we consider two choices for \(\) and \(\):

* _Parameterization [A]_: According to the definition of the diffusion process, we have \(_{t_{k}}=_{t_{k-1}}+}\) with \(=^{2})/(1-_{k-1}^{2})}\). We can represent \(_{t_{k}}\) with \(_{t_{k-1}}\) and yield, \[_{k}=^{2}}}{^{2}}}, _{k}=-^{2}-_{k-1}^{2}}}{^{2} }}.\] (7)
* _Parameterization [B]_: We can also follow the DDIM solver , i.e., \[_{t_{k-1}}=}}{_{t_{k}}}}_{t_{k}}+ }}(}}{_{t_{k-1}}} }-}}{_{t_{k}}}})_{}(_{t_{k}},t_{k}),\] where \(_{k}=1-_{k}^{2}\). We can correspondingly set, \[_{k}=}}{}},_{k}=}}-}}{}}}.\] (8) This parameterization initializes the student flow from the update rule of DDIM, which is equivalent to the Euler discretization of the probability flow ODE. We empirically observe that it gives faster training convergence.

Scaling Up with Real Training DataPeRFlow divides the time range \(\) into multiple windows. For each window, the starting point \(_{t_{k}}\) is obtained by adding random noise to _real_ training data \(z_{0}\), and it only requires several inference steps to solve the ending point \(_{t_{k-1}}\). The computational cost is significantly reduced for each training iteration compared to InstaFlow, allowing us to train PeRFlow on large-scale training datasets with fast online simulation of the ODE trajectory. Besides, solving endpoints of a shorter time window \([_{t_{k}},_{t_{k-1}})\) has lower numerical errors in comparison to the entire time range. High-quality supervision yields significant improvement in the generation results.

Classifier-Free Guidance in TrainingClassifier-free guidance (CFG)  is a common technique to improve the generation quality of text-to-image models. During training, we solve the endpoints \(_{t_{k-1}}\) for each time window \([t_{k},t_{k-1})\) in an online manner via an ODE solver \((_{t_{k}},t_{k},t_{k-1},,w)\), where \(w 1\) denotes the CFG scale, \(\) denotes the text prompt. CFG is turned off when \(w=1\). PeRFlow supports two modes: _CFG-sync_ and _CFG-fixed_:* _CFG-sync_: We disable CFG by setting \(w=1\) for \((_{t_{k}},t_{k},t_{k-1},,w)\). The obtained PeRFlow model can use similar CFG scales as the pretrained diffusion models to guide the sampling.
* _CFG-fixed_: We use a pre-defined \(w=w^{*}>1\) for \((_{t_{k}},t_{k},t_{k-1},,w)\) during training. The obtained PeRFlow model learns to straighten the specific ODE trajectories corresponding to \((_{t_{k}},t_{k},t_{k-1},,w^{*})\). One should use a smaller CFG scale (e.g., 1.0-2.5) to adjust guidance when sampling from PeRFlow trained with _CFG-fixed_.

Through empirical comparison, we observe that PeRFlow+_CFG-sync_ preserves the sampling diversity of the original diffusion models with occasional failure in generating complex structures, while PeRFlow+_CFG-fixed_ trades off sampling diversity in exchange for fewer failure cases.

Our recommendations are as follows: When using powerful pre-trained diffusion models (e.g., SDXL) and prioritizing generation quality, PeRFlow+_CFG-fixed_ is the better choice. On the other hand, when the goal is to maintain the sampling diversity and adaptability of customized fine-tuned plug-ins, such as Dreamshaper, PeRFLow+_CFG-sync_ is the more suitable option.

**PeRFlow as Universal Plug-and-Play Accelerator** PeRFlow initializes the weights of the student model \(\) with the pretrained diffusion model \(\). After training with piecewise reflow, we find that the change of weights \( W=-\) can be used to seamlessly accelerate many other workflows pretrained with the diffusion model. For exmaple, \( W\) of PeRFlow+SD-v1.5 can accelerate the ControlNets , IP-Adaptor  and multiview generation  pipelines trained with the original SD v1.5. The accelerated pipelines achieve nearly lossless few-step generation as the original many-step generation. Please refer to Section 3.2 for detailed results.

**Number of Time Windows** The number of training segments depends on our expected minimum steps for the inference stage. Suppose the number of minimum steps for the inference stage is \(N\), the number of training segments \(K\) should be less or equal to \(N\). The reason is that we cannot approximate the velocity of a time window by the velocity of its previous time window. So, for each window, we should allocate at least a one-step computation budget. This paper evaluates 4-step, 6-step, and 8-step generation capabilities, so we set the number of training segments as four. In some special cases (e.g., Wonder3D in figure 8 Appendix), the trajectory across the whole time window is almost linear after 4-piece PeRFlow acceleration. We can generate multi-view results with one step.

But in most cases, we should use an inference step larger or equal to the training segments. On the computational cost, PeRFlow only requires the \(1/K\) amount of steps for synthesizing the training target in each iteration, compared to that of InstaFlow.

## 3 Experiments

We use PeRFlow to accelerate several large-scale text-to-image and text-to-video models, including SD-v1.5, SD-v2.1, SDXL, and AnimateDiff. In this section, we will illustrate the experiment configurations and empirical results.

**Experiment Configuration** All the PeRFlow models are initialized from their diffusion teachers. PeRFlow-SD-v1.5 is trained with images in resolution of \(512 512\) using _\(\)-prediction_ defined in (7). PeRFlow-SD-v2.1 is trained with images in resolution of \(768 768\) using _\(\)-prediction_. PeRFlow-SDXL is trained with images in resolution of \(1024 1024\) using _\(\)-prediction_ defined in (8). Images are all sampled from the LAION-Aesthetics-5+ dataset  and center-cropped. We also train PeRFlow-AnimateDiff with video clips in size of \(16 384 384\) using _\(\)-prediction_ defined in (8). We randomly drop out the text captions with a low probability (\(10\%\)) to enable classifier-free guidance during sampling. We divide the time range \(\) into four windows uniformly. For each window, we use the DDIM solver to solve the endpoints with 8 steps. We refer to the Hugging Face scripts for training Stable Diffusion 2 to set other hyper-parameters, including learning rate and weight decay. All experiments are conducted with \(16\) NVIDIA A100 GPUs.

### Few-step generation

PeRFlow succeeds in accelerating pretrained Stable Diffusion models to few-step generators. As shown in figure 2 and 3, PeRFlow can generate astonishing pictures with only 4 steps. If increasing the number of inference steps (e.g., 5 or 6), we can obtain images with much richer details. We compare the generation results with recent acceleration methods, including InstaFlow, LCM-LORA, and SDXL-lightning. PeRFlow enjoys richer visual texture and better alignment between text prompts and images. Refer to figure 10, 12, and 13 in **Appendix** for more results.

We compute the FID values of PeRFlow-accelerated SDs in table 1 using images on three different reference distributions: (1) LAION-5B-Aesthetics , which is the training set of PeRFlow and other methods; (2) MS COCO 2014  validation dataset; (3) images generated from SD- v1.5/XL with JourneyDB  prompts. We generate 30,000 images for the SD-v1.5 models and 10,000 for the SDXL series. We set the inference steps to 4 and 8 steps, respectively. In comparison to LCM-LoRA, we observe that PeRFlow models have obviously lower FID values. When increasing the number of inference steps, FID values of PeRFlow decrease because the numerical errors of solving ODE are better controlled. However, FID values of LCM-LoRA unexpectedly increase.

**Domain shift caused by acceleration** When accelerating diffusion models, we expect to preserve the performance and properties of the pretrained models. In table 1, we compute the FID values between the generation of the original SD models and the accelerated models. We observe the FID values of PeRFlow are smaller than LCM-LORA, InstaFlow, and SDXL-Lightning. This implies the distribution shift to the original SD models caused by PeRFlow is much smaller than other counterparts. The numerical comparison corresponds to the results in figure 5. The color style and layout of PeRFlow's results match the results of the pretrained models, while an obvious domain shift appears in the results of LCM-LoRA. Besides, the sampling diversity of PeRFlow is similar to the original SD-v1.5 and appears to be better than LCM-LoRA in figure 6.

### PeRFlow as Universal Plug-and-Play Accelerator on SD Work Flows

PeRFlow-\( W\) serves as a universal accelerator that can be simply plugged into various pipelines trained on the pretrained Stable Diffusion models, including (but not limited to) ControlNet , IP-Adaptor , and multiview generation. For example, plugging PeRFlow-\( W\) into the SD-v1.5 ControlNet-Tile gives a 4-step image enhancement module (figure 7). Combining this module with the 4-step PeRFlow-SD-v1.5, we can generate high-quality \(1024 1024\) images with lightweight SD-v1.5 backbones. For multiview generation, plugging PeRFlow-\( W\) into the Wonder3D pipeline leads to **one-step** generation of multi-view images (figure 8). More results are shown in figure 9.

### Additional Discussion

**Inference Budget Allocation** PeRFlow divides the entire sampling trajectory into \(K\) time windows \(\{[t_{k},t_{k-1})\}_{k=K}^{1}\), with \(1=t_{K}>>t_{k}>t_{k-1}>>t_{0}=0\) indicating noisy to clean states. After training, \(K\)-step inference (one for each window) will yield high-quality images in most cases. However, for pictures with complex structures, such as motorcycles with well-crafted wheels and engines, PeRFlow may require more steps. Ho _et al._ found that diffusion models generate images by synthesizing the layout and structure first and then refining the local details. We denote the

Table 1: FID values of different acceleration methods (lower values indicate better quality).

Figure 2: The \(1024 1024\) images generated by PeRFlow enjoy richer details and better text-image consistency in comparison to other acceleration methods on SDXL. Prompt #1: _“a closeup face photo of girl, wearing a raincoat, in the street, heavy rain, bokeh”_; Prompt #2: _“a closeup face photo of a boy in white shirt standing on the grassland, flowers”_; Prompt #3: _“a huge red apple in front of a small dog, heavy snow”_. Prompt #4: _“front view of a boat sailing in a cüp of water”_.

number of inference steps by \(N\). Inspired by this observation, we first allocate each window with \(N//K\) steps. If \(N K>0\), then the extra budget is given to time windows in noisy regions. Specifically, we give one extra step for windows, whose index \(i\) satisfies \(K-i<N K\). In practice, PeRFlow creates \(4\) time windows for acceleration training, and \(5\)-step inference consistently generates high-quality images.

**Dynamic Classifier-Free Guidance** CFG is a useful technique to improve the layout, structure, and text alignment of the generated images. However, a large CFG scale sometimes leads to over-saturated color blocks . To mitigate this issue, we use a dynamic CFG strategy for few-step sampling, i.e., the corresponding CFG scales decrease for window \(K\) to \(1\). For example, when sampling with

Figure 4: 6-step generation (\(16 512 512\)) via PeRFlow-AnimateDiff (motion module-v3 with DreamShaper). The text prompts used are _“A young woman smiling, in the park, sunshine”_ and _“A dog sitting in the garden, snow, trees”_.

Figure 3: The \(512 512\) images generated by PeRFlow enjoy richer details and color styles in comparison to other acceleration methods on SD-v1.5 (w/ DreamShaper). Images in each row are generated with the same random seed.

\(5\) steps, the CFG schedule is \(7.5\)-\(4.0\)-\(4.0\)-\(4.0\) for the _CFG-sync_ mode and \(2.5\)-\(1.5\)-\(1.5\)-\(1.5\) for the _CFG-fixed_ mode.

## 4 Related Works

**Few-Step Diffusion Models** Diffusion models have demonstrated impressive generative capabilities, but their iterative sampling process often suffers from slow inference speed [8; 39; 38]. To accelerate these models, various methods have been proposed. Progressive Distillation [35; 28] iteratively reduces the number of inference steps to 4-8, but the error can accumulate during the process. Alternative approaches [45; 44; 54; 47; 16; 36] leverage adversarial losses to align the distributions and reduce the number of inference steps, but these methods often struggle with training instability and mode collapse. To avoid adversarial training, recent works [50; 30; 56] employ additional models to estimate the score of the generated data for distilling one-step generators, but this adds extra cost to the training pipeline. Consistency Distillation [40; 26] is a novel pipeline for distilling few-step diffusion models by optimizing a consistency loss. However, the substantial difference between consistency models and the original diffusion models can hurt their adaptability to pre-trained modules. In our work, PeRFlow provides a simple, clean, and efficient framework for training few-step generative flows. By using different parameterizations as described in Section 2.2, PeRFlow achieves minimal gap with diffusion models, making it suitable for various pre-trained workflows.

**Straight Probability Flows** Learning straight probability flow is a promising principle for obtaining fast generative flows [20; 19; 21; 4]. Reflow is an effective way to learn such straight flows, but it requires constructing a large synthetic dataset [20; 21], which can introduce computational overhead and distribution shift. To avoid dataset construction,[13; 46] use an extra neural network to estimate the initial noise corresponding to an image, but training this network can be challenging.  employs mini-batch optimal transport to directly learn a straighter trajectory, but it is unclear how to apply this method to conditional generation scenarios, such as text-to-image generation.  finds the best step-size schedule for the pretrained generative model before reflow to improve efficiency, but it cannot avoid dataset generation and the resulting distribution shift. PeRFlow provides a new method to avoid using synthetic datasets. It uses real training data to mitigate distribution shift and a divide-and-conquer strategy to efficiently perform reflow, leading to advanced few-step text-to-image generators. Sequential reflow is a concurrent work to ours. Compared to their work, we additionally provide different parameterization strategies to enhance the empirical performance in accelerating pre-trained text-to-image models.

Figure 5: PeRFlow has better compatibility with customized SD models compared to LCM-LoRA. The top is ArchitectureExterior and the bottom is DisneyPixarCartoon.

Figure 6: Three random samples from two models with the same prompts. PeRFlow has better sampling diversity compared to LCM-LoRA.

Conclusions

In this work, we present Piecewise Rectified Flow (PeRFlow), a novel technique to learn few-step flow-based generative models. PeRFlow adopts a divide-and-conquer strategy, separating the generation trajectory into intervals and applying the reflow operation within each interval. This yields two key advantages: (1) using real training data to mitigate distribution shift from synthetic data, and (2) avoiding the need to generate and store a synthetic dataset prior to training. PeRFlow also designs proper parameterizations to inherit knowledge from pre-trained diffusion models for fast convergence. Consequently, PeRFlow accelerates powerful diffusion models like SD v1.5, SD v2.1, and SDXL, producing high-quality few-step image generators. Moreover, PeRFlow can be seamlessly combined with various SD workflows to create their accelerated versions.

LimitationsCurrently, PeRFlow divides the time range into 4 windows, balancing inference and training costs. It needs 4 steps or more for generation. To enable 1-2 step inference, we plan to explore multi-stage training and will focus on avoiding target synthesizing in the future.

## Broader Impacts

This work proposes an acceleration technique for generative models. It can reduce the computational cost to less than 20% of the original and thus reduce the power cost. The proposed acceleration technique makes generative models more environmentally friendly.