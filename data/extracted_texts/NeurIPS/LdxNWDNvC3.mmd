# AFBench: A Large-scale Benchmark

for Airfoil Design

Jian Liu\({}^{1,2}\) Jianyu Wu\({}^{2}\) Hairun Xie\({}^{3}\) Guoqing Zhang\({}^{1}\) Jing Wang\({}^{3}\) Wei Liu\({}^{3}\)

Wanli Ouyang\({}^{2}\) Junjun Jiang\({}^{1}\) Xianming Liu\({}^{1}\)1 Shixiang Tang\({}^{2*}\) Miao Zhang\({}^{3}\)1

\({}^{1}\) Harbin Institute of Technology \({}^{2}\) Shanghai Artificial Intelligence Laboratory

\({}^{3}\) Shanghai Aircraft Design and Research Institute

###### Abstract

Data-driven generative models have emerged as promising approaches towards achieving efficient mechanical inverse design. However, due to prohibitively high cost in time and money, there is still lack of open-source and large-scale benchmarks in this field. It is mainly the case for airfoil inverse design, which requires to generate and edit diverse geometric-qualified and aerodynamic-qualified airfoils following the multimodal instructions, _i.e.,_ dragging points and physical parameters. This paper presents the open-source endeavors in airfoil inverse design, _AFBench_, including a large-scale dataset with 200 thousand airfoils and high-quality aerodynamic and geometric labels, two novel and practical airfoil inverse design tasks, _i.e.,_ conditional generation on multimodal physical parameters, controllable editing, and comprehensive metrics to evaluate various existing airfoil inverse design methods. Our aim is to establish _AFBench_ as an ecosystem for training and evaluating airfoil inverse design methods, with a specific focus on data-driven controllable inverse design models by multimodal instructions capable of bridging the gap between ideas and execution, the academic research and industrial applications. We have provided baseline models, comprehensive experimental observations, and analysis to accelerate future research. Our baseline model is trained on an

Figure 1: **Our Airfoil Generation and Editing Software.** (a) Generating diverse candidate airfoils. (b) Editing Keypoints and Editing Physical Parameters.

RTX 3090 GPU within 16 hours. The codebase, datasets and benchmarks will be available at https://hitcslj.github.io/afbench/.

## 1 Introduction

The airfoil inverse design problem serves as the center of the automatic airfoil design, which is to seek design input variables, _i.e.,_ physical parameters, to optimize an underlying objective function, _e.g.,_ aerodynamics. Previous methods can be divided into two categories: optimization methods  and data-driven methods . First, the optimization-based methods usually design an objective function by constructing a mathematical model and leverage the typical optimization algorithms, _e.g.,_ genetic algorithms , adjoint optimization  and topology optimization , to find the optimal input variables as the design parameters. Despite the success, these methods have limitations in considerable time consumption and the diversity of the optimal design variables due to the constructed physical model of airfoils. Second, the data-driven methods  typically borrow ideas from the advancements in conditional generative models in artificial intelligence. Popular generative methods such as CGAN , CVAE , and Diffusion models  have been explored, demonstrating their effectiveness. However, current data-driven methods suffer from the following three drawbacks. First, the existing datasets are relatively small-scale, _e.g.,_ the design geometry dataset UIUC  contain only thousands of samples. Therefore, data-driven models trained on such datasets have limited generalization capabilities and fail to generate diverse solutions that meet the requirements. Second, the current datasets typically provide only a single condition, _i.e.,_aerodynamic parameters, and thus cannot handle multi-condition design, _i.e.,_ controlling leading edge radius and upper crest position as geometric parameters simultaneously, which are real industrial applications in airfoil design. Third, current airfoil inverse design methods do not support progressive editing existing designs according to manual and multimodal requirements, which limits their applications in the industry. For example, one of our authors from Shanghai Aircraft Design and Research Institute, who has over 10 years experiences for airfoil design, claimed that each airfoils used in current commercial airplanes underwent years of progressively refinements by hundreds of engineers.

To drive the development of generative models in the field of engineering design, we construct a comprehensive airfoil benchmark, _AFBench_, that can be a cornerstone to cope with the aforementioned challenges with the following merits:

**(1) Tasks - Multi-Conditional Generation and Editing in Airfoil Inverse Design:** Regarding the aforementioned dataset, we tailor it to accommodate two new but more practical tasks in real airfoil design: multi-conditional airfoil generation and multimodal airfoil editing. The task of airfoil generation is not limited to the previous approach of generating airfoils based solely on given aerodynamic labels such as Lift-to-drag ratio. Instead, it involves generating airfoils based on multiple intricate geometric labels proposed by our authors who are experts in airfoil designs, which is more challenge but practical than previous airfoil generation based on the single condition. We introduce a newly developed airfoil editing task, which currently allows for the modification of both control points and physical parameters of the airfoil. The editing of physical parameters is not present in traditional airfoil editing software, and the movement of control points, compared to the spline interpolation in traditional software, is enabled by AI models with a broader design space.

**(2) Datasets - Large-scale Airfoil Datasets with High-quality and Comprehensive Geometric and Aerodynamic Labels:** Regarding the aforementioned airfoil inverse design tasks, the training subset of the proposed AFBench consists of 200,000 well-designed both synthetic and manually-designed airfoils with 11 geometric parameters and aerodynamic properties under 66 work conditions (Mach number from 0.2 to 0.7, Lift coefficient from 0 to 2). To construct the AFBench, we propose an automatic data engine that includes data synthesis, high-quality annotations and low-quality filtering. Different from previous datasets, we (i) not only combine all airfoils in the existing datasets such as such as UIUC  and NACA , but also include 2,150 new manually-designed supercritical airfoils from Shanghai Aircraft Design and Research Institute that is highly insufficient in existing datasets; (ii) further enlarge the dataset to 200,000 airfoils by effective data synthesis with conventional physical models and unconditional generative models; (iii) annotate geometric and aerodynamic labels by CFD (Computational fluid dynamics) simulation software.

**(3) Open-source Codebase and Benchmarks - A Open-source Codebase of Data-driven Generative Models for Airfoil Inverse Design with State-of-the-art Methods and Comprehensive

**Evaluation Metrics:** Since there are still absent a comprehensive and clean codebase to compare and analyze different airfoil inverse design methods, we release a comprehensive and publicly accessible codebase to facilitate future researches. This codebase includes multiple existing methods, _e.g.,_ cVAE [21; 22; 23], cGAN [24; 25], and our newly proposed primary architectures for both multi-conditional airfoil generation and controllable airfoil editing, PK-VAE, PK-VAE\({}^{2}\), PK-GAN, PKVAE-GAN, PK-DIFF, PK-DiT inspired by mainstream generative frameworks, _i.e.,_ VAE, GAN and Diffusion models. To facilitate exploration and usage, we have also provided a user-friendly demo that easily allows different airfoil inverse design methods for online generation and editing. Furthermore, different from previous benchmarks that only evaluates the aerodynamic performance, we also provide the interface to evaluate the geometric quality, the aerodynamic quality and the diversity of the generated airfoils, which are also crucial for airfoil inverse design.

The main contributions of this work are summarized as follows:

* We propose the use of generative methods for two key tasks in airfoil design: multi-conditional airfoil generation and airfoil editing. We also establish comprehensive evaluation metrics including diversity, controllability, geometric quality and aerodynamic quality.
* We propose a large-scale and diverse airfoil dataset in Airfoil Generative Design. This dataset includes 200 thousands airfoil shapes, accompanied by detailed geometric and aerodynamic annotation labels. The dataset can provide valuable resources for training and evaluating generative models in airfoil inverse design.
* We construct and open-source a codebase that encompasses generative methods in airfoil design, including foundational techniques such as cVAE, cGAN as well as advanced models like PK-GAN,PK-VAE,PKVAE-GAN and PK-DiT. We provide a user-friendly demo that allows for visualizing and experiencing airfoil design in real-time.

## 2 Related Work

**Airfoil Inverse Design.** The ultimate goal of airfoil inverse design is to use algorithms to automatically find airfoils that meet the given requirements. Previous efforts [26; 27] have explored datasets for investigating airfoil aerodynamic characteristics, but have largely relied on the UIUC and NACA airfoil shapes, lacking the support to explore large-scale airfoil models. Our dataset, on the other hand, boasts a more diverse collection of airfoils and rich annotations. Additionally, we have proposed AFBench, which includes airfoil generation and airfoil editing. Airfoil generation is a combination and complement to inverse design and parameterization, as it can generate airfoils that satisfy geometric constraints based on PARSEC parameters. We also propose a new task, airfoil editing, to allow designers to more easily find the optimal airfoil based on their experience.

**Conditional Generative methods in Airfoil Design.** There are some new attempts to leveraging the advantages of both implicit representation and generative methods in airfoil design. _Variation Auto Encoder_ trains a model to minimize reconstruction loss and latent loss, and it is usually optimized considering the sum of these losses.  proposes two advanced CVAE for the inverse airfoil design problems by combining (CVAE) and distributions. _Generative adversarial network_ uses a generative neural network to generate a airfoil and uses a discriminative neural network to justify the airfoil is real or fake. CGAN  improves the original GAN by inputting the conditions to both the generator and discriminator. For instance,  generates shapes with low or high lift coefficient. By inputting the aerodynamic characteristics such as lift-to-drag ratio (Cl/Cd) or shape parameters, it is possible to guide the shape generation process toward particular airfoil. _Diffusion model_ is the emerging generative models [14; 31; 13] in engineering design. However, there are still few attempts in airfoil inverse design. We provide more detailed literature review in Appendix B.

## 3 Automatic Data Engine

Since diverse airfoil datasets are not easily accessible publicly, we develop a data engine to collect 200,000 diverse airfoils, dubbed AF-200K. Our proposed AF-200K dataset first includes airfoils from two public datasets, such as UIUC and NACA, and then leverages our proposed data engine to generate synthetic airfoils. The data engine has three stages: (1) synthetic airfoil generation stage; (2) geometric and aerodynamic parameter annotation stage; (3) low-quality airfoil filtering stage. We illustrate the data engine pipeline in Fig. 2 and visualize generated airfoils in Fig. 3.

### Synthetic Airfoil Generation Stage

Based on airfoils in UIUC and newly collected airfoils that are manually designed by COMAC (Commercial Aircraft Corporation of China), we synthesize airfoils by both physical models and unconditional generative methods.

**CST-assisted Generation.** The CST-assisted Generation synthesizes the airfoils firstly by parameterizing physical models, _i.e.,_ CST model and then perturbing these parameters. Given one manually designed airfoil \(f_{0}\), we parameterize the airfoil with the CST method  as \(p_{0}=(p_{0}^{1},p_{0}^{2},...,p_{0}^{M})\), where \(M\) is the number of physical parameters 2. Afterwards, we perturb the parameters of the airfoils with Latin hypercube sampling (LHS). Take generating \(N\) airfoils based on one manually-designed airfoil for example. For every variable \((p_{0}^{1},p_{0}^{2},...,p_{0}^{M})\)in our parameterized airfoil, we evenly divided into \(N\) parts, and randomly sample a value in \(N\) parts, respectively for \(N\) generated airfoils. With Latin hypercube sampling (LHS), the generated airfoils can be uniformly sampled from the parametric space of CST for supercritical airfoils. The generated airfoils are illustrated in Fig. 3.

**Unconditional Airfoil Generation Stage.** While the airfoils generated by perturbing the parameters of CST models significantly extend the training datasets, the design space is still limited to the capability of CST models (Fig. 3). To further explore the more general design space, we propose two unconditional generative-model-based methods, _i.e.,_ BezierGAN  and diffusion models , to generate airfoils in the training set. Specifically, we train BezierGAN  and diffusion models  using our selected airfoils from the UIUC dataset (referred to as UIUC-Picked). We generate 10,000 airfoils with BezierGAN and generate another 10,000 airfoils with the diffusion model. We will detail the architecture of BezierGAN and diffusion model in the Appendix D.

Figure 3: **Diverse Airfoils Generated by Our Automatic Data Engine.** (a) Original airfoil from the UIUC database. (b) Airfoils generated using CST perturbation of the UIUC airfoil. (c) Airfoils generated using our trained model. (d) Combination of generated airfoils.

Figure 2: **The overall pipeline of the Automatic data engine**

### Geometric and Aerodynamic Parameter Annotation Stage

**Aerodynamic Annotation.** We compute the angle of attack (AoA) and drag coefficient (CD) of each airfoil under different working conditions. Specifically, we set the Reynolds number to 100,000 and vary the Mach number from 0.2 to 0.7 (in increments of 0.1), and the lift coefficient (CL) from 0.0 to 2.0 (in increments of 0.2). The working conditions are denoted as \(w_{c}=[Ma,CL]\), where Ma is the Mach number and CL is the lift coefficient. For each working condition, we pass the airfoil coordinates into XFoil  to calculate the corresponding aerodynamic labels, including the angle of attack (AoA), drag coefficient (CD), and moment coefficient (CM).

**Geometric Annotation.** The Geometric label is primarily based on PARSEC physical parameters, with Control keypoints as supplementary information. The PARSEC physical parameters (as shown in Fig. 4) include the leading edge radius (\(R_{lc}\)), upper crest position (\(X_{up},Y_{up}\)), upper crest curvature (\(Z_{xxup}\)), lower crest position (\(X_{lo},Y_{lo}\)), lower crest curvature (\(Z_{xxlo}\)), trailing edge position (\(Y_{te}\)), trailing thickness (\( Y_{te}\)), and two trailing edge angles (\(_{te},_{te}\)).

We utilize B-spline  interpolation to convert the discrete points into a continuous representation, and then calculate the first-order and second-order derivatives, as well as the extrema. For the Control Keypoints, we select a subset of the airfoil surface points, approximately one-twentieth of the original number of points. The main purpose is to control the overall contour of the airfoil, ensuring that it does not undergo drastic changes.

### Airfoil Filtering Stage

Given the airfoils generated with the parametric CST model and the generative model, we need to filter out those with low aerodynamic performance to prevent the generative model from producing low-quality airfoils. Specifically, we use a numerical solver based on Reynolds-Averaged Navier-Stokes (RANS) equations to calculate the physical parameters of flow fields. These parameters are then used to assess the aerodynamic performance of the generated airfoils. We set 66 work conditions (as detailed in Section 3.2), and if an airfoil fails to converge under all 66 conditions, we classify it as a poor-quality airfoil and discard it.

Figure 4: PARSEC physical parameters

Figure 5: Dataset presentation: (a) Proportional composition of the datasets within AF-200K. (b) Comparison between AF-200K and existing airfoil datasets.

## 4 AFBench: Dataset Presentation and Benchmarking Setup

### Dataset Presentation

Based on the aforementioned automatic data engine, the AF-200K dataset includes a diverse collection of about 200,000 airfoils, including UIUC, NACA, supercritical airfoils, and generated airfoils, as shown in Fig. 5. From the UIUC dataset, we have carefully selected 1,433 airfoils with favorable aerodynamic performance from more than 1,600 original raw data entries. For the NACA airfoils, we referenced the AIRFRANS  design space, resulting in a total of 5,000 NACA 4-digit and 5,000 NACA 5-digit airfoils. The Supercritical Airfoil dataset was generated by perturbing and expanding upon designs provided by COMAC engineers, using the CST method, yielding a total of 21,500 airfoils. To further augment the UIUC dataset, we generated 143,300 airfoils through CST-assisted generation. Additionally, we employed generative modeling approaches to synthesize 10,000 airfoils each using BezierGAN  and diffusion models . All airfoil data are stored in the form of 2D coordinates, with each airfoil represented by 257 points. In cases where the original data did not have 257 points, we used B-spline interpolation to ensure a consistent representation. The AF-200K dataset is split into training, validation, and test sets with a ratio of 8:1:1.

### Airfoil Inverse Design Tasks

**Controllable Airfoil Generation.** The controllable airfoil task aims at generating airfoils, which is described by 257 points, given the physical parameters and control keypoints. We expect the generated airfoil should consist with the given physical parameters and control keypoints and also with high diversity, good geometric quality and aerodynamic quality.

**Editable Airfoil Generation.** The editable airfoil generation task aims at editing a given airfoil following the instruction. Specifically, the editable airfoil we can edit the airfoil using the physical parameters and control keypoints, _e.g.,_ 2 times enlarging the leading edge, or dragging one of the control point. We expect the airfoil after editing can be conformed to the instruction. We expect the airfoil after editing should be consist with the given physical parameters or control keypoints and also with high diversity, good geometric quality and aerodynamic quality.

### Baseline Methods

As shown in Fig. 6, we train four generative models: VAE, GAN, VAE-GAN and Diffusion Models.

**PK-VAE and PK-VAE\({}^{2}\).** Based on , we modify the plain VAE by incorporating parsec parameters  and control keypoints as geometry constraints. PK-VAE\({}^{2}\) is a composite of VAEs: EK-VAE, PK-VAE and PK-VAE, which enable airfoil editing. Speicifically, EK-VAE achieves editing by predicting physical parameters from control keypoints, while EP-VAE predicts control keypoints

Figure 6: **The baseline methods for benchmarking the dataset.**from physical parameters. By training these components separately and then combining them with PK-VAE for joint training, we can achieve efficient airfoil editing.

**PK-GAN.** Building upon the Bezier-GAN approach , we introduce a conditional formulation in our model. We employ a technique similar to Adaptive Instance Normalization  to seamlessly integrate the condition embedding at multiple scales within the Generator. Simultaneously, we adopt a similarity-based approach to blend the condition information into the Discriminator.

**PKVAE-GAN.** Inspired by , we utilize a conditional Variational Autoencoder (cVAE) as the generator, and train it with the discriminator conditioned on physical parameters and keypoints.

**PK-Diffusion.** For conditional diffusion models [18; 40], we designed two types based on Unet  and Transformer  architectures. In the U-Net model (PK-DIFF), the encoder extracts features by stacking multiple layers of convolutions, while the decoder reconstructs features by stacking multiple layers of convolutions. The encoder outputs are concatenated with the corresponding scale inputs of the decoder through skip connections. The time steps and conditions are mapped through MLP layers and then integrated with the input features. In the DIT model (PK-DIT), we also integrate time steps and conditions by employing MLP to map them before feature extraction. Feature extraction is performed through four layers of DIT blocks.

### Evaluation Metrics

The performance of the model depends on three factors: controllability, diversity of the generated/edited airfoils, and quality of the generated airfoils (including both geometric and aerodynamic quality). We evaluate the performance using the following metrics:

* To measure the constraint of the conditions, we propose the _label error_: \[_{i}=|_{i}-p_{i}|,i=1,2,...,11\] (1) where \(_{i}\) is the label error for the \(i\)-th physical parameter, \(}\) is the \(i\)-th physical parameter calculated from the generated airfoil, \(p_{i}\) is the \(i\)-th physical parameter of the given condition. We denote \(\{p_{i}\}_{i=1}^{11}\) as {\(R_{lc}\),\(X_{up}\), \(Y_{up}\),\(Z_{xxup}\),\(X_{lo}\),\(Y_{lo}\),\(Z_{xxlo}\),\(Y_{te}\),\( Y_{te}\),\(_{te}\), \(_{te}\)}, respectively.
* To quantify the _diversity_ of the generated airfoils, we propose the following formula: \[=_{i=1}^{n} det(_{S_{i}}),\] (2) where \(n\) is the number of sample times, and the set of generated airfoils is denoted as \(=(f_{1},f_{2},...,f_{M})\). The \(i\)-th subset of the data, \(S_{i}\), is a subset of \(\) with a smaller size \(N\) (where \(N<M\)). The matrix \(_{S_{i}}\) is the similarity matrix, calculated based on the Euclidean distances between the airfoils in the subset \(S_{i}\), as proposed in . The \(det(_{S_{i}})\) represents the determinant of the similarity matrix \(_{S_{i}}\), and the \( det(_{S_{i}})\) is the natural logarithm of the determinant, which is used to prevent numerical underflow.
* To measure the geometric quality of the airfoils, we propose the _smoothness_ metric: \[=_{i=1}^{N}_{P_{n}|P_{n-1}P_{n+1}|},\] (3) where \(P_{n}\) is the \(n\)-th point, \(|P_{n-1}P_{n+1}|\) is the line connecting the adjacent points, and Distance calculates the perpendicular distance from point \(P_{n}\) to the line \(|P_{n-1}P_{n+1}|\). \(N\) represents the number of generated airfoils.
* To measure the aerodynamic quality of the model, we propose the _success rate_. We generate airfoils and evaluate whether they converge under M different work conditions. The success rate \(\) is calculated as: \[=_{i=1}^{N}(^{M}C_{j}}{M}> 60\%),j=1,...,M,\] (4) where \(C_{j}\) is a binary variable that takes the value of 0 or 1, indicating whether the \(j^{th}\) work condition results in non-convergence (0) or convergence (1), and \(N\) represents the number of generated airfoils. Here, \((x)\) is the indicator function, where \(()=1\) and \(()=0\).

## 5 Benchmarking Results

The baselines in Sec. 4.3 are trained with 500 epochs and a batch size of 512. In the following, we will present the results of our proposed method on controllable airfoil generation and controllable airfoil design, as well as the ablation study to validate the effectiveness of the dataset and methodology.

### Comprehensive Method Comparison

**Controllable Airfoil Generation.** We evaluated all our baselines and illustrate the experimental results in Tab. 1, from which we can make the following observations. First, our proposed AF-200K dataset is effective than previous datasets. As the dataset size increased from UIUC 1,600 to Supercritical Airfoil 21,500, and finally to AF-200K, the results indicate that Label Error decreased, Diversity Score increased (indicating generating more diverse airfoils), and Smoothness value decreased (indicating better geometric quality). These results demonstrate that as the size and diversity of the dataset increase, the model performance increases, which validates the effectiveness of our proposed methods. Second, PK-VAE and PK-GAN, PK-VAE exhibits lower Label Error and generates more consistent airfoil shapes, although with reduced diversity due to the strong constraints imposed by the reconstruction loss in VAE. PK-GAN, compared to cGAN, shows by using Bezier curves as intermediate representations, it generates smoother airfoil shapes. PK-VAE-GAN combines the stability of VAE and the diversity of GAN, positioning its performance in between. The Diffusion architecture is simpler and more stable in training compared to VAE and GAN. Comparing PK-DIFF, based on raw data and Unet architecture, with PK-DIT, based on latent space, PK-DIT generates more diverse and smoother airfoil shapes.

**Controllable Airfoil Editing.** For training the airfoil editing task, we randomly sample two airfoils as the source and target. The airfoil editing task is divided into two parts: editing the control points and editing the physical parameters. For editing the control keypoints, the model takes as input (source-physical, target-keypoint) and is expected to output an airfoil that satisfies (target-physical, target-keypoint). For editing the physical properties, the model takes as input (target-physical, source-keypoint) and is expected to output an airfoil that satisfies (target-physical, target-keypoint). The results for these two editing tasks are presented in Table 2. It can be observed that PK-VAE\({}^{2}\) outperforms PK-VAE across the board. Specifically, PK-VAE\({}^{2}\) achieves a lower label error in physical parameter editing and demonstrates a higher diversity score and better smoothness in keypoint editing.

### Ablation Study

**Pretrain and Finetune.** To verify whether the AF-200K dataset can help the model generate airfoils with better aerodynamic capabilities, we select about 20,000 airfoils with superior aerodynamic performance from the AF-200K dataset and then pre-train on the full AF-200K dataset and fine-tune

   &  &  \\   & & \(_{1}\) & \(_{2}\) & \(_{3}\) & \(_{4}\) & \(_{5}\) & \(_{6}\) & \(_{7}\) & \(_{8}\) & \(_{9}\) & \(_{10}\) & \(_{11}\) & \(\) & \(\) & \( 0.01\) \\  CVAE  & AF-200K & 7.29 & 5.25 & 3.52 & 1590 & 9.9 & 9.55 & 2900 & 1.91 & 1.53 & 4.6 & 10.4 & 413.1 & -155.4 & 7.09 \\ CGAN  & AF-200K & 10.7 & 8.50 & 5.44 & 2320 & 14.3 & 13.7 & 24.5 & 2.23 & 5.3 & 12.9 & 759.6 & -120.5 & 7.31 \\ PK-VAE & AF-200K & 6.30 & 4.79 & 3.13 & 862 & 6.6 & 6.41 & 1710 & 1.35 & 0.93 & 3.3 & 7.8 & 237.5 & -150.1 & 5.93 \\ PK-GAN & AF-200K & 8.18 & 6.30 & 4.70 & 2103 & 12.0 & 11.7 & 3247 & 2.25 & 1.96 & 5.0 & 12.7 & 492.3 & -112.3 & 3.98 \\ PKVAE-GAN & AF-200K & 5.68 & 3.17 & 3.10 & 565 & 4.6 & 4.35 & 1200 & 0.91 & 0.51 & 2.8 & 6.3 & 163.3 & -129.6 & 2.89 \\ PK-DIFF & AF-200K & 4.61 & 3.46 & 2.15 & 277 & 2.2 & 19.3 & 1030 & 0.70 & 0.11 & 2.4 & 3.1 & 120.6 & -101.3 & 1.52 \\ PK-DIT & UIUC & 6.38 & 5.14 & 3.36 & 1183 & 8.7 & 8.49 & 2570 & 1.69 & 1.19 & 3.6 & 9.8 & 345.6 & -141.7 & 6.03 \\ PK-DIT & Super & 5.20 & 3.50 & 2.40 & 301 & 2.9 & 3.32 & 1050 & 0.83 & 0.26 & 2.7 & 3.3 & 125.0 & -123.4 & 1.97 \\ PK-DIT & AF-200K & **1.12** & **3.23** & **1.54** & **105** & **1.3** & **1.15** & **979** & **0.05** & **0.05** & **2.3** & **2.4** & **99.7** & **-93.2** & **104** \\  

Table 1: Comparative Performance of our Baselines on Controllable Airfoil Generation Tasks across Different Datasets

   &  &  \\   & & \(_{1}\) & \(_{2}\) & \(_{3}\) & \(_{4}\) & \(_{5}\) & \(_{6}\) & \(_{7}\) & \(_{8}\) & \(_{9}\) & \(_{10}\) & \(_{11}\) & \(\) & \( 0.01\) \\  this subset. The experimental results illustrate that finetuning on airfoils with high aerodynamic performance can improve the model's success rate from 33.6% to 42.99% (Tab. 4).

**Different Generative Data.** To evaluate the impact of different generative data on the final model performance, we select 10,000 airfoils each from NACA-GEN, CST-GEN, BezierGAN-GEN, and Diffusion-GEN, and train the model on these datasets. The results are shown in Tab. 3. We find that, CST-GEN provided the model with the most diversity. BezierGAN-GEN granted the model the highest score of smoothness. Diffusion-GEN impart the model with the greatest control capability and the lowest label error.

## 6 Conclusion

We have proposed a large-scale and diverse airfoil dataset, AF-200K, which has been demonstrated to significantly improve the capabilities of data-driven models compared to previous datasets. Additionally, we have introduced a comprehensive benchmark that evaluates the performance of mainstream generative models on the task of airfoil inverse design. This benchmark provides researchers with a valuable tool to explore more powerful inverse design methods.

As the availability of data continues to expand and AI techniques advance, there is great potential to explore an even broader design space. AI-driven exploration can transcend the limitations of human experience and create innovative structures that are beyond human imagination. In complex design scenarios, AI may achieve superior outcomes compared to human experts. We believe that our methods can also offer valuable insights for 3D airfoil design.

Looking ahead, we aim to establish a more comprehensive benchmark for both 2D and 3D airfoil inverse design. The limitations of our current approach are discussed in Appendix F.

## 7 Acknowledgments

This work is partially supported by Shanghai Artificial Intelligence Laboratory. This work is partially supported by the Natural Science Foundation of China (No. U23A2069).