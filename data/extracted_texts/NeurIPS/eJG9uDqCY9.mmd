# Transcendence: Generative Models Can Outperform

The Experts That Train Them

Edwin Zhang

OpenAI

Harvard University

Humanity Unleashed

edwin@openai.com &Vincent Zhu

UC Santa Barbara

Humanity Unleashed

vincentzhu@ucsb.edu &Naomi Saphra

Harvard University

Kempner Institute

nsaphra@g.harvard.edu &Anat Kleiman

Harvard University

Apple

anatkleiman@g.harvard.edu &Benjamin L. Edelman

Princeton University

Harvard University

bedelman@g.harvard.edu &Milind Tambe

Harvard University

tambe@g.harvard.edu &Sham Kakade

Harvard University

Kempner Institute

sham@g.harvard.edu &Eran Malach

Harvard University

Kempner Institute

emalach@g.harvard.edu

###### Abstract

Generative models are trained with the simple objective of imitating the conditional probability distribution induced by the data they are trained on. Therefore, when trained on data generated by humans, we may not expect the artificial model to outperform the humans on their original objectives. In this work, we study the phenomenon of _transcendence_: when a generative model achieves capabilities that surpass the abilities of the experts generating its data. We demonstrate transcendence by training an autoregressive transformer to play chess from game transcripts, and show that the trained model can sometimes achieve better performance than all players in the dataset.1 We theoretically prove that transcendence can be enabled by low-temperature sampling, and rigorously assess this claim experimentally. Finally, we discuss other sources of transcendence, laying the groundwork for future investigation of this phenomenon in a broader setting.

## 1 Introduction

Generative models (GMs) are typically trained to mimic human behavior. These humans may be skilled in their various human objectives: answering a question, creating art, singing a song. The model has only one objective: minimizing the cross-entropy loss with respect to the output distribution, thereby adjusting it to match the distribution of human labels2. Therefore, one might assume the model can, at best, match the performance of an expert on their human objectives. Is it possible for these models to surpass--to _transcend_--their expert sources in some domains?

We illustrate an example of such _transcendence_ in Figure 1, which measures the chess ratings (Glicko-2 ) of several transformer  models. Our experimental testbed is generative modeling on chess, which we choose as a domain for its well-understood, constrained nature. The transformer models are trained on public datasets of human chess transcripts, autoregressively predicting the next move in the game. To test for _transcendence_, we limit the maximal rating of the human players in the dataset below a specified score. We find that ChessFormer \(1000\) and ChessFormer \(1300\) (the latter number being the maximum rating seen during training) achieve significant levels of transcendence, surpassing the maximal rating seen in the dataset. Our focus is this capacity of a GM to transcend its expert sources by broadly outperforming any one expert. The key to our findings is the observation that GMs implicitly perform _majority voting_ over the human experts. As these models are trained on a collection of many experts with diverse capacities, predilections, and biases, this majority vote oftentimes outperforms any individual expert, a phenomena that is known as "wisdom of the crowd".

Our objective is to formalize the notion of transcendence and focus narrowly on this source of improvement over the experts: the removal of diverse human biases and errors. We prove that this form of denoising is enabled by low-temperature sampling, which implicitly induces a majority vote. Our result draws a subtle but deep connection from our new setting to a rich prior literature on model ensembling [1; 6; 19], enabling several key results. We precisely characterize the conditions under which _transcendence_ is possible, and give a rigorous theoretical framework for enabling future study into the phenomenon. To test the predictive power of our theory, we then empirically demonstrate these effects. Digging deeper into the effects of majority voting, we show that its advantage is primarily due to performing much better on a small subset of states--that is, under conditions that are likely key to determining the outcome of the game. We also find that diversity in the data is a necessary condition for practically effective majority voting, confirming our theoretical findings. In short:

* We formalize the notion of transcendence in generative models (Section 2).
* We find a key insight explaining one cause of transcendence by connecting the case of denoising experts to model ensembling. In low temperature sampling settings, we prove that a generative model can transcend if trained on a single expert that makes mistakes uniformly at random. We then extend this result to transcending a collection of experts that are each skilled in different domains (Section 3).
* We train a chess transformer on game transcripts that only include players up to a particular skill level. We confirm our theoretical prediction that this model only surpasses the maximum rating of its expert data generators at low temperature settings (Section 4).
* We visualize the distribution of changes in reward by setting a lower sampling temperature, attributing the increased performance to large improvements on a relatively small portion of states (Section 4.2).
* We explore the necessity of dataset diversity, and the inability of ChessFormer to transcend when trained on less diverse datasets (Section 4.2).

Figure 1: Ratings of our autoregressive decoder-only transformer, ChessFormer, over several different temperatures. We refer to our models as “ChessFormer ¡Maximum Glicko-2 rating seen during training¿” to easily distinguish between different models in subsequent sections. Each model is trained only on games with players up to a certain rating (\(1000\), \(1300\), \(1500\), respectively). We report 95% confidence intervals calculated through taking \( 1.96\).

Definition of Transcendence

Denote by \(\) the (variable-length) input space and by \(\) the (finite) output space. Let \(\) be the class of all functions mapping \( P()\) (where we use the notation \(P()\) to denote probability distributions over \(\)). That is, the functions in \(\) map inputs in \(\) to probability distributions over \(\), so each function \(f\) defines a conditional probability distribution of \(y\) given \(x\). We denote this distribution by \(f(y|x)\).

Fix some input distribution \(p\) over \(\) such that \(p\) has full support (namely, for every \(x\) we have \(p(x)>0\)). Throughout the paper, we assume that our data is labeled by \(k\) experts, denoted \(f_{1}\),...,\(f_{k}\). Namely, we assume that the inputs are sampled from the input distribution \(p\) and then each input \(x\) is labeled by some expert chosen uniformly at random3. This process induces a joint probability distribution over \(\), which we denote by \(\). Specifically, \((x,y)=p(x)(y|x)\) where \(\) is the mixture of the expert distributions, namely

\[(y|x)=_{i=1}^{k}f_{i}(y|x)\] (1)

We measure the quality of some prediction function \(f\) using a reward assigned to each input-output pair. Namely, we define a reward function \(r:\), s.t. for all \(x\), the function \(r(x,)\) is not constant (i.e., for every input \(x\) not all outputs have the same reward). We choose some test distribution \(p_{}\) over \(\), and for some \(f\) define the average reward of \(f\) over \(p_{}\) by:

\[R_{p_{}}(f)=_{x p_{}}[r_{x}(f)],\ \ \ \ r_{x}(f)=_{y f(|x)}[r(x,y)]\] (2)

A learner has access to the distribution \(\), and needs to find a function that minimizes the cross-entropy loss over \(\). Namely, the learner chooses some function \(\) s.t. \(=*{argmin}_{f}_{x p}H (,f)\) where \(H\) is the cross-entropy function.

**Definition 1**.: _We define "transcendence" to be a setting of \(f_{1}\),...,\(f_{k}\) and \(p P()\) where:_

\[R_{p_{}}()>_{i[k]}R_{p_{}}(f_{i})\] (3)

In other words, transcendence describes cases where the learned predictor performs better (achieves better reward) than the best expert generating the data. Note that we are focusing on an idealized setting, where the learner has access to infinite amount of data from the distribution \(\), and can arbitrarily choose any function to fit the distribution (not limited to a particular choice of architecture or optimization constraints). As we will show, even in this idealized setting, transcendence can be impossible to achieve without further modifying the distribution.

**Remark 1**.: _We have made various simplifying assumptions when introducing our setting. For example, we assume that all experts share the same input distribution, we assume that all inputs have non-zero probability under the training distribution \(p\), and we assume the experts are sampled uniformly at random. We leave a complete analysis of a more general setting to future work, and discuss this point further in section 6._

## 3 Conditions for Transcendence

In this section we analyze the necessary and sufficient conditions for transcendence in our setting. We begin by showing that low-temperature sampling is _necessary_ for transcendence in our specific setting. Then, we analyze specific sufficient conditions for transcendence, both in the case where the data is generated by a single expert and when the data is generated by multiple experts. We defer all proofs to Appendix A.

### Low-Temperature Sampling is Necessary for Transcendence

Observe that by definition of \(\), and using standard properties of the cross-entropy loss, we get that \(=\), as defined in Eq. (1). Therefore, the conditional probability distribution generated by \(\) is simply an average of the distributions generated by the expert. Since the reward is a linear function of these distributions, we get that \(\) never achieves transcendence:

**Proposition 1**.: _For all choice of \(f_{1},\)...\(,f_{k}\) and \(p_{}\), there exists some \(f_{i}\) s.t. \(R_{p_{}}(f_{i})\!\!R_{p_{}}()\)._

Note that in our setting, we assume that all experts are sampled uniformly for a given input \(x\). If instead this assumption is removed, then it may be possible to achieve transcendence with a bayesian weighting. We leave this analysis for future work.

### Transcendence with Low-Temperature Sampling

Now, we consider a temperature sampling scheme over the learned function \(\). Namely, for some temperature \(>0\), and some probability distribution \(q P()\), denote the softmax operator with temperature \(\) by \((q;) P()\) s.t. \((q;)_{y}=/)}{_{y^{} }(q_{y^{}}/)}\). Additionally, we define \((q) P()\) to be the uniform distribution over the maximal values of \(q\), namely \((q)\!=\!1/|Y_{q}|\) if \(y\!\!Y_{q}\) and 0 if \(y\!\!Y_{q}\), where \(Y_{q}\!=\!\{y\!\!\!:\!q_{y}\!=\!(q)\}\). Now, define \(_{}\) to be the temperature sampling of \(\), i.e. \(_{}(|x)\!=\!((|x);)\) and \(_{}\) the arg-max "sampling" of \(\), i.e. \(_{}(|x)\!=\!((|x))\). We now show that if the arg-max predictor \(_{}\) is better than the best expert, then transcendence is possible with low-temperature sampling.

**Proposition 2**.: \(R_{p_{}}(_{})>_{i[k]}R_{p_{}}(f_{i})\) _if and only if there exists some temperature \(\!\!(0,\!1)\) s.t. for all \(0\!\!^{}\!\!\), it holds that \(R_{p_{}}(_{^{}})\!>\!_{i[k]}R_{p_{}}(f_{i})\)._

The above shows that, even though transcendence cannot be achieved when directly modeling the distribution, it can be achieved by temperature sampling, assuming that the arg-max predictor achieves higher reward compared to all experts. In other words, we make the subtle connection here that low-temperature sampling can be thought of as performing _majority vote_[1; 6] between the experts. Please see Appendix A for a formal proof of this connection. When the experts put non-negligible mass onto the best actions, the resulting majority vote may find the best action , which improves performance compared to individual experts (i.e., "wisdom of the crowd") and thus achieve transcendence.

### Denoising a Single Expert

We now turn to study particular cases where low-temperature sampling can lead to transcendence. The most simple case is of a single expert that outputs a correct but noisy prediction. Denote by \(f^{*}\) the optimal expert, s.t. for all \(x\) we have \(f^{*}(y|x)\!=\!^{*})}{|Y_{x}^{*}|}\), where \(Y_{x}^{*}\!=\!\{y\!\!\!:\!y\!=\!_{y^{}}r(x,y^{})\}\)

Figure 2: Visualizing the denoising effects of low temperature on the action distribution: an example of Chess-Former shifting probability mass towards the high reward move of trapping the queen with the rook as the temperature \(\) decreases. Opacity of the red arrows represent the probability mass given to different moves. The color of the square represent the reward that would be given for taking the action that moves the given piece to that state. Purple here is high reward, while blue is low. For more visualizations, see Appendix B.

and \(()\) is 1 if the condition is true and 0 otherwise. Now, for some \((0,1)\), let \(f_{}\) be a "noisy" expert, s.t., for all \(x\), with probability \(\) chooses a random output, and with probability \(1-\) chooses an output according to the optimal expert \(f^{*}(|x)\), namely \(f_{}(y|x)=/||+(1-)f^{*}(y|x)\). We show that transcendence is achieved with low-temperature sampling for data generated by \(f_{}\):

**Proposition 3**.: _Assume the data is generated by a single expert \(f_{}\). Then, there exists some temperature \((0,1)\) s.t. for all \(^{}\), the predictor \(_{^{}}\) achieves "transcendence"._

### Transcendence from Multiple Experts

Next, we consider the case where the dataset is generated by multiple experts that complement each other in terms of their ability to correctly predict the best output. For example, consider the case where the input space is partitioned into \(k\) disjoint subsets, \(=_{1}_{k}\), s.t. the \(i\)-th expert performs well on the subset \(_{i}\), but behaves randomly on other subsets. Namely, assume the expert \(f_{i}\) behaves as follows: \(f_{i}(y|x)=(^{*})(x_{i})}{ |Y_{}|}+_{i})}{||})\) where \(Y_{x}^{*}\) is as previously defined and \(()\) is 1 if the condition is true and 0 otherwise. We show that, assuming that the test distribution \(p_{}\) is not concentrated on a single subset \(_{i}\), we achieve transcendence with low-temperature sampling:

**Proposition 4**.: _Let \(p_{}\) be some distribution s.t. there are at least two subsets \(_{i}_{j}\) s.t. \(p_{}(_{i})\),\(p_{}(_{j})>0\). Then, if the data is generated by \(f_{1},...,f_{k}\), there exists some temperature \((0,1)\) s.t. for all \(^{}\), the predictor \(_{^{}}\) achieves "transcendence"._

In order to build intuition for Proposition 4, see Appendix C for an intuitive diagram.

## 4 Experiments

To evaluate the predictive power of our impossibility result of transcendence with no temperature sampling (Proposition 1) as well as our result of transcendence from multiple experts with low temperature sampling (Proposition 2), we turn to modeling and training chess players. Chess stands out as an attractive option for several reasons. Chess is a well-understood domain and more constrained than other settings such as natural language generation, lending to easier and stronger analysis. Evaluation of skill in chess is also natural and well-studied, with several rigorous statistical rating systems available. In this paper, we use the Glicko-2 rating system , which is also adopted by https://lichess.org, the free and open-source online chess server from which we source our dataset.

### Experimental Setup

Training Details.We trained several \(50\)M parameter autoregressive transformer decoders following best practices from modern large model training, including a cosine learning rate schedule and similar batch size-learning rate ratios as prescribed by the OPT-175B team . Our dataset consists of human chess games from the lichess.org open source database from January 2023 to October 2023. In total, this dataset contains approximately one billion games. In this setting, an expert is a specific individual player. To test for transcendence, we truncate this dataset by a maximum rating, so that during training a model only sees data up to a given rating. We train our model on the next-token prediction objective, and represent our chess games as Portable Game Notation (PGN) strings, such as 1.e4 e5 2.Nf3 Nc6 3.Bb5... 1/2-1/2. Note that we do not give any rating or reward information during training--the only input the model sees are the moves and the outcome of the game. We tokenize our dataset at the \(32\)-symbol character level. (For further details, see Appendix E.) Our model plays chess "blind"--without direct access to the board state--and, furthermore, is never explicitly given the rules of the game: at no point is play constrained to valid outputs for a given piece or board state. Nontrivial chess skill is therefore not straightforward to acquire, and if not for the surprising capabilities of modern large transformers, one might imagine such a model would fail to learn even the basic rules of playing chess. This blindfolded setting has also been studied by prior work [23; 30], as discussed further in section 5.

One gap between our theory and practice is that in our theory, we assume that each expert is defined over the entire input space \(\). However, in the chess setting such full coverage is extremely unlikely to be the case after around move \(15\), as there are more unique chess games than atoms in the universe due to the high branching factor of the game tree. To address this gap, we visualize the latent representation of our model in Figure 3, where we find the model is able to capture meaningful semantics regarding both the relative advantage of a state, as well as the identity of the black and white player. This visualization illustrates the ability of our model to generalize by compressing games into some shared latent representation, enabling experts to generalize to unseen states, bridging this gap between theory and practice.

Evaluation.We evaluate each model by its Glicko-2 ratings against Stockfish 16.1 , a popular open-source chess engine. Stockfish uses a traditional minimax search equipped with a bespoke CPU-efficient neural network for evaluation  and \(\)-\(\) pruning for further efficiency. We evaluate Stockfish at levels 1, 3, and 5 with a 100ms timeout directly on Lichess' platform against the Maia  1, 5, and 9 bots (human behavior cloned convolutional networks trained at rating bins 1100-1200, 1500-1600, and 1900-2000, respectively) for several hundred games, obtaining calibrated Glicko-2 ratings for Stockfish specifically on Lichess' platform (\(1552 45.2\), \(1842 45.2\), \(2142 59\) for Stockfish Levels 1, 3, and 5, respectively). Next, for evaluating our own models, we then play against Stockfish levels of 1, 3, and 5 for 100 games each, reaching a final rating calculation with 300 games. We then report both the Glicko-2 rating \(R\) as well as rating deviation \(RD\) of our models, where \(R 2*RD\) provides a \(95\%\) confidence interval. To play against Stockfish, we successively prompt our model with the current game PGN string. Note that our output is entirely unconstrained, and may be either illegal in the current board state or altogether unparsable. If our model fails to generate a valid legal move after 5 samples, we consider it to have lost. After generation, we give the updated board state to Stockfish and pass a new PGN string appended with the prior move of Stockfish back to our model. We repeat this process until the game ends.

### Experimental Results

Main Result: Low-temperature sampling enables transcendence.In this section we attempt to answer our primary research question, can low-temperature sampling actually induce _transcendence_ in practice? We test Proposition 2 by evaluating several ChessFormers across different temperature values, from \(0.001\) (nearly deterministic), to \(1.0\) (original distribution), to \(1.5\) (high entropy). In Figure 1 we definitively confirm the existence of transcendence. Our ChessFormer 1000 (where the latter number refers to the maximum rating seen during training) and ChessFormer 1300 models are able to transcend to around 1500 rating at temperature \(\) equal to \(0.001\). Interestingly, ChessFormer 1500 is unable to transcend at test time, a result we further analyze in Dataset Diversity.

To more deeply understand when and why transcendence occurs, we investigate two questions. (1) How does the reward function defined in Equation 2 shift with respect to low-temperature sampling? (2) Does transcendence rely on dataset diversity, as introduced theoretically in subsection 3.4?

Lowering temperature increases rewards in expectation on specific states, leading to transcendence over the full game.When playing chess, a low-skilled player may play reasonably well

Figure 3: Inspired by Mnih et al. , we generate a t-SNE embedding  of ChessFormer’s last hidden layer latent representations of game transcripts during training time. The colors represent the probability of winning, with \(+1\) corresponding to a state where White has won and \(0\) to Black. Probabiliy of winning is computed through the Stockfish analysis engine. We also visualize several board states associated with different clusters in the t-SNE embedding, and their associated expected reward when following the expert Stockfish distribution. Note that the model distinguishes between states where the outcome has already been determined (the two left boards), versus opening states that are extremely similar (the two right boards). See the full t-SNE in Appendix G.

until they make a significant blunder at a key point in play. If these errors are idiosyncratic, averaging across many experts would have a denoising effect, leaving the best moves with higher probability. Therefore, low-temperature sampling would move probability mass towards better moves in specific play contexts. Without low-temperature sampling, the model would still put probability mass onto blunders. To gain intuition for this idea, we visualize it theoretically in Appendix C and empirically in Figure 2 and Appendix B. This hypothesis motivates our first research question in this section: Does low-temperature sampling improve the expected reward very much for just some specific key game states, or a little for many game states?

To formalize this notion, we first define a "favor" function, which captures the improvement in reward by following some new probability distribution over some baseline probability distribution. Our definition is inspired by the Performance Difference Lemma (PDL)  from Reinforcement Learning (RL), which establishes an equivalence between the change in performance from following some new policy (a probability distribution of actions given a state) over some old policy, and the expected value of the advantage function of the old policy sampled with respect to the new policy. In RL, the advantage function is defined as the difference between the value of taking a single action in a given state versus the expected value of following some policy distribution of actions in that state.

Here, we define the "favor" of \(f^{}\) over \(f\) in \(x\) as the change in the reward function by comparing what \(f\) would have done when following \(f^{}\) for a given input \(x\):

\[F(f^{},f;x)\!=\!_{x df^{},y f^{}(|x) }[r(x,y)]\!-\!_{x df^{},y f(|x)}[r(x,y)].\] (4)

Where \(d^{f}\) refers to the state visitation distribution  when following \(f\) in a sequential setting--informally, this variable can be thought of the distribution of states seen when sampling from \(f\) with a fixed transition function that takes in an input \(x\), a output \(y\), and outputs a next input \(x\). Here, that transition function is given by the rules of chess and the opponent player. Given this favor function, we can now quantitatively explore the effects that lead to transcendence by setting the baseline \(f\) to be the original imitation-learned probability distribution (temperature \(\!=\!1\)), and \(f^{}\) as a low-temperature intervention on \(f\) (e.g. temperature \(\!=\!0\)). We can empirically calculate the reward by using the evaluation function  of Stockfish, an expert neural reward function that Stockfish uses to calculate its next move. This reward function is a neural network trained to predict the probability of winning through a sigmoid on a linear combination of handcrafted expert heuristics, such as amount of material versus opponent material, and number of moves to a potential checkmate.

In Figure 4, we find that lowering the temperature has the effect of skewing the expected reward distribution to the right, especially for the green \(\!=\!0.001\) distribution. This result implies that the model does not improve the expected reward by a small amount for many game states, but rather improves the expected reward by a relatively large amount for a few game states. Thus, \(\!=\!0.001\) improves the expected reward (probability of winning) by an average of \(\%\), but for some states, this expected improvement is over 5%. Note that the original temperature expected reward can

Figure 4: The favor probability distribution, or change in expected reward by setting temperature lower than \(\!=\!1.0\). We plot the favor distribution across two different temperatures: setting \(\!=\!.75\) and \(\!=\!0.001\) by running the Stockfish analysis engine across \(100\) total Chessformer \(1000\) games played at \(0.001\) temperature against Stockfish level \(1\) (as theoretically justified by PDL ). We calculate favor by sampling \(100\) counterfactual potential moves at \(\!=\!1.0\) per actual move made at \(\!=\!0.001\) to compute a baseline expected reward. In total, we gather an empirical probability distribution with \(n\!=\!382,\!000\) total samples per \(\) (\(38.2\) moves on average per game). Note that we plot the distributions with transparency, so the brownish area is where the two overlap. We visualize several long-tail examples in Appendix B.

be thought of as a Dirac distribution centered at \(0\). The above finding answers our research question in this section: Low-temperature sampling is able improves the expected reward by relatively large amounts for some specific game states, which is likely why the ChessFormer \(1000\) and \(1300\) model was able to achieve transcendence.

In Table 1, we present the statistics of the favor function for different temperature values. From this table, we observe that as the temperature decreases, the top-\(k\) accuracies monotonically increase, suggesting that the model becomes more consistent in selecting good moves. We also observe that although the model improves as temperature decreases, the probability of winning is still below \(50\%\), meaning our model should tend to lose more games than it wins against Stockfish \(1\). This result matches with our results in Figure 1, as the rating of Stockfish \(1\) is also higher than the reported rating for \(=0.001\) (\(1550\) for Stockfish \(1\) vs \( 1450\) for Chessformer \(1000\)). Overall, the analysis of the advantage statistics provides further evidence for the effectiveness of low-temperature sampling in inducing transcendence in chess models.

Dataset diversity is essential for transcendence.As we note in subsection 3.4, our theory requires dataset diversity as a necessary condition for enabling transcendence. Importantly, we find in Figure 1 that not all models are able to transcend. Unlike ChessFormer 1000 or 1300, the Chessformer 1500 fails to transcend. We hypothesize that this results is due to the fact that in the band of ratings from \(1000\) to \(1500\), diversity does not significantly increase. If so, a \(1000\) rated player can be thought of as a noisy \(1500\) rated player, but a \(1500\) rated player cannot be thought of as a noisy \(2000\) rated player. In this section we ask the following research question: Is diversity in data required for enabling transcendence?

In Figure 5, we explore this research question by quantifying dataset diversity through the normalized entropy on the action distribution \(_{f}(Y|X)=_{y f(y|x=X)}[-_{2}f(y|x=X)]/_{2} \). To gain intuition for this metric, imagine the action distribution of moves taken for any given state. Entropy will be higher for more uniform action distributions, and lower for more deterministic, peaked action distributions. The average entropy of these action distributions can therefore serve as a measurement of the diversity of the dataset. We normalize this entropy to the range \(\) by dividing by the binary log of the number of legal moves: \(_{2}\).

Importantly, we cannot calculate this normalized entropy for every state, as most states after move \(16\) in the midgame and before the engame are unique within the dataset and we therefore observe just a single action for thus states. Therefore our metric is limited in that it only considers opening moves, the beginning of the midgame, and the endgame. We consider only common states with greater than \(100\) actions by sampling \(1,000,000\) games from each dataset. The average entropy confirm our hypothesis: The \(<1500\) cut off dataset has on average less diversity than the \(<1300\) dataset, which has is again less than the \(<1000\) dataset. This result suggests that Chessformer \(1500\) likely is not transcendent due to a lack of diversity in its dataset. If the entropy instead stayed constant for each dataset, it would imply that each had a similar level of diversity. In such a case, we would expect that ChessFormer \(1500\) likely would also transcend. Instead, as predicted, it is likely not transcendent due to a lack of diversity.

   Temperature & \([_{}(\%)]\) & \([_{}-_{1,0}]\) & Top 1 \(Acc\) (\%) & Top 3 \(Acc\) (\%) & Top 5 \(Acc\) (\%) \\  \(=0.001\) & \(\) & \(\) & \(\) & \(\) & \(\) \\ \(=0.75\) & \(38.79 0.90\) & \(0.99 0.06\) & \(25.08 0.95\) & \(47.84 1.09\) & \(60.37 1.04\) \\ \(=1.0\) & \(37.80 0.87\) & \(0 0\) & \(22.61 0.86\) & \(44.00 9.96\) & \(56.27 0.93\) \\   

Table 1: Table of several statistics describing the relationship between reward at \(=0\) vs. \(=1\). In the first column, we display the expected reward across our dataset, which is \(\) of winning calculated by Stockfish 16.1). In the second column, we display \(F\), or the change in reward for the given temperature \(\) versus the baseline. In the last three columns we display the accuracy for the best moves ranked by Stockfish analysis run at a time cutoff of \(1\) second. Here, the top-\(k\) accuracy is the percentage of games where the actual move sampled by the model was in the top-\(k\) moves as ranked by Stockfish. We report 95% bootstraped confidence intervals with 10K resamples.

Figure 5: Action distribution diversity, as measured by the average normalized entropy over different chess rating dataset cutoffs with \(n=2681,3037,3169\) common states for ratings \(1000,1300,1500\), respectively. These entropies are calculated directly from the empirical frequencies of our dataset, and are model-agnostic.

### Additional Settings

**SQuADv2 Natural Language Temperature Denoising Experiment.** We extend our analysis to the Natural Language Processing domain by running experiments on the Stanford Question Answering Dataset (SQuAD 2.0). We tested the effects of temperature denoising on the performance of several large language models (LLMs) of varying sizes. The SQuAD task involves reading comprehension and question-answering based on Wikipedia articles, making it an ideal setting to evaluate the impact of denoising on language models. We measured the exact-match, semantic-match, and F1 scores of the model outputs at different temperatures. The results show that temperature denoising leads to improved performance, corroborating the findings of our chess experiments and providing broader validation of the underlying mechanism of temperature denoising in diverse domains.

**Toy Model Setting and Results.** In addition, we develop a toy theoretical model to further study when transcendence is possible. This model involves a classification task with Gaussian input data and linearly separable classes. Experts label the data with noisy versions of the ground truth separator. We trained a linear model on a dataset labeled by random experts and observed the test accuracy for different temperature settings. The synthetic experiments demonstrated that transcendence occurs when expert diversity is high and temperature is low, aligning with our theoretical and empirical analysis in the chess domain.

Figure 6: We evaluate several pretrained language models on the SQuADv2 Question-Answering reading comprehension dataset, a task consisting of answering a question given some snippet from a Wikipedia article. We report F1, ‘Exact Match’, and ‘Semantic Match’ scores of several different language models of varying size from 163M parameters to 7B parameters, over several different temperatures. Semantic Match is calculated by using another LLM (llama3.1) to judge if two responses are equivalent, even if the exact strings slightly differ between the model output and the correct response. We also report 95% confidence intervals calculated through taking \( 1.96\).

Figure 7: Toy model for demonstrating transcendence. Input data is \(d\)-dimensional Gaussian, with \(d\!=\!100\). Output is classification with \(10\) classes. Ground-truth is generated by a linear function, i.e. \(y\!=\!*{argmax}_{i}W^{*}_{i}x\) for some \(W^{*}^{10 d}\). We sample \(k\) experts, with \(k\!=\!5\), to label the data, where the labels of each expert are generated by some \(W\!\!^{10 d}\) s.t. \(W\!=\!W^{*}\!+\!\), where \(_{i,j}(0,^{2})\), for some standard deviation \(\). Namely, each expert labels the data with a noisy version of the ground truth separator, with noise std \(\). We then train a linear model on a dataset with \(10\,K\) examples, where each example is labeled by a random expert. We plot the test accuracy, measured by the probability assigned to the correct class, for different choices of temperature, and compare to the best expert.

Related Work

**Chess and AI.** **Chess has been motivating AI research since the field began. In 1950, before anyone had used the term "artificial intelligence", automated chess were explored by both Claude Shannon  and Alan Turing . Arguably, this history goes back even further: the famed "mechanical turk" of the 18th century was a fraudulently automated chess player. These centuries of mechanical ambitions were finally realized in 1997, when world champion Garry Kasparov was defeated by IBM's Deep Blue . Since then, chess program developers have drawn on neural approaches, with the RL-based convolutional network AlphaZero  far surpassing prior world champion engines such as Stockfish .Our chess model testbed is inspired by a number of existing approaches, including other models trained on lichess data , and other transformer-based sequential chess agents .**

**Diversity beats Strength.** **Another historical thread in AI research is the strength of diverse learners. Long since the development of ensemble methods that exploit learner diversity--including bagging , boosting , and model averaging --researchers have continued to articulate this insight across settings. Similar to our chess setting, a diverse team of go playing agents have been proven and empirically shown to outperform solitary agents  and homogeneous teams , even when the alternative models individually outperform the diverse team members . We draw a connection to this deep literature through our theory, which shows that imitation learning objective and then performing low-temperature sampling subtly implies the same principle of majority voting. Teacher diversity has also been explored in the machine learning literature. One related method is ensemble distillation , in which a model is trained with an additional objective to match a variety of weaker teacher models. Closer to our setting, ensemble self-training approaches  train a learner directly on the labels produced by varied teachers. Large language models supervised by smaller or less trained models are said to exhibit "weak to strong generalization" . Overall, evidence continues to accrue that the general phenomenon we address is pervasive: that is, models can substantially improve over the experts that generate their training data.**

**Offline Reinforcement Learning.** **Our work also draws connections to the Offline Reinforcement Learning  setting, where one attempts to learn a new policy** \(\) **that improves upon a fixed dataset generated by some behavior policy** \(_{}\)**. However, our setting of imitation learning differs substantially from this literature, as we do not explicitly train our model on a RL objective that attempts to improve upon the dataset. Importantly, such an objective oftentimes introduces training instabilities  and also assumes reward labels. We defer a more extended discussion of related work to Appendix D.**

## 6Discussion and Future Work

**This paper introduces the concept of transcendence. Our theoretical analysis shows that low-temperature sampling is key to achieving transcendence by denoising expert biases and consolidating diverse knowledge. We validate our findings empirically by training several chess models which, under low-temperature sampling, surpass the performance of the players who produced their training data, as well as further experiments in natural language question-answering and toy Gaussian models. We additionally highlight the necessity of dataset diversity for transcendence, emphasizing the role of varied expert perspectives.**

**Limitations.** **While our work provides a strong foundation for understanding and achieving transcendence in generative models, several avenues for future research remain. Future work may investigate transcendence and its causes in domains and contexts beyond chess, such as natural language processing, computer vision, and text-to-video, to understand the generalizability of our findings. Additionally, our theoretical framework assumes that game conditions at test time match those seen during training; in order to extend our findings to cases of composition or reasoning, we must forego this assumption.**

**Future Work.** **Future work could also explore the practical implementations of transcendence, and ethical considerations in the broader context of deployed generative models. Ultimately, our findings lay the groundwork for leveraging generative models to not only match but exceed human expertise across diverse applications, pushing the theoretical boundaries of what generative models can achieve.**

**Broader Impact.** **The possibility of "superintelligent" AGI has recently fueled many speculative hopes and fears. It is therefore possible that our work will be cited by concerned communities as evidence of a threat, but we would highlight that the denoising effect addressed in this paper does not offer any evidence for a model being able to produce novel solutions that a human expert would be incapable of devising. In particular, we do not present evidence that low temperature sampling leads to novel abstract reasoning, but just denoising of errors.**