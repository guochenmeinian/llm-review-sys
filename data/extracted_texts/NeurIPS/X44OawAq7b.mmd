# Provable Acceleration of Nesterov's Accelerated Gradient for Rectangular Matrix Factorization and Linear Neural Networks

Provable Acceleration of Nesterov's Accelerated Gradient for Rectangular Matrix Factorization and Linear Neural Networks

 Zhenghao Xu

Georgia Institute of Technology

zhenghaoxu@gatech.edu

&Yuqing Wang

University of California, Berkeley

yq.wang@berkeley.edu

&Tuo Zhao

Georgia Institute of Technology

tourzhao@gatech.edu

&Rachel Ward

University of Texas at Austin

rward@math.utexas.edu

&Molei Tao

Georgia Institute of Technology

mtao@gatech.edu

###### Abstract

We study the convergence rate of first-order methods for rectangular matrix factorization, which is a canonical nonconvex optimization problem. Specifically, given a rank-\(r\) matrix \(^{m n}\), we prove that gradient descent (GD) can find a pair of \(\)-optimal solutions \(_{T}^{m d}\) and \(_{T}^{n d}\), where \(d r\), satisfying \(\|_{T}_{T}^{}-\|_{}\| \|_{}\) in \(T=O(^{2})\) iterations with high probability, where \(\) denotes the condition number of \(\). Furthermore, we prove that Nesterov's accelerated gradient (NAG) attains an iteration complexity of \(O()\), which is the best-known bound of first-order methods for rectangular matrix factorization. Different from small balanced random initialization in the existing literature, we adopt an unbalanced initialization, where \(_{0}\) is large and \(_{0}\) is \(0\). Moreover, our initialization and analysis can be further extended to linear neural networks, where we prove that NAG can also attain an accelerated linear convergence rate. In particular, we only require the width of the network to be greater than or equal to the rank of the output label matrix. In contrast, previous results achieving the same rate require excessive widths that additionally depend on the condition number and the rank of the input data matrix.

## 1 Introduction

Nonconvex optimization is pervasive in the training of modern machine learning models. Despite the success of first-order methods in practice, theoretical understanding of their convergence properties is limited even for simple nonconvex problems. Take the rectangular low-rank matrix factorization problem as an example, which is a canonical nonconvex problem:

\[_{^{m d},^{n d }}\;f(,)=\|-^{}\|_{}^{2},\] (1)

where we solve for two small matrices \(^{m d}\) and \(^{n d}\) to approximate a big rank-\(r\) target matrix \(^{m n}\) with \(r(m,n)\) and \(m,n\) not necessarily equal. Specifically, we consider the over-parameterized regime where \(d r\), so that the global minimum of (1) is zero. While various direct methods exist for solving (1), we focus on understanding the global convergence behaviors of first-order methods applied to such a nonconvex problem, with the motivation of gathering insight into the training dynamics of neural networks.

Most existing results study the simplest first-order method, gradient descent (GD), under different initialization schemes. Note that the initialization scheme matters to convergence analysis1, due to the fact that (1) is a nonconvex and nonsmooth2 optimization problem. Thus, proper initialization is important for the fast convergence rates of first-order methods. Ye and Du (2021) show that with small Gaussian random initialization, GD can find \(_{T}\) and \(_{T}\) such that \(f(_{T},_{T})\) in \(T=O(d^{4}(m+n)^{2}^{4})\) iterations with high probability, where \(\) denotes the condition number. Jiang et al. (2023) improve this result to \(O(^{3})\) which has no explicit dimensional dependence on \(m\) and \(n\). These analyses rely on balanced initialization where entries of \(_{0}\) and \(_{0}\) have the same variance so that the iterates are guaranteed to stay in a smooth region.

Moreover, we remark that to the best of our knowledge, we are not aware of any existing theoretical results on rectangular matrix factorization analyzing the global convergence rate of more advanced first-order methods such as Nesterov's accelerated gradient (NAG), which has been proved to achieve faster rates for smooth convex optimization problems (Nesterov, 2013).

Recently, Ward and Kolda (2023) showed that by using an unbalanced random initialization where \(_{0}\) is larger than \(_{0}\), alternating gradient descent (AltGD) that alternatingly optimizes \(_{t}\) and \(_{t}\) via gradient steps can achieve \(O(d^{2}(d-r+1)^{-2}^{2})\) iteration complexity. However, their analysis is specifically designed for AltGD and not applicable to GD, let alone more advanced methods such as NAG which are nevertheless widely used in machine learning practice. Two questions naturally arise here:

Q1: _Can GD achieve the same convergence rate as AltGD for (1)?_

Q2: _Can more advanced first-order methods (e.g., NAG) achieve faster convergence rate for (1)?_

\(\)**Main Results**. We answer the two questions above affirmatively by developing a new theory on first-order methods for (1). Specifically, we consider an unbalanced initialization scheme \(_{0}=c\) and \(_{0}=0\), where \(c>0\) is a large constant and \(\) is a Gaussian random matrix. Note that our initialization of \(_{0}\) is the same as that in Ward and Kolda (2023), but they initialized \(_{0}\) using a small Gaussian random matrix. This modification is mainly for simpler analysis and makes little difference in practice. Under our new initialization scheme, we first prove an \(O(d^{2}(d-r+1)^{-2}^{2})\) iteration complexity for GD (Theorem 1), matching that of AltGD in Ward and Kolda (2023). Our analysis is based on a new theoretical framework different from Ward and Kolda (2023) and can be further extended to analyzing NAG. We then show that NAG can attain a provable acceleration with an \(O(d(d-r+1)^{-1})\) iteration complexity (Theorem 2). We discuss the tightness of our results (Remark 2) and conduct numerical experiments for validation (Section 5). Empirically, we observe that NAG exhibits a much faster rate than GD and our bounds are quite tight.

Our analysis technique can also be applied to linear neural networks. We consider unbalanced initialization similar to the one for (1). We show that NAG can achieve an accelerated convergence rate for each overparameterization level (Corollaries 1 to 3), under the commonly adopted interpolation assumption (Assumption 1, see e.g. Du and Hu 2019). In particular, we only require the network width to be greater than the rank of the output matrix.

\(\)**Additional Related Work**. For matrix factorization, there is a large body of works focusing on the _symmetric_ case, where \(\) is positive semidefinite and \(=^{}\)(Bhojanapalli et al., 2016; Li et al., 2018). However, these analyses are difficult to generalize to the rectangular case (1) due to the additional unbalanced scaling issue3. To overcome this, additional _balancing regularization_ is often required (Tu et al., 2016; Park et al., 2017; Zhang et al., 2021; Bi et al., 2022), which changes the objective function in (1). Du et al. (2018) show that GD can automatically balance the two factors hence explicit regularization is not necessary, but they only establish linear convergence rate for rank-\(1\) matrix and cannot generalize to rank-\(r\) case. Some other works remove this regularization for the general matrix sensing problem and show linear convergence rate for general ranks (Ma et al., 2021; Tong et al., 2021; 20). These results do not directly apply to our setting as they require singular value decomposition (SVD) at initialization, which consumes roughly the same amount of computation as solving (1). Moreover, these works only consider _exact parameterization_ (\(d=r\)), leaving out the overparameterization regime (\(d>r\)). Overparameterization may heavily slow down convergence due to the possible singularity of iterates (Stiger and Soltanolkotabi, 2021), thus some works consider preconditioning for acceleration (Zhang et al., 2023; Xu et al., 2023). These preconditioned methods are specifically tailored to symmetric factorization and are not directly comparable with the first-order methods we consider, as their algorithms not only use the gradient. For algorithmic acceleration, Zhou et al. (2020) first propose a computationally tractable modified Nesterov's method for general loss function \(f\) that is \(L\)-smooth \(\)-strongly convex to the product \(^{}\). However, their method still requires balancing regularization when applied to rectangular matrices, and SVD-based initialization that dominates the computation. Moreover, their acceleration pertains to the condition number \(L/\) of the loss function rather than \(\) of the target matrix, on which their dependence is \(O(^{2})\).

For linear neural networks, Du and Hu (2019) and Hu et al. (2020) show linear convergence of GD with Gaussian and orthogonal initialization respectively, and Min et al. (2021) studies convergence rate of gradient flow (GF) for unbalanced initialization. Wang et al. (2021) show that Polyak's heavy ball (HB) method (Polyak, 1964) attains accelerated convergence rate with orthogonal initialization. Liu et al. (2022) further investigate NAG and show a similar accelerated rate for Gaussian initialization. All these previous works consider sufficiently wide networks that depend on the output dimension, the rank, and the condition number of input. The results are summarized in Table 1.

\(\)**Notations**. Throughout this paper, \(\|\|\) denotes the Euclidean norm of a vector or the spectral norm of a matrix, and \(\|\|_{}\) denotes the Frobenius norm of a matrix. For any matrix, \(_{i}()\) denotes its \(i\)-th largest singular value. For a square matrix, \(_{i}()\) denotes its \(i\)-th largest eigenvalue. For a nonzero positive semidefinite matrix, \(_{}()\) and \(_{}()\) denote its largest and smallest nonzero eigenvalues respectively. For a matrix \(\), we use \(()\) to denote its column space, \(()\) to denote its kernel space and define \(()\|\|\| \|^{}\) as its condition number, where \(^{}\) denotes the pseudoinverse of \(\). For any positive integer \(n\), \(_{n}\) denotes the identity matrix of size \(n\). We use \(\) to denote the Kronecker product between matrices, \(\) to denote the direct sum of vector spaces, and \(()\) to denote the column-first vectorization of a matrix. We use \((,^{2})\) to denote Gaussian distribution with mean \(\) and variance \(^{2}\).

## 2 Results for Matrix Factorization

We start with formalizing our initialization scheme for matrix factorization problem (1). Let \(^{n d}\) be a Gaussian random matrix with i.i.d. entries \([]_{i,j}(0,1/d)\). We initialize

\[_{0}=c,_{0}=0,\] (2)

where \(c>0\) is a constant to be specified later. Typically, we require \(c\) to be larger than a certain threshold, which depends on the dimensions, the extreme singular values of \(\), and possibly the

   Algorithm & Initialization & Width & Rate \\  GD (Du and Hu, 2019) & Gaussian & \((r^{3}(d_{}+))\) & \((1-)^{t}\) \\ GD (Hu et al., 2020) & Orthogonal & \((^{2}(d_{}+))\) & \((1-)^{t}\) \\ HB (Wang et al., 2021) & Orthogonal & \((}{\|\|^{2}}(d_{} +))\) & \((1-})^{t}\) \\ NAG (Liu et al., 2022) & Gaussian & \((r^{5}(d_{}+))\) & \((1-})^{t}\) \\ NAG (ours, Corollary 1) & Unbalanced (12) & \(+()\) & \((1-})^{t}\) \\ NAG (ours, Corollary 2) & Unbalanced+Orth (13) & \(\) & \((1-})^{t}\) \\ NAG (ours, Corollary 3) & Unbalanced (14) & \( d_{}+()\) & \((1-})^{t}\) \\   

Table 1: Results for linear neural networks. All results in table are based on the assumption \(=\) for some \(\) with \(()=O(1)\), where \(\) denotes the input data, \(\) denotes the output data, \(d_{}\) denotes the output dimension, \(\) denote the failure probability, \(r=()\), \(=()\), \(=\|\|_{}^{2}/\|\|^ {2}\), \(=^{2}()\), \(_{1}=O(^{2})\), \(_{2}=O()\).

condition number of \(_{0}\). We note that changing \(c\) would not affect \((_{0})\), hence there is no recursive definition. As we mentioned, (2) is a modified version of the initialization in Ward and Kolda (2023), where we replace the small random Gaussian matrix \(_{0}\) by \(0\) and choose \(c\) independently of the step size. We set \(_{0}=0\) mainly for simplicity, and our analysis can be extended to the case where \(_{0}\) is a sufficiently small Gaussian random matrix. While the initialization of \(_{0}\) differs from standard Gaussian initialization, it has the following interpretation: Suppose we start from \(t=-1\) and let \(_{-1}=c^{}^{}\) and \(_{-1}=c^{}\) for some \(0<c^{} c^{} 1\) and Gaussian random matrix \(^{}\), then by taking a gradient step with step size \(c/c^{}\) we get \(_{0} c\) and \(_{0} 0\). This initialization of \(_{0}\) also coincides with the first step of randomized singular value decomposition, which is also referred to as sketching (see e.g. (Halko et al., 2011)).

### Gradient Descent

With initialization (1), we can analyze the global convergence rates of various first-order methods. Consider gradient descent (GD) first. The gradient of the squared Frobenius error in (1) is given by

\[_{X}f(,)=(^{}- ),_{Y}f(,)=( ^{}-)^{}.\]

For \(t 0\), the GD update with constant step size \(>0\) is written as

\[_{t+1}\\ _{t+1}=_{t}-(_{t} _{t}^{}-)_{t}\\ _{t}-(_{t}_{t}^{}-)^{} _{t}.\] (3)

Let \(_{t}_{t}_{t}^{}-\) denote the residual, then \(f(_{t},_{t})=\|_{t}\|_{ }^{2}\). We have the following convergence rate for GD.

**Theorem 1** (GD convergence rate).: _For \(0<<c_{1}\), denote \(=3e^{-(d-r+1)\{},c_{2},\}}\), where \(c_{1}\) and \(c_{2}\) are universal constants. Denote \(L=_{1}^{2}(_{0})\), \(=_{r}^{2}(_{0})\). Let \(=\), \(c_{r}()}{12(-)}^{4}(_{0})\| \|_{}}{^{2}(_{0})-1}}\) be a sufficiently large constant. Then with \(c\) plugged in initialization (2), GD returns \(_{t}\) and \(_{t}\) with probability at least \(1-\) such that_

\[\|_{t}\|_{}_{1}^{2}( )}{64}(1-)^{t}.\]

_In particular, if \(c=\) then GD finds \(\|_{T}\|_{}\|\| _{}\) in_

\[T=O(^{2}}{^{2}(d-r+1)^{2}})\]

_iterations, where \(C=(d-r+1)^{2}}{16d^{2}}^{4}(_{0} )^{2}}{^{2}(_{0})-1}\)._

Theorem 1 shows that GD converges in \(O(d^{2}(d-r+1)^{-2}^{2})\) iterations with initialization (2), and the constant prefactor does not have dependence on the ambient dimension \(m\) and \(n\). This matches the convergence rate for AltGD derived in Ward and Kolda (2023). The step size \(\) is commonly used in optimization literature and leads to optimal convergence rate (Nesterov, 2013). While the bound on \(\|_{t}\|_{}\) in Theorem 1 does not explicitly depend on \(\|\|_{}\), the norm still affects the convergence rate through the choice of \(c\) defined in (2). When \(c==O(\|_{}})\), the bound linearly depends on \(\|\|_{}\). When \(c>\), the bound linearly depends on \(c^{2}\), which dominates \(\|\|_{}\).

### Nesterov's Accelerated Gradient

We then consider Nesterov's accelerated gradient (NAG) method (Nesterov, 2013) applied to (1). We take the form of NAG that is originally designed for smooth strongly convex loss function \(\):

\[z_{t+1}=_{t}-(_{t}),_{t+1}=z_{t+1 }+(z_{t+1}-z_{t}),\]

where \(\) is the step size, \(\) is the momentum parameter, and \(z\) or \(\) in our case consists of both \(\) and \(\). If we focus on the \(\{_{t}\}\) sequence with \(_{t}=(_{t},_{t})\) and plug in the objective function in (1), then with \(_{-1}=_{0}\) and \(_{-1}=_{0}\), the NAG update is given by

\[_{t+1}\\ _{t+1}=(1+)(_{t}- _{t}_{t})-(_{t-1}-_{t-1} _{t-1})\\ (1+)(_{t}-_{t}^{}_{t})-( _{t-1}-_{t-1}^{}_{t-1}).\] (4)

We have the following convergence rate for NAG.

**Theorem 2** (NAG convergence rate).: _For \(0<<c_{1}\), define \(\) as in Theorem 1. Denote \(L=_{1}^{2}(_{0})\), \(=_{r}^{2}(_{0})\). Let \(=\), \(=}}{}}\), \(c:=29+)\|\|_{}}{r^{3}(-)^{3}_{2}^{2}()}}\) be a constant. Then with \(c\) plugged in initialization (2), NAG returns \(_{t}\) and \(_{t}\) with probability at least \(1-\) such that_

\[\|_{t}\|_{}_{1}^{2}( )}{64(_{0})}(1-}{ 2})^{t}.\]

_In particular, if \(c=\) then NAG finds \(\|_{T}\|_{}\|\| _{}\) in_

\[T=O()\]

_iterations, where \(C=+)}{64^{3}(-)^{3}}}{(_{0})}\)._

Theorem 2 shows that NAG can achieve \(O(d(d-r+1)^{-1})\) iteration complexity with high probability. The dependence on the condition number \(\) is improved from being quadratic to linear. Moreover, the dependence on the dimension is also improved. As shown in Theorem 1, the GD iteration number has an \(O(d^{2})\) dependence in the worst case (\(d=r\)). Here, NAG has at most \(O(d)\) dependence. The level of overparameterization \(d\) will affect both the convergence rate and the probability of success. To ensure a small fail probability \(\), it requires \(d=r-1+()\). Again, the step size \(\) and momentum \(-}{+}\) are commonly used in the literature (Nesterov, 2013).

## 3 Proof Sketch for Convergence Rates

We now provide the proof sketch for Theorems 1 and 2. Our proof is based on induction. We start with the assumptions that \(_{t}\) and \(_{t}\) are not too far from \(_{0}\) and \(_{0}\) respectively and the initial residual is bounded by some constant, which are guaranteed at time \(t=0\). Given the induction assumptions, we then track the dynamics of residual \(_{t}\) and decompose it into linear and higher-order parts. We can show that the linear part is contracted and the higher-order part shrinks exponentially, together implying that \(\|_{t+1}\|_{}=O(^{t})\) for some \((0,1)\) and \(_{t+1}\) and \(_{t+1}\) is still within a bounded region around initialization. This shows the induction assumptions for the next iterate, thus by invoking the induction we complete the proof.

The key to our proof is to show the contraction and its rate. Firstly, the linear part of the dynamics is not a contraction over the whole space, thus we need to identify in which subspace it is a contraction. Secondly, we need to quantify the rate of contraction to get global convergence rates. These necessitate the following proposition about the properties of \(_{0}\) with initialization (2).

**Proposition 1**.: _For any \(,c>0\), \(^{m n}\) being a rank-\(r\) matrix with condition number \(:=()\), \(^{n d}\) being a random matrix with i.i.d. entries from \((0,1/d)\), the following holds for \(_{0}=c\) with probability at least \(1-\):_

\[-)}{}c_{r}() _{r}(_{0})_{1}(_{0})+ }{}c_{1}(),\]

_where \(=3e^{-\{(d-r+1)r},c_{2}d,\}}\), \(c_{1}\) and \(c_{2}\) are universal constants. When it holds, the condition number of \(_{0}\) is bounded:_

\[(_{0})+}{(-)}.\]

By Proposition 1, the top singular value of \(_{0}\) is bounded from above by \(_{1}()\), and the \(r\)-th singular value of \(_{0}\) is bounded from below by \(_{r}()\), hence we have \((_{0})=O()\). Moreover, \(_{0}\) has rank \(r\) with probability \(1\) and thus it preserves the column space of \(\), i.e., \((_{0})=()\). This subspace preservation property will be passed to subsequent iterations of first-order methods and is critical to our analysis. In particular, we will show this space corresponds to the contraction subspace.

### Proof Sketch for GD Convergence Rate (Theorem 1)

As mentioned, we track the dynamics of \(_{t}\) for GD to prove Theorem 1. Let \(_{t}=(_{t})\) denote the vectorized residual, then the GD update (3) corresponds to the following dynamics:

**Proposition 2** (GD dynamics).: _Let \(_{t}=_{t+1}-_{t}\) and \(_{t}=_{t+1}-_{t}\) denote the update steps for \(t 0\). Then GD (3) admits the following dynamics:_

\[_{t+1}=(_{mn}-_{0})_{t}+ _{t},\] (5)

_where \(_{t}=(_{t}_{t}^{})_{m}+ _{n}(_{t}_{t}^{})\) and \(_{t}=(_{0}-_{t})_{t}+( _{t}_{t}^{})\)._

The linear part at time \(t\) is \((_{mn}-_{t})_{t}\), which is approximately \((_{mn}-_{0})_{t}\) when \(_{t}\) and \(_{t}\) are close to their initialization. The approximation error along with the higher-order term \((_{t}_{t}^{})\) is contained in \(_{t}\). It follows immediately from Proposition 2 that

\[_{t+1}=(_{mn}-_{0})^{t+1}_{0}+ _{s=0}^{t}(_{mn}-_{0})^{t-s}_{s}.\]

If \(_{}:=_{mn}-_{0}\) is a contraction map, i.e., it has all eigenvalues bounded \(|_{i}(_{})|\) for some \([0,1)\), and the nonlinear error \(_{t}\) shrinks exponentially at rate \((,1)\), then we have \(\|_{t}\|=O(^{t})\). However, for \(d<(m,n)/2\), \(_{}\) cannot be a contraction map for any \(\), as the rank of \(_{0}\) is at most \((m+n)d<mn\). In fact, if \(_{0}\) is initialized as in (2), then \((_{0})=nr<mn\) regardless of the choice of \(d\). As \(_{0}\) has no full rank, \(_{}\) must have a non-trivial eigensubspace corresponding to eigenvalue \(1\). In the following lemma, we show that \(_{t}\) and \(_{t}\) are not in this "bad" subspace but rather in a contracted subspace as desired.

**Lemma 1** (Eigensubspace).: _Let \(^{mn}\) denote the linear subspace containing all eigenvectors of \(_{0}\) with positive eigenvalues. If \(_{0}\) is initialized as in (2), then we have_

\[=(())^{n}\{_{t},_{t}\}_{t 0},\]

_where \(_{0}\), \(_{t}\) and \(_{t}\) are defined as in Proposition 2._

Given that \(_{t}\) and \(_{t}\) are in the contracted subspace \(\) throughout all iterations, the convergence rate is determined by the contractivity of \(_{}\) over this subspace, which corresponds to the condition number of \(_{0}\) with initialization (2).

**Lemma 2** (GD contractivity).: _Let \(L=_{1}^{2}(_{0})\), \(=_{r}^{2}(_{0})\), and \(\) be defined as in Lemma 1. Let \((0,)\), then for any \(\),_

\[\|_{}\|\{|1- L|,|1-|\}\|\|.\]

_In particular, if \(=\), then \(\|_{}\|\| \|\)._

By Lemmas 1 and 2, the linear part of GD dynamics contracts \(_{t}\) and \(_{t}\), and the rate of contraction is \(=\{|1- L|,|1-|\}\). To complete the proof, it remains to bound the magnitude of error \(_{t}\) and show induction conditions for the next iteration. This is guaranteed by the following lemma.

**Lemma 3** (Nonlinear error).: _If there exist \((0,1)\) and some constants \(C_{1}\) and \(C_{2}\) such that for any \(s t\), the GD dynamics (5) yields \(\|_{s}\| C_{1}^{s}\|_{0}\|\), \(\|_{s}-_{0}\|_{} C_{2}\), then we have_

\[\|(_{s}_{s}^{})\| C_{3} ^{2s}\|_{0}\|^{2}\|( _{0}-_{s})_{s}\| C_{4}^{s}\| _{0}\|\]

_for some constants \(C_{3}\) and \(C_{4}\) depending on \(C_{1}\) and \(C_{2}\). Moreover, if \(C_{1}\) and \(C_{2}\) satisfy_

\[((\|_{0}\|,\|_{0}\|)+C_{2})\, C _{1}\|_{0}\|(1-)C_{2},\] (6)

_then we have \(\|_{t+1}-_{0}\|_{} C_{2}\) and \(\|_{t+1}-_{0}\|_{} C_{2}\)._

Lemma 3 shows that \(\|_{t}\|=O(^{t})\) if the residual shrinks exponentially and the iterates are not too far from initialization, which in turn implies that \(_{t+1}\) and \(_{t+1}\) are also within the \(C_{2}\)-balls around their initialization. It turns out that there is a set of valid coefficients for the induction to go through as long as the \(c\) in (2) is sufficiently large. Therefore, by choosing \(c\) properly and plugging in \(=\) and \(=1-\), we prove the convergence rate for GD, and the iteration complexity follows immediately from Proposition 1. The complete proof is provided in Appendix B.6.

**Remark 1**.: _In our proof, the unbalanced initialization guarantees the existence of induction constants in Lemma 3. The amount of unbalance affects the constant factors but will not affect the convergence rate \((1-)^{t}\). To be explicit, suppose we initialize \(_{0}=c_{1}_{1}^{m d}\), \(_{0}=c_{2}_{2}^{n d}\), where \([_{1}]_{i,j} N(0,1/d)\) and \([_{2}]_{i,j} N(0,1/n)\), then by replacing \(_{0}\) in Proposition 2 with \(_{0}^{}=_{n}(_{0}_{0}^{ })\), we can generalize the proof and obtain the same convergence rate when \(c_{1}\) is sufficiently large and \(c_{1}c_{2}=O(1)\). Meanwhile, we have \(\|_{0}\|_{}(1+O(c_{1}c_{2}))\|\|_{}\) with high probability (Wand and Kolda, 2023). Therefore, when \(c_{1}\) is fixed, a smaller \(c_{2}\) yields a smaller initial loss, resulting in a smaller constant factor. Meanwhile, the convergence rate remains the same as the condition number of \(_{0}^{}\) is not affected, and the shift \(_{t}-_{0}^{}\) is controlled for small \(c_{2}\)._

### Proof Sketch for NAG Convergence Rate (Theorem 2)

We now turn to prove Theorem 2. Similar to GD, we track the residual dynamics of NAG.

**Proposition 3** (NAG dynamics).: _Let \(_{t}=_{t+1}-_{t}\) and \(_{t}=_{t+1}-_{t}\) denote the update steps for \(t 0\). Then NAG (4) admits the following dynamics:_

\[_{t+1}\\ _{t}=(1+)(_{mn}- _{0})&-(_{mn}-_{0})\\ _{mn}&0_{t}\\ _{t-1}+_{t}\\ 0,\] (7)

_where \(_{t}=(_{t}_{t}^{})_{m}+ _{n}(_{t}_{t}^{})\), \(_{t}=_{t}+_{t}\),_

\[_{t}=(_{t}_{t}^{})+(_{t-1}_{t-1}^{ })+(_{t-1}_{t-1}_ {t-1}^{}+_{t-1}_{t-1}^{}_{t-1}),\] \[_{t}=(1+)(_{0}-_{ t})_{t}-(_{0}-_{t-1})_{t-1}.\]

As Proposition 3 shows, NAG dynamics (7) has additional momentum terms involving \(_{t}\) and \(_{t}\). When \(=0\), it reduces to the GD dynamics (5). The introduction of momentum terms allows the linear part in (7) to contract \(_{t}\) and \(_{t}\) faster. To be more explicit, let

\[_{}(1+)(_{mn}- _{0})&-(_{mn}-_{0})\\ _{mn}&0\] (8)

denote the linear part of the system. The next lemma shows NAG improves the rate of contraction.

**Lemma 4** (NAG contractivity).: _Let \(=\), \(=-}{+}\), then for all \((,)\),_

\[\|_{}\\ \|(1-})\| \\ \|.\]

The price to pay for the faster rate of contraction is the additional perturbations. The \(_{t}\) term characterizes dynamics shift, which can be controlled as GD in Lemma 3. The \(_{t}\) term characterizes higher-order terms in the dynamics (7), which can be controlled by the updates \(_{t}\) and \(_{t}\). In GD, these terms correspond to the gradient so that they can be bounded if \(_{t}\) shrinks and \(_{t}\) and \(_{t}\) are not too far away from \(_{0}\) and \(_{0}\). In NAG, we have

\[_{t}=_{t}_{t}+_{s=1}^{t}^{t-s+ 1}_{s}_{s},\]

and a similar equation holds for \(_{t}\). If \(_{t}\) shrinks at rate \(>^{2}\), then we have an \(O(^{t})\) upper bound for \(\|_{t}\|_{}\) and \(\|_{t}\|_{}\). We formalize the argument in the following induction lemma.

**Lemma 5**.: _Suppose \(0<^{2}<<1\). If there exist some constants \(C_{1}\) and \(C_{2}\) such that for any \(s t\), the NAG dynamics (7) yields \(\|_{s}\\ _{s-1}\| C_{1}^{s}\| _{0}\\ _{-1}\|\), \(\|_{s}-_{0}\|_{} C_{2}\), and \(\|_{s}-_{0}\|_{} C_{2}\), then we have_

\[\|_{t}\| C_{3}^{2t}\| _{0}\\ _{-1}\|^{2},\| {}_{t}\| C_{4}^{t}\|_{0}\\ _{-1}\|\]

_for some constants \(C_{3}\) and \(C_{4}\) depending on \(C_{1}\) and \(C_{2}\). Moreover, if \(C_{1}\) and \(C_{2}\) satisfy_

\[((\|_{0}\|,\|_{0}\|)+C_{2} ) C_{1}\|_{0}\\ _{-1}\|(1-)^{2}C_{2},\] (9)

_then we have \(\|_{t+1}-_{0}\|_{} C_{2}\) and \(\|_{t+1}-_{0}\|_{} C_{2}\)._Lemma 5 is similar to Lemma 3. Again by choosing a sufficiently large \(c\) to initialize \(_{0}\), we can find a set of feasible coefficients for the induction. In particular, we plug in \(=1-}{}\), \(=1-}{2}\) and \(=-}{+}\), then \(\) defined in Theorem 2 ensures the success of induction, hence the accelerated convergence rate of NAG is proved. The complete proof is provided in Appendix C.4.

**Remark 2**.: _Our analysis differs from that of Ward and Kolda (2023). Their analysis is based on the Polyak-Lojasiewicz (PL) inequality (Lojasiewicz, 1963): \(f(_{t},)\) is approximately \(\)-PL and \(L\)-smooth in \(\), and the unbalanced initialization (large \(_{0}\) small \(_{0}\)) ensures that only \(\) matters to the convergence rate, as \(\) is not changing by much. Since the objective function in (1) is quadratic in \(\), the problem has condition number \(=O(^{2})\). With these notations, the complexity in Ward and Kolda (2023) reads as \(O()\), which is standard for PL functions._

_However, PL inequality cannot fully capture the properties of (1), and the analysis in Ward and Kolda (2023) does not apply to the case where \(_{t}\) and \(_{t}\) are updated simultaneously rather than alternatingly. In fact, if we fix \(_{0}\) and optimize \(\) only, then our initialization (2) makes the problem quasi-strongly convex (QSC), which is strictly stronger than PL (Necoara et al., 2019). For QSC functions, NAG can achieve \(O(})\) convergence rate Necoara et al. (2019), while for PL functions the rate can only be \(()\)(Yue et al., 2023)._

_We note that simultaneously optimizing \(\) and \(\) causes the nonconvexity issue and hence (1) does not fit in the framework for QSC functions as it requires convexity. Our results in Theorems 1 and 2 match the ones for QSC functions and Theorem 2 further matches the lower bound for general smooth strongly convex functions (Nemirovski and Yudin, 1983), which generally exhibit more favorable properties than nonconvex optimization problems to which (1) belongs. Hence, we conjecture that our rate bounds are tight for both GD and NAG. However, rigorous theory is yet to be constructed to solidify our conjecture._

## 4 Extension to Linear Neural Network

Our analysis can be extended to the squared loss training of two-layer linear neural networks, which is equivalent to the following optimization problem:

\[_{^{n d},^{n d}} \ f(,)=\|- ^{}\|_{}^{2}.\] (10)

Here, \(^{n N}\) corresponds to all input data concatenated together, \(^{m N}\) denotes the labels, \(N\) is the total number of training data samples, and \(d\) is the network width. We make the following interpolation assumption, which is commonly adopted in the study of the convergence rate of linear neural networks (Du and Hu, 2019; Hu et al., 2020; Wang et al., 2021).

**Assumption 1** (Interpolation).: _There is \(\) with \(()=O(1)\) such that \(=\), \(()=r\)._

Under Assumption 1, we can establish a linear convergence rate for NAG when the initialization is sufficiently unbalanced and \(_{0}\) contains the column space of \(\).

**Theorem 3**.: _Let \(=_{1}^{2}(_{0})_{}(^{})\), \(=_{r}^{2}(_{0})_{}( ^{})\). Suppose \(_{0}=0\), \(_{0}\) is initialized such that \((_{0})()\) and it satisfies_

\[p 4\|^{}\|_{ }(1+p),\] (11)

_where \(p=}{144}\) does not depend on the scaling of \(_{0}\). If we choose \(=\) and \(=-}{+}\), then the \(t\)-th iterate of NAG (\(_{t}\) and \(_{t}\)) will correspond to residual \(_{t}=_{t}_{t}^{}-\) satisfying_

\[\|_{t}\|_{}^{2}(_ {0})_{}()}{576}(1-}{2}} )^{t}.\]

_Equivalently, let \(C=^{2}(_{0})_{}()}{576\| ^{}\|_{}}\), then the iteration complexity for \(\) relative error is_

\[T=O((_{0})(^{})}}{_{r}(_{0})(^{})}}()).\]As Theorem 3 shows, if our initialization guarantees the column space of \(_{0}\) contains columns of \(\), then the residual shrinks at a linear rate. In the worst case, the columns of \(\) span the whole space of \(^{m}\), hence \(d\) should be at least \(m\). However, when the data exhibits some low-dimensional properties, e.g., \(\) is low-rank, then \(r\) can be much smaller than \(m\) and \(N\). In this case, an initialization similar to (2) can meet the requirement of Theorem 3. Moreover, note that the convergence rate depends on both \(\) and \(_{0}\), hence by orthonormalization we can make \((_{0})=1\) for a faster rate. When \(r d(m,N)\), such orthonormalization is affordable as it takes \(O(md^{2})\) time rather than \(O(mN^{2})\) in the worst case. We summarize these initialization options:

\[d r,^{N d},[ ]_{i,j}(0,1/d),_{0}=c,_{0}=0;\] (12) \[d r,^{N d},[ ]_{i,j}(0,1/d),_{0}=c(),_{0}=0;\] (13) \[d m,^{m d},[ ]_{i,j}(0,1/d),_{0}=c,_{0}=0;\] (14)

Here, \(()\) denotes the orthonormalization result whose columns are orthonormal. By applying singular value bounds and invoking Theorem 3, we obtain the following corollaries.

**Corollary 1**.: _Suppose initialization (12) is applied with some sufficiently large \(c\). For any \(0<<c_{1}\), \(0<<1\), if \(d r-1+()\), then with probability at least \(1-\), NAG finds \(_{T}\) and \(_{T}\) such that \(f(_{T},_{T})\|^{ }\|_{}^{2}\) where_

\[T=O(()}{(d-r+1)}(^{})}}{( ^{})}}).\]

**Corollary 2**.: _Suppose initialization (13) is applied with some sufficiently large \(c\). If \(d r\), then with probability \(1\), NAG finds \(_{T}\) and \(_{T}\) such that \(f(_{T},_{T})\|^{ }\|_{}^{2}\) where_

\[T=O((^{})}{_{ }(^{})}}).\]

**Corollary 3**.: _Suppose initialization (14) is applied with some sufficiently large \(c\). For any \(0<<c_{1}\), \(0<<1\), if \(d m-1+()\), then with probability at least \(1-\), NAG finds \(_{T}\) and \(_{T}\) such that \(f(_{T},_{T})\|^{ }\|_{}^{2}\) where_

\[T=O((^ {})}}{(^{})}}).\]

**Remark 3**.: _While we only consider NAG in this section, our analysis can be directly applied to GD and obtain \(O^{2}(_{0})_{}(^{})}{_{2}^{2}(_{0})_{}(^{ })}\) convergence rate with initializations (12) to (14)._

Corollaries 2 and 3 show accelerated convergence rate of NAG, as their dependence on the condition number \((^{})}{_{ }(^{})}=^{2}()\) is \(O()\) rather than \(O()\), matching the results in Wang et al. (2021) for HB and Liu et al. (2022) for NAG. Meanwhile, Corollary 1 has an additional dependence on \(()\). Under Assumption 1, \(()=O()\) and hence the overall dependence is \(O()\). Although this is slower than NAG with initialization (13) or (14), it still outperforms GD with initialization (12), which has \(O(^{2})\) dependence. Compared to previous results listed in Table 1, we only require the network width to be \((r+)\) or \((m+)\) depending on the initialization and there is no additional dependence on the input rank or condition number. When the data is low-rank, NAG with initialization (12) enables the sublinear-width (w.r.t. output dimension and sample size) network to converge linearly. It can be further accelerated if orthonormalization is adopted (13), which echos the orthogonal initialization in Hu et al. (2020); Wang et al. (2021). In the general case, our analysis still provides a tighter result, as (14) only requires the width to be \((m+)\).

## 5 Numerical Experiment

We validate our results via numerical experiments. For matrix factorization (1), we construct \(=^{}^{100  80}\), where \(^{5 5}\) is diagonal with \(_{1}()=1\) and \(_{5}()=0.2\), and \(\) and \(\) are orthonormal matrices. We set different levels of overparameterization (\(d 5\)) and initialize \(_{0}\) and \(_{0}\) according to (2) with \(c=50\). For linear neural network (10), we construct the input data matrix \(=^{}^{80 120}\), where \(^{5 5}\) is diagonal with \(_{1}()=1\) and \(_{5}()=0.5\), \(\) is orthonormal and \(\) is Gaussian. We use a Gaussian matrix \(^{100 80}\) to construct the label matrix \(=\). We keep \(c=50\) and initialize \(_{0}\) and \(_{0}\) according to (12). We run all experiments with \(10\) different initialization seeds and take the average.

We first compare GD and AltGD. For matrix factorization, We use the same initialization and the same step size \(=2/(L+)\), where \(L\) and \(\) are computed as defined in Theorems 1 and 2. For linear neural networks, \(L\) and \(\) are replaced by \(\) and \(\) in Theorem 3. As shown in Figure 1, they perform very similarly and the loss curves are overlapped. To better illustrate, we additionally use \(=1/L\) for GD, and it performs differently from GD/AltGD with \(=2/(L+)\).

We then compare GD and NAG. For matrix factorization, we use \(=2/(L+)\) for GD and use \(=1/L\) and \(=(-)/(+)\) for NAG, where \(L\) and \(\) are computed as defined in Theorem 2. For linear neural networks, we replace \(L\) and \(\) by \(\) and \(\) defined in Theorem 3. The results are shown in Figure 2. As illustrated, NAG exhibits much faster convergence than GD. Moreover, a higher overparameterization level helps accelerate convergence, as predicted by the prefactor \(O((d(d-r+1)^{-1}))\) in our iteration complexity.

To further illustrate the tightness of our theory, we compare our theoretical predictions with the actual loss in matrix factorization, as shown in Figure 3. We set \(c=200\) and \(_{5}()\{0.1,0.01\}\), keeping other settings unchanged. The theoretical prediction at step \(t\) is computed as \((1-/L)^{2t} f(_{0},_{0})\) for GD and \((1-/(2))^{2t} f(_{0},_{0})\) for NAG. We observe that the slope of the predicted loss closely matches the actual loss, supporting the tightness of our theory, especially for GD. Additional experiments are provided in Appendix E.

## 6 Conclusion and Future Work

We establish the convergence rate of GD and NAG for rectangular matrix factorization (1) under an unbalanced initialization and show the provable acceleration of NAG. We further extend our analysis to linear neural networks (10) and show the acceleration of NAG without excessive width requirements in previous work. Numerical experiments are provided to support our theory.

We believe our analysis can be extended to initialization where \(_{0} c\) and \(_{0} 0\) rather than exact equalities. Relaxing the exact rank-\(r\) condition to approximately rank-\(r\) is also a possible generalization. The linear neural network model considered in this paper cannot fully capture the practical settings. We leave the extension to nonlinear activations for future work.

Figure 1: _GD and AltGD achieve similar performance. The left plot is for (1), and the right plot is for (10)._

Figure 3: _Comparison of predicted loss and numerical loss for matrix factorization. The left plot is for GD where \(=10\), and the right plot is for GD and NAG where \(=100\). (T) denotes theory prediction._

Figure 2: _NAG converges faster than GD. The left plot is for (1), and the right plot is for (10)._