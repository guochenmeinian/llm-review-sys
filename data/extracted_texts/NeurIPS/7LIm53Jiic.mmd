# Error Correction Output Codes for Robust Neural Networks against Weight-errors:

A Neural Tangent Kernel Point of View

Anlan Yu

Lehigh University

any218@lehigh.edu

These authors contributed equally to this work

Shusen Jing1

University of California, San Francisco

shusen.jing@ucsf.edu

&Ning Lyu

Lehigh University

nil418@lehigh.edu

&Wujie Wen

North Carolina State University

wen2@ncsu.edu

&Zhiyuan Yan

Lehigh University

zhy@@lehigh.edu

###### Abstract

Error correcting output code (ECOC) is a classic method that encodes binary classifiers to tackle the multi-class classification problem in decision trees and neural networks. Among ECOCs, the one-hot code has become the default choice in modern deep neural networks (DNNs) due to its simplicity in decision making. However, it suffers from a significant limitation in its ability to achieve high robust accuracy, particularly in the presence of weight-errors. While recent studies have experimentally demonstrated that the non-one-hot ECOCs with multi-bits error correction ability, could be a better solution, there is a notable absence of theoretical foundations that can elucidate the relationship between codeword design, weight-error magnitude, and network characteristics, so as to provide robustness guarantees. This work is positioned to bridge this gap through the lens of neural tangent kernel (NTK). We have two important theoretical findings: 1) In clean models (without weight-errors), utilizing one-hot code and non-one-hot ECOC is akin to altering decoding metrics from \(l_{2}\) distance to Mahalanobis distance. 2) There exists a threshold, determined by the normalized distance among codewords, the DNN architecture, and the scale of weight-errors. If the distance between a clean output (without weight-errors) and its nearest codewords is smaller than this threshold, then the DNN can make predictions as if it is free of weight-errors. Based on these findings, we further demonstrate how to practically use them to identify optimal ECOCs for simple tasks (small number of classes) and complex tasks (large number of classes), by balancing the code orthogonality (as per finding 1) and code distance (as per finding 2). Extensive experimental results across four datasets and four DNN models validate the superior performance of constructed codes, guided by our findings, compared to existing ECOCs. To our best knowledge, this is the first work providing theoretical explanations for the effectiveness of ECOCs and offers associated design guidance for optimal ECOCs specifically tailored to DNNs.

## 1 Introduction

Inspired by error correction codes in wireless communication and memory system, error correction output codes (ECOCs) are proposed to improve the generalization performance of multi-class classification in decision trees by decomposing a complex problem into simpler binary classificationtasks . As deep neural networks (DNNs) are ever-increasingly popular in machine learning, one-hot code, as a special ECOC providing one bit protection, has been most widely adopted in the output layer of modern DNNs due to its simplicity in decision making and decent generalization performance. However, it experiences notable accuracy degradation in the presence of weight errors, such as those originating from hardware defects in non-volatile compute-in-memory (NVCiM) DNN accelerators [2; 3; 4; 5; 6; 7].

A number of works has adopted general ECOCs (non-one-hot code) to improve DNN's robust accuracy against weight errors [8; 9; 10; 11; 12]. While these studies demonstrate that ECOCs with stronger error correction capability, can outperform one-hot codes to some extent through experiments, they often directly apply existing ECOCs to DNNs, with no explicit code design optimization tailored to modern DNNs. In this regard, there lacks a systematic theoretical study to answer the following key questions: _1) What is the mechanism behind ECOC's efficacy in DNNs? 2) How effective can ECOC be? 3) How optimal ECOCs tailored for DNNs can be designed principally?_ To bridge this gap and provide insights to code construction, in this work, we overcome the challenges of characterizing the connection between the actual DNN performance and the application of ECOCs, and answer these questions rigorously based on novel theoretical proof. For the first question, the prevailing intuition in existing research, which suggests that enlarging the distance among codewords enhances robustness, is somewhat imprecise. In fact, we prove that the normalized distance (by the square root of the code length) among codewords is the crucial quantity in improving the DNNs' robustness. For the second question, we establish that there exists a threshold, determined by the normalized distance among codewords, DNN architecture, and the scale of weight-errors. If the distance between a clean output (in the absence of weight-errors) and its nearest codewords is smaller than this threshold, the DNN can make predictions as if it is free of weight-errors. For the third question, we analyze the overall performance of ECOCs by separating it into clean performance (in the absence of weight-errors) and performance degradation due to weight-errors. We demonstrate that the clean performance is influenced by the correlation among ECOC codewords (code orthogonality), while robustness is determined by the normalized distance among the codewords (code distance). Thus, both aspects should be carefully considered during code construction.

**Contributions:** To this end, we provide a theoretical characterization of the efficacy of ECOCs on DNNs through the lens of the neural tangent kernel (NTK). Building on our theoretical insights, we propose two ECOC construction methods tailored to DNNs focusing on small tasks and complex tasks. Our contributions are summarized as follows:

\(\) In clean models (without weight errors), utilizing one-hot code and non-one-hot ECOC is akin to altering decoding metrics from \(l_{2}\) distance to Mahalanobis distance.

\(\) We prove that there exists a threshold, determined by the normalized distance among codewords, the DNN architecture, and the scale of weight-errors. If the distance between a clean output (in the absence of weight-errors) and its nearest codewords is smaller than this threshold, the DNN can make predictions as if it is free of weight-errors.

\(\) Inspired by our theoretical results, we propose two ECOC construction methods optimizing the trade-off between codewords orthogonality and distance among codewords.

\(\) Extensive experimental results on four datasets and four DNN models show that our constructed codes, based on our findings, surpass the performance of existing ECOCs with up to \(7\%\).

To the best of our knowledge, this is the first work providing theoretical explanations for the effectiveness of ECOCs and offers associated design guidance for optimal ECOCs specifically tailored to DNNs.

## 2 Related Works

Error Correction Output CodesPrevious works have adopted ECOCs to improve the robustness of DNNs [8; 9; 10; 12; 11]. Gupta _et al._ construct ECOCs by maximizing row-wise and column-wise Hamming distances together . They particularly focus on short codes and weight-error free scenarios, instead of NN's robustness against weight-errors. Yu _et al._ propose a DNN output error decorrelation framework to enhance performance of ECOCs . Deng _et al._ apply ECOCs to DNNs to improve reliability and false rejection rate . Liu _et al._ adopt Hamming codes to improve the robustness of DNNs . Verma _et al._ claim that the robustness provided by ECOCs may stem from sigmoid activation functions, which allows larger error margin than softmax . Existing works are mostly empirical studies and fail to address the theoretical foundation of ECOCs.

Neural Tangent KernelJacot _et al._ propose the concept of neural tangent kernel. They prove that the learning dynamic of an infinite-width DNN with proper initialization is essentially a dynamic of kernel ridge regression with defined neural tangent kernel . Lee _et al._ refine the results in  and prove that infinite-width DNNs evolve like a linear model under gradient descent . Lee _et al._ demonstrate that infinitely wide deep neural networks with specific types of initialization and non-linear activation functions converge to Gaussian processes . These works focus on learning dynamic of the DNN in NTK regime without considering weight-errors.

## 3 Preliminaries

### Error Correction Output Codes (ECOCs)

ECOC is a generalization of conventional one-hot codes with various code length and arbitrary binary entries. An ECOC is defined by an encoding function \(:[C]\{1,-1\}^{n_{L}}\), where \(C\) is the number of classes, and \([C]\) denotes the set \([C]\{1,2,...,C\}\). Here \(n_{L}\) is the code length, which is equal to the dimension of the DNN's outputs. The encoding function essentially maps a class label to a binary codeword. Let \(\) denote the training data set with each entry as a pair \((x,c)\), where \(x^{n_{0}}\) and \(c[C]\) are DNN inputs and the corresponding label, respectively; \(n_{0}\) is the input dimension of the DNN. Let \(f(x;):^{n_{0}}^{n_{L}}\) be the DNN model parameterized with weights \(\). The objective during the training process is to minimize the loss function

\[()|}_{(x,c) }g(f(x;),(c)), \]

where \(g(,)\) is referred to as sample loss. During the inference, the DNN outputs \(f(x;)\) are mapped to classification decisions through the following decoding process

\[D(f(x;))_{c[C]}\|f(x;)-(c) \|, \]

where \(D():^{K}[C]\) is the decoding function. We can choose arbitrary metric in Eq. (2) for decoding, but we mainly focus on the \(l_{2}\) norm in this paper.

### Neural Tangent Kernel (NTK)

NTK is a tool for analyzing the learning dynamic and generalization of DNNs. It allows us to study DNNs in a reproducible kernel Hilbert space (RKHS) instead of intractable DNN weights space. We adopt a fully-connected feed-forward neural networks with \(L\) layers. At the \((l+1)\)-th layer, we have

\[h_{l+1}=w_{l+1}x_{l}+b_{l+1}\\ x_{l+1}=(h_{l+1}) \]

for \(l=0,1,...,L-2\), where \(h_{l+1}^{n_{l+1}}\) and \(x_{l+1}^{n_{l+1}}\) are the pre- and post-activation values at the \((l+1)\)-th layer; \(w_{l+1}^{n_{l+1} n_{l}}\) and \(b_{l+1}^{n_{l+1}}\) are the weights and bias accordingly; \(n_{l}\) is the width of the \(l\)-th layer; \(()\) is the activation function. In this case, \(n_{0}\) is the dimension of DNN inputs and \(n_{L}\) is the dimension of DNN outputs (also the ECOC code length). With NTK parameterization, the entries of \(w_{l+1}\) and \(b_{l+1}\) are initialized with independent and identically distributed (i.i.d.) Gaussian random variables with \((0,})\) and \((0,1)\), respectively.

Let \(^{n_{0}||}\) be the input set in \(\), where each column represents a sample of inputs, and let \(^{n_{L}||}\) be the corresponding codewords, where each column represents the corresponding target. Without loss of generality, we parameterize \(n_{l}=_{l}n\) with some \(_{l}>0\) and \(n>0\), for \(1 l L-1\), then training DNNs in the NTK regime minimizing MSE will result in the following DNN function according to  when hidden layer width parameter \(n\),

\[f(x)=(,)^{-1}(,x) \]

where \(:^{n_{0}}^{n_{0}}\) is the NTK, \((,)^{||| |}\), and \((,x)^{|| 1}\).

Theoretical Results

In this section, we analyze the efficacy of ECOCs on DNNs through the lens of NTK. To the best of our knowledge, this represents the first theoretical exploration of ECOCs' effectiveness on DNNs. Our findings are summarized as follows:

\(\) We prove that adopting ECOC as a replacement of one-hot codes is equivalent to changing the decoding metric from \(l_{2}\) distance to a Mahalanobis distance.

\(\) We establish an upper bound for the perturbation of DNN outputs, suggesting that the normalized distance of code is a crucial factor determining the error correction capability of ECOCs.

### Assumptions

**Assumption 1**.: _The activation functions in the hidden layers are bounded at \(0\), i.e., \((0)<\), and they are Lipschitz continuous with parameter \(B\), i.e., for any \(h\) and \(h^{}\), we have_

\[|(h)-(h^{})| B|h-h^{}|. \]

**Assumption 2**.: _For any DNN input \(x_{0}\), we have \(\|_{2}}{}} 1\)._

**Assumption 3**.: _The matrix \((,)^{||| |}\) is full-rank._

**Assumption 4**.: _The initial gradient with respect to the DNN output is bounded, i.e., there exists a constant \(R_{0}\) such that \(\|_{f(,_{0})}\|_{2}<R_{0}\)._

Assumption 1 holds for most of the common state-of-the-art (SOTA) activation functions, such as ReLU, sigmoid and tanh. Assumption 2 essentially assumes a bounded norm of all DNN inputs. Without loss of generality, this assumption holds after input normalization. Assumption 3 holds almost surely for smooth kernel and continuous probability distribution of input samples. The assumption here is used to avoid the corner cases of uninvertible \((,)\). Assumption 4 should hold with high probability with proper choice of \(R_{0}\) due to random initialization.

### Efficacy of ECOCs in Absence of Weight-errors

In this subsection, we discuss the behavior of DNNs after being trained with ECOC. Our first result is based on eq.4 proved in .

**Proposition 1**.: _Let Assumption 1, 2, 3 and 4 hold. Suppose there is no weight-errors and hidden layer width parameter \(n\), then applying ECOC is equivalent to changing the decoding function of one-hot codes (with \(0\) and \(1\) entries) to the following_

\[D(f(x))=_{c[C]}\|f(x)-e_{c}\|_{([C])^{T} ([C])}^{2} \]

_where \(e_{c}^{C}\) is the \(c\)-th one-hot codeword and \(\|x\|_{A}Ax}\) is referred as the Mahalanobis norm with positive definite matrix \(A\)._

**Remark 1**.: _From Proposition 1 we observe that, in NTK regime, ECOCs affect the performance of DNNs through the correlation matrix \(([C])^{T}([C])\) of the codewords when the DNNs are free of weight-errors. For both one-hot and ECOCs, their target spaces \(^{n_{L}}\) are equipped with \(l_{2}\)-norm and the corresponding decoding metrics. Proposition 1 suggests that ECOCs generalize the decoding metric. **Applying ECOCs is equivalent to equipping the target space of one-hot code with the Mahalanobis norm and the corresponding decoding metric._

_Although it remains unclear which correlation matrices yield the best performance for ECOCs in absence of weight-errors, we know that codewords that are approximately orthogonal generally perform comparably to one-hot codes. Consequently, it is reasonable to regularize the orthogonality of the codewords during the ECOC construction._

### Efficacy of ECOCs on the Robustness of DNNs

It has been reported in multiple works that ECOCs can improve the robustness of DNNs against weight-errors [8; 9; 11]. However, these studies lack a rigorous theoretical explanation of why DNNs become more robust after ECOC application. In this section, we provide theoretical guarantee on the error correction capability of ECOCs. We begin with the weight-error model.

#### 4.3.1 Weight-error Model

We consider the weight-errors proportional to the weight scale. Considering the typically small initial values of neural network weights and the minimal changes from these initial values after training in the NTK regime , we assume that the noise terms are independent and identically distributed (i.i.d.) Gaussian variables with zero mean and variance \(^{2}/n\).

#### 4.3.2 Theoretical Guarantee for Robustness with ECOCs

We first show the bound of hidden layer outputs in absence of weight-errors, which will be used to prove other results.

**Lemma 1** (Hidden layer output bound).: _Let Assumptions 1, 2, 3, and 4 hold. Then, for any hidden layer \(l L-1\) and any \(>0\),_

\[\|_{2}}{}}(1-)B^{l}++ \]

_holds with probability at least \(1-\) when \(n\) is large enough, where the hidden layer width \(n_{l}=_{l}n\) with constant \(_{l}>0\) for all \(1 l L-1\)._

Based on the lemma, we show the perturbation bound in the following theorem.

**Theorem 1** (Perturbation bound).: _Let Assumptions 1, 2, 3, and 4 hold. Adopt the weight-error model in Sec. 4.3.1, and denote \(^{2}=_{l}_{l}^{2}\). Let \(x_{L}\) and \(_{L}\) denote any clean output (in absence of weight-errors) and its perturbed counterpart due to weight-errors, respectively. Then for arbitrary \(>0\) and arbitrary DNN input, we have_

\[-_{L}\|_{2}}{}}(,B, |(0)|,L)+ \]

_with probability at least \(1--o(n_{L}^{-1}^{-1})\) when \(n\) and \(n_{L}\) are large enough, where_

\[(,B,|(0)|,L)\!=\! B^{L}\!(\!1\!-\!)\!}\!L\!- \!1}{}\!-\!1}\!+\!B})^{L}\!-\!1}{B}\!-\!1}. \]

**Remark 2**.: _The theorem suggests that the normalized output perturbation \(-_{L}\|_{2}}{}}\) can be bounded in terms of weight-error scale \(\), Lipschitz constant \(B\), absolute activation function value \(|(0)|\) and DNN depth \(L\) with high probability when hidden layer width \(n\) and code length \(n_{L}\) are large enough. It can be observed that: 1) The bound can be made arbitrarily small when \(=0\), suggesting that the bound is tight. 2) The bound can be made arbitrarily small when \(B=0\), which means the activation function \(\) always outputs a constant regardless of its input. Obviously, in this situation, there will be no output perturbation, but training this DNN will be meaningless. 3) The DNN depth \(L\) on the exponents accounts for the error propagation due to the feed-forward architecture of the DNNs._

Based on Theorem 1, we present our main result in the following corollary to characterize the error correction capability of ECOCs.

**Corollary 1** (Main result).: _Let all the conditions in Theorem 1 hold. Denote normalized (\(l_{2}\)) distance of a codeword \((i)\) and normalized uncertainty of clean prediction given the clean output \(x_{L}\) as \(dist((i))\) and \(U(x_{L})\), respectively, with the following definition:_

\[dist((i))=_{j:j i}}}\|( i)-(j)\|_{2},\;\;\;U(x_{L})=_{i}}} \|(i)-x_{L}\|_{2}. \]

_Then a DNN with an ECOC can make prediction with \(_{L}\) as if it is free of weight-errors after decoding, i.e., \(D(_{L})=D(x_{L})\) with probability arbitrarily close to \(1\), if the ECOC satisfies_

\[))}{2}>U(x_{L})+(,B,|(0)|,L)+ \]

_for arbitrary small \(>0\) when \(n,n_{L}\)._

**Remark 3**.: _In eq. (40), \(U(x_{L})\) accounts for the distance between clean output \(x_{L}\) and its closest codewords, and \((,B,|(0)|,L)+\) accounts for the output perturbation due to weight-errors. Note that Corollary 1 specifies conditions under which predictions can be made as if the DNN is free of weight-errors; however, it does not guarantee that these predictions will be the ground-truth labels. Even in the absence of weight-errors, DNNs may still produce incorrect predictions due to the data and model generalization, which cannot be corrected by ECOCs._A geometric explanation of Corollary 1 is given in Figure 1. The perturbed output \(_{L}\) (red diamond) is within the ball centered at clean output \(x_{L}\) (blue dot) with radius \(+\) according to Theorem 1. If eq. (40) holds, then distance between \(_{L}\) and the codeword \(D(x_{L})\) (black dot at the bottom left), which is the decoding result of clean output \(x_{L}\), will be smaller than the distance from \(_{L}\) to any other codewords (black dot at top right), mean that \(D(x_{L})=D(_{L})\) after decoding.

## 5 ECOC Constructions

Inspired by our theoretical results, in this section, we propose two ECOC construction methods for small scale and large scale classification tasks, respectively.

### Problem Formulation

The final performance of ECOCs is determined by weight-error free performance and performance degradation on top of that due to weight-errors, which are discussed in Proposition 1 and Corollary 1, respectively. According to Proposition 1, the weight-error free performance is influenced by the correlation matrices of ECOCs. Although the optimal correlation matrices remain unidentified, extensive experiments have verified that near orthogonal codewords are generally good. Therefore, we penalize the correlation of codewords during code construction. On the other hand, according to Corollary 1, larger normalized distance of codes leads to better error correction capability of ECOCs, therefore we encourage the distances of the codes during code construction. Let \(Z\{-1,1\}^{n_{L} C}\) be the ECOC codebook, i.e., a horizontal stack of codeword, then we construct the code by solving the following optimization problem:

\[_{Z\{-1,1\}^{n_{L} C}}-\|Z[i] -Z[j]\|^{2}}_{}+(Z[i]^{T}Z[j])^{2}-_{i}\|Z[i]\|^{2})}_ {}. \]

Note the second part of the objective penalizes the magnitude of off-diagonal elements while promoting the amplitude of diagonal elements in the correlation matrix \(Z^{T}Z\).

### Method 1: Direct Optimization

Before employing standard optimization algorithms, it is necessary to relax the feasible set from the discrete binary domain \(\{-1,1\}^{n_{L} C}\) to the continuous interval \([-1,1]^{n_{L} C}\). To further eliminate these box constraints, we reparameterize \(Z\) with \(Z=tanh(Z^{})\). This allows the application of gradient descent to effectively solve the optimization problem. Finally, we take the sign of each elements in \(Z\) as the generated codebook.

### Method 2: Picking from Hadamard

Since the objective in eq. (12) is non-convex, Method 1 can be easily trapped in local optima, especially for ECOCs with large number of classes \(C\). For this reason, we introduce Method 2 in this section which constructs ECOCs on top of Hadamard codes. Hadamard codes exhibit several beneficial properties: 1) the number of codewords is equal to the code length, and both are powers of 2; 2) all codewords are orthogonal to each other; 3) the Hamming distance between any two codewords is half of the code length. This property allows Hadamard codes to achieve the upper bound of the minimum Hamming distance of ECOCs given the code length. Hadamard code is an excellent choice for ECOCs, which has been validated in previous works [10; 11; 12; 16]. An example of Hadamard code with code length \(8\) is given in Section A.2.

In Method 2, we pick \(C\) codewords from Hadamard codes and their complementary codes. Without loss of generality, we decompose \(C\) into \(C=2a+b\), where \(a\) and \(b\) are non-negative integers. Let

Figure 1: An illustration for Corollary 1.

\(\{v_{1},v_{2},...,v_{H}\}\) be the Hadamard codewords, then the code constructed by Method 2 is given by

\[_{a,b}^{pick}(i)=v_{i},1 i a\\ -\ v_{i-a},a<i 2a\\ v_{i-a},2a<i C. \]

In other words, its codebook \(_{a,b}^{pick}([C])=\{v_{1},v_{2},...,v_{a},-v_{1},-v_{2},...,-v_{a}, v_{a+1},v_{a+2},...,v_{a+b}\}\). We can observe that for a codeword \(_{a,b}^{pick}(i)=v_{i}\) with \(i a\), it is orthogonal to all other codewords except \(_{a,b}^{pick}(i+a)=-v_{i}\). In addition, the Hamming distance between it and other codewords is half of the code length \(}{2}\), except \(_{a,b}^{pick}(i+a)\), where the Hamming distance is \(n_{L}\). When \(a=0\), codebook \(_{a,b}^{pick}([C])=\{v_{1},v_{2},...,v_{C}\}\) is composed of codewords from a Hadamard code.

Figure 2 provides a more intuitive comparison between Hadamard codes and the codes constructed by Method 2. Figure 2(a) illustrates the geometric structure of Hadamard codes and the codes constructed by Method 2 with \(C=3,a=1\). As previously mentioned, the codewords of a Hadamard code are orthogonal to each other. In contrast, some pairs of codewords in Method 2 are located in the opposite direction from another. Figure 2(b) compares the correlation matrices of Hadamard code with code length \(n_{L}=8\) and the code constructed by Method 2 with \(C=8,a=3\). We observe that the correlation matrix of Method 2 contains off-diagonal elements, indicating a higher level of correlation compared to that of Hadamard codes. Figure 2(c) shows the distance matrices of Hadamard code and Method 2 with \(C=8,a=3\). We observe that the codewords of Hadamard codes have uniform Hamming distances (the number of different entries), whereas the codewords constructed by Method 2 produces some codeword pairs with larger Hamming distances and others that are equivalent to those found in Hadamard codes. Notice that, by adjusting \(a\) and \(b\) we can achieve different trade-off between averaged codeword distance and correlations.

## 6 Experiments

### Experimental Setup

We conducted all simulations using PyTorch framework on a workstation equipped with an AMD EPYC 7542 32-Core Processor and four NVIDIA RTX A6000 GPUs, each with 40GB of memory.

Datasets and modelsMNIST , CIFAR10 and CIFAR100 , and Tiny ImageNet  datasets are used for evaluation. In our experiments, MNIST and CIFAR10 represent small scale tasks, while CIFAR100  and Tiny ImageNet represent large scale tasks. We adopt a (784-4096-4096-10) multilayer perceptron (MLP), AlexNet, VGG16 and ResNet-50 for MNIST, CIFAR10, CIFAR100 and Tiny ImageNet, respectively.

Figure 2: A comparison between Hadamard codes and the codes constructed by Method 2. (a) Geometric structure: the codewords of Hadamard code are orthogonal to each other. In contrast, Method 2 allows one codeword to be located in the opposite direction from another. (b) Correlation matrix: correlation matrix for the codes constructed by Method 2 contain off-diagonal elements, indicating a higher level of correlation compared to that of Hadamard codes. (c) Distance matrix: codewords of Hadamard codes have uniform Hamming distances, whereas Method 2 produces some codeword pairs with larger Hamming distances and others are equivalent to those found in Hadamard codes, where the colors black, grey, and white are values of 8, 4, and 0, respectively.

[MISSING_PAGE_FAIL:8]

[MISSING_PAGE_FAIL:9]