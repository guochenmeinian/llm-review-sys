# SpeechAlign: Aligning Speech Generation to Human Preferences

Dong Zhang, Zhaowei Li, Shimin Li, Xin Zhang, Pengyu Wang,

Yaqian Zhou, Xipeng Qiu

Fudan University

dongzhang22@m.fudan.edu.cn, lizhaowei126@gmail.com

{zhouyaqian,xpqiu}@fudan.edu.cn

###### Abstract

Speech language models have significantly advanced in generating realistic speech, with neural codec language models standing out. However, the integration of preference optimization to align speech outputs to human preferences is often neglected. This paper addresses this gap by first analyzing the distribution gap in codec language models, highlighting how it leads to discrepancies between the training and inference phases, which negatively affects performance. Then we explore leveraging preference optimization to bridge the distribution gap. We introduce SpeechAlign, an iterative self-improvement strategy that aligns speech language models to human preferences. SpeechAlign involves constructing a preference codec dataset contrasting golden codec tokens against synthetic tokens, followed by preference optimization to improve the codec language model. This cycle of improvement is carried out iteratively to steadily convert weak models to strong ones. Through both subjective and objective evaluations, we show that SpeechAlign can bridge the distribution gap and facilitating continuous self-improvement of the speech language model. Moreover, SpeechAlign exhibits robust generalization capabilities and works for smaller models. Demos are available at https://0nutation.github.io/SpeechAlign.github.io/.

## 1 Introduction

Large language models (LLMs) have showcased their potent abilities through techniques such as pretraining, supervised fine-tuning (SFT), and Reinforcement Learning from Human Feedback (RLHF) (OpenAI, 2023; Touvron et al., 2023). The field of speech language modeling has seen significant progress (Wang et al., 2023; Borsos et al., 2022; Zhang et al., 2023a), particularly with the adoption of discrete speech representations (Hsu et al., 2021; Zhang et al., 2023b) like audio codeces (Defossez et al., 2022; Zeghidour et al., 2021; Zhang et al., 2023d). However, current speech language models primarily focus on the SFT stage associated with empowering the LLM's instruction-following capabilities, neglecting the integration of human feedback to align speech outputs to human preferences regarding quality, naturalness, and expressiveness. Fortunately, _preference optimization_ has emerged as a powerful solution for aligning LLM output distribution with human expectation (Stiennon et al., 2022; Bai et al., 2022; Ouyang et al., 2022). The most successful approach, RLHF, achieves this by integrating rewarding modeling and a reinforcement learning phase.

Additionally, some computationally efficient alternatives have proven to be effective in aligning LLM behavior without the need for explicit reward modeling (Rafailov et al., 2023; Zhang et al., 2023c; Wang et al., 2024).

The key to the success of speech language models (Wang et al., 2023; Borsos et al., 2022; Zhang et al., 2023a) that build on LLMs is utilizing audio codecs that discretize the speech representations. Neural Codec Language Models, leveraging audio codecs, have demonstrated their effectiveness in speech generation tasks (Yang et al., 2023; Wang et al., 2023). It primarily utilizes a hierarchical approach that consists of a pipeline of autoregressive (AR) and non-autoregressive (NAR) models, as illustrated in Figure 2 (a). AR model generates semantic tokens (Borsos et al., 2022) or the first layer of codec tokens (Wang et al., 2023), referred to as AR tokens. These AR tokens serve as input for NAR model to generate acoustic tokens (Borsos et al., 2022) or subsequent layers of codec tokens (Wang et al., 2023), termed as NAR tokens. However, this pipeline system introduces a discrepancy between the training and inference phases for the codec language model. In training, NAR model is fed with **golden AR tokens** derived from real speech, but the model receives **synthetic AR tokens** generated by the AR model during inference. As demonstrated in Section 2.3, there is a distribution gap between these two types of AR tokens, which adversely impacts the performance of the NAR model.

**Can we calibrate the output of codec language models to the authentic codec distribution by preference optimization**? Collecting a large, high-quality preference dataset for codec language models is challenging. First, codec tokens are often represented in numerical form, which is not directly understandable by humans, making it impossible to collect human preferences for these tokens directly. Furthermore, collecting human preferences on speech to gather feedback on codec tokens poses multiple challenges, including inconsistency across various human annotators and the difficulty of scaling up the dataset size.

We propose SpeechAlign, an iterative self-improving strategy that aligns speech language models to human preferences. To avoid the need for additional human-annotated data, we construct the pairwise preference codec dataset by considering golden AR tokens as preferred data and synthetic AR tokens as dis-preferred data. Human verification is conducted to ensure its consistency with human preferences. After obtaining the preference dataset, we explore different preference optimization strategies to improve codec language models. Following a complete cycle, we iteratively perform preference dataset collection and preference-aware optimization to convert weak codec language models to stronger ones continually. Experimental results show that SpeechAlign can continually improve the speech generation performance of speech language models. Our contributions are summarized below: 1) We propose SpeechAlign, the first to align speech language models by preference optimization. 2) We propose an iterative self-improving strategy to convert weak codec language models to stronger ones without additional human-annotated data. 3) We analyze the issue of distribution gaps in codec language models and explore various strategies to bridge the gap.

## 2 Preliminary Analysis on Distribution Gap

In this section, we perform preliminary experiments to analysis the distribution gap between golden and synthetic codec tokens and demonstrate that this gap can degrade the performance of the codec language models.

### Background

We build a codec language model, referred to as _SpeechAlign-sft_, serving as the baseline system to analysis the distribution gap. Similar to (Zhang et al., 2024; Budzianowski et al., 2024), we rely on SpeechTokenizer (Zhang et al., 2023d) to extract speech codec tokens. SpeechTokenizer is a Residual Vector Quantization (RVQ)-based speech tokenization method and hierarchically disentangles different aspects of speech information across different RVQ layers. The output of SpeechTokenizer comprises \(Q=8\) hierarchical RVQ tokens \((q_{1},,q_{Q})\). _SpeechAlign-sft_ consists of a SpeechGPT (Zhang et al., 2023a)-based autoregressive (AR) model and a SoundStorm (Borsos et al., 2023)-based non-autoregressive (NAR) model. The AR model learns the mapping from input golden text to the first layer of codec tokens \(q_{1}\). We continue finetuning the pretrained SpeechGPT model in (Zhan et al., 2024) on LibriSpeech dataset to get the AR model. Details about training process as described in Section 4.1. The NAR model adopts the training and inference procedure of SoundStorm (Borsos et al., 2023) and learns to generate subsequent layers of SpeechTokenizertokens conditioning on the first layer tokens and prompt speech. We use the pretrained SoundStorm model in (Zhan et al., 2024). At inference time, the AR model converts input text to **AR tokens** and the NAR model uses these tokens along with prompt speech as conditions to generate **NAR tokens**. These tokens are then concatenated and converted into speech by the SpeechTokenizer decoder.

### Visualization of Distribution Gap

To analysis the distribution gap, we randomly select 1000 speech-text pairs from LibriSpeech dataset and construct a test corpus composed of triplets \(D_{vis}=\{(,},})\}\) following the procedure in Section 3.1. Here \(\) is the input text, \(}\) is the golden AR tokens and \(}\) is the synthetic AR tokens generated by SpeechAlign-sft. The input text \(\) is concatenated with the golden AR tokens \(}\) and fed into the SpeechAlign-sft model. This process yields the hidden states of the last layer for each AR token in the sequence. By applying mean pooling across the temporal dimension, these hidden states are aggregated to produce a single vector representation \(Rep_{g}\) for the golden AR tokens. Similarly, we acquire \(Rep_{s}\) for the synthetic AR tokens using the same procedure. The vectors are visualized in a 2D space using t-SNE, as shown in Figure 1 (a). We can observe that the representations of golden AR tokens and synthetic AR tokens are so dissimilar that they naturally form two distinct clusters, indicating that significant distributional gap exists between them.

### Distribution Gap Degrades Performance

The NAR model is trained using golden AR tokens as input, but during inference, the input switches to synthetic AR tokens. This results in a discrepancy between the training and inference processes due to the existing distribution gap, potentially affecting performance. To delve into this issue, we conduct a speech reconstruction experiment with NAR model. We construct a dataset composed of triplet data \(D_{test}=\{(,},})\}\), with \(}\) and \(}\) described in Section 2.2 and \(\) represents 3-second

prompt speech from the same speaker but distinct from the speech used for \(}\) and \(}\). The NAR model performs speech reconstruction by taking prompt speech combined with either golden AR tokens or synthetic AR tokens as input, to generate speech for each type of tokens respectively. The quality of the generated speech is evaluated based on the word error rate (WER) and speaker similarity (SIM) metrics, compared against the ground truth. As shown in Tabel 1, speech generated from golden AR tokens exhibits superior WER and Speaker Similarity scores compared to that generated from synthetic AR tokens. This finding proves that the distribution gap adversely affects the NAR model's performance.

   Input & WER(\(\)) & SIM(\(\)) \\  Groundtruth & 3.4 & - \\  Golden AR tokens & 5.9 & 0.93 \\ Synthetic AR tokens & 7.2 & 0.87 \\   

Table 1: Results of NAR model’s speech reconstruction performance with different AR tokens as input.

Figure 1: T-SNE visualization of representations of different AR tokens. **Left**: Golden AR tokens and synthetic AR tokens. **Right**: Golden AR tokens and aligned synthetic AR tokens.

## 3 SpeechAlign

We take SpeechAlign-sft detailed in Section 2.1 as the baseline system, referred to as \(p_{_{0}}\). Within this framework, the AR model is represented as \(p_{_{0}}^{ar}\), and the NAR model as \(p_{_{0}}^{nar}\). As shown in Figure 2 (b), the first step of SpeechAlign is to construct preference dataset that contrasts golden codec tokens with synthetic codec tokens. Utilizing this dataset, we implement various preference optimization strategies to align the baseline model. This process is iteratively executed, enabling the continuous self-improvement of codec language models.

### Preference Data Collection

A standard method for collecting preference dataset involves prompting the model to produce two distinct responses to a query, after which annotators are asked to select the one they prefer. However, collecting human preferences for codec data is impractical and unscalable. Instead, we construct the preference codec dataset by contrasting the golden codec tokens against synthetic codec tokens. Concretely, we randomly sample \(N\) speech-text pairs \(P=\{(,)\}_{i=1}^{N}\) from LibriSpeech dataset, where \(=(s_{1},...,s_{|s|})\) is the speech and \(=(x_{1},...,x_{|x|})\) is the corresponding transcript and N is 50000. For each speech \(\), we adopt pretrained SpeechTokenizer to extract discrete representations and denote the tokens of first RVQ layer as golden AR tokens \(}\). For the corresponding transcript \(\), the AR model \(p_{_{0}}^{ar}\) takes it as input to generate synthetic AR tokens \(}\). Following these steps, we can get the preference codec dataset \(D_{pf}=\{(,},})\}_{i=1}^{N}\).

Human VerificationTo validate the quality of constructed preference codec dataset, we perform human verification by randomly sampling 100 entries from \(D_{pf}\) and employing the same procedure outlined in section 2.3 to convert \(y_{g}\) and \(y_{s}\) back into speech. This allows humans to compare them side by side and choose the better speech in terms of both speech quality and voice similarity. From results in Table 2, we can conclude that humans prefer speech reconstructed from golden AR tokens over that from synthetic AR tokens, indicating that the constructed preference codec dataset effectively aligns with human preferences.

### Preference Optimization

In this section, we introduce how we conduct preference optimization to align codec language models using preference codec dataset, including Chain-of-Hindsight (Liu et al., 2023), Direct Preference Optimization (Rafailov et al., 2023), RLHF-PPO (Ouyang et al., 2022) and Best-of-N Sampling.

**Chain-of-Hindsight (CoH)** By converting various forms of feedback into sentences and integrating these with the respective responses, CoH enables models to learn from both positive and negative

   Golden Win & Tie & Golden Lose \\  \(71\%\) & \(21\%\) & \(8\%\) \\   

Table 2: Comparison between reconstructed speech from golden AR tokens versus synthetic AR tokens.

Figure 2: AR LM refers to autoregressive models and NAR LM refers to non-autoregressive models. **Left**: Illustration of inference process of codec language models. **Right**: Illustration of SpeechAlign method.

feedback, allowing the identification and correction of negative attributes or errors. At inference time, the model is guided to generate the desired outputs according to the feedback type in prompt. In our case, we first convert feedback signals into a descriptive template and construct training data by combining responses with corresponding feedback template as follows:

\(}\) = "[Human]: Read this text and give me a high-quality speech response: \(\{\}\) <eoh> [SpeechGPT]: \(\{}\}\) <eoav>."

\(}\) = "[Human]: Read this text and give me a low-quality speech response: \(\{\}\) <eoh> [SpeechGPT]: \(\{}\}\) <eoa>."

The AR model is optimized via the negative log-likelihood loss on preference corpus \(D_{pf}\) as follows:

\[L_{COH}=-_{(x,y_{g},y_{s}) D_{pf}}[ p_{_{0}}^{ar}(y_{g} |x,T_{g})+ p_{_{0}}^{ar}(y_{s}|x,T_{s})]\]

During inference phrase, we prompt the model with positive feedback in the form of 'high-quality' to guide the model in generating favorable outputs.

**Direct Preference Optimization (DPO)** Without using explicit reward modeling or reinforcement learning, DPO can fine-tune the model to align with human preferences. DPO considers the likelihood of preferred response over dispreffered response and optimizes the LLM model towards that objective. The prompt template for DPO training is as follows:

\(\) = "[Human]: Read this text and give me a speech response: \(\{\}\) <eoh> [SpeechGPT]: \(\{\}\) <eoa>."

In our case, the DPO loss can be formated as follows:

\[L_{DPO}=-_{(x,y_{g},y_{s}) D_{pf}}[(^{ar}(y_{g}|x,T)}{p_{ref}^{ar}(y_{g}|x,T)}-^{ar}(y_{ s}|x,T)}{p_{ref}^{ar}(y_{s}|x,T)})]\]

where \(p_{ref}^{ar}\) is the reference model and initialize with \(p_{}^{ar}\).

**RLHF-PPO** RLHF methods involve training a reward model on a dataset reflecting human preferences. RL algorithms are then applied to adjust a language model's policy to favor responses that are highly rewarded, while ensuring minimal deviation from the original model's behavior. With preference dataset \(D_{pf}\), we can parameterize a reward model \(r_{}(x,y)\) and estimate the parameters via maximum likelihood. By treating the task as a binary classification, we utilize the negative log-likelihood loss:

\[L_{rm}=_{(x,y_{g},y_{s}) D_{pf}}[(r_{}(x,y_{g})-r_ {}(x,y_{s})]\]

where \(\) is the logistic function. The reward model \(r_{}(x,y)\) is initialized from AR model \(p_{}^{ar}\) with a linear layer atop the last Transformer layer to yield a single scalar prediction as the reward value. During the RL stage, we optimize the AR model against the reward model using PPO algorithm. Specially, we refine the AR model \(p_{_{0}}^{ar}\) as the following optimization problem:

\[_{p_{_{0}}^{ar}}\ _{x D_{pf},y p_{_{0}}^{ar}(y |x)}[r_{}(x,y)]-\ _{kl}[\ p_{_{0}}^{ar}(y|x)||p_{ref}^{ar}(y|x)\ ]\]

where \(\) represents a coefficient regulating the extent of the KL penalty and \(p_{ref}^{ar}\) is the reference model and initialize with \(p_{}^{ar}\).

**Best-of-N Sampling (BoN)** With the reward model trained on the preference data, we implement a Best-of-N approach to enhance the quality of output codec tokens. Concretely, we sample \(N\) responses using the AR model. These responses are then evaluated by the reward model, and the one receiving the highest reward score is chosen as the final response to serve as input for NAR model.

### Iterative Self-Improvement

Following the aforementioned steps results in an updated AR model, denoted as \(p_{_{i}}^{ar}\). Using this updated model, we can create a new preference codec dataset, \(D_{pf}\). This dataset then serves as the basis for further improvement of the AR model through preference optimization. The iterative self-improvement process of the AR model, as detailed in algorithm 1, enables continuous calibration of the output distribution towards the authentic codec token distribution.

## 4 Experiments

### Setups

**Data** For the continue finetuning stage in Section 2.1, we use the LibriSpeech dataset. To construct the preference codec dataset, we randomly sample 50k speech-text pairs from LibriSpeech training set. During the iterative process of SpeechAlign, we utilize the synthetic data generated in the most recent iteration and combine it with the newly produced synthetic data. As a result, the size of the synthetic dataset increases across iterations: starting at 50k in iteration 0, and expanding to 100k in iterations 1, 2, and 3.

**Model** For the AR model, we further finetune the pretrained SpeechGPT model in (Zhan et al., 2024) on LibriSpeech dataset. For the NAR model, we use the pretrained SoundStorm model in (Zhan et al., 2024).

**Training** For the continue finetuning stage in Section 2.1, the batch size is set to 256, with a learning rate of 1e-5 and train for 3500 steps on 8 A100 80G GPUs. For CoH finetuning, the batch size is set to 32, with a learning rate of 1e-5 and train for 12000 steps on 8 A100 80G GPUs. For DPO finetuning, the batch size is set to 128, with a learning rate of 5e-7 and train for 2000 steps on 8 A100 80G GPUs. For reward model training, the batch size is set to 32, with a learning rate of 1e-5 and train for 1000 steps on 8 A100 80G GPUs. For PPO training, the batch size is set to 16, with a learning rate of 1e-5 and train for 1000 steps on 8 A100 80G GPUs.

### Evaluation and Metrics

We conduct zero-shot TTS evaluation on LibriSpeech test-clean set and VCTK dataset. For each speaker, we randomly selected a 3s utterance as the prompts while the textual content of a different utterance is used as the input text. To reduce the randomness in the evaluation process, we evaluate each model ten times and then calculate the average to obtain the final result. The metrics we adopt are as follows:

**Word Error Rate (WER)** is utilized to assess the content accuracy of synthesized speech by calculating the distance between the synthesized speech's transcription and the input text. We use Whisper medium-en model Radford et al. (2022) to transcribe the synthesized speech.

**Speaker Similarity (SIM)** evaluates the consistency of timbre between the synthesized and the prompt speech. This is measured by the similarity between the speaker embedding of generated speech and that of the speech prompt. The similarity calculation involves the following steps: 1) employing a speaker embedding extractor 3 to derive the speaker embeddings for both the generated and prompt speech, and 2) computing the cosine similarity between these normalized embeddings.

**Human Evaluation** We conduct comparative testing of various models' outputs against the baseline system's speech. The evaluators are provided with prompt speech, the baseline system's speech, and our model's speech. Human evaluators are tasked with determining which utterance sounded more natural and closer to the prompt speech. Evaluators have the option to choose either of the two utterances or indicate that they perceive them as equally natural. We also evaluate the QMOS

[MISSING_PAGE_EMPTY:7]

**Generalization to Unseen Speakers** We also evaluate whether SpeechAlign would bring better speech generation when encountering unseen speaker in the preference data. We evaluate different models' performances on VCTK dataset, which have no speaker overlap with the training dataset. As shown in Table 3, SpeechAlign-RLHF-PPO, SpeechAlign-BoN, and SpeechAlign-DPO can still improves the generated speech across all metrics. We also observe similar improvements in subjective evaluation in Figure 3. And iterative optimization can bring continuous improvement, suggesting that SpeechAlign can be generalized to unseen speakers. We can observe that SpeechAlign-RLHF-PPO outperforms the SpeechAlign-DPO series in both QMOS and SMOS metrics, suggesting that models optimized by RLHF generalize to other domains more effectively than those optimized with DPO.

## 5 Analysis

### Iterative Self-Improvement has a Upperbound

To investigate whether there is a limiting point for iterative self-improvement, we conduct the fourth iteration DPO optimization based on SpeechAlign-DPO-Iter3. As shown in Figure 4, we can observe that iterative DPO optimization can bring continuous improvement until the third iteration. Additionally, the improvements observed in the second and third iterations are significantly greater than those in the first iteration. This might be because the negative samples (synthetic AR tokens) in the first iteration are of lower quality and have a larger gap compared to the positive samples, resulting in less effective preference optimization. As the model's performance improve, the gap between negative and positive samples decreases, making preference optimization more effective. However, in the fourth iteration, the model's performance decreases, possibly because the negative samples are of too high quality and too similar to the positive samples, increasing the difficulty of implicit reward modeling and preference optimization and even reducing the model's performance.

### Ablation Studies

**Preference Data Size** We examine the effect of different training data sizes on the performance of SpeechAlign. We set the preference data size to be 0, 50k and 250k and generate the data accordingly. We make sure that the larger dataset includes the smaller ones. After one epoch of DPO fine-tuning for each of these training sizes, we assess their performance in zero-shot TTS. From Figure 5 (a), we can observe notable improvement across all metrics with increasing training sizes from 0 to 50k, indicating that an increase in preference data can enhance the effectiveness of SpeechAlign. However, employing 250k preference data through DPO does not result in larger performance gains, suggesting that there is a threshold beyond which additional data does not translate into better learning outcomes. This effect suggests that while increasing the size of preference data can initially lead to more effective feedback learning, there comes a point where the quality of data or the model's ability to utilize this data effectively becomes more critical than sheer volume.

**Comparison With Continue SFT** The chosen samples in the preference dataset originate from ground truth AR tokens, therefore, during the preference optimization process, the model undergoes retraining on the data. To investigate whether the improvements from preference optimization or simply from continued training on ground truth data, we conduct experiments on continuing

Figure 4: Zero-shot TTS performance of DPO-optimized models at different iterations on LibriSpeech test-clean.

Supervised Fine-Tuning (SFT) from SpeechAlign-stf for comparison. We utilize the same ground truth AR tokens as those in the preference dataset, with training settings consistent with the DPO training described in Section 4.1. The findings presented in Table 3 and Figure 3 reveal that continuing SFT does not enhance the quality of generated speech; rather, it may actually degrade performance. This indicates that the capability improvements gained from SpeechAlign are attributable to preference-aware learning.

### SpeechAlign Works With Small Models

Current codec language models primarily rely on smaller AR models with fewer than 1 billion parameters (Wang et al., 2023; Borsos et al., 2022). So we investigate whether SpeechAlign can bring improvements for smaller AR models. We utilize an AR model with 130 million parameters that features a 12-layer transformer decoder-only architecture with embedding dimension 768 and 16 heads. We train the AR model on Multilingual LibriSpeech dataset for 500000 steps with batch size 1152 and learning rate 1e-5. We adopt the NAR model in Section 2.1. For DPO training, the preference data size is 50k and we following the training setting in Section 4.1. We evaluate the zero-shot TTS performance on LibriSpeech test-clean dataset. Figure 5 (b) shows that in the first iteration, DPO decreases the WER from 11.4 to 9.3 and boosts Speaker Similarity from 0.87 to 0.88. This indicates that SpeechAlign can notably improve speech generation in smaller models. As the process advances, it's evident that the effectiveness of DPO isn't just limited to initial gains. With subsequent iterations, we observe a consistent upward trend in WER though no more improvement in speaker similarity.

### Preference Optimization Bridges the Distribution Gap

As depicted in Figure 1 (b), after alignment, the representations of golden AR tokens and synthetic AR tokens merge into a single cluster without significant distribution differences. This demonstrates that the distribution gap can be bridged by preference optimization. Along with the results in Table 3 and Figure 3, we observe that as the distribution gap diminishes, the model's capability in speech generation improves. This proves the effectiveness of preference optimization in calibrating model's output distribution. By reducing the inconsistencies between the training and inference phases, the model can more accurately capture the features of the target distribution, resulting in more natural and accurate speech generation.

## 6 Related Work

Neural Codec Language ModelsAudioLM (Borsos et al., 2022) is the pioneering model in introducing codec codes for language modeling, adopting a hierarchical strategy that combines semantic and acoustic modeling. VALL-E (Wang et al., 2023), another innovative neural codec language model, is trained to produce discrete codes based on EnCodec (Defossez et al., 2022), enabling the generation of high-quality, personalized speech from just a 3-second sample of an unseen

Figure 5: **Left**: Performance of SpeechAlign across different preference data sizes. **Right**: Performance of SpeechAlign on small models. Results are evaluated from on LibriSpeech test-clean.

speaker's speech. However, all existing codec language models have been trained through supervised methods. SpeechAlign is the first work enable codec language models to learn from human feedback.

Learning From Human FeedbackLearning from human feedback recently became a critical step in the LLM training such as ChatGPT (OpenAI, 2023) and LLaMA (Touvron et al., 2023). Existing human preference alignment methods for LLM include RLHF (Ouyang et al., 2022; Bai et al., 2022), contrastive learning (Rafailov et al., 2023) and Chain-of-Hindsight (Liu et al., 2023). MusicRL (Cideron et al., 2024) aligns music generation to human preferences by reinforcement learning, Baton (Liao et al., 2024) improves audio generation by learning from human feedback and (Lee et al., 2023) aligns text-to-image models using human feedback. (Liu et al., 2021) proposes to improve emotional text-to-speech via reinforcement learning. However, our work explores using human feedback to align codec language models for speech generation with human preference.

Self-ImprovementSPIN Chen et al. (2024) enables the LLM to self-improve without additional human data or feedback from stronger LLMs by generating its own training data from its previous iterations and refining its policy by discerning these self-generated responses from those obtained from human-annotated data. SPIN-Diffusion Yuan et al. (2024) makes the diffusion model engage in competition with its earlier versions, facilitating an iterative self-improvement process. (Xu et al., 2024) adopts RLHF to improve LLM translation quality by optimizing reward models by distinguishing between human and machine translations. Similarly, our work converts weak speech language models stronger learners through self-improvement iteratively.

## 7 Conclusion

This paper first analyzes the distribution gap existing in current neural codec language models and propose to solve it by preference optimization. To avoid the need for additional human-annotated preference data, construct a preference codec dataset contrasting golden codec tokens against synthetic tokens. Then we conduct preference optimization to align codec language models to human preference. Subjective and objective evaluation results prove the effectiveness of SpeechAlign to continuously converting weak codec language models to stronger ones.

## 8 Limitations and Related Work

**Fine-grained Reward Signals from Real-World Human Preferences** Current preference datasets capture overall preferences, while speech preferences can be multi-faceted, including aspects like sound quality, rhythm, and timbre. Considering human preferences from these various dimensions can enhance speech generation capabilities in a more detailed manner. Additionally, gathering high-quality, real human preference data could be more effective than the current methods of preference dataset collection, as it allows for a nuanced understanding of user preferences that can lead to more targeted and efficient improvements in speech generation technologies.

**Preference Optimization of the NAR Models** In current practices, preference optimization is employed to enhance the capabilities of AR models. Nonetheless, the codec decoder also grapples with inconsistency problems during training and inference, stemming from distribution gaps between golden NAR tokens and synthetic NAR tokens. Therefore, applying preference optimization to calibrate the output distribution of NAR models is worth exploration.

## 9 Acknowledgements

This work was supported by the National Key Research and Development Program of China (No.2022ZD0160102). The computations in this research were performed using the CFFF platform of Fudan University.