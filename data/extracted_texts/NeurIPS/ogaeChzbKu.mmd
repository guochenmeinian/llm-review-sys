# RAW: A Robust and Agile Plug-and-Play Watermark Framework for AI-Generated Images with Provable Guarantees

RAW: A Robust and Agile Plug-and-Play Watermark Framework for AI-Generated Images with Provable Guarantees

 Xun Xian

Department of ECE

University of Minnesota

xian0044@umn.edu

&Ganghua Wang

School of Statistics

University of Minnesota

wang9019@umn.edu

&Xuan Bi

Carlson School of Management

University of Minnesota

xbi@umn.edu

&Jayanth Srinivasa

Cisco Research

jasriniv@cisco.com

&Ashish Kundu

Cisco Research

ashkundu@cisco.com

&Mingyi Hong

Department of ECE

University of Minnesota

mhong@umn.edu

&Jie Ding

School of Statistics

University of Minnesota

dingj@umn.edu

###### Abstract

Safeguarding intellectual property and preventing potential misuse of AI-generated images are of paramount importance. This paper introduces a robust and agile plug-and-play watermark detection framework, referred to as RAW. As a departure from existing encoder-decoder methods, which incorporate fixed binary codes as watermarks within latent representations, our approach introduces learnable watermarks directly into the original image data. Subsequently, we employ a classifier that is jointly trained with the watermark to detect the presence of the watermark. The proposed framework is compatible with various generative architectures and supports on-the-fly watermark injection after training. By incorporating state-of-the-art smoothing techniques, we show that the framework also provides provable guarantees regarding the false positive rate for misclassifying a watermarked image, even in the presence of adversarial attacks targeting watermark removal. Experiments on a diverse range of images generated by state-of-the-art diffusion models demonstrate substantially improved watermark encoding speed and watermark detection performance, under adversarial attacks, while maintaining image quality. Our code is publicly available here.

## 1 Introduction

In recent years, Generative Artificial Intelligence, notably in computer vision, has made significant strides. The adoption of diffusion models (DM) in applications like Stable Diffusion  and DALLE-2  has greatly improved image generation quality. However, these advancements also raise concerns about potential misuse, seen in instances such as DeepFake  and copyright infringement .

To mitigate the potential misuse of diffusion models, the incorporation of watermarks emerges as a promising solution. Watermarked images, tagged with crafted signals, act as markers to identify their machine-generated origin. Watermarking techniques designed for generative models can be generally classified into two categories: model-specific [5; 6; 7; 8] and model-agnostic [9; 10; 11], as outlined in Table 1. Model-specific methods refer to those tailored for particular generative models, often offering a better tradeoff between watermarked image quality and watermark detection performance. However, this characteristic may potentially restrict their applicability across diverse use cases. For instance, the Tree-Ring watermark  is tailored for specific samplers, e.g., DDIM , used for image generation within diffusion models. The feasibility of adapting this method to other commonly used samplers remains open to discussion.

In contrast, model-agnostic approaches directly watermark generated content without modifying the generative models. These approaches can be categorized into two types. The first, from traditional signal processing, e.g., DwTDcTSvd , embeds watermarks in specific parts of images' frequency domains. However, they can be vulnerable to strong image manipulations and adversarial attacks for removing watermarks . The second type employs deep learning techniques, utilizing encoder-decoder structures to embed watermarks, such as binary codes, in latent spaces. For instance, RivaGan  trains the watermark and watermark decoder jointly as learned models, enhancing transmission and robustness. However, these methods demand greater computational resources for watermark injection, limiting real-time on-the-fly deployment. For example, when injecting watermarks into images, the RivaGan requires over \(15\) the time needed by the DwtDct methods .

Additionally, there has been a sustained emphasis on precisely evaluating false-positive rates (FPRs) and/or the Area Under the Receiver Operating Characteristic curve (AUROC) for each utilized watermarking strategy , given the potential economic implications associated with watermark implementation. To establish an explicit theoretical formulation for FPRs, many studies have assumed that the binary watermark code extracted from unwatermarked images exhibits a pattern where each digit is an independent and identically distributed (IID) Bernoulli random variable with equal probabilities. This assumption enables the explicit derivation of the FPRs when comparing the extracted binary code with the predefined actual binary watermark code. However, such an assumption may not hold as empirically observed in , and thus the corresponding formulation for FPRs might be incorrect.

### Contributions

In this paper, we introduce a **R**obust, **A**gile plug-and-play **W**atermark framework, abbreviated as **RAW**. RAW is designed for both adaptability and computational efficiency, providing a model-agnostic approach for real-time, on-the-fly deployment of image watermarking (which can be straightforwardly extended to video watermarking as outlined in Section 4.5). This dedication to adaptability is to ensure the accessibility for third-party users, e.g., artists and generative model providers. Moreover, this adaptability is fortified by the integration of state-of-the-art smoothing techniques for achieving provable guarantees on the FPRs for detection, even under adversarial attacks.

**A new framework for robust and agile plug-and-play image watermark learning** In contrast to encoder-decoder techniques that insert fixed binary watermarks into latent spaces, we propose to embed learnable watermarks, matching the image dimensions, into both the frequency and spatial domains of the original images. To differentiate between watermarked and unwatermarked samples, we utilize a classifier, e.g., a convolutional neural network (CNN), and perform joint training for both the watermarks and the classifier. The proposed framework offers several benefits, including enhanced computational efficiency achieved through batch processing for watermark injection post joint training. For instance, our experimental results demonstrate time efficiency enhancements, approximately \(30\)

   _Method_ & _Model agnostic_ & _On-the-fly deployment_ & _Provable FPRs under adversarial attacks_ \\  DwtDctSvd  & ✓ & ✓ & ✗ \\ RivaGan  & ✓ & ✗ & ✗ \\ StegaStamp  & ✓ & ✗ & ✗ \\ Stable Signature  & ✗ & / & ✗ \\ Tree Ring  & ✗ & / & ✗ \\ RAW (Our method) & ✓ & ✓ & ✓ \\   

Table 1: Summary of features of several representative watermark techniques. The second column denotes the method’s suitability for real-time on-the-fly implementation. _/_ denotes cases where the watermark is embedded during the generative process. The third column evaluates whether the watermarking method provides provable guarantees on false-positive rates (FPRs) under adversarial attacks in a distribution-free manner.

(\(200\)) faster than the frequency-based (encoder-decoder based) method, respectively. Moreover, it can be readily integrated with other state-of-the-art techniques to further enhance robustness and generalizability, such as adversarial training [18; 19], and contrastive learning [20; 21].

**Provable guarantees on FPRs even under adversarial attacks without distributional assumptions** By integrating methods from the conformal prediction literature [22; 23] into our RAW framework, we showcase its ability to offer rigorous, _distribution-free_ assurances regarding the FPRs. Additionally, we develop a novel technique, inspired by the randomized smoothing [24; 25], to further enhance our provable guarantees. This technique ensures _certified_ guarantees on FPRs under arbitrary perturbations, including those adversarial with bounded norms. That is, as long as any transformations on test images stay within a predefined range, our guarantee on FPRs remains valid.

**Extensive empirical studies on various datasets & extension to video watermark** We evaluate the effectiveness of our proposed method across various generative data scenarios, such as the DBDiffusion  and MS-COCO . Additionally, we discuss how to extend the proposed framework for video watermarking and provide empirical results to demonstrate its effectiveness. Our assessment includes detection performance, robustness against image manipulations/attacks, the computational efficiency of watermark injection, and the quality of generated images. Experimental results consistently affirm the excellent performance of our approach, as evidenced by significantly improved watermark encoding speed and notable enhancements in detection performance against state-of-the-art adversarial attacks aimed at removing watermarks.

### Related Work

**Classical watermarking techniques for images** Image watermarking has long been a fundamental problem in both signal processing and computer vision literature [9; 28]. Methods for image-based watermarking typically operate within either the spatial or frequency domains [9; 29]. Within the spatial domain, methodologies span from basic approaches, such as the manipulation of the least significant bit of individual pixels, to more complex strategies like Spread Spectrum Modulation [30; 31]. In the frequency domain, watermark embedding [9; 32] involves modifying coefficients generated by transformations such as the Discrete Cosine Transform .

**Image watermarking using deep learning & Watermark for diffusion models** The advent of advanced deep learning techniques has opened up new avenues for watermarking. Many of these methods [34; 35; 36; 10; 17; 11], are based on the encoder-decoder architecture. In this model, the encoder embeds a binary code into images in latent representations, while the decoder takes an image as input and generates a binary code for comparison with the binary code injected for watermark verification. For example, the HiDDeN technique  involves the simultaneous training of encoder and decoder networks, incorporating noise layers specifically crafted to simulate image perturbations. While these methods improve robustness over traditional watermarking, they might not be suitable for real-time watermark injection due to the lengthy feed-forward process in the encoder, especially with larger architectures. Most recently, there has been a line of work focusing on designing watermarks specifically for diffusion models [5; 8; 37]. These methods benefit from improved robustness due to their model-specific design, but the applicability to other types of models is not yet well established.

**Watermarks for protecting model intellectual property** Deep neural networks represent valuable intellectual assets, given the significant resources invested in their training and data collection processes . For example, training stable diffusion models consumes approximately 150,000 GPU hours, amounting to roughly $600,000 in costs . Given their broad applications in real-world scenarios, ensuring copyright protection and facilitating their identification is crucial in both normal and adversarial contexts [39; 40]. Some approaches embed watermarks directly into model parameters , necessitating white-box access for inspection. Others [42; 43] rely on backdoor attacks [44; 45; 46; 47], injecting triggers into training data to enable targeted predictions during testing. These methods primarily focus on safeguarding model intellectual property rather than the generated outputs.

## 2 Preliminary

**Notations.** We consider the problem of embedding watermarks into images and then detecting the watermarks as a binary classification problem. Let \(=^{C W H}\) be the input space, with \(C\), \(W\), and \(H\) being the channel, width and height of images, respectively. We denote \(=\{0,1\}\) to be the label space, with label 0 indicating unwatermarked and 1 indicating watermarked versions, respectively. For a vector \(v\), we use \(\|v\|\) to denote its \(_{2}\)-norm.

**Threat Model.** We consider the following use scenario of watermarks between a third-party user Alice, e.g., an artist, a generative model provider Bob, e.g., DALLE-2 from OPENAI, and an adversary Cathy. **(1)** Alice selects a diffusion model (DM) from Bob's API interface and sends an input (e.g., a prompt for text-to-image diffusion models) to Bob for generating images. **(2)** Upon receiving Bob generated images \(X\), Alice embeds a watermark into \(X\), denoted as \(X^{}\), and releases it to the public. **(3)** Adversary Cathy applies (adversarial) image transformations(s), e.g., rotating and cropping, on \(X^{}\) to obtain a modified version \(^{}()\). **(4)** Alice decides if \(^{}\) was generated by herself or not.

**Problem Formulation.** From the above, the watermark problem for Alice essentially boils down to a binary classification or hypothesis testing problem:

\[&_{0}:^{};\\ &_{1}:^{}.\]

To address this problem, Alice will build a detector given by

\[g(_{}(X))=1()& _{}(X),\\ 0()&_{}(X)<,\] (1)

where \(\) is a threshold value and \(_{}\) (to be defined later) is a scoring function which takes the image input and output a value in \(\) to indicate its chance of being a sample generated by Alice.

**Alice's Goals.** Alice's objective is to design watermarking algorithms that fulfill the following objectives: **(1) Quality:** the quality of watermarked images should closely match that of the original, unwaternarked images; **(2) Identifiability:** both watermarked and unwaternarked content should be accurately distinguishable; **(3) Robustness:** the watermark should be resilient against various image manipulations.

**Cathy's (Adversary) Goals.** Cathy aims to design attack algorithms to meet the following objectives: **(1) Watermark Removal:** the watermarks embedded by Alice can be effectively eliminated after the attacks; **(2) Quality:** the attacks cannot significantly alter the images.

## 3 Raw

In this section, we formally introduce our RAW framework. At a high level, the RAW framework comprises two consecutive stages: a training stage and an inference stage, as outlined in Figure 2 in Appendix. In the following subsection, we first provide an in-depth description of the training stage.

### Training stage

Suppose Alice obtains a batch of diffusion model-generated images. The unwaternarked data are denoted as \(^{}\{X_{i}\}_{i=1}^{n}\) for \(i=1,,n\). Alice will need to embed watermarks into these images to protect intellectual property.

**Definition 3.1** (Watermarking Module).: A watermarking module \(_{}()\) maps \(\) to itself, with parameters \(^{d_{1}}\).

The watermarking module can take the form of an encoder with an attention mechanism, as seen in the RivaGan , or it can involve Fast Fourier Transformation (FFT) followed by frequency adjustments and an inverse FFT, as employed in DwtDct.

In our RAW framework, we propose to add two distinct watermarks into both frequency and spatial domains:

\[_{}(X)=^{-1}((X)+c_{1} v)+c_{2}  u,\] (2)

where \(v,u\) are two watermarks, \(c_{1},c_{2}>0\) determine the visibility of these watermarks, and \((^{-1})\) represents the Fast Fourier Transformation (FFT) (inverse FFT), respectively. For simplicity of notation, in the rest of this paper, we will denote \([u,v]\). For implementation, we clip the watermarked image \(_{}(X)\) to be within the range \(\), making \(_{}(X)\) a non-linear function of \(X\).

The rationale for adopting the above approach is to simultaneously enjoy the distinct advantages offered by watermarks in both domains. In particular, the incorporation of watermark patternsin the frequency domain has been widely recognized for its effectiveness against certain image manipulations such as translations and resizing. Moreover, our empirical validation corroborates the improved robustness of spatial domain watermarking in the presence of noise perturbations.

We denote the watermarked dataset \(_{}\) to be \(^{}\{_{}(X_{i})\}_{i=1 }^{n}\) for \(i=1,,n\). Alice now wishes to distinguish the combined dataset \(^{}^{}\) with a verification module, which is a binary classifier.

**Definition 3.2** (Verification Module).: A verification module is a mapping \(_{}():\) parameterized by \(^{d_{2}}\).

The score generated by the verification module for an input image can be understood as the chance of this image being generated by Alice.

To fulfill Alice's first two goals, Alice will consider _jointly_ training the watermarking and verification modules parameterized by \(\) and \(\), with the following loss function:

\[()_{X}Y(_{ }(X))+(1-Y)(1-_{}(X)),\] (3)

where \(X\) is the training image and \(Y\{0,1\}\) is the label indicting \(X\) is watermarked or not.

Recall that Alice also aims to enhance the robustness of the watermark algorithms. As a result, we consider transforming the combined datasets with different data augmentations \(_{1},,_{m}\) to obtain \(^{1}_{1}(),,^{m} _{m}()\), respectively. Here, the data augmentations \(_{1},,_{m}\) are defined as follow.

**Definition 3.3** (Modification Module).: An image modification module is a map \(:\).

To sum up, the overall loss function for our RAW framework is specified as:

\[_{}()+_{k=1}^{m} (^{k}),\] (4)

where \(()\) denotes the binary cross entropy loss as specified in Equation (3). The loss function above is composed of two terms: \(()\), which corresponds to the cross-entropy on the original combined datasets \(\), and \(_{k=1}^{m}(^{k})\), signifying the cross-entropy on the augmented datasets \(^{1},,^{m}\). In our experiments, inspired by contrastive learning such as those presented in [20; 21], we adopt a two-view data augmentation approach by setting \(m=2\).

#### 3.1.1 Overall Training Algorithm

We describe the overall training algorithm below. For completeness, we provide the full pseudo-code as summarized in Algorithm 3 in the appendix. We consider conducting the following two steps alternatively.

* Optimize the verification module \(_{}\) based on the overall loss \(_{}\) by stochastic gradient descent (SGD): \[_{t+1}_{t}-_{t}_{}_{}(_{t},),\] where \(_{t}>0\) is the step size at each step \(t\).
* Optimize the watermark \(\) based on \(_{0}\), defined as the first term on the right-hand side of Equation (4), with sign-based stochastic gradient descent (SignSGD): \[_{t+1}_{t}-_{t}(_{}_{0}(,_{t})),\] (5) where \(()\) outputs the sign of each component, and \(_{t}>0\) is the step size.

We provide two remarks on the optimization procedure for the watermark update, as outlined in Eq. (5). First, we choose signSGD over conventional SGD, based on empirical findings suggesting that (sign-based) first-order methods can improve both training and test performance in data-level optimization tasks [19; 48; 49]. In our context, this refers to cases where the optimized variable is the watermark rather than the model parameters. Second, we focus the watermark optimization solely on the first term because the other terms, \((^{k})\) for \(k=1,2,,m\), may contain non-differentiable elements with respect to the watermark. These non-differentiable parts make gradient-based optimization impractical.

### Inference Stage

We present a generic approach for Alice to obtain provable guarantees on the FPRs when using the previously trained \(_{}\) on test images, even amidst adversarial perturbations.

To begin with, we first examine a scenario where the future test data \(X_{}\) adheres to an IID pattern with the watermarked data \(^{}\) generated by Alice, without undergoing any image modifications. In this case, Alice can employ conformal prediction to establish provable guarantees on the FPRs. The main idea is that, by utilizing the trained \(_{}\) as a scoring mechanism, the empirical quantile of the watermarked data's distribution will converge to the population counterpart. This convergence is guaranteed by the uniform convergence of cumulative distribution functions (CDFs). To be more specific, we set the threshold \(\) defined in Equation (1) to be the \(\)-quantile (with finite-sample corrections) of the predicted scores for watermarked data, \(_{}(^{})\{_{} (_{}(X_{i}))\}_{i=1}^{n}\). Following , it can be shown that, with high probability, the probability of the resulting detector \(g\) misclassifying a watermarked image \(X_{}\) is upper-bounded by \(\), given that \(X_{}\) is IID with \(^{}\). For completeness, a rigorous statement and its proof are provided in Appendix A.2.

The above argument assumes that the future test image \(X_{}\) follows an IID pattern with the original watermarked data \(^{}\). However, if the test image \(X_{}\) undergoes manipulation or attack, denoted by \((X_{})\), with \(:\) being an adversarial image manipulation, then it can deviate from the distribution of \(^{}\). This deviation from IID will render the previous argument invalid. Moreover, in practice, Alice is unaware of the adversarial transformation \(\) employed by the attacker, thus making it even more challenging to control the FPRs.

To address this problem, we propose to consider a robust version of the originally trained \(_{}\), denoted as \(}\), such that \(X\) and \((X)\) stay close under \(}\), namely

\[|}(X)-}((X))|,\] (6)

for all \(X\) and a small \(>0\). The reason for finding such \(}\) is because we can relate \(}((X_{}))\) back to \(}(X_{})\) which is IID with \(}(^{})\) (accessible to Alice) to establish the FPRs with previous arguments.

To develop the robust version from the base \(_{}\), we will build upon the following result from the randomized smoothing literature. Denote \((,)\) to be the normal distribution with mean \(\) and covariance \(\) respectively, and \(^{-1}()\) to be the inverse of the cumulative distribution function of a standard normal distribution.

**Lemma 3.4** ().: _Let \(h:\) be a continuous function. Let \(>0\), and \(H(X)=}_{Z(0,^{2}I)}[h(X+Z)]\). Then the function \(^{-1}(H(X))\) is \(^{-1}\)-Lipschitz with respect to \(_{2}\) norm._

The above result suggests that for _any_ (continuous) base verification module (classifier) \(_{}\), we can obtain a smoothed version with

\[}(X)=^{-1}}_{Z (0,^{2}I)}[_{}(X+Z)],\] (7)

and it is guaranteed that \(|}(X)-}(Y)|^{-1}\|X-Y\|\), for any \(X,Y\). Suppose the attacker employs an adversarial attack \(\) such that \(\|X-(X)\|\). We have

\[|}(X)-}((X))|.\] (8)

_Remark 3.5_ (\(\) can not be excessively adversarial).: We emphasize that the transformation \(\) should not be excessively adversarial. In other words, the parameter \(\) should be a very low value for both theoretical and practical reasons. From a theoretical perspective, an overly adversarial transformation \(\) can result in trivial TPRs/FPRs. For instance, if watermarked images are transformed into a completely uniform all-white or all-black state, it becomes impossible to detect the watermark. From a practical standpoint, an excessively adversarial transformation \(\) tends to overwrite the original content within the images. This directly contradicts the intentions of attackers and may not achieve the desired stealthy modifications.

#### 3.2.1 Overall Inference Algorithm

Given a pair of \((_{},_{})\), a desired robust range \(>0\), and a smoothing parameter \(>0\), Alice now will set the thresholding value \(\), as introduced in Equation (1), to satisfy:

\[+=-,\] (9)

where \((0,1)\) is a violation rate describing the probability that the \(\) exceeds \(\), and \(\) is the empirical cumulative distribution function of \(\{}(_{}(X_{i}))\}_{i=1}^{n}\), where

\[}(_{}(X_{i}))}{{=}}^{-1}(0,^{2}I)}{ }|_{}(_{}(X_{i})+Z)|.\]

The next result shows that if a future test input comes from the same distribution as the watermarked data \(^{}\), the above procedure can be configured to achieve any pre-specified false positive rate \(\) with high probability.

**Theorem 3.6** (Certified FPRs of \(g\) based on threshold in Equation (9)).: _Given any watermarked dataset \(^{}\) and its associated verification module \(_{}\), suppose that the test data \(X_{}\) are IID drawn from the distribution of \(^{}\). Given any \((0,1)\), \(>0\) and \(>0\), for any (adversarial) image transformations \(\) such that \(\|(X)-X\|\) for all \(X\), the robust verification module \(\) specified in Eq. (7) and its corresponding hard-label detector \(g()\) introduced in Eq. (1), with the threshold \(\) as specified in Eq. (9) satisfy_

\[g(((X_{})))=0\,()^{},\]

_with probability at lease \(1-\) for any \((0,1)\) such that \(>\)._

Due to space constraints, the proof is provided in Appendix A.1. The above result shows that by using the decision rule as specified in Equation (9), Alice can obtain a provable guarantee on the Type I error rate in terms of detecting future test input \(X_{}\) even \(X_{}\) is adversarially perturbed within \(\)-range (as measured by \(_{2}\)-norm), under the condition that the future test input \(X_{}\) is independently and identically distributed as the \(^{}\), namely watermarked samples generated by the artist. Moreover, the result above only addresses the detector's performance in terms of FPRs and does not account for True Positive Rates (TPRs). To achieve high TPRs, careful selection of \(\) and \(\) is essential. For instance, an excessively large \(\) will cause the smoothed classifier \(}\) to lose its detection capability.

## 4 Experiments

In this section, we conduct a comprehensive evaluation of our proposed RAW, including (1) detection performance, (2) robustness, (3) watermarking speed, (4) the quality of watermarked images, and (5) the provable FPRs guarantees under adversarial attacks. Our findings reveal significantly enhanced robustness in RAW while preserving the quality of generated images. Furthermore, a substantial reduction in watermark injection time, indicates the suitability of RAW for on-the-fly deployment. All the experiments were conducted on machines equipped with Nvidia Tesla A100s.

### Experimental setups

**Datasets (1)** In line with the previous work , we employ Stable Diffusion-v2-1 , an open-source text-to-image diffusion model, with DDIM sampler, to generate images. All the prompts used for image generation are sourced from the MS-COCO dataset . **(2)** We further evaluate our RAW utilizing DBdiffusion , a dataset consisting of 14 million images generated by Stable Diffusion. This dataset encompasses a wide array of images produced under various prompts, samplers, and user-defined hyperparameters. Ablation studies examining various generative models, such as SDXL-1.0, are detailed in Appendix D.

**Verification Modules/Classifiers** In terms of verification modules, for all the results reported in the main text, we utilize ResNet 18 . For training the verification modules, 500 images are randomly selected for training for each dataset. Subsequently, we evaluate the trained watermarks and associated models on 1000 new, unwatermarked images and their watermarked versions. Ablation studies on using different models, such as VGG  as verification modules, and different number of training data are provided in Section 4.4 and Appendix D.

**Watermark Parameters** In Equation (2) of RAW, two parameters \(c_{1}\) and \(c_{2}\) control the invisibility of the watermark, thereby influencing the quality of watermarked images. In the main text results, we set \(c_{1}=c_{2}=0.05\) to align with the image quality of watermarked images produced by other state-of-the-art methods (refer to the 'FID' and 'CLIP' columns in Table 2). We conduct an ablation study exploring different values of \(c_{1}\) and \(c_{2}\) in Section 4.4 and Appendix D. For all other watermarking techniques, we implement them using the open-source package employed by the Official Stable Diffusion Model.

**Evaluation Metrics (1)** To assess the detection performance, we adhere to the convention of reporting the area under the curve of the receiver operating characteristic (AUROC) [17; 5]. **(2)** For evaluating the quality of the watermarked images, we adopt both the Frechet Inception Distance (FID)  and the CLIP score , following the methodology outlined in . Additionally, we also evaluate the quality of watermarked images using metrics such as PSNR and SSIM, and include the results in the appendix. For our watermark scheme, each independent run (including training and testing) corresponds to a unique watermark. All metrics are averaged across 5 independent runs, with a standard deviation of \(0.03\) for all detection performances (AUROC) and \(0.7\) for image quality metrics.

### Main Results

**Detection performance and image generation quality** To ensure a fair comparison, we primarily evaluate our proposed RAW against other model-agnostic approaches, presenting the summarized results in Table 2, along with visual examples illustrated in Appendix D.4. Additionally, for completeness, we compare our proposed RAW against model-specific methods and provide the results in the

   Dataset & Method & Encoding Speed \(\) & N-ROC \(\) & Ad-ROC \(\) & FID \(\) & CLIP \(\) \\   MS-Coco \\ FID: 24.12 \\ CLIP: 0.382 \\  } & DwTDecT & \(0.048\) & \(0.83\) & \(0.54\) & \(25.10\) & \(0.359\) \\  & DwTDcTSvd & \(0.122\) & \(0.98\) & \(0.75\) & \(25.21\) & \(0.361\) \\  & RivaGan & \(1.16\) & \(0.99\) & \(0.81\) & \(24.87\) & \(0.359\) \\  & StegaStamp & \(1.45\) & \(0.99\) & \(0.93\) & \(42.31\) & \(0.291\) \\  & RAW (Ours) & \(\) & \(0.98\) & \(\) & \(24.75\) & \(0.360\) \\   DBdiffusion \\  } & DwTDecT & \(0.048\) & \(0.81\) & \(0.55\) & \(3.12\) & \(0.427\) \\  & DwTDcTSvd & \(0.110\) & \(0.99\) & \(0.78\) & \(10.24\) & \(0.421\) \\  & RivaGan & \(1.87\) & \(0.99\) & \(0.82\) & \(19.75\) & \(0.424\) \\  & StegaStamp & \(1.90\) & \(0.99\) & \(0.92\) & \(40.59\) & \(0.386\) \\  & RAW (Ours) & \(\) & \(0.98\) & \(\) & \(23.48\) & \(0.425\) \\   

Table 2: Summary of main results. ‘N-ROC’ denotes the AUROC performance without image manipulations or adversarial attacks. ‘Ad-ROC’ represents the average performance across nine distinct image manipulations and attacks. The ‘Encoding Speed’ column denotes the efficiency of injecting watermarks into images post-training, measured in seconds (CPU time) per image.

    &  &  \\   & DwDet & DwDetSvd & RivaGan & **Ours** & DwDet & DwDetSvd & RivaGan & **Ours** \\  JPEG \(50\) & \(0.61\) & \(0.99\) & \(0.99\) & \(0.91\) & \(0.50\) & \(0.95\) & \(0.99\) & \(0.99\) \\ Rotation \(90^{}\) & \(0.51\) & \(0.55\) & \(0.39\) & \(0.96\) & \(0.47\) & \(0.54\) & \(0.38\) & \(0.84\) \\ Cropping \(70\%\) & \(0.64\) & \(0.52\) & \(0.99\) & \(0.95\) & \(0.65\) & \(0.61\) & \(0.99\) & \(0.84\) \\ Gaussian Blur & \(0.52\) & \(0.92\) & \(0.99\) & \(0.93\) & \(0.53\) & \(0.99\) & \(0.99\) & \(0.98\) \\ Gaussian Noise & \(0.47\) & \(0.76\) & \(0.99\) & \(0.90\) & \(0.84\) & \(0.99\) & \(0.99\) & \(0.98\) \\ Jittering & \(0.65\) & \(0.78\) & \(0.98\) & \(0.96\) & \(0.47\) & \(0.68\) & \(0.98\) & \(0.99\) \\ VAE Att1 & \(0.50\) & \(0.73\) & \(0.62\) & \(0.89\) & \(0.49\) & \(0.75\) & \(0.67\) & \(0.80\) \\ VAE Att2 & \(0.48\) & \(0.78\) & \(0.67\) & \(0.90\) & \(0.49\) & \(0.73\) & \(0.63\) & \(0.81\) \\ Diff Att & \(0.49\) & \(0.71\) & \(0.69\) & \(0.83\) & \(0.51\) & \(0.73\) & \(0.70\) & \(0.82\) \\ Average & \(0.54\) & \(0.75\) & \(0.82\) & \(\) & \(0.56\) & \(0.78\) & \(0.82\) & \(\) \\   

Table 3: AUROC performance of state-of-the-art methods under \(9\) (adversarial) image manipulations: Rotation \(90^{}\), Cropping and resizing 70%, Gaussian Blur with a kernel size of \((7,9)\) and bandwidth of \(4\), Noise with IID mean Gaussian \(=0.05\), Jitter with brightness factor \(0.6\), JPEG compression with quality \(50\), and \(3\) attacks (VAE Att1, VAE Att2, Diff Att).

appendix. Our RAW exhibits comparable performance to encoder-decoder-based approaches, e.g., RivaGAN, while concurrently achieving similar FID and CLIP scores, which underscores superior image quality compared to alternatives. We report the PSNR and SSIM of the watermarked images in the Table 6 in the appendix. Our method outperforms StegaStamp in PSNR and SSIM but falls behind DwtDctSvd and RivaGAN, as expected. StegaStamp prioritizes robust detection by injecting significant noise, reducing image quality. In contrast, DwtDctSvd and RivaGAN maintain better image quality at the cost of reduced robustness to image perturbations, a point further detailed in the next paragraph.

**Robust detection performance** We assess the robustness of our proposed RAW against six common data augmentations and three adversarial attacks in this subsection. The data augmentation set comprises: color jitter with a brightness factor of \(0.5\), JPEG compression with quality \(50\), rotation by \(90^{}\), addition of Gaussian noise with \(0\) mean and standard deviation \(0.05\), Gaussian blur with a kernel size of \((7,9)\) and bandwidth \(4\), and \(70\%\) random cropping and resizing. For adversarial attacks, we select three state-of-the-art methods for removing watermarks, with two VAE-based attacks Bmshj2018 (VAE Att1) and Cheng2020 (VAE Att2) from CompressAI  with compression factors are set to 3 for both models, and one diffusion-model attack with noise steps of 60 following .

The averaged results are in the 'AUROC (Adv)' column of Table 2 and the detailed results are summarized in Table 3. Our approach demonstrates superior performance compared with alternative methods. Specifically, across both datasets, the average AUROC for our RAW increased by \(70\%\) and \(13\%\) for nine image manipulations/attacks, surpassing frequency- and encoder-decoder-based methods. We note that Stegasatamp demonstrates similar averaged robust detection performance compared to ours. However, this comes at the expense of reduced image quality, as evidenced by markedly increased FID scores and/or lowered SSIM/PSNR scores.

**Watermark injection speed** We investigate the time costs needed to embed watermarks into images. We note that the watermark injection process occurs post-training. Therefore, our watermark injections only necessitate one FFT, two additions, and another inverse FFT. In Table 4, we present CPU time (in seconds) elapsed for injecting watermarks into different image quantities. Notably, our method achieves substantial time efficiency improvements, approximately **30\(\) (200\(\))** faster than the frequency-based (encoder-decoder based) method, respectively. This is attributed to streamlined batch operations in our RAW. This highlights the suitability of our approach for on-the-fly deployment.

### Certified FPRs

We assess the certified FPRs performance of our proposed RAW by varying the FPRs rate \(\) pre-specified by Alice. We set the adversarial radius \(=0.001\) and the smoothing parameter \(=0.05\). We summarize the results of five independent runs in Figure 1(a) and report the mean (with standard error \(<0.002\)). The results show that the FPRs of RAW consistently matches the theoretical upper bounds (i.e., \(\)), supporting the result presented in Theorem 3.6.

### Ablation Studies

**Effect of training sample size on prediction performance** We manipulate the sample size of the watermarked training dataset \(^{}\) to assess its impact on detection performance. These findings are illustrated in Figure 1(b), where we note that satisfactory detection performance can be achieved with a reasonably small training dataset, e.g., \(100\) images.

**Trade-off between robustness and image quality** We explore the trade-off between robustness and image quality by adjusting the watermark strength parameters \(c_{1}\) (\(=c_{2}\)), as illustrated in Figure 1 (c) & (d) below. We note that with increasing values of \(c_{1}\) and \(c_{2}\), the average AUROC, under 9 (adversarial) images manipulations, also increases, while the image quality only exhibits a slight

  Batch Size \(\) & 5 images & 100 images & 500 images \\  DwtDct & \(0.27\) & \(4.8\) & \(24.5\) \\ DwtDctSvd & \(0.64\) & \(12.2\) & \(60.1\) \\ RivaGAN & \(5.52\) & \(116\) & \(>500\) \\ StegaStamp & \(7.34\) & \(134\) & \(>500\) \\ RAW (Ours) & \(0.35\) & \(0.51\) & \(0.76\) \\  

Table 4: CPU time (seconds) elapsed for injecting watermarks into images. **Lower** values are preferred.

degradation, as indicated by the slightly increased FID value. These findings also highlight the stability of the watermark hyperparameters \(c_{1}\) and \(c_{2}\) in our proposed RAW, a desirable characteristic for real-world deployments, as preferred by practitioners.

### Extension to Video Watermark

We discuss how to extend the proposed watermark framework from AI generated images to videos. The main idea is to embed the same pre-trained watermark either in every frame or at intervals, such as every three frames, of the video. The corresponding verification module, i.e., the watermark classifier, is then used to detect the watermark in each frame where it was embedded. The overall presence of the watermark in the video is determined by the detection results from these frames.

We evaluate the pre-trained (on the MS-COCO dataset) watermark and its corresponding classifier using short videos created by the stable-video-diffusion-img2vid-xt model, which generates videos from images. The images used to produce the videos are sourced from the DiffusionDB dataset. This guarantees that the testing videos were not exposed to either the watermark or the classifier during the training process. The results are summarized in Table 5 below, where we observed that our proposed method achieves a similar detection rate compared to RivaGan, while providing a significantly faster watermark encoding speed (\( 60\) times faster).

## 5 Conclusion

In this study, we introduce the RAW framework as a versatile watermarking approach essential for protecting intellectual property and mitigating potential misuse of AI-generated images. The proposed RAW framework offers several notable features, including significantly enhanced watermark encoding speed and/or detection performance, along with the assurance of provable guarantees on false positive rates even under adversarial perturbations in test images. Experimental findings across various datasets validate its advantages.

**Limitation & Future Work** One potential limitation of the proposed method is that when applied to large-scale systems with millions of users, the associated training loss will be high. One interesting direction is to study how to efficiently fine-tune from one pair of watermark and its corresponding verification module to a new pair. Other directions include investigating the maximum number of concurrent watermarks learnable in a single training session and optimal smoothing strategies for wider certified radii.

**Broader Impact** This paper aims to contribute to the advancement of trustworthy machine learning, particularly in ensuring the safe and legitimate use of contemporary generative artificial intelligence. Our efforts could have several positive societal implications, such as protecting intellectual property and preventing potential misuse of AI-generated images.

The **Appendix** contains proofs, experimental details, and ablation studies.

Figure 1: (a) FPRs of our proposed RAW. (b) Impact of training sample size on detection performance. (c) & (d) The tradeoff between the quality of watermarked images, assessed using FID (lower values are preferable), and the detection robustness.

   Method & Video Resolution & Number of Frames & Time Elapsed & AUROC \\ 
**RAW (Ours)** & \(512 512\) & 24 & **0.2 - 0.5s** & 0.96 \\  RivaGan & \(512 512\) & 24 & 8 - 12s & 0.97 \\   

Table 5: Encoding Speed (CPU Only) and AUROC (over fresh 500 test samples) for video watermark with the proposed RAW