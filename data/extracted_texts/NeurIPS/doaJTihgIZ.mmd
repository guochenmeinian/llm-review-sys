# Dynamics of Supervised and Reinforcement Learning in the Non-Linear Perceptron

Christian Schmid

Institute of Neuroscience

University of Oregon

cschmid9@uoregon.edu

&James M. Murray

Institute of Neuroscience

University of Oregon

jmurray9@uoregon.edu

###### Abstract

The ability of a brain or a neural network to efficiently learn depends crucially on both the task structure and the learning rule. Previous works have analyzed the dynamical equations describing learning in the relatively simplified context of the perceptron under assumptions of a student-teacher framework or a linearized output. While these assumptions have facilitated theoretical understanding, they have precluded a detailed understanding of the roles of the nonlinearity and input-data distribution in determining the learning dynamics, limiting the applicability of the theories to real biological or artificial neural networks. Here, we use a stochastic-process approach to derive flow equations describing learning, applying this framework to the case of a nonlinear perceptron performing binary classification. We characterize the effects of the learning rule (supervised or reinforcement learning, SL/RL) and input-data distribution on the perceptron's learning curve and the forgetting curve as subsequent tasks are learned. In particular, we find that the input-data noise differently affects the learning speed under SL vs. RL, as well as determines how quickly learning of a task is overwritten by subsequent learning. Additionally, we verify our approach with real data using the MNIST dataset. This approach points a way toward analyzing learning dynamics for more-complex circuit architectures.

## Introduction

Learning, which is typically implemented in both biological and artificial neural networks with iterative update rules that are noisy due to the noisiness of input data and possibly of the update rule itself, is characterized by stochastic dynamics. Understanding these dynamics and how they are affected by task structure, learning rule, and neural-circuit architecture is an important goal for designing efficient artificial neural networks (ANNs), as well as for gaining insight into the means by which the brain's neural circuits implement learning.

As a step toward developing a full mathematical characterization of the dynamics of learning for multilayer ANNs solving complex tasks, recent work has made progress by making simplifying assumptions about the task structure and/or neural-circuit architecture. One fruitful approach has been to study learning dynamics in what is perhaps the simplest non-trivial ANN architecture: the individual perceptron. Even with this simplification, however, fully characterizing the mathematics of learning has been challenging for complex tasks, and further simplifications have been required.

One approach has been to analyze learning in the student-teacher framework (Gardner and Derrida, 1989; Seung et al., 1992), in which a student perceptron learns to produce an input-to-output mapping that approximates that of a teacher perceptron. This has led to insights about the differences in learning dynamics between different types of learning rules (_e.g._, supervised and reinforcement learning) (Werfel et al., 2003; Zuge et al., 2023; Patel et al., 2023). Such insights are highly relevant for neuroscience, where a longstanding goal has been to infer the learning mechanisms that are used in the brain (Lim et al., 2015; Nayebi et al., 2020; Portes et al., 2022; Humphreys et al., 2022; Mehta et al., 2023; Payeur et al., 2023). However, by construction, the student-teacher setup in the perceptron only applies to input-output mappings that are linearly separable, which is seldom the case in practice. Another approach has been to study learning dynamics in the linearized perceptron (Werfel et al., 2003; Mignacco et al., 2020; Bordelon and Pehlevan, 2022), which enables exact solutions even for structured input data distributions that are not linearly separable. However, the dynamics of learning in nonlinear neural networks--even very simple ones--performing classification tasks are not fully understood. Further, whether and how the dynamics of learning might differ under different learning rules in such settings has not been investigated.

Here, we take a stochastic-process approach (similar to Yaida (2018) and Murray and Escola (2020)) to derive flow equations describing learning in the finite-dimensional nonlinear perceptron trained in a binary classification task (Fig. 1). These results are compared for two different online learning rules: supervised learning (SL, which corresponds to logistic regression) and reinforcement learning (RL). We characterize the effects of the input-data distribution on the learning curve, finding that, for SL but not for RL, noise along the coding direction slows down learning, while noise orthogonal to the coding direction speeds up learning. In addition, we verify our approach by training a nonlinear perceptron on the MNIST dataset. Finally, applying the approach to continual learning, we quantify how the input noise and learning rule affect the rate at which old classifications are forgotten as new ones are learned. Together, these results establish the validity of the approach in a simplified context and provide a path toward analyzing learning dynamics for more-complex tasks and architectures.

### Stochastic-process approach for describing weight evolution

We consider a general iterative update rule of the form

\[w_{i}^{t+ t}-w_{i}^{t}= f_{i}(^{t}),\] (1)

where \(^{t}^{n}\) for arbitrary \(n>0\), and \(\) is the learning rate. The stochastic update term \(f_{i}\) on the right-hand side is drawn from a probability distribution--it depends on the weights themselves, as well as the input to the network and, potentially, output noise. Starting from this update equation, our goal is to derive an expression characterizing the evolution of the probability distribution of the weights, \(p(,t)\) (cf. Fig. 1C). We assume that \(f_{i}()\) does not explicitly depend on \(\), and that all the moments \( f_{i}^{k}_{L}\), \(k=1,2,\), where \(_{L}\) denotes an average over the noise in the update equation (1) (including the input distribution as well as, potentially, output noise), exist as smooth functions of \(\).

Figure 1: Learning dynamics in the nonlinear perceptron. **A:** The perceptron, parametrized by weights \(\), maps an input \(\) to the output \(\). **B:** The inputs are drawn from two multivariate normal distributions with labels \(y= 1\). The weight vector \(\) is orthogonal to the classification boundary. **C:** Due to the stochasticity inherent in the update equations, the weights are described by the flow of a probability distribution in weight space.

Given the stochastic process defined by (1), the probability distribution at time \(t+ t\) given the distribution at time \(t\) is

\[p(,t+ t)= d^{}p(,t+  t|^{},t)p(^{},t).\] (2)

Denoting the weight update as \(:=-^{}\), the integrand in this equation can be written as

\[p(,t+ t|^{},t)p(^{ },t)=p(+-,t+ t|-,t)p(-,t).\] (3)

Changing the integration variable to \(\) and performing a Taylor expansion in \(\), the right-hand side of (2) yields

\[& d^{}p( ,t+ t|^{},t)p(^{},t)=\\ & p(,t)-_{i}}[ _{i}()p(,t)]+_{ij}}{ w_{i} w_{j}}[_{ij}()p( ,t)]+O(^{3}),\] (4)

where

\[_{i}()= d w_{i}p( +,t+ t|,t)\] (5)

and

\[_{ij}()= d w_{i} w _{j}p(+,t+ t|,t).\] (6)

Here, we assumed that the probability distribution describing the weight updates \(f\) has bounded derivatives with respect to \(\).

Although (2) is only defined for discrete time steps, we assume a continuous probability density \(p(,t)\) interpolates between the updates and exists as a smooth function for all values of \(t\). We can then expand the left-hand side of (2) to obtain

\[p(,t+ t)=p(,t)+ t { t}p(,t)+O( t^{2}).\] (7)

For the iterative update rules that we will consider, we have \(\), where \(\) is a learning rate. In order to take a continuous-time limit, we let \(:= t\) and take the limit \( t 0\). For the general learning rule (1), the coefficients in (4) have the form

\[_{i}()= f_{i}_{L},_{ij}( )= f_{i}f_{j}_{L},\] (8)

where \(_{L}\) denotes an average over the noise in the update equation (1) (including the input distribution as well as, potentially, output noise). Thus, we find

\[(,t)= -_{i}}(p(,t ) f_{i}_{L})+(^{2}).\] (9)

Finding the \(p(,t)\) that solves this equation cannot in general be done exactly when \(f_{i}\) is nonlinear. However, by multiplying (9) with powers of \(\) and integrating, as well as expanding in \(-\), where \(\) denotes the average with respect to \(p(,t)\), we can derive a system of equations for the moments of \(p(,t)\)[Risken, 1996]. As we derive in the appendix, this gives the following expressions for the first two moments up to \(((-)^{3})\):

\[ w_{i} =(1+_{k,l}(w_{k},w_{l}) _{k}_{l}) f_{i}_{L}(),\] (10) \[(w_{i},w_{j}) =_{k}[(w_{i},w_{k})_{k} f_{j} _{L}()+(w_{j},w_{k})_{k}  f_{i}_{L}()].\] (11)

Together, these equations characterize the flow of \(p(,t)\) for a general iterative learning algorithm in a general ANN architecture.

### Learning dynamics in the nonlinear perceptron

While the above approach is general and could be applied to any iterative learning algorithm for any ANN architecture, for the remainder of this work we will focus on its application to the nonlinear perceptron (Fig. 1A), a one-layer neural network that receives an input \(^{N}\), multiplies it with a weight vector \(^{N}\), and produces an output \(\). The task we study is a binary Gaussian classification task, in which the model is presented with samples \(\) drawn from two distributions \(p(|y)\) with labels \(y= 1\), where \(p(y= 1)=\). Each \(p(|y)\) is given by a multivariate normal distribution with \((^{y},^{y})\) (Fig. 1B). We analyze both the case of SL with deterministic output, for which \(=()\), as well as RL, for which the stochastic output is given by \((= 1)=()\), where \(\) is the logistic sigmoid function. The goal of the model is to output a label \(\) that closely matches the ground truth \(y\) when given an input \(\).

#### Derivation of the flow equations

The supervised learning rule we consider is regularized stochastic gradient descent for a binary cross-entropy loss, which results in the weight update rule

\[f()_{i}=(-)x_{i}- w_{i},\] (12)

where \(=(y+1)\{0,1\}\) is the shifted input label, and \(\) is the regularization hyperparameter. This learning rule describes online logistic regression.

For reinforcement learning, we use the REINFORCE policy-gradient rule with reward baseline (Williams, 1992; Sutton and Barto, 2018):

\[f()_{i}=(-)x_{i}-  w_{i}.\] (13)

Here \(=y- y\) is the reward prediction error, and \(\) is the stochastic output of the perceptron with probability \((= 1)=()\). To facilitate mathematical feasibility, we replace the perceptron activation function by a shifted error function \((z)=(1+(}{4}z))\).

We first derive the learning dynamics for stochastic gradient descent. We assume that the initial condition is uniquely specified, with \(p(,0)=(-^{0})\). In this case, the weight covariance will

Figure 2: Learning dynamics in a perceptron classification task. **A, B**: Flow fields determining the weight dynamics with trajectories for different initial conditions for SL (A) and RL (B). **C, D**: Learning dynamics from simulations closely follow the analytical results for SL (C) and RL (D). **E:** Dependence of the asymptotic weight norm on the regularization parameter \(\).

be zero, and the flow equations (10) simply reduce to

\[ w_{i}= f_{i}_{L}_{= }.\] (14)

To make the formulas more concise, we set \(=0\). It can be reintroduced by simply adding the term \(-\). We then get

\[& f_{i}_{L}()=(- ())x_{i}_{,y}\\ &=(1-())x_{i} _{(^{+},^{+ })}-()x_{i}_{ (^{-},^{-})}\\ &=_{i}^{+}(1-(}{^{2}}}))-}^{+}})_{i}}{^{2}}}e^{-^ {2}}{2(1+b_{+}^{2})}}\\ &-_{i}^{-}(}{^{2}}})-}^{-} })_{i}}{^{2}}}e^{-^{2}}{2(1+b_{ -}^{2})}}.\] (15)

Here, \((z)=(1+(z/))=(z )\) is the cumulative distribution function of the standard normal distribution. To simplify notation, we have introduced \(}=\), as well as the quantities

\[a_{y} =^{y}},\] (16) \[b_{y} =}^{T}^{y}}}.\] (17)

To aid interpretation of these results, we assume that \(^{}=\) and \(=^{2}\). Then (15) implies

\[=||^{ 2}(1-(}}{|}|^{2}}}))-}}}{|}|^{2}}}e^{-})^{2}}{2(1 +^{2}|}|^{2})}}_{=}\] (18)

as well as

\[||^{2} =2(1-(}}{||^{2}}} ))-||^{2}}{||^{2}}}e^{-})^{2}} {2(1+^{2}|}|^{2})}}_{=}\] (19)

An interpretation of (18) is that the first term pushes the weight vector in the decoding direction, while the second term acts as a regularization, whereby the cross-entropy loss penalizes misclassifications more as \(\) increases. An increase in the input noise leads to a higher overlap of the distributions, which means that even the Bayes-optimal classifier will make more mistakes.

For RL, we need to calculate

\[& f_{i}_{L}()= (-)x_{i})_{,y,}\\ &=(-)( )x_{i}_{(^{+}, ^{+})}-(-)()x_{i}_{(^{-}, ^{-})}\\ &=^{+}})_{i}}{ ^{2}}}e^{-^{2}}{2(1+b_{+}^{2})}}(1-2 (}{^{2}}^{2}}}))+2 _{i}^{+}T(}{^{2}}},^{2} }})\\ &-^{-}})_{i}}{ ^{2}}}e^{-^{2}}{2(1+b_{-}^{2})}}(1-2 (}{^{2}}^{2}}}))-2 _{i}^{-}T(}{^{2}}},^{2} }}).\] (20)

Here, \(T(,)\) is Owen's T function:

\[T(h,a)=_{0}^{a}h^{2}(1+x^{2})}}{1+x^{2}}dx.\] (21)

As for supervised learning, we can simplify this expression for isotropic distributions with means \(\) and get

\[ =&||^{2}4T( }}{|}|^{2}}},|}|^{2}}})\\ &-} }}{|}|^{and

\[||^{2}=& 8T(}}{|}|^{2}}},|}|^{2}}})\\ &-||^{2}}{|}|^{2}}}e^{-} )^{2}}{2(1+^{2}|}|^{2})}}(}}{|} |^{2}}|}|^{2}}})_{ =}.\] (23)

As we show in the appendix, and as demonstrated in Fig. 2, the flow equations for both SL and RL have a unique, globally stable fixed point whenever \(>0\) or the input noise \(>0\) (Fig. 2A,B). The solutions of (15) and (20) exhibit agreement with learning curves obtained by direct simulation of (1) (Fig. 2C,D), where the small remaining discrepancy arises from the fact that, for the simulation, we used a standard logistic sigmoid function instead of the error function sigmoid curve used for the analytical calculations. We also see that the asymptotic weight norm decreases approximately linearly with \(\) (Fig. 2E). Of particular note is the observation that, perhaps counter-intuitively, higher levels of noise appear to lead to _faster_ learning for SL, though the effect is more ambiguous in the case of RL. This will be analyzed in more detail in the following section.

#### Impact of noise on learning time

We next investigate the effect of different types of input noise on the dynamics of learning and whether differences arise for the supervised and reinforcement algorithms. We begin with the case of isotropic input noise, with \(=^{2}\) and means \(\) with \(||=1\). In this case, the optimal alignment \(}{||}\) of 1 is always reached asymptotically, so we focus on how quickly this value is approached as a function of the input noise.

In the case of SL, analytically analyzing the logarithmic derivative of the alignment between \(\) and \(\) yields a flow equation of the form

\[}{| |}=g_{}(,)+^{2}h_{ }(,)^{2}+(^{4}),\] (24)

where \(g_{}\) and \(h_{}\) do not depend on \(\). Thus, the higher the input noise, the faster the task is learned. The analogous relationship for RL is indeterminate, such that input noise may either speed up or slow down learning in this case, depending on the parameters. As is illustrated in Fig. 3A, numerical integration of the flow equations reveals qualitatively distinct trends for the dependence of learning speed on noise.

#### Anisotropic input distributions

To analyze the case of anisotropic input noise, we divide the total noise into two components: a component \(_{}^{2}=1+\) in the direction of \(\) and the noise \(_{}^{2}=1-\) orthogonal to it, while keeping

Figure 3: Relationship between input noise and time to learn the task. **A:** The time required for the alignment \(/||\) to reach 80% depends on the noise \(\) of the isotropic input distributions. **B:** To characterize anisotropic input noise, the total input variance is split into a noise component \(_{}^{2}\) parallel to and a component \(_{}^{2}\) orthogonal to the decoding direction. **C:** Shifting the input noise into the decoding direction slows down learning.

the total noise \(_{}^{2}+_{}^{2}\) fixed (Fig. 3B). For both SL and RL, we find that learning slows down when the noise is shifted to the decoding direction and speeds up when it is shifted to orthogonal directions (Fig. 3C). To confirm this analysis analytically, we calculate the logarithmic derivative of the alignment between \(\) and \(\) and find

\[}{||}=g_{}(,)+ h_{}(,)^{2}+(^{2}),\] (25)

where \(g_{}\) and \(h_{}\) are independent of \(\). From this expression, we see that, at least to leading order in \(\), noise anisotropy orthogonal to the decoding direction tends to increase the speed of learning, while anisotropy along the decoding direction tends to decrease the speed of learning. This is in apparent contrast to a recent study in two-layer networks, where input variance along the task-relevant dimension was found to _increase_ the speed of learning (Saxe et al., 2019). The reason for these seemingly opposite results is because, in the the task studied in that work, variance along the coding direction is a signal that facilitates learning, while, in our case of binary classification, variance along the coding direction is noise that impairs learning.

#### Input noise covariance

So far, we have assumed that the initial weight distribution, which can be thought of as characterizing an ensemble of networks with different initializations, is specified deterministically, _i.e._\(p(,0)=(-^{0})\). In this case, according to (11), the covariance of \(\) will remain zero at later times. If training is instead initiated with a distribution \(p(,0)\) having nonzero covariance, then we can ask how this covariance evolves with training--in particular, whether the covariance of this distribution diverges, converges to 0, or approaches a finite value as \(t\).

This calculation can be easily performed in the limit \( 0\) where the inputs are just \(x=\). Then (15) simply becomes

\[ f_{i}_{L}()=_{i}(1-())- w_{i},\] (26)

and (11) implies that

\[(())=-)^{2}/16}}{4}^{T}()-2(()).\] (27)

Since \(()\) is positive semidefinite, both terms on the right-hand side of (27) are always nonpositive for \(>0\) and lead to exponential decay of \((())\), so the eigenvalues of \(()\) approach zero. Thus, the covariance of the distribution \(p(,t)\) vanishes as \(t\) (Fig. 4A).

The same calculation can be performed for the RL algorithm, again with the result that \((()) 0\) as \(t\) whenever \(>0\) (Fig. 4B). As can be seen in Fig. 4, the total variance continues to decay to zero upon including input noise (in the \( 0\) limit we are working in), with the decay speeding up as the noise is increased.

#### Application to real tasks

In order to test whether the theoretical equations derived above apply to realistic input data, we next train a perceptron with stochastic gradient descent to perform binary classification with cross

Figure 4: Dynamics of the total variance of \(\) for isotropic input noise. Higher noise leads to a faster decay in \((())\) for supervised learning (**A**) and for reinforcement learning (**B**).

entropy loss on the MNIST dataset (Fig. 5A). To obtain suitable input representations, the images corresponding to the digits \(0\) and \(1\) are first convolved with a set of 1440 Gabor filters (Haghighat et al., 2015). (In the appendix, we perform the same analysis on the raw MNIST data without the Gabor convolution and obtain similar results.) We then model these two input classes as multivariate Gaussians with covariances \(_{0,1}\) and means \(_{0,1}\) (or \(\) after a translation). The evolution of the weight vector during training is found by numerically integrating (15). To quantify the test accuracy during training, an approximation of the expected error at each time step is derived by integrating the Gaussian approximations to the two input distributions up to the hyperplane orthogonal to the weight vector. As can be seen in Fig. 5B, this theoretically derived learning curve closely matches the actual generalization performance of the trained classifier on the hold-out set.

To further illustrate that the flow equations capture non-trivial aspects of the learning dynamics, Fig. 5C shows the alignment of \(\) with \(\), which continues to evolve after the task has been learned. The close alignment of the experimental results with the analytical predictions shows that the flow equations can capture learning dynamics in a realistic task with input data distributions that are not necessarily Gaussian.

#### Continual learning

In addition to describing the dynamics of learning a single task, the flow equations derived above can also describe the learning and forgetting of multiple tasks. In continual learning, natural and artificial agents struggle with catastrophic forgetting, which causes older learning to be lost as it is overwritten with newer learning (Hadsell et al., 2020; Kudithipudi et al., 2022; Flesch et al., 2023). Here, we ask how the number of tasks that can be remembered by the perceptron depends on the level of noise and the learning algorithm. The weights are first trained on Task 0, with input distribution defined by \(=_{0}\) and \(=^{2}\), until the alignment of \(\) with \(_{0}\) has reached 80%. We then train on subsequent tasks \(=_{1},_{2},\). This yields a forgetting curve that decays exponentially

Figure 5: Comparison of the theory with training on MNIST. **A:** A nonlinear perceptron is trained to classify the digits 0 and 1 in the MNIST dataset. **B:** Comparison of the empirical test classification accuracy with the theoretical prediction. **C:** Even after the task has been learned, the theory accurately captures non-trivial ongoing learning dynamics.

Figure 6: Forgetting curves. **A**: Learning curves for multi-task learning, where \(\) are trained on Task 1 (\(=_{1}\)) after training to 80% on Task 0 (\(=_{0}\)). **B**: The alignment of \(\) with \(_{0}\) after training on additional tasks 1, \(\), 9.

with the number of tasks, as shown in the simulation results in Fig. 6. The decay constant does not significantly depend on the learning algorithm being used, but we observe that a higher input noise leads to faster forgetting. Together with the results in the preceding subsections, this hints toward a trade-off between the learning speed and forgetting of previously learned tasks as the amount of input noise is varied.

## Discussion

In this work, we have used a stochastic-process framework to derive the dynamical equations describing learning in the nonlinear perceptron performing binary classification. We have quantified how the input noise and learning rule affect the speed of learning and forgetting, in particular finding that greater input noise leads to faster learning for SL but not for RL. Finally, we have verified that our approach captures learning dynamics in an MNIST task that has a more-complex input data distribution. Together, the results characterize ways in which task structure, learning rule, and neural-circuit architecture significantly impact learning dynamics and forgetting rates.

One limitation of our approach is the assumption that the input distributions are multivariate Gaussians, which may not be the case for real datasets. While the agreement between the theoretical and empirical results applied to the MNIST data in Fig. 5 is encouraging in this regard, there may be greater discrepancies in cases where the input distributions are more complex. Indeed, recent work on the nonlinear perceptron has shown that, while the first- and second-order cumulants of the input distribution are learned early in training, later stages of training involve learning beyond-second-order (i.e. non-Gaussian) statistical structure in the input data [Refinetti et al., 2023], suggesting that our theory's ability to describe late-stage training in complex datasets may be somewhat limited. Another limitation is the choice to neglect higher-order terms in \(-\) (Equations (10), (11)) and \(\) (Equation (9)). This may limit the ability to characterize instabilities and noise effects induced by non-infinitesimal learning rates. Future work will be needed to assess these effects.

While other work has approached SGD learning in neural networks within a stochastic-process framework, most of these works have not derived the noise statistics from the noisy update rule (as done here and in Yaida (2018) and Murray and Escola (2020)), but rather have added Gaussian noise to the mean update (_e.g._(He et al., 2019; Li et al., 2019, 2021)). While the results for the flow of the weights' mean \((t)\) are the same under both approaches, the approach that we take enables us to additionally derive the flow of the weight covariance. Further, it allows for the possibility of describing effects arising from finite learning rate by including higher-order terms in \(\) from the expansion of (4)--a topic that we will address in an upcoming publication.

In our results on continual learning, we found that only a few tasks could be remembered by the perceptron before being overwritten. This is perhaps somewhat surprising given recent work [Murray and Escola, 2020] showing that the binary perceptron can recall \(O(N)\) individual random patterns in a continual-learning setup. This difference may arise in part from the fact that that work used a more efficient, margin-based supervised learning rule [Crammer et al., 2006] rather than the stochastic gradient descent rule used here, as well as the fact that input noise and weight regularization were not included. This difference suggests that there is likely room for significant improvements in continual-learning performance with the setup studied here. This would be another interesting direction for future work, given that recent work has found that nonlinearity can drastically increase the amount of catastrophic forgetting in continual learning [Domine et al., 2023].

Finally, we speculate that qualitative differences between learning rules such as that shown in Fig. 3 may provide a path for designing experiments to distinguish between learning rules implemented in the brain. More work will be needed, however, to formulate testable experimental predictions for more-realistic learning rules and network architectures. More generally, the approach developed here paves the way for analyzing numerous questions about learning dynamics in more-complex circuit architectures and diverse task structures.