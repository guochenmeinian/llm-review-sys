# Learning-Augmented Algorithms

for the Bahncard Problem

Hailiang Zhao\({}^{1}\) Xueyan Tang\({}^{2}\) Peng Chen\({}^{1}\) Shuiguang Deng\({}^{1}\)

\({}^{1}\)Zhejiang University \({}^{2}\)Nanyang Technological University

{hliangzhao,pgchen,dengsg}@zju.edu.cn asxytang@ntu.edu.sg

###### Abstract

In this paper, we study learning-augmented algorithms for the Bahncard problem. The Bahncard problem is a generalization of the ski-rental problem, where a traveler needs to irrevocably and repeatedly decide between a cheap short-term solution and an expensive long-term one with an unknown future. Even though the problem is canonical, only a primal-dual-based learning-augmented algorithm was explicitly designed for it. We develop a new learning-augmented algorithm, named PFSUM, that incorporates both history and short-term future to improve online decision making. We derive the competitive ratio of PFSUM as a function of the prediction error and conduct extensive experiments to show that PFSUM outperforms the primal-dual-based algorithm.

## 1 Introduction

The Bahncard is a railway pass of the German railway company, which provides a discount on all train tickets for a fixed time period of pass validity. When a travel request arises, a traveler can buy the train ticket with the regular price, or purchase a Bahncard first and get entitled to a discount on all train tickets within its valid time. The Bahncard problem is an _online_ cost minimization problem, whose objective is to minimize the overall cost of pass and ticket purchases, without knowledge of future travel requests . It reveals a _recurring_ renting-or-buying phenomenon, where an online algorithm needs to irrevocably and repeatedly decide between a cheap short-term solution and an expensive long-term one with an unknown future. The performance of an online algorithm is typically measured by the _competitive ratio_, which is the worst-case ratio across all inputs between the costs of the online algorithm and an optimal offline one .

Recently, there has been growing interest in using machine-learned predictions to improve online algorithms. One seminal work was done by Lykouris and Vassilvitskii  for the caching problem, in which the online algorithms are allowed to leverage predictions of future inputs to make decisions, but they are not given any guarantee on the prediction accuracy. Since then, the framework of online algorithms with predictions has been extensively studied for a wide range of problems including ski-rental , scheduling , graph optimization , covering , data structures , etc. In this framework, the measurements for the online algorithms include _consistency_ and _robustness_, where the former refers to the competitive ratio under perfect predictions while the latter refers to the upper bound of the competitive ratio when the predictions can be arbitrarily bad.

The Bahncard problem with machine-learned predictions was recently studied by Bamas et al. . They designed a primal-dual-based algorithm assuming given a prediction of the optimal solution, i.e., an optimal collection of times to purchase Bahncards such that the total cost is minimized. While Bamas et al.  presented an elegant framework for seamlessly integrating the primal-dual method with a predicted solution, their approach faces three critical issues. First, their considered scenario is limited, involving slotted time and a fixed ticket price of \(1\) for any travel request. The discretization is necessary for them to formulate an integer program and enable the application of the primal-dualmethod proposed by Buchbinder et al. . Second, their results of consistency and robustness are weak in that they only hold under the condition that the cost of a Bahncard goes towards infinity, in which case the optimal solution is to never buy any Bahncard. Last, their algorithm demands a complete solution as input advice, which implies a predicted _complete_ sequence of travel requests over an arbitrarily long timespan, which is impractical for real employment.

In this paper, we study the Bahncard problem with machine-learned predictions, adopting a different technical perspective. We address the general scenario where travel requests may arise at any time with diverse ticket prices. We develop an algorithm, named PFSUM, which takes short-term predictions on future trips as inputs. We derive its competitive ratio under any prediction error that is naturally defined as the difference between the predicted and true values. To present our results, we introduce several notations. The Bahncard problem is instantiated by three parameters and denoted by \((C,,T)\), meaning that a Bahncard costs \(C\), reduces any (regular) ticket price \(p\) to \( p\) for some \(0<1\), and is valid for a time period of \(T\). When \(=0\) and \(T\), the Bahncard problem reduces to the well-known ski-rental problem. Following the definition in [3; 4], we take the competitive ratio of a learning-augmented online algorithm ALG as a function \(_{}()\) of the prediction error \(\). ALG is _\(\)-consistent_ if \(_{}(0)=\), and _\(\)-robust_ if \(_{}()\) for all \(\).

At any time \(t\) when a travel request arises and there is no a valid Bahncard, a prediction on the total (regular) ticket price of all travel requests in the upcoming interval \([t,t+T)\) is made. Incorporating this prediction, PFSUM purchases a Bahncard at time \(t\) when (i) the total ticket price in the past interval \((t-T,t]\) is at least \(\) and (ii) the predicted total ticket price in \([t,t+T)\) is also at least \(\), where \(:=C/(1-)\). Denoting by \(\) the maximum prediction error, we derive that

\[_{}()=\{&0,\\ &>..\] (1)

The result shows that PFSUM is \(2/(1+)\)-consistent and \(1/\)-robust, and its competitive ratio degrades smoothly as the prediction error increases. We also share our experience in the design of PFSUM with some interesting observations.

## 2 Related Work

**The Bahncard problem.** Fleischer  was the first to study the Bahncard problem. By extending the optimal \(2\)-competitive break-even algorithm for ski-rental, he proposed an optimal \((2-)\)-competitive deterministic algorithm named SUM for \((C,,T)\). He also proposed a randomized algorithm named RAND for \((C,,)\), and proved that it is \(e/(e-1+)\)-competitive. He conjectured that RAND keeps the same competitiveness for \(T<\). Karlin et al.  designed a randomized online algorithm for TCP acknowledgement and applied it to \((C,,T)\) with the conjecture settled positively. In addition, the Bahncard problem was extended to several realistic problems in computer systems such as bandwidth cost minimization , cloud instance reservation , and data migration . Notably, Wang et al.  designed algorithms incorporating short-term predictions about the future for reserving virtual machine instances in clouds, which brings inspiration to our algorithm design.

**Learning-augmented algorithms.** Learning-augmented algorithms aim to leverage machine-learned predictions to improve the performance in both theory and practice . Algorithms using possibly imperfect predictions have found applications in numerous important problems [4; 5; 6; 7; 9; 10; 11; 23; 24; 25; 26; 27]. See https://algorithms-with-predictions.github.io/ for a comprehensive collection of the literature.

To our knowledge, the only learning-augmented algorithms specifically designed for the Bahncard problem were developed by Bamas et al.  and Drygala et al. . Bamas et al.  proposed an algorithm, named PDLA, which is \(/(1-+)(e^{}-)/(e^{}-1)\)-consistent and \((e^{}-)/(e^{}-1)\)-robust when \(C\), where \((0,1]\) is a hyper-parameter of the algorithm. Their method, as previously discussed, is limited to scenarios with slotted time and uniform ticket prices for all travel requests. Our approach significantly differs from . First, we address the general scenario where travel requests can arise at any time and feature varied ticket prices. Second, our algorithm utilizes short-term predictions provided at the times when travel requests are made, in contrast to their method which requires predicting a complete solution. We experimentally compare our algorithm with that of  in Section 5. Drygala et al.  focused on how many predictions are required to gather enough information to output a near-optimal Bahncard purchasing schedule, assuming all predictions are correct. The learning-augmented algorithm proposed takes a suggested sequence of buying times as input and assumes a slotted time setting, thereby sharing similar drawbacks to .

Im et al.  explored a somewhat related TCP acknowledgement problem with machine-learned predictions. They introduced a new prediction error measure designed to assess how much the optimal objective value changes as the difference between actual requests and predicted requests varies. A detailed comparison between our work and  is provided in Appendix A.1 of .

## 3 Preliminaries

We adhere to the notations coined by Fleischer . \((C,,T)\) with \(C>0\), \(T>0\), and \(0<1\) is a request-answer game between an online algorithm ALG and an _adversary_ (see, e.g., ). The adversary presents a finite sequence of travel requests \(=_{1}_{2}\), where each \(_{i}\) is a tuple \((t_{i},p_{i})\) that contains the travel time \(t_{i} 0\) and the regular ticket price \(p_{i} 0\). The travel requests are presented in chronological order: \(0 t_{1}<t_{2}<\).

ALG needs to react to each travel request \(_{i}\). If ALG does not have a valid Bahncard, it can opt to buy the ticket with the regular price \(p_{i}\), or first purchase a Bahncard which costs \(C\), and then pay the ticket price with a \(\)-discount, i.e., \( p_{i}\). A Bahncard purchased at time \(t\) is valid during the time interval \([t,t+T)\). Note that a travel request arising at time \(t+T\) does not benefit from the Bahncard purchased at time \(t\). We say \(_{i}\) is a _reduced request_ of ALG if ALG has a valid Bahncard at time \(t_{i}\). Otherwise, \(_{i}\) is a _regular request_ of ALG. We use ALG\((_{i})\) to denote ALG's cost on \(_{i}\):

\[(_{i})=\{ p_{i}&t_{i},\\ p_{i}&..\]

We denote by ALG\(()\) the total cost of ALG for reacting to all the travel requests in \(\). The competitive ratio of ALG is defined by \(_{}:=_{}()/()\), where OPT is an optimal offline algorithm for \((C,,T)\). We use ALG\((;)\) to denote the partial cost incurred during a time interval \(\): \((;)=C x+_{i:t_{i}} {ALG}(_{i})\), where \(x\) is the number of Bahncards purchased by ALG in \(\). Additionally, we use \(c(;)\) to denote the total regular cost in \(\): \(c(;):=_{i:t_{i}}p_{i}\). Given a time length \(l\), we define the _\(l\)-term-cost_ of \(\) at time \(t\) as \(c(;(t-l,t])\). Similarly, we define the _\(l\)-future-cost_ of \(\) at time \(t\) as \(c(;[t,t+l))\). In our design, we assume that when a travel request \((t,p)\) arises, a short-term prediction of the total regular cost in the time interval \([t,t+T)\) can be made. To represent prediction errors, we use \((;[t,t+T))\) to denote the predicted total regular cost in \([t,t+T)\). Sometimes we are concerned about the regular requests of an algorithm ALG in a recent time interval. Thus, we further define the _regular \(l\)-recent-cost_ of ALG on \(\) at time \(t\) as

\[^{r};(t-l,t]:=_{i: _{i}(t-l,t]}p_{i}.\]

Without loss of generality, we assume that an online algorithm ALG or an optimal offline algorithm OPT considers purchasing Bahncards at the times of regular requests _only_. The rationale is that the purchase of a Bahncard at any other time can always be delayed to the next regular request without increasing the total cost.

**Lemma 3.1**.: _[_1_]_ _For any time \(t\), if \(c;[t,t+T):=C/(1-)\), OPT has at least one reduced request in \([t,t+T)\). The same holds for the time interval \((t,t+T]\)._

\(\) is known as the break-even point, i.e., the threshold to purchase a Bahncard at time \(t\) for minimizing the cost incurred in the time interval \([t,t+T)\).

**Corollary 3.2**.: _At any time \(t\), if the \(T\)-future-cost \(c;[t,t+T)<\), OPT does not purchase a Bahncard at \(t\)._

An optimal deterministic online algorithm for the Bahncard problem is SUM, which is \((2-)\)-competitive . SUM purchases a Bahncard at a regular request \((t,p)\) whenever its regular \(T\)-recent-cost at time \(t\) is at least \(\), i.e., \(^{r};(t-T,t]\).

Learning-Augmented Algorithms for the Bahncard Problem

### Initial Attempt

The \(\) algorithm developed in  purchases a Bahncard based on the cost incurred in the past only. It is likely that there is no further travel request in the valid time of the Bahncard besides the request at the purchasing time. Our initial attempt is an adaptation of the \(A_{}^{w}\) algorithm proposed in . Aiming to save cost, the \(A_{}^{w}\) algorithm shifts the cost consideration for Bahncard purchasing towards the future with the help of predictions. That is, a Bahncard is purchased based on a combination of the actual cost incurred in the past and the predicted cost in the future. We name the adaptation of \(A_{}^{w}\) to the Bahncard problem as \(_{w}\).1 Specifically, at each regular request \((t,p)\), \(_{w}\) predicts the total regular cost in a prediction window \((t,t+w]\) where \(w\)\((0<w<T)\) is the length of the prediction window. \(_{w}\) purchases a Bahncard at a regular request \((t,p)\) whenever the sum of the regular \((T-w)\)-recent-cost at \(t\) and the predicted total regular cost in \((t,t+w]\) is at least \(\), i.e.,

\[_{w}^{r};(t+w-T,t]+;(t,t+ w].\] (2)

Note that \(_{w}\) reduces to \(\) when \(w=0\).

Unfortunately, \(_{w}\) is not a good algorithm for using machine-learned predictions. We find that its consistency is at least \((3-)/(1+)\), which is even larger than \(\)'s competitive ratio of \(2-\) since \(<1\). We construct a travel request sequence to show the consistency result in Appendix A.2 of . Moreover, \(_{w}\) does not have any bounded robustness. Consider another example where only one travel request \((t,p)\) arises with \(p 0\), but the predictor yields \(;(t,t+w]\). Then, \(_{w}\) purchases a Bahncard at \((t,p)\). Thus, we have \(_{w}()/()=(C+ p)/p\).

\(_{w}\) fails because if a Bahncard is purchased at time \(t\), it is possible that most of the ticket cost in the interval \((t+w-T,t+w]\) is incurred before \(t\). Consequently, only a small fraction of the ticket cost is incurred from \(t\) onward and can benefit from the Bahncard purchased. As a result, \(_{w}\) suffers from the same deficiency as \(\). We remark that it is not helpful to set the prediction window length \(w\) to \(T\) or even larger values, because the travel request arising at (or beyond) time \(t+T\) (if any) is not covered by the Bahncard purchased at time \(t\).

### Second Attempt

What we have learned from \(_{w}\) is that the Bahncard purchase condition should not be based on the total ticket cost in a past time interval and a future prediction window. Thus, our second algorithm \(\) (Future \(\)) is designed to purchase a Bahncard at a regular request \((t,p)\) whenever the predicted \(T\)-future-cost at time \(t\) is at least \(\), i.e.,

\[;[t,t+T).\] (3)

Note that \(_{T}\) because the Bahncard purchase condition of \(_{T}\) is \(;(t,t+T]\).

**Theorem 4.1**.: _FSUM is \(2/(1+)\)-consistent._

The proof is given in Appendix A.3 of . \(\)'s consistency is generally better than \(\)'s competitive ratio since \(2/(1+)<2-\) always holds for \(0<<1\). However, similar to \(_{w}\), \(\) does not have any bounded robustness. Consider again the example where only one travel request \((t,p)\) arises with \(p 0\), but the predictor yields \((;[t,t+T))\). Then, \(\) purchases a Bahncard at \((t,p)\) and \(()/()=(C+ p)/p\).

### \(\) Algorithm

\(\) fails to achieve any bounded robustness because it completely ignores the historical information in the Bahncard purchase condition. Thus, the worst case is that the actual ticket cost in the prediction window is close to \(0\), while the predictor forecasts that it exceeds \(\), in which case hardly anything benefits from the Bahncard purchased. On the other hand, we note that \(\) achieves a decent competitive ratio because a Bahncard is purchased only when the regular \(T\)-recent-cost is at least \(\), so that the Bahncard cost can be charged to the regular \(T\)-recent-cost in the competitive analysis. Motivated by this observation, we introduce a new algorithm PFSUM (Past and Future SUM), in which the Bahncard purchase condition incorporates the ticket costs in both a past time interval and a future prediction window, but uses them _separately_ rather than taking their sum. PFSUM purchases a Bahncard at a regular request \((t,p)\) whenever (i) the \(T\)-recent-cost at \(t\) is at least \(\), i.e., \(c(;(t-T,t])\), and (ii) the predicted \(T\)-future-cost at \(t\) is also at least \(\), i.e., \((;[t,t+T))\). Note that the first condition is different from the condition for SUM to purchase a Bahncard: PFSUM considers the \(T\)-recent-cost, but SUM considers only the regular \(T\)-recent-cost. The rationale is that by definition, the regular \(T\)-recent-cost is not covered by any Bahncard, so requiring it to be at least \(\) for Bahncard purchase would make the algorithm less effective in saving cost. Compared with FSUM, though PFSUM has an additional condition for purchasing the Bahncard, it is somewhat surprising that PFSUM achieves the same consistency of \(2/(1+)\) as FSUM, as shown below.

Given a travel request sequence \(\), we use \(_{1}<<_{m}\) to denote the times when PFSUM purchases Bahncards. Accordingly, the timespan can be divided into epochs \(E_{j}:=[_{j},_{j+1})\) for \(0 j m\), where we define \(_{0}=0\) and \(_{m+1}=\). Each epoch \(E_{j}\) (except \(E_{0}\)) starts with an _on_ phase \([_{j},_{j}+T)\) (the valid time of the Bahncard purchased by PFSUM), followed by an _off_ phase \([_{j}+T,_{j+1})\) (in which there is no valid Bahncard by PFSUM). Epoch \(E_{0}\) has an off phase only. We define \(\) as the maximum prediction error among all the predictions used by PFSUM:

\[:=_{(t,p)} ;[t,t+T)-c;[t,t+T)\,.\] (4)

Then, for any travel request \((t,p)\) in an off phase, we have

\[c;[t,t+T)-;[t,t+T ) c;[t,t+T)+.\] (5)

The following lemmas will be used frequently in the competitive analysis of PFSUM.

**Lemma 4.2**.: _The total regular cost in an on phase is at least \(-\)._

Proof.: If \(c(;[_{j},_{j}+T))<-\) for some \(j\), it follows from (5) that \((;[_{j},_{j}+T)) c(;[_{j},_{j}+T))+< -+=\), which means that PFSUM would not purchase a Bahncard at time \(_{j}\), leading to a contradiction. Thus, we must have \(c(;[_{j},_{j}+T))-\). 

**Lemma 4.3**.: _In an off phase, the total regular cost in any time interval \([t,t+l)\) of length \(l T\) is less than \(2+\)._

Proof.: Assume on the contrary that \(c(;[t,t+l)) 2+\). We take the earliest travel request \((t^{},p)\) in \([t,t+l)\) such that \(c(;[t,t^{}])\). This implies \(c(;[t,t^{}))<\). Then, we have \(c(;[t^{},t+l))=c(;[t,t+l))-c(;[t,t^{}))>2+ -=+\). Hence, \(c(;(t^{}-T,t^{})) c(;[t,t^{}])\) and \(c(;[t^{},t^{}+T)) c(;[t^{},t+l))>+\). By (5), the latter further leads to \((;[t^{},t^{}+T)) c(;[t^{},t^{}+ T))->\), which means that PFSUM should purchase a Bahncard at time \(t^{}\), contradicting that \(t^{}[t,t+l)\) is in the off phase. Hence, \(c(;[t,t+T))<2+\) must hold. 

**Lemma 4.4**.: _Suppose a time interval \([t,t+T)\) overlaps with an off phase. Among the total regular cost in \([t,t+T)\), let \(s_{2}\), \(s_{3}\) and \(s_{4}\) denote those in the preceding on phase, the off phase, and the succeeding on phase respectively (see Figure 1). If \(0\), \(s_{2}\) and \(s_{4}\), then the total regular cost in \([t,t+T)\) is no more than \(2+\), i.e., \(s_{2}+s_{3}+s_{4} 2+\)._

Proof.: Assume on the contrary that \(s_{2}+s_{3}+s_{4}>2+\). Then, \(s_{3}>0\) and hence there is at least one travel request during the off phase. We take the earliest travel request \((t^{},p)\) in the off phase, such that \(c(;[t,t^{}])\). With a similar analysis to Lemma 4.3, we can derive that PFSUM should purchase a Bahncard at time \(t^{}\), contradicting that \(t^{}\) is in the off phase.

Figure 1: Illustration for Lemma 4.4. The shaded rectangle is the valid time of a Bahncard purchased by OPT.

We adopt a divide-and-conquer approach to analyze PFSUM. Specifically, we focus on the time intervals in which at least one of PFSUM and OPT has a valid Bahncard, and analyze the cost ratio between PFSUM and OPT in these intervals. Consider a maximal contiguous time interval throughout which at least one of PFSUM and OPT has a valid Bahncard. As shown in Figure 2, there are 6 different patterns. If OPT and PFSUM purchase a Bahncard at the same time, the time interval is exactly an on phase (Pattern I), and the cost ratio in it is \(1\) (Proposition 4.5). Otherwise, there are 5 different cases: the time interval does not overlap with any on phase (Pattern II); and the time interval overlaps with at least one on phase - it can start at some time in an on or off phase and end at some time in an on or off phase, giving rise to four cases (Patterns III to VI). In Patterns II to VI, we assume that none of the involved Bahncards purchased by OPT are bought at the same time as any Bahncards purchased by PFSUM.

**Proposition 4.5**.: (Pattern I) _If OPT purchases a Bahncard at time \(_{i}\) at the beginning of epoch \(E_{j}\), i.e., \(_{i}=_{j}\), then_

\[(;[_{j},_{j}+T))}{( ;[_{j},_{j}+T))}=1.\] (6)

Apparently, if the cost ratios between PFSUM and OPT of Patterns II to VI are all capped by the same bound, the competitive ratio of PFSUM is given by this bound. Unfortunately, this is _not_ exactly true. In what follows, we show that the cost ratios of Patterns II to V can be capped by the same bound (Propositions 4.6 and 4.7), which is the competitive ratio of PFSUM that we would like to prove. For Pattern VI, we show that its cost ratio is capped by the same bound if a particular condition holds, where we refer to such Pattern VI as _augmented_ Pattern VI (Proposition 4.8). For non-augmented Pattern VI, we show that it must be accompanied by Patterns I to IV in the sense that a time interval of non-augmented Pattern VI must be preceded (not necessarily immediately) by a time interval of Pattern I, II, III or IV. We prove that the cost ratio of non-augmented Pattern VI combined with such Pattern I, II, III or IV is capped by the same aforesaid bound (Propositions 4.9 and 4.10). This then concludes that PFSUM's competitive ratio is given by this bound.

**Proposition 4.6**.: (Pattern II) _If OPT purchases a Bahncard at time \(_{i}\) in the off phase of an epoch \(E_{j}\) and the Bahncard expires in the same off phase, i.e., \(_{j}+T_{i}<_{i}+T<_{j+1}\), then_

\[(;[_{i},_{i}+T))}{( ;[_{i},_{i}+T))}<.\] (7)

Proof.: Let \(x=c(;[_{i},_{i}+T))\). Based on the definition of Pattern II, OPT\((;[_{i},_{i}+T))=C+ x\) (OPT buys a card at \(_{i}\)) and PFSUM\((;[_{i},_{i}+T))=x\) (PFSUM does not buy cards during any off phase). Hence, the cost ratio is \(\), which increases with \(x\) since \(<1\). By Lemma 4.3, \(x<2+\). Thus, the cost ratio is bounded by \(==\). 

Figure 2: All the 6 patterns of concerned time intervals in which either PFSUM or OPT has a Bahncard. In Patterns III to VI, \(x\) is the number of Bahncards purchased by OPT in an on phase and expiring in the next on phase. \(x\) can be any non-negative integer.

The proof technique of the following propositions for Patterns III to VI is to divide the time interval concerned into sub-intervals, where each sub-interval starts and ends at the time when OPT or PFSUM purchases a Bahncard or a Bahncard purchased expires. Then, for \(0\) and \(>\), we respectively derive the upper bound of the cost ratio based on Lemmas 4.2 to 4.4. All the bounds in Propositions 4.7 to 4.8 are tight (achievable). Detailed proofs are given in Appendixes A.4 to A.5 of .

**Proposition 4.7**.: (Patterns III to V) _The cost ratio in the time interval of Patterns III, IV, and V is bounded by_

\[\{&0,\\ &>..\] (8)

We refer to Pattern VI as _augmented_ Pattern VI if the total regular cost in the last on phase involved is at least \(\). Proposition 4.8 shows that the cost ratio of augmented Pattern VI is capped by the same bound as Patterns III to V.

**Proposition 4.8**.: (Augmented Pattern VI) _Denote by \(_{j}\) and \(_{j+x}\) respectively the first and last Bahncards purchased by PFSUM in Pattern VI. If the total regular cost in the on phase of \(E_{j+x}\) is at least \(\), the cost ratio in the time interval of Pattern VI, i.e., \([_{j},_{j+x}+T)\), is bounded by (8)._

We remark that the cost ratio of general Pattern VI cannot be capped by the same bound as Patterns III to V. This is because in Pattern VI, PFSUM purchases one more Bahncard than OPT and hence has a higher cost of card purchases, whereas PFSUM purchases less or equal numbers of Bahncards compared to OPT in Patterns III to V. Thus, an additional condition is necessary in Proposition 4.8.

Next, we examine non-augmented Pattern VI. Note that the time intervals of Patterns V and VI cannot exist in isolation. By the definition of PFSUM, when a Bahncard is purchased at time \(_{j}\), the total regular cost in the preceding interval \((_{j}-T,_{j}]\) is at least \(\) (referred to as feature \(\)). Consequently, by Lemma 3.1, OPT must purchase a Bahncard whose valid time overlaps with \((_{j}-T,_{j}]\). To deal with non-augmented Pattern VI that starts at time \(_{j}\) for some \(j\), we backtrack from \(_{j}\) to find out what happens earlier. Our target is to identify all possible patterns that might precede Pattern VI.

Note that the time interval \((_{j}-T,_{j}]\) definitely intersects with the off phase of epoch \(E_{j-1}\) and may also intersect with the on phase of \(E_{j-1}\) (if the off phase of \(E_{j-1}\) is shorter than \(T\)). Therefore, it is possible for all Patterns I to VI to precede Pattern VI (see Figures 3(b) and (c) for illustrations). If Pattern I, IV or VI precedes Pattern VI, there is an off phase in between, in which neither PFSUM nor OPT holds a valid Bahncard. Figure 3(a) presents a _pattern graph_ to illustrate all possible concatenations of patterns preceding Pattern VI. In this graph, a node represents a pattern, and an edge from node \(i\) to node \(j\) means pattern \(i\) can precede pattern \(j\). Since every Pattern V or VI must be preceded by some pattern, the backtracking will always encounter a time interval of Pattern I, II, III or IV. We stop backtracking at the first Pattern I, II, III or IV encountered.

We use \(p_{1} p_{2}\) to denote the composite of pattern \(p_{1}\) followed by pattern \(p_{2}\); use \(p^{y}\) to denote a sequence comprising \(y\) consecutive instances of pattern \(p\); and use \(\{p_{1},,p_{n}\} p_{j}\) to represent all possible composite patterns of the form \(p_{i} p_{j}\) for each \(i=1,,n\). Then, the patterns encountered in the backtracking can be represented by

\[\{\}\{\}^{y},\] (9)

Figure 3: Pattern graph.

where \(y\) can be any non-negative integers. Following the feature \(\), for each VI in \(\{,\}^{y}\) of (9), the total regular cost in the last on phase of Pattern VI and the following off phase is at least \(\). It is easy to see that the cost ratio between PFSUM and OPT in the time interval of such Pattern VI is no larger than that of augmented Pattern VI and hence the upper bound given in Proposition 4.8. For each \(\) in \(\{,\}^{y}\) of (9), the cost ratio of Pattern V is capped by the same bound based on Proposition 4.7. In the following, we prove that the cost ratio of non-augmented Pattern VI combined with Pattern I, II, III or IV at the beginning of (9) is also capped by the same bound.

**Proposition 4.9**.: _The cost ratio in the combination of a time interval of Pattern VI and a time interval of Pattern II or III is bounded by (8)._

Proof Sketch.: Note that in Patterns II and III, PFSUM purchases one less Bahncard than OPT. Recall that in Pattern VI, PFSUM purchases one more Bahncard than OPT. Hence, when considering Pattern VI with Pattern II or III together, PFSUM purchases the same number of Bahncards as OPT. Therefore, we can use the same technique as Proposition 4.7 to cap the cost ratio by the same bound. See Appendix A.6 of  for details. 

**Proposition 4.10**.: _The cost ratio in the combination of a time interval of Pattern VI and a time interval of Pattern I or IV encountered in backtracking is bounded by (8)._

Proof Sketch.: Consider Pattern IV. When analyzing the cost ratio of Pattern IV in Proposition 4.7, it is assumed that the total regular cost in the last on phase is at least \(-\). In IV of (9), following the feature \(\), the total cost of travel requests in the last on phase of Pattern IV and the following off phase is at least \(\). Thus, there is an additional cost of at least \(\). Therefore, we can "migrate" an additional cost of \(\) to the non-augmented Pattern VI at the end of (9) and make the latter become an augmented Pattern VI so that the result of Proposition 4.8 can be applied. Meanwhile, the proof of Proposition 4.7 still applies to the Pattern IV even if the cost \(\) is removed from the last on phase. Hence, after migrating the cost of \(\), the Patterns IV and VI involved have the same upper bound of cost ratio given in (8). The proof for Pattern I is similar. See Appendix A.7 of  for details. 

By the above analysis and Propositions 4.6 to 4.10, we have:

**Theorem 4.11**.: _PFSUM has a competitive ratio of_

\[_{}()=\{&0,\\ &>..\] (10)

By letting \(=0\), it is easy to see that the consistency of PFSUM is \(2/(1+)\). Note that the competitive ratio of (10) is a continuous function of the prediction error \(\). It increases from \(2/(1+)\) to \((4-)/(1+2)\) as \(\) increases from \(0\) to \(\), and further increases from \((4-)/(1+2)\) towards \(1/\) as \(\) increases from \(\) towards infinity. Hence, PFSUM is \(1/\)-robust.

## 5 Experiments

We conduct extensive experiments to compare PFSUM with SUM , PDLA , SUM\({}_{w}\) (Section 4.1), FSUM (Section 4.2), and SRL (Ski-Rental-based Learning algorithm), where SRL is adapted from Algorithm 2 proposed in  for ski-rental. SRL performs as follows. Let \((0,1]\) be a hyper-parameter, SRL purchases a Bahncard at a regular request \((t,p)\) if and only if there exists a time \(t^{}(t-T,t]\) that satisfies one of the following conditions: (i) the predicted \(T\)-future-cost at time \(t^{}\) is no less than \(\), and the total regular cost in \([t^{},t]\) is greater than \(\); or (ii) the predicted \(T\)-future-cost at time \(t^{}\) is less than \(\), and the total regular cost in \([t^{},t]\) is greater than \(/\).

We test SUM\({}_{w}\) with \(w=T/2\), and test SRL and PDLA with \(\) set to \(0.2,0.5\), and \(1\). To accommodate SRL and PDLA, we discretize time over a sufficiently long timespan, closely approximating a continuous time scenario. The experimental results across diverse input instances demonstrate the superior performance of PFSUM.

**Input instances.** Referring to the experimental setup of , we consider two main types of traveler profiles: _commuters_, and _occasional travelers_. We set the timespan at 2000 days, during which commuters travel every day. For occasional travelers, there is a time gap between travel requests. We model the inter-request time of occasional travelers using an exponential distribution with a mean of 2. We consider only one travel request per day. This is because multiple travel requests occurringon the same day can be effectively treated as a single request with combined ticket price, since a Bahncard's validity either covers an entire day or does not cover any part of the day.

For each request sequence generated, we investigate three types of ticket price distributions: a Normal distribution with a mean of 50 and a variance of 25, a Uniform distribution centered around a mean of 50, and a Pareto distribution called the Lomax distribution with a shape parameter of 2 and a scale parameter of 50. Our choice of the Pareto distribution stems from the observation that prices of travel requests in the real world often exhibit a heavy tail, which suggests that a minority of travel requests typically account for a significant portion of total cost. Such heavy-tailed distributions are often hypothesized to adhere to some form of Pareto distributions .

**Noisy prediction.** The predictions are generated by adding noise to the original instance, following the methodology used by Bamas et al. . Specifically, we introduce a perturbation probability \(p\). For each day in a given instance, with probability \(p\), the travel request on that day is removed, if it exists. Meanwhile, with probability \(p\), we add random noise, sampled from the same distribution used for generating ticket prices, to the price of the travel request, or simply add a travel request if no request exists on that day. These two operations are executed independently. We vary the perturbation probability from 0 to 1 in the experiments. Intuitively, the prediction error increases with the perturbation probability. The predictions needed by SRL, SUM\({}_{w}\), FSUM, and PFSUM are derived from the total regular cost over the specified time period in the perturbed instance. For PDLA, the predicted solution is obtained by executing the offline optimal algorithm on the perturbed instance.

**Results and discussion.** For all types of input instances, the algorithms exhibit similar relative performance. We present in Figures 4 to 7 the results obtained for commuters and occasional travelers when setting \(=0.8\) (or \(0.6\)), \(T=10\) (or \(5\)), \(C=100\), and different ticket price distributions, including the Uniform distribution, the Normal distribution, and the Pareto distribution. Experimental results for other settings are given in Appendix A.8 of . Each curve in the figure represents the average cost ratio between an algorithm and OPT over 100 experiment runs. The shaded area represents the 95% confidence interval of the corresponding curve.

We make the following observations from the experimental results. (1) When predictions are good (perturbation probability is small), PFSUM, FSUM, SUM\({}_{w}\), and SRL all perform better than SUM. This shows that predictions on the ticket prices of short-term future trips are useful for reducing the total cost. With perfect predictions (perturbation probability = 0), in most cases, either PFSUM or

Figure 4: The cost ratios for commuters (\(=0.8\), \(T=10\), \(C=100\)). “U”, “N” and “P” represent Uniform, Normal and Pareto ticket price distributions respectively.

Figure 5: The cost ratios for occasional travelers (\(=0.8\), \(T=10\), \(C=100\)). “U”, “N” and “P” represent Uniform, Normal and Pareto ticket price distributions respectively.

FSUM produces the lowest cost ratio among all algorithms. This empirically confirms that PFSUM and FSUM have better consistency than SUM and SUM\({}_{w}\). (2) PFSUM outperforms all the other algorithms for a wide range of perturbation probability, demonstrating that PFSUM makes wise use of predictions. In general, PFSUM has the narrowest confidence intervals, indicating that its results are the most stable among all algorithms. (3) For the Pareto distribution, as the prediction error increases, PFSUM demonstrates its robustness through a gradual and smooth rise in the cost ratio to OPT. Even when the perturbation probability is large, PFSUM hardly performs worse than SUM. In contrast, the performance of SUM\({}_{w}\) and FSUM deteriorates rapidly with increasing perturbation probability, showing their poor robustness. (4) The primal-dual-based algorithm PDLA generally has much higher cost ratios than PFSUM and even the conventional online algorithm SUM. This shows that it is important to take advantage of the characteristics of the Bahncard (it is valid for a fixed time period only and provides the same discount to all the tickets purchased therein) when designing learning-augmented algorithms. (5) PFSUM consistently outperforms SRL, particularly in scenarios with significant prediction errors. While the performance of SRL improves with increasing \(\) under high prediction errors, as a larger \(\) leads to reduced reliance on the predictions and enhances the algorithm's robustness, its overall performance remains inferior to that of SUM.

## 6 Discussions and Conclusions

We have developed a new learning-augmented algorithm called PFSUM for the Bahncard problem. PFSUM makes predictions on the short-term future only, aligning closely with the temporal nature of the Bahncard problem and the practice of real-world ML predictions. We present a comprehensive analysis of PFSUM's competitive ratio under arbitrary prediction errors by a divide-and-conquer approach. Experimental results demonstrate significant performance advantages of PFSUM.

Different from prior works, we do not predict a full sequence of requests from the outset, and predict just a sum of near-future requests (cost) when needed. In some online problems with temporal aspects, compared with individual requests, the aggregated arrival pattern across a group of requests is more predictable (see, e.g., ). Thus, our approach can enhance the learnability of ML predictions. We believe that our analysis and result will be useful to various applications of the Bahncard problem as well as other problems with recurring renting-or-buying phenomena.

Figure 6: The cost ratios for commuters (\(=0.6\), \(T=5\), \(C=100\)). “U”, “N” and “P” represent Uniform, Normal and Pareto ticket price distributions respectively.

Figure 7: The cost ratios for occasional travelers (\(=0.6\), \(T=5\), \(C=100\)). “U”, “N” and “P” represent Uniform, Normal and Pareto ticket price distributions respectively.