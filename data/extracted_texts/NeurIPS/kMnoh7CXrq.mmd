# DenseFormer: Enhancing Information Flow in Transformers via Depth Weighted Averaging

Matteo Pagliardini

EPFL

matteo.pagliardini@epfl.ch

&Amirkeivan Mohtashami

EPFL

amirkeivan.mohtashami@epfl.ch

&Francois Fleuret

University of Geneva

Francois.Fleuret@unige.ch

&Martin Jaggi

EPFL

martin.jaggi@epfl.ch

Equal contribution.

###### Abstract

The transformer architecture by Vaswani et al.  is now ubiquitous across application domains, from natural language processing to speech processing and image understanding. We propose DenseFormer, a simple modification to the standard architecture that improves the perplexity of the model without increasing its size--adding at most a few thousand parameters for large-scale models. Our approach relies on an additional averaging step after each transformer block, which computes a weighted average of current and past representations--we refer to this operation as Depth-Weighted-Average (DWA). The learned DWA weights exhibit coherent patterns of information flow, revealing the strong and structured reuse of activations from distant layers. Experiments demonstrate that DenseFormer is more data efficient, reaching the same perplexity of much deeper transformer models, and that for the same perplexity, these new models outperform transformer baselines in terms of memory efficiency and inference time.

## 1 Introduction

The transformer architecture  is the workhorse of modern natural language processing. Recent leaps in the state of the art can be attributed in a large part to efforts scaling this architecture, from millions of parameters  to large billion-parameter models . Unfortunately, those larger models come with an increased computational cost, and a large memory footprint. This renders them impractical to use in a wide range of use-cases, limiting who can benefit from them to a handful of big corporations. As an attempt to mitigate this issue, Touvron et al.  propose training a smaller model for more steps. However, longer training requires larger datasets which becomes challenging as we are reaching scales where even extremely large datasets fall short of sufficient amounts of data .

Furthermore, recent observations suggest that we are reaching the state of diminishing returns where increasing the depth of the model beyond a certain point does not significantly improve performance . Interestingly, a similar state of diminishing returns has been observed in the field of computer vision focused on the training of deep convolutional neural networks. Various solutions were proposed to address this issue, including DenseNets  which alleviated the problem by allowing subsequent layers to directly access outputs of earlier layers.

In this work, using a similar intuition as DenseNets, we propose the DenseFormer architecture. In particular, instead of only having skip connections from one block to the next, in DenseFormer, aweighted average of the outputs of all previous blocks is given as the input of the next block. The approach is visually summarized in Fig. 0(a).

We show that DenseFormers can perform the same as a much deeper standard Transformer model while at the same time being smaller in size, faster, and consuming less memory at inference. More importantly, this is achieved without increasing the amount of required data. As such, DenseFormers are also more data efficient, obtaining much better performance when trained on the same amount of data than a standard model with a similar number of parameters. Our results establish the DenseFormer architecture as an improved version of Transformers for language modeling, encouraging their future use.

In addition to providing experimental results on DenseFormer's performance, we also provide additional insights and intuition for their success. Looking at the learned weights of the DWA modules we observe a surprisingly stable pattern in the learned weights that emerges at multiple depths and generalizes across random seeds (see Fig. 4). Overall, similar to Huang et al. , we hypothesize that the inter-block connectivity enables the model to more directly re-use early features, without requiring to allocate as much bandwidth to propagate them through multiple layers. Intuitively, this seems to help resolve an ambiguity caused by skip-connections which force the deeper representations to maintain the current token representation while at the same time having to predict the next token.

Contributions.Our contributions can be summarized as follows:

* Introducing DenseFormer architecture by adding a depth-weighted-average module after each Transformer block.
* Demonstrating over different settings (e.g. datasets, batch sizes, sequence lengths) the significantly superior performance of DenseFormer over deeper Transformers, yielding a better speed-performance trade-off during both inference and training.
* Providing additional empirically grounded insights and intuition that support the benefits of using DenseFormer.

## 2 Related Work

While larger models have shown great promise in delivering better capabilities, recent results suggest that the gain from using deeper models faces diminishing returns . Interestingly, the same challenge presented itself earlier for scaling convolutional neural networks . Methods that allow a better flow of information from earlier to later layers such as Residual connections  and Highway Networks  have been proposed as a successful solution to tackle this challenge, stabilizing training and increasing the threshold where a gain can be observed from increasing depth. Taking it to the extreme, DenseNets  demonstrate the benefit of having access to the output of all previous layers. We propose DenseFormer by building on a similar intuition, allowing each block to directly access the output of all previous blocks.

Some advantages of attending to representations from earlier layers have already been explored in prior work. Depth-wise Attention  suggests adding an attention-like layer before Transformer's

Figure 1: **DenseFormer architecture. The diagram in (a) shows the DenseFormer architecture with two transformer layers and a dilation of \(1\). After the first (resp. second) block, the past and current intermediary representations \(\{X_{0},X_{1}\}\) (resp. \(\{X_{0},X_{1},X_{2}\}\)) are averaged using the first (resp. second) DWA weights \([_{1,0},_{1,1}]\) (resp. \([_{2,0},_{2,1},_{2,2}]\)). The DWA weights are supported by red arrows. Those weights are represented in matrix form in (b), for a \(12\) layers DenseFormer. A DWA module at depth \(i\) has \(i+1\) weights, represented in red. Increasing the dilation sparsifies this matrix, reducing the computational overhead without degrading the perplexity, see Section 3.2 for more details.**

final projection layer. This new layer applies attention across the outputs of the Transformer's blocks for the current token (instead of over different tokens as in the standard attention layer). This operation is similar to the weighted averaging block introduced in this work which mixes the outputs of earlier blocks. However, whereas in our proposal the weights are learned during training, Depth-wise Attention computes the weights using the dot product (similar to the attention) which levies a higher overhead. In our experiments, we also show that only a single DWA step before the last layer does not yield the same performance as a full DenseFormer. In another recent relevant work Mohtashami et al.  suggest interleaving current and past representations. This allows current tokens to attend to previous representations of themselves and past tokens. Our DenseFormer can be seen as a crude and much more efficient approximation of this mechanism in which we restrict each token to only attend to past representations of themselves, using static (as opposed to dynamic) attention weights. Most relevant to us--in the context of low data training--the concurrent work of Charpentier & Samuel  also adds links from the input of each block to representations from earlier layers. An important difference is their use of softmax weights. We conjecture it is important to let the model subtract representations using negative weights (see SS 5), and implementing their methods only outperformed the baseline in a low-data regime (see App. B.7). Moreover, they do not provide an efficient implementation of their method.

Since its original design by Vaswani et al. , the Transformer architecture used in most applications changed surprisingly little. LLM training is costly, and architecture choices are often conservative. Small variations include changing the activation function , adopting RMSNorm instead of LayerNorm, or computing the feed-forward and attention in parallel [20; 29; 33]. More progressive proposals have been made to alleviate computational challenges of the self attention module, such as using kernel methods or other linear approximations [12; 13; 34], or removing redundant operations without impacting performance [8; 25]. These proposals only affect the internal structure of Transformer blocks. As DenseFormer only adds DWA modules that operate between blocks, we expect that it can be readily used together with these existing proposals.

Recent explorations also have shown gains from using multiple language models instead of one. An example is using a mixture of experts, which rely on a routing mechanism  to select which expert(s) to use in a given context. Other examples include deploying the same instance of a model in different roles allowing them to debate or provide feedback to each other leading to performance improvements [14; 16]. As these approaches mostly retain the structure of the Transformer architecture and focus on the communication structure between multiple models (or sub-modules), we also expect them to be adaptable to use DenseFormers.

## 3 Method

**Setup & Notations.** We consider the standard Transformer architecture. Given a depth \(d\), it consists in a succession of \(d\) Transformer blocks \(B_{1},,B_{d}\), each composed of a self-attention module followed by a single hidden layer Multi-Layer-Perceptron (MLP). We name \(X_{0},,X_{d}\) the different intermediary representations, with \(X_{0}\) being the embedded token sequence, and \(X_{i}\) for \(i 1\) being the output of block \(B_{i}\).

We summarize the Transformer architecture as follows:

\[X_{0} :=(X)\] \[ i=1, d,\ X_{i} :=B_{i}(X_{i-1})\] \[(X) :=X_{d}.\]

**DenseFormer.** The only change to the original architecture is the addition of a **Depth Weighted Average module (DWA)** after each transformer block. A DWA module at depth \(i\) performs a weighted average between (i) the output from the current block \(B_{i}\), (ii) the output of all previous blocks \(B_{j<i}\), and (iii) the embedded input \(X_{0}\). The weights of the weighted-average for the DWA\({}_{i}\) module at depth \(i\) are \(_{i,0},,_{i,i}\). A visual summary can be seen in Fig 0(a). The elements of the \(\) matrix are the only additional parameters of our method. More formally, our DenseFormer model can be summarized as follows:

\[X_{0} :=(X)\] \[Y_{0} :=X_{0}\] \[ i=1, d,\ X_{i} :=B_{i}(Y_{i-1})\] \[ i=1, d,\ Y_{i} :=_{i}(\{X_{0},,X_{i}\})=_{j=0}^{i}_{i,j}  X_{j}\] \[(X) :=Y_{d}.\]

In Section 4 we demonstrate that the DenseFormer architecture can outperform the standard Transformer architecture. In particular, it obtains a much stronger performance (in terms of perplexity) than a model of the same depth, matching the performance of a much deeper model which is both slower at inference and larger in size, leading to a much higher memory footprint than DenseFormer. We further demonstrate the importance of the improved inter-block connectivity brought by the DWA modules in Section 5. We do so by comparing our architecture to a variety of baselines with constrained connections and show those do not perform as well as DenseFormers.

**Initializing the DWA modules.** We note that if \(_{i,i}\) is set to \(1\) while others are set to \(0\), the DWA module acts as an identity function, reducing DenseFormer to the standard Transformer architecture. Therefore, we start our training from this initialization.

### Impact on Resources

**Negligible Model Size Overhead.** At depth \(i\) the DWA module has \(i+1\) weights. Therefore, for a DenseFormer of depth \(d\), the total number of additional parameters is \(_{j=1}^{d}(j+1)=\). For typical model depths (less than \(100\) blocks), this represents at most an order of \(10^{3}\) parameters, which is negligible when compared to the full size of the models.

**Negligible Memory Overhead.** We also emphasize that while DWA requires access to the output of blocks and embedded input \(X_{0},,X_{d}\), these values are stored even when using the standard Transformer architecture. During training, the outputs of the blocks are kept in memory to allow backpropagation, while at inference, only the blocks' outputs for the current token need to be stored. Therefore, the total memory overhead of DenseFormer is negligible.

**Computational Overhead.** Computing the output of the DWA modules increases the computational cost since it requires averaging over multiple large tensors of size (batch size \(\) sequence length \(\) hidden dimension). In this work, we provide an efficient implementation of DWA to reduce the overhead and avoid unnecessary data movement. In addition, we introduce two architectural hyperparameters, which allow building a set of DenseFormer variants that approximate the full DenseFormer. These hyperparameters are DWA dilation and DWA periodicity, respectively introduced in Sections 3.2 and 3.3. We refer to a DenseFormer variant with the dilation factor \(k\) and the DWA periodicity \(p\) as _k_xp-DenseFormer. In this notation, the full DenseFormer is a \(1x1\)-DenseFormer.

### Dilated DenseFormer

In order to further reduce the computational overhead, we introduce a dilation parameter which sparsifies the DWA weights by periodically setting them to \(0\). In particular, each DWA module is now given the output of every \(k\)-th block, where \(k\) is called the dilation factor. More formally, given a DWA module at depth \(i\), a dilation factor of \(k\) implies \(_{i}\) is only computing a weighted average over \(\{X_{j}|j i,j i(k)\})\). See Fig. 0(b) for a visual explanation. Our dilated DenseFormer can be described as:

\[X_{0} :=(X)\] \[Y_{0} :=X_{0}\] \[ i=1, d,\ X_{i} :=B_{i}(Y_{i-1})\] \[ i=1, d,\ Y_{i} :=_{i}^{}(\{X_{j}|j i,j i( k)\})\] \[(X) :=Y_{d}\,.\]

As shown in Section 4, we observe no noticeable performance degradation for small values of \(k\) (e.g. \(2\) or \(4\)) while the computational overhead is significantly reduced, leading to much faster inference and training. More precisely, a dilation of \(k\) reduces the computational overhead induced by DWA modules by a factor of \(1/k\).

### Periodic DenseFormer

An alternative method to dilation for sparsifying DWA weights is adding DWA modules to the architecture less frequently. In particular, we can consider only adding the DWA after every \(p\) blocks (instead of after every block as in the standard DenseFormer). We refer to \(p\) as the DWA period. A standard DenseFormer has period \(1\). A DenseFormer with dilation \(k\) and DWA period \(p\)--referred to as \(k\)_xp_-DenseFormer--can be formalized similarly as a DenseFormer with the following distinction:

\[ i=1, d,\ Y_{i}:=_{i}^{}(\{X_{j}|j i,j i(\ k)\})&p i\\ X_{i}&p i\]

A visual representation of the matrix of \(\) weights can be seen in Fig. 1(a). By increasing the periodicity \(p\), we further reduce the computational cost of DenseFormer. In Section 4 we evaluate the effect of increasing the period for a \(4\)-dilated DenseFormer on both performance and speed. We observe that using small values larger than \(1\) for the period can provide a noticeable boost in speed without noticeable performance degradation. Using a period of \(p\) reduces the computational overhead by a factor of \(1/p\). Hence, a \(k\)xp-DenseFormer only has \(1/kp\) of the computational overhead of a regular DenseFormer. In Section 5 we also provide results with other sparsity patterns for the DWA weights (\(\)) but show that using dilation and periodicity works most favorably.

**Interplay between \(k\) and \(p\).** The ideal value of \(p\) can depend on the dilation \(k\) used. For instance, using \(k=p=4\) implies the DWA module after block \(4\) will look at \(\{X_{0},X_{4}\}\). Its output, \(Y_{4}\), will be sent through block \(5\) to yield \(X_{5}\). However, the next DWA module after block \(8\) will only look at \(\{X_{0},X_{4},X_{8}\}\) (and not at \(X_{5}\)). This means that \(Y_{4}\) will have to go through blocks \(5,6,7,8\) before being accessible by later DWA modules. In contrast, using \(k=4\) and \(p=5\) allows the information to propagate much faster since DWA modules always have access to the processed output of the previous DWA module. This interplay can be visualized in Fig. 1(a) as well as in Appendix B.2.

Figure 2: **(a): DWA weights with dilation _and_ DWA period:** For a \(12\) layers DenseFormer, the \(\) weights are sparsified using dilation \(k\) and DWA periodicity \(p\) (referred to as \(k\)xp). Compared to Fig. 0(b), only certain rows have some weights other than the upper diagonal weights (which correspond to the regular transformer information flow). Increasing the dilation and period sparsifies the \(\) matrix, reducing the computational overhead without degrading the perplexity, see Sections 3.2 and 3.3 for more details. **(b): Speed and performance trade-off:** Comparison of speed and performance trade-off between the standard Transformer architecture and DenseFormer. The number of blocks in each architecture is reported next to the data-point. All DenseFormer models on this plot use a dilation factor of \(4\). We show results using a DWA period of \(1\) and \(5\). **Comparing perplexities:** Considering only the perplexity (y-axis), a \(48\) block DenseFormer performs similarly as a much deeper \(72\) block Transformer. **Comparing trade-offs:** A \(48\) block \(4\)x\(5\)-DenseFormer matches the better perplexity of a \(72\) block Transformer while being \(1.4\) faster at inference.

## 4 Results

We demonstrate the effectiveness of DenseFormer through experiments on language modeling tasks. We compare the performance of DenseFormer architectures with the standard Transformer architecture using model size, inference time, training time, and final perplexity (sometimes abbreviated as PPL) as metrics. For each metric, we consider a baseline that performs the same as DenseFormer on that metric. Concretely, we include the following baselines:

**Same Depth Baseline.** A standard architecture with the same depth as the DenseFormer. It roughly has the same number of parameters as DenseFormer given the negligible number of DWA parameters.

**Same Inference Time Baseline.** A standard architecture that has the same inference time as the DenseFormer. Since adding DWAs to the architecture has a computational overhead, this baseline has more layers (i.e. more capacity) than DenseFormer.

**Same Perplexity Baseline.** A standard architecture with roughly the same PPL as the DenseFormer. It usually is much deeper than the DenseFormer, showcasing the benefits of using DWAs.

**Same Training Time Baseline.** A standard architecture that has the same training time as the DenseFormer. Since adding DWAs to the architecture has a computational overhead, this baseline is trained for more iterations than DenseFormer.

**Skips with Gains.** It can be observed that DenseFormer, among other things, allows scaling the output of the previous layer, providing more control than the original skip connections. Therefore, we provide an additional baseline to show this is not the only benefit offered by DenseFormer and emphasize the importance of having direct access to the outputs of earlier layers. In particular, we consider a modified version of the standard architecture where each skip connection also contains a learned scaling factor which is applied to the the values moving through the skip connection before being summed with the output from a different layer (e.g. self-attention).

**Experimental setup.** We use models with \(8\) heads, each having \(64\) dimensions, and train them using batches of \(400\) sequences of length \(256\). We use rotary positional encoding . We optimize the model using AdamW  with \(_{1}=0.9\) and \(_{2}=0.95\) with weight decay factor \(0.1\).

   Model & Dilation\(\)Period & Depth & Parameters \# (M) & Perplexity (\(\)) & Inference BPS (\(\)) \\  Transformer & - & 48 & 378.45 & 18.61 (0.02) & 5.94 (0.00) \\ Skips With Gains & - & 48 & 378.45 & 18.45 (0.03) & 5.72 (0.01) \\   & \(1 1\) & 48 & 378.45 & 17.84 (0.00) & 4.65 (0.00) \\  & \(4 1\) & 48 & 378.45 & 17.86 (0.02) & 5.31 (0.01) \\  & \(4 5\) & 48 & 378.45 & 17.87 (0.02) & 5.72 (0.00) \\   & - & 64 & 491.72 & 17.94 (0.01) & 4.57 (0.00) \\  & - & 72 & 548.35 & 17.82 (0.04) & 4.08 (0.00) \\   & \(1 1\) & 72 & 548.36 & 17.12 (0.02) & 2.93 (0.00) \\  & \(4 1\) & 72 & 548.35 & 17.17 (0.00) & 3.60 (0.00) \\  & \(4 5\) & 72 & 548.35 & 17.21 (0.01) & 3.90 (0.00) \\   & - & 84 & 633.31 & 17.48 (0.01) & 3.54 (0.00) \\  & - & 90 & 675.78 & 17.44 (0.01) & 3.32 (0.00) \\   

Table 1: **Performance of DenseFormer and the standard architecture of different sizes on OpenWebText2 dataset.** The number of millions of parameters is reported as well as the final perplexity. Additionally the number of batches of size 64 that can be processed in one second is reported as a measure of inference speed. The results are based on three runs with different seeds. The mean value is reported with the standard error reported in parenthesis. In terms of perplexity, DenseFormer clearly outperforms a standard Transformer of the same depth as well as standard Transformers with a similar inference speed. While sometimes a deeper model with the standard architecture can match the performance of a shallower DenseFormer (e.g. \(72\) block standard architecture and \(48\) block DenseFormer), inference using the shallow DenseFormer remains much faster. The inference speed is significantly improved with negligible effect on perplexity when increasing the dilation factor and DWA period. Adding a scaling factor to all skip connections in the standard architecture (named Skips with Gains) does not yield the same performance boost as DenseFormer highlighting the importance of inter-block connectivity in DenseFormer.

We perform most of our experiments on the OpenWebText2 dataset , an enhanced version of OpenWebTextCorpus  with around \(17\)B tokens. We train all models for \(40k\) steps, thus keeping the number of data points used in training fixed. We use learning rate \(0.001\) with a cosine scheduler and do a warmup in the beginning \(5\%\) steps.

We present the result of training \(48\) block and \(72\) block DenseFormers along with baselines of various sizes in Tab. 1. We make the following observations based on these results:

**Better perplexity than same depth baseline.** When comparing with a baseline of the same depth, DenseFormer significantly outperforms the standard architecture. Moreover, as it can be seen in Fig. 1(b), the perplexity of a \(48\) block DenseFormer is only matched by a \(72\) block Transformer baseline.

**Faster than a baseline with the same perplexity.** The performance of a \(48\) block DenseFormer is on par with a \(72\) block standard architecture. Still, the \(48\) block DenseFormer is much faster at inference (measured in batches per second) than the \(72\) block standard architecture. Moreover, the number of parameters and memory footprint of the \(72\) block baseline is \(45\%\) larger than the one of the \(48\) block DenseFormer.

**Better perplexity than a baseline with the same inference time.** Comparing the \(48\) block DenseFormer without dilation, with a \(64\) block standard architecture (which has the same inference speed), shows a wide gap between the higher performance of DenseFormer (\(17.84\)) and the standard Transformer architecture (\(17.94\)). Considering DenseFormer models with a dilation of \(4\) and/or a DWA period of \(5\) would increase this gap further.

**Weighted skip-connections are insufficient.** DenseFormer is changing the flow of information in the model. We can wonder whether it leverages the additional expressivity or whether the performance gains could be explained by making it easier to rescale the contribution of each block. When comparing the \(48\) block Transformer baseline to the \(48\) block skip-with-gains baseline, it seems adding tunable weights to each skip connection does not lead to a significant improvement. When compared with the \(48\) block DenseFormer, this showcases the importance of having direct access to all previous layers.

**Faster with dilation and DWA period.** Finally, our Tab.1 results show that for small dilation factors \(k\) and DWA period \(p\), \(k\)x\(p\)-DenseFormer perform comparably while significantly boosting speed. Indeed, as can also be seen in Fig. 1(b), using \(4\)x\(1\)-DenseFormers or \(4\)x\(5\)-DenseFormers allows pushing the Pareto frontier on speed and performance trade-off forward.

**More efficient during training.** We train a \(48\) block \(4\)x\(5\)-DenseFormer and compare it against a \(48\) block Transformer baseline trained _with the same time budget_. The baseline is therefore trained for more iterations (\(41.5\)k vs. \(40\)k) to compensate for the time overhead of DenseFormer. In Fig. 2(c) we

Figure 3: **Training and inference efficiency of \(k\)x\(p\)-DenseFormer vs. Transformer. For \(48\) block models, we compare in (a) the different perplexity/inference speed trade-offs reached by a regular Transformer and \(k\)x\(p\)-DenseFormers. In the top right corner, the Transformer baseline is the model with the worst perplexity but the fastest at inference. In contrast, the 1x\(1\)-DenseFormer in the bottom left corner, is reaching the best perplexity but incurs a cost in inference speed. By varying the dilation \(k\) and DWA period \(p\), some \(k\)x\(p\)-DenseFormer models (e.g. \(4\)x\(5\)) provide most of the perplexity improvement of the original DenseFormer while significantly reducing the time overhead. A similar analysis holds when looking at the training speed in (b). In (c), we show the perplexity decreasing during training. The x-axis is time. To compensate for the computational overhead of DenseFormer, we train the Transformer baseline for more iterations, such that the two methods have the same training time budget. We observe how our \(4\)x\(5\)-DenseFormer is reaching a better perplexity faster than the baseline.**

visualize the perplexity (approximated on a small subset of the validation set) dropping as a function of the training time. The DenseFormer's perplexity is dropping faster than that of the Transformer baseline. This shows the superior efficiency of DenseFormer during training. While the Transformer is trained for more steps, thus using more data points, it is still outperformed by the DenseFormer. The final perplexities on full validation set reached by the two models can be seen in Tab. 2.

### Additional Experiments

We perform additional experiments to show that our results are general and extend to different settings and larger scales. We also study the impact of the dilation factor \(k\) and DWA period \(p\) on the efficiency of our \(k\)x\(p\)-DenseFormer architecture.

**Experiments with longer sequences.** Due to computation limitations, we can not run all experiments at a large scale. We however repeat a limited set of experiments with longer sequences of \(512\) tokens using a smaller batch size of \(128\). A \(48\) block Transformer baseline reaches a final perplexity of \(18.28 0.03\) against \(17.73 0.02\) for the DenseFormer. This result shows that the gap between the two architectures persists for longer sequences.

**Effect of Dilation and DWA period.** Fig. 2(a) and Fig. 2(b) show the impact of using different combinations of dilation \(k\) and DWA period \(p\) on the final perplexity, training and inference speed. As can be seen, small values of the dilation factor (e.g. up to \(4\)) have a negligible effect on the perplexity. However, increasing the dilation factor further affects the performance more adversely while the gain in both training and inference speed starts to plateau. Increasing the DWA period also provides a similar trade-off, with the perplexity being barely affected for \(p 5\). From those figures, we conclude that a dilation of \(4\) and a DWA period of \(5\) seem to offer the best compromise between speed and perplexity. In Appendix B.2, we provide more detailed results, including showing how increasing dilation yields a more pronounced speed-up for deeper models, making larger dilation factors more effective in those scales.

**PG-19 experiments.** We also show the superior performance of DenseFormer on the PG-19 dataset . At any depth, DenseFormers outperform Transformers in PPL. See App. B.3 for details.

   Model & Steps & Train time (h) & Perplexity \\  Standard & 41500 & 8.09 & 18.33 (0.00) \\
4x5-DenseFormer & 40000 & 8.04 & **17.87 (0.02)** \\   

Table 2: **Same training time comparison.** Comparison of 4x5-DenseFormer’s performance against a standard Transformer trained for more iterations. The number of training steps of the standard architecture is chosen such that the training time is roughly the same (and always more than) that of the DenseFormer. Both architectures have \(48\) blocks and are trained with \(2000\) warmup steps. Even though the Transformer is trained with more steps, it is still outperformed by the DenseFormer.

Figure 4: **Visualization of DWA Learned Weights.** Each row shows the weights \(\) learned by a DWA module at a given depth. While the heatmaps are averaged across 3 runs with different seeds, those patterns are very consistent across seeds. In **(a) and (b)**, strikingly similar patterns can be observed in both \(48\) and \(72\) layer DenseFormers. In **(c)**, we show the learned weights for a \(48\) block DenseFormer trained with a dilation of \(4\). Despite the sparsity, we still observe a very similar pattern to those learned by the non-dilated models.

## 5 Analyzing the Information Flow

In this section, we investigate the learned DWA \(\) weights to gain more insight and intuition on the reason behind the superiority of DenseFormer.

**A stable weight pattern emerges.** We start by visualizing the learnt DWA weights for \(48\) and \(72\)-block DenseFormer models (with a dilation and period of \(1\)) in Fig. 4. Interestingly, the \(\) weight patterns learned at both depths are very similar:

* High weights are on the diagonal (corresponding to the normal information flow as in a standard Transformer) as well as on the immediate previous blocks.
* High weights are given to the initial embedding vectors. Those weights are positive in earlier layers while later layers assign a negative weight.
* An aggregation block is observed near the final layers where a high weight is given to all previous layers in the block (seen as a high-weight triangle near the diagonal in the lower right corner).

Finally, Fig. 4c shows similar patterns persist to some extent when using dilation factors higher than \(1\). Similar results hold for \(k\)\(x\)\(p\)-DenseFormers as can be seen in Appendix B.1.

**Other sparsity patterns during training.** Alternative to pruning after training, we also consider imposing different sparsity patterns during training. We already have experimented with such sparsity patterns induced through dilation and DWA period. In Fig. 4, we observe that in many cases the largest weights are given to the few previous blocks as well as the first block. As such, we experiment with a sparsity pattern allowing DWA to access previous \(k\) blocks as well as the input embedding vectors calling it "Last K". Furthermore, given the large magnitude of weights on the last layer, we also experiment with only having a single DWA in the architecture which is placed after the last layer, calling it "Connect to Last". Tab. 3 shows the perplexities when using these sparsity patterns and shows that they do not achieve the boost in performance obtained with DenseFormer. This observation further strengthens the importance of small DWA weights both during training and inference.

**Correlation with Input Embeddings.** Based on the special pattern of weights given to the embedding vectors--especially the negative weights given to the input by the last layers (see Fig. 4)--we hypothesize that the model tries to use the information in the input in earlier layers while removing the influence of the current token as it tries to predict the next token. In order to test this hypothesis we plot the average cosine similarity of each token's vector after each DWA block with its input embedding in Fig. 5. As expected based on the weight pattern, we observe that the similarity is high in the earlier layers. At the later stage, the model decreases this similarity significantly.

Figure 5: **Cosine similarity between the output of each DWA module and the initial embedding vectors.** The results are averaged over three seeds, for DenseFormer models with \(48\) blocks and no dilation (corresponding to the weights in Fig. 1a). The model initially maintains a high correlation between the input and the output of each DWA module. That correlation decreases in later layers. Intuitively, we can hypothesize that this is the stage where the model is preparing to output the next token. A very similar plot can be observed for \(72\) block models in Appendix B.1.

   Sparsity Pattern & Perplexity & Sparsity \\  Baseline Transformer & 18.61 (0.02) & - \\  Last K (\(K=4\)) & 18.28 (0.01) & 84\% \\ Connect to Last & 18.33 (0.02) & 96\% \\ 
12x1-DenseFormer & 17.96 (0.01) & 92\% \\
4x5-DenseFormer & **17.87 (0.02)** & 95\% \\   

Table 3: **Alternative DWA Sparsity Patterns.** We compare \(48\) block architectures with different sparsity patterns. In Last K, DWA can only access the output of the last \(k\) blocks as well as the input embedding vectors. Connect to Last includes only a single DWA module in the architecture placed after the last layer, i.e. connecting every block to the last block. Neither of these patterns achieves the same perplexity boost as our proposed DenseFormer. \(12\)x\(1\) and \(4\)x5-DenseFormers—with sparsities of respectively \(92\%\) and \(95\%\)—outperform other sparsity patterns, which signifies the importance of pairwise inter-block connections.

We hypothesize this final decrease is due to the model moving from processing the current token to building the next token's representation. In contrast, the similarity drops down very early for a standard transformer and remains low for the rest of the layers.

## 6 Future Work & Conclusion

In this paper, we introduced the DenseFormer architecture. This architecture adds an averaging module called DWA after each block which allows it to directly access the outputs of previous blocks. We established the superiority of this architecture over Transformers in terms of perplexity/speed trade-off through experiments in a variety of settings. Additionally, we provided dilation and DWA periodicity as simple methods to improve speed without significantly hurting performance. Finally, we provided insights about the learned weights, revealing patterns persisting over different depths.

As the next steps, finding more efficient implementations of DenseFormer is grounds for future work. One possible direction is finding better sparsity patterns that also can be implemented efficiently. The weights visualization in Fig. 4 suggests such patterns might exist. Furthermore, finding efficient ways to shard DWA across multiple nodes is important to allow large-scale distributed training.