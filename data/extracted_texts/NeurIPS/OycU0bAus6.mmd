# _DenoiseRep_: Denoising Model for Representation Learning

Zhengrui Xu\({}^{1}\)\({}^{}\)

\({}^{1}\)School of Computer Science and Technology, Beijing Jiaotong University

\({}^{2}\)Beijing Key Lab of Traffic Data Analysis and Mining, Beijing Jiaotong University

\({}^{3}\)Key Laboratory of Big Data & Artificial Intelligence

in Transportation(Beijing Jiaotong University), Ministry of Education

 Guan'an Wang\({}^{}\)\({}^{}\)

\({}^{1}\)School of Computer Science and Technology, Beijing Jiaotong University

\({}^{2}\)Beijing Key Lab of Traffic Data Analysis and Mining, Beijing Jiaotong University

\({}^{3}\)Key Laboratory of Big Data & Artificial Intelligence

in Transportation(Beijing Jiaotong University), Ministry of Education

 Xiaowen Huang\({}^{1,2,3}\)\({}^{*}\)

\({}^{1}\)School of Computer Science and Technology, Beijing Jiaotong University

\({}^{2}\)Beijing Key Lab of Traffic Data Analysis and Mining, Beijing Jiaotong University

\({}^{3}\)Key Laboratory of Big Data & Artificial Intelligence

in Transportation(Beijing Jiaotong University), Ministry of Education

Jitao Sang\({}^{1,2,3}\)

\({}^{1}\)School of Computer Science and Technology, Beijing Jiaotong University

\({}^{2}\)Beijing Key Lab of Traffic Data Analysis and Mining, Beijing Jiaotong University

\({}^{3}\)Key Laboratory of Big Data & Artificial Intelligence

in Transportation(Beijing Jiaotong University), Ministry of Education

###### Abstract

The denoising model has been proven a powerful generative model but has little exploration of discriminative tasks. Representation learning is important in discriminative tasks, which is defined as _"learning representations (or features) of the data that make it easier to extract useful information when building classifiers or other predictors"_. In this paper, we propose a novel Denoising Model for Representation Learning (_DenoiseRep_) to improve feature discrimination with joint feature extraction and denoising. _DenoiseRep_ views each embedding layer in a backbone as a denoising layer, processing the cascaded embedding layers as if we are recursively denoise features step-by-step. This unifies the frameworks of feature extraction and denoising, where the former progressively embeds features from low-level to high-level, and the latter recursively denoises features step-by-step. After that, _DenoiseRep_ fus es the parameters of feature extraction and denoising layers, and _theoretically demonstrates_ its equivalence before and after the fusion, thus making feature denoising computation-free. _DenoiseRep_ is a label-free algorithm that incrementally improves features but also complementary to the label if available. Experimental results on various discriminative vision tasks, including re-identification (Market-1501, DukeMTMC-reID, MSMT17, CUHK-03, vehicleID), image classification (ImageNet, UB200, Oxford-Pet, Flowers), object detection (COCO), image segmentation (ADE20K) show stability and impressive improvements. We also validate its effectiveness on the CNN (ResNet) and Transformer (ViT, Swin, Vmamda) architectures. Code is available at https://github.com/wangguanan/DenoiseRep.

## 1 Introduction

Denoising Diffusion Probabilistic Models (DDPM)  or Diffusion Model for short have been proven to be a powerful generative model . Generative models can generate vivid samples (such as images, audio and video) by modeling the joint distribution of the data \(P(X,Y)\), where \(X\) is the sample and \(Y\) is the condition. Diffusion models achieve this goal by adding Gaussian noise to the data and training a denoising model of inversion to predict the noise. Diffusion models can generate multi-formity and rich samples, such as Stable diffusion , DALL  series and Midjourney, these powerful image generation models, which are essentially diffusion models.

However, its application to discriminative models has not been extensively explored. Different from generative models, discriminative models predict data labels by modeling the marginal distribution of the data \(P(Y|X)\). \(Y\) can be various labels, such as image tags for classification, object boxes for detection, and pixel tags for segmentation. Currently, there are several methods based on diffusion models implemented in specific fields. For example, DiffusionDet  is a new object detection framework that models object detection as a denoising diffusion process from noise boxes to object boxes. It describes object detection as a generative denoising process and performs well compared to previous mature object detectors. DiffSeg  for image segmentation, which is a method of unsupervised zero-shot sample segmentation using pre-trained models (stable diffusion). It introduces a simple and effective iterative merging process to measure the attention maps between KL divergence and merge them into an effective segmentation mask. The proposed method does not require any training or language dependency to extract the quality segmentation of any image.

The methods above are carefully designed for specific tasks and require a particular data structure. For example, DiffusionDet  uses noise boxes and DiffSeg  uses noise segmentation. In this paper, we explore a more general conception of how the denoising model can improve representation learning, _i.e. "learning representations (or features) of the data that make it easier to extract useful information when building classifiers or other predictors"_, and contribute to discriminative models. We take person Re-Identification (ReID) [66; 3] as a benchmark task. ReID aims to match images of a pedestrian under disjoint cameras, and is suffered by pose, lighting, occlusion and so on, thus requiring more identity-discriminative feature.

A straightforward approach is applying the denoising process to a backbone's final feature [26; 14], reducing noise in the final output and making the feature more discriminative, as Fig. 1(b) shows. However, this way can be computationally intensive. Because the denoising layer needs to be proceeded on the output of the previous one in a recursive and step-by-step manner. Considering that a backbone typically consists of cascaded embedding layers (e.g., convolution layer, multi-head attention layer), we propose a novel perspective: treating each embedding layer as a denoising layer. As shown in Fig. 1(c), it allows us to process the cascaded layers as if we are recursively proceeding through the denoising layer step-by-step. This method transforms the backbone into a series of denoising layers, each working on a different feature extraction level. While this idea is intuitive and simple, its practical implementation presents a significant challenge. The main issue arises from the requirement of the denoising layer for the input and output features to exist in the same feature space. However, in a typical backbone (_e.g._ ResNet , ViT )), the layers progressively map features

Figure 1: A brief description of our idea. (a) A typical denoising model for generative tasks recursively applies a denoising layer. (b) A naive idea that applies a denoising strategy to a discriminative model is applying a recursive denoise layer on the feature of a backbone and taking extra inference latency. (c,d) Our _DenoiseRep_ first unifies the frameworks of feature extraction and denoising in a backbone pipeline, then merges parameters of the denoising layers into embedding layers, making the feature more discriminative without extra latency cost.

from a low level to a high level. It means that the feature space changes from layer to layer, which contradicts the requirement of the denoising layer.

To resolve all the difficulties above and efficiently apply the denoising process to improve discriminative tasks, our proposed Denoising Model for Representation Learning (_DenoiseRep_) is as below: Firstly, we utilize a well-trained backbone and keep it fixed throughout all subsequent procedures. This step is a free launch as we can easily use any publicly available backbone without requiring additional training time. This approach allows us to preserve the backbone's inherent characteristics of semantic feature extraction. Given the backbone and an image, we can get a list of features. Next, we train denoising layers on those features. The weights of denoising layers are randomly initialized and their weights are not shared. The training process is the same as that in DDPM , where the only difference is that the denoising layer in DDPM takes a dynamic \(t[1,T]\), and our denoising layers take fixed \(n[1,N]\), where \(n\) is the layer index, \(T\) is denoise times and \(N\) is backbone layer number as shown in Fig. 1(c). Finally, considering that the \(N\) denoising layers consume additional execution latency, we propose a novel feature extraction and feature denoising fusion algorithm. As shown in Fig. 1(d), the algorithm merges parameters of extra denoising layers into weights of the existing embedding layers, thus enabling joint feature extraction and denoising without any extra computation cost. We also _theoretically demonstrate_ the total equivalence before and after parameter fusion. Please see Section 3.3 and Eq (7) for more details.

Our contributions can be summarized as follows:

(1) We propose a novel Denoising Model for Representation Learning (_DenoiseRep_), which innovatively integrates the denoising process, originating from generative tasks, into the discriminative tasks. It treats \(N\) cascaded embedding layers of a backbone as \(T\) times recursively proceeded denoising layers. This idea enables joint feature extraction and denoising is a backbone, thus making features more discriminative.

(2) The proposed _DenoiseRep_ fuses the parameters of the denoising layers into the parameters of the corresponding embedding layers and _theoretically_ demonstrates their equivalence. This contributes to a computation-efficient algorithm, which takes no extra latency.

(3) Extensive experiments on 4 ReID datasets verified that our proposed _DenoiseRep_ can effectively improve feature performance in a label-free manner and performs better in the case of label-argumented supervised training or introduction of additional training data. We also extend _DenoiseRep_ to large-scale (ImageNet), fine-grained (CUB200, Oxford-Pet, Flowers) image classifications, object detection (COCO) and image segmentation (ADE20K), showing its scalability.

## 2 Related Work

**Generative models** learn the distribution of inputs before estimating class probabilities. A generative model learns the data generation process by learning the probability distribution of the input data and generating new data samples. The generative models first estimate the conditional density of categories \(P(x|y=k)\) and prior category probabilities \(P(y=k)\) from the training data. The \(P(x)\) is obtained by the full probability formula. So as to model the probability distribution of each type of data. Generative models can generate new samples by modelling data distribution. For example, Generative Adversarial Networks (GANs) [17; 43; 23] and Variational Autoencoders (VAEs) [24; 53; 69; 64] are both classic generative models that generate real samples by learning potential representations of data distributions, demonstrating excellent performance in data distribution modeling. Recent research has focused on using **diffusion models** for generative tasks. The diffusion model was first proposed by the article  in 2015, with the aim of eliminating Gaussian noise from continuous application to training images. The DDPM  proposed in 2020 have made the use of diffusion models for image generation mainstream. In addition to its powerful generation ability, the diffusion model also has good denoising ability through noise sampling, which can denoise noisy data and restore its original data distribution.

**Discriminative models** learn condition distribution, _i.e._\(P(y|x)\), where \(x\) is data and \(y\) is task-specific features. For example, classification tasks [1; 2; 13] map data to tags, retrieval tasks [36; 62] map data to a feature space where similar data should be near otherwise faraway, detection task [49; 27] map data to space position and size. **Person Re-Identification (ReID)** is a fine-grained retrieval task which identifies individuals among disjoint camera views. Considering its challenge to feature discrimination, we take ReID as the major benchmark task and the others as auxiliary benchmarks. Existing ReID methods can be grouped into hand-crafted descriptors [35; 42; 65] incorporated with metric learning [25; 34; 71] and deep learning algorithms [58; 57; 56; 44; 16; 10]. State-of-the-art ReID models often leverage convolutional neural networks (CNNs)  to capture intricate spatial relationships and hierarchical features within person images. Attention mechanisms [54; 14], spatial-temporal modeling [31; 30], and domain adaptation techniques  have further enhanced the adaptability of ReID models to diverse and challenging real-world scenarios.

## 3 _DenoiseRep_: Denoising Model for Representation Learning

### Review Representation Learning

Representation learning plays a pivotal role in discriminative tasks, which is defined as _"learning representations (or features) of the data that make it easier to extract useful information when building classifiers or other predictors"_. A common architecture of discriminative tasks consists of a vision backbone to extract discriminative features (_e.g._, ResNet , ViT ) and a task-specific head that operates on these features (_e.g._ MLP  for classification, RCNN  for object detection, FCN  for segmentation). It is evident that the vision backbone is central to representation learning. In this paper, we introduce a novel Denoising Model for Representation Learning (_DenoiseRep_), which integrates feature extraction and feature denoising within a single vision backbone. This approach aims to enhance the discriminative power of the features extracted.

### Joint Feature Extraction and Feature Denoising

We refer to the diffusion modeling approach to denoise the noisy features through T-steps to obtain clean features. At the beginning, we use the features output from the backbone network as data samples for diffusion training, and get the noisy samples by continuously adding noise and learning through the network in order to simulate the data distribution of its features.

\[q(_{1:T}|_{0}) _{t=1}^{T}q(_{t}|_{t-1})\] (1) \[q(_{t}|_{t-1}) (_{t};} _{t-1},_{t})\] (2)

where \(X_{0}\) represents the feature vector output by the backbone, \(t\) represents the diffusion step size, \(_{t}\) is a set of pre-set parameters, and \(X_{t}\) represents the noise sample obtained through diffusion process.

In the inference stage, as shown in Fig. 1(b), we perform T-step denoising on the output features, to obtain cleaner features and improve the expressiveness of the features.

\[p_{}(_{0:T})  p(_{T})_{t=1}^{T}p_{}(_{t-1}| _{t})\] (3) \[p_{}(_{t-1}|_{t}) (_{t-1};_{}(_{t},t),_{}(_{t},t))\] (4)

where \(X_{t}\) represents the feature vector output by the backbone in the inference stage. \(T\) is the denoising step size, representing the magnitude of the noise. We adjust \(t\) appropriately based on different datasets and backbones to obtain the optimal denoising amplitude. According to \(p_{}(_{t-1}|_{t})\) denoise it step by step, and finally obtains \(X_{0}\), which represents the clean feature after denoising.

### Fuse Feature Extraction and Feature Denoising

As described in Section 3.2, the proposed method above could effectively improve the discriminability of features. Still, extra inference latency is introduced caused by recursive calling of the denoising layers. To solve the problem, we propose to fuse parameters of feature denoising layers into parameters of existing embedding layers of the backbone. The core idea is to expand the linear layer each transformer encoder block into two branches, one for its original embedding layer and the other for extra denoising layer. As shown in Fig. 2, during the training phase, we freeze the original embedding layers and only train the denoising layers. The training method is consistent with section 3.2, and the features are diffused and fed into the denoising layers. Please refer to Algorithm 1 for more details. In the inference stage, we fuse the pre-trained parameters of embedding and denoising layers, merging the two branches into a single branch without additional inference time. Please note that, here we take the transformer architecture as an example, but _DenoiseRep_ is suitable for CNN architecture. We demonstrate its scalibity on CNN in experiments. The derivation of parameter merging is as follows:

\[X_{t-1}=}}(X_{t}-}{}}}D_{ }(X_{t},t))+_{t}z\] (5)

where \(a_{t}=1-_{t}\), \(D_{}\) are the parameters of the prediction noise network.

\[ Y&=WX+b\\ }}X_{t}-X_{t-1}&=} {}}}}D_{}X_{t}-_{t}z\\ }}Y_{t}-Y_{t-1}&=} {}}}}D_{}Y_{t}-_{t}z\] (6)

We make a simple transformation of Eq. (5) and multiply both sides simultaneously by \(W\). The simplified equation can be obtained by bringing \(Y_{t}\) in terms of \(WX_{t}+b\):

\[ Y_{t-1}=[W-C_{1}(t)WW_{D}]X_{t}+WC_{2}(t)C_{3}+b\\ C_{1}(t)=}{}}}} C _{2}(t)=^{}}{1-}}_{t} C_{3}=Z N( 0,I)\] (7)

where \(W_{D}\) denotes the parameters of \(D_{}(X_{t},t)\), \(X_{t}\) denotes the input of this linear layer, \(Y_{t}\) denotes the output of this linear layer, and \(Y_{t-1}\) denotes the result after denoising in one step of \(Y_{t}\). Due to the cascading relationship of blocks, as detailed in Algorithm. 2, different \(t\) values are set according to the order between levels, and the one-step denoising of one layer is combined to achieve the denoising process of \(Y_{t} Y_{0}\), ensuring the continuity of denoising and ultimately obtaining clean features. We split the original single branch into a dual branch structure. During the training phase, the backbone maintains its original parameters and needs to train the denoising module parameters. In the inference stage, as shown on the left side of Fig. 2, we use the method of reparameterization, to replace the original \(W\) parameter with \(W^{}\), where \(W^{}=[W-C_{1}(t)WW_{D}]\) in Eq. (7), which has the same

Figure 2: Pipeline of our proposed _DenoiseRep_. ViT consists of \(N\) cascaded transformer encoder layers. During the training phase (see the right side “Train Only” process), we freeze the backbone parameters and only train the extra denoising layers. In the inference stage (see the left side “Infer Only” process), we merge the parameters of denoising layers to corresponding encoder layers. So there is no extra inference latency cost. Please find definitions of \(W\), \(b\), \(W_{D}\), \(W^{}\), \(i\) and \(b^{}\) in Algorithm 2.

number of parameters as \(W\), thus achieving the combination of \(FC\) operation and denoising without additional time cost. It is a **Computation-free** method.

In Eq. (7), we achieve one-step denoising \(Y_{t} Y_{t-1}\). If we need to increase the denoising amplitude, we can extend it to two-step or multi-step denoising. The following is the derivation formula for two-step denoising:

\[}}Y_{t}-Y_{t-1}=C_{1}(t)D_{}Y_{t}-_{t}z\] (8)

\[}}Y_{t-1}-Y_{t-2}=C_{1}(t-1)D_{}Y_{t-1}-_{t- 1}z\] (9)

We can obtain this by eliminating \(Y_{t-1}\) from Eq.(8) and Eq.(9) and replacing \(Y_{t}\) with \(WX_{t}+b\):

\[ Y_{t-2}=W^{}X_{t}+C^{}\\ W^{}=-1}}\{} }-[C_{1}(t)+C_{1}(t-1)]WW_{D}+}C_{1}(t-1)C_{1}(t)WW_{D}W_{D}\}\\ C^{}=-1}}[WC_{2}(t)+}WC _{2}(t-1)-}C_{1}(t-1)C_{2}(t)WW_{D}]Z+b\] (10)

Note that a single module completes two steps of denoising. To ensure the continuity of denoising, the \(t\) value should be sequentially reduced by 2.

Our proposed _DenoiseRep_ is based on feature-level denoising and can be migrated to various downstream tasks. It denoises the features on each layer for better removal of noise at each stage, as the noise in the inference stage comes from multiple sources, which could be noise in the input image or noise generated while passing through the network. Denoising each layer avoids noise accumulation and gives better quality output. And according to the noise challenges brought by data in different scenarios, the denoising intensity can be adjusted by controlling \(t\), \(_{t}\), and the number of denoising times, which has good generalization ability.

```
0: The number of feature layers in the backbone N, features extracted from each layer \(\{F_{i}\}_{i=1}^{N}\), trained denoising module parameters \(\{W_{D_{i}}\}_{i=1}^{N}\) in Algorithm(1), after obtaining the initial feature \(F^{N}\) through patch embed, it is necessary to remove N-step noise from it, the pre-trained parameters \(\{W_{i}\}_{i=1}^{N}\) and \(\{_{i}\}_{i=1}^{N}\) for the backbone.
0: Feature \(F^{0}\) after denoising.
1:for each \(i[N,1]\)do
2:\(t=i\): Set the denoising amplitude based on the depth of the current layer.
3:\(W^{}=[W_{i}-C_{1}(t)W_{i}W_{D_{i}}]\), \(b^{}=W_{i}C_{2}(t)C_{3}+b_{i}\): Parameter fusion according to Eq.(7).
4:\(F^{t-1}=W^{}F^{t}+b^{}\): Fuse feature extraction and feature denoising.
5:endfor
6:return\(F^{0}\) ```

**Algorithm 2** Inference

### Unsupervised Learning Manner

Our proposed _DenoiseRep_ is label-free because its essence is a generative model that models data by learning its distribution. Thus the training loss contains only the \(Loss_{p}\) of denoising layers:

\[Loss_{p}=_{i=1}^{N}|_{i}-D_{_{i}}(X_{t_{i}},t_{i})|\] (11)

where \(\) denotes the sampled noise, \(N\) denotes the number of denoising layers, \(X_{t}\) denotes the noise sample, \(t\) denotes the diffusion step, and \(D_{}(X_{t},t)\) denotes the noise predicted by the denoising layer.

However, it is worth noting that our method is complementary to label if the label is available. \(Loss_{l}\) is the task-specific supervised loss with label, \(\) is the trade-off parameter between two losses. The label-argumented learning is defined as:

\[Loss=(1-)Loss_{l}+ Loss_{p}\] (12)

Results in experiments Section 4.1 shows the improvement from label.

## 4 Experiments

Our proposed _DenoiseRep_ is a versatile method that can be incrementally applied to various discriminative tasks. Table 1 demonstrates that _DenoiseRep_ yields stable and substantial improvements across image classification, object detection, image segmentation, and person re-identification. Given that person re-identification is a nuanced image retrieval task that poses a greater challenge to feature discriminability, we take it as our benchmark for model analysis. Details of the experimental settings are provided in Appendix A. Additional experimental results on various tasks are presented in Appendices B, C, D, and E.

### Analysis of Label Informations

As mentioned in Section 3.3, _DenoiseRep_ is an unsupervised denoising module, and its training does not require the assistance of label information. We conduct the following experiments to identify three key issues.

   Task & Model & Backbone & Dataset & Metric & _Baseline_ & **+DenoiseRep** \\  Classification & SwinT  & SwinV2-T & ImageNet-1k & acc@1 & 81.82\% & 82.13\% \\ Person-ReID & TransReID-SSL  & ViT-S & MSMT17 & mAP & 66.30\% & 67.33\% \\ Detection & Mask-RCNN  & Swin-T & COCO & AP & 42.80\% & 44.30\% \\ Segmentation & FCN  & ResNet-50 & ADE20K & BIoU & 28.70\% & 29.90\% \\   

Table 1: Experimental results on various discriminative tasks.

   Method & DukeMTMC(\%) & MSMT17(\%) & Market1501(\%) & CUHK-03(\%) \\  TransReID-SSL & 81.20 & 66.30 & 91.20 & 83.50 \\
**+_DenoiseRep_ (label-free)_** & 81.72 (\(\) 0.52) & 66.87 (\(\) 0.57) & 91.82 (\(\) 0.62) & 83.72 (\(\) 0.22) \\
**+_DenoiseRep_ (label-aug)_** & 82.12 (\(\) 0.92) & 67.33 (\(\) 1.03) & 92.05 (\(\) 0.85) & 84.11 (\(\) 0.61) \\
**+_DenoiseRep_ (merged ds)_** & 81.78 (\(\) 0.58) & 66.99 (\(\) 0.69) & 91.80 (\(\) 0.60) & 83.86 (\(\) 0.36) \\   

Table 2: _DenoiseRep_ is a label-free method that can also be effectively complemented with labels when they are available. The table below analyzes the effectiveness of using labels. The baseline method, TransReID-SSL, is based on a ViT-small backbone. “Label-free” indicates training without labels, “label-augmented” refers to the use of labels, and ”merged dataset” denotes the use of combined datasets without labels.

(1) _Is this label-free and unsupervised training denoising plugin effective?_ As shown in Table 2 (line2), compared with baseline method (line1), the baseline method performs better after adding our **label-free** plugin, which shows that our method does have denoising capability for features.

(2) _Could introducing label information for supervised training further improve performance?_ Introducing label information is actually adding \(Loss_{l}\) as mentioned in Section 3.4 as a supervised signal. As shown in Table 2 (line3), baseline method with label-argumented _DenoiseRep_ achieve improvements of 0.32% - 0.70% on the mAP metric, indicating that our denoising plugin has label compatibility, in other words, the plug-in is effective for feature denoising regardless of label-argumented supervised or label-free unsupervised training.

(3) _Since our plugin can perform unsupervised denoising of features, it is natural to think about whether adding more data for training the plugin could further improve its performance?_ We merge four datasets for training and then test on each dataset using mAP to evaluate. Comparing the results of training on sigle dataset (line2) with on merged datasets (line4), we found that adopting other datasets for unsupervised learning can further improve the performance of _DenoiseRep_, which also proves that _DenoiseRep_ has good generalization ability.

To demonstrate that our method can perform unsupervised learning and has good generalization, we merged four datasets and rearranged the sequence IDs to ensure the reliability of the experiment. The model is tested on the entire dataset. During the training process, we freeze the baseline parameters and only train the _DenoiseRep_ module, without the need for labels, for unsupervised learning. Then test on a single dataset and compare the results of training on a single dataset. As shown in Table 2, it can be observed that adding unlabeled training data from different datasets can improve the model's performance on a single dataset, proving that this module has a certain degree of generalization.

### Comparison with State-of-the-Art ReID Methods

We compare several state-of-the-art ReID methods on four datasets. One of the best performing comparison methods is TransReID-SSL, which is a series of ReID methods based on the ViT backbones. Other methods are based on structures such as CNNs. We add our method to TransReID-SSL series and observe their performance. As shown in Table 3, we have the following findings:

(1) Our method stands out on four datasets on ViT-base backbone with a large number of parameters, achieving almost the best performance on two evaluation metrics.

(2) The methods using our plugin outperforms the original methods with the same backbone on all datasets. In addition, the performance improvement of small-scale backbones with the addition of _DenoiseRep_ is more significant than the large-scale backbones approach due to the fact that _DenoiseRep_ is essentially a denoising module that removes the noise contained in the features during

    &  & MSMT17 & Market1501 & DukeMTMC & CUHRO3-L \\  & & mAP & R1 & mAP & R1 & mAP & R1 & mAP & R1 \\  MGN  & ResNet-50 & – & – & 86.90 & 95.70 & 78.40 & 88.70 & 67.40 & 68.00 \\ OSNet  & OSNet & 52.90 & 78.70 & 84.90 & 94.80 & 73.50 & 88.60 & – & – \\ BAT-net  & GoogLeNet & 56.80 & 79.50 & 87.40 & 95.10 & 77.30 & 87.70 & 76.10 & 78.60 \\ ABD-Net  & ResNet-50 & 60.80 & 82.30 & 88.30 & 95.60 & 78.60 & 89.00 & – & – \\ RGA-SC  & ResNet-50 & 57.50 & 80.30 & 88.40 & 96.10 & – & – & 77.40 & 81.10 \\ ISP  & HRNet-W32 & – & – & 88.60 & 95.30 & 80.00 & 89.60 & 74.10 & 76.50 \\ CDNet  & CDNet & 54.70 & 78.90 & 86.00 & 95.10 & 76.80 & 88.60 & – & – \\ Normer  & ResNet-50 & 59.80 & 77.30 & 91.10 & 94.70 & 83.50 & 89.40 & 78.00 & 77.20 \\ TransReID  & ViT-base-ics & 67.70 & 85.30 & 89.00 & 95.10 & 82.20 & 90.70 & 84.10 & 86.40 \\ TransReID & ViT-base & 61.80 & 81.80 & 87.10 & 94.60 & 79.60 & 89.00 & 82.30 & 84.60 \\ TransReID-SSL  & ViT-small & 66.30 & 84.80 & 91.20 & 95.80 & 81.20 & 87.80 & 83.50 & 85.90 \\ TransReID-SSL & ViT-base & 75.00 & 89.50 & 93.10 & 96.52 & 84.10 & 92.60 & 87.80 & 89.20 \\ CLIP-REID  & ViT-base & 75.80 & 89.70 & 90.50 & 95.40 & 83.10 & 90.80 & – & – \\  TransReID + _DenoiseRep_ & ViT-base-ics & 68.10 & 85.72 & 89.56 & 95.50 & 82.35 & 90.87 & 84.15 & 86.39 \\ TransReID + _DenoiseRep_ & ViT-base & 62.23 & 82.02 & 87.25 & 94.63 & 80.12 & 89.33 & 82.44 & 84.61 \\ TransReID-SSL + _DenoiseRep_ & ViT-small & 67.33 & 85.50 & 92.05 & 96.68 & 82.12 & 88.72 & 84.11 & 86.47 \\ TransReID-SSL + _DenoiseRep_ & ViT-base & 75.35 & 89.62 & **93.26** & **96.55** & **84.31** & **92.90** & **88.08** & **89.29** \\ CLIP-REID + _DenoiseRep_ & ViT-base & **76.30** & **90.60** & 91.10 & 95.80 & 83.70 & 91.60 & – & – \\   

Table 3: Comparison with state-of-the-art ReID methods.

the inference stage. For large-scale backbones, the extracted features already have good performance, so the denoising amplitude is limited. It has already fitted the dataset well. For small-scale backbones with poor performance, due to their limited fitting ability, there is a certain amount of noise in the extracted features during the inference stage. Denoising them can obtain better feedback.

(3) In fact, our method can be applied to any other backbone, just add it to each layer. In particular, the performance improvement of adding the denoising plugin to a poorly performing backbone might be more significant. This needs to be further verified in subsequent work. However, it is undeniable that we have verified the denoising ability of the _DenoiseRep_ in the currently optimal ReID method.

In this section, a comparative analysis was conducted on four datasets to assess various existing ReID methods. These methods represent current mainstream ReID approaches, employing ResNet101, ViT-S, ViT-B, and ResNet50 as backbone architectures for feature extraction, respectively. Experimental results indicate that our proposed method outperforms other approaches in terms of both mAP and Rank-1 metrics.

### Analysis of Parameter Fusion

The proposed _DenoiseRep_ is computation-free. In section 3.3, we proved by theoretical derivation that inserting our denoising layer into each feature layer and fusion it does not introduce additional computation. In this section, we also conduct related validation experiments, the results of which are shown in Table 4.

Compare to the baseline method TransReID-SSL, adding _DenoiseRep\({}^{-}\)_ is able to improve the the performance, proving that feature based denoising is effective. However, it also brings extra inference latency (about 15%) because it is adding an extra parameter-independent denoising module at the end of the model.

Adopting _DenoiseRep_ achieves a greater increase, it denoise the features on each layer, which can better remove noise at each stage because the noise in the inference stage comes from multiple aspects, which may be the noise in the input image or generated when passing through the network. Denoising each layer avoids noise accumulation and obtains a better quality output. Most importantly, since the operation of fusion can merge the parameters of the denoising module with the original parameters, the adoption of _DenoiseRep_ does not take extra inference latency cost, which is a **computation-free** efficient approach.

### Experiments on Classification Tasks

The _DenoiseRep_ is based on denoising at the feature level and demonstrates strong generalization capabilities. To validate this generalization ability, we conduct experiments on other vision tasks to test the effectiveness of the _DenoiseRep_. We validate the generalization ability of _DenoiseRep_ in image classification tasks on ImageNet-1k  datasets and three fine-grained image classification datasets (CUB200 , Oxford-Pet , and Flowers ). The accuracy index is chosen as the evaluation metric to assess model performance.

As shown in Table 5, we compare multiple classic backbones for representation learning on ImageNet-1k, and after adding the _DenoiseRep_, the accuracy of both top-1 and top-5 metrics improve without adding model parameters. Our method shows significant improvement in accuracy metrics compared to baseline on three fine-grained classification datasets. Prove that the _DenoiseRep_ can improve the model's ability in image classification for different classification tasks. Additionally, our method proves to enhance the model's representation learning ability and extract more effective features

   Method & DukeMTMC & MSMT17 & Market1501 & CUHK-03 & Inference Time \\  TransReID-SSL & 81.20\% & 66.30\% & 91.20\% & 83.50\% & **0.34s** \\
**+_DenoiseRep_** & 81.56\% & 66.81\% & 91.07\% & 83.59\% & 0.39s (+15\%) \\
**+_DenoiseRep_** & 82.12\% & 67.33\% & 92.05\% & 84.11\% & **0.34s** (+0\%) \\   

Table 4: Parameter Fusion Performance Analysis. The _DenoiseRep\({}^{-}\)_ denoises based on the features of the final layer, while the _DenoiseRep_ denoises based on the features of each layer. The baseline method TransReID-SSL is based on ViT-small backbone.

through denoising without incurring additional time costs. More experimental analysis can be found in Table 7 in Section C of the appendix.

## 5 Conclusion

In this work, we demonstrate that the diffusion model paradigm is effective for feature level denoising in discriminative model, and propose a computation-free and label-free method: _DenoiseRep_. It utilizes the denoising ability of diffusion models to denoise the features in the feature extraction layer, and fuses the parameters of the denoising layer and the feature extraction layer, further improving retrieval accuracy without incurring additional computational costs. We validate the effectiveness of the _DenoiseRep_ method on multiple common image discrimination task datasets.