# The Iterative Optimal Brain Surgeon: Faster Sparse Recovery by Leveraging Second-Order Information

Diyuan Wu\({}^{1}\) Ionut-Vlad Modoranu\({}^{1}\) Mher Safaryan\({}^{1}\)

Denis Kuznedelev\({}^{2,3}\) Dan Alistarh\({}^{1}\)

\({}^{1}\)Institute of Science and Technology Austria (ISTA) \({}^{2}\)Yandex Research \({}^{3}\)Skoltech

###### Abstract

The rising footprint of machine learning has led to a focus on imposing _model sparsity_ as a means of reducing computational and memory costs. For deep neural networks (DNNs), the state-of-the-art accuracy-vs-sparsity is achieved by heuristics inspired by the classical Optimal Brain Surgeon (OBS) framework , which leverages loss curvature information to make better pruning decisions. Yet, these results still lack a solid theoretical understanding, and it is unclear whether they can be improved by leveraging connections to the wealth of work on sparse recovery algorithms. In this paper, we draw new connections between these two areas and present new sparse recovery algorithms inspired by the OBS framework that comes with theoretical guarantees under reasonable assumptions and have strong practical performance. Specifically, our work starts from the observation that we can leverage curvature information in OBS-like fashion upon the projection step of classic iterative sparse recovery algorithms such as IHT. We show for the first time that this leads both to improved convergence bounds under standard assumptions. Furthermore, we present extensions of this approach to the practical task of obtaining accurate sparse DNNs, and validate it experimentally at scale for Transformer-based models on vision and language tasks.

## 1 Introduction

The increased focus on efficiency in machine learning has led to significant interest in _sparsity_ as a means of reducing both the computational and memory costs of training and executing accurate models, with literally hundreds of methods being proposed recently .The key trade-off in this context is between the degree of sparsity imposed and the accuracy of the dense (uncompressed) model.

Currently, the best performing _post-training_ methods for DNNs are inspired by the Optimal Brain Damage (OBD) framework of LeCun et al. , generalized via the Optimal Brain Surgeon (OBS) approach of Hassibi and Stork , Hassibi et al. .1 In brief, OBD/OBS poses accurate pruning as a constrained optimization problem, and approximates the optimal solution by leveraging second-order information about the loss function to make better pruning decisions. Recently, there has been significant work on versions of OBS that can scale to deep neural networks (DNNs), leading to surprisingly good results at scale . Yet, no theoretical guarantees are known for OBS-type algorithms.

By contrast, the area of _sparse recovery_ provides a rich set of theoretically-justified iterative algorithms for reconstructing or approximating a high-dimensional but sparse signal from a limited set of observations, such as Iterative Hard Thresholding (IHT) (Blumensath and Davies, 2009) or Matching Pursuit (MP)-type (Tropp and Gilbert, 2007) algorithms. Yet, to our knowledge, these algorithms do not usually employ curvature information in their structure, and do not extend to DNNs.

It is still an open question whether one can connect these lines of work, for instance by leveraging second-order information to improve the convergence of sparse recovery algorithms, or by extending these algorithms to the more complex task of sparsifying multi-layer DNNs. This is the question we approach in this paper.

**Contributions.** In this paper, we propose a family of algorithms that generalize the post-training OBS framework to the iterative setting, popular in the context of sparse recovery. This new approach, which we call the Iterative Optimal Brain Surgeon (I-OBS), provides convergence guarantees that can improve upon classic algorithms such as IHT by leveraging second-order information on the sparse projection step. As a consequence, we provide the first theoretical guarantees for popular practical pruning heuristics such as OBC Frantar and Alistarh (2022) or WoodFisher (Singh and Alistarh, 2020). Second, on the practical side, we show that the improved guarantees can lead to faster practical convergence.

In more detail, our contributions are as follows:

* We propose a new family of sparse recovery algorithms called Iterative Optimal Brain Surgeon (I-OBS), which generalize upon the classic IHT-based algorithms by leveraging approximate second-order information in the sparse projection step.
* We prove that this family of algorithms provides faster analytical convergence rates than previously-known methods, under standard first- and second-order smoothness and strong convexity assumptions. We also show that prior practical pruning algorithms such as WoodFisher (Singh and Alistarh, 2020) and OBC (Frantar and Alistarh, 2022) are special cases of our framework, providing them with theoretical guarantees.
* We provide practical variants of these algorithms, which relax the theoretical constraints but can be easily implemented and can scale to large problem instances arising in the compression of vision and language models. We validate our results both on synthetic datasets, showing that our approach leads to faster convergence relative to IHT, and therefore validating our theoretical findings. Finally, we present empirical evidence that our approach can scale to large models and lead to improved results, by implementing it to accurately sparsify models with more than 1 billion parameters.

## 2 Related Work

**Model compression.** In recent years, the literature has witnessed a significant surge in research focusing on model compression. Among various techniques, network pruning or sparsification stands out as a powerful approach, effectively reducing the model's parameter count by eliminating the least influential weights and fine-tuning the remaining ones (Singh and Alistarh, 2020; Lin et al., 2020; Hoefler et al., 2021; Frantar and Alistarh, 2023). Following a similar concept to pruning, quantization techniques suggest reducing the precision of each parameter by allocating fewer bits, rather than completely removing weights from the network (Yao et al., 2022; Dettmers et al., 2022; Frantar et al., 2023; Kim et al., 2023). Additionally, methods that leverage low-rank factorization are gaining popularity due to their inherent tensor structure (Hu et al., 2022; Lialin et al., 2024; Xu et al., 2023; Nikdan et al., 2024). Notably, these compression methods are versatile, applicable during both the optimization and post-training phases. Another noteworthy technique is knowledge distillation (Hinton et al., 2014; Mishra and Marr, 2018; Polino et al., 2018), where the compressed model is a compact "student" model trained by a larger "teacher" model. The teacher model can either be already trained to high accuracy or trained simultaneously with the student model (Guo et al., 2020; Harutyunyan et al., 2023).

**Sparse recovery.** The model compression problem we study in this paper is closely related to the field of sparse recovery, which aims to optimize certain objective function based on sparsity constraints, see e.g. (Zhao, 2018) for a detailed introduction. One of the most common sparse optimization algorithms is the iterative hard thresholding algorithm (IHT) first proposed by Blumensath and Davies for compressed sensing problem, which applies a top\(k\) operator to each gradient update, which keeps the \(k\) elements with the largest magnitude and setting the rest to zero. While IHT is simple and effective, there is also a long line of work [Blumensath, 2012, Bahmani et al., 2013, Chen and Gu, 2017, Meng and Zhao, 2020, Zhou et al., 2021] that studies the sparse variants of Newton's methods for these sparse optimization problems, aiming to get acceleration benefits. In particular, Blumensath  proposed a general definition of accelerated IHT for sparse linear regression problems, and showed an accelerated convergence rate in this type of method. Bahmani et al.  proposed a general framework called GraSP, and they proposed to use a restricted Newton step as an approximation of the sparse constrained optimization problem. Chen and Gu  proposed a Fast Newton Hard Thresholding Pursuit, which uses an iterative algorithm to estimate the inverse Hessian matrix for a stochastic objective function. They also obtain a composite rate of convergence. Meng and Zhao  consider applying hard thresholding to Newton's method for sparse linear regression problems, where they call Newton-Step-Based Iterative Hard Thresholding (NSIHT), and prove a global convergence for this specific problem. Zhou et al.  proposed a general framework called Newton Hard Thresholding Pursuit (NHTP) for general sparse optimization problems showing implicit global and local quadratic convergence rates. In contrast to our approach, at each step NHTP selects the spare support based on the first-order gradient information, switches to restricted gradient update whenever the restricted Newton update fails to provide sufficiently good descent direction, and additionally incorporates a line search procedure to achieve global convergence.

**Further comparison.** Our work follows the salience-based weight pruning approach, which evaluates the impact of removing weights on the model's loss or output. Among these, methods based on second-order information are most relevant, particularly those following the Hassibi et al.  framework. Dong et al.  use a second-order approximation of the loss function, assuming a zero gradient, and introduce a layerwise strategy to approximate the Hessian. Singh and Alistarh  scale this idea with the empirical Fisher approximation of the Hessian, improving performance and considering non-zero gradients. However, WoodTaylor methods by Singh and Alistarh  focus on pruning one weight at a time, whereas our work extends this to multiple weights.

Other methods addressing multiple weight pruning include Combinatorial Brain Surgeon (CBS) [Yu et al., 2022], which formulates mask selection as an integer programming problem and proposes two heuristics to approximate its solution. Frantar and Alistarh  tackle layerwise pruning with a quadratic problem and introduces a greedy heuristic for efficient layerwise problem-solving. Similarly, Benbaki et al.  formulate layerwise pruning as a \(_{0}_{2}\)-regularized quadratic problem and propose an IHT-like iterative algorithm with a line search strategy. Aghasi et al.  minimize the norm of weight matrices while ensuring similar activations in the pruned layer. While prior iterative algorithms like CHITA [Benbaki et al., 2023] focus on specific problems, our methods apply to general loss functions beyond quadratic problems and offer convergence guarantees. Practically, within our iterative framework, using a cost-effective projection step (e.g., TopK or SparseGPT [Frantar and Alistarh, 2023]) yields competitive results compared to more complex one-shot solvers.

## 3 Derivation and convergence of I-OBS

**3.1. Notation.** Denote \([d]=\{1,2,,d\}\). For a given vector \(^{d}\), let \(()=\{i[d][i] 0\}\) be the support of \(\), and \(\|\|_{0}=|()|\) be the cardinality of its support, where \(||\) denotes the cardinality of a set. Let \(\{e_{1},e_{2},,e_{d}\}\) be the standard basis vectors in \(^{d}\). For a given index set \(Q[d]\), we define \(e_{Q}=_{q Q}e_{q}\), and \(()_{Q}=_{q Q}[q]e_{q}\) the restriction of \(\) to \(Q\). We denote \(^{}\) to be the Hadamard product of vectors \(\) and \(^{}\). Finally, we denote \(T_{k}\) the "Top-\(k\)" operator choosing the top \(k\) coordinates of the input by their magnitude and zeroing out the rest.

Next, we introduce notation for manipulating matrices by removing specific rows and columns. Given an index set \(Q[d]\), we define the square matrix \(_{Q}^{d d}\) with diagonal entries \((_{Q})_{i,i}=1\) for \(i Q\), and all other entries set to zero. Consequently, for a matrix \(^{d d}\), the result of the left multiplication \(_{Q}^{d d}\) yields a matrix where only the rows with indices in \(Q\) are retained, and all other rows are set to zero. Similarly, the right multiplication \(_{Q}^{d d}\) keeps the columns with indices in \(Q\) untouched, and sets all other columns to zero.

Analogously, for a given index set \(Q=\{q_{1},...,q_{|Q|}\}[d]\), define the rectangular matrix \(_{Q}^{|Q| d}\) as \(_{Q}=[e_{q_{1}}^{}\;\;e_{q_{2}}^{}\;\;\;\;e_{q_{|Q|}} ^{}]^{}\). Hence, for a matrix \(^{d d}\), the resulting matrix \(_{Q}^{|Q| d}\) is composed of the rows with indices in \(Q\). Similarly, \(_{Q}^{}^{d|Q|}\) is composed of columns with indices in \(Q\). Finally, given a real symmetric matrix \(^{d d}\), we denote the eigenvalues of \(\) as \(_{1}()_{d}()\), dropping \(\) in the notation when clear from context.

**3.2. Problem setup and assumptions.** We consider a general optimization problem with sparsity constraints:

\[_{^{d}}f()\|\|_ {0} k,\] (1)

where \(f:^{d}\) is a given smooth objective function of parameters \(^{d}\) and \(k\) is the sparsity threshold. Finding or approximating the solution of (1) is known to be NP-hard even for quadratics (Natarajan, 1995; Foster et al., 2015).

We make use of the following assumptions regarding the convexity and smoothness of the objective function, which are similar to those in e.g. (Peste et al., 2021):

**Assumption 1** (The existence of a sparse solution).: The function \(f()\) admits a minimizer \(^{*}\) with sparsity \(k^{*} d\).

**Assumption 2** (\(\)-Strong convexity).: The function \(f^{d}\) is differentiable and \(\)-strongly convex for some constant \(>0\), i.e., for any \(,^{}^{d}\) it holds

\[f() f(^{})+ f(^{}),- ^{}+\|-^{}\|_{2}^{2}.\] (2)

**Assumption 3** (\((k,d-k,L)\)-Restricted first-order smoothness).: The function \(f^{d}\) is twice differentiable and \(k\)-restricted \(L\)-smooth for some constant \(L>0\), i.e., for any \(^{d}\) such that \(\|\|_{0} k\) it holds that:

\[v^{}^{2}f()v L\|v\|_{2}^{2}, d-k$}.\] (3)

As our approach relies on curvature information, it is common to assume Hessian smoothness, similar to the gradient smoothness Assumption 3 in first-order optimization.

**Assumption 4** (\((2k+k^{*},M)\)-Restricted second-order smoothness).: The function \(f^{d}\) is twice differentiable and \((2k+k^{*})\)-restricted \(M\)-smooth for some constant \(M>0\), i.e., for any \(,^{}^{d}\) such that \(\|\|_{0}+\|^{}\|_{0} 2k+k^{*}\) it holds

\[\|^{2}f()-^{2}f(^{})\|_{2} M\|- ^{}\|_{2},\] (4)

where the norm for a matrix \(A\) is defined as \(\|A\|_{2}=_{\|x\|_{2}=1}\|Ax\|_{2}=(A^{}A)}\).

When the function is twice differentiable, note that the strong convexity (2) is equivalent to \(\|^{2}f()\|_{2}\) for all \(^{d}\). Also, the \((k,d-k,L)\)-Restricted first-order smoothness in Assumption 3 is weaker than \(L\)-smoothness given the function is twice differentiable, since \(L\)-smoothness require \(v^{}^{2}f()v L\|v\|_{2}^{2},\). Similarly, the \((2k+k^{*},M)\)-Restricted second-order smoothness assumption is weaker than the usual \(\)-second-order smoothness which requires \(\|^{2}f()-^{2}f(^{})\|_{2} M\|-^ {}\|_{2},,^{}^{d}\)

**3.3. IHT as a Proximal Point Method.** Proximal Point Methods (PPMs) are the backbone of many optimization procedures for solving problem (1). In each step, given the current parameters \(_{t}\), PPM defines the next iterate via

\[_{t+1}=*{arg\,min}_{^{d}}\ f()+ \|-_{t}\|^{2},\] (5)

for some learning rate \(>0\). The intuition behind adding a quadratic penalty term is to ensure that the next update \(_{t+1}\) is not far away from the current \(_{t}\). Clearly, we can consider PPM with sparsity constraint as in (1). However, solving (5) with or without a sparsity constraint is no easier than the initial problem of minimizing \(f()\).

To make this practical, we adopt a model-based viewpoint, where in each iteration we choose a (possibly stochastic) model \(_{t}()\) that approximates the objective function \(f()\) in expectation, namely \([_{t}()] f()\). For example, we might choose our model \(_{t}()=f(_{t})+ f(_{t}),-_{t}\) to be the linear part of the objective; together with the sparsity constraints, we arrive at

\[_{t+1}=*{arg\,min}_{:\|\|_{0} k}\ _{t}()+\|-_{t}\|^{2}.\] (6)

With this linear viewpoint, the problem (6) can be solved in closed form and we get the well-known _Iterative Hard Thresholding (IHT)_ method (Blumensath and Davies, 2009).

**Lemma 1**.: _The closed-form solution to (6) with linear model \(_{t}()=f(_{t})+ f(_{t}),-_{t}\) is_

\[_{t+1}=T_{k}(_{t}- f(_{t})).\]

The derivation of \(k\)-IHT is standard, and we provide the proof of Lemma 1 in Appendix B.2 for completeness. Note that, choosing the stochastic linear model \(_{t}()=f(_{t})+ g(_{t}),-_{t}\) with stochastic gradients \(g(_{t})\), the update (6) reduces to stochastic IHT (Peste et al., 2021). Besides, dropping the sparsity constraints recovers the standard stochastic gradient descent (SGD).

**3.4**.: **I-OBS: Leveraging Second-order Information.** Our intuition is that we can go beyond the standard Euclidean norm in (6) used in the regularizer, penalizing the distance from the current iterate, by incorporating local curvature information via the Hessian matrix \(_{t}=^{2}f(_{t})\) instead of the implicit scaled identity matrix \(\), which treats all coordinates equally and ignores correlations. Specifically, we can write:

\[_{t+1}=*{arg\,min}_{:\|\|_{0} k}\,_{t} ()+\|-_{t}\|_{_{t}}^{2}.\] (7)

Thus, in each iteration, we minimize the second-order approximation of \(f()\) at \(_{t}\) over the sparse non-convex domain. In turn, this leads us to the proposed Iterative OBS (I-OBS) method. Dropping the constant term \(f(_{t})\) of \(_{t}()\), I-OBS can be equivalently defined by

\[_{t+1}=*{arg\,min}_{:\|\|_{0} k}\,  f(_{t}),-_{t}+\|-_{t} \|_{_{t}}^{2}.\] (8)

We now introduce our idealized algorithm, which we call the Iterative Optimal Brain Surgeon (I-OBS), corresponding to Algorithm 1 with Option 2. The main intuition behind the algorithm is that the computation of \(_{t+1}\) in Eqn. (8) can be split into two phases: finding the optimal mask and then solving the problem with a given mask. We present the pseudocode below:

```
1:Input: initial value \(_{1}^{d}\), sparsity threshold \(k[d]\)
2:for each step \(t\{1,2,,T\}\)do
3: Compute the gradient \(g_{t}=_{}f(_{t})\) and the Hessian \(_{t}=_{}^{2}f(_{t}),\)
4: Compute dense Newton's update \(_{t}^{+}=_{t}-_{t}^{-1}g_{t}\)
5:\(\) Select the support/mask \(Q_{t+1}\) of size \(k\) or \(d-k\) indices \(S_{t+1}\) to prune for the next iterate
6:Option 1 (practical): \(Q_{t+1}=*{supp}T_{k}(_{t}^{+})\)
7:Option 2 (theoretical): with \(_{t}^{S}:=_{S}^{}(_{S}_{t} ^{-1}_{S}^{})^{-1}_{S}\), set \(Q_{t+1}=[d] S_{t+1}\) where \[S_{t+1}=*{arg\,min}_{S:|S|=d-k}(_{t}^{+})^{}_ {t}^{S}(_{t}^{+}),\]
8:\(\) Optimize the parameters over the selected support/mask \(Q_{t+1}\)
9:Option 1 (practical): \(_{t+1}=(_{t}^{+})_{Q_{t+1}}=T_{k}(_{t}^{+})\)
10:Option 2 (theoretical): \(_{t+1}=(-_{t}^{-1}_{t}^{S_{t+1}} )_{t}^{+}\)
11:endfor ```

**Algorithm 1** Iterative Optimal Brain Surgeon (I-OBS)

At each step of the algorithm, we first compute Newton's update \(_{t}^{+}=_{t}-_{t}^{-1}g_{t}\), which might be dense in general. Next, we proceed to select the support \(Q_{t+1}\), or equivalently, the set of indices \(S_{t+1}\) for pruning. Unfortunately, the selection of the theoretically optimal support set \(Q_{t+1}\) as outlined in _Option 2_ is intractable due to sparsity constraints. To address this limitation, we introduce the practical _Option 1_, which prioritizes parameters with the largest magnitudes.

Once the mask \(Q_{t+1}\) is determined, we optimize the remaining parameters to minimize loss. For _Option 1_, no further optimization is undertaken, and the subsequent iterate \(_{t+1}\) comprises just the top \(k\) elements with the largest absolute value of Newton's update \(_{t}^{+}\). On the other hand, the theoretical _Option 2_ adjusts the unpruned part of \(_{t}^{+}\) to precisely solve the sub-problem (8), as demonstrated in the lemma below.

**Lemma 2**.: _If \(_{t}\) is positive definite, then each step of Algorithm 1 (Option 2) solves Eqn.(8)._The iterative procedure Algorithm 1 with Option 2, is fairly complex to implement in practice for large models. However, it has a number of interesting theoretical properties and inspires practical extensions, which we describe in the next section. For the procedure Algorithm 1 with Option 1, we call it Top\(k\)-I-OBS, which we will discuss in more detail in section 3

Although it appears quite theoretical, the I-OBS algorithm is closely related to popular neural network pruning algorithms such as WoodFisher, WoodTaylor (Singh and Alistarh, 2020) and OBC (Frantar and Alistarh, 2022). In particular, both WoodFisher/WoodTaylor and OBC are special cases of the I-OBS algorithm.

Connection to WoodFisher/WoodTaylor (Singh and Alistarh, 2020)To recover the WoodFisher, we set \( f(_{0})=0\) and \(k=d-1\), obtaining (Singh and Alistarh, 2020, equation (10) and (11)). More specifically, in this case we have \(_{0}^{+}=_{0}\) and \(S=\{i\}\) is a singleton. Hence, the matrix \(_{0}^{S}\) can be computed as \(_{0}^{S}=e_{i}^{T}}{(H_{0}^{-1})_{ii}}\). Thus, the criterion of choosing the optimal index to prune becomes \(i=_{i[d]}^{2}[i]}{(H_{0}^{-1})_{ii}}\), which recovers (Singh and Alistarh, 2020, equation (11)). Also, the update of the remaining coordinates are computed as \(_{1}-_{0}=_{0}^{-1}e_{i}^{T}}{(H_{0}^{-1})_ {ii}}_{0}=[i]_{0}^{-1}e_{i}}{(H_{0}^{-1})_{ ii}}\), which recovers (Singh and Alistarh, 2020, equation (10)). This implies that WoodFisher can be considered as running I-OBS for one step under the assumption that \( f(_{0})=0\), and pruning one coordinate. Without the zero gradient assumption, we obtain the WoodTaylor method (Singh and Alistarh, 2020, Eqn. (23)). The computation is almost the same as the one for recovering WoodFisher, so we omit the details here.

Connection to OBC (Frantar and Alistarh, 2022)To recover the OBC, consider the objective function \(f()=\|-_{0}\|_{2}^{2}\), where \(^{n d}\) and \(,_{0}^{d}\). From a practical point of view, we consider \(\) as the input of a linear layer, and \(\) as a row-vector of the weight matrix. Note that a special property of this problem is that the objective function is quadratic, which implies that the Algorithm 1 converges in one step. Indeed, since the objective is quadratic, for any \(\) and \(_{0}\), we have \(f()=f(_{0})+ f(_{0}),-_{0}+ \|-_{0}\|_{2}^{2}\). However, the difficulty is that we need to find the optimal mask, which might be infeasible in practice. The OBC method (Frantar and Alistarh, 2022, Algorithm 1) applies a greedy strategy, wherein it sets \(k=d-1\) in the first step. Applying the I-OBS algorithm 1 and brute-forcing over all the masks, we find the optimal coordinate to prune. Since, in this case, we only prune one entry at a time, brute-forcing over all the masks takes \((d)\) steps, which is feasible. Then, one applies this procedure for \(d-k\) times to prune the rest of the weights. Thus, the OBC method can be viewed as running I-OBS for \(d-k\) rounds, and for each round one lets the sparsity be \(d-1\), i.e., only pruning one entry at a time.

### Local convergence of I-OBS

In this section, we present the local convergence of the I-OBS method described in Section 3 under the regularity Assumptions 1-4. As described in Algorithm 1, it contains a gradient step preconditioned by the Hessian matrix. Thus, our I-OBS method can be viewed as a sparse variant of Newton's method. Below, we demonstrate that, perhaps surprisingly, the imposed sparsity constraint does not degrade the asymptotic local quadratic convergence rate of Newton's method.

**Theorem 1**.: _Let Assumptions 1, 2, 3 and 4 hold. Then, for any fixed \(k\) with \(k^{*} k d\), the I-OBS algorithm has the following local quadratic convergence rate:_

\[\|_{t+1}-^{*}\|_{2}(1+}{ d-k}})\|_{t}-^{*}\|_{2}^{2}.\] (9)

The quadratic convergence rate in the form \(\|_{t+1}-^{*}\|_{2} c\|_{t}-^{*}\|_{2}^{2}\) implies a \(()\) iteration complexity for achieving an \(\)-error with initialization \(\|_{0}-^{*}\|_{2}\). This complexity matches the classical Newton's method up to constants. Due to space constraints, we defer the complete proof to Appendix B.4. Here, we provide a brief overview of the proof idea.

Proof sketch.: We split the error \(_{t+1}-^{*}\) into two parts: the standard error \(_{t}-_{t}^{-1} f(_{t})-^{*}\) corresponding to the Newton's method and an additional error \(_{t}^{-1}_{t}^{S^{t+1}}(_{t}-_{t}^ {-1} f(_{t}))\) stemming from the sparsity. The key technical challenge of the proof is to bound the second error by the first one, which then can be bounded by the squared error \(\|_{t}-^{*}\|_{2}^{2}\) using standard tools.

Notice that the matrix \(_{t}^{-1}_{t}^{S^{t+1}}\) of the second error term is a projection matrix (see Lemma 7). This observation allows bounding the error by \(\|_{t}-_{t}^{-1} f(_{t})\|_{2}\), which however, may not converge to zero as \(^{*}\) is missing. To get a tighter upper bound, we utilize the structure of \(_{t}^{S}\) and the definition of \(S^{t+1}\) to show

\[\|_{t}^{-1}_{t}^{S^{t+1}}_{t}^{+}\|_{2}}\|_{S}_{t}^{+}\|_{2}\] (10)

for any set \([d]\) with \(||=|S^{t+1}|=d-k\), where \(_{t}^{+}=_{t}-_{t}^{-1} f(_{t})\). Then, we choose the set \(\) to minimize the norm in the right, namely \(=[d]_{t}^{+}\). With this choice of the set \(\) we invoke Lemma 8 and get

\[\|_{S}_{t}^{+}\|_{2}=\|T_{k}(_{t}^{+})-_{t}^{+}\| _{2}}{d-k}}\|_{t}^{+}-^{*}\|_{2}.\] (11)

Combining (10) and (11) together with the bound \(\|_{t}^{+}-^{*}\|_{2}\|_{t}-^{*}\|_ {2}^{2}\) of the standard Newton's method concludes the proof of our main claim in Eqn. (9). 

**Discussion and Implications.** Although it offers strong convergence guarantees, the vanilla version of I-OBS is hard to implement in practice. The difficulties are two-fold. First, in computing \(_{t}^{S}\), we need to compute \((_{S}_{t}^{-1}_{t}^{})^{-1}\) which is the inverse of a \(|S||S|\) matrix, requiring \((|S|^{3})\) complexity in general. Also, if \(|S|=cd\) for some \(c(0,1)\), i.e. we prune a \(c\)-fraction of weight, then the complexity of this step will be \((d^{3})\). Second, to obtain the optimal set \(S^{t+1}\), we need to solve a combinatorial problem \(_{S|S|=d-k}(_{t}^{+})^{}_{t} ^{S}_{t}^{+}\). This problem is NP-hard (Chen et al., 2014; Natarajan, 1995), and brute-forcing over all possible sets has the complexity of \((d^{k})\). If \(k=cd\), then the complexity will be \((e^{d})\) which is too expensive in practical applications. Thus, we propose a practical variants of I-OBS which corresponds to Algorithm 1 (Option 1), namely Top\(k\)-I-OBS. We also provide local convergence guarantee for Top\(k\)-I-OBS. Besides, we also proposed another version called stochastic I-OBS in Appendix 3.

**3.6. A Practical Variant: Top\(k\)-OBS.** As mentioned above, one natural implementation of the I-OBS method in practice is to replace the multiplication by the matrix \(-_{t}^{-1}_{t}^{S^{t+1}}\) with directly applying the Top-\(k\) operator to the preconditioned gradient step. This leads to the following Top\(k\)-I-OBS update corresponding to Algorithm 1 with Option 1:

\[_{t+1}=T_{k}(_{t}-_{t}^{-1} f(_{t}))\] (12)

For the Top\(k\)-I-OBS method, we can still show local convergence similar to Theorem 1.

**Lemma 3**.: _Let Assumptions 1, 2, 3 and 4 hold. Then I-OBS method defined in (12) has the following convergence rate:_

\[\|_{t+1}-_{*}\|_{2}(1+}{k}}) {M}{2}\|_{t}-^{*}\|_{2}^{2}\] (13)

The proof is deferred to Appendix B.5. We remark that similar algorithms are studied for sparse linear regression problems with a linear global rate, while our Top\(k\)-I-OBS method applies to a wider class of problems, and obtains a quadratic local rate.

## 4 Experiments

### Synthetic Experiments for Sparse Linear Regression

To validate our theoretical analysis, we first consider the sparse linear regression problem with two different priors. First, we consider a sparse linear regression problem with Gaussian prior. In particular, we first sample a signal \(_{*}^{d}\) of dimension \(d=128\) from a standard Gaussian prior, and then we set it to be sparse by uniformly random keeping \(k_{*}=16\) entries, and set the rest to zero. Then, we generate \(n=256\) sensing vectors \(=[_{1},_{2},,_{n}]^{}^{n d}\) i.i.d. from a standard Gaussian distribution with variance \(\), and the label is generated via a linear measurement \(y_{i}=_{*},_{i}\). We aim to recover the signal by minimizing the empirical mean square loss \(()=\|-\|_{2}^{2}\), and set the sparsity for each step to \(k=64\). It is easy to see that in this case, the Hessian of the loss function is \(:=^{2}()=^{}\), and this matrix is with high probability positive definite.

We compare \(k\)-IHT (Peste et al., 2021) and Top\(k\)-I-OBS (12) numerically. For \(k\)-IHT, we apply the learning rate \(=()}\). We run each algorithm for \(750\) steps, and run \(20\) independent experiments then take the average over all the experiments. The synthetic experiments can be done on a personal laptop. The results are shown in Figure 0(a). We see that the top\(k\)-WoodTaylor method indeed has a better convergence rate compared to \(k\)-IHT due to the use of second-order information in Newton's step. In particular, the left plot of Figure 0(a) characterizes the training loss, and the right plot characterizes the distance to the optimal solution.

In the second setting, we let the signal be uniformly sampled from the MNIST dataset. In particular, we randomly sample an image of MNIST training dataset and use this image as the signal \(_{*}\). In this case, the dimension \(d\) of the signal is \(784\), and we denote the sparsity of the signal as \(k_{*}\). Next we generate \(n=2d=1568\) sensing vectors \(\) i.i.d from a standard Gaussian distribution with variance \(\), and the label is generated via a linear measurement \(y_{i}=_{*},_{i}\). Similarly, we minimize the MSE loss, and the sparsity we set for each step is \(k=2k_{*}\). We also compare \(k\)-IHT and Top\(k\)-I-OBS numerically. We run each algorithm for \(4000\) steps and run \(20\) independent experiments. For the \(k\)-IHT, similarly, we apply the maximum possible learning rate.

We show the recovered signals in Figure 0(b). (The learning curve is almost identical to the Gaussian case and therefore omitted.) When plotting the recovered image, we only plot the value between \(\). We can see from the learning curve that the Top\(k\)-I-OBS has a better convergence rate, which results in a better recovery quality compared to \(k\)-IHT for a fixed number of steps.

### Applying I-OBS to Model Pruning

In this section we describe our implementations for selecting the set of weights to prune using second order information applied to practical models.

```
1:Input: Sparsity threshold \(k_{}[d]\) for each layer \(\{1,2,,L\}\)
2:for each round \(t\{1,2,,T\}\)do
3: Sample a data batch \(X_{t}\)
4:\(\) Pruning and optimization step:
5:\(H^{0} X_{t}\)
6:for each layer \(\{1,2,,L\}\)do
7: Solve the constrained optimization problem \[_{^{}}\|W^{}_{t-1}H^{-1}-^{}H^{ -1}\|_{2}^{2}\ \ \ \ s.t.\ \ \|^{}\|_{0}=k_{}\] using a quadratic sparsity solver such as OBC or SparseGPT.
8:\(W^{}_{t-1}^{}\)
9:\(W^{}_{t} W^{}_{t-1}- g^{}_{t}(X_{t},W^{}_{t-1})\) for each \(\{1,2,,L\}\)
10:endfor
11:endfor ```

**Algorithm 2** Iterative Optimal Brain Surgeon (I-OBS) for practical model pruning

Figure 1: Comparison of \(k\)-IHT and Top\(k\)-WoodTaylor for sparse linear regression with standard Gaussian and MNIST priors.

Detailed algorithm.The algorithms we implement for pruning are described in Algorithm 2. We consider pruning an \(L\)-layer feedforward neural network \(f(X;W_{1}, W_{L})=_{L} W^{L}_{} W ^{}_{1} W^{1}X\), but a similar pruning strategy would apply to neural networks with different structure. More specifically, we consider a pretrained model, and we aim to find a sparse model using the I-OBS algorithm. We apply a layer-wise pruning strategy as in OBC (Frantar and Alistarh, 2022). In particular, for each round \(t\), we sample a new data batch \(X_{t}\), and solve the quadratic sparse optimization problem

\[_{}\|WX-X\|_{2}^{2} s.t.\ \ \|\|_{0}=k\]

where \(H^{}=_{-1} W^{-1}_{1} W^{1}X\) is the input of the \(\)-th layer. We use the SparseGPT method (Frantar and Alistarh, 2022) as an approximate solver for this problem. The connection between one-shot pruners such as OBC or SparseGPT and I-OBS was discussed in Section 3.

Example 1: Pruning Vision Transformers (ViTs).We now apply this approach to pruning DNNs from the ViT family (Dosovitskiy et al., 2021). For this, we instantiate the above pruning framework for the case of the SparseGPT solver in the context of I-OBS, to prune the DeiT-Tiny (5M parameters), DeiT-Small (22M parameters) and DeiT-Base (86M parameters) models in one shot to 50% uniform sparsity, starting from an accurate pretrained model, using 1000 ImageNet calibration samples. We present our results in Table 1, where the single-iteration result is given by the one-shot algorithm, which in this instance is SparseGPT.

The results show that I-OBS can bring consistent improvements across all three model sizes, with the largest improvements coming at the smallest model size (5M), where the performance drop relative to the dense model is most pronounced. We also observe that improvements quickly saturate at the larger model sizes and with respect to increasing the number of I-OBS iterations, suggesting that the sparse solution is already close to the local optimum in the case of highly-overparametrized models.

Example 2: Pruning Large Language Models (LLMs).Finally, we extend the previous approach to LLMs, again comparing against SparseGPT as a baseline. Specifically, we estimate the Hessian matrix at each layer by using 128 calibration samples from the WikiText2 dataset for OPT-125M and from Red Pajama dataset for Phi-1.5B, respectively. We report the accuracy in terms of perplexity (lower is better) on the WikiText2 and C4 datasets. In this scenario, we start from a dense model and prune it to \(50\%\) uniform sparsity, using I-OBS for \(3\) iterations. (We observed that using a larger number of iterations leads to "overfitting," by which we mean good PPL on WikiText2 but worsening on C4.) The results are given in Table 2.

In both cases, we observe that I-OBS leads to significant improvements in terms of perplexity, specifically of approximately one PPL point on C4, relative to SparseGPT. This effect confirms the fact that I-OBS is significantly better at minimizing the per-layer compression loss relative to a single iteration of SparseGPT.

    &  \\  & D & 1 & 10 & 25 & 50 & 75 & 100 \\ 
**DeiT-Tiny** & 72.08 & 62.98 & 63.61 & 64.01 & 64.11 & 64.13 & 64.05 \\
**DeiT-Small** & 79.81 & 76.07 & 76.28 & 76.36 & 76.50 & 76.57 & 76.57 \\
**DeiT-Base** & 81.91 & 80.29 & 80.30 & 80.37 & 80.42 & 80.46 & 80.43 \\   

Table 1: Pruning results for ViTs (DeiT) using SparseGPT. We report Top-1 accuracy results on the ImageNet validation set.

    &  &  &  \\  & & Dense & SparseGPT & I-OBS(3) & Dense & SparseGPT & I-OBS(3) \\ 
**OPT-125M** & 128 & 27.65 & 33.85 & 25.20 & 24.61 & 32.27 & 31.41 \\ 
**Phi-1.5** & 128 & 21.82 & 25.28 & 23.94 & 20.90 & 21.13 & 20.26 \\   

Table 2: Pruning results for Phi-1.5M using SparseGPT. We report perplexity (the lower, the better).

We also applied our methods on Llama-2(7B) and Llama-3(8B) models, and the results are discussed in Appendix A.2

## 5 Limitations and Future works

In this section, we discuss the limitation of this work, and address a few directions for future work.

From the theoretical perspective, our main limitation is the mild gap between the analytical assumptions and the practical setting we considered in the pruning experiments. We mention that our assumptions are standard in the literature (see e.g. (Peste et al., 2021, Analytical Assumptions]) to guarantee the convergence of gradient-based methods, it does not hold in general for practical problem such as model pruning. Thus, one interesting direction for future work is to relax those assumptions. In addition, in Theorem 1 and Lemma 3 we only provide local convergence rate, which mean that we require the initial distance from the global optimum to be small enough. While such local convergence results are typical for Newton type algorithms (see e.g. (Nesterov, 2018, Theorem 1.2.5)), there are a few modifications of the vanilla Newton's methods which gives a global convergence rate such as adding a cubic regularization term (Nesterov, 2018, Section 4.1) or adding a proper adaptive quadratic regularization term (Mishchenko, 2023). The challenge is how to incorporate the sparsity constrain to make each step sparse, and we leave this direction for future works. For the experiments, it would be interesting to apply the pruning method to larger models, which we plan to do in future work.