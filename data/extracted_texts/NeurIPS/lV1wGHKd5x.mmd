# Listenable Maps for Zero-Shot Audio Classifiers

Francesco Paissan\({}^{*}\)\({}^{1,2,5}\), Luca Della Libera\({}^{2,3}\), Mirco Ravanelli\({}^{2,3}\), Cem Subakan\({}^{2,3,4}\)

\({}^{1}\)Fondazione Bruno Kessler, \({}^{2}\)Mila, Quebec AI Institute, \({}^{3}\)Concordia University,

\({}^{4}\)Laval University, \({}^{5}\) University of Trento

Correspondance to fpaissan@fbk.eu

###### Abstract

Interpreting the decisions of deep learning models, including audio classifiers, is crucial for ensuring the transparency and trustworthiness of this technology. In this paper, we introduce LMAC-ZS (Listenable Maps for Zero-Shot Audio Classifiers), which, to the best of our knowledge, is the first decoder-based post-hoc explanation method for explaining the decisions of zero-shot audio classifiers. The proposed method utilizes a novel loss function that aims to closely reproduce the original similarity patterns between text-and-audio pairs in the generated explanations. We provide an extensive evaluation using the Contrastive Language-Audio Pretraining (CLAP) model to showcase that our interpreter remains faithful to the decisions in a zero-shot classification context. Moreover, we qualitatively show that our method produces meaningful explanations that correlate well with different text prompts.

## 1 Introduction

The widespread adoption of AI in critical decision-making processes makes interpreting the decisions of deep learning models crucial for ensuring transparency and trustworthiness. Recently, significant research has been devoted to explainable machine learning . These efforts aim to either employ interpretable models or explain the decisions of black-box models using posthoc explanation methods. In the audio domain, however, only a few works exist on interpretable audio classifiers [2; 3; 4] as well as on posthoc explanation methods [5; 6; 7; 8]. The latter contributions are limited to standard closed-set classification and do not explore the challenging topic of interpreting zero-shot classifiers. Zero-shot classifiers, on the other hand, are gaining popularity for their exceptional adaptability, as they define audio classes based on a set of textual prompts . The class labels are not necessarily predefined but can be generated dynamically during inference via natural language. The increased flexibility of zero-shot classifiers comes with a drawback: their predictions are challenging to interpret. This difficulty arises from their multi-modal nature, as learning an interpreter in the joint representation space between text and audio is required. A notable example of a zero-shot classifier is Contrastive Language Audio Pretraining (CLAP) , which jointly trains audio and text representations using contrastive learning, that we also work with in this paper.

This paper addresses the problem of posthoc explanations for zero-shot audio classifiers. To the best of our knowledge, this has never been attempted before in the literature. Following the masking idea proposed in , we propose LMAC-ZS (Listenable Maps for Audio Classifiers in the Zero-Shot context), which consists of a decoder (the interpreter) that outputs a saliency map capable of highlighting the regions within the input audio that trigger the zero-shot classification. We introduce a novel loss function that incentives faithfully following the similarity between the original audio and the corresponding text prompt. Our method provides listenable explanations for linear and non-linear frequency-scale short-time Fourier transform (STFT) representations of audio waveforms. It can also operate on the raw audio domain directly. We applied our explanation method on top of a pretrained version of the popular CLAP  by considering different zero-shot classification datasets, includingthe ESC50 , UrbanSound8K , as well as versions of ESC50 and UrbanSound8K where different types of contaminations are applied. We show extensive experimental results suggesting that the produced saliency maps correlate well with the corresponding text prompts and faithfully follow the original zero-shot classifier. In particular, our evaluation using various faithfulness metrics highlights that LMAC-ZS is able to provide explanations that are highly relevant to the decisions made by the CLAP model in the zero-shot context. Our method significantly outperforms traditional approaches such as GradCAM++ , highlighting their inefficiency in challenging tasks such as zero-shot audio classification.

In summary, our contributions are the following:

* We propose a new method, LMAC-ZS, to explain zero-shot audio classifiers.
* We show that LMAC-ZS maintains faithfulness to the CLAP predictions across diverse zero-shot scenarios.
* We qualitatively show that LMAC-ZS produces meaningful explanations for different text prompts.

### Related Work

Posthoc explanation methods aim to explain the decisions of pretrained neural networks. Several works exist on producing posthoc explanations with gradient-based approaches in the computer vision literature. These include the standard saliency method , GradCAM , GradCAM++ , SmoothGrad , Integrated Gradients (IG) , and several others. However, as suggested in , these methods often fail to follow the classifier very faithfully and tend to be insensitive even to random model weights. Another category of post-hoc explanation methods in computer vision generates explanations by applying masks to the input data. Key approaches in this category include [19; 20; 21; 22], which use optimization-based techniques to learn and generate these masks. There also exists a series of works that are most closely related to this paper, where a decoder is trained to produce explanations. Notable attempts in this vein include Dabkowski and Gal (2017) , Fan et al. (2017) , Zolna et al. (2020) , and Phang et al. (2020).

In the audio domain, several post-hoc explanation methods exist. These methods employ various techniques such as layer-wise relevance propagation , guided backpropagation , and LIME [28; 29; 6; 30]. More recent posthoc explanation methods that use a decoder to produce masks on spectrograms include Listen-to-Interpect , which uses a Non-Negative Matrix Factorization  based decoder to produce non-negative saliency maps. Other examples include Posthoc Interpretation via Quantization , which trains a VQ-VAE -based decoder as an explanation module, and Listenable Maps for Audio Classifiers , which trains a decoder using a classification loss to promote faithfulness. These works are not directly applicable to zero-shot classification as they require a predefined set of labels to train the interpreter. In this paper, our goal is to produce explanations in a true zero-shot fashion. To achieve that, we train our decoder on the same data as the CLAP model (without using class labels that we will later test on). Subsequently, LMAC-ZS can produce explanations for arbitrary labels, encoded as natural language. This includes labels not previously seen during the training of the interpreter.

## 2 Preliminaries

In this Section, we first present the learning methodology for audio-text cross-modal representations in Section 2.1. Then, we introduce masking-based posthoc explanations in Section 2.2.

Figure 1: **(left)** The training of the CLAP model for learning cross-modal representations. **(right)** Zero-shot classification with the CLAP model.

### Contrastive Learning of Audio-Text Cross-Modal Representations

The goal of learning audio-text cross-modal representations is to create a joint latent space between text and audio. CLAP (Contrastive Language-Audio Pretraining) , achieves this via contrastive learning. That is, the similarity between the latent representations of a text and audio signal is maximized if they form a pair, otherwise this similarity is minimized. More specifically, consider \(X_{t}\) and \(X_{a}\) as batches of text and audio data, respectively. Within the CLAP model, the latent representation is derived by passing the text and audio through their respective encoders, denoted as \(g_{t}(.)\) and \(g_{a}(.)\). This process produces the text and audio latent representations, denoted as \(L_{}=g_{}(X_{})\) and \(L_{}=g_{}(X_{})\), respectively. Here, \(L_{}\) is a matrix of dimensions \(^{N T}\), where \(N\) is the batch size and \(T\) represents the latent dimensionality of text. Similarly, \(L_{}\) is a matrix of dimensions \(^{N A}\), where \(A\) denotes the latent dimensionality of audio. CLAP trains a joint latent space by passing \(L_{}\) and \(L_{}\) through fully-connected layers such that,

\[t=_{}(L_{}),\ a=_{}(L_{}),\] (1)

where \((.)\) denotes the multi-layer perceptron transformation layers. The matrix \(t^{N d}\) and \(a^{N d}\) respectively denote the text and audio latent variables with the same latent dimensionality \(d\). As a shorthand for the rest of the paper we will denote the combination of encoders and the MLP with \(f_{}(.):=_{}(g_{}(.))\) and \(f_{}(.):=_{}(g_{}(.))\) for text and audio, respectively. The model aims to maximize the diagonal entries on the matrix \(C=ta^{}\). The matrix \(C^{N N}\) represents audio-text pairings. The diagonal elements \(C_{i,i}\) correspond to positive samples, while other elements are negative samples. This translates into the following training loss function:

\[(C)=-_{i=1}^{N}_{t}(C/ )_{i,i}+_{a}(C/)_{i,i},\] (2)

where \(_{t}(.)\) and \(_{a}(.)\) respectively denote Softmax functions along text and audio dimensions, \(\) is a temperature scaling parameter, and the \(C_{i,i}\) denotes the diagonal elements of the \(C\) matrix. We show the training forward pass pipeline in the left panel of Figure 1.

We would like to note that with this framework, the zero-shot classification amounts to calculating the similarity of the representation of a given audio with a set of text prompts, each corresponding to a class labels. Namely, the classification decision is taken as:

\[=_{j}t_{j}^{}a_{}=_{j}f_{}(_{j})^{}f_{}(X_{}^{}),\] (3)

where \(\) is the zero-shot classification decision, \(a_{}\) is the embedding for the test audio, and \(t_{j}\) is the text embedding corresponding to the label of class \(j\) (represented via \(_{j}\)). We show the pipeline of zero-shot classification in the right panel of Figure 1.

Figure 2: LMAC-ZS architecture. The input spectrogram (linear frequency) \(X_{i}\) (the \(i\)-th audio in the batch) first of all passes through the transformations (InputTf block) to make it compatible with the input domain (e.g. Mel Spectra) of the audio encoder \(f_{}(.)\), which yields the latent representations \(h_{i}\). These representations along with the text representation \(t_{j}\) (the \(j\)-th text prompt within the batch) are then fed to the decoder \(M_{}(.,.)\). The resulting mask is then element-wise multiplied with the input spectrogram \(X_{i}\). The masked spectrogram \(M X_{i}\) is then converted back to the input domain of the audio encoder, and the similarity score \(t_{i}^{}f_{}(M_{}(t_{i},h_{j}) X_{,j})\) is calculated, which is used in the overall training objective \(_{ZS}()\). The listenable explanation is produced by simply inverting the masked spectrogram through the inverse-STFT by incorporating the phase spectrogram of the input \(X_{}\).

### Saliency Maps For Fixed Set Audio Classifiers

In this work, we adopt a posthoc explanation method that uses a learnable decoder, following the masking idea introduced in L-MAC . Before we delve into how to generate a saliency map for a zero-shot classifier, we first explain how L-MAC produces a saliency map within the context of a standard classification setup. The loss function that is minimized during training in L-MAC to obtain faithful saliency maps is defined as follows:

\[()= (;f(M_{}(h) X))- (,f((1-M_{}(h)) X))+\|M _{}(h)\|_{1}.\] (4)

The first term in this loss function aims to maximally align the classifier prediction \(=_{c}f_{c}(X)\), with the classifier output obtained after masking the input, i.e. the logit \(f(M_{}(h) X)^{N_{C}}\), where \(N_{C}\) is the number of classes. Note that CrossEnt(.) denotes the CrossEntropy loss function. The decoder network \(M_{}(h)\) takes in the classifier representations \(h\) (which can consist of representations of several layers) and produces a mask (with values within the interval \(\) and same size as the input) that is element-wise multiplied with the input \(X\). A regularization term that consists of an \(L_{1}\) loss is also used to prevent trivial solutions, such as a mask with all values set to \(1\). The mask-out term \(-(,f((1-M_{}(h)) X))\) minimizes the relevance of the mask-out portion to the predicted class \(\). In the next section, we introduce our framework for explaining zero-shot classifiers (that we have defined in Section 2.1), which again applies a mask to the input to replicate the original text-audio similarities.

## 3 Saliency Maps for Zero-Shot Audio Classifiers

Similarly to the method introduced in L-MAC  and summarized in Section 2.2, our goal is to generate explanations that faithfully follow the model. However, in the context of zero-shot classifiers, we do not have a model that outputs a fixed number of logits. Hence, we need a different loss function that promotes faithfulness between the explanations and the zero-shot audio classifier, which relies on similarities to make its decisions. We denote the similarity between the \(i\)-th text prompt and \(j\)-th audio recording with \(C_{i,j}\) as,

\[C_{i,j}=t_{i}^{}a_{j}=t_{i}^{}f_{}(X_{,j}).\] (5)

Our methodology is based on obtaining a saliency map such that the text-audio cross-modal similarity matrix \(C\) is maximally preserved after masking the important parts of the spectrogram. In other words, we learn a decoder such that, after masking the audio, the similarity with text prompts within the batch is maximally preserved. To this end, we define the loss function as follows:

\[_{}()= _{i,j}C_{i,j}-t_{i}^{}f_{}M_{ }(t_{i},h_{j}) X_{,j}+_{1} M_{}(t_{i},h_{j})_{1}\] (6) \[+_{2}_{i}D(X_{,i}).\]

Here, the first term aims to minimize the discrepancy between the original similarities \(C_{i,j}\) and the similarities after masking the input audio \(X_{,j}^{T F}\) using the decoder \(M_{}(t_{i},h_{j})\), which outputs a mask of shape \(T F\). Importantly, the decoder is conditioned on both the text representation \(t_{i}=f_{}(X_{,i})\) that corresponds to the \(i\)-th text prompt in the batch, and the representations \(h_{j}\), which includes the last 4 representations obtained from the audio encoder \(f_{}(X_{,j})\). \(_{1},_{2}\) are tradeoff parameters.

The second term in Equation 6 promotes sparsity in the generated mask to avoid trivial solutions. Finally, the last term \(D(.)\) aims to increase the diversity of masks generated for a given audio when conditioned on different text prompts. It is defined as:

\[D(X_{,i})=_{j:j i}t_{i}^{}t_{j}-f_{}X_{,i} M_{}(t_{i},h_{i})^{}f_{ }X_{,i} M_{}(t_{j},h_{i}) .\] (7)

The goal of this term is to align the uni-modal similarity between text embeddings \(t_{i}\), \(t_{j}\) with the uni-modal similarity between the corresponding audio embeddings \(f_{}X_{,i} M_{}(t_{i},h_{i})\), \(f_{}X_{,i} M_{}(t_{j},h_{i})\), obtained from the corresponding masked spectrograms. The intuitionis that the similarity between two text prompts should be reflected in the similarity of the audio embeddings from the corresponding masked spectrograms: the farther the text prompts, the farther apart should be the corresponding audio embeddings from masked spectrograms, and thus, the more different the masks should be. We show the effectiveness of this term on diversity with respect to different text prompts in Section B. The overall pipeline is shown in Figure 2.

**Producing Listenable Explanations:** Our method employs its masking in the linear Short-Time Fourier Transform (STFT) domain, and therefore generating listenable explanations through the inverse-STFT is possible. The listenable explanation is obtained through the following operation,

\[x_{}=((X M)e^{jX_{}}),\] (8)

where both the explanation mask \(M\) and the input audio \(X\) are in the linear-scale STFT domain, and \(X_{}\) is the phase of the original input audio. This operation is also shown in Figure 2.

## 4 Experiments

### Metrics

To evaluate our method, we employ faithfulness metrics previously used in the audio interpretability literature for standard classification setups. We adapt such metrics to the zero-shot scenario by using the class prediction probabilities defined by audio-text similarities such that

\[p(c=j)=^{}a_{})}{_{k=1}^{N_{c}}(t_{k}^{ }a_{})},\] (9)

where \(p(c=j)\) is the probability of predicting the class that corresponds to the \(j\)-th text prompt and \(N_{c}\) is the total number of text prompts used in the zero-shot setting. Analogously to CLAP , to create prompts that correspond to the predefined classes in ESC50  and UrbanSound8K , we augment the class labels with the prefix _"this is the sound of"_, obtaining prompts such as _"this is the sound of baby crying"_, _"this is the sound of cat"_. When computing all the metrics for LMAC-ZS, we conditioned the decoder on the text prompt that corresponds to the model prediction \(= t_{j}^{}a_{}\).

**Faithfulness on Spectra (FF):** Introduced in , it assesses the importance of the provided explanation for the classifier. The metric is calculated by measuring how much does a class-specific prediction probability drops after removing the explanation signal from the original. It is defined as

\[_{n}=p_{}(X_{n})-p_{}(X_{n}-X_{int}),\]

where \(\) is the class prediction given by the classifier. High faithfulness values mean that the masked-in portion of the input spectrogram \(X\) is highly influential for the classifier decision of the predicted class \(\). We report the average faithfulness over all examples by reporting the average quantity \(=_{n}_{n}\). Larger is better.

**Average Increase (AI):** Introduced in , it measures the increase in confidence for the masked-in portion of the explanation, and it is calculated as follows:

\[=_{n=1}^{N}[p_{}(X_{n} M)>p_{ }(X_{n})] 100,\]

where \([.]\), is the indicator function, which is one if the argument is true, and zero otherwise. For this metric, larger is better.

**Average Drop (AD):** Introduced in , it measures the decrease in model confidence when the input image is masked, and it is calculated as follows:

\[=_{n=1}^{N}}(X_{n})-p_{ }(X_{n} M))}{p_{}(X_{n})} 100.\]

For this metric, smaller is better.

**Average Gain (AG):** Introduced in , it measures the increase in confidence after masking the input image. It is calculated as follows (larger is better):

\[=_{n=1}^{N}}(X_{n}  M)-p_{}(X_{n}))}{1-p_{}(X_{n})} 100.\]

**Input Fidelity (Fid-In):** Introduced in , it measures whether the classifier outputs the same class prediction on the masked-in portion of the input image. It is defined as the following and the larger is better,

\[=_{n=1}^{N}_{c}p_{c}(X_ {n})=_{c^{}}p_{c^{}}(X_{n} M).\]

**Sparseness (SPS):** Introduced in , it measures whether only values with large predicted saliency contribute to the prediction of the neural network. Larger values indicate more sparse/concise saliency maps. We use the implementation from the Quantus library .

**Complexity (COMP):** Introduced in , it measures the entropy of the distribution of contributions from each feature to the attribution. Smaller values indicate less complex explanations. We again use the implementation from the Quantus library.

### Experimental Setup

We use the official pretrained CLAP  weights2 to perform zero-shot classification on ESC50  and UrbanSound8K  datasets. We train LMAC-ZS on the datasets on which CLAP had been trained (namely, Clotho , FSD50K , AudioCaps , and MACS  which are publicly available). We also explored training LMAC-ZS only on Clotho to simulate the case where the computational budget is limited. The models were trained on a single NVIDIA RTX 3090 GPU. For the LMAC-ZS model that is trained on the Clotho dataset, we did 2 epochs on the complete dataset, for which an epoch approximately takes an hour. For the Full CLAP data we did 2 epochs as well, and an epoch takes around 4 hours. We quantitatively test whether LMAC-ZS follows the zero-shot classifier on In-Domain (ID) and Out-of-Domain (OOD) settings. For the In-Domain setting, we perform zero-shot classification on clean audio from ESC50 and UrbanSound8k and then produce explanations for the classifications using LMAC-ZS. We would like to emphasize that LMAC-ZS has only been trained on the training datasets for CLAP, and has not been fine-tuned on ESC50 or UrbanSound. For the Out-of-Domain setting, we contaminate the audio with various noise sources at 3dB Signal-to-Noise Ratio (other audio from the same dataset, white-noise, and human speech from the LJ-Speech  dataset).

We explore masking in the Mel-domain to explore the case where we produce explanations directly in the feature space on which CLAP operates. For Mel-domain we used 44.1kHz data on which the CLAP model is trained. We also explore masking in the linear frequency-scale log power-STFT

Figure 3: **(left) Mask-Mean vs Similarity for LMAC-ZS, (middle) Mask-Mean vs Similarity for GradCam++, (right) Model Randomization Test for LMAC-ZS and GradCam++.**domain to be able to provide listenable explanations. For STFT domain filtering we worked with 16kHz data. We would like to note that this results in slight changes in zero-shot classification accuracies, which are reported in the Tables 1, 2, 3. We trained LMAC-ZS with a batch size of 2 using the Adam optimizer  with a learning rate of 1e\({-5}\). The decoder consists of a series of transposed convolutions to upsample from CNN14  CLAP representations and incorporates text conditioning by using cross-attention similar to that used in Stable Diffusion . The implementation is done using the SpeechBrain toolkit [45; 46] and it can be accessed through 3.

### Quantitative Comparison

We compare LMAC-ZS with popular gradient-based saliency map methods including GradCam , GradCam++ , SmoothGrad , and Integrated Gradients (IG) . We apply these saliency map methods using only the CNN14 audio representations. The class logit with respect to which the class activation map for these methods is calculated is picked by using the zero-shot classification decision \(=_{j}t_{j}^{}a_{}\).

In Table 1, we compare the faithfulness of the explanations obtained on In-Domain data, where we performed zero-shot classification on clean ESC50 and US8k recordings. We observe that on ESC50 with Mel-Domain masking, LMAC-ZS obtains better AI, AD, AG, FF, and Fid-In values. We observe a similar trend for AI, AD, and AG with STFT-domain masking also, while FF values are comparable. On the UrbanSound8K dataset, we also observe that in terms of AI, AD, and AG the best results are obtained with LMAC-ZS trained with the Full CLAP training datasets. In terms of mask sparseness (SPS) and Complexity (COMP) in most cases, the best results are obtained with the proposed model.

In Table 2, we compare the faithfulness of the explanations obtained on ESC50 samples contaminated with three different types of background noises. We observe that with Mel-Masking, LMAC-ZS

  
**Metric** & AI (\(\)) & AD (\(\)) & AG (\(\)) & FF (\(\)) & Fid-In (\(\)) & SPS (\(\)) & COMP (\(\)) & MM \\   \\ GradCam & 2.90 & 45.85 & 1.01 & 0.28 & 0.19 & 0.71 & 9.52 & 0.15 \\ GradCam++ & 8.45 & 35.07 & 3.19 & 0.50 & 0.39 & 0.41 & 10.32 & 0.35 \\ SmoothGrad & 0.50 & 52.76 & 0.12 & 0.024 & 0.036 & 0.301 & 10.52 & 0.039 \\ IG & 0.25 & 53.47 & 0.054 & 0.064 & 0.022 & 0.57 & 10.09 & 0.037 \\
**LMAC-ZS (CT)** & **29.00** & **12.25** & **12.93** & 0.49 & **0.80** & 0.78 & 9.40 & 0.14 \\
**LMAC-ZS (Full)** & 23.45 & 17.12 & 10.31 & **0.51** & 0.68 & **0.80** & **9.12** & 0.17 \\   \\ GradCam & 20.30 & 23.75 & 7.77 & 0.78 & 0.58 & 0.72 & 11.54 & 0.14 \\ GradCam++ & 32.50 & 8.97 & 7.95 & 0.79 & 0.84 & 0.41 & 12.41 & 0.35 \\ SmoothGrad & 6.95 & 32.75 & 2.85 & 0.78 & 0.47 & 0.53 & 11.98 & 0.0001 \\ IG & 16.10 & 21.51 & 6.05 & **0.79** & 0.65 & **0.74** & 11.58 & 0.0095 \\
**LMAC-ZS (CT)** & 37.40 & 7.43 & **11.26** & 0.78 & 0.86 & 0.50 & **12.29** & 0.11 \\
**LMAC-ZS (Full)** & **43.35** & **4.29** & 10.57 & 0.78 & **0.90** & 0.65 & 11.86 & 0.1 \\   \\ GradCam & 2.34 & 47.55 & 1.09 & 0.26 & 0.16 & 0.78 & 9.32 & 0.12 \\ GradCam++ & 7.21 & 33.4 & 3.33 & **0.56** & 0.44 & 0.41 & 10.27 & 0.39 \\ SmoothGrad & 1.21 & 49.68 & 0.43 & 0.04 & 0.11 & 0.33 & 10.49 & 0.04 \\ IG & 0.98 & 50.77 & 0.35 & 0.15 & 0.09 & 0.60 & 10.02 & 0.03 \\
**LMAC-ZS (CT)** & 23.41 & 20.58 & 12.88 & 0.51 & 0.65 & **0.85** & 9.01 & 0.08 \\
**LMAC-ZS (Full)** & **35.69** & **15.65** & **18.19** & 0.48 & **0.72** & 0.79 & **8.95** & 0.17 \\   \\ GradCam & 18.67 & 26.1 & 11.18 & 0.79 & 0.53 & 0.77 & 11.41 & 0.12 \\ GradCam++ & 32.85 & 8.84 & 13.16 & 0.81 & 0.83 & 0.41 & 12.34 & 0.39 \\ SmoothGrad & 15.31 & 23.56 & 7.67 & **0.81** & 0.61 & 0.54 & 11.97 & 0.0001 \\ IG & 22.65 & 19.53 & 12.31 & 0.77 & 0.66 & **0.79** & 11.36 & 0.01 \\
**LMAC-ZS (CT)** & 32.71 & 14.57 & 14.69 & 0.75 & 0.72 & 0.55 & 12.12 & 0.08 \\
**LMAC-ZS (Full)** & **40.85** & **7.79** & **15.52** & 0.78 & **0.85** & 0.76 & **11.34** & 0.07 \\   

Table 1: In-Domain quantitative evaluation for the ESC50 and UrbanSound8K Datasets. Two versions of LMAC-ZS are compared: (CT) trained on the Clotho dataset only and (Full) trained on all CLAP datasets. MM denotes the Mask-Mean, the average value for the obtained masks.

reaches better performance in terms of AI, AD, AG, and very comparable numbers in terms of Fid-In. We also observe that in terms of Sparsity and Complexity LMAC-ZS yields better masks in the Mel Domain. In the STFT domain except for LJ-Speech contamination, we observe that LMAC-ZS obtains better performance in terms of AI, AD, and AG. We would like to note that GradCAM++ obtains better FF numbers in general, but we note that GradCAM++ mask areas are larger as shown in the last column with MM. We also observe similar trends for the explanations obtained on US8K samples contaminated with various background noises shown in Table 3. Another point to note is that in general LMAC-ZS trained on the full CLAP training set yields better performance. However, we observe that training LMAC-ZS only on the Clotho dataset yields to comparable or better performance (e.g. ESC50, Mel, white noise contamination). This shows that, in situations where there is limited access to computational resources, training only on Clotho can produce faithful explanations. We furthermore compare the effect of changing the size of the training set size for the interpreter in Appendix C.

### Qualitative Comparison and Sanity Checks

We provide some qualitative examples of generated explanations in Figure 4, and compare with GradCAM++ which seems to provide the most faithful explanations among the baselines according

  
**Metric** & AI (\(\)) & AD (\(\)) & AG (\(\)) & FF (\(\)) & Fid-In (\(\)) & SPS (\(\)) & COMP (\(\)) & MM \\   &  \\  & 6.78 & 40.71 & 3.13 & 0.29 & 0.19 & 0.69 & 9.66 & 0.18 \\  & 9.82 & 35.81 & 4.53 & **0.42** & 0.29 & 0.39 & 10.40 & 0.35 \\  & SmoothGrad & 0.62 & 48.55 & 0.13 & 0.024 & 0.022 & 0.29 & 10.54 & 0.039 \\  & IG & 0.55 & 48.88 & 0.091 & 0.073 & 0.020 & 0.56 & 10.13 & 0.039 \\  & 19.25 & 24.30 & 8.83 & 0.40 & 0.49 & 0.81 & 9.18 & 0.13 \\  & **LMAC-ZS (Full)** & **20.43** & **21.57** & **9.71** & **0.42** & **0.54** & **0.82** & **9.08** & 0.15 \\   &  \\  & 23.77 & 25.25 & 12.24 & 0.69 & 0.49 & 0.69 & **11.73** & 0.17 \\  & 29.52 & 14.84 & 10.17 & **0.70** & 0.70 & 0.39 & 12.48 & 0.35 \\  & SmoothGrad & 11.80 & 30.63 & 5.15 & **0.70** & 0.42 & 0.52 & 12.06 & 0.0002 \\  & 16.37 & 25.67 & 7.21 & **0.70** & 0.51 & **0.71** & 11.73 & 0.011 \\  & 35.65 & 12.23 & **13.04** & 0.69 & 0.74 & 0.53 & 12.18 & 0.09 \\  & **LMAC-ZS (Full)** & **39.4** & **8.28** & 11.81 & 0.69 & **0.80** & 0.67 & 11.79 & 0.09 \\   &  \\  & 3.65 & 43.79 & 1.43 & 0.34 & 0.12 & 0.75 & 9.41 & 0.14 \\  & GradCam++ & 7.12 & 37.03 & 2.97 & **0.52** & 0.26 & 0.43 & 10.33 & 0.335 \\  & SmoothGrad & 1.72 & 47.93 & 0.56 & 0.040 & 0.040 & 0.28 & 10.54 & 0.035 \\  & IG & 1.57 & 47.97 & 0.55 & 0.084 & 0.039 & 0.54 & 10.16 & 0.034 \\  & **LMAC-ZS (CT)** & **28.52** & **17.72** & **12.78** & 0.42 & **0.64** & 0.82 & 9.18 & 0.19 \\  & 14.25 & 27.92 & 6.62 & 0.41 & 0.42 & **0.86** & **8.86** & 0.11 \\   &  \\  & 14.92 & 31.89 & 5.95 & **0.66** & 0.32 & 0.77 & 11.40 & 0.12 \\  & GradCam++ & 19.50 & 24.01 & 8.04 & **0.66** & 0.50 & 0.42 & 12.42 & 0.33 \\  & SmoothGrad & 7.10 & 36.53 & 2.66 & **0.66** & 0.25 & 0.52 & 12.15 & 0.0004 \\  & IG & 10.17 & 34.35 & 4.89 & **0.66** & 0.30 & **0.69** & **11.80** & 0.011 \\  & 19.85 & 21.51 & 7.13 & 0.63 & 0.53 & 0.52 & 12.24 & 0.08 \\  & **LMAC-ZS (Full)** & **32.97** & **11.86** & **10.63** & 0.64 & **0.70** & 0.65 & 11.85 & 0.09 \\   &  \\  & 6.50 & 39.05 & 3.06 & 0.33 & 0.20 & 0.70 & 9.66 & 0.18 \\  & GradCam++ & 12.85 & 32.81 & 6.50 & **0.47** & 0.32 & 0.41 & 10.36 & 0.35 \\  & SmoothGrad & 0.63 & 47.40 & 0.17 & 0.03 & 0.02 & 0.28 & 10.55 & 0.04 \\  & IG & 0.53 & 47.70 & 0.10 & 0.10 & 0.01 & 0.56 & 10.12 & 0.04 \\  & **LMAC-ZS (CT)** & **24.38** & **20.69** & **11.29** & 0.43 & **0.56** & 0.80 & 9.26 & 0.11 \\  & 8.95 & 30.55 & 3.69 & 0.38 & 0.35 & **0.86** & **8.79** & 0.10 \\   &  \\  & 24.93 & 22.91 & **12.78** & **0.67** & 0.50 & 0.70 & 11.72 & 0.18 \\  & GradCam++ & 34.13 & **12.24** & 10.84 & **0.67** & **0.72** & 0.41 & 12.44 & 0.34 \\  & SmoothGrad & 9.18 & 29.60 & 3.91 & 0.67 & 0.40 & 0.53 & 12.05 & 0.00 \\  & IG & 15.55 & 27.15 & 6.51 & 0.66 & 0.46 & **0.73** & 11.67 & 0.01 \\  & **LMAC-ZS (CT)** & **25.77** & 17.79 & 9.67 & 0.63 & 0.63 & 0.61 & 11.96 & 0.04 \\  & **LMAC-ZS (Full)** & 25.73 & 15.90 & 7.23 & 0.66 & 0.62 & 0.72 & **11.47** & 0.05 \\   

Table 2: Out-of-Domain quantitative evaluation for the ESC50 Dataset.

to the Tables 1, 2, and 3. We see that LMAC-ZS generates explanations that are much more sensitive to the similarity between the text prompt and the input audio. For instance in LMAC-ZS explanations we see that if there exists a large similarity between the text prompt and the input audio, the mask correctly highlights relevant portions of the input spectrogram. Also, we see that if the similarity between the input and the text prompt is small then the mask tends not to highlight any areas as expected. For instance in Figure 4, we see for the input recordings that corresponds to a 'Cat', both LMAC-ZS and GradCAM++ return reasonable explanations. However, when we prompt LMAC-ZS for an unrelated prompt (e.g. 'Glass Breaking' in this case), it correctly returns an empty explanation mask, as it is impossible to explain. On the contrary, when GradCAM++ returns a class activation map corresponding to the class "Glass Breaking," we observe that the explanation remains unchanged.

To measure the correlation between the mask mean and similarity, Figure 3 presents a scatter plot depicting the relationship between the similarity of the input text prompt and audio. For LMAC-ZS, we observe that explanations are appropriately returned as empty (indicating small Mask-Means) when the similarity score, estimated using CLAP embeddings, is low. Whereas for GradCAM++, the mask mean and similarity appear to be independent of each other.

Finally, we conduct a cascading model randomization sanity check  to assess the sensitivity of explanations returned by LMAC-ZS to the CLAP weights. As illustrated in Figure 3, after three layers of randomization, the similarity drastically decreases for LMAC-ZS, while it remains constant for GradCAM++. We visualize these explanations in Figure 5 and provide additional samples in Appendix A.2. More qualitative samples are available through our companion website4.

## 5 Limitations and Societal Impact

**Limitations**: Our current implementation focuses on fixed-length audio for simplicity. However, the core methodology of LMAC-ZS can be extended to handle variable-length inputs. Additionally, while this work employs standard faithfulness metrics that analyze the dominant class contribution, LMAC-ZS allows for investigating contributions from the top k classes. Studying the top k contributions to faithfulness could provide further insights into the model's decision-making process. Lastly, our study is limited to the CLAP model, primarily selected for its widespread adoption within the field. It is worth mentioning that there is limited availability of alternatives. For instance, most alternative models such as LAION CLAP  are still variations of CLAP, offering minimal differences in their core architecture.

Figure 4: Qualitative Comparisons of Explanations given by LMAC-ZS, and GradCAM++, for two different classes. We see that LMAC-ZS shuts-off the explanation depending on the similarity of the given prompt with the input audio, whereas GradCAM++ remains insensitive to the class label.

**Societal Impact**: We believe this research has the potential for societal benefits, particularly in healthcare applications. While this work does not directly target medical diagnosis, improved explainability of audio classifiers for speech pathologies could make them more trustworthy and accepted by medical professionals. We do not see direct negative societal impacts from this research.

## 6 Conclusions

This paper, to the best of our knowledge, represents the first attempt to develop a model specifically designed for interpreting the decisions of pre-trained zero-shot audio classifiers. In particular, we introduce LMAC-ZS, a novel post-hoc explanation method employing a specialized decoder that generates saliency maps highlighting the regions of the audio input that most contribute to the model predictions. Extensive evaluations highlighted that LMAC-ZS effectively generates explanations that closely align with the decisions made by the CLAP model in zero-shot settings. Our quantitative and qualitative comparisons show that LMAC-ZS outperforms or is comparable to the most popular baseline saliency methods on most quantitative faithfulness metrics. Additionally, LMAC-ZS offers the possibility of being prompted for an explanation. This ability is missing in traditional methods and allows users to gain further insights into the decision-making processes conducted by the model.