# A Bayesian Take on Gaussian Process Networks

Enrico Giudice

Dep. of Mathematics and Computer Science

University of Basel, Basel, Switzerland

enrico.giudice@unibas.ch &Jack Kuipers

Dep. of Biosystems Science and Engineering

ETH Zurich, Basel, Switzerland

jack.kupers@bsse.ethz.ch &Giusi Moffa

Dep. of Mathematics and Computer Science, University of Basel, Basel, Switzerland

and Division of Psychiatry, University College London, London, UK

giusi.moffa@unibas.ch

###### Abstract

Gaussian Process Networks (GPNs) are a class of directed graphical models which employ Gaussian processes as priors for the conditional expectation of each variable given its parents in the network. The model allows the description of continuous joint distributions in a compact but flexible manner with minimal parametric assumptions on the dependencies between variables. Bayesian structure learning of GPNs requires computing the posterior over graphs of the network and is computationally infeasible even in low dimensions. This work implements Monte Carlo and Markov Chain Monte Carlo methods to sample from the posterior distribution of network structures. As such, the approach follows the Bayesian paradigm, comparing models via their marginal likelihood and computing the posterior probability of the GPN features. Simulation studies show that our method outperforms state-of-the-art algorithms in recovering the graphical structure of the network and provides an accurate approximation of its posterior distribution.

## 1 Introduction

Bayesian networks (BNs) are a powerful tool for compactly representing joint distributions and the underlying relationships among a large set of variables . These relationships are described via a directed acyclic graph (DAG), with each node in the graph representing a random variable. The joint distribution of a set of random variables \(=\{X_{1},...,X_{n}\}\) factorizes into conditional distributions for each variable given its parents in the DAG:

\[p()\,=\,_{i=1}^{n}\,p(X_{i}\,|\,_{X_{i}}).\] (1)

The DAG provides a visual description of the dependency structure among the variables, where missing edges encode conditional independence relations among pairs of variables. Thanks to their inherent flexibility and their ability to combine expert knowledge with data, Bayesian networks have been applied to a large range of domains .

In the absence of full prior knowledge of the underlying graph, inference on the structure is necessary. For this purpose, a plethora of _structure learning_ algorithms have been proposed, which involve either learning the structure from the conditional independence relations in the data (i.e. constraint-based) or assigning a score to each DAG and searching the graph space for high-scoring networks. A recent overview of current algorithms appears in Kitson et al.  while a reproducible workflow forbenchmark studies is available in Rios et al. . Hybrid methods combining both constraint- and score-based aspects generally offer current state-of-the-art performance.

Typical scoring functions rely on measures of goodness of fit of the graphical model for the given data, such as the Bayesian Information Criterion (BIC) and the Mutual Information Test (MIT) [24; 3]. Another common choice is to use the graph marginal likelihood that we can derive by integrating over the parameter prior on a graphical model. The vast majority of score-based methods implement searches aiming to maximise the scoring function and return one single optimal structure. By complementing the marginal likelihood with a graph prior, one can score graphs according to their posterior distribution and sample from it. By fully characterizing the posterior distribution over graphs it is possible to go beyond optimal point estimates and enable Bayesian model averaging. In this context, approaches have emerged to capture both network and parameter uncertainties across a variety of research areas [27; 1; 32].

Likewise, we focus on Bayesian methods which sample DAGs according to their posterior distribution. Unlike approaches based on maximizing the score function, which return a single graph estimate, Bayesian approaches provide a full posterior distribution over DAGs, which we can use to perform inference on the network's features of interest. However, Bayesian structure inference typically requires a parametric model for the conditional distributions of each variable given its parents in the network to compute the posterior. Variations of the BDe score  are the usual choice for discrete-variable networks. Other information theory-based score functions [41; 3] are not Bayesian since they do not estimate a marginal likelihood but rather provide a measure of fitness of a DAG to the data based on the minimum description length principle.

In the case of continuous-variable networks, most of the current research has focused on the linear-Gaussian case, due to the availability of the closed-form BGe score [12; 26]. When relaxing the linear-Gaussian assumption, current approaches fall outside of the Bayesian framework since they do not target a posterior probability for DAGs but rather search the DAG space for a high-scoring network by minimizing a generic loss function. For example, Elidan  employs rank correlation as a goodness-of-fit measure between a graph and the observed data; Sharma and van Beek  propose modeling the relations among variables via regression splines and scoring the networks via a cross-validated score. Using the formulation by Zheng et al.  of the structure learning problem as a constrained continuous optimization, Yu et al.  model the conditional distributions via a graph neural network.

In this work, we develop a sampling scheme to perform fully Bayesian structure inference on generic continuous-variable networks with potentially non-linear relations among variables. We follow the strategy of Friedman and Nachman  and model the functional dependencies between each variable and its parents via Gaussian process priors. We extend their approach to the Bayesian framework by making structural inference based on the posterior distribution, which also involves treating the hyperparameters of the model as random. After a short review in Section 2 of Bayesian structure inference, Gaussian processes and how they can be used to parameterize BNs, Section 3 proposes a sampling scheme to perform fully Bayesian inference on nonlinear, continuous networks. In Sections 4 and 5 we evaluate and compare our algorithm to existing approaches on simulated and real data.

## 2 Background

### Bayesian Structure Inference

When modeling a set of variables \(\) with a Bayesian network, a typical objective is to estimate the probability of a generic feature of interest \(\). Examples of such a feature are the presence and direction of certain edges, the topological ordering of nodes or conditional independence relations among variables. Given a complete set \(D\) of observations of \(\), we can obtain the posterior probability of \(\) by integrating the probability or presence of the feature over the posterior distribution of graphs:

\[p(\,|\,D)\,=\,_{}\,p(\,|\,)\,p( \,|\,D)\,,\,p(\,|\,D)\,\,p(D\,|\,)\,p( )\,,\] (2)

wherein a key component is the likelihood of the data integrated over the prior distribution of the parameters \(\) of the conditional distributions:

\[p(D\,|\,)\,= p(D\,|\,,)\,p(\,|\, )\,.\] (3)The marginal likelihood \(p(D\,|\,)\) for a given DAG \(\) is available in closed form for specific combinations of priors on parameters and likelihood functions [11; 12].

The number of DAGs grows super-exponentially in the number of nodes , hence exact posterior inference is still exponentially complex, making it effectively intractable for large networks . Approximate inference for \(p(\,|\,D)\) is possible if one can obtain samples \(_{1},...,_{M}\) from the posterior distribution over graphs \(p(\,|\,D)\).

Markov Chain Monte Carlo (MCMC) methods have successfully tackled the problem of posterior inference in the large and complex space of DAGs. The rationale consists of defining a Markov chain whose stationary distribution is the posterior distribution of interest \(p(\,|\,D)\). Madigan et al.  suggested a Metropolis-Hastings sampler: at each step, the algorithm proposes a new DAG \(^{}\) and it accepts or rejects it according to a probability \(\). The value of \(\) depends on the relative posterior probability \(p(^{}\,|\,D)\) of the proposal graph compared to that of the current DAG:

\[\,=\,\{1,^{}\,|\,D)\,Q(, ^{})}{p(\,|\,D)\,Q(^{},)}\}\] (4)

where \(Q(,)\) are the transition probabilities from one DAG to another. In its original formulation, the algorithm proposes a new graph by adding or deleting one edge from the current DAG, with \(Q\) uniformly distributed in the set of neighbouring DAGs (including the current one).

Several refinements to the original method have been made over the years, providing for example more efficient proposal distributions [14; 20; 44]. The order MCMC approach by Friedman and Koller  introduced an important variation by sampling in the space of node orderings, which is smaller and smoother than the space of DAGs. Because of these attractive properties of the sample space, the order MCMC algorithm achieves superior mixing and convergence results compared to regular structure MCMC. Sampling orders however introduces a bias in the resulting posterior since node orders do not induce a uniform coverage in the DAG space . The partition MCMC algorithm  corrects this bias in order MCMC by sampling in the larger space of ordered partitions of nodes to achieve unbiased samples from the posterior.

Current state-of-the-art methods rely on conditional independence tests to obtain a first coarse estimate of the structure to use as a starting point for a score-based method . More sophisticated approaches involve iteratively expanding the search space to correct for errors in its initial estimate . To achieve efficient posterior inference [49; 28] in the selected search space it helps to precompute all combinations of scores potentially needed in the chain so it can run at a very low computational cost.

Key to enabling efficient DAG sampling is _decomposability_, a property ensuring that we can express the posterior probability of a DAG \(\) as a product of local scores that depend only on each variable and its parents in \(\):

\[p(\,|\,D)\,\,_{i}^{n}S(X_{i},^{}_{ X_{i}}\,|\,D).\] (5)

Decomposability guarantees that we need to recompute only those scores whose parent sets have changed, or we can precompute all needed combinations of scores efficiently .

### Gaussian Processes

Gaussian processes are a flexible tool used in machine learning for regression and classification tasks. Formally, a Gaussian Process (GP) is a distribution over functions such that every finite collection of its function values \(\{f(x_{1}),f(x_{2}),...,f(x_{k})\}\) has a multivariate Gaussian distribution . A GP is therefore fully specified by its mean function \(m(x)=[f(x)]\) and covariance function \(k(x,x^{})=[f(x),f(x^{})]\). Due to their ability to model a large range of functional behaviours, GPs find common use as priors over regression functions \(f(X)=(Y\,|\,X)\). A common GP regression model assumes independent Gaussian additive noise:

\[Y\,=\,f(X)+, f(X)\,\,(0,k(x,x^{})), \,\,(,^{2}).\] (6)

Notably, GP models admit a closed-form expression of the marginal likelihood, in this case, the likelihood of the \(N\) observations \(y\) marginalised over the prior distribution of \(f\):

\[p(y)\,=\,(2)^{-}\,K+^{2}I^{} (-\,(y-)^{}(K+^{2}I)^{-1}(y-))\] (7)

where \(K\) is the \(N N\) Gram matrix \(K_{ij}=k(x_{i},x_{j})\).

### Gaussian Process Networks

Gaussian process networks (GPNs) refer to Bayesian networks whose conditional distributions are modeled via Gaussian process priors . The structural equation model defining the distribution of each variable \(X_{i}\) given its parents in a GPN is

\[X_{i}\,=\,f_{i}(_{X_{i}})+_{i}\] (8)

where \(_{i}\) has a normal distribution \((,^{2})\) independent of the data and a Gaussian process prior is placed on the function \(f_{i}\). Thanks to the nonparametric nature of GPs, the model in (8) can capture a wide range of functional dependencies between variables while maintaining the closed-form expression (7) for the marginal likelihood.

The covariance function \(k\) of the Gaussian process is typically parameterized by a set of hyperparameters \(\) which determine the behaviour of samples of \(f_{i}\) such as smoothness, shape or periodicity. When these hyperparameters (together with the noise mean \(\) and variance \(^{2}\)) are unknown they are typically learned by maximizing the marginal likelihood. Since the marginal likelihood and its derivatives are available in closed form, the optimization can be performed efficiently via gradient ascent . The GPN model enables structure learning of networks on continuous variables without the need to make strict parametric assumptions on the distributions of the variables. In scenarios even with low sample sizes, Friedman and Nachman  have shown that searching for the highest-scoring structure can accurately reconstruct the underlying DAG under different functional relationships.

When estimating the score of a GPN, the common approach to learning the hyperparameters by simple maximization can however lead to problematic estimates, since many local optima may exist . In addition, the resulting plug-in estimate of the marginal likelihood would not correctly reflect the uncertainty in the data of the full posterior. Bayesian model averaging provides a natural solution by integrating over the prior distribution of the hyperparameters to obtain a true marginal likelihood \(p(D\,|\,)\), which we can then use to perform posterior inference on the structure.

## 3 Bayesian Structure Inference for GPNs

In this section, we describe a method to sample from the posterior distribution \(p(\,|\,D)\) of a generic feature \(\) of a GPN for continuous, non-linear data. To implement a fully Bayesian approach, we place priors over the hyperparameters \(\) of the kernel function and the Gaussian noise.

\[X\,=\,f(_{X})+\,,\,\, (,^{2})\] (9) \[f\,\,\,(0,k_{}(.\,,.))\] \[\,\,()\,,, \,\,(,).\]

The priors ensure that the uncertainty in the functional relationships between each variable and its parents is fully accounted for. On the other hand, a maximum likelihood approach to estimating the hyperparameters could yield overly confident score functions and in turn misrepresent the posterior \(p(\,|\,D)\). Under the GPN model, the score remains decomposable, a necessary condition for its efficient evaluation. As in Section 2.1, making inference about network features \(\) of interest is possible by sampling graphs from the posterior:

\[p(\,|\,D)\,\,_{j=1}^{M}\,p(\,|\, _{j})\,,_{j}\,\,p(_{j}\,|\,D).\] (10)

Sampling graphs hinges on computing the scores of all variables given different combinations of their possible parent sets (see equation 5).

Let \(=\{,,\}\) be the \(d\)-dimensional set of hyperparameters for a given node \(X\) and its parents \(_{X}\). Unless stated otherwise, throughout the rest of the text we assume a uniform prior over all structures \(p() 1\). The score function is then the likelihood (7) of the observations \(x\) marginalized with respect to the hyperparameter priors:

\[S(X,_{X})\,= p(x\,|\,_{X},)\,( \,|\,_{X})\,.\] (11)

If a variable \(X\) has no parents then the Gram matrix of the kernel is zero and the score function reduces to a Gaussian marginal likelihood. Since the above score function is generally intractable,one option is to use Monte Carlo (MC) approaches such as bridge sampling  to approximate it. Bridge sampling employs a Gaussian proposal distribution \(g\) and a bridge function \(h\) chosen to minimize the MSE of the resulting estimator. The bridge sampling estimator of (11) is then defined as

\[S(X,_{X})\,\,}_{i=1}^{N_{1}}p(x\,|\, _{X},\,_{i})\,(_{i}\,|\,_{X})\,h(_{i}\,| \,_{X})}{}_{j=1}^{N_{2}}g(_{j}^{*}\,|\,_{X})\,h(_{j}^{*}\,|\,_{X})},\] (12)

\[_{i} g(\,|\,_{X}),\;\;\;_{j}^{*} p( \,|\,x,_{X}),\;\;\;i=1,...\,,N_{1},\;\;\;j=1,...\,,N_{2}.\]

The estimator is also a function of samples from the posterior of the hyperparameters \(p(\,|\,x,_{X})\), which can easily be obtained via MCMC sampling. One can show that other approaches such as importance sampling or harmonic mean are special cases of bridge sampling . MC methods based on bridge sampling provide consistent estimators for the marginal likelihood but may be biased for finite samples . Nonetheless, such methods can become computationally expensive in high dimensions (i.e. for large parent sets).

Since sampling DAGs via MCMC requires computing a large number of scores of potential parent sets, which may not all be represented in the final sample, we avoid computing these expandable scores by first running the MCMC algorithm using a Laplace approximation of the score (11) around the MAP value of \(\):

\[S_{}(X,_{X})\,=\,p(x\,|\,_{X},)\, (\,|\,_{X})\,}{|H|^{1/2}}\] (13)

\[\,=\,*{argmax}_{}p(x\,|\, _{X},)\,(\,|\,_{X}),\;\;H_{ij}\,=\, -p(x\,|\,_{X},)\,(\,|\,_{X })}{_{i}_{j}}_{=}.\]

We denote the resulting posterior probability of a DAG \(\) from this Laplace approximated score as \(q(\,|\,D)\) to distinguish it from the true posterior \(p(\,|\,D)\).

The Laplace approximate score provides an approximation of the posterior at a lower computational cost, speeding up considerably the running time of the MCMC algorithm used to sample graphs. After sampling \(M\) graphs in the first step with the Laplace approximate score, we can make inference with respect to the true posterior by re-computing the scores and performing importance sampling. To estimate the posterior probability of a feature of interest \(\) via importance sampling we evaluate

\[p(\,|\,D)\,\,^{M}\,p(\,|\,_{j})\,w_ {j}}{_{j=1}^{M}w_{j}}\,,\;\;w_{j}\,=\,_{j}\,|\,D)}{q( _{j}\,|\,D)}\] (14)

where \(p(_{j}\,|\,D)\) and \(q(_{j}\,|\,D)\) are the posterior probabilities of DAG \(_{j}\) computed respectively with the bridge sampling MC estimate (12) and the Laplace approximation (13) for the score. The two posteriors do not need to be normalized for valid posterior inference on \(\). This is because the normalizing constants in the importance sampling weights (14) cancel out. The procedure is summarized as pseudo-code in Algorithm 1.

Re-computing the score functions in a second step and implementing importance sampling is computationally advantageous compared to running the MCMC algorithm directly with the MC estimates of the scores. The advantage is simply due to the number of unique scores in the final chain being much lower than those evaluated or needed during the chain itself (see figure A.5 in the supplementary material). Regardless of the MCMC algorithm used, we expect a substantial improvement in run-time compared to using the MC scores directly.

### Implementation Details

Bayesian inference and optimization of the hyperparameters were performed via the Stan interface RStan . The library offers a highly efficient C++ implementation of the No U-turn sampler , providing state-of-the-art posterior inference on the hyperparameters. We performed MC estimation of the marginal likelihood via the bridgesampling package , which can easily be combined with fitted Stan models.

In the implementation of Algorithm 1 we use order or partition MCMC to generate the network samples \(q(_{j}\,|\,D)\); the procedure can however accommodate a variety of sampling methods, as long as they result in samples from the posterior. Given its good performance in benchmarking studies , we use the recent BiDAG  hybrid implementation for MCMC inference on the graph. The hybrid sampler requires an initial search space which is then improved upon to correct for possible estimation errors . As initial search space we take the output of the dual PC algorithm . For the bridge sampling estimator (12) of the marginal likelihood we used \(N_{1}=N_{2}=300\) particles from the proposal and posterior distribution over the hyperparameters. The proposal function \(g\) was set to a normal distribution, with its first two moments chosen to match those of the posterior distribution. R code to implement Algorithm 1 and reproduce the results in Sections 4 and 5 is available at https://github.com/enricoguiudice/LearningGPNs.

### Score Equivalence

Without any assumptions on the functional form of structural models, observational data cannot generally distinguish between any two DAGs within the same Markov equivalence class , since the joint distribution always factorizes according to either DAG. Scoring functions like the BGe that assign the same score to all DAGs in the same class satisfy score equivalence. Imposing parametric models on the local probability distributions of a Bayesian network may however break score equivalence. Specifically for GPNs, an alternative factorization may not admit a representation that follows the structural equation model in (8). Consequently, DAGs belonging to the same Markov equivalence class may display different scores and become identifiable beyond their equivalence class. For this reason, the GP score generally differentiates models according to the direction of any of their edges.

Importantly, the identifiability of otherwise score equivalent DAGs is a direct consequence of the assumptions underpinning the GPN model. Because the functions \(f_{i}\) are not generally invertible, the likelihood in (7) will assign higher values to functional dependencies that admit the GPN structural equation model. Further, Peters et al.  demonstrated that the asymmetry distinguishing between Markov equivalent factorizations holds beyond the case of non-invertible functions. Indeed, with the exception of the linear case, all structural models that take the form in (8) with additive Gaussian noise violate score equivalence and may identify a DAG beyond its Markov equivalence class. GPNs may encompass cases where equivalent DAGs are indistinguishable, such as when the functions \(f_{i}\) are linear. In this case, the computed scores of equivalent DAGs will be similar, as long as the GP prior allows learning sufficiently linear relations. The numerical experiments in supplementary Section A.1 show that the GP-based score function displays near score equivalent behaviour when the data come from a joint Gaussian distribution, coherently with theoretical considerations .

## 4 Experimental Results

We evaluate the Bayesian GP network inference scheme on data generated from known random networks with \(n=10\) nodes. The DAG structures are constructed from an Erdos-Renyi model, where each node has an independent probability of \(0.2\) to be connected with another with a higher topological ordering. For every node \(X_{i}\) in each randomly generated network, we then sample \(100\) observations as a non-linear function of its parents. The nonlinear data are generated by transforming the parents' instances using a weighted combination of six Fourier components

\[X_{i}\,=\,_{j|X_{j}\,\,_{X_{i}}}\!\!\!_{i,j}\!\{ \,w_{i,j,0}\,X_{j}\,+\,_{k=1}^{6}[\,v_{i,j,k}(kX_{j}) \,+\,w_{i,j,k}(kX_{j})]\}\,+\,_{i}.\] (15)

The weights \(v_{i,j,k}\) and \(w_{i,j,k}\) are sampled from a Dirichlet distribution with concentration parameters equal to seven positive exponentially decreasing values \(_{k}=}{_{k}e^{-k/}}\), for \(k=\{0,...,6\}\). Theparameter \(\) controls the rate of exponential decay, with values of \(\) close to zero providing mostly linear effects between variables and higher values resulting in increasingly non-linear relationships.

The edge coefficients \(_{i,j}\) determine the strength of the dependencies between \(X_{i}\) and its parents and are sampled from a uniform distribution on \((-2,-)(,2)\); the noise variable \(_{i}\) has a standard normal distribution. Instances of root nodes (nodes without parents) are also sampled from a standard normal. The linear-Gaussian case corresponds asymptotically to \(=0\); in this case, we set the weights \(v_{i,j,k}\) and \(w_{i,j,k}\) to zero except for \(w_{i,j,0}\).

We compare all structure learning algorithms in terms of structural Hamming distance (SHD) , which compares estimated graphs \(\) with the ground truth graph \(^{*}\). Following Lorch et al. , we compute the average \(\) of the samples weighted by the posterior:

\[-(p,^{*})\,\,_{}\, (,^{*})\,p(|D)\,.\] (16)

The \(-\) summarizes how close the estimated posterior is to the true DAG; lower values are therefore desirable. It is however not a direct measure of the similarity of the estimated posterior to the true posterior.

### Choice of Priors

Different choices of kernels for the GP prior result in different behaviours of the conditional expectation \(f\) in equation (9) of a variable \(X\) given its parents \(_{X}\). A simple model employs an additive kernel

\[k(.\,,.)\,=\,_{i=1}^{|_{X}|}k_{_{i}}(.\,,.)\] (17)

which corresponds to modeling each variable \(X\) as a sum of the individual contributions of each of its parents. The additive model serves to reduce the computational burden of calculating the scores by keeping the number of parameters as small as possible while preserving non-linearity in the model. The approach can however easily accommodate more complex relationships at a higher computational cost, such as an additive kernel with all first-order interactions :

\[k(.\,,.)\,=\,_{1}_{i=1}^{|_{X}|}k_{_{i}}(.\,,.)\,+\, _{2}_{i=1}^{|_{X}|}_{j=i+1}^{|_{X}|}k_{ _{i}}(.\,,.)\,k_{_{j}}(.\,,.)\,.\] (18)

For each parent \(Z(_{X})_{i}\) we used a squared exponential kernel function \(k_{_{i}}(z,z^{})=(-||^{2}}{2_{ i}^{2}})\), with each \(_{i}\) measuring the degree of non-linearity along the \(Z\)-th dimension. The kernel function has unit variance since the data are always normalized in the structure learning process. We assign the following independent prior distributions to the hyperparameter set \(=\{,,_{i}:i 1,...,|_{X}|\}\) of the GPN model (9):

\[_{i}\,\,(2,2),\,\,(0,1), \,\,(1,1).\] (19)

The inverse-gamma priors for each lengthscale \(_{i}\) and the noise variance suppress values near zero, which in either case would result in overfitting and degenerate behaviour of samples of \(f\). The additional parameters \(_{1}\) and \(_{2}\) of the kernel function (18) were assigned independent \((1,1)\) priors.

### Results

We compare two different versions of the GP-based structure learning scheme: the first one employs the order MCMC algorithm for sampling DAGs, and the second uses partition MCMC. We then compare both versions of the GPN sampling scheme with order and partition MCMC with the BGe score . To reduce the computational burden of the simulations, we employ the simpler additive kernel (17) for the GP score.

As an additional benchmark, we include the DiBS+ algorithm , which models the adjacency matrix probabilistically, using particle variational inference to approximate a posterior over structures. In the simulations, we parameterize DiBS+ by a neural network with one hidden layer with \(5\) nodes. We also consider methods which rely on the constraint-based PC algorithm , which learns a network by testing for conditional independence among the variables. Since these are not Bayesian methods, we bootstrap the data to obtain different graph estimates via the PC algorithm . To account for the non-linear dependencies between the variables we apply the kernel PC (kPC) algorithm  to the resampled data using two different independence tests: HSIC  and distance correlation .

Figure 1 shows, for three values of \(\), the distribution of \(-\) values for the different algorithms over the \(100\) generated structures. For non-linear data (\(=1\)), both versions of the GP samplers outperform existing methods: the median \(-\) for either of our algorithms is equal or lower than the bottom quartile of the BGe samplers. For linear (\(=0\)) and slightly non-linear data (\(=0.5\)), the GPN sampler performs competitively with the state-of-the-art BGe score-based sampling algorithms. All \(-\) values are computed with respect to DAGs; the results comparing completed partially directed acyclic graphs (CPDAGs) are available in figure A.3 in the supplementary material.

Figure 2 displays the run-times for the same methods as in figure 1. The run-times are stable across the different levels of non-linearity parameterized by \(\), with the k-PC algorithms being the most computationally expensive, followed by the GP score-based approach, DiBS+ and finally the BGe score-based MCMC methods which are the fastest.

Figure 1: Distribution of \(-\) values for all the different algorithms. \(=0\) corresponds to linear-Gaussian data while higher values increase the degree of non-linearity of the relations among variables.

Figure 2: Distribution of run-times for all the different algorithms. \(=0\) corresponds to linear-Gaussian data while higher values increase the degree of non-linearity of the relations among variables.

Besides estimating accurately the structure, our approach can quantify the uncertainty in its estimates via the sampled graphs from the posterior distribution over GPNs. To evaluate the accuracy of the sampling approach in estimating the general posterior over structures, we compare its estimated posterior distribution over DAGs with the "true" posterior, obtained by enumerating every possible structure and computing its score directly with equation (12). Due to the exceedingly large number of DAGs, this approach is only feasible with small structures. The left panel of figure 3 shows the reverse Kullback-Leibler (K-L) divergence between the estimated and true posteriors for a given network with \(n=4\) nodes, as a function of the number of samples \(M\) in the partition MCMC algorithm. The estimated ("GP, weighted") posterior probability \(p(\,|\,D)\) for a generic DAG \(\) is obtained by setting \(p(\,|\,_{j})=_{(_{j}=)}\) in equation (14). Reverse K-L divergence was chosen as a metric since the algorithms assign a probability of zero to DAGs that were not sampled.

The plot includes the divergence between the Laplace approximate posterior \(q(\,|\,D)\) in equation (14) and the true posterior, as well as between the posterior obtained with the BGE score and the true posterior. The divergence of the Laplace approximation is reduced by roughly one order of magnitude by weighting the samples via importance sampling. For reference, the DiBS+ algorithm yields a reverse K-L divergence of \(27.8\) with \(1000\) samples, i.e. two orders of magnitude higher than our approach, despite also being allocated longer run-times (see figure A.4 in the supplementary material). Sampling a higher number of graphs with DiBS+ quickly becomes infeasible since its run-time scales quadratically with the number of samples , while MCMC sampling scales linearly with \(M\). The right panel of figure 3 shows the posterior distributions over the \(543\) possible DAGs, for \(M=10^{4}\), obtained after complete enumeration and by sampling with different methods. The plots confirm that as the number of sampled DAGs increases, our approach can accurately reflect the full posterior uncertainty. The results also underline the importance of sampling from the hyperparameters' priors to obtain an accurate representation of the posterior, as the Laplace approximation of the marginal likelihood results in a highly biased approximation even when sampling a large number of DAGs.

## 5 Application on Protein Signaling Networks

We also applied the GP score-based structure inference to the flow cytometry dataset of Sachs et al.  to learn protein signaling pathways. The authors provide an accepted consensus network, which we used as reference. We considered the first experimental condition, consisting of \(853\) single-cell observations of \(n=11\) phosphoproteins and phospholipids in human T cells. The first three columns of table 1 show the performances of all the different algorithms in reconstructing the consensus network. The results include the GP model using the additive kernel (18) with all first-order interactions, denoted as GP\({}^{2}\). We measure the different algorithms in terms of the \(-\)

Figure 3: Left: reverse K-L divergence between the true posterior and the BGe posterior (green), the Laplace approximate posterior (blue) and the posterior obtained via importance sampling (red) as a function of the number of sampled DAGs. Right: the true posterior (gray) together with the BGe posterior (green), the Laplace approximate posterior (blue) and the posterior obtained via importance sampling (red). The majority of DAGs have a very low true posterior probability and are therefore never sampled by the MCMC algorithms (see inset).

as well as the \(\) and \(\), the absolute number of TP and FP edges in the DAGs weighted by the posterior, obtained by replacing the SHD in equation (16) by TP or FP, respectively.

One of the benefits of Bayesian structure inference is the possibility of deriving posterior probabilities of specific edges of interest in the network. In their work, Sachs et al.  experimentally tested two relationships between the proteins by intervening directly on the cells. By means of small interfering RNA inhibition, they concluded that the inhibition of Ekt has a direct effect on Akt, while there was a weaker and non-significant effect on PKA. We therefore expect an edge \(\) but no directed edge (or path) from Erk to PKA in the learned networks. The last two columns of table 1 display the posterior probabilities of these two features according to the different algorithms. GP- and BGe-based methods perform best, with the GP learner correctly assigning the highest probability to the edge \(\), while the lack of the edge Erk to PKA is predicted with a lower probability. The sparser BGe score-based methods assign a lower probability to the first edge, but correctly predict the absence of the second edge.

## 6 Conclusions

In this work, we have proposed a procedure that efficiently performs Bayesian structural inference on Gaussian process networks and estimates the posterior of generic features of interest. Building on the original GPN idea by Friedman and Nachman , we now embed it in a fully Bayesian framework. In particular, our approach involves placing priors on the hyperparameters of the score function and sampling DAGs via MCMC. Although more computationally expensive than a greedy search over the DAG space for a high-scoring network, the Bayesian approach allows one to accurately quantify the uncertainty in features of the network. This is made feasible by minimizing the number of scores to compute in an MCMC chain via importance sampling, as well as harnessing the advances in MC and MCMC methods [19; 28; 43; 45] that have been made since the introduction of GP networks.

The flexible nature of GPs allows the corresponding BNs to model a large range of functional dependencies between continuous variables. In the case of linear dependencies, our method remains competitive with state-of-the-art methods and exhibits desirable properties such as (approximate) score equivalence. The versatility of the model is particularly useful in domains where the nature of relations among variables in unknown and strict parametric assumptions on the distributions of the variables want to be avoided. Based on the promising simulation results and the convenient properties of the proposed method, we believe that it holds potential for making accurate inference on the underlying structure of BNs in complex domains.

#### Acknowledgements

The authors are grateful to acknowledge partial funding support for this work from the two Cantons of Basel through project grant PMB-02-18 granted by the ETH Zurich.

    & \(\) & \(\) & \(\) & Erk \(\) & Erk \(\) \\  GP, partition & 14.5 & 7.2 & 4.7 & 1 & 0.75 \\ GP, order & 14.6 & 6.8 & 4.4 & 1 & 0.42 \\ GP\({}^{2}\), partition & 16.7 & 6.6 & 6.3 & 1 & 0 \\ GP\({}^{2}\), order & 16.7 & 6.7 & 6.4 & 1 & 0.34 \\ BGe, partition & 15.9 & 4.3 & 3.2 & 0 & 1 \\ BGe, order & 15.3 & 4.4 & 2.7 & 0.17 & 0.98 \\ kPC-HSIC & 17 & 5.5 & 5.5 & 0.69 & 0.26 \\ kPC-DC & 16.9 & 6 & 5.8 & 0.72 & 0.28 \\ DiBS+ & 16.1 & 5 & 4.2 & 0.45 & 0.7 \\   

Table 1: Performance of the different algorithms in reconstructing the consensus network from flow cytometry data. The last two columns show the posterior probabilities of the two features experimentally validated by Sachs et al. , where the edge on the left should be present and the one on the right absent; up/down arrows indicate higher/lower values are better.