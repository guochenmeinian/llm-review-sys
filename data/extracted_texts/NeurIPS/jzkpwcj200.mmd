# Efficient multi-prompt evaluation of LLMs

Felipe Maia Polo\({}^{1}\)

Ronald Xu\({}^{2,6}\)

Lucas Weber\({}^{3}\)

Mirian Silva\({}^{4,5,6}\)

Onkar Bhardwaj\({}^{5,6}\)

**Leshem Choshen\({}^{2,5,6}\)**

**Allysson Flavio Melo de Oliveira\({}^{5,6}\)**

**Yuekai Sun\({}^{1}\)**

**Mikhail Yurochkin\({}^{5,6}\)**

\({}^{1}\)University of Michigan

\({}^{2}\)MIT

\({}^{3}\)University Pompeu Fabra

\({}^{4}\)Federal University of Minas Gerais

\({}^{5}\)IBM Research

\({}^{6}\)MIT-IBM Watson AI Lab

Corresponding author. E-mail: felipemaiapolo@gmail.com

###### Abstract

Most popular benchmarks for comparing LLMs rely on a limited set of prompt templates, which may not fully capture the LLMs' abilities and can affect the reproducibility of results on leaderboards. Many recent works empirically verify prompt sensitivity and advocate for changes in LLM evaluation. In this paper, we consider the problem of estimating the performance _distribution_ across many prompt variants instead of finding a single prompt to evaluate with. We introduce PromptEval, a method for estimating performance across a large set of prompts borrowing strength across prompts and examples to produce accurate estimates under practical evaluation budgets. The resulting distribution can be used to obtain performance quantiles to construct various robust performance metrics (e.g., top 95% quantile or median). We prove that PromptEval consistently estimates the performance distribution and demonstrate its efficacy empirically on three prominent LLM benchmarks: MMLU, BIG-bench Hard, and LMentry; for example, PromptEval can accurately estimate performance quantiles across 100 prompt templates on MMLU with a budget equivalent to two single-prompt evaluations. Moreover, we show how PromptEval can be useful in LLM-as-a-judge and best prompt identification applications.2

## 1 Introduction

In recent years, the rapid progress of large language models (LLMs) has significantly influenced various fields by enhancing automated text generation and comprehension. As these models advance in complexity and functionality, a key challenge that arises is their robust evaluation . Common evaluation methods, which often rely on a single or limited number of prompt templates, may not adequately reflect the typical model's capabilities . Furthermore, this approach can lead to unreliable and inconsistent rankings on LLM leaderboards, as different models may perform better or worse depending on the specific prompt

Figure 1: Average estimation error for performance quantiles across 100 templates given a limited budget (in multiples of one-template MMLU evaluations).

template used. An ideal evaluation framework should minimize dependence on any single prompt template and instead provide a holistic summary of performance across a broad set of templates. Mizrahi et al. (2023), for example, suggests using summary statistics, such as the average performance across many templates, as a way to compare the abilities of different LLMs. However, the main drawback of this method is the high computational cost when dealing with numerous templates and examples.

We introduce PromptEval, a method for efficient multi-prompt evaluation of LLMs. With a small number of evaluations, PromptEval estimates performance across a large and _given_ pool of different prompt templates. Our approach is grounded in robust theoretical foundations and utilizes well-established models from the fields of educational assessment and psychometrics, such as Item Response Theory (IRT) (Cai et al., 2016; Van der Linden, 2018; Brzezinska, 2020; Lord et al., 1968). Our method is based on an IRT model that allows borrowing strength across examples and prompt templates to produce accurate estimates of all considered prompts with an evaluation budget comparable to evaluating a single prompt. In Figure 1, we demonstrate the ability of our method to jointly estimate various performance quantiles across 100 prompt templates with an evaluation budget ranging from one to four times of a conventional single-prompt evaluation on MMLU (Hendrycks et al., 2020).

Performance distribution across prompts can be used to accommodate various contexts when comparing LLMs (Choshen et al., 2024). For example, it can be used to compute the mean performance as suggested by Mizrahi et al. (2023). One can also use performance distributions directly to compare LLMs via various notions of stochastic dominance for risk-sensitive scenarios (Nitsure et al., 2023). Here we primarily focus on the full distribution and its quantiles as they provide a flexible statistic that can inform decisions in varying contexts. For instance, a typical model performance corresponds to a median (50% quantile), 95% quantile can be interpreted as performance achievable by an expert prompt engineer, while 5% quantile is of interest in consumer-facing applications to quantify low-end performance for a user not familiar with prompt engineering. We also demonstrate (SS6) how our method can be used to account for prompt sensitivity in the LLM-as-a-judge framework (Li et al., 2023) and to do best prompt identification (Shi et al., 2024).

Our main contributions are:

* We propose (SS3) a novel method called PromptEval which permits efficient multi-prompt evaluation of LLMs for a _given_ pool of prompt templates with a limited number of evaluations. Moreover, we theoretically show (SS4) that PromptEval has desirable statistical properties such as consistency in estimating performance distribution and its quantiles.
* We practically demonstrate (SS5) efficacy of PromptEval in estimating performance across 100+ prompts and finding the best-performing prompt for various LLMs using data derived from three popular benchmarks: MMLU (Hendrycks et al., 2020), BIG-bench Hard (BBH) (Suzgun et al., 2022), and LMentry (Efrat et al., 2022).
* We show (SS6) how PromptEval can be applied to account for prompt sensitivity in the LLM-as-a-judge framework and to identify the best prompt in a large pool of options.
* We conduct the first large-scale study of prompt sensitivity of 15 popular open-source LLMs on MMLU. We present our findings based on evaluating 100 prompt templates in Section 7 and release the evaluation data.

### Related work

LLMs' sensitivity to prompt templatesThe sensitivity of Large Language Models (LLMs) to the prompts is well-documented. For example, Sclar et al. (2023) revealed that subtle variations in prompt templates in few-shot settings can lead to significant performance discrepancies among several open-source LLMs, with differences as large as 76 accuracy points in tasks from the SuperNat-unlInstructions dataset (Wang et al., 2022). Additionally, they report that the performance of different prompt templates tends to correlate weakly between models. This finding challenges the reliability of evaluation methods that depend on a single prompt template. To measure LLMs sensitivity, the researchers suggested calculating a "performance spread," which represents the difference between the best and worst performances observed. Mizrahi et al. (2023) conducted a complementary analysis using state-of-the-art models and subsets of BigBench and LMentry (Srivastava et al., 2022; Efrat et al., 2022). The authors arrive at similar conclusions with respect to LLMs' sensitivity to the used prompt templates and empirically showed that the LLM ranking considering different formats are usually weakly or intermediately correlated with each other. As a solution to the lack of robustness in LLM evaluation, the authors propose the use of summary statistics, as the average performance, for LLM evaluation. Some other works, _e.g._, Voronov et al. (2024); Weber et al. (2023, 2023), show that even when in-context examples are given to the models, the prompt templates can have a big impact on the final numbers, sometimes reducing the performance of the strongest model in their analyses to a random guess level Voronov et al. (2024). In a different direction, Shi et al. (2024) acknowledges that different prompt templates have different performances and proposes using best-arm-identification to efficiently select the best template for an application at hand. One major bottleneck is still on how to efficiently compute the performance distribution for LLMs over many prompt templates; we tackle this problem.

**Efficient evaluation of LLMs** The escalating size of models and datasets has led to increased evaluation costs. To streamline evaluations, Ye et al. (2023) considered minimizing the number of _tasks_ within Big-bench Srivastava et al. (2022). Additionally, Perlitz et al. (2023) observed that evaluations on HELM Liang et al. (2022) rely on diversity across datasets, though the quantity of examples currently utilized is unnecessarily large. Perlitz et al. (2023) also highlighted the problems in evaluating with insufficient prompts and called to evaluate on more, suggesting evaluating the typical behavior by sampling prompts and examples together by employing stratified sampling, where subscenarios give the strata; in our work, we also apply stratification but consider prompt templates and examples to give the strata. To accelerate evaluations for classification tasks, Vivek et al. (2023) suggested clustering evaluation examples based on model confidence in the correct class. More recently, Maia Polo et al. (2024) empirically showed that it is possible to shrink the size of modern LLM benchmarks and still retain good estimates for LLMs' performances. Similarly (and in parallel to this work) Ashury-Tahan et al. (2024) recognized unlabeled examples that better distinguish between models or prompts, by analyzing model outputs on them, hence saving costly annotation for them. Despite these advancements in streamlining LLM evaluations, there are no other works that propose a general and efficient method to estimate the benchmark performance of LLMs across prompt templates to the best of our knowledge.

**Item response theory (IRT)** IRT Cai et al. (2016); Van der Linden (2018); Brzezinska (2020); Lord et al. (1968) is a collection of statistical models initially developed in psychometrics to assess individuals' latent abilities through standardized tests but with increasing importance in the fields of artificial intelligence and natural language processing (NLP). For example, Lalor et al. (2016) used IRT's latent variables to measure language model abilities, Vania et al. (2021) applied IRT to benchmark language models and examine the saturation of benchmarks, and Rodriguez et al. (2021) explored various uses of IRT with language models, including predicting responses to unseen items, categorizing items by difficulty, and ranking models. Recently, Maia Polo et al. (2024); Shabtay et al. (2024) suggested using IRT for efficient LLM performance evaluation; both works used the Performance-IRT (pIRT) estimator to evaluate LLMs. PromptEval is built upon pIRT.

## 2 Problem statement

In this section, we describe the setup we work on and what our objectives are. Consider that we want to evaluate a large language model (LLM) in a certain dataset composed of \(J\) examples (also known as questions or items in the literature) and each one of the examples is responded to by the LLM through prompting; we assume that there exists \(I\) different prompt templates that can be used to evaluate the LLM. After the prompt template \(i[I]\) and example \(j[J]\) are channelled through the LLM, some grading system generates a correctness score \(Y_{ij}\{0,1\}\), which assumes \(1\) when the prompt template \(i\) and example \(j\) jointly yield a correct response and \(0\) otherwise3. For each one of the prompt templates \(i\), we can define its performance score as

\[S_{i}_{j}Y_{ij}.\]

The performance scores \(S_{i}\)'s can have a big variability, making the LLM evaluation reliant on the prompt choice. To have a comprehensive evaluation of the LLM, we propose computing the full _distribution of performances_ and its corresponding quantile function, _i.e._,

\[F(x)_{i}_{[S_{i},)}(x )\ \ \ \ Q(p)\{x:F(x) p\}.\] (2.1)The main challenge in obtaining this distribution is that it can be very expensive since the exact values for the performance scores \(S_{i}\)'s require \(I J\) evaluations. In this paper, we assume that only a small fraction of evaluations is available, _e.g._, \(<5\%\) of the total number of possible \(I J\) evaluations, but we still aim to accurately estimate the performance distribution and its quantiles. More concretely, we assume the correctness scores \(Y_{ij}\)'s are only evaluated for a small set of indices \(\); in compact notation, we define \(Y_{}\{Y_{ij}\}_{(i,j)}\). Here, the letter \(\) stands for _evaluations_. Using the observed data \(Y_{}\), our main objective is to estimate the performance scores distribution \(F\) (resp. quantile function \(Q\)), _i.e._, computing a function \(\) (resp. \(\)) that is _close_ to \(F\) (resp. \(Q\)).

## 3 Performance distribution and quantiles estimation

We propose borrowing strength across prompt templates and examples to produce accurate estimates for the performance distribution and its quantile function. To achieve that, we need a model for the correctness scores \(Y_{ij}\)'s that allows leveraging patterns in the observed data and estimators for individual \(S_{i}\)'s. We start this section by first introducing a general model for \(Y_{ij}\)'s and then we introduce our estimators for the performance distribution and quantile functions.

### The correctness model

We assume the observations \(Y_{ij}\)'s are independently sampled from a Bernoulli model parameterized by prompt/example-specific parameters. That is, we assume

\[Y_{ij}(_{ij}),\] (3.1)

where \(_{ij}\) denotes the mean of the Bernoulli distribution specific to prompt format \(i\) and example \(j\). We can write \(_{ij}=(_{i},_{j})\), where \(_{i}\)'s are prompt-specific parameters, \(_{j}\)'s are example-specific parameters and \(\) is a function that maps those parameters to the Bernoulli mean. This probabilistic model is very general and comprehends factor models such as the large class of Item Response Theory (IRT) models (Cai et al., 2016; Van der Linden, 2018; Brzezinska, 2020; Lord et al., 1968); as we will see, our model can be seen as a general version of an IRT model. For generality purposes, we assume that the parameters \(_{i}\)'s and \(_{j}\)'s can be written as functions of prompt-specific (\(x_{i}\)'s) and example-specific (\(z_{j}\)'s) vectors of covariates. That is, we assume \(_{i}=f_{}(x_{i})\) or \(_{j}=g_{}(z_{j})\), where \(\) and \(\) are global parameters that can be estimated. These covariates can be, for example, embeddings of prompt templates in the case of \(x_{i}\)'s and some categorization or content of each of the examples in the case of \(z_{j}\)'s. In this work, we adopt \((_{i},_{j})=(_{i}-_{j})=(f_{}(x_{i}) -g_{}(z_{j}))\), where \(\) denotes the standard logistic function and the functions \(f_{}\) and \(g_{}\) have their image in \(\). That is, our model assumes that

\[(Y_{ij}=1;,)=f_{}(x_{i})-g_{}(z_{ j})(x_{i})-g_{}(z_{j}))]}.\] (3.2)

The functions \(f_{}\) and \(g_{}\) can be represented with neural networks. On the simpler side, one could just assume \(f_{}\) and \(g_{}\) are linear, that is, \(_{i}=^{}x_{i}\) or \(_{j}=^{}z_{j}\); this formulation is known as the linear logistic test model in psychometrics (Fischer, 1973; De Boeck, 2004). We consider that, in some cases, a constant can be embedded in \(x_{i}\) in order to include an intercept in the model. When \(x_{i}\) and \(z_{j}\) are one-hot encoded vectors, _i.e._, vector of zeros but with 1's on the entries \(i\) and \(j\), the model in (3.2) reverts to a popular IRT model known as the Rasch model (Georg, 1960; Chen et al., 2023), which is widely used in fields such as recommendation systems (Starke et al., 2017) and educational testing (Clements et al., 2008). One major limitation of the basic Rasch model is that the number of parameters is large, compromising the quality of the estimates for \(\) and \(\) when either the number of prompt formats \(I\) or the number of examples \(J\) is large and \(||\) is small, _i.e._, only a few evaluations are carried out. This degradation in the quality of the estimates can directly affect the quality of the performance distribution estimates. Finally, we fit the parameters \(\) and \(\), obtaining the estimates \(\) and \(\), by maximizing the log-likelihood of the observed data (negative cross-entropy loss), _i.e._,

\[(,)_{,}_{(i,j)}Y_ {ij}(Y_{ij}=1;,)+(1-Y_{ij})(1-(Y_{ ij}=1;,)).\] (3.3)

Realize that fitting the model with linear/affine \(f_{}\) and \(g_{}\), including the Rasch model case4, reduces to fitting a logistic regression model with \(x_{i}\) and \(z_{j}\) as the covariates. This observation highlights that the fitting process is expected to be very cheap in practice. For example, in our experiments, we fit logistic regression models in datasets with less than 2k samples and a couple of hundred (or a few thousand) columns, which is performed in a few seconds by a modern laptop. We include some more comments on the computational complexity of our method in Appendix C.

### Performance distribution and quantiles estimation using the correctness model

The model in (3.1) can be naturally used for performance estimation. That is, after observing \(Y_{}\), the best approximation (in the mean-squared-error sense) for the performance of prompt format \(i\), \(S_{i}\), is given by the following conditional expectation

\[[S_{i} Y_{}]=}{|_{i}|} _{j_{i}}Y_{ij}+}{| _{i}|}_{j_{i}}_{ij}\]

where \(_{i}\{j:(i,j)\}\) and \(_{i}=|_{i}|/J\). In practice, computing \([S_{i} Y_{}]\) is impossible because the parameters \(_{i}\)'s and \(_{j}\)'s are unknown. We can, however, use a plug-in estimator for the conditional expectation using their maximum likelihood estimators, changing \(_{ij}\) for \(f_{}(x_{i})-g_{}(z_{j})\):

\[}[S_{i} Y_{}]=}{|_{ i}|}_{j_{i}}Y_{ij}+}{| _{i}|}_{j_{i}}f_{}(x_{ i})-g_{}(z_{j}).\] (3.4)

The basic version of this estimator, when no elaborate covariates (_e.g._, embeddings) are included, is known as the Performance-IRT (pIRT) estimator (Maia Polo et al., 2024). We can apply our extended version of pIRT, which we call X-pIRT, to estimate the performance distribution across prompt templates. After observing \(Y_{}\) and fitting \((,)\), we can compute \(_{i}}[S_{i} Y_{}]\) for all \(i\). Then, we define our estimators for the distribution of performances and its corresponding quantile function 2.1 as

\[(x)_{i}_{[_{i },)}(x)\ \ \ \ (p)\{x:(x) p\}.\] (3.5)

We name the procedure of obtaining \(\) and \(\) as PromptEval and summarize it in Algorithm 1.

```
1Input: (i) sets \(\) and \(\), (ii) budget \(B\).
2Output: Observed indices \(\).
3 Initialize \(=\{\}\).
4for\(b=0\) to \(B-1\)do
5 Among \(i\) with the least number of evaluations, randomly pick one of them and call it \(\).
6 Among \(j\) such that \((,j)\), randomly pick \(\) from the ones with the least number of evaluations.
7 Update \(\{(,)\}\)
8return\(\). ```

**Algorithm 2**Two-way balanced sampling

Sampling \(Y_{}\)We have assumed \(Y_{}\) is given so far. In practice, however, we need to choose \(\), with \(|| B\) where \(B\) is the budget, and then sample the entries \(Y_{ij}\) for all \((i,j)\). One possible option is sampling \((i,j)\) without replacement from \(\) giving the same sampling probability to all entries. This option is, however, suboptimal because of its high instability: with a high chance, there will be some prompt formats (or examples) with a very low number of evaluations while others will have many. A more stable solution is given by Algorithm 2, which balances the number of times each prompt format and examples are evaluated. Algorithm 2 can be seen as two-way stratified random sampling in which the number of examples observed for each prompt format is (roughly) the same and the number of prompt formats that observe each one of the examples is (roughly) the same.

Theoretical guarantees

In this section, we claim the consistency of the distribution and quantile estimators detailed in Algorithm 1 as \(I,J\). We prove a result for the case in which \(f_{}\) and \(g_{}\) are linear/affine functions. Before we introduce our results we need to introduce some basic conditions. As an extra result, in Appendix I.1 we also show that our extended version of pIRT (3.4), X-pIRT, is uniformly consistent over all \(i\), which can be useful beyond this work. We start by assuming that the covariates are uniformly bounded.

**Condition 4.1**.: _There is a universal constant \(c>0\) such that \(_{i}\|x_{i}\|_{2},_{j}\|z_ {j}\|_{2}<c\)._

The next condition requires the number of unseen examples to increase sufficiently fast as \(I,J\), which is a realistic condition under the low-budget setup. Weaker versions of this condition are possible; we adopt this one because it makes our proof simpler.

**Condition 4.2**.: _Assume (i) \(m=|_{i}|\) is the same for all \(i\)'s and grows to infinity and (ii) \(( m)/I\) as \(I,J\) for any \(>0\)._

The third condition requires the model we work with to be correctly specified and the maximum likelihood estimator defined in (3.3) to be consistent as \(I,J\), _i.e._, approach the true value. Evidently, \(||\) needs to grow to infinity as \(I,J\); nevertheless, it could be the case that \(||/(I J) 0\). When \(f_{}\) and \(g_{}\) are linear/affine, the maximum likelihood procedure (3.3) is equivalent to fitting a logistic regression model and, in that case, the convergence of \((,)\) is well-studied and holds under mild conditions when the dimensions of the covariates are fixed; see, for example, Fahrmeir and Kaufmann (1985).

**Condition 4.3**.: _The data point \(Y_{ij}\) is sampled from a Bernoulli distribution with mean \((_{0}^{}x_{i}-_{0}^{}z_{j})\) for some true global parameter values \(_{0}\) and \(_{0}\). Moreover, we assume that \((,)(_{0},_{0})\) in probability as \(I,J\)._

We now introduce the main result in Theorem 4.4, which shows the consistency of the distribution and quantile functions estimators introduced in Algorithm 1. See Appendix I for the proof.

**Theorem 4.4**.: _Under conditions 4.1, 4.2, and 4.3, it is true that_

\[|_{}(p)-Q_{}(p)| 0I,Jp,\]

_and that_

\[W_{1}(F,) 0I,J,\]

_where \(W_{1}(F,)\) is the Wasserstein 1-distance between the distributions \(F\) and \(\)._

## 5 Assessing multi-prompt evaluation strategies

General assessmentWe assess the performance distribution and quantile function estimation methodology introduced in SS3 in estimating the performance of LLMs and different prompt formats on data from three popular benchmarks. For a given LLM and a dataset, we consider two evaluation steps. First, we compare the full performance distribution with the estimated distribution, _i.e._, in this case, all quantiles are considered. To compare the full performance distribution \(F\) and its estimate \(\), both defined in SS3, we use the Wasserstein 1-distance which is equivalent to the average quantile estimation error in this case, _i.e._,

\[W_{1}(F,)=_{0}^{1}|Q(t)-(t)|t=_{i= 1}^{I}|S_{(i)}-_{(i)}|,\]

where \(S_{(i)}\) (resp. \(_{(i)}\)) is the \(i\)-th smallest value in \(\{S_{i}\}_{i}\) (resp. \(\{}[S_{i} Y_{}]\}_{i}\)). Second, we estimate some quantiles of interest (_e.g._, \(5/25/50/75/95\)-th) for the performance distribution across prompt formats and compare them with the true quantiles, that is, for some \(p\), we use \(|Q(p)-(p)|\) to measure the quality of our estimations.

DataWe use data derived from three popular benchmarks: MMLU (Hendrycks et al., 2020), BIG-bench Hard (BBH) (Suzgun et al., 2022), and LMentry (Efrat et al., 2022). In the following, we give more details about each one of the used datasets.

* MMLU is a multiple choice QA benchmark consisting of 57 subjects (tasks) comprising approximately 14k examples. We ran 15 different open-source LLMs (including different versions of Llama-3 (Meta, 2024), Mistral (Jiang et al., 2023), and Gemma (Gemma et al., 2024)) combined with 100 different prompt variations for each one of the MMLU tasks. We found that, within each one of the MMLU tasks, prompt templates can have great variability in their performances, making within-task analysis most suitable for assessing our method. More details and analysis of the collected data can be found in SS7 and Appendix J.
* BIG-bench Hard (BBH) is a curated subset of BIG-bench (Srivastava et al., 2022), containing challenging tasks on which LLMs underperform the average human score. For BBH, we use the evaluation scores released by Mizrahi et al. (2023). The evaluation data includes 11 open-source LLMs combined with a different number of prompt variations, ranging from 136 to 188 formats, for 15 tasks containing 100 examples each.
* LMentry consists of simple linguistic tasks designed to capture explainable and controllable linguistic phenomena. Like BBH, we use data generated by Mizrahi et al. (2023). The authors made available the full evaluation data from 16 open-source LLMs combined with a different number of prompt variations, ranging from 226 to 259 formats, for 10 tasks containing from 26 to 100 examples each.

Methods and baselinesWe consider different variations of the model presented in (3.2) coupled with Algorithm 1; for all variations, we use linear \(f_{}\) and \(g_{}\). The most basic version of the model in (3.2) assumes \(x_{i}\) and \(z_{j}\) are one-hot encoded vectors, _i.e._, vector of zeros with 1's on the entries \(i\) and \(j\), reverting the model to a Rasch model (Georg, 1960; Chen et al., 2023). Despite its simplicity, we show that it can perform well in some cases. A more advanced instance of (3.2) assumes \(x_{i}\) are either obtained using a sentence transformer (Reimers and Gurevych, 2019) to embed prompt templates or by extracting discrete covariates from the text, _e.g._, as the presence of line breaks, colons _etc._(see Appendix Table 2). An example of a prompt template for LMentry used by Mizrahi et al. (2023) is _"Can (category) be used to classify all the [words] provided? Respond with either "yes" or "no"_." Our method also allows using example covariates \(z_{j}\), however, upon preliminary tests with sentence transformer we didn't observe improvements and chose to use one-hot-encoded vectors as in the basic Rasch model to represent examples. Next we detail the methods for obtaining the prompt covariates:

* _Prompt embeddings_. We embed prompt templates using a pre-trained sentence transformer (Karpukhin et al., 2020) and reduce their dimensionality to \(d=25\) using PCA. This is the most general solution that also works well in practice. We call it EmbPT.
* _Fine-tuned prompt embeddings_. Sentence transformers in general might not be most suitable for embedding prompt templates, thus we also consider fine-tuning BERT (Devlin et al., 2019) as an embedder. To do so, we use evaluation data for all examples and prompt formats from a subset of LLMs (these LLMs are excluded when assessing the quality of our estimators) and fine-tune bert-base-uncased to predict \(Y_{ij}\) as in (3.3). We call this variation EmbFT and provide additional details in Appendix L. We acknowledge that obtaining such evaluation data for fine-tuning might be expensive, however, it might be justified in some applications if these embeddings provide sufficient savings for future LLM evaluations.
* _Discrete prompt covariates_. For BBH and LMentry, we coded a heuristic function that captures frequently occurring differences in common prompting templates. Examples of such covariates are the number of line breaks or the count of certain special characters (_e.g._, dashes or colons). Each one of these covariates is encoded in \(x_{i}\) for each one of the prompt templates \(i\). A full list of the used heuristics is detailed in Appendix M. For MMLU, we adopted approach of (Sclar et al., 2023) to generate prompt variations via templates (see Algorithm 3), which also provides a natural way to construct the covariates, _e.g._, the presence of dashes or colons.

To the best of our knowledge, the methods introduced in SS3 are the first ones handling the problem of efficient evaluation of performance _distribution_ of LLMs across multiple prompts. Thus, we compare different variations of our method with one natural baseline ("avg") which estimates \(S_{i}\) by simply averaging \(Y_{ij}\), that is, using the estimates \(_{i}^{}=_{i}|}_{j_{i} }Y_{ij}\). The estimates for the distribution and quantile function are then obtained by computing the function in (3.5) using \(_{i}^{}\) instead of \(_{i}\). To make comparisons fair, we sample the data using Algorithm 2 for all methods and the baseline.

Key resultsWe investigate the effectiveness of the different variations of PromptEval (PE) against the "avg" baseline strategy in quantile estimation and overall performance distribution estimation across prompt templates. In total, we consider five variations of PromptEval: (i) PE-Rasch (model in (3.2) is a Rach model), (ii) PE-discrete (discrete covariates are used for prompt templates), (iii) PE-EmbPT (pre-trained LLM embeddings are used for prompt templates), and (iv) PE-EmbPT (fine-tuned LLM embeddings are used for prompt templates). Within each one of the benchmarks, we conduct a different experiment for each one of the tasks, LLMs, and 5 random seeds used when sampling \(Y_{}\). We report the average estimation error across tasks, LLMs, and seeds, while the error bars are for the average estimation errors across LLMs. We collect results for four different numbers of total evaluations, where \(||\{200,400,800,1600\}\). To make our results more tangible, 200 evaluations are equivalent, on average, to \(1.15\%\) to the total number of evaluations on BBH, \(0.88\%\) to the total number of evaluations on LMentry, and \(0.81\%\) to the total number of evaluations on MMLU.

* _Distribution estimation_. Our results for distribution estimation can be seen in Figure 2. We see that, in general, all variations of PromptEval, including its simplest version (_PE-Rasch_), can do much better in distribution estimation when compared to the baseline. Among our methods, the ones that use covariates are the best ones.
* _Quantile estimation_. Our results for quantile estimation are presented in Figure 3. As before, even the simplest version of our method (_PE-Rasch_) does much better than the considered baseline. For all the other variations of PromptEval, estimating extreme quantiles is usually hard and needs more evaluations, while more central ones (_e.g._, median) can be accurately estimated with 200 evaluations, providing more than 100x compute saving in most cases. Regarding the different variations of PromptEval, we found that the pre-trained embeddings are robust across benchmarks, while the discrete covariates could not do well on LMentry data. Using covariates obtained via fine-tuning the BERT model provides some further improvements, for example, for extreme quantiles and small evaluation budget settings on MMLU. However, fine-tuning requires collecting

Figure 3: Performance quantile estimation errors for varying quantiles (columns) and benchmarks (rows).

Figure 2: Performance distribution estimation errors measured with Wasserstein-1 distance on three benchmarks.

large amounts of evaluation data and in most cases, we anticipate that it would be more practical to use PromptEval with pre-trained embedder and moderate evaluation budget instead.

## 6 Further applications of PromptEval

### Estimating the distribution of scores for the LLM-as-a-judge framework

In this subsection, we explore the concept of LLM-as-a-judge using the AlpacaEval 2.0 (Li et al., 2023) benchmark. Specifically, we generate 100 prompt templates5 to present to the judge, GPT-domini (OpenAI, 2024), allowing us to assess how sensitive model evaluation is to different evaluation prompts. We evaluated the performance of four LLMs with similar capabilities (Cohere Command6, Qwen1.5-7B-Chat (Team, 2024), Mistral-7B-Instruct-v0.2 (Jiang et al., 2023), LLaMa-2-70B-Chat (Touvron et al., 2023)) using only \( 2\%\) of the total evaluations (1.6k/80.5k). In contrast to the previous experiments, we do not make changes in the prompt templates given to the evaluated LLMs when giving an instruction. To fit PromptEval, we binarize AlpacaEval 2.0 instance scores imposing a threshold at \(1/2\), but we do not binarize the responses at test time. Figure 4 shows that the different variations of PromptEval can obtain a much lower Wasserstein loss (\(W_{1}\)) when compared with the baseline "avg". In Appendix G, we provide additional plots for this experiment. Specifically, Figure 11 presents the score distribution histograms for the four models under consideration, while Figure 12 illustrates how certain prompt templates consistently lead the judge to assign higher (or lower) scores across models. Despite this pattern, we observe that the ranking of the four LLMs changes in 36% of the prompt templates.

### Best-prompt identification

The best-prompt identification task (Shi et al., 2024) is to find the best prompt from a set of fixed templates, _i.e._, the one that gives the best performance for a task at hand. Shi et al. (2024) propose framing this problem as a bandit problem and using a linear model or an MLP to predict the performance of each prompt template. To apply PromptEval in this setting we use our model (3.2) and X-pIRT to estimate how good each template is coupled with sequential elimination algorithm (Azizi et al., 2021) (as in Shi et al. (2024)) to select prompt-example pairs for evaluation in each round. In Figure 5 we compare our PE to the baseline TRIPLE-GSE (Shi et al., 2024) with a logistic regression performance predictor and the same three types of covariates (PE-OneHot corresponds to PE-Rasch in previous experiments). For all covariate choices, we show that using PromptEval for best-prompt identification results in lower regret, _i.e._, the performance of the best template minus the performance of the chosen template. We include the full results for other benchmarks and also apply TRIPLE-GSE with an MLP in Appendix H.

Figure 4: Estimating LLM-as-a-judge distribution of scores for 100 prompt variations given to the judge.

Figure 5: Best-prompt identification.

## 7 Analysis of prompt sensitivity on MMLU

Prior work reports strong sensitivity of LLMs to spurious prompt template changes (see Section 1.1). For example, Sclar et al. (2023) observe performance changes of up to 80% for Natural Instructions tasks (Wang et al., 2022) due to template changes. Despite its popularity, no such analysis exists for the MMLU dataset to date. We here provide an in-depth analysis of MMLU prompt sensitivity.

Performance spreadWhen averaged across subjects, we observe relatively small performance spreads per LLM compared to other datasets in the literature (see Figure 16 in the Appendix K). For example, we can consistently identify Llama-3-70B-Instruct as the best performing model, independent of the prompt template. On the other hand, scores within individual subjects are highly inconsistent. Figure 6 shows the distribution of prompt spreads (max-min acc.) across subjects per LLM. Most LLMs demonstrate a significant average spread of around 10% at the subject level.

Template consistencyIn practice, having consistently performing templates is highly relevant _within a single LLM_ or _across LLMs_ for the same subject. To evaluate the template consistency, we rank template performances either across subjects or across LLMs to then calculate the agreement across those rankings using Kendall's \(W\)(Kendall and Smith, 1939, inspired by Mizrahi et al. 2023).

Within LLMs, we observe that Gemma-7B-it has a notably higher Kendall's \(W\) of 0.45 than any other model, meaning a fixed set of prompts performs best across many subjects (for full results, see Table 1 in the Appendix). Across LLMs, we do not observe high correlations within any of the subjects (see Figure 17 in Appendix K). Hence, similar to previous findings (Sclar et al., 2023), we do not identify any coherent template preferences across LLMs (for detailed results, see Appendix K).

## 8 Conclusion

PromptEval enables a more comprehensive evaluation of LLMs. We hope that comparing distributions or quantiles across many prompt variants will enable more robust leaderboards and address the common concern of comparing LLMs with a single pre-defined prompt. Prior to our work, a major limitation of such evaluation was its cost. We demonstrated empirically across several popular benchmarks that our method can produce accurate performance distribution and quantile estimates at the cost of 2-4 single-prompt evaluations, out of hundreds possible. However, several questions remain: how to decide on the set of prompts for evaluation and how to best utilize our distribution estimates for comparison in various contexts. For the former, we utilized suggestions from prior work (Mizrahi et al., 2023; Sclar et al., 2023) and for the latter, we primarily focused on quantiles as well-established robust performance measures.

Besides evaluation, another common problem in practice is finding the best prompt for a given task. Our method can be applied in this setting when there is a pre-defined set of candidate prompts (Figure 5). However, several recent works (Prasad et al., 2023; Yang et al., 2023; Li and Wu, 2023; Ye et al., 2023) demonstrate the benefits of dynamically generating new prompt candidates. For example, Prasad et al. (2023) propose an evolutionary algorithm that creates new prompts based on the ones that performed well at an earlier iteration. Extending PromptEval to accommodate an evolving set of prompt candidates is an interesting future work direction.

We comment on the limitations of our work in Appendix A.

## 9 Acknowledgements

This paper is based upon work supported by the National Science Foundation (NSF) under grants no. 2027737 and 2113373.

Figure 6: Accuracy spread across 57 subjects.