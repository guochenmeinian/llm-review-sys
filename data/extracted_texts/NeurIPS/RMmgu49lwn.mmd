# Image Understanding Makes for A Good Tokenizer

for Image Generation

Luting Wang\({}^{*}\)  Yang Zhao\({}^{1}\)  Zijian Zhang\({}^{1}\)  Jiashi Feng\({}^{1}\)  Si Liu\({}^{}\)  Bingyi Kang\({}^{1}\)

\({}^{1}\)ByteDance

Work done during an internship at ByteDance. Email: wangluting@buaa.edu.cn.Corresponding authors. Email: liusi@buaa.edu.cn, bingyikang@bytedance.com.Equal contribution.Project lead.

###### Abstract

Modern image generation (IG) models have been shown to capture rich semantics valuable for image understanding (IU) tasks. However, the potential of IU models to improve IG performance remains uncharted. We address this issue using a token-based IG framework, which relies on effective tokenizers to map images into token sequences. Currently, _pixel reconstruction_ (_e.g._, VQGAN) dominates the training objective for tokenizers. In contrast, our approach adopts the _feature reconstruction_ objective, where tokenizers are trained by distilling knowledge from pretrained IU encoders. Comprehensive comparisons indicate that tokenizers with strong IU capabilities achieve superior IG performance across a variety of metrics, datasets, tasks, and proposal networks. Notably, VQ-KDCLIP achieves \(4.10\) FID on ImageNet-1k. Visualization suggests that the superiority of VQ-KD can be partly attributed to the rich semantics within the VQ-KD codebook. We further introduce a straightforward pipeline to directly transform IU encoders into tokenizers, demonstrating exceptional effectiveness for IG tasks. These discoveries may energize further exploration into image tokenizer research and inspire the community to reassess the relationship between IU and IG. The code is released at https://github.com/magic-research/vector_quantization.

## 1 Introduction

Image understanding (IU) and image generation (IG) have been the core pursuits of computer vision research for a long time. Thanks to the progress in generative models  and network architectures , IG has witnessed remarkable advancements in recent years. These advancements spurred extensive research on leveraging powerful IG models for IU tasks (Fig. 1). Studies have shown that IG models can benefit IU tasks in various ways, including data augmentation through synthetic data generation , improved representation learning , and utilizing intermediate features from IG models for solving perception tasks . However, the reciprocal question remains largely uncharted: _how might IU models aid IG tasks?_

The primary focus of this paper lies in the AutoRegressive (AR) IG framework, which is gaining considerable attention for its excellence in generating high-quality images and videos . This framework operates in a two-stage process. The first stage learns a tokenizer to map images into sequences of discrete tokens. Subsequently, the second stage trains a proposal network to model the token sequences. As underlined by prior research , the quality of the tokenizers significantly influences overall IG performance. Meanwhile, tokenizers and IU encoders adhere to a similar structure as they both aim to map images into latent representations, either discrete or continuous. As a result, the token-based IG framework provides an optimal environment for investigating the relationship between IU and IG. Through comprehensive studies, we demonstratethat existing IU models from representation learning can be useful in generative models, even if they are not specifically designed for the IG task.

Our study involves training three components within the AR framework: tokenizer, decoder, and proposal network. Traditionally, _pixel reconstruction_ has been the dominant objective for training tokenizers, such as VQGAN  and FSQ . To the best of our knowledge, we are the first to systematically demonstrate that _feature reconstruction_ (VQ-KD ) achieves better IG performance. 1 This approach distills knowledge from pretrained IU encoders to tokenizers. Therefore, the training strategy of the IU encoder is crucial for the performance of the tokenizer. In this regard, we investigate four representative IU encoders: ViT , CLIP , DINO , and MAE . Following VQGAN , we train decoders to restore pixel values from discrete tokens, and proposal networks (AR or NAR) that can model the distribution of image tokens. The models are then evaluated using various metrics, including codebook usage, Frechet Inception Distance (FID) , Inception Score (IS) , perplexity (PPL), _etc_.

Initially, we compare the above tokenizers on IN-1k for class-conditional IG. VQ-KD achieves \(4.10\) FID\({}_{}\), outperforming VQGAN (\(15.78\) FID\({}_{}\)) by a large margin. FSQ experiments confirm that the superiority of VQ-KD is not solely attributable to the specific quantization operation or high codebook usage. More generally, VQ-KD consistently outperforms across different proposal networks, datasets, and tasks.

We analyze VQ-KD from multiple perspectives. By visualizing the codebook, we discover that codes from VQ-KD carry more semantics than VQGAN, which makes them easier to model and subsequently improve the IG quality. Building upon this insight, we propose a straightforward pipeline to efficiently transform IU encoders into tokenizers, outperforming VQ-KD on the MS-COCO dataset. We also find that tokenizers with weaker IU capabilities require larger proposal networks for effective AR modeling and show less robustness to variations in the training images. Finally, we conduct qualitative analysis to present the visual results.

In sum, the key insights from our study include the following: 1) This research is the first to demonstrate that IU models can substantially enhance IG through VQ-KD; 2) Tokenizers with strong IU capabilities consistently outperform conventional VQGAN-based methods across various metrics, datasets, tasks, and network architectures; 3) The VQ-KD codebook encapsulates more semantics than VQGAN, contributing to the superiority of VQ-KD in IG.

We believe these findings can benefit future research on image tokenizers and provoke further discussion on the relationship between IU and IG.

## 2 Related Work

Image Tokenization.Vector Quantization (VQ)  is originally developed for data compression. To circumvent posterior collapse in the VAE  framework, VQ-VAE  adopts VQ for image tokenization. Subsequently, VQGAN  introduces adversarial and perceptual losses to enhance the quality of the generated images.

Vanilla VQGAN suffers from limitations like low codebook usage, limited semantic representation ability, and the trade-off between modeling efficiency and image quality. To address these

Figure 1: Extensive studies have tried to adopt IG models for IU. However, few attempts have been made to use IU models in IG.

challenges, researchers have focused on improving the codebook. ViT-VQGAN  adopts a ViT-based  autoencoder to create more expressive code vectors. SeQ-GAN  improves the perceptual loss and decoder to balance between semantic compression and detail preservation. SQ-VAE  improves VQ-VAE with stochastic quantization and a trainable posterior categorical distribution. VQ-WAE  builds upon SQ-VAE by encouraging the discrete representation to be a uniform distribution via a Wasserstein distance. HQ-VAE  employs random re-initialization of inactive code vectors. CVQ-VAE  selects encoded features as anchors to update dead codes. VQ-KD  adopts knowledge distillation instead of image reconstruction as the objective to train VQ-VAE. LFQ  and FSQ  adopt bounded scalar quantization techniques from neural compression to harness the potential of extra-large codebooks.

Furthermore, several works explore the potential of multiple codebooks. VQ-VAE-2  extends VQ-VAE to a multi-scale hierarchical organization. RQ-VAE  and MoVQ  aim to represent each feature as a stack of tokens, where RQ-VAE adopts an iterative way to factorize features into a series of residuals and MoVQ models features across multiple channels via specialized modulation.

Token-based Image Generation.Inspired by the success of GPT , VQ-VAE and most of its derivative works  adopt AR transformers to model the token sequence. This approach leverages techniques from text generation to enhance IG performance. However, the decoding time of AR models scales linearly with the length of the token sequence. To accelerate decoding, MaskGIT  introduces a bidirectional transformer, referred to as the NAR proposal network.

Given the versatility of token-based modeling, both AR and NAR proposal networks can be easily extended to conditional IG scenarios. For instance, VQGAN uses a class token as the condition in its AR proposal network for class-conditional IG. With an NAR proposal network, MUSE  adopts text embeddings to predict masked image tokens in Text-to-Image generation.

## 3 Token-Based Image Generation

We start with the two-stage IG framework in Sec. 3.1. Subsequently, Sec. 3.2 details the architecture and training protocol for the tokenizers under consideration. Sec. 3.3 explains the evaluation benchmark. Sec. 3.4 further outlines our main observations derived from the IN-1k experiments. Lastly, we validate the observations under different settings in Sec. 3.5.

### Two-Stage Image Generation

We illustrate the two-stage IG framework in Fig. 2. Given an image \(^{H W 3}\), the encoder \(\) converts this image into a feature map \(x^{h w d}\), where \((h,w)=(H/f,W/f)\) and \(f\) is a downsample factor. Let a codebook \(\) be a set of \(N\) code vectors \(\{c_{i}\}_{i=1}^{N}^{N d}\), where each code vector \(c_{i}^{d}\) corresponds to a specific code \(i\). A quantizer \(\) then maps \(x\) into a sequence

Figure 2: The token-based IG framework. Solid and dashed lines represent training and inference pipelines, respectively. During training, the tokenizer \(\) tokenizes an image \(\) into discrete codes \(\). A proposal network \(\) is trained to model the distribution \(p()\), while a decoder \(\) learns to reconstruct \(\). During inference, we sample codes \(}\) from \(\), which guides \(\) to perform generation.

of codes \(=\{z_{i}\}_{i=1}^{L}\), where \(L=h w\) defines the sequence length and \(z_{i}\) is an integer that falls within the range \([1,N]\). Let \(c_{z_{i}}\) denote the code vector that corresponds to code \(z_{i}\). Similarly, \(()=\{c_{z_{i}}\}_{i=1}^{L}^{L d}\) represents a sequence of code vectors associated with the code sequence \(\). The encoder \(\), quantizer \(\), and codebook \(\) collectively form an image tokenizer \(\).

The proposal network \(\) models the distribution over \(\), where the distribution is denoted as \(p()\). Early proposal networks are implemented as an AR transformer, which sequentially models \(p(z_{i}|z_{1:i-1})\) and formulates \(p()\) as \(_{i=1}^{h w}p(z_{i}|z_{1:i-1})\). While the AR transformers can be trained in parallel, it has to sequentially decode \(\) during inference, which renders it inefficient. Therefore, NAR proposal networks are being prevalent , which typically adopt bidirectional transformers to model \(\). We denote the two types of proposal networks as \(_{}\) and \(_{}\), respectively.

Finally, a decoder \(\) maps the code vectors to the pixel space. In training, \(\) takes \(()\) as input and learns to reconstruct the original image \(\) as \(}^{H W 3}\). In inference, a sequence of codes \(}\) is sampled from \(p()\), translated to \((})\), and then fed into \(\) to generate an image \(}\).

### Image Tokenizers

In this paper, we focus on three types of image tokenizers: VQGAN , FSQ , and VQ-KD .

Let \(x_{i,j}^{d}\) be a vector in the feature map \(x\). As shown in Fig. 2(a), to quantize \(x_{i,j}\), the VQGAN tokenizer looks up the codebook \(\) for the closest code vector in terms of Euclidean distance:

\[z_{i,j}=_{z} x_{i,j}-c_{z}_{2}.\] (1)

Since the quantization process is non-differentiable, VQGAN adopts the Straight-Through Estimator (STE)  to optimize the encoder \(\), which copies gradients from \(()\) to \(x\). As a result, the codebook \(\) receives no gradient. To optimize \(\), VQGAN introduces a quantization loss \(_{}\):

\[_{}=[x]-()_{2} ^{2}+ x-[()]_{2}^{2},\] (2)

where \([]\) denotes the stop-gradient operation and \(\) is the loss weight. The first term is the codebook loss, which optimizes the codebook. The second term is the commitment loss to make sure the encoder \(\) commits to a code vector . Therefore, the overall loss for VQGAN is defined as:

\[=_{}+_{}(, }),\] (3)

where \(_{}\) is the reconstruction loss between image \(\) and reconstruction \(}\), which includes \(_{1}\) loss, perceptual loss, and adversarial loss.

Based on VQGAN, FSQ introduces a simpler image tokenizer, without the need for codebook lookup and quantization loss. As shown in Fig. 2(b), FSQ adopts finite scalar quantization to quantize

Figure 3: The architecture and training objective of different image tokenizers.

each channel of \(x_{i,j}\) into a finite set of scalars. Since the quantization process involves no trainable parameter, FSQ can be trained with solely the reconstruction loss \(_{}(,})\).

Unlike VQGAN and FSQ, which are designed for IG, VQ-KD was originally presented in BEiT v2 to provide supervision for IU models. As shown in Fig. 3c, VQ-KD is trained to reconstruct the feature map \(x^{}\) encoded by a pretrained teacher \(^{}\). Formally, the reconstruction loss is defined as:

\[_{}=-((()),x^{ }),\] (4)

where \((,)\) represents cosine similarity and \(\) is a feature adapter. \(\) is implemented as a decoder, which maps \(()\) to the same feature space as \(x^{}\).

In this study, we examine VQ-KD using four types of pretrained teachers, including fully-supervised, text-supervised, contrastive, and Masked Image Modeling (MIM). We use VQ-KD\({}_{}\) and VQ-KD\({}_{}\) to represent VQ-KD tokenizers trained with CLIP  and DINO  teachers, respectively. VQ-KD\({}_{}\) and VQ-KD\({}_{}\) represent tokenizers trained with MAE  and ViT  teachers. The latter two teachers are pretrained on IN-1k utilizing a ViT-B/16 architecture.

### Benchmark

We detail how we fairly compare different tokenizers for token-based IG here.

For each tokenizer, we train a proposal network \(\) and a decoder \(\) to constitute an image generator. In training, the tokenizer is frozen to ensure fairness. Thus, \(\) and \(\) can be trained in parallel. We follow VQGAN  to train the AR proposal network and the decoder. The NAR proposal network is trained following MAGE . Implementation details can be found in Appendix B.

Our benchmark adopts various metrics to comprehensively evaluate the image tokenizers. Given an image tokenizer, we assess the effectiveness of its encoding process by evaluating the codebook usage. To assess the generative capabilities of the image tokenizers, we evaluate IS  and FID  on the generated images \(}\). We assess the reconstruction capabilities of the image tokenizers by reporting the reconstruction FID (rFID). In addition, we present the PPL scores to appraise the AR modeling proficiency of the image tokenizers. A low PPL score implies that \(_{}\) easily models \(\). Details about the evaluation metrics can be found in Appendix C.

### Main Observation

We evaluate the _class-conditional IG_ performance of VQGAN, FSQ, and VQ-KD tokenizers on IN-1k. The results in Tab. 1 leads to the following observations.

**VQ-KD significantly enhances generation quality over VQGAN.** Equipped with either AR or NAR proposal networks, VQ-KD tokenizers consistently outperform VQGAN and FSQ, as evidenced by superior FID and IS metrics. In particular, VQ-KD\({}_{}\) attains an FID\({}_{}\) of \(11.40\) and an FID\({}_{}\) of \(8.45\), both less than half of those from VQGAN (\(24.11\) FID\({}_{}\) and \(20.03\) FID\({}_{}\)).

Tab. 2 presents a system-level comparison between VQ-KD\({}_{}\) and other class-conditional IG models on IN-1k at a resolution of \(256 256\). With a 1.4B AR proposal network, VQ-KD\({}_{}\) achieves an FID of \(4.10\), surpassing prior AR, NAR, and several VQ-based diffusion models.

   \)} &  & } & _{}\)} & _{}\)} \\   & & &  &  &  &  &  &  \\   & & &  &  &  &  &  &  &  \\  VQGAN & 4.9 & 5.09 & 116.75 & 24.11 & 39.52 & 20.03 & 48.30 \\ FSQ & **100.0** & 4.96 & 791.56 & 40.17 & 26.40 & 29.78 & 33.63 \\  VQ-KD\({}_{}\) & **100.0** & 4.96 & **53.73** & 11.78 & **128.18** & 9.51 & **121.33** \\ VQ-KD\({}_{}\) & **100.0** & 3.69 & 89.30 & **11.40** & 107.56 & **8.45** & 108.75 \\ VQ-KD\({}_{}\) & **100.0** & **3.41** & 74.07 & 13.15 & 80.89 & 10.21 & 91.39 \\ VQ-KD\({}_{}\) & **100.0** & 4.93 & 280.06 & 26.85 & 40.03 & 16.11 & 59.05 \\   

Table 1: Comparison between image tokenizers on IN-1k.

**Tokenizers with stronger semantic understanding tend to deliver superior IG performance.** Considering the FID and IS metrics, we find that VQ-KD tokenizers with supervised teachers (CLIP and ViT) consistently surpass those with unsupervised teachers (DINO and MAE). While VQ-KD\({}_{}\) achieves the lowest rFID and PPL, its \(13.15\) FID\({}_{}\) is worse than VQ-KD\({}_{}\) (\(11.78\)) and VQ-KD\({}_{}\) (\(11.40\)). This trend can be attributed to the superior capability of supervised models in capturing semantics compared to the unsupervised ones.

### Further Verification

**The superiority of VQ-KD holds across proposal networks.** As seen in Tab. 1, all VQ-KD tokenizers surpass VQGAN and FSQ in the FID\({}_{}\) and IS\({}_{}\) metrics. In particular, VQ-KD\({}_{}\) scores the lowest FID\({}_{}\) at \(8.45\) and VQ-KD\({}_{}\) scores the highest IS\({}_{}\) at \(121.33\). In contrast, VQ-GAN only achieves an FID\({}_{}\) of \(20.03\) and an IS\({}_{}\) of \(48.30\). It is also worth mentioning that VQ-KD\({}_{}\) and VQ-KD\({}_{}\) show slightly better performance than VQ-KD\({}_{}\) and VQ-KD\({}_{}\), further supporting our conclusion that superior semantic understanding in supervised models plays a significant role in enhancing the quality of IG.

**The superiority of VQ-KD holds across datasets.** We conduct _unconditional IG_ experiments on the MS-COCO dataset , which contains images of greater complexity than IN-1k. As demonstrated in Tab. 3, VQ-KD\({}_{}\) achieves a FID\({}_{}\) metric of \(17.55\), significantly outperforming VQ-GAN (\(38.43\)) and FSQ (\(44.64\)). Since the ViT teacher in VQ-KD\({}_{}\) is pretrained on IN-1k, the rFID and FID\({}_{}\) metrics of VQ-KD\({}_{}\) are slightly inferior to VQ-KD\({}_{}\). Note that the PPL metric of VQGAN is misleadingly favorable, due to its low codebook usage (\(2.4\%\)).

**The superiority of VQ-KD holds across tasks.**_Text-to-Image_ (T2I) experiments are conducted on the MS-COCO Captions dataset . As shown in Tab. 3, the FID\({}_{}\) metric of VQ-KD tokenizers range from \(11.17\) to \(15.60\), while VQGAN and FSQ only achieves \(24.11\) and \(23.36\), respectively.

   Model & Architecture & \#params & FID \(\) \\  VQGAN  & AR & 1.4B & 15.78 \\ RQ-VAE  & AR & 1.4B & 8.71 \\ ViT-VQGAN  & AR & 1.7B & 5.30 \\  MoVQ  & NAR & 307M & 8.78 \\ MaskGIT  & NAR & 227M & 6.18 \\ FSQ  & NAR & 227M & 4.53 \\  LDM-8-G  & Diffusion & 506M & 7.76 \\ CVQ-VAE  & Diffusion & 400M & 6.87 \\  VQ-KD\({}_{}\) (ours) & AR & 1.4B & **4.10** \\   

Table 2: System level comparison on IN-1k.

   \)} & Codebook &  & _{}\)} & _{}\)} \\   & Usage (\%) & & PPL \(\) & FID\({}_{}\) & \\  VQGAN & 2.4 & 16.21 & **47.89** & 38.43 & 24.11 \\ FSQ & **100.0** & 4.62 & 1040.02 & 44.64 & 23.36 \\  VQ-KD\({}_{}\) & 82.2 & 5.48 & 72.31 & 29.80 & **11.17** \\ VQ-KD\({}_{}\) & **100.0** & 3.70 & 117.10 & 23.51 & 15.49 \\ VQ-KD\({}_{}\) & **100.0** & **2.69** & 129.93 & **17.55** & 11.50 \\ VQ-KD\({}_{}\) & **100.0** & 3.51 & 317.98 & 44.01 & 15.60 \\   

Table 3: Comparison between image tokenizers on MS-COCO. T2I experiments are conducted on the MS-COCO Captions dataset.

Analysis

In this section, we analyze tokenizers based on feature reconstruction from various perspectives.

### Codebook Visualization

We delve into the superiority of VQ-KD by visualizing its codebook. From IN-1k, we randomly choose four categories: golden retriever, pirate ship, valley, and sea anemone. For each image belonging to these categories, we deploy t-SNE  to project the feature map \(x\) and the code vectors \(()\) into a two-dimensional space. \(x\) is colored according to the image category and \(()\) is illustrated in black. As depicted in Fig. 4, the feature space of VQ-KD shows superior organization compared to VQGAN. In the VQ-KD feature space, \(x\) from the same category are grouped together. This implies that each code in the VQ-KD codebook conveys clear semantics. As codes with similar semantics are likely to present concurrently in an image, it becomes easier for the proposal network to model the code sequence \(\). Conversely, each code in the VQGAN codebook is shared by multiple categories, resulting in semantics ambiguity. Hence, as illustrated in Tab. 1, the PPL metric for VQGAN is higher than VQ-KD, even though its codebook usage is considerably lower.

### Clustering Pretrained Models as Tokenizers

To better harness the semantics in IU encoders, we propose a straightforward pipeline that transforms IU encoders into tokenizers via feature clustering. Given a pretrained IU model \(^{{}^{}}\), we employ it to encode the feature map \(x^{}\) and subsequently utilize a clustering approach  to acquire \(N\) clusters. The cluster centroids constitute a codebook \(\). \(^{{}^{}}\) remains frozen during training, which significantly accelerates the training process. As shown in Tab. 4, \(_{}\) presents \(13.40\)\(_{}\), \(10.58\)\(_{}\), and \(0.245\) CLIP score on MS-COCO, outperforming all tokenizers in Tab. 3. This suggests that pretrained models with simple feature clustering can become good tokenizers. However, the cluster-based tokenizers behave worse in terms of rFID, since they encode little appearance detail in \(x^{}\), which is essential for exact reconstruction. As a result, their FID and IS metrics on IN-1k are marginally weaker than those of their VQ-KD counterparts.

   \)} &  &  \\   & rFID \(\) & FID\({}_{}\) \(\) & FID\({}_{}\) \(\) & rFID \(\) & FID\({}_{}\) \(\) & FID\({}_{}\) \(\) \\  CLIP & 9.13 & 14.81 & 12.83 & 7.28 & 20.03 & 12.82 \\ ViT & **4.78** & **11.87** & **8.59** & 4.59 & **13.40** & 10.58 \\ DINO & 5.16 & 14.53 & 11.23 & **4.02** & 25.35 & **7.66** \\ MAE & 15.15 & 38.72 & 34.26 & 10.08 & 62.17 & 18.85 \\   

Table 4: Performance of cluster-based tokenizers.

Figure 4: Codebook visualization of VQGAN and VQ-KD\({}_{}\). Best viewed in color.

### Scaling Up the Proposal Network

We examine the IG performance of tokenizers with a large-scale proposal network. Following VQGAN, we adopt GPT-2 XL as \(_{}\), which comes with \(1.4\)B parameters. In line with Tab. 1, \(_{}\) leads with \(9.23\) FID\({}_{}\), while \(_{}\) achieves the highest IS metric at \(150.63\). Upon comparing with Tab. 1, tokenizers with stronger IU capabilities exhibit less improvement in the FID\({}_{}\) metric. For instance, \(_{}\) improves significantly from \(26.85\) to \(17.11\), while \(_{}\) reveals a marginal enhancement from \(11.78\) to \(11.27\). This suggests that a small-scale \(_{}\) is sufficient for tokenizers with strong IU capabilities, whereas those with weaker IU abilities benefit from a large-scale \(_{}\).

### Influence of Strong Data Augmentation

We investigate the impact of strong data augmentation on the AR modeling performance of tokenizers. Specifically, we employed a strong random crop, where the crop scale ranges from \(0.08\) to \(1.0\), introducing greater variability into the training data. As shown in Tab. 5, all tokenizers exhibit worse FID\({}_{}\) metrics than their counterparts in Tab. 1. Interestingly, tokenizers with stronger IU capabilities demonstrate greater robustness to the strong data augmentation. For instance, \(_{}\) experiences a minor increase in FID\({}_{}\) of just \(1.92\) (from \(11.40\) to \(13.32\)), whilst \(_{}\) records a considerable leap of \(9.78\) (from \(26.85\) to \(36.63\)).

### Large Teacher Models in VQ-KD

We incorporate OpenCLIP  models of varying sizes as teacher models to train the VQ-KD tokenizers. As illustrated in Tab. 6, the FID\({}_{}\) metric sees a reduction from \(10.31\) to \(8.70\) when the size of the OpenCLIP model escalates from ViT-L/14 to ViT-G/14. Given that larger OpenCLIP models inherently possess stronger IU capabilities, these findings further corroborate the superiority of image tokenizers with more potent IU capabilities.

Table 6: Effect of different teachers in VQ-KD.

Table 7: Effect of codebook size and dimension. Experiments are conducted on \(_{}\).

Table 5: AR modeling with a large-scale proposal network or strong data augmentation.

### Codebook Size and Dimension

The size and dimension of the codebook exert a significant influence on the IG performance of tokenizers . Tab. (a)a showcases the performance of VQ-KD\({}_{}\) with varying codebook sizes. Large codebooks aid the tokenizers in representing fine-grained semantics, contributing to a consistent decrease in the rFID metric from \(6.59\) to \(4.53\). The IS metric also shows favor towards larger codebooks, with size \(2^{14}\) leading to the highest IS metric of \(131.51\). However, choosing the correct code from a large codebook is harder than from a small codebook, hindering \(_{}\) from achieving lower FID scores with larger codebooks.

Tab. (b)b demonstrates the influence of codebook dimension. High-dimensional codes carry more information but lead to lower codebook usage. As a result, the rFID metric initially drops from \(4.96\) to \(4.64\), then increases drastically to \(6.80\). Similar to Tab. (a)a, the FID and IS metrics favor different codebook dimensions. FID favors \(128\)-dimensional codebooks, where codebook usage is relatively low. In contrast, IS favors \(32\)-dimensional codebooks, possibly due to a superior diversity.

### Qualitative Analysis

The reconstruction quality of various tokenizers is demonstrated in Fig. 5. Original images are displayed in the first row. Regions where VQGAN and FSQ fail to reconstruct are highlighted with red boxes. In contrast, VQ-KD reconstructions are visually more accurate. Since the IU encoder in Cluster emphasizes encoding semantics over visual details, Cluster fails to preserve all visual details during reconstruction. Nonetheless, the reconstruction results of Cluster still appear more natural than VQGANand FSQ, especially in the highlighted areas. Fig. 6 and Fig. 7 further illustrates the AR and NAR generation results, showcasing the superior visual performance of VQ-KD and Cluster.

Figure 5: Reconstruction results of different image tokenizers.

## 5 Conclusion

In this paper, we show that image understanding (IU) models can be useful in image generation (IG). Through comprehensive studies, observe that the VQ-KD tokenizers significantly enhance generation quality over VQGAN, irrelevant of the quantization operation and codebook utilization. Within the VQ-KD tokenizers, stronger IU capabilities tends to deliver superior IG performance. Further verification shows that the superiority of VQ-KD holds across proposal networks, datasets, and tasks. Lastly, we analyze VQ-KD from multiple angles, including clustering pretrained models as tokenizers, scaling up the proposal network, influence of strong data augmentation, large teacher models in VQ-KD, and codebook size and dimensions.

Figure 6: Class-conditional AR generation results of different image tokenizers.

Figure 7: Unconditional NAR generation results of different image tokenizers.