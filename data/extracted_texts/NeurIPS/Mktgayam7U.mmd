# Scalable Kernel Inverse Optimization

Youyuan Long

Delft Center for Systems and Control

Delft University of Technology

The Netherlands

longyouyuan432@gmail.com&Tolga Ok

Delft Center for Systems and Control

Delft University of Technology

The Netherlands

T.Ok@tudelft.nl &Pedro Zattoni Scroccaro

Delft Center for Systems and Control

Delft University of Technology

The Netherlands

P.ZattoniScroccaro@tudelft.nl &Peyman Mohajerin Esfahani

Delft Center for Systems and Control

Delft University of Technology

The Netherlands

P.MohajerinEsfahani@tudelft.nl

###### Abstract

Inverse Optimization (IO) is a framework for learning the unknown objective function of an expert decision-maker from a past dataset. In this paper, we extend the hypothesis class of IO objective functions to a reproducing kernel Hilbert space (RKHS), thereby enhancing feature representation to an infinite-dimensional space. We demonstrate that a variant of the representer theorem holds for a specific training loss, allowing the reformulation of the problem as a finite-dimensional convex optimization program. To address scalability issues commonly associated with kernel methods, we propose the Sequential Selection Optimization (SSO) algorithm to efficiently train the proposed Kernel Inverse Optimization (KIO) model. Finally, we validate the generalization capabilities of the proposed KIO model and the effectiveness of the SSO algorithm through learning-from-demonstration tasks on the MuJoCo benchmark.

## 1 Introduction

Inverse Optimization (IO) is distinct from traditional optimization problems, where we typically seek the optimal decision variables by optimizing an objective function over a set of constraints. In contrast, inverse optimization works "in reverse" by inferring the optimization objective given the optimal solution. The inherent assumption in IO is that an agent generates its decision by solving an optimization problem. The assumed optimization problem is called the Forward Optimization Problem (FOP), which is parametric in the exogenous signal \(\) with the corresponding optimal solution \(\). Therefore, IO aims to deduce the objective function of the FOP from a dataset of exogenous signal and decision pairs, \(\{(_{i},_{i})\}_{i=1}^{N}\). In this work, we assume the constraints are known a priori. Consequently, we can leverage the FOP derived from the expert's dataset by solving it to mimic the expert's behavior when encountering new exogenous signals. IO has garnered widespread attention within several fields, giving rise to numerous studies encompassing both theoretical and applied research. Application domains include vehicle routing , transportation system modeling , portfolio optimization , power systems , electric vehicle charging problems , network design , healthcare problems , as well as controller design . For a more detailed discussion on different applications of IO, we refer the readers to the recent survey paper .

IO can be categorized into classic IO and data-driven IO. In classic IO, only a single signal-decision pair is considered, where the decision is assumed to be the optimal solution of the FOP (i.e., there isno noise), and different classes of FOPs have been studied, such as linear conic problems [1; 36; 20]. However, in real-world applications, there are usually many observations of signal-decision pairs, and due to the presence of noise, it is usually unreasonable to assume that all observed decisions are optimal w.r.t a single, true data-generating FOP. Additionally, for complex tasks, the chosen FOP may only approximate the task, not allowing for perfect replication of the observed behavior from the expert. These cases are referred to as data-driven IO problems. In such scenarios, a loss function is usually used to compute the discrepancy between observed data and the decision generated by the learned FOP. Examples of loss functions include the _2-norm distance loss_, _suboptimality loss_, _variational inequality loss_, _KKT loss_, and _augmented suboptimality loss_.

In data-driven IO, the objective function of the FOP is typically non-linear with respect to an exogenous signal \(\). Hence, classical methods that learn an FOP based on linear function classes may oversimplify the problem and lead to suboptimal solutions. One effective approach for addressing the expressibility issue in data-driven IO problems is the introduction of kernel methods. These methods have been extensively studied within the context of IO [35; 8] and have shown promising results for scaling IO to address practical problems. The application of kernel methods in IO allows for the exploration of a broader class of optimization problems, thereby enhancing the model's ability to generalize from observed decisions to unseen situations. Specifically, using a kernelized approach facilitates the embedding of decision data into a richer feature space, enabling the deduction of an FOP that not only fits the training data but also exhibits strong generalization capabilities.

**Contributions**. We list the contributions of this work as follows:

1. [label=(0)]
2. **Kernelized IO Formulation**: We propose a novel Kernel Inverse Optimization (KIO) model based on suboptimality loss . The proposed approach leverages kernel methods to enable IO models to operate on infinite-dimensional feature spaces, which allows KIO to outperform existing imitation learning (IL) algorithms on complex continuous control tasks in low-data regimes.
3. **Sequential Selection Optimization Algorithm**: To address the quadratic computational complexity of the proposed KIO model, we introduce the Sequential Selection Optimization (SSO) algorithm inspired by coordinate descent style updates. This algorithm selectively optimizes components of the decision variable, greatly enhancing efficiency and scalability while provably converging to the same solution of our proposed KIO model.
4. **Open Source Code**: To foster reproducibility and further research, we provide an open-source implementation of the proposed KIO model and the SSO algorithm, along with the source code of the experiments in Github1.

Notation\(^{n}_{+}\) denotes the space of \(n\)-dimensional non-negative vectors. The identity square matrix with dimension \(n\) is denoted by \(I_{n}\). For a symmetric matrix \(Q\), the inequality \(Q 0\) (respectively, \(Q 0\)) means that \(Q\) is positive semi-definite (respectively, positive definite). The trace of a matrix \(Q\) is denoted as \((Q)\). Given a vector \(x^{n}\), we use the shorthand notation \(\|x\|_{Q}^{2}:=x^{}Qx\). Symmetric block matrices are described by the upper diagonal elements while the lower diagonal elements are replaced by "*". The Frobenius norm of matrix \(Q\) is denoted as \(\|Q\|_{F}\). The notation \(Q_{ij}\) represents the element in the \(i\)-th row and \(j\)-th column of the matrix \(Q\). The Euclidean inner product of \(x\) and \(y\) is denoted as \(x^{}y\).

## 2 Preliminaries

### Inverse Optimization

In general, to solve a data-driven IO problem, we need to design two components: the Forward Optimization Problem (FOP) and the loss function. Specifically, the FOP corresponds to the optimization problem we aim to "fit" to the observed dataset \(}=\{(_{i},_{i})\}_{i=1}^{N}\), where each input-output pair \((_{i},_{i})^{n}\). In this paper, we use the "hat" notation (e.g., \(\)) to denote objects that depend on the dataset. Our goal is to find a parameter vector \(\) such that

\[(,):=_{u()}F_{}(,u),\] (1)replicates the data as closely as possible by minimizing a loss function, akin to classical empirical risk minimization problems. In this work, we focus on lifting the learning problem based on quadratic FOPs. These FOPs include linear constraints and continuous decision variables, as defined by

\[F_{}(,u):=u^{}_{uu}u+2()^{}_{su}u ():=\{u^{n}:M()u W( )\},\] (2)

where \(:=(_{uu},_{su})\), \(_{uu}^{n n}\), \(_{su}^{m n}\), \(M(s)^{m n}\), \(W(s)^{m}\), and \(:^{m}\) is the feature function that maps \(\) to a higher-dimensional feature space to enhance the model's capacity. To simplify notation, we omit the explicit dependence of \(M\) and \(W\) on \(s\), denoting them as \(M\) and \(\), respectively.

To learn \(\), we solve a regularized loss minimization problem using the Suboptimality Loss 

\[_{}\;k()+_{i=1}^{N}_{u _{i}(_{i})}F_{}(_{i},_{i})-F_ {}(_{i},u_{i})},\] (3)

where \(:=\{=(_{uu},_{su}):_{uu} I_{n}\}\), \(():=\|_{uu}\|_{F}^{2}+\|_{su}\|_{F}^{2}\), and \(k\) is a positive regularization parameter. The constraint \(_{uu} I_{n}\) prevents the trivial solution \(_{uu}=_{su}=0\) and guarantees that the resulting FOP is a convex optimization problem. Moreover, since \(F_{}\) is linear in \(\), the optimization program (3) is convex w.r.t. \(\), and it can be reformulated from the "minimax" form to a single minimization problem. This reformulation is based on dualizing the inner maximization problems of (3) and combining the resulting minimization problems.

**Proposition 1** (LMI reformulation ).: _For the hypothesis function and feasible set in (2), the optimization program (3) is equivalent to_

\[_{,_{i},_{i}} k()+_{i=1}^{N}(F_{}(_{i}, _{i})+_{i}+_{i}^{}_{i})\] (4) s.t. \[=(_{uu},_{su}),\;_{uu} I_{n},\; _{i}_{+}^{d},\;_{i}  i N\] \[_{uu}&_{i}^{}_{i}+2_ {su}^{}(_{i})\\ *&_{i} 0  i N.\]

### The Kernel Method

The kernel method is a powerful technique used in machine learning and statistics that exploits the structure of data embedded in a higher-dimensional space. The kernel method has found numerous applications, including Support Vector Machines , Kernel Principal Component Analysis , and Kernel Linear Discriminant Analysis . The fundamental idea behind the kernel method is to implicitly map input data into a higher-dimensional space without explicitly computing the transformation, thus enabling algorithms to capture complex patterns and non-linear relationships without heavy computational burden . The kernel method generalizes the hypothesis of the optimization problem to a nonlinear function class based on a _Reproducing Kernel Hilbert Space_ (RKHS) \(\). In this work, we primarily focus on lifting the original parametric optimization problem of the form \(_{}\,(\{(f_{}(_{i}),_{i}, {u}_{i})\}_{i=1}^{N},\|\|_{F})\), where \(f_{}:^{n}\) such that \(f_{_{su}}(s)^{}u:=(s)^{}_{su}u\), following Definition (2). The lifted problem is then defined as \(_{f}\,(\{(f(_{i}),_{i},_{i}) \}_{i=1}^{N},\|f\|_{})\) with \(f\) in an RKHS \(\). By lifting the function class to \(\), we effectively optimize over _nonlinear_ hypotheses.

In a _vector-valued_ RKHS \(\) equipped with the inner product \(,_{}\), as defined in , given a proper kernel function \(K:^{n n}\) that is symmetric and positive definite, Moore-Aronszajn's reproducing kernels theory implies that there exists a unique RKHS with the reproducing properties induced by _matrix-valued_\(K\), such that \( f:f(s)^{}u= f,K(,s)u_{}\) with a linear operator \(K(,s):^{n}\). Furthermore, the Riesz representation theorem states that for every \(s\) and \(u^{n}\), there exists a unique function \(K(,s)u\) for all \(f\). Recall that the lifted optimization problem is formed over all _nonlinear_ hypotheses via \(f\). However, as a result of the reproducing property , we can write the lifted optimization problem in the infinite-dimensional inner product space. Hence, the resulting optimization problem has the form

\[_{f}(\{\{( f,K(,_{ i})u_{},_{i},_{i})\}_{i=1}^{N},\|f\|_{ }).\] (5)In what follows, we show that the solution of the optimization problem (5) exists and is finite when the problem is built over a finite dataset \(}\) of size \(N\). We leverage the Representer theorem , which for an arbitrary loss function, as in (5), states that the solution admits the kernel representation of the form \(f^{}(s)=_{i=1}^{N}K(_{i},s)_{i}\) with \(_{i}^{n}\). This result effectively suggests that optimizing over an infinite-dimensional RKHS has a sparse solution over the linear hypotheses.

## 3 Kernel Inverse Optimization

In this section, we extend the Inverse Optimization (IO) model proposed by  to incorporate kernel methods. We consider a hypothesis class of the form in Equation (1). However, kernelizing such hypotheses is not straightforward. Instead, we argue that by kernelizing the optimization problem associated with the loss function described in Equation (3), we can obtain a forward optimization problem (FOP) that minimizes the kernelized objective \(F(s,u)\).

In Theorem 1, we dualize the problem in (3) and show that the optimal solution for \(_{su}^{}\), when plugged into \((_{su}^{},_{uu},)\), admits an affine function of \(N\) coefficients w.r.t \(\). The resulting \(\), obtained by Theorem 1, takes a form consistent with the representer theorem when the loss function and kernel are defined appropriately, as discussed later in this section.

**Theorem 1** (Kernel reformulation).: _The Lagrangian dual of the optimization program (4) is_

\[_{P,_{i},_{i}} \|(_{i=1}^{N}_{i}_{ i}^{}}{N}-_{i})-P\|_{F}^{2}-(P)\] (6) s.t. \[P 0,\;_{i} 0,\;_{i}^{n}  i N\] \[_{i}}{N}-2_{i}_{i} 0  i N\] \[_{i}&_{i}\\ *& 0  i N,\]

_where \((_{i},_{j})=(_{i})^{}(_{j})\) is the scalar-valued kernel function. The primal variables \(_{uu}\) and \(_{su}\) can be recovered using_

\[_{uu}=(P-(_{i=1}^{N}_{i}_ {i}^{}}{N}-_{i}))_{su}=_ {i=1}^{N}(_{i})(2_{i}^{}-_{ i}^{}}{N}).\] (7)

Proof.: See Appendix A.1. 

Notice that the complexity of the optimization program (6) does not depend on the dimensionality of the feature vector \((_{i})\). Consequently, this allows us to use kernels generated from infinite-dimensional feature spaces, e.g., the Gaussian (a.k.a. radial basis function) kernel \((_{i},_{j})=(-\|_{i}-_{j}\|_{2}^{2})\). Program (6) is a convex optimization problem and can be solved using off-the-shelf solvers, such as MOSEK . Once solved, we can recover the optimal primal variables \(_{uu}^{}\) and \(_{su}^{}\) from the optimal dual variables \(_{i}^{},_{i}^{}\) and \(P^{}\) using (7). Notice that the dimensionality of \(_{su}^{}\) depends on \(\), meaning it can be an infinite-dimensional matrix. However, our ultimate goal is to learn an FOP that replicates the behavior observed in the data. By combining (7) with (1), we have that, for the signal \((_{},_{},_{})\), the resulting FOP is

\[_{_{}u W_{}}u^{}(P^{ }-(_{i=1}^{N}_{i}_{i}^{}}{N}-_{i} ^{}))u+_{i=1}^{N}(_{},_{i}) (2_{i}^{}-_{i}}{N})^{}u,\] (8)

which again does not depend on the dimensionality of \(\), but only on the kernel function \(\). However, a key difference between solving the IO problem using the kernel reformulation of Theorem 1 and other classical IO approaches (e.g., [25; 2; 40]) is that the resulting FOP (8) explicitly depends on the entire training dataset \(}\). These models are sometimes called _nonparametric models_, indicating that the number of parameters of the model (in our case, \(P^{}\), \(_{i}^{}\), and \(_{i}^{}\) for all \(i N\)) depends on the size of the training dataset.

**Remark 1** (A potential variant of representer theorem).: _In the primal problem (4), a regularized empirical risk loss is optimized over a set of constraints. In the learned objective function of the FOP (8), the term related to the features \(_{i}\) (the linear coefficient of the optimizer \(u\)) can be represented as a finite linear combination of kernel products evaluated on the input points in the training set data, i.e., \(f^{}()=_{i=1}^{N}(_{i},)_{i}\) with \(^{n}\). A similar forward optimization problem can be obtained using a loss function defined in a vector-valued RKHS \(\) with a corresponding kernel function \(K\) for functions \(f:^{n}\), as discussed in Section 2.2, via_

\[_{}(f,_{uu},})=k\|f\|_{}+ _{i=1}^{N}_{u_{i}(_{i})}F( _{i},_{i};_{uu},f)-F(_{i},u_{i};_{uu},f) },\]

_where \(F(s,u;_{uu},f)=u^{}_{uu}u+ f,K(,s)u_{ }\) and \(K(s,s^{})^{n}^{n}\) is set to be a diagonal matrix, with diagonal entries corresponding to the same scalar kernel \(\), such that: \(K(s,s^{})_{jj}=(s,s^{})\) for \(j\{1,,n\}\). Based on the representer theorem, the solution to the optimization problem \(_{f}\,_{}(f,_{uu},})\) admits the form \(f^{}(s)=_{i=1}^{N}K(s,_{i})_{i}=_{i=1}^{N}(s, _{i})_{i}\). This result indicates that the learned FOP (8) exhibits characteristics consistent with the representer theorem, implying a potential variant in the context of inverse optimization._

In the class of cost functions studied in this paper (2), \(_{uu}\) can be interpreted as a matrix that penalizes the components of the decision vector \(u\). However, in many problems, it is assumed that the expert generating the data equally penalizes each dimension of \(u\), or equivalently, uses \(_{uu}=I_{n}\). This assumption holds, for instance, in the Gymnasium MuJoCo environments , where the reward settings for all tasks apply the same penalty to each dimension of the decision vector. Intuitively, this means that the expert trained under such reward settings aims to reduce the magnitude of the decision vector uniformly across all dimensions, rather than favoring any specific dimension. Therefore, assuming \(_{uu}=I_{n}\) as prior knowledge can reduce model complexity and lead to faster training, without degrading model performance.

**Corollary 1** (Kernel reformulation for \(_{uu}=I_{n}\)).: _The Lagrangian dual of the optimization program (4) with \(_{uu}=I_{n}\) is_

\[_{_{i},_{i}:\  i S} _{i=1}^{N}_{j=1}^{N}(_{i}, _{j})(_{i}}{N}-2_{i})^{}(_ {j}}{N}-2_{j})+_{i=1}^{N}(_{i})\] (9) s.t. \[_{i} 0,\ _{i}^{n}  i S\] \[_{i}}{N}-2_{i}_{i} 0  i S\] \[_{i}&_{i}\\ *& 0  i S,\]

_where \((_{i},_{j})=(_{i})^{}(_{j})\) is the kernel function and \(S=\{1,,N\}\). The primal variable \(_{su}\) can be recovered using (7)._

The proof of Corollary 1 is the same as the proof of Theorem 1 under the assumption that \(_{uu}=I_{n}\), and is therefore omitted here. \(S\) represents an index set, where all decision variables whose indices belong to \(S\) will be optimized, while decision variables whose indices do not belong to \(S\) retain their original values and are treated as constants. In Corollary 1, all variables will be optimized, so \(S\) is the set comprising natural numbers from \(1\) to \(N\). The concept of the index set \(S\) is introduced to make Problem (9) compatible with the sub-optimization problems based on the coordinate descent method outlined in Section 4.

In the following section, we will focus on algorithms to solve Problem (9). However, all ideas also apply to the general problem (6).

Sequential Selection Optimization

Solving the kernel IO problem (9) involves optimizing a Semidefinite Program (SDP), which can become prohibitively costly if the number of semidefinite constraints and optimization variables grows too large. In our case, the size of the SDP grows quadratically with the size of the training dataset \(N\). For instance, in our experiments, solving (9) with \(N=20000\) using CVXPY  requires up to 256GB of memory. Therefore, in this section, we propose a coordinate descent-type algorithm to find an approximate solution to (9) by iteratively optimizing only a subset of the coordinates at each iteration, keeping all other coordinates fixed. We define a pair of variables \(_{i}\) and \(_{i}\) as the \(i\)-th coordinate, denoted as \(\{_{i},_{i}\}\). In Problem (9), each coordinate is decoupled in the constraints, which enables the use of the coordinate descent framework here. We call this method _Sequential Selection Optimization_ (SSO), and present it in Algorithm 1.

```
1:Initialize \(\{_{i},_{i}\}_{i=1}^{N}\)
2:for\(t=1,,T\)do
3: Select a batch of \(p\) coordinates \(S=\{a_{i}\}_{i=1}^{p}\), where \(a_{i}\{1,,N\}\)
4: Update \(\{_{a_{i}},_{a_{i}}\}_{i=1}^{p}\) based on (9) with \(S\)
5:endfor ```

**Algorithm 1** Sequential Selection Optimization (SSO)

Here, we explain each step of Algorithm 1: (i) Initialization of the optimization variables. In general, the variables are usually initialized randomly or set to 0 or 1. These methods are simple but may not provide a good initial guess. (ii) Selection of a batch of \(p\) coordinates. The most straightforward approach to selecting \(p\) coordinates is to choose them cyclically. Alternatively, we can select the coordinates at random at each iteration (not necessarily with equal probability). Lastly, we can choose coordinates greedily, selecting the components corresponding to the greatest descent or those with the largest gradient or subgradient at the current iteration . (iii) Solving the KIO subproblem to update the selected coordinates. The mathematical expression of the subproblem is Problem (9) with \(S\), where \(S\) is a set containing the indices of the coordinates that need to be updated. Note that the coordinates whose indices \( S\) remain fixed. Therefore, the number of quadratic terms in (9) scales with \(|S|^{2}\) rather than \(N^{2}\).

Next, we propose two heuristics to accelerate the convergence speed of the SSO algorithm: a heuristic method for choosing which coordinates (line 3 of Algorithm 1) to optimize, and a warm-up trick to improve the initialization of the optimization variables (line 1 of Algorithm 1).

### Heuristic for choosing coordinates

At each iteration of Algorithm 1, intuitively, the largest improvement will be made by updating the "least optimal" set of \(p\) variables. One way to evaluate their degree of suboptimality is to choose the variables with the most significant violation of the Karush-Kuhn-Tucker (KKT) conditions of the primal version of Program (9) (i.e., (4) with \(_{uu}=I_{n}\)), inspired by the Sequential Minimal Optimization (SMO) method from .

**Proposition 2**.: _For optimal decision variables of Problem (9), the coordinate \(\{_{i},_{i}\}\) that satisfies_

\[_{i}}{N}-2_{i}_{i}>0,\] (10)

_should also satisfy_

\[(_{i}&_{i}\\ *&I_{n}&2_{uu}^{}(_{i})\\ *&\|2_{su}^{}(_{i})\|_{2}^{2})=0.\] (11)

Proof.: See Appendix A.2. 

Proposition 2 is based on KKT conditions. Based on Condition (11), we can define the KKT violation condition as

\[|( _{i}&_{i}\\ *&I_{n}&2_{uu}^{}(_{i})\\ *&\|2_{su}^{}(_{i})\|_{2}^{2})|.\] (12)Using the violation condition (12), we can establish the following heuristic method to construct the set \(S\) in Algorithm 1: given the current values of \(\{_{i},_{i}\}_{i=1}^{N}\) at iteration \(t\), we choose the \(p\) coordinates that satisfy Condition (10) with the maximum KKT violation (12). In practice, we additionally select some random coordinates to update at each iteration, ensuring that all coordinates have the chance to be updated, including those that initially do not meet the criteria specified in Condition (10) and would otherwise never be updated. This random selection is inspired by the proven convergence of coordinate descent algorithms with uniformly random and cyclic coordinate selection [27; 7].

### Warm-up trick for improved initialization

Another component of Algorithm 1 that may have a significant practical impact is how the optimization variables \(\{_{i},_{i}\}_{i=1}^{N}\) are initialized. A poor initial guess (e.g., \(_{i}=_{i}=0\)) can lead to slow solver convergence or even result in numerical instability. Here, we propose a simple warm-up trick that leads to a better initialization of the optimization variables. First, we divide the original dataset \(}\) into \(n\) non-overlapping sub-datasets \(}_{1},,}_{n}\) and solve the \(n\) small problems (9) for each of these sub-datasets (\(N_{i}=|}_{i}|\) and \(S\) is the set of indices of all the data in \(}_{i}\)). We then concatenate the optimal solutions of these \(n\) solved small problems to form an initial guess. Even when the original problem (9) is intractable due to a large training dataset (i.e., large \(N\)), each subproblem remains tractable for a small enough batch size \(N_{i}\), and its solutions are still feasible with respect to (9).

## 5 Numerical Experiments

### Performance Evaluation

In this evaluation, KIO is implemented in its simplified version (9), incorporating a Gaussian kernel, and tested on continuous control datasets from the D4RL benchmark . The model is trained using the SSO Algorithm 1. In each task, the model's performance is assessed over 100 test episodes, and the score2 for KIO is the average score across these 100 episodes. The parentheses following KIO scores indicate the amount of data used.

For comparison, four additional agents are selected for this experiment. **IO** is the inverse optimization model without the kernel method, introduced in Proposition 1. To illustrate the effect of the kernel method, both the **KIO** and **IO** models are trained on identical datasets. The scores of two behavior cloning agents, **BC(TD3+BC)** and **BC(CQL)**, are taken from two offline reinforcement learning algorithms in which the entire dataset of 1 million samples was used for training. These papers implemented their respective behavior cloning agents using D4RL datasets, serving as baselines to compare against their proposed offline reinforcement learning algorithms. In these studies, **BC(TD3+BC)** and **BC(CQL)** were evaluated over \(10\) seeds and \(3\) seeds, respectively. The **Teacher** is the agent responsible for generating the dataset and serves as the target for imitation learning in this experiment.

Evaluation for KIO.Table 1 presents the final experimental results, where KIO achieves competitive scores in four out of six tasks. In these tasks, except for a slightly lower score in the Halfcheetah-expert task compared to the teacher agent, KIO's scores are either close to or exceed those of the teacher agent, indicating strong learning capabilities in complex control tasks. However,

  
**Task** & **KIO** & **IO** & **BC(TD3+BC)** & **BC(CQL)** & **Teacher** \\  Hopper-expert & **109.9** (5k) & 31.8 & **111.5** & **109.0** & **108.5** \\ Hopper-medium & **50.2** (5k) & 20.6 & 30.0 & 29.0 & 47.2 \\ Walker2d-expert & 108.5 (10k) & 0.9 & 56.0 & **125.7** & 107.1 \\ Walker2d-medium & **74.6** (5k) & 0.0 & 11.4 & 6.6 & 68.1 \\ Halfcheetah-expert & 84.4 (10k) & -1.7 & 105.2 & **107.0** & 88.1 \\ Halfcheetah-medium & **39.0** (5k) & -3.1 & 36.6 & 36.1 & **40.7** \\   

Table 1: Performance of KIO, IO, two Behavior Cloning (BC) agents, and the Teacher agent on MuJoCo tasks from the D4RL benchmark on the normalized return metric. The numbers in parentheses represent the amount of data used by KIO and IO, and the score for KIO in each task is the average score over 100 episodes.

without the kernel method, the IO model demonstrates weak learning capabilities, achieving low scores in the Hopper task and failing to learn in the other two more challenging tasks. We argue that the weak performance of the IO model is due to the limitations of its hypothesis class, which lacks the richness needed to learn an effective policy for imitation learning tasks. This limitation arises from its reliance on predefined feature spaces, which may fail to capture the complexities of more sophisticated environments. All hyperparameters used in this experiment for KIO are listed in Appendix B.

Evaluation for SSO.Table 2 presents the optimal objective function values and task scores obtained by the centralized algorithm, Splitting Conic Solver (SCS) , and the distributed algorithm, Sequential Selection Optimization (SSO), for solving Problem (9). In this experiment, SCS is employed to directly address the large-scale problem (9) with \(|S|=N\). The corresponding solution is evaluated 100 times, and the average score is taken as the final result. Meanwhile, SSO addresses the large-scale problem by solving a series of subproblems. After each iteration, the current solution is evaluated 100 times, and the average score is recorded. After 20 iterations, there are 20 corresponding scores, and we select the highest score along with the objective function value from the last iteration and report it. The results show that SSO and SCS yield nearly identical optimal objective function values. However, except for the Halfcheetah-medium task, SSO achieved higher scores all other tasks. Figure 1 displays the convergence performance of the SSO algorithm across six distinct tasks, with the horizontal axis representing the number of iterations and the vertical axis representing the error between the current objective function value and the optimal objective function value (calculated by SCS) in Problem (9). The SSO algorithm demonstrates a fast convergence rate. By the 10th iteration, the errors for all tasks are below 0.1, and by the 20th iteration, the errors have further diminished to approximately 1e-4 for all tasks.

In the previous evaluation of the SSO algorithm, we limited the maximum training data to 10k to ensure that we could directly solve Problem (9) without SSO. Thereby, we were able to compare the results with and without the SSO algorithm. However, to further verify the effectiveness of the SSO algorithm, we tested it on a new task (the medium-expert dataset) using 100k data points. At this scale, due to memory limitations, we were unable to solve Problem (9) directly without the SSO algorithm, thus the effectiveness of the SSO algorithm is inferred solely from its experimental performance. Table 3 presents the results of the KIO model optimized by the SSO algorithm. The results indicate that the KIO model achieves competitive results and scales effectively to larger data sizes. We list the hyperparameters used in this experiment in Appendix B.

### Ablation Studies

We perform ablation studies to understand the contribution of each individual component: Heuristic Coordinates Selection (Section 4.1) and Warm-Up Trick (Section 4.2). Our results, presented in Figure 2, compare the performance of SSO with and without each component (all model hyperparameters remain unchanged as shown in Appendix B).

We use the Hopper task as the testing task, with the first 5000 data points from the D4RL Hopper-expert dataset as training data. The block coordinate for each iteration consists of 2500 coordinates (\(|S|=2500\)). When applying the Warm-Up Trick, we partition the data

    &  &  \\   & **Obj Value** & **Score** & **Obj Value** & **Score** \\  Hopper-expert & 185.219 & 109.9 & 185.220 & 110.2 \\ Hopper-medium & 218.761 & 50.2 & 218.761 & 51.8 \\ Walker24-expert & 140.121 & 108.5 & 140.121 & 109.2 \\ Walker24-medium & 151.117 & 74.6 & 151.117 & 74.9 \\ Halfcheetah-expert & 165.041 & 84.4 & 165.041 & 83.8 \\ Halfcheetah-medium & 188.184 & 39.0 & 188.184 & 39.7 \\   

Table 2: Final Objective Function Value and Score (average return over 100 evaluations) for SCS  and SSO (20 iterations for all tasks) algorithms. The ultimate Objective Function Values of the two algorithms are nearly identical, yet across the majority of tasks, SSO achieves a slightly higher score compared to SCS.

Figure 1: Convergence curves for SSO.

into two equal parts and solve two subproblems (9), each with \(|S|=2500\). Therefore, the computational time required for the Warm-Up Trick is approximately equal to the time needed for two iterations of the SSO algorithm.

In Figure 2, we present the results of 20 iterations, with the vertical axis representing the difference between the current objective function value and the optimal value in Problem (9).

Both the Heuristic Coordinates Selection, abbreviated as Heuristic in Figure 2, and Warm-Up Trick significantly accelerate the algorithm. With the Warm-Up Trick, the initial objective function value is markedly reduced. Without the Warm-Up Trick, the Heuristic curve requires approximately 10 iterations to reach the initial values of the SSO curve, whereas the Warm-Up Trick requires only about the time of two iterations. The Heuristic Coordinates Selection results in rapid descent of the error curves. The WarmUp curve, however, becomes nearly flat after a few iterations, until the 17th iteration when the Heuristic Coordinates Selection method is activated, causing a rapid decrease in the curve.

## 6 Conclusion and Limitations

We introduced Kernel Inverse Optimization (KIO), an inverse optimization model leveraging kernel methods, along with its simplified variant and the theoretical derivations. Subsequently, we proposed the Sequential Selection Optimization (SSO) algorithm for training the KIO model, which addresses memory issues by decomposing the original problem into a series of subproblems. Our empirical results demonstrate that KIO exhibits strong learning capabilities in complex control tasks, while the SSO algorithm achieves rapid convergence to the optimal solution within a limited number of iterations.

One of the limitations of this model is the computational cost of adding a new data point. In that case, all training data are required to compute the coefficients for the FOP problem (see FOP (8)) for that point. Thus, as the amount of training data grows, so does the computational cost. Another limitation is the absence of theoretical analysis on the convergence rate of the SSO algorithm, which we leave for future research. Furthermore, in our numerical experiments in Section 5, the proposed KIO model, even with the SSO algorithm, required substantial memory resources--up to 256 GB when using 100k data points. However, we believe that further optimization in implementation could reduce these memory requirements. Finally, in our numerical experiments in Section 5, we observed that initialization strategies critically impact the performance of the SSO algorithm. Thus, exploring alternative initialization strategies beyond the one proposed in Section 4.2 presents a promising direction for future work.

  
**Task** & **KIO** & **BC(TD3+BC)** & **BC(CQL)** & **Teacher** \\  Hopper-medium-expert & 79.6 (100k) & 89.6 & **111.9** & 64.8 \\ Walker2d-medium-expert & **100.1** (100k) & 12.0 & 11.3 & 82.7 \\ Halfcheetah-medium-expert & 46.4 (100k) & **67.6** & 35.8 & 64.4 \\   

Table 3: Performance of KIO, two Behavior Cloning (BC) agents, and the Teacher agent on MuJoCo tasks from the D4RL benchmark on the normalized return metric. The numbers in parentheses represent the amount of data used by KIO, and the score for KIO in each task is the average score over 100 episodes.

Figure 2: Convergence curves on the MuJoCo Hopper task with the first 5k data points from the D4RL Hopper-expert dataset. The vertical axis represents the difference between the current objective function value and the optimal value. Sequential Selection Optimization (orange) exhibits the fastest convergence rate.