# GADBench: Revisiting and Benchmarking Supervised Graph Anomaly Detection

Jianheng Tang\({}^{1,2}\), Fengrui Hua\({}^{1}\), Ziqi Gao\({}^{1,2}\), Peilin Zhao\({}^{3}\), Jia Li\({}^{1,2}\)

\({}^{1}\)Hong Kong University of Science and Technology (Guangzhou)

\({}^{2}\)Hong Kong University of Science and Technology, \({}^{3}\)Tencent AI Lab

{jtangbf,zgaoat}@connect.ust.hk, huafengrui@outlook.com,

masonzhao@tencent.com, jialee@ust.hk

Work done during an internship at Tencent AI Lab.Corresponding Author.

###### Abstract

With a long history of traditional Graph Anomaly Detection (GAD) algorithms and recently popular Graph Neural Networks (GNNs), it is still not clear (1) how they perform under a standard comprehensive setting, (2) whether GNNs can outperform traditional algorithms such as tree ensembles, and (3) how about their efficiency on large-scale graphs. In response, we introduce GADBench--a benchmark tool dedicated to supervised anomalous node detection in static graphs. GADBench facilitates a detailed comparison across 29 distinct models on ten real-world GAD datasets, encompassing thousands to millions (\(\)6M) nodes. Our main finding is that tree ensembles with simple neighborhood aggregation can outperform the latest GNNs tailored for the GAD task. We shed light on the current progress of GAD, setting a robust groundwork for subsequent investigations in this domain. GADBench is open-sourced at https://github.com/squareRoot3/GADBench.

## 1 Introduction

Graph Anomaly Detection (GAD) is the process of identifying uncommon graph objects, such as nodes, edges, or substructures, that significantly deviate from the majority of reference objects within a graph database . With a notable history spanning over two decades, GAD has proven its effectiveness across a variety of applications. These include, but are not limited to, the prevention of financial fraud  and money-laundering , the prediction of network intrusions  and device failures , the identification of spam reviews  and fake news . Unlike outlier detection in tabular data, GAD considers the inter-dependencies among a group of objects, which can often yield additional insights for identifying fraudulent patterns. Meanwhile, GAD also presents unique challenges in terms of modeling efficiency and necessitates strategies to address issues such as label imbalance , feature heterophily , and relation camouflage .

The definitions of GAD can be multifaceted, depending on the specific objectives and applications. In this paper, we focus on the most prevalent GAD scenario--**the detection of anomalous nodes within a static attributed graph**. Despite the plenty of methods proposed for this task, including traditional structural pattern mining algorithms  and advanced deep learning techniques , several limitations exist in the current model development and evaluation scheme:

* **Absence of a comprehensive supervised GAD benchmark.** We summarize the exiting GAD benchmarks and toolboxes in Table 1. The latest benchmark available for GAD, BOND , exclusively evaluates unsupervised methods. This overlooks the fact that many GAD models rely on labeled data to boost their performance. In comparison, there have been a variety of supervisedanomaly detection benchmarks for time series [59; 61], images , videos , and tabular data [31; 77]. Semi-supervised approach is another setting that calls for attention because it can strike a balance between label annotation budgets and model performance.
* **Insufficient comparative studies between tree ensembles and GNNs.** Tree ensemble methods, including Random Forest , XGBoost , and Isolation Forest , have long been favored in the industry. They also showcase impressive results in a recent benchmark for anomaly detection within tabular datasets . These models are also applicable to GAD datasets  with appropriate feature engineering. However, a systematic comparison between tree ensembles and GNNs in the context of GAD is still absent.
* **Limited exploration on large-scale graphs.** While many GNN models tailored for GAD have shown promising results on small-scale datasets, their efficacy on large graphs remains unexplored. On the other hand, although several large-scale GAD datasets have been proposed [36; 83; 74], they mainly focus on the comparisons of GNN variants, making it unclear how they perform compared with traditional GAD algorithms.

To redress these gaps and foster academia-industry synergy in GAD evaluation, we propose GADBench, which serves as the first comprehensive benchmark for supervised GAD. Our evaluation encompasses 7 non-graph models, 10 standard GNNs, and 10 state-of-the-art GNNs specifically designed for GAD. Recognizing the proven success of tree ensembles in the anomaly detection of tabular data, we additionally employ two tree ensemble models with simple neighborhood aggregations. All models are evaluated on 10 real-world GAD datasets ranging from thousands to millions of nodes. They are tested in both semi-supervised and fully-supervised settings, with and without hyperparameter tuning.

Through extensive experiments, we discover that (1) surprisingly, tree ensembles with neighbor aggregation have the superior performance among all models; (2) most standard GNNs are not suitable for the GAD task; (3) GNNs specifically designed for GAD require hyperparameter tuning to achieve satisfactory performance. We highlight that our findings can offer the research community a clearer insight into the current progress in GAD. In summary, our contributions can be organized into three main aspects:

* We introduce GADBench, the first comprehensive benchmark for supervised anomalous node detection on static attributed graphs. This includes a comparison of 29 well-known GAD methods across a collection of 10 real-world datasets in both semi-supervised and fully-supervised settings.
* To ensure a rigorous and fair comparison, we identify the limitations inherent in the existing evaluation scheme for GAD, instituting enhancements from dataset selection, metric utilization, model training, and hyperparameter tuning.
* We integrate all models, datasets, and evaluation protocols mentioned in this paper into an open-source repository. Users can reproduce the results and evaluate their own datasets/models with minimal effort.

## 2 Preliminaries and Related Work

Task definition.We focus on the detection of anomalous nodes within a static attributed graph. Formally, consider a graph \(=\{,,\}\), where \(=\{v_{1},v_{2},,v_{N}\}\) denotes a set of \(N\) nodes. The non-negative adjacency matrix \(^{N N}\) is defined such that \(_{ij}>0\) if and only if there is an edge between \(v_{i}\) and \(v_{j}\). \(^{N d}\) is a feature matrix, of which the \(i\)-th row vector \(_{i}=(i,:)\) is the \(d\)-dimensional feature vector of node \(v_{i}\). Given a subset of labeled nodes \(^{*}\), the task is to classify the remaining nodes into either normal or anomalous categories. In the context of

   Benchmark & \#Datasets & Max. Nodes & \#Models & Model Type & Supervision Scenario \\ \& Toolbox & (Organic) & /Edges & \#Models & Model Type & Supervision Scenario \\  UGFraud  & 1 (1) & 45K/3M & 6 & GNN & Unsupervised \\ DGFraud  & 3 (1) & 45K/3M & 9 & GNN & Supervised \\ BOND  & 9 (6) & 3M/4M & 14 & GNN, Classic & Unsupervised \\  GADBench & 10 (10) & 5M/73M & 29 & GNN, Classic, Trees & Fully- and Semi-Supervised \\   

Table 1: Comparison of existing GAD benchmarks in terms of datasets, models, and scenarios.

a heterogeneous graph, multiple adjacency matrices \(\{_{1},_{2},\}\) might exist, each representing different types of relationships among nodes.

Although the GAD task can be regarded as a binary node classification problem, it introduces several additional challenges. Firstly, anomalous nodes typically constitute a small portion of the total nodes, resulting in a significant data **imbalance**[50; 74]. Secondly, graphs with anomalies often exhibit strong **heterophily**, where connected nodes possess varying features and labels [27; 26]. This necessitates strategies to handle neighborhood feature disparities during message passing. Lastly, anomalous nodes have a tendency to **camouflage** their features and connections, blending seamlessly by mimicking the normal patterns in the graph [22; 51]. This demands attention to intentionally manipulated edges and node features. Before presenting our benchmark, we provide a brief overview of both classic methods and deep learning based GAD models. For a more thorough review of GAD models, please refer to these relevant surveys [55; 4; 38].

**Classical methods.** Classical methods primarily detect graph anomalies by leveraging graph statistical patterns [57; 34], community and clustering structures [14; 43; 86], egonet information , spectral analysis , random walk-based techniques [81; 29], etc. Other than these heuristic approaches and handcraft feature engineering, another research line leverages learning methods for a more flexible encoding of graph information to identify anomalies. Examples include residual learning [45; 63], relational learning [40; 66], and Bayesian models . Despite their advantages, most methods are primarily designed for plain graphs and struggle to handle attributed graphs. Additionally, they predominantly emphasize unsupervised settings and are generally inefficient in utilizing node labels.

**GNNs for GAD.** With superb ability to encode both structure and attribute information simultaneously, GNNs have recently gained popularity in mining graph data [76; 39; 85; 30]. To tackle the unique challenges of graph anomalies, such as imbalance, heterophily, and camouflage, several adaptations of standard GNNs have been proposed [20; 96; 24; 53; 52; 21; 79; 54; 90]. On one hand, **spatial** GNNs have primarily been redesigned at the level of their inherent mechanisms, such as message passing and aggregation . For instance, GAS  employs a structure-enhanced pre-processing strategy to establish implicit connections between anomalies. CARE-GNN  and GraphConsis  combat the camouflage behavior by designing camouflage-resistant message passing and aggregation processes. H2-FDetector  introduces a novel information aggregation strategy that enables homophilic connections to propagate similar information, while heterophilic connections disseminate differing information. With the consideration of label imbalance, solutions like PC-GNN  and DAGAD  use imbalance-aware data sampling and graph augmentation to highlight the importance of anomalies during training. On the other hand, **spectral** GNNs provide a fresh viewpoint that associates graph anomalies with high frequency spectral distributions . For example, BWGNN  applies Beta kernel to manage higher frequency anomalies via flexible and localized band-pass filters. AMNet  captures both low-frequency and high-frequency signals, adaptively integrating signals of varying frequencies.

**Ensemble models.** Tree ensembles, such as Random Forest [12; 9; 6; 5] and XGBoost [16; 78; 97; 58], have shown superior performance in anomaly detection tasks related to tabular data [93; 10; 2; 100]. For example, XGBOD , an extension of the XGBoost algorithm specifically designed for anomaly detection, incorporates scores from other models such as Isolation Forest  as additional feature and achieves superior performance. Despite their potential, few research has explored the application of tree ensembles in leveraging both structural and feature information simultaneously for GAD. Beyond trees, various base models can be integrated into ensembles for anomaly detection, as suggested by . The use of neighborhood aggregation has been demonstrated to enhance anomaly detection performance, which can be utilized during various stages such as pre-processing , model-training , and post-processing  phases. In this work, we revisit tree ensemble models and demonstrate their potential to outperform GNNs after combining a straightforward structural neighborhood aggregation.

## 3 The Setup of GADBench

In this section, we present a comprehensive overview of the setup for GADBench. We provide the general selection criteria and considerations for models (Section 3.1), datasets (Section 3.2), and other details (Section 3.3).

### Benchmark Models

Table 2 provides an overview of the 29 models assessed in GADBench. We briefly introduce each model in the following, and provide a more detailed description in Appendix A.

**Classical methods.** We select three basic algorithms for supervised classification: Multi-Layer Perceptron (MLP), \(k\)-Nearest Neighbors (KNN), and Support Vector Machine (SVM). Additionally, we incorporate three representative decision tree ensembles, including a bagging-based model, Random Forest (RF); a boosting-based model, Extreme Gradient Boosting Tree (XGBoost); and an advanced XGBoost model named Extreme Boosting Based Outlier Detection (XGBOD). We also assess a recent anomaly detection technique, Neighborhood Averaging (NA), which enhances the outlier scores of existing anomaly detectors by averaging them with the scores of neighboring objects.

**Standard GNNs.** We evaluate several standard GNNs that have proven to be effective across diverse graph learning tasks, including Graph Convolutional Network (GCN), Chebyshev Spectral Convolution Network (ChebNet), Graph Isomorphism Network (GIN), Graph Sample and Aggregate (GraphSAGE), Graph Attentional Network (GAT), Graph Transformer (GT), Principle Neighbor Aggregation (PNA), Boosted Graph Neural Network (BGNN). We also consider two widely used heterogeneous GNNs, including Relational Graph Convolution Network (RGCN) and Heterogeneous Graph Transformer (HGT).

**Specialized GNNs.** This group contains GNNs specifically designed for anomaly detection. We evaluate five spatial GNNs including the Graph-based Anti-Spam Model (GAS), Deep Cluster Infomax (DCI), Pick and Choose GNN (PC-GNN), and the GAT with ego- and neighbor-embedding separation (GAT-sep). For spectral GNNs, we evaluate the graph spectral filter via Bernstein Approximation (BernNet), Adaptive Multi-frequency GNN (AMNet), Beta Wavelet GNN (BWGNN), and the Graph Heterophily Reduction Network (GHRN). Additionally, we assess two GNNs optimized for heterogeneous graphs: the CAmouflage-REsistant GNN (CARE-GNN) and the Fraud Detector with Homophilic and Heterophilic Interactions (H2-FDetector).

**Tree ensembles with neighbor aggregation.** Decision tree ensembles have shown their effectiveness in anomaly detection with tabular data , prompting us to adapt them for GAD. To incorporate graph structure information, we follow the idea from a subclass of GNNs that independently manage message passing and node feature transformation [84; 98; 91]. Consequently, we devise tree ensembles with Neighbor aggregation that adhere to the following computational paradigm:

\[_{v_{i}}^{(l)} =\{_{v_{j}}^{(l-1)}|v_{i} (v_{j})\}\] \[(v_{i}) =([_{v_{i}}^{0}||_{v_{i}}^{1}|| ||_{v_{i}}^{L}]).\]

In this scheme, \(_{v_{i}}^{(0)}=_{i}\) denotes the initial node attributes, and \(_{v_{i}}^{(l)}\) represents the feature of node \(v_{i}\) after \(l\)-layers of neighbor aggregation. Aggregate\(()\) can take on any aggregation function such as mean, max, or sum pooling. Same as [84; 98; 91], the aggregation process is parameter-free. TreeEnsemble\(()\) can be any tree ensembles that takes the aggregated features as input to predict the anomaly score of node \(v_{i}\). In GADBench, we utilize Random Forest and XGBoost to instantiate two new tree ensemble baselines with neighbor aggregation, referred to as RF-Graph and XGB-Graph.

### Benchmark Datasets

In GADBench, we have gathered 10 diverse and representative datasets, as detailed in table 3, which are chosen based on the following criteria:

   Classic Methods & MLP , KNN , SVM , RF , XGBoost , XGBOD , NA  \\   & GCN , SGC , GIN , GraphSAGE , GAT , GT , PNA  \\  & BGNN , RGCN , HGT  \\   & GAS , DCI , PC-GNN , GAT-sep , BernNet , AMNet , \\  & BWGNN , GHRN , CARE-GNN , H2-FDetector  \\  Tree Ensembles with Neighbor Aggregate & RF-Graph, XGB-Graph \\   

Table 2: Categorization of all models used in our evaluation.

* **Organic anomalies.** Datasets in GADBench exclusively contain anomalies that naturally emerge in real-world scenarios, a distinction from previous studies that employ synthetic anomalies for GAD evaluations [21; 49]. These earlier works typically inject artificial node attributes and structures into normal graphs like Cora , resulting in anomalies that are relatively straightforward to be identified and obviously different from real-world anomalies.
* **Various domains.** Datasets in GADBench span multiple domains, including social media, e-commerce, e-finance, and crowd-sourcing. As presented in Table 3, the graph edge in each dataset embodies unique relation concepts, which shows a diverse distribution of applications.
* **Diverse scale.** GADBench datasets cover a wide scale, from thousands to millions of nodes. We have consciously excluded datasets with fewer than 5,000 nodes, such as Bitcoin-Alpha , Disney, and Books .
* **Imbalance ratio.** We have ensured that the number and ratio of anomalies within the datasets meet a specific criteria: each dataset contains more than 100 anomalies, to ensure stable experimental results, and no more than a 25% anomaly ratio, preserving the inherent imbalance nature of GAD. This criterion leads to the exclusion of the Enron dataset .

Among the datasets in GADBench, Weibo, Reddit, Questions, and T-Social are designed to identify anomalous accounts on social media platforms. Tolokers, Amazon and YelpChi datasets aim to detect fraudulent workers, reviews and reviewers on crowd-sourcing or e-commerce platforms. T-Finance, Elliptic, and DGraph-Fin concentrate on identifying fraudulent users, illicit entities and overdue loans in financial networks, respectively. For a more comprehensive description of each dataset, please refer to Appendix B.

### Other Details

**Data split.** We employ both fully-supervised and semi-supervised settings for model evaluation. In a fully-supervised setting, we preserve pre-existing data splits when available. If such divisions are not provided, we follow the approach suggested by , randomly partitioning nodes into three subsets: 40% for training, 20% for validation, and the remaining 40% for testing. For each dataset, the specific training ratio is reported in table 3. The semi-supervised setting typically involves a smaller training ratio, e.g., 1% or 5% in previous studies [74; 22]. However, due to the variance in graph sizes present in GADBench, a fixed training ratio might lead to substantial discrepancies in the scale of training sets. To more accurately mimic real-world semi-supervised scenarios, we standardize the training set across all datasets to include a total of 100 labels--20 positive labels (anomalous nodes) and 80 negative labels (normal nodes). To ensure robustness in our findings, we execute **ten** random splits on each dataset and analyze the average performance of the model.

**Metrics.** According to existing anomaly detection benchmarks [49; 31], we select Area Under the Receiver Operating Characteristic Curve (**AUROC**), Area Under the Prevision Recall Curve (**AUPRC**) calculated by average precision, and the Recall score within top-\(k\) predictions (**Rec@K**) as performance metrics for the GAD task. We set \(k\) as the number of anomalies within the test set. For all metrics, anomalies are considered as the positive class, and higher scores indicate better model

    & \#Nodes & \#Edges & \#Feat. & Anomaly & Train & Relation Concept & Feature Type \\ 
**Reddit[42; 49]** & 10,984 & 168,016 & 64 & 3.3\% & 40\% & Under Same Post & Text Embedding \\
**Weibo[92; 49]** & 8,405 & 407,963 & 400 & 10.3\% & 40\% & Under Same Hashtag & Text Embedding \\
**Amazon[56; 22]** & 11,944 & 4,398,392 & 25 & 9.5\% & 70\% & Review Correlation & Misc. Information \\ YelpChi[66; 22] & 45,954 & 3,846,979 & 32 & 14.5\% & 70\% & Reviewer Interaction & Misc. Information \\
**Tolokers** & 11,758 & 519,000 & 10 & 21.8\% & 40\% & Work Collaboration & Misc. Information \\
**Questions** & 48,921 & 153,540 & 301 & 3.0\% & 52\% & Question Answering & Text Embedding \\
**T-Finance** & 39,357 & 21,222,543 & 10 & 4.6\% & 50\% & Transaction Record & Misc. Information \\
**Elliptic** & 203,769 & 234,355 & 166 & 9.8\% & 50\% & Payment Flow & Misc. Information \\
**DGraph-Fin** & 3,700,550 & 4,300,999 & 17 & 1.3\% & 70\% & Loan Guarantor & Misc. Information \\
**T-Social** & 5,781,065 & 73,105,508 & 10 & 3.0\% & 40\% & Social Friendship & Misc. Information \\   

Table 3: Statistics of all datasets in GADBench including the number of nodes and edges, the node feature dimension, the ratio of anomalous labels, the training ratio in the fully-supervised setting, the concept of relations, and the type of node features. Misc. indicates the node features are a combination of heterogeneous attributes, possibly including categorical, numerical, and temporal information, More details are shown in Appendix B.

performance. Among these metrics, AUROC primarily focuses on overall performance and is not sensitive to top-\(k\) predictions, Rec@K only cares top-\(k\) performance, and AUPRC strikes a balance between the two. Suppose the test set includes 10 anomalies within 1000 data points and a model ranks them from positions 11\(th\) to 20\(th\), it would attain an AUROC of 0.99, an AUPRC of 0.33, and a Rec@10 of 0. We also document the **running time** and **memory consumption** of each model.

**Hyperparameter Optimization.** To control the effect of hyperparameter selection and ensure fairness , we standardize the evaluation process with and without hyperparameter tuning. Initially, we employ default hyperparameters as stated in the original papers. To ensure fairness in hyperparameter tuning, we then utilize **random search** to optimize hyperparameters. During one trial on each dataset, we randomly select a set of hyperparameters from the predefined search space for each model. For more information about metrics, default hyperparameters, search spaces, and other implementation details, please refer to Appendix C.

## 4 Experimental Results

In this section, we study the experimental results of all the benchmarked models. We first provide a comprehensive comparison of all models, taking into account both default and optimally tuned hyperparameters. Following that, we aim to conduct an in-depth comparison between tree ensembles with neighbor aggregation and GNN-based methods.

### Overall Comparison

In Figure 1, we present an overview of model performance across 10 datasets for all metrics, excluding four GNNs that are specific to heterogeneous graphs. In Table 4, we take a close look at the model performance regarding the AUPRC score after hyper-parameter tuning on each dataset. For comprehensive experimental results, please refer to Appendix D. Our key findings include:

**Ensemble trees with neighbor aggregation have superior performance.** As highlighted in Figure 1, XGB-Graph and RF-Graph consistently surpass other compared models across all metrics using default hyperparameters. The performance gap becomes particularly significant in the fully-supervised setting, i.e., XGB-Graph surpasses BWGNN--the best GNN model in this setting--by an absolute average improvement of 2.0% on AUROC, 12.9% on AUPRC, and 9.8% on Rec@K. In the semi-supervised context, RF-Graph presents an absolute average improvement of 2.8% on AUROC, 8.0% on AUPRC, and 3.1% on Rec@K, as compared to GHRN, the best GNN model in this setting. It is important to highlight that the improvement in AUPRC and Rec@K is more pronounced than that in AUROC due to the imbalanced issue, suggesting that RF-Graph and XGB-Graph are more proficient in predicting top-\(k\) high-confidence anomalies. Further, as shown in the bottom of Figure 1, tree ensembles with neighbor aggregation not only outperform GNNs in terms of efficiency but also exhibit lower memory consumption. Although the performance gap of different models narrow after hyperparameter tuning as in Table 4, RF-Graph and XGB-Graph still prevail among 6 out of 10 datasets. Accordingly, our observations show the superior effectiveness and efficiency of RF-Graph and XGB-Graph across diverse GAD datasets and scenarios.

**Most standard GNNs prove unsuitable for GAD.** As shown in Figure 1, it becomes clear that the majority of standard GNNs encounter difficulties when dealing with GAD tasks. To illustrate, the performance of GCN and GIN is on par with that of MLP--a method that does not take graph structure information into account. This indicates that standard GNNs often struggle to effectively handle structure camouflage or feature heterophily problems induced by anomalies. In Table 4, while hyperparameter tuning does improve the results of all standard GNNs, they remain subpar compared to methods in other categories. An exception is GraphSAGE, which displays an average absolute improvement of 10.4% on average AUPRC when optimal hyperparameters are used, making it competitive with specialized GNNs. BGNN, while impressive on specific datasets such as T-Social, exhibits poor performance on other datasets. This inconsistency may result from the inherent instability of its joint training scheme, especially when compared to the more stable two-step approach in XGB-Graph and RF-Graph.

**Specialized GNNs require hyperparameter tuning to achieve satisfactory performance.** Generally, specialized GNNs outperform standard GNNs in Figure 1, indicating that GNNs tailored for GAD can indeed enhance anomaly detection capabilities. However, the performance of these specialized GNNs strongly depends on hyperparameter tuning. As indicated in the last column of Table 4, all these methods witness a performance improvement after a hyperparameter search. For instance, when optimized hyperparameters are employed, BWGNN can surpass RF-Graph and XGB-Graph on the Reddit dataset. This demonstrates that under certain conditions, some specialized GNNs can deliver commendable performance. However, as illustrated at the bottom of Figure 1, these GNNs often demand more training time and memory. The inherent limitations of hyperparameter tuning are the same as the ones in the previous section.

Figure 1: Comparison of the anomaly detection performance, wall-clock time (on all datasets), and peak CPU/GPU memory utilization (on DGraph-Fin) among all models with default hyperparameters. Top three lines are in semi-supervised settings and the others are in fully-supervised settings. The color of the box plot represents the average score for each metric, while the central line within the box indicates the median score.

search also pose significant challenges, especially in real-world applications where there might be a scarcity of annotated labels or computational resources. Given these constraints, tree ensembles with neighborhood aggregation might still be the preferred choice.

NA is a versatile technique adaptable to any model in GADBench. We apply it to XGBoost and observe a remarkable enhancement in the semi-supervised setting, where the average AUPRC across 10 datasets increases from 37.5% to 38.9%. However, the boost is not significant in the fully-supervised setting. These findings highlight NA's potential as an effective strategy to address challenges associated with label scarcity. For additional results related to the application of NA on other models, please refer to Appendix D.

Finally, we observe that all methods perform poorly on the DGraph-Fin dataset. This can be attributed to the highly imbalanced and sparse graph structure, with an average degree of 1.16. Furthermore, we find that node features in this dataset are highly indistinguishable, as nearly all anomalous nodes share identical features with normal nodes. Indeed, the AUROC scores of all models on this dataset align with those reported in the original paper, as demonstrated in Appendix D.

### Specialized Experiments in Heterogeneous and Inductive Settings

    &  &  &  &  &  &  &  &  &  &  &  &  \\  MLP & 5.91 & 84.88 & 87.34 & 47.68 & 74.21 & 43.77 & 38.29 & 15.34 & 2.69 & 9.69 & 44.46 & 2.67 \\ KNN & 6.12 & 81.12 & 84.41 & 54.39 & 74.97 & 60.98 & 35.30 & 15.37 & 1.67 & 36.32 & 46.04 & 9.13 \\ SVM & 6.88 & 84.91 & 85.80 & 41.01 & 78.10 & 20.98 & 37.90 & 15.37 & 2.65 & OSOT & 41.51 & 4.53 \\ RF & 4.63 & 93.52 & 91.18 & 77.77 & 81.99 & 78.42 & 38.64 & 14.37 & 2.57 & 41.56 & 53.68 & 0.81 \\ XGBoost & 5.56 & 94.49 & 91.88 & 84.00 & 82.64 & 76.93 & 40.05 & 16.24 & 2.75 & 16.60 & 54.95 & 0.73 \\ XGBoD & 8.27 & 95.70 & 92.15 & 79.46 & 82.32 & 74.86 & 40.65 & 16.08 & 1.95 & OSOT & 54.61 & 1.62 \\ NA & **9.70** & 94.09 & 91.56 & 63.93 & 88.78 & 29.14 & 51.06 & 14.32 & 4.13 & 79.21 & 49.64 & 3.38 \\  GCN & 4.63 & 94.64 & 45.65 & 20.88 & 78.22 & 25.37 & 40.57 & 14.06 & 3.80 & 76.35 & 36.42 & 1.54 \\ SGC & 6.04 & 91.16 & 42.69 & 19.87 & 68.68 & 17.82 & 39.59 & 10.53 & 2.49 & 16.28 & 33.21 & 5.66 \\ GIN & 6.41 & 91.67 & 84.61 & 33.63 & 78.35 & 26.21 & 40.36 & 13.68 & 3.47 & 60.79 & 42.04 & 2.57 \\ GraphSAGE & 5.56 & 94.02 & 82.45 & 46.64 & 84.71 & 57.82 & 51.41 & 17.50 & 3.77 & 75.32 & 49.32 & 10.44 \\ GAT & 7.20 & 92.91 & 87.94 & 43.62 & 82.72 & 27.53 & 45.25 & 15.51 & 3.85 & 32.07 & 45.17 & 2.80 \\ GT & 7.68 & 89.85 & 84.90 & 44.60 & 83.14 & 25.90 & 45.71 & 17.08 & 3.83 & 36.14 & 44.74 & 5.42 \\ PNA & 7.75 & 96.04 & 35.24 & 29.95 & 76.67 & 27.81 & 47.14 & 13.13 & 3.22 & 21.24 & 36.64 & 4.93 \\ BGNN & 6.87 & 95.99 & 67.92 & 97.13 & 87.32 & 62.03 & 45.35 & 9.43 & **4.24** & **99.09** & 45.03 & 0.95 \\  GAS & 4.43 & 96.76 & 81.43 & 35.11 & 85.95 & 29.80 & 47.21 & 15.48 & 3.65 & 62.36 & 44.42 & 6.62 \\ DCI & 7.74 & 91.77 & 85.17 & 39.88 & 63.68 & 27.39 & 37.73 & 14.59 & 3.31 & 12.97 & 41.25 & 1.01 \\ PCGNN & 7.73 & 89.07 & 89.33 & 44.51 & 83.31 & 42.66 & 44.85 & 15.59 & 3.42 & 80.29 & 46.72 & 4.69 \\ BernNet & 7.82 & 92.38 & 84.89 & 51.92 & 89.17 & 38.25 & 43.69 & 17.25 & 3.27 & 44.30 & 47.63 & 2.90 \\ AMNet & 7.87 & 94.99 & 88.36 & 46.86 & 88.87 & 25.18 & 40.74 & 15.63 & 2.81 & 37.70 & 45.70 & 2.49 \\ GAT-sep & 7.19 & 93.40 & 84.72 & 45.59 & 84.01 & 26.35 & 46.66 & 17.90 & 3.84 & 33.39 & 45.50 & 2.98 \\ BWGNN & 8.32 & 94.01 & 91.48 & 61.53 & 89.38 & 29.31 & 49.58 & **18.57** & 3.97 & 78.93 & 49.57 & 2.12 \\ GHRN & 4.66 & 95.27 & 89.52 & 55.42 & 87.60 & 43.90 & 47.45 & 18.31 & 3.80 & 86.78 & 49.55 & 1.77 \\  RF-Graph & 5.13 & 96.95 & 90.53 & 83.92 & 89.23 & **78.86** & 52.34 & 14.44 & 2.15 & 97.63 & 57.06 & 1.21 \\ XGB-Graph & 5.29 & **97.06** & **93.33** & **91.11** & **90.12** & 77.78 & **53.92** & 18.19 & 3.79 & 97.34 & **58.95** & 1.34 \\   

Table 4: Comparison of the AUPRC score of each model with optimal hyperparameters through random search. Best results are highlighted in **bold**. In the last two columns, **Ave.** signifies the average score across the first 9 datasets without T-Social, while **Imp.** denotes the absolute increase in this average score when compared to the default hyperparameters. OOT means the model could not complete training within a day. Results for other metrics can be found in Appendix D and Table 13.

    &  &  &  &  \\  Model & AUROC & AUPRC & Rec@K & AUROC & AUPRC & Rec@K & AUROC & AUPRC & Rec@K & AUROC & AUPRC & Rec@K \\  GAT & 92.44 & 81.57 & 77.07 & 96.66 & 86.67 & 83.10 & 65.56 & 25.03 & 28.08 & 79.50 & 43.41 & 43.65 \\ BWGNN & 91.83 & 81.68 & 77.01 & 97.95 & 89.09 & 85.00 & 64.30 & 23.66 & 26.44 & 84.89 & 55.06 & 52.18 \\  RGCN & 84.17 & 41.07 & 45.57 & 92.03 & 67.97 & 65.49 &

**Dealing with heterogeneous graphs.** We evaluated the performance of four GAD methods that consider heterogeneity--RGCN, HGT, CARE-GNN, and H2-FDetector--using the Amazon and Yelp datasets, each comprising three different types of edges as detailed in Appendix B. For comparison, we also tested three other methods--GAT, BWGNN, and XGB-Graph--that treat all edge types equivalently. As shown in table 5, considering heterogeneity does not enhance performance on the Amazon dataset, but it leads to improvements on the Yelp dataset. Specifically, CARE-GNN outperforms all other methods under label-scarce conditions.

**Performance in the inductive setting.** Our primary experiments focus on the transductive setting, characterized by the assumption that all nodes are visible in the training process. To offer a holistic evaluation, we also conduct experiments in the inductive setting using DGraph-Fin and Elliptic datasets which have temporal features. In this setting, features and structures associated with test nodes are not accessible during the training phase. As presented in table 6, the model performance is generally impacted in the inductive setting of two datasets. Specifically, XGB-Graph outperforms other models across all metrics on Elliptic, while GHRN stands out as the most robust model on DGraph-Fin.

**The impact of different number of neighbor aggregation layers.** Figure 2 illustrates the performance change in XGB-Graph and RF-Graph with varying numbers of neighbor aggregation layers. Observably, the performance on most datasets improves when the number of neighbor aggregation layers increases from 0 to 2, confirming the effectiveness of the neighbor aggregation process. However, further increments in the number of layers do not contribute to any significant improvement in the model performance. Consequently, in most instances, two layers are adequate for XGB-Graph and RF-Graph, and utilizing more layers could lead to unnecessary computational overhead and memory usage.

### Why and When Do Tree Ensembles with Neighbor Aggregation Outperform GNNs?

**An initial study on decision boundaries.** Inspired by a recent benchmark about ensemble trees and neural networks on the tabular data , we explore the possible reasons for the superior performance of ensemble trees with neighborhood aggregation. Specifically, our primary investigation focuses on the models' decision boundaries.

In the left panel of Figure 3, we visualize the decision boundaries of GIN and RF-Graph on Amazon dataset. For detailed implementations, please see Appendix E. It is observed that the normal and anomalous nodes are closely intertwined, making them hard to separate. Unfortunately, GIN tends to produce simple and smooth decision boundaries, leading to frequent misclassification of normal nodes in the right bottom corners. Differently, RF-Graph can produce more intricate decision boundaries, demonstrating greater proficiency in distinguishing anomalous data. In the right panel of Figure 3, we visualize the decision boundaries of BWGNN and XGB-Graph on Weibo dataset. As can be seen, the anomalous nodes are grouped into several dispersed clusters. With this dispersed distributions, BWGNN is hard to achieve accurate classification due to simple and continuous decision boundaries. In contrast, XGB-Graph successfully classifies anomalies within each cluster.

    &  &  &  &  \\  Model & AUROC & AUPRC & Rec@K & AUROC & AUPRC & Rec@K & AUROC & AUPRC & Rec@K & AUROC & AUPRC & Rec@K \\  GCN & 75.79 & 14.97 & 16.73 & 92.40 & 73.87 & 69.99 & 73.93 & 3.35 & 5.61 & 75.85 & 3.99 & 7.05 \\ GraphsSAGE & 79.51 & 19.64 & 20.59 & 82.85 & 34.76 & 45.95 & 72.66 & 3.06 & 5.43 & 75.63 & 3.76 & 6.97 \\ BWGNN & 82.29 & 22.49 & 28.26 & 96.12 & 86.58 & 81.14 & 73.85 & 3.24 & 5.83 & **76.26** & **4.01** & 7.52 \\ GHRN & 84.74 & 25.42 & 28.54 & 96.05 & 86.57 & 81.11 & **76.20** & **4.03** & **7.48** & 76.14 & 3.99 & **7.54** \\  XGB-Graph & **90.36** & **76.20** & **70.64** & **96.80** & **89.58** & **84.59** & 71.25 & 2.81 & 5.33 & 74.64 & 3.66 & 6.75 \\   

Table 6: Performance comparison on the Elliptic and DGraph-Fin datasets under inductive and transductive settings, with all results being averaged over 10 runs.

Figure 2: The impact of different number of neighbor aggregation layers on the performance of XGB-Graph and RF-Graph.

In summary, anomaly instances tend to form multiple dispersed clusters and are coupled with normal instances, which fall in the categories of the inductive bias of RF-Graph and XGB-Graph that favor complex and disjoint decision boundaries. In contrast, as GNNs typically employ MLP as the final layer, they tend to generate simple and continuous decision boundaries, which makes GNNs sub-optimal on some challenging GAD datasets.

**The impact of dataset feature types on model performance.** As indicated in Table 3, out of the 10 datasets in GADBench, 3 datasets purely use text embeddings as node features, while in the remaining 7 datasets, node features contain miscellaneous information such as the combination of numerical, categorical, and temporal features. Notably, for datasets that rely on text-based features--namely Reddit, Weibo, and Questions--GNNs showcase competitive performance in comparison to other methods including tree ensembles. This could be attributed to the nature of text embeddings: they often represent low-dimensional manifolds in a high-dimensional feature space, where dimensions tend to be highly correlated. A GNN can process all these dimensions simultaneously, whereas an individual decision tree might only consider a limited subset of feature columns. Conversely, in the other 7 datasets with diverse feature types that have low correlation (for instance, gender and age information), tree ensembles with neighbor aggregation typically exhibit superior performance.

In conclusion, in common GAD scenarios such as fraud detection, node features mainly originate from user profiles, which may encompass varied feature types. Thus, tree ensembles with neighbor aggregation often emerge as the preferred choice. However, for specific tasks like fake news and rumor detection, where text data is pivotal, GNNs still present a compelling option.

## 5 Conclusion and Future Plan

In this paper, we introduce GADBench, the first comprehensive benchmark for supervised anomalous node detection on static attributed graphs. Our evaluation of 29 models on 10 real-world datasets shows that tree ensembles with simple neighborhood aggregation generally outperform other models, including GNNs specifically designed for the GAD task. The rationale behind this finding is initially examined from the standpoints of decision boundary and node feature type. Our results challenge the prevailing belief about the superiority of GNNs in GAD and underline the importance of a fair and comprehensive comparison in accurately understanding the capabilities of various models. By making GADBench open-source, we aim to foster further research and refinement of GAD algorithms, as well as their more informed evaluations and comparisons.

We regard GADBench as a long-term evolving project and are dedicated to its continuous development. Our roadmap for the future includes expanding its scope to include a broader spectrum of GAD scenarios, incorporating more cutting-edge models, and integrating newer datasets. At present, we primarily focus on treating datasets as static graphs to ensure compatibility with most baselines. We have only embarked on preliminary studies concerning heterogeneous and inductive settings. Looking ahead, we envision extending our evaluations to more complex types of graphs and anomalies. Our ultimate goal is to transform GADBench into a more robust, scalable GAD toolbox, with advanced features like automated model selection .