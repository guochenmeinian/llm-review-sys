# Robust Learning with Progressive Data Expansion

Against Spurious Correlation

Yihe Deng Yu Yang1 Baharan Mirzasoleiman Quanquan Gu

Department of Computer Science

University of California, Los Angeles

Los Angeles, CA 90095

{yihedeng,yuyang,baharan,qgu}@cs.ucla.edu

Equal contribution

###### Abstract

While deep learning models have shown remarkable performance in various tasks, they are susceptible to learning non-generalizable _spurious features_ rather than the core features that are genuinely correlated to the true label. In this paper, beyond existing analyses of linear models, we theoretically examine the learning process of a two-layer nonlinear convolutional neural network in the presence of spurious features. Our analysis suggests that imbalanced data groups and easily learnable spurious features can lead to the dominance of spurious features during the learning process. In light of this, we propose a new training algorithm called **PDE** that efficiently enhances the model's robustness for a better worst-group performance. PDE begins with a group-balanced subset of training data and progressively expands it to facilitate the learning of the core features. Experiments on synthetic and real-world benchmark datasets confirm the superior performance of our method on models such as ResNets and Transformers. On average, our method achieves a \(2.8\%\) improvement in worst-group accuracy compared with the state-of-the-art method, while enjoying up to \(10\) faster training efficiency. Codes are available at [https://github.com/uclaml/PDE](https://github.com/uclaml/PDE).

## 1 Introduction

Despite the remarkable performance of deep learning models, recent studies (Sagawa et al., 2019, 2020; Izmailov et al., 2022; Haghtalab et al., 2022; Yang et al., 2022, 2023b, c) have identified their vulnerability to spurious correlations in data distributions. A spurious correlation refers to an easily learned feature that, while unrelated to the task at hand, appears with high frequency within a specific class. For instance, waterbirds frequently appear with water backgrounds, and landbirds with land backgrounds. When training with empirical risk minimization (ERM), deep learning models tend to exploit such correlations and fail to learn the more subtle features genuinely correlated with the true labels, resulting in poor generalization performance on minority data (e.g., waterbirds with land backgrounds as shown in Figure 1). This observation raises a crucial question: _Does the model genuinely learn to classify birds, or does it merely learn to distinguish land from water?_ The issue is particularly concerning because deep learning models are being deployed in critical applications such as healthcare, finance, and autonomous vehicles, where we require a reliable predictor.

Researchers formalized the problem by considering examples with various combinations of core features (e.g., landbird/waterbird) and spurious features (e.g., land/water backgrounds) as different _groups_. The model is more likely to make mistakes on certain groups if it learns the spurious feature. The objective therefore becomes balancing and improving performance across all groups. Under this formulation, we can divide the task into two sub-problems: (1) accurately identifying the groups, which are not always known in a dataset, and (2) effectively using the group informationto finally improve the model's robustness. While numerous recent works (Nam et al., 2020; Liu et al., 2021; Creager et al., 2021; Ahmed et al., 2021; Taghanaki et al., 2021; Zhang et al., 2022) focus on the first sub-problem, the second sub-problem remains under studied. The pioneering work (Sagawa et al., 2019) still serves as the best guidance for utilizing accurate group information. In this paper, we focus on the second sub-problem and aim to provide a more effective and efficient algorithm to utilize the group information. It is worth noting that the theoretical understanding of spurious correlations lags behind the empirical advancements of mitigating spurious features. Existing theoretical studies (Sagawa et al., 2020; Chen et al., 2020; Yang et al., 2022; Ye et al., 2022) are limited to the setting of simple linear models and data distribution that are less reflective of real application scenarios.

We begin by theoretically examining the learning process of spurious features when training a two-layer nonlinear convolutional neural network (CNN) on a corresponding data model that captures the influence of spurious correlations. We illustrate that the learning of spurious features swiftly overshadows the learning of core features from the onset of training when groups are imbalanced and spurious features are more easily learned than core features. Based upon our theoretical understanding, we propose Progressive Data Expansion (**PDE**), a neat and novel training algorithm that efficiently uses group information to enhance model's robustness against spurious correlations. Existing approaches, such as GroupDRO (Sagawa et al., 2019) and upsampling techniques (Liu et al., 2021), aim to balance the data groups in each batch throughout the training process. In contrast, we employ a small balanced warm-up subset only at the beginning of the training. Following a brief period of balanced training, we progressively expand the warm-up subset by adding small random subsets of the remaining training data until using all of them, as shown in the top right of Figure 1. Here, we utilize the momentum from the warm-up subset to prevent the model from learning spurious features when adding new data. Empirical evaluations on both synthetic and real-world benchmark data validate our theoretical findings and confirm the effectiveness of PDE. Additional ablation studies also demonstrate the significance and impact of each component within our training scheme. In summary, our contributions are highlighted as follows:

* We provide a theoretical understanding of the impact of spurious correlations beyond the linear setting by considering a two-layer nonlinear CNN.
* We introduce PDE, a theory-inspired approach that effectively addresses the challenge posed by spurious correlations.
* PDE achieves the best performance on benchmark vision and language datasets for models including ResNet and Transformer. On average, it outperforms the state-of-the-art method by \(2.8\%\) in terms of worst-group accuracy.
* PDE enjoys superior training efficiency, being \(10\) faster than the state-of-the-art methods.

Figure 1: A overview of the problem, our proposed solution, and the resultant outcomes. (A) We demonstrate the data distribution and provide an example of the statistics of Waterbirds. (B) The overall procedure of PDE. (C) we use GradCAM (Selvaraju et al., 2017) to show the attention of the model trained with PDE as compared to ERM. While ERM focuses on the background, PDE successfully trains the model to capture the birds.

Why is Spurious Correlation Harmful to ERM?

In this section, we simplify the intricate real-world problem of spurious correlations into a theoretical framework. We provide analysis on two-layer nonlinear CNNs, extending beyond the linear setting prevalent in existing literature on this subject. Under this framework, we formally present our theory concerning the training process of empirical risk minimization (ERM) in the presence of spurious features. These theoretical insights motivate the design of our algorithm.

### Empirical Risk Minimization

We begin with the formal definition of the ERM-based training objective for a binary classification problem. Consider a training dataset \(S=\{(_{i},y_{i})\}_{i=1}^{N}\), where \(_{i}^{d}\) is the input and \(y\{ 1\}\) is the output label. We train a model \(f(;)\) with weight \(\) to minimize the empirical loss function:

\[()=_{i=1}^{N}y_{i}f(_ {i};), \]

where \(\) is the logistic loss defined as \((z)=(1+(-z))\). The empirical risk minimizer refers to \(^{*}\) that minimizes the empirical loss: \(^{*}*{argmin}_{}()\). Typically, gradient-based optimization algorithms are employed for ERM. For example, at each iteration \(t\), gradient descent (GD) has the following update rule:

\[^{(t+1)}=^{(t)}-(^{(t)}). \]

Here, \(>0\) is the learning rate. In the next subsection, we will show that even for a relatively simple data model which consists of core features and spurious features, vanilla ERM will fail to learn the core features that are correlated to the true label.

### Data Distribution with Spurious Correlation Fails ERM

Previous work such as (Sagawa et al., 2020) considers a data model where the input consists of core feature, spurious feature and noise patches at fixed positions, i.e., \(=[_{},_{},_{ {noise}}]\). In real-world applications, however, features in an image do not always appear at the same pixels. Hence, we consider a more realistic data model where the patches do not appear at fixed positions.

**Definition 2.1** (Data model).: A data point \((,y,a)(^{d})^{P}\{ 1\}\{ 1\}\) is generated from the distribution \(\) as follows.

* Randomly generate the true label \(y\{ 1\}\).
* Generate spurious label \(a\{ y\}\), where \(a=y\) with probability \(>0.5\).
* Generate \(\) as a collection of \(P\) patches: \(=(^{(1)},^{(2)},,^{(P)})( ^{d})^{P}\), where
* **Core feature.*
* One and only one patch is given by \(_{c} y_{c}\) with \(\|_{c}\|_{2}=1\).
* **Spurious feature.*
* One and only one patch is given by \(_{s} a_{s}\) with \(\|_{s}\|_{2}=1\) and \(_{c},_{s}=0\).
* **Random noise.*
* The rest of the \(P-2\) patches are Gaussian noises \(\) that are independently drawn from \(N(0,(_{p}^{2}/d)_{d})\) with \(_{p}\) as an absolute constant. And \(0<_{c}_{s}\).

Similar data models have also been considered in recent works on feature learning (Allen-Zhu and Li, 2020; Zou et al., 2021; Chen et al., 2022; Jelassi and Li, 2022), where the input data is partitioned into feature and noise patches. We extend their data models by further positing that certain feature patches might be associated with the spurious label instead of the true label. In the rest of the paper, we assume \(P=3\) for simplicity. With the given data model, we consider the training dataset \(S=\{(_{i},y_{i},a_{i})\}_{i=1}^{N}\) and let \(S\) be partitioned into large group \(S_{1}\) and small group \(S_{2}\) such that \(S_{1}\) contains all the training data that can be correctly classified by the spurious feature, i.e., \(a_{i}=y_{i}\), and \(S_{2}\) contains all the training data that can only be correctly classified by the core feature, i.e., \(a_{i}=-y_{i}\). We denote \(=|}{N}\) and therefore \(1-=|}{N}\).

Visualization of our data.In Figure 2, we present the visualization in \(2\)D space of the higher-dimensional data generated from our data model using t-SNE (Van der Maaten and Hinton, 2008), where data within each class naturally segregate into large and small groups. The spurious feature is sufficient for accurate classification of the larger group data, but will lead to misclassification of the small group data.

Figure 2: Visualization of the data.

### Beyond Linear Models

We consider a two-layer nonlinear CNN defined as follows:

\[f(;)=_{j[J]}_{p=1}^{P}_{j},^{(p)}, \]

where \(_{j}^{d}\) is the weight vector of the \(j\)-th filter, \(J\) is the number of filters (neurons) of the network, and \((z)=z^{3}\) is the activation function. \(=[_{1},,_{J}]^{d J}\) denotes the weight matrix of the CNN. Similar two-layer CNN architectures are analyzed in in (Chen et al., 2022; Jelassi and Li, 2022) but for different problems, where the cubic activation serves a simple function that provides non-linearity. Similar to Jelassi and Li (2022); Cao et al. (2022), we assume a mild overparameterization of the CNN with \(J=(d)\). We initialize \(^{(0)}(0,_{0}^{2})\), where \(_{0}^{2}=(d)}{d}\). Due to the CNN structure, our analysis can handle data models where each data can have arbitrary order of patches while linear models fail to do so.

### Understanding the Training Process with Spurious Correlation

In this subsection, we formally introduce our theoretical result on the training process of the two-layer CNN using gradient descent in the presence of spurious features. We first define the performance metrics. A frequently considered metric is the test accuracy: \(()=_{(,y,a) D}(f (;))=y\). With spurious correlations, researchers are more interested in the worst-group accuracy:

\[_{}()=_{y\{ 1\},a\{ 1\}}_{( ,y,a)}(f(;))=y ,\]

which accesses the worst accuracy of a model among all groups defined by combinations of \(y\) and \(a\). We then summarize the learning process of ERM in the following theorem. Our analysis focuses on the learning of spurious and core features, represented by the growth of \(_{i}^{(t)},_{s}\) and \(_{i}^{(t)},_{c}\) respectively:

**Theorem 2.2**.: Consider the training dataset \(S=\{(_{i},y_{i})\}_{i=1}^{N}\) that follows the distribution in Definition 2.1. Consider the two-layer nonlinear CNN model as in (2.3) initialized with \(^{(0)}(0,_{0}^{2})\). After training with GD in (2.2) for \(T_{0}=1/(_{s}^{3}_{0})\) iterations, for all \(j[J]\) and \(t[0,T_{0})\), we have

\[()_{s}^{3}(2-1) _{j}^{(t)},_{s}^{2} _{j}^{(t+1)},_{s}- _{j}^{(t)},_{s}()_{s }^{3}_{j}^{(t)},_{s}^{2}, \] \[()_{c}^{3} _{j}^{(t)},_{c}^{2} _{j}^{(t+1)},_{c}- _{j}^{(t)},_{c}()_{ c}^{3}_{j}^{(t)},_{c}^{2}. \]

After training for \(T_{0}\) iterations, with high probability, the learned weight has the following properties: (1) it learns the spurious feature \(_{s}\): \(_{j[J]}_{j}^{(T)},_{s} {}(1/_{s})\); (2) it _almost_ does not learn the core feature \(_{c}\): \(_{j[J]}_{j}^{(T)},_{c}=}(_{0})\).

Discussion.The detailed proof is deferred to Appendix E, and we provide intuitive explanations of the theorem as follows. A larger value of \(_{i}^{(t)},\) for \(\{_{s},_{c}\}\) implies better learning of the feature vector \(\) by neuron \(_{i}\) at iteration \(t\). As illustrated in (2.4) and (2.5), the updates for both spurious and core features are non-zero, as they depend on the squared terms of themselves with non-zero coefficients, while the growth rate of \(_{i}^{(t)},_{s}\) is significantly faster than that of \(_{i}^{(t)},_{c}\). Consequently, the neural network rapidly learns the spurious feature but barely learns the core feature, as it remains almost unchanged from initialization.

We derive the neural network's prediction after training for \(T_{0}\) iterations. For a randomly generated data example \((,y,a)\), the neural network's prediction is given by \(f(;)=_{j[J] }y_{c}^{3}_{j},_{c}^{3}+a_ {s}^{3}_{j},_{s}^{3}+_{j},^{3}\). Since the term \(_{s}^{3}_{j[J]}_{j},_{s}^{3}\) dominates the summation, the prediction will be \((f(;))=a\). Consequently, we obtain the test accuracy as \(()=\), since \(a=y\) with probability \(\), and the model accurately classifies the large group. However, when considering the small group and examining examples where \(y a\), the models consistently make errors, resulting in \(_{wg}()=0\). To circumvent this poor performance on worst-group accuracy, an algorithm that can avoid learning the spurious feature is in demand.

## 3 Theory-Inspired Two-Stage Training Algorithm

In this section, we introduce Progressive Data Expansion (PDE), a novel two-stage training algorithm inspired by our analysis to enhance robustness against spurious correlations. We begin with illustrating

[MISSING_PAGE_FAIL:5]

As accelerated gradient methods are most commonly used in applications, we jointly consider the property of momentum and our theoretical insights when designing the algorithm. For gradient descent with momentum (GD+M), at each iteration \(t\) and with momentum coefficient \(>0\), it updates as follows

\[^{(t+1)} =^{(t)}+(1-)(^{(t )}), \] \[^{(t+1)} =^{(t)}-^{(t+1)}, \]

Warm-up Stage.In this stage, we create a fully balanced dataset \(S^{0}\), in which each group is randomly subsampled to match the size of the smallest group, and consider it as a warm-up dataset. We train the model on the warm-up dataset for a fixed number of epochs. During this phase, the model is anticipated to accurately learn the core feature without being influenced by the spurious feature. Note that, under our data model, a completely balanced dataset will have \(=1/2\). We present the following lemma as a theoretical basis for the warm-up stage.

**Lemma 3.1**.: Given the balanced training dataset \(S^{0}=\{(_{i},y_{i},a_{i})\}_{i=1}^{N_{0}}\) with \(=1/2\) as in Definition 2.1 and CNN as in (2.3). The gradient on \(_{s}\) will be \(0\) from the beginning of training.

In particular, with \(=1/2\) we have \(|S^{0}_{1}|=|S^{0}_{2}|\): an equal amount of data is positively correlated with the spurious feature as the data negatively correlated with the spurious feature. In each update, both groups contribute nearly the same amount of spurious feature gradient with different signs, resulting in cancellation. Ultimately, this prevents the model from learning the spurious feature. Detailed proofs can be found in Appendix F.

Expansion Stage.In this stage, we proceed to train the model by incrementally incorporating new data into the training dataset. The rationale for this stage is grounded in the theoretical result by the previous work (Jelassi and Li, 2022) on GD with momentum, which demonstrates that once gradient descent with momentum initially increases its correlation with a feature \(\), it retains a substantial historical gradient in the momentum containing \(\). Put it briefly, the initial learning phase has a considerable influence on subsequent training for widely-used accelerated training algorithms. While ERM learns the spurious feature \(_{s}\) and momentum does not help, as we will show in synthetic experiments, PDE avoids learning \(_{s}\) and learns \(_{c}\) in the warm-up stage. This momentum from warm-up, in turn, amplifies the core feature that is present in the gradients of newly added data, facilitating the continued learning of \(_{c}\) in the expansion stage. For a specific illustration, the learning of the core feature by GD+M will be

\[_{j}^{(t+1)},_{c}=_{j}^{(t) }- g^{(t)}+(1-)_{_{j}}( ^{(t)}),_{c},\]

where \(g^{(t)}\) is the additional momentum as compared to GD with \(=0\). While the current gradient along \(_{c}\) might be small (i.e., \(_{c}\)), we can benefit from the historical gradient in \(g^{(t)}\) to amplify the growth of \(_{j}^{(t+1)},_{c}\) and make it larger than that of the spurious feature (i.e., \(_{s}\)). This learning process will then correspond to the case when the model learns the core feature discussed in Subsection 3.1. Practically, we consider randomly selecting \(m\) new examples for expansion every \(J\) epochs by attempting to draw a similar number of examples from each group. During the last few epochs of the expansion stage, we expect the newly incorporated data exclusively from the larger group, as the smaller groups have been entirely integrated into the warm-up dataset.

It is worth noting that while many works address the issue of identifying groups from datasets containing spurious correlations, we assume the group information is known and our algorithm focuses on the crucial subsequent question of optimizing group information utilization. Aiming to prevent the learning of spurious features, PDE distinguishes itself by employing a rapid and lightweight warm-up stage and ensuring continuous improvement during the expansion stage with the momentum acquired from the warm-up dataset. Our training framework is both concise and effective, resulting in computational efficiency and ease of implementation.

## 4 Experiments

In this section, we present the experiment results from both synthetic and real datasets. Notably, we report the worst-group accuracy, which assesses the minimum accuracy across all groups and is commonly used to evaluate the model's robustness against spurious correlations.
In this section, we present synthetic experiment results in verification to our theoretical findings. In Appendix A, we illustrate the detailed data distribution, hyper-parameters of the experiments and more extensive experiment results. The data used in this section is generated following Definition 2.1. We consider the worst-group and overall test accuracy. As illustrated in Table 1, ERM, whether trained with GD or GD+M, is unable to accurately predict the small group in our specified data distribution where \(=0.98\) and \(_{c}<_{s}\). In contrast, our method significantly improves worst-group accuracy while maintaining overall test accuracy comparable to ERM. Furthermore, as depicted in Figure 3(a), ERM rapidly learns the spurious feature as it minimizes the training loss, while barely learning the core feature. Meanwhile, in Figure 3(b) we show the learning of ERM when the data distribution breaks the conditions of our theory and has \(_{c}>_{s}\) instead. Even with the same \(\) as in Figure 3(a), ERM correctly learns the core feature despite the imbalanced group size. These two figures support the theoretical results we discussed to motivate our method. Consequently, on the same training dataset as in Figure 3(a), Figure 3(c) shows that our approach allows the model to initially learn the core feature using the warm-up dataset and continue learning when incorporating new data.

### Real Data

We conduct experiments on real benchmark datasets to: (1) compare our approach with state-of-the-art methods, highlighting its superior performance and efficiency, and (2) offer insights into the design of our method through ablation studies.

**Datasets.** We evaluate on three wildly used datasets across vision and language tasks for spurious correlation: (1) **Waterbirds**(Sagawa et al., 2019) contains bird images labeled as waterbird or landbird, placed against a water or land background, where the smallest subgroup is waterbirds on land background. (2) **CelebA**(Liu et al., 2015) is used to study gender as the spurious feature for hair color classification, and the smallest group in this task is blond-haired males. (3) **CivilComments-WILDS**(Koh et al., 2021) classifies toxic and non-toxic online comments while dealing with demographic information. It creates \(16\) overlapping groups for each of the \(8\) demographic identities.

**Baselines.** We compare our proposed algorithm against several state-of-the-art methods. Apart from standard ERM, we include GroupDRO (Sagawa et al., 2019) and DFR (Kirchenko et al., 2023) that assume access to the group labels. We only include \(^{}\) for fair comparison as all methods only use the training dataset to train and finetune the model, while \(^{}\) also finetunes on validation data. We also design a baseline called subsample that simply trains the model on the warm-up dataset only. Additionally, we evaluate three recent methods that address spurious correlations without the need for group labels: LfF (Nam et al., 2020), EIIL (Creager et al., 2021), and JTT (Liu et al., 2021). We

    & Worst-group (\(\%\)) & Gap (\(\%\)) \\  ERM (GD) & \(0.00\) & \(97.71\) \\ ERM (GD+M) & \(0.00\) & \(97.71\) \\ Warmup+All (Reset) & \(67.69\) & \(31.18\) \\ Warmup+All & \(74.24\) & \(24.76\) \\ PDE (Reset) & \(92.51\) & \(2.29\) \\ PDE & \(\) & \(\) \\   

Table 1: Synthetic data experiments. We report the worst-group accuracy and the gap (i.e., overall - worst). We further consider several variations of PDE to demonstrate the importance of each component of our method. **Reset**: we reset the momentum to zero after the warm-up stage. **Warmup+All**: we let PDE to incorporate all of the new training data at once after the warm-up stage.

Figure 3: **Training process of ERM vs. PDE. We consider the same dataset generated from the distribution as in Definition 2.1 for ERM (case 1) and PDE. On the same training data, ERM learns the spurious feature while PDE successfully learns the core feature. We further consider ERM (case 2) when training on the data distribution where \(_{c}>_{s}\) and \(=0.98\). We show the growth of the max inner product between the model’s neuron and core/spurious signal vector and the decrease of training loss with regard to the number of iterations \(t\).**

[MISSING_PAGE_FAIL:8]

#### 4.2.3 Understanding the Two Stages

We examine each component and demonstrate their effect in PDE. In Table 4, we present the worst-group and average accuracy of the model trained following the warm-up and expansion stages. Indeed, the majority of learning occurs in the warm-up stage, during which a satisfactory worst-group accuracy is established. In the expansion stage, the model persists in learning new data along the established trajectory, leading to continued performance improvement. In Figure 5, we corroborate and emphasize that the model has acquired the appropriate features and maintains learning based on its historical gradient stored in the momentum by presenting the following evidence. As shown, if the optimizer is reset after the warm-up stage and loses all its historical gradients, it rapidly acquires spurious features, resulting in a swift decline in performance accuracy as shown in the blue line.

#### 4.2.4 Ablation Study on the Hyper-parameters of PDE

PDE is robust within a reasonable range of hyperparemeter choices, although some configurations outperform others. As shown in Table 5, it is necessary to limit the number of data points introduced during each expansion to prevent performance degradation. Similarly, in Appendix A, we emphasize the importance of gradual data expansion. In Table 6, we show that post-warmup learning rate decay is essential, though PDE exhibits a tolerance to the degree of this decay. Lastly, as illustrated in Figure 5, adopting a smaller learning rate often necessitates increased data expansions. Nonetheless, a reduced learning rate does not necessarily lead to improved performance.

   Exp. size & Exp. lr & Worst & Average \\ 
10 & 1e-2 & \(85.4_{ 3.1}\) & \(92.1_{ 2.0}\) \\
10 & 1e-3 & \(89.4_{ 0.7}\) & \(92.6_{ 0.3}\) \\
10 & 1e-5 & \(89.5_{ 0.2}\) & \(92.1_{ 0.1}\) \\   

Table 6: Ablation study on Waterbirds. Exp. lr: the learning rate in expansion stage.

    & Warm-up &  \\ Dataset & Worst & Avg & Worst & Avg \\  Waterbirds & 86.0 & 91.9 & **90.3** & 92.4 \\ CelebA & 87.8 & 92.1 & **91.0** & 92.0 \\ CivilComm & 67.7 & 78.8 & **71.5** & 86.3 \\   

Table 4: Performance of PDE after each stage. We report the worst-group and average accuracy.

Figure 4: The effect of reset the momentum to zero after the warm-up stage for PDE on Waterbirds.

Figure 5: The variations in both worst-group and average accuracy on the test set of Waterbirds during expansion stage under different expansion learning rates. Each vertical dashed line denotes an expansion and the arrow denotes the early stopping.

Related Work

Existing approaches for improving robustness against spurious correlations can be categorized into two lines of research based on the tackled subproblems. A line of research focuses on the same subproblem we tackle: effectively using the group information to improve robustness. With group information, one can use the distributionally robust optimization (DRO) framework and dynamically increase the weight of the worst-group loss in minimization (Hu et al., 2018; Oren et al., 2019; Sagawa et al., 2019; Zhang et al., 2021). Within this line of work, GroupDRO (Sagawa et al., 2019) achieves state-of-the-art performances across multiple benchmarks. Other approaches use importance weighting to reweight the groups (Shimodaira, 2000; Byrd and Lipton, 2019; Xu et al., 2021) and class balancing to downsample the majority or upsample the minority (He and Garcia, 2009; Cui et al., 2019; Sagawa et al., 2020). Alternatively, Goel et al. (2021) leverage group information to augment the minority groups with synthetic examples generated using GAN. Another strategy (Cao et al., 2019, 2020) involves imposing Lipschitz regularization around minority data points. Most recently, methods that train a model using ERM first and then only finetune the last layer on balanced data from training or validation (Kirichenko et al., 2023) or learn post-doc scaling adjustments (Wei et al., 2023) are shown to be effective.

The other line of research focuses on the setting where group information is not available during training and tackles the first subproblem we identified as accurately finding the groups. Recent notable works (Nam et al., 2020; Liu et al., 2021; Creager et al., 2021; Zhang et al., 2022; Yang et al., 2023a) mostly involve training two models, one of which is used to find group information. To finally use the found groups, many approaches (Namkoong and Duchi, 2017; Duchi et al., 2019; Oren et al., 2019; Sohoni et al., 2020) still follow the DRO framework.

The first theoretical analysis of spurious correlation is provided by Sagawa et al. (2020). For self-supervised learning, Chen et al. (2020) shows that fine-tuning with pre-trained models can reduce the harmful effects of spurious features. Ye et al. (2022) provides guarantees in the presence of label noise that core features are learned well only when less noisy than spurious features. These theoretical work only provides analyses of linear models. Meanwhile, a parallel line of work has established theoretical analysis of nonlinear CNNs in the more realistic setting Allen-Zhu and Li (2020); Zou et al. (2021); Wen and Li (2021); Chen et al. (2022); Jelassi and Li (2022). Our work builds on this line of research and generalizes it to the study of spurious features. Lastly, we notice that a concurrent work (Chen et al., 2023) also uses tensor power method (Allen-Zhu and Li, 2020) to analyze the learning of spurious features v.s. invariant features, but in the setting of out-of-distribution generalization.

## 6 Conclusion

In conclusion, this paper addressed the challenge of spurious correlations in training deep learning models and focused on the most effective use of group information to improve robustness. We provided a theoretical analysis based on a simplified data model and a two-layer nonlinear CNN. Building upon this understanding, we proposed PDE, a novel training algorithm that effectively and efficiently enhances model robustness against spurious correlations. This work contributes to both the theoretical understanding and practical application of mitigating spurious correlations, paving the way for more reliable and robust deep learning models.

**Limitations and future work.** Although beyond the linear setting, our analysis still focuses on a relatively simplified binary classification data model. To better represent real-world application scenarios, future work could involve extending to multi-class classification problems and examining the training of transformer architectures. Practically, our proposed method requires the tuning of additional hyperparameters, including the number of warm-up epochs, the number of times for dataset expansion and the number of data to be added in each expansion.