# DiffPO: A causal diffusion model for learning distributions of potential outcomes

Yuchen Ma, Valentyn Melnychuk, Jonas Schweisthal & Stefan Feuerriegel

LMU Munich

Munich Center for Machine Learning

yuchen.ma@lmu.de

###### Abstract

Predicting potential outcomes of interventions from observational data is crucial for decision-making in medicine, but the task is challenging due to the fundamental problem of causal inference. Existing methods are largely limited to point estimates of potential outcomes with no uncertain quantification; thus, the full information about the distributions of potential outcomes is typically ignored. In this paper, we propose a novel causal diffusion model called DiffPO, which is carefully designed for reliable inferences in medicine by learning the _distribution_ of potential outcomes. In our DiffPO, we leverage a tailored conditional denoising diffusion model to learn complex distributions, where we address the selection bias through a novel orthogonal diffusion loss. Another strength of our DiffPO method is that it is highly flexible (e.g., it can also be used to estimate different causal quantities such as CATE). Across a wide range of experiments, we show that our method achieves state-of-the-art performance.

## 1 Introduction

Predicting potential outcomes (POs) for patients from observational data is crucial for decision-making in medicine . For example, in cancer care, one is interested in individualized predictions of survival under different treatment plans, which can then help medical practitioners choose a treatment plan that promises the largest chance of survival .

Predicting POs of interventions from observational data is challenging due to the _fundamental problem of causal inference_, i.e., the fact that one cannot obverse all POs for each individual . Further, in observational data, treatments are generally not assigned completely randomly, and, as a result, the distributions of covariates in the treatment and control groups differ . If this covariate shift is not taken into account, the distributions of POs given the covariates would be learned sub-optimally .

In the causal inference literature, many existing methods are aimed at conditional average treatment effect (CATE) estimation where POs are used as auxiliary quantities (e.g.,). In principle, some CATE methods _could_ be used for predicting POs but these are not tailored for POs and thus tend to _underperform_ at predicting POs. The underlying reason is that the estimator with the best performance in estimating CATE might not do best at predicting POs in finite samples . Additionally, many state-of-the-art CATE estimators leverage an inductive bias , i.e., they assume that POs should share similar structures. As a result, they assume that the CATE follows a much simpler function than the POs, so that it is easier to learn the CATE than each PO separately. Moreover, most of these methods only focus on point estimates instead of learning the distributions of POs. The latter is more difficult but very crucial for reliable decision-making in medical applications.

In this paper, we propose a causal diffusion model called DiffPO for predicting POs. Specifically, we leverage a tailored conditional diffusion model to learn complex distributions of POs. We further propose a novel orthogonal diffusion loss to adjust for the covariate shift problem in finite samples. Our orthogonal diffusion loss ensures Neyman-orthogonality, which offers favorable theoretical properties. In particular, it makes our method more robust to misspecification. Further, our DiffPO is carefully designed for _reliable_ inferences in medicine and thus allows for uncertainty quantification We thereby follow recent calls in medicine to move beyond point estimates and offer distributional knowledge [23; 35], which can inform how likely a certain outcome is and what a probable range of POs is.

Our method is highly flexible. It can learn distributions of POs for uncertainty quantification and give point estimates of POs. It can also handle different causal quantities, such as the CATE. This is unlike many state-of-the-art methods from CATE estimation which are limited to point estimates [12; 13; 31; 32; 37; 45]. Hence, for different settings, custom methods have to be designed, while our causal diffusion model offers a flexible and reliable approach.

Overall, our **main contributions** are the following: (1) We propose a novel causal diffusion model for learning the distributions of POs, which can give both point estimation but also allows for uncertainty quantification. (2) We propose a novel orthogonal diffusion loss that ensures Neyman-orthogonality. (3) We conduct a wide range of experiments in different settings to demonstrate the flexibility and effectiveness of our DiffPO.1

## 2 Related Work

Our work aims to learn the distributions of POs for patients. The task is related to CATE estimation in that the PO framework conceptualizes the CATE as the expected difference between the POs of a patient with and without treatment. Hence, we include also methods for CATE estimation in our literature review below. While these could, in principle, be used for predicting POs, _we emphasize that CATE estimation and predicting POs will have a different finite-sample performance_.

### Predicting POs and CATE estimation

There have been many works designed for CATE estimation (e.g.,[1; 2; 3; 6; 10; 12; 13; 25; 28; 30; 31; 32; 37; 45; 64; 66]). Existing CATE methods fall into two categories: model-agnostic and model-specific estimators. We only give a concise overview in this section (see Table 1). A detailed literature review is in Appendix A.3.

**Model-agnostic estimators.** Model-agnostic learning strategies are also known as meta-learners (e.g.,[12; 13; 31; 32; 37; 45]). These can be split into (a) one-step (plug-in) learners that output regression functions from the observational data and then compute the CATE as the difference between the POs and (b) two-step learners that first estimate nuisance functions to build a pseudo-outcome and then obtain CATE directly by regressing the input covariates on the pseudo-outcomes in the second step. (Note that _pseudo-outcomes are not potential outcomes_).

   & Estimate type &  & Bias-advensing & Orthogonal & POs are the target & Key limitations \\  S-learner  & One-step (plug-in), model-agnostic & ✗ & ✗ & ✗ & ✗ & ✗ & Selection bias; point estimator \\ T-learner  & One-step (plug-in), model-agnostic & ✗ & ✗ & ✗ & ✗ & ✗ & ✗ \\ DR-learner, & Two-step model-agnostic & ✗ & ✓ & ✓ & ✗ & CATE inductive base point estimate \\ R-learner & Two-step model-agnostic & ✗ & ✓ & ✗ & ✗ & ✗ & CATE inductive base point estimate \\ YANR  & One-step (plug-in), model-specific & ✗ & ✗ & ✗ & ✗ & ✗ \\ CRI  & One-step (plug-in), model-specific & ✗ & ✓ & ✗ & ✓ & Point estimator \\ GANITE  & Two-step model-specific & ✗ & ✗ & ✗ & ✗ & ✗ \\ TEDVAE  & One-step (plug-in), model-specific & ✗ & ✗ & ✗ & ✗ & ✗ \\ 
**DiffPO** (ours) & One-step (plug-in), model-specific & ✓ & ✓ & ✓ & ✓ & ✓ & Sampling time longer \\ 
**(**)** in the column (_UQ_ refers to that methods are not originally designed for uncertainty quantification of POs, but can be adapted for this purpose.** \\  

Table 1: Overview of key methods for CATE estimation (and predicting POs). _UQ_ refers to whether the methods allow for uncertainty quantification of POs. _Bias addressing_ refers to whether the methods address the selection bias. _Orthogonal_ refers to whether it is robustness (i.e., Neyman-orthogonality wrt. nuisance functions). _POs are the target_ refers to whether the methods are originally designed for the task of predicting POs.

The problem with one-step plug-in learners (e.g., S-learner , T-learner ) is that they often do not address selection bias. The problem with two-step learners (e.g., DR-learner [31; 39], RA-learner ) is that these commonly leverage an inductive bias specific to CATE. Thus, two-step learners often have benefits for CATE estimation, but they make restrictive assumptions that hurt the finite-sample performance in predicting POs. Hence, in finite samples, such an inductive bias in CATE estimation can even lead to bias in PO prediction.

**Model-specific estimators.** Many model-specific estimators provide instantiations the general model-agnostic methods: Here, standard machine learning models are adapted to CATE estimation / POs prediction (e.g.,[10; 30; 54; 61; 64; 66]). Recently, neural networks have been used for model-specific learners [30; 54; 64; 66]. Yet, model-specific estimators based on neural networks are designed for CATE estimation but are _not_ directly aimed at POs.

**Uncertainty quantification.** Most state-of-the-art estimators fail to offer uncertainty quantification of POs (see Table 1). In particular, these methods typically only offer point estimates, yet _without_ distributional information and thus do _not_ allow for uncertainty quantification. Yet, distributional information is crucial for reliable decision-making in medicine and presents the focus of our method.

**Implications for benchmarking.** Most of the existing works are designed for CATE estimation, but not for learning the distributions of POs. For benchmarking PO prediction, many methods targeting the CATE _do not include an estimation of POs_, and, thus, they are _not_ applicable for our task. We show this in the column _POs are the target_ in Table 1. Instead, we can _only_ compare with those methods that are applicable to our task: _that is, where the model can directly output POs predictions_[37; 54; 64].

### Diffusion models for causal inference

Diffusion models were introduced for learning from complex distribution for a given dataset from which one can then sample high-quality data points (e.g., images) [26; 55; 57]. Diffusion models have achieved state-of-the-art performance, outperforming other generative models on various tasks in the computer vision field (e.g.,[14; 56; 59]). We give a brief technical overview of diffusion models in Sec. 3.

Diffusion models were previously used for different causal inference tasks but in a _different_ setting from ours, for example, generating the counterfactual of a given image [36; 51], answering causal queries , or causal discovery . We emphasize that the aforementioned tasks are different from ours. For example, the task in [36; 51] is similar to minimizing the changes that one needs to make to an image in order for the classifier to categorize the image into a different class. The task of answering causal queries [8; 33; 53] builds upon structural causal models (SCMs), while we are using the PO framework . The assumptions for fitting SCMs are usually much stronger than the latter. In causal discovery , the output is the causal graph, while our output is a causal quantity. Hence, these works were all developed for _different_ tasks (and _not_ designed for learning the distributions of POs). Because of this, the works are _not_ applicable as baselines.

## 3 Preliminaries on diffusion models

Diffusion models [26; 55; 57] are likelihood-based generative models that use (1) forward and (2) reverse Markov processes. The (1) **forward process** 'disturbs' the data distribution \(q(x_{0})\) into a tractable prior \((,)\). For this, it gradually adds noise to an initial sample \(x_{0} q(x_{0})\) across \(T\) steps with variance schedules \(\{_{1},,_{T}\}\). The forward process can be written as \(q(x_{1:T} x_{0})=_{t=1}^{T}q(x_{t} x_{t-1})\) with Gaussian distribution \(q(x_{t} x_{t-1}):=(x_{t};}x_{ t-1},_{t})\). It admits a closed form of \(q(x_{t} x_{0})\) that is also a Gaussian distribution \((_{t}}x_{0},(1-_{t}) )\), where \(_{t}=_{i=1}^{t}(1-_{i})\).

The (2) **reverse process**\(p(x_{0:T})=_{t=1}^{T}p(x_{t-1} x_{t})\) gradually denoises the latent variable \(x_{T}(,)\) and further allows for generating new data samples from \(q(x_{0})\). The distributions \(p(x_{t-1} x_{t})\) are usually unknown and approximated by a neural network with parameters \(\). Thus, a parameterized Markov chain \(\{p_{}(x_{t-1} x_{t})\}_{t=1}^{T}\) is trained in the reverse process. It can be parameterized as \(p_{}(x_{t-1} x_{t}):=(x_{t-1};_{ }(x_{t},t),_{}(x_{t},t))\).  suggested using diagonal \(_{}(x_{t},t)\) with a constant \(_{t}\) and computing \(_{}(x_{t},t)\) as a function of \(x_{t}\) and \(_{}(x_{t},t)\). This yields

[MISSING_PAGE_FAIL:4]

### Forward and reverse diffusion process

Our DiffPO builds upon diffusion models [26; 55; 57]. We distinguish the distributions learned in the forward process and the reverse process via \(q\) and \(p\), respectively, to make the notation straightforward in this section.

**1**Forward process:** Given a data point \((y,x,a)\) sampled from the observational data distribution \(p(Y,X,A)\), in the forward diffusion process, we gradually add Gaussian noise to the initial \(y\) (denoted as \(y_{0}\)) across \(T\) time steps. This thus produces a sequence of noisy samples \(y_{1},,y_{T}\) in the same sample space as \(y_{0}\). The forward process follows a Markov chain

\[q(y_{1:T} y_{0}):=_{t=1}^{T}q(y_{t} y_{t-1} ), q(y_{t} y_{t-1}):=([ ]{c}y_{t};}y_{t-1},_{t}),\] (1)

where \(_{t}\) is a variance schedule: \(\{_{t}(0,1)\}_{t=1}^{T}\) is a small positive constant that represents a noise level and, thus, essentially controls the step sizes. By using the reparameterization trick , sampling \(y_{t}\) at an arbitrary timestep \(t\) has a closed form

\[q(y_{t} y_{0})=(y_{t};_{t}} y_{0},(1-_{t})),\] (2)

where \(_{t}:=1-_{t}\) and \(_{t}:=_{s=1}^{t}_{s}\). Thus, \(y_{t}\) can be expressed as

\[y_{t}(y_{0},)=_{t}}y_{0}+_{t}},\] (3)

where \(^{d_{Y}}(,)\). As a result, the data sample \(y_{0}\) gradually 'looses' its distinguishable features for later steps \(t\). Eventually, when \(T\), \(y_{T}\) is equivalent to an isotropic Gaussian distribution.

**2**Reverse process:** We aim to learn the true distributions of POs, which can be identified as the conditional distribution in Sec. 4. Using the notation above, it can be rewritten as \(q(y_{0} x,a)= q(y_{0:T} x,a)y_{1:T}\). As \(q(y_{t-1} y_{t},x,a)\) is intractable, we need to learn a model distribution \(p_{}\) parameterized by \(\) to approximate the data distribution.

The reverse process starts at a known prior distribution with density \(p(y_{T})=(y_{T};,)\) and then proceeds backward to obtain the data distribution at step \(t=0\). Formally, the reverse diffusion process is also a Markov chain, and the density of its joint distribution \(p_{}(y_{0:T} x,a)\) can be written as

\[p_{}(y_{0:T} x,a):=p(y_{T})_{t=1}^{T}p_{ }(y_{t-1} y_{t},x,a), y_{T}(,).\] (4)

We employ a conditional diffusion model with the reverse process in Eq. (4). The conditional density \(p_{}(y_{t-1} y_{t},x,a)\) is also Gaussian, and we parameterize it as

\[p_{}(y_{t-1} y_{t},x,a):=(y_{t-1};_{ }(y_{t},t x,a),_{t}^{2}).\] (5)

The reverse process gradually denoises \(y_{T}(,)\) through the learned Gaussian transitions. Once we have computed the latter, we approximate the original data distribution and can even sample from it.

**Variational inference:** Directly computing and maximizing the likelihood \(p_{}(y_{0} x,a)\) is difficult because it involves intractable integration. As a remedy, we frame the learning objective for the above diffusion processes through variational inference. Thus, the parameters \(\) can then be optimized by maximizing the evidence lower bound (ELBO) via

\[ p_{}(y_{0} x,a)_{y_{1:T} q(Y_ {1:T} y_{0})}[(y_{0:T} x,a)}{ q(y_{1:T} y_{0})}].\] (6)

The right side of Eq. (6) can be rewritten as (see Appendix B for the derivation)

\[_{y_{1} q(Y_{1}  y_{0})}[ p_{}(y_{0} y_{1},x,a)] }_{}-}(q(y_{T}  y_{0}) p(y_{T}))}_{}\\ -_{t=2}^{T}_{y_{t} q(Y_{t}  y_{0})}[D_{}(q(y_{t-1} y_{t},y_{0} ) p_{}(y_{t-1} y_{t},x,a))]}_{ }.\] (7)In the denoising matching term, we try to minimize the KL-divergence between two distributions, one is tractable, ground truth denoising transition step \(q(y_{t-1} y_{t},y_{0})\), and other is denoising transition step \(p_{}(y_{t-1} y_{t},x,a)\).

**Conditional denoising function.** In practice, directly optimizing the learning objective in Eq. (7) is inefficient. Recently,  has shown a way to turn the optimization of the ELBO into a simpler problem for _unconditional_ diffusion models. We thus follow a similar way to obtain a simpler problem for our learning objective, but for our _conditional_ diffusion models.

We employ a trainable conditional denoising function \(f_{}:(,) \). The conditional denoising function is a function approximation, which we use to predict the 'ground truth' noise component \(\) for the noisy data sample \(y_{t}\) conditioned on \(x\) and \(a\). We consider the following parameterization that computes \(_{}(y_{t},t x,a)\) as a function of \(y_{t}\), \(x\), \(a\) and \(f_{}\). This gives

\[_{}(y_{t},t x,a)=}}(y_ {t}-}{_{t}}}f_{}(y_{t},t x,a)).\] (8)

The simplified training objective for \(t\{1,,T\}\) is then

\[_{(y_{0},x,a) p(Y,X,A);( ,)}[\|-f_{}(_{t}}y_{0}+_{t}},t x,a)\|^ {2}].\] (9)

We provide the full derivation of Eq. (8) and Eq. (9) in Appendix C.

### Orthogonal diffusion loss for addressing selection bias

_Why we need to address selection bias through our orthogonal diffusion loss:_ In observational data, treatments are not randomized but are administered according to some (unknown) behavioral policy. This can result in a _selection bias_, especially in medical practice. For example, patients with a more severe health state will also receive a more aggressive treatment. As a result, when treatment \(A\) is selected based on the covariates \(X\), the propensity score \((X)\) is not constant, implying that the distributions of covariates in treatment and control groups differ. Formally, we have a distribution shift in the covariates, i.e., \(p(X A=0) p(X A=1)\). If not adjusted for, this distribution shift may result in a _selection bias_ and thus an _inflated variance_ in the estimates of POs (and thus the causal effects), especially in low-sample settings [12; 29; 54]. To address this, we thus introduce a novel orthogonal diffusion in the following.

**3 Orthogonal diffusion loss.** Our proposed orthogonal diffusion loss is inspired by orthogonal learning theory [18; 60]. Orthogonal learning theory provides a general toolbox for inference with semi-parametric models to provide quasi-oracle rates for statistical learning with a nuisance component. Informally, orthogonal losses are first-order insensitive to misspecification of the nuisance functions, which introduces many favorable properties such as double robustness . Below, we construct an orthogonal diffusion loss for our method.

We start by noting that \((x)\) is not constant and is unknown in observational datasets. Because of that, one cannot simply use the propensity scores to reweight the data. Instead, we need a trainable approach to reweight the data and thus adjust for the distribution shift from above. To this end, the propensity score \((x)\) is a nuisance function in our method, which we estimate through a trainable

Figure 1: **Overview of our causal diffusion model DiffPO. Our method involves a forward and reverse diffusion process to learn the distributions of potential outcomes. Additionally, we address selection bias through our orthogonal diffusion loss.**

function \(g_{}\) parameterized by \(\). Let us denote the estimated propensity score by \((x)=g_{}(x)\). We then assign weights \(w_{}(x,a)\) to each sample via some function \(w_{}:(\{0,1\})_{+}\). More specifically, we define the function \(w_{}:(\{0,1\})_{+}\) as

\[w_{}(x,a)=(x)}+(x)}.\] (10)

Then, our _orthogonal diffusion loss_ is given by

\[(,)=_{(y_{0},x,a) p(Y,X,A); (,)}w_{}(x,a)\| -f_{}(_{t}}y_{0}+_{t }},t x,a)\|^{2}.\] (11)

The loss in Eq. (9) fits the conditional distributions \(p(Y X,A)\) based on the data samples from the joint observational distribution, i.e., \((y_{0},x,a) p(Y,X,A)\). Due to the selection bias, this implies that \(p(Y X,A=1)\) is learned better for the treated population and \(p(Y X,A=0)\) for the untreated population . Yet, our target is to learn the potential outcome distributions \(p(Y(a) X)=p(Y X,A=a)\) for both \(a=0\) and \(a=1\) equally well in all the populations. This would be equivalent to minimizing the target loss from Eq. (9) if the samples are from the joint distributions of the POs, i.e., \((y_{0},x) p(Y(a),X)\). However, we do not have samples from the distributions of POs, thus we need the target loss in Eq. (11) to be estimated via the propensity score \((x)\) to learn the distributions of POs. Hence, the following remark holds.

**Remark 1**.: _The orthogonal diffusion loss in Eq. (11) evaluated with the ground truth nuisance functions matches the following target loss:_

\[(,)=_{a\{0,1\}}_{(y_{0},x) p(Y(a),X); (,)}[\|-f_{ }(_{t}}y_{0}+_{t}},t  x,a)\|^{2}].\] (12)

Proof.: The orthogonal diffusion loss in Eq. (11) is an inverse propensity-weighted estimator of the target loss in Eq. (12). 

**Theorem 1** (Neyman-orthogonality).: _The orthogonal diffusion loss in Eq. (11) is Neyman-orthogonal wrt. its nuisance functions._

Proof.: See Appendix D. 

As a result of Neyman-orthogonality, our orthogonal diffusion loss has a clear practical advantage: it offers robustness against errors in nuisance function estimation. Specifically, it is first-order insensitive wrt. errors in the propensity score \((x)\) and, thus, is a more accurate objective for our PO predictive model.

### Training and sampling

**Training.** Our training algorithm proceeds along the following steps. We first train the function \(g_{}\) on the dataset to estimate the propensity score. After this, the parameters of \(g_{}\) are frozen. We then compute each sample weight for the orthogonal diffusion loss through the weight function \(w_{}\). We finally sample from the observational data distribution and run the forward and reverse process as described in Sec.5.1. The corresponding training loss is given in Eq. (11).

**Sampling.** Once our diffusion model has learned the distribution \(p_{}(Y_{t-1} y_{t},x,a)\), we can generate samples from it. The sampling process starts by sampling \(y_{T}\) from the prior distribution and then denoising it. To obtain \(y_{t-1}\) from \(p_{}(y_{t-1} y_{t},x,a)\), this requires the mean \(\) from the previous step, which can be computed by Eq. (8). Thus, \(y_{t-1}\) can be computed via \(+_{t}z\), where \(z(,)\). This process continues for \(t=T,\) until we arrive at \(y_{0}\).

**Implementation.** Our model architecture of denoising function is based on  and uses U-Net  as the underlying backbone. We use \(4\) residual blocks where each is built with MLP layers. The diffusion embedding dimension is \(128\). The number of diffusion sampling steps is \(100\). Training is conducted with a batch size of 256 and a learning rate of 0.0005. We follow  in the way how we learn propensity scores and thus use fully connected neural networks with softmax activation. During training, we can only observe one of the two POs due to the fundamental problem of causal inference  (as explained in Sec. 4). To guide the model, we need to identify which PO should the loss be computed on. Hence, we introduce causal masks as input to our model: an observational mask \(_{o}\), a targeted mask \(_{t}\), and a conditional mask \(_{c}\). We only compute the loss at the place where the value of the targeted mask is \(1\). Further details about our implementation are in Appendix E.1.

## 6 Experiments

### Learning distributions of POs

**Performance metrics.** We use the Wasserstein distance to evaluate the model performance of learning the distributions of POs. The \(k\)-Wasserstein distance (for any \(k 1\)) between two distributions \(_{1}\) and \(_{2}\) is

\[W^{k}(_{1},_{2})=(_{0}^{1}| _{1}^{-1}(l)-_{2}^{-1}(l)|^{k}\;l)^ {1/k},\] (13)

where \(_{1}^{-1}(l)\) and \(_{2}^{-1}(l)\) are the quantile functions (inverse cumulative distribution functions) of \(_{1}\) and \(_{2}\) for quantile \(l\), respectively. Specifically, we compute the empirical Wasserstein distance based on two sets of finite samples, i.e., \(W^{k}(_{1},_{2})=(_{i=1}^{n}\|X_{(i)}-Y_{(i)} \|^{k})^{1/k}\), where \(X_{1},,X_{n}\) are the samples from \(_{1}\) and \(Y_{1},,Y_{n}\) are the samples from \(_{2}\). In our experiments, we report the empirical Wasserstein distance for \(k=1\). Lower values of \(W^{k}\) are preferred.

**Dataset.** Due to the fundamental problem of causal inference, the counterfactual outcomes are never observed in real-world data. We thus follow prior literature (e.g.,[22; 38]) and benchmark our model using synthetic datasets. Further details about the synthetic datasets are in the Appendix F.

**Baselines.** Many methods are targeting CATE estimation and, therefore, are _not_ suitable for PO prediction. We thus compare against those methods that are applicable to our task (i.e., the model can directly output POs; see Table 1): (1) **S-learner**: is a model-agnostic learner that fits a single regression model by concatenating the covariate and the treatment as input; (2) **T-learner**: is a model-agnostic learner that fits two separate regression models, one for treated and for controls; (3) **TARNet**: is based on representation learning to share information about the outcome across treated and controls with regularization; (4) **CFR**: is based on representation learning used in variants of balancing with TARNet; (5) **GANITE**: uses a generative adversarial network to generate POs and then uses another generative adversarial network to generate CATE. We adapt GANITE to our task by removing the second stage, so that we directly sample POs from the learned distributions in the first stage. However, methods (1) to (4) above are only able to give point estimates of POs. Therefore, we follow  to equip them with Monte Carlo (MC) dropout to make these methods comparable. Implementation details are in Appendix E.2.

**Results.** The results are in Table 2. We find that our method gives the lowest empirical Wasserstein distance out of all methods, which is desirable. Hence, the experiments show that our method outperforms the baselines by a clear margin.

### Learning predictive intervals of POs

**Performance metrics.** To evaluate the ability of our DiffPO to allow for uncertainty estimation, we follow  and examine the predictive intervals (PIs) of the POs generated by different methods. In medical practice, the treatment effectiveness is often reported based on the 95% and 99% PIs. We thus compute the individual equal-tailed \((1-)\) PIs with \([0.01,0.05]\). We then calculate the _faithfulness_ of the estimated PIs to evaluate the empirical coverage by computing the frequency with which the PIs contain the outcomes in the test data.

    &  &  \\  & \(_{1}^{k}\) & \(_{}^{k}\) & \(_{1}^{k}\) & \(_{}^{k}\) \\  S-learner\({}^{}\) & 1.007 \(\) 4.053 & 1.005 \(\) 4.053 & 1.781 \(\) 0.005 & 1.955 \(\) 4.010 \\ T-learner\({}^{}\) & 1.034 \(\) 4.053 & 1.002 \(\) 4.053 & 1.052 \(\) 1.017 & 1.453 \(\) 4.017 \\ TARNet\({}^{}\) & 0.952 \(\) 4.053 & **0.978 \(\) 0.052** & 1.022 \(\) 0.021 & 1.211 \(\) 4.023 \\ CFR\({}^{}\) & 0.921 \(\) 4.02 & **0.943 \(\) 0.104** & 0.999 \(\) 0.121 & 1.078 \(\) 4.010 \\ GANITE\({}^{}\) & 0.759 \(\) 4.053 & 1.324 \(\) 4.053 & 0.821 \(\) 0.030 & 1.112 \(\) 4.04 \\   & **0.043 \(\) 4.053** & **0.125 \(\) 4.053** & **0.032 \(\) 4.050** & **0.091 \(\) 4.050** \\  ^{}\)-modified method to make it comparable.} \\ 

Table 2: Results showing in- & out-of-sample empirical Wasserstein distance (i.e., \(_{1}^{k}\) and \(_{}^{k}\)) for two potential outcomes (i.e., \(a=0\) and \(a=1\)) on the synthetic dataset. Reported: mean \(\) standard deviation over ten-fold train-test splits.

**Results:** We evaluate the empirical coverage across different quantiles \((1-)\). The results are in Table 3. It shows that our DiffPO is generally faithful, while this is not the case for the baselines. This can be expected: MC dropout relies upon mixtures of Dirac distributions in parameter space, which leads to approximations of the true posterior which are questionable and not faithful [17; 24].

### Point estimates of POs

**Performance metrics for POs:** To evaluate point estimates of POs, we compute the difference between the predicted PO \(_{i}\) and the ground truth PO \(y_{i}\) via the root mean squared error \(=^{N}{(_{i}-y_{i})}^{2}}}\).

**Baselines.** We compare against those methods that are applicable to this task (i.e., the model can directly output POs; see Table 1).

**Results.** The results are in Table 4. We find that our DiffPO gives the best point estimates of POs.

### Flexibility to handle other causal quantities

A strength of our method is that it is flexible and can not only be used for POs but also for other causal quantities. For example, even though we are aiming at learning the distributions of POs, our method is also capable of estimating the CATE \((x)=[Y(1)-(0) X=x]\), which is the expected difference of POs for an individual with covariate values \(X=x\). For this, one can use our method to first predict \(_{a}(x)=[Y X,A=a]\) for \(a\{0,1\}\) and then simply leverage that \((x)=_{1}(x)-_{0}(x)\).

**Datasets.** We estimate the CATE across ACIC 2016 & ACIC 2018, which are widely used dataset collections for CATE benchmarking [66; 12; 42]. The ACIC2016  contains 77 different benchmark datasets, and ACIC2018  contains 24. These datasets include a wide range of data-generating mechanisms (see Appendix F for more details). We use five random train/test splits (80% / 20%) for each dataset, tune hyperparameters on the first split, and evaluate the average out-sample on every split.

**Performance metrics.** We compare the \(_{}=_{i=1}^{N}{((x_{i })-(x_{i}))}^{2}}\).

**Baselines.** We consider a broad array of state-of-the-art methods for treatment effect estimation from the literature. Considering the rich methods in the literature, we thus compare with the most popular CATE estimation approaches in this field [10; 30; 37; 54; 61; 64; 66], as listed in the Table 1. Specifically, we use the following baselines: **(1)** to **(5)** from Sec. 6.1. (6) **DR-learner**[39; 31]: generates pseudo-outcomes based on the doubly-robust AIPW estimator; (7) **RA-learner**: uses a regression-adjusted pseudo-outcome in the second stage; (8) **TEDVAE**: uses a variational autoencoder to differentiate confounding factor and learns CATE. We instantiate the meta-learners (i.e., S-, T-, DR, and RA-learner) with neural networks, similar to our DiffPO. To ensure a fair comparison across all methods and all experiments, we tune hyperparameters across all methods

    &  &  \\  & \(_{}\) & \(_{}\) & \(_{}\) & \(_{}\) \\  S-learner  & 0.401\(\)0.00 & 0.391\(\)0.00 & 0.379\(\)0.00 & 0.398\(\)0.00 \\ T-learner  & 0.432\(\)0.00 & 0.454\(\)0.00 & 0.434\(\)0.00 & 0.421\(\)0.00 \\ TANNet  & 0.364\(\)0.00 & 0.358\(\)0.00 & 0.319\(\)0.00 & 0.328\(\)0.00 \\ CFR  & 0.263\(\)0.00 & 0.278\(\)0.00 & 0.261\(\)0.00 & 0.293\(\)0.00 \\ GANITE  & 0.378\(\)0.00 & 0.390\(\)0.00 & 0.525\(\)0.00 & 0.547\(\)0.00 \\   & **0.143\(\)0.00** & **0.156\(\)0.00** & **0.162\(\)0.00** & **0.187\(\)0.00** \\   & & & \\ 

Table 4: Results for point estimation of POs benchmarked using the in- & out-of-sample RMSE for the two potential outcomes (i.e., \(a=0\) and \(a=1\)) on the synthetic dataset. Reported: mean \(\) standard deviation over ten-fold train-test splits.

    &  &  \\  & \% best\({}_{}\) & \% best\({}_{}\) & \% best\({}_{}\) & \% best\({}_{}\) \\  S-learner  & 3.76 & 3.41 & 1.16 & 1.02 \\ T-learner  & 3.71 & 3.8 & 0.74 & 1.13 \\ TARNet  & 8.92 & 9.21 & 7.98 & 6.71 \\ CRR  & 10.52 & 11.45 & 7.91 & 7.71 \\ CRR  & 64.78 & 6.44 & 5.22 & 3.98 \\ DR-learner  & 15.71 & 14.68 & 15.73 & 15.01 \\ RA-learner  & 15.71 & 14.68 & 15.73 & 15.01 \\ TEDVAE  & 9.33 & 9.52 & 7.28 & 5.45 \\ 
**DiffPO** & **26.73** & **25.82** & **31.34** & **36.86** \\   & & & \\ 

Table 5: Results for benchmarking CATE estimation on ACIC 2016 and ACIC 2018 for both in- & out-of-sample, respectively. Reported: % of runs with the best performance.

separately for each experimental dataset. We discuss implementation details of baselines in the Appendix E.

**Results.** The results for CATE estimation are in Table 5. We find that our method achieves a good performance similar to existing methods, even though our method is not tailored for CATE estimation. Across a wide range of experiments in different settings, we even observe that our method often achieves state-of-the-art performance.

### Visualizing the learned distributions of POs

A clear advantage of our DiffPO is that we not only return point estimates but also the _distribution_ of POs. This is crucial in medical practice [23; 35] in order to understand the expected probability of whether a treatment is beneficial and thus to better assess the reliability of the estimates. We show the learned distributions for a real-world dataset from medicine.

**IHDP dataset.** This is a semi-synthetic dataset from the Infant Health and Development Program (IHDP) , which is based on the extracted features and treatment assignments from a real-world clinical trial. The dataset comprises \(747\) patients, with \(25\) features for each patient. Further details for IHDP are in Appendix F.3.

**Insights.** Our DiffPO is capable of capturing the full information about the distributions of POs. Current state-of-the-art methods usually estimate quantities expressed via the mean of POs, as these methods focus purely on point estimation [31; 37; 54]. However, distributional knowledge of POs is important to account for uncertainty, because it informs how likely a certain outcome is and gives the probability that the PO lies in a desired range, especially in medicine.

Fig. 2 shows the empirical distributions of POs, i.e., \(p(Y(0) X)\) and \(p(Y(1) X)\), given a certain patient profile \(X=x\). We can see the distributions of the two POs are different, which can provide extra information for medical decision-making. Here, the learned distributions of POs can help medical practitioners in choosing a treatment plan that promises not only a large benefit for the patients but also that the benefit is highly probable.

## 7 Discussion

**Conclusion.** Our method is carefully designed for predicting POs in medical practice. To this end, our method not only predicts point estimates but also computes _the distributions of POs to allow for uncertainty quantification and thus for reliable decision-making_.

**Limitations.** (1) As with other methods in causal inference, ours rests on mathematical assumptions, yet these are standard in the literature [12; 31; 64]. (2) The efficiency of the sampling process in our DiffPO - but also diffusion models more generally - could be improved further. There is already ongoing research, such as different solvers [15; 40; 65] and one-step sampling . However, as we have shown above, our method can successfully scale to real-world datasets from medical practice.

**Broader impact.** We expect our method to have a significant impact in medicine where better decision support is needed to personalize treatment decisions to patient profiles . Another strength of our method is that it is flexible. This is unlike many other methods in causal inference which are designed for highly restrictive settings. Hence, we expect our method to be a first step toward developing more generalizable approaches for a variety of causal inference settings.

Figure 2: Empirical distributions of the conditional POs. Left: \(p(Y(0) x)\). Right: \(p(Y(1) x)\).

[MISSING_PAGE_FAIL:11]

*  Tobias Hatt and Stefan Feuerriegel. "Estimating average treatment effects via orthogonal regularization". In: _Proceedings of the 30th ACM International Conference on Information & Knowledge Management_. 2021.
*  James J. Heckman, Jeffrey Smith, and Nancy Clements. "Making the most out of programme evaluations and social experiments: Accounting for heterogeneity in programme impacts". In: _The Review of Economic Studies_ 64.4 (1997), pp. 487-535.
*  Konstantin Hess et al. "Bayesian neural controlled differential equations for treatment effect estimation". In: _International Conference on Learning Representations_. 2023.
*  Jennifer L. Hill. "Bayesian nonparametric modeling for causal inference". In: _Journal of Computational and Graphical Statistics_ 20.1 (2011), pp. 217-240.
*  Jonathan Ho, Ajay Jain, and Pieter Abbeel. "Denoising Diffusion Probabilistic Models". In: _Advances in Neural Information Processing Systems_. 2020.
*  Paul W Holland. "Statistics and causal inference". In: _Journal of the American statistical Association_ (1986).
*  Fredrik D. Johansson, Uri Shalit, and David Sontag. "Learning representations for counterfactual inference". In: _International Conference on Machine Learning_. 2016.
*  Fredrik D. Johansson et al. "Generalization bounds and representation learning for estimation of potential outcomes and causal effects". In: _Journal of Machine Learning Research_ 23 (2022), pp. 7489-7538.
*  Fredrik D. Johansson et al. "Learning weighted representations for generalization across designs". In: _arXiv preprint_ (2018).
*  Edward H. Kennedy. "Towards optimal doubly robust estimation of heterogeneous causal effects". In: _Electronic Journal of Statistics_ 17.2 (2023), pp. 3008-3049.
*  Edward H. Kennedy et al. "Minimax rates for heterogeneous causal effect estimation". In: _arXiv preprint_ (2022).
*  Ilyes Khemakhem et al. "Causal autoregressive flows". In: _International Conference on Artificial Intelligence and Statistics_. 2021.
*  Diederik P Kingma and Max Welling. "Auto-encoding variational Bayes". In: _arXiv preprint_. 2013.
*  Thomas Kneib, Alexander Silbersdorff, and Benjamin Safken. "Rage against the mean-a review of distributional regression approaches". In: _Econometrics and Statistics_ 26 (2023), pp. 99-123.
*  Aneesh Komanduri et al. "Causal Diffusion Autoencoders: Toward counterfactual generation via diffusion probabilistic models". In: _arXiv preprint_. 2024.
*  Soren R. Kunzel et al. "Metalearners for estimating heterogeneous treatment effects using machine learning". In: _Proceedings of the National Academy of Sciences_ 116.10 (2019), pp. 4156-4165.
*  Milan Kuzmanovic et al. "Causal machine learning for cost-effective allocation of development aid". In: _Proceedings of the 30th ACM SIGKDD Conference on Knowledge Discovery and Data Mining_. 2024.
*  Mark J. van der Laan. "Statistical inference for variable importance". In: _The International Journal of Biostatistics_ 2.1 (2006).
*  Cheng Lu et al. "DPM-Solver: A fast ODE solver for diffusion probabilistic model sampling in around 10 steps". In: _Advances in Neural Information Processing Systems_. 2022.
*  M.F. MacDorman and J.O. Atkinson. "Infant mortality statistics from the linked birth/infant death data set-1995 period data". In: _Monthly Vital Statistics Report_ 46.6 Suppl 2 (1998), pp. 1-22.
*  Divyat Mahajan et al. "Empirical Analysis of Model Selection for Heterogeneous Causal Effect Estimation". In: _arXiv preprint_ (2022).
*  Valentyn Melnychuk, Dennis Frauen, and Stefan Feuerriegel. "Bounds on representation-induced confounding bias for treatment effect estimation". In: _International Conference on Learning Representations_. 2024.
*  Pawel Morzywolek, Johan Decruyenaere, and Stijn Vansteelandt. "On a general class of orthogonal learners for the estimation of heterogeneous treatment effects". In: _arXiv preprint_. 2023.

*  Xinkun Nie and Stefan Wager. "Quasi-oracle estimation of heterogeneous treatment effects". In: _Biometrika_ 108 (2021), pp. 299-319.
*  Kenneth R. Niswander. "The collaborative perinatal study of the National Institute of Neurological Diseases and Stroke". In: _The Woman and Their Pregnancies_ (1972).
*  Kazusato Oko, Shunta Akiyama, and Taiji Suzuki. "Diffusion models are minimax optimal distribution estimators". In: _International Conference on Machine Learning_. 2023.
*  Lucia C Petito et al. "Estimates of overall survival in patients with cancer receiving different treatment regimens: emulating hypothetical target trials in the Surveillance, Epidemiology, and End Results (SEER)-Medicare Linked Database". In: _JAMA Network Open_ (2020).
*  Olaf Ronneberger, Philipp Fischer, and Thomas Brox. "U-net: Convolutional networks for biomedical image segmentation". In: _Medical image computing and computer-assisted intervention_. 2015.
*  Donald B Rubin. "Causal inference using potential outcomes: Design, modeling, decisions". In: 100.469 (2005), pp. 322-331.
*  Pedro Sanchez and Sotirios A Tsaftaris. "Diffusion causal models for counterfactual estimation". In: _Causal Learning and Reasoning_. 2022.
*  Pedro Sanchez et al. "Diffusion models for causal discovery via topological ordering". In: _International Conference on Learning Representations_. 2023.
*  Pablo Sanchez-Martin, Miriam Rateike, and Isabel Valera. "Vaca: Design of variational graph autoencoders for interventional and counterfactual queries". In: _arXiv preprint_. 2021.
*  Uri Shalit, Fredrik D. Johansson, and David Sontag. "Estimating individual treatment effect: Generalization bounds and algorithms". In: _International Conference on Machine Learning_. 2017.
*  Jascha Sohl-Dickstein et al. "Deep unsupervised learning using nonequilibrium thermodynamics". In: _International Conference on Machine Learning_. 2015.
*  Jiaming Song, Chenlin Meng, and Stefano Ermon. "Denoising diffusion implicit models". In: _arXiv preprint_ (2020).
*  Yang Song and Stefano Ermon. "Generative modeling by estimating gradients of the data distribution". In: _Advances in Neural Information Processing Systems_. 2019.
*  Yang Song et al. "Consistency models". In: _arXiv preprint_ (2023).
*  Yusuke Tashiro et al. "CSDI: Conditional score-based diffusion models for probabilistic time series imputation". In: _Advances in Neural Information Processing Systems_. 2021.
*  Stijn Vansteelandt and Pawel Morzywolek. "Orthogonal prediction of counterfactual outcomes". In: _arXiv preprint_. 2023.
*  Stefan Wager and Susan Athey. "Estimation and inference of heterogeneous treatment effects using random forests". In: _Journal of the American Statistical Association_ 113.523 (2018), pp. 1228-1242.
*  Anpeng Wu et al. "Learning decomposed representations for treatment effect estimation". In: _IEEE Transactions on Knowledge and Data Engineering_ 35.5 (2022), pp. 4989-5001.
*  Andrew Ying. "A geometric perspective on double robustness by semiparametric theory and information geometry". In: _arXiv preprint_ (2024).
*  Jinsung Yoon, James Jordon, and Mihaela van der Schaar. "GANITE: Estimation of individualized treatment effects using generative adversarial nets". In: _International Conference on Learning Representations_. 2018.
*  Qinsheng Zhang and Yongxin Chen. "Fast sampling of diffusion models with exponential integrator". In: _arXiv preprint_ (2022).
*  Weijia Zhang, Lin Liu, and Jiuyong Li. "Treatment effect estimation with disentangled latent factors". In: _AAAI_. 2021.
*  Yao Zhang, Alexis Bellot, and Mihaela van der Schaar. "Learning overlapping representations for the estimation of individualized treatment effects". In: _International Conference on Artificial Intelligence and Statistics_. 2020.

Extended related work

### Diffusion models for causal inference

Diffusion models were originally introduced for learning a complex distribution for a given dataset from which we can then sample high-quality images [55; 57; 26]. Diffusion models have achieved state-of-the-art performance, outperforming other generative models on various tasks in the computer vision field (e.g.,[56; 14; 59]). Motivated by this, diffusion models were previously used for different causal inference tasks but in a different setting from ours [51; 52; 8].

 proposed a model called Diff-SCM that uses diffusion models and anti-causal predictors to generate the counterfactual of a given image. It leverages a classifier guidance diffusion model.  proposed using a diffusion model called DCM for modeling structural causal models (SCMs). It focuses on approximating SCMs given observational data and underlying causal DAG.  focused on a similar task as well as [53; 36], with the aim to answer causal queries by employing variational autoencoder and normalizing flow, respectively.  focused on the same task as , aiming for generating high-quality counterfactual images and proposed a model called CausalDiffAE.  follows the idea of  to view the diffusion model as an encoder-decoder framework and employ so-called denoising diffusion implicit models (DDIM). Diffusion models have also been used in the causal discovery field. DiffAN  is an algorithm based on denoising diffusion training for causal discovery via topological ordering. In this work, we use diffusion models for predicting POs.

### Neyman-orthogonality

Neyman-orthogonality of a functional refers to the mean zero property of its directional derivatives along one-dimensional paths that change nuisance functions . A loss function is called Neyman-orthogonal when this property holds for all its directional derivatives along one-dimensional paths that change the (infinite-dimensional) parameter of interest. This allows for a debiased machine learning approach to construct estimators and inference procedures that are robust to small mistakes in nuisance functions . Specific orthogonal learners for estimating CATE are given in the DR-learner [39; 31], R-learner , and i-learner .

### Conditional average treatment effect (CATE)

Our work is about predicting potential outcomes (POs) for individuals; however, it is strongly related in practical applications to conditional average treatment effect (CATE) estimation. The PO framework conceptualizes the CATE estimation problem as estimating the expected difference between an individual's expected potential outcome with and without treatment. Below, we give a brief overview of the CATE literature.

The estimation of the CATE has received a lot of attention in the causal inference literature (e.g.,[10; 25; 28; 1; 54; 37; 2; 30; 3; 64; 61; 12; 66; 31; 45; 32; 13]). Among those CATE estimation methods, many have been proposed to estimate the effects of binary treatments (e.g.,[10; 25; 28; 1; 54; 37; 2; 30; 3; 64; 6; 12; 66; 31; 45; 32; 13]). Based on the categorization in , we roughly categorize them into three categories based on their most salient characteristics: (i) model-agnostic learning strategies for CATE estimation (also known as meta-learners), and (ii) model-specific ML-based CATE estimators (including representation learning-based and other neural network-based estimators).

#### a.3.1 Meta-learners

Now we consider popular approaches that involve using model-agnostic learning strategies, also known as meta-learners, which can be implemented using any ML method (e.g.,[37; 31; 45; 32; 13; 12]). The idea behind "meta-learner" strategies was originally introduced in  and expanded in [45; 31; 12].

Existing CATE meta-learners can be categorized into: (a) one-step (plug-in) learners (indirect meta-learners) that output two regression functions from the observational data and then compute CATE as the difference in the POs (this is the strategy underlying the S- and T-learners); and (b) two-step learners (direct meta-learners/multi-stage direct estimators). These learners first compute nuisance functions to build a pseudo-outcome. In the second step, they obtain the CATE directly by regressing the input covariates on the pseudo-outcome. (Note that _pseudo-outcomes are not potential outcomes_).

In terms of (b), existing methods fall largely into three broad classes: regression adjustment (RA), propensity weighting (PW), or doubly robust (DR) strategies.

#### a.3.2 Model-specific ML-based CATE estimators

Many methods proposed in the related work do not fall within the meta-learner class because they rely on the properties of a specific ML method. We roughly categorize them into two branches: one is neural network-based (NN-based) estimators and the other does not use neural networks, for example, some using causal Forest , Bayesian regression , or Gaussian processes .

As for the NN-based estimators, some are representation learning-based estimators. Much work of this track focused on handling selection bias by learning shared and balanced feature representations for the two PO functions or incorporating weighting strategies. Examples are BNN , TARNet , and CFR .  used representation learning to share information about the outcome across treated and controls, while regularizing representation distributional distance between the groups. [67; 30] recognized that such regularization may result in a violation of ignorability in the representation and proposed to learn representations in which context information is preserved but where treatment groups overlap. Later, many works proposed further extensions (e.g.,[29; 20; 4; 21; 62; 67; 5; 7]). However, a wrongly chosen dimensionality of the representation or a too large balancing weight can induce confounding bias , and, therefore, the representation learning-based methods fall outside the scope of this paper.

Evidence lower bound of DiffPO

Directly computing and maximizing the likelihood \(p(y x,a)\) is difficult because it involves integrating all latent variables, which is intractable for complex models. Thus, we derive the evidence lower bound (ELBO) similar to the bound of the variational autoencoder. Our original objective can be optimized by maximizing the ELBO, like its analog in the ELBO of a vanilla VAE , which is given by

\[ p(y x,a) = p(y_{0:T} x,a)dy_{1:T}\] (14) \[= x,a)q(y_{1:T} y_ {0})}{q(y_{1:T} y_{0})}dy_{1:T}\] \[=_{q(y_{1:T} y_{0})}[  x,a)}{q(y_{1:T} y_{0})}]\] \[_{q(y_{1:T} y_{0})}[ x,a)}{q(y_{1:T} y_{0})}].\]

The ELBO in Eq. (14) can be rewritten as follows:\[ p(y) _{q(y_{1:T}|y_{0})}[ x,a )}{q(y_{1:T} y_{0})}]\] \[= _{q(y_{1:T}|y_{0})}[) _{t=1}^{T}p_{}(y_{t-1} y_{t},x,a)}{_{t=1}^{T}q (y_{t} y_{t-1})}]\] \[= _{q(y_{1:T}|y_{0})}[) p_{}(y_{0} y_{1},x,a)_{t=2}^{T}p_{}(y_{t-1}  y_{t},x,a)}{q(y_{1} y_{0})_{t=2}^{T}q(y_{ t} y_{t-1})}]\] \[= _{q(y_{1:T}|y_{0})}[) p_{}(y_{0} y_{1},x,a)_{t=2}^{T}p_{}(y_{t-1}  y_{t},x,a)}{q(y_{1} y_{0})_{t=2}^{T}q(y_{ t} y_{t-1},y_{0})}]\] \[= _{q(y_{1:T}|y_{0})}[) p_{}(y_{0} y_{1},x,a)}{q(y_{1} y_{0})}+ _{t=2}^{T}(y_{t-1} y_{t},x,a)}{q(y_{t}  y_{t-1},y_{0})}]\] \[= _{q(y_{1:T}|y_{0})}[) p_{}(y_{0} y_{1},x,a)}{q(y_{1} y_{0})}+ _{t=2}^{T}(y_{t-1} y_{t},x,a)}{q(y_{t- 1} y_{t},y_{0})}]\] \[= _{q(y_{1:T}|y_{0})}[) p_{}(y_{0} y_{1},x,a)}{q(y_{1} y_{0})}+  y_{0})}{q(y_{T} y_{0})}+_ {t=2}^{T}(y_{t-1} y_{t},x,a)}{q(y_{t-1}  y_{t},y_{0})}]\] \[= _{q(y_{1:T}|y_{0})}[) p_{}(y_{0} y_{1},x,a)}{q(y_{T} y_{0})}+_{t=2}^{T} (y_{t-1} y_{t},x,a)}{q(y_{t-1} y_{ t},y_{0})}]\] \[= _{q(y_{1:T}|y_{0})}[ p_{}(y_{0} y _{1},x,a)]+\] \[= _{q(y_{1:T}|y_{0})}[ p_{}(y_{0} y _{1},x,a)]+\] \[= _{q(y_{1:T}|y_{0})}[ p_{} (y_{0} y_{1},x,a)]}_{}- }(q(y_{T} y_{0})\|p(y_{T} ))}_{}\] \[-_{t=2}^{T}_{q(y_{1}|y_{0})}[D_{ }(q(y_{t-1} y_{t},y_{0})\|p_{}(y_ {t-1} y_{t},x,a))]}_{}.\] (15)Simplified training objective for DiffPO

With the reverse process defined above, the learning objective in Eq. (7) is clearly differentiable with respect to \(\) and is ready to be employed for training. However, in practice, directly optimizing this objective is inefficient. Recall that our aim is to match the approximate denoising transition step \(p_{}(y_{t-1} y_{t},x,a)\) to ground truth denoising transition step \(q(y_{t-1} y_{t},y_{0})\) as closely as possible, which we can also model as a Gaussian. Thus, optimizing the \(\) divergence term reduces to minimizing the difference between the means of the two distributions:

\[&*{arg\,min}_{}\,D_{} (q(y_{t-1} y_{t},y_{0})\, p_{}(y_{t-1}  y_{t},x,a))\\ =&*{arg\,min}_{}\,D_{} ((y_{t-1};_{q},_{q}(t))\, (y_{t-1};_{},_{q}(t)))\\ =&*{arg\,min}_{}[ (t)|}{|_{q}(t)|}-d+ {tr}(_{q}(t)^{-1}_{q}(t))+(_{}-_{q} )^{T}_{q}(t)^{-1}(_{}-_{q})]\\ =&*{arg\,min}_{}[  1-d+d+(_{}-_{q})^{T}_{q}(t)^{-1}(_{ }-_{q})]\\ =&*{arg\,min}_{}[ (_{}-_{q})^{T}_{q}(t)^{-1}(_{}-_ {q})]\\ =&*{arg\,min}_{}[ (_{}-_{q})^{T}(_{q}^{2}(t)) ^{-1}(_{}-_{q})]\\ =&*{arg\,min}_{}^{2}(t)}[\|_{}-_{q}\|_{2}^{2}].\] (16)

By using the reparameterization trick, we have

\[y_{0}=-_{t}}_{0}}{_{ t}}}.\] (17)

Plugging it into the previously derived true denoising transition mean \(_{q}(y_{t},y_{0})\), we yield

\[_{q}(y_{t},y_{0})&= }(1-_{t-1})y_{t}+_{t-1}}(1-_{t})y_{0}}{1-_{t}}\\ &=}(1-_{t-1})y_{t}+ _{t-1}}(1-_{t})-_{t}}_{0}}{_{t}}}}{1-_{t}}\\ &=}(1-_{t-1})y_{t}+ (1-_{t})-_{t}}_{0}}{ _{t}}}}{1-_{t}}\\ &=}(1-_{t-1})y_{t} +(1-_{t})-_{t}}_{0}}{ 1-_{t}}}{1-_{t}}\\ &=}(1-_{t-1})y_{t}}{ 1-_{t}}+)y_{t}}{(1-_{t})}}-)_{t}}_{0}}{(1-_{t})}} \\ &=(}(1-_{t-1})}{ 1-_{t}}+}{(1-_{t})}})y_{t}-}{_{t}}}}_{0}\\ &=-_{t}+1-_{t}}{(1-_{t})}}y_{t}-}{_{t}}}}_{0}\\ &=_{t}}{(1-_{t}) }}y_{t}-}{_{t}}}}_{0}\\ &=}}y_{t}-}{_{t}}}}_{0}.\] (18)

Therefore, we can set our approximate denoising transition mean \(_{}(y_{t},t x,a)\) as

\[_{}(y_{t},t x,a)=}}y_{t}- }{_{t}}}}f_{}(y _{t},t x,a),\] (19)and the corresponding optimization problem becomes

\[\ D_{}(q(y_{t-1}\ |\ y_{t},y_{0})\ \|\ p_{}(y_{t-1}\ |\ y_{t},x,a))\] \[= \ D_{}( (y_{t-1};_{q},_{q}(t))\ \|\ (y_{t-1};_{},_{q}(t)))\] \[= ^{2}(t)}[ \|}}y_{t}-}{_{ t}}}}f_{}(y_{t},t\ |\ x,a)-}}y_{t}+}{_{t}}}}\|_{2}^{2}]\] \[= ^{2}(t)}[ \|}{_{t}}}} -}{_{t}}}}f_{} (y_{t},t\ |\ x,a)\|_{2}^{2}]\] (20) \[= ^{2}(t)}[ \|}{_{t}}}}( -f_{}(y_{t},t\ |\ x,a))\|_{2}^{2}]\] \[= ^{2}(t)})^{2}}{(1-_{t})\,_{t}}[\|-f_{} (y_{t},t\ |\ x,a)\|_{2}^{2}].\]Proofs

**Theorem 2** (Neyman-orthogonality).: _The orthogonal diffusion loss_

\[(,)= _{(y_{0},,a) p(Y,X,A); (,)}w_{}(x,a)\|- f_{}(_{t}}y_{0}+_{t}},t  x,a)\|^{2},\] (21)

_is Neyman-orthogonal wrt. its nuisance functions._

Proof.: As it was shown in the Sec. 5.1, the minimization of the orthogonal diffusion loss is equivalent to the maximization of the following weighted ELBO wrt. to \(\):

\[(p_{},)=_{(y_{0},x,a ) p(Y,X,A)}[w_{}(x,a)\,_{y_{1:T} q(Y_{1: T}|y_{0})}[(y_{0:T} x,a)}{q(y_{1:T}  y_{0})}]].\] (22)

We denote a maximizer of the weighted ELBO with the ground truth nuisance functions by \(p_{^{*}}=*{argmax}_{p_{}}(p_{},)\). Given a flexible enough diffusion model, \(p_{^{*}}(y_{0} x,a)\) coincides with the ground truth posterior and, thus matches the ground truth conditional distribution, namely, \(p(Y X,A)\).

To demonstrate Neyman-orthogonality, we need to show that a pathwise cross-derivative is equal to zero , i.e.,

\[D_{}D_{p_{^{*}}},(p_{^{*}},)[p_{ }-p_{^{*}},-]=0$ and $$}.\] (23)

We start by taking the pathwise derivative wrt. the optimal diffusion model \(p_{^{*}}\):

\[D_{p_{^{*}}},(p_{^{*}},)[p_{}-p _{^{*}}]\] (24) \[= }{t}_{(y_{0},x,a ) p(Y,X,A)}[w_{}(x,a)\,_{y_{1:T} q(Y_{1:T}|y_{ 0})}[}(y_{0:T} x,a)+tp_{ }(y_{0:T} x,a)-p_{^{*}}(y_{0:T} x,a) }{q(y_{1:T} y_{0})}]]_{t=0}\] (25) \[= _{(y_{0},x,a) p(Y,X,A)}[w_{}(x, a)\,_{y_{1:T} q(Y_{1:T}|y_{0})}[(y_{0:T}  x,a)-p_{^{*}}(y_{0:T} x,a)}{p_{^{*}} (y_{0:T} x,a)+tp_{}(y_{0:T} x,a)-p _{^{*}}(y_{0:T} x,a)}]]_{t=0}\] (26) \[= _{(y_{0},x,a) p(Y,X,A)}[w_{}(x, a)\,_{y_{1:T} q(Y_{1:T}|y_{0})}[(y_{0:T}  x,a)-p_{^{*}}(y_{0:T} x,a)}{p_{^{*}} (y_{0:T} x,a)}]].\] (27)Then, we take a derivative wrt. the propensity score \(\):

\[D_{}D_{p_{^{*}}}(p_{^{*}},)[p_{}-p_{ ^{*}},-]\] (28) \[= }{t}_{(y_{0},x,a) p(Y,X,A )}[w_{+t(-)}(x,a)\,_{y_{1:T} q(Y_{1:T}|y_{0}) }[(y_{0:T} x,a)-p_{^{*}}(y_{0:T } x,a)}{p_{^{*}}(y_{0:T} x,a)}]] _{t=0}\] (29) \[= _{(y_{0},x,a) p(Y,X,A)}[(-}+})_{y_{1:T} q(Y_{1:T}|y_{ 0})}[(y_{0:T} x,a)-p_{^{*}}(y_{ 0:T} x,a)}{p_{^{*}}(y_{0:T} x,a)}]]\] (30) \[= _{x p(X)}- }\,_{y_{0} p(Y|x,1)}_{y_{1:T} q(Y_{1:T}|y_{0})} [(y_{0:T} x,1)-p_{^{*}}(y_{0:T } x,1)}{p_{^{*}}(y_{0:T} x,1)}]\] (31) \[+}\,_{y_{ 0} p(Y|x,0)}_{y_{1:T} q(Y_{1:T}|y_{0})}[ (y_{0:T} x,0)-p_{^{*}}(y_{0:T} x,0)}{p_{ ^{*}}(y_{0:T} x,0)}]\] (32) \[= _{x p(X)}-(y_{0:T} x,1)-p_{^{*}}(y_{0:T} x,1) }{p_{^{*}}(y_{0:T} x,1)}\,p(y_{0} x,1)\,q(y_{1:T} y _{0})\,y_{0}\,y_{1:T}\] (33) \[+(y_{0:T}  x,0)-p_{^{*}}(y_{0:T} x,0)}{p_{^{*}} (y_{0:T} x,0)}\,p(y_{0} x,0)\,q(y_{1:T} y_{0})\,y_{0}\,y_{1:T}\] (34) \[ _{x p(X)}-(y_{0:T} x,1)-p_{^{*}}(y_{0:T} x,1) }{p_{^{*}}(y_{1:T} y_{0},x,1)}\,q(y_{1:T} y_{0})\, y_{0}\,y_{1:T}\] (35) \[+(y_{0:T}  x,0)-p_{^{*}}(y_{0:T} x,0)}{p_{^{*}} (y_{1:T} y_{0},x,0)}\,q(y_{1:T} y_{0})\,y_{0}\, y_{1:T}\] (36) \[ _{x p(X)}-(p_{ }(y_{0:T} x,1)-p_{^{*}}(y_{0:T} x,1) )y_{0}\,y_{1:T}\] (37) \[+(p_{}(y_{0:T}  x,0)-p_{^{*}}(y_{0:T} x,0))y_{0 }\,y_{1:T}\] (38) \[= _{x p(X)}-(1-1)+(1-1)=0,\] (39)

where the equality \((*)\) holds due \(p(y_{0} x,a)=p_{^{*}}(y_{0} x,a)\); and the equality \((**)\) holds due to that the forward process is independent of \(x\) and \(a\), namely, \(p_{^{*}}(y_{1:T} y_{0},x,a)=p_{^{*}}(y_{1:T} y_{0})=q(y_{1:T}  y_{0})\).

Implementation details

In the following, we summarize the implementation details of our DiffPO and baselines.

### Implementation details of DiffPO

We implemented our DiffPO in PyTorch. (Code is available at https://github.com/yccm/DiffPO). Experiments were carried out on 1x NVIDIA A100-PCIE-40GB. We report the default settings of our model below but note that hyperparameters may require slight adjustments depending on the dataset.

Our model architecture of the denoising function \(f_{}\) is based on the architecture of , and we use U-Net  as the basic backbone. We use \(4\) diffusion residual blocks, where each is built with MLP layers. The diffusion embedding dimension is \(128\). The \(\) starts at \(0.0001\) and ends at \(0.5\), and the schedule is the "quadratic" version. The number of diffusion sampling steps is set to \(100\). The training batch size is set to \(256\) with a learning rate of \(0.0005\). The training epoch is set to \(500\).

During training, we can only observe one of the two POs due to the fundamental problem of causal inference  (as explained in Sec. 4). To guide the model, we need to identify which of two POs should be generated. Hence, we introduce causal masks as input to our model: an observational mask \(}\), a targeted mask \(}\), and a conditional mask \(}\). For the observational mask \(}\), it is \(1\) at the place where we have the observational data and \(0\) for the opposite case. Since we condition on \(x\) and \(a\), the conditional mask \(}\) is \(1\) for the element \(x\) and \(a\), and \(0\) otherwise. For the target mask, the observed outcomes \(y\) in the original dataset are \(1\), while all the other elements are \(0\). In this way, we can compute the loss only at the place where the value of the targeted mask is \(1\), i.e., where we have the ground truth outcomes. We follow  in the way how we learn propensity scores and use fully connected neural networks with softmax activation. Thus we add weight to each sample via a learned function when computing the orthogonal loss.

### Implementation details of baselines

We follow the implementation from https://github.com/AliciaCurth/CATENets/tree/main for most of the CATE estimators, including S-learner , T-learner , DR-learner [39; 31], RA-learner , TARNet . For GANITE, we follow the implementation of https://github.com/vanderschaarlab/mlforhealthlabpub/tree/main/alg/ganite. For TEDVAE, we follow the implementation of https://github.com/WeijiaZhang24/TEDVAE.

We performed hyperparameters tuning of the nuisance functions models for all the baselines based on five-fold cross-validation using the training subset. For each baseline, we performed a grid search with respect to different tuning criteria, evaluated on the validation subsets. We aimed for a fair comparison and thus kept the number of parameters, network structures, and grid size similar across models. For evaluating the uncertainty estimation, for both training and testing, the dropout probabilities were set to \(p=0.1\).

Dataset details

### Synthetic dataset

We use one of the datasets from ACIC2018 with 177 covariates to generate the synthetic dataset with a coefficient matrix \(W\), i.e.,

\[\{X(),\\ A(X),\\ Y:=U_{Y}+(WX)+AX+A; U_{Y} N(0,1).\] (40)

We use a ten-fold split for train/test samples \((80\%/20\%)\).

### ACIC 2016 & 2018 datasets

The 2016 Atlantic Causal Inference Challenge (ACIC2016)  contains 77 different settings of benchmark datasets, and ACIC2018  contains 24, respectively. They are designed to benchmark causal inference algorithms with various data-generating mechanisms. Covariates of ACIC 2016 are taken from a large study of developmental disorders, and covariates of ACIC 2018 are derived from the linked birth and infant death data. ACIC 2016 and ACIC 2018 differ in the number of true confounders, the varying levels of overlap, and the form of conditional outcome distributions. ACIC 2016 has 77 different data-generating mechanisms with 100 equal-sized samples for each mechanism (\(n=4802\), \(d_{X}=82\)). ACIC 2018 provides 63 distinct data-generating mechanisms with around 40 non-equal-sized samples for each mechanism (\(n\) ranges from \(1,000\) to \(50,000\), \(d_{X}=177\)). Notably, ACIC 2018 has a constant CATE for most of the datasets, but heterogeneous propensity scores.

### IHDP dataset

The Infant Health and Development Program (IHDP)  has features and treatment assignments from a real-world clinical trial. The dataset comprised 747 subjects, with 25 features for each subject. Out of the 25 features, 6 are continuous, and 19 are binary with a binary treatment. For both treated and untreated, synthetic outcomes of IHDP are sampled from different conditional normal distributions. These distributions are homoscedastic (\(^{2}=1\)) but have substantially different conditional means. The potential outcomes are simulated according to the standard non-linear "Response Surface B" setting in  with the following data-generating mechanism:

\[X(),\\ A(X),\\ Y NA(X-)+(1-A)(((X+W))), 1,\] (41)

where \(\), \(W\), \(\) are constant parameters of the simulation. For further details, we refer to .

Additional experiments

### Simulation experiments

We examine the Neyman-orthogonality property of our orthogonal diffusion loss through simulation experiments. We conduct experiments to show that the orthogonal diffusion loss can address the problem of model misspecifications when estimating nuisance functions (e.g., the propensity score \((x)\)).

To this end, we perturb the propensity score manually to assess the robustness of the loss when the nuisance functions are estimated with varying errors. During training, we consistently increase the sample size and evaluate the CATE estimation error on the synthetic dataset. As shown in Fig. 3, the CATE estimation error decreases as the sample size grows and eventually converges to zero. This demonstrates that, even when the propensity score is misspecified, the orthogonal loss remains robust, enabling our DiffPO to converge to the correct objective. This experiment supports Theorem 1 by illustrating how the stability and consistency of the orthogonal loss contribute to convergence. In sum, it shows the theoretical benefits of our proposed orthogonal diffusion loss.

Figure 3: We manually perturb the propensity score during training on the synthetic data. We replace the estimated propensity score \((x)\) with a randomly sampled value \((x)\) from the interval \((0,1)\). The weight \(w_{}(x,a)\) for each sample in the orthogonal diffusion loss \((,)\) is thus replaced by weight \(w_{}(x,a)\). The CATE estimation error gradually converges as the sample size increases. This aligns with our expectation, as the loss remains robust even with varying errors in the estimation of nuisance functions.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The main claims made in the abstract and introduction accurately reflect the paper's contributions and scope. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: We discuss the limitations of the work in Sec.7. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes]Justification: We provide the full set of assumptions in Sec. 4 and proof in the Appendix. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: We fully disclose all the information needed to reproduce the main experimental results in the Appendix. E. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material?Answer: [Yes] Justification: We provide open access to the data and code and provide an anonymous link to our code: https://anonymous.4open.science/r/DIFFPO Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: We specify all the training and test details in the Sec. 6 and in the Appendix E. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: we report standard deviation in our experiment results. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors).

* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: Our experiments do not require any specific hardware/resources. We admit the runtime of our method is longer compared to baselines. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: Our research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [Yes] Justification: We discuss the broader impacts of our method in Sec.7. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.

* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: Our work does not pose such risks. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licensees for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: All the datasets used in our paper are cited accordingly. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided. * If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset. * For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.

* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: We do not provide any assets in our work. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: Our work does not involve crowdsourcing or research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: Our work does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.