# Expanding Sparse Tuning for Low Memory Usage

Shufan Shen\({}^{1,2}\)  Junshu Sun\({}^{1,2}\)  Xiangyang Ji\({}^{3}\) Qingming Huang\({}^{1,2,4}\)  Shuhui Wang\({}^{1,4}\)

\({}^{1}\)Key Lab of Intell. Info. Process., Inst. of Comput. Tech., CAS

\({}^{2}\)University of Chinese Academy of Sciences \({}^{3}\)Tsinghua University \({}^{4}\)Peng Cheng Laboratory

{shenshufan22z, sunjunshu21s, wangshuhui}@ict.ac.cn  xyji@tsinghua.edu.cn

qmhuang@ucas.ac.cn

Corresponding author.

###### Abstract

Parameter-efficient fine-tuning (PEFT) is an effective method for adapting pre-trained vision models to downstream tasks by tuning a small subset of parameters. Among PEFT methods, sparse tuning achieves superior performance by only adjusting the weights most relevant to downstream tasks, rather than densely tuning the whole weight matrix. However, this performance improvement has been accompanied by increases in memory usage, which stems from two factors, _i.e._, the storage of the whole weight matrix as learnable parameters in the optimizer and the additional storage of tunable weight indexes. In this paper, we propose a method named SNELL (**S**parse tuning with \(\)ized \(\)) for sparse tuning with low memory usage. To achieve low memory usage, SNELL decomposes the tunable matrix for sparsification into two learnable low-rank matrices, saving from the costly storage of the whole original matrix. A competition-based sparsification mechanism is further proposed to avoid the storage of tunable weight indexes. To maintain the effectiveness of sparse tuning with low-rank matrices, we extend the low-rank decomposition by applying nonlinear kernel functions to the whole-matrix merging. Consequently, we gain an increase in the rank of the merged matrix, enhancing the ability of SNELL in adapting the pre-trained models to downstream tasks. Extensive experiments on multiple downstream tasks show that SNELL achieves state-of-the-art performance with low memory usage, endowing PEFT with sparse tuning to large-scale models. Codes are available at https://github.com/ssfgunner/SNELL.

## 1 Introduction

Fine-tuning has become a predominant way for adapting large pre-trained models to downstream tasks with limited training samples [13; 9; 24; 23]. Nevertheless, fine-tuning all model parameters requires substantial memory usage and is susceptible to over-fitting, making it costly and infeasible for large-scale models [58; 2; 11]. To address these limitations, parameter-efficient fine-tuning (PEFT) [64; 27; 62; 30; 8; 22] has been proposed to tune a small subset of parameters while keeping other parameters frozen. PEFT methods can be categorized into addition-based and reparameterization-based methods. The former attaches additional parameters to a frozen pre-trained backbone, while the latter adjusts the original parameters in the pre-trained backbone.

Addition-based methods [53; 62; 30] have achieved remarkable performance on vision tasks. However, adopting additional parameters incurs extra computational costs during the inference process. In contrast, reparameterization-based methods [5; 7; 27] directly fine-tune the original parameters. These methods select specific parameters, involving reduced memory usage compared to full-parameter fine-tuning. Based on the granularity of parameter selection, one primary approach focuses onspecific parameter matrices. For example, Bittit  only adjusts bias to reduce the volume of tunable parameters while Partial-\(k\) fine-tunes the last few layers to avoid back-propagation through the entire pre-trained backbone. To further reduce memory usage, LoRA  optimizes each selected weight matrix using two low-rank matrices to achieve memory-efficient fine-tuning. Although sufficient in reducing memory usage, these methods usually gain inferior performance compared to addition-based methods . Recently, SPT  and GPS  found that combining existing PEFT methods with sparse tuning, which only adjusts the most task-related weights in a matrix, can achieve state-of-the-art performance on vision tasks. Concurrently, the effectiveness of sparse tuning has also been observed in NLP tasks . By focusing on individual weights in a matrix, sparse tuning allows for more precise adjustments, thus achieving good performance and mitigated over-fitting risks .

However, the performance gained from sparse tuning has been accompanied by high memory usage, as Figure 1(a) shows. Although sparse tuning only updates part of weights in the pre-trained weight matrix, the whole matrix still needs to be stored as learnable parameters in the optimizer and computed for their corresponding gradients in practice. Additionally, sparse tuning necessitates storing the tunable weight indexes, further aggravating the memory demands. The above observation indicates that sparse tuning gains no advantage over full fine-tuning regarding memory usage, especially given the increasing parameter volumes in pre-trained models [58; 2]. A sparse tuning method with low memory usage is urgently required for applications on large-scale pre-trained models.

In this paper, we propose a method that conducts **S**parse tuning with ker**NEL**ized **LoRA** (SNELL) shown in Figure 1(b). SNELL can adapt pre-trained models to downstream tasks with both low memory usage and strong performance. To reduce memory usage, we decompose the tunable matrix for sparsification into low-rank learnable matrices to store fewer parameters in the optimizer and develop a competition-based method to avoid storing the tunable weight indexes. To improve the performance on downstream tasks, we extend LoRA from a kernel perspective and merge low-rank matrices with nonlinear kernel functions to obtain matrices with higher ranks.

Specifically, SNELL updates the pre-trained weight matrix using a sparse low-rank adaptation matrix. This adaptation matrix is first merged with two low-rank learnable matrices and then sparsified toward effective fine-tuning. Compared to storing the whole adaptation matrix, storing low-rank matrices in the optimizer results in lower memory usage. For the sparsification process, we propose a competition-based method inspired by the neuron competition phenomenon in neuroscience , avoiding the storage of the tunable weight indexes that incur additional memory usage. The proposed method promotes competition among weights based on their absolute values. Most task-relevant weights are encouraged to have larger absolute values and survive during the fine-tuning process. By setting a sparsity ratio as the hyperparameter and determining tunable weights based on their absolute values in an end-to-end manner, we can eliminate the storage of the tunable weight indexes.

In addition to low memory usage, the performance is also critical for model fine-tuning. However, directly merging two low-rank matrices through the inner product leads to the low-rank structure of the adaptation matrix, which narrows the optimization scope of tunable matrices and further limits the expressiveness of sparse tuning. To overcome this bottleneck, we draw inspiration from DyN 

Figure 1: (a) The high memory usage of sparse tuning arises from taking the whole weight matrix as learnable parameters, in addition to the storage of the tunable weight indexes (typically represented as a binary mask). (b) Our framework (SNELL) only stores the learnable low-rank matrices in the optimizer. (c) Memory usage comparison on pre-trained models with different depths.

on weight matrix interpretation based on low-dimensional dynamical systems, and reformulate the merging process with nonlinear kernel functions that increase the rank of the merged adaptation matrix. This new formulation enables a more expressive sparse tuning while maintaining a compact representation with low memory.

Extensive experiments are conducted on 24 downstream visual recognition tasks with both plain and hierarchical vision Transformer backbones under supervised and self-supervised pre-training. Results show that SNELL can gain the performance improvement of sparse tuning and the low memory usage of LoRA concurrently. SNELL obtains the state-of-the-art performance on FGVC (91.8% _vs._ 90.7%) and VTAB-1k (74.6% _vs._ 74.1%) benchmark with LoRA-level memory usage. Moreover, as Figure 1(c) shows, the low memory-usage advantage of SNELL becomes increasingly apparent as the model size grows, enabling sparse tuning on larger models.

## 2 Related Work

**Parameter Sparsity.** In early work, the parameter sparsity usually serves as an optimization objective in model pruning [21; 42]. These pruning methods remove the weights from pre-trained models irrelevant to a specific task, without significantly degrading model performance. The relevance of individual weights can be estimated based on activations , redundancy , per-layer second derivatives , and energy efficiency . Except for the post-training pruning strategy, sparse networks [4; 41; 17] directly introduce parameter sparsity into the training process, removing redundant weights more precisely . Motivated by the advantage of parameter sparsity in model optimization, recent studies introduce sparsity to the fine-tuning of pre-trained models and achieve enhanced model performance on downstream tasks [1; 21; 56]. The parameter sparsity gives rise to a reduced number of trainable parameters and serves as a regularization constraint during fine-tuning . Among sparse tuning, pre-pruning methods adopt model pruning for fine-tuning. These methods sparsity the weight matrix [22; 63] or adapter  through pruning metrics [43; 17] to identify learnable parameters for the fine-tuning process. Other methods select trainable parameters during fine-tuning, including learnable mask  or diff vectors  with sparsity constraints. However, the parameter sparsification methods need to store the indexes of tunable weights, which incurs additional memory usage. For sparse tuning under low memory budget, our competition-based mechanism selects weights relevant to downstream tasks in a learnable manner without storing the tunable weight indexes.

**Parameter-efficient Fine-tuning.** Fine-tuning is the most predominant approach for adapting a pre-trained model to downstream tasks. However, for large pre-trained models, fine-tuning all parameters is costly and prone to overfit downstream datasets. To tackle these problems, parameter-efficient fine-tuning (PEFT) [8; 30; 62], which tunes only a tiny portion of parameters, becomes a desirable choice. Following the taxonomy of SPT , PEFT methods can be categorized into _addition-based_[3; 26; 46; 50; 14; 31; 37; 62] and _reparameterization-based_[5; 7; 20; 64; 27] methods.

_Addition-based_ methods attach additional trainable parameters to a frozen pre-trained backbone. Adapters [3; 26; 46; 50; 61] adopt a residual pathway and learn a bottleneck layer including two linear projections and a non-linear activation. Prompt-tuning methods [14; 31; 37; 34] add trainable parameters to the input and keep the entire pre-trained model unchanged during training. Recent work  attempts to find the optimal configurations to combine multiple addition-based methods. Despite of the popularity and effectiveness of _addition-based_ methods, the additional trainable parameters incur excess computational costs during the inference process [3; 33].

_Reparametization-based_ methods adjust the inherent parameters in the pre-trained backbone to avoid excess computational costs during inference. Early work directly selects parameters with low memory usage for fine-tuning, such as the bias terms  and the final few layers of the pre-trained model . To further reduce the memory usage of the selected matrices, LoRA  optimizes low-rank matrices that can be reparameterized into the pre-trained weight matrices to reduce memory usage. Exploring finer-grained parameter selection, some studies [20; 64] propose sparse tuning, which involves selecting and tuning individual weights sparsely within the weight matrices. Recently, SPT  combines sparse tuning and LoRA in a hybrid framework that achieves state-of-the-art performances on visual PEFT tasks. SPT has revealed that optimizing the weights most relevant to the downstream task through sparse tuning can significantly enhance the performance, which is also supported by SAM  and GPS . However, existing sparse tuning framework still faces the challenge of high memory usage brought by sparse tuning. Unlike existing methods, our SNELLinherits high performance and low memory usage concurrently by sparsifying the adaptation matrix merged with low-rank matrices through nonlinear kernels.

## 3 Methodology

We first introduce the definitions of sparse tuning [64; 20; 1], LoRA  and kernel trick  (Section 3.1). Then we propose SNELL, a sparse tuning method including kernelized LoRA that enables high-performance tuning with low-rank learnable matrices (Section 3.2) and a competition-based mechanism that sparsifies weights without additional memory usage (Section 3.3).

### Preliminaries

**Sparse Tuning**. Given a downstream training set \(=\{x^{(n)},y^{(n)}\}_{n=1}^{N}\), the objective of sparse tuning is to minimize the model's empirical risk on the downstream task, with the sparsity constraints on the volume of tunable weights in weight matrix \(^{m n}\). The sparsification is usually achieved through a binary mask \(\{0,1\}^{m n}\). The objective function can be formulated as

\[_{}_{n=1}^{N}(f(x ^{(n)};),y^{(n)})\] (1)

where \(f(;)\) is a parameterized function over the input (_e.g._, a neural network), \((,)\) is a loss function (_e.g._, cross-entropy), and \(\) denotes element-wise multiplication. The binary mask \(\) can be either a fixed hyperparameter, pre-computed with heuristics such as pre-pruning , or a learnable parameter obtained through end-to-end fine-tuning . All these methods require storing \(\) to determine the tunable weights, which results in additional memory usage. More importantly, the tunable parameters \(}\) occupy the same amount of memory as the weight matrix \(\) in practice. As a result, the memory usage of sparse tuning is even higher than that of full fine-tuning.

**LoRA**. Given a pre-trained weight matrix \(_{0}\), LoRA  optimizes two low-rank matrices \(^{m r}\), \(^{n r}\) to reduce the memory usage during fine-tuning. The low-rank matrices \(\) and \(\) can be reparameterized into the pre-trained weight \(_{0}\),

\[=_{0}+=_{0}+ ^{}\] (2)

With \(r(m,n)\), LoRA can achieve high training efficiency and low memory usage by only optimizing the smaller low-rank matrices.

**Kernel Trick**. In many machine learning tasks, mapping the vectors into higher dimensions is frequently used to achieve linear separability . However, the explicit mapping process incurs significant computational costs. To address this problem, the kernel trick is proposed to efficiently model data relationships in high-dimensional spaces, without the need to explicitly formulate the space. According to Mercer's theorem , a kernel function \(:^{r}^{r}\) can express an inner product in some space as \((,^{})=()^{}( ^{})\), if and only if \(\) is positive semi-definite (Appendix B). \(,^{}^{r}\), and \(:^{r}^{d}\) is an implicit feature map. By selecting an appropriate kernel function \(\), we can obtain the inner product of two vectors in higher-dimensional space \(^{d}\)\((d r)\) without explicitly formulating the feature map \(\).

### Kernelized LoRA

We leverage LoRA to reduce the memory usage of sparse tuning in light of its low memory usage. An intuitive solution is to sparsify the adaptation matrix \(\) composed of the two low-rank matrices. However, the low-rank property of \(\) can lead to the performance degradation of sparse tuning. For the original sparse tuning, the weight matrix \(\) is free of the rank constraint, and weights are independent of each other. Therefore, we can independently select and optimize weights most relevant to the downstream task. For sparse tuning with LoRA, the adaptation matrix \(\) with rank \(r\) is constrained in \(^{r(m+n-r)}\), a subspace of \(^{m n}\). When \(r(m,n)\), the weight optimization scope of sparse tuning contracts, hindering its performance on downstream tasks.

To achieve sparse tuning with both strong performance and low memory usage, we propose to construct a high-rank matrix using low-rank matrices. Inspired by DyN  that fits a high-rankmatrix using the distance matrix of a low-dimension dynamical system, we extend the distance function to general kernel functions and investigate LoRA in the kernel perspective. Given two vectors \(,^{}^{r}\), the kernel function \((,^{})\) can be formulated as an inner product \(()^{}(^{})\) with an implicit feature map \(:^{r}^{d}\). The merging process of LoRA can be seen as applying linear kernel function \(_{l}(,)\) on the rows of the learnable parameters \(\) and \(\),

\[_{ij}=_{l}(_{i,},_{j,})= _{l}(_{j,})_{l}(_{i,})^{}= _{j,}_{i,}^{},\] (3)

where \(_{i,},_{j,}^{r}\), \(_{l}:^{r}^{r}\) denotes the identity mapping. By replacing \(_{l}(,)\) with more complex non-linear kernel functions, we can approximate relations in higher-dimensional spaces \(^{d}\) and obtain matrices with rank larger than \(r\). The merged adaptation matrix in SNELL can be represented by

\[=((_{i,},_{j,}))_{m n }=[(_{1,})^{},...,(_{n,})^{}]^{ }[(_{1,})^{},...,(_{n,})^{}] =_{}_{}^{}.\] (4)

Note that in practice, explicit computation of \(_{}^{n d}\) and \(_{}^{m d}\) is unnecessary. \(\) can be directly derived based on \(\) and \(\) with the kernel function \(\). By extending LoRA in a kernel perspective, SNELL can build high-rank adaptation matrices based on low-rank learnable matrices, empowering strong sparse tuning with low memory usage. We utilize the piecewise linear kernel introduced in Appendix B without a specific statement.

### Competition-based Sparsification Mechanism

Existing methods store tunable weight indexes \(\{0,1\}^{m n}\) for sparsifying the update of the weight matrix \(^{m n}\). The storage of \(\) leads to additional memory usage. Inspired by the neuron competition phenomenon in neuroscience , we design a competition-based parameter sparsification mechanism to avoid this additional storage. Instead of determining the learnable weights in the optimization process based on \(\), our objective is to encourage the weights to compete based on their contributions to performance improvement. Weights with stronger contributions survive in the sparsification while the remaining low-contributed weights are zeroed out. The weight contribution is reflected in their absolute values during the end-to-end optimization. During optimization, weights contributing more to the loss reduction are encouraged to have more significant values, while weights contributing less approach zero. By retaining higher importance to significant weights and zeroing out the less impactful weights, we can achieve end-to-end tunable parameter selection by solely relying on the absolute values of weights, avoiding the storage of \(\).

Specifically, given a merged adaptation matrix \(\) and a sparsity ratio \(s\), we sparsify weights with a soft-threshold function. To induce weight competition during end-to-end fine-tuning, we propose a dynamic threshold \( w_{s}\), _i.e._, the weight having the \( smn\)-th smallest absolute value in \(\). This threshold ensures that only a fixed proportion (\(s 100\%\)) of weights remain non-zero. Therefore, the weights have to compete with each other to be selected instead of just having a larger absolute value than a fixed threshold.

\[_{ij}^{s}=_{ij}(|_{ij}|-|  w_{s}|,0),\] (5)

Figure 2: Overview of our SNELL strategy. Given two learnable low-rank matrices, we merge them using a non-linear kernel function (_left_). This merging process is equivalent to mapping the matrices to higher-rank matrices and then performing matrix multiplication. Then we sparsified this merged adaptation matrix using a competition-based sparsification mechanism (_right_). This mechanism zeros out weights with small absolute values based on the specified percentage of \(s\).

where \(^{s}=(^{s}_{ij})_{m n}\) denotes the sparse matrix with sparsity ratio \(s\). In practice, the sparsity ratio \(s\) is manually determined regarding specific downstream tasks. Given a sparsity ratio \(s\), the training objective in Equation 1 can be reformulated as

\[_{,}_{n=1}^{N}(f(x^{(n)}; _{0}+^{s}),y^{(n)}).\] (6)

This objective encourages weights that are most relevant to the downstream task to gain more significant values for survival. Adjusting the sparsity ratio \(s\) allows us to control the sparsification process precisely and identify the optimal number of tunable parameters for different tasks.

## 4 Experiments

### Experimental Setup

**Datasets and Metrics.** We evaluate our methods on 24 downstream tasks categorized into two groups following SPT . _(i) FGVC_ is a benchmark for fine-grained image classification. This benchmark includes 5 downstream tasks, which are CUB-200-2011 , NABirds , Oxford Flowers , Stanford Dogs  and Stanford Cars . We follow the validation splits in  if the official validation set is unavailable. _(ii) VTAB-1k_ is a large-scale transfer learning benchmark consisting of 19 visual classification tasks. VTAB-1k can be further divided into three groups, _i.e._, natural tasks with natural images, specialized tasks with images captured by specialized equipment, and structured tasks with images mostly generated from synthetic environments. We use top-1 accuracy averaged within each group as our main metric following .

**Pre-trained Backbones.** We conduct experiments on the plain vision Transformer backbone ViT-B/16  that is pre-trained on ImageNet  with different pre-training strategies following , including supervised pre-training and self-supervised pre-training with MAE  and MoCo v3 . We also conduct experiments on the representative hierarchical vision Transformer backbone Swin-B  and CNN backbone ConvNeXt-Base  under supervised pre-training. In addition, we fine-tune the supervised pre-trained large-scale models (ViT-L/16 , ViT-H/14 ) on VTAB-1k to demonstrate the memory-efficiency and high-performance of SNELL.

**Competitors.** We compare our methods with addition-based methods including MLP-\(k\), VPT-Shallow , VPT-Deep , Adapter-\(r\), and SPT-Adapter . For reparameterization-based methods, we compare with Linear, Partial-1, Bias , LoRA-\(r\), SSF , and SPT-LoRA . Here \(r\) represents the number of bottleneck dimensions in Adapter-\(r\) and the value of rank in LoRA-\(r\) and our proposed SNELL-\(r\). Details of the competitors are presented in Appendix A.1. We also provide additional comparisons with other approaches [63; 53] in Appendix C.1.

**Implementation Details.** Following SPT , we use the AdamW optimizer  with cosine learning rate decay. The batch size, learning rate, and weight decay are \(32\), \(1e-3\), and \(1e-4\), respectively. We also follow SPT  to implement the standard data augmentation pipeline for VTAB-1K and follow SSF  for FGVC as well. SNELL is applied on the pre-trained weight matrix of all linear layers. For each task, we fine-tune the model with different sparsity ratios \(s\) to search the optimal volume of tunable parameters for this task. Without specific stating, we adopt the piecewise linear kernel (introduced in Appendix B) as the kernel function for SNELL. Ablation studies on different kernel functions are presented in Figure 4.

### Performance on Downstream Tasks

**Performance on Different Benchmarks.** Experiments on FGVC and VTAB-1k benchmarks indicate that SNELL achieves the best performance with supervised pre-trained ViT-B/16 backbone as shown in Table 1. SNELL gains large performance improvements over LoRA variants, _e.g._, SNELL-8 surpasses LoRA-8 significantly by 5.5% in terms of mean accuracy on the FGVC benchmark. Moreover, SNELL outperforms the state-of-the-art method SPT-LoRA by a clear margin of 0.5% in terms of mean top-1 accuracy on the VTAB-1k benchmark. This stems from the fact that SPT-LoRA only performs sparse tuning on a portion of the weight matrices while employing LoRA for the remaining part. In contrast, the low memory property of SNELL empowers sparse tuning on all the weight matrices, allowing for more precise adjustments and giving rise to superior performance.

**Performance on Different Pre-training Strategies.** Experimental results on models pre-trained using different strategies are presented in Table 2. SNELL outperforms the state-of-the-art performances on models pre-trained with MAE (71.8% _vs._ 69.8%) and MoCo v3 (75.5% _vs._ 75.3%). Furthermore, SNELL consistently outperforms other PEFT methods on every group of downstream datasets. This demonstrates the general effectiveness of SNELL under different pre-training strategies.

**Performance on Different Architectures.** Following VPT  and SPT , we apply SNELL to the hierarchal vision transformer Swin-B and the CNN architecture ConvNeXt-Base. Experimental results are shown in Table 3. Results on Swin-B demonstrate that SNELL-8 outperforms existing reparameterization-based PEFT methods by 0.3% and achieves comparable performance to the state-of-the-art addition-based method SPT-Adapter. For ConvNeXt-Base, SNELL achieves a performance improvement of 0.4% compared to the best-reported result. These results obtained on different architectures further validate the versatility and effectiveness of our SNELL approach.

**Memory Usage Comparison.** We illustrate the effectiveness of SNELL in terms of memory usage by comparing it with various PEFT methods. Figure 3(a) shows the accuracy and memory usage of different methods on ViT-B/16. Although some methods achieve satisfactory performance, their memory usage is excessively large, even surpassing that of full fine-tuning (_e.g._ SPT-Adapter and VPT-Deep). In comparison, SNELL achieves superior performance on downstream tasks with memory usage comparable to memory-efficient methods, including LoRA and Adapter.

   &  &  \\   &  &  &  &  &  &  &  &  &  &  &  \\  & &  &  & & & & & & \\  Full & 87.3 & 82.7 & 98.8 & 89.4 & 84.5 & 88.5 & 75.9 & 83.4 & 47.6 & 69.0 \\   \\  MLP-3  & 85.1 & 77.3 & 97.9 & 84.9 & 53.8 & 79.8 & 67.8 & 72.8 & 30.6 & 57.1 \\ VPT-Shallow  & 86.7 & 78.8 & 98.4 & 90.7 & 68.7 & 84.6 & 76.8 & 79.7 & 47.0 & 67.8 \\ VPT-Deep  & 88.5 & 84.2 & 99.0 & 90.2 & 83.6 & 89.1 & 78.5 & 82.4 & 55.0 & 72.0 \\ Adapter 8  & 87.3 & 84.3 & 98.4 & 88.8 & 68.4 & 85.5 & 79.0 & 84.1 & 58.5 & 73.9 \\ Adapter-3  & 87.2 & 84.3 & 98.5 & 89.6 & 68.4 & 85.6 & 79.6 & 84.0 & 58.3 & 74.0 \\ SPT-Adapter  & 89.1 & 83.3 & 99.2 & 91.1 & 86.2 & 89.8 & 82.0 & 85.8 & 61.4 & 76.4 \\ MoSA  & 89.3 & 85.7 & 99.2 & 91.9 & 83.4 & 89.9 & 79.9 & 84.0 & 50.3 & 71.4 \\   \\  Linear  & 85.3 & 75.9 & 97.9 & 86.2 & 51.3 & 79.3 & 68.9 & 77.2 & 26.8 & 57.6 \\ Partial-1  & 85.6 & 77.8 & 98.2 & 85.5 & 66.2 & 82.6 & 69.4 & 78.5 & 34.2 & 60.7 \\ Bias  & 88.4 & 84.2 & 98.8 & 91.2 & 79.4 & 88.4 & 73.3 & 78.3 & 44.1 & 65.2 \\ LoRA-8  & 84.9 & 79.0 & 98.1 & 88.1 & 79.8 & 86.0 & 79.5 & 84.6 & 60.5 & 74.9 \\ LoRA-16  & 85.6 & 79.8 & 98.9 & 87.6 & 72.0 & 84.8 & 79.8 & 84.9 & 60.2 & 75.0 \\ SPLLoRA  & 88.6 & 83.4 & 99.5 & 91.4 & 87.3 & 90.1 & 81.9 & 85.9 & 61.3 & 76.4 \\ SSF  & 89.5 & 85.7 & **99.6** & 89.6 & 89.2 & 90.7 & 81.6 & **86.6** & 59.0 & 75.7 \\  SNELL-8 (**ours**) & 89.6 & 86.8 & 99.3 & 92.1 & 89.9 & 91.5 & 82.0 & 85.7 & 61.6 & 76.4 \\ SNELL-16 (**ours**) & **89.9** & **87.0** & 99.3 & **92.2** & 90.3 & 91.7 & 82.4 & 86.1 & 61.7 & 76.7 \\ SNELL-32 (**ours**) & **89.9** & **87.0** & 99.4 & 92.0 & **90.5** & **91.8** & **82.7** & 86.1 & **61.8** & **76.9** \\  

Table 1: Top-1 accuracy (%) on FGVC and VTAB-1k benchmarks using ViT-B/16 pre-trained on ImageNet-21k supervised. The best result is in **bold**, and the second-best result is underlined.

   &  &  \\   & Natural & Specialized & Structured & Mean Acc. & Natural & Specialized & Structured & Mean Acc. \\  Full & 59.3 & 79.7 & 53.8 & 64.3 & 72.0 & 84.7 & 42.0 & 69.6 \\   \\  Adapter-8  & 57.2 & 78.4 & 54.7 & 63.4 & 27.6 & 70.9 & 48.4 & 49.0 \\ Adapter-32  & 55.3 & 78.8 & 53.3 & 62.5 & 74.2 & 82.7 & 47.7 & 68.2 \\ VPT-Shallow  & 40.0 & 69.7 & 27.5 & 45.7 & 67.3 & 82.3 & 37.6 & 62.4 \\ VPT-Deep  & 36.0 & 60.6 & 26.6 & 41.1 & 70.3 & 83.0 & 42.4 & 65.2 \\ SPT-Adapter  & 65.6 & 82.7 & 60.7 & 69.7 & 76.6 & 85.0 & 61.7 & 74.4 \\   \\  Linear  & 18.9 & 52.7 & 23.7 & 32.1 & 67.5 & 81.1 & 30.3 & 59.6 \\ Partial-1  & 58.4 & 78.3 & 47.6 & 61.5 & 72.3 & 84.6 & 47.9 & 68.3 \\ Bias  & 54.6 & 75.7 & 47.7 & 59.3 & 72.9 & 81.1 & 53.4 & 69.2 \\ LoRA-8  & 57.5 & 77.7 & 57.7 & 64.3 & 21.2 & 66.7 & 45.1 & 44.3 \\ LORA-16  & 57.3 & 77.1 & 59.9 & 64.8 & 16.0 & 64.0 & 48.7 & 42.9 \\ SPT-LoRA  & 65.4 & 82.4 & 61.5 & 69.8 & 76.5 & **86.0** & 63.6 & 75.3 \\  SNELL-8 (**ours**) & **68.3** & **83.8** & **63.5** & **71.8** & **76.8** & **86.0** & **63.7** & **75.5** \\  

Table 2: Top-1 accuracy (%) on VTAB-1k benchmarks using ViT-B/16 backbone pre-trained on ImageNet using MAE and MoCo v3 strategies. The best result is in **bold**.

Additionally, we present the memory usage evolutions during the fine-tuning process in Figure 3(b) to provide a detailed explanation of how SNELL can save memory. In the model initialization stage, SNELL exhibits a significantly smaller memory usage compared to full fine-tuning. This is because full fine-tuning stores all weight matrices as learnable parameters in the optimizer, whereas SNELL only stores low-rank matrices with smaller parameter volumes. In the feed-forward phase, the memory usage increases with the storage of intermediate variables for backpropagation. Unlike other intermediate variables, the adaptation matrix \(\) in SNELL solely relies on the low-rank parameter matrices, which are already stored in the optimizer. Therefore, it can be dumped in the feed-forward phase and recovered in backpropagation immediately, saving from a large amount of memory usage (SNELL _vs._ SNELL storing \(\)).

**Scaling to Larger Models.** To investigate the scalability of SNELL to large models, we apply it to ViT models of varying sizes (ViT-B/16, ViT-L/16, and ViT-H/16 pre-trained on ImageNet21K). We follow the experimental setup presented in Section 4.1, except for modifying the batch size for experiments on ViT-H/14 to 8 and changing the search scope of sparsity ratios \(s\{0,0.9\}\).

As depicted in Figure 3(c), the memory usage of full fine-tuning increases rapidly as the model size grows. This observation highlights that existing PEFT methods like VPT and SPT, despite their advanced performances, incur substantial memory costs when applied to large-scale models due to even higher memory usage than full fine-tuning. In contrast, SNELL exhibits a notable advantage in terms of memory usage for larger models (similar to LoRA-8). When applied to ViT-H/14, the memory usage of SNELL is only approximately 50% of that required for full fine-tuning, exemplifying its significant memory-saving capability on large models.

Regarding the performance, as shown in Table 4, SNELL-8 outperforms LoRA-8 on all dataset groups (Natural, Specialized, and Structured) as well as the mean accuracy for both ViT-L and ViT-H on the VTAB-1k benchmark. This demonstrates the effectiveness of SNELL for adapting large pre-trained models to downstream tasks.

    &  &  \\   & Natural & Specialized & Structured & Mean Acc. & Natural & Specialized & Structured & Mean Acc. \\  Full & 79.1 & 86.2 & 59.7 & 75.0 & 78.0 & 83.7 & 60.4 & 74.0 \\   \\  MLP-3  & 73.6 & 75.2 & 35.7 & 61.5 & 73.8 & 81.4 & 35.7 & 63.6 \\ VPT-Deep  & 76.8 & 84.5 & 53.4 & 71.6 & 78.5 & 83.0 & 44.6 & 68.7 \\ Adapter-8  & 81.7 & 87.3 & 61.2 & 76.7 & 83.1 & 84.9 & 64.6 & 77.5 \\ SPT-Adapter  & 83.0 & 87.3 & **62.1** & **77.5** & 83.7 & 86.2 & 65.3 & 78.4 \\   \\  Linear  & 73.5 & 80.8 & 33.5 & 62.6 & 74.5 & 81.5 & 34.8 & 63.6 \\ Partial-1  & 73.1 & 81.7 & 35.0 & 63.3 & 73.8 & 81.6 & 39.6 & 65.0 \\ LoRA-8  & 81.7 & 87.2 & 60.1 & 76.3 & 82.2 & 84.7 & 64.1 & 77.0 \\ SPT-LoRA  & 83.1 & 87.4 & 60.4 & 77.2 & 83.4 & 86.7 & **65.9** & 78.7 \\  SNELL-8 **(ours)** & **83.3** & **87.7** & 61.4 & **77.5** & **84.5** & **87.4** & 65.6 & **79.1** \\   

Table 3: Comparisons on VTAB-1k benchmark with supervised pre-trained Swin-B and ConvNeXt-B. Top-1 accuracy (%) is reported. The best result is in **bold**.

Figure 3: (a) Accuracy _vs._ memory usage (batchsize=64) with supervised pre-trained ViT-B/16 on VTAB-1k. (b) Memory usage evolutions of full fine-tuning, SNELL, and SNELL storing the merged adaptation matrix (SNELL storing \(\)) on ViT-H/14 during fine-tuning (batchsize=8). (c) Model parameter volumes _vs._ memory usage (batchsize=8). As the model gets larger, SNELL’s advantage of low memory usage over full fine-tuning becomes more obvious.

### Ablation Studies

**Effect of Kernelized LoRA.** We explore the effectiveness of kernelized LoRA by comparing the performance of sparsifying a full-rank matrix, the merged adaptation matrix of LoRA, and the merged adaptation matrix of kernelized LoRA. Experimental results are presented in Table 5(a). We can see that sparsifying the merged adaptation matrix of LoRA significantly underperforms a full-rank matrix. This reveals that the low-rank property of the merged adaptation matrix in LoRA greatly compromises the weight selection scope, leading to performance degradation for sparse tuning. However, when we replace LoRA with kernelized LoRA, the performance becomes notably comparable to that of the full-rank matrix under the strong sparsity constraint (\(s=0.9\)). This indicates that kernelized LoRA can effectively leverage sparse tuning while maintaining a low memory usage.

**Effect of Sparse Tuning.** Table 5(b) shows the performance comparison between SNELL and kernelized LoRA to explore the effectiveness of sparse tuning. For kernelized LoRA with different ranks, applying sparse tuning can consistently improve their performance. Moreover, as the rank of the learnable matrix increases, the performance of kernelized LoRA decreases while that of SNELL increases. This difference stems from the model regularization. Similar to sparse regularization, the low-rank property of LoRA that constrains the dependence between individual weights, can also be taken as a form of regularization. As the rank of the learnable matrix increases, the effect of low-rank regularization diminishes. Consequently, kernelized LoRA becomes more susceptible to over-fitting and encounters performance degradation. In contrast, SNELL employs both low-rank and sparse regularization. Higher ranks enable better sparsification towards downstream tasks, boosting sparse regularization that counteracts the diminished low-rank regularization. Therefore, a higher rank may lead to over-fitting in kernelized LoRA, but it can further enhance performance with sparse tuning.

**Effect of Different Kernel Function.** We investigate the effectiveness of different kernel functions in kernelized LoRA. First, we explore the ability of different kernel functions to fit randomly generated full-rank matrices based on low-rank matrices using the gradient descent algorithm (introduced in Appendix A.3). As shown in Figure 4(a), we explored four kinds of kernel functions. Compared with the linear kernel function, nonlinear kernel functions can reconstruct the full-rank target matrix more accurately based on the low-rank matrices. Subsequently, we explore the performance of kernelized LoRA with different kernel functions for pre-trained model fine-tuning in Figure 4(b). We find that using piecewise linear distance as the kernel function can achieve better results compared to linear kernel function (LoRA), while using Sigmoid and RBF kernels leads to severe performance degradation. This is because the complex non-linear kernel functions such as the exponential function increase the optimization difficulty in deep networks shown in Figure 4(c). More comparisons between LoRA and kernelized LoRA (with piecewise linear kernel) are presented in Appendix C.3.2.

**Optimal Sparsity Ratio for Different Downstream Tasks.** We provide the optimal sparsity ratio of SNELL-8 on tasks from VTAB-1k benchmarks in Figure 5. The optimal sparsity ratio varies

    &  &  \\   & Natural & Specialized & Structured & Mean Acc. & Natural & Specialized & Structured & Mean Acc. \\  LoRA-8 & 81.2 & 86.6 & 53.4 & 73.7 & 77.9 & 84.8 & 55.9 & 72.9 \\ SNELL-8 & 82.3 & 86.9 & 56.6 & **75.3** & 79.5 & 85.1 & 56.9 & **73.8** \\   

Table 4: Comparisons on VTAB-1k benchmark with supervised pre-trained ViT-L/16 and ViT-H/16. Top-1 accuracy is reported. The best result is in **bold**.

   Matrix & Natural & Specialized & Structured & Mean Acc. \\  Full-Rank & 80.5 & 85.1 & 57.6 & 74.4 \\  LoRA-8 & 61.1 & 81.2 & 54.7 & 65.7 \\ KLoRA-8 & 79.4 & 84.5 & 57.9 & 73.9 \\    
   Method & \(r=8\) & \(r=16\) & \(r=32\) \\  KLoRA & 73.2 & 73.0 & 72.7 \\ SNELL & 74.2 & 74.4 & 74.6 \\  Perf. Imp. & +1.0 & +1.4 & +1.9 \\   

Table 5: (a) Performance on VTAB-1k of sparsifying a full-rank matrix, the merged adaptation matrix of LoRA-8 and kernelized LoRA-8 (KLoRA-8) with sparsity ratio \(s=0.9\). (b) The mean accuracy on VTAB-1k of kernelized LoRA (KLoRA) and SNELL (KLoRA+sparsifying) with different ranks of learnable matrices. Perf. Imp. denotes the performance improvement of SNELL over KLoRA.

significantly across different downstream tasks within the same group (_e.g._, Cifar _vs._ Sun397, dSpr-loc _vs._ Clevr-Dist). Furthermore, we can observe that the Natural task group exhibits a higher average optimal sparsity ratio compared to the Specialized group, while the Structured group demonstrates the lowest ratio. This observation aligns with the example illustrated in Figure A6, where cross-domain adaptation from a model pre-trained on natural images (ImageNet) to images of Specialized and Structured groups necessitates a larger number of tunable parameters.

## 5 Conclusion

In this work, we proposed a PEFT method named SNELL (**S**parse tuning with ker**N**EL**ized **L**oRA) to conduct high-performance sparse tuning with low memory usage. To reduce memory usage, we sparsified the adaptation matrix merged with low-rank matrices rather than the pre-trained weight matrix to reduce the volume of learnable parameters stored in the optimizer. Then we designed a competition-based sparsification mechanism to avoid the additional memory usage of storing the tunable weight indexes. To reveal the effectiveness of sparse tuning, we utilize nonlinear kernel functions to merge the adaptation matrix, increasing the rank of the merged matrix to maintain a compact representation suitable for sparse tuning with low memory usage. Extensive experiments demonstrated the ability of SNELL to leverage the high performance of sparse tuning and the low memory usage of LoRA. For future work, we will apply SNELL on larger models such as LLMs and improve its training efficiency. For limitations discussion, please refer to Appendix E.2.