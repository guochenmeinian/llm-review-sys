# Learning Optimal Tax Design in Nonatomic Congestion Games

Qiwen Cui

Paul G. Allen School of Computer Science

Engineering

University of Washington

Seattle, WA 98195

qwcui@cs.washington.edu

&Maryam Fazel

Department of Electrical

Computer Engineering

University of Washington

Seattle, WA 98195

mfazel@uw.edu

&Simon S. Du

Paul G. Allen School of Computer Science

Engineering

University of Washington

Seattle, WA 98195

ssdu@cs.washington.edu

###### Abstract

In multiplayer games, self-interested behavior among the players can harm the social welfare. Tax mechanisms are a common method to alleviate this issue and induce socially optimal behavior. In this work, we take the initial step of learning the optimal tax that can maximize social welfare with limited feedback in congestion games. We propose a new type of feedback named _equilibrium feedback_, where the tax designer can only observe the Nash equilibrium after deploying a tax plan. Existing algorithms are not applicable due to the exponentially large tax function space, nonexistence of the gradient, and nonconvexity of the objective. To tackle these challenges, we design a computationally efficient algorithm that leverages several novel components: (1) a piece-wise linear tax to approximate the optimal tax; (2) extra linear terms to guarantee a strongly convex potential function; (3) an efficient subroutine to find the exploratory tax that can provide critical information about the game. The algorithm can find an \(\)-optimal tax with \(O( F^{2}/)\) sample complexity, where \(\) is the smoothness of the cost function and \(F\) is the number of facilities.

## 1 Introduction

In modern society, large-scale systems often consist of many self-interested players with shared resources, such as transportation and communication networks. Importantly, the objectives of individual players are not always aligned with the system efficiency, and the system designer should take this into consideration. A widely known example is Braess's paradox, where adding more roads to a network can make the network more congested . Price of anarchy is a notion that measures the inefficiency caused by selfish behavior compared with optimal centralized behavior . Characterizing such inefficiency has been an active research area with applications in resource allocation , traffic congestion , and others. The inefficiency motivates research on how to design mechanisms to improve performance even when the players are still behaving selfishly.

Tax mechanisms are a standard approach to resolving the inefficiency issue, which are widely studied in economics, operations research, and game theory. The goal of tax mechanisms is to incentivize self-interested players to follow socially optimal behavior by applying tax/subsidy. Congestion game is a widely studied class of game theory models characterizing the interactions between players sharing facilities, where the cost of each facility depends on the "congestion" level (Wadrop, 1952; Rosenthal, 1973). As a motivating example, in traffic routing games, each facility corresponds to an edge in a network, and each player chooses a path that connects her source node and target node. The cost of each facility corresponds to the latency of each edge, which depends on the number of players using that edge. Then, the tax can be interpreted as the toll collected by the road owner or the government to improve overall traffic efficiency (Bergendorff et al., 1997).

Most existing works on congestion game tax design focus on the computation complexity of the optimal tax (Nisan et al., 2007; Caragiannis et al., 2010). They assume the tax designer has full knowledge of the underlying game, which is unrealistic in many applications. As Nash equilibrium is the only stable state of the system, we study a partial information feedback setting named "equilibrium feedback", where the tax designer can only observe information about the Nash equilibrium. The limited feedback information brings new challenges to the tax designer, and strategic exploration is necessary to learn or design the optimal tax. In this work, we aim to take the first step in learning optimal tax design for congestion games, and we study the following problem:

_How can we learn the optimal tax design in congestion games with equilibrium feedback?_

Below we highlight our contributions.

### Main Contributions and Technical Novelties

**1. The first algorithm for learning optimal tax design in congestion games.** To the best of our knowledge, this is the first result for learning optimal tax in congestion games with partial information feedback. Our algorithm enjoys \(O(F^{2}/)\) sample complexity for learning an \(\)-optimal tax, where \(F\) is the number of facilities and \(\) is the smoothness coefficient of the cost function. The sample complexity has no dependence on the number of actions, which could be exponential in \(F\). In addition, we provide an efficient implementation for network congestion games with \(((V,E,))\) computational complexity, where \(V\) and \(E\) are the numbers of the vertexes and edges in the network. Due to space limitation, we defer the computation analysis and experiments to Appendix C and Appendix E.

**2. Piece-wise linear function approximation.** We only assume the cost functions are smooth and make no parameterization assumptions as they are too strong to be satisfied in real-world applications. To tackle this challenge, we use piece-wise linear functions to approximate the optimal tax function. While only the values of the cost functions can be observed, we show that a carefully designed piece-wise linear function can approximate the unobservable optimal tax function well.

**3. Strongly convex potential function.** One challenge in tax design is controlling the sensitivity of Nash equilibrium w.r.t. tax perturbation. We always enforce tax functions with subgradient lower bounded by some positive value, which leads to a strongly convex potential function. As a result, the Nash equilibrium will be unique and Lipschitz with respect to tax perturbation. As the potential function for optimal tax is not necessarily strongly convex, we carefully choose the strong-convexity coefficient to balance the induced bias.

**4. Exploratory tax design.** Given the equilibrium feedback, the tax designer can only indirectly query the cost function by applying tax. Consequently, exploration in tax design becomes much more difficult than that in standard bandit problems where the player can directly query the value of an action (Lattimore and Szepesvari, 2020). We design an exploratory tax that pushes the equilibrium to the "boundary", where an additional tax perturbation will change the equilibrium and reveal information about at least one unknown facility.

In this work, we focus on the well-known nonatomic congestion games. We hope our algorithm and analysis provide new insight on the intriguing structure of nonatomic congestion games. In addition, the tax design algorithm might find applications in real-world problems such as toll design in traffic networks. Due to space limitation, most proofs are deferred to the appendix.

**Notations.**\([m]=\{1,2,,m\}\). For a set of real numbers \(\) and a real number \(x:\{\} x\{\}\), we define \([x]_{}^{+}:=_{y:y x}y\) and \([x]_{}^{-}:=_{y:y x}y\). The clip operation \((a,l,r):=\{\{a,l\},r\}\) clips \(a\) into the interval \([l,r]\). We use \(O()\) to hide absolute constants and \(()\) to hide \(\) terms as well. A function \(f:\) is \(\)-strongly convex if \(f(y) f(x)+ f(x)^{}(y-x)+\|y-x\|_{2}^{ 2}, x,y\). \(f\) is \(\)-smooth if \(\| f(x)- f(y)\|_{2}\|x-y\|_{2},  x,y\).

## 2 Related Work

Learning in congestion games.We refer the readers to the textbook (Nisan et al., 2007) for a general introduction to congestion games, the price of anarchy and tax mechanisms. Nonatomic congestion games were first studied in (Pigou, 1912) and formalized by (Wardrop, 1952). Atomic congestion games were introduced by (Rosenthal, 1973) and the connection with potential games is developed by (Monderer and Shapley, 1996). In contrast to general-sum games without structures, (approximate) Nash equilibrium can be computed efficiently in congestion games due to the existence of the potential function. Recently, various algorithms are developed to learn the Nash equilibrium in congestion games with different feedback oracles (Krichene et al., 2015; Chen and Lu, 2016; Cui et al., 2022; Jiang et al., 2022; Panagasa et al., 2023; Dong et al., 2023; Dadi et al., 2024). These algorithms are derived from the perspective of the players in the system, while our algorithm is essentially different in that it is utilized by the system designer to induce better equilibrium.

Optimal tax design in congestion games.For nonatomic congestion games, optimal tax design has a closed-form solution known as the marginal cost mechanism (Nisan et al., 2007). For atomic congestion games, the marginal cost mechanism can no longer improve the efficiency (Paccagnan et al., 2021). Instead, other mechanisms are proposed for optimal local/global and congestion dependent/independent tax in atomic congestion games (Caragiannis et al., 2010; Bilo and Vinci, 2019; Paccagnan et al., 2021; Paccagnan and Gairing, 2021; Harks et al., 2015). Notably, all of these mechanisms assume full knowledge of the game while we consider learning with partial information feedback.

Stackelberg games.Stackelberg game (Von Stackelberg, 2010) models the interactions between leaders and followers such that leaders take actions first and the followers make decisions after observing leaders' actions. Tax design can be formulated as a Stackelberg game where the designer is the leader and the game players are the followers. Equipped with a best response oracle to predict followers' actions, Letchford et al. (2009); Blum et al. (2014); Peng et al. (2019) propose algorithms for learning Stackelberg equilibrium. Recently, Bai et al. (2021); Zhong et al. (2021); Zhao et al. (2023) generalize these results to learning Stackelberg equilibrium with bandit feedback, under finite actions or linear function approximation assumptions. For tax design, the search space is an exponentially large function space with complicated dependence on the objective. Consequently, existing results for Stackelberg games become vacuous when specialized to our problem.

Mathematical programming under equilibrium constraint.Tax design can be formulated as minimizing social cost with respect to tax under the constraint that players are following the equilibrium. This is known as mathematical programs with equilibrium constraints (MPEC). MPEC is a bilevel optimization problem and is NP-hard in general (Luo et al., 1996). Existing approaches use specific inner loop algorithms to approach the equilibrium so that the gradient can be propagated to the outer loop (Li et al., 2020; Liu et al., 2022; Li et al., 2022; Maheshwari et al., 2023; Li et al., 2023; Grontas et al., 2024), relying on a unique and differentiable equilibrium (Colson et al., 2007). However, such an approach requires many strong assumptions, such as the tax designer can control the algorithm of the agents, convex objective function and parameterized tax function. In contrast, our results make none of these assumptions.

## 3 Preliminaries

Nonatomic congestion games.A weighted nonatomic congestion game (congestion game) is described by the tuple \((,_{[m]},w_{[m]},c_{})\), where \(\) is the set of facilities with cardinality \(F\), \(m\) is the number of commodities, \(_{i}\) is the action set for commodity \(i[m]\), \(w_{i}\) is the weight forcommodity \(i[m]\) such that \(_{i[m]}w_{i}=1\), and \(c_{f}:\) is the cost function for facility \(f\). Each commodity consists of infinite number of infinitesimal players with a total load to be \(w_{i}\). Each individual player is self-interested and has a negligible effect on the game.

In congestion games, action \(a_{i},i[m]\) is a subset of \(\), i.e. \(a\), which denotes the facilities utilized by action \(a\). For commodity \(i[m]\), we use strategy \(x_{i}=(x_{i,a})_{a_{i}}[0,w_{i}]^{|_{i}|}\) with constraint \(_{a_{i}}x_{i,a}=w_{i}\) to denote how the load is distributed over all the actions. The joint strategy for the game is represented by \(x=(x_{1},x_{2},,x_{m})^{A},\) where \(A=_{i[m]}|_{i}|\). We use \(\) to denote the set of all feasible strategies.

A decentralized perspective of strategy \(x_{i}\) for commodity \(i\) is that each self-interested infinitesimal player follows a randomized strategy that chooses \(a_{i}\) with probability proportional to \(x_{i,a}\). With the law of large number, the load on action \(a\) would be \(x_{i,a}\).

Cost function.For a strategy \(x\), the cost of a facility is \(c_{f}(l_{f}(x))\), where \(l_{f}(x)=_{i[m]}_{a_{i}:f a}x_{i,a}\) is the load on facility \(f\). The cost of an action \(a\) is the sum of the facility cost that \(a\) utilizes: \(c_{a}(x):=_{f a}c_{f}(l_{f}(x))\).

We make the following assumption on the cost function. Monotonicity is a standard congestion game assumption, which is also observed in many real-world applications as more players sharing one facility, each player will have less gain or more cost (Nisan et al., 2007). Smoothness is a standard technical assumption for analysis.

**Assumption 1**.: _We assume the cost function satisfies:_

1. _Monotonicity:_ \(c_{f}()\) _is non-decreasing for all_ \(f\)_,_
2. _Smoothness:_ \(c_{f}()\) _is_ \(\)_-smooth for all_ \(f\)_._

Nash equilibrium.Nash equilibrium in nonatomic congestion games, also known as the Wardrop equilibrium (Wardrop, 1952), is the strategy that no player has the incentive to deviate from its strategy as formalized in Definition 1. In other words, Nash equilibrium is a stable state for a system with selfish players.

**Definition 1**.: _A Nash equilibrium strategy \(x\) is a joint strategy such that each player is choosing the best action: for any commodity \(i[m]\) and actions \(a,a^{}_{i}\), we have_

\[c_{a}(x) c_{a^{}}(x),\ \ x_{i,a}>0.\]

_Similarly, an \(\)-approximate Nash equilibrium \(x\) satisfies that_

\[ i[m],a,a^{}_{i},c_{a}(x) c_{a^{}}(x)+ ,\ \ x_{i,a}>0.\]

For a strategy \(x\) and commodity \(i\), actions \(a_{i}\) such that \(x_{i,a}>0\) are named as the "in-support" actions and the others are "off-support" actions. For a Nash equilibrium, in-support actions must all have the same cost and off-support actions are no better than in-support actions. It is well known that Nash equilibrium always exists in congestion games (Beckmann et al., 1956).

Potential Function.An important concept in congestion games is the potential function:

\[(x):=_{f}_{0}^{l_{f}(x)}c_{f}(u)du.\]

If Assumption 1 is satisfied, then \((x)\) is a convex function and Nash equilibrium is equivalent to the minimizer of the potential function (Beckmann et al., 1956).

Network congestion games.Network congestion games are congestion games with multicommodity network structure, which are also known as the selfish routing games (Roughgarden, 2005). A multicommodity network is described by a directed graph \((,)\) where \(\) is the vertex set and \(\) is the edge (facility) set. In addition, each commodity \(i[m]\) corresponds to a pair of source and target vertex \((s_{i},t_{i})\), and actions are all feasible paths connecting \(s_{i}\) and \(t_{i}\). Each edge is associated with a nondecreasing cost (latency) function.

## 4 Tax Design for Congestion Games

In this section, we introduce tax design in congestion games. Before we get into the details, we will first introduce some notions to simplify the problem.

### Polytope Description for Congestion Games

For a strategy \(x_{i}^{|_{i}|}\), the dimension \(|_{i}|\) can be as large as \(2^{F}\). Instead, it would be convenient to consider the facility load \(y_{i}^{F}\) such that \(y_{i,f}=_{a_{i}:f a}x_{i,a}\). In addition, we define \(y=_{i[m]}y_{i}^{F}\) to be the total facility load. We use \(_{(i)}()\) to denote the reparameterization mapping:

\[(x)=y,_{i}(x_{i})=y_{i}, i[m],\]

and we set \(=\{y^{F}: x,y=(x)\}\) to be the set of all feasible loads. Note that \(\) is not necessarily a bijection, i.e., there could exist multiple strategies sharing the same load. We use \(^{-1}(y):=\{x:(x)=y\}\) to denote the set of strategies that are mapped to load \(y\). The potential function can be defined after the reparameterization as well:

\[^{}(y):=_{f}_{0}^{y_{f}}c_{f}(u)du=(x), x ^{-1}(y).\]

Importantly, \(^{}(y)\) does not depend on the choice of strategy \(x^{-1}(y)\). For the reparameterized potential function, we have the following lemma showing that it is almost equivalent to the original potential function. When it is clear from the context, we will simplify \(^{}\) as \(\).

**Lemma 1**.: \(^{}\) _is convex under Assumption 1. If \(y^{*}=*{argmin}_{y}^{}(y)\), then for any \(x^{-1}(y^{*})\), \(x\) is a Nash equilibrium._

For any Nash equilibrium strategy \(x\), we call \(y=(x)\) the Nash equilibrium load (Nash load).

### Optimal Tax for Congestion Games

Nash equilibrium is a stable state for a system with self-interested players, as no player has the incentive to deviate unilaterally. However, Nash equilibrium does not efficiently utilize the facilities, which is measured by the social cost:

\[(y):=_{f}y_{f}c_{f}(y_{f}).\]

Price of anarchy is a concept that measures the efficiency of selfish agents in a system, defined as the ratio between the worst-case social cost for equilibria and the optimal social cost:

\[=}(y)}{_{y }(y)}\]

For example, in nonatomic congestion games with polynomial cost functions, the price of anarchy grows as \((d/ d)\) where \(d\) is the degree of the polynomials (Nisan et al., 2007).

To reduce the price of anarchy, one standard approach is to enforce a tax on each facility to change the behavior of the self-interested players. Formally, a taxed congestion game is described by \((,_{[m]},w_{[m]},c_{},_{})\) with an additional tax function \(_{f}:\) on facility \(f\). The cost of facility \(f\) with load \(u\) under tax becomes \(c_{f}(u)+_{f}(u)\). Correspondingly, we define the potential function with tax \(\) as

\[(y;):=_{f}_{0}^{y_{f}}[c_{f}(u)+_{f}(u)]du,\]

and the Nash load would satisfy \(y^{*}*{argmin}_{y}(y;)\).

The optimal tax is defined as the tax that can induce optimal social behavior for self-interested players. We want to note that tax is not included in social cost following the convention in tax design.

**Definition 2**.: _A tax \(\) is an optimal tax if all Nash equilibria under tax \(\) can minimize the social cost:_

\[*{argmin}_{y}(y;) *{argmin}_{y}(y).\]

_In addition, a tax \(\) is an \(\)-optimal tax if we have_

\[(y)_{y^{}}(y^{})+, y *{argmin}_{y^{}}(y^{ };).\]

The marginal cost tax is defined as

\[^{*}:^{*}_{f}(u)=uc^{}_{f}(u), f.\]

As \((y;^{*})=(y)\), the Nash equilibrium under tax \(^{*}\) will minimize the social cost and \(^{*}\) is an optimal tax (Nisan et al., 2007). We will make the following assumption so that the cost combined with tax \(c+^{*}\) is still non-decreasing. In many real world problems, \(c^{}_{f}(u)\) is non-decreasing due to the law of diminishing marginal utility, which guarantees Assumption 2.

**Assumption 2**.: _Marginal cost tax \(^{*}_{f}(u)=uc^{}_{f}(u)\) is non-decreasing for all \(f\)._

### Tax Design for Congestion Games

In this paper, we consider the case where the system designer (e.g. government) wants to enforce an (approximate) optimal tax to induce optimal social behavior and maximize social welfare. However, the cost function is unknown so the optimal tax function cannot be computed directly via the marginal cost mechanism. On the other hand, the designer can enforce several taxes and observe the feedback. As Nash equilibrium is the stable state of the system, we assume the designer can observe the equilibrium feedback.

Formally, tax design is formulated as an online learning problem as shown in Protocol 1. At round \(t\), the designer can choose a tax \(^{t}\) and observe the corresponding Nash equilibrium load \(y^{t}^{F}\) and Nash equilibrium cost \(c^{t}^{F}\). The sample complexity of a tax design algorithm is the number of rounds for designing an \(\)-optimal tax.

A naive approach is the designer first enumerates all of the \(\)-approximations of \(^{*}\) and chooses the tax with minimal social cost. However, such an approach would require \(O((1/)^{F/})\) samples as the complexity of using piece-wise linear function to approximate \(^{*}_{f}\) (a \(\)-smooth function) with \(\) error is \(O((1/)^{/})\), resulting in exponential dependence on the parameters \(\), \(1/\) and \(F\).

Another approach is applying algorithms for mathematical programming under equilibrium constraints. Specifically, we can formulate tax design as solving

\[_{}(y()),\;\;y()=*{argmin}_{y }(y;).\]

However, \(y()\) can be non-differentiable or even discontinuous w.r.t. \(\), and \((y())\) can be non-convex w.r.t. \(\) (Lemma 5). As a result, previous results do not apply to our problem as they apply gradient-based methods and make convexity assumptions (Li et al., 2020; Liu et al., 2022).

## 5 Learning Optimal Tax in Nonatomic Congestion Games

In this section, we describe our algorithm that can learn an \(\)-optimal tax with \(O(F^{2}/)\) samples. First, we introduce piece-wise linear functions as a nonparametric way to approximate the marginal cost tax \(^{*}\)(Takezawa, 2005).

**Definition 3**.: _(Piece-wise Linear Function) We use a dictionary1\(d=\{(x_{1},y_{1}),,(x_{n},y_{n})\}\) for \(x_{i} x_{j}, i j\) (w.l.o.g. we let \(x_{1}<x_{2}<<x_{n}\)) to represent a piece-wise linear function \(d()\) on \([x_{1},x_{n}]\) such that_

\[d(x)=}{x_{i}-x_{i+1}}y_{i}+-x}{x_{i}-x_{i+1}}y_{i+1},  x[x_{i},x_{i+1}].\]

_In addition, we use \(\) to represent the update method for dictionary. I.e., \(d(x,y)\) is the piece-wise linear function interpolating one more point \((x,y)\) if \((x,d(x))\) is not already in \(d\), otherwise it will update \(d(x)\) to \(y\)._

We will maintain the piece-wise function on a grid \(=\{0,,2,,K=1\}\) with \(K=\) and \(=1/K\). The time complexity for computing \(d(x)\) is \(O( K)\) for any \(x\).

### Main Algorithm

```
1:Initialize: Facility set \(\), number of rounds \(T\), tolerance \(\), smoothness \(\), perturbation \(=^{2}/8\).
2:Set initial tax \(^{1}:^{1}_{f}=\{(0,0),(1,+)\}\) for all \(f\). Set \(^{1}_{f}\) to be \(\{0\}\) for all \(f\).
3:for\(t=1,2,,T\)do
4: Observe Nash load \(y^{t}^{F}\) and Nash cost \(c^{t}^{F}\) under tax \(^{t}\).
5: Set \(}\) to be the unknown facility set (Definition 4).
6: Set \(l_{f}=^{t}_{f}([y^{t}_{f}]^{_{^{1}_{f}}}_{^{1}_ {f}})+(y^{t}_{f}-[y^{t}_{f}]^{_{^{1}_{f}}}_{^{1}_{f}})\) and \(r_{f}=^{t}_{f}([y^{t}_{f}]^{+}_{^{t}_{f}\{1\}})+( y^{t}_{f}-[y^{t}_{f}]^{+}_{^{1}_{f}\{1\}})\) for each \(f}\).
7: Run Algorithm 2 with input \(y^{t}\), \(c^{t}\), \(^{t}=[^{t}_{f}(y^{t}_{f})]_{f}\), \(}\) and \([l_{f},r_{f}]_{f}}\).
8:if Algorithm 2 return \(\)then
9:return\(^{t}\)
10:else
11: Algorithm 2 return \(^{F},},\{-1,1\}\).
12: Apply tax \(^{t}:^{t}_{f}=^{t}_{f}(y^{t}_{}, ^{t}_{f})+\) and \(^{t}_{f}=^{t}_{f}(y^{t}_{f},^{t}_{f})\) for \(f\).
13: Observe \(^{t},^{t}^{F}\) as the Nash load and the Nash cost of each facility.
14: Update \(_{t+1}\) and \(_{t+1}\) according to (1).
15:endif
16:endfor ```

**Algorithm 1** Tax Design for Congestion Game

In this section, we introduce our main algorithm. At each round \(t\), we will maintain a known index set \(^{t}_{f}\) where the marginal cost tax can be accurately estimated (Lemma 7), and use a piece-wise linear function to approximate the tax function by interpolating the values at the known indexes. The piece-wise linear function takes the form \(^{t}_{f}=\{(x^{t}_{i},y^{t}_{i})\}_{i}\) and the known index set \(^{t}_{f}\) satisfies \(\{x^{t}_{i}\}_{i}=^{t}_{f}\{1\}\) and \(^{t}_{f}\). Here \(1\) is a special case as it is not in the known index set initially but it is needed as the boundary for the piece-wise linear function \(^{t}_{f}\). Initially, the tax is set to be \(^{1}_{f}(u)=\{(0,0),(1,+)\}\) and the auxiliary tax is \(^{1}_{f}=\{(0,0),(1,)\}\) for \(f\) (Line 2). Here we set \(^{1}_{f}(1)=\) as \(\) is always an upper bound on \(^{t}_{f}(1)\). The auxiliary tax \(^{t}_{f}\) is a non-decreasing piece-wise linear approximation of \(^{*}_{f}\) and we always set tax \(^{t}_{f}(u)=^{t}_{f}(u)+ u\) to ensure that the subgradient of the tax enforced is lower bounded by \(\).

At round \(t\), after observing Nash equilibrium load \(y^{t}^{F}\) and Nash equilibrium cost \(c^{t}^{F}\), the facilities are split into two sets: known facilities and unknown facilities.

**Definition 4**.: _For each round \(t\), facility \(f\) is known if the Nash load \(y^{t}_{f}\) satisfies \([y^{t}_{f}]^{-}_{}^{t}_{f}\) and \([y^{t}_{f}]^{+}_{}^{t}_{f}\). Otherwise, facility \(f\) is unknown for round \(t\)._

For a known facility \(f\), the Nash load is either in the known index set or sandwiched by two consecutive known indexes. As a result, the tax estimate for the Nash load \(^{t}_{f}(y^{t}_{f})\) will be close to thetrue optimal tax \(^{*}_{f}(y^{t}_{f})\) with error \(2\) (Lemma 8). We will apply Algorithm 2 to find the exploratory tax to gather information about unknown facilities (Line 7).

**Proposition 1**.: _If Algorithm 2 return \(\) at round \(t\), then tax \(^{t}\) is an \(6 F\)-optimal tax. If Algorithm 2 output \(^{t},^{t},^{t}\) at round \(t\), then we have_

\[0<|y^{t}_{^{t}}-^{t}_{^{t}}|.\]

If Algorithm 2 output \(^{t},^{t},^{t}\) at round \(t\), we update the tax and the known index set by the following rule. For \(u\{[y^{t}_{^{t}}]^{+}_{},[y^{t}_{^{ t}}]^{-}_{}\}^{t}_{^{t}}\) (this set is not empty as \(^{t}\) is an unknown facility), we set

\[^{t+1}_{^{t}}= ^{t}_{^{t}}u, u_{^{t}}-^{t} _{^{t}}}{y^{t}_{^{t}}-^{t}_{^{t} }},^{t}_{^{t}}([y^{t}_{^{t}}]^{-}_{ ^{t}_{^{t}}}),^{t}_{^{t} }([y^{t}_{^{t}}]^{+}_{^{t}_{^{t}}} \{1\}),\] (1) \[^{t+1}_{^{t}}= ^{t}_{^{t}}\{u\}.\] (2)

and \(^{t+1}_{f}=^{t}_{f},^{t+1}_{f}= ^{t}_{f}\) for \(f^{t}\). Then we set \(^{t+1}_{f}(u)=^{t+1}_{f}(u)+ u\) for all \(f\) and \(u\).

In words, we clip the two-point estimate \(u_{^{t}}-^{t}_{^{t}}}{y^{t}_ {^{t}}-^{t}_{^{t}}}\) on the left and right known index of \(^{t}_{_{i}}(u)\) so that \(^{t+1}_{^{t}}(u)\) is still a non-decreasing piece-wise linear approximation of the marginal cost tax \(^{*}_{f}\). \(^{t+1}_{f}\) is added with an extra linear term to guarantee a strongly convex potential function (Lemma 2). As \(0<|y^{t}_{f}-^{t}_{f}|\), the two point estimate of the gradient \(_{f}-^{t}_{f}}{y^{t}_{f}-^{t}_{f}}\) is accurate enough for \(c^{}_{f}(u)\) such that \(|^{t+1}_{^{t}}(u)-_{f}(u)|\) (Lemma 6).

As \(|^{t}_{^{t}}|\) increases by 1 at round \(t\) and there are \(F\) such sets with size bounded by \(O(/)\), Algorithm 2 will output \(\) within at most \(O(F/)\) rounds, which implies \(^{t}\) is an \( F\)-optimal tax (Proposition 1). With proper rescaling, the sample complexity for learning \(\)-optimal tax is \(O(F^{2}/)\).

**Theorem 1**.: _Under Assumption 1 and Assumption 2, Algorithm 1 will output a \(6 F\) tax within \(T 2F/\) rounds. In addition, each round has at most two tax realizations._

**Remark 1**.: _To uniformly approximate a \(\)-smooth function, we have to know its value at \(O(/)\) points [Takezawa, 2005]. For an \(\)-optimal tax, we need to estimate \(^{*}_{f}\) with \(/F\) accuracy as the error accumulates with all the facilities. As a result, we conjecture that \(O(F^{2}/)\) sample complexity is tight and we leave the lower bound to future work._

**Remark 2**.: _Our algorithm can be easily adapted to the case where we have feedback other than only the equilibrium feedback. Specifically, when the tax designer obtain a non-equilibrium feedback, she can still update the optimal tax estimate if the feedback provides new information. It is possible for our algorithm to find the optimal tax even if no equilibrium feedback is provided. In addition, as long as the equilibrium can be reached after applying a tax, the algorithm can always find the optimal tax._

### Subroutine for Finding Exploratory Tax

In this section, we describe Algorithm 2, which can find an exploratory tax that satisfies Proposition 1. The idea is we can observe another similar but different Nash equilibrium load by perturbing the tax. However, there are two challenges:

1. Perturbing the tax might change the Nash equilibrium load drastically.
2. Perturbing the tax might not change the Nash equilibrium load at all.

To resolve the first issue, we always apply taxes that have (sub)gradient lower bounded by \(>0\). The feasible range \([l_{f},r_{f}]\) for updating tax \(^{*}_{f}\) with \((y^{t}_{f},)\) guarantees that the updated tax still maintains the subgradient lower bound. By Lemma 2, the potential function is always \(\)-strongly convex. As a result, the Nash load for any feasible tax is unique and Lipschitz w.r.t. tax perturbation. To resolve the second issue, we find the tax that makes the current Nash equilibrium on the "boundary". I.e., an additional perturbation will make the Nash equilibrium change. Intuitively, this is similar to removing the slackness in a constrained optimization problem. By Lemma 3, we can observe a different Nash load on \(f\) if we make the additional perturbation.

**Lemma 2**.: _If the subgradient of the cost function \(c_{f}\) is lower bounded by \(>0\) for all \(f\), then the potential function \(^{}(y)\) is \(\)-strongly convex. However, \((x)\) is not necessarily strongly convex._

**Lemma 3**.: _If two taxes \(\) and \(\) only differ in facility \(f\) and the Nash loads \(y\) and \(\) are different, then \(y_{f}_{f}\)._

**Definition 5**.: _The gap for a strategy \(x\) with cost \(c^{F}\) is defined as_

\[_{i}(x,c)=_{a:x_{i,a}=0}_{f:f a}c_{f}-_{a:x_{i,a}  0}_{f:f a}c_{f}.\] (3)

In the algorithm, we use \(_{i}(x,c)\) to measure the cost gap between in-support actions and off-support actions for commodity \(i\) and strategy \(x\). If \(x\) is a Nash equilibrium and \(c\) is the Nash cost, then all of the in-support actions have the same minimal cost and \(_{i}(x,c) 0\) holds. Informally, "boundary" tax \(\) means that \(_{i}(x,c+)=0\) for a Nash equilibrium \(x\) and perturbing \(\) results in \(_{i}(x,c+)<0\), so the Nash equilibrium under the perturbed tax will be different from \(x\).

Now we discuss how Algorithm 2 finds the "boundary" tax in detail. The input to the algorithm is the Nash flow \(y\), the Nash cost \(c\), the Nash tax \(\), the unknown facility set \(}\) and the feasible tax range \([l_{f},r_{f}]\) for each unknown facility \(f}\). We emphasize that here the Nash cost/tax are the values of the cost/tax function on the Nash load and they are vectors in \(^{F}\) instead of functions. \([l_{f},r_{f}]\) is the feasible range for the perturbed tax value at facility \(f\). By the definition of \(l_{f}\) and \(r_{f}\), current tax \(_{f}^{t}\) updated with \((y_{f}^{t},u),u[l_{f},r_{f}]\) is still a tax with subgradient lower bounded by \(\).

For the first step, the algorithm will compute strategy \(x^{-1}(y)\) as the Nash equilibrium strategy (Line 2). If there exists an unknown facility \(f\) and commodity \(i\) such that not all load of commodity \(i\) is using \(f\) or not using \(f\) (Line 4), then perturbing the tax at facility \(f\) will make \(x\) not longer a Nash equilibrium as in-support actions have different costs.

Otherwise, for each unknown facility \(f\) and commodity \(i\), either all of the load is using \(f\) or all of the load is not using \(f\). As a result, in-support actions always have the same cost after perturbing the tax. For the next step, we verify if there exists a tax within the feasible ranges for unknown facilities that makes \(x\) not a Nash equilibrium. However, there does not exist a universal worst-case tax that can verify if \(x\) is always a Nash equilibrium or not.

Fortunately, the worst-case tax has a closed form for each commodity separately: the taxes for facilities used by all of the Nash load would be the upper bound \(r_{f}\) and the taxes for facilities used by none of the Nash load would be the lower bound \(l_{f}\), thus maximizing the cost for in-support actions and minimizing the cost for off-support actions (Line 9). For each commodity \(i\), we apply the corresponding worst-case tax and check if the in-support actions are still the optimal actions (Line 10). If for all commodities, the in-support actions are optimal under the worst-case tax, then for any tax within the feasible range, \(y\) is the Nash load and the algorithm will output \(\) (Line 16). As \(^{*}\) is approximately within the range, \(y^{t}\) approximately minimizes the social cost (Lemma 10).

Otherwise, the algorithm finds commodity \(i\) such that \(x\) is not the Nash equilibrium under the worst-case tax (Line 11). For the last step, we gradually transform the initial tax to this worst-case tax and stop when \(x\) is not the Nash equilibrium for some commodity. Specifically, the algorithm iteratively changes the tax in the unknown facility set \(}=}_{i}}_{i}^{}\) (Line 19 and Line 27) to the worst-case tax.

For facility \(f}_{i}\), the algorithm finds the boundary tax for facility \(f\) that satisfies

\[u=*{argmax}_{u}\{u:_{j}(x,c+^ {u}) 0, j[m]\}.\]

If \(u r_{f}\), we will output \(^{u},f,1\). By the definition of \(u\), if we further increase \(u\), one of the gaps will become negative and \(x\) is no longer the Nash equilibrium. Otherwise, all feasible taxes for \(f\) have a nonnegative gap for all commodities, which means \(x\) is still the Nash equilibrium, and we continue for the next facility. After enumerating all the facilities in \(}_{i}\), we enumerate \(}_{i}^{}\) in the same way. Eventually, the tax is transformed into the worst-case tax with negative gap for commodity \(i\), so this process will end and output \(^{u},f,\) such that \(^{u}\) is the tax that makes the Nash equilibrium on the boundary, \(f\) is the facility to perturb and \(\) is the direction to perturb the tax at \(f\).

## 6 Conclusion

We proposed the first algorithm with polynomial sample complexity for learning optimal tax in nonatomic congestion games. The algorithm leverages several novel designs to exploit the special structure of congestion games, which can also be implemented efficiently. Below we list a few potential future research directions:

1. Relaxing the Nash equilibrium assumption to players following no-regret dynamics or quantal response equilibrium.
2. Design algorithms that do not require prior knowledge of the smoothness coefficient.
3. Generalize the algorithm to atomic congestion games.

## 7 Acknowledgement

SSD acknowledges the support of NSF IIS 2110170, NSF DMS 2134106, NSF CCF 2212261, NSF IIS 2143493, NSF CCF 2019844, and NSF IIS 2229881. MF acknowledges the support of NSF awards CCF 2007036, TRIPODS II DMS 2023166, CCF 2212261, and CCF-AF 2312775.