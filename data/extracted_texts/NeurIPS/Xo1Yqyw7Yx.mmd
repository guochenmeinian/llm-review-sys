# Enabling Adaptive Agent Training

in Open-Ended Simulators

by Targeting Diversity

Robby Costales Stefanos Nikolaidis

Department of Computer Science

University of Southern California

Correspondence to rscostal@usc.edu.

###### Abstract

The wider application of end-to-end learning methods to embodied decision-making domains remains bottlenecked by their reliance on a superabundance of training data representative of the target domain. Meta-reinforcement learning (meta-RL) approaches abandon the aim of zero-shot _generalization_--the goal of standard reinforcement learning (RL)--in favor of few-shot _adaptation_, and thus hold promise for bridging larger generalization gaps. While learning this meta-level adaptive behavior still requires substantial data, efficient environment simulators approaching real-world complexity are growing in prevalence. Even so, hand-designing sufficiently diverse and numerous simulated training tasks for these complex domains is prohibitively labor-intensive. Domain randomization (DR) and procedural generation (PG), offered as solutions to this problem, require simulators to possess carefully-defined parameters which directly translate to meaningful task diversity--a similarly prohibitive assumption. In this work, we present **DIVA**, an evolutionary approach for generating diverse training tasks in such complex, open-ended simulators. Like unsupervised environment design (UED) methods, DIVA can be applied to arbitrary parameterizations, but can additionally incorporate realistically-available domain knowledge--thus inheriting the _flexibility_ and _generality_ of UED, and the supervised _structure_ embedded in well-designed simulators exploited by DR and PG. Our empirical results showcase DIVA's unique ability to overcome complex parameterizations and successfully train adaptive agent behavior, far outperforming competitive baselines from prior literature. These findings highlight the potential of such _semi-supervised environment design_ (SSED) approaches, of which DIVA is the first humble constituent, to enable training in realistic simulated domains, and produce more robust and capable adaptive agents. Our code is available at https://github.com/robbycostales/diva.

## 1 Introduction

Despite the broadening application of reinforcement learning (RL) methods to real-world problems , generalization to _new scenarios_--ones not explicitly supported by the training set--remains a fundamental challenge . Meta-reinforcement learning (meta-RL), an extension of the RL framework, is formulated specifically for training _adaptive agents_, and is thus well-suited for overcoming these generalization gaps . One recent work has demonstrated that meta-RL agents can be trained at scale to achieve adaptation capabilities on par with human subjects . However, learning this human-like adaptive behavior naturally requires a large amount of data representative of the downstream (or _target_) distribution. For task distributions approaching real-world complexity--precisely the ones of interest--designing each scenario by hand is prohibitively expensive.

Prior works have explored the use of domain randomization (DR) and procedural generation (PG) techniques to produce diverse training data for learning agents . Despite eliminating the need for hand-designing each task individually, human labor is still required to carefully design an environment generator that can produce diverse, high-quality tasks. As environments become more complex and open-ended, the ability to hand-design such a robust generator becomes increasingly infeasible. Some methods, like PLR , attempt to ameliorate this limitation by learning a curriculum over the generated levels, but these works still operate under the assumption that the generator produces meaningfully diverse levels with a high probability.

Unsupervised environment design (UED)  are a broad class of appproaches which use performance-based metrics to adaptively form a curriculum of training levels. ACCEL , a state-of-the-art UED method, uses an evolutionary process to discover more interesting regions of the simulator's parameter space (i.e. appropriately challenging tasks) than can be found by random sampling. While UED approaches are designed to be generally applicable and require little domain knowledge, they implicitly require a very constrained environment generator--one in which all axes of difficulty correspond to meaningful learning potential for the downstream distribution. Moreover, when faced with complex open-ended environments with arbitrary parameterizations, even ACCEL is not able to efficiently explore the solution space, as it is still bottlenecked by the speed of agent evaluations.

In this work, we introduce **D1VA**, an approach for generating diverse training tasks in open-ended simulators to train adaptive agents. By using quality diversity (QD) optimization to efficiently explore the solution space, DIVA bypasses the problem of needing to evaluate agents on all generated levels. QD also enables fine-grained control over the axes of diversity to be captured in the training tasks, allowing the flexible integration of task-related prior knowledge from both domain experts and learning approaches. We demonstrate that DIVA, with limited supervision in the form of feature samples from the target distribution, significantly outperforms state of the art UED approaches--despite the UED approaches being provided with significantly more interactions. We further show that UED techniques can be integrated into DIVA. Preliminary results with this combination (which we call DIVA+) are promising, and suggest an exciting avenue for future work.

## 2 Preliminaries

Meta-reinforcement learning.We use the meta-reinforcement learning (meta-RL) framework to train adaptive agents, which involves learning an adaptive policy \(_{}\) over a distribution of tasks \(\)

Figure 1: Highly _structured_ environment simulators assume access to parameterizations \(E_{}()\) for which random seeds \(_{i}\)_directly_ produce meaningfully diverse features (e.g. Racing tracks with challenging turns). Open-ended environments with flexible, _unstructured_ parameterizations \(E_{}()\)—though enabling more complex _emergent_ features—lack direct control over high-level features of interest. We introduce **DIVA**, an approach that effectively creates a more workable parameterization \(E_{}()\) by evolving levels beyond the minimally diverse population from \(E_{}()\). By training on these discovered levels, DIVA enables superior performance on downstream tasks.

Each \(_{i}\) is a Markov decision process (MDP) defined by a tuple \(,,P,R,,T\), where \(\) is the set of states, \(\) is the set of actions, \(P(s_{t+1}|s_{t},a_{t})\) is the transition distribution between states given the current state and action, \(R(s_{t},a_{t})\) is the reward function, \(\) is the discount factor, and \(T\) is the horizon. Meta-training involves sampling tasks \(_{i}\), collecting trajectories \(=\{^{h}\}_{h=0}^{H}\)--where \(H\) is the number of _episodes_ in each _trial_\(\) pertaining to the \(_{i}\)--and optimizing policy parameters \(\) to maximize the expected discounted returns across all episodes.

VariBAD  is a context variable-based meta-RL approach which belongs to the wider class of RNN-based methods [11; 12]. While prior methods [13; 14] also use context variables to assist in task adaptation, VariBAD uniquely learns within a belief-augmented MDP (BAMDP) \(,,,P,R,,T\) where the context variables \(z\) encodes the agent's uncertainty about the task, promoting Bayesian exploration. VariBAD utilizes an RNN-based variational autoencoder (VAE) to model a posterior belief over possible tasks given the full agent trajectory, permitting efficient updates to prior beliefs.

Quality diversity.For a given problem, quality diversity (QD) optimization framework aims to generate a set of diverse, high-quality solutions. Formally, a problem instance of QD  specifies an objective function \(J:^{n}\) and \(k\) features \(f_{i}:^{n}\). Let \(S=(^{n})\) be the feature space formed by the range of \(f\), where \(:^{n}^{k}\) is the joint feature vector. For each \( S\), the QD objective is to find a solution \(^{n}\) where \(()=\) and \(J()\) is maximized. Since \(^{k}\) is continuous, an algorithm solving the QD problem definition above would require unbounded memory to store all solutions. QD algorithms in the MAP-Elites  family therefore discretize \(S\) via a tessellation method, where \(\) is a tessellation of the continuous feature space \(S\) into \(N_{}\) cells. In employing a MAP-Elites algorithm, we relax the QD objective to find a set of solutions \(_{i},i\{1,,N_{}\}\), such that each \(_{i}\) occupies one unique cell in \(\). We call the occupants \(_{i}\) of all \(M\) cells, each with its own position \((_{i})\) and objective value \(J(_{i})\), the _archive_ of solutions.

## 3 Problem setting

One assumption underlying UED methods is that random parameters--or parameter _perturbations_ for ACCEL --produce meaningfully different levels to justify the expense of computing objectives on _each_ newly generated level. However, when the genotype is not _well-behaved_--when meaningful diversity is rarely generated through random sampling or mutations--these algorithms waste significant time evaluating redundant levels. In our work, we discard the assumption of well-behaved genotypes in favor of making fewer, more realistic assumptions about complex environment generators. There are several assumptions we make about the simulated environments DIVA has access to.

Genotypes.We assume access to an unstructured environment parameterization function \(E_{U}()\), where each \(\) is a _genotype_ (corresponding to the QD solutions \(_{i}\)) describing parameters to be fed into the environment generator. QD algorithms can support both continuous and discrete genotype spaces, and in this work we evaluate on domains with both kinds. Crucially, we make no assumption of the _quality_ of the training tasks produced by this random generator. We only assume that (1) there is some nonzero (and for practical purposes, nontrivial) probability that this generator will produce a _valid_ level for training--one in which success is possible and positive rewards are in reach; and (2) that it is computationally feasible to discover meaningful feature diversity through an intelligent search over the parameter space--an assumption implicit in all QD applications.

Figure 2: **DIVA archive updates** on **Alchemy**. The _first stage_ (a) begins with bounds that encapsulate initial solutions, and the target region. As the first stage progresses (b), and QD discovers more of the solution space, the sampling region for the emitters gradually shrinks towards the target region. The _second stage_ begins by redefining the archive bounds to be the target region and including some extra feature dimensions (c). QD fills out just the target region now (d), using sample weights from the target-derived prior (e), the same distribution used to sample levels during meta-training.

Features.We assume access to a pre-defined set of features, \(S=(^{n})\), that capture axes of diversity which accurately characterize the diversity to be expected within the downstream task distribution. It is also possible to learn or select good environment features from a sample of tasks from the downstream distribution, which we discuss in Section 7. For the sake of simplicity, we use a _grid archive_ as our tessellation \(\), where the \(k\) dimensions of the discrete archive correspond to the defined features. The number of bins for each feature is a hyperparameter, and can be learned or adapted over the course of training. We generally find it to be helpful to use moderately high resolutions to ease the search, since smaller leaps in feature-level diversity are required to uncover new cells. By default, we use 100 sample feature values across all domains, but demonstrate in ablation studies that that significantly fewer may be used (see Appendix C).

## 4 Diva

DIVA assumes access to a small set of feature samples representative of the target domain. It does not, however, require access to the underlying levels themselves. This is a key distinction, as the former is a significantly weaker assumption. Consider the problem of training in-home assistive robots in simulation with the objective of adapting to real-world houses. It is more likely we have access to publicly available data describing typical houses--dimensions, stylistic features, etc.--than we have access to corresponding simulator parameters which produce those exact feature values.

Feature density estimation.DIVA begins by constructing a QD archive with appropriate _bounds_ and _resolution_. Given a set of specified _features_\(\{f_{i}\}^{k}\) and a handful of downstream _feature samples_, we first infer each feature's underlying distribution. These can be approximated with kernel density estimation (KDE), or we can work with certain families of parameterized distributions. For our experiments, we assume each feature is either (independently) normally or uniformly distributed. We use a statistical test2 to evaluate the fit of each distribution family, and select the best-fitting. Setting the resolution for discrete feature dimensions is straightforward, and depends only on the range. For continuous features, the resolution should enable enough signal for discovering new cells, while avoiding practical issues that arise with too many cells3. See Section 5 for domain-specific details.

Two-stage QD updates.Once the feature-specific target distributions are determined, we can use these to set bounds for each archive dimension. A naive approach would be to set the archive ranges for each feature based on the confidence bounds of the target distribution. However, random samples from \(E_{}\) may not produce feature values that fall within the target range. We found this to be a major issue in the Alchemy domain (see Figure 2), and for some features in Racing. We solve this problem by setting the initial archive bounds to include both randomly generated samples from \(E_{}\), as well as the full target region. As the updates progress, we gradually update the _sample mask_--which is used to inform the sampling of new solutions--towards the target region. We observe empirically that updating and applying this mask provides an enormous speed-up in guiding solutions towards the target region (see Figure 15). After this first stage, solutions are inserted into a new archive defined by the proper target bounds. See Appendix A for more specifics on these two QD update stages.

Overview.DIVA consists of three stages. Stage 1 (S1) begins by initializing the archive with bounds that include both the downstream feature samples (the _target region_), as well as the initial population generated from \(E_{U}()\). S1 then proceeds with alternating _QD updates_, to discover new solutions, and _sample mask updates_, to guide the population towards the target region. In Stage 2 (S2), the archive is reinitialized with existing solutions, but is now bounded by the target region. QD updates continue to further diversify the population, now targeting the downstream feature values specifically. The last stage is standard meta-training, where training task parameters are now drawn from \(P_{}()\), a distribution over the feature space approximated using the downstream feature samples, discretized over the archive cells. See Appendix A for _detailed_ pseudocode.

Empirical results

Baselines.We implement the following baselines to evaluate their relative performance to **DIVA**. **ODS** is the "oracle" agent trained over the downstream environment distribution \(E_{}()\), used for evaluation. With this baseline, we are benchmarking the upper bound in performance from the perspective of a learning algorithm that has access to the underlying data distribution.4\(}\) is the meta-learner trained over a task distribution defined by performing domain randomization over the space of valid genotypes, \(\), under the training parameterization, \(E_{}()\). Robust PLR (\(}^{}_{}\))  is the improved and theoretically grounded version of PLR , where agents' performance-based PLR objectives are evaluated on each level _before_ using them for training. **ACCEL** is the same as PLR\({}^{}\) but instead of randomly sampling over the genotype space to generate levels for evaluation, levels are mutated from existing solutions. All baselines use VariBAD  as their base meta-learner.

Experimental setup.The oracle agent (ODS) is first trained over the each environment's downstream distribution to tune VariBAD's hyperparameters. These environment-specific VariBAD settings are then fixed while hyperparameters for DIVA and the other baselines are tuned. For fairness of comparison--since DIVA is allowed \(N_{}\) QD update steps to fill its archive before meta-training--we allow each UED approach (PLR\({}^{}\) and ACCEL) to use significantly more environment steps for agent evaluations (details discussed below per environment). All empirical results were run with 5 seeds unless otherwise specified, and error bars indicate a 95% confidence region for the metric in question. The QD archive parameters were set per environment, and for Alchemy and Racing, relied on some hand-tuning to find the right combinations of features and objectives. We leave it to future work to perform a deeper analysis on what constitutes good archive design, and how to better automate this process.

### GridNav

Our first evaluation domain is a modified version of GridNav (Figure 3), originally introduced to motivate and benchmark VariBAD . The agent spawns at the center of the grid at the start of each episode, and receives a slight negative reward \((r=-0.1)\) each step until it discovers (inhabits) the goal cell, at which point it also receives a larger positive reward \((r=1.0)\).

Parameterization.We parameterize the task space (i.e. the goal location) to reduce the likelihood of generating meaningfully diverse goals. Specifically, each \(E_{_{k}}\) (or \(E_{k}\)) introduces \(k\) genes to the solution genotype which together define the final \(y\) location. Each gene \(j\) can assume the values \(_{j}\{-1,0,1\}\), and the final \(y\) location is determined by summing these values, and performing a floor division to map the bounds back to the original range of the grid. As \(k\) increases, \(y\) values are increasingly biased towards \(0\), as shown on the right side of Figure 3. For more details on the GridNav domain, see Appendix B.1.

QD updates.We define the archive features to be the \(x\) and \(y\) coordinates of the goal location. The objective is set to the current iteration, so that newer solutions are prioritized (additional details in Appendix B.1). DIVA is provided \(N_{}=8.0 10^{4}\) (\(N_{}=0\)) QD update iterations for filling the archive. To compensate, PLR\({}^{}\) and ACCEL are each provided with an additional \(9.6 10^{6}\) environment steps for evaluating PLR scores, which amounts to three times as many total interactions--since all methods are provided \(N_{E}=4.8 10^{6}\) interactions for training. If each "reset" call counts as one environment step5, the UED baselines are effectively granted 2.4\(\) more _additional_ step data than what DIVA additionally receives through its QD updates (details in Appendix E.1).

Results.From Figure 3(a), we see that increasing genotype complexity (i.e. larger \(k\)) reduces goal diversity for DR--which is expected given the parameterization defined for \(E_{}\). We can also see that DIVA, as a result of its QD updates, can effectively capture goal diversity, even as complexity

Figure 3: Left: A **GridNav** agent attempting to locate the goal across two episodic rollouts. Right: The marginal probability of sampled goals inhabiting each \(y\) for different complexities \(k\) of \(E_{k}()\).

increases. When we fix the complexity (\(k=24\)) and train over the \(E_{}\) distribution, we see that the UED approaches are _unable_ to incidentally discover and capture diversity over the course of training (Figure 3(b)). DIVA's explicit focus on capturing meaningful level diversity enables it to significantly outperform these baselines in terms of episodic return (Figure 3(c)) and success rate (Figure 3(d)).

### Alchemy

Alchemy is an artificial chemistry environment with a combinatorially complex task distribution. Each task is defined by some _latent chemistry_, which influences the underlying dynamics, as well as agent observations. To successfully maximize returns over the course of a trial, the agent must infer and exploit this latent chemistry. At the start of each episode, the agent is provided a new set of (1-12) _potions_ and (1-3) _stones_, where each stone has a _latent state_ defined by a specific vertex of a cube, i.e. \((\{0,1\},\{0,1\},\{0,1\})\), and each poison has a _latent effect_, or specific manner in which it transforms stone latent states (see Figure 4(a)). The agent observes only _salient_ artifacts of this latent information, and must use interactions to identify the ground-truth mechanics. At each step, the agent can apply any remaining option to any remaining stone. Each stone's _value_ is maximized the closer its latent state is to \((1,1,1)\), and rewards are produced when stones are cast into the _cauldron_.

To make training feasible on academic resources, we perform evaluations on the _symbolic_ version of Alchemy, as opposed to the full Unity-based version. Symbolic Alchemy contains the same mechanistic complexity, minus the visuomotor challenges which are irrelevant to this project's aims.

Parameterization.\(E_{}()\) is the downstream distribution containing maximal stone diversity. For training, implement \(E_{_{k}}\) where \(k\) controls the level of difficulty in generating diverse stones. Specifically, we introduce a larger set of coordinating genes \(_{j}\{0,1\}\) that together specify the initial stone latent states, similar to the mechanism we used in GridNav to limit goal diversity. Each stone latent coordinate is specified with \(k\) genes, and only when all \(k\)_genes_ are set to \(1\) is the _latent coordinate_ is set to \(1\). When _any_ of the genes are \(0\), the latent coordinate is 0. For our experiments we set \(k=8\), and henceforth use \(E_{}\) to signify \(E_{_{8}}\).

QD updates.We use features LatentStateDiversity and ManhattanToOptimal --both of which target stone latent state diversity from different angles. See Appendix B.2 for more specifics on these features and other details surrounding Alchemy's archive construction. Like GridNav, the objective is set to bias new solutions. DIVA is provided with \(N_{}=8.0 10^{4}\) and \(N_{}\)\(=3.0 10^{4}\) QD update iterations. \(^{}\) and ACCEL are compensated such that they receive 3.5\(\) more _additional_ step data than what DIVA receives via QD updates (see Appendix E.1 for details).

Results.Our empirical results demonstrate that DIVA is able to generate latent stone states with diversity representative of the target distribution. We see this both quantitatively in Figure 4(b), and qualitatively in Figure 6. In Figure 4(c), we see this diversity translates to significantly better results

Figure 4: **GridNav analysis and results.** (a) Target region coverage produced by DIVA and DR over different genotype complexities \(k\). DR represents the _average_ coverage of batches corresponding to the size of the QD archive. \(^{*}\) represents the _total number_ of unique levels discovered over the course of parameter randomization steps which equal in number to the additional environments \(^{}\) is provided for evaluation. \(^{*}\) is thus an upper bound on the diversity that \(^{}\) can capture. 500k iterations (QD or otherwise) are used across all results. (b) The diversity produced by \(^{}\) and ACCEL over the course of training (later updates omitted due to no change in trend). (c) Final episode return curves for DIVA and baselines. (d) Final method success rates across each episode.

on \(E_{}\) over baselines. Despite generating roughly as many unique _genotypes_ as DIVA (Figure 5d), \(^{}\) and ACCEL are unable to generate training stone sets of significant _phenotypical_ diversity to enable success on the downstream distribution.

### Racing

Lastly, we evaluate DIVA on the Racing domain introduced by . In this environment, the agent controls a race car via simulated steering and gas pedal mechanisms, and is rewarded for efficiently completing the track, \(_{i}\). We adapt this RL environment to the meta-RL setting by lowering the resolution of the observation space significantly. By increasing the challenge of perception, even competent agents benefit from multiple episodes to better understand the underlying track. For all of our experiments, we use \(H=2\) episodes per trial, and a flattened \(15 15\) pixel observation space.

Setup.We use three different parameterizations in our experiments: (1) \(E_{}()\) is the downstream distribution we use for evaluating all methods, training ODS, and setting archive bounds for DIVA. Parameters \(\) are used to seed the random generation of _control points_ which in turn parameterize a sequence of Bezier curves designed to smoothly transition between the control locations. Track diversity is further enforced by rejecting levels with control points that possess a standard deviation below a certain threshold. (2) \(E_{_{k}}()\) is a reparameterization of \(E_{}()\) that makes track diversity harder to generate, with the difficulty proportional to the value of \(k\). For our experiments, we use \(k=32\) (which we will denote simply as \(E_{}()\)), which roughly means that meaningful diversity is 32\(\) less likely to randomly occur than when \(k=1\) (which is equivalent to \(E_{}()\)). This is achieved by defining a small region in the center, 32 (or \(k\), in general) times smaller than the track boundaries, where all points outside the region are projected onto the unit square, and scaled to the track size. (3) \(E_{}()\) uses \(\) as an RNG seed to select between a set of 20 hand-crafted levels official Formula-1 tracks , and is used to benchmark DIVA's zero-shot generalization to a new target distribution.

QD updates.We define features TotalAngleChanges (tac) and CenterOfMassX (cx) for the archive dimensions. Levels from \(E_{}\) lack curvature (see Figure 8) so tac, which is defined as the sum of angle changes between track segments, is useful for directly targeting this desired curvature.

Figure 5: **Alchemy environment and results.** (a) A visual representation of Alchemy’s structured stone latent space. \(P_{1}\) and \(P_{2}\) represent _potions_ acting on stones. Only \(P_{1}\) results in a latent state change, because \(P_{2}\) would push the stone outside of the valid latent lattice. (b) Marginal feature distributions for \(E_{}\) (the structured target distribution), DIVA, and \(E_{}\) (the unstructured distribution used directly for DR, and to initialize DIVA’s archive). (c) Final episode return curves for DIVA and baselines. (d) Number of unique genotypes used by each method over the course of meta-training.

Figure 6: **Alchemy level diversity.** Early on in DIVA’s QD updates (left), the levels in the archive do not posses much latent stone diversity—all are close to \((1,1,1)\). As samples begin populating the target region in later QD updates (right), we see stone diversity is significantly increased.

cx, or the average location of the segments, targets diversity in the location of these high-density (high-curvature) regions. We compute an _alignment_ objective over features CenterOrMassY and VarianceY to further target downstream diversity. See Appendix B.3 for more details relevant to the archive construction process for Racing. DIVA is provided with \(2.5 10^{5}\) initial QD updates on Racing. PLR\({}^{}\) and ACCEL are compensated with 4.0\(\) more _additional_ step data than what DIVA receives through QD updates (see Appendix E.1 for more details).

Main results.Results are shown in Figure 7. DIVA outperforms all baselines, including the UED approaches, which have access to three times as many environment interactions. From Figure 8, we see that final DIVA levels contain significantly more diversity than randomization over \(E_{}\).

Transfer to F1 tracks.Next, we evaluate the ability of these trained policies to zero-shot transfer to human-designed F1 levels , \(E_{}\). Though qualitative differences are apparent (see Figure 9), from Figure (a)a we can additionally see how these levels differ quantitatively. Even though DIVA uses feature samples from \(E_{}\) to define its archive, we see from the results in Figure 9 that DIVA is not only able to complete many of these tracks, but is also able to significantly outperform ODS. This result may seem unlikely, given that DIVA bases its axes of diversity on \(E_{}\). One possible explanation is that while DIVA successfully matches its TotalAngleChanges distribution to \(E_{}\) (see Figure 7), because it is less likely for all 12 control points to be mutated to the diversity-enabling region than just a few control points with sharp angles, DIVA "opts" for the latter, and thus produces fewer, _sharper_ angles, which is evidently useful for transferring to (_these_) human-designed tracks. This hypothesis matches what we see qualitatively from the DIVA-produced levels in Figure 8.

Figure 8: **Racing level diversity. We see that random \(E_{}\) levels, used by DR, and which form the initial population of DIVA, are unable to produce qualitatively diverse tracks (left). After the two-stage QD-updates, DIVA is able to produce tracks of high qualitative diversity (right).**

Figure 7: **Racing features and main results. Left: Marginal feature distributions for \(E_{}\) (target distribution), \(E_{}\) (human-designed F1 tracks), DIVA, and \(E_{}\) (the unstructured distribution used for DR, the original levels that DIVA evolves)—cropped for readability. Center: Final episode return curves for DIVA and baselines on \(E_{}\). Right: Track completion rates by method, evaluated on \(E_{}\).**

Figure 9: Sample F1 levels (top), and track completion rates by methods targeting \(E_{}\), evaluated on \(E_{}\) (bottom).

Combining DIVA and UED.While \(^{}\) and ACCEL struggle on our evaluation domains, they still have utility of their own, which we hypothesize may be compatible with DIVA's. As a preliminary experiment to evaluate the potential of such a combination, we introduce **DIVA+**, which still uses DIVA to generate diverse training samples via QD, but additionally uses \(^{}\) to define a new distribution over these levels based on approximate learning potential. Instead of randomly sampling levels from \(E_{}\), the \(^{}\) evaluation mechanism samples levels from the DIVA-induced distribution over the archive. We perform experiments on two different archives generated by DIVA: (1) an archive that is slightly misspecified (see Appendix B.3 for details), and (2) the archive used in our main results. From Figure 10, we see that while performance does not significantly improve for (2), the combination of DIVA and \(^{}\) is able to significantly improve performance on (1), and even statistically match the original DIVA results. These results highlight the potential of such hybrid (QD+UED) semi-supervised environment design (SSED) approaches, a promising area for future work.

## 6 Related work

Meta-reinforcement learning.Meta-reinforcement learning methods range from gradient-based approaches (e.g. MAML) , RNN context-based approaches [12; 11] (e.g. RL\({}^{2}\)), and the slew of emerging works utilizing transformers [20; 5; 21]. We use VariBAD , a state-of-the-art context variable-based approach that extends \(^{2}\) by using variational inference to incorporate task uncertainty into its beliefs. HyperX , an extension that uses reward-bonuses, was not found to improve performance on our domains. In each of these works, the training distribution is given; none address the problem of generating diverse training scenarios in absence of such a distribution.

Procedural environment generation.Procedural (content) generation (PCG / PG)  is a vast field. Many RL and meta-RL domains themselves have PG baked-in (e.g. ProcGen , Meta-World, , Alchemy , and XLand ). Each of these works rely on human engineering to produce levels with meaningfully diverse features. A related stream of works apply scenario generation to robotics--some works essentially perform PCG [25; 26], while others integrate more involved search mechanics [27; 28; 29; 30]. One prior work  defines a formal but generic parameterization for applying PG to generate meta-RL tasks. It is yet to be shown, however, if such an approach can scale to domains with vastly different dynamics, and greater complexity.

Unsupervised environment design.UED approaches--which use behavioral metrics to automatically define and adapt a curriculum of suitable tasks for agent training--form the frontier of research on open-endedness. The recent stream of open-ended agent/environment co-evolution works (e.g. [32; 33; 34]) was kickstarted by the POET [35; 36] algorithm. The "UED" term itself originated in PAIRED , which uses the performance of an "antagonist" agent to define the curriculum for the main (protagonist) agent. PLR  introduces an approach for weighting training levels based on \(^{}\), which only trains on levels that have been previously evaluated, and thus enabling certain theoretical robustness guarantees. AdA  uses PLR as a cornerstone of their approach for generating diverse training levels for adaptive agents in a complex, open-ended task space. ACCEL  borrows \(^{}\)'s scoring procedure, but the best-performing solutions are instead mutated, so the buffer not only collects and prioritizes levels of higher learning potential, but _evolves_ them. We use ACCEL as our main baseline because it has demonstrated state-of-the art results on relevant domains, and like DIVA, evolves a population of levels. The main algorithmic differences between ACCEL and DIVA are that ACCEL (1) performs additional evaluation rollouts to produce scores during training and (2) uses a 1-d buffer instead of DIVA's multi-dimensional archive. \(^{}\) serves as a secondary baseline in this work; its non-evolutionary nature makes it a useful comparison to DR.

Scenario generation via QD.A number of recent works apply QD to simulated environments in order to generate diverse scenarios, with distinct aims. Some works, like DSAGE , uses QD to develop diverse levels for the purpose of probing a pretrained agent for interesting behaviors. In another line of work applies QD to human-robot interaction (HRI), and ranges from generating

Figure 10: **DIVA+ results compared to DIVA, for (1) misspecified, and (2) well-specified archives, evaluated on \(E_{}\).**

diverse scenarios , to finding failure modes in shared autonomy systems  and human-aware planners . DIVA's application of QD inspired by these approaches, as they produce meaningfully diverse environment scenarios, but no prior work exists which applies QD to define a task distribution for agent _training_, much less _adaptive_ agent training, or overcoming difficult parameterizations in open-ended environments.

## 7 Discussion

The present work enables adaptive agent training on open-ended environment simulators by integrating the _unconstrained_ nature of unsupervised environment design (UED) approaches, with the implicit _supervision_ baked into procedural generation (PG) and domain randomization (DR) methods. Unlike PG and DR, which requires domain knowledge to be carefully incorporated into the environment generation process, DIVA is able to _flexibly_ incorporate domain knowledge, and can discover _new_ levels representative of the downstream distribution. And instead of relying on behavioral metrics to infer a general, ungrounded form of "learning potential", like UED--which becomes increasingly unconstrained and therefore less useful a signal as environments become more complex and open-ended--DIVA is able to _directly_ incorporate downstream feature samples to target specific, _meaningful_ axes of diversity. With only a handful of downstream feature samples to set the parameters of the QD archive, our experiments (Section 5) demonstrate DIVA's ability to outperform competitive baselines compensated with three times as many environment steps during training.

In its current form, the most obvious limitation of DIVA is that, in addition to assuming access to downstream feature samples, the axes of diversity themselves must be specified. However, we imagine these axes of diversity could be learned automatically from a set of sample levels, or selected from a larger set of candidate features; it may be possible to adapt existing QD works to automate this process in related settings . The present work also lacks a more thorough analysis of what constitutes good archive design. While some amount of heuristic decision-making is unavoidable when applying learning algorithms to specific domains, a promising future direction would be to study how to approach DIVA's archive design from a more algorithmic perspective.

DIVA currently performs QD iterations over the environment parameter space defined by \(E_{U}()\), where each component of the genotype \(\) represents some _salient_ input parameter to the simulator. Prior works in other domains (e.g. ) have demonstrated QD's ability to explore the latent space of generative models. One natural direction for future work would therefore be to apply DIVA to _neural_ environment generators (rather than _algorithmic_ generators), where \(\) would instead correspond to the latent input space of the generative model. If the latent space of these models is more convenient to work with than the raw environment parameters--e.g. due to greater smoothness with respect to meaningful axes of diversity--this may help QD more efficiently discover samples within the target region. Conversely, DIVA's ability to discover useful regions of the parameter space means these neural environment generators do not need to be "well-behaved", or match a specific target distribution. Since these generative models are also likely to be differentiable, DIVA can additionally incorporate gradient-based QD works (e.g. DQD ) to accelerate its search.

Preliminary results with DIVA+ demonstrate the additional potential of combining UED and DIVA approaches. The F1 transfer results (i.e. DIVA outperforming ODS trained directly on \(E_{}\)) further suggest that agents benefit from flexible incorporation of downstream knowledge. In future work, we hope to study more principle integrations of UED and DIVA-like approaches, and to more generally explore this exciting new area of semi-supervised environment design (SSED).

More broadly, now equipped with DIVA, researchers can develop more general-purpose, open-ended simulators, without concerning themselves with constructing convenient, well-behaved parameterizations. Evaluations in this work required constructing our own contrived paramterizations, since domains are rarely released without carefully designed parameterizations. It is no longer necessary to accomodate the assumption made my DR, PG, and UED approaches--that either randomization over the parameter space should produce meaningful diversity, or that all forms of level difficulty ought to correspond to meaningful learning potential. So long as diverse tasks are _possible_ to generate, even if sparsely distributed within the paramter space, QD may be used to discover these regions, and exploit them for agent training. Based on the promising empirical results presented in this work, we are hopeful that DIVA will enable future works to tackle even more complicated domains, and assist researchers in designing more capable and behaviorally interesting adaptive agents.

Reproducibility statement

The source code, along with thorough documentation for reproducing each result in this paper, is publicly available on Github6. Even without this code, researchers should be able to fully reproduce the algorithm from the details in the main body, the pseudocode provided in Appendix A, and training details (hyperparameters and hardware information) provided in Appendix E.

## 9 Ethics statement

Like all fundamental technologies, this work has the potential to be misapplied for malicious purposes. The authors do not believe, however, that the methods introduced in this work present a significant or unique risk for misuse or abuse. The authors intend for DIVA to be applied to use-cases that have the best interests of humanity (including concern for the earth and other sentient creatures) at heart.

## 10 Acknowledgements

This work was partially supported by NSF CAREER (#2145077) and the DARPA EMHAT project. We thank Tjanaka et al., the developers of pyribs , whose library served as the basis for our QD implementations. We thank Zintgraf et al., the authors of VariBAD , whose codebase served as the basis for our meta-RL agent. We thank Jiang et al. and Parker-Holder et al., the authors of PLR  and ACCEL , respectively, for their implementations which served as the basis for our UED baselines. We specifically thank Minqi Jiang for answering questions related to the PLR codebase in the early stages of development, and Varun Bhatt for helpful discussion at various stages of this work.