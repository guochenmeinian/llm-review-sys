# Encoding Time-Series Explanations through Self-Supervised Model Behavior Consistency

Owen Queen

Harvard University

owen_queen@hms.harvard.edu

&Thomas Hartvigsen

University of Virginia, MIT

hartvigsen@virginia.edu

&Teddy Koker

MIT Lincoln Laboratory

thomas.koker@ll.mit.edu

&Huan He

Harvard University

huan_he@hms.harvard.edu

&Theodoros Tsiligkaridis

MIT Lincoln Laboratory

tsili@ll.mit.edu

&Marinka Zitnik

Harvard University

marinka@hms.harvard.edu

###### Abstract

Interpreting time series models is uniquely challenging because it requires identifying both the location of time series signals that drive model predictions and their matching to an interpretable temporal pattern. While explainers from other modalities can be applied to time series, their inductive biases do not transfer well to the inherently challenging interpretation of time series. We present TimeX, a time series consistency model for training explainers. TimeX trains an interpretable surrogate to mimic the behavior of a pretrained time series model. It addresses the issue of model faithfulness by introducing _model behavior consistency_, a novel formulation that preserves relations in the latent space induced by the pretrained model with relations in the latent space induced by TimeX. TimeX provides discrete attribution maps and, unlike existing interpretability methods, it learns a latent space of explanations that can be used in various ways, such as to provide landmarks to visually aggregate similar explanations and easily recognize temporal patterns. We evaluate TimeX on eight synthetic and real-world datasets and compare its performance against state-of-the-art interpretability methods. We also conduct case studies using physiological time series. Quantitative evaluations demonstrate that TimeX achieves the highest or second-highest performance in every metric compared to baselines across all datasets. Through case studies, we show that the novel components of TimeX show potential for training faithful, interpretable models that capture the behavior of pretrained time series models.

## 1 Introduction

Prevailing time series models are high-capacity pre-trained neural networks [1; 2], which are often seen as black boxes due to their internal complexity and lack of interpretability . However, practical use requires techniques for auditing and interrogating these models to rationalize their predictions. Interpreting time series models poses a distinct set of challenges due to the need to achieve two goals: pinpointing the specific _location_ of time series signals that influence the model's predictions and aligning those signals with _interpretable temporal patterns_. While explainers designed for other modalities can be adapted to time series, their inherent biases can miss important structures in time series, and their reliance on isolated visual interpretability does not translate effectively tothe time series where data are less immediately interpretable. The dynamic nature and multi-scale dependencies within time series data require temporal interpretability techniques.

Research in model understanding and interpretability developed _post-hoc_ explainers that treat pretrained models as black boxes and do not need access to internal model parameters, activations, and gradients. Recent research, however, shows that such _post-hoc_ methods suffer from a lack of faithfulness and stability, among other issues . A model can also be understood by investigating what parts of the input it attends to through attention mapping  and measuring the impact of modifying individual computational steps within a model . Another major line of inquiry investigates internal mechanisms by asking what information the model contains . For example, it has been found that even when a language model is conditioned to output falsehoods, it may include a hidden state that represents the true answer internally . The gap between external failure modes and internal states can only be identified by probing model internals. Such representation probing has been used to characterize the behaviors of language models, but leveraging these strategies to understand time series models has yet to be attempted. These lines of inquiry drive the development of _in-hoc_ explainers  that build inherent interpretability into the model through architectural modifications  or regularization . However, no _in-hoc_ explainers have been developed for time series data. While explainers designed for other modalities can be adapted to time series, their inherent biases do not translate effectively to the uninterpretable nature of time series data. They can miss important structures in time series.

Explaining time series models is challenging for many reasons. First, unlike imaging or text datasets, large time series data _are not visually interpretable_. Next, time series often exhibit dense informative features, unlike more explored modalities such as imaging, where informative features are often sparse. In time series datasets, timestep-to-timestep transitions can be negligible, and temporal patterns only show up when _looking at time segments and long-term trends_. In contrast, in language datasets, word-to-word transitions are informative for language modeling and understanding. Further, time series interpretability involves understanding the dynamics of the model and identifying trends or patterns. Another critical issue with applying prior methods is that they treat all _time steps as separate features_, ignoring potential time dependencies and contextual information; we need explanations that are _temporally connected_ and _visually digestible_. While understanding predictions of individual samples is valuable, the ability to establish _connections between explanations of various samples_ (for example, in an appropriate latent space) could help alleviate these challenges.

**Present work.** We present TimeX, a novel time series surrogate explainer that produces interpretable attribution masks as explanations over time series inputs (Figure 1). 1 A key contribution of TimeX is the introduction of _model behavior consistency,_ a novel formulation that ensures the preservation of relationships in the latent space induced by the pretrained model, as well as the latent space induced by TimeX. 2 In addition to achieving model behavior consistency, TimeX offers interpretable attribution maps, which are valuable tools for interpreting the model's predictions, generated using discrete straight-through estimators (STEs), a type of gradient estimator that enables end-to-end training of TimeX models. 3 Unlike existing interpretability methods, TimeX goes further by learning a latent space of explanations. By incorporating model behavior consistency and leveraging a latent space of explanations, TimeX provides discrete attribution maps and enables visual aggregation of similar explanations and the recognition of temporal patterns. 4 We test our approach on eight synthetic and real-world time series datasets, including datasets with carefully processed ground-truth explanations to quantitatively benchmark it and compare it to general explainers, state-of-the-art time series explainers, and _in-hoc_ explainers. TimeX is at https://github.com/mims-harvard/TimeX

Figure 1: TimeX learns a latent space of explanations and landmarks to summarize groups of informative temporal patterns in time series.

Related work

**Model understanding and interpretability.** As deep learning models grow in size and complexity, so does the need to help users understand the model's behavior. The vast majority of explainable AI research (XAI)  has focused on natural language processing (NLP) [25; 26; 27] and computer vision (CV) [28; 29; 30]. Commonly used techniques, such as Integrated Gradients  and Shapley Additive Explanations (SHAP) , and their variants have originated from these domains and gained popularity. XAI has gained significant interest in NLP and CV due to the inherent interpretability of the data. However, this familiarity can introduce confirmation bias . Recent research has expanded to other data modalities, including graphs [33; 6] and time series [34; 35], as outlined below. The literature primarily focuses on _post-hoc_ explainability, where explanations are provided for a trained and frozen model's behavior [36; 37]. However, saliency maps, a popular approach [38; 31; 39], have pitfalls when generated _post-hoc_: they are surprisingly fragile , and lack sensitivity to their explained models . Surrogate-based approaches have also been proposed [41; 42; 43], but these simplified surrogate models fall short compared to the original predictor they aim to explain. Unlike _post-hoc_ explainability, _in-hoc_ methods aim for inherently interpretable models. This can be accomplished by modifying the model's architecture , training procedure using jointly-trained explainers , adversarial training [45; 46; 47; 48], regularization techniques [17; 22], or refactorization of the latent space [49; 50]. However, such models often struggle to achieve state-of-the-art predictive performance, and to date, these methods have seen limited use for time series.

**Beyond instance-based explanations.** Several methods have been proposed to provide users with information on model behavior beyond generating instance-based saliency maps explaining individual predictions. Prototype models strive to offer a representative sample or region in the latent space [51; 52]. Such methods are inherently interpretable, as predictions are directly tied to patterns in the feature space. Further, explainability through human-interpretable exemplars has been gaining popularity. Concept-based methods decompose model predictions into human-interpretable _concepts_. Many works rely on annotated datasets with hand-picked concepts (_e.g._, "stripes" in an image of a zebra). Relying on access to _a priori_ defined concepts, concept bottleneck models learn a layer that attributes each neuron to one concept . This limitation has spurred research in concept discovery by composing existing concepts [53; 54] or grounding detected objects to natural language . However, the CV focus of these approaches limits their applicability to other domains like time series.

**Time series explainability.** In contrast to other modalities, time series often have multiple variables, and their discriminative information is spread over many timesteps. Building on these challenges, recent works have begun exploring XAI for time series [56; 57; 58; 59; 60; 61; 34; 62]. Many methods modify saliency maps [35; 63; 58] or surrogate methods [59; 64] to work with time series data. Two representative methods are WinIT  and Dynamask . WinIT learns saliency maps with temporal feature importances, while Dynamask regularizes saliency maps to include temporal smoothing. However, these methods rely on perturbing timesteps , causing them to lack faithfulness. Common perturbation choices in CV, like masking with zeros, make less sense for time series . Perturbed time series may be out-of-distribution for the model due to shifts in shape , resulting in unfaithful explanations akin to adversarial perturbation .

## 3 Problem formulation

**Notation.** Given is a time series dataset \(=(,)=\{(_{i},y_{i})|i=1,...,N\}\) where \(_{i}\) are input samples and \(y_{i}\) are labels associated to each sample. Each sample \(_{i}^{T d}\) is said to have \(T\) time steps and \(d\) sensors. A _feature_ is defined as a time-sensor pair, where the time \(t\) and sensor \(k\) for input \(_{i}\) is \(_{i}[t,k]\). Without loss of generality, we consider univariate (\(d=1\)) and multivariate (\(d>1\)) settings. Each \(y_{i}\{1,2,...,C\}\) belongs to one of \(C\) classes. A classifier model consists of an encoder \(G\) and predictor \(F\). The encoder \(G\) produces an embedding of input \(_{i}\), _i.e._, \(G(_{i})=_{i}^{d_{z}}\), while the predictor produces some prediction from the embedding in the form of a logit, _i.e._, \(F(G(_{i}))=_{i}^{C}\) where \(*{argmax}_{j}_{i}[j]\{1,...,C\}\) is the predicted label.

The latent space induced by \(G\) is defined as \(Z\), _e.g._, \(G: Z\). We will refer to \(F(G())\) as the reference model while \(G\) is the _reference encoder_ and \(F\) is the _reference predictor_. An explanation is defined as a continuous map of the features that conveys the relative importance of each feature for the prediction. The explanation for sample \(_{i}\) is given as an attribution map \(E(_{i})^{T d}\) where for any times \(t_{1},t_{2}\) and sensors \(k_{1},k_{2}\), \(E(_{i}[t_{1},k_{1}])>E(_{i}[t_{2},k_{2}])\) implies that \(_{i}[t_{1},k_{1}]\) is a more important feature for the task than \(_{i}[t_{2},k_{2}]\). Finally, we define an occlusion procedure whereby a function \(\) generates an mask \(M_{}\) for a sample \(\) from the explanation \(E()\), e.g., \((E())=M_{}\). This mask is applied to \(x\) to derive a masked version of the input \(^{m}\) through an operation \(\), e.g., \(M_{}=^{m}\). When describing TimeX, we generally refer to \(\) as an element-wise multiplication.

### Self-supervised model behavior consistency

TimeX creates an inherently-interpretable surrogate model for pretrained time series models. The surrogate model produces explanations by optimizing two main objectives: interpretability and faithfulness to model behavior. First, TimeX generates interpretable explanations via an attribution map \(E(_{i})\) that identifies succinct, connected regions of input important for the prediction. To ensure faithfulness to the reference model, we introduce a novel objective for training TimeX: _model behavior consistency (MBC)_. With MBC, a TimeX model learns to mimic internal layers and predictions of the reference model, yielding a high-fidelity time series explainer. MBC is defined as:

**Definition 3.1** (Model Behavior Consistency (MBC)).: Explanation \(E\) and explanation encoder \(G^{E}\) are consistent with pretrained model \(G\) and predictor \(F\) on dataset \(\) if the following is satisfied:

* **Consistent reference encoder:** Relationship between \(_{i}=G(_{i})\) and \(_{j}=G(_{j})\) in the space of reference encoder is preserved by the explainer, \(_{i}^{E}=G^{E}(_{i}^{m})\) and \(_{j}^{E}=G^{E}(_{j}^{m})\), where \(_{i}^{m}=(E(_{i}))_{i}\) and \(_{j}^{m}=(E(_{j}))_{j}\), through distance functions on the reference encoder's and explainer's latent spaces \(D_{Z}\) and \(D_{Z^{E}}\), respectively, such that: \(D_{Z}(_{i},_{j}) D_{Z^{E}}(_{i}^{E}, _{j}^{E})\) for samples \(_{i},_{j}\).
* **Consistent reference predictor:** Relationship between reference predictor \(_{i}=F(_{i})\) and latent explanation predictor \(_{i}^{E}=F^{E}(_{i}^{E})\) is preserved, \(_{i}_{i}^{E}\) for every sample \(_{i}\).

Our central formulation is defined as realizing the MBC between a reference model and an interpretable TimeX model:

**Problem statement 3.1** (TimeX).: Given pretrained time series encoder \(G\) and predictor \(F\) that are trained on a time series dataset \(\), TimeX provides explanations \(E(_{i})\) for every sample \(_{i}\) in the form of interpretable attribution maps. These explanations satisfy _model behavior consistency_ through the latent space of explanations \(Z^{E}\) generated by the explanation encoder \(G^{E}\).

TimeX is designed to counter several challenges in interpreting time series models. First, TimeX avoids the pitfall known as the _occlusion problem_. Occlusion occurs when some features in an input \(_{i}\) are perturbed in an effort that the predictor forgets those features. Since it is well-known that occlusion can produce out-of-distribution samples , this can cause unpredictable shifts in the behavior of a fixed, pretrained model [70; 71; 72]. In contrast, TimeX avoids directly masking input samples to \(G\). TimeX trains an interpretable surrogate \(G^{E}\) to match the behavior of \(G\). Second, MBC is designed to improve the faithfulness of TimeX to \(G\). By learning to mimic multiple states of \(F(G())\) using the MBC objective, TimeX learns highly-faithful explanations, unlike many _post hoc_ explainers that provide no explicit optimization of faithfulness. Finally, TimeX's explanations are driven by learning a latent explanation space, offering richer interpretability data.

Figure 2: Overview of TimeX approach.

TimeX method

We now present TimeX, an approach to train an interpretable surrogate model to provide explanations for a pretrained time series model. TimeX learns explanations through a consistency learning objective where an explanation generator \(H^{E}\) and explanation encoder \(G^{E}\) are trained to match intermediate feature spaces and the predicted label space. We will break down TimeX in the following sections by components: \(H^{E}\), the explanation generator, \(G^{E}\), the explanation encoder, and the training objective of \(G^{E}(H^{E}())\), followed by a discussion of practical considerations of TimeX. An overview of TimeX is depicted in Figure 2.

### Explanation generation

Generating an explanation involves producing an explanation map \(E()\) where if \(E([t_{1},k_{1}])>E([t_{2},k_{2}])\), then feature \([t_{1},k_{1}]\) is considered as more important for the prediction than \([t_{2},k_{2}]\). Explanation generation is performed through an explanation generator \(H^{E}:^{T d}\), where \(H^{E}()=\). We learn \(\) based on a procedure proposed by , but we adapt their procedure for time series. Intuitively, \(\) parameterizes a Bernoulli at each time-sensor pair, and the mask \(M_{}\) is sampled from this Bernoulli distribution during training, _i.e._, \(M_{}_{}(M_{}|)= _{t,k}(_{t,k})\). This parameterization is directly interpretable as attribution scores: a low \(_{t,k}\) means that time-sensor pair \((t,k)\) has a low probability of being masked-in. Thus, \(\) is also the explanation for \(_{i}\), _i.e._, \(E()=\).

The generation of \(\) is regularized through a divergence with Bernoulli distributions \((r)\), where \(r\) is a user-chosen hyperparameter. As in , denote the desired distribution of \(\) as \((M_{})=_{(t,k)}(r)\). Then the objective becomes:

\[_{m}()=[D_{}(_{}(M _{}|)||(M_{}))]=_{t,k}_{t,k}_{t,k}}{r}+(1-_{t,k})_{t,k}}{1-r}\] (1)

The sampling of \(M_{}_{}(M_{}|)\) is performed via the Gumbel-Softmax trick [73; 74], which is a differentiable approximation of categorical sampling. Importantly, \(M_{}\) is stochastically generated, which, as discussed in [50; 75], regularizes the model to learn robust explanations.

To generate interpretable attribution masks, TimeX optimizes for the connectedness of predicted distributions:

\[_{}()=_{k=1}^{d}_{t =1}^{T-1}_{t,k}-_{t+1,k})^{2}}.\] (2)

The generator of explanations \(H^{E}\) learns directly on input time series samples \(\) to return \(\). We build a transformer encoder-decoder structure for \(H^{E}\), using an autoregressive transformer decoder and a sigmoid activation to output probabilities for each time-sensor pair.

### Explanation encoding

We now describe how to embed explanations with the explanation encoder \(G^{E}\). Intuitively, \(G^{E}\) learns on the masked distribution of \(\), which can be denoted as \(^{m}\). Motivated by the occlusion problem, we avoid directly applying the masks onto the pretrained, frozen \(G\), as \(^{m}\) and \(\) are fundamentally different distributions. Therefore, we copy the weights of \(G\) into \(G^{E}\) and fine-tune \(G^{E}\) on \(^{m}\).

**Discretizing attribution masks.** When passing inputs to \(G^{E}\), it is important for the end-to-end optimization to completely ignore regions identified as unimportant by \(H^{E}\). Therefore, we use a straight-through estimator (STE)  to obtain a discrete mask \(M_{}\{0,1\}^{T d}\). Introduced by , STEs utilize a surrogate function to approximate the gradient of a non-differentiable operation used in the forward pass, such as binary thresholding.

**Applying masks to time series samples.** We use two types of masking procedures: attention masking and direct-value masking. First, we employ differentiable attention masking through a multiplicative operation proposed by Nguyen et al. . When attention masking does not apply, we use a direct-value masking procedure based on architecture choice or multivariate inputs. We approximate a baseline distribution: \(_{}=_{t,k}(_{tk},_{tk}^{2})\), where \(_{tk}\) and \(_{tk}^{2}\) are the mean and variance over time-sensor pairs. Masking is then performed through a multiplicative replacement as: \(_{i}^{m}=(M_{}_{i})+(1-M_{}) b\), where \(b_{}\).

**Justification for discrete masking.** It is essential that masks \(M_{}\) are discrete instead of continuous. Previous works have considered masking techniques [78; 49; 50] with continuous masks since applying such masks is differentiable with element-wise multiplication. However, continuous masking has a distinctly different interpretation: it uses a continuous deformation of the input towards a baseline value. While such an approach is reasonable for data modalities with discrete structures, such as sequences of tokens (as in [78; 49]) or nodes in graphs , such deformation may result in a change of the shape of time series data, which is known to be important for prediction . As a toy example, consider an input time series \(_{i}\) where the predictive pattern is driven by feature \(_{i}[t_{1},k_{1}]\) is larger than all other features. Suppose \(M_{}\) is continuous. In that case, it is possible that for a less important feature \(_{i}[t_{2},k_{2}]\), \(M_{}[t_{1},k_{1}]<M_{}[t_{2},k_{2}]\) while \((M_{}[t_{1},k_{1}]_{i}[t_{1},k_{1}])>(M_{}[t_{2},k_{2}]_{i}[t_{2},k_{2}])\), thereby preserving the predictive pattern. At the same time, the mask indicates that \(_{i}[t_{2},k_{2}]\) is more important than \(_{i}[t_{1},k_{1}]\). If a surrogate model is trained on \(M_{}_{i}\), \(M_{}\) may violate the ordinality expected by an attribution map as defined in Section 3. Discrete masking alleviates this issue by forcing \(M_{}\) to be binary, removing the possibility of confounds created by continuous masking. Therefore, discrete masking is necessary when learning interpretable masks on continuous time series.

### Model behavior consistency

The challenge lies in training \(G^{E}(H^{E}())\) to faithfully represent \(F(G())\). We approach this by considering the latent spaces of \(G\) and \(G^{E}\). If \(G\) considers \(_{i}\) and \(_{j}\) to be similar in \(Z\), we expect that a faithful \(G^{E}\) would encode \(_{i}^{m}\) and \(_{j}^{m}\) similarly. However, directly aligning \(G\) and \(G^{E}\) is not optimal due to potential differences in the geometry of the explanation embedding space compared to the full input latent space. To address this, we introduce model behavior consistency (MBC). This novel self-supervised objective trains the explainer model to mimic the behavior of the original model without strict alignment between the spaces. Denote the latent space induced by \(G\) and \(G^{E}\) as \(Z\) and \(Z^{E}\), respectively. The MBC objective is thus defined as:

\[_{}(Z,Z^{E})=}_{_{i},_{j} Z}_{_{i}^{E},_{j}^{E} Z^{E}}(D_{Z}( _{i},_{j})-D_{Z^{E}}(_{i}^{E},_{j}^{ E}))^{2},\] (3)

where \(D_{Z}\) and \(D_{Z^{E}}\) are distance functions on the reference model's latent space and the explanation encoder's latent space, respectively, and \(N\) is the size of the minibatch, thereby making \(N^{2}\) equal to the number of pairs on which \(_{}\) is optimized. This objective encourages distances to be similar across both spaces, encouraging \(Z^{E}\) to retain a similar local topology to \(Z\) without performing a direct alignment. This is closely related to cycle-consistency loss, specifically cross-modal cycle-consistency loss as . We use cosine similarity for \(D_{Z}\) and \(D_{Z^{E}}\) throughout experiments in this study, but any distance can be defined on each respective space.

In addition to MBC, we use a label consistency (LC) objective to optimize TimeX. We train a predictor \(F^{E}\) on \(Z^{E}\) to output logits consistent with those output by \(F\). We use a Jensen-Shannon Divergence (\(D_{}\)) between the logits of both predictors:

\[_{}(Z,Z^{E})=_{_{i},_{j} Z} _{_{i}^{E},_{j}^{E} Z^{E}}D_{}(F( _{i})||F(_{j}))-D_{}(F^{E}(_{i}^{E})|| F^{E}(_{j}^{E}))^{2}\] (4)

Our total loss function on \(Z^{E}\) can then be defined as a combination of losses: \(_{Z^{E}}=_{}+_{}_{ }\).

**Consistency learning justification.** MBC offers three critical benefits for explainability. 1 MBC enables consistency optimization across two latent spaces \(Z\) and \(Z^{E}\) without requiring that both \(_{i}\) and \(_{i}^{m}\) be encoded by the same model, allowing the learning of \(E\) on a separate model \(F^{E}(G^{E}()) F(G())\). This avoids the out-of-distribution problems induced by directly masking inputs to \(G\). 2 MBC comprehensively represents model behavior for explainer optimization. This is in contrast to perturbation explanations [38; 58; 80] which seek a label-preserving perturbation \(P\) on \(F(G())\) where \(F(G(P(_{i}))) F(G(_{i}))\). By using \(G(_{i})\) and \(F(G(_{i}))\) to capture the behavior of the reference model, MBC's objective is richer than a simple label-preserving objective. 3 While MBC is stronger than label matching alone, it is more flexible than direct alignment. An alignment objective, which enforces \(_{i}_{i}^{E}\), inhibits \(G^{E}\) from learning important features of explanations not represented in \(Z\). The nuance and novelty of MBC are in learning a latent space that is faithful to model behavior while being flexible enough to encode rich relational structure about explanations that can be exploited to learn additional features such as landmark explanations. Further discussion of the utility of MBC is in Appendix B.

### Learning explanation landmarks and training TimeX models

Leveraging the latent space, TimeX generates landmark explanations \(^{L}^{d_{z}}\). Such landmarks are desirable as they allow users to compare similar explanation patterns across samples used by the predictor. Landmarks are learned by a landmark consistency loss, and their optimization is detached from the gradients of the explanations so as not to harm explanation quality. Denote the landmark matrix as \(^{n_{L} d_{z}}\) where \(n_{L}\) corresponds to the number of landmarks (a user-chosen value) and \(d_{z}\) is the dimensionality of \(Z^{E}\). For each sample explanation embedding \(_{i}^{E}\), we use Gumbel-Softmax STE (GS) to stochastically match \(_{i}^{E}\) to the nearest landmark in the embedding space. Denote the vector of similarities to each \(_{i}^{E}\) as \(s(_{i}^{E},)\). Then the assimilation \(A\) is described as:

\[A(_{i}^{E};)=((s(( _{i}^{E}),))),\] (5)

where sg denotes the stop-grad function. The objective for learning landmarks is then \(_{}(Z,A(Z^{E};))\), optimizing the consistency between the assimilated prototypes and the reference model's latent space. Landmarks are initialized as a random sample of explanation embeddings from \(Z^{E}\) and are updated via gradient descent. After learning landmarks, we can measure the quality of each landmark by the number of \(_{i}^{E}\) embeddings closest to it in latent space. We filter out any landmarks not sufficiently close to any samples (described in Appendix B).

**TimeX training.** The overall loss function for TimeX has four components: \(=_{}+_{}_{ }+_{E}(_{m}+_{}_{})\), where \(_{},_{E},_{}\) are weights for the label consistency loss, total explanation loss, and connective explanation loss, respectively. TimeX can be optimized end-to-end, requiring little hyperparameter choices from the user. The user must also choose the \(r\) parameter for the explanation regularization. Explanation performance is stable across choices of \(r\) (as found in ), so we set \(r=0.5\) to remain consistent throughout experiments. A lower \(r\) value may be provided if the underlying predictive signal is sparse; this hyperparameter is analyzed in Appendix C.3. In total, TimeX optimizes \(H^{E}\), \(G^{E}\), and \(F^{E}\).

## 5 Experimental setup

**Datasets.** We design four synthetic datasets with known ground-truth explanations: **FreqShapes**, **SeqComb-UV**, **SeqComb-MV**, and **LowVar**. Datasets are designed to capture diverse temporal dynamics in both univariate and multivariate settings. We employ four datasets from real-world time series classification tasks: **ECG** - ECG arrhythmia detection; **PAM** - human activity recognition; **Epilepsy** - EEG seizure detection; and **Boiler** - mechanical fault detection. We define ground-truth explanations for ECG as QRS intervals based on known regions of ECG signals where arrhythmias can be detected. The R, P, and T wave intervals are extracted following . Dataset details are given in Appendix C.1 and C.4.

**Baselines.** We evaluate the method against five explainability baselines. As a general explainer, we use integrated gradients (**IG**) ; for recent time series-specific explainers, we use **Dynamask**, and **WinIT**; for an explainer that uses contrastive learning, we use **CoRTX**; and for an _in-hoc_ explainer which has been demonstrated for time series, we use **SGT + Grad**.

**Evaluation.** We consider two approaches. _Ground-truth explanations:_ Generated explanations are compared to ground-truth explanations, _i.e._, known predictive signals in each input time series sample when interpreting a strong predictor, following established setups . We use the area under precision (AUP) and area under recall (AUR) curves to evaluate the quality of explanations . We also use the explanation AUPRC, which combines the results of AUP and AUR. For all metrics, higher values are better. Definitions of metrics are in Appendix C.4. _Feature importance under occlusion:_ We occlude the bottom \(p\)-percentile of features as identified by the explainer and measure the change in prediction AUROC (Sec. 4.2). The most essential features a strong explainer identifies should retain prediction performance under occlusion when \(p\) is high. To control for potential misinterpretations, we include a random explainer reference. Our experiments use transformers  with time-based positional encoding. Hyperparameters and compute details are given in Appendix C.

[MISSING_PAGE_FAIL:8]

procedure described in Sec. 4.2, performing attention masking where applicable and direct-value masking otherwise.

Figure 3 compares TimeX to Dynamask, a strong time-series explainer. On all datasets, TimeX's explanations are either at or above the performance of Dynamask, and both methods perform above the random baseline. On the Boiler dataset, we demonstrate an average of 27.8% better classification AUROC across each threshold than Dynamask, with up to 37.4% better AUROC at the 0.75 threshold. This gap in performance between TimeX and Dynamask is likely because the underlying predictor for Boiler is weaker than that of Epilepsy or PAM, achieving 0.834 AUROC compared to 0.979 for PAM and 0.939 for Epilepsy. We hypothesize that TimeX outperforms Dynamask because it only considers changes in predicted labels under perturbation while TimeX optimizes for consistency across both labels and embedding spaces in the surrogate and reference models. TimeX performs well across both univariate (Epilepsy) and multivariate (PAM and Boiler) datasets.

**R3: Landmark explanation analysis on ECG.**

To demonstrate TimeX's landmarks, we show how landmarks serve as summaries of diverse patterns in an ECG dataset. Figure 4 visualizes the learned landmarks in the latent space of explanations. We choose four representative landmarks based on the previously described landmark ranking strategy (Sec. 4.4). Every landmark occupies different regions of the latent space, capturing diverse types of explanations generated by the model. We show the three nearest explanations for the top two landmarks regarding the nearest neighbor in the latent space. Explanations 1, 2, and 3 are all similar to each other while distinctly different from 4, 3, and 6, both in terms of attribution and temporal structure. This visualization shows how landmarks can partition the latent space of explanations into interpretable temporal patterns. We demonstrate the high quality of learned landmark explanations through a quantitative experiment in Appendix C.10.

**Additional experiments demonstrating flexibility of TimeX.**

In the Appendix, we present several additional experiments to demonstrate the flexibility and superiority of TimeX. In Appendix C.8, we replicate experiments on two other time series architectures, LSTM and CNN, and show that TimeX retains state-of-the-art performance. In Appendix C.9, we demonstrate the performance of TimeX in multiple task settings, including forecasting and irregularly-sampled time series classification. TimeX can be adapted to these settings with minimal effort and retains excellent explanation performance.

## 7 Conclusion

We develop TimeX, an interpretable surrogate model for interpreting time series models. By introducing the novel concept of model behavior consistency (_i.e._, preserving relations in the latent space induced by the pretrained model when compared to relations in the latent space induced by the explainer), we ensure that TimeX mimics the behavior of a pretrained time series model, aligning

Figure 3: Occlusion experiments on real-world datasets. Higher values indicate better performance.

    &  &  &  \\ Method & AUPRC & AUP & AUR & Ablations & AUPRC & AUP & AUR \\  IG & 0.4182\(\)0.0014 & **0.5949\(\)**0.0023 & 0.3204\(\)0.0012 & Full & 0.4721\(\)0.0018 & 0.5663\(\)0.0025 & 0.4457\(\)0.0018 \\ Dynamask & 0.3280\(\)0.0011 & 0.5249\(\)0.0030 & 0.1082\(\)0.0080 & -STE & 0.4014\(\)0.0019 & 0.5570\(\)0.0032 & 0.1564\(\)0.0007 \\ WinIT & 0.3049\(\)0.0011 & 0.4431\(\)0.0026 & 0.3474\(\)0.0011 & -STE\(\)0.04767 & 0.0021 & 0.4895\(\)0.0024 & 0.4779\(\)0.0013 \\ CoRTX & 0.3735\(\)0.0008 & 0.4968\(\)0.0021 & 0.3031\(\)0.0009 & Only LC & 0.3704\(\)0.0018 & 0.3296\(\)0.0019 & 0.5084\(\)0.0008 \\ SGT + Grad & 0.3144\(\)0.0010 & 0.4241\(\)0.0024 & 0.2639\(\)0.0013 & Only MBC & 0.1615\(\)0.0006 & 0.1348\(\)0.0006 & 0.5504\(\)0.0011 \\   

Table 3: (_Left_) Benchmarking TimeX on the ECG dataset. (_Right_) Results of ablation analysis.

influential time series signals with interpretable temporal patterns. The generation of attribution maps and utilizing a latent space of explanations distinguish TimeX from existing methods. Results on synthetic and real-world datasets and case studies involving physiological time series demonstrate the superior performance of TimeX compared to state-of-the-art interpretability methods. TimeX's innovative components offer promising potential for training interpretable models that capture the behavior of pretrained time series models.

**Limitations.** While TimeX is not limited to a specific task as an explainer, our experiments focus on time series classification. TimeX can explain other downstream tasks, assuming we can access the latent pretrained space, meaning it could be used to examine general pretrained models for time series. Appendix C.9 gives experiments on various setups. However, the lack of such pretrained time series models and datasets with reliable ground-truth explanations restricted our testing in this area. One limitation of our approach is its parameter efficiency due to the separate optimization of the explanation-tuned model. However, we conduct a runtime efficiency test in Appendix C.7 that shows TimeX has comparable runtimes to baseline explainers. Larger models may require adopting parameter-efficient tuning strategies.

**Societal impacts.** Time series data pervades critical domains including finance, healthcare, energy, and transportation. Enhancing the interpretability of neural networks within these areas has the potential to significantly strengthen decision-making processes and foster greater trust. While explainability plays a crucial role in uncovering systemic biases, thus paving the way for fairer and more inclusive systems, it is vital to approach these systems with caution. The risks of misinterpretations or an over-reliance on automated insights are real and substantial. This underscores the need for a robust framework that prioritizes human-centered evaluations and fosters collaboration between humans and algorithms, complete with feedback loops to continually refine and improve the system. This approach will ensure that the technology serves to augment human capabilities, ultimately leading to more informed and equitable decisions across various sectors of society.