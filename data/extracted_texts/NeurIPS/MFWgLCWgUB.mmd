# Random Cuts are Optimal for Explainable \(k\)-Medians

Konstantin Makarychev

Northwestern University &Liren Shan

TTIC

Equal contribution.

###### Abstract

We show that the RandomCoordinateCut algorithm gives the optimal competitive ratio for explainable \(k\)-medians in \(_{1}\). The problem of explainable \(k\)-medians was introduced by Dasgupta, Frost, Moshkovitz, and Rashtchian in 2020. Several groups of authors independently proposed a simple polynomial-time randomized algorithm for the problem and showed that this algorithm is \(O( k k)\) competitive. We provide a tight analysis of the algorithm and prove that its competitive ratio is upper bounded by \(2 k+2\). This bound matches the \(( k)\) lower bound by Dasgupta et al (2020).

## 1 Introduction

Machine learning is being increasingly used to make decisions for critical applications, such as healthcare, finance, and public policy. Considering the profound impact of algorithmic decisions on individuals and society, it is essential to understand the underlying logic behind these decisions. In this paper, we explore an explainable \(k\)-medians clustering algorithm (called RandomCoordinateCut). The algorithm's aim is to cluster data sets and present results in a manner easily understood and visualized by humans.

Clustering is a fundamental task in unsupervised learning. Among many clustering methods, \(k\)-means, \(k\)-medians, and \(k\)-medoids are particularly popular. These are centroid-based methods that choose \(k\) centers and assign each data point to the center nearest to it. As a result, each cluster is a Voronoi cell in the Voronoi partition of the space. Since these cells may have a complicated boundary (see Figure 1 for an example of \(k\)-medians), it is not always easy for humans to comprehend and visualize such clustering.

To address this problem, Dasgupta, Frost, Moshkovitz, and Rashtchian (2020) introduced explainable \(k\)-means and \(k\)-medians clustering. They argued that decision trees are easy to understand and interpret. Therefore, in order to make clustering more explainable, we need to use threshold decision trees to define clusters. A threshold decision tree is a binary space partitioning tree with \(k\) leaves. Each internal node of the threshold decision tree splits the data into two groups using a threshold cut \((j,)\): on the one side of the cut, we have points \(x\) with \(x_{j}\) and, on the other side, points \(x\) with \(x_{j}>\). Thus, every node of the tree corresponds to a rectangular region of the space. A decision tree with \(k\) leaves partitions data set \(X\) into \(k\) clusters, \(P_{1},,P_{k}\). See Figure 1 for an example. Dasgupta et al. (2020) suggested that we use the standard \(k\)-medians and \(k\)-means objectives to measure the cost of the threshold decision tree. For \(k\)-medians, the cost of a threshold decision tree \(\) equals

\[(X,)=_{i=1}^{k}_{x P_{i}}\|x-^{i}\| _{1},\]

where \(P_{1},,P_{k}\) is the partitioning of \(X\) produced by \(\); and \(^{1},,^{k}\) are the medians of clusters \(P_{1},,P_{k}\). We denote the \(_{1}\)-norm by \(\|\|_{1}\). Note that each \(P_{i}\) is a rectangular region of the space. Thus, generally speaking, every \(x\) is not assigned to the closest center \(^{1},,^{k}\) like in unconstrained \(k\)-medians or \(k\)-means.

Dasgupta, Frost, Moshkovitz, and Rashtchian (2020) defined the price of explainability as the ratio of the \(k\)-medians cost of explainable clustering to the optimal cost of unconstrained \(k\)-medians clustering. They showed that the cost of explainability for \(k\)-means and \(k\)-medians (somewhat surprisingly) does not depend on the number of points in the data set \(X\) and only depends on \(k\). Specifically, they provided a greedy algorithm that given \(k\) reference centers \(c^{1},c^{2},,c^{k}\) of any unconstrained \(k\)-medians as input, outputs a threshold decision tree of cost at most \(O(k)\) times the cost of original unconstrained \(k\)-medians with centers \(c^{1},c^{2},,c^{k}\). We call such an algorithm \(O(k)\) competitive. To get an explainable \(k\)-medians clustering, we first obtain reference centers \(c^{1},c^{2},,c^{k}\) using an off-the-shelf approximation algorithm for \(k\)-medians and then run an \(\)-competitive algorithm for explainable \(k\)-medians with centers \(c^{1},c^{2},,c^{k}\) given as input. This algorithm produces the desired threshold decision tree. Dasgupta et al. (2020) also gave an \(O(k^{2})\) competitive algorithm for \(k\)-means and showed \(( k)\) lower bounds on the price of explainability for both \(k\)-medians and \(k\)-means.

The notion of explainable clustering immediately got a lot of attention in the field (Laber and Murtinho (2021); Makarychev and Shan (2021); Gamlath et al. (2021); Charikar and Hu (2022); Esfandiari et al. (2022)). Particularly, Makarychev and Shan (2021); Esfandiari, Mirrokni, and Narayanan (2022) provided almost optimal algorithms for explainable \(k\)-medians, and Makarychev and Shan (2021); Esfandiari, Mirrokni, and Narayanan (2022); Gamlath, Jia, Polak, and Svensson (2021) provided almost optimal algorithms for \(k\)-means. The competitive ratios of these algorithms are \(( k)\) for \(k\)-medians and \((k)\) for \(k\)-means.

The algorithms for explainable \(k\)-medians by Makarychev and Shan (2021); Esfandiari, Mirrokni, and Narayanan (2022); Gamlath, Jia, Polak, and Svensson (2021) are variants of the same simple algorithm, which we call RandomCoordinateCut. This algorithm receives a set of \(k\) reference centers \(c^{1},,c^{k}\) as input and then builds a threshold decision tree with \(k\) leaves. It works as follows. It recursively partitions \(d\)-dimensional space until every cell contains exactly one reference center \(c^{i}\). The algorithm starts with a tree consisting of one node, the root. Initially, all \(k\) reference centers are assigned to that root. At every step, the algorithm picks a random threshold cut \((j,)\) and splits centers in every cell using this cut. If this cut does not separate any centers in a cell \(u\) (i.e., all centers in \(u\) are located on one side of the cut), then the algorithm does not split \(u\) into two regions at this step. Finally, for every leaf \(u\) of the constructed tree, the unique center that belongs to the cell corresponding to \(u\) is assigned to \(u\). We provide pseudo-code for this algorithm in Figure 2.

Makarychev and Shan (2021); Esfandiari et al. (2022) showed that the competitive ratio of RandomCoordinateCut is at most \(O( k k)\). That is, for every data set \(X\) and set of centers \(c^{1},,c^{k}\),

\[[(X,)] O( k k)_{x  X}_{c\{c^{1},,c^{k}\}}\|x-c\|_{1}.\]

Note that the running time of this algorithm is \((kd)\). Gamlath, Jia, Polak, and Svensson (2021) provided a slightly worse bound of \(O(^{2}k)\) on the competitive ratio of this algorithm. They also

Figure 1: The unconstrained \(k\)-medians clustering and explainable \(k\)-medians clustering. The left diagram shows the Voronoi partition of the plane w.r.t. three centers in \(_{1}\) distance. The Voronoi cell for each center consists of all points that are closer (in \(_{1}\) distance) to this center than to any other center (the boundaries between cells are not straight lines because we use the \(_{1}\) distance). The middle diagram shows an explainable partition. The right diagram shows the corresponding decision tree for explainable clustering.

conjectured that this algorithm is optimal and its competitive ratio is \(O( k)\), more specifically, \(H_{k-1}+1\), where \(H_{k}\) is the \(k\)-th harmonic number. They provided some justification for their conjecture by proving this bound for a very special set of centers and data points (corresponding to the case of completely disjoint sets in our Set Elimination Game).

**Our Results.** In this work, we show that indeed the competitive ratio of RandomCoordinateCut is at most \(2 k+2\), and, therefore, this algorithm has the optimal competitive ratio which matches the lower bound of Dasgupta, Frost, Moshkovitz, and Rashtchian (2020). Our analysis is not only tight but also fairly simple. To get our result we define a game, the Set Elimination Game, which was also implicitly analyzed in previous works on this topic. We show that the cost of this game is at most \(2 k+2\).

**Related Work.** The unconstrained \(k\)-medians clustering has been extensively studied. Charikar, Guha, Tardos, and Shmoys (1999) gave the first constant factor approximation algorithm for the problem in general metric spaces. Li and Svensson (2013) provided a \(1++\) approximation algorithm. Byrka, Pensyl, Rybicki, Srinivasan, and Trinh (2017) improved the approximation factor to \(2.675+\). Cohen-Addad, Esfandiari, Mirrokni, and Narayanan (2022) recently improved the approximation factor to \(2.406\) for Euclidean \(k\)-medians. Megiddo and Supowit (1984) showed that the \(k\)-medians in \(_{1}\) problem is NP-hard. Cohen-Addad and Lee (2022) showed that it is also NP-hard to approximate \(k\)-medians in \(_{1}\) within a factor of \(1.06\).

As we discuss above, Gamlath, Jia, Polak, and Svensson (2021), Esfandiari, Mirrokni, and Narayanan (2022), Makarychev and Shan (2021), independently proposed the RandomCoordinateCut algorithm. They also gave an \((k)\) algorithm for explainable \(k\)-means and showed a lower bound of \((k)\) for the problem. Charikar and Hu (2022) provided an \(O(k^{1-2/d}(d, k))\) competitive algorithm for explainable \(k\)-means, whose competitive ratio depends on the dimension \(d\) of the instance. For small \(d k/ k\), their bound is better than \(O(k)\). They showed an almost matching \((k^{1-2/d}/ k)\) lower bound for explainable \(k\)-means. Esfandiari et al. (2022) gave an upper bound of \(O(d^{2}d)\) on the competitive ratio of RandomCoordinateCut for explainable \(k\)-medians. This bound is better than \(O( k)\) for small \(d k/ k\). Laber and Murtinho (2021) gave \(O(d k)\) and \(O(dk k)\) competitive algorithms for explainable \(k\)-medians and \(k\)-means, respectively. Frost, Moshkovitz, and Rashtchian (2020) provided some empirical evidence that bi-criteria algorithms for explainable \(k\)-means (that partition the data set into \((1+)k\) clusters) can give a much better competitive ratio than \(O(k)\). Then, Makarychev and Shan (2022) gave a \((^{2}k)\) competitive bi-criteria algorithm for explainable \(k\)-means. Bandyapadhyay, Fomin, Golovach, Lochet, Purohit, and Simonov (2022) provided an algorithm

Figure 2: RandomCoordinateCut algorithm

that computes the optimal explainable \(k\)-medians and \(k\)-means clustering in time \(n^{2d+O(1)}\) and \((4nd)^{k+O(1)}\), respectively. Laber, Murtinho, and Oliveira (2023) proposed to use shallow decision trees for explainable clustering.

Independently and concurrently with our work, Gupta, Pittu, Svensson, and Yuan (2023) proved a \(O( k)\) bound on the price of explainability for \(k\)-medians. They showed that the competitive ratio of RandomCoordinateCut is \(1+H_{k-1}\), where \(H_{k}\) is the \(k\)-th harmonic number. Their work answers the open question raised by Gamlath, Jia, Polak, and Svensson (2021). They also proved a hardness of approximation result for explainable \(k\)-medians clustering and improved the competitive ratio for explainable \(k\)-means from \(O(k k)\) to \(O(k k)\).

## 2 Set Elimination Game

In this section, we define the set elimination game. Consider a discrete finite measure space \((,)\). In this space, each element \(\) has a measure of \(()\), and the measure of every set \(S\) equals \((S)=_{ S}()\). Let \(S_{1},S_{2},,S_{k}\) be \(k\) distinct sets which may overlap with each other. The set elimination game proceeds in a series of rounds. Initially, all sets \(S_{1},,S_{k}\) enter the competition. Formally, they belong to the set of remaining sets \(_{0}=\{S_{1},,S_{k}\}\). At every round \(n\), the host picks a random \(_{n}\) with probability \((_{n}=)=()/()\). Then, all sets \(S_{i}\) that contain \(_{n}\) are eliminated from the game unless all remaining sets contain \(_{n}\), in which case, no set gets eliminated. That is, for \(n 1\),

\[_{n}=_{n-1}\{S_{i} _{n-1}:_{n} S_{i}\},&_{n-1},_{n} S_{i}$};\\ _{n-1},&.\] (1)

The last remaining set is declared the winner. We denote that winner by \(\). We say that the cost of the game is the measure of the winning set, \(()\).

We remark that \(_{n}\) cannot get empty (in which case, the winner would not be defined) because of the "otherwise" clause in the definition (1). We shall always assume that all sets \(S_{1},,S_{k}\) are not only distinct and non-empty but also (a) for every \(i\), \((S_{i})>0\), and (b) for all \(i\) and \(j\), \((S_{i} S_{j})>0\) (here, \(S_{i} S_{j}\) denotes the symmetric difference of sets \(S_{i}\) and \(S_{j}\)). Then, in every game, there is a unique winner with probability \(1\).

We similarly define the set elimination game for arbitrary finite measure spaces: For an arbitrary finite measure space \((,)\), element \(_{n}\) is chosen with probability function \((_{n} S)=(S)/()\).

Our main result is the following theorem, which, as we discuss later in Section 2.1, implies that the competitive ratio of the explainable clustering algorithm is \(2 k+2\).

**Theorem 2.1**.: _Consider a set elimination game with the finite measure space \((,)\) and \(k\) distinct sets \(S_{1},S_{2},,S_{k}\) (as above). The expected cost of the game is at most_

\[}()(2 k+2) _{i[k]}(S_{i}).\]

To simplify the exposition, we will prove this theorem for discrete finite measure sets. If \(\) is not a discrete measure space, we first replace it with a quotient space: We say that \(^{}\) and \(^{}\) are equivalent (\(^{}^{}\)) if they are contained in exactly the same set of sets \(S_{1},,S_{k}\). This equivalence relation partitions \(\) into at most \(2^{k}\) different equivalence classes. We replace \(\) with the quotient space \(}{{}}\) whose elements are equivalence classes. In other words, we merge all equivalent \(\)'s. The measure of a new element \(\) equals to the measure of the corresponding equivalence class.

**Organization.** In Section 2.1, we discuss the connection between explainable \(k\)-medians and set elimination games. We define a set elimination game in a set system \(I\{S_{1},,S_{k}\}\) in Section 2.2. Then, we define the hitting and elimination time in Section 2.3. In Section 3, we first illustrate our proof strategy by showing Theorem 2.1 for the case when the smallest set \(S_{1}\) does not overlap with \(S_{2},,S_{k}\). An important ingredient of our proof is the notion of _surprise sets_, which we discuss in Section 3.1. Finally, we complete the proof of Theorem 2.1 in Section 3.2.

### Explainable \(k\)-Medians via Set Elimination Game

In this section, we show how to use Theorem 2.1 to obtain a bound of \(2 k+2\) on the competitive ratio of the RandomCoordinateCut algorithm.

**Theorem 2.2**.: _The competitive ratio of the RandomCoordinateCut algorithm for Explainable \(k\)-Medians is at most \(2 k+2\). That is, for every set of centers \(C=\{c^{1},,c^{k}\}\) and data set \(X\), the algorithm finds a random decision tree \(\) such that_

\[[(X,)](2 k+2)_{x X}_{ c\{c^{1},,c^{k}\}}\|x-c\|_{1}.\]

The pseudo-code for the RandomCoordinateCut algorithm is provided in Figure 2.

Theorem 2.2 shows that given any \(k\) centers \(C=\{c^{1},,c^{k}\}\), RandomCoordinateCut finds a decision tree \(\) with cost at most \(2 k+2\) times the cost of unconstrained \(k\)-medians with centers \(C=\{c^{1},,c^{k}\}\). By using \(k\) centers given by any constant approximation algorithm for \(k\)-medians, RandomCoordinateCut finds a decision tree with cost at most \(O( k)\) times the optimal unconstrained \(k\)-medians cost. This implies an \(O( k)\) upper bound on the price of explainability.

Proof of Theorem 2.2.: Consider an arbitrary data set \(X^{d}\) and set of \(k\) centers \(C^{d}\). We assume that all points in \(X\) and all centers in \(C\) are in the cube \([-M,M]^{d}\). The threshold decision tree obtained by the RandomCoordinateCut algorithm partitions the space into \(k\) cells. Each cell contains a single reference center \(c^{i}\). The center \(c^{i}\) is not necessarily optimal for cluster \(P_{i}\) (cluster \(P_{i}\) is the intersection of the data set \(X\) and \(i\)-th cell). However, we will use it as a proxy for the optimal center. In other words, we will upper bound the cost of the threshold decision tree as follows:

\[(X,)_{^{1},,^{k}} _{i=1}^{k}_{x P_{i}}\|x-^{i}\|_{1}_{i=1}^{k}_{ x P_{i}}\|x-c^{i}\|_{1}.\]

Let \(\) be the set of all coordinate cuts: \(=\{(j,):j[d],[-M,M]\}\). We define a measure \(\) on \(\) as follows. For every subset \(S\), we set

\[(S)=_{j=1}^{d}_{L}(\{:(j,) S\}),\]

where \(_{L}\) is the Lebesgue measure on \(\). Thus, we have \(()=2dM\), which implies \((,)\) is a finite measure space.

Consider any data point \(x X\). Define \(k\) sets \(S_{1},S_{2},,S_{k}\) for the set elimination game. For every \(i\{1,,k\}\), let \(S_{i}\) be the set of all threshold cuts that separate \(x\) and center \(c^{i}\), i.e.,

\[S_{i}=\{(j,):(x_{j}-)(c^{i}_{j }-)\}.\]

Note that the \(_{1}\) distance from \(x\) to center \(c^{i}\) equals the measure of \(S_{i}\): \(\|x-c^{i}\|_{1}=(S_{i})\). We now examine the set elimination game with sets \(S_{1},,S_{k}\), measure space \((,)\), and random sequence of draws \(_{1},_{2},\) (each \(_{n}\) is the threshold cut chosen by the RandomCoordinateCut algorithm at step \(n\)). We claim that \(S_{i}\) belongs to \(_{n}\) if and only if center \(c^{i}\) lies in the same cell as point \(x\) after step \(n\) of the algorithm. This is the case for \(n=0\), since \(_{0}\) contains all sets \(S_{1},,S_{k}\) and the root of the threshold tree contains all centers \(c^{1},,c^{k}\). Then, whenever we pick cut \(_{n}\), all centers separated from \(x\) by \(_{n}\) are removed from the cell of \(x\). The only exception from this rule occurs when all centers in that cell lie on the same side of the cut \(_{n}\). That is exactly the same rule as we have for the set elimination game (note that center \(c^{i}\) is separated from \(x\) by \(_{n}\) if and only if \(_{n} S_{i}\)). Therefore, the same sets \(S_{i}\) remain in the game as center \(c^{i}\) in the cell of \(x\) (namely, sets \(S_{i}\) and centers \(c^{i}\) have the same indices).

The RandomCoordinateCut algorithm stops when all leaves of the decision tree contain exactly one center. At this step, the set elimination game contains one set, \(S_{i}\). This set corresponds to the center \(c^{i}\) assigned to point \(x\). The cost of the game \((S_{i})\) equals the distance from \(x\) to \(c^{i}\). By Theorem 2.1, we have

\[[(x,)]=[()] (2 k+2)_{i}(S_{i})=(2 k+2)_{i}\|x-c^{i}\|_{1}.\]

We sum this bound over all data points \(x\) in \(X\) and get the desired result.

### Local Competitions

We now revisit the definition of the set elimination game and define competitions in subsets of \(\{S_{1},,S_{k}\}\). For the rest of the proof, we assume \((,)\) is a discrete finite measure space. We remind the reader that every set elimination game is determined by an infinite sequence of i.i.d. random variables \(_{1},_{2},\). In each round \(n\), we sample an element \(_{n}\) from \(\) with probability \((_{n}=)=()/()\).

**Definition 2.3**.: _Consider a finite measure space \((,)\). Let \(I\) be a set of subsets of \(\). We say that \(I\) is a valid set system if (a) for every \(S I\), \((S)>0\), and (b) for every \(S^{},S^{} I\), \((S^{} S^{})>0\)._

The reader may assume that \(()>0\) for all \(\) in \(\). Then, the definition above says that in a valid set system \(I\), all sets are non-empty and distinct.

**Definition 2.4**.: _Consider a finite measure space \((,)\). Let \(_{1},_{2},\) be i.i.d. random variables as described above and \(I\) be a valid set system. We define a set elimination game in \(I\). Initially, \(_{0}(I)=I\). Then, for every \(n 1\),_

\[_{n}(I)=_{n-1}(I)\{S_{n-1}(I):_{n} S\},&_{n-1}(I),_{n} S^{}$};\\ _{n-1}(I),&.\] (2)

_The winner of the game in \(I\), denoted by \((I)\), is the only element remaining, or, formally, the unique element in \(_{n 0}_{n}(I)\). If \(_{n 0}_{n}(I)\) contains more than one element, then the winner is not defined. The cost of the game is the measure of the winner, \(((I))\)._

We remark that \(_{n 0}_{n}(I)\) contains exactly one element with probability \(1\). Thus, the winner and cost of the game are defined with probability \(1\).

Consider sets \(S_{1},,S_{k}\) from Theorem 2.1. Denote \(K=\{S_{1},,S_{k}\}\). The definition of the competition among sets \(S_{1},,S_{k}\) (given in the beginning of Section 2) is exactly the same as the definition of competition in \(K\). Our goal is to show that \([((K))] 2( k+1)_{S_{i} K}(S_{i})\). In the proof of Theorem 2.1, we will consider competitions in different set systems \(I K\). We show the following key lemma. We defer the proof of Lemma 2.5 to Appendix A.

**Lemma 2.5**.: _Consider a partitioning of the set system \(K=\{S_{1},,S_{k}\}\) into \(m\) sets \(I_{1},,I_{m}\). Then, \((K)(I_{1}),, (I_{m})}\)._

### Set Elimination with Exponential Clock

Consider a set elimination game on sets \(S_{1},,S_{k}\). It is determined by the sequence of random i.i.d. draws \(_{1},_{2},\). Random variable \(_{n}\) is chosen in round \(n\). We assign every round a random time \(_{n}\). Let the time between two consecutive rounds be an exponential random variable with parameter \(()\). Specifically, let \(_{1},_{2},\) be a sequence of i.i.d. exponential random variables with parameter \(()\) and each \(_{n}=_{n-1}+_{n}=_{1}++_{n}\). Note that all \(_{n}\) are positive and \(_{1},_{2},\) is an increasing sequence with probability \(1\). The number of draws that occur by time \(t\) (i.e., \(N_{t}()=|\{n:_{n} t\}|\)) is a Poisson process with parameter \(()\). We now can think of the set elimination game as follows: The host of the game observes a Poisson process with parameter \(()\). Whenever the process jumps (at time \(_{n}\)), the host picks an element \(_{n}\) in \(\) with probability \((_{n}=)=()/()\) and eliminates some sets according to the rules of the game discussed above. Note that by assigning every round some time \(_{n}\), we do not change the game, the winner, and the cost of the game (because the sequence of random draws \(_{1},_{2},\) remains the same as before). This interpretation of the game allows us to introduce a hitting time \(h(S)\) of every subset \(S\) with the following properties: (a) each \(h(S)\) is an exponential random variable with rate \((S)\); (b) hitting times of disjoint sets are mutually independent random variables.

**Definition 2.6**.: _For every subset \(X\), the hitting time \(h(X)\) is the time \(_{n}\) when the first \(_{n}\) is drawn from \(X\): \(h(X)=\{_{n}:_{n} X\}\). When the set contains one element \(\), we will write \(h()\) instead of \(h(\{\})\)._

We also define the elimination time of each set \(S_{i}\).

**Definition 2.7**.: _Consider any set elimination game with the measure space \((,)\) and \(k\) sets \(S_{1},S_{2},,S_{k}\) in \(\). The elimination time \(e(S_{i})\) of set \(S_{i}\) is the time when set \(S_{i}\) is eliminated from the game, i.e., \(e(S_{i})=\{_{n}:S_{i}_{n}(K)\}\). If \(S_{i}\) is the winner, then we let \(e(S_{i})=\) (because the winner is never eliminated)._Note that \(e(S_{i}) h(S_{i})\). Sometimes, \(e(S_{i})\) may be equal to \(h(S_{i})\), but \(e(S_{i})\) and \(h(S_{i})\) are not always the same. We now prove that hitting times for disjoint sets are independent. To this end, we _split_ the Poisson process \(N_{t}()=|\{n:_{n} t\}|\). Let \(N_{t}()=|\{n:_{n} t_{n}=\}|\). It is easy to see that \(N_{t}()=_{}N_{t}()\) for every \(t\). It is also true that each \(N_{t}()\) is a Poisson process with parameter \(()\) and all \(N_{t}()\) (for \(\)) are mutually independent. This fact follows from the Coloring Theorem (see e.g., Kingman (1992), Coloring Theorem, page 53).

**Theorem 2.8** (Coloring Theorem).: _Let \(_{t}\) be a Poisson process on the real line with rate \(\). We color each event of the Poisson process randomly with one of \(M\) colors: The probability that a point receives the \(i\)-th color is \(p_{i}\). The colors of different points are independent. Let \(_{t}(i)\) be the number of events of color \(i\) in the interval \((0,t]\). Then, \(_{t}(1),,_{t}(M)\) are independent Poisson processes. The rate of process \(_{t}(i)\) is \(_{i}\)._

**Lemma 2.9**.: _For every \(\), \(h()\) is an exponential random variable with parameter \(()\), and all random variables \(h()\) (for \(\)) are mutually independent._

Proof.: Observe that \(h()=\{t:N_{t}() 1\}\). Thus, \(h()\) is an exponential random variable (the time of the first jump of a Poisson process) with rate \(()\). Also, since all \(N_{t}()\) (for \(\)) are mutually independent, all \(h()\) are also mutually independent. 

Note that the set elimination game depends only on the hitting times for elements \(\) in \(\). This is the case because it matters only when every \(\) is drawn the first time. At that time - the hitting time of \(\) - all sets that contain \(\) are eliminated unless all remaining sets contain this \(\). When the same \(\) is drawn again, it does not eliminate any new sets. Also, note that for any set \(S\), the hitting time \(h(S)=_{ S}h()\). Thus, \(h(S)\) is an exponential random variable with parameter \((S)=_{ S}()\).

## 3 Proof of Main Result

We now present the proof of our main result, Theorem 2.1. We assume without loss of generality that \(S_{1}\) is the smallest set i.e., \((S_{1})(S_{i})\) for all \(i\). Then, the expected cost of the game is at most:

\[(S_{1})+_{i=2}^{k}S_{i}=(K)(S_{i}).\] (3)

We first provide some intuition for the proof by considering the case when \(S_{1}\) does not intersect with sets \(S_{2},,S_{k}\), i.e. sets \(S_{1}\) and \(S_{i}\) are disjoint for all \(i=2,3,,k\). We split all sets into two groups \(S_{1}\) and the rest of the sets \(S_{2},,S_{k}\). We know from Lemma 2.5 that the winner among all sets \(S_{1},,S_{k}\) is either \(S_{1}\) or \((\{S_{2},,S_{k}\})\). Denote \(I^{-}=\{S_{2},,S_{k}\}\). Each set \(S_{i}\) is eliminated at time \(e(S_{i})\). The set \(S_{1}\) is eliminated at its hitting time \(h(S_{1})\) unless it is the only remaining set at time \(h(S_{1})\) (because we are considering the case when \(S_{1}\) does not overlap with other sets). Thus,

\[(K)=S_{1},&h(S_{1})>e((I^{-} ));\\ (I^{-}),&e((I^{-}))>h(S_{1}).\] (4)

When the winner among \(S_{1},,S_{k}\) is not \(S_{1}\), we consider two cases of the winner \(S_{i}\): (1) \(S_{i}\) is a surprise set; (2) \(S_{i}\) is a non-surprise set.

**Definition 3.1**.: _We say that \(S_{i}\) is a surprise set if \(e(S_{i}) h(S_{1}) L/(S_{i})\), where \(L= k\)._

We call \(S_{i}\) a surprise set because the probability of the event \(e(S_{i}) h(S_{1}) L/(S_{i})\) is small. We give a bound on the probability of \(e(S_{i}) h(S_{1}) L/(S_{i})\) in Lemma 3.3. Here, we provide some intuition. By Lemma 2.9, the hitting time \(h(S_{i})\) is an exponential random variable with parameter \((S_{i})\). Thus, the expected hitting time for \(S_{i}\) is \(1/(S_{i})\). Consider a set \(S_{i}\) with a small measure (\((S_{i})\) is close to \((S_{1})\)). If the hitting time \(h(S_{1}) L/(S_{i})\), then \(h(S_{1})\) is much larger than its expected value \(1/(S_{1})\), which happens with a small probability. Consider a set \(S_{i}\) with a large measure \((S_{i})(S_{1})\). Then, the expected hitting time for \(S_{i}\) is \(1/(S_{i})\), which is much smaller than the expected hitting time of \(S_{1}\). Thus, the event \(e(S_{i}) h(S_{1})\) occurs with a small probability.

Let us examine bound (3). Let \(Surprise\) be the set of all surprise sets. Note that \(Surprise\) is a random set. Then,

\[_{i=2}^{k}S_{i}=(K)(S_{i}) _{i=2}^{k}S_{i}=(K),\ S_{i} Surprise (S_{i})\] (5) \[+_{i=2}^{k}S_{i} Surprise(S_{i}).\]

We show in the next section (Lemma 3.3) that the second sum is upper bounded by \((S_{1})\). We now bound the first sum. For every winner \(S_{i}\) which is not a surprise set, we have \(e(S_{i}) h(S_{1})\) (because \(S_{i}\) is the winner) and \(h(S_{1}) L/(S_{i})\) (because \(S_{i}\) is not a surprise set). We also have \(S_{i}=(I^{-})\), thus

\[S_{i}=(K),\ S_{i} Surprise h(S_{1}) L/(S_{i})\ \ S_{i}=(I^{-}).\]

By Lemma 2.9, all hitting times \(h(S_{i})=_{ S_{i}}h()\) for \(i 2\) are independent from \(h(S_{1})\). Thus, \((I^{-})\) is also independent of \(h(S_{1})\) (\((I^{-})\) depends only on the hitting times for sets \(S_{i} I^{-}\)). Therefore,

\[S_{i}=(K),\ S_{i} Surprise h(S_{1}) L/(S_{i})S_{i }=(I^{-})\] \[=1-e^{-L(S_{1})/(S_{i})}}_{ L (S_{1})/(S_{i})}S_{i}=(I^{-})\] \[S_{i}=(I^{-}) L (S_{1})/(S_{i}).\]

We combine all bounds on terms of (5) and get the following bound on the expected cost of the game:

\[(S_{1})+_{i=2}^{k}S_{i}=(I^{-}) L (S_{1})+(S_{1})=(L+2)(S_{1})=( k+2)(S_{1}).\]

This concludes the proof of the theorem for the case when \(S_{1}\) does not overlap with \(S_{2},,S_{k}\). We now analyze surprise sets.

### Surprise Sets

In this section, we prove a bound on the probability that a set \(S_{i}\) is a surprise set. We no longer assume that \(S_{1}\) does not intersect with other sets \(S_{i}\). We first show a lemma about exponential random variables.

**Lemma 3.2**.: _Let \(X\) and \(Y\) be two independent exponential random variables with positive parameters \(_{X}\) and \(_{Y}\), respectively. Then, for every \(T 0\), we have_

\[Y X T=}{_{X}+_{Y}}  e^{-(_{X}+_{Y})T}.\] (6)

Proof.: The desired probability can be easily found by computing \(_{T}^{}(F_{X}(t)-F_{X}(T))f_{Y}(t)dt\), where \(F_{X}(t)=1-e^{-_{X}t}\) is the cumulative distribution function of \(X\), and \(f_{Y}(t)=_{Y} e^{-_{Y}t}\) is the probability density function of \(Y\). Here, we give an alternative proof. Write,

\[Y X T =Y X\ \&\ (X,Y) T\] \[=X Y(X,Y) T( X,Y) T.\]

We have \((X,Y) T=e^{-(_{X}+_{Y})T}\), because the minimum of two independent exponential random variables with parameters \(_{X}\) and \(_{Y}\) is an exponential random variable with parameter \(_{X}+_{Y}\). Then, \(X Y(X,Y) T=X Y\) because the exponential distribution is memoryless; and \(X Y=_{X}/(_{X}+_{Y})\). 

**Lemma 3.3**.: _For every set \(S_{i}\), we have_

\[(S_{i}))}{(S_{i})}.\]Proof.: First, we show that \((e(S_{i}),h(S_{1})) h(S_{i} S_{1})\).

**Claim 3.4**.: _We always have \((e(S_{i}),h(S_{1})) h(S_{i} S_{1})\)._

Proof.: Consider an arbitrary realization of the game and the time \(t=h(S_{i} S_{1})\) when \(S_{i} S_{1}\) is hit. If by this time, \(S_{1}\) has already been hit then \(h(S_{1})<t\). Similarly, if by this time, \(S_{i}\) has already been eliminated then \(e(S_{i})<t\). Otherwise, both \(S_{1}\) and \(S_{i}\) are still remaining in the game at time \(t\). Therefore, when we pick \( S_{i} S_{1}\) at time \(t\), set \(S_{i}\) gets eliminated (since \( S_{i}\); \( S_{1}\); both \(S_{1}\) and \(S_{i}\) are remaining in the game). Thus, in this case, \(e(S_{i})=t\). This concludes the proof. 

If \(S_{i}\) is a surprise set, then \((e(S_{i}),h(S_{1}))=h(S_{1}) L/(S_{i})\). By Claim 3.4, we have

\[h(S_{i} S_{1})e(S_{i}),h(S_{1})=h(S_{1}) L /(S_{i}).\]

Thus, \((S_{i})h(S_{i} S_{1}) h(S_{1})  L/(S_{i})\). By Lemma 3.2 applied to the independent exponential random variables \(h(S_{1})\), \(h(S_{i} S_{1})\), and time \(T=L/(S_{i})\), we have

\[(S_{i}))}{(S_{i} S_{1}) +(S_{1})} e^{- S_{1})+(S_{1}))}{(S_{ i})}})}{(S_{i})}.\]

### General Case

Proof of Theorem 2.1.: We upper bound the expected cost of the game for arbitrary sets \(S_{1},,S_{k}\). As before, we assume that \(S_{1}\) is the smallest set. We remind the reader that each hitting time \(h(S_{i})\) is an exponential random variable with parameter \((S_{i})\). In the proof, we will use the definitions of surprise sets (see Definitions 3.1). We also set \(L= k\). We define all sets \(S_{i}\) for \(i 1\) that are not a surprise set to be non-surprise sets.

We separately upper bound the cost of the winner depending on whether the winner is (a) set \(S_{1}\), (b) surprise set, (c) non-surprise set. Write

\[((K)) =((K))\{ (K)=S_{1}\}\] (a) \[+((K))\{ \}\] (b) \[+((K))\{ \}.\] (c)

Term (a) is upper bounded by \((S_{1})\). We bound term (b) using Lemma 3.3: The probability that a set is a surprise set is at most \(}{{k}}(S_{1})/(S_{i})\). Thus, the expected total measure of all sets (not only the surprise winner) is upper bounded by \(_{i=2}^{k})}{(S_{i})}(S_{i})<(S_{1})\).

We now bound term (c). Define a new random variable: Let \(()\) be the cost of the winner (i.e., \((S_{i})\), where \(S_{i}\) is the winner) if (1) the winner is a non-surprise set, and (2) \(\) is the first element that was chosen in \(S_{1}\). We let \(()=0\), otherwise. If \(\) is the first element that was chosen in \(S_{1}\), then \(h(S_{1})=h()\). So, the definition of \(()\) can be written as follows:

\[()=((K))\{h(S_{1})=h( )\}\{(K) Surprise\}.\]

Since the hitting time \(h(S_{1})\) is finite with probability \(1\), the term (c) equals

\[(c)=_{ S_{1}}[()].\]

Lemma 3.5, which we prove below, gives a bound of \(2L(S_{1})\) on the expression above. Combining upper bounds on terms (a), (b), and (c), we get

\[((K))(1+2L+1)(S_{1})=(2 k+2 )(S_{1}).\]

**Lemma 3.5**.: _For every \( S_{1}\), we have \([()] 2L()\)._Proof.: We have

\[[()]=((K)) \{h(S_{1})=h()\}\{(K) Surprise\} .\] (7)

If \(S_{i}\) is a non-surprise set, then \(h(S_{1})<L/(S_{i})\) or \(e(S_{i})<h(S_{1})\). If \(S_{i}\) is the winner, then \(e(S_{i}) h(S_{1})\). Thus, if \(S_{i}\) is a non-surprise winner, then \(h(S_{1})<L/(S_{i})\). This observations gives us the following upper bound on (7):

\[\,()_{i=2}^{k}(S_{i}) S_{i}=(K)h()=h(S_{1})<L/(S_{i}).\] (8)

Define two set systems \(I_{}^{-}\) and \(I_{}^{+}\) of sets \(S_{i}\) containing and not containing \(\):

\[I_{}^{-} =\{S_{i}: S_{i}i 2\};\] \[I_{}^{+} =\{S_{i}: S_{i}i 2\}.\]

Note that \(K\{S_{1},,S_{k}\}=\{S_{1}\} I_{}^{-} I_{}^{+}\). By Lemma 2.5,

\[(K)S_{1},(I_{}^{-}),(I_{}^{+})}.\]

Observe that if \(S_{i}\) with \(i 2\) is the winner, then \(S_{i}=(I_{}^{-})\) or \(S_{i}=(I_{}^{+})\). We replace the condition \(S_{i}=(K)\) with \(S_{i}\{(I_{}^{-}),(I_{}^{+})\}\) in (8) and get bound:

\[\,()_{i=2}^{k}(S_{i}) S_{i}\{(I_{}^{-}),(I_{ }^{+})\}h()<)}.\]

The key observation now is that sets \((I_{}^{-})\) and \((I_{}^{+})\) are independent of \(h()\). This is the case, because sets remaining in the competitions \(_{n}(I_{}^{-})\) and \(_{n}(I_{}^{+})\) do not change when we select \(\). The set \(_{n}(I_{}^{-})\) does not change in the round \(n\) when \(\) is chosen because all sets \(S_{i}\) in \(_{n}(I_{}^{-}) I_{}^{-}\) do not contain \(\). The set \(_{n}(I_{}^{+})\) does not change in this round because all sets \(S_{i}\) in \(_{n}(I_{}^{+}) I_{}^{+}\) contain \(\) and consequently when \(\) is chosen, none of these sets is removed from \(_{n}(I_{}^{+})\) (otherwise, \(_{n}(I_{}^{+})\) would become empty). Thus,

\[\,()_{i=2}^{k}(S_{i}) S_{i}\{(I_{}^{-}),(I_{ }^{+})\}h()<)}.\]

Using that \(h()\) is an exponential random variable with parameter \(()\), we get (for every \(i\))

\[(S_{i})h())}=(S_{i}) 1-e^{-L)}}(S_{i}) L )}=()L.\]

Hence,

\[\,()()L_{i=2 }^{k}S_{i}\{(I_{}^{-}),(I_{ }^{+})\}.\]

The sum on the right hand side is at most \(2\). Thus, \([()] 2L()\).