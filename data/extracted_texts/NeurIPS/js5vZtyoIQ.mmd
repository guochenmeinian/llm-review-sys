# EGODE: An Event-attended Graph ODE Framework

for Modeling Rigid Dynamics

 Jingyang Yuan\({}^{1}\)  Gongbo Sun\({}^{2}\)  Zhiping Xiao\({}^{3}\)\({}^{*}\)  Hang Zhou\({}^{4}\)  Xiao Luo\({}^{5}\)\({}^{*}\)

Junyu Luo\({}^{1}\)  Yusheng Zhao\({}^{1}\)  Wei Ju\({}^{1}\)  Ming Zhang\({}^{1}\)\({}^{*}\)

\({}^{1}\)School of Computer Science, State Key Laboratory for Multimedia

Information Processing, PKU-Anker LLM Lab, Peking University

\({}^{2}\)University of Wisconsin-Madison \({}^{3}\)University of Washington

\({}^{4}\)University of California, Davis \({}^{5}\)University of California, Los Angeles

yuanjy@pku.edu.cn, gsun43@wisc.edu, patxiao@uw.edu, hgzhou@ucdavis.edu, xiaoluo@cs.ucla.edu, luojunyu@stu.pku.edu.cn, yusheng.zhao@stu.pku.edu.cn, juwei@pku.edu.cn, mzhang_cs@pku.edu.cn

Corresponding authors.

###### Abstract

This paper studies the problem of rigid dynamics modeling, which has a wide range of applications in robotics, graphics, and mechanical design. The problem is partly solved by graph neural network (GNN) simulators. However, these approaches cannot effectively handle the relationship between intrinsic continuity and instantaneous changes in rigid dynamics. Moreover, they usually neglect hierarchical structures across mesh nodes and objects in systems. In this paper, we propose a novel approach named Event-attend Graph ODE (EGODE) for effective rigid dynamics modeling. In particular, we describe the rigid system using both mesh node representations and object representations. To model continuous dynamics across hierarchical structures, we use a coupled graph ODE framework for the evolution of both types of representations over a long period. In addition, to capture instantaneous changes during the collision, we introduce an event module, which can effectively estimate the occurrence of the collision and update the states of both mesh node and object representations during evolution. Extensive experiments on a range of benchmark datasets validate the superiority of the proposed EGODE compared to various state-of-the-art baselines. The source code can be found at https://github.com/yuanjypku/EGODE.

## 1 Introduction

Physics simulations  can benefit researchers from many fields by guiding experiments and testing their theories . Among them, simulating rigid collisions has received extensive attention with applications in robotics  and graphics . However, high-quality physical simulations usually require complicated computing, which requires extensive computational resources. To solve this issue, data-driven approaches  that aim to leverage machine learning for efficient simulators are becoming increasingly popular within the recent years.

In literature, a variety of existing approaches have been proposed to model physical systems . Early attempts usually focus on simulations on regular grids  and use convolutional neural networks (CNNs). However, in real-world scenarios, objects are rarely located in regular ways . To increase the applicability, many current works use irregular mesh points  to describe objects in physical systems and utilize graph neural networks (GNNs)  to capture the interactions between mesh points. In particular, they adoptan encoder-processor-decoder architecture, which first maps observations of each mesh point at the current time step into the latent space, and then follows the message-passing mechanism  to update node representations iteratively. Finally, a decoder is utilized to generate the predicted trajectories.

Despite their notable process, these approaches  suffer from three basic obstacles, which could seriously degrade the forecasting performance. **Firstly**, the majority of existing approaches  utilize a rollout process to model dynamical systems, which take the predictions at the next time as the input in an autoregressive process. The discrete rollout process makes it difficult to capture the long-term tendency and continuous evolution of complex physical systems. **Secondly**, aside from the continuous evolution, rigid dynamics would face instantaneous changes  caused by contact dynamics at certain time steps,whereas the existing approaches often fail to take it into consideration. Therefore, we are required to build a model that can precisely capture the relationships between the dominant continuous evolution and instantaneous changes in complicated rigid-body systems. **Thirdly**, since each object is described by multiple mesh nodes, rigid-body systems intrinsically consist of hierarchical structures across mesh nodes and objects, which increases the difficulty of modeling rigid dynamics.

To address the aforementioned obstacles, in this paper, we propose a novel framework named Event-attend Graph ODE (EGODE) for modeling rigid dynamics. The core idea of our EGODE is to understand the continuous evolution and instantaneous changes in rigid-body systems. To model the hierarchical structures, we introduce both mesh node representations and object representations. To model the continuous dynamics, we adopt its neighbor mesh nodes and the related object to drive the evolution of mesh node representations. Meanwhile, global object representations and the summarized local information jointly determine the evolution of objects. To model the instantaneous changes, we introduce an event module, which estimates the next time when the collision occurs, and then updates both the mesh node representations and the object representations in an iterative manner. Finally, we minimize the standard mean square error (MSE) at both node and object levels. We conduct extensive experiments on a range of benchmark datasets. A comparison of our EGODE with other baselines on the Physion dataset is depicted in Figure 1. The experimental results can validate the superiority of the proposed EGODE over a wide range of competing baselines.

In summary, the contributions of the paper are three-fold: (1) We provide a new perspective of modeling both continuous evolution and instantaneous changes to study rigid dynamics. To the best of our knowledge, we make the first attempt using graph ODE to simulate rigid-body systems. (2) Our EGODE not only utilizes a coupled graph ODE to jointly model the continuous evolution of both mesh nodes' representations and objects' representations, but also introduces an event module to estimate the collision times for instantaneous updating. (3) Comprehensive experiments including

Figure 1: Visualizations of predictions on Physion dataset. EGODE demonstrate the best capability to generate accurate trajectories across diverse scenarios.

quantitative comparison and visualization on different benchmark datasets demonstrate the superiority of our proposed EGODE over a wide range of competing approaches.

## 2 Related Work

**Data-driven Physical Simulation.** To facilitate physical simulations in different areas, a wide range of researchers leverage machine learning to build effective data-driven simulators [47; 54; 52]. Early attempts usually adopt convolutional neural networks (CNNs) to model physical systems with grid structures . To increase the flexibility of simulators, recent efforts have focused on building simulators on irregular grids [47; 20; 52], which usually leverage graph neural networks (GNNs)  to model the interaction between objects. For example, MeshGraphNet  adopts an encoder-processor-decoder architecture to predict the next states for effective mesh-based simulations. EGNN  considers the subequivariance of physical systems during the message passing process. GNS  have validated the potential of graph neural networks for modeling rigid dynamics. However, these approaches cannot handle intrinsic continuity and discontinuity in rigid models while our EGODE is the first work to introduce graph ODE for effective rigid dynamical modeling.

**Graph Neural Networks.** Graph neural networks (GNNs) [28; 26; 25] have been shown efficient in a wide range of vision tasks including cross-modal learning [67; 60], object detection [33; 56] and transfer learning [15; 17; 66; 34; 35]. These approaches usually follow the paradigm of message passing , which updates the central nodes by aggregating their neighborhood information iteratively. Through this process, GNNs can learn from geometric structures for downstream tasks. By combining GNNs with neural ODEs , a range of continuous GNNs [48; 64; 49; 61] have been developed, which model the neighborhood aggregation in a continuous way. For example, GDERec  combines neural ODE with an attention-based GNN to model the interaction signals in recommender systems. However, these approaches usually neglect the instantaneous change in interacting dynamical systems . To handle this, we propose a new continuous GNN framework named EGODE, which can model the instantaneous updating in rigid-body systems.

**Neural Ordinary Differential Equations (ODE).** Compared with classic deep neural networks, neural ODEs  aim to include continuous layers rather than discrete ones with extensive applications [44; 7; 63; 4; 21; 8]. The updating rule of neural ODE is accelerated by incorporating adjoint functions with neural ODE solvers . Recently, a range of approaches [10; 14; 41] have been proposed to improve the effectiveness of neural ODE, including augmenting the dimension  and regularization terms [14; 41]. Neural ODEs have been adopted to model multi-agent dynamical systems [23; 24; 37; 36], which can deal with irregularly sampled data and partial observations. In this paper, we propose a novel neural ODE framework EGODE, which can model both instantaneous updating and continuous evolution in rigid-body systems.

## 3 Methodology

### Problem Definition

We assume that a rigid-body physical system consists of \(M\) objects with \(N\) mesh points. The state information of each mesh node \(i\), \(1 i N\), includes the observation vectors (i.e., the position vector \(_{i}^{t}\) and the velocity vector \(_{i}^{t}\) at time t) and static vectors \(_{i}\) (e.g., friction of the floor) unrelated to the geometric context. The graph structure is constructed based on positions of mesh nodes, i.e., \(^{t}=\{V,E^{t}\}\) where \(V\) collects all the mesh points and \(E^{t}\) consists of all the edges at the time step \(t\). Following previous works , we build an edge when the distance between two mesh points is below a given threshold, making up the edge set \(E^{t}\). Given the initial states \(^{0}\), we aim to predict the future trajectories \(^{1:T}\) where \(^{t}\) denotes the position matrix at the time step \(t\).

### Framework Overview

In this work, we study the problem of modeling rigid-body physical systems, which is challenging due to the hierarchical evolution of systems and instantaneous changes from collisions. Towards this end, we introduce a new framework named EGODE, which models the evolution of physical systems in a continuous manner with the consideration of instantaneous events. In particular, EGODE first drives the dynamics of mesh nodes using both its surrounding mesh nodes and the associated object.

Moreover, the object-level dynamics is driven by local node information and global system states. To effectively capture the instantaneous collision, we introduce a learnable event module, which detects the potential collision time and updates the instantaneous change iteratively during ODE evolution. An overview of the proposed EGODE can be found in Figure 2 and the details are introduced below.

### Coupled Graph ODE

Previous works [20; 52; 47] usually adopt graph neural networks (GNNs)  to predict the states of objects at the next step, followed by autoregressive iterations for long-term predictions. However, these approaches cannot capture the long-term tendency and continuous evolution in physical systems . Towards this time, we introduce a graph ODE framework, which can capture continuous dynamics in interacting systems naturally. Moreover, since we have both objects and mesh nodes in rigid-body systems, our ODE framework consists of a coupled architecture, which models hierarchical structures in a unified way [24; 68; 20].

In particular, we first initialize each latent state using the static vector, and then concatenate all the dynamical vectors with it for each node into a new vector \(_{i}^{t}\) as follows:

\[_{i}^{t}=[_{i}^{t},_{i}^{t},_{i}^{t}],\] (1)

where \(_{i}^{t}\) denotes the corresponding hidden state with \(_{i}^{0}=_{i}\). To model the continuous evolution, we introduce a neural graph ODE framework by combining neural ODE  with GNNs. Our graph ODE drives the dynamics of the system using the interaction between each node and its neighbors. Formally, we have:

\[_{i}^{t}}{dt}=^{l}(_{j^{t}(i)}^{l}( {r}_{i}^{t},_{j}^{t})),\] (2)

where \(^{t}(i)\) collects the neighbors of mesh node \(i\) at the time step \(t\). \(^{l}(,)\) aims to capture the interaction between each object and its neighbors and \(^{l}()\) produces the summarized influence from the neighborhood to drive the evolution of the system. Moreover, in rigid-body systems, there are naturally hierarchical structures ranging between mesh nodes and objects. To model the hierarchy effectively, we introduce the states at the object level, by calculating the average of their corresponding observation vectors. In formulation, the object-level vectors can be initialized as follows:

\[}_{c_{j}}^{0}=_{i:o(i)=j}_{i}^{0},\] (3)

Figure 2: Overview of EGODE. We employ a coupled graph ODE framework with an event module for collision modeling. The coupled graph ODE structure naturally captures the continuous dynamics inherent in interacting systems. \(r_{i}^{t}\) and \(_{c_{j}}^{t}\) represents feature of mesh node and object node at time \(t\), respectively. Complementarily, the event module is designed to effectively handle potential instantaneous changes, such as those arising from collisions.

\[}^{0}_{c_{j}}=_{i:o(i)=j}^{0}_{i},\] (4)

where \(o(i)\) returns the object \(j\) corresponding to the mesh point \(i\). We also utilize \(}^{t}_{c_{j}}\) to denote the latent object representation of each object and have \(}^{t}_{c_{j}}=[}^{t}_{c_{j}},}^{t}_{c_{j }},}^{t}_{c_{j}}]\), which is then incorporated into the evolution of all its corresponding nodes. In other words, we re-write Equation 2 into:

\[^{t}_{i}}{dt}=^{l}([_{i^{}^{t}(i)} ^{l}(^{t}_{i},^{t}_{i^{}}),}^{t}_{c_{j}}]),\] (5)

where \(}^{t}_{c_{j}}\) can provide high-level semantics for dynamics modeling. To obtain \(}^{t}_{c_{j}}\), we include another graph ODE to drive the evolution at the object level. Here, we not only connect each object with all the other objects in the system for global understanding, but also learn from its corresponding mesh node for local information. In formulation, we have:

\[}^{t}_{c_{j}}}{dt}=^{g}([_{j=1}^{M}^{g}( {}^{t}_{c_{j}},}^{t}_{c_{j^{}}}), _{i:o(i)=j}^{t}_{i}]),\] (6)

where \(^{g}()\) and \(^{g}(,)\) are two learnable functions to object-level updating with different parameters, \(M\) is the number of objects. In the right hand, the first term calculates the interaction between different objects and the second term summarizes the states of its associated node presentations. In the end, we combine both Equation 5 and Equation 6 to jointly solve the coupled ODE, which can not only model the continuous evolution in physical systems, but also output the trajectory at any time step. The whole coupled ODE can be solved by traditional neural ODE solver .

### Event Module for Collision Modeling

We have introduced a graph ODE framework to model the continuous evolution in physical systems. However, rigid-body dynamical systems [20; 1; 2] could include instantaneous change during the collision between objects. In this case, our coupled graph ODE could be incapable of sufficiently modeling these discontinuous systems. To tackle this, we include a learnable event module to estimate the time of potential collision, which can guide the adjustment to the states of different mesh points and objects [8; 51; 47].

One basic solution to model the event (i.e., collision) occurrence is to utilize prior knowledge (e.g., shapes of objects) as well as position information, which could be unavailable in real-world applications. As a consequence, to make our data-driven model more generalized, we utilize a learnable event function condition on the pairwise states of mesh points, which can be formalized as \(g(t,[^{t}_{i},^{t}_{i},^{t}_{i^{}},^{t}_{i^{ }}])\). This event function is capable of continuously detecting the time when the collision between mesh nodes \(i\) and \(i^{}\) occurs using the following equation:

\[g(t,[^{t}_{i},^{t}_{i},^{t}_{i^{}},^{t}_{i^{ }}])=0.\] (7)

Note that event fucntion is only calculated between point-pairs whose distance is within a threshold to avoid square complexity. After solving Equation 7 using the neural ODE solver, we can obtain the collision time \(t^{*}\). Note that in rigid-body systems, the collisions of mesh nodes from different objects would bring in instantaneous change on all the mesh nodes in their related objects. Here, we update the states of observations using the current states and the object that it collides with. In formulation, the vector after the collision can be written as:

\[^{t*}_{i}=^{l*}([_{j^{t*}(i)}^{l*}(^{t* }_{i},^{t*}_{j}),}^{t*}_{c_{j}}]).\] (8)

Here, \(^{t*}(i)\) collects all the mesh nodes belonging to the object that it collides with, and \(^{l*}()\) and \(^{l*}()\) are two new learnable functions for instantaneous updating. Through this, we involve an immediate updating at the time step \(t^{*}\) from \(^{t*}_{i}\) to \(^{t*+}_{i}\), which can simulate the collision between different objects. Similarly, we can update the state of each object as:

\[}^{t*+}_{c_{j}}=^{g*}([^{g*}(}^{t*}_{c_{j}}, }^{t*}_{c_{j^{}}}),_{i:o(i)=j} ^{t*}_{i}]),\] (9)where \(j^{}\) denotes the object to have the collision with \(j\), and \(^{g*}()\) and \(^{g*}()\) are for object-level instantaneous updating. The first term calculates the collision between two objects and the second term models the average of updated mesh node representations. Finally, the whole event-attended graph ODE can be solved by iteratively calculating the next collision using graph ODE and updating the corresponding state with Equation 8 and Equation 9. In this way, we integrate the instantaneous updating into the ODE-based continuous evolution to model the rigid dynamics.

### Training Objective

To optimize our graph ODE framework, we first output the observation at different time steps and then minimize the standard mean square error (MSE) loss between the predicted trajectories \(}^{t}\) and the ground truth \(^{t}\):

\[^{l}=_{t=T_{0}+1}^{T}||}^{t}-^{t}||_{2}^{2}.\] (10)

Moreover, we minimize the MSE loss at the object level as:

\[^{g}=_{t=T_{0}+1}^{T}||}^{t}_{c}-}^{t}_{c }||_{2}^{2},\] (11)

where \(}^{t}_{c}\) is the predicted object-level matrix and \(}^{t}_{c}\) denotes the ground truth. Finally, we combine both Equation 10 and Equation 11 as:

\[=^{l}+^{g},\] (12)

where \(\) is a parameter to balance the losses. The whole updating algorithm can be summarized in Algorithm 1.

```
0: Observation data, Future ground truth
0: Graph ODE framework;
1: Initialize the vectors \(^{0}_{i}\) and \(}^{0}_{i}\);
2:repeat
3: Forwarding our coupled graph ODE Equation 5 and Equation 6;
4: Solve Equation 7 to estimate the collision time during the iterative computation of the ODE;
5: Update both node representations and object representations using Equation 8 and Equation 9;
6:until\(t>T\)
7: Calculate the loss objective in Equation 12;
8: Update the parameters of graph ODE framework; ```

**Algorithm 1** Updating Algorithm of EGODE

## 4 Experiments

### Experimental Settings

_Datasets._ Our proposed model EGODE is evaluated on two physical dynamics datasets, i.e., Rigid-Fall  and Physion . RigidFall simulates collisions and interactions between three rigid cubes during falling under a varying gravitational acceleration. Physion, a large-scale dataset and benchmark for physical system interaction evaluation, models both rigid and soft-body collisions for 8 distinct scenarios, which are Dominoes, Contain, Collide, Drop, Roll, Link, Support, and Drape. Each scenario consists of 2000 training trajectories and 150 testing simulations. The two datasets both treat objects as assemblies of particles.

_Baselines and metrics._ We compare the performance of EGODE with a range of classical methods and state-of-art methods including MLP, RNN, SocialODE , GNS , DPI-Net , EGNN , GMN , SGNN , and SEGNO . We utilize two evaluation metrics: i.e., Contact prediction accuracy and Mean Square Error (MSE).

_Implementation Details._ We implement our baseline models using Pytorch  and torchdiffeq . We adopt the same hyper-parameters and training strategy for both Physion and RigidFall datasets as mentioned by SGNN . In our method, we initialize all MLP layers with a hidden size of 200. An Adam optimizer with the initial learning rate of 0.0001 is adopted during training. We also employ an early stopping strategy of 10 epochs according to validation loss. The batch size is set to 1 for Physion and 8 for RigidFall dataset. To ensure a fair comparison, we initialize all baseline models' parameters based on corresponding papers and then fine-tune them to achieve the best results.

### Performance Comparison

The comparison results for Physion and RigidFall datasets are shown in Table 1 and Table 2 accordingly. For the RigidFall dataset, we follow the comparison strategy of SGNN to assess the model's performance with different sizes of the training dataset. From the results, we have three observations. _Firstly_, although the best baseline varies between the datasets, it is generally observed that hierarchical models outperform particle-level models, which confirms that hierarchical methods inherently capture the intrinsic attributes in rigid-body systems and reduce the difficulty of modeling dynamics. _Secondly_, our EGODE demonstrates highest contact prediction accuracy over all baseline models in Physion dataset. In particular, compared to the best baseline SGNN on Dominoes and Collide scenario, our proposed EGODE achieved an increase in prediction accuracy of 5.9% and 4.5%, respectively. _Thirdly_, we observe our EGODE has more robust prediction results than baseline models in long-period prediction on RigidFall dataset, with just a small-scale training set. We attribute the remarkable performance of the proposed EGODE to three key reasons: (1) Introduction of neural ODE in EGODE, provides superior generalization for dynamic systems, especially in long-term prediction scenarios. The neural ODE allows for more accurate modeling for continuous systems, thereby enhancing the overall performance of our model. (2) Introduction of a coupled architecture.

  
**Methods** & Dominoes & Contain & Link & Drape & Support & Drop & Collide & Roll \\  MLP & 52.5o.4 & 58.2a.10 & 52.3o.7 & 51.9o.2 & 54.2o.8 & 52.5o.4 & 65.4a.11 & 72.8a.0.5 \\ RNN & 52.2o.5 & 57.41.1 & 53.1o.9 & 52.3o.3 & 53.8o.6 & 53.4o.4 & 68.4a.10 & 74.5o.4 \\ SocialODE & 53.2o.7 & 59.1a.1 & 54.2a.1 & 53.5o.8 & 55.8o.8 & 53.1o.8 & 69.2o.9 & 75.3o.4 \\ GNS & 74.8a.1 & 72.6a.1 & 61.0a.7 & 57.4a.1 & 64.8a.1 & 63.7o.7 & 83.8o.7 & 78.2a.2 \\ DPI & 70.6o.7 & 70.7a.1 & 66.3a.2 & 65.2a.1 & 65.6o.0 & 72.8a.0 & 82.2a.1 & 79.9a.6 \\ EGNN & 70.8a.1 & 67.5a.1 & 79.2a.0 & 54.1a.1 & 55.3a.1 & 69.3a.1 & 79.7a.4 & 80.9a.0 \\ GMN & 54.61.0 & 66.6a.1 & 50.7a.5 & 50.0a.2 & 61.8a.2 & 56.2a.1 & 81.0o.7 & 80.2a.9 \\ SGNN & 88.8a.2 & 78.3a.1 & 72.6a.1 & 60.6a.5 & 71.4a.3 & 73.9a.1 & 83.0a.1 & 84.2a.0 \\ SEGNO & 88.2a.1 & 76.2a.1 & 73.5a.1 & 59.4a.0 & 68.3a.1 & 72.8a.0 & 85.5a.1 & 82.4a.0 \\  EGODE & **94.7a.1** & **79.0a.1** & **75.0a.1** & **61.7a.0** & **71.7a.0** & **75.3a.1** & **90.0a.1** & **85.7a.0** \\   

Table 1: Results of compared methods on Physion (Accuracy%). **Bold** numbers highlight the best performance and \(\) represents the standard deviation.

Figure 3: Visualizations of predictions on the RigidFall Dataset. EGODE demonstrates the best capability to generate accurate trajectories.

Our EGODE incorporates both objects and mesh nodes in the rigid body, enabling effective modeling of the dynamic system. (3) Introduction of an event module for collision modeling helps EGODE effectively tackle complex and diverse instantaneous events in rigid body motion, thereby enhancing the performance across different scenarios.

### Ablation Study

We analyze our EGODE and evaluate the model's effectiveness in various aspects. In particular, we introduce three model variants as follows: (1) EGODE _w/o O_, which removes neural ODE; (2) EGODE _w/o C_, which removes coupled architecture; (3) EGODE _w/o E_, which removes event module for collision modeling; The results are presented in Table 3. We observe that removing any of the three components leads to an obvious drop in performance on most datasets and tasks. Notably, EGODE _w/o O_ causes the most performance degradation. This indicates the continuous method is insufficient to capture the intricate information inherent in rigid body dynamics. We can also conclude from the experiment results that the coupled architecture and event module are crucial for accurately predicting rigid body systems, by effectively aggregating local information, broadcasting global information, and modeling collision events.

### Sensitivity Analysis

In this section, we investigate how the hyperparameters, i.e. \(\) in Equation 12 and the distance threshold \(d\) for mesh graph construction. The results shown in Figure 4 indicate that the model achieves optimal performance when \(=1\) when other parameters are fixed. The experiments also suggest that our EGODE exhibits overall stability and robustness across different \(\). The impact of distance threshold \(d\) is also analyzed. When \(d\) is relatively small, it reduces the connectivity between mesh nodes within an object, hindering information propagation in the network. Conversely, when \(d\) is relatively large, redundant interactions might be introduced between objects, slightly affecting model performance. The optimal value of \(d\) is depending on the density of mesh nodes and the scale of the objects. Ultimately, we set \(=1\) and \(d=0.08\) respectively in our experiments.

### Generalization Performance

Since the latent embedding \(_{i}^{t}\) contains \(_{i}^{t},_{i}^{t},_{i}^{t}\), it is evident that the left-hand sides of Equation 5 and Equation 6 naturally encompass the acceleration \(d_{i}^{t}/dt\), thereby adhering to the fundamental

    & |=500\)} & |=1000\)} & |=5000\)} \\  & \(t=20\) & \(t=40\) & \(t=20\) & \(t=40\) & \(t=20\) & \(t=40\) \\  MLP & 3.25\(\)1.71 & 8.59\(\)4.54 & 2.05\(\)1.19 & 5.82\(\)3.43 & 1.45\(\)0.90 & 4.15\(\)2.68 \\ RNN & 2.87\(\)1.44 & 7.76\(\)0.94 & 2.00\(\)1.11 & 5.35\(\)2.11 & 1.47\(\)0.87 & 3.68\(\)2.37 \\ SocialODE & 2.32\(\)1.17 & 6.01\(\)1.35 & 1.45\(\)0.84 & 4.13\(\)2.35 & 1.03\(\)0.61 & 2.90\(\)1.87 \\ GNS & 2.21\(\)1.03 & 3.98\(\)2.09 & 1.28\(\)0.42 & 2.88\(\)2.32 & 0.95\(\)0.59 & 2.67\(\)1.06 \\ DPI & 1.62\(\)0.59 & 4.46\(\)2.41 & 0.71\(\)0.58 & 4.03\(\)2.76 & 0.51\(\)0.48 & 2.68\(\)2.36 \\ EGNN & 0.94\(\)0.96 & 2.98\(\)2.60 & 1.80\(\)0.51 & 2.79\(\)0.89 & 0.90\(\)0.47 & 2.84\(\)1.31 \\ GMN & 2.25\(\)1.00 & 5.42\(\)2.81 & 1.65\(\)1.65 & 5.45\(\)1.98 & 1.22\(\)0.76 & 2.65\(\)0.86 \\ SGNN & 0.32\(\)0.35 & 1.07\(\)1.23 & 0.32\(\)2.01 & 0.73\(\)0.85 & 0.19\(\)0.19 & 0.74\(\)1.37 \\ SEGNO & 0.64\(\)0.33 & 2.19\(\)1.15 & 0.60\(\)0.34 & 2.21\(\)1.30 & 0.38\(\)0.22 & 1.44\(\)0.92 \\  EGODE & **0.17\(\)0.10** & **0.71\(\)0.53** & **0.17\(\)0.13** & **0.49\(\)0.42** & **0.12\(\)0.11** & **0.46\(\)0.42** \\   

Table 2: Prediction MSE (\( 10^{-2}\)) of compared methods on RigidFall, **Bold** numbers highlight the best performance.

  
**Methods** & Dominoes & Contain & Link & Drape & Support & Drop & Collide & Roll \\  EGODE w/o O & 89.8\(\)1.7 & 78.5\(\)1.2 & 73.5\(\)1.2 & 60.8\(\)0.6 & 69.9\(\)0.7 & 74.1\(\)1.6 & 86.3\(\)1.2 & 84.2\(\)0.8 \\ EGODE w/o C & 90.7\(\)1.0 & 78.5\(\)1.8 & 74.2\(\)0.9 & 61.1\(\)0.8 & 70.4\(\)0.8 & 74.5\(\)1.5 & 88.0\(\)1.1 & 84.7\(\)0.9 \\ EGODE w/o E & 90.3\(\)1.5 & 78.5\(\)1.3 & 74.2\(\)1.1 & 60.9\(\)0.4 & 70.0\(\)1.1 & 74.3\(\)1.7 & 86.9\(\)0.7 & 84.5\(\)0.9 \\  EGODE & **94.7\(\)1.4** & **79.0\(\)1.3** & **75.0\(\)1.1** & **61.7\(\)0.6** & **71.7\(\)0.8** & **75.3\(\)1.3** & **90.0\(\)1.0** & **85.7\(\)0.8** \\   

Table 3: Comparisons between our EGODE and its variants on Physion.

form of Newton's second law. Consequently, by introducing a term representing external forces in Equation 5, we can effectively simulate the presence of additional external forces during the ODE integration process. The external force term in the above setting can be an arbitrary function of position, velocity, and object attribute. Therefore, by defining this term as various force field functions, EGODE can readily simulate the motion of rigid bodies under the influence of different external forces. Detailed formulations about the external force can be found in the Appendix A.

In our experiment, we employ the most common form of resistive force, which is proportional to velocity. We conduct experiments on the Collision scenario from the Physion dataset. As illustrated in Figure 5, when the resistive force is incorporated into the ODE simulation, a notable change in the motion dynamics is observed. In the ground truth, the blue cuboid possesses sufficient energy to collide with and topple the static objects. However, with the introduction of resistive force, the cuboid's velocity and kinetic energy are significantly consumed. These experimental results substantiate the efficacy of our ODE formulation in effectively modeling and transferring motion under the influence of force fields. This remarkable generalization capability stems from the inherent continuity and differentiability properties of our proposed EGODE.

## 5 Conclusion

In this paper, we investigate the problem of rigid dynamics modeling and propose a new approach named EGODE to solve the problem. Our EGODE uses both mesh node representations and object representations to describe the rigid system. More importantly, it adopts a coupled graph ODE architecture to capture the evolution of dynamical systems. To model the occurrence of collisions, EGODE adopts an event module that provides instantaneous updating for the states of mesh node and object representations. Extensive experiments of various benchmark datasets validate the superiority

Figure 4: Sensitivity analysis of our EGODE on Dominoes and Collide. The bar charts and error bars describe the accuracy and the 80% confidence intervals, respectively.

Figure 5: External force field simulation compared with ground truth.

of EGODE in comparison to different state-of-the-art methods. In future works, we will extend our EGODE to more real-world scenarios including fluid simulation and human trajectory forecasting.

**Broader Impacts and Limitations.** This study introduces an effective data-driven approach EGODE for modeling rigid dynamics, offering a new perspective on collision event modeling in rigid dynamics. One limitation of our work is that our EGODE is unable to accommodate rigid body hinges and deformable objects. Future works will extend EGODE to these more generalization scenarios.