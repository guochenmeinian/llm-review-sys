# Why Transformers Need Adam: A Hessian Perspective

Yushun Zhang\({}^{13}\), Congliang Chen\({}^{13}\), Tian Ding\({}^{23}\), Ziniu Li\({}^{13}\), Ruoyu Sun\({}^{123}\), Zhi-Quan Luo\({}^{13}\)

\({}^{1}\)The Chinese University of Hong Kong, Shenzhen, China

\({}^{2}\)Shenzhen International Center For Industrial And Applied Mathematics, Shenzhen, China

\({}^{3}\)Shenzhen Research Institute of Big Data, Shenzhen, China

{yushunzhang,congliangchen,ziniuli}@link.cuhk.edu.cn

dingtian@sribd.cn, sunruoyu@cuhk.edu.cn, luozq@cuhk.edu.cn

###### Abstract

SGD performs worse than Adam by a significant margin on Transformers, but the reason remains unclear. In this work, we provide an explanation through the lens of Hessian: (i) Transformers are "heterogeneous": the Hessian spectrum across parameter blocks vary dramatically, a phenomenon we call "block heterogeneity"; (ii) Heterogeneity hampers SGD: SGD performs worse than Adam on problems with block heterogeneity. To validate (i) and (ii), we check various Transformers, CNNs, MLPs, and quadratic problems, and find that SGD can perform on par with Adam on problems without block heterogeneity, but performs worse than Adam when the heterogeneity exists. Our initial theoretical analysis indicates that SGD performs worse because it applies one single learning rate to all blocks, which cannot handle the heterogeneity among blocks. This limitation could be ameliorated if we use coordinate-wise learning rates, as designed in Adam.1

## 1 Introduction

Transformers  have become a major workhorse behind AI development (e.g., ). However, the understanding of Transformer training remains limited. For instance, Transformer training largely relies on the Adam optimizer . In contrast, stochastic gradient descent with momentum (SGD)2, the de-facto optimizer for convolution neural networks (CNNs) , performs significantly worse than Adam on Transformers (e.g., Figure 3). Yet, the reasons behind this performance gap remain unclear. Understanding why SGD performs worse than Adam on Transformers is an intriguing question. **First,** from a theoretical perspective, this can help us better understand the training of Transformers and more generally, neural networks. **Second,** from a computational perspective, the understanding may inspire the design of better algorithms for training neural networks.

In this work, we explore why SGD largely underperforms Adam on Transformers through the lens of Hessian. We start by investigating the _full_ Hessian spectrum of Transformers, i.e., the full eigenvalue density of Hessian (see Figure 1). By theory, the full Hessian spectrum largely determines the behavior of gradient-based methods , so we suspect it may also help explain SGD's unsatisfactory performance. Using tools from numerical linear algebra , we empirically compare the full spectra of CNNs (where SGD is on par with Adam) and those of Transformers (where SGD largely lags behind Adam). Unfortunately, as shown in Figure 1, the spectra for CNNs and Transformers are often largely _similar_ despite the different optimizer behaviors. As such, we have _not_ identified critical features in the full Hessian spectra associated with the gap between Adam and SGD on Transformers. To reveal the cause, a more fine-grained investigation into the Hessian is needed.

What would cause SGD to perform significantly worse than Adam on Transformers, but not on CNNs? By dissecting the structures of CNNs and Transformers, we notice that CNNs are constructed by the repetitive stacking of _similar_ parameter blocks (convolution layers), while Transformers involve the non-sequential stacking of _disparate_ parameter blocks (e.g. Query, Key, Value, Output projection blocks in attention and MLP layers). We hypothesize that these architectural differences might lead to different optimization properties. Intuitively, disparate parameter blocks contribute differently to the overall loss. So each block might benefit from a specialized treatment by optimizers, a flexibility offered by Adam but not by SGD. This observation motivates us to investigate the Hessian spectrum of each parameter block, which we refer to as the blockwise Hessian spectrum.

By inspecting the blockwise Hessian spectrum, we discover a possible explanation for why SGD is worse: the "heterogeneity" inherent in Transformers. We provide both empirical and theoretical evidence to support this explanation. Our contributions can be summarized as follows:

* **Why SGD underperforms Adam on Transformers.** We explain why SGD is worse than Adam on Transformers by examining the blockwise Hessian spectrum. First, we identify a phenomenon called "block heterogeneity", which refers to the large differences in the Hessian spectra across parameter blocks. This block heterogeneity is observed in all examined Transformers but not in CNNs. Second, we verify that block heterogeneity hinders SGD. Across various Transformers, CNNs, and MLPs, we show that SGD consistently performs worse than Adam on problems with block heterogeneity but can perform similarly to Adam, otherwise.
* **Theoretical results on quadratic models.** We construct convex quadratic problems with and without block heterogeneity and find that gradient descent (GD) largely underperforms Adam on problems with block heterogeneity, but can perform comparably otherwise. Our theoretical analysis shows that GD can be slower than Adam on quadratic problems with block heterogeneity. We point out GD is slower than Adam because it uses a single learning rate for all blocks. The deficiency can be mitigated by assigning different learning rates across blocks, as Adam does.

We emphasize that we do _not_ claim block heterogeneity is the only cause for the performance gap between Adam and SGD, but just that it is at least one important cause. We verify, both empirically and theoretically, that SGD underperforms Adam when block heterogeneity is present.

## 2 Problem Settings and Initial Attempts

### Problem Settings

**Notations.** We denote the training loss as \((w)\), where \(w^{d}\) is the neural network parameters. We denote the gradient and Hessian of the training loss w.r.t. neural network parameters as \((w)^{d}\) and \(^{2}(w)^{d d}\), respectively. We use \([d]\) to denote the index set \(\{1,2,,d\}\). Given an arbitrary partition \(\{_{l}\}_{l=1}^{L}\) over \([d]\) with \(d_{l}|_{l}|\), we can split \(w\) into \(L\) parameter blocks \(\{w_{l}\}_{l=1}^{L}\), where \(w_{l}=^{d_{l}}\) consists of parameters with indexes in the \(l\)-th block \(_{l}\). We denote

Figure 1: The full Hessian spectra of CNNs (VGG16 and ResNet18) and Transformers (GPT2, GPT2-nano, and ViT-base) at different training stages. The \(x\)-axis records the eigenvalues and the \(y\)-axis records the frequency in the log scale. To allow comparison in the same figure, the plotted spectra are normalized by their 10th largest eigenvalues. We find that the spectra on CNNs and Transformers are largely similar.

\(^{d_{l} d_{l}}\) as the Hessian of \(l\)-th parameter-block \(w_{l}\), where \([^{2}(w)]_{l,i,j}=}{ w_{l,i} w _{l,j}}(w_{l})\). Note that \([^{2}(w)]_{l}\) is the \(l\)-th principal block sub-matrix of \(^{2}(w)\).

**Setups.** Hessian of large-scale NNs are intractable to compute and store. In this work, we apply a numerical tool called Stochastic Lanczos Quadrature method (SLQ)  to approximate the Hessian spectrum. SLQ uses a smooth curve on \(\) to approximate the histograms of eigenvalues (see Figure 1 as an example). A detailed introduction to SLQ is provided in Appendix C.2. All experimental setups are shown in Appendix D. We focus primarily on the following models/tasks.

* **CNNs.** We study ResNet18 (11M) and VGG16 (138M) on ImageNet [40; 78]. On these tasks, SGD performs on par with Adam. **See Figure 9 in Appendix B for the evidence.**
* **Transformers.** We study Transformer with various scales and modalities, including GPT2 (125M) on OpenWebText ; ViT-base (86M) on ImageNet ; BERT (40M) on Cornell Movie-Dialogs Corpus ; GPT2-nano3 (11M) on English corpus. On these tasks, SGD performs significantly worse than Adam. **See Figure 10 in Appendix B for the evidence.**

For each model, we estimated **(1)** the full Hessian spectrum \(^{2}(w)\), and **(2)** the blockwise Hessian spectrum \([^{2}(w)]_{l},l[L]\). For the latter, we split \(w\) according to the default partition in PyTorch implementation, e.g., Embedding layer, Query in each attention layer, Key in each attention layer, Value in each attention layer, etc. Note that the term "block" differs from the term "layer". For instance, Query and Key can reside in the same layer but are different parameter blocks.

### Full Hessian Spectrum Is Not Informative Enough

We study the full Hessian spectrum of Transformers for two reasons. First, as stated in Section 1, the Hessian spectrum significantly influences the behavior of gradient methods . Second, previous research shows that the Hessian spectrum provides insights into neural network phenomena, like BatchNorm's effect on training speed . Therefore, we hypothesize that the Hessian spectrum may also explain why SGD largely lags behind Adam on Transformers.

We compare the full Hessian spectra of CNNs (where SGD performs similarly to Adam) and those of Transformers (where SGD underperforms Adam), as shown in Figure 1. Unfortunately, the results suggest that the full Hessian spectrum alone may not suffice to explain the gap between Adam and SGD on Transformers. We elaborate as follows. The primary information in the spectrum lies in its (A) dispersion, (B) shape, and (C) evolution during training. Regarding (A), we observe that the eigenvalues are dispersed similarly across different models, with no notably large outlier for Transformers. Thus, dispersion does not seem to be related to why SGD is worse than Adam. We further investigate (B) and (C). For all CNNs and Transformers in Figure 1, we observe similar phenomena: the spectrum's shape is approximately symmetrical around 0 at initialization. As training proceeds, the majority of negative eigenvalues disappear, and the shape evolves into a combination of a "bulk" and some "outliers". Since the spectral shape and evolution are quite similar for both Transformers and CNNs, they cannot explain why SGD is worse than Adam on Transformers, either. In summary, we have not identified any critical phenomena in the full Hessian spectra that can be linked to the performance gap between Adam and SGD on Transformers.

### Motivations of Investigating Blockwise Hessian Spectra

What other factors could cause SGD to perform significantly worse than Adam on Transformers but not on CNNs? We identify one critical feature that has been overlooked in the full Hessian spectrum analysis above: **the building-up rules of Transformers.** As shown in Figure 3, CNNs are constructed by the repetitive stacking of _similar_ parameter blocks (convolution layers). In contrast, Transformers consist of _disparate_ parameter blocks, e.g. Query, Key, Value in attention, and MLP layers. Further, these blocks are stacked in a non-sequential manner. We hypothesize that the "different designs among parameter blocks" can be reflected in the Hessian of these parameter blocks, which might affect algorithmic behavior. This inspires us to investigate **the blockwise Hessian spectra**, i.e., the spectrum of principal blocks of Hessian \([^{2}(w)]_{l},l[L]\).

In parallel to the motivation above, we further provide another evidence that blockwise spectra might be helpful. Classical literature showed that the Hessians of neural nets are _near-block-diagonal matrices_, i.e., the magnitudes in the Hessian principle blocks are much larger than those in the off-diagonal blocks. We restate their findings in Figure 2 (a). This implies that the majority of Hessian information indeed lies in its principle blocks, and the blockwise Hessian of neural nets might contain valuable information.

To summarize, the "heterogeneous" building-up rules of Transformers inspire us to check the blockwise Hessian, i.e., the principle blocks of the Hessian. The classical results of neural nets  further support us to explore this direction since they find that the majority of Hessian information indeed lies in its principle blocks. In the following, we study the blockwise Hessian spectra of various neural networks. For ease of implementation, we define parameter blocks under the PyTorch partition. We show that the blockwise spectra indeed carry more information than the full spectrum for distinguishing CNNs and Transformers.

**Remark: why near-block-diagonal?** We briefly restate the analysis in [18, Section 7] to explain the near-block-diagonal Hessian structure of neural nets 4. Consider minimizing \((f(,x),y)\) where \((,)\) is the Cross-Entropy (CE) loss, \(f(,x)=_{i=1}^{n}v_{i}(w_{i}^{}x)\) is an 1-hidden-layer neural network with input \(x^{d}\), weight \(w_{i}^{d}\), \(v_{i}\), and label \(y\{0,1\}\), then the off-diagonal-block Hessian elements will contain

\[(f(,x),y)}{ w_{i} w_{j}}=p_{ }(y|x)(1-p_{}(y|x))v_{i}v_{j}^{}(w_{i} ^{}x)^{}(w_{j}^{}x)xx^{},\] (1)

where \(p_{}(y|x)=1/(1+(-yf(,x)))\) and \(^{}()\) is the derivative of \(()\). Note that the term \(p_{}(y|x)(1-p_{}(y|x))\) will vanish rapidly since the training objective is to maximize \(p_{}(y|x)\). Consequently, this drives the Hessian towards a near-block-diagonal configuration, with each block representing an output neuron. This result is validated in Figure 2: we find that the near-block-diagonal structure appears at 1% step and it maintains along the training.

## 3 Main Results

### Transformers Exhibit Block Heterogeneity in Hessian, while CNNs Do Not

We now compare the shape of blockwise spectra in VGG16  (CNN) and BERT  (Transformer). We sample four blocks for each model and present the spectra in Figure 3. In BERT, the spectra of embedding, attention, and MLP blocks are largely _different_. In contrast, in ResNet, the spectra of convolution layers are _similar_. We further verify this observation for the rest of the parameter blocks. We calculate the Jensen-Shannon (JS) distance between two eigenvalue densities of all possible block pairs and show the results in Figure 4. We summarize our findings in **Observation 1**.

Figure 3: **(a) (c)**: The blockwise Hessian spectra of VGG16 (CNN) and BERT (Transformer) at initialization. The \(x\)-axis records the eigenvalues and the \(y\)-axis records the frequency in the log scale. To allow comparison in the same figure, we sample 4 blocks in each model. The plotted spectra are normalized by their 10th largest eigenvalues. The spectra are similar among blocks for VGG and differ significantly across blocks for BERT. **(b) (d)** Adam v.s. SGD for training VGG16 and BERT.

Figure 2: **(a): The Hessian of an MLP after 1 training step reported in . (b,c,d): We calculate the Hessians of an MLP (with 8 neurons) at different training stages. We find the near-block-diagonal structure maintains along the training.**

**Observation 1:** For all Transformers we checked, the blockwise Hessian spectra are largely _different_ from each other. In contrast, the blockwise Hessian spectra of CNNs are _similar_.

In the following, we refer to the phenomenon of Transformers as "**block heterogeneity**", and refer to that of CNN as "**block homogeneity**". The observations in Figure 3 and 4 indicate that block heterogeneity is informative in distinguishing CNNs and Transformers. In the following, we will show that the block heterogeneity is strongly correlated with the performance gap between SGD and Adam on Transformers.

### SGD Performs Worse than Adam on Various Tasks with Block Heterogeneity

Figure 3 and 4 have shown that **(1)** SGD is worse than Adam on Transformers. **(2)** Transformers have block heterogeneity. Now we further link block heterogeneity to SGD's unsatisfactory performance on **non-Transformer** models. This would directly establish a connection between "block heterogeneity" and "why SGD is worse than Adam", without going through Transformers or attention blocks as an intermediary. We consider one man-made example and one real-world example.

**Example 1: A man-made MLP.** We consider a 4-layer MLP on MNIST and change the degree of heterogeneity by scaling each layer by constant \(c\). Figure 5 (a) shows SGD gradually performs worse than Adam as heterogeneity grows.

**Example 2: MLP-mixer.** We consider MLP-mixer , a famous all-MLP architecture that outperforms CNNs and ViTs on some vision tasks. Figure 5 (b) (c) show that the initial Hessian of MLP-mixer has block heterogeneity and SGD lags behind Adam on this architecture.

Figure 4: The JS distance among blockwise Hessian spectra at initialization. We find that the JS distance of blockwise spectra in CNNs is significantly smaller than that in Transformers.

Figure 5: (a) SGD v.s. Adam on a man-made MLP with different degrees of heterogeneity \(c\). Each point records the best-converged test accuracy under the learning rate grid search. SGD performs worse as heterogeneity grows. (b) The JS distance among blockwise Hessian spectra for MLP-mixer  at initialization. We observe heterogeneity. (c) SGD performs worse than Adam on MLP-mixer.

We summarize the findings so far in **Observation 2**.

**Observation 2:** For all tasks that we checked, SGD is worse than Adam when block heterogeneity exists, regardless of whether Transformers or attention mechanisms are utilized.

### Reduced Block Heterogeneity in Pre-trained Transformers

We remark that different Transformers exhibit different levels of block heterogeneity. Although all examined Transformers show strong block heterogeneity, we find that this heterogeneity can be mitigated, resulting in less performance deterioration for SGD. As illustrated in Figure 6, pre-trained GPT2 on SFT tasks can exhibit less block heterogeneity compared to pre-training GPT2 from scratch (Figure 4 (f)). In this case, although SGD is still slower than Adam, it achieves a similar loss at convergence. Compared with training GPT2 from scratch (Figure 10 (d) in Appendix B), the performance gap between SGD and Adam is significantly narrowed down. These findings suggest that the heterogeneity induced by architectural design can be alleviated by selecting "good" weights. This partly explains why simpler methods like SGD and even its zeroth-order version can still be effective for fine-tuning language models, albeit with slower convergence [59; 60].

In Figure 13 in Appendix B, we further report the evolution of the block heterogeneity of ViT-base along the training. Similarly to GPT2 in Figure 6, we find that the block heterogeneity of ViT-base tends to reduce after the training. In addition, we find that SGD can perform better when initializing at the weight with less heterogeneity, e.g., initializing at 50% total training steps. We hypothesize that "the attenuation of Hessian heterogeneity" is a common phenomenon after training, and we leave detailed investigation as a future direction.

**Observation 3:** Block heterogeneity in Hessian tends to reduce after (pre)-training.

### Implication on Choosing SGD or Adam

We have shown that SGD can largely underperform Adam on various architectures. This leads to an intriguing question: **Can we predict the incompetence of SGD before the training begins?**

Our findings can bring up an empirical guidance: we can compute the blockwise spectrum of initial Hessian, and then decide whether to use Adam or SGD. Such a method could be useful in scenarios in training large models that are not mainstream Transformers or CNNs, e.g., Mamba . In these cases, there is not much prior experience in choosing optimizers. It would be intriguing to decide whether SGD is suitable for the task before the training is launched. One might argue that simple trial is enough: try both SGD and Adam; if Adam is remarkably better, then pick Adam; if Adam and SGD are similar, then pick SGD. Nevertheless, this simple approach may not be easy for large models. First, for large models, it may take days to know one run of an algorithm is good or not. Second, it requires tuning hyperparameters at least a few times to get a reasonably good judgement, making the cost of trial even higher.

We here propose a quantitative metric that could predict the incompetence of SGD before the training. With the help of this metric, we could save much expense on the trial and error for SGD. The metric is simply the averaged JS distance among blockwise Hessian spectra at initialization, i.e., the averaged value in the heatmap of Figure 4. We denote it as \(JS^{0}\). We present \(JS^{0}\) of various models in Table 1. Note that \(JS^{0}\) establishes a quantitative difference between the loss landscape of Transformers and CNNs. Further, \(JS^{0}\) is independent of optimizers and could be checked before training.

Figure 6: We fine-tune GPT2 (pre-trained) on Alpaca Eval, and plot (a) the JS distance among blockwise Hessian spectra; (b) the training loss of SGD and Adam.

Finally, we remark \(JS^{0}\) is rather expensive to compute due to the overhead of SLQ: it requires comparable time to one training run. Fortunately, we find the original SLQ is rather redundant for measuring hessian heterogeneity. We propose some simple tricks to significantly reduce the computation time, while still effectively detecting the Hessian heterogeneity. We call it simplified SLQ and we present it in Table 3 in Appendix B. As a result, the simplified SLQ can obtain the same message as in Table 1 while only taking negligible time (e.g., \(<0.001\)s for ResNet18).

## 4 Case Study of Quadratic Models and Preliminary Theory

Now we study quadratic functions with block diagonal Hessian, with or without block heterogeneity. Note that insights on quadratic models could be important for understanding realistic NNs, as mentioned by researchers such as LeCun et al.  and OpenAI team .

**Setups and additional notations.** We consider the following quadratic minimization.

\[_{w^{d}}(w)=w^{T}Hw-h^{T}w,\]

where \(H^{d d}\) is positive definite and \(h^{d}\). We denote \(^{*}\) as the minimum value of \((w)\). We set \(H\) as a block diagonal matrix: \(H=(H_{1},,H_{L})\), where \(H_{l}^{d_{i} d_{l}}\) and \(d=_{l=1}^{L}d_{l}\). We use \(w_{l}^{d_{l}}\) to denote the variable in the \(l\)-th block and \(w=(w_{1}^{T},,w_{L}^{T})^{T}^{d}\). Similarly for \(h_{l}^{d_{l}}\). Similarly, we use \([ L(w)]_{l}^{d_{l}}\) to denote the gradient in the \(l\)-th block and denote \([(w)]_{l}=(w_{l}^{t})^{T}H_{l}w_{l}^{t}-h_{l}^{T}w_{l}\) as the objective function w.r.t. the \(l\)-th block. Note that \((w)=_{l=1}^{L}[(w)]_{l}\). We denote \(_{1}_{2}_{d}\) as the eigenvalues of \(H\). Similarly for \(_{l,1}_{l,d_{l}}\). We denote \(=}{_{d}}\) and \(_{l}=}{_{l,d_{l}}}\) as the condition number of \(H\) and \(H_{l}\), respectively.

We say an algorithm has complexity \(}(C)\) if it takes \((C(1/))\) iterations to achieve error \((w)-^{*}}{(w^{0})-^{*}}\), where \(w^{0}\) is the initial point.

### Experimental Observations

We consider four types of Hessian \(H\) as follows. For all cases, we set condition number = 5000.

  Model & ResNet18 & VGG16 & GPT2 (pretrained) & MLP-mixer & BERT & GPT2 & ViT-base \\  \(JS^{0}\) & 0.10 & 0.09 & 18.84 & 34.90 & 53.38 & 83.23 & 286.41 \\  

Table 1: \(JS^{0}\) denotes the average JS distance between the initial Hessian spectra of each pair of parameter blocks. A larger \(JS^{0}\) suggests that the task is more difficult for SGD.

Figure 7: Comparison of \(JS^{0}\) and the performance of SGD on different models. We find the performance gap between SGD and Adam becomes greater as \(JS^{0}\) increases.

* **Case 1: Hessian with Transformer-type spectra.** We choose \(L=4\) and \(d_{l}=25\). For \(l[L]\), we construct \(H_{l}=Q_{l}_{l}Q_{l}^{T}\) where \(Q_{l}\) are matrices with i.i.d. standard Gaussian entries and \(_{l}\) are diagonal matrices. For the diagonal elements in \(_{l}\), we sample \(d_{l}\) numbers according to the spectrum of the embedding layer; 3rd Query, 3rd Value, 3rd MLP (fc layer) in GPT2. Shifting and proportional scaling are performed to ensure all elements in \(_{l}\) lie in the interval \(\). This ensures strong convexity and controls the condition number of \(H\) equals \(5000\). The spectra of \(H_{l}\) are in Figure 14 in Appendix B. We choose \(h=0\) for all cases.
* **Case 2: Hessian with CNN-type spectra.** We use the same setup as in **Case 1**. For the diagonal elements in \(_{l}\), we sample \(d_{l}\) numbers according to the spectrum of the 1st to 4th convolution layers in ResNet18. We then shift and scale \(_{l}\) to the interval \(\) to ensure strong convexity and a condition number of 5000. The spectra of \(H_{l}\) are shown in Figure 15 in Appendix B.
* **Case 3: Hessian with simplified heterogeneous spectra.** We choose \(L=3\) and \(d_{l}=3\). For \(l[L]\), we construct \(H_{l}=Q_{l}_{l}Q_{l}^{T}\) where \(Q_{l}\) are independent standard Gaussian random matrix and \(_{l}\) are diagonal matrices. We set the diagonal elements of \(_{l}\) as \(\{1,2,3\},\{99,100,101\},\{4998,4999,5000\}\) for \(l=1,2,3\), respectively. The spectra of \(H_{l}\) are different due to their different supports. The condition number of Hessian \(H\) is \(5000\).
* **Case 4: Hessian with simplified homogeneous spectra.** We consider the same setup as **Case 3**. We set the diagonal elements of \(_{l}\) as \(\{1,99,4998\},\{2,100,4999\},\{3,101,5000\}\) for \(l=1,2,3\), respectively. The spectra of \(H_{l}\) are similar. The condition number is 5000.

Now we study two types of optimizers: one that assigns a single learning rate for all blocks, and one that assign different learning rates across blocks.

* **Single-learning-rate optimizer.** We study gradient descent (GD). \[w^{t+1}=w^{t}-(w)=w^{t}-(Hw^{t}-h)\] (2) We use the optimal learning rate \(=\). We use standard Gaussian initialization.
* **Coordinate-wise-learning-rate optimizer.** We study Adam with a constant learning rate and with no bias correction for simplicity (Algorithm 3). We set \(_{1}=0\) to erase the effect of momentum. **This helps us to focus on the effect of coordinate-wise learning rate** (or the effect of diagonal preconditioning) in Adam. We use \(=0\). We consider \(_{2}=1\) and \(_{2}=0.99\), respectively. When \(_{2}=1\), Adam assigns coordinate-wise learning rates according to the initial gradient, but these learning rates are fixed along iteration. The update rule is as follows. \[w^{t+1}=w^{t}-(D_{Adam}^{0})^{-1}(w)=w^{t}-(D_{Adam}^ {0})^{-1}(Hw^{t}-h),\] (3) where \(D_{Adam}^{0}=((w^{0})(w^ {0}))^{}\) and \((w^{0})=Hw^{0}-h\). When \(_{2}<1\), the coordinate-wise learning rates adaptively change along iteration. The update rule is as follows (note that \((w^{k})=Hw^{k}-h\).) \[w^{t+1}=w^{t}-(D_{Adam}^{t})^{-1}(w)=w^{t}-(D_{Adam}^ {t})^{-1}(Hw^{t}-h),\] (4) \[D_{Adam}^{t}=((1-_{2})(_{k=1}^{t}_{2}^{t- k}(w^{k})(w^{k}))+^{t} (w^{0})(w^{0}))^{}\] We grid search \(\) and use the standard Gaussian initialization. We remark that when \(_{2}<1\), Adam would bounce among non-optimal points. This will be shown in Proposition 2.

**Summary of experimental observations.** Figure 8 presents two phenomena. For Hessian with heterogeneous blocks (**Case 1 and 3**), GD largely lags behind Adam. For Hessian with homogeneous

Figure 8: The performance of Adam and GD on homo/heterogeneous quadratic problems. The condition numbers of Hessian equal to 5000 for all four cases. When blocks are heterogeneous, GD largely lags behind Adam, and GD performs similarly to Adam if otherwise.

blocks (**Case 2 and 4**), GD is on par with Adam. We emphasize that all Hessians have the same condition number. Further, Hessian in **Case 3** and **4** share all the eigenvalues (not just the extreme ones). The gap between Adam and GD is purely due to the different blockwise spectra caused by the different locations of eigenvalues. **Case 3** and **4** help reveal the causal relation between "block heterogeneity in Hessian" and "GD is worse than Adam". We hypothesize that GD performs badly because it uses one single learning rate for all blocks, which cannot handle the heterogeneity among blocks. Such heterogeneity can be better handled using different learning rates across blocks, as designed in Adam.

### Initial Theoretical Results

We now provide initial theoretical results to characterize how GD lags behind Adam in problems with heterogenous Hessian. Note that classical optimization theory depicts the rate of first-order methods by the condition number of the full Hessian \(\). However, we point out that \(\) is not informative enough to describe the performance gap in Figure 8 since \(\) is the same in all four cases. To distinguish Adam and GD, we need to utilize more fine-grained quantities like blockwise spectra of sub-matrices.

Note that the blockwise spectrum is not common in the optimization area. The most related notion is perhaps "block Lipschitz constant"  for studying block coordinate descent (BCD) type methods, but it was not linked to the performance of SGD or Adam before. To our knowledge, we are not aware of any theory of Adam or GD built on the block diagonal structures or the blockwise spectra of Hessian. We now make an initial attempt in this direction. We first present the lower bound for GD.

**Proposition 1**.: _(Lower bound for GD.) Consider \(_{w}(w)=w^{T}Hw-h^{T}w\) where \(H^{d d}\) is positive definite and \(h^{d}\). Let \(w^{t}_{GD}\) be the output of GD after \(t\) steps. There exists a block diagonal matrix \(H\), \(h\) and an initial point \(w^{0}\), s.t., for any \(\), we have:_

\[(w^{t+1}_{GD})-^{*}(1-) ((w^{t}_{GD})-^{*})\] (5)

_where \(\) is the condition number of \(H\)._

Proposition 1 shows that GD has complexity \(}()\) and such complexity is tight. Now we prove that Adam can achieves better complexity. This is because it chooses different learning rates for different block sub-matrix \(H_{l}\) via its diagonal preconditioner \(D^{0}_{Adam}\). We consider generic random initialization that covers commonly used distributions such as Gaussian, Uniform, etc.

**Assumption 1**.: _(Random initialization.) Assume the initialization \(w^{0}\) is sampled from a continuous distribution, i.e., the probability measure (induced by \(w^{0}\)) of any zero-Lebesgue-measure set is 0._

**Theorem 1**.: _(Upper bound for Adam with \(_{2}=1\).) Consider the same setting as Proposition 1 and consider Adam with \(_{1}=0\) and \(_{2}=1\) as in (3). Assume the initialization satisfies Assumption 1. Let \(w^{t}_{Adam}\) be the output of Adam after \(t\) steps. Let \(=_{l[L]}_{l,1}}\). Then w.p.1., we have_

\[(w^{t+1}_{Adam})-^{*}_{l[L]}(1- {_{Adam,l}})((w^{t}_{Adam})-^{*})\] (6)

_where \(_{Adam,l}=r_{l}\), \(_{l}\) is the condition number of \(H_{l}\), constant \(r\) relates to \(w^{0}\) defined as:_

\[r=C_{l,2}^{2}}{_{l[L]}C_{l,1}^{2}},C_{l,1}=_{i[d_{l}]}(w^{0})]_{l,i}|}{_{l,1}},C_ {l,2}=_{i[d_{l}]}(w^{0})]_{l,i}|}{_{l, 1}}.\] (7)

The proofs of the above theorems are shown in Appendix E. Theorem 1 states that Adam (with \(_{2}=1\)) has complexity \((r_{l[L]}_{l})\). We note that coefficient \(r\) depends on the ratio between initial gradient and the principal eigenvalue for each block, and smaller ratio would give faster convergence. We further remark that condition \(_{2}=1\) is necessary because any \(_{2}<1\) causes non-convergence issue . We restate their results in Proposition 2. The non-convergence is also observed in Figure 8 (c), where we find that the iterates of Adam quickly converge to near-optimal solutions, and then bounce back. As such, \(_{2}=1\) is necessary for asymptotic analysis. The analysis for \(_{2}=1\) is still meaningful since it still shows the effect of Adam's preconditioner.

As shown in , the non-convergence is due to the constant learning rate. Reducing the learning rate reduces the gap between \((w^{t}_{Adam})\) and \(^{*}\), but does not remove it.

**Proposition 2**.: _(Non-convergence of constant-learning-rate Adam with \(_{2}<1\).) [21, Proposition 12, Figure 1] Consider \(_{w}(w)=w^{2}\). Consider Adam with \(_{1}=0\) and \(_{2}<1\) as in (4). Let \(w^{t}_{Adam}\) be the output of Adam after \(t\) steps. There exists a discrete limit cycle for (4) and \(_{t}((w^{t}_{Adam})-^{*} )>0\)._We now compare the complexity of Adam and that of GD. By Theorem 1, Adam is faster than GD when \(r_{l[L]}_{l}\). In the quadratic model with heterogeneous blocks (**Case 3**), our simulation over 1000 trials shows that \(r 1000\) with probability \(\) when using standard Gaussian random initialization. Since \(_{l[L]}_{l} 1\), we have \(r_{l[L]}_{l} 1000\), w.h.p., and is about \(5\) smaller than \(=5000\). So Adam could be \(5\) faster than GD, w.h.p.. This is indeed observed in Figure 8 where Adam outperforms GD by a significant margin. We summarize the complexity of GD and Adam in Table 2.

**Remark: some common misconceptions.** During the review process, we find that readers might conclude that "Theorem 1 implies Adam under homogeneity has worse complexity than Adam under heterogeneity". We now clarify that this claim is _not_ correct, and there is no conclusion on "whether Adam under homogeneity is faster or slower than Adam under heterogeneity". Similarly, Theorem 1 does _not_ imply "Adam always converges similarly as GD under homogeneity". Though it is observed on CNNs, there is no general conclusion of this kind. For interested readers, we provide a detailed explanation in Appendix B.

How to obtain a tighter complexity bound of Adam?It is valid to ask whether the complexity upper bound in Theorem 1 can be tightened, e.g., improve the factor of \(r\). We point out it would be difficult if there is no extra structure on \(H_{l}\). A key technical step is to bound the condition number of the preconditioned matrix \(((D^{0}_{Adam,l})^{-1}H_{l})\). Intuitively, a diagonal preconditioner of \(H_{l}\) is powerful when \(H_{l}\) itself has a near-diagonal structure, e.g., pure diagonal, tridiagonal or diagonal dominant . Unfortunately, it is unclear whether these structures hold in Transformers. Without any assumption on \(H_{l}\), we find that the diagonal preconditioner of \(D^{0}_{Adam}\) could _increase_ the condition number. For instance, when using standard Gaussian initialization, in **case 3**, we find \(((D^{0}_{Adam,l})^{-1}H_{l})\) equals \(7.09_{1}\), \(18.98_{2}\), \(18.76_{3}\) for the 3 blocks, respectively (all averaged over 1000 trials). It would be interesting to explore if there are special structures of \(H_{l}\) in Transformers such that Adam preconditioner can reduce \(_{l}\), rather than increase it. We leave it as a future direction.

**More discussions on the theoretical advantage of Adam.** Although Adam preconditioner might not always reduce the "local" condition number \(_{l}\), the coefficient in the complexity is now **independent of the "global" condition number \(\)**. As argued above, such changes in coefficient could lead to considerable improvement over GD. Such improvement in complexity is attributed to the block diagonal structure in Hessian as well as its heterogeneous blockwise spectrum. To our knowledge, such improvement is not shown in the existing literature. One possible reason is that: for the optimization community, it is very rare to analyze (near-) block-diagonal Hessian structure since typical problems do not have such structure. For instance, in the classical non-linear programming dataset , all problems have non-block-diagonal Hessian. We suggest a different perspective to characterize modern optimization problems. We believe our perspective is new because it is built upon multiple non-trivial findings.

In summary, our theory indicates that: for problems with block heterogeneity, the single-learning rate methods like GD can largely lag behind coordinate-wise learning rate methods like Adam.

## 5 Conclusion

In this work, we explore why SGD largely underperforms Adam on Transformers. we establish a phenomenon called block heterogeneity in Hessian and link it to the performance gap between Adam and SGD. We numerically verify our claim on various Transformers, CNNs, MLPs, and quadratic problems. Initial theory is also provided to support the claim.

   Optimizer & GD & Adam with & Adam with \\  & & \(_{1}=0\) and \(_{2}=1\) (3) & \(_{1}=0\) and \(_{2}<1\) (4) \\  Complexity & \(O()\) & \(O(r_{l[L]}_{l})\) & ✗ \\   

Table 2: The complexity of GD and Adam for minimizing a strongly convex quadratic function with block diagonal Hessian. The symbol ✗ means non-convergence. \(\) and \(_{l}\) denote the condition number of the full Hessian and the block submatrix, respectively. \(r\) is defined in (7).

## Broader Impacts

We explore why SGD performs worse than Adam for training Transformers. Our work can help the community better understand large AI model training. However, it would be a potential threat if the AI models are used for illegal usage.