# PINNacle: A Comprehensive Benchmark of Physics-Informed Neural Networks for Solving PDEs

Zhongkai Hao\({}^{1}\), Jiachen Yao\({}^{1*}\), Chang Su\({}^{1*}\), Hang Su\({}^{1}\), Ziao Wang\({}^{1}\),

Fanzhi Lu\({}^{1}\), Zeyu Xia\({}^{1}\), Yichi Zhang\({}^{1}\), Songming Liu\({}^{1}\), Lu Lu\({}^{2}\), Jun Zhu\({}^{1}\)

\({}^{1}\)Dept. of Comp. Sci. and Tech., Institute for AI, BNRist Center, THBI Lab,

Tsinghua-Bosch Joint ML Center, Tsinghua University

\({}^{2}\) Department of Statistics and Data Science, Yale University

hzj21@mails.tsinghua.edu.cn; dcszj@tsinghua.edu.cn

Equal contribution. \({}^{}\)The corresponding author.

###### Abstract

While significant progress has been made on Physics-Informed Neural Networks (PINNs), a comprehensive comparison of these methods across a wide range of Partial Differential Equations (PDEs) is still lacking. This study introduces PINNacle, a benchmarking tool designed to fill this gap. PINNacle provides a diverse dataset, comprising over 20 distinct PDEs from various domains, including heat conduction, fluid dynamics, biology, and electromagnetics. These PDEs encapsulate key challenges inherent to real-world problems, such as complex geometry, multi-scale phenomena, nonlinearity, and high dimensionality. PINNacle also offers a user-friendly toolbox, incorporating about 10 state-of-the-art PINN methods for systematic evaluation and comparison. We have conducted extensive experiments with these methods, offering insights into their strengths and weaknesses. In addition to providing a standardized means of assessing performance, PINNacle also offers an in-depth analysis to guide future research such as domain decomposition methods and loss reweighting for handling multi-scale problems. To the best of our knowledge, it is the largest benchmark with a diverse and comprehensive evaluation that will undoubtedly foster further research in PINNs.

## 1 Introduction

Partial Differential Equations (PDEs) are of paramount importance in science and engineering, as they often underpin our understanding of intricate physical systems such as fluid flow, heat transfer, and stress distribution . The computational simulation of PDE systems has been a focal point of research for an extensive period, leading to the development of numerical methods such as finite difference , finite element , and finite volume methods .

Recent advancements have led to the use of deep neural networks to solve forward and inverse problems involving PDEs . Among these, Physics-Informed Neural Networks (PINNs) have emerged as a promising alternative to traditional numerical methods in solving such problems . PINNs leverage the underlying physical laws and available data to effectively handle various scientific and engineering applications. The growing interest in this field has spurred the development of numerous PINN variants, each tailored to overcome specific challenges or to enhance the performance of the original framework.

While PINN methods have achieved remarkable progress, a comprehensive comparison of these methods across diverse types of PDEs is currently lacking. Establishing such a benchmark is crucial as it could enable researchers to more thoroughly understand existing methods and pinpoint potential challenges. Despite the availability of several studies comparing sampling methods  and reweighting methods , there has been no concerted effort to develop a rigorous benchmark using challenging datasets from real-world problems. The sheer variety and inherent complexity of PDEs make it difficult to conduct a comprehensive analysis. Moreover, different mathematical properties and application scenarios further complicate the task, requiring the benchmark to be adaptable and exhaustive.

To resolve these challenges, we propose PINNacle, a comprehensive benchmark for evaluating and understanding the performance of PINNs. As shown in Fig. 1, PINNacle consists of three major components -- a diverse dataset, a toolbox, and evaluation modules. The dataset comprises tasks from over 20 different PDEs from various domains, including heat conduction, fluid dynamics, biology, and electromagnetics. Each task brings its own set of challenges, such as complex geometry, multi-scale phenomena, nonlinearity, and high dimensionality, thus providing a rich testing ground for PINNs. The toolbox incorporates more than 10 state-of-the-art (SOTA) PINN methods, enabling a systematic comparison of different strategies, including loss reweighting, variational formulation, adaptive activations, and domain decomposition. These methods can be flexibly applied to the tasks in the dataset, offering researchers a convenient way to evaluate the performance of PINNs which is also user-friendly for secondary development. The evaluation modules provide a standardized means of assessing the performance of different PINN methods across all tasks, ensuring consistency in comparison and facilitating the identification of strengths and weaknesses in various methods.

PINNacle provides a robust, diverse, and comprehensive benchmark suite for PINNs, contributing significantly to the field's understanding and application. It represents a major step forward in the evolution of PINNs which could foster more innovative research and development in this exciting field. Code and data are publicly available at [https://github.com/i207M/PINNacle](https://github.com/i207M/PINNacle).

In a nutshell, our contributions can be summarized as follows:

* We design a dataset encompassing over 20 challenging PDE problems. These problems encapsulate several critical challenges faced by PINNs, including handling complex geometries, multi-scale phenomena, nonlinearity, and high-dimensional problems.
* We systematically evaluate more than 10 carefully selected representative variants of PINNs. We conducted thorough experiments and ablation studies to evaluate their performance. To the best of our knowledge, this is the largest benchmark comparing different PINN variants.

Figure 1: Architecture of PINNacle. It contains a dataset covering more than 20 PDEs, a toolbox that implements about 10 SOTA methods, and an evaluation module. These methods have a wide range of application scenarios like fluid mechanics, electromagnetism, heat conduction, geophysics, and so on.

* We provide an in-depth analysis to guide future research. We show using loss reweighting and domain decomposition methods could improve the performance on multi-scale and complex geometry problems. Variational formulation achieves better performance on inverse problems. However, few methods can adequately address nonlinear problems, indicating a future direction for exploration and advancement.

## 2 Related Work

### Benchmarks and datasets in scientific machine learning

The growing trend of AI in scientific research has stimulated the development of various benchmarks and datasets, which differ greatly in data formats, sizes, and governing principles. For instance,  presents a benchmark for comparing neural operators, while [3; 41] benchmarks methods for learning latent Newtonian mechanics. Furthermore, domain-specific datasets and benchmarks exist in fluid mechanics , climate science [42; 5], quantum chemistry , and biology .

Beyond these domain-specific datasets and benchmarks, physics-informed machine learning has received considerable attention [18; 9] since the advent of Physics-Informed Neural Networks (PINNs) . These methods successfully incorporate physical laws into model training, demonstrating immense potential across a variety of scientific and engineering domains. Various papers have compared different components within the PINN framework; for instance,  and  investigate the sampling methods of collocation points in PINNs, and  compare reweighting techniques for different loss components. PDEBench  and PDEArena  design multiple tasks to compare different methods in scientific machine learning such as PINNs, FNO, and U-Net. Nevertheless, a comprehensive comparison of various PINN approaches remains absent in the literature.

### Softwares and Toolboxes

A plethora of software solutions have been developed for solving PDEs with neural networks. These include SimNet , NeuralPDE , TorchDiffEq , and PyDEs . More recently, DeepXDE  has been introduced as a fundamental library for implementing PINNs across different backends. However, there remains a void for a toolbox that provides a unified implementation for advanced PINN variants. Our PINNacle fills this gap by offering a flexible interface that facilitates the implementation and evaluation of diverse PINN variants. We furnish clear and concise code for researchers to execute benchmarks across all problems and methods.

### Variants of Physics-informed neural networks

The PINNs have received much attention due to their remarkable performance in solving both forward and inverse PDE problems. However, vanilla PINNs have many limitations. Researchers have proposed numerous PINN variants to address challenges associated with high-dimensionality, non-linearity, multi-scale issues, and complex geometries [18; 9; 25; 30]. Broadly speaking, these variants can be categorized into: loss reweighting/resampling [57; 58; 53; 60; 40], innovative optimizers , novel loss functions such as variational formulations [62; 26; 27; 28] or regularization terms [63; 50], and novel architectures like domain decomposition [21; 31; 38; 24] and adaptive activations [23; 22]. These variants have enhanced PINN's performance across various problems. Here we select representative methods from each category and conduct a comprehensive analysis using our benchmark dataset to evaluate these variants.

## 3 PINNacle: A Hierarchical Benchmark for PINNs

In this section, we first introduce the preliminaries of PINNs. Then we introduce the details of datasets (tasks), PINN methods, the toolbox framework, and the evaluation metrics.

### Preliminaries of Physics-informed Neural Networks

Physics-informed neural networks are neural network-based methods for solving PDEs as well as inverse problems of PDEs, which have received much attention recently. Specifically, let's consider a general Partial Differential Equation (PDE) system defined on \(\), which can be represented as:

\[(u(x);x) = 0, x, \] \[(u(x);x) = 0, x. \]

where \(\) is a differential operator and \(\) is the boundary/initial condition. PINN uses a neural network \(u_{}(x)\) with parameters \(\) to approximate \(u(x)\). The objective of PINN is to minimize the following loss function:

\[()=}{N_{c}}_{i=1}^{N_{c}}||(u_{ }(x_{c}^{i});x_{c}^{i})||^{2}+}{N_{b}}_{i=1}^{N_{b}}|| (u_{}(x_{b}^{i});x_{b}^{i})||^{2}+}{N_{d}}_{i =1}^{N_{d}}||u_{}(x_{d}^{i})-u(x_{d}^{i})||^{2}. \]

where \(w_{c},w_{b},w_{d}\) are weights. The first two terms enforce the PDE constraints on \(\{x_{c}^{i}\}_{1 N_{c}}\) and boundary conditions on \(\{x_{b}^{i}\}_{1 N_{b}}\). The last term is data loss, which is optional when there is data available. However, PINNs have several inherent drawbacks. First, PINNs optimize a mixture of imbalance loss terms which might hinder its convergence as illustrated in . Second, nonlinear or stiff PDEs might lead to unstable optimization . Third, the vanilla MLPs might have difficulty in representing multi-scale or high-dimensional functions. For example,  shows that vanilla PINNs only work for a small parameter range, even in a simple convection problem. To resolve these challenges, numerous variants of PINNs are proposed. However, a comprehensive comparison of these methods is lacking, and thus it is imperative to develop a benchmark.

### Datasets

To effectively compare PINN variants, we've curated a set of PDE problems (datasets) representing a wide range of challenges. We chose PDEs from diverse domains, reflecting their importance in science and engineering. Our dataset includes 22 unique cases, with further details in Appendix B.

* The **Burgers' Equation**, fundamental to fluid mechanics, considering both one and two-dimensional problems.
* The **Poisson's Equation**, widely used in math and physics, with four different cases.
* The **Heat Equation**, a time-dependent PDE that describes diffusion or heat conduction, demonstrated in four unique cases.
* The **Navier-Stokes Equation**, describing the motion of viscous fluid substances, showcased in three scenarios: a lid-driven flow (NS2d-C), a geometrically complex backward step flow (NS2d-CG), and a time-dependent problem (NS2d-LT).
* The **Wave Equation**, modeling wave behavior, exhibited in three cases.
* **Chaotic PDEs**, featuring two popular examples: the Gray-Scott (GS) and Kuramoto-Sivashinsky (KS) equations.
* **High Dimensional PDEs**, including the high-dimensional Poisson equation (PNd) and the high-dimensional diffusion or heat equation (HNd).
* **Inverse Problems**, focusing on the reconstruction of the coefficient field from noisy data for the Poisson equation (PIInv) and the diffusion equation (HInv).

It is important to note that we have chosen PDEs encompassing a wide range of mathematical properties. This ensures that the benchmarks do not favor a specific type of PDE. The selected PDE problems introduce several core challenges, which include:

* **Complex Geometry**: Many PDE problems involve complex or irregular geometry, such as heat conduction or wave propagation around obstacles. These complexities pose significant challenges for PINNs in terms of accurate boundary behavior representation.
* **Multi-Scale Phenomena**: Multi-scale phenomena, where the solution varies significantly over different scales, are prevalent in situations such as turbulent fluid flow. Achieving a balanced representation across all scales is a challenge for PINNs in multi-scale scenarios.
* **Nonlinear Behavior**: Many PDEs exhibit nonlinear or even chaotic behavior, where minor variations in initial conditions can lead to substantial divergence in outcomes. The optimization of PINNs becomes intriguing on nonlinear PDEs.

* **High Dimensionality**: High-dimensional PDE problems, frequently encountered in quantum mechanics, present significant challenges for PINNs due to the "curse of dimensionality". This term refers to the increase in computational complexity with the addition of each dimension, accompanied by statistical issues like data sparsity in high-dimensional space.

These challenges are selected due to their frequent occurrence in numerous real-world applications. As such, a method's performance in addressing these challenges serves as a reliable indicator of its overall practical utility. Table 1 presents a detailed overview of the dataset, the PDEs, and the challenges associated with these problems. We generate data using FEM solver provided by COMSOL 6.0  for problems with complex geometry and spectral method provided by Chebfun  for chaotic problems. More details can be found in Appendix B.

### Methods and Toolbox

After conducting an extensive literature review, we present an overview of diverse PINNs approaches for comparison. Then we present the high-level structure of our PINNacle.

#### 3.3.1 Methods

As mentioned above, variants of PINNs are mainly based on loss functions, architecture, and optimizer . The modifications to loss functions can be divided into reweighting existing losses and developing novel loss functions like regularization and variational formulation. Variants of architectures include using domain decomposition and adaptive activations.

The methods discussed are directly correlated with the challenges highlighted in Table 1. For example, domain decomposition methods are particularly effective for problems involving complex geometries and multi-scale phenomena. Meanwhile, loss reweighting strategies are adept at addressing imbalances in problems with multiple losses. We have chosen variants from these categories based on their significant contributions to the field.

Here, we list the primary categories and representative methods as summarized in Table 2:

* **Loss reweighting/Resampling (2\(\)4)**: PINNs are trained with a mixed loss of PDE residuals, boundary conditions, and available data losses shown in Eq 3. Various methods  propose different strategies to adjust these weights \(w_{c},w_{b}\) and \(w_{d}\) at different epochs or resample collocation points \(\{x^{i}_{c}\}\) and \(\{x^{i}_{b}\}\) in Eq 3, which indirectly adjust the weights . We choose three famous examples, i.e., reweighting using gradient norms (PINN-LRA) , using neural tangent kernel (PINN-NTK) , and residual-based resampling (RAR).
* **Novel optimizer (5)**: To handle the problem of multi-scale objectives, some new optimizers  are proposed. We chose MultiAdam, which is resistant to domain scale changes.
* **Novel loss functions (6\(\)7)**: Some works introduce novel loss functions like variational formulation  and regularization terms to improve training. We choose hp-VPINN  and gPINN , which are representative examples from these two categories.

  Dataset & Complex geometry & Multi-scale & Nonlinearity & High dim \\  Burgers\({}^{1 2}\) & \(\) & \(\) & \(\) & \(\) \\ Poisson\({}^{3 6}\) & \(/\) & \(/\) & \(\) & \(\) \\ Heat\({}^{7 10}\) & \(/\) & \(/\) & \(\) & \(\) \\ NS\({}^{11 13}\) & \(/\) & \(/\) & \(\) & \(\) \\ Wave\({}^{14 16}\) & \(/\) & \(/\) & \(\) & \(\) \\ Chaotic\({}^{17 18}\) & \(\) & \(\) & \(\) & \(\) \\ High dim\({}^{19 20}\) & \(\) & \(\) & \(\) & \(\) \\ Inverse \({}^{21 22}\) & \(\) & \(\) & \(\) & \(\) \\  

Table 1: Overview of our datasets along with their challenges. We chose 22 cases in total to evaluate the methods of PINNs. The left picture shows the visualization of cases with these four challenges, i.e., complex geometry, multi-scale, nonlinearity, and high dimension.

* **Novel activation architectures (8\(\)10)**: Some works propose various network architectures, such as using CNN and LSTM [64; 15; 46], custom activation functions [22; 23], and domain decomposition [21; 48; 24; 38]. Among adaptive activations for PINNs, we choose LAAF  and GAAF . Domain decomposition is a method that divides the whole domain into multiple subdomains and trains subnetworks on these subdomains. It is helpful for solving multi-scale problems, but multiple subnetworks increase the difficulty of training. XPINNs, cPINNs, and FBPINNs [21; 24; 38] are three representative examples. We choose FBPINNs which is the state-of-the-art domain decomposition that applies domain-specific normalization to stabilize training.

#### 3.3.2 Structure of Toolbox

We provide a user-friendly and concise toolbox for implementing, training, and evaluating diverse PINN variants. Specifically, our codebase is based on DeepXDE and provides a series of encapsulated classes and functions to facilitate high-level training and custom PDEs. These utilities allow for a standardized and streamlined approach to the implementation of various PINN variants and PDEs. Moreover, we provided many auxiliary functions, including computing different metrics, visualizing predictions, and recording results.

Despite the unified implementation of diverse PINNs, we also design an adaptive multi-GPU parallel training framework to enhance the efficiency of systematic evaluations of PINN methods. It addresses the parallelization phase of training on multiple tasks, effectively balancing the computational loads of multiple GPUs. It allows for the execution of larger and more complex tasks. In a nutshell, we provide an example code for training and evaluating PINNs on two Poisson equations using our PINNacle framework in Appendix D.

### Evaluation

To comprehensively analyze the discrepancy between the PINN solutions and the true solutions, we adopt multiple metrics to evaluate the performance of the PINN variants. Generally, we choose several metrics that are commonly used in literature that apply to all methods and problems. We suppose that \(=(y_{i})_{i=1}^{n}\) is the prediction and \(^{}=(y^{}_{i})_{i=1}^{n}\) to is ground truth, where \(n\) is the number of testing examples. Specifically, we use \(_{2}\) relative error (\(\)), and \(_{1}\) relative error (\(\)) which are two most commonly used metrics to measure the global quality of the solution,

\[=^{n}(y_{i}-y^{}_{i})^{2}}{_{i=1}^ {n}{y^{}_{i}}^{2}}},\,=^{n}|y_{i}-y^{ }_{i}|}{_{i=1}^{n}|y^{}_{i}|}. \]

We also compute max error (mERR in short), mean square error (MSE), and Fourier error (fMSE) for a detailed analysis of the prediction. These three metrics are computed as follows:

\[=_{i=1}^{n}(y_{i}-y^{}_{i})^{2},\,\,=_{i}|y_{i}-y^{}_{i}|,\,=}^{k_{}}|()-(})|^{2}}}{k_{}- k_{}+1}, \]

where \(\) denotes Fourier transform of \(\) and \(k_{}\), \(k_{}\) are chosen similar to PDEBench . Besides, for time-dependent problems, investigating the quality of the solution with time is important. Therefore we compute the L2RE error varying with time in Appendix E.2.

We assess the performance of PINNs against the reference from numerical solvers. Experimental results utilizing the \(_{2}\) relative error (L2RE) metric are incorporated within the main text, while a more exhaustive set of results, based on the aforementioned metrics, is available in the Appendix E.1.

    & Complex Geometry & Multi-scale & Nonlinearity & High dim \\  Vanilla PINN  & \(\) & \(\) & \(\) & \(\) \\ Reweighting/Resampling\({}^{2 4}\) & \(\) & \(\) & \(\) & \(\) \\ Novel Optimizer\({}^{7}\) & \(\) & \(\) & \(\) & \(\) \\ Novel Loss Functions\({}^{5 6}\) & \(\) & \(\) & \(\) & \(\) \\ Novel Architecture\({}^{8 10}\) & \(\) & \(\) & \(\) & \(\) \\   

Table 2: Overview of methods in our PINNacle. \(\) denotes the method is potentially designed to solve or show empirical improvements for problems encountering the challenge and vice versa.

[MISSING_PAGE_FAIL:7]

geometries and multi-scale systems. For example, FBPINN achieves the smallest error on the chaotic GS equation (\(7.99\%\)), while LAAF delivers the best fitting result on Heat-2d-CG (\(2.39\%\)).

**Discussion.** For challenges related to complex geometries and multi-scale phenomena, some methods can mitigate these issues by implementing mechanisms like loss reweighting, novel optimizers, and better capacity through adaptive activation. This holds true for the 2D cases of Heat and Poisson equations, which are classic linear equations. However, when systems have higher dimensions (Poisson3d-CG) or longer time spans (Heat2d-LT), all methods fail to solve, highlighting the difficulties associated with complex geometries and multi-scale systems.

In contrast, nonlinear, long-time PDEs like 2D Burgers, NS, and KS pose challenges for most methods. These equations are sensitive to initial conditions, resulting in complicated solution spaces and more local minima for PINNs . The Wave equation, featuring a second-order time derivative and periodic behavior, is particularly hard for PINNs, which often become unstable and may violate conservation laws [24; 55]. Although all methods perform well on Poisson-Nd, only PINN with LBFGS solves Heat-Nd, indicating the potential of a second-order optimizer for solving high dimensional PDEs.

### Parameterized PDE Experiments

To investigate whether PINNs could handle a class of PDEs, we design this experiment to solve the same PDEs with different parameters. We choose 6 PDEs, i.e., Burgers2d-C, Poisson2d-C, Heat2d-MS, NS-C, Wave1d-C, and Heat-Nd (HNd), with each case containing five parameterized examples. Details of the parametrized PDEs are shown in Appendix B. Here we report the average L2RE metric on these parameterized PDEs for every case, and results are shown in the following Table 4. First, we see that compared with the corresponding cases in Table E.1, the mean L2RE of parameterized PDEs is usually higher. We suggest that this is because there are some difficult cases under certain parameters for these PDEs with very high errors. Secondly, we find that PINN-NTK works well on parameterized PDE tasks which achieve three best results among all six experiments. We speculate that solving PDEs with different parameters requires different weights for loss terms, and PINN-NTK is a powerful method for automatically balancing these weights.

### Hyperparameter Analysis

The performance of PINNs is strongly affected by hyperparameters, with each variant introducing its own unique set. The results are shown in Figure 2. We focus on a set of problems, i.e., Burgers1d, GS, Heat2d-CG, and Poisson2d-C. Detailed results and additional findings are in Appendix E.2.

**Batch size and training epochs.** Figure 19 presents the effects of varying batch sizes and training epochs. Larger batch sizes generally yield better outcomes due to more accurate gradient estimations, though saturation is observed beyond a batch size of 2048 for the GS and Poisson2d-C problems. Similarly, increasing the number of training epochs reduces the L2RE, indicating an improvement in model accuracy. However, this benefit plateaus around 20k to 80k epochs, where further increases in epochs do not significantly reduce the error.

**Learning Rates.** The performance of standard PINNs under various learning rates and learning rate schedules is shown in Figure 3. We observe that the influence of the learning rate on performance is intricate, with optimal learning rates varying across problems. Furthermore, PINN training tends to be unstable. High learning rates, such as \(10^{-2}\), often lead to error spikes, while low learning rates,

    & Name & Vanilla &  &  &  &  \\   & – & PINN & LRA & NTK & RAR & Multi-Adam & gPINN & vPINN & LAAF & GAAF & FBPINN \\  Burgers-P & 2d-C & 4.74E-01 & 4.36E-01 & **4.13E-01** & 4.71E-01 & 4.93E-01 & 4.91E-01 & 2.82E+04 & 4.37E-01 & 4.34E-01 & - \\ Poisson-P & 2d-C & 2.24E-01 & 7.07E-02 & **1.66E-02** & 2.33E-01 & 8.24E-02 & 4.03E-01 & 5.51E-1 & 1.84E-01 & 2.97E-01 & 2.87E-2 \\ Heat-P & 2d-MS & 1.73E-01 & 1.23E-01 & 1.50E-01 & 1.53E-01 & 4.00E-01 & 4.99E-01 & 5.12E-1 & 6.27E-02 & 1.89E-01 & 2.46E-1 \\ NS-P & 2d-C & 3.98E-01 & – & 4.52E-01 & 3.91E-01 & 9.33E-01 & 7.19E-01 & 3.76E-01 & 3.43E-01 & 4.85E-01 & 3.99E-1 \\ Waw-P & 1d-C & 5.22E-01 & 3.44E-01 & **2.66E-01** & 5.08E-01 & 6.89E-01 & 7.66E-01 & 3.58E-1 & 4.03E-01 & 9.00E-01 & 1.15E-01 \\ High dim-P & HNd & 7.66E-03 & 6.53E-03 & 9.04E-03 & 8.07E-03 & **2.22E-03** & 7.87E-03 & - & 6.97E-03 & 1.94E-01 & - \\   

Table 4: Results of different PINN variants on parametric PDEs. We report average L2RE on all examples within a class of PDE. We **bold** the best results across all methods.

like \(10^{-5}\), result in slow convergence. Our findings suggest that a moderate learning rate, such as \(10^{-3}\) or \(10^{-4}\), or a step decay learning rate schedule, tends to yield more stable performance.

## 5 Limitations

First, real-world problems are often more complex, with giant geometric domains or chaotic behaviors. Good performance on PINNacle does not guarantee it solves practical problems. We could explore larger-scale PINN training methods or efficient domain decomposition methods. Second, the issues of safety in the PINN methods pose potential roadblocks. Developing theoretical convergence for PINN like stability and convergence analysis  could help resolve these limitations.

## 6 Conclusion

In this work, we introduced PINNacle, a comprehensive benchmark offering a user-friendly toolbox that encompasses over 20 PDE problems and 10 PINN methods with extensive experiments and ablation studies. Looking forward, we plan to expand the benchmark by integrating additional state-of-the-art methods and incorporating more practical problem scenarios. Our analysis of the experimental results yields several key insights. First, domain decomposition is beneficial for addressing problems characterized by complex geometries, and PINN-NTK is a strong method for balancing loss weights as experiments show. Second, selecting appropriate hyperparameters is crucial to the performance of PINNs. However, the best hyperparameters usually vary with PDEs. Third, we identify high-dimensional and nonlinear problems as a pressing challenge. The overall performance of PINNs is not yet on par with traditional numerical methods . Fourth, there are only a few attempts exploring of PINNs' loss landscape . Finally, integrating the strengths of neural networks with numerical methods like preconditioning, weak formulation, and multigrid may present a promising avenue toward overcoming the challenges.

Figure 3: Convergence curve of PINNs with different learning rate schedules on Burgers1d, Heat2d-CG, and Poisson2d-C.

Figure 2: Performance of vanilla PINNs under different batch sizes (number of collocation points), which is shown in the left figure; and number of training epochs, which is shown in the right figure.