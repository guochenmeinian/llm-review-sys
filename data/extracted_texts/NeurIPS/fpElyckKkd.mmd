# Data-Informed Geometric Space Selection

Shuai Zhang

ETH Zurich

cheungshuai@outlook.com &Wenqi Jiang

ETH Zurich

wenqi.jiang@inf.ethz.ch

###### Abstract

Geometric representation learning (e.g., hyperbolic and spherical geometry) has proven to be efficacious in solving many intricate machine learning tasks. The fundamental challenge of geometric representation learning lies in aligning the inherent geometric bias with the underlying structure of the data, which is a rarely explored topic in the literature. Existing methods heavily rely on heuristic assumptions on the data structure to decide the type of geometry to be adopted, which often leads to suboptimal performance. This work aims to automate the alignment process via a data-informed strategy such that we optimize model performance with minimal overhead. Specifically, a sparse gating mechanism is employed to enable each input data point \(p\) to select \(K\) geometric spaces from a given candidate geometric space pool with \(N\) (\(K<N\)) spaces of different geometry. The selected \(K\) spaces are then tightly integrated to formulate a Cartesian product space, which is leveraged to process this input data \(p\). In doing so, each input data is processed by the spaces it selected with maximum specialization. We empirically show that this method can effectively align data and spaces without human interventions and further boost performance on real-world tasks, demonstrating its potential in eliciting the expressive power of geometric representations and practical usability.

## 1 Introduction

Representing data in low-dimensional geometric spaces (e.g., Euclidean, hyperbolic, and spherical) has been an invaluable technique in a variety of machine learning tasks. Euclidean space has been the most widely adopted and predominant geometric space across many tasks [8; 31]. Recent research has shown that non-Euclidean geometry, such as hyperbolic and spherical geometry, can be more effective in representing data with specific/intricate inherent structures. Typically, hyperbolic space, a type of manifold with constant negative (sectional) curvature, provides a greater ability to model tree-like structures and capture hierarchical patterns [32; 11; 21]. Conversely, spherical space, with positive curvature, is well-suited for fitting data with cyclical structures [44; 30]. Different geometry endows models with different inductive bias that prioritizes learning specific patterns in the data.

Geometric representation learning faces a significant challenge in effectively aligning underlying data structures with appropriate geometric spaces. Earlier approaches tend to map all data to a single geometric space, operating under the implicit assumption that the majority, if not all, of the data conforms to the same geometric pattern. This assumption of a uniform geometric pattern across all data points is unrealistic. As such, there has been growing interest in hybridizing different geometric spaces [22; 37; 4] via Cartesian product to form a mixed curvature space. By leveraging the benefits of multiple geometric spaces, this approach can offer improved performance compared to methods that rely on a single geometric space.

Real-world data is usually characterized by intricate patterns that a single geometric space cannot adequately capture. Thus, employing a one-space-fits-all approach is unlikely to produce optimal solutions. In addition, the Cartesian product space representation learning technique does not discriminate between input examples based on their underlying geometric structures. For example,if a Cartesian product space is constructed by combining a spherical space with a hyperbolic space, both spaces will be used to fit all input data examples, irrespective of whether a data point only aligns with one of the geometry. Ideally, each space should calibrate its internal parameters using the input examples that conform to the corresponding manifold to ensure that the modeling capacity of all geometric spaces is maximized.

Accurately aligning input data with appropriate geometric spaces is a crucial challenge in geometric representation learning. However, neither the single geometric space method nor the Cartesian product approach fully address this issue. Our primary goal is to tackle this challenge by developing an automated approach that seamlessly aligns each data point with its appropriate space. Instead of relying on oversimplified heuristics or manual interventions, we aim to _learn_ the data-space alignment component together with the task-specific model using an end-to-end framework.

To this end, we propose a data-informed method for geometric space selection. Given \(N\) candidate geometric spaces with different geometry, we let each data point \(p\) choose \(K(1 K<N)\) spaces from the pool. The chosen \(K\) spaces are then tightly combined via Cartesian product to form a Cartesian product space, which is used to process \(p\). The selection process is parameterized by a sparsely gated neural network that can adaptively activate a subset of the given spaces based on the given input data. This module can be easily plugged into any geometric representation learning task to enable end-to-end optimization. Theoretically, we can construct \({}_{N}C_{K}=\) possible Cartesian product spaces in the end, which brings a greater degree of freedom and personalization for representation learning. Moreover, the proposed method will only incur a negligible computational overhead since only the \(K\) selected geometric spaces participate in the model inference no matter how large the space pool is.

The contributions of this work are summarized as follows:

* We propose a data-informed approach for geometric space selection that offers the advantage of automatically aligning each input data point with its preferred geometric space, thereby increasing specificity while being computationally efficient.
* We empirically demonstrate the practical effectiveness of this method with real-world datasets across two downstream tasks. We examine the proposed method's inner workings (e.g., distribution of the selected geometric spaces) via visualization, ablation, and case studies, reaffirming the benefits of the proposed method.

## 2 Related Work

We briefly review two areas of active research that intersect with the present work.

### Non-Euclidean Geometric Representation Learning

Two popular non-Euclidean geometric spaces with non-zero curvature, including hyperbolic and spherical spaces, have gained increasing attention and can be found in a broad spectrum of representation learning applications. Hyperbolic space has negative curvature and is reminiscent of a continuous version of trees, which makes it excel in capturing hierarchical structures. A bunch of work has demonstrated its effectiveness in tasks such as graph modeling and knowledge representation [32; 42; 39; 5; 12; 35; 28; 10; 15; 20; 9; 26; 40]. On the other hand, spherical space with positive curvature is more suitable for directional similarity modeling and cyclical-structured data. We can find applications of spherical spaces in text embeddings , texture mapping , time-warping functions embedding . In these papers, the choice of geometric space is primarily based on expert heuristics about the data characteristics.

To combine the best of different worlds, Gu et al. [22; 37; 4] proposed a method to construct a mixed curvature space via Cartesian product of different spaces. The component spaces in Cartesian product spaces are selected from Euclidean, hyperbolic, and spherical spaces. Each component of Cartesian product space has constant curvature, while the resulting mixed space has a non-constant curvature, which enables it to capture a wide range of patterns with a single model. Empirically, Cartesian product spaces demonstrate its efficacy in graph reconstruction, word embedding with low dimensions , node classification in graphs , and image reconstruction . Product space is designed to handle data with mixed patterns, but the alignment process between data and geometric space is still oversimplified and not customized for each data point. Consequently, the challenge of aligning appropriate spaces with input data points persists, and a solution to this problem remains elusive.

### Sparsely-gated Mixture of Experts

Another related research area is sparsely-gated neural networks, which are a type of mixture-of-experts (MOE) architecture [24; 25]. Over the past few decades, many MOE architectures have been proposed, such as hierarchical structures , sequential experts , deep MOE , and sparsely-gated MOE . MOE is based on the divide-and-conquer principle, which divides the problem into homogeneous regions and assigns an expert to each region. The final prediction is made by combining the predictions of all experts via a gating network. The gating network controls the contribution of each expert using a probabilistic gating function. If the gating function is sparse, i.e., restricted to assigning non-zero weights to only a subset of the experts, unused experts need not be computed. MOE has been widely studied in various tasks, such as multi-task learning , large language models [36; 19], and scaling up vision transformers .

We draw inspiration from sparsely gated MOE to automate the alignment between data and its appropriate geometric space. Our approach allows each input data point to control the gating function and select suitable geometric spaces from a candidate geometric space pool, thus enabling customized assignment of data to its suitable spaces. It brings higher specialization, a greater degree of freedom, and superior expressiveness.

## 3 Preliminaries

### Riemannian Geometric Space

Stereographic Projection model.In general, there are three types of constant curvature spaces with respect to the sign of the curvature (Fig. 1). Common realizations are Euclidean space \(\) (flat), hypersphere \(\) (positively curved) and hyperboloid \(\) (negatively curved). For the latter two, we prefer their stereographic projection model: projected sphere \(\) and Poincare ball \(\). These models are easier to optimize and avoid the problem of non-convergence of norm of points with a curvature close to \(0\), and the projection is conformal, i.e., does not affect the angles between points [32; 37].

An alternative to vector space in non-Euclidean geometry is gyrovector space , which defines operations such as vector addition and multiplication.

**Definition 1**: _For \(\) and \(\) (jointly denoted as \(_{c}\), where \(c\) denotes curvature), the addition between two points \(,_{c}\), also known as Mobius addition \(_{c}\) (for both signs of \(c\)), is defined as:_

\[_{c}=,-c \|\|_{2}^{2})+(1+c\|\|_{2}^{2})}{1-2c ,+c^{2}\|\|_{2}^{2}\|\| _{2}^{2}}, \]

_Where \(,\) is Euclidean inner product. The distance between points in the gyrovector space is defined as:_

\[d_{_{c}}(,)=}_{c}^{-1}( \|-_{c}\|_{2}), \]

_where \(_{c}\) stands for \(\) if \(c>0\) and \(\) if \(c<0\). In both spaces, we have Euclidean geometry when \(c 0\). It is easy to prove that:_

\[d_{_{c}}(,)2\|- \|_{2}, \]

_which means the gyrospace distance converges to Euclidean distance when limiting \(c\) to zero._

Figure 1: Left: Hyperbolic space \(\) ; Center: Euclidean plane \(\) ; Right: Spherical space \(\).

**Definition 2**: _Let \(_{}_{c}\) be the tangent space to the point \(_{c}\). Mapping between (Euclidean) tangent space and hyperbolic/spherical space is performed with exponential map: \(_{}_{c}_{c}\) and logarithmic map: \(_{c}_{}_{c}\), which are defined as:_

\[^{c}_{}()&= _{}}}^{-1}_{c}(\|-_{c}\|_{2})_{c}}{\|-_{c}\|_{2}},\\ ^{c}_{}()&= _{c}(_{c}(_{}\|\|_{2}}{2}) }{\|\|_{2}}), \]

_where \(^{c}_{}\) is a conformal factor, defined as \(^{c}_{}=2/(1+c\|\|^{2}_{2})\), which is used to transform the metric tensors between (Euclidean) tangent space and non-Euclidean space._

### Cartesian Product of Spaces

**Definition 3**: _Product space is defined as the Cartesian product of multiple spaces with varying dimensionality and curvature. Let \(\) denote a product space composed by \(N\) independent component spaces \(^{(1)}\), \(^{(2)}\),...,\(^{(N)}\). The mixed space \(\) has the form (operator \(\) can be omitted):_

\[=_{i=1}^{N}^{(i)}=^{(1)} ^{(2)}...^{(N)}. \]

**Definition 4**: _The product space \(\) also has distance functions. The squared distance between points \(,\) is defined as:_

\[d^{2}_{}(,)=_{i=1}^{N}d^{2}_{^{( i)}}(_{^{(i)}},_{^{(i)}}), \]

_where \(_{^{(i)}}\) and \(_{^{(i)}}\) denote the corresponding vectors on the component space \(^{(i)}\)._

Other operations such as exponential map and logarithmic map are element-wise, meaning that we can decompose the points into component spaces, apply operations on each component space, and then compose them back (e.g., concatenation) to the product space. A product space's signature (i.e., parametrization) refers to the types of space, the number of spaces, the dimensionality, and the curvature of each space. For instance, \((^{100})^{3}(^{50})^{2}\) denotes a Cartesian product space of three hyperbolic spaces of hidden dimension \(100\) and two spherical spaces of hidden dimension \(50\).

## 4 Data-Informed Space Selection

### Geometric Space Pool

Suppose we have a space pool with \(N\) geometric spaces, \(^{(i)}_{c}\{,,\},i=\{1,...,N\}\). For simplicity, we assume all spaces have the same dimensionality \(b\). The goal is to select \(K(1 K<N)\) spaces from the given \(N\) spaces for each data point \(p\). If \(K>1\), the selected \(K\) spaces will form a product space. Theoretically, there will be \({}_{N}C_{K}=\) possible space combinations. Figure 2 illustrates the proposed data-informed space selection pipeline. Here, \(\) and \(\) are selected by data \(p\) and the Cartesian product \(\) is used to handle \(p\).

### Embeddings

For each geometric space \(^{(i)}_{c}\), we define an embedding dictionary \(^{(i)}\). In the \(i^{}\) space, data point \(p\) is represented by a vector \(^{(i)}_{p}^{b}\), where \(b\) is the hidden dimension of this embedding dictionary.

Figure 2: Data-informed geometric space selection. \(\) and \(\) are selected to form \(\) for input data \(p\).

We initialize all the embedding vectors in the tangent space, and the exponential map will be applied to recover them into hyperbolic or spherical space when necessary. In doing so, standard Euclidean optimization algorithms can be directly applied to enable an end-to-end learning framework to avoid the cumbersome Riemannian optimization .

### Geometric Space Selector via Sparsely-gated MOE

We use a sparsely-gate MOE network to select a suitable space subset from the space pool. The selector is a differentiable network that takes as input the embedding vectors \(_{p}^{(i)}\) and outputs the probability of each space to be selected. Formally, the input is defined as:

\[_{p}=[_{p}^{(1)},_{p}^{(2)},...,_{p}^{( N)}]^{}, \]

where \(_{p}\) is a two-dimensional matrix of shape \(N b\). We use a convolutional neural network to transform this matrix into a vector of dimension \(N\). Other types of neural networks are also viable, we adopt CNN because it does not introduce a lot of additional parameters. Then, the last hidden layer of the gating network has the following form:

\[f(_{p})=f_{1}(_{p})+()(1+(f_{2}( _{p}))), \]

where \(f_{1}\) and \(f_{2}\) represent CNN layers and \(f_{*}(_{p})^{N}\); function "randn()" is used to product Gaussian noise in the training stage to improve loading balancing, i.e., balance the number of samples accepted by each space.

To impose sparsity, we employ a TopK function to obtain the largest \(K\) elements from \(f(_{p})\):

\[f(_{p})(f(_{p})), \]

where TopK returns the original value if the element is in the top \(K\) list; otherwise, it returns \(-\). Afterward, \(N\) softmax gating functions \(g_{1},g_{2},...,g_{N}\) are leveraged to control which \(K\) space(s) to be selected. For \(-\), it will output a zero.

\[g_{i}(_{p})=_{p})_{i})}{_{j=1}^{N}(f( _{p})_{j})},i=\{1,...,N\}. \]

Later, spaces with nonzero gating values will be activated while others remain idle. The selected \(K\) space will form a Cartesian product space.

### Task Specific Prediction Function

The prediction function is specific to the type of task. For instance, in each component space \(_{c}^{(i)}\), we can adopt squared distance to produce the model prediction. Given two points \(p\) and \(q\), the prediction function can be defined as \(s_{_{c}^{(i)}}(_{p}^{(i)},_{q}^{(i)})\). If space \(i\) is not selected, \(s_{_{c}^{(i)}}\) is set to \(0\). More details will be provided in the experiment section for each task. If \(K>1\), the final prediction score is computed as:

\[s(p,q)=(_{i=1}^{N}g_{i}(_{p})(s_{^{(i)}}( _{p}^{(i)},_{q}^{(i)}))). \]

Here, a log-sum-exp technique is leveraged to improve the numerical stability to avoid problems such as underflow and overflow. Multiplying the prediction by the gating probability is optional in the framework.

If \(s_{^{(i)}}\) is calculated with squared distance and \(K=N\), we can recover the squared distance function defined for product space by removing \(g_{i}()\) and the log-sum-exp technique. Our prediction function cannot be viewed as a standard distance metric as it does not satisfy the triangle inequality property. Also, it is flexible to use other prediction functions to replace squared distances.

### Load Balancing Regularization

We use a load balancing regularization term to improve numerical stability and avoid some spaces from being over-selected. In specific, two additional regularization terms are used following .

For a batch of \(X\) inputs,

\[_{1}=(_{p X}g(_{p}))^{2}, \]

where \((v)=\) is the coefficient of variation.

\[_{2} =((X))^{2}, \] \[(X)_{i} =_{p X}((_{p})-(f(_{ p}),k,i)}{(1+(f_{2}(_{p}))})), \]

where \((v,k,i)\) is the \(k\)th highest component of \(v\) excluding component \(i\). \(\) is the cumulative distribution function of standard normal distribution.

The two regularization terms are added to the task-specific loss for model optimization:

\[=_{}+_{1}_{1}+_{2}_{2}, \]

where \(_{1}\) and \(_{2}\) are scaling factors (set to \(0.01\) by default).

### Limitation

Compared with Cartesian product space , the proposed method introduces one additional hyperparameter, \(K\). As we will show later, a relatively small \(K\) (e.g., \(K<=5\)) can introduce a significant performance boost. Just like determining the signature of Cartesian product space, we need to determine what geometric spaces to be included in the space pool. This overhead is inherited from Cartesian product space and can be potentially mitigated via hyper-parameters optimization algorithms .

## 5 Experiments

In this section, we evaluate the proposed method on real-world datasets to demonstrate its capability in dealing with practical tasks, including personalized ranking and link prediction for relational graphs.

### Personalized Ranking

The task of personalized ranking is to provide a user with a tailored, ranked list of recommended items . Given a partially-observed interaction matrix between users and items, where each entry of the matrix represents the rating/preference a user \(u\) gives to an item \(v\) if \(u\) has interacted with the item (e.g., watched the movie) and is otherwise missing. We conduct experiments on two well-known datasets, MovieLens 100K and MovieLens 1M. The first dataset consists of 100K ratings between 943 users and 1,682 movies, and the second dataset consists of one million ratings between 6,040 users and 3,706 movies. Over 90% of the entries of these interaction matrices are missing. Completing this matrix enables us to recommend to customers what to watch next.

The personalized ranking model takes a user vector \(_{u}^{(i)}^{b}\) and an item vector \(_{v}^{(i)}^{b}\) as input, and approximate the rating with squared distance . That is, the rating of user \(u\) gives to movie \(v\) is estimated by:

\[s_{^{(i)}}(u,v)=-d_{^{(i)}}^{2}(_{}^{c}( _{u}^{(i)}),_{}^{c}(_{v}^{(i)})). \]

Alternatively, we can use the dot product, \(_{u}^{(i)}_{v}^{(i)}\), to approximate each entry of the matrix .

The input of the gating network is the concatenation of the user and item embeddings. Specifically, a vector of size \(^{2Nb}\) is used as the input, and a linear layer is used as the sparsely-gated network. Let \(s(u,v)\) denote the final prediction. We treat the task as a learning-to-rank problem and optimize it by minimizing the following contrastive loss:

\[_{}=_{(u,v_{1},v_{2})}(0,s(u,v_{1})+m-s(u,v_{2} )), \]where \(\) is the collection of training samples, \(v_{1}\) is the movie that \(u\) watched, and \(v_{2}\) represents an unobserved movie for the user; \(m\) is a hyper-parameter.

We hold 70% entries in each user's interactions as the training set, 10% entries as the validation set for model tuning, and the remaining 20% for model testing. All interactions (e.g., ratings) are binarized following the implicit feedback setting . For all methods, the total dimension \(_{i=1}^{N}b_{i}\) is set to \(100\) for a fair comparison to ensure the same model size. The curvatures for spherical and hyperbolic models are set to \(1\) and \(-1\), respectively. \(N\) is set to \(5\). \(K\) is tuned among \(\{1,2,3,4\}\). Regularization rate is chosen from \(\{0.1,0.01,0.001\}\). \(m\) is fixed to \(0.5\). Adam is adopted as the optimizer. We measure the performance based on the widely adopted metrics in personalized ranking: mean average precision (MAP), precision, and recall at the top-ranked ten items (Precision@10 and Recall@10). For all experiments, we report the average over five runs.

**Main Results.** Figure 3 summarizes the performances. The proposed method achieves the best scores on all three metrics, outperforming the product space counterpart with the same signature and other single space models. Also, dot-product based approach remains competitive in this task. We estimate the global average curvature with the algorithm described in  and obtain a value of \(0.695\) for MovieLens 1M and \(0.19\) for MovieLens 100K, which suggests that they lean towards cyclical structures. However, from the performance comparison among \(^{100}\), \(^{100}\), and \(^{100}\), we find that the model built in Euclidean space offers the best performance, outperforming spherical and hyperbolic counterparts. This observation indicates that the global average curvature estimation algorithms proposed by Gu et al.  may give misleading information, which also ascertains the difficulty of data-space alignment.

### Link Prediction for Relational Graphs

Relational graphs have emerged as an effective way to integrate disparate data sources and model underlying relationships. Encoding the nodes and relations of relational graphs into low-dimensional vector spaces is vital to downstream applications such as missing facts completion, question answering, information extraction, and logical reasoning .

Given a relational graph \(\) with a set of entities \(\) and a set of relations \(\). Each triple, abbreviated as \((h,r,t)\), in \(\) is composed by two entities (i.e., head entity \(h\) and tail entity \(t\)), and the relationship \(r\) between them. In the \(i^{}\) space, entities \(h,t\) are represented by vectors \(_{h}^{(i)},_{t}^{(i)}^{b}\) and relation \(r\) is represented by two translation vectors \(_{r}^{(i)},_{r}^{(i)}^{b}\) and a rotation vector \(_{r}^{(i)}^{b}\). Also, each head (tail) entity is associated with a bias term \(b_{h}(b_{t})\).

Inspired by the method (RotE and RotH) proposed in , we propose a generic model, RotX, that subsumes the two methods and can be extended to spherical space. In RotX, the head entity is translated twice via Mobius addition and rotated once. Formally, the head entity is processed as follows:

\[Q^{(i)}(h,r)=(_{}^{}(_{h}^{(i)}) _{c}_{}^{}(_{r}^{(i)}), _{r}^{(i)})_{c}_{}^{}( _{r}^{(i)}), \]

where \(_{}^{}\) is the exponential map over origin. ROTATE is a rotation function, and \(_{r}^{(i)}\) is the rotation matrix. The transformed head entity is then compared with the tail entities using squared distance.

Figure 3: Personalized ranking performance on MovieLens 1M and MovieLens 100K.

The final scoring function is as follows:

\[s_{^{(i)}}(h,r,t)=-d_{^{(i)}}^{2}(Q^{(i)}(h,r),_{0}^{c}( _{t}^{(i)}))+b_{h}^{(i)}+b_{t}^{(i)}. \]

We make the curvature relation specific and trainable. Each relation has a curvature parameter and is trained simultaneously with the model. We adopt the following cross-entropy loss as the objective function:

\[_{}=_{(h,r,t)}(1+(-Y_{(h,r,t)}s(h,r,t))), \]

where \(Y_{(h,r,t)}\{1,-1\}\) is a binary label indicating whether a triple is factual (1) or not (-1). \(\) represents the training collection, including positive and negative triples.

We use two datasets including WN18RR [8; 16] and FB15K-237 [8; 16] for model evaluation. WN18RR is taken from WordNet, a lexical database of semantic relations between words. It has \(40,943\) entities, \(11\) relations, and \(86,835/3,034/3,134\) training/validation/test triples. FB15K-237 is a subset of the Freebase knowledge graph, a global resource of common and general information. It has \(14,541\) entities, \(237\) relations, and \(272,115/17,535/20,466\) training/validation/test triples. The performance is evaluated using two standard metrics, including mean reciprocal rank (MRR) and hit rate (HR) with a given cut-off value \(\{1,3,10\}\).

The total dimension is fixed to \(500\) for a fair comparison. Learning rate is tuned amongst \(\{0.01,0.005,0.001\}\). For all experiments, we report the average over \(5\) runs. We set the kernel size to \(5\) and stride to \(3\) for convolution operation in the gating network. \(N\) is set to \(5\) and \(K\) is tuned among \(\{1,2,3,4\}\). The number of negative samples (uniformly sampled) per factual triple is set to \(50\). Optimizer Adam is used for model learning. We perform early stopping if the validation MRR stops increasing after \(10\) epochs.

We compare our method with several baselines, including Euclidean methods TransE , Dist-Mult , ConvE , TuckER , RotE , BoxE ; complex number based methods ComplEx-N3,  and RotatE ; quaternion model QuatE ; spherical models MuRS ; hyperbolic methods MurP , RotH ; Cartesian product space model M\({}^{2}\)GNN , and Transformer/pretrained model based models HitER  and CSProm-KG 1. CSProm-KG uses the pretrained large language model (LLM), BERT , as the backbone.

**Main Results.** We report the performance comparison in Figure 4 where we use TransE-AT  as baseline2 and report the differences. We make the following observations. Firstly, our method outperforms all compared baselines without pretrained large language model as external sources. Specifically, it outperforms Euclidean, hyperbolic, spherical, complex-valued, and Cartesian product spaces methods and obtains a clear performance gain over the second-best model. Secondly, the

Figure 4: Performance on relational graphs link prediction. We use the performance of TransE-AT  as the baseline (e.g., \(\)MRR = MRR(Model) - MRR(TransE-AT)) for the lollipop charts. In our method, for WN18RR, the geometric space pool consists of \(4^{100}\) and one \(^{100}\), \(K=4\); for FB15K-237, the geometric space pool consists of \(3^{100}\) and \(2^{100}\), \(K=4\).

improvement over the second-best model on FB15K-237 is larger than that on WN18RR. One possible explanation is that FB15K-237 has a more diverse set of relations and a higher structure heterogeneity , so a better geometric space alignment could bring more value. It is worth noting that WN18RR is sampled from the WordNet lexical database and BERT is trained on a large corpus of lexical data, it is unsurprising that CSProm-KG can obtain very high score on WN18RR. However, its relatively modest scores on FB15K-237 suggest limited practicality for non-lexical knowledge graphs. As such, it is not fair to compare an LLM based approach with our approach as using LLM may lead to data leakage.

Distribution of the selected Geometric SpaceFigure 5 (left and center) presents the distribution of the selected spaces. We observe that certain product spaces are preferred depending on the dataset. For example, the product space \(_{2}_{3}\) is the most selected space on WN18RR. While on FB15K-237, the product space \(_{1}_{2}_{3}_{1}\) is more preferable. To show more fine-grained examples, we randomly select four relations from FB15K-237 and visualize the distribution in Figure 5 (Right). We find that each relation has their own desirable product spaces. For example, relation "_location/location/time_zones_" prefers space \(_{1}_{2}_{3}_{1}\) but relation "_people/person/profession_" prefers space \(_{1}_{3}_{1}_{2}\). This reconfirms the specification capability of our method.

To show how the space distribution coincides with data structures, we randomly extract three connected graph components from the test set of FB15K-237 and visualize them in Figure 6. Each triple can be represented with an edge and its two end nodes. We render edges with different colors based on the type of product spaces used to model the corresponding triples. From the left two graphs, we see some clear clusters with a dominant color, which suggests that neighborhood triples are more likely to be processed with the same selected product space. From the right-most graph, we find that different relations usually prefer different spaces, which indicates that the type of relations plays a critical role in the space selection process.

Comparison with Cartesian Product Space with Varying SignaturesCompared with M\({}^{2}\)GNN (its signature is \(^{200}^{200}^{200}\)) (in Figure 4). Our model achieves the best performance even with

   \)} &  &  &  \\   & & & MRR & HR@3 & MRR & HR@3 \\   & \(^{500}\) & 0.492 & 0.514 & 0.293 & 0.322 \\   & \((^{100})^{3}(^{100})^{2}\) & 0.484 & 0.498 & 0.311 & 0.344 \\  & \((^{100})^{4}^{100}\) & 0.479 & 0.497 & 0.312 & 0.344 \\  & \((^{100})^{4}^{100}\) & 0.468 & 0.488 & 0.321 & 0.356 \\  & \((^{100})^{2}(^{100})^{2}^{100}\) & 0.479 & 0.496 & 0.308 & 0.342 \\   & \(3^{100}\), \(2^{100}\) & 0.500 & 0.521 & 0.530 & 0.545 \\    & \(4 100\), \(2^{100}\) & 0.526 & 0.549 & 0.525 & 0.531 \\    & \(4^{100}\), \(2^{100}\), \(^{100}\) & 0.504 & 0.526 & 0.515 & 0.527 \\    & \(2^{100}\), \(2^{100}\), \(^{100}\) & 0.522 & 0.546 & 0.526 & 0.535 \\   

Table 1: Comparison with Cartesian product space models  (a few signatures are reported due to length constraints). \(K=2\) for WN18RR and \(K=4\) for FB15K-237.

Figure 5: Left: distribution of the selected geometric space on WN18RR; Center: distribution of the selected geometric space on FB15K-237; Right: geometric space distribution of four relations from FB15K-237.

Figure 6: Distribution of the selected spaces shown in a sub-graph of the FB15K-237.

fewer trainable parameters. Then, we compare our method with Cartesian product space models with varying signatures in Table 1. We observe that our method constantly outperforms pure product spaces with the same prior signatures. It is worth noting that our method requires merely two/four active spaces to outperform product space models with five active spaces. These observations reconfirm the effectiveness of the data-informed space alignment method.

**Impact of N and K.**

The left figure of 7 shows the impact of \(N\) by fixing \(K\). We observe that (a) the model performance does not benefit much from increasing \(N\)_on this dataset_; (b) the inference time remains nearly constant when we increase \(N\), confirming its efficiency. The effect of \(K\) is shown in Figure 7 (right). We find that \(K\) has a higher impact on the model performance and inference time. Increasing \(K\) will generally degrade the performance _on this dataset_ and yield additional computational overhead.

## 6 Conclusion

In this paper, we propose a data-informed geometric space selection method. Our method enables an automatic alignment between data and geometric spaces by allowing each data point to automatically select its preferred geometric spaces via a sparsely-gated MOE network. It brings a greater extent of specification for geometric representations while remaining efficient. We show that the proposed approach can boost representation performance in real-world applications with a noticeable margin.

**Broader Impact.** This approach exhibits considerable potential in facilitating enhanced and versatile geometric representation learning, thereby engendering broader and more comprehensive applications across various domains.