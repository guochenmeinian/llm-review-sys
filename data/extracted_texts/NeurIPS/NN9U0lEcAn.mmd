# ActFusion: a Unified Diffusion Model

for Action Segmentation and Anticipation

 Dayoung Gong Suha Kwak Minsu Cho

Pohang University of Science and Technology (POSTECH)

{dayoung.gong, suha.kwak, mscho}@postech.ac.kr

###### Abstract

Temporal action segmentation and long-term action anticipation are two popular vision tasks for the temporal analysis of actions in videos. Despite apparent relevance and potential complementarity, these two problems have been investigated as separate and distinct tasks. In this work, we tackle these two problems, action segmentation and action anticipation, jointly using a unified diffusion model dubbed ActFusion. The key idea to unification is to train the model to effectively handle both visible and invisible parts of the sequence in an integrated manner; the visible part is for temporal segmentation, and the invisible part is for future anticipation. To this end, we introduce a new anticipative masking strategy during training in which a late part of the video frames is masked as invisible, and learnable tokens replace these frames to learn to predict the invisible future. Experimental results demonstrate the bi-directional benefits between action segmentation and anticipation. ActFusion achieves the state-of-the-art performance across the standard benchmarks of 50 Salads, Breakfast, and GTEA, outperforming task-specific models in both of the two tasks with a single unified model through joint learning.

## 1 Introduction

In everyday life, when interacting with people, we anticipate their future actions while recognizing their actions observed in the present and the past. Similarly, for effective human-robot interaction, robotic agents must recognize ongoing actions while anticipating future behaviors. Two essential tasks in computer vision for such a temporal understanding of human actions are temporal action segmentation (TAS)  and long-term action anticipation (LTA) . The task of TAS aims at translating observed video frames into a sequence of action segments, while the goal of LTA is to predict a plausible sequence of actions in the future based on the observed video frames. These tasks are closely related in terms of understanding the relations between actions; recognizing actions in the present and the past may improve anticipating action in the future, and the ability to anticipate the future may also enhance recognizing observable actions when facing visual ambiguities.

Despite the apparent relevance and potential complementarity, these two problems have been investigated as separate and distinct tasks. While a growing body of work has shown remarkable progress on both TAS and LTA, these methods are primarily designed for one task (see Fig. 1a) and show poor generalization when applied to the other (e.g., see FUTR  and DiffAct  in Fig. 1c). Some prior methods tackle both tasks simultaneously, but they rely on task-specific architectures and require separate training for each individual task (e.g., see TempAgg  in Fig. 1c).

In this paper, we introduce ActFusion, a unified diffusion model that addresses TAS and LTA through a single architecture and training process, as illustrated in Fig. 1b. The core idea of our unification lies in training the model to effectively handle two different parts of the sequence: visible parts for action segmentation and invisible parts for action anticipation. Accordingly, we propose anew anticipative masking strategy in which a late part of the video frames is masked as invisible, and learnable tokens replace it. We also introduce a random masking strategy to help the model accurately identify actions when some parts of the video are ambiguous , drawing inspiration from previous methods [15; 6; 28; 59]. ActFusion generates action sequences from Gaussian noise through iterative denoising, conditioned on both visual features and mask tokens. Through this process, the model jointly learns to classify action labels of visual features and predict future actions of mask tokens. As shown in Fig. 1c, ActFusion achieves superior performance in both action segmentation and anticipation, demonstrating stronger cross-task generalization compared to previous methods [43; 25; 52].

Furthermore, we find that the benchmark evaluation of some prior LTA methods [2; 20; 25] has exploited the ground-truth length of input videos in testing time, which makes the evaluation unrealistic and problematic since the duration of future actions is supposed to be unknown in advance. To address this issue, we conduct comprehensive experiments both with and without ground-truth length information, providing insights into more realistic deployment scenarios.

Our contribution can be summarized as follows: **1)** We introduce ActFusion, a unified diffusion model that jointly addresses TAS and LTA through a single training process. **2)** We present anticipative masking for effective task unification, along with random masking to enhance robustness against visual ambiguities. **3)** Comprehensive experimental results show that jointly learning both tasks provides bi-directional benefits. ActFusion achieves state-of-the-art performance on TAS and LTA across benchmark datasets - 50 Salads and Breakfast, and GTEA - demonstrating the effectiveness of the proposed method.

## 2 Related work

**Temporal action segmentation (TAS).** The goal of TAS [19; 65; 43; 63; 12; 23; 5; 8; 32; 3; 16] is to classify frame-wise action labels in a video. Earlier approaches employ temporal sliding windows [50; 33] for action segment detection, grammar-based methods [37; 36] have been introduced to incorporate a temporal hierarchy of actions during segmentation. Temporal convolution networks [38; 19] and Transformer-based models [65; 8] are introduced based on deep learning methods. Since learning long-term relations of actions from activity videos is challenging, a series of work has been proposed to develop refinement strategies [30; 32; 23; 12; 57; 63; 3; 24] that can be applied to the TAS models [19; 65]. Recently, DiffAct  is proposed to iteratively denoising action predictions conditioned on the input video features adopting the diffusion process. In a similar spirit, the proposed ActFusion is based on the diffusion process, focusing on unifying TAS and LTA through anticipative masking. We demonstrate the bidirectional benefits between the two tasks, showing that learning segmentation along with anticipation is effective.

**Long-term action anticipation (LTA).** LTA [2; 1; 34; 20; 52; 25; 44; 26] has recently emerged as a crucial task for predicting a sequence of future actions in long-term videos. Initial models use RNNs

Figure 1: **Task-specific models vs. ActFusion (ours). (a) Conventional task-specific models for TAS and LTA. (b) Our unified model ActFusion to address both tasks. (c) Performance comparison across tasks. Tasks-specific models such as DiffAct  for TAS and FUTR  for LTA exhibits poor performance on cross-task evaluations. ActFusion outperforms task-specific models on both TAS and LTA, including TempAgg , which trains separate models for each task. Note that the performance of ActFusion is evaluation result of a single model through a single training process. The reported performance represents the average of each task in the original paper or evaluated with the official checkpoint (See Sec. G for details).**

and CNNs , while time-conditioned anticipation  introduces one-shot anticipation of specific future timestamps. A GRU-based model  used cycle-consistent relations of past and future actions. Sener et al.  proposed TempAgg, a multi-granular temporal aggregation method for action anticipation and recognition, utilizing different model architectures and task-specific losses for the two tasks. Gong _et al._ propose a transformer model for parallel anticipation, dubbed FUTR, empirically showing that learning action segmentation as an auxiliary task is helpful for anticipation. Nawhal _et al._ propose a two-stage learning approach for LTA and Zhang _et al._ present object-centric representations using visual-language pre-trained models for LTA. While previous work [52; 20; 25; 44] adopts TAS as an auxiliary task to help learn LTA, a unified model evaluated on both tasks is rarely explored, often showing poor cross-task generalization performance (Fig. 1c). The exception is TempAgg, which requires separate training and model architecture for the two tasks. In this work, we present a unified model that tackles both TAS and LTA in a single training process.

**Diffusion models.** Recent success in denoising diffusion models [55; 29; 56] opens a new era of computer vision research. The diffusion models learn the original data distribution through the iterative denoising process. Diffusion models have recently shown notable success in various domains, such as image generation [51; 14], video generation [42; 27; 64], object detection , semantic segmentation , temporal action segmentation , self-supervised learning , and etc . Recently, DiffMAE  integrates masked autoencoders with the diffusion models, where the model learns to denoise masked input while learning data distributions through generative pre-training of visual representations. In this work, we present a unified diffusion model that effectively integrates TAS and LTA through masking, where the model learns to denoise action labels conditioned on both visual and mask tokens. In this way, the model can effectively learn temporal relations between actions by classifying visual tokens and inferring missing actions of the mask tokens.

## 3 Preliminary

In this section, we give a brief overview of diffusion models [29; 54]. The diffusion models learn a data distribution by mapping and denoising noises from the original data distribution. The training process of diffusion models involves forward and reverse processes from random noise. During the forward process, Gaussian noise is added to the original data, while in the reverse process, a neural network learns to reconstruct the original data by iteratively removing noise.

The forward process, or diffusion process, transforms the original data \(x^{0}\) into noisy data \(x^{s}\):

\[x^{s}=x^{0}+.\] (1)

Here, a noise \( N(0,)\) is added to the original data distribution \(x^{0}\) following the decreasing function \((s)\) of time step \(s\{1,2,...,S\}\), where \(S\) represents the entire forward time-step. Note that the function \((s)\) determines the intensity of the noise added to the original data following the pre-defined variance schedule .

In the reverse process, a neural network \(f(x^{s},s)\) is trained to recover the original data \(x^{0}\) from noisy data \(x^{s}\) using \(l_{2}\) regression loss:

\[=||f(x^{s},s)-x^{0}||^{2}.\] (2)

During inference, the model \(f\) iteratively denoises pure noise \(x^{S}\) to reconstruct the original data \(x^{0}\), _i.e._, \(x^{S} x^{S-}... x^{0}\), following the updating rule [29; 54]. We refer the reader to [29; 54] and Sec. A for more details.

In our context, the neural network learns to generate action sequences from Gaussian noise, conditioned on visible features for action segmentation and mask tokens for action anticipation.

## 4 Proposed approach

We present ActFusion, a unified diffusion model for action segmentation and anticipation. This section describes the problem setup in Sec. 4.1, the model architecture in Sec. 4.2, and the proposed masking strategies and training objectives in Sec. 4.3 and Sec. 4.4, respectively.

### Problem setup

Temporal action segmentation (TAS) aims to classify input video frames into a sequence of predefined action classes, while long-term action anticipation (LTA) predicts future actions based on partially observed video sequences. Formally, given a video sequence \(=[F_{1},F_{2},,F_{T}]\) of length \(T\), TAS predicts frame-wise action labels \(=[A_{1},A_{2},,A_{T}]\), where each \(A_{i}\) is a one-hot vector representing the action class. In LTA, given the first \(N^{}= T\) observed frames, the goal is to anticipate action labels for the subsequent \(N^{}= T\) frames, where \(\) and \([0,1-]\) represent the observation and anticipation ratios, respectively. Here, \(\) denotes the ceiling function.

### ActFusion

ActFusion aims to unify TAS and LTA by leveraging an encoder-decoder architecture with adaptive masking strategies. Figure 2 illustrates the overall pipeline, where ActFusion consists of a masked encoder \(g\) and a denoising decoder \(h\). The encoder obtains visual features and mask tokens as input and generates embedded tokens as output. The decoder then progressively reduces noises through an iterative denoising process conditioned on the embedded tokens.

During training, we randomly sample a time step \(s\{1,2,...,S\}\) for each iteration and add noise \( N(0,)\) to the ground-truth action labels \(^{0}\) following Eq. 1, resulting in noisy action labels \(^{s}\). The decoder then aims to denoise \(^{s}\) to reconstruct the original action labels \(}^{0}\). During inference, the decoder starts with Gaussian noise \(}^{S}\) and progressively denoises it following the DDIM  update rule to generate final predictions \(}^{0}\), _i.e._, \(}^{S}}^{S-}...}^{0}\).

The key to our unified approach lies in training the model to effectively process both visible and invisible parts of the sequence, where the visible part corresponds to observed video frames and the invisible part represents future frames to be anticipated. To this end, we introduce anticipative masking that replaces unobserved frames with learnable mask tokens, enabling the model to learn future predictions. We apply this masking strategy consistently during both training and inference to achieve joint learning of action segmentation and anticipation. We further incorporate random masking, where video frames are randomly masked to enhance robustness against visual ambiguities. Both masking strategies are detailed in Sec. 4.3.

**Input structuring.** Given input video features \(^{T C}\) with \(T\) frames of \(C\) feature dimensions, we start by defining a binary mask matrix \(\{0,1\}^{T 1}\). This mask serves as a frame selector, where a value of 0 indicates a frame to be masked and replaced by mask tokens, while a value of 1 indicates an unmasked frame. The learnable mask token, denoted as \(^{1 C}\), replaces the visual

Figure 2: **Overall pipeline of ActFusion. During training, we randomly select one of five masking strategies and apply it to input video frames \(\), replacing masked regions with learnable tokens to obtain masked features \(^{}\). These features are processed by the encoder \(g\) to produce visual embeddings \(\), which condition the decoder \(h\) to denoise action labels from \(^{s}\) to \(}^{0}\) at time-step \(s\). For inference, we use different masking strategies depending on the task: no masking for TAS and anticipative masking for LTA. The decoder then iteratively denoises action labels following \(}^{S}}^{S-}...}^{0}\) using the DDIM update rule .**features in frames selected for masking, producing the input features \(}\) for the encoder:

\[}=+(_{T C}-),\] (3)

where \(\) denotes element-wise multiplication and \(_{i j}\) represents a matrix of ones with dimensions \(i j\). Here, \(\) and \(\) are broadcasted along the channel and temporal dimensions, respectively.

For our model architecture, we use a modified version of ASFormer  used in DiffAct , which employs dilated attention to capture both local and global relations in the input sequence (See Fig. S2 for the detailed model architecture).

**Encoder.** The encoder consists of the \(N^{}\) layers, each consisting of a dilated 1-d convolution followed by instance normalization, dilated attention, and a feed-forward network . In the dilated attention mechanism, the receptive field is limited to a local window size \(w=2^{i}\) for the \(i\)-th layer, where the increasing dilation captures progressively broader temporal relations. The output of each layer is combined with its input via a residual connection before proceeding to the subsequent layer. Given the input features \(}\), the encoder \(g\) produces embedded tokens \(^{T D}\) as:

\[=g(}),\] (4)

where \(D\) represents the dimensions of embedded tokens. A fully-connected (FC) layer \(^{}^{D K}\) is applied to \(\) to obtain frame-wise classification logits from the encoder followed by a softmax:

\[}^{}=(^{}),\] (5)

where \(K\) is the number of action classes and \(\) is the softmax.

**Decoder.** The decoder is composed of \(N^{}\) sequential layers. Each layer consists of dilated 1-d convolution, dilated attention, instance normalization, and feed-forward networks. As in the encoder, the dilation ratio for the \(i\)-th layer is set to \(w=2^{i}\). The output of each layer is combined with its input through a residual connection before being passed into the subsequent layer.

Given a time step \(s\), noisy action labels \(^{s}\) at time step \(s\), and encoder embeddings \(\), the decoder \(h\) produces output embeddings \(^{T D}\) according to:

\[=h(^{s},s,).\] (6)

The final action label predictions \(}^{0}^{T K}\) are obtained by projecting \(\) through a fully-connected layer \(^{}^{D K}\) followed by softmax:

\[}^{0}=(^{}).\] (7)

### Masking strategy

We introduce two distinct masking strategies: anticipative masking and random masking.

**Anticipative masking.** Anticipative masking enables joint learning of TAS and LTA by separating visible and invisible parts of the input sequence. This strategy masks the latter portion of video frames, requiring the model to predict future actions based on observed frames. Given a video length \(T\), we define a binary anticipation mask \(}\{0,1\}^{T}\) that sets visible frames to 1 and invisible frames to 0: \(_{i}}=(i N^{})\), where \(\) is an indicator function and \(N^{}\) represents the number of observed frames. Unlike causal masking  that prevents attending to future tokens, our anticipative masking allows interactions among visible tokens while maintaining a clear boundary for anticipation.

**Random masking.** Random masking aims to provide robustness in prediction when parts of video frames are missing or ambiguous . A video is first divided into pre-defined clips of size \(Q\), resulting in \(N^{}=\) total clips. Then, \(N^{}\) clips are randomly selected to be masked. A binary random mask is defined by \(_{i}}=( j,\;(j-1)Q<i jQ)\), where \(\) is a randomly selected subset of \(\{1,,N^{}\}\) with \(||=N^{}\).

For fully observable scenarios, we utilize a no mask strategy \(}}\) where all frames remain visible. Additionally, we adopt two masking strategies , the relation mask \(}}\) and the boundary mask \(}}\), as illustrated in Fig. 2. The relation mask \(}}\) randomly masks segments associated with an action class to learn inter-action dependencies. The boundary mask \(}}\) masks frames at action transitions to enhance boundary detection. See Sec. C for the detailed formulations of the masks.

During training, one of five masking strategies is randomly selected: no mask \(}}\), anticipative mask \(}}\), random mask \(}}\), relation mask \(}}\), and boundary mask \(}}\). For inference, no mask \(}}\) is used for TAS and anticipative mask \(}}\) for LTA.

### Training objective

The model is trained with three types of losses: cross-entropy loss \(^{}\) for frame-wise classification, boundary smoothing loss \(^{}\), and boundary alignment loss \(^{}\). These losses are applied to both encoder and decoder, where the encoder serves as an auxiliary task to enhance discrimination ability. Given the ground-truth action label \(^{0}^{T K}\) and the predictions \(}^{T K}\), the cross entropy loss is defined by:

\[_{}(^{0},})=-_{i=1}^{T} _{j=1}^{K}^{0}_{i,j}}_{i,j}.\] (8)

To prevent over-segmentation errors, a temporal smooth loss  between adjacent frames based on a truncated mean squared error over the frame-wise log probabilities are defined by:

\[_{}(})=_{i=1}^{T-1}_ {j=1}^{K}(}_{i,j}-}_{i+1,j})^{2},\] (9)

where the difference of the log probabilities of two adjacent frames is truncated with a threshold value. For precise boundary detection, the boundary alignment loss  is employed based on the binary cross-entropy loss:

\[_{}(},})=_{i=1}^{ T-1}\{-}_{i}(1-}_{i}}_{i+1})-(1-}_{i})(}_{i}}_{i+1})\},\] (10)

where \(}=()\) represents a softened version of the ground-truth action boundary \(_{i}=(^{0}_{i}^{0}_{i+1})\), achieved through a Gaussian kernel \(\). The encoder and decoder losses are defined by

\[^{} =_{}^{}_{}^{ }(^{0},}^{})+_{}^{ }_{}^{}(}^{})+_{}^{}_{}^{ }(},}^{}),\] (11) \[^{} =_{}^{}_{}^{ }(^{0},}^{})+_{}^{ }_{}^{}(}^{})+_{}^{}_{}^{ }(},}^{}),\] (12)

where \(\) denotes a scaling factor. The total loss is defined as \(^{}=^{}+^{}\).

## 5 Experiments

In this section, we conduct experiments to demonstrate the effectiveness of our model. All reported experimental results are obtained from inference using a single unified model. We evaluate our

    &  &  &  &  &  \\  & F1@  & & & & & Acc. & & & & & & & & & & \\  MS-TCN  & 76.3 / 74.0 / 64.5 & 67.9 & 80.7 & 27.2 & 52.6 / 48.1 / 37.9 & 61.6 & 66.3 & 53.3 & 85.8 / 83.4 / 69.8 & 70.9 & 76.3 & 78.9 \\ MS-TCN++  & 80.7 / 78.5 / 70.1 & 74.3 & 83.7 & 77.5 & 64.1 / 85.6 / 45.9 & 65.6 & 67.6 & 60.4 & 88.8 / 85.7 / 76.0 & 83.5 & 80.1 & 82.8 \\ SSTDA  & 83.0 / 81.5 / 73.8 & 75.8 & 83.2 & 79.5 / 70.0 / 61.5 / 52.5 & 73.0 & 70.2 & 68.6 & 90.9 / 81.7 / 78.0 & 86.2 & 79.8 & 84.6 \\ GTRM  & 77.7 / 72.8 / 63.9 / 65.9 & 65.2 & 72.4 & 57.5 / 54.0 / 44.3 & 58.7 & 68.0 / 55.7 & - & - & - & - & - \\ BCN  & 82.3 / 83.1 / 74.0 & 74.3 & 84.4 & 79.3 & 68.7 / 65.5 / 55.0 & 62.0 & 76.2 & 65.8 / 88.7 / 77.3 & 84.4 & 79.8 & 83.4 \\ MTDA  & 82.0 / 80.1 / 72.5 & 75.2 & 83.2 & 78.6 / 68.6 / 56.5 & 73.6 & 71.0 & 88.0 / 85.8 / 76.2 & 88.5 & 80.0 & 84.2 \\ Global[local]  & 80.3 / 78.0 / 69.8 & 73.4 & 82.2 & 76.7 / 74.9 / 69.0 / 55.2 & 73.3 & 70.7 & 68.6 & 89.9 / 87.3 / 75.8 & 84.6 & 78.5 & 83.2 \\ HASB  & 86.6 / 85.7 / 78.6 & 73.0 & 83.9 & 83.1 & 74.7 / 69.5 / 57.0 & 71.9 & 64.8 & 86.9 / 88.6 / 76.4 & 87.5 & 78.7 & 84.4 \\ ASRF  & 84.9 / 85.7 / 73.3 & 84.5 & 81.9 & 74.3 / 69.7 / 56.1 & 72.4 & 67.6 & 67.9 / 87.4 / 78.3 & 87.3 & 77.3 & 83.6 \\ ASRForm  & 85.1 / 83.4 / 76.0 & 79.6 & 85.6 & 81.9 & 76.0 / 76.7 / 57.0 & 75.0 & 73.5 & 70.5 & 90.1 / 88.8 / 79.2 & 84.6 & 79.7 & 84.5 \\ ASRForm  & 85.4 / 83.8 / 74.0 & 79.4 & 85.2 & 84.2 & 78.8 / 70.8 & 77.0 & 74.0 & 73.0 & - & - & - & - \\ Temporal Age  & - & - & - & - & - & - & - & - & - & - & - & - & - \\ ULA  & 87.8 / 86.3 / 79.4 & 78.0 & 87.2 & 84.5 / 76.0 / 73.5 / 75.6 & 75.1 & 71.7 & 70.1 & 92.9 / 92.0 / 82.9 & 90.0 & 82.0 & 88.1 \\ DSPT  & 89.9 / 88.7 / 81.1 & 84.7 & 86.5 & 86.2 & - & - & - & - & - & - & - & - & - \\ TCP  & 87.5 / 86.1 / 80.2 & 83.4 & 86.6 & 84.8 & 76.6 / 77.1 / 58.5 & 76.1 & 77.5 & 72.0 & 91.7 / 91.5 / 82.8 & 88.1 & 79.6 & 86.9 \\ FAMMSDMT  & 87.8 / 86.3 / 79.4 & 82.0 & 87.2 & 84.5 / 76.0 / 73.5 / 75.6 & 75.1 & 71.7 & 70.1 & 92.9 / 92.0 / 82.9 & 90.0 & 83.0 & 88.1 \\ SEDT  & 89.9 / 88.7 / 81.1 / 84.7 & 86.5 & 86.2 & -method on three widely-used benchmark datasets: 50 Salads , Breakfast , and GTEA  (see Sec. F for details). All three datasets are used to evaluate on TAS, while 50 Salads and Breakfast are used for evaluating LTA, following the protocols of the previous work [19; 65; 43; 20; 52; 25].

**Evaluation metrics.** For evaluation metrics for TAS, we report F1@\(\{10,25,50\}\) scores, the edit score, and frame-wise accuracy [19; 65; 43]. The F1 scores and the edit score are segment-wise metrics, and accuracy is a frame-wise metric. Mean over classes accuracy (MoC) is adopted as an evaluation metric for LTA [2; 34; 52; 25].

**Implementation details** We utilize the pre-trained I3D features  as input video features for all datasets provided by . For the diffusion process, we set the entire time step \(S\) as 1000 [29; 54], with a skipped time step for inference set to 25 . For the anticipation mask \(}}\), we set the observation ratio \(\{0.2,0.3,0.4,0.5,0.6,0.7,0.8\}\). For the random mask \(}}\), we fix the size of patch \(w\) to 10 for both tasks and randomly select the number of masked patches \(N^{}\) to 25, 10, and 20 for 50 Salads, Breakfast, and GTEA, respectively. For the encoder and decoder, we adopt a modified version of ASFormer  using relative positional bias where the maximum number of neighbors is set to 100. During inference, we set \(\) to 1 and \(\) to 0 for TAS [65; 19; 43]. For LTA, we set \(\{0.2,0.3\}\) and \(\{0.1,0.2,0.3,0.5\}\), following the evaluation protocols [2; 20; 52; 25]. See Sec. G for more details.

### Comparison with the state of the art on TAS and LTA

Tables 1 and 2 present performance comparisons across benchmark datasets, where our single unified model achieves superior results on both tasks. Table 1 shows the results on TAS, where ActFusion outperforms all task-specific models demonstrating the benefits of joint learning. Table 2 compares LTA performance across different datasets and input types: predicted action labels of the visual features  and pre-trained I3D features . Overall, ActFusion achieves state-of-the-art performance on two benchmark datasets, demonstrating the efficacy of joint learning for TAS and LTA based on the diffusion process. Note that we do not include the performance of ANTICIPATR  due to differences in evaluation setup, as reported in .

### Analysis

We conduct comprehensive analyses to validate the effectiveness of the proposed method. In the following experiments, we evaluate our approach on the 50 Salads dataset. All experimental settings are the same as explained in Sec. 5 unless otherwise specified.

    &  &  &  &  \\   & & & 0.1 & 0.2 & 0.3 & 0.5 & 0.1 & 0.2 & 0.3 & 0.5 \\   &  & RNN  & 30.06 & 25.43 & 18.74 & 13.49 & 30.77 & 17.19 & 14.79 & 09.77 \\  & & CNN  & 21.24 & 19.03 & 15.98 & 09.87 & 29.14 & 20.14 & 17.46 & 10.86 \\  & & UAAA (mode)  & 24.86 & 22.37 & 19.88 & 12.82 & 29.10 & 20.50 & 15.28 & 12.31 \\  & & Time-Cond.  & 32.51 & 27.61 & 21.26 & 15.99 & 35.12 & 27.05 & 22.05 & 15.59 \\   &  & Temporal Agg.  & 25.50 & 19.90 & 18.20 & 15.10 & 30.60 & 22.50 & 19.10 & 11.20 \\  & & Cycle Cons.  & 34.76 & 28.41 & 21.82 & 15.25 & 34.39 & 23.70 & 18.95 & 15.89 \\  & & A-ACT  & 35.40 & **29.60** & 22.50 & 16.10 & 35.70 & 25.30 & 20.10 & 16.30 \\  & & FUTR  & **39.55** & 27.54 & 23.31 & 17.77 & 35.15 & 24.86 & 24.22 & 15.26 \\  & & ObjectPrompt  & 37.40 & 28.90 & **24.20** & **18.10** & 28.00 & 24.00 & **24.30** & 19.30 \\  & & ActFusion (ours) & **39.55** & 28.60 & 23.61 & **19.90** & **42.80** & **27.11** & **23.48** & **22.07** \\   &  & RNN  & 18.11 & 17.20 & 15.94 & 15.81 & 21.64 & 20.02 & 19.73 & 19.21 \\  & & CNN  & 17.90 & 16.35 & 15.37 & 14.54 & 22.44 & 20.12 & 19.69 & 18.76 \\   & & UAAA (mode)  & 16.71 & 15.40 & 14.47 & 14.20 & 20.73 & 18.27 & 18.42 & 16.86 \\   & & Time-Cond.  & 18.41 & 17.21 & 16.42 & 15.84 & 22.75 & 20.44 & 19.64 & 19.75 \\    &  & Temporal Agg.  & 24.20 & 21.10 & 20.00 & 18.10 & 30.40 & 26.30 & 23.80 & 21.20 \\   & & Cycle Cons.  & 25.88 & 23.42 & 22.42 & 21.24 & 29.66 & 27.37 & 25.58 & 25.20 \\   & & A-ACT  & 26.70 & 24.30 & 23.20 & 21.70 & 30.80 & 28.30 & 26.10 & 25.80 \\   & & FUTR  & 27.70 & 24.55 & 22.83 & 22.04 & 32.27 & 29.88 & 27.49 & 25.87 \\   & & **ActFusion (ours)** & **28.25** & **25.52** & **24.66** & **23.25** & **35.79** & **31.76** & **29.64** & **28.78** \\   

Table 2: **Comparison with the state of the art on LTA. The overall results demonstrate the effectiveness of ActFusion, achieving new SOTA performance in LTA. Bold values represent the highest accuracy, while underlined values indicate the second-highest accuracy.**

**Segmentation helps anticipation.** To validate the impact of learning TAS on LTA, we conduct loss ablation experiments by removing the action segmentation loss on the observed \(N^{}\) frames. Table 3 shows the results. Specifically, we exclude the encoder loss \(^{}\) in Eq. 11, while omitting the decoder loss \(^{}\) in Eq. 12 on the observed frames. For simplicity, we denote the decoder loss for the observed frames and unobserved frames to be anticipated as \(^{}_{}\) and \(^{}_{}\), respectively. Note that \(^{}_{}\) are utilized for effective anticipation learning. By comparing (1) and (3) in Table 3, we observe a significant performance drop when removing the loss on the observed frames. We observe that applying segmentation loss on the observed frames in the decoder improves performance when comparing (1) and (3). The overall results show that learning action segmentation plays a crucial role in improving action anticipation.

**Anticipation helps segmentation.** To validate the effect of jointly learning anticipation along with segmentation, we conduct ablation studies on anticipative masking \(}}}\) in Table 4. Comparing (1) and (2) in Table 3(a), we find that using anticipation masking helps improve the performance of TAS. In comparison to the results in Table 4, where segmentation greatly enhances anticipation, the performance improvement without using anticipation masking is slightly lower. Nevertheless, we find that anticipation does contribute positively to the overall metrics of segmentation.

**Ablation studies on masking types.** To evaluate the effects of different types of masking on TAS and LTA, we conduct ablation studies in Table 4. The performance on TAS and LTA are presented in Table 3(a) and 3(b), respectively. We observe that anticipative masking \(}}}\) plays a significant role in the joint learning of TAS and LTA, as evidenced by the substantial performance drop in LTA when comparing row (2) with the other rows in Table 3(b). Random masking \(}}}\) significantly reduces performance in both TAS and LTA, as shown in row (3) of Table 4. Furthermore, the use of boundary masking \(}}}\) and relation masking \(}}}\) is also essential for both tasks. Due to the limited space, we only report the performance on LTA when the observation ratio \(\) is set to 0.3.

**Effects of learnable mask tokens.** To verify the effects of learnable mask tokens \(\), we replace \(\) with zero vectors. Table 5 shows the overall results. Comparing rows (1) and (2) in Table 5, we find that using learnable mask tokens is more effective for both TAS and LTA. We conjecture that this is due to the mask tokens being embedded with the visual tokens within the encoder, which aids in effectively anticipating the invisible parts.

**Position of mask tokens.** Instead of providing mask tokens as input to the encoder, we conduct experiments on providing mask tokens as input to the decoder, as shown in row (3) in Table 5. In this experiment, only the visible frames are given as input to the encoder, while mask tokens \(^{}^{1 D}\) are applied in the decoder to fill the original masked positions, similar to the approach used in masked auto-encoder . By comparing rows (2) and (3) in Table 5, we observe that using mask tokens in the encoder is more effective than using them in the decoder. We hypothesize that embedding mask tokens alongside visual tokens within the encoder benefits joint learning of TAS and LTA. Furthermore, when mask tokens are provided only to the decoder, they do not receive the encoder loss \(^{}\), which may negatively impact performance.

 (a) Results on TAS 

Table 4: **Ablation studies on masking**

 (b) Results on LTA

Table 3: **Segmentation helps anticipation**

[MISSING_PAGE_FAIL:9]

## 6 Conclusion

We have presented ActFusion, a unified diffusion model that jointly addresses temporal action segmentation and long-term action anticipation in videos. The key to our method is anticipative masking, where learnable mask tokens replace unobserved frames, enabling simultaneous action segmentation of visible parts and anticipation of invisible parts. Our comprehensive experiments demonstrate that this unified approach not only outperforms existing task-specific models on both tasks but also reveals the mutual benefits of joint learning. Additionally, by evaluating our method both with and without ground-truth length information during LTA inference, we hope to motivate future research toward not using this information during testing. We believe that ActFusion demonstrates the potential of unifying complementary tasks in temporal action understanding, opening new directions for future research.

## 7 Acknowledgement

This work was supported by Samsung Electronics (IO201208-07822-01) and IITP grants (RS-2022-II20959: Few-Shot Learning of Causal Inference in Vision and Language for Decision Making (\(50\%\)), RS-2022-II220264: Comprehensive Video Understanding and Generation with Knowledge-based Deep Logic Neural Network (\(45\%\)), RS-2019-II191906: AI Graduate School Program at POSTECH (\(5\%\))) funded by Ministry of Science and ICT, Korea. We thank reviewers for pointing out the issue of the evaluation protocol and providing insightful discussions.

    & methods &  \\   & & 0.1 & 0.2 & 0.3 & 0.5 & 0.1 & 0.2 & 0.3 & 0.5 \\   & Cycle Cons.\({}^{1}\) & 31.85 (29.1\(\)0.21) & 23.89 (2.16) & 16.02 (0.77) & 26.54 (7.84) & 18.36 (0.34) & 14.52 (0.43) & 10.34 (0.55) \\  & FUT\({}^{2}\) & 23.29 (4.11) & 24.49 (3.10) & 20.00 (2.46) & 13.98 (2.82) & 21.21 (1.83) & 15.74 (0.44) & 11.89 (0.25) & 18.43 (0.41) \\  & ActFusion (**ours3**) & **35.86** (36.90) & **25.09** (30.51) & **24.09** (30.97) & **20.13** (30.29) & **41.34** (10.65) & **25.68** (30.33) & **23.22** (0.50) & 18.85 (0.33) \\   & Cycle Cons.\({}^{1}\) & 25.65 (0.23) & 23.10 (0.32) & 21.66 (0.76) & 19.73 (1.82) & 29.08 (0.59) & 25.68 (1.73) & 23.00 (2.59) & 20.84 (4.36) \\  & FUT\({}^{2}\) & 27.85 (0.16) & 24.68 (0.15) & 22.19 (0.09) & 20.98 (1.06) & 32.36 (0.097) & 28.96 (0.92) & 25.49 (0.21) & 23.56 (0.33) \\   & ActFusion (**ours4**) & **27.90** (30.90) & **24.09** (0.821) & **22.99** (25.58) & **22.42** (0.843) & **33.47** (21.75) & **30.28** (0.21) & **30.69** (1.22) & **26.77** (0.20) \\   

Table 6: **Evaluation without using ground truth prediction length on LTA**

Figure 5: **Qualitative results**