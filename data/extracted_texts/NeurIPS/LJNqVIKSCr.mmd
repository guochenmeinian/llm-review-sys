# Double-Ended Synthesis Planning with Goal-Constrained Bidirectional Search

Kevin Yu

MIT

kyu3@mit.edu

&Jihye Roh

MIT

jroh99@mit.edu

&Ziang Li

Georgia Tech

ziang@gatech.edu

&Wenhao Gao

MIT

whgao@mit.edu

&Runzhong Wang

MIT

runzhong@mit.edu

&Connor W. Coley

MIT

ccoley@mit.edu

###### Abstract

Computer-aided synthesis planning (CASP) algorithms have demonstrated expert-level abilities in planning retrosynthetic routes to molecules of low to moderate complexity. However, current search methods assume the sufficiency of reaching arbitrary building blocks, failing to address the common real-world constraint where using specific molecules is desired. To this end, we present a formulation of synthesis planning with starting material constraints. Under this formulation, we propose Double-Ended Synthesis Planning (DESP), a novel CASP algorithm under a _bidirectional graph search_ scheme that interleaves expansions from the target and from the goal starting materials to ensure constraint satisfiability. The search algorithm is guided by a goal-conditioned cost network learned offline from a partially observed hypergraph of valid chemical reactions. We demonstrate the utility of DESP in improving solve rates and reducing the number of search expansions by biasing synthesis planning towards expert goals on multiple new benchmarks. DESP can make use of existing one-step retrosynthesis models, and we anticipate its performance to scale as these one-step model capabilities improve.

## 1 Introduction

Synthesis planning--proposing a series of chemical reactions starting from purchasable building blocks to synthesize one or more target molecules--is a fundamental task in chemistry. For decades, chemists have approached the challenge of synthesis planning with _retrosynthetic analysis_, the strategy by which a target molecule is recursively broken down into simple precursors with reversed reactions. In recent years, advances in machine learning have enabled a multitude of computer-aided synthesis planning (CASP) algorithms  that navigate a combinatorially large space of reactions to propose chemically sensible routes to a variety of drug-like molecules within seconds to minutes. However, fully data-driven algorithms still underperform when generalizing to realistic use cases such as planning for more complex targets or in constrained solution spaces. In practice, expert chemists may plan syntheses with specific starting materials in mind, called "structure-goals" , that constrain the solution space. For instance, efficient syntheses of highly complex drugs are often most practical when synthesized from naturally-occurring starting materials that share complex features with the target, a practice known as "semi-synthesis" . There is also immense interest in identifying pathways from waste or sustainable feedstocks to useful chemicals , but existing methods have thus far relied on heuristics and brute-force enumeration of reactions.

Though algorithms for planning synthetic routes from _expert-specified starting materials_ have been proposed , the vast majority of CASP algorithms today cannot address starting materialconstrained use cases, as they assume that solution states may comprise any combination of building blocks. It is non-trivial to extend from "general" retrosynthesis planning to the constrained setting; by requiring a solution to contain a specific goal molecule, starting material-constrained synthesis planning presents the challenge of simultaneously guiding a search towards this goal molecule and any other necessary buyable molecules.

In this paper, we address these challenges by proposing a strategy for starting material-constrained synthesis planning with a _bidirectional search algorithm_ and a goal-conditioned cost network learned offline from expert trajectories implicit to a validated reaction corpus. Given a target molecule and one or more specified starting materials, our Double-Ended Synthesis Planning (DESSP) algorithm takes advantage of the natural reversibility of retrosynthesis by instantiating two AND-OR search graphs and alternately performing retrosynthetic expansions and forward synthetic expansions. We present two variations of DESSP based on front-to-end (F2E) and front-to-front (F2F) bidirectional search. In F2E search, each direction of the search is conditioned on the root node of the opposing search graph, while in F2F, each search is conditioned on the "closest" nodes of the opposing search graph. In both cases, finding solutions is accelerated when the "bottom-up" search graph converges with the "top-down" retrosynthesis search graph. Each step of selection and expansion of bottom-up nodes is conditioned on a specific molecule in the retrosynthetic graph, and we devise a means of utilizing both our goal-conditioned cost network and an existing cost network for general retrosynthesis in the top-down search policy. The goal-conditioned cost network, which we term the "synthetic distance" network, is trained offline based on the observation that multi-step synthetic routes can be interpreted as expert plans where any of the non-root molecules represents a starting material goal for the final target molecule, thus bypassing the need for self-play using reinforcement learning (RL). In order to train the network on "negative experiences", we also sample pairs of molecules between which no path exists through known reactions. **Our contributions can be summarized as follows:**

* We provide a formulation of starting material-constrained synthesis planning and release the first benchmarks for evaluating algorithms on this task, including new real-world benchmarks collected from the Pistachio database  addressing redundancies in the widely-used USPTO-190 test set.
* We present a starting material-constrained neural bidirectional search algorithm to tackle double-ended synthesis planning. Specifically, we present a cost network that estimates the "synthetic distance" between molecules (instead of the distance between a molecule and arbitrary purchasable building blocks) and an A*-like bidirectional search algorithm that strictly reflects the constraints.
* We present strong empirical results that illustrate the efficiency of double-ended synthesis planning. Compared to existing algorithms, DESSP expands fewer nodes and solves more targets under goal constraints, demonstrating its value in biasing CASP algorithms towards expert goals.

## 2 Background

### Related work

Computer-aided retrosynthetic analysisRetrosynthetic analysis has traditionally been formulated as a tree search problem, where each step involves searching for chemically feasible transformations and corresponding reagents to derive the product molecule. In defining the feasible transformation,

Figure 1: **(a)** Existing search methods are single-ended, and aim to identify a synthetic route where all leaf nodes meet certain termination criteria, e.g., buyability. **(b)**DESSP is a bidirectional search algorithm that enables a double-ended starting material-constrained search, better reflecting certain real-world use cases in complex molecule synthesis planning. Empirically, double-ended search finds starting material-constrained solutions with fewer node expansions.

template-based methods select graph transformation rules to apply based on expert rules  or use data-driven methods [16; 17; 18], such as a neural network policy trained on a reaction corpus . Template-free methods frame one-step retrosynthesis prediction as a translation task of SMILES strings [20; 21] or a graph-edit prediction . In searching for multi-step synthetic pathways, the focus of late has been on selecting non-terminal nodes for expansion. Initial efforts relied on expert-defined rules and heuristics [2; 15], whereas more recent efforts combine neural networks and Monte Carlo Tree Search (MCTS) , as well as AND-OR graph searches that address the hypergraph complexity of reaction routes [23; 6; 4; 24]. Notably, Chen et al.  proposed Retro*, a neural-guided A*-like search algorithm that we build on as part of our approach. Much additional work has been done to improve multi-step CASP algorithms [25; 26; 27; 28; 29; 30; 31; 32], primarily via improvements of single-step policies in a multi-step context or value functions for improved search guidance. Unlike DESP, these methods do not address the problem formulation where the pathway search is constrained by one or more starting materials, as shown Fig. 4. One exception is GRASP , which utilizes RL with hindsight experience replay  for goal-conditioned value estimation. Additionally, starting material-oriented planning capabilities were implemented in the LHASA program  but rely entirely on expert-defined rules. In this work, we instead train a cost network **offline** using historical reaction data and use **bidirectional search** to augment the retrosynthesis planner.

Synthesizable molecular designRecent advances in computer-aided molecular design have introduced novel approaches to synthesis planning. To ensure high synthetic accessibility of designed molecules, researchers have proposed assembling compounds _in silico_ by applying valid chemical transformations to purchasable building blocks, effectively searching for molecules within a reaction network [34; 35; 36; 37; 38; 39]. The advent of deep generative modeling has further enabled the generation of synthetic pathways with neural models [40; 41; 42; 43; 44]. These methods commonly employ a bottom-up strategy, constructing synthetic pathways from building blocks to the final product. Gao et al.  proposed that this framework could enable "bottom-up synthesis planning," in which the goal of generation is to match a specified target molecule, and demonstrated the successful application of this approach despite a low empirical reconstruction rate. In this work, we build upon Gao et al. 's method of conditional synthetic route generation by increasing the number of reaction templates, training on a larger reaction corpus, and integrating the models into a bidirectional search algorithm.

Bidirectional searchBidirectional search is a general strategy that can accelerate search in problems that involve _start_ and _goal_ states by interleaving a traditional search from the start state and a reverse search from the goal state , usually guided with either neural networks or expert heuristics. It has demonstrated utility in problems such as robotic path planning [46; 47], program synthesis , traffic management , and puzzle solving . However, the application of bidirectional search in synthesis planning has not been explored. When integrating an informed method of evaluating nodes, bidirectional search can be divided into _front-to-end_ (F2E) and _front-to-front_ (F2F) strategies [51; 52]. In F2E search, evaluations are made by estimating the minimal cost of a path between a frontier node and the opposite goal, while in F2F search, evaluations are made by estimating the minimal cost of a path between opposing frontier nodes. In this work, we implement both F2E and F2F variants of DESP to observe the empirical differences between the strategies in the synthesis planning setting.

### Formulation of general and starting material-constrained synthesis planning problems

General synthesis planningIn this work, we only consider template-based retrosynthesis methods, though any single-step model is compatible with our algorithm. Let \(\) be the set of all valid molecules, \(\) be the set of all valid reactions, and \(\) be the set of all valid reaction templates. A _reaction_\(R_{i}\) is a tuple \((r_{i},p_{i},t_{i})\), comprising a set of reactants \(r_{i}\), a single product \(p_{i}\), and a retro template \(t_{i}\). A _retro template_\(t\) is a function \(t: 2^{}\) that maps a product to precursors such that \( i:r_{i} t_{i}(p_{i})\). Likewise, a _forward template_\(t^{}^{}\) is a function \(t^{}:2^{}\) where \( i:p_{i} t^{}(r_{i})\).

Given target molecule \(p^{*}\) and set of building blocks (BBs) \(\), synthesis planning finds a _valid synthetic route_--a set of reactions \(S\ =\ \{R_{1}, R_{n}\}\) that satisfies the following constraints.

**Constraint 1** (Synthesize all non-BBs).: \(\ i:m r_{i},m\ j\) s.t. \(m=p_{j}\);
**Constraint 2** (Target is final molecule synthesized).: \(\ i\) s.t. \(p_{i}=p^{*},\ i:p^{*} r_{i}\);Finally, we require that the graph formed by \(S\) is a directed acyclic graph (DAG), where for each \(i\), the product \(p_{i}\) is mapped to a node, which has a directed edge to a node mapping to reaction \(R_{i}\), which in turn has directed edges to nodes mapping to the reactants \(r_{i}\).

Starting material-constrained synthesis planningGiven a specific starting material (_s.m._) \(r^{*}\), in addition to Constraint 2, a valid synthetic route satisfies the following constraints.

**Constraint 3** (_s.m._ used).: \(\;ir^{*} r_{i},\;\;}\;jr^{*} p_{j}\);

**Constraint 4** (_s.m._ not necessarily BB).: \(\;i:m r_{i},\;m\{r^{*}\}\;j { s.t. }m=p_{j}\);

Fig. 0(b) illustrates an example of a valid starting material-constrained route found through bidirectional search. DESP can also be used for the more general form of the problem in which a set of potential starting materials \(\{r_{1}^{*}, r_{n}^{*}\}\) is given on input, and at least one leaf node must map to \(r_{i}^{*}\) for some \(1 i n\). For simplicity, we only consider the single \(r^{*}\) case unless otherwise specified.

## 3 Methods

DESP is built on the Retro* algorithm  and recent advances that enable conditional generation of synthetic routes from the bottom up [41; 42].

### Definition of synthetic distance, a goal-conditioned cost function

Like Retro* , DESP is an A*-like search and thus requires a method of evaluating the expected cost of various frontier nodes. We follow Retro* and use the notation of \(V_{t}(m|T)\), \(V_{m}\), and \(rn\) functions (Section A.2 details Retro* and these functions). We also define a function \(c:\) which maps a reaction to a scalar cost. For a valid synthetic route \(S=\{R_{1},,R_{n}\}\), the _total cost_ of \(S\) is \(_{i=1}^{n}c(R_{i})\). \(V_{m}\) represents the minimum total cost across every valid synthetic route to molecule \(m\), and is learned in Retro* and DESP to bias the search towards \(\).

However, to maintain consistency in guiding A* search in the starting material-constrained setting, we require not only an estimate of the cost of synthesizing molecule \(m\) from arbitrary building blocks, but also an estimate of the **cost of synthesizing molecule \(_{2}\) from \(_{1}\) specifically** (in addition to other arbitrary building blocks). As such, we define a new function \(D:\), which we term _synthetic distance_, as it effectively represents the minimum cost distance between two molecules in \(\), the graph constructed from the set of all possible reaction tuples \(\). More precisely, the synthetic distance from \(m_{1}\) to \(m_{2}\) is the difference between the minimum cost of synthesizing \(m_{2}\) across all valid synthetic routes containing \(m_{1}\) and the minimum cost of synthesizing \(m_{1}\) across all valid synthetic routes in general. Learning \(D\) then allows for the guidance of both top-down search towards the starting material and bottom-up search towards the target with rapid node comparisons.

### DESP algorithm overview

In practice, synthesis planning problems are generally approached by simulating a search through the complete reaction graph \(\). We follow Xie et al.  in considering an AND-OR graph structure for search graphs, in which molecules are represented by OR nodes (only one child must be solved) and reactions are represented by AND nodes (all children must be solved). In implementing most synthesis planning algorithms [3; 6], one initializes the search graph \(G=\{p^{*}\}\). With DESP, we instead initialize two search graphs \(G_{R}=\{p^{*}\},G_{F}=\{r^{*}\}\) and introduce two expansion policies, one for "top-down" retrosynthesis expansions on \(G_{R}\) and another for "bottom-up" forward expansions on \(G_{F}\). This allows us to perform a **bidirectional graph search** between the target and goal molecules by interleaving retro and forward expansions, with the goal of the two search graphs converging to more efficiently find a valid synthetic route. In this work, we implement F2E and F2F variants of DESP. Notably, our implementation of F2F performs node comparisons to **all nodes** in the opposing search graph rather than just frontiers. For \(m G_{R}\), we define a _goal function_\(:\) such that \((m)=r^{*}\) in F2E and \((m)=*{arg\,min}_{g^{} G_{F}}D(g^{},m)\) in F2F. Likewise, for \(m G_{F}\), let \((m)=p^{*}\) in F2E and \((m)=*{arg\,min}_{g^{} G_{R}}D(m,g^{})\) in F2F.

The following quantities or functions are relevant in the algorithm: \(rn\), \(V_{t}(m|G)\), and \(V_{m}\) from Retro*, and somewhat analogously \(dn\), \(D_{t}(m|G_{R})\), and \(D_{m}\). We briefly define the new quantities: **(1)**\(D_{m}\) represents \(D((m),m)\). **(2)**\(dn(m|G_{R})\) represents the "distance numbers" of a top node \(m\)This is a multiset of values \(D_{m}-V_{m}\) for related frontier nodes collected for dynamic programming from the bottom-up during the update phase. **(3)**\(D_{t}(m|G_{R})\) is a multiset of all values of \(D_{m}-V_{m}\) across frontier nodes in the minimum cost synthetic route to the target \(p^{*}\) through molecule \(m\). At a high level, we introduce these quantities and new policies to account for the fact that only one subgoal in a valid synthetic route needs to reach \(r^{*}\). The top-down searcher of DESP is thus an extension of Retro* that simultaneously utilizes general retrosynthesis and synthetic distance cost networks.

Like most CASP algorithms, DESP cycles between steps of **selection**, **expansion**, and **update** until the termination criteria are satisfied. However, DESP also alternates between performing these steps for the top-down and bottom-up search graphs (Fig. 2), with each search having its own policies.

SelectionFor top-down selection, we select an frontier molecule node that minimizes the expected total cost of synthesizing the target \(p^{*}\) from the goal molecule \(r^{*}\) through that node. Let \(_{R}\) represent the set of frontier top molecules and \(_{F}\) represent the set of frontier bottom molecules. Then,

\[m_{select,R}*{arg\,min}_{m_{R}}[V_{ t}(m|G_{R})+(D_{t}(m|G_{R}))]\] (1)

The bottom-up selection policy is identical to that of Retro*.

\[m_{select,F}*{arg\,min}_{m_{F}}V_{t}(m|G_ {F})\] (2)

ExpansionFor top-down expansion, we follow other AND-OR-based algorithms in calling a single-step retrosynthesis model, applying the top \(n\) predicted templates to the selected node and adding the resulting reactions and their precursors as nodes to the graph. For each added molecule node \(m_{i}\), we initialize: **(1)**\(rn(m_{i}|G_{R})\ \ V_{m_{i}}\), equal to the Retro* value function, and **(2)**\(dn(m_{i}|G_{R})\ \ \{D_{m_{i}}\ -\ V_{m_{i}}\}\ =\ \{D((m_{i}),m_{i})\ -\ V_{m}\}\).

For bottom node \(m\), we perform the forward expansion procedure detailed in Section 3.3, conditioned on \((m)\). For each added product \(p_{i}\), we then initialize \(rn(p_{i}|G_{F})\ \ V_{p_{i}}=D(p_{i},(p_{i}))\)

Figure 2: **(a)**DESP algorithm. Evaluation of top nodes is based on both \(V_{m}\) and \(D_{m}\). For F2E search, synthetic distance is calculated between a molecule and the opposing goal, while for F2F, it is calculated based on the closest opposing molecule. **(b)** Overview of the one-step expansion procedures.

UpdateFor \(G_{R}\), we propagate updates to relevant values up the graph and then back down to related nodes, similar to other AND-OR algorithms. As the update rules for the Retro* quantities are the same, we only provide the update rules for the new quantities, and details of the Retro* updates is in Section A.2. \(G_{F}\) is also updated according to the Retro* algorithm (as branching from multiple product OR nodes is not allowed in forward expansions), so the following new updates only apply to \(G_{R}\). We first uppropagate, performing updates up the graph for reaction (AND) nodes \(R\) and molecule (OR) nodes \(m\), where the \(ch\) and \(pr\) functions return the children and parent nodes for an input node:

\[dn(R|G_{R}) _{m ch(R)}dn(m|G_{R})\] (3) \[dn(m|G_{R}) [D_{m}-V_{m}]&x_{R} \\ dn(_{R ch(m)}rn(R)G_{R})&\] (4)

We then downpropagate the following updates:

\[D_{t}(R|G_{R})  dn(pr(R)|G_{R})-dn(_{R^{} ch(pr(R) )}rn(R^{}|G_{R})G_{R})+dn(R|G_{R})\] (5) \[D_{t}(m|G_{R})  D_{t}(_{R pr(m)}rn(R|G_{R})G_{R})\] (6)

Justification for the rules and additional details, including DESP pseudocode, is in Section A.5.

### Forward expansion policy with conditional generation of one-step reactions

To perform _forward one-step synthesis expansions_, we adapt the approach of Gao et al. . Let \(z_{m}^{n}:^{n}\) and \(z_{t}^{n}:^{n}\) be functions mapping a molecule and template (respectively) to \(n\)-dimensional embeddings. We define two target functions:

\[f_{t}:^{} (_{t}(z_{m}^{n}(m_{1}) z_{m}^{n}(m_{2})))\] (7) \[f_{b}:^{} _{}(_{b}(z_{m}^ {n}(m_{1}) z_{m}^{n}(m_{2}) z_{t}^{n}(t^{})))\] (8)

Together, the learned approximations of \(f_{t}\) and \(f_{b}\) define our forward expansion policy (Algorithm 1), which generates forward reactions for the expanded node \(m_{1}\) conditioned on \(m_{2}\).

``` \(t^{}((_{t}(z_{m}(m_{1}) z _{m}(m_{2}))))\) ; /* Get top\(N\) forward templates */ for\(i 1\) to \(N\)do if\(t^{}[i]\) is unimolecularthen \(p t^{}[i](m_{1})\) ; /* Apply fwd. template to \(m\) */ \(G_{F}\).ADD_RXN\((\{m_{1}\},p,t^{}[i])\) ; /* Add reaction and product to \(G_{F}\) */ else /* \(t^{}[i]\) is bimolecular */ \(b_{}(_{b}(z_{m}(m_{1}) z_{m}(m_{ 2}) z_{t}(t^{}[i])))\) ; /* Get \(K\) nearest BBs by cosine sim. */ \( j 1\) to \(K\): \(G_{F}\).ADD_RXN\((\{m_{1},b\},t^{}[i](m_{1},b[j]),t^{}[i])\) ; /* Apply \(t^{}[i]\) */  end for ```

**Algorithm 1**FORWARD_EXPAND(\(m_{1}\), \(m_{2}\), \(G_{F}\), \(N\), \(K\))

\(m_{1}\): molecule selected for expansion, \(m_{2}\): molecule to condition expansion on, \(G_{F}\): bottom search graph, \(N\): num. templates to propose, \(K\): num. building blocks to search

### Extracting multi-step reaction data from a reaction corpus for offline learning

To learn \(f_{t}\), \(f_{b}\), and \(D\), we approximate \(\) by generating the incomplete network from a reaction dataset. In this work, we use the public USPTO-Full dataset [53; 54] of approximately 1 million deduplicated reactions. The dataset is filtered and processed (details in Section A.3), and a template set \(_{}\) is extracted with RDChiral . The dataset is randomly divided into training and validation splits with ratio 90:10. From the training split \(_{}\) we construct the graph \(_{}\). We filter reactions that **(1)** involve more than 2 reactants or **(2)** whose product cannot be recovered by applying the forward template \(t^{}\), yielding \(_{}\), \(_{}\), and \(_{}^{}\).

To learn \(f_{t}\) and \(f_{b}\), a full enumeration of all pathways (until reaching nodes in \(\)) rooted at \(p^{*}\) is performed for each molecule node \(p^{*}\) in \(_{}\). Reaction nodes in the enumerated pathways then each provide a training example for \(f_{t}\) and \(f_{b}\). Likewise, we enumerate pathways in \(_{}\), and each molecule node \(m\) in a pathway yields a training example for learning \(D(m,p^{*})\). The details for our training procedures are described in Section A.4.

Notably, we inject "negative" examples into our training set for \(D\), as the distribution of costs is highly skewed towards low values. We define a modified MSE loss function as in Kim et al.  for learning \(D\):

\[=(y_{pred}-y_{true})^{2}&y_{true} D_{ max}\\ (0,D_{max}+1-y_{pred})^{2}&\] (9)

This strategy allows the model to default to an approximate value of \(D_{max}+1\) for any "highly distant" molecule inputs. Now, for each target \(p^{*}\), we randomly sample a molecule \(m G_{}\) with no path to \(p^{*}\) and Tanimoto similarity \(<0.7\) and add a training example with label \(\). In this work, we use \(D_{max}=9\).

## 4 Experiments

Our experiments are designed to answer the following: **(1)** Does DESP significantly improve the performance of starting material-constrained synthesis planning compared to baseline methods? **(2)** To what extent do \(D\) and bidirectional search account for the performance of DESP? **(3)** Can DESP find routes to more complex targets than baseline methods? **(4)** What empirical differences do we see between F2E and F2F strategies?

### Experimental setup

DatasetsFew public datasets of multi-step synthetic routes exist. Previous works in multi-step synthesis planning have widely used the USPTO-190 dataset , a set of 190 targets with corresponding routes extracted from the USPTO-Full dataset. Others have tested on targets sampled from databases such as ChEMBL or GDB17 [57; 27; 31], but their lack of ground truth routes precludes the systematic selection of starting materials for our task. PaRoutes  has been proposed as an evaluation set, but they do not provide a standardized training set to prevent data leakage.

In addition to **USPTO-190**, because of its large proportion of out-of-distribution and redundant reactions (Table 1), we create and release two additional benchmark sets, which we call **Pistachio Reachable** and **Pistachio Hard**. Details of their construction are provided in Section A.6. To obtain the ground-truth goal molecules for each of our test sets, we find the longest path from target to leaf node in each route DAG and pick the leaf node with more heavy atoms. For the building block set \(\), we canonicalize all SMILES strings in the set of 23 million purchasable building blocks from eMolecules used by Chen et al. .

Model trainingAs in , we train a single-step retrosynthesis MLP (NeuralSym) and Retro* cost network on our processed training split of USPTO-Full. The synthetic distance and forward expansion models are trained as described in Sections 3.4 and A.4.

Multi-step algorithmsBecause we utilize an AND-OR search graph with no duplicate molecule nodes, our implementation of Retro* is more comparable to RetroGraph , but we do not employ

   Dataset & \# Routes & Avg. In-Dist. \% & Unique Rxn. \% & Avg. \# Rxns. & Avg. Depth \\ 
**USPTO-190** & 190 & 65.6 & 50.5 & 6.7 & 6.0 \\
**Pistachio Reachable** & 150 & 100 & 86.1 & 5.5 & 5.4 \\
**Pistachio Hard** & 100 & 59.9 & 95.2 & 7.5 & 7.2 \\   

Table 1: Benchmark dataset summary. Avg. In-Dist. % is the mean percentage of reactions in each route within the top 50 suggestions of the retro model. Unique Rxn.% is the ratio of deduplicated reactions to total reactions across all routes. Avg. # Rxns. is the mean number of reactions in each route, and Avg. Depth is the mean number of reactions in the longest path of each route.

their GNN guided value estimation and thus refer to the algorithm as Retro* for simplicity. This serves as both a baseline and ablated version of DESP (without bidirectional search or \(D\)). In addition, we test the performance of random selection, breadth-first search (BFS), bidirectional-BFS, and MCTS. Finally, we integrate our single-step model into GRASP  using the authors' published code. Since their data is not publicly available, we retrained their model on 10,000 randomly sampled targets in our training set and run their search implementation on each benchmark. For all methods, we enforce a maximum molecule depth of 11, a maximum of 500 total expansions (retro or forward), and apply 50 retro templates per expansion. For DESP, we also enforce a maximum molecule depth of 6 for the bottom-up search, apply 25 forward templates per expansion, and use the top 2 building blocks found in the k-NN search. Due to the asymmetry of the bidirectional search, we also introduce a hyperparameter \(\), the number of times we repeat a select, expand, and update cycle for \(G_{R}\) before performing one cycle for \(G_{F}\). For all experiments, we set \(=2\). Details and tabular summaries of the evaluations performed and hyperparameters chosen are provided in Section A.7.

### Results

Though it is notoriously difficult to quantitatively evaluate synthetic routes proposed _in silico_ without expert evaluation, there are widely-used metrics thought to correlate with successful algorithms, such as higher solve rate (under varying computational budgets), lower average number of expansions, and lower average number of reactions in found routes [59; 57]. We focus on these metrics, as they are arguably most related to a search algorithm's efficiency. Because all methods employ the same one-step model and set of templates from USPTO-Full, we treat their proposals as equally chemically feasible.

Improvement on starting material-constrained synthesis planningQuantitative benchmarking results are summarized in Table 2. Both variants of DESP outperform all baseline methods in terms of solve rate and average number of expansions across all test sets. The solve rates of baseline methods on USPTO-190 are noticeably lower than commonly reported ranges for general synthesis planning , as the starting material constraint increases the difficulty of the task. Notably, unlike the other benchmarked methods, the Random, BFS, MCTS, and Retro* are standard single-ended search methods that do not make any use of the starting material constraint information.

Ablation studiesTo investigate the contributions of \(D\) and bidirectional search, we conduct an ablation study by running Retro* guided by \(D\) on all benchmarks (denoted as Retro*+\(D\) in Tables 2 and 3). We find that incorporating \(D\) generally results in higher solve rates and fewer average

   Algorithm &  &  &  \\   &  & \)} &  & \)} &  & \)} \\   & \(N\)=100 & 300 & 500 & & 50 & 100 & 300 & & 100 & 300 & 500 & \\  Random & 4.2 & 4.7 & 4.7 & 479 & 16.0 & 26.7 & 40.7 & 325 & 6.0 & 12.0 & 13.0 & 452 \\ BFS & 12.1 & 20.0 & 24.2 & 413 & 48.7 & 57.3 & 74.0 & 169 & 16.0 & 26.0 & 29.0 & 390 \\ MCTS & 20.5 & 32.1 & 35.3 & 364 & 52.0 & 72.7 & 85.3 & 111 & 27.0 & 31.0 & 32.0 & 361 \\ Retro* & 25.8 & 33.2 & 35.8 & 351 & 70.7 & 78.0 & 92.7 & 73 & 32.0 & 35.0 & 37.0 & 342 \\ GRASP & 15.3 & 21.1 & 23.7 & 410 & 46.7 & 51.3 & 66.7 & 198 & 14.0 & 22.0 & 29.0 & 402 \\  Bi-BFS & 20.0 & 26.3 & 28.4 & 382 & 66.0 & 75.3 & 86.0 & 101 & 28.0 & 34.0 & 38.0 & 341 \\ Retro*+\(D\) & 27.4 & 32.6 & 37.4 & 348 & 77.3 & 87.3 & _96.0_ & 49 & 31.0 & 40.0 & 42.0 & 323 \\ DESP-F2E & **30.0** & **35.3** & **39.5** & _340_ & _84.0_ & **90.0** & _96.0_ & _41_ & _35.0_ & _44.0_ & **50.0** & _300_ \\ DESP-F2F & _29.5_ & _34.2_ & **39.5** & **336** & **84.5** & _88.9_ & **97.3** & **38** & **39.0** & **45.0** & _48.0_ & **293** \\   

Table 2: Summary of starting material-constrained planning performance across the three benchmarks. Solve rate refers to the percentage of \((p^{*},r^{*})\) pairs in the dataset solved at the given expansion limits. The average number of expansions \(\) is given for each method, with a max budget of 500.

   Dataset & **USPTO-190** & **Pistachio Easy** & **Pistachio Hard** \\  \# Routes & 63 & 139 & 36 \\   \\  Retro* & **5.56**\(\) 2.37 & 4.94 \(\) 2.27 & 4.81 \(\) 2.09 \\ Retro*+\(D\) & 5.87 \(\) 2.37 & _4.92 \(\) 2.27_ & 4.80 \(\) 2.06 \\ DESP-F2E & **5.56**\(\) 2.35 & **4.86**\(\) 2.17 & **4.67**\(\) 2.15 \\ DESP-F2F & 5.95 \(\) 3.39 & 5.17 \(\) 2.17 & _4.78_ \(\) 2.09 \\   

Table 3: Average \(\) stdev of the number reactions in proposed routes. Comparisons are made across \((p^{*},r^{*})\) pairs solved by all methods.

expansions across all datasets, but still does not outperform DESP, demonstrating the role of both \(D\) and bidirectional search in improving planning efficiency. As an indicator of route quality, we also investigate the average number of reactions in the outputs of DESP (Table 3). DESP-F2E is able to find shorter routes on average when compared to either Retro* or Retro* guided by \(D\). An example of a route solved by DESP-F2F (but not by Retro*) is visualized in Fig. 4.

Performance on complex targetsTo investigate the degree to which DESP improves planning performance on complex targets, we bin each target in Pistachio Hard by two commonly-used metrics of synthetic complexity, SCScore  and SAScore . Both variants of DESP equal or outperform Retro* on solve rates across all complexity ranges (Fig. 3a). This indicates that, in the starting material-constrained setting, DESP can improve planning performance on targets of higher complexity, a regime which current CASP algorithms struggle with.

F2E and F2F comparisonsThough DESP-F2F consistently expands slightly fewer nodes on average, the empirical differences in efficiency between F2E and F2F are small. However, DESP-F2E is able to find noticeably shorter routes on average than DESP-F2F, which finds routes even longer than Retro* on multiple benchmarks (Table 3). A likely reason for this difference is due to the lack of consideration of the pathway depth of existing nodes in front-to-front search, which we elaborate on in Section A.8. We also investigate the extent to which reactions from forward expansions end up in the solutions of each variant. As visualized in Fig. 3b, DESP-F2F incorporates more forward reactions, while DESP-F2E solutions are dominated by top-down search almost half the time. We hypothesize

Figure 4: Exemplary synthetic route for a test case that DESP-F2F was able to solve but Retro* was unable to solve. DESP-F2F was able to match every step of the reference route in this case.

Figure 3: Ablation study. **(a)** Solve rate as a function of the binned complexity of target molecules in Pistachio Hard. **(b)** Number of forward reactions in DESP routes across all benchmark sets.

that the difficulty of bottom-up synthesis planning  further contributes to the increased length of DESP-FZF solutions, as DESP-FZF empirically relies more on forward reactions and thus is likely more sensitive to the performance of the forward models.

## 5 Conclusion

In this work, we introduce DESP, a novel framework for bidirectional search as applied to computer-aided synthesis planning. DESP biases searches towards user-specified starting materials with a combination of a learned synthetic distance network and bottom-up generation of part of the synthetic route. This represents a task that aligns with a common use case in complex molecule synthesis planning. We demonstrate the efficiency of DESP on the USPTO-190 dataset and two new test sets derived from the Pistachio database. When compared to existing methods, both variants of DESP reduce the number of expansions required to find solutions that satisfy the specified goal, while DESP-FZF also finds more routes with fewer reactions per route. We anticipate that with future improvements to the synthetic distance network and bottom-up synthesis planning, bidirectional synthesis planning can emerge as an effective and efficient solution to navigating constraints and aligning computer-aided synthesis planning with the goals of domain experts. Additional outlook is provided in Section A.8.

## Code and Data Availablity

Relevant code with documentation can be found at https://github.com/colegyroup/desp.