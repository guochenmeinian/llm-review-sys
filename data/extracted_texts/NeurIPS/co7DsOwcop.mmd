# Structured Matrix Basis for Multivariate Time Series Forecasting with Interpretable Dynamics

Xiaodan Chen\({}^{1}\), Xiucheng Li\({}^{2}\) (\(\)), Xinyang Chen\({}^{2}\), Zhijun Li\({}^{1}\) (\(\))

\({}^{1}\) School of Computer Science and Technology, Harbin Institute of Technology

\({}^{2}\) School of Computer Science and Technology, Harbin Institute of Technology, Shenzhen

{21B303004@stu., lixiucheng@, chenxinyang@, lizhijun_os@}hit.edu.cn

###### Abstract

Multivariate time series forecasting is of central importance in modern intelligent decision systems. The dynamics of multivariate time series are jointly characterized by temporal dependencies and spatial correlations. Hence, it is equally important to build the forecasting models from both perspectives. The real-world multivariate time series data often presents spatial correlations that show structures and evolve dynamically. To capture such dynamic spatial structures, the existing forecasting approaches often rely on a two-stage learning process (learning dynamic series representations and then generating spatial structures), which is sensitive to the small time-window input data and has high variance. To address this, we propose a novel forecasting model with a structured matrix basis. At its core is a dynamic spatial structure generation function whose output space is well-constrained and the generated structures have lower variance, meanwhile, it is more expressive and can offer interpretable dynamics. This is achieved via a novel structured parameterization and imposing structure regularization on the matrix basis. The resulting forecasting model can achieve up to \(8.5\%\) improvements over the existing methods on six benchmark datasets, and meanwhile, it enables us to gain insights into the dynamics of underlying systems.

## 1 Introduction

Multivariate time series forecasting plays a pivotal role in a wide range of fields, such as traffic flow management, electricity consumption, and weather prediction. Multivariate time series data records quantities of interest from \(N\) series spanning over \(T\) time steps, and its underlying dynamics are jointly characterized by the temporal correlations (intra-series dependencies) and spatial structures (inter-series dependencies). Inspired by the advancements in Natural Language Processing, substantial research has been proposed to apply RNNs and Transformers to capture the underlying temporal dependencies . Besides, the convolution paradigm also exhibits promising temporal correlation modeling capability and excels in long-term forecasting .

As the underlying dynamics are jointly described by the intra- and inter-correlations, it is equally important to explore the spatial structures for an ideal forecasting model design. Many proposals employ dense connection to capture the spatial correlations implicitly . However, the dense connection lacks clear structures and is prone to introduce noise from uncorrelated spatial dimensions. The development of Graph Neural Networks (GNNs)  offers an effective solution to model non-Euclidean structure data. DCRNN  builds graphs based on spatial proximity and conducts graph convolution to capture spatial correlations for traffic forecasting. To apply GNNs to more general scenarios where graph structures are unavailable, the forecasting methods propose to learn the graph adaptively through learnable node embeddings , which significantly enhances the forecasting performance.

Despite the progress achieved, the spatial structures remain static across time steps for the aforementioned forecasting methods, which may not reflect the actual inter-series correlation. Because in many scenarios, the spatial correlations are also changing dynamically, for example, the traffic speeds of certain road segments manifest correlation only in peak hours. To relax this restriction, many dynamic graph-based methods have been proposed [43; 39; 42; 28; 34] to learn the spatial structures within a short time window. The intuition is that the spatial correlations in real-world applications often evolve continuously and tend to be stable over a short period of time. The general idea is to learn each series a dynamic representation via a nonlinear transformation \(f_{}\) by taking as input the current time window data, and it then generates the spatial structures by pairwise interacting the dynamic representations via a transformation \(f_{}\), the composition of two transformations forms the spatial structure generation function \(f_{}=f_{} f_{}\). The dynamic representation function \(f_{}\) is often implemented as MLP ([43; 42; 28; 34]) or RNN () whereas \(f_{}\) is mostly instantiated by attention mechanism or inner product. One severe issue of these methods is that the output space of \(f_{}\) is not well constrained and unbounded, this makes the learned dynamic representations very sensitive to the short time window input data and the unboundedness will be exaggerated by the inner product operation in \(f_{}\), which will lead to the outputs of \(f_{}\) fluctuate drastically and have high variance. The issue becomes even more severe in the presence of anomaly patterns. To reduce the variance, TPGNN first learns a static spatial structure \(\) (adjacency matrix) and then generates the dynamic spatial structures with a matrix polynomial \(_{m=1}^{M}_{m}^{m}\) where \(_{m}\) is determined by the timestamps of the current time window. However, it has two drawbacks: 1) the coefficient \(_{m}\) solely depends on the timestamps and cannot adapt to the current window data, and 2) the matrix power basis \(,^{2},,^{M}\) is overly restricted and has limited expressive capability. In addition, the existing forecasting methods often lack interpretable dynamics.

In this paper, we propose a dynamic multivariate time series forecasting model with a structured matrix basis. Instead of relying on the two-stage spatial structure learning process (learning dynamic series representations and then generating spatial structures), we directly parameterize \(f_{}\) with a learnable matrix basis \(_{1},_{2},,_{M}\) and represent any spatial structure with a convex combination \(_{m=1}^{M}_{m}_{m}\), \(_{m} 0\) and \(_{m=1}^{M}_{m}=1\). To learn the matrix basis effectively, we propose a novel structured matrix parameterization method and impose structure regularization on the basis to enhance parameter efficiency and reduce complexity. In contrast to the two-stage spatial structure learning methods, the output space of our proposed \(f_{}\) is well constrained. Consequently, the generated spatial structures have lower variance and the resulting model is easier to learn. In comparison to TPGNN, our matrix basis is more expressive since it is not limited by the matrix power constraint; the coefficient \(\) can also be computed adaptively via the interaction of current time-window data and the basis. In addition, the coefficient \(\) offers a fashion to track the spatial structure evolution and enables us to gain insights into the underlying dynamics. Thus, the resulting model is more interpretable.

In summary, our proposed \(f_{}\) has the following appealing properties: 1) lower variance and easier to learn, 2) it is more expressive, and 3) it can yield more interpretable results. This is achieved through a novel structured matrix parameterization and structure regularization. By integrating \(f_{}\) into the forecasting framework, we evaluate the efficacy of the proposed method on six benchmark datasets, it achieves up to \(8.5\%\) improvements over existing forecasting methods across various prediction lengths and can also offer interpretable dynamics.

## 2 Related Work

**Temporal Dependency Modeling** Early deep sequential methods adopt recurrent neural networks to capture nonlinear temporal dynamics [41; 32; 5]. Motivated by the wide receptive fields of attention mechanism, various Transformer-based methods have been developed to capture the long-term temporal dependencies in forecasting. To reduce the quadratic complexity of the vanilla attention, LogTrans, Informer, Autoformer, and FEDformer have been proposed successively. Non-stationary Transformer  attempts to mitigate the difficulties caused by non-stationarity in modeling temporal correlation. PatchTST explores the strategies of patch-level semantic modeling and channel-independence. VQ-MTM explores the well-defined semantic units for the Transformer architecture in time series modeling. In state-space models, the transition matrix is employed to model long-term temporal dependencies, and their recent representative works include Hippo, LSSL. To reduce the computational complexity, S4 and Mambohave been proposed successively. The convolution-based methods have also shown promising results in time series modeling. MICN explores isometric convolution to capture non-local temporal patterns. TimesNet reshapes 1D signals into 2D by aligning according to inherent multiple periodicity and it then employs the 2D kernels to capture both intraperiod- and interperiod-variations. ModernTCN utilizes large kernels to model long-term dependencies. In addition, the Fourier basis parameterization has also been proposed to model long-term dependencies in time series imputation .

Static Spatial Correlation ModelingThe spatial correlation plays an equally important role in time series modeling. DeepAR and Pyraformer employ dense connection to model the spatial dependencies. However, the dense connection fails to explore the underlying structure and may introduce noises from unrelated series. The advancement of GNNs offers an effective way to model non-Euclidean structure data. DCRNN constructs the graph by using spatial proximity and proposes to fuse the spatial information via graph convolution operation, and thus it is only applicable when the underlying graph structures are easily accessible. To sidestep this limitation, the adaptive GNNs-based methods  propose to learn each series a representation and then generate the spatial structure via the interaction of the representations. BiTGraph further develops the method to account for missing patterns in message passing to handle the time series with missing values. However, these approaches implicitly assume the series representations are shared across the entire time steps, and hence the underlying spatial graphs remain static over time.

Dynamic Spatial Correlation ModelingIn real-world applications, the inter-series correlations or spatial structures are often evolving dynamically. To adapt to these scenarios, many dynamic spatial structure methods are proposed, which share a similar two-stage spatial structure learning process as the static adaptive GNNs-based methods (as discussed in Section 1). The difference is that the series representations are generated by conditioning a small time window rather than the entire timeline data, and hence, the underlying spatial structures can change dynamically over time. GMAN, iTransformer, Crossformer, and Card implement the dynamic node representation function via MLP, whereas ESG adopts the RNN. As the output spaces of their \(f_{}\) are not well constrained, the learned spatial structures are very sensitive to the change of time-window data and hence have high variance. To reduce the variance, TPGNN proposes to represent the dynamic graphs with matrix polynomial. As the polynomial coefficients are solely determined by the timestamps, such a method fails to utilize the current time-window data. Moreover, the matrix power basis is overly restricted and has weak expressive capability. The proposals  attempt to build dynamic graphs by merging temporal and spatial dimensions. Nevertheless, the entanglement of temporal correlations and spatial dependencies makes the models hard to optimize. In addition, the existing multivariate time series forecasting methods also lack interpretability regarding the underlying dynamics.

## 3 Methodology

NotationFrom a generative perspective, the multivariate time series \(^{N T D}\) records a \(D\)-dimensional physical quantities of interest generated by \(N\) series (i.e., sensors or instances) over \(T\) time steps. We use \(^{(n)}^{T D}\) to represent the observations from \(n\)-th sensor and \(_{t}^{N D}\) to indicate the observations at the \(t\)-th timestamp. The slice notation \(_{t-H:t}^{N H D}\) denotes the values within a window spanning from the time interval \([t-H,t)\). The operator \(:^{N N}^{N}\) takes the diagonal elements of a square matrix and returns it as a vector, the operator \(\) reshapes a matrix or tensor into a vector.

Overview and PipelineFigure 1-(a) presents the architecture of our proposed Sumba (dynamic multivariate time series forecasting with structured matrix basis), which comprises \(L\) blocks. Each block contains two primary modules: the Multi-Scale TCN and Dynamic GCN modules. The Multi-Scale TCN module in the \(\)-th block takes as the input \(_{t_{0}-H:t_{0}}^{(-1)}^{N H D_{i}^{( -1)}}\) and generates the intermediate representation \(_{t_{0}-H:t_{0}}^{(-1)}^{N H D_{ }^{(-1)}}\), which is fed to the Dynamic GCN module to produce \(_{t_{0}-H:t_{0}}^{()}^{N H D_{i}^{( )}}\). The Multi-Scale TCN captures the temporal dependencies by performing multi-scale temporal convolution operation in a channel-independent manner, we choose the kernel sizes \(1 2\), \(1 3\), \(1 6\), and \(1 7\) in this paper. The Dynamic GCN module comprises two functions, namely, the spatial structure generation function \(f_{}\) and graph convolution function \(f_{}\). Our proposed \(f_{}\) generates the dynamic spatial structure \(_{t}^{N N}\) (adjacency matrix)by conditioning on the intermediate representation \(_{t}^{(-1)}^{N D_{o}^{(-1)}}\) at time step \(t[t_{0}-H,t_{0})\), which is obtained by transforming the current time-window data \(_{t_{0}-H:t_{0}}\). Given the generated dynamic graph \(_{t}\), \(f_{}\) further fuses the spatial information of \(_{t}^{(-1)}\) across different series to yield \(_{t}^{()}\) by performing the graph convolution operation. Note that the spatial and temporal dimensions are kept unchanged during the entire transformation in the \(L\) blocks.

### Adaptive Dynamic Spatial Structure Generation

The core layer of our proposed forecasting method is the spatial structure generation function \(f_{}\). It serves to infer the optimal graph structure \(_{t}\) that best characterizes the present spatial correlations from the intermediate representation \(_{t}^{}\) (we drop the layer index \(\) to keep the notation uncluttered in this subsection). As mentioned in Section 1, the existing methods all adopt the two-stage learning process, which results in unconstrained output function space and high graph structure variance. To address this, we propose to directly parameterize a learnable matrix basis \(=\{_{m}\}_{m=1}^{M}\) of dimension \(M\) where \(_{m}^{N N}\) and define the spatial structure generation function as

\[f_{}(_{t}^{})_{m=1}^{M}_ {t,m}_{m},_{t,m} 0,_{m=1}^{M}_{t,m}=1.\] (1)

Here, we choose the convex combination instead of the linear combination to better control the output space. This is reasonable since the basis \(\) is free to optimize in the training stage. The intuition behind Eq. 1 is that the basis \(\) can be shared and optimized globally across different time windows, and to infer the spatial structure dynamically, we only need to adaptively compute the coefficient \(_{t}^{M}\) by conditioning on \(_{t}^{}\).

However, two challenges remain in adopting the spatial structure generation function in Eq. 1. 1) The number of parameters to be learned equals \(MN^{2}\), which grows quadratically to \(N\). As these \(M\) matrices lack connection and constraints, learning by brute force will sooner become infeasible even for medium-size \(N\). This actually is the reason why the existing methods resort to the two-stage learning process, i.e., learning each series an embedding whose learnable parameters are \(ND\) with \(D\) being the embedding dimension. 2) Intuitively, the best \(_{m}\) should be simultaneously determined by \(^{}\) and \(_{m}\), but identifying \(_{m}\) with \(N^{2}\) parameters will make \(_{m}\) hard to compute when \(N\) is large.

Structured Parameterization and RegularizationTo circumvent the two challenges, we propose to parameterize the basis matrices in a structured manner and impose additional structure regularization on the basis. The idea is to represent each basis matrix \(_{m}\) in its SVD (singular value decomposition) factor product form \(_{m}=_{m}_{m}_{m}^{}\) and then parameterize the factors \(_{m}\), \(_{m}\), \(_{m}\), where \(_{m},_{m}^{N N}\) are orthogonal matrices, and \(_{m}\) is a diagonal matrix consisting of the singular values of \(_{m}\). **One benefit** of such structured parameterization is that it permits us to establish connections between the basis matrices and impose constraints, and consequently, enhance the parameter efficiency and ease of the model learning. To be specific, we impose the constraint that all \(_{m}\) for \(m=1,2,,M\) share the same parameterized orthogonal matrices \(\), \(\) and each matrix has its unique \(_{m}\), i.e.,

\[\{_{1}^{}, _{2}^{},,_{M}^{} \}.\] (2)

Figure 1: **(a)** The framework of our proposed \(\). **(b)** the detailed structure of the Dynamic GCN module.

The rationality behind such a choice stems from the geometry interpretation of orthogonal matrix-vector multiplication, i.e., left multiplying a vector by an orthogonal matrix is equivalent to coordinate transformation, which is provided in Appendix A.1. Hence, we implicitly require that all basis matrices share the same pair of coordinate transformations, which can be considered a sort of implicit regularization since it reduces extra freedom and guides the model to find the coordinate transformations (\(\) and \(\)) that best suit the basis.

Dynamic Coefficient GenerationSuch a parameter sharing regularization mechanism along with the structured parameterization also brings **another benefit**, it allows us to treat \((_{m})^{N}\) as a fingerprint to identify each \(_{m}\). Hence, we can compute the \(_{t}\) to infer the dynamic spatial structure by simultaneously conditioning on \(^{}_{t}\) and \((_{m})\). To this end, we design an adaptive matching module that takes as input \(^{}_{t}^{N D_{o}}\) and \([(_{1}),(_{2}),, (_{M})]\), and it yields the coefficient \(_{t}\) at the \(t\) time step, as follows.

\[ [(_{1}),( _{2}),,(_{M})]^{N M}\] (3) \[ (^{}_{t})+ (t)^{ND_{o}}\] \[_{t} =((_{d})^{} _{z}/)^{M}\]

where \(\) is the timestamp encoding function, \(_{d}\) and \(_{z}\) are used to match the dimension, i.e., mapping \(\) and \(\) into the \(^{d}\) space. Given the structured basis in Eq. 2, each \(_{t}\) represents a dynamic spatial structure or graph at step \(t\) as

\[_{t}=f_{}(^{}_{t})=_{m=1}^{M} _{t,m}_{m}^{}.\] (4)

Given \(_{t}\) at each time step, we can perform graph convolution operation to aggregate information from the spatial dimension. The process is illustrated in Figure 1-(b). The output space of \(f_{}\) is well constrained on the premise that \(_{m}\) are well bounded, which is given by the following theorem.

**Theorem 3.1**.: _The output space of \(f_{}\) in Eq. 4 is bounded by the sum of the maximum of \(_{m}(\)the maximum singular value of \(_{m})\) for \(m=1,2,,M\) in terms of the \(_{2}\) norm i.e., \(\|f_{}\|_{2}_{m=1}^{M}(_{m})\)._

The proof is presented in Appendix A.2 and Theorem 3.1 states that the variance of the learned structures is controllable by restricting the maximum value of \(_{m}\), which is easy to achieve since \(_{m}\) can simply be parameterized by a vector with nonnegative values. Besides, by tracking the change of \(_{t}\) over time, our proposed method enables us to gain insight into the underlying dynamics of the system, and thus offers additional interpretability, as we will show in Section 4.4.

OrthogonalityTo impose the orthogonal constraint, one may attempt to apply an orthogonality penalty, i.e., by adding the penalty term \(\|^{}-\|+\|^{}- \|\) to the optimized objective. However, such a hard penalty cannot guarantee genuine orthogonality and the extra penalty term also increases the learning difficulty. Hence, rather than relying on the hard penalty, we opt for the orthogonal parameterization. In particular, we restrict our attention to the special orthogonal group

\[(N)\{^{N N} ^{}=,()=1\},\] (5)

which are flexible enough to represent the coordinate transformation. A nice property of \((N)\) is that it is both a compact Lie group and a smooth manifold . The tangent space of the Lie group at the identity forms a vector space equipped with a Lie bracket operation, namely, its Lie algebra. The Lie algebra of \((N)\) is the set of all skew-symmetric matrices, denoted by \((N)\), i.e.,

\[(N)\{^{N N} ^{}=-\}.\] (6)

In differentiable manifold and Lie group, a well-known result is that the matrix exponential \(:\) establishes the connection between a Lie group and its Lie algebra, i.e., for any \((N)\) we have \(()(N)\). The matrix exponential is defined as

\[()_{k=0}^{}^{k}= ++^{2}+\] (7)The computation of the matrix exponential map is costly but for the special orthogonal group it has a cheap first order approximation, also known as the Clay map [3; 2],

\[()(+)( -)^{-1}.\] (8)

The Clay map can be implemented in parallel by the Gaussian elimination algorithm in a numerically stable way.

Low Rank ApproximationBy using the Clay map, the number of parameters required to parameterize \(\) and \(\) is \(N(N-1)\) (two skew-symmetric matrices \(N(N-1)/2+N(N-1)/2\)). Thus the total number of parameters required by the basis in Eq. 2 is \(N(N-1)+MN\). To further reduce the parameter count, we can apply the low rank approximation. In real-world applications, the spatial structures (adjacency matrices) of multivariate time series are often low-ranked. Suppose the rank is \(K\), we can only preserve the first \(K\) columns of \(\) and \(\) as well as parameterize each \(_{m}\) with a length \(K\) vector, which leads to a parameter count upper bound \(NK+MK\). Since \(K\) is often much less than \(N\) in practice, the low rank approximation can enhance both the parameter and computation efficiency when \(N\) is large.

### Hierarchical Architecture

By stacking \(L\) blocks, the \(\) significantly enhances its capability to model temporal correlations and spatial dependencies effectively. We initialize \(^{(0)}\) with the original input \(^{N H D}\). The output of \(L\)-th block \(^{(L)}^{N H D^{(L)}}\) produces the multi-step prediction \(}_{t_{0}:t_{0}+F}\) through a linear transformation. The model is optimized by minimizing mean absolute error (MAE):

\[_{}(_{t_{0}:t_{0}+F},}_{t_{0}: t_{0}+F})^{N}_{t=t_{0}}^{t_{0}+F-1}|_{t}^{(n)} -y_{t}^{(n)}|}{N F}.\] (9)

## 4 Experiments

In this section, we evaluate our approach \(\) against \(15\) time series forecasting methods on six benchmark datasets (Section 4.2 and Appendix C). The ablation studies are presented in Section 4.3. We demonstrate the interpretability of our method with case studies in Section 4.4. The sensitivity of hyperparameters is provided in Section 4.5 and Appendix D; the computational cost is empirically studied in Appendix E. The code of \(\) is available at: https://github.com/chenxiaodanhit/\(\).

### Experimental Setup

DatasetsWe conduct experiments on six commonly adopted public datasets including: (1) **Electricity** contains hourly electricity consumption of 321 clients. (2) **Weather** includes 21 meteorological factors collected every 10 minutes from the weather station of the Max Planck Biogeochemistry Institute. (3) **PEMS** records traffic data of 358 variates in California sampled every 5 minutes. (4) **ETTh2** contains hourly data from 7 electricity transformers. (5) **Traffic** measures the hourly road occupancy rates of 862 sensors on San Francisco Bay area freeways. (6) **Solar-Energy** records the solar power production, which is sampled every 10 minutes from 137 PV plants.

BaselinesWe compare our method with the following baselines: (1) TCN-based methods: MICN, \(\); (2) Transformer-based methods: \(\), \(\), \(\), \(\); (3) Static graphs-based methods: MTGNN, \(\); (4) Dynamic graphs-based methods: \(\), \(\), \(\), \(\), \(\), \(\); (5) Structured State Space model: S4. More details of baselines are provided in Appendix B.

Implementation detailsThe number of blocks \(L\) of \(\) is set to \(3\), the dimension of structured basis \(M\) is set to \(5\), and the rank \(K\) is set to \((N,30)\) in all our experiments. The batch size is \(32\), the learning rate is \(0.0001\). We split the datasets into training, validation, and test datasets with the ratio \(0.6\)/\(0.2\)/\(0.2\) chronologically. The future window size \(F\) is set to \(3\), \(6\), \(12\), and \(24\) for all 

[MISSING_PAGE_EMPTY:7]

[MISSING_PAGE_FAIL:8]

### Ablation Study

We conduct the ablation study on the Electricity, Weather, and PEMS datasets with prediction horizons \(F\) of \(3\) and \(6\) to verify the efficacy of the proposed modules. In particular, we consider the following variants of our proposed model: (1) **w/o. dynamic**: we replace the Dynamic GCN module with the vanilla GCN module in . (2) **w/. \(_{m}\),\(_{m}\)**: we use distinct \(_{m}\), \(_{m}\) for each basis matrix \(_{m}\). (3) **w/o. orthogonality**: we remove the orthogonal parameterization on \(\) and \(\). As shown in Table 3, the performance of **w/o. dynamic** declines rapidly by up to \(13.83\%\), \(8.59\%\), and \(16.31\%\) on three metrics, which verifies the efficacy of the proposed dynamic GCN model. The absence of structure regularization (**w/. \(_{m}\),\(_{m}\)**) and the elimination of orthogonal parameterization (**w/o. orthogonality**) on structured matrix basis lead to averaged performance drops of \(4.95\%\) and \(3.05\%\), respectively. This proves the effectiveness of the proposed structure regularization and orthogonal constraint strategy.

### Interpretable Dynamics

As discussed in Section 3.1, one appealing feature of our proposed \(\) is that it enables us to gain insights into the underlying time series dynamics by tracking the change of the matrix basis coefficient \(\) over time. To verify this, we present the heatmap of the change of \(\) on two datasets--\(\)-Energy and Electricity in Figure 2, in which the x-axis denotes the time (hourly), the y-axis represents the no. of \(5\) basis matrices, and the color indicates the weight of \(\). It can be observed that most of the weights are concentrated on two basis matrices, no. 1 and no. 4, which implies that there are two dominant spatial structures on the two datasets. Furthermore, the two dominant spatial structures appear alternatively and regularly, which actually corresponds to the day and night for the Solar-Energy dataset. This aligns well with our intuition that solar energy observations should manifest different spatial correlations as the light intensity varies. For the Electricity dataset, there is a spatial correlation (no. 4) that spans two hours and only emerges in midnight, this reveals an interesting electricity consumption pattern, which is unnoticed by previous methods. Therefore, our proposed method is able to offer more interpretable dynamics of the underlying systems through tracking \(\).

    &  &  &  \\  & MAE & RMSE & MAPE(\%) & MAE & RMSE & MAPE(\%) & MAE & RMSE & MAPE(\%) \\  w/o. dynamic & 0.153 & 0.245 & 1.340 & 0.0693 & 0.219 & 1.624 & 0.145 & 0.215 & 1.127 \\ w/. \(_{m}\),\(_{m}\) & 0.148 & 0.238 & 1.251 & 0.0659 & 0.214 & 2.255 & 0.138 & 0.205 & 1.054 \\ w/o. orthogonality & 0.151 & 0.242 & 1.337 & 0.0633 & 0.213 & 1.605 & 0.142 & 0.209 & 1.094 \\   \)} & 0.148 & 0.237 & 1.331 & 0.0587 & 0.208 & 1.381 & 0.137 & 0.204 & 1.060 \\    &  &  &  \\  & MAE & RMSE & MAPE(\%) & MAE & RMSE & MAPE(\%) & MAE & RMSE & MAPE(\%) \\  w/o. dynamic & 0.169 & 0.268 & 1.636 & 0.0817 & 0.256 & 1.987 & 0.158 & 0.234 & 1.229 \\ w/. \(_{m}\), \(_{m}\) & 0.164 & 0.262 & 1.537 & 0.0722 & 0.234 & 2.116 & 0.149 & 0.227 & 1.162 \\ w/o. orthogonality & 0.167 & 0.265 & 1.578 & 0.0706 & 0.239 & 1.690 & 0.151 & 0.226 & 1.179 \\   \)} & 0.163 & 0.260 & 1.530 & 0.0704 & 0.234 & 1.663 & 0.147 & 0.222 & 1.155 \\   

Table 3: Ablation study.

Figure 2: The change of \(\) over one week.

### Parameter Sensitivity Analysis

We evaluate the impact of \(M\) on performance of our model, where the \(M\) ranges from \(1\), \(2\), \(5\), to \(10\). \(M=1\) corresponds to the static graph. As shown in Figure 3, the performance of our model improves significantly when \(M>1\). When \(M=2\), our method achieves the best performance on Electricity and Solar-Energy datasets, this coincides with the fact that the two datasets have two dominant spatial structure patterns, i.e., day and night. The experiments empirically show that the best setting of \(M\) is \(5\) on ETTh2, Traffic, and PEMS datasets and \(10\) on the Weather dataset. We hypothesize this is due to the Weather dataset having more complex dynamics, and thus it requires more basis matrices to cover the various patterns. The sensitivity analysis of \(L\), \(K\) and \(H\) is presented in Appendix D.

## 5 Conclusion

In this paper, we propose a time series forecasting method with the structured matrix basis, Sumba, to capture dynamic spatial structures. To this end, we propose a novel structured parameterization and impose structure regularization on the basis to enhance parameter efficiency, the output space of the spatial structure function is thus well constrained and the generated spatial structures have lower variance. Our proposed method offers us a manner to gain insights into the dynamics of the underlying systems, and thus it is more interpretable. The experiments on six benchmark datasets verify the superiority of our proposed method. Our extensive ablation studies prove the effectiveness of each proposed component. In addition, the case study shows that our method can offer desirable interpretability. In the future, we would like to explore how to better regularize the learned matrix vector space and set the dimension of basis \(M\) in a data-driven manner. We will also explore the possibility of integrating our proposed spatial structure modeling with other temporal encoders such as Transformers, and Structured State Space models, and apply our interpretable dynamics into more datasets to discover more interesting and hidden patterns.