# ACM Reference Format:

Passage: Ensuring Completeness and Responsiveness of Public SPARQL Endpoints with SPARQL Continuation Queries

Anonymous Author(s)

###### Abstract.

Being able to query online public knowledge graphs such as Wikidata or DBpedia is extremely valuable. However, these queries can be interrupted due to the fair use policies enforced by SPARQL endpoint providers, leading to incomplete results. While these policies help maintain the responsiveness of public SPARQL endpoints, they compromise the completeness of query results, which limits the feasibility of various downstream tasks. Ideally, we should not have to choose between completeness and responsiveness. To address this issue, we introduce and formalize the concept of _SPARQL continuation queries_. When a SPARQL endpoint interrupts a query, it returns partial results along with a SPARQL continuation query to retrieve the remaining results. If the continuation query is also interrupted, the process repeats, generating further continuation queries until the complete results are obtained. In our experimentation, we show that our continuation server passage ensures completeness and responsiveness while delivering high performance.Anonymous Author(s). 2024. passage: Ensuring Completeness and Responsiveness of Public SPARQL Endpoints with SPARQL Continuation Queries. In. ACM, New York, NY, USA. 12 pages. [https://doi.org/10.1145/mmmmnn.nnnn](https://doi.org/10.1145/mmmmnn.nnnn)

## 1. Introduction

**Context and motivation:** Linked Open Data (LOD) principles have led to the publication of billions of RDF triples (Kang et al., 2016; Wang et al., 2016). The ability to query online public SPARQL endpoints such as Wikidata or DBpedia is extremely valuable. However, SPARQL queries are often too long or complex, which violates the fair use policy applied by public SPARQL endpoint providers (Bauer et al., 2016). While these policies are mandatory to ensure service responsiveness, they compromise the completeness of query results, wasting resources to compute incomplete queries.

To illustrate, consider the query Q1 of Figure 1 that retrieves the women leading cities in Europe. This query times out on Wikidata after 60 seconds, returning only partial results. The partial results of Q1 remain useless for answering the query. When completeness is not ensured, many downstream tasks, such as processing aggregate queries (Kang et al., 2016), creating portals (Kang et al., 2016), indexing (Kang et al., 2016), or computing summaries for federation engines (Kang et al., 2016), cannot be performed.

**Related works:** Different approaches have been proposed to ensure both completeness and responsiveness: Linked Data Fragments (LDF) (Kang et al., 2016; Wang et al., 2016) and variants (Kang et al., 2016; Wang et al., 2016), web preemption principle (Kang et al., 2016), Smart-KG (Chen et al., 2016) or WiseKG (Chen et al., 2016). All these approaches deliver different trade-offs in terms of performance but raise two important issues: the execution time of a single query can be seriously impacted compared to current SPARQL engines, and more importantly, they are not compliant with SPARQL endpoints, which is a strong limitation for adoption. The research question is how to provide a SPARQL endpoint able to deliver completeness, responsiveness, and high performance.

**Approach and contributions:** Inspired by the concept of continuations in programming languages and web (Kang et al., 2016; Wang et al., 2016), we introduce the notion of _SPARQL continuation queries_. The idea is simple: when a SPARQL endpoint server reaches its time quota, it returns partial results along with a SPARQL query designed to return missing results, i.e., a continuation query. If the user wants to obtain missing results, she sends the continuation query to the SPARQL server, which may return partial results and another continuation query. The complete results of the original query are obtained by combining the partial results from all continuation queries. To the best of our knowledge, this is the first proposal to combine responsiveness, completeness, and compliance with the SPARQL standard. The contributions of this paper are as follows:

* We introduce and formalize the concept of _continuation queries_ and define the continuation query problem.
* We propose passage as a solution to the continuation query problem. We provide a formal framework that models partial executions and continuous evaluations. We prove its correctness and termination, and we analyze its complexity.
* We developed a SPARQL query engine built on the Blazegraph storage system, capable of executing core SPARQL queries with continuations. The remaining SPARQL operators are executed through the Comunica smart client (Sen et al., 2016).
* We compare the performance of passage against state-of-the-art SPARQL engines on the Wikidata benchmark (Bauer et al., 2016). Experimental results show that passage achieves performance comparable to Blazegraph and outperforms Apache Jena while ensuring completeness and responsiveness.

This paper is organized as follows: Section 2 defines the continuation query problem. Section 3 presents passage, our approach

Figure 1. The Query \(Q_{1}\) about women leading cities in Europe times out after 60 seconds on Wikidata.

for solving the continuation query problem. Section 4 reviews the state-of-the-art SPARQL query engines that ensure both responsiveness and completeness. Section 5 presents our experimental results. Section 6 concludes and outlines future work.

## 2. The Continuation Query Problem

We assume that the reader is familiar with RDF and core SPARQL (Gan et al., 2015; Wang et al., 2016), i.e. triple patterns, basic graph patterns, joins, unions, filters, and optionals. SPARQL evaluation semantics are detailed in (Gan et al., 2015; Wang et al., 2016). In short, the evaluation of a SPARQL query \(Q\) over a graph \(G\) is defined as a function \( Q_{G}\) which returns a bag of mappings.

The key idea of our approach is quite simple: when a SPARQL endpoint has to interrupt a query, instead of only returning partial results, it also returns a continuation query that can compute missing results.

**Definition 2.1** (Continuation query).: Let \(\|Q\|_{G}\) be a partial evaluation function of \(Q\) over \(G\), i.e., it returns partial results. The SPARQL continuation query \(Q_{c}\) of \(\|Q\|_{G}\) returns the missing results of \(Q\) over \(G\): \( Q\|_{G}=\|Q\|_{G}\|Q_{c} \|_{G}\).

**Problem 1** (Continuation queries).: _As continuation queries might be longer than allowed by time quotas, the problem is: how to compute a finite sequence of continuation queries \(Q_{c}^{1},,Q_{c}^{n}\), where \(Q_{c}^{i+1}\) is the continuation query of \(Q_{c}^{i}\), and \(Q_{c}^{i}\) the continuation query of \(Q_{c}\), such that it provides correct and complete results: \( Q_{G}=\|Q\|_{G}\|Q_{c}^{i}\|_{G}\)._

## 3. passage: SPARQL Continuation Queries

passage overhauls the notion of partial evaluation to include continuation queries that allow retrieving the remaining results of a partial evaluation.

Like the traditional SPARQL evaluation (Gan et al., 2015; Wang et al., 2016), the _continous evaluation_ of a query \(Q\) over a graph \(G\) includes an additional parameter: a bag of mappings \(Q\) that represents intermediate results (also called environment (Gan et al., 2015)). Initially, \(\) is a singleton set containing the empty mapping \(_{0}\) with an empty domain that is compatible with any mapping. Therefore, \( Q_{G}^{_{0}}\) corresponds to the evaluation of the query without restrictions \( Q_{G}\).

**Definition 3.1** (Continuous evaluation \( Q_{G}^{0}\)).: The _continuous_ evaluation of a query \(Q\) over a graph \(G\) with a bag of mappings \(\) as an environment, denoted \( Q_{G}^{0}\), returns \(_{p},Q_{c}\). \(_{p}\) is a partial query result, i.e., a bag of solution mappings compatible with \(\) (\(_{p} Q_{G}\)) and \(Q_{c}\) is \(Q\)'s continuation query, such that \( Q_{G}=_{p}  Q_{c}_{G}\).

### Requirement

The rewriting rules that create continuation queries of passage rely on the assumption that the evaluation of a triple pattern is deterministic and returns a list of mappings: \( tp_{G}^{}=[_{1},_{out}[_{q} ]_{G})\). While this constraint on triple pattern evaluations is stronger than SPARQL's (Brand et al., 2015), many SPARQL engines such as Blazegraph or Apache Jena rely on data structures such as B-Trees that already return such a list of elements deterministically.

With this assumption, the evaluation of a _Slice_ of triple pattern also becomes deterministic and returns a list of mappings. Then, a solution to the _continuation queries problem_ for triple patterns consists of evaluating disjoint slices of the triple pattern and concatenate their lists of solution mappings as: \( tp_{G}^{0}=[(,0,) ]_{G}^{L} Slice(,i,( tp _{G})-)_{G}^{H}\) where \(0 i<( tp_{G})\).

### Core SPARQL Evaluation

Core SPARQL includes triple patterns, joins, unions, optionals, and filters (Wang et al., 2016). However, the specification of the evaluation for SPARQL continuation queries starts with the empty case, allowing simplification of logical plans:

**Definition 3.2** (Empty continuation \( P_{G}^{0}\) and \(\{\}\{\}_{G}^{}\)).: Let \(P\) be a graph pattern, and \(\) be a bag of mappings, the evaluation of:

* an empty environment is \( P_{G}^{0}=(,\{\})\);
* an empty graph pattern is \(\{\}\!\!\{\!\{\!\{\!\{\!\}\}\}\!\!\} \!\!_{G}^{2}=(,\{\})\).

The smallest unit of core SPARQL is the triple pattern, whose evaluation produces mappings. The continuation query requires the offset \((P,,)\), which we simplify to \((P,)\) when the _limit_ equals the remaining the number of results.

**Definition 3.3** (Triple pattern evaluation \(\{tp_{G}^{}\)).: Let a triple pattern evaluation \( tp_{G}^{}=[_{1},_{k}]\) where \(k=( tp_{G})\) and \(\), \(0 i k\), a point when the _continuous_ evaluation of \(\) with environment \(\) can be stopped. The _continuous_ evaluation of a triple pattern \(\) with an environment \(\) is defined as:

\[ tp_{G}^{}=(\{\!\!\{\!\{\!\{\!_{1}, _{i}\}\!\!\}\!\!\}\!\!\!(( ,),i)\!\!_Example 3.6_.: To illustrate, let us consider the Graph \(G_{ex}\) of Figure 2 that contains 6 triples, 3 triples of which are about humans: wd:H1, wd:H2, and wd:H3. An end-user wants to enumerate all human beings in the graph with the SPARQL query:

```
SELECT*WHERE{'humanwd:P31wd:Q5}#getallhumanbeings
```

The _continuous_ evaluation of this query \(\{\{p\}_{G}^{n}\}\) where \(tp=(\)wdt:P31wd:Q5)may be interrupted at any point between 1 and \(card(tp)=3\). For example, being interrupted after the first mapping we obtain:

\[\{\{p\}_{G}^{n} =(\{\{\{\{\{\{ wd:H1\}\}\},((_{0},tp),1)\}\}\] \[=(\{\{\{\{\{ wd:H1\}\}\},(,1)\}\}\]

The end-user receives a first partial result (?_human_\(\)wd:H1), along with the continuation query that corresponds to the following SPARQL query:

```
SELECT*WHERE{'humanwdt:P31wd:Q5}orensert1#skipfirstresult
```

To retrieve missing results, the end-user sends back this regular SPARQL query. It is designed to skip the first produced result thanks to the offset clause. Again, the continuous evaluation stops after having computed one mapping, resulting in:

\[\{(,1)\}_{G}^{n} =(\{\{\{\{ wd:H2\}\}\},(,2)\}\]

The end-user receives a second partial result \(\{\)wd:H2\}\) with a SPARQL continuation query corresponding to:

```
SELECT*WHERE{'humanwdt:P31wd:Q5}orensert2#skiptopresults
```

The end-user sends back this SPARQL query designed to skip the two first results. When the continuous evaluation stops again after having produced one mapping, the result is:

\[\{(,1)\}_{G}^{n} =(\{\{\{\{\{ wd:H3\}\}\},(,3)\}\] \[=(\{\{\{\{\{\{\{\{ wd:H3\}\}\}\},\{\}\{\}\}\}\}\}\),\{\{\}\}\]

The continuation query becomes the empty graph pattern, since the offset reached the cardinality of the triple pattern. When the end-user receives the third result, she acknowledges that she got correct and complete results since the last continuation query is empty.

The solution of the continuation queries problem has not been computed beforehand, but it is obtained from the partial executions completed within the allowed time quota. For this example, the sequence of continuation queries is _Slice(tp,1)_, _Slice(tp,2)_, {.} The partial evaluation of these queries provides the two solutions that complete the partial evaluation of _tp_.

Core SPARQL includes conjunctive queries with the join operator between two graph patterns. Since the results of one side depends on the results of the other side, we devise a general rule for environments with multiple mappings as the union of the evaluations over every mapping:

\[()_{G}^{}=(_{h}_{t},(Q_{h},Q_{t} ))\ _{o}\\ \{\{p\}_{G}^{n}\}=(_{t},Q_{t})\\ \]

The evaluation of a join operator can be stopped at any point during the evaluation of its operands. For clarity, let us assume that the left operand is evaluated first, with the resulting mappings passed as the environment to the right operand. Both operands could be stopped. In this case, the continuation query of a join operator includes the remaining evaluation of its left operand (which still needs to be operated with the right operand ) and the remaining evaluation of the right operand with the new environment.

_Definition 3.7_ (_Join evaluation_\(\{(P_{t},P_{r})\}_{G}^{n}\)).: The _continuous_ evaluation of a join between two graph patterns \(P_{t}\) and \(P_{r}\) with environment \(\) is:

\[\{(P_{t},P_{r})\}_{G}^{n}=(_{lr},Q_{c})\  \{\{p\}_{G}^{n}\}=(_{l},Q_{l})\\ \{\{p\}_{G}^{n}\}=(_{lr},Q_{lr})\\ \]

The SPARQL continuation query of a conjunctive query includes a union, therefore, we define the continuous evaluation of disjunctions. The continuation query of a union operator unions solution mappings and continuation queries of both operands:

_Definition 3.8_ (_Union evaluation_\(\{(P_{t},P_{r})\}_{G}^{n}\)).: The _continuous_ evaluation of a union between two graph patterns \(P_{t}\) and \(P_{r}\) with a mapping \(\) as environment is:

\[\{(P_{t},P_{r})\}_{G}^{n}=(_{l}_{r},Q_{c})\  \{\{p\}_{P}^{n}\}=(_{r},Q_{r})\\ \{\{p\}_{G}^{n}\}=(_{r},Q_{r})\\ Q_{c}=Union(Q_{l},Q_{r})\\ \]

We consider the evaluation of basic graph patterns (BGPs) as an instance of a join evaluation where \(P_{t}\) is the first triple pattern and \(P_{r}\) corresponds to the remaining triple patterns.

_Example 3.9_.: To illustrate the evaluation of conjunctive queries, let us consider the Graph \(G_{ex}\) of Figure 2. An end-user wants to retrieve all human beings along with their occupations - a query \(Q_{kpq}\) that times out after 60 seconds on the Wikidata public SPARQL endpoint:

```
SELECT*WHERE{'humanwdt:P31wd:Q5}#tp:allhumanbeings
```

The continuous evaluation of the query \((_{t},_{2})\) where \(_{1}=()\) and \(_{2}=(\ )\) is \(\{(_{1},_{2})\}_{G}^{n}\). Assuming an interruption after having read the first mapping of \(_{1}\), the resulting continuous evaluation is:

\[\{((_{1},_{2})\}_{G}^{n}=( ,(((_{1}),1), _{2}),\]

The end-user receives no results yet, with a SPARQL continuation query corresponding to:

``` SELECT*WHERE{

[MISSING_PAGE_FAIL:4]

[MISSING_PAGE_FAIL:5]

a smart client can process queries between TPF or SPF and download a partition of triples from the server for processing on a smart client. Using pre-defined and compressed partitions of triples can significantly reduce the data transfer between an LDF server and a smart client.

While using pre-defined partitions is an effective optimization technique that can be used by any smart client, it is difficult to integrate into a standard SPARQL.

Web preemptionSaGe suspends SPARQL queries after a quantum of time to return partial results with a saved physical plan (Bartos et al., 2018; Kiefer et al., 2019; Kiefer et al., 2019). The physical plan can be reloaded by the server, allowing it to restart from where it had been stopped. SaGe ensures responsiveness and completeness for BGPs, some aggregate queries(Kiefer et al., 2019), and a subset of property path queries(Kiefer et al., 2019). However, SaGe is not compliant with the SPARQL endpoint standard. It requires to extend the interface of the server for re-loading saved plans.

In Passage, saved plan are replaced by continuation queries that are just regular SPARQL queries. When a saved plan is encoded and compressed, a continuation query is just human readable. When a new server interface is required to reload saved plan, a continuation query is just executed as new SPARQL query, maybe with a plan different from its previous query. Compared to SaGe, continuation queries are defined in a formal framework allowing to express the continuation problem, proving its correctness, its termination and computing space complexities. Web preemption is defined at the physical level, continuation queries are defined at the logical level.

## 5. Experiments Study

This experimental study aims to answer three questions empirically:

1. What is the difference in execution time between Passage with quotas and Passage without quotas?
2. What are the average size and number of generated continuation queries?
3. How does the execution time of queries with Passage compare to that of representative SPARQL engines?

Passage is implemented in Java on top of Blazegraph's storage and supports core SPARQL operators. To ensure logarithmic access times to triple patterns by offset, we rely on the augmented balanced trees index of Blazegraph2. Additionally, we extended the smart client Comunica (Sanchez-Gonzalez et al., 2018) to decompose queries for Passage, i.e., SPARQL operators not supported by Passage are executed within Comunica. The code for reproducible experiments is publicly available on GitHub at: [https://anonymous.4open.science/r/passage-experiments-C0D3](https://anonymous.4open.science/r/passage-experiments-C0D3).

### Experimental Setup

**Datasets:** We use the WDBench (Bartos et al., 2018), a real-world large dataset extracted from Wikidata containing around 1.25 billion triples.

**Queries:** We focus on basic graph pattern queries (BGPs) and optional queries (OPTs) from WDBench that fail to complete within a 60-second timeout on Blazegraph, as those terminating within 60 seconds are considered to be adequately handled by current SPARQL engines. Specifically, we randomly selected 49 BGPs and 38 OPTs, which take between one to five minutes to execute on Blazegraph using a single vCPU core with 54 GB of RAM. The selected BGPs contain 2 to 6 triple patterns, while the OPTs contain 2 to 1 triple patterns.

**Approaches:** We compare the following approaches:

* passageWe run passage query engine the Blazegraph storage without a timeout and with a 60-second timeout, denoted passage and passage-60s, respectively. The 60 seconds was chosen to comply with Wikidata's fair-use policy.
* Blazegraph: We run Blazegraph (v 2.1.4), a high-performance SPARQL engine currently serving Wikidata, without any quota or limitations.
* Apache Jena: A popular open-source framework for building Semantic Web and Linked Data applications3. Jena (v 5.1.0) runs with its TBB2 data storage, and we set its query execution timeout to 10 minutes. * SaGe (Kiefer et al., 2019): A SPARQL query engine based on Web Preemption. We run the SaGe query engine without a time quantum and with a 60-second time quantum, denoted SaGe and SaGe-60s, respectively. The data is stored in read-only HDT files (Kiefer et al., 2019).

We did not include TPF (Kiefer et al., 2019) or bTPF (Kiefer et al., 2019) as they are already outperformed by SaGe (Kiefer et al., 2019). Similarly, we excluded Smart-KG (Kiefer et al., 2019) and WiseKG (Kiefer et al., 2019) because they require pre-computing partitions of triples for query processing. Serving partitions of triples is not part of the SPARQL endpoint protocol and is irrelevant in our context.

**Hardware Configuration:** We run all the servers on a local cloud instance with Ubuntu 20.04.4.LTS, an AMD EPYC 7513-Core processor with 16 vCPUs allocated to the VM, 1 TB SSD, and 64 GB of RAM. To ensure a fair resource distribution among the different approaches, we conducted experiments using two different

    &  &  \\   & **Total** & **BGPs** & **OPTs** & **Total** & **BGPs** & **OPTs** \\ 
**Blazegraph** & 238.86 & 141.17 & 97.69 & 89.21 & 51.49 & 37.72 \\
**Apache Jena** & 610.06 & 347.76 & 262.30 & 611.41 & 347.41 & 264.00 \\
**SaGe** & 407.12 & 277.92 & 129.20 & 409.11 & 278.83 & 130.28 \\
**Passage** & **143.72** & **86.58** & 57.14 & 130.52 & 79.96 & 50.56 \\
**Safe Gos** & 413.81 & 279.02 & 134.79 & 413.17 & 278.65 & 134.52 \\
**Passage** & **60s** & **145.30** & **87.38** & 57.92 & 132.24 & 80.94 & 51.30 \\
**Passage** & & & & & & \\   

Table 1. Average total execution time (min) for BGPs and OPTs queries with different CPU configurations. Total represents the sum of execution times of both BGPs and OPTs.

    &  &  \\   & **size** & **\#TO/Total** & **size** & **\#TO/Total** \\ 
**SaGe 60s** & 1.18\&KB & 5.177/**292.67** & 1.927/**2**/**3** & 3.070/**152.67** \\ 
**passage 60s** & 0.821\&KB & **1.492/**62.67** & 0.827/**3** & **1.556/**41.67** \\ 
**SaGe 60s** & 1.16\&KB & 5.197/**296** & 1.929/**3** & 3.044/**153.67** \\ 
**passage 60s** & 0.780\&KB & 1.390/**57** & 0.649/**3** & 1.372/**30.33** \\   

Table 2. Average size of continuation queries or saved plans, and average number of continuation queries (#TO) for Passage 60s or average number of suspended plans for SaGe 60s.

configurations: one with a single virtual CPU (t\(\)CPU) and another with four virtual CPUs (4vCPU), both with 54 GB of RAM allocated to the virtual machine. The 1vCPU setup servers as a fair baseline for all engines, particularly those that do not utilize parallelism, ensuring no engine gains an unfair advantage from multi-threading. The 4vCPU setup allows us to evaluate the potential improvement from increased computational resources and parallel processing.

**Evaluation Metrics:** We always ensure that our approach passage produces complete results using Blazergraph's results as ground truth. Presented results correspond to the average obtained of three successive executions of the queries workloads. We measure:

* Total workload execution time: is the total time the engine takes to execute queries workload and get complete results.
* Number of continuation queries: is the number of continuations for each query.
* Size of continuation queries: is the size of a continuation query in kilobytes.

### Experimental Results

_What is the difference in execution time between passage with quotas and passage without quotas?_

Table 1 presents the average execution time for different query workloads across the two vCPU configurations, comparing various approaches. The difference in execution time between passage-60s and passage for 1vCPU is 1.58 minutes. The total number of generated continuation queries is approximately 104 (as shown in Table 2). By dividing the 1.58 minutes overhead by 104, we find the overhead per continuation query to be nearly 900ms.

Applying the same analysis for SaGe and SaGe-60s, the overhead for interrupting queries in the t\(\)CPU setup amounts to 6.69 minutes over 413 minutes of execution. The total number of interruptions for SaGe-60s for this workload is approximately 589, resulting in an overhead of about 681 milliseconds per interruption in SaGe, which is slightly less than that of passage-60s. Compared to SaGe, the continuation queries in passage-60s require parsing and optimization, which explains the slight difference in time per interruption. However, re-optimizing continuation queries may lead to better execution plans, representing a good trade-off in performance.

_What are the average size and number of generated continuation queries?_

Table 2 presents the average size and number of continuation queries for BGPs and OPTs queries across different configurations. For passage-60s, regardless of the configuration, the average number of continuation queries remains low, always fewer than 2. In

Figure 4. Execution time for OPTs queries group by number of triple patterns in the query with 1vCPU.

Figure 3. Execution time for BGPs queries group by number of triple patterns in the query with 1vCPU.

contrast, SaGe-60s generates more saved plans; for instance, it generates an average of 5 for BGPs queries. As passage-60s is faster than SaGe-60s, passage-60s is less interrupted than SaGe-60s.

Regarding query size, passage-60s consistently produces small query sizes, averaging around 0.8 KB, irrespective of the workload or configuration. In comparison with SaGe-60s, the size of the suspended plans are larger than the size of continuation queries of passage-60s, whatever the setup.

_How does the execution time of queries with passage compare to that of representative SPARQL engines?_

Table 1 presents the performance of passage-60s with SaGe-60s, Blazegraph, and Apache Jena. The quota of 60s applies only to passage-60s and SaGe-60s, which ensure both completeness and responsiveness. Blazegraph and Apache Jena execute the workload without interruption, i.e., without quota. While they ensure the completeness, they do not guarantee the responsiveness.

On the 1vCPU configuration, passage-60s is the fastest engine for BGPs and OPTs queries. It is slightly faster than Blazegraph but approximately 3 times faster than Sage-60s and 4 times faster than Jena. On the 4vCPU configuration, Blazegraph is the best-performing engine. Blazegraph implements intra-query parallelism and takes advantage of the 4vCPU while other engines continue to use mainly 1vCPU. JENA and SaGe-60s have very similar execution time with 1vCPU, passage-60s execution time is slightly improved.

For further detail, Figures 3, and 4 illustrate execution time per query for 1vCPU for BGPs and OPTs queries, respectively. In these figures, queries are grouped by the number of triple patterns labeled along the x-axis, while the y-axis shows the average execution time through 3 runs in minutes, ranging from zero to ten. The queries are ordered by Blazegraph's execution time within each group. Red "t" marks appear above some bars, indicating those queries timed out on the engine. The horizontal red line at 1min represents the quota of 60s.

Figure 3 presents the result for BGPs queries. Blazegraph executes a query within 1min and 5min. Jena's execution times are significantly higher for many queries than other engines, with frequent timeouts at 10 minutes (12 out of 49 queries), likely due to join order. SaGe-60s can terminate all the workload queries except query 646 due to poor join ordering.

In contrast, our engine, passage-60s, delivers good overall performance with an average execution time of 106.02 seconds and only one timeout on a complex query (q646). This is also caused by the join order; after fixing the join order, the execution time dropped drastically from over 10 min to just 3 seconds. While Jena outperforms passage in a few isolated cases, these are exceptions due to specific join orders.

For OPTs queries in Figure 4, Jena times out after 10 min on nearly half of the workload (17 queries out of 38), though it occasionally performs better than passage-60s on 2 queries due to efficient join order. passage consistently outperforms all other engines, with an average execution time of 90.21 seconds, completing 13 queries in less than 60 seconds.

The detailed results for 4vCPU are available in Appendix D.

Overall, we observe that passage consistently delivers high performance in the same order of magnitude as Blazegraph while ensuring results completeness and responsiveness.

## 6. Conclusion and Future Work

In this paper, we introduced the concept of SPARQL continuation query to enable public SPARQL endpoints to achieve completeness, responsiveness and performance without wasting computation resources. When query execution reaches the timeout, the endpoint interrupts it, returns partial results along with a continuation query that efficiently represents the missing results in a SPARQL-compliant format. To support continuations, passage relies on two key assumptions: (1) Triple pattern evaluations must return an ordered list of mappings, a condition easily met when RDF triples are indexed by traditional B-trees. (2) Each partial evaluation of a continuation query must ensure progress, meaning it processes at least one scan of any triple pattern of the query. This requires efficient access to an offset in the triple patterns, a feature already supported in Blazegraph storage and HDT. With these two requirements in place, any SPARQL engine can be transformed into a continuous SPARQL engine capable of providing completeness, responsiveness, and robust performance, as demonstrated in our experiments.

For future work, we plan to work on intra-query parallelism for continuations queries to speed up the execution of core SPARQL queries. Additionally, we plan to support more SPARQL clauses such as count, group by, and distinct, gradually deporting smart clients operations to servers to enhance performance.