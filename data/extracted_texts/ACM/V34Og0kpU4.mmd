# GEES: Enabling Location Privacy-Preserving Energy Saving in Multi-Access Edge Computing

Anonymous Author(s)

###### Abstract.

The global deployment of the 5G network has led to a substantial increase in the deployment of edge servers to host web applications, catering to the growing demand for low service latency by edge web users. Running edge servers 24/7 leads to enormous energy consumption and excessive carbon emissions. Energy-efficient edge resource provision is desired to achieve sustainable development goals in the new multi-access edge computing (MEC) architecture. Recently, several approaches have been proposed to solve the demand response problem for energy saving in cloud computing and MEC. However, accurate location information of edge web users should be provided, which sacrifices edge web users' privacy. To protect edge web users' location privacy while saving energy in MEC, we systematically formulate this location privacy-preserving edge demand response (LEDR) problem. To solve the LEDR problem effectively and efficiently, we propose a system named GEES by incorporating differential geo-obfuscation to secure user privacy, while maximizing system utility and energy efficiency through inference with theoretical analysis. Extensive and comprehensive experiments are conducted based on a synthetic real-world dataset, and the results demonstrate that GEES outperforms representative approaches by 23.02%, 31.47%, and 17.29% on average in terms of energy efficiency, user privacy and system utility.

multi-access edge computing, location privacy, edge energy saving 1

## 1. Introduction

The proliferation of data-intensive applications and the growing demands for low-latency services have highlighted the significance of Multi-Access Edge Computing (MEC) and reshaped the computing paradigms . By redistributing resources to the network edges, MEC liberates the computing capabilities of web users' devices and enables real-time web services to improve users' quality of experiences. The evolving landscape of MEC systems has spurred research efforts across diverse domains, including edge intelligence , edge privacy and security , and edge resource , driven by the goal of delivering low-latency web services .

Demand response in cloud computing has received extensive research attention , driven by predictions that global electricity consumption by data centers will reach 8% by 2030 . As an extension of cloud computing, MEC involves dense edge server deployments near base stations, e.g., the density could reach as high as 50 per km\({}^{2}\) in real-world 5G deployments . This results in significant _energy issue_ with cost escalations for energy consumption, posing new challenges to environmental sustainability . Recent efforts  have begun addressing the edge demand response challenge by adopting strategies similar to those used in data centers -- workload shifting and consolidation on selected edge servers, along with the shutdown of unused servers to conserve energy. To optimize the energy consumption of edge servers and satisfy users' quality of experience, users' actual locations are required by existing approaches. However, this greatly compromises users' location privacy. From the perspective of users, sacrificing their privacy to reduce the energy consumption of edge servers is a lack of motivation. This is undoubtedly disheartening, as it could lead to a reduction in users' willingness to access edge web services due to privacy concerns, ultimately eroding the benefits of the MEC architecture. Thus, it is urgent to solve this _privacy issue_.

To protect users' location privacy, cloaking-based methods and homomorphic encryption  are two widely-used approaches. However, applying these techniques in edge demand response scenarios faces significant practical challenges. Cloaking-based methods aim to protect privacy by injecting obfuscated unreal data. However, severe distortion in cloaking unreal data leads to poor service performance . Homomorphic encryption, which facilitates encrypted computations without exposing raw location data, introduces substantial computational complexity and serious overhead. This violates the key objective of MEC to pursue the low latency, causing performance degradation. Moreover, homomorphic encryption and cloaking-based methods are also sensitive to prior knowledge, rendering them vulnerable to inferences, such as Bayesian Inference Attacks (BIA) . Practically, edge servers might attempt to infer users' locations by leveraging prior knowledge of users, with the intention of enhancing services, if they are aware that the uploaded locations are intentionally obfuscated.

Differential privacy  is another widely-used privacy-preserving approach in web services , mobile crowdsensing (MCS)  and location-based services (LBS)  by introducing noise to location data to enable confident data sharing and build trust in location-based applications. Compared to homomorphic encryption, differential privacy is an extremely efficient method while ensuring absolute privacy for users. To demonstrate this, we measured the computation time of differential privacy and holomorphic encryption for a bignit transformed string containing the user's location information in August 2023. In the experiments, we apply homomorphic encryption1 and differential privacy by adding noise drawn from Laplace distribution to the original data. The overall computation time reported in Figure 1 depicts the superior advantage of differential privacy safeguarding latency-sensitive services, e.g., the time taken by homomorphic encryption is \(>100\) the time taken by differential privacy. Compared to cloaking-based methods,

Figure 1. Location privacy protection latency testsdifferential privacy offers a more rigorous and adaptable privacy protection framework, which demonstrates stronger robustness anti prior knowledge and a better trade-off between privacy and data availability (Zhu et al., 2019). Those advantages make differential privacy more suitable for addressing privacy-related problems in MEC than homomorphic encryption and cloaking-based methods.

Relying solely on differential privacy is still very challenging to realize an effective edge demand response strategy to achieve low energy consumption and high user coverage (referred to as _system utility_ hereafter) due to the injected data noise. Figure 2 demonstrates a simple MEC system example comprising 4 base stations, 4 edge servers \(\{s_{1},...,s_{4}\}\) and 6 users located at \(\{l_{1},...,l_{k}\}\). Assuming that each edge server has enough resources, e.g., CPU, GPU, Memory, etc., to host nearby users. According to users' actual locations, all six users can be allocated to edge servers \(s_{2}\), \(s_{3}\) and \(s_{4}\). In this case, edge server \(s_{1}\) can be powered off to save energy. To protect location privacy based on differential privacy, base stations store the obfuscation mechanism provided by their trustworthy control server in advance and send the mechanism to users. In this way, users' locations \(\{l_{1},...,l_{6}\}\) are obscured to obfuscated locations \(\{l_{1}^{*},...,l_{6}^{*}\}\). Now, all four edge servers need to be powered on to serve nearby users based on \(\{l_{1}^{*},...,l_{6}^{*}\}\), increasing the energy consumption. The inference method might be adopted by edge servers, where inferred locations are denoted as \(\{_{1},...,_{k}\}\). According to inferred locations, \(s_{3}\) can be powered off, since all the users can be allocated to \(s_{1}\), \(s_{2}\) and \(s_{4}\). Although energy consumption is reduced, user \(u_{3}\) is not truly covered by any running edge servers, thus further decreasing the system utility. Hence, developing a system that empowers users to utilize edge web services without privacy compromises while maintaining satisfactory system utility and energy efficiency, becomes increasingly imperative and urgent.

To address this location privacy-preserving edge demand response (LEDR) problem, considering energy and privacy issues in MEC, we design a geo-obfuscated edge energy saving (GEES) system to enable fast location privacy preservation with the maximum system utility and energy efficiency jointly. Contributions of this paper can be summarized as follows:

* To the best of our knowledge, this is the first attempt to leverage differential geo-obfuscation in the edge demand response problem, so as to secure users' location privacy, ensure system utility and improve energy efficiency.
* GEEs deploys a novel approach named Deflected Distribution Positioning (DDP) to maximize system utility with privacy guarantees by solving the Optimal Transport (OT) problem between the obfuscated distribution and the real distribution.
* Once users' locations are obfuscated, GEEs employs a Secure Greedy Response (SGR) algorithm to finalize the edge demand response strategies by powering on and off the edge servers to improve system utility and energy efficiency.
* Comprehensive experiments verify that GEEs significantly outperforms benchmarks, including the state-of-the-art approach with various differential privacy approaches.

## 2. Preliminaries

### Differential Privacy

Differential privacy is a rigorous privacy protection scheme, which was first used for location privacy-preserving in (Zhu et al., 2019). It obfuscates the location through probabilistic means to prevent adversaries from distinguishing the users' actual locations. In this way, even if an adversary observes the published location \(l^{*}\) and possesses the obfuscation mechanism \(\), it fails to find the actual location \(l\).

Definition 1 (Differential Privacy).: _Suppose the obfuscated area includes a set of locations \(\{l_{1},...,l_{n}\}\), then a probabilistic geo-obfuscation function \(P\) satisfies \(\)-differential privacy, iff_

\[(l^{*} l_{1})<e^{ dist(l,l_{2})}( l^{*} l_{2}), l_{1},l_{2},l^{*} \]

_where \((l^{*} l_{1})\) is the probability of obfuscating \(l_{1}\) to \(l^{*}\), \(dist(l_{1},l_{2})\) is the Euclidean distance between \(l_{1}\) and \(l_{2}\), and \(\) is the privacy budget. The smaller \(\), the higher the privacy._

Exponential mechanism is a prevalent mechanism to realize \(\)-differential privacy (Zhu et al., 2019). Given the overall location set \(\) and neighboring protected location set (NFLS) \(\), it leverages a scoring function \(:L R\), which assigns a real-valued score to each in/output pairs, in order to ensure that outputs with better utility can receive higher scores.

Definition 2 (Sensitivity (Zhu et al., 2019)).: _For any pair of neighboring locations \(l_{1}\) and \(l_{2}\) on NFLS \(\) and \(1\), the sensitivity of the scoring function \(\) is given by its maximum change: \(=_{l_{1},l_{2},l}(l_{1},l)-(l_{2},l).\)_

Definition 3 (Exponential Mechanism (Zhu et al., 2019)).: _Given a scoring function \(\) on \(\) and actual location \(l\), the exponential mechanism selects and outputs an element \(l^{*}\) on NFLS with probability proportional to \(()}{2})\)._

To preserve \(\)-differential privacy, other mechanisms, such as the Laplace mechanism and Gaussian mechanism, achieve geo-obfuscation by adding proportional noise drawn independently and identically distributed from the respective distributions to the query output.

### Optimal Transport

Optimal transport (OT) is a mathematical framework that was originally developed to transport a set of resources from one location to another efficiently (Zhu et al., 2019). It serves as a powerful means of comparing and aligning probability distributions, enabling precise quantification of dissimilarities. In recent years, it has garnered significant attention in the computing field (Zhu et al., 2019). Compared to metrics such as \(X^{2}\) and Kullback-Leibler divergence, it has demonstrated notable performance enhancements.

Figure 2. MEC system example

**Wasserstein distance \(_{p}\),** as a key definition of OT, quantifies the dissimilarity between two probability distributions. By considering both the values and spatial arrangement of the distributions, it enables precise measurement of distributional discrepancies. This metric has been widely applied in probability-based applications, such as domain adaption (Srivastava et al., 2014), and data association (Srivastava et al., 2014).

Definition 4 (p-Wasserstein distance).: _The \(p\)-Wasserstein distance between two probability measures \(\) and \(v\) on a metric space \((X,d)\) is defined as \(_{p}(,v)=(_{v(,v)}|x-y|^{p}\,dy(x,y))^ {}\), where \(\) and \(v\) represent probability measures, \((,v)\) is the set of all joint distributions with marginals \(\) and \(v\), and \(y(x,y)\) represents the probability of the joint occurrence of \(x\) and \(y\). The parameter \(p\) controls the emphasis on different characteristics of the distributions._

Specifically, \(_{2}\) considers individual contributions in \(2\)-norm space, which is favored for its precision and computational efficiency in practical OT problems (Srivastava et al., 2014).

## 3. Problem Formulation

In this section, we first introduce the privacy games in MEC. Next, we present the system model and formally formulate the location privacy-preserving edge demand response (LEDR) problem.

### Edge Privacy Games

Users and edge servers always have divergent interests when it comes to privacy issues in MEC. Users usually prefer not to disclose their actual location precisely when accessing edge services, while edge servers desire their actual locations to deliver accurate service and reduce energy consumption. Therefore, users and edge servers are often engaged in privacy games. Under edge privacy games, there are four main roles:

**Control server.** Hosted by the network provider with dedicated communication protocols and strict security measures for managing base stations, the control servers are regarded as inherently trustworthy entities (Srivastava et al., 2014; Li et al., 2016). In this study, the control server generates the geo-obfuscation mechanism \(\) and sends it to base stations for dispatching in advance (**Step #1** in Section 4.1).

**Base stations.** Base stations store \(\) locally from the control server and play the role of senders. Once a user enters the coverage of a base station, the base station directly distributes \(\) to her (**Step #2** in Section 4.1). We assume that base stations are also trustworthy, the same as (Srivastava et al., 2014; Li et al., 2016).

**Users.** Users receive \(\) from base stations to obfuscate their actual locations locally to protect their privacy and upload obfuscated locations to edge servers (**Step #3** in Section 4.1).

**Edge servers.** Edge servers collaboratively serve nearby users. However, edge servers are semi-trusted, as they are interested in users' actual locations to achieve low-energy edge demand response and apply inference methods to predict such locations (Section 4.2).

Figure 3 illustrates a general architecture of edge privacy games: **Geo-obfuscation in user-side.** From a user's perspective, her location \(l_{k}\) needs to be obfuscated to obtain the new location \(l_{k}^{*}\) through geo-obfuscation mechanism \(\). The input of \(\) is the actual location \(l_{k}\), where \(\) is the set of all possible values of the user's location, i.e., the locations that user could visit while releasing obfuscated location \(l_{k}^{*}\) is sampled according to the following probability distribution:

\[(l_{k}^{*} l_{k})=Pr\{l_{k}^{*} l_{k} \} 0\;\;\&\;\;_{l_{k}^{*}}(l_{k}^{*}  l_{k})=1\]

In this way, users' location privacy can be successfully protected by involving noise into the location information through the geo-obfuscation mechanism \(\).

**Inference in server-side.** In fact, while the user is protecting her privacy, the edge server also makes efforts to reveal the user's actual location through inferences to deliver accurate service and reduce energy consumption on the edge servers. Let \(\) denote the prior leakage of the users' location distribution over \(l\) as the prior knowledge: \((l_{k})=Pr\{l_{k}\}\). Based on \((l_{k})\), the edge server performs inferences on the obfuscated location \(l_{k}^{*}\) from the user through an inference mechanism \(\), aiming to find the users' actual location by observing the outcomes of the protection mechanism. Given any released \(l_{k}^{*}\) and any prior knowledge of users, mechanism \(\) generates estimated location \(_{k}\) on edge servers according to the probability distribution:

\[(_{k}_{k}^{*})=Pr\{_{k}^{*}  l_{k}^{*}\} 0 \]

### System Model

Given \(M\) physical edge servers \(=\{s_{1},...,s_{M}\}\) possessing \(q\)-dimensional computing resources \(=\{r_{1},...,r_{M}\}\) (\(r_{j}=\{r_{j}^{1},...,r_{j}^{q}\}\)), \(N\) users \(=\{u_{1},...,u_{k},...u_{N}\}\) with \(h\)-dimensional resources demands \(d=\{d_{1},...,d_{N}\}\) (\(d_{k}=\{d_{k}^{1},...,d_{k}^{h}\}\)), the objective of the location privacy-preserving edge demand response (LEDR) problem is to maximize the overall system performance, in terms of system utility \(_{u}\), user privacy \(_{p}\), and energy efficiency \(_{e}\).

**System Utility.** A primary goal of MEC systems is to serve the maximum number of nearby users. Here, we define the system utility by the coverage rate of all the users in an MEC system, denoted by \(F_{c}\). To calculate the system utility, we first introduce the effective user set in the LEDR problem:

Definition 5 (Effective User Set).: _Users with accessibility to edge web services whose real and inferred locations are within the range of a running edge server) are defined as set \( X=\{u_{k}(_{k},s_{j}) c_{j}\}(l_ {k},s_{j}) c_{j}\}\), where \(s_{j}\) is the edge server serving user \(u_{k}\)._

According to the inferred location \(\), the adjacent servers covering the inferred location \(_{k}\) of user \(u_{k}\), denoted by \((_{k})=\{s_{j}(_{k},s_{j}) c_{j}\}\). In this way, we define user \(u_{k}\)'s allocation decision as \(a_{k}\), where \(a_{k}\{0\}\{j s_{j}(_{k})\}\). Here, \(a_{k}=j\) indicates that user \(u_{k}\) is served by edge server \(s_{j}\), while \(a_{k}=0\) means that \(k\) is not allocated to any edge server. The user allocation strategy is denoted by \(=\{a_{1},...,a_{N}\}\).

Let \(_{j}()\) denote the number of users served by edge server \(s_{j}\) according to \(\), The total number of users covered by strategy

Figure 3. Private game architecture\(\), denoted by \(N_{total}\) is calculated with \(N_{total}=_{s_{j} S}N_{j}()\). Therefore, the system utility \(F_{c}\), i.e., the coverage rate of all the users in an MEC system, is calculated with:

\[_{c}=}{N} \]

**User Privacy.** Following the analysis in (Wang et al., 2018), we first introduce \(_{k}\), the inference error, i.e., the expectation of Euclidian distance between the \(u_{k}\)'s actual location \(l_{k}\) and the inferred location \(}\):

\[_{k}=_{l_{k}}(l_{k} l_{k}^{*}) \|}-l_{k}\|_{2} \]

The inference error \(_{k}\) can be considered how distorted the location can be restored during the inference process. Intuitively, we use the area proportion of inference error to the coverage radius \(c_{j}\) of the allocated edge server \(s_{j}\) to define the privacy rate \(R\) to determine user privacy, as shown in Figure 4(b). In this way, a user \(u_{k}\)'s privacy \(_{k}\) is calculated with:

\[_{k}=\|_{k}}{c_{j}}\|_{2}^{2} \]

Therefore, the system privacy \(_{p}\), calculated by the average privacy value of all the users, is:

\[_{p}=_{u_{k}}_{k}}{N(u_{k})}  \]

**Energy Efficiency.** Edge demand response aims to reduce the energy consumption of edge servers while serving nearby users. However, the LEDR problem can be more complicated, as geo-obfuscation is introduced for privacy protection, and extra energy may be consumed as discussed in Section 1 with Figure 2. Therefore, how to maintain satisfying energy efficiency with privacy and utility guarantees is the critical challenge.

Similar to (Wang et al., 2018; Wang et al., 2018), the energy consumption consists of three main components, including running cost \(e_{j}^{cc}\), mode switching \(e_{j}^{sc}\) and maintenance cost \(e_{j}^{mc}\). Specifically, the running cost \(e_{j}^{rc}\) can be calculated by \(e_{j}^{rc}=_{l_{k}_{j}()}p_{k}\), where \(p_{k}\) is the energy cost for serving user \(u_{k}\). The mode switching cost is calculated by \(e_{j}^{sc}=_{j}(1-m_{j})\), where \(_{j}\) is the start-up energy cost of activating server \(s_{j}\), and \(m_{j}\{0,1\}\) represents current status of \(s_{j}\), i.e., \(m_{j}=1\) is active and \(m_{j}=0\) is inactive. For the maintenance cost, \(e_{j}^{mc}= m_{j}\), where \(\) is the unit cost for maintaining one activated server. Then, the effective system energy consumption \(E_{c}\) is denoted by:

\[E_{c}=_{u_{k} s_{j} S}e_{j}^{rc}+e_{j}^{sc}+e_{j}^{mc} \]

while the original energy consumption \(E_{o}\) without edge demand response strategies is:

\[E_{o}=_{u_{k} s_{j} S}e_{j}^{rc}+e_{j}^{sc}+e_{j}^{mc} \]

The system energy efficiency \(F_{c}\) is defined by the ratio of effective energy consumption over the original energy consumption:

\[_{c}=}{E_{o}} \]

### Problem Formulation

Now, we formulate the Location privacy-preserving Edge Demand Response (LEDR) problem systematically by two phases: _differential geo-obfuscation_ and _distortion-aware edge demand response_, jointly optimizing user privacy, system utility and energy consumption.

#### 3.3.1. Probabilistic Differential Geo-obfuscation

In the LEDR problem, edge servers may possess significant prior knowledge about the user geo-distribution within the region. For example, in an organized and vibrant area, users tend to be uniformly distributed (Wang et al., 2018). Simultaneously, as introduced in Section 2.1, probabilistic methods could be employed to obfuscate users' locations. Such obfuscated locations uploaded from users to base stations for resource demands are often drawn from such an exponential distribution (details about selecting exponential distribution can be found in Section 4.1) under differential privacy (Wang et al., 2018). Logically, the closer the obfuscated distribution aligns with the original distribution, the better the system's utility could be. Therefore, the first phase of the LEDR problem is to handle the gap between obfuscated distribution \(\) with prior knowledge \(\) about users' real distribution while ensuring differential privacy guarantees. In this way, **Objective #1** of the LEDR problem is to minimize the Wasserstein-\(2\) distance \(W_{2}\) between the two distributions:

\[s.t. (l_{k}^{*} l_{1})<e^{-d(l_{k},l_{k})}(l_{k}^{*} l_{k}), l_{k},l_{k},l_{k}^{*} \]

\[_{l_{k}}(l_{k})(l_{k}^{*} l_{k})=(l_{k }^{*}), l_{k}^{*} \]

As introduced in Sec. 2.1, constant (11) ensures users' differential privacy with privacy budget \(\). Constraints (12) ensure that the geo-obfuscation will not change users' overall location distribution. Maintaining crucial statistics unchanged during obfuscation is a widely adopted approach in statistical disclosure control (Wang et al., 2018; Wang et al., 2018). It helps protect individual privacy while retaining general information in the obfuscated data, making it harder to infer specific individual details.

#### 3.3.2. Distortion-aware Edge Demand Response

The second phase of solving the LEDR problem is to allocate contained resources on edge servers to users under geo-distortion to maximize user privacy, system utility, and energy efficiency jointly. To generalize the LEDR problem, a set of parameters \(=\{b_{1},b_{2},b_{3}\}(_{1}^{3}b_{1}=1)\) are set based on the priority of system utility, user privacy, and energy efficiency in various MEC scenarios. This allows the model and the approach GEES (detailed in Section 4) be applied to various scenarios according to different needs. In this way, **Objective #2** of the LEDR problem is to maximize the overall system performance:

\[ b_{1}_{c}+b_{2} _{p}+b_{3}_{e} \]

\[s.t. _{l_{k}}d_{k}^{*} r_{j}^{}, g  q,\ s_{j} \]

\[a_{k}\{0\}\{j dist(l_{k},s_{j}) c_{j}\}, u_{k} ,\ s_{j} \]

Resource constraint (14) guarantees that the allocated resources of each edge server cannot exceed its available resources and coverage constraint (15) confines that each user only can directly access edge servers covering this user. The impacts of priority of system utility, user privacy, and energy efficiency, i.e., \(=\{b_{1},b_{2},b_{3}\}\), are detailed

Figure 4. Definitions of effective user and privacy area

evaluated and discussed in Section 5.3. The problem hardness of LEDR is theoretically analyzed in Appendix B.

## 4. Geo-obfuscated Edge Energy Saving System

To tackle the LEDR problem systematically, including _geo-obfuscation probabilistic optimization_ and _resource allocation under geo-distortion_, we design a geo-obfuscated edge energy saving (GES) system to maximize user privacy, system utility and energy efficiency. Following the logic in Section 3.3, GEEs first proposes a novel approach (Section 4.1) named deflected distribution position (DDP) to optimize geo-obfuscation probabilistic to achieve **Objective #1**, then designs a secure greedy response (SGR) approach (Section 4.2) to improve the overall system performance, i.e., **Objective #2**.

### Geo-obfuscation Probabilistic Optimization

To achieve the geo-obfuscation function optimization, we propose an exponential-based probabilistic method, inspired by the Particle Swarm Optimization (PSO) (Skinner, 1986). Compared to other mechanisms in differential privacy, such as Laplace (Shi et al., 2017) and Gaussian (Shi et al., 2017) which directly add noise to location data, the exponential mechanism provides a more flexible form of randomness. By designing a scoring function to assess the utility of the data, it can offer more accurate privacy protection in various scenarios, allowing for a more precise trade-off between privacy and utility. Thus, the exponential mechanism is adopted in our design to perform geo-obfuscation. To evaluate the impacts of various differential privacy mechanisms, extensive experiments are conducted in Section 5, while the results can verify the advantages of the exponential mechanism.

As introduced in section 2.1, a scoring function \(\) should be defined to accommodate the LEDR scenario. The ideal situation is that the obfuscated location distribution uploaded to an edge server can closely resemble the actual location distribution of users while adhering to privacy constraints. Specifically, for a personalized NPLS, an appropriate scoring function would assign higher scores to the locations near the actual locations, aiming to keep the obfuscated locations as close as possible to the original ones. However, due to privacy and objective constraints, the mapping results often experience deflections.

To tackle the above-mentioned issue, a novel approach named Deflected Distribution Positioning (DDP) is designed in this section. DDP adopts the probability density values drawn from the Gaussian distribution \(X N(,^{2})\) as scores to simulate the corresponding outputs. By optimizing the \(\) and \(^{2}\) under privacy constraints consistently, the position of Gaussian distribution is manipulated nimbly on the array to accommodate the requirements and generate corresponding scores wisely. Figure 5 provides an overview of the DDP algorithm 1, which consists of three steps.

* **Step #1**. Given \(u_{k}\) actual location \(l_{k}\), the NPLS around the actual location \(_{k}\) is partitioned into a \(10 10\) location set on base stations, where each grid in this set corresponds to a \(10m 10m\) unit. Then, personalized NPLS \(_{k}\) are transformed into \(100 1\) arrays. Each grid is assigned a score value drawn from the probability density function of a shiftable and adjustable Gaussian distribution \(N(,^{2})\). In this step, a classical evolutionary algorithm of Particle Swarm Optimization (PSO) is employed to optimize the parameters of the distribution on the trustworthy base stations. As discussed in Section 3.1, this process is executed by the control server of base stations _in advance_. After the optimization, the control server sends mechanism \(\) to base stations.
* **Step #2**. Once a base station receives \(\), it stores \(\) locally. After that, if a user enters its coverage, it automatically sends \(\) to the user for geo-obfuscation.
* **Step #3**. In this step, users can apply \(\) on their own devices to obfuscate their locations.

Finally, the obfuscated results are transmitted to edge servers to balance the privacy constraints and system utility. The pseudo-code of DDP is presented in Algorithm 1.

```
1:initialization
2: set swarm of \(I\) particles with bounded \(\) and \(_{i}^{2}\) and \(T\) iteration times
3: set particle best positions and fitness \(_{}=_{}=(,_{i}^{2})\), \(f_{}=f_{}=f(,_{i}^{2})\)
4:end initialization as Trustworthy Control Server:
5:Step #1: Preparation and Probabilistic Optimization
6: Partition the NPLS and transform into \(100 1\) arrays
7:foreach iteration \(t=1,...,T\)do
8:foreach particle \(i=1,...,I\)do
9: Update particle velocity:
10:\(_{i}=_{i}^{*}((_{}-_{i})+ _{i}^{}()(_{}-_{i})\)
11:\(_{i}^{2}=_{i}^{}()(( _{}^{2}-_{i}^{2})+_{i}^{} {rand}()(_{}^{2}-_{i}^{2})\)
12: Update particle position:
13:\(_{i}=_{i}+_{i}\)
14:\(_{i}^{2}=_{i}^{2}+_{i}^{2}\)
15: Evaluate fitness: \(f_{i}=f(,_{i}^{2})\)
16:if\(f_{i}>f_{}\)then
17: Update particle best: \(_{}=(_{i},_{i}^{2})\), \(f_{}=f_{i}\)
18:if\(f_{i}>f_{}\)then
19: Update global best: \(_{}=_{}\), \(f_{}=f_{i}\)
20:endif
21:endif
22:endfor
23: Dispatch optimized exponential-based mechanism \(\) to base stations as Base station: \(\) Step #2: Mechanism Storage and Dispatch
24:store \(\) locally
25:end \(\) to a user once the user enters its coverage as User \(u_{k}\); \(\) Step #3: Geo-Obfuscation
26:\(u_{k}\)'s personalized geo-obfuscation with optimized \((I_{k}^{*}|l_{k})\)
```

**Algorithm 1** Deflected Distribution Positioning

Figure 5. Probabilistic optimization process

### Secure Greedy Response

Based on DDP proposed in Section 4.1, GEES now formulate a privacy-aware edge demand response strategy to solve the LEDR problem under geo-distortion. To address it, we propose a greedy-based mechanism named secure greedy response (SGR) for jointly maximizing user privacy, system utility and energy efficiency.

Given the NP-hardness of the problem, SGR employs a heuristic approach by consistently prioritizing user allocations with both the highest joint privacy and resource demands to the remaining available resources on nearby edge servers. Before introducing the details of SGR, key definitions are firstly detailed below:

Definition 6 (Dominant Resource Demands).: _Considering user \(u_{k}\) with her \(q\)-dimensional resource demand \(d_{k}=\{d_{k}^{1},...d_{k}^{q}\}\), the dominant resource demand \(d_{k}^{*}\) of \(u_{k}\) is the maximum proportion of required resources over the available resource of nearby edge servers formulated as:_

\[d_{k}^{*}_{rj d_{k}}^{q}}{_{s r,j(k)}r_{ j}^{q}} \]

Definition 7 (Doint Privacy-Energy Principle).: _Given edge server \(s_{j}\), its coverage radius \(c_{j}\), and the distance between the user's obfuscated location \(l_{k}^{*}\) and the inferred location \(}\), the joint privacy-energy rate is defined as:_

\[y_{j}_{rj d_{k}^{*},s_{j} J(})}  dist(},l_{k}^{*})+1) d_{k}}{b_{3} r_{j} c_{j}} \]

_Consequently, the joint energy-privacy principle will therefore select the server \(s_{j}\) with maximum \(y_{j}\) for responding._

The pseudo-code of SGR is presented in Algorithm 2. SGR starts with the initialization of unserved users \(=\{u_{1},...,u_{N}\}\) and edge servers \(=\{s_{1},...,s_{M}\}\) (Lines 1-3). SGR will first obtain users obfuscated locations through Algorithm 1 (Line 4). Next, SGR performs inferences and finds nearby edge servers based on the users' obfuscated locations \(l^{*}\) and sorts their resource demands \(=\{d_{1},...,d_{N}\}\) in decreasing order (Lines 5-6). After that, SGR iterates to formulate the edge demand response \(\) by allocating users to available edge servers following the joint privacy-energy principle until no feasible allocation decision updates such as all users are allocated or no sufficient resources to serve any unserved users (Lines 7-21). In each iteration, the algorithm first initializes allocation decision \(a_{k}\) as null (Line 9). Next, after checking the availability of nearby edge server based on \(u_{k}\)'s obfuscated location \(l_{k}^{*}\), SGR iterates to allocate unserved \(u_{k}\) to an available edge server \(s_{j}(s_{j}(l_{k}^{*}))\) based on the joint privacy-energy principle and update the remaining resources of \(s_{j}\) (Lines 10-14). After the iteration, the system information can be updated, including the available edge servers and remaining resources (Lines 15-18). Finally, \(\) is returned for implementation as the strategy of this LEDR problem (Lines 22-23).

```
1:initialization
2:set with unserved users \(=\{u_{1},...,u_{N}\}\) and available edge servers \(=\{s_{1},...,s_{M}\}\)
3:end initialization
4:obtain \(\{l_{1}^{*},...l_{k}^{*},l_{N}^{*}\}\) by Algorithm 1
5:obtain \(\{l_{1}^{*},...l_{k}^{*},l_{N}^{*}\}\) through inferences and find all the nearby edge servers \((})\) of each estimated \(}\)
6: sort users' demands in a decreasing order following dominant resource demands
7:repeat
8:for\(u_{0}\)do
9:\(a_{k}=(0,...,0)/\)\(/\)\(a_{k}^{*}=\{a_{1}^{*},...,a_{k}^{*}\}\)
10:if\((})\) and \(u_{k}\) is unserved then
11: find the most suitable edge server \(s_{j}\) based on the joint privacy-energy principle.
12: update \(a_{k}\) with \(a_{k} j\)
13: update \(s_{j}\)'s remaining resources with \(r_{j} r_{j}-d_{k}\)
14:endif
15:if\(r_{j} min\,d_{k}\)then
16:\(/s_{j}\)
17:endif
18: update the status of neighbor machines \((})\)
19:\(k k+1\)
20:endfor
21:until no decision updates or no sufficient resources
22:return\(=(a_{1},...,a_{N})\)
23: implement LEDR strategies \(\)
```

**Algorithm 2** Secure Greedy Response

### Theoretical Performance Analysis

DDP in Algorithm 1 consists of particle iteration and update processes. With \(I\) particles, DDP iterates \(T\) times for each user. During each iteration, every particle needs to update its mean and variance, calculate fitness, and perform comparisons. Therefore, the time complexity of Algorithm 1 is \(O(I T O(1))=O(I T)\)

In Algorithm 2, SGR aims to formulate a series of allocation strategies with a maximum of \(N\) iterations (Line 6). In each iteration, finding the optimal edge server for an individual user is \(O(M)\) since there are a maximum of \(M\) nearby edge servers for consideration (Line 9). Therefore, Algorithm 2 can formulate strategies within \(O(N M)\) time in the worst-case scenario.

The theoretical analysis of user privacy achieved by GEES can be found in Appendix C.

## 5. Evaluation

In this section, experiments are conducted to evaluate the performance of GEES in LEDR scenarios. Both the dataset and experiment codes used have been published2 for the validation and reproduction of experimental results.

### Experiment Settings

**Experiment Data:** Here, we synthesize a new dataset named EDR based on the information from AWS wavelength3, Alibaba Cloud4, and a real-world dataset EUA5, including edge server capacities, edge server coverages, edge server and user locations, server start-up and maintenance costs, etc.

**Implications:** To comprehensively analyze the performance of our approach in various MEC scenarios, we conduct a series of experiments, i.e., Set \(\#1\), with variations in four parameters: 1) the number of users \(N\), 2) the number of edge servers \(M\); 3) the privacy budget \(e\); and 4) weighted coefficients \(\), respectively. Moreover,we evaluate the performance of GEES in terms of system utility and energy efficiency when no privacy protection mechanism is applied in Set #2 to demonstrate the universality of GEES. In the default configurations, users are uniformly distributed within the area, where each user's personalized NPLS is divided into a 10x10 grid, with each \(10 10\) unit size. Additionally, the weights coefficients are set as \(_{2}=(0.25,0.5,0.25)\) by default. Table 1 provides an overview of the experiment configurations. We repeat experiments 15 times each time a setting parameter changes and report the average results.

### Benchmark Systems

To evaluate GEES, a state-of-the-art edge demand response approach called EESaver (Eksauer, 2016) is involved. EESaver aims to reduce energy consumption while maintaining efficient service provision in a greedy manner. However, EESaver focuses exclusively on tackling edge demand response issues, inadvertently neglecting user privacy concerns. For a fair comparison, EESaver is enhanced to **EESaver-D**, **EESaver-L** and **EESaver-G** with various privacy guarantees, i.e., DDP (in Section 4.1), Laplace (Luo et al., 2017) and Gaussian (Zhu et al., 2017), respectively. To further investigate the impact of various privacy guarantees, we also combine our SGR algorithm (in Section 4.2) with Laplace and Gaussian, i.e., **SGR-L** and **SGR-G**, in the experiments for comparison. Details of Laplace and Gaussian differential privacy can be found in Appendix D.

### System Effectiveness

Figure 6 demonstrates the performance of GEES in experiment Set #1.1, #1.2, #1.3, and #1.4 respectively, measured by the overall system score in Eq. (13). Different components of the scores in user privacy, system utility, and energy efficiency are presented individually to constitute the overall system performance. In general, the results show that _GEES consistently achieves the highest system performance in all cases_, and our SGR-based approaches, i.e., SGR-L and SGR-G, also outperform other approaches significantly across various experimental configurations and sets.

**Impact of system size**. In practical applications, ensuring scalability is of paramount importance. Thus, GEES must be able to scale with system size, including the number of users and the number of edge servers. With the increase in the number of users from 100 to 300 in Set #1.1, Figure 6(a) depicts that GEES significantly outperforms SGR-L, SGR-G, EESaver-D, EESaver-L, EESaver-G by 50.36%, 67.18%, 7.74%, 34.86%, 63.34% in terms of user privacy on average. This shows the superior performance of GEES in privacy preservation. In terms of system utility and energy efficiency, the performance of GEES reaches close to SGR-G, which achieves the highest system utility and energy efficiency. Notably, while the PSO-based EESaver (EESaver-P) approach ensures the second-highest privacy, its usability significantly lags behind GEES by large margins. With an increasing number of edge servers (Set #1.2), Figure 6(b) demonstrates that the overall system performance of all approaches increases from 10 to 25, and stabilizes when the number of edge servers exceeds 25. In addition, GEES continues to achieve the highest system performance, especially user privacy, with competitive system utility and energy efficiency.

**Impact of privacy budget**. Experimental results of Set #1.3 demonstrate the variations in the privacy budget \(\) from In2 to In10. Figure 6(c) depicts that user privacy achieved by all the approaches slightly decreases while the system utility and energy efficiency achieved by all the approaches increase, with the increase in the privacy budget \(\). Serving as a pivotal parameter in differential privacy, \(\) quantifies the intensity of privacy protection, where larger \(\) corresponds to weaker privacy levels. Consequently, as \(\) increases, the average user privacy decreases. Simultaneously, it grants the system greater flexibility in utilizing users' actual location, leading to better system utility and energy efficiency. Again, GEES achieves the highest user privacy and overall system performance. Comparatively, while the baselines can maintain relatively similar levels of privacy, their usability falls significantly short of GEES.

**Impact of weighted coefficients**. To evaluate the impacts of the weighted coefficients in Section 3.3.2, i.e., \(=\{b_{1},b_{2},b_{3}\}\), Set # 1.4 sets various combinations of those coefficients. As illustrated by Figure 6(d), under various configuration weights, GEES outperforms other comparison approaches again. Based on the analysis above, GEES has been proven to provide privacy protection for web users while maintaining satisfactory system utility and energy efficiency.

**Performance without privacy protection**. Now, we investigate the performance of GEES in scenarios without privacy protection in Sets #2.1 and #2.2. In this case, weighted coefficients are set to \(b_{1}=b_{3}=0.5\), as the privacy weight is \(b_{2}=0\). The experimental results are shown in Figure 7. In general, GEES still outperforms EESaver with significant margins without privacy protection. In

    & Users \(N\) & Edge Servers \(M\) & Privacy \(\)(ln) & Coefficients \(\) \\ 
**Set \#1.1** & 100, 150 \(\), 300 & 30 & 2 & \(_{2}\) \\
**Set \#1.2** & 150 & 10, 25 \(\), 70 & 2 & \(_{2}\) \\
**Set \#1.3** & 150 & 30 & 2 \(\), 10 & \(_{1}\) \\
**Set \#1.4** & 150 & 30 & 2 & \(_{1}\), \(_{2}\), \(_{3}\), \(_{4}\) \\
**Set \#2.1** & 100 \(\), 300 & 30 & NA & \(_{3}\) \\
**Set \#2.2** & 150 & 10 \(\), 70 & NA & \(_{3}\) \\ 
**where \(_{1}=(0.50,0.25,0.25)\), \(_{2}=(0.25,0.50,0.25)\), \(_{3}=(0.25,0.50)\), \(_{4}=(0.33,0.33,0.33)\), and \(_{5}=(0.50,0.00,0.50)\).** \\   

Table 1. Parameter Settings

Figure 6. System effectiveness with geo-obfuscation

Figure 7. System effectiveness without geo-obfuscation

Figure 7, as the number of users rises from 100 to 300, GEES consistently outperforms the EESaver in a stable way, with from 4.14% to 33.73% higher in the system performance. With the increase in the number of edge servers from 10 to 70, the system performance of both GEES and EESaver increases. Specifically, the system performance of GEES is 16.28% higher than that of EESaver when \(M\) is 10. Apparently, even in LEDR scenarios without privacy consideration, GEES can still achieve higher performance, compared to the state-of-the-art approach.

### System Overhead

As discussed in Section 1, achieving low latency is a primary goal of MEC. Consequently, the system overhead is an important metric to evaluate the performance of GEES, as LEDR strategies must be swiftly formulated to guarantee real-time service. Here, the system overhead is measured by the time taken to formulate LEDR strategies. Figure 8 shows the computation time taken by different approaches to formulate LEDR strategies. GEES and SGR-based approaches introduce an overhead of less than 0.2 seconds while EESaver-based approaches take around 1 second. Specifically, as the number of users rises from 100 to 300 in Figure 8(a), the computation time of GEES increases from 0.11s to 0.34s, and the SGR-based approaches maintain relatively lower computation times among these approaches. On the other hand, the EESaver-based approaches show a steep increasing trend from 0.64s to 1.59s. As the number of servers increased from 10 to 70 in Figure 8(b), the results exhibit a similar pattern, with the computation time changing from 0.07s to 0.34s for GEES and from 0.38s to 1.87s for EESaver-based approaches on average. Figure 8(c) demonstrates the computation time when the privacy budget increases. Moreover, the system overheads of all the approaches remain stable, while GEES consistently outperforms the EESaver-based approaches by 0.73s faster on average. Meanwhile, GEES demonstrates lower computational time across different sets of weight coefficients in Figure 8(d).

Based on the analysis above, among all the approaches, GEES is proven to solve the LEDR problem effectively and efficiently.

## 6. Related Work

### Edge Demand Response

The proliferation of Multi-access Edge Computing (MEC) has opened a number of research topics, including edge-assisted federated learning (Yang et al., 2017), edge user allocation (Kumar et al., 2017; Wang et al., 2017) and edge data caching (Zhu et al., 2017; Wang et al., 2017; Wang et al., 2017). However, MEC faces new challenges in optimizing resource allocation in dynamic environments with the concerns of both the user privacy guarantee and the energy consumption. Recently, researchers start paying attention to energy saving in MEC. Chen et al. (Chen et al., 2018) propose an online auction mechanism via cloudlet control to optimize energy allocation and resource utilization. This approach solely takes into account the status of cloudlets, however, its scalability is limited by addressing resource constraints separately in real-world scenarios. Edgedr (Zhu et al., 2018) surpasses the primary constraints above by granting the flexibility to control the energy consumption of each server individually. In pursuit of heightened performance and utility in MEC, Cui et al. (Cui et al., 2018) propose EESaver, a mechanism to reduce energy consumption while maintaining good system performance. However, EESaver falls short of addressing the growing privacy concerns of users in the MEC environment. In fact, there still exists a research gap to explore the privacy and energy issues in edge demand response.

### Location Privacy

Location privacy preservation has emerged as a critical concern in order to adapt for location-sensitive applications, such as mobile crowdsensing (MCS) (Wang et al., 2017; Wang et al., 2017) and local business service systems (LBSST) (Wang et al., 2017). Cloaking (Wang et al., 2017; Wang et al., 2017) and homomorphic encryption (Wang et al., 2017; Wang et al., 2017) have been widely used in practice for protecting location privacy due to their feasibility. Regrettably, such methods might lead to significant location distortion and overhead in MEC with high latency, thereby compromising service quality. Meanwhile, the aforementioned methods are also sensitive to the adversary's prior knowledge. To mitigate this concern, more studies are involving differential privacy methods to protect location privacy. Wang et al. (Wang et al., 2017) introduce a new framework for task allocation in MCS, which integrates differential geo-obfuscation to safeguard participants' location privacy while optimizing worker travel distance. Yu et al. (Yu et al., 2017) investigate a personalized error-bounded dynamic differential location privacy mechanism to defend privacy leakage against Bayesian adversaries. In this paper, we leverage the advantages of differential privacy in the LEDR problem, aiming to ensure user privacy while maximizing system utility and energy efficiency.

## 7. Conclusion

This paper investigates the location privacy-preserving edge demand response (LEDR) problem. To tackle the LEDR problem systematically and theoretically, we propose a novel system, named GEES, to optimize the geo-obfuscation and edge demand response strategies collectively. GEES leverages differential geo-obfuscation to protect users' location privacy, simultaneously ensuring system utility and energy efficiency. GEES is verified via extensive experiments against representative approaches under various privacy mechanisms. Experimental results demonstrate that GEES outperforms other mechanisms with superior performance on user privacy, system utility, and energy efficiency. As part of our future work, we will delve into the potential vulnerabilities of GEES and explore corresponding defense mechanisms.

Figure 8. System Overhead