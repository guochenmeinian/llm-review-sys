# Making Cloud Spot Instance Interruption Events Visible

Anonymous Author(s)

###### Abstract.

Public cloud computing vendors offer a surplus of computing resources at a cheaper price with a service of spot instance. Despite the possible great cost savings from using spot instances, sudden resource interruption can happen as resource demand changes. To help users estimate cost savings and the possibility of interruption when using spot instances, vendors provide diverse datasets. However, the effectiveness of using the datasets is not quantitatively evaluated yet, and many users still rely on hunch when choosing spot instances. To help users lower the chance of interruption of the spot instance for reliable usage, in this paper, we thoroughly analyze various datasets of the spot instance and present the feasibility for value prediction. Then, to measure how the public datasets reflect real-world spot instance interruption events, we conduct real-world experiments for spot instances of AWS, Azure, and Google Cloud. Combining the dataset analysis, prediction, and real-world spot instance interruption experiment result, we show the feasibility for lowering the possibility of interruption events significantly.

cloud computing, spot instance, interruption modeling, enhancing reliability, spot instance datasets +
Footnote †: ccs: Information systems Web log analysis

+
Footnote †: ccs: Information systems Web log analysis

+
Footnote †: ccs: Information systems Web log analysis

+
Footnote †: ccs: Information systems Web log analysis

+
Footnote †: ccs: Information systems Web log analysis

+
Footnote †: ccs: Information systems Web log analysis

+
Footnote †: ccs: Information systems Web log analysis

+
Footnote †: ccs: Information systems Web log analysis

+
Footnote †: ccs: Information systems Web log analysis

## 1. Introduction

The cloud computing provides compute resources elastically without the burden of system operation overhead and changes the way we consume compute resources. The core success of the cloud computing is owing to its on-demand billing model that allows users to dynamically start and stop instances based on its application needs and pay for what they have actually used. To support elastic resource usage, cloud service providers should prepare abundant resources to meet resource usage spikes. Such a plentiful resource preparation inevitably results in resource wastage when computing demand is low. To encourage instance usage when demand is low, public cloud vendors provide the surplus computing resources at a discounted price which can be more than 90% cheaper than the on-demand price in some cases. The billing model is called spot instances, and they are offered by most public cloud service providers, AWS (Bogu et al., 2017), Azure (Azure, 2017), Google Cloud Platform (GCP) (Alibaba, 2017), Oracle Cloud Preemptible Instances, and IBM Transient Virtual Servers. Due to the cost efficiency of spot instances, they are widely used for diverse applications, such as web server, data processing, and parallel processing batch jobs.

In the early days of spot instance offering, most vendors adopted an auction mechanism where a user sets a bidding price, and a provider sets a spot price. If the bidding price is higher than the spot price, a user gets granted an instance and pays for the spot price, not the bidding price. Based on the compute resource demands, a service provider changes the spot price, and if the spot price becomes higher than the initial bidding price, a spot instances is revoked, which is generally referred to as instance interruption. Such an instance interruption can negatively impact applications' reliability, and users should be prepared for the event. To help users enhance reliability when using spot instances, cloud vendors provide diverse datasets publicly through web. One of the most representative datasets is the spot instance price that presents the spot price at a specific time. Many research was conducted using the spot instance price dataset to analyze the spot price itself (Bogu et al., 2017; 2017; 2017; 2017; 2017; 2017), using the spot instance dataset to enhance reliability for diverse applications (Bogu et al., 2017; 2017; 2017; 2017; 2017; 2017), or suggesting an optimal bidding price using the spot price prediction (Bogu et al., 2017; 2017; 2017; 2017; 2017).

The spot price dataset was a precious source of information when using spot instances reliably especially for AWS, but it changes with the new spot instance operation policy. With the new policy, the advertised spot price does not reflect the spot instance interruption anymore, and the frequency of the data change becomes very low (Bogu et al., 2017; 2017) which greatly degrades the application of the dataset and invalidates the outcome from the prior research. Meanwhile, new data sets of spot instances are released on the web to help users build a reliable resource pool of spot instances (Bogu et al., 2017). The new datasets include the interruption ratio over the prior month dataset provided by Azure and AWS, and the instant availability information provided by AWS. The new datasets can be of great help for spot instance users as they provide the historical interruption ratio and instantaneous availability information. However, thorough investigation of the newly provided datasets has not been conducted yet, and quantitative evaluation about the correlation of the dataset and the spot instance interruption has not been carried out yet. Given that sudden spot instance interruption is a major hurdle when adopting a spot instance as a main compute resource pool, it is crucial to estimate the likelihood of a spot instance to be interrupted at least in the near future. However, predicting future spot instance interruptions or building a statistical model for interruption behavior can be very challenging from outside of cloud service vendors' view.

To quantitatively evaluate and model spot instance interruption events, one should know when the interruption events happen for diverse instance types that are located in global regions and availability zones. The service providers may have such records, but the information is not publicly available. For example, Yang et. al. (Yang et al., 2017) proposed a spot instance interruption prediction model for Azure spot instances by using the internal dataset of interruption records that are not publicly available, and it limits the development of publicly available research outcomes. To model spot instance interruption events without proprietary information, SciSpot (Zhu et al., 2017) and Pham et. al. (Pham et al., 2017) conducted real-world experiments to observe spot instance interruption events by simply running spot instances until an interruption happens for GCP and AWS, respectively. Even after gathering the interruption event experiment results, without knowing the internal mechanism of spot instance operations, it can be challenging to select features that really impact the interruption events. In case of AWS spot instances, the spot price was a good feature for the interruption prediction, but it is not valid anymore after the operation policy change (Zhu et al., 2017; Zhang et al., 2017).

Based on the observation that the prediction and modeling of spot instance interruption events is challenging even with the newly released spot instance datasets available on the web, we first analyze the characteristics of the spot price, prior period interruption ratio, and instant availability dataset that are provided by AWS, Azure, and GCP where applicable. To validate whether the public datasets reflect the real behaviors of spot instance interruptions and compare spot instance reliability of multiple vendors, we conducted spot instance interruption tests for AWS, Azure, and GCP. Based on the public dataset analysis and real-world spot instance interruption experiment result, we argue that precise prediction of instant spot instance availability dataset value can lower the probability of spot instance interruption and confirm the argument quantitatively. Overall, we conclude that spot instances offered by Azure showed the highest reliability followed by GCP and AWS. Though AWS showed the lowest reliability, we find out that the dataset provided by AWS is really helpful to conjecture spot instance reliability. By using a proposed dataset value predictor, the spot instance running time of AWS can increase by 63.2% for initially high score instances and by 168% for instances with initially low score.

In summary, major contributions of this paper is as follow.

* Comparing spot instance reliability of AWS, Azure, and GCP. To the authors' best knowledge, this is the first work to compare the spot instance reliability of multiple vendors.
* Thorough analysis of the new spot instance datasets including price, interruption ratio, and availability, to discover correlations with the spot instance interruptions
* Proposing a spot instance dataset value prediction model to enhance spot instance reliability
* Proposing a general guidance when using spot instances in a multi-cloud environment

Section 2 discusses publicly available spot instance dataset, and Section 3 analyzes various spot instance datasets provided by AWS, Azure, and GCP. Section 4 proposes a model to predict instant availability dataset and evaluates the model quality. Section 5 evaluates how the spot instance dataset distribution is correlated to real interruption behavior and presents the practicality of dataset value prediction to enhance spot instance reliability.

## 2. Cloud Spot Instance and Datasets

When using spot instances, the cost saving ratio over the on-demand instance and the reliability of a spot instance are the most important metric for most users. To help users estimate the benefit and risks when using spot instances, the cloud vendors provide various datasets; the spot instance price dataset from the beginning and the more recent interruption ratio and instant availability information dataset.

### Depreciation of Price Dataset

Since the introduction of the spot instance service in 2009, the spot price dataset is publicly available in the web and triggered many research from various perspectives. Statistical analysis of the spot instance price dataset was performed in a comprehensive way (Bauer et al., 2015; Li et al., 2016; Li et al., 2016; Li et al., 2016; Li et al., 2016; Li et al., 2016; Li et al., 2016; Li et al., 2016; Li et al., 2016). Other works focused on proposing an optimal bidding price to reduce the risk of instance interruption (Li et al., 2016; Li et al., 2016; Li et al., 2016; Li et al., 2016; Li et al., 2016; Li et al., 2016; Li et al., 2016). Another type of work focused on running various applications on spot instances reliably using spot instance price datasets, such as web server (Li et al., 2016), big data processing (Li et al., 2016), deep learning training (Li et al., 2016; Li et al., 2016) and inference (Li et al., 2016), batch processing (Li et al., 2016; Li et al., 2016), and scientific high-performance computing applications (Li et al., 2016). Other works are carried out using a dataset from other vendors, Azure (Yang et al., 2017; Li et al., 2016), GCP (Li et al., 2016; Li et al., 2016), and Alibaba cloud (Li et al., 2016).

One of the reasons that many research was conducted using AWS spot instance and its price dataset is owing to its dynamically changing price patterns, which reflect the spot instance interruption events very well. By comparing the advertised spot price and bidding price, a user can easily conjecture the interruption possibility. However, modeling spot instance interruption using a price dataset becomes impossible since the spot instance operation policy change (Zhu et al., 2017; Zhang et al., 2017). With the new change, the spot price does not change as often as before. More importantly, the spot price does not indicate an instance interruption; though the advertised spot price is lower than a bidding price, an interruption can still happen. The operation policy change makes the AWS spot instances similar to other vendors' spot instances which implies the spot price rarely changes, and it makes most of the previous research that relied on the spot price datasets becomes useless.

### Appreciation of Availability Dataset

As the usefulness of spot price dataset decreases from the perspective of inferring spot instance reliability, the service vendors started to provide new types of datasets related to instance availability. AWS and Azure provide the ratio of interruption of an instance in the prior time frame, e.g., 30 days. The dataset classifies interruption ratios to five categories, less than 5%, between 5% and 10%, between 10% and 15%, between 15% and 20%, and more than 20%. By using the dataset of previous interruption rate, users are expected to infer spot instance's future reliability.

Different from the interruption ratio dataset which simply provides the statistics from the previous period, AWS provides a new data set called Spot Placement Score (SPS). The vendor did not disclose the internal detail of how the score is calculated, but it is known to present a timely spot instance's availability. In the SPS, a type of spot instance is assigned an integer score ranging from one to three; the higher score implies more availability.

## 3. Spot Instance Dataset Characterization

To better understand characteristics of different spot instance datasets, we present empirical analysis result of publicly available spot instance datasets which can be accessed from the web. We could access the spot price dataset of AWS, Azure, and GCP. For the spot instance interruption ratio dataset, we get datasets from AWS and Azure. For instant availability information, we get the AWS SPS dataset. In the analysis, datasets from 1 November 2022 to 31 August 2023 were used.

Figure 1 shows the Cumulative Distribution Function (CDF) of spot instance dataset. Figure 1(a) compares the savings ratio, which is calculated as \((1.0-) 100\), of AWS, Azure, and GCP. Figure 1(b) compare the the prior period's instance interruption ratio of AWS and Azure. Both vendors provide the dataset with values in the range of five categories, and we match each category to a numeric value between 1.0 and 3.0 increments by 0.5. The most frequent interruption ratio of more than 20% is matched to 1.0, and the least value of less than 5% is matched to 3.0. We name the converted value as _interrupt-free score_. Figure 1(c) presents the distribution of the instant availability dataset provided by AWS. We use the SPS dataset with the provided score range. To distinguish vendors, we use yellow-solid, blue-dotted, and green-dashed lines to indicate AWS, Azure, and GCP, respectively. In the figures, the vertical axis shows the distribution, and the horizontal axis shows the score. For all three sub-figures, the large score means the better and more reliable status.

In the figures, it is apparent that AWS has the least cost savings (Figure 1(a)) and a higher spot instance interruption ratio (Figure 1(b)). The GCP provides only the price dataset, and it shows higher median cost savings ratio than AWS. Regarding the interrupt-free score, the median score of AWS is around at 2.5 which means the interruption ratio between 5% and 10%, while that of Azure is around at 3.0, which is less than 5%. Only AWS provides the instant availability information, and we can observe that most of spot instances have been allocated near 3.0 point which is the best score.

Figure 2 shows the temporal change pattern of three spot datasets averaged for all gathered instance types in each sub-figure. Figure 1(a) compare the spot instance savings ratio, and we can observe that regardless of the vendors, savings value rarely changes over time.

Figure 1. Spot instance dataset value distribution from multiple vendors

Figure 2. Spot datasets that have been changed during the observation period

The low frequency of price change of AWS spot instance concurs to the prior work that analyzed the recent AWS spot instance behavior change (Bahdanau et al., 2017; Zhang et al., 2018). Figure 2b presents the temporal change pattern of interrupt-free score. Similar to cost savings, both AWS and Azure do not show noticeable change over time. Figure 2c presents the temporal change pattern of AWS SPS dataset. Different from the cost savings and interruption dataset, the SPS dataset shows a sinusoidal periodic pattern for different days. From the analysis, we can uncover the unique and noticeable change pattern of SPS that intrigues further research and analysis. Please note that the range of vertical axis is different for distinct dataset. We closely observed the pattern of savings and interruption-free score in a small scale but could not find a pattern similar to SPS.

To further analyze the pattern of SPS value change, Figure 3a shows SPS values averaged over an hour of a day. In the analysis, we used globally located resources in multiple regions and used the local time zone of each availability zone. From the figure, we can discover that the SPS is lower in the morning around at 9, 10, and 11. Then, the SPS gradually increases and reaches its maximum at night which is the time that cloud usage is expected to be low. To see if the SPS value change has a weekly pattern, Figure 3b presents the average SPS value by day which is shown in the horizontal axis. We can observe that the SPS value is higher on weekends and lower on week days. Please note that we analyzed the spot price and interruption ratio similarly, but we could not observe a noticeable pattern.

We could observe more frequent and periodic data update pattern of AWS SPS dataset. To further analyze how often spot instance dataset changes, Figure 4 shows the CDF of data change frequency. The vertical axis shows the distribution, and the horizontal axis shows how long a value remains unchanged. The larger value, which is located at the right side of the figure, implies that a value does not change for a longer period of time. In the figure, the distribution of all the datasets are presented. Among them, AWS SPS with a yellow solid line with triangle markers shows the most frequent update compared to other dataset. For cost savings dataset, we assume that a cost saving value has changed when the ratio has increased or decreased more than 3%.

From the various spot instance dataset analysis, we could uncover that spot instances from **Azure and GCP show relatively higher cost savings than AWS**. The **interruption ratio of AWS is higher than that of Azure**. Only the **AWS SPS dataset shows a pattern of daily and hourly change**. The values of **AWS SPS changed frequently**, and the change frequency of other datasets are longer than a day.

## 4. Predicting Spot Instance Dataset Change

When using spot instances, the prediction of future interruption events and probability estimation can be of great help to improve reliability. To achieve the goal, it is important to discover appropriate features that correlate with the interruption events. The analysis of the spot instance dataset reveals that the price and interruption ratio information has little change over time, while the instant availability information of AWS SPS changes often and regularly. Considering the recent research outcomes about spot instance price (Bahdanau et al., 2017; Zhang et al., 2018; Zhang et al., 2018), the spot price information has little correlation with the spot instance interruption. The spot instance interruption ratio presents the prior 30 days of interruption statistics, and it can be far from predicting the future availability. In this context, we propose a model to predict the instant availability dataset expecting that the precise prediction can help to improve spot instance reliability, which will be evaluated later.

### Modeling Instant Availability Dataset

The instant availability dataset prediction model uses the prior period's SPS as input features and predict future SPS values. Formally speaking, the input dataset and features of \(\) are composed of \(N\) distinct instance types in different availability zones, which is the unit of the distinct SPS being provided, and \(D\) features which represent an SPS value at different timestamp. Assuming that data collection of SPS dataset occurs with a period of \(p\) minutes, we can use the previous \(D\) collected dataset for training, which means that we use

Figure 4. The CDF of value change frequency. The SPS dataset provided AWS shows the most frequent data update

Figure 3. The change pattern of instant availability dataset shows a strong hourly and daily change pattern

datasets collected in the last \(D p\) minutes. Similarly, the target dataset to predict is noted as \(Y\) that has \(N\) distinct instance types and next \(K\) SPS values to predict. \(x_{id}\), where \(i=1:N,d=1:D\), means the \(i\)-th instance type and \(d\)-th index SPS value, and \(y_{ik}\), \(i=1:N,k=1:K\), means the \(i\)-th instance type and \(k\)-th index SPS. The train dataset is defined as follow.

\[\{(x_{id} y_{ik})|(x_{id},y_{ik})\{1,2,3\}\} \]

Each value of \(x_{id}\) and \(y_{ik}\) takes one of \(\{1,2,3\}\) that is a possible SPS value. In defining training dataset, we need to decide how many previous measured datasets to use, which is \(D\), and how many future dataset to predict, which is \(K\). Our thorough empirical analysis reveals that the selection of \(D\) and \(K\) do not have much impact to the overall prediction accuracy (Figure 5).

### Accuracy of Availability Dataset Predictor

Using the train dataset, \(\), in equation 1, we apply diverse classification models of Linear Regressor (LR) (Zhu et al., 2017), Random Forest (RF) classifier (Zhu et al., 2017), XGBoost (Chen and Guestrin, 2016), Support Vector Classifier (SVC) (Chen and Guestrin, 2016), Prophet (Zhu et al., 2017), and ARIMA (Chen and Guestrin, 2016). Table 1 compares the F1 score for different prediction models to evaluate both precision and recall (Zhu et al., 2017). In the train, we used the SPS dataset from 16 July 2023 to 31 July 2023. For testing, we used the dataset from 1 August 2023 to 6 August 2023 which is exclusive to train dataset period. We divide the test dataset in half and used the prior half period as the model's input. Of the later half dataset, we variate the prediction period, \(k\), to the next \(3,6,12,24,48,72\) hours, and they are shown in the columns.

We can discover that most models show decent prediction quality. Among them, the XGBoost shows the best result, and we use them in the following descriptions.

Figure 5 shows the heatmap of F1-score of a SPS prediction model built by using XGBoost with respect to different input time window (the horizontal axis) and the different output time window (the vertical axis) presented in hours. In the figure, lighter region implies higher F1-score. As we can see from the figure, regardless of the input and output time window, the F1-score shows consistently high scores except when predicting further future (72\(H\)) using only recent values (3\(H\)).

Figure 6 presents the feature importance which is extracted from a built XGBoost model. The vertical axis shows the importance of each feature, and the horizontal axis shows the index of time-series feature. The lower index number implies more recent dataset. As shown in the figure, recent values dominate the feature importance, where till 24 hours takes 79% of total importance.

## 5. Evaluation

This section evaluates the effectiveness of a heuristic to improve the reliability of the spot instance through a detailed analysis of spot instance interruption events. More specifically, we would like to answer the following research questions.

**RQ-1** For spot instances offered by major public vendors, which vendor provides the most reliability with respect to the interruption?

**RQ-2** Of many spot instance datasets, which dataset is most correlated with spot instance interruption?

**RQ-3** Can the prediction of SPS value lower the chance of spot instance interruption?

### Spot Instance Interrupt Analysis

We first compare the interruption behaviors of multiple cloud vendors (**RQ-1**). To examine interruption events, we conducted real-world experiments by running a spot instance until an interruption event happens. We choose 875 distinct instance types in AWS, Azure, and GCP located globally. When choosing arbitrary instance types, we try to distribute evenly for different values in the cost savings, interruption ratio, and instant availability datasets. The

    & 3H & 6H & 12H & 24H & 48H & 72H \\  LR & 0.96 & 0.97 & 0.98 & 0.97 & 0.97 & 0.96 \\ RF & 0.96 & 0.98 & 0.98 & 0.98 & 0.97 & 0.97 \\ XGboost & 0.97 & 0.99 & 0.98 & 0.98 & 0.97 & 0.97 \\ SVC & 0.96 & 0.97 & 0.97 & 0.98 & 0.96 & 0.96 \\ Prophet & 0.96 & 0.96 & 0.97 & 0.98 & 0.97 & 0.97 \\ ARIMA & 0.95 & 0.95 & 0.97 & 0.97 & 0.96 & 0.96 \\   

Table 1. F1-score of various models for SPS prediction

Figure 5. Heatmap of F1-score for XGBoost for modeling with respect to different input and prediction output time window

Figure 6. The importance of features when building a SPS prediction model

experiments had been conducted for 24 hours for each instance types. When an interruption event happens, we mark the event and keep requesting the spot instance until it fulfills again.

To quantitatively compare the survival rate of the spot instances, the probability that a spot instance remains running, we applied the Kaplan-Meier Estimator  which is a non-parametric statistic to estimate the survival rate of a lifetime dataset. It is generally used in the hospital environment to measure the fraction of people who live after treatment or the length of time people remain unemployed after losing a job . Based on the general usage of the statistic, applying it to model spot instance survival probability is well suited. Kaplan-Meier Estimator is calculated as follows.

\[(t)=_{i:\ t t}(-d_{i}}{n_{i}})\]

The survivor function (\((t)\)) at time \(t\) is defined as the probability a life time (spot instance running time) is longer than \(t\). \(n_{i}\) is the number of survived individuals (running spot instances) until time \(t_{i}\), and \(d_{i}\) means the number of deaths (spot instance interruption) at time \(t_{i}\).

Figure 7 compares \((t)\) of AWS, GCP, and Azure. In the figure, the horizontal axis shows the spot instance running time (survival time), and the vertical axis shows the distribution. The yellow-solid, green-dashed, and blue-dotted lines present the distribution of AWS, GCP, and Azure respectively. From the figure, it is evident that the AWS shows the lowest survival rate followed by GCP and Azure. The median running time of AWS spot instance is 1.2 hours, and over the half of GCP and Azure instance did not experience interruption during the 24 hour experiments. The shortest \(P90\) running time of AWS, GCP, and Azure is 0.02, 0.5, and 5 hours, respectively.

Next, we assess the correlation of various spot instance datasets and the interruption events (**RQ-2**). Figure 8 compares Kaplan-Meier estimator distribution of AWS experiment result grouped by different spot instance dataset. Figure 7(a) compares survival time distribution with respect to different interrupt-free score, and Figure 7(b) compares with respect to SPS scores. For both datasets, the higher score implies the higher availability. The scores of _Low_ (1.0), _Medium_ (2.0), and _High_ (3.0) are presented with solid, dashed, and dotted lines, respectively. From both figures, we can observe that higher score values shows higher survival rate than lower score values. We omit the figures of savings for AWS, Azure, GCP, and interrupt-free score for Azure because they do not show a noticeable pattern as AWS interrupt-free score and SPS do.

So far, we have analyzed the spot instance survival time. Next, we will analyze using a different metric. Figure 9 compares the elapsed time between a spot instance interruption start and the node becomes fulfilled again. The shorter time implies that a spot instance is becomes available again shortly after an interruption happens which means a higher availability. Sub-figures group instances according to the spot instance dataset. In each figure, the yellow-solid, blue-dotted, and green-dashed lines indicate the result from AWS, Azure, and GCP, respectively. In each line, we mark a symbol of \(\) for _High_ and \(\) for _Low_ value after categorization.

The cost savings ratio dataset (Figure 8(a)) does not show a noticeable difference among _High_ and _Low_ values for all AWS, Azure, and GCP. GCP and Azure show a similar latency distribution, while that

Figure 8: Kaplan-Meier Estimator to compare the probability of spot instance survival rate with respect to different spot instance datasets

Figure 7: Kaplan-Meier Estimator analysis to infer the probability of spot instance survival rate. Azure shows the best reliability followed by GCP and AWS.

of AWS shows much less availability than the others. Regarding the interrupt-free score (Figure 8(b)), Azure did not show a different pattern between _High_ and _Low_ values, but AWS shows a distinct pattern that follows the advertised score. The high interrupt-free score of AWS spot instances show faster fulfillment time after an interruption. The instant availability data (Figure 8(c)) shows a noticeable difference between _High_ and _Low_ that the higher SPS value shows much lower latency for a fulfillment after an interruption (higher availability), and it follows the advertised score characteristic very well.

### Effectiveness of Instant Availability Dataset Prediction

We have discovered that the spot instance instant availability dataset provided by AWS SPS dataset is beneficial to model spot instance interruption events and availability. To go one step further and answer **RQ-3** of whether predicting future SPS value can help to increase to predict chances of spot instance interruption, we compare the distribution of spot instance interruption with different values of SPS prediction in Figure 10. The vertical axis shows distribution, and the horizontal axis presents the spot instance running (survival) time. Figure 9(a) presents the life time of spot instances whose SPS value is high (3.0) when a spot instance request is made. The SPS value can change over the course of experiment, and we categorize the predicted SPS values in a bin size of 0.5. The dotted line shows when the average predicted SPS value is 3.0, which means SPS value is expected to remain constant at the high value. A dashed-dotted line indicates when the expected SPS average is higher than 2.5 but lower than 3.0. The other lines are expressed in a similar way. From the figure, we can discover that despite the same initial high SPS value of 3.0, ignorant of future SPS value can significantly hurt the reliability of a spot instance. For instance, the median spot instance survival time when the predicted SPS is high is 22 hours, but that of lower predicted SPS value is 16 hours.

Figure 9(b) shows the survival time of spot instances whose initial SPS value is low, 1.0. Similarly, the SPS can value can fluctuate, and we show the running time by grouping instances by the predicted SPS values. The solid line presents when the SPS value is expected to keep staying low at 1.0, and it shows very short running time. Otherwise, even if the initial SPS value is low, instances with a higher expected SPS values show higher survival time. For instance, the median running time of spot instance whose SPS is expected to be consistently at 1.0 is 0 hours, while that of SPS being expected to be between 2.0 and 2.5 turns out to be about 8 hours. This finding is especially helpful when a user has a limited list of spot instance types, and their initial SPS is low. In that case, the prediction of SPS can greatly improve the reliability of the spot instance, though its current SPS is low.

In summary, we can answer research questions raised before as follow.

**RQ-1** For spot instances offered by major public vendors, which vendor provides the most reliability with respect to the interruption? **Answer** : The spot instance of Azure showed the most reliability followed by GCP and AWS.

**RQ-2** Of many spot instance datasets, which dataset is most correlated with spot instance interruption? **Answer** : AWS SPS dataset shows the highest correlations with the spot instance interruption. The cost savings and interrupt-free score do not show as high correlation as AWS SPS does.

**RQ-3** Can the prediction of SPS value lower the chance of spot instance interruption? **Answer** : Yes, the prediction of SPS dataset can definitely help to increase the spot instance reliability. When the initial SPS value is high, selecting an instance whose predicted value is consistently high can increase the expected spot instance running time by 63.2%. Even when the initial SPS value is low, selecting spot instances with higher expected SPS value can increase the expected spot instance running time by 168%.

Overall, the spot instance datasets offered by Azure and GCP are not really useful when choosing appropriate instance types. However, the spot instance reliability of Azure and GCP is relatively high, and users may experience lower interruption regardless of instance selection. The spot instance offered by AWS shows the most interruptions. However, the spot instance datasets provided by AWS reflects the spot instance interruptions very well. Thus, different from Azure and GCP, when using a spot instance from AWS, users should be more cautious to choose appropriate instance type for reliable execution.

## 6. Related Work

**Characterizing Spot Instance Dataset** : **Modeling and Using Spot Instance Dataset** : From the inception of the spot instance,

Figure 9. A CDF of latency until a request becomes fulfilled for AWS, Azure, and GCP spot instances categorized by different dataset values of High (\(\)) and Low (\(\)). The lower latency implies the higher availability.

the spot price dataset is widely used and analyzed to enhance reliability of spot instances. There were attempts to characterize the price dataset of the spot instance and relate the analysis to the spot instance interruption to decrease chances of interruption (Song et al., 2016; Wang et al., 2016; Wang et al., 2016; Wang et al., 2016; Wang et al., 2016; Wang et al., 2016; Wang et al., 2016; Wang et al., 2016). Using the spot price and analysis result, Ali-Eldin et. al. proposed to deploy a web-server (Bowman et al., 2016), Son et. al. proposed DeepSpotCloud (Song et al., 2016) for DNN training tasks using GPU spot instances located globally. SeeSpotRun (Wang et al., 2016) for Hadoop (Hadoop, 2016) MapReduce (Hadoop, 2016), Flint (Fint et al., 2016) and Tr-Spark (Song et al., 2016) for Apache Spark (Song et al., 2016) are proposed for big-data processing. Online web services (Bowman et al., 2016; Wang et al., 2016), batch processing jobs (Wang et al., 2016; Wang et al., 2016), and parallel processing of independent tasks (Song et al., 2016) while mitigating straggler effect due to transient servers (Bowman et al., 2016) are proposed. The aforementioned work relied on spot price dataset and the work becomes obsolete due to the spot instance operation change (Bowman et al., 2016; Wang et al., 2016). The findings in this paper provide a new opportunity of enhanced spot instance reliability through instant availability dataset prediction without relying on spot price dataset. By selecting spot instances that are likely to be more available in the future by using the dataset prediction module, the application of spot instance can be further expanded.

**Spot Instance Price Prediction** : We showed that predicting the spot instance instant availability dataset is predictable using a machine learning classifier model with decent performance. Before this work, there are attempts to predict spot price value to predict future cost savings and interruption events. Khandelwal et. al (Khandelwal et al., 2016) used the Random Forest, Fabra et. al (Fabra et al., 2016) used a deep neural net model, and Alkhairif et. al (Alkhairif et al., 2016) used various time-series analysis statistical methods for price prediction. Due to the spot price operation policy change (Bowman et al., 2016; Wang et al., 2016), the previous work becomes obsolete, and new approaches, as this paper does, should be provided.

**Analyzing Spot Instance Interruption** : Compared to the analysis of the spot price dataset, the analysis and experiments of spot instance interruption and correlating it with the spot instance dataset were not conducted much. Pham et. al. (Pham et al., 2016) and Lee et. al. (Yang et al., 2016) conducted spot instance interruption experiments for only AWS instances to analyze the interruption pattern. For Azure, Yang et. al. (Yang et al., 2016) proposed a spot instance interruption prediction model based on a Transformer model by using internally available interruption trace of Azure. For GCP, Haugerud et. al. (Haugerud et al., 2016) and Kadupitiya et. al. (Kadupitiya et al., 2016) conducted interruption tests to model the behavior. To the best of the authors' knowledge, this paper is the first work to conduct spot instance interruption experiments for three major vendors of AWS, Azure, and GCP. Comparing the spot instance behavior can greatly help users to choose the most appropriate spot instances in a multi-cloud environment that is deemed to be widely adopted (Hadoop, 2016; Wang et al., 2016; Wang et al., 2016).

## 7. Conclusion

Cloud spot instances provide significant cost savings when using cloud resources with the risk of sudden instance termination. To help users better utilize spot instance, public service vendors provide diverse spot instance datasets, such as price, interruption ratio in the past period, and the instant availability information. Despite the diverse publicly available information, they are neither widely used nor analyzed except the spot price dataset which is really irrelevant to the spot instance interruption and reliability. To handle this issue, this paper thoroughly analyzes characteristics of various spot instance datasets and proposes a model to predict instant availability dataset to enhance reliability. To uncover the relationship of publicly available dataset and the spot instance interruption behavior, we conducted real-world experiments for the spot instance interruptions in the AWS, Azure, and GCP cloud. We discovered that the Azure spot instance shows the highest reliability, followed by GCP and AWS. Though AWS showed the worst reliability, we discovered that the instant availability dataset offered by AWS can be helpful to predict interruption events in the near future which was not possible by using datasets offered by Azure and GCP. Finally, by using the proposed instant availability score prediction, we showed that the median spot instance running time can improve by 63.2% for initially high score instances and by 168% for initially low score spot instances. We believe that our study will enable users to utilize cloud resources more efficiently, ensuring reduced costs and increased reliability, thereby optimizing their overall system performance.

Figure 10. Distribution of spot instance availability when using only the current SPS value and predicted values