# RepMedSAM: Segment Anything in Medical Images with Lightweight CNN

Zehan Zhang0000-0002-0451-985X

1Hangzhou Genlight Medtech Co. Ltd., Zhejiang, China

1

Rui Huang0

1Hangzhou Genlight Medtech Co. Ltd., Zhejiang, China

1

Ning Huang0

1Hangzhou Genlight Medtech Co. Ltd., Zhejiang, China

1

###### Abstract

Traditional deep learning segmentation models require designing network structures and loss functions specific to different tasks, followed by training dedicated models, which leads to a significant amount of repetitive work. The Segment Anything Model (SAM) provides a unified framework for handling segmentation tasks. However, the current SAM model is mainly applicable to natural images and may require substantial computational resources during inference, posing challenges for widespread clinical implementation. In this work, we utilize RepViT as the Image Encoder to develop a lightweight SAM structure. The training phase consists of two main parts: knowledge distillation and fine-tuning. During the inference phase, reparameterization is employed to optimize inference speed. The proposed method achieves an average DSC of 0.8688 and an average NSD of 0.8746 on the validation set, and it improves inference speed while increasing the number of parameters compared to the baseline.

Keywords:Segment Anything Model Medical image Lightweight Knowledge distillation.

## 1 Introduction

Medical image segmentation is a crucial component in clinical practice, where the accuracy of segmentation results is essential for ensuring the safety and efficacy of medical diagnosis and treatment. Existing methods typically design network structures and loss functions tailored to specific tasks and train dedicated models, resulting in poor generalization performance across different segmentation tasks and modalities.

Recently, various foundational models have garnered significant attention from researchers in the field of computer science due to their outstanding performance. In natural images, the Segment Anything Model (SAM)  performs interactive segmentation using prompts such as points, boxes, masks, and text. The introduction of such prompt engineering enables SAM to adapt to nearly all downstream segmentation tasks, achieving impressive results comparable to models specifically trained for particular tasks. However, unlike natural images, medical images comprise multiple modalities with significant differences betweenthem. Therefore, the performance of the foundational SAM model in medical image segmentation is quite limited. Works like MedSAM  have successfully transferred SAM to the medical image segmentation domain, achieving excellent performance. Nonetheless, these models generally require substantial computational resources during inference, and their inference speed does not meet the real-time requirements of clinical applications. Hence, developing a lightweight SAM for efficient deployment in medical image segmentation is a meaningful and promising research area.

Currently, many lightweight SAM models have emerged in natural images to enable these applications to run on resource-constrained terminal devices. Mobile-SAM  replaces SAM's image encoder with a lighter structure and completes training within a day using a decoupled distillation approach. Compared to SAM, MobileSAM achieves comparable performance with 60 times fewer parameters and can run stably on a CPU. EfficientViT-SAM  proposes a pre-training framework called SAMI with masked images, which significantly enhances the performance of image mask pre-training methods and extends well to various tasks such as image classification, object detection, and semantic segmentation. Compared to the original SAM, EfficientSAM reduces the number of parameters by 20 times, accelerates the running speed by 20 times, and surpasses models like MobileSAM and FastSAM  in performance. RepViT , which incorporates re-parameterized convolutions into the MobileNetV3  architecture, forms a lightweight CNN resembling a ViT structure. When used as the image encoder and combined with SAM, it achieves faster and better results than MobileSAM.

In this paper, we build upon RepViT and SAM, implementing several minor architectural and preprocessing adjustments to significantly reduce the overall model parameters and computational load. The model undergoes training in two stages: distillation of the image encoder and overall fine-tuning. During the inference phase, we leverage structural re-parameterization to further reduce the number of parameters and enhance speed, all while maintaining accuracy.

## 2 Method

We propose a lightweight foundational model for medical image segmentation based on SAM and RepViT. The details of the proposed method are described as follows.

### Preprocessing

We primarily follow the baseline data processing approach for three-channel 2D data. The inference phase consists of the following steps:

* Resize the longest edge to 256 while maintaining the aspect ratio of the image.
* Normalize the image pixel value to the  range using Max-Min Normalization.

* Pad the image to [256; 256].
* Align the coordinates of the box with the resized image.

For 3D data preprocessing during the inference phase, we perform slice-by-slice operations for each box. Each slice is expanded to three channels, and the data preprocessing method then follows the same procedure as described above for 2D data.

During the training phase, to avoid excessive disk usage, we directly read npz files for training. For 3D data, one random slice in the stack is read per iteration. To utilize more slices in the same stack, one 3D data is read multiple times during each training epoch.

### Proposed Method

The overall architecture of the proposed method is identical to MedSAM, as illustrated in Figure 1. It mainly consists of three parts: the Image Encoder, the Mask Decoder, and the Prompt Encoder. For each box, the method predicts the corresponding mask individually.

We replace the Image Encoder with the lightweight RepViT model, the overall structure of which is shown in Figure 2. This structure comprises multiple stacked RepViTBlocks.

The structure of a single RepViTBlock is shown in Figure 3. Figure 3(a) depicts the structure of the MobileNet Block. The RepViT Block is an improved version based on this structure. Its architecture during training and inference is illustrated in Figure 3(b).

Additionally, the training of RepSAM is divided into two stages. The first stage involves knowledge distillation for the Image Encoder. In this stage, instead of using a larger parameter Image Encoder as the teacher model, we directly use the pre-trained TinyViT. Despite the smaller parameter count of the teacher

Figure 1: The network architecture of MedSAM.

model, the RepViT obtained by distillation learning achieves better results compared to training from scratch. The second stage involves fine-tuning the overall structure of RepSAM.

Loss function: We employ KLDivLoss as the loss function for the first stage of knowledge distillation. During the fine-tuning stage, the loss function is a combination of DiceLoss, BCELoss, and MSELoss.

### Post-processing

We maintain the same approach as the baseline by post-processing the predicted masks through cropping and resizing to align the results with the input images.

## 3 Experiments

### Dataset and evaluation measures

We use the dataset provided by the challenge, along with an additional public dataset, ToothSeg, for model training. Furthermore, during the distillation stage of the Image Encoder, we also include the validation set provided by the challenge in the training process. Throughout training, we maintain the data format as.npz. For 3D data, a random slice is read in each iteration, and during each epoch, each 3D dataset is traversed multiple times to read and train on multiple slices from the same data.

Figure 3: The structure of a single RepViT Block

Figure 2: The network architecture of RepViT.

The evaluation metrics include two accuracy measures--Dice Similarity Coefficient (DSC) and Normalized Surface Dice (NSD)--alongside one efficiency measure--running time. These metrics collectively contribute to the ranking computation.

### Implementation details

#### 3.2.1 Environment settings

The development environments and requirements are presented in Table 1.

#### 3.2.2 Training protocols

The training process is divided into two stages. The first stage involves the distillation learning of the Image Encoder. The training protocol for this stage is shown in Table 2. In this stage, RepViT learns relevant knowledge from the pre-trained TinyViT and encodes the images. We use KLD-Loss as the loss function. Through knowledge distillation, RepViT can quickly converge within 10 epochs, and we select the best distillation model based on the loss value.

The second stage involves fine-tuning the entire RepSAM. First, we load the pre-trained weights for the three components: the Image Encoder loads the

  System & Ubuntu 18.04.6 LTS \\  CPU & Intel(R) Core(TM) i9-10900K CPU @ 3.70GHz \\  RAM & 64GB \\  GPU (number and type) & One NVIDIA GeForce RTX 3090 24G \\  CUDA version & 11.8 \\  Programming language & Python 3.9 \\  Deep learning framework PyTorch(torch 2.1.2, torchvision 0.16.2) \\  Code \\  

Table 1: Development environments and requirements. (mandatory table)

  Pre-trained Model & MedSAM  \\  Batch size & 4 \\  Patch size & 256\(\)256\(\)3 \\  Total epochs & 10 \\  Optimizer & AdamW \\  Initial learning rate (lr) & 1e-4 \\  Lr decay schedule & CosineAnnealingLR \\  Loss function & KLDivLoss \\  

Table 2: Training protocols. (mandatory table)weights from the knowledge-distilled RepViT, and the Prompt Encoder and Mask Decoder directly load the provided baseline weights. The remaining training protocol details are shown in Table 3, with model parameters and computational load only calculated for the Image Encoder. During the training phase, we apply a random jitter of 5 pixels to the input boxes and randomly flip the images for augmentation. Additionally, we employ the EMA (Exponential Moving Average) strategy to enhance the model's robustness. The data is split into training and validation sets in a 4:1 ratio. The optimal model is selected based on the dice metric evaluated on the validation set.

## 4 Results and discussion

### Quantitative results on validation set

We compare our method with the baseline, MedSAM, and other models. The quantitative evaluation results are shown in Table 4, listing the DSC and NSD for nine modalities, along with the average DSC and NSD across all modalities. Our proposed method achieves an average Dice of 0.8688 and an average NSD of 0.8746 on the validation set. Additionally, we compare our method with RepMedSAM trained from scratch. The table shows that RepMedSAM trained from scratch already achieves results surpassing both the baseline and the larger MedSAM. Moreover, incorporating knowledge distillation in the initial phase significantly enhances the final segmentation results.

The proposed method achieves good segmentation results across various modalities, including CT, MR, US, X-Ray, Dermatology, Endoscopy, and Fundus. However, its performance is relatively poorer on PET and Microscopy, possibly due to the data quality and the inherent difficulty of these segmentation

 p{113.8pt}}  Pre-trained Model & MedSAM  RepViT  \\  Batch size & 4 \\  Patch size & 256\(\)256\(\)3 \\  Total epochs & 30 \\  Optimizer & AdamW \\  Initial learning rate (lr) & 2e-5 \\  Lr decay schedule & CosineAnnealingLR \\  Training time & 61 hours \\  Loss function & DiceLoss + BCELoss + MSELoss \\  Number of model parameters & 23.16M\({}^{1}\) 23.04M(inference) \\  Number of flops & 7.23G\({}^{2}\) 7.08G(inference) \\  CO\({}_{2}\)eq & 16.8Kg\({}^{3}\) \\  

Table 3: Training protocols. (mandatory table)

[MISSING_PAGE_FAIL:7]

Figure 4: Comparison between segmentation results of different methods.

Figure 5: Segmentation Results for Specific Modalities.

on the validation set. Including more datasets for training could enhance the model's generalization ability further. Additionally, we attempted to use the ONNX engine for inference, but the runtime did not show significant reduction. Further work on deployment could focus on reducing the required inference time.

## 5 Conclusion

We combine the lightweight CNN structure, RepViT, with SAM and apply it to medical image segmentation. Through training in two stages, knowledge distillation and fine-tuning, RepMedSAM achieves higher segmentation accuracy and faster segmentation speed compared to the baseline.

#### Acknowledgements

We thank all the data owners for making the medical images publicly available and CodaLab  for hosting the challenge platform.