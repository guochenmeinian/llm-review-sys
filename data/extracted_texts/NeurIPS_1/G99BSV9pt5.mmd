# Relational Concept Bottleneck Models

Pietro Barbiero

Universita della Svizzera Italiana

University of Cambridge

barbiero@tutanota.com &Francesco Giannini

Scuola Normale Superiore

francesco.giannini@sns.it &Gabriele Ciravegna

Politecnico di Torino

gabriele.ciravegna@polito.it &Michelangelo Diligenti

University of Siena

michelangelo.diligenti@unisi.it &Giuseppe Marra

KU Leuven

giuseppe.marra@kuleuven.be

###### Abstract

The design of interpretable deep learning models working in relational domains poses an open challenge: interpretable deep learning methods, such as Concept Bottleneck Models (CBMs), are not designed to solve relational problems, while relational deep learning models, such as Graph Neural Networks (GNNs), are not as interpretable as CBMs. To overcome these limitations, we propose Relational Concept Bottleneck Models (R-CBMs), a family of relational deep learning methods providing interpretable task predictions. As special cases, we show that R-CBMs are capable of both representing standard CBMs and message-passing GNNs. To evaluate the effectiveness and versatility of these models, we designed a class of experimental problems, ranging from image classification to link prediction in knowledge graphs. In particular we show that R-CBMs (i) match generalization performance of existing relational black-boxes, (ii) support the generation of quantified concept-based explanations, (iii) effectively respond to test-time interventions, and (iv) withstand demanding settings including out-of-distribution scenarios, limited training data regimes, and scarce concept supervisions.

## 1 Introduction

Chemistry, politics, economics, traffic jams: we constantly rely on relations to describe, explain and reason on everyday life problems. For instance, we can easily deduce Bart's citizenship if we consider Homer's citizenship and his status as Bart's father (Figure 1). While relational Deep Learning (DL) models  can effectively solve such problems, the design of _interpretable_ neural models capable of relational reasoning is still an open challenge. Among DL methods, Concept Bottleneck Models (CBMs)  are interpretable methods explaining their predictions by first mapping input features to a set of human-understandable concepts and

Figure 1: Relational Concept Bottleneck Models can correctly predict and explain Bart’s (B) citizenship by considering Homer’s (H) citizenship and his status as Bart’s parent.

then using such concepts to solve the given tasks. However, current CBMs are not well-suited for addressing relational problems as they can process only one input entity at a time by construction. To solve relational problems, CBMs would need to handle concepts/tasks involving multiple entities (e.g., the concept "parent" which depends on both the entity "Homer" and "Bart"), thus forcing CBMs to process more entities at a time. Moreover, the definition of a suitable relational bottleneck layer is generally not straightforward, as a task prediction may require complex connections among multiple relational concepts. On the other side, while existing relational DL methods, such as Graph Neural Networks (GNN), may effectively solve such problems (e.g., correctly predicting Bart's citizenship), they are still unable to explain their predictions as CBMs would do (e.g., Bart is a US citizen _since Homer is a US citizen and Homer is the father of Bart_). Hence, a knowledge gap persists in the existing literature: defining a DL model capable of relational reasoning (akin to a GNN), while also being interpretable (akin to a CBM).

To address this gap, we propose Relational Concept Bottleneck Models (R-CBMs, Section 3), a family of concept bottleneck models where both concepts and tasks may depend on multiple entities, and that have both CBMs and GNNs as special cases. The results of our experiments (Section 4 and 5) show that R-CBMs: (i) match the generalization performance of existing relational black-boxes, (ii) support the generation of first-order logic explanations, (iii) effectively respond to test-time concept and rule interventions improving their task performance, (iv) withstand demanding test scenarios including out-of-distribution settings, limited training data regimes, and scarce concept supervisions.

## 2 Background

**Concept bottleneck models.** A Concept Bottleneck Model (CBM) is a function composing: (i) a concept encoder \(g:X C\) mapping each entity \(e\) with feature representation \(x_{e} X^{d}\) (e.g., an image) to a set of \(k\) concepts \(c C^{k}\) (e.g., "red", "round"), and (ii) a task predictor \(f:C Y\) mapping concepts to a set of \(m\) tasks \(y Y^{m}\) (e.g., "apple", "tomato"). Each component \(g_{i}\) and \(f_{j}\) vehicle the prediction of the \(i\)-th concept and \(j\)-th task, respectively.

**Relational languages.** A relational setting can be outlined using a function-free first-order logic language \(=(,,)\), where \(\) is a finite set of constants for specific domain entities1, \(\) is a set of variables for anonymous entities, and \(\) is a set of \(n\)-ary predicates for relations among entities. The central objects of a relational language are its _atoms_, i.e. expressions \(p(_{1},,_{n})\), where \(p\) is an \(n\)-ary predicate and \(_{1},,_{n}\) are constants or variables. In case \(_{1},,_{n}\) are all constants, \(p(_{1},,_{n})\) is called a _ground atom_. Examples of atoms can be _male_(_Bart_) and _parent_\((u,v)\), with \(Bart\) and \(u,v\). Given a set of atoms \(\) defined on a joint set of variables \(V=\{v_{1},,v_{n}\}\), the process of applying a substitution \(_{V}=\{v_{1}/e_{1},...,v_{n}/e_{n}\}\) to \(\) is called _grounding_, i.e. the substitution of all the variables \(v_{i}\) with some constants \(x_{i}\), according to \(_{V}\). For example, given \(=[(v_{1},v_{2}),(v_{2},v_{3})]\) and the substitution \(=\{v_{1}/,v_{2}/,v_{3}/\}\), we can obtain the ground list \(=[(,),( ,)]\). The set of all the ground atoms of a relational language is called its Herbrand base (_HB_). Logic rules are defined as usual by applying logic connectives \(\{,,,\}\) and quantifiers \(\{,\}\) on atoms.

**Graph neural networks.** The architecture of a typical GNN for node-classification tasks consists of three primary steps. For every node \(i\), 1) an incoming message \(M_{j i}\) is passed from a neighbor node \(j(i)\) to \(i\), where \((i)\) denotes the set of all the incoming neighbours of \(i\), 2) the embedding representation of node \(i\) is updated by aggregating all the incoming messages from its neighbors, 3) a readout function is applied to the node embeddings to predict the class label \((i)\). Steps 1)-2) are typically repeated multiple times to allow multi-hop information propagation.

## 3 Relational Concept Bottleneck Models

This work addresses a key research question: _how can we bridge the gap between the interpretability of concept-based models and the reasoning capabilities of relational DL?_ To answer this question, we extend the notion of bottleneck to a relational setting (Section 3.1) and classic message-passing to also update atom predictions during the recursive steps (Section 3.2). Then we illustrate the learning problem that R-CBMs can solve (Section 3.3), and finally we discuss the connections of R-CBMs with both standard CBMs and GNNs (Section 3.4).

### Relational Concept Bottlenecks

The structure of the relational concept bottleneck can be defined as a relational structure, where each atom corresponds to a node. The dependencies among the atoms are represented as a directed hypergraph, where each hyperedge is positional, and can have multiple nodes as head, but only a single node as tail. In this regard, every hyperedge defines a relational concept bottleneck from (possibly) many source ground atoms to a destination ground atom. Moreover, each hyperedge is assumed to be sufficient to carry out the prediction for the destination atom, which can however be collectively improved by merging separate predictions. Formally, an _atom dependency graph_ for a node \(A\), is a positional, labeled hypergraph \(=(,)\), whose nodes are the atoms in the Herbrand Base _HB_ of a relational language, and each hyperedge \(r\) is such that \(r=([A_{1},,A_{m}],[A])\), with \(A_{1},,A_{m}\), \(A\), meaning that in \(\) there is a hyperedge with source \([A_{1},,A_{m}]\) and destination \(A\). Each hyperedge is labelled with a type identifier \(l(r)\). Given an atom \(A\), we indicate by \((A)\) the set of hyperedges with destination \(A\), and by \(_{r}(A)\) the source of the hyperedge \(r\) if \(r(A)\) or the emptyset otherwise. Figure 2 shows an example with two hyperedges with destination \(p_{4}(b)\), where \(_{orange}(p_{4}(b))=[p_{3}(b),p_{2}(a,b),p_{1}(b,a)]\) and \(_{violet}(p_{4}(b))=[p_{1}(b,c),p_{2}(c,b)]\), we used different colors to identify different hyperedges.

### The Model

Relational Concept Bottleneck Models (R-CBM) merge CBMs and GNNs into an interpretable relational setting. An R-CBM first processes the atoms of a relational language by an encoder, and then map them by a predictor (like a CBM). The final prediction is computed by aggregating all the ones from separate groups of neighbour atoms, according to a given dependency graph (like a GNN). The pipeline of R-CBMs can be described as follows: (i) the atom encoder and predictor embeds each atom into a concept embedding and prediction score, respectively (ii) message-passing is performed to refine the embeddings and scores according to the structure defined by the _atom dependency graph_, and (iii) the atom predictions are obtained by _aggregating_ the predictions.

**Atom encoder.** An \(n\)-ary ground atom \(A\) is defined by a predicate \(p\) and a tuple of entities \(=(e_{1},,e_{n})\), such that \(A=p()\). Like in a GNN, the entities have a feature representation \(}=(x_{e_{1}},,x_{e_{n}})^{d n}\), being \(d\) the representation size. For each atom \(A=p()\), the atom encoder \(g_{p}\) computes the atom encoding \(g_{p}(})^{H}\), being \(H\) the embedding size.

**Message-passing.** Given the relational concept bottlenecks, the updating of the embeddings and predictions of the atoms can be expressed as a message-passing schema over the dependency graph. For each \(A\), with \(A=p()\), the initial embedding and prediction for \(A\) are calculated by:

\[h^{0}(A)=g_{p}(}), y^{0}(A)=s(h^{0}(A))\]

where \(g_{p}\) is the atom encoder and \(s:^{H}\) is a learnable predictor function working on the local (non-relational) embeddings, such as an MLP with sigmoid activation function. Assuming the message-passing is running for \(T\) time steps, for every \(r(A),\ 1 t T\), we have the updates:

\[h^{t}_{r}(A) =u_{l(r)}(h^{t-1}(A),[h^{t-1}(B)]_{B_{r}(A)})\] \[y^{t}_{r}(A) =f_{l(r)}(y^{t-1}(A),[h^{t}_{r}(B),y^{t-1}(B)]_{B _{r}(A)})\] \[h^{t}(A) =_{r(A)}h^{t}_{r}(A)\] \[y^{t}(A) =_{r(A)}y^{t}_{r}(A)\]

where \(u_{l(r)}\) and \(f_{l(r)}\) are edge-type specific functions implementing, respectively: a combine/update operation that provides a refined latent representation \(h^{t}_{r}(A)\), and a local readout operation that provides a candidate prediction based on a single neighbourhood \(h^{t}_{r}(A)\). The operator \(\) aggregates the predictions over all the neighbourhoods \(r(A)\), e.g, by maximum or summation, whose selection criterion for interpretable models will be discussed in Section 3.4.

Figure 2: The graph represents the dependencies among the atoms. Here, the atom \(p_{4}(b)\) can be predicted either from the orange \([p_{3}(b),p_{2}(a,b),p_{1}(b,a)]\) or violet \([p_{1}(b,c),p_{2}(c,b)]\) tuples of neighbours.

**Relational task predictor.** The final task prediction for the atom \(A\) is given by \(y^{T}(A)\), via the combination of the aggregation function and the local readout \(f_{l(r)}\) at time \(T\). We note that this formulation unifies and extends the role of the task predictor in CBMs and of a readout function in GNNs. In practice, each task predictor \(f_{l(r)}\) can be implemented by any blackbox-like function, like the one used in GNN architectures  or **CBM-Deep**. However, an interesting alternative is to use either a partially interpretable function, like in **linear CBMs**, or a fully interpretable function, like in Deep Concept Reasoners (**DCR**) , which constructs a logic rule combining the predictions of the incoming atoms. Further details on selectable task predictors are in App. A.4.

**Example 3.1**.: Given a local neighbourhood for the atom _grandparent_(\(Abe,Bart\)), such that

\[_{r}((Abe,Bart))\!=\![(Abe,Homer),(Homer,Bart),(Homer,Lisa)]\]

a non-interpretable \(f_{l(r)}\) can compute the prediction \(y^{T}_{r}((Abe,Bart))\) based on the neighbourhood. An interpretable \(f_{l(r)}\), like the one used by DCR, can also provide an explanation for the prediction, like e.g. \((Abe,Homer)(Homer,Bart) {grandparent}(Abe,Bart)\).

### Learning

In this paper, we use a joint (end-to-end) SGD training of the atom encoder and predictor, as the original CBM paper  suggests for generalization. The learning problem can be stated as follows.

**Definition 3.2** (Learning Problem).: _Given:_ a relational language \((,,)\) with all the atoms collected in _HB_; a set of entities represented by their corresponding feature vectors in \(X\) (i.e. _the input_); a dataset composed of a subset of supervised atoms \(D=\{(A_{i},l_{i}):\ A_{i},l_{i}\{0,1\}\}\), where \(l_{i}\) is the corresponding ground-truth value for \(A_{i}\); models \(g_{p},s,u_{l(r)},f_{l(r)}\) with parameters \(\) and a maximum number of iterations \(T\); an atom dependency graph determining the relational structure of all the atoms; a loss function \(L\). _Find:_\(_{}_{(A_{i},l_{i}) D}L(y^{T}(A_{i}),l_{i})\).

### Examples of Relational Concept Bottlenecks

To derive specific instantiations of R-CBMs, we introduce the notion of _templetized hyperedge_ for an atom dependency graph. A templetized hyperedge \(\) is defined as a standard hyperedge, but where the source and/or the destination contain one or more variables. For example, \(=([p_{1}(v,u),p_{2}(u,e)],p(v,e))\) is a templetized hyperedge, meaning that we have an hyperedge istance for each possible grounding to the variables occurring in the atoms (i.e. \(v,u\) in the example). All the hyperedges generated by the same template are associated to the same edge label \(l(r)\), so that both model functions \(u_{r(l)},f_{r(l)}\), are shared across all instances of the same template. We omit the subscript in case there is a single templetized hyperedge in the hypergraph (e.g. one single edge type in the dependency graph).

**Case #1: Standard CBMs.** A standard (non-relational) CBM can be easily seen as an R-CBM, by making few assumptions on the relational language and the atom dependency graph it is based on: (i) all predicates are unary, and can be partitioned into two disjoint sets, i.e. the concepts \(c_{1},,c_{k}\) and tasks \(t_{1},,t_{m}\), respectively, (ii) in the atom dependency graph any concept atom has no parents, i.e. for every atom of the form \(c()\), we have \((c())=\), and for every task \(t\) there is exactly one templetized hyperedge \(\) whose source is composed by all the concept atoms, i.e. \(_{}(t(v))=[c_{1}(v),,c_{k}(v)]\), (iii) \(T=1\). Hence, the final prediction on an atom \(A=p()\) is obtained as \(y(A)=s(g_{p}(_{}))\) if \(p\) is a concept predicate, and \(y(A)=f_{}(y(c_{1}()),,y(c_{k}()))\), if \(p\) is a task predicate. For instance, given the unary predicates \(=\{,,\}\), a possible concept bottleneck is given by the templetized hyperedge \(((v))=[(v),(v)]\).

**Case #2: Node classification via GNNs.** R-CBMs allow the modelling of simple relational structures, such as relation-entity graphs, which are typically used by GNNs to generate and update node embeddings. For instance, let us consider a node classification task wrt a class \(p\), and let \(q\) denotes the relation in the graph. This can be represented by the templetized hyperedge \((p(v))=[q(v,u)]\). For a heterogeneous graph with \(q_{1},,q_{k}\) relations, we can instead consider the templetized hyperedge \((p(v))=[q_{1}(v,u),,q_{k}(v,u)]\). Message-passing and readout in GNNs are special cases of R-CBMs, as embeddings do not depend on atom predictions and readout occurs only at step \(T\):

\[h^{t}(A) = u(h^{t-1}(A),[h^{t-1}(B)]_{B(A)})\] \[y^{T}(A) = f(h^{T}(A))\]

**Case study #3: Tampletized relational concept bottlenecks.** The templatization of standard CBMs can be further generalized, as relational bottlenecks can represent more complex interactions.

**Definition 3.3** (Templetized relational concept bottleneck).: Given an \(n\)-ary predicate \(p\), and an integer \(w 0\), we define a _templetized relational concept bottleneck_ of width \(w\) as the expression:

\[(p())=b(,) \]

where \(=(v_{1},,v_{n}),=(u_{1},,u_{w})\) are variables and \(b(,)\) is a list of atoms with predicates in \(\) and tuples of variables taken from \(\{v_{1},,v_{n},u_{1},,u_{w}\}\).

For instance, assuming to partition the predicates into two disjoint sets, i.e. concepts and tasks, similarly to what considered for standard CBMs, Definition 3.3 specifies the input-output interface of a concept-based task predictor in a relational context, being \(p\) a task predicate and the predicates contained in \(b\) the concepts2. The following example grounds this definition in a concrete setting.

**Example 3.4**.: Given the binary predicates _grandparent_ (task) and _parent_ (concept), \(w=1\) and \(b(v_{1},v_{2},u)=[(v_{1},u),(u,v_{2})]\) we get the templetized relational concept bottleneck:

\[((v_{1},v_{2}))=[(v_{1},u), (u,v_{2})]\]

Figure 3 illustrates the instantiation of a relational concept bottleneck \((US(v))=[US(u),parent(u,v)]\), for \(=[,,]\).

We notice that by replacing the variables \(\) with an entity tuple in Definition 3.3 does not correspond to an univocal instantiation of a relational concept bottleneck, as the same destination atom is predicted for every substitution \(\) of the variables \(\). For instance if \(=[Abe,,,]\) in Example 3.4, we have different hyperedges having _grandparent_(\(Abe,\)) as tail:

\[((Abe,))=[ (Abe,Abe),(Abe,Bart)]&(_{u}=\{u/Abe\})\\ ((Abe,Bart))=[(Abe,Homer), (Homer,Bart)]&(_{u}=\{u/Homer\})\\ ((Abe,Bart))=[(Abe,Bart), (Bart,Bart)]&(_{u}=\{u/Bart\})\\ ((Abe,Bart))=[(Abe,Lisa), (Lisa,Bart)]&(_{u}=\{u/Lisa\})\]

Each separate grounding of a relational concept bottleneck corresponds to a separate predicate prediction, as the same destination atom can be predicted by different bottlenecks. Taking again Example 3.4, we can assume to have also the bottleneck: \(_{2}((v_{1},v_{2}))=[(v_ {1},u),(u,v_{2})]\) which also adds the hyperedge:

\[_{2}((Abe,Bart))\!=\![(Abe,Lisa),(Lisa,Bart)]\ \ (_{u}\!=\!\{u/Lisa\})\]

The final prediction is obtained by aggregating all the single predictions with the \(\) operator.

Figure 3: In R-CBMs (i) the atom encoder \(g\) maps input entities to a set of ground atoms (red/green indicate the ground atom label false/true), (ii) the relational bottleneck guides the selection of concept atoms by considering all the possible variable substitutions in \(\), (iii) the atom predictor \(f\) maps the selected atoms into a task prediction, and (iv) the aggregator \(\) combines all evidence into a final task prediction.

Aggregation semantics.In standard CBMs the interpretation of the prediction solely depends on the task predictor \(f\) and there is a single templetized hyperedge from concepts to any task node. However, the same atom can be predicted by different bottlenecks in R-CBMs. Indeed, different bottlenecks can represent separate dependency paths for the same atom like: \(_{1}(t())=b_{1}(,_{1}),_{2}(t())=b_{2}(,_{2}),\) Even when considering a single bottleneck, the same grounding for \(\) corresponds to multiple dependencies for the same atom if \(w>0\). Each ground bottleneck corresponds to a separate hyperedge in the dependency graph and it plays a fundamental role the choice of the aggregation function \(\). In this paper, we select as \(=\), as it guarantees a sound interpretation to R-CBMs' predictions. Indeed, the \(\) aggregation corresponds to the semantics of an _existential quantification_ on the variables \(\). As a result, the final task prediction is true if the task predictor \(f\) fires for at least one grounding of the extra variables.

**Example 3.5**.: Following Example 3.4, we consider a task predictor \(f\) as a logic conjunction (\(\)) between concept atoms. If we use \(=\), then the final task prediction is true if at least one substitution for \(u\) is true, i.e. if there exists an entity that is parent of \(\) and such that \(\) is her/his parent. Hence, the final task prediction can be interpreted as the logic formula

\[ u\;(,u)(u,)(,)\]

In summary, assuming \(=\) and that each \(f\) is realized as a logic rule \(\), a relational concept bottleneck with \((p())=b(,)\) can be associated with the explanation:

\[\;\;(b(,)) p()\]

where \(= v_{1},, v_{n}\) and \(= u_{1},, u_{w}\), like done in logic programs .

## 4 Experiments

In this section we analyze the following research questions: **Generalization**--Can standard/relational CBMs generalize well in relational tasks? Can standard/relational CBMs generalize in out-of-distribution settings? 3

**Interpretability**--Can relational CBMs provide meaningful explanations for their predictions? Are concept/rule interventions effective in relational CBMs? **Efficiency**--Can relational CBMs generalize in low-data regimes? Can relational CBMs correctly predict concept/task labels with scarce concept train labels?

**Data & task setup.** We investigate our research questions using 7 relational datasets on image classification, link prediction and node classification. We introduce two simple but not trivial relational benchmarks, namely the Tower of Hanoi and Rock-Paper-Scissors (RPS), to demonstrate that standard CBMs cannot even solve very simple relational problems. The Tower of Hanoi is composed of 1000 images of disks positioned at different heights of a tower. Concepts include whether disk \(i\) is larger than \(j\) (or vice versa) and whether disk \(i\) is directly on top of disk \(j\) (or vice versa). The task is to predict for each disk whether it is well-positioned or not. The RPS dataset is composed of 200 images showing the characteristic hand-signs. Concepts indicate the object played by each player and the task is to predict whether a player wins, loses, or draws. We also evaluate our methods on real-world benchmark datasets specifically designed for relational learning: Cora, Citeseer, , PubMed  and Countries on two increasingly difficult splits . Additional details can be found in App. A.1 and App. A.5.

**Models.** We compare R-CBMs against state-of-the-art concept bottleneck architectures, including CBMs with linear and non-linear task predictors (**CBM-Linear** and **CBM-Deep**) , a flat version (**Flat-CBM**) where each prediction is computed as a function of the full set of ground atoms, but also with **Feedforward** and **Relational black-box** architectures. We also compared against DeepStochLog , a state-of-the-art NeSy system, and other KGE specific models for the studied KGE tasks. Our relational models include an R-CBM with DCR predictor (**R-DCR**) and its direct variant, using only 5 supervised examples per-predicate (**R-DCR-Low**). We also considered a non-interpretable R-CBM version where the predictions are based on an unrestricted predictor processing the atom representations (**R-CBM-Emb**). In the experiments, the loss function was selected to be the standard cross-entropy loss. Further details are in App. A.2. **Evaluation.** We measure generalization using standard metrics, i.e., Area Under the ROC curve  for multi-class classification, accuracy for binary classification, and Mean Reciprocal Rank (MRR) for link prediction, MRR and Hits@N for KGE tasks. We use these metrics to measure generalization across all experiments, including out-of-distribution scenarios, low-data regimes, and interventions. We report additional experiments and further details in App. A.3.

## 5 Key Findings

### Generalization

**Standard CBMs do not generalize in relational tasks (Table 1).** Standard CBM best task performance \( 55\%\) ROC-AUC is just above a random baseline. This result directly stems from the architecture of existing CBMs, which can process only one input entity at a time. The experiments validate that this design fails on relational tasks that inherently involve multiple entities. Naive attempts to address the relational setting, like Flat-CBMs, lead to a significant drop in task generalization performance (\(-17\%\) in Hanoi), and become intractable when applied to larger datasets (e.g., Cora, Citeseer, PubMed, Countries). In RPS, instead, Flat-CBMs performance is close to random as the linear predictor for this model can not well approximate the required non-linear combination of concepts. These findings expose the limitations of existing CBMs when applied to relational tasks and justify the need for relational CBMs.

R-CBMs generalize well in relational tasks (Tables 1 and 2.

Relational concept bottleneck models match the generalization performance of relational black-box models (GNNs and KGEs) in relational tasks. For example, R-CBMs exhibit gains of up to \(7\%\) MRR (Countries S1), and at most a \(1\%\) loss in accuracy (Citeseer) w.r.t. relational black-boxes. In larger KGEs like WN18RR, R-DCR beats standard KGEs and is competitive against state-of-the-art custom logic-based solutions, while being more general. Non-interpretable solutions R-CBM-Emb are admitted by our relational formulation when \(f_{c}\) is selected to be a generic MLP blackbox. Since R-CBM-Emb and R-DCR only differ for the selection of the predictor (interpretable for R-DCR), a comparison of the results of these models on WN18RR provides a direct measurement of the performance decay due to the additional interpretability. Relational CBMs employing a simple linear layer as task predictor

    &  &  &  \\  & & & & & & & & & (MRR \(\)) & (Hits@10 \(\)) & (MRR \(\)) & (Hits@10 \(\)) \\   & DistMult & 0.42 & 0.382 & 0.507 & 0.24 & 0.155 & 0.419 & 0.419 \\  & ConvE & 0.43 & 0.401 & 0.525 & 0.33 & 0.237 & 0.501 \\  & ComplEx & 0.44 & 0.410 & 0.512 & 0.26 & 0.163 & 0.452 \\  & ComplEx-N3 & 0.48 & - & **0.570** & **0.37** & - & **0.560** \\   & NLL & 0.50 & 0.201 & 0.335 & 0.25 & - & 0.324 \\  & RNLogic with emb. & 0.48 & 0.446 & 0.558 & 0.34 & 0.252 & 0.530 \\  & RLogic & 0.47 & 0.443 & 0.537 & 0.31 & 0.203 & 0.501 \\  & LPHulse & 0.46 & 0.422 & 0.532 & 0.26 & 0.170 & 0.402 \\  & LatentLogic & 0.48 & **0.497** & 0.553 & 0.32 & 0.212 & 0.514 \\  R-CBM & R-CBM-Emb & **0.49** & 0.447 & 0.559 & 0.35 & 0.254 & 0.531 \\ (ours) & R-DCR & 0.47 & 0.419 & 0.563 & 0.35 & **0.255** & 0.533 \\   

Table 2: MRR and Hits@N metrics on the test set of the WN18RR and FB15k-237dataset. The competitor results have been taken from Cheng et al.  for from the original datasets.

    &  &  &  &  &  &  &  &  &  &  \\
**Class** & **Name** & **Rick** & **Interpretable** & **Risks** & **RPS** & **Hanoi** & **Citeseer** & **PubMed** & **Countries S1** & **Countries S2** \\  & & & & & & (OC-AUC-T) & (800-AUC-T) & (Accuracy \(\)) & (Accuracy \(\)) & (Accuracy \(\)) & (MRR \(\)) & (MRR \(\)) \\   & Foolforward & No & No & No & 64.48 \(\) 0.63 & 54.82 \(\) 0.81\(\) 2.61 & 63.13 \(\) 2.79 & 63.83 \(\) 0.80 & \(\) & \(\) & \(\) \\  & RadfordGAN & Yes & No & No & 100.00 \(\) **0.00** & 96.77 \(\) 0.00 & 96.78 \(\) 1.34 & 63.23 \(\) **0.71** & 74.50 \(\) 0.30 & \(91.56 \) 1.02 & \(87.87 \) 0.64 \\  & RadfordGAN & Yes & No & & & & & & (83.09 \(\) 0.95 & 61.09 \(\) 0.47 & 78.61 \(\) 1.42 & \(\) & \(\) \\   & DepthLogic & No & Yes & **Gross** & **100.00 \(\) 0.00** & **100.00** & **100.00** & **100.00** & **100.00** & **100.00** & **100.00** & **100.00** & **100.00** \\  & CMR-Linear & No & No & & 54.71 \(\) 2.50 & 53.62 \(\) 0.14 & \(\) & \(\) & \(\) & \(\) & \(\) \\   & CMR-Linear & No & No & & 54.78 \(\) 1.20 & 53.64 \(\) 0.14 & \(\) & \(\) & \(\) & \(\) & \(\) & \(\) \\   & CMR-Linear & No & No & & 54.81 \(\) 1.19 & 54.48 \(\) 0.25 & \(\) & \(\) & \(\) & \(\) & \(\) & \(\) \\   & DCR & No & Yes & & & & & (64.48 \(\) 0.56 & 54.85 \(\) 0.25 & \(\) & \(\) & \(\) & \(\) & \(\) & \(\) \\   & R-CBM & Yes & No & & 31.49 \(\) 1.000 & **100.00** & 98.77 \(\) 1.80 & 67.28 \(\) 1.76 & 64.98 \(\) 0.53 & 98.14 \(\) 2.42 & **92.72 \(\) 2.84** \\  & R-CBM & Yes & No & & & **100.00 \(\) 0.00** & **100.00** & **100.00** & **100.00** & **100.05** & **100.05** & **100.00** & **100.00** & **100.00** \\   & R-CBM & Yes & Yes & & & & & (64.48 \(\) 0.54 & 62.91 \(\) 1.82 & **90.15** & **63.81 \(\) 1.52 & **64.98 \(\) 1.74** & **98.33 \(\) 1.05** & **29.11 \(\) 1.52** \\   & R-CBM & Yes & No & & & & & & (67.13 \(\) 0.54 & 62.91 \(\) 1.82 & **60.81 \(\) 1.52 & **65.18 \(\) 1.74** & **98.33 \(\) 1.05** & **29.15 \(\) 1.52** \\   & R-CBM & Yes & No & & & & & & (96.71 \(\) 0.31 & 97.90 \(\) 1.01 & 78.33 \(\) 2.10 & 68.14 \(\) 1.52 & **65.18 \(\) 1.74** & **98.33 \(\) 1.05** & **29.15 \\   & R-DCR-Low & Yes & No & & & & & & (96.11 \(\) 1.40 & 96.02 \(\) 2.97 & \(\) & \(\) & \(\) & \(\) & \(\) & \(\) \\   

Table 1: **Models’ performance on task generalization.** R-CBMs generalize well in relational tasks. \(\) indicates methods that cannot be applied due to the dataset structure. OOT indicates out-of-time training due to large domains.

(R-CBM-Linear) underfit tasks demanding on non-linear combinations of concepts (e.g., RPS). In such scenarios, a deeper task predictor (e.g., R-CBMs Deep) trivially solves the issue, but it also hampers interpretability. R-DCRs address this limit providing accurate predictions while generating high-quality rule-based explanations (Table 4). It also matches generalization performance of neural symbolic system DeepStochLog , which is provided with ground truth rules.

R-CBMs generalize in out-of-distribution settings where the number of entities changes at test time (Figure 4).R-CBMs show robust generalization performances even in out-of-distribution conditions where the number of entities varies between training and testing. To assess generalization in these extreme conditions, we use the Tower of Hanoi dataset, where test sets of increasing complexity are generated by augmenting the number of disks in a tower. We observe that a naive approach, such as Flat-CBMs, immediately breaks as soon as we introduce a new disk in a tower, as its architecture is designed for a fixed number of input entities. In contrast, R-CBMs are more resilient, as we observe a smooth performance decline from \( 100\%\) ROC-AUC (with 3 disks in both training and test sets) to around \( 85\%\) in the most challenging conditions (with 3 disks in the training set and 7 in the test set).

### Interpretability

R-CBMs support effective interventions (Table 3).CBM architectures allow human interaction with the learnt concepts to intervene on mispredicted concepts during testing to improve the final predictions. In our experiments we assess CBMs' response to interventions on the RPS and Hanoi datasets. We set up the evaluation by generating a batch of adversarial test samples that prompt concept encoders to mis-predict \( 50\%\) of concept labels by introducing a strong random noise in the input features drawn from the uniform distribution \((0,20)\). In our findings, we note that R-CBMs positively respond to test-time concept interventions by increasing their task performance. This contrasts with standard CBMs, where perfect concept predictions are not enough to solve the relational task. Notably, the RPS dataset poses a significant challenge for relational CBMs equipped with linear task predictors, as the task depends on a non-linear combination of concepts. Expanding our investigation to DCRs, we expose another dimension of human-model interaction: _rule interventions_. Applying both concept and rule interventions, we observe that R-DCRs perfectly predict all adversarial test samples.

Relational Concept Reasoners discover semantically meaningful rules (Table 4).Among CBMs, a key advantage of DCRs lies in the dual role of generating rules which serve for both generating and explaining task predictions. Table 4 shows instances of R-DCR explanations, confirming that R-DCR discovers rules aligned with known ground truths across diverse datasets (e.g., \(wins(X) rock(X) paper(X) scissors(X) rock(Y)  paper(Y) scissors(Y)\) in RPS). Notably, R-DCR discovers meaningful rules even in low data regimes (R-DCR-Low) and when the correct rules are unknown, such as in Cora, Citeseer and PubMed.

Figure 4: **Model generalization on Hanoi OOD on the number of disks. Only R-CBMs are able to generalize effectively to settings larger than the ones they are trained on.**

    &  &  \\  &  &  &  &  \\  R-CBM-Linear & \(49.46 1.11\) & \(47.83 2.19\) & \(49.26 1.01\) & \(\) \\ R-CBM-Deep & \(51.35 2.00\) & \(82.02 6.34\) & \(50.07 0.74\) & \(\) \\ R-DCR & \(\) & \(\) & \(49.48 0.35\) & \(\) \\ CBM-Linear & \(49.41 0.89\) & \(47.75 1.81\) & \(50.01 0.16\) & \(55.03 0.53\) \\ CBM-Deep & \(50.83 0.93\) & \(47.78 1.94\) & \(\) & \(60.14 0.46\) \\ DCR & \(51.22 1.26\) & \(49.07 1.60\) & \(50.00 0.00\) & \(50.00 0.00\) \\   

Table 3: **CBMs response to interventions. R-CBMs effectively respond to human interventions.**

### Low data regimes

**R-CBMs generalize better than relational black-boxes in low-data regimes (Table 5).** The ability of relational CBMs and relational black box models was compared on the Citeseer dataset as the number of labeled nodes decreased to 75%, 50%, and 25%. While no significant difference was observed with ample training data, a growing advantage for relational CBMs over relational black box models emerged in scenarios of scarce data. The intermediate predictions related to incoming atoms likely have a crucial regularization effect, particularly in scenarios with limited data.

**R-DCR accurately makes interpretable predictions with very few atom supervisions (Table 1).** R-DCR-Low is able to learn an interpretable relational predictor when reducing the training data to 5 labeled atoms for each predicate. Indeed, the supervisions are crucial to establish an alignment between human knowledge and the model on the semantics of logical explanations. The alignment can be perfectly achieved in RPS, where the predictions are mutually exclusive. On the Hanoi dataset, learning the relational binary concepts \(larger\) and \(top\) from 5 examples is challenging, leading to slightly decreased overall performance.

## 6 Discussion

**Related work on CBMs.** Concept bottleneck models  inspired several works focusing on improved generalization [15; 5; 31], explanations [3; 1] and robustness [17; 10; 36; 11]. Despite these efforts, the application of CBMs to relational domains remains unexplored. Filling this gap, our framework allows relational CBMs to (i) effectively solve relational tasks, and (ii) generalize the explanatory capabilities of these models from propositional to relational.

**Related work on GNNs.** R-CBMs and relational black-boxes (such as GNNs) share similarities in considering the relationships between multiple entities when solving a given task. The prediction computation of R-CBMs is based on a message passing paradigm which is similar to message-passing in graph neural networks , which is a special case of the proposed architecture. However, relational CBMs can also define aggregations based on a semantically meaningful concepts, allowing the extraction of explanations, which can not be done by GNNs.

**Related work on ILP.** Among our considered R-CBMs, R-DCR is the only one learning a set of logic rules, hence we can draw some parallels with some algorithmic solutions defined in Inductive Logic Programming (ILP) . R-DCR bottlenecks are connected to ILP mode declarations or metarules , which define the search space. However, while ILP involves searching through a hypothesis space of possible logical rules, guided by principles like consistency, coverage, and simplicity, R-DCR is different as it searches this space via gradient descent over a continuous relaxation of the logic, and the logic formulas are learnt by exploiting neural architectures.

**Related work on Neuro-Symbolic AI.** Neural Theorem Provers (NTP)  and their more scalable variations  combine formal proof proving with neural networks for efficiency via a trainable

  
**Dataset** &  \\   & \(\)\(\)\(\)\(u.\)\(wins(v) rock(e) paper(v) scissors(v) rock(u) paper(u) scissors(u)\) \\  & \(\)\(\)\(\)\(u.\)\(loses(v) rock(v) paper(v) scissors(v) rock(u) paper(u) scissors(u)\) \\  & \(\)\(\)\(\)\(u.\)\(loses(v) rock(v) paper(v) scissors(v) rock(u) paper(u) scissors(u)\) \\  & \(\)\(\)\(\)\(u.\)\(lues(v) rock(v) paper(v) scissors(v) rock(u) paper(u) scissors(u)\) \\  & \(\)\(\)\(\)\(u.\)\(lues(v)(u_{1},v)(u_{2},u_{2}) larger(v,u_{1}) larger(v,u_{1}) larger(v,u_{2},u_{1})\) \\  & \(\)\(\)\(\)\(u.\)\(lues(v)(v,u_{1})(u_{2},u_{1})(u_{2},u_{1}) larger(v,u_{2}) larger(u_{2},v)\) \\  & \(\)\(\)\(u.\)\(nn(u)(u) rule(u) prob Models(u) theo (u) gene(u) cile(v,u)\) \\  & \(\)\(\)\(\)\(u.\)\(type1(v)(u) type2(u) experimental(u) cite(v,u)\) \\ Countries & \(\)\(heuristic search. However, R-CBMs are more general than NTP -or other specific rule learners-indeed their interpretability is not restricted to rule learning, but rather rely on concept interventions. Moreover, unlike NTP, when dealing with logic rules the R-CBM framework is not limited to Horn clauses, and it can be applied in classic CBMs setups where inputs are not symbolic, but images. Moreover, R-CBMs' templates can represent all the rules using a (subset of a) specified list of atoms in the body at the same time, and the embeddings will be used to determine which actual rule to instantiate in each given context (like in R-DCR). On the other hand, NTP's approach to rule learning is to enumerate all possible rules and let the learning decide which rules are useful. Please note that this approach is not scalable to larger KGs because of the combinatorial explosion of the number of rules when there are many predicates in the dataset.

**Limitations.** A limitation of relational CBMs consists in their limited scalability to very large domains. This limitation is shared with all existing relational systems, and most relational models have to rely on simplifying heuristics to scale to large relational structures like knowledge graphs . Another limitation of R-CBMs lays in the need for the definition of a relational concept bottlenecks, which acts as an architectural inductive bias, restricting the search space. Future extensions of relational CBMs can relax the need of an external template definition by including an automatic calibration of template widths, the construction of reduced set of variables' substitutions, or the automatic generation of the relational templates.

**Conclusions.** This work presents R-CBMs, a family of concept bottleneck models designed for relational tasks. The results of our experiments show that R-CBMs: (i) match the generalization performance of existing relational black-boxes, (ii) support the generation of quantified concept-based explanations, (iii) effectively respond to test-time interventions, and (iv) withstand demanding settings including out-of-distribution scenarios, and low data regimes. R-CBMs represent a significant extension of standard CBMs, and pave the way to further investigations using CBMs to improve interpretability in GNNs and to explain KGE predictions.

PB acknowledges support from SNSF project TRUST-ME (No. 205121L_214991). This research has also received funding from the KU Leuven Research Fund (STG/22/021, CELSA/24/008) and from the Flemish Government under the "Onderzoeksprogramma Artificiele Intelligentie (AI) Vlaanderen" programme. FG has been supported by the Partnership Extended PE00000013 - "FAIR - Future Artificial Intelligence Research" - Spoke 1 "Human-centered AI". MD was supported by TAILOR and HumanE-AI-Net, projects funded by EU Horizon 2020 research and innovation programme under GA No 952215 and No 952026, respectively. This project has also be partially supported by the EU Framework Program for Research and Innovation Horizon under the Grant Agreement No 101073307 (MSCA-DN LeMuR).