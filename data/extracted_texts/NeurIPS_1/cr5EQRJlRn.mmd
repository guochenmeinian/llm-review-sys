# Delta-CoMe: Training-Free Delta-Compression with Mixed-Precision for Large Language Models

Bowen Ping\({}^{1*}\)  Shuo Wang\({}^{2*}\) Hanqing Wang\({}^{3}\)  Xu Han\({}^{2,4,5}\)  Yuzhuang Xu\({}^{2}\)  Yukun Yan\({}^{2}\)

**Yun Chen\({}^{3}\)  Baobao Chang\({}^{1}\)  Zhiyuan Liu\({}^{2,4,5}\)  Maosong Sun\({}^{2,4,5}\) \({}^{1}\)Peking University \({}^{2}\)Dept. of Comp. Sci. & Tech., Tsinghua University, Beijing, China \({}^{3}\)Shanghai University of Finance and Economics \({}^{4}\)Institute for AI, Tsinghua University, Beijing, China \({}^{5}\)Beijing National Research Center for Information Science and Technology**

Equal contribution.Corresponding authors.Code will be publicly available at [https://github.com/thunlp/Delta-CoMe](https://github.com/thunlp/Delta-CoMe).

###### Abstract

Fine-tuning is a crucial process for adapting large language models (LLMs) to diverse applications. In certain scenarios, such as multi-tenant serving, deploying multiple LLMs becomes necessary to meet complex demands. Recent studies suggest decomposing a fine-tuned LLM into a base model and corresponding delta weights, which are then compressed using low-rank or low-bit approaches to reduce costs. In this work, we observe that existing low-rank and low-bit compression methods can significantly harm the model performance for task-specific fine-tuned LLMs (e.g., WizardMath for math problems). Motivated by the long-tail distribution of singular values in the delta weights, we propose a delta quantization approach using mixed-precision. This method employs higher-bit representation for singular vectors corresponding to larger singular values. We evaluate our approach on various fine-tuned LLMs, including math LLMs, code LLMs, chat LLMs, and even VLMs. Experimental results demonstrate that our approach performs comparably to full fine-tuned LLMs, surpassing both low-rank and low-bit baselines by a considerable margin. Additionally, we show that our method is compatible with various backbone LLMs, such as Llama-2, Llama-3, and Mistral, highlighting its generalizability. 3

## 1 Introduction

Large language models (LLMs) (Touvron et al., 2023; Jiang et al., 2023) are increasingly becoming the standard for a wide range of downstream tasks (Luo et al., 2023; Yu et al., 2023; Wei et al., 2023; Luo et al., 2023; Liu et al., 2024; Wang et al., 2023), significantly surpassing conventional small models. To meet the demands of various application domains and scenarios, many researchers direct their attention to developing advanced alignment or adaptation algorithms together with diverse training data to learn aligned LLMs based on generally pre-trained models. For instance, Luo et al. (2023) propose a reinforcement learning from evol-instruct feedback (RLEIF) method to construct LLMs with strong mathematical reasoning abilities. Similarly, Yu et al. (2023) employ a bootstrapping method to diversify mathematical questions and then fine-tune open-source LLMs to build mathematical models. For code generation, Luo et al. (2023) adapt the evol-instruct method to the coding domain, resulting in the WizardCoder model, which demonstrates superior coding abilities compared to generally trained LLMs. Additionally, Wei et al. (2023) enhance the capabilities of open-source code LLMs by using automatically generated high-quality instruction data based onexisting code snippets. Wang et al. (2023) utilize various resources of mixed quality and design a new conditioned reinforcement learning fine-tuning method to train the OpenChat model. Beyond the text modality, some studies propose fine-tuning pre-trained LLMs to understand other modalities. For instance, Liu et al. (2024a) construct a multi-modal instruction tuning dataset and develop the Llava model, which can understand both text and images.

Building on the aforementioned alignment approaches, LLMs are endowed with specialized capabilities that align with distinct user demands and application requirements (Liu et al., 2024b). In certain scenarios, deploying multiple LLMs with different abilities is necessary. For example, in multi-tenant serving, different LLMs may be needed to satisfy various users. Additionally, some complex tasks consist of multiple sub-tasks, each requiring different model capabilities. To address these tasks, we should organize and deploy a group of LLMs simultaneously. A straightforward question arises: why not use a single general LLM that encompasses all the necessary capabilities? For example, we could develop one model that can both understand images and generate code programs. To our knowledge, LLMs with various capabilities (e.g., GPT-44) typically have an enormous number of parameters, making them impractical for resource-limited situations (e.g., edge-side scenarios).

In pursuit of this objective, a field of research advocates for the minimization of expenses associated with multi-model serving. Delta-compression emerges as a crucial and viable approach in this context, offering the potential to decrease both storage requirements and GPU memory utilization in scenarios involving multiple models. The primary objective of delta-compression is to minimize the size of the delta weights between aligned and pre-trained LLMs (e.g., Llama-2-Chat and Llama-2). Ryu et al. (2023b) identify the low-rank nature of delta weights and enhance storage efficiency through low-rank approximation. Alternatively, Liu et al. (2024b) propose a 1-bit quantization approach, termed BitDelta, to further reduce the size of delta weights. They validate the effectiveness of BitDelta across various chat models, including Llama-2-Chat (Touvron et al., 2023), Vicuna5, and WizardLM (Xu et al., 2023). In this work, we reassess the performance of both low-rank and low-bit delta-compression methods across a diverse range of aligned LLMs, encompassing mathematical, coding, chat, and multi-modal LLMs. Our experimental results (e.g., Table 3) reveal that current low-rank and low-bit compression techniques may significantly degrade the performance of aligned LLMs. These results motivate us to explore more advanced delta-compression methods capable of achieving performance nearly equivalent to the aligned LLMs before compression.

Inspired by the long-tail distribution of singular values, as illustrated in Figure 1, we propose allocating higher-bit representations for singular vectors associated with larger singular values, given their greater impact on the approximation of delta weights prior to compression. Conversely, for singular vectors associated with smaller singular values, we employ low-bit formats to reduce the delta size. For singular values that are extremely small, we omit the corresponding singular vectors altogether. The resulting method, which we term Delta-CoMe, can be viewed as a hybrid of low-rank and low-bit compression techniques. Delta-CoMe outperforms both the low-rank compression method and BitDelta. Moreover, our method achieves performance comparable to that of the full

Figure 1: **Left**: illustration of BitDelta (Liu et al., 2024b), which employs 1-bit quantization for all the delta weights. **Middle**: illustration of low-rank compression (Ryu et al., 2023b), retaining the top-\(k\) singular values and the corresponding singular vectors. **Right**: illustration of the proposed Delta-CoMe method, which represents the singular vectors of larger singular values using high-bit vectors while compressing the singular vectors of smaller singular values into low-bit representations. This method is inspired by the long-tail distribution of singular values in delta weights.

aligned LLMs. For instance, Delta-CoMe attains an average score of 53.2 across eight representative tasks, closely matching the average score of 53.5 achieved by the aligned LLMs. In comparison, the scores of the low-rank and low-bit baselines are 47.8 and 49.3, respectively.

Further, we compare the performance of the involved delta-compression methods to LoRA (Hu et al., 2022), a widely-used delta-tuning approach (Wang et al., 2024). The primary distinction between delta-compression and delta-tuning is that delta-compression first optimizes the full model and then converts the modified weights into a lightweight module, reducing inference costs in multi-model settings. In contrast, delta-tuning primarily aims to lower training costs. Our experimental results demonstrate that the proposed Delta-CoMe method significantly outperforms LoRA, with scores of 41.9 versus 29.8, respectively. These results suggest that delta-compression can deliver superior performance in multi-model settings compared to delta-tuning.

Finally, Delta-CoMe can achieve more than 10\(\) GPU memory and disk storage savings, enabling the deployment of multiple models with limited resources. For practical application, we implement a Triton (Tillet et al., 2019) kernel tailed for Delta-Come, achieving approximately a 3\(\) speedup compared to the PyTorch implementation.

Our contribution can summarized as follows:

* We propose a mixed-precision delta-compression method that employs varying bit-widths for different singular vectors based on their singular values;
* We validate the effectiveness of the proposed method across different types of aligned LLMs of varying sizes, including mathematical, coding, chat, and multi-modal LLMs;
* We conduct in-depth analyses to understand the superior performance of our method over low-rank and low-bit baselines. Our method can also outperform delta-tuning approaches such as LoRA, demonstrating that the proposed delta-compression method is more practical for multi-model serving scenarios.
* We verify that the proposed method can achieve over 10\(\) saving in GPU memory and disk storage. By constructing a Triton kernel, we can achieve approximately a 3\(\) speedup, demonstrating the hardware compatibility of Delta-CoMe.

## 2 Related Work

### Delta-Compression

Recently, delta-compression has garnered increasing interest in the LLM community due to its ability to substantially diminish the storage and inference expenses associated with serving multiple models. GPT-Zip extends the GPTQ approach (Frantar et al., 2023) to compress the delta weights between aligned models and the backbone model, successfully using 2-bit delta weights to approximate the model. Additionally, they sparsify the quantized delta weights to further reduce storage costs. However, the sparsification technique can hardly reduce GPU memory usage during inference. Similarly, Yu et al. (2024) find that dropping the majority of the delta weights has a limited effect on the performance of aligned LLMs. Ryu et al. (2023) identify the low-rank property of delta weights and propose reducing the storage requirements of aligned LLMs through low-rank approximation. Yao & Klimovic (2023) adopt the concept of delta-compression to develop a multi-tenant serving system, DeltaZip. Most recently, Liu et al. (2024) introduced BitDelta, which successfully quantizes the delta weights into 1-bit. However, they only examined the performance of this compression method using chat LLMs, leaving a wide range of other types of aligned LLMs unexplored. In this work, we propose leveraging the benefits of both low-rank and low-bit compression methods by using varying bit-widths to represent different components of the delta weights. We evaluate representative low-rank and low-bit delta-compression methods across various types of aligned LLMs to provide a comprehensive comparison of these methods.

### Model Compression with Mix-Precision

Using mixed-precision to compress the model weights is an effective technique that has been investigated in many previous studies. SpQR (Dettmers et al., 2023) isolates a small number of outlier weights and retains them with high-precision, while keeping the other weights at low-precision,resulting in a significant performance improvement. Based on activations, Agile-Quant (Shen et al., 2024) utilizes token pruning to achieve mixed-precision quantization of both weights and activations. Bablani et al. (2023) propose employing varying bit-widths for different layers of the model, while Yao et al. (2021) propose quantizing activations and model weights with different precisions. In this work, we propose using mixed-precision compression for different singular vectors of the delta model, marking the first method to introduce mixed-precision compression for delta weights.

## 3 Approach

### Preliminaries

For a **backbone LLM**\(_{b}\), we can customize it into an **aligned model**\(_{a}\) for a specific purpose using advanced alignment algorithms (Xu et al., 2023; Luo et al., 2023; Yu et al., 2023; Luo et al., 2023; Wei et al., 2023; Liu et al., 2024a). In some practical scenarios, as mentioned in Section 1, we may need to deploy multiple LLMs at the same time. Formally, we should store and deploy a series of aligned LLMs \(\{_{a}^{(1)},,_{a}^{(N)}\}\), where \(N\) is the number of aligned models. The total size of the group of aligned models is \(N M\), where \(M\) is the size of one model. We use \(\) to represent the delta weights between the aligned model and the backbone model, which is given by

\[^{(n)}=_{a}^{(n)}-_{b}, \]

where \(^{(n)}\) is the \(n\)-th aligned LLM. Note that the sizes of \(^{(n)}\), \(_{a}^{(n)}\), and \(_{b}\) are the same.

Delta-compression aims to compress the delta weights \(^{(n)}\) into \(}^{(n)}\), where the latter has significantly fewer parameters. After delta-compression, we can only maintain one backbone model and \(N\) compressed delta models: \(\{_{b},}^{(1)},,}^{(N)}\}\). The total size is decreased from \(N M\) to \((1+ N) M\), where \(\) is the compression ratio. During inference, we can restore each aligned LLM in the following way:

\[}_{a}^{(n)}=_{b}+}^{(n)}. \]

For a good delta-compression method, we expect it can achieve a smaller \(\), while making \(}_{a}^{(n)}\) attain comparable performance with \(_{a}^{(n)}\). BitDelta (Liu et al., 2024b), to our knowledge, is the most recent study that successfully quantizes delta weights into 1-bit, which means that \(=1/16\) when the

Figure 2: Illustration of Delta-CoMe, where we utilize varying bit-widths for singular vectors with different singular values. Singular vectors corresponding to larger singular values are assigned higher bit-widths. For extremely small singular values, we omit the singular vectors (i.e., 0-bit).

original aligned model is represented by FP16 or BF16. In this work, we propose to improve the performance of delta-compression methods by inducing mixed-precision quantization, which will be detailed in the following sub-sections.

### Delta Decomposition

Previous works have investigated mixed-precision model compression methods at the token (Shen et al., 2024) or layer level (Bablani et al., 2023). For delta-compression, we propose employing mixed-precision for different singular vectors. We first use the SVD algorithm to decompose each delta matrix:

\[=^{}, \]

where \(^{h_{} h_{}}\), \(^{h_{} h_{}}\), \(^{h_{} h_{}}\), \(^{h_{} h_{}}\). Intuitively, the singular vectors associated with larger singular values have a greater impact on the approximation of the delta matrix \(\), we thus spend more bits for these vectors to reduce the quantization error.

### Mixed-Precision Quantization

Some representative quantization methods, such as GPTQ (Frantar et al., 2023), aims to minimize the following objective:

\[}=_{k}(,)= {argmin}_{}}||-}|| ^{2}, \]

where \(^{h_{}}\) is the input to the parameter \(\) and \(}\) is the corresponding quantized parameter. We use \(_{k}\) to denote the \(k\)-bit quantization algorithm. In this work, we employ the widely-used GPTQ method with group_size \(=128\) for cases where \(k>1\), and BitDelta for 1-bit quantization. For a certain group of singular vectors, let \(r_{}\) and \(r_{}\) represent the start and end indices, respectively. The quantization of the singular vectors can be given by

\[}[:,r_{}:r_{}]^{} =_{k}([:,r_{}:r_{ {end}}]^{},), \] \[}[:,r_{}:r_{}] =\] \[_{k}([:,r_{}],[r_{}:r_{},r_{},r_{}:r_ {}]}[:,r_{}:r_{}]^{} ).\]

As illustrated in Figure 2, we use varying quantization bits for different groups of singular vectors. By employing different mixed-precision strategies, we can control the trade-off between achieving a small delta size and maintaining high performance. We will provide more details about the exploration of the mixing strategy in Section 5.1.

## 4 Experimental Setup

To thoroughly investigate the proposed delta-compression method Delta-CoMe and the involved baselines, we examine the performance of different methods across several tasks, which are typical applications of recent aligned LLMs.

### Tasks

Mathematical Problem SolvingSolving mathematical problems is a challenging task for modern LLMs. For this task, we employ GSM8K (Cobbe et al., 2021) and MATH (Hendrycks et al., 2021) as the evaluation datasets, which are among the most popular mathematical benchmarks for LLMs. The reported score is accuracy, which is estimated by comparing the ground-truth number with the result calculated by the model.

Code GenerationThe ability to process code is crucial for numerous practical applications, including data analysis and LLM-based agents. For this task, we use HumanEval (Chen et al., 2021) and MBPP (Austin et al., 2021) as the evaluation datasets, which are widely used in recent studies. The reported score is the pass rate, indicating that the model-generated code can successfully run the test cases in one pass (i.e., pass@1).

ChatThe chat ability enables LLMs to interact with users, providing helpful and safe suggestions or responses based on the user's requests. A good chat model is expected to be well aligned with human preferences. For evaluating chat LLMs, we select TruthfulQA  and SafetyBench  as the evaluation datasets, which measure helpfulness and safety, respectively. The reported score is the accuracy, indicating that the choice of the model is correct.

Multi-Modal ChatVision-language models (VLMs) are attracting increasing attention due to their ability to process both text and images. Most recent VLMs are based on pre-trained visual encoders and language models, with the language models fine-tuned to understand the visual signal. For this task, we use GQA  and TextVQA . The reported score is the accuracy, indicating that the choice of the model is correct.

### Models

For the four tasks, we provide the backbone and aligned models in Table 1. All the model weights are open-sourced by the authors. We use both 7B and 13B models to make a thorough comparison between different delta-compression models. During inference, we use greedy search.

### Baselines

We employ two representative baselines, including SVD-based low-rank compression and BitDelta . For the low-rank baseline, we re-implement the method, while for BitDelta, we use the code open-sourced by the authors.6 All methods are evaluated on NVIDIA A100 GPUs.

## 5 Experimental Results

### Exploration of Mixed-Precision Strategies

To determine which bit-width to use and how many singular vectors to quantize, we conduct a preliminary experiment using different mixed-precision strategies. We examine three types of strategies: single-precision, double-precision, and triple-precision settings. The size of the compressed delta remains consistent across all settings. For single-precision compression, we set \(r_{}\) to 0, and \(r_{}\) is set to guarantee that the delta size is the same as BitDelta . In other words, the compression ratio \(\) for all settings is 1/16. Formally, for a delta matrix \(^{h_{} h_{}}\), \(r_{}\) and \(r_{}\) are set to satisfy the following equation:

\[k(r_{}-r_{})(h_{}+h_{})=16 h_{}h_{}, \]

where \(\) is set to 1/16 in our experiments, which is the same as BitDelta. In double-precision settings, \(r_{}\) and \(r_{}\) are set to 0 and 2, respectively, for the first precision. For the second precision, \(r_{}\)

    &  &  \\   & **Backbone** & **Aligned** & **Backbone** & **Aligned** \\   Math \\ Code \\ Chat \\ Multi-Modal \\  } & Llama-2 & WizardMath-v1.0 &  Llama-2 \\ Magicoders-CL \\  &  WizardMath-v1.0 \\ CodeLlama-Py \\  \\  & Llama-2 & Llama-2-chat & 
 Llama-2 \\ Vicuna-v1.5 \\  \\    & & & \\   

Table 1: Selected backbone and aligned models for the examined four tasks.

    & **Setting** & **GSM8K** \\   & 1 & 45.6 \\  & 2 & 50.6 \\  & **3** & **51.8** \\  & 4 & 51.6 \\  & 8 & 47.8 \\  & 16 & 43.3 \\   & 16 + 3 & 52.5 \\  & **8 + 3** & **53.1** \\  & 4 + 3 & 52.2 \\  & 3 + 2 & 52.3 \\   & 16 + 8 + 3 & 53.2 \\  & 8 + 4 + 3 & 52.2 \\   & **8 + 3 + 2** & **53.6** \\   

Table 2: Comparison of different mixed-precision strategies.

[MISSING_PAGE_FAIL:7]

models are Openchat-3.5-0106 (Wang et al., 2023) and Llama-3-8B-instruct, respectively. As shown in Table 5, our proposed Delta-CoMe method maintains superior performance over the two baselines, demonstrating its generalization ability.

### Delta-Compression vs. Delta-Tuning

A closely related area to delta-compression is delta-tuning. While delta-tuning primarily aims to reduce the training cost of LLMs, delta-compression focuses on reducing the storage and inference cost for multi-model serving. It remains unclear whether delta-compression outperforms delta-tuning when using the same delta size. To investigate this, we trained LoRA (Hu et al., 2022) modules for all model parameters to compare delta-compression with delta-tuning. We set the LoRA rank to 128 and the scale factor to 16, using a cosine warmup schedule with a warmup ratio of 0.04 and a peak learning rate of 1e-4. For each task, we trained the LoRA for 3 epochs. For mathematical LoRA, the training dataset is from Yu et al. (2023), which consists of 395K training examples. For code LoRA, the training set is from Wei et al. (2023), which contains 186K training examples. For a fair comparison, we fine-tune all model parameters using the same dataset as used for LoRA training. We then apply different delta-compression methods to both the fine-tuned mathematical and code LLMs.

Table 6 shows the results of both delta-tuning and delta-compression methods. The results reveal that LoRA achieves superior performance compared to the low-rank compression approach and BitDelta in the mathematical task. However, when it comes to the coding task, LoRA exhibits lower performance than both low-rank compression and BitDelta. By contrast, our proposed delta-compression method (i.e., Delta-CoMe) consistently outperforms LoRA across all four benchmarks. Specifically, the performance of our method is close to that of the uncompressed aligned models (41.9 vs. 43.0), while the average score of LoRA is only 29.8. These results imply that learning an aligned model and then compressing it can achieve better results than delta-tuning.

### Inference Speed and Memory Cost

For practical applications, we also examine the inference speed and memory cost of Delta-CoMe. In terms of inference speed, we implement a Triton kernel. Figure 3 shows the inference time of the PyTorch and Triton implementation of Delta-CoMe. Overall, we can achieve approximately a 3\(\) speedup across different settings. As Figure 2(a) shows, we first conduct an ablation experiment on varying batch sizes. Our implemented Triton kernel is consistently faster than the PyTorch implementation with different batch size settings. As Figure 2(b) depicts, we conduct an ablation experiment on hidden size to verify the adaptability of the Triton kernel to models of different sizes.

    &  &  &  \\    & **GSM8K** & & & & **HumanEval** & & **MBPP** \\  Backbone & 11.0 & 2.9 & 10.5 & 17.7 & 10.5 \\ Aligned & 65.4 & 18.6 & 43.2 & 44.9 & 43.0 \\  LoRA & 58.3 & 11.4 & 17.6 & 31.8 & 29.8 \\ Low-Rank & 54.8 & 5.5 & 26.2 & 42.6 & 32.3 \\ BitDelta & 47.8 & 10.7 & 26.2 & 41.9 & 31.7 \\ Delta-CoMe & **65.1** & **18.0** & **39.6** & **44.9** & **41.9** \\   

Table 6: Comparison between LoRA and delta-compression methods.

    &  &  &  &  \\    & & **GSM8K** & & & & & & & & & \\  Backbone & 1 & 52.2 & 28.7 & 61.0 & 42.1 & 44.8 & 33.5 & 43.6 & 43.9 & 43.7 \\ Aligned & 1 & 77.1 & 73.2 & 78.4 & 61.0 & 78.5 & 61.6 & 68.2 & 51.6 & 68.7 \\  Low-Rank & 1/16 & 50.5 & 52.4 & 76.9 & 49.0 & 68.3 & 46.3 & 67.5 & 51.3 & 57.8 \\ BitDelta & 1/16 & 70.3 & 54.9 & 78.4 & 50.0 & 67.6 & 56.1 & 68.6 & 50.2 & 62.0 \\ Delta-CoMe & 1/16 & **74.8** & **59.8** & **78.9** & **62.6** & **77.1** & **60.4** & **69.1** & **51.8** & **66.8** \\   

Table 5: Results on other representative backbones. The backbone of Openchat-3.5-0106 (Wang et al., 2023) is Mistral-7B-v0.1 (Jiang et al., 2023). Both Mistral-7B-v0.1 and Llama-3-8B are widely-used open-source LLMs.

The Triton kernel can maintain a substantial speedup across different hidden sizes, demonstrating its ability to adapt to various models.

In Table 7, we show the GPU memory cost of deploying multiple aligned models that are fine-tuned from Llama-2-7B. The model parameters are represented in BF16 on a single 80G GPU. Without delta compression, a single GPU can not support 8 models, let alone more models. Using our proposed delta-compression method, we can load up to 50 models into one GPU, significantly reducing the deployment cost.

## 6 Analysis

### Analysis of Quantization Error

To better understand the performance of various delta-compression methods, we estimate the quantization error as defined in Eq. (4). It is important to note that the error we calculate differs from that of GPTQ. Specifically, we use the mean square error between the activations of the uncompressed aligned model and those of the combination of the backbone model and the compressed delta model. The error is estimated on the GSM8K test set using WizardMath-7B-v1.0 as the aligned model and Llama-2-7B as the backbone model. Since different layers have varying impacts on the final output (Wu et al., 2023), we distinguish low-, medium-, and high-layers when estimating the average quantization error. Specifically, the first 11 layers are designated as low-layers, the 12th to 22nd layers as medium-layers, and the last 10 layers as high-layers. Moreover, as outliers play a critical role in model compression (Dettmers et al., 2023; Lin et al., 2023), we also calculate the average error on outlier parameters. For each delta matrix \(\), we select the top 1% of columns with the largest absolute values as outliers. Table 8 presents the results. We find that the average error of our methods (i.e., "Single" and "Triple") is substantially lower than both the low-rank baseline and BitDelta. Furthermore, the error of "Triple" is consistently less than that of "Single," reaffirming the necessity of mixed-precision compression for delta weights.

### Case Study

We also present a detailed case study in Figure 4. Three delta-compression methods are examined: BitDelta, single-precision compression, and triple-precision compression. The reference answer is "104 hours". We observe that BitDelta makes mistakes initially, while single-precision compression generates an incorrect intermediate result at the second reasoning step. In contrast, our mixed-precision delta-compression method calculates the correct final answer.

  
**Num. of Models** & **w/o DC** & **w/ DC** \\ 
2 & 26.67 & 15.54 \\
4 & 52.24 & 18.17 \\
8 & OOM & 23.44 \\
16 & OOM & 33.95 \\
32 & OOM & 55.06 \\
50 & OOM & 78.70 \\   

Table 7: GPU memory cost (GB).

Figure 3: Inference time of the PyTorch and Triton implementation of Delta-CoMe.

[MISSING_PAGE_FAIL:10]