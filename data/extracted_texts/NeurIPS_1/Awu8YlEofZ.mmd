# GS-Blur: A 3D Scene-Based Dataset

for Realistic Image Deblurring

 Dongwoo Lee\({}^{1}\)   Joonkyu Park\({}^{1}\)   Kyoung Mu Lee\({}^{1,2}\)

\({}^{1}\)Dept. of ECE&ASRI, \({}^{2}\)IPAI, Seoul National University, Korea

{dongwoo.lee, jkpark0825, kyoungmu}@snu.ac.kr

###### Abstract

To train a deblurring network, an appropriate dataset with paired blurry and sharp images is essential. Existing datasets collect blurry images either synthetically by aggregating consecutive sharp frames or using sophisticated camera systems to capture real blur. However, these methods offer limited diversity in blur types (blur trajectories) or require extensive human effort to reconstruct large-scale datasets, failing to fully reflect real-world blur scenarios. To address this, we propose GS-Blur, a dataset of synthesized realistic blurry images created using a novel approach. To this end, we first reconstruct 3D scenes from multi-view images using 3D Gaussian Splatting (3DGS), then render blurry images by moving the camera view along the randomly generated motion trajectories. By adopting various camera trajectories in reconstructing our GS-Blur, our dataset contains realistic and diverse types of blur, offering a large-scale dataset that generalizes well to real-world blur. Using GS-Blur with various deblurring methods, we demonstrate its ability to generalize effectively compared to previous synthetic or real blur datasets, showing significant improvements in deblurring performance. The dataset is available at: [https://github.com/dongwoohhh/GS-Blur](https://github.com/dongwoohhh/GS-Blur)

## 1 Introduction

Single-image deblurring is a crucial challenge in image restoration, focusing on removing blur caused by motion between the camera and objects. To address this, pioneering approaches  have proposed paired datasets, consisting of blurry images and their corresponding sharp images, designed for training deep neural networks. Specifically, their efforts to create deblurring datasets have primarily relied on two methods: _synthetic_ and _real_ data generation. However, both approaches heavily depend on heuristic human capture techniques, often leading to limitations such as incomplete coverage of large-scale datasets and inadequate representation of diverse blur types (_i.e._, blur length and directions).

Since capturing blurry and sharp images simultaneously with a single sensor is challenging, earlier methods  have resorted to synthetically generating blurry images from consecutive sharp frames. They achieve this by capturing consecutive sharp frames using high-speed cameras and then aggregating these neighboring frames to create synthetic blurry images. Although this allows for easy generation of blurry images, the resulting blur is derived from highly discrete frames, which leads to differences from real-world blur and fails to generalize well to real-world blurry images.

Later methods  have introduced specialized camera systems equipped with beam-splitters. These systems divide the light entering the camera lens into two image sensors with varying exposure times, producing sharp images from the shorter and blurry images from the longer-exposed sensor. While they generate a more realistic blur, making it better suited for real-world applications, they present several challenges. First, they require precise camera system design, complicating the use of diverse camera models. Indeed,  and  obtained their datasets from a single camera model, theSony A7R3 and machine vision camera, respectively. Second, despite the use of different exposure times for the two sensors, one capturing blurry images and the other sharp images, discrepancies in image signal processing (ISP) can arise, requiring additional image processing such as white balancing and color mapping. Moreover, the datasets heavily rely on human capture, which limits their scale and results in restricted blur trajectories in terms of blur length and direction.

In this paper, we explore methods to synthesize realistic blurry images to improve deblurring quality for real-world blurry images generally. To this end, we present a novel dataset, GS-Blur, which synthesizes blurry images using 3D Gaussian Splatting (3DGS) . Specifically, we utilize the existing large-scale multi-view dataset, MVImgNet , to train 3DGS on sharp multi-view images, enabling the reconstruction of 3D scenes. Then, from these reconstructed scenes, we use two camera views to render images: one from a fixed position and one from a moving position along randomly generated motion trajectories, corresponding to sharp and blurry images, respectively. Specifically, following the method in [23; 22; 46], we aggregate multiple images from cameras along the trajectory to create blurry images, but unlike [23; 22; 46]'s use of highly discrete frames, we employ denser frames by positioning multiple cameras along the trajectories, resulting in more realistic blur. Moreover, by utilizing various degrees for the blur trajectories, our GS-Blur dataset includes diverse blur trajectories in terms of both blur length and direction. By using MVImgNet, which consists of large-scale multi-view images from diverse camera models, our GS-Blur provides diverse deblurring image pairs with significant advantages, showing generalizability, as detailed in the experiments Section 4.3. Additionally, we conduct comprehensive ablation studies to justify the reconstruction of our GS-Blur dataset in Section 4.4. The samples of GS-Blur are shown in Figure 1.

## 2 Related Works

**Image deblurring methods.** As blur commonly occurs in various situations [31; 24; 25; 28], early deblurring methods [11; 23; 26; 27; 3; 45; 15] modeled a blurry image as a convolution of a 2D blur kernel with a latent sharp image, optimizing the sharp image for a known blur kernel using Richardson-Lucy deconvolution. However, these methods struggled with real-world scenarios where

Figure 1: **Examples of the proposed GS-Blur dataset. The left half of the frames displays synthetically generated blur, while the right half exhibits sharp pairs.**

blur kernels are unknown. Later, deep learning shifted the field to learning-based approaches, with models like DeblurGAN  and DeepDeblur  restoring sharp images without blur kernel estimation. Advanced models such as NAFNet  and Restormer  use channel attention modules, while SwinIR  introduce Vision Transformer [5; 18] architectures. Despite architectural advances, these methods are data-driven, requiring extensive training data that aligns well with real-world blur for effective generalization.

**Deblurring datasets.** Table 1 shows the overview of deblurring datasets. Earlier, several synthetic datasets [35; 23; 22; 33; 14; 46] using high-speed cameras have been proposed to train learning-based deblurring methods. DVD , GoPro , and REDS  create blurry images by averaging consecutive sharp frames to simulate motion blur. Similarly, HIDE  synthesizes blur with densely annotated foreground human bounding boxes, and HFR-DVD uses a higher-speed camera (_e_.\(g\)., SONY DSC-RX10 IV) to capture video frames, resulting in more realistic blurs. However, even with high-speed cameras, the time interval between frames is too discrete to accurately capture continuous real-world blur patterns, resulting in less effective generalization to real-world blurry images.

Other approaches [47; 30; 29] use beam splitter camera systems to capture paired images, addressing synthetic dataset limitations. These systems capture blurry images with longer exposure and sharp images with shorter exposure, accurately mimicking real-world blur. However, they face several challenges. First, they require the precise design of the camera system, which is a labor-intensive task. Moreover, due to the need for a sophisticated system, these datasets are restricted to specific camera models, showing less generalizability to blurry images captured by different cameras. Despite the implementation of the specialized camera system, utilizing different exposure times for the two image sensors, where one captures blurry images and the other sharp images, can lead to discrepancies in different light intensities reaching each sensor. This difference requires processing the images with different ISO settings, leading to disparities in tone or color between the blurry and sharp images. As a result, additional ISP processing is required to match them. Furthermore, their motion trajectories highly rely on humans, failing to capture the diverse blur patterns found in real-world scenarios.

In contrast, our GS-Blur, though synthetically derived, offers greater scale, diverse exposure times, and various resolutions compared to previous datasets, as shown in Table 1. Furthermore, the motion trajectories in GS-Blur are randomly generated in 3D space, effectively encompassing potential real-world motion trajectories. Figure 2 compares the motion trajectory distributions of synthetic  and real deblurring datasets  with our GS-Blur dataset. Here, each point in the figure represents the t-SNE  projection of a motion trajectory, computed using the optical flow  from the provided consecutive sharp frames. As shown in Figure 1(a), the distribution of the synthetic dataset (\(\)) does not overlap with the distribution of the real dataset (\(\)), indicating that the previous synthetic dataset fails to cover the motion diversity of real-world images. On the other hand, Figure 1(b) shows that the distribution of GS-Blur (\(\)) overlaps with the real distribution, demonstrating that GS-Blur covers most real blurry images' distributions and exhibits a wider range of blur diversity.

**Novel view synthesis.** Unlike previous synthetic datasets that simulate blur by aggregating images, our approach recovers 3D scenes and moves the view within these 3D spaces to mimic camera shakes with varying trajectories, making our work closely related to novel view synthesis. Earlier, Neural Radiance Fields (NeRF)  made significant strides in 3D vision tasks, particularly in photo-realistic novel view synthesis. Despite the potential of NeRF's implicit neural representation (INR) to become a widely used 3D representation, NeRF-based methods [36; 6; 1; 21] face challenges in achieving real-time novel view synthesis without compromising visual quality. To address this, 3D Gaussian Splatting (3DGS)  streamlines the NeRF framework through point-based 3D Gaussians and tile-based rasterization, enabling high-quality, real-time novel view synthesis at 1080p resolution.

Table 1: **Comparison of existing datasets with our new GS-Blur dataset.**

## 3 GS-Blur dataset

### Preliminary: 3D Gaussian Splatting

3D Gaussian Splatting (3DGS)  models a 3D scene from multi-view images using Gaussian primitives \(\{_{k},_{k},_{k},_{k}\}_{k}\), where each parameter represents the position \(_{k}\), covariance \(_{k}\), opacity \(_{k}\), and spherical harmonic coefficients \(_{k}\) of a sparse 3D point \(k\), initialized from SfM . When rendering an image, the Gaussian primitives are projected onto the camera's image plane, and the color of each pixel \(\) is computed using point-based \(\)-blending  as follows:

\[()=_{k}_{k}(_{k};_{ k})_{j=1}^{k-1}(1-_{j}), \]

\[_{k}=_{k}e^{-(-_{k}^{ })^{T}_{k}^{^{-1}(-_{k}^{})}}. \]

The color of the \(k\)-th Gaussian is computed using the spherical harmonic function \((_{k};_{k})\) for the camera's viewing direction \(_{k}\), and the density \(_{k}\) is determined from the 2D projected Gaussian weights \(_{k}^{}\) and \(_{k}^{-1}\) as introduced in . The point-based \(\)-blending in Equation 1 essentially follows the same image formation model as NeRF . However, compared to NeRF, the explicit representation of Gaussian primitives allows for significantly faster rendering. Specifically, the cost-effective Gaussian rasterization replaces the computationally intensive multi-layer perception and ray-point sampling approach used in NeRF. As a result, 3DGS achieves high-quality real-time view synthesis and reduces training time to tens of minutes. In this work, we use the fast training and rendering speeds of 3DGS to generate realistic blurry images by densely sampling views along a moving camera trajectory.

### Preliminary: MVImgNet dataset

MVImgNet  is a large-scale multi-view image dataset comprising 6.5 million frames from 219,199 videos, covering objects from 238 classes. These videos are captured using various common cameras (_e.g._, smartphones), reflecting a diverse range of real-world image distributions. On this basis, we leverage this dataset to reconstruct our GS-Blur dataset. Specifically, we manually selected 26 classes suitable for constructing a deblurring dataset, with the detailed class information provided in our appendix.

### Pipeline for blur synthesis of GS-Blur

Figure 3 provides an overview of the construction process for our GS-Blur dataset. To collect GS-Blur, we first train 3DGS using a set of \(\) posed sharp images \(\{(_{i})\}_{i}\) with their corresponding

Figure 3: **The overall pipeline for generating blurry and sharp image pairs in our GS-Blur dataset. To this end, we first train a 3D Gaussian Splatting model to reconstruct 3D scenes from multi-view images. Then, from these reconstructed 3D scenes and randomly generated motion trajectory \(\), we render sharp images \((_{0.5(_{a}+_{c})})\) from a fixed camera view and blurry images \(()\) from a moving camera view. Specifically, we render \(\) sharp images along the motion trajectory and then average these sharp frames to synthesize the blurry image.**camera poses \(\{_{i}\}_{i}\). Here, each scene is trained with the 3DGS model for 30,000 iterations. Then, from the reconstructed 3D scenes, we render an image \(()\) from any arbitrary camera view \(\). Specifically, to simulate the process of capturing blurry images in real-world scenarios, where moving cameras create blurred images while the shutter is open, we mimic this by moving the camera along a 3D trajectory. We then create the blurry image by accumulating multiple rendered images, each captured by a camera along the motion trajectory. Let \(=\{_{}\}_{[_{o},_{c}]}\) denote continuous camera poses along the trajectory that generates a motion-blurred image \(()\), and we can synthesize the blurred image from rendered sharp images of 3DGS as follow:

\[()=g(_{_{o}}^{_{c}}g^{-1}(( _{}))d) g(}_{t=1} ^{}g^{-1}((_{t}))). \]

Here, the Camera Response Function (CRF) \(g\) maps an image from linear RGB space to sRGB space, with \(g^{-1}\) being its inverse function. We accumulate rendered sharp images in the linear space and then convert the accumulated blurry image to sRGB space, following the approach in . In real cameras, the RGB color is continuously accumulated while the shutter is open. To simulate this continuous accumulation, we approximate it using a finite sum of \(\) intermediate sub-frames, which is valid when \(\) is sufficiently large. Different from the real camera systems, sub-frame rendering through 3DGS does not degrade image quality, regardless of the \(\) value. In practice, we set \(=121\) and select the middle sub-frame as the ground truth sharp image pair. In other words, the sharp images are rendered from a fixed camera position at \(_{0.5(_{o}+_{c})}\); therefore, a sharp image is represented as \((_{0.5(_{o}+_{c})})\).

**Random Blur Generation.** Generating deblur data through novel view synthesis offers the distinct advantage that blurry images can be synthesized from randomly generated camera motions. While any kind of polynomial curve or spline model can function as a camera motion trajectory, we adopt the random-order Bezier curve, which is widely used in prior works .

For the camera motion generation given initial camera pose \(_{i}\) in training views, we follow the subsequent procedures: 1) Randomly generate a linear motion trajectory in 6 degrees of freedom (6DOF) pose space. 2) Generate an \(n^{th}\)-order Bezier curve by randomly perturbing the points that divide the linear motion trajectory into \(n+1\) equal segments. 3) Align the center pose of Bezier curve to be \(_{i}\) and sample \(\) camera poses from the curve. Note that we randomly select the curve parameters \(\{n,_{t},_{r}\}\), where \(n\) denotes the order of Bezier curve, \(_{t}^{3}\) represents the length of the curve and \(_{r}^{3}\) indicates the shift in orientation, respectively. Here, the \(3\) dimensions of \(_{t}\) and \(_{r}\) correspond to the \(x\)-, \(y\)-, and \(z\)-axis of the 3D space.

Since the randomly selected curves, which correspond to camera movements, directly affect the formation of blur, we choose the parameters \(_{t}\) and \(_{r}\) within pre-defined boundaries to reflect realistic blur. Specifically, we randomly sample the 3D length \(_{t}\) from the range \([0,0.7]\), considering the blur

Figure 4: **Visualization of randomly generated 3D trajectories and their corresponding motion-blurred images \(()\).****(Left)** By using different trajectories \(\) for different images, we can generate multiple blurry images corresponding to a single sharp image. Here, we use the same trajectory \(\) for both the object and the background. **(Right)** By using different motion trajectories for the object and background, \(_{obj}\) and \(_{bg}\), respectively, we can simulate rigid-body motion blur. Note that the first and fourth columns in the figure show sharp images with fixed camera views.

length in previous datasets, and the 3D orientation \(_{r}\) from the range [-1.5\({}^{}\), 1.5\({}^{}\)], accounting for the minimal impact of rotation during short exposure times in real-world blurry image capturing.

**1-to-n blur generation.** An additional advantage of the proposed dataset generation is the capability for 1-to-n blur generation. Existing datasets  collected with high-speed or beam-splitter cameras typically yield only one blurred image per sharp image or adjust the blur magnitude by altering the number of frames synthesized. In contrast, our method allows for the synthesis of multiple corresponding blurry images for a single sharp image by generating independent trajectories multiple times, which is crucial in preventing overfitting in deblurring architectures. Figure 4 (left) displays examples of multiple (n) blurry images \(()\) corresponding to a single sharp image, using different blur trajectories.

**Rigid-body Object Motion Blur.** The primary limitation of generating deblur data with 3DGS is its restriction to rendering static scenes, allowing only for motion blur caused by camera movement. However, in real-world blurry images, motion blur often arises from moving objects like pedestrians or vehicles, independent of camera motion. To address this, we leverage the object's binary segmentation mask \(_{s}\{0,1\}\) to simulate rigid-body motion. Specifically, we generate two random motion trajectories: one trajectory \(_{obj}\) to create rigid-body motion blur for the object \((_{obj})\), and another trajectory \(_{bg}\) to simulate camera motion blur in the background \((_{bg})\). Using these two trajectories and the object mask \(_{s}\), we apply alpha matting to produce a blurry image where the object and background are distinctly blurred by their respective motions. Here, the alpha value \(_{s}(_{obj})\) for the mapping is calculated by averaging after 3D warping \(_{s}\) along \(_{obj}\) as follows:

\[_{s}(_{obj})=}_{t=1}^{ }(_{s};_{t})}, \]

\[(_{obj},_{bg})=_{s}(_{obj} )(_{obj})+(1-_{s}(_{obj})) (_{bg}). \]

The object mask of each sub-frame is computed by backward warping \((_{s};_{t})\), where the camera intrinsic and the depth and the pose of the sub-frame \(t\) are parameters of the warping function \(:^{H W}^{H W}\). Note that applying the square-root to the alpha value results in more natural blending at object boundaries, since the background color has already been mixed at the boundaries when synthesizing \((_{obj})\). Figure 4 (right) shows examples of blurry images \((_{obj},_{bg})\) generated using different random motion trajectories, \(_{obj}\) and \(_{bg}\), for object and background, respectively.

**Noise addition.** 3DGS employs spherical harmonics to model view-dependent RGB colors, which leads to smooth renderings even when the input images contain slight noise. However, using these smooth renderings to train deblurring deep networks diminishes their generalizability to real-world blurry images, since the networks may fail to learn the necessary features that are typical in naturally occurring noise and complex blur variations. Therefore, we integrate the realistic blur synthesis pipeline introduced in RSBlur  to synthesize realistic image noise into the blurred renderings generated from 3DGS. To this end, we convert images from the sRGB space to the camera RAW space, then add Poisson and Gaussian noises, and finally convert them back to the sRGB space, approximating the noise generation principles that occur in real camera systems.

**Multi-Resolution.** As MVImgNet , the source of our GS-Blur, predominantly contains object-centric scenes where objects are often captured close to the camera view, considerable pixels of the rendered images may consist solely of objects. However, during training deblurring network, image patches are typically cropped to smaller size (_e.g._, \(256 256\)), potentially leading to ineffective training due to the overwhelming presence of objects. To address this, we introduce random down-scaled renderings \(\{ 1/2, 1/3, 1/4\}\) from the rendered high-resolution images (_e.g._, \(1920 1080\)) as data augmentation, enabling a broader 3D region to be included within the cropped image patch. However, note that our downsampling differs from that of previous datasets , where downsampling is aimed at reducing noise. In our case, we add noise after downsampling.

Finally, we reconstruct \(3,408\) scenes from the subset of MVImgNet and train 3DGS to obtain \(156,209\) sharp renderings for blur generation. By rendering multiple random blurry pairs and utilizing down-scaled rendering augmentation, we have constructed a GS-Blur dataset consisting of a total of \(752,335\) blurry images.

[MISSING_PAGE_FAIL:7]

### Reliability of sharp frames

Unlike previous datasets [23; 22; 30; 47; 29], where only blurry images are generated through a synthetic pipeline, both sharp and blurry images in our GS-Blur dataset are synthesized through rendering. As a result, the generated sharp images may contain floating point artifacts that do not accurately represent clean images. To address this, we have measured the PSNR between the ground truth and rendered sharp images for each 3D-reconstructed scene, removing scenes that fall below a certain PSNR threshold. Specifically, if any view showed a PSNR drop of more than 3dB from the mean, the entire scene was classified as failed and excluded from the dataset. This method ensures that only high-quality scenes are included, reducing the impact of floating point-induced blurring in the GS-Blur dataset. Finally, we evaluated our dataset by measuring PSNR and SSIM from multi-view images captured by camera angles not used in 3DGS training, resulting in PSNR=\(36.73\) and SSIM=\(0.957\), confirming the reliability of our sharp frames.

### Generalization of blurry frames

**Cross-validation with previous deblurring datasets.** To demonstrate that our dataset generalizes well to diverse blurry images, Table 2 compares cross-validation results using our GS-Blur dataset with conventional deblurring datasets, including synthetic [23; 22] and real [47; 29] blurry images. The results indicate that, except when the training and evaluation sets match, models trained on our GS-Blur dataset consistently achieve the best results. This highlights our dataset's generalizability to both synthetically generated and real blurry images, regardless of the used model architectures. Furthermore, Figure 5 shows visual results from various benchmark datasets [23; 22; 47; 29] using NAFNet  trained on different datasets. As shown, except when the training and testing sets match, the model trained on our GS-Blur consistently delivers satisfactory results across all benchmark datasets. Please refer to the appendix for visual comparisons using other models [4; 40].

**Generalization on real blurry images.** While BSD and RSBlur provide realistic blurry images using a beam splitter, their specialized cameras (_e.g_., machine vision) may differ from other camera models. Therefore, we present a quantitative comparison on real-blurry images  in Table 3. Since this dataset contains only blurry images without sharp counterparts, we use recent non-reference-based metrics (_e.g_., MUSIQ  and TOPIQ ) for evaluation. As shown, the model trained on our GS-Blur achieves the best results, with visual comparisons available in Figure 6.

   & &  &  &  &  \\ PSNR thresholding & \# Scenes & PSNR & SSIM & PSNR & SSIM & PSNR & SSIM & PSNR & SSIM \\  Failed & 1622 & 31.01 & 0.945 & 30.26 & 0.919 & 31.36 & 0.934 & 32.05 & 0.865 \\ Passed + Failed & 5030 & 31.46 & 0.948 & 30.52 & 0.923 & **31.42** & 0.935 & 32.13 & 0.866 \\ Passed (Ours) & 3408 & **31.49** & **0.949** & **30.54** & **0.924** & 31.37 & **0.941** & **32.30** & **0.868** \\  

Table 4: **Quantitative comparison when training NAFNet  on various thresholding strategy.** In the table, ‘Failed’ refers to 3D scenes with significant drops in PSNR that did not meet the threshold, while ‘Passed’ refers to scenes with favorable PSNR that successfully passed the threshold.

   Train Set & MUSIQ  & TOPIQ  \\  GoPro & 37.305 & 0.262 \\ REDS & 38.059 & 0.261 \\ BSD & 45.192 & 0.318 \\ RSBlur & 41.058 & 0.314 \\ 
**GS-Blur** & **48.004** & **0.332** \\  

Table 3: **Quantitative comparison on real blurry images .**

[MISSING_PAGE_FAIL:9]

of Table 5, our approach in the last row, which incorporates rigid-body object motion, consistently enhances performance across various benchmark datasets.

**Noise addition.** Real-world images often contain noise, and adding noise to blurry images can make them more representative of real-world scenarios, leading to improved performance. Specifically, as both synthetic datasets (GoPro ) and real datasets (BSD  and RSBlur ) include noise in their testing sets, training the deblurring network on our noise-added GS-Blur dataset results in mostly better performance, as compared in the fourth and the last rows of Table 5. However, REDS  suppresses noise in its evaluation set by downscaling the images by \(\), leading to worse performance when the network is trained on the noise-added GS-Blur. Nevertheless, since blurry images from real datasets  often contain noise, the addition of noise significantly enhances performance on those datasets.

**Multi-resolution.** When comparing the fifth and last rows of Table 5, which represent the performance with fixed- and multiple-resolution images in the GS-Blur dataset reconstruction, there is consistent improvement in overall performance with multiple-resolution images. This improvement can be attributed to the characteristics of the MVImgNet dataset , which mainly contains objects close to the camera. By incorporating multiple resolutions, our approach effectively simulates various distances between the camera and objects, resulting in more realistic images and consistently better performance across the evaluated metrics.

## 5 Limitations

While our GS-Blur dataset effectively mimics real blur and demonstrates its value through cross-validation across various benchmark datasets , it has two potential limitations. First, although the GS-Blur dataset mimics real blur by moving the camera view along random blur trajectories and simulates rigid-body object motion with different blur trajectories for objects \(_{obj}\) and background \(_{bg}\), it cannot consider objects that change shape over time. For example, since the 3D scenes are based on static images, dynamic actions such as the movement of pedestrians' arms and legs during walking or the rotating wheels of a moving vehicle are not represented in GS-Blur. However, by utilizing recent advancements in 4D Gaussian Splatting , which can reconstruct temporal 3D scenes from multi-view video inputs, we plan to expand our dataset in future work to include such dynamic changes. Second, unlike conventional sharp images captured directly from cameras, our sharp images are rendered from 3D scenes, which may introduce a gap between them and real-world clean images. Nonetheless, we believe that recent advancements in 3D reconstruction and single-image generation  could improve our method, leading to a more accurate dataset reconstruction of our GS-Blur dataset.

## 6 Conclusion

In this paper, we introduce the GS-Blur dataset, the first deblurring dataset reconstructed from 3D scenes. Unlike previous methods that struggle to obtain diverse blur trajectories, our approach easily simulates various blur trajectories by moving the camera view within the 3D scenes. By using our dataset, we demonstrate improved deblurring quality both qualitatively and quantitatively across various benchmark datasets and deblurring networks, demonstrating the high generalizability of GS-Blur. Furthermore, through extensive experiments, we validate the effectiveness of each component in the pipeline used to reconstruct blurry images in our GS-Blur dataset.