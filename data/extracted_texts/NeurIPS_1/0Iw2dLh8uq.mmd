# Multi-Agent Meta-Reinforcement Learning: Sharper Convergence Rates with Task Similarity

Weichao Mao

University of Illinois Urbana-Champaign

weichao2@illinois.edu

Haoran Qiu

University of Illinois Urbana-Champaign

haoranq4@illinois.edu

Chen Wang

IBM Research

chen.wang1@ibm.com

Hubertus Franke

IBM Research

frankeh@us.ibm.com

Zbigniew Kalbarczyk

University of Illinois Urbana-Champaign

kalbarcz@illinois.edu

Ravishankar K. Iyer

University of Illinois Urbana-Champaign

rkiyer@illinois.edu

Tamer Basar

University of Illinois Urbana-Champaign

basar1@illinois.edu

###### Abstract

Multi-agent reinforcement learning (MARL) has primarily focused on solving a single task in isolation, while in practice the environment is often evolving, leaving many related tasks to be solved. In this paper, we investigate the benefits of meta-learning in solving multiple MARL tasks collectively. We establish the first line of theoretical results for meta-learning in a wide range of fundamental MARL settings, including learning Nash equilibria in two-player zero-sum Markov games and Markov potential games, as well as learning coarse correlated equilibria in general-sum Markov games. Under natural notions of task similarity, we show that meta-learning achieves provable sharper convergence to various game-theoretical solution concepts than learning each task separately. As an important intermediate step, we develop multiple MARL algorithms with initialization-dependent convergence guarantees. Such algorithms integrate optimistic policy mirror descents with stage-based value updates, and their refined convergence guarantees (nearly) recover the best known results even when a good initialization is unknown. To our best knowledge, such results are also new and might be of independent interest. We further provide numerical simulations to corroborate our theoretical findings.

## 1 Introduction

Many real-world sequential decision-making problems involve multiple agents interacting in a shared environment, a scenario commonly captured by game theory and addressed using multi-agent reinforcement learning (MARL). Existing research in MARL has primarily focused on solving a single task (i.e., a game) independently. In practice, however, one often needs to collectively solve a set of similar tasks due to the dynamically evolving environment. For example, in sponsored search auctions , the advertising spaces and search results are dynamic, and each bidder with an active bid will participate in a sequence of related auctions. In multi-robot cooperation , the learning agents are often first pre-trained in simplified environments and are then asked to quickly adapt to more complicated ones. In cloud computing , a learning-based autoscaling policy needs to achieve fast model adaptation to deal with varied application workloads or constantly evolving cloud infrastructures. All of these intriguing applications call for the development of intelligent multi-agent systems that can continuously build on previous experiences to enhance the learning of new tasks.

Meta-learning, or learning-to-learn , is a rapidly developing approach that is particularly suitable for learning in a set of related tasks. In essence, meta-learning studies the use of data from existing tasks to learn representations or model parameters that enable quick adaptation to new tasks. By exploiting the knowledge obtained from prior tasks, the meta-learner can ideally solve an unseen task using much fewer training samples than learning from scratch, especially when the tasks share some inherent similarities. Despite many empirical successes , the theoretical results of meta-learning in multi-agent scenarios are still relatively lacking. It remains elusive whether meta-learning can provably expedite the convergence of MARL, and if so, what the proper task similarity assumptions to impose are. In fact, it is even unclear whether a meta-learner converges at all in a highly non-stationary system with loosely-coupled learning agents and diverse task setups.

In this paper, we make an initial attempt toward characterizing some of the central theoretical properties of meta-learning in a wide range of fundamental MARL settings. We focus on the classic model-agnostic meta-learning (MAML)  type of algorithms that aim to learn a good initialization for quick adaptation to new tasks. To study the convergence rate of MAML, an important prerequisite is to understand how the convergence of MARL algorithms depends on the quality of policy initialization. However, the convergence guarantees of most existing MARL algorithms are initialization-independent: They fail to track how the sub-optimality of the initial policy propagates during the learning process, and only provide pessimistic guarantees with respect to worst-case initialization. As a crucial intermediate step to meta-MARL, we need to establish refined _initialization-dependent_ convergence guarantees for MARL. Our main contributions are thus summarized as follows.

**Contributions.** 1) For learning Nash equilibria (NE) in two-player zero-sum Markov games, we first propose an MARL algorithm blessed with a refined convergence analysis that explicitly characterizes the dependence on policy initialization (Section 3.1). Our algorithm runs optimistic online mirror descent for policy optimization and performs stage-based value function updates. Even when initialized with random policies, our algorithm still matches the best-known convergence rates in the literature except for an extra logarithmic term. Our algorithm and analysis appear to be new and might be of independent interest. 2) Based on such refined analysis, we show that meta-learning provably achieves faster convergence to NE when learning a sequence of "similar" zero-sum games collectively, where our similarity metric naturally depends on the closeness of the games' NE policies (Section 3.2). 3) For learning NE in Markov potential games (MPGs), we show that a simple refinement of an existing algorithm suffices to provide initialization-dependent guarantees. We establish sharper convergence rates of meta-learning when the MPGs have similar potential functions (Section 4.1). In addition, with a properly chosen policy update rule, we prove the non-asymptotic convergence of the exact MAML algorithm in MPGs (Section 4.2), despite the convoluted learning dynamics of multiple loosely-coupled agents. 4) For learning coarse correlated equilibria (CCE) in general-sum Markov games (Section 5), we analogously start by designing an initialization-dependent MARL algorithm, and then establish the sharper convergence rate of meta-learning under natural similarity metrics. 5) We provide numerical results to corroborate our theoretical findings (Section 6).

**Related Work.** Gradient-based meta-learning is a simple and effective approach that can be easily applied to any learning problem trained with gradient descent. The seminal MAML method  tries to learn a good model parameter initialization that leads to quick model adaptation. Theoretical properties of MAML have been investigated in a series of works . In particular,  have established the convergence of MAML to first-order stationarity for non-convex objectives.  has designed an unbiased gradient estimator for MAML in reinforcement learning tasks. Various first-order approximations  of MAML have been proposed to avoid the heavy computation of the Hessian. Meta-learning has also been studied in online convex optimization , where regret bounds have been established under different metrics of task similarity. Another line of research  views meta-learning through the lens of task inference, where an RL policy is conditioned on a belief over tasks and perform Bayesian updates through interactions to adapt to different tasks.

MARL has been widely studied under the formulation of stochastic games (i.e., Markov games) . Due to the fundamental difficulty of computing NE in generic games , most MARL research has focused on learning NE in games with special structures (such as zero-sum Markov games  and Markov potential games ) or learning weaker solution concepts such as (coarse) correlated equilibria . The most relevant works are , which have studied the convergence of optimistic no-regretlearning and smooth value updates in MARL with full-information feedback. For learning NE in MPGs, [38; 76; 15] have studied independent policy gradient methods and established their sample complexity results. These works have focused on learning a single game in isolation but have not considered exploiting the connections between multiple games to expedite the learning process.

Most related to ours,  has studied meta-learning in normal-form games. Under different notions of game similarities,  has shown faster convergences of meta-learning in zero-sum, general-sum, and Stackelberg games.  has investigated no-regret learning in time-varying zero-sum normal-form games. Compared to [27; 75], we consider meta-learning in the more generic and challenging Markov game setup with state transitions. Other related works include meta-learning for regret minimization in a distribution of games  and meta-safe RL for quick adaptation in constrained Markov decision processes (CMDPs) under task similarity . Finally, meta-learning has also been empirically applied to many important MARL scenarios, including multi-intersection traffic signal control , multi-agent communication with natural language , and multi-agent collaboration with first-person pixel observations in open-ended tasks .

## 2 Preliminaries

Markov game.An \(N\)-player episodic Markov game is defined by a tuple \(=(,H,,\{_{i}\}_{i=1}^{N},\{r_{i}\}_ {i=1}^{N},P)\), where (1) \(=\{1,2,,N\}\) is the set of agents; (2) \(H_{+}\) is the number of time steps in each episode; (3) \(\) is the finite state space; (4) \(_{i}\) is the finite action space for agent \(i\); (5) \(r_{i}:[H]_{ all}\) is the reward function for agent \(i\), where \(_{ all}=_{i=1}^{N}_{i}\) is the joint action space; and (6) \(P:[H]_{ all}()\) is the transition kernel. The agents interact in an unknown environment for \(T\) episodes. Without loss of generality, we make a standard assumption [33; 59] that each episode starts from a fixed initial state \(s_{1}\). Our results can be easily generalized to the setting where the initial state is sampled from a fixed distribution. At each time step \(h[H]\), the agents observe the state \(s_{h}\), and take actions \(a_{h,i}_{i},i\) simultaneously. Agent \(i\) then receives its reward \(r_{h,i}(s_{h},_{h})\), where \(_{h}=(a_{h,1},,a_{h,N})\), and the environment transitions to the next state \(s_{h+1} P_{h}(|s_{h},_{h})\). Let \(S=||\), \(A_{i}=|_{i}|, i\), and \(A_{ max}=_{i}A_{i}\).

Policy and Nash equilibrium.A (Markov) policy \(_{i}_{i}:[H](_{i})\) for agent \(i\) is a mapping from the time index and state space to a distribution over its own action space. Each agent seeks to find a policy that maximizes its own cumulative reward. A joint, product policy \(=(_{1},,_{N})\) induces a probability measure over the sequence of states and joint actions. We use the subscript \(-i\) to denote the set of agents excluding agent \(i\), i.e., \(\{i\}\). We can rewrite \(=(_{i},_{-i})\) using this convention. For a joint policy \(\), and for any \(h[H]\), \(s\), and \(_{ all}\), we define the value function and Q-function for agent \(i\) as

\[V_{h,i}^{}(s):=_{}_{h^{}=h}^{H}r_{h^{}, i}(s_{h^{}},_{h^{}})|s_{h}=s,\,Q_{h,i}^{}(s,):= _{}_{h^{}=h}^{H}r_{h^{},i}(s_{h^{}},_{h^{}})|s_{h}=s,_{h}=.\]

For agent \(i\), a policy \(_{i}^{}\) is a _best response_ to \(_{-i}\) if \(V_{1,i}^{_{i}^{},_{-i}}(s_{1})=_{_{i}}V_{1,i}^{_{i},_ {-i}}(s_{1})\). A joint (product) policy \(=(_{i},_{-i})\) is a _Nash equilibrium_ (NE) if \(_{i}\) is a best response to \(_{-i}\) for all \(i\). Similarly, for any \(>0\), a joint policy \(=(_{i},_{-i})\) is an \(\)-approximate NE if \(V_{1,i}^{_{i},_{-i}}(s_{1}) V_{1,i}^{_{1}^{},_{-i}}(s_{ 1})-\), \( i\).

Correlated policy and coarse correlated equilibrium.We define \(=\{_{h}:()^{h-1} ()\}_{h[H]}\) as a (non-Markov) _correlated policy_, where for each \(h[H]\), \(_{h}\) maps from a coordination device \(z\) and a history of length \(h-1\) to a distribution over the joint action space. Let \(_{i}\) and \(_{-i}\) be the proper marginal distributions of \(\) whose outputs are restricted to \((_{i})\) and \((_{-i})\), respectively. The value functions for non-Markov correlated policies at step \(h=1\) are defined in a similar way as for product policies. Given the PPAD-hardness of calculating NE in general , people often study a relaxed solution concept named coarse correlated equilibrium (CCE), which allows possible correlations in the policies: In particular, for any \(>0\), a _correlated policy_\(=(_{i},_{-i})\) is an \(\)-approximate CCE if \(V_{1,i}^{_{i},_{-i}}(s_{1}) V_{1,i}^{_{1}^{},_{-i}}(s_{ 1})-, i\).

Two-player zero-sum Markov game.An important special case of Markov games is (two-player) zero-sum Markov games, where there are two players (\(N=2\)) with exactly opposite rewards(\(r_{1}=-r_{2}\)). In a zero-sum game, we simply use \(r,V\), and \(Q\) to denote the reward and (Q-)value functions for the max-player, i.e., agent 1. Correspondingly, the min-player has \(-r\), \(-V\), and \(-Q\). For notational convenience, we denote the action space for the max-player (resp. min-player) by \(\) (resp. \(\)), and let \(A=||\), \(B=||\). We also write their policies \((_{1},_{2})\) as \((,)\) for short. In zero-sum games, it is known that although the NE policy \((^{*},^{*})\) may not be unique, all the NE have the same values. We use \(V_{h}^{*}\) and \(Q_{h}^{*}\) to denote the NE value function and the NE Q-function. For any fixed \((h,s)[H]\) and an arbitrary function \(Q:\), we may consider \(Q(s,,)\) as an \(A B\) matrix. Then, for any policy pair \((_{h},_{h})\) at step \(h[H]\), we can write in shorthand:

\[[_{h}^{}Q_{h}](s):=_{a_{h} [s],b_{h}[s]}[Q(s,a,b)]=_{h},Q_{h} (s),\] \[[_{h}^{}Q](s,):=_{a_{h} [s]}[Q(s,a,)],[Q_{h}](s,):=_{b_{h} [s]}[Q(s,,b)].\]

Given the transition function \(P\) and an arbitrary function \(V:\), we define

\[[P_{h}V](s,a,b):=_{s^{} P_{h}(|s,a,b)} [V(s^{})].\]

The Bellman equations can hence be rewritten more succinctly as

\[V_{h}^{,}(s)=[_{h}^{}Q_{h}^{,,}_{h}](s), Q_{h}^{,}(s,a,b)=r_{h}(s,a,b)+[P_{h}V_{h+1}^{,} ](s,a,b).\]

**Markov potential game.** Another important class of games is Markov potential games . MPGs cover Markov teams , a fully cooperative setting where all agents share the same rewards. A Markov game is an MPG if there exists a global potential function \(:[0,_{}]\) that can capture the variations of the agents' individual values: Specifically, \( i\) and \(s\),

\[_{s}(_{i},_{-i})-_{s}(_{i}^{},_{-i})=V_{1,i}^{_{i },_{-i}}(s)-V_{1,i}^{_{i}^{},_{-i}}(s),_{i},_{i}^ {}_{i},_{-i}_{-i}.\]

Throughout the paper, we consider the classic full-information feedback setting , where the players are assumed to have exact information of the consequences of each of their candidate actions. In the case of zero-sum games, this implies that for any \((h,s)\), the max-player and min-player can query \([Q_{h}_{h}](s,)\) and \([_{h}^{}Q_{h}](s,)\), respectively. Our meta-learning results can be easily extended to the stochastic bandit feedback setting using standard techniques as in .

**Meta-learning.** Let \(=\{^{k}\}\) be a set of different Markov games. Each game is defined by \(^{k}=(,H,,\{_{i}\}_{i=1}^{N},\{r_{ i}^{k}\}_{i=1}^{N},P^{k})\), where we assume without loss of generality that the games share the same agent set and state & action spaces, but can have different transition and reward functions. Most of our results are established in the online learning setting where we encounter a sequence of \(K\) games \((^{1},,^{K})\) one by one. To achieve faster convergence, the learning agents should use the knowledge obtained from previous games to expedite the learning process in future games.

The underlying principle of MAML  is to learn a good initialization such that running a few training steps from this initialization can lead to well-performing model parameters on any new task. An MAML-type algorithm in the context of RL typically involves two nested stages. The inner stage (or "base algorithm") \(\) performs \(T\) iterations of policy updates to optimize for an individual task \(^{k}\):

\[^{k,t}(^{k,t-1};^{k}), t[T]. \]

When task \(^{k}\) is completed, the outer stage (or "meta-algorithm") \(\) learns to form a good initialization \(^{k+1,0}\) for a new task \(^{k+1}\) using all the knowledge obtained from all previous tasks:

\[^{k+1,0}(\{^{k^{},t}\}_{k^{}[k],t[T]}; ^{1},,^{k}). \]

In this paper, we seek to properly instantiate both the base algorithm \(\) and the meta-algorithm \(\) for a variety of MARL problems. We aim to show that a proper design of the meta-learning procedure \((,)\) can largely reduce the number of iterations \(T\) required to find NE or CCE in a new game.

## 3 Meta-Learning for Two-Player Zero-Sum Markov Games

In this section, we study meta-learning for Nash equilibria in zero-sum Markov games, where players are fully competitive. Since MAML-type algorithms seek to learn a good initialization for quick adaptation, it is crucial to explicitly characterize how the convergence behavior of an MARL algorithm depends on the initial policy. To our best knowledge, such results are not directly achievable using existing algorithms. For this reason, in Section 3.1, we start by proposing a new base algorithm (1) for zero-sum Markov games that has a refined initialization-dependent convergence guarantee. Based on that, we present our meta-algorithm (2) in Section 3.2 and establish its sharper convergence rates.

### Initialization-Dependent Convergence in an Individual Zero-Sum Markov Game

Algorithm 1 presents our optimistic online mirror descent algorithm with stage-based value updates for learning NE in a zero-sum Markov game. To establish initialization-dependent convergence, Algorithm 1 performs optimistic online mirror descent (OMD) [55; 62] for policy updates (Lines 5 and 6), in contrast to the popular optimistic follow the regularized leader (FTRL) method in recent MARL policy optimization [77; 72]. We choose the negative entropy as our regularizer \(R\), in which case the Bregman divergence \(D_{R}(,)\) reduces to the Kullback-Leibler divergence and optimistic OMD becomes an optimistic variant of the classic multiplicative weights update (MWU) algorithm.

```
1Input: Initial policies \(:[][H]()\) and \(:[][H]()\);
2 Set stage index \( 1\), \(t^{}_{} 1\), and \(L_{} H\);
3Initialize:\(_{h}^{0}=_{h}^{0}_{h}^{1}\), \(_{h}^{0}=_{h}^{0}_{h}^{1}\), and \(Q_{h}^{}, h[H]\);
4foriteration \(t 1\) to \(T\)do
5Auxiliary policy update: for each step \(h[H]\) and state \(s\): \[_{h}^{t}(|s) *{argmax}_{()},[Q_{h}^{}_{h}^{t-1}](s,)-D _{R}(,_{h}^{t-1}(|s));\] \[_{h}^{t}(|s) *{argmax}_{()},[(_{h}^{t-1})^{}Q_{h}^{}](s,) -D_{R}(,_{h}^{t-1}(|s));\]
6Policy update: for each step \(h[H]\) and state \(s\): \[_{h}^{t}(|s) *{argmax}_{()} ,[Q_{h}^{}_{h}^{t-1}](s,)-D_{R}(, _{h}^{t}(|s));\] \[_{h}^{t}(|s) *{argmax}_{()} ,[(_{h}^{t-1})^{}Q_{h}^{}](s,)-D_{ R}(,_{h}^{t}(|s));\]
7if\(t-t^{}_{}+1 L_{}\)then
8\(t^{^{}}_{} t,t^{}_{+1} t +1,L_{+1}(1+1/H)L_{}\);
9Value update: for each \(h[H],s,a,b\): \[Q_{h}^{+1}(s,a,b)}_{t^{}=t^{}_{}}^{t^{}_{}}(r_{h}+P_{h}[(_{h+1}^{t^{ }})^{}Q_{h+1}^{}(_{h+1}^{t^{}})])(s,a,b);\] \[+1;_{h}^{t}=_{h}^{t}_{h}^{},_{h}^{t}=_{h}^{t}_{h}^{},  h[H];\]
10Output policy:\(_{h}(|s)=_{t=1}^{T}_{h}^{t}(|s)\) and \(_{h}(|s)=_{t=1}^{T}_{h}^{t}(|s), s ,h[H]\).
```

**Algorithm 1**Optimistic Online Mirror Descent for Zero-Sum Markov Games

In order to establish convergence to (approximate) NE, we need to show that our optimistic OMD policy updates achieve "no regret" with respect to the value estimate sequence at each state, i.e., to upper bound (3). If we were to use the celebrated \(_{t}=\) learning rate  to update the value function estimates, we will inevitably need to show a no-weighted-regret guarantee for optimistic OMD, because such a time-varying learning rate assigns non-uniform weights to each history step. However, incorporating OMD with a dynamic learning rate is known to be challenging and can easily lead to linear regret . While a stabilization technique  has been introduced to tackle this challenge, we take a different route by resorting to an alternative value update method, namely _stage-based_ value updates . Specifically, we divide the total \(T\) iterations into multiple stages and only update our value estimates at the end of a stage (Line 9). We let the lengths of the stages grow exponentially at a rate of \((1+1/H)\) (Line 8) [79; 45]. The exponential growth ensures that the total \(T\) iterations can be covered by a small number of stages, while the \((1+1/H)\) growth rate guarantees that the value estimation error does not blow up during the \(H\) steps of recursion (Lemma 9). Compared with the incremental \(_{t}=\) update rule that modifies the value estimates at every step, stage-based updates are more stationary and allow us to assign uniform weights to each history step. This leads to a simpler no(-average)-regret problem  that can be easily addressed by (optimistic) OMD.

We introduce a few notations before presenting the convergence analysis of Algorithm 1. Let \((t)\) denote the index of the stage that iteration \(t\) belongs to. We denote by \(\) the total number of stages, i.e., \(:=(T)\). For any \((,h,s)[][H]\), define the per-state regrets for the max-player as

\[_{h,1}^{}(s):=_{_{h}^{,}(|s)( )}}_{j=^{}}^{^{ }}_{h}^{,}-_{h}^{j},Q_{h}^{}_{ h}^{j}(s). \]

The per-state regret \(_{h,2}^{}(s)\) for the min-player can be defined symmetrically (see (14) in Appendix B). We define the maximal regret (over the states and the two players) as \(_{h}^{}:=_{s}_{i=1,2}\{_{h, i}^{}(s)\}\). An upper bound for the per-state regrets is provided in Lemma 8 of Appendix B, which is useful in the analysis of Algorithm 1. We use the standard notion of

\[gap}(,):=V_{1}^{,}(s_{1})-V_{1}^{, }(s_{1})\]

to measure the optimality of a policy pair \((,)\). The initialization-dependent convergence rate of Algorithm 1 is as follows.

**Theorem 1**.: _If Algorithm 1 is run on a two-player zero-sum Markov game for \(T\) iterations with a learning rate \( 1/(8H^{2})\), the output policy pair \((,)\) satisfies:_

\[gap}(,)}{T}_{h=1}^{H} _{=1}^{}_{s}(D_{R}(_{h}^{,}(|s), _{h}^{}(|s))+D_{R}(_{h}^{,}(|s),_{h}^{}(|s))).\]

_In addition, if the players' policies are initialized to be uniform policies, i.e., \(_{h}^{}(|s)=/A\) and \(_{h}^{}(|s)=/B, s,[ ],h[H]\), we further have_

\[gap}(,) T(AB)}{T}. \]

Compared to existing results [77; 72], Theorem 1 directly associates the convergence rate with the quality of the initial policy \((,)\). Even when a good policy initialization is unknown and the algorithm is initialized with uniformly random policies, our convergence rate in (4) still matches the best-known result in the literature  except for an extra factor of \(O( T)\). When suppressing the logarithmic terms, Theorem 1 immediately implies that for any \(>0\), Algorithm 1 takes no more than \(T=(H^{5}/)\) steps to learn an \(\)-approximate NE in an individual zero-sum Markov game.

### Sharper Convergence with Meta-Learning

Having settled the initialization-dependent convergence in a zero-sum game, we proceed to show how meta-learning can learn a set of related games collectively and more rapidly. We consider an online setting with a sequence of \(K\) games \(=(^{1},,^{K})\). For the max-player, let \(^{k}\) and \(^{k}\), respectively, denote the initial policy and output policy of Algorithm 1 on game \(^{k}\). By putting together \(_{h}^{,}(|s)\) over all \((,h,s)[][H]\), we let \(^{k,}:[][H]( )\) denote the best fixed policies in hindsight on \(^{k}\). Define \(^{k},^{k}\) and \(^{k,}\) analogously for the min-player. Let \(^{}=_{k=1}^{K}^{k,}\) and \(^{}=_{k=1}^{K}^{k,}\) be the empirical averages of the best response policies. To ensure that the knowledge gained from previous games is useful for learning future tasks, we need to impose some similarity assumptions on the games \(\). We consider the following similarity metric:

\[_{,}:=_{k=1}^{K}((^{k,}\|^{ })+(^{k,}\|^{})).\]

Intuitively, since \(\{^{k,t}\}_{t[T]}\) converges to an equilibrium policy for \(^{k}\) when \(T\) is large, the best fixed responses \(^{k,}\) can be considered as an approximation of the max-player's NE policy on \(^{k}\). In this sense, \(_{,}\) essentially measures the distances between the NE policies of different games. It considers a set of games \(\) to be "similar" if their NE policies lie in a close neighborhood of each other. We remark that there might be multiple NE policies (with the same value) in a zero-sum game, and \(_{,}\) only takes into account the NE policy pairs that Algorithm 1 actually delivers.

Our meta-learning procedure proceeds as follows: Within each game \(^{k}\), we run Algorithm 1 as our base algorithm (1) to find a NE of \(^{k}\). In a new game \(^{k+1}\), the initial policy of Algorithm 1 is given by the following meta-updates in the outer loop (2), which essentially averages the best response policies of the previous tasks under \(\)-greedy parameterization:

\[^{k+1}=_{k^{}=1}^{k}[^{k^{},}]_{ },^{k+1}=_{k^{}=1}^{k}[ ^{k^{},}]_{}. \]

In particular, for any vector \(^{d}\), we define its \(\)-greedy parameterization \([]_{}:=(1-)+\) to be a weighted average with a uniform vector \(/d^{d}\) of a proper dimension, where \((0,1/2)\). Since \(^{k,}\) denotes a set of vectors, we apply the operator \([]_{}\) element-wise to each of the vectors. The reason for using \(\)-greedy is mainly technical: \(()\) is not Lipschitz continuous near the boundary of the probability simplex, and \(\)-greedy parameterization helps to stay \(\)-distance away from the boundary. We are now ready to present our sharper convergence rates for meta-learning.

**Theorem 2**.: _In a sequence of \(K\) two-player zero-sum Markov games, if Algorithm 1 is run for \(T\) iterations as the base algorithm and (5) with \(=1/\) as the meta-updates, we have_

\[_{k=1}^{K}gap}(^{k},^{k}) }{T}(}{KH^{2}}+H^{2}}+}). \]

_Consequently, for any \(>0\), \(T=(}{}(}{K}+}{}))\) steps on average suffice to find an \(\)-approximate Nash equilibrium in each game._

When the number of games \(K\) is large, the last two terms on the RHS of (6) become negligible. Hence, compared to the best-known results \((H^{5}/T)\) of learning each game individually, Theorem 2 implies a significantly sharper convergence rate when the games are similar, i.e., when \(_{,} KH^{2}\).

## 4 Meta-Learning for Markov Potential Games

In this section, we study meta-learning for NE in Markov potential games. We show that a straightforward refinement to the analysis of an existing algorithm  provides initialization-dependent bounds. Building on it, in Section 4.1, we first investigate the sharper convergence of meta-learning in a sequence of similar MPGs. Further, since there exists an optimization objective universally agreed on by all the players in an MPG (i.e., the potential function), we can formulate the meta-learning problem in the same way as MAML . In Section 4.2, by choosing a proper base algorithm, we establish the non-asymptotic convergence of MAML in the highly non-stationary multi-agent scenario, without even imposing any smoothness assumptions as in existing works [17; 18; 30].

### Sharper Rates in Similar Games

To be consistent with existing results in the literature, in this section, we consider an infinite-horizon \(\)-discounted reward setting for MPGs [43; 39; 76; 15]. A detailed description of the setup is provided in Appendix C for completeness. Equivalent results for the finite-horizon episodic setting (as we defined in Section 2) can be derived in a straightforward way. We choose an existing state-of-the-art algorithm, namely independent projected Q-descent , as our base algorithm (1). Specifically, in an MPG \(^{k}\), each agent independently runs policy gradient ascents to update its own policy for \(T\) iterations:

\[_{i}^{k,t}(|s)_{(_{i})}( _{i}^{k,t-1}(|s)+_{i}^{^{k,t-1}}(s,)), t [T], \]

where \(_{i}^{}\) is the "averaged" Q-function formally defined in Appendix C. Let \((\ ;^{k})\) denote the potential function of \(^{k}\). Through a simple refinement of the analysis in , we can establish the following initialization-dependence bound for our base algorithm (7).

**Proposition 1**.: _(Theorem 1 in ) Suppose that all players in a Markov potential game \(^{k}\) run independent projected Q-descent (7) for \(T\) iterations with \(}{8^{3}N_{}}\). Then, we have_

\[_{t=0}^{T-1}gap}(^{k,t})^{k})((^{k,T};^{k})-(^{k,0},^{k}))}{ T(1-)^{2}}},\]

_where \((^{k})\) is the standard distribution mismatch coefficient for \(^{k}\) formally defined in Appendix C._Proposition 1 immediately implies that if we learn each MPG individually, it takes \(T=O(^{4}_{}}{(1-)^{6}^{2}})\) steps to find an \(\)-approximate NE. To show the effectiveness of meta-learning, we consider the following similarity metric for a sequence of \(K\) games, which measures the maximal point-wise deviations of the potential functions:

\[_{}:=_{k=1}^{K-1}_{}(;^{k})-( ;^{k+1})\,. \]

As for the meta-updates, we simply instantiate (2) as \(_{i}^{k,0}_{i}^{k-1,T}\), which lets each agent play the converged policy in the previous game. The intuition is that after running \(T\) steps on \(^{k-1}\), the agents will converge to an approximate NE policy of \(^{k-1}\). Since (8) requires the potential functions to be close, the converged policy \(^{k-1,T}\) should serve as a good starting point to search for NE in \(^{k}\). We formally characterize such an intuition in the following theorem, which shows the sharper convergence of meta-learning in a large set of similar MPGs (i.e., when \(K\) is large and \(_{}\) is small):

**Theorem 3**.: _In a sequence of \(K\) Markov potential games, if (7) is run for \(T\) iterations as the base algorithm and \(_{i}^{k,0}_{i}^{k-1,T}\) as the meta-updates, then, for any \(>0\), \(T=O(^{4}(_{}+_{})}{K(1-)^{6 }^{2}})\) steps on average suffice to find an \(\)-approximate Nash equilibrium in each game._

### Convergence to MAML Objective

In this subsection, we study meta-learning for MPGs under exactly the same formulation as in the seminal work of MAML . Let \(=\{^{j}\}\) be a set of different MPGs, where the games are now drawn from a fixed distribution \(p\) that we can sample from. We consider parametric policy classes where agent \(i\)'s policy is parameterized by \(_{i}=\{_{i}(a_{i}|s)\}_{s,a_{i} _{i}}\). We focus on softmax parameterization where

\[_{_{i}}(a_{i}|s)=(a_{i}|s))}{_{a_{i}^{ }_{i}}(_{i}(a_{i}^{}|s))}.\]

Let \((\,;)\) denote the operator of performing one step of policy gradient update on game \(\), i.e., \((;):=+(;)\), where \(>0\) is the learning rate. The \(T\)-step MAML objective [20; 18; 30] can be formulated as

\[_{}F_{T}():=_{ p() }[((((;))); )], \]

where \(=(_{1},,_{N})\), and the operator \((\,;)\) is applied \(T\) times. Intuitively, MAML tries to find a good parameter initialization from which running \(T\) steps of gradient ascents on any new task \(\) leads to well-performing policy parameters.

Similar to Section 2, the MAML procedure consists of two nested stages. For the inner stage (1), we let each agent independently run \(T\) steps of policy gradient ascents to update its policy parameter \(_{i}^{(t)}\) on each encountered MPG. It is known (Theorem 5 of ) that \(T=O(1/^{2})\) steps will find an \(\)-approximate NE for each individual MPG. For the outer stage (2), MAML directly performs gradient ascents with respect to the meta-objective (9). The gradient of \(F_{T}\) can be written in closed-form as

\[ F_{T}()=_{ p()}[ _{t=0}^{T-1}I+^{2}(^{(t)};) (^{(T)};)]. \]

A detailed discussion of MAML and its instantiation in our problem are provided in Appendix D. Most importantly, Appendix D shows that both the policy gradient \(()\) and the policy Hessian \(^{2}()\) can be written in closed-form, which allows us to construct unbiased estimators of (10) from samples. Despite the fact that the learning agents update their policies independently in an intertwined multi-agent system, our next result shows that the MAML updates converge to a stationary point of the meta-objective (9) in a non-asymptotic manner. A key step of the proof is to prove (rather than assume, as in existing works [17; 30]) that the meta-objective is Lipschitz smooth in the policy parameter \(\). The smoothness constant can also be written in a closed form (Lemma 14).

**Theorem 4**.: _Suppose that the agents run independent policy gradient ascents with softmax parameterization on each encountered MPG as the inner stage, and perform gradient ascents w.r.t the MAML objective as the outer stage. For any \(>0\), \(K=}{(1-)^{2}}\) iterations of MAML updates can find a policy \(^{}\) such that \(\| F_{T}(^{})\|\), where \(L_{F}\) is given in Lemma 14 of Appendix D._Meta-Learning for General-Sum Markov Games

In this section, we consider learning coarse correlated equilibria in general-sum Markov games with no assumption on reward structures. Similar to Section 3, we start by developing an initialization-dependent algorithm, followed by investigating the sharper convergence of meta-learning.

Our base algorithm for learning CCE also uses optimistic OMD with stage-based value updates. Detailed descriptions are deferred to Algorithm 2 in Appendix E due to space limitations. Algorithm 2 follows a similar structure as Algorithm 1, but the output policy \(\) of Algorithm 2 is no longer a state-wise average policy and is instead a correlated policy . For any correlated policy \(\), we use the notion

\[():=_{i}V_{1,i}^{,_{-i}}(s_{1}) -V_{1,i}^{}(s_{1})\]

to measure its distance to a CCE. Let \(\) denote the total number of stages of Algorithm 2. Similar to zero-sum games (3), for any \((,h,s)[][H]\), we define the per-state regret for each player \(i\) as

\[_{h,i}^{}(s):=_{_{h,i}^{}(|s)(_{i})}}_{j=t^{}_{}}^{t^{}_{}} _{h,i}^{,}-_{h,i}^{j},Q_{h,i}^{}_{h,-i}^ {j}(s),\]

where \(Q_{h,i}^{}\) is player \(i\)'s Q-function estimate at stage \(\). We define the maximal regret (over all states and players) as \(_{h}^{}:=_{s}_{i}\{ _{h,i}^{}(s)\}\). The initialization-dependent convergence rate of Algorithm 2 is established in the following theorem.

**Theorem 5**.: _If Algorithm 2 is run on a general-sum Markov game for \(T\) iterations with a learning rate \(>0\), the output policy \(\) satisfies:_

\[()_{=1}^{}_ {h=1}^{H}_{i,s}D_{R}(_{h,i}^{,}( |s),_{h,i}^{}(|s))+36N^{2}^{2}H^{4}.\]

_In addition, if the players' policies are initialized to be uniform policies \(_{h,i}^{}(|s)=/A_{i}, i\) and \(\) is chosen as \(=H^{-2/3}T^{-1/3}(N-1)^{-2/3}\), then we have_

\[()}H^{} T A _{}}{T^{}}. \]

Compared to existing results, Theorem 5 directly associates the convergence rate with the quality of the initial policy \(\). With uniform initialization, the convergence rate in (11) has a slightly worse dependence on \(T\) than the best known result \((H^{11/4}/T^{3/4})\). Such deterioration is due to the potential lack of a smoothness condition for optimistic OMD that directly connects the stability of policies to the stability of utility functions (Lemma 18), unlike in optimistic FTRL. Although we believe that our rate in (11) can almost certainly be improved via a refined stability analysis, we leave the tightening of it to our future work as it would be a departure from the main focus of this work.

Let \(^{k}\) and \(^{k}\), respectively, denote the initial policy and output policy of Algorithm 2 on game \(^{k}\). For player \(i\), by putting together \(_{h,i}^{,}(|s)\) over all \((,h,s)\), we use \(_{i}^{k,}:[][H]( _{i})\) to denote the best fixed policies in hindsight on \(^{k}\). We consider a game similarity metric defined as

\[_{}:=_{k=1}^{K}_{i=1}^{N}(_{i}^{k,}\| _{i}^{*}),_{i}^{}=_{k=1}^{K}_{i}^{k, }.\]

The following theorem presents the convergence rate of meta-learning, which again is sharper than learning each game individually when the games are similar, i.e., when \(_{}\) is sufficiently small.

**Theorem 6**.: _In a sequence of \(K\) general-sum Markov games, if Algorithm 2 is run for \(T\) iterations as the base algorithm and the meta-updates \(_{i}^{k}=_{k^{}=1}^{k-1}[_{i}^{k^{ },}]_{}, i\) are used with \(=1/\) for policy initializations, then, for any \(>0\), \(T=(}(^{3/2}}{K^{5/4 }}+^{3/2}+H^{3}}{K^{1/2}}))\) steps on average suffice to find an \(\)-approximate CCE in each game._Simulations

We numerically evaluate our meta-learning algorithms from Sections 3 and 4 on a sequence of \(K\) games. In this section, we evaluate on a sequence of \(K=10\) zero-sum Markov games and Markov potential games with two states, two players, and two candidate actions for each player. In Appendix F, we further demonstrate the scalability of our methods by providing numerical results on larger-scale tasks, including a simplified version of the Poker endgame considered in  and a 1D linear-quadratic tracking problem  with 4 cooperative players.

We generate the \(K=10\) games by first specifying a "base game" and then adding random perturbations to its reward function to get \(K\) slightly different games. Each of the \(K\) games is run for \(T=1000\) iterations. To better visualize the similarity level of these games, in Figure 1(c), we plot the NE policies of the perturbed zero-sum matrix games at each of the two states for the \(K=10\) games. We remark that due to the existence of state transitions, the NE policies with respect to the stage Q-functions can be more diversified than Figure 1(c). Detailed descriptions of the simulation setup are deferred to Appendix F.

We evaluate the convergences of the algorithms in terms of \(gap}\). Figures 1(a) and 1(b) compare the average \(gap}\) over the \(K\) games between individual learning and meta-learning for zero-sum Markov games and Markov potential games, respectively. We see that meta-learning can utilize knowledge from previous tasks to attain better policy initialization in a new task and converges to an approximate NE policy using much fewer iterations.

## 7 Concluding Remarks

In this paper, we have introduced meta-learning to solve multiple MARL tasks collectively. Under natural similarity metrics, we have shown that meta-learning achieves provably sharper convergence for learning NE in zero-sum and potential games and for learning CCE in general-sum games. Along the way, we have proposed new MARL algorithms with fine-grained initialization-dependent convergence guarantees. Our work appears to be the first to investigate the theoretical properties of meta-learning in MARL and provide reliable justifications for its usage. As for the limitations, our convergence rate for learning CCE (Theorem 5) is slightly less competitive than the best-known results when our policies are initialized conservatively, which might be improved via a refined policy stability analysis. Other future directions include further generalization of our results to alternative game similarity metrics and broader types of games (e.g., stochastic Stackelberg games).