# Partial Label Learning with Dissimilarity Propagation guided Candidate Label Shrinkage

Yuheng Jia\({}^{1,3}\), **Fuchao Yang\({}^{2}\), Yongqiang Dong\({}^{1}\)**

\({}^{1}\) School of Computer Science and Engineering, Southeast University, Nanjing 210096, China

\({}^{2}\) College of Software Engineering, Southeast University Nanjing 210096, China

\({}^{3}\) Key Laboratory of New Generation Artificial Intelligence Technology and Its

Interdisciplinary Applications (Southeast University), Ministry of Education, China

yhjia@seu.edu.cn, yangfc@seu.edu.cn, dongyq@seu.edu.cn

Corresponding author

###### Abstract

In partial label learning (PLL), each sample is associated with a group of candidate labels, among which only one label is correct. The key of PLL is to disambiguate the candidate label set to find the ground-truth label. To this end, we first construct a constrained regression model to capture the confidence of the candidate labels, and multiply the label confidence matrix by its transpose to build a second-order similarity matrix, whose elements indicate the pairwise similarity relationships of samples globally. Then we develop a semantic dissimilarity matrix by considering the complement of the intersection of the candidate label set, and further propagate the initial dissimilarity relationships to the whole data set by leveraging the local geometric structure of samples. The similarity and dissimilarity matrices form an _adversarial_ relationship, which is further utilized to shrink the solution space of the label confidence matrix and promote the dissimilarity matrix. We finally extend the proposed model to a kernel version to exploit the non-linear structure of samples and solve the proposed model by the inexact augmented Lagrange multiplier method. By exploiting the adversarial prior, the proposed method can significantly outperform state-of-the-art PLL algorithms when evaluated on 10 artificial and 7 real-world partial label data sets. We also prove the effectiveness of our method with some theoretical guarantees. The code is publicly available at [https://github.com/Yangfc-ML/DPCLS](https://github.com/Yangfc-ML/DPCLS).

## 1 Introduction

Partial label learning (PLL)  is an emerging weakly supervised learning framework. In PLL, each sample is associated with a set of candidate labels, among which only one is the ground-truth label. Different from conventional supervised learning, PLL avoids precisely annotating label on each sample, which greatly reduces the labeling cost. Accordingly, PLL has been applied to many real-world scenarios such as automatic image annotation , web mining , and ecoinformatics .

Formally speaking, let \(=^{d}\) be the \(d\)-dimensional feature space and \(=\{1,2,...,q\}\) be the label space with \(q\) labels. Given the partial label training set \(=\{(x_{i},S_{i}) 1 i m\}\), where \(x_{i}\) is a \(d\)-dimensional feature vector to represent the \(i\)-th sample and \(S_{i}\) is the associated candidate label set, among which only one label is correct. PLL aims to induce a multi-class classifier \(f:\) from \(\), which is very challenging as the ground-truth label of a sample is concealed in the candidate label set.

The key to solving PLL is label disambiguation, i.e., identifying the ground-truth label of a sample from its candidate label set. For example, [6; 12] considered the ground-truth label as a latent variable and identified it through an iterative refining procedure.  narrowed the candidate label set through a sparsity-based self-training procedure. Some works [19; 22; 23] leveraged the similarity relationship of samples in the feature space to disambiguation, i.e., samples are similar to each other in the feature space are likely to share the same ground-truth label. Recently, some researches exploited the label space to achieve label disambiguation [2; 7; 13]. For example, SDIM  first built a pairwise dissimilarity matrix through the candidate label sets, and then maximized the difference of the label confidence between two samples if their pairwise dissimilarity between them is large according to the constructed dissimilarity matrix. However, the dissimilarity matrix constructed by SDIM is predefined and relatively sparse, which depresses its effectiveness.

Realizing the effectiveness of the dissimilarity relationship in PLL, we propose a novel PLL method named DPCLS (partial label learning with Dissimilarity Propagation guided Candidate Label Shrinkage). Specifically, we first construct a semantic dissimilarity matrix by considering the complement of the intersection of the candidate label set, i.e., if two samples do not share any common candidate labels, they must belong to different classes, and their semantic dissimilarity is large. The above constructed dissimilarity relationships are still sparse and fixed, we therefore propose to propagate the initial dissimilarity relationships to the whole data set by leveraging the local geometric structure of samples, i.e., if two samples are similar to each other in feature space, they are expected to share the similar dissimilarity codings. Second, to include the enhanced semantic dissimilarity matrix in label disambiguation, we design a second-order similarity matrix by multiplying the label confidence matrix with its transpose. Under the ideal condition, the enhanced semantic dissimilarity matrix and the similarity matrix naturally form an adversarial relationship, i.e., a larger (resp. smaller) dissimilarity between two samples means a smaller (resp. larger) similarity between them. By exploiting this adversarial prior, the enhanced dissimilarity matrix can shrink the solution space of the label confidence matrix, and meanwhile, the similarity matrix induced from the label confidence matrix also contributes to build a better dissimilarity matrix. We theoretically confirm the above statement under some general conditions. Furthermore, we extend our method to a kernel version to model the non-linear structure of samples. The proposed model is finally formulated as a constrained regression problem with adversarial learning and graph regularization, which is optimized by inexact augmented Lagrange multiplier (IALM). Extensive experiments on artificial and real-world partial label data sets demonstrate the effectiveness of the proposed PLL method.

## 2 The Proposed Method

**Basic Model**

Let \(=[x_{1},x_{2},,x_{m}]^{}^{m d}\) denote the feature matrix, where \(m\) and \(d\) represent the number of samples and the dimension of features. \(=[y_{1},y_{2},,y_{m}]^{}\{0,1\}^{m q}\) represents the partial label matrix, where \(q\) is the number of classes. Moreover, \(y_{ij}=1\) indicates that the \(j\)-th label is one of the candidate labels of the sample \(x_{i}\). Note that in the candidate label set, only one label is correct.

To fulfill PLL, we first build the following constrained regression model

\[&_{,}\|- \|_{F}^{2}+\|\|_{F}^{2}\\ &_{q}=_{m},_{m  q}, \]

where \(^{m q}\) is the label confidence matrix with \(_{ij}\) representing the probability of the \(j\)-th label being the ground-truth label for the \(i\)-th sample. \(^{d q}\) is the coefficient matrix that maps the feature matrix to the label confidence matrix \(\). To avoid over-fitting, we impose the widely-used squared Frobenius norm on \(\) as the regularization term, which is introduced by \(>0\). \(_{q}^{q}\) and \(_{m}^{m}\) are two all ones vectors, \(_{m q}^{m q}\) is an all zeroes matrix. The first constraint \(_{q}=_{m}\) normalizes the label confidence vector for all samples. The second constraint \(_{m q}\) means each element of \(\) is no less than 0, and no more than the corresponding element of \(\), which implies the ground-truth label of each sample must reside in the candidate label set and the label confidence of the non-candidate labels must be 0. We initialize the label confidence matrix as \(_{ij}=1/_{j}y_{ij}\) if \(y_{ij}\)=1, otherwise \(_{ij}=0\).

By minimizing Eq. (1), we construct a linear regression model that maps the feature space to the label confidence \(\). We assume that the mapping from the features to the ground-truth label may be easier, while that to the false-positive label residing in the candidate label set is relatively harder. Accordingly, optimizing Eq. (1) will help disambiguate the candidate labels and produce a preliminary label confidence matrix by exploring the useful information in the feature space.

**Dissimilarity Propagation guided Candidate Label Shrinkage**

To further exploit the valuable information in the label space, we first use candidate labels to construct a dissimilarity matrix \(_{0}^{m m}\), i.e.,

\[_{0ij}=1,y_{i}y_{j}^{}=0\\ 0, \]

If \(y_{i}y_{j}^{}=0\), the \(i\)-th sample \(x_{i}\) and the \(j\)-th sample \(x_{j}\) do not share any common candidate labels, which means they must belong to the different classes. Otherwise, \(x_{i}\) and \(x_{j}\) have a chance to belong to the same class. Therefore, \(_{0}\) indicates the semantic dissimilarity of samples. We then multiply the label confidence matrix with its transpose to create a similarity matrix termed as \(^{}\), whose \((i,j)\)-th element indicates the similarity between \(x_{i}\) and \(x_{j}\). _As the semantic dissimilarity matrix \(_{0}\) and similarity matrix \(^{}\) form an adversarial relationship_, i.e., a larger (resp. smaller) element in \(_{0}\) implies a smaller (resp. larger) element in \(^{}\), we use this adversarial prior to shrink the solution space of \(\) by:

\[_{}\|_{0}^{}\|_{ 1}, \]

where \(\) denotes the element-wise product of two matrices and \(||||_{1}\) represents the \(l_{1}\) norm (i.e., the sum of absolute values of all elements in a matrix). Minimizing Eq. (3) ensues that the positive elements of \(_{0}\) and \(^{}\) will lie in the different locations. Unfortunately, directly minimizing Eq. (3) cannot help produce a better label confidence matrix \(\), because \(_{0}\) is inferred from the candidate label set, and the \((i,j)\)-th element of \(_{0}\) is positive only when \(y_{i}y_{j}^{}=0\), while \(\) is upper bounded by \(\), the \((i,j)\)-th element of \(^{}\) is positive only when \(y_{i}y_{j}^{} 0\). That is the locations of the positive elements of \(_{0}\) and \(^{}\) are complementary.

To solve this problem, we propose to promote the initial dissimilarity matrix \(_{0}\) to produce a denser dissimilarity matrix \(^{m m}\) by a novel dissimilarity propagation method. Specifically, we leverage the local geometric structure of samples to enhance \(_{0}\). Note that each column of \(\) (e.g., \(_{.i}\)) can represent the dissimilarity relationships between a sample (e.g., \(x_{i}\)) and the other samples. If two samples \(x_{i}\) and \(x_{j}\) are close to each other in the feature space, their dissimilarity relationships (\(_{.i}\) and \(_{.j}\)) should also be similar. To capture the feature similarity, we build a local geometric matrix \(^{m m}\) using a radial basis function (RBF) kernel:

\[_{ij}=(-||x_{i}-x_{j}||_{2}^{2}/^{2}), j_{i}\\ 0, \]

where \(j_{i}\) indicates that \(x_{j}\) is a \(k\)-nearest neighbor of \(x_{i}\), and \(\) is a hyper-parameter controlling the bandwidth of the RBF kernel. Based on \(\), the dissimilarity propagation guided candidate label shrinkage module becomes

\[&_{,}\| ^{}\|_{1}+_{i,j=1}^{m}_{ij}\| _{.i}-_{.j}\|_{2}^{2}\\ &_{m m}_{m  m},_{ij}=_{0ij},_{0ij}=1. \]

The second term makes the highly similar samples in the feature samples share the similar dissimilarity codings. Moreover, \(_{ij}=_{0ij}\) if \(_{0ij}=1\) means the reliable semantic relationship should be retained in \(\). In order to make \(\) a well-defined dissimilarity matrix, each element in \(\) should lie in the range of . Note that in Eq. (5), both \(\) and \(\) are optimization variables. By minimizing Eq. (5), the enhanced semantic dissimilarity matrix will shrink the solution space of \(\) and at the same time \(\) will also help promote the quality of \(\) by the adversarial term.

**Model Formulation**

Taking all the above considerations into account, the proposed model finally becomes:

\[&_{,,}\|-\|_{F}^{2}+\|\|_{F}^{2}+ \|^{}\|_{1}+( ^{})\\ &_{q}=_{m},_{m q} ,_{m m}_{ m m},_{ij}=_{0ij},_{0ij}=1, \]

where \(^{m m}=}-\) is a graph Laplacian matrix, and \(}^{m m}\) is a diagonal matrix with the \(i\)-th diagonal element \(}_{ii}=_{j=1}^{m}_{ij}\). Tr(\(\)) returns the trace of a matrix. \(\), \( 0\) are two hyper-parameters to balance different terms. By solving Eq. (6), the semantic dissimilarity is enhanced by a dissimilarity propagation process, and further utilized to shrink the solution space of the label confidence matrix by a novel adversarial prior.

Optimization and Setting

We adopt IALM to solve the problem in Eq. (6). To simplify Eq. (6), we introduce an auxiliary matrix \(=^{m m}\) and equivalently rewrite it as

\[&_{,,,}\| -\|_{F}^{2}+\|\|_{F}^{2 }+\|^{}\|_{1}+ (^{})\\ &_{q}=_{m},_{m  q},=,_{m  m}_{m m},_{ij}=_ {0ij},_{0ij}=1. \]

The solution of Eq. (7) can be obtained by solving the following augmented Lagrange equation:

\[&_{,,,} \|-\|_{F}^{2}+\|\|_ {F}^{2}+\|^{}\|_ {1}+(^{})+ ,-+\| -\|_{F}^{2}\\ &_{q}=_{m},_{m  q},_{m m} _{m m},_{ij}=_{0ij},_{0ij}=1, \]

where \(^{m m}\) is the Lagrange multiplier matrix, \( 0\) is a penalty parameter, and \(,\) returns the inner product of two matrices. We can optimize Eq. (8) by solving the following subproblems alternatively and iteratively.

_I)_**W subproblem is formulated as

\[_{}\|-\|_{F}^{2}+\| \|_{F}^{2}, \]

Kernel Extension

The linear mapping in Eq. (9) may fail to model the nonlinear relationship. Therefore, we extend the above model to a kernel-based non-linear version. Let \(():^{d}^{h}\) denote the feature transformation that maps the origin feature space \(\) to a higher dimensional Hilbert space \(()\). According to the Representer Theorem, \(\) can be expressed as a linear combination of the input features, i.e., \(=()^{}\), where \(^{m q}\) stores the combination weights. Then, we have \(()=\), where \(=()()^{}^{m m}\) is the kernel matrix and each element \(_{ij}=(x_{i},x_{j})\). Finally, the nonlinear version is represented as:

\[_{,}\|+_{m}^{}-\|_{F}^{2}+(^{ }), \]

where \(^{q}\) is the bias term. When the first derivatives of \(\) and \(\) reach 0, Eq. (10) is solved, i.e.,

\[=(+_{m m}-_{m }_{m}^{}}{m})^{-1}(- {_{m}_{m}^{}}{m}),= (^{}_{m}-^{}^{}_{m}), \]

where \(_{m m}^{m m}\) denotes an identity matrix. In the experiments, we use the RBF kernel as the kernel function, i.e., \((x_{i},x_{j})=(-||x_{i}-x_{j}||_{2}^{2}/^{2})\), for our method and the compared ones.

_2)_**F subproblem is written as

\[&_{}\|-\|_ {F}^{2}+\|^{}\| _{1}\\ &_{q}=_{m},_{m  q}, \]

where \(=+_{m}^{} ^{m q}\) is the output matrix of the model. Eq. (12) can be formulated as a standard quadratic programming (QP) problem, and solved by any QP tools. The detailed derivation process can be found in **Section A** of the supplementary file.

_3)_**D subproblem is represented as

\[_{}(^{} )+\|-+}{}\| _{F}^{2}. \]

Eq. (13) reaches the minimum when its first-order derivative with respect to \(\) vanishes, leading to

\[=(-)(2+_{m  m})^{-1}. \]

_4)_**A** subproblem is expressed as

\[&_{}\| ^{}\|_{1}+\|-+ }{}\|_{F}^{2}\\ &_{m m}_{m  m},_{ij}=_{0ij},_{0ij}=1. \]

Eq. (15) can solved element-wisely, i.e.,

\[=(_{1}(_{0}(+-^{}}{} ))), \]where \(\), \(_{1}\), \(_{0}\) are three thresholding operators in elementwise, i.e., \((_{ij})=1,\)if \(_{0ij}=1\), \(_{1}(_{ij}):=(1,_{ij})\), \(_{0}(_{ij}):=(0,_{ij})\).

Finally, the Lagrangian multiplier matrix and \(\) are updated by

\[+(-) \\ \ (1.1,_{}), \]

where \(_{}\)=\(10^{10}\) is a predefined upper bound for \(\).

**Model Prediction**

Given an unseen test example \(\), our method predicts its label by

\[=*{arg\,max}_{k}_{i=1}^{m}_{ik}(,x_{i})+_{k}. \]

The overall pseudo code of our method is summarized in Algorithm 1, where it stops when \(\|-\|_{}<10^{-8}\), where \(\|\|_{}\) denotes the infinity norm of a matrix.

**Hyper-parameter Settings of Our Method**

Parameter \(\) is used to control the model complexity. A too large (resp. small) value of \(\) will lead to under-fitting (resp. over-fitting). Therefore, we set \(\)=0.05 for our method. Parameters \(\) and \(\) are used to control the importance of the adversarial term and dissimilarity propagation term respectively. According to a number of experiments, we fix \(=0.001\) and select \(\) from \(\{0.001,0.01\}\). Parameter \(k\) controls the number of \(k\)-nearest neighbors. Following the previous works [16; 22], we set \(k\)=10.

**Computational Complexity Analysis**

The computational complexity of Algorithm 1 is mainly determined by steps 4-7. Specifically, steps 4 and 6 involve the inversion of \(m m\) matrices with the complexity of \((m^{3})\). Step 5 solves a QP problem, leading to the complexity of \((m^{3}q^{3})\). Step 7 can be efficiently solved by linear thresholding operations with the complexity of \((m^{2})\). Therefore, the overall computational complexity of Algorithm 1 in each iteration is \((2m^{3}+m^{2}+m^{3}q^{3})\). More analysis about computational complexity can be found in **Section A** of the supplementary file.

```
0:\(\): the partial label training set; \(,,,k\): the parameters of model; \(\): an unseen test sample
0:\(\): the predicted label for sample \(\)
1: Construct the dissimilarity matrix \(_{0}\) according to Eq. (2) and the kernel matrix \(=[(x_{i},x_{j})]_{m m}\)
2: Initialize \(===_{m m},=10^{-4}\)
3:while not converged do
4: Update \(\) and b by Eq. (11)
5: Update \(\) by solving Eq. (12)
6: Update \(\) by Eq. (14)
7: Update \(\) by Eq. (16)
8: Update \(,\) by Eq. (17)
9: Check the convergence condition \(\|-\|_{}<10^{-8}\)
10:endwhile
11: Return the predicted label \(\) according to Eq. (18).
```

**Algorithm 1** The Pseudo Code of the Proposed Method

## 4 Theoretical Analysis

**Theorem 1**.: _The square loss function \(\) of DPCLS can be rewritten as \(\|_{}+-\|_{F}^{2}\), where \(_{}^{m q}\) and \(^{m q}\) are ground-truth label matrix and false-positive label matrix respectively. Let \(=\) represent the family of functions for DPCLS, where the linear function \((,)\). Suppose the complexity of \(\) and the sparsity of \(\) are upper bounded by \(_{1}\) and \(_{2}\) respectively, i.e., \(\|\|_{F}_{1}\) and \(\|\|_{1}_{2}\). The Rademacher complexity of DPCLS with square loss \(\) is upper bounded as follow_

\[}_{S}()q( _{1}+_{2})}{m}. \]

**Lemma 1**.: _[_11_]_ _Denote \(\) be a family of functions and \(S=\{x_{1},x_{2},...,x_{m}\}\) is a set of fixed samples. Loss function \(\) is upper bounded by \( 0\), then for any \(>0\), with probability at least \(1-\), for all \(h\) we have_

\[(h)_{S}(h)+}_{S}()+36}, \]_where \((h)\) and \(_{}(h)\) are generalization error and empirical error to \(h\) respectively._

The detailed proof of **Theorem 1** is given in the **Section B** of the supplementary file. According to **Lemma 1** and **Theorem 1**, we have

\[(h)_{}(h)+q( _{1}+_{2})}{m}+3}. \]

The Rademacher complexity is bounded by the sum of the complexity of classifier \(\) and the sparsity of false-positive label matrix \(\). When the number of false-positive labels is small, which leads to a better generalization performance. Moreover, more training samples (a larger \(m\)) will also promote the generalization performance.

**Theorem 2**.: _Denote \(\{0,1\}^{m q}\) and \(\{0,1\}^{m m}\) the partial label matrix and the to be optimized semantic dissimilarity matrix. Let \(_{}\) and \(}\) be the ground-truth label matrix and the ground-truth dissimilarity matrix. Suppose the smallest eigenvalue of \(}\) and \(\) are \(_{}}\) and \(_{}\) respectively (\(_{}} 0,_{} 0\)). Let \(\|}_{}\|_{F}\) be the average distance of each sample between \(_{}\) and \(\) (i.e., \(\|}_{}\|_{F}=\| _{}-\|_{F}\)) and \(\|}_{}\|_{F}\) be the average distance of each corresponding position between \(}\) and \(\) (i.e., \(\|}_{}\|_{F}=}\| }-\|_{F}\)). Then we have_

\[\|}_{}\|_{F} {_{}}}\|-}\|_{F}+ }{_{}}}\|} \|_{F}, \] \[\|}_{}\|_{F}}m}\|^{}-_{ }_{}.^{}\|_{F}+}m}\|\|_{F}+}m}.\]

The proof can be found in **Section B** of the supplementary file. From **Theorem 2**, we can find that as the number of samples \(m\) increases, the upper bound of \(\|}_{}\|_{F}\) decreases, which indicates that more training samples will push the partial label matrix to be close to the ground-truth one and achieve better PLL performance. Moreover, a smaller error between \(\) and \(}\) implies a smaller upper bound of \(\|}_{}\|_{F}\), which indicates a better dissimilarity matrix can help achieve a better label matrix. Similarly, a larger number of training samples will reduce the distance between \(\) and \(}\), and a smaller error between \(\) and \(_{}\) implies a smaller upper bound of \(\|}_{}\|_{F}\), suggesting a better dissimilarity matrix. _As a summary, we prove that, under some general assumptions, a better dissimilarity matrix will help produce a better label matrix, and vice versa. Therefore, the rationality of the proposed adversarial prior is theoretically proved._

## 5 Experiment and Analysis

To demonstrate the effectiveness of the proposed model, we compared DPCLS with eight shallow PLL algorithms, which were configured by the suggested parameters in the literature, i.e., CLPL , PL-SVM , PL-KNN , PL-DA , IPAL , AGGD , PL-CLA , SDIM . Those methods were evaluated on 10 synthetic data sets and 7 real-world data sets, whose details can be found in **Section C** of the supplementary file. Three deep learning PLL methods RC , PRODEN , and CAVL  were also evaluated as comparison on the real-world data sets. Ten runs of \(50\%/50\%\) random train/test splits were performed on each data set, and the average classification accuracy and the standard deviation were recorded.

### Performance on Synthetic Data Sets

Following the widely-used partial label data generation protocol , 10 synthetic data sets were used to generate artificial partial label data sets. Specifically, three parameters \(r,p,\) control the generation process, i.e., \(p\) controls the proportion of partial label examples, \(r\) controls the number of false-positive labels, and \(\) controls the probability of a specific false-positive label co-occurs with the ground-truth label.

Fig. 1 illustrates the classification accuracy of six data sets (Glass, Steel, Ecoli, Yeast, Optdigits and Usps) as the co-occurring probability \(\) varies from 0.1 to 0.7 with step-size 0.1 (\(p\)=1, \(r\)=1). In general, the proposed model clearly exceeds the compared methods with different \(\), and achieves the highest accuracy in 33 out of 36 cases. Moreover, as \(\) increases, it is more difficult to distinguish the 

[MISSING_PAGE_FAIL:7]

Different from them, the proposed method produces excellent performance on all the evaluated data sets, suggesting its robustness to different data sets.

Table 3 (row (I)) reports win/tie/loss counts between DPCLS and eight comparing algorithms on the synthetic data sets according to the pairwise t-test at the significance level of 0.05, where we can find that DPCLS statistically outperforms other algorithms in 79.6% cases (331 out of 416) and none of the algorithms can beat DPCLS significantly.

### Performance on Real-world Data Sets

Real-world data sets were collected from various tasks and domains. As the average size of the candidate label set of FG-NET is large, which will cause low classification accuracy on the test set. Following  we employed the mean absolute error (MAE) to further calculate two extra evaluation indicators MAE3 and MAE5 on FG-NET, i.e., the test examples are considered to be correctly classified if the difference between the predicted age and the ground-truth age is no more than 3/5 years.

Table 2 demonstrates the classification accuracies of different methods on the real-world data sets. It is obvious that our method ranks first in all cases when compared with shallow PLL algorithms. Moreover, according to the pairwise t-test, our method statistically outperforms PL-SVM, PL-KNN and PL-DA on all real-world data sets and statistically surpasses AGGD, PL-CLA and SDIM on six data sets except FG-NET. Furthermore, compared with the best comparisons, our method improves the classification accuracy from 0.494 to 0.557 on MSRCv2 and from 0.747 to 0.770 on Lost.

We also compare the classification accuracies of our method with three deep learning PLL methods RC, PRODEN, CAVL on the real-world data sets. Our method ranks first on six the data sets except Yahoo! News. Specifically, according to the pairwise t-test, our method statistically outperforms RC, PRODEN and CAVL on three real-world data sets (Lost, MSRCv2 and BirdSong). Furthermore, compared with the best comparisons of deep learning PLL methods, our method improves the classification accuracy from 0.446 to 0.557 on MSRCv2 and from 0.715 to 0.751 on BirdSong. Therefore, we can conclude that our method shows competitive performance compared with the deep learning PLL methods.

   Type & Method & FG-NET & FG-NET3 & FG-NET3 & Lost & MSRCv2 & BirdSong & Malagy & Soccer Player & Yahoo! News \\   & DPCLS & **.077\(\).009** & **436\(\)017** & **.586\(\)011** & **.770\(\)024** & **.557\(\)014** & **.751\(\)009** & **.676\(\)004** & **.532\(\)002** & **.626\(\)003** \\  & CLPL &.058\(\).009\(\) & 383\(\)016** &.538\(\)017** & **.665\(\)019** &.371\(\)010** & **.610\(\)012** & **.675\(\)016** &.497\(\)002** & **.544\(\)**.004\(\)** \\  & PL-SVM &.052\(\).010\(\) &.357\(\)022** & **.511\(\)026** & **.578\(\)078** & **.310\(\)060** & **.682\(\)023** & **.564\(\)**.061** & **.500\(\)**.002** & **.546\(\)**.006\(\)** \\  & PL-KNN &.038\(\).005\(\) &.287\(\)022** & **.433\(\)019** & **.334\(\)021** & **.391\(\)023** & **.657\(\)014** & **.573\(\)**.007** & **.493\(\)**.002** & **.383\(\)**.003\(\)** \\  & PL-DA &.042\(\).004\(\) &.166\(\)050** & **.255\(\)**070** & **.309\(\)069** & **.416\(\)022** & **.690\(\)**.013** & **.606\(\)**.008** & **.495\(\)**.003\(\)** & **.397\(\)**.004\(\)** \\  & IPAI &.052\(\).006\(\) &.347\(\)015** & **.510\(\)**016** & **.610\(\)**020** & **.494\(\)**.024** & **.722\(\)006** & **.621\(\)**.017** & **.530\(\)**.005** & **.618\(\)**.007\(\)** \\  & AGGD &.075\(\).010 &.423\(\)016 &.568\(\)018 & **.702\(\)**024** & **.477\(\)019** & **.722\(\)**014** & **.593\(\)**.050** & **.527\(\)003** & **.616\(\)**.004\(\)** \\  & PL-CLA &.074\(\).011 &.424\(\)020 &.571\(\)015** & **.696\(\)012** & **.470\(\)**016** & **.722\(\)**012** & **.654\(\)**.005** & **.525\(\)**.003** & **.606\(\)**.004\(\)** \\  & SDIM &.073\(\).009 &.423\(\)022 &.568\(\)019** & **.726\(\)023** & **.447\(\)016** & **.724\(\)012** & **.543\(\)**007** & **.542\(\)**013** & **.607\(\)**.004\(\)** \\  & RC &.072\(\).009 &.391\(\)012** & **.488\(\)**020** & **.740\(\)**026** & **.446\(\)019** & **.715\(\)**007** & **.664\(\)**.004** & **.532\(\)**.004** & **.620\(\)**.003\(\)** \\  & PRODEN &.071\(\).009 &.415\(\)016** & **.567\(\)025** & **.712\(\)**032** & **.430\(\)**019** & **.704\(\)**013** & **.665\(\)**.017** & **.528\(\)**.004** & **.620\(\)**.003\(\)** \\  & CAVL &.071\(\).006 &.365\(\)020** & **.488\(\)**021** & **.747\(\)060** & **.444\(\)**013** & **.695\(\)**017** & **.668\(\)**.039** & **510\(\)**.004** & **.628\(\)**.004** \\   

Table 2: Classification accuracy (mean\(\)std) of each algorithm on real-world partial label data sets. \(\)/\(\) indicates whether the accuracy of DPCLS is statistically superior/inferior to the compared algorithm according to the pairwise t-test at 0.05 significance level. “S” and “D” indicate shallow and deep PLL methods respectively.

    & CLPL & PL-SVM & PL-KNN & PL-DA & IPAI & AGGD & PL-CLA & SDIM & D-PLL \\  (I) & 44/8/0 & 51/1/0 & 52/0/0 & 47/5/0 & 46/6/0 & 23/29/0 & 38/14/0 & 30/22/0 & – \\ (II) & 8/1/0 & 9/0/0 & 9/0/0 & 9/0/0 & 8/1/0 & 7/2/0 & 7/2/0 & 7/2/0 & 21/6/0 \\ Total & 52/9/0 & 60/1/0 & 61/0/0 & 56/5/0 & 54/7/0 & 30/31/0 & 45/16/0 & 37/2Table 3 (row (II)) presents the win/tie/loss counts of the proposed method against the compared ones on real-world data sets according to the pairwise t-test at significance level of 0.05. On all the real-world data sets, DPCLS achieves significantly superior performance in 85.9% cases, and gets comparable performance in the remaining cases against the comparing algorithms. Taking both the synthetic data sets and real-world data sets into account, our method accomplishes significantly better performance in 80.8% cases, which indicates the excellent classification ability of our method.

### Further Analysis

**Visualization** Fig. 2 visually compares the ideal, the original and the enhanced similarity matrix and semantic dissimilarity matrices on data set Ecoli (\(p\)=1, \(r\)=1, \(\)=0.8). Compared with the ideal similarity matrix, the value of each element in the original similarity matrix \(^{}\) is relatively small with many incorrect connections. Compared with the ideal dissimilarity matrix, the original dissimilarity matrix \(_{0}\) is relatively sparse, and many positive elements are missed in \(_{0}\). On the contrary, the similarity matrix and the dissimilarity matrix produced by DPCLS become denser, which are quite close to the ideal ones. Especially, when checking the areas highlighted by the red rectangle boxes, DPCLS can effectively recover the similarity relationship between samples in \(^{}\), and many positive elements missed by \(_{0}\) have been recovered by our method. The visual comparison illustrates that our method can produce much higher-quality similarity and dissimilarity matrices, which is useful to find a high-quality label confidence matrix \(\) and promote the performance of PLL.

**Ablation Study** In Table 4, we conduct an ablation study on the real-world data sets to check the necessity of the involved terms of our method. Specifically, DPCLS-LM denotes DPCLS without Dissimilarity Propagation and Kernel Extension, and DPCLS-KE and DPCLS-DP indicate DPCLS without Kernel Extension and without Dissimilarity Propagation respectively. From Table 4, we can find that both the kernel extension and the dissimilarity propagation are helpful in improving classification accuracy and taking both of them into account is the best choice.

## 6 Conclusion

In this paper, we have presented a novel PLL method. Specifically, we first construct a similarity matrix based on the multiplication of the label confidence matrix and its transpose. Then, we develop a dissimilarity matrix by exploiting the label space, and further utilize the local geometric structure of the samples to enhance the dissimilarity matrix, i.e., propagating the initial semantic dissimilarity relationships to the whole data set. The similarity and dissimilarity matrices form an adversarial relation, and the proposed model takes advantage of this novel adversarial prior to shrink the solution space of the label confidence matrix, which contributes to find the correct label in the candidate label set. Extensive experiments and comparisons on artificial and real-world partial label data sets have validated the effectiveness of our approach.

    & FG-NET & Lost & MSRCV2 & BirdSong & Malays & Soccer Player & Yahoo! News \\  DPCLS & **.077\(\).009** & **.770\(\).024** & **.557\(\).014** & **.751\(\).009** & **.676\(\).004** & **.532\(\).002** & **.626\(\).003** \\ DPCLS-LM & 0.067\(\).009\(\) & 652\(\).023\(\) & 357\(\).009\(\) & 577\(\).012\(\) & 587\(\).014\(\) & 492\(\).002\(\) & 447\(\).00\(\) \\ DPCLS-KE &.068\(\).009\(\) &.701\(\).023\(\) & 388\(\).014\(\) &.595\(\).014\(\) &.674\(\).009 &.495\(\).002\(\) &.463\(\).004\(\) \\ DPCLS-DP &.073\(\).010 &.687\(\).027\(\) &.466\(\).018\(\) &.721\(\).014\(\) &.612\(\).011\(\) &.524\(\).003\(\) &.604\(\).004\(\) \\   

Table 4: Ablation study of our method on the real-world partial label data sets.

Figure 2: Visual comparison of the similarity matrix and the semantic dissimilarity matrix on data set Ecoli (\(p\)=1, \(r\)=1, \(\)=0.8). (a), (d) Ideal similarity matrix and semantic dissimilarity matrix; (b), (e) Initial similarity matrix \(^{}\) and semantic dissimilarity matrix \(_{0}\); (c), (f) The similarity matrix \(^{}\) and the dissimilarity matrix \(\) produced by DPCLS. The brighter color indicates a larger value.

#### Acknowledgments

This work was supported in part by the National Natural Science Foundation of China under Grant 62106044 and 62072100, in part by the Natural Science Foundation of Jiangsu Province under Grant BK20210221, and in part by the ZhiShan Youth Scholar Program from Southeast University under Grant 2242022R40015.