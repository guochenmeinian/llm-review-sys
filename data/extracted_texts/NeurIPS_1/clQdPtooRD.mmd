# Oja's Algorithm for Streaming Sparse PCA

Syamantak Kumar\({}^{1}\)   Purnamrita Sarkar\({}^{2}\)

\({}^{1}\)Department of Computer Science, UT Austin

\({}^{2}\)Department of Statistics and Data Sciences, UT Austin

syamantak@utexas.edu, purna.sarkar@austin.utexas.edu

###### Abstract

Oja's algorithm for Streaming Principal Component Analysis (PCA) for \(n\) datapoints in a \(d\) dimensional space achieves the same sin-squared error \(O(r_{}/n)\) as the offline algorithm in \(O(d)\) space and \(O(nd)\) time and a single pass through the datapoints. Here \(r_{}\) is the effective rank (ratio of the trace and the principal eigenvalue of the population covariance matrix \(\)). Under this computational budget, we consider the problem of sparse PCA, where the principal eigenvector of \(\) is \(s\)-sparse, and \(r_{}\) can be large. In this setting, to our knowledge, _there are no known single-pass algorithms_ that achieve the minimax error bound in \(O(d)\) space and \(O(nd)\) time without either requiring strong initialization conditions or assuming further structure (e.g., spiked) of the covariance matrix. We show that a simple single-pass procedure that thresholds the output of Oja's algorithm (the Oja vector) can achieve the minimax error bound under some regularity conditions in \(O(d)\) space and \(O(nd)\) time. We present a nontrivial and novel analysis of the entries of the unnormalized Oja vector, which involves the projection of a product of independent random matrices on a random initial vector. This is completely different from previous analyses of Oja's algorithm and matrix products, which have been done when the \(r_{}\) is bounded.

## 1 Introduction

Principal Component Analysis (PCA)  is a classical statistical method for data analysis and visualization. Given a dataset \(\{X_{i}\}_{i=1,,n}\) where \(X_{i}^{d}\), sampled independently from a distribution with mean zero and covariance matrix \(\), the goal in PCA is to find the directions that explain most of the variance in the data. It is well known  that the leading eigenvector, \(\), of the empirical covariance matrix, \(\), provides an optimal error rate under suitable tail conditions on the datapoints.

Computing \(\) can be inefficient for large sample sizes, \(n\), and dimensions \(d\). Oja's algorithm  offers a comparable error rate in \(O(nd)\) time and \(O(d)\) space. Going back to the Canadian psychologist Donald Hebb's research , it has attracted a lot of attention in theoretical Statistics and Computer Science communities . In these works, the error metric is the \(^{2}\) error between the estimated vector and the principal eigenvector of \(\) (true population eigenvector \(v_{1}\)). Notably, , , and  establish that Oja's algorithm achieves the same \(O(r_{}/n)\) sin-squared error as the _offline algorithm_ that estimates the top eigenvector of the empirical covariance matrix.

However, when the effective rank, \(r_{}\), of \(\) (defined as \(()/\|\|\)) is large, PCA has been shown to be inconsistent . This setting comes up in sparse PCA problems, when \(v_{1}\) is \(s\)-sparse (i.e. has only \(s\) nonzero entries). Let \(\|.\|_{0}\) denote the \(l_{0}\) norm, i.e, the count of non-zero vector entries. Then, sparse PCA can be formally framed as the optimization problem:

\[_{}:=*{arg\,max}_{w^{d}} _{i}(X_{i}^{T}w)^{2},\|w\|_{2}=1,\ \|w\|_{0}=s \]In general, without further assumptions, Problem (1) is non-convex and NP-hard , as it reduces to subset selection in ordinary least squares regression.

 showed a \(O(_{*}^{2}s(d)/n)\) minimax lower bound for the \(^{2}\) error \(1-(v_{1}^{T})^{2}\), where \(_{*}^{2}:=_{2}}{(_{1}-_{2})^{2}}\). Here \(_{1}>_{2}_{d}\) are the eigenvalues of \(\). Extensive research has been conducted on optimal offline algorithms for sparse PCA, some of which are convex relaxation-based . Others involve iterated thresholding , where a truncated power-method is analyzed along to achieve sparsity. For brevity, we only describe algorithms that fit within the computation budget in consideration, i.e., \(O(nd)\) time, \(O(d)\) space. For a detailed comparison, see Table 1 and Appendix Section A.1.

**Support recovery algorithms in \(O(nd)\) time, \(O(d)\) space:** Consider the spiked covariance model

\[=_{i[r]}_{i}v_{i}v_{i}^{T}+I_{d} \]

where \(I_{d}\) is the identity matrix, \(_{i}>0\), and \(v_{i}\) are sparse. For the general case, we only assume \(v_{1}\) is \(s\)-sparse. When \(r=1\), \(_{ii}\) are the largest for \(i S\). Diagonal thresholding essentially estimates \(_{ii}\) within our computational budget and uses thresholding to recover the support . However, as we will show, without knowing the support sizes in each eigenvector and the number of spikes, this algorithm can fail, even in a spiked setting with \(r>1\). Also, for \(r=1\),  show how to adapt a black-box algorithm for sparse linear regression for support recovery.

**Sparse PCA algorithms in \(O(nd)\) time, \(O(d)\) space:** The streaming sparse PCA algorithms proposed by  and  require an initialization \(u_{0}\) with a sufficiently large \(|u_{0}^{T}v_{1}|=(1)\) (local convergence), which can be hard to find for large \(d\) and a general \(\). See Table 1 for details.

In light of this lack of \(O(nd)\) time, \(O(d)\) space globally convergent algorithms for sparse PCA, we ask the following question in this work:

**Goal:**_Is there a single-pass algorithm that, under a general \(\) with \(s\)-sparse \(v_{1}\), outputs \(\) achieving the minimax \(^{2}\) error (\(1-,v_{1}^{2}\)) with \(O(d)\) space, \(O(nd)\) time, without a strong initialization?_

We provide a surprisingly simple answer to the above question:

**Theorem 1.1** (Informal).: _For a suitable range of the effective rank \(r_{}\) and the ratio \(_{1}/_{2}\), there exists a single pass algorithm \(\) that recovers the support of \(v_{1}\) using Oja's algorithm, operates under \(O(d)\) space, \(O(nd)\) time and returns \(\) with the minimax optimal \(^{2}\) error, \(O(_{*}^{2}s(d)/n),\) for a general covariance matrix._

Figure 1: Comparison of Sparse PCA algorithms for identifying leading eigenvector, \(v_{1}\), operating in \(O(d)\) space and \(O(nd)\) time with population covariance matrix specified in , Section 5.1. Figure (a) plots  (Purple),  (Black),  (Orange) and our proposed Algorithm 2 (Blue) for \(n=d=1000\), with error bars over 100 random runs. Figure (b) shows an image of the covariance matrix with \(n=d=100\).

**Our contributions:**

1. **Support recovery:** We show, for a _general_\(\) with the only constraint of a \(s\)-sparse \(v_{0}\) that the top \(k\) entries of the Oja vector in magnitude include the true support with high probability. The Oja vector is initialized by a random unit vector.
2. **Sparse PCA:** We use the recovered support to achieve a minimax optimal sparse PCA algorithm.
3. **Entrywise analysis:** Our analysis is nontrivial and novel because it deviates from all existing analyses of matrix products and streaming PCA  which require \(\|X_{i}\|^{2}/_{1}\) or \(r_{}\) to be bounded to obtain the \(O(1/n)\,^{2}\) error rate.

In Figure 0(b), for a simple spiked model with \(r=2\), we show the relative performances of all \(O(nd)\) time and \(O(d)\) algorithms in Table 1. Our thresholded and renormalized Oja algorithm outperforms all other algorithms operating under the same computational budget. The diagonal thresholding algorithm (), which is successful for the special case of \(r=1\), has a large error in the general case.

We now present an outline of our paper. We start by describing the problem setup and assumptions in Section 2. Then we present our main results in Section 3, which includes our results for Support

  Paper(s) & \(_{1}/_{2}\) & \(\) & Global conv.? & Space & Time & \(^{2}\) error \\  Johnstone and Lu  & \(1+o(1)\) & Spiked & Y & \(O(d)\) & \(O(nd)\) & \(o(1)\) \\  SDP-based  & \(1+o(1)\) & General & Y & \(O(d^{2})\) & \(O(n^{}+d^{})\) & \(O((d)}{n})\) \\
 & & & & & & \\  Shen et al.  & \((d^{c}),>0\) & General & Y & \(O(d^{2})\) & \(O(nd^{2})\) & \(o(1)\) \\  Ma, Cai et al.  & \(1+(1)\) & Spiked & Y & \(O(d^{2})\) & \(O(nd^{2})\) & \(O()\) \\
 & & & & & & \\  Yuan and Zhang  & \(1+(1)\) & General & N & \(O(d^{2})\) & \(O(nd^{2})\) & \(O()\) \\  Yang and Xu  & \(1+(1)\) & Spiked & N & \(O(d)\) & \(O(nd)\) & \(O()\) \\  Wang and Lu  & \(1+(1)\) & Spiked & N & \(O(d)\) & \(O(nd)\) & \(o(1)\) \\  Ojaâ€™s Algorithm  & \(1+o(1)\) & General & Y & \(O(d)\) & \(O(nd)\) & \(O(}}{n})\) \\   Deshp et al.  & \(1+o(1)\) & Spiked & Y & \(O(d^{2})\) & \(O(nd^{2})\) & \(O((d)}{n})\) \\  Qiu et al.(Cor. 2)  & \(1+o(1)\) & General & Y & \(O(d^{2})\) & \((nd^{2})\)1  & \(O((d)}{n})\) \\  Qiu et al.(Th. 4)  & \(1+o(1)\) & General & Y & \(O(d^{2})\) & \(O(nd^{2})\) & \(O((d)}{})\) \\  Gataric et al. (Th. 2) & \(1+o(1)^{2}\) & Spiked & Y & \(O(d^{2})\) & \(O(nd^{2})\)3 & \(O()\) \\
 & & & & & & \\  
**Our work** & \(1+(1)\) & General & Y & \(O(d)\) & \(O(nd)\) & \(O()\) \\  

Table 1: Comparison of sparse PCA algorithms for estimating \(v_{1}\), based on various parameters. We require Assumptions 1 and 2. The other algorithms may be valid under weaker assumptions. For ease of comparison, we fix \(}{_{2}}=1+(1)\) and \(}(n)}{n}=O(1)\) for our results in this table.

Recovery (Section 3.1), Sparse PCA (Section 3.3) and Entrywise Deviation bounds (Section 3.5) for the Oja vector. Finally, we provide a sketch of the proof along with the techniques used in Section 4.

## 2 Problem setup and preliminaries

**Notation**. We use \([]\) to denote expectation and \([n]\) for \(\{1,,n\}\). The matrix multiplication constant is denoted as \( 2.372\). \(X\!\!\! Y\) represents statistical independence between random variables \(X\) and \(Y\). The \(^{2}\) norm for vectors and operator norm for matrices is \(\|.\|_{2}\), the count of nonzero vector elements (\(^{0}\) norm) is \(\|.\|_{0}\), and the Frobenius norm for matrices is \(\|.\|_{F}\). For \(v^{d},R[d]\), \( v_{R}^{d}\) is the truncated vector with entries outside \(R\) set to 0. \(I_{d}^{d d}\) is the identity matrix, with \(i^{th}\) column \(e_{i}^{d 1}\). For any set \(T[d]\), \(I_{T}^{d d}\) is defined as \(I_{T}(i,j)=(i,j T)(i=j)\), where \((.)\) is the indicator random variable. \( A,B:=(A^{T}B)\) represents the matrix inner product. \(\) and \(\) represent order notations with logarithmic factors. We start by defining subgaussianity for multivariate distributions.

**Definition 2.1**.: _A random mean-zero vector \(X^{d}\) with covariance matrix \(\) is a \(-\)subgaussian random vector (\(>0\)) if for all vectors \(v^{d}\), we have \([(v^{T}X)](^{2}v^{T}  v/2)\). Equivalently, \(\)\(L>0\), such that \( p 2\), \(([|v^{T}X|^{p}])^{} L  v}\). 4_

This definition of subgaussianity has been used in contemporary works on PCA and covariance estimation (See for example  and Theorem 4.7.1 in ). We operate under the following two assumptions, unless otherwise specified,

**Assumption 1** (Subgaussianity).: \(\{X_{i}\}_{i[n]}\) _are of independent and identically distributed \(\)-subgaussian vectors in \(^{d}\) with covariance matrix \(:=[X_{i}X_{i}^{T}]\)._

We denote the eigenvectors of \(\) as \(v_{1},v_{2}, v_{d}\) and the corresponding eigenvalues as \(_{1}>_{2}_{d}\). Define \(V_{}:=[v_{2},v_{3}, v_{d}]^{d(d -1)}\) and \(_{2}^{(d-1)(d-1)}= {diag}(_{2},_{3},_{d})\).

**Assumption 2** (Sparsity and Spectral gap).: _We assume that \(\{1,}{_{1}-_{2}}\}(_{2})}{_{1}-_{2}}\) and \(}{_{1}-_{2}} c(n)}}\) for an absolute constant \(c>0\). The leading eigenvector, \(v_{1}\), satisfies \(\|v\|_{0} s\) with support set \(S:=\{i:v_{1}(i) 0\}\)._

**Remark 2.2**.: _We note that Assumption 2 allows for \(r_{}\) to be as large as \(d\), given a sufficient eigengap. This can be observed by setting \(_{1}=_{2}(1+g_{n})\) for some \(g_{n}>0\). Note that \((_{2})}{_{1}-_{2}}( }{g_{n}}r_{},}d)\). If \(g_{n} 1\), then,_

\[\{1,}\}(_{2})}{ _{1}-_{2}}}(}{g_{n}}r_{ },}d)=2}(}{2 g_{n}}r_{},}d) 2r_{}/g_{n}^{2}\]

_If \(g_{n} 1\), then,_

\[\{1,}\}(_{2})}{ _{1}-_{2}}(_{2})}{_{1 }-_{2}}}\]

_therefore, in both cases, as long as \(d}{ n}\), \(r_{}\) can be as large as \(d\), while allowing for Assumption 2 to hold._

**Oja's algorithm with constant learning rate.** With a constant learning rate, \(\), and initial vector, \(u_{0}\), Oja's algorithm , denoted as \((\{X_{t}\}_{t[n]},,u_{0})\), performs the updates, \(u_{t}(I+ X_{t}X_{t}^{T})u_{t-1},\ u_{t}}{ \|u_{t}\|_{2}}\). For convenience of analysis, we also define \( t[n]\),

\[B_{t}:=(I+ X_{t}X_{t}^{T})(I+ X_{t-1}X_{t-1}^{T} )(I+ X_{1}X_{1}^{T}),\ B_{0}=I \]Main results

We present our main contributions in two stages. Firstly, in Section 3.1, we demonstrate that with an upper bound on the support size, the top elements of the Oja vector include the support with constant probability, which can be enhanced using a boosting procedure (\(\)) described in Section 3.4. Secondly, in Section 3.3, we use the support to extract the eigenvector and provide a high-probability \(^{2}\) error guarantee. Section 3.5 details our results on bounding the entrywise deviation of the Oja vector, which are crucial to our proofs and of independent interest. Detailed proofs are in the Appendix, Sections A.4 and A.5, with the learning rate, \(\), specified in Lemma A.2.4.

### Support recovery

```
1:Input : Dataset \(\{X_{i}\}_{i[n]}\), Cardinality parameter \(k s\), learning rate \(>0\)
2:\(u_{0}(0,I)\)
3:\((\{X_{i}\}_{i[n]},,y_{0})\)
4:\(\) Indices of \(k\) largest values of \(||\)
5:return\(\)
```

**Algorithm 1**\((\{X_{i}\}_{i[n]},k,)\)

Algorithm 1 provides an estimate, \(\), of the true support set, \(S\). It computes the Oja vector and returns the set of indices corresponding to its \(k\) largest entries in absolute value. Our key result in Lemma 3.1 discusses the recovery of the support set, \(S\), for any \(k s\), without requiring exact knowledge of the sparsity parameter \(s\). Using Algorithm 1, it provides a set \( S\) with probability at least 0.9.

**Lemma 3.1** (\(s\)-Agnostic Recovery).: _Under Assumptions 1,2, for \(_{i}|v_{1}(i)|=(}{_{1}-_{2}}(})^{})\), \((\{X_{i}\}_{i [n]},k,:=-_{2})})\) with \(k s\) satisfies, \((S) 0.9\)._

If \(k=s\), i.e, the size of the support is exactly known, then we can improve the result of Lemma 3.1 to obtain an estimator, \(\), of the support set with high probability. Theorem 3.2 provides the corresponding guarantees. The \(\) algorithm uses geometric aggregation on subsets returned from Algorithm 1 run on \((1/)\) disjoint subsets of the data and is described in Section 3.4.

**Theorem 3.2** (High probability support recovery).: _Let Assumptions 1, 2 hold. For dataset \(:=\{X_{i}\}_{i[n]}\), let \(\) be the randomized algorithm which computes \((\{X_{i}\}_{i [n]},k,)\), where \(:=-_{2})}\) and \(k=s\). Then, for \((0,1)\), \(_{i}|v_{1}(i)|=(}{_{1}-_{2}}(})^{})\), \((\{X_{i}\}_{i[n]}, ,)\) satisfies,_

\[(=S) 1-\]

For comparison, existing support recovery algorithms for general \(\) are known for convex-relaxation-based algorithms like the SDP-based algorithm of . These require a much larger computational budget than ours. In Section 3.3, we show how to use the \(s\)-agnostic support recovery in Lemma 3.1 to perform Sparse PCA and obtain a \(^{2}\) error guarantee, where the final high probability error bound is obtained using a similar probability-boosting argument. For the learning rate, we follow the convention in related work () and choose the optimal value of the learning rate, which requires the knowledge of \(_{1}-_{2}\). We believe an educated guess of \(\) would lead to consistency at the cost of a suboptimal error bound.

### Comparison with other support recovery algorithms

We note that (see Table 1), for the spiked model with \(r=1\) (Eq 2)  and  provide a diagonal thresholding algorithm for support recovery using \(O(d)\) space and \(O(nd)\) time.5 To achieve a high-probability guarantee for the estimated support set, \(\), of the form \((=S) 1-\), they require (Proposition 1, ) \(n=(s^{2}(d)+())\). In comparison, Theorem 3.2 requires a larger sample size.

**Remark 3.3**.: _In practice, we will not know whether \(\) is spiked or general. So, we can always augment our support recovery algorithm by taking a union of the support from the Oja vector and diagonal thresholding, still maintaining \(O(nd)\) time and \(O(d)\) space._

However, diagonal thresholding only works for the spiked model with a single spike, which our results do not require. It is easy to construct a \(\) where the elements in the support of an eigenvector with a small eigenvalue have a larger magnitude than those of \(v_{1}\) (Eq A.13). Here the diagonal thresholding method fails (see Figure 0(a) and Proposition 3.4). The explicit construction and the proof of Proposition 3.4 are available in the Appendix Section A.2. Figure 1 a) plots the \(^{2}\) error due to different Sparse PCA algorithms operating in \(O(d)\) space and \(O(nd)\) time on such a covariance matrix, \(\), which is visualized in Figure 0(a)).

**Proposition 3.4** (Lower bound for diagonal thresholding).: _Let Assumption 1 hold. For any diagonal-thresholding algorithm, \(\), performing support recovery with sparsity parameter \(s\) such that \(n=(^{4}s^{2}(d))\), there exists a covariance matrix \(\) with principal eigenvector, \(v_{1}\), \(\|v_{1}\|_{0}=s\), such that, \((| S|=0) 1-d^{-10}\)._

It may seem that if \(r\) in Eq 2 is small, and the sparsity parameters of each \(v_{i}\), \(i r\) are known, then diagonal thresholding would work. However, in general, \(r\) can be as large as \(d\) and the union of supports of \(v_{i}\) can be \([d]\).

### Sparse PCA

In this section, we describe our results for Sparse PCA, which use the support recovery guarantees developed in Section 3.1. For the results in this section, we split the dataset \(D:=\{X_{i}\}_{i[n]}\) into two halves and estimate the support using the first half as \((\{X_{i}\}_{i []},k,:=-_{2})})\) and input, \(k s\). The second half of the samples are then used to compute the estimated sparse eigenvector. Algorithm 2 describes a general procedure for Sparse PCA given access to an estimated support set, \(\). We start with an intuitive procedure in Theorem 3.5, which runs Oja's algorithm on the data and then uses the support to truncate the estimated eigenvector.

```
1:Input : Dataset \(\{X_{i}\}_{i[n]}\),, estimated support set \([d]\), Algorithm \(\), Parameters \(\)
2:\((\{X_{i}\}_{i[n]}, )\)
3:\(_{}_{ }}{\|\|\|_{}\|_{2}}\)
4:return\(_{}\)
```

**Algorithm 2**\((\{X_{i}\}_{i[n]},, ,)\)

**Theorem 3.5** (Vector Truncation).: _Let Assumptions 1 and 2 hold and \(k s\). For dataset \(D:=\{X_{i}\}_{i[n]}\) and \(w_{0}(0,I)\), let \(\) be the randomized algorithm which computes \(_{}(\{X_{i} \}_{i(,n]},,,\{ ,w_{0}\})\), where \(:=-_{2})}\). Then, for \(_{i}|v_{1}(i)|=((})^{})\), \((\{X_{i}\}_{i[ n]},,d^{-10})\) satisfies,_

\[^{2}(,v_{1}) C^{}(}{_{1}-_{2}})^{2}(d)}{n}\]

_with probability at least \(1-d^{-10}\), where \(C^{} 0\) is an absolute constant._

**Remark 3.6** (Limitation).: _Existing inconsistency results on PCA  provide a threshold for signal strength \((_{1}-_{2})/_{1}\), below which, the principal eigenvector of \(\) is asymptotically orthogonal to \(v_{1}\). We believe a similar result may hold for the Oja vector, which leads to the signal strength condition in Assumption 2._Note that the rate obtained in Theorem 3.5 nearly matches the minimax lower bound proved in , up to a factor of \(}{_{1}}\) and \((d)\) and has optimal dependence on \(s\), and \(n\). A limitation of Algorithm 2 is that it uses the estimated support, \(\), at the very end after computing the estimated eigenvector to enhance the signal by truncation. Instead, one may run Oja's algorithm on datapoints restricted to the recovered support in the beginning.

To this end, we use the algorithm in  (denoted by \(\), see Proposition A.5.3) for subgaussian data, which uses an iteration-dependent sequence of step-sizes \(\{_{i}\}_{i[n]}\). We run Algorithm 2 with \(\) as the procedure to do sparse PCA. This leads to the minimax error rate, shown in Theorem 3.7. The high probability bounds in Theorem 3.5 and 3.7 both use the support recovery guarantees derived in Section 3.1 and the boosting procedure described in Section 3.4. Detailed proofs for both results can be found in Appendix Section A.5.

**Theorem 3.7** (Data Truncation).: _Let Assumptions 1 and 2 hold and \(k s\). For dataset \(:=\{X_{i}\}_{i[n]}\) and \(w_{0}(0,I)\), let \(\) be the randomized algorithm which computes \(_{}(\{ X _{i}\}_{i(,n]}, {S},,\{\{_{t}\}_{t[ ]},w_{0}\})\). Then for \(_{i}|v_{1}(i)|=(}{_{1}-_{2}}(})^{})\), \((\{X_{i}\}_{i[ n]},,d^{-10})\) satisfies,_

\[^{2}(,v_{1}) C^{} _{2}}{(_{1}-_{2})^{2}}\]

_with probability at least \(1-d^{-10}\), where \(C^{} 0\) is an absolute constant._

**Remark 3.8**.: _Algorithm 2, with both \(\) and \(\) as input procedures require a simple initialization vector \(w_{0}(0,I)\). In contrast, the block stochastic power method-based algorithm presented in  provides local convergence guarantees (see Theorem 1) requiring a block size of \(O(s(d))\). They provide an initialization procedure, but the theoretical guarantees to achieve such an initialization require block size \((d)\).  also require a close enough initialization. In the particular setting of a single-spiked covariance model, they require \(|w_{0}^{T}v_{1}|=(1)\). In comparison for Algorithm 2, 3.7, it suffices to have \(|w_{0}^{T}v_{1}|}\) with probability at least \(1-\) (see Lemma A.2.1)._

### Probabilistic boosting

In this section, we describe a generic procedure for boosting the success probability of a given randomized algorithm, \(\) (also see ). If \(\) satisfies Definition 3.9, then its probability can be boosted using this procedure. The formal guarantees of the boosting procedure are provided in Lemma 3.10 (proof in Appendix Section A.2). It divides the data evenly into \(()\) buckets6, runs \(\) on each bucket and aggregates the results via pairwise comparisons.

**Definition 3.9**.: _Let \(\) be a set with metric \(\) and \(\) be a randomized algorithm which takes as input \(n\) i.i.d datapoints \(D:=\{X_{i}\}_{i[d]}\) and possibly additional statistically independent parameters \(\), and returns an estimate \(q\), which satisfies \(((q,q_{*}))\) for a fixed \(q_{*}\). Then, \(\) is said to be a constant success oracle with parameters \((D,,,,q_{*},)\), denoted as \(:=(D,,,,q_ {*},)\)._

```
1:Input : Dataset \(D:=\{X_{i}\}_{i[n]}\), \(:=(D,,,,q_ {*},)\), Required failure probability \(\)
2:Return : An estimate \(\) such that \(((,q_{*}) 3) 1-\)
3:\(S 30()\), \(B n/S\)
4:\( t[S],q_{t}(\{X_{B(t-1 )+i}\}_{i[B]},,,,q_{*}, ),\ \ _{t}\{t^{}[S]: (q_{t},q_{t^{}}) 2\}\)
5:If\( q_{t}\) such that \(_{t}/S 0.4\)Return\(q_{t}\)Else Return\(\)
```

**Algorithm 3**\((\{X_{i}\}_{i[n]},, )\)

**Lemma 3.10** (Geometric Aggregation for Boosting).: _Let \(:=(D,,,,q_{*}, )\) (Definition 3.9) for dataset \(D:=\{X_{i}\}_{i[n]}\). Then for \((0,1)\), \((\{X_{i}\}_{i[n]}, ,)\) satisfies \(((,q_{*}) 3) 1-\)._

### Entrywise deviation of the Oja vector

To analyze the success probability of recovering the indices in \(S\), we will define the following event, \(:=\{S\}\). We now upper bound \((^{c})\). Define an element of the unnormalized Oja vector as \(r_{i}:=e_{i}^{T}B_{n}u_{0},\;\;i[d]\). Here \(u_{0}(0,I)\) is the initialization used in Algorithm 1. Observe that

\[_{n}>0\{ i S,|r_{i}| _{n}\}\{|\{i:i S,|r_{i}|_{n}\}| k-s\}\]

or equivalently,

\[^{c}_{n}>0,\{ i S,|r_{i}|_{n}\} \{|\{i:i S,|r_{i}|_{n}\}|>k-s\}\]

Therefore, for any fixed \(_{n}>0\), \(^{c}\{ i S,|r_{i}|_{n}\}\{|\{ i:i S,|r_{i}|_{n}\}|>k-s\}\) We will, therefore, be interested in the tail behavior of \(r_{i}\) for \(i S\) and \(i S\). Before presenting our theorems, we will use Figure 2 to emphasize the daunting nature of what we aim to prove. Consider the quantity \([r_{i}|u_{0}]=[e_{i}^{T}B_{n}u_{0}|u_{0}]\). We use \(X=C\) to denote \(|X-C|\).

\[[r_{i}|u_{0}] =e_{i}^{T}[B_{n}]v_{1}v_{1}^{T}u_{0}+e_{i}^{ T}[B_{n}]V_{}V_{}^{T}u_{0} \] \[=e_{i}^{T}v_{1}v_{1}^{T}u_{0}(1+_{1})^{n }|e_{i}^{T}V_{}V_{}^{T}u_{0}|(1+_{2})^{n}& i S\\ |e_{i}^{T}V_{}V_{}^{T}u_{0}|(1+_{2})^{n}& i S\]

Thus, traditional wisdom would make us hope that the elements, \(r_{i}\), will concentrate around their respective expectations, whose absolute values are off by a ratio \(|v_{1}(i)||u_{0}^{T}v_{1}|(n(_{1}-_{2}))\).

However, Figure 2(a) shows that while the elements in the support seem _close_ to their expectation, those not in support are, on average, _much larger_ than their expectation. First, note that elementwise analysis of the Oja vector has not been done even in the low dimensional regime where \(r_{}/n 0\). In this regime, there is very recent related work for eigenvectors of the empirical covariance matrix \(\) which are not applicable here. In the high-dimensional case, an analog can be drawn with elements \(\), which concentrate around their mean individually. Yet, \(\|-\|\) is not small. Thus, thresholding \(\) obtains consistent estimates of \(\) under sparsity assumptions .

A similar principle is applied by  where the eigenvector of \(\) is truncated. They assume that \(n\) is fixed, and \(_{1}/_{2}=d^{}\) as \(d\). In comparison, our analysis is about products of random matrices, not sums, and hence, completely different. We will show that \(_{1}(i)\), even when \(i S\), do not concentrate. But for a suitably chosen threshold, They are large with high probability,whereas those outside \(S\) are much lower with high probability. Proving this is also difficult because the analysis involves the concentration of the projection of a product of independent high dimensional matrices on some initial random vector. Lemma 3.11 establishes exactly that for elements in the support.

**Lemma 3.11** (Tail bound in support).: _Fix a \((0.1,1)\). Define the event \(:=\{|v_{1}^{T}u_{0}|}\}\) and threshold \(_{n}:=}_{i S}|v_{1}(i)| (1+_{1})^{n}.\). Let the learning rate be set as in Lemma 3.1. Then, for an absolute constant \(C_{H}>0\),_

\[ i S,(|r_{i}|_{n}| ) C_{H}[_{1}(n)+ _{1}(}{_{1}-_{2}}) (i)^{2}}]\]

Our next result provides a bound for \(i S\).

**Lemma 3.12** (Tail bound outside support).: _Fix a \((0.1,1)\). Let the learning rate be set as in Lemma 3.1 and define the threshold \(_{n}:=}_{i S}|v_{1}(i)| (1+_{1})^{n}.\). Then, for \(_{i}|v_{1}(i)|=(}{_{1}-_{2}}(})^{})\) and an absolute constant \(C_{T}>0\) we have,_

\[ i S,(|r_{i}|>_{n}) C _{T}[^{2}_{1}^{2}(}{_{1}-_ {2}})^{2}(_{i S_{}}v_{1}(i )^{2}})^{2}]\]

The proofs of Lemmas 3.11 and 3.12 are based on tail-bounds involving the second and fourth moments of \(r_{i}:=e_{i}^{T}B_{n}u_{0}\). The details of obtaining the tail bounds are deferred to the Appendix Section A.3. The results developed in this section are used to analyze the support recovery and \(^{2}\) error guarantees provided in Section 3.1 and 3.3. We provide a brief proof sketch in Section 4.

## 4 Proof technique

In this section, we outline the proof techniques for the entrywise deviation bounds in Lemmas 3.11 and 3.12. These bounds are crucial for analyzing both the support recovery results (Lemma 3.1 and Theorem 3.2) and the sparse PCA results (Theorems 3.5 and 3.7). The proof involves deriving bounds on the expectation and second moment of \(u_{0}^{T}B_{n}UU^{T}B_{n}u_{0}\), where \(U^{d k}\) is a fixed matrix and \(u_{0}(0,I)\). It then applies Chebyshev's inequality to obtain the tail bound. For the proof sketch, we use \(U=e_{i}\), but we maintain general notation for broader applicability in Theorem 3.5. For our results, we also need to bound this quantity with \(U=I_{S}\) (see Lemma A.5.1 for details). Our techniques to bound \([u_{0}^{T}B_{n}UU^{T}B_{n}u_{0}]\) are detailed in Section 4.1.

### Solving a linear system of recursions

One can show that (see Lemma A.2.11 in Appendix),

\[[u_{0}^{T}B_{n}^{T}UU^{T}B_{n}u_{0}]=[v_{1}^{T}B_{n}^{T}UU^{T}B_{n}v_{1}]}_{=:_{n}}+[(V_{}^{T}B_{n}^{T}UU^{T}B_{n}V_{ })]}_{=:_{n}} \]

We start by showing how to bound \(_{n}\) and \(_{n}\). Before we dive into our techniques, we note that the analysis of Oja's algorithm  in the non-sparse setting provides some tools that we could potentially use here. Using the recursion from Lemma 9 in , we get

\[\|[B_{n}UU^{T}B_{n}^{T}]\|(2n _{1}+n^{2})\|UU^{T}\|, \]

where \(\) is a variance parameter defined as \(\|[(A_{1}-)(A_{1}-)^{T}]\|\). Lemma A.2.3 shows that for \(\)-subgaussian \(X\) (definition 2.1),

\[:=\|[(A_{1}-)(A_{1}-)^{T}] \|=\|[A_{1}A_{1}^{T}]-^{2}\| 2 L^{4}^{4}_{1}()+_{1}^{2}\]

This provides an upper bound on \(_{n}\|[B_{n}UU^{T}B_{n}^{T}]\|\). While this bound is tight when \(r_{}\) is bounded by a constant, in the high dimensional setting (Assumption 2) considered in this work, this bound is too loose. This is evident from Figure 2(B), which plots \(\|[B_{n}UU^{T}B_{n}^{T}]\|\) for \(U=I\), along with the bound achieved using Eq 6, labeled as _Jain et al. (2016)_. Note that the plots are in the \(\)-scale so a difference in the slopes translates to a significant multiplicative difference. This warrants a more fine-grained analysis of \(_{n}\).

Let us examine \(_{n}\) more closely to obtain a finer bound. Using the structure of the matrix product, \(B_{n}\), from Eq 3, we have:

\[_{n}=_{n-1}(1+2_{1})+^{2}[ (v_{1}^{T}X_{n}X_{n}^{T}v_{1})(X_{n}^{T}B_{n-1}UU^{T}B_{n-1}^{ T}X_{n})]\]

Now, as a consequence of subgaussianity (see Lemma A.2.2), for \(K:=(2L^{2}^{2})^{2}\), with the Cauchy-Schwartz inequality, the second term in the RHS can be bounded further using:

\[[(v_{1}^{T}X_{n}X_{n}^{T}v_{1})^{2}] K _{1}^{2},\ \ [(X_{n}^{T}B_{n-1}UU^{T}B_{n-1}^{T}X_{n} )^{2}]_{n-1}] K(U^{T}B_{n-1} ^{T} B_{n-1}U)^{2}\]

Therefore, using the above bound along with the eigen-decomposition \(:=_{1}v_{1}v_{1}^{T}+V_{}_{2}V_{}^{T}\),

\[_{n}(1+2_{1}+4L^{2}^{2}^{4}_{1}^{2 })_{n-1}+4L^{2}^{2}^{4}_{1}_{2}_{n-1} \]

Similarly, \(_{n}\) can also be upper bounded as follows:

\[_{n}(1+2_{2}+4^{2}L^{4}^{4}_{2} ())_{n-1}+4^{2}L^{4}^{4 }_{1}()_{n-1} \]

Note that upper bounding and eliminating \(_{n-1}\) or \(_{n-1}\) from Eq 8, 7 respectively, would simplify the recursion but lead to a weaker bound as in Eq 6. Therefore, we solve Eq 7 and 8 as a system of linear recursions in \(_{n}\) and \(_{n}\).

\[_{n}\\ _{n}=1+2_{1}+O( ^{2}_{1}^{2})&O(_{1}_{2})\\ O(())&1+2_{2}+O(^{2} ())}_{:=P}_{n- 1}\\ _{n-1} \]

Estimating elements of \(P^{n}\), where \(P\) is the defined \(2 2\) matrix, is crucial.  gives a compact expression for these elements using \(_{1}(P)\) and \(_{2}(P)\). Under our assumptions, we have \(P_{11}>P_{22}\). A naive upper bound on \(_{1}(P)\) using Weyl's inequality  is \(1+2_{1}+c_{3}()\), similar to Eq 6. Since recursions like Eq 9 are common in our analysis, we provide a general solution in Lemma A.2.5 (detailed in the Appendix Section A.2).

An important consequence of this is that we now have the following bounds on \(_{n}\) for \(U=I\):

\[_{n}(1+2_{1}+c_{1}^{2}_{1}^{2})^{n}(1+O( _{1})) \]

which is much tighter than Eq 6 in our high-dimensional regime. Furthermore, observing Figure 2(b), we see that Eq 10 presents a much tighter upper bound, matching \((1+_{1})^{2n}\) up to constant factors.

Recall that the bounds obtained in this section deal with \(_{n},_{n}\) defined in Eq 5. A similar system of recursions can be obtained to get tight bounds on \([(v_{1}^{T}B_{n}^{T}UU^{T}B_{n}v_{1})^{2}]\) and \([(V_{}^{T}B_{n}^{T}UU^{T}B_{n}V_{ })^{2}]\), details of which we defer to the Appendix in Lemmas A.2.9, A.2.10.

## 5 Conclusion

Oja's algorithm for streaming PCA has been extensively studied in the recent theoretical literature, typically assuming that \(\|X_{i}\|^{2}/_{1}\) is bounded or a slowly growing covariance matrix effective rank \(r_{}\). This paper addresses the high-dimensional sparse PCA setting where the effective rank \(r_{}\) can be as large as \(n/ n\) while \(v_{1}\) is \(s\)-sparse. In this context, while there has been a vast body of work that achieves minimax error bounds, we are unaware of any single-pass algorithm that works in \(O(nd)\) time, \(O(d)\) space, on a general \(\), without any strong initialization. Surprisingly, our thresholded estimator achieves the minimax error bound of \(O(s d/n)\), whereas the error rate of Oja's algorithm is \(O(r_{}/n)\). Empirically, the elements of the unnormalized Oja vector do not concentrate in this regime. Through an analysis that unocuples the projection of a product of independent random matrices on \(v_{1}\) and its orthogonal subspace, we show that the entries of the Oja vector within the support of \(v_{1}\) are large, while those outside are much smaller.