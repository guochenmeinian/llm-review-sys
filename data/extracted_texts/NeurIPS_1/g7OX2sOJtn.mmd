# LeanDojo: Theorem Proving with

Retrieval-Augmented Language Models

 Kaiyu Yang\({}^{1}\), Aidan M. Swope\({}^{2}\), Alex Gu\({}^{3}\), Rahul Chalamala\({}^{1}\), Peiyang Song\({}^{4}\),

**Shixing Yu\({}^{5}\), Saad Godil\({}^{*}\), Ryan Prenger\({}^{2}\), Anima Anandkumar\({}^{1,2}\) \({}^{1}\)Caltech, \({}^{2}\)NVIDIA, \({}^{3}\)MIT, \({}^{4}\)UC Santa Barbara, \({}^{5}\)UT Austin [https://leandojo.org](https://leandojo.org)**

Research conducted while Saad Godil was at NVIDIA.

###### Abstract

Large language models (LLMs) have shown promise in proving formal theorems using proof assistants such as Lean. However, existing methods are difficult to reproduce or build on, due to private code, data, and large compute requirements. This has created substantial barriers to research on machine learning methods for theorem proving. This paper removes these barriers by introducing _LeanDojo_: an open-source Lean playground consisting of toolkits, data, models, and benchmarks. LeanDojo extracts data from Lean and enables interaction with the proof environment programmatically. It contains fine-grained annotations of premises in proofs, providing valuable data for _premise selection_--a key bottleneck in theorem proving. Using this data, we develop _ReProver_ (Retrieval-Augmented Prover): an LLM-based prover augmented with retrieval for selecting premises from a vast math library. It is inexpensive and needs only one GPU week of training. Our retriever leverages LeanDojo's program analysis capability to identify accessible premises and hard negative examples, which makes retrieval much more effective. Furthermore, we construct a new benchmark consisting of 98,734 theorems and proofs extracted from Lean's math library. It features challenging data split requiring the prover to generalize to theorems relying on novel premises that are never used in training. We use this benchmark for training and evaluation, and experimental results demonstrate the effectiveness of ReProver over non-retrieval baselines and GPT-4. We thus provide the first set of open-source LLM-based theorem provers without any proprietary datasets and release it under a permissive MIT license to facilitate further research.

## 1 Introduction

Reasoning is a cornerstone of human intelligence and a fundamental goal of AI . One prominent task is automated theorem proving (ATP): automatically generating proofs for theorems expressed in formal logic. ATP is useful for formal mathematics, producing mathematical proofs that can be checked rigorously . Furthermore, it underpins formal verification, which is essential for proving the correctness and safety of high-stakes applications .

ATP is challenging since the search space is prohibitively large. In many applications, it is impractical to generate proofs fully automatically. Therefore, interactive theorem proving (ITP) has emerged as an alternative paradigm. In ITP, proofs are constructed by human experts interacting with software tools called proof assistants, such as Coq , Isabelle , and Lean . Machine learning can automate such interactive theorem proving, opening up a new avenue for theorem proving . The model can learn to interact with proof assistants, given data containing human-written proofs.

Formal theorem proving serves as an important challenge for machine learning. From a computer science perspective, formal proofs can be treated as programs . But unlike conventional programs in C++ or Python, the correctness of proofs can be verified using proof assistants. Therefore, theorem proving may be considered a special form of code generation, with rigorous evaluation and no room for the model to hallucinate. This can be consequential to current large language models (LLMs), as they have demonstrated exceptional capability in code generation  but have flaws in factuality and hallucination . In addition, augmenting LLMs with external tools, such as proof assistants, has shown promise in improving their various capabilities, including multi-step reasoning .

Current research on LLMs for theorem proving is facing many barriers. To our knowledge, none of the existing LLM-based provers are open-source . They all use private pretraining data, and the compute requirements can reach thousands of GPU days . Furthermore, some rely on tailored infrastructure for distributed training and interaction with the proof assistant--both are not possible to fully reproduce without open-source code . We change the status quo by introducing LeanDojo: open-source toolkits, models, and benchmarks that give researchers access to state-of-the-art LLM-based provers with modest computational costs.

Tools for Data Extraction and Interaction.We focus on Lean, a proof assistant popular among mathematicians.2 Our framework LeanDojo provides two essential functions for learning-based theorem proving (Fig. 1): extracting data and enabling models to interact with Lean programmatically.

For data extraction, LeanDojo extracts training data not directly visible in the raw Lean code (Fig. 2), e.g., proof trees consisting of intermediate states between proof steps (Fig. 1_Top left_). In addition, LeanDojo is the first tool to locate premises in Lean proofs, enabling training machine learning models for premise selection. For interaction, LeanDojo turns Lean into a gym-like interactive environment . Using LeanDojo, the model can observe proof states, change the state by executing

Figure 1: **Top right**: LeanDojo extracts proofs in Lean  into datasets for training machine learning models. It also enables the trained model to prove theorems by interacting with Lean’s proof environment. **Top left**: The proof tree of a Lean theorem \( n,\ \ \ \ =\), where \(\ \) is the greatest common divisor (details in Sec. 3). When proving the theorem, we start from the original theorem as the initial state (the root) and repeatedly apply tactics (the edges) to decompose states into simpler sub-states, until all states are solved (the leaf nodes). Tactics may rely on premises such as \(\) and \(\) defined in a large math library. E.g., \(}\) is an existing theorem \( n,\ \ \ \ =\ \) used in the proof to simplify the goal. **Bottom**: Our ReProver model (Sec. 5). Given a state, it retrieves premises from the math library, which are concatenated with the state and fed into an encoder-decoder Transformer  to generate the next tactic.

proof steps (referred to as "tactics" in proof assistants), and receive feedback from Lean. LeanDojo is the first tool capable of interacting with Lean reliably, reducing proof-checking errors in existing tools  (correct proofs misjudged as incorrect) from 21.1% to 1.4%.

Retrieval-Augmented LLMs for Theorem Proving.LeanDojo addresses a key bottleneck in theorem proving: _premise selection_. Existing LLM-based provers generate the next proof step (tactic), taking only the current state as input. However, proving theorems depends critically on the premises, such as lemmas and definitions, from a math library.

For example, Fig. 1 (_Top left_) illustrates the proof of "\( n,\)", where gcd stands for greatest common divisor. The proof starts from the original theorem as the initial state and repeatedly applies tactics to decompose states into simpler sub-states, until all states are solved. Tactics may rely on premises such as mod_self and gcd_zero_left defined in a large math library. E.g., mod_self is an existing theorem "\( n,\)" useful for simplifying the goal.

Incorporating all possible premises is too large to fit into LLMs' input, given the limited context window. Existing methods must learn to memorize the association between the proof state and the name mod_self. It works if the premise has been used in the training data to solve similar goals, but does not generalize to truly novel scenarios, e.g., theorems requiring lemmas unseen in training.

One potential solution is to complement memorization with explicit premise selection. LeanDojo extracts premise data from Lean, including where they are defined and used. It enables us to tackle premise selection by augmenting LLMs with retrieval. We introduce _ReProver_ (Retrieval-Augmented Prover) (Fig. 1_Bottom_): Given the current state, it generates a tactic conditioning on a small number of premises retrieved from Lean's math library, mathlib.

We need to limit retrieval to a small number of premises for it to be effective, and ideally, they should contain the ground truth premise. Our retriever builds upon Dense Passage Retriever (DPR)  but incorporates two algorithmic innovations: First, not all premises are accessible when proving a theorem (Sec. 3). LeanDojo can perform program analysis on Lean code to determine accessible premises. On our data, that reduces the average number of premises from 128K to 33K, significantly simplifying the retriever's task. Second, DPR needs negative examples in training and benefits from hard negatives, i.e., irrelevant premises that are hard to distinguish from ground truth ones. We propose in-file negatives: a simple mechanism to find hard negatives in premise selection, which samples negative premises defined in the same Lean source file as the ground truth premise.

LeanDojo Benchmark.Using LeanDojo, we construct a benchmark containing 98,734 theorems/proofs extracted from mathlib. Our benchmark is one of the largest math-focused theorem-proving datasets. We find that the common practice of splitting theorems randomly into training/testing has led to an overestimated performance in the previous papers. LLMs can prove seemingly difficult theorems simply by memorizing the proofs of similar theorems during training. In LeanDojo Benchmark, we mitigate this issue by designing challenging data split requiring the model to generalize to theorems relying on novel premises that are never used in training.

We use LeanDojo Benchmark to train and evaluate ReProver. Training takes only five days on a single GPU. In evaluation, ReProver can prove 51.2% theorems, outperforming a baseline that generates tactics directly without retrieval (47.6%) and another baseline using GPT-4  to generate tactics in a zero-shot manner (29.0%). We also test ReProver on two existing datasets, MiniF2F  and ProofNet . It can prove 26.5% theorems in MiniF2F and 13.8% in ProofNet, which is competitive with state-of-the-art methods without reinforcement learning , even though trained using far fewer resources. Moreover, it can prove 65 theorems that currently do not have proofs in Lean. Thus, our tool can also serve as an effective tool for augmenting existing math libraries in Lean.

Contributions.In summary, we make four main contributions: First, we introduce tools for extracting data from and interacting with Lean. Second, we develop ReProver, the first retrieval-augmented language model for theorem proving. Third, we construct a challenging benchmark for learning-based theorem proving and use it to validate the effectiveness of ReProver. Finally, we facilitate open research on LLMs for theorem proving by releasing our data, model, and code. Our method does not rely on private datasets and can be trained on a single GPU within a week. We believe this will significantly lower the barriers to academic research in this area and establish the first accessible baselines for future work to build upon. Further, our method can be used to automatically generate new Lean proofs without requiring human effort.

Related Work

Theorem Proving.Classical provers express theorems in first-order logic and search for proofs automatically in a large space [30; 31]. Even with data-driven search heuristics [32; 33], they fail to scale to large formalization projects. Therefore, recent work on learning-based theorem proving has focused on an alternative paradigm: automating the interaction with proof assistants.

The architecture of learning-based provers progressed from classical machine learning algorithms such as KNN , to graph neural networks explicitly encoding the syntax of formal expressions [9; 35], and now Transformer-based LLMs treating expressions as plain strings . Besides the model architecture, researchers have explored several complementary dimensions: proof search algorithms for assembling model-generated steps into complete proofs [17; 21]; overcoming data scarcity through reinforcement learning (RL) [17; 19; 36; 37] or synthetic/auxiliary data [16; 38; 39; 40]; as well as outsourcing some proof goals to classical provers [41; 42; 43; 18]. Our base model without retrieval is a combination of straightforward design choices. It generates tactics by finetuning an encoder-decoder Transformer, ByT5 , via supervised learning without RL or auxiliary data. Then it searches for proofs using best-first search. Our model's algorithmic novelty lies in the retrieval.

Premise Selection.Selecting useful premises is recognized as a key challenge in theorem proving [23; 24; 45; 46]. Machine learning methods for premise selection have also progressed from classical models [47; 48; 41], recurrent neural networks , graph neural networks , to Transformers [49; 50]. However, existing methods either tackle premise selection in isolation without theorem proving [24; 38; 48] or feed the premises to a symbolic prover [41; 49; 47]. To our knowledge, we are the first to augment a learning-based formal theorem prover with retrieved premises so that the prover can learn how to use them effectively. For example, it can decide whether to use an explicitly retrieved premise or an implicitly memorized one.

Data and Tools for Theorem Proving.Tools for data extraction and interacting with proof assistants have been crucial drivers of learning-based theorem proving. Existing tools and datasets can be divided by proof assistants: Coq has GamePad , CoqGym , and PRISM ; Isabelle has IsarStep  and PISA ; HOL Light has HOList  and HoLStep , and Lean has LeanStep  and lean-gym . MiniF2F  is the only cross-system dataset, with 488 theorems for evaluation. However, it does not have training theorems and is restricted to the domain of math olympiads.

Among available tools extracting data from proof assistants, LeanDojo is the only one that can extract premises for retrieval-augmented theorem proving. A few existing datasets also have premises [49; 54], but their data extraction tools are not public, making it difficult to construct new datasets. In addition, LeanDojo is the only tool that can interact with Lean robustly (Sec. 4) and can extract data from Lean 4. See Appendix A.3 for a detailed comparison between LeanDojo and alternatives.

Mathematical Reasoning in Natural Language.We focus on proving theorems expressed in formal logic, whereas researchers have also produced a plethora of work on mathematical reasoning in natural language [56; 57; 58; 59; 60; 61; 62; 63]. A particularly relevant task is autoformalization, translating natural language texts into formal theorems and proofs [64; 65; 66; 67; 68; 69; 70; 71; 72].

Retrieval-Augmented Language Models.Our ReProver is the first retrieval-augmented language model for formal theorem proving, though similar architectures have been studied extensively in NLP [73; 74; 75; 76; 77; 78; 79; 80; 81]. In addition, there have been many retrieval-augmented methods for code generation [82; 83; 84; 85; 86; 87; 88]. Most of them retrieve from a corpus not directly related to the current file, e.g., GitHub or Stack Overflow. In contrast, our retrieval corpus consists of premises accessible to the current file, which is determined by program analysis using LeanDojo. This is similar to what CoCoMIC  does for Python. However, their retrieval is based on heuristics, whereas ours is learned.

## 3 Background: Theorem Proving in Lean

At a high level, Lean is a programming language that allows you to write not only conventional programs but also theorems and proofs. To that end, it provides two pieces of machinery: First, it provides a unified language for defining programs, mathematical objects, theorems, and proofs, based on functional programming with dependent types . Second, it provides a tactic system for constructing machine-checkable proofs semi-automatically.

We use a simple example in Fig. 2 to illustrate how theorems are formalized and proved in Lean.3 Here we want to formalize the greatest common divisor (gcd) of two natural numbers. First, we define \(\) as a recursive function, taking two natural numbers as parameters and returning their gcd via the Euclidean algorithm. Then, we state a lemma named \(\) that \( x,\ \ 0\ =\), which can be proved simply by the definition of gcd. Finally, we state our main theorem gcd_self that \( n,\ \ =\), followed by its proof consisting of five tactics. In theorem proving, we are only concerned with generating the proof, i.e., the part between "begin" and "end"; everything before "begin" is known, including other files imported.

The syntax of tactics is quite expressive. They can take arguments and can be combined into compound tactics. You can think of tactics as programs in a domain-specific language (DSL). Users can extend the DSL by defining new tactics. This discrete, combinatorial, and unbounded action space makes theorem proving challenging for machine learning.

Another challenge is premise selection. Premises are existing lemmas or definitions useful for proving a theorem. They are used as arguments in tactics. For example, in Fig. 2 and Fig. 1 (_Top left_), the tactic "rewrite mod_self" rewrites the goal using the premise mod_self, which is defined in another file imported by the current file. Proofs cannot use premises that haven't been defined. For example, gcd_self cannot be used to prove gcd_zero_left. In addition, they cannot use premises not imported to the current file. Still, premises come from a large math library containing hundreds of thousands of existing definitions and theorems, making it hard, for humans and machines alike, to select the right premises when generating a tactic. This is a key bottleneck in theorem proving and is what we aim to address through retrieval-augmented LLMs.

## 4 LeanDojo: Toolkit and Benchmark

LeanDojo serves two essential needs of learning-based theorem proving in Lean. First, it extracts training data from Lean, and we use this capability to construct a challenging theorem proving benchmark. Second, it enables the model to interact with Lean programmatically.

Data Extraction.Lean repos (e.g., mathlib or lean-liquid) contain source code of human-written theorems/proofs. However, the raw code is unsuitable for training the prover. It lacks runtime information that humans can access when using Lean, such as intermediate states between proof steps. Therefore, LeanDojo extracts the following information not directly visible in the code:

Figure 2: Definition of greatest common divisor (gcd) in Lean and two related theorems. The proof of gcd_self (between “begin” and “end”) relies on a premise mod_self imported from another file in the math library. Lean can run this proof to produce the proof tree in Fig.1 (_Top left_).

* _File dependencies and abstract syntax trees (ASTs):_ LeanDojo processes the repo to produce a directed acyclic graph whose nodes are files and edges are import relations between files. In addition, LeanDojo produces the AST of each file. File dependencies and ASTs are useful for program analysis, e.g., collecting theorems defined in a file or premises accessible to a theorem.
* _States and tactics:_ LeanDojo extracts all tactics in proofs. For each tactic, it also extracts the states before/after the tactic, which allows us to reconstruct the proof tree in Fig. 1 (_Top left_).
* _Premises:_ For each premise, such as mod_self in Fig. 2, LeanDojo records where it is defined (location in data/nat/lemma.lean) and where it is used (locations across many files). In addition, premises have unique fully qualified names (e.g., mat.mod_self) but are often used by ambiguous short names (mod_self), relying on Lean to perform name resolution. LeanDojo is capable of recording their full names.

Lean has basic support for exporting dependencies, ASTs, states, and tactics. However, it cannot resolve the premises' full names and locate their definitions. Therefore, we modify Lean to record this information (details in Appendix A.1). The modified Lean is used only for data extraction but not for evaluation, so we do not risk accidentally breaking Lean's logical soundness.

LeanDojo Benchmark.We construct a benchmark for premise selection and theorem proving, named _LeanDojo Benchmark_. The data is extracted from mathlib,4 Lean's centralized math library covering diverse topics such as analysis, algebra, and geometry.5 LeanDojo Benchmark is one of the largest math-focused theorem proving datasets, consisting of 98,734 theorems from 3,384 Lean files. Unlike existing datasets in Lean , LeanDojo Benchmark also contains the definitions of 130,262 premises, including not only theorems but also other definitions that can be used as premises (e.g., gcd in Fig. 2. Furthermore, the dataset has 217,776 tactics, 129,243 of them with at least one premise. The average number of premises is 2.13 among tactics with premises. Appendix B contains additional information on data format, datasheet , hosting, and licensing.

LeanDojo Benchmark has 94,734/2,000/2,000 theorems for training/validation/testing. It features a challenging data split for testing the prover's generalization in more realistic scenarios. Splitting theorems randomly can overestimate the prover's performance, by allowing it to prove many theorems through memorization. In human-written Lean code, a common idiom is to have a block of similar theorems/proofs for slightly different properties of the same math concept. For example, in Fig. 3, the last two theorems not only look similar but have identical proofs. If one of them is in training, the model can easily prove the other one by memorization. This shortcut enables the model to prove seemingly nontrivial theorems, including those requiring premises to prove.

To mitigate this issue, besides the random split, we create a challenging data split named novel_premises. It requires testing proofs to use at least one premise that has never been used in training. For example, the last two theorems in Fig. 3 both use the premise conj_mul. If one theorem is in the training set of the novel_premises split, the other one must also be in training.

Figure 3: Similar theorems/proofs are common. If splitting them randomly into training/testing, the model can prove testing theorems by memorization.

Interacting with Lean.Another important function of LeanDojo is to interact with Lean programmatically. It turns Lean into a gym-like environment , in which the prover can observe the proof state, run tactics to change the state, and receive feedback on errors or on proof completion. This environment is indispensable for evaluating/deploying the prover or training it through RL.

Below is LeanDojo's main interface for interacting with Lean through tactics. Lean also supports other proof styles not based on tactics. Although we only support tactic-style proofs, they are sufficiently general since any proof can be converted to a tactic-style proof.6

* initialize(theorem): Given the theorem to prove, LeanDojo returns the initial state. A valid state is a string representing current proof goals and local contexts (see the nodes in Fig. 1_Top left_). When there are multiple goals, their strings are concatenated.
* run_tac(state, tactic): Run a tactic on a given state and return the next state. The returned state will be an error state if the tactic execution is not successful, e.g., due to timeout or inapplicable tactic. If the input state is an error, the result can only be an error.

Building this environment is technically challenging, as Lean is designed for human users, not machines. LeanDojo is the first tool that can interact with Lean reliably. Existing tool  is limited: 21.1% of the ground truth proofs are misjudged as incorrect, due to issues with how they construct the proof environment, which distorts the reported performance and produces unreliable feedback when used in reinforcement learning. In contrast, LeanDojo reduces the number of misjudgments to 1.4%. Details are in Appendix A.2.

## 5 ReProver: Retrieval-Augmented Theorem Prover

We develop the ReProver model that uses retrieval to select premises explicitly. At its core is a retrieval-augmented tactic generator (Fig. 1_Bottom_). Given the current proof state, it retrieves a handful of potentially useful premises and generates a tactic conditioning on the concatenation of the state and retrieved premises. When proving theorems, the model generates multiple tactic candidates at each step, which are used in a standard best-first search algorithm to find proofs [16; 18; 19; 28].

Premise Retrieval.Our retriever is based on Dense Passage Retriever . Given a state \(s\) as the query and a library of candidate premises \(=\{p_{i}\}_{i=1}^{N}\), it retrieves a ranked list of \(m\) premises \(\{p^{}_{i}\}_{i=1}^{m}\) from \(\). In DPR, \(s\) and \(p_{i}\) are both raw texts but are embedded in a vector space, and we retrieve the top \(m\) premises maximizing the cosine similarity between the state and the premise.

More formally, we have a function \(f\) parameterized by \(\) for embedding both the state and the premises into a \(h\)-dimensional vector space: \(f(s,),f(p_{i},)^{h}\). We retrieve premises maximizing \(f(s,)^{T}f(p_{i},)/(\|f(s,)\|_{}\|f(p_{i},)\|_{2})\). We choose \(f\) to be a Transformer encoder  followed by average pooling: \(f(,)=((,))\).

The retrieval is efficient. The premise embeddings \(f(p_{i},)\) can be pre-computed, and we only need one forward pass to compute \(f(s,)\). We do not rerank the retrieved premises as in Magnushammer , which is more costly since it requires a separate forward pass for each retrieved premise.

Similar to DPR, we train the retriever by minimizing a contrastive loss between positive premises and in-batch negative premises. Specifically, suppose we have a batch of \(b\) states. For each state, we sample a positive premise from the ground truth and \(n\) negative premises from \(\).7 They are called "in-batch" negatives because they are shared by all states in the batch--Every state is associated with all \(b(n+1)\) premises; at least 1 of them is positive. Let \(l_{ij}\{0,1\}\) denote whether a state-premise pair \((s_{i},p_{j})\) is positive. We minimize the mean squared loss:

\[()=_{i=1}^{b}_{j=1}^{b(n+1)}l_{ij}- {f(s_{i},)^{T}f(p_{j},)}{\|f(s_{i},)\|_{2}\|f(p_{j},) \|_{2}}^{2}. \]Retrieving from Accessible Premises.We incorporate into DPR two insights tailored to premise selection. First, instead of retrieving from all premises in the math library, we restrict to premises accessible to the current theorem. They include premises defined in the same file before the theorem, as well as those imported from other files. We compute accessible premises for each theorem, relying on LeanDojo's capability in program analysis (Sec. 4). Focusing on accessible premises makes \(\) much smaller. LeanDojo Benchmark contains 130,262 premises in total, but the average number of accessible premises is only 33,160.

In-file Negative Examples.DPR's performance depends critically on the quality of negative examples [91; 92]. In early experiments, we sampled all \(n\) negative premises randomly, and the model often mistakenly retrieved other premises from the same file as the positive one. Therefore, we propose a scheme that samples \(k\) in-file negatives and \(n-k\) random negatives for training.

Tactic Generation.As in Fig. 1 (_Bottom_), retrieved premises are concatenated with the state.8 Then an encoder-decoder Transformer, ByT5 , takes them as input and generates the tactic. The model is trained to minimize the cross entropy loss w.r.t. human-written tactics.

Training ReProver takes substantially less compute than prior methods (120 GPU hours vs. more than 1000 hours [16; 17]). All existing LLM-based provers pretrain on datasets specific to math and coding [14; 15; 16; 17; 18; 19; 20]. The pretraining is computationally expensive, and the datasets are kept private. In contrast, we choose to avoid domain-specific pretraining and build upon google/byt5-small--a model checkpoint that is generic, publicly available, and relatively small (299M parameters vs. 837M  or 600M ). We could see further benefits from domain-specific pretraining, as in Minerva , or stronger LLMs like LLaMA  or StarCoder , but that is beyond our scope. In addition, our model is finetuned on human-written tactics only, without auxiliary data  or data collected through online interaction with Lean [17; 19]. These orthogonal directions are valuable but will significantly increase the method's complexity and compute requirements.

## 6 Experiments

We evaluate ReProver on LeanDojo Benchmark. It outperforms baselines on premise selection and theorem proving, demonstrating the promise of theorem proving with retrieval-augmented language models. Experimental details and hyperparameters are in Appendix C.1.

Premise Selection.For premise selection, we only use tactics in LeanDojo Benchmark that have at least one premise. The model, based on a ByT5 encoder, uses the state before a tactic as the query to retrieve 100 premises. Then, we calculate standard metrics in information retrieval: R@k (recall for the top \(k\) retrieved premises) and MRR (mean reciprocal rank).

Our first baseline is a classical BM25 retriever  without machine learning. Results in Table 1 show that our method outperforms BM25 significantly across the board. However, it exhibits a large performance degradation on the challenging data split (comparing novel_premises to random). This is consistent with the general observation that machine learning can be brittle in the presence of distribution shifts. In addition, we compare with two ablations: one retrieving from all premises (instead of accessible premises only) and the other without in-file negatives. They perform worse than our method, demonstrating the effectiveness of our two improvements upon DPR.

Theorem Proving Experimental Setup.Then we evaluate ReProver on theorem proving. The training has two stages: First, we train the retriever and use it to retrieve 100 premises for all proof states in LeanDojo Benchmark. Second, we train the tactic generator, taking as input the concatenation of the state and retrieved premises (truncated to a length limit). During evaluation, the tactic generator is combined with best-first search to prove theorems. We evaluate the _Pass@1_ metric: The prover is given only one attempt and must find the proof within a wall time limit of 10 minutes. Training takes five days on a single NVIDIA A100 GPU with 80GB memory, and evaluation takes two days on eight V100 GPUs. Please see Appendix C.1 for details.

Baselines.Following prior work [16; 28], we include tidy as a baseline. It is a tactic in mathlib that tries to complete the proof using heuristics (without machine learning). We apply tidy directly to the original theorem and see if it can succeed within the wall time limit. Another baseline uses GPT-4 as the tactic generator. Given a state, it queries GPT-4 to generate 35 tactics in zero-shot. After removing invalid ones, the remaining tactics are combined with best-first search to find proofs. Data contamination is possible: Many proofs had been publicly available on GitHub before GPT-4's data cutoff date (September 2021). See Appendix C.2 for details.

Unfortunately, it is not feasible to compare with existing LLM-based provers in Lean (16; 17; 19). None of them are open-source or can be reproduced with reasonable effort. Furthermore, we cannot compare directly with the numbers reported in their papers, due to differences in data, infrastructure, and training procedures (details in Appendix C.3). Many difficulties are due to the private nature of existing methods. By releasing our code and models, we hope to create accessible baselines for future work to build upon.

Results.Table 2 shows the results on the testing data of LeanDojo Benchmark. ReProver outperforms all baselines on two different data splits, demonstrating the effectiveness of retrieval-augmented theorem proving. GPT-4 performs substantially worse than our method, even though it may have seen the ground truth proofs due to data contamination. The task cannot be solved out of the box by state-of-the-art LLMs, calling for algorithmic innovations to make further progress.

Testing theorems in novel_premises are indeed much more challenging. All methods in Table 2 perform substantially worse on novel_premises than the random split. We argue that performance on challenging splits is more indicative of the prover's capability and should be emphasized in the future development of theorem proving.

Evaluation on MiniF2F and ProofNet.We run ReProver to prove theorems in MiniF2F (28) and ProofNet (29). These two datasets are for testing only and do not have training theorems, which makes them challenging since the distribution of theorems is quite different from mathlib used to train ReProver. MiniF2F focuses on math olympiads, and ProofNet focuses on exercises in undergraduate math textbooks. On MiniF2F's test set in Lean, ReProver achieves a Pass@1 of 26.5%, which is competitive with state-of-the-art methods without RL (25.9% in Polu et al. (19)). On ProofNet, our Pass@1 is 13.8%, which is the first reported theorem proving result on this dataset. Further, many theorems do not have ground truth proofs in Lean. Our prover discovers 33 proofs in MiniF2F and 39 proofs in ProofNet that currently do not have Lean proofs. Please see Appendix C.4 for details, examples, and caveats.

   Method &  &  \\   & R@1 & R@10 & MRR & R@1 & R@10 & MRR \\  BM25 & 6.7 & 17.2 & 0.15 & 5.9 & 15.5 & 0.14 \\ w/ all premises & 1.9 & 11.9 & 0.08 & 2.1 & 12.4 & 0.08 \\ Ours & **13.5** & **38.4** & **0.31** & **9.1** & **27.6** & **0.24** \\ w/ all premises & 11.7 & 36.2 & 0.27 & 7.1 & 23.1 & 0.20 \\ w/o in-file negatives & 10.8 & 33.1 & 0.25 & 7.9 & 25.7 & 0.22 \\   

Table 1: Premise selection testing performance. For each method, we train and evaluate two models independently using different data splits (random and novel_premises; see Sec. 4). R@k is the recall for the top \(k\) retrieved premises, and MRR is the mean reciprocal rank metric (higher is better). Our retriever outperforms BM25 and ablations. Results for Lean 4 are in Appendix D.

   Method & random & novel\_premises \\  tidy & 23.8 & 5.3 \\ GPT-4 & 29.0 & 7.4 \\ ReProver (ours) & **51.2** & **26.3** \\ w/o retrieval & 47.6 & 23.2 \\   

Table 2: Theorem proving Pass@1 (%) on the testing data of LeanDojo Benchmark. Our ReProver model outperforms tidy, GPT-4, and a baseline that generates tactics directly without retrieval. Results for Lean 4 are in Appendix D.

Conclusion

We have introduced LeanDojo: an open-source playground for learning-based theorem proving in Lean, consisting of toolkits, models, and benchmarks. It extracts data from Lean and enables the model to interact with Lean programmatically. We have developed ReProver, the first retrieval-augmented LLM for theorem proving. Limitations and future work are discussed in Appendix F.

We have released our code, data, models, and documentation to facilitate future research:

* LeanDojo's codebase for data extraction and interaction with Lean: [https://github.com/lean-dojo/LeanDojo](https://github.com/lean-dojo/LeanDojo)
* LeanDojo's documentation: [https://leandojo.readthedocs.io](https://leandojo.readthedocs.io)
* Datasets: (1) LeanDojo Benchmark: [https://doi.org/10.5281/zenodo.8016385](https://doi.org/10.5281/zenodo.8016385) with DOI 10.5281/zenodo.8016385. (2) LeanDojo Benchmark 4 (Appendix D): [https://doi.org/10.5281/zenodo.8040109](https://doi.org/10.5281/zenodo.8040109) with DOI 10.5281/zenodo.8040109.
* ReProver's code and models: [https://github.com/lean-dojo/ReProver](https://github.com/lean-dojo/ReProver)
* ChatGPT plugin (Appendix E): [https://github.com/lean-dojo/LeanDojoChatGPT](https://github.com/lean-dojo/LeanDojoChatGPT)
* LeanDojo Website: [https://leandojo.org](https://leandojo.org)