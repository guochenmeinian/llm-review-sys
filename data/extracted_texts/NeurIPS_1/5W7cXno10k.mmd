# Characteristic Circuits

Zhongjie Yu

TU Darmstadt

Darmstadt, Germany &Martin Trapp

Aalto University

Espoo, Finland &Kristian Kersting

TU Darmstadt/Hessian.AI/DFKI

Darmstadt, Germany

{yu,kersting}@cs.tu-darmstadt.de, martin.trapp@aalto.fi

###### Abstract

In many real-world scenarios, it is crucial to be able to _reliably_ and _efficiently_ reason under uncertainty while capturing complex relationships in data. Probabilistic circuits (PCs), a prominent family of _tractable_ probabilistic models, offer a remedy to this challenge by composing simple, tractable distributions into a high-dimensional probability distribution. However, learning PCs on heterogeneous data is challenging and densities of some parametric distributions are not available in closed form, limiting their potential use. We introduce characteristic circuits (CCs), a family of tractable probabilistic models providing a unified formalization of distributions over heterogeneous data in the spectral domain. The one-to-one relationship between characteristic functions and probability measures enables us to learn high-dimensional distributions on heterogeneous data domains and facilitates efficient probabilistic inference even when no closed-form density function is available. We show that the structure and parameters of CCs can be learned efficiently from the data and find that CCs outperform state-of-the-art density estimators for heterogeneous data domains on common benchmark data sets.

## 1 Introduction

Probabilistic circuits (PCs ) have gained increasing attention in the machine learning community as a promising modelling family that renders many probabilistic inferences tractable with little compromise in their expressivity. Their beneficial properties have prompted many successful applications in density estimation [_e.g._, 20, 21, 22, 23] and in areas where probabilistic reasoning is key, for example, neuro-symbolic reasoning , certified fairness , or causality . Moreover, recent works have explored ways of specifying PCs for more complex modelling scenarios, such as time series  or tractable representation of graphs .

However, while density estimation is at the very core of many machine learning techniques (_e.g._, approximate Bayesian inference ) and a fundamental tool in statistics to identify characteristics of the data such as \(k^{}\) order moments or multimodality , even in the case of parametric families, densities are sometimes

Figure 1: Characteristic circuits provide a unified, tractable specification of joint continuous and discrete distributions in the spectral domain of probability measures.

not available in closed-form. For example, only special cases of \(\)-stable distributions provide closed-form densities (Nolan, 2013). Fortunately, there exists a one-to-one correspondence between probability measures and characteristic functions (Sasvari, 2013), which can be understood as the Fourier-Stieltjes transform of the probability measures, enabling the characterisation of any probability measure through its characteristic function. Henceforth, the characteristic function of probability measures has found wide applicability in statistics, ranging from its use as a non-parametric estimator through the empirical characteristic function (Feuerverger and Mureika, 1977) to estimate heavy-tailed data, _e.g._, through the family of \(\)-stable distributions (Nolan, 2013). However, even though the characteristic function has many beneficial properties, its application to encode high-dimensional data distributions and efficient computation of densities can be quite challenging (Nolan, 2013).

In this work, we bridge between the characteristic function of probability measures and PCs. We do so by examining PCs from a more general perspective, similar in spirit to their specifications as a summation over functions on a commutative semiring (Friesen and Domingos, 2016) or as a convex combination of product measures on product probability spaces (Trapp et al., 2020). Instead of defining the circuit over density functions, we propose to form the circuit over the _characteristic function_ of the respective probability measures, illustrated in Fig. 1. The resulting _characteristic circuits_ (CCs) are related to recent works, which define a circuit over probability generating polynomials to represent discrete probability distributions (Zhang et al., 2021), in that both approaches can be understood as transformation methods. The benefits of using the spectral domain are manifold: (i) _characteristic functions_ as the base enable a _unified view_ for discrete and continuous random variables, (ii) directly representing the _characteristic function_ allows learning distributions that _do not_ have closed-form expressions for their density, and (iii) the moment can be obtained efficiently by differentiating the circuit. When modelling heterogeneous data, standard PCs do not naturally lend themselves to a unified view of mixed data but treat discrete and continuous random variables (RVs) conceptually differently. The difference arises as PCs model heterogeneous data domains _after_ integration w.r.t. the base measure which, in the case of mixed domains, differs between discrete and continuous RVs. RVs distributed according to a singular distribution can typically not be represented in PCs at all. This dependence on the base measure is subtly embedded within PCs, resulting in challenges when it comes to learning these models in heterogeneous domains. In contrast, CCs provide a unified view compared to PCs by moving away from the dependence on the base measure, achieved by representing the distribution through its characteristic function, which is independent of the base measure.

In summary, our contributions are: (1) We propose characteristic circuits, a novel deep probabilistic model class representing the joint of discrete and continuous random variables through a unifying view in the spectral domain. (2) We show that characteristic circuits retain the tractability of PCs despite the change of domain and enable efficient computation of densities, marginals, and conditionals. (3) We derive parameter and structure learning for characteristic circuits and find that characteristic circuits outperform SOTA density estimators in the majority of tested benchmarks.1

We proceed as follows. We start by discussing related work and review preliminaries on probabilistic circuits and characteristic functions. Consequently, we define our model _characteristic circuits_, discuss theoretical properties, and show how to learn the circuits' parameters and structure. We conclude by presenting an empirical evaluation and discussion of the new model class.

## 2 Related Work

**Characteristic functions** (CFs) were originally proposed as a tool in the study of limit theorems and afterwards developed with independent mathematical interest (Lukacs, 1972). The uniqueness between CFs and probability measures is recovered with Levy's inversion theorem (Sasvari, 2013). A popular application of the CF is in statistical tests (_e.g._, Eriksson and Koivunen, 2003; Su and White, 2007; Wang and Hong, 2018; Ke and Yin, 2019). In practice, the CF of a distribution is in most cases not easy to estimate, and in turn, the empirical characteristic function (ECF) is employed as an approximation to the CF (Feuerverger and Mureika, 1977). The ECF has been successfully applied in sequential data analysis tasks (Knight and Yu, 2002; Yu, 2004; Davis et al., 2021). When handling high dimensional data, multivariate CFs, and ECFs were proposed for modelling _e.g._ multivariate time series (Lee et al., 2022) and images (Ansari et al., 2020). Although a mass of work has been developed for the applications of CF, less attention has been paid to estimating the model quality of CF itself. Therefore, modelling the multivariate CF remains to be challenging.

**Probabilistic circuits** (PCs) are a unifying framework for tractable probabilistic models (Choi et al., 2020) that recently show their power in _e.g._ probabilistic density estimation (Dang et al., 2020; Di Mauro et al., 2021; Zhang et al., 2021), flexible inference (Shao et al., 2022), variational inference (Shih and Ermon, 2020), and sample generating (Peharz et al., 2020). When it comes to data containing both discrete and continuous values, a mixture of discrete and continuous random variables is employed in PCs. Molina et al. (2018) propose to model mixed data based on the Sum-Product Network (SPN) structure, casting the randomized dependency coefficient (Lopez-Paz et al., 2013) for independence test for hybrid domains and piece-wise polynomial as leaf distributions, resulting in Mixed Sum-Product Networks (MSPN). Furthermore, statistical data type and likelihood discovery have been made available with Automatic Bayesian Density Analysis (ABDA) (Vergari et al., 2019), which is a suitable tool for the analysis of mixed discrete and continuous tabular data. Moreover, Bayesian SPNs (Trapp et al., 2019) use a well-principled Bayesian framework for SPN structure learning, achieving competitive results in density estimation on heterogeneous data sets. The above-mentioned models try to handle the probability measure with either parametric density/mass functions or histograms, but yet could not offer a unified view of heterogeneous data. PCs will also fail to model leaves with distributions that do not have closed-form density expressions.

## 3 Preliminaries on Probabilistic Circuits and Characteristic Functions

Before introducing characteristic circuits, we recap probabilistic circuits and characteristic functions.

### Probabilistic Circuits (PCs)

PCs are tractable probabilistic models, structured as rooted directed acyclic graphs, where each _leaf_ node L represents a probability distribution over a univariate RV, each _sum_ node S models a mixture of its children, and each _product_ node P models a product distribution (assuming independence) of their children. A PC over a set of RVs \(\) can be viewed as a computational graph \(\) representing a tractable probability distribution over \(\), and the value obtained at the root node is the probability computed by the circuit. We refer to Choi et al. (2020) for more details.

Each node in \(\) is associated with a subset of \(\) called the scope of a node N and is denoted as \(()\). The scope of an inner node is the union of the scope of its children. Sum nodes compute a weighted sum of their children \(=_{()}w_{,} \), and product nodes compute the product of their children \(=_{()}\), where \(()\) denotes the children of a node. The weights \(w_{,}\) are generally assumed to be non-negative and normalized (sum up to one) at each sum node. We also assume the PC to be smooth (complete) and decomposable (Darwiche, 2003), where smooth requires all children of a sum node having the same scope, and decomposable means all children of a product node having pairwise disjoint scopes.

### Characteristic Functions (CFs)

Characteristic functions provide a _unified view_ for discrete and continuous random variables through the Fourier-Stieltjes transform of their probability measures. Let \(\) be a \(d\)-dimensional random vector, the CF of \(\) for \(^{d}\) is given as:

\[_{}()=[(\,^{}\,)]= _{^{d}}(\,^{}\,)\,_{ }(), \]

where \(_{}\) is the distribution/probability measure of \(\). CFs have certain useful properties. We will briefly review those that are relevant for the remaining discussion: (i) \(_{X}(0)=1\) and \(|_{X}(t)| 1\); (ii) for any two RVs \(X_{1}\), \(X_{2}\), both have the same distribution iff \(_{X_{1}}=_{X_{2}}\); (iii) if \(X\) has \(k\) moments, then \(_{X}\) is \(k\)-times differentiable; and (iv) two RVs \(X_{1},X_{2}\) are independent iff \(_{X_{1},X_{2}}(s,t)=_{X_{1}}(s)_{X_{2}}(t)\). We refer to Sasvari (2013) for a more detailed discussion of CFs and their properties.

**Theorem 3.1** (Levy's inversion theorem (Sasvari, 2013)).: _Let \(X\) be a real-valued random variable, \(_{X}\) its probability measure, and \(_{X}\) its characteristic function. Then for any \(a,b\)\(a<b\), we have that_

\[_{T}_{-T}^{T}ta)-(- tb)}{t}_{X}(t)t=_{X}[(a,b)]+( _{X}(a)+_{X}(b)) \]

_and, hence, \(_{X}\) uniquely determines \(_{X}\)._

**Corollary**.: _If \(_{}|_{X}(t)|t<\), then \(X\) has a continuous probability density function \(f_{x}\) given by_

\[f_{X}(x)=_{}(-tx)_{X}(t) t. \]

Note that not every probability measure admits an analytical solution to Eq. (3), _e.g._, only special cases of the family of \(\)-stable distributions have a closed-form density function (Nolan, 2013), and numerical integration might be needed.

**Empirical Characteristic Function (ECF).** In many cases, a parametric form of the data distribution is not available and one needs to use a non-parametric estimator. The ECF (Feuerverger and Mureika, 1977; Cramer, 1999) is an unbiased and consistent non-parametric estimator of the population characteristic function. Given data \(\{_{j}\}_{j=1}^{n}\) the ECF is given by

\[_{}()=_{j=1}^{n}(\, ^{}\,_{j}). \]

**Evaluation Metric.** To measure the distance between two distributions represented by their characteristic functions, the squared characteristic function distance (CFD) can be employed. The CFD between two distributions \(\) and \(\) is defined as:

\[^{2}_{}(,)=_{^{d}}| _{}()-_{}()|^{2}( ;), \]

where \((;)\) is a weighting function parameterized by \(\) and guarantees the integral in Eq. (5) converge. When \((;)\) is a probability density function, Eq. (5) can be rewritten as:

\[^{2}_{}(,)=_{( ;)}[|_{}()-_{}( )|^{2}]. \]

Actually, using the uniqueness theorem of CFs, we have \(_{}(,)=0\) iff \(=\)(Sriperumbudur et al., 2010). Computing Eq. (6) is generally intractable, therefore, we use Monte-Carlo integration to approximate the expectation, resulting in \(^{2}_{}(,)_{j=1}^{k }|_{}(t_{j})-_{}(t_{j})|^{2}\), where \(\{t_{1},,t_{k}\}id.}}{{}}( ;)\). We refer to Ansari et al. (2020) for a detailed discussion.

## 4 Characteristic Circuits

Now we have everything at hand to introduce characteristic circuits. We first give a recursive definition of CC, followed by devising each type of node in a CC. We then show CCs feature efficient computation of densities, and in the end, introduce how to learn a CC from data.

**Definition 4.1** (Characteristic Circuit).: _Let \(=\{X_{1},,X_{d}\}\) be a set of random variables. A characteristic circuit denoted as \(\) is a tuple consisting of a rooted directed acyclic graph \(\), a scope function \(\,()()\), parameterized by a set of graph parameters \(_{}\). Nodes in \(\) are either sum (\(\)), product (\(\)), or leaf (\(\)) nodes. With this, a characteristic circuit is defined recursively as follows:_

1. _a characteristic function for a scalar random variable is a characteristic circuit._
2. _a product of characteristic circuits is a characteristic circuit._
3. _a convex combination of characteristic circuits is a characteristic circuit._

Let us now provide some more details. To this end, we denote with \(_{}()\) the output of \(\) computed at the root of \(\), which represents the estimation of characteristic function given argument of the characteristic function \(^{d}\). Further, we denote the number of RVs in the scope of \(\) as \(|()|\) and use \(_{}()\) for the characteristic function of a node. Throughout the paper, we assume the CC to be smooth and decomposable.

**Product Nodes.** A product node in a CC encodes the independence of its children. Let \(X\) and \(Y\) be two RVs. Following property (iv) of characteristic functions, the characteristic function of \(X,Y\) is given as \(_{X,Y}(t,s)=_{X}(t)_{Y}(s)\), if and only if \(X\) and \(Y\) are independent. Therefore, by definition, the characteristic function of product nodes is given as:

\[_{}()=_{( )}_{}(_{()}), \]

where \(=_{()}_{ ()}\).

**Sum Nodes.** A sum node in a CC encodes the mixture of its children. Let the parameters of \(\) be given as \(_{()}w_{, }=1\) and \(w_{,} 0,,\). Then the sum node in a CC is given as: \(_{}()=_{^{d}}(^{})[_{( )}w_{,}\,_{}() ]=_{()}w_{,}^{}}(^{})\,_{}()}_{=_{ }()}.\) (8)

**Leaf Nodes.** A leaf node of a CC models the characteristic function of a univariate RV. To handle various data types, we propose the following variants of leaf nodes.

_ECF leaf._ The most straightforward way for modelling the leaf node is to directly employ the empirical characteristic function for the local data at each leaf, defined as \(_{_{}}(t)=_{j=1}^{n}( \,t\,x_{j}),\) where \(n\) is the number of instances at the leaf \(\), and \(x_{j}\) is the \(j^{th}\) instance. The ECF leaf is non-parametric and is determined by the \(n\) instances \(x_{j}\) at the leaf.

_Parametric leaf for continuous RVs._ Motivated by existing SPN literature, we can assume that the RV at a leaf node follows a parametric continuous distribution _e.g._ normal distribution. With this, the leaf node is equipped with the CF of normal distribution \(_{_{}}(t)=(\,t\,- ^{2}t^{2}),\) where parameters \(\) and \(^{2}\) are the mean and variance.

_Parametric leaf for discrete RVs._ For discrete RVs, if it is assumed to follow categorical distribution (\(P(X=j)=p_{j}\)), then the CF at the leaf node can be defined as \(_{_{}}(t)=[(\,t\,x)] =_{j=1}^{k}p_{j}(\,t\,j).\) Other discrete distributions which are widely used in probabilistic circuits can also be employed as leaf nodes in CCs, _e.g._, Bernoulli, Poisson, and geometric distributions.

\(\)_-stable leaf._ In the case of financial data or data distributed with heavy tails, the \(\)-stable distribution is frequently employed. \(\)-stable distributions are more flexible in modelling _e.g._ data with skewed centered distributions. The characteristic function of an \(\)-stable distribution is \(_{_{}}(t)=(\,t\,-|ct|^{ }\,(1-(t))),\) where \((t)\) takes the sign of \(t\) and \(=\{(/2)& 1\\ -2/|t|&=1.\). The parameters in \(\)-stable distributions are the stability parameter \(\), the skewness parameter \(\), the scale parameter \(c\), and the location parameter \(\). Despite its modelling power, \(\)-stable distribution is never employed in PCs, as it is represented analytically by its CF and in most cases does not have a closed-form probability density function.

### Theoretic Properties of Characteristic Circuits

With the CC defined above, we can now derive the densities, marginals, and moments from it.

#### 4.1.1 Efficient computation of densities

Through their recursive nature, CCs enable efficient computation of densities in high-dimensional settings even if the density function is not available in closed form. For this, we present an extension of Theorem 3.1 for CCs, formulated using the notion of induced trees \(\)(Zhao et al., 2016). A detailed definition of induced trees can be found in Appendix A.2.

**Lemma 4.2** (Inversion).: _Let \(=,,_{}\) be a characteristic circuit on RVs \(=\{X_{j}\}_{j=1}^{d}\) with univariate leave nodes. If \(_{}|_{}(t)|t<\) for every \( V()\), then \(\) has a continuous probability density function \(f_{}\) given by \(f_{}()=\)_

\[}_{i=1}^{}_{(,)( _{i})}\!\!\!w_{,}_{( _{i})}_{}(-tx_{()}) _{}(t)\,t, \]

_and can be computed efficiently through analytic or numerical integration at the leaves._

Proof.: Let \(=,,_{}\) be a characteristic circuit on RVs \(=\{X_{j}\}_{j=1}^{d}\) with univariate leave nodes and \(p_{}\) the number of RVs in the scope of \(\). In order to calculate the density function of \(\), we need to integrate over the \(d\)-dimensional real space \(^{d}\), _i.e._,

\[f_{}()=}^ {d}}(-\,^{}\,)\,_{}()\, _{d}()}_{=_{}()}, \]

where \(_{}()\) denotes the CF defined by the root of the characteristic circuit and \(_{d}\) is the Lebesque measure on \((^{d},(^{d}))\). We can examine the computation of Eq. (10) recursively for every node.

**Leaf Nodes.** If \(\) is a leaf node \(\), we obtain \(_{}()\) by calculating:

\[_{}(x)=2 f_{}(x)=_{}(- tx)_{X}(t)(t), \]

which follows from Theorem 3.1.

**Sum Nodes.** If \(\) is a sum node \(\), then:

\[_{}()=_{^{p}}\!\!\!(- \,^{}\,)\,_{}()\,_{p} ()=_{()}w_{, }^{p_{}}}\!\!\!( -\,^{}\,)\,_{}()\,_{p_ {}}()}_{=_{}()}. \]

Therefore, computing the inverse for \(\) reduces to inversion at its children.

**Product Nodes.** If \(\) is a product node \(\), then:

\[_{}()=_{t^{p_{}}}\!\!\!( -\,^{}\,)\,_{}(t)\,_{p_{ }}()=_{()} ^{p_{}}}\!\!\!(- \,^{}\,_{[()]})\,_{}()\, _{p_{}}()}_{=_{}(_{[ ()]})}, \]

where we used that \(_{p_{}}=_{()}\, _{p_{}}\) is a product measure on a product space, applied Fubini's theorem (Fubini, 1907), and used the additivity property of exponential functions. Consequently, computing the inverse for \(\) reduces to inversion at its children.

Through the recursive application of Eq. (12) and Eq. (13), we obtain that Eq. (10) reduces to integration at the leaves and, therefore, can be solved either analytically or efficiently through one-dimensional numerical integration. 

#### 4.1.2 Efficient computation of marginals

Similar to PCs over distribution functions, CCs allow efficient computation of arbitrary marginals. Given a CC on RVs \(=\), we can obtain the marginal CC of \(\) as follows. Let \(n=||\), \(m=||\) and let the characteristic function of the circuit be given by

\[_{}(t_{1},,t_{n},t_{n+1},,t_{n+m})=_{ ^{n+m}}\!\!\!(^{})_{} (), \]

where \(_{}\) denotes the distribution of the root. Then the marginal CC of \(\) is given by setting \(t_{j}=0\), \(n<j n+m\). The proof of marginal computation is provided in Appendix B.1.

#### 4.1.3 Efficiently computing moments via differentiation

Characteristic circuits also allow efficient computation of moments of distributions. Let \(k^{+}\) be such that the partial derivative \(_{}()}{ t_{1}^{k}  t_{d}^{k}}\) exists, then the moment \(_{k}\) exists and can be computed efficiently through the derivative at the leaves

\[_{k}=^{-dk}_{}( )}{ t_{1}^{k} t_{d}^{k}}_{t_{1}=0, ,t_{d}=0}=^{-dk}_{i=1}^{}_{(,) (_{i})}w_{,}_{ (_{i})}^{k}_{}(t_{( )})}{t_{()}^{k}}_{t_{() }=0}. \]

A detailed proof can be found in Appendix B.2.

### Learning Characteristic Circuits from Data

To learn a characteristic circuit from data there are several options. The first option is _parameter learning using a random circuit structure_. The random structure is initialized by recursively creating mixtures with random weights for sum nodes and randomly splitting the scopes for product nodes. A leaf node is created with randomly initialized parameters when there is only one scope in a node. Maximising the likelihood at the root of a CC requires one to apply the inversion theorem to the CC for each training data. When a leaf node does not have a closed-form density function, numerical integration could be used to obtain the density value given data, which makes the maximum likelihood estimation (MLE) at the root not guaranteed to be tractable.

As discussed in prior works, see _e.g._Yu (2004), minimising a distance function to the ECF is most related to moment-matching approaches, but can result in more accurate fitting results. Therefore, minimising the CFD to the ECF can be beneficial if no tractable form of the likelihood exists but evaluating the characteristic function is tractable. In this case, instead of maximising the likelihood from CC, which is not guaranteed to be tractable, we take the ECF from data as an anchor and minimise the CFD between the CC and ECF:

\[_{j=1}^{k}|_{i=1}^{n} (_{j}^{}_{i})-_{}(_ {j})|^{2}. \]

Applying Sedrakyan's inequality Sedrakyan (1997) to Eq. (16), parameter learning can be operated batch-wise:

\[_{j=1}^{k}|_{l=1}^{b}}_{i=1}^{n_{b}}(_{j}^{}_{ i})-_{}(_{j})|^{2}_{j=1}^{k} _{l=1}^{b}|}_{i=1}^{n_{b}} (_{j}^{}_{i})-_{}(_{ j})|^{2},\]

where \(b\) is the number of batches and \(n_{b}\) the batch size. This way, parameter learning of \(\) is similar to training a neural network. Furthermore, if two CCs are compatible, as similarly defined for PCs Vergari et al. (2021), the CFD between the two CCs can be calculated analytically, see Appendix D for more details.

Figure 2: Illustration of the recursive structure learning algorithm. Sum nodes are the result of clustering, having weighted children that are product nodes. Product nodes are the result of independence test, enforcing independence assumptions of their children. Leaf nodes are univariate characteristic functions modelling local data.

However, relying on randomly initialized structures (_e.g._, due to the fixed split of scopes) may also limit the performance of parameter learning of CC. To overcome this, we derive now a _structure learning_ algorithm to learn the structure of the CC. Inspired by Gens and Domingos (2013), this structure learning recursively splits the data slice and creates sum and product nodes of the CC as summarized in Algorithm 1 and depicted in Fig. 2. To create a sum node \(\), clustering algorithms, _e.g._, K-means clustering, is employed to split data instances in the slice into \(k_{}\) subsets. The weights of the sum node are then determined by the portion of data instances in each subset. To create a product node \(\), some independence tests--_e.g._, G-test of independence or random dependency coefficient (RDC) based splitting (Molina et al., 2018)--are used to decide on splitting the random variables in the data slice into \(k_{}\) sub-groups. The sum and product nodes are created recursively until any of the following conditions fulfils: (1) There is only one scope in the data slice, and then a leaf node with the corresponding scope is created. (2) The number of data instances in the data slice is smaller than a pre-defined threshold \(min\_k\). In the latter case, a naive factorization is applied to the scopes in the data slice to create a product node, and then create leaves for each scope as children for this product node. When creating a leaf node, the leaf parameters are estimated by MLE if the closed-form density function is available. In the case of ECF leaves, the leaf nodes are created from local data following the definition of ECF in Eq. (4). When there is no closed-form density at a leaf, the parameters of an \(\)-stable distribution are estimated using the algorithm in McCulloch (1986).

## 5 Experimental Evaluation

Our intention here is to evaluate the performance of characteristic circuit on synthetic data sets and UCI data sets, consisting of heterogeneous data. The likelihoods were computed based on the inversion theorem. For discrete and Gaussian leaves, the likelihoods were computed analytically. For \(\)-stable leaves, the likelihoods were computed via numerical integration using the Gauss-Hermit quadrature of degree 50.

**Can characteristic circuits approximate known distributions well?** We begin by describing and evaluating the performance of CC on two synthetic data sets. The first data set consisted of data generated from a mixture of multivariate distributions (denoted as MM): \(p()=_{i=1}^{K}w_{i}p(_{1}_{i},_{i}^{2})p(_ {2}_{i})\), where \(p(,^{2})\) is the univariate normal distribution with mean \(\) and variance \(^{2}\), and \(p()\) is the univariate categorical distribution with \(\) the vector of probability of seeing each element. In our experiments we set \(K=2\) and \(w_{1}=0.3\), \(w_{2}=0.7\). For each univariate distribution we set \(_{1}=0\), \(_{1}^{2}=1\), \(_{2}=5\), \(_{2}^{2}=1\), \(_{1}=[0.6,0.4,0.0]\) and \(_{2}=[0.1,0.2,0.7]\). The second data set consisted of data generated from a Bayesian network with 5 nodes (denoted as BN), to test the modelling power of characteristic circuits with more RVs and more complex correlations among each RV. The details of the BN are depicted in Fig. 3. Here, \(_{1}\), \(_{2}\), \(_{3}\) and \(_{5}\) are binary random variables parameterized by \(_{i}\), and \(_{4}\) is a continuous random variable conditioned on \(_{3}\). For both data sets MM and BN, 800 instances were generated for training and \(800\) for testing.

We first employed parameter learning and evaluated the log-likelihoods from the random structure and after parameter learning. A detailed setting of parameter learning is illustrated in Appendix C.1. The increase of log-likelihoods after parameter learning (columns 2 and 3 in Table 1) implies that

   Data Set &  Random \\ Structure \\  &  Random Structure \\  &  Structure \\ Learning \\  &  Structure Learning \\  &  Structure Learning \\  & 
 Structure Learning (random \(\)) \\  \\  MM & -4.93 & -3.50 & -2.87 & -2.86 & -3.34 \\ BN & -6.30 & -4.12 & -3.27 & -3.27 & -3.93 \\   

Table 1: Average test log-likelihoods from CC after parameter learning by minimising the CFD on synthetic data sets. The CC structure is either generated using Random Structure or learned using the Structure Learning algorithm.

Figure 3: The Bayesian network used for BN.

minimising the CFD pushes CC to better approximate the true distribution of data. We then learnt CCs using structure learning with \(min\_k=100\), and \(k_{}=k_{}=2\). Various leaf types were evaluated: CC with ECF as leaves (CC-E), CC with normal distribution for continuous RVs and categorical distributions for discrete RVs, _i.e._, parametric leaves (CC-P), and CC with normal distribution for all leaf nodes (CC-N). The trained CCs were evaluated with the CFD between the CC and the ground truth CF. For data set BN, the ground truth CF was derived via the algorithm for generating arithmetic circuits that compute network polynomials (Darwiche, 2003). Following Chwialkowski et al. (2015) and Ansari et al. (2020), we illustrate both the CFD with varying scale \(\) in \((;)\) and also optimising \(\) for the largest CFD, shown in Fig. 4. We report average CFD values and standard deviations obtained from five runs. It can be seen from Fig. 4 that both CC-E and CC-P have almost equally lower CFD values and also lower maximum CFD values compared to the ECF, which indicates the characteristic circuit structure better encodes the data distribution than the ECF. The smaller standard deviation values from characteristic circuits compared with ECF also imply that characteristic circuits offer a more stable estimate of the characteristic function from data. For data set MM, the maximum CFD of CC-N is \(0.0270\) when \(()=0.6735\), which is far more than \(0.0006\) of CC-P, and thus not visualized in Fig. 4 (Left). This also happens to data set BN, as can be seen in Fig. 4 (Right) that CC-N gives higher CFD than CC-P and CC-E, which implies that assuming a discrete RV as Normal distributed is not a suitable choice for CC. In addition, parameter learning on CCs from structure learning and structure learning with randomized parameters (last 2 columns in Table 1) provides higher log-likelihoods than random structures, which implies a well-initialized structure improves parameter learning. To conclude, CC estimates the data distribution better than ECF, which is justified by the smaller CFD from CC-E compared with ECF.

**Can characteristic circuits be better density estimators on heterogeneous data?** Real-world tabular data usually contain both discrete and real-valued elements, and thus are in most cases heterogeneous. Therefore, we also conducted density estimation experiments on real-world heterogeneous data sets and compared to state-of-the-art probabilistic circuit methods, including Mixed SPNs (MSPN) (Molina et al., 2018), Automatic Bayesian Density Analysis (ABDA) (Vergari et al., 2019) and Bayesian SPNs (BSPN) (Trapp et al., 2019). We employed the heterogeneous data from the UCI data sets, see Molina et al. (2018) and Vergari et al. (2019) for more details on the data sets. Similar to the setup in Trapp et al. (2019), a random variable was treated as categorical if less than 20 unique states of that RV were in the training set. All the rest RVs were modelled with either normal distributions (CC-P) or \(\)-stable distributions (CC-A). Again, we first employed parameter learning with a (fixed) random structure using \(\)-stable distribution for continuous RVs and report the log-likelihoods (Parameter Learning in Table 2). Note that \(\)-stable distributions can not be represented with closed-form densities, thus maximising the likelihood from it can not be solved exactly and efficiently. As a comparison, structure learning was also employed with \(min\_k=100\), \(k_{}=k_{}=2\) for G-test based splitting (CC-P & CC-A), and with \(min\_k=100\), \(k_{}=2\) for RDC based splitting (CC-A\({}^{}\)). A detailed description of the experimental settings can be found in Appendix C.2. The test log-likelihoods are presented in Table 2. As one can see, parameter learning performs worse than CC-A but still outperforms some of the baselines. CC-P does not win on all the data sets but is competitive with MSPN and ABDA on most of the data sets. CC-A outperforms the baselines on 8 out of 12 data sets, and CC-A\({}^{}\) outperforms all the other methods

Figure 4: Characteristic circuits approximate the true distributions better than the ECF by providing a smaller CFD. We visualize the CFD for CC with parametric leaves (CC-P ), ECF as leaves (CC-E ), normal distribution as leaves (CC-N ) and a single empirical characteristic function (ECF ) learned from synthetic heterogeneous data (Left: MM, Right: BN). Best viewed in color.

on 9 out of 12 data sets. This implies that characteristic circuit, especially with structure learning, is a competitive density estimator compared with SOTA PCs. Actually, \(\)-stable leaf distributions are a more suitable choice for characteristic circuits on heterogeneous tabular data.

## 6 Conclusion

We introduced characteristic circuits (CCs), a novel circuit-based characteristic function estimator that leverages an arithmetic circuit with univariate characteristic function leaves for modelling the joint of heterogeneous data distributions. Compared to existing PCs, characteristic circuits model the characteristic function of data distribution in the continuous spectral domain, providing a unified view for discrete and continuous random variables, and can further model distributions that do not have closed-form probability density functions. We showed that both joint and marginal probability densities can be computed exactly and efficiently using characteristic circuits. Finally, we empirically showed that characteristic circuits approximate the data distribution better than ECF, measured by the squared characteristic function distance, and that characteristic circuits can also be competitive density estimators as they win on 9 out of 12 heterogeneous data sets compared to SOTA models.

There are several avenues for future work. For instance, sampling from characteristic functions and, in turn, characteristic circuits is not straightforward. One should explore existing literature discussing sampling from CFs (Devroye, 1986; Ridout, 2009; Walker, 2017), and adapt them to sampling from CCs. The circuit structure of characteristic circuits generated by structure learning has a high impact on the performance of the characteristic circuit, and therefore an inappropriate structure can limit the modelling power of characteristic circuits. Therefore, one should explore parameter learning of characteristic circuits on more advanced circuit structures (Peharz et al., 2020) and, in particular, using normalizing flows, resulting in what could be called characteristic flows.

**Broader Impact.** Our contributions are broadly aimed at improving probabilistic modelling. CCs could be used to develop more scalable and more accurate probabilistic models, in particular over mixed domains as common in economics, social science, or medicine. Scaling to even bigger mixed models can open up even more potential applications, but also may require careful design to handle overconfidence and failures of CC.