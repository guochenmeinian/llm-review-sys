# Metacognitive Capabilities of LLMs: An Exploration

in Mathematical Problem Solving

Aniket Didolkar 1, Anirudh Goyal 1, Nan Rosemary Ke 4, Siyuan Guo 3,5,

**Michal Valko 4, Timothy Lillicrap 4, Danilo Rezende 4,**

**Yoshua Bengio 1, Michael Mozer 4, Sanjeev Arora 2**

###### Abstract

_Metacognitive knowledge_ refers to humans' intuitive knowledge of their own thinking and reasoning processes. Today's best LLMs clearly possess some reasoning processes. The paper gives evidence that they also have metacognitive knowledge, including ability to name skills and procedures to apply given a task. We explore this primarily in context of math reasoning, developing a prompt-guided interaction procedure to get a powerful LLM to assign sensible skill labels to math questions, followed by having it perform semantic clustering to obtain coarser families of skill labels. These coarse skill labels look interpretable to humans.

To validate that these skill labels are meaningful and relevant to the LLM's reasoning processes we perform the following experiments. (a) We ask GPT-4 to assign skill labels to training questions in math datasets GSM8K and MATH. (b) When using an LLM to solve the test questions, we present it with the full list of skill labels and ask it to identify the skill needed. Then it is presented with randomly selected exemplar solved questions associated with that skill label. This improves accuracy on GSM8k and MATH for several strong LLMs, including code-assisted models. The methodology presented is domain-agnostic, even though this article applies it to math problems.

## 1 Introduction

Large language models (LLMs) have demonstrated remarkable advancements in recent years at natural language inference tasks , as well as scientific and mathematical problems , although their limitations on mathematical problems are also well-documented .

A core concept in human pedagogy is _Metacognition_, sometimes described as _thinking about thinking_. It refers to ability to reason about one's own cognitive processes as well as about learning-relevant properties of information or data. _Metacognitive Knowledge_ refers to the learner's accumulated knowledge of this type. Pedagogy research shows that improving learners' metacognitive knowledge can improve their capabilities, for example on math . The current paper raises the question _"Do LLMs also have metacognitive knowledge?"_ And if yes, _Can we bootstrap such knowledge to further improve LLM capabilities?_

At first glance, this quest seems difficult. Deciphering LLMs' inner working from their huge set of parameters -all results of non-linear optimization-- is notoriously hard. Furthermore, scientists lack parameter access to most leading AI models. But there are still reasons to hope we can understand metacognition by interacting with LLMs. They display some human ties, such as ability to improve their math reasoning via _Chain of Thought (CoT)_ and also the "Let's think step by step"prompt . These were generally perceived as convenient tricks to get around the limitations imposed by the LLM's auto-regressive nature. But other pieces of evidence have emerged about existence of LLM metacognition. A notable example is Ask-LLM , whereby the LLM appears to give surprisingly helpful answers to the question _"Is this a good training datapoint for an LLM?"_The current paper reports on similar direct approach to deciphering LLM metacognition: _Just go ahead and ask it_!

Specifically, the Metacognitive Knowledge of interest in this paper is the catalog of skills (from the LLM's viewpoint) that it applies while solving math questions. Pedagogy research has uncoverex a rich catalog of skills in humans, ranging from simple ones -- operations on variables, solving equations, grasping the concept of a function-- to difficult ones such as grasp of difficult theorems and proof strategies. But currently mathematical datasets used in LLM research (such as MATH ) partition problems using broad human-assigned topics such as "probability" and "algebra." We are interested in a more fine-grained understanding of LLM skills.

**Skill Discovery:** Our automated approach for the discovery of skills utilizes state-of-the-art LLMs to identify their own catalog of math skills and then organize datasets using that catalog. Stage 1 of our methodology involves instructing the LLM to assign skill labels to each example within a given dataset. Usually this results in fine-grained skills, and too many skill labels. In Stage 2, the same LLM is asked to perform semantic clustering on the labeled data, grouping examples by the similarity of their underlying skills (as perceived by the LLM). Each resulting cluster represents a more coarse-grained skill that is applicable to a larger set of examples. Our method retains only these coarse skills. (To give an example, for the MATH dataset, Stage 1 identified approximately 5000 skills, which Stage 2 reduced to 117 coarse skills.) A random subset of examples representing the coarse skills are retained as its _skill exemplars_. (See Figure 1 and Appendix 10). To subsequently improve (in-context) math problem solving by LLMs we use the repository of skill exemplars -each labeled with a coarse skill. Here the LLM is given a new question and the above list of coarse skills and asked to identify the skill needed to solve this new question. Then the LLM is provided the previously identified exemplars for the selected skill as in-context examples to guide its problem-solving. We note that this is reminiscent of how human problem-solving is taught by presenting examples very congruent with the specific problem at hand. Here we find that LLM problem solving improves

Figure 1: **Creating Skill Exemplar Repository**: First, an LLM labels each question with a corresponding skill, as detailed in the prompt provided in Appendix Figure 2 (left). Next, the LLM is asked to combine similar fine-grained skills into broader skill clusters, which represent complex skills. This greatly reduces the number of unique skills from the first stage. The prompt for this is depicted in Appendix Figure 2 (middle). Then the LLM is asked to reclassify all examples from the training set into one of the post-clustering skills. Using these we create a ’Skill Exemplar Repository’ which consists of skill exemplars consisting of skill names and their corresponding question/answer examples. **Inference**: During inference, we use an LLM to first label a test question with one of the skills from the skill exemplar repository. Next, we fetch exemplars from the repository with the same skill and provide them as in-context examples to solve the test question.

using the skill labels and skill-exemplars provided by an LLM on the same dataset. This provision of skill-exemplars can be seen as a new addition to on top of known prompting methods such as Chain-of-thought.

Although we describe our method only in context of math, it seems general enough to be broadly applicable to problem-solving of other sorts. This is left for future work.

**Paper organization and main results:** Section 3 describes the method and Section 4 describes experiments. Using a strong LLM - GPT-4 - to identify skills, we validate the usefulness of these skills by demonstrates a significant 11.6% enhancement over CoT on the MATH Dataset using the method described in Section 3. Furthermore, the identified skills also improve the generation of code-based solutions for the problems within the MATH dataset giving a 7.52% improvement over the baseline PAL approach , which also instructs the model to generate code. Section 4.3 shows that the the skill exemplar repository created for MATH noticeably improved in-context performance for _weaker LLMs_ on the same dataset and that the repository for GSM8K helped improve in-context performance for other math datasets. This shows that a powerful LLM can be used for deeper understanding of skills that translates across other LLMs and related datasets.

## 2 Related Works

For human learning, statistical methods can infer latent skills from data and use the inferred skills to more accurately forecast student learning [25; 26]. In machine learning, works that study learning via skill induction include [27; 28; 29; 30]. These start with some definition of skills in terms of model parameters, whereas we use a powerful LLM in a black box way to identify and consolidate skills. A discussion of various prompting strategies is covered in Section 4 and Appendix Section 9.

## 3 Automated Skill Discovery

We describe an automated process for categorizing mathematical questions according to specific _skills_ needed to solve them. See Figure 1. Recent works relating skills and LLMs [31; 32] were an inspiration. Conceptually, the strategy involves the creation of a detailed _skill exemplar_ repository, which contains a compilation of skill names alongside respective illustrative examples (comprising both questions and answers). During the inference stage, when presented with a question, the LLM initially looks among skill exemplars to identify the skill that is best suited for the question. The LLM then utilizes the corresponding exemplars for that skill as in-context prompts.

**Notation.** The proposed setup consist of a training set \(=\{(q_{0}^{T},a_{0}^{T}),(q_{1}^{T},a_{1}^{T}),,(q_{n}^{T},a _{n}^{T})\}\), where \(q_{i}^{T}\) and \(a_{i}^{T}\) are question and answers from the training set. The training set is used for selecting in-context examples for inference. Our test set also consists of set of questions and answers - \(=\{(q_{0}^{E},a_{0}^{E}),(q_{1}^{E},a_{1}^{E}),,(q_{n}^{E},a_{ n}^{E})\}\). To create the skill exemplars, we first label the training set, \(\), with a skill per example using a LLM. Next, we label the test set with skills to retrieve in-context examples with matching skills from the skill exemplar repository. The exact procedure of labelling the training and test set with skills is different and we detail both approaches below.

### Skill Labelling: categorizing mathematical questions according to specific skills

The process is illustrated in Figure 1. It had the following steps.

**Assign Skill Name for every example in training Set \(\):** Using a carefully curated prompt (given in Appendix Figure 2 (left)), we asked a LLM to label each training instance with a single skill name and a reason for that assigned skill. Figure 1 (top) represents this process. Applying a strong LLM for this task - GPT-4-0613 - we found that for the \(7,000\) instances in the GSM8K dataset , it specified approximately \(500\) unique skill names. For the \(7,500\) examples in the MATH dataset , it specified

 
**Dataset** & **Topic** & **Skills** \\  GSM8K & - & anticipation, and addiction, basic\_arithmetic, addition\_and\_multiplication, arithmetic\_operations, multiplication, percentage\_calculations, subtraction, algebra, subtraction\_and\_division, multiplication\_and\_division, multiplication\_and\_division, multiplication\_and\_division, algebra\_calculation, subtraction\_and\_division, addition\_and\_division, processing\_evaluation, abbreviation\_anticondition, division\_linear, equations, algebraic\_reasoning \\  

Table 1: **List of Skills for each Dataset** This table lists down the skill obtained after the skill clustering phase for each dataset and corresponding topics. Skill names were provided by GPT-4-0613. The skills of the other topics in MATH can be found in Appendix Table 10\(5,000\) skill names. (This perhaps reflects the hardness and diversity of MATH compared to GSM8K.) Although these skill labels precisely encapsulate the capabilities requisite for solving each question, it is clear that the granularity is excessive, raising issues reminiscent of classical "overfitting."

For example, for the question "In a triangle, the area is numerically equal to the perimeter. What is the radius of the inscribed circle? (A) 2 (B) 3 (C) 4 (D) 5 (E) 6" GPT-4 came up with the skill name understanding_of_triangle_properties_and_circle_radius_calculation. Despite descriptive accuracy, its high specificity may limit its utility, as it is improbable that an identical question embodying this precise skill will recur. To address this, the initial labelling phase is followed by a phase of skill clustering, aiming to generalize the skill categories for broader applicability.

Semantic Skill Clustering:In this phase, the LLM was prompted to aggregate the skills identified in the skill labelling stage, specifically to group similar skills into broader categories (Figure 1 (top)) and assign a descriptive label to each category. (The prompt appears in Appendix Figure 2 (middle).) Again utilizing GPT-4-0613 for this, we obtained a reduced skill set comprising of \(22\) skills for GSM-8K and \(117\) skills for MATH. The list of skills are presented in Table 1, and Appendix Table 10. Subsequently, we use the LLM to reclassify all examples in the training set \(\) using these new skill names from the clustering phase. Thus the initial highly detailed skill labels get consolidated into broader, more universally applicable categories. For instance, the question initially labelled as "understanding_of_triangle_properties_and_circle_radius_calculation" is relabeled to have the skill name "understanding_of_triangles". This modification significantly enhances the applicability of the training set for a wider range of problem-solving scenarios.

Skill Exemplar Repository:Following the skill clustering and relabelling process of the training set, we established a 'Skill Exemplar Repository.' This contains a curated selection of skills and their corresponding exemplars, specifically questions and answers, derived from the training set \(\). The structure of the skill exemplar repository is formalized as follows: skill exemplar repository \(=(s_{0},q_{0}^{T},a_{0}^{T}),(s_{1},q_{1}^{T},a_{1}^{T}),,(s_{n},q_{n}^{ T},a_{n}^{T})\), where \(s_{i}\) denotes the skill label associated with the \(i\)-th question-answer pair \((q_{i}^{T},a_{i}^{T})\). See Figure 1 (top) for an example of such a repository. This systematic compilation facilitates efficient referencing and application of relevant examples corresponding to specific skills during inference. App. Tables 11, 17, and 18 illustrate examples from the skill exemplar repositories for the GSM-8k and MATH datasets respectively created using GPT-4-0613. We can see that each question is labelled with a human interpretable and intuitive skill name.

### Inference at test time

In the testing phase, the LLM is given a math question \(Q\). It is asked to first select one skill from the list of skills in the repository, say \(s_{i}\) that is most relevant to the question. (The prompt employed for this step appears in Appendix Figure 2 (right).) Next, \(K\) Exemplars corresponding to \(s_{i}\), randomly picked, are then employed for few-shot prompting as usual. By providing the LLM with contextually relevant, skill-specific examples from the repository, one expects to enhance its effectiveness at answering the question \(Q\). This process is depicted in Figure 1 (below).

Transferring skill exemplars to other datasetsThe broad range of questions, answers and skill labels in the exemplar repository makes it an attractive source of relevant in-context examples for solving various mathematical problems. To demonstrate such adaptability and utility we applied the Skill Exemplar Repository derived from GSM8K dataset to solving various existing math word problem datasets that were designed to evaluate concrete mathematical skills or concepts. Section 4.3 reports notable improvements in problem-solving capabilities across domains.

### Skills from strong LLMs improve weaker LLMs

Through the methodology described above, we find that a strong LLM - such as GPT-4-0613 - is able assign intuitive and human interpretable skill names to questions. These skills are a representation of the metacognitive knowledge of the LLM. We consider whether this knowledge can be applied to other LLMs - specifically weaker LLMs. Section 4.3 shows that skill-based in-context examples, labeled using a stonger LLM as described earlier, also significantly enhance the performance of less advanced models, such as Mixtral . This underscores that the skill-based knowledge categorization from one LLM is broadly applicable to other LLMs too.

Skill-exemplars improve various prompting methodsOur approach is designed to be synergistic with a range of prompting techniques, thereby offering broad applicability across various methodologies. It can be seamlessly integrated with numerous existing prompting strategies, including the Chain of Thought (CoT) approach , PAL , and the self-consistency method . In each of these instances, the proposed method enhances the existing framework by substituting the conventional in-context examples with those meticulously selected from the Skill Exemplar Repository. This integration not only preserves the inherent strengths of the original prompting techniques but also augments them by leveraging the specificity and relevance of the skill-aligned examples. This adaptability underscores the versatility and potential of the proposed approach to improve the efficacy of various language model prompting strategies.

## 4 Experiments

In Section 3, we have described a procedure to extract metacognitive knowledge from LLMs in the form of skill annotations for mathematical questions. In this section, we show that this knowledge of skills can be further used to improve reasoning in LLMs by using them to provide pertinent in-context examples for solving new mathematical problems through the process described in Section 3.2 and depicted in Figure 1 (below). Our evaluation focused on three distinct areas: _Text-based Prompts_: We utilized chain-of-thought prompting, as detailed in Section 4.1. This method involves providing step-by-step reasoning in the prompt to guide the model's thought process, _Program-based Prompts_: Here, we employed program-aided language models (PALs), described in Section 4.2. PALs integrate programming logic within the language model, aiming to enhance its reasoning capabilities, and _Transferability_: We investigate the generalizability of these skills across different LLMs and datasets, as elaborated in Section 4.3. This aspect tests how well the skills transfer to different LLM models and unseen datasets. Our results demonstrate that knowledge of skills significantly improves performance for both text-based and program-based prompting across different datasets. Furthermore, these skills exhibit strong transferability, boosting mathematical reasoning capabilities across other maths datasets and LLM models. We also conduct a detailed analysis to gain a deeper understanding how our approach influence the reasoning abilities of LLMs. Finally, we present an initial exploration into labeling each question with multiple skills instead of a single skill followed by an experiment which demonstrates the flexibility of the proposed approach by applying it for alignment.

Prompting MethodsWe investigate two prominent types of in-context prompting methods for enhancing mathematical reasoning in LLMs: _Text-based Prompting_: Utilizes text examples to demonstrate problem-solving steps, with Chain-of-Thought (CoT)  being a prime example. _Program-aided Prompting_: Employs programs to showcase reasoning steps, as seen in Program-aided Language Models (PALs) . To assess the effectiveness of these methods, we replaced the standard in-context examples used by CoT  and PAL  with examples from our skill exemplar repository. We then evaluated the performance of LLMs with both text-based and program-based prompting, using our skill exemplars versus standard examples.

BaselinesOur evaluation also includes a comparison with four baselines to isolate the impact of our skill-specific examples: _Random_: This baseline randomly selects examples from our repository in contrast to CoT's fixed examples, highlighting the necessity of skill-aligned example selection. _Topic-Based_: Examples are grouped by broader mathematical topics (e.g., algebra), as in the MATH dataset . This tests whether finer-grained skills (as detailed in Table 10) offer an advantage over broader topic categorizations. _ComplexCOT_: Chooses complex in-context examples for CoT, allowing us to analyze whether complexity or skill-specificity has a greater impact on performance. _Retrieval-RSD_: This selects relevant in-context examples for few-shot tasks similar to the proposed approach. They first map the examples to a latent space and then selects top-k in-context examples based on cosine similarity to the example. Through these comparisons, we aim to discern

  
**Prompting** & **Pre-Algebra Geometry Inter-Algebra Algebra Probability Pre-Calculus Num. Theory** & **Overall** \\   CoT & - & - & - & - & - & - & 42.2 \\ ComplexCoT & 71.6 & 36.5 & 23.4 & 70.8 & 53.1 & 26.7 & 49.6 & 50.30 \\ CoT + Topic-Based & 71.16 & 39.45 & 24.14 & 67.90 & 54.64 & 31.13 & 47.03 & 50.31 \\ CoT + Skill-Based & 74.28 & 41.75 & 27.02 & 73.12 & 58.01 & 33.70 & 51.10 & 53.88 \\   

Table 2: **Text-based prompt results on the MATH Dataset.** Our Skill-Based approach, employing CoT prompting, demonstrates superior performance over all other methods across all topics within the MATH dataset. All experiments were conducted using GPT-4-0613.

the relative benefits of skill-specificity and complexity in example selection for enhancing LLMs' mathematical reasoning capabilities.

DatasetsWe evaluate the proposed approach using a variety of mathematical reasoning datasets. We start with the GSM8K dataset , which comprises grade-school level math problems. We then move on to the challenging MATH dataset , known for its competition-level problems.

To examine the transferability of skills, we apply the skills from the GSM8K dataset to other math word problem datasets. These include SVAMP , ASDIV , and the MAWPS suite (SingleOP, SingleEQ, AddSub, MultiArith) . Each dataset presents its unique set of challenges and complexities, allowing us to thoroughly assess the adaptability and effectiveness of our approach across different mathematical contexts. For details about these datasets, please refer to the Appendix 10.1.

Language ModelsIn Section 10.4 of the Appendix, we conduct a comparative analysis of GPT-4-0613, GPT-3.5-Turbo, and Mixtral-8x7B in their proficiency in generating precise skill labels. Through experimentation, we show that the skill labels annotated by GPT-4-0613 lead to the strongest in-context learning performance on the MATH dataset . Therefore, we establish GPT-4-0613 as the primary model for skill labeling, clustering, and conducting the majority of our experiments. For transfer experiments, as outlined in Section 3.3 and further detailed in Section 4.3, we evaluate the performance of the Mixtral 8x7B model . This dual-model approach allows us to assess the effectiveness of our methods across different advanced language models.

### Text-based Prompts

We consider the GSM8K dataset , containing grade-level math word problems, and the MATH dataset , featuring competition-level math problems. These experiments aim to assess the efficacy of our approach across a wide range of mathematical complexities, specifically using text-based prompting strategies. All experiments were carried out using GPT-4-0613, employing 8-shot prompting and a decoding temperature set to 1.0.

Results on GSM8K. GSM8K dataset  contains 7.5k training problems and lk test problems. The skill exemplar repository is created using the training data only, refer to Section 3.1 for details. See Table 11 in the appendix for examples from the skill exemplar repository.

We utilize the skill exemplar repository to solve test set problems from the GSM8K dataset, as outlined in Section 3.2. The results are shown in Table 3. Our Skill-Based approach outperforms both the Chain-of-Thought (CoT) and Random baselines on the GSM8K dataset, underscoring the importance of accurate skill assignment and pertinent in-context examples in effective problem-solving. Furthermore, augmenting the Skill-Based approach with self-consistency (SC, presented as maj@5 in Table 3) techniques  leads to even better performance, highlighting the adaptability and effectiveness of our method. For the SC experiments, we sample 5 reasoning chains from the LLM and choose the most frequent answer. Additionally, we provide a detailed breakdown of per-skill accuracy for both the proposed approach and the Random approach in Appendix Figure 3. To further emphasize the effectiveness of the proposed method, we compare it to the Retrieval-RSD approach  which is also a pertinent in-context example selection approach for few-shot prompting. The results are presented in Table 3 show the superiority of our approach as compared to the Retrieval-RSD approach. We use GPT-3.5-Turbo backbone for this comparison.

Results on MATH.The MATH dataset, comprising competition-level math problems, covers topics like Pre-Algebra, Algebra, Intermediate Algebra, Geometry, Number Theory, Precalculus, and Probability. Its training set has 7.5k examples and the test set has 5k examples, each labeled by their respective topics. Following the methodology described in Section 3.1, we created a Skill Exemplar Repository using the MATH dataset's training set. This repository is showcased through examples in Appendix Tables 17 and 18, providing insights into the range and nature of skills covered in the MATH dataset. Furthermore, in Appendix Table 12 we show examples of the relevant in-context

  
**Base Model** & **Prompting** & **GSM8K** \\   & Retrieval RSD & 76.8 \\  & CoT + Skill-Based & 82.03 \\   & CoT & 93.00 \\  & CoT + Random & 92.87 \\   & CoT + Skill-Based & 94.31 \\   & CoT + Skill-Based (maj@5) & 95.38 \\   

Table 3: **Text-based prompt results on the GSM8K Dataset.** Our Skill-Based approach outperforms various other methods on the GSM8K dataset across two different models: GPT-3.5 Turbo and GPT-4-0613. Refer to text for description of baselines.

examples selected from the skill exemplar repository to solve a given question. We can see that selected exemplars are similar to the question to be and correctly illustrate the concepts required by the question.

Results on the MATH dataset are shown in Table 2. For this analysis, our proposed approach utilizes a straightforward Chain-of-Thought (CoT) method, wherein the in-context examples are sourced from the skill exemplar repository. Our method achieves a notable improvement in performance, surpassing the standard Chain-of-Thought (CoT) by an impressive 11.6%. We also outperform 3.5% over Complex CoT, and 3.5% over the Topic-Based approach. These results highlight the efficacy of our approach, particularly with its fine-grained skill labeling. The fact that it surpasses Complex CoT is especially noteworthy, indicating the importance of selecting in-context examples that are highly relevant to the specific problem, rather than using their complexity as a proxy for quality.

### Program-Aided Prompts

Program Aided Language Models (PALs), as developed by 24, are designed to produce program-based solutions for problem-solving, employing Python as the programming language. This approach addresses the issue of logical or calculation errors in Language Models by translating solutions into code, thus leveraging a compiler for final answer generation. In our integration of Skill-Based prompting with PALs, we modify the in-context example structure: we use three non-code-based examples from our skill exemplar repository based on skill matching, followed by one fixed code-based example, totaling four in-context examples. The specifics of these prompts are detailed in Appendix Section 10.5.

Our experiment, results of which are shown in Table 4, tests this modified approach on a subset of 500 examples from the MATH test set, same as those used in . The findings are significant: despite only one code-based in-context example (compared to PAL's four), our approach shows a 7.52% improvement over PAL. This highlights the impact of strategically chosen, relevant in-context examples, on the accuracy of code generation for problem-solving.

### Transfer of Skill Exemplars

Studying Transfer of Skill Exemplars to Other ModelsIn this study, we explore the transferability of skills from GPT-4 to other LLMs, particularly focusing on Mistral 8x7B . This experiment replicates the setup used for the earlier experiments with GPT-4-0613, utilizing the same skill exemplar repository and skill labels for the MATH dataset test set examples initially labeled by GPT-4-0613. For each problem, 4 in-context examples are chosen based on skill-matching, and outputs are sampled with a decoding temperature of 0.2. The results are displayed in Table 5. We use 1 A100L GPU for this experiment.

    &  \\    & 309 & 23.2 & 31.7 & 66.1 & 57.9 & 73.2 & 65.3 & 25.0 \\ PAL + Skill-Based (3) Skill-Based + I Code-Based & **35.05** & **44.64** & **39.02** & **70.97** & **60.53** & **78.05** & **72.58** & **59.31** \\ PAL + Skill-Based (7) Skill-Based + I Code-Based & 37.11 & 50.37 & 41.46 & 72.58 & 65.79 & 81.70 & 73.39 & 62.00 \\   

Table 4: **Program-aided prompts results on the MATH dataset.** This table illustrates the performance achieved by employing the Skill-Based approach to generate code for problem-solving tasks drawn from the MATH dataset using **GPT-4-0613**. Evidently, supplying pertinent in-context examples grounded in specific skills enhances the program generation performance of GPT-4-0613, leading to a notable improvement across all topics encompassed in the MATH dataset.

   &  &  &  &  &  &  &  &  &  \\  & (maj/qn) & **Alpha** & & & & & & & **Hity** & **Calculus** & **Theory** & \\   CoT & maj/q4 & - & - & - & - & - & - & - & - & - & - & 28.4 \\  + Topic-Based & \(\) & 42.94 & 17.33 & 11.30 & 40.78 & 19.83 & 14.47 & 16.53 & 26.14 \\ + Skill-Based & \(\) & **47.76** & **19.42** & **13.29** & **43.05** & **20.04** & **16.12** & **18.33** & **28.44** \\  + Topic-Based & maj/q4 & 52.58 & 20.25 & 10.68 & 48.78 & 24.05 & 14.65 & 20.53 & 30.75 \\ + Skill-Based & maj/q4 & 53.96 & 22.55 & 13.68 & 49.70 & 24.26 & 18.32 & 21.48 & 32.44 \\   

Table 5: **Transfer Skill Exemplars to Other Models.** All experiments are performed using the MATH dataset on the **Mistral 8 × 7B** model, comparing against standard CoT, CoT with topic-based exemplars, CoT with skill-based exemplars, CoT with self-consistency (maj\(@4\)) using both topic and skill-based exemplars. Skill labels and exemplars are obtained from GPT-4-0613. The enhanced performance of Skill-Based indicates effective transferability of skills from GPT-4 to another model.

Here, we compare our Skill-Based approach against two baselines: Chain-of-Thought with self-consistency (SC) as per  and the Topic-Based approach. For implementing self-consistency, we generate four reasoning chains and select the most frequent answer (noted as maj@4 in Table 5). The results demonstrate that our Skill-Based approach surpasses both the Topic-Based and CoT approaches. Notably, our approach, even without self-consistency, matches the performance of CoT with SC, highlighting its efficacy in extracting correct reasoning paths and concepts. Furthermore, when combined with self-consistency, our approach shows a remarkable 4.0% improvement over CoT with SC, affirming its superior efficacy in skill application and reasoning.

**Studying Transfer of Skill exemplars to Other Datasets** Here, we investigate the transferability of skills from the GSM8K training dataset to other math word problem datasets. We apply our approach to various datasets, including SVAMP , ASDIV , SingleOP, SingleEQ, AddSub, and MultiArith , each comprising distinct problem types. We utilize the GSM8K-derived skill exemplar repository for these datasets, testing skill transferability across similar datasets. Notably, we use the pre-clustering skill labels, as these datasets feature finer granularity problems compared to GSM8K, making post-clustering skills less effective.

The results, presented in Table 6, demonstrate the effectiveness of our approach. We employ a CoT-based method with 4-shot prompting and greedy decoding, aligning with the baseline settings. Our Skill-Based approach consistently surpasses the base CoT across all datasets. We also benchmark against a PAL-based approach and a hybrid CoT + PAL approach from , where the model outputs both CoT and PAL solutions and selects the most accurate. Our Skill-Based approach outperforms CoT + PAL in 4 out of 6 datasets, offering a simpler yet more effective solution. These findings affirm the potential of skill knowledge transfer from one dataset to other similar datasets.

### Analysis

We delve into the impact of Skill-Based on precise concept and skill application, Firstly, we pinpoint successful instances where Skill-Based prompts guide the LLM in selecting and applying the correct skills. Secondly, we investigate cases where, despite pertinent Skill-Based prompts, the LLM fails to utilize the right concepts. Lastly, we quantify these instances of failure and compare them against baseline models, assessing the efficacy of Skill-Based prompting in enhancing the LLM's performance. All experiments are performed using GPT-4-0613.

**Instances of LLM benefiting from Skill-Based Approach** In Table 7, we compare the effectiveness of the Skill-Based approach against the Topic-Based approach in problem-solving scenarios through examples. The Skill-Based approach significantly improves the model's reasoning and skill application. We highlight the reasoning errors of the Topic-Based approach in red and the correct reasoning steps undertaken by the Skill-Based approach in blue.

  
**Prompting** & **SVAMP** & **SingleOP** & **SingleEQ** & **AddSub** & **MultiArith** & **ASDIV** \\  CoT & 91.9 & 97.2 & 97.2 & 93.9 & 98.0 & 92.7 \\ PAL & 92.2 & 95.2 & 96.8 & 94.9 & 98.5 & 90.2 \\ CoT + PAL & 93.7 & 97.3 & 98.6 & 95.7 & 99.0 & 93.5 \\  CoT + Split-Based & 92.6 & 97.86 & 99.01 & 96.71 & 98.17 & 94.03 \\   

Table 6: **Transfer of Skill Exemplars to Other Datasets Investigation of skill transfer from GSM8K to different math word problem datasets using GPT-4-0613. Questions in the target dataset are labeled with corresponding skills from GSM8K, and in-context examples are selected based on skill-matching. The proposed approach achieves the highest accuracy in 4 out of 6 cases.**

    & **Example 1** & **Example 2** \\ 
**Question** & _Compute_\( 210^{0}\). & _Find_ & \(\{-25\}\) \\ 
**Topic-Based Solution** &  To solve the problem, we have to know that the trigonometric functions have period \(360^{-}\), \\ which means \(2120^{0}\) & \((210^{0})\) \\ \(180^{0}\) \\  &  The couple root of \(-25\) is not a real number, \\ \(180^{0}\) \\ \(810^{0}\) \\  & 
 \(36^{0}\), the sequence is trained. The ceiling function is available only to real numbers, therefore \\ this expression is underlined. \\  \\ 
**Skill-Based Solution** &  The angle \(210^{0}\) is \(30^{0}\) below the negative \\ \(\)axis, \( 210^{0}\) \\ \(-17.2\), \\ **shill Used**, **trigonometry**. \\  & 
 The cube root of \(-25\), \(3\)—25, equals \(\)2.92 approximately, since the ceiling function rounds up to the nearest integer greater than the given number, the value will be \(-2\). \\ **Shill Used**, **trigonometry**. \\  \\   

Table 7: **Instances Benefiting from Skill-Based Approach This table illustrates instances where our skill-based approach empowers the Language Model (LLM) to apply relevant skills effectively. Red-highlighted text reveals conceptual errors by the Topic-Based baseline, while blue-highlighted text showcases skillful and accurate skill application.**Our analysis reveals that the Topic-Based approach misapplies essential skills. For example, Table 7 shows a fundamental misunderstanding of trigonometry in Example 1 and fails to recognize negative cubes in Example 2. These errors are notably absent in the Skill-Based approach, demonstrating its superior understanding and application of key concepts.

**Occurrences of Incorrect Answers Despite Employing a Skill-Based Approach** We examine the limitations of the skill-based approach in Table 15 (appendix). This table highlights instances where the model, despite using a skill-based approach, fails to produce correct answers. We use blue to denote correct reasoning steps and red for errors.

In Example 1, both the Skill-Based and Topic-Based approaches correctly apply the logarithm formula but err in selecting the appropriate number or input, categorizing this error as a "main skill error" or "skill error." This demonstrates a failure in correctly applying the primary skill needed for the question, highlighting a limitation of the proposed approach. Example 2 further illustrates this limitation. Although the Skill-Based approach correctly uses counting concepts, it erroneously calculates the number of diagonals in a hexagon. This error indicates a shortfall in the application of certain secondary skills required to solve the problem such as, in this instance, understanding properties of a hexagon.

These examples suggest that while the Skill-Based approach effectively guides the application of the main skill required for a question, it may falter in the application of secondary skills or in the comprehension of specific question properties. This analysis underlines the approach's strengths in primary skill application but also its limitations in more nuanced or compound skill scenarios. It would be worthwhile to work with more complex skills.

**Additional Metrics** We introduce three metrics to evaluate the effectiveness of the proposed approach, using examples from the MATH dataset and employing GPT-4-0613 for classification. These metrics are: Main Skill Error (Skill Error): This indicates a failure in understanding or applying the primary skill required for a question, Secondary Skill Error: This denotes errors in comprehending or applying secondary skills necessary for the question, Calculation Error: This reflects mistakes in the calculation process during question-solving.

These error types are not mutually exclusive; a single instance may exhibit multiple error types. Correctly solved instances show none of these errors. GPT-4-0613's role in classifying examples into these categories is detailed in Appendix, Section 10.7, and its effectiveness is evidenced by the classifications in Table 15. To calculate the metrics, we first determine error rates for each error type and then derive success rates. These rates indicate how often the model correctly applies main and secondary skills, as well as performs calculations, across various questions.

Appendix Figure 4 displays the Skill Success Rate, Secondary Skill Success Rate, and Calculation Success Rate for both Skill-Based and Topic-Based approaches. We expect the skill-based in-context example selection to be useful for reducing main skill errors. Our hypothesis is supported by our findings, which show a higher Skill Success Rate for this approach. This suggests that the model more frequently uses the correct skill with the Skill-Based approach compared to the Topic-Based baseline. Additionally, the proposed approach also demonstrates effectiveness in reducing secondary skill errors and calculation errors, underscoring its overall superior performance.

### Multiple Skills

As demonstrated in the previous section, labeling exemplars with single skills poses challenges for questions that require multiple or compounded skills. In this section, we conduct a preliminary investigation into an approach which labels each exemplar with multiple skills.

We consider the MATH dataset for this experiment. We create the Skill Exemplar Repository in three steps. First, for skill labeling, we modify the prompt shown in Figure 2 (left) to instruct the model to output multiple skills required to solve each question. Next, we perform skill clustering by passing the list of skills to the LLM and instructing it to combine common skills into representative skills. This clustering process is repeated iteratively until there are a total of N skills in the repository, where N is a hyperparameter set to 150. Finally, in the skill relabeling step, we reassign all questions with skills from the clustered list, ensuring each question is labeled with multiple skills.

During inference, we label the inference questions with multiple skills derived from the clustered list of skills in the repository. We then fetch K in-context examples from the Skill Exemplar Repository that have the most skill overlap with each inference question.

We present the results in Table 8. We adopt the same setup as Table 2, which uses GPT-4-0613 and 4 in-context examples. We can see that the multiple skill approach outperforms the single skill approach thus showing its strong potential.

### Metacognitive Abilities beyond Math

We extend the proposed methodology for the problem of alignment via in-context learning . We use the just-eval dataset introduced in Lin et al.  for this experiment. To apply the proposed approach in this setup we first curate a skill exemplar respository of 5000 examples from the alpaca dataset , 1000 examples from the lima dataset , and 5000 examples from hh-rlhf red team dataset  using the same prompts mentioned in Figure 2. Next, we label the examples in the just-eval dataset with skills from the skill-exemplar repository using the prompt shown in Figure 2 (right). We present examples from the skill exemplar repository in Appendix Section 10.9.

Next, for answering each question in the just-eval dataset, we retrieve 3 in-context examples of the same skill as the question. For the baseline, we sample random examples from the skill-exemplar repository. We use the Mistral-7B  for these experiments. We report the metrics introduced in Lin et al. . Each of these metrics are computed by prompting GPT-4 to rate the LLM answer with a score from 1 to 5 based on the metrics mentioned in each column. The final score is calculated as the average score across all samples. We present the results in Table 9. We find that the proposed approach outperforms Random on alignment task thus showing its effectiveness in domains beyond math.

## 5 Discussion and Conclusion

We presented a framework for extracting metacognitive knowledge from Large Language Models in the form of skills that categorize questions in mathematical datasets based on concepts required to solve them. This led to a Skill Exemplar Repository, containing a list of mathematical question-answer pairs annotated with the respective skills needed (in the LLM's own estimation) for the solution. Leveraging this repository, we furnish pertinent in-context examples to Large Language Models (LLMs) for tackling previously unseen mathematical questions. Our experiments show substantial empirical enhancements across diverse mathematical datasets, ranging from grade-level math problems to intricate competition-level math challenges. The enhancements in performance via use of the repository also transfers to weaker LLMs.

One limitation of our methodology is that it assigns only one skill to each math question. As discussed in Section 4.4, mathematical problems often require a combination of a primary skill and various secondary skills. We leave design of a more advanced approach --say, using an LLM to create hierarchies of skills to assign multiple skills to each datapoint-- for future work.

While this paper primarily addresses in-context learning, our future goal is to extend these methodologies to improve all models through fine-tuning processes. Presently, our framework relies on the availability of advanced models like GPT-4. However, the skill discovery process improved in-context learning for GPT-4, which suggests that using skills to fine-tune GPT-4 may raise its capabilities. This hints more broadly at a path towards bootstrapping model capabilities -and not just in math--that seems worth exploring.

 
**Promping** & **Pre-Algebra** & **Geometry** & **Inter-Algebra** & **Algebra** & **Probability** & **Pre-Calculus** & **Num. Theory** & **Overall** \\  CoT + Skill-Based & 74.28 & 41.75 & 27.02 & 73.12 & 58.01 & 33.70 & 51.10 & 53.88 \\ CoT + Skill-Based (multiple skills) & 79.90 & 45.93 & 30.12 & 71.01 & 53.38 & 38.09 & 49.07 & 55.14 \\  

Table 8: **Multiple Skills for MATH**. In this table, we investigate labeling each question with multiple skills. We find that with multiple skills the proposed approach outperforms the single skill approach thus demonstrating the strong potential of multiple skill labeling.

   & **helpfulness** & **darity** & **factuality** & **depth** & **engagement** & **safety** \\  CoT + Random & 3.61 & 4.33 & 3.77 & 2.55 & 2.90 & 3.65 \\ CoT + Skill-Based & 3.73 & 4.40 & 3.89 & 2.64 & 3.01 & 3.78 \\  

Table 9: **Alignment**. We apply the proposed Skill-Based approach for task of alignment via in-context learning. We find that proposed Skill-Based approach outperforms the Random approach.

Acknowledgements

This research was enabled in part by compute resources provided by Mila (mila.quebec). AD would like to thank Nanda H Krishna for help with the main figure in the paper and Vedant Shah for proof reading and helpful discussions. AG will like to thank Daan Wierstra, Melvin Johnson, Siamak Shakeri, Murray Shanahan, John Quan, Theophane Weber, Olivier Tieleman, David Silver, Charles Blundell, Behnam Neyshabur, Ethan Dyer and Nicolas Heess for support and guidance.