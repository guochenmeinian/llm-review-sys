# Classification Diffusion Models:

Revitalizing Density Ratio Estimation

 Shahar Yadin   Noam Elata   Tomer Michaeli

Faculty of Electrical and Computer Engineering

Technion - Israel Institute of Technology

{shahar.yadin@campus,noamelata@campus,tomer.m@ee}.technion.ac.il

###### Abstract

A prominent family of methods for learning data distributions relies on density ratio estimation (DRE), where a model is trained to _classify_ between data samples and samples from some reference distribution. DRE-based models can directly output the likelihood for any given input, a highly desired property that is lacking in most generative techniques. Nevertheless, to date, DRE methods have failed in accurately capturing the distributions of complex high-dimensional data, like images, and have thus been drawing reduced research attention in recent years. In this work we present _classification diffusion models_ (CDMs), a DRE-based generative method that adopts the formalism of denoising diffusion models (DDMs) while making use of a classifier that predicts the level of noise added to a clean signal. Our method is based on an analytical connection that we derive between the MSE-optimal denoiser for removing white Gaussian noise and the cross-entropy-optimal classifier for predicting the noise level. Our method is the first DRE-based technique that can successfully generate images beyond the MNIST dataset. Furthermore, it can output the likelihood of any input in a single forward pass, achieving state-of-the-art negative log likelihood (NLL) among methods with this property. Code is available on the project's webpage.

## 1 Introduction

A classical family of methods for learning data distributions relies on the concept of density-ratio estimation (DRE) . DRE techniques transform the unsupervised task of learning the distribution of data into the supervised task of learning to classify between data samples and samples from some reference distribution [15; 4; 35; 7]. These methods have attracted significant research efforts over the years [27; 14; 35; 47], particularly for their inherent capability to directly output the likelihood for any given input. However, to date, they have not succeeded in capturing the distribution of complex high-dimensional data, like natural images. Instead, their generative performance was demonstrated only on low-dimensional toy examples and on the simple MNIST handwritten digits dataset [28; 35; 7]. As illustrated in Fig. 1, while the state-of-the-art DRE method, telescoping density-ratio estimation (TRE) , succeeds in capturing the distribution of the MNIST dataset , it fails on the slightly more complex CIFAR-10 dataset .

As opposed to DRE methods, denoising diffusion models (DDMs) [38; 19] have had unprecedented success in generative modeling of complex high-dimensional data, including images [9; 36], audio [25; 5], and video [12; 1]. This has made them perhaps the most prominent technique for learning data distributions in recent years, with applications in solving inverse problems [21; 37], image editing [33; 16; 3; 20] and medical data enhancement [44; 8], to name just a few. However, assessing the likelihood of data samples is a challenging task with DDMs; it requires many neural functionevaluations (NFEs) to calculate the likelihood-ELBO , or to approximate the exact likelihood using an ODE solver .

DDMs are based on minimum-MSE (MMSE) _denoising_, while DRE methods hinge on optimal _classification_. In this work, we develop a connection between the optimal classifier for predicting the level of white Gaussian noise added to a data sample, and the MMSE denoiser for cleaning such noise. Specifically, we show that the latter can be obtained from the gradient of the former. Utilizing this connection, we propose _classification diffusion model_ (CDM), a generative method that combines the formalism of DDMs, but instead of a denoiser, employs a noise-level classifier. CDM is the first instance of a DRE-based method that can successfully generate images beyond MNIST (Fig. 1). In addition, as a DRE method, CDM is inherently capable of outputting the exact log-likelihood in a single NFE. In fact, it achieves state-of-the-art negative-log-likelihood (NLL) results among methods that use a single NFE, and comparable results to computationally-expensive ODE-based methods.

Our experiments shed light on the reasons why DRE methods have failed on complex high-dimensional data to date, and why CDM inherently avoids these challenges. Furthermore, we show that CDM can serve as a more accurate denoiser, in terms of MSE, than a DDM with a similar architecture. This typically translates into better FID scores. Representative generated samples are shown in Fig. 1. We hope that our approach will spark new interest in DRE methods and ultimately unlock their full potential.

## 2 Background

### Density Ratio Estimation

Learning data distributions via DRE was first proposed by Gutmann and Hyvarinen . Their _noise contrastive estimation_ (NCE) method uses the fact that the ratio between an unknown distribution \(p_{d}()\) and a known reference distribution \(p_{n}()\) can be extracted from the optimal binary classifier for discriminating samples from \(p_{d}()\) and \(p_{n}()\). Once this ratio is extracted from the classifier, it can be multiplied by the known \(p_{n}()\) to obtain \(p_{d}()\). Specifically, let \(C\) denote the class of a sample \(\), with \(C=1,0\) corresponding to the event that \(\) is a sample from \(p_{d}(),p_{n}()\), respectively. The optimal classifier for predicting \(C\) from \(\) outputs both \((C=1|)\) and \((C=0|)\). Using Bayes' rule, we can use these values to compute the density ratio

\[()}{p_{n}()}=(C=1|)}{(C= 0|)}, \]

where we assumed that the classes are balanced, so that \((C=1)=(C=0)=\).

Figure 1: **Samples from CDMs (left) trained on CelebA \(64 64\) and on CIFAR-10, compared to samples from TRE models  (right) trained on MNIST and CIFAR-10.** To date, DRE methods have failed to capture the distributions of complex, high-dimensional data, and have been demonstrated only on toy examples or on the simple MNIST dataset. The right pane shows results from TRE, the state-of-the-art DRE method, which fails to capture the distribution of CIFAR-10. CDM is the first DRE-based method that can successfully learn the distribution of images.

Unfortunately, this method fails in practice when \(p_{d}()\) and \(p_{n}()\) differ significantly from one another, as is the case when \(p_{d}()\) is the distribution of images and \(p_{n}()\) corresponds to white Gaussian noise. This is because when training a classifier to discriminate between images and noise, the classifier can achieve very high accuracy even without learning meaningful information about images. When this point is reached, the weights of the classifier practically stop updating. Rhodes et al.  referred to this issue as the _density-chasm problem_, and suggested to overcome it by making the classification problem more difficult. To do so, their TRE method uses a sequence of distributions \(p_{_{0}}(),p_{_{1}}(),,p_{_{m} }()\), which are closer to one another, such that \(p_{_{m}}()\) is the reference distribution and \(p_{_{0}}()\) is the target distribution. The intermediate distributions \(\{p_{_{i}}()\}_{i=1}^{m-1}\) do not have to be known; the only requirement is that it would be possible to sample from them. For example, \(_{i}\) can be defined as \(_{i}=_{i}}_{0}+_{i} }_{m}\), where \(_{0} p_{_{0}}\), \(_{m} p_{_{m}}\), and \(_{i}\) is a sequence that decreases from 1 to 0. Then, using (1), each ratio \(p_{_{i}}()/p_{_{i+1}}()\) can be extracted by training a binary classifier to distinguish between samples from \(p_{_{i}}()\) and \(p_{_{i+1}}()\), and the ratio between the target and the reference distributions can be calculated as

\[_{0}}()}{p_{_{m}}()}=_{0}}()}{p_{_{1}}()}_{1 }}()}{p_{_{2}}()}_{m-2}}() }{p_{_{m-1}}()}_{m-1}}()}{p_{ _{m}}()}. \]

While this method overcomes the _density-chasm-problem_ for each pair of consecutive distributions, it still fails in learning the distribution of datasets that are more complicated than MNIST, as illustrated in Fig. 1. This is because each ratio \(p_{_{i}}()/p_{_{i+1}}()\) is extracted from a binary classifier trained only on inputs \(\) from the distributions \(p_{_{i}}\) and \(p_{_{i+1}}\). For instance, the classifier producing the ratio \(p_{_{0}}()/p_{_{1}}()\) is trained on inputs close to the real data, while the one producing \(p_{_{m-1}}()/p_{_{m}}()\) is trained on inputs close to the reference distribution. This can lead to a mismatch between training and test time, since at inference, all the ratios are evaluated at the same input \(\). Moreover, even if each individual ratio is nearly accurate, the accumulation of small errors can result in a significant overall error. Our method is also based on a classification objective, however it avoids these problems by employing an additional loss, which is based on our main result (Theorem 3.1).

### Denoising Diffusion Models

DDMs [38; 19], are a class of generative models that sample from a learned target distribution by gradually denoising white Gaussian noise. More formally, DDMs generate samples by attempting to reverse a forward diffusion process with \(T\) steps that starts from a data point \(_{0}\) and evolves as \(_{t}=}_{t-1}+}_{t}\), \(t=1,,T\), where \(\{_{t}\}\) are iid standard Gaussian vectors. Samples along this forward diffusion process can be equivalently expressed as

\[_{t}=_{t}}_{0}+_{t} }_{t},_{t}(0,), \]

where \(_{t}=_{s=1}^{t}_{s}\). The coefficients \(\{_{t}\}\) are taken to be such that \(\{_{t}\}\) is a monotonic sequence with \(_{T} 1\). This enforces the density \(p_{_{T}}\) to be close to the normal distribution \((0,)\).

The reverse diffusion process is learned by modeling the distributions of \(_{t-1}\) given \(_{t}\) as a Gaussian with mean

\[[_{t-1}|_{t}]=}}( _{t}-}{_{t}}}_{t}( _{t},t)) \]

and covariance \(_{t}\), where \(_{}(,)\) is a neural network and \(\{_{t}\}\) are fixed hyperparameters. Training is done by minimizing the ELBO loss, which reduces to a series of MSE terms,

\[()=_{t=1}^{T}_{_{0},_{t}} [\|_{}(_{t},t)-_{t}\|_{2}^{2} ]. \]

At convergence to the optimal solution, the neural network approximates the timestep-dependent posterior mean

\[_{}(_{t},t)=[_{t}|_{t}= _{t}]. \]

To generate samples, DDMs sample \(_{T}(0,)\) and then iteratively follow the learned reverse probabilities, terminating with a sample of \(_{0}\). In more detail, at each timestep \(t\), the model accepts \(_{t}\) and outputs a prediction of the noise \(_{t}\) (equivalently, a prediction of the clean signal \(_{0}\)), from which \(_{t-1}\) is obtained by sampling from the reverse distribution. The process described above is that underlying the DDPM method . Here we also experiment with DDIM  and DPM-Solver , which follow a similar structure.

## 3 Method

We start by deriving a relation between classification and denoising, and then use it as the basis for our CDM method. A summary of the notations we use can be found in App. A.

Let the random vector \(_{t}\) be defined as in (3) for timesteps \(t\{1,,T\}\) and set two additional timesteps, \(0\) and \(T+1\), corresponding to clean images and pure Gaussian noise, respectively. Namely, we define \(_{0}=1\) and \(_{T+1}=0\). We denote the density of each \(_{t}\) by \(p_{_{t}}()\). Our approach is based on training a classifier that takes as input a noisy sample \(_{t}\) and predicts its timestep \(t\). Formally, let \(\) be a discrete random variable taking values in \(\{0,1,,T+1\}\), with probability mass function \(p_{}(t)=(=t)\), and let the random vector \(}\) be the diffusion signal at a random timestep \(\), namely1\(}=_{}\). Note that the density of each \(_{t}\) can be written as \(p_{_{t}}()=p_{}}(|t)\) and by the law of total probability, the density of \(}\) is equal to

\[p_{}}()=_{t=0}^{T+1}p_{_{t}}()\,p_{ }(t). \]

We are interested in a classifier for predicting \(\) from \(}\). It is well known that given any sample \(\) drawn from (7), the optimal such classifier (in terms of the cross-entropy loss) outputs the probability vector \((p_{}}(0|),p_{}}(1|),,p_{}}(T+1|))\), where \(p_{}}(t|)=(=t| }=)\). As we now show, the denoiser in (6) corresponds to the gradient of this classifier.

**Theorem 3.1**.: _Let \(F(,t)=(p_{}}(T+1|))-(p_{ }}(t|))\) with \(\), \(}\) and \(_{t}\) as defined above. Then_

\[[_{t}|_{t}=_{t}]=_{t}} (_{_{t}}F(_{t},t)+_{t}) \]

_regardless of the choice of the probability mass function \(p_{}\), provided that \(p_{}(t)>0\) for all \(t\)._

The proof, provided in App. B.1, consists of three key steps:

* Using Bayes rule, we write \(p_{_{t}}()\) as a function of \(p_{_{T+1}}()\) and the optimal classifier.
* Then, we take the derivative of the log of both sides and use the fact that \(_{} p_{_{T+1}}()\) has a closed form solution.
* Finally, we use Tweedie's formula  to connect between \(_{} p_{_{t}}()\) and \([_{t}|_{t}=]\).

Theorem 3.1 suggests that we may train a classifier and use its gradient as a denoiser according to relation (8). This paradigm is illustrated in Fig. 2. Once we have constructed a denoiser, we can apply any desired sampling method (e.g. DDPM, DDIM, etc.) to generate images from the learned distribution. However, as we show in Sec. 4.1, naively training such a classifier with the standard

Figure 2: **A diagram of CDM (right) compared with DDM (left).** A DDM functions as an MMSE denoiser conditioned on the noise level, whereas a CDM operates as a classifier. Given a noisy image, a CDM outputs a probability vector predicting the noise level, such that the \(t\)-th element in this vector is the probability that the noise level of the input image corresponds to timestep \(t\) in the diffusion process. A CDM can be used to output the MMSE denoised image by computing the gradient of its output probability vector w.r.t the input image, as we show in Theorem 3.1.

cross-entropy (CE) loss leads to poor results. This is because a classifier may reach a low CE loss even without learning the correct probability \(p_{}}}(t|)\) for any \(t\). This phenomenon can be observed in Fig. 3, which illustrates the reason that existing DRE methods fail to capture the distribution of high-dimensional complex data like images. We discuss this in more detail in Sec. 4.1.

To obtain the correct probability \(p_{}}}(t|)\) for any \(t\), we suggest training the classifier with a combination of a CE loss on its outputs, and an MSE loss on its gradient, according to relation (8). The network's gradient can be efficiently computed using automatic-differentiation. Following Ho et al. , we use the same weight for all timesteps in the MSE loss. Our full training scheme is described in Algorithm 1. Here, \(f_{}()[t]\) denotes the model's \(t\)-th logit, which serves as an approximation for \( p_{}}}(t|)\) (up to an additive constant that cancels out in the SoftMax operation), and \(F_{}(,t)=f_{}()[T+1]-f_{}()[t]\). The added timesteps, corresponding to entries \(0\) and \(T+1\) of the classifier, are trained only using the CE loss. This is because the prediction of the noise is trivial when \(=T+1\) and meaningless when \(=0\) (since there is no noise). Importantly, this behavior is automatically achieved without any modification to the algorithm. Specifically, in line 4 of the algorithm, \(F_{}(_{T+1},T+1)=0\), and in line 5, \(_{}(_{0},0)=0\), preventing the MSE loss from updating the weights for these timesteps.

```
0: Dataset of training samples \(\)
1:repeat
2:\(_{0}\), \(t U\{0,,T+1\}\), \((0,)\)
3:\(_{t}=_{t}}_{0}+_{t}}\)
4:\(F_{}(_{t},t)=f_{}(_{t})[T+1]-f_{}(_{t})[t]\)
5:\(_{}(_{t},t)=_{t}}(_{_{t}}F_{}(_{t},t)+_{t})\)
6: take gradient step on
7:\(w_{ce}_{}(t,f_{}(_{t}))+_{ }(,_{}(_{t},t))\)
8:until converged
```

**Algorithm 1** CDM Training

Algorithm 2 shows how to generate samples with CDM using the DDPM sampler (a similar approach can be used with other samplers). Note that each step \(t\) in DDPM sampling using CDM is given by

\[_{t-1}=}_{t}-}{} }_{_{t}}F_{}(_{t},t)+_{t}z, \]

where \(z(0,)\). Therefore, each step steers the process in the direction that maximizes the probability of noise level \(t\), while minimizing the probability of noise level \(T+1\). This can be thought of as taking a gradient step with size \((1-_{t})}\), followed by a step in a random exploration direction with magnitude \(_{t}\), similarly to Langevin dynamics.

### Exact Likelihood Calculation in a Single Step

To compute the likelihood of a given sample, DDMs are required to perform many NFEs in order to compute a lower bound on the log likelihood using the ELBO , or can approximate the exact likelihood  using an ODE solver based on repeated evaluations of the network. In contrast, as a DRE-based method, a CDM is able to calculate the exact likelihood in a single NFE. In fact, a CDM can compute the likelihood w.r.t. the distribution \(p_{_{t}}\) of noisy images, for any desired timestep \(t\). Specifically, we have the following (see proof in App. B.3)

**Theorem 3.2**.: _For any \(t\{0,1,,T+1\}\),_

\[p_{_{t}}()=}(T+1)}{p_{}(t)}\, }}}(t|)}{p_{}}}(T+1|)}\,(;0,), \]

_where \((;0,)\) is the probability density function of a standard multivariate Gaussian distribution._

Note that the first term in (10) only depends on the pre-selected probability mass function \(p_{}\) (which we choose to be uniform in our experiments), and the second term can be obtained from the \(t\)-th and \((T+1)\)-th entries of the vector at the output of the classifier (after applying SoftMax). This impliesthat we can calculate the likelihood of any given image \(\) w.r.t. to the density \(p_{_{t}}\) of noisy images for any noise level \(t\). In particular, \(p_{_{0}}\) is the density of clean images. Thus, by choosing \(t=0\) we can calculate the likelihood of clean images. In App. D we present a simple validation of our efficient likelihood computation by applying it to toy examples with known densities, allowing us to compute the analytical likelihood and verify that our computations align with theoretical expectations.

## 4 Experiments

We train several CDMs on two common datasets. For CIFAR-10  we train both a class conditional model and an unconditional model. We also train a similar model for CelebA , using face images of size \(64 64\). In Sec. 4.1, we demonstrate why existing DRE methods fail on complex high-dimensional data like images, and show how the incorporation of the MSE loss in our method, according to Theorem 3.1, overcomes these challenges. In Sec. 4.2, we compare our method with pre-trained DDMs with similar architectures, to disentangle the benefits of our method from other variables. We evaluate the performance of CDM as a denoiser, assess its generation quality using FID , and measure its likelihood modeling capabilities using NLL. Finally, in Sec. 4.3, we demonstrate the use of different noise schedulers, one specifically tuned for likelihood estimation, and one corresponding to the flow matching optimal-transport scheme [29; 30]. We show that incorporating these schedulers into our method leads to state-of-the-art NLL results among methods capable of outputting the likelihood in a single forward pass.

### The Importance of Using Both Losses for Achieving an Optimal Classifier

In Theorem 3.1, we established that the MMSE denoiser corresponds to the gradient of the optimal noise-level classifier. A natural question is whether we can train our model only with the MSE loss. Unfortunately, the answer is negative. This is because the MSE achieved by the model does not change if we add a function of \(t\) to its output, as such an additive term vanishes when taking the gradient with respect to \(\). The CE loss is important for removing this degree of freedom. Namely, without the CE loss, the model can function as a denoiser but is useless for the purpose of outputing the likelihood in a single step.

Can we train the model only with the CE loss, then? In theory, training the model only with the CE loss should be sufficient. However, as we will demonstrate next, incorporating MSE is crucial in practice for achieving an optimal classifier.

Table 1 reports the MSE, CE and classification accuracy achieved by models trained with different losses. We emphasize that the model trained using only MSE in this comparison, is a CDM model trained using Algorithm 1, and is not equivalent to a DDM model trained using (5). As evident from

Figure 3: **Comparison between the log probability of a noise-level classifier trained using the CE loss alone and a model trained using CE and MSE.** Since the SoftMax operator is invariant to an additive factor, we subtract the maximal value from the vector (i.e., \(f_{}(_{t}) f_{}(_{t})-(f_{}(_{t}))\)) for visualization. We utilize the connection we developed between the optimal classifier and the MMSE denoiser to incorporate the MSE loss in DRE training, as depicted in Algorithm 1. As evident, without considering MSE, the prediction accuracy of the classifier is limited to the vicinity of the correct label, unlike the model trained using both CE and MSE, which yields accurate predictions globally. The essence of an optimal classifier lies in its capability to predict the correct probability vector for all entries, rather than solely for the correct label. As can be seen, this necessitates the incorporation of the MSE loss.

the table, when using only the CE loss, the MSE is high, and when using only the MSE loss the CE and classification accuracy are poor. An important point to notice is that even when training with the CE loss, the classifier's accuracy is rather low (though greater than the \(0\%\) achieved when training only with the MSE loss). This is a key prerequisite for making DRE methods work. Specifically, as shown in , the classification problem should be sufficiently hard in order to avoid the _density-chasm problem_, otherwise the classifier can easily discriminate between the classes even without having learned the correct density ratio. Yet, as we illustrate next, only making the classification problem harder is still insufficient for learning the probability \(p_{}}(t|)\) with only the CE loss.

Figure 3 shows the logits \(f_{}(_{t})\) for noisy images with different noise levels, comparing a model trained using CE to a model trained with both CE and MSE. As can be seen, in both scenarios the prediction near the true label is the same, namely the CE works well in the vicinity of the correct noise level. However, the model trained without the MSE loss exhibits significantly higher predicted logits for more distant noise levels compared to the model trained using both CE and MSE. Moreover, the logits of the model trained without MSE do not decrease monotonically as the distance from the actual noise level increases, which is in contrast with the expected behavior. This demonstrates the importance of the MSE loss for obtaining good prediction globally. As can be seen in Theorem 3.1, the denoiser at timestep \(t\) depends on the predictions of the classifier in both the \(t\)-th and the \((T+1)\)-th entries. Therefore, the addition of the MSE loss enforces the classifier to achieve accurate predictions in both entries, thereby ensuring accurate predictions globally.

### Denoising Results, Image Quality and Negative Log Likelihood

We compare our method with pre-trained DDMs of similar architectures. Since CDM is a classifier and DDM is a timestep-conditional denoiser, we take the architecture of our CDM to be identical to the DDM, except for altering the last two layers to output a vector of logits, and removing all timestep conditioning layers. These changes have a negligible effect on the number of parameters in the model. For more details please refer to App. C.

As shown in Fig. 4, the denoising performance of our CDM surpasses that of pre-trained DDMs at high noise levels, and is comparable to them at lower noise levels. These quantitative results are corroborated by the qualitative examples in Fig. 5, which showcase image denoising results across various noise levels.

The good denoising performance of CDM translates into high quality image generation. This is illustrated qualitatively in Fig. 1, which shows samples from models trained on CelebA and on CIFAR-10 (unconditional). To quantitatively compare the generation quality of CDM to that of pre-trained DDMs, we use 50k FID  against the train-set. For both CDMs and DDMs, we compare images sampled using the DDPM , DDIM , and DPM-Solver (DPMS)  samplers, using 1000, 50, and 25 timesteps, respectively. The results, shown in Table 2, demonstrate that CDM is at least comparable to pre-trained DDMs in image quality, outperforming them in most cases.

Additionally, we evaluate CDM's effectiveness in applying classifier-free guidance (CFG)  for conditional sampling tasks. As expected, incorporating CFG improves image quality beyond unconditional generation, as reflected in the conditional CIFAR-10 FID results of Table 2. More details and qualitative results are provided in Appendix C.5. These results showcase the effectiveness of CDM for image generation, showing it to be equal or better than a similar DDM.

   Training & Classification Acc \(\) & CE \(\) & MSE \(\) & FID \(\) & NLL \(\) \\ Loss & & & & & \\  CE & 6.97\% & 4.49 & 0.225 & 329 & 8.27 \\ MSE & 0\% & 1659 & **0.028** & 7.65 & 9.32 \\ Both & **8.34\%** & **4.37** & **0.028** & **7.56** & **3.38** \\   

Table 1: **The importance of using both losses in CDM.** We demonstrate the importance of using both the CE and MSE losses at training. We report the results for CIFAR-10 test-set. FID is reported on 50k samples which were generated using DDIM scheduler with 50 steps. As shown by Rhodes et al. , to avoid the _density-chasm problem_, the classification problem should be sufficiently hard to avoid trivial classifier solutions. This leads to low classification accuracy results.

Finally, we calculate log-likelihoods and compare our NLL results to recent leading methods in Table 3. CDM demonstrates comparable performance on NLL estimation for CIFAR-10 compared to DDMs. Notably, CDM stands out as a more efficient method than existing ones, requiring only a single forward pass for NLL computation. Table 3 also includes CDM(unif.), and CDM(OT) on which we elaborate in Sec. 4.3 below. These variants of our model, improve the NLL predictions and achieve state-of-the-art results among methods requiring a single step.

### Different Noise Scheduling for Better Likelihood Estimation

To see the effect of using a timestep scheduler tuned for DRE tasks, we repeat the CIFAR-10 unconditional experiment, with a different noise scheduler. Following Rhodes et al.  we use the scheduler defined as \(_{t}}=\) and choose \(T=1000\) similarly to our previous experiments. Utilizing this scheduler, we achieve a better NLL of 2.98 at the expense of a higher FID of 10.28, when using the DDIM sampler with 50 steps. This trade-off highlights that the scheduler optimal for learning the data distribution may not be ideal for sampling.

To further explore the influence of the noise scheduler, we train and evaluate a CDM with the flow-matching optimal-transport (OT) scheduler  on unconditional CIFAR-10. In this scheduler, \(_{t}=_{0}+_{t}\), where \(_{t}(0,)\) and \(t\{0,,T\}\). This scheduler leads to a state-of-the-art single-step NLL of 2.89 and to an FID of 7.07 with 1000 sampling steps. Please see App. B.4 for more details.

Future research could explore schedulers aimed at further enhancing the NLL. Further analysis of the difference between the schedulers from a classification perspective can be found in App. E.2

## 5 Related Work

Using the concept of DRE for learning data distributions was initially studied by Gutmann and Hyvarinen . Their noise contrastive estimation (NCE) method approximates the ratio between the density of the data distribution and that of white Gaussian noise. However, it struggles in practical scenarios where the gap between these distributions is large, as is the case for natural images . Conditional noise contrastive estimation (CNCE)  is a slightly improved version of NCE, in which

Figure 4: **Denoising performance. The plots show the MSEs (top) and the ratio between the MSEs (bottom) achieved by a pre-trained DDM and by a CDM with the same architecture, as a function of the noise level (timestep \(t\)). The CDM significantly outperforms the pre-trained DDM at high noise levels, while demonstrating comparable performance at lower noise levels.**

Figure 5: **Denoising results. The figure depicts a comparison between denoising results on the CelebA dataset for several different noise levels, obtained with a CDM and with a pre-trained DDM with the same architecture. The right column shows the models’ predictions for pure Gaussian noise, which should theoretically be the expectation of the prior distribution. As observed, DDM outputs a highly noisy image, whereas CDM generates an image much closer to the mean of the dataset.**

the classification problem is designed to be harder. Specifically, CNCE is based on training a classifier to predict the order of a pair of samples with closer densities, e.g. achieved by pairing a data sample with its noisy version.

Telescoping density-ratio estimation (TRE), proposed by Rhodes et al. , avoids direct classification between data and noise. Instead, it uses a gradual transition between those two distributions, and trains a classifier to distinguish between samples from every pair of adjacent densities. Such a classifier learns the ratio between adjacent distributions, and the overall ratio between the data and noise distributions is computed by multiplying all intermediate ratios.

Choi et al.  extended this idea from a finite set of intermediate densities to an infinite continuum. This was accomplished by deriving a link between the density ratios for infinitesimally close distributions and the principles of score matching [23; 40; 42], motivating the training of a model to predict the time score \( p_{_{t}}\). In contrast, we draw a different connection which shows that an MMSE denoiser can be obtained as the gradient of an optimal noise level classifier. Also, to obtain the log ratio between the target and reference distributions, Choi et al.  need to solve an integral over the time-score using an ODE solver, while in our method this ratio can be calculated in a single NFE.

Yair and Michaeli  extended the concept of TRE, proposing the training of a single noise level classifier instead of training a binary classifier for each pair of neighboring densities. While this method is conceptually similar to ours, our approach distinguishes itself by incorporating the MSE loss as outlined in Theorem 3.1. As demonstrated in our experiments, this proves to be crucial for achieving an optimal classifier and high-quality image generation.

## 6 Discussion and Conclusion

We developed an analytical connection between an MSE-optimal denoiser for removing white Gaussian noise and a cross-entropy-optimal classifier for predicting the noise level. We used this connection to propose CDM - a DRE based generative technique that is based on a noise-level classifier. Importantly, our classifier is trained using both a classification loss (CE) and a regression loss (MSE). We showed that this key component is what sets CDM apart from existing DRE based methods, and makes it the first instance of a DRE-based technique that can successfully generate images beyond MNIST.

   Sampling Method & Model \\  CelebA \(64 64\) & DDM & CDM \\  DDIM Sampler, 50 steps & 8.47 & **4.78** \\ DDPM Sampler, 1000 steps & 4.13 & **2.51** \\
2nd order DPMS, 25 steps & 6.16 & **4.45** \\  Uncond CIFAR-10 & DDM & CDM \\  DDIM Sampler, 50 steps & **7.19** & 7.56 \\ DDPM Sampler, 1000 steps & 4.77 & **4.74** \\
2nd order DPMS, 25 steps & **6.91** & 7.29 \\  Cond CIFAR-10 & DDM & CDM \\  DDIM Sampler, 50 steps & 5.92 & **5.08** \\ DDPM Sampler, 1000 steps & 4.70 & **3.66** \\
2nd order DPMS, 25 steps & 5.87 & **4.87** \\   

Table 2: **Image generation quality.** We compare the FID (lower is better) achieved by a DDM and a CDM using three sampling schemes for CelebA and CIFAR-10. For conditional CIFAR-10 we train a DDM ourselves, as no model in the original implementation  supports CFG.

   Model & NLL \(\) & NFE \\  iResNet  & 3.45 & 100 \\ FFJORD  & 3.40 & \(\)3K \\ MintNet  & 3.32 & 120 \\ FlowMatching  & 2.99 & 142 \\ VDM  & **2.65** & 10K \\ DDPM (\(L\))  & \(\)3.70 & 1K \\ DDPM (\(L_{simple}\))  & \(\)3.75 & 1K \\ DDPM (SDE)  & 3.28 & \(\)200 \\ DDPM++ cont.  & 2.99 & \(\)200 \\  RealNVP  & 3.49 & 1 \\ Glow  & 3.35 & 1 \\ Residual Flow  & 3.28 & 1 \\ CDM & 3.38 & 1 \\ CDM(unif.) & **2.98** & 1 \\ CDM(OT) & **2.89** & 1 \\   

Table 3: **NLL (bits/dim) calculated on the CIFAR-10 test-set.** For each model we specify the number of NFEs required for calculating the NLL. CDM achieves state-of-the-art NLL among methods that use a single NFE.

Our approach is not free of limitations. A key challenge is that CDMs can be more computationally expensive than DDMs. Indeed, while DDMs require a single forward pass for each denoising step, CDMs require both a forward pass and a backward pass. Nevertheless, the computational cost of performing a forward and a backward pass through a network depends on its architecture. In this work, we chose to use the same architecture as that used by DDPM , in order to isolate the impact of our algorithmic approach from the choice of the model architecture when comparing to DDMs. However, an important future direction would be to explore architectures that are particularly optimized for CDMs and that alleviate the gap in computational complexity. Such architectures should have the property that performing a forward pass and a backward pass through them is computationally similar to performing only a forward pass in a regular DDM. This could potentially be achieved _e.g._, by relying only on the encoder part of the U-Net. However, we leave this exploration for future work.

Broader ImpactCDM is a generative model and thus may potentially suffer from the same limitations as other generative techniques. These include biases in the generated images, as well as malicious and offensive use, such as creating Deepfakes for disinformation. However, CDMs may also impact domains that rely on generative models in a positive way. This is because, different from most generative models, CDMs are able to compute the likelihood for any input in a single step. This may be used _e.g._, for out-of-distribution detection or for ranking the likelihoods of different restored images in image restoration tasks. Such capabilities may be crucial in fields like medical imaging.