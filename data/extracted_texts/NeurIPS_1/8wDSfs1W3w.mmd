# Formal Representation and Solution of Plane Geometric Problems

Xiaokai Zhang, Na Zhu, Cheng Qin, Yang Li, Tuo Leng

School of Computer Engineering and Science

Shanghai University

tleng@shu.edu.cn

Corresponding Author

Zhenbing Zeng

College of Sciences

Shanghai University

###### Abstract

Geometric problem solving has always been a long-standing challenge in the fields of mathematical reasoning and artificial intelligence. In this paper, we present formallgeo7k, a geometric problem dataset based on rigorous geometry formalization theory and consistent geometry formal system, serving as a benchmark for various tasks such as geometric diagram parsing and geometric problem solving. All problems are annotated with problem text, problem diagram, formal descriptions, and solution. Combining symbolic solver and deep learning techniques, we can achieve human-like, traceable and explainable solutions, which are stored in a hypergraph for graph-related tasks. We experiment with various methods and the best method achieves only 86.40% on formalgeo7k. This shows that formalgeo7k presents a challenge for future research.

## 1 Introduction

Geometric problem solving (GPS) has always been a long-standing challenge  in the fields of mathematical reasoning and artificial intelligence, owing to the cross-modal forms of knowledge and the absence of automated solving methods. A typical geometric problem consists of a textual problem description and a geometric diagram. GPS requires solvers to possess multimodal fusion and reasoning capabilities, which have attracted much attention recently. Existing works mostly construct a neuro-symbolic system for GPS. Deductive Database (DD) methods  parse the problem text and diagram into formal language and then solve the problem by logical reasoning. Program sequence generation (PSG) methods  encode the problem text and diagram, input the encoding into a decoder, and generate a program sequence, which is then executed by a program executor.

However, existing methods focus on the research of the neural part while neglecting the symbolic part. First, existing methods fail to achieve a human-like problem-solving process. DD methods cannot eliminate redundant theorems, and PSG methods lack mathematical rigor. This not only undermines the readability of the solutions but also limits their application in mathematics education. Second, existing methods lack research on geometry formalization theory. This not only fails to ensure the consistency of the solver's reasoning process but also hinders the expansion of symbolic systems. Defining new theorems requires modifying the solver's code, making it difficult to represent more complex problems, such as problems at International Mathematical Olympiad (IMO) level. Furthermore, existing datasets are small in scale and cannot serve as benchmarks for training and evaluating large language model (LLMs). Some datasets are poorly annotated or contain errors, making them unsuitable as a unified benchmark.

To address these issues, we develop FormalGeo, a consistent geometry formal system based on rigorous geometry formalization theory . We further construct the formalgeo7k dataset, which contains 7,000 geometric problems. All problems are annotated with problem text, problem diagrams, formal descriptions, and solutions, as shown in Fig. 1. This dataset can serve as a benchmark for various tasks, such as GPS, geometric diagram parsing (GDP), geometric relation extraction (GRE), geometric problem formalization and the evaluation of LLMs reasoning abilities.

To assess the dataset difficulty, we experiment with several methods and the best method only achieves 86.40% problem solving success rate (PSSR). This shows that formaldehyde7k presents a challenge for future research.

## 2 formaldehyde7k dataset

We present formaldehyde7k, a geometric problem dataset based on rigorous geometry formalization theory and consistent geometry formal system, serving as a benchmark for various tasks such as geometric diagram parsing and geometric problem solving. All code and datasets are open-source and available at [https://github.com/FormalGeo/FormalGeo](https://github.com/FormalGeo/FormalGeo). Refer to Appx. D for instructions on how to use _pip_ to build FormalGeo formal systems and download formaldehyde7k.

### Geometry formal system

We build FormalGeo, a consistent geometry formal system based on rigorous geometry formalization theory . FormalGeo incorporates diagrammatic reasoning, algebraic computation, relational reasoning, and logical operations into a unified framework of geometry predicate logic, whose syntax is similar to first-order predicate logic. Within this formal framework, we can transform geometric diagrams and text into a consistent formal language, which not only maintains good readability but can also be mechanically processed by computer. The final solution of geometric problems can be represented as hypergraph, where conditions serve as hypernodes and theorems as hyperedges, thus transforming into a human-like solution. In addition, FormalGeo uses geometry definition language (GDL) to define new predicates or theorems and uses condition declaration language (CDL) to describe geometry problems, making it extremely convenient to extend the formal system and represent complex problems. Details of GDL are provided in Appx. A. A formal representation and solution of a 2022 IMO geometry problem can be found in Appx. B.

Figure 1: An example of annotated geometric problem in formaldehyde7k.

### Dataset annotation

Our formaldehyde7k Dataset contains 7,000 plane geometric problems, sourced from the Geometry3K  (40.69%), GeoQA  (53.38%), and GeoQA+  (2.93%). Our annotation task can be divided into four parts: 1. Standardizing the style of problem texts (English and Chinese). For problems lacking English or Chinese descriptions, we add the missing descriptions. 2. Redrawing geometric diagrams using GeoGebra and saving the _.gbb_ files, which contains detailed positional information of the geometric elements. 3. Annotating geometric diagrams and texts using FormalGeo formal language. 4. Adding the theorem sequences required to solve the geometric problems.

Once the problems are annotated, we assign a different annotator to review and verify the correctness of the annotations. Finally, all problems are input into a symbolic solver FGPS  to check the correctness of the syntax, ensure that the annotated theorems can solve the problem and eliminate redundant theorems. By treating the intermediate results of a problem as a new goal, we can decompose a geometric problem into multiple sub-problem, automatically expanding the number of problems to tens of thousands. This results in a dataset with a smoother difficulty curve, and the number of problems becomes sufficient for training and evaluating LLMs.

Sixteen trained graduate master's students participated in the dataset annotation tasks. The annotation and reviewing process took approximately 1,500 person-hours.

### Dataset Statistics

Our dataset has 7,000 geometric problems. Each problem text (English) has a maximum of 444 characters and a minimum of 58 characters, with an average problem text length of 114.22. The construction CDL describes the topological structure of a geometric problem, and the number of its statements roughly reflects the complexity of the geometric diagram. The average length of construction CDL statements is 5.97. Both text CDL and image CDL describe the conditions of the geometric problem, with the average number of statements being 4.02 and 2.87, respectively. In the text CDL, the most frequently occurring predicates are _Equal_ (61.04%), _IscentreOfCircle_ (9.67%), _PerpendicularBetweenLine_ (8.69%), _ParallelBetweenLine_ (4.92%), and _IsTangentOfCircle_ (3.22%). In the diagram CDL, The proportions of _Equal_, _PerpendicularBetweenLine_, and _ParallelBetweenLine_ are 80.95%, 12.16%, and 6.89%, respectively. The number of theorems required for GPS serves as an measure of the difficulty of the problem. Each problem involves a maximum of 28 theorems and a minimum of 1 theorems, with an average theorem number of 4.34. The detailed statistical information can be found in Appx. C.

## 3 Experiments

### Benchmark methods

We tested several methods on formaldehyde7k. It is important to note that most SOTA models for GPS are trained in specific symbolic environments (such as those provided by Geometry3K  or GeoQA ), and adapting them to the FormalGeo would require significant manual effort. Therefore, we only compare methods using the FormalGeo environment. All methods use annotated text CDL and image CDL as input to the model. Parsing CDL from the original problem diagram and text is still a challenge, and we leave it for future work.

**Forward Search**. This is a purely symbolic approach. It starts from the initial conditions of the problem and continuously apply theorems to derive new conditions until the goal is achieved. We run the forward search method using four different strategies (breadth-first, depth-first, random and beam) and presented the results of the best strategy (random). The maximum search depth is set to 15, the beam size to 20, and the timeout for each problem is set to 600 seconds.

**Backward Search**. This is a purely symbolic approach. It begins with the problem-solving goal, expands it into multiple sub-goals, and repeats this process until all sub-goals are resolved. The best strategy for the backward search is breadth-first, with the other parameters set the same as in the forward search. We run the search method on two Intel i9-10900X processors, one AMD Ryzen 9 5900X, and one AMD Ryzen 9 7950X, using multiple processes while maintaining a CPU utilization rate of 80%. The total duration of the search is approximately 3 days.

**FGeo-TP**. This method utilizes the language model to predict the theorem sequences for GPS, reducing the search complexity. We chose BART-base  as the theorem predictor. The training epochs were set to 20, with an initial learning rate of \(3 10^{-5}\). After theorem prediction, we ran the backward search method using a random strategy.

**FGeo-DRL**. This method leverages a pre-trained natural language model to establish a policy network for theorem selection and employ monte carlo tree search for heuristic exploration. We chose DistilBERT  as the policy network to learn how to select a theorem from a 234 action space for the current problem step. The implementation details and training methods are consistent with those in the original paper.

**HyperGNet**. This method builds a neural-symbolic system to effectively embed geometry knowledge and automatically perform human-like geometric problem solving. We train HyperGNet on a single GeForce RTX 4090. During the model's training phase, we optimize the model parameters using the Adam algorithm, with a learning rate of \(10^{-5}\), batch size of 64 and training epochs of 50. Executing a single training session of the neural network only require approximately 30 minutes.

### Experimental results

To provide a more detailed comparison of different models' capabilities, we divided the dataset into 6 levels based on the length of the theorem sequence \(l\) required to solve the problem: \(L_{1}(l 2)\), \(L_{2}(3 l 4)\), \(L_{3}(5 6)\), \(L_{4}(7 l 8)\), \(L_{5}(9 10)\), \(L_{6}(l 11)\). The experimental results are shown in Tab. 1.

It is evident that the longer the theorem sequence required to solve the problem, the higher the difficulty and the lower PSSR. We can see that, compared to traditional search methods, heuristic search combined with deep learning techniques has significantly improved the problem-solving success rate. FGeo-DRL achieved the highest overall PSSR, but its performance on solving difficult problems was lacking. HyperGNet, while slightly behind FGeo-DRL in overall PSSR, performed better on more challenging problems.

## 4 Related Work

The study of GPS has a long history, which can be broadly divided into algebraic methods and synthetic methods. Algebraic methods transform geometric problems into a system of algebraic equations consisting of polynomials and inequalities, such as Wu's method , Grobner basis methods  and elimination methods . Synthetic methods encompass a wider range of approaches, including search-based methods [8; 16], knowledge-based methods , geometric invariants-based methods [34; 6], and machine Learning and optimization methods [23; 1; 20]. GPS has seen further advancements in recent years. Existing methods predominantly integrate deep learning and symbolic reasoning to construct a neuro-symbolic system for solving geometric problems. DD methods parse the problem text and diagram into formal language and then solve the problem by logical reasoning. Representative DD methods include Inter-GPS , GeoDRL , AlphaGeometry , FGeo [40; 9] and E-GPS . PSG methods encode the problem text and diagrams, input the encoding into a decoder, and generate a program sequence, which is then executed by a program executor. Representative PSG methods include NGS , Geoformer , DPE , PGPSNet , SAC-GPS , UniMath , LANS , DualGeoSolver  and adaptive learning model . Several geometry formal systems and datasets have been developed. We compared existing datasets with formalgeo7k, as shown in Tab. 2. In addition to geometric problem solving, tasks such as geometric diagram parsing  and geometric formalization  have also begun to attract increasing attention.

  Method & Total & \(L_{1}\) & \(L_{2}\) & \(L_{3}\) & \(L_{4}\) & \(L_{5}\) & \(L_{6}\) \\  Forward Search & 39.71 & 59.24 & 40.04 & 33.68 & 16.38 & 5.43 & 4.79 \\ Backward Search & 35.44 & 67.22 & 33.72 & 11.15 & 6.67 & 6.07 & 1.03 \\ FGeo-TP & 80.86 & 96.43 & 85.44 & 76.12 & 62.26 & 48.88 & 29.55 \\ FGeo-DRL & 86.40 & 97.65 & 94.21 & 85.87 & 70.45 & 46.81 & 32.18 \\ HyperGNet & 85.53 & 95.44 & 89.46 & 84.25 & 77.84 & 50.00 & 45.76 \\  

Table 1: Details of PSSR.

## 5 Conclusion

Based on rigorous geometry formalization theory and a consistent geometry formal system, we developed formaldehyde7k, a dataset containing 7,000 annotated geometry problems, including problem text, problem diagrams, formal descriptions, and solutions. formaldehyde7k serves as a benchmark for various tasks such as geometric diagram parsing and geometric problem solving, directly benefiting both AI4MATH and AI4EDU research. Experimental results indicate that formaldehyde7k presents a challenge for future research.