# Neural Characteristic Activation Analysis and

Geometric Parameterization for ReLU Networks

 Wenlin Chen

University of Cambridge

MPI for Intelligent Systems

wc337@cam.ac.uk

&Hong Ge

University of Cambridge

hg344@cam.ac.uk

###### Abstract

We introduce a novel approach for analyzing the training dynamics of ReLU networks by examining the _characteristic activation boundaries_ of individual ReLU neurons. Our proposed analysis reveals a critical instability in common neural network parameterizations and normalizations during stochastic optimization, which impedes fast convergence and hurts generalization performance. Addressing this, we propose _Geometric Parameterization (GmP)_, a novel neural network parameterization technique that effectively separates the radial and angular components of weights in the hyperspherical coordinate system. We show theoretically that Gmp resolves the aforementioned instability issue. We report empirical results on various models and benchmarks to verify GmP's advantages of optimization stability, convergence speed and generalization performance.

## 1 Introduction

In standard neural networks, each neuron performs an affine transformation on its input \(^{n}\) followed by an element-wise nonlinear activation function \(g\):

\[z=g(^{}\,+b), \]

where the affine transformation is parameterized by a weight vector \(^{n}\) and a bias scalar \(b\). Rectified Linear Unit (ReLU)  is arguably the most popular activation function in modern deep learning architectures due to its simplicity and effectiveness:

\[g(s)=(s)=(0,s). \]

We introduce a novel concept for ReLU networks, called _characteristic activation boundary_, which is defined as the set of input locations with zero pre-activations. By definition, such boundaries separate the active and inactive regions of ReLU neurons in the input space, which play a critical role in ReLU networks since they serve as the fundamental building blocks for the decision boundaries.

In this work, we analyze the evolution dynamics of the characteristic activation boundaries in ReLU networks. Our novel analysis identifies a critical instability in many common parameterizations and normalizations that operate in the Cartisian coordinate, including Standard Parameterization, Weight Normalization , Batch Normalization  and Layer Normalization . We show theoretically that this issue destabilizes the evolution of the characteristic boundaries in the presence of stochastic gradient noise, and empirically that it impedes fast convergence and hurts generalization performance. To address this, we introduce a novel neural network parameterization, named _Geometric Parameterization (GmP)_. As opposed to traditional parameterizations and normalizations which operate in the Cartesian coordinate, GmP operates in the hyperspherical coordinate which automatically decouples the radial and angular components of the weights. Our theoretical results show that GmP stabilizes the evolution of characteristic activation boundaries during stochastic optimization. Our empiricalstudies confirm the efficacy of GmP on various models and benchmarks. We report notable empirical improvements in optimization stability, convergence speed, and generalization performance, which validate our hypotheses and theoretical results.

## 2 Neural Characteristic Activation Analysis for ReLU Networks

This section defines characteristic activation boundary and its geometric connection to ReLU features, which serve as the basics of the proposed analysis for understanding neural network training dynamics.

### Preliminary and Terminology

**Standard Parameterization (SP)** refers to the weight-bias parameterization as defined in Eq (1).

**Weight Normalization (WN)** is a reparameterization technique that decouples the length \(l\) and the direction \(}}{{\|\|_{2}}}\) of \(\) in a standard ReLU unit (1):

\[z=(l(}{\|\|_{2}})^{}+b). \]

WN makes the length \(l\) and the direction \(}}{{\|\|_{2}}}\) of the weight vector independent of each other in the Cartesian coordinate system, which is effective in improving the conditioning of the gradients and thus speeding up optimization.

**Batch Normalization (BN)** is a widely-used normalization layer in modern deep learning architectures such as ResNet , which is effective in accelerating and stabilizing stochastic optimization of neural networks . BN standardizes the pre-activation using the empirical mean and variance estimated by mini-batch statistics:

\[(^{}\,+b)=^{ }\,-}_{}[^{} \,]}{}_{}[^{} \,+b]}}+, \]

where \(,\) are two free parameters to be learned from data, which adjusts the output of the BN layer as needed to increase its expressiveness.

### ReLU Characteristic Activation Boundary

Noticing that the ReLU activation function (2) is active for positive arguments \(s>0\) and inactive for negative arguments \(s<0\), we introduce a novel concept called _characteristic activation boundary (CAB)_ at the cut-off point \(s=0\) (i.e., the point with zero pre-activations), which will play a central role in our proposed characteristic activation analysis.

**Definition 2.1** (Cab).: The _characteristic activation boundary (CAB)_ for a ReLU unit is defined by the set of input locations with zero pre-activations:

\[(,b)=\{^{n}:^{ }\,+b=0\}. \]

A CAB is an \((n-1)\)-dimensional hyperplane that separates the active and inactive regions of a ReLU unit in the input space \(^{n}\). Fig 1(a) visualizes a CAB in \(^{2}\).

**Definition 2.2** (Spatial location).: The _spatial location_ of a CAB is defined as

\[(,b)=-}{^{}\, }=-\|_{2}}}{\|\|_{2 }}, \]

which is a point on the corresponding CAB since \(^{}\,+b=0\). Not that the vector that goes from the origin to \(\) specifies the shortest path between the origin and the CAB. Therefore, each spatial location uniquely determines a CAB. Fig 1(a) visualizes the spatial location of a CAB in \(^{2}\). CABs play a critical role in ReLU networks, since they effectively specify the locations of ReLU features (i.e., non-linearities) which serve as the building blocks for the decision boundaries.

### Instability of Characteristic Activation Boundary During Stochastic Optimization

In the presence of stochastic gradient noise, we identify an instability issue in the evolution of CABs under common neural network parameterizations and normalizations.

**Proposition 2.3** (Instability of SP).: _A perturbation \(\) to the weight \(\) under SP (1) can result in an arbitrarily large change in the angular direction of the CAB if \(\) has a similar magnitude to \(\)1._

Proof.: The change in the angular direction of the CAB under SP is given by

\[,+( ^{}(+)}{\|\|_{2}\|+\|_{2}}). \]

Since \(\) has a similar magnitude to \(\), in the extreme case one can construct a small perturbation \(=-(1+)\,\) with an infinitesimal \(\). Then, the angular change is \(,+=,-\,=\), which rotates the CAB by \(180^{}\). 

In general, the angle \(,+\) can take arbitrary values in \([0,]\) even for a small perturbation \(\). This indicates that CABs are vulnerable to small perturbations when \(\) has a small norm1. This has the implication that even a small gradient noise could destabilize the evolution of ReLU features during stochastic optimization and thus destroy the learning signal for the decision boundaries of the network. Such instability could prevent practitioners from using larger learning rates .

It might be tempting to think that WN does not suffer from this issue as it decouples the length and the direction of \(\) as in Eq (3). However, we show that WN can also be vulnerable to small perturbations.

**Proposition 2.4** (Instability of WN).: _A perturbation \((,^{})\) to (\(\),\(l\)) under WN (3) can result in an arbitrarily large change in the angular direction of the CAB if \(\) has a similar magnitude to \(\)._

Proof.: The change in the angular direction of the CAB under WN is given by

\[ l}{\|\|_{2}},(l+^{}) +}{\|+\|_{2}} (^{}(+)}{\|\| _{2}\|+\|_{2}}), \]

which has an identical form to Eq (7). Therefore, in the extreme case one similarly construct a small perturbation \(=-(1+)\,\) with an infinitesimal \(\), which rotates the CAB by \(180^{}\). 

Furthermore, BN can also suffer from this instability issue as it can be viewed as a generalized version of weight normalization.

**Proposition 2.5** (Instability of BN).: _Without loss of generality, assume that the input \(\) has zero mean. A perturbation \(\) to the weight \(\) under BN (4) can result in an arbitrarily large change in the angular direction of the CAB if \(\) has a similar magnitude to \(\)._

Proof.: Since \(}_{}[^{}\,]=^ {}\,}_{}[]=\) by assumption, Eq (4) can be re-written as

\[(^{}\,\!+\!b)=^{ }\,}{^{}}\, }}+=(}{\|\|_{}}})^{}\!+\!, \]

where the norm \(\|\|_{}}\) is with respect to the data covariance matrix \(}=}[]\) estimated by mini-batch statistics. It can be seen that Eq (9) has the same form as WN (3) except that WN fixes \(=\). Therefore, the instability argument for WN in the proof of Proposition 2.4 also holds for BN. It is worth noting that the same proof technique can be used to show instability for Layer Normalization (LN) , which is another normalization technique widely used in Transformers , since BN and LN have identical functional form (4) except that the expectation and variance operators in LN are applied to the feature axis rather than the batch axis. 

Figs 1(b)-1(e) simulate the evolution behaviors of the CABs under SP and WN in \(^{2}\), showing that even a small perturbation \(\) of magnitude \(10^{-3}\) can drastically change the spatial locations of the CABs. More generally, this instability issue exists in many neural network parameterization and normalization techniques that operate in the Cartesian coordinate, since the fundamental issue is that the change in angular direction of the CAB always has the same unstable form as in Eq (7).

## 3 Geometric Parameterization

This section introduces a novel _Geometric Parameterization (GmP)_ and demonstrates its nice theoretical property, eliminating the instability issue in common parameterizations and normalizations.

### Characteristic Activation Boundary in the Hyperspherical Coordinate System

In a high dimensional input space, most data points live in a thin shell since the volume of a high dimensional space concentrates near its surface . Intuitively, the spatial locations of CABs should be close to the thin shell where most data points live, since this spatial affinity between CABs and data points will introduce ReLU features (non-linearities) at suitable locations in the input space to separate different inputs \(\) by assigning them different activation values. The use of hyperspherical coordinate enables us to explicitly control the locations of such non-linearities.

**Definition 3.1**.: The spatial location of a CAB in the hyperspherical coordinate system is given by

\[(,)=-\,(), \]

where the radius \(\) corresponds to \(}{{\|\|_{2}}}\) in SP, and the unit directional vector \(()\) corresponds to \(\|_{2}}}{{\|\|_{2}}}\) in SP and is determined by the angle \(=[_{1},,_{n-1}]^{}\):

\[()=(_{1})\\ (_{1})(_{2})\\ (_{1})(_{2})(_{3})\\ \\ (_{1})(_{2})(_{n-2})(_{n-1})\\ (_{1})(_{2})(_{n-2})(_{n-1}) . \]

\(() S^{n-1}\) is a unit directional vector on the unit hypersphere \(S^{n-1}\{^{n}:\|\|_{2}=1\}\).

**Definition 3.2**.: The CAB in the hyperspherical coordinate system is given by

\[(,)=\{^{n}:( {})^{}\,\!+\!=0\}. \]

Geometrically speaking, the angle \(\) controls the direction of a CAB, while the radius \(\) controls the distance between the origin and the CAB. Calculating the pre-activation of a ReLU unit for an input \(\) is equivalent to projecting \(\) onto the unit vector \(()\) and then adding the radius \(\) to the signed norm of the projected vector. From this perspective, it is clear that a CAB is a set of inputs whose projections over \(()\) have signed norm \(-\). For this reason, we refer to this radial-angular decomposition in the hyperspherical coordinate system as _Geometric Parameterization_ (GmP).

### Geometric Parameterization for ReLU Networks

**Definition 3.3** (GmP).: A ReLU unit under geometric parameterization (GmP) is given by

\[z=r(()^{}\,+ ), \]

where \(r,,\) are three learnable parameters. The radial and angular parameters \(\) and \(=[_{1},,_{n-1}]\) specify the spatial location of the CAB, while the scaling parameter \(r\) controls the scale of the activation. These parameters have \(n+1\) degrees of freedom in total (same as SP).

**Remark 3.4** (Computational cost).: Let \(n\)=fan-in and \(m\)=fan-out for a layer. GmP needs to compute \(2n-2\) more scalars \([(_{1}),,(_{n-1}),(_{1}),,( _{n-1})]\) than SP for each of the \(m\) neurons, which incur an extra cost of \((mn)\) for all neurons in a layer. However, since the cost of computing the affine transformation for each layer is also \((mn)\), the total computational cost of GmP remains \((mn)\) for each layer, which is identical to SP.

**Remark 3.5** (Layer-size independent parameter initialization).: Unlike existing neural network parameterizations which are sensitive to initialization, GmP can work with less carefully chosen initialization schemes independent of the width of the layer, thanks to an invariant property of the hyperspherical coordinate system. To see this, we first consider the distribution of the angular direction of the CAB under SP. Under popular initialization methods such as the Glorot initialization  and He initialization , each element in the initial weight vector \(\) under SP is independently and identically sampled from a zero mean Gaussian distribution with a layer-size dependent variance. Interestingly, this always induces a uniform distribution over the unit \(n\)-sphere for the direction of the CAB, no matter what variance value is used in that Gaussian distribution. This allows us to initialize the angular parameter \(\) uniformly at random by sampling from the von Mises-Fisher distribution [63; 65]. The parameter \(\) is initialized to zero due to its connection \(=}{{\|\|_{2}}}\) to SP and the common practice to set \(b=0\) at initialization. The scaling parameter \(r\) is initialized to one, based on the intuition that the scale roughly corresponds to the total variance of the weights \(\) in SP. We highlight that none of the parameters \(\), \(\), and \(r\) in GmP requires layer-size dependent initialization.

**Remark 3.6** (Internal covariate shift).: One implicit assumption of our characteristic activation analysis is that the input distribution to a neuron always centers around the origin during training. This assumption automatically holds for one-hidden-layer networks since the training data can be centered during data pre-processing. However, this assumption is not necessarily satisfied for multi-hidden-layer networks, since the inputs to an intermediate layer are transformed by the weights and squashed by the activation function in the previous layer. We propose a simple technique called Input Mean Normalization (IMN), which is a _parameter-free_ layer that centers the input to each intermediate layer using the empirical mean estimated by mini-batch statistics:

\[z=r(()^{}(- }[])+). \]

It might be tempting to think that IMN is similar to Mean-only Batch Normalization (MBN) . However, we emphasize that MBN is unable to address the internal covariate shift problem as it is applied to pre-activations rather than post-activations.

### Theoretical Analysis

Section 2.3 identified an instability in the evolution of CABs under common parameterizations and normalizations due to a fundamental issue in the Cartesian coordinate system. In contrast, CABs under GmP is much more stable under perturbation, since the radius \(\) and angle \(\) of the spatial location \(\) are automatically disentangled in the hyperspherical coordinate system. This means that small perturbations to the parameters in GmP will only cause small changes in the spatial location of the CAB. Below, we show that under a small perturbation, the change in the angular direction of a CAB under GmP is bounded by the magnitude of the perturbation.

**Theorem 3.7**.: _With an infinitesimal perturbation \(:=[_{1},,_{n-1}]^{}\) to the angular parameter \(\), the change in the angular direction \(() S^{n-1}\)\((n 2)\) of a CAB under GmP is bounded by_

\[(),(+ )(()^{}\,(+) )=^{2}+_{i=2}^{n-1}(_{j=1}^{i-1} ^{2}(_{j}))_{i}^{2}}\| \|_{2}. \]The proof of Theorem 3.7 can be found in Appendix B, which is based on an elegant idea from differential geometry that the angle \((),(+)\) is simply the norm \(_{_{}}\) of the perturbation with respect to the metric tensor \(_{}\) for the hyperspherical coordinate, which is bounded by \(\|\|_{2}\). This implies that optimizing the geometric parameters in GmP directly translates into a smooth evolution of the spatial locations of CABs even in the presence of stochastic gradient noise. Looking back at Figs 1(b)-1(e), we can see that CABs under GmP gradually moves away from its original spatial location as we increase \(\), which is in sharp contrast to the unstable evolution of CABs under other parameterizations.

## 4 Empirical Evaluation

This section contains empirical evaluation of GmP with neural network architectures of different sizes on both illustrative demonstrations and more challenging machine learning classification and regression benchmarks. A more detailed setup for each experiment can be found in Appendix C2.

Figure 2: (a)-(b) Characteristic activation point \(\) (intersection of brown solid lines and the x-axis) and spatial location \(=- u()\) of a ReLU unit \(z=(u()x+)\) (blue solid lines) for inputs \(x\). Green arrows denote active regions, and red arrows denote inactive regions. (c) Evolution dynamics of the characteristic points \(\) in a one-hidden-layer network with 100 ReLU units for a 1D Levy regression problem under SP, WN, BN and GmP during training. SP stands for standard parameterization, WN stands for weight normalization, BN stands for batch normalization, and GmP stands for geometric parameterization. Smaller values are better as they indicate higher stability of the evolution of the characteristic points during training. The y-axis is in \(_{2}\) scale. (d)-(g): The top row illustrates the experimental setup, including the network’s predictions at initialization and after training, and the training data and the ground-truth function (Levy). Bottom row: the evolution of the characteristic activation point for the 100 ReLU units during training. Each horizontal bar shows the spatial location spectrum for a chosen optimization step, moving from the bottom (at initialization) to the top (after training with Adam). More spread of the spatial locations covers the data better and adds more useful non-linearities to the model, making prediction more accurate. Regression accuracy is measured by root mean squared error (RMSE) on a separate test set. Smaller RMSE values are better. We use cross-validation to select the learning rate for each method. The optimal learning rate for SP, WN, and BN is lower than that for GmP, since their training becomes unstable with higher learning rates, as shown in (c).

Figure 3: Performance of a single-hidden-layer neural network with 10 ReLU units on the 2D Banana classification dataset under SP, WN, BN and GmP trained using Adam. SP stands for standard parameterization, WN stands for weight normalization, BN stands for batch normalization, and GmP stands for geometric parameterization. (a)-(h): Trajectories of the spatial locations of the 10 ReLU units during training. Each color depicts one ReLU unit. Smoother evolution means higher training stability. The evolution under GmP is stable, so we can use a \(10\) larger learning rate. (i): Evolution dynamics of the angular direction \(\) of CABs. Smaller values are better as they indicate higher robustness against stochastic gradient noise. (j)-(m): Network predictions after training. Black bold lines depict the classification boundary between two classes. Classification accuracy is measured on a separate test set. Higher accuracy values are better. The red stars show the spatial locations of 10 ReLU units. Intuitively speaking, more evenly spread out red stars are better for classification accuracy, as they provide more useful non-linearity.

### Illustrative Experiments

This section verifies the validity of the hypotheses of our proposed characteristic activation analysis on two illustrative experiments aided with visualization, and demonstrates that the improved stability under GmP is beneficial for neural network optimization and generalization.

#### 4.1.1 1D Levy Regression

In Fig 2, we train a one-hidden-layer network with 100 ReLU units under SP, WN, BN and GmP on the 1D Levy regression dataset using Adam . As shown in Figs 2(a)-2(b), both the CAB \(\) and its spatial location \(\) reduce to the same point in \(\), which will be referred to as the characteristic activation point. The angle \(\) of the characteristic activation point can only take two values \(0\) or \(\) corresponding to the two directions on the real line. To use GmP in 1D, \(\) is initialized to \(0\) or \(\) uniformly at random and fixed throughout training. Clearly, GmP significantly improves the stability of the evolution of the characteristic activation point and allows us to use a \(10\) large learning rate as selected by cross validation. Fig 2(c) shows that the maximum change \(_{i}|_{i,t}|=_{i}|_{i,t+1}-_{i,t}|\) under GmP is always smaller than one throughout training at each train step \(t\), which allows small but consistent updates to be accumulated. In contract, the changes under other parameterizations can be up to \(2^{16}\) at some steps. Such abrupt and huge changes of spatial locations make the evolution of the spatial locations inconsistent. Consequently, it is much harder for optimizers to allocate those activations to the suitable locations during training. In addition, many activations are allocated to the regions that are far away from the data region and cannot be seen in Figs 2(d)-2(f), and these activations become completely useless. The stable evolution of the characteristic point under GmP leads to improved optimization stability and generalization performance (i.e., the best test RMSE) on this task, as shown in Figs 2(d)-2(g).

#### 4.1.2 2D Banana Classification

In Fig 3, we train a one-hidden-layer network with 10 ReLU units under SP, WN, BN and GmP on the 2D Banana classification dataset using Adam. Figs 3(a)-3(h) show that GmP allows us to use a \(10\) larger learning rate (as selected by cross validation) while maintaining a smooth evolution of the characteristic activation boundary. Fig 3(i) shows that GmP is the only method that guarantees stable updates for the angular directions of the CAB during training with a large learning rate: under GmP, the maximum change \(_{i}|_{i,t}|=_{i}|_{i,t+1}-_{i,t}|\) at each train step \(t\) remains low throughout training, while under other parameterizations the change can be up to \(180^{}\) at some steps. This verifies the hypothesis in our proposed characteristic activation analysis. Figs 3(j)-3(m) show that under GmP, the spatial locations of CABs move towards different directions during training and spread over all training data points in different regions, which forms a classification decision boundary with a reasonable shape that achieves the best generalization performance (i.e., the highest test accuracy) among all compared methods.

### Machine Learning Benchmarks

This section evaluate GmP on common machine learning regression and classification benchmarks with a variety of neural network architectures, demonstrating its broad applicability.

#### 4.2.1 UCI Regression with MLP

We evaluate GmP on 7 regression problems from the UCI dataset . We train an MLP with one hidden layer and 100 hidden units for 10 different random 80/20 train/test splits. We use the Adam optimizer  with cross-validation. We find that the optimal learning rate is \(0.1\) for GmP and \(0.01\) for all the other methods. Table 1 shows that for in most cases, GmP consistently achieves the best test RMSE on all benchmarks, significantly outperforming other methods.

   Benchmark & Boston & Concrete & Energy & Neural & Power & Wine & Yedit \\  SP & \(3.370 0.145\) & \(5.472 0.144\) & \(0.898 0.274\) & \(0.002 0.000\) & \(4.065 0.029\) & \(0.623 0.008\) & \(0.639 0.063\) \\ WN & \(3.459 0.156

#### 4.2.2 ImageNet32 Classification with VGG

We evaluate GmP with a medium-sized convolutional neural network VGG-6  on ImageNet32 , which contains all 1.3M images and 1,000 categories from ImageNet (ILSVRC 2012) , but with the images resized to \(32 32\). We follow the experimental setup for optimization and data augmentation as in . This provides insights into how the batch size and intermediate normalization layer affect the empirical convergence speed and generalization performance of different parameterizations. We use cross-validation and find that the optimal initial learning rate is \(0.1\) for GmP and \(0.01\) for all the other methods. Table 2 shows that GmP+IMN consistently achieves the best top-1 and top-5 validation accuracy for all batch sizes considered. Furthermore, the improvement of GmP+IMN over other methods gets larger as the batch size increases, highlighting the robustness and scalability of GmP with large batch sizes. In addition to achieving the best performance, Fig 4 shows that GmP+IMN (the green curve) also converges significantly faster than other compared methods: its top-5 validation accuracy converges within 25 epochs, which is 10 epochs earlier than the second best method BN. The ablation study GmP vs GmP+IMN shows that IMN significantly improves the performance of GmP, which is expected since it addresses the problem of covariate shifts between hidden layers. Notably, Wide ResNet (WRN 28-2)  trained with BN and a batch size of 500 only achieved \(43.08\%\) top-1 validation accuracy as reported in , underperforming VGG-6 trained with GmP+IMN (\(43.62\%\) as shown in Table 2). This reveals the significance of better parameterizations: _even a small non-residual network like VGG-6 with GmP+IMN can outperform large, wide residual networks like WRN 28-2_.

#### 4.2.3 ImageNet Classification with ResNet

We evaluate GmP with a large residual neural network, ResNet-18 , on the full ImageNet (ILSVRC 2012) dataset , which consists of 1,281,167 training images and 50,000 validation images that contain objects from 1,000 categories. The size of the images ranges from \(75 56\) to \(4288 2848\). We follow the experimental setup for optimization and data augmentation as in . Specifically, we use the SGD optimizer with momentum 0.9 and reduce the learning rate by \(0.1\) at epochs 30, 60 and 80. All models are trained for 90 epochs. We use a batch size of 256 for all methods. We use cross-validation and find that the optimal initial learning

   Metric &  &  \\   Batch size & 256 & 512 & 1024 & 256 & 512 & 1024 \\  SP & \(38.31 0.13\) & \(36.99 0.11\) & \(35.02 0.03\) & \(62.48 0.14\) & \(60.71 0.18\) & \(58.14 0.39\) \\ WN & \(39.13 0.10\) & \(37.92 0.12\) & \(36.17 0.03\) & \(63.28 0.02\) & \(61.93 0.09\) & \(60.16 0.18\) \\ WN+MBN & \(42.22 0.01\) & \(40.96 0.02\) & \(39.33 0.07\) & \(66.04 0.07\) & \(65.08 0.03\) & \(63.32 0.08\) \\ BN & \(42.79 0.03\) & \(41.90 0.19\) & \(41.39 0.02\) & \(67.17 0.08\) & \(66.50 0.25\) & \(65.89 0.06\) \\
**GmP** & \(40.76 0.09\) & \(41.65 0.09\) & \(41.29 0.08\) & \(65.08 0.08\) & \(65.76 0.05\) & \(65.49 0.06\) \\
**GmP+IMN** & \(\) & \(\) & \(\) & \(\) & \(\) & \(\) \\   

Table 2: Top-1 and top-5 validation accuracy (\(\%\)) for VGG-6 trained on ImageNet32.

Figure 4: Convergence speed for VGG-6 trained on the ImageNet32 dataset with batch size 1024.

   Metric & Top-1 valid. acc. & Top-5 valid. acc. \\   WN+MBN & \(66.57 0.16\) & \(86.69 0.11\) \\ BN & \(66.85 0.05\) & \(86.92 0.02\) \\
**GmP+IMN** & \(\) & \(\) \\   

Table 3: Single-center-crop validation accuracy (\(\%\)) for ResNet-18 trained on ImageNet (ILSVRC 2012).

rate is \(0.1\) for all compared methods. We employ random horizontal flip, random resizing (256-480) with preserved aspect ratio, random crop (224), and color augmentation for data augmentation during training . To address the internal covariate shift problem, we employ IMN for GmP. Following , MBN is used for WN. The result of SP is not reported as BN is used in ResNet by default. Table 3 reports the single-center-crop top-1 and top-5 validation accuracy for all compared methods, which shows that GmP+IMN significantly outperforms BN and WN+MBN in terms of both top-1 and top-5 validation accuracy. This demonstrates that our method is useful for improving large-scale residual network training.

## 5 Related Work

### Neural Network Training Dynamics

Neural Tangent Kernels (NTKs) [25; 36] show that wide networks evolve like linear models during training, while Neural Network Gaussian Processes (NNGPs) [49; 35] provide insights into how wide neural networks generalize.  studies the evolution of the Hessian spectrum of neural networks during training.  investigates the curvatures of different principle components around the optimum of a regularized linear autoencoder. [1; 32; 70] analyze the training dynamics with natural gradient descent (NGD); see Appendix D for a discussion of the connection between GmP and NGD.  investigates the effectiveness of stochastic gradient descents for neural network training. [23; 60; 57; 71; 6; 37; 72; 38; 50; 54; 33; 62; 30] study the effects of Adam, BN and weight decay on training dynamics. [64; 26] study the failure cases in joint training of deep ensembles. [7; 53; 34; 5; 43] investigate the training dynamics of distributed optimization with different client subsampling schemes. [48; 52; 13; 14; 19; 20; 12; 55] pay special attention to analyzing the ReLU activations in neural networks. In contrast, our proposed characteristic activation analysis studies the evolution of the characteristic activation boundaries during stochastic optimization.

### Neural Network Parameterization and Normalization

In addition to SP, WN  and BN , there are many other neural network normalization and parameterization techniques. Instead of normalizing the batch axis as in BN, Layer Normalization (LN)  operates on the feature axis, which is preferred for small batches or variable-length inputs such as text . Other variants of BN include Switchable Normalization  and Instance Enhancement Batch Normalization . There are also normalization techniques designed for specific applications. For instance, Instance Normalization  and Group Normalization  are special cases of LN designed for CNNs, while Spectral Normalization [47; 69] is specifically designed for GANs and transformers. All these methods operate in the Cartesian coordinate. The instability argument for BN also holds for these methods since they have a similar form to BN except that they normalize the input tensors along different axes. Besides, there is also a line of research on learning orthogonal rotation matrices for the weight vector [42; 40; 41; 51]. In contrast, our proposed Geometric Parameterization (GmP) overcomes the instability issue by operating in the hyperspherical coordinate.

## 6 Conclusion

We presented a novel characteristic activation analysis for understanding the training dynamics of ReLU networks, which exploits special activation values to characterize ReLU units. Using the proposed analysis, we identified a critical instability in common neural network parameterizations and normalization techniques that operate in the Cartesian coordinate. Addressing this, we proposed a new parameterization called Geometric Parameterization (GmP) which operates in the hyperspherical coordinate. We demonstrated the theoretical advantages of GmP for ReLU networks. We performed empirical evaluations to verify our analysis, showing its improved training stability, convergence speed and generalization performance on a variety of tasks with different neural network architectures. More broadly, we believe that the general idea behind our proposed analysis of viewing neural network parameters from a different perspective has the potential to reveal new research directions for the study of neural network optimization and training dynamics. Limitations and potential future work directions are discussed in Appendix E.