# SLIM: Style-Linguistics Mismatch Model for

Generalized Audio Deepfake Detection

 Yi Zhu &Surya Koppisetti &Trang Tran &Gaurav Bharaj

Reality Defender Inc.

{yi,surya,trang,gaurav}@realitydefender.ai

###### Abstract

Audio deepfake detection (ADD) is crucial to combat the misuse of speech synthesized by generative AI models. Existing ADD models suffer from generalization issues to unseen attacks, with a large performance discrepancy between in-domain and out-of-domain data. Moreover, the black-box nature of existing models limits their use in real-world scenarios, where explanations are required for model decisions. To alleviate these issues, we introduce a new ADD model that explicitly uses the **S**tyle-**L**inguistics **M**ismatch (SLIM) in fake speech to separate them from real speech. SLIM first employs self-supervised pretraining on only real samples to learn the style-linguistics dependency in the real class. The learned features are then used in complement with standard pretrained acoustic features (e.g., Wav2vec) to learn a classifier on the real and fake classes. When the feature encoders are frozen, SLIM outperforms benchmark methods on out-of-domain datasets while achieving competitive results on in-domain data. The features learned by SLIM allow us to quantify the (mis)match between style and linguistic content in a sample, hence facilitating an explanation of the model decision.

## 1 Introduction

The growing interest in generative models has led to an expansion of publicly available tools that can closely mimic the voice of a real person . Text-to-speech (TTS) or voice conversion (VC) systems can now be used to synthesize a fake voice from only a few seconds of real speech recordings . When these generation tools are used by bad actors, the generated fake human voices (hereinafter referred to as _audio deepfakes_) can pose serious dangers. Examples include impersonation of celebrities/family members for robocalls , illegal access to voice-guarded bank accounts , or forgery of evidence in court . Reliable audio deepfake detection (ADD) tools are therefore urgently needed.

State-of-the-art (SOTA) detection systems  employ self-supervised learning (SSL) encoders as the frontend feature extractors, and append classification backends to map the high-dimensional feature representations to a binary real/fake decision . Common SSL encoders for this task are the Wav2vec , WavLM , and HuBert , among others. These models are usually trained in a fully-supervised manner, with fake samples generated using off-the-shelf TTS/VC tools . However, current ADD systems are known to underperform on deepfakes crafted by unseen generative models (i.e., _unseen attacks_) . To tackle this issue, some works have focused on extracting more robust features from the input representation . Additional improvements have been reported by finetuning the SSL frontend during downstream supervised training  and by increasing the diversity of labeled samples via data augmentation or continual training on vocoded data . While shown to be effective for in-domain deepfakes, frontend finetuning increases the cost of training drastically.

Additionally, outputs from existing ADD systems are hard to explain, i.e., it is unclear to a typical user why an ADD makes a certain prediction, which leads to lack of trust [93; 34]. For practical applications, it is crucial to understand what information the model is relying on to make decisions, and under which circumstances the model would fail to successfully detect deepfakes. A group of works uses explainable AI (xAI) methods  to interpret model decisions [21; 32; 36], but they mainly rely on _post-hoc_ visualizations such as saliency maps, which are known to be sensitive to training set-ups  and can therefore be inconsistent. Other models focus on specific vocal attributes, such as breath , or vocal tract  to derive explanations. However, most of these interpretable attributes only account for a subset of deepfake-related characteristics, hence resulting in a large gap in detection performance compared to SOTA methods [93; 34]. We note that while "interpretability/explainability" is often ambiguous , in this work we mean the model's ability to provide reasons for a certain prediction, e.g., a sample is likely fake because its style and linguistics representations are more misaligned than those of real samples (as will be shown in Section 4.2).

In this study, we propose a generalizable ADD model that explicitly explores the style-linguistics mismatch in deepfakes to separate them from real audios, and thereby facilitates an explanation on the model decision. We hypothesize that in real speech, a certain dependency exists between the _linguistics_ information embedded in the verbal content and the _style_ information embedded in the vocal attributes, such as speaker identity and emotion. To synthesize a deepfake audio, both TTS and VC systems artificially combine the verbal content with the vocal attributes of a target speaker, and thereby introduce an artificial style-linguistics dependency that would differ from the real speech. Our two-stage framework explicitly studies the Style-LInguistics Mismatch (SLIM) in the fake class to separate it from the real class. During Stage 1, the style-linguistics dependency in the real class is learned by contrasting the style and linguistic subspace representations and generating a set of dependency features from each subspace. The learned pairs of style and linguistics features are expected to be more correlated for real speech than for deepfake speech. In Stage 2, we employ supervised training, where we fuse the learned dependency features from Stage 1 with the original style and linguistic representations and train a light-weight projection head to classify the input representations as real or fake.

Our main contributions are summarized as follows:

1. We propose SLIM model, which leverages Style and LInguistics Mismatch in deepfakes to achieve better generalization to unseen attacks than existing models, and has interpretation capability.
2. SLIM outperforms existing SOTA methods on out-of-domain datasets (In-the-wild, MLAAD) while being competitive on in-domain datasets (ASVspoof2019, 2021). This is achieved without increasing the amount of labeled data or the added cost from end-to-end finetuning.
3. Unlike black-box ADD models, the style-linguistics features learned by SLIM can be used to interpret model decisions. We present analyses to show how the interpretation can be performed on a group level as well as on individual speech samples.

## 2 Related works

### Audio deepfake detection

State-of-the-art ADD systems mainly rely on fully-supervised training, where the model architectures comprise of one or more speech SSL frontends and a backend classifier [93; 2; 45]. Guo et al.  developed a multi-fusion attentive classifier to process the output from a WavLM frontend; Yang et al.  fused outputs from multiple SSL frontends and reported improvements over using a single frontend. However, existing ADD systems experience severe degradation in performance when tested on unseen data [51; 67], which questions their applicability and trustworthiness for real-world scenarios. To address this issue, multiple works have explored methods to improve model generalizability. With added training cost, improvements have been reported when frontends are finetuned alongside the backend classifiers during downstream training [71; 81]. Further improvements were achieved with data augmentations such as RawBoost [70; 71] and neural vocoding . More recent works also show that distilled student models can generalize better than large teacher models [43; 83]. Still, large discrepancies between in-domain and out-of-domain performance are common [93; 34].

In addition to generalization, existing ADD models also fall short on interpretability. Several studies have shown that current SOTA models may be focusing on artifacts introduced in the frequency domain during voice synthesis and/or the artifacts in non-speech segments [67; 50; 40; 96]. While a line of work proposed to extract speech-related features, such as breath , vocal tract, and articulatory movement , the overall detection performance was inferior to SSL-based methods. Other works resort to xAI methods  for model interpretation, such as SHAP , GradCAM , and Deep Taylor . However, these post-hoc analysis approaches are known to be sensitive to training set-ups  and therefore not viable for practical use. Both generalization and interpretability remain challenging issues for current ADD systems.

### Style-linguistics modelling

One standard approach for modelling speech is to decompose it into two subspaces, style and linguistics. The former refers to short and long-term paralinguistic attributes, such as speaker identity, emotion, accent, and health state . The latter corresponds to the verbal content of speech . For representing style information, early works relied on handcrafted features, such as GeMAPS [19; 18]. Later studies showed improved performance by representations learned end-to-end by deep neural networks (DNN), such as the x-vector  and ECAPA-TDNN embeddings . Similarly, the linguistic representations follow a similar trend where DNN-based embeddings, such as Whisper , outperform handcrafted features for content-related tasks . More recent studies have shown that style and linguistics information can be efficiently encoded together in the SSL representations [7; 11; 25]. To investigate how speech information is encoded in DNNs, a group of works conducted layer-wise analysis and showed that early to middle layers carry more style related attributes, such as speaker identity , emotion , and articulatory movement ; while later layers encode linguistics attributes, such as phonetic information and semantics [55; 66].

Despite these approaches, it is unclear if completely disentangling style and linguistics information in speech is possible. Studies have shown that a certain dependency exists between these two subspaces: the link between emotional states and word choices , the relation between prosody and language understanding , and the impact of age on sentence coherence . Effectively modeling both the independent and dependent aspects of style and linguistics in speech still remains a challenge.

## 3 Method

### Motivation

For the majority of generative speech models, the style and linguistic subspaces are assumed to be independent of each other [73; 27; 78; 48]. For example, VC systems change the voice of an utterance by replacing the source speaker's embeddings with those of the target speaker [48; 78], assuming that these embeddings contain no linguistics information. Similarly, modern TTS systems rely on independently learned representations to model different speech aspects (e.g., text, speaker, emotion) to synthesize expressive speech [8; 16; 77]. Because of this disentanglement assumption, a mismatch likely exists between the style and linguistics information in TTS/VC speech that differentiates it from real speech. To study this hypothesis, we conduct a proof-of-concept experiment on a sample subset of ASVSpoof2019 . Following previous research [61; 30; 54], we use canonical correlation analysis (CCA) to derive a subspace where the linear projections of the style and linguistics embeddings are maximally correlated for the real class. We choose the last layer output of pretrained wav2vec2-large-xlsr-53-english  for linguistics representation, and the pretrained ECAPA-TDNN embeddings  for style representation.

We randomly select 100 real speech samples from ASVspoof2019  training set to fit 20-dim CCA features for both linguistics and style representations. We then apply the CCA projection to

  
**Class** & Real & A01 (TTS) & A02 (TTS) & A03 (TTS) & A04 (TTS) & A05 (VC) & A06 (VC) \\   \(r\) & **308\(\).025** &.202\(\).033 &.217\(\).020 &.243\(\).024 &.253\(\).021 &.214\(\).026 &.252\(\).020 \\   

Table 1: Mean and standard deviation of Pearson correlation coefficients (_r_) calculated between style and linguistics embeddings for real and TTS/VC samples across 5 unseen speakers. Significant difference (as per Welch’s t-test) is seen between real speech and all types of generated speech.

200 audios from 5 unseen speakers and 6 TTS/VC systems, and compute the correlation values between these projected style and linguistics vectors to quantify the subpace similarities. Details of the tested TTS/VC systems can be found in Appendix A.1. Table 1 shows these results: A higher \(r\) is seen for the real samples, whereas significantly lower correlations are observed for both TTS and VC generated samples. Moreover, TTS-samples on average show lower \(r\) (0.228) than VC-samples (0.236), indicating that VC-samples are closer to real speech in terms of style-linguistics dependency. This could explain why VC samples were found to be more challenging to detect than TTS samples in the ASVspoof2019 challenge . While our findings demonstrate the usefulness of CCA for validating the subspace mismatch, its limitations, such as that it only explores the linear composites of the variables , might make it sub-optimal to be used independently for deepfake detection. We therefore develop a detection framework that _explicitly_ studies the style-linguistic mismatch and scales to larger amount of data.

### Formulation of SLIM

Our two-stage Style-LInguistics Mismatch (SLIM) learning framework is outlined in Figure 1. The first stage operates on the real class only and employs self-supervised learning to build style and linguistic representations and their dependencies for real speech. In the second stage, a classifier is fit onto the learned representations via supervised training over deepfake datasets with binary (real/fake) labels.

#### 3.2.1 Stage 1: One-class self-supervised contrastive training

The goal of the first stage is to learn pairs of dependency features from style and linguistics subspaces, which are expected to be highly correlated for real samples and minimally correlated for deepfakes. Since only real samples are needed, we incorporate other open-source speech datasets to diversify the style variations. Given a speech sample, we first extract the style and linguistics representations separately using pretrained networks. Since recent SSL models achieve superior performance on

Figure 1: SLIM – A two-stage training framework for ADD. Stage 1 extracts style and linguistics representations from frozen SSL encoders, compresses them, and aims to minimize the distance between the compressed representations (\(_{cross}\)), as well as the intra-subspace redundancy (\(_{style}\) and \(_{linguistics}\)). The Stage 1 features and the original subspace representations (pretrained SSL embeddings) are combined in Stage 2 to learn a classifier via supervised training.

multiple speech downstream tasks compared to conventional speech representations (e.g., ECAPA-TDNN) [7; 11; 25; 91; 57] we select a group of SSL models finetuned for paralinguistics and linguistics tasks as candidate encoders [20; 79; 57; 84; 6]. In addition, it has been shown that early to middle model layers carry paralinguistics information, while later layers encode linguistics content [54; 5; 37; 66]; we conducted thorough analyses to examine the cross-correlation between pretrained SSL model layers (Appendix A.2) and chose layer 0-10's output from Wav2vec-XLSR finetuned for speech emotion recognition to represent style, and layer 14-21's output from Wav2vec-XLSR finetuned for automatic speech recognition, to represent linguistics information.

Both style (\(_{S}\)) and linguistics (\(_{L}\)) embeddings are three-dimensional tensors \(^{K F T}\) where \(K\) denotes the transformer layer index, \(F\) denotes the feature size, and \(T\) denotes the number of time steps. These subspace embeddings are sent into compression modules \(()\), which average the transformer layer outputs and reduce the feature size from 1024 to 256 (more details in Appendix A.4). We refer to the output from the compression modules as dependency features: \(_{f,t}=(_{S})\) for style and \(_{f,t}=(_{L})\) for linguistics, and their temporally averaged versions are denoted \(}_{f}\) and \(}_{f}\). These dependency features are learned by minimizing the self-contrastive loss \(_{con}\), defined as:

\[_{con}=_{cross}+_{intra},_{intra}=_{style}+_{linguistics} \]

\[_{cross}=_{t=0}^{T}\|_{f,t}-_{f, t}\|_{}^{2},_{intra}=\|}_{f}}_{f}^{}-\|_{}^{2}+\|}_{f}}_{f}^{}-\|_{}^{2} \]

\(_{cross}\) denotes the cross-subspace loss; \(_{intra}\) is the intra-subspace loss, defined in terms of \(_{style}\) and \(_{linguistics}\) (Figure 1); \(\) is a hyperparameter that weighs the two loss terms, \(T\) is the number of time steps; and \(\|(.)\|_{}^{2}\) is the Frobenius norm. The \(_{cross}\) term reduces distance between the compressed style and linguistic embeddings, while the \(_{intra}\) term reduces redundancy within the (temporally averaged) style and linguistic features by pushing off-diagonal elements to zero. The learned dependency features from Stage 1 can be used to quantify whether a mismatch exists between the style and linguistics of an audio. We further demonstrate this in Section 4.2.

#### 3.2.2 Stage 2: Supervised training

The second stage of SLIM follows a standard supervised training scheme, where the dependency features and subspace representations are concatenated and fed into a classification head to predict a binary real/fake outcome. As shown in Figure 1, the subspace SSL encoders and compression modules are obtained from Stage 1 and are all frozen during Stage 2. Since the dependency features are specifically designed to capture the style-linguistics mismatch alone, we complement them with the original embeddings in order to capture other artifacts that can help separate real samples from the fake class. The original embedding's dimensions are reduced from 1024 to 256 through an attentive statistics pooling (ASP) layer and a multi-layer perceptron (MLP) network. The projected subspace embeddings when concatenated with dependency features result in 1024-dim vectors. The classification head consists of two fully-connected layers and a dropout layer. Binary cross-entropy loss is used to jointly train the ASP and MLP modules alongside the classification head.

## 4 Experiments

Based on the preliminary results from Section 3.1, we systematically assess the in-domain and cross-domain detection performance of SLIM using multiple datasets, and demonstrate how such framework would benefit the interpretation of model decisions.

### Experimental set-up

Stage 1 training.Unlike benchmark models which are trained end-to-end in a supervised manner, our model relies on two-stage training where each stage requires different training data to avoid information leakage. Since only real samples are needed in Stage 1, we take advantage of open-source speech datasets by aggregating subsets from the Common Voice  and RAVDESS  as training data and use a small portion of real samples from the ASVspoof2019 LA train for validation. Both Common Voice and RAVDESS cover a variety of speaker traits. The former is a crowdsourced dataset collected online from numerous speakers with uncontrolled acoustic environments, while the latter is an emotional speech corpus with large variations in prosodic patterns. Such data variety enables our model to learn a wider range of style-linguistics combinations.

Stage 2 training and evaluation.For a fair comparison with existing works, we adopt the standard train-test partition, where only the ASVspoof2019 logical access (LA) training and development sets are used for training and validation. For evaluation, we use the test split from ASVspoof2019 LA  and ASVspoof2021 DF . ASVspoof2019 LA and ASVspoof2021 DF have been used as standard datasets for evaluating deepfake detection models, where real speech recordings originate from the VCTX and VCC datasets  and the spoofed ones are generated with a variety of TTS and VC systems. Compared to ASVspoof2019 LA, ASVspoof2021 DF contains more than 100 different types of generated speech in the evaluation set with a variety of different compression codecs. This provides a more challenging setting for testing generalization to unseen attacks and robustness to compression. In addition, we assess our model's generalizability on two more recent datasets: In-the-wild, and the English subset from MLAAD v3 . In-the-wild consists of on audio clips collected from English-speaking celebrities and politicians, featuring more realistic and spontaneous speech samples. The English subset of MLAAD (hereinafter referred to as MLAAD-EN) is a recent dataset with spoofed samples generated using state-of-the-art open-source TTS and VC systems (more details in Appendix A.3).

Metrics.Equal error rate (EER) is a standard metric for evaluating deepfake detection systems . It refers to the point in the detection error tradeoff curve where the false acceptance rate equals the false rejection rate; lower EER suggests better performance. We also report F1-beta scores (\(\)=1) to account for the class imbalance; higher F1 scores suggest better performance.

Benchmarks.We consider several SOTA models to benchmark against and broadly categorize them as follows, based on the training cost: (i) methods which freeze feature extraction frontends and finetune only the backend classifiers, and (ii) methods which finetune frontends together with the classifiers during supervised training. As benchmarks representing the former case, we consider Wav2vec-XLSR+LLGF (W2V-LLGF) , Wav2vec-XLSR+LCNN (W2V-LCNN) , six different models that share a similar backend classifier as SLIM (W2V/WLM/HUB-ASP), a model that fuses different SSL representations (SSL-fusion) , as well as three methods that do not rely on large SSL encoders, namely, LCNN , RawNet2 , and PS3DT . For the end-to-end fine-tuning benchmarks, we consider the model in  with a backend classifier similar to SLIM's (W2V-ASP-ft), and the model in  with RawBoost augmentation and AASIST backend (W2V-AASIST). Using frozen frontends, five variants of SLIM are considered, where the input at Stage 2 is: (i) only the style embedding, (ii) only the linguistics embedding, (iii) the combination of style and linguistics embeddings, (iv) only the style-linguistics dependency features, and (v) the fusion of style and linguistic embeddings and their dependency features. We emphasize that the original SLIM framework does not involve any finetuning of frontends, since the finetuning may change the disentanglement of style and linguistics embeddings and thus hamper model explainability. However, to compare with finetuned benchmarks, we include a variant of SLIM that finetunes all modules during Stage 2, noting that this would compromise the feature interpretation.

Implementation details.We implement our models using the SpeechBrain toolkit  v1.0.0. The hyperparameters used for Stage 1 and Stage 2 training are provided in Appendix A.7. When setting up our customized benchmark models, we followed consistent training recipes where only the model architectures were changed and the same data augmentation method was used. Each round of evaluation was repeated three times with different random seeds, and the mean values are reported. Unlike some previous works which limit the duration of test speech, we only applied amplitude normalization during evaluation and kept the full duration of all samples.

### Experiment results

Detection performance.Table 2 summarizes the detection performance of all models and compares the number of trainable parameters. We discuss the models with _frozen frontend_ here, and compare the models with _finetuned frontend_ in Section. 4.3. ASVspoof2019 eval set contains 19 types of attacks, out of which 6 are seen during training. This makes it the simplest of the four test datasets. We see that a majority of the models achieve near-perfect performance, with several including SLIM reporting EER below 1%. As expected, degradation is seen when models are tested on ASVspoof2021, where the majority of attacks are unseen. Both W2V-LCNN and SLIM are top-performers, with no significant difference between the two. With the out-of-domain datasets (In-the-wild and MLAAD-EN), more severe degradation is observed, where the majority report EERs over 20%. SLIM, however, outperforms the others with EER of 12.9% and 13.5% on In-the-wild and MLAAD-EN, respectively. It should be noted that although ASVspoof2021 is often used as a standard dataset to evaluate model generalizability to unseen attacks , part of the real samples in ASVspoof2021 originate from the same dataset (the VCTK corpus ) as the ASVspoof2019 training data . As a result, the real samples from ASVspoof2019 and ASVspoof2021 share a similar distribution, whereas the In-the-wild and MLAAD-EN samples share nearly no overlap with ASVspoof (further discussion in Appendix A.3). Generalization to In-the-wild and MLAAD-EN is therefore more challenging than to ASVspoof2021. The large gains reported by SLIM demonstrates how the style-linguistics mismatch helps with generalization to unseen data.

In Table 2, we also demonstrate the benefits of introducing Stage 1 by considering features from SLIM variants as inputs to Stage 2: dependency features, the style and linguistics embeddings (Enc\({}_{sty}\) and Enc\({}_{ling}\)), as well as their combination. The architecture of the classification head is kept the same, except for the number of neurons in the input layer. The dependency features outperform the rest on the two out-of-domain datasets, while the subspace embeddings perform better on ASVspoof2021. Simply concatenating the style and linguistics embeddings does not yield significant improvements when compared to benchmark models. This suggests that the style-linguistics dependency may not be fully captured by supervised training methods without explicit guidance.

Style-linguistics mismatch of deepfakes.Figure 2 shows the distribution of cosine distances between the style and linguistics dependency features for the real and fake classes; larger distances indicate a higher mismatch. Since the distance values approximately follow a Gaussian distribution with unequal variances, we further conduct a Welch's t-test  to examine the statistical significance

    &  &  &  &  &  &  \\  & &  &  &  &  &  &  &  &  &  \\   & LCNN  & 3.7 &.834 & 25.5 &.197 & 65.6 &.373 & 37.2 &.654 & 4 \\  & RawNet2  & 3.0 &.875 & 22.3 &.213 & 37.8 &.602 & 33.9 &.676 & 4 \\  & PS3DT  & 4.5 & \(-\) & \(-\) & \(-\) & 29.7 & \(-\) & \(-\) & N/A \\   & W2V-ASP & 3.3 &.858 & 19.6 &.233 & 30.2 &.705 & 29.1 &.715 & 9 \\  & WLM-ASP & **0.3** &.983 & 9.0 &.426 & 25.4 &.751 & 30.3 &.709 & 9 \\  & HUB-ASP & 0.5 &.975 & 15.4 &.289 & 29.9 &.718 & 31.0 &.702 & 9 \\  & W2V-LLGF  & 2.3 &.936 & 9.4 &.402 & 25.1 &.756 & 27.8 &.731 & 10 \\
**Frozen** **(**Sloomans et al.**, 2017**)** **W2V-LCNN ** **0.6** & \(-\) & **8.1** & \(-\) & 24.5 & \(-\) & \(-\) & \(-\) & N/A \\
**frontend** **(**Sloomans et al.**, 2017**)** **W2V+WLM** & 1.8 &.916 & 22.5 &.203 & 30.3 &.704 & 27.0 &.739 & 9 \\ (Section. 4.2) & W2V+HUB & 0.9 &.956 & 14.2 &.310 & 27.9 &.737 & 27.6 &.732 & 9 \\  & WLM+HUB & 0.8 &.963 & 16.7 &.269 & 29.2 &.724 & 28.5 &.720 & 9 \\  & SSL-Fusion  & **0.3** &.981 & 8.9 &.419 & 24.2 &.765 & 26.5 &.739 & 10 \\   &  & & & & & & & & & \\  & Enc\({}_{sty}\) & 6.7 &.740 & 8.6 &.438 & 29.2 &.724 & 25.4 &.756 & 9 \\  & Enc\({}_{ling}\) & 5.9 &.764 & 9.3 &.407 & 30.4 &.708 & 25.0 &.760 & 9 \\  & Enc\({}_{style+ling}\) & 3.5 &.834 & 9.0 &.429 & 25.1 &.757 & 23.9 &.772 & 10 \\  & Dependency & 2.8 &.897 & 20.5 &.234 & 25.8 &.750 & 19.8 &.811 & 9 \\  & Full & 0.6 &.969 & **8.3** &.451 & **12.9** &.895 & **13.5** &.865 & 11 \\ 
**Finetuned** & W2V-ASP  & 0.3 &.984 & 4.5 &.646 & 18.6 &.836 & 19.2 &.817 & 317 \\
**frontend** ** **(W2V-AASIST **)** **0.2** &.991 & **3.6** &.707 & 17.5 &.847 & 14.5 &.856 & 317 \\ (Section. 4.3) & SLIM (ours) & **0.2** &.989 & 4.4 &.651 & **12.5** &.898 & **10.7** &.892 & 253 \\   

Table 2: Detection performance on different deepfake datasets. Experiments were repeated three times with different random seeds, and average metric values are reported. #Param refers to the number of trainable parameters (in millions). For SLIM, we sum up parameters trained at both stages. A few models do not make their code open-source, we therefore include the metrics reported in their papers and skip parameter calculation (N/A). Lowest EERs are bolded per category.

of the difference between real and fake samples. For all three datasets, the average cosine distance is found to be significantly lower for real speech than for deepfake samples (\(p\) < \(1^{-5}\)). This further corroborates our hypothesis that a higher style-linguistics mismatch exists for fakes. On the other hand, the distance distributions of real and fake samples still share a large overlap, indicating that dependency features alone are not sufficient for perfectly discriminating between the two classes.

Analysis of style-linguistics dependency features.Table 2 demonstrates that style-linguistics dependency features can provide better generalizability than the subspace embeddings (Table 2 SLIM variants, rows 1-4). To examine these results, we first aggregate ASVspoof2021, In-the-wild, and MLAAD-EN, and project the dependency features as well as the concatenated subspace embeddings to a 2-dim space using t-SNE for visualization (Figure 3). Since we use frozen frontends, the embeddings input to Stage 2 training are not affected by backpropagation. Ideal embeddings would exhibit maximal separation between the real and fake classes, while showing minimal shift within each class for different dataset distributions. In Figure 3, we see that the dependency features show larger discrimination between real and fakes (3(c) and 3(d)) than the concatenated subspace embeddings (3(a) and 3(b)), and also a smaller shift between datasets: fake and real samples from the same dataset (color) clusters have less overlap in distribution in the plots.

Interpretation of model decisions.Next, we perform a qualitative evaluation of the model decisions. Figure 4 shows the mel-spectrograms of four samples selected from In-the-wild. These four demonstrate typical acoustic characteristics that represent a larger group of recordings: (1) top-left is a _fake_ sample with audible artifacts at high-frequency region; (2) top-right is a _fake_ sample with unnaturally long pauses heard before and after the phrase "but not"; (3) bottom left is a _real_ sample

Figure 3: Projected embeddings using t-SNE for style-linguistic representations: (a) subspace embeddings - real class, (b) subspace embeddings - fake class, (c) dependency features - real class, (d) dependency features - fake class. Data distributions are visualized on the upper and right side of the embedding plots. Red: ASVspoof2021; Green: In-the-wild; Blue: MLAAD-EN.

Figure 2: Cosine distance (log scale) calculated between the style and linguistics dependency features for ASVspoof2021 DF eval, In-the-wild, and MLAAD-EN. Whiskers from top to bottom represent the 75% quartile, median, and 25% quartile of the distribution.

with an atypical speech style where the word pronunciations are elongated; (4) bottom right is a _real_ speech recorded in a noisy condition. We find that among the top-performing systems shown in Table 2, only SLIM classified all four samples correctly (both frozen and fine-tuned versions; with all features), while others mostly failed on (2) and (4). Findings here suggest that SLIM provides guidance when abnormalities in style and linguistics occur. Such guidance can be complemented via _post-hoc_ analysis tools such as human evaluations or saliency maps  for further interpretation.

Additionally, we note that the decisions made by dependency features and the original subspace representations are complementary to each other. Samples in the right column are correctly identified as fake by the dependency features but missed by the original subspace representations, and vice versa (left column missed by dependency features). These results corroborate with the nature of the two feature types. The dependency features are learned by modelling the general style-linguistics relationship seen in real speech, therefore samples with mismatched style-linguistics pattern are likely to be flagged as "not real." The original style and linguistics embeddings, on the other hand, are sensitive to signal artifacts, which could be the deepfake imperfections generated during speech synthesis , or the amount of background noise and device artifacts. By combining the two features, SLIM captures a variety of abnormalities and achieves improved classification.

### Ablation studies

Effects of finetuning SSL frontend.From Table 2, we see that the frontend finetuning helps to further decrease the EER for SLIM. The finetuned version of SLIM performs better than the rest on In-the-wild and MLAAD-EN, while providing comparable performance on ASVspoof2019 and ASVspoof2021. However, it should be noted that the interpretation of style-linguistics mismatch becomes difficult after finetuning, since the two subspace representations may no longer be maximally disentangled.

Effects of classification backend.In Stage 2, subspace representations are sent into ASP+MLP layers, which output 256-dim embeddings to fuse with the dependency features. Previous works have shown that different backend architectures may lead to a significant difference in the detection performance . With the input fixed (dependency features and subspace embeddings), we find that removing the ASP and MLP layers degrades EER across the four datasets (Table 4, Appendix A.6), while using the LCNN  or LLGF  backends improves EER on ASVspoof2019 and ASVspoof2021, but not on In-the-wild and MLAAD-EN.

Misclassifications made by SLIM.We studied the misclassifications made by SLIM through a combination of qualitative analysis methods, such as listening tests, visualizations of mel-spectrograms, noise-level estimation, and prediction of number of speakers. In general, we found that shorter and low-quality samples, e.g., those with estimated Mean Opinion Score (MOS) lower than 2 (using NISQA ), as well as recordings with multiple speakers were more likely to be misclassified. While the former is a general challenge faced by all detection methods, the latter can be explained by

Figure 4: Mel-spectrograms of select samples from In-the-wild. SLIM classifies all four correctly, and when reporting fakes, provides guidance on abnormalities in style and/or linguistics. Also, the dependency and subspace features in SLIM are complementary to each other. Left: samples missed by dependency features but correctly identified by the style and linguistic features; right: vice versa.

the design of SLIM, where the pretraining stage does not involve any multi-speaker samples. In a multi-speaker scenario (e.g., conversational speech), speech patterns from more than one speaker could lead to higher misalignment between linguistic content and speaker attributes, resulting in false alarms.

## 5 Limitations

Since our framework explicitly focuses on style-linguistics mismatch, it is possible that real speech samples with atypical style-linguistics dependency (e.g., dysarthric speech  or children speech) may be misclassified. With the rapidly growing number of speech datasets, one countermeasure is to conduct self-supervised pretraining on datasets with more diverse speech styles (e.g., ). Also, while we focused on English samples due to the scarcity of multilingual deepfake datasets at the time of writing, the proposed framework can be scaled to more languages with recent deepfake datasets, such as MLAAD-v4. Finally, although SLIM can benefit from frontend finetuning and more advanced backends, doing so would affect the feature interpretation and will require modifications to the training approach. We plan to explore these directions in the future.

## 6 Conclusion

We present SLIM, a new audio deepfake detection framework that explicitly models the style-linguistics mismatch in speech to detect deepfakes. Without requiring a large amount of labeled data or the added cost of end-to-end finetuning on pretrained encoders, SLIM outperforms existing benchmarks on out-of-domain datasets, while being competitive on in-domain datasets. The learned style-linguistics dependency features are complementary to the individual pretrained style and linguistics subspace representations, and facilitate result interpretation by guiding our attention to where style-linguistics misalignment occurs, which can be further analyzed by a variety of qualitative studies.