# Large-Scale Contextual Market Equilibrium Computation through Deep Learning

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

Market equilibrium is one of the most fundamental solution concepts in economics and social optimization analysis. Existing works on market equilibrium computation primarily focus on settings with a relatively small number of buyers. Motivated by this, our paper investigates the computation of market equilibrium in scenarios with a large-scale buyer population, where buyers and goods are represented by their contexts. Building on this realistic and generalized contextual market model, we introduce MarketFCNet, a deep learning-based method for approximating market equilibrium. We start by parameterizing the allocation of each good to each buyer using a neural network, which depends solely on the context of the buyer and the good. Next, we propose an efficient method to estimate the loss function of the training algorithm unbiasedly, enabling us to optimize the network parameters through gradient descent. To evaluate the approximated solution, we introduce a metric called Nash Gap, which quantifies the deviation of the given allocation and price pair from the market equilibrium. Experimental results indicate that MarketFCNet delivers competitive performance and significantly lower running times compared to existing methods as the market scale expands, demonstrating the potential of deep learning-based methods to accelerate the approximation of large-scale contextual market equilibrium.

## 1 Introduction

Market equilibrium is a solution concept in microeconomics theory, which studies how _individuals_ amongst groups will exchange their _goods_ to get each one better off . The importance of market equilibrium is evidenced by the 1972 Nobel Prize awarded to John R. Hicks and Kenneth J. Arrow "for their pioneering contributions to general economic equilibrium theory and welfare theory" . Market equilibrium has wide application in fair allocation , as a few examples, fairly assigning course seats to students  or dividing estates, rent, fares, and others . Besides, market equilibrium are also considered for ad auctions with budget constraints where money has real value [15; 16].

Existing works often use traditional optimization method or online learning technique to solve market equilibrium, which can tackle one market with around \(400\) buyers and goods in experiments [30; 52]. However, in realistic scenarios, there might be millions of buyers in one market (_e.g._ job market, online shopping market). In these scenarios, the description complexity for the market is \(O(nm)\) and it needs at least \(O(nm)\) cost to do one optimization step for the market, if there are \(n\) buyers and \(m\) goods in the market, which is unacceptable when \(n\) is extremely large and potentially infinite. In this case, and traditional optimization methods do not work anymore.

However, contextual models come to the rescue. The success of contextual auctions[21; 5] demonstrate the power of contextual models, in which each bidder and item are represented as context andthe value (or the distribution) of item to bidder is determined by the contexts. In this way, auctions as well as other economic problems can be described in a more memory-efficient way, making it possible to accelerate the computation on these problems. Inspired by the models of contextual auctions, we propose the concept of contextual markets in a similar way. We verify that contextual markets can be useful to model large-scale markets aforementioned, since the real market can be assumed to be within some low dimension space, and the values of goods to buyers are often not hard to speculate given the knowledge of goods and buyers [46; 45]. Besides, contextual models never lose expressive power compared with raw models, giving contextual markets capabilities to generalize over traditional markets.

This paper initiates the study of _deep learning_ for _contextual_ market equilibrium computation with a large number of buyers. The description complexity of contextual markets is \(O(n+m)\), if there are \(n\) buyers and \(m\) items in the market, making them memory-efficient and helpful for follow-up equilibrium computation while holding the market structure. Following the framework of differentiable economics [18; 26; 62], we propose a deep-learning based approach, MarketFCNet, in which one optimization step costs only \(O(m)\) rather than \(O(nm)\) in traditional methods, greatly accelerating the computation of market equilibrium. MarketFCNet takes the representations of one buyer and one good as input, and outputs the allocation of the good to the buyer. The training on MarketFCNet targets at an unbiased estimator of the objective function of EG-convex program, which can be formed by independent samples of buyers. By this way, we optimize the allocation function on "buyer space" implicitly, rather than optimizing the allocation to each buyer directly. Therefore, MarketFCNet can reduce the algorithm complexity such that it becomes independent of \(n\), _i.e._, the number of buyers.

The effectiveness of MarketFCNet is demonstrated by our experimental results. As the market scale expands, MarketFCNet delivers competitive performance and significantly lower running times compared to existing methods in different experimental settings, demonstrating the potential of deep learning-based methods to accelerate the approximation of large-scale contextual market equilibrium.

The contributions of this paper consist of three parts,

* We proposes a method, MarketFCNet, to approximate the contextual market equilibrium in which the number of buyers is large.
* We proposes Nash Gap to quantify the deviation of the given allocation and price pair from the market equilibrium.
* We conduct extensive experiments, demonstrating promising performance on the approximation measure and running time compared with existing methods.

## 2 Related Works

The history of market equilibrium arises from microeconomics theory, where the concept of competitive equilibrium [51; 510] was proposed, and the existence of market equilibrium is guaranteed in a general setting [3; 61]. Eisenberg and Gale  first considered the linear market case, and proved that the solution of EG-convex program constitutes a market equilibrium, which lays the polynomial-time algorithmic foundations for market equilibrium computation. Eisenberg  later showed that EG program also works for a class of CCNH utility functions. Shmyrev program later is also proposed to solve market equilibrium with linear utility with a perspective shift from allocation to price , while Cole et al.  later found that Shmyrev program is the dual problem of EG program with a change of variables. There are also a branch of literature that consider computational perspective in more general settings such as indivisible goods [54; 19; 20] and piece-wise linear utility [60; 33; 34].

There are abundant of works that present algorithms to solve the market equilibrium and shows the convergence results theoretically . Gao and Kroer  discusses the convergence rates of first-order algorithms for EG convex program under linear, quasi-linear and Leontief utilities. Nan et al.  later designs stochastic optimization algorithms for EG convex program and Shmyrev program with convergence guarantee and show some economic insight. Jalota et al.  proposes an ADMM algorithm for CCNH utilities and shows linear convergence results. Besides, researchers are more engaged in designing dynamics that possess more economic insight. For example, PACEdynamic [32; 48; 65] and proportional response dynamic [63; 66; 12], though the original idea of PACE arise from auction design [16; 15].

With the fast growth of machine learning and neural network, many existing works aim at resolving economic problem by deep learning approach, which falls into the differentiate economy framework . A mainstream is to approximate the optimal auction with differentiable models by neural networks [25; 29; 36; 55]. The problem of Nash equilibrium computation in normal form games [22; 50; 23] and optimal contract design  through deep learning also attracts researchers' attentions. Among these methodologies, transformer architecture [50; 21; 47] is widely used in solving economic problems.

To the best of our knowledge, no existing works try to approximate market equilibrium through deep learning. Besides, although some literature focuses on low-rank markets and representative markets [46; 45], our works firstly propose the concept of contextual market. We believe that our approach will pioneer a promising direction for large-scale contextual market equilibrium computation.

## 3 Contextual Market Modelling

In this section, we focus on the model of contextual market equilibrium in which goods are assumed to be divisible. Let the market consist of \(n\) buyers, denoted as \(1,...,n\), and \(m\) goods, denoted as \(1,...,m\). We denote \([k]\) as the abbreviation of the set \(\{1,2,,k\}\). Each buyer \(i[n]\) has a representation \(b_{i}\), and each good \(j[m]\) has a representation \(g_{j}\). We assume that \(b_{i}\) belongs to the buyer representation space \(\), and \(g_{j}\) belongs to the good representation space \(\). For a buyer with representation \(b\), she has budget \(B(b)>0\). Denote \(Y(g)>0\) as the supply of good with representation \(g\). Although many existing works  assume that each good \(j\) has _unit_ supply (i.e. \(Y(g) 1\) for all \(g\)) without loss of generality, their results can be easily generalized to our settings.

An _allocation_ is a matrix \(=(x_{ij})_{i[n],j[m]}_{+}^{n m}\), where \(x_{ij}\) is the amount of good \(j\) allocated to buyer \(i\). We denote \(_{i}=(x_{i1},,x_{im})\) as the vector of bundle of goods that is allocated to buyer \(i\). The buyers' utility function is denoted as \(u:_{+}^{m}_{+}\), here \(u(b_{i};_{i})\) denotes the utility of buyer \(i\) with representation \(b_{i}\) when she chooses to buy \(_{i}\). We denote \(u_{i}(_{i})\) as an equivalent form of \(u(b_{i};_{i})\) and often refer them as the same thing. Similarly, \(B(b_{i}),Y(g_{j})\) and \(B_{i},Y_{j}\) are often referred to as the same thing, respectively.

Let \(=(p_{1},,p_{m})_{+}^{m}\) be the prices of the goods, the _demand set_ of buyer with representation \(b_{i}\) is defined as the set of utility-maximizing allocations within budget constraint.

\[D(b_{i};)*{arg\,max}_{_{i}}\{u(b_{i}; _{i})_{i}_{+}^{m},\,,_{i}  B(b_{i})\}. \]

A _contextual market_ is a 4-tuple: \(= n,m,(b_{i})_{i[n]},(g_{j})_{j[m]}\), where buyer utility \(u(b_{i};_{i})\) is known given the information of the market. We also assume budget function \(B:_{+}\) represents the budget of buyers and capacity function \(Y:_{+}\) represents the supply of goods. All of \(u\), \(B\) and \(Y\) are assumed to be public knowledge and excluded from a market representation. This assumption mainly comes from two aspects: (1) these functions can be learned from historical data and (2) budgets and supplies can be either encoded in \(b\) and \(g\) in some way.

The _market equilibrium_ is represented as a pair \((,)\), \(_{+}^{n m},\ _{+}^{m}\), which satisfies the following conditions.

* _Buyer optimality_: \(_{i} D(b_{i},)\) for all \(i[n]\),
* _Market clearance_: \(_{i=1}^{n}x_{ij} Y(g_{j})\) for all \(j[m]\), and equality must hold if \(p_{j}>0\).

We say that \(u_{i}\) is _homogeneous_ (with degree \(1\)) if it satisfies \(u_{i}(_{i})= u_{i}(_{i})\) for any \(_{i} 0\) and \(>0\)[53; SS6.2]. Following existing works, we assume that \(u_{i}\)s are CCNH utilities, where CCNH represents for concave, continuous, non-negative, and homogeneous functions. For CCNH utilities, a market equilibrium can be computed using the following _Eisenberg-Gale convex program_ (EG):

\[_{i=1}^{n}B_{i} u_{i}(_{i})\ _{i=1}^{n}x_{ij}  Y_{j},\  0.\] (EG)

Theorem 3.1 shows that the market equilibrium can be represented as the optimal solution of (EG).

**Theorem 3.1** (Gao and Kroer ).: _Let \(u_{i}\) be concave, continuous, non-negative and homogeneous (CCNH). Assume \(u_{i}()>0\) for all \(i\). Then, (i)_ (EG) _has an optimal solution and (ii) any optimal solution \(\) to (EG) together with its optimal Lagrangian multipliers \(^{*}^{m}_{+}\) constitute a market equilibrium, up to arbitrary assignment of zero-price items. Furthermore, \(^{*},_{i}^{*}=B_{i}\) for all \(i\)._

Based on Theorem 3.1, it's easy to find that we can always assume \(_{i[n]}x_{ij}=Y_{j}\) while preserving the existence of market equilibrium, which states as follows.

**Proposition 3.2**.: _Following the assumptions in Theorem 3.1. For the following EG convex program with equality constraints,_

\[_{i=1}^{n}B_{i} u_{i}(_{i})\ _{i=1}^{n}x _{ij}=Y_{j},\  0. \]

_Then, an optimal solution \(^{*}\) together with its Lagrangian multipliers \(^{*}^{m}_{+}\) constitute a market equilibrium. Moreover, assume more that for each good \(j\), there is some buyer \(i\) such that \(}{ x_{ij}}>0\) always hold whenever \(u_{i}(_{i})>0\), then all prices are strictly positive in market equilibrium. As a consequence, Equation (EG) and Equation (2) derive the same solution._

We leave all proofs to Appendix B. Since the additional assumption in Proposition 3.2 is fairly weak, without further clarification, we always assume the conditions in Proposition 3.2 hold and the market clearance condition becomes \(_{i[n]}x_{ij}=Y(g_{j}),\  j[m]\).

## 4 MarketFCNet

In this section, we introduce the MarketFCNet (denoted as Market Fully-Connected Network) approach to solve the market equilibrium when the number of buyers is large and potentially infinite. MarketFCNet is a sampling-based methodology, and the key point is to design an unbiased estimator of an objective function whose solution coincides with the market equilibrium. The main advantage is that it has the potential to fit the infinite-buyer case without scaling the computational complexity. Therefore, MarketFCNet is scalable with the number of buyers varies.

### Problem Reformulation

Following the idea of differentiable economics , we consider parameterized models to represent the allocation of good \(j\) to buyer \(i\), denoted as \(x_{}(b_{i},g_{j})\), and call it allocation network, where \(\) is the network parameter. Given buyer \(i\) and good \(j\), the network can automatically compute the allocation \(x_{ij}=x_{}(b_{i},g_{j})\). The allocation to buyer \(i\) is represented as \(_{i}=_{}(b_{i},)\) and the allocation matrix is represented as \(=_{}(,)\). Then the market clearance constraint can be reformulated as \(_{i[n]}x_{}(b_{i},g_{j})=Y(g_{j}), j[m]\) and the price constraint can be reformulated as \(_{}(,) 0\). Let \(b\) be uniformly distributed from \(=\{b_{i}:i[n]\}\), then the EG program (EG) becomes,

\[_{x_{}}&(x_{})=_{b}[B (b) u(b;_{}(b,))]\\ &_{b}[x_{}(b,g_{j})]=Y(g_{j})/n, j[m]\\ &_{}(,) 0\] (EG-FC)

For simplicity, we take \(Y(g_{j})/n 1\) for all \(g_{j}\).

### Optimization

The second constraint in (EG-FC) can be easily handled by the network architecture (for example, network with a softplus layer \((x)=(1+(x))\). As for the first constraint, from Theorem 3.1, we know the prices of goods are simply the Lagrangian multipliers for the first constraint in (EG-FC). Therefore, we employ the Augmented Lagrange Multiplier Method (ALMM) to solve the problem (EG-FC). We define \(_{}(x_{},)\) as the Lagrangian, which has the form:

\[_{}(x_{};)= -(x_{})+_{j=1}^{m}_{j}(_{b}[x_{}(b,g_{j})]-1)+_{j=1}^{m}( _{b}[x_{}(b,g_{j})]-1)^{2} \]Directly computing the objective function seems intractable due to the potentially infinite data size. Therefore, we follow the framework in learning theory culture that we only guarantee to achieve an unbiased gradient of the objective function . The training process of MarketFCNet is presented in Figure 1.

To finish the ALMM algorithm, we need to obtain unbiased estimators of following two expressions.

* An unbiased estimator of \(_{}(x_{};)\).
* An unbiased estimator of \(_{j}\), where \(_{j}\) is given by \(_{j}=(_{b}[x_{}(b,g_{j})]-1)\).

Unbiased estimator of \(_{j}\)We aim to obtain an unbiased estimator of \(_{b}[x_{}(b,g_{j})]\). By applying Monte Carlo method, we can choose batch size \(M\) and sample \(b_{1},b_{2},...,b_{M} U()\), then \(_{i=1}^{M}x_{}(b_{i},g_{j})\) forms an unbiased estimator.

Unbiased estimator of \(_{p}(x_{};)\)For \((x_{})\) and the second term, the technique to achieve an unbiased estimator is similar. \(u(b;x_{}(b,))\) in \((x_{})\) can be calculated directly by summing over all goods. For the last term, notice that

\[(_{b}[x_{}(b,g_{j})]-1)^{2}=( _{b}[x_{}(b,g_{j})]-1)(_{ b^{}}[x_{}(b^{},g_{j})]-1) \]

Therefore, we can sample \(b_{1},...,b_{M},b_{1}^{},...,b_{M}^{} U()\) and compute

\[_{i=1}^{M}_{j=1}^{m}(x_{}(b_{i },g_{j})-1)(x_{}(b_{i}^{},g_{j})-1) \]

which provides an unbiased estimator for the last term, capturing the squared deviation of output allocations from the constraint.

## 5 Performance Measures of Market Equilibrium

In this section, we propose _Nash Gap_ to measure the performance of an approximated market equilibrium and show that Nash Gap preserves the economic interpretation for market equilibrium. To introduce Nash Gap, we first introduce two types of welfare, Log Nash Welfare and Log Fixed-price Welfare in Definition 5.1 and Definition 5.2, respectively.

Figure 1: Training process of MarketFCNet. On each iteration, the batch of \(M\) independent buyers are drawn. each buyer and each good are represented as \(k\)-dimension context. The \((i,j)\)’th element in the allocation matrix represents the allocation computed from \(i\)’th buyer and \(j\)’th good. MarketFCNet training process alternates between the training of allocation network and prices. The training of allocation network need to achieve an unbiased estimator \(}_{}(x_{};)\) of the loss function \(_{}(x_{};)\), followed by gradient descent. The training of prices need to get an unbiased estimator \(_{j}\) of \(_{j}\), followed by ALMM updating rule \(_{j}_{j}+_{t}_{j}\).

**Definition 5.1** (Log Nash Welfare).: The Log Nash Welfare (abbreviated as \(\)) is defined as

\[()=}}_{i[n]}B_{ i} u_{i}(_{i}), \]

where \(B_{}=_{i[n]}B_{i}\) is the total budgets for buyers.

Notice that \(()\) is identical to the objective function in Equation (EG), differing only in the constant term coefficient.

**Definition 5.2** (Fixed-price and Log Fixed-price Welfare).: We define the fixed-price utility for buyer \(i\) as,

\[(b_{i};)=_{_{i}}\{u(b_{i};_{i}) _{i}_{+}^{m},,_{i} B(b_{ i})\} \]

which represents the optimal utility that buyer \(i\) can obtain at the price level \(\), regardless of the market clearance constraints. The Log Fixed-price Welfare (abbreviated as \(\)) is defined as the logarithm of Fixed-price Welfare,

\[()=}}_{i[n]} B_{i}_{i}() \]

Based on these definitions, we present the definition of Nash Gap.

**Definition 5.3** (Nash Gap).: We define Nash Gap (abbreviated as \(\)) as the difference of Log Nash Welfare and Log Fixed-price Welfare, _i.e._

\[(,)=()-( ) \]

### Properties of Nash Gap

To show why \(\) is useful in the measure of market equilibrium, we first observe that,

**Proposition 5.4** (Price constraints).: _If \((,)\) constitute a market equilibrium, the following identity always hold,_

\[_{j[m]}p_{j}Y_{j}=_{i[n]}B_{i} \]

Below, we state the most important theorem in this paper.

**Theorem 5.5**.: _Let \((,)\) be a pair of allocation and price. Assuming the allocation satisfies market clearance and the price meets price constraint, then we have \((,) 0\)._

_Moreover, \((,)=0\) if and only if \((,)\) is a market equilibrium._

Theorem 5.5 show that Nash Gap is an ideal measure of the solution concept of market equilibrium, since it holds following properties,

* \((,)\) is continuous on the inputs \((,)\).
* \((,) 0\) always hold. (under conditions in Theorem 5.5)
* \((,)=0\) if and only if \((,)\) meets the solution concept.
* The computation of \(\) does not require the knowledge of an equilibrium point \((^{*},^{*})\)

Since some may argue that \((,)\) is not intuitive to understand, we consider some more intuitive measures, the Euclidean distance to the market equilibrium, _i.e._, \(||-^{*}||\) and \(||-^{*}||\), as well as the difference on Weighted Social Welfare, \([()-(^{*})]\), where \(():=_{i[n]}}{B_{}}u_{i}( {x}_{i})\), and show the connection between \(\) and these intuitive measures.

**Proposition 5.6**.: _Under some technical assumptions (which is presented in Appendix B.4), if \((,)=\), we have:_

* \(||-^{*}||=O()\)* \(||_{i}-_{i}^{*}||=O()\) _for all_ \(i\)_._
* \(|()-(^{*})|=O()\)_._

Finally, we give a saddle-point explaination for Nash Gap.

**Corollary 5.7**.: _Within market clearance and price constraint, we have_

\[_{}()=_{}() \]

Corollary 5.7 provides an economic interpretation for GAP. Market equilibrium can be seen as the saddle point over social welfare, and the social welfare for \(\) can be actually implemented while the social welfare for \(\) is virtual and desired by buyers. Nash Gap measures the gap between the "desired welfare" and the "implemented welfare" for buyers.

### Measures in General Cases

Since \(\) only works for \((,)\) that satisfies market clearance and price constraints, we generalize the measure of \(\) to a more general case, which need to give a measure for all positive \((,)\).

We first notice that any equilibrium must satisfy the conditions of _market clearance_ and _price constraint_, we first make a projection on arbitrary positive \((,)\) to the space where these constraints hold. Specifically, if we let

\[_{j}= }{_{i}x_{ij}}, _{ij}=x_{ij}_{j} =B_{i}}{_{j}V_{j}p_{j}}, _{j}= p_{j} \]

then \((},})\) satisfies these constraints and we consider \((},})\) as the equilibrium measure.

Besides, we also need to measure how far is the point \((,)\) to the space within the conditions of _market clearance_ and _price constraint_. we propose following two measurement, called Violation of Allocation (abbreviated as \(\)) and Violation of Price (abbreviated as \(\)), respectively.

\[() _{j}|_{j}|,() || \]

From the expressions of \(\) and \(\), we know that these two constraints hold if and only if \(()=0\) and \(()=0\).

We argue that this projection is of economic meaning. If \((,)\) constitute a market equilibrium and we scale budget with a factor of \(\), then \((,)\) constitute a market equilibrium in the new market. Similarly, if we scale the value for each buyer with factor \(1/\) (here \(\) can be a vector in \(_{+}^{m}\)) and capacity with factor \(\), then, \((,})\) constitute a market equilibrium in the new market. These instances are evidence that market equilibrium holds a linear structure over market parameters. Therefore, a linear projection can eliminate the effect from linear scaling, while preserving the effect from orthogonal errors.

Notice that \(=}\) and \(=}\) if and only if \(()=0\) and \(()=0\), respectively. From Theorem 5.5 We can easy derive following statements:

**Proposition 5.8**.: _For arbitrary \(_{+}^{n m},_{+}^{m}\), we have \(() 0,() 0,(}, }) 0\) always hold. Moreover, \((,)\) is a market equilibrium if and only if \(()=()=(},})=0\)._

Proposition 5.8 is a certificate that \((),(),(},})\) together form a good measure for market equilibrium. Therefore, in our experiments we compute these measures of solutions and prefer a lower measure without further clarification.

## 6 Experiments

In this section, we present empirical experiments that evaluate the effectiveness of MarketFCNet. Though briefly mentioned in this section, we leave the details of baselines, implementations, hyperparameters and experimental environments to Appendix C.

### Experimental Settings

In our experiments, all utilities are chosen as CES utilities, which captures a wide utility class including linear utilities, Cobb-Douglas utilities and Leontier utilities and has been widely studied in literature [59; 4]. CES utilities have the form,

\[u_{i}(x_{i})=(_{j[m]}v_{ij}^{}x_{ij}^{})^{1/}\]

with \( 1\). The fixed-price utilities for CES utility is derived in Appendix A.

In order to evaluate the performance of MarketFCNet, we compare them mainly with a baseline that directly maximizes the objective in EG convex program with gradient ascent algorithm (abbreviated as _EG_), which is widely used in the field of market equilibrium computation. Besides, we also consider a momentum version of _EG_ algorithm with momentum \(=0.9\) (abbreviated as _EG-m_). We move the details of all baselines, experimental environments and implementations of algorithms to Appendix C.1 and Appendix C.2.

We also consider a naive allocation and pricing rule (abbreviated as _Naive_), which can be regarded as the benchmark of the experiments:

\[x_{ij}=1, p_{j}=B_{i}}{mV_{j}},i,j \]

In the following experiments, MarketFCNet is abbreviated as _FC_. Notice that _Naive_ always gives an allocation that satisfies market clearance and price constraints, while _EG_, _EG-m_ and _FC_ do not.

### Experiment Results

Comparing with BaselinesWe choose number of buyers \(n=1,048,576=2^{20}\), number of items \(m=10\), CES utilities parameter \(=0.5\) and representation with standard normal distribution as the basic experimental environment of MarketFCNet; We consider \((},}),(), ()\) and the running time of algorithms as the measures. Without special specification, these parameters are default settings among other experiments. Results are presented in Table 1. From these results we can see that the approximations of MarketFCNet are competitive with _EG_ and _EG-m_ and far better than Naive, which means that the solution of MarketFCNet are very close to market equilibrium. MarketFCNet also achieve a much lower running time compared with _EG_ and _EG-m_, which indicates that these methods are more suitable to large-scale market equilibrium computation. In following experiments, \(\) and \(\) measures are omitted and we only report \(\) and running time.

Experiments in different parameters settingsIn this experiments, the market scale is chosen as \(n=4,194,304\) and \(m=10\). We consider experiments on different distribution of representation, including normal distribution, uniform distribution and exponential distribution. See (a) and (b) in Figure 2 for results. We also consider different \(\) in our experimental settings. Specifically, our settings consist of: 1) \(=1\), the utility functions are linear; 2) \(=0.5\), where goods are substitutes; 3) \(=0\), where goods are neither substitutes or complements; 4) \(=-1\), where goods are complements. More detailed results are shown in (c) and (d) Figure 2. The performance of MarketFCNet is robust in both settings.

   Methods & \(\) & VoA & VoP & GPU Time \\   Naive & 3.65e-1 & 0 & 0 & 3.57e-3 \\  EG & 2.17e-2 & 2.620e-1 & 7.031e-2 & 197 \\  EG-m & **2.49e-4** & 6.01e-2 & 9.77e-2 & 100 \\  FC & 1.63e-3 & **1.416e-2** & **6.750e-3** & **43.6**; **9.63e-2** \\   

Table 1: Comparison of MarketFCNet with baselines: \(n=1,048,576\) buyers and \(m=10\) goods. The GPU time for MarketFCNet represents the training time and testing time, respectively.

Different market scale for MarketFCNetIn this section we ask that how market size (here \(n\) and \(m\)) will have impact on the efficiency of MarketFCNet. We set \(m=5,10,20\) and \(n=2^{18}=262,114,2^{20}=1,048,576,2^{22}=4,194,304\) as the experimental settings. For each combination of \(n\) and \(m\), we train MarketFCNet and compared with EG and EG-m, see results in Figure 3. As the market size varies, MarketFCNet has almost the same Nash Gap and running time, which shows the robustness of MarketFCNet method over different market sizes. However, as the market size increases, both EG and EG-m have larger Nash Gaps and longer running times, demonstrating that MarketFCNet is more suitable to large-scale contextual market equilibrium computation.

## 7 Conclusions and Future Work

This paper initiates the problem of large-scale contextual market equilibrium computation from a deep learning perspective. We believe that our approach will pioneer a promising direction for large-scale contextual market equilibrium computation.

For future works, it would be promising to extend these methods to the case when only the number of goods is large, or both the numbers of goods and buyers are large, which stays a blank throughout our works. Since many existing works proposed dynamics for online market equilibrium computation, it's also promising to extend our approaches to tackle the online market setting with large buyers. Besides, both existing works and ours consider sure budgets and values for buyers, and it would be interesting to extend the fisher market and equilibrium concept when the budgets or values of buyers are stochastic or uncertain.

Figure 3: The Nash Gap and GPU running time for different algorithms: MarketFCNet, EG and EG-m. Different colors represent for different algorithm. Market size is chosen as \(n=2^{18},2^{20},2^{22}\) buyers and \(m=5,10,20\) goods.

Figure 2: The Nash Gap and GPU running time for different algorithms: MarketFCNet, EG and EG-m. Different colors represent for different algorithm. Market size is chosen as \(n=4,194,304\) buyers and \(m=10\) goods.