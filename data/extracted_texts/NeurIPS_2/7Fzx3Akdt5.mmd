# Harnessing Multiple Correlated Networks

for Exact Community Recovery

 Miklos Z. Racz

Northwestern University

Evanston, IL 60208

miklos.racz@northwestern.edu

&Jifan Zhang

Northwestern University

Evanston, IL 60208

jifanzhang2026@u.northwestern.edu

###### Abstract

We study the problem of learning latent community structure from multiple correlated networks, focusing on edge-correlated stochastic block models with two balanced communities. Recent work of Gaudio, Racz, and Sridhar (COLT 2022) determined the precise information-theoretic threshold for exact community recovery using two correlated graphs; in particular, this showcased the subtle interplay between community recovery and graph matching. Here we study the natural setting of more than two graphs. The main challenge lies in understanding how to aggregate information across several graphs when none of the pairwise latent vertex correspondences can be exactly recovered. Our main result derives the precise information-theoretic threshold for exact community recovery using any constant number of correlated graphs, answering a question of Gaudio, Racz, and Sridhar (COLT 2022). In particular, for every \(K 3\) we uncover and characterize a region of the parameter space where exact community recovery is possible using \(K\) correlated graphs, even though (1) this is information-theoretically impossible using any \(K-1\) of them and (2) none of the latent matchings can be exactly recovered.

## 1 Introduction

Finding communities in networks--that is, groups of nodes that are similar--is one of the fundamental problems in machine learning. This task is crucially important for understanding the underlying structure and function of networks across diverse applications, including sociology and biology . The increasing availability of network data sets offers the intriguing possibility of improving community recovery algorithms by synthesizing information across correlated networks. However, in many settings the graphs are not aligned--which may happen for a variety of reasons, including anonymization, missing or erroneous data, or simply the alignment being unknown--which presents a challenge. Thus graph matching--the task of recovering the latent vertex alignment between graphs--plays a central role in efforts to integrate data across networks. Our work follows an exciting recent line of work at the intersection of community recovery and graph matching.

Recently, Racz and Sridhar  initiated the study of community recovery in correlated stochastic block models (SBMs), focusing on the simplest setting of two correlated graphs with two balanced communities. They determined the information-theoretic limits for exact graph matching, which has applications for community recovery. In particular, they uncovered a region of the parameter space where exact community recovery is possible using two correlated graphs even though it is information-theoretically impossible to do so using just a single graph. Subsequently, Gaudio, Racz, and Sridhar  determined the information-theoretic limits for exact community recovery from two correlated SBMs. This required going beyond exact graph matching and understanding the subtle interplay between community recovery and graph matching.

Gaudio, Racz, and Sridhar  posed the question of understanding what happens in the case of more than two graphs, which arises naturally in all the motivating examples. For instance, people participate in numerous overlapping yet complementary social networks, and only by combining these can we fully understand and make inferences about society. Similarly, synthesizing information across protein-protein interaction networks from several related species can aid in inferring protein functions . The main challenge lies in understanding how to optimally pass information across three or more graphs.

Our main contribution fully answers this open question by Gaudio, Racz, and Sridhar . Specifically, we precisely characterize the information-theoretic threshold for exact community recovery given \(K\) correlated SBMs, for any constant \(K\). This result highlights an intricate phase diagram and quantifies the value of each additional correlated graph for the task of community recovery. In particular, for every \(K 3\) we uncover and characterize a region of the parameter space where exact community recovery is possible using \(K\) correlated graphs, even though (1) this is impossible using any \(K-1\) of them and (2) none of the latent matchings can be exactly recovered. See Section 3 and Theorems 1 and 2 for details.

Along the way, we also precisely characterize the information-theoretic threshold for exact graph matching given \(K\) correlated SBMs, for any constant \(K\). In particular, we uncover and characterize a region of the parameter space where the latent matching between two correlated SBMs cannot be exactly recovered given just the two graphs, but it can be exactly recovered given \(K>3\) correlated SBMs. See Section 3 and Theorems 3 and 4 for details.

To prove our results, we study the so-called \(k\)-core matching between all pairs of graphs. Recent works have shown the \(k\)-core matching to be a flexible and successful tool in a variety of settings for two correlated graphs [13; 22; 43]. Our main technical contribution is to extend this analysis to more than two graphs. The main difficulty lies in understanding the size of _intersections_ of "bad sets" for \(k\)-core matchings for different pairs of graphs. We refer to Section 4 for details.

## 2 Models and questions

**The stochastic block model (SBM).** The SBM is the most common probabilistic generative model for networks with latent community structure. First introduced by Holland, Laskey, and Leinhardt , it has garnered considerable attention and research. In particular, it can be employed as a natural testbed for evaluating and assessing clustering algorithms on average-case networks . The SBM notably displays sharp information-theoretic phase transitions for various inference tasks, offering a detailed understanding of when community information can be extracted from network data. The phase transition thresholds were conjectured by Decelle et al.  and were proved rigorously in several papers [33; 34; 35; 36; 2; 3]. We refer to the survey  for a detailed overview of the SBM.

In this paper, we focus on the simplest setting, a SBM with two symmetric communities. Let \(n\) be a positive integer and let \(p,q\) be parameters representing probabilities. We construct a graph \(G(n,p,q)\) as follows. The graph \(G\) has \(n\) vertices, labeled by \([n]:=\{1,2,3,,n\}\). Each vertex \(i\) is assigned a community label \(^{*}(i)\) from the set \(\{+1,-1\}\); these are drawn i.i.d. uniformly at random across \(i[n]\). Let \(^{*}:=\{^{*}(i)\}_{i=1}^{n}\) denote the community label vector. The vertices are thus categorized into two communities: \(V^{+}:=\{i[n]:^{*}(i)=+1\}\) and \(V^{-}:=\{i[n]:^{*}(i)=-1\}\). Given the community labels \(^{*}\), the edges of \(G\) are drawn independently between pairs of distinct vertices. If \(^{*}(i)=^{*}(j)\), then the edge \((i,j)\) is in \(G\) with probability \(p\); otherwise, it is in \(G\) with probability \(q\).

**Community recovery.** In the community recovery task, an algorithm takes as input the graph \(G\) (without knowing \(^{*}\)) and outputs an estimated community labeling \(}\). Define the _overlap_ between the estimated labeling and the ground truth as follows:

\[(^{*},}):=|_{i=1}^{n}^{*}(i)(i)|.\]

The overlap measures how well the true community labels and the estimated labels of the algorithm match. Note that \((^{*},})\), where the larger the value is, the better performance the algorithm has. In particular, the algorithm succeeds in exactly recovering the partition into two communities (i.e., \(^{*}=}\) or \(^{*}=-}\)) if and only if \((^{*},})=1\). Our focus in this paper is achieving this goal, known as exact community recovery.

It is well-known that exact community recovery is most challenging and interesting in the logarithmic average degree regime . Accordingly, we focus on this regime: in most of the paper we assume that \(p=a\) and \(q=b\) for some constants \(a,b>0\). In this regime there is a sharp information-theoretic threshold for exact community recovery . Let \(_{+}(a,b):=(-)^{2}/2\) denote the so-called _Chermoff-Hellinger divergence_. Then the information-theoretic threshold is given by

\[_{+}(a,b)=1. \]

In other words, if \(_{+}(a,b)>1\), then exact recovery is possible (and, in fact, efficiently). That is, there is a (polynomial-time) algorithm which outputs an estimator \(}\) with the guarantee that \(_{n}((^{},})=1)=1\). On the other hand, if \(_{+}(a,b)<1\) then exact recovery is impossible: for any estimator \(}\), we have that \(_{n}((^{},})=1)=0\).

**Correlated SBMs.** The objective of our work is to understand how the sharp threshold for exact community recovery varies when the input data involves multiple correlated graphs. To do so, we first define a natural model of multiple correlated SBMs  (and see further discussion in Section 6 about alternative models).

We construct \((G_{1},,G_{K})(n,p,q,s)\) as follows, where the additional parameter \(s\) reflects the degree of correlation between the graphs (and the number of graphs \(K\) is dropped from the notation for ease of readability). First, generate a parent graph \(G_{0}(n,p,q)\) with community labels \(^{}\). Subsequently, given \(G_{0}\), construct \(G^{}_{1},G^{}_{2},,G^{}_{K}\) by independent subsampling. Specifically, each edge of \(G_{0}\) is included in \(G^{}_{i}\) with probability \(s\), independently of everything else, and non-edges of \(G_{0}\) remain non-edges in \(G^{}_{i}\). The graphs \(G^{}_{i}\) inherit both the vertex labels and the community labels from the parent graph \(G_{0}\). Finally, let \(^{*}_{12},,^{*}_{1K}\) be i.i.d. uniformly random permutations of \([n]\) and let \(^{}:=(^{*}_{12},,^{*}_{1K})\). Define \(G_{1}:=G^{}_{1}\) and, for all \(i\{2,,K\}\), define \(G_{i}:=^{*}_{1i}(G^{}_{i})\). In other words, for every \(i>1\) and \(j[n]\), vertex \(j\) in \(G^{}_{i}\) is relabeled to \(^{*}_{1i}(j)\) in \(G_{i}\). This last relabeling step mirrors the real-world observation that vertex labels are often unaligned across graphs. This construction is shown in Figure 1.

An important property of the model is that marginally each graph \(G_{i}\) is an SBM. Since the subsampling probability is \(s\), we have that \(G_{i}(n,ps,qs)\). Thus, it follows from (2.1) that, in the logarithmic average degree regime where \(p=a\) and \(q=b\), the communities can be exactly recovered from \(G_{1}\) alone precisely when \(s_{+}(a,b)=D_{+}(sa,sb)>1\).

The key question in our work is how to improve the threshold by incorporating more information as \(K\), the number of correlated SBMs, increases. This question was initiated by Racz and Sridhar  and then solved by Gaudio, Racz, and Sridhar  when \(K=2\).

An essential observation is that, to go beyond the threshold, one needs to combine information from the \(K\) graphs \(G_{1},,G_{K}\) through graph matching. Then one can exactly recover the community labels using the combined information, even in regimes where it is information-theoretically impossible to exactly recover \(^{}\) given up to \(K-1\) graphs.

To be more specific, if \(^{}\) were known, then one can reconstruct \(G^{}_{j}\) from \(G_{j}\) and then combine the graphs \(G^{}_{1},,G^{}_{K}\) to obtain the union graph \(H^{*}\), defined as follows: the edge \((i,j)\) is included in

Figure 1: Schematic showing the construction of multiple correlated SBMs (see text for details).

\(H^{*}\) if and only if \((i,j)\) is included in at least one of \(G_{1}^{},,G_{K}^{}\). Note that \(H^{*}\) is also an SBM; specifically, \(H^{*}(n,(1-(1-s)^{K})p,(1-(1-s)^{K}) q)\), so (2.1) directly implies that the communities can be exactly recovered from the union graph \(H^{*}\) if \((1-(1-s)^{K})_{+}(a,b)>1\).

**Graph matching.** In real applications, the permutations \(}=(_{12}^{*},,_{1K}^{*})\) are often not known. The arguments above highlight the importance of an intermediate task, known as graph matching: how can one recover the latent permutations \(}\) given the graphs \((G_{1},G_{2},,G_{K})\)? While here we regard graph matching as an important intermediate step, it is of great significance in its own right, with applications in social network privacy , machine learning , and more. For two correlated SBMs, this problem was resolved by Racz and Sridhar , who proved that the information-theoretic threshold for (pairwise) exact graph matching is \(s^{2}(a+b)/2=1\). Note that this is also the connectivity threshold for the intersection graph of \(G_{1}\) and \(G_{2}^{}\) (see ). Denote

\[_{}(a,b):=. \]

With this notation, the (pairwise) exact graph matching threshold is given by \(s^{2}_{}(a,b)=1\). This directly implies (by a union bound) that if \(s^{2}_{}(a,b)>1\), then \(}\) can be exactly recovered given \((G_{1},G_{2},,G_{K})(n,a,b {n},s)\), for any constant \(K\). By the discussion above, this also gives a sufficient condition for exact community recovery given \((G_{1},G_{2},,G_{K})(n,a,b,s)\):

\[s^{2}_{}(a,b)>1(1-(1-s)^{K} )_{+}(a,b)>1. \]

We will generalize the exact graph matching result of Racz and Sridhar  and show (see Theorem 3 below) that \(}\) can be exactly recovered given \((G_{1},G_{2},,G_{K})(n,a,b,s)\) if

\[s(1-(1-s)^{K-1})_{}(a,b)>1, \]

which (for \(K>2\)) is weaker than the condition \(s^{2}_{}(a,b)>1\) implied by . (Moreover, in Theorem 4 we show that the condition in (2.4) is tight for exact recovery of \(}\).) Thus, by the discussion above, this gives a sufficient condition for exact community recovery given \((G_{1},G_{2},,G_{K})(n,a,b,s)\):

\[s(1-(1-s)^{K-1})_{}(a,b)>1 (1-(1-s)^{K})_{+}(a,b)>1. \]

**The interplay between community recovery and graph matching.** The condition (2.5) is, however, not tight. To attain the sharp threshold for exact community recovery given \(K\) graphs, we need to answer the following question: does there exist a parameter regime where exact community recovery is possible for \(K\) graphs, even though (1) exact graph matching is impossible, and (2) exact community recovery is impossible using only \(K-1\) graphs?

For \(K=2\) graphs, Gaudio, Racz, and Sridhar  proved that the sharp threshold for exact community recovery given \(K\) correlated SBMs is given by

\[s^{2}_{}(a,b)+s(1-s)_{+}(a,b)>1 (1-(1-s)^{2})_{+}(a,b)>1. \]

The condition \((1-(1-s)^{2})_{+}(a,b)>1\) is necessary due to the work . The first condition in (2.6) demonstrates the interplay between community recovery and graph matching. To be more specific, the first term \(s^{2}_{}(a,b)\) is the threshold for exact graph matching given \((G_{1},G_{2})\), while the second term \(s(1-s)_{+}(a,b)\) comes from community recovery.

Our main contribution generalizes this result, determining the exact community recovery threshold for \(K 3\) graphs. If \((1-(1-s)^{K})_{+}(a,b)>1\), then the sharp threshold is given by

\[s(1-(1-s)^{K-1})_{}(a,b)+s(1-s)^{K-1} _{+}(a,b)>1. \]

The condition (2.7) also clearly exhibits the interplay between community recovery and graph matching. The first term comes from graph matching, while the second term comes from community recovery, as in the case of \(K=2\). We refer to Section 3 and Theorems 1 and 2 for details.

Despite the apparent similarity in results, when \(K 3\) the situation differs significantly from that of two graphs. The primary challenge lies in the existence of multiple methods for matching \(K 3\) graphs. When \(K=2\), there is only a single matching that needs to be recovered from \(G_{1}\) and \(G_{2}\). In contrast, with three or more graphs, the graphs can be matched pairwise, or to some anchor graph, or potentially in many other ways. Integrating information across different matchings requires substantial additional effort. We present the formal results in the next section.

Results

Our main contributions are to determine the precise information-theoretic thresholds for exact community recovery and for exact graph matching given \(K\) correlated SBMs.

### Threshold for exact community recovery

We first describe the precise information-theoretic threshold for exact community recovery, starting with the positive direction.

**Theorem 1** (Exact community recovery from \(K\) correlated SBMs).: _Fix constants \(a,b>0\) and \(s\), and let \((G_{1},G_{2},,G_{K})(n,a,b,s)\). Suppose that the following two conditions both hold:_

\[(1-(1-s)^{K})_{+}(a,b)>1 \]

_and_

\[s(1-(1-s)^{K-1})_{}(a,b)+s(1-s)^{K-1}_{+}(a,b)>1. \]

_Then exact community recovery is possible. That is, there is an estimator \(}=}(G_{1},G_{2}, ,G_{K})\) such that \(_{n}((},^{})=1)=1\)._

Combined with Theorem 2 below (which shows that Theorem 1 is tight), this result precisely answers an open problem of Gaudio, Racz, and Sridhar . The condition (3.1) is required for exact community recovery for \(K\) graphs by . We now focus on the condition (3.2). In the prior work , it is proved that the threshold for exact community recovery for two graphs is given by (2.6). The primary contribution of Theorem 1 is to go beyond this threshold as the number of graphs \(K\) increases. In particular, this showcases that there exists a regime where (1) it is impossible to exactly recover \(^{}\) from \((G_{1},G_{2},,G_{K-1})\) alone and (2) any exact graph matching is impossible, yet one can perform exact recovery of \(^{}\) given \((G_{1},G_{2},,G_{K})\). This requires developing novel algorithms that integrate information from \((G_{1},G_{2},,G_{K})\) delicately and incorporate multiple graph matchings carefully.

Here we first provide a detailed discussion of the algorithms for three graphs \((G_{1},G_{2},G_{3})(n,a,b,s)\), which is the simplest case with intriguing new phenomena and challenges as mentioned. This avoids complicated notations (which arise for general \(K\)) for easier understanding. The new techniques used for combining multiple matchings and integrating information with three graphs are subsequently generalized to \(K>3\) correlated SBMs. The high level idea of the algorithm for exact community recovery when \(K=3\) consists of five steps (in the following discussion we assume \(a>b\); when \(a<b\), change majority to minority everywhere):

1. Obtain an almost exact community labeling of \(G_{1}\).
2. Obtain three pairwise partial almost exact graph matchings \(_{12}\), \(_{13}\), and \(_{23}\) between graph pairs \((G_{1},G_{2})\), \((G_{1},G_{3})\), and \((G_{2},G_{3})\), respectively.
3. For vertices in \(G_{1}\) that are part of at least two matchings, refine the almost exact community labeling in Step 1 via majority vote in the (union) graph consisting of edges that appear at least once in \((G_{1},G_{2},G_{3})\).
4. For vertices in \(G_{1}\) that are part of only \(_{12}\) (resp. \(_{13}\)), label them via majority vote of their neighbors' labels in the graph consisting of edges that appear only in \(G_{1}\) and not in \(G_{2}\) (resp. only in \(G_{1}\) and not in \(G_{3}\)).
5. For vertices in \(G_{1}\) that are not part of any of the three matchings or only part of \(_{23}\), label them via majority vote of their neighbors' labels in \(G_{1}\).

Each step in the algorithm involves abundant technical details. See Section 4 for a detailed overview of the algorithms and proofs. Note that the threshold (3.2) captures the interplay between community recovery and graph matching, which we now discuss in more detail.

The first term in (3.2), which is \(s(1-(1-s)^{2})_{}(a,b)\) for \(K=3\), comes from graph matching. In  it is shown that for one matching, say \(_{12}\), the best possible almost exact graph matching makes \(n^{1-s^{2}_{}(a,b)+o(1)}\) errors. Here, we show that it is possible to obtain almost exact matchings \(_{12}\) and \(_{13}\) (namely, these will be \(k\)-core matchings; see Section 4 for details) such that the size of the _intersection_ of the two error sets is \(n^{1-s(1-(1-s)^{2})_{}(a,b)+(1)}\), which is a smaller power of \(n\). This quantifies how synthesizing information across graph matchings can reduce errors and this exponent is precisely what shows up in the first term in (3.2). This observation is important and relevant for Steps 4 and 5 in the algorithm.

On the other hand, the second term in (3.2), which is \(s(1-s)^{2}_{+}(a,b)\) for \(K=3\), comes from community recovery. In fact, this term arises from the majority votes in Step 5, where we use only edges in \(G_{1}\). Note that the nodes that are unmatched by \(_{12}\) and \(_{13}\) are, roughly speaking, the isolated nodes in the intersection graphs of \(G_{1}\) and \(G_{2}\), and \(G_{1}\) and \(G_{3}\), respectively. Thus, while we use all edges in \(G_{1}\) in this step, the relevant edges are not present in \(G_{2}\) nor in \(G_{3}\), giving the "effective" factor of \(s(1-s)^{2}\). By (2.1), the exact community recovery threshold for \((n,s(1-s)^{2}a,s(1-s)^{2}b)\) is \(s(1-s)^{2}_{+}(a,b)=1\), giving the second term in (3.2). The following impossibility result shows the tightness of Theorem 1.

**Theorem 2** (Impossibility of exact community recovery).: _Fix constants \(a,b>0\) and \(s\), and let \((G_{1},G_{2},,G_{K})(n,a,b {n},s)\). Suppose that either_

\[(1-(1-s)^{K})_{+}(a,b)<1 \]

_or_

\[s(1-(1-s)^{K-1})_{}(a,b)+s(1-s)^{K-1} _{+}(a,b)<1. \]

_Then exact community recovery is impossible. That is, for any estimator \(}=}(G_{1},G_{2}, ,G_{K})\), we have that \(_{n}((},})=1)=0\)._

Impossibility of exact community recovery given \(K\) graphs under the condition (3.3) is proved in . Hence, Theorem 2 focuses on proving impossibility for exact community recovery given \(K\) graphs under the condition (3.4). In particular, condition (3.4) reveals a parameter regime where exact community recovery from \((G_{1},G_{2},,G_{K})\) is impossible, yet, if \(^{*}\) were known, then exact community recovery would be possible based on the (correctly matched) union graph.

Theorems 1 and 2 combined give the tight threshold for exact community recovery for general \(K\) correlated SBMs, see (2.7). Fig. 2 exhibits phase diagrams illustrating the results for three graphs.

### Threshold for exact graph matching

The techniques that we develop in order to prove Theorems 1 and 2 also allow us to solve the question of exact graph matching, that is, exactly recovering \(^{*}=(_{12}^{*},,_{K}^{*})\) from \((G_{1},G_{2},,G_{K})\). In the context of correlated SBMs and community recovery, exact graph matching can be thought of as an intermediate step towards exact community recovery. However, more generally, graph matching is a fundamental inference problem in its own right; see Section 5 for discussion of related work. We start with the positive direction in the following theorem.

**Theorem 3** (Exact graph matching from \(K\) correlated SBMs).: _Fix constants \(a,b>0\) and \(s\), and let \((G_{1},G_{2},,G_{K})(n,a,b {n},s)\). Suppose that_

\[s(1-(1-s)^{K-1})_{}(a,b)>1. \]

_Then exact graph matching is possible. That is, there exists an estimator \(}=}(G_{1},G_{2},,G_{K })=(_{12},,_{1K})\) such that \(_{n}(}(G_{1},G_{2}, ,G_{K})=^{*})=1\)._

Since the condition in (3.5) is weaker than \(s^{2}_{}(a,b)>1\) (which is the threshold for exact graph matching for \(K=2\), as shown in ), Theorem 3 implies that there exists a parameter regime where \(_{12}\) cannot be exactly recovered from \((G_{1},G_{2})\), but \(}\) can be exactly recovered from \((G_{1},G_{2},,G_{K})\). In other words, it is necessary to combine information across all graphs in order to recover \(}\) (and even just to recover \(_{12}\)).

The estimator \(}\) in Theorem 3 is based on pairwise \(k\)-core matchings (see Sec. 4 for further details). Roughly speaking, for each pairwise \(k\)-core matching the number of unmatched vertices is \(n^{1-s^{2}_{}(a,b)+o(1)}\); however, we shall show that the number of vertices which cannot be matched through some combination of pairwise \(k\)-core matchings is \(n^{1-s(1-(1-s)^{K-1})_{}(a,b)+o(1)}\), which is of smaller order. So, when \(s(1-(1-s)^{K-1})_{}(a,b)>1\), then exact graph matching is possible. The following impossibility result shows the tightness of Theorem 3.

**Theorem 4** (Impossibility of exact graph matching from \(K\) correlated SBMs).: _Fix constants \(a,b>0\) and \(s\), and let \((G_{1},G_{2},,G_{K})(n,,,s)\). Suppose that_

\[s(1-(1-s)^{K-1})_{}(a,b)<1. \]

_Then exact graph matching is impossible. That is, for any estimator \(}=}(G_{1},G_{2},,G_ {K})=(_{12},_{1K})\) we have that \(_{n}(}(G_{1},G_{2}, ,G_{K})=^{*})=0\)._

Theorems 3 and 4 combined give the tight threshold for exact graph matching for general \(K\) correlated SBMs, see (2.4). We note that, in independent and concurrent work , Ameen and Hajek derived the threshold for exact graph matching from \(K\) correlated Erdos-Renyi random graphs; in other words, they proved Theorems 3 and 4 in the special case of \(a=b\).

Comparing Theorems 3 and 4 with Theorems 1 and 2, note that there exists a parameter regime where exact community recovery is possible even though exact graph matching is impossible.

## 4 Overview of algorithms and proofs

In this section we elaborate on the technical details of the community recovery algorithm, for which high-level ideas were presented in Section 3. We focus our discussion on the setting of \(K=3\) graphs, which already captures the main technical challenges; we highlight these and explain how

Figure 2: Phase diagram for exact community recovery for three graphs with fixed \(s\), and \(a\), \(b\) on the axes. _Green region_: exact community recovery is possible from \(G_{1}\) alone; _Cyan region_: exact community recovery is impossible from \(G_{1}\) alone, but exact graph matching of \(G_{1}\) and \(G_{2}\) is possible, and subsequently exact community recovery is possible from \((G_{1},G_{2})\); _Dark Blue region_: exact community recovery is impossible from \(G_{1}\) alone, exact graph matching is also impossible from \((G_{1},G_{2})\), yet exact community recovery is possible from \((G_{1},G_{2})\); _Pink region_: exact community recovery is impossible from \((G_{1},G_{2})\) (even though it would be possible if \(_{12}^{*}\) were known), yet exact community recovery is possible from \((G_{1},G_{2},G_{3})\); _Violet region_: exact community recovery is impossible from \((G_{1},G_{2},G_{3})\) (even though it would be possible from \((G_{1},G_{2})\) if \(_{12}^{*}\) were known); _Light Green region_: exact community recovery is impossible from \((G_{1},G_{2})\), but exact graph matching of graph pairs is possible, and subsequently exact community recovery is possible from \((G_{1},G_{2},G_{3})\); _Grey region_: exact community recovery is impossible from \((G_{1},G_{2})\), exact graph matching is possible from \((G_{1},G_{2},G_{3})\), and subsequently exact community recovery is possible from \((G_{1},G_{2},G_{3})\); _Yellow region_: exact community recovery is impossible from \((G_{1},G_{2})\), exact graph matching is impossible from \((G_{1},G_{2},G_{3})\), yet exact community recovery is possible from \((G_{1},G_{2},G_{3})\); _Orange region_: exact community recovery is impossible from \((G_{1},G_{2},G_{3})\) (even though it would be possible from \((G_{1},G_{2},G_{3})\) if \(^{*}\) were known); _Red region_: exact community recovery is impossible from \((G_{1},G_{2},G_{3})\) (even if \(^{*}\) is known). The principal finding of this paper is the characterization of the Pink, Violet, Orange, Yellow, Grey, and Light Green regions.

we overcome them. We subsequently explain the generalization from \(3\) graphs to \(K\) graphs. The overview of the impossibility proof is discussed as well.

\(k\)**-core matching.** We now define a \(k\)-core matching , which is used for almost exact graph matching in Step 2. Given a pair of graphs \((G,H)\) with vertex set \([n]\), for any permutation \(\), we have the corresponding intersection graph \(G_{}H\), where \((i,j)\) is an edge in the intersection graph if and only if \((i,j)\) is an edge in \(G\) and \(((i),(j))\) is an edge in \(H\). The \(k\)-core estimator explores all possible permutations \(\) of \([n]\) to seek a permutation \(\) that maximizes the size of the \(k\)-core of the intersection graph \(G_{}H\); recall that the \(k\)-core of a graph is the maximal induced subgraph for which all vertices have degree at least \(k\). The output of the \(k\)-core estimator is then a partial matching \(\), which is the restriction of \(\) to the vertex set of the \(k\)-core in \(G_{}H\).

One significant advantage of using \(k\)-core matchings is a certain optimality property in terms of performance. Specifically, if \((G_{1},G_{2})(n,a,b,s)\), then the \(k\)-core estimator between \(G_{1}\) and \(G_{2}\) fails to match at most \(n^{1-s^{2}T_{e}(a,b)+o(1)}\) vertices, which is the same order as the number of singletons of \(G_{1}_{_{12}^{*}}G_{2}\) and any graph matching algorithm would fail to match these singletons . Another significant benefit of utilizing \(k\)-core matchings is the correctness of the \(k\)-core estimator for correlated SBMs, as discussed in . The \(k\)-core estimator might not be able to match all vertices under the parameter regime that we are interested in; however, every vertex that it does match is matched correctly with high probability.

**Community recovery subroutines.** The high-level summary of the algorithm is as follows. Since exact community recovery might be impossible in \(G_{1}\) alone, we first obtain an initial estimate which gives almost exact community recovery in \(G_{1}\), as described in Step 1. In Step 2, we use pairwise partial \(k\)-core matchings with \(k=13\) to obtain \(}:=\{_{12},_{13},_{23}\}\) (see Fig. 2(b)), which we will use to combine information across \((G_{1},G_{2},G_{3})\) to recover communities. Note that each partial matching \(_{ij}\) only matches a subset of the vertices, denoted as \(M_{ij}\); we denote the set of vertices not matched by \(_{ij}\) by \(F_{ij}:=[n] M_{ij}\). Subsequently, we split the vertices into two categories: "good" vertices and "bad" vertices, where "good" vertices are part of at least two matchings and "bad" vertices are part of at most one matching (see Fig. 2(a)). We conduct several majority votes among "good" and "bad" vertices to do the clean-up after the graph matching phase, where each subroutine is meticulously executed to disentangle the intricate dependencies among \((G_{1},G_{2},G_{3})\) and \(}\).

**Exact community recovery for the "good" vertices.** The major distinction between being "good" and being "bad" is that "good" vertices can combine information from all three graphs via their union graph (which is denser), whereas "bad" vertices cannot. Suppose that vertex \(i\) is part of \(_{12}\) and \(_{13}\) (i.e., \(i M_{12} M_{13}\)). We can then identify the union graph \(G_{1}_{_{12}}G_{2}_{_{13}}G_{3}\), which consists of edges \((i,j)\) such that \((i,j)\) is an edge in \(G_{1}\) or \((_{12}(i),_{12}(j))\) is an edge in \(G_{2}\) or \((_{13}(i),_{13}(j))\) is an edge in \(G_{3}\), and \(i\) is part of this union graph. Similarly, if \(i M_{12} M_{23}\), then \(i\) is part of the union graph \(G_{1}_{_{12}}G_{2}_{_{23} us to quantify the size of \(F_{12} F_{13}\) and meanwhile directly ensure that "good" vertices within the \(k\)-core are only weakly connected with "bad" vertices.

Another hurdle needed to overcome, as stated in , concerns the almost exact community recovery in Step 1 which is subsequently used for majority votes. Therefore, it is of great importance to guarantee that the incorrectly-classified vertices are not well-connected and do not have a great impact on majority votes. Consequently, we utilize an algorithm originally developed by Mossel, Neeman, and Sly  which allows us to manage the geometry of the misclassified vertices and demonstrate that the vertices classified incorrectly are indeed only weakly connected.

**Exact community recovery for the "bad" vertices.** The remaining step is to label the "bad" vertices. The "bad" vertices can be further classified into three categories (see Fig. 3a): vertices in \(F_{12} F_{13}\), which are only matched by \(_{23}\) or are not matched by any of the three matchings; vertices in \(F_{13} F_{23} F_{12}\), which are only matched by \(_{12}\); and vertices in \(F_{12} F_{23} F_{13}\), which are only matched by \(_{13}\).

Consider the vertices in \(F_{12} F_{13}\) (the other cases are similar). First of all, as discussed above, we show that \(|F_{12} F_{13}|=n^{1-s(1-(1-s)^{2})_{e}(a,b)+o(1)}\) with high probability. Consider the graph \(G_{1}_{_{12}}G_{2}_{_{13}}G_{3}\), which consists of the edges \((i,j)\) in \(G_{1}\) such that \((_{12}(i),_{12}(j))\) and \((_{13}(i),_{13}(j))\) are not edges in \(G_{2}\) and \(G_{3}\), respectively. Due to the approximate independence of \(F_{12} F_{13}\) and \(G_{1}_{_{12}}G_{2}_{_{13}}G_{3}\), for a vertex \(i F_{12} F_{13}\) we can calculate the probability of the failure of the majority vote in the graph \(G_{1}_{_{12}}G_{2}_{_{13}}G_{3}\) in a relatively straightforward manner, giving \(n^{-s(1-s)^{2}_{+}(a,b)+o(1)}\). The factor \(s(1-s)^{2}\) arises from the fact that the edges in this graph are subsampled in \(G_{1}\) and are not subsampled in \(G_{2}\) and \(G_{3}\). Now since a vertex in \(F_{12} F_{13}\) can have at most \(12\) edges outside of \(F_{12}\) in \(G_{1}_{_{12}}G_{2}\), and also at most \(12\) edges outside of \(F_{13}\) in \(G_{1}_{_{13}}G_{3}\), the majority vote for \(i F_{12} F_{13}\) essentially does not change whether it is performed in \(G_{1}\) or in \(G_{1}_{_{12}}G_{2}_{_{13}}G_{3}\). Putting all this together, the probability that the majority vote fails is at most:

\[( F_{13}$ such that the majority vote fails})\] \[=|F_{12} F_{13}|()=n^{1-s(1-(1-s)^{2})_{e}(a,b)-s(1-s)^{2}_{+}(a,b)+o(1)}.\]

Thus, if (3.2) with \(K=3\) holds, then majority vote will correctly classify all vertices in \(F_{12} F_{13}\).

**Generalization to \(K\) graphs.** For \(K\) graphs, we have \(\) pairwise matchings to consider (see Fig. 3b). We again categorize the vertices as "good" and "bad". The "good" vertices can integrate information across all \(K\) graphs through the pairwise partial \(k\)-core matchings \(\{_{ij}:i,j[K],i j\}\), while "bad" vertices cannot. To illustrate this concept more vividly, for any vertex \(v\), consider a new "metagraph" \(_{v}\) on \(K\) nodes, defined as follows: there is an edge between \(i\) and \(j\) in \(_{v}\) if and only if \(v\) can be matched through \(_{ij}\) (see Fig. 4). If the metagraph \(_{v}\) is connected, then there exists a path that can connect all of its \(K\) nodes. Equivalently, there exists a set of matchings that allows us to combine information across all \(K\) graphs. Subsequently, we quantify the number of "bad" vertices to be \(n^{1-s(1-(1-s)^{K-1})_{e}(a,b)+o(1)}\). The remaining analysis for \(K\) graphs can be derived by generalizing the analysis for three graphs.

**Impossibility proof.** As discussed in Section 3, we focus on the proof of (3.4) for impossibility. We compute the maximum a posterior (MAP) estimator for the communities in \(G_{1}\). We show that, even with significant additional information provided, including all the correct community labels in \(G_{2}\), the true matchings \(^{*}_{ij}\) for \(i,j\{2,3,,K\}\), and most of the true matching \(^{*}_{12}\) except for singletons in the graph \(G_{1}_{^{*}_{12}}(G_{2} G_{K})\), the MAP estimator fails to exactly recovery communities with probability bounded away from 0 if (3.4) holds. The proof is adapted from the MAP analysis in . The difference is that here we are considering \(K\) graphs \(G_{1},G_{2},,G_{K}\) with different additional information provided for the MAP estimator. Given that the MAP estimator is ineffective under this regime, all other estimators also fail.

**Exact graph matching threshold.** The proof of the exact graph matching threshold is implicitly present in the proof of the exact community recovery threshold. Essentially, since we show that the number of "bad" vertices is \(n^{1-s(1-(1-s)^{K-1})_{e}(a,b)+o(1)}\), the condition (3.5) implies that there are no "bad" vertices with high probability. Since all vertices are "good", and "good" vertices can integrate information across all \(K\) graphs, the latent matchings can be recovered exactly. For the impossibility result we analyze the MAP estimator and show that, even with significant additional information, including the true matchings \(\{^{*}_{ij}:i,j\{2,3,,K\}\}\), it fails if (3.6) holds.

Related work

Our work generalizes--and solves an open question raised by--the work of Gaudio, Racz, and Sridhar . Just as , our work lies at the interface of the literatures on community recovery and graph matching1--two fundamental learning problems--which we briefly summarize here.

**Community recovery in SBMs.** A huge research literature exists on learning latent community structures in networks, and this topic is especially well understood for the SBM [25; 15; 34; 35; 33; 36; 2; 3; 7]. Specifically, we highlight the work of [2; 35], which identify the precise threshold for exact community recovery for SBMs with two balanced communities. Our algorithm builds upon their analysis, taking particular care about dealing with the dependencies arising from the multiple inexact partial matchings between \(K\) correlated graphs.

**Graph matching: correlated Erdos-Renyi random graphs.** The past decade has seen a plethora of research on average-case graph matching, focusing on correlated Erdos-Renyi random graphs . The information-theoretic thresholds for recovering the latent vertex correspondence \(^{*}\) have been established for exact recovery [11; 46; 12], almost exact recovery , and weak recovery [20; 21; 24; 46; 16]. In parallel, a line of work has focused on algorithmic advances [37; 6; 18; 19; 30; 31; 32], culminating in recent breakthroughs that developed efficient graph matching algorithms in the constant noise setting [31; 32]. We particularly highlight the work of Cullina, Kiyavash, Mittal, and Poor , who introduced \(k\)-core matchings and showed their utility for partial matching of correlated Erdos-Renyi random graphs. Subsequent work has shown the power of \(k\)-core matchings as a flexible and successful tool for graph matching [22; 43; 4]. Our work both significantly builds upon these works, as well as further develops this machinery, which may be of independent interest. We also note the independent and concurrent work of Ameen and Hajek which determined the exact graph matching threshold for \(K\) correlated Erdos-Renyi random graphs .

**Graph matching: beyond correlated Erdos-Renyi random graphs.** Motivated by real-world networks, a growing line of recent work studies graph matching beyond Erdos-Renyi graphs [8; 26; 9; 42; 49; 41; 22; 45; 43; 17; 48; 47], including for correlated SBMs [29; 39; 28; 41; 22; 48; 47]. The works that are most relevant to ours are [41; 22], which have been discussed extensively above.

## 6 Discussion and Future Work

Our main contribution highlights the power of integrative data analysis for community recovery, yet many open questions still remain.

**Efficient algorithms.** Theorem 1 characterizes when exact community recovery is information-theoretically possible from \(K\) correlated SBMs. Is this possible _efficiently_ (i.e., in time polynomial in \(n\))? The bottleneck in the algorithm that we use to prove Theorem 1, which makes it inefficient, is the \(k\)-core matching step; the other steps are efficient. Recent breakthrough results have developed efficient graph matching algorithms for correlated Erdos-Renyi random graphs [31; 32], which promisingly suggest that an efficient algorithm for exact community recovery may indeed exist in this regime. We refer to  for further discussion on this point.

**General block models.** We focused here on the simplest case of SBMs with two balanced communities. It would be interesting to extend these results to general block models with multiple communities. This is understood well in the single graph setting  and recent work has also characterized the threshold for exact graph matching for two correlated SBMs with \(k\) symmetric communities .

**Alternative constructions of correlated graphs.** An exciting research direction is to study different constructions of correlated graph models. For general \(K\), there are many ways that \(K\) graphs can be correlated. In particular, the following is a natural alternative construction of multiple correlated SBMs. First, generate \(G_{0}(n,p,q)\). Then, independently generate \(H_{i}(n,p^{},q^{})\) for \(i[K]\). Construct \(G^{}_{i}:=G_{0} H_{i}\), and finally generate \(G_{i}\) through an independent random permutation of the vertex indices in \(G^{}_{i}\). This construction is equivalent to the one we studied in this paper for \(K=2\) and it is different when \(K 3\), and investigating it is interesting and valuable.