# CausalDiff: Causality-Inspired Disentanglement

via Diffusion Model for Adversarial Defense

 Mingkun Zhang

CAS Key Laboratory of AI Safety

Institute of Computing Technology, CAS

zhangmingkun20z@ict.ac.cn &Keping Bi

Key Laboratory of Network

Data Science and Technology

Institute of Computing Technology, CAS

bikeping@ict.ac.cn &Wei Chen

CAS Key Laboratory of AI Safety

Institute of Computing Technology, CAS

chenwei2022@ict.ac.cn &Quanrun Chen

School of Statistics University

of International Business and Economics

qchen@uibe.edu.cn &Jiafeng Guo

Key Laboratory of Network

Data Science and Technology

Institute of Computing Technology, CAS

guojiafeng@ict.ac.cn &Xueqi Cheng

CAS Key Laboratory of AI Safety

Institute of Computing Technology, CAS

cxq@ict.ac.cn

Corresponding Author.

CAS stands for Chinese Academy of Sciences

###### Abstract

Despite ongoing efforts to defend neural classifiers from adversarial attacks, they remain vulnerable, especially to unseen attacks. In contrast, humans are difficult to be cheated by subtle manipulations, since we make judgments only based on essential factors. Inspired by this observation, we attempt to model label generation with essential label-causative factors and incorporate label-non-causative factors to assist data generation. For an adversarial example, we aim to discriminate the perturbations as non-causative factors and make predictions only based on the label-causative factors. Concretely, we propose a casual diffusion model (CausalDiff) that adapts diffusion models for conditional data generation and disentangles the two types of casual factors by learning towards a novel casual information bottleneck objective. Empirically, CausalDiff has significantly outperformed state-of-the-art defense methods on various unseen attacks, achieving an average robustness of 86.39% (+4.01%) on CIFAR-10, 56.25% (+3.13%) on CIFAR-100, and 82.62% (+4.93%) on GTSRB (German Traffic Sign Recognition Benchmark). The code is available at [https://github.com/CAS-AISafetyBasicResearchGroup/CausalDiff](https://github.com/CAS-AISafetyBasicResearchGroup/CausalDiff).

## 1 Introduction

Neural classifiers, despite their impressive performance in various applications, are susceptible to adversarial attacks , which can deceive them into making erroneous judgments on subtly manipulated examples. Such vulnerabilities pose severe threats in safety-critical scenarios such as face recognition  and autonomous driving . There has been extensive work on defending against adversarial attacks such as certified defenses , adversarial training , and adversarial purification Samangouei et al. .

Although effective, these methods have some limitations. Certified defense methods have limited practicality due to the small certified region that can theoretically guarantee robustness. Adversarial training approaches suffer from a significant decline in robustness against unseen attacks since they take effect by adding adversarial examples into the training set. Purification methods, not designed for specific attacks, struggle to determine the optimal denoising level for unforeseen attacks with differing degrees of perturbation. Consequently, they face challenges in effectively defending against unseen attacks.

In reality, attack behaviors are often unpredictable. Is there a way of strengthening a model to act like humans, i.e., be insensitive to subtle perturbations and robust against various unforeseen attacks? Given an image of an object, we typically identify the key visual features that are necessary to determine its category and disregard other factors such as styles, backgrounds, details, or perturbations. This allows us to make robust judgments. Inspired by this human decision-making process, we would like to learn a model that can disentangle the essential features for determining the category from other non-essential ones.

It is natural to treat the essential features as the causal factors of the label, and both essential and the other features as the causal factors of the entire image. Then, we can learn to disentangle them by modeling the process of data generation and label prediction with a structural causal model (SCM) (shown in Fig. 1 (Left)). According to the theoretical results provided by Liu et al. , the identifiability of such scm can be guaranteed under mild conditions. Although similar scm have also been employed in modeling the generation of multi-domain data  and adversarial examples , they either aim to enhance out-of-distribution robustness or protect the model from a certain type of attack. In contrast, our research focuses on modeling the generation of native in-domain data to enhance adversarial robustness against various unseen attacks.

Fig. 1 (Left) depicts our scm, where \(Y\) denotes the category (e.g., horse) of an input image \(X\); \(S\) denotes the essential semantic features of determining \(Y\) (i.e., \(Y\)-causative factors), such as the characteristics of eyes, ears, nose, mouth, etc. of horses; and \(Z\) represents the other features (i.e., \(Y\)-non-causative factors) that are not needed to predict \(Y\) but are important to generate \(X\), such as the fur color and the image background. Given an adversarial example produced by an unknown attack, our model aims to disentangle its \(Y\)-causative features \(S\) from the spurious factors in \(Z\) and make a robust prediction. To successfully learn the disentanglement, our scm is guided by the tasks of data generation and label prediction, where there are three major challenges:

1) How do we model the conditional generation of \(X\) given \(S\) and \(Z\) effectively? To this end, we employ a well-recognized diffusion model with state-of-the-art (SOTA) generative performance and

Figure 1: Illustration of training (Left) and inference (Right) processes of our proposed CausalDiff model. During training, the model constructs a structural causal model leveraging a conditional diffusion model, disentangling the (label) Y-causative feature \(S\) and the Y-non-causative feature \(Z\) through maximization of the Causal Information Bottleneck (CIB). In the inference stage, CausalDiff first purifies an adversarial example \(\), yielded by perturbing \(X\) according to the target victim model parameterized by \(\), to obtain the benign counterpart \(X^{*}\). Then, it infers the Y-causative feature \(S^{*}\) for label prediction. We visualize the vectors of \(S\) and \(Z\) inferred from a perturbed image of a horse using a diffusion model. We find that \(S\) captures the general concept of a horse, even when the input image only shows the head, while \(Z\) carries information about the horseâ€™s skin color.

efficiency, i.e., the Denoising Diffusion Probabilistic Model (DDPM) , as the backbone. We further adapt it for conditional generation from latent variables rather than random noise. 2) What training objective should we use to effectively learn the disentanglement of \(S\) and \(Z\)? With this regard, we propose a Causal Information Bottleneck (\(\)) optimization objective. CIB aligns the information in the latent variables \((S,Z)\) with observed variables \((X,Y)\) with a bottleneck set by the mutual information (MI) between \(S,Z\) and \(X\). The derived function will minimize the MI between \(S\) and \(Z\) while learning the other causal relations, ensuring their disentanglement within the causal framework. 3) Given an adversarial example, what inference strategies shall we adopt to make robust predictions? As shown in Fig. 1 (Right), according to how the adversarial example \(\) is generated, we first purify it to yield a benign example \(X^{*}\) and then infer the Y-causative factor \(S\) based on \(X^{*}\) for final classification. We name the entire causal defense framework based on diffusion models as CausalDiff.

The experimental results on facing various unseen attacks, encompassing both black-box and white-box ones, show that CausalDiff has superior performance compared to representative adversarial defense baselines including state-of-the-art (SOTA) methods. Specifically, our CausalDiff achieves robustness of 86.39% (+4.01%) on CIFAR10, 56.25% (+3.13%) on CIFAR-100 , and 81.79% (+4.93%) on GTSRB .

In summary, we highlight our contributions as follows: 1) We propose a novel causal diffusion framework (CausalDiff) to defend against unseen attacks by modeling the generation of native in-domain data with the category(Y)-causative factors and the other Y-non-causal factors; 2) We propose a Causal Information Bottleneck (CIB) objective to disentangle Y-causative from Y-non-causative factors during causal model training and an associated inference algorithm for adversarial defense; 3) CausalDiff significantly outperforms SOTA methods in defending against various unseen attacks.

## 2 Related Work

**Adversarial Defense.** Adversarial training primarily focuses on optimizing the training algorithm [8; 20; 21], incorporating data augmentation [22; 23; 9], and enhancing acceleration [24; 25]. Despite its effectiveness, the trained models could still be vulnerable to unseen attacks [26; 27]. Adversarial purification, orthogonal to our work, utilizes a generative model to purify adversarial noise from examples before classification. Leveraging diffusion models [28; 17; 29; 30], diffusion-based purification have shown to be effective [31; 32; 33; 34; 27].

**Causal Learning for Robustness.** Causal representation learning [12; 36; 14; 37] focuses on discovering invariant mechanisms within structural causal models and has achieved remarkable performance in improving model transferability [14; 13; 38; 39; 40] and interpretability [41; 42]. Moreover, in terms of adversarial robustness, researchers [43; 15; 44; 45; 16; 46; 47; 48] have attempted to model the attack behaviors in causal structures to identify the adversarial factors. However, modeling particular attack types will limit the model robustness on other types of attacks .

**Conditional Diffusion Model.** Diffusion models [28; 17; 29; 30; 49] have achieved compelling image generation capabilities. To equip them with the ability of controllable generation, the sampling

   Model & \( v\) & \( p(y|v)\) & 
 margin \(\) \\ (\(_{2}\) / \(_{}\)) \\  \\  Discriminative & 1.15 & 0.81 & 2.14 / 0.38 \\ Generative & **0.06** & 0.27 & 1.12 / 0.24 \\ Causal\({}_{}\) & 0.29 & 0.32 & 9.58 / 5.30 \\ Causal\({}_{}\) & 0.27 & **0.22** & **10.64 / 6.28** \\   

Table 1: The experimental results of four models on toy data. The variation of latent \(v\) and logits \(p(y|v)\) is measured between clean and adversarial examples. The model margin is estimated by the minimal adversarial perturbation required to flip the label, employing both \(_{2}\) and \(_{}\) norm.

Figure 2: Adversarial robustness of four models against 100-step PGD attack under varying attack strength indicated by \(\)-budget.

process can be guided by 1) classifier confidence to generate images of a certain category [30; 50; 51], and 2) semantic embedding of text content or a certain style [52; 53; 54; 55].

## 3 Pilot Study on Toy Data

To compare our proposed causal model with other representative models in terms of adversarial robustness, we constructed a toy dataset according to the hypothesis that the essential factors are the basis of generating labels and they also determine the generation of data together with label-non-causative features. Pilot studies on this toy data will provide insights into whether our causal model will work and why it works.

### Experimental Settings

**Toy Data Construction.** We constructed 2000 samples following the causal structure in Fig. 1 (Left). Specifically, for each data point, we randomly sample the vectors \(s\) and \(z\) from two different normal distributions, project \(s\) to a score \(y_{s}\) with random weights, obtain its label by comparing \(y_{s}\) with the medium score, and generate the representation \(x\) by projecting the concatenation \([s;z]\) with another random matrix. Please refer to Appendix B.3 for detailed information.

**Models for Comparisons.** We investigated four representative models: 1) a _Discriminative_ model for classification, 2) a _Generative_ model that predicts the label of an adversarial example with \(_{y}p(x|y)\), 3) a causal model without disentanglement (\(_{without\ Discent.}\)) that models the generation of both x and y with the same latent factor \(v\), 4) our causal model with disentanglement (\(_{with\ Discent.}\)) that is illustrated in Fig. 1. The concrete structures of the four models and further details are presented in Appendix B.3.

### Experimental Observations

**Adversarial Robustness.** We evaluate the model's robustness against a 100-step PGD attack with varying \(\)-budgets under the \(_{}\) bound . Model performance in terms of both clean accuracy (when \(=0\)) and robust accuracy is examined.

As shown in Fig. 2: 1) The _Discriminative_ model exhibits the highest clean accuracy but suffers a rapid decline in robustness, dropping to \(0\%\) when the attack budget \(\) reaches \(1.2\)., which highlights its vulnerability. 2) The _Generative_ model has the lowest clean accuracy while its robustness does not dramatically regress with larger attack budgets. The low clean accuracy may be due to the inconsistency between the generation process it modeled and the way this toy dataset is constructed. The small gap between clean and robust accuracy indicates its decent effectiveness in defending against adversarial attacks. 3) \(_{with\ Discent.}\) obtains the second-best clean accuracy, yet its robustness gradually declines with increasing attack strength, maintaining 61.4% robustness at \(=6.4\). 4) Our model, \(_{with\ Discent.}\), has slightly lower clean accuracy than Causal without Disent. but the best robustness among the four. As the attack strength increases, it maintains at least 71.8% robust accuracy at \(=6.4\), indicating that it is promising to enhance model robustness by causal modeling with disentanglement of the label-causative factors from the non-causative ones.

Figure 3: Visualizations of feature space for the two categories on toy data by T-SNE for (a) discriminative model, (b) generative model, (c) causal model without disentanglement, and (d) causal model with disentanglement.

**Sensitivity to Perturbations.** To delve further into how the model behavior changes when defending against adversarial perturbations, we measure the variation between latent variables of clean and adversarial examples, denoted as \(=1-cosine(v,v_{})\), where \(v\) and \(v_{}\) represents the latent vector of clean and adversarial example, respectively (\(v=s\) for Causal\({}_{with\ Disent.}\)). We also compute the change of predicted logits, \(=p(y|v)-p(y|v_{})\), with \(y\) being the true class label. Note that a larger variation in the latent factor for prediction, or the predicted logits, results in increased insensitivity to perturbations.

The experimental results, as shown in Tab. 4, indicate that Causal\({}_{with\ Disent.}\), compared to Causal\({}_{without\ Disent.}\), exhibits less sensitivity in both latent variables and prediction outcomes. This suggests that by disentangling the label-causative factor \(s\), it becomes more challenging for attackers to perturb the model and alter its prediction. The small variation of \(v\) in the Generative model is probably attributed to the lack of discriminability in \(v\).

**Prediction Margins.** To intuitively explain the sensitivity of each model to perturbations, we estimate the minimal adversarial perturbation \(\|\|\) under PGD required to flip the correct model prediction \(y\) of a sample \(x\). It can be interpreted as the prediction margins in terms of perturbation, denoted as \((x,y)=\|\|\), subject to \(p(y|x+)<p(|x+)\). We measure the \(\|\|\) under \(_{2}\) and \(_{}\) norms. Additionally, we visualized the latent vector space of each model to intuitively observe the margin of the classification boundary.

As shown in Tab. 4, Causal\({}_{with\ Disent.}\) has the largest prediction margin. This implies that an attacker would need to add significantly more perturbation to successfully cheat our model. We can draw similar conclusions from Fig. 3, which illustrates the distribution of predictive features extracted by each model for correctly classified clean samples across categories. Again, Causal\({}_{with\ Disent.}\) has the largest margin between the classes, indicating that it has high confidence in its prediction and increases the cost and difficulty for an attacker to succeed.

## 4 Causal Diffusion Model

To enhance model robustness on real-world data, in this section, we propose a _Causal Diffusion (CausalDiff)_ Modeling approach, that couples our previously studied SCM (shown in Fig. 6(d)) with diffusion models. We will introduce the three major components in CausalDiff: conditional diffusion generation, causal information bottleneck optimization, and adversarial example inference. We take the Denoising Diffusion Probabilistic Model (DDPM)  as an instance for illustration and it can be easily adapted to other diffusion models.

### Conditional Diffusion Generation

Standard diffusion models generate images based on random noise which do not apply to the conditional generation of \(X\) based on \(S\) and \(Z\) in our SCM. In standard diffusion models, at each time step \(t\) during denoising, a UNet \(_{}(x_{t},t)\) is employed to decode an image given input \(x_{t}\). While diffusion models are highly effective in image generation, they lack an explicit decoder component for generating images from latent variables. To handle this, we develop a conditional DDPM using latent variables \(S\) and \(Z\) controlling the generation process. This approach draws inspiration from both the class-conditional diffusion model  as well as the style control mechanism introduced in DiffAE . The output \(h^{t}_{}\) at each layer of the UNet depends on \(t\) and \(x_{t}\), i.e.,

\[h^{t}_{}=t_{}(h)+t_{}, \]

where \(h\) is the feature map of \(x_{t}\), \(t_{}\) and \(t_{}\) are the scale and bias of timestep \(t\).

Inspired by the class-conditional diffusion model  and the style control mechanism in DiffAE , we adapt the standard diffusion generation to be conditioned on \(S\) and \(Z\) in addition to timestep \(t\). Specifically, the UNet becomes \(_{}(x_{t},t,s,z)\), the final output \(h^{t,s,z}_{}\) is calculated based on the original \(h^{t}_{}\), the hidden state \(s\) and \(z\) (representing causal factor \(S\) and \(Z\)) encoded from input \(x\):

\[h^{t,s,z}_{}=z_{} h^{t}_{}+s_{}, \]

where \(z_{s}\) and \(s_{b}\) are produced from the affine projections of \(z\) and \(s\) respectively, i.e., \(z_{}=_{z}(z)\) and \(s_{}=_{s}(s)\). As such, the label-causative factor \(S\) acts as a bias that can affect the direction of the latent vector and change its semantics, while the label-non-causative factor \(Z\) can only scale the latent vector in a similar way to style control.

### Causal Information Bottleneck Optimization

To learn the causal factors \(S,Z\) in our SCM and disentangle them, we propose a Causal Information Bottleneck (CIB) optimization objective. It maximizes the mutual information between the latent factors \(S,Z\) and the observed data sample \((X,Y)\) with an information bottleneck that constrains the information retained in \(S,Z\) with respect to \(X\).

Specifically, to align the information captured in the latent factors with the observed data \((X,Y)\), we maximize the mutual information between them, denoted as \((X,;,)\), which can be derived as:

\[(X,Y;S,Z)=\ (X;S,Z)+(Y;S)-(S;Z)- (X;Y). \]

A detailed proof is presented in Appendix A.1. Among the resultant terms, \((X;Y)\) is solely dependent on the observed data, independent of latent variables or the causal model, and thus can be ignored in the learning process. Maximizing \((X;S,Z)\) will urge \(S\) and \(Z\) to capture ample information about \(X\). \((S;Y)\) indicates that the \(Y\)-causative factor \(S\) should be correlated with \(Y\). The term, \(-(S;Z)\) ensures \(S\) and \(Z\) to be effectively disentangled.

Existing work on optimizing similar SCMs adapts the Evidence Lower BOund (ELBO) from Variational Autoencoders (VAE) to formulate the causal ELBO objectives . This objective only maximizes the likelihood of \((X,Y)\), and does not consider the latent factors. Consequently, the final optimization goal of causal ELBO differs from \(I(X,Y;S,Z)\) in that it does not have \(-(S;Z)\) in Eq. (3), which is crucial for disentanglement. Further details are discussed in Appendix A.4.

To avoid \(X\) contain too many unimportant details, we constrain the mutual information between \(X\) and the latent factors \(S,Z\) with an information bottleneck \(_{c}\). Then, the updated objective becomes:

\[(X,Y;S,Z), s.t.(X;S,Z)_{c}. \]

Employing Lagrange multiplier \(\!\!0\), we formulate our objective as \((X,\!Y;\!S,\!Z)\!-\!((X;S,Z)\)\(-_{c})\). Since \(I_{c}\) is a constant, it is equal to maximize the **Causal Information Bottleneck** (CIB):

\[(X,Y,S,Z)=\ (X;S,Z)+(Y;S)-(S;Z)- (X;S,Z). \]

\(I(X;S,Z)\) and \(- I(X;S,Z)\) indicate two opposing optimization directions. Because it is unclear whether \((1-)\) should be positive or negative, we approximate these terms via two separate lower bounds instead of combining them.

To maximize the Causal Information Bottleneck (\(\)) in Eq. (5), we derive its lower bound as the concrete training loss function. When using the diffusion model \(_{}\), classifier \(f_{y}(s;)\) (to estimate \(p_{}(y|s)\)), and the encoder \(f_{s,z}(x;)\) (to estimate \(p_{}(s,z|x)\) ), the lower bound of \(\) is:

\[_{p(x,s,z)}[ p_{}(x|s,z)]\!+\!_{p(y,s)}[ p_{ }(y|s)]\!-\!_{}^{}(S;Z)\!-\!_{p(x)}[_{}(p_{}(s,z|x)\|q(s,z))], \]

where \(p_{}(s|z)\) is a variational distribution to estimate \(p(s|z)\) and \(_{}^{}(S;Z)=_{p(s,z)}[ p_{}( s|z)]\)\(-\)\(_{p(z)}_{p(s)}[ p_{}(s|z)]\) represents the Contrastive Log-Ratio Upper Bound (CLUB) of mutual information proposed by Cheng et al. . \(p_{}(x|s,z)\) represents the likelihood estimated by the conditional diffusion model. \(_{}\) refers to the Kullback-Leibler (KL) divergence ; and \(q()\) denotes the prior distribution of the latent variable, e.g., a normal distribution \((,)\). A detailed proof can be found in Appendix A.2.

**Loss Function**. Thus, maximizing the lower bound of CIB is equal to minimizing the loss function:

\[(x,y,s,z;) =\ _{,t}\|_{}(x_{t},t,s,z )\!-\!_{}\|_{2}^{2}\!+\!_{}(s,y;) \] \[+^{}(S;Z)+_{} (p_{}(s,z|x)\|q(s,z)),\]

where \(,,,\) determine the weighting of each term in the optimization process. A detailed derivation can be found in Appendix A.3.

**Algorithm**. We pretrain the model with the data reconstruction loss (the first term in Eq. (7)) alone before training the model with the entire loss, so that the model can learn the causal factors, disentanglement, and classification from a decent starting point. For space concern, we illustrate the training process in Appendix B.2 involves the training algorithm (Algorithm 1) and the pretraining algorithm (Algorithm 2).

### Adversarial Example Inference

Guided by the causal generation of an adversarial example \(\) according to Fig. 1 (Right), we illustrate the process for robust classification. Following a typical attack paradigm, \(\) is produced by adding an adversarial perturbation to a target clean example \(X\) when attacking a model \(\). To make a robust prediction on \(\), our robust inference process comprises three steps: 1) purifying \(\) to benign \(X\) by the unconditional diffusion model \(_{}(x_{t},t)\), 2) inferring \(S\) and \(Z\) from \(X\) utilizing the causal model \(_{}(x_{t},t,s,z)\), and 3) predicting \(Y\) based on \(S\) using a classifier \(f_{y}(s;)\).

**Adversarial Purification (AP).** We follow the concept of Likelihood Maximization (LM) [33; 27] to purify the adversarial example \(\) to a benign \(X^{*}\) by maximizing the data log-likelihood \( p_{}(x)\):

\[x^{*}=_{x} p_{}(). \]

Concretely, we maximize its lower bound utilizing the unconditional diffusion model \(_{}(x_{t},t)\) trained according to Section C.2. Chen et al.  suggest using one random timestep \(t\) during each purification iteration while we believe that smaller timesteps should be more effective since they retain more information from the original example. Thus, we limit the random selection to within the first 50 timesteps. This way significantly boosts adversarial robustness, which will be discussed in Section 5.3.

**Causal Factor Inference (CFI).** In order to infer the causal and non-causal factors \(S\) and \(Z\), which can reconstruct the original image \(X\), we optimize the latent variables by maximizing the conditional likelihood \(p_{}(x|s,z)\) employing the trained conditional diffusion model \(_{}(x_{t},t,s,z)\):

\[s^{*},z^{*}=_{s,z} p_{}(x^{*}|s,z). \]

Similarly to purification, we obtain \(s^{*}\) and \(z^{*}\) by maximizing the lower bound \(-_{,t}[w_{t}|_{}(x_{t},t,s,z)-\|]\) using the conditional diffusion model \(_{}(x_{t},t,s,z)\). For efficiency concerns, instead of using all the timesteps for estimation as in Chen et al. , we sample \(N_{}=5\) timesteps at the same intervals across the entire timesteps.

**Latent-S-Based Classification (LSBC).** After obtaining \(s^{*}\) according to Eq. (9), we use the trained classifier \(f_{y}(s;)\) to predict label \(Y\):

\[y^{*}=_{y} p_{}(y|s^{*}). \]

    & Method & Backbone & Clean &  \\  & & Acc (\%) & AA \(l_{}\) & AA \(_{2}\) & STAdv & Avg \\   & AT-\(l_{}\) & DDPM & 88.87 & 63.28 & 64.65 & 4.88 & 44.27 \\  & AT-\(l_{2}\) & DDPM & 93.16 & 49.41 & 81.05 & 5.27 & 45.24 \\  & AT-\(l_{}\) & EDM & 93.36 & 70.90 & 69.73 & 2.93 & 47.85 \\  & AT-\(l_{2}\) & EDM & 95.90 & 53.32 & 84.77 & 5.08 & 47.72 \\  & CausalAdv-T & WRN-76-10 & 83.71 & 8.76 & 21.95 & 75.60 & 35.44 \\  & CausalAdv-M & WRN-76-10 & 70.22 & 24.36 & 49.10 & 48.60 & 40.69 \\  & DICE & WRN-34-10 & 82.85 & 37.51 & 41.58 & 82.46 & 53.85 \\   & DiffPure & Score SDE & 87.50 & 53.12 & 75.59 & 12.89 & 47.20 \\  & LM-DDPM & DDPM & 80.47 & 53.32 & 63.09 & 74.22 & 63.54 \\  & LM-EDM & EDM & 87.89 & 71.68 & 75.00 & 87.50 & 78.06 \\   & SBGC & Score SDE & 95.04 & 0.00 & 0.00 & 0.00 & 0.00 \\  & CAMA & VAE & 32.19 & 3.38 & 5.53 & 27.54 & 12.15 \\  & RDC & EDM & 89.85 & 75.67 & 82.03 & 89.45 & 82.38 \\   & **CAusalDiff** & DDPM & 90.23 & **83.01** & **86.33** & 89.84 & **86.39** \\  & **CAusalDiff** w/o CFI** & DDPM & 83.20 & 74.61 & 75.59 & 82.23 & 77.48 \\  & **CAusalDiff** w/o **AP** & DDPM & 91.21 & 69.14 & 84.96 & **91.21** & 81.77 \\   

Table 2: Clean accuracy and adversarial robustness on CIFAR-10 against **StAdv** under \(_{}\) (\(=0.05\)) norm bound and **AutoAttack (AA)** under \(_{2}\) (\(=0.5\)) as well as \(_{}\) (\(=8/255\)) bound. We calculate the average robustness across three attack methods to evaluate the modelâ€™s robustness against unseen attacks. We use underlining to highlight the best robustness for each attack method within each defense category, and bold font to denote the state-of-the-art (SOTA) across all methods.

Within our inference pipeline, both adversarial purification and causal factor inference leverage the diffusion model learned toward the CIB optimization objective while they take effect independently. When we combine these two approaches, adversarial robustness could be enhanced further. The concrete inference algorithm in Algorithm 3 is presented as Appendix B.2.

### Comparison with Adversarial Purification

First, **our CausalDiff can be viewed as semantic-level purification**. Instead of pixel-level denoising, CausalDiff purifies an image in the latent space, trying to remove the effect of perturbation by putting it to the label-non-causative features. Second, conventional purification inevitably loses information essential for classification during denoising. By disentangling label-causative features from label-non-causative features, CausalDiff can retain essential information in the label-causative features to a large extent. Third, unlike pixel-level purification which does not know the optimal denoising level for various attacks, CausalDiff acts adaptively on different attacks by the causal inference of \(S\) and \(Z\). Fourth, they can be combined to further enhance adversarial robustness.

## 5 Experiments

In this section, we introduce the experimental settings in Section 5.1. Section 5.2 presents the main results defending against unforeseen attacks on CIFAR-10, CIFAR-100, and GTSRB datasets. We then evaluate the effectiveness of individual components of CausalDiff in Section 5.3. Due to space constraints, we provide analyses of core components during training and inference in Appendix C.1 and Appendix C.2. Additionally, we showcase examples in Appendix C.3.

### Experimental Settings

**Datasets and Model Architecture.** Our experiments utilize the CIFAR-10, CIFAR-100  and GTSRB  datasets. CIFAR-10 and CIFAR-100 each consists of 50,000 training images, categorized into 10 and 100 classes, respectively. GTSRB comprises 39,209 training images (each histogram equalized and resized to \(3 32 32\)) of German traffic signs, categorized into 43 classes. We use DDPM  as the diffusion model. Further details are available in Appendix B.2.

**Attack Evaluation Method.** For the CIFAR-10 dataset, we utilize **seven types of attack strategies** with both \(_{}\) and \(_{2}\) norm bounds for evaluation. These strategies include StAdv attack , BPDA+EOT, and AutoAttack  (AA), which comprises white-box attacks such as APGD-ce, APGD-t, FAB-t, and a black-box Square Attack. For CIFAR-100, we follow the setting of Chen et al. , evaluating against the \(_{}\) threat model with \(=8/255\). For the GTSRB dataset, we utilize **four types of attacks as well as fog corruptions**. Attack methods include AutoAttack, which comprises APGD-ce, APGD-t, FAB-t, and Square Attack.

### Comparisons on Unseen Attacks

**CIFAR-10**. From the experimental results for CIFAR-10 presented in Table 2, we have several observations: 1) The adversarial training methods perform robustly on the same type of attacks they use for training but poorly on other unseen attacks. The only exception is that when the models employ

    & Clean &  \\  & Acc & AA \(l_{}\) & AA \(_{2}\) & Fog & Avg \\  DOA  & 76.56 & 31.25 & 36.72 & 68.36 & 45.44 \\ GTSRB-CNN  & 93.95 & 62.30 & 74.80 & 65.43 & 67.51 \\ AT-4  & 92.58 & 74.78 & 80.47 & 78.13 & 77.69 \\ AT-8  & 91.21 & 74.02 & 79.10 & 73.44 & 75.52 \\ AT-16  & 89.65 & 73.24 & 75.59 & 69.92 & 72.92 \\ 
**CausalDiff** & 97.85 & **80.86** & **80.86** & **86.13** & **82.62** \\    
   Method & Clean Acc & Robust Acc \\  WRN40-2 & 78.13 & 0.00 \\ AT-DDPM  & 63.56 & 34.64 \\ AT-EDM  & 75.22 & 42.67 \\ DiffPure  & 39.06 & 7.81 \\ DC  & 79.69 & 39.06 \\ RDC  & 80.47 & 53.12 \\ 
**CausalDiff** & 65.62 & **56.25** \\   

Table 3: Clean accuracy and adversarial robustness against **AutoAttack (AA)** on **GTSRB (Left)** and **CIFAR-100 (Right)** dataset. We use \(=8/255\) as \(_{}\) and \(=0.5\) as \(_{2}\) norm bound.

the most effective attack (i.e., AT-\(_{}\)) for adversarial training, the robustness regarding \(_{2}\) is not hurt much. 2) In contrast, purification methods, especially the ones based on more powerful diffusion models (DDPM and EDM), have decent robustness on each unseen attack and much better average robustness. This is reasonable since they learn to purify the adversarial samples without targeting any specific attacks. 3) Our CausalDiff performs the best not only regarding the average robustness but also on each type of attack. Remarkably, the average robust accuracy (86.39%) is only 3.84% lower than the clean accuracy (90.23%) and it boosts the robustness on the most challenging attack (\(_{}\)) to 83.01%. Notably, the reported CausalDiff is based on DDPM, which acts less effectively than EDM, which can be seen from AT and LM purification. Grounded on a stronger backbone, CausalDiff could achieve even better performance. Table 4 shows the performance under the BPDA + EOT (EOT = 20) attack. Under this attack, models whose gradients are not accessible and also be compared (e.g., ADP ). The results again confirm the superior performance of CausalDiff across different attack types.

**CIFAR-100**. The experimental results on CIFAR-100 in Table 3 (Right) indicate that CausalDiff achieves the highest robustness among all, even with a much lower clean accuracy. The low clean accuracy is likely due to the insufficient training samples to learn \(S,Z\), and its weaker backbone -

DDPM. We believe more augmented data and a stronger diffusion backbone like EDM (used by RDC ) could further enhance the performance.

**GTSRB**. The left part of Table 3 show that CausalDiff also has compelling robustness on traffic sign classification, in terms of not only unforeseen adversarial attacks but also natural corruptions like fog. Evaluations based on different types of tasks, and different numbers of classes (10, 100, and 43) have all shown the efficacy of CausalDiff.

### Ablation Study

As mentioned in Section 4.3, our CausalDiff contains Adversarial Purification (AP), Causal Factor Inference (CFI), and Latent-S-Based Classification (LSBC). The last block of Table 2 shows the individual effect of the AP and CFI in CausalDiff. We can see: 1) Our DDPM-based purification (CausalDiff w/o CFI, achieved by AP plus a standard classifier) performs similarly to LM-EDM and is significantly better than LM-DDPM, showing that the strategy of sampling within small timesteps for purification is much more effective than entire timesteps. (We show more analysis on this in Appendix C.2. ) 2) The core component of CasualDiff - causal disentanglement (CausalDiff w/o AP) outperforms all the baselines in terms of average robustness except RDC which incorporates an extra LM purification step. It shows that modeling the generative of native in-domain data can enhance the model's inherent robustness and thus effectively defend against various types of attacks.

### Visualization of Latent Factors

To understand how the latent causal factors \(S\) and \(Z\) in CausalDiff take effect during adversarial classification, we visualize \(S\), \(Z\), and their concatenation using t-SNE in Fig. 4. We randomly sampled 5000 correctly classified test samples from CIFAR-10 for visualization. We find that the Y-causative factor \(S\) of samples in each category are located in the same cluster, with clear margins between different clusters except the categories - dog, cat, and bird. These three categories share more commonalities than the others and are not surprising to have blurred boundaries. Additionally,

    & Clean & Robust \\  & Acc (\%) & Acc (\%) \\   Purify - EBM  & 84.12 & 54.90 \\ LM - DDPM  & 83.20 & 69.73 \\ ADP  & 86.14 & 70.01 \\ RDC  & 89.85 & 75.67 \\ GDMP  & 93.50 & 76.22 \\ DiffPure  & 89.02 & 81.40 \\ 
**CausalDiff** & 90.23 & **88.48** \\   

Table 4: Clean and robust accuracy on CIFAR-10 against **BPDA + EOT** against \(_{}\) (\(=8/255\)) threat model.

Figure 4: Visualization by T-SNE of the feature space, inferred by our CausalDiff, of the label-causative factor \(s\), label-non-causative factor \(z\), and their concatenation.

the \(S\) vectors of airplanes (dark blue) are near those of birds (green), and trucks have \(S\) vectors near automobiles. In contrast to the \(S\) vectors, the vectors of \(Z\) do not exhibit correlations with the categories. This also aligns with our objective to extract the Y-non-causative factors to \(Z\). The vectors of their concatenation, i.e., \([s;z]\), also display in clusters but with much more blurred boundaries. These observations are consistent with our commonsense knowledge, showing that CausalDiff has learned reasonable Y-causative factors by \(S\) and Y-non-causative factors by \(Z\).

## 6 Conclusion

We develop a causal model based on diffusion model to improve adversarial robustness. A pilot study on toy data suggests that the model defends against adversarial attacks by leveraging label-causative features to resist perturbations and expand the model's margin. Moreover, on the CIFAR-10, CIFAR-100 and GTSRB datasets, our model appears to capture semantic features consistent with the human decision-making process and surpass all baseline models, achieving state-of-the-art performance in adversarial robustness, particularly against unseen attacks.