# Enhancing Reasoning through Process Supervision with Monte Carlo Tree Search

Shuangtao Li1, Shuaihao Dong1, Kexin Luan1, Xinhan Di1, Chaofan Ding1,

1Al Lab, Giant Network

1Al Lab, Giant Network

1lishuangtao@ztgame.com, dongshuaihao@ztgame.com, luankexin@ztgame.com, dixinhan@ztgame.com, dingchaofan@ztgame.com

###### Abstract

Large language models (LLMs) have demonstrated their remarkable capacity across a variety of tasks. However, reasoning remains a challenge for LLMs. To improve LLMs' reasoning ability, process supervision has proven to be better than outcome supervision. In this work, we study using Monte Carlo Tree Search (MCTS) to generate process supervision data with LLMs themselves for training them. We sample reasoning steps with an LLM and assign each step a score that captures its "relative correctness," and the LLM is then trained by minimizing weighted log-likelihood of generating the reasoning steps. This generate-then-train process is repeated iteratively until convergence. Our experimental results demonstrate that the proposed methods considerably improve the performance of LLMs on two mathematical reasoning datasets. Furthermore, models trained on one dataset also exhibit improved performance on the other, showing the transferability of the enhanced reasoning ability.

## Introduction

Although today's large language models (LLMs) can perform excellently on a variety of language tasks [14], even approaching human levels, reasoning remains an unaddressed challenge for them [13, 12]. To enhance their reasoning ability, some studies use Chain-of-Thought (CoT) prompting [21, 22, 23] to encourage LLMs to decompose given problems and think step by step, but the elicited reasoning ability is still limited. Nevertheless, these works emphasize the importance of step-by-step reasoning for LLMs.

To enhance LLMs' reasoning ability, some researchers propose Rejection sampling Fine-Tuning (RFT) [20], which generates reasoning paths using LLMs and filters out those leading to incorrect answers. Moreover, the Self-Taught Reasoner (STaR) [15] use the ground truth answer as a hint for LLMs to generate reasoning paths that lead to correct answers. However, this approach may also produce incorrect reasoning paths that happen to arrive at the correct answer. Similarly, Iterative Reasoning Preference Optimization [10] samples correct and incorrect CoTs to form preference pairs and iteratively applies Direct Preference Optimization (DPO) [17]. These training methods fall into the category of outcome-supervised fine-tuning, as they directly supervise the LLMs to produce correct final answers rather than correct reasoning paths.

Process supervision provides LLMs with more precise and fine-grained feedback. Lightman et al. [12] find that their process reward models (PRM) perform significantly better than outcome reward models (ORM). Using a PRM, reasoning steps can be rewarded, enabling reinforcement learning to train LLMs to generate better CoTs. However, Lightman et al. rely on human annotators to label the reasoning steps, which is highly expensive, particularly for challenging math problems. To automatically label reasoning steps, some works employ [14, 15] Monte Carlo Sampling to estimate the "correctness" of the steps, showing that PRMs trained on their automatically labeled data can even outperform those trained on PRM800K [12], a human-labeled dataset. Wang et al. [14] further train LLMs with their PRMs using reinforcement learning, and find that it is better than training with ORMs. ReST-MCTS* [14] leverages Monte Carlo Tree Search (MCTS) [11, 12] to annotate the process reward of each step for training a PRM, and use the PRM to guide MCTS in turn.

Some studies propose methods that do not require a PRM to provide process supervision to LLMs. Step-DPO [13] and Self-Explore [14] identify the first incorrect step in a reasoning path through step-by-step verification, creating a pairwise dataset for subsequent preference learning. MCTS-DPO [15] utilizes MCTS to generate pairwise data for preference learning, with training and data generation performed iteratively. However, MCTS-DPO labels reasoning steps only as chosen or rejected, which does not accurately capture the quality of the steps, which can lead to suboptimal performance. Additionally, MCTS-DPO forms preference pairs using only the best and worst steps, discarding other steps that are potentially valuable.

In this paper, we study using MCTS to generate process supervision data. We apply MCTS at each step along the reasoning paths generated by an LLM, assigning a score that captures "relative correctness" to the sampled next steps.

Compared to binary preferences, the scores reflect the quality of the steps more accurately. The next steps with scores are integrated into a weighted negative log-likelihood loss function to train the LLM. We also iteratively generate training data and train the LLM, following MCTS-DPO. Our experimental results demonstrate that the proposed methods considerably improve the performance of LLMs on two mathematical reasoning datasets. Furthermore, the models trained on one dataset also exhibit improved performance on the other, showing the transferability of the enhanced reasoning ability.

## Related Work

A key technique for enhancing reasoning is Chain-of-Thought (CoT) prompting [23, 24, 25, 26], which encourages LLMs to think about problems step by step and generate reasoning chains. It is also found that reasoning chains with more steps are more likely to lead to correct answers [24], further highlighting the importance of step-by-step reasoning. Furthermore, tree search algorithms, such as MCTS, are integrated with LLMs during inference to search for correct reasoning paths, resulting in significant improvements in performance on reasoning tasks [1, 25, 26, 27], but at the cost of a substantial increase in inference compute.

While the aforementioned studies enhance reasoning during inference, another research direction aims to instill reasoning ability into LLMs through training. Some studies train LLMs using responses generated by the models themselves [24, 25, 26, 27], employing supervised fine-tuning or reinforcement learning. Question synthesis has also been shown to be effective for generating training data [25, 26, 27, 28], where several data augmentation techniques are commonly applied.

Recently, an increasing number of studies have demonstrated that process supervision is more effective than outcome supervision, for training both reward models [1, 26, 25, 26] and LLMs [25, 26, 27, 28]. Learned process reward models are usually used for reinforcement learning and for selecting the best reasoning path from a set of sampled paths. In this paper, we explore training LLMs with process supervision without relying on reward models, thereby avoiding the complexity and instability of reinforcement learning.

## Proposed Methods

Assume that we have a dataset of reasoning problems (e.g., mathematical problems) and their corresponding answers \(\mathcal{P}=\{(x^{i},y^{i})\}_{i=1}^{N}\). Our goal is to enhance the reasoning ability of the target LLM with \(\mathcal{P}\) without human annotation. In addition, we assume that we are not accessible to LLMs stronger than the target LLM, so that our methods can be applied to the strongest LLMs.

The proposed methods are illustrated in Figure 1. We train LLMs in a self-training manner [27, 28], i.e., training LLMs on the data generated by themselves. We leverage MCTS to sample and search for step-by-step reasoning paths and collect training data from the constructed search tree. The generated training data are then used to perform supervised fine-tuning (SFT) on the LLM. This generate-and-fine-tune process is repeated iteratively until it converges.

In the following sections, we will describe in detail how we generate our training data and train the LLM on the generated data.

### Data Generation

We generate a training dataset \(\mathcal{D}=\{(x^{i},p_{j}^{i},\mathbf{s}_{j}^{i},\mathbf{c}_{j}^{i})\}_{i=1}^ {N}\), where \(x^{i}\) denotes the \(i\)-th problem in \(\mathcal{P}\), \(p_{j}^{i}\) denotes the \(j\)-th partial solution to \(x^{i}\), \(\mathbf{s}_{j}^{i}\) denotes the next steps of the partial solution \(p_{j}^{i}\), and \(\mathbf{c}_{j}^{i}\) denotes the scores assigned to \(\mathbf{s}_{j}^{i}\).

For each problem in \(\mathcal{P}\), We regard each individual step in problem-solving steps as a tree node, and the steps are separated by two newline characters. We perform MCTS at each step along the reasoning paths generated by the LLM, exploring the best next steps. Specifically, for each partial solution \(p_{j}^{i}\) of the problem \(x^{i}\), we follow the iterative procedure below:

1. **Selection**. Starting from the root node (i.e., \(p_{j}^{i}\)), we select the child node with the highest Upper Confidence Bound (UCB) [12] value until the current node is either not fully expanded or represents a final step of the solution (e.g., "The final answer is 3.").
2. **Expansion**. If the current node does not represent a final step and has not been fully expanded, we sample the next

Figure 1: An overview of the proposed methods.

step as a new child node using the LLM with a non-zero temperature.
3. **Simulation**. From the newly expanded node, we sample the continuation of the partial solution using the LLM until it produces a final answer.
4. **Backpropagation**. After the simulation, we compare the produced final answer with the ground truth, and propagate the reward (1.0 for correct and 0.0 for incorrect) back through the visited nodes in the tree, updating their visit counts and cumulative rewards to guide future searches.

After repeating the above procedure multiple times, we have constructed a tree where the child nodes of the root node represent the next steps of \(p_{j}^{i}\). For the \(k\)-th node \(v_{j,k}^{i}\) in the child nodes, its score is computed as follows:

\[r_{j,k}^{i}=\alpha\cdot N(v_{j,k}^{i})\cdot\left(\frac{Q(v_{j,k}^{i})}{N(v_{j, k}^{i})}-\frac{\sum_{m}Q(v_{j,m}^{i})}{\sum_{m}N(v_{j,m}^{i})}\right) \tag{1}\]

where \(Q(\cdot)\) is the cumulative reward of a node, \(N(\cdot)\) is the visit counts of a node, and \(\alpha\) is a manually set constant for controlling the scale of the scores. The expression in parentheses captures the "relative correctness" of \(v_{k}\). Finally, we add 4-tuples \(\{(x^{i},p_{j}^{i},s_{j,k}^{i},r_{j,k}^{i})\}\) into the training dataset, where \(s_{j,k}^{i}\) is the step corresponding to \(v_{j,k}^{i}\), except for the steps whose score is 0.

Then, we append the next step with the highest UCB value to \(p_{j}^{i}\) to obtain a new partial solution, and perform the above procedure again, until the next step is a final step or the maximum solution length limit is reached.

### Iterative Training

We iteratively train the LLM after generating training data using the LLM from the last iteration, starting with the pre-trained LLM at the first iteration. In each iteration, a certain number of problems are sampled from \(\mathcal{P}\) for data generation.

At the \(i\)-th iteration, the LLM is trained by minimizing the following loss:

\[\mathcal{L}(\pi_{\theta_{i}})=-\mathbb{E}_{(x,p,s,r)\sim\mathcal{ D}_{i}}[r\log\pi_{\theta_{i}}(s\mid x,p))]+\] \[\mathbb{D}_{KL}(\pi_{\theta_{i}}(s\mid x,p)\parallel\pi_{\theta_ {i-1}}(s\mid x,p)) \tag{2}\]

where \(\pi_{\theta_{i}}\) denotes the LLM at the \(i\)-th iteration. The first term is weighted negative log-likelihood. Inspired by reinforcement learning from human feedback [1], we incorporate a KL penalty in the second term to mitigate the distribution shift, which is a challenge in offline reinforcement learning. In fact, our training method can be regarded as a form of reinforcement learning.

## Experiments

### Setup

We apply the proposed methods to Llama-3.1-8B-Instruct1 and deepseek-math-7b-instruct2, and evaluate the performance on two popular mathematics datasets, GSM8K [1] and MATH [1].

\begin{table}
\begin{tabular}{l c c c c} \hline \hline
**Method** & \multicolumn{2}{c}{**Llama-3.1-8B-Instruct**} & \multicolumn{2}{c}{**deepseek-math-7b-instruct**} \\ \cline{2-5}  & **MATH** & **GSM8K** & **MATH** & **GSM8K** \\ \hline Zero-shot-CoT & \(47.07\pm 0.15\) & \(80.77\pm 0.25\) & \(41.20\pm 0.27\) & \(78.79\pm 0.20\) \\ \hline RFT & \(47.96\pm 0.21\) & \(83.33\pm 0.25\) & \(42.04\pm 0.15\) & \(80.90\pm 0.18\) \\ \hline Step-level DPO - Iteration 1 & \(47.12\pm 0.31\) & \(82.43\pm 0.27\) & \(41.32\pm 0.21\) & \(80.67\pm 0.25\) \\ Step-level DPO - Iteration 2 & \(47.31\pm 0.19\) & \(82.55\pm 0.17\) & \(41.14\pm 0.10\) & \(80.52\pm 0.23\) \\ Step-level DPO - Iteration 3 & \(48.29\pm 0.18\) & / & \(41.48\pm 0.30\) & / \\ Step-level DPO - Iteration 4 & \(48.48\pm 0.27\) & / & / & / \\ \hline Ours - Iteration 1 & \(50.04\pm 0.07\) & \(85.35\pm 0.24\) & \(43.15\pm 0.28\) & \(81.77\pm 0.33\) \\ Ours - Iteration 2 & \(50.84\pm 0.20\) & \(\mathbf{85.80\pm 0.22}\) & \(44.11\pm 0.20\) & \(\mathbf{82.02\pm 0.18}\) \\ Ours - Iteration 3 & \(51.52\pm 0.18\) & / & \(\mathbf{44.57\pm 0.27}\) & / \\ Ours - Iteration 4 & \(\mathbf{51.92\pm 0.20}\) & / & / & / \\ \hline \hline \end{tabular}
\end{table}
Table 1: Performance on MATH and GSM8K. Results are reported as mean \(\pm\) standard error.

\begin{table}
\begin{tabular}{l c c c c} \hline \hline
**Method** & \multicolumn{2}{c}{**Llama-3.1-8B-Instruct**} & \multicolumn{2}{c}{**deepseek-math-7b-instruct**} \\ \cline{2-5}  & **GSM8K to MATH** & **MATH to GSM8K** & **GSM8K to MATH** & **MATH to GSM8K** \\ \hline Ours - Iteration 1 & \(48.50\pm 0.31\) & \(85.21\pm 0.15\) & \(41.15\pm 0.31\) & \(80.36\pm 0.38\) \\ Ours - Iteration 2 & \(48.74\pm 0.26\) & \(85.72\pm 0.14\) & \(41.58\pm 0.25\) & \(81.09\pm 0.18\) \\ Ours - Iteration 3 & / & \(85.53\pm 0.16\) & / & \(81.10\pm 0.17\) \\ Ours - Iteration 4 & / & \(85.65\pm 0.21\) & / & / \\ \hline \hline \end{tabular}
\end{table}
Table 2: Results of the transfer experiments where models are trained on one dataset and tested on the other.

For comparison, the first baseline is Zero-shot-CoT [14]. The second baseline is Rejective Sampling Fine-Tuning (RFT) [23], which generates training data by sampling the correct solutions generated by the LLM itself.

To demonstrate that our data generation method is superior to selecting the best and worst steps (i.e., the steps with the highest and lowest average rewards, respectively, similar to the method in [22]) to form preference pairs, we also iteratively train LLMs on the preference data generated in this way. We use DPO for preference optimization, and this baseline is referred to as Step-level DPO.

For efficient training, all models are trained using Low-Rank Adaptation (LoRA) [15].

### Main Results

The experimental results are presented in Table 1. We report the results of iterative training until the accuracies do not increase anymore. It can be observed that our methods consistently outperform the baselines by large margins, with accuracies improving during iterative training. However, the performance converges quickly and fails to continually improve over more iterations. As a result, not all the problems in the training sets of MATH and GSM8K are used for training: only about 2,000 in MATH and 2,000 in GSM8K are used. In addition, the performance converges more quickly on GSM8K than on MATH, which we attribute to the lower difficulty of GSM8K, making it easier for models to learn. It is noteworthy that Step-level DPO achieves only very marginal improvements on MATH, which indicates that our data generation method is significantly superior.

### Transferability Evaluation

The MATH dataset consists of high school math competition problems, while GSM8K comprises grade school math problems. If the LLMs' mathematical reasoning ability has been improved, they should perform better on both datasets. Therefore, we evaluate the transferability of the models by training it on MATH/GSM8K and testing it on GSM8K/MATH to verify whether their mathematical reasoning ability has indeed been enhanced.

As shown in Table 2, our methods outperform Zero-shot-CoT on unseen datasets, indicating they indeed learn mathematical reasoning ability. As expected, the improvements are less substantial than those observed in non-transfer experiments, since the problems in the two datasets require different mathematical skills and knowledge.

## Conclusion and Limitations

In this work, we propose a process supervision data generation method utilizing MCTS and a training approach, for improving the reasoning ability of LLMs. We evaluate the proposed methods on two well-known mathematical datasets and demonstrating the effectiveness. The trained models also outperform the pre-trained models on datasets they are not trained on, showing the transferability of their learned knowledge and skills.

However, the performance converges quickly during iterative training, failing to continually improve over many iterations, and we do not even use all the problems in the training sets. Training for more iterations or using more problems not only fails to improve the performance but actually degrades it. Future research could study the underlying reasons for this phenomenon and how to achieve more substantial improvements with more iterations.

In addition, the models in our experiments are trained using LoRA, which could have limited the magnitude of the observed improvements.

## References

* C. B. Browne, E. Powley, D. Whitehouse, S. M. Lucas, P. I. Cowling, P. Tavener, S. Perez, S. Samothrakis, and S. Colton (2012)A survey of Monte Carlo tree search methods. IEEE Transactions on Computational Intelligence and AI in games4 (1), pp. 1-43. Cited by: SS1.
* G. Chen, M. Liao, C. Li, and K. Fan (2024)AlphaMath almost zero: process supervision without process. arXiv preprint arXiv:2405.03553. Cited by: SS1.
* K. Cobbe, V. Kosaraju, M. Bavarian, M. Chen, H. Jun, L. Kaiser, M. Plappert, J. Tworek, J. Hilton, R. Nakano, et al. (2021)Training verifiers to solve math word problems. arXiv preprint arXiv:2110.14168. Cited by: SS1.
* Y. Fu, H. Peng, A. Sabharwal, P. Clark, and T. Khot (2022)Complexity-based prompting for multi-step reasoning. In The Eleventh International Conference on Learning Representations, Cited by: SS1.
* S. Hao, Y. Gu, H. Ma, J. J. Hong, Z. Wang, and Z. Hu (2023)Reasoning with language model is planning with world model. arXiv preprint arXiv:2305.14992. Cited by: SS1.
* D. Hendrycks, C. Burns, S. Kadavath, A. Arora, S. Basart, E. Tang, D. Song, and J. Steinhardt (2021)Measuring mathematical problem solving with the math dataset. arXiv preprint arXiv:2103.03874. Cited by: SS1.
* E. J. Hu, Y. Shen, P. Wallis, Z. Allen-Zhu, Y. Li, S. Wang, L. Wang, and W. Chen (2021)Lora: low-rank adaptation of large language models. arXiv preprint arXiv:2106.09685. Cited by: SS1.
* J. Huang and K. C. Chang (2023)Towards reasoning in large language models: a survey. In Findings of the Association for Computational Linguistics: ACL 2023, pp. 1049-1065. Cited by: SS1.
* H. Hwang, D. Kim, S. Kim, S. Ye, and M. Seo (2024)Self-explore: enhancing mathematical reasoning in language models with fine-grained rewards. In Findings of the Association for Computational Linguistics: EMNLP 2024, pp. 1444-1466. Cited by: SS1.
* L. Kocsis and C. Szepesvari (2006)Bandit based monte carlo planning. In European conference on machine learning, pp. 282-293. Cited by: SS1.
* T. Kojima, S. S. Gu, M. Reid, Y. Matsuo, and Y. Iwasawa (2022)Large language models are zero-shot reasons. Advances in neural information processing systems35, pp. 22199-22213. Cited by: SS1.

Lai, X.; Tian, Z.; Chen, Y.; Yang, S.; Peng, X.; and Jia, J. 2024. Step-dpo: Step-wise preference optimization for long-chain reasoning of llms. _arXiv preprint arXiv:2406.18629_.
* Li et al. (2024) Li, C.; Wang, W.; Hu, J.; Wei, Y.; Zheng, N.; Hu, H.; Zhang, Z.; and Peng, H. 2024. Common 7b language models already possess strong math capabilities. _arXiv preprint arXiv:2403.04706_.
* Lightman et al. (2023) Lightman, H.; Kosaraju, V.; Burda, Y.; Edwards, H.; Baker, B.; Lee, T.; Leike, J.; Schulman, J.; Sutskever, I.; and Cobbe, K. 2023. Let's verify step by step. _arXiv preprint arXiv:2305.20050_.
* Liu et al. (2024) Liu, H.; Zhang, Y.; Luo, Y.; and Yao, A. C.-C. 2024. Augmenting math word problems via iterative question composing. _arXiv preprint arXiv:2401.09003_.
* Lu et al. (2024) Lu, Z.; Zhou, A.; Ren, H.; Wang, K.; Shi, W.; Pan, J.; Zhan, M.; and Li, H. 2024. Mathgenie: Generating synthetic data with question back-translation for enhancing mathematical reasoning of lms. _arXiv preprint arXiv:2402.16352_.
* Luo et al. (2024) Luo, L.; Liu, Y.; Liu, R.; Phatale, S.; Lara, H.; Li, Y.; Shu, L.; Zhu, Y.; Meng, L.; Sun, J.; et al. 2024. Improve Mathematical Reasoning in Language Models by Automated Process Supervision. _arXiv preprint arXiv:2406.06592_.
* Nye et al. (2021) Nye, M.; Andreassen, A. J.; Gur-Ari, G.; Michalewski, H.; Austin, J.; Bieber, D.; Dohan, D.; Lewkowycz, A.; Bosma, M.; Luan, D.; et al. 2021. Show your work: Scratchpads for intermediate computation with language models. _arXiv preprint arXiv:2112.00114_.
* Ouyang et al. (2022) Ouyang, L.; Wu, J.; Jiang, X.; Almeida, D.; Wainwright, C.; Mishkin, P.; Zhang, C.; Agarwal, S.; Slama, K.; Ray, A.; et al. 2022. Training language models to follow instructions with human feedback. _Advances in neural information processing systems_, 35: 27730-27744.
* Pang et al. (2024) Pang, R. Y.; Yuan, W.; Cho, K.; He, H.; Sukhbaatar, S.; and Weston, J. 2024. Iterative reasoning preference optimization. _arXiv preprint arXiv:2404.19733_.
* Qi et al. (2024) Qi, Z.; Ma, M.; Xu, J.; Zhang, L. L.; Yang, F.; and Yang, M. 2024. Mutual reasoning makes smaller llms stronger problem-solvers. _arXiv preprint arXiv:2408.06195_.
* Rafailov et al. (2024) Rafailov, R.; Sharma, A.; Mitchell, E.; Manning, C. D.; Ermon, S.; and Finn, C. 2024. Direct preference optimization: Your language model is secretly a reward model. _Advances in Neural Information Processing Systems_, 36.
* Trung et al. (2024) Trung, L.; Zhang, X.; Jie, Z.; Sun, P.; Jin, X.; and Li, H. 2024. Reft: Reasoning with reinforced fine-tuning. In _Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_, 7601-7614.
* Valmeekam et al. (2022) Valmeekam, K.; Olmo, A.; Sreedharan, S.; and Kambhampati, S. 2022. Large language models still can't plan (a benchmark for LLMs on planning and reasoning about change). In _NeurIPS 2022 Foundation Models for Decision Making Workshop_.
* Wang et al. (2024) Wang, P.; Li, L.; Shao, Z.; Xu, R.; Dai, D.; Li, Y.; Chen, D.; Wu, Y.; and Sui, Z. 2024a. Math-shepherd: Verify and reinforce llms step-by-step without human annotations. In _Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_, 9426-9439.
* Wang et al. (2022) Wang, X.; Wei, J.; Schuurmans, D.; Le, Q.; Chi, E.; Narang, S.; Chowdhery, A.; and Zhou, D. 2022. Self-consistency improves chain of thought reasoning in language models. _arXiv preprint arXiv:2203.11171_.
* Wang et al. (2024b) Wang, Z.; Li, Y.; Wu, Y.; Luo, L.; Hou, L.; Yu, H.; and Shang, J. 2024b. Multi-step problem solving through a verifier: An empirical analysis on model-induced process supervision. _arXiv preprint arXiv:2402.02658_.
* Wei et al. (2022) Wei, J.; Wang, X.; Schuurmans, D.; Bosma, M.; Xia, F.; Chi, E.; Le, Q. V.; Zhou, D.; et al. 2022. Chain-of-thought prompting elicits reasoning in large language models. _Advances in neural information processing systems_, 35: 24824-24837.
* Xie et al. (2024) Xie, Y.; Goyal, A.; Zheng, W.; Kan, M.-Y.; Lillicrap, T. P.; Kawaguchi, K.; and Shieh, M. 2024. Monte Carlo Tree Search Boosts Reasoning via Iterative Preference Learning. _arXiv preprint arXiv:2405.00451_.
* Yao et al. (2024) Yao, S.; Yu, D.; Zhao, J.; Shafran, I.; Griffiths, T.; Cao, Y.; and Narasimhan, K. 2024. Tree of thoughts: Deliberate problem solving with large language models. _Advances in Neural Information Processing Systems_, 36.
* Yu et al. (2023) Yu, L.; Jiang, W.; Shi, H.; Yu, J.; Liu, Z.; Zhang, Y.; Kwok, J. T.; Li, Z.; Weller, A.; and Liu, W. 2023. Metamath: Bootstrap your own mathematical questions for large language models. _arXiv preprint arXiv:2309.12284_.
* Yuan et al. (2023) Yuan, Z.; Yuan, H.; Li, C.; Dong, G.; Lu, K.; Tan, C.; Zhou, C.; and Zhou, J. 2023. Scaling relationship on learning mathematical reasoning with large language models. _arXiv preprint arXiv:2308.01825_.
* Zelikman et al. (2022) Zelikman, E.; Wu, Y.; Mu, J.; and Goodman, N. 2022. Star: Bootstrap reasoning with reasoning. _Advances in Neural Information Processing Systems_, 35: 15476-15488.
* Zhang et al. (2024a) Zhang, D.; Li, J.; Huang, X.; Zhou, D.; Li, Y.; and Ouyang, W. 2024a. Accessing GPT-4 level Mathematical Olympiad Solutions via Monte Carlo Tree Self-refine with LLaMa-3 8B. _arXiv preprint arXiv:2406.07394_.
* Zhang et al. (2024b) Zhang, D.; Zhoubian, S.; Hu, Z.; Yue, Y.; Dong, Y.; and Tang, J. 2024b. Rest-mcts*: Llm self-training via process reward guided tree search. _arXiv preprint arXiv:2406.03816_.
* Zhao et al. (2023) Zhao, W. X.; Zhou, K.; Li, J.; Tang, T.; Wang, X.; Hou, Y.; Min, Y.; Zhang, B.; Zhang, J.; Dong, Z.; et al. 2023. A survey of large language models. _arXiv preprint arXiv:2303.18223_.