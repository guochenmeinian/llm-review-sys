# Boosting Vision-Language Models with Transduction

Maxime Zanella

UCLouvain, UMons

&Benoit Gerin

UCLouvain

&Ismail Ben Ayed

ETS Montreal

###### Abstract

Transduction is a powerful paradigm that leverages the structure of unlabeled data to boost predictive accuracy. We present TransCLIP, a novel and computationally efficient transductive approach designed for Vision-Language Models (VLMs). TransCLIP is applicable as a plug-and-play module on top of popular inductive zero- and few-shot models, consistently improving their performances. Our new objective function can be viewed as a regularized maximum-likelihood estimation, constrained by a KL divergence penalty that integrates the text-encoder knowledge and guides the transductive learning process. We further derive an iterative Block Majorize-Minimize (BMM) procedure for optimizing our objective, with guaranteed convergence and decoupled sample-assignment updates, yielding computationally efficient transduction for large-scale datasets. We report comprehensive evaluations, comparisons, and ablation studies that demonstrate: (i) Transduction can greatly enhance the generalization capabilities of inductive pretrained zero- and few-shot VLMs; (ii) TransCLIP substantially outperforms standard transductive few-shot learning methods relying solely on vision features, notably due to the KL-based language constraint.

Code: https://github.com/MaxZanella/transduction-for-vlms

## 1 Introduction

Figure 1: TransCLIP improves significantly the averaged top-1 accuracy on 11 datasets when used on top of inductive zero-shot \(\mathrm{CLIP}\), 2-shot CoOp prompt tuning and 2-shot \(\mathrm{TaskRes}\) adapter for various encoder sizes.

Combining vision and language modalities can greatly enhance expressiveness and reduce ambiguities in the understanding and interpretation of our environment. This principle is central in the development of Vision-Language Models (VLMs), such as CLIP [50], which learns visual representations through natural-language supervision. In the pre-training phase, an input image \(\mathbf{x}\) and associated text description \(\mathbf{c}\) are encoded by separate vision and text encoders. This yields feature representations \(\mathbf{f}=\theta_{v}(\mathbf{x})\) and \(\mathbf{t}=\theta_{t}(\mathbf{c})\), which can be aligned by contrastive learning. Such a joint embedding space for the visual and textual modalities facilitates zero-shot recognition and yields powerful adaptation capabilities for a large variety of tasks. The recent literature on adapting VLMs has grown substantially, in both the zero-shot and few-shot learning settings [73, 72, 16, 70, 74, 25, 43]. However, so far, these techniques predominantly align with _induction_, i.e., inference for each test sample is performed independently from the other samples within the target dataset.

In contrast, _transduction_ performs joint inference on all the test samples of a task, leveraging the statistics of the target unlabeled data [58, 27, 71]. In the context of standard vision-based classifiers, this has enabled transductive methods to outperform inductive-inference approaches as evidenced by benchmarks over large-scale datasets such as ImageNet [2].

Within the scope of deep learning, transduction has mainly been explored for few-shot learning to address the inherent challenges of training under limited supervision. This recent and quite abundant few-shot literature, e.g., [5, 13, 34, 37, 44, 76, 24, 75], among others, has focused on adopting standard vision-based pre-training models (such as ImageNet pre-training). However, as we will show in our experiments (Table 4), the direct application of existing transductive few-shot methods to VLMs yields poor performances, sometimes underperforming the inductive zero-shot predictions. This might explain why the transductive paradigm has been overlooked in zero-shot and few-shot learning for VLMs so far. The low performance of current transductive few-shot methods in the context of VLMs could be explained by the fact that the underlying objective functions do not account for the text knowledge. In this new multi-modal paradigm, additional supervision could be leveraged from the textual descriptions of the classes (prompts) [50], e.g., \(\mathbf{c}_{k}=\texttt{a photo}\) of a [kth class name], along with their corresponding representation \(\mathbf{t}_{k}=\theta_{t}(\mathbf{c}_{k})\) derived from the language encoder. We utilize the interleaved representation of text prompts and images with their cosine2 similarity \(\mathbf{f}^{\top}\mathbf{t}_{k}\), which yields text-based prediction \(\hat{\mathbf{y}}_{k}\), thereby guiding our transductive optimization procedure with text-encoder knowledge. Our method optimizes a new objective function integrating a text-driven penalty. Optimization is carried out efficiently w.r.t the assignment variables associated with the unlabeled samples, which are then used as final predictions.

Footnote 2: In VLMs, such as CLIP [50], both visual and text embeddings are normalized (i.e., are withing the unit hyper-sphere). Thus, the cosine similarity corresponds to the dot product.

Adapting VLMs has recently attracted wide attention in the literature, predominantly focusing on inductive methods. Motivated by findings in NLP, which indicate that better prompt strategies could enhance performance [53, 26, 22], substantial efforts were directed towards prompt tuning [35] for VLMs, with CoOp [73] standing out as the pioneering work along this line. Following CoOp, prompt tuning has become the favorite strategy for adapting VLMs in a variety of contexts, including unsupervised [25, 43, 15, 41, 1] and few-shot [73, 72, 40, 12, 65, 6, 74, 8, 9, 29, 30, 67] learning. Meanwhile, there have been a few efforts towards computationally more efficient adapters [70, 48, 66]. Our transduction formulation aligns with this initiative. By operating solely on the output embeddings (i.e., in a black-box setting), TransCLIP is computationally efficient and does not make assumptions on the underlying encoder architectures. Still, our method is orthogonal to these design choices and could be applied atop any of the above-mentioned inductive approaches.

**Main contributions.****(i)** We introduce a transductive formulation that enhances the zero-shot and few-shot generalization capabilities of VLMs by leveraging the structure of unlabeled data (Figure 1). Our new objective function can be viewed as a regularized maximum-likelihood estimation, constrained by a Kullback-Leibler (KL) divergence penalty integrating the text-encoder knowledge and guiding the transductive learning process. We further derive an iterative Block Majorize-Minimize (BMM) procedure for optimizing our objective, with guaranteed convergence and decoupled sample-assignment updates, yielding computationally efficient transduction for large-scale datasets, such as ImageNet. **(ii)** Our method can be used as a plug-and-play module on top of current inductive zero-shot models and few-shot learning methods, consistently boosting their performance. Also, **(iii)** our approach substantially outperforms recent transductive few-shot methods in the literature, notably due to the KL-based language supervision as a critical success factor.

Related Work

Transduction for vision-only classifiers.The use of unlabeled test data at inference time has received attention lately in rapidly emerging subjects, such as few-shot learning and unsupervised test-time adaptation. Examples include adjusting batch normalization layer statistics [46] and minimizing the entropy of predictions [60], which can be supplemented by pseudo-labeling strategies [36]. In the few-shot literature solely based on vision models, transduction leverages both the few labeled samples and unlabeled test data, outperforming inductive methods [76; 5; 24; 37; 75]. One of the first works introducing transduction in vision-based few-shot learning proposes propagating the labels from the support (labeled) to the query (unlabeled) set with a meta-learned graph [39]. Building on this idea, another work proposes to iteratively augment the support set to improve label propagation [34]. LaplacianShot [76] also exploits the inherent structure of the data through a graph-Laplacian clustering, which discourages disparate class predictions for samples with close features, while matching each query set point to the nearest support prototype. Alternative approaches propose directly learning the class prototypes. For instance, Transductive Fine-Tuning (TF) [13] uses the prediction entropy on the query samples as a regularization term, while TIM and its variants [5; 59] employ the mutual information between the query samples and their predictions. BD-CSPN [37] refines the class prototypes by reducing the feature biases between the support set and the most confident query samples. An additional group of methods performs clustering in the feature space, for instance, by solving an optimal transport problem like PT-MAP [24], by projecting features into sub-spaces to facilitate clustering [75], or by revisiting the standard K-means with an additional partition-complexity regularizer to control the number of predicted classes [44].

Zero- and few-shot learning in VLMs.Thanks to their extensive pre-training, VLMs exhibit stronger generalization capabilities than vision-only models but may also fail [50; 69; 57]. In response, substantial recent efforts have been directed towards using their general knowledge and adapting them on more specific tasks [63; 73; 70]. Arguably, the most popular strategy is prompt tuning [35], which is explored both in the unsupervised [43; 15; 41; 1] and few-shot [73; 72; 40; 12; 65; 6; 74; 8; 9; 29; 30] settings. The pioneering work, CoOp [73], updates input text-prompt tokens by leveraging the context provided by the few labeled samples (i.e., the support set). Building on this success, various strategies have been developed to enhance this approach, especially through additional regularization. For instance, ProGrad [74] guides the prompts towards the original hand-crafted ones by gradient projection. Prompt tuning has also been explored in the zero-shot setting, e.g., using the predictive confidence to generate pseudo-labels [25; 41]. Despite its popularity, prompt tuning remains tedious in terms of computations, due to the many back-propagations through the text encoder. This challenge is compounded in the recent developments, which introduce visual tokens [29; 30] alongside the text tokens. In contrast, there has been limited efforts so far in developing black-box methods [48; 17; 16; 66; 62], which only access the final embedding states. These methods often rely on the so-called adapters [23], like Tip-Adapter(-F) [70], which adds a classifier at the output of the vision encoder, in the form of a cache model involving the few-shot samples. Lately, a strong baseline based on Gaussian discriminant analysis clustering [62] demonstrates VLMs' adaptation abilities with a Gaussian hypothesis on the embedding space.

Transductive inference in VLMs.Despite the growing interest in unsupervised, zero-shot and few-shot learning for VLMs, the transductive-inference paradigm has not been explored so far in this new multi-modal context, except for the very recent work in [45], which was deployed for small-size tasks (\(\approx 10^{2}\) test samples). However, the method in [45] may not be computationally tractable for large-scale query sets, due to expensive inner loops for estimating the Dirichlet distribution's parameters. We provide a computationally efficient solution, which can scale up to large target datasets (such as ImageNet), while being easily amenable as a plug-and-play module on top of state-of-the-art inductive methods. It is worth mentioning that test-time adaptation methods also employ the transduction paradigm, but their settings are very different from those studied in this work. For instance, SwapPrompt [41] has been designed to make batch predictions on-the-fly, and has continual-learning mechanisms such as an exponential moving average prompt across batches. TPT [43] work on a single sample with many data augmentations to train one prompt per image. Both methods require access to model weights for training (i.e., do not operate in a black-box setting) and an expensive training procedure. We also note that prompt tuning does not scale well with the model size and is even impractical on very large models such as EVA-CLIP-8B [55]. We still report the performances of this class of methods in the Appendix (Table 9).

TransCLIP: Transduction for Vision-Language Models

In this section, we describe our objective function for transductive inference in vision-language models, and derive a block majorize-minimize (BMM) algorithm for minimizing it, with guaranteed convergence and decoupled sample-assignment updates. When dealing with a zero-shot classification problem based on a vision-language model, such as CLIP, and given a set of \(K\) candidate classes, one creates textual descriptions, the so-called prompts [38], each corresponding to a class, e.g., \(\mathbf{c}_{k}\) = a photo of a [kth class name], \(k=1,\ldots,K\). Let \(\mathbf{t}_{k}=\theta_{t}(\mathbf{c}_{k})\) denotes the corresponding normalized (unit hyper-sphere) embedding representation, with \(\theta_{t}\) representing the language encoder. Similarly, each test image \(\mathbf{x}_{i}\), \(i=1,\ldots,N\), is projected onto a normalized embedding space of the same dimension, using visual encoder \(\theta_{v}\): \(\mathbf{f}_{i}=\theta_{v}(\mathbf{x}_{i})\). In the standard inductive zero-shot inference, classification of a given image \(\mathbf{x}_{i}\) is done by evaluating the cosine similarity between these two encoded modalities and predicting the class corresponding to the most similar text embedding: \(\hat{k}=\operatorname*{argmax}_{k}\ \mathbf{f}_{i}^{\top}\mathbf{t}_{k}\). Furthermore, one can compute pseudo-labels corresponding to these zero-shot predictions by applying the softmax function with a temperature scaling3\(\tau\), which yields the following probability-simplex vector for each sample:

Footnote 3: Note that each CLIP version comes with a temperature scaling factor \(\tau\), which is optimized along with the learnable parameters during pre-training.

\[\mathbf{\hat{y}}_{i}=(\hat{y}_{i,k})_{1\leq k\leq K}\in\Delta_{K};\quad\hat{y} _{i,k}=\frac{\exp(\tau\mathbf{f}_{i}^{\top}\mathbf{t}_{k})}{\sum_{j}\exp(\tau \mathbf{f}_{i}^{\top}\mathbf{t}_{j})}\] (1)

where \(\Delta_{K}\) denotes the probability simplex. Let \(\mathcal{D}=\{i\in\mathbb{N}:1\leq i\leq N\}=\mathcal{S}\ \cup\ \mathcal{Q}\) denotes the samples indices of the target dataset, with \(\mathcal{Q}\) the set of unlabeled _query_ samples indices, i.e., those for which we want to make a prediction, and \(\mathcal{S}\) the set of labeled _support_ samples indices in the few-shot setting.

Note that, in the zero-shot setting, \(\mathcal{S}=\emptyset\). We define a Gaussian Mixture Model-clustering (GMM) term in our objective function by modeling the likelihood of these target data as a balanced mixture of multivariate Gaussian distributions, each representing a class \(k\) and parameterized by mean vector \(\boldsymbol{\mu}_{k}\) and a diagonal covariance matrix \(\boldsymbol{\Sigma}\):

\[p_{i,k}=\text{Pr}(\mathbf{f}_{i},k;\boldsymbol{\mu}_{k},\boldsymbol{\Sigma}) \propto\det(\boldsymbol{\Sigma})^{-\frac{1}{2}}\exp\left(-\frac{1}{2}(\mathbf{ f}_{i}-\boldsymbol{\mu}_{k})^{\top}\boldsymbol{\Sigma}^{-1}(\mathbf{f}_{i}- \boldsymbol{\mu}_{k})\right)\]

Notation \(p_{i,k}\) is introduced here to simplify the equations in the sequel. Notice that, unlike standard GMMs, we deploy a common diagonal covariance matrix \(\boldsymbol{\Sigma}\) across all classes. Interestingly, in our experiments, we found this simplifying choice improves the performance while reducing the computational load as there are substantially fewer parameters to learn. This is particularly the case when dealing with large numbers of classes as in large-scale target datasets such as ImageNet.

### Proposed objective function

Our objective function depends on two types of variables: (i) Sample-to-class assignment variables within the probability simplex: \(\mathbf{z}_{i}=(z_{i,k})_{1\leq k\leq K}\in\Delta_{K}\), \(i\in\mathcal{Q}\); and (ii) GMM parameters \(\boldsymbol{\mu}=(\boldsymbol{\mu}_{k})_{1\leq k\leq K}\) and \(\boldsymbol{\Sigma}\).

We propose to minimize the following objective, which integrates a GMM-clustering term, a Laplacian regularizer and a Kullback-Leibler (KL) divergence penalty encoding the text-encoder knowledge and guiding the transductive learning process:

\[\mathcal{L}_{\text{ZgKO-SINOT}}(\mathbf{z},\boldsymbol{\mu},\boldsymbol{ \Sigma})=\underbrace{-\sum_{i\in\mathcal{Q}}\mathbf{z}_{i}^{\top}\log(\mathbf{ p}_{i})}_{\text{GMM clustering}}-\underbrace{\sum_{i\in\mathcal{D}}\sum_{j\in\mathcal{D}}w_{ij} \mathbf{z}_{i}^{\top}\mathbf{z}_{j}}_{\text{Laplacian reg.}}+\underbrace{ \sum_{i\in\mathcal{Q}}\text{KL}_{\lambda}(\mathbf{z}_{i}||\hat{\mathbf{y}}_{i} )}_{\text{Text knowledge}}\] (2)

where \(\mathbf{p}_{i}=(p_{i,k})_{1\leq k\leq K}\in\Delta_{K}\) concatenates the GMM probabilities, \(w_{ij}\) denotes some measure of affinity between visual embeddings \(\mathbf{f}_{i}\) and \(\mathbf{f}_{j}\), and the sample-wise parameterized4 KL terms are given by:

Footnote 4: Notice that, for \(\lambda=1\), the expression in (3) corresponds to the KL divergence.

\[\text{KL}_{\lambda}(\mathbf{z}_{i}||\hat{\mathbf{y}}_{i})=\mathbf{z}_{i}^{\top }\log\mathbf{z}_{i}-\lambda\mathbf{z}_{i}^{\top}\log\hat{\mathbf{y}}_{i},\quad i \in\mathcal{Q};\quad\lambda>0\] (3)

In the following, we describe the effect of each term in our objective function in (2):* **GMM-based clustering**: This unsupervised-learning term is akin to the GMM-based maximum-likelihood estimation objective in the standard EM algorithm [3]. By taking the negative logarithm, its minimization corresponds to maximizing the likelihood of the data. It can also be viewed as a probabilistic generalization of the K-means clustering objective [28]. Indeed, assuming \(\bm{\Sigma}\) is the identity matrix reduces the first term in (2) to the K-means objective.
* **Laplacian regularization**: The second term in (2) is the Laplacian regularizer, widely used in the context of graph/spectral clustering [56] and semi-supervised learning [7]. This term encourages nearby samples in the visual-embedding space (i.e., pairs of samples with high affinity \(w_{i,j}\)) to have similar \(\mathbf{z}\) assignments. In our case, we propose to build a positive semi-definite (PSD) affinity matrix based on the cosine similarities as \(w_{ij}=\mathbf{f}_{i}^{\top}\mathbf{f}_{j}\) (Gram matrix). As we see below, this PSD condition is important to obtain a convergent Majorize-Minimize optimizer with decoupled (parallel) sample-wise updates for the \(\mathbf{z}\)-assignments, yielding a highly efficient transduction for large-scale target datasets (such as ImageNet).
* **Text-guided KL divergence:** This term is dedicated to vision-language models and, as we will see in our experiments (ablation studies in Tables 4 and 6), has a substantial effect on performance. It encourages the prediction not to deviate significantly from the zero-shot predictions, thereby providing text supervision to the other two unsupervised-learning terms. Furthermore, being convex over \(\mathbf{z}_{i}\), \(i\in\mathcal{Q}\), this term facilitates the optimization of the objective w.r.t the assignment variables.

### Extension to the few-shot setting

Our zero-shot formulation naturally extends to the few-shot setting. We integrate supervision from the labeled-support samples, in the form of a cross-entropy, which corresponds to minimizing the following overall loss:

\[\mathcal{L}_{\text{FEW-SHOT}}(\mathbf{z},\bm{\mu},\bm{\Sigma})=-\frac{\gamma} {|\mathcal{S}|}\sum_{i\in\mathcal{S}}\mathbf{z}_{i}^{\top}\log(\mathbf{p}_{i} )+\frac{1}{|\mathcal{Q}|}\mathcal{L}_{\text{ZERO-SHOT}}(\mathbf{z},\bm{\mu}, \bm{\Sigma})\] (4)

Note that, in the first term, the \(\mathbf{z}_{i}\) are fixed, with \(\mathbf{z}_{i}\) = \(\mathbf{y}_{i}\), \(i\in\mathcal{S}\) and \(\mathbf{y}_{i}\) the one-hot ground-truth label associated with the corresponding shot.

### Block Majorize-Minimize (BMM) optimization

As our objective depends on three types of variables (\(\mathbf{z}\), \(\bm{\mu}\), \(\bm{\Sigma}\)), we proceed with a BMM procedure, alternating three sub-step optimizers. Each sub-step optimizes over one block of variables while the other two are fixed, ensuring the overall objective does not increase. Importantly, the obtained \(\mathbf{z}\)-updates (Eq. (5)) are decoupled, yielding computationally efficient transduction for large-scale datasets. Also, our overall procedure is guaranteed to converge (Theorem 1).

Majorize-Minimize (MM) with respect to the \(\mathbf{z}\)-blockWhen \(\bm{\mu}\) and \(\bm{\Sigma}\) are fixed, both the GMM- and KL-based terms are convex w.r.t \(\mathbf{z}_{i}\). However, the Laplacian term is concave5 (for PSD matrix \(\bm{W}\)). Therefore, we proceed with inner iterations, each minimizing a linear and tight upper bound, the so-called majorizing function in the MM-optimization literature [33; 21; 31], which guarantees the overall objective does not increase. To obtain the tight linear bound, let us write the Laplacian term conveniently in the following matrix form: \(\mathbf{z}^{\top}\bm{\Psi}\mathbf{z}\), with \(\bm{\Psi}=-\bm{W}\otimes\bm{I}\), where \(\otimes\) denotes the Kronecker product and \(\bm{I}\) is the \(N\times N\) identity matrix. Note that \(\bm{\Psi}\) is negative semi-definite for a positive semi-definite \(\bm{W}\). Therefore, \(\mathbf{z}^{\top}\bm{\Psi}\mathbf{z}\) is a concave function with respect to \(\mathbf{z}\), and its first-order approximation at current solution \(\mathbf{z}^{l}\) (\(l\) being the iteration index) gives the following tight6 upper bound on the Laplacian term:

Footnote 5: This makes the overall sub-problem non-convex and there is no closed-form solution.

Footnote 6: “Tight” means that the upper bound is equal to the original objective at the current solution \(\mathbf{z}^{l}\).

\[\mathbf{z}^{\top}\bm{\Psi}\mathbf{z}\leq(\mathbf{z}^{l})^{\top}\bm{\Psi} \mathbf{z}^{l}+(\bm{\Psi}\mathbf{z}^{l})^{\top}(\mathbf{z}-\mathbf{z}^{l})\]

Replacing the quadratic Laplacian term by this linear bound yields a majorizing function on our overall objective. Importantly, this majorizing function is a sum of decoupled objectives, each corresponding to one assignment variable \(\mathbf{z}_{i}\), yielding a highly efficient optimizer for large-scale target datasets. Indeed, using simplex constraints \(\mathbf{z}_{i}\in\Delta_{K},i\in\mathcal{Q}\), and solving the Karush-Kuhn-Tucker (KKT) conditions independently for each \(\mathbf{z}_{i}\), we obtain the following decoupled update rules for the \(\mathbf{z}\)-block:

\[\mathbf{z}_{i}^{(l+1)}=\frac{\hat{\mathbf{y}}_{i}^{\lambda}\odot \exp(\log(\mathbf{p}_{i})+\sum_{j\in\mathcal{D}}w_{ij}\mathbf{z}_{j}^{(l)})}{( \hat{\mathbf{y}}_{i}^{\lambda}\odot\exp(\log(\mathbf{p}_{i})+\sum_{j\in \mathcal{D}}w_{ij}\mathbf{z}_{j}^{(l)}))^{\top}\mathds{1}_{K}}\] (5)

Closed-form updates of \(\boldsymbol{\mu}\) and \(\boldsymbol{\Sigma}\)When both \(\mathbf{z}\) and \(\boldsymbol{\Sigma}\) are fixed, our objective in (4) is convex. It can be minimized by setting its gradient w.r.t each \(\boldsymbol{\mu}_{k}\) to zero, which yields the following closed-form updates:

\[\boldsymbol{\mu}_{k}=\frac{\frac{\gamma}{|\mathcal{S}|}\sum_{i\in \mathcal{S}}z_{i,k}\mathbf{f}_{i}+\frac{1}{|\mathcal{Q}|}\sum_{i\in\mathcal{Q }}z_{i,k}\mathbf{f}_{i}}{\frac{\gamma}{|\mathcal{S}|}\sum_{i\in\mathcal{S}}z_{ i,k}+\frac{1}{|\mathcal{Q}|}\sum_{i\in\mathcal{Q}}z_{i,k}}\] (6)

Similarly, when both \(\mathbf{z}\) and \(\boldsymbol{\mu}\) are fixed, the following closed-form updates minimize the overall objective w.r.t \(\boldsymbol{\Sigma}\):

\[\text{diag}(\boldsymbol{\Sigma})=\frac{\frac{\gamma}{|\mathcal{S}|}\sum_{i\in \mathcal{S}}\sum_{k}z_{i,k}(\mathbf{f}_{i}-\boldsymbol{\mu}_{k})^{2}+\frac{1}{ |\mathcal{Q}|}\sum_{i\in\mathcal{Q}}\sum_{k}z_{i,k}(\mathbf{f}_{i}- \boldsymbol{\mu}_{k})^{2}}{\gamma+1}\] (7)

The complete procedure is summarized in Appendix B. Note that, after convergence, we use the sample-to-class assignment variables \(\mathbf{z}_{i}\) as predictions for each sample \(i\) of the query set \(\mathcal{Q}\) using the argmax operation for conventional classification.

### Convergence

Our optimizer can be viewed as an instance of the general Block Majorize-Minimize paradigm for optimization [51], which optimizes a majorizing function for each block of variables. The convergence of general BMM procedures is well studied in the optimization community [51]. Indeed, under certain conditions (such as the strong convexity of the block-wise majorizing functions), we can establish convergence of our procedure using the following result (more details in Appendix A):

**Theorem 1** (Convergence of BMM [51]): _Assume that, for each block, the majorizing function is quasi-convex, and its first-order behavior is the same as the original objective locally. Furthermore, assume that the sub-problem solved for each block has a unique solution. Then, every limit point of the iterates generated by BMM is a coordinate-wise minimum of the overall objective._

## 4 Experiments

Datasets.Following the setting of previous works [73; 43], we assess TransCLIP on ImageNet [11] and ten datasets for fine-grained classification of scenes (SUN397 [64]), aircraft types (Aircraft [42]), satellite imagery (EuroSAT [18]), automobiles (Cars [32]), food items (Food [4]), pet breeds (Pets [49]), flowers (Flowers [47]), general objects (Caltech101 [14]), textures (DTD [10]) and human actions (UCF101 [54]). We additionally measure performance on four variants of ImageNet (Adversarial [20], ImageNetV2 [52], Rendition [19], Sketch [61]). Numerical results are reported in terms of the top-1 accuracy with the ViT-B/16 encoder, averaged over three random seeds.

Benchmarks.We aim to show the breadth of potential applications of transduction in the context of VLMs. Notably, employing supervised fine-tuning, followed by transduction with TransCLIP on the unlabeled test samples, emerges as a powerful and efficient solution. This is particularly convenient when the labeled samples (the support set) and/or computational power are not accessible at inference (i.e., test) time7. To this end, we first study the applicability of our zero-shot formulation TransCLIP-ZS (Eq. (2)) across three settings: (i) on top of inductive _zero-shot_ learning and popular _few-shot_ learning methods; (ii) on top of 16-shot ImageNet pretraining for _cross-dataset_ transferability, and 

[MISSING_PAGE_FAIL:7]

generalization tasks. However, we observe in Table 1 that transductive gains sometimes decrease with the number of shots, presumably because data structure information can be partially captured in the shots. These results underline the value of considering the structure of the unlabeled test samples during prediction, especially on top of zero- and low-shot models or when facing domain shifts, an aspect not leveraged by the current zero- and few-shot VLM literature. More detailed results for five different backbone architectures and comparisons with unsupervised non-transductive methods are provided in Appendix C.1 for the zero-shot setting, in Appendix C.2 for TransCLIP on top of popular few-shot methods, in Appendix C.3 for cross-dataset transferability and in Appendix C.4 for domain generalization. _With its hyper-parameters unchanged_, TransCLIP exhibits strong generalization from convolutional networks to transformer-based models, as also depicted in Figure 1.

Transductive few-shot learning.We compare TransCLIP-FS, TransCLIP-FS without text regularization (i.e., \(\lambda=0\)) and state-of-the-art transductive few-shot methods. It is important to note that these few-shot methods were primarily developed for vision-centric tasks. Hence, they rely on visual information, omitting the textual elements. This allows us to study the impact of our text-based regularization term. Table 4 shows that incorporating language in the transductive paradigm boosts the performance over vision-only methods. Especially for the 1- to 4-shot settings, our language-driven KL penalty enhances the performance by a large margin on many tasks (e.g., ImageNet, SUN397, StanfordCars, DTD). As the number of shots increases, the text-driven penalty becomes less useful, especially for the datasets capitalizing on the visual shots rather than the text-encoder knowledge (e.g., EuroSat and Flowers). This points to promising future directions involving more flexible text regularization (e.g., an adaptable \(\lambda\) taking into account the number of shots and the quality of the text embeddings). Detailed results for five different encoder architectures are provided in Appendix C.5, consistently showing similar conclusions.

\begin{table}
\begin{tabular}{l l l l l l l l l l l l} \hline \hline \multirow{2}{*}{Shots} & \multirow{2}{*}{Method} & \multicolumn{6}{c}{Source} & \multicolumn{6}{c}{Target} \\ \cline{3-11}  & & ImageNet & Adversarial & ImageNetV2 & Redation & Sketch & Average & Average & Average & OOD \\ \cline{2-11}  & **CLIP-VI-VI6** \(\mu\)s/ photo of a & 66 & 67.9 & 60.6 & 73.8 & 46.0 & 59.0 & 57.1 \\  & **+ TransCLIP-25** & 70.36\(\pm\)32 & 49.54\(\pm\)47 & 62.33\(\pm\)70 & 57.92\(\pm\)32 & 61.3\(\pm\)42 & 61.3\(\pm\)42 & 60.22\(\pm\)21 \\ \cline{2-11}  & **CLIP-VI-VI-6**\(\mu\)s/ carbon repelers** & 66.8 & 50.6 & 62.3 & 77.8 & 48.4 & 61.6 & 59.8 \\  & **+ TransCLIP-25** & 71.92\(\pm\)72 & 52.41\(\pm\)64 & 68.42\(\pm\)**51 & 78.16\(\pm\)22 & 51.4\(\pm\)27 & 60.24\(\pm\)61 & 51.1\(\pm\)33 & 61.1\(\pm\)3 \\ \hline \multirow{2}{*}{**3**} & **CLIP-VI-6**\(\mu\)s/ _empty training (C-D)_ & 71.9 & 49.4 & 41.1 & 75.1 & 47.2 & 5.0 & 5.0 & 5.0 \\  & **+ TransCLIP-25** & 73.33\(\pm\)14 & 50.8\(\pm\)**14 & 61.6\(\pm\)**60.8** & 75.84\(\pm\)**67 & 50.93\(\pm\)**63 & 63.0\(\pm\)**60 & 60.4\(\pm\)**61 & 60.4\(\pm\)**61 \\ \cline{2-11}  & **CLIP-VI-6**\(\mu\)s/ _target (TaskRees)_ & 71.0 & 50.3 & 65.6 & 77.8 & 49.2 & 63.2 & 64.7 \\ \cline{2-11}  & **+ TransCLIP-25** & 74.14\(\pm\)11 & 51.9\(\pm\)**16 & 65.5\(\pm\)**62 & 78.44\(\pm\)**60 & 51.6\(\pm\)**62 & 64.3\(\pm\)**31 & 61.8\(\pm\)**61 & 61.8\(\pm\)**61 \\ \hline \hline \end{tabular}
\end{table}
Table 3: Domain Generalization evaluation with improved manual prompting strategy (custom templates are given in Table 24b), 16-shot prompt-tuning and 16-shot adapter.

\begin{table}
\begin{tabular}{l l l l l l l l l l l l l} \hline \hline \multirow{2}{*}{Shots} & \multirow{2}{*}{Method} & \multicolumn{6}{c}{Source} & \multicolumn{6}{c}{Target} \\ \cline{3-11}  & & ImageNet & Adversarial & ImageNetV2 & Redation & Sketch & Average & Average & Average & OOD \\ \cline{2-11}  & **CLIP-VI-VI-6**\(\mu\)s/ photo of a & 66 & 66.7 & 47.9 & 60.6 & 73.8 & 46.0 & 59.0 & 57.1 \\  & **+ TransCLIP-25** & 70.36\(\pm\)32 & 49.54\(\pm\)47 & 62.33\(\pm\)70 & 57.92\(\pm\)32 & 61.3\(\pm\)42 & 61.3\(\pm\)42 & 60.22\(\pm\)21 \\ \cline{2-11}  & **CLIP-VI-6**\(\mu\)s/ carbon repelers** & 66.8 & 50.6 & 62.3 & 77.8 & 48.4 & 61.6 & 59.8 \\  & **+ TransCLIP-25** & 71.92\(\pm\)72 & 52.41\(\pm\)64 & 68.42\(\pm\)**51 & 78.16\(\pm\)22 & 51.4\(\pm\)27 & 60.24\(\pm\)61 & 51.1\(\pm\)33 & 61.1\(\pm\)33 \\ \hline \multirow{2}{*}{**4**} & **CLIP-VI-6**\(\mu\)s/ _empty training (C-D)_ & 71.9 & 49.4 & 41.1 & 75.1 & 47.2 & 5.0 & 5.0 \\  & **+ TransCLIP-25** & 73.33\(\pm\)14 & 50.8\(\pm\)**14 & 61.6\(\pm\)**60.8** & 75.84\(\pm\)**67 & 50.93\(\pm\)**63 & 63.0\(\pm\)**60 & 60.4\(\pm\)**61 & 60.4\(\pm\Comparison with prompt learning.Following current VLMs literature, adapting the input prompt instead of GMM parameters could be seen as a more straightforward solution. For a fair comparison, we adapt Unsupervised Prompt Learning (UPL) [25] for the transductive setting and reevaluate its main hyper-parameter (see Appendix C.1). Table 5 shows clearly that TransCLIP outperforms UPL while being two to three orders of magnitude faster. Additional details on runtime are provided in Table 8 of the Appendix.

### Ablation studies

Components of TransCLIP.We study the impact of the principal components involved in the TransCLIP procedure over four diverse datasets. Table 5(a) shows that updating \(\bm{\mu}\) and \(\bm{\Sigma}\) allows to significantly boost TransCLIP's performance. This indicates the importance of having a dynamic parametric model instead of a fixed one. Table 5(b) demonstrates the critical role of text-driven penalty for TransCLIP in the zero-shot setting. Additional results on the sensitivity of \(\lambda\) in the few-shot setting are depicted in Figure 2 of the Appendix. Alongside the prior findings from Table 4, it is evident that incorporating text information is key to the success of TransCLIP and its wide applicability across the zero- and few-shot learning scenarios. The number of nearest-neighbors considered in the Laplacian term (Eq. (2)) does not make a significant difference in TransCLIP's performance as suggested by Table 5(c). However, removing the Laplacian regularization (Table 5(a)) leads to inferior results on some datasets such as ImageNet and EuroSAT. We choose to consider 3 nearest-neighbors to make the affinity matrix \(W\) sparse and reduce memory consumption. We also investigate the diagonal covariance matrix design by restricting it to be isotropic (i.e., \(\bm{\Sigma}=\sigma^{2}I_{d}\) with \(I_{d}\) the identity matrix). Table 5(d) shows that a non-isotropic \(\bm{\Sigma}\) performs better without significantly increasing the amount of trainable parameters.

Scaling to larger VLMs.We report TransCLIP-ZS performance on EVA-CLIP 8 billion parameter version [55] (approximately 42 times larger than the CLIP-ViT-B/16). It is worth mentioning that TransCLIP is easily applicable to multi-billion parameter models since it does not necessitate gradient computation or model parameter training (i.e., it only requires the memory needed for single-sample inference because the whole dataset processing can be performed one sample at a time). Table 7 shows that transduction can also bring significant improvements to larger models (details in Appendix C.1).

\begin{table}

\end{table}
Table 6: Analysis on the components and sensitivity to hyper-parameters of TransCLIP-ZS.

\begin{table}

\end{table}
Table 5: Performance and runtime comparison between TransCLIP and prompt learning solutions on average over ImageNet and the 10 fine-grained classification datasets. UPL\({}^{*}\) is a transductive adaptation of the original unsupervised procedure in [25], more details in Appendices C.1 and C.5.

## 5 Conclusion

In this work, we studied the transductive paradigm in the context of Vision-Language Models and proposed the TransCLIP method. Our algorithm is highly efficient, as it operates solely in the output embedding space (i.e., black-box setting), making it suitable for a wide range of models, including very large ones. This also enables TransCLIP to be compatible with models that are accessible only through APIs. We first showed how TransCLIP can bring transduction to the inductive zero-shot setting, achieving consistent gains without additional supervision. Then, we proposed a new setting that applies transduction on top of popular few-shot methods, offering a convenient strategy to combine computationally intensive supervised fine-tuning with efficient test-time transduction. Finally, we highlighted the limitations of current transductive few-shot methods and proposed a simple extension of TransCLIP to incorporate labeled samples. In all our experiments, TransCLIP's text-guided KL divergence term appears as a key factor in its success. Future work may focus on further enhancing this regularization term, for example, by making it more resilient (e.g., with adaptive class-wise weighting) when text prompts are less reliable.

## 6 Acknowledgments

M. Zanella and B. Gerin are funded by the Walloon region under grant No. 2010235 (ARIAC by DIGITALWALLONIA4.AI). The present research benefited from computational resources made available on Lucia, infrastructure funded by the Walloon Region under grant No. 1910247.

\begin{table}
\begin{tabular}{l l c c c c c c} \hline \hline  & \multirow{2}{*}{\#Params} & \multicolumn{3}{c}{ImageNet} & \multicolumn{3}{c}{Average (11 datasets)} \\ \cline{3-8}  & & Zero-shot & w/ TransCLIP-ZS & relative \(\Delta\) & Zero-shot & w/ TransCLIP-ZS & relative \(\Delta\) \\ \hline CLIP-ViT-B/16 & 177M & 66.6 & 70.3\(\pm\)**3.7** & **+11**\% & 65.3 & 70.3\(\pm\)**5.0** & **+14**\% \\ CLIP-ViT-L/14 & 427M & 72.9 & 77.2\(\pm\)**4.3** & **+16**\% & 72.5 & 77.4\(\pm\)**4.9** & **+18**\% \\ EVA-CLIP-SB & 7.5B & 82.5 & 84.6\(\pm\)**2.1** & **+12**\% & 81.5 & 85.8\(\pm\)**4.3** & **+23**\% \\ \hline \hline \end{tabular}
\end{table}
Table 7: Performance of TransCLIP-ZS for increasingly large VLMs. Relative \(\Delta\) is the improvement normalized by the zero-shot error: \(\text{(ACC}_{\text{TransCLIP}}\text{ - ACC}_{\text{Zero-Sior}}\text{)}\) / \((100\text{ - ACC}_{\text{Zero-Sior}}\text{)}\).

## References

* Samadh et al. [2024] Jameel Abdul Samadh, Mohammad Hanan Gani, Noor Hussein, Muhammad Uzair Khattak, Muhammad Muzammal Naseer, Fahad Shahbaz Khan, and Salman H Khan. Align your prompts: Test-time prompting with distribution alignment for zero-shot generalization. _Advances in Neural Information Processing Systems_, 36, 2024.
* Belhasin et al. [2022] Omer Belhasin, Guy Bar-Shalom, and Ran El-Yaniv. Transboost: Improving the best imagenet performance using deep transduction. _Advances in Neural Information Processing Systems_, 35:28363-28373, 2022.
* Bishop [2006] Christopher M Bishop. Pattern recognition and machine learning. _Springer google schola_, 2:5-43, 2006.
* Bossard et al. [2014] Lukas Bossard, Matthieu Guillaumin, and Luc Van Gool. Food-101-mining discriminative components with random forests. In _Computer Vision-ECCV 2014: 13th European Conference, Zurich, Switzerland, September 6-12, 2014, Proceedings, Part VI 13_, pages 446-461. Springer, 2014.
* Boudiaf et al. [2020] Malik Boudiaf, Imtiaz Ziko, Jerome Rony, Jose Dolz, Pablo Piantanida, and Ismail Ben Ayed. Information maximization for few-shot learning. _Advances in Neural Information Processing Systems_, 33:2445-2457, 2020.
* Bulat and Tzimiropoulos [2023] Adrian Bulat and Georgios Tzimiropoulos. Lasp: Text-to-text optimization for language-aware soft prompting of vision & language models. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)_, pages 23232-23241, June 2023.
* Chapelle et al. [2010] Olivier Chapelle, Bernhard Scholkopf, and Alexander Zien. _Semi-Supervised Learning_. The MIT Press, 1st edition, 2010. ISBN 0262514125.
* Chen et al. [2022] Guangyi Chen, Weiran Yao, Xiangchen Song, Xinyue Li, Yongming Rao, and Kun Zhang. Plot: Prompt learning with optimal transport for vision-language models. In _The Eleventh International Conference on Learning Representations_, 2022.
* Cho et al. [2023] Eulrang Cho, Jooyeon Kim, and Hyunwoo J Kim. Distribution-aware prompt tuning for vision-language models. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 22004-22013, 2023.
* Cimpoi et al. [2014] Mircea Cimpoi, Subhransu Maji, Iasonas Kokkinos, Sammy Mohamed, and Andrea Vedaldi. Describing textures in the wild. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 3606-3613, 2014.
* Deng et al. [2009] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical image database. In _2009 IEEE Conference on Computer Vision and Pattern Recognition_, pages 248-255, 2009. doi: 10.1109/CVPR.2009.5206848.
* Derakhshani et al. [2022] Mohammad Mahdi Derakhshani, Enrique Sanchez, Adrian Bulat, Victor Guilherme Turrisi da Costa, Cees GM Snoek, Georgios Tzimiropoulos, and Brais Martinez. Variational prompt tuning improves generalization of vision-language models. _arXiv preprint arXiv:2210.02390_, 2022.
* Dhillon et al. [2019] Guneet Singh Dhillon, Pratik Chaudhari, Avinash Ravichandran, and Stefano Soatto. A baseline for few-shot image classification. In _International Conference on Learning Representations_, 2019.
* Fei-Fei et al. [2004] Li Fei-Fei, Rob Fergus, and Pietro Perona. Learning generative visual models from few training examples: An incremental bayesian approach tested on 101 object categories. In _2004 conference on computer vision and pattern recognition workshop_, pages 178-178. IEEE, 2004.
* Feng et al. [2023] Chun-Mei Feng, Kai Yu, Yong Liu, Salman Khan, and Wangmeng Zuo. Diverse data augmentation with diffusions for effective test-time prompt tuning. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 2704-2714, 2023.

* [16] Peng Gao, Shijie Geng, Renrui Zhang, Teli Ma, Rongyao Fang, Yongfeng Zhang, Hongsheng Li, and Yu Qiao. Clip-adapter: Better vision-language models with feature adapters. _International Journal of Computer Vision_, pages 1-15, 2023.
* [17] Ziyu Guo, Renrui Zhang, Longtian Qiu, Xianzheng Ma, Xupeng Miao, Xuming He, and Bin Cui. Calip: Zero-shot enhancement of clip with parameter-free attention. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 37, pages 746-754, 2023.
* [18] Patrick Helber, Benjamin Bischke, Andreas Dengel, and Damian Borth. Eurosat: A novel dataset and deep learning benchmark for land use and land cover classification. _IEEE Journal of Selected Topics in Applied Earth Observations and Remote Sensing_, 12(7):2217-2226, 2019.
* [19] Dan Hendrycks, Steven Basart, Norman Mu, Saurav Kadavath, Frank Wang, Evan Dorundo, Rahul Desai, Tyler Zhu, Samyak Parajuli, Mike Guo, et al. The many faces of robustness: A critical analysis of out-of-distribution generalization. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 8340-8349, 2021.
* [20] Dan Hendrycks, Kevin Zhao, Steven Basart, Jacob Steinhardt, and Dawn Song. Natural adversarial examples. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 15262-15271, 2021.
* [21] Mingyi Hong, Xiangfeng Wang, Meisam Razaviyayn, and Zhi-Quan Luo. Iteration complexity analysis of block coordinate descent methods. _Mathematical Programming_, 163:85-114, 2017.
* [22] Zhong, D Friedman, and D Chen. Factual probing is [mask]: Learning vs. learning to recall. In _Conference of the North American Chapter of the Association for Computational Linguistics (NAACL)_, 2021.
* [23] Neil Houlsby, Andrei Giurgiu, Stanislaw Jastrzebski, Bruna Morrone, Quentin De Laroussilhe, Andrea Gesmundo, Mona Attariyan, and Sylvain Gelly. Parameter-efficient transfer learning for nlp. In _International Conference on Machine Learning_, pages 2790-2799. PMLR, 2019.
* [24] Yuqing Hu, Vincent Gripon, and Stephane Pateux. Leveraging the feature distribution in transfer-based few-shot learning. In _International Conference on Artificial Neural Networks_, pages 487-499, 2021.
* [25] Tony Huang, Jack Chu, and Fangyun Wei. Unsupervised prompt learning for vision-language models. _arXiv preprint arXiv:2204.03649_, 2022.
* [26] Z Jiang, F Xu, J Araki, and G Neubig. How can we know what language models know. In _Association for Computational Linguistics (ACL)_, 2020.
* [27] Thorsten Joachims. Transductive inference for text classification using support vector machines. In _Proceedings of the Sixteenth International Conference on Machine Learning_, pages 200-209, 1999.
* [28] Michael Kearns, Yishay Mansour, and Andrew Y Ng. An information-theoretic analysis of hard and soft assignment methods for clustering. _Learning in graphical models_, pages 495-520, 1998.
* [29] Muhammad Uzair Khattak, Hanoona Rasheed, Muhammad Maaz, Salman Khan, and Fahad Shahbaz Khan. Maple: Multi-modal prompt learning. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 19113-19122, 2023.
* [30] Muhammad Uzair Khattak, Syed Talal Wasim, Muzammal Naseer, Salman Khan, Ming-Hsuan Yang, and Fahad Shahbaz Khan. Self-regulating prompts: Foundational model adaptation without forgetting. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 15190-15200, 2023.
* [31] Philipp Krahenbuhl and Vladlen Koltun. Parameter learning and convergent inference for dense random fields. In _International conference on machine learning_, pages 513-521. PMLR, 2013.
* [32] Jonathan Krause, Michael Stark, Jia Deng, and Li Fei-Fei. 3d object representations for fine-grained categorization. In _Proceedings of the IEEE international conference on computer vision workshops_, pages 554-561, 2013.

* Lange et al. [2000] Kenneth Lange, David R Hunter, and Ilsoon Yang. Optimization transfer using surrogate objective functions. _Journal of computational and graphical statistics_, 9(1):1-20, 2000.
* Lazarou et al. [2021] Michalis Lazarou, Tania Stathaki, and Yannis Avrithis. Iterative label cleaning for transductive and semi-supervised few-shot learning. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 8751-8760, 2021.
* Lester et al. [2021] Brian Lester, Rami Al-Rfou, and Noah Constant. The power of scale for parameter-efficient prompt tuning. _arXiv preprint arXiv:2104.08691_, 2021.
* Liang et al. [2020] Jian Liang, Dapeng Hu, and Jiashi Feng. Do we really need to access the source data? source hypothesis transfer for unsupervised domain adaptation. In _International conference on machine learning_, pages 6028-6039. PMLR, 2020.
* Liu et al. [2020] Jinlu Liu, Liang Song, and Yongqiang Qin. Prototype rectification for few-shot learning. In _Computer Vision-ECCV 2020: 16th European Conference, Glasgow, UK, August 23-28, 2020, Proceedings, Part I 16_, pages 741-756. Springer, 2020.
* Liu et al. [2023] Pengfei Liu, Weizhe Yuan, Jinlan Fu, Zhengbao Jiang, Hiroaki Hayashi, and Graham Neubig. Pre-train, prompt, and predict: A systematic survey of prompting methods in natural language processing. _ACM Computing Surveys_, 55(9):1-35, 2023.
* Liu et al. [2019] Y Liu, J Lee, M Park, S Kim, E Yang, SJ Hwang, and Y Yang. Learning to propagate labels: Transductive propagation network for few-shot learning. In _7th International Conference on Learning Representations, ICLR 2019_, 2019.
* Lu et al. [2022] Yuning Lu, Jianzhuang Liu, Yonggang Zhang, Yajing Liu, and Xinmei Tian. Prompt distribution learning. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 5206-5215, 2022.
* Ma et al. [2023] Xiaosong Ma, Jie Zhang, Song Guo, and Wenchao Xu. Swapprompt: Test-time prompt adaptation for vision-language models. In _Thirty-seventh Conference on Neural Information Processing Systems_, 2023.
* Maji et al. [2013] Subhransu Maji, Esa Rahtu, Juho Kannala, Matthew Blaschko, and Andrea Vedaldi. Fine-grained visual classification of aircraft. _arXiv preprint arXiv:1306.5151_, 2013.
* Manli et al. [2022] Shu Manli, Nie Weili, Huang De-An, Yu Zhiding, Goldstein Tom, Anandkumar Anima, and Xiao Chaowei. Test-time prompt tuning for zero-shot generalization in vision-language models. In _NeurIPS_, 2022.
* Martin et al. [2022] Segolene Martin, Malik Boudiaf, Emilie Chouzenoux, Jean-Christophe Pesquet, and Ismail Ayed. Towards practical few-shot query sets: Transductive minimum description length inference. _Advances in Neural Information Processing Systems_, 35:34677-34688, 2022.
* Martin et al. [2024] Segolene Martin, Yunshi Huang, Fereshteh Shakeri, Jean-Christophe Pesquet, and Ismail Ben Ayed. Transductive zero-shot and few-shot clip. In _CVPR 2024-IEEE Conference on Computer Vision and Pattern Recognition_, 2024.
* Nado et al. [2020] Zachary Nado, Shreyas Padhy, D Sculley, Alexander D'Amour, Balaji Lakshminarayanan, and Jasper Snoek. Evaluating prediction-time batch normalization for robustness under covariate shift. _arXiv preprint arXiv:2006.10963_, 2020.
* Nilsback and Zisserman [2008] Maria-Elena Nilsback and Andrew Zisserman. Automated flower classification over a large number of classes. In _2008 Sixth Indian conference on computer vision, graphics & image processing_, pages 722-729. IEEE, 2008.
* Ouali et al. [2023] Yassine Ouali, Adrian Bulat, Brais Matinez, and Georgios Tzimiropoulos. Black box few-shot adaptation for vision-language models. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 15534-15546, 2023.
* Parkhi et al. [2012] Omkar M Parkhi, Andrea Vedaldi, Andrew Zisserman, and CV Jawahar. Cats and dogs. In _2012 IEEE conference on computer vision and pattern recognition_, pages 3498-3505. IEEE, 2012.

* Radford et al. [2021] Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, Gretchen Krueger, and Ilya Sutskever. Learning transferable visual models from natural language supervision, 2021.
* Razaviyayn et al. [2013] Meisam Razaviyayn, Mingyi Hong, and Zhi-Quan Luo. A unified convergence analysis of block successive minimization methods for nonsmooth optimization. _SIAM Journal on Optimization_, 23(2):1126-1153, 2013. doi: 10.1137/120891009. URL https://doi.org/10.1137/120891009.
* Recht et al. [2019] Benjamin Recht, Rebecca Roelofs, Ludwig Schmidt, and Vaishaal Shankar. Do imagenet classifiers generalize to imagenet? In _International conference on machine learning_, pages 5389-5400. PMLR, 2019.
* Shin et al. [2020] T Shin, Logan R. L. IV Razeghi, Y, E Wallace, and S Singh. Autoprompt: Eliciting knowledge from language models with automatically generated prompts. In _Empirical Methods in Natural Language Processing (EMNLP)_, 2020.
* Soomro et al. [2012] Khurram Soomro, Amir Roshan Zamir, and Mubarak Shah. Ucf101: A dataset of 101 human actions classes from videos in the wild. _arXiv preprint arXiv:1212.0402_, 2012.
* Sun et al. [2024] Quan Sun, Jinsheng Wang, Qiying Yu, Yufeng Cui, Fan Zhang, Xiaosong Zhang, and Xinlong Wang. Eva-clip-18b: Scaling clip to 18 billion parameters, 2024.
* Tang et al. [2019] Meng Tang, Dmitri Marin, Ismail Ben Ayed, and Yuri Boykov. Kernel cuts: Kernel and spectral clustering meet regularization. _International Journal of Computer Vision_, 127:477-511, 2019.
* Udandarao et al. [2024] Vishaal Udandarao, Ameya Prabhu, Adhiraj Ghosh, Yash Sharma, Philip HS Torr, Adel Bibi, Samuel Albanie, and Matthias Bethge. No "zero-shot" without exponential data: Pretraining concept frequency determines multimodal model performance. _arXiv preprint arXiv:2404.04125_, 2024.
* Vapnik [1999] V.N. Vapnik. An overview of statistical learning theory. _IEEE Transactions on Neural Networks_, 10(5):988-999, 1999. doi: 10.1109/72.788640.
* Veilleux et al. [2021] Olivier Veilleux, Malik Boudiaf, Pablo Piantanida, and Ismail Ben Ayed. Realistic evaluation of transductive few-shot learning. _Advances in Neural Information Processing Systems_, 34:9290-9302, 2021.
* Wang et al. [2021] Dequan Wang, Evan Shelhamer, Shaoteng Liu, Bruno Olshausen, and Trevor Darrell. Tent: Fully test-time adaptation by entropy minimization. In _International Conference on Learning Representations_, 2021. URL https://openreview.net/forum?id=uX13bZLkr3c.
* Wang et al. [2019] Haohan Wang, Songwei Ge, Zachary Lipton, and Eric P Xing. Learning robust global representations by penalizing local predictive power. _Advances in Neural Information Processing Systems_, 32, 2019.
* Wang et al. [2023] Zhengbo Wang, Jian Liang, Lijun Sheng, Ran He, Zilei Wang, and Tieniu Tan. A hard-to-beat baseline for training-free clip-based adaptation. In _The Twelfth International Conference on Learning Representations_, 2023.
* Wortsman et al. [2022] Mitchell Wortsman, Gabriel Ilharco, Jong Wook Kim, Mike Li, Simon Kornblith, Rebecca Roelofs, Raphael Gontijo Lopes, Hannaneh Hajishirzi, Ali Farhadi, Hongseok Namkoong, et al. Robust fine-tuning of zero-shot models. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 7959-7971, 2022.
* Xiao et al. [2010] Jianxiong Xiao, James Hays, Krista A Ehinger, Aude Oliva, and Antonio Torralba. Sun database: Large-scale scene recognition from abbey to zoo. In _2010 IEEE computer society conference on computer vision and pattern recognition_, pages 3485-3492. IEEE, 2010.
* Yao et al. [2023] Hantao Yao, Rui Zhang, and Changsheng Xu. Visual-language prompt tuning with knowledge-guided context optimization. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 6757-6767, 2023.

* [66] Tao Yu, Zhihe Lu, Xin Jin, Zhibo Chen, and Xinchao Wang. Task residual for tuning vision-language models. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 10899-10909, 2023.
* [67] Maxime Zanella and Ismail Ben Ayed. Low-rank few-shot adaptation of vision-language models. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition Workshops_, pages 1593-1603, 2024.
* [68] Maxime Zanella and Ismail Ben Ayed. On the test-time zero-shot generalization of vision-language models: Do we really need prompt learning? In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 23783-23793, 2024.
* [69] Jingyi Zhang, Jiaxing Huang, Sheng Jin, and Shijian Lu. Vision-language models for vision tasks: A survey. _arXiv preprint arXiv:2304.00685_, 2023.
* [70] Renrui Zhang, Wei Zhang, Rongyao Fang, Peng Gao, Kunchang Li, Jifeng Dai, Yu Qiao, and Hongsheng Li. Tip-adapter: Training-free adaption of clip for few-shot classification. In _European Conference on Computer Vision_, pages 493-510. Springer, 2022.
* [71] Dengyong Zhou, Olivier Bousquet, Thomas Lal, Jason Weston, and Bernhard Scholkopf. Learning with local and global consistency. _Advances in neural information processing systems_, 16, 2003.
* [72] Kaiyang Zhou, Jingkang Yang, Chen Change Loy, and Ziwei Liu. Conditional prompt learning for vision-language models. In _IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)_, 2022.
* [73] Kaiyang Zhou, Jingkang Yang, Chen Change Loy, and Ziwei Liu. Learning to prompt for vision-language models. _International Journal of Computer Vision (IJCV)_, 2022.
* [74] Beier Zhu, Yulei Niu, Yucheng Han, Yue Wu, and Hanwang Zhang. Prompt-aligned gradient for prompt tuning. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 15659-15669, 2023.
* [75] Hao Zhu and Piotr Koniusz. Ease: Unsupervised discriminant subspace learning for transductive few-shot learning. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)_, pages 9078-9088, June 2022.
* [76] Imtiaz Ziko, Jose Dolz, Eric Granger, and Ismail Ben Ayed. Laplacian regularized few-shot learning. In _International conference on machine learning_, pages 11660-11670. PMLR, 2020.

More details on convergence

As mentioned in the main paper, our derived block-wise optimization procedure in Eqs. (5), (6) and (7) can be viewed as an instance of the the general Block Majorize-Minimize paradigm for non-convex optimization, also referred to as the Block Successive Minimization (BSUM) method [51]. We update each block of variables, with the other blocks fixed, by minimizing a tight upper bound (majorizing function), thereby guaranteeing the overall objective does not increase at each step. In the steps with respect to \(\bm{\mu}\) and \(\bm{\Sigma}\), we optimize directly the objective in closed-form, which could be also viewed as a particular case of optimizing a tight upper bound. The convergence of the general BSUM procedure is well studied in the optimization community [51]. Indeed, under the following assumptions for each block of variables, one can establish convergence results for the application of BSUM to non-convex problems [51]:

* A1: The majorizing function is a tight upper bound, i.e., equal to the objective at the current solution.
* A2: The first-order behavior of the majorizing function is the same as the original objective locally.

Indeed, when assumptions A1 and A2 are verified for each block, we have the result in Theorem 1[51].

As for our case of alternating Eqs. (5), (6) and (7), it is straightforward to verify that Assumptions A1 and A2 are satisfied for each block of variables. Furthermore, the majorizing functions are convex and thus quasi-convex. Also, the sub-problem solved for each block has a unique solution. In particular, for the \(\mathbf{z}\)-updates, the majorizing function is the sum of a linear and a strongly convex function (the negative entropy). Therefore, it is strongly convex. As for the \(\bm{\mu}\)- and \(\bm{\Sigma}\)-updates, the solutions are obtained in closed form (hence unique).

```
0: A set of image embeddings \((\mathbf{f}_{i})_{1\leq i\leq N}\), a set of textual class embeddings \((\mathbf{t}_{k})_{1\leq k\leq K}\), \(\tau\) the temperature of the CLIP model.
1:\(w_{i,j}\leftarrow\mathbf{f}_{i}^{\intercal}\mathbf{f}_{j}\quad\forall\;i,j\)\(\triangleright\) Affinity measure, truncated with top-3 values
2:\(\hat{\mathbf{y}}_{i}\leftarrow\varphi(\mathbf{\tau}\mathbf{f}_{i}^{\intercal} \mathbf{t}))\quad\forall\;i\)\(\triangleright\) Initial predictions, \(\varphi\) the softmax function
3:\(\bm{\mu}_{k}\leftarrow\text{mean}\{\mathbf{f}_{i}\text{ s.t.}y=k,i\in\mathcal{S}\}^{ \mathbf{s}}\quad\forall\;k\)\(\triangleright\) Class centroids initialization
4:\(\text{diag}(\bm{\Sigma})\leftarrow\mathbf{1}\frac{1}{d}\)\(\triangleright\) Covariance matrix initialization, \(d\) is the emb. dim.
5:\(\mathbf{z}_{i}\leftarrow\hat{\mathbf{y}}_{i}\quad\forall\;i\)\(\triangleright\) Initial assignments
6:while(1),(2) and(3) not converged do\(\triangleright\) Block-wise updates loop
7:while(1) not converged do\(\triangleright\) z-update loop
8:\(z_{i,k}\leftarrow\frac{\hat{g}_{i,k}^{3}\exp(\log(p_{i,k})+\sum_{j\in p}w_{ ij}z_{j,k})}{\sum_{k^{\prime}}\hat{g}_{i,k^{\prime}}^{3}\exp(\log(p_{i,k^{\prime}})+ \sum_{j\in p}w_{ij}z_{j,k^{\prime}})}\quad\forall\;i\;\forall\;k\)\(\triangleright\)(1) z-step
9:endwhile
10:\(\bm{\mu}_{k}\leftarrow\frac{\frac{|\mathcal{S}|}{|\mathcal{S}|}\sum_{i\in \mathcal{S}}z_{i,k}\mathbf{f}_{i}+\frac{1}{|\mathcal{S}|}\sum_{i\in\mathcal{S} }z_{i,k}\mathbf{f}_{i}}{\frac{|\mathcal{S}|}{|\mathcal{S}|}\sum_{i\in\mathcal{ S}}z_{i,k}+\frac{1}{|\mathcal{S}|}\sum_{i\in\mathcal{S}}z_{i,k}}\quad\forall\;k\)\(\triangleright\)(2)\(\bm{\mu}\)-step
11:\(\text{diag}(\bm{\Sigma})\leftarrow\frac{\frac{|\mathcal{S}|}{|\mathcal{S}|}\sum_{i\in\mathcal{S}}\sum_{k}z_{i,k} (\mathbf{f}_{i}-\bm{\mu}_{k})^{2}+\frac{1}{|\mathcal{S}|}\sum_{i\in\mathcal{Q} }\sum_{k}z_{i,k}(\mathbf{f}_{i}-\bm{\mu}_{k})^{2}}{\gamma+1}\)\(\triangleright\)(3)\(\bm{\Sigma}\)-step
12:endwhile
13:return\(\text{argmax}_{k}(\mathbf{z})\)\(\triangleright\) Prediction with assignment variables ```

**Algorithm 1** TransCLIP

## Appendix B Further details on TransCLIP implementation

This section aims to provide an additional pseudo-algorithm to supplement Section 3 as well as more details on TransCLIP hyper-parameters presented in Section 4. Our code is available at https://github.com/MaxZanella/transduction-for-vlms and a pseudo-code in Algorithm 1 summarizes the main steps of the TransCLIP algorithm.

Hardware.All our experiments were conducted on a single A100-40 GB. In terms of memory, TransCLIP consumes 16.9 GB when inferring on ImageNet, and can therefore process large datasets on a smaller 24 GB GPU.

Hyper-parameters.In practice, TransCLIP performs 10 iterations of \(\mathbf{z}\), \(\boldsymbol{\mu}\), \(\boldsymbol{\Sigma}\) block-wise updates. For each \(\mathbf{z}\)-update, we perform 5 iterations, as we found it sufficient for convergence. In the zero-shot setting, we set \(\lambda=1\) and \(\gamma=0\) (as there are no support samples). In the few-shot setting, we set \(\lambda=0.5\) and search for the value of \(\gamma\) in \(\{0.002,0.01,0.02,0.2\}\). The number of validation shots is set at \(\text{min}(4,\#\text{shots})\), and we build a 1-nearest neighbor classifier with the query samples and their final class assignment to predict the class of each validation sample.

Prompt templates.We employ the prompt templates detailed in Table 23(a) for all our experiments in zero-shot setting unless otherwise explicitly specified. Only when specified, we utilize the custom template ensembling for ImageNet as in [70] (see Table 23(b)).

## Appendix C Additional results.

We provide detailed results for all the studied vision backbones of CLIP over the 11 datasets to support the transferability of TransCLIP across both convolutional networks and transformer-based models. We additionally report other methods that do not fit into the transductive setting.

### Zero-shot

In Table 9. We report performances of 5 CLIP encoders as well as the 8 billion parameter EVAC-CLIP [55]. We compare TransCLIP-ZS to unsupervised methods namely TPT [43], MTA [68], SwapPrompt [41], and UPL [25]. Note that TPT and MTA are two test-time augmentation methods working on a single image at a time, thus they differ from our transductive setting, still we report their performance for informational purposes.

Upl\({}^{*}\).As mentioned in Section 4, we slightly modify UPL to apply it to the test set in a transductive manner (transductive UPL is denoted UPL\({}^{*}\)). Indeed, UPL relies on the generation of \(N=16\) hard pseudo-labels per class from a training set, after what a cross-entropy loss function on soft tokens is minimized. Instead, UPL\({}^{*}\) generates the pseudo-labels directly from the test set. For fairness, we reevaluated the number of pseudo-labels to select and still found that 16 per class yields the best results on average, as seen in Table 23.

### TransCLIP-ZS on top of few-shot methods

In Tables 10, 11, 12, 13 and 14. We report the performance of TransCLIP-ZS on top of CoOp [73], Tip-Adapter-F [70], PLOT [8], TaskRes [66] and ProGrad [74] for five encoders. The results are consistent with the main findings of Section 4 and indicate their generalization for several encoder architectures.

### Cross-Dataset transferability

In Table 15. We report the performance of TransCLIP-ZS on top of CoOp [73], CoCoOp [72], ProGrad [74], PromptSRC [30] and MaPLE[29]. We additionally report PromptAlign [1], which is working on a single image at a time and thus differs from our transductive setting. Note that PromptSRC and MaPLE introduce learnable vision tokens, and are therefore not compatible with convolutional-based encoders. The results are similar to those of Section 4.

### Domain Generalization

In Tables 16 and 17. We extend the results from Table 3 to five encoders. These results support those of Section 4 and show that TransCLIP can improve both zero- and few-shot model generalization for various encoders.

### Transductive few-shot learning

In Tables 18, 19, 20, 21 and 22, we implemented transductive methods from the traditional few-shot literature that align the most with our work in terms of computational efficiency and wide applicability: TIM [5], LaplacianShot [76], BD-CSPN [37], TF [13], and PT-MAP [24]. Additionally, due to the lack of transductive methods in Vision-Language and to ensure more comprehensive comparisons, we introduce a hybrid method named CoOp+UPL. This method combines prompt learning with both labeled shots and selected pseudo-labels following the methodology of UPL [25]. More details on each method and their validation procedure are outlined below. Methods with tunable hyper-parameters are fine-tuned using the validation split provided with each dataset. In line with other work [48], validation is performed for each dataset and for every shot number, setting the number of validation shots at min\((4,\#\text{shots})\). Hyper-parameters are then optimized through a grid search to maximize accuracy on the validation set. Note that we only search for \(\gamma\) across 4 values for TransCLIP. More details on the grid search for each method is given below. Detailed results for the five architectures studied in this paper are available in Table 18, 19, 20, 21, 22. Now we describe the implementation details for each reported transductive few-shot methods.

Transductive Fine-Tuning.We follow the original implementation of Transductive Fine-Tuning [13]. The authors kept the hyper-parameters fixed for all datasets since the goal was to propose a simple baseline, with a temperature set to \(1\) and the number of training steps to \(25\). However, they pointed out possible improvements if the hyper-parameters were tuned for each dataset. Therefore, we search for the optimal temperature value by validation in \(\{0.25,0.5,1,2,4\}\) and the number of iterations in \(\{10,15,20,25,30,35,40\}\).

BD-Cspn.We follow the original implementation of BD-CSPN [37]. Regarding the hyper-parameters, this method generates \(Z\) pseudo-labels per class from the query set to augment the support set and to build the \(K\) prototype vectors. They also introduce a temperature scaling parameter \(\varepsilon\) for the computation of the prototype vectors. The authors set \(Z\) to \(8\) and the temperature scaling \(\varepsilon\) to \(10\). We search for the value of \(Z\) in \(\{0,1,2,3,4,5,6,7,8,9,10\}\) and \(\varepsilon\) in \(\{2.5,5,10,20,40\}\) by validation.

LaplacianShot.We follow the original implementation of LaplacianShot [76]. They balanced the Laplacian regularization term with a factor \(\lambda\) and used \(k\)-nearest neighbors consistency. We follow the proposed ranges to find the hyper-parameter values by validation, with \(\lambda\) in \(\{0.1,0.3,0.5,0.7,0.8,1,1.2,1.5\}\) and the number of neighbors to consider \(k\) in \(\{3,5,10\}\).

Pt-Map.We follow the original implementation of PT-MAP [24]. In their work, the authors show a small performance sensitivity to the learning rate \(\alpha\) used to update the class prototypes through iterative adaptation. Following their discussion, we search \(\alpha\) in \(\{0.2,0.4\}\).

Tim.We follow the original implementation of TIM [5]. The authors proposed two solvers to find the solution to the minimization problem: gradient-descent TIM (TIM-GD) and alternating-direction method (TIM-ADM). We decide to focus on the second approach since there are fewer hyper-parameters to tune. They set the weighting factors of the cross-entropy, the marginal entropy, and the conditional entropy terms to \(0.1\), \(1\) and \(0.1\), respectively. They also introduced a temperature parameter \(\tau\) in their classifier and set it to \(15\). We search for the values of the cross-entropy and the conditional entropy factors in \(\{0.05,0.1,0.4,0.7,1\}\) and the temperature in \(\{5,10,15,30,60\}\) by validation.

CoOp+Upl.We implement a natural extension of CoOp to include the pseudo-labels proposed by UPL. As in UPL, \(N=16\) hard pseudo-labels per class are generated according to the prediction's confidence. Pseudo-labels from the query set \(\mathcal{P}\subseteq\mathcal{Q}\) and labeled shots from \(\mathcal{S}\) are unified into a single learning set \(\mathcal{S}\cup\mathcal{P}\). To separate the contribution of the pseudo-labels from the labeled shots,

[MISSING_PAGE_FAIL:19]

\begin{table}
\begin{tabular}{l l l c c c c c c c} \hline \hline  & \multicolumn{3}{c}{Source} & \multicolumn{3}{c}{Target} \\ \cline{3-10}  & \multicolumn{1}{c}{Method} & \multicolumn{1}{c}{ImageNet} & Adversarial & ImageNetV2 & Condition & Sketch & Average & Average & OOD \\ \hline \multirow{4}{*}{**\begin{tabular}{} \end{tabular}**} & w/ a photo of a & 58.0 & 22.0 & 51.2 & 56.1 & 33.3 & 44.1 & 40.7 \\  & + TransCLIP-ZS & 60.8\(\_\)2.8 & 21.5\(\_\)0.4 & 51.4\(\_\)0.1 & 52.8\(\_\)3.3 & 35.1\(\_\)1.8 & 44.3\(\_\)0.2 & 40.2\(\_\)0.5 \\  & w/ _custom templates_ & 60.3 & 23.8 & 53.4 & 60.5 & 35.5 & 46.7 & 43.3 \\  & + TransCLIP-ZS & 61.7\(\_\)1.4 & 23.4\(\_\)0.5 & 52.6\(\_\)0.8 & 56.4\(\_\)2.3 & 36.6\(\_\)1.1 & 46.1\(\_\)0.6 & 42.2\(\_\)1.1 \\ \hline \multirow{4}{*}{**\begin{tabular}{} \end{tabular}**} & w/ a photo of a & 60.6 & 28.2 & 54.3 & 64.2 & 38.0 & 49.1 & 46.2 \\  & + TransCLIP-ZS & 64.4\(\_\)2.4 & 29.2\(\_\)1.0 & 56.2\(\_\)1.9 & 65.1\(\_\)0.6 & 42.2\(\_\)4.3 & 51.5\(\_\)2.5 & 48.2\(\_\)0.0 \\  & +/ _custom templates_ & 62.5 & 29.8 & 56.1 & 67.7 & 40.6 & 51.4 & 48.6 \\  & +/ _custom templates_ & 65.6\(\_\)4.3 & 30.6\(\_\)0.8 & 57.0\(\_\)0.9 & 68.2\(\_\)0.5 & 44.0\(\_\)3.4 & 53.1\(\_\)1.7 & 49.9\(\_\)1.4 \\ \hline \multirow{4}{*}{**\begin{tabular}{} \end{tabular}**} & w/ a photo of a & 61.9 & 29.9 & 54.7 & 66.8 & 40.8 & 50.8 & 48.1 \\  & + TransCLIP-ZS & 64.9\(\_\)3.0 & 30.5\(\_\)0.6 & 55.7\(\_\)1.1 & 67.0\(\_\)0.2 & 43.6\(\_\)2.8 & 52.4\(\_\)1.5 & 49.2\(\_\)1.2 \\  & w/ _custom templates_ & 63.8 & 32.1 & 56.3 & 69.5 & 42.1 & 52.8 & 50.0 \\  & + TransCLIP-ZS & 66.2\(\_\)2.5 & 32.4\(\_\)0.3 & 56.6\(\_\)0.2 & 69.2\(\_\)0.3 & 44.3\(\_\)2.1 & 53.7\(\_\)1.0 & 50.6\(\_\)0.6 \\ \hline \multirow{4}{*}{**\begin{tabular}{} \end{tabular}**} & w/ a photo of a & 66.6 & 47.9 & 60.6 & 73.8 & 46.0 & 59.0 & 57.1 \\  & + TransCLIP-ZS & 70.3\(\_\)3.7 & 49.5\(\_\)1.7 & 62.3\(\_\)1.7 & 75.0\(\_\)1.3 & 49.7\(\_\)3.7 & 61.4\(\_\)2.4 & 59.1\(\_\)2.1 \\  & +/ _custom templates_ & 68.8 & 50.6 & 62.3 & 77.8 & 48.4 & 61.6 & 59.8 \\  & + TransCLIP-ZS & 71.5\(\_\)2.7 & 51.4\(\_\)1.4 & 63.4\(\_\)1.1 & 78.1\(\_\)0.2 & 51.1\(\_\)1.2 & 63.2\(\_\)1.6 & 61.2\(\_\)1.4 \\ \hline \multirow{4}{*}{**\begin{tabular}{} \end{tabular}**} & w/ a photo of a & 72.9 & 68.4 & 67.2 & 85.3 & 57.4 & 70.2 & 69.6 \\  & + TransCLIP-ZS & 77.2\(\_\)4.3 & 71.4\(\_\)3.0 & 69.1\(\_\)1.8 & 87.1\(\_\)1.8 & 60.0\(\_\)0.2 & 72.9\(\_\)2.7 & 71.9\(\_\)2.3 \\  & w/ _custom templates_ & 75.9 & 70.9 & 70.2 & 87.8 & 59.7 & 72.9 & 72.2 \\ \hline \multirow{4}{*}{**
\begin{tabular}{} \end{tabular}**} & w/ a photo of a & 73.6 & 62.7 & 73.6\(\_\)2.7 & 70.8\(\_\)0.5 & 89.0\(\_\)1.1 & 619.2\(\_\)2.2 & 74.8\(\_\)1.8 & 73.8\(\_\)1.6 \\  & w/ _custom templates_ & 78.6\(\_\)2.7 & 73.6\(\_\)2.7 & 70.8\(\_\)0.5 & 89.0\(\_\)1.1 & 619.2\(\_\)2.2 & 74.8\(\_\)1.8 & 73.8\(\_\)1.6 \\ \hline \hline \end{tabular}
\end{table}
Table 16: Domain Generalization evaluation for five encoders with manual prompting strategies.

\begin{table}
\begin{tabular}{l l c c c c c c c c c c c} \hline \hline  & \multicolumn{3}{c}{Source} & \multicolumn{3}{c}{Target} \\ \cline{3-10}  & \multicolumn{1}{c}{Method} & \multicolumn{1}{c}{ImageNet} & \multicolumn{1}{c}{Adversarial} & ImageNet & Condition & Sketch & Average & Average & OOD \\ \hline \multirow{4}{*}{**\begin{tabular}{} \end{tabular}**} & w/ a photo of a & 58.0 & 22.0 & 51.2 & 56.1 & 33.3 & 44.1 & 40.7 \\  & w/ a photo of a & 58.0 & 22.0 & 51.2 & 56.1 & 33.3 & 44.2 & 40.7 \\  & w/ a photo of a & 58.0 & 22.0 & 51.2 & 56.1 & 33.3 & 35.1\(\_\)1.8 & 44.2 & 40.2 & 40.2\(\_\)0.5 \\  & w/ a photo of a & 58.0 & 22.0 & 51.2 & 56.0 & 55.7\(\_\)1.1 & 67.0\(\_\)0.2 & 43.6\(\_\)2.8 & 55.4\(\_\)1.8 & 46.1\(\_\)0.6 & 42.2\(\_\)1.1 \\  & w/ a photo of a & 58.0 & 22.0 & 51.2 & 56.0 & 55.7\(\_\)1.1 & 67.0\(\_\)0.2 & 43.6\(\_\)2.8 & 52.4\(\_\)1.5 & 49.2\(\_\)1.2 \\  & w/ a photo of a & 58.0 & 22.0 & 52.0 & 56.0 & 69.2\(\_\)0.3 & 44.3\(\_\)2.1 & 53.7\(\_\)1.0 & 50.6\(\_\)0.2 & 43.6\(\_\)2.8 & 52.4\(\_\)1.5 & 49.2\(\_\)1.2 \\  & w/ a photo of a & 58.0 & 22.0 & 55.0 & 65.0 & 69.2\(\_\)0.3 & 44.3\(\_\)2.1 & 53.7\(\_\)1.0 & 40.7\(\_\)0.2 & 43.6\(\_\)2.8 & 52.4\(\_\)1.5 & 49.2\(\_\)1.2 \\  & w/ a photo of a & 58.0 & 22.0 & 55.0 & 65.0 & 69.2\(\_\)0.3 & 44.3\(\_\)2.1 & 53.7\(\_\)1.0 & 50.6\(\_\)0.2 & 44.3\(\_\)2.1 & 53.7\(\_\)1.0 & 50.6\(\_\)0.6 \\ \hline \multirow{4}{*}{**
\begin{tabular}{} \end{tabular}**} & w/ a photo of a & 66.6 & 47.9 & 60.6 & 73.8 & 46.0 & 59.0 & 57.1 \\  & w/ a photo of a & 49.5\(\_\)1.7 & 62.3\(\_\)1.7 & 75.0\(\_\)1.3 & 49.7\(\_

\begin{table}
\begin{tabular}{l l l l l l l l l l} \hline \hline \multirow{2}{*}{Shots} & \multicolumn{3}{c}{Method} & \multicolumn{3}{c}{Target} & \multicolumn{3}{c}{} \\ \cline{3-10}  & \multicolumn{1}{c}{Method} & \multicolumn{1}{c}{ImageNet} & \multicolumn{1}{c}{Adversarial} & \multicolumn{1}{c}{ImageNetV2} & \multicolumn{1}{c}{Rendition} & \multicolumn{1}{c}{Sketch} & \multicolumn{1}{c}{Average} & \multicolumn{1}{c}{Average OOD} \\ \hline \multirow{4}{*}{**1**} & CoOp & 63.0 & 22.0 & 55.0 & 55.0 & 32.8 & 45.5 & 41.2 \\  & *TransCLIP-ZS & **63.5\(\pm\)0.5** & **21.0\(\pm\)0.1** & **53.6\(\pm\)1.4** & **52.3\(\pm\)2.7** & **34.8\(\pm\)2.0** & **45.0\(\pm\)0.5** & **404.0\(\pm\)0.8** \\  & TaskRes & 64.6 & 22.9 & 56.4 & 60.8 & 35.9 & 48.1 & 44.0 \\  & *TransCLIP-ZS & 64.4\(\pm\)0.2 & 21.7\(\pm\)1.2 & 54.8\(\pm\)1.6 & **56.2\(\pm\)4.6** & **36.9\(\pm\)1.0** & **46.8\(\pm\)1.3** & **422.4\(\pm\)1.6** \\ \hline \hline \multirow{4}{*}{**2**} & CoOp & 66.5 & 29.5 & 58.3 & 63.6 & 39.0 & 51.4 & 47.6 \\  & *TransCLIP-ZS & 68.5\(\pm\)2.0 & 29.9\(\pm\)0.5 & **58.0\(\pm\)0.2** & **64.5\(\pm\)1.2** & **42.3\(\pm\)3.3** & **52.8\(\pm\)1.4** & **48.9\(\pm\)1.3** \\  & TaskRes & 67.6 & 30.0 & 59.6 & 68.4 & 41.8 & 53.5 & 49.9 \\  & *TransCLIP-ZS & 69.3\(\pm\)1.7 & 30.2\(\pm\)0.2 & 59.3\(\pm\)0.4 & 68.8\(\pm\)0.4 & 44.6\(\pm\)2.9** & 54.4\(\pm\)1.0** & 50.7\(\pm\)0.8 \\ \hline \multirow{4}{*}{**3**} & CoOp & 66.8 & 31.2 & 58.5 & 65.2 & 40.1 & 52.3 & 48.7 \\  & *TransCLIP-ZS & 68.4\(\pm\)1.6 & 31.3\(\pm\)0.1 & 58.3\(\pm\)0.2 & 65.5\(\pm\)0.3 & 42.7\(\pm\)2.6 & 53.2\(\pm\)0.9 & 49.4\(\pm\)0.7 \\ \cline{1-1}  & TaskRes & 68.2 & 31.3 & 59.3 & 69.5 & 42.5 & 54.2 & 50.6 \\  & *TransCLIP-ZS & 69.2\(\pm\)1.1 & 31.3\(\pm\)0.1 & 59.1\(\pm\)0.2 & 69.3\(\pm\)0.3 & 44.9\(\pm\)2.4 & 54.8\(\pm\)0.6 & **51.2\(\pm\)0.5** \\ \hline \multirow{4}{*}{**4**} & CoOp & 71.9 & 49.4 & 64.1 & 75.1 & 47.1 & 61.5 & 58.9 \\  & *TransCLIP-ZS & 73.3\(\pm\)1.4 & 50.8\(\pm\)1.3 & 64.5\(\pm\)0.4 & 75.7\(\pm\)0.7 & 50.3\(\pm\)3.2 & 62.9\(\pm\)1.4 & 60.4\(\pm\)1.4 \\  & TaskRes & 73.0 & 50.3 & 65.6 & 77.8 & 49.2 & 63.2 & 60.7 \\  & *TransCLIP-ZS & 74.1\(\pm\)1.0 & 51.9\(\pm\)1.6 & 65.4\(\pm\)0.2 & **78.4\(\pm\)0.6** & 51.6\(\pm\)2.4 & 64.3\(\pm\)1.1 & 61.8\(\pm\)1.1 \\ \hline \multirow{4}{*}{**4**} & CoOp & 78.2 & 69.4 & 70.8 & 85.4 & 57.5 & 72.3 & 70.8 \\  & *TransCLIP-ZS & 79.5\(\pm\)1.3 & **71.9\(\pm\)2.6** & 71.1\(\pm\)0.3 & 86.9\(\pm\)1.5 & 600.0\(\pm\)2.5 & 73.9\(\pm\)1.6 & 72.5\(\pm\)1.7 \\ \cline{1-1}  & TaskRes & 78.1 & 71.3 & 71.6 & 87.9 & 60.1 & 73.8 & 72.7 \\ \cline{1-1}  & *TransCLIP-ZS & **79.8\(\pm\)1.7** & **74.2\(\pm\)3.0** & **71.8\(\pm\)0.2** & 88.9\(\pm\)1.1** & 620.0\(\pm\)1.9 & 75.4\(\pm\)1.6 & 74.2\(\pm\)1.5 \\ \hline \hline \end{tabular}
\end{table}
Table 17: Domain Generalization evaluation for five encoders. Few-shot learning methods are trained on 16-shot ImageNet and evaluated on the 4 other variants.

\begin{table}
\begin{tabular}{l l l l l l l l l l l l l} \hline \hline \multirow{2}{*}{Shots} & \multicolumn{3}{c}{Method} & \multicolumn{3}{c}{} \\ \cline{3-10}  & \multicolumn{1}{c}{Method} & \multicolumn{1}{c}{ImageNet} & \multicolumn{1}{c}{Adversarial} & \multicolumn{1}{c}{ImageNetV2} & \multicolumn{1}{c}{Rendition} & \multicolumn{1}{c}{Speech} & \multicolumn{1}{c}{Average} & \multicolumn{1}{c}{Average OOD} \\ \hline \multirow{4}{*}{**1**} & FC & 20.6 & 31.2 & 13.1 & 39.0 & 21.8 & 28.3 & 27.2 & 53.6 & 66.1 & 27.7 & 38.1 & 33.3 \\  & BD-CSPN & 24.7 & 36.9 & 13.9 & 40.3 & 27.2 & 34.1 & 34.1 & 66.7 & 74.3 & 32.8 & 43.4 & 38.9 \\  & \multirow{4}{*}{**1**} & LPAClipasNet & 23.8 & 35.5 & 14.0 & 42.3 & 27.0 & 34.7 & 37.3 & 66.6 & 72.4 & 32.8 & 43.2 & 39.1 \\  & \multirow{4}{*}{**1**} & PT-MAP & 29.4 & 42.9 & 15.7 & 48.0 & 33.8 & 44.8 & 56.5 & 61.4 & 46.9 & 38.6 & 52.2 & 42.7 \\  & TM & 26.1 & 40.0 & 13.4 & 42.5 & 27.3 & 41.4 & 35.0 & 69.1 & 62.3 & 31.7 & 46.9 & 39.6 \\  & CoOp + UPL & 59.6 & 63.4 & 17.5 & 54.7 & 56.4 & 75.3 & 82.8 & 73.5 & 87.4 & 48.3 & 66.1 & 62.3 \\  & TransCLIP-ZS & 55.7 & 68.5 & 20.6 & 78.3 & 56.2 & 72.2 & 86.9 & 83.7 & 87.4 & 51.3 & 70.7 & 68.8 \\ \hline \multirow{4}{*}{**2**} & FC & 29.6 & 43.1 & 16.6 & 57.2 & 32.3 & 41.4 & 40.1 & 68.4 & 77.5 & 41.4 & 51.3 & 45.4 \\  & BD-CSPN & 33.2 & 48.1 & 17.8 & 58.6 & 36.2 & 47.4 & 50.0 & 77.0 & 80.7 & 43.2 & 54.1 & 49.7 \\  & LapLiaStab & 33.1 & 47.8 & 17.3 & 60.0 & 36.1 & 48.7 & 50.4 & 77.5 & 81.0 & 43.3 & 55.2 & 50.1 \\  & PT-MAP & 39.3 & 54.6 & 19.3 & 61.4 & 43.5 & 60.1 & 67.0 & 68.9 & 51.5 & 50.4 & 61.9

\begin{table}
\begin{tabular}{l l l l l l l l l l l l l l} \hline \hline \multirow{2}{*}{Shots} & \multirow{2}{*}{Method} & \multicolumn{1}{c}{\multirow{2}{*}{Method}} & \multicolumn{1}{c}{\multirow{

\begin{table}
\begin{tabular}{c c} \hline Dataset & Prompt template \\ \hline ImageNet & “a photo of a [].” \\ SUN397 & “a photo of a [].” \\ Aircraft & “a photo of a [], a type of aircraft.” \\ EuroSAT & “a centered satellite photo of [].” \\ Cars & “a photo of a [].” \\ Food101 & “a photo of [], a type of food.”, \\ Pets & “a photo of [], a type of pet.”, \\ Flower102 & “a photo of a [], a type of flower.”, \\ Caltech101 & “a photo of a [].” \\ DTD & “[] texture.” \\ UCF101 & “a photo of a person doing [].”. \\ \hline \end{tabular}
\end{table}
Table 23: UPL\({}^{*}\) top-1 accuracy on ImageNet for 8, 16 and 32 top-confidence pseudo-labels drawn from the test set.

\begin{table}
\begin{tabular}{c c c c} \hline Architecture & \(N=8\) & \(N=16\) & \(N=32\) \\ \hline ResNet-50 & 60.60 & **61.60** & 59.66 \\ \hline ViT-B/16 & 68.92 & **69.62** & 68.87 \\ \hline \end{tabular}
\end{table}
Table 23: UPL\({}^{*}\) top-1 accuracy on ImageNet for 8, 16 and 32 top-confidence pseudo-labels drawn from the test set.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: Claim i) from the abstract is discussed and supported by results in Tables 1, 2 and 3, and claim (ii) is discussed and supported by results in 4. The contributions announced in the introduction: (i) is presented in Section 3, (ii) is supported by Tables 1, 2 and 3, and (iii) is supported by Table 4. More results are also available in the Appendix for five encoders. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: Limitations are presented in Appendix D. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs**Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes] Justification: The convergence of our algorithm is proved and assumptions are enumerated in Appendix A. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: The hyper-parameter values are stated in Section 4 and in Appendix B. A complete pseudo-code is provided in Appendix B with further implementation details. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.

5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: The code is provided at the following link: https://github.com/MaxZanella/transduction-for-vlms. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyper-parameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: For the datasets used in our experiments, we follow the settings of previous works, as stated in Section 4. The implementation of transductive methods is detailed in Appendix C.5. If not specified, the exact hyper-parameters from the initial implementations are used for other cited methods. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: Every numerical accuracy is an average over three random seeds. Our experiments cover 15 datasets and 6 encoder architectures. Guidelines: * The answer NA means that the paper does not include experiments.

* The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.
* The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).
* The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)
* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: The hardware used for the experiments is presented in Appendix B. and runtime is discussed in Section 4 (Table 5). Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: Our work aligns with the NeurIPS Code of Ethics. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: The paper is not tied to specific application.

Guidelines:

* The answer NA means that there is no societal impact of the work performed.
* If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.
* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).

11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: There is no such risk. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: All models and methods are credited. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset.

* For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.
* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.

13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: No new asset is released. Guidelines: * The answer NA means that the paper does not release new assets. * Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc. * The paper should discuss whether and how consent was obtained from people whose asset is used. * At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.

14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: No crowdsourcing nor research with human subject was involved. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper. * According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.

15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: No crowdsourcing nor research with human subject was involved. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.

* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.