# Faster Differentially Private Convex Optimization

via Second-Order Methods

 Arun Ganesh

Google Research

Mahdi Haghifam

University of Toronto,

Vector Institute

&Thomas Steinke

Google DeepMind

Abhradeep Thakurta

Google DeepMind

###### Abstract

Differentially private (stochastic) gradient descent is the workhorse of DP private machine learning in both the convex and non-convex settings. Without privacy constraints, second-order methods, like Newton's method, converge faster than first-order methods like gradient descent. In this work, we investigate the prospect of using the second-order information from the loss function to accelerate DP convex optimization. We first develop a private variant of the regularized cubic Newton method of Nesterov and Polyak [2], and show that for the class of strongly convex loss functions, our algorithm has quadratic convergence and achieves the optimal excess loss. We then design a practical second-order DP algorithm for the unconstrained logistic regression problem. We theoretically and empirically study the performance of our algorithm. Empirical results show our algorithm consistently achieves the best excess loss compared to other baselines and is \(10\)-\(40\times\) faster than DP-GD/DP-SGD for challenging datasets.

## 1 Introduction

Many machine learning tasks reduce to a convex optimization problem. More precisely, given a dataset \(S_{n}=(z_{1},\ldots,z_{n})\in\mathcal{Z}^{n}\), a closed, convex set \(\mathcal{W}\subseteq\mathbb{R}^{d}\), and a loss function \(f:\mathcal{W}\times\mathcal{Z}\rightarrow\mathbb{R}\) such that, for every \(z\in\mathcal{Z}\), \(f(w,z)\) is a convex function in \(w\), our goal is to compute an approximation to \(\arg\min_{w\in\mathcal{W}}\,\,\left(\ell(w,S_{n})\triangleq\frac{1}{n}\sum_{i \in[n]}f(w,z_{i})\right).\) In this paper, we are interested in the problem of designing optimization algorithms in the scenario that the dataset \(S_{n}\) contains private information. Differential privacy (DP) [1] is a formal standard for privacy-preserving data analysis that provides a framework for ensuring that the output of an analysis on the data does not leak this private information. This problem is known as _private convex optimization_: Design an algorithm \(\mathcal{A}:\mathcal{Z}^{n}\rightarrow\mathcal{W}\) that is both DP and ensures low _excess loss_\(\triangleq\ell(\mathcal{A}(S_{n}),S_{n})-\min_{w\in\mathcal{W}}\ell(w,S_{n}).\)

The predominant algorithm for private convex optimization is DP (stochastic) gradient descent (DP-GD/DP-SGD). This is a _first-order_ iterative method. I.e., we start with an initial value \(w_{0}\) and iteratively update it using the gradient of the loss \(\nabla_{w_{t}}\ell(w_{t},S_{n})\) following the update rule \(w_{t+1}=w_{t}-\eta\cdot(\nabla_{w_{t}}\ell(w_{t},S_{n})+\xi_{t}),\) where \(\eta>0\) is a constant and \(\xi_{t}\) is Gaussian noise to ensure privacy. The number of iterations \(T\) also determines the amount of noise at each iteration, i.e., the scale of \(\xi_{t}\) is proportional to \(\sqrt{T}\) due to the composition of DP. Note that we assume \(\|\nabla_{w_{t}}\ell(w_{t},S_{n})\|\leq 1\).

One of the major drawbacks of DP-(S)GD is _slow convergence_. The choice of \((\eta,T)\) exhibits a tradeoff in terms of the excess loss: if \(\eta\cdot T\) is small, the algorithm cannot reach the optimal solution; on the other hand, the magnitude of noise at each iteration is \(\eta\cdot\sqrt{T}\), which cannot be too large. Therefore, to maximize \(\eta\cdot T\) and minimize \(\eta\cdot\sqrt{T}\), implementations of DP-(S)GD err on the side of

[MISSING_PAGE_FAIL:2]

contained in the larger eigenvalues/vectors of the Hessian. We prove the local convergence of the update rule (1) in Section 5.3 and perform a thorough empirical evaluation Section 6. We demonstrate that our algorithm outperforms existing baselines on a variety of benchmarks.

**Ensuring Global Convergence.** One limitation of the update rule in Equation (1) is it does not converge globally (even without noise added for DP). That is, if the initial point \(w_{0}\) is too far from the optimal solution, then the iterates may diverge. To address this problem, we propose a variant of Newton's update rule where we replace the Hessian with a different form of second-order information which gives a _Quadratic Upperbound_ (QU) on the logistic loss. This is _guaranteed to converge globally_, like the cubic Newton approach. And we show numerically that this algorithm converges almost as fast as the regular Newton's method in the private setting. Figure 1 shows the convergence speed of our algorithms and DP-GD in terms of real wall time for the task of logistic regression on the Covertype dataset for \((\varepsilon,\delta)=(1,(\text{num. samples})^{-2})\)-DP. Despite DP-GD having a lower per-iteration cost, our algorithm is \(30\times\) faster than DP-GD and achieves better excess loss.

**Stochastic Minibatch Variant.** We also show that our algorithms naturally extend to the minibatch setting where gradient and second-order information are computed on a subset of samples. We numerically compare it with DP-SGD and show that it has faster convergence.

## 2 Related Work

DP optimization is a well-studied topic [e.g., SCS13; MRTZ17; ACGM+16; STU17; WLKC+17; INST+19; STT20; SSTT21; GTU22; GLL22; BFTG19; BST14]. Most similar to our work, Avella-Medina, Bradshaw, and Loh [1] consider second-order methods for DP convex optimization. We provide a detailed comparison between our results and theirs in Remark 4.5 and Section 6 showing that our algorithms relax restrictive assumptions and provide better excess error for logistic regression.

There are numerous non-private second-order optimization methods in the literature. The choice of method depends primarily on the values of \(n\) and \(d\). When \(n\) is large, several works consider various sampling techniques for constructing second-order information, see [15; 16; 17]. When \(d\) is large, various methods are proposed in the literature for efficient approximation of the Hessian matrix, see [1; 1; 18; 19; 20]. There is also a family of algorithms based on the estimation of the curvature from the change in gradients. These algorithms are generally known as quasi-Newton methods stemming from the seminal BFGS algorithm [14].

## 3 Preliminaries

Let \(d\in\mathbb{N}\). For a vector \(x\in\mathbb{R}^{d}\), \(\left\|x\right\|\) denotes the \(\ell_{2}\) norm of \(x\). Let \(n,m\in\mathbb{N}\). For a matrix \(A\in\mathbb{R}^{n\times m}\), \(\left\|A\right\|=\sup_{x\in\mathbb{R}^{m}:\left\|x\right\|\leq 1}\left\|Ax\right\|\) denotes the operator norm, and \(\left\|A\right\|_{F}\triangleq\sqrt{\text{trace}(A^{T}\cdot A)}\) denotes the Frobenius norm of \(A\) where trace denotes the trace operator. \(I_{d}\in\mathbb{R}^{d\times d}\) denotes the identity matrix. \(\left\langle\cdot,\cdot\right\rangle\) denotes the standard inner product in \(\mathbb{R}^{d}\). For a convex and closed subset \(\mathcal{W}\subseteq\mathbb{R}^{d}\), let \(\Pi_{\mathcal{W}}:\mathbb{R}^{d}\to\mathcal{W}\) be the Euclidean projection operator, given by \(\Pi_{\mathcal{W}}(x)=\arg\min_{y\in\mathcal{W}}\left\|y-x\right\|_{2}\). For a (measurable) space \(\mathcal{R}\), \(\mathcal{M}_{1}(\mathcal{R})\) denotes the set of all probability measures on \(\mathcal{R}\). Note that the statements in the paper about random variables hold almost surely. We will skip such declarations to aid readability. Let \(\mathcal{Z}\) be the data and let \(\mathcal{W}\subseteq\mathbb{R}^{d}\) be the parameter space. Let \(f:\mathcal{W}\times\mathcal{Z}\to\mathbb{R}\) be a loss function. Throughout the paper, we assume \(f\) is doubly continuous, a convex function in \(w\), and \(\mathcal{W}\) is a closed and convex set. We say (1) \(f\) is \(\mathsf{L}_{0}\)_-Lipschitz_ iff there exists \(\mathsf{L}_{0}\in\mathbb{R}\) such that \(\forall z\in\mathcal{Z}\), \(\forall w,v\in\mathcal{W}:\left\|f(w,z)-f(v,z)\right\|\leq\mathsf{L}_{0}\left\| w-v\right\|\), (2) \(f\) is \(\mathsf{L}_{1}\)_-smooth_ iff there exists \(\mathsf{L}_{1}\in\mathbb{R}\) such that \(\forall z\in\mathcal{Z}\), \(\forall w,v\in\mathcal{W}:\left\|\nabla f(w,z)-\nabla f(v,z)\right\|\leq \mathsf{L}_{1}\left\|w-v\right\|\), (3) \(f\) has a \(\mathsf{L}_{2}\)_-Lipschitz Hessian_ iff there exists \(\mathsf{L}_{2}\in\mathbb{R}\) such that \(\forall z\in\mathcal{Z}\), \(\forall w,v\in\mathcal{W}:\left\|\nabla^{2}f(w,z)-\nabla^{2}f(v,z)\right\| \leq\mathsf{L}_{2}\left\|w-v\right\|\), (4) \(f\) is \(\mu\)_-strongly convex_ iff for all \(w,v\in\mathcal{W}\) and \(z\in\mathcal{Z}\) we have \(f(v,z)\geq f(w,z)+\left\langle\nabla f(w,z),v-w\right\rangle+\frac{\mu}{2} \left\|v-w\right\|^{2}\).

### Zero-Concentrated DP

For our privacy analysis, we use concentrated differential privacy [15; 17], as it provides a simpler composition theorem - the privacy parameter \(\rho\) adds up when we compose.

**Definition 3.1** ([16, Def. 1.1]).: A randomized mechanism \(\mathcal{A}:\mathcal{Z}^{n}\to\mathcal{M}_{1}(\mathcal{R})\) is \(\rho\)-zCDP, iff, for every neighbouring dataset (i.e., addition or removal) \(S_{n}\in\mathcal{Z}^{n}\) and \(S^{\prime}_{n}\in\mathcal{Z}^{n}\), and for every \(\alpha\in(1,\infty)\), it holds \(\mathrm{D}_{\alpha}(\mathcal{A}(S_{n})\|\mathcal{A}(S^{\prime}_{n}))\leq\rho\alpha\), where \(\mathrm{D}_{\alpha}(\mathcal{A}_{n}(S_{n})\|\mathcal{A}_{n}(S^{\prime}_{n}))\) is the \(\alpha\)-Renyi divergence between \(\mathcal{A}_{n}(S_{n})\) and \(\mathcal{A}_{n}(S^{\prime}_{n})\).

We should think of \(\rho\approx\varepsilon^{2}\): to attain \((\varepsilon,\delta)\)-DP, it suffices to set \(\rho=\frac{\varepsilon^{2}}{4\log(1/\delta)+4\varepsilon}\)[16, Lem. 3.5].

**Lemma 3.2** ([16, Prop. 1.3]).: _Assume we have a randomized mechanism \(\mathcal{A}:\mathcal{Z}\to\mathcal{M}_{1}(\mathcal{R})\) that satisfies \(\rho\)-zCDP, then for every \(\delta>0\), \(\mathcal{A}\) is \((\rho+2\sqrt{\rho\log(1/\delta)},\delta)\)-DP._

## 4 Optimal Algorithm for the Class of Strongly Convex Functions

In this section, we present a DP variant of the cubic-regularized Newton's method of Nesterov and Polyak [20]. To motivate the idea behind our algorithm, we revisit DP gradient descent (DP-GD) for the class of \(\mathrm{L}_{0}\)-Lipschitz and \(\mathrm{L}_{1}\)-smooth convex loss functions.

Let \(\{w_{t}^{\mathrm{GD}}\}_{t\in[T]}\) be the iterates of DP-GD. The smoothness of \(\ell\) lets us construct a global quadratic upper bound on the function [14, Thm. 2.1.5] as follows \(\forall w\in\mathcal{W}\) and \(S_{n}\in\mathcal{Z}^{n}\) :

\[\ell(w,S_{n})\leq q_{t}(w)\triangleq\ell(w_{t}^{\mathrm{GD}},S_{n})+\left\langle \nabla\ell(w_{t}^{\mathrm{GD}},S_{n}),w-w_{t}^{\mathrm{GD}}\right\rangle+\frac {\mathrm{L}_{1}}{2}\left\|w-w_{t}^{\mathrm{GD}}\right\|^{2}.\] (2)

Then, DP-GD can be seen as a two-step process:

(Step I) \[v_{t+1}\!=\!\arg\min_{v}q_{t}(v)\!=\!w_{t}^{\mathrm{GD}}\!-\! \mathrm{L}_{1}^{-1}\nabla\ell(w_{t}^{\mathrm{GD}},S_{n}),\quad\text{(Step II)}\ \ w_{t+1}^{\mathrm{GD}}\!=\!\Pi_{\mathcal{W}}(v_{t+1}+\mathrm{L}_{1}^{-1} \xi_{t}),\]

where \(\xi_{t}=\mathcal{N}(0,\sigma^{2}I_{d})\) with \(\sigma^{2}=\frac{\mathrm{L}_{0}^{2}}{2\rho\rho^{2}}\) so that \(w_{t+1}^{\mathrm{GD}}\) satisfies \(\rho\)-zCDP [16, Lem. 2.5]. That is, in each iteration of DP-GD, _we find a minimum of the quadratic upper bound \(q_{t}(w)\)_ and then project back to \(\mathcal{W}\). (In the unconstrained setting where \(\mathcal{W}=\mathbb{R}^{d}\) we do not need the second projection step.)

Consider the class of \(\mathrm{L}_{2}\)-Lipschitz Hessian convex loss functions. Nesterov and Polyak [20, Lem. 1] show that we can construct a _global cubic upper bound_ exploiting the second-order information (i.e., Hessian) as follows: for all \(w\) and \(w_{t}\), \(\ell(w,S_{n})\!\leq\!\phi_{t}(w)\) where

\[\phi_{t}(w)\!\triangleq\!\ell(w_{t},\!S_{n})\!+\!\langle\nabla\ell(w_{t},S_{n}),w\!-\!w_{t}\rangle+\!\frac{1}{2}\!\left\langle\nabla^{2}\!\ell(w_{t},\!S_{n}) (w\!-\!w_{t}),\!w\!-\!w_{t}\right\rangle+\!\frac{\mathrm{L}_{2}}{6}\left\|w\!- \!w_{t}\right\|^{3}.\] (3)

Their non-private algorithm is based on the _exact_ minimization of \(\phi_{t}(w)\), i.e., the next iterate is \(w_{t+1}=\arg\min\phi_{t}(w)\). Note that \(\arg\min\phi_{t}(w)\) does not admit a closed form solution, as opposed to the quadratic upper bound (2). Similar to the intuition for DP-GD on smooth loss functions (2), our algorithms in this section are based on _privately_ minimizing \(\phi_{t}(w)\) at each iteration. Our algorithm is shown in Algorithm 1. In each iteration the algorithm makes an oracle call to obtain \((\ell(w_{t},S_{n}),\nabla\ell(w_{t},S_{n}),\nabla^{2}\ell(w_{t},S_{n}))\). Then, the algorithm calls an efficient \(\mathsf{DPSolver}\) for privately optimizing the cubic upper bound (3). The privacy analysis of Algorithm 1 is a direct application of the composition property of zCDP [16, Lemma 2.3]; the output of \(\mathsf{DPSolver}\) at each iteration satisfies \(\rho/T\)-zCDP where \(\rho\) is the total privacy budget and \(T\) is the total number of iterations.

_Remark 4.1_.: \(\mathsf{DPSolver}\) in Algorithm 1 does not affect the _oracle complexity_ of Algorithm 1, as it is applied to the proxy loss \(\phi_{t}(w)\), rather than the underlying loss \(\ell(w,S_{n})\). \(\triangleleft\)

```
1:Input: training set \(S_{n}\in\mathcal{Z}^{n}\), privacy budget \(\rho\)-zCDP, initialization \(w_{0}\in\mathcal{W}\), number of iterations \(T\).
2:for\(t=0,\ldots,T-1\)do
3: Query \(\ell(w_{t},S_{n}),\nabla\ell(w_{t},S_{n}),\nabla^{2}\ell(w_{t},S_{n})\)
4: Construct \(\phi_{t}(w)\) from Equation (3)
5:\(w_{t+1}=\mathsf{DPSolver}(\phi_{t}(w),\rho/T,w_{t})\)
6:Output \(w_{T}\). ```

**Algorithm 1** Meta Algorithm

```
1:Input: function \(\phi:\mathcal{W}\to\mathbb{R}:\phi(\theta)=\ell\!+\!\langle g,\theta-\theta_{0} \rangle+\frac{1}{2}\left\langle H(\theta-\theta_{0}),(\theta-\theta_{0})\right\rangle +\frac{\mathrm{L}_{0}}{6}\left\|\theta-\theta_{0}\right\|^{3}\), privacy budget \(\tilde{\rho}\)-zCDP, initialization \(\theta_{0}\).
2:\(N=\frac{2\delta(\mathrm{L}_{0}+\mathrm{L}_{1}D+\mathrm{L}_{2}D^{2})^{2}}{(\mathrm{ L}_{0}+\mathrm{L}_{1}D)^{2}d},\sigma^{2}=\frac{N(\mathrm{L}_{0}+\mathrm{L}_{1}D)^{2}}{2\rho}\)
3:for\(i=0,\ldots,N-1\)do
4:\(\eta_{i}=\frac{2}{\mu(i+2)}\)
5:\(\mathrm{grad}_{i}=g+\mathrm{H}(\theta_{i}-\theta_{0})+\frac{\mathrm{L}_{2}}{2} \left\|\theta_{i}-\theta_{0}\right\|(\theta_{i}-\theta_{0})\).
6:\(\theta_{i+1}=\Pi_{\mathcal{W}}(\theta_{i}-\eta_{i}(\mathrm{grad}_{i}+\mathcal{N}(0, \sigma^{2}I_{d})))\)
7:Return \(\sum_{i=0}^{N-1}\frac{2i}{N(N+1)}\theta_{i}\) ```

**Algorithm 2** DPSolver

**Theorem 4.2**.: _Let \(f\) be a \(\mathbb{L}_{0}\)-Lipschitz, \(\mathbb{L}_{1}\)-smooth, \(\mathbb{L}_{2}\)-Lipschitz Hessian, and \(\mu\)-strongly convex function. Also, assume that \(\mathcal{W}\subseteq\mathbb{R}^{d}\) has finite diameter \(D\). Let \(w^{\star}=\arg\min_{w\in\mathcal{W}}\ell(w,S_{n})\). Then, for every \(\rho>0\), \(\beta\in(0,1)\), and \(S_{n}\in\mathcal{Z}^{n}\) for sufficiently large \(n\), by setting the number of iterations in Algorithm 1 to_

\[T=\Theta\Big{(}\frac{\sqrt{\mathbb{L}_{2}}}{\mu^{3/4}}(\ell(w_{0},S_{n})-\ell( w^{\star},S_{n}))^{\frac{1}{4}}+\log\log\big{(}\frac{n\sqrt{\rho}}{\sqrt{\log(1/ \beta)}d}\big{)}\Big{)},\]

_and using Algorithm 2 as \(\mathsf{DPSolver}\), we have the following: The output of Algorithm 1, i.e., \(w_{T}\), satisfies \(\rho\)-zCDP and with probability at least \(1-\beta\)_

\[\ell(w_{T},S_{n})-\ell(w^{\star},S_{n})\leq\tilde{O}\Big{(}\frac{d(\mathbb{L} _{0}+\mathbb{L}_{1}D)^{2}\log(1/\beta)}{\mu\rho n^{2}}\cdot(\frac{\mathbb{L}_{ 2}^{2}\mathbb{L}_{0}D}{\mu^{3}})^{\frac{1}{4}}\Big{)}\]

_Remark 4.3_.: The lower bound on the excess error of any DP algorithm for the class of strongly convex functions [1, Thm. 5.5] implies that the achievable excess error in Theorem 4.2 is _optimal_ in terms of the dependence on \(d\), \(\rho\), and \(n\). Also, the oracle complexity of our algorithm is an exponential improvement over the oracle complexity of first-order methods [13]. \(\triangleleft\)

_Remark 4.4_.: The proof of Theorem 4.2 suggests that Algorithm 1 has two phases. First, while \(w_{t}\) is far from \(w^{\star}\), the convergence rate is \(1/T^{4}\). Second, when \(w_{t}\) is close to \(w^{\star}\), the algorithm exhibits the convergence rate of \(\exp(\exp(-T))\). Notice that Algorithm 1 is agnostic to this transition in the sense that we do not have an explicit switching step in Algorithm 1 and Algorithm 2. It is also interesting to note that the transition happens when \(\|w_{t}-w^{\star}\|\leq 3\mu/4\mathbb{L}_{2}\). \(\triangleleft\)

_Remark 4.5_ (Comparison with [1]).: In [1, SS4], the authors propose a DP variant of Newton's method. Their main idea is to add independent noise _directly_ to the Hessian matrix and the gradient vector using the Gaussian mechanism. They also require that _the Hessian be a rank-1 matrix_. The issue with adding noise directly to a full-rank Hessian matrix is that the noise scales with the dimension \(d\), which can lead to a suboptimal excess loss. In contrast, our algorithm has a global convergence without placing restrictions on the rank of the Hessian matrix or the initialization. \(\triangleleft\)

_Remark 4.6_.: We showed in Theorem 4.2 that our algorithm has an exponentially smaller _oracle complexity_ than the first-order methods in terms of the dependence to \(n\). For the class of convex, smooth, Lipschitz, and strongly convex, [11] proposes a first-order algorithm with an oracle complexity of \(T_{1}=\Theta\left(\sqrt{\mathbb{L}_{1}}/\sqrt{\mu}+\log(n)\right)\). It is important to note that the _constant_ term in \(T_{1}\) differs from our result, making a direct comparison challenging. It is an interesting question to develop a second-order DP algorithm with a smaller oracle complexity than both the algorithms proposed in [11] and ours in Algorithm 1. \(\triangleleft\)

_Remark 4.7_.: The cubic Newton method has a non-private convergence rate of \(T^{-2}\) for the class of convex (but not strongly convex) functions [12, Thm. 4]. We leave it as an open question whether there exists a \(\mathsf{DPSolver}\) such that Algorithm 1 achieves an optimal excess error and oracle complexity for convex functions. However, this can be achieved by a DP variant of the first-order accelerated Nesterov's method [14, 15, 16]; see Appendix A.2. \(\triangleleft\)

## 5 DP Logistic Regression using Second-Order Information

The main limitation of our cubic Newton's method (Algorithm 1) is that each iteration requires solving a nontrivial subproblem. So, despite low oracle complexity, it is computationally expensive. Moreover, many loss functions, such as logistic loss, are not strongly convex in the unconstrained setting. In this section, we aim to develop a fast second-order algorithm for unconstrained logistic regression avoiding this issue. In many real-world classification tasks, the logistic loss is the loss of choice. The logistic loss is a convex surrogate of the 0-1 loss, and satisfies many regularity conditions that give rise to various practical optimization algorithms [1, 1, 13]. Also, note that our results in this section can readily be extended to the class of smooth and convex GLMs.

First, we recall the logistic loss function. Let \(d\in\mathbb{N}\) and \(\mathcal{Z}=\mathcal{B}^{d}(1)\times\{-1,1\}\) be the dimension and data space, where \(\mathcal{B}^{d}(1)=\{x\in\mathbb{R}^{d}:\|x\|\leq 1\}\) is the unit ball in \(\mathbb{R}^{d}\). Let \(f_{\mathrm{LL}}:\mathbb{R}^{d}\times\mathcal{Z}\to\mathbb{R}\) denote the logistic loss function defined as

\[f_{\mathrm{LL}}(w,(x,y))=\log(1+\exp(-y\cdot\langle w,x\rangle)).\] (4)

The gradient and Hessian of \(f_{\mathrm{LL}}\) are given by

\[\nabla_{w}f_{\mathrm{LL}}(w,(x,y))\!=\!\frac{-xy}{1\!+\!\exp(y\, \langle w,x\rangle)},\ \ \nabla_{w}^{2}f_{\mathrm{LL}}(w,\!(x,\!y))\!=\!\frac{xx^{\top}}{(\exp(-\frac{ \langle w,x\rangle}{2})\!+\!\exp(\frac{\langle w,x\rangle}{2}))^{2}}.\] (5)Newton's method [14, SS9.5] is based on successively minimizing a _local_ second-order Taylor approximation on the function. Newton's method does not guarantee a global convergence [13]; the reason is that the second-order Taylor approximation of the logistic loss can greatly underestimate the function. Next we show that it is possible to obtain a quadratic _global upper bound_ on the logistic loss function. We will use this to develop an algorithm that converges globally.

**Lemma 5.1**.: _For every \(v\in\mathbb{R}^{d}\), \(x\in\mathbb{R}^{d}\), \(w\in\mathbb{R}^{d}\), and \(y\in\{-1,+1\}\), we have_

\[f_{\mathrm{LL}}(w,(x,y))\leq f_{\mathrm{LL}}(v,(x,y))+\left\langle\nabla f_{ \mathrm{LL}}(v,(x,y)),w-v\right\rangle+\frac{1}{2}\left\langle H_{\text{qu}}(v,(x,y))(w-v),w-v\right\rangle,\]

_where \(H_{\text{qu}}(v,(x,y))\triangleq\frac{\tanh(\nicefrac{{(x,v)}}{{2}})}{2 \left\langle x,v\right\rangle}xx^{\top}\in\mathbb{R}^{d\times d}\)._

_Remark 5.2_.: Since \(f_{\mathrm{LL}}\) is \(\frac{1}{4}\)-smooth, we can construct a simpler global quadratic upper-bound as follows [12, Thm. 2.1.5]: \(f_{\mathrm{LL}}(w,(x,y))\leq f_{\mathrm{LL}}(v,(x,y))+\left\langle\nabla f_{ \mathrm{LL}}(v,(x,y)),w-v\right\rangle+\frac{1}{8}\left\|w-v\right\|^{2}.\) Lemma 5.1 is tighter than this, since \(H_{\text{qu}}(v,(x,y))\leq\frac{1}{4}I_{d}\); see Appendix B.2. \(\triangleleft\)

_Remark 5.3_.: The second-order Taylor approximation and our upper bound in Lemma 5.1 both provide a quadratic approximation of the logistic loss. In the remainder of the paper, we write \(H(v,(x,y))\) to refer to both \(\nabla^{2}f_{\mathrm{LL}}(v,(x,y))\) and \(H_{\text{qu}}(v,(x,y))\). We refer to \(H(v,(x,y))\) as the second-order information (SOI) and to \(H_{\text{qu}}\) as _quadratic upperbound_ SOI. Finally, notice both \(\nabla^{2}f_{\mathrm{LL}}(v,(x,y))\) and \(H_{\text{qu}}(v,(x,y))\) are PSD rank-1 matrices, with maximum eigenvalue \(\leq\frac{1}{4}\|x\|^{2}\leq\frac{1}{4}\). \(\triangleleft\)

### Algorithm Description

We are given a dataset \(S_{n}=((x_{1},y_{1}),\ldots,(x_{n},y_{n}))\in(\mathcal{B}^{d}(1)\times\{-1,+1\})^ {n}\) and we aim to minimize \(\ell_{\mathrm{LL}}(w,S_{n})\triangleq\frac{1}{n}\sum_{i\in[n]}f_{\mathrm{LL} }(w,(x_{i},y_{i}))\). Our algorithm iteratively minimizes a quadratic approximation of \(\ell_{\mathrm{LL}}(w,S_{n})\). Consider

\[q_{t}(w)\triangleq\ell_{\mathrm{LL}}(w_{t},S_{n})+\left\langle\nabla\ell_{ \mathrm{LL}}(w_{t},S_{n}),w-w_{t}\right\rangle+\frac{1}{2}\left\langle H(w_{t },S_{n})(w-w_{t}),(w-w_{t})\right\rangle,\] (6)

where \(H(w_{t},S_{n})\triangleq\frac{1}{n}\sum_{i\in[n]}H(w_{t},(x_{i},y_{i}))\). In the non-private setting the next iterate is set to \(w_{t+1}=\arg\min_{w}q_{t}(w)=w_{t}-H(w_{t},S_{n})^{-1}\nabla\ell_{\mathrm{LL }}(w_{t},S_{n})\). To develop a private variant of Newton's method, we need to characterize the sensitivity of this update rule. Our key observation is that _the directions corresponding to small eigenvalues of \(H(w_{t},S_{n})\) are more_ sensitive _than the directions corresponding to large eigenvalues_. To overcome this issue, we modify the eigenvalues of \(H(w_{t},S_{n})\) to ensure a minimum eigenvalue \(\geq\lambda_{0}\), where \(\lambda_{0}>0\) is a carefully chosen constant. We show how to _adaptively_ tune \(\lambda_{0}\) in Section 5.2. This procedure yields the desired stability with respect to neighbouring datasets. Formally, the modification operator is defined as follows:

**Definition 5.4**.: Let \(A\in\mathbb{R}^{d\times d}\) be a positive semi-definite (PSD) matrix and \(\lambda_{0}\geq 0\). Define

\[\Psi_{\lambda_{0}}(A,\text{clip})=\sum_{i=1}^{d}\max\{\lambda_{0},\lambda_{i} \}u_{i}u_{i}^{\top},\quad\Psi_{\lambda_{0}}(A,\text{add})=\sum_{i=1}^{d}( \lambda_{i}+\lambda_{0})u_{i}u_{i}^{\top}=A+\lambda_{0}I_{d}.\]

where \(A=\sum_{i=1}^{d}\lambda_{i}u_{i}u_{i}^{\top}\) is the eigendecomposition of \(A\) - i.e., \(0\leq\lambda_{1}\leq\cdots\leq\lambda_{d}\) are the eigenvalues and \(u_{1},\ldots,u_{d}\in\mathbb{R}^{d}\) are the eigenvectors, which satisfy \(\forall i\neq j\left\|u_{i}\right\|=1\wedge\left\langle u_{i},u_{j}\right\rangle=0\).

Algorithm 3 describes our algorithm. First, we state the privacy guarantee of Algorithm 3 whose proof can be found in Appendices B.3 and B.4.

**Theorem 5.5**.: _Assume in Algorithm 3 we choose \(\mathsf{add}\) for the SOI modification. Then, for every training set \(S_{n}\in(\mathbb{R}^{d}\times\{-1,+1\})^{n}\), \(w_{0}\in\mathcal{W}\), \(\lambda_{0}>0\), \(T\in\mathbb{N}\), \(\rho\in\mathbb{R}_{+}\), and \(\theta\in(0,1)\), by setting \(\sigma_{1}=\frac{\sqrt{T}}{n\sqrt{2\rho(1-\theta)}}\) and \(\sigma_{2}=\frac{\sqrt{T}}{(4n\lambda_{0}^{2}+\lambda_{0})\sqrt{2\rho\theta}}\), \(w_{T}\) satisfies \(\rho\)-zCDP._

**Theorem 5.6**.: _Assume in Algorithm 3, we choose \(\mathsf{clip}\) for the SOI modification. Then, for every training set \(S_{n}\in(\mathbb{R}^{d}\times\{-1,+1\})^{n}\), \(w_{0}\in\mathcal{W}\), \(\lambda_{0}>0\), \(T\in\mathbb{N}\), \(\rho\in\mathbb{R}_{+}\), and \(\theta\in(0,1)\) such that \(n>\frac{1}{4\lambda_{0}}\), by setting \(\sigma_{1}=\frac{\sqrt{T}}{n\sqrt{2\rho(1-\theta)}}\) and \(\sigma_{2}=\frac{\sqrt{T}}{(4n\lambda_{0}^{2}-\lambda_{0})\sqrt{2\rho\theta}}\), \(w_{T}\) satisfies \(\rho\)-zCDP._the logistic loss. Nevertheless, in Appendix B.6, we present a generalization of Algorithm 3 whose privacy guarantee holds for _every_ convex, doubly differentiable, Lipschitz, and smooth loss function _without any constraints on the rank of Hessian_. The main technical challenge for sensitivity analysis is proving the approximate Lipschitzness of \(\Psi\) in the operator norm (See Lemma B.7). This demonstrates that our algorithm is more general than objective perturbation [1, 10] and the private damped Newton's method [1] which both require a low-rank Hessian. \(\triangleleft\)

### Private and Adaptive Selection of Minimum Eigenvalue

One of the hyperparameters of Algorithm 3 is the minimum eigenvalue \(\lambda_{0}\). There exists a tradeoff for choosing \(\lambda_{0}\). We ideally want the modification to be as small as possible, so that the SOI is preserved. However, decreasing \(\lambda_{0}\) increases \(\sigma_{2}\) and we add more noise. To deal with this problem, we propose a heuristic rule for an adaptive, private, and time-varying selection of the minimum eigenvalue. We wish to find \(\lambda_{0,t}\) that minimizes expected loss at the next iteration, for which we have the quadratic approximation (6). More formally, we compute \(\lambda_{0,t}\) as \(\arg\min_{k}\mathbb{E}\left[q_{t}\left(w_{t}-\Psi_{\lambda}(H(w_{t},S_{n}), \text{SOI modification})\tilde{g}_{t}+\|\tilde{g}_{t}\|\,\sigma_{2}(\lambda)\cdot \xi)\right]\) where \(q_{t}\) is given in (6) and \(\xi\sim\mathcal{N}(0,I_{d})\). We show in Appendix B.5 that an approximate minimizer is \(\lambda_{0,t}\propto\left(\frac{\text{trace}\left(H_{t}(w_{t},S_{n})\right)}{ n^{2}\times\text{privacy budget for the direction}}\right)^{\frac{1}{3}}\). Note that \(\lambda_{0,t}\) depends on the data through \(\text{trace}(H(w_{t},S_{n}))\), which has sensitivity \(1/4n\), so it can be estimated privately. In Appendix B.5, we provide the algorithmic description of a variant of Algorithm 3 with an adaptive and private minimum eigenvalue. In particular, we divide the privacy budget at each iteration into three parts: (1) privatizing the gradient; (2) estimating the trace of SOI; and (3) privatizing the direction. We use this variant for our numerical experiments in Section 6.

### Convergence Results for Algorithm 3

In this section, we provide data-dependent convergence guarantees for Algorithm 3. We express these guarantees in terms of the conditional expectation \(\mathbb{E}_{t}\left[\cdot\right]=\mathbb{E}\left[\cdot|\{w_{i}\}_{i\in[t]}\right]\) and they can be easily extended to obtain high probability bounds. Before presenting the results, we introduce a notation. For a dataset \(S_{n}=((x_{1},y_{1}),\ldots,(x_{n},y_{n}))\in(\mathbb{R}^{d}\times\{-1,+1\})^{n}\), let \(V\in\mathbb{R}^{d\times d}\) denote the _orthogonal projection matrix_ on the linear subspace spanned by \(\{x_{1},\ldots,x_{n}\}\). For every vector \(u\in\mathbb{R}^{d}\), define \(\left\|u\right\|_{V}\triangleq\sqrt{u^{\top}Vu}\). This norm naturally arises since for every \(w\in\mathbb{R}^{d}\) we have \(\ell_{\mathrm{LL}}(w,S_{n})-\ell_{\mathrm{LL}}(w^{*},S_{n})\leq\frac{1}{8} \left\|w-w^{*}\right\|_{V}^{2}\) where \(w^{*}=\arg\min\ell_{\mathrm{LL}}(w,S_{n})\) (See Appendix B.7).

#### 5.3.1 Local Convergence Guarantee of \(\mathsf{Hess\text{-}clip}\) and \(\mathsf{Hess\text{-}add}\)

**Theorem 5.8**.: _Let \(S_{n}\) denote the dataset and \(\mathsf{rank}\) denote the dimension of the linear subspace spanned by \(\{x_{1},\ldots,x_{n}\}\). Let \(\lambda_{\text{min},t}\) be the smallest non-zero eigenvalue of \(\nabla^{2}\ell_{\mathrm{LL}}(w_{t},S_{n})\) and \(\rho\) be the privacy budget (in zCDP) per iteration. Then,_

\[\mathbb{E}_{t}\left[\left\|w_{t+1}-w^{\star}\right\|_{V}^{2}\right]\leq\nu_{1,t}^ {2}\left\|w_{t}-w^{\star}\right\|_{V}^{2}+2\nu_{1,t}\nu_{2,t}\left\|w_{t}-w^{ \star}\right\|_{V}^{3}+\nu_{2,t}^{2}\left\|w_{t}-w^{\star}\right\|_{V}^{4}+\Delta,\]

_where the coefficients are given by_

\[\nu_{1,t}=1-\frac{\tilde{\lambda}_{\text{min},t}}{\lambda_{0}}+\frac{\sqrt{ \text{rank}}}{(4n\lambda_{0}^{2}-\lambda_{0})\sqrt{2\rho\theta}},\quad\nu_{2,t }=\frac{0.05}{\tilde{\lambda}_{\text{min},t}},\quad\Delta=O\left(\frac{\text{ rank}}{\rho(1-\theta)n^{2}}\frac{1}{(\tilde{\lambda}_{\text{min},t})^{2}} \right).\] (7)

_Here, \(\tilde{\lambda}_{\text{min},t}=\begin{cases}\min\{\lambda_{\text{min},t}, \lambda_{0}\}&\text{for $\mathsf{Hess}$-clip},\\ \lambda_{\text{min},t}+\lambda_{0}&\text{for $\mathsf{Hess}$-add},\end{cases}\) depends on the modification procedure._

This type of convergence is known as _composite convergence_, as it is a combination of linear and quadratic rates, and has been observed in the convergence analysis of several quasi-Newton's methods [1, 1, 1, 2].

_Remark 5.9_.: \(\lambda_{\text{min},t}\) is the smallest _non-zero_ eigenvalue of \(\nabla^{2}\ell_{\text{LL}}(w_{t},S_{n})\). Therefore, for sufficiently large \(n\) we have \(0<\nu_{1,t}<1\). It shows Algorithm 3 with Hessian as SOI is, in-expectation, a descent algorithm locally given \(\left\|w_{t}-w^{\star}\right\|\) is sufficiently larger than \(\Delta\). Roughly speaking, Theorem 5.8 guarantees a linear convergence to a ball around the optimum whose radius is given by \(\Delta\). We also observe the linear rate in Figure 3. Moreover, the error due to the privacy, i.e., \(\Delta\) in Equation (7), is proportional to the rank of the feature vectors which is always smaller than \(d\). These interesting properties is due to the convergence analysis with respect to \(\left\|\cdot\right\|_{V}\). \(\triangleleft\)

_Remark 5.10_.: The coefficients of the convergence in Equation (7) depend on the iteration step which is an undesirable aspect of the results. In Lemma B.11, we prove that \(\left\|\lambda_{\text{min},t}-\lambda_{\text{min}}^{\star}\right\|\leq 0.1 \left\|w_{t}-w^{\star}\right\|_{V}\) where \(\lambda_{\text{min}}^{\star}\) is the smallest non-zero eigenvalue of \(\nabla^{2}\ell_{\text{LL}}(w^{\star},S_{n})\). Therefore, the coefficients can be well-approximated by their analogous values evaluated at the optimum. \(\triangleleft\)

3.2 Global Convergence Guarantee of \(\mathsf{QU}\)-\(\mathsf{clip}\) and \(\mathsf{QU}\)-\(\mathsf{add}\)

We also establish a global convergence guarantee for \(\mathsf{QU}\)-\(\mathsf{clip}\) and \(\mathsf{QU}\)-\(\mathsf{add}\). Due to the space the formal statement and proof are deferred to Appendix B.9. Roughly speaking, under the assumption of _local strong convexity at the optimum_[1], \(\mathsf{QU}\)-\(\mathsf{clip}\) and \(\mathsf{QU}\)-\(\mathsf{add}\) converge globally: this is intuitive since \(\mathsf{QU}\)-\(\mathsf{clip}\) and \(\mathsf{QU}\)-\(\mathsf{add}\) are based on minimizing a global upper bound on the function.

## 6 Numerical Results

In this section, we evaluate the performance of our algorithm (Algorithm 3 with the adaptive minimum eigenvalue selection from Section 5.2) for the problem of _binary classification_ using _logistic regression_. For brevity, many of the details behind our implementation and more experimental results are deferred to Appendix C.

### Setup

The setup of the experiments is as follows: **Baseline1- DP-(S)GD**: The update rule is \(w_{t+1}=w_{t}-\eta\nabla\ell(w_{t},S_{n})+\xi\) where \(\xi\) is a Gaussian noise [1, 1, 1]. Since the logistic loss is \(1\)-Lipschitz, we do not need gradient clipping. The Lipschitzness parameter controls the variance of the Gaussian random vector. To draw a fair comparison and show the advantage of using second-order information, we chose the stepsize to be equal to the inverse smoothness. **Baseline2-

Figure 2: Privacy-Utility tradeoff on different datasets.

**Approximate Objective Perturbation (AOP)**: AOP is built on objective perturbation [10, 11]. Objective perturbation consists of a two-stage process: (1) _perturbing_ the objective function by adding a random linear term and (2) outputting the minimum of the perturbed objective. Releasing such a minimum is sufficient for achieving DP guarantees [10, 11], but only if we can find the exact minimum of the perturbed objective. AOP extends objective perturbation to permit using an _approximate_ minimum of the perturbed objective [20, 11]. Notice AOP is not an iterative optimization algorithm. **Baseline3- Damped Newton Method [2]**: The algorithm in [2] is a variant of damped Newton's method with the assumption that the Hessian of loss function is rank-1, which holds for the logistic loss. Their algorithm is based on adding two i.i.d. noises to the Hessian and the gradient: \(w_{t+1}=w_{t}-\eta_{t}H_{\text{noisy},t}(w_{t},S_{n})^{-1}\tilde{g}_{t}\), where \(\eta_{t}\) is the stepsize, \(H_{\text{noisy},t}(w_{t},S_{n})=\nabla^{2}\ell_{\text{LL}}(w_{t},S_{n})+\Xi_{ t}\) and \(\tilde{g}_{t}=\nabla\ell_{\text{LL}}(w_{t},S_{n})+\xi_{t}\). Here \(\Xi_{t}\) and \(\xi_{t}\) are carefully chosen Gaussian noise. With \(\eta_{t}=1\), our experiments show that their algorithm is not converging. We use the strategy suggested in [2, Page 22] and set \(\eta_{t}=\log(1+\beta_{t})/\beta_{t}\) where \(\beta_{t}=\left\|\nabla^{2}\ell_{\text{LL}}(w_{t},S_{n})^{-1}\nabla\ell_{\text {LL}}(w_{t},S_{n})\right\|\). This stepsize selection makes the algorithm _non-private_, however, it serves as a good baseline. **Datasets:** We conducted experiments on six publicly available datasets: a1a, Adult, covertype, synthetic, fashion-MNIST, and protein (Appendix C includes fashion-MNIST and protein results). The synthetic dataset is generated as follows: Fix \(d\in\mathbb{N}\) and \(w^{\star}\in\mathbb{R}^{d}\). Then, (1) the feature vectors \(\{x_{i}\in\mathbb{R}^{d}\ :\ i\in[n]\}\) are independent and sampled uniformly at random from the unit sphere in \(\mathbb{R}^{d}\), (2) for the \(i\)-th datapoint the label is \(+1\) with probability \((1+\exp(-\left\langle x_{i},w^{\star}\right\rangle))^{-1}\) and \(-1\) otherwise. **Privacy Notion:** The privacy notion for our experiments is \((\epsilon,\delta=(\text{num. of samples})^{-2})\)-DP. Next, we present the results.

### Privacy-Utility-Run Time Tradeoff

We study the tradeoff for our algorithm and compare it with other baselines for a broad range of \(\varepsilon\in\{0.01,\ldots,10\}\). We _non-privately tune_ the total number of iterations of the iterative algorithms and report the best achievable excess error in Figure 2. As can be seen our algorithm almost always achieves the best excess loss for a broad range of \(\epsilon\). Also, Figure 2 shows that damped private Newton method of [2] achieves a low excess loss only for large \(\epsilon\). Figure 2 indicates that DP-GD and our algorithm are the best in terms of excess loss. In Table 1, we compare the run time of DP-GD and our algorithm, i.e., the computational time in seconds for achieving the excess loss in Figure 2. As can be seen, for many challenging datasets, our algorithm is \(10\)-\(40\times\) faster than DP-GD. Our experiments are run on CPU. We also remark that each step of Algorithm 3, i.e., computing gradient and SOI, is heavily parallelizable implying that the run time of Algorithm 3 can be made much smaller by an efficient implementation. Also, the reported numbers in Figure 2 and Table 1 correspond to Hess-clip.

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline  & \multicolumn{5}{c}{\(\dfrac{T_{\text{DP-GD}}^{\star}}{T_{\text{ours}}^{\star}}\)} & \multicolumn{5}{c}{\(T_{\text{ours}}^{\star}(\text{sec})\)} \\ \cline{2-7}  & \(\varepsilon=0.01\) & \(\varepsilon=0.1\) & \(\varepsilon=1\) & \(\varepsilon=10\) & \(\min(T_{\text{ours}}^{\star})\) (sec.) & \(\max(T_{\text{ours}}^{\star})\) (sec.) \\ \hline a1a & \(4.87\times\) & \(2.95\times\) & \(5.09\times\) & \(30.59\times\) & \(2.45\) & \(4.2\) \\ synthetic & \(2.90\times\) & \(2.90\times\) & \(5.19\times\) & \(11.61\times\) & \(0.18\) & \(0.21\) \\ adult & \(12.08\times\) & \(11.84\times\) & \(22.17\times\) & \(38.16\times\) & \(6.81\) & \(8.07\) \\ covertype & \(24.19\times\) & \(19.85\times\) & \(35.70\times\) & \(36.20\times\) & \(2.93\) & \(3.58\) \\ \hline \hline \end{tabular}
\end{table}
Table 1: Comparison between the run time of our algorithm and DP-GD in terms of the ratio \(T_{\text{DP-GD}}^{\star}/T_{\text{our}}^{\star}\). The last two columns show the minimum and maximum run time of our algorithm.

Figure 3: Comparison with DP-GD Oracle where at each iteration the stepsize tuned non-privately.

### Second Order Information vs Optimal Stepsize

In non-private convex optimization, the key to the success of second-order optimization algorithms is that the second-order information acts as a preconditioner, and the same performance _cannot_ be attained by optimally tuning the stepsize for GD algorithm. To investigate whether the same holds for our algorithms, we consider the following variant of DP-GD. Let \(\tilde{g}_{t}\) denote the perturbed gradient obtained by adding a Gaussian random vector to \(\nabla\ell_{\mathrm{LL}}(w_{t},S_{n})\). Instead of a constant stepsize, the stepsize at iteration \(t\) is chosen based on \(\eta_{t}=\arg\min_{\eta\geq 0}\ell_{\mathrm{LL}}(w_{t}-\eta\tilde{g}_{t})\). Notice this variant is obviously _not DP_. We refer to this variant as _DP-GD-Oracle_. The comparison with DP-GD-Oracle lets us answer the following question: _Could we have just computed a single number, i.e., stepsize, to achieve the same performance as our second-order optimization algorithms which require computing a \(d\times d\) matrix?_ In Figure 3, we compare the convergence speed of our algorithms with DP-GD-Oracle in low- and high-privacy regimes. Figure 3 shows our algorithms converge faster than DP-GD-Oracle which is not even a DP algorithm. Figure 3 confirms the expectation that as the privacy budget increases the difference between our algorithms and DP-GD-Oracle increases since we can use more curvature information.

### Minibatch Variant of Our Algorithm and Comparison with DP-SGD

So far we have considered full-batch algorithms that compute first- and second-order information on the entire dataset. We extend Algorithm 3 to the minibatch setting, where, at each iteration, the gradient and SOI matrix are computed using a subsample of the data points. In Appendix C.1 we provide a formal algorithmic description of the minibatch version of Algorithm 3 along with its privacy proof. Then, we compare the convergence speed and excess loss with DP-SGD.

DP-SGD is faster than DP-GD, but to achieve good privacy and utility, we need large batches [PHKX+23, Fig. 2]. This is in stark contrast with non-private SGD, where larger batch sizes yield diminishing returns [ZLMM+19]. In particular, to achieve the best excess loss we need to select the batch size as large as possible. We select the batch size of DP-SGD so that the achievable excess loss will be close to the full batch versions. Specifically, we select \(\frac{\text{batch size DP-SGD}}{\text{number of samples}}\approx 0.02\) and tune the number of iterations of DP-SGD to obtain the best result. Figure 4 shows the progress of different algorithm versus run time. Obviously, for a fixed run time DP-SGD performs more iterations compared to our algorithms. Nevertheless, our algorithms achieve the same excess error as DP-GD with \(8\)-\(10\times\) faster run time over all the datasets while _the batch sizes of our algorithms are larger than that of DP-SGD_. We observe that the variations of our algorithms based on the adding operator performs better in the minibatch setting. This can be attributed to the smaller \(\sigma_{2}\) for the adding operator in Algorithm 3. In summary, the comparison between privacy-utility-wall time tradeoff of the subsampled variant of our algorithm and DP-SGD is similar to their full-batch counterparts.

## 7 Conclusion and Limitations

We showed that second-order methods can be used in the DP setting both for improving worst-case convergence guarantees and designing faster practical algorithms. We believe our results open up many directions: A limitation of our algorithms is that the cost of forming and inverting the Hessian can be prohibitive when \(d\) is large. In the non-private setting, a line of research tries to address this limitation by constructing an approximation to SOI such that the update is efficient, yet still provides sufficient SOI [15; 16; 17]. It would be interesting to investigate how the ideas developed in our paper could be incorporated into these methods.

Figure 4: Minibatch Variant of Our Algorithm and Comparison with DP-SGD

## Acknowledgments

The authors would like to thank Murat Erdogdu, Jalaj Upadhyay, and Mohammad Yaghini for helpful discussions. Resources used in preparing this research were provided, in part, by the Province of Ontario, the Government of Canada through CIFAR, and companies sponsoring the Vector Institute www.vectorinstitute.ai/partners.

## References

* [ABH17] N. Agarwal, B. Bullins, and E. Hazan. "Second-order stochastic optimization for machine learning in linear time". _The Journal of Machine Learning Research_ 18.1 (2017), pp. 4148-4187.
* [ABL21] M. Avella-Medina, C. Bradshaw, and P.-L. Loh. "Differentially private inference via noisy optimization". _arXiv preprint arXiv:2103.11003_ (2021).
* [ACGM+16] M. Abadi, A. Chu, I. Goodfellow, H. B. McMahan, et al. "Deep learning with differential privacy". In: _Proceedings of the 2016 ACM SIGSAC conference on computer and communications security_. 2016, pp. 308-318.
* [AMN20] J. Arbel, O. Marchal, and H. D. Nguyen. "On strict sub-Gaussianity, optimal proxy variance and symmetry for bounded random variables". _ESAIM: Probability and Statistics_ 24 (2020), pp. 39-55.
* [Bac10] F. Bach. "Self-concordant analysis for logistic regression". _Electronic Journal of Statistics_ 4 (2010), pp. 384-414.
* [Bac14] F. Bach. "Adaptivity of averaged stochastic gradient descent to local strong convexity for logistic regression". _The Journal of Machine Learning Research_ 15.1 (2014), pp. 595-627.
* [BD99] J. A. Blackard and D. J. Dean. "Comparative accuracies of artificial neural networks and discriminant analysis in predicting forest cover types from cartographic variables". _Computers and electronics in agriculture_ 24.3 (1999), pp. 131-151.
* [BFTG19] R. Bassily, V. Feldman, K. Talwar, and A. Guha Thakurta. "Private stochastic convex optimization with optimal rates". _Advances in neural information processing systems_ 32 (2019).
* [BS16] M. Bun and T. Steinke. "Concentrated differential privacy: Simplifications, extensions, and lower bounds". In: _Theory of Cryptography Conference_. Springer. 2016, pp. 635-658.
* [BST14] R. Bassily, A. Smith, and A. Thakurta. "Private empirical risk minimization: Efficient algorithms and tight error bounds". In: _2014 IEEE 55th annual symposium on foundations of computer science_. IEEE. 2014, pp. 464-473.
* [BV04] S. P. Boyd and L. Vandenberghe. _Convex optimization_. Cambridge university press, 2004.
* [CJB04] R. Caruana, T. Joachims, and L. Backstrom. "KDD-Cup 2004: results and analysis". _ACM SIGKDD Explorations Newsletter_ 6.2 (2004), pp. 95-108.
* [CMS11] K. Chaudhuri, C. Monteleoni, and A. D. Sarwate. "Differentially Private Empirical Risk Minimization". _Journal of Machine Learning Research_ 12.29 (2011), pp. 1069-1109.
* [DG17] D. Dua and C. Graff. _UCI Machine Learning Repository_. 2017.
* [DMNS06] C. Dwork, F. McSherry, K. Nissim, and A. Smith. "Calibrating noise to sensitivity in private data analysis". In: _Theory of cryptography conference_. Springer. 2006, pp. 265-284.
* [DR16] C. Dwork and G. N. Rothblum. "Concentrated differential privacy". _arXiv preprint arXiv:1603.01887_ (2016).
* [EM15] M. A. Erdogdu and A. Montanari. "Convergence rates of sub-sampled Newton methods". _Advances in Neural Information Processing Systems_ 28 (2015).

* [Erd15] M. A. Erdogdu. "Newton-Stein method: A second order method for GLMs via Stein's lemma". _Advances in Neural Information Processing Systems_ 28 (2015).
* [GKLR19] R. Gower, D. Kovalev, F. Lieder, and P. Richtarik. "RSN: randomized subspace Newton". _Advances in Neural Information Processing Systems_ 32 (2019).
* [GL12] S. Ghadimi and G. Lan. "Optimal Stochastic Approximation Algorithms for Strongly Convex Stochastic Composite Optimization I: A Generic Algorithmic Framework". _SIAM Journal on Optimization_ 22.4 (2012), pp. 1469-1492. eprint: https://doi.org/10.1137/110848864.
* [GLL22] S. Gopi, Y. T. Lee, and D. Liu. "Private Convex Optimization via Exponential Mechanism". In: _Proceedings of Thirty Fifth Conference on Learning Theory_. Ed. by P.-L. Loh and M. Raginsky. Vol. 178. Proceedings of Machine Learning Research. PMLR, Feb. 2022, pp. 1948-1989.
* [GTU22] A. Ganesh, A. Thakurta, and J. Upadhyay. "Langevin diffusion: An almost universal algorithm for private Euclidean (convex) optimization". _arXiv preprint arXiv:2204.01585_ (2022).
* [GV13] G. H. Golub and C. F. Van Loan. _Matrix computations_. JHU press, 2013.
* [HLR19] N. J. Harvey, C. Liaw, and S. Randhawa. "Simple and optimal high-probability bounds for strongly-convex stochastic gradient descent". _arXiv preprint arXiv:1909.00843_ (2019).
* [INST+] R. Iyengar, J. P. Near, D. Song, O. Thakkar, et al. _Differentially Private Convex Optimization Benchmark_. url: https://github.com/sublaze-ucb/dpml-benchmark.
* [INST+19] R. Iyengar, J. P. Near, D. Song, O. Thakkar, et al. "Towards practical differentially private convex optimization". In: _2019 IEEE Symposium on Security and Privacy (SP)_. 2019.
* [JM23] Q. Jin and A. Mokhtari. "Non-asymptotic superlinear convergence of standard quasi-Newton methods". _Mathematical Programming_ 200.1 (2023), pp. 425-473.
* [JNGKJ19] C. Jin, P. Netrapalli, R. Ge, S. M. Kakade, and M. I. Jordan. "A short note on concentration inequalities for random vectors with subgaussian norm". _arXiv preprint arXiv:1902.03736_ (2019).
* [JT16] F. Jarre and P. L. Toint. "Simple examples for the failure of Newton's method with line search for strictly convex minimization". _Mathematical Programming_ 158.1 (2016), pp. 23-34.
* [Kat73] T. Kato. "Continuity of the map \(S\to|S|\) for linear operators". _Proceedings of the Japan Academy_ 49.3 (1973), pp. 157-160.
* [KSJ18] S. P. Karimireddy, S. U. Stich, and M. Jaggi. "Global linear convergence of Newton's method without strong-convexity or Lipschitz gradients". _arXiv preprint arXiv:1806.00413_ (2018).
* [KST12] D. Kifer, A. Smith, and A. Thakurta. "Private Convex Empirical Risk Minimization and High-dimensional Regression". In: _Proceedings of the 25th Annual Conference on Learning Theory_. Ed. by S. Mannor, N. Srebro, and R. C. Williamson. Vol. 23. Proceedings of Machine Learning Research. Edinburgh, Scotland: PMLR, 25-27 Jun 2012, pp. 25.1-25.40.
* [Lyu22] X. Lyu. "Composition Theorems for Interactive Differential Privacy". _arXiv preprint arXiv:2207.09397_ (2022).
* [Mir75] L. Mirsky. "A trace inequality of John von Neumann". _Monatshefte fur mathematik_ 79.4 (1975), pp. 303-306.
* [MRTZ17] H. B. McMahan, D. Ramage, K. Talwar, and L. Zhang. "Learning differentially private recurrent language models". _arXiv preprint arXiv:1710.06963_ (2017).
* [MTZ19] I. Mironov, K. Talwar, and L. Zhang. "Renyi differential privacy of the sampled Gaussian mechanism". _arXiv preprint arXiv:1908.10530_ (2019).
* [Nes98] Y. Nesterov. "Introductory lectures on convex programming volume i: Basic course". _Lecture notes_ 3.4 (1998), p. 5.

* [NJLS09] A. Nemirovski, A. Juditsky, G. Lan, and A. Shapiro. "Robust Stochastic Approximation Approach to Stochastic Programming". _SIAM Journal on Optimization_ 19.4 (2009), pp. 1574-1609. eprint: https://doi.org/10.1137/070704277.
* [NP06] Y. Nesterov and B. T. Polyak. "Cubic regularization of Newton method and its global performance". _Mathematical Programming_ 108.1 (2006), pp. 177-205.
* [NW99] J. Nocedal and S. J. Wright. _Numerical optimization_. Springer, 1999.
* [PHKX+23] N. Ponomareva, H. Hazimeh, A. Kurakin, Z. Xu, et al. "How to dp-fy ml: A practical guide to machine learning with differential privacy". _arXiv preprint arXiv:2303.00654_ (2023).
* [PS22] N. Papernot and T. Steinke. "Hyperparameter Tuning with Renyi Differential Privacy". In: _International Conference on Learning Representations_. 2022.
* [RM16] F. Roosta-Khorasani and M. W. Mahoney. "Sub-sampled newton methods ii: Local convergence rates". _arXiv preprint arXiv:1601.04738_ (2016).
* [RM19] F. Roosta-Khorasani and M. W. Mahoney. "Sub-sampled Newton methods". _Mathematical Programming_ 174 (2019), pp. 293-326.
* [SCS13] S. Song, K. Chaudhuri, and A. D. Sarwate. "Stochastic gradient descent with differentially private updates". In: _2013 IEEE global conference on signal and information processing_. IEEE. 2013, pp. 245-248.
* [SSTT21] S. Song, T. Steinke, O. Thakkar, and A. Thakurta. "Evading the curse of dimensionality in unconstrained private glms". In: _International Conference on Artificial Intelligence and Statistics_. PMLR. 2021, pp. 2638-2646.
* [Ste98] G. W. Stewart. _Matrix algorithms: volume 1: basic decompositions_. SIAM, 1998.
* [STT20] S. Song, O. Thakkar, and A. Thakurta. "Characterizing Private Clipped Gradient Descent on Convex Generalized Linear Problems". _arXiv preprint arXiv:2006.06783_ (2020).
* [STU17] A. Smith, A. Thakurta, and J. Upadhyay. "Is interaction necessary for distributed private learning?" In: _2017 IEEE Symposium on Security and Privacy (SP)_. IEEE. 2017, pp. 58-77.
* [VZ22] S. Vadhan and W. Zhang. "Concurrent Composition Theorems for Differential Privacy". _arXiv preprint arXiv:2207.08335_ (2022).
* [WLKC+17] X. Wu, F. Li, A. Kumar, K. Chaudhuri, et al. "Bolt-on Differential Privacy for Scalable Stochastic Gradient Descent-based Analytics". In: _Proceedings of the 2017 ACM International Conference on Management of Data, SIGMOD_. Ed. by S. Salihoglu, W. Zhou, R. Chirkova, J. Yang, and D. Suciu. 2017.
* [XRV17] H. Xiao, K. Rasul, and R. Vollgraf. "Fashion-mnist: a novel image dataset for benchmarking machine learning algorithms". _arXiv preprint arXiv:1708.07747_ (2017).
* [XYRRM16] P. Xu, J. Yang, F. Roosta, C. Re, and M. W. Mahoney. "Sub-sampled Newton methods with non-uniform sampling". _Advances in Neural Information Processing Systems_ 29 (2016).
* [ZLNM+19] G. Zhang, L. Li, Z. Nado, J. Martens, et al. "Which algorithmic choices matter at which batch sizes? insights from a noisy quadratic model". _Advances in neural information processing systems_ 32 (2019).
* [ZZMW17] J. Zhang, K. Zheng, W. Mou, and L. Wang. "Efficient private ERM for smooth objectives". In: _Proceedings of the 26th International Joint Conference on Artificial Intelligence_. 2017, pp. 3922-3928.