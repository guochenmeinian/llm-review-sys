# Score-based 3D molecule generation with neural fields

Matthieu Kirchmeyer, Pedro O. Pinheiro, Saeed Saremi

Prescient Design, Genentech

Equal contribution. Correspondence to kirchmeyer.matthieu@gene.com, oliveira_pinheiro.pedro@gene.com, saremi.saeed@gene.com

###### Abstract

We introduce a new representation for 3D molecules based on their continuous atomic density fields. Using this representation, we propose a new model based on walk-jump sampling [1] for unconditional 3D molecule generation in the continuous space using neural fields. Our model, FuncMol, encodes molecular fields into latent codes using a conditional neural field, samples noisy codes from a Gaussian-smoothed distribution with Langevin MCMC (walk), denoises these samples in a single step (jump), and finally decodes them into molecular fields. FuncMol performs all-atom generation of 3D molecules without assumptions on the molecular structure and scales well with the size of molecules, unlike most approaches. Our method achieves competitive results on drug-like molecules and easily scales to macro-cyclic peptides, with at least one order of magnitude faster sampling.1

Footnote 1: The code is available at https://github.com/prescient-design/funcmol.

## 1 Introduction

Generative modeling of 3D molecular structures, if deployed successfully, can help on many problems in material and life sciences. Recently, state-of-the-art image and text generative models were adapted to 3D molecule generation, achieving some degree of success [2, 3]. However, unlike other domains where the data modality is defined by the representation itself (e.g., a digital image _is_ a tensor of pixels), there are multiple ways to represent a molecule. Therefore, an important problem to consider when modeling 3D molecules is: _what constitutes a good representation for molecules?_

Recent methods for 3D molecule generation usually represent molecules as point clouds of atoms [4] or discrete grids of atomic densities [5], which we will refer to as voxel grids. Point clouds are processed by graph neural networks (GNNs), usually based on equivariant architectures [6, 7]. GNNs are known to be less expressive than other architectures due to the message passing formalism [8, 9, 10] and often scale quadratically with the number of atoms. On the other hand, voxel grids are compatible with more expressive models (e.g., convnets and transformers) but computation and memory scales cubically with the volume occupied by the molecules. These limitations in expressivity and scalability hinder the scope of application of these models.

In this work, we propose a new representation for molecules that overcomes those limitations. Inspired by the 3D computer vision community [11], we represent _molecules as fields encoding atomic occupancy_, i.e., continuous functions that map 3D coordinates to atomic densities. Arguably this representation is more natural for molecules than for visual data: while visual data is obtained via discrete measurements, molecular fields are continuous by nature. We handle these fields as such, by parameterizing the molecular occupancy field with a neural network, shared among all molecules, and modulation codes, specific to each molecule. Fields that are parametrized by neural networks are referred to as neural fields, implicit neural representations (INR) or coordinate-based neural networks. The former models common molecular structures (e.g., bonds, angles, valencies, symmetries) while the later encodes variations that make each molecule unique. Given a modulation code, we decode themolecular field by predicting the occupancy of each atom at given 3D coordinates (see Figure 1(a)). This decodes the molecules into explicit representations (such as discrete grids at arbitrary resolution or a.sdf format file), useful for downstream tasks.

We perform generative modeling in the continuous function space simply by sampling new modulation codes. Our proposed approach, _FuncMol_, leverages a modulation code denoiser to sample molecules following the (score-based) walk-jump sampling (WJS) approach [1]. WJS enjoys many properties such as fast-mixing, simplicity for training and fast sampling speed. Sampling is composed of three steps: (i) _(walk)_ sample noisy modulation codes with a Langevin Markov chain Monte Carlo (MCMC), (ii) _(jump)_ estimate the "clean" modulation codes, and (iii) _(decode)_ convert the estimated codes into a molecule. Figure 1(b) illustrates a WJS chain, with samples generated by our model trained on a macrocyclic peptides dataset [12].

The neural molecular field representation has many advantages over prior representations: (i) it represents complex high-dimensional data in a relatively low-dimensional compact space, (ii) it is scalable (w.r.t. the number of points, size of molecules and resolution) and has low memory footprint, (iii) it does not make any assumptions on molecular structure or geometry, (iv) it can represent molecular structures at arbitrary resolutions and for a free-form discretization, (v) it is compatible with expressive machine learning architectures, and (vi) it is domain-agnostic and can be used for a variety of molecular design problems that can be expressed over fields, e.g., atomic densities, surfaces, pharmacophores, molecular orbitals, electron densities etc.

In summary, our contributions are as follows. We introduce a new way to represent molecular structures with neural fields. These representations are low-dimensional, compact, scalable and do not make any assumptions on the molecular structure. We then propose FuncMol, a score-based model for 3D molecule generation that leverages these representations. We show that FuncMol performs competitively against representative baselines on the drug-like molecules dataset GEOM-drugs [13], based on a wide set of standard and new metrics that we introduce to better measure the generation quality. These results were achieved with one order magnitude faster sampling time.2 Finally, we illustrate FuncMol's ability to scale to larger 3D molecules by training it on CREMP [12], a recent macro-cyclic peptide dataset, to which our baselines are currently unable to scale.

Footnote 2: Sampling time includes the “decoding” step to convert the generated code into a molecule.

## 2 Related work

Neural fields.Neural fields, also referred to as implicit neural representations (INRs), are coordinate-based neural networks that map coordinates (e.g., pixels on an image or coordinates in 3D Euclidean space) to features (e.g., RGB values or atomic occupancies). The idea of representing data points implicitly as neural networks dates back to the work of [14]. Recently, these representations have been successfully applied to model continuous signals, e.g., 2D images [15; 16; 17], 3D shapes [18; 19; 20; 21], 3D scenes [22; 23], videos [24; 25], physics [26; 27], due to their appealing properties. Recently, two concurrent seminal work lead to a fast progress of neural fields by overcoming the spectral bias of coordinate-based neural networks [28]. Sitzmann _et al._[29] propose SIREN, a neural network that uses periodic activation functions, while Tancik _et al._[30] considers a posi

Figure 1: (a) a conditional neural field encodes a molecular field \(v\) into a low dimensional latent code \(z\). (b) using a learned score function \(g_{\theta}\), FuncMol performs sampling in latent space via Langevin MCMC. These codes are decoded back into molecules.

tional encoding based on Fourier features. Built on top of those architectures, multiplicative filter networks (MFNs) [31] represent fields as a simple linear combination over an exponential number of basis functions (e.g. Fourier or Gabor basis). Due to their simplicity and strong performance, we use MFNs to model the atomic occupancy fields.

Generative models of fields.Generative models for neural fields were first applied in 3D computer vision problems. Mescheder _et al._[19] learn the distribution of shape occupancy fields with VAEs [32], while [18; 33] achieves similar objectives using GANs [34]. Diffusion models [35] have also been applied to learn the distribution of neural fields [36; 37; 38; 39]. Some work [37; 40] parameterize the neural field with the vector of all the corresponding weights. However, when the signal is complex and the neural fields have large number of parameters (e.g., in the order of millions), it is preferable to parameterize the field with a latent code with much lower dimension [36; 41; 42; 43]. Dupont _et al._[36] fit the whole dataset with a shared coordinate-based network and learn a latent modulation code for each field with gradient-based meta learning [44]. Similarly to them, we parameterize neural fields with latent modulation codes. However, instead of applying meta learning, we learn the latent codes through stochastic optimization, either following the "auto-encoding" [19] or the "auto-decoding" [20] framework.

3D molecule generation.Most 3D molecule generation approaches represent atoms as points (with coordinates and atom types) and molecules as a set of points. For example, [45; 46; 47] propose autoregressive approaches to sample atoms, while [48; 49] use normalizing flows [50]. Hoogeboom _et al._[4] propose EDM, a diffusion model [35] applied to point cloud of atoms with E(3) equivariance [6]. Many follow-up works extend EDM [51; 52; 53]. For example, [54; 55; 56] improve its performance by leveraging extra information during training (such as molecular graph and formal charges). This contribution is orthogonal to ours and can potentially be incorporated into our generative model. Other approaches [57; 58] map atomic densities on discrete 3D regular grids and leverage computer vision techniques for generation. Recently, VoxMol [5] (and its latent version [59]), a score-based generative model based on walk-jump sampling [1], shows that voxel-based representations can achieve state-of-the-art results on 3D drug-like molecule generation. However, these methods scale cubically with the volume occupied by molecules, which limits its scope of application. Neural fields are the continuous generalization of discrete 3D grid representations: they achieve good performance on 3D molecule generation and are more efficient in terms of memory and computation.

Conditional molecule generation.Voxels and point-clouds have also been used for conditional 3D molecule generation, usually by building upon an unconditional model. The authors in [57] condition generation on 3D pharmacophores features, [60; 61; 62; 63] generate ligands conditioned on protein pockets, [64] generate molecules conditioned on fragments and [65; 66] generate 3D conformations conditioned on molecular graphs. We are aware of only one other work that uses field-based representation for molecules [67]. There are several differences between our works: they use different data representation, neural network architecture and noise model. While they consider the problem of generating molecule conformations given a molecular graph, we handle the more general problem of unconditional 3D molecule generation (without access to a molecular graph). Our model can easily be adapted to conformer generation by conditioning the generative model to the molecular graph. Moreover, our approach can also be conditioned to tasks where we do not have access to molecular graphs, such as structure-based drug design or electron density generation.

## 3 Neural atomic occupancy fields

We now describe how we represent molecules as continuous occupancy fields, how we approximate them with neural fields and how we decode the neural fields to retrieve molecular conformations. We finish the section by providing some useful properties of our neural field representations.

### Molecules as continuous occupancy fields

We represent atoms as continuous Gaussian-like shapes in 3D space, centered around their atomic coordinates. Molecules are defined as fields mapping every point in the 3D space to the atomic densities of each atom type, \(v:\mathbb{R}^{3}\rightarrow\mathbb{R}^{n}\), where \(n\) is the number of atom types in the dataset \(\mathcal{D}\). We follow previous work [68; 69; 70], and compute the occupancy field \(v_{a}\) for each atom type \(a\) by integrating the occupancy generated by all atoms of this type as follows:

\[\forall x\in\mathbb{R}^{3},\,v_{a}(x)=1-\prod_{i=1}^{n_{a}}\Big{(}1-\text{exp} \Big{(}-\Big{(}\frac{\|x-x_{a_{i}}\|}{.93r}\Big{)}^{2}\Big{)}\Big{)},\] (1)

where \(a_{i}\) is the \(i^{\text{th}}\) atom of type \(a\), for a total of \(n_{a}\) atoms. We set the atoms' radius to be \(r=.5\)A for all atom types. Molecular fields are smooth functions taking values between 0 (far away from all atoms) and 1 (at the center of atoms).

### Molecular neural fields

Each molecule in the dataset is mapped to a modulation code \(z\in\mathbb{R}^{d}\) and we parameterize the molecular occupancy \(v\) with a conditional neural field \(f_{\phi}:\mathbb{R}^{3}\times\mathbb{R}^{d}\to\mathbb{R}^{n}\). Our objective is to learn the parameters \(\phi\) and the modulation code \(z\) such that for any molecular field \(v\) and coordinate \(x\in\mathbb{R}^{3}\), \(f_{\phi}(x,z)\approx v(x)\). We approximate the molecular fields with a linear combination of an exponential large number of parameterized basis functions, such that amplitudes are modulated by the individual codes \(z\). This parametrization is achieved by modeling the neural field with multiplicative filter networks (MFN) [31], a type of coordinate-based network that provides an elegant way to perform this linear combination under some assumptions on the basis functions. We introduce the parameters associated with these functions in Equation (4).

Our conditional MFN is a network with \(L\) multiplicative blocks, as illustrated on Figure 2(a). We implement conditioning of its parameters with FiLM [71]. Each multiplicative block is composed of a fully-connected layer, a FiLM modulation layer and an elementwise product with a basis, as illustrated on Figure 2(b). The neural field can be expressed by the following recursive expression:

\[h^{(0)}(x) =s_{\omega^{(0)}}(x),\] \[h^{(l)}(x) =\Big{(}\gamma^{(l-1)}\odot\Big{(}W_{f}^{(l-1)}h^{(l-1)}(x) \Big{)}+\Big{(}b^{(l-1)}+\beta^{(l-1)}\Big{)}\Big{)}\odot s_{\omega^{(l)}}(x),\,\,\,l\in(1,L-1),\] \[f_{\phi}(x,z) \triangleq h^{(L)}(x)=W_{f}^{(L-1)}h^{(L-1)}(x)+b^{(L-1)},\]

where \(s_{\omega^{(l)}}\) is a spatial basis function parameterized by \(\omega^{(l)}\), \(\odot\) denotes the Hadamard product and

\[\beta^{(l-1)}=W_{\beta}^{(l-1)}z,\text{ and }\gamma^{(l-1)}=W_{\gamma}^{(l-1)}z,\]

are the bias and scale modulation terms. We propose two approaches to learn the neural field's parameters \(\phi=\{W_{f}^{(l)},b^{(l)},\omega^{(l)},W_{\beta}^{(l)},W_{\gamma}^{(l)}\}\) and the codes \(z\) (one per each molecule in \(\mathcal{D}\)).

Auto-decoding.In this setting, introduced by [20], we initialize each code \(z\) randomly and directly learn them (together with the parameters of the neural field) with backpropagation. This is achieved by solving the following optimization problem:

\[\operatorname*{arg\,min}_{\phi,\{z_{v}\}_{v\in\mathcal{D}}}\,\sum_{v\in \mathcal{D}}\,\int\|f_{\phi}(x,z_{v})-v(x)\|_{2}^{2}\,\mathrm{d}x,\] (2)

where the integral is approximated by sampling finite sets of points \(\mathcal{X}\subset\mathbb{R}^{3}\). While auto-decoding was usually applied in settings with relatively few samples, we were able to scale the training to large datasets of one million samples (see Appendix B). See Algorithm 1 on Appendix B for more details.

Figure 2: Conditional neural field \(f_{\phi}\) using the multiplicative filter network architecture. (a) A latent code \(z\) and some coordinates \(x\) are given as input to the model that outputs the occupancy field at that location for the corresponding molecule, \(f_{\phi}(x,z)\). (b) The code and coordinates are processed via FiLM layers and Hadamard products. We denote the overall operation at layer \(l\) as \(H^{(l)}\).

Auto-encoding.This approach, introduced by [19] and illustrated in Appendix B Figure 4, generates the modulation code via an encoder \(\zeta_{\psi}\), parameterized by \(\psi\) and decodes the neural field back. In this work, \(\zeta_{\psi}\) is a (trainable) 3D convolutional network encoder that takes (low-resolution) voxel grids \(\mathcal{G}\) as inputs. This approach is flexible and compatible with other encoder architectures and molecule representations (e.g., GNN/point clouds). The parameters of the encoder and the neural field are learned with the following objective:

\[\operatorname*{arg\,min}_{\phi,\psi}\;\sum_{v\in\mathcal{D}}\;\int\|f_{\phi}(x,\zeta_{\psi}(\mathcal{G}))-v(x)\|_{2}^{2}\;\mathrm{d}x.\] (3)

Once training is done, we generate the code with the trained encoder. See Algorithm 2 on Appendix B for more details. Instead of learning the codes individually, this approach learns an encoder, which allows to leverage data augmentation more efficiently. As a result it helps learn a more structured latent space. These benefits are reflected empirically in our experiments.

### From codes to atomic coordinates

By leveraging the modulation codes \(z\) and the neural field \(f_{\phi}\), we have access to the (learned) continuous occupancy field, \(f_{\phi}(\cdot,z)\). However, in many useful applications in chemistry and biology, we are more interested in the 3D conformation of molecules. Next, we describe how we can extract the molecular conformation from a learned (or generated, as we will see next) modulation code. This is the decoding step outlined in the introduction.

We start by identifying all atoms in the field, their approximate locations and their type. To this end, we render a discretized voxel grid from the molecular field using a uniform discretization of space and the neural field \(f_{\phi}(\cdot,z)\). We then apply a _peak finding_ algorithm to infer the number of atoms in the molecule on each channel of the grid (each representing a separate atom type) and their (discretized) coordinates. Finally, we introduce a new continuous refinement to find the local maximum of the neural field. For each identified atoms \(a\), we refine its coordinates around the neighborhood of the coordinates found with the peak detector \(x_{a}^{0}\):

\[x_{a}=\operatorname*{arg\,max}_{x\in\mathbb{R}^{3}:\|x-x_{a}^{0}\|\leq r}[f_{ \phi}(x,z)]_{a},\]

where \([f_{\phi}(x,z)]_{a}\) denotes the field restricted to the channel corresponding to the atom type. This continuous refinement finds atomic coordinates that lie beyond the initial coarse uniform discretization. In practice, we batch the refinement process across molecules and use L-BFGS. We demonstrate in Appendix E.2 its efficiency compared to prior non-continuous refinement approaches from [72; 5].

### Molecular neural fields properties

The proposed conditional neural field enjoys many properties that make it a natural choice for handling large 3D molecules represented as continuous fields.

Flexibility w.r.t. basis.Conditioning MFNs gives the flexibility to choose any type of spatial basis that satisfies a multiplicative-sum property (see the definition in [31]). In our preliminary experiments, we observed that setting the spatial basis to Gabor filters performed better than Fourier filters as they account for the sparse nature of occupancy fields. For each layer \(l\), we consider the following Gabor parameterization, also used in [27]:

\[s_{\omega^{(l)}}(x)=\exp\Bigl{(}-\frac{\nu^{(l)}}{2}\|x-\mu^{(l)}\|_{2}^{2} \Bigr{)}(\cos(\Omega^{(l)}x),\sin(\Omega^{(l)}x)),\] (4)

where \(\mu^{(l)}\) is the mean of the Gabor filter, \(\nu^{(l)}\) is the scale, \(\Omega^{(l)}\) is the frequency and \((\cdot,\cdot)\) refers to the concatenation operator. Equation (4) combines both real and imaginary parts of the complex Gabor filter. This allows to remove phase parameters and reduce the overall parameter count of MFNs [31]. Other choices of basis are also possible and are left for future work.

Parameter efficiency.Our overall conditional MFN formulation is parameter efficient and shares parameters across molecules and channels (i.e. atom types). As [27], we excluded the basis functions parameters \(\omega\) from FiLM to further decrease the parameter count.

Memory efficiency.Our conditional neural field can be trained on any free-form discretization of the input field. Occupancy values are computed on the fly. This allowed to train FuncMol with large batch size even on large 3D molecules. We found that training the neural field by up-sampling points close to the atoms' center improved training time as further detailed in Appendix B. Alternative approaches like VoxMol [5] cannot be trained efficiently in this setting: for reference, on the macro-cyclic peptide generation task of Section 5.4, on 4 A100 GPUs VoxMol's training cost per epoch was 10 hours while our neural field's training cost was less than 12 minutes.

Reconstruction quality and robustness to noise.Finally our neural field reconstructs accurately the input data as demonstrated in Appendix E.1. Moreover, operating on these latent codes makes our model extremely robust to noise in code space. We demonstrate this property in Appendix E.3 by reporting the sampling metrics when perturbing the codes \(z\) by a Gaussian noise.

Sampling efficiency.We use the latent codes for generative modeling as explained in Section 4. Most sampling operations are done on a small dimensional latent space, while decoding into a full molecular field is done only after sampling. As we show in Section 5, our approach (which involves sampling latent code followed decoding them into molecules) achieves at least one order magnitude faster molecule sampling time than previous methods.

## 4 Score-based generative modeling

We use our latent modulation representations for a downstream generative modeling task. Section 4.1 describes the neural empirical Bayes (NEB) formalism used in our method and Section 4.2 explains how we perform sampling.

### Neural empirical Bayes

Let \(p(z)\) be the distribution of codes and \(p(v)\) be the (unknown) distribution of molecular fields, defined more formally as the pushforward of \(p(z)\) via the mapping \(z\mapsto f_{\phi}(\cdot,z)\). NEB estimates the score function of a smoothed density of the codes \(p(y)\), \(g_{\theta}(y)\approx\nabla\log p(y)\). Indeed sampling from a smoothed density \(p(y)\) benefits from faster mixing than on the original density \(p(z)\)[1, 73, 74]. This smoothed distribution is defined by transforming the random variable \(Z\) with an additive isotropic Gaussian noise with a known noise level \(\sigma\), \(Y=Z+N\), where \(N\sim\mathcal{N}(0,\sigma^{2}I_{d})\). The noise level \(\sigma\) plays a key role, trading-off simplicity of the denoising objective and the sampling quality.

NEB is based on an empirical Bayes view of (denoising) score-based models that relates the estimator of clean data (denoiser) and the score function of the smoothed density at a fixed noise level [75, 76, 1]. The denoiser is taken to be the least-square estimator of \(Z\) given \(Y=y\) which is the Bayes estimator, i.e. \(\hat{z}(y)=\mathbb{E}[Z|Y=y]\). Under Gaussian noise, denoiser and smoothed score function are related by the Tweedie-Miyasawa formula:

\[\hat{z}(y)=y+\sigma^{2}\nabla\log p(y).\] (5)

The denoiser is parameterized by a neural network and learned by minimizing the following objective:

\[\mathcal{L}(\theta)=\mathbb{E}_{z\sim p(z),\varepsilon\sim\mathcal{N}(0, \sigma^{2}I_{d})}\big{\|}z-\hat{z}_{\theta}(z+\varepsilon)\big{\|}_{2}^{2}.\] (6)

The score function is recovered from a learned denoiser via Equation (5) and is used for sampling smoothed codes (see Section 4.2). In practice, we optimize the empirical loss based on the latent codes inferred from a set of molecular fields \(\mathcal{D}\). See pseudo-code in Appendix B, Algorithm 3.

### Walk-jump sampling

We use the score function \(g_{\theta}\) to sample codes using the _walk-jump sampling_ (WJS) scheme [1, 77, 73, 78]. This approach samples molecules from \(p(z)\) using the learned score function of noisy data instead of clean data. It consists of two main steps: walking and jumping as detailed in Appendix B, Algorithm 4. Figure 1(b) illustrates these two main steps in a WJS chain: walking consists in generating noisy codes while jumping consists in generating clean codes \(z\).

_(initialization)_ To improve mixing, as [77], we initialize the chains by adding uniform noise to Gaussian noise (with the same \(\sigma\) used when training the denoiser). In practice we sample the uniform noise over the range of code values, \(\mu\sim\mathcal{U}_{d}(\min_{z\in\mathcal{D}_{z},i\in\{1\cdots d\}}z_{i},\max_{z\in \mathcal{D}_{z},i\in\{1\cdots d\}}z_{i})\), where \(\mathcal{D}_{z}\) is the training dataset of codes, arriving at \(y_{0}=\mu+\varepsilon\), \(\varepsilon\sim\mathcal{N}(0,\sigma^{2}I_{d})\).

_(walk)_ Noisy codes are sampled from \(p(y)\) with Langevin MCMC algorithms that discretize the underdamped Langevin diffusion [79] starting from \(y_{0}\) and \(u_{0}=0\):

\[\mathrm{d}u_{t}=-\gamma u_{t}\mathrm{d}t\ +\ g_{\theta}(y_{t})\mathrm{d}t\ +\ \sqrt{2\gamma}\ \mathrm{d}B_{t},\qquad\mathrm{d}y_{t}=u_{t} \mathrm{d}t\,\] (7)

where \(B_{t}\) is the standard Brownian motion in \(\mathbb{R}^{d}\) and \(\gamma\) is the friction (the "mass" is set to 1). We discretize this SDE using the ABOBA scheme from Sachs _et al._[80], given a discretization step \(\delta\) and a fixed number of walk steps \(K\). We analyze the impact of \(K\) in Appendix E.4.

_(jump)_ At a given time step \(K\), clean samples are estimated by denoising the smooth code, i.e., \(z_{K}=\hat{z}_{\theta}(y_{K})\). These codes are then used to obtain the atomic coordinates as detailed in Section 3.3.

## 5 Experiments

We now evaluate our model for unconditional generation. We start with a description of our experimental setup (Section 5.1), then present our results on two popular small molecule datasets (Sections 5.2 and 5.3) and a recent macro-cyclic peptide dataset (Section 5.4).

### Experimental setup

Datasets.We evaluate FuncMol on three datasets: _QM9_[81], _GEOM-drugs_[82] and _CREMP_[12]. QM9 contains an enumeration of all possible molecules up to 9 heavy atoms (29 including hydrogens) satisfying some constraints [83]. GEOM-drugs contains multiple conformations for 430K drug-sized molecules (computed with semi-empirical density functional theory), with an average of 44 heavy atoms per molecule. CREMP is a recent dataset that contains multiple conformations of macrocyclic peptides 4-6 residue long, with an average of 74 heavy atoms per molecule. We model hydrogen explicitly and consider 5 chemical elements for QM9 (C, H, O, N, F), 6 for CREMP (C, H, O, N, F, S) and 8 for GEOM-drugs (C, H, O, N, F, S, Cl and Br), ignoring the P, I and B elements that occur extremely rarely. We use a split of 100K/20K/13K molecules for QM9, 1.1M/146K/146K on GEOM-drugs and 409K/10K/9K on CREMP for train, validation and test, respectively. We use the same pre-processing and splits in [54] for QM9 and GEOM-drugs and in [84] for CREMP.

Implementation details.Our main model, _FuncMol_, follows the auto-encoding approach described in Section 3.2. The codes \(z\) are computed with an encoder that takes as input a low-resolution voxelized representation of the molecular field with grid dimension of 16\(\times\)16\(\times\)16. The encoder is a 3D CNN containing 4 residual blocks, where each block contains 3 convolutional layers followed by BatchNorm, ReLU and pooling (max pooling on the first three blocks and average pooling on the last one) layers. We consider modulation codes with dimension 1024 on QM9 and 2048 on GEOM-drugs and CREMP. We use the same neural field network for all datasets: a conditional MFN with Gabor filters and 6 FiLM-modulated layers, where each fully-connected layer has 2048 hidden units. We augment the training set by applying random rotations on the three Euler angles. The weights of the latent code encoder and neural field decoder are trained jointly.

We also show results for the auto-decoding based model, _FuncMol\({}_{\mathrm{dec}}\)_. In this setting, we initialize the codes randomly and optimize them together with the neural field weights. This approach is less fit for performing large amounts of augmentation as it solves a costly per-sample optimization problem; thus we did not apply data augmentation. As a consequence, we observed that this model is more prone to memorization than the auto-encoding approach (e.g., on GEOM-drugs, around 33% of the generated molecules are copies from the training set).

We normalize the codes to have zero mean and unit variance. We choose a noise level in normalized space of \(\sigma=1.2\) for GEOM-drugs and CREMP, \(\sigma=2.0\) for QM9. Our code denoiser is a modified version of the denoiser used in [36]: a fully-connected network with 18 residual blocks (each with two linear layers with 6144 hidden units) and skip connections. We remove the bias of all layers and use ReLU activations as in [85]. To limit memorization in \(\mathrm{FuncMol}_{\mathrm{dec}}\), we add dropout (ratio 0.3) between the fully-connected layers in each residual block. For QM9, we consider a smaller network (6 residual blocks and 4096 hidden units). We initialize the MCMC chains with noise and use the following sampling hyperparameters \(\gamma=1.0\) and \(\delta=\sigma/2\) as in [5, 78]. For evaluation purposes, we generate one sample per chain. We consider 1000 steps for QM9 and GEOM-drugs and 10000 steps for CREMP. See Appendix B for more details on the implementation.

Baselines.We compare FuncMol and FuncMol\({}_{\mathrm{dec}}\) to three state-of-the-art approaches. _EDM_[4] and _GeoLDM_[53] are diffusion models operating on point clouds (the latter is a latent-space extension of the former). _VoxMol_[5] is a voxel-based generative model that uses neural empirical Bayes, similar to our generative approach. All of the methods generate molecules as a set of atom types and their coordinates. EDM and GeoLDM apply diffusion directly to point clouds, while VoxMol and FuncMol rely on an additional (cheap) post-processing step to extract atomic coordinates from voxel grids or modulation codes, respectively. We follow previous work [58; 54; 5; 62; 86], and use standard cheminformatics software (OpenBabel [87]) to determine the molecule's atomic bonds given their atomic coordinates. The same post-processing is applied to all models for fairness of comparison.

Metrics.We consider several metrics used in previous work [5] to benchmark unconditional molecule generation for the standard QM9 and GEOM-drugs datasets (for the CREMP metrics, see Section 5.4): _stable mol_ and _stable atom_, the percentage of stable molecules and atoms (as defined in [4]); _validity_, the percentage of generated molecules that passes RDKit [88]'s sanitization filter; _uniqueness_, the proportion of valid molecules that have different canonical SMILES; _valency_\(W_{1}\), the Wasserstein distance between the distribution of valencies in the generated and test set; _atoms TV_ and _bonds TV_, the total variation between the distribution of atom types and bond types; _bond length_\(W_{1}\) and _bond angle_\(W_{1}\), the Wasserstein distance between the distribution of bond and lengths. We also report the _average sampling time per molecule_. In the case of our method, this time includes the MCMC "walk" steps, the denoising "jump", the rendering, peak detection and bond inference.

To further investigate the quality of molecular conformations and other molecular properties on GEOM-drugs, we consider some additional metrics. These include: _single fragment_, the percentage of molecules that contains only a single fragment; _median strain energy_[89], the difference between the internal energy of the generated molecule's pose and a relaxed pose of the molecule using RDKit's Universal Force Field [90], computed over all molecules; _ring size TV_, the total variation between the empirical distribution of ring sizes (i.e. number of heavy atoms in rings) in generated and test sets; _number of atoms/mol TV_, the total variation between the empirical distribution of number of atoms per molecule in generated and test sets (in the case of molecules with multiple fragments, we consider only the largest fragment); _QED, SA and logp_, measure the drug-likeness score [91], the synthesizability score [92] and the lipophilic efficiency, respectively (computed with RDKit).

Ablations.In Appendix E we report a series of ablation studies for the neural field and the generative model. Appendix E.1 measures the reconstruction quality of the training molecules. Appendix E.2 illustrates the improvements due to continuous atomic coordinate refinement. Appendix E.3 shows that our field-based decoder is robust to noise, making it an ideal choice for generative modeling. Appendix E.4 ablates the impact of the number of walk steps in the WJS scheme of Section 4.2. Finally, Appendix E.5 ablates the impact of the chosen resolution when sampling codes and decoding them back to molecules. In practice, we observe that 0.25A provides a good trade-off between the sampling time and the quality of the generated molecules.

### Results on QM9

As pointed by previous authors [93; 4], this dataset is not fully suited for unconditional generative models: a model that captures the training distribution will have to generate samples from training set, due to the enumeration. However, many previous work report results on this dataset. Therefore, we also show results for completeness.

Table 1 report the metrics described in Section 5.1. We see that FuncMol slightly improves VoxMol and both models perform worse compared to the equivariant point-cloud based baselines. We note that sampling time of FuncMol is an order of magnitude better than baselines.

### Results on GEOM-drugs

Table 2 reports the same set of metrics as in the previous dataset. FuncMol performs favorably over point cloud diffusion models and is close to VoxMol's performance. In particular, FuncMol and VoxMol generate molecules that are significantly more stable and better capture the distribution of bond angles. Table 3 shows results on additional metrics (described in Section 5.1). We also include

the following plots of Appendix F: Figure 9 shows the cumulative distribution function of strain energies for generated molecules and Figures 10 and 11 show the histograms of the other metrics.

The results are clear: _FuncMol samples better drug-like molecules than point-cloud diffusion models_. In fact, about half the molecules of point cloud methods have multiple fragments, they have an order of magnitude higher median strain energy, the distribution of ring sizes is off and the QED, SA and logp scores are lower. The results of FuncMol are close to VoxMol in most but not all metrics. However, our approach is much more scalable and efficient: _FuncMol generates molecules an order of magnitude faster than previous methods_ (see the last column of Table 2). Appendix H shows some molecules generated by FuncMol on GEOM-drugs.

\begin{table}
\begin{tabular}{l l l l l l l l l l} \hline \hline  & stable & stable & valid & unique & valency & atom & bond & bond & bond & time \\  & mol \(\%_{\uparrow}\) & atom\(\%_{\uparrow}\) & \(\%_{\uparrow}\) & \(\%_{\uparrow}\) & \(W_{1\downarrow}\) & \(\mathrm{TV}_{\downarrow}\) & \(\mathrm{TV}_{\downarrow}\) & len \(W_{1\downarrow}\) & ang \(W_{1\downarrow}\) & s/mol.\(\downarrow\) \\ \hline _data_ & 98.7 & 99.8 & 98.9 & 99.9 &.001 &.003 &.000 &.000 &.120 & - \\ \hline EDM & 97.9 & 99.8 & 99.0 & 98.5 &.011 &.021 &.002 &.001 &.440 & 0.54 \\ GeoLDM & 97.5 & 99.9 & 100. & 98.0 &.005 &.017 &.003 &.007 &.435 & 0.65 \\ VoxMol & 89.3 & 99.2 & 98.7 & 92.1 &.023 &.029 &.009 &.003 & 1.96 & 0.83 \\ \hline FuncMol\({}_{\mathrm{dec}}\) & 88.6 & 99.2 & 100. & 81.1 &.022 &.066 &.032 &.006 & 1.21 & 0.05 \\ FuncMol & 89.2 & 99.0 & 100. & 92.8 &.021 &.012 &.006 &.005 & 1.56 & 0.05 \\ \hline \hline \end{tabular}
\end{table}
Table 1: QM9 results w.r.t. test set for 10000 samples per model. \(\uparrow\)\(\downarrow\) indicate that higher/lower numbers are better. The row _data_ are randomly sampled molecules from the validation set. We report 1-sigma error bars over 3 sampling runs.

\begin{table}
\begin{tabular}{l l l l l l l l l l} \hline \hline  & stable & stable & valid & unique & valency & atom & bond & bond & bond & time \\  & mol \(\%_{\uparrow}\) & atom\(\%_{\uparrow}\) & \(\%_{\uparrow}\) & \(W_{1\downarrow}\) & \(\mathrm{TV}_{\downarrow}\) & \(\mathrm{TV}_{\downarrow}\) & len \(W_{1\downarrow}\) & ang \(W_{1\downarrow}\) & s/mol.\(\downarrow\) \\ \hline _data_ & 99.9 & 99.9 & 99.8 & 100.0 &.001 &.001 &.025 &.000 & 0.05 & - \\ \hline EDM & 40.3 & 97.8 & 87.8 & 99.9 &.285 &.212 &.048 &.002 & 6.42 & 9.35 \\ GeoLDM & 57.9 & 98.7 & 100. & 100. &.197 &.099 &.024 &.009 & 2.96 & 8.96 \\ VoxMol & 75.0 & 98.1 & 93.4 & 99.6 &.254 &.033 &.024 &.002 & 0.64 & 7.55 \\ \hline FuncMol\({}_{\mathrm{dec}}\) & 69.7 & 95.3 & 100. & 77.5 &.268 &.035 &.028 &.003 & 2.13 & 0.29 \\ FuncMol & 69.7 & 98.8 & 100. & 95.3 &.245 &.109 &.052 &.003 & (.003) & 2.49 & 0.29 \\  & (\(\pm\)2) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)1) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)0) \\ \hline \hline \end{tabular}
\end{table}
Table 2: GEOM-drugs results, standard metrics w.r.t. test set for 10000 samples per model. \(\uparrow\)\(\downarrow\) indicate that higher/lower numbers are better. The row _data_ are randomly sampled molecules from the validation set. We report 1-sigma error bars over 3 sampling runs.

\begin{table}
\begin{tabular}{l l l l l l l l l l} \hline \hline  & single & median & ring sz & atms/mol & QED & SA & logp \\  & frag \(\%_{\uparrow}\) & energy\({}_{\downarrow}\) & \(\mathrm{TV}_{\downarrow}\) & \(\mathrm{TV}_{\downarrow}\) & \(\uparrow\) & \(\uparrow\) & \(\uparrow\) \\ \hline _data_ & 100. & 54.5 &.011 &.000 &.658 &.832 & 2.95 \\ \hline EDM & 42.2 & 951.3 &.976 &.604 &.472 &.514 & 1.11 \\ GeoLDM & 51.6 & 461.5 &.644 &.469 &.497 &.593 & 1.05 \\ VoxMol & 82.6 & 69.2 &.264 &.636 &.659 &.762 & 2.73 \\ \hline FuncMol\({}_{\mathrm{dec}}\) & 80.2 & 96.4 &.324 &.970 &.677 &.788 & 2.87 \\ FuncMol & 70.5 & (\(\pm\)1) & (\(\pm\)1) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)0) & (\(\pm\)0) \\ \hline \hline \end{tabular}
\end{table}
Table 3: GEOM-drugs results, additional metrics w.r.t. test set for 10000 samples per model. \(\uparrow\)\(\downarrow\) indicate that higher/lower numbers are better. The row _data_ are randomly sampled molecules from the validation set. We report 1-sigma error bars over 3 sampling runs.

### Results on CREMP

To showcase the scalability of FuncMol, we train it on a dataset of larger molecules. We choose the macrocyclic peptides of CREMP, that contains on average 74 atoms, making it challenging to train models using point-clouds. These molecules also pose serious limitations to voxel-based approaches as they require modeling a volume of \(24^{3}\) cubic Angstroms. We tried to train VoxMol on this dataset using the official implementation, but did not succeed: it takes around 10 hours per epoch on 4 A100 GPUs, while FuncMol takes less than 12 minutes per neural field epoch and 15s per denoiser epoch. We use the same code dimension and neural field architecture as in GEOM-drugs, therefore the computational training cost of FuncMol remains unchanged.

Figure 3 shows that FuncMol captures well the underlying distribution of macrocyclic conformations. We show the distribution of bond angles (\(\theta_{1}\), \(\theta_{2}\), \(\theta_{3}\)) and dihedrals (\(\phi\), \(\psi\), \(\omega\)) of both molecules from test set and generated molecules. We also show the KL-divergence between test and generated samples. Approximately 65% of the generated molecules were valid peptides (that is, we could extract a sequence of amino acids from the SMILES strings). The Ramachandran plots [94] show that FuncMol recovers the main modes of the distribution. We note that the bond angles and dihedrals distributions are learned without having any explicit priors on the structure of these peptides. Appendix H shows some generated macrocylic peptides. Finally, our model takes around 1.5s to generate a molecule. For reference, should VoxMol be trained successfully, it would take over a minute to sample a single molecule (assuming similar sampling parameters as in other datasets). This is a substantial speedup that showcases the potential of FuncMol to scale to even larger molecules.

## 6 Discussion

We introduce a new continuous representation of 3D molecules based on their atomic occupancy field and a score-based generative model operating on this representation. Each molecule is assigned a code that modulates a shared neural field. We demonstrate that we can build an all-atom generative model of 3D molecules, FuncMol, with state-of-the-art sampling time and competitive performance on challenging drug-like datasets. We believe that this model introduces a new paradigm for all-atom 3D modeling of molecules that has many useful properties, namely scalability, expressivity, and flexibility, as it can model various molecular design problems (involving structure, electron densities, etc.) with minor architecture changes. Future research directions include exploring different neural field architectures, adapt the model for conditional generation (e.g., structure conditioning) or model the molecular bonds alongside the atomic coordinates3. Moreover, the scalability of FuncMol can be a potential alternative for all-atom representations of large biomolecules.

Figure 3: Qualitative evaluation on CREMP following [84]. Left: Comparison of the bond angles (\(\theta_{1}\), \(\theta_{2}\), \(\theta_{3}\)) in each residue and dihedral distributions (\(\phi\), \(\psi\), \(\omega\)) for each residue from the reference test set (gray) and the generated samples (blue). KL divergence is calculated as \(\text{KL}(\text{test}\ ||\ \text{sampled})\). Right: Ramachandran plots [94] (colored by density where darker tones represent high density regions).

AcknowledgementsWe would like to thank the Prescient Design team for helpful discussions and Genentech's HPC team for providing a reliable environment to train and analyze models.

## References

* [1] Saeed Saremi and Aapo Hyvarinen. Neural empirical bayes. _JMLR_, 2019. (cit. on pp. 1, 2, 3, and 6)
* [2] Camille Bilodeau, Wengong Jin, Tommi Jaakkola, Regina Barzilay, and Klavs F Jensen. Generative models for molecular discovery: Recent advances and challenges. _Computational Molecular Science_, 2022. (cit. on p. 1)
* [3] Benoit Baillif, Jason Cole, Patrick McCabe, and Andreas Bender. Deep generative models for 3d molecular structure. _Current Opinion in Structural Biology_, 2023. (cit. on p. 1)
* [4] Emiel Hoogeboom, Victor Garcia Satorras, Clement Vignac, and Max Welling. Equivariant diffusion for molecule generation in 3d. In _ICML_, 2022. (cit. on pp. 1, 3, and 8)
* [5] Pedro O. Pinheiro, Joshua Rackers, Joseph Kleinhenz, Michael Maser, Omar Mahmood, Andrew Martin Watkins, Stephen Ra, Vishnu Sresht, and Saeed Saremi. 3d molecule generation by denoising voxel grids. In _NeurIPS_, 2023. (cit. on pp. 1, 3, 5, 6, 7, 8, 18, and 21)
* [6] Victor Garcia Satorras, Emiel Hoogeboom, and Max Welling. E (n) equivariant graph neural networks. In _ICML_, 2021. (cit. on pp. 1 and 3)
* [7] Mario Geiger and Tess Smidt. e3nn: Euclidean neural networks. _arXiv:2207.09453_, 2022. (cit. on p. 1)
* [8] Keyulu Xu, Weihua Hu, Jure Leskovec, and Stefanie Jegelka. How powerful are graph neural networks? _ICLR_, 2019. (cit. on p. 1)
* [9] Christopher Morris, Martin Ritzert, Matthias Fey, William L Hamilton, Jan Eric Lenssen, Gaurav Rattan, and Martin Grohe. Weisfeiler and leman go neural: Higher-order graph neural networks. In _AAAI_, 2019. (cit. on p. 1)
* [10] Sergey N Pozdnyakov and Michele Ceriotti. Incompleteness of graph convolutional neural networks for points clouds in three dimensions. _arXiv:2201.07136_, 2022. (cit. on p. 1)
* [11] Yiheng Xie, Towaki Takikawa, Shunsuke Saito, Or Litany, Shiqin Yan, Numair Khan, Federico Tombari, James Tompkin, Vincent sitzmann, and Srinath Sridhar. Neural fields in visual computing and beyond. _Computer Graphics Forum_, 2022. (cit. on p. 1)
* [12] Colin A Grambow, Hayley Weir, Christian N Cunningham, Tommaso Biancalani, and Kangway V Chuang. CREMP: Conformer-rotamer ensembles of macrocyclic peptides for machine learning. _arXiv:2305.08057_, 2023. (cit. on pp. 2, 7, and 18)
* [13] Simon Axelrod and Rafael Gomez-Bombarelli. Geom, energy-annotated molecular conformations for property prediction and molecular generation. _Scientific Data_, 2022. (cit. on pp. 2 and 18)
* [14] Kenneth O Stanley. Compositional pattern producing networks: A novel abstraction of development. _Genetic programming and evolvable machines_, 2007. (cit. on p. 2)
* [15] Eric R Chan, Marco Monteiro, Petr Kellnhofer, Jiajun Wu, and Gordon Wetzstein. pi-gan: Periodic implicit generative adversarial networks for 3d-aware image synthesis. In _CVPR_, 2021. (cit. on p. 2)
* [16] Kai Wang, Zhaopan Xu, Yukun Zhou, Zelin Zang, Trevor Darrell, Zhuang Liu, and Yang You. Neural network diffusion. _arXiv:2402.13144_, 2024. (cit. on p. 2)
* [17] Yilun Du, Katie Collins, Josh Tenenbaum, and Vincent Sitzmann. Learning signal-agnostic manifolds of neural fields. _NeurIPS_, 2021. (cit. on p. 2)
* [18] Zhiqin Chen and Hao Zhang. Learning implicit fields for generative shape modeling. In _CVPR_, 2019. (cit. on pp. 2 and 3)
* [19] Lars Mescheder, Michael Oechsle, Michael Niemeyer, Sebastian Nowozin, and Andreas Geiger. Occupancy networks: Learning 3d reconstruction in function space. In _CVPR_, 2019. (cit. on pp. 2, 3, and 5)
* [20] Jeong Joon Park, Peter Florence, Julian Straub, Richard Newcombe, and Steven Lovegrove. DeepSDF: Learning continuous signed distance functions for shape representation. In _CVPR_, 2019. (cit. on pp. 2, 3, and 4)* [21] Mateusz Michalkiewicz, Jhony K Pontes, Dominic Jack, Mahsa Baktashmotlagh, and Anders Eriksson. Implicit surface representations as layers in neural networks. In _ICCV_, 2019.
* [22] Vincent Sitzmann, Michael Zollhofer, and Gordon Wetzstein. Scene representation networks: Continuous 3d-structure-aware neural scene representations. _NeurIPS_, 2019.
* [23] Ben Mildenhall, Pratul P. Srinivasan, Matthew Tancik, Jonathan T. Barron, Ravi Ramamoorthi, and Ren Ng. NeRF: Representing scenes as neural radiance fields for view synthesis. In _ECCV_, 2020.
* [24] Zhengqi Li, Simon Niklaus, Noah Snavely, and Oliver Wang. Neural scene flow fields for space-time view synthesis of dynamic scenes. In _CVPR_, 2021.
* [25] Zeyuan Chen, Yinbo Chen, Jingwen Liu, Xingqian Xu, Vidit Goel, Zhangyang Wang, Humphrey Shi, and Xiaolong Wang. Videoinf: Learning video implicit neural representation for continuous space-time super-resolution. In _ICCV_, 2022.
* [26] Maziar Raissi, Paris Perdikaris, and George E Karniadakis. Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations. _Journal of Computational Physics_, 2019.
* [27] Yuan Yin, Matthieu Kirchmeyer, Jean-Yves Franceschi, Alain Rakotomamonjy, and patrick gallinari. Continuous PDE dynamics forecasting with implicit neural representations. In _ICLR_, 2023.
* [28] Nasim Rahaman, Aristide Baratin, Devansh Arpit, Felix Draxler, Min Lin, Fred Hamprecht, Yoshua Bengio, and Aaron Courville. On the spectral bias of neural networks. In _ICML_, 2019.
* [29] Vincent Sitzmann, Julien N. P. Martel, Alexander W. Bergman, David B. Lindell, and Gordon Wetzstein. Implicit neural representations with periodic activation functions. In _NeurIPS_, 2020.
* [30] Matthew Tancik, Pratul P. Srinivasan, Ben Mildenhall, Sara Fridovich-Keil, Nithin Raghavan, Utkarsh Singhal, Ravi Ramamoorthi, Jonathan T. Barron, and Ren Ng. Fourier features let networks learn high frequency functions in low dimensional domains. In _NeurIPS_, 2020.
* [31] Rizal Fathony, Anit Kumar Sahu, Devin Willmott, and J. Zico Kolter. Multiplicative filter networks. In _ICLR_, 2021.
* [32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes. _ICML_, 2014.
* [33] Emilien Dupont, Yee Whye Teh, and Arnaud Doucet. Generative models as distributions of functions. _AISTATS_, 2022.
* [34] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets. _NeurIPS_, 2014.
* [35] Jascha Sohl-Dickstein, Eric Weiss, Niru Maheswaranathan, and Surya Ganguli. Deep unsupervised learning using nonequilibrium thermodynamics. In _ICML_, 2015.
* [36] Emilien Dupont, Hyunjik Kim, S. M. Ali Eslami, Danilo Jimenez Rezende, and Dan Rosenbaum. From data to functa: Your data point is a function and you can treat it like one. In _ICML_, 2022.
* [37] Ziya Erkoc, Fangchang Ma, Qi Shan, Matthias Niessner, and Angela Dai. Hyperdiffusion: Generating implicit neural fields with weight-space diffusion. In _ICCV_, 2023.
* [38] Gene Chou, Yuval Bahat, and Felix Heide. Diffusion-sdf: Conditional generative modeling of signed distance functions. In _ICCV_, 2023.
* [39] Biao Zhang, Jiapeng Tang, Matthias Niessner, and Peter Wonka. 3dshape2vecset: A 3d shape representation for neural fields and generative diffusion models. _ACM Transactions on Graphics (TOG)_, 2023.
* [40] Aviv Navon, Aviv Shamsian, Idan Achituve, Ethan Fetaya, Gal Chechik, and Haggai Maron. Equivariant architectures for learning in deep weight spaces. In _ICML_, 2023.
* [41] Matthias Bauer, Emilien Dupont, Andy Brock, Dan Rosenbaum, Jonathan Richard Schwarz, and Hyunjik Kim. Spatial functa: Scaling functa to imagenet classification and generation. _arXiv:2302.03130_, 2023.
* [42] Luca De Luigi, Adriano Cardace, Riccardo Spezialetti, Pierluigi Zama Ramirez, Samuele Salti, and Luigi di Stefano. Deep learning on implicit neural representations of shapes. In _ICLR_, 2023.

* [43] Allan Zhou, Kaien Yang, Yiding Jiang, Kaylee Burns, Winnie Xu, Samuel Sokota, J Zico Kolter, and Chelsea Finn. Neural functional transformers. In _NeurIPS_, 2023. (cit. on p. 3)
* [44] Chelsea Finn, Pieter Abbeel, and Sergey Levine. Model-agnostic meta-learning for fast adaptation of deep networks. In _ICML_, 2017. (cit. on p. 3)
* [45] Niklas WA Gebauer, Michael Gastegger, and Kristof T Schutt. Generating equilibrium molecules with deep neural networks. _arXiv:1810.11347_, 2018. (cit. on p. 3)
* [46] Niklas Gebauer, Michael Gastegger, and Kristof Schutt. Symmetry-adapted generation of 3d point sets for the targeted discovery of molecules. _NeurIPS_, 2019. (cit. on p. 3)
* [47] Youzhi Luo and Shuiwang Ji. An autoregressive flow model for 3d molecular geometry generation from scratch. In _ICLR_, 2022. (cit. on p. 3)
* [48] Jonas Kohler, Leon Klein, and Frank Noe. Equivariant flows: exact likelihood generative learning for symmetric densities. In _ICML_, 2020. (cit. on p. 3)
* [49] Victor Garcia Satorras, Emiel Hoogeboom, Fabian Fuchs, Ingmar Posner, and Max Welling. E(n) equivariant normalizing flows. _NeurIPS_, 2021. (cit. on p. 3)
* [50] Danilo Rezende and Shakir Mohamed. Variational inference with normalizing flows. In _ICML_, 2015. (cit. on p. 3)
* [51] Lei Huang, Hengtong Zhang, Tingyang Xu, and Ka-Chun Wong. Mdm: Molecular diffusion model for 3d molecule generation. In _AAAI_, 2023. (cit. on p. 3)
* [52] Lemeng Wu, Chengyue Gong, Xingchao Liu, Mao Ye, and Qiang Liu. Diffusion-based molecule generation with informative prior bridges. _NeurIPS_, 2022. (cit. on p. 3)
* [53] Minkai Xu, Alexander S Powers, Ron O Dror, Stefano Ermon, and Jure Leskovec. Geometric latent diffusion models for 3d molecule generation. In _ICML_, 2023. (cit. on pp. 3 and 8)
* [54] Clement Vignac, Nagham Osman, Laura Toni, and Pascal Frossard. Midi: Mixed graph and 3d denoising diffusion for molecule generation. In _ECML_, 2023. (cit. on pp. 3, 7, 8, 10, 18, and 24)
* [55] Chenqing Hua, Sitao Luan, Minkai Xu, Zhitao Ying, Jie Fu, Stefano Ermon, and Doina Precup. Mudiff: Unified diffusion for complete molecule generation. In _Learning on Graphs Conference_, 2024. (cit. on p. 3)
* [56] Xingang Peng, Jiaqi Guan, Qiang Liu, and Jianzhu Ma. Moldiff: Addressing the atom-bond inconsistency problem in 3d molecule diffusion generation. In _ICML_, 2023. (cit. on pp. 3 and 24)
* [57] Miha Skalic, Jose Jimenez, Davide Sabbadin, and Gianni De Fabritiis. Shape-based generative modeling for de novo drug design. _Journal of chemical information and modeling_, 2019. (cit. on p. 3)
* [58] Matthew Ragoza, Tomohide Masuda, and David Ryan Koes. Learning a continuous representation of 3d molecular structures with deep generative models. _NeurIPS, MLSB Workshop_, 2020. (cit. on pp. 3 and 8)
* [59] Ewa Nowara, Pedro Pinheiro, Sai Mahajan, Omar Abul'atta, Andrew Watkins, Saeed Saremi, and Michael Maser. Nebula: Neural empirical bayes under latent representations for efficient and controllable design of molecular libraries. _ICML, Worshop on AI4Sciences_, 2024. (cit. on p. 3)
* [60] Matthew Ragoza, Tomohide Masuda, and David Ryan Koes. Generating 3D molecules conditional on receptor binding sites with deep generative models. _Chemical science_, 2022. (cit. on p. 3)
* [61] Xingang Peng, Shitong Luo, Jiaqi Guan, Qi Xie, Jian Peng, and Jianzhu Ma. Pocket2mol: Efficient molecular sampling based on 3D protein pockets. In _ICML_, 2022. (cit. on p. 3)
* [62] Jiaqi Guan, Wesley Wei Qian, Xingang Peng, Yufeng Su, Jian Peng, and Jianzhu Ma. 3D equivariant diffusion for target-aware molecule generation and affinity prediction. _ICLR_, 2023. (cit. on pp. 3 and 8)
* [63] Pedro O Pinheiro, Arian Jamasb, Omar Mahmood, Vishnu Sresht, and Saeed Saremi. Structure-based drug design by denoising voxel grids. _ICML_, 2024. (cit. on p. 3)
* [64] Ilia Igashov, Hannes Stark, Clement Vignac, Arne Schneuing, Victor Garcia Satorras, Pascal Frossard, Max Welling, Michael Bronstein, and Bruno Correia. Equivariant 3d-conditional diffusion model for molecular linker design. _Nature Machine Intelligence_, 2024. (cit. on p. 3)
* [65] Minkai Xu, Lantao Yu, Yang Song, Chence Shi, Stefano Ermon, and Jian Tang. Geodiff: A geometric diffusion model for molecular conformation generation. In _ICLR_, 2022. (cit. on p. 3)* [66] Bowen Jing, Gabriele Corso, Jeffrey Chang, Regina Barzilay, and Tommi Jaakkola. Torsional diffusion for molecular conformer generation. _NeurIPS_, 2022. (cit. on p. 3)
* [67] Yuyang Wang, Ahmed A. Elhag, Navdeep Jaitly, Joshua M. Susskind, and Miguel Angel Bautista. Generating molecular conformer fields, 2023. (cit. on p. 3)
* [68] Lin Li, Chuan Li, and Emil Alexov. On the modeling of polar component of solvation energy using smooth gaussian-based dielectric function. _Journal of Theoretical and Computational Chemistry_, 2014. (cit. on p. 3)
* [69] Michael J Willatt, Felix Musil, and Michele Ceriotti. Atom-density representations for machine learning. _The Journal of chemical physics_, 2019. (cit. on p. 3)
* [70] Gabriele Orlando, Daniele Raimondi, Ramon Duran-Romaa, Yves Moreau, Joost Schymkowitz, and Frederic Rousseau. Pyuul provides an interface between biological structures and deep learning algorithms. _Nature communications_, 2022. (cit. on p. 3)
* [71] Ethan Perez, Florian Strub, Harm de Vries, Vincent Dumoulin, and Aaron Courville. FiLM: Visual reasoning with a general conditioning layer. _AAAI_, 2018. (cit. on p. 4)
* [72] Matthew Ragoza, Tomohide Masuda, and David Ryan Koes. Learning a continuous representation of 3d molecular structures with deep generative models. In _Neurips, Structural Biology workshop_, 2020. (cit. on p. 5)
* [73] Saeed Saremi, Rupesh Kumar Srivastava, and Francis Bach. Universal smoothed score functions for generative modeling. _arXiv:2303.11669_, 2023. (cit. on p. 6)
* [74] Saeed Saremi, Ji Won Park, and Francis Bach. Chain of log-concave Markov chains. _ICLR_, 2024. (cit. on p. 6)
* [75] Herbert E Robbins. An empirical bayes approach to statistics. In _Breakthroughs in Statistics: Foundations and basic theory_. 1992. (cit. on p. 6)
* [76] Koichi Miyasawa. An empirical Bayes estimator of the mean of a normal population. _Bulletin of the International Statistical Institute_, 1961. (cit. on p. 6)
* [77] Saeed Saremi and Rupesh Kumar Srivastava. Multimeasurement generative models. _ICLR_, 2022. (cit. on p. 6)
* [78] Nathan C Frey, Dan Berenberg, Joseph Kleinbenz, Isidro Hotzel, Julien Lafrance-Vanasse, Ryan Lewis Kelly, Yan Wu, Arvind Rajpal, Stephen Ra, Richard Bonneau, Kyunghyun Cho, Andreas Loukas, Vladimir Gligorijevic, and Saeed Saremi. Protein discovery with discrete walk-jump sampling. In _ICLR_, 2024. (cit. on pp. 6 and 7)
* [79] Xiang Cheng, Niladri S. Chatterji, Peter L. Bartlett, and Michael I. Jordan. Underdamped Langevin MCMC: A non-asymptotic analysis. In _COLT_, 2018. (cit. on p. 7)
* [80] Matthias Sachs, Benedict Leimkuhler, and Vincent Danos. Langevin dynamics with variable coefficients and nonconservative forces: from stationary states to numerical methods. _Entropy_, 2017. (cit. on p. 7)
* [81] Zhenqin Wu, Bharath Ramsundar, Evan N Feinberg, Joseph Gomes, Caleb Geniesse, Aneesh S Pappu, Karl Leswing, and Vijay Pande. Moleculenet: a benchmark for molecular machine learning. _Chemical science_, 2018. (cit. on pp. 7 and 18)
* [82] Simon Axelrod and Rafael Gomez-Bombarelli. Geom, energy-annotated molecular conformations for property prediction and molecular generation. _Scientific Data_, 9(1):185, 2022. (cit. on p. 7)
* [83] Raghunathan Ramakrishnan, Pavlo O Dral, Matthias Rupp, and O Anatole Von Lilienfeld. Quantum chemistry structures and properties of 134 kilo molecules. _Scientific data_, 2014. (cit. on p. 7)
* [84] Colin A. Grambow, Hayley Weir, Nathaniel L. Diamant, Alex M. Tseng, Tommaso Biancalani, Gabriele Scalia, and Kangway V. Chuang. Ringer: Rapid conformer generation for macrocycles with sequence-conditioned internal coordinate diffusion. _arXiv_, 2023. (cit. on pp. 7 and 10)
* [85] Sreyas Mohan, Zahra Kadkhodaie, Eero P. Simoncelli, and Carlos Fernandez-Granda. Robust and interpretable blind image denoising via bias-free convolutional neural networks. In _ICLR_, 2020. (cit. on p. 7)
* [86] Arne Schneuing, Yuanqi Du, Charles Harris, Arian Jamasb, Ilia Igashov, Weitao Du, Tom Blundell, Pietro Lio, Carla Gomes, Max Welling, et al. Structure-based drug design with equivariant diffusion models. _preprint arXiv:2210.13695_, 2022. (cit. on p. 8)* [87] Noel M O'Boyle, Michael Banck, Craig A James, Chris Morley, Tim Vandermeersch, and Geoffrey R Hutchison. Open babel: An open chemical toolbox. _Journal of cheminformatics_, 2011. (cit. on p. 8)
* [88] Greg Landrum. Rdkit: Open-source cheminformatics software, 2016. (cit. on pp. 8 and 18)
* [89] Charles Harris, Kieran Didi, Arian R Jamasb, Chaitanya K Joshi, Simon V Mathis, Pietro Lio, and Tom Blundell. Benchmarking generated poses: How rational is structure-based drug design with generative models? _arXiv preprint arXiv:2308.07413_, 2023. (cit. on p. 8)
* [90] Anthony K Rappe, Carla J Casewit, KS Colwell, William A Goddard III, and W Mason Skiff. Uff, a full periodic table force field for molecular mechanics and molecular dynamics simulations. _Journal of the American chemical society_, 1992. (cit. on p. 8)
* [91] G Richard Bickerton, Gaia V Paolini, Jeremy Besnard, Sorel Muresan, and Andrew L Hopkins. Quantifying the chemical beauty of drugs. _Nature chemistry_, 2012. (cit. on p. 8)
* [92] Peter Ertl and Ansgar Schuffenhauer. Estimation of synthetic accessibility score of drug-like molecules based on molecular complexity and fragment contributions. _Journal of cheminformatics_, 2009. (cit. on p. 8)
* [93] Clement Vignac and Pascal Frossard. Top-n: Equivariant set and graph generation without exchangeability. _ICLR_, 2022. (cit. on p. 8)
* [94] GN t Ramachandran and V Sasisekharan. Conformation of polypeptides and proteins. _Advances in protein chemistry_, 23:283-437, 1968. (cit. on p. 10)
* [95] Xingang Peng, Jiaqi Guan, Qiang Liu, and Jianzhu Ma. MolDiff: Addressing the atom-bond inconsistency problem in 3D molecule diffusion generation. In Andreas Krause, Emma Brunskill, Kyunghyun Cho, Barbara Engelhardt, Sivan Sabato, and Jonathan Scarlett, editors, _Proceedings of the 40th International Conference on Machine Learning_, volume 202 of _Proceedings of Machine Learning Research_, pages 27611-27629. PMLR, 23-29 Jul 2023. (cit. on p. 10)
* [96] Olaf Ronneberger, Philipp Fischer, and Thomas Brox. U-net: Convolutional networks for biomedical image segmentation. In _MICCAI_, 2015. (cit. on p. 17)
* [97] Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization. In _ICLR_, 2019. (cit. on p. 18)
* [98] David Sehnal, Sebastian Bittrich, Mandar Deshpande, Radka Svobodova, Karel Berka, Vaclav Bazgier, Sameer Velankar, Stephen K Burley, Jaroslav Koca, and Alexander S Rose. Mol* Viewer: modern web app for 3D visualization and analysis of large biomolecular structures. _Nucleic Acids Research_, 2021. (cit. on p. 18)

## Appendix A Broader Impact Statement

This work introduces some technical advancements in unconditional 3D molecule generation, an important component of molecular design and pharmaceutical research. A key advantage of our model is that it scales to larger molecules unlike existing models and has at least one order magnitude faster sampling time. Although extensive validation through wet-lab experiments and clinical trials is necessary, successful developments in this area have the potential to enhance human health, impacting a wide number of fields such as drug discovery, biology, materials science to cite a few. As with any technology, ensuring safe, ethical, and accountable deployment of these models is necessary to guarantee a positive impact on society.

## Appendix B Implementation details

Here, we provide some more implementation details that complement Section 5.

**Conditional neural field.** The codes \(z\) are computed with an encoder that takes as input a low-resolution voxelized representation of the molecular field with grid dimension of \(N\times 16^{3}\). We use \(N=5\) for QM9, \(N=8\) for GEOM-drugs and \(N=6\) for CREMP. We use resolution of.5A to generate the low-resolution grid on QM9, 1A on GEOM-drugs and 1.667A for CREMP. Before

Figure 4: Auto-encoding approach for neural field representation. A voxelized representation of molecule is encoded int the latent space \(z\) with a 3D CNN. This representation is then decoded with a conditional MFN for any point \(x\) in space.

voxelizing the molecules, we first center the atoms around the tightest bounding box encapsulating the molecule, apply a random rotation to the atoms (each Euler angle rotated randomly between [0,2\(\pi\))) and normalize their coordinates to the range of \([-1,1]\). The encoder is a 3D CNN containing 4 residual blocks (number of hidden units 256, 512, 1024, 2048 for each block), where each block contains 3 convolutional layers followed by BatchNorm, ReLU and pooling layers (we use max pooling on the first three blocks and average pooling on the last one). The encoder has 145M on QM9 and 229M on GEOM-drugs and CREMP. In the case of \(\text{FuncMol}_{\text{dec}}\), we do not use any encoder and directly optimize the codes \(z\), one for each molecule in the dataset.

The neural field and codes are optimized over a free-form discretization grid \(\mathcal{X}\), that changes at each iteration. For each training step, we sample a random training molecule and randomly pick \(N=4000\) points, half of the points are taken out of an uniform discretization grid of resolution.25A, and the remaining points are sampled equally across cubes of size 3\(\times\)3\(\times\)3 and resolution.25A, centered on each atom in the molecule. We found that this choice helped speed up training. For each point, we compute the atomic occupancy value for each atom using Equation (1).

The parameters of the conditional neural field are optimized with Adam. For \(\text{FuncMol}\), we use a learning rate of \(10^{-4}\) for the encoder and \(5\times 10^{-4}\) for the decoder using a node of 2 A100 GPUs with a batch size of 96 per GPU. For \(\text{FuncMol}_{\text{dec}}\), we efficiently scaled auto-decoding to large datasets by optimizing the codes with SparseAdam, using a learning rate \(10^{-3}\). The decoder optimizer is Adam with a learning rate of \(10^{-3}\). We train the models for 900 epochs on QM9, 300 epochs on GEOM-drugs and 1000 epochs on CREMP. Algorithm 1 and Algorithm 2 provide pseudocodes for learning the conditional neural field decoder and the latent codes (\(\text{FuncMol}_{\text{dec}}\)) or the encoder (FuncMol).

``` Input :\(\mathcal{D}\) dataset of molecular fields, \(\{z_{v}\gets 0\}_{v\in\mathcal{D}}\) codes, \(\phi\leftarrow\phi_{0}\) conditional MFN  parameters; \(N\) number of points to sample whilenot convergeddo forbatch\(\mathcal{B}\subset\mathcal{D}\)do  Sample a discretization grid \(\mathcal{X}\) and compute occupancy \(v(x),\forall v\in\mathcal{B},\forall x\in\mathcal{X}\) \(\ell_{\text{dec}}(\phi,\{z_{v}\}_{v\in\mathcal{B}},\mathcal{X})=\sum_{v\in \mathcal{B},x\in\mathcal{X}}\|f_{\phi}(x,z_{v})-v(x)\|_{2}^{2}\) \(\{z_{v}\}_{v\in\mathcal{B}}\leftarrow\{z_{v}\}_{v\in\mathcal{B}}-\eta_{z} \nabla_{z}\ell_{\text{dec}}(\phi,\{z_{v}\}_{v\in\mathcal{B}},\mathcal{X})\); /* Update codes */ \(\phi\leftarrow\phi-\eta_{\phi}\nabla_{\phi}\ell_{\text{dec}}(\phi,\{z_{v}\}_{v \in\mathcal{B}},\mathcal{X})\); /* Update decoder weights */ ```

**Algorithm 1**Auto-decoding conditional neural field training pseudo-code--Equation (2)

**Modulation code denoiser \(\hat{z}_{\theta}\).** Once the modulation codes and the conditional neural field are learned, we pre-process the codes to have zero mean and unit variance, then learn a denoiser in normalized space using \(\sigma=1.2\) on GEOM-drugs and CREMP and \(\sigma=2\) for QM9, following Algorithm 3.

Our denoiser has a projection linear layer (that embed the 1024 / 2048 code into a 6144 space) followed by several residual blocks, where each block contains (in this order): group normalization layer, ReLU non-linearity, fully-connected layer, normalization layer, ReLU non-linearity, drop-out with rate 0.3 for \(\text{FuncMol}_{\text{dec}}\) or none for \(\text{FuncMol}\) and another fully-connected layer. We then add one final layer to go back to the original 1024 / 2048 code space. We use similar "skip-connections" as in the MLP denoiser of [33], adapted from 2D U-Net architectures [96]. For GEOM-drugs and CREMP, we consider a model with 1.9B parameters (12 residual blocks, 6144 hidden units). For QM9, we train a model of size 445M parameters (6 residual blocks, 4096 hidden units). The modelsare trained with batch size 2048 on a single A100 GPU for 2500 epochs with AdamW [97] (learning rate \(10^{-3}\), weight decay \(10^{-2}\)) and exponential moving average (EMA) with a decay of 9999. As [36], we use the following learning rate schedule: we warm-up the learning rate linearly from 0 to 3e-4 for the first 4000 iterations, then decay it proportionally to the square root of the iteration count. The pseudo-code is given in Algorithm 3.

``` Input :\(\mathcal{D}_{z}=\{z_{v}\}_{v\in\mathcal{D}}\) normalized codes, denoiser \(\hat{z}_{\theta}\) while not converged do for batch \(\mathcal{B}\subset\mathcal{D}_{z}\)do \(y\gets z+\varepsilon,\quad\varepsilon\sim\mathcal{N}(0,\sigma^{2}I_{d})\) \(\ell_{\text{denoiser}}(\theta,\mathcal{B})=\sum_{z\in\mathcal{B}}\|z-\hat{z} _{\theta}(y)\|_{2}^{2}\) \(\theta\leftarrow\theta-\nabla_{\theta}\ell_{\text{denoiser}}(\theta,\mathcal{ B}),\) \(\theta_{\text{EMA}}\leftarrow\text{EMA}_{0,9999}(\theta_{\text{EMA}},\theta)\) ```

**Algorithm 3**Denoiser training pseudo-code - Equation (6)

**Sampling.** The walk-jump sampling approach is very flexible and allows us to configure sampling in different ways. For example, we can choose the number of walk steps between jumps, the maximum number of walk steps per chain or the number of chains run in parallel. Different sampling hyperparameters can change the statistics of samples, e.g., samples that are close to each other on a sample chain will likely be similar molecules. Therefore, we decided to fix some sampling hyperparameters for benchmarking purposes. In all our quantitative experiments, we generate samples in the following way: (i) we initialize all the chains \(y_{0}\) in parallel, (ii) we "walk" \(K\) steps with Langevin MCMC to sample smoothed codes \(y_{K}\), and (iii) we "jump" with the denoiser (in a single step) to get the clean codes \(\hat{z}_{K}\). In practice, we sampled 10000 molecules using 1000 MCMC steps for both QM9 and GEOM-drugs, and 10000 steps for CREMP on a single A100 GPU.

``` Input \(\delta\) (step size), \(\gamma\) (friction), \(K\) (steps), denoiser \(\hat{z}_{\theta}\) trained at noise level \(\sigma\). \(y_{0}\sim\mathcal{U}_{d}(\min_{z\in\mathcal{D}_{z},i\in\{1\cdots d\}}z_{i}, \max_{z\in\mathcal{D}_{z},i\in\{1\cdots d\}}z_{i})+\mathcal{N}(0,\sigma^{2} I_{d})\) \(u_{0}\gets 0\) for\(k=0,\ldots,K-1\)do \(y_{k+1/2}\gets y_{k}+\frac{\delta}{2}u_{k}\) \(g\gets g_{\theta}(y_{k+1/2})\triangleq(\hat{z}_{\theta}(y_{k+1/2})-y_{k+ 1/2})/\sigma^{2}\); /* score Equation (5) */ \(u_{k+1/2}\gets u_{k}+\frac{\delta}{2}g\) \(u_{k+1}\leftarrow\exp(-\gamma\delta)u_{k+1/2}+\frac{\delta}{2}g+\sqrt{\big{(}1- \exp(-2\gamma\delta)\big{)}}\varepsilon,\quad\varepsilon\sim\mathcal{N}(0,I_{d})\) \(y_{k+1}\gets y_{k+1/2}+\frac{\delta}{2}u_{k+1}\) Output \(\hat{z}_{K}\leftarrow\hat{z}_{\theta}(y_{K})\) ; /* jump step (denoising) */ ```

**Algorithm 4**Sampling pseudo-code - the For loop corresponds to walk steps

**From codes to molecules.** After generating modulation codes, we need to extract the atom types and coordinates from them. This is a constrained optimization problem, and we provide a simple algorithm to find its solution: (i) render a voxel grid representation of the molecule at resolution of.25A (tensors of dimensions \(5\times 32\times 32\times 32\), \(8\times 64\times 64\times 64\) and \(6\times 96\times 96\times 96\) on QM9, GEOM-drugs and CREMP, respectively), (ii) find the peaks of the voxel grids--they correspond to a discretized version of the atomic coordinates--with a simple \(3\times 3\times 3\) kernel, and (iii) find the local optima of the atomic coordinates with the approach described in Section 3.3. Our continuous refinement approach leverages L-BFGS with learning rate 1.0 and is batched across 100 molecules of same size.

**Assets used in this work.** Our code is available at https://github.com/prescient-design/funcmol. Our neural field code is based on the open source implementation of MFN from [31] and the conditional version from [27]. Our code for walk-jump sampling is based on the open source implementation of VoxMol from [5]. Our metrics are computed using code from [54] and RDKit [88]. Our datasets _GEOM-drugs_[13], _CREMP_[12] and QM9 [81] are downloaded from the corresponding webpages. We use the protein visualization tool of [98]. All these assets are available publicly and to our knowledge have a CC-BY 4.0 license.

Analysis of the latent space

We perform three experiments to qualitatively explore the learned manifold and show empirically that it is well structured.

First, we pick several pairs of molecules and show the interpolation trajectory in latent modulation space. We project the interpolated codes back to the learned manifold of molecules via a noise/denoise operation. Figure 5 illustrates six trajectories, where we observe that molecules close in latent space share similar structure.

Second, we show t-SNE plots to demonstrate that the modulation space \(z\) encodes molecular properties of QM9. For four different properties, we use t-SNE to embed 400 molecules divided equally between those with the highest and those with the lowest property values. Figure 6 shows that molecules with similar property values cluster together.

Finally, we evaluate the latent codes on downstream tasks. We train a linear regression model on frozen latent codes (a.k.a. linear probing) to see how the learned modulations correlate with different properties. Figure 7 shows the scatter plots and Spearman correlation for four different properties. We observe that the codes are highly predictive of the considered properties, despite being trained in an unsupervised fashion.

## Appendix D Diffusion baseline

We consider one additional model, \(\text{FuncMol}_{\mathrm{dec},\ \mathrm{diff}}\) for the auto-decoding setting. This model is similar to \(\text{FuncMol}_{\mathrm{dec}}\) but we sample codes with a diffusion model instead of walk-jump sampling. We use the same neural field and modulation codes as in \(\text{FuncMol}_{\mathrm{dec}}\) and we train a multi-level denoiser (with 1000 levels of noise) instead of a single-level one. The modulation codes are sampled like in standard diffusion models: we start from a Gaussian noise and iteratively apply the denoiser until we arrive on clean codes. We tried to train the diffusion variant of the model on GEOM-drugs,

Figure 5: Interpolation in the latent modulation space for different pairs of molecules from GEOM-drugs. Each interpolated codes is protected back to the learned manifold of molecules via a noise/denoise operation. \(\text{FuncMol}\) produces semantically meaningful patterns in the interpolated space and we observe that molecules close in latent space share similar structure.

but we were not successful (the generated molecules had very low stability). Table 4 shows the performance of the diffusion model relative to our other models. It performed worse than walk-jump sampling but was still able to generate good quality molecules.

\begin{table}
\begin{tabular}{l c c c c c c c c c c} \hline \hline  & stable & stable & valid & unique & valency & atom & bond & bond & bond & time \\  & mol \(\%_{\uparrow}\) & atom\(\%_{\uparrow}\) & \(\%_{\uparrow}\) & \(\%_{\uparrow}\) & \(W_{1\downarrow}\) & \(\mathrm{TV}_{\downarrow}\) & \(\mathrm{TV}_{\downarrow}\) & len \(W_{1\downarrow}\) & ang \(W_{1\downarrow}\) & s/mol\(\downarrow\) \\ \hline FuncMol & 89.4 & 99.1 & 100. & 93.1 &.021 &.012 &.006 &.004 & 1.49 & 0.05 \\ FuncMol\({}_{\mathrm{dec}}\) & 88.6 & 99.2 & 100. & 81.1 &.022 &.066 &.032 &.006 & 1.21 & 0.05 \\ FuncMol\({}_{\mathrm{dec},\,\mathrm{diff}}\) & 70.8 & 97.3 & 95.8 & 81.1 &.007 &.034 &.021 &.006 & 1.25 & 0.07 \\ \hline \hline \end{tabular}
\end{table}
Table 4: Comparing walk-jump sampling and diffusion model on QM9 results (10000 samples per model). \(\uparrow\)\(\downarrow\) indicate that higher/lower numbers are better. The row data are randomly sampled molecules from the validation set.

Figure 6: t-SNE plots of latent modulations codes of QM9 molecules for different molecular properties. For each plot, we pick 200 molecules from validation set with high value of a property (blue) and 200 with low value (red). We show results for four properties: (a) heat capacity (\(C_{v}\)), (b) internal energy (\(U_{0}\)), (c) isotropic polarization (\(\alpha\)) and (d) dipole moment (\(\mu\)).

Figure 7: Performance of linear regression model (a.k.a linear probing) trained on modulation codes to predict molecular properties on QM9. We show the scatter plots and Spearman correlation for four different properties: (a) heat capacity (\(C_{v}\)), (b) internal energy (\(U_{0}\)), (c) isotropic polarization (\(\alpha\)) and (d) dipole moment (\(\mu\)).

Ablations

### Reconstruction quality

We analyze the reconstruction quality of the fields and molecules we compressed with latent codes.

Field reconstruction.We report in Table 5 the reconstruction performance of the molecular fields using our conditional MFN architecture and learned codes.

Molecule reconstruction.To make more sense out of these raw reconstruction metrics, we show that the 3D molecules decoded from learned training codes are valid and stable molecules. This means that we successfully compressed the training data into low-dimensional latent vectors via our field-based representation. Table 6 reports metrics of molecules decoded from the learned training codes for GEOM-drugs and QM9. For each dataset, we display the metrics of the training molecules, the molecules decoded from our training codes and the molecules derived from a voxelized representation of the field at a resolution of.25A. We observe that the molecules rendered from codes have better metrics than those derived from voxels showing the validity of our new representation. These results are an upper bound to the results in Table 2.

### Atomic coordinate refinement

A big advantage of using neural fields is that we can represent signals, here molecules, in continuous space rather than in discrete space as in voxel representations. The continuous refinement introduced in Section 3.3 improves the quality of the molecules by finding more precise atomic coordinates. Table 7 shows the improvement of this continuous refinement over the refinement used in [5] that operates in discrete space: by going to continuous space, we overcome the limitations of discrete grids and substantially improve the stability of the molecules and the angle between bonds.

### Neural field robustness to noise

Here, we analyze how the neural field is robust to noise on the modulation code space. Figure 8 illustrates how molecular stability and the distance between the distribution of bond angles change as we increasingly add noise to the codes. Each point consists of the average of the metric over 4000 random modulation codes from the validation set. Interestingly, the neural field is quite robust to noise as we see that the metrics unchanged even at a reasonable amount of noise. We believe that this code robustness to noise helps better learn the denoiser.

\begin{table}
\begin{tabular}{l l c c c c c c c} \hline \hline \multirow{2}{*}{dset} & \multirow{2}{*}{type} & \multirow{2}{*}{stable} & \multirow{2}{*}{valid} & \multirow{2}{*}{valid} & \multirow{2}{*}{valency} & \multirow{2}{*}{atom} & \multirow{2}{*}{bond} & \multirow{2}{*}{bond} \\  & & & \(\text{mol}\,\%_{\uparrow}\) & & & & & & \\  & & & & & & & & \\ \hline GEOM-drugs & _data_ & 99.9 & 99.9 & 100. &.001 &.025 &.000 &.05 \\  & code & 83.1 & 99.5 & 100. &.188 &.007 &.026 &.004 &.19 \\  & voxel & 83.7 & 99.4 & 93.8 &.252 &.006 &.026 &.001 &.43 \\ \hline QM9 & _data_ & 98.7 & 99.8 & 98.9 &.001 &.003 &.000 &.000 &.12 \\  & code & 95.5 & 99.7 & 100. &.010 &.009 &.003 &.001 &.16 \\  & voxel & 92.5 & 99.4 & 98.8 &.017 &.009 &.002 &.002 &.30 \\ \hline \hline \end{tabular}
\end{table}
Table 6: Ablation: molecule reconstruction (sample of 4k).

\begin{table}
\begin{tabular}{l l l} \hline \hline dset & MSE \(\downarrow\) & PSNR \(\uparrow\) \\ \hline GEOM-drugs & \(2.8\cdot 10^{-6}\) & 55.5 \\ CREMP & \(2.9\cdot 10^{-6}\) & 55.4 \\ QM9 & \(6.1\cdot 10^{-6}\) & 52.1 \\ \hline \hline \end{tabular}
\end{table}
Table 5: Ablation: field reconstruction (whole training set).

### Number of walk steps

Table 8 shows how the quality of molecules changes as we increase the number of walk steps \(K\) in the walk-jump sampling for FuncMol on GEOM-drugs. In this experiment, we sample 2000 samples and compute metrics w.r.t the validation set. First, we observe that some metrics improve (e.g., molecular stability) while other get worse (e.g., uniqueness). Second, we observe that the walk-jump chain is extremely stable, allowing us to perform as much as 50000 MCMC steps in the chain without breaking it. Finally, sampling time does not increase significantly: going from 500 to 50000 steps only results in a 10\(\times\) increase in sampling time (this is because the sampling bottleneck is on finding the atomic coordinates).

\begin{table}
\begin{tabular}{c c c c c c c c c|c} \hline \hline \multirow{2}{*}{\(K\) (n steps)} & \multirow{2}{*}{stable} & \multirow{2}{*}{stable} & \multirow{2}{*}{unique} & \multirow{2}{*}{valency} & \multirow{2}{*}{atom} & \multirow{2}{*}{bond} & \multirow{2}{*}{bond} & \multirow{2}{*}{bond} & \multirow{2}{*}{avg. t} \\  & & & & & & & & & \\ \hline
500 & 52.8 & 98.1 & 99.8 &.235 &.116 &.031 &.003 & 2.58 &.279 \\
1000 & 68.8 & 98.8 & 97.4 &.246 &.109 &.051 &.003 & 2.51 &.298 \\
2000 & 77.1 & 99.0 & 93.7 &.247 &.108 &.068 &.003 & 2.86 &.337 \\
5000 & 80.6 & 99.0 & 85.6 &.247 &.150 &.091 &.003 & 3.37 &.456 \\
10000 & 82.4 & 99.0 & 77.9 &.247 &.162 &.109 &.003 & 3.52 &.654 \\
20000 & 83.8 & 98.9 & 73.6 &.252 &.154 &.130 &.004 & 3.52 & 1.05 \\
50000 & 84.9 & 99.0 & 66.6 &.259 &.166 &.158 &.003 & 3.44 & 2.24 \\ \hline \hline \end{tabular}
\end{table}
Table 8: Ablation on the number of walk steps \(K\) on GEOM-drugs. Metrics computed with 2000 generated samples on test reference set.

Figure 8: Ablation: code robustness to noise on GEOM-drugs (blue) and QM9 (red). Stable molecule (a) and bond angle distance (b) metrics as we increasingly add noise to the codes. Metrics are computed with 4000 generated samples on validation reference set.

\begin{table}
\begin{tabular}{c c c c c c c c c|c} \hline \hline \multirow{2}{*}{\(K\) (n steps)} & \multirow{2}{*}{stable} & \multirow{2}{*}{unique} & \multirow{2}{*}{valency} & \multirow{2}{*}{atom} & \multirow{2}{*}{bond} & \multirow{2}{*}{bond} & \multirow{2}{*}{bond} & \multirow{2}{*}{bond} & \multirow{2}{*}{avg. t} \\  & & & & & & & & & \\ \hline
500 & 52.8 & 98.1 & 99.8 &.235 &.116 &.031 &.003 & 2.58 &.279 \\
1000 & 68.8 & 98.8 & 97.4 &.246 &.109 &.051 &.003 & 2.51 &.298 \\
2000 & 77.1 & 99.0 & 93.7 &.247 &.108 &.068 &.003 & 2.86 &.337 \\
5000 & 80.6 & 99.0 &

[MISSING_PAGE_EMPTY:23]

[MISSING_PAGE_FAIL:24]

[MISSING_PAGE_EMPTY:25]

Figure 14: Two single MCMC chains generated by FuncMol, initialized randomly with different seeds (seen from left to right, top to bottom). Molecules are generated after each 200 ”walk” steps.

Figure 13: Generated samples from FuncMol trained on CREMP.

## Appendix I NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: we clearly state in the introduction in Section 1 our contributions and scope. Our paper does not make any important assumptions and we provide a discussion in Section 6. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: We provide a discussion on our model including limitations in Section 6 Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof?Answer: [NA]

Justification: we do not provide theoretical results in this paper. Guidelines:

* The answer NA means that the paper does not include theoretical results.
* All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced.
* All assumptions should be clearly stated or referenced in the statement of any theorems.
* The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.
* Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.
* Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: We detail all the hyperparameters, architectures and model training details in Appendix B. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code**Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: We will provide our code at https://github.com/prescient-design/funcmol. We provide all the hyperparameters used to run our experiments in Appendix B. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: we provide a succinct description of the experimental setting in Section 5 and provide more details in Appendix B. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: we report 1-sigma error bars after repeating 3 times sampling in our main Tables 2 and 3. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).

* The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)
* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: We report in Appendix B the compute resources required for for the experimental runs. In addition, we had access to around 20 A100 GPUs on an internal cluster for prototyping over the last 5 months. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: we reviewed the Code Of Ethics and confirm that the research in the paper conform to it. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [Yes] Justification: cf Appendix A Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.

* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: the paper poses no such risks. the considered datasets are commonly used to benchmark generative models in the field. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: we included a discussion of all assets used in Appendix B. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.

* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [Yes] Justification: We provide all the required information to reproduce our models and the assets we used in Appendix B. Our license is CC-BY 4.0. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: the paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: the paper does not involve crowdsourcing nor research with human subjects Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.