# Reining Generalization in Offline Reinforcement Learning via Representation Distinction

 Yi Ma

College of Intelligence and Computing

Tianjin University

mayi@tju.edu.cn

&Hongyao Tang

Universite de Montreal

Mila

tang.hongyao@mila.quebec

&Dong Li

Noah's Ark Lab, Huawei Technology

dongleecsu@gmail.com

&Zhaopeng Meng

College of Intelligence and Computing

Tianjin University

mengzp@tju.edu.cn

Corresponding author.

###### Abstract

Offline Reinforcement Learning (RL) aims to address the challenge of distribution shift between the dataset and the learned policy, where the value of out-of-distribution (OOD) data may be erroneously estimated due to overgeneralization. It has been observed that a considerable portion of the benefits derived from the conservative terms designed by existing offline RL approaches originates from their impact on the learned representation. This observation prompts us to scrutinize the learning dynamics of offline RL, formalize the process of generalization, and delve into the prevalent overgeneralization issue in offline RL. We then investigate the potential to rein the generalization from the representation perspective to enhance offline RL. Finally, we present Representation Distinction (RD), an innovative plug-in method for improving offline RL algorithm performance by explicitly differentiating between the representations of in-sample and OOD state-action pairs generated by the learning policy. Considering scenarios in which the learning policy mirrors the behavioral policy and similar samples may be erroneously distinguished, we suggest a dynamic adjustment mechanism for RD based on an OOD data generator to prevent data representation collapse and further enhance policy performance. We demonstrate the efficacy of our approach by applying RD to designed backbone algorithms and widely-used offline RL algorithms. The proposed RD method significantly improves their performance across various continuous control tasks on D4RL datasets, surpassing several state-of-the-art offline RL algorithms.

## 1 Introduction

Reinforcement learning (RL) is a machine learning paradigm centered on training intelligent agents to make decisions through interactions with an environment. In this learning process, an agent develops a policy--a mapping from states to actions--via trial and error, with the goal of maximizing cumulative rewards over time. However, acquiring interaction data in many real-world applications can be expensive, time-consuming, or even hazardous. This spurred the advancement of offline Reinforcement Learning, which has garnered considerable interest in the research community due to its ability to learn effective policies from pre-existing data collected by unknown behavioral policywithout necessitating online interactions with the environment. Offline RL can result in substantial savings in resources, time, and the risk associated with online exploration.

Despite its appealing potential, offline RL encounters challenges in learning optimal policies from limited and suboptimal datasets. The primary challenge in offline RL is the distribution shift between the dataset and the learned policy. As the agent updates its policy, it may come across out-of-distribution (OOD) state-action pairs absent from the limited support of the fixed offline dataset [1]. Conventional RL algorithms, such as SAC [2] or TD3 [3], could yield overly optimistic Q-value estimations for these unseen state-action pairs due to overgeneralization, leading to catastrophic performance. Existing methods in offline RL seek to address this challenge by incorporating techniques like policy constraint [4; 5; 6; 7], conservative value estimates, [8; 9], and uncertainty estimation [10; 11; 12].

Recently, [13] elucidated that the ability of existing offline reinforcement learning (RL) methods to handle OOD actions is significantly attributed to their impact on the learned representations of state-action pairs. The learned representation can capture the underlying structure and essential aspects of the state-action space, enabling the agent to identify similarities and patterns across various state-action pairs, thus improving agent's learning efficacy and generalization capacity. Although there are a few works [14] also study representation learning in offline RL, they focus on how different kinds of pretrained representation matter in downstream policy learning, neglecting the understanding of the essential interplay between representation and policy during the offline co-learning process.

In this paper, we first present a view dubbed Backup-Generalization Cycle to gain a tangible comprehension of how a typical offline RL algorithm learns. We subsequently formalize how generalization happens, and discuss the overgeneralization issue prevalent in offline RL. Finally, we introduce a novel method called Representation Distinction (RD) to mitigate overgeneralization from in-sample state-action pairs to OOD ones. Specifically, we distinctly differentiate the data sourced from the dataset and the data generated by the learning policy from the representation perspective. In cases where the learning policy's performance aligns with the behavioral policy and the generated data largely overlaps with the dataset, we devise an OOD data generator to produce data with lower Q-values than the current policy. We then gradually shift our focus from differentiating in-sample data and data generated by the learning policy to differentiating data generated by the learning policy and data generated by the OOD actor in the representation space, preventing similar samples from being erroneously distinguished.

To demonstrate the efficacy of our proposed RD method in enhancing offline RL policy performance by reining the generalization, we apply it to two backbone algorithms, which are modified versions of the original SAC and TD3 algorithms by incorporating an ensemble of critics and an uncertainty regularization term in the policy update process. By integrating RD into these simple algorithms, our proposed method RD can improve the performance of the backbone agents on D4RL datasets across various continuous control tasks and outperforms several state-of-the-art offline RL algorithms. We also apply RD on two widely-used baselines TD3BC and CQL and improve their performance significantly. In-depth analysis based on visualization and statistical results that demonstrates the efficacy of RD in obtaining more differentiable representation compared to its variants is also provided.

The main contributions of this work can be summarized as follows:

* We introduce a view called Backup-Generalization Cycle to foster an understanding of typical offline value function learning, and highlights the necessity of reining generalization to enhance offline RL.
* We proposed a practical plug-in method Representation Distinction (RD) from the perspective of representation to enhance the performance of offline RL methods by inhibiting overgeneralization among state-action pairs sourced from different distributions.
* We evaluate the effectiveness of RD by applying it to designed backbone algorithms and existing widely-used algorithms and enhance their performance significantly.

## 2 Related Works

Offline RLOffline RL algorithms strive to train RL agents using pre-collected datasets. Nevertheless, the distribution shift between the behavior policy and the policy being learned may lead to issues, as OOD actions are sampled from the learned policy and incorporated into the learned critic. To address this challenge, various approaches have been proposed. Some earlier methods aim to constrain the learned policy to remain close to the behavior policy, which can be accomplished through explicit policy regularization [4; 5; 6], implicit policy constraints [15; 16; 17; 18; 19], or by employing auxiliary behavioral cloning losses [7]. Alternative approaches penalize the Q-value of OOD actions to discourage their selection [8; 9; 10; 11; 12]. Moreover, model-based methods that train with conservative penalties have been suggested [20; 21; 22; 23; 24; 25].

Representation in Offline RL.Prior research has aimed to analyze various aspects of the representations induced by TD-based methods using function approximation, predominantly in the standard online RL setting [26; 27; 28; 29; 30]. More recently, this line of inquiry has emerged in the offline RL setting [31; 32; 33; 34; 13]. [31] investigates which representations can result in stable convergence of TD in a linear setting. [32; 33] explore the learning dynamics of Q-learning in an overparameterized setting, observing excessively low-rank and aliased feature representations at the fixed points identified by TD-learning. [34] studies the extent of impact of different interventions on the causal link between the effective rank and offline RL agent performance and points out that there is no strong relationship between them. [13] highlights that a substantial portion of the benefits of existing offline RL approaches, which aim to avoid OOD actions, actually originates from their effects on the learned representations. The authors also identify specific metrics that facilitate effective evaluation of the quality of the learned representation. [14] pretrain the representation using different auxiliary loss and then fix the representation to apply it to downstream policy learning. Nevertheless, a thorough examination of the explicit representation distinction between in-sample and OOD state-action pairs in the context of offline RL is lacking. Our approach promotes orthogonality between the representation vectors of in-sample and OOD data, offering a more practical solution for inhibiting overgeneralization, thus enhancing offline RL.

## 3 Preliminary

Markov Decision Process (MDP) is a mathematical framework that models decision-making processes in stochastic environments. It is defined by a tuple \((S,A,P,R,\gamma)\), where \(S\) is the set of states, \(A\) is the set of actions, \(P\) is the state transition probability function, \(R\) is the reward function, and \(\gamma\) is the discount factor. Q-learning is the major approach for obtaining the optimal \(\pi(s)\), which learns a Q-value function \(Q(s,a)\) that represents the expected cumulative discounted rewards when starting from the state \(s\) taking the action \(a\) and executing the policy \(\pi\) thereafter. the Q-value function is evaluated by iterating the Bellman operator as \(\mathcal{T}Q(s,a)=\mathbb{E}_{s^{\prime}\sim P(\cdot|s,a)}\left[r(s,a)+\gamma \mathbb{E}_{a^{\prime}\sim\pi(s^{\prime})}Q\left(s^{\prime},a^{\prime}\right)\right]\). The goal of RL is to find an optimal policy \(\pi(s)\) that maximizes the cumulative discounted rewards.

Offline Reinforcement Learning [1], aims to learn a policy from a fixed dataset of interaction samples, without further interaction with the environment. The dataset \(\mathcal{D}\) consists of transition tuples \((s,a,r,s^{\prime})\) collected from interactions between one or multiple behavior policies and the environment. The goal is to learn an optimal policy using only this dataset.

To deal with large state-action space, deep RL resorts to deep neural networks for function approximation. Typically, a Q-network parameterized by \(\phi\) can be viewed as \(Q_{\phi}(s,a)=\mathbf{w}^{\top}\Phi(s,a)\), where \(\Phi(s,a)\in\mathbb{R}^{d}\) is regarded as the representation obtained by the penultimate layer of Q-network while \(\mathbf{w}\in\mathbb{R}^{d}\) is the linear weight [35; 36; 33; 13]. In conventional online and offline RL learning process, the representation and the linear weight learn together. A few recent works[37; 38; 39; 40] also introduce auxiliary objectives to strengthen or regularize the representation with different purposes. We use this view for the presentation of our analysis and proposed method in the following sections.

## 4 Reining Generalization in Offline RL

In this section, we focus on the learning dynamics of offline RL. First, we present a view called Backup-Generalization Cycle (Sec. 4.1) to gain a tangible comprehension of how a typical offline RL algorithm learns. We then take a further step to formalize how generalization happens, and discuss the overgeneralization issue in offline RL (Sec. 4.2). Finally, we propose the idea of kernel control to address the overgeneralization issue (Sec. 4.3), with the practical implementation deferred to Sec. 5.

### Backup-Generalization Cycle in Offline RL

Offline RL learns from a static offline dataset with no access to online interaction over the course of policy learning. To gain a better understanding of the intricacies of offline deep RL, for the first, we introduce a view called Backup-Generalization Cycle. This view, as depicted in Fig. 1, fosters an understanding of typical offline value function learning via two key components: **Backup** and **Generalization**:

* Typical offline deep RL algorithms employ various forms of **backups** to learn the \(Q\)-function network. Here we use \(C(\cdot)\) to denote a generic form of the target value such as Clipped Double \(Q\)-Learning [3]. It is notable that only the values of state-action pairs in the offline dataset are _directly_ updated.
* Since the values of all state-action pairs that are not in the dataset will never be directly updated, changes to the values of such \((s,a)\notin\mathcal{D}\) are solely _indirectly_ instigated by the backups on \((s,a)\in\mathcal{D}\), i.e., through **generalization**. Note that the state-action pairs for the target values of backup are highly likely to be absent from the dataset, i.e., \((s^{\prime},\pi(s^{\prime}))\notin\mathcal{D}\), as the learning of current policy \(\pi\).

Hence, the typical offline learning process of value function can be regarded as a consequence of the complex interplay between backup and generalization. This dynamic interplay forms a cycle: (1) the backups on \((s,a)\in\mathcal{D}\) consistently influence the values of \((s,a)\notin\mathcal{D}\) (highly likely including \((s^{\prime},\pi(s^{\prime}))\)); (2) the consistently changing \(Q(s^{\prime},\pi(s^{\prime}))\) participates in the backups on \((s,a)\notin\mathcal{D}\); the two kinds of dynamics iterate and twine during the learning process.

There are also some similar opinions mentioned in a few recent works on offline RL [41; 29]. We utilize the Backup-Generalization Cycle to distinctly separate and better analyze these two contributing factors. In the next subsection, we concentrate on the overgeneralization issue with a formal characterization of value generalization among state-action pairs.

### Overgeneralization in Offline RL

According to the Backup-Generalization Cycle presented above, generalization plays a significant role for \((s,a)\notin\mathcal{D}\). In contrast to backup, which is relatively explicit and controllable, generalization is implicit and intricate. In the following of this subsection, we analyze value generalization among state-action pairs during the offline RL learning process.

For a starting case, we consider how the \(Q\) function update caused by typical Temporal-Difference (TD) learning on a single state-action pair \((s,a)\in\mathcal{D}\) (denoted as \(\phi\rightarrow\phi^{\prime}\)), affects the \(Q\)-value of an arbitrary state-action pair \((\bar{s},\bar{a})\). The post-update parameter \(\phi^{\prime}\) can be formalized as follows:

\[\phi^{\prime}=\phi+\left(\mathcal{T}Q_{\phi}(s,a)-Q_{\phi}(s,a)\right)\nabla _{\phi}Q_{\phi}(s,a),\] (1)

where learning rate is omitted for convenience. We further formalize the post-update \(Q\)-value of \((\bar{s},\bar{a})\) by Taylor expansion at the pre-update parameter \(\phi\):

\[Q_{\phi^{\prime}}(\bar{s},\bar{a})=Q_{\phi}(\bar{s},\bar{a})+\nabla_{\phi}Q_ {\phi}(\bar{s},\bar{a})^{\top}\left(\phi^{\prime}-\phi\right)+\mathcal{O} \left(\left\|\phi^{\prime}-\phi\right\|^{2}\right),\] (2)

Now, we can characterize the generalization from \((s,a)\) to \((\bar{s},\bar{a})\) by plugging Eq.1 into Eq.2:

\[Q_{\phi^{\prime}}(\bar{s},\bar{a})=Q_{\phi}(\bar{s},\bar{a})+k_{\phi}(\bar{s},\bar{a},s,a)\left(\mathcal{T}Q_{\phi}(s,a)-Q_{\phi}(s,a)\right)+\mathcal{O} \left(\left\|\phi^{\prime}-\phi\right\|^{2}\right)\] (3)

Figure 1: An illustration of Backup-Generalization Cycle. \(s_{\Box},s_{0},s_{\triangle},s_{\star}\) denotes four states in the offline dataset \(\mathcal{D}\). Backups and generalizations are denoted by blue and red arrows respectively.

where \(k_{\phi}(\bar{s},\bar{a},s,a)\doteq\nabla_{\phi}Q_{\phi}(\bar{s},\bar{a})^{\top} \nabla_{\phi}Q_{\phi}(s,a)\) and it is called Neural Tangent Kernel in [27]. Eq.3 elucidates the change of the \(Q\)-value of any state-action pair \((\bar{s},\bar{a})\) can be mainly characterized by the kernel \(k_{\phi}(\bar{s},\bar{a},s,a)\) and the TD-error \(\mathcal{T}Q_{\phi}(s,a)-Q_{\phi}(s,a)\). Apparently, the kernel controls the extent of generalization: for small values of \(k_{\phi}(\bar{s},\bar{a},s,a)\), the generalization effect is minor and the classic tabular learning (i.e., no generalization) can be viewed as a special case when \(k_{\phi}\) and the higher-order term are 0; for large values of \(k_{\phi}(\bar{s},\bar{a},s,a)\), the generalization effect is prominent and \(Q_{\phi^{\prime}}(\bar{s},\bar{a})\) can be largely changed in either the same or the opposite direction of TD-error. Intriguingly, Eq. 3 indicates that we can control the generalization by mainly adjusting the kernel \(k_{\phi}(\bar{s},\bar{a},s,a)\).

It is widely deemed that the crux of offline RL is the overestimation of OOD data, i.e., \((s,a)\notin\mathcal{D}\). Recall the Backup-Generalization Cycle in Fig. 1. The overestimation propagates directly via backups and further spreads via generalization. Most existing works on offline RL focus on eliminating or suppressing overestimation by conservative value estimation [8; 10] or distribution constraint [4; 5], leading to various forms of \(C(\cdot)\). These works can be categorized as overestimation-control backups. However, since the source of overestimation is improper generalization, i.e., **overgeneralization** issue, we argue that it is inadequate to only cut the _downstream_ while leave the _upstream_ uncontrolled. Naturally, the generalization should also be carefully controlled as a preposed complement to the overestimation-control backups. Therefore, we take a further step and propose a novel method to control the generalization in the next subsection.

### Reining Generalization via Kernel Control

Since the control of generalization (i.e., the _upstream_) is neglected in most previous offline RL works, we propose a novel method to address the overgeneralization issue by controlling the kernel in Eq. 3. The key idea is a two-stage generalization control: Policy-Dataset Generalization Inhibition and Policy-OOD Generalization Inhibition. Fig. 2 illustrates the concept of the two stages and an intermediate scene between them, which are detailed below.

As illustrated in the left of Fig. 1, the first stage of generalization control is to inhibit the generalization from behavior policy distribution (or dataset) to learning policy distribution, i.e., suppress \(Q(s,a)\xrightarrow{\text{Generalization}}Q(s,\pi(s))\) for \((s,a)\in\mathcal{D}\). Such kind of generalization is called _extrapolation_ in the offline RL literature [1]. Extrapolation is a main component of generalization as its consequence \(Q(s,\pi(s))\) consistently participates in the backups. Thus, overestimation caused by improper extrapolation severely handicaps the learning. For a stable and effective learning process, we argue that extrapolation should be inhibited, especially at the early learning stage, where the learning policy is usually largely different with the behavior policy. This can be achieved by encouraging the kernel to 0, i.e., \(\min_{\phi}|\nabla_{\phi}Q_{\phi}(s,a)^{\top}\nabla_{\phi}Q_{\phi}(s,\pi(s))|\). Consequently, training on \((s,a)\in\mathcal{D}\) induces only a minor change to \(Q_{\phi}(s,\pi(s))\).

With effective suppression of overestimation achieved by the first stage of generalization inhibition, we further consider an intermediate scene where the learning policy evolves and resembles the behavioral policy as the training proceeds, leading to a distribution overlap. In this scene, the effect of the first stage could become over-inhibition. In another word, \(\min_{\phi}|\nabla_{\phi}Q_{\phi}(s,a)^{\top}\nabla_{\phi}Q_{\phi}(s,\pi(s))|\) for \(a\approx\pi(s)\) could lead to a sharp and bumpy \(Q\)-value landscape as shown in the middle of Fig. 2. It adversely impacts the robustness of \(Q\) function, further resulting in a brittle policy. Hence, it's unwise

Figure 2: A conceptual illustration of Reining Generalization via Kernel Control.

to impose the Policy-Dataset Generalization Inhibition all along the learning process. For some empirical evidence of this, we observe performance decay in some of our experiments in Table 3 and Fig.4. A natural remedy is to gradually remove the inhibition. However, it leaves value generalization uncontrolled once again, exposing the policy learning under the risk of collapse due to overestimation.

To address the dilemma above, we introduce the second stage, Policy-OOD Generalization Inhibition, as illustrated in the right of Fig. 2. In this stage, we make use of an additional policy \(\pi_{\text{ood}}\) that outputs _OOD actions_. The OOD action here is defined as an action with a lower \(Q\)-value than the action selected by the learning policy for the same state. The actual effect of the second stage is suppression of the generalization between the learning policy distribution and OOD policy distribution. Such a means of kernel control can be viewed as a special way of increasing the action gap [42]. It improves the robustness of value function learning by discouraging erroneous generalization on suboptimal actions. Formally, this is achieved by \(\min_{\phi}|\nabla_{\phi}Q_{\phi}(s,\pi(s))^{\top}\nabla_{\phi}Q_{\phi}(s,\pi _{\text{ood}}(s))|\).

Overall, our kernel control method consists of the two stages of generalization inhibition, which effectively controls the generalization over the entire course of learning, providing a favorable _upstream_ for better offline RL.

## 5 Representation Distinction in Offline RL

In this section, we devise a practical algorithm to rein the generalization in offline RL following the design of two stages of generalization inhibition. A heuristic method to achieve smooth transition among them is also proposed. We term our algorithm of reining generalization as Representation Distinction (RD) and apply them to both existing and designed backbone algorithms.

### Practical Algorithm Design

We first focus on the phase depicted in the left of Fig.2. A natural approach is to directly minimize \(\mathop{\mathbb{E}}_{s,a\sim\mathcal{D}}\lvert k_{\phi}(s,\pi(s),s,a)\rvert\) across the dataset. However, due to the high dimensionality of \(\nabla_{\phi}Q_{\phi}(s,a)\), the direct computation of \(\mathop{\mathbb{E}}_{s,a\sim\mathcal{D}}\lvert k_{\phi}(s,\pi(s),s,a)\rvert\) involves the computation and backpropagation through per-example gradient dot products, which is computationally prohibitive. To mitigate this, we adopt the method proposed by [33] and approximate \(\Delta(\phi)\) with the contribution solely from the last layer parameters, i.e., \(\mathop{\mathbb{E}}_{s,a\sim\mathcal{D}}\lvert\nabla_{\mathbf{w}}Q_{\phi}(s, \pi(s))^{\top}\nabla_{\mathbf{w}}Q_{\phi}(s,a)\rvert\). Consequently, we derive the following loss function:

\[\mathcal{L}_{1}=\mathop{\mathbb{E}}_{s,a\sim\mathcal{D}}\lvert\Phi(s,\pi(s)) ^{\top}\Phi(s,a)\rvert\] (4)

where \(\Phi(s,a)\) signifies the representation of state-action pairs as mentioned in Section 3. By minimizing \(\mathcal{L}_{1}\), we encourage the learned Q-function to yield representations that are as orthogonal as possible between data from dataset and \(\pi\). In this manner, the representations of \((s,a)\) and \((s,\pi(s))\) can be distinctly discerned.

To substantiate the efficacy of inhibiting generalization between in-sample data and data derived from the learning policy \(\pi\), we conduct rudimentary experiments by directly minimizing \(\mathcal{L}_{1}\) during the training of the standard off-policy SAC algorithm [2] on both halfcheeta-medium and halfcheeta-medium-expert. The evaluation results depicted in Fig.3 demonstrate that enhancing the representation alone, devoid of explicit pessimism, can achieve commendable performance, substantially surpassing the baseline SAC. These outcomes underline the potency of inhibiting generalization to eliminate overestimation in offline setting.

Figure 3: Average results of SAC over 5 seeds with and w/o RD.

[MISSING_PAGE_EMPTY:7]

the addition of two steps to the conventional policy updating scheme, as illustrated in Algorithm 1 in the appendix. In each training iteration, the OOD data generator is first trained to generate data with lower Q-values than the current policy. Then, the Q-function is updated by minimizing the loss function \(\mathcal{L}=\epsilon*\mathcal{L}_{\text{RD}}+\mathcal{L}_{\text{critic}}\), and the policy is updated based on \(\mathcal{L}_{\text{actor}}\). Here, \(\epsilon\) represents a weighted factor, and \(\mathcal{L}_{\text{critic}}\) and \(\mathcal{L}_{\text{actor}}\) refer to the optimization objectives of any offline RL algorithm. A psedutocode using RD in offline RL is given in Algorothm 1. In the experimental section, we demonstrate the versatility of RD by integrating it into both backbone algorithms and existing offline RL algorithms.

## 6 Experiments

We evaluate RD by applying it on TD3BC [7], CQL [8], SAC-N-Unc and TD3-N-Unc through a series of experiments on D4RL [47] gym MuJoCo-v2 and Adroit-v1 datasets, where the former is a dataset commonly used in previous work for continuous control tasks, and the latter poses a significant challenge for most offline RL methods due to its sparse reward property. We compare our method with BC and several model-free offline RL algorithms, including DT [48], TD3BC [7], CQL [8], IQL [49], EDAC [10], and Diffusion-QL [50]. We obtain the results of the baselines by re-running the official codes or directly extracting them from the original papers. In our experiments, all the re-run baselines and our algorithm are executed with five random seeds, and we report the average normalized results of the final ten evaluations. We report the performance at 1M gradient step for TD3BC and CQL and that at 3M gradient step for SAC-N-Unc and TD3-N-Unc on MuJoCo tasks. For Adroit tasks, we report results at 500K gradient step. Note that due to the space limitation, we abbreviate the names of the datasets from {RANDOM, MEDIUM, MEDIUM-REPLAY, MEDIUM-EXPERT, EXPERT} to {R, M, MR, ME, E} in all the tables.

### Main Results

\begin{table}
\begin{tabular}{l|c c c c c c c c c} \hline \hline Dataset & **TD3-N-Unc** & **TD3-N-Unc** & **SC-N-Unc** & **SAC-N-Unc** & **TD3BC** & **TD3BC** & **CQL** & **CQL** \\  & **+RD** & **+RD** & **+RD** & **+RD** & **+RD** & **+RD** & **+RD** \\ \hline HalfcCheetai-m & \(66.8\pm 0.5\) & \(\bm{66.8\pm 1.2}\) & \(65.9\pm 1.0\) & \(\bm{65.9\pm 1.9}\) & \(48.0\pm 0.3\) & \(\bm{48.3\pm 0.5}\) & \(47.1\pm 0.2\) & \(\bm{53.0\pm 0.5}\) \\ HalfcCheetai-m & \(53.4\pm 3.9\) & \(\bm{57.7\pm 0.9}\) & \(53.2\pm 5.4\) & \(\bm{61.5\pm 1.4}\) & \(44.6\pm 0.3\) & \(44.6\pm 0.5\) & \(45.2\pm 0.6\) & \(\bm{51.6\pm 0.9}\) \\ HalfcCheetai-m & \(97.7\pm 2.2\) & \(\bm{101.1\pm 0.4}\) & \(99.4\pm 2.5\) & \(\bm{102.5\pm 1.8}\) & \(90.5\pm 6.6\) & \(\bm{93.9\pm 2.9}\) & \(81.1\pm 0.6\) & \(\bm{90.9\pm 5.8}\) \\ \hline Hopper-m & \(41.9\pm 5.05\) & \(\bm{103.0\pm 0.8}\) & \(45.7\pm 0.1\) & \(\bm{102.8\pm 0.2}\) & \(60.4\pm 4.0\) & \(\bm{61.0\pm 2.6}\) & \(\bm{65.0\pm 6.1}\) & \(\bm{74.9\pm 7.1}\) \\ Hopper-m & \(92.5\pm 1.81\) & \(\bm{104.1\pm 0.8}\) & \(104.7\pm 0.9\) & \(104.6\pm 0.4\) & \(61.2\pm 0.5\) & \(\bm{72.1\pm 8.4}\) & \(87.7\pm 1.4\) & \(14.0\pm 3.2\) \\ Hopper-m & \(100.3\pm 2.26\) & \(\bm{110.7\pm 0.6}\) & \(110.9\pm 0.12\) & \(110.6\pm 0.3\) & \(105.6\pm 4.1\) & \(101.8\pm 2.8\) & \(93.9\pm 14.3\) & \(\bm{98.2\pm 9.7}\) \\ \hline WalkER2-m & \(69.3\pm 35.2\) & \(\bm{97.6\pm 3.4}\) & \(24.2\pm 2.8\) & \(\bm{92.3\pm 1.3}\) & \(82.7\pm 5.5\) & \(\bm{83.7\pm 2.7}\) & \(80.4\pm 3.5\) & \(\bm{83.5\pm 1.0}\) \\ walkER2D-m & \(91.6\pm 2.7\) & \(\bm{92.1\pm 2.7}\) & \(85.2\pm 2.7\) & \(\bm{86.9\pm 3.1}\) & \(82.1\pm 2.5\) & \(\bm{84.8\pm 1.4}\) & \(79.2\pm 5.0\) & \(\bm{94.4\pm 2.5}\) \\ walkER2D-m & \(90.6\pm 45.0\) & \(\bm{115.8\pm 1.2}\) & \(113.1\pm 9.6\) & \(\bm{116.4\pm 1.5}\) & \(110.2\pm 0.5\) & \(110.1\pm 0.5\) & \(109.7\pm 0.5\) & \(\bm{113.0\pm 0.5}\) \\ \hline \hline \end{tabular}
\end{table}
Table 1: Results of different algorithms and the ones equipped with RD

\begin{table}
\begin{tabular}{l|c c c c c c c c} \hline \hline Dataset & BC & DT & TD3BC & CQL & IQL & EDAC & Diffusion-QL & \begin{tabular}{} \end{tabular} & \begin{tabular}{} \end{tabular} & 
\begin{tabular}{} \end{tabular} \\ \hline HalfcCheetai-n & \(2.2\) & \(2.2\) & \(11.0\) & \(31.3\) & \(13.7\) & \(28.4\) & \(22.0\) & \(25.4\) & \(31.0\) \\ Hopper-R & \(3.7\) & \(5.4\) & \(8.4\) & \(5.3\) & \(8.4\) & \(25.3\) & \(18.3\) & \(\bm{31.6}\) & \(\bm{31.7}\) \\ WalkER2D-R & \(1.3\) & \(2.2\) & \(1.7\) & \(5.4\) & \(5.9\) & \(16.6\) & \(5.5\) & \(\bm{21.2}\) & \(\bm{21.7}

To demonstrate the applicability of RD, we integrate RD into the training regime of TD3BC, CQL, TD3-N-Unc and SAC-N-Unc. As observed from Table 1, both TD3BC and CQL exhibit improved overall performance when RD is applied. It is noteworthy as the core idea of CQL to increase the Q value of the data in the dataset and diminish the Q value of the data generated by a mixed policy comprising the learning policy and random policy, which incorporates the representation distinction of state-action pairs sourced from different distributions. Therefore in practice, we apply the insights of RD to gradually transfer the original Q value restriction to the Q-value differentiation between the mixed policy and the designed OOD policy. As a result, CQL's performance is significantly improved. Moreover, the backbone algorithms themselves yield substantial advantages from the application of RD. Table 2 further reveals that backbone algorithms equipped with RD can achieve the best overall performance and attains state-of-the-art performance on several datasets. Additional evidence supporting the efficacy of RD in enhancing convergence speed and its potential to reduce the quantity of Q ensembles is provided in the appendix.

### Comparison and discussion with techniques that inhibit overestimation

We compare our method RD with the existing techniques that inhibit potential overestimation including DR3 [41] and Layer Norm [51]. In addition to the regularizer, all the other parameters are kept the same across different methods to ensure fairness. As shown in Table 3, RD is more helpful in helping improving the backbone algorithm than DR3 and Layer Norm.

RD and DR3 differ mainly from two perspectives. From the angle of the framework derived from, DR3 is derived from the theoretical characterizing implicit regularization in TD-Learning, which is a generalization of the implicit regularization from Supervised Learning [52; 53] to TD-Learning in RL setting. In contrast, RD is derived from the proposed Backup-Generalization framework. From the angle of regularization effect, DR3 is proposed to directly counter the implicit regularization of TD-Learning while RD is to suppress the generalization between in-sample data and OOD data. With some heuristics, DR3 regularizer arrives at a similar form, i.e., to minimize the NTK between consecutive state-action pairs in backup, to RD regularizer. Apparently, DR3 regularizer can be a special case of RD regularizer in terms of the definition of out-of-sample actions. The regularization effect of DR3 is similar to the Policy-Dataset Generalization Inhibition shown by Figure 2. Such a regularization can induce over-inhibition of generalization when the distribution of current policy overlaps with the offline dataset as illustrated. We also show in the following that DR3 and Policy-Dataset Generalization Inhibition (i.e., PDD in the following part) achieve similar empirical results.

### Ablation Studies and In-depth Analysis

We design ablation experiments to elucidate the significance of RD's components. We compare RD against several variants including, including Policy-Dataset Distinction (PDD), Random-Dataset Distinction (RDD), Policy-OOD Distinction (POD), and Policy-Dataset Distinction with Dynamically Adjusted Weight (PDDDAW). PDD refers to the auxiliary representation loss calculated using data generated by the learning policy and that from the dataset. Likewise, RDD utilizes data generated by a random policy versus that from the dataset, while POD employs data produced by the learning policy against that by the OOD actor. As for PDDDAW, its PDD component is reweighted using the same heuristic \(w\) adjustment method as RD, but the POD component is persistently weighted by zero. We draw a comparison between TD3-N-Unc + RD and these variants, as tabulated in Table 3. The results demonstrate that RD, fundamentally a dynamic amalgamation of PDD and POD, attains superior overall performance, underscoring the indispensability of each RD component.

\begin{table}
\begin{tabular}{l|c c c c c c|c c} \hline \hline Dataset & \begin{tabular}{c} TD3-N-Unc \\ **+PDD** \\ \end{tabular} & \begin{tabular}{c} **TD3-N-Unc** \\ **+PDD** \\ \end{tabular} & \begin{tabular}{c} **TD3-N-Unc** \\ **+RDD** \\ \end{tabular} & \begin{tabular}{c} **TD3-N-Unc** \\ **+RDD** \\ \end{tabular} & \begin{tabular}{c} **TD3-N-Unc** \\ **+DD3** \\ \end{tabular} & \begin{tabular}{c} **TD3-N-Unc** \\ **+LVarNorm** \\ \end{tabular} & \begin{tabular}{c} **TD3-N-Unc** \\ **+RDD** \\ \end{tabular} \\ \hline \begin{tabular}{l} hindependent-m \\ hopper-m \\ walker2d-m \\ \end{tabular} & \(66.8\pm 0.5\) & \(66.1\pm 0.9\) & \(66.6\pm 0.7\) & \(65.9\pm 0.8\) & \(63.1\pm 2.4\) & \(64.4\pm 1.7\) & \(63.2\pm 0.8\) & \(\mathbf{66.8\pm 1.3}\) \\ \hline \begin{tabular}{l} hindependent-m \\ hopper-m \\ walker2d-m \\ \end{tabular} & \(69.9\pm 50.5\) & \(99.9\pm 6.4\) & \(100.7\pm 6.2\) & \(77.4\pm 38.6\) & \(82.8\pm 40.5\) & \(\mathbf{103.4\pm 0.7}\) & \(83.0\pm 29.0\) & \(103.0\pm 0.8\) \\ \hline \begin{tabular}{l} hindependent-m \\ hopper-m \\ walker2d-m \\ \end{tabular} & \(69.9\pm 35.2\) & \(94.9\pm 17.7\) & \(66.7\pm 38.1\) & \(80.2\pm 31.9\) & \(92.4\pm 0.7\) & \(92.1\pm 2.0\) & \(65.8\pm 20.7\) & \(\mathbf{97.6\pm 3.4}\) \\ \hline \begin{tabular}{l} hindependent-m \\ hopper-m \\ walker2d-m \\ \end{tabular} & \(94.6\pm 11.5\) & \(96.3\pm 13.2\) & \(102.9\pm 1.2\) & \(99.9\pm 4.5\) & \(93.7\pm 13.0\) & \(100.0\pm 3.7\) & \(\mathbf{104.4\pm 1.5}\) & \(103.1\pm 0.6\) \\ \hline \begin{tabular}{l} hindependent-m \\ hopper-m \\ walker2d-m \\ \end{tabular} & \(110.9\pm 0.5\) & \(108.4\pm 0.4\) & \(108.4\pm 0.4\) & \(108.2\pm 0.7\) & \(108.0\pm 0.5\) & \(88.4\pm 42.8\) & \(108.8\pm 0.3\) \\ \hline 
\begin{tabular}{l} hindependent-m \\ hopper-m \\ walker2d-m \\ \end{tabular} & \(4.1\pm 7.1\) & \(67.4\pm 47.2\) & \(60.8\pm 46.1\) & \(28.5\pm 40.8\) & \(44.4\pm 54.0\) & \(109.9\pm 0.4\) & \(11.7\pm 0.4\) & \(\mathbf{111.2\pm 0.7}\) \\ \hline \hline \end{tabular}
\end{table}
Table 3: Average normalized scores of TD3-N-Unc with RD or other variants, and DR3 and Layer Norm that inhibit potential overestimation It is worth noting that using PDD can help backbone algorithms achieve relatively satisfactory performance. However, as depicted in Fig 4, algorithm using PDD occasionally suffers performance degradation during the later stages of training, consequently impairing the overall efficacy of the approach. To elucidate this phenomenon, the final models trained via RD and PDD, as shown in Fig 4, are saved and the quality of the representations obtained by these models are compared. A total of 100 state-action pairs are sampled from the halfcheetah-expert, halfcheetah-medium, and halfcheetah-random datasets, respectively, and then consolidated. Using t-Distributed Stochastic Neighbor Embedding (t-SNE), the distribution of the representations of these 300 state-action pairs derived from both models is charted. Each sample is marked with distinctive symbols (stars for random data, squares for medium data, and circles for expert data) to differentiate samples from diverse datasets. Moreover, varying colors are assigned to individual samples corresponding to the Q-value estimated by the proficiently trained Q-value network acquired by RD, with brighter colors signifying higher Q-values. As depicted in Fig 5 and 6, the RD-derived representation exhibits superior differentiation between state-action pairs with high and low Q-values, whereas the PDD-derived representation frequently misclassifies expert and medium data.

To better demonstrate that the representations learned by RD are superior, we calculate which dataset the top five nearest samples to each sample belong to, and compute the mean over all samples from the same dataset in Table 4. For instance, the EXPERT-EXPERT metric of representation learned via RD indicates that 94% of the five nearest samples to the expert samples are also expert samples. We can conclude that representation learned via RD can better help samples from the same dataset to cluster closer. More results are provided in the appendix.

## 7 Conclusions and Limitations

This paper analyze the important role of generalization in offline RL and presents a novel plug-in method, Representation Distinction (RD), to enhance the performance of offline RL algorithms by reining the generalization. By explicitly differentiating between in-sample and OOD state-action pairs, the generalization across data could be properly inhibited. Our extensive experiments demonstrate the efficacy of the RD method when applied to several offline RL algorithms, significantly enhancing their performance across various continuous control tasks on D4RL datasets. In conclusion, our work contributes a valuable perspective to the field of offline RL by focusing on reining generalization from the representation perspective and providing a flexible solution that can be applied to a variety of existing algorithms.

However, our work is not without limitations. For example, currently RD primarily focus on continuous control tasks, and its applicability to discrete control tasks is yet to be explored. In addition, the transition between the two phases of RD is a heuristic method, which could be improved by designing adaptive adjustment methods. Future research directions may include addressing the aforementioned limitation.

## References

* Levine et al. [2020] Sergey Levine, Aviral Kumar, George Tucker, and Justin Fu. Offline Reinforcement Learning: Tutorial, Review, and Perspectives on Open Problems. _arXiv:2005.01643 [cs, stat]_, November 2020. arXiv: 2005.01643.
* Haarnoja et al. [2018] Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine. Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor. In _International conference on machine learning_, pages 1861-1870. PMLR, 2018.
* Fujimoto et al. [2018] Scott Fujimoto, Herke Hoof, and David Meger. Addressing function approximation error in actor-critic methods. In _International conference on machine learning_, pages 1587-1596. PMLR, 2018.
* Fujimoto et al. [2019] Scott Fujimoto, David Meger, and Doina Precup. Off-policy deep reinforcement learning without exploration. In _International conference on machine learning_, pages 2052-2062. PMLR, 2019.
* Kumar et al. [2019] Aviral Kumar, Justin Fu, Matthew Soh, George Tucker, and Sergey Levine. Stabilizing off-policy q-learning via bootstrapping error reduction. _Advances in Neural Information Processing Systems_, 32, 2019.
* Wu et al. [2019] Yifan Wu, George Tucker, and Ofir Nachum. Behavior regularized offline reinforcement learning. _arXiv preprint arXiv:1911.11361_, 2019.
* Fujimoto and Gu [2021] Scott Fujimoto and Shixiang Shane Gu. A minimalist approach to offline reinforcement learning. _Advances in neural information processing systems_, 34:20132-20145, 2021.
* Kumar et al. [2020] Aviral Kumar, Aurick Zhou, George Tucker, and Sergey Levine. Conservative q-learning for offline reinforcement learning. _Advances in Neural Information Processing Systems_, 33:1179-1191, 2020.
* Lyu et al. [2022] Jiafei Lyu, Xiaoteng Ma, Xiu Li, and Zongqing Lu. Mildly conservative q-learning for offline reinforcement learning. _arXiv preprint arXiv:2206.04745_, 2022.
* An et al. [2021] Gaon An, Seungyong Moon, Jang-Hyun Kim, and Hyun Oh Song. Uncertainty-based offline reinforcement learning with diversified q-ensemble. _Advances in neural information processing systems_, 34:7436-7447, 2021.
* Bai et al. [2022] Chenjia Bai, Lingxiao Wang, Zhuoran Yang, Zhihong Deng, Animesh Garg, Peng Liu, and Zhaoran Wang. Pessimistic bootstrapping for uncertainty-driven offline reinforcement learning. _arXiv preprint arXiv:2202.11566_, 2022.
* Yang et al. [2022] Rui Yang, Chenjia Bai, Xiaoteng Ma, Zhaoran Wang, Chongjie Zhang, and Lei Han. Rorl: Robust offline reinforcement learning via conservative smoothing. _arXiv preprint arXiv:2206.02829_, 2022.
* Geng et al. [2022] Xinyang Geng, Kevin Li, Abhishek Gupta, Aviral Kumar, and Sergey Levine. Effective offline rl needs going beyond pessimism: Representations and distributional shift. In _Decision Awareness in Reinforcement Learning Workshop at ICML 2022_, 2022.
* Yang and Nachum [2021] Mengjiao Yang and Ofir Nachum. Representation matters: offline pretraining for sequential decision making. In _International Conference on Machine Learning_, pages 11784-11794. PMLR, 2021.
* Peng et al. [2019] Xue Bin Peng, Aviral Kumar, Grace Zhang, and Sergey Levine. Advantage-weighted regression: Simple and scalable off-policy reinforcement learning. _arXiv preprint arXiv:1910.00177_, 2019.
* Siegel et al. [2020] Noah Y Siegel, Jost Tobias Springenberg, Felix Berkenkamp, Abbas Abdolmaleki, Michael Neunert, Thomas Lampe, Roland Hafner, Nicolas Heess, and Martin Riedmiller. Keep doing what worked: Behavioral modelling priors for offline reinforcement learning. _arXiv preprint arXiv:2002.08396_, 2020.
* Kostrikov et al. [2021] Ilya Kostrikov, Ashvin Nair, and Sergey Levine. Offline reinforcement learning with implicit q-learning. _arXiv preprint arXiv:2110.06169_, 2021.
* Zhou et al. [2021] Wenxuan Zhou, Sujay Bajracharya, and David Held. Plas: Latent action space for offline reinforcement learning. In _Conference on Robot Learning_, pages 1719-1735. PMLR, 2021.
* Chen et al. [2022] Xi Chen, Ali Ghadirzadeh, Tianhe Yu, Yuan Gao, Jianhao Wang, Wenzhe Li, Bin Liang, Chelsea Finn, and Chongjie Zhang. Latent-variable advantage-weighted policy optimization for offline rl. _arXiv preprint arXiv:2203.08949_, 2022.
* Yu et al. [2020] Tianhe Yu, Garrett Thomas, Lantao Yu, Stefano Ermon, James Y Zou, Sergey Levine, Chelsea Finn, and Tengyu Ma. Mopo: Model-based offline policy optimization. _Advances in Neural Information Processing Systems_, 33:14129-14142, 2020.

* Kidambi et al. [2020] Rahul Kidambi, Aravind Rajeswaran, Praneeth Netrapalli, and Thorsten Joachims. Morel: Model-based offline reinforcement learning. _Advances in neural information processing systems_, 33:21810-21823, 2020.
* Argenson and Dulac-Arnold [2020] Arthur Argenson and Gabriel Dulac-Arnold. Model-based offline planning. _arXiv preprint arXiv:2008.05556_, 2020.
* Yu et al. [2021] Tianhe Yu, Aviral Kumar, Rafael Rafailov, Aravind Rajeswaran, Sergey Levine, and Chelsea Finn. Combo: Conservative offline model-based policy optimization. _Advances in neural information processing systems_, 34:28954-28967, 2021.
* Rigter et al. [2022] Marc Rigter, Bruno Lacerda, and Nick Hawes. Rambo-rl: Robust adversarial model-based offline reinforcement learning. _arXiv preprint arXiv:2204.12581_, 2022.
* Guo et al. [2022] Kaiyang Guo, Yunfeng Shao, and Yanhui Geng. Model-based offline reinforcement learning with pessimism-modulated dynamics belief. _arXiv preprint arXiv:2210.06692_, 2022.
* Maei et al. [2009] Hamid Maei, Csaba Szepesvari, Shalabh Bhatnagar, Doina Precup, David Silver, and Richard S Sutton. Convergent temporal-difference learning with arbitrary smooth function approximation. _Advances in neural information processing systems_, 22, 2009.
* Achiam et al. [2019] Joshua Achiam, Ethan Knight, and Pieter Abbeel. Towards characterizing divergence in deep q-learning. _arXiv preprint arXiv:1903.08894_, 2019.
* Bengio et al. [2020] Emmanuel Bengio, Joelle Pineau, and Doina Precup. Interference and generalization in temporal difference learning. In _International Conference on Machine Learning_, pages 767-777. PMLR, 2020.
* Kumar et al. [2020] Aviral Kumar, Abhishek Gupta, and Sergey Levine. Discor: Corrective feedback in reinforcement learning via distribution correction. _Advances in Neural Information Processing Systems_, 33:18560-18572, 2020.
* Lyle et al. [2022] Clare Lyle, Mark Rowland, and Will Dabney. Understanding and preventing capacity loss in reinforcement learning. _arXiv preprint arXiv:2204.09560_, 2022.
* Xiao et al. [2022] Chenjun Xiao, Bo Dai, Jincheng Mei, Oscar A Ramirez, Ramki Gummadi, Chris Harris, and Dale Schuurmans. Understanding and leveraging overparameterization in recursive value estimation. In _International Conference on Learning Representations_, 2022.
* Kumar et al. [2021] Aviral Kumar, Rishabh Agarwal, Dibya Ghosh, and Sergey Levine. Implicit under-parameterization inhibits data-efficient deep reinforcement learning. In _International Conference on Learning Representations_, 2021.
* Kumar et al. [2022] Aviral Kumar, Rishabh Agarwal, Tengyu Ma, Aaron Courville, George Tucker, and Sergey Levine. DR3: Value-based deep reinforcement learning requires explicit regularization. In _International Conference on Learning Representations_, 2022.
* Gulcehre et al. [2022] Caglar Gulcehre, Srivatsan Srinivasan, Jakub Sygnowski, Georg Ostrovski, Mehrdad Farajtabar, Matt Hoffman, Razvan Pascanu, and Arnaud Doucet. An empirical study of implicit regularization in deep offline rl. _arXiv preprint arXiv:2207.02099_, 2022.
* Chung et al. [2019] Wesley Chung, Somjit Nath, Ajin Joseph, and Martha White. Two-timescale networks for nonlinear value function approximation. In _International Conference on Learning Representations_, 2019.
* Dabney et al. [2021] Will Dabney, Andre Barreto, Mark Rowland, Robert Dadashi, John Quan, Marc G Bellemare, and David Silver. The value-improvement path: Towards better representations for reinforcement learning. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 35, pages 7160-7168, 2021.
* Laskin et al. [2020] Michael Laskin, Aravind Srinivas, and Pieter Abbeel. CURL: contrastive unsupervised representations for reinforcement learning. In _International Conference on Machine Learning_, volume 119, pages 5639-5650, 2020.
* Laskin et al. [2020] Michael Laskin, Kimin Lee, Adam Stooke, Lerrel Pinto, Pieter Abbeel, and Aravind Srinivas. Reinforcement learning with augmented data. In _Advances in Neural Information Processing Systems_, 2020.
* Yarats et al. [2021] Denis Yarats, Rob Fergus, Alessandro Lazaric, and Lerrel Pinto. Reinforcement learning with prototypical representations. In _International Conference on Machine Learning_, volume 139, pages 11920-11931, 2021.
* Zhang et al. [2021] Amy Zhang, Rowan Thomas McAllister, Roberto Calandra, Yarin Gal, and Sergey Levine. Learning invariant representations for reinforcement learning without reconstruction. In _International Conference on Learning Representations_, 2021.

* [41] Aviral Kumar, Rishabh Agarwal, Tengyu Ma, Aaron Courville, George Tucker, and Sergey Levine. Dr3: Value-based deep reinforcement learning requires explicit regularization. In _International Conference on Learning Representations_.
* [42] Marc G Bellemare, Georg Ostrovski, Arthur Guez, Philip Thomas, and Remi Munos. Increasing the action gap: New operators for reinforcement learning. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 30, 2016.
* [43] Alex Beeson and Giovanni Montana. Balancing policy constraint and ensemble size in uncertainty-based offline reinforcement learning. _arXiv preprint arXiv:2303.14716_, 2023.
* [44] Hongchang Zhang, Boyuan Wang, Yixiu Mao, Jianzhu Shao, Yuhang Jiang, Yi Xu, and Xiangyang Ji. Pessimistic policy iteration for offline reinforcement learning, 2023.
* [45] Kamyar Ghasemipour, Shixiang (Shane) Gu, and Ofir Nachum. Why so pessimistic? estimating uncertainties for offline rl through ensembles, and why their independence matters. In S. Koyejo, S. Mohamed, A. Agarwal, D. Belgrave, K. Cho, and A. Oh, editors, _Advances in Neural Information Processing Systems_, volume 35, pages 18267-18281. Curran Associates, Inc., 2022.
* [46] Jordi Smit, Canmanie T Ponnambalam, Matthijs TJ Spaan, and Frans A Oliehoek. Pebl: Pessimistic ensembles for offline deep reinforcement learning. In _Robust and Reliable Autonomy in the Wild Workshop at the 30th International Joint Conference of Artificial Intelligence_, 2021.
* [47] Justin Fu, Aviral Kumar, Ofir Nachum, George Tucker, and Sergey Levine. D4rl: Datasets for deep data-driven reinforcement learning. _arXiv preprint arXiv:2004.07219_, 2020.
* [48] Lili Chen, Kevin Lu, Aravind Rajeswaran, Kimin Lee, Aditya Grover, Misha Laskin, Pieter Abbeel, Aravind Srinivas, and Igor Mordatch. Decision transformer: Reinforcement learning via sequence modeling. _Advances in neural information processing systems_, 34:15084-15097, 2021.
* [49] Ilya Kostrikov, Ashvin Nair, and Sergey Levine. Offline reinforcement learning with implicit q-learning. In _International Conference on Learning Representations_, 2022.
* [50] Zhendong Wang, Jonathan J Hunt, and Mingyuan Zhou. Diffusion policies as an expressive policy class for offline reinforcement learning. _arXiv preprint arXiv:2208.06193_, 2022.
* [51] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. _arXiv preprint arXiv:1607.06450_, 2016.
* [52] Guy Blanc, Neha Gupta, Gregory Valiant, and Paul Valiant. Implicit regularization for deep neural networks driven by an ornstein-uhlenbeck like process. In _Conference on learning theory_, pages 483-513. PMLR, 2020.
* [53] Alex Damian, Tengyu Ma, and Jason D Lee. Label noise sgd provably prefers flat global minimizers. _Advances in Neural Information Processing Systems_, 34:27449-27461, 2021.
* [54] Denis Tarasov, Alexander Nikulin, Dmitry Akimov, Vladislav Kurenkov, and Sergey Kolesnikov. CORL: Research-oriented deep offline reinforcement learning library. In _3rd Offline RL Workshop: Offline RL as a "Launchpad"_, 2022.