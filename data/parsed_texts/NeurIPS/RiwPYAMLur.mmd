# Active Representation Learning for General Task Space with Applications in Robotics

Yifang Chen\({}^{1}\), Yingbing Huang\({}^{2}\), Simon S. Du\({}^{1*}\), Kevin Jamieson\({}^{1*}\), Guanya Shi\({}^{3*}\)

\({}^{1}\) Paul G. Allen School of Computer Science & Engineering

University of Washington, Seattle,WA

{yifangc, ssdu, jamieson, guanyas}@cs.washington.edu

\({}^{2}\) University of Illinois Urbana-Champaign, Champaign, IL

{yh21}@illinois.edu

\({}^{3}\) Robotics Institute, Carnegie Mellon University, Pittsburgh, PA

{{guanyas }@andrew.cmu.edu

\({}^{*}\) Equal advising

###### Abstract

Representation learning based on multi-task pretraining has become a powerful approach in many domains. In particular, task-aware representation learning aims to learn an optimal representation for a specific target task by sampling data from a set of source tasks, while task-agnostic representation learning seeks to learn a universal representation for a class of tasks. In this paper, we propose a general and versatile algorithmic and theoretic framework for _active representation learning_, where the learner optimally chooses which source tasks to sample from. This framework, along with a tractable meta algorithm, allows most arbitrary target and source task spaces (from discrete to continuous), covers both task-aware and task-agnostic settings, and is compatible with deep representation learning practices. We provide several instantiations under this framework, from bilinear and feature-based nonlinear to general nonlinear cases. In the bilinear case, by leveraging the non-uniform spectrum of the task representation and the calibrated source-target relevance, we prove that the sample complexity to achieve \(\varepsilon\)-excess risk on target scales with \((k^{*})^{2}\|v^{*}\|_{2}^{2}\varepsilon^{-2}\) where \(k^{*}\) is the effective dimension of the target and \(\|v^{*}\|_{2}^{2}\in(0,1]\) represents the connection between source and target space. Compared to the passive one, this can save up to \(\frac{1}{d_{W}}\) of sample complexity, where \(d_{W}\) is the task space dimension. Finally, we demonstrate different instantiations of our meta algorithm in synthetic datasets and robotics problems, from pendulum simulations to real-world drone flight datasets. On average, our algorithms outperform baselines by \(20\%-70\%\). 1

Footnote 1: Code in https://github.com/cloudwaysX/ALMultiTask_Robotics

## 1 Introduction

Recently, few-shot machine learning has enjoyed significant attention and has become increasingly critical due to its ability to derive meaningful insights for target tasks that have minimal data, a scenario commonly encountered in real-world applications. This issue is especially prevalent in robotics where data collection and training data is prohibitive to collect or even non-reproducible (e.g., drone flying with complex aerodynamics [1] or legged robots on challenging terrains [2]). Onepromising approach to leveraging the copious amount of data from a variety of other sources is multi-task learning, which is based on a key observation that different tasks may share a common low-dimensional representation. This process starts by pretraining a representation on source tasks and then fine-tuning the learned representation using a limited amount of target data ([3, 4, 5, 6, 7]).

In conventional supervised learning tasks, accessing a large amount of source data for multi-task representation learning may be easy, but processing and training on all that data can be costly. In real-world physical systems like robotics, this challenge is further amplified by two factors: (1) switching between different tasks or environments is often significantly more expensive (e.g., reset giant wind tunnels for drones [7]); (2) there are infinitely many environments to select from (i.e., environmental conditions are continuous physical parameters like wind speed). Therefore, it is crucial to minimize not only the number of samples, but the number of sampled source tasks, while still achieving the desired performance on the target task. Intuitively, not all source tasks are equally informative for learning a universally good representation or a target-specific representation. This is because source tasks can have a large degree of redundancy or be scarce in other parts of the task space. In line with this observation, Chen et al. [8] provided the first provable active representation learning method that improves training efficiency and reduces the cost of processing source data by prioritizing certain tasks during training with theoretical guarantees. On the other hand, many existing works [9, 10, 11, 12, 13] prove that it is statistically possible to learn a universally good representation by randomly sampling source tasks (i.e., the passive learning setting).

The previous theoretical work of [8] on active multi-task representation learning has three main limitations. First, it only focuses on a finite number of discrete tasks, treating each source independently, and therefore fails to leverage the connection between each task. This could be sub-optimal in many real-world systems like robotics for two reasons: (1) there are often infinitely many sources to sample from (e.g., wind speed for drones); (2) task spaces are often highly correlated (e.g., perturbing the wind speed will not drastically change the aerodynamics). In our paper, by considering a more general setting where tasks are parameterized in a vector space \(\mathcal{W}\), we can more effectively leverage similarities between tasks compared to treating them as simply discrete and different. Secondly, the previous work only considers a single target, while we propose an algorithm that works for an arbitrary target space and distribution. This is particularly useful when the testing scenario is time-variant. Thirdly, we also consider the task-agnostic setting by selecting \(\mathcal{O}(k)\) representative tasks among the \(d_{W}\) high dimension task space, where \(k\ll d_{W}\) is the dimension of the shared representation. Although this result does not improve the total source sample complexity compared to the passive learning result in the bilinear setting [12], it reduces the number of tasks used in the training and therefore implicitly facilitates the training process.

In addition to those theoretical contributions, we extend our proposed algorithmic framework beyond a pure bilinear representation function, including the _known_ nonlinear feature operator with unknown linear representation (e.g., random features with unknown coefficients), and the totally _unknown nonlinear representation_ (e.g., deep neural network representation). While some prior works have considered nonlinear representations [9, 10, 14, 13] in passive learning, the studies in active learning are relatively limited [8]. All of these works only consider non-linearity regarding the input, rather than the task parameter. In this paper, we model task-parameter-wise non-linearity and show its effectiveness in experiments. Note that it particularly matters for task selections because the mapping from the representation space to task parameters to is no longer linear.

See more related works and how our problem scope is different from theirs in Appendix A.

### Summery of contributions

* We propose the first generic active representation learning framework that admits any arbitrary source and target task space. This result greatly generalizes previous works where tasks lie in the discrete space and only a single target is allowed. To show its flexibility, we also provide discussions on how our framework can accommodate various supervised training oracles and optimal design oracles. (Section 3)
* We provide theoretical guarantees under a benign setting, where inputs are i.i.d. and a unit ball is contained in the overall task space, as a compliment to the previous work where tasks lie on the vertices of the whole space. In the target-aware setting, to identify an \(\varepsilon\)-good model our method requires a sample complexity of \(\widetilde{\mathcal{O}}(kd_{X}(k^{*})^{2}\|v^{*}\|_{2}^{2}\min\{k^{*},\kappa^{ 2}\}\varepsilon^{-2})\) where \(k^{*}\) is the effective dimension of the target, \(\kappa\) is the conditional number of representation matrix, and \(\|v^{*}\|_{2}^{2}\in(0,1]\) represents the connection between source and target space that will be specified in the main paper. Compared to passive learning, our result saves up to a factor of \(\frac{k^{2}}{d_{W}}\) in the sample complexity when targets are uniformly spread over the \(k\)-dim space and up to \(\frac{1}{d_{W}}\) when targets are highly concentrated. Our results further indicate the necessity of considering the continuous space by showing that directly applying the previous algorithm onto some discretized sources in the continuous space (e.g., orthonormal basis) can lead to worse result. Finally, ignoring the tasks used in the warm-up phases, in which only a few samples are required, both the target-aware and the target-agnostic cases can save up to \(\widetilde{\mathcal{O}}(k^{*}+k)\) number of tasks compared to the passive one which usually requires \(d_{W}\) number of tasks. (Section 4)
* We provide comprehensive experimental results under different instantiations beyond the benign theoretical setting, studying synthetic and real-world scenarios: 1) For the synthetic data setting in a continuous space, we provide results for pure linear, known nonlinear feature operator \(\psi_{X}\) and unknown nonlinear representation \(\phi_{X}\). Our target-aware active learning (AL) approach shows up to a significant budget saving (up to \(68\%\)) compared to the passive approach and the target-agnostic AL approach also shows an advantage in the first two cases. 2) In a pendulum simulation with continuous task space, we provide the results for known nonlinear feature operator \(\psi_{X}\) and \(\psi_{W}\) and show that our target-aware AL approach has up to \(20\%\) loss reduction compared to the passive one, which also translates to better nonlinear control performance. 3) Finally, in the real-world drone dataset with a discrete task space, we provide results for unknown linear and nonlinear representation \(\phi_{X}\) and show that our target-aware AL approach converges much faster than the passive one. (Section 5)

## 2 Preliminary

Multi-task (or multi-environments).Each task or environment is parameterized by a known vector \(w\in\mathbb{R}^{d_{W}}\). We denote the source and target task parameter space as \(\mathcal{W}_{\text{source}}\subset\mathbb{R}^{d_{W}},\mathcal{W}_{\text{ target}}\subset\mathbb{R}^{d_{W}}\). These spaces need not be the same (e.g., they could be different sub-spaces). In the discrete case, we set \(w\) as a one-hot encoded vector and therefore we have in total \(d_{W}\) number of candidate tasks while in the continuous space, there exist infinitely many tasks. For convenience, we also use \(w\) as the subscript to index certain tasks. In addition, we use \(\nu_{\text{source}}\in\Delta(\mathcal{W}_{\text{source}}),\nu_{\text{target}} \in\Delta(\mathcal{W}_{\text{target}})\) to denote the task distribution for the sources and targets.

Data generation.Let \(\mathcal{X}\in\mathbb{R}^{d_{X}}\) be the input space. We first assume there exists some _known_ feature/augmentation operator \(\psi_{X}:\mathcal{X}\rightarrow\mathbb{R}^{d_{\psi_{X}}\geq d_{W}},\psi_{W}: \mathcal{W}\rightarrow\mathbb{R}^{d_{\psi_{W}}\geq d_{W}}\), that can be some non-linear operator that lifts \(w,x\) to some higher dimensional space (e.g., random Fourier features [15]). Notice that the existence of non-identical \(\psi\) indicates the features are not pairwise independent and the design space of \(\mathcal{W}_{\text{source}}\) is not benign (e.g., non-convex), which adds extra difficulty to this problem.

Then we assume there exists some _unknown_ underlying representation function \(\phi_{X}:\psi(\mathcal{X})\rightarrow\mathcal{R}\) which maps the augmented input space \(\psi(\mathcal{X})\) to a shared representation space \(\mathcal{R}\in\mathbb{R}^{k}\) where \(k\ll d_{\psi_{X}},k\leq d_{\psi_{W}}\), and its task counterparts \(\phi_{W}:\psi(\mathcal{W})\rightarrow\mathcal{R}\) which maps parameterized task space to the feature space. Here the representation functions are restricted to be in some function classes \(\Phi\), e.g., linear functions, deep neural networks, etc.

In this paper, we further assume that \(\phi_{W}\) is a linear function \(B_{W}\in\mathbb{R}^{k\times d_{\phi_{W}}}\). To be more specific, for any fixed task \(w\), we assume each sample \((x,y)\sim\nu_{w}\) satisfies

\[y=\phi_{X}(\psi_{X}(x))^{\top}B_{W}\psi_{W}(w)+\xi,\quad\xi\sim\mathcal{N}(0, \sigma^{2})\] (1)

For convenience, we denote \(Z_{w}\) as the collection of \(n_{w}\) sampled data \((x_{w}^{1},y_{w}^{1}),...,(x_{w}^{n_{w}},y_{w}^{n_{w}})\sim\mu_{w}\). We note that when \(\psi_{X},\psi_{W}\) is identity and \(\phi_{X}\) is linear, this is reduced to standard linear setting in many previous papers [9; 11; 12; 8].

The task diversity assumption.There exists some distribution \(p\in\Delta(\mathcal{W}_{\text{source}})\) that \(\mathbb{E}_{w\sim p}\lambda_{\min}(B_{W}\psi_{W}(w)\psi_{W}(w)^{\top}B_{W}^{ \top})>0\), which suggests the source tasks are diverse enough to learn the representation.

Data collection protocol.We assume there exists some i.i.d. data sampling oracle given the environment and the budget. To learn a proper representation, we are allowed access to an _unlimited_\(n_{\text{source}}\) number of data from source tasks during the learning process by using such an oracle. Then at the end of the algorithm, we are given a few-shot of _mix_ target data \(Z_{\text{target}}=\{Z_{w}\}_{w\sim\nu_{\text{target}}}\) which is used for fine-tuning based on learned representation \(\hat{\phi}_{X}\). Denote \(n_{\text{target}}\) as the number of data points in \(Z_{\text{target}}\).

Data collection protocol for target-aware setting.When the target task is not a singleton, we additionally assume a few-shot of _known environment_ target data \(\dot{Z}_{\text{target}}:=\{Z_{w},w\}_{w\in\dot{W}_{\text{target}}}\), where \(|\dot{W}_{\text{target}}|=\text{dim}(\mathcal{W}_{\text{target}})\) and \(\dot{W}_{\text{target}}=\{\arg\max_{W\in\mathcal{W}_{\text{target}}}\lambda_{ \min}(WW^{\top})\}\). Again denote \(\dot{n}_{\text{target}}\) as the number of data points in \(\dot{Z}_{\text{target}}\), we have \(\dot{n}_{\text{target}}\approx n_{\text{target}}^{2/3}\ll n_{\text{source}}\).

_Remark 2.1_.: Here \(|\dot{W}_{\text{target}}|\) represents vectors that can cover every directions of \(\mathcal{W}_{\text{target}}\) space. This extra \(\dot{Z}_{\text{target}}\) requirement comes from the non-linearity of \(l_{2}\) loss and the need to learn the relationship between sources and targets. We want to emphasize that such an assumption implicitly exists in previous active representation learning [8] since \(\dot{Z}_{\text{target}}=Z_{\text{target}}\) in their single target setting. Nevertheless, in a passive learning setting, only mixed \(Z_{\text{target}}\) is required since no source selection process involves. Whether such a requirement is necessary for target-aware active learning remains an open problem.

Other notations.Let \(e_{i}\) to be one-hot vector with \(1\) at \(i\)-th coordinates and let \(\epsilon_{i}=2^{-i}\).

### Goals

Expected excess risk.For any target task space \(\mathcal{W}_{\text{target}}\) and its distribution \(\nu_{\text{target}}\) over the space, as well as a few-shot examples as stated in section 2, our goal is to minimize the expected excess risk with our estimated \(\hat{\phi}_{X}\)

\[\text{er}(\hat{\phi}_{X},\nu_{\text{target}})=\mathbb{E}_{w_{0}\sim\nu_{\text{ target}}}\mathbb{E}_{(x,y)\sim\nu_{w_{0}}}\|\hat{\phi}_{X}(\psi_{X}(x))^{\top} \hat{w}_{\text{avg}}-y\|_{2}\]

where \(\hat{w}_{\text{avg}}=\arg\min_{w}\sum_{(x,y)\in Z_{\text{target}}}||\hat{\phi} _{X}(\psi_{X}(x))w-y\|_{2}\), which average model estimation that captures the data behavior under the expected target distribution. Note that the \(\mathcal{W}_{\text{target}},\nu_{\text{target}}\) are given in advance in the target-aware setting.

The number of tasks.Another side goal is to save the number of long-term tasks we are going to sample during the learning process. Since a uniform exploration over \(d_{W}^{\text{source}}\)-dimension is unavoidable during the warm-up stage, we define long-term task number as

\[\left|\left\{w\in\mathcal{W}_{\text{source}}\ |\ \ n_{w}\geq\bar{\Omega}( \varepsilon^{-\alpha})\right\}\right|\]

where \(\alpha\) is some arbitrary exponent and \(\varepsilon\) is the target accuracy and \(n_{w}\) is number of samples sampled from task \(w\) as defined above.

## 3 A general framework

Our algorithm 1 iteratively estimates the shared representation \(\hat{\phi}_{X},\hat{B}_{W}\) and the next target relevant source tasks which the learner should sample from by solving several optimal design oracles

\[g(f,A)=\min_{q\in\Delta(\mathcal{W}_{savce})}\lambda_{\max}\left((\int q(w)f(w )f(w)^{\top})^{-1}A\right)\] (2)

This exploration and exploitation (target-aware exploration here) trade-off is inspired by the classical \(\epsilon\)-greedy strategy, but the key difficulty in our work is to combine that with multi-task representation learning and different optimal design problems. The algorithm can be generally divided into three parts, and some parts can be skipped depending on the structure and the goal of the problem.

* [leftmargin=*,noitemsep,topsep=0pt,parsep=0pt,leftmargin=*]
* **Coarse exploration:** The learner uniformly explores all the directions of the \(\mathcal{W}_{\text{source}}\) (denoted by distribution \(q_{0}\)) in order to find an initial \(k\)-dimension subspace \(V\) that well spans over the representation space (i.e., \(\frac{1}{c}B_{W}B_{W}^{\top}\leq B_{W}VV^{\top}B_{W}^{\top}\leq cB_{W}B_{W}^{ \top}\) for some arbitrary constant \(c\leq\frac{d_{W}}{k}\)). To give an intuitive example, suppose \(B_{W}\in\mathbb{R}^{2\times d_{W}^{\text{source}}+1}\) has the first half column equals \(e_{1}\) and the second hard equals \(e_{2}\). Then instead of uniformly choosing \(\{e_{i}\}_{i\in[d_{W}^{\text{source}}]}\) task, we only need explore over two tasks \(V[1]=\sqrt{\frac{2}{d_{W}^{\text{source}}}}[1,1,\ldots,0,0,\ldots],V[2]=\sqrt{ \frac{2}{d_{W}^{\text{source}}}}[0,0,\ldots,1,1,\ldots]\).

We want to highlight that the sample complexity of this warm-up stage only scales with \(d_{\psi_{X}},k\) and the spectrum-related parameters of \(B_{W}\) (i.e., \(\kappa(B_{W}),\sigma_{\min}(B_{X})\)), not the desired accuracy \(\varepsilon\).
* **Fine target-agnostic exploration:** The learner iteratively updates the estimation of \(V\) and uniformly explore for \(\widetilde{\mathcal{O}}(\epsilon_{j}^{-\frac{4}{3}})\) times on this \(k\), instead of \(d_{\psi_{W}}\) subspace, denoted by distribution \(q_{1}\). (Note this \(\epsilon_{j}^{-\frac{4}{3}}\) comes from the exploration part in \(\epsilon\)-greedy, which is \((n_{2}^{j})^{\frac{2}{3}}\)) Such reduction not only saves the cost of maintaining a large amount of physical environment in real-world experiments but also simplifies the non-convex multi-task optimization problem. Of course, when \(k=\Theta(d_{\psi_{W}})\), we can always uniformly explore the whole \((d_{\psi_{W}}\) space as denoted in the algorithm. Note that theoretically, \(q_{1}\) only needs to be computed once as shown in 4. In practice, to further improve the accuracy while saving the task number, the \(q_{1}\) can be updated only when a significant change from the previous one happens, which is adopted in our experiments as shown in appendix E.1.
* **Fine target-aware exploration.** In the task-awareness setting, the learner estimates the most-target-related sources parameterized by \(\{w\}\) based on the current representation estimation and allocates more budget on those, denoted by distribution \(q_{2}\). By definition, \(q_{2}\) should be more sparse than \(q_{1}\) and thus allowing the final sample complexity only scales with \(k^{*}\), which measures the effective dimension in the source space that is target-relevant.

Computational oracle for optimal design problem.Depending on the geometry of \(\{\psi_{W}(w)\}_{w\in\mathcal{W}_{\text{source}}}\), the learner should choose proper offline optimal design algorithms to solve \(g(f,A)\). Here we propose several common choices. 1). When \(\mathcal{W}_{\text{source}}\) contains a ball, we can approximate the solution via an eigendecomposition-based closed-form solution with an efficient projection as detailed in Section 4. 2) When \(\mathcal{W}_{\text{source}}\) is some other convex geometry, we can approximate the result via the Frank-Wolfe type algorithms [16], which avoids explicitly looping over the infinite task space. 3) For other even harder geometry, we can use discretization or adaptive sampling-based approximation [17]. In our experiments, we adopt the latter one and found out that its running time cost is almost neglectable in our pendulum simulator experiment in Section 5, where the \(\psi_{W}\) is a polynomial augmentation.

Offline optimization oracle \(\mathcal{O}^{X}_{\text{offline}}\).Although we are in the continuous setting, the sampling distribution \(q_{0},q_{1},q_{2}\) is sparse. Therefore, our algorithm allows any proper passive multi-task

[MISSING_PAGE_FAIL:6]

_As long as the number of target samples satisfies_

\[n_{\text{target}}\geq\tilde{\Omega}((k+\log(1/\delta))\varepsilon^{-2}),\quad \hat{n}_{\text{target}}\gtrapprox\tilde{\Omega}\left(\varepsilon^{-\frac{4}{3}}(k ^{*})^{\frac{2}{3}}\sqrt{k}\left(d_{W}^{\frac{1}{2}}\underline{\sigma}^{- \frac{4}{3}}+k^{-\frac{2}{3}}d_{W}^{\frac{1}{3}}\bar{\kappa}^{2}\underline{ \sigma}^{-\frac{1}{3}}\right)\right)\]

Comparison with passive learning.By choosing \(\{e_{i}\}_{i\in[d_{W}^{\text{target}}]}\) as a fixed source set, we reduce the problem to a discrete setting and compare it with the passive learning. In [9], the authors get \(N_{\text{total}}\) as most \(\frac{kd_{X}d_{W}\|\mathbb{E}_{w_{0}\sim\text{target}}B_{W}w_{0}w_{0}^{\top}B _{W}^{\top}\|}{\sigma_{\min}^{2}(B_{W}^{\text{target}})}\varepsilon^{-2}\). We first consider the cases in their paper that the target task is uniformly spread \(\|\mathbb{E}_{w_{0}\sim\text{target}}B_{W}w_{0}w_{0}^{\top}B_{W}^{\top}\|=\frac{ 1}{k}\).

* When the task representation is well-conditioned \(\sigma_{\min}^{2}(B_{W}^{\text{source}})=\frac{d_{W}}{k}\). We have a passive one as \(\widetilde{\mathcal{O}}(kd_{X}\varepsilon^{-2})\) while the active one \(\widetilde{\mathcal{O}}(kd_{X}\frac{k^{2}}{d_{W}}\varepsilon^{-2})\) (See Lemma B.8 for details), which suggests as long as \(d_{W}\gg k^{2}\), our active learning algorithm gain advantage even in a relatively uniform spread data and representation conditions.
* Otherwise, we consider the extreme case that \(\sigma_{\min}^{2}(B_{W}^{\text{source}})=1\). We have passive one \(\widetilde{\mathcal{O}}(d_{X}d_{W}\varepsilon^{-2})\) while the active one \(\widetilde{\mathcal{O}}(k^{3}d_{X}\varepsilon^{-2})\). Notice here we require \(d_{W}\gg k^{3}\).

Both of them indicate the necessity of considering the continuous case with large \(d_{W}\) even if everything is uniformly spread. On the other hand, whether we can achieve the same result as the passive one when \(d_{W}\leq k^{3}\) remains to be explored in the future.

We then consider the single target \(w_{0}\) case.

* With well-conditioned \(B_{W}\), the passive one now has sample complexity \(\mathcal{O}(k^{2}d_{X}\varepsilon^{-2})\) while the active gives a strictly improvement \(\mathcal{O}(\frac{k^{2}d_{X}}{d_{W}}\varepsilon^{-2})\).
* With ill-conditioned \(B_{W}\) where \(\sigma_{\min}(B_{W})=1\) and \(\max_{i}\|W_{i}^{*}\|=1\), that is, only a particular direction in source space contributes to the target. The Passive one now has sample complexity \(\mathcal{O}(kd_{X}d_{W}\varepsilon^{-2})\) while our active one only has \(kd_{X}\varepsilon^{-2}\), which demonstrates the benefits of our algorithm in unevenly distributed source space.

Comparison with previous active learning.By using the same discrete reduction and set single target \(w_{0}\), we compare our result with the current state-of-art active representation algorithm in [23]. They achieves \(\widetilde{\mathcal{O}}(kd_{X}\|\nu\|_{1}^{2}\varepsilon^{-2})\), where \(\nu=\arg\min_{\nu}\|\nu\|_{1}\) s.t \(B_{W}\nu=B_{W}w_{0}\). On the other hand, our active one gives \(\widetilde{\mathcal{O}}(kd_{X}\|w^{*}\|_{2}^{2}\varepsilon^{-2})\), where \(w^{*}=\arg\min_{\nu}\|\nu\|_{2}\) s.t \(B_{W}\nu=B_{W}w_{0}\), which is strictly better than the discrete one. This again indicates the separation between continuous and discrete cases where in fixed discrete sets, the \(L_{1}\) norm regularization is strictly better than \(L_{2}\).

Furthermore, when a fixed discrete set is given, which is exactly the setting in [23]. Their algorithm can be seen as a computationally efficient reduction under ours.(Appendix B.5.)

Save task number.When ignoring the short-term initial warm-up stage, we only require maintaining \(\widetilde{\mathcal{O}}(k+\log(N_{\text{total}}k^{*}))\) number of source tasks, where the first term comes from \(q_{1}\) in the target-agnostic stage and the second term comes from \(q_{2}\) in the target-aware stage.

## 5 Experiment

In this section, we provide experimental results under different instantiations of the Algorithm 1, and all of them show the effectiveness of our strategy both in target-aware and target-agnostic settings.

### Settings

Datasets and problem definition.Our results cover the different combinations of \(\psi_{X},\phi_{X},\psi_{W}\) as shown in Table 1. Here we provide a brief introduction for the three datasets and postpone the details into Appendix E. 2

Footnote 2: Github Link: https://github.com/cloudwaysX/ALMultiTask_Robotics

* **Synthetic data.** We generate data that strictly adhere to our data-generating assumptions and use the same architecture for learning and predicting. When \(\phi_{X}\) is nonlinear, we use a neural network \(\phi_{X}\) to generate data and use a slightly larger neural net for learning. The goal for synthetic data is to better illustrate our algorithm as well as serve as the first step to extend our algorithm on various existing datasets.
* **Pendulum simulator.** To demonstrate our algorithm in the continuous space. we adopt the multi-environment pendulum model in [24] and the goal is to learn a \(w\)-dependent residual dynamics model \(f(x,w)\in\mathbb{R}\) where \(x\) is the pendulum state and \(w\in\mathbb{R}^{5}\) including external wind, gravity and damping coefficients. \(f(x,w)\) is highly nonlinear with respective to \(x\) and \(w\). Therefore we use known non-linear feature operators \(\psi_{X},\psi_{W}\). In other words, this setting can be regarded as a misspecified linear model. It is also worth noting that due to the non-invertibility of \(\psi_{W}\), the explicit selection of a source via a closed form is challenging. Instead, we resort to an adaptive sampling-based method discussed in Section 3. Specifically, we uniformly sample \(w\) from the source space, select the best \(w^{\prime}\), and then uniformly sample around this \(w^{\prime}\) at a finer grain. Our findings indicate that about 5 iterations are sufficient to approximate the most relevant source.
* **Real-world drone flight dataset [7].** The Neural-Fly dataset [7] includes real flight trajectories using two different drones in various wind conditions. The objective is to learn the residual

\begin{table}
\begin{tabular}{|l|l|l|} \hline  & identity \(\psi_{W}\) & nonlinear \(\psi_{W}\) \\ \hline identity \(\psi_{X}\) and linear \(\phi_{X}\) & synthetic, drone & NA \\ \hline nonlinear \(\psi_{X}\) and linear \(\phi_{X}\) & synthetic & pendulum simulator \\ \hline identity \(\psi_{X}\) and nonlinear \(\phi_{X}\) & synthetic, drone & NA \\ \hline \end{tabular}
\end{table}
Table 1: Summary of different instantiationsaerodynamics model \(f(x,w)\in\mathbb{R}^{3}\) where \(x\in\mathbb{R}^{11}\) is the drone state (including velocity, attitude, and motor speed) and \(w\) is the environment condition (including drone types and wind conditions). We collect 6 different \(w\) and treat each dimension of \(f(x,w)\) as a separate task. Therefore \(w\) is reformulated as a one-hot encoded vector in \(\mathbb{R}^{18}\).

For each dataset/problem, we can choose different targets. For simplicity, in the following subsection, we present results for one target task for each problem with 10 random seeds regarding random data generation and training, and put more results in Appendix E. In all the experiments, we use a gradient-descent joint training oracle, which is a standard approach in representation learning.

### Results

Those results encapsulate the effectiveness of active learning in terms of budget utilization and test loss reduction. In the drone dataset, we further demonstrate its ability in identifying relevant source tasks (see Figure 2). We note that in two robotics problems (pendulum simulation and real-world drone dataset), the active learning objective is to learn _a better dynamics model_. However, in the pendulum simulation, we deploy a model-based nonlinear controller which translates better dynamics modeling to enhanced control performance (see Figure 1 and Appendix E.2).

\begin{table}
\begin{tabular}{|l|l|l|} \hline  & Target-aware AL & Target-agnostic AL \\ \hline identity \(\psi_{X}\) and linear \(\phi_{X}\) & 38.7\% & 51.6\% \\ \hline nonlinear \(\psi_{X}\) and linear \(\phi_{X}\) & 38.7\% & 45.2\% \\ \hline identity \(\psi_{X}\) and non-linear \(\phi_{X}\) & 32.0\% & 68.0\% \\ \hline \end{tabular}
\end{table}
Table 2: Results on synthetic data. Using the test loss of the final output model from passive learning as a baseline, we show the ratio between the budget required by target-aware/target-agnostic active learning to achieve a similar loss and the budget required by passive learning.

Figure 1: Results on pendulum simulator for a specific target. **Left:** The test loss of the estimated model \(\hat{f}\). The passive strategy suffers from negative transfer while the active strategy steadily decreases. **Right:** The control error using final output \(\hat{f}\). Here we use a model-based nonlinear policy \(\pi(x,\hat{f})\). The model learned from active strategy leads to better control performance.

Figure 2: Results on the real drone dataset [7] with target drone_type_A_30_z. Source data includes two drone types A and B, six wind speeds from 0 to 50, and three directions x-y-z. We present results for linear \(\phi_{X}\) here and postpone the non-linear \(\phi_{X}\) case in Appendix E.3. **Left:** The test loss of the estimated bilinear model \(\hat{f}\). The passive strategy converges slower than the active strategy. **Right:** Top 10 the most similar source tasks. Given the target environment, the algorithm successfully finds the other drone_type_A environments as relevant sources. See more explanations in Appendix E.3.

## References

* [1]G. Shi, X. Shi, M. O'Connell, R. Yu, K. Azizzadenesheli, A. Anandkumar, Y. Yue, and S. Chung (2019) Neural lander: stable drone landing control using learned dynamics. In 2019 International Conference on Robotics and Automation (ICRA), pp. 9784-9790. Cited by: SS1.
* [2]J. Lee, J. Hwangbo, L. Wellhausen, V. Koltun, and M. Hutter (2020) Learning quadrupedal locomotion over challenging terrain. Science robotics5 (47), pp. eabc5986. Cited by: SS1.
* [3]A. Radford, J. W. Kim, C. Hallacy, A. Ramesh, G. Goh, S. Agarwal, G. Sastry, A. Askell, P. Mishkin, J. Clark, et al. (2021) Learning transferable visual models from natural language supervision. arXiv preprint arXiv:2103.00020. Cited by: SS1.
* [4]T. B. Brown, B. Mann, N. Ryder, M. Subbiah, J. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam, G. Sastry, A. Askell, et al. (2020) Language models are few-shot learners. arXiv preprint arXiv:2005.14165. Cited by: SS1.
* [5]J. Yu, Z. Wang, V. Vasudevan, L. Yeung, M. Seyedhosseini, and Y. Wu (2022) COCA: contrastive captioners are image-text foundation models. arXiv preprint arXiv:2205.01917. Cited by: SS1.
* [6]J. A. Alayrac, J. Donahue, P. Luc, A. Miech, I. Barr, Y. Hasson, K. Lenc, A. Mensch, K. Millican, M. Reynolds, et al. (2022) Flamingo: a visual language model for few-shot learning. Advances in Neural Information Processing Systems35, pp. 23716-23736. Cited by: SS1.
* [7]M. O'Connell, G. Shi, X. Shi, K. Azizzadenesheli, A. Anandkumar, Y. Yue, and S. Chung (2022) Neural-fly enables rapid learning for agile flight in strong winds. Science Robotics7 (66), pp. eabm6597. Cited by: SS1.
* [8]Y. Chen, K. Jamieson, and S. Du (2022) Active multi-task representation learning. In International Conference on Machine Learning, pp. 3271-3298. Cited by: SS1.
* [9]S. Du, W. Hu, S. M. Kakade, J. D. Lee, and Q. Lei (2021) Few-shot learning via learning the representation, provably. Cited by: SS1.
* [10]N. Tripuraneni, M. I. Jordan, and C. Jin (2020) On the theory of transfer learning: the importance of task diversity. Cited by: SS1.
* [11]N. Tripuraneni, C. Jin, and M. Jordan (2021) Provable meta-learning of linear representations. In International Conference on Machine Learning, pp. 10434-10443. Cited by: SS1.
* [12]K. K. Thekumparampil, P. Jain, P. Netrapalli, and S. Oh (2021) Sample efficient linear meta-learning by alternating minimization. arXiv preprint arXiv:2105.08306. Cited by: SS1.
* [13]Z. Xu and A. Tewari (2021) Representation learning beyond linear prediction functions. Advances in Neural Information Processing Systems34, pp. 4792-4804. Cited by: SS1.
* [14]L. Collins, A. Mokhtari, S. Oh, and S. Shakkottai (2022) Maml and anil provably learn representations. In International Conference on Machine Learning, pp. 4238-4310. Cited by: SS1.
* [15]A. Rahimi and B. Recht (2008) Uniform approximation of functions with random bases. In 2008 46th annual allerton conference on communication, control, and computing, pp. 555-561. Cited by: SS1.
* [16]M. J. Todd (2016) Minimum-volume ellipsoids: theory and algorithms. SIAM. Cited by: SS1.
* [17]Y. Akimoto, Y. Nagata, I. Ono, and S. Kobayashi (2012) Theoretical foundation for cma-es from information geometry perspective. Algorithmica64, pp. 698-716. Cited by: SS1.

[MISSING_PAGE_POST]

* [18] Aniruddh Raghu, Maithra Raghu, Samy Bengio, and Oriol Vinyals. Rapid learning or feature reuse? towards understanding the effectiveness of maml. _arXiv preprint arXiv:1909.09157_, 2019.
* [19] Alex Nichol and John Schulman. Reptile: a scalable metalearning algorithm. _arXiv preprint arXiv:1803.02999_, 2(3):4, 2018.
* [20] Antreas Antoniou, Harrison Edwards, and Amos Storkey. How to train your maml. _arXiv preprint arXiv:1810.09502_, 2018.
* [21] Timothy Hospedales, Antreas Antoniou, Paul Micaelli, and Amos Storkey. Meta-learning in neural networks: A survey. _IEEE transactions on pattern analysis and machine intelligence_, 44(9):5149-5169, 2021.
* [22] Shuxiao Chen, Koby Crammer, Hangfeng He, Dan Roth, and Weijie J. Su. Weighted training for cross-task learning, 2021.
* [23] Yiping Wang, Yifang Chen, Kevin Jamieson, and Simon Shaolei Du. Improved active multi-task representation learning via lasso. In Andreas Krause, Emma Brunskill, Kyunghyun Cho, Barbara Engelhardt, Sivan Sabato, and Jonathan Scarlett, editors, _Proceedings of the 40th International Conference on Machine Learning_, volume 202 of _Proceedings of Machine Learning Research_, pages 35548-35578. PMLR, 23-29 Jul 2023. URL https://proceedings.mlr.press/v202/wang23b.html.
* [24] Guangya Shi, Kamyar Azizzadenesheli, Michael O'Connell, Soon-Jo Chung, and Yisong Yue. Meta-adaptive nonlinear control: Theory and algorithms. _Advances in Neural Information Processing Systems_, 34:10013-10025, 2021.
* [25] Trevor Standley, Amir Zamir, Dawn Chen, Leonidas Guibas, Jitendra Malik, and Silvio Savarese. Which tasks should be learned together in multi-task learning? In _International Conference on Machine Learning_, pages 9120-9132. PMLR, 2020.
* [26] Rahul Ramesh and Pratik Chaudhari. Model zoo: A growing" brain" that learns continually. _arXiv preprint arXiv:2106.03027_, 2021.
* [27] Chris Fifty, Ehsan Amid, Zhe Zhao, Tianhe Yu, Rohan Anil, and Chelsea Finn. Efficiently identifying task groupings for multi-task learning. _Advances in Neural Information Processing Systems_, 34:27503-27516, 2021.
* [28] Chelsea Finn, Pieter Abbeel, and Sergey Levine. Model-agnostic meta-learning for fast adaptation of deep networks. In _International conference on machine learning_, pages 1126-1135. PMLR, 2017.
* [29] Hae Beom Lee, Hayeon Lee, Donghyun Na, Saehoon Kim, Minseop Park, Eunho Yang, and Sung Ju Hwang. Learning to balance: Bayesian meta-learning for imbalanced and out-of-distribution tasks. _arXiv preprint arXiv:1905.12917_, 2019.
* [30] Liam Collins, Aryan Mokhtari, and Sanjay Shakkottai. Task-robust model-agnostic meta-learning. _Advances in Neural Information Processing Systems_, 33:18860-18871, 2020.
* [31] Xingcheng Yao, Yanan Zheng, Xiaocong Yang, and Zhilin Yang. Nlp from scratch without large-scale pretraining: A simple and efficient framework. In _International Conference on Machine Learning_, pages 25438-25451. PMLR, 2022.
* [32] Sang Michael Xie, Shibani Santurkar, Tengyu Ma, and Percy Liang. Data selection for language models via importance resampling. _arXiv preprint arXiv:2302.03169_, 2023.
* [33] Samir Yitzhak Gadre, Gabriel Ilharco, Alex Fang, Jonathan Hayase, Georgios Smyrnis, Thao Nguyen, Ryan Marten, Mitchell Wortsman, Dhruba Ghosh, Jieyu Zhang, et al. Datacomp: In search of the next generation of multimodal datasets. _arXiv preprint arXiv:2304.14108_, 2023.