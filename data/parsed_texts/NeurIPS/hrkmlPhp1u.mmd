# UniPC: A Unified Predictor-Corrector Framework for Fast Sampling of Diffusion Models

Wenliang Zhao

Equal contribution. \({}^{\dagger}\)Corresponding author.

Lujia Bai

Equal contribution. \({}^{\dagger}\)Corresponding author.

Yongming Rao

Jie Zhou

Jiwen Lu

Tsinghua University

Equal contribution. \({}^{\dagger}\)Corresponding author.

###### Abstract

Diffusion probabilistic models (DPMs) have demonstrated a very promising ability in high-resolution image synthesis. However, sampling from a pre-trained DPM is time-consuming due to the multiple evaluations of the denoising network, making it more and more important to accelerate the sampling of DPMs. Despite recent progress in designing fast samplers, existing methods still cannot generate satisfying images in many applications where fewer steps (_e.g._, \(<\)10) are favored. In this paper, we develop a unified corrector (UniC) that can be applied after any existing DPM sampler to increase the order of accuracy without extra model evaluations, and derive a unified predictor (UniP) that supports arbitrary order as a byproduct. Combining UniP and UniC, we propose a unified predictor-corrector framework called UniPC for the fast sampling of DPMs, which has a unified analytical form for any order and can significantly improve the sampling quality over previous methods, especially in extremely few steps. We evaluate our methods through extensive experiments including both unconditional and conditional sampling using pixel-space and latent-space DPMs. Our UniPC can achieve 3.87 FID on CIFAR10 (unconditional) and 7.51 FID on ImageNet 256\(\times\)256 (conditional) with only 10 function evaluations. Code is available at [https://github.com/wl-zhao/UniPC](https://github.com/wl-zhao/UniPC).

## 1 Introduction

Diffusion probabilistic models (DPMs) [33, 13, 35] have become the new prevailing generative models and have achieved competitive performance on many tasks including image synthesis [8, 29, 13], video synthesis [15], text-to-image generation [27, 29, 12], voice synthesis [5], _etc_. Different from GANs [10] and VAEs [20], DPMs are trained to explicitly match the gradient of the data density (_i.e._, score), which is more stable and less sensitive to hyper-parameters. However, sampling from a pre-trained DPM usually requires multiple model evaluations to gradually perform denoising from Gaussian noise [13], consuming more inference time and computational costs compared with single-step generative models like GANs.

Recently, there have been increasing efforts to accelerate the sampling of DPMs [31, 28, 34, 25, 40]. Among those, training-free methods [34, 25, 40] enjoy a wider usage in applications because they can be directly applied to off-the-shelf pre-trained DPMs. Although these methods have significantly reduced the sampling steps from 1000 to less than 20 steps, the sampling quality with extremely few steps (_e.g._, \(<\)10) has been rarely investigated. Few-step sampling can be used in many scenarios where we need to efficiently obtain plausible samples, such as designing a proper prompt for a text-to-image diffusion model [29, 30] and computing losses on the generated samples during the training of some diffusion-based visual systems [1, 6]. However, current fast samplers usually struggle to generate high-quality samples within 10 steps (see Figure 1).

In this paper, we propose a training-free framework for the fast sampling of DPMs called _UniPC_. We find that UniPC significantly outperforms existing methods within 5\(\sim\)10 NFE (number of function evaluations), and can also achieve better sampling quality with more sampling steps. Specifically, we first develop a unified corrector (UniC) which works by using the the model output \(\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i}},t_{i})\) at the current timestep \(t_{i}\) to obtain a refined \(\mathbf{x}_{t_{i}}^{c}\). Different from the predictor-corrector paradigm in numerical ODE solver that requires a doubled NFE, our UniC reuses the model output \(\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i}},t_{i})\) to the next sampling step, thus introducing no extra function evaluation. UniC can be applied after any existing DPM sampler to increase the order of accuracy, while the inference speed is almost unaffected. Interestingly, we also find that by simply changing a hyper-parameter in UniC, a new family of predictors (UniP) can be further obtained.

Since our UniC is method-agnostic, we combine UniP and UniC to obtain a new family of fast samplers called UniPC. Different from previous fast solvers [26; 25; 40] that either have no higher-order (_e.g._, \(>3\)) variants or have no explicit forms, our UniPC supports arbitrary orders with a unified analytical expression and are easy to implement. Benefiting from the universal design, variants of UniPC (_e.g._, misglestpe/multistep, noise/data prediction) can be easily derived. We theoretically prove that UniPC enjoys higher convergence order and empirically demonstrate that UniPC has better sampling quality in a variety of scenarios. We also show that the inference speed and memory usage of UniPC is similar to DPM-Solver++ [26], indicating that UniPC can achieve superior performance under the same computational budgets.

We conduct extensive experiments with both pixel-space and latent-space DPMs to verify the effectiveness of the proposed UniPC. Our results show that UniPC performs consistently better than previous state-of-the-art methods on both unconditional and conditional sampling tasks. Notably, UniPC can achieve 3.87 FID on CIFAR10 (unconditional) and 7.51 FID on ImageNet \(256\times 256\) (conditional) with only 10 function evaluations. We also demonstrate that UniC can improve the sampling quality of several existing fast samplers significantly with very few NFE (number of function evaluations). Some qualitative comparisons are shown in Figure 1, where we observe that our UniPC can generate images with more visual details than other methods.

## 2 Background and Related Work

### Diffusion Probabilistic Models

For a random variable \(\mathbf{x}_{0}\) with an unknown distribution \(q_{0}(\mathbf{x}_{0})\), Diffusion Probabilistic Models (DPMs) [33; 13; 19] transit \(q_{0}(\mathbf{x}_{0})\) at time \(0\) to a normal distribution \(q_{T}(\mathbf{x}_{T})\approx\mathcal{N}(\mathbf{x}_{T}|\mathbf{0},\tilde{\sigma}^{2}\mathbf{I})\) at time \(T\) for some \(\tilde{\sigma}>0\) by gradually adding Gaussian noise to the observation \(\mathbf{x}_{0}\). For each time \(t\in[0,T]\), and given \(\sigma_{t},\alpha_{t}>0\), the Gaussian transition is

\[q_{t|0}(\mathbf{x}_{t}|\mathbf{x}_{0})=\mathcal{N}(\mathbf{x}_{t}|\alpha_{t}\mathbf{x}_{0}, \sigma_{t}^{2}\mathbf{I}),\]

where \(\alpha_{t}^{2}/\sigma_{t}^{2}\) (the _signal-to-noise-ratio_ (SNR)) is strictly decreasing w.r.t. \(t\)[19].

Figure 1: **Qualitative comparisons between our UniPC and previous methods.** All images are generated by sampling from a DPM trained on ImageNet 256\(\times\)256 with only 7 number of function evaluations (NFE) and a classifier scale of 8.0. We show that our proposed UniPC can generate more plausible samples with more visual details compared with previous first-order sampler [34] and high-order samplers [40; 26]. Best viewed in color.

Let \(\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t},t)\) denote the noise prediction model using data \(\mathbf{x}_{t}\) to predict the noise \(\mathbf{\epsilon}\), and the parameter \(\theta\) is obtained by minimizing

\[\mathbb{E}_{\mathbf{x}_{0},\mathbf{\epsilon},t}[\omega(t)\|\mathbf{\epsilon}_{\theta}(\mathbf{x} _{t},t)-\mathbf{\epsilon}\|_{2}^{2}],\]

where \(\mathbf{x}_{0}\sim q_{0}(\mathbf{x}_{0})\), \(t\in\mathcal{U}[0,T]\), and the weight function \(\omega(t)>0\). Sampling from DPMs can be achieved by solving the following diffusion ODEs [35]:

\[\frac{\mathrm{d}\mathbf{x}_{t}}{\mathrm{d}t}=f(t)\mathbf{x}_{t}+\frac{g^{2}(t)}{2\sigma _{t}}\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t},t),t\in[0,T],\quad\mathbf{x}_{T}\sim\mathcal{ N}(\mathbf{0},\tilde{\sigma}^{2}\mathbf{I}) \tag{1}\]

where \(f(t)=\frac{\mathrm{d}\log\alpha_{t}}{\mathrm{d}t}\), \(g^{2}(t)=\frac{\mathrm{d}\sigma_{t}^{2}}{\mathrm{d}t}-2\frac{\mathrm{d}\log \alpha_{t}}{\mathrm{d}t}\sigma_{t}^{2}\).

### Fast Sampling of DPMs

Fast samplers of DPMs can be either training-based [31; 2; 37] or training-free [25; 26; 40; 24; 41]. Training-based samplers require further training costs while training-free methods directly use the original information without re-training and are easy to implement in conditional sampling. The essence of training-free samplers is solving stochastic differential equations (SDEs)[13; 35; 3; 41] or ODEs[26; 40; 24; 34; 25]. Other fast sampling methods include modifying DPMs [9] and the combination with GANs [38; 36].

Among others, samplers solving diffusion ODEs are found to converge faster for the purpose of sampling DPMs [34; 35]. Recent works [40; 25; 26] show that ODE solvers built on exponential integrators [17] appear to have faster convergence than directly solving the diffusion ODE (1). The solution \(\mathbf{x}_{t}\) of the diffusion ODE given the initial value \(\mathbf{x}_{s}\) can be analytically computed as [25]:

\[\mathbf{x}_{t}=\frac{\alpha_{t}}{\alpha_{s}}\mathbf{x}_{s}-\alpha_{t}\int_{\lambda_{s}} ^{\lambda_{t}}e^{-\lambda}\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda}, \lambda)\mathrm{d}\lambda, \tag{2}\]

where we use the notation \(\hat{\mathbf{\epsilon}}_{\theta}\) and \(\hat{\mathbf{x}}_{\lambda}\) to denote changing from the domain of time(\(t\)) to the domain of half log-SNR(\(\lambda\)), _i.e._, \(\lambda_{t}=\log(\alpha_{t}/\sigma_{t})\), \(\hat{\mathbf{x}}_{\lambda}:=\mathbf{x}_{t_{\lambda}(\lambda)}\) and \(\hat{\mathbf{\epsilon}}_{\theta}(\cdot,\lambda):=\mathbf{\epsilon}_{\theta}(\cdot,t_{ \lambda}(\lambda))\).

Based on the exponential integrator, [25] proposes to approximate \(\hat{\mathbf{\epsilon}}_{\theta}\) via taylor expansion and views DDIM as DPM-Solver-1, i.e.,

\[\tilde{\mathbf{x}}_{t_{i}}=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\tilde{\mathbf{x}}_ {t_{i-1}}-\sigma_{t_{i}}(e^{\lambda_{t_{i}}-\lambda_{t_{i-1}}}-1)\mathbf{\epsilon }_{\theta}(\hat{\mathbf{x}}_{t_{i-1}},t_{i-1}). \tag{3}\]

[26] considers rewriting (2) using \(\hat{\mathbf{x}}_{\theta}\) instead of \(\hat{\mathbf{\epsilon}}_{\theta}\); [40] derives the taylor expansion formulae with respect to \(t\) instead of the half log-SNR(\(\lambda\)). [24] employs pseudo numerical methods such as Runge-Kutta method directly for the updating of \(\mathbf{\epsilon}_{\theta}\) of (3). Although many aforementioned high-order solvers are proposed, existing solvers of diffusion ODEs can be explicitly computed for orders not greater than 3, due to the lack of analytical forms.

## 3 A Unified Predictor-Corrector Solver

In this section, we propose a unified predictor-corrector solver of DPMs called UniPC, consisting of UniP and UniC. Our UniPC is unified in mainly two aspects: 1) the predictor (UniP) and the corrector (UniC) share the same analytical form; 2) UniP supports arbitrary order and UniC can be applied after off-the-shelf fast samplers of DPMs to increase the order of accuracy.

### The Unified Corrector UniC-\(p\)

Modern fast samplers based on discretizing diffusion ODEs [25; 34; 40] aim to leverage the previous \(p\) points \(\{\tilde{\mathbf{x}}_{t_{i-k}}\}_{k=1}^{p}\) to estimate \(\tilde{\mathbf{x}}_{t_{i}}\) with \(p\) order of accuracy. Despite the rapid development of fast samplers, the quality of few-step sampling still has room for improvement. In this paper, we propose a corrector called UniC-\(p\) to improve the initial estimation using not only the previous \(p\) points but also the current point. Formally, after obtaining the initial estimation \(\tilde{\mathbf{x}}_{t_{i}}\), we perform the correction step through the following formula:

\[\tilde{\mathbf{x}}_{t_{i}}^{c}=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\tilde{\mathbf{ x}}_{t_{i-1}}^{c}-\sigma_{t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\tilde{ \mathbf{x}}_{t_{i-1}},t_{i-1})-\sigma_{t_{i}}B(h_{i})\sum_{m=1}^{p}\frac{a_{m}}{r _{m}}D_{m}, \tag{4}\]where \(\tilde{\mathbf{x}}_{t_{i}}^{c}\) denotes the corrected result, \(B(h)=\mathcal{O}(h)\) is a non-zero function of \(h\), \(h_{i}=\lambda_{t_{i}}-\lambda_{t_{i-1}}\) is the step size in the half-log-SNR(\(\lambda\)) domain, \(r_{1}<r_{2}<\cdots<r_{p}=1\) are a non-zero increasing sequence, determining which previous points are used. Specifically, we use \(\{r_{i}\}_{m=1}^{p}\) to interpolate between \(\lambda_{t_{i-1}}\) to \(\lambda_{t_{i}}\) to obtain the auxiliary timesteps \(s_{m}=t_{\lambda}(r_{m}h+\lambda_{t_{i-1}}),m=1,2,\ldots,p\). The model outputs at these timesteps are used to compute \(D_{m}\) by

\[D_{m}=\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{s_{m}},s_{m})-\mathbf{ \epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i-1}},t_{i-1}). \tag{5}\]

We now describe how to choose \(\{a_{m}\}_{m=1}^{p}\) in UniC-\(p\) to effectively increase the order of accuracy. The main idea is to cancel out low-order terms between the numerical estimation (4) and the theoretical solution (2). In practice, we expand the exponential integrator in (2) as follows:

\[\mathbf{x}_{t_{i}}= \frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x}_{t_{i-1}}-\sigma_{ t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1})\] \[-\sigma_{t_{i}}\sum_{k=1}^{p}h_{i}^{k+1}\varphi_{k+1}(h_{i})\mathbf{ \hat{\epsilon}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i- 1}})+\mathcal{O}(h^{p+2}). \tag{6}\]

where \(\hat{\mathbf{\epsilon}}^{(k)}_{\theta}\) denotes the \(k\)-th derivative of \(\hat{\mathbf{\epsilon}}_{\theta}\), and \(\varphi_{k}(h)\) can be analytically computed [16]. The \(\{a_{m}\}_{m=1}^{p}\) can be then determined by matching the coefficients between (4) and (6). In the following theorem, we show that UniC-\(p\) has an order of accuracy \(p+1\) (see Appendix E.3 for detailed proof).

**Theorem 3.1** (The Order of Accuracy of UniC-\(p\)).: _For any non-zero sequence \(\{r_{i}\}_{i=1}^{p}\) and \(h>0\), define_

\[\mathbf{R}_{p}(h)=\begin{pmatrix}1&1&\cdots&1\\ r_{1}h&r_{2}h&\cdots&r_{p}h\\ \cdots&\cdots&\cdots&\cdots\\ r_{1}h)^{p-1}&(r_{2}h)^{p-1}&\cdots&(r_{p}h)^{p-1}\end{pmatrix}.\]

_Let \(\mathbf{\phi}_{p}(h)=\left(\phi_{1}(h),\cdots,\phi_{p}(h)\right)^{\top}\) with \(\phi_{n}(h)=h^{n}n!\varphi_{n+1}(h)\), where \(\varphi_{n}(h)\) is defined by the recursive relation [16]:_

\[\varphi_{n+1}(h)=\frac{\varphi_{n}(h)-1/n!}{h},\quad\varphi_{0}(h)=e^{h}.\]

_For an increasing sequence \(r_{1}<r_{2}<\cdots<r_{p}=1\), suppose \(\mathbf{a}_{p}:=(a_{1},\ldots,a_{p})^{\top}\) satisfies,_

\[|\mathbf{R}_{p}(h_{i})\mathbf{a}_{p}B(h_{i})-\mathbf{\phi}_{p}(h_{i})|=\mathcal{O}(h_{i}^ {p+1}), \tag{7}\]

_where \(|\cdot|\) denotes the \(l_{1}\) norm for matrix. Then, under regularity conditions in Appendix E.2, UniC-\(p\) of (4) will have \((p+1)\)-th order of accuracy._

The monotonicity of \(\{r_{i}\}_{i=1}^{p}\) ensures the invertibility of the Vandermonde matrix \(\mathbf{R}_{p}\). Therefore, we can take \(\mathbf{a}_{p}=\mathbf{R}_{p}^{-1}(h_{i})\mathbf{\phi}_{p}(h_{i})/B(h_{i})\) as the coefficient vector for (4) for simplicity, where \(B(h)\)can be any function of \(h\) such that \(B(h)=\mathcal{O}(h)\), for example \(B_{1}(h)=h\), \(B_{2}(h)=e^{h}-1\). The detailed implementation of UniC is shown in Algorithm 1. Importantly, we circumvent the extra evaluation of \(\mathbf{\epsilon}_{\mathbf{\theta}}(\tilde{\mathbf{x}}_{t_{i}}^{c},t_{i})\) by pushing \(\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i}},t_{i})\) into the buffer \(Q\) instead of \(\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i}}^{c},t_{i})\). Taking full advantage of \(\mathbf{\epsilon}_{\mathbf{\theta}}(\tilde{\mathbf{x}}_{t_{i}},t_{i})\) of previous results enables us to increase the order of accuracy without incurring significant increment of computation cost. This makes our method inherently different from the predictor-corrector methods in ODE literature [22], where the computational costs are doubled because an extra function evaluation on the corrected \(\tilde{\mathbf{x}}_{t_{i}}^{c}\) is required for each step.

### The Unified Predictor UniP-\(p\)

We find that the order of accuracy of UniC does not depend on the specific choice of the sequence \(\{r_{i}\}_{i=1}^{p}\), which motivates us to design \(p\)-order unified predictor (UniP-\(p\)) which only leverages the previous \(p\) data points by excluding \(D_{p}\) in (4) since \(D_{p}\) involves \(\tilde{\mathbf{x}}_{t_{i}}\). The order of accuracy is guaranteed by the following corollary.

**Corollary 3.2** (The Order of Accuracy of UniP-\(p\)).: _For an increasing sequence \(r_{1}<r_{2}<\cdots<r_{p-1}<1\), the solver given in (4) dropping the term \(D_{p}\) and using coefficients that satisfies_

\[|\mathbf{R}_{p-1}(h_{i})\mathbf{a}_{p-1}B(h_{i})-\mathbf{\phi}_{p-1}(h_{i})|=\mathcal{O}(h _{i}^{p}) \tag{8}\]

_has \(p\)-th order of accuracy._

Due to the unified form of UniP and UniC, we can use UniP-\(p\) as the implementation of the Solver-p in UniC-\(p\) to obtain a new family of solvers called UniPC-\(p\). Theorem 3.1 and Corollary 3.2 ensure that UniPC-\(p\) can achieve \((p+1)\)-th order of accuracy. Moreover, under additional regularity conditions in Appendix D, based on Theorem 3.1 and Corollary 3.2, we show that the order of convergence of UniPC-\(p\) reaches \(p+1\) (see Appendix D).

### Comparison with Existing Methods

Here we discuss the connection and the difference between UniPC and previous methods. When \(p=1\), UniPC will reduce to DDIM [34]. Motivated by linear multistep approaches, PNDM [24] proposes to use pseudo numerical methods for DDIM, while our UniPC makes use of information in the ODE solution (2) and is specially designed for diffusion ODEs. DEIS [40] is built on exponential integrators in the time domain, where the integral cannot be analytically computed and explicit formulae for high-order solvers cannot be derived. By using the half log-SNR \(\lambda\)[25; 26], it is shown that the application of integration-by-parts can simplify the integration of (2) and leads to explicit expansion of \(\mathbf{x}_{t}\). DPM-Solver-2 [25] lies in our UniPC framework as UniP-1, where they assume \(B(h)=e^{h}-1\). We find through our numerical analysis that \(B(h)\) can be any non-degenerate function such that \(B(h)=\mathcal{O}(h)\). Furthermore, DPM-Solvers do not admit unified forms even for orders smaller than \(3\), which adds to the challenge of obtaining algorithms for higher orders. In contrast, our UniPC exploits the structure of exponential integrators w.r.t. half log-SNR and admits not only simple and analytical solutions for efficient computation but also unified formulations for easy implementation of any order.

### Implementation

By setting \(r_{m}=(\lambda_{t_{i-m-1}}-\lambda_{t_{i}})/h_{i}\), \(m=1,\ldots,p-1\), the UniPC-\(p\) updates in a multistep manner, which reuses the previous evaluation results and proves to be empirically more efficient, especially for limited steps of model evaluation [11; 26], while singlestep methods might incur higher computation cost per step. Therefore, we use multistep UniPC in our experiments by default. The detailed algorithms for multistep UniPC and the proof of convergence can be found in Appendix B. For UniPC, the choices of \(\{r_{i}\}_{i=1}^{p-1}\) determine different updating methods. If all the values are in \((0,1]\), the UniPC will switch to singlestep. Notably, we find in experiments that our UniC consistently improves different updating methods. Besides, we find UniP-2 (8) and UniC-1 (7) degenerate to a simple equation where only a single \(a_{1}\) is unknown, where we find \(a_{1}=0.5\) can be a solution for both \(B_{1}(h)\) and \(B_{2}(h)\) (see Appendix F) independent of \(h\). In Appendix C, we provide another variant of UniPC called UniPC\({}_{v}\) where the coefficients do not depend on \(h\) for arbitrary order \(p\).

In the conditional inference, guided sampling [14; 8] is often employed. Recent works [30; 26] find that thresholding data prediction models can boost the sampling quality and mitigate the problem of train-test mismatch. Our framework of UniPC can be easily adapted to the data prediction model, see Appendix A for algorithms and theoretical analysis. The detailed algorithms for multistep UniPC for data prediction are in Appendix B. Hence, UniPC with data prediction can achieve fast conditional sampling in extremely few steps through dynamic thresholding.

## 4 Experiments

In this section, we show that our UniPC can significantly improve the sampling quality through extensive experiments. Our experiments cover a wide range of datasets, where the image resolution ranges from 32\(\times\)32 to 256\(\times\)256. Apart from the standard image-space diffusion models [35; 8], we also conduct experiments on the recent prevailing stable-diffusion [29] trained on latent space. We will first present our main results in Section 4.1 and then provide a detailed analysis in Section 4.2.

### Main Results

We start by demonstrating the effectiveness of our UniPC on both unconditional sampling and conditional sampling tasks, with extremely few model evaluations (\(<\)10 NFE). For the sake of clarity, we compare UniPC with the previous state-of-the-art method DPM-Solver++ [26]. We have also conducted experiments with other methods including DDIM [34], DPM-Solver [25], DEIS [40], and PNDM [24]. However, since some of these methods perform very unstable in few-step sampling, we leave their results in Section 4.2 and Appendix G.

**Unconditional sampling.** We first compare the unconditional sampling quality of different methods on CIFAR10 [21], FFHQ [18], and LSUN Bedroom [39]. The pre-trained diffusion models are from [35] and [29], including both pixel-space and latent-space diffusion models. The results are shown in Figure 2. For DPM-Solver++, we use the multistep 3-order version due to its better performance. For UniPC, we use a combination of UniP-3 and UniC-3, thus the order of accuracy is 4. As shown in Figure 3, we find that our UniPC consistently achieves better sampling quality than DPM-Solver++ on different datasets, especially with fewer NFE. Notably, compared with DPM-Solver++, our UniPC improves the FID by 6.0, 5.9, and 8.5 on CIFAR10, LSUN Bedroom, and FFHQ, respectively. These results clearly demonstrate that our UniPC can effectively improve the unconditional sampling quality with few function evaluations.

**Conditional sampling.** Conditional sampling is more useful since it allows user-defined input to control the synthesized image. To evaluate the conditional sampling performance of our UniPC, we conduct experiments on two widely used guided sampling settings, including classifier guidance and classifier-free guidance. For classifier guidance, we use the pixel-space diffusion model trained on ImageNet 256\(\times\)256 [7] provided by [8]. Following DPM-Solver++, we use dynamic thresholding [30] to mitigate the gap between training and testing. The results are shown in Figure 2(a) and 2(b), where we compare our UniPC with DPM-Solver++ [26] under different guidance scale (\(s=8.0/4.0\)). For DPM-Solver++, we use the multistep 2-order version (2M), which achieves the best results

Figure 2: **Unconditional sampling results. We compare our UniPC with DPM-Solver++ [25] on CIFAR10, LSUN Bedroom, and FFHQ. We report the FID\(\downarrow\) of the methods with different numbers of function evaluations (NFE). Experimental results demonstrate that our method is consistently better than previous ones on both pixel-space DPMs and latent-space DPMs, especially with extremely few steps. For more results, we recommend refering to Table 8-10 in Appendix G.**

according to the original paper. For our UniPC, we use UniP-2 and UniC-2. It can be seen that our UniPC generates samples with better quality and converges rather faster than other methods. For classifier-free guidance, we adopt the latent-space diffusion model provided by stable-diffusion [29] and set the guidance scale as 1.5 following their original paper. To obtain the input texts, we randomly sample 10K captions from MS-COCO2014 validation dataset [23]. As discussed in [26], the FID of the text-to-image saturates in \(<\)10 steps, possibly because the powerful decoder can generate good image samples from non-converged latent codes. Therefore, to examine how fast a method converges, we follow [26] to compute the \(l_{2}\)-distance between the generated latent code \(\mathbf{x}_{0}\) and the true solution \(\mathbf{x}_{0}^{*}\) (obtained by running a 999-step DDIM), _i.e._, \(\|\mathbf{x}_{0}-\mathbf{x}_{0}^{*}\|_{2}/\sqrt{D}\), where \(D\) is the dimension of the latent code. For each text input, we use the same initial value \(\mathbf{x}_{T}^{*}\) sampled from Gaussian distribution for all the compared methods. It can be seen in Figure 2(c) that our UniPC consistently has a lower \(l_{2}\)-distance than DPM-Solver++, which indicates that UniPC converges faster in guided sampling.

### Analysis

In this section, we will provide more detailed analyses to further evaluate the effectiveness of UniPC.

**Ablation on the choice of \(B(h)\).** In Section 3, we mentioned that \(B(h)\) is set to be any non-zero function of \(h\) that satisfies \(B(h)=\mathcal{O}(h)\). We now investigate how the choice of \(B(h)\) would affect the performance of our UniPC. Specifically, we test two simple forms: \(B_{1}(h)=h\) and \(B_{2}(h)=e^{h}-1\) and the results are summarized in Table 1, where we also provide the performance of DPM-Solver++ [26] for reference. We show that UniPC with either implementation of \(B(h)\) can outperform DPM-Solver++. When the NFE is extremely small (5\(\sim\)6), we observe that \(B_{1}(h)\) consistently outperforms \(B_{2}(h)\) by 1\(\sim\)3 in FID. On the other hand, as the NFE increases, the performance of \(B_{2}(h)\) catches up and even surpasses \(B_{1}(h)\) in some experiments (_e.g._, on CIFAR10 and LSUN Bedroom). As for the guided sampling, we find \(B_{1}(h)\) is worse than \(B_{2}(h)\) consistently (see Appendix G for detailed results and discussions). These results also inspire us that our UniPC can be further improved by designing better \(B(h)\), which we leave to future work.

\begin{table}

\end{table}
Table 1: **Ablation on the choice of \(B(h)\).** We consider two implementations of \(B(h)\) and also provide the performance of DPM-Solver++ [26] for comparison. The results are measured by the FID(\(\downarrow\)) on CIFAR10 [21] and FFHQ [18]. We show that while the UniPC with both the two forms of \(B(h)\) can outperform DPM-Solver++, \(B_{1}(h)\) performs better at fewer sampling steps.

Figure 3: **Conditional sampling results. (a)(b) We compare the sample quality measured by FID\(\downarrow\) on ImageNet 256\(\times\)256 with guidance scale \(s=8.0/4.0\); (c) We adopt the text-to-image model provided by stable-diffusion [29] to compare the convergence error, which is measured by the \(l_{2}\) distance between the results of different methods and 1000-step DDIM. We show that our method outperforms previous ones with various guidance scales and NFE.**

**UniC for any order solver.** As shown in Algorithm 1, our UniC-\(p\) can be applied after any \(p\)-order solver to increase the order of accuracy. To verify this, we perform experiments on a wide range of solvers. The existing solvers for DPM can be roughly categorized by the orders or the updating method (_i.e._, singlestep or multistep). Since DPM-Solver++ [26] by design has both singlestep and multistep variants of 1\(\sim\)3 orders, we apply our UniC to different versions of DPM-Solver++ to see whether UniC can bring improvements. The results are reported in Table 2, where the sampling quality is measured by FID\(\downarrow\) on CIFAR10 by sampling from a pixel-space DPM [35]. We also provide the order of accuracy of each baseline method without/with our UniC. Apart from the DDIM [34], which can be also viewed as 1-order singlestep DPM-Solver++, we consider another 3 variants of DPM-Solver++ including 2-order multistep (2M), 3-order singlestep (3S) and 3-order multistep (3M). It can be found that our UniC can increase the order of accuracy of the baseline methods by 1 and consistently improve the sampling quality for the solvers with different updating methods and orders.

**Exploring the upper bound of UniC.** According to Algorithm 1, our UniC works by leveraging the rough prediction \(\tilde{\mathbf{x}}_{t_{i}}\) as another data point to perform correction and increase the order of accuracy. Note that to make sure there is no extra NFE, we directly feed \(\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i}},t_{i})\) to the next updating step instead of re-computing a \(\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i}}^{c},t_{i})\) for the corrected \(\tilde{\mathbf{x}}_{t_{i}}^{c}\). Although the error caused by the misalignment between \(\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i}},t_{i})\) and \(\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i}}^{c},t_{i})\) has no influence on the order of accuracy (as proved in Appendix E.7), we are still interested in how this error will affect the performance. Therefore, we conduct experiments where we re-compute the \(\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i}}^{c},t_{i})\) as the input for the next sampling step, which we name as "UniC-oracle". Due to the multiple function evaluations on each \(t_{i}\) for both \(\tilde{\mathbf{x}}_{t_{i}}\) and \(\tilde{\mathbf{x}}_{t_{i}}^{c}\), the real NFE for UniC-oracle is twice as the standard UniC for the same sampling steps. However, UniC-oracle is very helpful to explore the upper bound of UniC, and thus can be used in pre-experiments to examine whether the corrector is potentially effective. We compare the performance of UniC and UniC-oracle in Table 3, where we apply them to the DPM Solver++ [26] on LSUN Bedroom [39] and FFHQ [18] datasets. We observe that the UniC-oracle can significantly improve the sampling quality over the baseline methods. Although the approximation error caused by the misalignment makes UniC worse than UniC-oracle, we find that UniC can still remarkably increases the sampling quality over the baselines, especially with few sampling steps.

**Customizing order schedule via UniPC.** Thanks to the unified analytical form of UniPC, we are able to investigate the performance of arbitrary-order solvers and customize the order schedule freely. As a first attempt, we conduct experiments on CIFAR10 with our UniPC, varying the order schedule (the order at each sampling step). Some results are listed in Table 4, where we test different order schedules with NFE=6/7 because the search space is not too big. Note that the order schedule in Table 4 represents the order of accuracy of the UniP, while the actual order is increased by 1 because of UniC. Our default order schedule follows the implementation of DPM-Solver++ [26], where lower-order solvers are used in the final few steps. Interestingly, we find some customized order schedules can yield better results, such as 123432 for NFE=6 and 1223334 for NFE=7. We also show that simply increasing the order as much as possible is harmful to the sampling quality.

**Sampling diversity.** Apart from the sampling quality, we are also interested in the diversity of the images generated by UniPC. In Table 6, we compare the sampling diversity of UniPC and

\begin{table}
\begin{tabular}{c c c c c c} \hline \hline Sampling Method & \multicolumn{4}{c}{Sampling Steps} \\ \cline{2-6}  & 5 & 6 & 8 & 10 \\ \hline _LSUN Bedroom, Latent-space DPM_ & & & & & \\ \hline DPM Solver++ (126) & 17.79 & 8.03 & 4.04 & 3.63 \\ + UniC & 13.79 & 6.53 & 3.98 & 3.52 \\ + UniC-oracle & 6.06 & 4.39 & 3.46 & 3.22 \\ \hline _FFHQ Latent-space DPM_ & & & & & \\ \hline DPM Solver++ (126) & 27.15 & 15.60 & 8.98 & 7.39 \\ + UniC & 21.73 & 13.38 & 8.67 & 7.22 \\ + UniC-oracle & 15.29 & 11.25 & 8.33 & 7.03 \\ \hline \hline \end{tabular}
\end{table}
Table 3: **Exploring the upper bound of UniC.** We compare the performance of UniC and UniC-oracle by applying them to the DPM Solver++. Note that the NFE of UniC-oracle is twice the number of sampling steps. Our results show that UniC still has room for improvement.

**Comparisons with more NFE.** To further evaluate the effectiveness of our UniPC, we also perform experiments with 10\(\sim\)25 NFE. Specifically, we perform guided sampling on ImageNet 256\(\times\)256 [7] with guidance scale \(8.0\) and compare our UniPC with more existing methods including DDIM, DPM-Solver, PNDM, DEIS, and DPM-Solver++. We summarize the results in Table 5, where some results of the previous methods are from [26]. The results clearly demonstrate that our UniPC surpasses previous methods by a large margin.

**Inference speed and memory.** We test the wall-clock time of UniPC by sampling from a stable-diffusion model [29] using a single NVIDIA RTX 3090 GPU and the results are shown in Table 7. We find the actual inference time of UniPC is very similar to DPM-Solver++ [26]. As for memory usage, it is only related to how many previous model outputs are stored. Therefore, our UniPC also costs similar memory to DPM-Solver++. For example, both UniPC-2 and DPM-Solver++(2M) cost about 6.3GB of memory when sampling from a stable-diffusion model.

**Visualizations.** We provide a qualitative comparison between our UniPC and previous methods with only 7 NFE, as shown in Figure 1. We use different methods to perform guided sampling with a guidance scale of 8.0 from a DPM trained on ImageNet 256\(\times\)256. We find DEIS [40] tends to crash with extremely few steps, while the sample generated by DDIM [34] is relatively blurry. Compared with DPM-Solver++, the state-of-the-art method in guided sampling, UniPC can generate more plausible samples with better visual details. We further compare the sampling quality of our method UniPC and DPM-Solver++ using Stable-Diffusion-XL, a newly released model that can generate \(1024\times 1024\) images. The results in Figure 4 show that our method consistently generates more realistic images with fewer visual flaws.

**Limitations and broader impact.** Despite the effectiveness of UniPC, it still lags behind training-based methods such as [31]. How to further close the gap between training-free methods and training-based methods requires future efforts.

## 5 Conclusions

In this paper, we have proposed a new unified predictor-corrector framework named UniPC for the fast sampling of DPMs. Unlike previous methods, UniPC has a unified formulation for its two components (UniP and UniC) for any order. The universality of UniPC makes it possible to customize arbitrary order schedules and to improve the order of accuracy of off-the-shelf fast sampler via UniC.

\begin{table}
\begin{tabular}{l c c c c} \hline \hline \multirow{2}{*}{Inception Score (IS\(\uparrow\))} & \multicolumn{4}{c}{NFE} \\ \cline{2-5}  & 5 & 6 & 8 & 10 \\ \hline DPM-Solver++ [26] & 7.27 & 8.62 & 9.52 & 9.69 \\ UniPC & **7.55** & **8.81** & **9.59** & **9.83** \\ \hline \hline \end{tabular}
\end{table}
Table 6: **Comparisons of sampling diversity.** We compute the Inception Score (IS) on CIFAR10 [21] and find UniPC can generate more diverse samples than DPM-Solver++ [26].

\begin{table}
\begin{tabular}{l c c c c} \hline \hline _CIFAR10, NFE = 6_ & & & & \\ \hline Order Schedule & 123321 & 123432 & 123443 & 123456 \\ FID\(\downarrow\) & 10.33 & **9.03** & 11.23 & 22.98 \\ \hline _CIFAR10, NFE = 7_ & & & & \\ \hline Order Schedule & 1233321 & 1223334 & 1234321 & 1234567 \\ FID\(\downarrow\) & 6.41 & **6.29** & 7.24 & 60.99 \\ \hline \hline \end{tabular}
\end{table}
Table 4: **Customizing order schedule via UniPC.** We investigate different order schedules with UniPC and find that some customized order schedules behave better than the default settings, while simply increasing the order as much as possible is harmful to the sampling quality.

\begin{table}
\begin{tabular}{l c c c c} \hline \hline Sampling Method \(\backslash\) NFE & 10 & 15 & 20 & 25 \\ \hline DDMM (34) & 13.04 & 11.27 & 10.21 & 9.87 \\ DPM-Solver (25) & 114.62 & 44.05 & 20.33 & 9.84 \\ PNDM ([24]) & 99.80 & 37.59 & 15.50 & 11.54 \\ DEIS ([40]) & 19.12 & 11.37 & 10.08 & 9.75 \\ DPM-Solver++ (26) & 9.56 & 8.64 & 8.50 & 8.39 \\ \hline UniPC (Ours) & **7.51** & **6.76** & **6.65** & **6.58** \\ \hline \hline \end{tabular}
\end{table}
Table 5: **Comparisons with more NFE.** We compare the sampling quality between UniPC and previous methods with 10-25 NFE on ImageNet 256\(\times\)256 and show our UniPC still outperforms previous methods by a large margin.

Extensive experiments have demonstrated the effectiveness of UniPC on unconditional/conditional sampling tasks with pixel-space/latent-space pre-trained DPMs. We have also discovered several directions where UniPC can be further improved, such as choosing a better \(B(h)\), estimating a more accurate \(\mathbf{\epsilon}_{\theta}(\widetilde{\mathbf{x}}_{t_{i}}^{c},t_{i})\), and designing a better order schedule. We hope our attempt can inspire future work to further explore the fast sampling of DPMs in very few steps.

Figure 4: Comparisons of text-to-image results between UniPC and DPM-Solver++\([26]\). Images are sampled from the newly released _Stable-Diffusion-XL_ (1024\(\times\)1024) using 15 NFE. We show that the images generated by DPM-Solver++ contain visible artifacts while UniPC consistently produces images with better quality. Please view the images in color and zoom in for easier comparison.

## Acknowledgments

This work was supported in part by the National Key Research and Development Program of China under Grant 2022ZD0160102, and in part by the National Natural Science Foundation of China under Grant 62321005, Grant 62336004, Grant 12271287 and Grant 62125603.

## References

* [1] Tomer Amit, Tal Shaharbany, Eliya Nachmani, and Lior Wolf. Segdiff: Image segmentation with diffusion probabilistic models. _arXiv preprint arXiv:2112.00390_, 2021.
* [2] Fan Bao, Chongxuan Li, Jiacheng Sun, Jun Zhu, and Bo Zhang. Estimating the optimal covariance with imperfect mean in diffusion probabilistic models. _ICML_, 2022.
* [3] Fan Bao, Chongxuan Li, Jun Zhu, and Bo Zhang. Analytic-dpm: an analytic estimate of the optimal reverse variance in diffusion probabilistic models. _ICLR_, 2022.
* [4] Mari Paz Calvo and Cesar Palencia. A class of explicit multistep exponential integrators for semilinear problems. _Numerische Mathematik_, 102(3):367-381, 2006.
* [5] Nanxin Chen, Yu Zhang, Heiga Zen, Ron J Weiss, Mohammad Norouzi, and William Chan. Wavegrad: Estimating gradients for waveform generation. _ICLR_, 2021.
* [6] Shoufa Chen, Peize Sun, Yibing Song, and Ping Luo. Diffusiondet: Diffusion model for object detection. _arXiv preprint arXiv:2211.09788_, 2022.
* [7] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical image database. In _CVPR_, pages 248-255. IEEE, 2009.
* [8] Prafulla Dhariwal and Alexander Nichol. Diffusion models beat gans on image synthesis. _NeurIPS_, 34:8780-8794, 2021.
* [9] Tim Dockhorn, Arash Vahdat, and Karsten Kreis. Score-based generative modeling with critically-damped langevin diffusion. _ICLR_, 2022.
* [10] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In _NeurIPS_, pages 2672-2680, 2014.
* [11] David Francis Griffiths and Desmond J Higham. _Numerical methods for ordinary differential equations: initial value problems_, volume 5. Springer, 2010.
* [12] Shuyang Gu, Dong Chen, Jianmin Bao, Fang Wen, Bo Zhang, Dongdong Chen, Lu Yuan, and Baining Guo. Vector quantized diffusion model for text-to-image synthesis. In _CVPR_, pages 10696-10706, 2022.
* [13] Jonathan Ho, Ajay Jain, and Pieter Abbeel. Denoising diffusion probabilistic models. _NeurIPS_, 33:6840-6851, 2020.
* [14] Jonathan Ho and Tim Salimans. Classifier-free diffusion guidance. _NeurIPS_, 2021.
* [15] Jonathan Ho, Tim Salimans, Alexey Gritsenko, William Chan, Mohammad Norouzi, and David J Fleet. Video diffusion models. _arXiv preprint arXiv:2204.03458_, 2022.
* [16] Marlis Hochbruck and Alexander Ostermann. Explicit exponential runge-kutta methods for semilinear parabolic problems. _SIAM Journal on Numerical Analysis_, 43(3):1069-1090, 2005.
* [17] Marlis Hochbruck and Alexander Ostermann. Exponential integrators. _Acta Numerica_, 19:209-286, 2010.
* [18] Tero Karras, Samuli Laine, and Timo Aila. A style-based generator architecture for generative adversarial networks. In _CVPR_, pages 4401-4410, 2019.
* [19] Diederik Kingma, Tim Salimans, Ben Poole, and Jonathan Ho. Variational diffusion models. _NeurIPS_, 34:21696-21707, 2021.
* [20] Diederik P Kingma and Max Welling. Auto-encoding variational bayes. _ICLR_, 2014.
* [21] Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiple layers of features from tiny images. 2009.
* [22] John Denholm Lambert et al. _Numerical methods for ordinary differential systems_, volume 146. Wiley New York, 1991.

* [23] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr Dollar, and C Lawrence Zitnick. Microsoft coco: Common objects in context. In _ECCV_, pages 740-755. Springer, 2014.
* [24] Luping Liu, Yi Ren, Zhijie Lin, and Zhou Zhao. Pseudo numerical methods for diffusion models on manifolds. _ICLR_, 2022.
* [25] Cheng Lu, Yuhao Zhou, Fan Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu. Dpm-solver: A fast ode solver for diffusion probabilistic model sampling in around 10 steps. _NeurIPS_, 2022.
* [26] Cheng Lu, Yuhao Zhou, Fan Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu. Dpm-solver++: Fast solver for guided sampling of diffusion probabilistic models. _arXiv preprint arXiv:2211.01095_, 2022.
* [27] Alex Nichol, Prafulla Dhariwal, Aditya Ramesh, Pranav Shyam, Pamela Mishkin, Bob McGrew, Ilya Sutskever, and Mark Chen. Glide: Towards photorealistic image generation and editing with text-guided diffusion models. _ICML_, 2022.
* [28] Alexander Quinn Nichol and Prafulla Dhariwal. Improved denoising diffusion probabilistic models. In _ICML_, pages 8162-8171. PMLR, 2021.
* [29] Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Bjorn Ommer. High-resolution image synthesis with latent diffusion models. In _CVPR_, pages 10684-10695, 2022.
* [30] Chitwan Saharia, William Chan, Saurabh Saxena, Lala Li, Jay Whang, Emily Denton, Seyed Kamyar Seyed Ghasemipour, Burcu Karagol Ayan, S Sara Mahdavi, Rapha Gontijo Lopes, et al. Photorealistic text-to-image diffusion models with deep language understanding. _NeurIPS_, 2022.
* [31] Tim Salimans and Jonathan Ho. Progressive distillation for fast sampling of diffusion models. _ICLR_, 2022.
* [32] Christoph Schuhmann, Richard Vencu, Romain Beaumont, Robert Kaczmarczyk, Clayton Mullis, Aarush Katta, Theo Coombes, Jenia Jitsev, and Aran Komatsuzaki. Laion-400m: Open dataset of clip-filtered 400 million image-text pairs. _arXiv preprint arXiv:2111.02114_, 2021.
* [33] Jascha Sohl-Dickstein, Eric Weiss, Niru Maheswaranathan, and Surya Ganguli. Deep unsupervised learning using nonequilibrium thermodynamics. In _ICML_, pages 2256-2265. PMLR, 2015.
* [34] Jiaming Song, Chenlin Meng, and Stefano Ermon. Denoising diffusion implicit models. _ICLR_, 2021.
* [35] Yang Song, Jascha Sohl-Dickstein, Diederik P Kingma, Abhishek Kumar, Stefano Ermon, and Ben Poole. Score-based generative modeling through stochastic differential equations. In _ICLR_, 2021.
* [36] Zhendong Wang, Huangjie Zheng, Pengcheng He, Weizhu Chen, and Mingyuan Zhou. Diffusion-gan: Training gans with diffusion. _arXiv preprint arXiv:2206.02262_, 2022.
* [37] Daniel Watson, William Chan, Jonathan Ho, and Mohammad Norouzi. Learning fast samplers for diffusion models by differentiating through sample quality. In _ICLR_, 2021.
* [38] Zhisheng Xiao, Karsten Kreis, and Arash Vahdat. Tackling the generative learning trilemma with denoising diffusion gans. _ICLR_, 2022.
* [39] Fisher Yu, Ari Seff, Yinda Zhang, Shuran Song, Thomas Funkhouser, and Jianxiong Xiao. Lsun: Construction of a large-scale image dataset using deep learning with humans in the loop. _arXiv preprint arXiv:1506.03365_, 2015.
* [40] Qinsheng Zhang and Yongxin Chen. Fast sampling of diffusion models with exponential integrator. _arXiv preprint arXiv:2204.13902_, 2022.
* [41] Qinsheng Zhang, Molei Tao, and Yongxin Chen. gddim: Generalized denoising diffusion implicit models. _arXiv preprint arXiv:2206.05564_, 2022.

UniPC for Data Prediction Model

### Comparison of data prediction and noise prediction

The data prediction model is a simple linear transformation of the noise prediction model, namely \(\mathbf{x}_{\theta}=(\mathbf{x}_{t}-\sigma_{t}\mathbf{\epsilon}_{\theta})/\alpha_{t}\)[19]. However, high-order solvers based on \(\mathbf{x}_{\theta}\) and \(\mathbf{\epsilon}_{\theta}\) are essentially different [30; 26]. As we shall see, the formulae of UniPC for the data prediction model differ from those for the noise prediction model. On the other hand, for image data, \(\mathbf{x}_{\theta}\) is bounded in \([-1,1]\), while \(\mathbf{\epsilon}_{\theta}\) is generally unbounded and thus can push the sample out of the bound. Therefore, solvers for data prediction models are preferred, since thresholding method [30] can be directly applied and alleviate the "train-test mismatch" problem.

### Adapting UniPC to Data Prediction Model

As shown in the Proposition 4.1 of [26], for an initial value \(\mathbf{x}_{s}\) at time \(s>0\), the solution at time \(t\in[0,s]\) of diffusion ODEs is

\[\mathbf{x}_{t}=\frac{\sigma_{t}}{\sigma_{s}}\mathbf{x}_{s}+\sigma_{t}\int_{\lambda_{s} }^{\lambda_{t}}e^{\lambda}\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda )\mathrm{d}\lambda, \tag{9}\]

where we use the notation \(\hat{\mathbf{x}}_{\theta}\) and \(\hat{\mathbf{x}}_{\lambda}\) to denote changing from the domain of time (\(t\)) to the domain of half log-SNR(\(\lambda\)), _i.e._, \(\tilde{\mathbf{x}}_{\lambda}:=\mathbf{x}_{t_{\lambda}(\lambda)}\) and \(\tilde{\mathbf{x}}_{\theta}(\cdot,\lambda):=\mathbf{x}_{\theta}(\cdot,t_{\lambda}( \lambda))\). We are also able to adapt our UniPC to the data prediction model and utilize more information from previous data points. Recall that \(h_{i}=\lambda_{t_{i}}-\lambda_{t_{i-1}}\). For any nonzero increasing sequence \(r_{1}<r_{2}<\cdots<r_{p}=1\), \(\lambda_{s_{m}}=r_{m}h_{i}+\lambda_{t_{i-1}}\), \(s_{m}=t_{\lambda}(\lambda_{s_{m}})\), \(m=1,\ldots,p\). The UniPC-\(p\) is given by

\[\tilde{\mathbf{x}}_{t_{i}}=\frac{\sigma_{t_{i}}}{\sigma_{t_{i-1}}}\tilde{\mathbf{x}}_{ t_{i-1}}+\alpha_{t_{i}}(1-e^{-h_{i}})\mathbf{x}_{\theta}(\tilde{\mathbf{x}}_{t_{i-1}},t _{i-1})+\alpha_{t_{i}}B(h_{i})\sum_{m=1}^{p-1}\frac{a_{m}}{r_{m}}D_{m}^{x},\quad \text{(Predictor)} \tag{10}\]

\[\tilde{\mathbf{x}}_{t_{i}}^{c}=\frac{\sigma_{t_{i}}}{\sigma_{t_{i-1}}}\tilde{\mathbf{x }}_{t_{i-1}}+\alpha_{t_{i}}(1-e^{-h_{i}})\mathbf{x}_{\theta}(\tilde{\mathbf{x}}_{t_{i- 1}},t_{i-1})+\alpha_{t_{i}}B(h_{i})\sum_{m=1}^{p}\frac{c_{m}}{r_{m}}D_{m}^{x}, \quad\text{(Corrector)} \tag{11}\]

where \(D_{m}^{x}=\mathbf{x}_{\theta}(\tilde{\mathbf{x}}_{s_{m}},s_{m})-\mathbf{x}_{\theta}(\tilde {\mathbf{x}}_{t_{i-1}},t_{i-1})\). Importantly, the corrector (UniC) can be also applied to any solver for the data prediction model that outputs \(\tilde{\mathbf{x}}_{t_{i}}\). Denote \(\mathbf{a}_{p}=(a_{1},\cdots,a_{p-1})^{\top}\), \(\mathbf{c}_{p}=(c_{1},\cdots,c_{p})^{\top}\). Let

\[\mathbf{g}_{p}(h)=(g_{1}(h),\cdots,g_{p}(h))^{\top},\quad g_{n}(h)=h^{n}n!\psi_{n +1}(h), \tag{12}\]

where \(\psi_{n}(h)\) is defined by the recursive relation \(\psi_{n+1}(h)=\frac{1/n!-\psi_{n}(h)}{h}\), \(\psi_{0}(h)=e^{-h}\), see Appendix E.4 for details. The order of accuracy of UniPC-\(p\) for the data prediction model is given by the following proposition. The proof is in Appendix E.4.

**Proposition A.1** (Order of Accuracy of UniPC-\(p\) for Data Prediction Model).: _For an increasing sequence \(r_{1}<r_{2}<\cdots<r_{p}=1\), under regularity assumption E.3, assuming \(0\neq B(h)=\mathcal{O}(h)\),_

\[|\mathbf{R}_{p}(h_{i})\mathbf{c}_{p}B(h_{i})-\mathbf{g}_{p}(h_{i})|=\mathcal{O}(h_{i}^{p+1 }),\text{ and }|\mathbf{R}_{p-1}(h_{i})\mathbf{a}_{p-1}B(h_{i})-\mathbf{g}_{p-1}(h_{i})|= \mathcal{O}(h_{i}^{p}), \tag{13}\]

_then the order of accuracy of UniPC-\(p\) is \(p+1\)._

We list the algorithms for UniC-\(p\) and UniP-\(p\) for the data prediction model separately, see Algorithm 3 and Algorithm 4.

``` Input:\(\mathbf{x}_{s}\), \(\mathbf{x}

coefficients, _i.e._,\(\mathbf{A}_{p}=(\mathbf{a}_{1,p},\cdots,\mathbf{a}_{p,p})^{\top}\). Consider

\[\mathbf{\tilde{x}}_{t_{i}}=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{\tilde{x}}_{t_{ i-1}}-\sigma_{t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{\tilde{x}}_{t_{i-1}},t_ {i-1})-\sigma_{t_{i}}\sum_{n=1}^{p}h_{i}\varphi_{n+1}(h_{i})\mathbf{a}_{n,p}^{\top} \mathbf{D}_{p}, \tag{14}\]

where \(\mathbf{D}_{p}=(D_{1}/r_{1},\cdots,D_{p}/r_{p})^{\top}\) and \(D_{m}\) is defined in (5). The following theorem guarantees the order of accuracy of UniPC\({}_{v}\). The proof is deferred to Appendix E. The convergence order is investigated in Appendix D. Define

\[\mathbf{C}_{p}=\begin{pmatrix}1&1&\cdots&1\\ r_{1}/2!&r_{2}/2!&\cdots&r_{p}/2!\\ \vdots&\vdots&\ddots&\vdots\\ r_{1}^{p-1}/p!&r_{2}^{p-1}/p!&\cdots&r_{p}^{p-1}/p!\end{pmatrix}.\]

Let \(\mathbf{I}_{p}\) be the \(p\)-dimensional identity matrix. Under the conditions of Theorem 3.1, if

\[|\mathbf{C}_{p}\mathbf{A}_{p}-\mathbf{I}_{p}|=\mathcal{O}(h^{p}),\quad h=\max_{1\leq i\leq p }h_{i}, \tag{15}\]

UniPC\({}_{v}\) is \((p+1)\)-th order accurate.

In fact, \(\mathbf{C}_{p}\) is invertible. Note that \(C_{p}\) is the product of a diagonal matrix and a Vandermonde matrix, namely

\[\mathbf{C}_{p}=\begin{pmatrix}1&&\\ &\ddots&\\ &&1/p!\end{pmatrix}\begin{pmatrix}1&1&\cdots&1\\ r_{1}&r_{2}&\cdots&r_{p}\\ \vdots&\vdots&\ddots&\vdots\\ r_{1}^{p-1}&r_{2}^{p-1}&\cdots&r_{p}^{p-1}\end{pmatrix},\quad r_{1}<\cdots<r_{p}.\]Thus, we can simply take \(\mathbf{A}_{p}=\mathbf{C}_{p}^{-1}\). The advantage of UniPC\({}_{v}\) is that \(\mathbf{A}_{p}\) solely depends on \(\{r_{i}\}_{i=1}^{p}\). The algorithm of UniPC\({}_{v}\) is to replace the updating formulae of UniPC (Algorithm 1 and Algorithm 2) by (14) with \(\mathbf{A}_{p}=\mathbf{C}_{p}^{-1}\). See Appendix G for its performance.

```
Require: initial value \(\mathbf{x}_{T}\), time steps \(\{t_{i}\}_{i=0}^{M}\), noise prediction model \(\mathbf{\epsilon}_{\theta}\), any \(p\)-order solver Solver-p Denote \(h_{i}:=\lambda_{t_{i}}-\lambda_{t_{i-1}}\), for \(i=1,\cdots,M\). \(\tilde{\mathbf{x}}_{t_{0}}\leftarrow\mathbf{x}_{T}\), \(\tilde{\mathbf{x}}_{t_{0}}^{\tau}\leftarrow\mathbf{x}_{T}\). Initialize an empty buffer \(Q\). \(Q\operatorname{\,{}^{\mathrm{buffer}}}\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t _{0}},t_{0})\) for\(i=1\)to\(M\)do \(p_{i}\leftarrow\min\{p,i\}\) \(\tilde{\mathbf{x}}_{t_{i}}^{(1)}\leftarrow\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}} \tilde{\mathbf{x}}_{t_{i-1}}^{\tilde{\mathbf{x}}}-\sigma_{t_{i}}(e^{h_{i}}-1)\mathbf{ \epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i-1}},t_{i-1})\) \(\tilde{\mathbf{x}}_{t_{i}}\leftarrow\texttt{Solver-p}_{i}(\tilde{\mathbf{x}}_{t_{i-1}} ^{\tilde{\mathbf{x}}},Q)\) \(r_{p_{i}}\gets 1\) \(D_{p_{i}}\leftarrow\epsilon_{\theta}(\tilde{\mathbf{x}}_{t_{i}},t_{i})-\mathbf{ \epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i-1}},t_{i-1})\) for\(m=2\)to\(p_{i}\)do \(r_{m-1}\leftarrow(\lambda_{t_{i-1}}-\lambda_{t_{i-1}})/h_{i}\) \(D_{m-1}\leftarrow\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i-m}},t_{i-m})-\mathbf{ \epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i-1}},t_{i-1})\) endfor  Compute \(\mathbf{a}_{p_{i}}\leftarrow\mathbf{R}_{p_{i}}^{-1}(h_{i})\mathbf{\phi}_{p_{i}}(h_{i})/B( h_{i})\), where \(\mathbf{R}_{p_{i}}^{-1}(h_{i})\) and \(\mathbf{\phi}_{p_{i}}\) are as defined in Theorem 3.1. \(\tilde{\mathbf{x}}_{t_{i}}^{\epsilon}+\tilde{\mathbf{x}}_{t_{i}}^{(1)}-\sigma_{t_{i}}B (h_{i})\sum_{m=1}^{p_{i}}a_{m}D_{m}/r_{m}\) \(Q\operatorname{\,{}^{\mathrm{buffer}}}\leftarrow\mathbf{\epsilon}_{\theta}(\tilde{ \mathbf{x}}_{t_{i}},t_{i})\) endfor return:\(\tilde{\mathbf{x}}_{t_{M}}\)
```

**Algorithm 5** Detailed implementation of multistep UniC-\(p\)

## Appendix D Order of Convergence

In this section, we shall show that under mild conditions the convergence order of UniP-\(p\) is \(p\) and the convergence order of UniPC-\(p\) is \(p+1\) for either the noise prediction model or data prediction model. The proof is deferred to Appendix E.

**Definition D.1**.: For time steps \(\{t_{i}\}_{i=0}^{M}\), we say the order of convergence of a sampler for DPMs is \(p\) if

\[|\tilde{\mathbf{x}}_{t_{M}}-\mathbf{x}_{0}|=\mathcal{O}(h^{p}).\]

We start by introducing some additional regularity assumptions.

**Assumption D.2**.: The noise prediction model \(\mathbf{\epsilon}_{\theta}(\mathbf{x},s)\) is Lipschitz continuous w.r.t. \(\mathbf{x}\) with Lipschitz constant \(L\).

**Assumption D.3**.: (1)_\(h=\max_{1\leq i\leq M}h_{i}=\mathcal{O}(1/M)\) (2) For a constant \(b>0\), \(\max_{1\leq i\leq M}L\alpha_{t_{i-1}}/\alpha_{t_{i}}<b\), \(b^{-1}<\alpha_{t_{i}}<b\), for all \(1\leq i\leq M\)._

**Assumption D.4**.: The starting values \(\tilde{\mathbf{x}}_{t_{i}}\), \(1\leq i\leq k-1\) satisfies for some positive constant \(c_{0}\),

\[|\mathbf{x}_{t_{i}}-\tilde{\mathbf{x}}_{t_{i}}|\leq c_{0}h^{k},1\leq i\leq k-1. \tag{16}\]

Assumption D.2 is common in the analysis of ODEs similar to (20). By Assumption D.2, we have \(\epsilon_{\theta}(\tilde{\mathbf{x}}_{s},s)=\epsilon_{\theta}(\mathbf{x}_{s},s)+ \mathcal{O}(\tilde{\mathbf{x}}_{s}-\mathbf{x}_{s})\). Assumption D.3 assures that there is no significantly large step size and the signals are neither exploding nor degenerating. Assumption D.4 is common in the convergence analysis of multistep approaches [4].

The following Propositions D.5 and D.6 ensure the convergence order of UniP-\(p\) and UniPC-\(p\). For general Solver-p such as DDIM (\(p=1\)), DPM-Solver/DPM-Solver++(\(p\leq 3\)), UniC-\(p\) can also increase the convergence order.

**Proposition D.5**.: _Under the conditions of Theorem 3.1, Assumptions D.2, D.3, and D.4, the order of convergence of UniP-\(p\) is \(p\)._

**Proposition D.6**.: _Under the conditions of Theorem 3.1, Assumptions D.2, D.3, and D.4 with \(k=p\), the order of convergence of UniPC-\(p\) is \(p+1\)._

_Remark D.7_.: After a careful investigation of the proof of Proposition D.6 and Proposition D.5, we point out that for the singlestep updating when using UniPC-1 for the estimation of \(\tilde{\mathbf{x}}_{s_{m}}\), \(t_{i-1}<s_{1},\cdots,s_{m}<t_{i}\), the order of convergence for UniPC-\(p\) is \(p+1\) and the order of convergence for UniP-\(p\) is \(p\) for \(p\leq 3\).

Following similar arguments of Proposition D.6, we find that UniC-\(p\) can also increase the convergence order for general Solver-p for diffusion ODEs. The following is a direct corollary of Proposition D.6 which gives the order of convergence of UniPC-\(p\).

**Corollary D.8**.: _Under the conditions of Theorem C.1, Assumptions D.2, D.3, and D.4 with \(k=p\), the order of convergence of UniPC-\(p\) is \(p+1\)._

The order of convergence for the data prediction model follows analogous to Proposition D.5 and Proposition D.6 under slightly different assumptions:

**Assumption D.9**.: The noise prediction model \(\mathbf{x}_{\theta}(\mathbf{x},s)\) is Lipschitz continuous w.r.t. \(\mathbf{x}\) with Lipschitz constant \(L\).

**Assumption D.10**.: (1)_\(h=\max_{1\leq i\leq M}h_{i}=\mathcal{O}(1/M)\) (2) For a constant \(b>0\), \(\max_{1\leq i\leq M}L\sigma_{t_{i-1}}/\sigma_{t_{i}}<b\), \(b^{-1}<\sigma_{t_{i}}<b\), for all \(1\leq i\leq M\)._

We list the results of the order of convergence of UniP and UniPC for the data prediction model as corollaries to Propositions D.5 and D.6 and omit their proofs for simplicity. Interested readers can refer to the arguments in Appendix E for the noise prediction model and derive the detailed proofs for the data prediction model.

**Corollary D.11**.: _Under the conditions of Proposition A.1, Assumptions D.9, D.10, and D.4 with \(k=p\), the order of convergence of UniP-\(p\) for data prediction model is \(p\)._

**Corollary D.12**.: _Under the conditions of Proposition A.1, Assumptions D.9, D.10, and D.4 with \(k=p\), the order of convergence of UniPC-\(p\) for data prediction model is \(p+1\)._

## Appendix E Proofs

In this section, we provide preliminaries of numerical analysis, regularity assumption, and the proof of Theorem 3.1 in the paper, the regularity assumption and the proof of Proposition A.1 in Appendix A as well as detailed proofs for Theorem C.1 in Appendix C, for Proposition D.5 and Proposition D.6 in Appendix D. Through this section, we use \(C\) and \(C_{i}\) to denote sufficiently large positive constants independent of \(h\).

### Preliminaries

We begin with introducing preliminary results and concepts necessary for the proof of Theorem 3.1.

**Expansion of exponential integrator.** First, we obtain the Taylor expansion of (2), namely the exponentially weighted integral. Define the \(k\)-th order derivative of \(\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)\) as \(\hat{\mathbf{\epsilon}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda},\lambda):=\mathrm{d} ^{k}\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)/\mathrm{d} \lambda^{k}\). For \(0\leq t<s\leq T\), \(r\in[0,1]\), let \(h:=\lambda_{t}-\lambda_{s}\), \(\lambda:=\lambda_{s}+rh\). Assuming the existence of total derivatives of \(\hat{\mathbf{\epsilon}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda},\lambda)\), \(0\leq k\leq n\), we have the \(n\)-th order Taylor expansion of \(\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)\) w.r.t. the half log-SNR \(\lambda\):

\[\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)=\sum_{k=0}^{n} \frac{r^{k}h^{k}}{k!}\hat{\mathbf{\epsilon}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda_ {s}},\lambda_{s})+\mathcal{O}(h^{n+1}). \tag{17}\]

Using the result of Taylor expansion of (17), the exponential integrator of (2) can be reduced to

\[\int_{\lambda_{s}}^{\lambda_{t}}e^{-\lambda}\hat{\mathbf{\epsilon}}_{ \theta}(\hat{\mathbf{x}}_{\lambda},\lambda)\mathrm{d}\lambda =\frac{\sigma_{t}}{\alpha_{t}}\sum_{k=0}^{n}h^{k+1}\int_{0}^{1}e^{ \lambda_{t}-\lambda}\frac{r^{k}}{k!}\mathrm{d}r\hat{\mathbf{\epsilon}}_{\theta}^{(k )}(\hat{\mathbf{x}}_{\lambda_{s}},\lambda_{s})+\mathcal{O}(h^{n+2})\] \[=\frac{\sigma_{t}}{\alpha_{t}}\sum_{k=0}^{n}h^{k+1}\int_{0}^{1}e^ {(1-r)h}\frac{r^{k}}{k!}\mathrm{d}r\hat{\mathbf{\epsilon}}_{\theta}^{(k)}(\hat{\bm {x}}_{\lambda_{s}},\lambda_{s})+\mathcal{O}(h^{n+2})\] \[:=\frac{\sigma_{t}}{\alpha_{t}}\sum_{k=0}^{n}h^{k+1}\varphi_{k+1}( h)\hat{\mathbf{\epsilon}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda_{s}},\lambda_{s})+ \mathcal{O}(h^{n+2}), \tag{18}\]

[MISSING_PAGE_EMPTY:18]

### Regularity Assumption

**Assumption E.2**.: The total derivatives \(\frac{\mathrm{d}^{k}\hat{\mathbf{e}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)}{\mathrm{d }\lambda_{k}}\), \(k=1,\cdots,p\) exist and are continuous.

Assumption E.2 is required for the Taylor expansion which is also regular in high-order numerical methods.

### Proof of Theorem 3.1 for arbitrary \(p\geq 1\)

We first give the local truncation error of UniC. Given \(\mathbf{x}_{r}\), \(r\leq t_{i-1}\), are correct, with a slight abuse of notation, define

\[\bar{\mathbf{x}}_{t_{i}}=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x }_{t_{i-1}}-\sigma_{t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1})-\sigma_{t_{i}}B(h_{i})\sum_{m=1}^{p-1}\frac{a_{m}}{r_{m}}(\hat{\mathbf{e }}_{\theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{e}}_{ \theta}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}}))\] \[-\sigma_{t_{i}}B(h_{i})\frac{a_{p}}{r_{p}}(\mathbf{\epsilon}_{\theta }(\bar{\mathbf{x}}_{t_{i}},t_{i})-\hat{\mathbf{e}}_{\theta}(\bar{\mathbf{x}}_{\lambda_{t_{ i-1}}},\lambda_{t_{i-1}})).\]

Since Solver-p has order of accuracy \(p\) and \(B(h)=\mathcal{O}(h)\), under Assumption D.2, we have

\[\bar{\mathbf{x}}_{t_{i}}=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x }_{t_{i-1}}- \sigma_{t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1})-\sigma_{t_{i}}B(h_{i})\sum_{m=1}^{p}\frac{a_{m}}{r_{m}}(\hat{\mathbf{e}} _{\theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})\] \[-\hat{\mathbf{e}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{ t_{i-1}}))+\mathcal{O}(h^{p+2}). \tag{23}\]

Suppose \(\mathbf{x}_{t}\) is the solution of the diffusion ODE (1). Then, the local truncation error on \(t_{i}\) is given by \(|\mathbf{x}_{t_{i}}-\bar{\mathbf{x}}_{t_{i}}|\). Further, similar to Definition E.1 the order of accuracy of UniC is \(l\), if there exists a sufficiently large positive constant \(C\) such that

\[\max_{1\leq i\leq M}|\mathbf{x}_{t_{i}}-\bar{\mathbf{x}}_{t_{i}}|\leq Ch^{l+1},\quad h =\max_{1\leq i\leq M}h_{i}.\]

In the following, we shall show that the order of accuracy of UniC-\(p\) is \(p+1\). Combining (2) and (17), we have

\[\mathbf{x}_{t_{i}} =\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x}_{t_{i-1}}-\alpha_{ t_{i}}\int_{\lambda_{t_{i-1}}}^{\lambda_{t_{i}}}e^{-\lambda}\hat{\mathbf{e}}_{\theta}( \hat{\mathbf{x}}_{\lambda},\lambda)\mathrm{d}\lambda\] \[=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x}_{t_{i-1}}-\sigma_{ t_{i}}\sum_{k=0}^{p}h_{i}^{k+1}\varphi_{k+1}(h_{i})\hat{\mathbf{e}}_{\theta}^{(k)}( \hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})+\mathcal{O}(h^{p+2})\] \[=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x}_{t_{i-1}}-\sigma_{ t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1})-\sigma_{t_{i}} \sum_{k=1}^{p}h_{i}^{k+1}\varphi_{k+1}(h_{i})\hat{\mathbf{e}}_{\theta}^{(k)}(\hat{ \mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})+\mathcal{O}(h^{p+2}). \tag{24}\]

Let \(\mathbf{R}_{p,k}^{\top}\) denote the \(k\)-th row of \(\mathbf{R}_{p}\). By (7), we have \(|\mathbf{a}_{p}^{\top}\mathbf{R}_{p,k}(h_{i})-B^{-1}(h_{i})h_{i}^{k}k!\varphi_{k+1}(h_ {i})|\leq C_{0}B^{-1}(h_{i})h^{p+1}\). Under Assumption E.2, by Taylor expansion, we obtain

\[\sum_{m=1}^{p}\frac{a_{m}}{r_{m}}(\hat{\mathbf{e}}_{\theta}(\hat{\bm {x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{e}}_{\theta}(\hat{\mathbf{x}}_{ \lambda_{t_{i-1}}},\lambda_{t_{i-1}}))\] \[=\sum_{m=1}^{p}a_{m}\sum_{n=1}^{p}\frac{r_{m}^{n-1}h_{i}^{n}}{n!} \hat{\mathbf{e}}_{\theta}^{(n)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}} )+\mathcal{O}(h^{p+1})\] \[=\sum_{n=1}^{p}\sum_{m=1}^{p}a_{m}\frac{r_{m}^{n-1}h_{i}^{n}}{n!} \hat{\mathbf{e}}_{\theta}^{(n)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})+ \mathcal{O}(h^{p+1})\] \[=\sum_{n=1}^{p}\frac{h_{i}}{n!}\mathbf{a}_{p}^{\top}\mathbf{R}_{p,n}(h_{i })\hat{\mathbf{e}}_{\theta}^{(n)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1} })+\mathcal{O}(h^{p+1}).\]Thus, we have

\[\left|\sum_{m=1}^{p}\frac{a_{m}}{r_{m}}(\hat{\mathbf{\epsilon}}_{\theta}( \hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{\epsilon}}_{\theta}( \hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}}))-B(h_{i})^{-1}\sum_{k=1}^{p }h_{i}^{k+1}\varphi_{k+1}(h_{i})\hat{\mathbf{\epsilon}}_{\theta}^{(k)}(\hat{\mathbf{x} }_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})\right|\] \[\leq C_{1}(B(h_{i})^{-1}h^{p+2}+h^{p+1}). \tag{25}\]

Combining (23), (24) and (25) given \(B(h_{i})=\mathcal{O}(h_{i})\), we have

\[\max_{1\leq i\leq M}|\mathbf{x}_{t_{i}}-\bar{\mathbf{x}}_{t_{i}}| =\big{|}-\sigma_{t_{i}}\sum_{k=1}^{p}h_{i}^{k+1}\varphi_{k+1}(h_{ i})\hat{\mathbf{\epsilon}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}}, \lambda_{t_{i-1}})\] \[+\sigma_{t_{i}}B(h_{i})\sum_{m=1}^{p}\frac{a_{m}}{r_{m}}(\hat{ \mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{ \mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})) \big{|}+\mathcal{O}(h^{p+2})\] \[=\mathcal{O}(h^{p+2}). \tag{26}\]

Therefore, UniC-\(p\) is of \((p+1)\)-th order of accuracy. \(\square\)

### Proof of Proposition a.1

**Regularity Assumption**

**Assumption E.3**.: The total derivatives \(\frac{\mathrm{d}^{k}\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)}{ \mathrm{d}\lambda_{k}}\), \(k=1,\cdots,p\) exist and are continuous.

**Expansion of the Exponentially Weighted Integral.** First, we obtain the Taylor expansion of (9). Define the \(k\)-th order derivative of \(\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)\) as \(\hat{\mathbf{x}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda},\lambda):=\mathrm{d}^{k} \hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)/\mathrm{d}\lambda^{k}\). For \(0\leq t<s\leq T\), \(r\in[0,1]\), let \(h:=\lambda_{t}-\lambda_{s}\), \(\lambda:=\lambda_{s}+rh\). Assuming the existence of total derivatives of \(\hat{\mathbf{x}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda},\lambda)\), \(0\leq k\leq n\), the \(n\)-th order Taylor expansion of \(\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)\) w.r.t. the half log-SNR \(\lambda\) is:

\[\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{\lambda},\lambda)=\sum_{k=0}^{n}\frac{r^{ k}h^{k}}{k!}\hat{\mathbf{x}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda_{s}},\lambda_{s})+ \mathcal{O}(h^{n+1}). \tag{27}\]

Then, the exponential integrator of (9) can be reduced to

\[\int_{\lambda_{s}}^{\lambda_{t}}e^{\lambda}\hat{\mathbf{x}}_{\theta}( \hat{\mathbf{x}}_{\lambda},\lambda)\mathrm{d}\lambda =\frac{\alpha_{t}}{\sigma_{t}}\sum_{k=0}^{n}h^{k+1}\int_{0}^{1}e^{ \lambda-\lambda_{t}}\frac{r^{k}}{k!}\mathrm{d}r\hat{\mathbf{x}}_{\theta}^{(k)}( \hat{\mathbf{x}}_{\lambda_{s}},\lambda_{s})+\mathcal{O}(h^{n+2})\] \[=\frac{\alpha_{t}}{\sigma_{t}}\sum_{k=0}^{n}h^{k+1}\int_{0}^{1}e^{ (r-1)h}\frac{r^{k}}{k!}\mathrm{d}r\hat{\mathbf{x}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{ \lambda_{s}},\lambda_{s})+\mathcal{O}(h^{n+2})\] \[:=\frac{\alpha_{t}}{\sigma_{t}}\sum_{k=0}^{n}h^{k+1}\psi_{k+1}(h) \hat{\mathbf{x}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda_{s}},\lambda_{s})+\mathcal{ O}(h^{n+2}), \tag{28}\]

where \(\psi_{k+1}(h)=\int_{0}^{1}e^{(r-1)h}\frac{r^{k}}{k!}\mathrm{d}r\) can be computed via the recurrence relation by integration-by-parts formula:

\[\psi_{k+1}(z)=\frac{1}{z}\int_{0}^{1}\frac{r^{k}}{k!}\mathrm{d}e^{(r-1)z}= \frac{1}{z}\left(\frac{1}{k!}-\int_{0}^{1}e^{(r-1)z}\frac{r^{k-1}}{(k-1)!} \mathrm{d}r\right)=\frac{1}{z}\left(\frac{1}{k!}-\psi_{k}(z)\right),\]

and \(\psi_{0}(z)=e^{-z}\)[16]. For example, the closed-forms of \(\psi_{k}(h)\) for \(k=1,2,3\) are

\[\psi_{1}(h)=\frac{1-e^{-h}}{h},\quad\psi_{2}(h)=\frac{h-1+e^{-h}}{h^{2}},\quad \psi_{3}(h)=\frac{h^{2}/2-h+1-e^{-h}}{h^{3}}.\]

**Proof.** In the subsequence analysis, we prove the order of accuracy of UniC for the data prediction model and the result of UniP for the data prediction model follows similarly. Suppose \(\mathbf{x}_{t}\) is the solution of the diffusion ODE (1). For the data prediction model, given \(\mathbf{x}_{r}\), \(r\leq t_{i-1}\), are correct, with a slight abuse of notation, define

\[\tilde{\mathbf{x}}_{t_{i}}=\frac{\sigma_{t_{i}}}{\sigma_{t_{i-1}}}\mathbf{x }_{t_{i-1}}+\alpha_{t_{i}}(1-e^{-h_{i}})\mathbf{x}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1 })+\alpha_{t_{i}}B(h_{i})\sum_{m=1}^{p-1}\frac{c_{m}}{r_{m}}(\hat{\mathbf{x}}_{ \theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{x}}_{\theta}( \hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}}))\] \[+\alpha_{t_{i}}B(h_{i})\frac{c_{p}}{r_{p}}(\mathbf{x}_{\theta}(\tilde {\mathbf{x}}_{t_{i}},t_{i})-\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}}, \lambda_{t_{i-1}})).\]

Similar to (23), since Solver-p has order of accuracy \(p\) and \(B(h)=\mathcal{O}(h)\), under Assumption D.9, we have \(\tilde{\mathbf{x}}_{t_{i}}=\frac{\sigma_{t_{i}}}{\sigma_{t_{i-1}}}\mathbf{x}_{t_{i-1 }}+\alpha_{t_{i}}(1-e^{-h_{i}})\mathbf{x}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1})+\alpha _{t_{i}}B(h_{i})\sum_{m=1}^{p}\frac{c_{m}}{r_{m}}(\hat{\mathbf{x}}_{\theta}(\hat{ \mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_ {\lambda_{t_{i-1}}},\lambda_{t_{i-1}}))+\mathcal{O}(h^{p+2})\). Then, the local truncation error on \(t_{i}\) is given by \(|\mathbf{x}_{t_{i}}-\bar{\mathbf{x}}_{t_{i}}|\). Further, similar to Definition E.1, we shall show that

\[\max_{1\leq i\leq M}|\mathbf{x}_{t_{i}}-\bar{\mathbf{x}}_{t_{i}}|=\mathcal{O}(h^{p+2} ),\quad h=\max_{1\leq i\leq M}h_{i}.\]

Combining (9) and (28), we have

\[\mathbf{x}_{t_{i}}=\frac{\sigma_{t_{i}}}{\sigma_{t_{i-1}}}\mathbf{x}_{t_{i-1}}+\alpha_ {t_{i}}(1-e^{-h_{i}})\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1})+\alpha_ {t_{i}}\sum_{k=1}^{p}h_{i}^{k+1}\psi_{k+1}(h_{i})\hat{\mathbf{x}}_{\theta}^{(k)}( \hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})+\mathcal{O}(h^{p+2}).\]

Recall that \(\mathbf{R}_{p,k}^{\top}\) is the \(k\)-th row of \(\mathbf{R}_{p}\). By (13), we have \(|\mathbf{c}_{p}^{\top}\mathbf{R}_{p,k}(h_{i})-B^{-1}(h_{i})h_{i}^{k}k!\psi_{k+1}(h_{i} )|\leq CB^{-1}(h_{i})h^{p+1}\) for some constant \(C>0\). Under Assumption E.3, by Taylor expansion, we obtain

\[\sum_{m=1}^{p}\frac{c_{m}}{r_{m}}(\hat{\mathbf{x}}_{\theta}(\hat{\bm {x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{ \lambda_{t_{i-1}}},\lambda_{t_{i-1}}))\] \[=\sum_{n=1}^{p}\sum_{m=1}^{p}c_{m}\frac{r_{m}^{n-1}h_{i}^{n}}{n!} \hat{\mathbf{x}}_{\theta}^{(n)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1} })+\mathcal{O}(h^{p+1})\] \[=\sum_{n=1}^{p}\frac{h_{i}}{n!}\mathbf{c}_{p}^{\top}\mathbf{R}_{p,n}(h_{i} )\hat{\mathbf{x}}_{\theta}^{(n)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1} })+\mathcal{O}(h^{p+1}).\]

Thus, we have \(\left|\sum_{m=1}^{p}\frac{c_{m}}{r_{m}}(\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{ \lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{\lambda_ {t_{i-1}}},\lambda_{t_{i-1}}))-B(h_{i})^{-1}\sum_{k=1}^{p}h_{i}^{k+1}\psi_{k+1 }(h_{i})\hat{\mathbf{x}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{ t_{i-1}})\right|\leq C_{1}(B(h_{i})^{-1}h^{p+2}+h^{p+1})\). Given \(0\neq B(h_{i})=\mathcal{O}(h_{i})\), we have

\[\max_{1\leq i\leq M}|\mathbf{x}_{t_{i}}-\bar{\mathbf{x}}_{t_{i}}| =\left|\alpha_{t_{i}}\sum_{k=1}^{p}h_{i}^{k+1}\psi_{k+1}(h_{i} )\hat{\mathbf{x}}_{\theta}^{(k)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})\right.\] \[-\alpha_{t_{i}}B(h_{i})\sum_{m=1}^{p}\frac{c_{m}}{r_{m}}(\hat{ \mathbf{x}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{x}}_{ \theta}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}}))\right|+\mathcal{O }(h^{p+2})\] \[=\mathcal{O}(h^{p+2}).\]

Therefore, UniC-\(p\) for the data prediction model is of \((p+1)\)-th order of accuracy. \(\square\)

### Proof of Theorem c.1

We first give the local truncation error of UniPC\({}_{v}\). Let \(A_{m,n}\) denote the element of \(\mathbf{A}_{p}\) on row \(m\) and column \(n\). Given \(\mathbf{x}_{r}\), \(r\leq t_{i-1}\), are correct, with a slight abuse of notation, let

\[\tilde{\mathbf{x}}_{t_{i}} =\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x}_{t_{i-1}}-\sigma_{t _{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1})\] \[-\sigma_{t_{i}}\sum_{n=1}^{p}h_{i}\varphi_{n+1}(h_{i})\sum_{m=1}^{p -1}A_{m,n}(\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}}, \lambda_{s_{m}})-\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}}, \lambda_{t_{i-1}}))/r_{m}\] \[-\sigma_{t_{i}}\sum_{n=1}^{p}h_{i}\varphi_{n+1}(h_{i})A_{p,n}(\mathbf{ \epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i}},t_{i})-\hat{\mathbf{\epsilon}}_{\theta}( \hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}}))/r_{p}.\]Similar to (23), we have

\[\tilde{\mathbf{x}}_{t_{i}}=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x}_ {t_{i-1}}-\sigma_{t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{ i-1})\\ -\sigma_{t_{i}}\sum_{n=1}^{p}h_{i}\varphi_{n+1}(h_{i})\sum_{m=1}^{ p}A_{m,n}(\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m} })-\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{i_{i-1}}},\lambda_{t_{i- 1}}))/r_{m}+\mathcal{O}(h^{p+2}). \tag{29}\]

Suppose \(\mathbf{x}_{t}\) is the solution of the diffusion ODE (1) and the local truncation error on \(t_{i}\) is given by \(|\mathbf{x}_{t_{i}}-\tilde{\mathbf{x}}_{t_{i}}|\). Further, we shall show that the order of accuracy of UniPC\({}_{v}\)-\(p\) is \(p+1\), _i.e._,

\[\max_{1\leq i\leq M}|\mathbf{x}_{t_{i}}-\tilde{\mathbf{x}}_{t_{i}}|=\mathcal{O}(h^{p+2 }),\quad h=\max_{1\leq i\leq M}h_{i}.\]

By (24), we have

\[\mathbf{x}_{t_{i}}=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x}_{t_{i-1}}-\sigma_ {t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1})-\sigma_{t _{i}}\sum_{k=1}^{p}h_{i}^{k+1}\varphi_{k+1}(h_{i})\hat{\mathbf{\epsilon}}_{\theta} ^{(k)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})+\mathcal{O}(h^{p+2}). \tag{30}\]

Under Assumption E.2, by Taylor expansion, we obtain

\[\sum_{k=1}^{p}h_{i}\varphi_{k+1}(h_{i})\sum_{m=1}^{p}\frac{A_{m,k }}{r_{m}}(\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_ {s_{m}})-\hat{\mathbf{\epsilon}}_{\theta}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda _{t_{i-1}}))\\ =\sum_{k=1}^{p}h_{i}\varphi_{k+1}(h_{i})\sum_{m=1}^{p}A_{m,k}\sum _{n=1}^{p}\frac{r_{m}^{-1}h_{i}^{n}}{n!}\hat{\mathbf{\epsilon}}_{\theta}^{(n)}( \hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})+\mathcal{O}(h^{p+2})\\ =\sum_{n=1}^{p}\sum_{k=1}^{p}\varphi_{k+1}(h_{i})\sum_{m=1}^{p}A_ {m,k}\frac{r_{m}^{-1}h_{i}^{n+1}}{n!}\hat{\mathbf{\epsilon}}_{\theta}^{(n)}(\hat{ \mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})+\mathcal{O}(h^{p+2})\\ =\sum_{n=1}^{p}\sum_{k=1}^{p}\varphi_{k+1}(h_{i})h_{i}^{n+1}(\mathbf{ 1}(k=n)+\mathcal{O}(h^{p}))\hat{\mathbf{\epsilon}}_{\theta}^{(n)}(\hat{\mathbf{x}}_{ \lambda_{t_{i-1}}},\lambda_{t_{i-1}})+\mathcal{O}(h^{p+2})\\ =\sum_{n=1}^{p}h_{i}^{n+1}\varphi_{n+1}(h_{i})\hat{\mathbf{\epsilon}}_{ \theta}^{(n)}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}})+\mathcal{O}( h^{p+2}).\]

Thus, we have

\[\max_{1\leq i\leq M}|\mathbf{x}_{t_{i}}-\tilde{\mathbf{x}}_{t_{i}}|=\mathcal{O}(h^{p+2 }).\]

Therefore, UniPC\({}_{v}\)-\(p\) is of \((p+1)\)-th order of accuracy. \(\Box\)

### Proof of Proposition d.5

For UniP-\(p\), we define

\[\bar{\mathbf{x}}_{t_{i}}=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x}_{t_{i-1}}- \sigma_{t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1})- \sigma_{t_{i}}B(h_{i})\sum_{m=1}^{p-1}\frac{a_{m}}{r_{m}}(\hat{\mathbf{\epsilon}} _{\theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{\epsilon}}_ {\theta}(\hat{\mathbf{x}}_{\lambda_{i-1}},\lambda_{t_{i-1}})). \tag{31}\]

By Assumption D.2, we have \(|\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{s},s)-\mathbf{\epsilon}_{\theta}(\mathbf{x}_{s},s)|\leq L|\tilde{\mathbf{x}}_{s}-\mathbf{x}_{s}|\). Therefore, for sufficiently large constants \(C,C_{1}>0\) depending on \(\{a_{m}\}\) and \(\{r_{m}\}\), we have

\[|\tilde{\mathbf{x}}_{t_{i}}-\bar{\mathbf{x}}_{t_{i}}|\leq\big{(}\frac{\alpha_{t_{i}}}{ \alpha_{t_{i-1}}}+L\sigma_{t_{i}}(e^{h_{i}}-1)+CLph\big{)}|\tilde{\mathbf{x}}_{t_{i -1}}-\mathbf{x}_{t_{i-1}}|+CLh\sum_{m=1}^{p-1}|\tilde{\mathbf{x}}_{t_{i-m-1}}-\mathbf{x}_{t _{i-m-1}}|. \tag{32}\]

For simplicity, define \(e_{i}=|\tilde{\mathbf{x}}_{t_{i}}-\mathbf{x}_{t_{i}}|\), \(f_{n}=\max_{0\leq i\leq n}|e_{i}|\). Using Theorem 3.1 and (32), we obtain

\[e_{i}\leq\big{(}\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}+L\sigma_{t_{i}}(e^{h_{ i}}-1)+CLph\big{)}e_{i-1}+CLh\sum_{m=1}^{p-1}e_{i-1-m}+C_{0}h^{p+1}. \tag{33}\]Let \(\beta_{i}:=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}+L\sigma_{t_{i}}(e^{h_{i}}-1)+CLph\). Then, it follows that

\[e_{i}\leq(CLph+\beta_{i})f_{i-1}+C_{0}h^{p+1}.\]

Since \(\beta_{i}+CLph>1\) for sufficiently small \(h\), the right hand side is also a trivial bound for \(f_{i-1}\), because \(\alpha_{t}>0\) is monotone decreasing thus \(\alpha_{t_{i}}<\alpha_{t_{i-1}}\). We then have

\[f_{i}\leq(CLph+\beta_{i})f_{i-1}+C_{0}h^{p+1}. \tag{34}\]

Let \(\sigma:=\max_{1\leq i\leq M}\sigma_{t_{i}}+2Cp\). By elementary calculation, under Assumption D.3 we have

\[\prod_{i=p}^{M}(\beta_{i}+CLph)\leq C_{1}\prod_{i=p}^{M}(\alpha_{t_{i}}/\alpha _{t_{i-1}}+L\sigma/M)=C_{1}\frac{\alpha_{t_{M}}}{\alpha_{t_{p-1}}}\prod_{i=p} ^{M}(1+\frac{L\sigma\alpha_{t_{i-1}}}{\alpha_{t_{i}}M})\leq C_{2}e^{b\sigma}, \tag{35}\]

where \(C_{1}\), \(C_{2}\) are sufficiently large constants. Under Assumption D.4 with \(k=p\), \(f_{p-1}=\max_{0\leq i\leq p-1}|\tilde{\mathbf{x}}_{t_{i}}-\mathbf{x}_{t_{i}}|\leq c_{0 }h^{p}\). Repeat the argument of (34), under Assumption D.3 by (35), there exists constant \(C_{3},C_{4}>0\) such that

\[f_{M}\leq C_{2}e^{b\sigma}f_{p-1}+C_{3}Mh^{p+1}\leq C_{4}h^{p}. \tag{36}\]

Therefore, the convergence order of UniP-\(p\) is \(p\). 

### Proof of Proposition D.6

For the sake of clarity, we use \(\bar{\mathbf{x}}_{t_{i}}^{c}=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}\mathbf{x}_{t_{i- 1}}-\sigma_{t_{i}}(e^{h_{i}}-1)\mathbf{\epsilon}_{\theta}(\mathbf{x}_{t_{i-1}},t_{i-1} )-\sigma_{t_{i}}B(h_{i})\sum_{m=1}^{p}\frac{a_{m}}{r_{m}}(\hat{\mathbf{\epsilon}}_ {\theta}(\hat{\mathbf{x}}_{\lambda_{s_{m}}},\lambda_{s_{m}})-\hat{\mathbf{\epsilon}}_{ \theta}(\hat{\mathbf{x}}_{\lambda_{t_{i-1}}},\lambda_{t_{i-1}}))\) for UniC-\(p\) and use \(\bar{\mathbf{x}}_{t_{i}}\) of (31) for UniP-\(p\). Similar to (32), we have for \(i\geq p\),

\[|\tilde{\mathbf{x}}_{t_{i}}^{c}-\bar{\mathbf{x}}_{t_{i}}^{c}| \leq\big{(}\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}+L\sigma_{t_{i}} (e^{h_{i}}-1)+CLph\big{)}|\tilde{\mathbf{x}}_{t_{i-1}}^{c}-\mathbf{x}_{t_{i-1}}|\] \[+CLh\sum_{m=1}^{p-1}|\tilde{\mathbf{x}}_{t_{i-m-1}}^{c}-\mathbf{x}_{t_{i- m-1}}|+LhC_{1}|\tilde{\mathbf{x}}_{t_{i}}-\mathbf{x}_{t_{i}}|, \tag{37}\]

where for the oracle UniPC (see Section 4.2 for definition), the UniP-\(p\) admits

\[|\tilde{\mathbf{x}}_{t_{i}}-\bar{\mathbf{x}}_{t_{i}}| \leq\big{(}\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}+L\sigma_{t_{i}} (e^{h_{i}}-1)+CLph\big{)}|\tilde{\mathbf{x}}_{t_{i-1}}^{c}-\mathbf{x}_{t_{i-1}}|\] \[+CLh\sum_{m=1}^{p-1}|\tilde{\mathbf{x}}_{t_{i-m-1}}^{c}-\mathbf{x}_{t_{i- m-1}}|. \tag{38}\]

Define \(e_{i}^{c}=|\tilde{\mathbf{x}}_{t_{i}}^{c}-\mathbf{x}_{t_{i}}|\), \(f_{n}^{c}=\max_{0\leq i\leq n}|e_{i}^{c}|\). Write \(\beta_{i}:=\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}+L\sigma_{t_{i}}(e^{h_{i}}-1 )+CLph\). Let \(\sigma:=\max_{1\leq i\leq M}\sigma_{t_{i}}+2Cp\). As shown in the proof of Theorem 3.1, \(|\mathbf{x}_{t_{i}}-\bar{\mathbf{x}}_{t_{i}}^{c}|=\mathcal{O}(h^{p+2})\). Combining the local truncation error, it follows that

\[f_{i}^{c} \leq\beta_{i}f_{i-1}^{c}+CLhpf_{i-1}^{c}+LhC_{1}(\beta_{i}f_{i-1}^ {c}+CLhpf_{i-1}^{c}+C_{2}h^{p+1})+C_{0}h^{p+2}\] \[\leq(1+LhC_{1})(\beta_{i}+CLhp)f_{i-1}^{c}+C_{2}LC_{1}h^{p+2}+C_{0 }h^{p+2}.\]

Repeating this argument, similar to (36), we have

\[|\tilde{\mathbf{x}}_{t_{M}}^{c}-\mathbf{x}_{0}| \leq f_{M}^{c}\leq\prod_{i=p}^{M}(1+LhC_{1})(\beta_{i}+CLhp)f_{p- 1}^{c}+MC_{2}h^{p+2}\] \[\leq C_{3}e^{LC_{1}+b\sigma}f_{p-1}^{c}+MC_{2}h^{p+2}. \tag{39}\]

For \(0\leq i<p\), we have

\[|\tilde{\mathbf{x}}_{t_{i}}^{c}-\bar{\mathbf{x}}_{t_{i}}| \leq\big{(}\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}+L\sigma_{t_{i}} (e^{h_{i}}-1)+CLph\big{)}|\tilde{\mathbf{x}}_{t_{i-1}}^{c}-\mathbf{x}_{t_{i-1}}|\] \[+CLh\sum_{m=1}^{i-1}|\tilde{\mathbf{x}}_{t_{i-m-1}}-\mathbf{x}_{t_{i-m-1}} |+LhC_{1}|\tilde{\mathbf{x}}_{t_{i}}-\mathbf{x}_{t_{i}}|.\]Therefore, under Assumption D.4 with \(k=p\), we have for \(0\leq i\leq p-1\)

\[f_{i}^{c}\leq\beta_{i}f_{i-1}^{c}+c_{0}CLph^{p+1}+Lh^{p+1}c_{0}C_{1}.\]

Repeat this argument, we find for a constant \(C_{4}>0\)

\[f_{p-1}^{c}\leq C_{4}h^{p+1}. \tag{40}\]

Combining (39) and (40), we have

\[|\tilde{\mathbf{x}}_{t_{M}}^{c}-\mathbf{x}_{0}|=\mathcal{O}(h^{p+1}).\]

For the non-oracle solver, for the step of UniP-\(p\) we have :

\[|\tilde{\mathbf{x}}_{t_{i}}-\mathbf{x}_{t_{i}}| \leq\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}|\tilde{\mathbf{x}}_{t_{i- 1}}^{c}-\mathbf{x}_{t_{i-1}}|+\big{(}CLph+L\sigma_{t_{i}}(e^{h_{i}}-1)\big{)}| \tilde{\mathbf{x}}_{t_{i-1}}-\mathbf{x}_{t_{i-1}}|\] \[+CLh\sum_{m=1}^{p-1}|\tilde{\mathbf{x}}_{t_{i-m-1}}-\mathbf{x}_{t_{i-m-1}} |+C_{2}h^{p+1}. \tag{41}\]

Let \(e_{n}=|\tilde{\mathbf{x}}_{t_{n}}-\mathbf{x}_{t_{n}}|\), \(f_{i}=\max_{1\leq i\leq n}e_{i}\). Under Assumption D.4 with \(k=p\), \(f_{p-1}\leq c_{0}h^{p}\). For \(0\leq i<p\), we have

\[|\tilde{\mathbf{x}}_{t_{i}}^{c}-\mathbf{x}_{t_{i}}| \leq\frac{\alpha_{t_{i}}}{\alpha_{t_{i-1}}}|\tilde{\mathbf{x}}_{t_{i-1 }}^{c}-\mathbf{x}_{t_{i-1}}|+\big{(}CLph+L\sigma_{t_{i}}(e^{h_{i}}-1)\big{)}|\tilde {\mathbf{x}}_{t_{i-1}}-\mathbf{x}_{t_{i-1}}|\] \[+CLh\sum_{m=1}^{i-1}|\tilde{\mathbf{x}}_{t_{i-m-1}}-\mathbf{x}_{t_{i-m-1}} |+LhC_{1}|\tilde{\mathbf{x}}_{t_{i}}-\mathbf{x}_{t_{i}}|+C_{0}h^{p+2}.\]

Similar to (40), we obtain \(f_{p-1}^{c}=\mathcal{O}(h^{p+1})\). Iterating (37) and (41), by Theorem 3.1 we have \(|\tilde{\mathbf{x}}_{t_{M}}^{c}-\mathbf{x}_{0}|=\mathcal{O}(h^{p+1})\). 

## Appendix F Implementation Details

We now provide more details about our UniPC and the experiments.

### Implementation Details about UniPC

Our UniPC is implemented in a multistep manner by default, as is illustrated in Algorithm 5,6. In this case, the extra timesteps that are used to obtain the estimation of higher-order derivatives \(\{s_{m}\}_{m=1}^{p-1}\) are set to be larger than \(t_{i-1}\). In other words, \(\{r_{m}\}_{m=1}^{p-1}\) are all negative. We have also found that the conditions of UniP-2 and UniC-1 degenerate to a simple equation where only a single \(a_{1}\) is unknown. Specifically, considering (8) and (7), we find that

\[a_{1}B(h)-\psi_{1}(h)=\mathcal{O}(h^{2}), \tag{42}\]

where

\[\psi_{1}(h)=h\varphi_{2}(h)=\frac{e^{h}-h-1}{h}=\frac{1}{2}h+\mathcal{O}(h^{2}). \tag{43}\]

For \(B_{1}(h)=h\), it is easy to show that when \(a_{1}=0.5\),

\[a_{1}B(h)-\psi_{1}(h)=\frac{1}{2}h-\frac{1}{2}h+\mathcal{O}(h^{2})=\mathcal{O} (h^{2}). \tag{44}\]

For \(B_{2}(h)=e^{h}-1=h+\mathcal{O}(h^{2})\), the derivation is similar and \(a_{1}=1/2\) also satisfies the condition. Therefore, we can directly set \(a_{1}=1/2\) for UniP-2 and UniC-1 without solving the equation. For higher orders, the vector \(\mathbf{a}_{p}\) is computed normally through the inverse of the \(\mathbf{R}_{p}\) matrix.

To provide enough data points for high-order UniPC, we need a warming-up procedure in the first few steps, as is also used in previous multistep approaches [26] and is shown in Algorithm 5,6,. Since our UniC needs to compute \(\mathbf{\epsilon}_{\theta}(\tilde{\mathbf{x}}_{t_{i}},t_{i})\), _i.e._, the model output at the current timestep \(t_{i}\) to obtain the corrected result \(\mathbf{x}_{t_{i}}^{c}\), performing our UniC at the last sampling step will introduce an extra function evaluation. Therefore, we do not use the corrector after the last execution of the predictor for fair comparisons.

### Details about the experiments.

We now provide more details of our experiments. For unconditional sampling on CIFAR10 [21], we use the ScoreSDE [35] codebase and their pre-trained model, which is a continuous-time DDPM++ model [35]. More concretely, we use the cifar10_ddmpmp_deep_continuous config file, the same as the example provided by the official code of DPM-Solver [25]. To compute FID, we adopt the statistic file provided by ScoreSDE [35] codebase. For unconditional sampling on LSUN Bedroom [39] and FFHQ [18], we adopt the latent-space DPM provided by the stable-diffusion codebase [29]. Since there is no statistic file for these two datasets in the codebase, we compute the dataset statistic of FFHQ using the script in the library pytorch-fid, and borrow the statistic file of LSUN Bedroom from the guided-diffusion codebase [8]. For conditional sampling on pixel space, we implement our method in guided-diffusion codebase [8] and use the pre-trained checkpoint for ImageNet 256\(\times\)256. For conditional sampling on latent space, we adopt the stable-diffusion codebase and use their sd-v1-3.ckpt checkpoint, which is pre-trained on LAION [32]. To obtain the text prompts, we randomly sample 10K captions from the MS-COCO2014 validation dataset [23]. We sample 10K random latent code \(\mathbf{x}_{T}^{*}\) for each caption and fix them when using different methods.

## Appendix G More Results

In this section, we will provide more detailed results, including both quantitative and qualitative results.

### More Quantitative Results

**Unconditional Sampling.** We start by demonstrating detailed results on CIFAR10 [21], which are shown in Table 8. The results of our proposed method are highlighted in gray. Apart from the results already illustrated in Figure 2, we also include the performance of the DPM-Solver [25]

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline \multicolumn{1}{c}{\multirow{2}{*}{Sampling Method}} & \multicolumn{6}{c}{NFE} \\ \cline{2-7}  & 5 & 6 & 7 & 8 & 9 & 10 \\ \hline DDIM [34] & 55.04 & 41.81 & 33.10 & 27.54 & 22.92 & 20.02 \\ DDIM + UniC-1 & 47.22 & 33.70 & 24.60 & 19.20 & 15.33 & 12.77 \\ DPM-Solver-3 [25] & 290.65 & 23.91 & 15.06 & 23.56 & 5.65 & 4.64 \\ DPM-Solver++(2M) [26] & 33.86 & 21.12 & 13.93 & 10.24 & 7.97 & 6.83 \\ DPM-Solver++(2M) + UniC-2 & 31.23 & 17.96 & 11.23 & 8.09 & 6.29 & 5.51 \\ DPM-Solver++(3M) [26] & 29.22 & 13.28 & 7.18 & 5.21 & 4.40 & 4.03 \\ DPM-Solver++(3M) + UniC-3 & 25.50 & 11.72 & 6.79 & 5.04 & 4.22 & 3.90 \\ \hline UniPC-3-\(B_{1}(h)\) & **23.22** & **10.33** & 6.41 & 5.10 & 4.29 & 3.97 \\ UniPC-3-\(B_{2}(h)\) & 26.20 & 11.48 & 6.73 & 5.11 & 4.30 & **3.87** \\ UniPC\({}_{v}\):3 & 25.60 & 11.10 & **6.18** & **4.80** & **4.19** & 4.18 \\ \hline \hline \end{tabular}
\end{table}
Table 8: More unconditional sampling results on CIFAR10 [21].

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline \multicolumn{1}{c}{\multirow{2}{*}{Sampling Method}} & \multicolumn{6}{c}{NFE} \\ \cline{2-7}  & 5 & 6 & 7 & 8 & 9 & 10 \\ \hline DDIM [34] & 58.23 & 44.40 & 34.52 & 28.06 & 23.52 & 19.72 \\ DDIM + UniC & 39.41 & 26.48 & 18.58 & 14.56 & 11.97 & 10.33 \\ DPM-Solver-3 [25] & 54.17 & 25.24 & 12.37 & 8.06 & 10.22 & 7.74 \\ DPM-Solver++(2M) [26] & 32.50 & 20.32 & 14.25 & 11.30 & 9.45 & 8.28 \\ DPM-Solver++(2M) + UniC & 24.20 & 14.92 & 10.82 & 9.11 & 8.01 & 7.39 \\ DPM-Solver++(3M) [26] & 27.15 & 15.60 & 10.81 & 8.98 & 7.89 & 7.39 \\ DPM-Solver++(3M) + UniC & 21.73 & 13.38 & 10.06 & 8.67 & 7.89 & 7.22 \\ \hline UniPC-3-\(B_{1}(h)\) & **18.66** & **11.89** & **9.51** & **8.21** & **7.62** & **6.99** \\ UniPC-3-\(B_{2}(h)\) & 21.66 & 13.21 & 9.93 & 8.63 & 7.69 & 7.20 \\ \hline \hline \end{tabular}
\end{table}
Table 9: More unconditional sampling results on FFHQ [18].

[MISSING_PAGE_FAIL:26]

Figure 5: Comparisons between the images sampled from a DPM pre-trained on ImageNet\(256\times 256\) using DDIM [34], DPM-Solver++ [26] and our UniPC with only 7 NFE.

sampling, where we find \(B_{2}(h)\) significantly outperforms \(B_{1}(h)\), perhaps because \(B_{1}(h)=h\) is too simple and not suitable for the guided sampling. We have also added the results when the guidance scale \(s=1.0\). The results show that our method can achieve better sampling quality with both large and small guidance scales with few sampling steps.

### More Qualitative Results

We provide more visualizations to demonstrate the qualitative performance. First, we consider the class-conditioned guided sampling, _i.e_., the conditional sampling on ImageNet [7] in Figure 5. Specifically, we compare the sampling quality of each method with only 7 NFE. Note that we randomly sample the class from the total 1000 classes in ImageNet for each image sample, but fix the initial noise for different methods.