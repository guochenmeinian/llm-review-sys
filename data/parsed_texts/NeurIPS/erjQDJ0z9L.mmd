# Discovering Preference Optimization Algorithms

with and for Large Language Models

 Chris Lu

Sakana AI and FLAIR

chrislu@sakana.ai

&Samuel Holt

University of Cambridge

sih31@cam.ac.uk

&Claudio Fanconi

University of Cambridge

caf83@cam.ac.uk

&Alex J. Chan

University of Cambridge

ajc340@cam.ac.uk

&Jakob Foerster

FLAIR, University of Oxford

jakob.foerster@eng.ox.ac.uk

&Mihaela van der Schaar

University of Cambridge

mv472@cam.ac.uk

&Robert Tjarko Lange

Sakana AI

robert@sakana.ai

Equal Contribution.

Work partially done at Spotify.

Equal Advising.

Equal Advising.

###### Abstract

Offline preference optimization is a key method for enhancing and controlling the quality of Large Language Model (LLM) outputs. Typically, preference optimization is approached as an offline supervised learning task using manually crafted convex loss functions. While these methods are based on theoretical insights, they are inherently constrained by human creativity, so the large search space of possible loss functions remains under-explored. We address this by performing LLM-driven _objective discovery_ to automatically discover new state-of-the-art preference optimization algorithms without (expert) human intervention. Specifically, we iteratively prompt an LLM to propose and implement new preference optimization loss functions based on previously evaluated performance metrics. This process leads to the discovery of previously unknown and performant preference optimization algorithms. The best performing of these we call _Discovered Preference Optimization_ (DiscoPOP)1, a novel algorithm that adaptively blends logistic and exponential losses. Experiments demonstrate the state-of-the-art performance of DiscoPOP and its successful transfer to held-out tasks.

Footnote 1: Code: https://github.com/luchris429/DiscoPOP.

## 1 Introduction

Training Large Language Models (LLMs) usually involves starting with a model pre-trained on large text corpora and then fine-tuning it to match human preferences. Pre-trained, and even instruction fine-tuned LLMs, can generate harmful, dangerous, and unethical completions [11, 12]. To mitigate this and align an LLM with human values, we use human preference alignment through preference-ranked completion data. This approach has become an industry standard, popularized by reinforcement learning with human feedback (RLHF) [13, RLHF], and more recently, by offline preference optimization algorithms like direct preference optimization [14, 2] and sequence likelihood calibration [15].

et al., 2023, SLiC], which cast the problem as a supervised learning objective. Many algorithms have been proposed in the literature for offline preference optimization, and it remains an open question which one performs best across tasks. While a strictly dominant algorithm may not exist, some algorithms likely exhibit generally improved performance. To date, all existing state-of-the-art preference optimization algorithms [Rafailov et al., 2023, Azar et al., 2023, Zhao et al., 2023] have been developed by human experts. Despite their advancements, these solutions are inherently constrained by human limitations, including creativity, ingenuity, and expert knowledge.

In this work, we aim to address these limitations by performing LLM-driven discovery to _automatically_ generate new state-of-the-art preference optimization algorithms without continual expert human intervention in the development process. While previous works [Ma et al., 2023, Yu et al., 2023] have used LLMs to design environment-specific RL reward functions, we discover general-purpose objective functions which can be used across various preference optimization tasks. More specifically, we iteratively prompt an LLM to propose new preference optimization loss functions and evaluate them, with the previously proposed loss functions and their task performance metric (in our case, MT-Bench scores [Zheng et al., 2024]) as in-context examples. After performing this automatic discovery process, we catalogue high-performing loss functions and introduce a particularly strong one we call _Discovered Preference Optimization_ (DiscoPOP), a new algorithm. To ensure robustness beyond MT-Bench, we validate DiscoPOP using AlapacaEval 2.0 [Dubois et al., 2024], showing an improvement in win rates against GPT-4 from DPO \((11.23\%\to 13.21\%)\). Additionally, in separate, held-out, tasks such as summarization and controlled generation, models trained with the DiscoPOP loss outperform or perform competitively with existing preference optimization algorithms.

**Contributions:**1 We propose an LLM-driven objective discovery pipeline to discover novel offline preference optimization algorithms (Section 3). **2 We discover multiple high-performing preference optimization losses. One such loss, which we call _Discovered Preference Optimization_ (DiscoPOP), achieves strong performance across multiple held-out evaluation tasks of multi-turn dialogue (AlpacaEval 2.0), controlled sentiment generation (IMDb) and summarization (TL;DR) tasks. **3** We provide an initial analysis of DiscoPOP, which is a weighted sum of logistic and exponential losses, and discover surprising features. For example, DiscoPOP is non-convex.

## 2 Background

**Preference Optimization**. Consider a pre-trained language model policy \(\pi_{\theta}\) and a dataset \(\mathcal{D}=\{(x^{i},y^{i}_{w},y^{i}_{l})\}_{i=1}^{N}\) consisting of prompts \(x\) and preference-ranked completions \(y_{w}\) and \(y_{l}\). In this dataset, a human rater prefers \(y_{w}\) over \(y_{l}\), denoted as \(y_{w}\succ y_{l}\). The task is to align \(\pi_{\theta}\) with the human values implicit in these preferences. Canonically, this has been achieved through reinforcement learning from human feedback [Christiano et al., 2017, RLHF], an approach that proceeds in two

Figure 1: **Left**. Conceptual illustration of LLM-driven discovery of objective functions. We prompt an LLM to output new code-level implementations of offline preference optimization losses \(\mathbb{E}_{(y_{w},y_{l},x)\sim\mathcal{D}}\left[f\left(\beta\rho\right)\right]\) as a function of the policy (\(\pi_{\theta}\)) and reference model’s (\(\pi_{\text{\tiny{ref}}}\)) likelihoods of the chosen (\(y_{w}\)) and rejected (\(y_{l}\)) completions. Afterwards, we run an inner loop training procedure and evaluate the resulting model on MT-Bench. The corresponding performance is fed back to the language model, and we query it for the next candidate. **Right**. Performance of discovered objective functions on Alpaca Eval.

phases: First, a _reward modelling_ stage that learns a parameterized reward model \(r_{\phi}\). By assuming a Bradley-Terry model (Bradley and Terry, 1952) of preferences, the probability of the data can be expressed as \(P(y_{w}\succ y_{l})=\exp r_{\phi}(y_{w},x)/(\exp r_{\phi}(y_{w},x)+\exp r_{\phi} (y_{l},x))\), and subsequently simply optimized over \(\phi\) through the maximum likelihood principle. The second stage of _policy optimization_ employs a reinforcement learning algorithm to train the language model against the learned reward. Usually, a KL penalty is introduced between the model and the pre-RL _reference_ policy \(\pi_{ref}\)(Jaques et al., 2019; Stiennon et al., 2020) to prevent over-optimization and straying too far from the original policy, resulting in the final objective:

\[\max_{\pi_{\theta}}\underbrace{\mathbb{E}_{y\sim\pi_{\theta},x\sim\mathcal{P}} \left[r_{\phi}(y,x)\right]}_{\text{reward maximization}}-\beta\underbrace{ \mathbb{KL}(\pi_{\theta},\pi_{\text{ref}})}_{\text{regularization}}.\] (1)

Despite success in frontier models (Anthropic, 2023; Gemini-Team, 2023), deep RL has many implementations (Engstrom et al., 2019) and training challenges (Sutton, 1984; Razin et al., 2023) that hinder its adoption. To simplify the whole process, _direct preference optimization_(Rafailov et al., 2023, DPO) aims to forego both the reward modelling and online RL procedure. Rewriting (1) with a decomposition of the KL term into:

\[\max_{\pi_{\theta}}\mathbb{E}_{y\sim\pi_{\theta},x\sim\mathcal{P}}\bigg{[} \underbrace{r_{\phi}(y,x)}_{\text{reward}}+\underbrace{\beta\log\pi_{ref}(y|x)}_ {\pi_{ref}\text{ regularization}}\bigg{]}+\underbrace{\beta\mathcal{H}(\pi_{\theta})}_ {\text{policy entropy}},\] (2)

expresses the problem as an entropy-regularised RL bandit task (Ziebart et al., 2008), for which a known analytical solution exists: \(\pi^{*}(y|x)=Z(x)^{-1}\pi_{ref}(y|x)\exp\big{(}\beta^{-1}r_{\phi}(y,x)\big{)}\). By rearranging the reward, we can express the task as a binary classification problem based on the reward difference:

\[\min_{\pi_{\theta}}\mathbb{E}_{(y_{w},y_{l},x)\sim\mathcal{D}}\bigg{[}f\Bigg{(} \underbrace{\beta\cdot\left(\log\frac{\pi_{\theta}(y_{w}|x)}{\pi_{\text{ref}}( y_{w}|x)}-\log\frac{\pi_{\theta}(y_{l}|x)}{\pi_{\text{ref}}(y_{l}|x)}\right)}_{r_{ \phi}(y_{w},x)-r_{\phi}(y_{l},x)}\Bigg{)}\bigg{]}.\] (3)

Here, we define the log ratio difference as \(\rho=\log\frac{\pi_{\theta}(y_{w}|x)}{\pi_{\text{ref}}(y_{w}|x)}-\log\frac{\pi _{\theta}(y_{l}|x)}{\pi_{\text{ref}}(y_{l}|x)}\). In DPO, the function \(f=-\log\sigma\) is derived as the negative log of the sigmoid function given the BT model assumptions. However, Tang et al. (2024) highlighted that more generally we can obtain a recipe for offline preference optimization algorithms by letting \(f:\mathbb{R}\rightarrow\mathbb{R}\) be any scalar loss function. For example, setting \(f(x)=(x-1)^{2}\), the squared loss function (Rosasco et al., 2004) yields IPO (Azar et al., 2023), while employing the max-margin inspired hinge loss (Boser et al., 1992; Cortes and Vapnik, 1995)\(f(x)=\max(0,1-x)\) produces SLiC (Zhao et al., 2023).

**Meta-Optimization for Algorithm Discovery**. The goal of meta-optimization (optimizing the optimization process) is to uncover novel learning algorithms using a data-driven process. Suppose that an algorithm uses an objective function \(f^{\gamma}\) to train a model for \(K\) iterations, where \(\gamma\) denotes a set of meta-parameters. Meta-optimization searches for an objective that maximizes the expected downstream performance \(\max\), \(\mathbb{E}[\eta(\pi_{K})|\mathbf{train}(f^{\gamma})]\) where \(\eta\) is a downstream performance metric. Unlike previous methods that rely on a predefined parameterization of \(\gamma\) (e.g., a neural network (Hospedales et al., 2021) or domain-specific language (Alet et al., 2020)), we leverage LLMs to directly propose code-level objective functions in Python. This approach eliminates the need for a carefully designed search space and utilizes the extensive knowledge embedded in the LLM for flexible selection and mutation.

## 3 LLM-Driven Objective _Discovery_

Choosing an appropriate objective function is crucial for insttilling capabilities into networks. Here, we detail our discovery process facilitated by LLM code-level objective function proposals:

**Initial Context Construction**. In the initial system prompt, we 'burn-in' the LLM using several established objective functions given in code and their corresponding performance. Furthermore, we provide problem details and an example of the output response format as a JSON dictionary.

**LLM Querying, Parsing & Output Validation**. We query the LLM, parse the response JSON, and run a set of unit tests (e.g. for valid output shapes) before starting a training run. If the parsing or unit tests fail, we resample a new solution after providing the error message as feedback to the LLM.

**Performance Evaluation**. The proposed objective function is then evaluated based on its ability to optimize a model for a predefined downstream validation task. We refer to the resulting performance metric as \(\eta\).

**Iterative Refinement**. By using the performance provided as feedback, the LLM iteratively refines its proposals. In each iteration, the model synthesizes a new candidate loss function, exploring both variations of previously successful formulas and entirely new formulations that might improve upon the existing benchmarks. This iterative process is repeated for a specified number of generations or until convergence when a set of optimal loss functions is observed.

We summarise this general objective discovery process in Figure 1 and is shown in Algorithm 1.

```
1:Initialize LLM with established loss functions and their performance in context.
2:repeat for each generation \(i\)
3:LLM proposes a new candidate objective function \(f_{i}\)
4:Run unit tests to check the validity of the candidate and resample if needed.
5:Evaluate the objective function using the performance metric \(\eta\)
6:Update the LLM context with the performance data
7:LLM refines generation strategy based on the feedback
8:until convergence criteria are met or maximum generations are reached ```

**Algorithm 1** LLM-Driven Objective Discovery

**Small case study: Discovering supervised classification loss functions**. Consider the case of supervised classification on the CIFAR-10 dataset as a simple starting example. We train a simple ResNet-18 for 5 epochs using the objectives proposed by GPT-4 [1]. After each training run we provide the LLM with the corresponding validation accuracy and query it for the next PyTorch-based [15] candidate objective function.

Figure 2 depicts the performance of the proposed objective functions across the discovery process. The different discovered objectives all outperform the standard cross-entropy loss. Interestingly, we observe that the LLM-driven discovery alternates between several different exploration, fine-tuning, and knowledge composition steps: Initially, the LLM proposes a label-smoothed cross-entropy objective. After tuning the smoothing temperature, it explores a squared error loss variant, which improved the observed validation performance. Next, the two conceptually different objectives are combined, leading to another significant performance improvement. Hence, the LLM discovery process does not perform a random search over objectives previously outlined in the literature but instead composes various concepts in a complementary fashion. Furthermore, the discovered objectives also generalize to different architectures and longer training runs. In Appendix D.3 we show that this process of discovery is robust to the choice of sampling temperature and prompt/context construction.

## 4 Discovering Offline Preference Optimization Objectives

In this section, we run our LLM-driven discovery to automatically generate new state-of-the-art preference optimization algorithms.

Figure 2: LLM-driven objective discovery for CIFAR-10 classification. **Left.** Performance across LLM-discovery trials. The proposals alternate between exploring new objective concepts, tuning the components, and combining previous insights. **Right.** The best three discovered objectives transfer to different network architectures and longer training runs (100 epochs).

[MISSING_PAGE_FAIL:5]

## 5 Held-Out Evaluations

We next validate each of our discovered objective functions (shown in Table 1) on held-out tasks. We find that the Performance Adaptive Decay Loss (PADLL) and the Log Ratio Modulated Loss (LRML) consistently perform well. Because of its unconventional properties and performance, we refer to LRML as our discovered preference optimization, or _DiscoPOP_, algorithm.

We consider three different standard (Rafailov et al., 2023) open-ended text generation tasks each designed to evaluate different properties of the fine-tuned LLM policy \(\pi_{\theta}\) where each LLM policy is trained with one of our discovered objective functions \(f\) on a preference dataset \(\mathcal{D}=\{(x^{i},y_{w}^{i},y_{i}^{i})\}_{i=1}^{N}\).

### Single-turn Dialogue - Alpaca Eval 2.0

We evaluate the trained models on Alpaca Eval 2.0, (Li et al., 2023; Dubois et al., 2023, 2024). This is a single-turn dialogue LLM-based automatic evaluation using GPT-4 to assess the win rate of the trained LLM policy's completion compared to the of the underlying SFT base model. Alpaca Eval 2.05, has been validated against 20K human annotations, and aims to reduce the length bias of Alpaca Eval 1.0; where using length controlled (LC) Alpaca Eval shows a correlation with Chatbot Area of 0.98, making it a popular benchmark with the highest correlation to Chatbot Arena (Dubois et al., 2024). We also detail task training details in Appendix B.1.

Footnote 5: https://github.com/tatsu-lab/alpaca_eval

We provide the Alpaca Eval 2.0 results in Table 2. As reference policies, we used GPT-4 for absolute comparison and the SFT-trained model for relative comparison. We observe that the discovered LRML (DiscoPOP), PADLL, and AQFL functions outperform the baselines and other discovered losses on the normal and length-controlled win rates. The differences in scores among these top-performing losses are not significant, except for the LC win rate against the SFT reference model, where DiscoPOP performs best.

### Summarization (TL;DR)

We train an LLM policy to, given a forum post on Reddit \(x\), generate a summarization \(y\) of the main points. We finetune 'zephyr-7b-gamma-sft' using 10% of the Reddit TL;DR summarization preference dataset (Volske et al., 2017) on each of the baseline and discovered objective functions. As a reference model, we again use 'zephyr-7b-gamma-sft'. Further details on the training pipeline are outlined in Appendix B.2. To evaluate the quality of the summaries, we make use of the Alpaca Eval 2.0 library with a custom evaluation dataset existing of 694 test samples from the TL;DR dataset and a custom GPT-4 annotator template as described in Rafailov et al. (2023). For additional details regarding the summarization evaluation see Appendix C.3.

\begin{table}
\begin{tabular}{l c c c c} \hline \hline
**Function** & **Win Rate (\%) \(\uparrow\)** & **Win Rate - LC (\%) \(\uparrow\)** & **Win Rate (\%) \(\uparrow\)** & **Win Rate - LC (\%) \(\uparrow\)** \\  & & vs. GPT-4 & & vs. SFT Checkpoint \\ \hline DPO & \(11.23\pm 0.97\) & \(12.81\pm 0.66\) & \(78.72\pm 1.26\) & \(63.34\pm 0.30\) \\ DPO\({}^{*}\) & \(11.99\pm 1.00\) & \(14.73\pm 0.71\) & \(75.75\pm 1.31\) & \(59.88\pm 0.41\) \\ SLiC & \(10.67\pm 0.94\) & \(13;16\pm 0.69\) & \(75.05\pm 1.34\) & \(59.67\pm 0.42\) \\ KTO & \(12.57\pm 1.00\) & \(13.58\pm 0.67\) & \(78.81\pm 1.25\) & \(62.76\pm 0.31\) \\ DB\(\Delta\)QL & \(10.68\pm 0.92\) & \(11.41\pm 0.57\) & \(72.06\pm 1.42\) & \(54.40\pm 0.38\) \\ AQL & \(11.11\pm 0.96\) & \(13.63\pm 0.68\) & \(76.34\pm 1.30\) & \(60.94\pm 0.36\) \\ PADLL & \(\mathbf{14.07\pm 1.04}\) & \(\mathbf{14.89\pm 0.66}\) & \(\mathbf{81.10\pm 1.21}\) & \(64.14\pm 0.28\) \\ AQFL & \(\mathbf{13.63\pm 1.05}\) & \(\mathbf{15.55\pm 0.71}\) & \(\mathbf{79.32\pm 1.23}\) & \(64.41\pm 0.34\) \\ CELL & \(10.27\pm 0.93\) & \(12.26\pm 0.61\) & \(71.75\pm 1.39\) & \(57.48\pm 0.34\) \\ LRML & \(\mathbf{13.21\pm 1.02}\) & \(\mathbf{14.78\pm 0.67}\) & \(\mathbf{79.27\pm 1.24}\) & \(\mathbf{65.18\pm 0.32}\) \\ PFL & \(8.15\pm 0.83\) & \(10.67\pm 0.57\) & \(68.27\pm 1.44\) & \(56.14\pm 0.43\) \\ \hline \hline \end{tabular}
\end{table}
Table 2: **Alpaca Eval 2.0 - Held Out Single Turn Dialogue Task**. Win rate of the discovered objective functions \(f\) evaluated on the Alpaca Eval 2.0 task against either GPT-4 or the SFT base model. Some of the discovered objective functions outperform the baselines, with the best bolded. We detail evaluation and error bars in Appendix C. We have highlighted the best scores with overlapping the standard errors.

In Table 3 the PADLL loss and DPO loss perform best, with little difference from each other, on the summarization task in three out of four metrics. Additionally, the LRML - DiscoPOP function achieves scores slightly below the top performers, especially in the length-controlled win rates. In contrast to the single-turn dialogue task, the AQFL loss does not achieve high scores in the held-out evaluation.

### Positive sentiment generation (IMDb)

In this task, we train an LLM policy to generate movie review completions \(y\) with positive sentiment, where \(x\) is a prompt at the start of a movie review from the IMDb dataset (Maas et al., 2011). We start with a GPT-2 (Radford et al., 2019) model, which had supervised fine-tuning on the IMDb dataset, and we perform preference optimization using the baseline and discovered objective loss functions. Details of the training implementations can be found in Appendix B.3. Inspired by Rafailov et al. (2023)'s experiments, we calculate the model rewards through a pre-trained sentiment classifier, which we use as a proxy for ground truth, as well as the KL-Divergence of the trained model and the reference model. Appendix C.4 provides further details into the evaluation for this task.

We provide results of models with converging \(\beta\) values in Figure 5 for LRML compared against DPO and SLiC, displaying the model rewards against the KL-Divergence to the reference model. In Figure 4(a), the LRML-trained text generator outperforms the DPO model in terms of rewards and KL-divergence with low \(\beta\) values (0.025, 0.05, 0.1). At higher \(\beta\) values (0.5 and 1.0) both methods show trends of increased KL-Divergence and lower rewards, but generally, LRML maintains a higher reward than DPO. In Figure 4(b), we note that LRML slightly outperforms DPO, SLiC, AQFL, and PADLL at \(\beta\in\{0.05,0.1\}\) in terms of reward. For larger \(\beta\) values (0.5 and 1.0), LRML shows similar trends of increased KL-Divergence and rewards like the other objective functions. A more detailed comparison between the individual discovered losses and the baselines can be found in Appendix Figure 8.

## 6 Analysis of DiscoPOP

We list all our discovered objectives in Table 1, as well as the code and mathematical representations in Appendix E. In this section, we now analyze the Log Ratio Modulated Loss, which we define as the DiscoPOP loss function, as it performs consistently high across the held-out evaluation tasks, and we provide some intuitive understanding of how it outperforms the existing state-of-the-art objectives.

### Log Ratio Modulated Loss (DiscoPOP)

The Log Ratio Modulated Loss is a dynamically weighted sum of the logistic loss (as used in DPO) and the exponential loss. The weight of each is determined through a sigmoid calculation of the

\begin{table}
\begin{tabular}{l c c c c} \hline \hline
**Function** & **Win Rate (\%)**\(\uparrow\) & **Win Rate - LC (\%)**\(\uparrow\) & **Win Rate (\%)**\(\uparrow\) & **Win Rate - LC (\%)**\(\uparrow\) \\  & & vs. Human Preference & & vs. SFT Checkpoint \\ \hline DPO & \(\mathbf{88.27\pm 1.07}\) & \(\mathbf{82.82\pm 0.00}\) & \(\mathbf{54.38\pm 1.52}\) & \(54.64\pm 0.00\) \\ SLiC & \(83.02\pm 1.29\) & \(63.41\pm 0.00\) & \(53.03\pm 1.52\) & \(54.11\pm 0.00\) \\ KTO & \(85.34\pm 1.18\) & \(80.26\pm 0.00\) & \(51.15\pm 1.54\) & \(50.0\pm 0.00\) \\ DBAGL & \(84.71\pm 1.21\) & \(78.68\pm 0.00\) & \(52.55\pm 1.52\) & \(55.14\pm 0.00\) \\ AQL & \(81.87\pm 1.32\) & \(68.89\pm 0.00\) & \(46.00\pm 1.54\) & \(50.0\pm 0.00\) \\ PADLL & \(\mathbf{88.54\pm 1.05}\) & \(76.13\pm 0.00\) & \(\mathbf{55.34\pm 1.52}\) & \(\mathbf{55.64\pm 0.00}\) \\ AQFL & \(85.03\pm 1.22\) & \(76.23\pm 0.00\) & \(49.56\pm 1.53\) & \(50.38\pm 0.00\) \\ CELL & \(86.33\pm 1.14\) & \(73.72\pm 0.00\) & \(50.35\pm 1.52\) & \(51.90\pm 0.00\) \\ LRML & \(\mathbf{87.63\pm 1.10}\) & \(81.88\pm 0.00\) & \(53.46\pm 1.52\) & \(55.10\pm 0.00\) \\ PFL & \(79.84\pm 1.35\) & \(69.23\pm 0.00\) & \(44.12\pm 1.52\) & \(44.57\pm 0.00\) \\ \hline \hline \end{tabular}
\end{table}
Table 3: **TL;DR - Held Out Summarization Task Win-rate of various preference optimization functions in the summarization task was evaluated with the Alpaca Eval 2.0 calculations, against a subset of the test set (694 samples). The baseline outputs are the human-generated preferences, and the model after SFT (see Appendix C for details). Note that the standard error in the LC win-rate has been rounded down because of values \(<0.001\). We have highlighted the scores with means overlapping the standard error of the best score.**

[MISSING_PAGE_EMPTY:8]

In Figure 9 and Figure 10 of the Appendix, we plot the LRML objective function for \(\beta\in\{0.01,0.025,0.05,0.1,0.25,0.5,1,2.5,5\}\) against DPO. When \(\beta\) is high, the DiscoPOP objective function takes the form of the DPO log sigmoid loss. During training on \(\beta=0.01\), we observed that DiscoPOP gets stuck in generating predominantly negative reviews (resulting in a reward score of \(\sim 0.15\)). We hypothesize that the loss is stuck in the local minima to the left with a negative difference in log ratios. While training with \(\beta\in\{2.5,5.0\}\), we observed that the model collapsed after a sharp spike in the loss and subsequently having loss value 0 and NaN outputs. This is potentially due to a large gradient in the non-convex part, which could be amended with gradient clipping.

## 7 Related Work

**Evolution and Search with Large Language Models**. LLMs provide a fast and automated way to create multiple candidate solutions for a problem stated in natural language (Song et al., 2024), which makes them powerful tools for driving population-based search procedures. Various recent works have applied this approach to coding problems (Romera-Paredes et al., 2024), neural architecture search (Chen et al., 2024; Holt et al., 2024), virtual robotic design settings (Lehman et al., 2023), reward functions (Ma et al., 2023; Yu et al., 2023), and algorithm heuristics (Liu et al., 2024). Finally, recently LLMs have shown to be capable of acting as recombination operators for black-box optimization with Evolution Strategies (Lange et al., 2024) and for Quality-Diversity approaches (Lim et al., 2024).

**Automated Discovery for Machine Learning**. There are many other approaches to automating the discovery of generalizable machine learning algorithms. Some prior works explore the space of ML functions using genetic algorithms and a hand-crafted domain-specific language for reinforcement learning algorithms (Co-Reyes et al., 2021), curiosity algorithms (Alet et al., 2020), and optimizers (Chen et al., 2024). Other works instead parameterize a transferrable objective function using neural networks and optimize them with evolution strategies or meta-gradients. For example, Lu et al. (2022), Jackson et al. (2024), Houthooft et al. (2018), Alfano et al. (2024), Kirsch et al. (2019), Oh et al. (2020), Jackson et al. (2024) discover policy optimization objectives, Metz et al. (2022) evolves neural network optimizers, and Lange et al. (2023, 2024) evolve blackbox optimizers. Moreover, automatically discovering closed-form functions (i.e., symbolic regression), works exist that leverage RL (Petersen et al., 2020), gradient descent (Kacprzyk et al., 2024), RL with evolution strategies (Mundhenk et al., 2021), pre-training transformers (Biggio et al., 2021) and hybrid combinations of pre-training transformers, which are further refined with RL and evolution strategies (Holt et al., 2023).

**Preference Optimization Algorithms**. While the reduction to supervised learning makes DPO and alternatives easier to use, other approaches have sought to simplify the RL step, including using variants of REINFORCE (Ahmadian et al., 2024; Gemma-Team et al., 2024) as well as more fine-grained feedback (Wu et al., 2024) through preferences over individual steps in the reasoning process (Uesato et al., 2022; Lightman et al., 2023) or reward redistribution (Chan et al., 2024). Others use iterative offline training interleaved with sampling from the policy model and obtaining a preference ranking from themselves (Xu et al., 2023), another judge LLM (Guo et al., 2024), or an oracle (Swamy et al., 2024).

## 8 Conclusion

**Summary**. In this paper, we proposed and used LLM-driven objective discovery to generate novel offline preference optimization algorithms. Specifically, we were able to discover high-performing preference optimization losses that achieve strong performance across held-out evaluation tasks, with the highest performing providing new insights into what an optimal objective may need to possess, such as being a blend of logistic and exponential losses and possibly being non-convex.

**Limitations & Future work**. There are multiple limitations to our current approach. First, we have only scratched the surface of how to generate LLM objective proposals effectively. Initial exploratory experiments using techniques such as temperature sampling or worst-to-best performance sorting in the context did not yield significant improvements. But one could imagine leveraging more information about the training runs and automatically tuning instruction prompt templates. E.g. by providing entire learning curve plots to a Visual Language Model (see Figure 13) or by meta-meta-optimizing (Lu et al., 2023) the LLM prompt. Second, the highest-performing loss re-purposed \(\beta\)in the traditional sense, making it affect the functional behavior and the KL penalty of the model with respect to the base model. This motivates future work to study different forms, with perhaps multiple floating point parameters in the form, that each could be tuned separately. Although we provided an initial analysis sweep over this one single parameter and observed some instances of the functional behavior leading to instability of training the model, a further multi-parameter analysis, reformulating the objective, would be beneficial for future work. Finally, our work uses closed-source models (GPT-4) to generate code, which limits reproducibility and is costly to run. Future work could use the produced models _themselves_ to generate code, resulting in code-level self-improvement.

**Broader Impact and Ethical Considerations**. This paper presents an LLM-driven discovery in-context learning pipeline that is used to generate better-performing novel offline preference optimization algorithms. However, misuse of the pipeline as a tool or training an LLM to produce undesirable, unethical, or harmful outputs could be possible by a user. Furthermore, due to the use of LLMs and training of LLMs, the outputs are susceptible to hallucinations, motivating all outputs of the LLMs to always have a content filter applied to the outputs. Finally, this work takes a small step towards code-level self-improvement in language models, which could potentially result in unintended behaviors.

This work was supported by Azure sponsorship credits granted by Microsoft's AI for Good Research Lab and by Microsoft's Accelerate Foundation Models Academic Research initiative. The hardware used for training was sponsored by GoodAI. SH is funded by AstraZeneca. AJC is funded by a Microsoft Research and EPSRC ICASE scholarship award. CL and RTL were supported by Sakana AI at the time of this work. The code can also be accessed at https://github.com/samholt/DiscoPOP.

## References

* Ahmadian et al. [2024] Arash Ahmadian, Chris Cremer, Matthias Galle, Marzieh Fadaee, Julia Kreutzer, Ahmet Ustun, and Sara Hooker. Back to basics: Revisiting reinforce style optimization for learning from human feedback in lms. _arXiv preprint arXiv:2402.14740_, 2024.
* Alet et al. [2020] Ferran Alet, Martin F Schneider, Tomas Lozano-Perez, and Leslie Pack Kaelbling. Meta-learning curiosity algorithms. _arXiv preprint arXiv:2003.05325_, 2020.
* Alfano et al. [2024] Carlo Alfano, Sebastian Towers, Silvia Sapora, Chris Lu, and Patrick Rebeschini. Meta-learning the mirror map in policy mirror descent. _arXiv preprint arXiv:2402.05187_, 2024.
* Anthropic [2023] Anthropic. Model card and evaluations for Claude models, 2023. URL https://www-files.anthropic.com/production/images/Model-Card-Claude-2.pdf.
* Azar et al. [2023] Mohammad Gheshlaghi Azar, Mark Rowland, Bilal Piot, Daniel Guo, Daniele Calandriello, Michal Valko, and Remi Munos. A general theoretical paradigm to understand learning from human preferences. _arXiv preprint arXiv:2310.12036_, 2023.
* Biggio et al. [2021] Luca Biggio, Tommaso Bendinelli, Alexander Neitz, Aurelien Lucchi, and Giambattista Parascandolo. Neural symbolic regression that scales. In _International Conference on Machine Learning_, pages 936-945. Pmlr, 2021.
* Boser et al. [1992] Bernhard E Boser, Isabelle M Guyon, and Vladimir N Vapnik. A training algorithm for optimal margin classifiers. In _Proceedings of the fifth annual workshop on Computational learning theory_, pages 144-152, 1992.
* Bradley and Terry [1952] Ralph Allan Bradley and Milton E Terry. Rank analysis of incomplete block designs: I. the method of paired comparisons. _Biometrika_, 39(3/4):324-345, 1952.
* Carlini et al. [2021] Nicholas Carlini, Florian Tramer, Eric Wallace, Matthew Jagielski, Ariel Herbert-Voss, Katherine Lee, Adam Roberts, Tom Brown, Dawn Song, Ulfar Erlingsson, et al. Extracting training data from large language models. In _30th USENIX Security Symposium (USENIX Security 21)_, pages 2633-2650, 2021.
* Carlini et al. [2020]Alex J Chan, Hao Sun, Samuel Holt, and Mihaela van der Schaar. Dense reward for free in reinforcement learning from human feedback. _arXiv preprint arXiv:2402.00782_, 2024.
* Chen et al. (2024a) Angelica Chen, David Dohan, and David So. Evoprompting: Language models for code-level neural architecture search. _Advances in Neural Information Processing Systems_, 36, 2024a.
* Chen et al. (2024b) Xiangning Chen, Chen Liang, Da Huang, Esteban Real, Kaiyuan Wang, Hieu Pham, Xuanyi Dong, Thang Luong, Cho-Jui Hsieh, Yifeng Lu, et al. Symbolic discovery of optimization algorithms. _Advances in Neural Information Processing Systems_, 36, 2024b.
* Christiano et al. (2017) Paul F Christiano, Jan Leike, Tom Brown, Miljan Martic, Shane Legg, and Dario Amodei. Deep reinforcement learning from human preferences. _Advances in neural information processing systems_, 30, 2017.
* Co-Reyes et al. (2021) John D Co-Reyes, Yingjie Miao, Daiyi Peng, Esteban Real, Sergey Levine, Quoc V Le, Honglak Lee, and Aleksandra Faust. Evolving reinforcement learning algorithms. _arXiv preprint arXiv:2101.03958_, 2021.
* Cortes and Vapnik (1995) Corinna Cortes and Vladimir Vapnik. Support-vector networks. _Machine learning_, 20:273-297, 1995.
* Cui et al. (2023) Ganqu Cui, Lifan Yuan, Ning Ding, Guanming Yao, Wei Zhu, Yuan Ni, Guotong Xie, Zhiyuan Liu, and Maosong Sun. Ultrafeedback: Boosting language models with high-quality feedback. _arXiv preprint arXiv:2310.01377_, 2023.
* Dubois et al. (2023) Yann Dubois, Xuechen Li, Rohan Taori, Tianyi Zhang, Ishaan Gulrajani, Jimmy Ba, Carlos Guestrin, Percy Liang, and Tatsunori B. Hashimoto. Alpacafarm: A simulation framework for methods that learn from human feedback, 2023.
* Dubois et al. (2024) Yann Dubois, Balazs Galambosi, Percy Liang, and Tatsunori B Hashimoto. Length-controlled alpacaeval: A simple way to debias automatic evaluators. _arXiv preprint arXiv:2404.04475_, 2024.
* Engstrom et al. (2019) Logan Engstrom, Andrew Ilyas, Shibani Santurkar, Dimitris Tsipras, Firdaus Janos, Larry Rudolph, and Aleksander Madry. Implementation matters in deep rl: A case study on ppo and trpo. In _International conference on learning representations_, 2019.
* Ethayarajh et al. (2024) Kawin Ethayarajh, Winnie Xu, Niklas Muennighoff, Dan Jurafsky, and Douwe Kiela. Kto: Model alignment as prospect theoretic optimization, 2024.
* Gehman et al. (2020) Samuel Gehman, Suchin Gururangan, Maarten Sap, Yejin Choi, and Noah A Smith. Real-toxicity prompts: Evaluating neural toxic degeneration in language models. _arXiv preprint arXiv:2009.11462_, 2020.
* Gemini-Team (2023) Google DeepMind Gemini-Team. Gemini: A family of highly capable multimodal models, 2023.
* Gemma-Team et al. (2024) Gemma-Team, Thomas Mesnard, Cassidy Hardin, Robert Dadashi, Surya Bhupatiraju, Shreya Pathak, Laurent Sifre, Morgane Riviere, Mihir Sanjay Kale, Juliette Love, et al. Gemma: Open models based on gemini research and technology. _arXiv preprint arXiv:2403.08295_, 2024.
* Guo et al. (2024) Shangmin Guo, Biao Zhang, Tianlin Liu, Tianqi Liu, Misha Khalman, Felipe Llinares, Alexandre Rame, Thomas Mesnard, Yao Zhao, Bilal Piot, et al. Direct language model alignment from online ai feedback. _arXiv preprint arXiv:2402.04792_, 2024.
* Holt et al. (2023a) Samuel Holt, Alihan Huyuk, Zhaozhi Qian, Hao Sun, and Mihaela van der Schaar. Neural laplace control for continuous-time delayed systems. In _International Conference on Artificial Intelligence and Statistics_, pages 1747-1778. PMLR, 2023a.
* Holt et al. (2023b) Samuel Holt, Zhaozhi Qian, and Mihaela van der Schaar. Deep generative symbolic regression. In _The Eleventh International Conference on Learning Representations_, 2023b. URL https://openreview.net/forum?id=o7koEEMA1bR.
* Holt et al. (2024) Samuel Holt, Alihan Huyuk, and Mihaela van der Schaar. Active observing in continuous-time control. _Advances in Neural Information Processing Systems_, 36, 2024a.
* Holt et al. (2024)Samuel Holt, Tennison Liu, and Mihaela van der Schaar. Automatically learning hybrid digital twins of dynamical systems. In _The Thirty-eighth Annual Conference on Neural Information Processing Systems_, 2024b. URL https://openreview.net/forum?id=S0s10DsdU2.
* Holt et al. (2024) Samuel Holt, Max Ruiz Luyten, and Mihaela van der Schaar. L2MAC: Large language model automatic computer for extensive code generation. In _The Twelfth International Conference on Learning Representations_, 2024c. URL https://openreview.net/forum?id=EhrzQwsV4K.
* Holt et al. (2024) Samuel Holt, Zhaozhi Qian, Tennison Liu, Jim Weatherall, and Mihaela van der Schaar. Data-driven discovery of dynamical systems in pharmacology using large language models. In _The Thirty-eighth Annual Conference on Neural Information Processing Systems_, 2024d.
* Holt et al. (2022) Samuel I Holt, Zhaozhi Qian, and Mihaela van der Schaar. Neural laplace: Learning diverse classes of differential equations in the laplace domain. In _International Conference on Machine Learning_, pages 8811-8832. PMLR, 2022.
* Hospedales et al. (2021) Timothy Hospedales, Antreas Antoniou, Paul Micaelli, and Amos Storkey. Meta-learning in neural networks: A survey. _IEEE transactions on pattern analysis and machine intelligence_, 44(9):5149-5169, 2021.
* Houthooft et al. (2018) Rein Houthooft, Yuhua Chen, Phillip Isola, Bradly Stadie, Filip Wolski, OpenAI Jonathan Ho, and Pieter Abbeel. Evolved policy gradients. _Advances in Neural Information Processing Systems_, 31, 2018.
* Jackson et al. (2024a) Matthew T Jackson, Minqi Jiang, Jack Parker-Holder, Risto Vuorio, Chris Lu, Greg Farquhar, Shimon Whiteson, and Jakob Foerster. Discovering general reinforcement learning algorithms with adversarial environment design. _Advances in Neural Information Processing Systems_, 36, 2024a.
* Jackson et al. (2024b) Matthew Thomas Jackson, Chris Lu, Louis Kirsch, Robert Tjarko Lange, Shimon Whiteson, and Jakob Nicolaus Foerster. Discovering temporally-aware reinforcement learning algorithms. _arXiv preprint arXiv:2402.05828_, 2024b.
* Jaques et al. (2019) Natasha Jaques, Asma Ghandeharioun, Judy Hanwen Shen, Craig Ferguson, Agata Lapedriza, Noah Jones, Shixiang Gu, and Rosalind Picard. Way off-policy batch deep reinforcement learning of implicit human preferences in dialog. _arXiv preprint arXiv:1907.00456_, 2019.
* Kacprzyk et al. (2024) Krzysztof Kacprzyk, Samuel Holt, Jeroen Berrevoets, Zhaozhi Qian, and Mihaela van der Schaar. ODE discovery for longitudinal heterogeneous treatment effects inference. In _The Twelfth International Conference on Learning Representations_, 2024. URL https://openreview.net/forum?id=pxI5IPeWgW.
* Kirsch et al. (2019) Louis Kirsch, Sjoerd van Steenkiste, and Jurgen Schmidhuber. Improving generalization in meta reinforcement learning using learned objectives. _arXiv preprint arXiv:1910.04098_, 2019.
* Lange et al. (2023a) Robert Lange, Tom Schaul, Yutian Chen, Chris Lu, Tom Zahavy, Valentin Dalibard, and Sebastian Flennerhag. Discovering attention-based genetic algorithms via meta-black-box optimization. In _Proceedings of the Genetic and Evolutionary Computation Conference_, pages 929-937, 2023a.
* Lange et al. (2023b) Robert Lange, Tom Schaul, Yutian Chen, Tom Zahavy, Valentin Dalibard, Chris Lu, Satinder Singh, and Sebastian Flennerhag. Discovering evolution strategies via meta-black-box optimization. In _Proceedings of the Companion Conference on Genetic and Evolutionary Computation_, pages 29-30, 2023b.
* Lange et al. (2024) Robert Tjarko Lange, Yingtao Tian, and Yujin Tang. Large language models as evolution strategies. _arXiv preprint arXiv:2402.18381_, 2024.
* Lehman et al. (2023) Joel Lehman, Jonathan Gordon, Shawn Jain, Kamal Ndousse, Cathy Yeh, and Kenneth O Stanley. Evolution through large models. In _Handbook of Evolutionary Machine Learning_, pages 331-366. Springer, 2023.
* Li et al. (2023) Xuechen Li, Tianyi Zhang, Yann Dubois, Rohan Taori, Ishaan Gulrajani, Carlos Guestrin, Percy Liang, and Tatsunori B. Hashimoto. Alpacaeval: An automatic evaluator of instruction-following models. https://github.com/tatsu-lab/alpaca_eval, 2023.
* Liu et al. (2020)Hunter Lightman, Vineet Kosaraju, Yuri Burda, Harrison Edwards, Bowen Baker, Teddy Lee, Jan Leike, John Schulman, Ilya Sutskever, and Karl Cobbe. Let's verify step by step. In _The Twelfth International Conference on Learning Representations_, 2023.
* Lim et al. (2024) Bryan Lim, Manon Flageat, and Antoine Cully. Large language models as in-context ai generators for quality-diversity. _arXiv preprint arXiv:2404.15794_, 2024.
* Liu et al. (2024) Fei Liu, Tong Xialiang, Mingxuan Yuan, Xi Lin, Fu Luo, Zhenkun Wang, Zhichao Lu, and Qingfu Zhang. Evolution of heuristics: Towards efficient automatic algorithm design using large language model. In _Forty-first International Conference on Machine Learning_, 2024.
* Liu et al. (2023) Wei Liu, Weihao Zeng, Keqing He, Yong Jiang, and Junxian He. What makes good data for alignment? a comprehensive study of automatic data selection in instruction tuning. _arXiv preprint arXiv:2312.15685_, 2023.
* Longpre et al. (2023) Shayne Longpre, Le Hou, Tu Vu, Albert Webson, Hyung Won Chung, Yi Tay, Denny Zhou, Quoc V Le, Barret Zoph, Jason Wei, et al. The fian collection: Designing data and methods for effective instruction tuning. In _International Conference on Machine Learning_, pages 22631-22648. PMLR, 2023.
* Loshchilov and Hutter (2017) Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization. In _International Conference on Learning Representations_, 2017. URL https://api.semanticscholar.org/CorpusID:53592270.
* Lu et al. (2022) Chris Lu, Jakub Kuba, Alistair Letcher, Luke Metz, Christian Schroeder de Witt, and Jakob Foerster. Discovered policy optimisation. _Advances in Neural Information Processing Systems_, 35:16455-16468, 2022.
* Lu et al. (2023) Chris Lu, Sebastian Towers, and Jakob Foerster. Arbitrary order meta-learning with simple population-based evolution. In _ALIFE 2023: Ghost in the Machine: Proceedings of the 2023 Artificial Life Conference_. MIT Press, 2023.
* Ma et al. (2023) Yecheng Jason Ma, William Liang, Guanzhi Wang, De-An Huang, Osbert Bastani, Dinesh Jayaraman, Yuke Zhu, Linxi Fan, and Anima Anandkumar. Eureka: Human-level reward design via coding large language models. _arXiv preprint arXiv:2310.12931_, 2023.
* Maas et al. (2011) Andrew Maas, Raymond E Daly, Peter T Pham, Dan Huang, Andrew Y Ng, and Christopher Potts. Learning word vectors for sentiment analysis. In _Proceedings of the 49th annual meeting of the association for computational linguistics: Human language technologies_, pages 142-150, 2011.
* Metz et al. (2022) Luke Metz, James Harrison, C Daniel Freeman, Amil Merchant, Lucas Beyer, James Bradbury, Naman Agrawal, Ben Poole, Igor Mordatch, Adam Roberts, et al. Velo: Training versatile learned optimizers by scaling up. _arXiv preprint arXiv:2211.09760_, 2022.
* Mundhenk et al. (2021) T Nathan Mundhenk, Mikel Landajuela, Ruben Glatt, Claudio P Santiago, Daniel M Faissol, and Brenden K Petersen. Symbolic regression via neural-guided genetic programming population seeding. In _Proceedings of the 35th International Conference on Neural Information Processing Systems_, pages 24912-24923, 2021.
* Oh et al. (2020) Junhyuk Oh, Matteo Hessel, Wojciech M Czarnecki, Zhongwen Xu, Hado P van Hasselt, Satinder Singh, and David Silver. Discovering reinforcement learning algorithms. _Advances in Neural Information Processing Systems_, 33:1060-1070, 2020.
* Gpt-4 technical report, 2023.
* Paszke et al. (2017) Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Alban Desmaison, Luca Antiga, and Adam Lerer. Automatic differentiation in pytorch. 2017.
* Petersen et al. (2020) Brenden K Petersen, Mikel Landajuela Larma, Terrell N Mundhenk, Claudio Prata Santiago, Soo Kyung Kim, and Joanne Taery Kim. Deep symbolic regression: Recovering mathematical expressions from data via risk-seeking policy gradients. In _International Conference on Learning Representations_, 2020.
* PogAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. Language models are unsupervised multitask learners. _OpenAI blog_, 1(8):9, 2019.
* Rafailov et al. (2023) Rafael Rafailov, Archit Sharma, Eric Mitchell, Stefano Ermon, Christopher D Manning, and Chelsea Finn. Direct preference optimization: Your language model is secretly a reward model. _arXiv preprint arXiv:2305.18290_, 2023.
* Razin et al. (2023) Noam Razin, Hattie Zhou, Omid Saremi, Vimal Thilak, Arwen Bradley, Preetum Nakkiran, Joshua Susskind, and Etai Littwin. Vanishing gradients in reinforcement finetuning of language models. _arXiv preprint arXiv:2310.20703_, 2023.
* Romera-Paredes et al. (2024) Bernardino Romera-Paredes, Mohammad Barekatain, Alexander Novikov, Matej Balog, M Pawan Kumar, Emilien Dupont, Francisco JR Ruiz, Jordan S Ellenberg, Pengming Wang, Omar Fawzi, et al. Mathematical discoveries from program search with large language models. _Nature_, 625(7995):468-475, 2024.
* Rosasco et al. (2004) Lorenzo Rosasco, Ernesto De Vito, Andrea Caponnetto, Michele Piana, and Alessandro Verri. Are loss functions all the same? _Neural computation_, 16(5):1063-1076, 2004.
* Song et al. (2024) Xingyou Song, Yingtao Tian, Robert Tjarko Lange, Chansoo Lee, Yujin Tang, and Yutian Chen. Position paper: Leveraging foundational models for black-box optimization: Benefits, challenges, and future directions. _arXiv preprint arXiv:2405.03547_, 2024.
* Stiennon et al. (2020) Nisan Stiennon, Long Ouyang, Jeffrey Wu, Daniel Ziegler, Ryan Lowe, Chelsea Voss, Alec Radford, Dario Amodei, and Paul F Christiano. Learning to summarize with human feedback. _Advances in Neural Information Processing Systems_, 33:3008-3021, 2020.
* Sutton (1984) Richard Stuart Sutton. _Temporal credit assignment in reinforcement learning_. University of Massachusetts Amherst, 1984.
* Swamy et al. (2024) Gokul Swamy, Christoph Dann, Rahul Kidambi, Zhiwei Steven Wu, and Alekh Agarwal. A minimalismalist approach to reinforcement learning from human feedback. _arXiv preprint arXiv:2401.04056_, 2024.
* Tang et al. (2024) Yunhao Tang, Zhaohan Daniel Guo, Zeyu Zheng, Daniele Calandriello, Remi Munos, Mark Rowland, Pierre Harvey Richemond, Michal Valko, Bernardo Avila Pires, and Bilal Piot. Generalized preference optimization: A unified approach to offline alignment. _arXiv preprint arXiv:2402.05749_, 2024.
* Tunstall and Schmid (2024) Lewis Tunstall and Philipp Schmid. Zephyr 7b gamma. https://huggingface.co/HuggingFaceH4/zephyr-7b-gamma-v0.1, 2024.
* Tunstall et al. (2023a) Lewis Tunstall, Edward Beeching, Nathan Lambert, Nazneen Rajani, Shengyi Huang, Kashif Rasul, Alexander M. Rush, and Thomas Wolf. The alignment handbook. https://github.com/huggingface/alignment-handbook, 2023a.
* Tunstall et al. (2023b) Lewis Tunstall, Edward Beeching, Nathan Lambert, Nazneen Rajani, Kashif Rasul, Younes Belkada, Shengyi Huang, Leandro von Werra, Clementine Fourrier, Nathan Habib, Nathan Sarrazin, Omar Sanseviero, Alexander M. Rush, and Thomas Wolf. Zephyr: Direct distillation of lm alignment, 2023b.
* Uesato et al. (2022) Jonathan Uesato, Nate Kushman, Ramana Kumar, Francis Song, Noah Siegel, Lisa Wang, Antonia Creswell, Geoffrey Irving, and Irina Higgins. Solving math word problems with process-and outcome-based feedback. _arXiv preprint arXiv:2211.14275_, 2022.
* Volske et al. (2017) Michael Volske, Martin Potthast, Shahbaz Syed, and Benno Stein. Tl; dr: Mining reddit to learn automatic summarization. In _Proceedings of the Workshop on New Frontiers in Summarization_, pages 59-63, 2017.
* Werra et al. (2018) Leandro von Werra, Younes Belkada, Lewis Tunstall, Edward Beeching, Tristan Thrush, and Nathan Lambert. TRL: Transformer Reinforcement Learning. URL https://github.com/huggingface/trl.

Zeqiu Wu, Yushi Hu, Weijia Shi, Nouha Dziri, Alane Suhr, Prithviraj Ammanabrolu, Noah A Smith, Mari Ostendorf, and Hannaneh Hajishirzi. Fine-grained human feedback gives better rewards for language model training. _Advances in Neural Information Processing Systems_, 36, 2024.
* Xu et al. (2023) Jing Xu, Andrew Lee, Sainbayar Sukhbaatar, and Jason Weston. Some things are more crime than others: Preference optimization with the pairwise cringe loss. _arXiv preprint arXiv:2312.16682_, 2023.
* Yu et al. (2023) Wenhao Yu, Nimrod Gileadi, Chuyuan Fu, Sean Kirmani, Kuang-Huei Lee, Montse Gonzalez Arenas, Hao-Tien Lewis Chiang, Tom Erez, Leonard Hasenclever, Jan Humplik, et al. Language to rewards for robotic skill synthesis. _arXiv preprint arXiv:2306.08647_, 2023.
* Zhao et al. (2023) Yao Zhao, Rishabh Joshi, Tianqi Liu, Misha Khalman, Mohammad Saleh, and Peter J Liu. Slic-hf: Sequence likelihood calibration with human feedback. _arXiv preprint arXiv:2305.10425_, 2023.
* Zheng et al. (2024) Lianmin Zheng, Wei-Lin Chiang, Ying Sheng, Siyuan Zhuang, Zhanghao Wu, Yonghao Zhuang, Zi Lin, Zhuohan Li, Dacheng Li, Eric Xing, et al. Judging llm-as-a-judge with mt-bench and chatbot arena. _Advances in Neural Information Processing Systems_, 36, 2024.
* Zhou et al. (2024) Zhanhui Zhou, Zhixuan Liu, Jie Liu, Zhichen Dong, Chao Yang, and Yu Qiao. Weak-to-strong search: Align large language models via searching over small language models. _arXiv preprint arXiv:2405.19262_, 2024.
* Ziebart et al. (2008) Brian D Ziebart, Andrew L Maas, J Andrew Bagnell, Anind K Dey, et al. Maximum entropy inverse reinforcement learning. In _Aaai_, volume 8, pages 1433-1438. Chicago, IL, USA, 2008.

## Appendix

### Table of Contents

* A LLM-Driven Objective Discovery Implementation Details
* A.1 Prompts
* B Training Details
* B.1 Discovery Task - Single-turn Dialogue
* B.2 TL;DR Summarization
* B.3 IMDb Positive Text Generation
* C Evaluation Metrics
* C.1 MT-Bench
* C.2 Alpaca Eval
* C.3 TL;DR Summarization Win-Rate
* C.4 IMDb Rewards vs KL-Divergence
* D Additional Results
* D.1 Frontiers of Expected Reward vs KL Divergence
* D.2 Loss Sweeps for Different Beta Parameters
* D.3 Discovery Robustness with respect to LLM Hyperparameters
* D.4 LLM-Driven Discovery Analysis
* D.5 Visual Language Models for Objective Discovery
* D.6 Additional Analysis of DiscoPOP
* E Discovered Objective Functions
* E.1 DBAQL: Dynamic Blended Adaptive Quantile Loss
* E.2 AQL: Adaptive Quantile Loss
* E.3 PADLL: Performance Adaptive Decay Logistic Loss
* E.4 AQFL: Adaptive Quantile Feedback Loss
* E.5 CELL: Combined Exponential + Logistic Loss
* E.6 LRML: Log Ratio Modulated Loss
* E.7 PFL: Policy Focused Loss
* F Extended Related Work
* G Full Run LogLLM-Driven Objective Discovery Implementation Details

### Prompts

We use the following system prompt to generate the model responses:

``` Youareamachinelearningresearcherwhoistestestingoutdifferent RLHFlossfunctions.Whenyourespond,outputaJSONwherethe firstkey("thought")correspondstoyourthoughtprocesswhen designingthenextfunction.Thesecondkey("name")corresponds tothenameofyournextfunction.Finally,thelastkey("code") correspondstotheexactpythoncodethatyouwouldliketotry. Hereisanexample: { "thought":"Basedonthempreviousoutputs,Ishouldrythedirect preferenceoptimizationalgorithm.", "name":"dpo", "code":"defsigmoid_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, )->torch.FloatTensor: pi_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios losses=-F.logsigmoid(self.beta*logits) returnlosses" } Youaredeeplyfamiliarwithbinaryclassificationlossesfromthe literature.Becreativeandreferencepriorliteraturewhen possible. Youmustusetheexactfunctioninterfaceusedabove.Feelfreeto defineextrahyperparameterswithinyourfunctionasconstants.Do notmakethemattributesofself. Notethat'self.beta=0.05'. RLHFlossfunctionstrainonadatasetofpairsofpreferredand rejected_completions. 'policy_chosen_logps'referstothepolicy'slogprobabilitiesofthe preferredcompletion,and'policy_rejected_logps'referstothe policy'slogprobabilitiesofthe rejectedcompletion.'reference_chosen_logps'and'reference_rejected_logps'refertothe sameforthereference(base)model. Theuserwillthenreturntoyouafitnessthatcorrespondstothe performanceoftheresultingmodelonadownstreamatask.Yourgoal istomaximizeperformance. ```

We then provide the first user prompt as such:

``` Herearesomeresultswe'veobtained: { "code":"deflogistic_log_loss( self, policy_chosen_logps:torch.FloatTensor,policy_rejected_logps:torch.FloatTensor,  reference_chosen_logps:torch.FloatTensor,  reference_rejected_logps:torch.FloatTensor,  ) -> torch.FloatTensor:  pi_logratios = policy_chosen_logps - policy_rejected_logps  ref_logratios = reference_chosen_logps - reference_rejected_logps  logits = pi_logratios - ref_logratios  losses = -F.logsimoid(self.beta * logits)  return losses  ",  "fitness": 7.8875  },  "code": = def hinge_loss(  self,  policy_chosen_logps:torch.FloatTensor,  policy_rejected_logps:torch.FloatTensor,  reference_chosen_logps: torch.FloatTensor,  reference_rejected_logps: torch.FloatTensor,  ) -> torch.FloatTensor:  pi_logratios = policy_chosen_logps - policy_rejected_logps  ref_logratios = reference_chosen_logps - reference_rejected_logps  logits = pi_logratios - ref_logratios  losses = torch.relu(1 - self.beta * logits)  return losses  ",  "fitness": 7.88125  },  {  "code": = def ipo_loss(  self,  policy_chosen_logps:torch.FloatTensor,  policy_rejected_logps:torch.FloatTensor,  reference_chosen_logps: torch.FloatTensor,  reference_rejected_logps: torch.FloatTensor,  ) -> torch.FloatTensor:  pi_logratios = policy_chosen_logps - policy_rejected_logps  ref_logratios = reference_chosen_logps - reference_rejected_logps  logits = pi_logratios - ref_logratios  losses = (logits - 1 / (2 * self.beta)) ** 2  return losses  ",  "fitness": 7.84  },  {  "code": = def kto_pair_loss(  self,  policy_chosen_logps: torch.FloatTensor,  policy_rejected_logps: torch.FloatTensor,  reference_chosen_logps: torch.FloatTensor,  reference_rejected_logps: torch.FloatTensor,  ) -> torch.FloatTensor:  chosen_KL = (policy_chosen_logps - reference_chosen_logps).mean().clamp(min=0)  rejected_KL = (policy_rejected_logps - reference_rejected_logps).  mean().clamp(min=0)  chosen_logratios = policy_chosen_logps - reference_chosen_logps  rejected_logratios = policy_rejected_logps - reference_rejected_logps  # As described in the KT0 report, the KL term for chosen (rejected ) is estimated using the rejected (chosen) half.

losses = torch.cat(  (  1 - F.sigmoid(self.beta * (chosen_logratios - rejected_KL)  ),  1 - F.sigmoid(self.beta * (chosen_KL - rejected_logratios)  ),  ),  )  ) ) return losses  ",  "fitness": 7.603125  }

Please generate the next one.

Upon testing the generated code, if an error is encountered, we provide the following prompt, where 'error' is the text containing the system error:

``` Code notvalid.Error: {error} Pleasegenerate the next one. ```

Upon successful completion, we return the following user prompt, where 'val' is the MT-Bench score:

``` Fitness:{val}. Pleasegenerate the next one. ```

## Appendix B Training Details

### Discovery Task - Single-turn Dialogue

For each valid generated objective function \(f_{i}\), we use it to train an LLM and then collect a performance evaluation score. Specifically, we follow the same process when training and evaluating all objective functions, starting with a pre-trained supervised fine-tuned (SFT) 7 billion gamma model of 'zephyr-7b-gamma-sft' This is a 7 billion base version gamma [11] model supervised-fine-tuned on the 'deita-10k-v0-sft' dataset [14]. Starting with this model, we train it on the pairwise preference dataset of 'Argilla DPO Mix 7K'; which attempts to create a high-quality preference dataset by filtering only highly rated chosen responses from the datasets of a multi-turn dataset, instruction following dataset [15] and a diverse preference dataset that covers truthfulness, honesty and helpfulness [13]. For each training run, we trained all the parameters of the starting model, using a fixed \(\beta=0.05\). We used the same fixed hyper-parameters for all training runs unless explicitly noted. Specifically, we used a learning rate of 5e-7, bfloat16 floating-point format, two epochs, a batch size per device of two, a gradient accumulation step of 8, a cosine learning rate scheduler, and AdamW optimization algorithm [12]. We use the popular TRL transformers library [17], adapting the offline preference optimization objective function to train all models. The models were trained on 8 Nvidia A100 GPUs. An individual training run takes approximately 30 minutes. We provide training and evaluation statistics for discovered objective functions in Figure 7. We also provide the equivalent code implementation at https://github.com/vanderschaarlab/DiscoPOP.

### TL;DR Summarization

To determine if the discovered objective functions generalize well also to other tasks, we use them to preference optimize an LLM for text summarization. Specifically, we start again with a pre-trained supervised fine-tuned (SFT) 7 billion gamma model of 'zephyr-7b-gamma-sft', and we optimized it with the objective function \(f_{i}\) on a subsample of the Reddit TL;DR summarization preference dataset[Volske et al., 2017]6. More precisely we use the first 10% of the dataset for preference optimization, which amounts to around 8'000 training samples. During training the hyperparameters are kept the same as in the single-turn dialogue task, explained in subsection B.1, except that LLMs were trained 4 Nvidia A100 GPUS using a gradient accumulation step of 16. An individual training run takes approximately 1.5 hours.

Footnote 6: https://huggingface.co/datasets/CarperAI/openai_summarize_comparisons

### IMDb Positive Text Generation

Another popular generalization task for preference optimization [Rafailov et al., 2023] is to fine-tune a small LLM to generate positive text for movie review, based on the IMDb sentiment dataset [Maas et al., 2011]7 following the work of Zhou et al. [2024]. As a starting model, we use a GPT2 model [Radford et al., 2019], that was supervised fine-tuned on the IMDb dataset8. Subsequently, we apply the baseline and discovered objective function \(f_{i}\) for preference optimization. The goal of the LLM is to give a short prompt of 2-8 tokens, which indicate the start of a movie review, to generate a positive review. As we are interested in the effect of \(\beta\) on the rewards and KL-Divergence, we train the objective functions over a sweep of \(\beta\in\{0.01,0.025,0.05,0.1,0.25,0.5,1,2.5,5\}\). Every LLM is trained for three epochs, using the AdamW optimizer, with an initial learning rate of 5.0e-5, a warm-up scheduler of 0.1, and a cosine learning rate scheduler. The models are trained on 4 Nvidia A100 GPUs, using a gradient accumulation step of 8, and a batch size per device of 2. The training takes around 30 minutes.

Footnote 7: https://huggingface.co/datasets/ZHZisZZ/imdb_preference

Footnote 8: https://huggingface.co/lvwerra/gpt2-imdb

## Appendix C Evaluation Metrics

### MT-Bench

To assess the fitness of the discovered preference optimization loss function during the discovery phase, we evaluate the trained LLMs on the MT-Bench [Zheng et al., 2024] benchmark. The evaluation benchmark consists of 80 high-quality multi-turn questions from various disciplines. The goal is to assess LLM's ability to follow instructions and keep the flow of a conversation. A larger LLM, in our case GPT-4, is then used as a judge to score the quality of the answers with a number from 0 (lowest) to 10 (highest). Scores are given based on the quality of the LLM's first-turn answer (single-turn) and first and second answers (multi-turn). Finally, the MT-Bench score is the average

Figure 7: Training and eval statistics of DPO, SLiC, PADLL, and LRML. The losses are not directly comparable to each other, as they are calculated differently for each model. Interestingly, eval results are not strongly correlated with the downstream MT-Bench scores, as LRML achieves the worst accuracy.

of single-turn and multi-turn scores. For answer generation and evaluation, we used the FastChat library9 and its standard sampling and temperature parameters, provided by Zheng et al. [2024].

Footnote 9: https://github.com/lm-sys/FastChat

### Alpaca Eval

Alpaca Eval 2.0 [Li et al., 2023, Dubois et al., 2023, 2024] is also a popular benchmark for evaluating LLMs. This is a single-turn dialogue LLM-based automatic evaluation using a stronger LLM, here GPT-4 Turbo, to assess the win rate of the trained LLM policy's completion compared to either GPT-4 or the of the underlying SFT base model. Specifically, Alpaca Eval 2.0 has been validated against 20K human annotations and aims to reduce the length bias of Alpaca Eval, where using length-controlled (LC) Alpaca Eval shows a correlation with Chatbot Arena of 0.98, making it a popular benchmark with the highest correlation to Chatbot Arena [Dubois et al., 2024]. The Alpaca evaluation dataset consists of 841 high-quality instructions from different data sets. The library10 provided by Dubois et al. [2024] calculates the win-rate (percentage were the trained policy is prefered over the reference policy, first introduced in Alpaca Eval 1.0), and a length-controlled win-rate, where a linear model is fitted to de-bias for length of the prompt and instruction difficulty. We used a temperature of 0.7, sampling, and a maximum number of new tokens of 1024 to generate the answers. Furthermore, the library provides the standard error of the mean, which indicates the confidence of the win-rate and LC win-rate.

Footnote 10: https://github.com/tatsu-lab/alpaca_eval

### TL;DR Summarization Win-Rate

To evaluate how well the discovered objective functions generalize to the summarization task, we use the Alpaca Eval 2.0 library, similar to subsection C.2. Instead of using the Alpaca evaluation dataset, we create a custom dataset of 694 samples from the IMDb preference test dataset. Additionally, we change the prompt of the annotator LLM, to fit the "Summarization GPT-4 win rate prompt (C)" as described in Rafailov et al. [2023]. The (LC) win-rate is calculated against either the existing human-chosen test sample or against the summary generated by the SFT reference model. For a summary generation, we apply a temperature parameter of 0.7, sampling, and a maximum of 256 new tokens. Moreover, we stop the summarization after the "n" token to avoid nonsensical generations. Furthermore, as we cannot calculate an instruction difficulty for the length-controlled win-rate, we omit this term from the linear model (This has only a small impact on the metric). In addition to the win-rates we also provide the standard error as a measure of confidence.

### IMDb Rewards vs KL-Divergence

For the positive text generation, we do not require an LLM judge compared to MT-Bench, Alpaca Eval 2.0, and TL;DR evaluation, as we take a pre-trained sentiment classifier11 as ground truth reward scorer. The LLMs apply sampling and a maximum of 60 new tokens for the positive text generation. The rewards and KL-divergence are averaged over 10 different generations from the trained LLMs.

Footnote 11: https://huggingface.co/siebert/sentiment-roberta-large-english

[MISSING_PAGE_EMPTY:22]

[MISSING_PAGE_EMPTY:23]

### Discovery Robustness with respect to LLM Hyperparameters

### LLM-Driven Discovery Analysis

### Visual Language Models for Objective Discovery

### Visual Language Models for Objective Discovery

Figure 11: Robustness of the LLM-driven discovery process. **Left**. We compare different sampling temperatures \(\{0.1,0.5.1.0\}\). **Middle**. The default configuration includes all objective proposals and evaluations in chronological order. Here we also explore using only the top-\(K\) performing objectives unsorted and sorted by their performance. **Right**. We also investigate whether using a “thought” as part of the context and whether to include non-valid code and error messages improves performance. The discovery process for CIFAR-10 objectives (5 epochs) is robust to these settings. The results are averaged across 3 independent runs.

Figure 12: LLM-driven discovery for CIFAR-10 loss functions with (left) and without (right) providing fitness feedback. Note that without feedback, it performs worse but also is unable to _refine_ its ideas, resulting in fewer improvements across generations.

Figure 13: Objective Discovery with a Visual Language Model (VLM) for CIFAR-10 (20 epochs). We provide a plot of the training and validation accuracy across training as context components to the VLM (GPT-4-Turbo).

### Additional Analysis of DiscoPOP

We performed further analysis to improve our understanding of the discovered loss function. We hypothesize that the local optimum of the DiscoPOP loss could catch noisy or incorrect data points. By inspecting the DiscoPOP loss values and log ratios of the training preference pairs in the IMDb dataset, we see that 1.35% of training points fall there (see Figure 14). Although we use the binary preference labels from the IMDb dataset12 for training, the dataset also includes a positivity reward score for each completion, calculated by a separate reward model. When we analyze the data points between the local optima, we find that the positive and negative completions are significantly closer in absolute reward difference than those outside the local optimum (See Table 4). This implies that the preference labels on those points are likely more challenging to distinguish and help empirically validate our hypothesis.

Footnote 12: https://huggingface.co/datasets/ZHIZisZZ/imdb_preference

## Appendix E Discovered Objective Functions

To describe the discovered losses mathematically, we define three existing preference optimization losses here:

\[f_{dpo}(\beta\rho)=-\text{log}(\sigma(\beta\rho))=-\text{log}(\frac{1}{1+\text {exp}(-\beta\rho)})=\text{log}(1+\text{exp}(-\beta\rho))\] (6)

\[f_{slic}(\beta\rho)=\text{ReLU}(1-\beta\rho)\] (7)

\begin{table}
\begin{tabular}{l c c c c c}
**Description** & **Domain \(\beta\rho\)** & **Mean** & **95\%-CI** & \(p\)**-value** & **\% of training set** \\ \hline Between optima & \([-2.3714,1.44012]\) & 0.981 & (0.830, 1.131) & - & 1.35 \\ \hline Full range & \(\mathbb{R}\) & 3.861 & (3.818, 3.904) & \(<0.01\)\% & 100 \\ Outside optima & \(\mathbb{R}[-2.3714,1.44012]\) & 3.9 & (3.857, 3.944) & \(<0.01\)\% & 98.65 \\ Below local minimum & \((-\infty,-2.3714)\) & 4.086 & (4.041, 4.131) & \(<0.01\)\% & 6.22 \\ Above local maximum & \((1.44012,\infty)\) & 1.141 & (1.076, 1.206) & 4.29\% & 92.43 \\ \end{tabular}
\end{table}
Table 4: The IMDb positive review preference dataset also provides “golden reward” scores for the chosen responses \(r_{w}\) and rejected responses \(r_{l}\), calculated with a strong sentiment classifier (\(\log p(\text{pos})-\log p(\text{neg})\)). We analysed the absolute difference in reward scores between the chosen and rejected responses \(|r_{w}-r_{l}|\) across the different domains of the DiscoPOP function and report the statistics here. Training samples within the optima have a significantly lower mean absolute difference in rewards compared to the other regions in the DiscoPOP loss function. The samples stuck within the optima are the training triplets where the chosen and rejected responses are “closest” to each other and likely the most “noisy” labels.

Figure 14: Distribution of \(\beta\)-scaled difference of log-ratios (left y-axis) and corresponding DiscoPOP loss value (right y-axis) of the training samples on the IMDb positive review generation task. The DiscoPOP function has a local minimum at \(f_{lrml}(-2.3714)=0.785929\) and a local maximum at \(f_{lrml}(1.44012)=0.87829\). The number of samples within the two local optima corresponds to 1.35% of the training set.

\[f_{exp}(\beta\rho)=\text{exp}(-\beta\rho)\] (8)

Moreover, we display the code of the discovered losses as it is output by the LLM. In addition, we provide a mathematical representation of each, which we have adapted to be consistent with \(\beta\) being the KL-Divergence regularization parameter. This is because the generated code for LRML, DBAQL, AQL, AQLFL, and PFL did not uphold the \(\beta\) ought to be multiplied with the difference of log-ratios before any further calculations. If this was not upheld, it could lead to the loss function changing shapes based on the KL-regularization term, and therefore, models could not converge or potentially collapse. In future work, we should constrain the exploring LLM to uphold the \(\beta\) multiplication with the input before any other calculations are done with the difference of log-ratios \(\rho\). As the meta-exploration was done with a set \(\beta=0.05\), and we wish to keep consistent with this scale of regularization, we have adapted the losses by dividing \(\rho\) values used in intermediate calculations with a scalar \(\tau=0.05\).

In the IMDb experiment in Section 5, we have thus used the corrected version of codes for the discovered losses based on the provided mathematical representation, as we were most interested in the effect of the KL-divergence compared to the model rewards.

### DBAQL: Dynamic Blended Adaptive Quantile Loss

MT-Bench Score: 7.978

``` defdynamic_blended_adaptive_quantile_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, )->torch.FloatTensor: importtorch.nn.functionalasF #Constantsforthelossfunction starting_quantile=0.5 quantile_adapt_rate=0.01 temperature=0.9 dynamic_blend_rate=1.0 pi_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios logits_variability=logits.var()
#Calculateanadaptivequantilebasedonamovingtarget moving_quantile=starting_quantile+quantile_adapt_rate*(torch. sigmod(logits.mean())-starting_quantile)
#Calculatedynamicblendingcoefficientbasedonlogits variability dynamic_blend_coeff=torch.sigmod(logits_variability)* dynamic_blend_rate
#Preparecomponentsoftheblendedloss logistic_loss=-F.logsigmoid(self.beta*logits/temperature) exp_loss=torch.exp(-self.beta*logits*temperature)
#Blendthelossesdynamically losses=dynamic_blend_coeff*logistic_loss+(1-dynamic_blend_coeff)*exp_loss returnlosses \[f_{dbaql}(\beta\rho) =\sigma(\text{Var}[\beta\rho/\tau])\cdot f_{dpo}(\beta\rho/0.9)+ (1-\sigma(\text{Var}[\beta\rho/\tau]))\cdot f_{exp}(\beta\rho\cdot 0.9)\] (9) \[\tau =0.05\] (10)

### AQL: Adaptive Quantile Loss

MT-Bench Score: 7.953

``` defadaptive_quantile_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, ) -> torch.FloatTensor: percentile=0.5#Startwiththemedianquantile moving_quantile_weight=0.01#Weightforupdatingthemoving quantile p1_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios moving_quantile=percentile+moving_quantile_weight*(torch. sigmoid(logits.mean())-percentile) quantile_weights=torch.sigmaoid(-self.beta*(logits-moving_quantile)) logistic_losses=-F.logsigmoid(self.beta*logits) hinge_losses=torch.relu(1-self.beta*logits)
#Blendthelogisticandhingelossesbasedonthedynamic quantileweight losses=quantile_weights*logistic_losses+(1-quantile_weights)*hinge_losses returnlosses ```

\[f_{aql}(\beta\rho) =q\cdot f_{dpo}(\beta\rho)+(1-q)\cdot f_{slic}(\beta\rho)\] (11) \[q =\sigma(\tau m_{2}-\beta\rho)\] (12) \[m_{2} =0.5+0.01\cdot\left(\mathds{E}[\sigma(\beta\rho/\tau)]-0.5\right)\] (13) \[\tau =0.05\] (14)

### PADLL: Performance Adaptive Decay Logistic Loss

MT-Bench Score: 7.941

``` defperformance_adaptive_decay_logistic_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, ) ->torch.FloatTensor: base_decay=0.9 mismatch_penalty=0.5#Penaltydecayformismatchedchoices pi_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios mismatches=(logits<0).float()#Identifymismatches adaptive_decay=base_decay*(1-mismatches*mismatch_penalty) weighted_losses=adaptive_decay*-F.logsigmoid(self.beta*logits) returnweighted_losses ```\[f_{padll}(\beta\rho) =\delta_{\text{adpt}}\cdot f_{dpo}(\beta\rho)\] (15) \[=\delta_{\text{base}}\cdot\left(1-\mathds{1}_{\left\lfloor\rho<0 \right\rfloor}\cdot\tau\right)\cdot f_{dpo}(\beta\rho)\] (16) \[=\delta_{\text{base}}\cdot\left(1-\mathds{1}_{\left\lfloor\rho<0 \right\rfloor}\cdot\tau\right)\cdot\log\left(1+\exp(-\beta\rho)\right)\] (17) \[=0.9\cdot\left(1-\mathds{1}_{\left\lfloor\rho<0\right\rfloor} \cdot 0.5\right)\cdot\log\left(1+\exp(-\beta\rho)\right)\] (18)

This loss can also be rewritten as:

\[f_{padll}(\beta,\rho)=\begin{cases}\delta_{\text{pos}}\cdot f_{dpo}(\beta\rho), &\text{if }\rho\geq 0\\ \delta_{\text{neg}}\cdot f_{dpo}(\beta\rho),&\text{if }\rho<0\end{cases},\text{ where }\quad\delta_{\text{pos}}>\delta_{\text{ neg}}>0\] (19)

### AQFL: Adaptive Quantile Feedback Loss

MT-Bench Score: 7.931

``` defadaptive_quantile_feedback_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, ) ->torch.FloatTensor: importtorch.nn.functionalasF quantile_update_rate=0.05 distance_scale=0.1 pi_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios logits_std=logits.std() adaptive_quantile=logits_std*torch.sigmoid(-logits).mean() ```

``` distance_from_quantile=(logits-adaptive_quantile).abs() blend_rate=torch.sigmoid(distance_scale*distance_from_quantile) )

``` logistic_losses=-F.logsigmoid(self.beta*logits) hinge_losses=torch.relu(1-self.beta*logits) losses=blend_rate*logistic_losses+(1-blend_rate)* hinge_losses returnlosses ```

\[f_{aqfl}(\beta\rho) =r\cdot f_{dpo}(\beta\rho)+(1-r)\cdot f_{slic}(\beta\rho)\] (20) \[r =\sigma(0.1*d)\] (21) \[d =\left|\beta\rho/\tau-m_{2}\right|\] (22) \[m_{2} =m_{1}+0.05\cdot\left(\sigma(\mathds{E}[\beta\rho/\tau]-m_{1})\right)\] (23) \[m_{1} =\mathds{E}[\sigma(-\beta\rho/\tau)]\cdot\sqrt{\text{Var}[\beta \rho/\tau]}\] (24) \[\tau =0.05\] (25)

### CELL: Combined Exponential + Logistic Loss

MT-Bench Score: 7.925defcombined_exp_logistic_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, )->torch.FloatTensor: pi_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios exp_losses=torch.exp(-self.beta*logits) log_Losses=-F.logsigmoid(self.beta*logits)
#Combinetheseswithatunablemixingcoefficient alpha=0.5 losses=alpha*exp_losses+(1-alpha)*log_losses returnlosses ```

\[f_{cell}(\beta\rho)=0.5\cdot f_{dpo}(\beta\rho)+0.5\cdot f_{exp}(\beta\rho)\] (26)

### LRML: Log Ratio Modulated Loss

MT-Bench Score: 7.916

``` deflog_ratio_modulated_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, )->torch.FloatTensor: pi_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios
#Hodulatethemixingcoefficientbasedonthelogratio magnitudes log_ratio_modulation=torch.sigmaoid(logits) logistic_component=-F.logsigmoid(self.beta*logits) exp_component=torch.exp(-self.beta*logits)
#Blendbetweenlogisticandexponentialcomponentbasedonlog ratiomodulation losses=logistic_component*(1-log_ratio_modulation)+ exp_component*log_ratio_modulation returnlosses ```

Listing 10: Log Ratio Modulated Loss

\[f_{triml}(\beta\rho) =(1-\sigma(\beta\rho/\tau))\cdot f_{dpo}(\beta\rho)+\sigma(\beta \rho/\tau)\cdot f_{exp}(-\beta\rho)\] (27) \[\tau =0.05\] (28)

### PFL: Policy Focused Loss

MT-Bench Score: 7.900

``` defpolicy_focused_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, )->torch.FloatTensor:focus_scale=2.0#Scaletop emphasizeerode-emphasizebasedonthecorrectnessofpredictionspi_logratios=policy_chosen_logps-policy_rejected_logpsref_logratios=reference_chosen_logps-reference_rejected_logpslogits=pi_logratios-ref_logratiosis_correct=policy_chosen_logps>policy_rejected_logpslogistic_losses=-F.logsigmoid(logits)hinge_losses=torch.relu(1-logits)focused_loss=torch.where(is_correct,logistic_losses/focus_scale,#De-emphasizecorrectpredictionshinge_losses*focus_scale#Emphasizeincorrectpredictions)returnfocused_lossInterestingly, the PFL generated function code did not include any \(\beta\) values in the loss function. We have added it to the corrected code for the IMDb experiment, as well as to the mathematical expression below. We account for the consistency of the logit values by dividing with \(\tau=0.05\), which is the same value as \(\beta\) in the discovery process.

\[f_{pfl}(\beta\rho)=1/2\cdot f_{dpo}(\beta\rho/\tau)\cdot\mathds{1}_{[\pi_{w} >\pi_{r}]}+2\cdot f_{slic}(\beta\rho/\tau)\cdot\mathds{1}_{[\pi_{w}\leq\pi_{r}]}\] (29) \[\tau=0.05\] (30)

## Appendix F Extended Related Work

In the following, we provide an extended related work of the related work included in the main paper.

**Evolution and Search with Large Language Models**. LLMs provide a fast and automated way to create multiple candidate solutions for a problem stated in natural language (Song et al., 2024), which makes them powerful tools for driving population-based search procedures. Various recent works have applied this approach to coding problems (Romera-Paredes et al., 2024), neural architecture search (Chen et al., 2024; Holt et al., 2024; Holt et al., 2024), virtual robotic design settings (Lehman et al., 2023; Ma et al., 2023), reward functions (Ma et al., 2023; Yu et al., 2023), and algorithm heuristics (Liu et al., 2024). Finally, recently LLMs have shown to be capable of acting as recombination operators for black-box optimization with Evolution Strategies (Lange et al., 2024) and for Quality-Diversity approaches (Lim et al., 2024). Additionally, prior work has shown LLM multi-agent frameworks' ability to excel at large code-generation tasks (Holt et al., 2024), which we could envision enabling scaling up searching for larger candidate solutions for more complicated objectives or algorithms than the existing approaches that fit within the LLMs output context window.

**Automated Discovery for Machine Learning**. There are many other approaches to automating the discovery of generalizable machine learning algorithms. Some prior works explore the space of ML functions using genetic algorithms and a hand-crafted domain-specific language for reinforcement learning algorithms (Co-Reyes et al., 2021), curiosity algorithms (Alet et al., 2020), and optimizers (Chen et al., 2024). Other works instead parameterize a transferable objective function using neural networks and optimize them with evolution strategies or meta-gradients. For example, Lu et al. (2022), Jackson et al. (2024), Houthooft et al. (2018), Alfano et al. (2024), Kirsch et al. (2019), Oh et al. (2020), Jackson et al. (2024) discover policy optimization objectives, Metz et al. (2022) evolves neural network optimizers, and Lange et al. (2023, 20) evolve blackbox optimizers. Moreover, automatically discovering closed-form functions (i.e., symbolic regression), works exist that leverage RL (Petersen et al., 2020), gradient descent (Kacprzyk et al., 2024), RL with evolution strategies (Mundhenk et al., 2021), pre-training transformers (Bigggio et al., 2021) and hybrid combinations of pre-training transformers, which are further refined with RL and evolution strategies (Holt et al., 2023). Furthermore, more general-purpose ML approaches exist to perform sequential modeling of processes (Holt et al., 2022), which can be readily used in model-based RL approaches (Holt et al., 2023, 2024a).

**Preference Optimization Algorithms**. While the reduction to supervised learning makes DPO and alternatives easier to use, other approaches have sought to simplify the RL step, including using variants of REINFORCE (Ahmadian et al., 2024, Gemma-Team et al., 2024) as well as more fine-grained feedback (Wu et al., 2024) through preferences over individual steps in the reasoning process (Uesato et al., 2022, Lightman et al., 2023) or reward redistribution (Chan et al., 2024). Others use iterative offline training interleaved with sampling from the policy model and obtaining a preference ranking from themselves (Xu et al., 2023), another judge LLM (Guo et al., 2024), or an oracle (Swamy et al., 2024).

## Appendix G Full Run Log

We provide a full run below, formatted for readability.

================= thought Since thelogisticloglosscurrentlyhasthehighestfitnessandisadirectoptimizationoftheloglikelihoodratio,let'stryavariationthatincludesamarginintheloglikelihoodratios,inspiredbytheconceptofamargininsVMhingeloss.Introducingamargincouldcreateabufferthatleadsttomorerobustlearning,asseeninSVMs. name logistic_margin_loss code deflogistic_margin_loss self, policy_chosen_logps:torch.FloatTensor,policy_rejected_logps:torch.FloatTensor,reference_chosen_logps:torch.FloatTensor,reference_rejected_logps:torch.FloatTensor,reference_rejected_logps:torch.FloatTensor,,reference_rejected_logps:torch.FloatTensor,,

) ->torch.FloatTensor: margin = 0.1 p1_logratios=policy_chosen_logps-policy_rejected_logpsref_logratios=reference_chosen_logps-reference_rejected_logpslogits_with_margin=p1_logratios-ref_logratios-margin losses=-F.logigmoid(self.beta*logits_with_margin) returnlosses

================= Fitness: 7.709375. Pleasegeneratethenextone. ================= thought Thelogisticmarginlossoutperformedthehingeandipolossesbutdid notsurpasstheoriginallogisticlogloss.Perhapsintroducinganadaptivemarginbasedontheconfidenceinthepredictions couldyieldimprovements.Themargincouldbesetproportionaltotheabsolutedifferencebetweenthepolicy'sandthereference'slogprobabilities.Thiscouldpotentiallypenalizeincorrectonfidentpredictionsmoreheavily. name adaptive_margin_logistic_loss code defadaptive_margin_logistic_loss(self,policy_chosen_logps:torch.FloatTensor,policy_rejected_logps:torch.FloatTensor,reference_chosen_logps:torch.FloatTensor,reference_rejected_logps:torch.FloatTensor,

) ->torch.FloatTensor:confidence_margin = torch.abs(policy_chosen_logps - policy_rejected_logps) - torch.abs(reference_chosen_logps - reference_rejected_logps) pi_logratios = policy_chosen_logps - policy_rejected_logps ref_logratios = reference_chosen_logps - reference_rejected_logps logits_with_margin = pi_logratios - ref_logratios - confidence_margin losses = -F.logsimoid(self.beta * logits_with_margin) return losses

================================

Fitness: 7.51875. Please generate then nextone. ================================

though The adaptive margin did not yield an improvement. It might have introduced too much variability or penalization. Let's go back to a fixed structure but combine elements from bothlogistic loss and hinge loss, with the idea of encouraging a larger margin when the decision is correct, while still having a soft, probabilistic interpretation. This combined loss could retain the benefits of both worlds. name combined_logistic_hinge_loss code defined_logistic_hinge_loss self, policy_chosen_logps: torch.FloatTensor, policy_rejected_logps: torch.FloatTensor, reference_chosen_logps: torch.FloatTensor, reference_rejected_logps: torch.FloatTensor, ) -> torch.FloatTensor: pi_logratios = policy_chosen_logps - policy_rejected_logps ref_logratios = reference_chosen_logps - reference_rejected_logps logits = pi_logratios - ref_logratios logistic_losses = -F.logsimoid(self.beta * logits) hinge_losses = torch.relu(1 - self.beta * logits) combined_losses = logistic_losses + hinge_losses return combined_losses

================================

Fitness: 7.7375. Please generate then nextone. ================================

though The combined logistic and hinge loss slightly outperformed the baseline logistic log loss but still did not achieve a significant improvement. Considering the nature of RLHF, where we prefer the model to be correct but not overly confident, we can explore a scaled version of the combined loss where the logistic parts emphasized more heavily, as it intrinsically accounts for confidence duet to its probabilistic nature. name scaled_combined_logistic_hinge_loss code def scaled_combined_logistic_hinge_loss  self, policy_chosen_logps: torch.FloatTensor, policy_rejected_logps: torch.FloatTensor, reference_chosen_logps: torch.FloatTensor, reference_rejected_logps: torch.FloatTensor, ) -> torch.FloatTensor: logistic_scale = 2.0 # Emphasize logistic loss more hinge_scale = 0.5 # De-emphasize hinge loss pi_logratios = policy_chosen_logps - policy_rejected_logps  ref_logratios = reference_chosen_logps - reference_rejected_logps  logits = pi_logratios - ref_logratios  logistic_losses = logistic_scale * (-F.logsigmoid(self.beta *  logits))  hinge_losses = hinge_scale * (torch.relu(1 - self.beta * logits))  combined_losses = logistic_losses + hinge_losses  return combined_losses

================================

Fitness: 7.85625. Please generate the nextone. ================================

though The scaled combined loss has shown an improvement, which indicates that balancing the contribution between thelogistic and hinge components is beneficial. To further expand on this idea, we could try a form of annealing where early in training we use more of the logistic component, encouraging better probability estimation, and later on a switch gradually to the hinge component, emphasizing decisions with a margin. We'll simulate this by using a weighting factor that changes linearly through the logits, giving lower logits (earlier, less confident predictions) a higher weight for the logistic loss. name

annealed_combined_logistic_hinge_loss code defannealed_combined_logistic_hinge_loss( self, policy_chosen_logps: torch.FloatTensor, policy_rejected_logps: torch.FloatTensor, reference_chosen_logps: torch.FloatTensor, reference_rejected_logps: torch.FloatTensor, ) -> torch.FloatTensor: pi_logratios = policy_chosen_logps - policy_rejected_logps ref_logratios = reference_chosen_logps - reference_rejected_logps logits = pi_logratios - ref_logratios logistic_scale = torch.sigmaoid(-logits) # Higher weight for lower logits hinge_scale = torch.sigmaoid(logits) # Higher weight for higher logits logistic_losses = logistic_scale * (-F.logsigmoid(self.beta * logits))  hinge_losses = hinge_scale * (torch.relu(1 - self.beta * logits))  combined_losses = logistic_losses + hinge_losses  return combined_losses

================================

Fitness: 7.66875. Please generate the nextone. ================================

thought Theannealed combined loss did not yield the expected improvement and performed worse than the scaled version. It's possible the transition from logistic to hinge was too aggressive. For the next iteration, let's return to a simpler concept and try a variation of the logistic loss with a squared term, similar to squared hinge loss, which might penalize incorrect predictions more smoothly than the linear term used in the standard logistic loss. name squared_logistic_loss code defsquared_logistic_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, ) -> torch.FloatTensor: pil_logratios - policy_chosen_logps - policy_rejected_logps ref_logratios = reference_chosen_logps - reference_rejected_logps logits = pi_logratios - ref_logratios logistic_losses = -F.logsigmoid(self.beta * logits) squared_losses = logistic_losses ** 2 returns squared_losses

================================

Fitness: 7.60062893081761. Please generate the nextone. ================================

though The squared logistic loss did not perform as well as hoped, possibly due to excessive penalization of difficults samples. This time, let's integrate a weighting mechanism that focuses on hard examples while using the logistic component. Inspired by the focal loss used in object detection, which gives more weight to harder, misclassified examples, we can apply a similar mechanism to emphasize learning from examples where the policy significantly differs from the reference. name focal_logistic_loss code def focal_logistic_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps: torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, ) -> torch.FloatTensor: gamma = 2.0 # Focusing parameter for modulating the loss pi_logratios = policy_chosen_logps - policy_rejected_logps ref_logratios = reference_chosen_logps - reference_rejected_logps logits = pi_logratios - ref_logratios sigmoid(logits) focal_weights = (1 - sigmoids) ** gamma # Focus more on harder examples logistic_losses = -focal_weights * F.logsigmoid(self.beta * logits )  return logistic_losses

================================

Fitness: 7.840625. Please generate the nextone. ================================

though The focal logistic loss seems to have a moderate effect, indicating that prioritizing hard examples has somemerit. To build on this, an alternative could be to apply temperaturescaling to the logits before computing the logistic loss. Temperaturescaling is often used in model calibration and cansoftent the probability distribution, which might work well with RLHF where overconfidence in predictions is undesirable. name temperature_scaled_logistic_loss code deftemperature_scaled_logistic_loss(self,policy_chosen_logps:torch.FloatTensor,policy_rejected_logps:torch.FloatTensor,reference_chosen_logps:torch.FloatTensor,reference_rejected_logps:torch.FloatTensor,)->torch.FloatTensor: temperature=2.0#Temperature>1.0softestesthelogits pl_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps tempered_logits=(pi_logratios-ref_logratios)/temperature logistic_losses=-F.logsigmoid(self.beta*tempered_logits) returnlogistic_losses

================================

Fitness: 7.86875. Pleasegeneratethenextone. ================================

though Thetemperaturescalingseemedtohaveapsitiveimpact,possiblydue tobetter-calibratedprobabilityestimates.Tofurtherexplore thisdirection,wecantryusinglabelssmoothing,whichencourages themodelnottobetoconfidentaboutitspredictionsby preventingitfromassigningfullprobabilitytoasingelclass. It'satechniquecommonlyusedinclassificationtasksandmight bebeneficialforRLHF. name label_smoothed_logistic_loss code deflabel_smoothed_logistic_loss(self,policy_chosen_logps:torch.FloatTensor,policy_rejected_logps:torch.FloatTensor,reference_chosen_logps:torch.FloatTensor,reference_rejected_logps:torch.FloatTensor,)->torch.FloatTensor: label_smoothing=0.1#Epsilonforlabelssmoothing pl_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios smooth_positive=1.0-label_smoothingsmooth_negative=label_smoothing/2.0 targets=torch.ones_like(logits)*smooth_positive losses=F.binary_cross_entropy_with_logits(self.beta*logits,targets,reduction='none')+smooth_negative*F.binary_cross_entropy_with_logits(-self.beta*logits,torch.zeros_like(logits),reduction='none'), ) returnlosses.mean()

================================

Codenotvalid.Error: Expectedlossshapetobeperinput(e.g.(10,)),gottorch.Size([]) Pleasegeneratethenextone. ================================

though Sincethelabsmoothingimplementationhadanissuewiththeloss shapebeingincorrect,itseemsethlessreductionwaserroneously computedoverallinputsinsteadofkeepingtheper-inputformat. Let'sadjusttheimplementationtomakesurethelossretainsthe correctshape,byperformingthemanoperationseparatelyfor thepositiveandnegativepartsandthencombiningthem,weighted appropriately. name corrected_label_smoothed_logistic_loss code defcorrected_label_smoothed_logistic_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, ) -> torch.FloatTensor: label_smoothing=0.1#Epsilonforlabelssmoothing pi_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios smooth_positive=1.0-label_smoothing smooth_negative=label_smoothing/2.0 positive_targets=torch.ones_like(logits)*smooth_positive negative_targets=torch.zeros_like(logits)*smooth_negative positive_losses=F.binary_cross_entropy_with_logits( self.beta*logits,positive_targets,reduction='none') negative_losses=F.binary_cross_entropy_with_logits( self.beta*logits,negative_targets,reduction='none') return(positive_losses+negative_losses)/2

================================

Fitness: 6.425. Pleasegeneratethenextone. ================================

though Thecorrectedlabelsmoothingimplementationdidn'tworkasintended andsignificantlydecreasedthefitness.Itseemstthatlabel smoothingmaynotalignwellwiththeobjectiveofRLHF.Inlight ofthis,let'sexploreadifferentdirectionbyintroducing decayingweightonoldersamples.Theideaistogivehigher importancetothemorerecentdecisionsmadebythepolicy,under theassumptionthattheymaybecmagelightthecurrent stateofthepolicy. name decaying_weights_logistic_loss code defdecaying_weights_logistic_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, ) ->torch.FloatTensor: decay_rate=0.9#Weightdecayforoldersamples batch_size=policy_chosen_logps.size(0) decay_weights=decay_rate**torch.arange(batch_size-1,-1,-1) decay_weights=decay_weights.to(policy_chosen_logps.device) pi_logratios=policy_chosen_logps-policy_rejected_logps ref_logratios=reference_chosen_logps-reference_rejected_logps logits=pi_logratios-ref_logratios losses=decay_weights*-F.logsigmoid(self.beta*logits) returnlosses/decay_weights.sum()#Normalizingbysumof weights

================================

Fitness: 7.871875. Pleasegeneratethenextone. ================================

thoughWhile the decaying weights logistic loss provided a slight increase in fitness, it suggests that emphasizing more recent samples can be beneficial, but the approach might need some refinement. We could potentially improve this by making the decay adaptive based on the performance of each choice. The idea would be to give less weight to choices that are heavily mismatched with the reference, under the hypothesis that these could be outliers or errors. name performance_adaptive_decay_logistic_loss code defperformance_adaptive_decay_logistic_loss( self, policy_chosen_logps: torch.FloatTensor, policy_rejected_logps: torch.FloatTensor, reference_chosen_logps: torch.FloatTensor, reference_rejected_logps: torch.FloatTensor, ) -> torch.FloatTensor: base_decay = 0.9 mismatch_penalty = 0.5 # Penalty decay for mismatched choices pi_logratios = policy_chosen_logps - policy_rejected_logps ref_logratios = reference_chosen_logps - reference_rejected_logps logits = pi_logratios - ref_logratios mismatches = (logits < 0).float() # Identify mismatches

adaptive_decay = base_decay * (1 - mismatches * mismatch_penalty) weighted_losses = adaptive_decay * -F.logsigmoid(self.beta * logits) return weighted_losses

================================================================

Fitness: 7.940625. Please generate the nextone. ================================================================

though The performance-adaptive decay approach provided a slight improvement in fitness, suggesting that dynamically adjusting the loss based on the correctness of predictions is a promising direction. To take this further, let's create a hybrid approach which combines the performance-adaptive decay with a form of margin-based loss. This will aim to reduce the weights of not only the incorrect predictions but also those that are correct yet lack confidence, thereby promoting a more decisive policy. name hybrid_performance_margin_decay_logistic_loss code defhybrid_performance_margin_decay_logistic_loss( self, policy_chosen_logps: torch.FloatTensor, policy_rejected_logps: torch.FloatTensor, reference_chosen_logps: torch.FloatTensor, reference_rejected_logps: torch.FloatTensor, ) -> torch.FloatTensor: base_decay = 0.9 margin = 0.2 mismatch_penalty = 0.5 # Penalty decay for mismatched choices pi_logratios = policy_chosen_logps - policy_rejected_logps ref_logratios = reference_chosen_logps - reference_rejected_logps logits = pi_logratios - ref_logratios margin_logits = logits - margin mismatches = (margin_logits < 0).float() # Identify mismatches with margin adaptive_decay = base_decay * (1 - mismatches * mismatch_penalty)weighted_losses=adaptive_decay*-F.logsigmoid(self.beta* margin_logits) returnweighted_losses

================ ================

Fitness: 7.6125. Pleasegeneratethenextone. ================

though The hybridapproachwiththeperformancemargindecaydidnotachieve thedesiredeffectiveness.Introducingamargimmayhavebeentoo punitiveoncorrectpredictionsthatareclosetotheboundary.To maintainthebalance,let'sexploretheideaofusingatriplet-styleloss,whichispopularinembeddinglearning.Bytreating thechosenpolicylogsastheanchorandthereferencechosenandrejectedlogsaspositiveandnegativeexamples,respectively,we canencouragethechosenpolicydecisionstobecclosertothe referencechosendecisionsandfartherawayfromthereference rejecteddecisions. name triplet_style_logistic_loss code deftriplet_style_logistic_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, )->torch.FloatTensor: alpha=0.1#Marginforthetripletloss positive_distance=-F.logsigmoid(self.beta*(policy_chosen_logps-reference_chosen_logps) negative_distance=-F.logsigmoid(self.beta*(policy_chosen_logps-reference_rejected_logps)) triplet_loss=F.relu(positive_distance-negative_distance+ alpha) returntriplet_loss

================  Codenotvalid.Error: isnan():argument'input'(position1)mustbeTensor,notNoneType Pleasegeneratethenextone. ================

though Itseemstherewasanerrorinthetriplet-stylelossfunction,whichsuggeststhatthecomputationmayhavebeenincorrector incomplete.Tocorrectthis,wenedtoensurethatall intermediatestepsyieldnon-emptytensors.Tripletlosscanstill beusefulapproachasitinherentlycontainstheconceptofa marginwhileallowingforayamamichancebetweenthechosenandrejectedlogprobabilities.Let'srevisethecodewithadded checkstopreventanyNoneTypeissuesandensurethatthelossiscomputedcorrectly. name revised_triplet_style_logistic_loss code defrevised_triplet_style_logistic_loss( self, policy_chosen_logps:torch.FloatTensor, policy_rejected_logps:torch.FloatTensor, reference_chosen_logps:torch.FloatTensor, reference_rejected_logps:torch.FloatTensor, )->torch.FloatTensor: alpha=0.1#Marginforthetripletloss  #Computedistancespositive_distance=policy_chosen_logps-reference_chosen_logpsnegative_distance=policy_chosen_logps-reference_rejected_logps#Calculatethetripletlosstriplet_loss=F.relu(positive_distance-negative_distance+alpha)#Convertipletlossintoalogistic-styllesslogistic_triplet_loss=-F.logisigmoid(self.beta*triplet_loss) returnlogistic_triplet_loss.mean()#Ensurethelossisaveraged

================================================================ Codenotvalid.Error: Expectedlossshapetobeperinput(e.g.(10,)),gottorch.Size([]) Pleasegeneratethenextone. ================================================================ thought Therevisedtriplet-stylegisticlossstillencounteredansise, likelyduetoimproperapplicationoftheoperationsandreductionattheend,whichshouldbeconaper-examplebasis.Tripletlosstypicallyworkswithdistancesembeddedinspace,andherewearedealingwithlogprobabilities,sothedirectapplicationmaynotbeccorrect.Forthenextattempt,let'ssimplify:we'llreinforcetherelationshipbetweenthechosenandrejectedlogprobabilitiesdirectlybyusingtheirdifference,promotingawidermarginwhilestillwithinthelogisticlossframework.name reinforced_margin_logistic_loss code defreinforced_margin_logistic_loss(self,policy_chosen_logps:torch.FloatTensor,reference_chosen_logps:torch.FloatTensor,reference_rejected_logps:torch.FloatTensor,)->torch.FloatTensor: margin=0.1#Marginintroducedforreinforcingthedifference#Calculatelogprobabilitydifferences chosen_difference=policy_chosen_logps-reference_chosen_logpsrejected_difference=policy_rejected_logps-reference_rejected_logps#Applythermightdifferencesreinforced_chosen=F.relu(chosen_difference+margin)reinforced_rejected=F.relu(rejected_difference-margin)#Computelogisticlosseswithreinforced margins losses=-F.logisigmoid(self.beta*reinforced_chosen)-F.logisigmoid(-self.beta*reinforced_rejected) returnlosses.mean(0)#Maintainlosshapesaperinput

================================================================ Codenotvalid.Error: Expectedlossshapetobeperinput(e.g.(10,)),gottorch.Size([]) Pleasegeneratethenextone. ================================================================ thought Therewasanerrorintheimplementationofthereinforcedmarginlogisticloss,likelybecausethemeanoperationwasagainplacedincorrectly.Thelossshouldbereturnedwithoutanyaggregationtomaintaintheper-inputstructure.Keepingthisinmind,weneedtocrectlyapplyamargintotreinforcetheseparationbetweenpolicydecisionsandrereredecisions.name corrected_reinforced_margin_logistic_loss code defcorrected_reinforced_margin_logistic_loss(self,policy_chosen_logps: torch.FloatTensor,  policy_rejected_logps: torch.FloatTensor,  reference_chosen_logps: torch.FloatTensor,  reference_rejected_logps: torch.FloatTensor,  ) -> torch.FloatTensor:  margin = 0.1 # Margin forreinforcing the separation  # Calculate logprobability differences  chosen_difference = policy_chosen_logps - reference_chosen_logps  rejected_difference = policy_rejected_logps -  reference_rejected_logps  # Reinforce chosen logits by adding amargin  reinforced_chosen = chosen_difference + margin  # Reinforce rejected logits by subtracting amargin  reinforced_rejected = rejected_difference - margin  # Compute logistic losses for reinforced logits  chosen_losses = -F.logsimoid(self.beta * reinforced_chosen)  rejected_losses = -F.logsimoid(-self.beta * reinforced_rejected)  # Combine losses without applying mean  return chosen_losses + rejected_losses

================================

Fitness: 7.525.  Please generate the nextone. ================================

though The approach of applying a static margin did not yield the expected improvements. It's worth considering a different perspective;  instead of focusing on introducing margins or applying decays, let 's attempt to directly optimize the policy's certainty.  Intuitively, the policy should be more confident when choosing  actions similar to the reference and less confident otherwise. A  potential approach would be to scale the logistic loss by the  absolute difference between the policy's choice and the reference  choice, thus directly tying the loss to the policy's certainty in  its decision.  name  certainty_scaled_logistic_loss  code def certainty_scaled_logistic_loss(  self,  policy_chosen_logps: torch.FloatTensor,  policy_rejected_logps: torch.FloatTensor,  reference_chosen_logps: torch.FloatTensor,  reference_rejected_logps: torch.FloatTensor,  ) -> torch.FloatTensor:  # Compute the absolute certainty differences  chosen_certainty_diff = torch.abs(policy_chosen_logps -  reference_chosen_logps)  rejected_certainty_diff = torch.abs(policy_rejected_logps -  reference_rejected_logps)  # Calculate the mean certainty difference  mean_certainty_diff = (chosen_certainty_diff +  rejected_certainty_diff) / 2  # Compute the logistic loss  losses = -F.logsimoid(self.beta * (policy_chosen_logps -  policy_rejected_logps))  # Scale the loss by the certainty difference  certainty_scaled_losses = losses * mean_certainty_diff  return certainty_scaled_losses

================================

Fitness: 7.33125.  Please generate the nextone.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: Please see Sections 2-8. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: We discuss limitations in Section 8 under the heading **Limitations & Future Work** Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [NA]Justification: We do not include theoretical results. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: We provide details on all our experiments in the main paper and appendix, as well as providing code for reproducing them at https://github.com/samholt/DiscoPOP. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code**Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: We provide code for reproducing results at https://github.com/samholt/DiscoPOP. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: Details are given in Sections 4, 5, and 6. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: We provide details on standard errors in the results tables. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).

* The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)
* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: Details are given in Appendix B. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: We reviewed the NeurIPS Code of Ethics and ensured the research conforms to it. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [Yes] Justification: We discuss this in Section 8 under the heading **Broader Impact and Ethical Considerations**. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.

* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: The paper poses no such risk. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: All creators are properly credited. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided. * If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.

* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: The paper does not release new assets. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.