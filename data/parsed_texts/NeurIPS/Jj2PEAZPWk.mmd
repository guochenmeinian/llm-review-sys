# Distribution Guidance Network for Weakly Supervised Point Cloud Semantic Segmentation

Zhiyi Pan

SECE, Peking University

Peng Cheng Laboratory

panzhiyi@stu.pku.edu.cn

&Wei Gao

SECE, Peking University

gaowei262@pku.edu.cn

&Shan Liu

Media Laboratory, Tencent

shanl@tencent.com &Ge Li

SECE, Peking University

geli@ece.pku.edu.cn

Ge Li is the corresponding author.

###### Abstract

Despite alleviating the dependence on dense annotations inherent to fully supervised methods, weakly supervised point cloud semantic segmentation suffers from inadequate supervision signals. In response to this challenge, we introduce a novel perspective that imparts auxiliary constraints by regulating the feature space under weak supervision. Our initial investigation identifies which distributions accurately characterize the feature space, subsequently leveraging this priori to guide the alignment of the weakly supervised embeddings. Specifically, we analyze the superiority of the mixture of von Mises-Fisher distributions (moVMF) among several common distribution candidates. Accordingly, we develop a **D**istribution **G**uidance **Net**work (DGNet), which comprises a weakly supervised learning branch and a distribution alignment branch. Leveraging reliable clustering initialization derived from the weakly supervised learning branch, the distribution alignment branch alternately updates the parameters of the moVMF and the network, ensuring alignment with the moVMF-defined latent space. Extensive experiments validate the rationality and effectiveness of our distribution choice and network design. Consequently, DGNet achieves state-of-the-art performance under multiple datasets and various weakly supervised settings.

## 1 Introduction

As a fundamental task in 3D scene understanding, point cloud semantic segmentation [42, 32, 29] is widely entrenched in 3D applications, such as 3D reconstruction [15, 33], autonomous driving [20], and embodied intelligence [14, 50]. Despite significant accomplishments in tackling the disorder and disorganization, point cloud semantic segmentation remains annotation-intensive, hindering its expansion in big datasets and large models. For this reason, the academic community explores achieving point cloud semantic segmentation in a weakly supervised manner. However, due to the lack of supervision signals, learning point cloud segmentation on sparse annotations is nontrivial.

In recent years, considerable effort has been made to pursue additional constraints in weak supervision. As shown in Fig. 1, representative work can be broadly categorized into several paradigms: 1) _Contrastive Learning / Perturbation Consistency_ imposes contrastive loss or consistency constraint between network embeddings of original and perturbed point clouds, respectively. 2) _Self-training_ progressively enhances segmentation quality by treating reliable predictions as pseudo-labels, withgiven sparse annotations as initial labels. 3) _Similarity Metric_ transfers supervision signals from annotated points to unlabeled regions via leveraging the low-level features or the embedding similarity. Nevertheless, most constraints stem from heuristic assumptions and ignore the inherent distribution of network embedding, resulting in ambiguous interpretations of point-level predictions. In contrast to existing paradigms, in this paper, we re-examine two fundamental issues: _How to characterize the semantic segmentation feature space for weak supervision and how to intensify this intrinsic distribution under weakly supervised learning?_

For the first issue about oughtness, we expect to provide a mathematically describable distribution for weakly supervised features. Consequently, we attempt to precisely describe the feature space in terms of two dimensions: distance metric and distribution modeling. In distance metric, we compare the Euclidean norm and cosine similarity between representations, and in distribution modeling, the category prototype model and the mixture model are considered. Among our candidate combinations, the mixture of von Mises-Fisher distributions (moVMF) with cosine similarity is finalized, due to its powerful fitting capability to segment head and insensitivity to the Curse of Dimensionality [44]. We believe that a superior weakly supervised feature space should adhere to this distribution.

For the second issue about practice, we dynamically align the embedding distribution in the hidden space to moVMF during weakly supervised learning. Accordingly, we propose a **D**istribution **G**uidance **N**etwork (DGNet), comprising a weakly supervised learning branch and a distribution alignment branch. Specifically, the weakly supervised learning branch learns semantic embeddings under sparse annotations, while the distribution alignment branch constrains the distribution of the network embeddings. Via a Nested Expectation-Maximum Algorithm, the semantic features are dynamically refined. Therefore, restricting and fitting is a mutually reinforcing, iterative optimization process. To curtail the pattern of feature distribution, we derive the vMF loss based on the maximum likelihood estimation and the discriminative loss inspired by metric learning [22]. For joint optimization, consistency loss is imposed between the segmentation predictions and the posterior probabilities. During the inference phase, only the weakly supervised learning branch is activated to maintain inference consistency with fully supervised learning.

We validate DGNet on three prevailing point cloud datasets, _i.e._, S3DIS [1], ScanNetV2 [11], and SemanticKITTI [5]. After the constraints of feature distribution, DGNet provides significant performance improvements over multiple baselines. Across various label rates, our method achieves state-of-the-art weakly supervised semantic segmentation performance. Extensive ablation studies also confirm the effectiveness of each loss term we proposed. In addition, posterior probabilities under the moVMF provide a plausible interpretation for predictions on unlabeled points.

Figure 1: Visual comparisons of mainstream weakly supervised point cloud semantic segmentation paradigms and our DGNet. The solid and dashed lines represent the network forward process and the loss function, respectively.

Related Work

Weakly Supervised Point Cloud Semantic Segmentation.Weakly supervised point cloud semantic segmentation methods aim to provide reliable additional supervision with sparse annotations. Four paradigms have been successively proposed in recent years, _i.e._, perturbation consistency, contrastive learning, self-training, and similarity metric. Perturbation consistency methods are based on the assumption of perturbation invariance of network features, imposing diverse perturbations (such affine transforms with point jitter [59, 54], downsampling [56], masking [35], etc.) to construct pairs of point clouds. Several methods [31, 34] introduce contrastive learning in weak supervision to encourage the discriminability of hidden layer features. Additionally, pre-training methods [55, 17] with contrastive learning similarly demonstrate the ability to bias induction in the face of downstream semantic segmentation tasks with sparse annotations. Self-training methods generate reliable dynamic pseudo-labels based on previous stage predictions for subsequent training stages. Via CAMs [62], MPRM [51] and J2D3D [25] dynamically generate point-wise pseudo-labels from subcloud-level annotations and image-level annotations, respectively. Recently, REAL [24] integrate SAM [23] to self-training. Similarity metric methods measure the similarity between labeled and unlabeled points to propagate supervision information, in which the similarity is elaborated on low-level features [49, 52], network embedding [36, 18, 40] or category prototypes [58, 46]. Most similar to our method is the similarity metric strategy. However, the distinction is that DGRNet focuses on describing network embeddings holistically, rather than constructing pair relationships between features.

Feature Distribution Constraints.The constraints of feature distribution are always presented in the form of feature clustering. DeepClustering [6], which integrates clustering and unsupervised feature learning, utilizes the clustering results as pseudo-labels to extract visual features dynamically. Following this groundbreaking work, a series of subsequent studies [7, 2, 30] apply feature clustering in unsupervised learning to obtain discriminative visual features for pretraining. For point cloud semantic segmentation, PointDC [10] delineates semantic objects by aligning the features on the same super-voxel in an unsupervised manner. Feng _et al_. [12] imposes a clustering-based representation learning to enhance the discrimination of embeddings under full supervision. In contrast, our DGRet is oriented towards weakly supervised semantic segmentation by restricting the feature distribution.

Mixture of von Mises-Fisher Distributions.The moVMF [3] describes the embeddings of multiple categories on the unit hypersphere in feature space, where the parameters are jointly optimized with the clustering results by Expectation-Maximum algorithm [3, 4]. Some work attempts to combine neural networks with the moVMF in the deep learning era. For example, [16] view face verification as a direct application of clustering, introducing a vMF loss to align the distribution of face features. Segsort [21], on the other hand, utilizes the prior of the moVMF to over-segment images. DINO-VMF [13] achieve a more stable pre-trained method by precisely describing DINO [8] as a moVMF. In this work, we discuss the superiority of moVMF in characterizing semantic embeddings and trust it as a priori to guide weakly supervised learning.

## 3 Methodology

### Preliminaries

Task Definition.Without loss of generality, a point cloud for weakly supervised learning is denoted as \(\{(\mathbf{X}_{l},\mathbf{Y}),(\mathbf{X}_{u},\varnothing)\}=\{(\mathbf{x}_{1},y_{1}),\cdots,(\mathbf{x}_{m},y_{m}),\mathbf{x}_{m+1},\cdots,\mathbf{x}_{n}\}\), where \(\mathbf{X}_{l}\) and \(\mathbf{X}_{u}\) are the point sets with and without annotations, respectively. \(\mathbf{Y}\) is the corresponding annotations on \(\mathbf{X}_{l}\), in which \(y_{i}\in\mathbb{C}\) and \(\mathbb{C}\) is the set of category indices. \(n\) and \(m\) are the point numbers of the point cloud and labeled set, respectively. Fed into the segment head, the network embedding \(\mathbf{f}_{i}\) is projected into the category probability vector \(\mathbf{p}_{i}\). The partial cross-entropy loss is employed in conventional weakly supervised semantic segmentation:

\[\mathcal{L}_{\mathrm{pCE}}=-\frac{1}{m}\sum_{i=1}^{m}\log(\mathbf{p}_{i}^{y_{i }}), \tag{1}\]

where \(\mathbf{p}_{i}^{y_{i}}\) represents the probability of \(y_{i}\)-th category in \(\mathbf{p}_{i}\).

von Mises-Fisher Distribution (vMF).The vMF has demonstrated strong data fitting and generalization capabilities in the fields of self-supervised learning [9, 13], classification [44], variational inference [47], and online continual learning [38]. This distribution describes the distribution of normalized embedding \(\mathbf{v}_{i}=\operatorname{norm}(\mathbf{f}_{i})\) on the unit hypersphere, with the probability density function:

\[f(\mathbf{v}_{i}|\mathbf{u},\kappa)=C_{d}(\kappa)\exp(\kappa\mathbf{u}^{\top} \mathbf{v}_{i}), \tag{2}\]

where \(\mathbf{u}\) represents the mean vector of vMF and \(\kappa\geq 0\) is a concentration parameter that controls the probability concentration around \(\mu\). \(C_{d}(\kappa)\) is the normalization constant.

Mixture of vMF (moVMF).Similar to other mixture models, moVMF treats vMF as a sub-distribution to describe the overall distribution of multiple categories. Over the entire set of categories \(\mathbb{C}\), the probability density function of moVMF is formulated as:

\[P(\mathbf{v}_{i}|\mathbb{C},\Theta)=\sum_{c\in\mathbb{C}}\alpha_{c}f(\mathbf{v }_{i}|\mathbf{u}_{c},\kappa_{c})=\sum_{c\in\mathbb{C}}\alpha_{c}C_{d}(\kappa_ {c})\exp(\kappa_{c}\mathbf{u}_{c}^{\top}\mathbf{v}_{i}), \tag{3}\]

where \(\Theta=\{\alpha_{c},\kappa_{c},\mathbf{u}_{c}|c\in\mathbb{C}\}\) is the parameters of moVMF. \(\alpha_{c}\) denotes the proportion of the von Mises-Fisher distribution for the \(c\)-th category and \(\sum\alpha_{c}=1\).

### Feature Space Description

We intend to provide additional supervision signals for weakly supervised learning by portraying and enhancing its inherent distribution. Specifically, We explore it in two dimensions, _i.e._, the distance metric and the distribution modeling:

* **Distance metric.** Distance metric influences the similarity relationship between features. We consider the two most commonly used distance measures in clustering, _i.e._, Euclidean norm and cosine similarity. For given vectors \(\mathbf{u}\) and \(\mathbf{v}\), the Euclidean norm is defined as \(\|\mathbf{u}-\mathbf{v}\|_{2}\) and the cosine similarity is defined as \(\frac{\mathbf{u}^{\top}\mathbf{v}}{\|\mathbf{u}\|_{2}\|\mathbf{v}\|_{2}}\). Cosine similarity can be viewed as the inner product of normalized \(\mathbf{u}\) and \(\mathbf{v}\).
* **Distribution modeling.** Distribution modeling determines the clustering results of features. A straightforward model is the Category Prototype [45]. In this model, clusters are assigned by comparing the distance between the features and each category prototype. In addition, we incorporate mixture models into the comparison. Depending on the distance measure, we categorize it into the Gaussian Mixture Model (GMM) with Euclidean norm and the mixture of von Mises-Fisher distributions (moVMF) with cosine similarity, respectively.

Describing the feature space of a neural network remains an open problem. Various factors influence the feature space, including network architecture, training data, parameter configurations, and the optimization (loss) function. Given this intractability, deriving a universally optimal mathematical description is impractical. Therefore, we discuss the merits and demerits of these candidate distributions from the following perspectives:

* **Segment head.** To facilitate the analysis, we simplify the structure of the segment head as \(\text{SegHead}(\mathbf{f})=\text{argmax}(\text{softmax}(\mathbf{w}\mathbf{f}^ {\top}))\), where \(\mathbf{f}\) is the semantic feature extracted by the decoder and \(\mathbf{w}\) is the parameter of the output layer. Consider a group of feature vectors \(\{k\mathbf{f}|k\geq 0\quad\&\mathbf{f}\neq\mathbf{0}\}\). For any two feature vectors \(k_{1}\mathbf{f}\) and \(k_{2}\mathbf{f}\) within this group, the segmentation predictions are identical, _i.e._, \(\text{SegHead}(k_{1}\mathbf{f})=\text{argmax}(\text{softmax}(k_{1}\mathbf{w} \mathbf{f}^{\top}))=\text{argmax}(\text{softmax}(k_{2}\mathbf{w}\mathbf{f}^{ \top}))=\text{SegHead}(k_{2}\mathbf{f})\). If the general case of using an activation function is taken into account, it does not change the result after argmax since the activation function is usually monotonically nondecreasing. Therefore, the segment head is a radial classifier with a more pronounced classification performance on the angles, so cosine similarity describes the feature space better than the Euclidean norm.
* **Curse of dimensionality.** Another advantage of cosine similarity can be explained in terms of the Curse of Dimensionality. Most high-dimensional features are far from each other, causing the Euclidean distance to become ineffective in distinguishing differences between feature vectors. Cosine similarity, on the other hand, is more effective in distinguishing differences between features by measuring the angle between the vectors. Besides, the Euclidean norm is sensitive to scale while cosine similarity is not affected by the length of the vectors.

* **Fitting ability.** Despite its computational simplicity, the Category Prototype Model clusters the features by comparing the distance between features and category prototypes. This means that the Category Prototype Model ignores the distribution within categories and the variability between categories. In contrast, the Mixture Model possesses intra-category fitting and inter-category perception capabilities.

Based on the above analysis and experimental validation in Sec. 4.3, we characterize the feature space as moVMF and propose the Distribution Guidance Network to enhance this distribution.

### Distribution Guidance Network

To enhance the intrinsic distributions discussed in Section 3.2, we propose a **D**istribution **G**uidance **N**etwork (DGNet). The structure of DGNet is shown in Fig. 2, which comprises the weakly supervised learning branch and the distribution alignment branch.

#### 3.3.1 Weakly Supervised Learning Branch

Sparse annotations pose two challenges for the point cloud semantic segmentation. The first is underfitting the entire dataset, as the supervision signals are insufficient for complex structured point clouds. To address underfitting, we introduce additional signals by reinforcing the inherent distribution of the feature space. The second challenge is overfitting within the labeled set \(\mathbf{X}_{l}\), as the model capacity is more than adequate to fit the labeled points. To mitigate overfitting, we replace the conventional partial cross-entropy loss Eq. 1 with the truncated cross-entropy loss [60] in the weakly supervised learning branch, which is defined as:

\[\mathcal{L}_{\mathrm{tCE}}=-\frac{1}{m}\sum_{i=1}^{m}\min\Big{(}\log(\mathbf{ p}_{i}^{y_{i}}),\log(\beta)\Big{)}, \tag{4}\]

where \(\beta\in[0,1]\) represents the threshold for truncating the cross-entropy loss. With \(\mathcal{L}_{\mathrm{tCE}}\), the gradient of the cross-entropy loss is curtailed when the predicted class probability for an annotated point exceeds \(\beta\). Over-optimization for that point is halted, thereby preventing overfitting.

The weakly supervised learning branch also provides robust initialization for the distribution alignment branch by utilizing the average feature vector of the labeled points. According to the Central Limit Theorem [27], the difference between the initialization vector from the weakly supervised

Figure 2: Structure of Distribution Guidance Network.

learning branch and the theoretical optimal average vector conforms to a Gaussian distribution with a mean of 0. The initialized mean vector in DGNet has a high probability of appearing in the vicinity of the optimal solution, which facilitates the clustering algorithm in achieving rapid and stable convergence.

#### 3.3.2 Distribution Alignment Branch

The feature space descriptor moVMF, investigated in Sec. 3.2, is employed to regulate the feature space under weakly supervised learning. Initially, the network embeddings are normalized and projected onto the unit hyperspherical surface of the feature space, _i.e._, \(\mathbf{v}_{i}=\text{norm}(\mathbf{f}_{i})\). Following this, the optimization objective function is defined utilizing maximum likelihood estimation1:

Footnote 1: A complete reasoning process can be found in the Appendix.

\[\max_{\phi,\mathcal{Z},\Theta}P(\mathcal{V}|\mathcal{Z},\Theta)=\min_{\phi, \mathcal{Z},\Theta}-\sum_{i=1}^{n}\Big{[}\log(\alpha_{z_{i}})+\kappa\mathbf{u} _{z_{i}}^{\top}\mathbf{v}_{i}\Big{]}, \tag{5}\]

where \(\phi\), \(\mathcal{V}=\{\mathbf{v}_{i}\}\), \(\mathcal{Z}=\{z_{i}\}\) and \(\Theta=\{\alpha_{c},\kappa,\mathbf{u}_{c}\}\) denote the learnable network parameters, the normalized network embeddings, the corresponding clustering results and the parameters of moVMF, respectively. To avoid the long-tail problem and simplify computations, the concentration parameter \(\kappa\) is fixed as a constant in our implementation. Since the clustering initialization is category-aware, the clustering results \(z_{i}\in\mathbb{C}\) are with category labels. While the primary optimization goal is the learning of network parameters \(\phi\), we dynamically resolve \(\mathcal{Z}\) and \(\Theta\) to furnish a more precise feature space description. Consequently, we develop a Nested Expectation-Maximum Algorithm to manage the challenge associated with the three optimization variables delineated in Eq. 5.

* **E Step (Optimize \(\Theta\) and \(\mathcal{Z}\)):** Regarding network embeddings as input conditions, we integrate the soft-moVMF EM algorithm [3] into the network to alternately optimize \(\Theta\) and \(\mathcal{Z}\). To enhance the stability and computational efficiency of the algorithm, we utilize the average features of labeled points from the weakly supervised branch to initialize \(\mathbf{u}\). The posterior probability set \(\mathcal{Q}=\{\mathbf{q}_{i}\}\) serves as the soft assignment for the clustering results \(\mathcal{Z}\), where \(\mathbf{q}_{i}\) is defined as \[\mathbf{q}_{i}=P(c|\mathbf{v}_{i},\Theta)=\frac{\alpha_{c}\exp(\kappa\mathbf{u }_{c}^{\top}\mathbf{v}_{i})}{\sum_{l\in\mathbb{C}}\alpha_{l}\exp(\kappa\mathbf{ u}_{l}^{\top}\mathbf{v}_{i})}.\] (6) Compared to other algorithms in [3], the soft-moVMF algorithm updates \(\Theta\) by weighting all features according to their posterior probabilities, considering inter-cluster similarities, thereby achieving more accurate parameter updates. The posterior probability \(\mathbf{q}_{i}\in[0,1]^{|\mathbb{C}|\times 1}\) is employed not only as a weighting factor for updates but also in the calculation of the loss function for joint optimization. Furthermore, \(\mathcal{Q}\) provides a probabilistic explanation for the predictions during the inference phase. The complexity of the soft-voVMF is \(O(tn|\mathbb{C}|)\), where \(t\) is the iteration number, \(n\) is the point number of the point cloud, and \(|\mathbb{C}|\) is the number of semantic categories. Since \(t\), \(n\), and \(|\mathbb{C}|\) are all set to constant values during network training, the extra computation introduced by the distribution alignment branch is trivial.
* **M Step (Optimize \(\phi\)):** With the converged parameters \(\Theta\) and \(\mathcal{Z}\) fixed, we optimize \(\phi\) by the backpropagation process. Consistent with the philosophy of the soft-moVMF, we incorporate the posterior probability \(\mathcal{Q}\) into Eq. 5, and reformulate it into the loss function as follows: \[\mathcal{L}_{\mathrm{vMF}}=-\sum_{i=1}^{n}\sum_{c\in\mathbb{C}}\mathbf{q}_{i}^ {c}\Big{[}\log(\alpha_{c})+\kappa\mathbf{u}_{c}^{\top}\mathbf{v}_{i}\Big{]}.\] (7) Additionally, acknowledging the significance of distinct decision boundaries within the mixture model, we incorporate a discriminative loss derived from metric learning [22] which is defined as: \[\mathcal{L}_{\mathrm{DIS}}=\frac{1}{|\mathbb{C}|(|\mathbb{C}|-1)}\sum_{c_{1}, c_{2}\in\mathbb{C}\&c_{1}\neq c_{2}}\mathbf{u}_{c_{1}}^{\top}\mathbf{u}_{c_{2}}.\] (8) The interpretation of Bayesian posterior probabilities for predictions based on the moVMF is an attractive property of DGNet. Fig. 3 visualizes the posterior probabilities for some categories. Taking the floor as an example, according to the Bayesian theorem, those points with relatively high posterior probabilities are more likely to be floor, which explains the prediction results.

#### 3.3.3 Loss Function

In addition to the previously mentioned initialization, we introduce a consistency loss to fortify the exchange of information between the two branches. This consistency loss is imposed on the class probability map \(\mathbf{p}\) from the weakly supervised learning branch and the posterior probability \(\mathbf{q}\) from the distribution alignment branch, in the form of cross-entropy:

\[\mathcal{L}_{\mathrm{CON}}=-\frac{1}{n}\sum_{i=1}^{n}\mathbf{q}_{i}^{\top}\log( \mathbf{p}_{i}). \tag{9}\]

If regard the posterior probability \(\mathbf{q}\) as pseudo-labels, the consistency loss is proved to diminish prediction uncertainty and alleviate distribution discrepancies in [48].

Without laborious adjustments to the weights2, the overall loss function is defined as follows:

Footnote 2: The experiments demonstrate that DGNet is not sensitive to loss term weights.

\[\mathcal{L}=\mathcal{L}_{\mathrm{tCE}}+\mathcal{L}_{\mathrm{vMF}}+\mathcal{L}_ {\mathrm{DIS}}+\mathcal{L}_{\mathrm{CON}}. \tag{10}\]

## 4 Experimental Analysis

### Experiment Settings

**Datasets.** S3DIS [1] encompasses six indoor areas, constituting a total of 271 rooms with 13 categories. Area 5 within S3DIS serves as the validation set, while the remaining areas are allocated for network training. ScanNetV2 [11] offers a substantial collection of 1,513 scanned scenes originating from 707 indoor environments with 21 indoor categories. Adhering to the official ScanNetV2 partition, we utilize 1,201 scenes for training and 312 scenes for validation. SemanticKITTI [5] with 19 classes is also considered. Point cloud sequences 00 to 10 are used in training, with sequence 08 as the validation set. To simulate sparse annotations, we randomly discard the dense annotations proportionally.

**Implementation details.** ResGCN-28 in DeepGCN [29] and PointNeXt-1 [43] are reimplemented as the segment backbones with OpenPoints library [43]. We discard the last activation layer of the decoder to extract orientation-completed feature space. We maintain a memory bank [53] to store class prototypes across the entire dataset. In cases where class annotations are absent from the scene, the class prototypes from the memory bank are employed as supplementary initialization. We employ the LaDS [39] to maintain a higher rate of training supervision after point cloud sampling. For truncated cross-entropy loss, \(\beta=0.8\). The concentration constant \(\kappa=10\) and the iteration number \(t=10\). The distribution alignment branch is not activated in the first 50 epochs to stabilize the feature learning. In our implementation, the DGNet is trained with one NVIDIA V100 GPU on S3DIS, eight NVIDIA TESLA T4 GPUs on ScanNetV2, and one NVIDIA V100 GPU on SemanticKITTI. In the inference stage, only the weakly supervised learning branch is activated to produce predictions.

### Comparative Analysis

**Results on S3DIS.** We detail the segmentation performance at 0.1% and 0.01% label rates on S3DIS Area 5. DGNet boosts performance for each baseline, which is evenly distributed across categories.

Figure 3: DGNet provides segmentation predictions from the weakly supervised learning branch and explains it probabilistically by posterior probabilities from the distribution alignment branch.

[MISSING_PAGE_FAIL:8]

### Ablations and Analysis

All ablation studies are performed on S3DIS with PointNeXt-1 as baseline.

**Distribution comparison.** We impose a comparison experiment in the distribution alignment branch of DGNet for distribution selection. The relevant experimental results are reported in Tab. 4. For category prototype models, we discard the vMF loss \(\mathcal{L}_{\text{vMF}}\) and consistency loss \(\mathcal{L}_{\text{CON}}\) due to the lack of corresponding forms. For the mixture model with Euclidean Norm (GMM), we replace the maximum likelihood estimation in GMM form with the \(\mathcal{L}_{\text{vMF}}\) in DGNet. In terms of distance metrics, cosine similarity trumps Euclidean norm. In terms of distribution modeling, mixture models have a significant performance advantage over the category prototype models. Integrating these two aspects, the stronger fitting ability of moVMF leads to more accurate and effective supervised signals for weakly supervised learning in DGNet.

**Ablation study for loss terms.** Tab. 5 demonstrates the validity of each loss term in DGNet. Compared with partial cross-entropy loss, the truncated cross-entropy loss improves segmentation performance due to its avoidance of overfitting. Performance improvements are obtained by imposing \(\mathcal{L}_{\text{vMF}}\) with soft assignment form, \(\mathcal{L}_{\text{DIS}}\) and \(\mathcal{L}_{\text{CON}}\) individually, and optimal performance is achieved by using these loss terms simultaneously. In contrast to the soft assignment, the hard assignment does not take into account the inter-cluster similarity and is mismatched with the soft-moVMF algorithm. Therefore, \(\mathcal{L}_{\text{vMF}}\) with hard assignment form in hard-moVMF algorithm and KNN-moVMF algorithm undermines the segmentation efficiency.

**Ablation study for Nested EM Algorithm.** We ablate the proposed Nested Expectation-Maximum Algorithm in two respects. First, we optimize certain parameters on moVMF and fix other parameters with initialized values. The first, second, third, and last rows in Tab. 6 reveal that individually optimizing parts of the parameters impairs the segmentation performance. Secondly, we ablate how the parameters of moVMF are updated. Compared with kNN-moVMF (fourth raw) and hard-moVMF (fifth raw) in [3], the soft assignment strategy delivers 2.6% and 2.2% mIoU improvements, respectively. This shows that the optimization of moVMF parameters benefits from the soft assignment strategy.

**Hyperparameter selection.** In Tab. 7, we search the parameter space for suitable \(\kappa\), \(t\), and \(\beta\). We observe that (a) the segmentation performance shows an increasing and then decreasing trend as the

\begin{table}
\begin{tabular}{c c c c} \hline \hline \multirow{2}{*}{Distribution} & \multirow{2}{*}{Distribution Modeling} & \multicolumn{2}{c}{Distance Metric} & \multirow{2}{*}{mIoU (\%)} \\ \cline{3-3} \cline{5-4}  & & Euclidean Norm & & \\ \hline PN [45] & & & 59.9 \\ HPN [37] & & \(\circ\) & & 60.3 \\ GMM & & \(\checkmark\) & \(\circ\) & 61.3 \\ moVMF & Mixture Models & \(\circ\) & \(\checkmark\) & **62.4** \\ \hline \hline \end{tabular}
\end{table}
Table 4: Comparisons on feature distribution description selection in distribution alignment branch.

Figure 4: Visual comparisons between baseline and our DGNet on S3DIS Area 5 at 0.01% label rate.

concentration constant \(\kappa\) increases. Our analysis suggests that too small \(\kappa\) leads to a dispersion of features within the class, which can be easily confused with other classes. And too large \(\kappa\) forces overconcentration of features within the class and overfits the network. (b) As the iteration number \(t\) increases, the segmentation performance gradually rises and then stabilizes. We believe that the soft-moVMF algorithm gradually converges as \(t\) increases, and increasing \(t\) after convergence will no longer bring further gains to the network. (c) As the truncated threshold \(\beta\) decreases, the segmentation performance shows a tendency to first increase and then decrease. The conventional cross-entropy loss function is the truncated cross-entropy loss function with \(\beta=1\). When \(\beta\) decreases, the overfitting on sparse annotations is alleviated, but when \(\beta\) is too small, it weakens the supervised signal on sparse labeling leading to performance degradation.

## 5 Limitations and Future Work

Despite the promising performance achieved by DGNet, exploring the distribution of embeddings is preliminary. Feng _et al_. [12] proposes a more sophisticated distribution to restrict feature learning with full supervision. However, such refinement restrictions will lead to overfitting under sparse annotations. Therefore, how to prevent weakly-supervised learning overfitting with enhanced feature description is a promising research topic.

## 6 Conclusion

In this paper, we propose a novel perspective by regulating the feature space for weakly supervised point cloud semantic segmentation and develop a distribution guidance network to verify the superiority of this perspective. Based on the investigation of the distribution of semantic embeddings, we choose moVMF to describe the intrinsic distribution. In DGNet, we alleviate the underfitting across the entire dataset and overfitting within the labeled points. Extensive experimental results demonstrate that DGNet rivals or even surpasses the recent SOTA methods on S3DIS, ScanNetV2, and SemanticKITTI. Moreover, DGNet demonstrates the interpretability of network predictions and scalability to various label rates. We expect our work to inspire the point cloud community to strengthen the inherent properties of weakly supervised learning.

\begin{table}

\end{table}
Table 6: Ablation studies for Nested Expectation-Maximum Algorithm.

\begin{table}

\end{table}
Table 7: Hyperparameter selection for the (a) concentration constant \(\kappa\), (b) iteration number \(t\) and (c) truncated threshold \(\beta\).

\begin{table}

\end{table}
Table 5: Ablation study for loss terms.

## Acknowledgements

This work was supported by Shenzhen Science and Technology Program under Grant KQTD20180411143338837.

## References

* [1]I. Armeni, O. Sener, A. R. Zamir, H. Jiang, I. Brilakis, M. Fischer, and S. Savarese (2016) 3d semantic parsing of large-scale indoor spaces. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 1534-1543. Cited by: SS1.
* [2]Y. Asano, C. Rupprecht, and A. Vedaldi (2020) Self-labelling via simultaneous clustering and representation learning. In 8th International Conference on Learning Representations, ICLR 2020, Addis Ababa, Ethiopia, April 26-30, 2020, External Links: Link Cited by: SS1.
* [3]A. Banerjee, I. S. Dhillon, J. Ghosh, S. Sra, and G. Ridgeway (2005) Clustering on the unit hypersphere using von mises-fisher distributions. Journal of Machine Learning Research69 (2). Cited by: SS1.
* [4]F. Barbaro and F. Rossi (2021) Sparse mixture of von mises-fisher distribution. In ESANN, Cited by: SS1.
* [5]J. Behley, M. Garbade, A. Milioto, J. Quenzel, S. Behnke, C. Stachniss, and J. Gall (2019) SemanticKitTI: a dataset for semantic scene understanding of lidar sequences. In Proceedings of the IEEE/CVF international conference on computer vision, pp. 9297-9307. Cited by: SS1.
* [6]M. Caron, P. Bojanowski, A. Joulin, and M. Douze (2018) Deep clustering for unsupervised learning of visual features. In Proceedings of the European conference on computer vision (ECCV), pp. 132-149. Cited by: SS1.
* [7]M. Caron, I. Misra, J. Mairal, P. Goyal, P. Bojanowski, and A. Joulin (2020) Unsupervised learning of visual features by contrasting cluster assignments. Advances in neural information processing systems33, pp. 9912-9924. Cited by: SS1.
* [8]M. Caron, H. Touvron, I. Misra, H. Jegou, J. Mairal, P. Bojanowski, and A. Joulin (2021) Emerging properties in self-supervised vision transformers. In Proceedings of the IEEE/CVF international conference on computer vision, pp. 9650-9660. Cited by: SS1.
* [9]X. Chen and K. He (2021) Exploring simple siamese representation learning. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pp. 15750-15758. Cited by: SS1.
* [10]Z. Chen, H. Xu, W. Chen, Z. Zhou, H. Xiao, B. Sun, X. Xie, et al. (2023) PointDC: unsupervised semantic segmentation of 3d point clouds via cross-modal distillation and super-voxel clustering. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pp. 14290-14299. Cited by: SS1.
* [11]A. Dai, A. X. Chang, M. Savva, M. Halber, T. Funkhouser, and M. Niessner (2017) Scannet: richly-annotated 3d reconstructions of indoor scenes. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 5828-5839. Cited by: SS1.
* [12]T. Feng, W. Wang, X. Wang, Y. Yang, and Q. Zheng (2023) Clustering based point cloud representation learning for 3d analysis. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pp. 8283-8294. Cited by: SS1.
* [13]H. Govindarajan, P. Siden, J. Roll, and F. Lindsten (2023) DINO as a von mises-fisher mixture model. In The Eleventh International Conference on Learning Representations, ICLR 2023, Kigali, Rwanda, May 1-5, 2023, External Links: Link Cited by: SS1.
* [14]A. Gupta, S. Savarese, S. Ganguli, and L. Fei-Fei (2021) Embodied intelligence via learning and evolution. Nature communications12 (1), pp. 5721. Cited by: SS1.
* [15]C. Hane, C. Zach, A. Cohen, R. Angst, and M. Pollefeys (2013) Joint 3d scene reconstruction and class segmentation. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 97-104. Cited by: SS1.
* [16]M. A. Hasnat, J. Bohne, J. Milgram, S. Gentric, and L. Chen (2017) von mises-fisher mixture model-based deep learning: application to face verification. arXiv preprint arXiv:1706.04264. Cited by: SS1.
* [17]J. Hou, B. Graham, M. Niessner, and S. Xie (2021) Exploring data-efficient 3d scene understanding with contrastive scene contexts. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp. 15587-15597. Cited by: SS1.
* [18]Q. Hu, B. Yang, C. Fang, Y. Guo, A. Leonardis, N. Trigoni, and A. Markham (2022) Weakly-supervised semantic segmentation of large-scale 3d point clouds. In Computer Vision-ECCV 2022: 17th European Conference, Tel Aviv, Israel, October 23-27, 2022, Proceedings, Part XXVII, pp. 600-619. Cited by: SS1.
* [19]Q. Hu, B. Yang, L. Xie, S. Rosa, Y. Guo, Z. Wang, N. Trigoni, and A. Markham (2020) RandLA-net: efficient semantic segmentation of large-scale point clouds. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pp. 11108-11117. Cited by: SS1.

* [20] Yihan Hu, Jiazhi Yang, Li Chen, Keyu Li, Chonghao Sima, Xizhou Zhu, Siqi Chai, Senyao Du, Tianwei Lin, Wenhai Wang, et al. Planning-oriented autonomous driving. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 17853-17862, 2023.
* [21] Jyh-Jing Hwang, Stella X Yu, Jianbo Shi, Maxwell D Collins, Tien-Ju Yang, Xiao Zhang, and Liang-Chieh Chen. Segsort: Segmentation by discriminative sorting of segments. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 7334-7344, 2019.
* [22] Mahmut Kaya and Hasan Sakir Bilge. Deep metric learning: A survey. _Symmetry_, 11(9):1066, 2019.
* [23] Alexander Kirillov, Eric Mintun, Nikhila Ravi, Hanzi Mao, Chloe Rolland, Laura Gustafson, Tete Xiao, Spencer Whitehead, Alexander C Berg, Wan-Yen Lo, et al. Segment anything. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 4015-4026, 2023.
* [24] Hyeokjun Kweon, Jihun Kim, and Kuk-Jin Yoon. Weakly supervised point cloud semantic segmentation via artificial oracle. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 3721-3731, 2024.
* [25] Hyeokjun Kweon and Kuk-Jin Yoon. Joint learning of 2d-3d weakly supervised semantic segmentation. _Advances in Neural Information Processing Systems_, 35:30499-30511, 2022.
* [26] Yuxiang Lan, Yachao Zhang, Yanyun Qu, Cong Wang, Chengyang Li, Jia Cai, Yuan Xie, and Zongze Wu. Weakly supervised 3d segmentation via receptive-driven pseudo label consistency and structural consistency. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 37, pages 1222-1230, 2023.
* [27] Pierre Simon Laplace. _Theorie analytique des probabilites_. Courcier, 1820.
* [28] Min Seok Lee, Seok Woo Yang, and Sung Won Han. Gaia: Graphical information gain based attention network for weakly supervised point cloud semantic segmentation. In _Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision_, pages 582-591, 2023.
* [29] Guohao Li, Matthias Muller, Guocheng Qian, Itzel C Delgadillo, Abdullelah Abualshour, Ali Thabet, and Bernard Ghanem. Deepgcns: Making gcns go as deep as cnns. _IEEE transactions on pattern analysis and machine intelligence_, 45(6):6923-6939, 2021.
* [30] Junnan Li, Pan Zhou, Caiming Xiong, and Steven C. H. Hoi. Prototypical contrastive learning of unsupervised representations. In _9th International Conference on Learning Representations, ICLR 2021, Virtual Event, Austria, May 3-7, 2021_. OpenReview.net, 2021.
* [31] Mengtian Li, Yuan Xie, Yunhang Shen, Bo Ke, Ruizhi Qiao, Bo Ren, Shaohui Lin, and Lizhuang Ma. Hybridder: Weakly-supervised 3d point cloud semantic segmentation via hybrid contrastive regularization. In _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pages 14930-14939, 2022.
* [32] Yangyan Li, Rui Bu, Mingchao Sun, Wei Wu, Xinhan Di, and Baoquan Chen. Pointcnn: Convolution on x-transformed points. _Advances in neural information processing systems_, 31, 2018.
* [33] Zhuangzi Li, Ge Li, Thomas H Li, Shan Liu, and Wei Gao. Semantic point cloud upsampling. _IEEE Transactions on Multimedia_, 25:3432-3442, 2022.
* [34] Kangcheng Liu, Yuzhi Zhao, Qiang Nie, Zhi Gao, and Ben M Chen. Weakly supervised 3d scene segmentation with region-level boundary awareness and instance discrimination. In _European conference on computer vision_, pages 37-55. Springer, 2022.
* [35] Lizhao Liu, Zhuangwei Zhuang, Shangxin Huang, Xunlong Xiao, Tianhang Xiang, Cen Chen, Jingdong Wang, and Mingkui Tan. Cpcmc: Contextual point cloud modeling for weakly-supervised point cloud semantic segmentation. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 18413-18422, 2023.
* [36] Zhengzhe Liu, Xiaojuan Qi, and Chi-Wing Fu. One thing one click: A self-training approach for weakly supervised 3d semantic segmentation. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 1726-1736, 2021.
* [37] Pascal Mettes, Elise Van der Pol, and Cees Snoek. Hyperspherical prototype networks. _Advances in neural information processing systems_, 32, 2019.
* [38] Nicolas Michel, Giovanni Chierchia, Romain Negrel, and Jean-Francois Bercher. Learning representations on the unit sphere: Investigating angular gaussian and von misses-fisher distributions for online continual learning. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 38, pages 14350-14358, 2024.
* [39] Zhiyi Pan, Nan Zhang, Wei Gao, Shan Liu, and Ge Li. Point cloud semantic segmentation with sparse and inhomogeneous annotations. _arXiv preprint arXiv:2312.06259_, 2023.
* [40] Zhiyi Pan, Nan Zhang, Wei Gao, Shan Liu, and Ge Li. Less is more: label recommendation for weakly supervised point cloud semantic segmentation. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 38, pages 4397-4405, 2024.
* [41] Charles R Qi, Hao Su, Kaichun Mo, and Leonidas J Guibas. Pointnet: Deep learning on point sets for 3d classification and segmentation. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 652-660, 2017.

* [42] Charles Ruizhongtai Qi, Li Yi, Hao Su, and Leonidas J Guibas. Pointnet++: Deep hierarchical feature learning on point sets in a metric space. _Advances in neural information processing systems_, 30, 2017.
* [43] Guocheng Qian, Yuchen Li, Houwen Peng, Jinjie Mai, Hasan Hammoud, Mohamed Elhoseiny, and Bernard Ghanem. Pointnext: Revisiting pointnet++ with improved training and scaling strategies. _Advances in Neural Information Processing Systems_, 35:23192-23204, 2022.
* [44] Tyler R Scott, Andrew C Gallagher, and Michael C Mozer. von mises-fisher loss: An exploration of embedding geometries for supervised learning. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 10612-10622, 2021.
* [45] Jake Snell, Kevin Swersky, and Richard Zemel. Prototypical networks for few-shot learning. _Advances in neural information processing systems_, 30, 2017.
* [46] Yongyi Su, Xun Xu, and Kui Jia. Weakly supervised 3d point cloud segmentation via multi-prototype learning. _IEEE Transactions on Circuits and Systems for Video Technology_, 2023.
* [47] Jalil Taghia, Zhanyu Ma, and Arne Leijon. Bayesian estimation of the von-mises fisher mixture model with variational inference. _IEEE transactions on pattern analysis and machine intelligence_, 36(9):1701-1715, 2014.
* [48] Liyao Tang, Zhe Chen, Shanshan Zhao, Chaoyue Wang, and Dacheng Tao. All points matter: Entropy-regularized distribution alignment for weakly-supervised 3d segmentation. _Advances in Neural Information Processing Systems_, 36, 2024.
* [49] An Tao, Yueqi Duan, Yi Wei, Jiwen Lu, and Jie Zhou. Seggroup: Seg-level supervision for 3d instance and semantic segmentation. _IEEE Transactions on Image Processing_, 31:4952-4965, 2022.
* [50] Weikang Wan, Haoran Geng, Yun Liu, Zikang Shan, Yaodong Yang, Li Yi, and He Wang. Unidexgrasp++: Improving dexterous grasping policy learning via geometry-aware curriculum and iterative generalist-specialist learning. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 3891-3902, 2023.
* [51] Jiacheng Wei, Guosheng Lin, Kim-Hui Yap, Tzu-Yi Hung, and Lihua Xie. Multi-path region mining for weakly supervised 3d semantic segmentation on point clouds. In _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pages 4384-4393, 2020.
* [52] Yushuang Wu, Zizheng Yan, Shengcai Cai, Guanbin Li, Xiaoguang Han, and Shuguang Cui. Pointmatch: A consistency training framework for weakly supervised semantic segmentation of 3d point clouds. _Computers & Graphics_, 116:427-436, 2023.
* [53] Zhirong Wu, Yuanjun Xiong, Stella X Yu, and Dahua Lin. Unsupervised feature learning via non-parametric instance discrimination. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 3733-3742, 2018.
* [54] Zhonghua Wu, Yicheng Wu, Guosheng Lin, Jianfei Cai, and Chen Qian. Dual adaptive transformations for weakly supervised point cloud segmentation. In _Computer Vision-ECCV 2022: 17th European Conference, Tel Aviv, Israel, October 23-27, 2022, Proceedings, Part XXXI_, pages 78-96. Springer, 2022.
* [55] Saining Xie, Jiatao Gu, Demi Guo, Charles R Qi, Leonidas Guibas, and Or Litany. Pointcontrast: Unsupervised pre-training for 3d point cloud understanding. In _Computer Vision-ECCV 2020: 16th European Conference, Glasgow, UK, August 23-28, 2020, Proceedings, Part III 16_, pages 574-591. Springer, 2020.
* [56] Cheng-Kun Yang, Ji-Jia Wu, Kai-Syun Chen, Yung-Yu Chuang, and Yen-Yu Lin. An mil-derived transformer for weakly supervised point cloud segmentation. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 11830-11839, 2022.
* [57] Baochen Yao, Hui Xiao, Jiayan Zhuang, and Chengbin Peng. Weakly supervised learning for point cloud semantic segmentation with dual teacher. _IEEE Robotics and Automation Letters_, 2023.
* [58] Yachao Zhang, Zonghao Li, Yuan Xie, Yanyun Qu, Cuihua Li, and Tao Mei. Weakly supervised semantic segmentation for large-scale point cloud. In _Proceedings of the AAAI Conference on Artificial Intelligence_, pages 3421-3429, 2021.
* [59] Yachao Zhang, Yanyun Qu, Yuan Xie, Zonghao Li, Shanshan Zheng, and Cuihua Li. Perturbed self-distillation: Weakly supervised large-scale point cloud semantic segmentation. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 15520-15528, 2021.
* [60] Zhilu Zhang and Mert Sabuncu. Generalized cross entropy loss for training deep neural networks with noisy labels. _Advances in neural information processing systems_, 31, 2018.
* [61] Hengshuang Zhao, Li Jiang, Jiaya Jia, Philip HS Torr, and Vladlen Koltun. Point transformer. In _Proceedings of the IEEE/CVF international conference on computer vision_, pages 16259-16268, 2021.
* [62] Bolei Zhou, Aditya Khosla, Agata Lapedriza, Aude Oliva, and Antonio Torralba. Learning deep features for discriminative localization. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 2921-2929, 2016.

## Appendix A Derivation of Optimization Objective Function

According to maximum likelihood estimation, the optimization objective function is defined as:

\[\max_{\phi,\mathcal{Z},\Theta}P(\mathcal{V}|\mathcal{Z},\Theta) \tag{11}\] \[=\min_{\phi,\mathcal{Z},\Theta}-\sum_{i}P(\mathbf{v}_{i}|z_{i}, \Theta_{z_{i}})\] \[=\min_{\phi,\mathcal{Z},\Theta}-\sum_{i}\log(\alpha_{z_{i}}f( \mathbf{v}_{i}|\kappa_{z_{i}},\mathbf{u}_{z_{i}}))\] \[=\min_{\phi,\mathcal{Z},\Theta}-\sum_{i}\log(\alpha_{z_{i}}C_{d}( \kappa_{z_{i}})\exp(\kappa_{z_{i}}\mathbf{u}_{z_{i}}^{\top}\mathbf{v}_{i}))\] \[=\min_{\phi,\mathcal{Z},\Theta}-\sum_{i}\Big{[}\log(C_{d}(\kappa_{ z_{i}}))+\log(\alpha_{z_{i}})+\kappa_{z_{i}}\mathbf{u}_{z_{i}}^{\top}\mathbf{v}_{i} \Big{]}.\]

To avoid the long-tail problem and simplify computations, we set a constant value for \(\kappa\) on each class \(c\). Therefore, the objective optimization function Eq. 11 can be further simplified as:

\[\max_{\phi,\mathcal{Z},\Theta}P(\mathcal{V}|\mathcal{Z},\Theta)=\min_{\phi, \mathcal{Z},\Theta}-\sum_{i=1}^{n}\Big{[}\log(\alpha_{z_{i}})+\kappa\mathbf{u}_ {z_{i}}^{\top}\mathbf{v}_{i}\Big{]}. \tag{12}\]

```
Input: Normalized Embeddings \(\mathcal{V}=\{\mathbf{v}_{i}|i=1,2,\cdots,n\}\), Initial Clustering Centers \(\mathcal{H}=\{\mathbf{h}_{c}|c\in\mathbb{C}\}\) Output: Soft Assignments \(\mathcal{Q}\), Clustering Results \(\mathcal{Z}\), Parameters of moVMF \(\Theta\) /* Initialize \(\alpha\), \(\mathbf{u}\) in \(\Theta\) / forcategory index \(c\) of \(\mathbb{C}\)do \(\alpha_{c},\mathbf{u}_{c}=\frac{1}{|\mathbb{C}|},\mathbf{h}_{c}\)  end for repeat /* The Expectation step of EM */ forpoint index \(i=1\) to \(n\)do forcategory index \(c\) of \(\mathbb{C}\)do \(f(\mathbf{v}_{i}|\kappa,\mathbf{u}_{c})=C_{d}(\kappa)\exp(\kappa\mathbf{u}_{c }^{\top}\mathbf{v}_{i})\)  end for /* Compute the posterior probability \(\mathbf{q}_{i}\) */ forcategory index \(c\) of \(\mathbb{C}\)do \(P(c|\mathbf{v}_{i},\Theta)=\frac{\alpha_{c}\exp(\mathbf{u}_{c}^{\top}\mathbf{v }_{i})}{\sum_{l\in\mathbb{C}}\alpha_{l}\exp(\kappa\mathbf{u}_{l}^{\top}\mathbf{ v}_{i})}\)  end for  end for /* The Maximization step of EM */ forcategory index \(c\) of \(\mathbb{C}\)do \(\alpha_{c}=\frac{1}{n}\sum_{i=1}^{n}P(c|\mathbf{v}_{i},\Theta)\) \(\frac{\sum_{i=1}^{n}\mathbf{v}_{i}P(c|\mathbf{v}_{i},\Theta)}{\sum_{l=1}^{n} \mathbf{v}_{i}P(c|\mathbf{v}_{i},\Theta)}\)  end for untilConvergence return\(\mathcal{Q}=P(\mathbb{C}|\mathcal{V},\Theta)\), \(\mathcal{Z}=\underset{c\in\mathbb{C}}{\operatorname{argmax}}(\mathcal{Q})\), \(\Theta=\{\alpha_{c},\mathbf{u}_{c}|c\in\mathbb{C}\}\)
```

**Algorithm 1**soft-moVMF Algorithm

## Appendix B The soft-moVMF Algorithm

**Initialization.** Due to the sparsity of the annotations, some classes in the scene may lack any labeled points, thereby hindering proper initialization. Consequently, we maintain a memory bank [53] to store class prototypes across the entire dataset. Specifically, the mean embedding directions on labeled points are set as the initial vectors for categories with labeled points in the point cloud scene.

For the missing categories of this scene, we retrieve the category prototypes \(\rho\) from the memory bank as supplementary initialization. Consequently, the initial vector \(\mathbf{h}_{c}\) is formulated as:

\[\mathbf{h}_{c}=\left\{\begin{array}{ll}\frac{\sum_{y_{i}=c}\mathbf{v}_{i}}{\| \sum_{y_{i}=c}\mathbf{v}_{i}\|}&c\in\mathbf{Y}\\ \rho_{c}&c\notin\mathbf{Y}\end{array}\right.. \tag{13}\]

**Pseudo Code.** As presented in Algorithm 1, we incorporate prior knowledge about the semantics during the optimization process based on soft-moVMF [3]. The weights \(\alpha=\nicefrac{{1}}{{|\mathbb{C}|}}\) are initialized uniformly. Subsequently, based on the cosine similarity between features on each point and mean directions of each category, the prior probability \(f\) and the posterior probability \(\mathbf{q}_{i}\) are estimated. Finally, we determine the clustering result \(z_{i}\) for each point by \(\operatorname*{argmax}(\mathbf{q}_{i})\). After updating the mean directions \(\mathbf{u}\) and weights \(\alpha\), the process is repeated until the clustering results converge.

## Appendix C More Experimental Results

**Impact of label rates.** To demonstrate the capability of DGNet on extreme label rates, we compare the segmentation performance on sparse annotations over a larger range of rates. Tab. 8 reports the mIoU performance of the DGNet and baseline at 10%, 1%, 0.1%, 0.01%, and 0.001% label rates. It can be observed that at 100,000 times less sparse annotations, the baseline fails to learn accurate semantic embedding from it. At the same time, our DGNet still maintains acceptable segmentation performance since it can be conducted unsupervised.

**Varying labeled points.** Following SQN [18], we verified the sensitivity of DGNet (PointNeXt) to different labeled points at the same label rate. We repeated the experiment five times for each label setting, keeping the network and label rate unchanged and changing only the labeled points' locations. In Tab. 9, we observe a slight performance fluctuation within a reasonable range.

\begin{table}
\begin{tabular}{c c c c c c} \hline \hline Method & 10\% & 1\% & 0.1\% & 0.01\% & 0.001\% \\ \hline PointNeXt & 69.3 & 68.3 & 67.0 & 60.8 & 44.7 \\ DGNet (PointNeXt) & 69.5 & 68.8 & 67.8 & 62.4 & 51.5 \\ \hline \hline \end{tabular}
\end{table}
Table 8: Performance comparison on various label rates.

\begin{table}
\begin{tabular}{c c c c c c c c} \hline \hline Setting & Trail\#1 & Trail\#2 & Trail\#3 & Trail\#4 & Trail\#5 & Mean & STD \\ \hline
0.1\% & **67.8** & 66.9 & 66.7 & 67.6 & 67.3 & 67.3 & 0.42 \\
0.01\% & 62.0 & **62.4** & 61.4 & 61.7 & 62.0 & 61.9 & 0.33 \\ \hline \hline \end{tabular}
\end{table}
Table 9: Sensitivity analysis of DGNet on S3DIS Area 5.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The main claim of this paper is using mathematically definable feature distributions to promote the learning of point cloud semantic segmentation under weak supervision. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: The limitations of our work can be found in Sec. 5. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes]Justification: The complete derivation of Eq. 5 is given in Appendix. 1. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? 1. Answer: [Yes] 2. Justification: The relevant code and data will be open-sourced upon acceptance of the paper. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? 1.

Answer: [Yes]

Justification: The relevant code and data will be open-sourced upon acceptance of the paper. Guidelines:

* The answer NA means that paper does not include experiments requiring code.
* Please see the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details.
* While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).
* The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details.
* The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.
* The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.
* At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).
* Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: The main details are shown in Sec. 4.1. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [No] Justification: Following other weak supervision methods, we do not provide error bars. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors). * It should be clear whether the error bar is the standard deviation or the standard error of the mean. ** It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [No] Justification: We only provide information on the computer resources for the main experiment. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics [https://neurips.cc/public/EthicsGuidelines?](https://neurips.cc/public/EthicsGuidelines?) Answer: [Yes] Justification: We conduct in the paper conform, in every respect, with the NeurIPS Code of Ethics. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: There is no societal impact of this work. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.

* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: The paper poses no such risks. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: We cite the original papers that produce the codes and datasets. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided. * If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset. * For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.

* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: The paper does not release new assets. Guidelines: * The answer NA means that the paper does not release new assets. * Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc. * The paper should discuss whether and how consent was obtained from people whose asset is used. * At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper. * According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper. * We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution. * For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.