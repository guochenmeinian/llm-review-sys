# Dynamic Sparsity Is Channel-Level Sparsity Learner

Lu Yin\({}^{1}\)

Gen Li\({}^{2}\)

Meng Fang\({}^{3}\)

Li Shen\({}^{4}\)

Tianjin Huang\({}^{1}\)

Zhangyang Wang\({}^{5}\)

**Vlado Menkovski\({}^{1}\)**

**Xiaolong Ma\({}^{2}\)**

**Mykola Pechenizkiy\({}^{1}\)**

**Shiwei Liu\({}^{1,5}\) \({}^{1}\)**Eindhoven University of Technology

\({}^{2}\)Clemson University

\({}^{3}\)University of Liverpool

\({}^{4}\)JD Explore Academy

\({}^{5}\)University of Texas at Austin

{l.yin,t.huang,m.pechenizkiy,v.menkovski,s.liu3}@tue.nl

gen@g.clemson.edu

xiaolom@clemson.edu

Meng.Fang@liverpool.ac.uk

mathshenli@gmail.com

atlaswang@utexas.edu

###### Abstract

Sparse training has received an upsurging interest in machine learning due to its tantalizing saving potential for the entire training process as well as inference. Dynamic sparse training (DST), as a leading sparse training approach, can train deep neural networks at high sparsity from scratch to match the performance of their dense counterparts. However, most if not all DST prior arts demonstrate their effectiveness on unstructured sparsity with highly irregular sparse patterns, which receives limited support in common hardware. This limitation hinders the usage of DST in practice. In this paper, we propose **Channel-aware** dynamic sparse (**Chase**), which for the first time seamlessly translates the promise of unstructured dynamic sparsity to GPU-friendly channel-level sparsity (not fine-grained _N:M_ or group sparsity) during one end-to-end training process, without any ad-hoc operations. The resulting small sparse networks can be directly accelerated by commodity hardware, without using any particularly sparsity-aware hardware accelerators. This appealing outcome is partially motivated by a hidden phenomenon of dynamic sparsity: _off-the-shelf unstructured DST implicitly involves biased parameter reallocation across channels, with a large fraction of channels (up to 60%) being sparser than others._ By progressively identifying and removing these channels during training, our approach translates unstructured sparsity to channel-wise sparsity. Our experimental results demonstrate that Chase achieves \(\mathbf{1.7\times}\) inference throughput speedup on common GPU devices without compromising accuracy with ResNet-50 on ImageNet. We release our codes in [https://github.com/luuyin/chase](https://github.com/luuyin/chase).

## 1 Introduction

Deep neural networks (DNNs) have recently demonstrated impressive breakthroughs with increasing scales [2; 8; 36]. Besides the well-known scaling, i.e., test accuracy scales as a power law regarding model size and training data size in quantity [18; 26], recent work has observed that massive increases in quantity can imbue models with qualitatively new behavior [49]. However, the memory and computation required to train and deploy these large models can be a heavy burden on the environment and finance [13; 43]. Therefore, people start to probe the possibility of training sparse neural networks from scratch without involving any dense training steps (dubbed sparse training [39; 35]). As the memory requirement and multiplications (which dominate neural network computation) associated with zero weights can be skipped, sparse training is becoming a promising direction due to their "end-to-end" saving potentials for both efficient training and efficient inference.

Sparse training can be categorized into two groups, static sparse training and dynamic sparse training according to the dynamics of the sparse pattern during training. Static sparse training(SST) [28; 56; 53; 33; 22], namely, draws a sparse neural network at initialization before training and train with a fixed sparse pattern (sparse connections between layers) without further changes. Dynamic sparse training (DST) [39; 10; 35], on the contrary, jointly optimizes the weights and sparse patterns during training, usually delivering better performance than the static ones. DST quickly evolves as a leading direction in sparse training due to its compelling performance and training/inference efficiency. For instance, a sparse ResNet-34 with only 2% parameters left can be dynamically trained to match the performance of its dense counterpart without involving any pre-training or dense training [35].

While showing promise in performance and efficiency, so far the real speedup of DST has only been demonstrated on CPU [34; 6] or IPU [6]. Most sparse training methods produce unstructured sparse neural networks with extremely irregular sparse patterns, which can not be directly accelerated in common hardware (i.e., GPU and TPU), compared to the straightforward and hardware-friendly sparse pattern produced by channel pruning [17; 37].

Many endeavors strive to solve this issue by coarsening the sparsity granularity, which can be loosely categorized into two groups. i. Grouping nonzero weights into blocks. As GPU performs very fast on contiguous memory operations, block-wise sparsity enjoys much more speedups than unstructured sparsity in practice. Group lasso regularization [41; 14] is a widely-used technique to induce block sparsity in the network. Ad-hoc grouping operations can also be utilized to build dense blocks from unstructured sparse weights [46; 3]. ii. Seeking fine-grained structured sparse patterns. For instance, inspired by the recent support of 2:4 fine-grained sparsity in NVIDIA Ampere [42], previous arts attempt to find a sweet spot between structured and unstructured sparsity by learning _N:M_ sparsity patterns [60; 20; 45]. However, these methods either rely on specialized sparse-aware accelerators [9; 42] to enable speedups or suffer from significant performance degradation due to the constraint location of nonzero values [25].

In this paper, we propose a new method dubbed **Ch**annel-**a**ware dynamic **s**parse (**Chase**), which can effectively transfer the promise of unstructured sparse training into the hardware-friendly channel sparsity with comparable or even better performance on common GPU devices. The roadmap of our exploration is as follows:

* **Observation 1:** We first present an emerging characteristic of DST: off-the-shelf DST approaches implicitly involve biased parameter reallocation, resulting in a large proportion of channels (up to 60%) that rapidly become sparser than their initializations at the very early training stage. We term them as "sparse amenable channels" for the sake of convenient reference.
* **Observation 2:** We examine the prunability (i.e., the accuracy drop caused by pruning) of the sparse amenable channels, we find that these channels cause marginal damages to the model performance than their counterparts when pruned.

Figure 1: Inference latency and throughput of various DST methods. The sparsity level is 90% for all approaches. All models are trained for 100 epochs with the ResNet-50/ImageNet benchmark. Each dot of Chase and Chase (prune skip) corresponds to a model with distinct channel-wise sparsity. The results of latency are obtained on NVIDIA 2080TI GPU with a batch size of 2.

**A New Metric:** We propose a new, sparsity-inspired, channel pruning metric - Unmasked Mean Magnitude (UMM) - that can be used to precisely discover sparse amenable channels during training by monitoring the quantity and quality of weight sparsity.
* **A New Approach:** Based on the above findings, we propose **Ch**annel-**a**ware dynamic sparse (**Chase**), a first sparse training framework that can favorably transform unstructured sparsity into channel-wise sparsity on the fly. Chase starts with an unstructured sparse neural network and dynamically trains it while gradually eliminating sparse amenable channels with the lowest UMM scores. During training, we globally grow and shrink parameters to strengthen performance further.
* 1.7\(\times\) inference throughput speedups on common GPU devices.

## 2 Sparse Amenable Channels in DST

We first describe the basis and notations of the prior sparse training arts. Afterward, we provide evidence for the existence of the sparse amenable channels during the dynamic sparse training across different architectures and demonstrate that pruning of such channels leads to marginal performance damage than their counterparts. Based on this interesting finding, we introduce Chase, a sparsity-inspired sparse training method that for the first time translates the theoretical promise of sparse training into GPU-friendly speedup, without using any specialized CUDA implementations.

### Prior Sparse Training Arts

Let us denote the sparse neural network as \(f(\mathbf{x};\mathbf{\theta}_{\mathrm{s}})\). \(\mathbf{\theta}_{\mathrm{s}}\) refers to a subset of the full network parameters \(\mathbf{\theta}\) at a sparsity level of \((1-\frac{\|\mathbf{\theta}_{\mathrm{s}}\|_{0}}{\|\mathbf{\theta}\|_{0}})\) and \(\|\cdot\|_{0}\) represents the \(\ell_{0}\)-norm.

It is common to initialize sparse subnetworks \(\mathbf{\theta}_{\mathrm{s}}\) randomly based on the uniform [40; 5] or non-uniform layer-wise sparsity ratios with _Erdos-Renyi_ (ER) graph [39; 10; 35; 31]. In the case of image classification, sparse training aims to optimize: \(\hat{\mathbf{\theta}}_{\mathrm{s}}=\operatorname*{argmin}_{\mathbf{\theta}_{\mathrm{s} }}\sum_{i=1}^{N}\mathcal{L}(f(x_{i};\mathbf{\theta}_{\mathrm{s}}),y_{i})\) using data \(\{(x_{i},y_{i})\}_{i=1}^{N}\), where \(\mathcal{L}\) is the loss function. Static sparse training (SST) maintains the same sparse network connectivity during training after initialization. Dynamic sparse training (DST), on the contrary, allows the sparse subnetworks to dynamically explore new parameters while sticking to a fixed sparsity budget. Most of the DST methods follow a simple prune-and-grow scheme [39] to perform parameter exploration, i.e., pruning \(r\) proportion of the least important parameters based on their magnitude, and immediately grow the same number of parameters randomly [39] or using the potential gradient [10]. Formally, the parameter exploration can be formalized as the following two steps:

\[\mathbf{\theta}_{\mathrm{s}}=\Psi(\mathbf{\theta}_{\mathrm{s}},\ r), \tag{1}\]

\[\mathbf{\theta}_{\mathrm{s}}=\mathbf{\theta}_{\mathrm{s}}\cup\Phi(\mathbf{\theta}_{i\notin \mathbf{\theta}_{\mathrm{s}}},\ r). \tag{2}\]

where \(\Psi\) is the specific pruning criterion and \(\Phi\) is growing scheme. These metrics may vary from sparse training method to another. In addition to prune-and-grow, previous work [23; 47] dynamically activates top-K parameters during forward-pass while keeping a larger number of parameters updated in backward-pass to get rid of dense calculation of gradient. At the end of the training, sparse training can converge to a performant sparse subnetwork. Since the sparse neural networks are trained from scratch, the memory requirements and training/inference FLOPs are only a fraction of their dense counterparts.

One daunting drawback of sparse training is the resulting subnetworks are usually imbued with extremely irregular sparsity patterns, therefore, receiving very limited support from common hardware like GPU and TPU.

### Sparse Amenable Channels

Here, we introduce the most important cornerstone concept for this work - "sparse amenable channels" - which is defined as the channels whose sparsity becomes higher than their initial values caused by dynamic sparse training.

To provide empirical evidence for this interesting observation, we visualize the training dynamics of DST by monitoring two specific metrics of channels, Weight Sparsity and Unmasked Weight Magnitude, which are defined below.

**Weight Sparsity (WS)** (Quantity): Weight Sparsity directly quantizes the emergence of the Sparse Amenable Channels in quantity. Larger weight sparsity means more elements in the channel are becoming zero. Consequently, channels with fewer non-zero weights than their initial status are justified as Sparse Amenable Channels in this case.

**Unmasked Mean Magnitude (UMM)** (Quantity and Quality): Instead of solely quantitatively monitoring the weight sparsity, it is preferable to take the quality (i.e., magnitude) of the nonzero weights into consideration due to the crucial role of magnitude to dynamic sparse training [39; 10; 35]. Here, Unmasked Mean Magnitude refers to the mean magnitude of all the weights (including zero and nonzero) in the channel without considering masking. Smaller Unmasked Mean Magnitude represents the channels that come to be more sparse both in quantity and quality. Specifically, channels with fewer non-zero parameters but larger magnitudes will be excluded from the Sparse Amenable Channels. Therefore, the number of Sparse Amenable Channels justified here will be smaller than WS. We formalize these two metrics in Table 1 for a better interpretability. For comparison, we also evaluate the Masked Mean Magnitude (MMM), i.e., the mean magnitude of the non-zero weights.

We determined channels at the \(i\) training iteration are amenable if their values of Weight Sparsity are larger than their initialized values by a ratio \(v\) or their values of Unmasked Mean Magnitude are smaller than their initialized values by a ratio \(v\): \(\frac{\text{WS}_{i}-\text{WS}_{0}}{\text{WS}_{0}}>v\) or \(\frac{\text{UMM}_{0}-\text{UMM}_{i}}{\text{UMM}_{0}}>v\). In other words, we say a channel becomes \(v\) more sparse than its initial status if its \(\text{WS}_{i}\) surpasses \(\text{WS}_{0}\) by \(v\), or its UMM\({}_{i}\) is smaller than UMM\({}_{0}\) by \(v\).

Taking the most representative DST approaches SET [39] and RigL [10] as examples, we measure the number of the Sparse Amenable Channels across layers in Figure 2, with \(v\) equals 0%, 20%, 30%, and 40%. We summarize our main observations here.

Overall, we observe that a large part of channels (up to 60%) tend to be sparse amenable. While the number of amenable channels tends to decrease as \(v\) increases, there still exists around 10% \(\sim\) 40% amenable channels becoming 40% more sparse than their initializations

\begin{table}
\begin{tabular}{l|c} \hline \hline Weight Sparsity (WS) & \(1-\frac{\|\mathbf{m}\mathbf{\odot}\mathbf{\theta}\|_{0}}{\|\mathbf{\theta}\|_{0}}\) \\ \hline Unmasked Mean Magnitude (UMM) & \(\frac{\sum\|\mathbf{\theta}\|_{0}}{\|\mathbf{\theta}\|_{0}}\) \\ \hline Masked Mean Magnitude (MMM) & \(\frac{\sum|\mathbf{m}\mathbf{\odot}\mathbf{\theta}\|_{0}}{\|\mathbf{m}\mathbf{\odot}\mathbf{\theta}\|_ {0}}\) \\ \hline \hline \end{tabular}
\end{table}
Table 1: **Metrics that are introduced to measure the dynamics of the Sparse Amenable Channels.** The weight tensor and the binary mask of a channel is represented with \(\mathbf{\theta}\) and \(\mathbf{m}\), respectively. And \(\|\cdot\|_{0}\) stands for the \(\ell_{0}\)-norm.

Figure 2: The portion of sparse amenable channels justified by two metrics, the Unmasked Mean Magnitude (UMM) and the Weight Sparsity (WS), of ResNet-50 trained on CIFAR-100.

across layers. * Fewer channels are justified as sparse amenable channels using the UMM metric than WS, as we expected. * Deeper layers suffer from more amenable channels than shallow layers. * RigL tends to extract more amenable channels than SET at the very early training phase. A possible reason is that the dense gradient encourages RigL to quickly discover and fill weights to the important (non-amenable) channels compared to the random growth used in SET.

**Sparse amenable channels enjoy better prunability1 than their counterparts.** So far, we have unveiled the existence of the sparse amenable channels. It is natural to conjecture that these amenable channels can be a good indicator for channel pruning. To evaluate our conjecture, we choose the above proposed two metrics, Weight Sparsity (WS) and Unmasked Mean Magnitude (UMM), as our pruning criteria and perform a simple one-shot global channel pruning after regular DST training in comparison with their reversed metrics as well as several commonly-used principles, including random pruning [33], network slimming [37], and Masked Mean Magnitude (MMM). Channels with the highest values are pruned for WS, and the ones with the smallest values are pruned for UMM. Table 2 shows that both WS and UMM achieve good performance and UMM performs the best. Meanwhile, their reversed metrics perform no better than random pruning. Perhaps more interestingly, the resulting hybrid channel-level sparse models favorably preserve the performance of the unstructured RigL with no accuracy drop when pruned with mild channel sparsity.

Footnote 1: Prunability here refers to the accuracy drop caused by the channel removal.

In addition, we also observe the existence of "sparse amenable channel" in a broad range of settings, including ResNet-32/VGG-16 on CIFAR-100, MLP Model on CIFAR10, and ViT Small, ResNet-50 on ImageNet in Appendix. Hence, we believe that sparse amenable channels is a very general phenomenon that widely exists across different architectures and datasets.

This encouraging result confirms our conjecture and demonstrates the promising potentials of sparse amenable channels (UMM) as a strong metric to remove channels during training. In the next section, we will explain in detail how we leverage Sparsity Amenable Channels and UMM to translate the promise of unstructured sparse training to the hardware-friendly sparse neural networks.

\begin{table}
\begin{tabular}{l|c c c} \hline \hline \multirow{2}{*}{Method} & \multicolumn{3}{c}{Channel Sparsity} \\ \cline{2-4}  & 10\% & 20\% & 30\% \\ \hline Standard RigL [10] & 76.89\(\pm\)0.43 & 76.89\(\pm\)0.43 & 76.89\(\pm\)0.43 \\ \hline Random Pruning [33] & 43.01\(\pm\)9.62 & 11.74\(\pm\)2.79 & 3.79\(\pm\)1.32 \\ \hline Network Slimming [37] & 76.82\(\pm\)0.43 & 76.67\(\pm\)0.39 & 66.57\(\pm\)2.95 \\ \hline MMM & 62.31\(\pm\)8.66 & 19.34\(\pm\)14.88 & 5.32\(\pm\)2.88 \\ MMM Reverse & 5.28\(\pm\)2.52 & 2.04\(\pm\)0.30 & 1.72\(\pm\)0.40 \\ \hline WS & 76.86\(\pm\)0.43 & 76.79\(\pm\)0.39 & 62.79\(\pm\)5.42 \\ WS Reverse & 2.9\(\pm\)0.91 & 2.43\(\pm\)0.07 & 2.03\(\pm\)0.38 \\ \hline UMM & **76.88\(\pm\)0.43** & **76.90\(\pm\)0.42** & **71.77\(\pm\)2.31** \\ UMM Reverse & 3.18\(\pm\)0.48 & 2.23\(\pm\)0.26 & 1.51\(\pm\)0.35 \\ \hline \hline \end{tabular}
\end{table}
Table 2: Top-1 test accuracy (%) of various channel pruning criteria with ResNet-50 on CIFAR-100. “Reverse” refers to pruning with the reversed metric.

Methodology - Chase

Inspired by the above encouraging findings of sparse amenable channels, we introduce **Ch**ase-**a**ware dynamic **s**parse (**Chase**) in this section. We follow the widely-used sparse training framework used in [39; 10]. The technical novelty of Chase mainly lies in two aspects. On the structured sparsity level, we adopt the gradual sparsification schedule [61] to gradually remove Amenable Channels during training with smallest UMM scores. The gradual sparsification schedule provides us with a moderate sparsification schedule, favorably relieving the accuracy drop caused by aggressive channel pruning. On the unstructured sparsity level, we globally redistribute parameters based on their magnitude and gradient, which significantly strengthens the sparse training performance. The overall Pseudocode of Chase is illustrated in Algorithm 1. We provide technical details of the above components below.

**Gradual Amenable Channel Pruning.** The gradual sparsification schedule is widely-used in the unstructured sparse literature to produce strong unstructured sparse subnetworks [61; 11; 31]. We explore it to the channel pruning regime with several ad-hoc modifications. Let us denote the initial and target final channel-wise sparsity level as \(S_{i}\) and \(S_{f}\), respectively; gradual pruning starts at the training step \(t_{0}\) with pruning frequency \(\Delta T\), performing over a span of \(n\) pruning steps. The sparsity level \(S_{t}\) at pruning step \(t\) is:

\[S_{t}=S_{f}+(S_{i}-S_{f})\left(1-\frac{t-t_{0}}{n\Delta T}\right)^{3}. \tag{3}\]

We globally collect UMM (see Section 2.2 for the definition) of each channel as the pruning criterion and progressively remove the sparse amenable channels with the smallest UMM according to Eq 3. We observe that layer collapse occurs sometimes without setting layer-wise pruning constraints. To avoid layer collapse, we use \(\beta\) to control the minimum number of channels remaining in layer \(l\) to be \((1-S_{f})\cdot\beta\cdot w_{l}\), where \(w_{l}\) is the number of channels in layer \(l\). We empirically find that smaller \(\beta\) tends to yield better performance. We report more details Appendix A.2.

To maintain the overall number of parameters the same during training, we redistribute the overly pruned parameters back to the remaining channels at the next parameter grow phase using Eq 2. We find that without doing this will significantly hurt the model's performance.

**Global Parameter Exploration.** Global parameter exploration was introduced in previous arts [40; 5]. However, with the popularity of RigL [10], it is common to use a fixed set of layer-wise sparsities. Here, we revisit global parameter exploration in DST. To be specific, we globally prune parameters that have the smallest magnitudes and grow parameters with highest gradient magnitude. This small adaption brings a large performance benefit to RigL (up to 2.62% on CIFAR-100 and 1.7% on ImageNet), reported as "Chase (\(S_{c}\) = 0)" in Table 3 and Table 4.

**Soft Memory Bound.** Soft memory bound was proposed in [59], which allows the parameter growing operation happens before the parameter pruning, improving the performance at the cost of a slight increase of memory requirements and FLOPs. We borrow the idea of soft memory bound to allow parameters firstly being added to the existing parameters followed by \(\Delta T_{p}\) iteration of training, then remove the less important parameters including the newly added ones. This can avoid forcing the existing weights in the model to be removed if they are more important than newly grown weights.

After training, Chase slims down the initial "big sparse" model to a "small sparse" model with a significantly reduced number of channels. We completely remove the pruned channels in the current layer as well as the corresponding input dimensions of the next layer, so that the produced small sparse models can directly enjoy the acceleration in GPU.

## 4 Experimental Evaluation of Chase

In this section, we comprehensively evaluate Chase in comparison with the various state-of-the-art (SOTA) unstructured sparse training methods as well as the state-of-the-art channel-pruning algorithms. At last, we provide a detailed analysis of hyperparameters and perform an ablation study to evaluate the effectiveness of the components of Chase.

Our evaluation is conducted with two widely used model architectures VGG-19 [48] and ResNet-50 [15] on across various datasets including CIFAR-10/100 and ImageNet, We summarize the 

[MISSING_PAGE_FAIL:7]

[MISSING_PAGE_FAIL:8]

**Effect of the channel pruning frequency.** We also study how the channel pruning frequency \(\Delta T\) affects Chase's performance. For all experiments, we fixed the ending time \(\tau_{stop}\) for gradual amenable channel pruning as 130 epochs, the total training epochs \(\tau_{total}\) as 160 epochs and the minimum channel ratio factor as \(\beta\) as 0.5, while altering \(\Delta T\) to 1000, 4000, 8000, and 16000 iterations. We report the results in Appendix A.4. Overall, the largest \(\Delta T\) 16000 leads to worse performance. This observation is as expected, as we aim to achieve the same channel sparsity and larger \(\Delta T\) results in more removed channels in each punning operation. Consequently, larger performance degradation will be introduced during each pruning which could degrade the training stability.

**Ablation study.** In Figure 4, we study the effectiveness of different components in Chase, namely, the soft memory constraint (SM) and global parameter exploration (GE) on CIFAR-10/100 with ResNet-50 and VGG-19. We denote the RigL as our baseline, as RigL applies magnitude-based pruning and gradients-based growth like Chase. We apply the same training recipe as described in Section 4.1. Gradually amenable channel pruning safely removes 50% channels from RigL, while only suffering from minor or even no performance degradation. As for SM and GE, we found these techniques all bring universal performance improvements. Surprisingly, adding SM results in a 1.26% accuracy increase on CIFAR-100 with ResNet-50 at 98% sparsity. With GE, we can obtain a more optimal layer-wise ratio, which also consistently improves the accuracy from SM.

## 5 Related Work

Recently, as the financial and environmental costs of model training grow exponentially [50; 43], endeavors start to pursue training efficiency by investigating training sparse neural networks from scratch. Most Sparse training works can be divided into two categories, static sparse training, and dynamic sparse training. Static sparse training determines the structure of the sparse network at the initial stage of training by using certain pre-defined layer-wise sparsity ratios [38; 39; 10; 33].

Dynamic sparse training is designed to reduce the computation as well as memory footprint during the whole training phase. It trains a sparse neural network from scratch while allowing the sparse mask to be updated during training. SET [39] update sparse mask at the end of each training epoch by magnitude-based pruning and random growing. DSR [40] develops a dynamic reparameterization method that allows parameter reallocation during dynamic mask updating. DeepR [1] combines dynamic sparse parameterization with stochastic parameter updates for training. RigL [10] and

Figure 4: Ablation Study of Chase. GACP denotes gradual amenable channel pruning (50% channel sparsity), SM indicates soft memory bound, GE represents global parameter exploration.

Figure 3: Performance of Chase under different channel sparsity. For Rigl and SET, we keep the channels un-pruned as baselines.

SNFS [5] propose to uses gradient information to grow weights. ITOP [35] studies the underlying mechanism of DST and discovers that the benefits of DST come from searching across time all possible parameters. GraNet [31] introduces the concept of "pruning plasticity" and quantitatively studies the effect of pruning throughout training. MEST [59] proposes a memory-friendly training framework that could perform fast execution on edge devices. AC/DC [44] co-trains the sparse and dense models to return both accurate sparse and dense models. [23] dynamically activates top-K parameters during forward-pass while keeping a larger number of parameters updated in backward-pass to get rid of dense calculation of gradient. Top-KAST [23] preserves constant sparsity throughout training in both the forward and backward passes. Built upon Top-KAST, Powerpropagation [47] leaves the low-magnitude parameters largely unaffected by learning, achieving strong results. CHEX [19] applied dynamic prune and regrow channels strategies to avoid pruning important channels prematurely. Very recently, SLaK [32] leverages dynamic sparse training to successfully train intrinsically sparse 51\(\times\)51 kernels, which performs on par with or better than advanced Transformers. A concurrent work [21] discovers that a tiny fraction of channels (up to 4.3%) of RigL become totally sparse after training.

To enable acceleration of sparse training in practice, [34] build a truly sparse framework based on SciPy sparse matrices [55] that enables efficient sparse evolutionary training [39] in CPU. [6] fulfill group-wise DST on Graphcore IPU [24] and demonstrate its efficacy on pre-training BERT. Moreover, some previous work develops sparse kernels [12; 9] to directly support unstructured sparsity in GPU. DeepSparse [27] deploys large-scale BERT-level and YOLO-level sparse models on CPU.

## 6 Conclusions

In this paper, we have presented **Chase**, a new sparse training approach that seamlessly translates the promise of unstructured sparsity into channel-level sparsity, while performing on par or even often better than state-of-the-art DST approaches. Extensive experiments across various network architectures including VGG-19 and ResNet-50 on CIFAR-10/100 and ImageNet demonstrated Chase can achieve better performance with 1.2\(\times\)\(\sim\) 1.7\(\times\) real inference speedup on common GPU devices while performing on par or even better than unstructured SoTA. The results in this paper strongly challenge the common belief that sparse training typically suffers from limited acceleration support in common hardware, opening doors for future work to build more efficient sparse neural networks.

## 7 Acknowledgement

S. Liu and Z. Wang are in part supported by the NSF AI Institute for Foundations of Machine Learning (IFML). Part of this work used the Dutch national e-infrastructure with the support of the SURF Cooperative using grant no. NWO2021.060, EINF-2694 and EINF-2943/L1. It is also supported by the NSF CCF-2312616. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF.

## References

* [1] G. Bellec, D. Kappel, W. Maass, and R. Legenstein. Deep rewiring: Training very sparse deep networks. In _International Conference on Learning Representations_, 2018.
* [2] T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam, G. Sastry, A. Askell, S. Agarwal, A. Herbert-Voss, G. Krueger, T. Henighan, R. Child, A. Ramesh, D. Ziegler, J. Wu, C. Winter, C. Hesse, M. Chen, E. Sigler, M. Litwin, S. Gray, B. Chess, J. Clark, C. Berner, S. McCandlish, A. Radford, I. Sutskever, and D. Amodei. Language models are few-shot learners. In H. Larochelle, M. Ranzato, R. Hadsell, M. F. Balcan, and H. Lin, editors, _Advances in Neural Information Processing Systems_, volume 33, pages 1877-1901. Curran Associates, Inc., 2020.
* [3] T. Chen, X. Chen, X. Ma, Y. Wang, and Z. Wang. Coarsening the granularity: Towards structurally sparse lottery tickets. _arXiv preprint arXiv:2202.04736_, 2022.
* [4] T.-W. Chin, R. Ding, C. Zhang, and D. Marculescu. Legr: Filter pruning via learned global ranking. 2019.
** [5] T. Dettmers and L. Zettlemoyer. Sparse networks from scratch: Faster training without losing performance. _arXiv preprint arXiv:1907.04840_, 2019.
* [6] A. Dietrich, F. Gressmann, D. Orr, I. Chelombiev, D. Justus, and C. Luschi. Towards structured dynamic sparse pre-training of bert. _arXiv preprint arXiv:2108.06277_, 2021.
* [7] X. Dong and Y. Yang. Network pruning via transformable architecture search. _Advances in Neural Information Processing Systems_, 32, 2019.
* [8] A. Dosovitskiy, L. Beyer, A. Kolesnikov, D. Weissenborn, X. Zhai, T. Unterthiner, M. Dehghani, M. Minderer, G. Heigold, S. Gelly, et al. An image is worth 16x16 words: Transformers for image recognition at scale. _arXiv preprint arXiv:2010.11929_, 2020.
* [9] E. Elsen, M. Dukhan, T. Gale, and K. Simonyan. Fast sparse convnets. In _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pages 14629-14638, 2020.
* [10] U. Evci, T. Gale, J. Menick, P. S. Castro, and E. Elsen. Rigging the lottery: Making all tickets winners. In _International Conference on Machine Learning_, pages 2943-2952. PMLR, 2020.
* [11] T. Gale, E. Elsen, and S. Hooker. The state of sparsity in deep neural networks. _arXiv preprint arXiv:1902.09574_, 2019.
* [12] T. Gale, M. Zaharia, C. Young, and E. Elsen. Sparse gpu kernels for deep learning. _arXiv preprint arXiv:2006.10901_, 2020.
* [13] E. Garcia-Martin, C. F. Rodrigues, G. Riley, and H. Grahn. Estimation of energy consumption in machine learning. _Journal of Parallel and Distributed Computing_, 134:75-88, 2019.
* [14] S. Gray, A. Radford, and D. P. Kingma. Gpu kernels for block-sparse weights. _arXiv preprint arXiv:1711.09224_, 3:2, 2017.
* [15] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 770-778, 2016.
* [16] Y. He, P. Liu, Z. Wang, Z. Hu, and Y. Yang. Filter pruning via geometric median for deep convolutional neural networks acceleration. In _Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR)_, 2019.
* [17] Y. He, X. Zhang, and J. Sun. Channel pruning for accelerating very deep neural networks. In _Proceedings of the IEEE International Conference on Computer Vision_, pages 1389-1397, 2017.
* [18] J. Hestness, S. Narang, N. Ardalani, G. Diamos, H. Jun, H. Kianinejad, M. Patwary, M. Ali, Y. Yang, and Y. Zhou. Deep learning scaling is predictable, empirically. _arXiv preprint arXiv:1712.00409_, 2017.
* [19] Z. Hou, M. Qin, F. Sun, X. Ma, K. Yuan, Y. Xu, Y.-K. Chen, R. Jin, Y. Xie, and S.-Y. Kung. Chex: Channel exploration for cnn model compression. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 12287-12298, 2022.
* [20] I. Hubara, B. Chmiel, M. Island, R. Banner, S. Naor, and D. Soudry. Accelerated sparse neural training: A provable and efficient method to find n: M transposable masks. _arXiv preprint arXiv:2102.08124_, 2021.
* [21] E. Iofinova, A. Peste, M. Kurtz, and D. Alistarh. How well do sparse imagenet models transfer? In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 12266-12276, 2022.
* [22] A. K. Jaiswal, H. Ma, T. Chen, Y. Ding, and Z. Wang. Training your sparse neural network better with any mask. In _International Conference on Machine Learning_, pages 9833-9844. PMLR, 2022.

* [23] S. Jayakumar, R. Pascanu, J. Rae, S. Osindero, and E. Elsen. Top-kast: Top-k always sparse training. _Advances in Neural Information Processing Systems_, 33:20744-20754, 2020.
* [24] Z. Jia, B. Tillman, M. Maggioni, and D. P. Scarpazza. Dissecting the graphcore ipu architecture via microbenchmarking. _arXiv preprint arXiv:1912.03413_, 2019.
* [25] P. Jiang, L. Hu, and S. Song. Exposing and exploiting fine-grained block structures for fast and accurate sparse training. In _Advances in Neural Information Processing Systems_, 2022.
* [26] J. Kaplan, S. McCandlish, T. Henighan, T. B. Brown, B. Chess, R. Child, S. Gray, A. Radford, J. Wu, and D. Amodei. Scaling laws for neural language models. _arXiv preprint arXiv:2001.08361_, 2020.
* [27] M. Kurtz, J. Kopinsky, R. Gelashvili, A. Matveev, J. Carr, M. Goin, W. Leiserson, S. Moore, B. Nell, N. Shavit, and D. Alistarh. Inducing and exploiting activation sparsity for fast inference on deep neural networks. In H. D. III and A. Singh, editors, _Proceedings of the 37th International Conference on Machine Learning_, volume 119 of _Proceedings of Machine Learning Research_, pages 5533-5543, Virtual, 13-18 Jul 2020. PMLR.
* [28] N. Lee, T. Ajanthan, and P. H. Torr. Snip: Single-shot network pruning based on connection sensitivity. _arXiv preprint arXiv:1810.02340_, 2018.
* [29] M. Lin, R. Ji, Y. Wang, Y. Zhang, B. Zhang, Y. Tian, and L. Shao. Hrank: Filter pruning using high-rank feature map. In _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pages 1529-1538, 2020.
* [30] L. Liu, S. Zhang, Z. Kuang, A. Zhou, J.-H. Xue, X. Wang, Y. Chen, W. Yang, Q. Liao, and W. Zhang. Group fisher pruning for practical network compression. In _International Conference on Machine Learning_, pages 7021-7032. PMLR, 2021.
* [31] S. Liu, T. Chen, X. Chen, Z. Atashgahi, L. Yin, H. Kou, L. Shen, M. Pechenizkiy, Z. Wang, and D. C. Mocanu. Sparse training via boosting pruning plasticity with neurodegeneration. _Advances in Neural Information Processing Systems_, 34:9908-9922, 2021.
* [32] S. Liu, T. Chen, X. Chen, X. Chen, Q. Xiao, B. Wu, M. Pechenizkiy, D. Mocanu, and Z. Wang. More convnets in the 2020s: Scaling up kernels beyond 51x51 using sparsity. _arXiv preprint arXiv:2207.03620_, 2022.
* [33] S. Liu, T. Chen, X. Chen, L. Shen, D. C. Mocanu, Z. Wang, and M. Pechenizkiy. The unreasonable effectiveness of random pruning: Return of the most naive baseline for sparse training. _arXiv preprint arXiv:2202.02643_, 2022.
* [34] S. Liu, D. C. Mocanu, A. R. R. Matavalam, Y. Pei, and M. Pechenizkiy. Sparse evolutionary deep learning with over one million artificial neurons on commodity hardware. _Neural Computing and Applications_, 33(7):2589-2604, 2021.
* [35] S. Liu, L. Yin, D. C. Mocanu, and M. Pechenizkiy. Do we actually need dense over-parameterization? in-time over-parameterization in sparse training. In _Proceedings of the 39th International Conference on Machine Learning_, pages 6989-7000. PMLR, 2021.
* [36] Z. Liu, H. Hu, Y. Lin, Z. Yao, Z. Xie, Y. Wei, J. Ning, Y. Cao, Z. Zhang, L. Dong, et al. Swin transformer v2: Scaling up capacity and resolution. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 12009-12019, 2022.
* [37] Z. Liu, J. Li, Z. Shen, G. Huang, S. Yan, and C. Zhang. Learning efficient convolutional networks through network slimming. In _Proceedings of the IEEE International Conference on Computer Vision_, pages 2736-2744, 2017.
* [38] Z. Mariet and S. Sra. Diversity networks: Neural network compression using determinantal point processes. In _International Conference on Learning Representations_, 2016.
* [39] D. C. Mocanu, E. Mocanu, P. Stone, P. H. Nguyen, M. Gibescu, and A. Liotta. Scalable training of artificial neural networks with adaptive sparse connectivity inspired by network science. _arXiv:1707.04780. Nature communications._, 9(1):2383, 2018.

* [40] H. Mostafa and X. Wang. Parameter efficient training of deep convolutional neural networks by dynamic sparse reparameterization. _International Conference on Machine Learning_, 2019.
* [41] S. Narang, E. Elsen, G. Diamos, and S. Sengupta. Exploring sparsity in recurrent neural networks. _arXiv preprint arXiv:1704.05119_, 2017.
* [42] Nvidia. Nvidia a100 tensor core gpu architecture. _[https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/nvidia-ampere-architecture-whitepaper,pdf_](https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/nvidia-ampere-architecture-whitepaper,pdf_), 2020.
* [43] D. Patterson, J. Gonzalez, Q. Le, C. Liang, L.-M. Munguia, D. Rothchild, D. So, M. Texier, and J. Dean. Carbon emissions and large neural network training. _arXiv preprint arXiv:2104.10350_, 2021.
* [44] A. Peste, E. Iofinova, A. Vladu, and D. Alistarh. Ac/dc: Alternating compressed/decompressed training of deep neural networks. _Advances in Neural Information Processing Systems_, 34:8557-8570, 2021.
* [45] J. Pool and C. Yu. Channel permutations for n:m sparsity. In M. Ranzato, A. Beygelzimer, Y. Dauphin, P. Liang, and J. W. Vaughan, editors, _Advances in Neural Information Processing Systems_, volume 34, pages 13316-13327. Curran Associates, Inc., 2021.
* [46] M. A. Rumi, X. Ma, Y. Wang, and P. Jiang. Accelerating sparse cnn inference on gpus with performance-aware weight pruning. In _Proceedings of the ACM International Conference on Parallel Architectures and Compilation Techniques_, pages 267-278, 2020.
* [47] J. Schwarz, S. Jayakumar, R. Pascanu, P. E. Latham, and Y. Teh. Powerpropagation: A sparsity inducing weight reparameterisation. _Advances in Neural Information Processing Systems_, 34:28889-28903, 2021.
* [48] K. Simonyan and A. Zisserman. Very deep convolutional networks for large-scale image recognition. _International Conference on Learning Representations_, 2014.
* [49] A. Srivastava, A. Rastogi, A. Rao, A. A. M. Shoeb, A. Abid, A. Fisch, A. R. Brown, A. Santoro, A. Gupta, A. Garriga-Alonso, et al. Beyond the imitation game: Quantifying and extrapolating the capabilities of language models. _arXiv preprint arXiv:2206.04615_, 2022.
* [50] E. Strubell, A. Ganesh, and A. McCallum. Energy and policy considerations for deep learning in nlp. _arXiv preprint arXiv:1906.02243_, 2019.
* [51] X. Su, S. You, T. Huang, F. Wang, C. Qian, C. Zhang, and C. Xu. Locally free weight sharing for network width search. _arXiv preprint arXiv:2102.05258_, 2021.
* [52] Y. Sui, M. Yin, Y. Xie, H. Phan, S. Aliari Zonouz, and B. Yuan. Chip: Channel independence-based pruning for compact neural networks. _Advances in Neural Information Processing Systems_, 34:24604-24616, 2021.
* [53] H. Tanaka, D. Kunin, D. L. Yamins, and S. Ganguli. Pruning neural networks without any data by iteratively conserving synaptic flow. _Advances in Neural Information Processing Systems. arXiv:2006.05467_, 2020.
* [54] Y. Tang, Y. Wang, Y. Xu, D. Tao, C. Xu, C. Xu, and C. Xu. Scop: Scientific control for reliable neural network pruning. _Advances in Neural Information Processing Systems_, 33:10936-10947, 2020.
* [55] P. Virtanen, R. Gommers, T. E. Oliphant, M. Haberland, T. Reddy, D. Cournapeau, E. Burovski, P. Peterson, W. Weckesser, J. Bright, S. J. van der Walt, M. Brett, J. Wilson, K. J. Millman, N. Mayorov, A. R. J. Nelson, E. Jones, R. Kern, E. Larson, C. J. Carey, I. Polat, Y. Feng, E. W. Moore, J. VanderPlas, D. Laxalde, J. Perktold, R. Cimrman, I. Henriksen, E. A. Quintero, C. R. Harris, A. M. Archibald, A. H. Ribeiro, F. Pedregosa, P. van Mulbregt, and SciPy 1.0 Contributors. SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python. _Nature Methods_, 17:261-272, 2020.

* [56] C. Wang, G. Zhang, and R. Grosse. Picking winning tickets before training by preserving gradient flow. In _International Conference on Learning Representations_, 2020.
* [57] Z. You, K. Yan, J. Ye, M. Ma, and P. Wang. Gate decorator: Global filter pruning method for accelerating deep convolutional neural networks. _Advances in neural information processing systems_, 32, 2019.
* [58] J. Yu and T. Huang. Autoslim: Towards one-shot architecture search for channel numbers. _arXiv preprint arXiv:1903.11728_, 2019.
* [59] G. Yuan, X. Ma, W. Niu, Z. Li, Z. Kong, N. Liu, Y. Gong, Z. Zhan, C. He, Q. Jin, et al. Mest: Accurate and fast memory-economic sparse training framework on the edge. _Advances in Neural Information Processing Systems_, 34:20838-20850, 2021.
* [60] A. Zhou, Y. Ma, J. Zhu, J. Liu, Z. Zhang, K. Yuan, W. Sun, and H. Li. Learning n:m fine-grained structured sparse neural networks from scratch. In _International Conference on Learning Representations_, 2021.
* [61] M. H. Zhu and S. Gupta. To prune, or not to prune: Exploring the efficacy of pruning for model compression, 2018.

Remaining Experimental Analysis

### Effect of the Initial Sparsity

Chase starts from a subnetwork with unstructured sparsity to produce channel-level sparsity during one end-to-end training process. Here we fix the target channel-level sparsity \(S_{c}\) as 0.4 and study how the initialized unstructured sparsity impacts the model performance. The results are reported in Figure 5. It could be seen that, in general, initialization with more parameters leads to better performance. Counter-intuitively, the best accuracy is achieved using \(0.6\) unstructured sparsity, which is \(0.26\%\) higher than initialized as a dense model.

### Effect of the Minimum Channel Ratio Limitation \(\beta\)

We alter the ratio of the minimum channel ratio \(\beta\) to 0.2, 0.5, 0.8 and show the performance in Table 6. The channel pruning frequency \(\Delta T\) is fixed at 4000 iterations. Apparently, large ratio \(\beta=0.8\) archives the worst performance while \(\beta=0.2\) outperforms other settings in 4 out of 6 cases. In view of the fact that smaller \(\beta\) provide more channel exploration space.

### Ablation of Gradual Amenable Channel Pruning

Here, we perform a more university ablation study of Gradual Amenable Channel Pruning (GACP) on CIFAR10/100, ResNet-50 and VGG-19, with RigL and SET. The results are reported in Table 7.Surprisingly, GACP brings performance increases in most cases. To be specific, we found that GACP could boost the performance of RigL in 9 out of 12 cases and output SET in 10 out of 12 cases with just 50% remaining channels.

### Effect of the Channel Pruning Frequency

In this Appendix, we study how the channel pruning frequency \(\Delta T\) affects Chase's performance. For all experiments, we fixed the ending time \(\tau_{stop}\) for gradual amenable channel pruning as 130 epochs, the total training epochs \(\tau_{total}\) as 160 epochs and the minimum channel ratio factor as \(\beta\) as 0.5, while altering \(\Delta T\) to 1000, 4000, 8000, and 16000 iterations. We report the results in Table 8. Overall, the largest \(\Delta T\) 16000 leads to worse performance. This observation is as expected, as we aim to achieve the same channel sparsity and larger \(\Delta T\) results in more removed channels in each

\begin{table}
\begin{tabular}{l c c c} \hline \hline \multirow{2}{*}{**Minimum layer ratio**} & \multicolumn{3}{c}{Sparity} \\ \cline{2-4}  & 90\% & 95\% & 98\% \\ \hline \multicolumn{4}{c}{VGG-19} \\ \hline
0.20 & **73.45\(\pm\)0.27** & **72.98\(\pm\)0.32** & 71.69\(\pm\)0.21 \\
0.50 & 73.16\(\pm\)0.06 & 72.39\(\pm\)0.17 & **71.74\(\pm\)0.06** \\
0.80 & 72.26\(\pm\)0.24 & 72.20\(\pm\)0.27 & 71.28\(\pm\)0.26’ \\ \hline \multicolumn{4}{c}{ResNet-50} \\ \hline
0.20 & 77.47\(\pm\)0.40 & **77.43\(\pm\)0.36** & **76.68\(\pm\)0.27** \\
0.50 & **77.54\(\pm\)0.40** & 77.31\(\pm\)0.34 & 76.64\(\pm\)0.26 \\
0.80 & 76.76\(\pm\)0.66 & 77.26\(\pm\)0.73 & 76.67\(\pm\)0.29 \\ \hline \hline \end{tabular}
\end{table}
Table 6: Test accuracy (%) on CIFAR-100 of Chase at 50% channel-wise sparsity using different minimum layer limitation factor \(\beta\). The best results are marked in bold.

Figure 5: Performance under different initial unstructured sparsity on ResNet-18, CIFAR-100.

[MISSING_PAGE_FAIL:16]

Real Inference Speedups

We report the real inference latency and throughput of Chase on various parity in Table 12.

## Appendix D Comparisons with SOTA Channel Pruning Methods

We further compare Chase with various state-of-the-art channel pruning approaches in Table 13. It is encouraging to see that Chase performs on par with state-of-the-art SOTA channel pruning approaches, such as Group Fisher [30], CafeNet-R [51], and CHIP [52], without the need for the costly dense pretraining step. The implementation details are reported in Table 13.

## Appendix E

\begin{table}
\begin{tabular}{l c c c} \hline \hline Methods & FLOPs & Top-1 & Epochs \\ \hline GBN [57] & 2.4G & 76.2\% & 350 \\ LEGR [4] & 2.4G & 75.7\% & - \\ FFGM [16] & 2.4G & 75.6\% & 200 \\ TAS [7] & 2.3G & 76.2\% & 240 \\ Hrank [29] & 2.3G & 75.0\% & 570 \\ SCOP [54] & 2.2G & 76.0\% & 230 \\ CHIP [52] & 2.2G & 76.3\% & - \\ Group Fisher [30] & 2.0G & 76.4\% & - \\ AutoSlim [58] & 2.0G & 75.6\% & - \\ Uniform & 2.0G & 75.1\% & 300 \\ Random & 2.0G & 74.6\% & 300 \\ CafeNet-R [51] & 2.0G & 76.5\% & 300 \\
**Case-1** & 1.5G & 76.6\% & 250 \\ \hline \hline Uniform & 1.0G & 73.1\% & 300 \\ Random & 1.0G & 72.2\% & 300 \\ Group Fisher [30] & 1.0G & 73.9\% & - \\ CafeNet-R [51] & 1.0G & 74.9\% & 300 \\ CafeNet-E [51] & 1.0G & 75.3\% & 300 \\
**Chase-2** & 0.9G & 75.7\% & 250 \\ \hline \hline \end{tabular}
\end{table}
Table 13: Comparison with state-of-the-art channel pruning methods on popular benchmark: ResNet-50 on ImageNet.

\begin{table}
\begin{tabular}{l c c c c c} \hline \hline Method & \(s_{p}\) & \(S_{c}\) & Accuracy (\%) (\(\uparrow\)) & Throughput (\(\uparrow\)) & Latency (ms) (\(\downarrow\)) \\ \hline Chase & 0.9 & 0.2 & **74.40** & 69.30 & 30.89 \\ Chase & 0.9 & 0.3 & 74.35 & 70.07 & 30.39 \\ Chase & 0.9 & 0.4 & 74.03 & 71.54 & 30.13 \\ Chase & 0.9 & 0.5 & 73.39 & 78.19 & 27.55 \\ Chase & 0.9 & 0.6 & 72.85 & 82.98 & 26.09 \\ Chase & 0.9 & 0.7 & 71.98 & **86.26** & **25.10** \\ \hline Chase (prune skip) & 0.9 & 0.2 & **74.15** & 72.57 & 29.38 \\ Chase (prune skip) & 0.9 & 0.3 & 74.06 & 78.30 & 27.33 \\ Chase (prune skip) & 0.9 & 0.4 & 73.24 & 87.38 & 24.53 \\ Chase (prune skip) & 0.9 & 0.5 & 72.71 & 99.97 & 21.55 \\ Chase (prune skip) & 0.9 & 0.6 & 71.62 & 107.99 & 20.03 \\ Chase (prune skip) & 0.9 & 0.7 & 67.15 & **123.30** & **17.56** \\ \hline Chase & 0.8 & 0.2 & **75.82** & 66.39 & 32.05 \\ Chase & 0.8 & 0.3 & 75.62 & 69.30 & 30.81 \\ Chase & 0.8 & 0.4 & 75.27 & 73.32 & 29.22 \\ Chase & 0.8 & 0.5 & 74.76 & 76.68 & 28.05 \\ Chase & 0.8 & 0.6 & 73.77 & 80.51 & 26.81 \\ Chase & 0.8 & 0.7 & 72.88 & **86.12** & **25.15** \\ \hline Chase (prune skip) & 0.8 & 0.2 & **75.27** & 72.47 & 29.38 \\ Chase (prune skip) & 0.8 & 0.3 & 74.96 & 78.60 & 27.20 \\ Chase (prune skip) & 0.8 & 0.4 & 74.58 & 87.91 & 24.38 \\ Chase (prune skip) & 0.8 & 0.5 & 73.53 & 98.43 & 21.86 \\ Chase (prune skip) & 0.8 & 0.6 & 71.70 & 104.82 & 20.58 \\ Chase (prune skip) & 0.8 & 0.7 & 67.53 & **123.46** & **17.57** \\ \hline \hline \end{tabular}
\end{table}
Table 12: Real inference latency and throughput of Chase on the ResNet-50/ImageNet benchmark. The best results are marked in bold.

Existence of Sparse Amenable Channel in Various Settings

To demonstrate the broad prevalence of sparse amenable channels across diverse architectures and datasets, we have evaluated their ratio in multiple scenarios, including ResNet-32/VGG-16 on CIFAR-100, ResNet-50/ViT-small on ImageNet, an MLP model on CIFAR-10.

The MLP model consists of two hidden layers, each with 512 neurons. For the ViT small model, we focus our attention on the neurons within the MLP layers that exhibit suitability for pruning. In all cases, the sparse amenable channels are identified by _Unmasked Mean Magnitude_ (UMM), with the threshold, \(v\), set to 20%.

The results, shown in the corresponding tables, underline the consistent presence of sparse amenable channels across various architectures and datasets, reinforcing the argument that the phenomenon is both significant and widespread.

\begin{table}
\begin{tabular}{l l l l l l} \hline Settings & Layer & 10 Epoch & 20 Epoch & 40 Epoch & 100 Epoch \\ \hline ResNet-32/CIFAR-100 & Blocks\_3.5conv1 & 0.23 & 0.38 & 0.38 & 0.63 \\  & blocks\_6.6conv1 & 0.16 & 0.19 & 0.28 & 0.32 \\ \hline VGG-16/CIFAR-100 & features\_7 & 0.11 & 0.22 & 0.30 & 0.39 \\  & features\_7 & 0.19 & 0.20 & 0.17 & 0.65 \\ \hline \end{tabular} \begin{tabular}{l l l l l l} \hline Settings & Layer & 5 Epoch & 10 Epoch & 20 Epoch & 50 Epoch \\ \hline ResNet-50/ImageNet & layer3.1.conv2 & 0.14 & 0.18 & 0.21 & 0.33 \\  & layer3.1.conv1 & 0.44 & 0.49 & 0.49 & 0.56 \\ \hline ViT-Small/ImageNet & blocks\_0.0m\_fc1 & 0.11 & 0.14 & 0.15 & 0.31 \\  & blocks\_8.m\_fp1 & 0.20 & 0.22 & 0.21 & 0.33 \\ \hline \end{tabular} 
\begin{tabular}{l l l l l l} \hline Settings & Layer & 5 Epoch & 10 Epoch & 20 Epoch & 50 Epoch \\ \hline MLP Model/Cifar10 & fc1 & 0.21 & 0.21 & 0.30 & 0.37 \\  & fc2 & 0.36 & 0.42 & 0.49 & 0.63 \\ \hline \end{tabular}
\end{table}
Table 14: Sparse amenable channel portion during training on various settingsAddressing the Memory Limitation of Global Parameter Exploration

During global parameter exploration, directly loading all the parameters for gradients/magnitude sorting is memory-consuming. Inspired by [40], we layer-wisely select parameters with the largest gradients for growth and the lowest magnitude for pruning by an adaptive global threshold \(H\), until reaching the target sparsity. \(H\) is determined by a set point negative feedback loop to maintain an approximate parameter amount during each reallocation step, as reported below.

```
Input: Network with sparse weight \(\mathbf{\theta}_{s}\), target sparsity \(s_{p}\), current sparsity \(s_{t}\), prune magnitude threshold \(H_{p}\), grow gradient threshold \(H_{g}\), threshold incremental value \(H_{i}\), sparsity tolerance \(s_{\delta}\) Output: A sparse model \(\mathbf{\theta}_{s}\) satisfying the target sparsity \(s_{p}\).  Initialize a grow threshold \(H_{g}\)\(\triangleright\)Begin global parameter growing whilenot\(s_{p}+s_{\delta}>s_{t}>s_{p}-s_{\delta}\)do for each sparse tensor \(\mathbf{\theta}_{s}^{\prime}\) of layer \(l\)do \((\mathbf{\theta}_{s}^{\prime},g_{l})\leftarrow\texttt{grow\_by\_threshold}(\mathbf{ \theta}_{s}^{l},H_{g})\)\(\triangleright\)\(g_{l}\) is the number of pruned weights in layer \(l\) \(G\leftarrow\sum_{i}g_{i}\), \(s_{t}\leftarrow\texttt{calculate\_current\_sparsity}(G)\)\(\triangleright\)\(G\) is total number of grown weights in all layers if\(s_{t}<s_{p}-s_{\delta}\)then \(H_{g}\leftarrow(H_{g}+H_{i})\) if\(s_{t}>s_{p}+s_{\delta}\)then \(H_{g}\leftarrow(H_{g}-H_{i})\)\(\triangleright\) Update the grow threshold \(H_{g}\leftarrow(H_{g}-H_{i})\)\(\triangleright\) Begin global parameter pruning whilenot\(s_{p}+s_{\delta}>s_{t}>s_{p}-s_{\delta}\)do for each sparse tensor \(\mathbf{\theta}_{s}^{l}\) of layer \(l\)do \((\mathbf{\theta}_{s}^{l},p_{l})\leftarrow\texttt{prune\_by\_threshold}(\mathbf{ \theta}_{s}^{l},H_{p})\)\(\triangleright\)\(p_{l}\) is the number of pruned weights in layer \(l\) \(P\leftarrow\sum_{i}p_{l}\), \(s_{t}\leftarrow\texttt{calculate\_current\_sparsity}(P)\)\(\triangleright\)\(P\) is the total number of pruned weights in all layers if\(s_{t}<s_{p}-s_{\delta}\)then \(H_{p}\leftarrow(H_{p}-H_{i})\)if\(s_{t}>s_{p}+s_{\delta}\)then \(H_{p}\leftarrow(H_{p}+H_{i})\)\(\triangleright\) Update the prune threshold
```

**Algorithm 2**Overview of Global Parameter Exploration

[MISSING_PAGE_EMPTY:20]