# L2T-DLN: Learning to Teach with

Dynamic Loss Network

 Zhaoyang Hai \({}^{1,}\)1, Liyuan Pan \({}^{1,2,*,\dagger}\), Xiabi Liu \({}^{1,*,\dagger}\), Zhengzheng Liu\({}^{1}\), Mirna Yunita\({}^{1}\)

\({}^{1}\) School of Computer Science and Technology, \({}^{2}\) BIT Special Zone

Beijing Institute of Technology

Beijing, China, 100081

{haizhaoyang, liyuan.pan, liuxiabi, liuzhengzheng, mirnayunita}@bit.edu.cn

Equal contribution. \({}^{\dagger}\) Corresponding author.

Footnote 1: footnotemark:

###### Abstract

With the concept of teaching being introduced to the machine learning community, a teacher model start using dynamic loss functions to teach the training of a student model. The dynamic intends to set adaptive loss functions to different phases of student model learning. In existing works, the teacher model 1) merely determines the loss function based on the present states of the student model, _i.e._, disregards the experience of the teacher; 2) only utilizes the states of the student model, _e.g._, training iteration number and loss/accuracy from training/validation sets, while ignoring the states of the loss function. In this paper, we first formulate the loss adjustment as a temporal task by designing a teacher model with memory units, and, therefore, enables the student learning to be guided by the experience of the teacher model. Then, with a dynamic loss network, we can additionally use the states of the loss to assist the teacher learning in enhancing the interactions between the teacher and the student model. Extensive experiments demonstrate our approach can enhance student learning and improve the performance of various deep models on real-world tasks, including classification, objective detection, and semantic segmentation scenarios.

## 1 Introduction

In pedagogy study, teachers refine their teaching ability based on student feedback, _e.g._, exam scores. Students benefited from the enhanced ability of teachers and then achieved high scores on the exam. Both teachers and students are developed in this interaction iteratively and constantly [27, 28, 29, 17]. The phenomenon is known as teaching-learning transaction [5], or learning to teach (L2T) in machine learning [7].

In L2T, a teacher model uses a dynamic loss function, which acts as an exam paper, to train and optimize the student model (as shown in Figure 1(a)). However, existing approaches adjust the loss functions by only employing a simple feedforward network as the teacher model, and neglecting the temporal nature of loss function adjustment. The disregarding of the experience accumulation for teachers (_e.g._, the ability to analyze all previous exam scores for a student), and, therefore, limits the potential of L2T. In addition, in previous works, the teacher model only focuses on the state of the student model, _i.e._, training iteration number [37], training/validation accuracy [37, 16], training/validation loss[2], and the output of the student model[16, 2, 23]. However, the states of loss functions (_e.g._, the gradients concerning loss functions) are neglected, which dilutes the benefit of improving the exam paper. In other words, the teacher needs to consider that the question changes of an exam paper also influence the performance of a student.

In this paper, we propose an L2T framework with a Dynamic Loss Network (L2T-DLN), to address the above-mentioned issue (in Figure 1(b)). First, we adopt a Long-Short Term Memory (LSTM) model as the teacher and design a differentiable three-stage asynchronous optimization strategy. Then, to ensure the teacher model can be optimized with the state of loss functions, we design a Dynamic Loss Network (DLN) instead of using the dynamic loss function (DLF). Specifically, we start by optimizing the student model through backpropagation in the first step with a fixed DLN as the loss function. Then, compute the gradient of the validation error of the student model with respect to the DLN. Next, we input this gradient into the teacher model, and the output of the teacher model is used to update the DLN. To achieve the updating of the teacher model, we perform another round of student learning with the updated DLN and obtain the gradient of the validation error of the updated student with respect to the teacher model. Moreover, we analyze how L2T-DLN exploits the negative curvature by using a special alternating gradient descent (AGD) sequence, achieving a differentiable asynchronous optimization.

In summary, the usage of the gradient concerning DLN and the LSTM teacher model both ensure the teacher model captures and maintains short- and long-term temporal information, which can further improve the performance of loss function teaching, compared to feedforward teachers [37; 16; 23].

Our main contributions are 1) design a dynamic loss network-based teaching strategy to let the teacher model learn optimized by the gradient of DLN; 2) use LSTM as the teacher model to update the DLN with the temporal information of the teacher model; and 3) a convergence analysis of the approach, which is treated as a special AGD sequence and has the potential to escape strict saddle points. We conduct extensive experiments on a wide range of loss functions and tasks to demonstrate the effectiveness of our approach.

## 2 Related work

Recent work by L2T [7] provides a comprehensive view of teaching for machine learning, encompassing aspects such as training data teaching, loss function teaching, and hypothesis teaching. In contrast to previous literature on machine teaching [41; 25; 10; 38], L2T breaks the strong assumption regarding the existence of an optimal off-the-shelf student model [37]. Instead, L2T employs automatic techniques to reduce the reliance on prior human knowledge, aligning with principles such as learning to learn and meta-learning [34; 36; 42; 1]. The recent focus of L2T has been mainly on loss function teaching [37; 16; 23; 2] and training data teaching [7; 25; 35; 32; 8].

Figure 1: Illustration of the common L2T and our L2T-DLN framework. (a) The common framework in existing L2T works. (b) The framework of our L2T-DLN. Both (a) and (b) contain three models: a student model \(S_{\theta}\) with the parameter \(\theta\), a dynamic loss model \(L^{m}\), and a teacher model \(T_{\varphi}\) with the parameter \(\varphi\). Here, \(m\) denotes the \(m^{th}\) iteration, \(x\) and \(y\) denote the input data of the student and corresponding label, respectively. Different from existing works that only use feedforward networks, we employ a network with a memory unit to enhance the temporal analyzing ability of the teacher. Then, we use the gradient \(\nabla\phi\) concerning \(L^{m}_{\phi}\) by designing a dynamic loss network to provide more information to the teacher model, compared to the state of the student \(\tau\).

During the training of a student model, there is a variation in the distribution of predictions where earlier in the training the distribution tends to differ from that at convergence. Consequently, an adaptive loss function is crucial. Existing works [37; 16; 23; 2] formulate the loss adjustment as some independent tasks by performing a multi-layer perceptron (MLP) as the teacher model. The differences lie in the representation of dynamic loss functions and the input information of teacher models. The representation of the dynamic loss function includes the variation of handcrafted loss functions [37; 23] and neural network [16; 2]. The input information contains the training iteration number [37; 16], training/validation accuracy [37; 16], training/validation loss[2], and the output of the student model[16; 2; 23]. In detail, Wu et al. [37] trains a neural network with an attention mechanism to generate a coefficient matrix between the prediction of the student and the ground truth. Huang et al. [16] constructs the teaching-learning framework with reinforcement learning. Their teacher also employs an MLP and generates the policy gradient for a loss network. Liu and Lai [23] utilizes a teacher model to guide the selection and combination of handcrafted loss functions. Baik et al. [2] performs a teacher to generate two weights for each layer of a loss network, and then updates the parameters of the loss network by affine transformation with the two weights.

Assigning weights to different data points has been widely investigated in the literature, where the weights can be either continuous [18] or binary [7]. In detail, Fan et al. [7] proposed a learning paradigm where a teacher model guides the training of the student model. Based on the collected information, the teacher model provides signals to the student model, which can be the weights of training data. Liu et al. [25] leveraged a teaching way to speed up the training, where the teacher model selects the training data balancing the trade-off between the difficulty and usefulness of the data. Fan et al. [8] inputs internal states of the student model, _e.g._, feature maps of the student model, to the teacher model and obtains the output of the teacher as the weight for corresponding training data.

## 3 Methodology

In this section, we overview our L2T-DLN in Section 3.1, introduce the corresponding framework for student learning in Section 3.2, describe the DLN learning framework in Section 3.3, and discuss teacher learning in Section 3.4.

### Overview

Our L2T-DLN is a differentiable teaching framework that enhances the performance of a student model. The L2T-DLN contains stages: **(I)** student learning, which optimizes a student model \(S_{\theta}\) with parameter \(\theta\); **(II)** DLN learning, which optimizes the DLN \(L_{\phi}\) with parameter \(\phi\); **(III)** teacher learning, which optimizes the teacher model \(T_{\varphi}\) with parameter \(\varphi\).

Starting from \(S_{\theta}^{0}\), in stage **(I)**, we optimize the student model \(S_{\theta}^{0}\to S_{\theta}^{N}\) on training data \(x_{train}\) by leveraging the DLN \(L_{\phi}^{0}\) as the loss function, where \(N\) denotes the number of iterations in a student learning stage. In stage **(II)**, we compute the error \(e_{val}\) of the student model \(S_{\theta}^{N}\) on validation data \(x_{val}\), and then determine the gradient \(\nabla\phi^{0}=\partial e_{val}/\partial\phi^{0}\). This gradient is then given to the teacher model, and the DLN is updated as \(\phi^{1}=\phi^{0}+g^{0}\), where \(g^{0}\) indicates the output of the teacher model \(T_{\varphi}^{0}\). In stage **(III)**, we first train the student model \(S_{\theta}^{N}\to S_{\theta}^{2N}\) with the updated DLN \(L_{\phi}^{1}\). Then, we obtain the validation error \(e_{val}\) of the student model \(S_{\theta}^{2N}\) and optimize the teacher model by backpropagation (BP) based on \(e_{val}\). The objective function of our L2T-DLN is:

\[(\theta^{(M+K)N},\phi^{M},\varphi^{K})\leftarrow(\theta^{0},\phi^{0},\varphi^ {0})-\nabla_{(\theta,\phi,\varphi)}\sum_{k=0}^{K}e_{val}(\theta^{2(k+1)N}).\] (1)

Our goal is to achieve \(\theta^{(M+K)N}\), \(\phi^{M}\) and \(\varphi^{K}\), where \(M\) and \(K\) denote the number of iterations of DLN and teacher learning, respectively (details are shown in Figure 2).

### Student learning

For a given task, we define the input and output space as \(X\) and \(Y\), respectively. The student model is then denoted by \(S_{\theta}:X\to Y\). Our student learning involves minimizing the output value of the DLN, _i.e._, \(\underset{\theta\in\Omega}{\arg\min}\sum_{(x,y)\in x_{train}}wL_{\phi}^{m}(S_{ \theta}(x),y)\), under a hypothesis space \(\Omega\) using training data \(x_{train}\). Note, \(w\) is a weight parameter of \(x\), \(L_{\phi}^{m}\) is the loss function, and \(m\) is the \(m^{th}\) iteration for the DLN. During each stage of student learning, we iteratively train the student model \(N\) times with \(L_{\phi}^{m}\). The optimization of the student model during the current stage is:

\[\theta^{i}=\theta^{i-1}-\eta\partial wL_{\phi}^{m}(S_{\theta}^{i-1}(x),y)/ \partial\theta^{i-1},\;i=\{1,2,\cdots,N\},\] (2)

where \(\eta\) denotes the learning rate of the student model. In our framework, the \(L_{\phi}^{m}\) that with learnable parameters are optimized in different student learning stages for providing seemly guidance.

### DLN learning

After the student learning stage (_e.g._, \(S_{\theta}^{0}\to S_{\theta}^{N}\) with \(L_{\phi}^{0}\)), we use the teacher model \(T_{\varphi}^{0}\) to adjust the DLN parameters \(\phi\) (_e.g._, \(\phi^{0}\rightarrow\phi^{1}\)). To enable the temporal property of DLN, we use an LSTM to transform \(\phi\) dynamically:

\[\phi^{1}=\phi^{0}+\gamma g^{0},\;\;\begin{bmatrix}g^{0}\\ h^{1}\end{bmatrix}=T_{\varphi}^{0}(\nabla\phi^{0},h^{0}),\] (3)

where \(\gamma\) denotes the learning rate of DLN and \(\nabla\phi^{0}\) represents the gradient of the validation error \(e_{val}\) of \(S_{\theta}\) with respect to \(\phi^{0}\).

Considering the gap between training data and validation data, we employ the Reverse-Mode Differentiation (RMD) to calculate \(\nabla\phi^{0}\). The RMD involves performing the SGD process in reverse order from \(N\) to \(1\), as depicted by the black lines in Figure 2. According to Eq. (2), the gradient of the validation error \(e_{val}(S_{\theta}^{N})\) with respect to \(\theta^{N}\) can be calculated as follows:

\[\nabla\theta^{N}=\partial e_{val}(S_{\theta}^{N})/\partial\theta^{N}.\] (4)

Figure 2: The pipeline of L2T-DLN. Grey, black, and red lines represent the optimization of the student parameter \(\theta\), the DLN parameter \(\phi\), and the teacher parameter \(\varphi\), respectively. We aim at obtaining \(\theta^{(M+K)N}\), \(\phi^{M}\), and \(\varphi^{K}\), where \(M\) and \(K\) denote the number of iterations for DLN and the teacher and \(M=K\). There are three stages: student, DLN, and teacher learning. During student learning, a student model is optimized by backpropagation with \(L_{\phi}^{0}\). During a DLN learning, the teacher \(T_{\varphi}^{0}\) accept the gradient \(\nabla\phi^{0}\) and output \(g^{0}\) to update \(L_{\phi}^{0}\). During a teacher learning, we perform another student learning with \(L_{\phi}^{1}\) and optimize the teacher \(\varphi^{0}\) with the validation error of the updated student.

[MISSING_PAGE_FAIL:5]

express the AGD rule of updating variables by assuming \(v^{(0)}=0\) as follows, with \(e\) denoting the validation error.

\[v^{k+1} =v^{k}-\eta\left(\begin{matrix}\bigtriangledown_{1}e(v_{1}^{2kN},v _{2}^{k})\\ \bigtriangledown_{2}e(v_{1}^{2(k+1)N},v_{2}^{k})\end{matrix}\right)\] (9) \[=v^{k}-\eta\int_{0}^{1}\mathcal{H}_{l}^{k}dv^{2(k+1)N}-\eta\int_ {0}^{1}\mathcal{H}_{u}^{k}dv^{k},\]

where \(\mathcal{H}_{l}^{k}\triangleq\begin{bmatrix}0&0\\ \bigtriangledown_{21}^{2}e(v_{1}^{2(k+1)N},v_{2}^{k})&0\end{bmatrix}\) and \(\mathcal{H}_{u}^{k}\triangleq\begin{bmatrix}\bigtriangledown_{11}^{2}e(v_{1} ^{2kN},v_{2}^{k})&\bigtriangledown_{12}^{2}e(v_{1}^{2kN},v_{2}^{k})\\ 0&\bigtriangledown_{22}^{2}e(\theta v_{1}^{2(k+1)N},\theta v_{2}^{k})\end{bmatrix}\). The right-hand side of Eq. (9) not only contains the second order information of the previous point, _i.e._, \([v_{1}^{2kN},v_{2}^{k}]\), but also the one of the most recently updated point, _i.e._, \([v_{1}^{2(k+1)N},v_{2}^{k}]\).

Different from traditional AGD, the dynamic system in L2T-DLN takes the first-order information to update the student and the second-order information to update the teacher. Specifically, \(\bigtriangledown_{1}e(v_{1}^{2kN},v_{2}^{k})=\bigtriangledown e(v_{1}^{2k(k+1) N},v_{2}^{k})\) and \(\bigtriangledown_{2}e(v_{1}^{2(k+1)N},v_{2}^{k})=\bigtriangledown^{2}e(v_{1}^{ 2(k+1)N},v_{2}^{k})\). These represent the main challenges in understanding the behavior of the sequence generated by the AGD algorithm.

Although the higher-order information is divided into two parts, we can still characterize the recursion of the iterates around strict saddle points \(v^{*}\). We can also split \(\mathcal{H}\) as two parts, which are

\[\mathcal{H}_{u}=\begin{bmatrix}\bigtriangledown_{11}^{2}e(v^{*})&\bigtriangledown _{12}^{2}e(v^{*})\\ 0&\bigtriangledown_{22}^{2}e(v^{*})\end{bmatrix},\ \mathcal{H}_{l}=\begin{bmatrix}0&0\\ \bigtriangledown_{21}^{2}e(v^{*})&0\end{bmatrix},\] (10)

and obviously, we have \(\mathcal{H}=\mathcal{H}_{u}+\mathcal{H}_{l}\).

Then recursion Eq. (9) can be written as

\[v^{2(k+1)N}+\eta\mathcal{H}_{l}v^{2(k+1)N}=x^{k}-\eta\mathcal{H}_{u}v^{k}-\eta \bigtriangleup_{u}^{k}v^{k}-\eta\bigtriangleup_{l}^{k}v^{2(k+1)N},\] (11)where \(\triangle_{u}^{k}\triangleq\int_{0}^{1}(\mathcal{H}_{u}^{k}(v)-\mathcal{H}_{u})dv\), \(\triangle_{u}^{k}\triangleq\int_{0}^{1}(\mathcal{H}_{t}^{k}(v)-\mathcal{H}_{t})dv\). However, it is still unclear from Eq. (11) how the iteration evolves around the strict saddle point. To highlight ideas, let us define

\[M\triangleq I+\eta\mathcal{H}_{l},\;G\triangleq I-\eta\mathcal{H}_{u}.\] (12)

It can be observed that \(M\) is a lower triangular matrix where the diagonal entries are all 1s; therefore it is invertible. After taking the inverse of matrix \(M\) on both sides of Eq. (11), we can obtain

\[v^{k+1}=M^{-1}Gv^{k}-\eta M^{-1}\triangle_{u}^{k}v^{k}-\eta M^{-1}\triangle_ {l}^{k}v^{2(k+1)N}.\] (13)

Our goal of analyzing the recursion of \(v^{k}\) becomes to find the maximum eigenvalue of \(M^{-1}G\). With the help of the matrix perturbation theory, we can quantify the difference between the eigenvalues of matrix \(\mathcal{H}\) that contains the negative curvature and matrix \(M^{-1}G\) that we are interested in analyzing. With the gradient Lipschitz constants \(\{\tilde{C}_{k}\}\), we set \(L_{max}\triangleq max\{C_{k},\tilde{C}_{k},\forall k\}\leq C\) and give the following conclusion.

**Conclusion 1.** Let \(\mathcal{H}\triangleq\bigtriangledown^{2}e(x)\) denote the Hessian matrix at an \(\epsilon-\)second-order stationary solution (SS2) \(v^{*}\) where \(\lambda_{min}(\mathcal{H})\leq-\gamma\) and \(\gamma>0\). We have

\[\lambda_{max}(M^{-1}G)>1+\frac{\eta\gamma}{1+C/C_{max}}.\] (14)

The proof of Conclusion 1 contains the following steps:

**Step 1.** (Lemma 1 [26]) Giving a generic sequence \(u\) generated by AGD (\(v^{k}\in u\)). As long as the initial point of \(u^{k}\) is close to saddle point \(\tilde{v}^{k}\), the distance between \(u^{k}\) and \(\tilde{v}^{k}\) can be upper bounded by using the \(\rho-\)Hessian Lipschitz continuity property.

**Step 2.** Leveraging the negative curvature around the strict saddle point, we can project the \(u^{k}\) onto the two subspaces, where the first subspace is spanned by the eigenvector of \(M^{-1}G\) and the other one is spanned by the remaining eigenvectors. We use two steps to show \(\lambda_{max}(M^{-1}G)>1\): 1) we show that all eigenvalues of \(Q(\lambda)=[G-\lambda M]\) are real; 2) \(\exists\lambda>1,det(Q(\lambda))=0\).

Conclusion 1 illustrates that there exists a subspace spanned by the eigenvector of \(M^{-1}G\) whose eigenvalue is greater than 1, indicating that the sequence generated by AGD can still potentially escape from the strict saddle point by leveraging such negative curvature information (more can be found in supplementary materials).

## 5 Experiments

### Experimental setup

**Datasets.** We evaluate our method on three tasks, _i.e._, image classification, objective detection, and semantic segmentation. For the image classification, we use three datasets: CIFAR-10 [20], CIFAR-100 [21], and ImageNet [33]. CIFAR-10 and CIFAR-100 contain 50000 training and 10000 testing images with 10-class and 100-class separately. ImageNet is a 1000-class task that contains 1281167 training and 50000 testing pairs. For the objective detection, we use MS-COCO dataset [22], which contains 82783, 40504, and 81434 pairs in the training, validation, and testing set separately. For the semantic segmentation, we choose PASCAL VOC 2012 [6]. Following the procedure of Zhao et al. [40], we use augmented data with the annotation of Hariharan et al. [11], resulting in 10582, 1449, and 1456 images for training, validation, and testing.

**Evaluation metrics.** In the classification, we use the accuracy on the testing set of each dataset [37; 23]. In the objective detection, we use the mean of Average Precision (mAP) [31] to evaluate the student model on the testing set of MS-COCO [22]. In the semantic segmentation, we use Mean Intersection over Union (mIoU) [40] to evaluate the student model on the testing set of VOC [6; 11].

**Baseline methods.** For the classification, we employ several popular loss functions, including fixed loss functions such as Cross Entropy loss (CE), the large-margin softmax loss (L-M softmax) [24], and the smooth 0-1 loss function (Smooth) [30] as well as dynamic loss functions, namely the adaptive robust loss function (ARLF) [3], the L2T-DLF loss function [37], stochastic loss function (SLF) [23] and ALA [16]. For objective detection, we compare our approach with the objective function set by YOLO-v3 [31]. For the semantic segmentation, we compare our approach with the objective function set by PSPNet [40].

**Implementation details.** In all experiments, we optimize student models using standard stochastic gradient descent (SGD) with a learning rate of 0.1. The teacher model is trained with Adam, utilizing a learning rate of 0.001. The learning rate of DLN is set to 0.001. The teacher model is trained for 10 epochs, with redividing the training and validation data after each epoch. The validation errors in each task are explicitly reported. Our teacher model comprises a four-layer LSTM [14] with 64 neurons in the first three layers and 1 neuron in the final layer. We utilize a 1-vs-1 approach (details in supplementary materials) to process the student model's output in both classification and segmentation. We present DLN architecture for each task and ensure reliable evaluation by conducting 5 random restarts, using average results for comprehensive comparisons.

### Results

**Image classification.** For CIFAR-10 and CIFAR 100, we follow the SLF [23] and use architectures that include ResNet [12], and Wide-ResNet(WRN) [39] as the student model. For ImageNet, we follow the ALA [16] and use the identical NASNet-A [43]. In each experiment, the batch sizes for training and validation are set to 25 and 100, respectively. We perform a five-layer fully connected network, which contains 40 neurons in each hidden layer and 1 neuron in the output layer, as the DLN. The activation function for each hidden layer is set to Leaky-ReLU. The validation error is computed by CE.

Table 1 reports the performance of each loss function. Our approach achieves the best results on CIFAR-10 with ResNet8, ResNet20, and ResNet32, achieving \(90.70\%,93.40\%\), and \(93.81\%\), respectively. On CIFAR-100, our method also outperforms baselines with an overall accuracy of \(63.50\%,70.47\%\), and \(72.06\%\) for ResNet8, ResNet20, and ResNet32, respectively. For WRN, our approach achieves the second-best performance, following the SLF method. The results on ImageNet illustrate that L2T-DLN improves the accuracy of the baseline by \(0.7\%\). On ImageNet, our DLN demonstrates the second-best performance. The performance of ALA benefits from the larger length of a student learning stage ALA set (200) compared with ours (25). The ablation showed that the size of the length is positively correlated with the test accuracy and computational consumption (see Table 5).

**Objective detection.** In the task of objective detection, the YOLO-v3 model with a backbone of darknet-53 [31] is used in this experiment. The traditional loss in the YOLO model is a multi-part loss function, _i.e._, \(\lambda_{cls}\ell_{cls}+\lambda_{conf}\ell_{conf}+\lambda_{loc}\ell_{loc}\). \(\ell_{cls},\ell_{conf}\) and \(\ell_{loc}\) are detailed in supplementary materials. Redmon and Farhadi [31] set \(\lambda_{cls}=\lambda_{conf}=\lambda_{loc}=1\). In our experiment, our L2T-DLN learns to set these weights dynamically with a single-layer perceptron as DLN. The backbone of the YOLO is pre-trained on ImageNet, and we finetune the header of the YOLO. Specifically, the objective function of the student model is set to \(DLN([\ell_{cls},\ell_{conf},\ell_{loc}])\). The validation error is computed by \(\ell_{cls}+\ell_{conf}+\ell_{loc}\). The batch sizes for training and validation are set to 2 and 8, respectively. The length of student learning is set to 2. We take the training set and 35000 images of the validation set to train our L2T-DLN with an input size of 416*416. From Table 2, our L2T-DLN has more than \(1.6\%\) improvement with the baseline on mAP.

**Semantic segmentation.** The objective function of PSPNet [40] is set to \(CE(p,y)+0.4*CE(aux_{p},y)\), where \(p\), \(aux_{p}\), and \(y\) denote the output of the master branch, the auxiliary branch of PSPNet, and the ground truth, respectively. For PSPNet with L2T-DLN, the objective function is set to \(DLN(p,y)+0.4*DLN(aux_{p},y)\), where the architecture of DLN is the one used in classification tasks. The validation error is computed by \(CE(p,y)+0.4*CE(aux_{p},y)\). The batch sizes for

\begin{table}
\begin{tabular}{l c c c c c c c c c} \hline \hline \multirow{2}{*}{Method} & \multicolumn{3}{c}{CIFAR-10 [20]} & \multicolumn{3}{c}{CIFAR-100 [21]} & \multicolumn{3}{c}{ImageNet [33]} & length \\  & ResNet8 & ResNet20 & ResNet32 & WRN & ResNet20 & ResNet32 & NASNet-A & \\ \hline CE & \(87.6\) & \(91.3\) & \(92.5\) & \(96.2\) & \(60.2\) & \(67.7\) & \(69.6\) & \(73.5\) & - \\ Smooth [30] & \(87.9\) & \(91.5\) & \(92.6\) & \(96.2\) & \(60.5\) & \(68.0\) & \(69.9\) & - & - \\ L-M Softmax [24] & \(88.7\) & \(92.0\) & \(93.0\) & \(96.3\) & \(61.1\) & \(68.4\) & \(70.4\) & - & - \\ L2T-DLP [37] & \(89.2\) & \(92.4\) & \(93.1\) & \(96.6\) & \(61.7\) & \(60.0\) & \(70.8\) & - & 1 \\ ARLF [3] & \(89.5\) & \(91.5\) & \(92.2\) & \(95.9\) & \(60.2\) & \(67.8\) & \(69.9\) & - & - \\ SLF [23] & \(89.8\) & \(93.0\) & \(93.6\) & \(\mathbf{97.1}\) & \(62.7\) & \(69.9\) & \(71.5\) & - & - \\ ALA [16] & \(\mathbf{0.97}\) & \(\mathbf{97.4}\) & \(\mathbf{93.4}\) & \(\mathbf{0.18}\) & \(\mathbf{93.8}\) & \(\mathbf{0.20}\) & \(96.7\) & \(0.93\) & \(\mathbf{63.5}\) & \(\mathbf{0.07}\) & \(\mathbf{70.4}\) & \(\mathbf{0.03}\) & \(\mathbf{72.0}\) & \(\mathbf{0.1}\) & \(\mathbf{74.2}\) & 25 \\ \hline \hline \end{tabular}
\end{table}
Table 1: Results on datasets CIFAR-10 [20], CIFAR-100 [21] and ImageNet [33] for the classification task. All experiments are implemented with the same settings. The best results are highlighted in bold.

training and validation are set to 2 and 8, respectively. The length of student learning is set to 2. Table 3 shows that our L2T-DLN improves \(0.3\%\) compared with the baseline on mIoU.

### Ablations

In this subsection, we conduct ablation studies on CIFAR-10 [20] using ResNet8 to analyze the L2T-DLN synthetically. We specifically examine the proportion of training and validation data, the length of student learning stage (\(N\)), the wrong learning rate setting, and the influence of the LSTM teacher. Furthermore, we provide the visualization of DLN at different learning stages in MNIST and CIFAR10 tasks. We assess the impact of each component by computing the test accuracy of the student model after optimizing the teacher model for 10 epochs.

**The proportion of training and validation data.** In L2T-DLN, the training dataset is divided into two sets: validation data and training data, with validation data serving as an unbiased estimator for model generalization. After each epoch, the dataset is redivided, allowing samples used in the validation data to be included in the training data, and vice versa. The **validation ratio** represents the fraction of training dataset samples exclusively used for validation. This study explores different training-validation data separations. Table 4 results indicate our performance remains stable across varying ratios due to the teacher's ability to capture short- and long-term dependencies. To make a trade-off between computational cost and accuracy, we set the ratio\(=50\%\) for all our experiments.

**The length of student learning.** The computation of higher-order gradients in L2T-DLN (Eq. (6) and (8)) is computationally intensive and should be highlighted. Thus, this study explores the influence of the length of student learning (\(N\)) on the test accuracy and computational load in CIFAR-10 experiments using ResNet8. As shown in Table 5, the findings reveal that the test accuracy increases with the length of student learning. To make a trade-off between performance and computational cost, we suggest that a maximum length of 25 should be set for student learning. Overall, the study concludes that L2T-DLN has the potential to further improves the performance of student model with sufficient computing resources.

**The influence of an LSTM teacher.** As introduced above, the teacher model is similar to an optimization algorithm. Then we perform various optimizers, including Adam [19], SGD, RMSProp [13], and the LSTM teacher, to optimize the DLN and present the results in Table 6. Compared with ADAM, SGD, and RMSProp, our teacher can improve the performance of the student by \(0.48\%\), \(1.6\%\), and \(0.53\%\). We can conclude that 1) algorithms that can use the historical information, _e.g._, momentum, perform well; 2) the adaptability to capture and maintain short- and long-term dependencies can further enhance the loss function teaching, compared to handcrafted methods, _e.g._, exponentially weighted moving average [13] and moment estimation [19].

\begin{table}
\begin{tabular}{l c c c c} \hline \hline Ratio & \(10\%\) & \(25\%\) & \(50\%\) & \(75\%\) & \(90\%\) \\ \hline Accuracy & \(90.41\) & \(90.53\) & \(90.70\) & \(90.68\) & \(90.35\) \\ \hline \hline \end{tabular}
\end{table}
Table 4: Results on different validation ratios ranging from \(10\%\) to \(90\%\) to show the impact of ratios.

\begin{table}
\begin{tabular}{l c c} \hline \hline Method & mIoU \\ \hline PSPNet [40] & \(82.6\) \\ PSPNet-ours & \(82.9\) \\ \hline \hline \end{tabular}
\end{table}
Table 3: Segmentation on VOC [6; 11]. DLN and original losses in PSPNet.

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline Length & 1 & 5 & 10 & 15 & 25 & 50 & 75 \\ \hline Accuracy & \(81.40\) & \(87.07\) & \(89.95\) & \(90.18\) & \(90.70\) & \(90.73\) & \(90.74\) \\ Time & 1s & 3s & 5.8s & 7.9s & 13.4s & 32s & 76.7s \\ \hline \hline \end{tabular}
\end{table}
Table 5: Results on different lengths ranging from 1 to 75 to show the impact of the length. Time denotes the time consumption of a round of teacher learning.

**Visualization.** We visualize the loss value of DLN on MNIST and CIFAR-10 separately in Figure 3, which illustrates the capacity of L2T-DLN to adapt to the evolving states of students to attain improved performance. The DLN is initialized with the Kaiming normal initialization with LeakyReLU activations.

## 6 Conclusions

This paper introduces L2T-DLN, an adaptive model for various stages of student learning. Technically, We propose a differentiable three-stage teaching framework, asynchronously optimizing the student, DLN, and teacher. An LSTM teacher dynamically captures and retains experiences during DLN learning. Additionally, we assess L2T-DLN's ability to navigate strict saddle points using the negative curvature of their Hessian matrix. Experiments demonstrate our DLN outperforming specially designed loss functions. Nevertheless, our approach demands significant computational resources for high-order derivatives, which we aim to mitigate in future work.

## 7 Acknowledgment

This work was supported in part by National Natural Science Foundation of China (62302045, 82171965), Clinical and Translational Medical Research Fund of the Chinese Academy of Medical Sciences (2020-12M-C&T-B-072), and Beijing Institute of Technology Research Fund Program for Young Scholars.

\begin{table}
\begin{tabular}{c c c c c} \hline \hline Optimizer & Adam [19] & SGD & RMSProp [13] & LSTM \\ \hline Accuracy & \(90.17\) & \(89.05\) & \(90.12\) & \(90.65\) \\ \hline \hline \end{tabular}
\end{table}
Table 6: Results on different optimizers to show the effectiveness of the LSTM teacher.

Figure 3: Visualization of DLN loss value at different training stages in the MNIST-LeNet task (a-d) and CIFAR10-ResNet8 task (e-h). (a) & (e) initialized DLN, (b) & (f) DLN finished second teacher learning epoch, (c) & (g) DLN finished fifth teacher learning epoch, (d) & (h) DLN finished tenth teacher learning epoch (final). The X-, Y-, and Z-axis are the prediction for 0-category (denoted as prediction0), the prediction for 1-category (denoted as prediction1), and the loss value of DLN, respectively. We set the 0-category as the correct category and the 1-category as the wrong category. We can observe that the output value range of DLN initially expands and subsequently contracts. Specifically, the range shifts from (-0.3, 0.4) to (-2.25, -0.25) to (-0.3, -0.05) in MNIST, and from (0.8, 1.8) to (-2, 1) to (-0.175, 0) in CIFAR10.

## References

* [1]M. Andrychowicz, M. Denil, S. Gomez, M. W. Hoffman, D. Pfau, T. Schaul, B. Shillingford, and N. De Freitas (2016) Learning to learn by gradient descent by gradient descent. Advances in neural information processing systems29. Cited by: SS1.
* [2]S. Baik, J. Choi, H. Kim, D. Cho, J. Min, and K. Mu Lee (2021) Meta-learning with task-adaptive loss function for few-shot learning. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pp. 9465-9474. Cited by: SS1.
* [3]J. T. Barron (2019) A general and adaptive robust loss function. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp. 4331-4339. Cited by: SS1.
* [4]D. P. Bersekas (1997) Nonlinear programming. Journal of the Operational Research Society48 (3), pp. 334-334. Cited by: SS1.
* [5]L. P. Bradford (1958) The teaching-learning transaction. Adult Education8 (3), pp. 135-145. Cited by: SS1.
* [6]M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and A. Zisserman (2010) The pascal visual object classes (voc) challenge. International journal of computer vision88, pp. 303-338. Cited by: SS1.
* [7]Y. Fan, F. Tian, T. Qin, X. Li, and T. Liu (2018) Learning to teach. In International Conference on Learning Representations, Cited by: SS1.
* [8]Y. Fan, Y. Xia, L. Wu, S. Xie, W. Liu, J. Bian, T. Qin, and X. Li (2021) Learning to reweight with deep interactions. In Proceedings of the AAAI Conference on Artificial Intelligence, Vol. 35, pp. 7385-7393. Cited by: SS1.
* [9]F. A. Gers, J. Schmidhuber, and F. Cummins (2000) Learning to forget: continual prediction with lstm. Neural computation12 (10), pp. 2451-2471. Cited by: SS1.
* [10]M. Han, L. Pan, and X. Liu (2023-02) Astronet: when astrocyte meets artificial neural network. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), pp. 20258-20268. Cited by: SS1.
* [11]B. Hariharan, P. Arbelaez, L. Bourdev, S. Maji, and J. Malik (2011) Semantic contours from inverse detectors. In 2011 international conference on computer vision, pp. 991-998. Cited by: SS1.
* [12]K. He, X. Zhang, S. Ren, and J. Sun (2016) Deep residual learning for image recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 770-778. Cited by: SS1.
* [13]G. Hinton, N. Srivastava, and K. Swersky (2012) Neural networks for machine learning lecture 6a overview of mini-batch gradient descent. Cited by: SS1.
* [14]S. Hochreiter and J. Schmidhuber (1997) Long short-term memory. Neural computation9 (8), pp. 1735-1780. Cited by: SS1.
* [15]C. Huang, S. Zhai, W. Talbott, M. B. Bautista, S. Sun, C. Guestrin, and J. Susskind (2019) Addressing the loss-metric mismatch with adaptive loss alignment supplementary material. Cited by: SS1.
* [16]C. Huang, S. Zhai, W. Talbott, M. B. Bautista Martin, S. Sun, C. Guestrin, and J. Susskind (2019) Addressing the loss-metric mismatch with adaptive loss alignment. In International conference on machine learning, pp. 2891-2900. Cited by: SS1.
* [17]J. Ihejrika (2013) Teaching strategies for adult learners: implications of learning characteristics for effective teaching-learning transaction. Academic Research International4 (2), pp. 310. Cited by: SS1.
* [18]L. Jiang, Z. Zhou, T. Leung, L. Li, and L. Fei-Fei (2018) Mentornet: learning data-driven curriculum for very deep neural networks on corrupted labels. In International conference on machine learning, pp. 2304-2313. Cited by: SS1.
* [19]D. P. Kingma and J. Ba (2014) Adam: a method for stochastic optimization. arXiv preprint arXiv:1412.6980. Cited by: SS1.
* [20]A. Krizhevsky (2009) Learning multiple layers of features from tiny images. Master's thesis, University of Tront. Cited by: SS1.
* [21]A. Krizhevsky, V. Nair, and G. Hinton (2009) Cifar-10 and cifar-100 datasets. URL: https://www. cs. toronto. edu/kriz/cifar. html6 (1), pp. 1. Cited by: SS1.

[MISSING_PAGE_POST]

* [22] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr Dollar, and C Lawrence Zitnick. Microsoft coco: Common objects in context. In _Computer Vision-ECCV 2014: 13th European Conference, Zurich, Switzerland, September 6-12, 2014, Proceedings, Part V 13_, pages 740-755. Springer, 2014.
* [23] Qingliang Liu and Jinmei Lai. Stochastic loss function. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 34, pages 4884-4891, 2020.
* [24] Weiyang Liu, Yandong Wen, Zhiding Yu, and Meng Yang. Large-margin softmax loss for convolutional neural networks. In _International Conference on Machine Learning_, pages 507-516. PMLR, 2016.
* [25] Weiyang Liu, Bo Dai, Ahmad Humayun, Charlene Tay, Chen Yu, Linda B Smith, James M Rehg, and Le Song. Iterative machine teaching. In _International Conference on Machine Learning_, pages 2149-2158. PMLR, 2017.
* [26] Songtao Lu, Mingyi Hong, and Zhengdao Wang. On the sublinear convergence of randomly perturbed alternating gradient descent to second order stationary solutions. _arXiv preprint arXiv:1802.10418_, 2018.
* [27] Payal Mehra and Monika Mital. Integrating technology into the teaching-learning transaction: Pedagogical and technological perceptions of management faculty. _International Journal of Education and Development using ICT_, 3(1), 2007.
* [28] Thomas Howard Morris. Vocational education of young adults in england: A systemic analysis of teaching-learning transactions that facilitate self-directed learning. _Journal of Vocational Education & Training_, 70(4):619-643, 2018.
* [29] Baraka Manjale Ngussa and Lazarus Ndiku Makewa. Constructivism experiences in teaching-learning transaction among adventist secondary schools in south nyanza, tanzania. _American Journal of Educational Research_, 2(11A):1-7, 2014.
* [30] Tan Nguyen and Scott Sanner. Algorithms for direct 0-1 loss optimization in binary classification. In _International Conference on Machine Learning_, pages 1085-1093. PMLR, 2013.
* [31] Joseph Redmon and Ali Farhadi. Yolov3: An incremental improvement. _arXiv preprint arXiv:1804.02767_, 2018.
* [32] Mengye Ren, Wenyuan Zeng, Bin Yang, and Raquel Urtasun. Learning to reweight examples for robust deep learning. In _International conference on machine learning_, pages 4334-4343. PMLR, 2018.
* [33] Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, Sanjeev Satheesh, Sean Ma, Zhiheng Huang, Andrej Karpathy, Aditya Khosla, Michael Bernstein, et al. Imagenet large scale visual recognition challenge. _International journal of computer vision_, 115:211-252, 2015.
* [34] Jurgen Schmidhuber. _Evolutionary principles in self-referential learning, or on learning how to learn: the meta-meta-... hook_. PhD thesis, Technische Universitat Munchen, 1987.
* [35] Jun Shu, Qi Xie, Lixuan Yi, Qian Zhao, Sanping Zhou, Zongben Xu, and Deyu Meng. Meta-weight-net: Learning an explicit mapping for sample weighting. _Advances in neural information processing systems_, 32, 2019.
* [36] Sebastian Thrun and Lorien Pratt. _Learning to learn_. Springer Science & Business Media, 2012.
* [37] Lijun Wu, Fei Tian, Yingce Xia, Yang Fan, Tao Qin, Lai Jian-Huang, and Tie-Yan Liu. Learning to teach with dynamic loss functions. _Advances in neural information processing systems_, 31, 2018.
* [38] Yan Yang, Liyuan Pan, and Liu Liu. Event camera data pre-training. _arXiv preprint arXiv:2301.01928_, 2023.
* [39] Sergey Zagoruyko and Nikos Komodakis. Wide residual networks. In _British Machine Vision Conference 2016_. British Machine Vision Association, 2016.
* [40] Hengshuang Zhao, Jianping Shi, Xiaojuan Qi, Xiaogang Wang, and Jiaya Jia. Pyramid scene parsing network. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 2881-2890, 2017.
* [41] Xiaojin Zhu. Machine teaching: An inverse problem to machine learning and an approach toward optimal education. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 29, 2015.
* [42] Barret Zoph and Quoc Le. Neural architecture search with reinforcement learning. In _International Conference on Learning Representations_, 2016.

* [43] Barret Zoph, Vijay Vasudevan, Jonathon Shlens, and Quoc V Le. Learning transferable architectures for scalable image recognition. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 8697-8710, 2018.