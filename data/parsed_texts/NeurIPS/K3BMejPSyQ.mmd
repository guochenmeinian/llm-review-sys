# Two-timescale Derivative Free Optimization for

Performative Prediction with Markovian Data

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

This paper studies the performative prediction problem where a learner aims to minimize the expected loss with a decision-dependent data distribution. Such setting is motivated when outcomes can be affected by the prediction model, e.g., in strategic classification. We consider a state-dependent setting where the data distribution evolves according to an underlying controlled Markov chain. We focus on stochastic derivative free optimization (DFO) where the learner is given access to a loss function evaluation oracle with the above Markovian data. We propose a two-timescale DFO(\(\lambda\)) algorithm that features (i) a sample accumulation mechanism that utilizes every observed sample to estimate the overall gradient of performative risk, and (ii) a two-timescale diminishing step size that balances the rates of DFO updates and bias reduction. Under a general non-convex optimization setting, we show that DFO(\(\lambda\)) requires \(\mathcal{O}(1/\epsilon^{3})\) samples (up to a log factor) to attain a near-stationary solution with expected squared gradient norm less than \(\epsilon>0\). Numerical experiments verify our analysis.

## 1 Introduction

Consider the following stochastic optimization problem with decision-dependent data:

\[\min_{\bm{\theta}\in\mathbb{R}^{d}}\ \mathcal{L}(\bm{\theta})=\mathbb{E}_{Z \sim\Pi_{\bm{\theta}}}\big{[}\ell(\bm{\theta};Z)\big{]}.\] (1)

Notice that the decision variable \(\bm{\theta}\) appears in both the loss function \(\ell(\bm{\theta};Z)\) and the data distribution \(\Pi_{\bm{\theta}}\) supported on Z. The overall loss function \(\mathcal{L}(\bm{\theta})\) is known as the _performative risk_ which captures the distributional shift due to changes in the deployed model. This setting is motivated by the recent studies on _performative prediction_(Perdomo et al., 2020), which considers outcomes that are supported by the deployed model \(\bm{\theta}\) under training. For example, this models strategic classification (Hardt et al., 2016; Dong et al., 2018) in economical and financial practices such as with the training of loan classifier for customers who may react to the deployed model \(\bm{\theta}\) to maximize their gains; or in price promotion mechanism (Zhang et al., 2018) where customers react to prices with the aim of gaining a lower price; or in ride sharing business (Narang et al., 2022) with customers who adjust their demand according to prices set by the platform.

The objective function \(\mathcal{L}(\bm{\theta})\) is non-convex in general due to the effects of \(\bm{\theta}\) on both the loss function and distribution. Numerous efforts have been focused on characterizing and finding the so-called _performative stable_ solution which is a fixed point to the repeated risk minimization (RRM) process (Perdomo et al., 2020; Mendler-Dunner et al., 2020; Brown et al., 2022; Li and Wai, 2022; Roy et al., 2022; Drusvyatskiy and Xiao, 2022). While RRM might be a natural algorithm for scenarios when the learner is agnostic to the performative effects in the dynamic data distribution, the obtained solution maybe far from being optimal or stationary to (1).

On the other hand, recent works have studied _performative optimal_ solutions that minimizes (1). This is challenging due to the non-convexity of \(\mathcal{L}(\bm{\theta})\) and more importantly, the absence of knowledge of \(\Pi_{\bm{\theta}}\). In fact, evaluating \(\nabla\mathcal{L}(\bm{\theta})\) or its stochastic gradient estimate would require learning the distribution \(\Pi_{\bm{\theta}}\)_a-priori_(Izzo et al., 2021). To design a tractable procedure, prior works have assumed structures for (1) such as approximating \(\Pi_{\bm{\theta}}\) by Gaussian mixture (Izzo et al., 2021), \(\Pi_{\bm{\theta}}\) depends linearly on \(\bm{\theta}\)(Narang et al., 2022), etc., combined with a two-phase algorithm that separately learns \(\Pi_{\bm{\theta}}\) and optimizes \(\bm{\theta}\). Other works have assumed a _mixture dominance_ structure (Miller et al., 2021) on the combined effect of \(\Pi_{\bm{\theta}}\) and \(\ell(\cdot)\) on \(\mathcal{L}(\bm{\theta})\), which in turn implies that \(\mathcal{L}(\bm{\theta})\) is convex. Based on this assumption, a derivative free optimization (DFO) algorithm was analyzed in Ray et al. (2022).

This paper focuses on approximating the _performative optimal_ solution without relying on additional condition on the distribution \(\Pi_{\bm{\theta}}\) and/or using a two-phase algorithm. We concentrate on stochastic DFO algorithms (Ghadimi and Lan, 2013) which do not involve first order information (i.e., gradient) about \(\mathcal{L}(\bm{\theta})\). As an advantage, these algorithms avoid the need for estimating \(\Pi_{\bm{\theta}}\). Instead, the learner is given access to the loss function evaluation oracle \(\ell(\bm{\theta};Z)\) and receive data samples from a controlled Markov chain. Note that the latter models the _stateful_ and _strategic_ agent setting considered in (Ray et al., 2022; Roy et al., 2022; Li and Wai, 2022; Brown et al., 2022). Such setting is motivated when the actual data distribution adapts slowly to the decision model, which will be announced by the learner during the (stochastic) optimization process.

The proposed \(\texttt{DFO}\left(\lambda\right)\) algorithm features (i) a two-timescale step sizes design to control the bias-variance tradeoff in the derivative-free gradient estimates, and (ii) a sample accumulation mechanism with forgetting factor \(\lambda\) that aggregates every observed samples to control the amount of error in gradient estimates. In addition to the new algorithm design, our main findings are summarized below:

* Under the Markovian data setting, we show in Theorem 3.1 that the \(\texttt{DFO}\left(\lambda\right)\) algorithm finds a near-stationary solution \(\bar{\bm{\theta}}\) with \(\mathbb{E}[\|\nabla\mathcal{L}(\bar{\bm{\theta}})\|^{2}]\leq\epsilon\) using \(\mathcal{O}(\frac{d^{2}}{\epsilon^{3}}\log 1/\epsilon)\) samples/iterations. Compared to prior works, our analysis does not require structural assumption on the distribution \(\Pi_{\bm{\theta}}\) or convexity condition on the performative risk (Izzo et al., 2021; Miller et al., 2021; Ray et al., 2022).
* Our analysis demonstrates the trade-off induced by the forgetting factor \(\lambda\) in the DFO \(\left(\lambda\right)\) algorithm. We identify the desiderata for the optimal value(s) of \(\lambda\). We show that increasing \(\lambda\) allows to reduce the number of samples required by the algorithm if the performative risk gradient has a small Lipschitz constant.

For the rest of this paper, SS2 describes the problem setup and the \(\texttt{DFO}\left(\lambda\right)\) algorithm, SS3 presents the main results, SS4 outlines the proofs. Finally, we provide numerical results to verify our findings in SS5.

Finally, as displayed in Table 1, we remark that stochastic DFO under _decision dependent_ (and Markovian) samples has a convergence rate of \(\mathcal{O}(1/\epsilon^{3})\) towards an \(\epsilon\)-stationary point, which is worse than the decision independent setting that has \(\mathcal{O}(1/\epsilon^{2})\) in Ghadimi and Lan (2013). We believe that this is a fundamental limit for DFO-type algorithms when tackling problems with decision-dependent sample due to the challenges in designing a low variance gradient estimator; see SS4.1.

**Related Works**. The idea of DFO dates back to Nemirovskii (1983), and has been extensively studied thereafter Flaxman et al. (2005); Agarwal et al. (2010); Nesterov and Spokoiny (2017); Ghadimi and Lan (2013). Results on matching lower bound were established in (Jamieson et al., 2012). While a similar DFO framework is adopted in the current paper for performative prediction, our algorithm is limited to using a special design in the gradient estimator to avoid introducing unwanted biases.

There are only a few works considering the Markovian data setting in performative prediction. Brown et al. (2022) is the first paper to study the dynamic settings, where the response of agents to learner's deployed classifier is modeled as a function of classifier and the current distribution of the population; also see (Izzo et al., 2022). On the other hand, Li and Wai (2022); Roy et al. (2022) model the unforgetful nature and the reliance on past experiences of _single/batch_ agent(s) via controlled Markov Chain. Lastly, Ray et al. (2022) investigated the state-dependent framework where agents' response may be driven to best response at a geometric rate.

\begin{table}
\begin{tabular}{l l} \hline \hline
**Stochastic DFO Settings** & **Rate** \\ \hline Decision-indep. & \(\mathcal{O}(1/\epsilon^{2})\) \\ (Ghadimi and Lan, 2013) & \\ \hline Decision-depend. (Markov) & \(\mathcal{O}(1/\epsilon^{3})\) \\ \hline \hline \end{tabular}
\end{table}
Table 1: Comparison of the expected convergence rates (to find an \(\epsilon\)-stationary point) for DFO under various settings where DFO is used to tackle an unstructured non-convex optimization problem such as (1).

**Notations**: Let \(\mathbb{R}^{d}\) be the \(d\)-dimensional Euclidean space equipped with inner product \(\langle\cdot,\cdot\rangle\) and induced norm \(\|x\|=\sqrt{\langle x,x\rangle}\). Let \(\mathcal{S}\) be a (measurable) sample space, and \(\mu\), \(\nu\) are two probability measures defined on \(\mathcal{S}\). Then, we use \(\boldsymbol{\delta}_{\text{TV}}\left(\mu,\nu\right):=\sup_{A\subset\mathcal{S }}\mu(A)-\nu(A)\) to denote the total variation distance between \(\mu\) and \(\nu\). Denote \(\mathbb{T}_{\boldsymbol{\theta}}(\cdot,\cdot)\) as the state-dependent Markov kernel and its stationary distribution is \(\Pi_{\boldsymbol{\theta}}(\cdot)\). Let \(\mathbb{B}^{d}\) and \(\mathbb{S}^{d-1}\) be the unit ball and its boundary (i.e., a unit sphere) centered around the origin in \(d\)-dimensional Euclidean space, respectively, and correspondingly, the ball and sphere of radius \(r>0\) are \(r\mathbb{B}^{d}\) and \(r\mathbb{S}^{d-1}\).

## 2 Problem Setup and Algorithm Design

In this section, we develop the \(\mathtt{DFO}\left(\lambda\right)\) algorithm for tackling (1) and describe the problem setup. Assume that \(\mathcal{L}(\boldsymbol{\theta})\) is differentiable, we focus on finding an _\(\epsilon\)-stationary_ solution, \(\boldsymbol{\theta}\), which satisfies

\[\|\nabla\mathcal{L}(\boldsymbol{\theta})\|^{2}\leq\epsilon.\] (2)

With the goal of reaching (2), there are two key challenges in our stochastic algorithm design: (i) to estimate the gradient \(\nabla\mathcal{L}(\boldsymbol{\theta})\), and (ii) to handle the _stateful_ setting where one cannot draw samples directly from the distribution \(\Pi_{\boldsymbol{\theta}}\). We shall discuss how the proposed \(\mathtt{DFO}\left(\lambda\right)\) algorithm, which is summarized in Algorithm 1, tackles the above issues through utilizing two ingredients: (a) two-timescales step sizes, and (b) sample accumulation with the forgetting factor \(\lambda\in[0,1)\).

**Estimating \(\nabla\mathcal{L}(\boldsymbol{\theta})\) via Two-timescales DFO.** First notice that the gradient of \(\mathcal{L}(\cdot)\) can be derived as

\[\nabla\mathcal{L}(\boldsymbol{\theta})=\mathbb{E}_{Z\sim\Pi_{ \boldsymbol{\theta}}}[\nabla\ell(\boldsymbol{\theta};Z)+\ell(\boldsymbol{ \theta};Z)\nabla_{\boldsymbol{\theta}}\log\Pi_{\boldsymbol{\theta}}(Z)],\] (3)

As a result, constructing the stochastic estimates of \(\nabla\mathcal{L}(\boldsymbol{\theta})\) typically requires knowledge of \(\Pi_{\boldsymbol{\theta}}(\cdot)\) which may not be known a-priori unless a separate estimation procedure is applied; see e.g., (Izzo et al., 2021). To avoid the need for direct evaluations of \(\nabla_{\boldsymbol{\theta}}\log\Pi_{\boldsymbol{\theta}}(Z)\), we consider an alternative design via zero-th order optimization (Ghadimi & Lan, 2013). The intuition comes from observing that with \(\delta\to 0^{+}\), \(\mathcal{L}(\boldsymbol{\theta}+\delta\boldsymbol{u})-\mathcal{L}(\boldsymbol {\theta})\) is an approximate of the directional derivative of \(\mathcal{L}\) along \(\boldsymbol{u}\). This suggests that an estimate for \(\nabla\mathcal{L}(\boldsymbol{\theta})\) can be constructed using the _objective function values_ of \(\ell(\boldsymbol{\theta};Z)\) only.

Inspired by the above, we aim to construct a gradient estimate by querying \(\ell(\cdot)\) at randomly perturbed points. Formally, given the current iterate \(\boldsymbol{\theta}\in\mathbb{R}^{d}\) and a query radius \(\delta>0\), we sample a vector \(\boldsymbol{u}\in\mathbb{R}^{d}\) uniformly from \(\mathbb{S}^{d-1}\). The zero-th order gradient estimator for \(\mathcal{L}(\boldsymbol{\theta})\) is then defined as

\[g_{\delta}(\boldsymbol{\theta};\boldsymbol{u},Z):=\frac{d}{\delta}\ell( \tilde{\boldsymbol{\theta}};Z)\,\boldsymbol{u}\quad\text{with}\quad\tilde{ \boldsymbol{\theta}}:=\boldsymbol{\theta}+\delta\boldsymbol{u},\;Z\sim\Pi_{ \tilde{\boldsymbol{\theta}}}(\cdot).\] (4)

In fact, as \(\boldsymbol{u}\) is zero-mean, \(g_{\delta}(\boldsymbol{\theta};\boldsymbol{u},Z)\) is an unbiased estimator for \(\nabla\mathcal{L}_{\delta}(\boldsymbol{\theta})\). Here, \(\mathcal{L}_{\delta}(\boldsymbol{\theta})\) is a smooth approximation of \(\mathcal{L}(\boldsymbol{\theta})\)(Flaxman et al., 2005; Nesterov & Spokoiny, 2017) defined as

\[\mathcal{L}_{\delta}(\boldsymbol{\theta})=\mathbb{E}_{\boldsymbol{u}}[ \mathcal{L}(\tilde{\boldsymbol{\theta}})]=\mathbb{E}_{\boldsymbol{u}}[ \mathbb{E}_{Z\sim\Pi_{\tilde{\boldsymbol{\theta}}}}[\ell(\tilde{\boldsymbol {\theta}};Z)]].\] (5)

Furthermore, it is known that under mild condition [cf. Assumption 3.1 to be discussed later], \(\|\nabla\mathcal{L}_{\delta}(\boldsymbol{\theta})-\nabla\mathcal{L}(\boldsymbol {\theta})\|=\mathcal{O}(\delta)\) and thus (4) is an \(\mathcal{O}(\delta)\)-biased estimate for \(\nabla\mathcal{L}(\boldsymbol{\theta})\).

We remark that the gradient estimator in (4) differs from the one used in classical works on DFO such as (Ghadimi and Lan, 2013). The latter takes the form of \(\frac{d}{\delta}(\ell(\bm{\theta};Z)-\ell(\bm{\theta};Z))\,\bm{u}\). Under the setting of standard stochastic optimization where the sample \(Z\) is drawn _independently_ of \(\bm{u}\) and Lipschitz continuous \(\ell(\cdot;Z)\), the said estimator in (Ghadimi and Lan, 2013) is shown to have constant variance while it remains \(\mathcal{O}(\delta)\)-biased. Such properties _cannot_ be transferred to (4) since \(Z\) is drawn from a distribution dependent on \(\bm{u}\) via \(\hat{\bm{\theta}}=\bm{\theta}+\delta\bm{u}\). In this case, the two-point gradient estimator would become biased; see SS4.1.

However, we note that the variance of (4) would increase as \(\mathcal{O}(1/\delta^{2})\) when \(\delta\to 0\), thus the parameter \(\delta\) yields a bias-variance trade off in the estimator design. To remedy for the increase of variance, the \(\texttt{DFO}\left(\lambda\right)\) algorithm incorporates a _two-timescale step size_ design for generating gradient estimates \((\delta_{k})\) and updating models (\(\eta_{k}\)), respectively. Our design principle is such that the models are updated at a _slower timescale_ to adapt to the gradient estimator with \(\mathcal{O}(1/\delta^{2})\) variance. Particularly, we will set \(\eta_{k+1}/\delta_{k+1}\to 0\) to handle the bias-variance trade off, e.g., by setting \(\alpha>\beta\) in line 4 of Algorithm 1.

**Markovian Data and Sample Accumulation.** We consider a setting where the sample/data distribution observed by the \(\texttt{DFO}\left(\lambda\right)\) algorithm evolves according to a _controlled Markov chain (MC)_. Notice that this describes a stateful agent(s) scenario such that the deployed models (\(\bm{\theta}\)) would require time to manifest their influence on the samples obtained; see (Li and Wai, 2022; Roy et al., 2022; Brown et al., 2022; Ray et al., 2022; Izzo et al., 2022).

To describe the setting formally, we denote \(\mathbb{T}_{\bm{\theta}}:\mathbb{Z}\times\mathcal{Z}\to\mathbb{R}_{+}\) as a Markov kernel controlled by a deployed model \(\bm{\theta}\). For a given \(\bm{\theta}\), the kernel has a unique stationary distribution \(\Pi_{\bm{\theta}}(\cdot)\). Under this setting, suppose that the previous state/sample is \(Z\), the next sample follows the distribution \(Z^{\prime}\sim\mathbb{T}_{\bm{\theta}}(Z,\cdot)\) which is not necessarily the same as \(\Pi_{\bm{\theta}}(\cdot)\). As a consequence, the gradient estimator (4) is not an unbiased estimator of \(\nabla\mathcal{L}_{\delta}(\bm{\theta})\) since \(Z\sim\Pi_{\bm{\theta}}(\cdot)\) cannot be conveniently accessed.

A common strategy in settling the above issue is to allow a _burn-in_ phase in the algorithm as in (Ray et al., 2022); also commonly found in MCMC methods (Robert et al., 1999). Using the fact that \(\mathbb{T}_{\bm{\theta}}\) admits the stationary distribution \(\Pi_{\bm{\theta}}\), if one can wait a sufficiently long time before applying the current sample, i.e., consider initializing with the previous sample \(Z^{(0)}=Z\), the procedure

\[Z^{(m)}\sim\mathbb{T}_{\bm{\theta}}(Z^{(m-1)},\cdot),\ m=1,\ldots,\tau,\] (6)

would yield a sample \(Z^{+}=Z^{(\tau)}\) that admits a distribution close to \(\Pi_{\bm{\theta}}\) provided that \(\tau\gg 1\) is sufficiently large compared to the mixing time of \(\mathbb{T}_{\bm{\theta}}\).

Intuitively, the procedure (6) may be inefficient as a number of samples \(Z^{(1)},Z^{(2)},\ldots,Z^{(\tau-1)}\) will be completely ignored at the end of each iteration. As a remedy, the \(\texttt{DFO}\left(\lambda\right)\) algorithm incorporates a sample accumulation mechanism which gathers the gradient estimates generated from possibly non-stationary samples via a forgetting factor of \(\lambda\in[0,1)\). Following (4), \(\nabla\mathcal{L}(\bm{\theta})\) is estimated by

\[\bm{g}=\tfrac{d}{\delta}\sum_{m=1}^{\tau}\lambda^{\tau-m}\ell(\bm{\theta}^{( m)}+\delta\bm{u};Z^{(m)})\,\bm{u},\ \ \text{with}\ \ Z^{(m)}\sim\mathbb{T}_{\bm{\theta}^{(m)}+\delta\bm{u}}(Z^{(m-1)},\cdot).\] (7)

At a high level, the mechanism works by assigning large weights to samples that are close to the end of an epoch (which are less biased). Moreover, \(\bm{\theta}^{(m)}\) is _simultaneously updated_ within the epoch to obtain an online algorithm that gradually improves the objective value of (1). Note that with \(\lambda=0\), the \(\texttt{DFO}(0)\) algorithm reduces into one that utilizes _burn-in_ (6). We remark that from the implementation perspective for performative prediction, Algorithm 1 corresponds to a _greedy deployment_ scheme (Perdomo et al., 2020) as the latest model \(\bm{\theta}_{k}^{(m)}+\delta_{k}\bm{u}_{k}\) is deployed at every sampling step. Line 6-10 of Algorithm 1 details the above procedure.

Lastly, we note that recent works have analyzed stochastic algorithms that rely on a _single trajectory_ of samples taken from a Markov Chain, e.g., (Sun et al., 2018; Karimi et al., 2019; Doan, 2022), that are based on stochastic gradient. Sun and Li (2019) considered a DFO algorithm for general optimization problems but the MC studied is not controlled by \(\bm{\theta}\).

## 3 Main Results

This section studies the convergence of the \(\texttt{DFO}\left(\lambda\right)\) algorithm and demonstrates that the latter finds an \(\epsilon\)-stationary solution [cf. (2)] to (1). We first state the assumptions required for our analysis:

**Assumption 3.1**.: **(Smoothness)**_\(\mathcal{L}(\bm{\theta})\) is differentiable, and there exists a constant \(L>0\) such that_

\[\left\|\nabla\mathcal{L}(\bm{\theta})-\nabla\mathcal{L}(\bm{\theta}^{\prime}) \right\|\leq L\left\|\bm{\theta}-\bm{\theta}^{\prime}\right\|,\ \forall\bm{\theta},\bm{\theta}^{\prime}\in\mathbb{R}^{d}.\]

**Assumption 3.2**.: **(Bounded Loss)** There exists a constant \(G>0\) such that

\[|\ell(\bm{\theta};z)|\leq G,\;\forall\;\bm{\theta}\in\mathbb{R}^{d},\;\forall\;z \in\mathsf{Z}.\]

**Assumption 3.3**.: **(Lipschitz Distribution Map)** There exists a constant \(L_{1}>0\) such that

\[\bm{\delta}_{\text{TV}}\left(\Pi_{\bm{\theta}_{1}},\Pi_{\bm{\theta}_{2}} \right)\leq L_{1}\left\|\bm{\theta}_{1}-\bm{\theta}_{2}\right\|\quad\forall \bm{\theta}_{1},\bm{\theta}_{2}\in\mathbb{R}^{d}.\]

The conditions above state that the gradient of the performative risk is Lipschitz continuous and the state-dependent distribution vary smoothly w.r.t. \(\bm{\theta}\). Note that Assumption 3.1 is found in recent works such as (Izzo et al., 2021; Ray et al., 2022), and Assumption 3.2 can be found in (Izzo et al., 2021). Assumption 3.3 is slightly strengthened from the Wasserstein-1 distance bound in (Perdomo et al., 2020), and it gives better control for distribution shift in our Markovian data setting.

Next, we consider the assumptions about the controlled Markov chain induced by \(\mathbb{T}_{\bm{\theta}}\):

**Assumption 3.4**.: **(Geometric Mixing)** Let \(\{Z_{k}\}_{k\geq 0}\) denote a Markov Chain on the state space \(\mathsf{Z}\) with transition kernel \(\mathbb{T}_{\bm{\theta}}\) and stationary measure \(\Pi_{\bm{\theta}}\). There exist constants \(\rho\in[0,1)\), \(M\geq 0\), such that for any \(k\geq 0\), \(z\in\mathsf{Z}\),

\[\bm{\delta}_{\text{TV}}\left(\mathbb{P}_{\bm{\theta}}(Z_{k}\in \cdot|Z_{0}=z),\Pi_{\bm{\theta}}\right)\leq M\rho^{k}.\]

**Assumption 3.5**.: **(Smoothness of Markov Kernel)** There exists a constant \(L_{2}\geq 0\) such that

\[\bm{\delta}_{\text{TV}}\left(\mathbb{T}_{\bm{\theta}_{1}}(z, \cdot),\mathbb{T}_{\bm{\theta}_{2}}(z,\cdot)\right)\leq L_{2}\left\|\bm{ \theta}_{1}-\bm{\theta}_{2}\right\|,\;\forall\bm{\theta}_{1},\bm{\theta}_{2} \in\mathbb{R}^{d},\;z\in\mathsf{Z}.\]

Assumption 3.4 is a standard condition on the mixing time of the Markov chain induced by \(\mathbb{T}_{\bm{\theta}}\); Assumption 3.5 imposes a smoothness condition on the Markov transition kernel \(\mathbb{T}_{\bm{\theta}}\) with respect to \(\bm{\theta}\). For instance, the geometric dynamically environment in Ray et al. (2022) constitutes a special case which satisfies the above conditions.

Unlike (Ray et al., 2022; Izzo et al., 2021; Miller et al., 2021), we do not impose any additional assumption (such as mixture dominance) other than Assumption 3.3 on \(\Pi_{\bm{\theta}}\). As a result, (1) remains an 'unstructured' non-convex optimization problem. Our main theoretical result on the convergence of the \(\texttt{DFO}\left(\lambda\right)\) algorithm towards a near-stationary solution of (1) is summarized as:

**Theorem 3.1**.: _Suppose Assumptions 3.1-3.5 hold, step size sequence \(\{\eta_{k}\}_{k\geq 1}\), and query radius sequence \(\{\delta_{k}\}_{k\geq 1}\) satisfy the following conditions,_

\[\begin{split}\eta_{k}&=d^{-2/3}\cdot(1+k)^{-2/3}, \quad\delta_{k}=d^{1/3}\cdot(1+k)^{-1/6},\\ \tau_{k}&=\max\{1,\frac{2}{\log 1/\max\{\rho, \lambda\}}\log(1+k)\}\quad\forall k\geq 0.\end{split}\] (8)

_Then, there exists constants \(t_{0}\), \(c_{5},c_{6},c_{7}\), such that for any \(T\geq t_{0}\), the iterates \(\{\bm{\theta}_{k}\}_{k\geq 0}\) generated by \(\texttt{DFO}(\lambda)\) satisfy the following inequality,_

\[\min_{0\leq k\leq T}\mathbb{E}\left\|\nabla\mathcal{L}(\bm{\theta}_{k})\right\| ^{2}\leq 12\max\left\{c_{5}(1-\lambda),c_{6},\frac{c_{7}}{1-\lambda}\right\} \frac{d^{2/3}}{(T+1)^{1/3}}.\] (9)

We have defined the following quantities and constants:

\[c_{5}=2G,\quad c_{6}=\frac{\max\{L^{2},G^{2}(1-\beta)\}}{1-2\beta},\quad c_{7} =\frac{LG^{2}}{2\beta-\alpha+1},\] (10)

with \(\alpha=\frac{2}{3},\beta=\frac{1}{6}\). Observe the following corollary on the iteration complexity of \(\texttt{DFO}\left(\lambda\right)\) algorithm:

**Corollary 3.1**.: _(\(\epsilon\)-stationarity) Suppose that the Assumptions of Theorem 3.1 hold. Fix any \(\epsilon>0\), the condition \(\min_{0\leq k\leq T-1}\mathbb{E}\left\|\nabla\mathcal{L}(\bm{\theta}_{k}) \right\|^{2}\leq\epsilon\) holds whenever_

\[T\geq\left(12\max\left\{c_{5}(1-\lambda),c_{6},\frac{c_{7}}{1-\lambda}\right\} \right)^{3}\frac{d^{2}}{\epsilon^{3}}.\] (11)

In the corollary above, the lower bound on \(T\) is expressed in terms of the number of epochs that Algorithm 1 needs to achieve the target accuracy. Consequently, the total number of samples required (i.e., the number of inner iterations taken in Line 6-9 of Algorithm 1 across all epochs) is:

\[\mathsf{S}_{\epsilon}=\sum_{k=1}^{T}\tau_{k}=\mathcal{O}\left( \frac{d^{2}}{\epsilon^{3}}\log(1/\epsilon)\right).\] (12)We remark that due to the decision-dependent properties of the samples, the \(\texttt{DFO}\left(\lambda\right)\) algorithm exhibits a worse sampling complexity (12) than prior works in stochastic DFO algorithm, e.g., (Ghadimi and Lan, 2013) which shows a rate of \(\mathcal{O}(d/\epsilon^{2})\) on non-convex smooth objective functions. In particular, the adopted one-point gradient estimator in (4) admits a variance that can only be controlled by a time varying \(\delta\); see the discussions in SS4.1.

Achieving the desired convergence rate requires setting \(\eta_{k}=\Theta(k^{-2/3})\), \(\delta_{k}=\Theta(k^{-1/6})\), i.e., yielding a two-timescale step sizes design with \(\eta_{k}/\delta_{k}\to 0\). Notice that the influence of forgetting factor \(\lambda\) are reflected in the constant factor of (9). Particularly, if \(c_{5}>c_{7}\) and \(c_{5}\geq c_{6}\), the optimal choice is \(\lambda=1-\sqrt{\frac{c_{7}}{c_{5}}}\), otherwise the optimal choice is \(\lambda\in[0,1-c_{7}/c_{6}]\). Informally, this indicates that when the performative risk is smoother (i.e. its gradient has a small Lipschitz constant), a large \(\lambda\) can speed up the convergence of the algorithm; otherwise a smaller \(\lambda\) is preferable.

## 4 Proof Outline of Main Results

This section outlines the key steps in proving Theorem 3.1. Notice that analyzing the \(\texttt{DFO}\left(\lambda\right)\) algorithm is challenging due to the two-timescales step sizes and Markov chain samples with time varying kernel. Our analysis departs significantly from prior works such as (Ray et al., 2022; Izzo et al., 2021; Brown et al., 2022; Li and Wai, 2022) to handle the challenges above.

Let \(\mathcal{F}^{k}=\sigma(\bm{\theta}_{0},Z_{s}^{(m)},u_{s},0\leq s\leq k,0\leq m \leq\tau_{k})\) be the filtration. Our first step is to exploit the smoothness of \(\mathcal{L}(\bm{\theta})\) to bound the squared norms of gradient. Observe that:

**Lemma 4.1**.: **(Decomposition)** _Under Assumption 3.1, it holds that_

\[\sum_{k=0}^{t}\mathbb{E}\left\|\nabla\mathcal{L}(\bm{\theta}_{k})\right\|^{2 }\leq\mathbf{I}_{1}(t)+\mathbf{I}_{2}(t)+\mathbf{I}_{3}(t)+\mathbf{I}_{4}(t),\] (13)

_for any \(t\geq 1\), where_

\[\mathbf{I}_{1}(t) :=\sum_{k=1}^{t}\frac{1-\lambda}{\eta_{k}}\left(\mathbb{E}\left[ \mathcal{L}(\bm{\theta}_{k})\right]-\mathbb{E}\left[\mathcal{L}(\bm{\theta}_{ k+1})\right]\right)\] \[\mathbf{I}_{2}(t)\] \[\mathbf{I}_{3}(t)\] \[\mathbf{I}_{4}(t)\]

The lemma is achieved through the standard descent lemma implied by Assumption 3.1 and decomposing the upper bound on \(\|\nabla\mathcal{L}(\bm{\theta}_{k})\|^{2}\) into respectful terms; see the proof in Appendix A. Among the terms on the right hand side of (13), we note that \(\mathbf{I}_{1}(t),\mathbf{I}_{3}(t)\) and \(\mathbf{I}_{4}(t)\) arises directly from Assumption 3.1, while \(\mathbf{I}_{2}(t)\) comes from bounding the noise terms due to Markovian data.

We bound the four components in Lemma 4.1 as follows. For simplicity, we denote \(\mathcal{A}(t):=\frac{1}{1+\ell}\sum_{k=0}^{t}\mathbb{E}\left\|\nabla \mathcal{L}(\bm{\theta}_{k})\right\|^{2}\). Among the four terms, we highlight that the main challenge lies on obtaining a tight bound for \(\mathbf{I}_{2}(t)\). Observe that

\[\mathbf{I}_{2}(t)\leq(1-\lambda)\mathbb{E}\left[\sum_{k=0}^{t}\|\nabla \mathcal{L}(\bm{\theta}_{k})\|\cdot\bigg{\|}\sum_{m=1}^{\tau_{k}}\lambda^{ \tau_{k}-m}\Delta_{k,m}\bigg{\|}\right]\] (14)

where \(\Delta_{k,m}\!\stackrel{{\text{def}}}{{=}}\!\mathbb{E}_{\mathcal{ F}^{k}\sim}[g_{k}^{(m)}\!-\!\mathbb{E}_{Z\sim\Pi_{\bm{\theta}_{k}}}g_{k}(\bm{ \theta}_{k};u_{k},Z)]\). There are two sources of bias in \(\Delta_{k,m}\): one is the noise induced by drifting of decision variable in every epoch, the other is the bias that depends on the mixing time of Markov kernel. To control these biases, we are inspired by the proof of (Wu et al., 2020, Theorem 4.7) to introduce a reference Markov chain \(\tilde{Z}_{k}^{(\ell)}\), \(\ell=0,...,\tau_{k}\), whose decision variables remains fixed for a period of length \(\tau_{k}\) and is initialized with \(\tilde{Z}_{k}^{(0)}=Z_{k}^{(0)}\):

\[\tilde{Z}_{k}^{(0)}\stackrel{{\bm{\theta}_{k}}}{{\longrightarrow}} \tilde{Z}_{k}^{(1)}\stackrel{{\bm{\theta}_{k}}}{{\longrightarrow}} \tilde{Z}_{k}^{(2)}\stackrel{{\bm{\theta}_{k}}}{{\longrightarrow}} \tilde{Z}_{k}^{(3)}\cdots\stackrel{{\bm{\theta}_{k}}}{{ \longrightarrow}}\tilde{Z}_{k}^{(\tau_{k})}\] (15)

and we recall that the actual chain in the algorithm evolves as

\[Z_{k}^{(0)}\stackrel{{\bm{\theta}_{k+1}^{(0)}}}{{\longrightarrow}} Z_{k}^{(1)}\stackrel{{\bm{\theta}_{k+1}^{(1)}}}{{\longrightarrow}}Z_{k}^{(2)} \cdots\stackrel{{\bm{\theta}_{k+1}^{(\tau_{k}-1)}}}{{ \longrightarrow}}Z_{k}^{(\tau_{k})}.\] (16)With the help of the reference chain, we decompose \(\Delta_{k,m}\) into

\[\Delta_{k,m} =\mathbb{E}_{\mathcal{F}^{k-1}}\left[\frac{d}{\delta_{k}}\left( \mathbb{E}[\ell(\tilde{\bm{\theta}}_{k}^{(m)};Z_{k}^{(m)})|\tilde{\bm{\theta}}_ {k}^{(m)},Z_{k}^{(0)}]-\mathbb{E}_{\tilde{Z}_{k}^{(m)}}[\ell(\tilde{\bm{\theta} }_{k}^{(m)};\tilde{Z}_{k}^{(m)})|\tilde{\bm{\theta}}_{k}^{(m)},\tilde{Z}_{k}^{(0 )}]\right)u_{k}\right]\] \[+\mathbb{E}_{\mathcal{F}^{k-1}}\frac{d}{\delta_{k}}\mathbb{E}_{ \mathbb{Z}_{\sim\Pi_{\bm{\theta}_{k}}}}\left[\ell(\tilde{\bm{\theta}}_{k}^{(m) };\tilde{Z}_{k}^{(m)})|\tilde{\bm{\theta}}_{k}^{(m)},\tilde{Z}_{k}^{(0)} \right]-\mathbb{E}_{Z\sim\Pi_{\tilde{\bm{\theta}}_{k}}}[\ell(\tilde{\bm{\theta }}_{k}^{(m)};Z)|\tilde{\bm{\theta}}_{k}^{(m)}]\right)u_{k}\bigg{]}\] \[+\mathbb{E}_{\mathcal{F}^{k-1}}\frac{d}{\delta_{k}}\mathbb{E}_{Z \sim\Pi_{\bm{\theta}_{k}}}\left[\ell(\tilde{\bm{\theta}}_{k}^{(m)};Z)-\ell( \tilde{\bm{\theta}}_{k};Z)|\tilde{\bm{\theta}}_{k}^{(m)},\tilde{\bm{\theta}}_ {k}\right]u_{k}:=A_{1}+A_{2}+A_{3}\]

We remark that \(A_{1}\) reflects the drift of (16) from initial sample \(Z_{k}^{(0)}\) driven by varying \(\tilde{\bm{\theta}}_{k}^{(m)}\), \(A_{2}\) captures the statistical discrepancy between above two Markov chains (16) and (15) at same step \(m\), and \(A_{3}\) captures the drifting gap between \(\tilde{\bm{\theta}}_{k}\) and \(\tilde{\bm{\theta}}_{k}^{(m)}\). Applying Assumption 3.3, \(A_{1}\) and \(A_{2}\) can be upper bounded with the smoothness and geometric mixing property of Markov kernel. In addition, \(A_{3}\) can be upper bounded using Lipschitz condition on (stationary) distribution map \(\Pi_{\bm{\theta}}\). Finally, the forgetting factor \(\lambda\) helps to control \(\|\tilde{\bm{\theta}}_{k}^{(\cdot)}-\tilde{\bm{\theta}}_{k}\|\) to be at the same order of a single update. Therefore, \(\|\Delta_{k,m}\|\) can be controlled by an upper bound relying on \(\lambda,\rho,L\).

The following lemma summarizes the above results as well as the bounds on the other terms:

**Lemma 4.2**.: _Under Assumption 3.2, 3.3, 3.4 and 3.5, with \(\eta_{t+1}=\eta_{0}(1+t)^{-\alpha}\), \(\delta_{t+1}=\delta_{0}(1+t)^{-\beta}\) and \(\alpha\in(0,1)\), \(\beta\in(0,\frac{1}{2})\). Suppose that \(0<2\alpha-4\beta<1\) and_

\[\tau_{k}\geq\frac{1}{\log 1/\max\{\rho,\lambda\}}\left(\log(1+k)+\max\{\log \frac{\delta_{0}}{d},0\}\right).\]

_Then, it holds that_

\[\mathbf{I}_{2}(t) \leq\frac{c_{2}d^{5/2}}{(1-\lambda)^{2}}\mathcal{A}(t)^{\frac{1}{ 2}}(1+t)^{1-(\alpha-2\beta)},\quad\forall\;t\geq\max\{t_{1},t_{2}\}\] (17) \[\mathbf{I}_{1}(t) \leq c_{1}(1-\lambda)(1+t)^{\alpha},\;\;\mathbf{I}_{3}(t)\leq c_{ 3}\mathcal{A}(t)^{\frac{1}{2}}(1+t)^{1-\beta},\;\;\mathbf{I}_{4}(t)\leq\frac{ c_{4}d^{2}}{1-\lambda}(1+t)^{1-(\alpha-2\beta)},\] (18)

_where \(t_{1},t_{2}\) are defined in (25), (26), and \(c_{1},c_{2},c_{3},c_{4}\) are constants defined as follows:_

\[c_{1} :=2G/\eta_{0},\;\;c_{2}:=\frac{\eta_{0}}{\delta_{0}^{2}}\frac{6 \cdot(L_{1}G^{2}+L_{2}G^{2}+\sqrt{L}G^{3/2})}{\sqrt{1-2\alpha+4\beta}},\] \[c_{3} :=\frac{2}{\sqrt{1-2\beta}}\max\{L\delta_{0},G\sqrt{1-\beta}\}, \;\;c_{4}:=\frac{\eta_{0}}{\delta_{0}^{2}}\cdot\frac{LG^{2}}{2\beta-\alpha+1}.\]

See Appendix B for the proof. We comment that the bound for \(\mathbf{I}_{4}(t)\) cannot be improved. As a concrete example, consider the constant function \(\ell(\bm{\theta};z)=c\neq 0\) for all \(z\in\mathsf{Z}\), it can be shown that \(\|g_{k}^{(m)}\|^{2}=c^{2}\) and consequently \(\mathbf{I}_{4}(t)=\Omega(\eta_{k}/\delta_{k}^{2})=\Omega(t^{1-(\alpha-2\beta)})\), which matches (18). Finally, plugging Lemma 4.2 into Lemma 4.1 gives:

\[\mathcal{A}(t)\leq\frac{c_{1}(1-\lambda)}{(1+t)^{1-\alpha}}+\frac{c_{2}d^{5/2}} {(1-\lambda)^{2}}\frac{\mathcal{A}(t)^{\frac{1}{2}}}{(1+t)^{\alpha-2\beta}}+c_ {3}\frac{\mathcal{A}(t)^{\frac{1}{2}}}{(1+t)^{\beta}}+c_{4}\frac{d^{2}}{1- \lambda}\frac{1}{(1+t)^{\alpha-2\beta}}.\] (19)

Since \(\mathcal{A}(t)\geq 0\), the above is a quadratic inequality that implies the following bound:

**Lemma 4.3**.: _Under Assumption 3.1-3.5, with the step sizes \(\eta_{t+1}=\eta_{0}(1+t)^{-\alpha}\), \(\delta_{t+1}=\delta_{0}(1+t)^{-\beta},\tau_{k}\geq\frac{1}{\log 1/\max\{\rho, \lambda\}}\left(\log(1+k)+\max\{\log\frac{\delta_{0}}{d},0\}\right)\), \(\eta_{0}=d^{-2/3},\delta_{0}=d^{1/3}\), \(\alpha\in(0,1)\), \(\beta\in(0,\frac{1}{2})\). If \(2\alpha-4\beta<1\), then there exists a constant \(t_{0}\) such that the iterates \(\{\bm{\theta}_{k}\}_{k\geq 0}\) satisfies_

\[\frac{1}{1+T}\sum_{k=0}^{T}\mathbb{E}\left\|\nabla\mathcal{L}(\bm{\theta}_{k}) \right\|^{2}\leq 12\max\{c_{5}(1-\lambda),c_{6},\frac{c_{7}}{1-\lambda}\}d^{2/3}T^{- \min\{2\beta,1-\alpha,\alpha-2\beta\}},\;\forall\;T\geq t_{0}.\]

Optimizing the step size exponents \(\alpha,\beta\) in the above concludes the proof of Theorem 3.1.

### Discussions

We conclude by discussing two alternative zero-th order gradient estimators to (4), and argue that they do not improve over the sample complexity in the proposed \(\mathtt{DFO}\left(\lambda\right)\) algorithm. We study:

\[\bm{g}_{\mathtt{2pt-l}}:=\tfrac{d}{\delta}\left[\ell\left(\bm{\theta}+\delta\bm{u };Z\right)-\ell(\bm{\theta};Z)\right]\bm{u},\quad\bm{g}_{\mathtt{2pt-l}}:= \tfrac{d}{\delta}\left[\ell\left(\bm{\theta}+\delta\bm{u};Z_{1}\right)-\ell( \bm{\theta};Z_{2})\right]\bm{u},\] (20)

where \(\bm{u}\sim\text{Unif}(\mathbb{S}^{d-1})\). For ease of illustration, we assume that the samples \(Z,Z_{1},Z_{2}\) are drawn directly from the stationary distributions \(Z\sim\Pi_{\bm{\theta}+\delta\bm{u}}\), \(Z_{1}\sim\Pi_{\bm{\theta}+\delta\bm{u}}\), \(Z_{2}\sim\Pi_{\bm{\theta}}\).

We recall from SS2 that the estimator \(\bm{g}_{\mathtt{2pt-l}}\) is a finite difference approximation of the directional derivative of objective function along the randomized direction \(\bm{u}\)1, as proposed in Nesterov and Spokoiny (2017); Ghadimi and Lan (2013). For non-convex stochastic optimization with decision independent sample distribution, i.e., \(\Pi_{\bm{\theta}}\equiv\bar{\Pi}\) for all \(\bm{\theta}\), the DFO algorithm based on \(\bm{g}_{\mathtt{2pt-l}}\) is known to admit an optimal sample complexity of \(\mathcal{O}(1/\epsilon^{2})\)(Jamieson et al., 2012). Note that \(\mathbb{E}_{\bm{u}\sim\text{Unif}(\mathbb{S}^{d-1}),Z\sim\mathbb{I}}[\ell(\bm {\theta};Z)\bm{u}]=\bm{0}\). However, in the case of decision-dependent sample distribution as in (1), \(\bm{g}_{\mathtt{2pt-l}}\) would become a _biased_ estimator since the sample \(Z\) is drawn from \(\Pi_{\bm{\theta}+\delta\bm{u}}\) which depends on \(\bm{u}\). The DFO algorithm based on \(\bm{g}_{\mathtt{2pt-l}}\) may not converge to a stationary solution of (1).

Footnote 1: Note that in Nesterov and Spokoiny (2017); Ghadimi and Lan (2013), the random vector \(\bm{u}\) is drawn from a Gaussian distribution.

A remedy to handle the above issues is to consider the estimator \(\bm{g}_{\mathtt{2pt-l}}\) which utilizes _two samples_\(Z_{1},Z_{2}\), each independently drawn at a different decision variable, to form the gradient estimate. In fact, it can be shown that \(\mathbb{E}[\bm{g}_{\mathtt{2pt-l}}]=\nabla\mathcal{L}_{\delta}(\bm{\theta})\) yields an unbiased gradient estimator. However, due to the decoupled random samples \(Z_{1},Z_{2}\), we have

\[\mathbb{E}\left\|\bm{g}_{\mathtt{2pt-l}}\right\|^{2}=\mathbb{E} \left[\left(\ell\left(\bm{\theta}+\delta\bm{u};Z_{1}\right)-\ell(\bm{\theta}; Z_{1})+\ell(\bm{\theta};Z_{1})-\ell(\bm{\theta};Z_{2})\right)^{2}\right]\frac{d^{2}}{ \delta^{2}}\] \[\overset{(a)}{\geq}\mathbb{E}\left[\frac{3}{4}\left(\ell(\bm{ \theta};Z_{1})-\ell(\bm{\theta};Z_{2})\right)^{2}-3\left(\ell\left(\bm{\theta} +\delta\bm{u};Z_{1}\right)-\ell(\bm{\theta};Z_{1})\right)^{2}\right]\frac{d^{ 2}}{\delta^{2}}\] \[=\frac{3}{2}\mathsf{Var}[\ell(\bm{\theta};Z)]\frac{d^{2}}{\delta ^{2}}-3\mathbb{E}\left[\left(\ell\left(\bm{\theta}+\delta\bm{u};Z_{1}\right)- \ell(\bm{\theta};Z_{1})\right)^{2}\right]\frac{d^{2}}{\delta^{2}}\overset{(b) }{\geq}\frac{3}{2}\frac{\sigma^{2}d^{2}}{\delta^{2}}-3\mu^{2}d^{2}=\Omega(1/ \delta^{2}).\]

where in (a) we use the fact that \((x+y)^{2}\geq\frac{3}{4}x^{2}-3y^{2}\), in (b) we assume \(\mathsf{Var}[\ell(\bm{\theta};Z)]:=\mathbb{E}\left(\ell(\bm{\theta};Z)-\mathcal{ L}(\bm{\theta})\right)^{2}\geq\sigma^{2}>0\) and \(\ell(\bm{\theta};z)\) is \(\mu\)-Lipschitz in \(\bm{\theta}\). As such, this two-point gradient estimator does not reduce the variance when compared with the estimator in (4). Note that a two-sample estimator also incurs additional sampling overhead in the scenario of Markovian samples.

## 5 Numerical Experiments

We examine the efficacy of the \(\mathtt{DFO}\left(\lambda\right)\) algorithm on a few toy examples by comparing \(\mathtt{DFO}\left(\lambda\right)\) with a simple stochastic gradient descent scheme with greedy deployment. Unless otherwise specified, we use the step size choices in (8) for \(\mathtt{DFO}\left(\lambda\right)\). All experiments are conducted on a server with an Intel Xeon 6318 CPU using Python 3.7. To measure performance, we record the gradient norm \(\left\|\nabla\mathcal{L}(\bm{\theta})\right\|\) and estimate its expected value using at least \(8\) trials.

**1-Dimensional Case: Quadratic Loss.** The first example considers a scalar quadratic loss function \(\ell:\mathbb{R}\times\mathbb{R}\rightarrow\mathbb{R}\) defined by \(\ell(\bm{\theta};z)=\frac{1}{12}z\bm{\theta}(3\bm{\theta}^{2}-8\bm{\theta}-48)\). To simulate the controlled Markov chain scenario, the samples are generated dynamically according to an auto-regressive (AR) process \(Z_{t+1}=(1-\gamma)Z_{t}+\gamma\bar{Z}_{t+1}\) with \(\bar{Z}_{t+1}\sim\mathcal{N}(\bm{\theta},\frac{(2-\gamma)}{\gamma}\sigma^{2})\) with parameter \(\gamma\in(0,1)\). Note that the stationary distribution of the AR process is \(\Pi_{\bm{\theta}}=\mathcal{N}(\bm{\theta},\sigma^{2})\). As such, the performative risk function in this case is \(\mathcal{L}(\bm{\theta})=\mathbb{E}_{Z\sim\Pi_{\bm{\theta}}}\left[\ell(\bm{ \theta};Z)\right]=\frac{\bm{\theta}^{2}}{12}(\bm{\theta}^{2}-8\bm{\theta}-48)\), which is quartic in \(\bm{\theta}\). Note that \(\mathcal{L}(\bm{\theta})\) is not convex in \(\bm{\theta}\) and the set of stationary solution is \(\{\bm{\theta}:\nabla\mathcal{L}(\bm{\theta})=0\}=\{4,0,-2\}\), among which the optimal solution is \(\bm{\theta}_{PO}=\arg\min_{\bm{\theta}}\mathcal{L}(\bm{\theta})=4\).

In our experiments below, we initialize all the algorithms are initialized by \(\bm{\theta}_{0}=6\). In Figure 1 (left), we compare the norms of the gradient for performative risk with pure \(\mathtt{DFO}\left(\text{no burn-in}\right)\), the \(\mathtt{DFO}\left(\lambda\right)\) algorithm, and stochastic gradient descent with greedy deployment scheme (SGD-GD) against the number of samples observed by the algorithms. We first observe from Figure 1 (left) that pure \(\mathtt{DFO}\) and \(\mathtt{SGD-GD}\) methods do not converge to a stationary point to \(\mathcal{L}(\bm{\theta})\) even after more samplesare observed. On the other hand, \(\texttt{DFO}\left(\lambda\right)\) converges to a stationary point of \(\mathcal{L}(\bm{\theta})\) at the rate of \(\|\nabla\mathcal{L}(\bm{\theta})\|^{2}=\mathcal{O}(1/S^{0.36})\), matching Theorem 3.1 that predicts a rate of \(\mathcal{O}(1/S^{1/3})\), where \(S\) is the total number of samples observed.

Besides, we observe that with large \(\lambda=0.75\), \(\texttt{DFO}\left(\lambda\right)\) converges at a faster rate at the beginning (i.e., transient phase), but the convergence rate slows down at the steady phase (e.g., when no. of samples observed is greater than \(10^{6}\)) compared to running the same algorithm with smaller \(\lambda\).

**Higher Dimension Case: Markovian Pricing.** The second example examines a multi-dimensional (\(d=5\)) pricing problem similar to (Izzo et al., 2021, Sec. 5.2). The decision variable \(\bm{\theta}\in\mathbb{R}^{5}\) denotes the prices of \(d=5\) goods and \(\kappa\) is a drifting parameter for the prices. Our goal is to maximize the average revenue \(\mathbb{E}_{Z\sim\Pi_{\bm{\theta}}}[\ell(\bm{\theta};Z)]\) with \(\ell(\bm{\theta};z)=-\langle\bm{\theta}\,|\,z\rangle\), where \(\Pi_{\bm{\theta}}\equiv\mathcal{N}(\bm{\mu}_{0}-\kappa\bm{\theta},\sigma^{2} \bm{I})\) is the unique stationary distribution of the Markov process (i.e., an AR process)

\[Z_{t+1}=(1-\gamma)Z_{t}+\gamma\tilde{Z}_{t+1}\;\;\text{with}\;\;\tilde{Z}_{t+ 1}\sim\mathcal{N}(\bm{\mu}_{0}-\kappa\bm{\theta},\tfrac{2-\gamma}{\gamma} \sigma^{2}\bm{I}).\]

Note that in this case, the performative optimal solution is \(\bm{\theta}_{PO}=\arg\min_{\bm{\theta}}\mathcal{L}(\bm{\theta})=\bm{\mu}_{0}/( 2\kappa)\).

We set \(\gamma=0.5,\sigma=5\), drifting parameter \(\kappa=0.5\), initial mean of non-shifted distribution \(\bm{\mu}_{0}=[-2,2,-2,2,-2]^{\top}\). All the algorithms are initialized by \(\bm{\theta}_{0}=[2,-2,2,-2,2]^{\top}\). We simulate the convergence behavior for different algorithms in Figure 1 (middle). Observe that the differences between the \(\texttt{DFO}\left(\lambda\right)\) algorithms with different \(\lambda\) becomes less significant than Figure 1 (left).

**Markovian Performance Regression.** The last example considers the linear regression problem in (Nagaraj et al., 2020) which is a prototype problem for studying stochastic optimization with Markovian data (e.g., reinforcement learning). Unlike the previous examples, this problem involves a pair of correlated r.v.s that follows a decision-dependent joint distribution. We adopt a setting similar to the regression example in (Izzo et al., 2021), where \((X,Y)\sim\Pi_{\bm{\theta}}\) with \(X\sim\mathcal{N}(0,\sigma_{1}^{2}\bm{I}),Y|X\sim\mathcal{N}\left(\left\langle \beta(\bm{\theta})\,|\,X\right\rangle,\sigma_{2}^{2}\right)\), \(\beta(\bm{\theta})=\bm{a}_{0}+a_{1}\bm{\theta}\). The loss function is \(\ell(\bm{\theta};x,y)=\left(\left\langle x\,|\,\bm{\theta}\right\rangle-y \right)^{2}+\tfrac{\mu}{2}\left\|\bm{\theta}\right\|^{2}\). In this case, the performative risk is:

\[\mathcal{L}(\bm{\theta})=\mathbb{E}_{\Pi_{\bm{\theta}}}\left[\ell(\bm{\theta}; X,Y)\right]=(\sigma_{1}^{2}a_{1}^{2}-2\sigma_{1}^{2}a_{1}+\sigma_{1}^{2}+ \tfrac{\mu}{2})\left\|\bm{\theta}\right\|^{2}-2\sigma_{1}^{2}(1-a_{1})\bm{ \theta}^{\top}\bm{a}_{0}+\sigma_{1}^{2}\left\|\bm{a}_{0}\right\|^{2}+\sigma_{2 }^{2},\]

For simplicity, we assume \(\sigma_{1}^{2}(1-a_{1})=\sigma_{1}^{2}a_{1}^{2}-2\sigma_{1}^{2}a_{1}+\sigma_{ 1}^{2}+\mu/2\), from which we can deduce \(\bm{\theta}_{PO}=\bm{a}_{0}\). In this experiment, we consider Markovian samples \((X_{t},Y_{t})_{t=1}^{T}\) drawn from an AR process:

\[(\tilde{X}_{t},\tilde{Y}_{t})=(1-\gamma)(\tilde{X}_{t-1},\tilde{Y}_{t-1})+ \gamma(X_{t},Y_{t}),\]

for any \(t\geq 1\). We set \(d=5\), \(a_{0}=[-1,1,-1,1,-1]^{\top}\), \(a_{1}=0.5,\sigma_{1}^{2}=\sigma_{2}^{2}=1\), regularization parameter \(\mu=0.5\), mixing parameter \(\gamma=0.1\). The algorithms are initialized with \(\bm{\theta}_{0}=[1,-1,1,-1,1]^{\top}\). Figure 1 (right) shows the result of the simulation. Similar to the previous examples, we observe that pure DFO and SGD fail to find a stationary solution to \(\mathcal{L}(\bm{\theta})\). Meanwhile, \(\texttt{DFO}\left(\lambda\right)\) converges to a stationary solution after a reasonable number of samples are observed.

**Conclusions.** We have described a derivative-free optimization approach for finding a stationary point of the performative risk function. In particular, we consider a non-i.i.d. data setting with samples generated from a controlled Markov chain and propose a two-timescale step sizes approach in constructing the gradient estimator. The proposed \(\texttt{DFO}\left(\lambda\right)\) algorithm is shown to converge to a stationary point of the performative risk function at the rate of \(\mathcal{O}(1/T^{1/3})\).

Figure 1: (_left_) One Dimension Quadratic Minimization problem with samples generated by AR distribution model where regressive parameter \(\gamma=0.5\). (_middle_) Markovian Pricing Problem with \(d=5\) dimension. (_right_) Linear Regression problem based on AR distribution model (\(\gamma=0.5\)).

## References

* Agarwal et al. (2010) Agarwal, A., Dekel, O., and Xiao, L. Optimal algorithms for online convex optimization with multi-point bandit feedback. In _Annual Conference Computational Learning Theory_, 2010.
* Brown et al. (2022) Brown, G., Hod, S., and Kalemaj, I. Performative prediction in a stateful world. In _International Conference on Artificial Intelligence and Statistics_, pp. 6045-6061. PMLR, 2022.
* Doan (2022) Doan, T. T. Finite-time analysis of markov gradient descent. _IEEE Transactions on Automatic Control_, 2022.
* Dong et al. (2018) Dong, J., Roth, A., Schutzman, Z., Waggoner, B., and Wu, Z. S. Strategic classification from revealed preferences. In _Proceedings of the 2018 ACM Conference on Economics and Computation_, pp. 55-70, 2018.
* Drusvyatskiy & Xiao (2022) Drusvyatskiy, D. and Xiao, L. Stochastic optimization with decision-dependent distributions. _Mathematics of Operations Research_, 2022.
* Flaxman et al. (2005) Flaxman, A. D., Kalai, A. T., and McMahan, H. B. Online convex optimization in the bandit setting: Gradient descent without a gradient. In _Proceedings of the Sixteenth Annual ACM-SIAM Symposium on Discrete Algorithms_, SODA '05, pp. 385-394, USA, 2005. Society for Industrial and Applied Mathematics. ISBN 0898715857.
* Ghadimi & Lan (2013) Ghadimi, S. and Lan, G. Stochastic first- and zeroth-order methods for nonconvex stochastic programming, 2013. URL https://arxiv.org/abs/1309.5549.
* Hardt et al. (2016) Hardt, M., Megiddo, N., Papadimitriou, C., and Wootters, M. Strategic classification. In _Proceedings of the 2016 ACM conference on innovations in theoretical computer science_, pp. 111-122, 2016.
* Izzo et al. (2021) Izzo, Z., Ying, L., and Zou, J. How to learn when data reacts to your model: Performative gradient descent. In Meila, M. and Zhang, T. (eds.), _Proceedings of the 38th International Conference on Machine Learning_, volume 139 of _Proceedings of Machine Learning Research_, pp. 4641-4650. PMLR, 18-24 Jul 2021. URL https://proceedings.mlr.press/v139/izzo21a.html.
* Izzo et al. (2022) Izzo, Z., Zou, J., and Ying, L. How to learn when data gradually reacts to your model. In _International Conference on Artificial Intelligence and Statistics_, pp. 3998-4035. PMLR, 2022.
* Jamieson et al. (2012) Jamieson, K. G., Nowak, R., and Recht, B. Query complexity of derivative-free optimization. In Pereira, F., Burges, C., Bottou, L., and Weinberger, K. (eds.), _Advances in Neural Information Processing Systems_, volume 25. Curran Associates, Inc., 2012. URL https://proceedings.neurips.cc/paper/2012/file/e6d8546aa42d5ced125a4bf747b3688-Paper.pdf.
* Karimi et al. (2019) Karimi, B., Miasojedow, B., Moulines, E., and Wai, H.-T. Non-asymptotic analysis of biased stochastic approximation scheme. In _Conference on Learning Theory_, pp. 1944-1974. PMLR, 2019.
* Li & Wai (2022) Li, Q. and Wai, H.-T. State dependent performative prediction with stochastic approximation. In _International Conference on Artificial Intelligence and Statistics_, pp. 3164-3186. PMLR, 2022.
* Mendler-Dunner et al. (2020) Mendler-Dunner, C., Perdomo, J., Zrnic, T., and Hardt, M. Stochastic optimization for performative prediction. _Advances in Neural Information Processing Systems_, 33:4929-4939, 2020.
* Miller et al. (2021) Miller, J., Perdomo, J. C., and Zrnic, T. Outside the echo chamber: Optimizing the performative risk. In _International Conference on Machine Learning_, 2021.
* Nagaraj et al. (2020) Nagaraj, D., Wu, X., Bresler, G., Jain, P., and Netrapalli, P. Least squares regression with markovian data: Fundamental limits and algorithms. _Advances in neural information processing systems_, 33:16666-16676, 2020.
* Narang et al. (2022) Narang, A., Faulkner, E., Drusvyatskiy, D., Fazel, M., and Ratliff, L. J. Multiplayer performative prediction: Learning in decision-dependent games. _arXiv preprint arXiv:2201.03398_, 2022.
* Nemirovskii (1983) Nemirovskii, A. S. _Problem complexity and method efficiency in optimization_. Wiley series in discrete mathematics. Wiley, Chichester, 1983.
* Nemirovskii (1984)Nesterov, Y. and Spokoiny, V. G. Random gradient-free minimization of convex functions. _Foundations of Computational Mathematics_, 17:527-566, 2017.
* Perdomo et al. (2020) Perdomo, J., Zrnic, T., Mendler-Dunner, C., and Hardt, M. Performative prediction. In _International Conference on Machine Learning_, pp. 7599-7609. PMLR, 2020.
* Ray et al. (2022) Ray, M., Ratliff, L. J., Drusvyatskiy, D., and Fazel, M. Decision-dependent risk minimization in geometrically decaying dynamic environments. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 36, pp. 8081-8088, 2022.
* Robert et al. (1999) Robert, C. P., Casella, G., and Casella, G. _Monte Carlo statistical methods_, volume 2. Springer, 1999.
* Roy et al. (2022) Roy, A., Balasubramanian, K., and Ghadimi, S. Projection-free constrained stochastic nonconvex optimization with state-dependent markov data. In _Advances in neural information processing systems_, 2022.
* Sun & Li (2019) Sun, T. and Li, D. Decentralized markov chain gradient descent. _arXiv preprint arXiv:1909.10238_, 2019.
* Sun et al. (2018) Sun, T., Sun, Y., and Yin, W. On markov chain gradient descent. _Advances in neural information processing systems_, 31, 2018.
* Wu et al. (2020) Wu, Y. F., Zhang, W., Xu, P., and Gu, Q. A finite-time analysis of two time-scale actor-critic methods. _Advances in Neural Information Processing Systems_, 33:17617-17628, 2020.
* Zhang et al. (2018) Zhang, D. J., Dai, H., Dong, L., Qi, F., Zhang, N., Liu, X., Liu, Z., and Yang, J. How do price promotions affect customer behavior on retailing platforms? evidence from a large randomized experiment on alibaba. _Production and Operations Management_, 2018.