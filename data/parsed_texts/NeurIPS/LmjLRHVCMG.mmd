# An Improved Empirical Fisher Approximation for Natural Gradient Descent

 Xiaodong Wu\({}^{1*}\)  Wenyi Yu\({}^{2*}\)  Chao Zhang\({}^{2}\)  Philip Woodland\({}^{1}\)

\({}^{1}\)Dept. of Engineering, University of Cambridge \({}^{2}\)Dept. of Electronic Engineering, Tsinghua University

{xw338,pw117}@cam.ac.uk {ywy22@mails,cz277@mail}.tsinghua.edu.cn

These authors contributed equally to this work

###### Abstract

Approximate Natural Gradient Descent (NGD) methods are an important family of optimisers for deep learning models, which use approximate Fisher information matrices to pre-condition gradients during training. The empirical Fisher (EF) method approximates the Fisher information matrix empirically by reusing the per-sample gradients collected during back-propagation. Despite its ease of implementation, the EF approximation has its theoretical and practical limitations. This paper investigates the _inversely-scaled projection_ issue of EF, which is shown to be a major cause of its poor empirical approximation quality. An improved empirical Fisher (iEF) method is proposed to address this issue, which is motivated as a generalised NGD method from a loss reduction perspective, meanwhile retaining the practical convenience of EF. The exact iEF and EF methods are experimentally evaluated using practical deep learning setups, including widely-used setups for parameter-efficient fine-tuning of pre-trained models (T5-base with LoRA and Prompt-Tuning on GLUE tasks, and ViT with LoRA for CIFAR100). Optimisation experiments show that applying exact iEF directly as an optimiser provides strong convergence and generalisation. It achieves the best test performance and the lowest training loss for the majority of the tasks, even when compared to well-tuned AdamW/Adafactor baselines. Additionally, under a novel empirical evaluation framework, the proposed iEF method shows consistently better approximation quality to exact Natural Gradient updates than both the EF and the more expensive sampled Fisher methods, meanwhile demonstrating the superior property of being robust to the choice of damping across tasks and training stages. Improving existing approximate NGD optimisers with iEF is expected to lead to better convergence and robustness. Furthermore, the iEF method also serves as a better approximation method to the Fisher information matrix itself, which enables the improvement of a variety of Fisher-based methods, not limited to the scope of optimisation.

## 1 Introduction

Parameter optimisation is a crucial research area in the field of deep learning, where stochastic optimisers are commonly used which update the model parameters iteratively to minimise a target loss function. Approximate Natural Gradient Descent (NGD) [1] methods are an important family of approximate second-order optimisers, which pre-condition the gradient with the (approximate) Fisher information matrix (also called the Fisher matrix) to accelerate training or improve generalisation.

Although there are many successful optimisers based on approximate NGD, many of them in fact use the empirical Fisher (EF) as a pre-conditioner. These methods are referred to as approximate empirical NGD methods [52]. The EF method constructs an approximation to the exact Fisher matrix directly from the gradients of training samples, which are usually readily computed during thetraining process [20]. In contrast, the exact Fisher matrix needs to be either sampled from the model output distribution [26], or requires repeated evaluation of the matrix-vector product with the Fisher matrix [25], which are both expensive operations. As a result, due to the ease of implementation brought by EF, empirical NGD is used in many approximate NGD optimisers as the default choice [33; 54; 43; 10; 11; 52; 51].

Despite the prevalence of empirical NGD optimisers, it is known that EF is in general a questionable approximation to the exact Fisher matrix [26; 20; 47]. The poor approximation quality of EF-based updates has been experimentally verified for small-scale experimental setups by [20; 47]. However, traditional evaluation methods are used in [20; 47] where the exact NG update and Fisher matrix need to be explicitly computed, making their findings impossible to verify for large deep learning setups for practical tasks. Hence, a more generally applicable evaluation framework is needed. There is also a need for an improved approximation to the exact Fisher matrix (as a pre-conditioner) than EF, while being as efficient to implement. This paper aims to fill these gaps.

Our Contributions:In this paper, an improved EF (iEF) approximation for NGD is proposed, which provides a better approximation to the exact Natural Gradient (NG) updates, while maintaining the practical convenience of EF. This method allows for a straightforward upgrade for all existing approximate empirical NGD optimisers. To achieve this, a theoretical investigation into the behaviour of EF update is first carried out, where the impact of the EF update on each involved sample is analysed (the "involved samples" refers to training samples whose gradient is used to construct the EF update). This leads to finding the _inversely-scaled projection_ issue of EF (see Sec. 4). Accordingly, the iEF method is proposed to overcome this issue by introducing a diagonal scaling matrix to the standard formulation of the EF pre-conditioner. It is motivated as an approximate Gauss-Newton algorithm from a loss reduction perspective, with global convergence guarantees under mild assumptions (see Sec. 5). A novel empirical evaluation framework for approximate NGD methods is then proposed to enable accurate comparison of approximate Fisher pre-conditioners (_e.g._ EF and iEF) in large-scale optimisation setups (see Sec. 6). We conducted experiments that compare the exact EF and iEF methods in a range of practical deep learning setups including computer vision and fine-tuning large language models. Under our evaluation framework, iEF demonstrates better approximation quality to exact NG updates than both EF and the more expensive Monte-Carlo sampled Fisher method (SF, see Appendix E), meanwhile being significantly more robust to the choice of damping across tasks and training stages. Direct application of iEF as optimiser also shows consistently strong generalisation and convergence, even when compared to well-tuned AdamW/Adafactor baselines (see Sec. 7).

## 2 Related Work

Approximate (Empirical) NGD:There are many existing approximate (empirical) NGD methods, most of which use EF despite its theoretical limitations. Some prior work, _e.g._[43; 40], uses the Woodbury identities [36] to exactly compute EF updates. Recent block-diagonal methods (based on K-FAC [27]) have gained popularity due to their efficiency, which includes work that modify the K-FAC approximation [54; 41; 10; 4; 52; 3] or distributively apply K-FAC as optimisers [34; 49]. Sometimes Adagrad-based methods [9; 13; 17] are also regarded as empirical NGD methods. However, the connection is questionable [20] as these methods use the _square-root_ of the EF matrix, instead of the EF matrix itself, as a pre-conditioner.

Limitations of EF Approximation:The limitations of EF as an approximate Fisher matrix have been discussed and demonstrated in several papers [26; 20; 47], among which [20] provided a thorough review and analysis. However, as far as we are aware, there has been no prior work that analysed the exact EF method in larger deep-learning setups, and most of the observations are limited to small-scale problems for theoretical machine-learning studies. It is known, however, that practical EF-based optimisers usually require a sophisticated damping scheme to work well [33; 31]. It has even been suggested that an infinitely large damping should be used with the gradient covariance term [4; 35]. These observations can be tied to the theoretical limitations of EF.

Empirical Evaluation of Approximate NGD Quality:An accurate evaluation of the approximation quality to exact NG updates is of great importance for approximate NGD methods. Usually, the performance of the method of interest is evaluated on machine learning benchmarks [54; 27; 11], which provide crucial information from the optimisation perspective. However, limited information about the approximation quality to exact NGD can be drawn from these experiments. Therefore,additional small-scale experiments are usually performed to compare against the exact Fisher matrices [47; 27; 11], or the exact NG updates [20; 41; 3], which are extremely difficult to do for commonplace large-scale models. This limits our understanding of these methods in the context of large-scale tasks.

## 3 Preliminaries

Supervised Learning for Classification Model with Softmax Activation:This paper considers supervised learning of categorical classification, where a probabilistic model is trained to predict outputs \(y\in\{c|c=1,2,\ldots C\}\) of \(C\) categories from inputs \(\bm{x}\in\mathbb{X}\). The target model \(\bm{z}=f_{\bm{\theta}}(\bm{x})\) has \(\bm{\theta}\in\mathbb{R}^{P}\) as the model parameters, which outputs the logits \(\bm{z}\in\mathbb{R}^{C}\). Assume a softmax activation is used on the logits, the model can be expressed as a conditional probability of \(p_{\bm{\theta}}(y|\bm{x})\). Given \(N\)_i.i.d._ training samples \((\bm{x}_{n},y_{n})_{n=1}^{N}\) (assuming \(N\ll P\)), the following accumulated loss is minimised

\[\mathcal{L}(\bm{\theta})=\sum\nolimits_{n}-\log p_{\bm{\theta}}(y=y_{n}|\bm{x }_{n})=\sum\nolimits_{n}l_{n},\] (1)

where \(l_{n}=-\log p_{\bm{\theta}}(y=y_{n}|\bm{x}_{n})\) is the categorical cross-entropy loss for the \(n\)-th training sample. For brevity, we denote \(p_{\bm{\theta}}(y=c|\bm{x}_{n})=p_{n}(c)\).

A vectorised representation of loss \(\bm{l}\in\mathbb{R}^{N}\) is used where \(\bm{l}=\left[l_{1},l_{2},\cdots,l_{N}\right]^{\top}\). The accumulated loss then becomes \(\mathcal{L}(\bm{\theta})=\sum_{n}l_{n}=\bm{l}^{\top}\bm{1}\) where \(\bm{1}\) is an all 1 column vector of matching dimension, and the accumulated gradient can be re-written as \(\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})=\nabla_{\bm{\theta}}\bm{l}^{ \top}\bm{1}\) where \(\nabla_{\bm{\theta}}\bm{l}\in\mathbb{R}^{N\times P}\) is the Jacobian of per-sample losses _w.r.t._ model parameters.

NGD and Empirical NGDIn a first-order optimisation method, say SGD [42], the update direction on the model parameter is the estimate of the accumulated gradient \(\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})\). In the NGD method [26], the gradient is pre-conditioned by the Fisher matrix \(\mathbf{F}\) (_i.e._\(\mathbf{F}^{-1}\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})\)) to accelerate convergence. The exact Fisher matrix can be computed from the model output distribution using available training samples as follows

\[\mathbf{F}:=\sum\nolimits_{n}\sum\nolimits_{c}p_{n}(c)\left[\nabla_{\bm{ \theta}}\log p_{n}(c)\nabla_{\bm{\theta}}\log p_{n}(c)^{\top}\right].\] (2)

The Fisher matrix can be estimated with Monte-Carlo (MC) sampling [27]. This approximation method is usually used with one MC sample per training sample, which is termed SF in this paper (see Appendix E). Alternatively, when the model is well trained and \(p_{n}(y_{n})\to 1\) for all \(N\) samples, it is possible to approximate the exact Fisher with EF using the empirical gradient as follows

\[\tilde{\mathbf{F}}:=\sum\nolimits_{n}\left[\nabla_{\bm{\theta}}\log p_{n}(y_{ n})\nabla_{\bm{\theta}}\log p_{n}(y_{n})^{\top}\right]=\nabla_{\bm{\theta}} \bm{l}^{\top}\nabla_{\bm{\theta}}\bm{l}.\] (3)

Pre-conditioning the gradient with the EF matrix (_i.e._\(\tilde{\mathbf{F}}^{-1}\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})\)) yields the empirical NGD method. Although empirical NGD is prevalent due to the convenience of computing the EF matrix in practice, the approximation quality of EF to the exact Fisher matrix is worth questioning [20; 47].

## 4 Inversely-Scaled Projection Issue of Empirical Fisher

Despite the practical prevalence of the EF method, it is generally believed to be a poor approximation of the exact NGD method [20]. To better understand the cause of the limited approximation quality of the EF method, an analysis of the impact of the EF update on each of the involved samples is presented below. This leads to finding the "_inversely-scaled projection_ issue" of the EF method, which provides a focus for the improvement of the EF method.

### Formal Definition

Recall the definition of EF in Eqn. (3). The empirical NG update (or just the EF update) can be defined as follows

\[\Delta\bm{\theta}_{\text{EF}}=-\eta\,\tilde{\mathbf{F}}^{-1}\nabla_{\bm{ \theta}}\mathcal{L}(\bm{\theta})=-\eta\,(\nabla_{\bm{\theta}}\bm{l}^{\top} \nabla_{\bm{\theta}}\bm{l}+\lambda\mathbf{I})^{-1}(\nabla_{\bm{\theta}}\bm{l }^{\top}\bm{1})\] (4)

where \(\lambda\in\mathbb{R}^{+}\) is a small damping factor to facilitate inversion (gradient covariance matrix \(\nabla_{\bm{\theta}}\bm{l}^{\top}\nabla_{\bm{\theta}}\bm{l}\in\mathbb{R}^{P \times P}\) cannot be directly inverted for over-parameterised models). Using the Woodbury identity [36], the EF update can be re-expressed as follows:

\[\Delta\bm{\theta}_{\text{EF}}=-\eta\,\nabla_{\bm{\theta}}\bm{l}^{\top}(\nabla_{ \bm{\theta}}\bm{l}\nabla_{\bm{\theta}}\bm{l}^{\top}+\lambda\mathbf{I})^{-1} \bm{1}.\] (5)The loss change induced on each sample (denoted as \(\Delta l_{\text{EF}}\)) when applying the EF update to the model can be estimated using the Jacobian \(\nabla_{\bm{\theta}}\bm{l}\) as follows:

\[\Delta\bm{l}_{\text{EF}}=-\nabla_{\bm{\theta}}\bm{l}\Delta\bm{\theta}_{\text{EF} }=-\eta\,\nabla_{\bm{\theta}}\Gamma\nabla_{\bm{\theta}}\bm{l}^{\top}(\nabla_{ \bm{\theta}}\Gamma\nabla_{\bm{\theta}}\bm{l}^{\top}+\lambda\mathbf{I})^{-1}\bm{ 1}\approx-\eta\bm{1},\]

This result means that EF updates have the property of inducing an equal loss reduction on every involved sample. For the \(n\)-th sample, the projection of the EF update onto gradient direction \(\nabla_{\bm{\theta}}l_{n}\) (denoted as \((\kappa_{n})_{\text{EF}}\)) can be computed as follows

\[(\kappa_{n})_{\text{EF}}=\Delta\bm{\theta}_{\text{EF}}^{\top}\frac{\nabla_{ \bm{\theta}}l_{n}}{\|\nabla_{\bm{\theta}}l_{n}\|_{2}}=-\frac{\eta}{\|\nabla_{ \bm{\theta}}l_{n}\|_{2}},\] (6)

where \(\|\nabla_{\bm{\theta}}l_{n}\|_{2}\) denotes the \(l_{2}\) norm of the \(n\)-th per-sample gradient. This means that the projection of EF update onto every sample gradient is inversely proportional to the gradient norm of each sample. Note that a smaller \(\|\nabla_{\bm{\theta}}l_{n}\|_{2}\) generally indicates the sample is better trained (or more converged, or closer to its minimum). The EF update is therefore easily biased towards well-trained samples, and tends to have a larger norm as training progresses (\(\|\nabla_{\bm{\theta}}l_{n}\|_{2}\) decreases) [20]. We term this the _inversely-scaled projection_ issue of the EF update, which is further illustrated in the following section.

### Visual Illustration

The detrimental impact of the _inversely-scaled projection_ issue of EF updates is illustrated in a 2-parameter 2-datum linear least-square regression problem in Fig. 1 (third plot). It is shown that EF updates are "attracted" to the minimum of each training sample (the dashed lines), leading to a distorted update vector field and inefficient training trajectories. Also, EF updates have a much larger norm when either training sample is nearly converged, suggesting the necessity of a complicated step-size scheduler. Please refer to Appendix B for a detailed description and discussion, which also includes an additional visualisation for a logistic regression setup in Fig. 4 which leads to similar observations. These effects of the _inversely-scaled projection_ issue are further validated in experiments (E1) and (E2) in large-scale deep learning setups in Sec. 7.

## 5 Improved Empirical Fisher

The EF method is a widely used approximate NGD method, mainly because it can be implemented conveniently by constructing the EF matrix with the per-sample gradients that are readily computed during backpropagation. In this section, we propose the improved EF (iEF) method which preserves the implementational convenience of the EF method, meanwhile alleviating the _inversely-scaled projection_ issue. The iEF method can be justified as an approximate (generalised) NGD method from a loss reduction perspective. Continuous-time convergence analyses also show that the iEF method guarantees sub-linear/linear convergence to the global minimum under mild assumptions.

Figure 1: A visual comparison of Fisher, iEF and EF as pre-conditioners for a 2-parameter 2-datum linear least-squares regression problem inspired by [20] (see Appendix B for details). All three plots are loss landscapes with the \(x\)-axis and \(y\)-axis representing \(\theta_{0}\) and \(\theta_{1}\) respectively. The first plot shows the gradient vector field of the loss function and 5 sampled training trajectories for SGD updates. Similarly, the second plot is for NGD/iEF updates and the third plot is for EF updates (with a zoomed view). The global minimum (0, 0) is marked with a star where visible. The two dashed lines on all plots represent the optimal parameter sets for each training sample. It can be seen that the EF method has a highly distorted update vector field while the iEF and NGD methods adapt to the curvature of the problem successfully.

### Update Formulation

The nature of the _inversely-scaled projection_ issue is that the EF update enforces a constant loss reduction regardless of the convergence level of each sample (see Sec. 4.1). To address this issue, the iEF update is designed to induce a per-sample loss reduction that takes into account the convergence level. The loss reduction induced by the iEF update for the \(n\)-th sample is designed to be

\[\Delta(l_{n})_{\text{iEF}}=\nabla_{\boldsymbol{\theta}}l_{n}^{\top}\Delta \boldsymbol{\theta}_{\text{iEF}}\approx-\eta\,\|\nabla_{\boldsymbol{z}_{n}}l _{n}\|_{2}^{2}.\] (7)

where \(\|\nabla_{\boldsymbol{z}_{n}}l_{n}\|_{2}\) is the gradient norm at the model output logits-level. Note that \(\|\nabla_{\boldsymbol{z}_{n}}l_{n}\|_{2}\) in general decreases as the \(n\)-th sample gets better trained because of the positive convexity of the objective of interest (cross-entropy with softmax activation). Therefore, this update formulation allows the induced per-sample loss reduction by the iEF update to be closely related to how well a sample has converged, which then greatly alleviates the _inversely-scaled projection_ issue of the EF method.

A viable formulation of the iEF update \(\Delta\boldsymbol{\theta}_{\text{iEF}}\) that both satisfies Eqn. (7) and relies only on the per-sample gradients is proposed as follows

\[\Delta\boldsymbol{\theta}_{\text{iEF}}=-\eta\,\nabla_{\boldsymbol{\theta}} \boldsymbol{l}^{\top}(\nabla_{\boldsymbol{\theta}}\boldsymbol{l}\nabla_{ \boldsymbol{\theta}}\boldsymbol{l}^{\top}+\lambda\mathbf{I})^{-1}\boldsymbol {s}_{\text{iEF}},\] (8)

where \(\boldsymbol{s}_{\text{iEF}}\in\mathbb{R}^{N}\) is a scaling vector defined as

\[\boldsymbol{s}_{\text{iEF}}=\left[\|\nabla_{\boldsymbol{z}_{1}}l_{1}\|_{2}^{2 }\quad\|\nabla_{\boldsymbol{z}_{2}}l_{2}\|_{2}^{2}\quad\cdots\quad\|\nabla_{ \boldsymbol{z}_{N}}l_{N}\|_{2}^{2}\right]^{\top}.\]

which can be obtained along with back-propagation (_e.g._ in Pytorch [32]) with negligible overhead. This improved formulation for EF is shown to be effective. In the toy examples in Fig. 1 and 4, switching from EF to iEF completely removes the distortion in the EF update vector fields. Results in Sec. 7 also validate that iEF achieves consistently better approximation quality to NG updates than both EF and SF methods in practical deep learning setups (experiment (E1)), meanwhile being robust to the choice of damping \(\lambda\) across tasks and training stages (experiment (E3)).

### Theoretical Connection to Generalised NGD

The choice of scaling vector \(\boldsymbol{s}_{\text{iEF}}\) is motivated by the Gauss-Newton (GN) algorithm, which is a type of generalised NGD method [30]. The update for the GN algorithm is defined as

\[\Delta\boldsymbol{\theta}_{\text{GN}}=-\eta\,\hat{\mathbf{G}}^{-1}\nabla_{ \boldsymbol{\theta}}\mathcal{L}(\boldsymbol{\theta}),\] (9)

where \(\hat{\mathbf{G}}=\sum_{n}\nabla_{\boldsymbol{\theta}}\boldsymbol{z}_{n}^{\top} \nabla_{\boldsymbol{\theta}}\boldsymbol{z}_{n}\) is the GN matrix. The GN algorithm can be effectively viewed as a gradient descent method on the model output logits space (\(\boldsymbol{z}_{n}\)-space) and the loss reduction induced for the \(n\)-th sample by the GN update is approximately

\[\Delta(l_{n})_{\text{GN}}\approx-\eta\,\|\nabla_{\boldsymbol{z}_{n}}l_{n}\|_{ 2}^{2},\] (10)

which takes exactly the same form as the per-sample loss reduction induced by the iEF update (see Eqn. (7)). Therefore, the iEF method can be regarded as an efficient approximation to the GN algorithm in terms of its loss-reduction behaviour. In particular, it can be shown that the iEF method is equivalent to the GN algorithm for all supervised learning problems with a regression model and the exact NGD method for the least-squares regression problem (see Appendix A).

### Convergence Analysis

In this section, two continuous time convergence analyses are provided for the non-stochastic version of the iEF method, which shows its sub-linear or linear global convergence guarantee for different types of objective functions (see Appendix C for proofs). The analysis can be considered as extensions of proofs provided in [53] to setups using non-regression models and cross-entropy objectives. The two base assumptions used by the two convergence analysis are as follows:

**Assumption 5.1**.: At time \(t\), the full-batch, un-damped iEF update to model parameters \(\boldsymbol{\theta}(t)\) is

\[\frac{\mathrm{d}\boldsymbol{\theta}(t)}{\mathrm{d}t}=-\nabla_{\boldsymbol{ \theta}(t)}\boldsymbol{l}(t)^{\top}[\nabla_{\boldsymbol{\theta}(t)} \boldsymbol{l}(t)\nabla_{\boldsymbol{\theta}(t)}\boldsymbol{l}(t)^{\top}]^{-1 }\boldsymbol{s}_{\text{iEF}}(t),\] (11)

**Assumption 5.2**.: \(\forall t>0\), the gradient covariance matrix (or Gram matrix) \([\nabla_{\boldsymbol{\theta}(t)}\boldsymbol{l}(t)][\nabla_{\boldsymbol{ \theta}(t)}\boldsymbol{l}(t)]^{\top}\) is always full rank.

The two main conclusions of the analysis are described below.

Sub-linear Global Convergence for Softmax + Cross-Entropy ObjectiveWhen the target model uses softmax output and cross-entropy loss (as described in Sec. 3), the Theorem 5.3 can be proved.

**Theorem 5.3**.: _Suppose Assumption 5.2 holds, \(\forall n\in\{1,\dots,N\}\), the target probability \(\hat{p}_{n}(t):=p_{\boldsymbol{\theta}(t)}(y=y_{n}|\boldsymbol{x}_{n})\) for the \(n\)-th training sample is bounded as follows_

\[\hat{p}_{n}(t)>1-\frac{2}{t+C_{0}+1},\] (12)

_where \(C_{0}=\frac{1}{1-\hat{p}_{n}(0)}+\log\frac{\hat{p}_{n}(0)}{1-\hat{p}_{n}(0)}\) and \(t>max\{-1-C_{0},0\}\)._

Linear Global Convergence for Strongly Convex ObjectiveWhen the target model uses an \(m\)-strongly convex objective function [2] (see Assumption C.2, note that cross-entropy loss does not satisfy this assumption), the Theorem 5.4 can be proved.

**Theorem 5.4**.: _Suppose Assumption 5.2 and C.2 holds, \(\forall n\in\{1,\dots,N\}\), the per-sample loss \(l_{n}(t)\) for the \(n\)-th training sample is bounded as follows_

\[l_{n}(t)-l_{n}^{\star}\leq e^{-2mt}(l_{n}(0)-l_{n}^{\star}),\] (13)

_where \(l_{n}^{\star}\) is the minimum loss for the \(n\)-th sample._

**Remark:** Theorem 5.4 only assumes a strongly-convex target objective _w.r.t_ model output (Assumption C.2). The target loss landscape _w.r.t_ model parameters can still be arbitrarily non-convex depending on the target model structure.

### Applications of IEF

As an approximate NGD method, the exact iEF method can be used directly as an optimiser (see Algorithm 1) for models with a small parameter size. Its performance is evaluated in experiment (E2) in Sec. 7, which demonstrates competitive convergence and generalisation when compared to well-tuned baselines. Refer to Appendix. D.1 for discussions on the implementation and complexity.

More importantly, the iEF method provides an improved approximation method to the exact Fisher matrix. The iEF approximated Fisher matrix (iEF matrix) \(\tilde{\mathbf{F}}^{\star}\in\mathbb{R}^{P\times P}\) takes the following form

\[\tilde{\mathbf{F}}^{\star}=\nabla_{\boldsymbol{\theta}}\boldsymbol{l}^{\top} \text{diag}(\boldsymbol{s}_{\text{iEF}})^{-1}\nabla_{\boldsymbol{\theta}} \boldsymbol{l},\] (14)

which can be derived from Eqn. (8) (see Appendix D.2.1). \(\tilde{\mathbf{F}}^{\star}\) by design takes a highly similar form to the EF matrix (see Eqn 3), making them equally convenient to compute. Also, results in Sec. 7 show that updates preconditioned with the iEF matrix achieve consistently better approximation quality to NG updates than both EF and SF updates, meanwhile obviating the need for damping tuning. Consequently, the iEF matrix can be considered as a cheap yet better approximation method for the Fisher matrix than both the EF and SF methods, which opens up the possibility of improving a wide range of Fisher-based methods (not limited to optimisation methods). An example is provided in Appendix D.2.2 to demonstrate that iEF can be easily integrated into the popular empirical K-FAC optimiser [37]. Preliminary experimental results show that the integration leads to consistent improvements of the approximation quality to exact NG updates. Another example is provided in Appendix D.2.3 to demonstrate that iEF can be directly applied to improve the EF approximated Hessian used in the WoodFisher algorithms for model compression [46].

## 6 Empirical Evaluation Framework for Approximate NGD Methods

Traditional evaluation methods for quality of approximate NGD methods have high memory and time complexity, which is infeasible for large setups (see discussion in Sec. 2). In order to accurately evaluate the quality of approximate NGD methods (EF, iEF, SF _etc._) in practical deep-learning setups, we introduce an efficient empirical evaluation framework which enables a quantitative comparison of different approximate NGD methods under large-scale setups. For a given approximate NGD method that generates an update \(\Delta\boldsymbol{\theta}\), our proposed evaluation framework satisfies the following requirements: **1)** provides a quantitative evaluator \(\gamma(\Delta\boldsymbol{\theta})\) that measures the (direction-wise) approximation quality to the exact NG update; **2)** the evaluation process is efficient in modern auto-grad frameworks, and it poses no constraints on the size or structure of the target model. The implementation and theoretical motivations of this empirical evaluation framework are discussed in the following sections.

### Efficient Indicator of Approximation Quality

The proposed evaluation framework revolves around the indicator \(\gamma(\Delta\bm{\theta})\) which is designed to accurately reflect the quality of an approximate NG update, while being efficient to compute. For an update \(\Delta\bm{\theta}\) of interest, the proposed indicator \(\gamma(\Delta\bm{\theta})\in\mathbb{R}^{+}\) is defined as

\[\gamma(\Delta\bm{\theta})=\frac{(\Delta\bm{\theta}^{\top}\mathbf{F}\Delta\bm{ \theta})^{\frac{1}{2}}}{|\Delta\bm{\theta}^{\top}\nabla_{\bm{\theta}}\mathcal{ L}(\bm{\theta})|},\] (15)

and the smaller the value of \(\gamma(\Delta\bm{\theta})\), the better the approximation quality of \(\Delta\bm{\theta}\) to the exact NG update. This indicator mainly requires computing a matrix-vector product with the exact Fisher matrix (_i.e._\(\mathbf{F}\Delta\bm{\theta}\)), which can be efficiently done in modern auto-grad frameworks [32]. This allows for the application of this framework to large-scale models in practical setups. Refer to Appendix F.1 for implementation details, algorithm complexity and a comparison with traditional methods.

### Theoretical Motivation

In this section, the proposed indicator \(\gamma(\cdot)\) is justified as a theoretically appropriate evaluator of the quality of an approximate NG update. An alternative definition for the NGD is first proposed, which formulates the NG update direction with an unconstrained optimisation problem as

\[\zeta^{{}^{\prime}}\mathbf{F}^{-1}\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta })=\operatorname*{arg\,min}_{\Delta\bm{\theta}}\gamma(\Delta\bm{\theta})^{2},\] (16)

where \(\zeta^{{}^{\prime}}\in\mathbb{R}\) is an arbitrary non-zero scalar. It is shown that this alternative definition for NGD is implicitly used in the Hessian-free method [25] and the linear conjugate gradient (CG) algorithm used in Hessian-free to solve for the exact NG update is a locally optimal minimiser for \(\gamma(\Delta\bm{\theta})^{2}\) (see Appendix F.2 for proof). Under this definition, any approximate NG update with a smaller \(\gamma(\Delta\bm{\theta})^{2}\) is a "strictly better approximation" to the exact NG update (which is the minimiser for \(\gamma(\Delta\bm{\theta})^{2}\)).

Furthermore, \(\gamma(\Delta\bm{\theta})\) can also be justified from a second-order optimisation perspective. \(\frac{1}{2\gamma(\Delta\bm{\theta})^{2}}\) is shown to quantify the maximum achievable loss reduction for a given update direction under a local quadratic approximation of the loss function (see Appendix. F.3 for proof). Consequently, the proposed indicator can be used to accurately predict the convergence ability of a target update generation method (see experiment (E2) in Sec. 7).

## 7 Experiments

Experimental results are presented in this section. The main goal of the experiments is to verify that the behaviour of _exact_ EF and iEF methods align with our theories in practical deep learning setups. Mainly three approximation methods are compared: EF, iEF and SF (an unbiased yet more expensive Fisher approximation method, see Appendix E). The exact updates of each method are generated based on Eqn. (5), (8), (49) respectively. Fifteen different setups are used to evaluate the optimisation performance and the approximation quality of these methods, including widely used parameter-efficient fine-tuning (PEFT) for pre-trained models. These include T5-base with LoRA and Prompt-Tuning on GLUE tasks [7], and ViT with LoRA for CIFAR100 [15]. PEFT of pre-trained models is investigated because it involves large-scale practical models, while having a small trainable parameter size (the implementation of _exact_ EF, iEF and SF methods are memory intensive, see Appendix D.1). Please refer to Appendix H.1 for detailed experimental setups. The following three findings are demonstrated with our experiments.

(E1) The approximation quality (to exact NG updates) of EF, iEF, SF and SGD was evaluated and compared using the proposed evaluation framework in Sec. 6 on all setups. It is shown that iEF consistently improves on SGD updates and is superior to both EF and SF methods for the majority of the training stages for all setups.

(E2) The optimisation performance of EF, iEF, SF and SGD was evaluated on all setups. For each task, an additional well-tuned baseline optimiser (Adafactor/AdamW) was also compared. It is shown that iEF consistently achieves comparable or better performance than the corresponding baseline, while EF and SF suffer from unstable training to different extents.

(E3) The impact of damping on the approximation quality of EF, iEF and SF was analysed under the proposed evaluation framework. It is shown that the quality of traditional EF and SF methods reliesheavily on careful damping tuning, unlike iEF which works well with any near-zero damping across tasks and training stages.

Finally, results for an additional experiment considering a 10M parameter Multi-layer Perceptron (MLP) on the CIFAR10 [19] dataset are provided in Appendix H.7. This additional experiment further validates the aforementioned findings for a train-from-scratch setup with a much larger (\(10\times\)) trainable parameter size.

E1: Approximation Quality to NG UpdatesThe behaviour of updates generated with EF, iEF, SF and SGD methods were compared using the proposed empirical evaluation framework in terms of their approximation quality to exact NG updates. The updates for EF, iEF and SF were generated according to Eqns. (5), (8), and (49) respectively, and the evaluation framework follows Algorithm 4. The "un-damped" behaviour of these methods is analysed and a near-zero damping factor is used for update generation. The checkpoints at the end of each epoch generated by the baseline optimisation methods (AdamW/Adafactor) for each task were used for evaluation. In each evaluation. For each checkpoint \(\bm{\theta}(t)\), indicators were computed from 100 batches of randomly picked training samples of the target task of batch size \(M=160\). The averaged indicator for each update were then evaluated \((\bar{\gamma}(\Delta\bm{\theta}_{\text{SGD}}(t))\), \(\bar{\gamma}(\Delta\bm{\theta}_{\text{EF}}(t))\), \(\bar{\gamma}(\Delta\bm{\theta}_{\text{EF}}(t))\), \(\bar{\gamma}(\Delta\bm{\theta}_{\text{EF}}(t))\), which are denoted as \(\gamma_{\text{SGD}}\), \(\gamma_{\text{iEF}}\), \(\gamma_{\text{SF}}\) for simplicity). The relationship among these indicators across epochs and tasks is shown in Fig. 2. Note that results are presented for only 3 representative setups due to space limit (indicator plots for all tasks are shown in Appendix H.5.1). Three findings can be concluded from these figures: **1)** EF achieves poorer approximation quality even than SGD updates for most training stages and tasks. This is aligned with the finding in prior work that EF is a questionable approximation to SGD. **2)** The fourth plot shows that the gradient norm imbalance gets larger as training progresses. This correlates well with both the EF and SF curves, while impacting iEF less. This means that the _inversely-scaled projection_ issue indeed plays a significant role in reducing the approximation quality of the EF (and SF) approximation. **3)** Comparing the first three plots, it can be seen that, for the majority of the training stages, the approximation quality follows iEF \(>\) SF \(>\) EF. IEF gives a consistently better approximation, and EF and SF are only able to beat iEF at the start of training (where a good approximation to the NG update has less impact).

E2: Optimisation PerformanceThe exact iEF, EF and SF methods were implemented as stochastic optimisers (following Algorithms 1, 2, 3 respectively). The same near-zero damping factor was used as in (E1). The averaged test metrics for GLUE and CIFAR100 for each optimiser are shown in Table 1 (see full test results in Table 7, validation result in Table 6, final training loss in Table 5 and training curves in Fig. 12 and 13). The following three observations can be made:

**1)** From the final training loss reported in Table 5, the ranking of final training loss generally follows iEF \(<\) AdamW/Adafactor \(<\) SGD \(<\) SF \(<\) EF (the lower the better). This ranking of training

Figure 2: Four (log-scaled) ratios computed for checkpoints at various stages of training (sampled at the interval of one epoch) for 3 of the all 15 tasks. The \(x\)-axes represent the training stages of the model. \(0\%\) means the initialised model and \(100\%\) means model at the end of the last epoch. Each data point is averaged across 100 evaluations, and the error bars represent the standard deviation (1-sigma). The first plot shows \(\gamma_{\text{EF}}/\gamma_{\text{SGD}}\), which denotes the relative approximation quality improvement of EF updates _w.r.t._ SGD updates (the lower the better). The second plot shows \(\gamma_{\text{iEF}}/\gamma_{\text{SGD}}\), and the third plot shows \(\gamma_{\text{SF}}/\gamma_{\text{EF}}\). The last plot depicts the _imbalance of gradient norms_, which is the average ratio between the maximum and minimum gradient norm for each evaluated batch (a larger value indicates more imbalanced per-sample gradient norms, which should lead to a more significant _inversely-scaled projection_ issue). Overall, the approximation quality follows iEF \(>\) SF \(>\) EF.

convergence follows the ranking of indicators in (E1) closely, demonstrating the effectiveness of the empirical evaluation framework in predicting the training behaviour of optimisers. **2)** For most of the tasks, EF always suffer from unstable training (see training curves in Fig. 12 and 13), while iEF consistently reaches the lowest training loss at the end of training (even when compared with well-tuned Adafactor/AdamW baselines). This further confirms the _inversely-scaled projection_ issue of EF, and demonstrates the strong convergence ability of the proposed iEF method. **3)** From test results in Table 1, it can be seen that iEF achieves the best generalisation for Prompt Tuning tasks (outperformed Adafactor in 6 out of 7 tasks). For LoRA tasks, iEF remains competitive to AdamW with each of them outperformed the other in 4 out of 8 tasks. This is likely because LoRA setups (which on average have 50 times more trainable parameters than Prompt Tuning) have a stronger reliance on regularisation and momentum, which have not been properly extended to use together with the exact iEF optimiser yet. Overall, iEF achieves the best generalisation for the majority of tasks (10 out of 15), indicating its potential as a strong optimiser for PEFT for pre-trained models.

E3: Impact of DampingAs is discussed in Sec. 2, practical approximate NGD optimisers rely heavily on a good damping schedule, which is typically chosen based on empirical experience [27]. Using the proposed evaluation framework, it is straightforward to analyse the impact of damping on the approximation quality of EF, SF and iEF. For a target task, the indicator \(\gamma\)_w.r.t._ damping \(\lambda\) curve is computed at the start, mid-way and end of the training. Graph for an example task is shown in Fig. 3 (graphs for other tasks are provided in Appendix H.5.2). Two observations can be made:

**1)** A well-chosen damping factor significantly improves the approximation quality of EF and SF, which aligns well with observations in prior work on approximate NGD optimisers [27, 33, 34]. However, the optimal damping factor changes greatly for different tasks and training stages, which makes the damping schedule for SF or EF based optimisers necessary yet hard-to-design in practice.

**2)** Across all tasks and training stages, iEF robustly achieves great approximation quality with a near-zero damping factor. More importantly, its approximation quality is consistently better than EF method, and is comparable to the optimally-damped SF method (which is much more expensive, particularly when the cost of damping tuning is considered). Overall, iEF can be considered a cheaper, higher-quality and more robust alternative to both the EF and SF approximation methods.

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline  & **AdamW** & **Adafactor** & **SGD** & **EF** & **SF** & **iEF** \\ \hline
**GLUE + T5 + Prompt Tuning** & - & \(77.1\) & \(67.4\) & \(48.1\) & 69.7 & **79.3** \\
**GLUE + T5 + LoRA** & \(\mathbf{80.1}\) & - & \(77.3\) & \(63.1\) & \(76.5\) & \(79.3\) \\
**CIFAR100 + ViT + LoRA** & \(93.9\) & - & \(91.3\) & \(31.0\) & \(92.8\) & **94.3** \\ \hline \hline \end{tabular}
\end{table}
Table 1: Average test performance of different optimisers for GLUE and CIFAR100. For GLUE tasks, the average metric results for the 7 tasks are used as the final test score. For tasks with two metrics, these metrics are averaged first [50]. For all tasks, the test result is computed for the best validation accuracy checkpoint. Refer to Table 7 for a more complete test performance report and detailed explanations on metrics.

Figure 3: Approximation quality (relative to SGD) of EF, SF and iEF methods _w.r.t._ damping factor \(\lambda\) at different training stages of task CoLA+T5+LoRA. \(x\)-axes show the value of the damping factor, \(y\)-axes depict the relative approximation quality improvement of the target update method _w.r.t._ SGD (the lower the better). Each data point is averaged across 100 evaluations, and the error-bars represent the standard deviation (1-sigma). The first plot is for checkpoint saved at the end of the first training epoch, the second plot for the mid-way epoch and the third plot for the final epoch. It can be observed that iEF achieves the best approximation quality robustly for any near-zero \(\lambda\). In contrast, \(\lambda\) has a non-linear impact on both SF and EF. When optimally tuned, an EF update can achieve better approximation quality than SGD, and an SF update can achieve comparable quality to iEF. However, the optimal damping factor for EF and SF changes greatly with training stages (and tasks).

Conclusions and Future Work

This paper presents the iEF method, which addresses the _inversely-scaled projection_ issue of the EF approximation for NGD, meanwhile maintaining the implementational convenience. A novel empirical evaluation framework for the quality of general approximate NGD update is also proposed, which enables quantified comparison of approximate NGD methods in large deep learning setups1. Based on the experiments with practical PEFT of pre-trained models for NLP and CV classification tasks, the exact iEF optimiser shows superior convergence and generalisation for majority of the tasks, supporting the applicability of iEF directly as an optimiser. Further evaluation on approximation quality concludes that iEF achieves consistently better approximation quality than both EF and SF. The iEF method also demonstrates the superior property of being robust to the choice of damping factor across different tasks and training stages.

Footnote 1: Codebase will be publicly released.

As is discussed in Sec. 5.4, the iEF method can be viewed not only as an improved approximate NGD optimiser, but also as an improved approximation method for the exact Fisher matrix in general. This opens up many opportunities of future work to improve a wide range of Fisher-based methods (not limited to optimisation methods). Some example applications include improving the empirical K-FAC optimiser [37; 33] (which has shown promising results in preliminary experiments) and improving the WoodFisher algorithm for model compression [46].

## Acknowledgements

Xiaodong Wu is in part funded by the Cambridge Trust, a donation from Meta Systems and Christ's College, Cambridge. This work has in part been performed using resources provided by the Cambridge Tier-2 system operated by the University of Cambridge Research Computing Service (www.hpc.cam.ac.uk) funded by EPSRC Tier 2 capital grant EP/T022159/1.

## References

* [1] Shun-ichi Amari. "Natural Gradient Works Efficiently in Learning". In: _Neural Computation_ 10.2 (Feb. 1998), pp. 251-276. url: https://doi.org/10.1162/089976698300017746.
* [2] Andersen Ang. _Convergence of gradient flow_. Dec. 2022. url: https://angms.science/doc/CVX/GradientFlowConvAna.pdf.
* [3] Achraf Bahamou, Donald Goldfarb, and Yi Ren. "A Mini-Block Fisher Method for Deep Neural Networks". In: _International Conference on Artificial Intelligence and Statistics_. 2022. url: https://api.semanticscholar.org/CorpusID:253158046.
* [4] Frederik Benzing. "Gradient Descent on Neurons and its Link to Approximate Second-order Optimization". In: _Proceedings of the 39th International Conference on Machine Learning_. Ed. by Kamalika Chaudhuri et al. Vol. 162. Proceedings of Machine Learning Research. PMLR, July 2022, pp. 1817-1853. url: https://proceedings.mlr.press/v162/benzing22a.html.
* European Conference, ECML PKDD 2019, Wurzburg, Germany, September 16-20, 2019, Proceedings, Part III_. Vol. 11908. Lecture Notes in Computer Science. Springer, 2020. url: http://dblp.uni-trier.de/db/conf/pkdd/pkdd2019-3.html.
* [6] Tom B Brown et al. "Language models are few-shot learners". In: _arXiv preprint arXiv:2005.14165_ (2020).
* [7] Ning Ding et al. "Parameter-efficient fine-tuning of large-scale pre-trained language models". In: _Nature Machine Intelligence_ 5 (Mar. 2023), pp. 1-16.
* [8] Alexey Dosovitskiy et al. "An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale". In: _International Conference on Learning Representations_. 2021. url: https://openreview.net/forum?id=YicbFdNTTY.
* [9] John Duchi, Elad Hazan, and Yoram Singer. "Adaptive Subgradient Methods for Online Learning and Stochastic Optimization". In: _Journal of Machine Learning Research_ 12.61 (2011), pp. 2121-2159. url: http://jmlr.org/papers/v12/duchi11a.html.
* [10] Kaixin Gao et al. "Eigenvalue-Corrected Natural Gradient Based on a New Approximation". In: _Asia-Pacific Journal of Operational Research (APJOR)_ 40.01 (Feb. 2023), pp. 1-18. url: https://ideas.repec.org/a/wsi/apjorx/v40y2023i01ns0217595923400055.html.
* [11] Thomas George et al. "Fast Approximate Natural Gradient Descent in a Kronecker-factored Eigenbasis". In: _Neural Information Processing Systems_. 2018. url: https://api.semanticscholar.org/CorpusID:47018147.
* [12] Donald Goldfarb, Yi Ren, and Achraf Bahamou. "Practical Quasi-Newton Methods for Training Deep Neural Networks". In: _Proceedings of the 34th International Conference on Neural Information Processing Systems_. NIPS'20. Vancouver, BC, Canada: Curran Associates Inc., 2020.
* [13] Vineet Gupta, Tomer Koren, and Yoram Singer. "Shampoo: Preconditioned Stochastic Tensor Optimization". In: 2018. url: http://proceedings.mlr.press/v80/gupta18a/gupta18a.pdf.
* [14] Kaiming He et al. "Deep residual learning for image recognition". In: _Proceedings of the IEEE conference on computer vision and pattern recognition_. 2016, pp. 770-778.
* [15] Xuehai He et al. "Parameter-efficient model adaptation for vision transformers". In: _Proceedings of the Thirty-Seventh AAAI Conference on Artificial Intelligence and Thirty-Fifth Conference on Innovative Applications of Artificial Intelligence and Thirteenth Symposium on Educational Advances in Artificial Intelligence_. AAAI'23/IAAI'23/EAAI'23. AAAI Press, 2023. url: https://doi.org/10.1609/aaai.v37i1.25160.
* [16] Edward J Hu et al. "LoRA: Low-Rank Adaptation of Large Language Models". In: _International Conference on Learning Representations_. 2022. url: https://openreview.net/forum?id=nZeVKeeFYf9.
* [17] Diederik P. Kingma and Jimmy Ba. "Adam: A Method for Stochastic Optimization". In: _3rd International Conference on Learning Representations, ICLR 2015, San Diego, CA, USA, May 7-9, 2015, Conference Track Proceedings_. Ed. by Yoshua Bengio and Yann LeCun. 2015. url: http://arxiv.org/abs/1412.6980.

* [18] Andrew V. Knyazev. "Toward the Optimal Preconditioned Eigensolver: Locally Optimal Block Preconditioned Conjugate Gradient Method". In: _SIAM Journal on Scientific Computing_ 23.2 (2001), pp. 517-541. url: https://doi.org/10.1137/S1064827500366124.
* [19] A. Krizhevsky and G. Hinton. "Learning multiple layers of features from tiny images". In: _Master's thesis, Department of Computer Science, University of Toronto_ (2009).
* [20] Frederik Kunstner, Lukas Balles, and Philipp Hennig. "Limitations of the Empirical Fisher Approximation for Natural Gradient Descent". In: _Proceedings of the 33rd International Conference on Neural Information Processing Systems_. Red Hook, NY, USA: Curran Associates Inc., 2019.
* [21] Yann LeCun and Corinna Cortes. "MNIST handwritten digit database". In: (2010). url: http://yann.lecun.com/exdb/mnist/.
* [22] Brian Lester, Rami Al-Rfou, and Noah Constant. "The Power of Scale for Parameter-Efficient Prompt Tuning". In: _Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing_. Online and Punta Cana, Dominican Republic: Association for Computational Linguistics, Nov. 2021, pp. 3045-3059. url: https://aclanthology.org/2021.emnlp-main.243.
* [23] Brian Lester, Rami Al-Rfou, and Noah Constant. "The Power of Scale for Parameter-Efficient Prompt Tuning". In: _Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing_. Online and Punta Cana, Dominican Republic: Association for Computational Linguistics, Nov. 2021, pp. 3045-3059. url: https://aclanthology.org/2021.emnlp-main.243.
* [24] Ilya Loshchilov and Frank Hutter. "Decoupled Weight Decay Regularization". In: _7th International Conference on Learning Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019_. OpenReview.net, 2019. url: https://openreview.net/forum?id=Bkg6RiCqY7.
* [25] James Martens. "Deep learning via Hessian-free optimization." In: _ICML_. Ed. by Johannes Furnkranz and Thorsten Joachims. Omnipress, 2010, pp. 735-742. url: http://dblp.uni-trier.de/db/conf/icml/icml2010.html#Martens10.
* [26] James Martens. "New Insights and Perspectives on the Natural Gradient Method". In: _Journal of Machine Learning Research_ 21.146 (2020), pp. 1-76. url: http://jmlr.org/papers/v21/17-678.html.
* Volume 37_. ICML'15. Lille, France: JMLR.org, 2015, pp. 2408-2417.
* [28] Mahesh Chandra Mukkamala and Matthias Hein. "Variants of RMSProp and Adagrad with Logarithmic Regret Bounds". In: _Proceedings of the 34th International Conference on Machine Learning, ICML 2017, Sydney, NSW, Australia, 6-11 August 2017_. Ed. by Doina Precup and Yee Whye Teh. Vol. 70. Proceedings of Machine Learning Research. PMLR, 2017, pp. 2545-2553. url: http://proceedings.mlr.press/v70/mukkamala17a.html.
* [29] Behnam Neyshabur et al. "The role of over-parametrization in generalization of neural networks". In: _7th International Conference on Learning Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019_. OpenReview.net, 2019. url: https://openreview.net/forum?id=BygfghAcYX.
* [30] Levon Nurbekyan, Wanzhou Lei, and Yunan Yang. "Efficient Natural Gradient Descent Methods for Large-Scale PDE-Based Optimization Problems". In: _SIAM Journal on Scientific Computing_ 45.4 (2023), A1621-A1655. url: https://doi.org/10.1137/22M1477805.
* [31] Kazuki Osawa et al. "Large-Scale Distributed Second-Order Optimization Using Kronecker-Factored Approximate Curvature for Deep Convolutional Neural Networks". In: _2019 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)_ (2018), pp. 12351-12359. url: https://api.semanticscholar.org/CorpusID:67856631.
* [32] Adam Paszke et al. "PyTorch: An Imperative Style, High-Performance Deep Learning Library". In: _Advances in Neural Information Processing Systems 32_. Curran Associates, Inc., 2019, pp. 8024-8035.
* [33] J. Gregory Pauloski et al. "Convolutional neural network training with distributed K-FAC". In: _Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis_. SC '20. Atlanta, Georgia: IEEE Press, 2020.

* [34] J. Gregory Pauloski et al. "Deep Neural Network Training With Distributed K-FAC". In: _IEEE Transactions on Parallel and Distributed Systems_ 33.12 (2022), pp. 3616-3627.
* [35] Felix Petersen et al. "ISAAC Newton: Input-based Approximate Curvature for Newton's Method". In: _The Eleventh International Conference on Learning Representations_. 2023. url: https://openreview.net/forum?id=QpaCJSFW7j.
* [36] K. B. Petersen and M. S. Pedersen. _The Matrix Cookbook_. Version 20081110. Oct. 2008. url: http://www2.imm.dtu.dk/pubdb/p.php?3274.
* [37] Daniel Povey, Xiaohui Zhang, and Sanjeev Khudanpur. "Parallel training of DNNs with Natural Gradient and Parameter Averaging". In: (Oct. 2014).
* [38] Alec Radford et al. "Robust Speech Recognition via Large-Scale Weak Supervision". In: _Proceedings of the 40th International Conference on Machine Learning_. Ed. by Andreas Krause et al. Vol. 202. Proceedings of Machine Learning Research. PMLR, July 2023, pp. 28492-28518. url: https://proceedings.mlr.press/v202/radford23a.html.
* [39] Colin Raffel et al. "Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer". In: _Journal of Machine Learning Research_ 21.140 (2020), pp. 1-67. url: http://jmlr.org/papers/v21/20-074.html.
* [40] Yi Ren and Donald Goldfarb. "Efficient Subsampled Gauss-Newton and Natural Gradient Methods for Training Neural Networks". In: _CoRR_ abs/1906.02353 (2019). url: http://arxiv.org/abs/1906.02353.
* [41] Yi Ren and Donald Goldfarb. "Tensor Normal Training for Deep Learning Models". In: _Advances in Neural Information Processing Systems_. Ed. by M. Ranzato et al. Vol. 34. Curran Associates, Inc., 2021, pp. 26040-26052. url: https://proceedings.neurips.cc/paper_files/paper/2021/file/dae3312c4c6c7000a37ecfb7b0aeb0e4-Paper.pdf.
* [42] Herbert Robbins and Sutton Monro. "A Stochastic Approximation Method". In: _The Annals of Mathematical Statistics_ 22.3 (1951), pp. 400-407. url: https://doi.org/10.1214/aoms/1177729586.
* [43] Nicolas Roux, Pierre-antoine Manzagol, and Yoshua Bengio. "Topmomoute Online Natural Gradient Algorithm". In: _Advances in Neural Information Processing Systems_. Ed. by J. Platt et al. Vol. 20. Curran Associates, Inc., 2007. url: https://proceedings.neurips.cc/paper_files/paper/2007/file/9f61408e3afb633e50cdf1b20de6f466-Paper.pdf.
* [44] John Schulman et al. "Trust Region Policy Optimization". In: _Proceedings of the 32nd International Conference on Machine Learning_. Ed. by Francis Bach and David Blei. Vol. 37. Proceedings of Machine Learning Research. Lille, France: PMLR, July 2015, pp. 1889-1897. url: https://proceedings.mlr.press/v37/schulman15.html.
* [45] Jonathan Richard Shewchuk. "An Introduction to the Conjugate Gradient Method Without the Agonizing Pain". In: (Aug. 1994). url: http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf.
* [46] Sidak Pal Singh and Dan Alistarh. "WoodFisher: Efficient Second-Order Approximation for Neural Network Compression". In: _Advances in Neural Information Processing Systems_. Ed. by H. Larochelle et al. Vol. 33. Curran Associates, Inc., 2020, pp. 18098-18109. url: https://proceedings.neurips.cc/paper_files/paper/2020/file/d1ff1ec86b62cd5f3903ff19c3a326b2-Paper.pdf.
* [47] Valentin Thomas et al. "On the interplay between noise and curvature and its effect on optimization and generalization". In: _International Conference on Artificial Intelligence and Statistics_. 2019.
* [48] Hugo Touvron et al. _LLaMA: Open and Efficient Foundation Language Models_. 2023.
* [49] Yuichiro Ueno et al. "Rich Information is Affordable: A Systematic Performance Analysis of Second-order Optimization Using K-FAC". In: _Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining_. KDD '20. Virtual Event, CA, USA: Association for Computing Machinery, 2020, pp. 2145-2153. url: https://doi.org/10.1145/3394486.3403265.
* [50] Alex Wang et al. "GLUE: A Multi-Task Benchmark and Analysis Platform for Natural Language Understanding". In: _Proceedings of the 2018 EMNLP Workshop BlackboxNLP: Analyzing and Interpreting Neural Networks for NLP_. Brussels, Belgium: Association for Computational Linguistics, Nov. 2018, pp. 353-355. url: https://aclanthology.org/W18-5446.

* [51] Minghan Yang et al. "An Efficient Fisher Matrix Approximation Method for Large-Scale Neural Network Optimization". In: _IEEE Transactions on Pattern Analysis and Machine Intelligence_ 45.5 (2023), pp. 5391-5403.
* [52] Minghan Yang et al. "Sketch-Based Empirical Natural Gradient Methods for Deep Learning". In: _J. Sci. Comput._ 92.3 (Sept. 2022). url: https://doi.org/10.1007/s10915-022-01911-x.
* [53] Guodong Zhang, James Martens, and Roger B Grosse. "Fast Convergence of Natural Gradient Descent for Over-Parameterized Neural Networks". In: _Advances in Neural Information Processing Systems_. Ed. by H. Wallach et al. Vol. 32. Curran Associates, Inc., 2019. URL: https://proceedings.neurips.cc/paper_files/paper/2019/file/1da546f25222c1ee710cf7e2f7a3ff0c-Paper.pdf.
* [54] Lin Zhang, Shaohuai Shi, and Bo Li. "Eva: Practical Second-order Optimization with Kronecker-vectorized Approximation". In: _The Eleventh International Conference on Learning Representations_. 2023. url: https://openreview.net/forum?id=_Mic8V96Voy.
* [55] Yingqiu Zhu et al. "Automatic, dynamic, and nearly optimal learning rate specification via local quadratic approximation". In: _Neural Networks_ 141 (2021), pp. 11-29. url: https://www.sciencedirect.com/science/article/pii/S0893608021001131.

Relation between iEF, GN and NGD in Different Machine Learning Setups

The connection between iEF, GN and NGD methods is discussed for different common machine-learning scenarios. It is explained that for a scalar output (regression) model, the iEF method and the GN algorithm is equivalent. Furthermore, for a least-squares problem, the iEF, GN and NGD methods are all equivalent.

### Regression Model Problem

In this section, a supervised learning problem for a target model with only a scalar output (_i.e._ regression model) is discussed. The definition of the setup is as follows.

Consider a target regression model \(f_{\bm{\theta}}(\cdot)\in\mathbb{R}^{P}\rightarrow\mathbb{R}\), where \(\bm{\theta}\in\mathbb{R}^{P}\) is the trainable parameters of size \(P\). Given \(N\)_i.i.d._ training samples \((\bm{x}_{n},y_{n})_{n=1}^{N}\) (where \(\bm{x}_{n}\) is the input feature vector and \(y_{n}\in\mathbb{R}\) is the scalar label), the output of the model for the \(n\)-th sample is \(z_{n}=f_{\bm{\theta}}(\bm{x}_{n})\) where \(z_{n}\in\mathbb{R}\) is a scalar. For the \(n\)-th sample, the per-sample loss \(l_{n}\) is defined as

\[l_{n}=\mathcal{F}^{\text{obj}}(z_{n},y_{n}),\] (17)

where \(\mathcal{F}^{\text{obj}}(\cdot)\in\mathbb{R}\rightarrow\mathbb{R}\) is the per-sample objective function, and the accumulated loss \(\sum_{n}l_{n}\) is to be minimised. Some examples of this problem setup include least-squares regression problems where a mean-square error is used as the loss function, and binary classification problems where the Sigmoid-activation plus binary cross-entropy is used as the loss function.

Recall the definition of the iEF matrix in Eqn. (14). In this problem setup, the iEF matrix can be computed as follows

\[\tilde{\mathbf{F}}^{\star}=\sum\nolimits_{n}\|\frac{\mathrm{d}l_{n}}{\mathrm{ d}z_{n}}\|_{2}^{-2}(\frac{\mathrm{d}l_{n}}{\mathrm{d}z_{n}}\nabla_{\bm{ \theta}}z_{n})(\frac{\mathrm{d}l_{n}}{\mathrm{d}z_{n}}\nabla_{\bm{\theta}}z_{n })^{\top}=\sum\nolimits_{n}\nabla_{\bm{\theta}}z_{n}\nabla_{\bm{\theta}}z_{n }^{\top}=\hat{\mathbf{G}},\] (18)

which takes the same form as the GN matrix. Therefore, the iEF and GN methods are equivalent to supervised learning problems of regression models.

### Least-Squares Problem

The least-squares problem is a representative example of supervised learning problems of regression models, which includes the toy example shown in Fig. 1. The definition of this type of problem follows most of the definitions in Appendix A.1, apart from the per-sample objective function, which is elaborated as follows. For the least-squares problem, the objective function is defined as follows

\[\mathcal{F}^{\text{obj}}(z_{n},y_{n})=\frac{1}{2}(z_{n}-y_{n})^{2}.\] (19)

The Fisher matrix for the least-squares problem is defined as follows [47]

\[\mathbf{F}=\sum\nolimits_{n}\nabla_{\bm{\theta}}z_{n}\nabla_{\bm{\theta}}z_{n }^{\top}=\tilde{\mathbf{F}}^{\star}=\hat{\mathbf{G}},\] (20)

which coincides with the iEF and GN matrix in this problem setup. Consequently, the iEF, GN and NGD methods are equivalent for least-squares problems. This is verified in the second plot of Fig. 1 where NGD and iEF share the same update vector field.

## Appendix B Visualisation for Linear Least-Squares Problem with Two Training Samples

Setup DescriptionIn this section, the Fig. 1 referenced in Sec. 4.2 is explained in detail. The vector field graph is based on a simple linear least-squares regression problem, with 2 training samples and 2 trainable parameters.

The linear least-squares problem is chosen for visualisation because it is not only a highly representative machine learning setup [47, 20], but also there has been a precedent of using this problem to visualise the distortion in EF (see Figure 1 in [20]). The trainable parameter size of \(P=2\) is chosen to facilitate the 2D visualisation, and the training sample size of \(N=2\) (_i.e._\(N\leq P\)) is chosen to better match the practical deep learning scenarios where the model is over-parameterised.

The target linear model is formulated as \(f_{\bm{\theta}}(x_{n})=\bm{\theta}^{\top}[x_{n},1]^{\top}=\theta_{0}+\theta_{1}x _{n}\) with \(x_{n}\in\mathbb{R}\) and \(\bm{\theta}\in\mathbb{R}^{2}\). The two training samples are \((x_{n},y_{n})_{n=1}^{N}=\{(0,0),(1,0)\}\) (with \(N=2\)) and the target loss to be minimised is \(\mathcal{L}(\bm{\theta})=\sum_{n=1}^{2}\frac{1}{2}[y_{n}-f_{\bm{\theta}}(x_{n} )]^{2}\). It is obvious that the optimal parameter (at global minimum) is \(\bm{\theta}^{\star}=[0,0]^{\top}\).

The update vector fields are generated using the following definition:

\[\begin{cases}\Delta\bm{\theta}_{\text{SGD}}&=\nabla_{\bm{\theta}}\mathcal{L }(\bm{\theta})\\ \Delta\bm{\theta}_{\text{NGD}}&=(\mathbf{F}+\lambda_{\text{NGD}}\mathbf{I})^{ -1}\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})\\ \Delta\bm{\theta}_{\text{EF}}&=(\tilde{\mathbf{F}}+\lambda_{\text{EF}}\mathbf{ I})^{-1}\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})\\ \Delta\bm{\theta}_{\text{iEF}}&=(\tilde{\mathbf{F}}^{\star}+\lambda_{\text{ EF}}\mathbf{I})^{-1}\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta}).\end{cases}\] (21)

The EF matrix \(\tilde{\mathbf{F}}\) follows the definition in Eqn. (3). The iEF matrix \(\tilde{\mathbf{F}}^{\star}\) and Fisher matrix \(\mathbf{F}\) shares the same definition as shown in Eqn. (20) (see Appendix A.2). For this toy problem, the damping factors \(\lambda_{\text{iEF}}\) and \(\lambda_{\text{NGD}}\) are set to zero. The damping factor \(\lambda_{\text{EF}}\) is set to zero everywhere, apart from when one of the per-sample gradient gives a norm of 0, a damping factor of \(1\times 10^{-4}\max(\text{diag}(\tilde{\mathbf{F}}))\) is used to facilitate inversion. Finally, in the third plot of Fig. 1, the EF update vectors are normalised for better visualisation, because EF updates have hugely different scales across the contour plots. In the zoomed view next to the third plot, the EF update vectors are not normalised, which should give a better demonstration of the inverse scaling issue of EF updates.

The same set of 5 initial parameters (shown as black solid octagons) are used to generate 5 training trajectories (coloured curves) on each plot in Fig. 1. Each follows the corresponding update vector fields (each step follows the direction of the update vector field, and is normalised to \(1\times 10^{-2}\)). To demonstrate how each sample affects the EF updates, the optimal parameter set for each training sample (_i.e._ when \(\frac{1}{2}[y_{n}-f_{\bm{\theta}}(x_{n})]^{2}=0\)) is added on all plots in Fig. 1 as dashed lines. For training sample 1: (0, 0), the optimal parameter set is \(\theta_{0}=0\), which is shown as horizontal dashed lines. For training sample 2: (1, 0), the optimal parameter set is \(\theta_{0}+\theta_{1}=0\), which is shown as diagonal dashed lines.

ObservationsBy observing the behaviour of the vector fields for different updates on the loss landscape, along with the 5 sampled trajectories in Fig. 1, it can be seen that all methods successfully reached the global minimum, with the NGD/iEF updates having the most efficient training trajectory. However, the EF method has highly distorted update vector field and training trajectories due to the _inversely-scaled projection_ issue discussed in Sec. 4.1. The following conclusions can be drawn for EF updates:

1. **Directional bias towards converged samples:** The EF update vector field is easily "attracted" to the dashed lines because the EF update is strongly affected by the better-converged sample (due to inverse scaling). This leads to a distorted update vector field and ineffective training trajectories. In particular, when per-sample gradients have a highly imbalanced norm near the dashed lines, the EF update vector field becomes almost parallel to the loss contour. This causes them to deviate significantly from both the gradient descent direction and the optimal direction (NG update direction), and oscillations can be observed along the dashed line in the zoomed view.
2. **Inversely-scaled update norm:** EF updates have larger norms when either of the training samples is nearly converged (see the zoomed plot). In fact, the EF training trajectories managed to converge because we normalised every update to a small norm of \(1\times 10^{-2}\), which is not needed for SGD, NGD and iEF methods. Consequently, it is likely that a sophisticated learning rate scheduler is necessary when training with the EF method in practical deep learning setups (as is mentioned in [20]).

MotivationAs is stated in Sec. 3, the paper mainly focuses on classification setups, but a visualisation of a regression setup in Fig. 1 is used in the main paper for the following reasons: **1)** The least-squares regression problem is commonly used when analysing NGD and EF in the literature [20, 47]. Particularly, our visualisation follows a similar setup to [20], which is an important related work regarding the limitations of EF. Overall, the toy regression example allows for consistency with the literature. **2)** The 2-datum least-squares regression problem have several nice properties. There exists a unique global minimum; the NG update can find the global minimum in one step, and the advantage over all other updates is self-evident; the iEF update and NG update has the same form; the distortion of the EF update is extreme. All of these properties make the visualisation in Fig. 1 much more straightforward to understand than a visualisation for a classification setup.

Additional Visualisation for Logistic Regression ProblemGiven that the paper focuses on classification setups, it is important to also include a visualisation for a toy classification setup. Consequently, an additional visualisation, in a similar fashion, that compares Fisher, iEF and EF as pre-conditioners in a toy classification setup is provided in Fig. 4. This figure considers a 2-datum logistic regression setup and a more detailed description is provided in the caption. This new visualisation demonstrates consistent results to that of Fig. 1. Particularly, it can be observed that EF updates deviate from the optimal decision boundary because it is biased toward further optimising the better classified datum (_i.e._ the datum with a lower CE loss). Also, EF updates become larger when either of the datum achieves a small loss. Meanwhile, SGD, NGD and iEF update approaches the optimal decision boundary consistently, and arguably NGD and iEF reach the optimal decision boundary more effectively than SGD.

## Appendix C Convergence Analysis

The proofs for Theorem. 5.3 and Theorem. 5.3 are provided in this section. The proofs follow and extend the continuous-time analysis framework in [53] and [2].

Justification of Full-rank Gram Matrix AssumptionRecall Assumption 5.2 which assumes \([\nabla_{\bm{\theta}(t)}\bm{l}(t)][\nabla_{\bm{\theta}(t)}\bm{l}(t)]^{\top}\) to be full-rank throughout the training process. This is equivalent to assuming \(\nabla_{\bm{\theta}(t)}\bm{l}(t)\in\mathbb{R}^{N\times P}\) always have full row rank. This is considered a mild assumption for practical deep learning because:

1. It is generally true that for each individual per-sample gradient \(\nabla_{\bm{\theta}(t)}l_{n}(t)\), the norm of the gradient will be zero if and only if \(\nabla_{\bm{z}_{n}(t)}l_{n}(t)=\bm{0}\) (_i.e._ at the minimum of that sample). Therefore, it is unlikely that there exists zero norm per-sample gradients in \(\nabla_{\bm{\theta}(t)}\bm{l}(t)\) during training.
2. The target model is usually highly over-parameterised with \(P\gg N\) and the model is highly complex. It is in general unlikely that \(\nabla_{\bm{\theta}(t)}\bm{l}(t)\) is rank-deficient, as long as there are no duplicate training samples.

Ideal Per-sample Loss Change for IEFGiven Assumption 5.1 and Assumption 5.2, the following Lemma can be derived

Figure 4: A visual comparison of Fisher, iEF and EF as pre-conditioners for a logistic regression problem (classifying two 1D datum \(x_{0}=0,x_{1}=2\) into two classes). The target model is \(p_{\bm{\theta}}(x_{n})=\sigma(\theta_{0}+\theta_{1}x_{n})\), where \(\sigma(\cdot)\) is the Sigmoid function and CE loss is used, which follows the problem setup description in Sec. 3. This figure is different from Fig. 1 in 3 aspects: **1)** iEF and NG updates are no longer identical, and are presented in separate plots; **2)** There is no global minima, but the model achieves lower loss when moving further down the bottom-right corner; **3)** The dashed line now represents the optimal parameter set for a decision boundary of \(x=1\). The training trajectory of EF is still ill-behaved, meanwhile both NG and iEF updates move towards the optimal decision boundary smoothly.

**Lemma C.1**.: _Suppose Assumption 5.2 holds, \(\forall n\in\{1,\ldots,N\}\), the loss reduction induced on the \(n\)-th training sample by the iEF update follows_

\[\frac{\mathrm{d}l_{n}(t)}{\mathrm{d}t}=-\|\nabla_{\bm{z}_{n}(t)}l_{n}(t)\|_{2}^ {2}.\] (22)

_Proof of Lemma. C.1_: \(\frac{\mathrm{d}l(t)}{\mathrm{d}t}\) can be computed as follows

\[\frac{\mathrm{d}l(t)}{\mathrm{d}t}=\nabla_{\bm{\theta}(t)}\bm{l}(t)\frac{ \mathrm{d}\bm{\theta}(t)}{\mathrm{d}t}=-\nabla_{\bm{\theta}(t)}\bm{l}(t) \nabla_{\bm{\theta}(t)}\bm{l}(t)^{\top}[\nabla_{\bm{\theta}(t)}\bm{l}(t) \nabla_{\bm{\theta}(t)}\bm{l}(t)^{\top}]^{-1}\bm{s}_{\text{iEF}}(t)=-\bm{s}_{ \text{iEF}}(t).\] (23)

Therefore, \(\frac{\mathrm{d}l_{n}(t)}{\mathrm{d}t}=[\frac{\mathrm{d}l(t)}{\mathrm{d}t}]_{ n}=-\|\nabla_{\bm{z}_{n}(t)}l_{n}(t)\|_{2}^{2}\).

Global Sub-linear Convergence for Softmax + CE Objective FunctionThe proof for Theorem 5.3 is provided here. In this analysis, the supervised learning setup with softmax + CE objective function is considered (as described in Sec. 3). This is a setup commonly used in practical deep learning, making this convergence analysis practically relevant.

As stated in Sec. 3, the target model is assumed to use a softmax activation function. For the \(n\)-th sample at time step \(t\), \(\bm{z}_{n}(t)=f_{\bm{\theta}(t)}(\bm{x}_{n})\), where \(\bm{z}_{n}(t)\in\mathbb{R}^{C}\) is the output logits. The output probability for class \(c\) can be computed from the logits using the softmax activation: \([p_{n}(c)](t)=[\bm{\sigma}_{\text{SM}}(\bm{z}_{n}(t))]_{c}\) where \(\bm{\sigma}_{\text{SM}}(\cdot):\mathbb{R}^{C}\rightarrow\mathbb{R}^{C}\) is the softmax activation function.

The per-sample loss in this setup is therefore defined as

\[l_{n}(t):=-\log[p_{n}(y_{n})](t):=-\log\hat{p}_{n}(t)=-\log\left[\bm{\sigma}_ {\text{SM}}(\bm{z}_{n}(t))\right]_{y_{n}},\] (24)

where \(\left[\bm{\sigma}_{\text{SM}}(\bm{z}_{n})\right]_{y_{n}}\) represents the output probability for the target class \(y_{n}\). It can be seen that the lowest loss for sample \(n\) tends to 0, which is achieved when \(\hat{p}_{n}(t)\to 1\).

The gradient of \(l_{n}(t)\)_w.r.t._\(\bm{z}_{n}(t)\) can be computed as

\[\left[\nabla_{\bm{z}_{n}(t)}l_{n}(t)\right]_{c}=\begin{cases}-[p_{n}(c)](t)&c \neq y_{n},\\ 1-\hat{p}_{n}(t)&c=y_{n}.\end{cases}\] (25)

The norm of the gradient satisfies the following inequality

\[\|\nabla_{\bm{z}_{n}(t)}l_{n}(t)\|_{2}^{2}\geq[1-\hat{p}_{n}(t)]^{2}.\] (26)

Combining Lemma. C.1 with the definition in Eqn. (24), the following equation can be obtained

\[\frac{\mathrm{d}l_{n}(t)}{\mathrm{d}t}=-\frac{\mathrm{d}\log\hat{p}_{n}(t)}{ \mathrm{d}t}=-\frac{1}{\hat{p}_{n}(t)}\frac{\mathrm{d}\hat{p}_{n}(t)}{\mathrm{ d}t}=-\|\nabla_{\bm{z}_{n}(t)}l_{n}(t)\|_{2}^{2}.\] (27)

Combining Eqn. (26)(27), the following inequality can be obtained

\[\frac{1}{[\hat{p}_{n}(t)][1-\hat{p}_{n}(t)]^{2}}\mathrm{d}\hat{p}_{n}(t)\geq \mathrm{d}t.\] (28)

Integrating on both sides gives

\[\frac{1}{1-\hat{p}_{n}(t)}+\log\frac{\hat{p}_{n}(t)}{1-\hat{p}_{n}(t)}-C_{0} \geq t.\] (29)

where \(C_{0}=\frac{1}{1-\hat{p}_{n}(0)}+\log\frac{\hat{p}_{n}(0)}{1-\hat{p}_{n}(0)}\). It is known that \(x>\log x\) for \(x>0\), therefore the inequality can be further relaxed to

\[\frac{1}{1-\hat{p}_{n}(t)}+\frac{\hat{p}_{n}(t)}{1-\hat{p}_{n}(t)}>t+C_{0},\] (30)

which is equivalent to

\[\frac{2}{1-\hat{p}_{n}(t)}>t+C_{0}+1.\] (31)

Now consider a large \(t\), s.t. \(t+C_{0}+1>0\), a bound can be provided for \(\hat{p}_{n}(t)\) as follows

\[\hat{p}_{n}(t)>1-\frac{2}{t+C_{0}+1}.\] (32)

This shows that iEF guarantees global sub-linear convergence for target probability \(\hat{p}_{n}\to 1\) for every training sample. It equivalently implies that iEF guarantees sub-linear convergence to the global minimum of the accumulated cross-entropy loss (achieved when \(\forall n=\{1,\ldots N\}\), \(\hat{p}_{n}=1\)), given the per-sample objective function is the softmax + cross-entropy combination.

### Global Linear Convergence for Strongly Convex Objective Functions

The proof for Theorem 5.4 is provided here. Unlike for Theorem 5.3, where the model is assumed to use a softmax + cross-entropy loss function, this theorem is applicable to a group of common loss functions: \(m\)-strongly convex objective functions.

The details of the setup used here mostly follow that in Sec. 3. The differences are described as follows. Given \(N\)_i.i.d._ training samples \((\bm{x}_{n},y_{n})_{n=1}^{N}\) (where \(\bm{x}_{n}\) is the input feature vector and \(y_{n}\) is a label of arbitrary form), the output of the model for the \(n\)-th sample is \(\bm{z}_{n}=f_{\bm{\theta}}(\bm{x}_{n})\) where \(z_{n}\in\mathbb{R}^{C}\) is a general model output vector (no longer logits vector). A \(m\)-strongly convex objective loss function \(\mathcal{F}_{\text{obj}}(\cdot)\) is used to compute the per-sample loss for the \(n\)-th sample \(l_{n}\in\mathbb{R}\) as follows

\[l_{n}=\mathcal{F}_{\text{obj}}(\bm{z}_{n},y_{n}):=\mathcal{F}_{\text{obj}}( \bm{z}_{n}),\] (33)

where the label \(y_{n}\) is omitted for simplicity. Finally, the following accumulated loss is to be minimised

\[\mathcal{L}(\bm{\theta})=\sum\nolimits_{n}l_{n}.\] (34)

In addition to Assumption 5.1 and 5.2, an additional assumption is made for the objective loss function as follows

**Assumption C.2**.: For the \(n\)-th sample, the objective loss function \(\mathcal{F}_{\text{obj}}(\bm{z}_{n})\) is assumed to be \(m\)-strongly convex on the model output space \(\bm{z}_{n}\), which then satisfies the following Polyak-Lojasiewicz inequality [5]

\[\mathcal{F}_{\text{obj}}(\bm{z}_{n})-\mathcal{F}_{\text{obj}}(\bm{z}_{n}^{ \star})\leq\frac{1}{2m}\|\nabla_{\bm{z}_{n}}\mathcal{F}_{\text{obj}}(\bm{z}_ {n})\|^{2},\] (35)

where \(\mathcal{F}_{\text{obj}}(\bm{z}_{n}^{\star})\) is the global minimum of the loss for the \(n\)-th sample. For simplicity, the notation \(l_{n}^{\star}\) is used in place of \(\mathcal{F}_{\text{obj}}(\bm{z}_{n}^{\star})\). The inequality is therefore rewritten as follows

\[l_{n}-l_{n}^{\star}\leq\frac{1}{2m}\|\nabla_{\bm{z}_{n}}l_{n}\|^{2}.\] (36)

Assumption. C.2 is quoted from [2], which covers a wide range of loss functions including mean-square-error. Note that under this assumption, both per-sample losses and accumulated loss can still have an arbitrarily non-convex landscape on the parameter space.

Based on Lemma C.1, when training with iEF updates, for the \(n\)-th sample, the loss change is

\[\frac{\mathrm{d}l_{n}(t)}{\mathrm{d}t}=-\|\nabla_{\bm{z}_{n}(t)}l_{n}(t)\|_{2 }^{2}\] (37)

Using the Polyak-Lojasiewicz inequality in Assumption. C.2, the following inequality can be obtained

\[\frac{\mathrm{d}(l_{n}(t)-l_{n}^{\star})}{\mathrm{d}t}\leq-2m(l_{n}(t)-l_{n}^{ \star})\Rightarrow\frac{1}{(l_{n}(t)-l_{n}^{\star})}\frac{\mathrm{d}(l_{n}(t)- l_{n}^{\star})}{\mathrm{d}t}\leq-2m.\] (38)

Integrating on both sides gives the following

\[l_{n}(t)-l_{n}^{\star}\leq e^{-2mt}(l_{n}(0)-l_{n}^{\star}),\] (39)

which shows that iEF pre-conditioned gradient flow linearly converges to the global minimum for every sample. This then implies that iEF has a global linear convergence guarantee for an accumulated loss \(\mathcal{L}(\bm{\theta})\).

## Appendix D Discussion on Practical Applications of IEF

### Stochastic IEF/EF Optimiser

As is mentioned in Sec. 5.4, the stochastic version of the exact iEF method can be directly used as an optimiser. It is described in Algorithm 1. In this section, the implementation of this exact iEF optimiser is discussed, along with its computation and memory complexity. Note that the stochastic exact EF optimiser can be constructed in a similar form in Algorithm 2. The following discussions should also apply to the exact EF optimiser.

Implementation DetailsThere are two main aspects of the implementation of this optimiser that are non-trivial. These are discussed respectively as follows:

1. **Jacobian matrix \(\nabla_{\boldsymbol{\theta}}\boldsymbol{l}\):** The computation of \(\nabla_{\boldsymbol{\theta}}\boldsymbol{l}\) is effectively collecting the per-sample gradients for a batch during the back-propagation process. In Pytorch [32], the per-sample gradients are readily computed during back-propagation, but are usually accumulated along the batch dimension to compute the total gradient, and are not available for collection directly. Therefore, additional backward hooks need to be attached to trainable modules to store these per-sample gradients during the back-propagation process. This is a standard procedure used in most approximate NGD optimisers [27, 4, 43]. Our implementation is partially based on this K-FAC implementation. Note that this additional procedure of computing per-sample gradients is negligible _w.r.t._ forward and backward of large pre-trained models in PEFT setups, making iEF/EF have comparable speed as standard AdamW/Adafactor/SGD optimisers.
2. **Logits gradient norm vector \(\boldsymbol{s}_{\text{iEF}}\):** During back-propagation in Pytorch [32], the gradient of logits \(\nabla_{\boldsymbol{z}_{n}}l_{n}\) is already computed, but is not stored because logits vector \(\boldsymbol{z}_{n}\) is not a leaf-node. This can be easily changed by calling the ".retain_grad()" method on the logits vector. Although this operation is non-standard to common approximate NGD optimisers, it adds negligible cost to standard back-propagation (in general deep learning setup, not limited to PEFT) and its effect on speed can be ignored.

Time and Memory ComplexityGiven a batch size of \(M\), and trainable parameters of size \(P\), assume the per-sample gradients have already been computed through backpropagation, the time complexity of computing each update is \(O(M^{3}+M^{2}P)\), and the memory complexity is \(O(M^{2}+MP)\). Due to model over-parameterisation, we have \(P\gg M\). Then, the time complexity becomes \(O(M^{2}P)\) and memory complexity becomes \(O(MP)\). In practical deep learning frameworks such as Pytorch [32], the limiting factor for the applicability of such an exact EF-like method is the memory complexity \(O(MP)\), which is essentially the storage of the \(M\) per-sample gradients involved in the computation of exact iEF updates. It is therefore only possible to apply exact EF-like methods to models with small trainable parameter sizes (either full tuning of small models or parameter-efficient fine-tuning of large models) or small batch size \(M\). This is the reason why exact EF is never directly used to optimise modern deep learning models, and additional approximation is always necessary (e.g. K-FAC [27] or SVD-based pruning [43]). Nevertheless, given the rise of large pre-trained models [48, 6, 39, 38], parameter-efficient fine-tuning has gained traction [15, 16, 7] and direct application of exact iEF may still be beneficial (as the trainable parameter size is usually \(<1\%\) of the pre-trained model size).

### Improving Existing Fisher-based Methods with IEF

It is mentioned in Appendix D.1 that exact iEF as an optimiser is limited by its memory complexity. Given the descent training performance of exact iEF optimiser, it would be interesting to observe the performance of iEF on more general setups. As is mentioned in Sec. 5.4, it can be achieved by incorporating iEF into existing EF-based optimisers such as empirical K-FAC [27]. In this section, an improvement to the EF-based K-FAC optimiser with iEF is proposed, which can act as a starting point for future work in improving other approximate empirical NGD methods.

#### d.2.1 Expression of IEF Matrix

The iEF matrix can be computed according to Eqn. (14): \(\mathbf{F}^{\star}=\nabla\boldsymbol{\varrho}\boldsymbol{l}^{\top}\text{diag} (\boldsymbol{s}_{\text{iEF}})^{-1}\nabla\boldsymbol{\varrho}\boldsymbol{l}\). This can be derived from Eqn. (8) using the identity \((\mathbf{U}\mathbf{V}+\lambda\mathbf{I})^{-1}\mathbf{U}=\mathbf{U}(\mathbf{V} \mathbf{U}+\lambda\mathbf{I})^{-1}\). For simplicity of derivation, we denote \(\mathbf{J}=\nabla\boldsymbol{\varrho}\boldsymbol{l}\) and assume \(\mathbf{J}\) is a square matrix and is full-rank. Also, we denote \(\mathbf{S}=\text{diag}(\boldsymbol{s}_{\text{iEF}})^{\frac{1}{2}}\) and assume the diagonal matrix \(\mathbf{S}\) to be full-rank. Therefore, the proposed iEF matrix can be expressed as \(\mathbf{F}^{\star}=\mathbf{J}^{\top}\mathbf{S}^{-2}\mathbf{J}\). The following derivation can be made

\[(\mathbf{F}^{\star})^{-1}(\nabla\boldsymbol{\varrho}\boldsymbol{l}^{\top} \mathbf{1}) =(\mathbf{J}^{\top}\mathbf{S}^{-2}\mathbf{J})^{-1}\mathbf{J}^{ \top}\mathbf{1}=[(\mathbf{J}^{\top}\mathbf{S}^{-1})(\mathbf{S}^{-1}\mathbf{J} )]^{-1}(\mathbf{J}^{\top}\mathbf{S}^{-1})(\mathbf{S}\mathbf{1})\] (40) \[=(\mathbf{J}^{\top}\mathbf{S}^{-1})[(\mathbf{S}^{-1}\mathbf{J})( \mathbf{J}^{\top}\mathbf{S}^{-1})]^{-1}\mathbf{S}\mathbf{1}=\mathbf{J}^{\top }\mathbf{S}^{-1}\mathbf{S}[\mathbf{J}\mathbf{J}^{\top}]^{-1}\mathbf{S}\mathbf{ S}\mathbf{S}\mathbf{1}\] \[=\mathbf{J}^{\top}[\mathbf{J}\mathbf{J}^{\top}]^{-1}\mathbf{S}^{ 2}\mathbf{1}=\mathbf{J}^{\top}[\mathbf{J}\mathbf{J}^{\top}]^{-1}\boldsymbol{s }_{\text{iEF}}.\]

This shows that the update pre-conditioned by \(\mathbf{F}^{\star}\) indeed is the same as the iEF update described in Eqn. (8).

The expression for the iEF matrix in Eqn. (14) can be alternatively rewritten as follows

\[\mathbf{F}^{\star}=\nabla\boldsymbol{\varrho}\boldsymbol{l}^{\top}\text{diag }(\boldsymbol{s}_{\text{iEF}})^{-1}\nabla\boldsymbol{\varrho}\boldsymbol{l}= \sum\nolimits_{n}(\|\nabla_{\boldsymbol{z}_{n}}l_{n}\|_{2}^{-1}\nabla \boldsymbol{\varrho}l_{n})(\|\nabla_{\boldsymbol{z}_{n}}l_{n}\|_{2}^{-1} \nabla\boldsymbol{\varrho}l_{n})^{\top},\] (41)

which differs from the EF matrix in Eqn. (3) in that each per-sample gradient is re-scaled with \(\|\nabla_{\boldsymbol{z}_{n}}l_{n}\|^{-1}\). Such simple scaling is easy to implement in most approximate empirical NGD optimisers.

#### d.2.2 Improving Empirical K-FAC with IEF

The empirical K-FAC [37] is a widely used version [33; 34; 49; 31] of the original K-FAC method [27]. Its formulation can be described as follows.

Assume there are \(n\) samples in the target batch. For one fully connected layer in a target model, the weight matrix is denoted by matrix \(\mathbf{W}\in\mathbb{R}^{m\times k}\), the (batched) input is denoted by \(\boldsymbol{a}\in\mathbb{R}^{n\times m}\) and the (batched) output is denoted by row vector \(\boldsymbol{c}\in\mathbb{R}^{n\times k}\). They satisfy \(\boldsymbol{c}=\boldsymbol{a}\mathbf{W}\). The gradient \(\nabla_{\boldsymbol{c}}\boldsymbol{l}\in\mathbb{R}^{n\times k}\) is denoted by \(\boldsymbol{g}\). The block-diagonal portion of the EF matrix corresponding to this layer (denoted as \(\tilde{\mathbf{F}}_{\mathbf{W}}\)) can be estimated using K-FAC approximation as follows [27]

\[\tilde{\mathbf{F}}_{\mathbf{W}}=\mathbb{E}[(\boldsymbol{g}^{\top}\boldsymbol{g })\otimes(\boldsymbol{a}^{\top}\boldsymbol{a})]\approx\mathbb{E}[\boldsymbol {g}^{\top}\boldsymbol{g}]\otimes\mathbb{E}[\boldsymbol{a}^{\top}\boldsymbol{a}].\] (42)

This is based on the gradient expression for weight matrix \(\mathbf{W}\): \(\nabla_{\mathbf{W}}l=\boldsymbol{g}^{\top}\boldsymbol{a}\). By rescaling this gradient with vector \(\boldsymbol{s}_{\text{iEF}}\), the expression for \(\tilde{\mathbf{F}}_{\mathbf{W}}\) becomes:

\[\tilde{\mathbf{F}}_{\mathbf{W}}^{\star}=\mathbb{E}[\boldsymbol{g}^{\top}\text{ diag}(\boldsymbol{s}_{\text{iEF}})^{-1}\boldsymbol{g}]\otimes\mathbb{E}[\boldsymbol{a}^{ \top}\boldsymbol{a}],\] (43)

where the \(\boldsymbol{s}_{\text{iEF}}\) vector is easy to compute in Pytorch [32] with negligible extra cost (as shown in Appendix D.1), and such diagonal rescaling is straightforward to implement. In conclusion, the idea of iEF can be easily integrated into existing approximate empirical NGD optimisers, and it is interesting to observe the improvements due to such integration.

Preliminary evaluation of the approximation quality to the exact NG update of the block-diagonal version of the iEF method is conducted using the evaluation framework proposed in Sec. 6 (following the style of experiment (E1)). The approximation quality to exact NG updates (relative to SGD updates) are reported for iEF, KFAC (block-diagonal version of SF method [12]), eKFAC (block-diagonal version of EF method [37]) and ieKFAC (block-diagonal version of iEF method), for different training stages of selected tasks in Fig. 5. All updates are generated using a near-zero damping.

#### d.2.3 Improving Empirical WoodFisher Model Compression

The EF matrix is used in the WoodFisher model compression algorithm [46] as an approximation to the Hessian matrix. It is therefore natural to consider using the iEF matrix in place of the EF matrix to improve the approximation quality. The WoodFisher algorithm relies on a recursion-base formulation of the EF matrix as follows

\[\tilde{\mathbf{F}}_{n+1}=\tilde{\mathbf{F}}_{n}+\frac{1}{N}\nabla_{\boldsymbol{ \theta}}l_{n}\nabla_{\boldsymbol{\theta}}l_{n}^{\top}.\] (44)

This can be easily switched to the iEF matrix using Eqn. 41 as follows

\[\mathbf{F}_{n+1}^{\star}=\mathbf{F}_{n}^{\star}+\frac{1}{N}(\|\nabla_{\boldsymbol {z}_{n}}l_{n}\|_{2}^{-1}\nabla_{\boldsymbol{\theta}}l_{n})(\|\nabla_{ \boldsymbol{z}_{n}}l_{n}\|_{2}^{-1}\nabla_{\boldsymbol{\theta}}l_{n})^{\top},\] (45)

## Appendix E Monte-Carlo Sampled Fisher Matrix

The SF method used in the experimental setups (see Sec. 7) is introduced and analysed in details in this section. A commonly used method to estimate the exact Fisher matrix without bias is through Monte-Carlo sampling, which is used in the original K-FAC method [27]. This method is referred to as sampled Fisher in this paper. Particularly, when only one Monte-Carlo sample is generated for each training sample, the corresponding method is termed SF for brevity. Recall the definition of the Fisher matrix in Eqn. (2), it can be rewritten using expectations as follows

\[\mathbf{F}=\sum\nolimits_{n}\mathbb{E}_{c\sim p_{\boldsymbol{\theta}}(y| \boldsymbol{x}_{n})}[\nabla_{\boldsymbol{\theta}}\log p_{n}(c)\nabla_{ \boldsymbol{\theta}}\log p_{n}(c)^{\top}].\] (46)

This means, by generating enough labels (with Monte-Carlo sampling) from the output distribution \(p_{\boldsymbol{\theta}}(y|x_{n})\), and computing the gradient _w.r.t._ these labels \(\nabla_{\boldsymbol{\theta}}\log p_{n}(c)\), the Fisher matrix can be estimated without bias.

Assume \(K\) labels are generated for each training sample, the exact expression for sampled Fisher with \(K\) samples (denoted as \(\hat{\mathbf{F}}(K)\)) is as follows

\[\hat{\mathbf{F}}(K)=\frac{1}{K}\sum_{n=1}^{N}\sum_{k=1}^{K}[\nabla_{ \boldsymbol{\theta}}\log p_{n}(\hat{y}_{n}^{(k)})\nabla_{\boldsymbol{\theta}} \log p_{n}(\hat{y}_{n}^{(k)})^{\top}]=\frac{1}{K}\hat{\mathbf{J}}(K)^{\top} \hat{\mathbf{J}}(K),\] (47)

where \(\hat{y}_{n}^{(k)}\sim p_{\boldsymbol{\theta}}(y|\boldsymbol{x}_{n})\) is the \(k\)-th generated label for the \(n\)-th sample, Jacobian \(\hat{\mathbf{J}}(K)\in\mathbb{R}^{(NK)\times P}\) denotes the stacked sampled gradients \([\nabla_{\boldsymbol{\theta}}\log p_{1}(\hat{y}_{1}^{(1)}),\ldots,\nabla_{ \boldsymbol{\theta}}\log p_{n}(\hat{y}_{n}^{(k)}),\ldots,\nabla_{\boldsymbol{ \theta}}\log p_{N}(\hat{y}_{N}^{(K)})]^{\top}\).

\(\hat{\mathbf{F}}(1)\), _i.e._ sampled Fisher with 1 sampling for each training sample, is used as a baseline approximate NGD method in Sec. 7 (termed as SF in this paper) and is compared against EF and iEF. This has two reasons:

Figure 5: Approximation quality (relative to SGD) of “un-damped” iEF, ieKFAC, KFAC and eKFAC for 3 selected PEFT tasks (QNLI+LoRA, RTE+LoRA, MRPC+LoRA) across training stages. The style of the visualisation follows that for the first 3 plots of Fig. 2. This evaluation shows that, ieKFAC update has a similar approximation quality to the exact iEF method, and a much better approximation quality than both KFAC and eKFAC in most training stages. This demonstrates the effectiveness of using ieKFAC to approximate iEF and its potential of further improving the approximation quality of existing KFAC-based methods.

1. For \(\hat{\mathbf{F}}(K)\), \(K=1\) is more commonly chosen in practice [13; 27] than \(K>1\). This is mainly because \(\hat{\mathbf{F}}(K)\) requires \(K\) additional back-propagations through the target batch, which becomes very expensive for a large \(K\).
2. \(\hat{\mathbf{F}}(1)\) has a maximum rank of \(N\), which is the same rank as the EF matrix (\(\tilde{\mathbf{F}}\)) and the iEF matrix (\(\tilde{\mathbf{F}}^{\star}\)).

Note that even for \(\hat{\mathbf{F}}(1)\), as compared to EF and iEF methods, requires an additional back-propagation through target batches. This makes \(\hat{\mathbf{F}}(1)\) hard to implement in practice, and becomes nearly twice as expensive as EF/iEF. It is the leading reason that EF is commonly used in favour of \(\hat{\mathbf{F}}(1)\) in practice [33; 34; 49; 31].

Exact Pre-conditioning with \(\hat{\mathbf{F}}(1)\)To properly evaluate the pre-conditioner \(\hat{\mathbf{F}}(1)\) either through optimisation or our evaluation framework (see Sec. 6), it is necessary to exactly compute the pre-conditioned gradient. The Sherman-Morrison-Woodbury (SMW) identity [40] can be used to achieve this, which states that \((\mathbf{U}^{\top}\mathbf{U}+\lambda\mathbf{I})^{-1}=\frac{1}{\lambda}[ \mathbf{I}-\mathbf{U}^{\top}(\mathbf{U}\mathbf{U}^{\top}+\lambda\mathbf{I})^ {-1}\mathbf{U}]\).

The update pre-conditioned by \(\hat{\mathbf{F}}(1)\) (denoted as \(\Delta\boldsymbol{\theta}_{\text{SF}}\)) takes the following form

\[\Delta\boldsymbol{\theta}_{\text{SF}}=(\hat{\mathbf{F}}(1)+\lambda\mathbf{I}) ^{-1}\nabla_{\boldsymbol{\theta}}\mathcal{L}(\boldsymbol{\theta}).\] (48)

By plugging in \(\hat{\mathbf{F}}(1)=\hat{\mathbf{J}}(1)^{\top}\hat{\mathbf{J}}(1)\) and using the SMW identity, the update can then be computed as follows

\[\Delta\boldsymbol{\theta}_{\text{SF}}=\frac{1}{\lambda}[\mathbf{I}-\hat{ \mathbf{J}}(1)^{\top}(\hat{\mathbf{J}}(1)\hat{\mathbf{J}}(1)^{\top}+\lambda \mathbf{I})^{-1}\hat{\mathbf{J}}(1)]\nabla_{\boldsymbol{\theta}}\mathcal{L}( \boldsymbol{\theta}),\] (49)

which is easy to compute once the Jacobian (\(\hat{\mathbf{J}}(1)\) for sampled gradients is collected (using the per-sample gradient collection method described in Appendix D.1). Similar to EF and iEF, an exact stochastic optimiser can also be constructed for SF, as is described in Algorithm 3. Note that as compared to Algorithm 2,1, SF requires an additional back-propagation.

``` Require: All \(N\) training samples, initial model parameters \(\boldsymbol{\theta}(0)\) for\(t=0\)to\(T-1\)do  Sample Mini-batch \(\mathcal{M}(t)\) with size \(M\)  Perform forward pass on batch \(\mathcal{M}(t)\) to obtain output distribution \(\boldsymbol{p}(t)\)  Perform back-propagation to obtain accumulated loss \(\nabla_{\boldsymbol{\theta}(t)}\mathcal{L}(\boldsymbol{\theta}(t))\)  Sample output labels \(\hat{\boldsymbol{y}}(t)\sim\boldsymbol{p}(t)\)  Compute cross-entropy loss between \(\boldsymbol{p}(t)\) and sampled label \(\hat{\boldsymbol{y}}(t)\) to obtain the pseudo per-sample loss vector \(\hat{\boldsymbol{l}}(t)\)  Perform additional back-propagation to obtain Jacobian \(\mathbf{A}(t)=\nabla_{\boldsymbol{\theta}(t)}\hat{\boldsymbol{l}}(t)\)  Compute SF update \(\Delta\boldsymbol{\theta}_{\text{SF}}(t)=\frac{1}{\lambda}[\mathbf{I}- \mathbf{A}(t)^{\top}(\mathbf{A}(t)\mathbf{A}(t)^{\top}+\lambda\mathbf{I})^ {-1}\mathbf{A}(t)]\nabla_{\boldsymbol{\theta}(t)}\mathcal{L}(\boldsymbol{ \theta}(t))\): Eqn. (49)  Update model \(\boldsymbol{\theta}(t+1)=\boldsymbol{\theta}(t)-\eta\Delta\boldsymbol{\theta}_ {\text{SF}}(t)\) endfor ```

**Algorithm 3** Stochastic Optimisation with Exact SF

Impact of Inversely-Scaled Projection on SF UpdateAlthough the same analysis in Sec. 4 cannot be applied to SF due to the different formulation of the update, the _inversely-scaled projection_ issue is still expected to impact SF. As the model gets better trained, it becomes likely for the sampled Fisher matrix \(\hat{\mathbf{F}}(1)\) of SF to sample empirical per-sample gradients. Pre-conditioning with the inverse of this matrix would then cause the inverse-scaling issue just like EF. Consequently, a poorer approximation quality of SF to the exact NG update is still probable.

## Appendix F Empirical Evaluation Framework for Approximate NGD Methods

### Implementation Details

As introduced in Sec. 6, the proposed empirical evaluation framework is built around the proposed indicator \(\gamma(\cdot)\). Consider a given model checkpoint \(\boldsymbol{\theta}(t)\), \(M\) pairs of training samplesfrom a target dataset and \(K\) approximate NGD methods \(\bm{g}^{(k)}(\cdot)\) of interest. Each update generation method can generate an update \(\Delta\bm{\theta}(t)^{(k)}\) for the provided samples and a given model checkpoint following \(\Delta\bm{\theta}(t)^{(k)}=\bm{g}^{(k)}(\bm{\theta}(t),(\bm{x}_{n},y_{n})_{n=1} ^{M})\). The framework is implemented such that \(K\) indicators \(\gamma(\Delta\bm{\theta}(t)^{(k)})\) are computed, which allows for the quantitative comparison of these update generation methods _w.r.t._ their approximation quality to the exact NGD method. The detailed evaluation process is described in Algorithm 4. In practice, for the \(k\)-th update generation method, multiple batches are used to compute a series of \(\gamma(\Delta\bm{\theta}^{(k)})\), and their average is used to provide a more accurate indicator value. Note that this evaluation process can be repeated for model checkpoints at different training stages \(\bm{\theta}_{t^{{}^{\prime}}}\) to provide a more thorough comparison.

It is worth mentioning that the ratio \(\gamma(\Delta\bm{\theta}(t)^{(k)})/\gamma(\nabla_{\bm{\theta}(t)}\mathcal{L}( \bm{\theta}(t)))\) is an important quantity. This ratio describes the relative approximation quality of the target update generation method _w.r.t._ standard SGD method, and should be smaller than 1 for a good approximate NGD method. If this ratio is consistently larger than 1, then the target approximate NGD method \(\bm{g}^{(k)}(\cdot)\) has a worse approximation quality than the SGD method and is likely to perform poorly in practice.

The four update methods investigated in the main paper (see Sec. 7) are SGD, EF, iEF and SF (sampled Fisher with 1 Monte-Carlo sample for each training sample). The SGD update is simply the gradient \(\nabla_{\bm{\theta}(t)}\mathcal{L}(\bm{\theta}(t))\); the iEF update is computed according to Eqn. (8); the EF update is computed according to Eqn. (5); the SF update is computed according to Eqn. (49).

Finally, the computationally most expensive operation when computing indicators is finding the matrix-vector product between the exact Fisher and a given update direction, _i.e._\(\mathbf{F}\Delta\bm{\theta}\). A detailed discussion is provided on its implementation and algorithm complexity in the following section.

``` Input: A batch of \(M\) training data pairs \((\bm{x}_{n},y_{n})_{n=1}^{M}\), model checkpoint \(\bm{\theta}(t)\), loss function \(\mathcal{L}(\bm{\theta}(t))\), \(K\) update generation methods \(\bm{g}^{(k)}(\bm{\theta}(t),(\bm{x}_{n},y_{n})_{n=1}^{M}),k\in\{1,\cdots,K\}\). Execute:  Compute accumulated gradient \(\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta}(t))\) on \(M\) training samples for\(k=1\)to\(K\)do  Compute update \(\Delta\bm{\theta}(t)^{(k)}=\bm{g}^{(k)}(\bm{\theta}(t),(\bm{x}_{n},y_{n})_{n=1} ^{M})\)  Compute indicator \(\gamma(\Delta\bm{\theta}(t)^{(k)})=\frac{[(\Delta\bm{\theta}(t)^{(k)})^{ \top}\mathbf{F}\Delta\bm{\theta}(t)^{(k)}]^{\frac{1}{2}}}{[(\Delta\bm{\theta} (t)^{(k)})^{\top}\nabla_{\bm{\theta}(t)}\mathcal{L}(\bm{\theta}(t))]}\) endfor Output: Return \(K\) indicators \(\left[\gamma(\Delta\bm{\theta}(t)^{(k)})\right]_{k=1}^{K}\). Updates with smaller indicator values are considered better approximate NG updates. ```

**Algorithm 4** Empirical evaluation framework for approximate NGD Methods

#### f.1.1 Matrix-Vector Product and Algorithm Complexity

The most important operation in Algorithm 4 when computing the proposed indicator is the computation of the matrix-vector product \(\mathbf{F}(\cdot)\). It is the most expensive operation that dominates both the time and space complexity of this algorithm. Fortunately, this can be efficiently computed in a modern auto-grad framework using the double differentiation trick [44]. The key to computing the matrix-vector product with the exact Fisher matrix is identifying the equivalence of the Fisher matrix and the Generalised Gauss-Newton matrix (GGN matrix, denoted as \(\mathbf{G}\)). It can be shown that for the target model which uses softmax activation and cross-entropy loss function, the following equality holds

\[\mathbf{F}=\sum\nolimits_{n}\nabla_{\bm{\theta}}\bm{z}_{n}^{\top}(\nabla_{ \bm{z}_{n}}^{2}l_{n})\nabla_{\bm{\theta}}\bm{z}_{n}=\mathbf{G}.\] (50)

Therefore, the matrix-vector product can be broken down into the computation of three separate matrix-vector products. The double differentiation trick is useful when computing the first two matrix-vector products: \(\nabla_{\bm{\theta}}\bm{z}_{n}(\cdot)\), \(\nabla_{\bm{z}_{n}}^{2}l_{n}(\cdot)\). The final matrix-vector product \(\nabla_{\bm{\theta}}\bm{z}_{n}^{\top}(\cdot)\) can be computed using the standard back-propagation pipeline. Please refer to [44] for implementation details.

Overall, with the double differentiation trick, the time and memory complexity of the matrix-vector product with the Fisher matrix is comparable to standard training with batch size \(M\). In our implementation in Pytorch, the matrix-vector product requires 2 forward passes and 2 backward passesthrough the model on the \(M\) samples. This makes our proposed empirical evaluation framework efficient in practice.

Finally, for the reader's information, if we adopt the method used in [25], it is possible to further reduce the cost of the matrix-vector product down to only 1 additional forward pass and backward pass. However, this may not be a preferable choice because it requires customised forward-propagation code, making our evaluation framework less generally applicable.

#### f.1.2 Comparison to Traditional Evaluation Methods

As is summarised in Sec. 2, traditional evaluation of the approximation quality to the NGD method requires the explicit storage and inversion of the exact Fisher matrix. This is usually done using the definition in Eqn. (2). For a general model, computing the Fisher matrix in Eqn. (2) requires \(C\) separate backwards and forward passes through the model (\(C\) being the output category number). This can range from 10 (e.g. MNIST[21]) to >10,000 (for our LLM finetune setup [7]). From a time complexity perspective, the traditional method can be arbitrarily more expensive than our evaluation framework depending on the output category size \(C\). From a memory complexity perspective, the storage of the Fisher matrix of \(\mathbb{R}^{P\times P}\) is infeasible for a large-scale model. Both of these concerns limit the traditional evaluation of approximate NGD methods in large practical setups. On the contrary, our proposed evaluation framework resolves these limitations of the traditional evaluation method, meanwhile having a strong theoretical motivation. This greatly facilitates the evaluation of approximate NGD methods in large-scale deep-learning setups for methods not limited to EF, iEF and SF.

### Hessian-free Implicitly Minimises \(\gamma(\cdot)\) Indicator

In Sec. 6.2, it is stated that the indicator \(\gamma(\cdot)\) is implicitly minimised in the linear CG algorithm to iteratively approximate the exact NG update in Hessian-free method [25]. In this section, this statement is formally introduced and justified.

The Hessian-free method is an important approximate NGD method. Unlike most other approximate NGD methods, which approximate the Fisher matrix \(\mathbf{F}\) directly, the Hessian-free method does not explicitly express the Fisher matrix. Instead, it uses an iterative method to directly solve for \(\Delta\bm{\theta}_{\text{HF}}\) in the following equation

\[\mathbf{F}\Delta\bm{\theta}_{\text{HF}}=\nabla_{\bm{\theta}}\mathcal{L}(\bm{ \theta}).\] (51)

The iterative method used in Hessian-free is the linear CG algorithm [45], which is a classical method that iteratively solves for \(\Delta\bm{\theta}_{\text{HF}}\) in Eqn. (51) with only the access to the matrix-vector product function \(\mathbf{F}(\cdot)\) (introduced in Sec. 6). Since the Fisher is not required to be explicitly stored, the method enjoys a memory complexity of \(O(P)\) where \(P\) is the number of trainable parameters in a target model.

The linear CG algorithm (without pre-conditioning) used in HF is shown in Algorithm 5.

It is known that the CG algorithm is an efficient solver for Eqn. (51) and is usually regarded as a locally optimal minimiser (each step uses an exact line search) for the equivalent pseudo loss function [25, 45]

\[L^{{}^{\prime}}_{\text{CG}}(\Delta\bm{\theta}_{\text{HF}})=-\Delta\bm{\theta }_{\text{HF}}^{\top}\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})+\frac{1}{2} \Delta\bm{\theta}_{\text{HF}}^{\top}\mathbf{F}\Delta\bm{\theta}_{\text{HF}}.\] (52)

However, it is also possible to interpret this method as a locally optimal minimiser [18] for the generalised Rayleigh Quotient of positive semi-definite matrices \(\mathbf{F}\) and \(\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})\nabla_{\bm{\theta}}\mathcal{L}( \bm{\theta})^{\top}\)

\[\gamma(\Delta\bm{\theta}_{\text{HF}})^{2}=\frac{(\Delta\bm{\theta}_{\text{HF} }^{\top}\mathbf{F}\Delta\bm{\theta}_{\text{HF}})}{\Delta\bm{\theta}_{\text{ HF}}^{\top}[\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})\nabla_{\bm{ \theta}}\mathcal{L}(\bm{\theta})^{\top}]\Delta\bm{\theta}_{\text{HF}}}\] (53)

where \(\gamma(\Delta\bm{\theta}_{\text{HF}})\) happens to be the proposed indicator of this paper. The proof of this statement is provided in the following section.

#### f.2.1 Proof that Linear CG is a Locally Optimal Minimiser for Indicator \(\gamma(\cdot)\)

Note that in every iteration in Algorithm 5, an update \(\alpha_{m}\bm{v}_{m}\) is accumulated to the final solution \(\bm{x}_{M_{\text{CG}}}\). This update \(\alpha_{m}\bm{v}_{m}\) can be shown to achieve the local maximum reduction in \(\gamma(\bm{x})^{2}\) in every iteration. Formally, it is to be shown that, for the current partial solution \(\bm{x}_{m}\) and the given search direction \(\bm{v}_{m}\), the scaling factor \(\alpha_{m}\) achieves the maximum reduction in \(\gamma(\bm{x}_{M_{\text{CG}}})^{2}\):

\[\alpha_{m}=\operatorname*{arg\,min}_{\alpha_{m}}\gamma(\bm{x}_{M_{\text{CG}}}) ^{2}.\] (54)

Now, assume the actual minimiser \(\alpha_{m}^{{}^{\prime}}\) is different from the \(\alpha_{m}\) in the CG iterations. The true minimiser \(\alpha_{m}^{{}^{\prime}}\) can be acquired through a Ritz-Rayleigh analysis [18]. By setting \(\mathbf{B}^{{}^{\prime}}=\nabla_{\theta}\mathcal{L}(\bm{\theta})\nabla_{\theta }\mathcal{L}(\bm{\theta})^{\top}\), and plugging in the true minimiser \(\alpha_{m}^{{}^{\prime}}\), Eqn. (54) becomes:

\[\alpha_{m}^{{}^{\prime}}=\operatorname*{arg\,min}_{\alpha_{m}^{{}^{\prime}}} \frac{[(\bm{x}_{m}+\alpha_{m}^{{}^{\prime}}\bm{v})^{\top}\mathbf{F}(\bm{x}_{m }+\alpha_{m}^{{}^{\prime}}\bm{v})]}{[(\bm{x}_{m}+\alpha_{m}^{{}^{\prime}}\bm{ v})^{\top}\mathbf{B}^{{}^{\prime}}(\bm{x}_{m}+\alpha_{m}^{{}^{\prime}}\bm{v})]}.\] (55)

The Ritz-Rayleigh analysis then gives the optimal scaling:

\[\alpha_{m}^{{}^{\prime}}=\frac{\bm{b}^{\top}\bm{v}_{m}}{\bm{v}_{m}^{\top} \mathbf{F}\bm{v}_{m}}.\] (56)

Recall that \(\alpha_{m}=\frac{\bm{r}_{m}^{\top}\bm{r}_{m}}{\bm{v}_{m}^{\top}\mathbf{F}\bm{ v}_{m}}\), in order to prove \(\alpha_{m}=\alpha_{m}^{{}^{\prime}}\), the following need be proved \(\bm{b}^{\top}\bm{v}_{m}=\bm{r}_{m}^{\top}\bm{r}_{m}\). This can be done through recursion.

For \(m=0\), it is obvious that \(\bm{b}^{\top}\bm{v}_{0}=\bm{b}^{\top}\bm{b}=\bm{r}_{0}^{\top}\bm{r}_{0}\).

For \(m>1\), it is known that \(\bm{b}^{\top}\bm{v}_{m-1}=\bm{r}_{m-1}^{\top}\bm{r}_{m-1}\) is true, then:

\[\bm{b}^{\top}\bm{v}_{m} =\bm{b}^{\top}(\bm{r}_{m}+\beta_{m}\bm{v}_{m-1})\] \[=\bm{b}^{\top}\bm{r}_{m}+\frac{\bm{r}_{m}^{\top}\bm{r}_{m}^{\top }}{\bm{r}_{m-1}^{\top}\bm{r}_{m-1}}\bm{b}^{\top}\bm{v}_{m-1}\] \[=\bm{r}_{0}^{\top}\bm{r}_{m}+\frac{\bm{r}_{m}^{\top}\bm{r}_{m}^{ \top}}{\bm{r}_{m-1}^{\top}\bm{r}_{m-1}}\bm{r}_{m-1}^{\top}\bm{r}_{m-1}^{\top} \bm{r}_{m-1}\enspace.\] (57) \[=0+\bm{r}_{m}^{\top}\bm{r}_{m}\enspace(\because\forall i\neq j, \bm{r}_{i}^{\top}\bm{r}_{j}=0)\] \[=\bm{r}_{m}^{\top}\bm{r}_{m}\]

In conclusion, \(\alpha_{m}\) is indeed the true minimiser for \(\frac{[(\bm{x}_{m}+\alpha_{m}^{{}^{\prime}}\bm{v})^{\top}\mathbf{F}(\bm{x}_{ m}+\alpha_{m}^{{}^{\prime}}\bm{v})]}{[(\bm{x}_{m}+\alpha_{m}^{{}^{\prime}}\bm{v})^{ \top}\mathbf{B}^{{}^{\prime}}(\bm{x}_{m}+\alpha_{m}^{{}^{\prime}}\bm{v})]}\) in every CG iterations, making CG a locally optimal optimiser for \(\gamma(\bm{x})^{2}\).

It is known that Hessian-free iteratively approaches the exact NG update [25], and a larger iteration number \(M_{\text{CG}}\) leads to a better approximation. Now that it has been shown that the indicator \(\gamma(\bm{x})\) decreases (optimally) for every iteration of Hessian-free, it verifies that indicator \(\gamma(\bm{x})\) directly describes the approximation level of the intermediate solution \(\bm{x}_{m}\) to the exact NG update.

### \(\gamma(\cdot)\) Quantifies Loss Reduction Effectiveness under the Local Quadratic Approximation

The indicator \(\gamma(\Delta\bm{\theta})\) can also describe the loss-reduction effectiveness of a target update direction under the Local Quadratic Approximation. The loss change induced by a target update can be estimated using a Taylor expansion up to the second order as follows:

\[\mathcal{L}(\bm{\theta}(t+1))\approx\mathcal{L}(\bm{\theta}(t))+\Delta\bm{ \theta}(t)^{\top}\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta}(t))+\frac{1}{2} \Delta\bm{\theta}(t)^{\top}\mathbf{B}_{t}\Delta\bm{\theta}(t)\] (58)

where \(\mathbf{B}\in\mathbb{R}^{P\times P}\) is the choice of curvature matrix. Such an approximation to the loss function is regarded as a Local Quadratic Approximation [55].

Consider a fixed-direction target update \(\Delta\bm{\theta}\) with an unknown step size \(\eta\), the maximum achievable loss reduction based on Local Quadratic Approximation can be obtained as follows

\[-\frac{1}{2\gamma(\Delta\bm{\theta})^{2}}=\min_{\eta}\eta\Delta\bm{\theta}^{ \top}\nabla_{\bm{\theta}}\mathcal{L}(\bm{\theta})+\frac{\eta^{2}}{2}\Delta\bm {\theta}^{\top}\mathbf{F}\Delta\bm{\theta},\] (59)

where \(\mathbf{F}\) is used in place of the curvature matrix \(\mathbf{B}\). This implies that the maximum loss reduction along update direction \(\Delta\bm{\theta}\) is \(-1/2\gamma(\Delta\bm{\theta})^{2}\), which is inversely proportional to the square of the proposed indicator. For an update with a smaller \(\gamma(\Delta\bm{\theta})\), it is expected to induce a larger loss reduction, with the exact NG update achieving the maximum loss reduction. Consequently, the proposed indicator has a strong correlation to practical convergence ability of the target update generation method.

## Appendix G Limitations

Focus on Theoretical Approximation for NGD MethodThe focus of the paper is on the theoretical approximation methods for NGD, including the exact EF method, the proposed iEF method, and also the SF method. Practical approximate (empirical) NGD optimisers are not the main focus of this paper (_e.g._ K-FAC [27], EK-FAC [11], TNT [41]_etc._), and no experiments are conducted for them. Despite the importance of these practical optimisers in the scene of NGD-based optimisation, they can all be considered a further (structure-aware) approximation to the EF or SF methods. However, it is an important future work to apply iEF to improve existing approximate NGD optimisers (an example of using iEF to improve empirical K-FAC is provided in Appendix D.2.2).

Limitations of Exact Update GenerationThe updates generated by EF, iEF and SF methods (defined in Eqn. (5), (8), (49) respectively) investigated in this paper are "_exact_", in order to provide a more theoretically rigorous comparison and analysis. In our experiments, they are generated based only on the current provided batch \(\mathcal{M}(t)\) as is described in Algorithms 2, 1, 3 respectively. The implementation of exact EF, iEF and SF updates requires storage of the \(M\) per-sample gradients, which is memory-demanding in practice. This limits the scope of application of the exact iEF (and EF/SF) optimisers to setups where trainable parameter size is small, such as PEFT for pre-trained models. However, given the rise of PEFT setups, and consider the competitive optimisation performance of the exact iEF optimiser, such limitations may be out-weighted by the gain in practice. Additionally, the exact update formulation of iEF means momentum and weight decay cannot be directly applied with the resultant optimiser. This affects the optimisation performance on certain setups, and further work is required to integrate these key techniques with exact iEF optimiser. However, none of these limitations would affect the future work where iEF is incorporated into practical approximate NGD optimisers, where memory constraints and momentum/weight decay integration is already resolved in these practical NGD optimisers.

Detailed Experiment Information

### Overall Experimental Setup

Textual Classification of GLUEWe have investigated 7 selected GLUE benchmark tasks [50] including CoLA, SST-2, MRPC, QQP, MNLI, QNLI, and RTE, which together cover a range of NLP classification tasks such as sentiment classification, semantic equivalence checking, grammar checking, entailment prediction etc. The same selection of GLUE tasks is used in [7]. One key aspect of GLUE tasks is that they do not have test labels, and for test evaluations, they have to be submitted to their official website (with a maximum allowed frequency of 3 submits per day). The textual label tokens are to be directly predicted by the target model. Also, an instruction is prepended to the input of each training sample. See details in Table. 2. For each task, a pre-trained T5-base model [39] is trained with two parameter-efficient finetuning methods: Prompt Tuning [22] and LoRA [16].

Computer Vision Classification with CIFAR100The well-known CIFAR100 dataset [19] is used to finetune the pretrained ViT model [8]. The model is finetuned with LoRA [16] following the setup in [15].

### Optimisation Experimental Setup

For Prompt Tuning, the Adafactor [23] optimiser is used as baseline (as is done in [23; 7]). For all other training setups, the AdamW [24] optimiser was used as the baseline.

Different tasks were trained with a different number of epochs. The validation accuracy (on the dev set of each task) of the best checkpoint is reported and sent for test evaluation (for GLUE, the checkpoints are submitted to GLUE website [50]). Details are shown in Table 3.

For all the GLUE tasks and for each finetuning method (Prompt Tuning or LoRA), a single set of hyper-parameters were searched for each optimiser and is used across runs on all 7 GLUE tasks. Three runs with different seeds were conducted to generate the error bar. For each run, the checkpoint with the highest validation accuracy was saved for later evaluation (to get test performance or to be evaluated in the proposed evaluation framework). All optimisers were trained on a batch size of 32.

Prompt Tuning + T5-base on GLUE: \(20\) prompts are used for Prompt Tuning. The trainable parameter size is \(15,360\), taking up \(0.0069\%\) of the total parameter size (222,918,912) of the T5-base model. Constant scheduling was used for Adafactor, SGD and iEF runs. For iEF, EF and SF, a damping of \(\lambda=1\times 10^{-12}\) was used. For the Adafactor baseline optimiser, the hyper-parameter provided in [7] was used (which comes from [23]): weight-decay \(1\times 10^{-5}\), \(\beta_{2}=0.8\), learning rate \(\eta=0.3\) and no parameter scaling. For the SGD method, the learning rate is \(\eta=100\), which was

\begin{table}
\begin{tabular}{c c c} \hline \hline
**Task** & **Input Format** & **Labels** \\ \hline \multirow{2}{*}{**CoLA**} & Classify if the following sentence’s grammar is & _acceptable_, \\  & acceptable or unacceptable: \{S1\} & _unacceptable_ \\ \hline \multirow{2}{*}{**SST-2**} & Classify if the following sentence’s sentiment is & _positive_, _negative_ \\  & positive or negative: \{S1\} & _positive_, _negative_ \\ \hline \multirow{2}{*}{**QQP**} & Classify if the following Q1 and Q2 are semantically & _yes_, _no_ \\  & equivalent, answer yes or no: Q1: \{S1\} Q2: \{S2\} & _yes_, _no_ \\ \hline \multirow{2}{*}{**MRPC**} & Classify if the following S1 and S2 are semantically & _yes_, _no_ \\  & equivalent, answer yes or no: S1: \{S1\} S2: \{S2\} & _yes_, _no_ \\ \hline \multirow{2}{*}{**MNLI**} & Predict whether the premise entails the hypothesis, contradicts the hypothesis,or neither, answer yes, & _yes_, _no_, _maybe_ \\  & no or maybe: premise: \{S1\} hypothesis: \{S2\} & _yes_, _no_, _maybe_ \\ \hline \multirow{2}{*}{**QNLI**} & Determine whether the context sentence S contains & _yes_, _no_ \\  & the answer to the question Q, answer yes or no: & _yes_, _no_ \\  & Q: \{S1\} S: \{S2\} & _yes_, _no_ \\ \hline \multirow{2}{*}{**RTE**} & Classify if S1 entailment S2 or not, answer yes or no: & _yes_, _no_ \\  & S1: \{S1\} S2: \{S2\} & _yes_, _no_ \\ \hline \hline \end{tabular}
\end{table}
Table 2: Training details for the 7 GLUE tasks. The input format column describes how the inputs are structured before being sent to the model. \(\{\)S1\(\}\), \(\{\)S2\(\}\) represents the default input sentence(s) of the corresponding tasks, some tasks have only one input sentence and some have two. Labels are the tokens to be predicted by the model for each task.

searched from \(\{0.1,1,10,20,50,100\}\). For the iEF method, the learning rate was \(\eta=50\), which was searched from \(\{1,10,50,100\}\). For the EF method, a different scheduling of learning rate was used to guarantee convergence, due to the inverse scaling of EF updates. The chosen strategy was a linearly decaying normalised update, with the first update being normalised to 1 (\(\{1\times 10^{-3},5\times 10^{-3}\), \(1\times 10^{-2}\), \(1\times 10^{-1}\), \(1\), \(10\}\)) and linearly decaying to 0. The SF method was trained using the same method as EF with the same set of hyperparameters.

**LoRA + T5-base on GLUE:** The LoRA was set to have rank 8 with dropout 0.1 [15]. The trainable parameter size is \(884,736\), taking up \(0.40\%\) of the total parameter size (222,918,912) of the T5-base model. Constant scheduling was used for the AdamW, SGD and iEF runs. For iEF, EF and SF, a damping of \(\lambda=1\times 10^{-7}\) was used (it is 5 orders of magnitude larger than that used in Prompt Tuning because the diagonal of the gradient covariance matrix has a 5 order of magnitude larger norm in LoRA than Prompt Tuning). For the AdamW baseline optimiser, the hyper-parameters are: weight-decay \(1\times 10^{-2}\), and the learning rate of \(1\times 10^{-3}\) was searched from \(\{1\times 10^{-3}\), \(5\times 10^{-4}\), \(1\times 10^{-4}\}\). For the SGD method, the learning rate was \(\eta=0.1\), which was searched from \(\{0.1,1,10,20,50,100\}\). For the iEF method, the learning rate was \(\eta=100\), which was searched from \(\{1,10,50,100\}\). For the EF method, a normalised update with linear scheduling was used similar to Prompt Tuning, and a starting learning rate of 0.01 was searched from \(\{1\times 10^{-5},5\times 10^{-3}\), \(1\times 10^{-2}\), \(1\times 10^{-1}\), \(1\}\). The SF method was trained with the same strategy and hyperparameters.

**LoRA + ViT on CIFAR100** The setup of using LoRA to finetune CIFAR100 in [15] was used. The trainable parameter size is 313,344, taking up \(0.36\%\) of the total parameter size (86,862,568) of the ViT model (vit-base-patch16-224). The same hyperparameters for LoRA + T5 was used for these experiments.

### Experiments Compute Resources

All the optimisation experiments and evaluation experiments are run on a cloud linux machine with 8 A100 GPUs with 80GB GRAM. For all the optimisation experiments, optimisation time with different optimisers are similar, apart from the SF optimiser where the additional back-propagation leads to an additional 60% runtime. For standard SGD/AdamW/Adafactor/EF/iEF optimisers, on average each complete run takes 10 hours. The slowest task (QQP + LoRA) takes 20 hours and the quickest task (RTE + Prompt Tuning) takes 0.3 hours. In total 420 GPU hours are run for all optimisation experiments. For evaluation runs, each evaluation is done on 100 batches of 160 training samples. For each checkpoint and a choice of damping, the evaluation takes on average 30 minutes. For all the evaluation runs (damping evaluated 5 tasks x 3 ckpts x 10 damping = 150 evaluations, standard evaluated 15 tasks x 7 ckpts = 115 evaluated, total 265 evaluation), 133 GPU hours are done. Considering hyper-parameter tuning, and various preliminary runs to make exact EF/iEF/SF optimisers and the evaluation framework to run properly, in total 2 times of additional compute time is required for all experiments.

### Licenses for All Used Assets

The license, citation and link to various asset used in this paper is provided in Table 4.

\begin{table}
\begin{tabular}{l c c} \hline \hline
**Task** & **Train Epochs** & **Evaluation Frequency** \\ \hline
**CoLA** & 20 & 100 \\
**SST-2** & 20 & 1000 \\
**QQP** & 5 & 1000 \\
**MRPC** & 30 & 50 \\
**MNLI** & 5 & 1000 \\
**QNLI** & 15 & 1000 \\
**RTE** & 40 & 30 \\
**CIFAR100** & 5 & 1000 \\ \hline \hline \end{tabular}
\end{table}
Table 3: Optimisation details all involved tasks. Train epochs represent the number of epochs for which the model is trained. Evaluation frequency describes the number of update steps between each validation evaluation on the development set.

### Further Evaluation Plots

Due to space limit and presentation concerns, the evaluation results presented in the main text in experiments (E1) and (E3) are only partial. In this section, additional evaluation results are presented.

#### h.5.1 Approximation Quality across Tasks and Training Stages

The same indicator evaluation in Fig. 2 is done for all experimented tasks. A full view of the indicator plots are provided in Fig. 6 and 7. Similar trend can be found across tasks.

#### h.5.2 Impact of Damping on Approximation Quality

The same damping analysis in Fig. 3 is applied to several other tasks (SST2+T5+Prompt Tuning, MRPC+T5+Prompt Tuning, CIFAR100+ViT+LoRA, RTE+T5+LoRA,as shown in Fig. 8, 9, 10, 11 respectively). Similar trend can be found across tasks.

\begin{table}
\begin{tabular}{l l l l} \hline \hline Asset Name & Citation & URL & License \\ \hline T5-base & [39] & Model checkpoint & Apache-2.0 \\ ViT-B/16 & [8] & Model checkpoint & Apache-2.0 \\ GLUE & [50] & Website & Multiple \\ CIFAR10/100 & [19] & Website & Unknown \\ Pytorch & [32] & Website & Multiple \\ \hline \hline \end{tabular}
\end{table}
Table 4: The license, citation and link to various asset used in this paper.

Figure 6: Four (log-scaled) ratios computed for checkpoints at various stages of training (sampled at the interval of one epoch) for all LoRA tasks, including T5 + 7 GLUE tasks and ViT + 1 CIFAR100. The figure is drawn in the same fashion as Fig. 2. Note that the error bar is not presented to improve presentation clarity.

Figure 7: Four (log-scaled) ratios computed for checkpoints at various stages of training (sampled at the interval of one epoch) for 7 Prompt Tuning tasks for T5 + GLUE. The figure is drawn in the same fashion as Fig. 2. Note that the error bar is not presented to improve presentation clarity.

[MISSING_PAGE_EMPTY:31]

## 6 Conclusion

\begin{table}
\begin{tabular}{l c c c c c c c c} \hline \hline  & **CoLA** & **SST-2** & **MRPC** & **QQP** & **MNLI** & **QNLI** & **RTE** & **CIFAR100** \\ \hline \multicolumn{1}{c}{Prompt Tuning} & & & & & & & \\ \hline
**Adafactor** & \(\mathbf{82.0}_{\pm 0.44}\) & \(94.2_{\pm 0.25}\) & \(84.8_{\pm 0.35}\) & \(\mathbf{90.7}_{\pm 0.01}\) & \(82.4_{\pm 0.25}\) & \(\mathbf{91.9}_{\pm 0.09}\) & \(64.7_{\pm 0.34}\) & - \\
**SGD** & \(69.1_{\pm 0.09}\) & \(93.3_{\pm 0.14}\) & \(70.0_{\pm 0.31}\) & \(85.0_{\pm 0.14}\) & \(74.5_{\pm 1.17}\) & \(88.7_{\pm 0.20}\) & \(54.8_{\pm 0.34}\) & - \\  & \(-0.1_{\pm 2.76}\) & \(90.3_{\pm 0.14}\) & \(\mathbf{80.8}_{\pm 0.14}\) & \(80.6_{\pm 5.03}\) & \(32.9_{\pm 0.09}\) & \(50.9_{\pm 0.59}\) & \(55.6_{\pm 1.30}\) & - \\
**EF** & \(69.0_{\pm 0.01}\) & \(90.3_{\pm 0.23}\) & \(81.2_{\pm 0.01}\) & \(0.11_{\pm 0.07}\) & & & & \\
**SF** & \(76.1_{\pm 2.27}\) & \(79.3_{\pm 0.37}\) & \(70.3_{\pm 1.23}\) & \(90.3_{\pm 0.03}\) & \(77.1_{\pm 0.93}\) & \(64.2_{\pm 0.65}\) & \(57.2_{\pm 0.75}\) & - \\  & \(39.4_{\pm 7.71}\) & \(81.0_{\pm 0.65}\) & \(87.2_{\pm 0.08}\) & & & & & \\
**iEF** & \(81.7_{\pm 0.16}\) & \(\mathbf{94.4}_{\pm 0.09}\) & \(\mathbf{86.2}_{\pm 1.41}\) & \(\mathbf{90.7}_{\pm 0.02}\) & \(\mathbf{83.4}_{\pm 0.09}\) & \(\mathbf{91.9}_{\pm 0.03}\) & \(\mathbf{74.6}_{\pm 0.85}\) & - \\  & \(50.7_{\pm 1.25}\) & & & & & & & \\ \hline \multicolumn{1}{c}{LoRA} & & & & & & & \\ \hline
**AdamW** & \(83.1_{\pm 0.15}\) & \(94.9_{\pm 0.07}\) & \(\mathbf{88.6}_{\pm 0.51}\) & \(90.0_{\pm 0.16}\) & \(83.2_{\pm 0.03}\) & \(92.2_{\pm 0.06}\) & \(\mathbf{83.4}_{\pm 1.06}\) & \(93.7_{\pm 0.32}\) \\  & \(58.7_{\pm 0.55}\) & & \(\mathbf{91.9}_{\pm 0.26}\) & \(86.8_{\pm 0.06}\) & & & & \\
**SGD** & \(81.3_{\pm 0.36}\) & & \(87.3_{\pm 0.28}\) & \(89.9_{\pm 0.69}\) & \(\mathbf{83.3}_{\pm 0.05}\) & \(\mathbf{92.3}_{\pm 0.09}\) & \(80.9_{\pm 0.72}\) & \(90.6_{\pm 1.02}\) \\  & \(53.6_{\pm 0.97}\) & & \(90.1_{\pm 0.41}\) & \(86.7_{\pm 0.88}\) & \(83.2_{\pm 0.82}\) & \(61.5_{\pm 0.04}\) & \(89.4_{\pm 0.21}\) & \(52.7_{\pm 0.01}\) & \(30.2_{\pm 1.20}\) \\  & \(69.1_{\pm 0.01}\) & & \(55.5_{\pm 0.28}\) & \(86.3_{\pm 0.28}\) & \(61.5_{\pm 0.04}\) & \(89.4_{\pm 0.21}\) & \(52.7_{\pm 0.01}\) & \(30.2_{\pm 1.20}\) \\  & \(10.5_{\pm 2.10}\) & & \(91.9_{\pm 0.07}\) & \(71.4_{\pm 0.23}\) & \(82.6_{\pm 0.32}\) & \(61.5_{\pm 0.04}\) & \(89.4_{\pm 0.21}\) & \(52.7_{\pm 0.01}\) & \(30.2_{\pm 1.20}\) \\
**SF** & \(79.4_{\pm 0.49}\) & & \(76.9_{\pm 0.28}\) & \(\mathbf{90.1}_{\pm 0.11}\) & \(81.9_{\pm 0.17}\) & \(91.8_{\pm 0.32}\) & \(71.8_{\pm 0.96}\) & \(92.7_{\pm 0.72}\) \\  & \(48.3_{\pm 1.45}\) & & \(85.2_{\pm 0.30}\) & \(\mathbf{86.9}_{\pm 0.10}\) & \(81.2_{\pm 0.02}\) & \(92.2_{\pm 0.11}\) & \(81.7_{\pm 0.55}\) & \(\mathbf{94.1}_{\pm 0.15}\) \\
**iEF** & \(\mathbf{83.4}_{\pm 0.24}\) & \(94.9_{\pm 0.21}\) & \(88.5_{\pm 0.88}\) & \(89.9_{\pm 0.09}\) & \(81.2_{\pm 0.02}\) & \(92.2_{\pm

\begin{table}
\begin{tabular}{l c c c c c c c c} \hline \hline  & \multicolumn{3}{c}{**CoLA**} & \multicolumn{1}{c}{**SST-2**} & \multicolumn{1}{c}{**MRPC**} & \multicolumn{1}{c}{**QQP**} & \multicolumn{1}{c}{**MNLI**} & \multicolumn{1}{c}{**QNLI**} & \multicolumn{1}{c}{**RTE**} & \multicolumn{1}{c}{**CIFAR100**} \\ \hline  & \multicolumn{6}{c}{Prompt Tuning} \\ \hline
**Adafactor** & 45.1 & 94.3 & \begin{tabular}{c} 87.1 \\ 82.8 \\ \end{tabular} & \begin{tabular}{c} 71.8 \\ 88.8 \\ \end{tabular} & \begin{tabular}{c} 82.9 \\ 88.7 \\ \end{tabular} & \begin{tabular}{c} **91.5** \\ 82.7 \\ \end{tabular} & 
\begin{tabular}{c} 60.7 \\ \end{tabular} & - \\
**SGD** & 6.4 & 93.5 & \begin{tabular}{c} 78.3 \\ 66.6 \\ \end{tabular} & \begin{tabular}{c} 71.3 \\ 88.9 \\ \end{tabular} & \begin{tabular}{c} 75.7 \\ 76.5 \\ \end{tabular} & \begin{tabular}{c} 87.4 \\ \end{tabular} & 
\begin{tabular}{c} 55.3 \\ \end{tabular} & - \\
**EF** & \(-3.8\) & \(90.2\) & \begin{tabular}{c} 79.9 \\ \end{tabular} & \begin{tabular}{c} 0.3 \\ \end{tabular} & \begin{tabular}{c} 33.4 \\ \end{tabular} & \begin{tabular}{c} 52.4 \\ \end{tabular} & 
\begin{tabular}{c} 50.4 \\ \end{tabular} & - \\
**SF** & \(45.2\) & \(93.7\) & \begin{tabular}{c} 79.7 \\ 67.8 \\ \end{tabular} & \begin{tabular}{c} 71.5 \\ 88.5 \\ \end{tabular} & \begin{tabular}{c} 77.8 \\ 78.5 \\ \end{tabular} & \begin{tabular}{c} 64.1 \\ \end{tabular} & 
\begin{tabular}{c} 52.3 \\ \end{tabular} & - \\
**iEF** & **50.9** & **94.4** & \begin{tabular}{c} **88.4** \\ **84.2** \\ \end{tabular} & \begin{tabular}{c} **72.0** \\ **89.2** \\ \end{tabular} & \begin{tabular}{c} **83.5** \\ **83.4** \\ \end{tabular} & \begin{tabular}{c} 91.3 \\ \end{tabular} & 
\begin{tabular}{c} **68.2** \\ \end{tabular} & - \\ \hline  & \multicolumn{6}{c}{LoRA} \\ \hline
**AdamW** & **52.2** & **94.5** & \begin{tabular}{c} 88.6 \\ 85.1 \\ \end{tabular} & \begin{tabular}{c} 71.5 \\ 88.8 \\ \end{tabular} & 
\begin{tabular}{c} **83.6** \\ 83.1 \\ \end{tabular} & **92.2** & **71.2** & 93.9 \\
**SGD** & 47.8 & 94.0 & \begin{tabular}{c} 79.9 \\ 66.6 \\ \end{tabular} & \begin{tabular}{c} **71.6** \\ 88.8 \\ \end{tabular} & \begin{tabular}{c} 83.5 \\ **83.8** \\ \end{tabular} & \begin{tabular}{c} 91.9 \\ \end{tabular} & \begin{tabular}{c} 70.1 \\ \end{tabular} & 
\begin{tabular}{c} 91.3 \\ \end{tabular} \\
**EF** & 0.0 & 92.1 & \begin{tabular}{c} 79.9 \\ 66.5 \\ \end{tabular} & \begin{tabular}{c} 65.4 \\ \end{tabular} & \begin{tabular}{c} 61.4 \\ \end{tabular} & \begin{tabular}{c} 89.4 \\ \end{tabular} & \begin{tabular}{c} 50.4 \\ \end{tabular} & 
\begin{tabular}{c} 31.0 \\ \end{tabular} \\
**SF** & 42.2 & 94.2 & \begin{tabular}{c} 84.3 \\ 75.8 \\ \end{tabular} & \begin{tabular}{c} 71.1 \\ 88.4 \\ \end{tabular} & \begin{tabular}{c} 82.1 \\ 82.3 \\ \end{tabular} & \begin{tabular}{c} 91.8 \\ \end{tabular} & \begin{tabular}{c} 64.9 \\ \end{tabular} & 
\begin{tabular}{c} 92.8 \\ \end{tabular} \\
**iEF** & 51.2 & 94.4 & \begin{tabular}{c} **89.3** \\ **85.9** \\ \end{tabular} & \begin{tabular}{c} 71.5 \\ **88.9** \\ \end{tabular} & \begin{tabular}{c} 81.1 \\ 80.8 \\ \end{tabular} & \begin{tabular}{c} **92.2** \\ \end{tabular} & \begin{tabular}{c} 69.1 \\ \end{tabular} & 
\begin{tabular}{c} **94.3** \\ \end{tabular} \\ \hline \hline \end{tabular}
\end{table}
Table 7: Test performance for all task, structure and optimiser combinations. For all tasks, only one test result is reported for the best validation checkpoint across three random seed runs. Task-specific metrics (all multiplied by 100) on the test set are reported in this table. For SST-2, QNLI, RTE and CIFAR100, accuracy is reported. For CoLA, Matthew’s Corr is reported. For MRPC and QQP, F1-score and Accuracy (in order) are reported. For MNLI, matched accuracy and unmatched Accuracy (in order) are reported.

Figure 12: Training loss and validation accuracy of all the Prompt Tuning tasks (7 GLUE tasks). Validation accuracy is reported at the same frequency as is stated by Table 3. For training loss, 100 points are reported across all training stages for every task. Each train loss data point represents the averaged train loss for all train batches between each reported data point. The error bars represent the standard deviation (1-sigma) for 3 random seed runs. The training loss for EF always starts to diverge halfway through training despite the more complicated scheduling. For most tasks, iEF is able to reach a lower training loss than EF, SF and the well-tuned baseline Adafactor.

Figure 13: Training loss and validation accuracy of all the LoRA tasks (7 GLUE tasks and 1 CIFAR100). Validation accuracy is reported at the same frequency as is stated by Table 3. For training loss, 100 points are reported across all training stages for every task. Each train loss data point represents the averaged train loss for all train batches between each reported data point. The error bars represent the standard deviation (1-sigma) for 3 random seed runs. The training loss for EF always starts to diverge halfway through training despite the more complicated scheduling. For most tasks, iEF is able to reach a lower training loss than EF, SF and the well-tuned baseline AdamW.

[MISSING_PAGE_FAIL:36]

Figure 14: Training loss and validation accuracy curves for the MLP + CIFAR10 train-from-scratch setup. The style of the figure follows that of Fig. 12 and 13. The optimisation performance follows EF < SGD \(\approx\) SF < Adam < iEF, which overall matches the result for the PEFT experiments. Note that, eventually, iEF achieves both the highest validation accuracy and the lowest training loss with a constant learning rate, while Adam and SGD require a multi-step scheduler to perform well.

Figure 15: Approximation quality (relative to SGD) of EF, SF and iEF methods _w.r.t._ damping factor \(\lambda\) at different training stages of setup task CIFAR10+MLP. The visualisation style and the experimental setup follows that of Fig. 3 (E3). This figure demonstrates that the better approximation quality and the robustness to damping of iEF also hold for a larger train-from-scratch image classification task at different training stages.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: In both the abstract and the (**Our Contributions** paragraph in) introduction section, we have summarised the scope and the claims of this paper accurately. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: A limitation section is provided in Appendix G, which describes the limitation of this work. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof?Answer: [Yes] Justification: We believe our theoretical derivations are accurate, and assumptions are stated where necessary, particularly for our convergence analysis for which a detailed proof is provided in Appendix C. Guidelines:

* The answer NA means that the paper does not include theoretical results.
* All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced.
* All assumptions should be clearly stated or referenced in the statement of any theorems.
* The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.
* Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.
* Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: Detailed experimental setups are provided in Appendix H.1 and H.2. Algorithms for the proposed empirical evaluation framework and the iEF/EF/SF optimisers are all provided and correctly cross-referenced. Finally, an anonymised codebase (with instructions) is provided in the supplemental material which enables reproducibility of key results in this paper. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility.

In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: The code to reproduce main results of the paper are provided in the supplemental material with clear instructions. We will make this codebase public on acceptance of this paper. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: Sec. 7 provides general descriptions of the experimental setup, and further details on data selection, model structures and hyper-parameter searching are provided in Appendix H.1 and H.2. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: Error bars (1-sigma standard deviation, assuming normally distributed errors) are provided for all experimental results figures in both the main paper and in appendix, apart from for Fig. 6 and 7, where the error bars are omitted for clearer presentation. Notethat the error bars are provided in Fig. 2 in the main text, which includes selected curves in Fig. 6 and 7. All the optimisation runs are done for three random seeds, and the average evaluation metric is reported along with stand deviation. Note that for test results, due to the difficulty of acquiring them (mainly the test result for GLUE tasks), only the test result for the best validation checkpoint is reported (in Table 1 and 7). Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors). * It should be clear whether the error bar is the standard deviation or the standard error of the mean. * It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified. * For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates). * If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: A discussion on compute resources is provided in Appendix H.3. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: This paper proposes an improvement to existing optimisation methods, which in general, and indeed, does not deviate from the NeurIPS Code of Ethics. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.

* The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: This paper proposes an improvement to existing optimisation methods, which should have no societal impacts (in addition to the existing impacts of general neural network optimisers). Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations. * The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. * The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology. * If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: We believe our paper poses no such risks. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected?Answer: [Yes]

Justification: Appendix H.4 provides the related information for all assets used in this paper. Guidelines:

* The answer NA means that the paper does not use existing assets.
* The authors should cite the original paper that produced the code package or dataset.
* The authors should state which version of the asset is used and, if possible, include a URL.
* The name of the license (e.g., CC-BY 4.0) should be included for each asset.
* For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.
* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.

13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets?

Answer: [Yes]

Justification: We intend to release the code for the proposed empirical evaluation framework, and the exact iEF/EF/SF optimiser. The code is properly documented, and are included in the codebase for reprehensibility submitted in supplemental material. Guidelines:

* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.

14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: This work involves no crowdsourcing nor research with human subjects. Guidelines:

* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.

15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects**Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained?

Answer: [NA]

Justification: This work involves no crowdsourcing nor research with human subjects.

Guidelines:

* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.