# SwitchHead: Accelerating Transformers with Mixture-of-Experts Attention

 Robert Csordas\({}^{1\dagger}\) Piotr Piekos\({}^{2}\) Kazuki Irie\({}^{3\dagger}\) Jurgen Schmidhuber\({}^{2,4}\)

\({}^{1}\)Stanford University, Stanford, CA, USA

\({}^{2}\)AI Initiative, KAUST, Thuwal, Saudi Arabia

\({}^{3}\)Center for Brain Science, Harvard University, Cambridge, MA, USA

\({}^{4}\)The Swiss AI Lab IDSIA, USI & SUPSI, Lugano, Switzerland

rcsordas@stanford.edu, piotr.piekos@kaust.edu.sa,

kirie@fas.harvard.edu, juergen@idsia.ch

Work done at IDSIA.

###### Abstract

Despite many recent works on Mixture of Experts (MoEs) for resource-efficient Transformer language models, existing methods mostly focus on MoEs for _feedforward_ layers. Previous attempts at extending MoE to the _self-attention_ layer fail to match the performance of the _parameter-matched_ baseline. Our novel SwitchHead is an effective MoE method for the _attention layer_ that successfully reduces both the compute and memory requirements, achieving wall-clock speedup, while matching the language modeling performance of the baseline Transformer. Our novel MoE mechanism allows SwitchHead to compute up to 8 times fewer attention matrices than the standard Transformer. SwitchHead can also be combined with MoE feed-forward layers, resulting in fully-MoE "SwitchAll" Transformers. For our 262M parameter model trained on C4, SwitchHead matches the perplexity of standard models with only 44% compute and 27% memory usage. Zero-shot experiments on downstream tasks confirm the performance of SwitchHead, e.g., achieving more than 3.5% absolute improvements on BliMP compared to the baseline with an equal compute resource.1

Footnote 1: Our code is public: https://github.com/robertcsordas/switchhead

## 1 Introduction

Large language models (LLMs) have shown remarkable capabilities [1; 2; 3; 4] and great versatility [5]. However, training large Transformers [6; 7] requires a considerable amount of computing power and memory, which is not accessible to most researchers, academic institutions, and even companies.

Figure 1: A schematic representation of SwitchHead. It consists of a few independent heads, each with multiple experts for value and output projections. Each head has a single attention matrix.

Even running them in inference mode--typically much less resource-intensive--requires significant engineering effort [8]. Accelerating Transformers remains an important research question.

In this context, Mixture of Experts (MoE) layers [9; 10; 11] have become popular to efficiently scale up Transformers to a large number of parameters [12; 13; 14; 15; 16; 17]. However, most of these works mainly focus on applying MoE to the 2-layer _feedforward blocks_[6], i.e., the multi-layer perceptron (MLP) components of the Transformer, while keeping the self-attention layers unchanged. Given that attention also accounts for a considerable amount of compute and memory usage in Transformers (especially for long context sizes), using _MoE for attention_ has potential to further improve resource efficiency in Transformers. While MoE-based attention remains underexplored in general, there are existing works on MoE approaches for attention [18; 19]. However, in practice, previously proposed methods typically require a lot of engineering tricks for successful training, _and_ most importantly, only achieve a modest reduction in computing and memory requirements in the end (as we also confirm in our experiments).

Here, we present a novel MoE-based attention method, SwitchHead, whose mechanism allows to reduce the number of attention matrices that need to be computed and stored. Following \(\sigma\)-MoE [17], our method uses a non-competitive selection activation function (sigmoid), and does not require regularization or extra tricks for stable training. Importantly, we show that it is possible to compute the MoE projections _outside_ of the attention core, which enables a significant reduction in the number of computed attention maps, resulting in significant resource savings. Our thorough investigation shows that it is enough to choose the value and output projections from a pool of experts and share keys and queries between them.

We evaluate our method on C4 [20], Enwik8 [21], peS2o [22] and Wikitext 103 [23], with two model sizes (47M and 262M). Additionally, we measure the zero-shot performance of our main models on Lambda [24], BLiMP [25], and Children's Books Test [26] datasets. Our experiments demonstrate that SwitchHead can achieve performance comparable to parameter-matched baselines with just a fraction of the compute and memory budget. In addition, we introduce "SwitchAll", a fully MoE-based Transformer model, that combines a \(\sigma\)-MoE-based MLP layer with our SwitchHead attention, often outperforming dense baselines with the same parameter budgets.

Finally, we analyze the attention maps of our SwitchHead. We find that the attention maps taken over all heads are qualitatively similar to the dense baselines, indicating a significant reduction in redundancy without a loss of expressivity. In addition, expert selections are often interpretable.

## 2 Method

### Background

The standard multi-head self-attention (MHA) layer [6] consists of four major steps: (1) compute key, query, and value projections, (2) compute the attention matrix, (3) use the attention matrix to project the values, and (4) map the projected values to the output. Let \(h\), \(T\), \(n_{\text{heads}}\), \(d_{\text{model}}\), \(d_{\text{head}}\) denote positive integers. Let \(\bm{x}\in\mathbb{R}^{T\times d_{\text{model}}}\) denote an input to the MHA layer with \(n_{\text{heads}}\) heads, \(T\) be the sequence length, and \(d_{\text{model}}\) denote the size of the hidden representations of the model. \(\bm{W}_{\{K,V,Q\}}^{h}\in\mathbb{R}^{d_{\text{model}}\times d_{\text{head}}}\) are the projection matrices for head \(h\in\{1,...,n_{\text{heads}}\}\). Then \(\bm{K}^{h}=\bm{x}\bm{W}_{K}^{h}\), \(\bm{Q}^{h}=\bm{x}\bm{W}_{Q}^{h}\), and \(\bm{V}^{h}=\bm{x}\bm{W}_{V}^{h}\) (thus \(\bm{K}^{h},\bm{Q}^{h},\bm{V}^{h}\in\mathbb{R}^{T\times d_{\text{model}}}\)) are the keys, queries, and values, respectively. The attention matrix for the head \(h\), \(\bm{A}^{h}\in\mathbb{R}^{T\times T}\), and the output \(\bm{y}\in\mathbb{R}^{T\times d_{\text{model}}}\) are calculated as follows:

\[\bm{A}^{h} =\operatorname{softmax}\left(\frac{1}{\sqrt{d_{\text{head}}}}\bm{ Q}^{h}\bm{K}^{h\intercal}\right)\] (1) \[\bm{y} =(\bm{A}^{1}\bm{V}^{1}|\bm{A}^{2}\bm{V}^{2}|...|\bm{A}^{n_{\text{ node}}}\bm{V}^{n_{\text{head}}})\bm{W}_{O}\] (2)

where \(|\) denotes concatenation in the last dimension, the \(\operatorname{softmax}(\cdot)\) is also over the last dimension, and \(\bm{W}_{O}\in\mathbb{R}^{n_{\text{head}}d_{\text{model}}\times d_{\text{model}}}\). However, an alternative formulation reflects the role of \(\bm{W}_{O}\) better. Let us divide \(\bm{W}_{O}\) along the first dimension into submatrices for each head, \(\bm{W}_{O}^{h}\in\mathbb{R}^{d_{\text{best}}\times d_{\text{model}}}\), such that \(\bm{W}_{O}=\left(\bm{W}_{O}^{1\intercal}|\bm{W}_{O}^{2\intercal}|...|\bm{W}_{ O}^{n_{\text{heads}}\intercal}\right)^{\intercal}\). In this case, the output (Eq. 2) can be equivalently written as:

\[\bm{y}=\sum_{h}\bm{A}^{h}\bm{V}^{h}\bm{W}_{O}^{h}\] (3)From this, it can be seen that all computations are local to each head. Computing the attention matrix \(\bm{A}^{h}\) and the readout \(\bm{A}^{h}\bm{V}^{h}\) requires compute in order of \(O(n_{\text{heads}}d_{\text{head}}T^{2})\) MACs (multiplication-accumulation operation2). During training, it requires the storage of \(O(n_{\text{heads}}T^{2})\) for the attention matrices and \(O(n_{\text{heads}}Td_{\text{head}})\) for storing the sub-results of the projections. Given a sufficiently long sequence, computing the attention matrix and projecting the values will dominate the compute requirements due to the quadratic dependence on the sequence length \(T\).

Footnote 2: The number of MACs is a metric used in prior work [18], which is independent of both the specific hardware and implementation, unlike wall-clock time. For wall-clock-time measurements, see Sec. 3.7.

### From Dense to SwitchHead Attention Layer

Our goal is to obtain resource reductions while maintaining the fundamental properties of attention and retaining a fully expressive attention matrix. For that, we start from the following observation: modern LLMs use tens of heads [2; 27]. Are so many of them all necessary? As we show later in Sec. 3, indeed, naively reducing the number of heads (while keeping the same number of parameters by increasing the head dimension) results in performance loss. Explaining the reason for the need for many heads is beyond the scope of this paper. Nevertheless, here are some hypotheses: (1) they provide multiple inputs for the operations that the network performs in each step, (2) they are specialized and provide inputs only for specific operations (in this case, each operation would use a different subset of heads), (3) they may provide diverse outputs due to different initializations, some being more successful than others, thus enabling better learning. Among these, (2) and (3) may offer an opportunity for resource savings: if not all heads are needed at the same time, it might be possible to _switch_ among them depending on the context.

One naive method to achieve this is to use a gating signal using a linear projection \(\bm{W}_{S}\in\mathbb{R}^{d_{\text{model}}\times n_{\text{heads}}}\), and use the heads with the highest score, by replacing Eq. 3 with Eq. 6:

\[\bm{s} =\sigma\left(\bm{x}\bm{W}_{S}\right)\] (4) \[\mathcal{E} =\arg\operatorname{topk}(\bm{s},k),\mathcal{E}\subset\{1,...,n_{ \text{heads}}\}\] (5) \[\bm{y}[t,c] =\sum_{h\in\mathcal{E}}\bm{s}[t,h](\bm{A}^{h}\bm{V}^{h}\bm{W}_{O }^{h})[t,c]\] (6)

where \(\bm{y}[t,c]\in\mathbb{R}\) denotes indexing the specific element of the output matrix \(\bm{y}\in\mathbb{R}^{T\times d_{\text{model}}}\), for timestep \(t\) and channel \(c\), and \(k\) is the number of active experts. Following the \(\sigma\)-MoE method [17], we use a non-competitive selection function (sigmoid \(\sigma\) in Eq. 4). Now, let us define the _source_ side of attention as the keys and values and the _destination_ side as the queries and output. Intuitively, the above method corresponds to choosing a subset of attention heads based on the _destination_ side alone3. Our preliminary experiments confirmed that this method is indeed feasible for language modeling on WikiText-103. However, it is difficult to achieve acceleration and memory savings with this method. To see why, notice that the entries of the attention matrix \(\bm{A}^{h}\) depend on _pairs_ of tokens, one for the source and one for the destination side, but the choice is made _only_ based on the destination side. Thus, in the worst case, for each destination, a different source might be chosen, in which case all possible source projections have to be computed for the keys and values, which we would like to avoid.

Footnote 3: To clarify, we allocate a routing function for each of key/value/query projections; these routing functions belong to the _source_ or _destination_ side accordingly. If we compare Eq. 10 and Eq. 6, one can notice that the routing function in Eq. 6 effectively corresponds to what we define as the _destination_-side routing in Eq. 10.

Alternatively, we propose to improve the method above by introducing conditional computations for the source and destination projections independently of each other. That is, we parameterize each of key, query, value, output projection by an independent MoE. This avoids conditional computations that involve the attention matrix itself. Our solution implements this using Mixtures of Experts (MoEs). The concepts of "heads" are no longer well defined in the conventional sense: we redefine a head as an instance of a computed attention matrix. We call the total number of them \(n_{\text{heads}}\). For each head \(h\), we define a separate list of \(E\) experts. The total number of _experts_ is then \(n_{\text{heads}}\cdot E\). Then, the projection matrices become \(\bm{W}_{K}^{h,e}\), \(\bm{W}_{Q}^{h,e}\), \(\bm{W}_{V}^{h,e}\) and \(\bm{W}_{O}^{h,e}\in\mathbb{R}^{d_{\text{head}}\times d_{\text{model}}}\), where \(h\) denotes the head index and \(e\) the specific expert. Then we compute the source-side expert selection as follows:

\[\bm{s}_{S}^{h} =\sigma(\bm{x}\bm{W}_{S}^{h})\] (7) \[\mathcal{E}_{S}^{h} =\arg\operatorname{topk}(\bm{s}_{S}^{h},k),\mathcal{E}_{S}^{h} \subset\{1,...,E\}\] (8)where \(\bm{W}^{h}_{S}\in\mathbb{R}^{d_{\text{\tiny{mask}}}\times E}\). We compute the destination-side experts similarly: \(\bm{s}^{h}_{D}=\sigma(\bm{x}\bm{W}^{h}_{D})\), \(\mathcal{E}^{h}_{D}=\arg\operatorname{topk}(\bm{s}^{h}_{D},k),\mathcal{E}^{h} _{S}\subset\{1,...,E\},\bm{W}^{h}_{D}\in\mathbb{R}^{d_{\text{\tiny{mask}}} \times E}\). Then, the value projection \(\bm{V}^{h}\) is computed as a weighted sum of the selected experts:

\[\bm{V}^{h}=\sum_{e\in\mathcal{E}^{h}_{S}}\bm{s}^{h}_{S}[e]\bm{x}\bm{W}^{h,e}_{ V}\] (9)

The key and query projections are computed similarly: \(\bm{K}^{h}=\sum_{e\in\mathcal{E}^{h}_{S}}\bm{s}^{h}_{S}[e]\bm{x}\bm{W}^{h,e}_{ K}\), and \(\bm{Q}^{h}=\sum_{e\in\mathcal{E}^{h}_{D}}\bm{s}^{h}_{D}[e]\bm{x}\bm{W}^{h,e}_{ Q}\). The output projection also becomes an MoE:

\[\bm{y}=\sum_{h=0}^{n_{\text{\tiny{mask}}}-1}\sum_{e\in\mathcal{E}^{h}_{D}} \bm{s}^{h}_{D}[e]\bm{A}^{h}\bm{V}^{h}\bm{W}^{h,e}_{O}\] (10)

As we'll show, it is not necessary to make all projections MoEs. In Section 3.1 we show that keeping a single, head-specific copy of the query and key projections and reusing them for all experts is beneficial. We call this method SwitchHead.

Essentially, SwitchHead reduces the number of attention matrices that have to be computed (\(n_{\text{beads}}\)) significantly, by using multiple experts per head. Note that our method does not depend on the specific implementation of the attention, allowing for easy experimentation and research. A schematic representation is shown in Figure 1.

## 3 Experiments

We conduct our experiments in a _parameter-matched_ setting [17] which better reflects the task of language modeling (than the FLOPS-matched setting often used to evaluate MoEs). Our main experiments use Transformer XL, because we found them to consistently and significantly outperform RoPE-based baselines [28] for a fixed amount of compute. We provide the details of this analysis in Appendix A.4. The conclusions on the effectiveness of SwitchHead are consistent in both cases.

As an important specification, under this parameter-matched setting, we always configure Switchhead such that it _matches the perplexity_ of the baseline dense Transformer, and we _maximize its resource reductions_. For this, we follow a systematic procedure. First, we set \(n_{\text{\tiny{heads}}}*E\) to be the same as \(n_{\text{\tiny{heads}}}\) of the dense baseline. We start with setting \(n_{\text{\tiny{heads}}}=2\) and \(k=2\), which provide the most resource reductions. If the resulting model underperforms, we increase \(k\). If \(k=4\) underperforms as well, we set \(n_{\text{\tiny{heads}}}=4\) and \(k=2\). We always set \(d_{\text{\tiny{head}}}\) so that the total number of parameters of the resulting model matches the number of parameters of the baseline. This reasonably simple procedure ensures a good amount of resource savings, while avoiding doing an expensive hyperparameter search.

\begin{table}
\begin{tabular}{r l r r r r} \hline \hline \#total params & Model & \(n_{\text{\tiny{heads}}}\) & Perplexity \(\downarrow\) & MACs & Mem (floats) \\ \hline
47M & SwitchHead & 2 & 12.27 & 170.4M & 0.8M \\  & Transformer & 10 & 12.31 & 453.4M & 3.5M \\  & MoA & 4 & 12.60 & 223.5M & 1.3M \\  & MoA & 6 & 12.64 & 306.8M & 1.9M \\  & MoA & 8 & 12.77 & 390.2M & 2.6M \\  & MoA & 2 & 12.84 & 140.1M & 0.7M \\ \hline
262M & MoA & 8 & 9.50 & 2.9G & 9.9M \\  & SwitchHead & 2 & 9.55 & 2.0G & 2.9M \\  & Transformer & 16 & 9.66 & 5.4G & 21.0M \\  & MoA & 12 & 9.68 & 4.1G & 14.7M \\  & MoA & 4 & 9.69 & 1.7G & 5.1M \\  & MoA & 2 & 9.87 & 1.1G & 2.7M \\ \hline \hline \end{tabular}
\end{table}
Table 1: Performance of SwitchHead compared to different MoA variants. MoA can outperform the baseline, but only at a price of using significantly more compute and memory. Also, SwitchHead outperforms the baseline dense Transformer. These results are on Wikitext 103. Table sorted by model perplexity.

Note that all the perplexity gains seen in the main result tables are the byproduct of imperfect matching, and our goal is to achieve _reductions in resource requirements_, unless noted otherwise (See Sec. 3.5). Detailed hyperparameters of all our models can be found in Sec. A.5 in the Appendix. We use and adopt the Triton kernel of \(\sigma\)-MoE [17] for our purposes.

For all datasets except the character-level Enwik8 [21], we use sub-word units [29; 30] obtained with a SentencePiece tokenizer [31] with a vocabulary size of 8k tokens. For most of our experiments, we use Transformer XL [32] with the context size being twice the size of the active/current chunk, because we found it to be significantly more resource-efficient than the standard setup. However, in order to show that our method is also competitive in the standard Transformer with RoPE positional ecodings, we also demonstrate our main findings in this setup (Appendix A.4).

All models are trained for 100k batches. Some of the datasets we consider (C4 [20], and peS2o [22]) are much larger. In this case, we train on the first \(10^{5}*T*N_{\text{batch}}\) tokens of the dataset.

### Which Projections Require an MoE?

As discussed in Sec. 2.2, each linear projection (keys, values, queries, and output) can potentially be replaced independently by an MoE. Here we first check which projection benefits from such a replacement. As we target the parameter-matched setting, using MoE where it is not necessary can have a negative effect. Since experts use a significant part of the parameter budget, they can reduce the number of parameters available for the more useful parts of the model. Thus, we did a search over all possible combinations of MoE versus fixed projections with two active heads and compared them to the parameter-matched baseline. We find that the output projection is necessary to match the performance of the baseline (for detailed results refer to Tab. 6 in the appendix). Having MoE in the key and query projections turn out to be _un_necessary. Models without the output and value MoE underperform the dense baseline with \(n_{\text{heads}}=2\) heads.

In sum, the best-performing model is the one using MoE for value and output projections. We use this model variant in the rest of experiments in this paper.

### Comparison with MoA

The method most related to ours is the so-called Mixture of Attention Heads, or MoA [18]. Unlike SwitchHead, MoA uses a _single_ key and value projection and chooses \(n_{\text{heads}}\) active query and output projections from a pool of \(E\) experts.

MoA computes the attention map for each selected expert and computes their weighted average after the attention computation takes place. In contrast, SwitchHead calculates the weighted average of the \(K\) selected experts _before_ and _after_ attention computation. Because of this, in practice, the same perplexity is achieved with the required number of computed attention matrices (\(n_{\text{heads}}\)) which is much lower for SwitchHead compared to MoA, allowing significant resource savings.

Also, unlike MoA, SwitchHead uses a non-competitive activation function (sigmoid) [17]. We confirm that with this, our method performs well without any regularization, while MoA requires three different regularizers.

We compare our method with MoA in Table 1. It can be seen that while MoA can slightly outperform our method in terms of perplexity, it can only do so at the price of significantly more resource usage. Given a similar computation and memory budget, our method consistently outperforms MoA.

### Performance on Different Datasets

We test our methods on a diverse set of language modeling datasets, including C4 [20], Enwik8 [21], peS2o [22], at two different scales: a 47M and a 262M parameters. We chose this experimental setting taking into account our compute-budget and confidence in our results which are consistent in across various configurations.

The results are shown in Table 2. We compare our models to two baselines: one with the same number of heads as the total number of experts (\(n_{\text{heads}}\cdot E\)) of the SwitchHead models, and the other has the same number of heads as the number of active attention matrices (\(n_{\text{heads}}\)) as our models. Ourmodels closely match the performance of the full, many-head baseline with the fraction of memory and compute requirements (see Sec. 3.7 for more details).

In addition, we verify the performance of our models trained on the C4 dataset downstream tasks in a zero-shot manner. We consider Lambada [24], BLiMP [25] and Children's Book Test (CBT) [26]. The results are shown in Table 4: our SwitchHead models consistently outperform or match the performance of the baseline dense Transformer models.

### SwitchAll

The goal of achieving more resource-efficient Transformers includes reducing the resource requirements of both the MLP and the attention layers. \(\sigma\)-MoE [17] was recently proposed as a parameter-efficient MoE method for accelerating the MLP layers. However, it remains unclear whether it can be efficiently combined with our SwitchHead, or can have some negative interaction effect if combined in a "SwitchAll", where every layer is MoE-based.

To verify this, we take the baseline architecture of Csordas et al. [17] without any hyperparameter change and replace the attention layer with SwitchHead. The hyperparameters for the attention are directly taken from the experiments shown in Tab. 2. The results are shown in Tab. 3. The combined, fully-MoE model often outperforms the dense baselines for each dataset and model size considered, except in the case of the 262M parameter model on the C4 dataset.

### MAC-Matched Setup

All our experiments so far were calibrated so that the predictive performance (perplexity) matches to the performance of the baseline Transformer, and we were aiming for maximum resource savings. However, it is also a valid question to ask what is the performance of SwitchHead in a MAC-matched setup, where the compute requirements of our model are matched to those of the baseline. We achieve this by increasing \(d_{\text{head}}\) and \(n_{\text{heads}}\) until we have the same MAC requirements as the baseline. This results in a model with more parameters. For the small Transformer XL, we increase \(d_{\text{head}}\) from \(76\) to

\begin{table}
\begin{tabular}{l r l r r r r} \hline \hline Dataset & \#total params & Model & \(n_{\text{heads}}\) & ppl/bpc \(\downarrow\) & MACs & Mem (floats) \\ \hline C4 & 47M & SwitchHead & 2 & 22.53 & 203M & 0.8M \\  & & Transformer & 10 & 22.71 & 453M & 3.5M \\  & & Transformer & 2 & 23.71 & 453M & 1.4M \\ \cline{2-6}  & 262M & SwitchHead & 4 & 16.23 & 2.4G & 5.6M \\  & & Transformer & 16 & 16.28 & 5.4G & 21M \\  & & Transformer & 4 & 17.09 & 5.4G & 8.4M \\ \hline Wikitext 103 & 47M & SwitchHead & 2 & 12.31 & 170M & 0.8M \\  & & Transformer & 10 & 12.32 & 453M & 3.5M \\  & & Transformer & 2 & 12.73 & 453M & 1.4M \\ \cline{2-6}  & 262M & SwitchHead & 2 & 9.77 & 2.0G & 2.9M \\  & & Transformer & 16 & 9.80 & 5.4G & 21M \\  & & Transformer & 2 & 10.09 & 5.4G & 6.3M \\ \hline peS2o & 47M & Transformer & 10 & 12.83 & 453M & 3.5M \\  & & SwitchHead & 2 & 12.84 & 203M & 0.8M \\  & & Transformer & 2 & 13.37 & 453M & 1.4M \\ \cline{2-6}  & 262M & Transformer & 16 & 9.78 & 5.4G & 21M \\  & & SwitchHead & 4 & 9.86 & 2.4G & 5.6M \\  & & Transformer & 4 & 10.11 & 5.4G & 8.4M \\ \hline Enwik8 & 41M & Transformer & 8 & 1.10 & 1.6G & 10M \\  & & SwitchHead & 2 & 1.10 & 709M & 2.8M \\  & & Transformer & 2 & 1.13 & 1.6G & 4.2M \\ \hline \hline \end{tabular}
\end{table}
Table 2: Performance of SwitchHead compared to baselines on different datasets and model sizes. It can be seen that the predictive performance of our SwitchHead model is comparable to the baselines, and is always better than the baseline with an equal number of heads. Perplexity is shown for Wikitext 103, C4 and peS2o datasets, and bits/character (bpc) for Enwik8. Models sorted by perplexity.

\(112\) and \(n_{\text{heads}}\) from 2 to 3. For large XL, we increase \(n_{\text{heads}}\) from 4 to 6 and \(d_{\text{head}}\) from 112 to 168. For the small RoPE model, we change \(n_{\text{heads}}\) from 2 to 3 and \(d_{\text{model}}\) from 64 to 84, for big \(n_{\text{heads}}\) from 4 to 6 and \(d_{\text{model}}\) from 112 to 168. We show the results in Tab. 4: MAC-matched models outperform the others by a large margin both in perplexity and in zero-shot task performance.

### Shared Selection

For further time savings, we can share the expert selection between the source and destination side. Acceleration is achieved by reducing the number of sorting and top-k steps compared to the full SwitchHead. However, this results in a minor performance loss, which might be tolerated in some cases where the acceleration is more important. See Tab. 4 for more details.

### Wall-Clock Time and Memory Usage Estimation

In all of our tables, we report the number of multiply-accumulate (MAC) operations following Zhang et al. [18]. The reason for this is that the actual wall-clock time is highly implementation and hardware-dependent. Nevertheless, we measured the runtime and total memory usage of our entire training pipeline (including the feedforward layer) to demonstrate that our current (suboptimal) implementation is already capable of providing wall-clock time acceleration. We show the results in Tab. 5. The measurements are taken on identical hardware with the same implementation (including for the attention core), the only difference being the MoE-based projections for the attention. It can be seen that for both scales, SwitchHead trains around 1.5 times faster, while using 61%-67% as much memory as the baseline.

We also report the performance of MoA for reference in Table 5. For measuring the resource usage of MoA, we chose the fastest MoA model that can match the performance of the dense baseline, or simply the best MoA model when no MoA model can match the baseline performance. This resulted in choosing MoA with \(H=4\) for the 47M model and MoA with \(H=8\) for the 262M parameter model. SwitchHead outperforms MoA on both scales, both in wall clock time and memory requirements. Note that these measurements also include the MLP layers, the optimizer, and the gradient synchronization in the case of multi-GPU training.

## 4 Analysis

In order to see how the network uses the attention heads, we trained a small, 6-layer, 8-head Transformer on ListOps [33; 34]. The reason for this choice is that small, algorithmic tasks tend to be more interpretable compared to language modeling tasks. We also train a parameter-matched, 2-head

\begin{table}
\begin{tabular}{l r l r r r r} \hline \hline Dataset & \#total params & Model & \(n_{\text{heads}}\) & ppl \(\downarrow\) & MACs & Mem (floats) \\ \hline Wikitext 103 & 47M & SwitchAll & 2 & 12.17 & 170M & 0.8M \\  & & Transformer & 10 & 12.32 & 453M & 3.5M \\ \cline{2-6}  & 262M & Transformer & 16 & 9.80 & 5.4G & 21M \\  & & SwitchAll & 4 & 9.81 & 2.4G & 5.6M \\ \hline C4 & 47M & SwitchAll & 2 & 22.09 & 202M & 0.8M \\  & & Transformer & 10 & 22.63 & 453M & 3.5M \\ \cline{2-6}  & 262M & SwitchAll & 4 & 16.45 & 2.4G & 5.6M \\  & & Transformer & 16 & 16.58 & 5.4G & 21M \\ \hline peS2o & 47M & SwitchAll & 2 & 12.56 & 202M & 0.8M \\  & & Transformer & 10 & 12.83 & 453M & 3.5M \\ \cline{2-6}  & 262M & Transformer & 16 & 9.78 & 5.4G & 21M \\  & & SwitchAll & 4 & 9.86 & 2.4G & 5.6M \\ \hline \hline \end{tabular}
\end{table}
Table 3: Performance of SwitchAll (SwitchHead + \(\sigma\)-MoE [17]) on different datasets and model sizes. Our SwitchAll model is close or better compared to the baselines. Models sorted by perplexity. Note: We show the parameter count of the dense model. The parameter count for the big SwitchAll model is 259M because of the imperfect parameter matching.

SwitchHead model. Both models achieve around 95% accuracy on a held-out IID validation set, in contrast to the dense 2-head model, which saturates around 80%. Note that ListOps is a classification task and does not use autoregressive masking.

We visualize the maximum of attention heads for each layer, both for the standard Transformer (Fig. 1(a)) and SwitchHead (Fig. 1(b)). The attention maps are qualitatively similar. Due to different initialization and learning dynamics, thus the overlap between the two models would not be perfect. Complete attention map visualizations can be found in Fig. 4 and 3 in the appendix.

In addition, we anlyze individual attention heads for SwitchHead. We find that it is often possible to interpret the selection weights: on synthetic tasks, the output experts specialize according to different _operations_, while the input ones distinguish numbers and closed parentheses. The attention map itself appears to distribute information about contiguous chunks of numbers (see Fig. 5 in the appendix).

Attention maps of the language models are more difficult to interpret. However, we visualize the attention maps of the 47M parameter Transformer XL and the SwitchHead model from Tab. 2. We find them to be qualitatively similar. We also identified induction heads [35] in both models, some examples shown for SwitchHead in Fig. 5(a) and for Transformer in Fig. 5(b) in the appendix. Other typical vertical line-lined attention patterns are shown in Fig. 5(c) and 5(d).

## 5 Related Work

The method most closely related to ours is MoA [18], which introduces a MoE style attention. It defines each attention head as an expert but shares the key and value projections between them. Unlike in our Switchhead, each of the selected experts requires a separate attention matrix, which significantly increases its memory usage. Due to the use of a competitive softmax-based activation function in the selection network, it requires complex regularization to prevent expert collapse [17]. In the original formulation, the number of active heads is high. Our experiments also confirm that MoA needs many attention heads to match the performance of the dense baseline (see Sec. 3.2), and it is only possible to do so with a significantly higher resource budget than our method.

Nguyen et al. [36] analyze the attention matrices, and they conclude that they are usually low rank. Motivated by this, the authors construct a few (e.g., 2) "global attention matrices", and they compute each local matrix for specific heads by a weighted average of those. However, they average the logits,

\begin{table}
\begin{tabular}{l r r r r r} \hline \hline Model & \#total params & ppl \(\downarrow\) & Lambada \(\uparrow\) & BLiMP \(\uparrow\) & CBT \(\uparrow\) \\ \hline SwitchHead & 47M & \(22.53\) & \(20.4\%\) & \(75.7\%\) & - \\ Transformer & 47M & \(22.71\) & \(20.4\%\) & \(73.6\%\) & - \\ SwitchHead MAC-matched & 63M & \(21.18\) & \(23.5\%\) & \(77.1\%\) & - \\ SwitchHead Shared selection & 47M & \(22.81\) & \(20.0\%\) & \(74.6\%\) & - \\ \hline SwitchHead & 262M & \(16.23\) & \(29.4\%\) & \(79.6\%\) & \(83.3\%\) \\ Transformer & 262M & \(16.28\) & \(28.2\%\) & \(76.1\%\) & \(83.6\%\) \\ SwitchHead MAC-matched & 376M & \(15.43\) & \(30.2\%\) & \(79.4\%\) & \(84.2\%\) \\ SwitchHead Shared selection & 262M & \(16.49\) & \(28.6\%\) & \(79.4\%\) & \(82.7\%\) \\ \hline \hline \end{tabular}
\end{table}
Table 4: Performance of SwitchHead trained on C4 dataset, compared to dense Transformer baseline with matched number of parameters.

\begin{table}
\begin{tabular}{c l l r r r r r} \hline \hline Size & Model & ms/iteration & Rel. iter. time & RAM/GPU & Rel. Mem. & \#GPUs & GPU type \\ \hline \multirow{3}{*}{47M} & Transformer & 473ms/iter & 1.0 & 20.5G & 1.0 & \multirow{3}{*}{1} & \multirow{3}{*}{RTX 3090} \\  & SwitchHead & 342ms/iter & **0.72** & 13.5G & **0.65** & & \\  & MoA & 412ms/iter & 0.87 & 15.3G & 0.75 & & \\ \hline \multirow{3}{*}{262M} & Transformer & 670ms/iter & 1.0 & 20.5G & 1.0 & \multirow{3}{*}{8} & \multirow{3}{*}{V100} \\  & SwitchHead & 442ms/iter & **0.65** & 12.5G & **0.61** & & \\ \cline{1-1}  & MoA & 851ms/iter & 1.27 & 16.4G & 0.80 & & \\ \hline \hline \end{tabular}
\end{table}
Table 5: Real-world resource usage of our method. The numbers shown below are for training time for the whole pipeline, including the feedforward layers. It can be seen that SwitchHead in the current implementation reduces both the runtime and the memory usage by a factor of 1.4-1.5.

not the final matrix, so each individual head-specific matrix has to be computed. This means that in the best case, they can only save half of the computation associated with the attention matrix because the readout (Eq. 3) is still needed. For the same reason, memory savings are also low.

Peng et al. [19] propose to reweight the contribution of each head by a gating function. However, they only reduce the number of total attention heads by one, presumably to compensate for the parameters used by the selection logic. Their goal was not to reduce resource usage but to have better predictive performance, which they achieve. They use a softmax-based competitive selection mechanism. To avoid collapse, the gating function is trained only in some steps.

More broadly, there have been several works on MoE to accelerate language models. Shazeer et al. [11] introduce sparsely-gated mixture of experts. Fedus et al. [37] introduce Mixture of Experts in Transformers. Lepikhin et al. [13] train a MoE-based LLM, and Clark et al. [15] analyze the scaling laws of MoE models. Lewis et al. [12] introduce an alternative method for preventing collapse. However, none of these methods focus on the important, _parameter-matched_ setting. Csordas et al. [17] introduce the non-competitive activation based MoE method, \(\sigma\)-MoE, which was shown to be successful in such a setting, but the authors only focused on accelerating the MLPs and not the attention.

Multi-Query attention [38] uses a single key and value projection that is shared between the heads while using multiple queries. Our findings show that such a configuration is suboptimal: using multiple output and value projections is the most important choice in our model design.

Dao et al. [39] provides a hardware-aware CUDA implementation of the entire attention layer, which avoids storing the attention matrix. By saving memory bandwidth in this way, they achieve a significant wall clock time speedup, despite that the attention matrix should be recomputed in the backward pass. This is orthogonal to our method and they can be combined for further acceleration.

## 6 Limitations

Our models are modest in size compared to the current state-of-art LLMs. However, training such models is estimated to cost millions of dollars, which we cannot afford. Instead, we aim to show the versatility of our model by choosing a diverse set of datasets, including Enwik 8, Wikitext 103, C4 and peS2o, and different positional encodings, such as Transformer-XL-style relative positional encoding and RoPE. We also demonstrate the competitiveness of our models in zero-shot downstream tasks. We believe that the evidence we provided is enough for a research group with a larger amount of resources at their disposal to verify our findings in a state-of-the-art model.

Figure 2: An attention map of the (a) standard Transformer and (b) SwitchHead. The maximum of all heads in the given layer are shown.

The Triton kernel that we used is currently around 60% of the speed of a single dense matrix multiplication of the size of a single expert with cuBLAS. Even this, we showed wall-clock time speedup. We estimate that 80-90% should be achievable with a more optimal kernel. Model-parallel training requires the implementation of a load-balancing system that can dynamically move experts between GPUs.

## 7 Conclusion

On a wide range of language modeling datasets with different model sizes, our novel Mixture-of-Experts (MoE) based attention method called SwitchHead achieves performance of parameter-matched dense counterparts, with only a fraction of the computational cost and memory usage. SwitchHead drastically reduces the number of attention matrices that have to be computed, by using MoE for the value and output projections. Our method is stable and does not need additional regularization to prevent degenerate solutions (a well-known practical issue in many existing MoE models). Our method can also be successfully combined with MoE MLP layers, to obtain "SwitchAll" where every layer of the Transformer is MoE-based, achieving a huge reduction in resource requirements.

## Acknowledgements

This research was partially funded by ERC Advanced grant no: 742870, project AlgoRNN, and by Swiss National Science Foundation grant no: 200021_192356, project NEUSYM. We are thankful for hardware donations from NVIDIA and IBM. The resources used for this work were partially provided by Swiss National Supercomputing Centre (CSCS) projects d123 and s1205.

## References

* [1] Alec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language models are unsupervised multitask learners. 2019.
* [2] Tom B Brown et al. Language models are few-shot learners. In _Proc. Advances in Neural Information Processing Systems (NeurIPS)_, Virtual only, December 2020.
* [3] OpenAI. Chatgpt. https://openai.com/blog/chatgpt, 2022.
* [4] OpenAI. GPT-4 technical report. _Preprint arXiv:2303.08774_, 2023.
* [5] Sebastien Bubeck, Varun Chandrasekaran, Ronen Eldan, Johannes Gehrke, Eric Horvitz, Ece Kamar, Peter Lee, Yin Tat Lee, Yuanzhi Li, Scott M. Lundberg, Harsha Nori, Hamid Palangi, Marco Tulio Ribeiro, and Yi Zhang. Sparks of artificial general intelligence: Early experiments with GPT-4. _Preprint arXiv:2303.12712_, 2023.
* [6] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. In _Proc. Advances in Neural Information Processing Systems (NIPS)_, pages 5998-6008, Long Beach, CA, USA, December 2017.
* [7] Jurgen Schmidhuber. Learning to control fast-weight memories: An alternative to recurrent nets. _Neural Computation_, 4(1):131-139, 1992.
* [8] Georgi Gerganov. llama.cpp. https://github.com/ggerganov/lllama.cpp, 2023.
* [9] John B. Hampshire II and Alexander H. Waibel. The meta-pi network: connectionist rapid adaptation for high-performance multi-speaker phoneme recognition. In _Proc. IEEE Int. Conf. on Acoustics, Speech and Signal Processing (ICASSP)_, pages 165-168, Albuquerque, New Mexico, USA, April 1990.
* [10] Robert A. Jacobs, Michael I. Jordan, Steven J. Nowlan, and Geoffrey E. Hinton. Adaptive mixtures of local experts. _Neural Computuation_, 3(1):79-87, 1991.
* [11] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton, and Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts layer. In _Int. Conf. on Learning Representations (ICLR)_, Toulon, France, April 2017.
* [12] Mike Lewis, Shruti Bhosale, Tim Dettmers, Naman Goyal, and Luke Zettlemoyer. BASE layers: Simplifying training of large, sparse models. In _Proc. Int. Conf. on Machine Learning (ICML)_, volume 139, pages 6265-6274, Virtual only, July 2021.

* [13] Dmitry Lepikhin, HyoukJoong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping Huang, Maxim Krikun, Noam Shazeer, and Zhifeng Chen. GShard: Scaling giant models with conditional computation and automatic sharding. In _Int. Conf. on Learning Representations (ICLR)_, Virtual only, May 2021.
* [14] William Fedus, Barret Zoph, and Noam Shazeer. Switch transformers: Scaling to trillion parameter models with simple and efficient sparsity. _Journal of Machine Learning Research (JMLR)_, 23(1):5232-5270, 2022.
* [15] Aidan Clark, Diego de Las Casas, Aurelia Guy, Arthur Mensch, Michela Paganini, Jordan Hoffmann, Bogdan Damoc, Blake A. Hechtman, Trevor Cai, Sebastian Borgeaud, George van den Driessche, Eliza Rutherford, Tom Hennigan, Matthew Johnson, Katie Millican, Albin Cassirer, Chris Jones, Elena Buchatskaya, David Budden, Laurent Sifre, Simon Osindero, Oriol Vinyals, Jack W. Rae, Erich Elsen, Koray Kavukcuoglu, and Karen Simonyan. Unified scaling laws for routed language models. _Preprint arXiv:2202.01169_, 2022.
* [16] Zewen Chi, Li Dong, Shaohan Huang, Damai Dai, Shuming Ma, Barun Patra, Saksham Singhal, Payal Bajaj, Xia Song, Xian-Ling Mao, Heyan Huang, and Furu Wei. On the representation collapse of sparse mixture of experts. In _Proc. Advances in Neural Information Processing Systems (NeurIPS)_, New Orleans, Louisiana, USA, December 2022.
* [17] Robert Csordas, Kazuki Irie, and Jurgen Schmidhuber. Approximating two-layer feedforward networks for efficient transformers. In _Findings of the Association for Computational Linguistics: EMNLP 2023_, November 2023.
* [18] Xiaofeng Zhang, Yikang Shen, Zeyu Huang, Jie Zhou, Wenge Rong, and Zhang Xiong. Mixture of attention heads: Selecting attention heads per token. In _Proc. Conf. on Empirical Methods in Natural Language Processing (EMNLP)_, pages 4150-4162, Abu Dhabi, United Arab Emirates, December 2022.
* 1 heads is better than h heads. In _Proc. Association for Computational Linguistics (ACL)_, pages 6566-6577, Virtual only, July 2020.
* [20] Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. _Journal of Machine Learning Research (JMLR)_, 21:140:1-140:67, 2020.
* [21] Marcus Hutter. The human knowledge compression prize. http://prize.hutter1.net, 2006.
* [22] Luca Soldaini and Kyle Lo. peS2o (Pretraining Efficiently on S2ORC) Dataset. Technical report, Allen Institute for AI, 2023. https://github.com/allenai/pes2o.
* [23] Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. Pointer sentinel mixture models. In _Int. Conf. on Learning Representations (ICLR)_, Toulon, France, April 2017.
* [24] Denis Paperno, German Kruszewski, Angeliki Lazaridou, Quan Ngoc Pham, Raffaella Bernardi, Sandro Pezzelle, Marco Baroni, Gemma Boleda, and Raquel Fernandez. The LAMBADA dataset: Word prediction requiring a broad discourse context. In _Proc. Association for Computational Linguistics (ACL)_, Berlin, Germany, August 2016.
* [25] Alex Warstadt, Alicia Parrish, Haokun Liu, Anhad Mohananey, Wei Peng, Sheng-Fu Wang, and Samuel R. Bowman. Blimp: The benchmark of linguistic minimal pairs for english. _Transactions of the Association for Computational Linguistics (TACL)_, 8:377-392, 2020.
* [26] Felix Hill, Antoine Bordes, Sumit Chopra, and Jason Weston. The goldilocks principle: Reading children's books with explicit memory representations. In _Int. Conf. on Learning Representations (ICLR)_, San Juan, Puerto Rico, May 2016.
* [27] Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timothe Lacroix, Baptiste Roziere, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, and Guillaume Lample. LLaMA: Open and efficient foundation language models. _Preprint arXiv:2302.13971_, 2023.
* [28] Jianlin Su, Yu Lu, Shengfeng Pan, Bo Wen, and Yunfeng Liu. RoFormer: Enhanced transformer with rotary position embedding. _Preprint arXiv:2104.09864_, 2021.

* [29] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words with subword units. In _Proc. Association for Computational Linguistics (ACL)_, pages 1715-1725, Berlin, Germany, August 2016.
* [30] Mike Schuster and Kaisuke Nakajima. Japanese and korean voice search. In _Proc. IEEE Int. Conf. on Acoustics, Speech and Signal Processing (ICASSP)_, pages 5149-5152, Kyoto, Japan, March 2012.
* [31] Taku Kudo and John Richardson. Sentencepiece: A simple and language independent subword tokenizer and detokenizer for neural text processing. In _Proc. Conf. on Empirical Methods in Natural Language Processing (EMNLP)_, pages 66-71, Brussels, Belgium, October 2018.
* [32] Zihang Dai, Zhilin Yang, Yiming Yang, Jaime G Carbonell, Quoc Le, and Ruslan Salakhutdinov. Transformer-XL: Attentive language models beyond a fixed-length context. In _Proc. Association for Computational Linguistics (ACL)_, pages 2978-2988, Florence, Italy, 2019.
* [33] Nikita Nangia and Samuel R. Bowman. ListOps: A diagnostic dataset for latent tree learning. In _Proc. North American Chapter of the Association for Computational Linguistics on Human Language Technologies (NAACL-HLT)_, pages 92-99, New Orleans, USA, June 2018.
* [34] Robert Csordas, Kazuki Irie, and Jurgen Schmidhuber. The neural data router: Adaptive control flow in transformers improves systematic generalization. In _Int. Conf. on Learning Representations (ICLR)_, Virtual only, April 2022.
* [35] Catherine Olsson, Nelson Elhage, Neel Nanda, Nicholas Joseph, Nova DasSarma, Tom Henighan, Ben Mann, Amanda Askell, Yuntao Bai, Anna Chen, Tom Conerly, Dawn Drain, Deep Ganguli, Zac Hatfield-Dodds, Danny Hernandez, Scott Johnston, Andy Jones, Jackson Kernion, Liane Lovitt, Kamal Ndousse, Dario Amodei, Tom Brown, Jack Clark, Jared Kaplan, Sam McCandlish, and Chris Olah. In-context learning and induction heads. _Transformer Circuits Thread_, 2022. https://transformer-circuits.pub/2022/in-context-learning-and-induction-heads/index.html.
* [36] Tan Nguyen, Tam Nguyen, Hai Do, Khai Nguyen, Vishwanath Saragadam, Minh Pham, Duy Khuong Nguyen, Nhat Ho, and Stanley J. Osher. Improving transformer with an admixture of attention heads. In _Proc. Advances in Neural Information Processing Systems (NeurIPS)_, New Orleans, LA, USA, November 2022.
* [37] William Fedus, Barret Zoph, and Noam Shazeer. Switch transformers: Scaling to trillion parameter models with simple and efficient sparsity. _Preprint arXiv:2101.03961_, 2021.
* [38] Noam Shazeer. Fast transformer decoding: One write-head is all you need. _Preprint arXiv:1911.02150_, 2019.
* [39] Tri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, and Christopher Re. FlashAttention: Fast and memory-efficient exact attention with IO-awareness. In _Proc. Advances in Neural Information Processing Systems (NeurIPS)_, New Orleans, Louisiana, USA, December 2022.
* [40] Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In _Int. Conf. on Learning Representations (ICLR)_, San Diego, CA, USA, May 2015.

Appendix

### A Comment on Flash Attention

The resource reductions from Flash Attention might be, in many cases, larger than those from our method alone. However, Flash Attention depends on GPU-specific memory bandwidth/compute trade-offs, which might not be available on all hardware, especially on edge devices. SwitchHead and FlashAttention can also be combined for further speedups. We demonstrated the viability of this setup in our RoPE experiments. Additionally, certain architectures, such as shared-layer transformers, might require a drastic increase in the number of heads, which FlashAttention alone might not be able to do.

### Resource Usage of Different Methods

In this section, we discuss the compute and memory usage of different attention variants. We will define the compute in terms of the number of multiply-accumulate operations (MACs, also used by Zhang et al. [18]), which is arguably better defined than FLOPs (e.g., does one step of the matrix multiplication count as 1 FLOP or 2? Do we include the softmax?). All calculations will be presented for a single attention layer for a single sequence, and they are presented this way in all our tables. Both the memory and compute requirements scale linearly with both the batch size and the number of layers.

Consider a sequence of inputs of length \(T\), with representation size \(d_{\text{model}}\). Let \(d_{\text{head}}\) be the width of the key, query and value projections used for the attention layer. For Transformer XL-style attention, let the size of the context be \(CT\), where \(C-1\) is the number of past chunks included in the context of the current attention step. We can divide the computation into two major parts: calculating the projections, which do not involve the attention map, and calculating the attention map and projecting the sequence of values using it.

First, consider the case of the standard Transformer XL [32]. Here, from the input \(\bm{x}\in\mathbb{R}^{T\times d_{\text{model}}}\), we calculate the \(\bm{K}^{h}\), \(\bm{Q}^{h}\), \(\bm{V}^{h}\in\mathbb{R}^{T\times d_{\text{head}}}\) using projection matrices of shape \(\mathbb{R}^{d_{\text{model}}\times d_{\text{head}}}\), The output after the attention is projected in a similar manner (Eq. 3). Thus, the projections take a total of \(4Td_{\text{model}}d_{\text{head}}\) MACs per head. For backpropagation, we have to store all the intermediate results. This takes \(Td_{\text{head}}\) numbers of \(\bm{K}^{h}\), \(\bm{Q}^{h}\) and \(\bm{V}^{h}\). Also, the projected values should be stored. They have an identical shape, therefore, the total memory used by projections is \(4Td_{\text{head}}\) numbers per head. Now consider the resource usage related to the attention matrix. It involves calculating the product of \(\bm{Q}^{h}\bm{K}^{h\top}\), which takes \(d_{\text{head}}CT^{2}\) MACs (multiplication by \(C\) is needed because the shape of \(\bm{K}^{h}\) and \(\bm{V}^{h}\) for Transformer XL is \(CT\times d_{\text{head}}\)). The projection of the values with the attention matrix \(\bm{A}^{h}\bm{V}^{h}\) is similar. For the memory usage, the attention needs \(CT^{2}\) numbers, but it needs to be stored both before and after the activation function. In addition, calculating the projection of the position encodings is necessary. This depends on the implementation, but in our case, it involves a matrix multiplication, and the total amount of computation is \(2d_{\text{head}}d_{\text{model}}TC\), and it needs \(2d_{\text{head}}TC\) numbers of storage. Thus the resource requirements are:

\[N^{\text{XL}}_{\text{MAC}} =n_{\text{heads}}\big{(}4Td_{\text{head}}d_{\text{model}}+2CT^{2 }d_{\text{head}}+2CTd_{\text{head}}d_{\text{model}}\big{)}\] (11) \[N^{\text{XL}}_{\text{mem}} =n_{\text{heads}}\big{(}4Td_{\text{head}}+2CT^{2}+2CTd_{\text{ head}}\big{)}\] (12)

The resource usage of SwitchHead is different. First, the number of heads \(n_{\text{heads}}\) is significantly reduced, but \(d_{\text{head}}\) is typically larger. Additionally, there are \(k\) experts active at the same time. Here, we only consider the case where the value and outputs are experts, but \(\bm{Q}^{h}\) and \(\bm{K}^{h}\) are not (this version performs the best; see Sec. 3.1). Then, we have two projections that are identical with that of Transformer XL, and two MoE-based projections. These use \(Tkd_{\text{model}}d_{\text{head}}\) MACs to calculate the projection and another \(Tkd_{\text{head}}\) to calculate their weighted average. With a smart kernel implementation, memory usage is not affected by \(k\), thus the formula remains the same as Eq. 12 (note, however, that \(n_{\text{heads}}\) and \(d_{\text{head}}\) are very different in practice). The compute requirement can be calculated as:

\[N^{\text{SwitchHead}}_{\text{MAC}}=n_{\text{heads}}\big{(}2Td_{\text{head} }d_{\text{model}}+2Tkd_{\text{head}}(d_{\text{model}}+1)+2CT^{2}d_{\text{head} }+2CTd_{\text{head}}d_{\text{model}}\big{)}\] (13)

Additionally, the expert selection logic needs minimal additional resources, which can be ignored. Note that the comparison between the MACs of the standard (Eq. 11) and SwitchHead (Eq. 13) depends on the exact values of the hyper-parameters. However, as we'll see in Sec. 3, in our typical configurations, SwitchHead provides good predictive performance with significantly lower \(n_{\text{heads}}\) compared to the standard Transformer, resulting in reduced resource usage in the end.

The resource requirements of MoA [19] are very similar to those of Transformer XL, except that it uses a single shared key and value projection for each head.

\[N_{\text{MAC}}^{\text{MoA}} =(2n_{\text{heads}}+2)Td_{\text{head}}d_{\text{model}}+2n_{\text{ heads}}CT^{2}d_{\text{head}}+2CTd_{\text{head}}d_{\text{model}}\] (14) \[N_{\text{mem}}^{\text{MoA}} =(2n_{\text{heads}}+2)Td_{\text{head}}+2n_{\text{heads}}CT^{2}+2CTd _{\text{head}}\] (15)

### The Importance of Different Projections

In order to analyze which projections are the most important to be mixture-of-experts, we exhaustively tried all combinations. We analyze our 47M parameter models on WikiText 103 dataset. We show the results in Tab. 6. We also include a parameter-matched baseline with two heads, which serves as a lower bound for the performance. We found that the value and output projections are the most important, and having key and query projections hurts the performance. This is possible because we perform all our experiments in a parameter-matched setting. Allocating parameters to these projections uses the budget that can be otherwise spent on other parts of the network. In our preliminary experiments, we found that, allowing the parameter budget to increase, more experts always help.

### RoPE Positional Encodings

All of our experiments in the main paper have used a Transformer XL model. Thus, it remains unclear whether SwitchHead is specific to this model or can be also used with other attention methods. As an alternative, we consider RoPE positional encodings [28] without the XL cache (thus, the attention matrices are square). This is the standard setup used by modern language models, such as all versions of Llama [27]. We tested these models in Wikitext 103 and C4. The results are shown in Tab. 7, and zero-shot performance on downstream tasks in Tab. 8. This shows that SwitchHead also performs well in the standard setup and is not tied to Transformer XL.

### Hyperparameters

We train all our models with Adam optimizer [40], with a batch size of 64, a learning rate of 0.00025, and gradient clipping with a maximum norm of \(\kappa\). Large models (\(>200K\) parameters) use a learning

\begin{table}
\begin{tabular}{l r r r r r} \hline \hline Model & \(n_{\text{heads}}\) & V & K & Q & O & Perplexity \(\downarrow\) \\ \hline SwitchHead & 2 & Y & N & N & Y & 12.27 \\ SwitchHead & 2 & N & N & N & Y & 12.30 \\ Transformer & 10 & - & - & - & - & 12.31 \\ SwitchHead & 2 & N & Y & N & Y & 12.36 \\ SwitchHead & 2 & Y & Y & N & Y & 12.37 \\ SwitchHead & 2 & Y & N & Y & Y & 12.42 \\ SwitchHead & 2 & Y & N & N & N & 12.45 \\ SwitchHead & 2 & N & N & Y & Y & 12.45 \\ SwitchHead & 2 & Y & N & Y & N & 12.51 \\ SwitchHead & 2 & Y & Y & Y & Y & 12.57 \\ SwitchHead & 2 & N & Y & Y & Y & 12.59 \\ SwitchHead & 2 & Y & Y & Y & N & 12.61 \\ SwitchHead & 2 & Y & Y & N & N & 12.69 \\ Transformer & 2 & - & - & - & - & 12.74 \\ SwitchHead & 2 & N & N & Y & N & 12.75 \\ SwitchHead & 2 & N & Y & N & N & 12.79 \\ SwitchHead & 2 & N & Y & Y & N & 12.90 \\ \hline \hline \end{tabular}
\end{table}
Table 6: Performance of SwitchHead with \(E=5\) experts and \(n_{\text{heads}}=2\) heads. Different projections are either experts or fixed for the given head. Columns V, K, Q, and O show whether the given projection is an expert. Parameter-matched baseline with \(n_{\text{heads}}=10\) and \(n_{\text{heads}}=2\) are shown. Models sorted by perplexity. 47M parameters models on Wikitext 103.

[MISSING_PAGE_FAIL:15]

in Tab. 10. We report the total number of CPUs (\(N_{\text{CPU}}\)) and RAM because they are shared between concurrent runs. Note that most of the experiments were done prior to the much faster, Triton-based kernel implementation. Because of this, the runtimes appear longer for SwitcHead compared to the baseline. For timing benchmarks with our new kernel, see Tab. 5.

Note that we only report the resources used for the paper here. We estimate that the total cost of the failed experiments and preliminary runs is around 10 times higher than this.

\begin{table}
\begin{tabular}{l c r r r r r r r r r} \hline \hline Model & Dataset & \(n_{\text{heads}}\) & \#params & \(d_{\text{head}}\) & \(d_{\text{ff}}\) & E & \(k\) & T & \(n_{\text{layers}}\) & \(\kappa\) \\ \hline SwitchHead & & 2 & 47M & 76 & 2080 & 5 & 3 & 256 & 16 & 0.1 \\ Transformer & C4 & 10 & 47M & 41 & 2053 & - & - & 256 & 16 & 0.1 \\ Transformer & & 2 & 47M & 205 & 2053 & - & - & 256 & 16 & 0.1 \\ \hline SwitchHead & & 4 & 262M & 112 & 4188 & 4 & 2 & 512 & 18 & 0.25 \\ Transformer & C4 & 16 & 262M & 64 & 4110 & - & - & 512 & 18 & 0.25 \\ Transformer & & 4 & 262M & 256 & 4110 & - & - & 512 & 18 & 0.25 \\ \hline SwitchHead & & 2 & 47M & 76 & 2080 & 5 & 2 & 256 & 16 & 0.1 \\ Transformer & Wikitext 103 & 10 & 47M & 41 & 2053 & - & - & 256 & 16 & 0.1 \\ Transformer & & 2 & 47M & 205 & 2053 & - & - & 256 & 16 & 0.1 \\ \hline SwitchHead & & 2 & 262M & 132 & 4147 & 8 & 4 & 512 & 18 & 0.25 \\ Transformer & & 16 & 262M & 64 & 4110 & - & - & 512 & 18 & 0.25 \\ Transformer & & 2 & 262M & 512 & 4110 & - & - & 512 & 18 & 0.25 \\ \hline SwitchHead & & & 2 & 47M & 76 & 2080 & 5 & 3 & 256 & 16 & 0.1 \\ Transformer & peS2o & 10 & 47M & 41 & 2053 & - & - & 256 & 16 & 0.1 \\ Transformer & & 2 & 47M & 205 & 2053 & - & - & 256 & 16 & 0.1 \\ \hline SwitchHead & & & 4 & 262M & 112 & 4188 & 4 & 2 & 512 & 18 & 0.25 \\ Transformer & peS2o & 16 & 262M & 64 & 4110 & - & - & 512 & 18 & 0.25 \\ Transformer & & 4 & 262M & 256 & 4110 & - & - & 512 & 18 & 0.25 \\ \hline SwitchHead & & & 2 & 41M & 112 & 2088 & 4 & 2 & 512 & 12 & 0.25 \\ Transformer & & 8 & 41M & 64 & 2053 & - & - & 512 & 12 & 0.25 \\ Transformer & & 2 & 41M & 256 & 2053 & - & - & 512 & 12 & 0.25 \\ \hline SwitchHead (RoPE) & & & 2 & 45M & 64 & 2092 & 5 & 3 & 512 & 16 & 0.1 \\ Transformer (RoPE) & & & 10 & 45M & 41 & 2053 & - & - & 512 & 16 & 0.1 \\ \hline SwitchHead (RoPE) & & & 4 & 243M & 100 & 4136 & 4 & 2 & 1024 & 18 & 0.25 \\ Transformer (RoPE) & & & 16 & 244M & 64 & 4110 & - & - & 1024 & 18 & 0.25 \\ \hline SwitchAll & & Wikitext 103 & 2 & 47M & 76 & 1648 & 5 & 2 & 256 & 16 & 0.25 \\ \hline SwitchAll & Wikitext 103 & 4 & 259M & 112 & 4096 & 4 & 2 & 512 & 18 & 0.25 \\ \hline SwitchAll & C4 & 2 & 47M & 76 & 1648 & 5 & 3 & 256 & 16 & 0.25 \\ \hline SwitchAll & C4 & 4 & 259M & 112 & 4096 & 4 & 2 & 512 & 18 & 0.25 \\ \hline SwitchAll & peS2o & 2 & 47M & 76 & 1648 & 5 & 3 & 256 & 16 & 0.25 \\ \hline SwitchAll & peS2o & 4 & 259M & 112 & 4096 & 4 & 2 & 512 & 18 & 0.25 \\ \hline \hline \end{tabular}
\end{table}
Table 9: Hyperparameters used for our models.

Figure 3: The maximum of all attention maps for a SwitchHead model on ListOps.

Figure 4: The maximum of all attention maps for a standard Transformer model on ListOps.

Figure 5: Details for individual heads of the SwitchHead model on ListOps. On the left side of each attention plot, the selection of the output projection expert is shown. Similarly, at the bottom, the selection of the value projection selection is visible. In the selection maps, dark blue always corresponds to 1, while white is 0. The adaptive scale shown to the right of the attention map is for the map only.

Figure 6: Induction head copying the rare name ”Homarus” in (a) SwitchHead and (b) Transformer XL baseline. The attention matrix is square because it is the first chunk of the sequence, without any extra context. Typical vertical line pattern in (c) SwitchHead and (b) Transformer XL baseline.

\begin{table}
\begin{tabular}{l r l r r r r r r} \hline \hline Model & \#params & Dataset & \(G\) & GPU Type & \(N_{\text{GPU}}\) & \(N_{\text{CPU}}\) & RAM & Duration \\ \hline SwitchAll & 259M & C4 & 4 & V100-32GB-LS & 8 & 40 & 503G & 24:06 \\ SwitchAll & 259M & peS2o & 4 & V100-32GB-LS & 8 & 40 & 503G & 30:00 \\ SwitchAll & 259M & Wikitext 103 & 4 & RTX 4090 & 4 & 24 & 251G & 22:58 \\ SwitchAll & 47M & C4 & 2 & RTX 3090 & 1 & 24 & 220G & 22:14 \\ SwitchAll & 47M & peS2o & 2 & RTX 3090 & 1 & 24 & 220G & 22:49 \\ SwitchAll & 47M & Wikitext 103 & 2 & RTX 3090 & 1 & 24 & 251G & 6:03 \\ SwitchHead & 243M & Wikitext 103 & 4 & V100-32GB & 4 & 40 & 503G & 147:09 \\ SwitchHead & 262M & C4 & 4 & V100-32GB-LS & 8 & 40 & 503G & 26:38 \\ SwitchHead & 262M & peS2o & 4 & V100-32GB-LS & 8 & 40 & 503G & 27:43 \\ SwitchHead & 262M & Wikitext 103 & 2 & V100-32GB & 4 & 40 & 503G & 31:42 \\ SwitchHead & 41M & Enwik8 & 2 & V100-32GB & 1 & 40 & 503G & 13:45 \\ SwitchHead & 45M & Wikitext 103 & 2 & RTX 3090 & 1 & 24 & 251G & 17:28 \\ SwitchHead & 47M & C4 & 2 & V100-32GB & 1 & 40 & 503G & 15:36 \\ SwitchHead & 47M & peS2o & 2 & V100-32GB & 1 & 40 & 503G & 16:17 \\ SwitchHead & 47M & Wikitext 103 & 2 & RTX 3090 & 1 & 24 & 251G & 13:09 \\ Transformer & 262M & C4 & 4 & V100-32GB & 8 & 40 & 503G & 11:55 \\ Transformer & 262M & C4 & 16 & V100-32GB-LS & 8 & 40 & 503G & 20:21 \\ Transformer & 262M & peS2o & 4 & V100-32GB & 8 & 40 & 503G & 17:08 \\ Transformer & 262M & peS2o & 16 & V100-32GB-LS & 8 & 40 & 503G & 25:56 \\ Transformer & 262M & Wikitext 103 & 2 & P100-16GB & 8 & 12 & 62G & 0:00 \\ Transformer & 262M & Wikitext 103 & 16 & A100-80GB & 2 & 64 & 503G & 31:51 \\ Transformer & 41M & Enwik8 & 2 & RTX 3090 & 1 & 24 & 220G & 15:38 \\ Transformer & 41M & Enwik8 & 8 & V100-32GB-LS & 2 & 40 & 503G & 16:04 \\ Transformer & 47M & C4 & 2 & V100-32GB & 1 & 40 & 503G & 10:29 \\ Transformer & 47M & C4 & 10 & V100-32GB & 1 & 40 & 503G & 16:57 \\ Transformer & 47M & peS2o & 2 & V100-32GB & 1 & 40 & 503G & 11:07 \\ Transformer & 47M & peS2o & 10 & V100-32GB & 1 & 40 & 503G & 17:55 \\ Transformer & 47M & Wikitext 103 & 2 & V100-32GB & 1 & 40 & 503G & 10:06 \\ Transformer & 47M & Wikitext 103 & 10 & V100-32GB & 1 & 40 & 503G & 18:51 \\ Transformer (RoPE) & 244M & Wikitext 103 & 16 & RTX 3090 & 4 & 24 & 251G & 30:30 \\ Transformer (RoPE) & 45M & Wikitext 103 & 10 & V100-32GB & 1 & 40 & 503G & 15:30 \\ \hline \hline \end{tabular}
\end{table}
Table 10: Training hardware information for the experiments reported in the paper

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: We summarized the motivation, method, and main findings in these sections. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: We discuss the limitations in Sec. 6. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [NA]Justification: This is an empirical paper. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: We show all the hyperparameter configurations in Appendix A.5, and we provide the code for our experiments. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material?Answer: [Yes] Justification: We provide the code for our experiments. It automatically downloads all the data that it needs. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: Our methodology is explained in Sec. 3, and the full table of hyperparameters is presented in Appendix A.5. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [No] Justification: Our experiments involve large models that are very expensive to train, and we do not have sufficient compute resources to run multiple seeds of them. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: We report the type of hardware used for our main experiments in Appendix A.8. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: We read the Ethics guidelines, and to the best of our knowledge, we are complying with it. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [Yes] Justification: We consider our paper to be a foundational research paper without direct consequences. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.

* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: The models in this paper are small by modern standards and we do not release pre-trained weights. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licensees for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: Justification: Our code is under MIT license and the paper is CC-BY 4.0. To the best of our knowledge, we always credit the reused code if we reuse any. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.

* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [Yes] Justification: We provide the source code and instructions on how to run it. Guidelines: * The answer NA means that the paper does not release new assets. * Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc. * The paper should discuss whether and how consent was obtained from people whose asset is used. * At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: We do not work with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper. * According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: We do not work with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.

* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.