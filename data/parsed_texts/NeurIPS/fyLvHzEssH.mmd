# Neural (Tangent Kernel) Collapse

Mariia Seleznova\({}^{1}\)1  Dana Weitzner\({}^{2}\)  Raja Giryes\({}^{2}\)  Gitta Kutyniok\({}^{1}\)  Hung-Hsu Chou\({}^{1}\)

\({}^{1}\)Ludwig-Maximilians-Universitat Munchen \({}^{2}\)Tel Aviv University

Footnote 1: Correspondence to: Mariia Seleznova (selez@math.lmu.de).

###### Abstract

This work bridges two important concepts: the Neural Tangent Kernel (NTK), which captures the evolution of deep neural networks (DNNs) during training, and the Neural Collapse (NC) phenomenon, which refers to the emergence of symmetry and structure in the last-layer features of well-trained classification DNNs. We adopt the natural assumption that the empirical NTK develops a block structure aligned with the class labels, i.e., samples within the same class have stronger correlations than samples from different classes. Under this assumption, we derive the dynamics of DNNs trained with mean squared (MSE) loss and break them into interpretable phases. Moreover, we identify an invariant that captures the essence of the dynamics, and use it to prove the emergence of NC in DNNs with block-structured NTK. We provide large-scale numerical experiments on three common DNN architectures and three benchmark datasets to support our theory.

## 1 Introduction

Deep Neural Networks (DNNs) are advancing the state of the art in many real-life applications, ranging from image classification to machine translation. Yet, there is no comprehensive theory that can explain a multitude of empirical phenomena observed in DNNs. In this work, we provide a theoretical connection between two such empirical phenomena, prominent in modern DNNs: _Neural Collapse (NC)_ and _Neural Tangent Kernel (NTK) alignment_.

Neural Collapse.NC [39] emerges while training modern classification DNNs past zero error to further minimize the loss. During NC, the class means of the DNN's last-layer features form a symmetric structure with maximal separation angle, while the features of each individual sample collapse to their class means. This simple structure of the feature vectors appears favourable for generalization and robustness in the literature [12, 31, 40, 47]. Though NC is common in modern DNNs, explaining the mechanisms behind its emergence is challenging, since the complex non-linear training dynamics of DNNs evade analytical treatment.

Neural Tangent Kernel.The NTK [30] describes the gradient descent dynamics of DNNs in the function space, which provides a dual perspective to DNNs' evolution in the parameters space. This perspective allows to study the dynamics of DNNs analytically in the infinite-width limit, where the NTK is constant during training [30]. Hence, theoretical works often rely on the infinite-width NTK to analyze generalization of DNNs [1, 20, 28, 49]. However, multiple authors have argued that the infinite-width limit does not fully reflect the behaviour of realistic DNNs [2, 10, 22, 27, 36, 43], since constant NTK implies that no feature learning occurs during DNNs training.

NTK Alignment.While the infinite-width NTK is label-agnostic and does not change during training, the empirical NTK rapidly aligns with the target function in the early stages of training [5, 7, 44, 45]. In the context of classification, this manifests itself as the emergence of a block structurein the kernel matrix, where the correlations between samples from the same class are stronger than between samples from different classes. The NTK alignment implies the so-called local elasticity of DNNs' training dynamics, i.e., samples from one class have little impact on samples from other classes in Stochastic Gradient Descent (SGD) updates [23]. Several recent works have also linked the local elasticity of training dynamics to the emergence of NC [33; 53]. This brings us to the main question of this paper: _Is there a connection between NTK alignment and neural collapse?_

Contribution.In this work, we consider a model of NTK alignment, where the kernel has a _block structure_, i.e., it takes only three distinct values: an inter-class value, an intra-class value and a diagonal value. We describe this model in Section 3. Within the model, we establish the connection between NTK alignment and NC, and identify the conditions under which NC occurs. Our main contributions are as follows:

* We derive and analyze the training dynamics of DNNs with MSE loss and block-structured NTK in Section 4. We identify three distinct convergence rates in the dynamics, which correspond to three components of the training error: error of the global mean, of the class means, and of each individual sample. These components play a key role in the dynamics.
* We show that NC emerges in DNNs with block-structured NTK under additional assumptions in Section 5.3. To the best of our knowledge, this is the first work to connect NTK alignment and NC. While previous contributions rely on the unconstrained features models [21; 38; 48] or other imitations of DNNs' training dynamics [53] to derive NC (see Appendix A for a detailed discussion of related works), we consider standard gradient flow dynamics of DNNs simplified by our assumption on the NTK structure.
* We analyze when NC does or does not occur in DNNs with NTK alignment, both theoretically and empirically. In particular, we identify an invariant of the training dynamics that provides a necessary condition for the emergence of NC in Section 5.2. Since DNNs with block-structured NTK do not always converge to NC, we conclude that NTK alignment is a more widespread phenomenon than NC.
* We support our theory with large-scale numerical experiments in Section 6. Source code to reproduce the results is available in the project's GitHub repository.

## 2 Preliminaries

We consider the classification problem with \(C\in\mathbb{N}\) classes, where the goal is to build a classifier that returns a class label for any input \(x\in\mathcal{X}\). In this work, the classifier is a DNN trained on a dataset \(\{(x_{i},y_{i})\}_{i=1}^{N}\), where \(x_{i}\in\mathcal{X}\) are the inputs and \(y_{i}\in\mathbb{R}^{C}\) are the one-hot encodings of the class labels. We view the output function of the DNN \(f:\mathcal{X}\rightarrow\mathbb{R}^{C}\) as a composition of parametrized last-layer _features_\(h:\mathcal{X}\rightarrow\mathbb{R}^{n}\) and a linear _classification_ layer parametrized by weights \(\mathbf{W}\in\mathbb{R}^{C\times n}\) and biases \(\mathbf{b}\in\mathbb{R}^{C}\). Then the logits of the training data \(X=\{x_{i}\}_{i=1}^{N}\) can be expressed as follows:

\[f(X)=\mathbf{W}\mathbf{H}+\mathbf{b}\mathbf{1}_{N}^{\top},\] (1)

where \(\mathbf{H}\in\mathbb{R}^{n\times N}\) are the features of the entire dataset stacked as columns and \(\mathbf{1}_{N}\in\mathbb{R}^{N}\) is a vector of ones. Though we omit the notion of the data dependence in the text to follow, i.e. we write \(\mathbf{H}\) without the explicit dependence on \(X\), we emphasize that the features \(\mathbf{H}\) are a function of the data and the DNN's parameters, unlike in the previously studied unconstrained feature models [21; 38; 48].

We assume that the dataset is _balanced_, i.e. there are \(m:=N/C\) training samples for each class. Without loss of generality, we further assume that the inputs are reordered so that \(x_{(c-1)m+1},\ldots,x_{cm}\) belong to class \(c\) for all \(c\in[C]\). This will make the notation much easier later on. Since the dimension of features \(n\) is typically much larger than the number of classes, we also assume \(n>C\) in this work.

### Neural Collapse

Neural Collapse (NC) is an empirical behaviour of classifier DNNs trained past zero error [39]. Let \(\langle h\rangle:=N^{-1}\sum_{i=1}^{N}h(x_{i})\) denote the global features mean and \(\langle h\rangle_{c}:=m^{-1}\sum_{x_{i}\in\operatorname{class}c}h(x_{i})\), \(c\in[C]\) be the class means. Furthermore, define the matrix of normalized centered class means as \(\mathbf{M}:=[\langle\overline{h}\rangle_{1}/\|\langle\overline{h}\rangle_{1} \|_{2},\ldots,\langle\overline{h}\rangle_{C}/\|\langle\overline{h}\rangle_{C} \|_{2}]^{\top}\in\mathbb{R}^{n\times C}\), where \(\langle\overline{h}\rangle_{c}=\langle h\rangle_{c}-\langle h\rangle,c\in[C]\). We say that a DNN exhibits NC if the following four behaviours emerge as the training time \(t\) increases:

**(NC1)**: **Variability collapse:** for all samples \(x_{i}^{c}\) from class \(c\in[C]\), where \(i\in[m]\), the penultimate layer features converge to their class means, i.e. \(\|h(x_{i}^{c})-\langle h\rangle_{c}\|_{2}\to 0\).
**(NC2)**: **Convergence to Simplex Equiangular Tight Frame (ETF):** for all \(c,c^{\prime}\in[C]\), the class means converge to the following configuration:

\[\|\langle h\rangle_{c}-\langle h\rangle\|_{2}-\|\langle h\rangle_{c^{\prime}} -\langle h\rangle\|_{2}\to 0,\quad\mathbf{M}^{\top}\mathbf{M}\to\frac{C}{C-1}( \,\mathbbm{1}_{C}-\frac{1}{C}\mathbf{1}_{C}\mathbf{1}_{C}^{\top}).\]
**(NC3)**: **Convergence to self-duality:** the class means \(\mathbf{M}\) and the final weights \(\mathbf{W}^{\top}\) converge to each other:

\[\left\|\mathbf{M}/\|\mathbf{M}\|_{F}-\mathbf{W}^{\top}/\|\mathbf{W}^{\top}\|_ {F}\right\|_{F}\to 0.\]
**(NC4)**: **Simplification to Nearest Class Center (NCC):** the classifier converges to the NCC decision rule behaviour:

\[\operatorname*{argmax}_{c}(\mathbf{W}h(x)+\mathbf{b})_{c}\to \operatorname*{argmin}_{c}\|h(x)-\langle h\rangle_{c}\|_{2}.\]

Though NC is observed in practice, there is currently no conclusive theory on the mechanisms of its emergence during DNN training. Most theoretical works on NC adopt the unconstrained features model, where features \(\mathbf{H}\) are free variables that can be directly optimized [21; 38; 48]. Training dynamics of such models do not accurately reflect the dynamics of real DNNs, since they ignore the dependence of the features on the input data and the DNN's trainable parameters. In this work, we make a step towards realistic DNN dynamics by means of the Neural Tangent Kernel (NTK).

### Neural Tangent Kernel

The NTK \(\Theta\) of a DNN with the output function \(f:\mathcal{X}\to\mathbb{R}^{C}\) and trainable parameters \(\mathbf{w}\in\mathbb{R}^{P}\) (stretched into a single vector) is given by

\[\Theta_{k,s}(x_{i},x_{j}):=\big{\langle}\nabla_{\mathbf{w}}f_{k}(x_{i}), \nabla_{\mathbf{w}}f_{s}(x_{j})\big{\rangle},\quad x_{i},x_{j}\in\mathcal{X}, \quad k,s\in[C].\] (2)

We also define the last-layer features kernel \(\Theta^{h}\), which is a component of the NTK corresponding to the parameters up to the penultimate layer, as follows:

\[\Theta^{h}_{k,s}(x_{i},x_{j}):=\big{\langle}\nabla_{\mathbf{w}}h_{k}(x_{i}), \nabla_{\mathbf{w}}h_{s}(x_{j})\big{\rangle},\quad x_{i},x_{j}\in\mathcal{X}, \quad k,s\in[n].\] (3)

Intuitively, the NTK captures the correlations between the training samples in the DNN dynamics. While most theoretical works consider the infinite-width limit of DNNs [30; 52], where the NTK can be computed theoretically, empirical studies have also extensively explored the NTK of finite-width networks [19; 45; 49; 36]. Unlike the label-agnostic infinite-width NTK, the empirical NTK aligns with the labels during training. We use this observation in our main assumption (Section 3).

### Classification with MSE Loss

We study NC for DNNs with the mean squared error (MSE) loss given by

\[\mathcal{L}(\mathbf{W},\mathbf{H},\mathbf{b})=\frac{1}{2}\|f(X)-\mathbf{Y}\|_ {F}^{2},\] (4)

where \(\mathbf{Y}\in\mathbb{R}^{C\times N}\) is a matrix of stacked labels \(y_{i}\). While NC was originally introduced for the cross-entropy (CE) loss [39], which is more common in classification problems, the MSE loss is much easier to analyze theoretically. Moreover, empirical observations suggest that DNNs with MSE loss achieve comparable performance to using CE [14; 29; 41], which motivates the recent line of research on MSE-NC [21; 38; 48].

## 3 Block Structure of the NTK

Numerous empirical studies have demonstrated that the NTK becomes aligned with the labels \(\mathbf{Y}^{\top}\mathbf{Y}\) during the training process [7; 32; 45]. This alignment constitutes feature learning and is associated with better performance of DNNs [9; 13]. For classification problems, this means that the empiricalNTK develops an approximate block structure with larger kernel values corresponding to pairs of samples \((x_{i}^{c},x_{j}^{c})\) from the same class [44]. Figure 1 shows an example of such a structure emergent in the empirical NTK of ResNet20 trained on MNIST.2 Motivated by these observations, we assume that the NTK and the last-layer features kernel exhibit a block structure, defined as follows:

Footnote 2: We provide figures illustrating the NTK block structure on other architectures and datasets in Appendix C.

**Definition 3.1** (Block structure of a kernel).: _We say a kernel \(\Theta:\mathcal{X}\times\mathcal{X}\to\mathbb{R}^{K\times K}\) has a block structure associated with \((\lambda_{1},\lambda_{2},\lambda_{3})\), if \(\lambda_{1}>\lambda_{2}>\lambda_{3}\geq 0\) and_

\[\Theta(x,x)=\lambda_{1}\mathbb{I}_{K},\quad\Theta(x_{i}^{c},x_{j}^{c})=\lambda _{2}\mathbb{I}_{K},\quad\Theta(x_{i}^{c},x_{j}^{c^{\prime}})=\lambda_{3} \mathbb{I}_{K},\] (5)

_where \(x_{i}^{c}\) and \(x_{j}^{c}\) are two distinct inputs from the same class, and \(x_{j}^{c^{\prime}}\) is an input from class \(c^{\prime}\neq c\)._

**Assumption 3.2**.: _The NTK \(\Theta:\mathcal{X}\times\mathcal{X}\to\mathbb{R}^{C\times C}\) has a block structure associated with \((\gamma_{d},\gamma_{c},\gamma_{n})\), and the penultimate kernel \(\Theta^{h}:\mathcal{X}\times\mathcal{X}\to\mathbb{R}^{n\times n}\) has a block structure associated with \((\kappa_{d},\kappa_{c},\kappa_{n})\)._

This assumption means that every kernel \(\Theta_{k,k}(X):=[\Theta_{k,k}(x_{i},x_{j})]_{i,j\in[N]}\) corresponding to an output neuron \(f_{k},k\in[C]\) and every kernel \(\Theta^{h}_{p,p}(X)\) corresponding to a last-layer neuron \(h_{p},p\in[n]\) is aligned with \(\mathbf{Y}^{\top}\mathbf{Y}\) (see Figure 1, panes a-b). Additionally, the "non-diagonal" kernels \(\Theta_{k,s}(X)\) and \(\Theta^{h}_{k,s}(X)\), \(k\neq s\) are equal to zero (see Figure 1, panes c-d).3 Moreover, if \(\gamma_{c}\gg\gamma_{n}\) and \(\kappa_{c}\gg\kappa_{n}\), Assumption 3.2 can be interpreted as _local elasticity_ of DNNs, defined below.

Footnote 3: We discuss possible relaxations to our main assumption, where the ”non-diagonal” components of the last-layer kernel \(\Theta^{h}_{k,s}\) are allowed to be non-zero, in Appendix D.

**Definition 3.3** (Local elasticity [23]).: _A classifier is said to be locally elastic (LE) if its prediction or feature representation on point \(x_{i}^{c}\) from class \(c\in[C]\) is not significantly affected by performing SGD updates on data points from classes \(c^{\prime}\neq c\)._

To see the relation between Assumption 3.2 and this definition, consider a Gradient Descent (GD) step of the output neuron \(f_{k},k\in[C]\) with step size \(\eta\) performed on a single input \(x_{j}^{c^{\prime}}\) from class \(c^{\prime}\neq c\). By the chain rule, block-structured \(\Theta\) implies locally-elastic predictions since

\[f^{t+1}(x_{i}^{c})-f^{t}(x_{i}^{c})=-\eta\Theta(x_{i}^{c},x_{j}^{c^{\prime}}) \frac{\partial\mathcal{L}(x_{j}^{c^{\prime}})}{\partial f(x_{j}^{c^{\prime}}) }+O(\eta^{2}),\] (6)

i.e., the magnitude of the GD step of \(f(x_{i}^{c})\) is determined by the value of \(\Theta(x_{i}^{c},x_{j}^{c^{\prime}})\). Similarly, block-structured kernel \(\Theta^{h}\) implies locally-elastic penultimate layer features because

\[h^{t+1}(x_{i}^{c})-h^{t}(x_{i}^{c})=-\eta\Theta^{h}(x_{i}^{c},x_{j}^{c^{\prime }})\mathbf{W}^{\top}\frac{\partial\mathcal{L}(x_{j}^{c^{\prime}})}{\partial f( x_{j}^{c^{\prime}})}+O(\eta^{2}).\] (7)

This observation provides a connection between our work and recent contributions suggesting a connection between NC and local elasticity [33, 53].

Figure 1: The NTK block structure of ResNet20 trained on MNIST. **a)** Traced kernel \(\sum_{k=1}^{C}\Theta_{k,k}(X)\) computed on a random data subset with 12 samples from each class. The samples are ordered as described in Section 2, so that the diagonal blocks correspond to pairs of inputs from the same class. **b)** Traced kernel \(\sum_{k=1}^{n}\Theta^{h}_{k,k}(X)\) computed on the same subset. **c)** Norms of the kernels \(\Theta_{k,s}(X)\) for all \(k,s\in[C]\). **d)** Norms of the kernels \(\Theta^{h}_{k,s}(X)\) for all \(k,s\in[n]\). The color bars show the values in each heatmap as a fraction of the maximal value in the heatmap. **e)** The alignment of the traced kernels from panes **a** and **b** with the class labels.

## 4 Dynamics of DNNs with NTK Alignment

### Convergence

As a warm up for our main results, we analyze the effects of the NTK block structure on the convergence of DNNs. Consider a GD update of an output neuron \(f_{k},k\in[C]\) with the step size \(\eta\):

\[f_{k}^{t+1}(X)=f_{k}^{t}(X)-\eta\Theta_{k,k}(X)(f_{k}^{t}(X)-\mathbf{Y}_{k})+O( \eta^{2}),\quad k=1,\ldots,C.\] (8)

Note that we have taken into account that \(\Theta_{k,s}\) is zero for \(k\neq s\) by our assumption. Denote the residuals corresponding to \(f_{k}\) as \(\mathbf{r}_{k}^{\top}:=f_{k}^{\top}(X)-\mathbf{Y}_{k}\in\mathbb{R}^{N}\). Then we have the following dynamics for the residuals vector:

\[\mathbf{r}_{k}^{t+1}=(1-\eta\Theta_{k,k}(X))\mathbf{r}_{k}^{t}+O(\eta^{2}).\] (9)

The eigendecomposition of the block-structured kernel \(\Theta_{k,k}(X)\) provides important insights into this dynamics and is summarized in Table 1. We notice that the NTK has three distinct eigenvalues \(\lambda_{\text{global}}\geq\lambda_{\text{class}}\geq\lambda_{\text{single}}\), which imply different convergence rates for certain components of the error. Moreover, the eigenvectors associated with each of these eigenvalues reveal the meaning of the error components corresponding to each convergence rate. Indeed, consider the projected dynamics with respect to eigenvector \(\mathbf{v}_{0}\) and eigenvalue \(\lambda_{\text{global}}\) from Table 1:

\[\langle\mathbf{r}_{k}^{t+1},\mathbf{v}_{0}\rangle=(1-\eta\lambda_{\text{global }})\langle\mathbf{r}_{k}^{t},\mathbf{v}_{0}\rangle,\] (10)

where we omitted \(O(\eta^{2})\) for clarity. Now notice that the projection of \(\mathbf{r}_{k}^{t}\) onto the vector \(\mathbf{v}_{0}\) is in fact proportional to the average residual over the training set:

\[\langle\mathbf{r}_{k}^{t},\mathbf{v}_{0}\rangle=\langle\mathbf{r}_{k}^{t}, \mathbf{1}_{N}\rangle=N\langle\mathbf{r}_{k}^{t}\rangle\] (11)

where \(\langle\cdot\rangle\) denotes the average over all the training samples \(x_{i}\in X\). By a similar calculation, for all \(c\in[C]\) and \(i\in[m]\) we get interpretations of the remaining projections of the residual:

\[\langle\mathbf{r}_{k}^{t},\mathbf{v}_{c}\rangle=\frac{N}{C-1}(\langle\mathbf{ r}_{k}^{t}\rangle_{c}-\langle\mathbf{r}_{k}^{t}\rangle),\quad\langle\mathbf{r}_{k}^{t}, \mathbf{v}_{i}^{c}\rangle=\frac{m}{m-1}(\mathbf{r}_{k}^{t}(x_{i}^{c})-\langle \mathbf{r}_{k}^{t}\rangle_{c}),\] (12)

We where \(\langle\cdot\rangle_{c}\) denotes the average over samples \(x_{i}^{c}\) from class \(c\), and \(\mathbf{r}_{k}^{\top}(x_{i}^{c})\) is the \(k\)th component of \(f^{\top}(x_{i}^{c})-y_{i}^{c}\). Combining (10), (11) and (12), we have the following convergence rates:

\[\langle\mathbf{r}_{k}^{t+1}\rangle =(1-\eta\lambda_{\text{global}})\langle\mathbf{r}_{k}^{t}\rangle,\] (13) \[\langle\mathbf{r}_{k}^{t+1}\rangle_{c}-\langle\mathbf{r}_{k}^{t+ 1}\rangle =(1-\eta\lambda_{\text{class}})(\langle\mathbf{r}_{k}^{t}\rangle_{c}- \langle\mathbf{r}_{k}^{t}\rangle),\] (14) \[\mathbf{r}_{k}^{t+1}(x_{i}^{c})-\langle\mathbf{r}_{k}^{t+1}\rangle _{c} =(1-\eta\lambda_{\text{single}})(\mathbf{r}_{k}^{t}(x_{i}^{c})- \langle\mathbf{r}_{k}^{t}\rangle_{c}).\] (15)

Overall, this means that the global mean \(\langle\mathbf{r}\rangle\) of the residual converges first, then the class means, and finally the residual of each sample \(\mathbf{r}(x_{i}^{c})\). To simplify the notation, we define the following quantities:

\[\mathbf{R} =f(X)-\mathbf{Y}=[\mathbf{r}(x_{1}),\ldots,\mathbf{r}(x_{N})],\] (16) \[\mathbf{R}_{\text{class}} =\frac{1}{m}\mathbf{R}\mathbf{Y}^{\top}\mathbf{Y}=\underbrace{[ \langle\mathbf{r}\rangle_{1},\ldots,\langle\mathbf{r}\rangle_{C}]}_{:= \mathbf{R}_{1}}\otimes\mathbf{1}_{m}^{\top},\] (17) \[\mathbf{R}_{\text{global}} =\frac{1}{N}\mathbf{R}\mathbf{1}_{N}\mathbf{1}_{N}^{\top}= \langle\mathbf{r}\rangle\otimes\mathbf{1}_{N}^{\top},\] (18)

\begin{table} Eigenvalue 

\end{table}
Table 1: Eigendecomposition of the block-structured NTK.

where \(\mathbf{R}\in\mathbb{R}^{C\times N}\) is the matrix of residuals, \(\mathbf{R}_{\text{class}}\in\mathbb{R}^{C\times N}\) are the residuals averaged over each class and stacked \(m\) times, and \(\mathbf{R}_{\text{global}}\in\mathbb{R}^{C\times N}\) are the residuals averaged over the whole training set stacked \(N\) times. According to the previous discussion, \(\mathbf{R}_{\text{global}}\) converges to zero at the fastest rate, while \(\mathbf{R}\) converges at the slowest rate. The last phase, which we call the _end of training_, is when \(\mathbf{R}_{\text{class}}\) and \(\mathbf{R}_{\text{global}}\) have nearly vanished and can be treated as zero for the remaining training time. We will use this notion in several remarks, as well as in the proof of Theorem 5.2.

### Gradient Flow Dynamics with Block-Structured NTK

We derive the dynamics of \(\mathbf{H},\mathbf{W},\mathbf{b}\) under Assumption 3.2 in Theorem 4.1. One can see that the block-structured kernel greatly simplifies the complicated dynamics of DNNs and highlights the role of each of the residual components identified in Section 4.1. We consider gradient flow, which is close to gradient descent for sufficiently small step size [16], to reduce the complications caused by higher order terms. The proof is given in Appendix B.1.

**Theorem 4.1**.: _Suppose Assumption 3.2 holds. Then the gradient flow dynamics of a DNN can be written as_

\[\begin{cases}\dot{\mathbf{H}}=&-\mathbf{W}^{\top}[(\kappa_{d}-\kappa_{c}) \mathbf{R}+(\kappa_{c}-\kappa_{n})m\mathbf{R}_{\text{class}}+\kappa_{n}N \mathbf{R}_{\text{global}}]\\ \dot{\mathbf{W}}=&-\mathbf{R}\mathbf{H}^{\top}\\ \dot{\mathbf{b}}=&-\mathbf{R}_{\text{global}}\mathbf{1}_{N}.\end{cases}\] (19)

We note that at the end of training, where \(\mathbf{R}_{\text{class}}\) and \(\mathbf{R}_{\text{global}}\) are zero, the system (19) reduces to

\[\dot{\mathbf{H}}=-(\kappa_{d}-\kappa_{c})\nabla_{\mathbf{H}}\tilde{\mathcal{L }},\qquad\dot{\mathbf{W}}=-\nabla_{\mathbf{W}}\tilde{\mathcal{L}},\qquad \tilde{\mathcal{L}}(\mathbf{W},\mathbf{H}):=\frac{1}{2}\|\mathbf{W}\mathbf{H} +\mathbf{b}\mathbf{1}_{N}^{\top}-\mathbf{Y}\|_{F}^{2},\] (20)

and \(\dot{\mathbf{b}}=0\). This system differs from the unconstrained features dynamics only by a factor of \(\kappa_{d}-\kappa_{c}\) before \(\mathbf{H}\). Moreover, such a form of the loss function also appears in the literature of implicit regularization [4; 6; 11], where the authors show that \(\mathbf{W}\mathbf{H}\) converges to a low rank matrix.

## 5 NTK Alignment Drives Neural Collapse

The main goal of this work is to demonstrate how NC results from the NTK block structure. To this end, in Section 5.1 we further analyze the dynamics presented in Theorem 4.1, in Section 5.2 we derive the invariant of this training dynamics, and in Section 5.3 we finally derive NC.

### Features Decomposition

We first decompose the features dynamics presented in Theorem 4.1 into two parts: \(\mathbf{H}_{1}\), which lies in the subspace of the labels \(\mathbf{Y}\), and \(\mathbf{H}_{2}\), which is orthogonal to the labels and eventually vanishes. To achieve this, note that the SVD of \(\mathbf{Y}\) has the following form:

\[\mathbf{P}^{\top}\mathbf{Y}\mathbf{Q}=\big{[}\sqrt{m}\mathbb{I}_{C},\mathbb{Q }\big{]},\] (21)

where \(\mathbb{O}\in\mathbb{R}^{C\times(N-C)}\) is a matrix of zeros, and \(\mathbf{P}\in\mathbb{R}^{C\times C}\) and \(\mathbf{Q}\in\mathbb{R}^{N\times N}\) are orthogonal matrices. Moreover, we can choose \(\mathbf{P}\) and \(\mathbf{Q}\) such that \(\mathbf{P}=\mathbb{I}_{C}\) and

\[\mathbf{Q}=\big{[}\mathbf{Q}_{1},\mathbf{Q}_{2}\big{]},\quad\mathbf{Q}_{1}= \frac{1}{\sqrt{m}}\mathbb{I}_{C}\otimes\mathbf{1}_{m}\in\mathbb{R}^{N\times C },\quad\mathbf{Q}_{2}=\mathbb{I}_{C}\otimes\tilde{\mathbf{Q}}_{2}\in\mathbb{R }^{N\times(N-C)},\] (22)

where \(\otimes\) is the Kronecker product. Note that by orthogonality, \(\tilde{\mathbf{Q}}_{2}\in\mathbb{R}^{m\times(m-1)}\) has full rank and \(\mathbf{1}_{m}^{\top}\tilde{\mathbf{Q}}_{2}=\mathbb{O}\). We can now decompose \(\mathbf{H}\mathbf{Q}\) into two components as follows:

\[\mathbf{H}\mathbf{Q}=\sqrt{m}[\mathbf{H}_{1},\mathbf{H}_{2}],\quad\mathbf{H}_ {1}=\frac{1}{\sqrt{m}}\mathbf{H}\mathbf{Q}_{1},\quad\mathbf{H}_{2}=\frac{1}{ \sqrt{m}}\mathbf{H}\mathbf{Q}_{2}.\] (23)

The following equations reveal the meaning of these two components:

\[\mathbf{H}_{1}=\big{[}\langle h\rangle_{1},\dots,\langle h\rangle_{C}\big{]}, \quad\mathbf{H}_{2}=\frac{1}{\sqrt{m}}\big{[}\mathbf{H}^{(1)}\tilde{\mathbf{Q} }_{2},\dots,\mathbf{H}^{(C)}\tilde{\mathbf{Q}}_{2}\big{]},\] (24)

where \(\langle h\rangle_{c}\in\mathbb{R}^{n}\) is the mean of \(h\) over inputs \(x_{i}^{c}\) from class \(c\in[C]\), and \(\mathbf{H}^{(c)}\in\mathbb{R}^{n\times m}\) is the submatrix of \(\mathbf{H}\) corresponding to samples of class \(c\), i.e., \(\mathbf{H}=\big{[}\mathbf{H}^{(1)},\dots,\mathbf{H}^{(C)}\big{]}\). We see that is simply the matrix of the last-layer features' class means, which is prominent in the NC literature. We also see that the columns of \(\mathbf{H}^{(c)}\tilde{\mathbf{Q}}_{2}\) are \(m-1\) different linear combinations of \(m\) vectors \(h(x_{i}^{c})\), \(i\in[m]\). Moreover, the coefficients of each of these linear combinations sum to zero by the choice of \(\tilde{\mathbf{Q}}_{2}\). Therefore, \(\mathbf{H}_{2}\) must reduce to zero in case of variability collapse (NC1), when all the feature vectors within the same class become equal. We prove that \(\mathbf{H}_{2}\) indeed vanishes in DNNs with block-structured NTK as part of our main result (Theorem 5.2).

### Invariant

We now use the former decomposition of the last-layer features to further simplify the dynamics and deduce a training invariant in Theorem 5.1. The proof is given in Appendix B.2.

**Theorem 5.1**.: _Suppose Assumption 3.2 holds. Define \(\mathbf{H}_{1}\) and \(\mathbf{H}_{2}\) as in (23). Then the class-means of the residuals (defined in (17)) are given by \(\mathbf{R}_{1}=\mathbf{W}\mathbf{H}_{1}+\mathbf{b}\mathbf{1}_{C}^{\top}- \mathbb{I}_{C}\), and the training dynamics of the DNN can be written as_

\[\begin{cases}\dot{\mathbf{H}}_{1}&=-\mathbf{W}^{\top}\mathbf{R}_{1}(\mu_{ \text{class}}\mathbb{I}_{C}+\kappa_{n}m\mathbf{1}_{C}\mathbf{1}_{C}^{\top})\\ \dot{\mathbf{H}}_{2}&=-\mu_{\text{single}}\mathbf{W}^{\top}\mathbf{W}\mathbf{H }_{2}\\ \dot{\mathbf{W}}&=-m(\mathbf{R}_{1}\mathbf{H}_{1}^{\top}+\mathbf{W}\mathbf{H}_ {2}\mathbf{H}_{2}^{\top})\\ \dot{\mathbf{b}}&=-m\mathbf{R}_{1}\mathbf{1}_{C},\end{cases}\] (25)

_where \(\mu_{\text{single}}:=\kappa_{d}-\kappa_{c}\) and \(\mu_{\text{class}}:=\mu_{\text{single}}+m(\kappa_{c}-\kappa_{n})\) are the two smallest eigenvalues of the kernel \(\Theta_{k,k}^{h}(X)\) for any \(k\in[n]\). Moreover, the quantity_

\[\mathbf{E}:=\frac{1}{m}\mathbf{W}^{\top}\mathbf{W}-\frac{1}{\mu_{\text{class} }}\mathbf{H}_{1}(\mathbb{I}_{C}-\alpha\mathbf{1}_{C}\mathbf{1}_{C}^{\top}) \mathbf{H}_{1}^{\top}-\frac{1}{\mu_{\text{single}}}\mathbf{H}_{2}\mathbf{H}_ {2}^{\top}\] (26)

_is invariant in time. Here \(\alpha:=\frac{\kappa_{n}m}{\mu_{\text{diag}}+C\kappa_{n}m}\)._

We note that the invariant \(\mathbf{E}\) derived here resembles the conservation laws of _hyperbolic_ dynamics that take the form \(\mathbf{E}_{\text{hyp}}:=a^{2}-b^{2}=const\) for time-dependent quantities \(a\) and \(b\). Such dynamics arise when gradient flow is applied to a loss function of the form \(\mathcal{L}(a,b):=(ab-q)^{2}\) for some \(q\). Since the solutions of such minimization problems, given by \(ab=q\), exhibit symmetry under scaling \(a\to\gamma a,b\to b/\gamma\), the value of the invariant \(\mathbf{E}_{\text{hyp}}\) uniquely specifies the hyperbola followed by the solution. In machine learning theory, hyperbolic dynamics arise as the gradient flow dynamics of linear DNNs [42], or in matrix factorization problems [3; 15]. Moreover, the end of training dynamics defined in (20) has a hyperbolic invariant given by

\[\mathbf{E}_{\text{eot}}:=\mathbf{W}^{\top}\mathbf{W}-\frac{1}{\mu_{\text{ single}}}\mathbf{H}\mathbf{H}^{\top}.\] (27)

Therefore, the final phase of training exhibits a typical behavior for the hyperbolic dynamics, which is also characteristic for the unconstrained features models [21; 38]. Namely, "scaling" \(\mathbf{W}\) and \(\mathbf{H}\) by an invertible matrix does not affect the loss value but changes the dynamic's invariant. On the other hand, minimizing the invariant \(\mathbf{E}_{\text{eot}}\) has the same effect as joint regularization of \(\mathbf{W}\) and \(\mathbf{H}\)[48].

However, we also note that our invariant \(\mathbf{E}\) provides a new, more comprehensive look at the DNNs' dynamics. While unconstrained features models effectively make assumptions on the end-of-training invariant \(\mathbf{E}_{\text{eot}}\) to derive NC [21; 38; 48], our dynamics control the value of \(\mathbf{E}_{\text{eot}}\) through the more general invariant \(\mathbf{E}\). This way we connect the properties of end-of-training hyperbolic dynamics with the previous stages of training.

### Neural Collapse

We are finally ready to state and prove our main result in Theorem 5.2 about the emergence of NC in DNNs with NTK alignment. We include the proof in Appendix B.3.

**Theorem 5.2**.: _Assume that the NTK has a block structure as defined in Assumption 3.2. Then the DNN's training dynamics are given by the system of equations in (25). Assume further that the last-layer features are centralized, i.e \(\langle h\rangle=0\), and the dynamics invariant (26) is zero, i.e., \(\mathbf{E}=\mathbb{O}\). Then the DNN's dynamics exhibit neural collapse as defined in (NC1)-(NC4)._Below we provide several important remarks and discuss the implications of this result:

**(1) Zero invariant assumption:** We assume that the invariant (26) is zero in Theorem 5.2 for simplicity and consistency with the literature. Indeed, similar assumptions arise in matrix decomposition papers, where zero invariant guarantees "balance" of the problem [3; 15]. However, our proofs in fact only require a weaker assumption that the invariant terms containing features \(\mathbf{H}\) are aligned with the weights \(\mathbf{W}^{\top}\mathbf{W}\), i.e.

\[\mathbf{W}^{\top}\mathbf{W}\propto\frac{1}{\mu_{\text{class}}}\mathbf{H}_{1} \mathbf{H}_{1}^{\top}-\frac{1}{\mu_{\text{single}}}\mathbf{H}_{2}\mathbf{H}_{2 }^{\top},\] (28)

where we have taken into account our assumption on the zero global mean \(\langle h\rangle=0\).

**(2) Necessity of the invariant assumption:** The relaxed assumption on the invariant (28) is necessary for the emergence of NC in DNNs with block-structured NTK. Indeed, NC1 implies \(\mathbf{H}_{2}=\mathbb{O}\), and NC3 implies \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\propto\mathbf{W}^{\top}\mathbf{W}\). Therefore, DNNs that do not satisfy this assumption do not display NC. Our numerical experiments described in Section 6 strongly support this insight (see Figure 2, panes a-e). Thus, we believe that the invariant derived in this work characterizes the difference between models that do and do not exhibit NC.

**(3) Zero global mean assumption:** We note that the zero global mean assumption \(\langle h\rangle=0\) in Theorem 5.2 ensures that the biases are equal to \(\mathbf{b}=\frac{1}{C}\mathbf{1}_{C}\) at the end of training. This assumption is common in the NC literature [21; 38] and is well-supported by our numerical experiments (see figures in Appendix C, pane i). Indeed, modern DNNs typically include certain normalization (e.g. through batch normalization layers) to improve numerical stability, and closeness of the global mean to zero is a by-product of such normalization.

**(4) General biases case:** Discarding the zero global mean assumption allows the biases \(\mathbf{b}\) to take an arbitrary form. In this general case, the following holds for the matrix of weights:

\[(\mathbf{W}\mathbf{W}^{\top})^{2}=\frac{m}{\mu_{\text{class}}}\Big{(}\mathbb{ I}_{C}-\alpha\mathbf{1}_{C}\mathbf{1}_{C}^{\top}+(1-\alpha C)(C\mathbf{b} \mathbf{b}^{\top}-\mathbf{b}\mathbf{1}_{C}^{\top}-\mathbf{1}_{C}\mathbf{b}^{ \top})\Big{)}.\] (29)

For optimal biases \(\mathbf{b}=\frac{1}{C}\mathbf{1}_{C}\), this reduces to the ETF structure that emerges in NC. Moreover, if biases are all equal, i.e. \(\mathbf{b}=\beta\mathbf{1}_{C}\) for some \(\beta\in\mathbb{R}\), the centralized class means still form an ETF (i.e., NC2 holds), and the weights exhibit a certain symmetric structure given by

\[\mathbf{W}\mathbf{W}^{\top}\propto\Big{(}\mathbb{I}_{C}-\gamma\mathbf{1}_{C} \mathbf{1}_{C}^{\top}\Big{)},\quad\mathbf{M}^{\top}\mathbf{M}\propto\Big{(} \mathbb{I}_{C}-\frac{1}{C}\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\Big{)},\] (30)

where \(\gamma:=\frac{1}{C}(1-|1-\beta C|\sqrt{1-\alpha C})<\frac{1}{C}\). The proof and a discussion of this result are given in Appendix B.4. In general, the angles of these two frames are different, and thus NC3 does not hold. This insight leads us to believe that normalization is an important factor in the emergence of NC.

**(5) Partial NC:** Our proofs and the discussion suggest that all the four phenomena that form NC do not have to always coincide. In particular, our proof of NC1 only requires the block-structured NTK and the invariant to be P.S.D, which is much weaker than the total set of assumptions in Theorem 5.2. Therefore, variability collapse can occur in models that do not exhibit the ETF structure of the class-means or the duality of the weights and the class means. Moreover, as shown above, NC2 can occur when NC3 does not, i.e., the ETF structure of the class means does not imply duality.

## 6 Experiments

We conducted large-scale numerical experiments to support our theory. While we only showcase our results on a single dataset-architecture pair in the main text (see Figure 2) and refer the rest to the appendix, the following discussion covers all our experiments.

Datasets and models.Following the seminal NC paper [39], we use three canonical DNN architectures: VGG [46], ResNet [24] and DenseNet [26]. Our datasets are MNIST [35], FashionMNIST [51] and CIFAR10 [34]. We choose VGG11 for MNIST and FashionMNIST, and VGG16 for CIFAR10. We add batch normalization after every layer in the VGG architecture, set dropout to zero and choose the dimensions of the two fully-connected layers on the top of the network as \(512\) and \(256\). We use ResNet20 architecture described in the original ResNet paper [24], and DenseNet40 with bottleneck layers, growth \(k=12\), and zero dropout for all the datasets.

Optimization and initialization.We use SGD with Nesterov momentum \(0.9\) and weight decay \(5\times 10^{-4}\). Every model is trained for 400 epochs with batches of size 120. To be consistent with the theory, we balance the batches exactly. We train every model with a set of initial learning rates spaced logarithmically in the range \(\eta\in[10^{-4},10^{0.25}]\). The learning rate is divided by \(10\) every 120 epochs. On top of the varying learning rates, we try three different initialization settings for every model: **(a)** LeCun normal initialization (default in Flax), **(b)** uniform initialization on \([-\sqrt{k},\sqrt{k}]\), where \(k=1/n_{\ell-1}\) for a linear layer, and \(k=1/(Kn_{\ell-1})\) for a convolutional layer, where \(K\) is the convolutional kernel size (default in PyTorch), **(c)** He normal initialization in fan_out mode.

Results.Our experiments confirm the validity of our assumptions and the emergence of NC as their result. Specifically, we make the following observations:

* While most of the DNNs that achieve high test performance exhibit NC, we are able to identify DNNs with comparable performance that do not exhibit NC (see Figure 2, panes f-h). We note that such models still achieve near-zero error on the training set in our setup.
* Comparing DNNs that do and do not exhibit NC, we find that our assumption on the invariant (see Theorem 5.2 and (28)) holds only for the models with NC (see Figure 2, panes a-e). This confirms our reasoning about the necessity of the invariant assumption for NC emergence.
* The kernels \(\Theta\) and \(\Theta^{h}\) are strongly aligned with the labels \(\mathbf{Y}^{\top}\mathbf{Y}\) in the models with the best performance, which is in agreement with the NTK alignment literature and justifies our assumption on the NTK block structure.

We include the full range of experiments along with the implementation details and the discussion of required computational resources in Appendix C. Specifically, we present a figure analogous to Figure 2 for every considered dataset-architecture pair. Additionally, we report the norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\), \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\), as well as the alignment of both the NTK \(\Theta\) and the last-layer features kernel \(\Theta^{h}\) in the end of training, to further justify our assumptions.

Figure 2: ResNet20 trained on MNIST with three initialization settings and varying learning rates (see Section 6 for details). We chose a model that exhibits NC (red lines, filled markers) and a model that does not exhibit NC (blue lines, empty markers) for each initialization. The vertical lines indicate the epoch when the training accuracy reaches 99.9% (over the last 10 batches). **a)** Frobenious norm of the invariant \(\|\mathbf{E}\|_{F}\). **b)** Alignment of the invariant terms as defined in (28). **c)** NC1: standard deviation of \(h(x_{c}^{c})\) averaged over classes. **d)** NC2: \(\|\mathbf{M}^{\top}\mathbf{M}/\|\mathbf{M}^{\top}\mathbf{M}\|_{F}-\Phi\|_{F}\), where \(\Phi\) is an ETF. **e)** NC3: \(\|\mathbf{W}^{\top}/\|\mathbf{W}\|_{F}-\mathbf{M}/\|\mathbf{M}\|_{F}\|_{F}\). The legend displays the test accuracy achieved by each model and the last-layer features kernel alignment given by \(\langle\Theta^{h}/\|\Theta^{h}\|_{F},\mathbf{Y}^{\top}\mathbf{Y}/\|\mathbf{Y} ^{\top}\mathbf{Y}\|_{F}\rangle_{F}\). The curves in panes a-e are smoothed by Savitzky–Golay filter with polynomial degree 1 over window of size \(10\). Panes **f**, **g** and **h** show the NC metrics and the test accuracy as functions of the learning rate.

Conclusions and Broad Impact

This work establishes the connection between NTK alignment and NC, and thus provides a mechanistic explanation for the emergence of NC within realistic DNNs' training dynamics. It also contributes to the underexplored line of research connecting NC and local elasticity of DNNs' training dynamics.

The primary implication of this research is that it exposes the potential to study NC through the lens of NTK alignment. Indeed, previous works on NC focus on the top-down approach (layer-peeled models) [18; 21; 38; 48], and fundamentally cannot explain how NC develops through earlier layers of a DNN and what are the effects of depth. On the other hand, NTK alignment literature focuses on the alignment of individual layers [7], and recent theoretical results even quantify the role of each hidden layer in the final alignment [37]. Therefore, we believe that the connection between NTK alignment and NC established in this work provides a conceptually new method to study NC.

Moreover, this work introduces a novel approach to facilitate theoretical analysis of DNNs' training dynamics. While most theoretical works consider the NTK in the infinite-width limit to simplify the dynamics [1; 20; 28; 49], our analysis shows that making reasonable assumptions on the empirical NTK can also lead to tractable dynamics equations and new theoretical results. Thus, we believe that the analysis of DNNs' training dynamics based on the properties of the empirical NTK is a promising approach also beyond NC research.

## 8 Limitations and Future Work

The main limitation of this work is the simplifying Assumption 3.2 on the kernel structure. While the NTK of well-trained DNNs indeed has an approximate block structure (as we discuss in detail in Section 3), the NTK values also tend to display high variance in real DNNs [22; 44]. Thus, we believe that adding stochasticity to the dynamics considered in this paper is a promising direction for the future work. Moreover, the empirical NTK exhibits so-called specialization, i.e., the kernel matrix corresponding to a certain output neurons aligns more with the labels of the corresponding class [45]. In block-structured kernels, specialization implies different values in blocks corresponding to different classes. Thus, generalizing our theory to block-structured kernels with specialization is another promising short-term research goal. In addition, our theory relies on the assumption that the dataset (or the training batch) is balanced, i.e., all the classes have the same number of samples. Accounting for the effects of non-balanced datasets within the dynamics of DNNs with block-structured NTK is another possible future work direction.

More generally, we believe that empirical observations are essential to demistify the DNNs' training dynamics, and there are still many unknown and interesting connections between seemingly unrelated empirical phenomena. Establishing new theoretical connections between such phenomena is an important objective, since it provides a more coherent picture of the deep learning theory as a whole.

[MISSING_PAGE_FAIL:11]

International Conference on Machine Learning, ICML 2017, Sydney, NSW, Australia, 6-11 August 2017_, volume 70 of _Proceedings of Machine Learning Research_, pages 854-863. PMLR, 2017.
* [13] Nello Cristianini, John Shawe-Taylor, Andre Elisseeff, and Jaz S. Kandola. On kernel-target alignment. In _Advances in Neural Information Processing Systems 14: Natural and Synthetic, NIPS 2001, December 3-8, 2001, Vancouver, British Columbia, Canada_, pages 367-373. MIT Press, 2001.
* [14] Ahmet Demirkaya, Jiasi Chen, and Samet Oymak. Exploring the role of loss functions in multiclass classification. In _54th Annual Conference on Information Sciences and Systems, CISS 2020, Princeton, NJ, USA, March 18-20, 2020_, pages 1-5. IEEE, 2020.
* [15] Simon S. Du, Wei Hu, and Jason D. Lee. Algorithmic regularization in learning deep homogeneous models: Layers are automatically balanced. In _Advances in Neural Information Processing Systems 31: Annual Conference on Neural Information Processing Systems 2018, NeurIPS 2018, December 3-8, 2018, Montreal, Canada_, pages 382-393, 2018.
* [16] Omer Elkabetz and Nadav Cohen. Continuous vs. discrete optimization of deep neural networks. In _Advances in Neural Information Processing Systems 34: Annual Conference on Neural Information Processing Systems 2021, NeurIPS 2021, December 6-14, 2021, virtual_, pages 4947-4960, 2021.
* [17] Tolga Ergen and Mert Pilanci. Revealing the structure of deep neural networks via convex duality. In _Proceedings of the 38th International Conference on Machine Learning, ICML 2021, 18-24 July 2021, Virtual Event_, volume 139 of _Proceedings of Machine Learning Research_, pages 3004-3014. PMLR, 2021.
* [18] C Fang, H He, Q Long, and WJ Su. Exploring deep neural networks via layer-peeled model: Minority collapse in imbalanced training. _Proceedings of the National Academy of Sciences of the United States of America_, 118(43), 2021.
* [19] Stanislav Fort, Gintare Karolina Dziugaite, Mansheej Paul, Sepideh Kharaghani, Daniel M. Roy, and Surya Ganguli. Deep learning versus kernel learning: an empirical study of loss landscape geometry and the time evolution of the neural tangent kernel. In _Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual_, 2020.
* [20] Mario Geiger, Arthur Jacot, Stefano Spigler, Franck Gabriel, Levent Sagun, Stephane d'Ascoli, Giulio Biroli, Clement Hongler, and Matthieu Wyart. Scaling description of generalization with number of parameters in deep learning. _Journal of Statistical Mechanics: Theory and Experiment_, 2020(2):023401, 2020.
* [21] X. Y. Han, Vardan Papyan, and David L. Donoho. Neural collapse under MSE loss: Proximity to and dynamics on the central path. In _The Tenth International Conference on Learning Representations, ICLR 2022, Virtual Event, April 25-29, 2022_. OpenReview.net, 2022.
* [22] Boris Hanin and Mihai Nica. Finite depth and width corrections to the neural tangent kernel. In _8th International Conference on Learning Representations, ICLR 2020, Addis Ababa, Ethiopia, April 26-30, 2020_. OpenReview.net, 2020.
* [23] Hangfeng He and Weijie J. Su. The local elasticity of neural networks. In _8th International Conference on Learning Representations, ICLR 2020, Addis Ababa, Ethiopia, April 26-30, 2020_. OpenReview.net, 2020.
* [24] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In _Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, CVPR 2016, Las Vegas, NV, USA, June 27-30, 2016_, pages 770-778. IEEE Computer Society, 2016.
* [25] Jonathan Heek, Anselm Levskaya, Avital Oliver, Marvin Ritter, Bertrand Rondepierre, Andreas Steiner, and Marc van Zee. Flax: A neural network library and ecosystem for JAX, 2020.
* [26] Gao Huang, Zhuang Liu, Laurens van der Maaten, and Kilian Q. Weinberger. Densely connected convolutional networks. In _Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, CVPR 2017, Honolulu, HI, USA, July 21-26, 2017_, pages 2261-2269. IEEE Computer Society, 2017.

* [27] Jiaoyang Huang and Horng-Tzer Yau. Dynamics of deep neural networks and neural tangent hierarchy. In _Proceedings of the 37th International Conference on Machine Learning, ICML 2020, 13-18 July 2020, Virtual Event_, volume 119 of _Proceedings of Machine Learning Research_, pages 4542-4551. PMLR, 2020.
* A neural tangent kernel perspective. In _Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual_, 2020.
* [29] Like Hui and Mikhail Belkin. Evaluation of neural architectures trained with square loss vs cross-entropy in classification tasks. In _9th International Conference on Learning Representations, ICLR 2021, Virtual Event, Austria, May 3-7, 2021_. OpenReview.net, 2021.
* [30] Arthur Jacot, Clement Hongler, and Franck Gabriel. Neural tangent kernel: Convergence and generalization in neural networks. In _Advances in Neural Information Processing Systems 31: Annual Conference on Neural Information Processing Systems 2018, NeurIPS 2018, December 3-8, 2018, Montreal, Canada_, pages 8580-8589, 2018.
* [31] Yiding Jiang, Dilip Krishnan, Hossein Mobahi, and Samy Bengio. Predicting the generalization gap in deep networks with margin distributions. In _7th International Conference on Learning Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019_. OpenReview.net, 2019.
* ICANN 2020
- 29th International Conference on Artificial Neural Networks, Bratislava, Slovakia, September 15-18, 2020, Proceedings, Part II_, volume 12397 of _Lecture Notes in Computer Science_, pages 168-179. Springer, 2020.
* [33] Vignesh Kothapalli, Ebrahim Rasromani, and Vasudev Awatramani. Neural collapse: A review on modelling principles and generalization. _arXiv preprint arXiv:2206.04041_, 2022.
* [34] Alex Krizhevsky et al. Learning multiple layers of features from tiny images, 2009.
* [35] Yann LeCun, Corinna Cortes, and CJ Burges. Mnist handwritten digit database. _ATT Labs [Online]. Available: http://yann.lecun.com/exdb/mnist_, 2, 2010.
* [36] Jaehoon Lee, Samuel Schoenholz, Jeffrey Pennington, Ben Adlam, Lechao Xiao, Roman Novak, and Jascha Sohl-Dickstein. Finite versus infinite neural networks: an empirical study. _Advances in Neural Information Processing Systems_, 33:15156-15172, 2020.
* [37] Yizhang Lou, Chris E Mingard, and Soufiane Hayou. Feature learning and signal propagation in deep neural networks. In _International Conference on Machine Learning_, pages 14248-14282. PMLR, 2022.
* [38] Dustin G Mixon, Hans Parshall, and Jianzong Pi. Neural collapse with unconstrained features. _arXiv preprint arXiv:2011.11619_, 2020.
* [39] Vardan Papyan, XY Han, and David L Donoho. Prevalence of neural collapse during the terminal phase of deep learning training. _Proceedings of the National Academy of Sciences_, 117(40):24652-24663, 2020.
* [40] Federico Pernici, Matteo Bruni, Claudio Baecchi, and Alberto Del Bimbo. Fix your features: Stationary and maximally discriminative embeddings using regular polytope (fixed classifier) networks. _arXiv preprint arXiv:1902.10441_, 2019.
* [41] Tomaso A. Poggio and Qianli Liao. Explicit regularization and implicit bias in deep network classifiers trained with the square loss. _arXiv preprint arXiv:2101.00072_, 2021.
* [42] Andrew M Saxe, James L McClelland, and Surya Ganguli. Exact solutions to the nonlinear dynamics of learning in deep linear neural networks. _arXiv preprint arXiv:1312.6120_, 2013.
* [43] Mariia Seleznova and Gitta Kutyniok. Analyzing finite neural networks: Can we trust neural tangent kernel theory? In _Mathematical and Scientific Machine Learning, 16-19 August 2021, Virtual Conference /Lausanne, Switzerland_, volume 145 of _Proceedings of Machine Learning Research_, pages 868-895. PMLR, 2021.
* [44] Mariia Seleznova and Gitta Kutyniok. Neural tangent kernel beyond the infinite-width limit: Effects of depth and initialization. In _International Conference on Machine Learning, ICML 2022, 17-23 July 2022, Baltimore, Maryland, USA_, volume 162 of _Proceedings of Machine Learning Research_, pages 19522-19560. PMLR, 2022.

* [45] Haozhe Shan and Blake Bordelon. A theory of neural tangent kernel alignment and its influence on training. _arXiv preprint arXiv:2105.14301_, 2021.
* [46] Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image recognition. In _3rd International Conference on Learning Representations, ICLR 2015, San Diego, CA, USA, May 7-9, 2015, Conference Track Proceedings_, 2015.
* [47] Yifan Sun, Changmao Cheng, Yuhan Zhang, Chi Zhang, Liang Zheng, Zhongdao Wang, and Yichen Wei. Circle loss: A unified perspective of pair similarity optimization. In _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pages 6398-6407, 2020.
* [48] Tom Tirer and Joan Bruna. Extended unconstrained features model for exploring deep neural collapse. In _Proceedings of the 39th International Conference on Machine Learning_, volume 162, pages 21478-21505, 2022.
* [49] Tom Tirer, Joan Bruna, and Raja Giryes. Kernel-based smoothness analysis of residual networks. In _Mathematical and Scientific Machine Learning_, volume 145, pages 921-954, 2021.
* [50] Tom Tirer, Haoxiang Huang, and Jonathan Niles-Weed. Perturbation analysis of neural collapse. _arXiv preprint arXiv:2210.16658_, 2022.
* [51] Han Xiao, Kashif Rasul, and Roland Vollgraf. Fashion-mnist: a novel image dataset for benchmarking machine learning algorithms. _arXiv preprint arXiv:1708.07747_, 2017.
* [52] Greg Yang. Tensor programs II: neural tangent kernel for any architecture. _arXiv preprint arXiv:2006.14548_, 2020.
* [53] Jiayao Zhang, Hua Wang, and Weijie J. Su. Imitating deep learning dynamics via locally elastic stochastic differential equations. In _Advances in Neural Information Processing Systems 34: Annual Conference on Neural Information Processing Systems 2021, NeurIPS 2021, December 6-14, 2021, virtual_, pages 6392-6403, 2021.

Related works

NC with MSE loss.NC was first introduced for DNNs with cross-entropy (CE) loss, which is commonly used in classification problems [39]. Since then, numerous papers discussed NC with MSE loss, which provides more opportunities for theoretical analysis, especially after the MSE loss was shown to perform on par with CE loss for classification tasks [14; 29].

Most previous works on MSE-NC adopt the so-called unconstrained features model [21; 38; 48]. In this model, the last-layer features \(\mathbf{H}\) are free variables that are directly optimized during training, i.e., the features do not depend on the input data or the DNN's trainable parameters. Fang _et al._[18] also introduced a generalization of this approach called \(N\)-layer-peeled model, where features of the \(N\)-th-to-last layer are free variables, and studied the 1-layer-peeled model (equivalent to the unconstrained features model) with CE loss as a special case.

One line of research on MSE-NC in unconstrained/layer-peeled models aims to derive global minimizers of optimization problems associated with DNNs [17; 18; 48]. In particular, Tirer _et al._[48] showed that global minimizers of the MSE loss with regularization of both \(\mathbf{H}\) and \(\mathbf{W}\) exhibit NC. Moreover, Ergen & Pilanci [17] showed that NC emerges in global minimizers of optimization problems with general convex loss in the context of the 2-layer-peeled model. In comparison to our work, these contributions do not consider the training dynamics of DNNs, i.e., they do not discuss whether and how the model converges to the optimal solution.

Another line of research on MSE-NC explicitly considers the dynamics of the unconstrained features models [21; 38]. In particular, Han _et al._[21] considered the gradient flow of the unconstrained renormalized features along the "central path", where the classifier is assumed to take the form of the optimal least squares (OLS) solution for given features \(\mathbf{H}\). Under this assumption, they derive a closed-form dynamics that implies NC. While they empirically show that DNNs are close to the central path in certain scenarios, they do not provide a theoretical justification for this assumption. The dynamics considered in their work is also distinct from the standard gradient flow dynamics of DNNs considered in our work. On the other hand, an earlier work by Mixon _et al._[38] considered the gradient flow dynamics of the unconstrained features model, which is equivalent (up to rescaling) to the end-of-training dynamics (20) that we discuss in Sections 4.2 and 5.2. Their work relies on the linearization of these dynamics to derive a certain subspace, which appears to be an invariant subspace of the non-linearized unconstrained features model dynamics. Then they show that minimizers of the loss from this subspace exhibit NC. We note that, in terms of our paper, assuming that the unconstrained features model dynamics follow a certain invariant subspace means making assumptions on the end-of-training invariant (27). In comparison to these works, we make a step towards realistic DNNs dynamics by considering the standard gradient flow of DNNs simplified by Assumption 3.2 on the NTK structure, which is supported by the extensive research on NTK alignment [7; 9; 44; 45]. In our setting, the NTK captures the dependence of the features on the training data, which is missing in the unconstrained features model. Moreover, while other works focus only on the dynamics that converge to NC, we show that DNNs with MSE loss may not exhibit NC in certain settings, and the invariant of the dynamics (26) characterizes the difference between models that do and do not converge to NC.

Notably, works by Poggio & Liao [41] adopt a model different from the unconstrained features model to analyze gradient flow of DNNs. They consider the dynamics of homogeneous DNNs, in particular ReLU networks without biases, with normalization of the weights matrices and weights regularization. The goal of weights normalization in their model is to imitate the effects of batch normalization in DNNs training. In this model, certain fixed points of the gradient flow exhibit NC. While the approach taken in their work captures the dependence of the features on the data and the DNN's parameters, it fundamentally relies on the homogeneity of the DNN's output function. However, most DNNs that exhibit NC in practice are not homogeneous due to biases and skip-connections.

NC and local elasticity.A recent extensive survey of NC literature [33] discussed local elasticity as a possible mechanism behind the emergence of NC, which has not been sufficiently explored up until now. One of the few works in this research direction is by Zhang _et al._[53], who analyzed the so-called locally-elastic stochastic differential equations (SDEs) and showed the emergence of NC in their solutions. They model local elasticity of the dynamics through an effect matrix, which has only two distinct values: a larger intra-class value and a smaller inter-class value. These values characterize how much influence samples from one class have on samples from other classes in the SDEs. While the aim of their work is to imitate DNNs' training dynamics through SDEs, the authorsdo not provide any explicit connection between their dynamics and real gradient flow dynamics of DNNs. On the other hand, we derive our dynamics directly from the gradient flow equations and connect local elasticity to the NTK, which is a well-studied object in the deep learning theory.

Another work by Tirer _et al._[50] provided a perturbation analysis of NC to study "inexact collapse". They considered a minimization problem with MSE loss, regularization of \(\mathbf{H}\) and \(\mathbf{W}\), and additional regularization of the distance between \(\mathbf{H}\) and a given matrix of initial features. In the "near-collapse" setting, i.e., when the initial features are already close to collapse, they showed that the optimal features can be obtained from the initial features by a certain linear transformation with a block structure, where the intra-class effects are stronger than the inter-class ones. While this transformation matrix resembles the block-structured effect matrices in locally-elastic training dynamics, it does not originate from the gradient flow dynamics of DNNs and is not related to the NTK.

## Appendix B Proofs

### Proof of Theorem 4.1

Proof of Theorem 4.1.: We will first derive the dynamics of \(h_{s}(x_{i}^{c})\), which is the \(s\)-th component of the last-layer features vector on sample \(x_{i}^{c}\in X\) from class \(c\in[C]\). Let \(\mathbf{w}\in\mathbb{R}^{P}\) be the trainable parameters of the network stretched into a single vector. Then its gradient flow dynamics is given by

\[\dot{\mathbf{w}}=-\nabla_{\mathbf{w}}\mathcal{L}(f)=-\sum_{k=1}^{C}\sum_{i^{ \prime}=1}^{N}(f(X)_{ki^{\prime}}-\mathbf{Y}_{ki^{\prime}})\nabla_{\mathbf{w} }f(X)_{ki^{\prime}},\] (31)

where \(\nabla_{\mathbf{w}}f(X)_{ki^{\prime}}\in\mathbb{R}^{P}\) is the component of the DNN's Jacobian corresponding to output neuron \(k\) and the input sample \(x_{i^{\prime}}^{c^{\prime}}\). Since entries of \(f(X)\) can be written as

\[f(X)_{ki^{\prime}}=\sum_{s^{\prime}=1}^{n}\mathbf{W}_{ks^{\prime}}\mathbf{H}_ {s^{\prime}i^{\prime}}+\mathbf{b}_{k}=\sum_{s^{\prime}=1}^{n}\mathbf{W}_{ks^{ \prime}}h_{s^{\prime}}(x_{i^{\prime}}^{c^{\prime}})+\mathbf{b}_{k},\] (32)

we obtain

\[\dot{\mathbf{w}}=-\sum_{k=1}^{C}\sum_{i^{\prime}=1}^{N}\sum_{s^{\prime}=1}^{n} (f(X)_{ki^{\prime}}-\mathbf{Y}_{ki^{\prime}})\nabla_{\mathbf{w}}(\mathbf{W}_{ ks^{\prime}}h_{s^{\prime}}(x_{i^{\prime}}^{c^{\prime}})+\mathbf{b}_{k}).\] (33)

By chain rule, we have \(\dot{h}_{s}(x_{i}^{c})=\langle\nabla_{\mathbf{w}}h_{s}(x_{i}^{c}),\dot{ \mathbf{w}}\rangle\). Then, taking into account that

\[\langle\nabla_{\mathbf{w}}h_{s}(x_{i}^{c}),\nabla_{\mathbf{w}}(\mathbf{W}_{ks ^{\prime}}h_{s^{\prime}}(x_{i^{\prime}}^{c^{\prime}})+\mathbf{b}_{k})\rangle= \mathbf{W}_{ks^{\prime}}\langle\nabla_{\mathbf{w}}h_{s}(x_{i}^{c}),\nabla_{ \mathbf{w}}h_{s^{\prime}}(x_{i^{\prime}}^{c^{\prime}})\rangle,\] (34)

and that \(\langle\nabla_{\mathbf{w}}h_{s}(x_{i}^{c}),\nabla_{\mathbf{w}}h_{s^{\prime}}(x _{i^{\prime}}^{c^{\prime}})\rangle=\Theta_{s,s^{\prime}}^{h}(x_{i}^{c},x_{i^{ \prime}}^{c^{\prime}})\) by definition of \(\Theta^{h}\), we have

\[\dot{h}_{s}(x_{i}^{c})=-\sum_{k=1}^{C}\sum_{i^{\prime}=1}^{N}\sum_{s^{\prime}= 1}^{n}(f(X)_{ki^{\prime}}-\mathbf{Y}_{ki^{\prime}})\mathbf{W}_{ks^{\prime}} \Theta_{s,s^{\prime}}^{h}(x_{i}^{c},x_{i^{\prime}}^{c^{\prime}}).\] (35)

Now by Assumption 3.2 we have \(\Theta_{s,s^{\prime}}^{h}=0\) if \(s\neq s^{\prime}\). Therefore, the above expression simplifies to

\[\dot{h}_{s}(x_{i}^{c}) =-\sum_{i^{\prime}=1}^{N}\Theta_{s,s}^{h}(x_{i}^{c},x_{i^{\prime}} ^{c^{\prime}})\sum_{k=1}^{C}(f(X)_{ki^{\prime}}-\mathbf{Y}_{ki^{\prime}}) \mathbf{W}_{ks}\] \[=-\sum_{i^{\prime}=1}^{N}[\mathbf{W}^{\top}(\mathbf{W}\mathbf{H}+ \mathbf{b}\mathbf{1}_{N}^{\top}-\mathbf{Y})]_{si^{\prime}}\Theta_{s,s}^{h}(x_{ i}^{c},x_{i^{\prime}}^{c^{\prime}}).\]

To express \(\dot{\mathbf{H}}=\left[\dot{h}_{s}(x_{i}^{c})\right]_{s,i}\in\mathbb{R}^{n\times N}\) in matrix form, it remains to express \(\Theta_{s,s}^{h}(x_{i}^{c},x_{i^{\prime}}^{c^{\prime}})\) as the \((i^{\prime},i)\)-th entry of some matrix. We will separate the sum into three cases: 1) \(i=i^{\prime}\), 2) \(i\neq i^{\prime}\) and \(c=c^{\prime}\), and 3) \(c\neq c^{\prime}\). According to Assumption 3.2, the first case corresponds to the multiple of identity \(\kappa_{d}\mathbb{I}_{N}\). The second corresponds to the block matrix of size \(m\) with zeros on the diagonal,which can be written as \(\kappa_{c}(\mathbf{Y}^{\top}\mathbf{Y}-\mathbb{I}_{N})\). The third matrix equals to \(\kappa_{n}(\mathbf{1}_{N}\mathbf{1}_{N}^{\top}-\mathbf{Y}^{\top}\mathbf{Y})\). Therefore we can express the dynamics of \(\mathbf{H}\) as follows:

\[\dot{\mathbf{H}}= -[\mathbf{W}^{\top}(\mathbf{W}\mathbf{H}+\mathbf{b}\mathbf{1}_{N} ^{\top}-\mathbf{Y})][\kappa_{d}\mathbb{I}+\kappa_{c}(\mathbf{Y}^{\top}\mathbf{ Y}-\mathbb{I})+\kappa_{n}(\mathbf{1}_{N}\mathbf{1}_{N}^{\top}-\mathbf{Y}^{\top} \mathbf{Y})]\] \[= -(\kappa_{d}-\kappa_{c})\mathbf{W}^{\top}(\mathbf{W}\mathbf{H}+ \mathbf{b}\mathbf{1}_{N}^{\top}-\mathbf{Y})\] \[-(\kappa_{c}-\kappa_{n})\mathbf{W}^{\top}(\mathbf{W}\mathbf{H} \mathbf{Y}^{\top}\mathbf{Y}+m\mathbf{b}\mathbf{1}_{N}^{\top}-m\mathbf{Y})\] \[\qquad-\kappa_{n}\mathbf{W}^{\top}(\mathbf{W}\mathbf{H}\mathbf{1} _{N}\mathbf{1}_{N}^{\top}+N\mathbf{b}\mathbf{1}_{N}^{\top}-\frac{N}{C} \mathbf{1}_{C}\mathbf{1}_{N}^{\top}).\]

Now we notice that \(\mathbf{H}\mathbf{Y}^{\top}\mathbf{Y}/m\) is the matrix of stacked class means repeated \(m\) times each and \(\mathbf{H}\mathbf{1}_{N}\mathbf{1}_{N}^{\top}/N\) is a matrix of the global mean repeated \(N\) times. Therefore, we have

\[\mathbf{W}\mathbf{H}\mathbf{Y}^{\top}\mathbf{Y}+m\mathbf{b}\mathbf{1}_{N}^{ \top}-m\mathbf{Y}=m\mathbf{R}_{\text{class}},\]

according to the definitions of global and class-mean residuals in (18) and (17).

The expressions for the gradient flow dynamics of \(\mathbf{W}\) and \(\mathbf{b}\) follow directly from the derivatives of \(f(X)\) w.r.t. \(\mathbf{W}\) and \(\mathbf{b}\). This completes the proof. 

### Proof of Theorem 5.1

Proof of Theorem 5.1.: Recall from (23) in Section 5.1 that we have the following decomposition

\[\mathbf{H}\mathbf{Q}=\sqrt{m}[\mathbf{H}_{1},\mathbf{H}_{2}],\quad\mathbf{H}_ {1}=\frac{1}{\sqrt{m}}\mathbf{H}\mathbf{Q}_{1},\quad\mathbf{H}_{2}=\frac{1}{ \sqrt{m}}\mathbf{H}\mathbf{Q}_{2}\]

with orthogonal \(\mathbf{Q}=[\mathbf{Q}_{1},\mathbf{Q}_{2}]\in\mathbb{R}^{N\times N}\). We now artificially add \(\mathbf{Q}\mathbf{Q}^{\top}(=\mathbb{I}_{N})\) to the dynamics (19) in Theorem 4.1 and obtain

\[\begin{cases}\dot{\mathbf{H}}\mathbf{Q}=&-(\kappa_{d}-\kappa_{c})\mathbf{W}^{ \top}(\mathbf{W}\mathbf{H}\mathbf{Q}+\mathbf{b}\mathbf{1}_{N}^{\top}\mathbf{Q }-Y\mathbf{Q})\\ &-(\kappa_{c}-\kappa_{n})m\mathbf{W}^{\top}(\frac{1}{m}\mathbf{W}\mathbf{H} \mathbf{Q}\mathbf{Q}^{\top}\mathbf{Y}^{\top}\mathbf{Y}\mathbf{Q}+\mathbf{b} \mathbf{1}_{N}^{\top}\mathbf{Q}-Y\mathbf{Q})\\ &-\kappa_{n}N\mathbf{W}^{\top}(\frac{1}{N}\mathbf{W}\mathbf{H}\mathbf{Q} \mathbf{Q}^{\top}\mathbf{1}_{N}\mathbf{1}_{N}^{\top}\mathbf{Q}+\mathbf{b} \mathbf{1}_{N}^{\top}\mathbf{Q}-\frac{1}{C}\mathbf{1}_{C}\mathbf{1}_{N}^{ \top}\mathbf{Q})\\ \dot{\mathbf{W}}=&-(\mathbf{W}\mathbf{H}\mathbf{Q}+\mathbf{b}\mathbf{1}_{N}^{ \top}\mathbf{Q}-Y\mathbf{Q})\mathbf{Q}^{\top}\mathbf{H}^{\top}\\ \dot{\mathbf{b}}=&-(\mathbf{W}\mathbf{H}\mathbf{Q}+\mathbf{b}\mathbf{1}_{N}^{ \top}\mathbf{Q}-Y\mathbf{Q})\mathbf{Q}^{\top}\mathbf{1}_{N}.\end{cases}\] (36)

Let us simplify the expression. Since \(\mathbf{Q}_{1}=\frac{1}{\sqrt{m}}\mathbb{I}_{C}\otimes\mathbf{1}_{m}\) and \(\mathbf{Q}_{2}=\mathbb{I}_{C}\otimes\tilde{\mathbf{Q}}_{2}\), we have

\[\mathbf{1}_{N}^{\top}\mathbf{Q}=\sqrt{m}[\mathbf{1}_{C}^{\top},\mathbb{Q}], \quad\mathbf{Y}\mathbf{Q}=\sqrt{m}[\mathbb{I}_{C},\mathbb{Q}].\] (37)

Plugging (37) into (36), we see the dynamics can be decomposed into

\[\begin{cases}\dot{\mathbf{H}}_{1}=&-(\kappa_{d}-\kappa_{c})\mathbf{W}^{\top}( \mathbf{W}\mathbf{H}_{1}+\mathbf{b}\mathbf{1}_{C}^{\top}-\mathbb{I}_{C})\\ &-(\kappa_{c}-\kappa_{n})m\mathbf{W}^{\top}(\mathbf{W}\mathbf{H}_{1}+\mathbf{ b}\mathbf{1}_{C}^{\top}-\mathbb{I}_{C})\\ &-\kappa_{n}N\mathbf{W}^{\top}(\frac{1}{C}\mathbf{W}\mathbf{H}_{1}\mathbf{1}_{C} \mathbf{1}_{C}^{\top}+\mathbf{b}\mathbf{1}_{C}^{\top}-\frac{1}{C}\mathbf{1}_{ C}\mathbf{1}_{C}^{\top})\\ \dot{\mathbf{H}}_{2}=&-(\kappa_{d}-\kappa_{c})\mathbf{W}^{\top}\mathbf{W}\mathbf{ H}_{2}\\ \dot{\mathbf{W}}=&-m(\mathbf{W}\mathbf{H}_{1}+\mathbf{b}\mathbf{1}_{C}^{\top}- \mathbb{I}_{C})\mathbf{H}_{1}^{\top}-m\mathbf{W}\mathbf{H}_{2}\mathbf{H}_{2}^{ \top}\\ \dot{\mathbf{b}}=&-m(\mathbf{W}\mathbf{H}_{1}+\mathbf{b}\mathbf{1}_{C}^{\top}- \mathbb{I}_{C})\mathbf{1}_{C}.\end{cases}\] (38)

To further simplify (38), we define the following quantities

\[\mu_{\text{single}}:=\kappa_{d}-\kappa_{c},\quad\mu_{\text{class}}:=\mu_{\text{ single}}+m(\kappa_{c}-\kappa_{n}),\quad\mathbf{R}_{1}:=\mathbf{W}\mathbf{H}_{1}+\mathbf{b} \mathbf{1}_{C}^{\top}-\mathbb{I}_{C}.\] (39)

Notice that \(\mu_{\text{single}}\) and \(\mu_{\text{class}}\) are the two largest eigenvalues of the block-structured kernel \(\Theta_{s,s}^{h}(X)\) (see Table 1 for the eigindecomposition of a block-structured matrix), and \(\mathbf{R}_{1}\) is a matrix of the stacked class-mean residuals, which is also defined in (17). The the dynamics (38) simplifies to

\[\begin{cases}\dot{\mathbf{H}}_{1}=&-\mathbf{W}^{\top}(\mu_{\text{class}}\mathbf{R}_ {1}+\kappa_{n}N(\frac{1}{C}\mathbf{W}\mathbf{H}_{1}\mathbf{1}_{C}\mathbf{1}_{C}^{ \top}+\mathbf{b}\mathbf{1}_{C}^{\top}-\frac{1}{C}\mathbf{1}_{C}\mathbf{1}_{C}^{ \top}))\\ \dot{\mathbf{H}}_{2}=&-\mu_{\text{single}}\mathbf{W}^{\top}\mathbf{W}\mathbf{H}_{2} \\ \dot{\mathbf{W}}=&-m(\mathbf{R}_{1}\mathbf{H}_{1}^{\top}-\mathbf{W}\mathbf{H}_{2} \mathbf{H}_{2}^{\top})\\ \dot{\mathbf{b}}=&-m\mathbf{R}_{1}\mathbf{1}_{C}.\end{cases}\] (40)It remains to simplify the expression for \(\dot{\mathbf{H}}_{1}\). By using the relation

\[\frac{1}{C}\mathbf{W}\mathbf{H}_{1}\mathbf{1}_{C}\mathbf{1}_{C}^{\top}+\mathbf{b }\mathbf{1}_{C}^{\top}-\frac{1}{C}\mathbf{1}_{C}\mathbf{1}_{C}^{\top}=\frac{1} {C}\mathbf{R}_{1}\mathbf{1}_{C}\mathbf{1}_{C}^{\top},\] (41)

we can deduce that the dynamics for \(\dot{\mathbf{H}}_{1}\) in (40) can be expressed as (recalling that \(N=mC\))

\[\dot{\mathbf{H}}_{1}=-\mathbf{W}^{\top}\mathbf{R}_{1}(\mu_{\text{class}} \mathbb{I}+\kappa_{n}m\mathbf{1}_{C}\mathbf{1}_{C}^{\top}).\] (42)

We notice that \((\mathbb{I}_{C}+\frac{\kappa_{n}m}{\mu_{\text{class}}}\mathbf{1}_{C}\mathbf{1 }_{C}^{\top})^{-1}=\mathbb{I}_{C}-\alpha\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\), where \(\alpha:=\frac{\kappa_{n}m}{\mu_{\text{class}}+C\kappa_{n}m}\). Then we can derive the invariant of the training dynamics by direct computation of the time-derivative \(\dot{\mathbf{E}}\), where

\[\mathbf{E}:=\frac{1}{m}\mathbf{W}^{\top}\mathbf{W}-\frac{1}{\mu_{\text{class }}}\mathbf{H}_{1}(\mathbb{I}_{C}-\alpha\mathbf{1}_{C}\mathbf{1}_{C}^{\top}) \mathbf{H}_{1}^{\top}-\frac{1}{\mu_{\text{single}}}\mathbf{H}_{2}\mathbf{H}_ {2}^{\top}\] (43)

Since \(\dot{\mathbf{E}}=\mathbb{O}\), we get that the quantity \(\mathbf{E}\) remains constant in time. This completes the proof.

### Proof of Theorem 5.2

We divide the proof into two main parts: the first one shows the emergence of NC1, and the second one shows NC2-4.

(Nci)Following the analysis in Section 3, the dynamics eventually enters the end of training phase (see Section 4.1). Then the dynamics in Theorem 5.1 simplifies to the following form:

\[\begin{cases}\dot{\mathbf{H}}_{1}=\mathbb{O}\\ \dot{\mathbf{H}}_{2}=-\mu_{\text{single}}\mathbf{W}^{\top}\mathbf{W}\mathbf{H} _{2}\\ \dot{\mathbf{W}}=-m\mathbf{W}\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\\ \dot{\mathbf{b}}=\mathbb{O}\end{cases}\] (44)

As we note in Section 4, this dynamics is similar to the gradient flow of the unconstrained features models and is an instance of the class of hyperbolic dynamics, which is discussed in Section 5.2. During this phase the quantity

\[\tilde{\mathbf{E}}:=\mu_{\text{single}}\mathbf{W}^{\top}\mathbf{W}-m\mathbf{ H}_{2}\mathbf{H}_{2}^{\top}=m\mu_{\text{single}}(\mathbf{E}+\frac{1}{\mu_{ \text{class}}}\mathbf{H}_{1}(\mathbb{I}-\alpha\mathbf{1}_{C}\mathbf{1}_{C}^{ \top})\mathbf{H}_{1}^{\top})\] (45)

does not change in time. Hence we can decouple the dynamic using the invariant as follows:

\[\begin{cases}\dot{\mathbf{H}}_{2}=-\mu_{\text{single}}(\tilde{\mathbf{E}}+m \mathbf{H}_{2}\mathbf{H}_{2}^{\top})\mathbf{H}_{2}\\ \dot{\mathbf{W}}=-\mathbf{W}(\mu_{\text{single}}\mathbf{W}^{\top}\mathbf{W}- \tilde{\mathbf{E}})\end{cases}\] (46)

Since \(\mathbf{E}\) is p.s.d (or zero, as a special case), \(\tilde{\mathbf{E}}\) is p.s.d as well, and the eigendecomposition of the invariant is given by \(\tilde{\mathbf{E}}=\sum_{k}c_{l}v_{k}v_{k}^{\top}\) for some coefficients \(c_{k}\geq 0\) and a set of orthonormal vectors \(v_{k}\in\mathbb{R}^{n}\). Then we also have \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}=\sum_{k,l}\alpha_{kl}v_{k}v_{l}^{\top}\), where \(\alpha_{kl}\) are symmetric (i.e. \(\alpha_{kl}=\alpha_{lk}\)) and \(\alpha_{kk}\geq 0\) for all \(k=1,\ldots n\) (since \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\) is symmetric and p.s.d.). Note that coefficients \(c_{k}\) here are constant while coefficients \(\alpha_{kl}\) are time-dependent. Let us then write the dynamics for \(\alpha_{kl}\) using the dynamics of \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\):

\[(\mathbf{H}_{2}\mathbf{H}_{2}^{\top})=-\tilde{\mathbf{E}}\mathbf{H}_{2}\mathbf{ H}_{2}^{\top}-\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\tilde{\mathbf{E}}-2( \mathbf{H}_{2}\mathbf{H}_{2}^{\top})^{2}\] (47)

Then for the elements of \(\alpha\) we have:

\[\dot{\alpha}_{kl}=-\alpha_{kl}(c_{k}+c_{l})-2\sum_{j}\alpha_{kj}\alpha_{jl}\] (48)

For the diagonal elements \(\alpha_{kk}\), this gives:

\[\dot{\alpha}_{kk}=-2c_{k}\alpha_{kk}-2\sum_{j}\alpha_{kj}^{2}\] (49)Since \(c_{k}\geq 0\), \(\alpha_{kk}\geq 0\) and \(\alpha_{kj}^{2}\geq 0\), we get that

\[\alpha_{kk}\xrightarrow[t\to\infty]{}0\quad\forall k\] (50)

And, therefore, all the non-diagonal elements also tend to zero. Thus, we get that

\[\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\xrightarrow[t\to\infty]{}\mathbb{O}\] (51)

and thus

\[\mathbf{H}_{2}\xrightarrow[t\to\infty]{}\mathbb{O}\] (52)

Now we notice that from the expression for \(\mathbf{H}_{2}\) in (24) it follows that \(\mathbf{H}_{2}=\mathbb{O}\) implies variability collapse, since it means that all the feature vectors within the same class are equal. Indeed, \(\mathbf{H}^{(c)}\tilde{\mathbf{Q}}_{2}=\mathbb{O}\in\mathbb{R}^{n\times(m-1)}\) means that there is a set of \(m-1\) orthogonal vectors, which are all also orthogonal to \([h_{i}(x_{1}^{c}),\ldots,h_{i}(x_{m}^{c})]\) for any \(i=1,\ldots,n\), where \(x_{i}^{c}\) are inputs from class \(c\). However, there is only one vector (up to a constant) orthogonal to all the columns of \(\tilde{\mathbf{Q}}_{2}\) in \(\mathbb{R}^{m}\) and this vector is \(\mathbf{1}_{m}\). Therefore, \([h_{i}(x_{1}^{c}),\ldots h_{i}(x_{m}^{c})]=\gamma\mathbf{1}_{m}\) for some constant \(\gamma\) for any \(i=1,\ldots,n\). Thus, we indeed have \(h(x_{1}^{c})=\cdots=h(x_{m}^{c})\), which constitutes variability collapse within classes. 

_(NC2-4)_. Set \(\beta=\frac{1}{C}\). We first show that zero global feature mean implies \(\mathbf{b}=\beta\mathbf{1}_{C}\). At the end of training, since \(\mathbf{R}_{1}=\mathbb{O}\), we have

\[\mathbf{W}\mathbf{H}_{1}+\mathbf{b}\mathbf{1}_{C}^{\top}=\mathbb{I}_{C}\] (53)

On the other hand, zero global mean implies \(\mathbf{H}_{1}\mathbf{1}_{C}=C\langle h\rangle=\mathbb{O}\). Then multiplying (53) by \(\mathbf{1}_{C}\) on the right, we get the desired expression for the biases. Given the zero global mean, we have

\[\frac{1}{m}\mathbf{W}^{\top}\mathbf{W}-\frac{1}{\mu_{\text{class}}}\mathbf{H }_{1}\mathbf{H}_{1}^{\top}-\frac{1}{\mu_{\text{single}}}\mathbf{H}_{2}\mathbf{ H}_{2}^{\top}=\mathbf{E}-\frac{\alpha mC^{2}}{\mu_{\text{class}}} \langle h\rangle\langle h\rangle^{\top}=\mathbf{E}\] (54)

By the proof of NC1, \(\mathbf{H}_{2}\to\mathbb{O}\). Together with the assumption that \(\mathbf{E}\) is proportional to the limit of \(\mathbf{W}^{\top}\mathbf{W}\) (or zero, as a special case), we obtain

\[\mu_{\text{class}}\mathbf{W}^{\top}\mathbf{W}-m\mathbf{H}_{1}\mathbf{H}_{1}^{ \top}\to\gamma\mathbf{W}^{\top}\mathbf{W}\] (55)

for some \(\gamma\geq 0\). Note that since \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\) is p.s.d. this implies \(\tilde{\lambda}_{c}:=\mu_{\text{class}}-\gamma\geq 0\). By multiplying the left and right with appropriate factors, we have

\[\begin{cases}\mathbf{H}_{1}^{\top}(\tilde{\lambda}_{c}\mathbf{W}^{\top} \mathbf{W}-m\mathbf{H}_{1}\mathbf{H}_{1}^{\top})\mathbf{H}_{1}\to\mathbb{O}\\ \mathbf{W}(\tilde{\lambda}_{c}\mathbf{W}^{\top}\mathbf{W}-m\mathbf{H}_{1} \mathbf{H}_{1}^{\top})\mathbf{W}^{\top}\to\mathbb{O}.\end{cases}\] (56)

Consequently (according to (53))

\[\begin{cases}\tilde{\lambda}_{c}(\mathbb{I}_{C}-\beta\mathbf{1}_{C}\mathbf{1 }_{C}^{\top})^{2}-m(\mathbf{H}_{1}^{\top}\mathbf{H}_{1})^{2}\to\mathbb{O}\\ \tilde{\lambda}_{c}(\mathbf{W}\mathbf{W}^{\top})^{2}-(\mathbb{I}_{C}-\beta \mathbf{1}_{C}\mathbf{1}_{C}^{\top})^{2}\to\mathbb{O}\end{cases}\] (57)

Since both \(\mathbf{W}\mathbf{W}^{\top}\) and \(\mathbf{H}_{1}^{\top}\mathbf{H}_{1}\) are p.s.d., we have

\[\begin{cases}\mathbf{H}_{1}^{\top}\mathbf{H}_{1}\to\sqrt{\frac{\lambda_{c}}{m }}(\mathbb{I}_{C}-\beta\mathbf{1}_{C}\mathbf{1}_{C}^{\top})\\ \mathbf{W}\mathbf{W}^{\top}\to\sqrt{\frac{m}{\lambda_{c}}}(\mathbb{I}_{C}-\beta \mathbf{1}_{C}\mathbf{1}_{C}^{\top}).\end{cases}\] (58)

To establish NC2, recall that \(\mathbf{H}_{1}=\left[\langle h\rangle_{1},\ldots,\langle h\rangle_{C}\right]\) and that \(\mathbf{M}\), as a normalized version of \(\mathbf{H}_{1}\), satisfies

\[\mathbf{M}^{\top}\mathbf{M}\to\frac{1}{1-\beta}(\mathbb{I}_{C}-\beta\mathbf{1 }_{C}\mathbf{1}_{C}^{\top})=\frac{C}{C-1}(\mathbb{I}_{C}-\frac{1}{C}\mathbf{1 }_{C}\mathbf{1}_{C}^{\top}).\]

To establish NC3, note that from (55) and (58) together, it follows that the limits of \(\mathbf{M}\) and \(\mathbf{W}^{\top}\) only differ by a constant multiplier.

To establish NC4, note that using NC3 we can write

\[\operatorname*{argmax}_{c}\left(\mathbf{W}h(x)+\mathbf{b}\right)_{c} =\operatorname*{argmax}_{c}\left(\mathbf{W}h(x)\right)_{c} (\mathbf{b}=\beta\mathbf{1}_{C})\] \[\to\operatorname*{argmax}_{c}\left(\mathbf{M}^{\top}h(x)\right)_{c} (\mathbf{NC3})\] \[=\operatorname*{argmin}_{c}\|h(x)-\langle h\rangle_{c}\|_{2}.\]

This completes the proof.

### General biases case

Proof.: As in the proof of Theorem 5.2, at the end of training we have \(\mathbf{W}\mathbf{H}_{1}+\mathbf{b}\mathbf{1}_{C}^{\top}=\mathbb{I}_{C}\). Moreover, since \(\mathbf{E}=\mathbb{O}\) and \(\mathbf{H}_{2}\to\mathbb{O}\), we have

\[\frac{1}{m}\mathbf{W}^{\top}\mathbf{W}-\frac{1}{\mu_{\text{class}}}\mathbf{H}_{ 1}(\mathbb{I}-\alpha\mathbf{1}_{C}\mathbf{1}_{C}^{\top})\mathbf{H}_{1}^{\top} \to\mathbb{O}.\] (59)

Multyplying the above expression to the left by \(\mathbf{W}\) and to the right by \(\mathbf{W}^{\top}\), we obtain the general expression (29) for the matrix \((\mathbf{W}\mathbf{W}^{\top})^{2}\) mentioned in the main text:

\[(\mathbf{W}\mathbf{W}^{\top})^{2}\to\frac{m}{\mu_{\text{class}}}\Big{(} \mathbb{I}_{C}-\alpha\mathbf{1}_{C}\mathbf{1}_{C}^{\top}+(1-\alpha C)(C \mathbf{b}\mathbf{b}^{\top}-\mathbf{b}\mathbf{1}_{C}^{\top}-\mathbf{1}_{C} \mathbf{b}^{\top})\Big{)}.\] (60)

This expression implies that the rows of the weights matrix may have varying separation angles in the general biases case, i.e., there is no symmetric structure is general. However, for constant biases \(\mathbf{b}=\beta\mathbf{1}_{C}\), the above expression simplifies to

\[(\mathbf{W}\mathbf{W}^{\top})^{2}\to\frac{m}{\mu_{\text{class}}}\Big{(} \mathbb{I}_{C}-\frac{1}{C}\big{(}1-(1-\alpha C)(1-\beta C)^{2}\big{)}\mathbf{1 }_{C}\mathbf{1}_{C}^{\top}\Big{)}.\] (61)

Since \(\alpha<1/C\) and \((1-\beta C)^{2}\geq 0\), we have that \((1-(1-\alpha C)(1-\beta C)^{2})/C\leq 1/C\). Therefore, the RHS of (61) is always p.s.d. and has a unique p.s.d square root proportional to \(\mathbb{I}_{C}-\gamma\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\) for some constant \(\gamma<1/C\). Denote \(\rho:=(1-(1-\alpha C)(1-\beta C)^{2})/C\), then we have \(\gamma=(1-\sqrt{1-C\rho})/C\). Note that \(\rho<1/C\) ensures that \(\gamma\) is well defined. Then the configuration of the final weights is given by

\[\mathbf{W}\mathbf{W}^{\top}\to\sqrt{\frac{m}{\mu_{\text{class}}}}\Big{(} \mathbb{I}_{C}-\gamma\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\Big{)}.\] (62)

This means that the norms of all the weights rows are still equal, as in NC2. However, since \(\gamma<1/C\) if \(\beta\neq 1/C\), the angle between these rows is smaller than in the ETF structure.

We can derive the configuration of the class means similarly by multtyplying (59) to the left by \(\mathbf{H}_{1}^{\top}\) and to the right by \(\mathbf{H}_{1}\). In the general biases case, we get

\[\mathbf{H}_{1}^{\top}\mathbf{H}_{1}(\mathbb{I}_{C}-\alpha\mathbf{1}_{C} \mathbf{1}_{C}^{\top})\mathbf{H}_{1}^{\top}\mathbf{H}_{1}\to\frac{\mu_{\text {class}}}{m}\Big{(}\mathbb{I}_{C}-\mathbf{b}\mathbf{1}_{C}^{\top}-\mathbf{1}_ {C}\mathbf{b}^{\top}+\|\mathbf{b}\|_{2}^{2}\mathbf{1}_{C}\mathbf{1}_{C}^{\top }\Big{)}.\] (63)

As with the weights, we see that this is not a symmetric structure in general. Thus, NC2 does not hold in the general biases case. However, for the constant biases \(\mathbf{b}=\beta\mathbf{1}_{C}\), the above expression simplifies to

\[\mathbf{H}_{1}^{\top}\mathbf{H}_{1}(\mathbb{I}_{C}-\alpha\mathbf{1}_{C} \mathbf{1}_{C}^{\top})\mathbf{H}_{1}^{\top}\mathbf{H}_{1}\to\frac{\mu_{\text {class}}}{m}(\mathbb{I}_{C}-\beta\mathbf{1}_{C}\mathbf{1}_{C}^{\top})^{2}.\] (64)

Analogously to the previous derivations, we get that the unique p.s.d. square root of the RHS is given by \(\mathbb{I}_{C}-\tilde{\rho}\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\), where \(\tilde{\rho}:=(1-|1-\beta C|)/C<1/C\) for \(\beta\neq 1/C\). On the other hand, the unique p.s.d root of \(\mathbb{I}-\alpha\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\) is given by \(\mathbb{I}_{C}-\phi\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\), where \(\phi:=(1-\sqrt{1-\alpha C})/C\). Thus, we have the following

\[\sqrt{\frac{m}{\mu_{\text{class}}}}\mathbf{H}_{1}^{\top}\mathbf{H}_{1}( \mathbb{I}_{C}-\phi\mathbf{1}_{C}\mathbf{1}_{C}^{\top})\to\mathbb{I}_{C}- \tilde{\rho}\mathbf{1}_{C}\mathbf{1}_{C}^{\top}.\] (65)

Therefore, the structure of the last-layer features class means is given by

\[\mathbf{H}_{1}^{\top}\mathbf{H}_{1}\to\sqrt{\frac{\mu_{\text{class}}}{m}}\Big{(} \mathbb{I}_{C}-\tilde{\rho}\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\Big{)}\Big{(} \mathbb{I}_{C}-\frac{\phi}{1+\phi C}\mathbf{1}_{C}\mathbf{1}_{C}\mathbf{1}_{C}^{ \top}\Big{)}=\sqrt{\frac{\mu_{\text{class}}}{m}}\Big{(}\mathbb{I}_{C}-\theta \mathbf{1}_{C}\mathbf{1}_{C}^{\top}\Big{)},\] (66)

where \(\theta:=\tilde{\rho}+\phi/(1+\phi C)-C\tilde{\rho}\phi/(1+\phi C)<1/C\) for \(\beta\neq 1/C\). Thus, similarly to the classifier weights \(\mathbf{W}\), the last-layer features class means form a symmetric structure with equal lengths and a separation angle smaller than in the ETF. However, the centralized class means given by \(\mathbf{M}=\mathbf{H}_{1}(\mathbb{I}_{C}-\mathbf{1}_{C}\mathbf{1}_{C}^{\top}/C)\) still form the ETF structure:

\[\mathbf{M}^{\top}\mathbf{M}\to\sqrt{\frac{\mu_{\text{class}}}{m}}\Big{(} \mathbb{I}_{C}-\frac{1}{C}\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\Big{)}.\] (67)

This holds since the component proportional to \(\mathbf{1}_{C}\mathbf{1}_{C}^{\top}\) on the RHS of equation (66) lies in the kernel of the ETF matrix \((\mathbb{I}_{C}-\mathbf{1}_{C}\mathbf{1}_{C}^{\top}/C)\). Thus, we conclude that NC2 holds in case of equal biases, while NC3 does not.

[MISSING_PAGE_FAIL:21]

gradient with respect to numerous parameters of a DNN. Additionally, the graphs in panes f-h of the same figures take around 1.5 hours for each learning rate value for ResNet20, 3 hours for DenseNet40, and 4 hours for VGG11 and VGG16, which adds up to approximately 1350 computational hours.

ResultsWe include experiments on the following architecture-dataset pairs:

* Figure 3: VGG11 trained on MNIST
* Figure 4: VGG11 trained on FashionMNIST
* Figure 5: VGG16 trained on CIFAR10
* Figure 6: ResNet20 trained on MNIST
* Figure 7: ResNet20 trained on FashionMNIST
* Figure 8: ResNet20 trained on CIFAR10
* Figure 9: DenseNet40 trained on MNIST
* Figure 10: DenseNet40 trained on FashionMNIST
* Figure 11: DenseNet40 trained on CIFAR10

The experiments setup is described in Section 6. Panes a-h of Figures 3, 4, 5, 6, 7, 8, 9, 10, 11 are analogous to the same panes of Figure 2. We include additional pane i here, which displays the norms of the invariant terms corresponding to the feature matrix components \(\mathbf{H}_{1}\) and \(\mathbf{H}_{2}\), and the global features mean \(\langle h\rangle\) at the end of training. One can see that the global features mean is relatively small in comparison with the class-means in every setup, and the "variance" term \(\mathbf{H}_{2}\) is small for models that exhibit NC. We also add pane j, which displays the alignment of kernels \(\Theta\) and \(\Theta^{h}\) for every model at the end of training. One can see that the kernel alignments is typically stronger in models that exhibit NC.

### Additional examples of the NTK block structure

We include the following additional illustrative figures (analogous to Figure 1 in the main text) that show the NTK block structure in dataset-architecture pairs covered in our experiments:

* Figure 13: VGG11 trained on MNIST
* Figure 14: VGG11 trained on FashionMNIST
* Figure 15: VGG16 trained on CIFAR10
* Figure 16: ResNet20 trained on FashionMNIST
* Figure 17: ResNet20 trained on CIFAR10
* Figure 18: DenseNet40 trained on MNIST
* Figure 19: DenseNet40 trained on FashionMNIST
* Figure 11: DenseNet40 trained on CIFAR10

Overall, the block structure pattern is visible in the traced kernels in all the figures. As expected, the block structure is more pronounced in the kernels where the final alignment values are higher. While the norms of the "non-diagonal" components of the kernels are generally smaller than the "diagonal" components in panes c) and d), we notice that there is a large variability in the norms of the "diagonal" components in some settings. This means that different neurons of the penultimate layer and different classification heads may contribute to the kernel unequally in some settings. Moreover, certain "non-diagonal" components of the last-layer kernel may have non-negligible effect in some settings. We discuss how one could generalize our analysis to account for these properties of the NTK in Appendix D.

### Preliminary experiments with CE loss

While CE loss is a common choice for training DNN classifiers, our theoretical analysis and the experimental results only cover DNNs trained with MSE loss. For completeness, we provide experimental results for ResNet20 trained on MNIST with CE loss in Figure 12. One can see that smaller invariant norm and higher invariant alignment correlate with NC in the figure. However, DNNs trained with CE loss overall reach better NC metrics but have much larger norm of the invariant in comparison with DNNs trained with MSE loss.

## Appendix D Relaxation of the NTK Block-Structure Assumption

In this section, we first derive the dynamics equations of DNNs with a general block structure assumption on the last-layer kernel \(\Theta^{h}\) (analogous to the equations presented in Theorem 4.1 and Theorem 5.1). Then we discuss a possible relaxation of Assumption 3.2, under which our main result regarding NC in Theorem 5.2 still holds.

### Dynamics under General Block Structure Assumption

We first formulate the most general form of the block structure assumption on \(\Theta^{h}\) as follows:

**Assumption D.1**.: _Assume that \(\Theta^{h}:\mathcal{X}\times\mathcal{X}\rightarrow\mathbb{R}^{n\times n}\) has the following block structure_

\[\Theta^{h}(x,x)=\mathbf{A}_{d}+\mathbf{A}_{c}+\mathbf{A}_{n},\quad\Theta^{h}( x_{i}^{c},x_{j}^{c})=\mathbf{A}_{c}+\mathbf{A}_{n},\quad\Theta^{h}(x_{i}^{c},x_{j}^ {c^{\prime}})=\mathbf{A}_{n},\] (71)

_where \(\mathbf{A}_{d,c,n}\in\mathbb{R}^{n\times n}\) are arbitrary p.s.d. matrices. Here \(x_{i}^{c}\) and \(x_{j}^{c}\) are two distinct inputs from the same class, and \(x_{j}^{c^{\prime}}\) is an input from class \(c^{\prime}\neq c\)._

This assumption means that every kernel matrix \(\Theta^{h}_{k,s}(X),k,s\in[1,n]\) still has at most three distinct values, corresponding to the inter-class, intra-class, and the diagonal values of the kernel. However, these values are arbitrary and may depend on the choice of \(k,s\in[1,n]\).

Under the general block structure assumption, the gradient flow dynamics of DNNs with MSE loss takes the following form:

\[\begin{cases}\dot{\mathbf{H}}=&-\mathbf{A}_{d}\mathbf{W}^{\top}\mathbf{R}+m \mathbf{A}_{c}\mathbf{W}^{\top}\mathbf{R}_{\text{class}}+N\mathbf{A}_{n}\mathbf{ W}^{\top}\mathbf{R}_{\text{global}}\\ \dot{\mathbf{W}}=&-\mathbf{R}\mathbf{H}^{\top}\\ \dot{\mathbf{b}}=&-\mathbf{R}_{\text{global}}\mathbf{1}_{N}.\end{cases}\] (72)

This is the generalized version of the dynamics presented in Theorem 4.1. Consequently, the decomposed dynamics presented in Theorem 5.1 takes the following form under the general block structure assumption:

\[\begin{cases}\dot{\mathbf{H}}_{1}&=-(\mathbf{A}_{d}+m\mathbf{A}_{c})\mathbf{W }^{\top}\mathbf{R}_{1}-m\mathbf{A}_{n}\mathbf{W}^{\top}\mathbf{R}_{1}\mathbf{ 1}_{C}\mathbf{1}_{C}^{\top}\\ \dot{\mathbf{H}}_{2}&=-\mathbf{A}_{d}\mathbf{W}^{\top}\mathbf{W}\mathbf{H}_{2} \\ \dot{\mathbf{W}}&=-m(\mathbf{R}_{1}\mathbf{H}_{1}^{\top}+\mathbf{W}\mathbf{H}_{ 2}\mathbf{H}_{2}^{\top})\\ \dot{\mathbf{b}}&=-m\mathbf{R}_{1}\mathbf{1}_{C}.\end{cases}\] (73)

The derivation of the above dynamics equations are identical to the proofs of Theorem 4.1 and Theorem 5.1 presented in Appendix B.

Rotation invarianceWe notice that the dynamics of \((\mathbf{W},\mathbf{H})\) in (72) has to be rotation invariant, i.e., the equations should not be affected by a change of variables \(\mathbf{W}\rightarrow\mathbf{W}\mathbf{Q}\), \(\mathbf{H}\rightarrow\mathbf{Q}^{\top}\mathbf{H}\) for any orthogonal matrix \(\mathbf{Q}\). This holds since the loss function only depends on the product \(\mathbf{W}\mathbf{H}\), which does not change under rotation. This requirement puts conditions on the behavior of \(\mathbf{A}_{d,c,n}\) under rotation. Indeed, assume that the rotation \(\mathbf{W}\rightarrow\mathbf{W}\mathbf{Q}\), \(\mathbf{H}\rightarrow\mathbf{Q}^{\top}\mathbf{H}\) for some \(\mathbf{Q}\) corresponds to the following change of the kernel:

\[\mathbf{A}_{d,c,n}\rightarrow\tilde{\mathbf{A}}_{d,c,n}(\mathbf{Q}),\] (74)

then the rotation invariance of the dynamics implies the following equality for any \(\mathbf{Q}\):

\[\mathbf{Q}\tilde{\mathbf{A}}_{d}(\mathbf{Q})\mathbf{Q}^{\top} \mathbf{W}^{\top}\mathbf{R}+m\mathbf{Q}\tilde{\mathbf{A}}_{c}(\mathbf{Q}) \mathbf{Q}^{\top}\mathbf{W}^{\top}\mathbf{R}_{\text{class}}+N\mathbf{Q} \tilde{\mathbf{A}}_{n}(\mathbf{Q})\mathbf{Q}^{\top}\mathbf{W}^{\top}\mathbf{R }_{\text{global}}\] (75) \[=\mathbf{A}_{d}\mathbf{W}^{\top}\mathbf{R}+m\mathbf{A}_{c}\mathbf{ W}^{\top}\mathbf{R}_{\text{class}}+N\mathbf{A}_{n}\mathbf{W}^{\top}\mathbf{R}_{\text{ global}}.\] (76)

These equations are satisfied trivially with our initial assumption, where \(\mathbf{A}_{d,c,n}=\tilde{\mathbf{A}}_{d,c,n}(\mathbf{Q})\propto\mathbb{I}_{n}\). However, as we can see, any generalized assumption should specify the behavior of the kernel under rotation, and satisfy the above equation.

For general \(\mathbf{A}_{d,c,n}\), the following behavior under rotation trivially satisfies the above condition: \(\tilde{\mathbf{A}}_{d,c,n}(\mathbf{Q})=\mathbf{Q}^{\top}\mathbf{A}_{d,c,n} \mathbf{Q}\). This behaviour of the kernel under rotation is intuitive, since it implies that the gradients of the last-layer features \(h\) are rotated in the same way as the features. However, we note that gradients of parametrized functions do not in general behave this way, since the rotation of the function has to be realized by a certain change of parameters. Consider, for instance, a one-hidden-layer linear network with weights \(\mathbf{V}\) in the first layer. Then we have \(\mathbf{H}=\mathbf{V}X\), and a rotation \(\mathbf{H}\to\mathbf{Q}^{\top}\mathbf{H}\) corresponds to the change of parameters \(\mathbf{V}\to\mathbf{Q}^{\top}\mathbf{V}\). In this case, the kernel does not change under rotation, i.e., \(\tilde{\mathbf{A}}_{d,c,n}(\mathbf{Q})=\mathbf{A}_{d,c,n}\).

Dynamics invariantWe note that the dynamics in 73 does not in general have an invariant analogous to the one we identified in Theorem 5.1. Indeed, if we define a quantity \(\mathbf{E}:=\mathbf{W}^{\top}\mathbf{W}-c_{1}\mathbf{H}_{1}\mathbf{H}_{1}^{ \top}-c_{2}\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\) for some constants \(c_{1,2}\in\mathbb{R}\), and additionally assume centered global means \(\mathbf{H}_{1}\mathbf{1}_{C}=0\), we get the following expression for the derivative of \(\mathbf{E}\):

\[\dot{\mathbf{E}} =\Big{(}c_{1}(\mathbf{A}_{d}+m\mathbf{A}_{c})-m\mathbb{I}_{n} \Big{)}\mathbf{W}^{\top}\mathbf{R}_{1}\mathbf{H}_{1}^{\top}-\mathbf{H}_{1} \mathbf{R}_{1}^{\top}\mathbf{W}\Big{(}c_{1}(\mathbf{A}_{d}+m\mathbf{A}_{c})^{ \top}-m\mathbb{I}_{n}\Big{)}\] (77) \[+\Big{(}c_{2}\mathbf{A}_{d}-m\mathbb{I}_{n}\Big{)}\mathbf{W}^{ \top}\mathbf{W}\mathbf{H}_{2}\mathbf{H}_{2}^{\top}-\mathbf{H}_{2}\mathbf{H}_{ 2}^{\top}\mathbf{W}^{\top}\mathbf{W}\Big{(}c_{2}\mathbf{A}_{d}^{\top}-m \mathbb{I}_{n}\Big{)},\] (78)

which is not equal to zero with arbitrary matrices \(\mathbf{A}_{d,c}\).

### Neural Collapse under Relaxed Block Structure Assumption

We now propose a relaxation of our main assumption, under which our main result regarding NC in Theorem 5.2 still holds. In terms of Assumption D.1 on the general block structure of \(\Theta^{h}\), our initial Assumption 3.2 in the main text is the special case with \(\mathbf{A}_{n}=\kappa_{n}\mathbb{I}_{n}\), \(\mathbf{A}_{c}=(\kappa_{c}-\kappa_{n})\mathbb{I}_{n}\), \(\mathbf{A}_{d}=(\kappa_{d}-\kappa_{c})\mathbb{I}_{n}\). The relaxed assumption can be formulated as follows in terms of matrices \(\mathbf{A}_{d,c,n}\):

**Assumption D.2**.: _Assume that \(\mathbf{A}_{n}\) is an arbitrary p.s.d. matrix and \((\mathbf{A}_{c},\mathbf{A}_{d})\) satisfy the following conditions:_

\[\mathbf{A}_{c}=\kappa_{c}\mathbb{I}_{n}+\mathbf{N}_{c},\mathbf{A}_{d}=\kappa_ {d}\mathbb{I}_{n}+\mathbf{N}_{d},\] (79)

_where \(\mathbf{N}_{c,d}^{\top}\in\ker(\mathbf{R}^{\top}\mathbf{W})\), i.e., \(\mathbf{N}_{c,d}\mathbf{W}^{\top}\mathbf{R}=\mathbb{O}\). Further, assume that the kernel changes under rotation with an orthogonal matrix \(\mathbf{Q}\) as follows:_

\[\tilde{\mathbf{A}}_{d,c,n}(\mathbf{Q})=\mathbf{Q}^{\top}\mathbf{A}_{d,c,n} \mathbf{Q}.\] (80)

Since \(\mathbf{A}_{n}\) is arbitrary, this relaxation allows arbitrary non-zero values of non-diagonal kernels \(\Theta^{h}_{k,s}\) with \(k\neq s\). The following observations justify the consistency of the above assumption:

* Since \(\mathbf{W}\in\mathbb{R}^{C\times n}\), \(\mathbf{R}\in\mathbb{R}^{C\times N}\) and \(N>n>C\), \(\mathbf{R}^{\top}\mathbf{W}\) has a non-empty kernel (possibly time-dependent).
* The dynamics is rotation invariant under the assumption, i.e., the equation (75) holds.
* The expression of the assumption is rotation invariant, in a sense that \(\tilde{\mathbf{A}}_{d,c}(\mathbf{Q})=\kappa_{d,c}\mathbb{I}_{n}+\tilde{ \mathbf{N}}_{d,c}(\mathbf{Q})\), where \(\tilde{\mathbf{N}}_{d,c}^{\top}\in\ker(\mathbf{R}^{\top}\mathbf{W}\mathbf{Q})\) for any orthogonal \(\mathbf{Q}\).

Under the above assumption, the derivative in 77 becomes zero, so the dynamics has an invariant of the form \(\mathbf{E}:=\mathbf{W}^{\top}\mathbf{W}-c_{1}\mathbf{H}_{1}\mathbf{H}_{1}^{ \top}-c_{2}\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\). Moreover, the statement and the proof of our main Theorem 5.2 remains unchanged. Thus, DNNs satisfying the conditions of Theorem 5.2 display NC under Assumption D.2.

### Discussion

The analysis of the DNNs dynamics is simplified significantly by assuming that \(\Theta^{h}\) has a block structure. However, formulating a reasonable and consistent assumption on the NTK and its components is non-trivial. The Assumption 3.2 that we used in the main text is justified by the empirical results but may not capture all the relevant properties of the NTK. We believe that studying DNNs' dynamics under a more general or a more reasonable assumption on the NTK is a promising future work direction. The relaxed block structure assumption proposed in this section is the first step into this direction.

Figure 4: VGG11 trained on FashionMNIST. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\), \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 3: VGG11 trained on MNIST. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\), \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 5: VGG16 trained on CIFAR10. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top},\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 6: ResNet20 trained on MNIST. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top},\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 8: ResNet20 trained on CIFAR10. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\), \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 7: ResNet20 trained on FashionMNIST. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\), \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 10: DenseNet40 trained on FashionMNIST. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\), \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 9: DenseNet40 trained on MNIST. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\), \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 11: DenseNet40 trained on CIFAR10. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\), \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 12: ResNet20 trained on MNIST with _CE loss_. See Figure 2 for the description of panes a-h. **i)** Norms of matrices \(\mathbf{H}_{1}\mathbf{H}_{1}^{\top}\), \(\mathbf{H}_{2}\mathbf{H}_{2}^{\top}\), and \(\langle h\rangle\langle h\rangle^{\top}\) at the end of training. **j)** Alignment of kernels \(\Theta\) and \(\Theta^{h}\) at the end of training. The color in panes i-j is the color of the same model in panes a-e.

Figure 16: NTK block structure of ResNet20 trained on FashionMNIST. LeCun normal initialization, initial learning rate \(0.094\). The kernel is computed on a random data subset with 12 samples from each class. See Figure 1 for the description of panes.

Figure 14: NTK block structure of VGG11 trained on FashionMNIST. LeCun normal initialization, initial learning rate \(0.049\). The kernel is computed on a random data subset with 4 samples from each class. See Figure 1 for the description of panes.

Figure 13: NTK block structure of VGG11 trained on MNIST. LeCun normal initialization, initial learning rate \(0.131\). The kernel is computed on a random data subset with 4 samples from each class. See Figure 1 for the description of panes.

Figure 15: NTK block structure of VGG11 trained on CIFAR10. LeCun normal initialization, initial learning rate \(0.131\). The kernel is computed on a random data subset with 4 samples from each class. See Figure 1 for the description of panes.

Figure 19: NTK block structure of DenseNet40 trained on FashionMNIST. LeCun normal initialization, initial learning rate \(0.094\). The kernel is computed on a random data subset with 12 samples from each class. See Figure 1 for the description of panes.

Figure 17: NTK block structure of ResNet20 trained on CIFAR10. LeCun normal initialization, initial learning rate \(0.068\). The kernel is computed on a random data subset with 12 samples from each class. See Figure 1 for the description of panes.

Figure 18: NTK block structure of DenseNet40 trained on MNIST. LeCun normal initialization, initial learning rate \(0.049\). The kernel is computed on a random data subset with 12 samples from each class. See Figure 1 for the description of panes.

Figure 20: NTK block structure of DenseNet40 trained on CIFAR10. LeCun normal initialization, initial learning rate \(0.094\). The kernel is computed on a random data subset with 12 samples from each class. See Figure 1 for the description of panes.