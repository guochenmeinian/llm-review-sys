# Guiding Large Language Models via

Directional Stimulus Prompting

 Zekun Li\({}^{1}\)

Part of the work was done when Zekun Li was interning at Microsoft Research.

Baolin Peng\({}^{2}\)

Pengcheng He\({}^{2}\)

Michel Galley\({}^{2}\)

Jianfeng Gao\({}^{2}\)

Xifeng Yan\({}^{1}\)

University of California

Santa Barbara\({}^{1}\)

Microsoft\({}^{2}\)

{zekunli, xyan}@cs.ucsb.edu

{bapeng,penhe,mgalley,jfgao}@microsoft.com

###### Abstract

We introduce _Directional Stimulus Prompting_, a novel framework for guiding black-box large language models (LLMs) towards specific desired outputs. Instead of directly adjusting LLMs, our method employs a small tunable policy model (e.g., T5) to generate an auxiliary _directional stimulus prompt_ for each input instance. These directional stimulus prompts act as nuanced, instance-specific hints and clues to guide LLMs in generating desired outcomes, such as including specific keywords in the generated summary. Our approach sidesteps the challenges of direct LLM tuning by optimizing the policy model to explore directional stimulus prompts that align LLMs with desired behaviors. The policy model can be optimized through 1) supervised fine-tuning using labeled data and 2) reinforcement learning from offline or online rewards based on the LLM's output. We evaluate our method across various tasks, including summarization, dialogue response generation, and chain-of-thought reasoning. Our experiments indicate a consistent improvement in the performance of LLMs such as ChatGPT, Codex, and InstructGPT on these supervised tasks with minimal labeled data. Remarkably, by utilizing merely 80 dialogues from the MultiWOZ dataset, our approach boosts ChatGPT's performance by a relative 41.4%, achieving or exceeding the performance of some fully supervised state-of-the-art models. Moreover, the instance-specific chain-of-thought prompt generated through our method enhances InstructGPT's reasoning accuracy, outperforming both generalized human-crafted prompts and those generated through automatic prompt engineering. The code and data are publicly available.3

Footnote 3: https://github.com/Leezekun/Directional-Stimulus-Prompting

## 1 Introduction

In recent years, a new paradigm has emerged in natural language processing (NLP) with the rise of large language models (LLMs) such as InstructGPT, ChatGPT [46], GPT-4 [45], PaLM [10], and others. These models exhibit emergent abilities [68] such as strong in-context learning and few-shot prompting capabilities, which were not present in previous "smaller" language models (LMs) like BERT [14], RoBERTa [37], GPT-2 [52], and T5 [53]. This shift in paradigm has led to remarkable advancements in NLP, with LLMs demonstrating impressive general-purpose power. However, due to commercial considerations and the risk of misuse, most LLMs do not publicly release their parameters and only allow users to access them through black-box APIs. While there also exist open-sourced LLMs, fine-tuning them for specific tasks or use cases can be computationally inefficient. In this scenario, the standard approach for utilizing LLMs to perform diverse tasks is crafting generalizedtask-specific prompts to query LLMs. While LLMs have demonstrated considerable performance on a wide range of language tasks, they still struggle to generate outputs that fully align with desired behaviors and directions on some specific tasks and use cases [16; 4].

Optimizing Large Language Models (LLMs) directly for specific tasks can be infeasible or inefficient for many users and developers, leading researchers to shift their focus towards prompt engineering and optimization. Prompt engineering approaches, which involve manually or automatically designing optimal task-specific natural language instructions and selecting appropriate training samples for demonstration in the prompt, have consequently gained the attention of researchers [6; 55; 79; 39]. Despite these efforts, the majority are centered on devising task-specific prompts, often falling short in steering LLMs to generate desired results on a per-instance basis.

To address the challenge, we propose a novel framework called **Directional Stimulus Prompting (DSP)**. This framework introduces a new component called the _directional stimulus_ into the prompt to provide nuanced, instance-specific guidance and control over LLMs. Specifically, the directional stimulus prompt acts as _hints_ and _clues_ for the input query to guide LLMs toward the desired output. Notably, this differs from the methods that augment LLMs with additional knowledge retrieved from external sources [25; 60], as the directional stimulus prompt is generated solely based on the input query in our framework. Figure 1 compares our proposed prompting approach, DSP, with standard prompting for the summarization task. Our approach incorporates keywords in the prompt as the directional stimulus prompt to hint at key points the desired summary should cover. By providing this instance-specific guidance through directional stimulus prompts, LLMs can generate outputs that more closely align with the desired reference summary.

We utilize a relatively small and tunable LM (e.g., T5), as the policy model to generate the directional stimulus prompt for each input query. This approach enables us to sidestep the direct optimization of black-box LLMs by optimizing the small tunable policy model instead. We train the policy model through supervised fine-tuning (SFT) using a few collected labeled data. After supervised fine-tuning, we further optimize the policy model to explore better directional stimulus prompts with reinforcement learning (RL). During RL training, we aim to maximize the reward defined as downstream performance measures or any other measures of the LLM's output conditioned on the stimulus generated by the policy model.

Figure 2 provides the overview of our framework, using the summarization task as an illustrative example. We employ a compact, tunable policy model to generate the directional stimulus prompt,

Figure 1: Comparison of our Directional Stimulus Prompting and the standard prompting method using LLMs such as ChatGPT for the summarization task. DSP utilizes directional stimulus/hints (highlighted in orange), which are keywords in this case, to provide instance-specific guidance to LLMs in generating summaries (highlighted in blue) that better align with the desired reference summary with higher ROUGE scores or other measures like human preferences.

which specifies keywords that should be included in the LLM-generated summaries. The policy model can be trained with SFT and RL, where the reward is typically defined as the downstream task performance measure, such as the ROUGE score for the summarization task, or other alignment measures like human preferences.

Our framework can be flexibly adapted to a wide range of LMs and tasks by choosing the appropriate directional stimulus prompt, i.e., hints. We conducted experiments on summarization, dialogue response generation, and chain-of-thought reasoning tasks to evaluate the effectiveness of our framework. The results demonstrate that our DSP approach can effectively guide LLMs toward the desired targets with a small collection of labeled data. Specifically, we conduct experiments with the black-box LLMs: ChatGPT, Codex, and InstructGPT. For the policy model, we employ a 750M Flan-T5-Large [53; 11] and 220M T5-Base. For the summarization task, we use keywords as the directional stimulus, which hints at key points that the desired summary should include. Despite ChatGPT's already considerable performance, the policy model trained with only 4,000 samples from the CNN/Daily Mail dataset [43] improved the ROUGE and BLEU scores by 4-13%. For the dialogue response generation task, we train the policy model to generate dialogue acts that indicate the underlying intentions behind target responses on dialogues from the MultiWOZ dataset [7]. Guided by the policy model trained with only 80 dialogues, ChatGPT's performance improved by up to 41.4% in combined scores, achieving comparable or even better performance than some state-of-the-art models trained on the full dataset with 8,438 dialogues. For the chain-of-thought reasoning, we train the policy model to generate a trigger prompt for each input query to steer the LLM chain-of-thought reasoning, achieving better performance than the generalized hand-crafted prompts and those produced through the automatic prompt engineering approach [79], suggesting the effectiveness of our approach for automatic prompt engineering and optimization.

## 2 Directional stimulus prompting

For a downstream task, there is an input space \(X\), a data distribution \(\mathcal{D}\) over \(X\), and an output space \(Y\). Due to the strong in-context learning and few-shot prompting abilities, LLMs can perform diverse tasks and generate the output \(\bm{y}\) by including instructions that describe the task, a few demonstration examples, and the input query \(\bm{x}\) in the prompt [6]. However, such prompts cannot always steer LLMs toward desired outputs, especially when it comes to fine-grained instance-specific desired behaviors. For instance, in the case of the summarization task, the input \(\bm{x}\) is an article, and the output \(\bm{y}\) is the corresponding summary. Different summarizers have distinct styles and emphasize different aspects of an article [16]. In this case, it may not be enough to effectively steer LLMs toward generating summaries that closely match reference summaries relying solely on task-specific instructions or demonstration examples to describe such nuanced differences for each sample.

To this end, our Directional Stimulus Prompting (DSP) approach introduces a small piece of discrete tokens \(\bm{z}\) named "_directional stimulus_" into the prompt, which acts as hints and clues to provide LLMs with fine-grained guidance toward the desired direction. For example, for the summarization task, the directional stimulus \(\bm{z}\) might consist of keywords that should be included in the desired

Figure 2: Overview of our proposed framework DSP, where we learn a small tunable policy model to generate the directional stimulus (keywords in this case) that provides input-specific guidance for the LLM toward the desired target. The policy model can be trained with SFT and/or RL, where the reward is defined as the downstream task performance measure, such as the ROUGE score for the summarization task, or other alignment measures like human preferences.

summary. To generate this stimulus for each input query, we use a small tunable policy language model, \(p_{\text{POL}}(\bm{z}|\bm{x})\). We then use this generated stimulus, \(\bm{z}\), along with the original input, \(\bm{x}\), to construct the prompt that steers the LLM toward generating its output, \(p_{\text{LLM}}(\bm{y}|\bm{x},\bm{z})\). It's important to note that the parameters of the LLM, \(p_{\text{LLM}}\), are kept frozen, as they are either inaccessible or inefficient to tune. Overall, when using the LLM with DSP to perform a downstream task, the output is obtained via \(\bm{y}\sim p_{\text{LLM}}(\cdot|\bm{x},\bm{z}),\bm{z}\sim p_{\text{POL}}(\cdot |\bm{x})\).

### Supervised fine-tuning

To train the policy model that generates directional stimulus for LLMs, we first perform supervised fine-tuning (SFT) on a pre-trained LM (e.g., T5, GPT-2, etc) on a small collection of labeled data. To collect the data, we could heuristically select or annotate the "pseudo-stimulus" \(\bm{z}^{*}\) for each input query \(\bm{x}\) and target output \(\bm{y}\) pair based on the downstream task. For example, for the summarization task, we use keywords that the reference summary includes as pseudo-stimulus, while for the dialogue response generation task, we use dialogue acts that indicate the underlying meaning of the desired system response (see Section 3 for details). The resulting dataset \(\mathcal{D}^{\prime}=\{(\bm{x},\bm{z}^{*})\}\) consists of input-stimulus pairs. We then fine-tune the policy model by maximizing the log-likelihood:

\[\mathcal{L}_{\text{SFT}}=-\mathbb{E}_{(\bm{x},\bm{z}^{*})\sim\mathcal{D}}\text {log}p_{\text{POL}}(\bm{z}^{*}|\bm{x}).\] (1)

Supervised fine-tuning can provide a good initial point for the policy model. However, it is important to note that the heuristically selected or annotated pseudo-stimulus may not always be optimal, and the supervised fine-tuned policy model may not generate the most preferred directional stimulus for the LLMs toward the desired outputs. To overcome this limitation, we can also incorporate reinforcement learning (RL) to further fine-tune the policy model. By directly optimizing the LLM's output toward desired targets, RL training enables the policy model to explore and generate more effective directional stimulus.

### Reinforcement learning

#### 2.2.1 Optimization objective

Our goal is to steer the LLM's generation toward the desired target by maximizing an alignment measure \(\mathcal{R}\), which can take various forms such as downstream task performance measures (e.g., ROUGE score for summarization), human preferences, or other customized measures. Mathematically, we aim to maximize the below objective:

\[\mathbb{E}_{\bm{x}\sim\mathcal{D},\bm{z}\sim p_{\text{POL}}(\cdot |\bm{x}),\bm{y}\sim p_{\text{LLM}}(\cdot|\bm{z},\bm{z})}[\mathcal{R}(\bm{x}, \bm{y})].\] (2)

Since the parameters of the black-box LLM are not accessible or tunable, we resort to optimizing the policy model to generate the directional stimulus that guides the LLMs' generation toward maximizing the objective. To achieve that, we define another measure \(\mathcal{R}_{\text{LLM}}\) that captures how well the LLM performs when conditioned on a given stimulus \(\bm{z}\):

\[\mathcal{R}_{\text{LLM}}(\bm{x},\bm{z})=\mathcal{R}(\bm{x},\bm{y}),\bm{y}\sim p _{\text{LLM}}(\cdot|\bm{x},\bm{z}).\] (3)

This allows us to cast the original objective of maximizing \(\mathcal{R}\) into optimizing the policy model to generate stimulus that maximizes \(\mathcal{R}_{\text{LLM}}\). By doing so, the LLM is effectively used as an evaluation function to guide the policy model toward generating more effective directional stimulus. Thus, the optimization objective for LLMs in Equation 2 is equal to the optimization objective for the policy model:

\[\text{max}_{p_{\text{POL}}}\mathbb{E}_{\bm{x}\sim\mathcal{D},\bm{z}\sim p_{ \text{PRL}}(\cdot|\bm{x})}[\mathcal{R}_{\text{LLM}}(\bm{x},\bm{z})].\] (4)

#### 2.2.2 RL formulation

However, the above optimization is intractable for the policy model. To address the issue, we formulate the policy model optimization as an RL problem and employ proximal policy optimization (PPO) [59]. We use the policy model to initialize a policy network \(\pi_{0}=p_{\text{POL}}\) and then update \(\pi\) using PPO. The process that the policy model generates a sequence of tokens as stimulus \(\bm{z}\) can be seen as a Markov decision process (MDP) \(\langle\mathcal{S},\mathcal{A},r,\mathcal{P}\rangle\) with a state space \(\mathcal{S}\), action space \(\mathcal{A}\), reward function \(r\), and state-transition probability \(\mathcal{P}\). In each time step \(t\) of an episode, the agent selects an action (token) from the vocabulary \(\mathcal{V}\) according to the distribution of the current policy network \(\pi(\bm{z}|\bm{x},\bm{z}_{<t})\). The episode ends when an end-of-sequence token is selected, and the stimulus \(\bm{z}\) is generated. We can fine-tune the policy network \(\pi\) by optimizing the reward \(r\):

\[\mathbb{E}_{\pi}[r]=\mathbb{E}_{\bm{x}\sim\mathcal{D},\bm{z}\sim\pi(\cdot|\bm{ x})}[r(\bm{x},\bm{z})].\] (5)

**Reward function** Recall that our goal is to maximize the objective in Equation 4, which can be used as the reward \(r\). To keep the policy network \(\pi\) from moving too far from the initial policy model \(p_{\text{POL}}\), we also add a KL-divergence penalty reward. Therefore, the final reward becomes:

\[r(\bm{x},\bm{z})=\mathcal{R}_{\text{LLM}}(\bm{x},\bm{z})-\beta\text{log}\frac{ \pi(\bm{z}|\bm{x})}{p_{\text{POL}}(\bm{z}|\bm{x})}.\] (6)

Following [80; 54], we dynamically adapt the coefficient \(\beta\) during training:

\[\bm{e}_{t} =\text{clip}\left(\frac{\text{KL}(\pi_{t},p_{\text{POL}})-\text{ KL}_{\text{target}}}{\text{KL}_{\text{target}}},-0.2,0.2\right),\] (7) \[\beta_{t+1} =\beta_{t}\left(1+K_{\beta}\bm{e}_{t}\right).\] (8)

**Implementation** To optimize the policy network \(\pi\), we use the NLPO version of PPO from [54], which is specifically designed for language generators. To address the issue of large action spaces in PPO, NLPO learns to mask out less relevant tokens in the vocabulary using top-\(p\) sampling. This technique restricts the action space to the smallest set of tokens whose cumulative probability is greater than the given probability parameter \(p\), which we set to 0.9 in our experiments. Both the policy network \(\pi\) and value network are initialized from the supervised fine-tuned policy model \(p_{\text{POL}}\), with the final layer of the value network randomly initialized to output a scalar value using a regression head.

## 3 Experiments

Our proposed framework DSP can be flexibly applied to various types of LMs and generation tasks. In this work, we focus on 1) summarization, 2) dialogue response generation, and 3) chain-of-thought reasoning tasks. We mainly use pre-trained T5 or Flan-T5 [53; 11] to initialize the policy model and experiment with the black-box LLMs including **ChatGPT** (gpt-3.5-turbo), **Codex** (**code-davinci-002**), and **InstructGPT** (**text-davinci-002**).

### Summarization

Recent studies [16; 75; 4] have shown that LLMs, such as GPT-3, InstructGPT, and ChatGPT, are capable of generating high-quality summaries with zero- or few-shot prompting. However, their reference-based evaluation benchmark performances, such as ROUGE scores, still lag behind fine-tuned methods, indicating that the generated summaries may not completely match the style and emphasis of the reference summaries. In our experiments, we seek to guide LLMs to generate summaries that more closely align with the reference summaries by providing keywords that should be mentioned in the desired summaries as hints. We evaluate the effectiveness using metrics that compare the generated summaries against reference summaries. Notably, other desired directions, such as better alignment with human preferences, can also be pursued.

**Dataset and evaluation** We conduct our experiments on the CNN/Daily Mail dataset, a widely-used news summarization benchmark. To keep the cost of API usage low, we train on a subset of 1,000, 2,000, and 4,000 article-summary pairs from the total 287,113 samples in the training set. For evaluation, we randomly select 500 samples, following previous work [16; 65], which has been proven to provide sufficient statistical power [8]. We use the overlap-based metrics, including ROUGE [33], BLEU [47], and Meteor [3], and the similarity-based metric, BERTScore [74], to compare the generated summaries with the references. The reported evaluation scores are averaged over three inferences of ChatGPT for each query, using a temperature of 0.7 and top_p of 1.0. We use the same three demonstration examples in the prompt for standard prompting and add keywords as directional stimulus in the prompt for our approach, DSP. The exact prompts used in our experiments are provided in the Appendix.

**Supervised fine-tuning details** We use keywords as the pseudo-stimulus to train the policy model with supervised fine-tuning as discussed in Section 2.1. To collect the data, we employ textural [41; 5] to automatically extract the keywords from the article and summary and only keep those that appear in the reference summary. As a result, we obtain a list of extracted keywords for each article-summary pair in the dataset. To convert them into a sentence that serves as the stimulus, we concatenate them using a split token ";", resulting in the stimulus formated as "_[Keyword1]; [Keyword2];...;_[KeywordN]_.". We use the constructed article-stimulus pairs to train the policy model via supervised fine-tuning. The input format for training is "_Extract the keywords: [Article]_", while the output is the target stimulus consisting of keywords. The policy model was trained for 5 epochs with a \(2\times 10^{-5}\) learning rate.

**RL training details** As we aim to guide ChatGPT in generating summaries that more closely match the reference summaries, we adopt the automatic reference-based metric scores as the alignment measure reward. Specifically, we calculate the ROUGE-Avg score between the generated summaries and the reference summaries as the reward, with a rescaling coefficient of 10. We experimentally found that other automatic evaluation metrics, such as BLEU and Meteor, perform similarly. To reduce variance, we generate four outputs per input query using ChatGPT with a temperature of 0.7 and compute the average reward. Additionally, we assign a step-wise reward, which we found could improve the efficiency and stability of the training process. Specifically, the policy model generates a sequence of keywords in each episode, during which we assign a reward of 1 if a keyword appears in the reference summary and a penalty reward of -0.2 is given otherwise. We train the policy network for 51k episodes, with 5 epochs per batch, a batch size of 8, and a learning rate of \(2\times 10^{-6}\). The KL\({}_{\text{target}}\) and \(\beta_{0}\) in Equation 7 are set to 0.5 and 0.005, respectively.

**Results** We evaluate the performance of ChatGPT with standard prompting and our approach DSP trained with SFT or SFT and then RL (SFT+RL) on varying sizes of training data and present the results in Figure 3. As can be seen, all the evaluation scores improve with our proposed DSP compared with standard prompting. Specifically, the supervised fine-tuned policy model generates the stimulus that effectively guides ChatGPT to generate summaries that closely align with the reference summaries, leading to improved benchmark performance. Furthermore, the additional fine-tuning of the policy model with RL results in further performance improvement, indicating the effectiveness of RL in exploring better directional stimulus that maximizes the reward. As the size of the training data increases, the performance improvement becomes more significant. Despite using a small collection of only 1,000 to 4,000 samples to keep API usage costs low, our DSP approach still

Figure 4: Training curve on 1000 samples from the CNN/Daily Mail dataset.

Figure 3: Performance comparison of ChatGPT with standard prompting and DSP trained with SFT and SFT+RL, using varying numbers of training samples from the CNN/Daily Mail dataset.

consistently enhances ChatGPT's ROUGE, BLEU, and Meteor scores by 1-2 in absolute points, even though ChatGPT has already achieved considerable performance. However, due to the discrepancy between the semantic-based metric BERTScore and the overlap-based metric ROUGE, which are used as the reward, the improvement in BERTScore after RL training may be relatively less significant. Figure 4 presents the change of training rewards and ROUGE-1 score on the validation set during the training process on 1,000 samples. We can see that the performance is closely related to the training rewards, and the training is relatively stable using the NLPO algorithm.

### Dialogue response generation

In recent years, there has been a rise in LLM-based chatbots such as ChatGPT4 and Sparrow 5. These chatbots are typically targeted at open-domain conversations to engage with users on a wide range of topics without a specific goal in mind. However, these chatbots still face challenges in handling task-oriented dialogues where they need to assist users in completing specific goals or tasks, such as making reservations or ordering food [4; 22]. Unlike open-domain conversations, task-oriented dialogues often require the chatbot to follow task-specific business logic and respond based on reliable information from API calls or database queries. To address this limitation, we train a small policy model to learn the underlying dialogue policy from the training data and thus guide the LLMs in generating reliable system responses that assist users in completing tasks.

Footnote 4: https://openAL.com/blog/chatgpt

Footnote 5: https://www.deepmind.com/blog/building-safer-dialogue-agents

Dataset and evaluationWe conduct experiments on the popular task-oriented dialogue dataset MultiWOZ [7], including both the MultiWOZ2.0 (the original version) and MultiWOZ2.1 version [15]. The dataset provides annotations for user utterances, dialogue acts, and system responses for each dialogue turn. The goal is to generate the system response given the history dialogue context as input. We utilize the dialogue act, which represents the communicative intention of the target system response, as the pseudo-stimulus for our experiment. There are 8,438 dialogues in the training set. We only use 1% (80 dialogues) and 10% (800 dialogues) to train the policy model and evaluate the performance on the full validation and test set, which contains 1,000 dialogues. We use the standard evaluation metrics: **Inform**, which measures the rate that the appropriate entity that satisfies the user's requirements is provided; **Success**, which measures the rate that all requested attributes are answered; **BLEU**: the corpus-level BLEU score with reference responses; and an overall measure **Combined score** = (Inform+Success)\(\times\)0.5+BLEU. Likewise, we report the average score over three inferences. We use the same three demonstration examples when using DSP or standard prompting.

Supervised fine-tuning detailsTo conduct supervised fine-tuning on the policy model, we format the input of each sample as _Translate dialogue to dialogue action: [Dialogue context]_", with the target being the verbalized dialogue acts in the same format as [77; 63]. For instance, a dialogue act <_hotel, inform, choice>, <_hotel, inform, type>, <_hotel, request, area_> will be converted to "_[hotel] [inform] choice type [request] area_", which indicates that the system should inform available hotel choices and their types and ask for the area that the user would like (see the Appendix for examples). Note that the provided dialogue act annotations may not be the only valid dialogue act for the same dialogue content [77], and thus we hope to explore diverse valid dialogue acts (directional stimulus) through RL training.

RL training detailsThe evaluation metrics Success and Inform rates are defined at the dialogue level, while the BLEU score is computed on the corpus level. However, our training and inference on conducted on the turn level. We thus use the sentence-level SacreBLEU [51] score as the reward. Same as in the summarization experiments, we generate four outputs per input using the LLM with a temperature of 0.7. The policy network is trained 52k episodes, 5 epochs per batch with a batch size of 8 and a learning rate of \(2\times 10^{-6}\). Since the generated dialogue acts should adhere to the business logic and ontology, we ensure that the updated policy network does not deviate significantly from the original policy model. We thus set the KLtarget and \(\beta_{0}\) in Equation 7 as 0.2 and 0.01, respectively. During training, we use top-\(k\) sampling and set \(k\) to 50 to explore the action space. During inference, we use beam search decoding with a beam size of 5.

ResultsWe evaluate the impact of our approach DSP on Codex and ChatGPT and compare the performance with several representative task-oriented dialogue models trained on the full training set (8438 dialogues), including DAMD [77], MinTL [34], Soloist [49], SimpleTOD [21], DoTS [23], PPTOD [63], UBAR [72], and GALAXY [19]. Table 1 summarizes the overall performance comparison, from which we obtain the following observations: (1) Our approach DSP significantly improves the success and inform rates of Codex and ChatGPT, indicating that they better understand the scenario and generate appropriate responses that help users in completing their tasks. (2) However, there is no improvement in the corpus-level BLEU score, possibly because the LLMs generate responses with different speaking styles and vocabulary since they do not see oracle system responses. Nevertheless, the high success and inform rates demonstrate the usefulness of our approach in delivering helpful and reliable responses. (3) Increasing the number of supervised fine-tuning samples does not guarantee performance improvement, but further fine-tuning the policy model using RL consistently provides performance gains. This suggests that RL training encourages the policy model to explore more model-preferred stimulus, while supervised fine-tuning may merely generate stimulus closely aligned with the pseudo-labeled data, which is not necessarily optimal. (4) Our approach achieves notable success with only 80 dialogues, surpassing several fully trained TOD models, particularly in terms of Success and Inform rates. With 10% of the training data (800 dialogues), our approach delivers comparable performance to current SOTA methods trained with full training data (8438 dialogues). We have also provided the performance of these compared methods in the low-resource settings (1% and 10%) and a running example in the Appendix.

### Chain-of-Thought reasoning

While current methods primarily utilize generalized task-specific prompts, LLMs exhibit sensitivity to these prompts. Existing studies [69; 26; 79] illustrate that the performance of LLMs can vary significantly based on the prompt used. Consequently, a substantial portion of earlier work has been dedicated to either manually [56] or automatically [61; 79] crafting prompts. However, these studies largely concentrate on task-specific prompts, which may not be optimal for every instance of a task. In our experiment, we employ our approach to generate instance-specific prompts to elicit Chain-of-Thought (CoT) reasoning. Specifically, we train a policy model (t5-base) to generate instance-specific CoT trigger prompts, such as "_Let's think step by step_", to prompt varying samples.

Dataset and evaluationWe adopted the experimental setup from previous work [26; 79], where we tested zero-shot CoT reasoning abilities of InstructGPT (text-davinci-002) with different trigger prompts. There are 600 examples in the MultiArith dataset [57], which we divided into

\begin{table}
\begin{tabular}{l c c c c c c c c c} \hline \hline \multirow{2}{*}{**Method**} & \multirow{2}{*}{\#Training} & \multicolumn{4}{c}{MultiWOZ 2.0} & \multicolumn{4}{c}{MultiWOZ 2.1} \\ \cline{3-10}  & & & Inform & Succ. & BLEU & Comb. & Inform & Succ. & BLEU & Comb. \\ \hline \multicolumn{10}{c}{_Codex_} \\ Standard Promping & - & 76.7 & 41.5 & 7.7 & 66.8 & 74.2 & 41.9 & 7.8 & 65.9 \\ DSP w/ SFT & 1\% (80) & 74.9 & 66.3 & 11.1 & 81.7 & 72.0 & 66.0 & 11.3 & 80.1 \\ DSP w/ SFT+RL & 1\% (80) & 91.0 & 76.0 & 9.8 & 93.3 & 89.7 & 78.6 & 9.4 & 93.4 \\ DSP w/ SFT & 10\% (800) & 79.4 & 71.9 & 11.3 & 87.0 & 72.0 & 67.0 & 13.1 & 82.6 \\ DSP w/ SFT+RL & 10\% (800) & 96.0 & 86.9 & 10.7 & 102.2 & 94.0 & 86.0 & 9.2 & 99.2 \\ \hline \multicolumn{10}{c}{_ChatGPT_} \\ Standard Promping & - & 71.8 & 44.1 & 10.5 & 68.4 & 72.8 & 44.2 & 10.4 & 68.9 \\ DSP w/ SFT & 1\% (80) & 76.6 & 66.5 & 11.2 & 82.8 & 76.0 & 64.3 & 11.3 & 81.4 \\ DSP w/ SFT+RL & 1\% (80) & 90.9 & 82.2 & 10.2 & 96.7 & 87.3 & 78.7 & 10.7 & 93.7 \\ DSP w/ SFT & 10\% (800) & 72.7 & 64.7 & 11.8 & 80.5 & 75.0 & 67.7 & 12.6 & 83.9 \\ DSP w/ SFT+RL & 10\% (800) & 95.3 & 82.3 & 10.9 & 99.6 & 95.0 & 84.0 & 10.7 & 100.2 \\ \hline \multicolumn{10}{c}{_Fully supervised TOD models_} \\ DAMD [77] & 100\% (8438) & 76.3 & 60.4 & 16.6 & 85.0 & - & - & - & - \\ MinTL [34] & 100\% (8438) & 84.9 & 74.9 & 17.9 & 97.8 & - & - & - & - \\ Soloist [49] & 100\% (8438) & 85.5 & 72.9 & 16.5 & 95.7 & - & - & - & - \\ SimpleTOD [21] & 100\% (8438) & 84.4 & 70.1 & 15.0 & 92.3 & 85.0 & 70.5 & 15.2 & 93.0 \\ DotTS [23] & 100\% (8438) & 86.6 & 74.1 & 15.1 & 95.5 & 86.7 & 74.2 & 15.9 & 96.3 \\ PTOD [63] & 100\% (8438) & 89.2 & 79.4 & 18.6 & 102.9 & 87.1 & 79.1 & 19.2 & 102.3 \\ UBAR [72] & 100\% (8438) & 95.4 & 80.7 & 17.0 & 105.1 & 95.7 & 81.8 & 16.5 & 105.3 \\ GALAXY [19] & 100\% (8438) & 94.4 & 85.3 & 20.5 & 110.4 & 95.3 & 86.2 & 20.0 & 110.8 \\ \hline \hline \end{tabular}
\end{table}
Table 1: Response generation performance of different methods on the MultiWOZ 2.0&82.1 datasets, where Succ. and Comb. denote the Success and Combined Score metrics, respectively.

300/50/250 for training/validation/test set. As for the AQuA dataset [35], we use the standard test set with 254 samples, 300 samples from the standard training set for our training, and 100 samples for the standard validation set for our validation. We report the reasoning accuracy.

Supervised fine-tuning detailsFor supervised fine-tuning (SFT), we first run inference on the training set with the 14 human-crafted prompts tested in [26], respectively. We then selected those prompt and query pairs which resulted in a correct CoT reasoning outcome to form the training set for SFT. These query-prompt pairs were used to train a t5-base policy model for 2 epochs, with the model input being the query instance and the target output a trigger prompt.

RL training detailsAfter SFT, the prompts generated by the policy model were used to trigger InstructGPT for zero-shot CoT prompting. Reasoning accuracy was utilized as the reward for reinforcement learning (RL). A reward of 1 was assigned for correct reasoning results and 0 otherwise. We conducted 20 training iterations (106k episodes), with 5 epochs per batch, a batch size of 8, and a learning rate of 2e-6. The parameters for KLtarget and \(\beta_{0}\) were set to 0.5 and 0.001, respectively.

ResultsWe compare the performance of using our generated instance-specific prompts with using the 14 human-crafted prompts which we used as the pseudo-stimulus to constitute the training set for SFT and also the prompt automatically discovered by the APE approach [79]. Note that all these 15 prompts are generalized task-specific and are used for the whole test set while ours are instance-specific. The performance comparison is shown in the Table 8. As can be seen, InstructGPT's performance varies significantly when using different task-specific prompts. Compared to the 14 task-specific human-designed prompts, DSP enhances the performance with instance-specific prompts. It also outperforms the prompt discovered by the APE approach, suggesting the effectiveness of our approach for automatically prompt engineering and optimization. Solely relying on supervised fine-tuning of the policy model with the dataset comprising the 14 human-designed prompts doesn't lead to its peak performance. After fine-tuning with RL, the policy model is encouraged to explore better instance-specific trigger prompts, further improving performance.

## 4 Related work

Black-box large language modelsRecent years have witnessed the emergence of LLMs such as GPT-3 [6], Codex [9], InstructGPT, ChatGPT [46], PaLM [10], and LaMDA [66], which show significant promise in the field of NLP. These LLMs typically have a large number of parameters and require vast amounts of training data. Due to their scaling, these models have exhibited many emergent abilities, such as in-context learning, few-shot prompting, chain-of-thought prompting,

\begin{table}
\begin{tabular}{l l l l} \hline \hline No. & Category & Chain-of-Thought Trigger Prompt & MultiArith & AQuA \\ \hline
1 & Human-Designed & _Let’s think step by step._ & 79.6 & 31.9 \\
2 & & _We should think about this step by step._ & 81.2 & 28.7 \\
3 & & _First,_ & 78.0 & 38.2 \\
4 & & _Before we dive into the answer,_ & 54.8 & 27.2 \\
5 & & _Proof followed by the answer._ & 58.4 & 37.8 \\
6 & & _Let’s think step by step in a realistic way._ & 59.6 & 33.9 \\
7 & & _Let’s think step by step using common sense and knowledge._ & 80.0 & 34.3 \\
8 & & _Let’s think like a detective step by step._ & 73.6 & 24.0 \\
9 & & _Let’s think about this logically._ & 75.2 & 34.7 \\
10 & & _Let’s think step by step. First,_ & 78.8 & 32.3 \\
11 & & _Let’s think_ & 56.8 & 38.2 \\
12 & & _Let’s solve this problem by splitting it into steps._ & 72.4 & 33.2 \\
13 & & _The answer is after the proof._ & 42.8 & 34.3 \\
14 & & _Let’s be realistic and think step by step._ & 69.6 & 29.9 \\ \hline
15 & APE [79] & _Let’s work this out in a step by step way to be sure we have the right answer._ & 81.6 & 34.3 \\ \hline
16 & DSP w/ SFT & (*Generated instance-specific prompt) & 75.2 & 35.8 \\
17 & DSP w/ SFT+RL & (*Generated instance-specific prompt) & **84.0** & **38.6** \\ \hline \hline \end{tabular}
\end{table}
Table 2: Zero-shot chain of thoughts reasoning accuracy (%) of text-davinci-002 with different prompts. *Our approach trains a policy model to generate instance-specific prompt triggers, which are compared to the task-specific prompts in [26, 79].

and instruction following [6, 46, 69]. However, most LLMs are not open-sourced and can only be accessed via black-box APIs, through which the users send prompt queries and receive responses. While there exist open-source LLMs such as OPT-175B [73] and Bloom [58], their local execution and fine-tuning require significant computational resources that may be infeasible for most researchers and users. However, despite their considerable performance on various tasks, LLMs often fall short of generating outputs that fully align with desired outputs on specific downstream tasks and use cases [16, 42, 18]. Our approach seeks to address this limitation by introducing directional stimulus generated by a small tunable LM into the prompt to provide more fine-grained guidance and control over black-box LLMs.

Prompt optimization and engineeringEfficiently optimizing pre-trained LMs on downstream tasks by finding optimal prompts has been a focus of prior research. One approach involves tuning soft prompts, which are continuous embedding vectors that can be optimized using gradient descent methods [32, 30, 67, 2, 64]. However, the requirements of gradients and the challenge of passing gradients and continuous prompts through black-box APIs, making them less practical for the black-box LLMs. Researchers have also tried to seek optimal prompts by designing task-specific natural language instructions and selecting proper training samples as in-context demonstrations in the prompt. These methods include manual engineering [50, 6, 56], editing [61, 76], reinforcement learning [13, 39], and automatic generation [79]. Despite these efforts, such prompts are not always effective at steering LLMs to generate desired outputs, especially for fine-grained instance-specific behaviors that are difficult to describe using task-specific instructions and demonstration examples. To address this limitation, our approach is able to provide more **fine-grained instance-specific** guidance through the directional stimulus prompts (hints) generated by a small tunable policy model which could be optimized with supervised fine-tuning and reinforcement learning.

Controllable text generationThe control of language models (LMs) has been extensively studied. Early approaches fine-tuned LMs on datasets containing desired attributes [17]. [24] proposed class-conditioned LMs, generating text with predefined control codes. However, direct LM training is costly. To address this, PPLM [12] trains an attribute model and passes gradients to control generation. GeDi [27] and DExperts [36] use class-conditional distributions as generative discriminators to guide generation, reducing computation complexity. These methods require either additional LM training or internal gradients and logistics, making them not applicable to black-box LLMs. Our approach proposes a solution to control black-box LLMs by inserting directional stimulus into the input query prompt and optimizing based on the return output.

Reinforcement learning for NLPReinforcement learning has been successfully applied to various NLP tasks, such as syntactic parsing [44, 29], machine translation [71, 28], summarization [48, 62], conversational systems [31], etc. Language models define probability distributions over tokens in their vocabulary, and the text generation problem can be naturally formulated as selecting an action in an RL setting. Therefore, there have been extensive research efforts on optimizing LMs with RL, usually by aligning them with human preferences [80, 70, 40, 62]. For example, the LLM InstructGPT [46] is optimized with RL to better follow users' instructions and intent. In contrast with these works that directly update the LLMs to align with human preferences, our work optimizes a small policy model that generates text (stimulus) to guide LLMs to generate more human-preferred output instead of directly optimizing the LLMs, bypassing the inefficient LLM's optimization.

## 5 Conclusions and future work

In this paper, we introduce _Directional Stimulus Prompting_ (DSP), a new prompting framework to provide black-box LLMs with fine-grained and instance-specific guidance toward the desired outputs. We use a tunable policy model to generate the directional stimulus to provide such guidance and convert the optimization of black-box LLMs to that of the policy model. Experimental results demonstrate the effectiveness of our approach in controlling and guiding black-box LLMs via automatic prompt engineering and optimization. Furthermore, the generated stimulus provides valuable insights and interpretations of LLMs' behaviors. In this work, we use heuristically selected or annotated pseudo-stimulus data for supervised fine-tuning of the policy model. For future work, we hope to explore the possibility of using a "machine language" between the policy model and the LLMs that might not be intuitively preferred by humans but can better convey guidance information, as well as other forms of directional stimulus beyond text.

## Acknowledgments and Disclosure of Funding

This research was partly sponsored by the DARPA PTG program (HR001122C0009). Any opinions, findings, conclusions, or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of funding agencies.

## References

* [1]Ahn, M., Brohan, A., Brown, N., Chebotar, Y., Cortes, O., David, B., Finn, C., Fu, C., Gopalakrishnan, K., Hausman, K., et al. Do as i can, not as i say: Grounding language in robotic affordances. _arXiv preprint arXiv:2204.01691_, 2022.
* [2] An, S., Li, Y., Lin, Z., Liu, Q., Chen, B., Fu, Q., Chen, W., Zheng, N., and Lou, J.-G. Input-Tuning: Adapting unfamiliar inputs to frozen pretrained models. _arXiv preprint arXiv:2203.03131_, 2022.
* [3] Banerjee, S. and Lavie, A. METEOR: An automatic metric for mt evaluation with improved correlation with human judgments. In _Proceedings of the acl workshop on intrinsic and extrinsic evaluation measures for machine translation and/or summarization_, pp. 65-72, 2005.
* [4] Bang, Y., Cahyawijaya, S., Lee, N., Dai, W., Su, D., Wilie, B., Lovenia, H., Ji, Z., Yu, T., Chung, W., et al. A multitask, multilingual, multimodal evaluation of ChatGPT on reasoning, hallucination, and interactivity. _arXiv preprint arXiv:2302.04023_, 2023.
* [5] Barrios, F., Lopez, F., Argerich, L., and Wachenchauzer, R. Variations of the similarity function of textrank for automated summarization. _arXiv preprint arXiv:1602.03606_, 2016.
* [6] Brown, T., Mann, B., Ryder, N., Subbiah, M., Kaplan, J. D., Dhariwal, P., Neelakantan, A., Shyam, P., Sastry, G., Askell, A., et al. Language models are few-shot learners. _Advances in neural information processing systems_, 33:1877-1901, 2020.
* a large-scale multi-domain Wizard-of-Oz dataset for task-oriented dialogue modelling. _arXiv preprint arXiv:1810.00278_, 2018.
* [8] Card, D., Henderson, P., Khandelwal, U., Jia, R., Mahowald, K., and Jurafsky, D. With little power comes great responsibility. _arXiv preprint arXiv:2010.06595_, 2020.
* [9] Chen, M., Tworek, J., Jun, H., Yuan, Q., Pinto, H. P. d. O., Kaplan, J., Edwards, H., Burda, Y., Joseph, N., Brockman, G., et al. Evaluating large language models trained on code. _arXiv preprint arXiv:2107.03374_, 2021.
* [10] Chowdhery, A., Narang, S., Devlin, J., Bosma, M., Mishra, G., Roberts, A., Barham, P., Chung, H. W., Sutton, C., Gehrmann, S., et al. PaLM: Scaling language modeling with pathways. _arXiv preprint arXiv:2204.02311_, 2022.
* [11] Chung, H. W., Hou, L., Longpre, S., Zoph, B., Tay, Y., Fedus, W., Li, E., Wang, X., Dehghani, M., Brahma, S., et al. Scaling instruction-finetuned language models. _arXiv preprint arXiv:2210.11416_, 2022.
* [12] Dathathri, S., Madotto, A., Lan, J., Hung, J., Frank, E., Molino, P., Yosinski, J., and Liu, R. Plug and play language models: A simple approach to controlled text generation. _arXiv preprint arXiv:1912.02164_, 2019.
* [13] Deng, M., Wang, J., Hsieh, C.-P., Wang, Y., Guo, H., Shu, T., Song, M., Xing, E. P., and Hu, Z. RLPPrompt: Optimizing discrete text prompts with reinforcement learning. _arXiv preprint arXiv:2205.12548_, 2022.
* [14] Devlin, J., Chang, M.-W., Lee, K., and Toutanova, K. BERT: Pre-training of deep bidirectional transformers for language understanding. _arXiv preprint arXiv:1810.04805_, 2018.
* [15] Eric, M., Goel, R., Paul, S., Kumar, A., Sethi, A., Ku, P., Goyal, A. K., Agarwal, S., Gao, S., and Hakkani-Tur, D. MultiWOZ 2.1: A consolidated multi-domain dialogue dataset with state corrections and state tracking baselines. _arXiv preprint arXiv:1907.01669_, 2019.

* [16] Goyal, T., Li, J. J., and Durrett, G. News summarization and evaluation in the era of GPT-3. _arXiv preprint arXiv:2209.12356_, 2022.
* [17] Gururangan, S., Marasovic, A., Swayamdipta, S., Lo, K., Beltagy, I., Downey, D., and Smith, N. A. Don't stop pretraining: Adapt language models to domains and tasks. _arXiv preprint arXiv:2004.10964_, 2020.
* [18] Gutierrez, B. J., McNeal, N., Washington, C., Chen, Y., Li, L., Sun, H., and Su, Y. Thinking about GPT-3 in-context learning for biomedical IE? Think again. _arXiv preprint arXiv:2203.08410_, 2022.
* [19] He, W., Dai, Y., Zheng, Y., Wu, Y., Cao, Z., Liu, D., Jiang, P., Yang, M., Huang, F., Si, L., et al. Galaxy: A generative pre-trained model for task-oriented dialog with semi-supervised learning and explicit policy injection. In _Proceedings of the AAAI Conference on Artificial Intelligence_, pp. 10749-10757, 2022.
* [20] Honnibal, M. and Montani, I. spaCy 2: Natural language understanding with Bloom embeddings, convolutional neural networks and incremental parsing. To appear, 2017.
* [21] Hosseini-Asl, E., McCann, B., Wu, C.-S., Yavuz, S., and Socher, R. A simple language model for task-oriented dialogue. _Advances in Neural Information Processing Systems_, 33:20179-20191, 2020.
* [22] Hudecek, V. and Dusek, O. Are LLMs all you need for task-oriented dialogue? _arXiv preprint arXiv:2304.06556_, 2023.
* [23] Jeon, H. and Lee, G. G. Domain state tracking for a simplified dialogue system. _arXiv preprint arXiv:2103.06648_, 2021.
* [24] Keskar, N. S., McCann, B., Varshney, L. R., Xiong, C., and Socher, R. CTRL: A conditional transformer language model for controllable generation. _arXiv preprint arXiv:1909.05858_, 2019.
* [25] Khattab, O., Santhanam, K., Li, X. L., Hall, D., Liang, P., Potts, C., and Zaharia, M. Demonstrate-search-predict: Composing retrieval and language models for knowledge-intensive nlp. _arXiv preprint arXiv:2212.14024_, 2022.
* [26] Kojima, T., Gu, S. S., Reid, M., Matsuo, Y., and Iwasawa, Y. Large language models are zero-shot reasoners. _Advances in neural information processing systems_, 35:22199-22213, 2022.
* [27] Krause, B., Gotmare, A. D., McCann, B., Keskar, N. S., Joty, S., Socher, R., and Rajani, N. F. GeDi: Generative discriminator guided sequence generation. _arXiv preprint arXiv:2009.06367_, 2020.
* [28] Kumar, G., Foster, G., Cherry, C., and Krikun, M. Reinforcement learning based curriculum optimization for neural machine translation. _arXiv preprint arXiv:1903.00041_, 2019.
* [29] Le, M. and Fokkens, A. Tackling error propagation through reinforcement learning: A case of greedy dependency parsing. _arXiv preprint arXiv:1702.06794_, 2017.
* [30] Lester, B., Al-Rfou, R., and Constant, N. The power of scale for parameter-efficient prompt tuning. _arXiv preprint arXiv:2104.08691_, 2021.
* [31] Li, J., Monroe, W., Ritter, A., Galley, M., Gao, J., and Jurafsky, D. Deep reinforcement learning for dialogue generation. _arXiv preprint arXiv:1606.01541_, 2016.
* [32] Li, X. L. and Liang, P. Prefix-tuning: Optimizing continuous prompts for generation. _arXiv preprint arXiv:2101.00190_, 2021.
* [33] Lin, C.-Y. Rouge: A package for automatic evaluation of summaries. In _Text summarization branches out_, pp. 74-81, 2004.
* [34] Lin, Z., Madotto, A., Winata, G. I., and Fung, P. Mintl: Minimalist transfer learning for task-oriented dialogue systems. _arXiv preprint arXiv:2009.12005_, 2020.

* [35] Ling, W., Yogatama, D., Dyer, C., and Blunsom, P. Program induction by rationale generation: Learning to solve and explain algebraic word problems. _arXiv preprint arXiv:1705.04146_, 2017.
* [36] Liu, A., Sap, M., Lu, X., Swayamdipta, S., Bhagavatula, C., Smith, N. A., and Choi, Y. Dexerts: Decoding-time controlled text generation with experts and anti-experts. _arXiv preprint arXiv:2105.03023_, 2021.
* [37] Liu, Y., Ott, M., Goyal, N., Du, J., Joshi, M., Chen, D., Levy, O., Lewis, M., Zettlemoyer, L., and Stoyanov, V. Roberta: A robustly optimized bert pretraining approach. _arXiv preprint arXiv:1907.11692_, 2019.
* [38] Liu, Y., Iter, D., Xu, Y., Wang, S., Xu, R., and Zhu, C. Gpteval: Nlg evaluation using gpt-4 with better human alignment. _arXiv preprint arXiv:2303.16634_, 2023.
* [39] Lu, P., Qiu, L., Chang, K.-W., Wu, Y. N., Zhu, S.-C., Rajpurohit, T., Clark, P., and Kalyan, A. Dynamic prompt learning via policy gradient for semi-structured mathematical reasoning. _arXiv preprint arXiv:2209.14610_, 2022.
* [40] Lu, X., Welleck, S., Jiang, L., Hessel, J., Qin, L., West, P., Ammanabrolu, P., and Choi, Y. Quark: Controllable text generation with reinforced unlearning. _arXiv preprint arXiv:2205.13636_, 2022.
* [41] Mihalcea, R. and Tarau, P. Textrank: Bringing order into text. In _Proceedings of the 2004 conference on empirical methods in natural language processing_, pp. 404-411, 2004.
* [42] Moradi, M., Blagec, K., Haberl, F., and Samwald, M. Gpt-3 models are poor few-shot learners in the biomedical domain. _arXiv preprint arXiv:2109.02555_, 2021.
* [43] Nallapati, R., Zhou, B., Gulcehre, C., Xiang, B., et al. Abstractive text summarization using sequence-to-sequence rnns and beyond. _arXiv preprint arXiv:1602.06023_, 2016.
* [44] Neu, G. and Szepesvari, C. Training parsers by inverse reinforcement learning. _Machine Learning. 2009 Dec; 77: 303-37._, 2009.
* [45] OpenAI. Gpt-4 technical report, 2023.
* [46] Ouyang, L., Wu, J., Jiang, X., Almeida, D., Wainwright, C., Mishkin, P., Zhang, C., Agarwal, S., Slama, K., Ray, A., et al. Training language models to follow instructions with human feedback. _Advances in Neural Information Processing Systems_, 35:27730-27744, 2022.
* [47] Papineni, K., Roukos, S., Ward, T., and Zhu, W.-J. BLEU: a method for automatic evaluation of machine translation. In _Proceedings of the 40th annual meeting of the Association for Computational Linguistics_, pp. 311-318, 2002.
* [48] Paulus, R., Xiong, C., and Socher, R. A deep reinforced model for abstractive summarization. _arXiv preprint arXiv:1705.04304_, 2017.
* [49] Peng, B., Li, C., Li, J., Shayandeh, S., Liden, L., and Gao, J. SOLOIST: Building task bots at scale with transfer learning and machine teaching. _Transactions of the Association for Computational Linguistics_, 9:807-824, 2021.
* [50] Petroni, F., Rocktaschel, T., Lewis, P., Bakhtin, A., Wu, Y., Miller, A. H., and Riedel, S. Language models as knowledge bases? _arXiv preprint arXiv:1909.01066_, 2019.
* [51] Post, M. A call for clarity in reporting bleu scores. _arXiv preprint arXiv:1804.08771_, 2018.
* [52] Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., Sutskever, I., et al. Language models are unsupervised multitask learners. _OpenAI blog_, 1(8):9, 2019.
* [53] Raffel, C., Shazeer, N., Roberts, A., Lee, K., Narang, S., Matena, M., Zhou, Y., Li, W., and Liu, P. J. Exploring the limits of transfer learning with a unified text-to-text transformer. _The Journal of Machine Learning Research_, 21(1):5485-5551, 2020.
* [54] Ramamurthy, R., Ammanabrolu, P., Brantley, K., Hessel, J., Sifa, R., Bauckhage, C., Hajishirzi, H., and Choi, Y. Is reinforcement learning (not) for natural language processing?: Benchmarks, baselines, and building blocks for natural language policy optimization. _arXiv preprint arXiv:2210.01241_, 2022.

* [55] Reynolds, L. and McDonell, K. Prompt programming for large language models: Beyond the few-shot paradigm. In _Extended Abstracts of the 2021 CHI Conference on Human Factors in Computing Systems_, pp. 1-7, 2021.
* [56] Reynolds, L. and McDonell, K. Prompt programming for large language models: Beyond the few-shot paradigm. In _Extended Abstracts of the 2021 CHI Conference on Human Factors in Computing Systems_, pp. 1-7, 2021.
* [57] Roy, S. and Roth, D. Solving general arithmetic word problems. _arXiv preprint arXiv:1608.01413_, 2016.
* [58] Scao, T. L., Fan, A., Akiki, C., Pavlick, E., Ilic, S., Hesslow, D., Castagne, R., Luccioni, A. S., Yvon, F., Galle, M., et al. BLOOM: A 176b-parameter open-access multilingual language model. _arXiv preprint arXiv:2211.05100_, 2022.
* [59] Schulman, J., Wolski, F., Dhariwal, P., Radford, A., and Klimov, O. Proximal policy optimization algorithms. _arXiv preprint arXiv:1707.06347_, 2017.
* [60] Shi, W., Min, S., Yasunaga, M., Seo, M., James, R., Lewis, M., Zettlemoyer, L., and Yih, W.-t. Replug: Retrieval-augmented black-box language models. _arXiv preprint arXiv:2301.12652_, 2023.
* [61] Shin, T., Razeghi, Y., Logan IV, R. L., Wallace, E., and Singh, S. Autoprompt: Eliciting knowledge from language models with automatically generated prompts. _arXiv preprint arXiv:2010.15980_, 2020.
* [62] Stiennon, N., Ouyang, L., Wu, J., Ziegler, D., Lowe, R., Voss, C., Radford, A., Amodei, D., and Christiano, P. F. Learning to summarize with human feedback. _Advances in Neural Information Processing Systems_, 33:3008-3021, 2020.
* [63] Su, Y., Shu, L., Mansimov, E., Gupta, A., Cai, D., Lai, Y.-A., and Zhang, Y. Multi-task pre-training for plug-and-play task-oriented dialogue system. _arXiv preprint arXiv:2109.14739_, 2021.
* [64] Sun, T., Shao, Y., Qian, H., Huang, X., and Qiu, X. Black-box tuning for language-model-as-a-service. In _International Conference on Machine Learning_, pp. 20841-20855. PMLR, 2022.
* [65] Suzgun, M., Melas-Kyriazi, L., and Jurafsky, D. Follow the wisdom of the crowd: Effective text generation via minimum bayes risk decoding. _arXiv preprint arXiv:2211.07634_, 2022.
* [66] Thoppilan, R., De Freitas, D., Hall, J., Shazeer, N., Kulshreshtha, A., Cheng, H.-T., Jin, A., Bos, T., Baker, L., Du, Y., et al. LaMDA: Language models for dialog applications. _arXiv preprint arXiv:2201.08239_, 2022.
* [67] Vu, T., Lester, B., Constant, N., Al-Rfou, R., and Cer, D. Spot: Better frozen model adaptation through soft prompt transfer. _arXiv preprint arXiv:2110.07904_, 2021.
* [68] Wei, J., Tay, Y., Bommasani, R., Raffel, C., Zoph, B., Borgeaud, S., Yogatama, D., Bosma, M., Zhou, D., Metzler, D., et al. Emergent abilities of large language models. _arXiv preprint arXiv:2206.07682_, 2022.
* [69] Wei, J., Wang, X., Schuurmans, D., Bosma, M., Chi, E., Le, Q., and Zhou, D. Chain of thought prompting elicits reasoning in large language models. _arXiv preprint arXiv:2201.11903_, 2022.
* [70] Wu, J., Ouyang, L., Ziegler, D. M., Stiennon, N., Lowe, R., Leike, J., and Christiano, P. Recursively summarizing books with human feedback. _arXiv preprint arXiv:2109.10862_, 2021.
* [71] Wu, Y., Schuster, M., Chen, Z., Le, Q. V., Norouzi, M., Macherey, W., Krikun, M., Cao, Y., Gao, Q., Macherey, K., et al. Google's neural machine translation system: Bridging the gap between human and machine translation. _arXiv preprint arXiv:1609.08144_, 2016.
* [72] Yang, Y., Li, Y., and Quan, X. UBAR: Towards fully end-to-end task-oriented dialog system with GPT-2. In _Proceedings of the AAAI Conference on Artificial Intelligence_, pp. 14230-14238, 2021.

* [73] Zhang, S., Diab, M., and Zettlemoyer, L. Democratizing access to large-scale language models with opt-175b. _Meta AI_, 2022.
* [74] Zhang, T., Kishore, V., Wu, F., Weinberger, K. Q., and Artzi, Y. Bertscore: Evaluating text generation with bert. _arXiv preprint arXiv:1904.09675_, 2019.
* [75] Zhang, T., Ladhak, F., Durmus, E., Liang, P., McKeown, K., and Hashimoto, T. B. Benchmarking large language models for news summarization. _arXiv preprint arXiv:2301.13848_, 2023.
* [76] Zhang, T., Wang, X., Zhou, D., Schuurmans, D., and Gonzalez, J. E. TEMPERA: Test-time prompt editing via reinforcement learning. In _International Conference on Learning Representations_, 2023.
* [77] Zhang, Y., Ou, Z., and Yu, Z. Task-oriented dialog systems that consider multiple appropriate responses under the same context. In _Proceedings of the AAAI Conference on Artificial Intelligence_, pp. 9604-9611, 2020.
* [78] Zheng, L., Chiang, W.-L., Sheng, Y., Zhuang, S., Wu, Z., Zhuang, Y., Lin, Z., Li, D., Xing, E., et al. Judging llm-as-a-judge with mt-bench and chatbot arena. _arXiv preprint arXiv:2306.05685_, 2023.
* [79] Zhou, Y., Muresanu, A. I., Han, Z., Paster, K., Pitis, S., Chan, H., and Ba, J. Large language models are human-level prompt engineers. _arXiv preprint arXiv:2211.01910_, 2022.
* [80] Ziegler, D. M., Stiennon, N., Wu, J., Brown, T. B., Radford, A., Amodei, D., Christiano, P., and Irving, G. Fine-tuning language models from human preferences. _arXiv preprint arXiv:1909.08593_, 2019.

Implementation Details

### Summarization

We use the representative benchmark dataset CNN/Daily Mail for news summarization [43]. This dataset contains 287,113 training examples, 13,368 validation examples, and 11,490 test examples. To keep the API usage cost low, we use a subset of 1,000, 2,000, and 4,000 for training, 500 for validation, and 500 for testing. Each example in the dataset consists of a news article along with its corresponding highlight/summary written by human authors. In order to train the policy model through supervised fine-tuning, we employed the textrank [41] algorithm to automatically extract keywords from each article and only retained those mentioned in the corresponding reference summary. We initialize the policy model using the 780M FLAN-T5-large model [11, 53], and use it to guide the black-box LLM ChatGPT. The hyperparameters used in our experiments are detailed in Table 3. All the experiments are run on a server equipped with 8 NVIDIA RTX A6000 GPUs.

### Dialogue response generation

The MultiWOZ dataset is a widely-used task-oriented dialogue dataset consisting of 8,438 dialogues for training, 1,000 dialogues for validation, and 1,000 dialogues for testing. For each turn of the dialogues, in addition to the user utterances and system response, the annotations of belief state, database query results, and dialogue act are also provided. To process the data, we followed the approach used in UBAR [72]. Specifically, we employed delexicalization by replacing specific slot values with corresponding placeholders. These placeholders can be filled based on the results of a database search. The annotated dialogue acts serve as the stimulus in our approach. Table 4 provides information on all the dialogue acts and slots present in the dataset. We converted the structured dialogue acts, originally in the form of <domain, slot, value> triplets, into text format like _[domain1][inform] slot1... [request] slot1... [domain2][reqmore]_, where domains, acts, and slot values are all bracketed.

\begin{table}
\begin{tabular}{l l} \hline \hline
**Model Params** & **Hyperparameter values** \\ \hline Supervised fine-tuning (SFT) & batch size: \(8\) \\  & epochs: \(5\) \\  & learning rate: 0.00002 \\  & learning rate scheduler: linear \\  & weight decay: 0.01 \\ \hline RL (NLPO) & steps per update: \(5120\) \\  & total number of steps: \(51200\) \\  & batch size: \(8\) \\  & epochs per update: \(5\) \\  & learning rate: 0.00002 \\  & entropy coefficient: \(0.0\) \\  & initial kl coeff: \(0.005\) \\  & target kl: \(0.5\) \\  & discount factor: 0.99 \\  & gae lambda: \(0.95\) \\  & clip ratio: \(0.2\) \\  & value function coeff: \(0.5\) \\  & rollouts to be \(100\) \\  & top mask ratio: \(0.9\) \\  & target update iterations: \(20\) \\ \hline Tokenizer & padding side: right \\  & truncation side: right \\  & max length: 512 \\ \hline Policy model decoding & sampling: True \\  & temperature: 0.7 \\  & min length: \(10\) \\  & max new tokens: 80 \\ \hline LLM decoding & sampling: True \\  & temperature: 0.7 \\  & top-: \(1.0\) \\  & max new tokens: \(180\) \\ \hline \hline \end{tabular}
\end{table}
Table 3: Hyperparameters for experiments on the CNN/Daily Mail dataset.

We used 780M Flan-T5-Large for our policy model to guide the ChatGPT and Codex LLMs. During the supervised fine-tuning of the policy model, we trained it to generate stimulus converted from the dialogue acts based on the given dialogue context. The policy model was trained for 25 epochs using 80 dialogues from the MultiWOZ2.0 and MultiWOZ2.1 datasets. When 800 dialogues are given, it was trained for 8 epochs on the MultiWOZ2.0 dataset and 20 epochs on the MultiWOZ2.1 dataset. All the hyperparameters setup is presented in Table 5.

### Chain of Thought reasoning

We use our approach to generate instance-specific chain of thought (CoT) trigger prompts. Following previous work [26; 79], we evaluate two widely used arithmetic reasoning datasets MultiArith [57] and AQuA [35]. We compare with the 14 human-crafted chain-of-thought prompts evaluated in [26], part of which are collected from [1; 56]. We also compare with the prompt automatically designed by the APE approach [79]. We use the The hyperparameters used in our experiments are detailed in Table 6.

\begin{table}
\begin{tabular}{|l|l|} \hline dialogue acts & inform\({}^{*}\) / request\({}^{*}\) / select\({}^{1235}\) / recommend/\({}^{123}\) / nooffer\({}^{1235}\) / offerbook\({}^{125}\) / offerbook\({}^{125}\) / \\ \multicolumn{1}{c}{} & \multicolumn{1}{c}{offerbooked\({}^{125}\) / nobook\({}^{12}\) / welcome\({}^{*}\) / greet\({}^{*}\) / bye\({}^{*}\) / repmore\({}^{*}\)} \\ \hline \multirow{4}{*}{slots} & address\({}^{12367}\) / postcode\({}^{12367}\) / phone\({}^{123467}\) / name\({}^{123}\) / area\({}^{123}\) / pricerange\({}^{12}\) / \\  & type\({}^{23}\) / internet\({}^{2}\) / parking\({}^{2}\) / stars\({}^{2}\) / departure\({}^{45}\) / destination\({}^{45}\) / leave\({}^{45}\) / \\ \multicolumn{1}{c}{} & arrive\({}^{45}\) / people\({}^{123}\) / reference\({}^{1235}\) / id\({}^{5}\) / price\({}^{45}\) / time\({}^{15}\) / department\({}^{6}\) / \\ \multicolumn{1}{c}{} & day\({}^{125}\) / stay\({}^{2}\) / car\({}^{4}\) / food\({}^{1}\) \\ \hline \hline \end{tabular}
\end{table}
Table 4: Full ontology for all domains in MultiWOZ2.0 [7] dataset. The upper script indicates which domains it belongs to. *: universal, 1: restaurant, 2: hotel, 3: attraction, 4: taxi, 5: train, 6: hospital, 7: police.

\begin{table}
\begin{tabular}{l l} \hline \hline
**Model Params** & **Hyperparameter values** \\ \hline Supervised fine-tuning (SFT) & batch size: \(8\) \\  & epochs: \(25/25/8/20\) \\  & learning rate: \(0.00002\) \\  & learning rate scheduler: linear \\  & weight decay: \(0.01\) \\ \hline RL (NLPO) & steps per update: \(51200\) \\  & total number of steps: \(51200\) \\  & batch size: \(8\) \\  & epochs per update: \(5\) \\  & learning rate: \(0.000002\) \\  & entropy coefficient: \(0.0\) \\  & initial k coeff: \(0.01\) \\  & target kl: \(0.2\) \\  & discount factor: \(0.99\) \\  & age lambda: \(0.95\) \\  & clip ratio: \(0.2\) \\  & value function coeff: \(0.5\) \\  & rollouts top k: \(50\) \\  & top mask ratio: \(0.9\) \\  & target update iterations: \(20\) \\ \hline Tokenizer & padding side: left \\  & truncation side: left \\  & max length: 512 \\ \hline Policy LM decoding & num, beams: 5 \\  & min length: 1 \\  & max new tokens: \(40\) \\ \hline LLM decoding & sampling: True \\  & temperature: \(0.7\) \\  & top,p: \(1.0\) \\  & max new tokens: \(64\) \\ \hline \hline \end{tabular}
\end{table}
Table 5: Hyperparameters for experiments on the MultiWOZ dataset.

## Appendix B Additional results

### Summarization

Analysis of generated hints/keywordsWe outlined changes in the number of generated keywords, hit keywords (those matched in the reference summary), and corresponding ROUGE-1 scores throughout the training process in Figure 5. As the training progresses, the policy model appears to generate keywords with increasing precision, which aligns positively with the increasing ROUGE-1 score. However, it is observed that even when keywords are generated with high precision if their quantity is too limited, the performance doesn't necessarily improve.

\begin{table}
\begin{tabular}{l l} \hline \hline
**Model Params** & **Hyperparameter values** \\ \hline Supervised fine-tuning (SFT) & batch size: 16 \\ epochs: \(2\) & \\ learning rate: 0.00002 \\ learning rate schedule: linear \\ weight decay: \(0.01\) \\ \hline RL (NLPO) & steps per update: \(5120\) \\ total number of steps: \(51200\) \\ batch size: 16 \\ epochs per update: \(5\) \\ learning rate: 0.00002 \\ entropy coefficient: \(0.0\) \\ initial kl coeff: \(0.001\) \\ target kl: \(0.5\) \\ discount factor: \(0.99\) \\ gae lambda: \(0.95\) \\ clip ratio: \(0.2\) \\ value function coeff: \(0.5\) \\ rollouts top k: \(50\) \\ top mask ratio: \(0.9\) \\ target update iterations: \(20\) \\ \hline Tokenizer & padding side: right \\ truncation side: right \\ max length: 128 \\ \hline Policy LM decoding & sampling: True \\ temperature: \(0.7\) \\ max new tokens: \(32\) \\ \hline LLM decoding & sampling: True \\ temperature: \(0.7\) \\ top-: \(1.0\) \\ max new tokens: \(32\) \\ \hline \hline \end{tabular}
\end{table}
Table 6: Hyperparameters for experiments on the zero-shot chain-of-thought reasoning.

Figure 5: Number of generated keywords, keyword precision, and summary ROUGE-1 during the training process on 4000 samples.

We also employed the space package [20] for Part-of-Speech (POS) and Named Entity Recognition (NER) tagging on the generated keywords. The results are shown in the Figure 6. For the POS tagging, we observe that nouns (NOUN) and proper nouns (PROPN) are the most frequently generated keywords, which can serve as informative keywords. As for the NER tagging, the most commonly generated keywords include persons (PERSON), geopolitical entities (GPE), dates (DATE), organizations (ORG), and numerals (CARDINAL).

GPT-4 EvaluationTo gain a better understanding of generated summaries guided by keywords, we employed GPT-4 to evaluate the summaries. It has been shown that the LLM, especially GPT-4 is able to produce consistently high-quality assessments of text generation, showing high human alignment and thus being a good alternative to human evaluations [78, 38]. As we employ ROUGE scores as rewards for tuning the policy model to generate keywords that guide the LLM towards generating summaries more aligned with the reference summary, we leveraged GPT-4 to assess the overlap of key points (hints) between generated and reference summaries. Specifically, we use GPT-4 to compare the summaries generated with our proposed DSP and the original standard prompting. GPT-4 was instructed to first generate an explanation, followed by the corresponding answer. We prompt GPT-4 as follows:

You are provided with an article and a corresponding reference summary. Additionally, there will be two alternative summaries labeled as 'A' and 'B'. Your task is to identify which of the two summaries (A or B) is more similar to the reference summary. This similarity should be evaluated based on the presence and accuracy of key points from the reference summary in each alternative summary. Please detail your reasoning in an explanation. After your explanation, classify the task outcome as: select 'A wins' if Summary A aligns more closely with the reference summary, 'B wins' if Summary B aligns more closely, or 'Tie' if both summaries align equally well with the reference summary.

The GPT-4 evaluation results are shown in Figure 7. We found that GPT-4 can produce reasonable and detailed explanations of their assessment. From our test set of 500 samples: DSP-generated summaries were favored 255 times (51.0%), summaries generated with original standard prompting were favored 222 times (44.4%), while a tie was observed in 23 cases (4.6%).

Zero-shot promptingIn our main experiments, we employ few-shot prompting with 3 examples in the prompt during training and evaluation. The specific prompt and demonstration examples utilized are detailed in Appendix D. To test whether the approach performed well under the zero-shot setting, we evaluated the following two experimental settings on the CNNDM dataset with 4,000 training samples: (1) few(3)-shot during training and zero-shot during evaluation; and (2) zero-shot during both training and evaluation.

As shown in Figure 8, when both training and testing are conducted using zero-shot prompting, the performance improvement over standard prompting is still comparable to the scenario where both are conducted using few-shot prompting. In addition, we observed that our approach exhibits

Figure 6: Part-of-Speech (POS) and Named Entity Recognition (NER) tagging on the generated hints, i.e., keywords.

robustness when different numbers of examples are used in prompts during training and evaluation, as our approach with few(3)-shot training still outperforms standard prompting under zero-shot testing.

### Dialogue response generation

Low-resource resultsIn addition to the performance of compared baseline models with full training data as shown in the main paper, we also present their performance in the low-resource setting in Table 7. It is important to note that most of these methods struggle to achieve acceptable performance with only 1% of the training data (80 dialogues), and thus their results in the 1% setting are not reported. As for those with reported performance with 80 dialogues, their results are significantly worse compared to Codex and ChatGPT guided by the policy model. Furthermore, even with around 800 dialogues, their Inform and Success rates were still much lower than those achieved by ChatGPT and Codex.

\begin{table}
\begin{tabular}{l c c c c c c c c} \hline \hline \multirow{2}{*}{**Method**} & \multicolumn{3}{c}{1\% of training data (80 dialogues)} & \multicolumn{3}{c}{10\% of training data (800 dialogues)} \\ \cline{2-10}  & Inform & Succ. & BLEU & Comb. & Inform & Succ. & BLEU & Comb. \\ \hline DAMD [77] & 34.4 & 9.1 & 8.1 & 29.9 & 55.3 & 30.3 & 13.0 & 55.8 \\ Soloist [49] & 58.4 & 35.3 & 10.6 & 57.4 & 69.9 & 51.9 & 14.6 & 75.5 \\ PPTOD [63] & 74.4 & 52.4 & 13.0 & 76.4 & 84.4 & 68.4 & 15.6 & 92.0 \\ UBAR [72] & - & - & - & - & 82.5 & 66.6 & 17.7 & 92.3 \\ GALAXY [19] & - & - & - & - & 90.0 & 75.9 & 17.5 & 100.2 \\ \hline \hline \multicolumn{10}{c}{_Codex_} \\ \hline Standard Prompting & 76.7 & 41.5 & 7.7 & 66.8 & 76.7 & 41.5 & 7.7 & 66.8 \\ DSP w/ SFT & 74.9 & 66.3 & 11.1 & 81.7 & 79.4 & 71.9 & 11.3 & 87.0 \\ DSP w/ SFT+RL & 91.0 & 76.0 & 9.8 & 93.3 & 96.0 & 86.9 & 10.7 & 102.2 \\ \hline \hline \multicolumn{10}{c}{_ChatGPT_} \\ \hline Standard Prompting & 71.8 & 44.1 & 10.5 & 68.4 & 71.8 & 44.1 & 10.5 & 68.4 \\ DSP w/ SFT & 76.6 & 66.5 & 11.2 & 82.8 & 72.7 & 64.7 & 11.8 & 80.5 \\ DSP w/ SFT+RL & 90.9 & 82.2 & 10.2 & 96.7 & 95.3 & 82.3 & 10.9 & 99.6 \\ \hline \hline \end{tabular}
\end{table}
Table 7: Low-resource evaluation on the MultiWOZ 2.0 dataset, where Succ. and Comb. denote the Success and Combined Score metrics, respectively.

Figure 7: GPT-4 evaluation on comparing Figure 8: Zero-shot evaluation results. DSP (0-shot) the summaries generated with our approach denotes that we use 0-shot prompting during RL DSP, i.e., with the guidance of our gener-training and DSP (3-shot) indicates we use 3-shot acted keywords, and the original standard prompting during RL training. prompting, i.e., without keyword guidance.

[MISSING_PAGE_FAIL:21]

[MISSING_PAGE_EMPTY:22]

\begin{table}
\begin{tabular}{|p{142.3pt}|p{284.5pt}|} \hline  & **User:** i want to find a moderate -ly priced restaurant. \\
**Dialogue context** & **Assistant:** i have [value\_choice] available for you! is there a certain area or cuisine that interests you? \\
**User:** yes i would like the restaurant to be located in the center of the attractions. [db\_3] \\ \hline
**Oracle dialogue acts** & [restaurant] [inform] choice [request] food \\ \hline
**Oracle system response** & there are [value\_choice] restaurant -s available in the [value\_area]. how about a specific type of cuisine? \\ \hline \hline \multicolumn{3}{|c|}{_Standard prompting_} \\ \hline
**Generated response (Chat-GPT)** & the [value\_name] is located in the center of the attractions. would you like me to book a table? \\ \hline
**SacreBLEU** & **14.09** \\ \hline \hline \multicolumn{3}{|c|}{_Directional Stimulus Prompting (SFT)_} \\ \hline
**Generated dialogue acts (T5)** & [restaurant] [inform] food name area choice [recommend] price \\ \hline
**Generated response (Chat-GPT)** & i would suggest [value\_name] in the [value\_area] area. they have [value\_food] cuisine and are moderate in price. are you interested? \\ \hline
**SacreBLEU** & **16.40** \\ \hline \hline \multicolumn{3}{|c|}{_Directional Stimulus Prompting (SFT+RL)_} \\ \hline
**Generated dialogue acts (T5)** & [restaurant] [inform] choice [request] food \\ \hline
**Generated summary** & i have [value\_choice] restaurants in the area. do you have a specific cuisine in mind? \\ \(\mathbf{(ChatGPT)}\) & \\ \hline
**SacreBLEU** & **22.80** \\ \hline \end{tabular}
\end{table}
Table 10: An example from the MultiWOZ dataset. The policy model (T5) generates the dialogue acts given the dialog context. With our approach DSP, ChatGPT generates the response conditioned on the generated dialogue acts.

Figure 9: The prompt for standard prompting on the CNN/Daily Mail dataset.

[MISSING_PAGE_FAIL:25]

## Appendix B

Figure 11: The prompt for standard prompting on the MultiWOZ dataset.

## Appendix A

Figure 12: The prompt for Directional Stimulus Prompting on the MultiWOZ. Compared with the prompts used in standard prompting shown in Figure 9, we add stimulus hints (dialogue acts) for each system turn, which are highlighted in red. In addition, we add explanations of dialogue acts at the beginning to help the model understand their meanings.