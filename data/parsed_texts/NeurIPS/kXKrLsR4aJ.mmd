Input-to-State Stable Coupled Oscillator Networks for Closed-form Model-based Control in Latent Space

 Maximilian Stolzle

Department of Cognitive Robotics

Delft University of Technology

M.W.Stolzle@tudelft.nl

&Cosimo Della Santina

Department of Cognitive Robotics

Delft University of Technology

C.DellaSantina@tudelft.nl

###### Abstract

Even though a variety of methods have been proposed in the literature, efficient and effective latent-space control (i.e., control in a learned low-dimensional space) of physical systems remains an open challenge. We argue that a promising avenue is to leverage powerful and well-understood closed-form strategies from control theory literature in combination with learned dynamics, such as potential-energy shaping. We identify three fundamental shortcomings in existing latent-space models that have so far prevented this powerful combination: (i) they lack the mathematical structure of a physical system, (ii) they do not inherently conserve the stability properties of the real systems, (iii) these methods do not have an invertible mapping between input and latent-space forcing. This work proposes a novel Coupled Oscillator Network (CON) model that simultaneously tackles all these issues. More specifically, (i) we show analytically that CON is a Lagrangian system - i.e., it possesses well-defined potential and kinetic energy terms. Then, (ii) we provide formal proof of global Input-to-State stability using Lyapunov arguments. Moving to the experimental side, we demonstrate that CON reaches SoA performance when learning complex nonlinear dynamics of mechanical systems directly from images. An additional methodological innovation contributing to achieving this third goal is an approximated closed-form solution for efficient integration of network dynamics, which eases efficient training. We tackle (iii) by approximating the forcing-to-input mapping with a decoder that is trained to reconstruct the input based on the encoded latent space force. Finally, we leverage these three properties and show that they enable latent-space control. We use an integral-saturated PID with potential force compensation and demonstrate high-quality performance on a soft robot using raw pixels as the only feedback information.

## 1 Introduction

Learning how the environment evolves around us from high-dimensional observations (i.e., world models [1]) is essential for achieving both artificial and physical intelligence [2]. For example, world models are required for effectively planning an artificial/robotic agent's actions in complex and unstructured environments [3]. However, learning such dynamics directly in high-dimensional observation space is usually intractable. Seminal works have shown that we can leverage autoencoders to compress the state information into a low-dimensional latent space [4, 5] in which it is much more feasible to learn the dynamics [6, 7, 8, 9, 10]. However, strong limitations still persist when it comes to using these learned models to generate low-level intelligence.

One outstanding challenge is how to perform closed-loop control in the learned latent space - i.e., how to generate control inputs based on a high dimensional sensory input such that a desired movement is generated. Prior works have explored, among other approaches, Reinforcement Learning (RL) [11, 12, 13, 14], Model Predictive Control (MPC) [7, 15, 16, 17], Linear-quadratic Regulators (LQRs) [18, 19, 20] and gradient-based optimization [21] for planning and control towards a target evolution that is given in observation space. However, all existing latent-space control strategies have shortcomings, such as a limited planning horizon and slow control rates (MPC and gradient-based approaches), sample inefficiency (RL), or they pose a requirement for learning linear dynamics [6] (LQR), which is not even possible for systems that are inherently non-linearizable [22]. One interesting avenue is to leverage model-based control approaches, such as potential shaping [23; 24; 10], for effective and computationally efficient control in latent space [25]. For these techniques to be feasible, the dynamical model needs to fulfill four characteristics: (i) the dynamics need to have the mathematical structure of physical systems, (ii) conserve the stability properties of real systems, (iii) the latent state needs to be relatively low-dimensional, and (iv) there needs to exist a well-defined, invertible mapping between the input and the forcing in latent space. However, existing model structures that are used for learning latent dynamics [26] do not meet all of these criteria. Relevant examples are Multilayer Perceptrons (MLPs), Neural ODEs (NODEs) [27; 28], many variants of Recurrent Neural Networks (RNNs) (e.g., LSTMs [29], Gated Recurrent Units (GRUs) [30], etc.), and physics-informed neural networks (e.g., Lagrangian Neural Networks (LNNs) [31; 32; 10], Hamiltonian Neural Networks (HNNs)) [33]. For example, MLPs do not have a physical interpretation and do not provide an invertible mapping of the forcing generated by the input, NODEs are usually not easily stabilizable [34], most RNNs require a relatively high-dimensional latent space (i.e., many hidden states), and energy-shaping control approaches based on LNNs [10] do not come with any formal stability guarantees.

In recent years, oscillatory networks [35; 36; 37; 38; 39] have been shown to exhibit state-of-the-art performance on time sequence modeling tasks while being parameter-efficient, thus fulfilling our requirement (iii). Consequently, we believe that they are a promising option for control-oriented dynamics learning in latent space. Still, these models do not fulfill the remaining requirements that we have listed above. Despite being an interpretable combination of harmonic oscillators, they do not have the structure of a physical system - i.e., they do not possess a well-defined energy function. Moreover, only local stability [35; 37] has been shown, with sufficient conditions that appear to be very stringent. Finally, in addition to training an encoder that maps inputs to latent-space forcing, we propose also training a decoder that learns to reconstruct inputs based on latent-space forcing. This enables us to easily switch between inputs and forcing, which is essential when implementing control strategies.

We resolve all the above-mentioned challenges by proposing Coupled Oscillator Networks (CONs), a new formulation of a coupled oscillator network that is inherently Input-to-State Stability (ISS) stable, for learning the dynamics of physical systems and subsequently exploiting its structure for model-based control in latent space. The network consists of damped, harmonic oscillators connected through elastic springs, damping elements, and a neuron-like coupling force and can be excited by a nonlinear actuation term. We identify a transformation into a set of coordinates from which we can derive the networks' kinetic and potential energy. This allows us to leverage Lyapunov arguments [40] for proving the global asymptotic stability of the unforced system and ISS stability for the forced system under relatively mild assumptions on the network parameters. Even though we constrain the dynamics to a very specific structure, we demonstrate (a) the CON network achieves similar performance as NODEs when learning the dynamics of unactuated, mechanical systems with two

Figure 1: **Panel (a)**: The proposed CON network consists of \(n\) damped harmonic oscillators that are coupled through the neuron-like connection \(\tanh(Wx+b)\) and the non-diagonal stiffness \(K-k\) and damping coefficients \(D-d\), respectively. The state of the network is captured by the positions \(x(t)\) and velocities \(\dot{x}(t)\) of the oscillators. The time-dependent input is mapped through the (possibly nonlinear) function \(g(u)\) to a forcing \(\tau\) acting on the oscillators. **Panel (b)**: Exploiting Coupled Oscillator Networks (CONs) for learning latent dynamics from pixels: We encode the initial observation \(o(t_{0})\) and the input \(u(t)\) into latent space where we leverage the Coupled Oscillator Network (CON) to predict future latent states. Finally, we decode both the latent-space torques \(\tau(t)\) and the predicted latent states \(z(t)\).

orders of magnitude fewer parameters and (b) that the proposed model achieves, for the complex task of learning the actuated, highly nonlinear dynamics of continuum soft robots [41, 42] directly from pixels, a \(60\,\%\) lower prediction error than Coupled Oscillatory Recurrent Neural Network (coRNN) [35] and reaches the SoA performance across all techniques that we tested. Finally, we show some initial results that the proposed CON model is also able to learn the latent dynamics of Partial Differential Equations (PDEs), in this case containing reaction-diffusion [9, 43] dynamics.

Subsequently, we derive an approximate closed-form solution, that is, in parameter regimes in which the linear, decoupled dynamics dominate transient, more accurate than numerical integrators with comparable computational requirements and which increases training speed by 2x with a small decrease in prediction accuracy. Finally, as we can derive the system's potential energy, we can leverage potential shaping [23, 24] to derive a controller that combines an integral-saturated PID controller with a feedforward term compensating potential forces. As the feedback acts on a well-shaped potential field, tuning the feedback gains becomes very simple and out-of-the-box, and the controller exhibits a faster response time and a \(26\,\%\) lower trajectory tracking Root Mean Squared Error (RMSE) than a pure feedback controller based on a latent NODE [27] model.

The proposed methodology is particularly well-suited for learning the latent dynamics of mechanical systems with continuous dynamics, dissipation, and a single, attractive equilibrium point. Examples of such systems include many soft robots, deformable objects with dominant elastic behavior, Lagrangian systems immersed in a dominant potential field, or locally other mechanical systems such as robotic manipulators, legged robots, etc. For these systems, we can fully leverage the structural prior of the proposed latent dynamics, including the integrated stability guarantees. If the system is actuated, the learned dynamics can be subsequently exploited for model-based control, as demonstrated in Sec. 5.

The code associated with this paper is available on GitHub1.

Footnote 1: https://github.com/tud-phi/uncovering-iss-coupled-oscillator-networks-from-pixels

## 2 Input-to-State Stable (ISS) Coupled Oscillator Networks (CONs)

Formulation.The integral component to (coupled) oscillatory RNNs [35, 36, 37, 38] are one-dimensional, potentially damped, harmonic oscillators, which are described by their state \(y_{i}=\left[x_{i}\quad\dot{x}_{i}\right]^{\mathrm{T}}\in\mathbb{R}^{2}\), where \(x_{i}\) and \(\dot{x}_{i}\) are the position and velocity of the oscillator, respectively. Then, the oscillator's dynamics are defined by the following Equation of Motion (EOM)

\[m_{i}\,\ddot{x}_{i}(t)+d_{i}\,\dot{x}_{i}(t)+\kappa_{i}\,x_{i}(t)=F_{i}(t), \qquad\text{with }m_{i},\kappa_{i},d_{i}\in\mathbb{R}^{+}.\] (1)

Here, \(m_{i}\) is the mass, \(\kappa_{i}\) is the stiffness, and \(d_{i}\) is the damping coefficient of the damped harmonic oscillator. \(F_{i}(t)\in\mathbb{R}\) is a (possibly time-dependent) external forcing term acting on the mass.

Even though the state is extremely low dimensional and the number of parameters is small, this single, damped harmonic oscillator can already exhibit a variety of (designable) behaviors: The expressions \(\omega_{\mathrm{n},i}=\sqrt{\frac{\kappa_{i}}{m_{i}}}\) and \(\zeta_{i}=\frac{d_{i}}{2\,\sqrt{\kappa_{i}\,m_{i}}}\) let us determine the natural frequency and the damping factor, respectively and allow us to design the transient behavior. For example, \(\omega_{\mathrm{n},i}\) lets us isolate a spectrum of the input signal \(F_{i}(t)\)[37] and \(\zeta_{i}\) determines the damping regime: underdamped (\(\omega_{\mathrm{n},i}<1\)), critically damped (\(\omega_{\mathrm{n},i}=1\)), overdamped (\(\omega_{\mathrm{n},i}>1\)). Furthermore, as (damped) harmonic oscillators are omnipresent in nature (and especially in physical systems), they have been intensively studied and are well understood (e.g., characteristics, closed-form solutions, etc.). In this work, we will exploit some of these properties and knowledge to learn stable (latent) dynamics efficiently.

By intercoupling damped harmonic oscillators, we can drastically increase the expressiveness of the dynamical system [35, 37, 38] while preserving some of the intuition and understanding we have for these systems. In this work, we propose a ISS-stable CON consisting of \(n\) damped harmonic oscillators that are coupled through both linear and nonlinear terms. The networks' state is defined as \(y=\begin{bmatrix}x^{\mathrm{T}}&\dot{x}^{\mathrm{T}}\end{bmatrix}^{\mathrm{T}} \in\mathbb{R}^{2n}\) and its dynamics can be formulated as a 2nd-order Ordinary Differential Equation (ODE)

\[\dot{y}(t)=\begin{bmatrix}\frac{\mathrm{d}\pi}{\mathrm{d}t}\\ \frac{\mathrm{d}\pi}{\mathrm{d}t}\end{bmatrix}=f(y(t),u(t))=\begin{bmatrix} \dot{x}(t)\\ g(u(t))-Kx(t)-D\,\dot{x}(t)-\tanh(W\,x(t)+b)\end{bmatrix},\] (2)

where \(K,D\in\mathbb{R}^{n\times n}\) are the linear stiffness and damping matrices, respectively. The neuron-inspired term \(\tanh(W\,x(t)+b)\) with \(W\in\mathbb{R}^{n\times n}\), \(b\in\mathbb{R}^{n}\) provides nonlinear coupling between the harmonic oscillators. The network is excited by the time-dependent input \(u(t)\in\mathbb{R}^{m}\) through the possibly nonlinear mapping \(g:\mathbb{R}^{m}\to\mathbb{R}^{n}\). Specifically, we consider in this work a formulation where an input-dependent matrix \(B(u)\in\mathbb{R}^{n\times m}\) projects the input \(u(t)\) to a time-dependent forcing on the oscillators: \(\tau=g(u)=B(u)\,u\). Here \(B(u)\) could, for example, be parametrized by a MLP.

We specifically designed the network architecture such that (i) the system exhibits a unique and isolated equilibrium and (ii) we can derive expressions for the kinetic and potential energies. These two features allow us to (a) prove Global Asymptotic Stability (GAS) and ISS stability using an established procedure based on strict Lyapunov arguments [44, 45], and (b) implement model-based controller based on potential shaping.

One key insight of this work is that in the coordinates \(x(t),\dot{x}(t)\), we cannot derive a potential as the hyperbolic force \(\tanh(\bar{W}x(t)+b)\) is not symmetric. Therefore, we propose a coordinate transformation into \(\mathcal{W}\)-coordinates: \(y_{\mathrm{w}}(t)=\begin{bmatrix}x_{\mathrm{w}}(t)\\ \dot{x}_{\mathrm{w}}(t)\end{bmatrix}=\begin{bmatrix}W\,x(t)\\ \dot{W}\,\dot{x}(t)\end{bmatrix}\in\mathbb{R}^{2n}\). The coordinate transformation is valid if its Jacobian is full-rank, which is the case if \(\mathrm{rank}(W)=n\). In \(\mathcal{W}\)-coordinates, the dynamics can be rewritten as

\[\dot{y}_{\mathrm{w}}(t)=\begin{bmatrix}\frac{\mathrm{d}x_{\mathrm{w}}}{ \mathrm{d}t}\\ \frac{\mathrm{d}x_{\mathrm{w}}}{\mathrm{d}t}\end{bmatrix}=f_{\mathrm{w}}(y(t),u(t))=\begin{bmatrix}\dot{x}_{\mathrm{w}}(t)\\ M_{\mathrm{w}}^{-1}\,\left(g(u(t))-K_{\mathrm{w}}x_{\mathrm{w}}(t)-D_{\mathrm{w} }\,\dot{x}_{\mathrm{w}}(t)-\tanh(x_{\mathrm{w}}(t)+b)\right)\end{bmatrix}\] (3)

with \(K_{\mathrm{w}}=K\,W\), \(D_{\mathrm{w}}=D\,W\) and \(M_{\mathrm{w}}=W^{-1}\).

A difference of this formulation compared to prior work [35, 36, 37, 38] is that (i) the forcing produced by the input term \(\tau=g(u)\) is fully separated from the forcing produced by the elastic coupling terms \(K_{\mathrm{w}}\), and (ii) the generalized force is symmetric, which we prove in Appendix A.1, allowing us to define a potential energy expression, which we can later on leverage for stability analysis and control.

The equilibria \(\bar{g}_{\mathrm{w}}=\begin{bmatrix}\bar{x}_{\mathrm{w}}^{\mathrm{T}}&0^{ \mathrm{T}}\end{bmatrix}^{\mathrm{T}}\in\mathbb{R}^{2n}\) of the unforced network are given by the roots of the characteristic equation \(\tanh(\bar{x}_{\mathrm{w}}+b)+K_{\mathrm{w}}\,\bar{x}_{\mathrm{w}}=0\).

**Lemma 1**.: _Let \(K_{\mathrm{w}}\succ 0\). Then, the dynamics defined in (3) have a single, isolated equilibrium \(\bar{g}_{\mathrm{w}}=\begin{bmatrix}\bar{x}_{\mathrm{w}}^{\mathrm{T}}&0^{ \mathrm{T}}\end{bmatrix}^{\mathrm{T}}\)._

Proof.: The proof is straightforward and provided in Appendix A.2. 

Next, we introduce a mapping into the tilde coordinates \(\tilde{y}_{\mathrm{w}}=y_{\mathrm{w}}-\bar{y}_{\mathrm{w}}\). The residual dynamics (w.r.t. the equilibrium \(\bar{g}_{\mathrm{w}}\)) can now be stated as

\[\dot{\tilde{y}}_{\mathrm{w}}(t)=\tilde{f}_{\mathrm{w}}(y,u)=\begin{bmatrix} \dot{\bar{x}}_{\mathrm{w}}(t)\\ M_{\mathrm{w}}^{-1}\,\left(g(u(t))-K_{\mathrm{w}}\,(\bar{x}_{\mathrm{w}}+\bar{x}_ {\mathrm{w}}(t))-D_{\mathrm{w}}\,\dot{\bar{x}}_{\mathrm{w}}(t)-\tanh(\bar{x}_{ \mathrm{w}}+\tilde{x}_{\mathrm{w}}(t)+b)\right)\end{bmatrix}\] (4)

In the following, we will write \(\|A\|\) to denote the induced norm of matrix \(A\) and \(\lambda_{m}(A)\), \(\lambda_{\mathrm{M}}(A)\) to refer to its minimum and maximum Eigenvalue respectively.

Global Asymptotic Stability (GAS) for the unforced system.We first consider the unforced system with \(\tau=g(u)=0,\ \forall t\in[t_{0},t_{\infty})\) and strive to prove global asymptotic stability [40] for the attractor \(\bar{x}\). We propose a strict Lyapunov candidate with skewed level sets [45]

\[V_{\mu}(\tilde{y}_{\mathrm{w}}) =\frac{1}{2}\,\tilde{y}_{\mathrm{w}}^{\mathrm{T}}\,P_{\mathrm{V}} \,\tilde{y}_{\mathrm{w}}+\sum_{i=1}^{n}\int_{0}^{\tilde{x}_{\mathrm{w},i}} \tanh(\bar{x}_{\mathrm{w},i}+\sigma+b_{i})\,\mathrm{d}\sigma-\sum_{i=1}^{n} \int_{0}^{\tilde{x}_{\mathrm{w},i}}\tanh(\bar{x}_{\mathrm{w},i}+b_{i})\, \mathrm{d}\sigma,\] \[=\frac{1}{2}\,\tilde{y}_{\mathrm{w}}^{\mathrm{T}}\,P_{\mathrm{V}} \,\tilde{y}_{\mathrm{w}}+\sum_{i=1}^{n}\left(\mathrm{cosh}(\bar{x}_{\mathrm{w},i}+\tilde{x}_{\mathrm{w},i}+b_{i})-\mathrm{cosh}(\bar{x}_{\mathrm{w},i}+b_{i} )-\tanh(\bar{x}_{\mathrm{w},i}+b_{i})\,\tilde{x}_{\mathrm{w},i}\right),\] (5) \[\text{with }P_{\mathrm{V}} =\begin{bmatrix}K_{\mathrm{w}}&\mu\,M_{\mathrm{w}}\\ \mu\,M_{\mathrm{w}}^{-1}&M_{\mathrm{w}}\end{bmatrix}\in\mathbb{R}^{2n\times 2n}, \qquad\mathrm{cosh}(\cdot)=\log(\cosh(\cdot)),\qquad\text{and }\mu>0.\]

**Lemma 2**.: _The scalar function \(V_{\mu}(\tilde{y}_{\mathrm{w}})\) defined in (5) is continuously differentiable and verifies the condition \(V_{\mu}(0)=0\). Furthermore, let \(M_{\mathrm{w}},K_{\mathrm{w}}\succ 0\). Now, if we choose \(0<\mu<\frac{\sqrt{\lambda_{m}(M_{\mathrm{w}})\,\lambda_{m}(K_{\mathrm{w}})}}{\|M_ {\mathrm{w}}\|}\coloneqq\mu_{\mathrm{V}}\), then \(V_{\mu}(\tilde{y}_{\mathrm{w}})>0\,\forall\,\tilde{y}_{\mathrm{w}}\in\mathbb{R }^{2n}\setminus\{0\}\). Additionally, then \(V_{\mu}(\tilde{y}_{\mathrm{w}})\) is radially unbounded as \(\|\tilde{y}_{\mathrm{w}}\|\to\infty\Rightarrow V_{\mu}(\tilde{y}_{\mathrm{w}})\to\infty\)._

Proof.: We provide the proof in Appendix A.3 and demonstrate that the bounds on \(\mu\) are required for the Lyapunov candidate to be positive-definite. 

**Theorem 1**.: _Let \(M_{\mathrm{w}},K_{\mathrm{w}}\) and \(D_{\mathrm{w}}\) be positive definite and suppose the system be unforced: \(g(u(t))=0\). Then, \(\tilde{y}_{\mathrm{w}}=0\) is globally asymptotically stable for the system dynamics defined (4) such that \(\dot{V}_{\mu}(\tilde{y}_{\mathrm{w}})<0,\quad\forall\,\tilde{y}_{\mathrm{w}} \in\mathbb{R}^{2n}\setminus\{0\}\)._

[MISSING_PAGE_FAIL:5]

An approximate closed-form solution for the rollout of CON

To predict future system states, we need to integrate the ODE in Eq. (2), with the solution given by \(y(t_{k+1})=y_{t_{k}}+\int_{t_{k}}^{t_{k+1}}f(y(t^{\prime}),u(t^{\prime}))\, \mathrm{d}t^{\prime}\). Unfortunately, a closed-form solution for the nonlinear dynamics \(f(y,u)\) does not (yet) exist. Therefore, we traditionally need to revert to (high-order) numerical ODE solvers that are computationally very expensive and introduce additional memory overhead [47]. This considerably increases the training time of models involving such continuous-time dynamics. While the computational time can be reduced by increasing the (minimum) time step of the integrator, this comes at the expense of an integration error, and we lose (part of) the theoretical guarantees and practical characteristics that the nominal ODE provides. In this work, we take an alternative approach by splitting the problem into (i) decoupled linear dynamics that can be cheaply and precisely integrated using a closed-form solution and (ii) the residual, coupled nonlinear dynamics, which we integrate numerically at a slower time scale:

\[\ddot{x}(t)=\underbrace{F-\kappa x(t)-d\,\dot{x}(t)}_{f_{\mathrm{ 2,id}}(y):\text{occupied, linear dynamics}}+\underbrace{g(u(t)-(K-\kappa)x(t)-(D-d)\,\dot{x}(t)-\tanh(Wx(t)+b)}_{f_{ \mathrm{2,id}}(y,u):\text{ coupled, nonlinear dynamics}}\] (9)

where \(\kappa=\mathrm{diag}(K_{11}\ldots K_{nn})\), \(d=(D_{11}\ldots D_{nn})\) are the diagonal components of the stiffness and damping matrices, respectively, and \(F\in\mathbb{R}^{n}\) is a constant, external forcing term on the oscillators.

For a short-time-interval \(\delta t\), we now approximate (9) as

\[\ddot{x}(t_{k}+\delta t)\approx f_{\mathrm{2,id}}(y(t_{k}+\delta t),F(t_{k})) \qquad\text{with }F(t_{k})=-f_{\mathrm{2,nld}}(y(t_{k}),u(t_{k})).\] (10)

For a scalar 2nd-order, linear ODE of form \(\dot{y}_{i}=f_{\mathrm{2,id}}(x(t^{\prime}),F(t_{k}))\), a well-known, closed-form solution [48] exists. We exploit this characteristic by formulating the approximate solution as

\[y(t_{k}+\delta t)\approx\,f_{\mathrm{CFA-CON}}(y(t_{k}),u(t_{k}))=y(t_{k})+ \int_{t_{k}}^{t_{k}+\delta t}f_{\mathrm{Id}}(y(t^{\prime}),F(t_{k}))\,\mathrm{ d}t^{\prime}\] (11)

and denote \(f_{\mathrm{CFA-CON}}:\mathbb{R}^{n}\times\mathbb{R}^{m}\to\mathbb{R}^{n}\) as the Closed-Form Approximation of the Coupled Oscillator Network (CFA-CON) model. The implicit assumption behind (10) is that \(f_{\mathrm{2,id}}(y)\succ f_{\mathrm{2,nld}}(y,u)\) (i.e., the linear, decoupled dynamics dominate the nonlinear, coupled, time-varying dynamics). We refer the interested reader to Appendix B for derivation and implementation details, where we summarize the integration procedure in Algorithm 1. We also provide qualitative results for the integration accuracy in Fig. 2 and quantitative results for the integration accuracy and computational speed-up w.r.t. numerical integrators in Appendix B.

## 4 Learning control-oriented latent dynamics from pixels

We now move towards learning latent dynamical models based on CON and CFA-CON. CONs are an ideal fit for learning latent dynamics as they guarantee that the latent states stay bounded.

We assume to have access to observations in the form of images \(o\in\mathbb{R}^{h_{\mathrm{o}}\times w_{\mathrm{o}}\times c_{\mathrm{o}}}\), where \(c_{\mathrm{o}}\) denotes the number of channels. Please note that this could also be other high-dimensional observations such as LiDAR scans, point clouds, etc. We now leverage an encoder-decoder architecture to map these high-dimensional observations into a compressed latent space: The encoder \(\Phi:\mathbb{R}^{h_{\mathrm{o}}\times w_{\mathrm{o}}\times c_{\mathrm{o}}} \to\mathbb{R}^{n_{x}}\) with \(n_{z}\ll h_{\mathrm{o}}\,w_{\mathrm{i}}\) identifies a low-dimensional latent representation \(z\in\mathbb{R}^{n_{z}}\) of the images. The decoder \(\Psi:\mathbb{R}^{n_{z}}\to\mathbb{R}^{h_{\mathrm{o}}\times w_{\mathrm{o}} \times c_{\mathrm{o}}}\) approximates the inverse operation by reconstructing an image \(\dot{o}\in\mathbb{R}^{h_{\mathrm{o}}\times w_{\mathrm{o}}\times c_{\mathrm{o}}}\) based on the latent representation. To promote the learning of a smooth and monotonic mapping into latent space, we specifically choose to implement the autoencoder here as a \(\beta\)-Variational Autoencoder (VAE) [5, 49]. Instead of just statically reconstructing the image \(\dot{o}(t_{k})\), we are interested in predicting future observations \(\dot{o}(t_{k+l})\), where \(l\in 1\ldots N\). For this, we train a 2nd-order dynamical model that is, when integrated, able to predict future latent representations \(z(t_{k+l})\). This requires us to define a latent state \(\xi(t)=\begin{bmatrix}z^{\mathrm{T}}(t)&\dot{z}^{\mathrm{T}}(t)\end{bmatrix}^{ \mathrm{T}}\in\mathbb{R}^{2n_{z}}\) consisting of the latent representation and latent velocity \(\dot{z}(t)\in\mathbb{R}^{n_{z}}\).

We now rely on CON with \(n=n_{z}\) oscillators to provide us with the latent state derivative \(\dot{\xi}=f_{\mathrm{w}}(y_{\mathrm{w}}(t),u(t))\), where we defined \(\xi=y_{\mathrm{w}}\), and \(z=x_{\mathrm{w}}\). To ensure stability, we make use of the Cholvesky decomposition to ensure that \(M_{\mathrm{w}},K_{\mathrm{w}}\) and \(D_{\mathrm{w}}\) always remain positive definite (see Theorem 2). It is important to note that we train the encoder, decoder, and dynamical model all jointly. Please refer to Appendix C for more implementation details.

Training.It is important to remember that because we are using a \(\beta\)-VAE [5, 49], the image encoding becomes stochastic, and the encoder neural network actually outputs \(\mu_{z}(o),2\,\log(\sigma_{z})(o)\in\mathbb{R}^{n_{z}}\). After executing the reparametrization trick as \(z(t_{k})\sim\mathcal{N}(\mu_{z}(t_{k}),\sigma_{z}^{2}(t_{k}))\), we formulate the loss function, evaluated on each trajectory consisting of \(N\) time-steps, as

\[\mathcal{L}=\sum_{k=0}^{N}\left(\underbrace{\frac{\mathrm{MSE}(o(t_{k}),\, \Psi(z(t_{k})))}{N+1}}_{\text{Static image reconstruction loss}}+\beta\underbrace{\frac{ \mathcal{D}_{\mathrm{KL}}\left((\mu_{z}(t_{k}),\,\sigma_{z}(t_{k})\right) \right)}{N+1}}_{\text{Kallback-Lollike theorem}}+\sum_{k=1}^{N}\left(\lambda_{ \beta}\underbrace{\frac{\mathrm{MSE}(o(t_{k}),\,\Psi(\dot{z}(t_{k})))}{N}}_{ \text{Dynamic image reconstruction loss}}+\lambda_{k}\underbrace{\frac{\mathrm{MSE}(z(t_{k}),\, \delta(t_{k}))}{N}}_{\text{Linear dynamics consistency loss}}\right),\] (12)where \(\hat{z}(t_{k})\) is predicted by \(\hat{\xi}(t_{k})=\int_{t=t_{0}}^{t_{k}}f_{\xi}(\xi(t^{\prime}),u(t^{\prime}))\, \mathrm{d}t^{\prime}\), and \(\xi(t_{0})=\left[z^{\mathrm{T}}(t_{0})\quad\hat{z}^{\mathrm{T}}(t_{0})\right]^{ \mathrm{T}}\). Here, \(z(t_{0})\) is given by the encoder, and \(\hat{z}(t_{0})\) is approximated using finite differences in image-space (see Appendix C.5 for more details). \(\beta,\lambda_{\sigma},\lambda_{u}\in\mathbb{R}\) are loss weights.

Models.We train the CON with the input-to-forcing mapping \(g(u)=B(u)\,u\), where \(B(u)\) is parametrized by a MLP with a hyperbolic tangent activation function applied in between layers. We report results for two variants of the CON model: for the medium-sized _CON-M_ and small-sized _CON-S_, the MLP consists of five and two layers with a hidden dimension of \(30\) and \(12\), respectively. The model CFA-CON uses the same architecture as _CON-M_. We compare against several popular latent space model architectures: The NODE model uses a MLP with an hyperbolic activation functions and predicts \(\hat{\xi}(t)=f_{\mathrm{NODE}}(\xi(t),u(t))\). To make the comparison fair, we parametrize the NODE's MLP in the same fashion as for _CON-M_. The _MECH-NODE_ integrates prior knowledge towards learning 2nd-order mechanical ODEs and, therefore, predicts \(\hat{z}(t)=f_{\mathrm{MECH-NODE}}(\xi(t),u(t))\). Furthermore, we consider multiple autoregressive models: RNN, GRU, and coRNN and let them parameterize the following transition function: \(\xi(t_{k+1})=f_{\pi}(\xi(t_{k}),\,u(t_{k}))\) As common in the relevant literature [26], we allow the autoregressive models to perform multiple time step transitions before predicting the next sample. For the autoencoder, we use a vanilla Convolutional Neural Network (CNN). More details can be found in Appendix C.

Datasets.We consider in total six datasets that are based on simulations of unactuated mechanical systems, and actuated continuum soft robots. The first three, mechanical dataset are based on the work of Botev et al. [26] and contain video sequences of a mass-spring system with friction (_M-SP+F_), a single pendulum with friction (_S-P+F_), and a double pendulum with friction (_D-P+F_). Continuum soft robots have theoretically infinite Degree of Freedom (DOF), evolve with highly nonlinear and often time-dependent dynamical behaviors, and are notoriously difficult to model from first principles [50]. For that reason, it is a very interesting proposition if we could learn latent-space dynamical models directly from video [51] and later leverage them for control [52]. Therefore, we generate three datasets based on the Piecewise Constant Strain (PCS) soft robot model. _CS_ considers one segment with constant strain and is modeled using three configuration variables. _PCC-NS-2_ and _PCC-NS-3_ only consider bending deformations and contain soft robots with two and three segments, respectively. For all datasets, we render images with a resolution of 32x32px of the system's state. More information on the datasets can be found in Appendix C.1.

We tune all hyperparameters for each model and dataset separately using Optuna [53].

Results.Unactuated mechanical datasets:The results in Tab. 1 show that the _NODE_ model slightly outperforms the _CON_ network on the _M-SP+F_ and _S-P+F_ datasets. However, as the datasets do not consider system inputs, we can remove the input mapping from all models (e.g., _RNN_, _GRU_, _coRNN_, _CON_, and _CFA-CON_). With that adjustment, the _CON_ network has the fewest parameters among all models, particularly two orders of magnitude less than the NODE model. Therefore, we find it very impressive that the CON network is roughly on par with the NODE model. For the _D-P+F_ dataset, we can conclude that the _CFA-CON_ model offers the best performance across all methods. Finally, most of the time, the _CON_ & _CFA-CON_ networks outperform the other baseline methods that have more trainable parameters. **Actuated continuum soft robot datasets:** The results in Tab. 1 show that _CON-M_ matches the performance of the state-of-the-art methods

\begin{table}
\begin{tabular}{c|c|c|c|c|c|c|c} \hline \hline
**Model** & **RMSE M-SP+F** [26] & **RMSE D-P+F** [26] & **RMSE D-P+F** [26] & **RMSE CS \(\downarrow\)** & **RMSE PCC-NS-2** \(\downarrow\)** & **RMSE PCC-NS-3** \(\downarrow\)** \\ \hline RNN & \(0.2739\pm 0.0057\) & \(0.2378\pm 0.0352\) & \(0.1694\pm 0.0004\) & \(\mathbf{0.1011\pm 0.0009}\) & \(0.1373\pm 0.0185\) & \(0.2232\pm 0.0075\) \\ GRU [30] & \(0.0275\pm 0.0033\) & \(0.1457\pm 0.0078\) & \(0.1329\pm 0.0005\) & \(0.1129\pm 0.0109\) & \(0.0951\pm 0.0021\) & \(0.2148\pm 0.0196\) \\ coRNN [53] & \(\mathbf{0.0265\pm 0.0002}\) & \(0.1333\pm 0.0044\) & \(0.1324\pm 0.0026\) & \(0.2537\pm 0.0018\) & \(0.2564\pm 0.0089\) & \(0.2474\pm 0.0018\) \\ NODE [27] & \(\mathbf{0.2646\pm 0.0010}\) & \(\mathbf{0.1260\pm 0.0013}\) & \(0.1324\pm 0.0024\) & \(0.2415\pm 0.0021\) & \(0.1867\pm 0.0561\) & \(0.3373\pm 0.0565\) \\ MECH-NODE & \(0.0328\pm 0.0034\) & \(0.1650\pm 0.0205\) & \(0.1710\pm 0.0111\) & \(0.2494\pm 0.0028\) & \(0.1035\pm 0.0012\) & \(0.1900\pm 0.0024\) \\ CON-S (only \(0.0303\pm 0.0053\) & \(0.1030\pm 0.0064\) & \(0.1323\pm 0.0018\) & \(0.1093\pm 0.0164\) & \(0.0996\pm 0.0012\) & \(0.1792\pm 0.0038\) \\ CON-M (our) & \(0.0333\pm 0.0053\) & \(0.1303\pm 0.0064\) & \(0.1323\pm 0.0018\) & \(0.1063\pm 0.0027\) & \(0.1008\pm 0.0006\) & \(\mathbf{0.1755\pm 0.0023}\) \\ CFA-CON (our) & \(0.0313\pm 0.0026\) & \(0.1352\pm 0.0073\) & \(\mathbf{0.1307\pm 0.0012}\) & \(0.1462\pm 0.0211\) & \(0.1124\pm 0.0025\) & \(0.1803\pm 0.0003\) \\ \hline \hline \end{tabular}
\end{table}
Table 1: Benchmarking of CON and CFA-CON at learning latent dynamics against baseline methods. The first three datasets, based on [26], contain samples of a mass-spring with friction (_M-SP + F_), a single pendulum with friction (_S-P + F_), and a double pendulum with friction (_D-P + F_) (all without system inputs). The _CS_ dataset considers a continuum soft robot consisting of one segment with three constant planar strains. The _PCC-NS-2_ and _PCC-NS-3_ datasets contain trajectories of a continuum soft robot made of two and three piecewise constant curvature segments, respectively. We choose the latent dimensions of the models as \(n_{z}=4\), \(n_{z}=4\), and \(n_{z}=12\) for the _M-SP + F_, _S-P + F_, and _D-P + F_ datasets, and \(n_{z}=8\), \(n_{z}=12\), and \(n_{z}=12\) for the _PCC-NS-2_, _PCC-NS-3_, and _CS_ soft robotic datasets. We report the mean and standard deviation over three different random seeds.

\begin{table}
\begin{tabular}{c|c|c|c|c|c|c|c|c|c} \hline \hline
**Dataset** & \(\mathbf{n_{k}}\) & **RNN** & **GRU** [30] & **coRNN** [15] & **NODE** [27] & **MECH-NODE** & **CON-S (our)** & **CON-M (our)** & **CFA-CON (our)** \\ \hline
**M-SP+F** & \(4\) & \(88\) & \(248\) & \(40\) & \(3368\) & \(3244\) & \(\mathbf{34}\) & \(\mathbf{34}\) & \(\mathbf{34}\) \\
**D-P+F** & \(12\) & \(672\) & \(1968\) & \(348\) & \(4404\) & \(4032\) & \(\mathbf{246}\)

[MISSING_PAGE_FAIL:8]

\(K_{\mathrm{p}}=1,K_{\mathrm{i}}=2,K_{\mathrm{d}}=0.02,\upsilon=1\) for the _P-satI-D_ controller and \(K_{\mathrm{p}}=0,K_{\mathrm{i}}=2,K_{\mathrm{d}}=0.05,\upsilon=1\) for the _P-satI-D+FF_ controller, respectively.

Furthermore, we compare the control performance of our model-based controllers with a baseline control strategy based on the _MECH-NODE_ (\(n_{z}=2\)) that achieves an error of \(0.1104\) on the test set. First, we utilize the same P-satI-D feedback controller as for the CON model to generate the control action \(\tau(t)\) in latent space. As the MECH-NODE uses an MLP to parameterize the function \(\dot{\xi}=f_{\xi}(\xi,u)\), we cannot easily map \(\tau(t)\) into an input \(u(t)\). Therefore, we linearize the latent space dynamics w.r.t to the input as \(f_{\xi,\mathrm{ac}}(\xi,u)=f_{\xi}(\xi,0)+A(\xi)\,u\), where \(A(\xi)=\frac{\partial f_{\xi}}{\partial u}(\xi,0)\) is computed using autodiff. Then, \(u(t)=A^{\mathrm{T}}(\xi)\,\tau(t)\). After tuning the control gains, we choose \(K_{\mathrm{p}}=0.001,K_{\mathrm{i}}=0.02,K_{\mathrm{d}}=1\mathrm{e}{-5},\upsilon=1\).

We train all models (e.g., _MECH-NODE_, _CON_) on three different random seed and choose the best model instance. Please refer to Appendix E for more details on the model selection. We generate a trajectory of \(7\) setpoints, where \(q^{\mathrm{d}}(t_{j})\sim\mathcal{U}(-5\pi,5\pi)\,\mathrm{rad}/\mathrm{m}\in \mathbb{R}^{2}\) is a sampled configuration of the soft robot. Then, we render an image \(o^{\mathrm{d}}(t_{j})\) that represents the target observation for the controller and encode it into latent space to retrieve \(z^{\mathrm{d}}\in\mathbb{R}^{2}\). At time step \(k\), we render an image \(o(t_{k})\) of the robot's current configuration \(q(t_{k})\) and encode the image. Subsequently, we evaluate the control law and apply the decoder \(u(t_{k})=\eta(\tau(t_{k}))\), which is finally passed to the simulator that integrates the ground-truth dynamics to the next time-step \(t_{k+1}\) considering the actuation \(u(t_{k})\). The controller runs at \(100\,\mathrm{Hz}\), and we simulate the ground-truth dynamics with a _Dopi5_ ODE integrator at a time-step of \(1\mathrm{e}{-5}\,\mathrm{s}\).

Results.As an evaluation metric, we consider the RMSE between the actual and the reference trajectory. The _P-satI-D_ applied to the _MECH-NODE_ model (baseline) achieves an RMSE of \(2.88\,\mathrm{rad}/\mathrm{m}\) w.r.t. to the desired configuration \(q^{\mathrm{d}}\) (but unknown to the algorithm). The _P-satI-D_ CON controller, which does not exploit the learned latent dynamics for control, exhibits an RMSE of \(4.08\,\mathrm{rad}/\mathrm{m}\) w.r.t. to the desired configuration \(q^{\mathrm{d}}\). The _P-satI-D+FF_ controller exhibits an RMSE of \(2.12\,\mathrm{rad}/\mathrm{m}\) w.r.t. to the desired configuration \(q^{\mathrm{d}}\). We also visualize the closed-loop trajectories in Fig. 5 and as sequences of stills in Apx. E. We conclude that the nicely structured latent space generated by the \(\beta\)-VAE allows the _P-satI-D_ controller to effectively regulate the system towards the setpoint, although the response time is rather slow. The _P-satI-D+FF_ controller is able to exploit the structure of the CON model through its potential shaping feedforward term. With that, _CON P-satI-D+FF_ exhibits a faster response time and a \(26\,\%\) lower RMSE than the _MECH-NODE P-satI-D_ baseline. We provide results for the control of an actuated damped harmonic oscillator in Apx. D.

## 6 Conclusion and Limitations

Conclusion.In this work, we propose a new formulation for a coupled oscillator that is inherently input-to-state stable. Additionally, we identify a closed-form approximation, that is able to simulate the network dynamics more accurately compared to numerical ODE integrators with similar computational costs. When learning latent dynamics with CON, we observe that the performance is on par or slightly better compared to SoA methods such as RNNs, NODEs, etc., even though we constrained the solution space to a ISS-stable coupled oscillator structure. Furthermore, we point out that the performance of the CON models is more consistent across latent dimensions compared to the baselines and improved when not specifically tuned for a given dimension. Furthermore, as seen in Tab. 8, the closed-form approximation achieves, with the same number of model parameters, similar accuracies and double the training speed w.r.t. to the continuous-time model. Finally, we demonstrate that even a simple PID-like latent-space controller can effectively regulate the system to a setpoint. By exploiting the

Figure 4: **Panel (a): Samples of some of the datasets used as part of the experimental verification, specifically for the results reported in Tab. 1. The real-world Reaction-Diffusion image is adopted from [43]. Panel (b): Model-based control in latent space by exploiting the physical structure of the CON model.**

network structure and compensating for potential forces, regulation performance can be greatly improved, and response time decreased by more than \(55\,\%\).

Limitations.While we think our proposed method shows great potential and opens interesting avenues for future research, there exist certain limitations. For example, the proposed method of learning (latent) dynamics implicitly assumes that the underlying system adheres to the Markov property (e.g., the full state of the system is observable), that a system with mechanical structure can approximate it, and that it has an isolated, globally asymptotically stable equilibrium. This is, for example, the case for many mechanical systems (e.g., some continuum soft robots, deformable objects, and elastic structures) with continuous dynamics, convex elastic behavior, dissipation, and whose time-dependent effects (e.g., viscoelasticity, hysteresis) are negligible. Even if these conditions are not met globally, the method can be applied to model the local behavior around an asymptotic equilibrium point of the system (e.g., robotic manipulators, legged robots) with added stability benefits for out-of-distribution samples. Alternatively, the method could be extended to relax some of these assumptions, e.g., by allowing for multiple equilibria, zero damping, or by incorporating additional terms to capture discontinuous dynamics (e.g., stick-slip models) or period motions (e.g., limit cycles such as the Van der Pol oscillator). The proposed method might not be suitable for some physical systems, such as nonholonomic systems, partially observable systems, or systems with non-Markovian properties. Examples of such systems include mobile robots and systems with hidden states or delayed observations.

Furthermore, the approximated closed-form solution shows the best integration for situations where linear, decoupled dynamics dominate the transient. For dominant nonlinear, coupled forces, the performance of CFA-CON degrades, and it might be better to revert to numerical integration of the CON ODE. Finally, the control works exceptionally well in the setting where the latent dimension equals the input dimension. We hypothesize that this enables the method to identify a diffeomorphism between the input and the latent-space forcing. Still not investigated is how the performance could degrade if \(n_{z}>m\) (or \(n_{z}<m\) for that matter).

Figure 5: Latent-space control of a continuum soft robot (simulated using two piecewise constant curvature segments) at following a sequence of setpoints: The upper two rows show the performance of a pure P-satI-D feedback controller operating in latent space \(z\) learned with the MECH-NODE and CON models, respectively. The lower row displays the results for a latent space controller based on the CON model that additionally also compensates for the learned potential forces.

## Acknowledgments and Disclosure of Funding

This work was supported under the European Union's Horizon Europe Program from Project EMERGE - Grant Agreement No. 101070918.

## References

* [1] David Ha and Jurgen Schmidhuber. World models. _arXiv preprint arXiv:1803.10122_, 2018.
* [2] Danijar Hafner, Jurgis Paskonis, Jimmy Ba, and Timothy Lillicrap. Mastering diverse domains through world models. _arXiv preprint arXiv:2301.04104_, 2023.
* [3] Yutaka Matsuo, Yann LeCun, Maneesh Sahani, Doina Precup, David Silver, Masashi Sugiyama, Eiji Uchibe, and Jun Morimoto. Deep learning, reinforcement learning, and world models. _Neural Networks_, 152:267-275, 2022.
* [4] Cheng-Yuan Liou, Wei-Chen Cheng, Jiun-Wei Liou, and Daw-Ran Liou. Autoencoder for words. _Neurocomputing_, 139:84-96, 2014.
* [5] Diederik P Kingma and Max Welling. Auto-encoding variational bayes. In _Proceedings of the International Conference on Learning Representations_, 2014.
* [6] Manuel Walter, Jost Springenberg, Joschka Boedecker, and Martin Riedmiller. Embed to control: A locally linear latent dynamics model for control from raw images. _Advances in neural information processing systems_, 28, 2015.
* [7] Ian Lenz, Ross A Knepper, and Ashutosh Saxena. Deepmpc: Learning deep latent features for model predictive control. In _Robotics: Science and Systems_, volume 10, page 25. Rome, Italy, 2015.
* [8] Niklas Wahlstrom, Thomas B Schon, and Marc Peter Deisenroth. Learning deep dynamical models from image pixels. _IFAC-PapersOnLine_, 48(28):1059-1064, 2015.
* [9] Kathleen Champion, Bethany Lusch, J Nathan Kutz, and Steven L Brunton. Data-driven discovery of coordinates and governing equations. _Proceedings of the National Academy of Sciences_, 116(45):22445-22451, 2019.
* [10] Yaofeng Desmond Zhong and Naomi Leonard. Unsupervised learning of lagrangian dynamics from images for prediction and control. _Advances in Neural Information Processing Systems_, 33:10741-10752, 2020.
* [11] Herke Van Hoof, Nutan Chen, Maximilian Karl, Patrick van der Smagt, and Jan Peters. Stable reinforcement learning with autoencoders for tactile and visual data. In _2016 IEEE/RSJ international conference on intelligent robots and systems (IROS)_, pages 3928-3934. IEEE, 2016.
* [12] Carles Gelada, Saurabh Kumar, Jacob Buckman, Ofir Nachum, and Marc G Bellemare. Deepmdp: Learning continuous latent space models for representation learning. In _International conference on machine learning_, pages 2170-2179. PMLR, 2019.
* [13] Danijar Hafner, Timothy Lillicrap, Jimmy Ba, and Mohammad Norouzi. Dream to control: Learning behaviors by latent imagination. In _International Conference on Learning Representations_, 2019.
* [14] Wilko Schwarting, Tim Seyde, Igor Gilitschenski, Lucas Liebenwein, Ryan Sander, Sertac Karaman, and Daniela Rus. Deep latent competition: Learning to race using visual control policies in latent space. In _Conference on Robot Learning_, pages 1855-1870. PMLR, 2021.
* [15] Danijar Hafner, Timothy Lillicrap, Ian Fischer, Ruben Villegas, David Ha, Honglak Lee, and James Davidson. Learning latent dynamics for planning from pixels. In _International conference on machine learning_, pages 2555-2565. PMLR, 2019.
* [16] Lukas Hewing, Kim P Wabersich, Marcel Menner, and Melanie N Zeilinger. Learning-based model predictive control: Toward safe learning in control. _Annual Review of Control, Robotics, and Autonomous Systems_, 3:269-296, 2020.
* [17] John Irvin Alora, Luis A Pabon, Johannes Kohler, Mattia Cenedese, Ed Schmerling, Melanie N Zeilinger, George Haller, and Marco Pavone. Robust nonlinear reduced-order model predictive control. In _2023 62nd IEEE Conference on Decision and Control (CDC)_, pages 4798-4805. IEEE, 2023.
* [18] Steven L Brunton, Bingni W Brunton, Joshua L Proctor, and J Nathan Kutz. Koopman invariant subspaces and finite linear representations of nonlinear dynamical systems for control. _PloS one_, 11(2):e0150171, 2016.
* [19] Giorgos Mamakoukas, Maria Castano, Xiaobo Tan, and Todd Murphey. Local koopman operators for data-driven control of robotic systems. In _Robotics: science and systems_, 2019.
* [20] David A Haggerty, Michael J Banks, Ervin Kamenar, Alan B Cao, Patrick C Curtis, Igor Mezic, and Elliot W Hawkes. Control of soft robots with inertial dynamics. _Science robotics_, 8(81):eadd6864, 2023.
* [21] Jun Yamada, Chia-Man Hung, Jack Collins, Ioannis Havoutis, and Ingmar Posner. Leveraging scene embeddings for gradient-based motion planning in latent space. In _2023 IEEE International Conference on Robotics and Automation (ICRA)_, pages 5674-5680. IEEE, 2023.

* [22] Mattia Cenedese, Jour Axas, Bastian Bauerlein, Kerstin Avila, and George Haller. Data-driven modeling and prediction of non-linearizable dynamics via spectral submanifolds. _Nature communications_, 13(1):872, 2022.
* [23] Anthony M Bloch, Dong Eui Chang, Naomi Ehrich Leonard, and Jerrold E Marsden. Controlled lagrangians and the stabilization of mechanical systems. ii. potential shaping. _IEEE Transactions on Automatic Control_, 46(10):1556-1571, 2001.
* [24] Romeo Ortega, Jose Guadalupe Romero, Pablo Borja, and Alejandro Donaire. _PID passivity-based control of nonlinear systems with applications_. John Wiley & Sons, 2021.
* [25] Marco Lepri, Davide Bacciu, and Cosimo Della Santina. Neural autoencoder-based structure-preserving model order reduction and control design for high-dimensional physical systems. _IEEE Control Systems Letters_, 2023.
* [26] Aleksandar Botev, Andrew Jaegle, Peter Wirnsberger, Daniel Hennes, and Irina Higgins. Which priors matter? benchmarking models for learning latent dynamics. In _Thirty-fifth Conference on Neural Information Processing Systems Datasets and Benchmarks Track (Round 1)_, 2021.
* [27] Ricky TQ Chen, Yulia Rubanova, Jesse Bettencourt, and David K Duvenaud. Neural ordinary differential equations. _Advances in neural information processing systems_, 31, 2018.
* [28] Aleksei Sholokhov, Yuying Liu, Hassan Mansour, and Saleh Nabi. Physics-informed neural ode (pinode): embedding physics into models using collocation points. _Scientific Reports_, 13(1):10166, 2023.
* [29] Sepp Hochreiter and Jurgen Schmidhuber. Long short-term memory. _Neural computation_, 9(8):1735-1780, 1997.
* [30] Kyunghyun Cho, Bart Van Merrienboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Holger Schwenk, and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical machine translation. _arXiv preprint arXiv:1406.1078_, 2014.
* [31] Michael Lutter, Christian Ritter, and Jan Peters. Deep lagrangian networks: Using physics as model prior for deep learning. In _International Conference on Learning Representations_, 2018.
* [32] Miles Cranmer, Sam Greydanus, Stephan Hoyer, Peter Battaglia, David Spergel, and Shirley Ho. Lagrangian neural networks. _arXiv preprint arXiv:2003.04630_, 2020.
* [33] Samuel Greydanus, Misko Dzamba, and Jason Yosinski. Hamiltonian neural networks. _Advances in neural information processing systems_, 32, 2019.
* [34] Alistair White, Niki Kilbertus, Maximilian Gelbrecht, and Niklas Boers. Stabilized neural differential equations for learning dynamics with explicit constraints. _Advances in Neural Information Processing Systems_, 36:12929-12950, 2023.
* [35] T Konstantin Rusch and Siddhartha Mishra. Coupled oscillatory recurrent neural network (cornn): An accurate and (gradient) stable architecture for learning long time dependencies. In _International Conference on Learning Representations_, 2020.
* [36] T Konstantin Rusch and Siddhartha Mishra. Unicormn: A recurrent model for learning very long time dependencies. In _International Conference on Machine Learning_, pages 9168-9178. PMLR, 2021.
* [37] Andrea Ceni, Andrea Cossu, Maximilian Stolzle, Jingyue Liu, Cosimo Della Santina, Davide Bacciu, and Claudio Gallicchio. Random oscillators network for time series processing. In _International Conference on Artificial Intelligence and Statistics_, pages 4807-4815. PMLR, 2024.
* [38] Samuel Lanthaler, T Konstantin Rusch, and Siddhartha Mishra. Neural oscillators are universal. _Advances in Neural Information Processing Systems_, 36, 2024.
* [39] T Konstantin Rusch and Daniela Rus. Oscillatory state-space models. _arXiv preprint arXiv:2410.03943_, 2024.
* [40] Hassan K Khalil. Nonlinear systems third edition. _Patience Hall_, 115, 2002.
* [41] John Irvin Alora, Mattia Cenedese, Edward Schmerling, George Haller, and Marco Pavone. Data-driven spectral submanifold reduction for nonlinear optimal control of high-dimensional robots. In _2023 IEEE International Conference on Robotics and Automation (ICRA)_, pages 2627-2633. IEEE, 2023.
* [42] Maximilian Stolzle and Cosimo Della Santina. Piston-driven pneumatically-actuated soft robots: Modeling and backstepping control. _IEEE Control Systems Letters_, 6:1837-1842, 2021.
* [43] Irving R Epstein and Bing Xu. Reaction-diffusion processes at the nano-and microscales. _Nature nanotechnology_, 11(4):312-319, 2016.
* [44] Davide Calzolari, Cosimo Della Santina, and Alin Albu-Schaffer. Exponential convergence rates of nonlinear mechanical systems: The 1-dof case with configuration-dependent inertia. _IEEE Control Systems Letters_, 5(2):445-450, 2020.
* [45] Xuwei Wu, Christian Ott, Alin Albu-Schaffer, and Alexander Dietrich. Passive decoupled multitask controller for redundant robots. _IEEE Transactions on Control Systems Technology_, 31(1):1-16, 2022.
* [46] Gene H Golub and Charles F Van Loan. _Matrix computations_. JHU press, 2013.
* [47] P Kidger. _On neural differential equations_. PhD thesis, University of Oxford, 2021.

* [48] Pieter Pas. The damped harmonic oscillator, Mar 2023.
* [49] Irina Higgins, Loic Matthey, Arka Pal, Christopher P Burgess, Xavier Glorot, Matthew M Botvinick, Shakir Mohamed, and Alexander Lerchner. beta-vae: Learning basic visual concepts with a constrained variational framework. _ICLR (Poster)_, 3, 2017.
* [50] Costanza Armanini, Frederic Boyer, Anup Teejo Mathew, Christian Duriez, and Federico Renda. Soft robots modeling: A structured overview. _IEEE Transactions on Robotics_, 39(3):1728-1748, 2023.
* [51] Thomas George Thuruthel and Fumiya Iida. Multi-modal sensor fusion for learning rich models for interacting soft robots. In _2023 IEEE International Conference on Soft Robotics (RoboSoft)_, pages 1-6. IEEE, 2023.
* [52] Elijah Almanzor, Fan Ye, Jialei Shi, Thomas George Thuruthel, Helge A Wurdemann, and Fumiya Iida. Static shape control of soft continuum robots using deep visual inverse kinematic models. _IEEE Transactions on Robotics_, 2023.
* [53] Takuya Akiba, Shotaro Sano, Toshihiko Yanase, Takeru Ohta, and Masanori Koyama. Optuna: A next-generation hyperparameter optimization framework. In _Proceedings of the 25th ACM SIGKDD international conference on knowledge discovery & data mining_, pages 2623-2631, 2019.
* [54] Maximilian Stolzle, Daniela Rus, and Cosimo Della Santina. An experimental study of model-based control for planar handed shearing auxetics robots. In _Experimental Robotics_, pages 153-167, Cham, 2024. Springer Nature Switzerland.
* [55] Pietro Pustina, Pablo Borja, Cosimo Della Santina, and Alessandro De Luca. P-sati-d shape regulation of soft robots. _IEEE Robotics and Automation Letters_, 8(1):1-8, 2022.
* [56] Stephen P Boyd and Lieven Vandenberghe. _Convex optimization_. Cambridge university press, 2004.
* [57] Mattia Gazzola, LH Dudte, AG McCormick, and Lakshminarayanan Mahadevan. Forward and inverse problems in the mechanics of soft filaments. _Royal Society open science_, 5(6):171628, 2018.
* [58] Federico Renda, Vito Cacciolo, Jorge Dias, and Lakmal Seneviratne. Discrete cosserat approach for soft robot dynamics: A new piece-wise constant strain model with torsion and shears. In _2016 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)_, pages 5495-5502. IEEE, 2016.
* [59] Cosimo Della Santina, Christian Duriez, and Daniela Rus. Model-based control of soft robots: A survey of the state of the art and open challenges. _IEEE Control Systems Magazine_, 43(3):30-65, 2023.
* [60] James Bradbury, Roy Frostig, Peter Hawkins, Matthew James Johnson, Chris Leary, Dougal Maclaurin, George Necula, Adam Paszke, Jake VanderPlas, Skye Wanderman-Milne, and Qiao Zhang. JAX: composable transformations of Python+NumPy programs, 2018.
* [61] Maximilian Stolzle, Sonal Santosh Baberwal, Daniela Rus, Shirley Coyle, and Cosimo Della Santina. Guiding soft robots with motor-imagery brain signals and impedance control. In _2024 IEEE 7th International Conference on Soft Robotics (RoboSoft)_, pages 276-283. IEEE, 2024.
* [62] G. Bradski. The OpenCV Library. _Dr. Dobb's Journal of Software Tools_, 2000.
* [63] Robert J Webster III and Bryan A Jones. Design and kinematic modeling of constant curvature continuum robots: A review. _The International Journal of Robotics Research_, 29(13):1661-1683, 2010.
* [64] Emanuele Riccardo Rosi, Maximilian Stolzle, Fabio Solari, and Cosimo Della Santina. Sensing soft robots' shape with cameras: an investigation on kinematics-aware slam. In _2022 IEEE 5th International Conference on Soft Robotics (RoboSoft)_, pages 795-801. IEEE, 2022.
* [65] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. _arXiv preprint arXiv:1607.06450_, 2016.
* [66] Vincent Dumoulin and Francesco Visin. A guide to convolution arithmetic for deep learning. _arXiv preprint arXiv:1603.07285_, 2016.
* [67] Kaare Brandt Petersen, Michael Syskind Pedersen, et al. The matrix cookbook. _Technical University of Denmark_, 7(15):510, 2008.
* [68] Jonathan Heek, Anselm Levskaya, Avital Oliver, Marvin Ritter, Bertrand Rondepierre, Andreas Steiner, and Marc van Zee. Flax: A neural network library and ecosystem for JAX, 2023.
* [69] J. R. Dormand and P. J. Prince. A family of embedded Runge-Kutta formulae. _J. Comp. Appl. Math_, 6:19-26, 1980.
* [70] Ilya Loshchilov and Frank Hutter. Sgdr: Stochastic gradient descent with warm restarts. In _International Conference on Learning Representations_, 2016.
* [71] Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. _arXiv preprint arXiv:1412.6980_, 2014.
* [72] Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization. In _International Conference on Learning Representations_, 2018.
* [73] Shuhei Watanabe. Tree-structured parzen estimator: Understanding its algorithm components and their roles for better empirical performance. _arXiv preprint arXiv:2304.11127_, 2023.
** [74] Liam Li, Kevin Jamieson, Afshin Rostamizadeh, Ekaterina Gonina, Jonathan Ben-Tzur, Moritz Hardt, Benjamin Recht, and meet Talwalkar. A system for massively parallel hyperparameter tuning. _Proceedings of Machine Learning and Systems_, 2:230-246, 2020.
* [75] Guilin Liu, Fitsum A Reda, Kevin J Shih, Ting-Chun Wang, Andrew Tao, and Bryan Catanzaro. Image inpainting for irregular holes using partial convolutions. In _Proceedings of the European Conference on Computer Vision (ECCV)_, pages 85-100, 2018.
* [76] Jiahui Yu, Zhe Lin, Jimei Yang, Xiaohui Shen, Xin Lu, and Thomas S Huang. Generative image inpainting with contextual attention. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 5505-5514, 2018.
* [77] Maximilian Stoltzle, Takashiro Miki, Levin Gerdes, Martin Azkarate, and Marco Hutter. Reconstructing occluded elevation information in terrain maps with self-supervised learning. _IEEE Robotics and Automation Letters_, 7(2):1697-1704, 2022.
* [78] Zhou Wang, Alan C Bovik, Hamid R Sheikh, and Eero P Simoncelli. Image quality assessment: from error visibility to structural similarity. _IEEE transactions on image processing_, 13(4):600-612, 2004.
* [79] DeepMind, Igor Babuschkin, Kate Baumli, Alison Bell, Surya Bhupatiraju, Jake Bruce, Peter Buchlovsky, David Budden, Trevor Cai, Aidan Clark, Ivo Danihelka, Antoine Dedieu, Claudio Fantacci, Jonathan Godwin, Chris Jones, Ross Hemsley, Tom Hennigan, Matteo Hessel, Shaobo Hou, Steven Kapturowski, Thomas Keck, Ivuri Kemaev, Michael King, Markus Kunesch, Lena Martens, Hamza Merzic, Vladimir Mikulik, Tamara Norman, George Papamakarios, John Quan, Roman Ring, Francisco Ruiz, Alvaro Sanchez, Laurent Sartran, Rosalia Schneider, Eren Sezener, Stephen Spencer, Srivatsan Srinivasan, Milos Stanojevic, Wojciech Stokowiec, Luyu Wang, Guangyao Zhou, and Fabio Viola. The DeepMind JAX Ecosystem, 2020.

Appendix on proof of Input-to-State Stability (ISS)

In the following, we will write \(\|A\|\) to denote the induced norm of matrix \(A\) and \(\lambda_{\mathrm{m}}(A)\), \(\lambda_{\mathrm{M}}(A)\) to refer to its minimum and maximum Eigenvalue respectively.

We introduce some expressions often used throughout this section: The gradient of \(V_{\mu}(\tilde{y}_{\mathrm{w}})\) w.r.t. the residual coordinate \(\tilde{y}_{\mathrm{w}}\) is given by

\[\frac{\partial V_{\mu}}{\partial\tilde{y}_{\mathrm{w}}}(\tilde{y}_{\mathrm{w} })=P_{\mathrm{V}}\,\tilde{y}_{\mathrm{w}}+\begin{bmatrix}\tanh(\bar{x}_{ \mathrm{w}}+\tilde{x}_{\mathrm{w}}+b)\\ 0^{n}\end{bmatrix}-\begin{bmatrix}\tanh(\bar{x}_{\mathrm{w}}+b)\\ 0^{n}\end{bmatrix}.\] (14)

Next, the Hessian of the Lyapunov candidate can be derived as

\[H_{\mathrm{V}}(\tilde{x}_{\mathrm{w}})=\frac{\partial^{2}V_{\mu}}{\partial \tilde{y}_{\mathrm{w}}^{2}}=\begin{bmatrix}K_{\mathrm{w}}+S_{\mathrm{sech}}^{2 }(\tilde{x}_{\mathrm{w}})&\mu\,M_{\mathrm{w}}\\ \mu\,M_{\mathrm{w}}^{\mathrm{T}}&M_{\mathrm{w}}\end{bmatrix}\in\mathbb{R}^{2n \times 2n},\] (15)

where

\[S_{\mathrm{sech}}(\tilde{x}_{\mathrm{w}})=\mathrm{diag}(\mathrm{sech}(\bar{x} _{\mathrm{w}}+\tilde{x}_{\mathrm{w}}+b))\in\mathbb{R}^{n\times n}\succ 0 \quad\forall\tilde{x}_{\mathrm{w}}\in\mathbb{R}^{n}.\] (16)

Furthermore, the Schur complement of \(P_{\mathrm{V}}\) is given by

\[S_{P_{\mathrm{V}}}=M_{\mathrm{w}}-\mu^{2}M_{\mathrm{w}}^{\mathrm{T}}K_{ \mathrm{w}}\,M_{\mathrm{w}}\] (17)

### Potential force and energy

**Lemma 3**.: _Let \(\tilde{x}_{\mathrm{w}}\in\mathbb{R}^{n}\) be generalized coordinates and \(\bar{x}_{\mathrm{w}},b\in\mathbb{R}^{n}\) constants. Then, the potential force of system (4)_

\[\tilde{f}_{\mathcal{U}_{\mathrm{w}}}(\tilde{x}_{\mathrm{w}})=K_{\mathrm{w}}( \bar{x}_{\mathrm{w}}+\tilde{x}_{\mathrm{w}})+\tanh(\bar{x}_{\mathrm{w}}+ \tilde{x}_{\mathrm{w}}+b),\] (18)

_stems from the potential_

\[\mathcal{U}_{\mathrm{w}}(\tilde{x}_{\mathrm{w}})=\sum_{i=1}^{n}\int_{0}^{ \tilde{x}_{\mathrm{w},i}}\tanh(\bar{x}_{\mathrm{w},i}+\sigma+b_{i})\,\mathrm{ d}\sigma-\sum_{i=1}^{n}\int_{0}^{\tilde{x}_{\mathrm{w},i}}\tanh(\bar{x}_{ \mathrm{w},i}+b_{i})\,\mathrm{d}\sigma\in\mathbb{R}.\] (19)

Proof.: First, we take the derivative of \(\mathcal{U}(\tilde{x}_{\mathrm{w}})\):

\[\frac{\partial\mathcal{U}_{\mathrm{w}}}{\partial\tilde{x}_{\mathrm{w}}}=K_{ \mathrm{w}}(\bar{x}_{\mathrm{w}}+\tilde{x}_{\mathrm{w}})+\tanh(\bar{x}_{ \mathrm{w}}+\tilde{x}_{\mathrm{w}}+b)=\tilde{f}_{\mathcal{U}_{\mathrm{w}}}.\] (20)

The Hessian of the potential is given by

\[H_{\mathcal{U}_{\mathrm{w}}}(\tilde{x}_{\mathrm{w}})=\frac{\partial^{2} \mathcal{U}_{\mathrm{w}}}{\partial\tilde{x}_{\mathrm{w}}^{2}}=\frac{\partial \tilde{f}_{\mathcal{U}_{\mathrm{w}}}}{\partial\tilde{x}_{\mathrm{w}}}=K_{ \mathrm{w}}+S_{\mathrm{sech}}^{2}(\tilde{x}_{\mathrm{w}})\in\mathbb{R}^{n \times n}.\] (21)

As \(K_{\mathrm{w}}\succ 0\Rightarrow K_{\mathrm{w}}=K_{\mathrm{w}}^{\mathrm{T}}\), we can easily show that the potential force is symmetric:

\[H_{\mathcal{U}_{\mathrm{w}}}^{\mathrm{T}}=K_{\mathrm{w}}^{\mathrm{T}}+S_{ \mathrm{sech}}^{2}(\tilde{x}_{\mathrm{w}})^{\mathrm{T}}=K_{\mathrm{w}}+S_{ \mathrm{sech}}^{2}(\tilde{x}_{\mathrm{w}})=H_{\mathcal{U}_{\mathrm{w}}}.\] (22)

## Appendix B

Figure 6: Illustration of global asymptotic stability for the unforced system with \(g(u)=0\) and input-to-state stability for the forced system, where the black dashed line denotes the input \(u(t)\).

### Proof of Lemma 1: single & isolated equilibrium

**Lemma 1** restated.: _Let \(K_{\rm w}\succ 0\). Then, the dynamics defined in (3) have a single, isolated equilibrium \(\bar{y}_{\rm w}=\left[\tilde{x}_{\rm w}^{\rm T}\quad 0^{\rm T}\right]^{\rm T}\)._

Proof.: We regard the characteristic equation as a function: \(h_{\rm eq}(x_{\rm w})=\tanh(x_{\rm w}+b)+K_{\rm w}\,x_{\rm w}\). For there to exist multiple equilibria, \(h_{\rm eq}(\bar{x}_{\rm w})=0\) would need to be true for multiple \(\bar{x}\). However, we take the partial derivative of \(h_{\rm eq}(x_{\rm w})\) w.r.t. \(x_{\rm w}\) and see that

\[\frac{\partial h_{\rm eq}}{\partial x_{\rm w}}=K_{\rm w}+S_{\rm sech}^{2}(x_{ \rm w})\succ 0,\quad\forall x_{\rm w}\in\,\mathbb{R}^{n}\qquad\text{with }S_{\rm sech}(x_{\rm w})=\operatorname{diag}(\operatorname{sech}(x_{\rm w}+b ))\in\mathbb{R}^{n\times n}\] (23)

as \(S_{\rm sech}(x_{\rm w})\succ 0\quad\forall x_{\rm w}\in\,\mathbb{R}^{n}\) and \(K_{\rm w}\succ 0\). Therefore, \(h_{\rm eq}(x_{\rm w})\) is continuously increasing and can only cross the zero line once. 

### Proof of Lemma 2: Validity of strict Lyapunov candidate \(V_{\mu}(\tilde{y}_{\rm w})\)

**Lemma 4**.: _Suppose \(M_{\rm w}\succ 0,K_{\rm w}\succ 0\) and \(0<\mu<\frac{\sqrt{\lambda_{\rm m}(M_{\rm w})\,\lambda_{\rm m}(K_{\rm w})}}{ \|M_{\rm w}\|}\coloneqq\mu_{\rm V}\). Then \(S_{P_{\rm V}}\), as defined in (17), is positive definite._

Proof.: The minimum Eigenvalue of \(S_{P_{\rm V}}\) is bounded by

\[\begin{split}\lambda_{\rm m}(S_{P_{\rm V}})&\geq \lambda_{\rm m}(M_{\rm w})-\mu^{2}\,\|M_{\rm w}^{\rm T}\,K_{\rm w}\,M_{\rm w}\|,\\ &\geq\lambda_{\rm m}(M_{\rm w})-\mu^{2}\,\frac{\|M_{\rm w}\|^{2}} {\lambda_{\rm w}\,(K_{\rm w})}\end{split}\] (24)

Based on the assumption \(M_{\rm w}\succ 0,K_{\rm w}\succ 0\), we can state \(\frac{\|M_{\rm w}\|}{\lambda_{\rm w}(K_{\rm w})}>0\). Therefore, the critical case for the lower bound on \(\lambda_{\rm m}(S_{P_{\rm V}})\) is \(\mu=\frac{\sqrt{\lambda_{\rm m}(M_{\rm w})\,\lambda_{\rm m}(K_{\rm w})}}{\|M _{\rm w}\|}\coloneqq\mu_{\rm V}\). Hence,

\[\lambda_{\rm m}(S_{P_{\rm V}})>\lambda_{\rm m}(M_{\rm w})-\frac{\lambda_{\rm m }(M_{\rm w})\,\lambda_{\rm m}\,(K_{\rm w})}{\|M_{\rm w}\|^{2}}\,\frac{\|M_{ \rm w}\|^{2}}{\lambda_{\rm w}(K_{\rm w})}\,=\,0\] (25)

Consequently, the Eigenvalue sensitivity theorem [46] demands that \(S_{P_{\rm V}}\succ 0\). 

**Lemma 5**.: _Let \(M_{\rm w}\succ 0,K_{\rm w}\succ 0\), and \(0<\mu<\frac{\sqrt{\lambda_{\rm m}(M_{\rm w})\,\lambda_{\rm m}(K_{\rm w})}}{ \|M_{\rm w}\|}\coloneqq\mu_{\rm V}\). Then, it follows that \(P_{\rm V}\succ 0\) and \(H_{\rm V}(\tilde{x}_{\rm w})\succ 0\,\,\forall\,\tilde{x}_{\rm w}\in\mathbb{R}^{n}\)._

Proof.: By inspecting the expressions for \(P_{\rm V}\succ 0\) and \(H_{\rm V}(\tilde{x}_{\rm w})\succ 0\,\,\forall\tilde{x}_{\rm w}\in\mathbb{R}^{n}\) in Equations (5) and (15), respectively, it can be easily seen that \(H_{\rm V}(\tilde{x}_{\rm w})\succ P_{\rm V}\,\forall\tilde{x}_{\rm w}\in \mathbb{R}\). As Lemma 4 states that the Schur complement of \(P_{\rm V}\) is positive definite, it follows that \(H_{\rm V}(\tilde{x}_{\rm w})\succeq P_{\rm V}\succ 0\). 

**Lemma 6**.: _Suppose \(\tilde{x}_{\rm w},\tilde{x}_{\rm w},b\in\mathbb{R}^{n}\) and \(n\in\mathbb{N}^{+}\). Then,_

\[h_{\rm V,th}(\tilde{x}_{\rm w})=\sum_{i=1}^{n}\int_{0}^{\tilde{x}_{\rm w},i} \tanh(\tilde{x}_{\rm w,i}+\sigma+b_{i})\,\mathrm{d}\sigma-\sum_{i=1}^{n}\int_ {0}^{\tilde{x}_{\rm w},i}\tanh(\tilde{x}_{\rm w,i}+b_{i})\,\mathrm{d}\sigma\] (26)

_is a positive semi-definite function._

Proof.: Proving \(h_{\rm V,th}(\tilde{x}_{\rm w})\geq 0\) is equivalent to showing that the scalar function \(\tilde{h}_{\rm V,th}(r)=\int_{0}^{r}\tanh(\sigma+a)\,\mathrm{d}\sigma-\int_{0}^ {r}\tanh(a)\,\mathrm{d}\sigma\geq 0\,\,\,\forall\,r,a\in\mathbb{R}\), where we set \(r=\tilde{x}_{\rm w,i}\) and \(a=\bar{x}_{\rm w,i}+b_{i}\).

We strive to find the critical points (i.e., minimax and maxims) \(\bar{r}\) of \(\tilde{h}_{\rm V,th}(r)\) and, for this, analyze where the first derivative of \(\tilde{h}_{\rm V,th}(r)\) is zero

\[\frac{\partial\tilde{h}_{\rm V,th}}{\partial r}(\bar{r})=\tanh(\bar{r}+a)- \tanh(a)=0,\] (27)

which is the case only for \(\bar{r}=0\). Next, we compute the second derivative at \(\bar{r}\) as

\[\frac{\partial\tilde{h}_{\rm V,th}}{\partial r}(\bar{r})=\operatorname{sech}^{2 }(\bar{r})=1.\] (28)

Thus, \(\tilde{h}_{\rm V,th}(r)\) is convex and its global minimum at \(\bar{r}=0\) takes the value \(h_{\rm V,th}(0)=0\). As a result, \(h_{\rm V,th}(\tilde{x}_{\rm w})\) is also positive semi-definite.

#### a.3.1 Proof of Lemma 2:

**Lemma 2 restated**.: _The scalar function \(V_{\mu}(\tilde{y}_{\mathrm{w}})\) defined in (5) is continuously differentiable and verifies the condition \(V_{\mu}(0)=0\). Furthermore, let \(M_{\mathrm{w}},K_{\mathrm{w}}\succ 0\). Now, if we choose \(0<\mu<\frac{\sqrt{\lambda_{\mathrm{m}}(M_{\mathrm{w}})\,\lambda_{\mathrm{m}}(K_ {\mathrm{w}})}}{\|M_{\mathrm{w}}\|}\coloneqq\mu_{\mathrm{V}}\), then \(V_{\mu}(\tilde{y}_{\mathrm{w}})>0\;\forall\;\tilde{y}_{\mathrm{w}}\in\mathbb{R }^{2n}\setminus\{0\}\). Additionally, then \(V_{\mu}(\tilde{y}_{\mathrm{w}})\) is radially unbounded as \(\|\tilde{y}_{\mathrm{w}}\|\to\infty\Rightarrow V_{\mu}(\tilde{y}_{\mathrm{w}})\to\infty\)._

Proof.: **Step 1:** It can be easily seen that \(V_{\mu}(\tilde{y}_{\mathrm{w}})\) in (5) is smooth and continuously differentiable.

**Step 2:** Proof that \(V_{\mu}(0)=0\).

\[V_{\mu}(0)=0+\sum_{i=1}^{n}\int_{0}^{0}\tanh(\bar{y}_{\mathrm{w},i}+\sigma+b_{ i})\,\mathrm{d}\sigma-\sum_{i=1}^{n}\int_{0}^{0}\tanh(\tilde{y}_{\mathrm{w},i}+b_{ i})\,\mathrm{d}\sigma=0.\] (29)

**Step 3:** Proof that the Lyapunov candidate is positive definite; i.e., \(V_{\mu}(\tilde{y}_{\mathrm{w}})>0\;\forall\tilde{y}_{\mathrm{w}}\in\mathbb{R }^{n}\setminus\{0\}\).

As the gradient of the Lyapunov candidate, as defined in (14), is zero for \(\tilde{y}_{\mathrm{w}}=0\):

\[\frac{\partial V_{\mu}}{\partial\tilde{y}_{\mathrm{w}}}(0)=\begin{bmatrix} \tanh(\bar{x}_{\mathrm{w}}+b)\\ 0^{n}\end{bmatrix}-\begin{bmatrix}\tanh(\bar{x}_{\mathrm{w}}+b)\\ 0^{n}\end{bmatrix}=0,\] (30)

\(\tilde{y}_{\mathrm{w}}=0\) is a critical point of \(V_{\mu}(\tilde{y}_{\mathrm{w}})\). According to Lemma 5, the Hessian in (15) is positive-definite [56]: \(H_{\mathrm{V}}(\tilde{y}_{\mathrm{w}})\succ 0\;\forall\tilde{y}_{\mathrm{w}}\in \mathbb{R}^{2n}\). With that, (5) is convex and its global minimum is at \(\tilde{y}_{\mathrm{w}}=0\), where \(V_{\mu}(0)=0\). In summary, we state \(V_{\mu}(\tilde{y}_{\mathrm{w}})>0\;\forall\tilde{y}_{\mathrm{w}}\in\mathbb{R }^{n}\setminus\{0\}\).

**Step 4:** Proof that the Lyapunov candidate is radially unbounded: i.e., \(\|\tilde{y}_{\mathrm{w}}\|\to\infty\Rightarrow V_{\mu}(\tilde{y}_{\mathrm{w}}) \to\infty\). Lemma 6 is exploited for identifying a lower bound on \(V_{\mu}(\tilde{y}_{\mathrm{w}})\):

\[\begin{split} V_{\mu}(\tilde{y}_{\mathrm{w}})& =\frac{1}{2}\,\tilde{y}_{\mathrm{w}}^{\mathrm{T}}\,P_{\mathrm{V}}\, \tilde{y}_{\mathrm{w}}+\sum_{i=1}^{n}\int_{0}^{\tilde{x}_{\mathrm{w},i}}\tanh (\bar{x}_{\mathrm{w},i}+\sigma+b_{i})\,\mathrm{d}\sigma-\sum_{i=1}^{n}\int_{0 }^{\tilde{x}_{\mathrm{w},i}}\tanh(\bar{x}_{\mathrm{w},i}+b_{i})\,\mathrm{d} \sigma,\\ &\geq\frac{1}{2}\,\tilde{y}_{\mathrm{w}}^{\mathrm{T}}\,P_{ \mathrm{V}}\,\tilde{y}_{\mathrm{w}}\;\geq\;\frac{1}{2}\,\lambda_{\mathrm{m}}(P _{\mathrm{V}})\,\|\tilde{y}_{\mathrm{w}}\|^{2}.\end{split}\] (31)

Lemma 5 tells us that \(P_{\mathrm{V}}\succ 0\) and with that \(\lambda_{\mathrm{m}}(P_{\mathrm{V}})>0\). Therefore, if \(\|\tilde{y}_{\mathrm{w}}\|\to\infty\), it also follows that \(V_{\mu}(\tilde{y}_{\mathrm{w}})\to\infty\). 

### Proof of Theorem 1: Global asymptotic stability of unforced network

The Lemmas introduced below are used to prove Theorem 1.

**Lemma 7**.: _Suppose \(\bar{x}_{\mathrm{w}},\tilde{x}_{\mathrm{w}},b\in\mathbb{R}^{n}\) and \(n\in\mathbb{N}^{+}\). Then, the function \(h_{\mathrm{V},\mathrm{th}}(\bar{x}_{\mathrm{w}})\) defined as_

\[h_{\mathrm{V},\mathrm{th}}(\tilde{x}_{\mathrm{w}})=(\tanh(\bar{x}_{\mathrm{w} }+\tilde{x}_{\mathrm{w}}+b)-\tanh(\bar{x}_{\mathrm{w}}+b))^{\mathrm{T}}\;\tilde{ x}_{\mathrm{w}},\] (32)

_is positive semi-definite._

Proof.: Proving \(h_{\mathrm{V},\mathrm{th}}(\tilde{x}_{\mathrm{w}})\geq 0\) is equivalent to proving that the scalar function \(\breve{I}_{\mathrm{V},\mathrm{th}}(r)=(\tanh(r+a)-\tanh(a))\;r\geq 0\;\forall\;r,a\in \mathbb{R}\), where we set \(r=\tilde{x}_{\mathrm{w},i}\) and \(a=\bar{x}_{\mathrm{w},i}+b_{i}\). Now, we expand the hyperbolic tangent:

\[\begin{split}\breve{I}_{\mathrm{V},\mathrm{th}}(r)& =(\tanh(r+a)-\tanh(a))\;r=\left(\frac{e^{2(r+a)}-1}{e^{2(r+a)}+1}- \frac{e^{2a}-1}{e^{2a}+1}\right)\,r,\\ &=\frac{2\,e^{2a}\,\left(e^{2r}-1\right)}{e^{2r+a4}+e^{2r+2a}+e^{2 a}+1}\,r\,\geq 0,\end{split}\] (33)

as the denominator \(e^{2r+4a}+e^{2r+2a}+e^{2a}+1>0\;\forall\;r\in\mathbb{R}\) and as \(\mathrm{sign}\left(2\,e^{2a}\,\left(e^{2r}-1\right)\right)=\mathrm{sign}(r)\). For example, \(e^{2r}-1\geq 0\;\forall\;r\geq 0\). Analog, \(e^{2r}-1<0\;\forall\;r<0\). 

**Lemma 8**.: _Let \(M_{\mathrm{w}}\succ 0\), \(K_{\mathrm{w}}\succ 0\), and \(D_{\mathrm{w}}\succ 0\). Also, let \(\mu\in\mathbb{R}^{+}\) be chosen such that \(0<\mu<\frac{\lambda_{\mathrm{m}}(D_{\mathrm{w}})}{\lambda_{\mathrm{m}}(M_{ \mathrm{w}})+\frac{1D_{\mathrm{w}}\|^{2}}{4\lambda_{\mathrm{m}}(K_{\mathrm{w}})}} :=\mu_{\mathrm{V}}\). Then, the matrix \(P_{\mathrm{V}}=\begin{bmatrix}\mu K_{\mathrm{w}}&\frac{1}{2}\mu D_{ \mathrm{w}}\\ \frac{1}{2}\mu D_{\mathrm{w}}^{\mathrm{T}}&D_{\mathrm{w}}-\mu M_{\mathrm{w}} \end{bmatrix}\in\mathbb{R}^{n}\) is positive definite._

Proof.: The Schur complement of \(P_{\mathrm{V}}\) is given by

\[S_{P_{\mathrm{V}}}=D_{\mathrm{w}}-\mu M_{\mathrm{w}}-\frac{1}{4}\,\mu D_{ \mathrm{w}}^{\mathrm{T}}\,K_{\mathrm{w}}^{-1}\,D_{\mathrm{w}}.\] (34)The lower bound on the smallest Eigenvalue of \(S_{P_{V}}\) can be identified as

\[\lambda_{\mathrm{m}}\left(S_{P_{V_{V}}}\right)\geq\lambda_{\mathrm{m}}(D_{\mathrm{ w}})-\mu\,\lambda_{\mathrm{m}}(M_{\mathrm{w}})-\mu\frac{\|D_{\mathrm{w}}\|^{2}}{4\, \lambda_{\mathrm{m}}(K_{\mathrm{w}})}.\] (35)

As \(K_{\mathrm{w}},D_{\mathrm{w}}\succ 0\), we know that \(\frac{\|D_{\mathrm{w}}\|^{2}}{\lambda_{\mathrm{m}}(K_{\mathrm{w}})}>0\). Therefore, the case \(\mu=\frac{\lambda_{\mathrm{m}}(D_{\mathrm{w}})}{\lambda_{\mathrm{m}}(M_{ \mathrm{w}})+\frac{\|D_{\mathrm{w}}\|^{2}}{4\,\lambda_{\mathrm{m}}(K_{\mathrm{ w}})}}\coloneqq\mu_{\mathrm{V}}\) determines the lower bound on \(\lambda_{\mathrm{m}}(S_{P_{V}})\):

\[\lambda_{\mathrm{m}}\left(S_{P_{V_{V}}}\right)>\lambda_{\mathrm{m}}(D_{\mathrm{ w}})-\mu_{\mathrm{V}}\left(\lambda_{\mathrm{m}}(M_{\mathrm{w}})-\frac{\|D_{ \mathrm{w}}\|^{2}}{4\,\lambda_{\mathrm{m}}(K_{\mathrm{w}})}\right)=0.\] (36)

We conclude, based on the Eigenvalue sensitivity theorem of symmetric matrices [46], that \(S_{P_{V}}\succ 0\) and with that \(P_{V}\succ 0\)[56]. 

### Proof of Theorem 2: Proof of Input-to-State Stability (ISS)

**Lemma 9**.: _Let \(\bar{x}_{\mathrm{w}},\tilde{x}_{\mathrm{w}},b\in\mathbb{R}^{n}\). Then,_

\[h_{\mathrm{V},\mathrm{th}}(\bar{x}_{\mathrm{w}})=\sum_{i=1}^{n}\int_{0}^{\bar{ x}_{\mathrm{w},i}}\tanh(\bar{x}_{\mathrm{w},i}+\sigma+b_{i})\,\mathrm{d}\sigma- \sum_{i=1}^{n}\int_{0}^{\bar{x}_{\mathrm{w},i}}\tanh(\bar{x}_{\mathrm{w},i}+b_ {i})\,\mathrm{d}\sigma\leq 2\,\left|\bar{x}_{\mathrm{w}}\right|.\] (37)

Proof.: Proving \(h_{\mathrm{V},\mathrm{th}}(\bar{x}_{\mathrm{w}})\leq 2\,\left|\bar{x}_{\mathrm{w}}\right|\) is equivalent to proving that the scalar function \(\bar{h}_{\mathrm{V},\mathrm{th}}(r)=\int_{0}^{r}\tanh(\sigma+a)\,\mathrm{d} \sigma-\int_{0}^{r}\tanh(a)\,\mathrm{d}\sigma\leq 2\,|r|\,\,\,\forall\,r,a\in \mathbb{R}\), where we set \(r=\tilde{x}_{\mathrm{w},i}\) and \(a=\bar{x}_{\mathrm{w},i}+b_{i}\). We perform the integration contained in \(\bar{h}_{\mathrm{V},\mathrm{th}}(r)\):

\[\begin{split}\bar{h}_{\mathrm{V},\mathrm{th}}(r)&= \int_{0}^{r}\tanh(\sigma+a)\,\mathrm{d}\sigma-\int_{0}^{r}\tanh(a)\,\mathrm{d} \sigma,\\ \bar{h}_{\mathrm{V},\mathrm{th}}(r)&=\log(\cosh(r+a) )-\log(\cosh(a))-\tanh(a)\,r.\end{split}\] (38)

Next, we demonstrate that the slope of \(2\,|r|\) is always larger than the magnitude of the slope of \(\bar{h}_{\mathrm{V},\mathrm{th}}(r)\):

\[\left|\frac{\partial\bar{h}_{\mathrm{V},\mathrm{th}}}{\partial r}\right|=\,| \tanh(r+a)-\tanh(a)|<2=\frac{\partial}{\partial r}\left(2\,|r|\right).\] (39)

Additionally, \(\bar{h}_{\mathrm{V},\mathrm{th}}(0)=2\,|0|=0\). We conclude that \(\bar{h}_{\mathrm{V},\mathrm{th}}(r)\leq 2|r|\,\forall\,r\in\mathbb{R}\) and with that, \(h_{\mathrm{V},\mathrm{th}}(\bar{x}_{\mathrm{w}})\leq 2\,\left|\tilde{x}_{\mathrm{w}} \right|\,\forall\,\tilde{x}_{\mathrm{w}}\in\mathbb{R}^{n}\). 

**Lemma 10**.: _Let \(M_{\mathrm{w}}\succ 0\) and \(K_{\mathrm{w}}\succ 0\). Then, (5) is bounded by the two scalar, class \(\mathcal{K}_{\infty}\) functions \(\alpha_{1}(r)=\frac{1}{2}\,\lambda_{\mathrm{m}}(P_{\mathrm{V}})\,r^{2}\) and \(\alpha_{2}(r)=\frac{1}{2}\,\lambda_{\mathrm{m}}(P_{\mathrm{V}})\,r^{2}+2\, \sqrt{n}\,r\): \(\alpha_{1}(\|\tilde{y}_{\mathrm{w}}\|_{2}^{2})\leq V_{\mathrm{a}}(\tilde{y}_{ \mathrm{w}})\leq\alpha_{2}(\|\tilde{y}_{\mathrm{w}}\|_{2}^{2}\)._

Proof.: With Lemma 2, we already showed that \(V_{\mathrm{\mu}}(\tilde{y}_{\mathrm{w}})\) is a Lyapunov candidate. Now, we additionally also verify the conditions for ISS-Lyapunov candidates [40].

**Step 1:** Establishing bounds on \(V_{\mathrm{\mu}}(\tilde{y}_{\mathrm{w}})\).

We first identify the lower bound of \(V_{\mathrm{\mu}}(\tilde{y}_{\mathrm{w}})\) by leveraging Lemma 6:

\[\begin{split} V_{\mathrm{\mu}}(\tilde{y}_{\mathrm{w}})& =\frac{1}{2}\,\tilde{y}_{\mathrm{w}}^{\mathrm{T}}\,P_{\mathrm{V}}\, \tilde{y}_{\mathrm{w}}+\sum_{i=1}^{n}\int_{0}^{\bar{x}_{\mathrm{w},i}}\tanh( \bar{x}_{\mathrm{w},i}+\sigma+b_{i})\,\mathrm{d}\sigma-\sum_{i=1}^{n}\int_{0 }^{\bar{x}_{\mathrm{w},i}}\tanh(\bar{x}_{\mathrm{w},i}+b_{i})\,\mathrm{d} \sigma,\\ &=\frac{1}{2}\,\tilde{y}_{\mathrm{w}}^{\mathrm{T}}\,P_{\mathrm{V}}\, \tilde{y}_{\mathrm{w}}+h_{\mathrm{V},\mathrm{th}}(\tilde{x}_{\mathrm{w}}),\\ &\geq\frac{1}{2}\,\tilde{y}_{\mathrm{w}}^{\mathrm{T}}\,P_{\mathrm{V}} \,\tilde{y}_{\mathrm{w}}\,\,\geq\,\,\frac{1}{2}\,\lambda_{\mathrm{m}}(P_{ \mathrm{V}})\,\|\tilde{y}_{\mathrm{w}}\|_{2}^{2}\,=\,\alpha_{1}(\|\tilde{y}_{ \mathrm{w}}\|_{2}).\end{split}\] (40)

Similarly, we derive an upper bound for \(V_{\mathrm{\mu}}(\tilde{y}_{\mathrm{w}})\) exploiting Lemma 9.

\[\begin{split} V_{\mathrm{\mu}}(\tilde{y}_{\mathrm{w}})=& \frac{1}{2}\,\tilde{y}_{\mathrm{w}}^{\mathrm{T}}\,P_{\mathrm{V}}\, \tilde{y}_{\mathrm{w}}+\sum_{i=1}^{n}\int_{0}^{\bar{x}_{\mathrm{w},i}}\tanh( \bar{x}_{\mathrm{w},i}+\sigma+b_{i})\,\mathrm{d}\sigma-\sum_{i=1}^{n}\int_{0}^{ \bar{x}_{\mathrm{w},i}}\tanh(\bar{x}_{\mathrm{w},i}+b_{i})\,\mathrm{d}\sigma\\ &\leq\frac{1}{2}\,\lambda_{\mathrm{m}}(P_{\mathrm{V}})\,\|\tilde{y}_ {\mathrm{w}}\|_{2}^{2}+2\,\|\tilde{x}_{\mathrm{w}}\|_{1}\,\,\leq\,\frac{1}{2}\, \lambda_{\mathrm{m}}(P_{\mathrm{V}})\,\|\tilde{y}_{\mathrm{w}}\|_{2}^{2}+2\, \sqrt{n}\,\|\tilde{x}_{\mathrm{w}}\|_{2}\\ &\leq\frac{1}{2}\,\lambda_{\mathrm{m}}(P_{\mathrm{V}})\,\|\tilde{y}_ {\mathrm{w}}\|_{2}^{2}+2\,\sqrt{n}\,\|\tilde{y}_{\mathrm{w}}\|_{2}=\alpha_{2}( \|\tilde{y}_{\mathrm{w}}\|_{2}).\end{split}\] (41)

**Step 2:** Proof that \(\alpha_{1}(r),\alpha_{2}(r)\) belong to class \(\mathcal{K}_{\infty}\).

According to Lemma 5, \(P_{V}\succ 0\) and with that \(\lambda_{\mathrm{m}}(P_{V})>0\). First, we analyze the behavior of \(\alpha_{1}(r)\): as it is strictly increasing and \(\alpha_{1}(0)=0\), it belongs to class \(\mathcal{K}\). Furthermore, we can evaluate \(\lim_{r\to\infty}\alpha_{1}(r)=\infty\). Therefore, \(\alpha_{1}(r)\in\mathcal{K}_{\infty}\)[40]. \(\alpha_{2}(r)\) is also strictly increasing for \(r\in

#### a.5.1 Proof of Theorem 2

**Theorem 2 restated**.: _Suppose \(M_{\rm w},K_{\rm w},D_{\rm w}\succ 0\), \(0<\theta<1\), and that we choose \(0<\mu<\min\{\mu_{\rm V},\mu_{\rm V}\}\}\). Then, (4) is globally Input-to-State Stable (ISS) such that the solution \(\tilde{y}_{\rm w}(t)\) verifies_

\[\|\tilde{y}_{\rm w}\|_{2}\leq\beta\left(\|\tilde{y}_{\rm w}(t_{0})\|_{2},t-t_{ 0}\right)+\gamma\left(\sup_{t_{0}\leq\tau\leq t}\|g(u(\tau))\|_{2}\right), \qquad\forall\;t\geq t_{0}\] (42)

_where \(\beta(r,t)\in\mathcal{KL}\), \(\gamma(r)=\sqrt{\frac{(1+\mu^{2})\,\lambda_{\rm M}(P_{\rm V})\,r^{2}+4\, \theta\,\sqrt{n}\,\sqrt{1+\mu^{2}\,\lambda_{\rm m}(P_{\rm V})\,r}}{\theta^{2 }\,\lambda_{\rm m}(P_{\rm V})\,\lambda_{\rm m}^{2}(P_{\rm V})}}\in\mathcal{K}\)._

Proof.: **Step 1:** Bounds on ISS-Lyapunov candidate.

Lemma 10 provides the \(\mathcal{K}_{\infty}\) functions \(\alpha_{1}(r)=\frac{1}{2}\,\lambda_{\rm m}(P_{\rm V})\,r^{2}\) and \(\alpha_{2}(r)=\frac{1}{2}\,\lambda_{\rm M}(P_{\rm V})\,r^{2}+2\,\sqrt{n}\,r\) such that \(\alpha_{1}(\|\tilde{y}_{\rm w}\|_{2}^{2})\leq V_{\mu}(\tilde{y}_{\rm w})\leq \alpha_{2}(\|\tilde{y}_{\rm w}\|)_{2}^{2}\).

**Step 2:** Minimum energy dissipation.

Let \(0<\mu<\min\{\mu_{\rm V},\mu_{\rm V}\}\) as in the proof of Theorem 1. We compute the input-dependent time-derivative of the ISS Lyapunov candidate. We do not repeat the derivations already made as part of (7) (e.g., exploiting Lemmas 7 and 8).

\[\begin{split}\hat{V}_{\mu}(\tilde{y}_{\rm w},u(t))& =\,-\tilde{y}_{\rm w}^{\rm T}\,P_{\rm V}\,\tilde{y}_{\rm w}-\mu \,\left(\tanh(\bar{x}_{\rm w}+\tilde{x}_{\rm w}+b)-\tanh(\bar{x}_{\rm w}+b) \right)^{\rm T}\tilde{x}_{\rm w}+\tilde{y}_{\rm w}^{\rm T}\left[\begin{matrix} \mu\,g(u(t))\\ g(u(t))\end{matrix}\right],\\ &\leq\,-\lambda_{\rm m}\left(P_{\rm V}\right)\,\|\tilde{y}_{\rm w}\|_{2}^{ 2}+\left\|\tilde{y}_{\rm w}^{\rm T}\left[\begin{matrix}\mu\,g(u(t))\\ g(u(t))\end{matrix}\right]\right\|_{1},\\ &\leq\,-\lambda_{\rm m}\left(P_{\rm V}\right)\,\|\tilde{y}_{\rm w}\|_{2}^{ 2}+\|\tilde{y}_{\rm w}\|_{2}\left\|\left[\begin{matrix}\mu\,g(u(t))\\ g(u(t))\end{matrix}\right]\right\|_{2},\\ &\leq\,-\lambda_{\rm m}\left(P_{\rm V}\right)\,\|\tilde{y}_{\rm w}\|_{2}^{ 2}+\sqrt{1+\mu^{2}}\,\|\tilde{y}_{\rm w}\|_{2}\|g(u(t))\|_{2},\end{split}\] (43)

where we leveraged Holder's inequality. We choose \(\theta\) such that \(0<\theta<1\). As a consequence,

\[\hat{V}_{\mu}(\tilde{y}_{\rm w},u(t))\leq-(1-\theta)\,\lambda_{\rm m}\left(P_ {\rm V}\right)\,\|\tilde{y}_{\rm w}\|_{2}^{2},\qquad\forall\;\|\tilde{y}_{\rm w }\|_{2}\;\geq\;\frac{\sqrt{1+\mu^{2}}}{\theta\,\lambda_{\rm m}\left(P_{\rm V} \right)}\,\|g(u(t))\|_{2}>0.\] (44)

We define

\[\alpha_{3}(r)=(1-\theta)\,\lambda_{\rm m}\left(P_{\rm V}\right)\,r^{2},\qquad \text{and}\;\rho(r)=\frac{\sqrt{1+\mu^{2}}}{\theta\,\lambda_{\rm m}\left(P_{\rm V }\right)}\,r.\] (45)

Lemma 8 shows that \(\lambda_{\rm m}\left(P_{\rm V}\right)>0\). Therefore, \(\alpha_{3}(r)\) is a continuous positive function. Furthermore, as \(\mu>0\), \(\rho(r)\) is a strictly increasing for \(r\in[0,\infty)\). Additionally with \(\rho(0)=0\) verified, it can be stated that \(\rho(r)\) belongs to class \(\mathcal{K}\)[40]. We conclude that

\[\hat{V}_{\mu}(\tilde{y}_{\rm w},u(t))\leq-\alpha_{3}\left(\|\tilde{y}_{\rm w}\|_ {2}^{2}\right),\qquad\forall\;\|\tilde{y}_{\rm w}\|_{2}\;\geq\;\rho\left(\|g(u(t ))\|_{2}\right)>0.\] (46)

**Step 3:** Conclusions.

As a result of Steps 1 and 2, the system is input-to-state stable, and with that, the solution \(\tilde{y}_{\rm t}\) satisfies [40]

\[\|\tilde{y}_{\rm w}\|_{2}\leq\beta\left(\|\tilde{y}_{\rm w}(t_{0})\|_{2},t-t_{ 0}\right)+\gamma\left(\sup_{t_{0}\leq t^{\prime}\leq t}\|g(u(t^{\prime}))\|_{2 }\right),\] (47)

with

\[\gamma(r)=\alpha_{1}^{-1}\circ\alpha_{2}\circ\rho(r)=\sqrt{\frac{(1+\mu^{2})\, \lambda_{\rm M}(P_{\rm V})\,r^{2}+4\,\theta\,\sqrt{n}\,\sqrt{1+\mu^{2}\, \lambda_{\rm m}(P_{\rm V})\,r}}{\theta^{2}\,\lambda_{\rm m}(P_{\rm V})\, \lambda_{\rm m}^{2}(P_{\rm V})}}.\] (48)

Indeed, based on Theorem 1 and the associated proof, we can easily verify that \(\gamma(r)\) is strictly increasing for \(r\in[0,\infty)\) and that \(\gamma(0)=0\). As a consequence, \(\gamma(r)\in\mathcal{K}\)[40].

## Appendix B Appendix on an approximate closed-form solution for coupled oscillator networks

### Closed-form solution to a forced harmonic oscillator

As introduced in (1), we consider the linear dynamics of a 1D forced harmonic oscillator with state \(y_{i}=[x_{i}\quad\dot{x}_{i}]\in\mathbb{R}^{2}\)

\[\dot{y}_{i}=\begin{bmatrix}\frac{\mathrm{d}x_{i}}{\mathrm{d}x_{i}}\\ \frac{\mathrm{d}x_{i}}{\mathrm{d}t}\end{bmatrix}=f_{\mathrm{Id},i}(y_{i},F_{i} )=\begin{bmatrix}\dot{x}_{i}\\ F_{i}(t)-\kappa_{i}\,x_{i}(t)-d_{i}\,\dot{x}_{i}(t)\end{bmatrix},\] (49)

where \(F_{i}(t)\in\mathbb{R}\) is the externally applied force acting on the oscillator.

The characteristic equation for the unforced dynamics (i.e., \(F_{i}(t)=0\)) can be stated as [48]

\[\lambda^{2}+2\,\zeta_{i}\,\omega_{\mathrm{n},i}\,\lambda+\omega_{ \mathrm{n},i}^{2}=0,\qquad\text{with the solutions }\lambda_{1,2}=-\zeta_{i}\,\omega_{\mathrm{n},i}\pm\omega_{ \mathrm{n},i}\,\sqrt{\zeta_{i}^{2}-1},\] (50)

where \(\omega_{\mathrm{n},i}=\sqrt{\kappa_{i}}\) and \(\zeta_{i}=\frac{d_{i}}{2\,\sqrt{\kappa_{i}}}\) are the natural frequency and the damping factor of the \(i\)th homogeneous oscillator, respectively. This harmonic oscillator exhibits three regimes: underdamped (\(\zeta_{i}<1\)), critically damped (\(\zeta_{i}=1\)), and overdamped regime (\(\zeta_{i}>1\)).

We approximate the forcing using the Heavyside function \(H(t)\): \(F_{i}(t)=F_{i}(t_{k})\,H(t)\), where \(F_{i}(t_{k})\) is the constant external forcing as computed by (10). The solution for \(\zeta_{i}\neq 1\) is given by [48]

\[y_{i}(t_{k+1})=\begin{bmatrix}x_{i}(t_{k+1})\\ \dot{x}_{i}(t_{k+1})\end{bmatrix}=\begin{bmatrix}(c_{1,i}\,\cos(\beta_{i}\, \delta t)+c_{2,i}\sin(\beta_{i}\,\delta t))\,\,e^{-\alpha_{i}\,\delta t}+\frac {F_{i}}{\kappa_{i}}\\ -\left((c_{1,i}\alpha_{i}-c_{2,i}\beta_{i})\,\cos(\beta_{i}\,\delta t)+(c_{1,i} \beta_{i}+c_{2,i}\alpha_{i})\,\sin(\beta_{i}\,\delta t)\right)\,\,e^{-\alpha_ {i}\,\delta t}\end{bmatrix},\] (51)

where \(\delta t=t_{k+1}-t_{k}\), \(\alpha_{i}=\zeta_{i}\,\omega_{\mathrm{n},i}\), and \(\beta_{i}=\omega_{\mathrm{n},i}\,\sqrt{1-\zeta_{i}^{2}}\). After enforcing the initial conditions \(x_{i}(t_{k}),x_{i}(t_{k})\), the integration constants

\[c_{1,i}=x_{i}(t_{k})-\frac{F_{i}(t_{k})}{\kappa_{i}},\qquad c_{2,i}=-2\,j\, \frac{\dot{x}_{i}(t_{k})+\alpha_{i}\,\left(x_{i}(t_{k})-\frac{F_{i}}{k_{i}} \right)}{\Delta\lambda_{i}},\] (52)

Figure 7: **Panel 7(a): Parameters of a forced and damped harmonic oscillator: \(m_{i}\in\mathbb{R}^{+}\) denotes the mass, \(\kappa_{i}\in\mathbb{R}^{+}\) the stiffness, and \(k_{i}\in\mathbb{R}^{+}\) the damping coefficient. The position and velocity of the oscillator are measured as \(x_{i}(t)\in\mathbb{R}\) and \(\dot{x}_{i}(t)\in\mathbb{R}\), respectively. The oscillator can be excited by the (potentially time-varying) external forcing \(F_{i}(t)\in\mathbb{R}\). Panel 7(b): Time evolution of a 1D harmonic oscillator for different values of \(\kappa_{i}\), \(d_{i}\), all in the undamped or underdamped regime. Panel 7(c): The four damping regimes of a harmonic oscillator: undamped (\(\zeta=0\)), underdamped (\(0<\zeta<1\)), critically damped (\(\zeta=1\)), and overdamped (\(zeta=1\)).**

[MISSING_PAGE_EMPTY:21]

### Empirical evaluation of approximation error

In Table 3, we present a comparison of CFA-CON with several other strategies for integrating nonlinear dynamics, such as CON. Following the implicit assumption made in Section B, we consider the case of \(g(u)=0\), \(K=\operatorname{diag}(\kappa_{1},\dots,\kappa_{n})\) and \(D=\operatorname{diag}(d_{1},\dots,d_{n})\) but with the hyperbolic coupling between the oscillators active (i.e., a full \(W\) matrix). Integrating the dynamics at a very small time step (i.e., \(\delta t=5\mathrm{e}{-5}\,\mathrm{s}\)) with a high-order ODE solver would give us a very accurate solution, but this is computationally infeasible in practice. We, therefore, regard this as the upper bound on the accuracy of the solution. A feasible solution would be to implement either a high-order solver such as Tsit5 at a larger integration time-step, e.g., \(\delta t=1\mathrm{e}{-1}\,\mathrm{s}\)) or a low-order solver with a slightly smaller integration time step, e.g., \(\delta t=5\mathrm{e}{-2}\,\mathrm{s}\)). Therefore, we also benchmark these options. We also benchmark an implementation specialized on the underdamped case (i.e., \(\zeta_{i}<1\)): Closed-Form Approximation of the Underdamped Coupled Oscillator Network (CFA-UDCON). This specialized implementation allows us to avoid using complex numbers in the algorithm and reduces the number of computations necessary for calculating the approximated solution. As a result, we see a considerable increase in the sim-time to real-time factor.

#### b.4.1 Integration error

We perform the integration error benchmark over \(100\) different network configurations, all consisting of \(50\) oscillators (\(n=50\)): First, we sample the natural frequency of the \(i\)th oscillator from a uniform distribution as \(\omega_{n,i}\sim\mathcal{U}(0.05\,\mathrm{Hz},0.5\,\mathrm{Hz})\), then we sample \(\kappa_{i}\sim\mathcal{U}(0.2\,\mathrm{N}/\mathrm{m},2\,\mathrm{N}/\mathrm{m})\) such that \(K=\operatorname{diag}(\kappa_{1},\dots,\kappa_{n})\succ 0\), which lets us determine each mass \(m_{i}=\frac{\kappa_{i}}{\omega_{n,i}^{2}}\). Next, the damping ratio is determined as \(\zeta_{i}\sim\mathcal{U}(0.1,0.9)\) and \(\zeta_{i}\sim\mathcal{U}(0.1,2.0)\) for the underdamped and general case, respectively. As a result, \(D=\operatorname{diag}(d_{1},\dots,d_{n})\succ 0\) with \(d_{i}=2\,\zeta_{i}\,\sqrt{m_{i}\,\kappa_{i}}\). Finally, by leveraging the Cholesky decomposition, we sample a \(W\succ 0\) and \(b_{i}\sim\mathcal{U}(-1,1)\). We compute the estimation error of all integrated trajectories with respect to the high-precision solution (i.e., Tsitouras' 5/4 method (Tsit5) at \(\delta t=5\mathrm{e}{-4}\,\mathrm{s}\)). For this, we compute the RMSE for each \(60\,\mathrm{s}\) trajectory and then take the mean and standard deviation across the \(100\) different network configurations.

#### b.4.2 Simulation-time to real-time factor

The simulation vs. real-time factor is computed as the simulated rollout duration per second of computational time. For this, we let each method simulate a \(60\,\mathrm{s}\) trajectory for \(100\) times and record the minimum run time on an Intel Core i7-10870H CPU (single core) over \(10\) trials. Because of computational constraints, we simulated with the high-precision Tsit5 solver the trajectory only \(5\) times.

#### b.4.3 Results

The results in Table 3 show that CFA-CON is \(30\,\mathrm{\char 37}\) more accurate than the Euler integrator at half of the speed. Compared against the Tsit5 integrator, CFA-CON exhibits a 1.56x speed increase while being significantly less accurate. For the underdamped case with \(\zeta<1\), the specialized implementation CFA-UDCON is \(14.8\,\mathrm{\char 37}\) faster and at the same time \(32\,\mathrm{\char 37}\) more accurate than the Euler integrator. Furthermore, CFA-UDCON is 3.7x faster and significantly less accurate than the Tsit5 integrator. We can conclude that in the pure rollout setting (i.e., no backpropagation involved) for a generic CON, the CFA-CON does not show clear advantages to an appropriately tuned Euler or Tsit5 solver. However, the specialized version CFA-UDCON demonstrates a 2.4x speed-up at no reduction of accuracy vs. CFA-CON for underdamped oscillator networks.

\begin{table}
\begin{tabular}{c c c c c} \hline \hline
**Method** & **RMSE** [m] \(\downarrow\) & **RMSE** \(\zeta<1\) [m] \(\downarrow\) & **Complexity**\(\downarrow\) & **Sim. time** & **Real time**\(\uparrow\) \\ \hline CON with Tsit5 & & n/a & n/a & \(\mathcal{O}\left(\frac{n^{\log 2\,7\,ph}}{\delta t}\right)=\mathcal{O}(3. \mathrm{e}\mathrm{e}\mathrm{1}\mathrm{1}\mathrm{1}\mathrm{)}\) & 5.68x \\ at \(\delta t=\mathrm{e}\mathrm{-}\mathrm{1}\mathrm{s}\) & \(5\mathrm{e}\mathrm{-}5\pm 1\mathrm{e}\mathrm{-}5\) & \(8\mathrm{e}\mathrm{-}6\pm 1\mathrm{e}\mathrm{-}5\) & \(\mathcal{O}\left(n\frac{n^{\log 2\,7\,ph}}{\delta t}\right)=\mathcal{O}(1. \mathrm{e}\mathrm{e}\mathrm{8}\mathrm{)}\) & 11310x \\ \hline CON with Euler & & & & \\ at \(\delta t=\mathrm{e}\mathrm{e}\mathrm{-}\mathrm{2}\mathrm{s}\) & \(0.010\pm 0.003\) & \(0.022\pm 0.005\) & \(\mathcal{O}\left(\frac{n^{\log 2\,7\,h}}{\delta t}\right)=\mathcal{O}(7. \mathrm{e}\mathrm{7})\) & 36500x \\ \hline CFA-CON (our) & & & & \\ with \(\delta t=\mathrm{e}\mathrm{-}\mathrm{1}\mathrm{s}\) & \(0.007\pm 0.002\) & \(0.015\pm 0.003\) & \(\mathcal{O}\left(\frac{n^{\log 2\,7\,h}}{\delta t}\right)=\mathcal{O}(3. \mathrm{e}\mathrm{5}\mathrm{7}\mathrm{)}\) & 17680x \\ \hline CFA-UDCON (our) & & n/a & \(0.015\pm 0.003\) & \(\mathcal{O}\left(\frac{n^{\log 2\,7\,h}}{\delta t}\right)=\mathcal{O}(3. \mathrm{e}\mathrm{5}\mathrm{7}\mathrm{)}\) & **41900x** \\ with \(\delta t=\mathrm{e}\mathrm{-}\mathrm{1}\mathrm{s}\) & & & \\ \hline \hline \end{tabular}
\end{table}
Table 3: Benchmarking of various methods for integrating the CON dynamics. The RMSE is computed with respect to the Tsitouras’ 5/4 method (Tsit5) (i.e., extremely high accuracy but also extremely high computational complexity). We denote with \(n\) the number of oscillators in the network (in this case \(n=50\)), with \(p\) the order of the numerical ODE solver, and with \(\delta t\) the time-step. When stating the complexity, we refer to \(h=t_{\,N}-t_{0}\) as the rollout horizon in seconds. In this case, we report the results for a horizon of \(h=60\,\mathrm{s}\). The RMSE column states the RMSE of the various integration strategies with respect to the _CON with Tsit5 at \(\delta t=5\mathrm{e}\mathrm{-}5\mathrm{s}\)_ solution, which we consider to be the ground-truth. The _RMSE_\(\zeta<1\) computes the same metrics, but this time for a dataset that contains only underdamped oscillators. The _\(\frac{\frac{\text{Sim. time}}{\text{Real time}}}{\text{Real time}}\)_ column states the ratio between the duration of the simulation achieved (in seconds) per second of real-time (i.e., computational time). We report the mean and standard deviation of the RMSE over \(100\) different network configurations.

Appendix on experimental setup and datasets

### Datasets

For all datasets, we generate images of size \(32\times 32\mathrm{px}\) and subsequently normalize the pixels to the interval \([-1,1]\).

#### c.1.1 Unactuated mechanical datasets

We consider multiple mechanical datasets based on a standard implementation included in the _Toy Physics_ category of the _NeurIPS 2021 Track on Datasets and Benchmarks_ publication by Botev et al. [26]: mass-spring with friction (M-SP+F), a single pendulum with friction (S-P+F), and a double pendulum with friction (D-P+F). All datasets contain \(5000\) system trajectories in the training set and \(1000\) trajectories each in the validation and test set. Each trajectory is generated by first randomly initializing the system, then rolling it out for \(3\,\mathrm{s}\) using an Euler integrator with a time step size of \(5\,\mathrm{ms}\). Samples are recorded at a rate of \(20\,\mathrm{Hz}\) (i.e., a time step of \(0.05\,\mathrm{s}\)). As a result, each trajectory contains \(60\) images of the system's state. As all of these datasets are unactuated, we can deactivate the input-to-forcing mapping component from all models (e.g., set \(g(u)=0\) for the CON model).

The _M-SP+F_ dataset contains motion samples of a damped harmonic oscillator with a mass of \(0.5\,\mathrm{kg}\), a spring stiffness of \(2\,\mathrm{N}/\mathrm{m}\), and a damping coefficient of \(0.05\,\mathrm{Ns}/\mathrm{m}\). For each trajectory, the initial condition of the mass-spring is randomly sampled by combining a random \(\mathrm{sign}(q)\) with a uniformly sampled \(|q|\sim\mathcal{U}(0.1\,\mathrm{m},1\,\mathrm{m})\). The position of the mass is rendered with a filled circle in a grayscale image.

The _SP+F_ and _DP+F_ datasets include the evolutions of a single-link pendulum and double-link pendulum, respectively, with a mass of \(0.5\,\mathrm{kg}\) attached to the end of each link, which has a length of \(1\,\mathrm{m}\). The dataset considers a gravitational acceleration of \(3\,\mathrm{m}/\mathrm{s}^{2}\). A rotational damper with coefficient \(0.05\,\mathrm{N}\mathrm{m}\mathrm{s}/\mathrm{rad}\) provides the friction. Similarly to the _M-SP+F_ dataset, both the sign and the absolute value of the initial configuration are randomly sampled, where \(|q(0)|\sim\mathcal{U}(1.3\,\mathrm{rad},2.3\,\mathrm{rad})\). The position of each mass is rendered with a filled circle. For the single-link pendulum, this is done in grayscale, and for the double pendulum, each mass is rendered with a different color (i.e., blue and red).

#### c.1.2 Actuated continuum soft robot datasets

The shape of slender and deformable rods can be approximated by considering the deformations along the 1D curve of the backbone [57]. While this curve is still infinite-dimensional, it is possible to discretize the backbone into (many) segments with piecewise constant strain [58; 57]. Accordingly, we describe the kinematics of a planar continuum soft robot consisting of \(n_{\mathrm{b}}\) segments with the PCS model [58]. We assume each segment has a length of \(100\,\mathrm{mm}\) and a diameter of \(20\,\mathrm{mm}\). The PCS model assumes each segment to have constant strain. In the planar case, this means that the shape of the \(i\)th segment can be parametrized by \(\xi_{i}=[\kappa_{\mathrm{be,i}}\quad\sigma_{\mathrm{sh,i}}\quad\sigma_{ \mathrm{ax,i}}]^{\mathrm{T}}\in\mathbb{R}^{3}\) where \(\kappa_{\mathrm{be,i}}\) is the bending strain (i.e., the curvature) in the unit \(\mathrm{rad}/\mathrm{m}\), \(\sigma_{\mathrm{sh,i}}\) is the shear strain (dimensionless), and \(\sigma_{\mathrm{ax,i}}\) is the axial elongation strain (dimensionless). The robot's configuration is then defined as \(q=\begin{bmatrix}\xi_{1}^{\mathrm{T}}&\cdots&\xi_{n_{\mathrm{b}}}^{\mathrm{T }}&\cdots&\xi_{n_{\mathrm{b}}}^{\mathrm{T}}\end{bmatrix}^{\mathrm{T}}\). In the case of Piecewise Constant Curvature (PCC), only the bending strain is active as shear strains and axial strains are neglected, and the configuration is now \(q\in\mathbb{R}^{n_{\mathrm{b}}}\). The PCS model generates EOM in the form of [59]

\[B(q)\,\ddot{q}+C(q,\dot{q})\,\dot{q}+G(q)+K_{\mathrm{q}}\,q+D_{\mathrm{q}}\, \dot{q}=u(t),\] (56)

where \(B(q)\succ 0\) and \(C(q,\dot{q})\) are the inertia and Corioli matrices, respectively. \(G(q)\) collects the gravitational forces, \(K_{\mathrm{q}}\succ 0\) is the stiffness matrix, and \(D_{\mathrm{q}}\succ 0\) contains the damping coefficients. \(u(t)\in\mathbb{R}^{n_{\mathrm{b}}}\) is an external force acting on the generalized coordinates, and now \(m=n_{\mathrm{b}}\).

We derive the corresponding dynamics for a continuum soft robot of material density \(600\,\mathrm{kg}/\mathrm{m}^{3}\), elastic modulus of \(20\,000\,\mathrm{Pa}\), shear modulus of \(10\,000\,\mathrm{Pa}\), and damping coefficients of \(0.000\,01\,\mathrm{N}\mathrm{m}^{2}\mathrm{s}\) for bending strains, \(0.01\,\mathrm{Ns}\) for shear strains, and \(0.01\,\mathrm{Ns}\) for axial strains, respectively. Gravity is pointing downwards. The implementation of the dynamics in JAX [60] is based on the _JSRM_ library [54; 61], and we simulate the robot using a constant integration time step of \(0.1\,\mathrm{ms}\). We render grayscale images of the robot with a size of \(32\times 32\mathrm{px}\) at a rate of \(50\,\mathrm{Hz}\) using OpenCV [62]. We generate \(10000\) trajectories, each of duration \(2.0\,\mathrm{s}\) and a sampling time-step of \(0.02\,\mathrm{s}\). We use \(60\,\mathrm{\%}\) training, \(20\,\mathrm{\%}\) validation, and \(20\,\mathrm{\%}\) test split. For each trajectory, we randomly sample a constant actuation/input \(u\sim\mathcal{U}(-u_{\mathrm{max}},u_{\mathrm{max}})\). We choose the maximum actuation magnitude to be equal to the sum of the contribution of the potential forces (i.e., elastic and gravitational forces): \(u_{\mathrm{max}}=G(q_{\mathrm{max}})+K\,q_{\mathrm{max}}\) with \(q_{\mathrm{max,i}}=[5\,\pi\,\,\mathrm{rad}/\mathrm{m},0.2,0.2]^{\mathrm{T}}\).

We generate three datasets based on this continuum soft robot model: in the _CS_ dataset, we consider one segment with all three planar strains active (i.e., bending, shear, and elongation). This results in three DOF and six-state variables in the dynamical model. In the case of the _PCC-NS-2_ and _PCC-NS-3_ datasets, we base the dataset on a simulated system consisting of two planar bending segments, respectively. Each segment is parametrized using Constant Curvature (CC) [63; 64], which results in two configuration variables and a state dimension of four.

#### c.1.3 Unactuated PDE reaction-diffusion dataset

We consider the 1*-order Reaction-diffusion (_R-D_) PDE on which (Champion et al, 2019). [9] evaluated their SINDy Autoencoder on. The PDE of the high-dimensional lambda-omega reaction-diffusion system is defined as

\[\frac{\partial u}{\partial t} =\,\left(1-(u^{2}+v^{2})\right)u+\beta\,(u^{2}+v^{2})\,v+d_{1} \left(\frac{\partial^{2}u}{\partial q_{1}^{2}}+\frac{\partial^{2}u}{\partial q _{2}^{2}}\right),\] (57) \[\frac{\partial v}{\partial t} =\,-\beta(u^{2}+v^{2})\,u+(1-(u^{2}+v^{2}))\,v+d_{2}\left(\frac{ \partial^{2}v}{\partial q_{1}^{2}}+\frac{\partial^{2}v}{\partial q_{2}^{2}} \right),\]

where \(u(t,q):\mathbb{R}\times\mathbb{R}^{2}\to\mathbb{R}\) and \(v(t,q):\mathbb{R}\times\mathbb{R}^{2}\to\mathbb{R}\) are time-dependent two vector fields defined over the spatial domain \(q\in\mathbb{R}^{2}\). We choose the same system parameters and initial condition as Champion et al. [9]: \(d_{1},d_{2}=0.1\), and \(\beta=1\) and

\[u(0,q) =\tanh\left(\sqrt{q_{1}^{2}+q_{2}^{2}}\,\cos\left(\angle(q_{1}+iq _{2})-\sqrt{q_{1}^{2}+q_{2}^{2}}\right)\right),\] (58) \[v(0,q) =\tanh\left(\sqrt{q_{1}^{2}+q_{2}^{2}}\,\sin\left(\angle(q_{1}+iq _{2})-\sqrt{q_{1}^{2}+q_{2}^{2}}\right)\right).\]

After discretizing the spatial domain into \(32\) points along each dimension, we solve the PDE with a MATLAB ODE45 solver the solution of \(u(t,q)\) and \(v(t,q)\) at each time step and grid point. Subsequently, the solution is multiplied with a Gaussian centered at the origin [9]

\[\bar{u}(t,q) =\,\exp(-0.01\,(q_{1}^{2}+q_{2}^{2}))\,\bar{u}(t,q),\] (59) \[\bar{v}(t,q) =\,\exp(-0.01\,(q_{1}^{2}+q_{2}^{2}))\,\bar{v}(t,q).\]

We integrate the system from the specified initial condition for \(500\,\mathrm{s}\) and store samples at a time step of \(0.05\,\mathrm{s}\). We divide the entire sequence into \(99\) subsequences each containing \(101\) samples. We train the models to predict these subsequences that have a horizon of \(5.0\,\mathrm{s}\) each.

We stack the solution of \(\bar{u}(t,q)\) and \(\bar{v}(t,q)\) contained in the two grids \(o_{\mathrm{u}}(t),o_{\mathrm{v}}(t)\in\mathbb{R}^{32\times 32}\), respectively, to gather the images \(o(t)\in\mathbb{R}^{32\times 32\times 2}\) containing two channels. A sample sequence of the generated images is presented in Apx. 17. We use \(60\,\%\) of the subsequences (i.e., \(59\)) as our training set, and employ \(20\,\%\) (i.e., \(19\)) for the validation and test sets, respectively.

### Autoencoder architecture

For the encoder and decoder, we rely on a vanilla CNNs implemented as a \(\beta\)-VAE [5].

**Encoder.** The encoder consists of two convolutional layers with kernel size \((3,3)\) and stride \((1,1)\) mapping to \(16\), \(32\), respectively. The features are flattened and then passed to two linear layers with hidden dimension \(256\) and \(n_{z}\). Each layer (except for the last) is followed by a layer norm [65] and a LeakyReLU nonlinearity.

**Decoder.** The decoder first uses two linear layers to map to hidden dimensions of \(256\) and \(32768\), respectively. We then apply two 2D transposed convolutions [66] reducing the number of channels first to \(16\), and then to \(1\). Each layer (except for the last linear and last convolutional) is followed by a layer norm [65] and a LeakyReLU nonlinearity. Finally, we apply a sigmoid function to clip the output into the range \([-1,1]\).

### Latent dynamic models

In the following section, we provide implementation details for the latent dynamic models that we evaluated as part of this work.

#### c.3.1 Coupled Oscillator Network (CON)

We leverage the CON in \(\mathcal{W}\)-coordinates given by (3) for learning latent space dynamics. Specifically, we consider the input-to-force mapping \(g(u))=B(u)\,u(t)\), where \(B(u)\in\mathbb{R}^{n\times m}\) is parametrized by few-layer MLP. We report results for two different sizes of the MLP: one medium-sized variant consisting of five layers with a hidden dimension of \(30\) and a small variant with two layers and a hidden dimension of \(12\). In both cases, we use a hyperbolic tangent as a nonlinearity.

When training the model, we jointly optimize \(M_{\mathrm{w}}^{-1},K_{\mathrm{w}},D_{\mathrm{w}},b\) and \(g(u)\). However, we also need to make sure that we adhere to the stability constraints \(M_{\mathrm{w}}^{-1},K_{\mathrm{w}},D_{\mathrm{w}}\succ 0\). For this, we leverage the Cholvesky decomposition [67]. Instead of directly learning the full matrix \(A\in\mathbb{R}^{n_{z}\times n_{z}}\), we designate the elements of an upper triangular matrix \(U\in\mathbb{R}^{n_{z}\times n_{z}}\) as the trainable parameters. The Cholesky decomposition demands that \(\mathrm{diag}(U_{11},\dots,U_{n_{z}n_{z}})>0\). Therefore, we apply the operation

\[U_{ii}=\log\left(1+e^{\bar{U}_{ii}+\epsilon_{1}}\right)+\epsilon_{2},\] (60)where \(\hat{U}\) is the learned upper triangular matrix, and \(\epsilon_{1}=1\mathrm{e}-6\) and \(\epsilon_{2}=2\mathrm{e}-6\) are two small, positive values. The positive-definite matrix \(A\) is now given by \(A=U^{\top}U\succ 0\).

#### c.3.2 Neural ODEs

We consider two kinds of Neural ODEs [27]: the vanilla \(f_{\mathrm{NODE}}:\xi(t)\times u(t)\mapsto\dot{\xi}(t)\) maps latent state and system actuation directly into a time derivative of the latent state. In contrast, for the _MECH-NODE_, we enforce the latent dynamics to have a mechanical structure

\[\dot{\xi}(t)=\begin{bmatrix}\frac{\mathrm{d}z}{\mathrm{d}t}\\ \frac{\mathrm{d}z}{\mathrm{d}t}\end{bmatrix}=\begin{bmatrix}\dot{z}(t)\\ f_{\mathrm{MECH-NODE}}(\xi(t),u(t))\end{bmatrix}.\] (61)

We represent both \(f_{\mathrm{NODE}}\) and \(f_{\mathrm{MECH-NODE}}\) as MLPs consisting of \(5\) layers, a hidden dimension of \(30\), and a hyperbolic tangent nonlinearity.

#### c.3.3 Autoregressive models

For the below stated autoregressive models, we divide the integration between two (latent) samples \(\xi(t_{k})\) and \(\xi(t_{k+1})\) into \(N_{\mathrm{int}}\) integration steps \(\xi(t_{k}+\delta t),\dots,\xi(t_{k}+k^{\prime}\delta t),\dots,\xi(t_{k}+N_{ \mathrm{int}}\delta t)\) where \(\delta t\) is the integration step size and \(t_{k+1}=t_{k}+N_{\mathrm{int}}\delta t\). The autoregressive model now describes the transition \(\xi(t_{k^{\prime}+1})=f_{\mathrm{ar}}(\xi(t_{k^{\prime}}),u(t_{k}))\)\(\forall k^{\prime}\in\mathbb{I},\dots,N_{\mathrm{int}}\).

Rnn.We implement a standard, single-layer Elman RNN with tanh nonlinearity. The hidden state captures the latent state of the system. The latent state transition functions are given by

\[\xi(t_{k^{\prime}+1})=\tanh(W_{\mathrm{hh}}\,\xi(t_{k^{\prime}})+b_{\mathrm{ hh}}+W_{\mathrm{hi}}\,u(t_{k})+b_{\mathrm{ih}}),\] (62)

where \(W_{\mathrm{hh}}\in\mathbb{R}^{2n_{x}\times 2n_{z}}\), \(b_{\mathrm{hh}}\in\mathbb{R}^{2n_{z}}\), \(W_{\mathrm{ih}}\in\mathbb{R}^{2n_{z}\times m}\), and \(b_{\mathrm{ih}}\in\mathbb{R}^{2n_{z}}\).

Gru.We implement a standard, single-layer GRU [30] with sigmoid activation function where we interpret the latent state of the system as the hidden state of the cell. The latent state transition functions are given by

\[\begin{split} r&=\sigma\left(W_{\mathrm{hr}}\,\xi(t_{k^{ \prime}})+b_{\mathrm{hr}}+W_{\mathrm{ir}}\,u(t_{k})+b_{\mathrm{ir}}\right)\\ p&=\sigma\left(W_{\mathrm{hp}}\,\xi(t_{k^{\prime}})+b_{ \mathrm{hp}}+W_{\mathrm{jp}}\,u(t_{k})+b_{\mathrm{ip}}\right)\\ n&=\,\tanh\left(r\ominus(W_{\mathrm{hn}}\,\xi(t_{k^{ \prime}})+b_{\mathrm{hn}})+W_{\mathrm{in}}\,u(t_{k})+b_{\mathrm{in}}\right)\\ \xi(t_{k^{\prime}+1})&=(1-p)\odot n+p\odot\xi(t_{k^{ \prime}})\end{split}\] (63)

where \(\sigma\) is the sigmoid function, \(\odot\) the Hadamard product, \(W_{\mathrm{hr}},W_{\mathrm{hp}},W_{\mathrm{hn}}\in\mathbb{R}^{2n_{z}\times 2n_{z}}\), \(W_{\mathrm{ir}},W_{\mathrm{ip}},W_{\mathrm{in}}\in\mathbb{R}^{2n_{z}\times m}\), and \(b_{\mathrm{hr}},b_{\mathrm{ir}},b_{\mathrm{ip}},b_{\mathrm{in}}\in\mathbb{R}^{2 n_{z}}\).

coRNN.A time-discrete coRNN is defined by the transition function

\[\xi(t_{k^{\prime}+1})=\begin{bmatrix}z(t_{k^{\prime}+1})\\ \dot{z}(t_{k^{\prime}+1})\end{bmatrix}=\begin{bmatrix}z(t_{k^{\prime}})+\delta t \,\dot{z}(t_{k^{\prime}})\\ \dot{z}(t_{k^{\prime}+1})\end{bmatrix}\] (64)

where \(\gamma,\varepsilon\in\mathbb{R}^{+}\) are positive, scalar hyperparameters representing the stiffness and damping coefficients, respectively. The term \(\tanh\left(W\xi(t_{k^{\prime}})+Vu(t_{k})+b\right)\) with \(W\in\mathbb{R}^{2n_{z}\times 2n_{z}}\), \(V\in\mathbb{R}^{n_{z}\times m}\), and \(b\in\mathbb{R}^{n_{z}}\) contributes nonlinear state-to-state connections. It is implemented with a linear layer operating on \((\xi(t_{k^{\prime}}),u(t_{k}))\) followed by a hyperbolic tangent nonlinearity.

CFA-Con.We adapt the Alg. 1 for predicting the time evolution in latent-space

\[\xi(t_{k^{\prime}+1})=f_{\mathrm{CFA-CON}}(\xi(t_{k}^{\prime}),u(t_{k})),\] (65)

where \(f_{\mathrm{CFA-CON}}\) describe the autoregressive state transition by the CFA-CON model as introduced in Eq. 11.

### First-order variants of dynamical models

For learning (latent) dynamics of \(1^{\mathrm{st}}\)-order systems (e.g., the reaction-diffusion dataset _R-D_), it might be beneficial also to formulate the dynamical model to be of \(1^{\mathrm{st}}\)-order. While this is straightforward for some dynamics that do not explicitly take the order into account (e.g., RNN, GRU, NODE), for other models such as coRNN, CON, and CFA-CON more adjustments are necessary. Namely, we substitute the \(\frac{\mathrm{d}z}{\mathrm{d}t}\) component of the ODE with the expression for \(\frac{\mathrm{d}z}{\mathrm{d}t}\). Furthermore, we remove any terms that depend on the velocity \(\dot{z}\) (e.g., damping effects). Below, we report in detail the adapted, \(1^{\mathrm{st}}\)-order formulations for the coRNN, CON, and CFA-CON models.

Con.In the \(1^{\mathrm{st}}\)-order version, we adapt the standard, \(2^{\mathrm{nd}}\)-order ODE of the CON network as defined in (3) to

\[\dot{\xi}(t)=\dot{z}(t)=M_{\mathrm{w}}^{-1}\left(g(u(t))-K_{\mathrm{w}}z(t)- \tanh(z(t)+b)\right).\] (66)coRNN.In the 1st-order version, we define the transition function as

\[\xi(t_{k^{\prime}+1})=z(t_{k^{\prime}+1})=z(t_{k^{\prime}})-\delta t\,\gamma\,z(t _{k^{\prime}})+\delta t\,\tanh\left(W\xi(t_{k^{\prime}})+Vu(t_{k})+b\right).\] (67)

Cfa-Con.We adapt a 1st-order version of Alg. 1 for predicting the time evolution in latent-space

\[\begin{split}&\xi(t_{k^{\prime}+1})=z(t_{k^{\prime}+1})=z(t_{k^{ \prime}})+\int_{t_{k^{\prime}}}^{t_{k^{\prime}}+\delta t}F(t_{k^{\prime}})- \kappa\,z(t^{\prime})\,\mathrm{d}t^{\prime},\\ & F(t_{k^{\prime}})=g(u(t_{k}))-(K-\kappa)z(t_{k^{\prime}})- \tanh(Wz(t_{k^{\prime}})+b),\end{split}\] (68)

where the closed-form solution for the integral is given by

\[\int_{t_{k^{\prime}}}^{t_{k^{\prime}}+\delta t}F(t_{k^{\prime}})-\kappa\,z(t^{ \prime})\,\mathrm{d}t^{\prime}=\frac{F(t_{k^{\prime}})}{\kappa}\left(1-\,e^{ -\kappa\,\delta t}\right).\] (69)

### Estimation of the initial latent velocity

For 2nd-order systems and when integrating the evolution of the latent state \(\xi(t)=\begin{bmatrix}z^{\mathrm{T}}(t)&\dot{z}^{\mathrm{T}}(t)\end{bmatrix}^ {\mathrm{T}}\) in time, we need to have access to an initial latent velocity \(\dot{z}(t_{0})\) such that we can roll out the latent state \(\xi(t)\) in time. A naive approach to estimating such an initial latent velocity would be to encode multiple (at least two) images of the system at the start of the trajectory into latent space and then perform numerical differentiation (e.g., finite differences) in latent space. However, we found the resulting \(\dot{z}(t_{k})\) to be relatively noisy and susceptible to small encoding errors. Instead, we propose to perform numerical differentiation in image space and then map this velocity into latent space using the encoder's Jacobian. First, we estimate the image-space velocity at \(t_{k}\) using finite differences: \(\hat{o}(t_{k})\approx\frac{o(\hat{t}_{k+1})-o(\hat{t}_{k-1})}{t_{k+1}-t_{k-1}}\). The latent velocity is then estimated as \(\dot{z}(t_{k})=\frac{\partial\Phi}{\partial o}(o(t_{k}))\,\hat{o}(t_{k})\), where \(\frac{\partial\Phi}{\partial o}\) is obtained with forward-mode automatic differentiation.

### Training

We implement the network dynamics and the neural networks (e.g., encoder, decoder, and MLPs) in JAX [60] and Flax [68], respectively. When training or inferring time-continuous dynamical models (e.g., NeuralODE, CON), we rely on Diffrax [47] for numerical integration of the ODE using the Dormand-Prince's 5/4 method [69] (Dopri5). For the numerical integration of both the time-continuous and the time-discrete models (e.g., RNN, coRNN, CFA-CON), we use an integration time-step \(\delta t\) of \(0.025\,\mathrm{s}\) and \(0.01\,\mathrm{s}\) for the _Toy Physics_[26] and soft robotic datasets, respectively.

Because of the GPU memory constraints, we limit ourselves to a batch size of \(30\) and \(80\) trajectories for the _Toy Physics_[26] and soft robotic datasets, respectively. We implement a learning rate schedule consisting of a warm-up (5 epochs) and a cosine annealing [70] period (remaining epochs). We employ an AdamW optimizer [71; 72] with \(\beta_{1}=0.9\), \(\beta_{2}=0.999\) for updating both neural network weights (e.g., encoder, decoder) and parameters of the dynamical model (e.g., \(K\), \(D_{\mathrm{w}}\), \(M_{\mathrm{w}}\), etc.).

Before training, we conduct a hyperparameter selection study using Optuna [53]. For this, we leverage a Tree-Structured Parzen Estimator [73] for identifying hyperparameters such as the base learning rate, the weight decay, the loss function weights, and model-specific hyperparameters such as the number of MLP layers, the hidden dimension of the MLP layers, the \(\gamma\) and \(\epsilon\) values for the coRNN model etc. that minimize the RMSE of the predicted images. To reduce computational requirements, we employ the Asynchronous Successive Halving Algorithm [74] to stop unpromising trials early.

### Evaluation metrics

Similar to other publications in the field [75; 76; 77], we state the RMSE, the Peak Signal-to-Noise Ratio (PSNR) and the Structural Similarity Index Measure (SSIM) [78] between the ground-truth image \(o\in\mathbb{R}^{h_{\alpha}\times w_{\alpha}}\) and the predicted image image \(\hat{o}\in\mathbb{R}^{h_{\alpha}\times w_{\alpha}}\). We use the separated test set for all evaluation results.

#### c.7.1 Root Mean-Square Error

The RMSE between the two images is given by

\[\text{RMSE}(o,\hat{o})=\sqrt{\sum_{u=1}^{h_{\alpha}}\sum_{v=1}^{w_{\alpha}} \frac{(o_{uv}-\hat{o}_{uv})^{2}}{h_{\alpha}\,w_{\alpha}}}.\] (70)

#### c.7.2 Peak Signal-to-Noise Ratio

The PSNR is a function of the total Mean Squared Error (MSE) loss and the maximum dynamic range of the image \(L\).

\[\mathrm{PSNR}(o,\hat{o})=20\,\log_{10}(L)-10\,\log_{10}\left(\sum_{u=1}^{h_{o}} \sum_{v=1}^{w_{o}}\frac{(o_{uv}-\hat{o}_{uv})^{2}}{h_{o}\,w_{o}}\right).\] (71)

As we work with normalized images with pixels in the interval \([-1,1]\), the dynamic range is \(L=2\).

#### c.7.3 Structural Similarity Index Measure

As simple pixel-by-pixel metrics such as RMSE or PSNR tend to average out any encountered errors, this could lead to a situation in which a significant reconstruction error in a part of the image is not seen in the RMSE metric but has a huge impact on the visual appearance of the reconstruction. SSIM [78] incorporates not just the _absolute errors_, but also the strong inter-dependencies between pixels, especially when they are spatially close. The SSIM metric between two observations \(o\) and \(\hat{o}\) is given by

\[\mathrm{SSIM}(o,\hat{o})=l^{\alpha}(o,\hat{o})\,c^{\beta}(o,\hat{o})\,s^{ \gamma}(o,\hat{o}),\] (72)

where

\[l(o,\hat{o})=\frac{2\mu_{o}\mu_{\hat{o}}+C_{1}}{\mu_{\hat{o}}^{2}+\mu_{\hat{o }}^{2}+C_{1}},\quad c(o,\hat{o})=\frac{2\sigma_{o}\sigma_{\hat{o}}+C_{2}}{ \sigma_{\hat{o}}^{2}+\sigma_{\hat{o}}^{2}+C_{2}},\quad s(o,\hat{o})=\frac{ \sigma_{o\hat{o}}+C_{3}}{\sigma_{o}\sigma_{\hat{o}}+C_{3}}.\] (73)

We use the constants \(C_{1}=(k_{1}L)^{2}\), \(C_{2}=(k_{2}L)^{2}\) and \(C_{3}=C_{2}/2\), where \(L\) signifies the dynamic range as previously used for the PSNR metric, and \(k_{1}=0.01\) and \(k_{2}=0.03\). The average \(\mu\) and the variance \(\sigma^{2}\) is computed with a Gaussian filter with a 1D kernel of size \(11\) and sigma \(1.5\). We set the weight exponents \(\alpha\), \(\beta\), and \(\gamma\) for the luminance, contrast, and structure comparisons all to one. We rely on the PIX library [79] for efficiently computing the SSIM metric.

### Compute resources

We trained the models on several desktop workstations for a total duration of roughly \(150\,\mathrm{h}\). In total, we relied on 10x RTX 3090/4090 GPUs, each with 24 GB of VRAM, training the models in parallel. Each workstation contained between 64 and 128 GB of RAM, and we used roughly 100 GB of total storage. Training each model on one random seed took between \(45\,\mathrm{min}\) and \(4\,\mathrm{h}\) depending on the model type, the integration time constant, and the number of trainable parameters. The hyperparameter tuning we conducted beforehand (only on one random seed) took roughly the same time and computational resources as generating the final results.

For the control experiments, we additionally used a laptop with a 16-core Intel Core i7-10870H CPU and 32 GB RAM. We did not need to use a GPU for evaluating the model during closed-loop control.

[MISSING_PAGE_FAIL:29]

[MISSING_PAGE_FAIL:30]

\begin{table}
\begin{tabular}{c c c c c} \hline \hline
**Model** & **RMSE \(\downarrow\)** & **PSNR \(\uparrow\)** & **SSIM \(\uparrow\)** & **\# Parameters \(\downarrow\)** \\ \hline RNN & \(0.3763\pm 0.0374\) & \(3.82\pm 0.12\) & \(0.4463\pm 0.1358\) & **20** \\ GRU [30] & \(0.3232\pm 0.0368\) & \(\mathbf{3.99\pm 0.13}\) & \(0.6798\pm 0.0949\) & \(52\) \\ \(1^{\text{st}}\)-order coRNN [35] & \(\mathbf{0.0741\pm 0.0001}\) & \(\mathbf{5.35\pm 0.00}\) & \(\mathbf{0.9724\pm 0.0014}\) & **20** \\ NODE [27] & \(\mathbf{0.0738\pm 0.0007}\) & \(\mathbf{5.36\pm 0.01}\) & \(\mathbf{0.9683\pm 0.0022}\) & \(3064\) \\ CON (our) & \(0.1110\pm 0.0160\) & \(5.03\pm 0.12\) & \(0.9372\pm 0.0109\) & \(24\) \\ CFA-CON (our) & \(0.1068\pm 0.0059\) & \(5.05\pm 0.05\) & \(0.9418\pm 0.0026\) & \(24\) \\ \hline \hline \end{tabular}
\end{table}
Table 10: Benchmarking of CON and CFA-CON at learning latent dynamics on the _R-D_ (reaction-diffusion) dataset. For all models, a latent dimension of \(n_{z}=4\) is chosen. As this dataset does not consider inputs, we remove all parameters in the RNN, GRU, coRNN, CON, and CFA-CON models related to the input mapping. Also, as the _reaction-diffusion_ system is governed by \(1^{\text{st}}\)-order PDE dynamics, we use specialized, \(1^{\text{st}}\)-order version of the _CON_, _CFA-CON_, and _coRNN_ dynamics. We report the mean and standard deviation over three different random seeds and the number of parameters of each latent dynamics model.

\begin{table}
\begin{tabular}{c c c c c} \hline \hline
**Model** & **RMSE \(\downarrow\)** & **PSNR \(\uparrow\)** & **SSIM \(\uparrow\)** & **\# Parameters \(\downarrow\)** \\ \hline RNN & \(0.2232\pm 0.0075\) & \(19.05\pm 0.29\) & \(0.8955\pm 0.0083\) & \(696\) \\ GRU [30] & \(0.2148\pm 0.0196\) & \(19.38\pm 0.76\) & \(0.9039\pm 0.0223\) & \(2040\) \\ coRNN [35] & \(0.2474\pm 0.0018\) & \(18.15\pm 0.06\) & \(0.8877\pm 0.0011\) & **336** \\ NODE [27] & \(0.3373\pm 0.0565\) & \(15.46\pm 1.34\) & \(0.7432\pm 0.0935\) & \(4374\) \\ MECH-NODE & \(0.1900\pm 0.0024\) & \(20.45\pm 0.11\) & \(0.9315\pm 0.0011\) & \(4002\) \\ CON-S (our) & \(\mathbf{0.1792\pm 0.0038}\) & \(\mathbf{20.96\pm 0.18}\) & \(\mathbf{0.9392\pm 0.0023}\) & \(1386\) \\ CON-M (our) & \(\mathbf{0.1785\pm 0.0023}\) & \(\mathbf{20.99\pm 0.11}\) & \(\mathbf{0.9395\pm 0.0018}\) & \(8568\) \\ CFA-CON (our) & \(0.1803\pm 0.0003\) & \(20.90\pm 0.01\) & \(0.9366\pm 0.0004\) & \(8568\) \\ \hline \hline \end{tabular}
\end{table}
Table 9: Benchmarking of CON and CFA-CON at learning latent dynamics on the _PCC-NS-3_ (soft robot with three constant curvature segments) dataset. For all models, a latent dimension of \(n_{z}=12\) is chosen. _CON-S_ and _CON-M_ are small and medium-sized versions of the CON model, respectively. _MECH-NODE_ is a NODE with prior knowledge about the mechanical structure of the system (i.e., \(\frac{\mathrm{d}x}{\mathrm{d}t}=\dot{x}\)). We report the mean and standard deviation over three different random seeds and the number of parameters of each latent dynamics model.

Figure 8: Evaluation of prediction performance of the various models vs. the dimension of their latent representation \(n_{z}\) and the number of trainable parameters of the dynamics model, respectively. We optimize the hyperparameters for the case of \(n_{z}=8\), and execute the tuning separately for each model and dataset.

Figure 9: Plot of number of trainable parameters vs. the latent dimension \(n_{z}\) of various models trained on the _PCC-NS-2_ dataset. As we have configured them, _CON-M_ and _CFA-CON_ always have the same number of parameters (i.e., overlaying lines).

Figure 11: Prediction sequence of a CON model with latent dimension \(n_{z}=4\) trained on the single pendulum with friction (_S-P+F_) dataset [26]. **Top row:** Ground-truth evolution of the system. **Bottom row:** Predictions of the _CON_ model. The prediction model is given three images centered around \(t=0\) for encoding the initial latent \(z(0)\) and estimation of the initial latent velocity \(\dot{z}(0)\). Subsequently, we roll out the autonomous network dynamics (i.e., unforced) and compare the decoded predictions with the ground-truth evolution of the system.

Figure 10: Prediction sequence of a CON model with latent dimension \(n_{z}=4\) trained on the damped harmonic oscillator (_M-SP+F_) dataset [26]. **Top row:** Ground-truth evolution of the system. **Bottom row:** Predictions of the _CON_ model. The prediction model is given three images centered around \(t=0\) for encoding the initial latent \(z(0)\) and estimation of the initial latent velocity \(\dot{z}(0)\). Subsequently, we roll out the autonomous network dynamics (i.e., unforced) and compare the decoded predictions with the ground-truth evolution of the system.

Figure 12: Prediction sequence of a CON model with latent dimension \(n_{z}=12\) trained on the double pendulum with friction (\(D\)-\(P\)+\(F\)) dataset [26]. **Top row:** ground-truth evolution of the system. **Bottom row:** predictions of the _CON_ model.

The prediction model is given three images centered around \(t=0\) for encoding the initial latent \(z(0)\) and estimation of the initial latent velocity \(\dot{z}(0)\). Subsequently, we roll out the autonomous network dynamics (i.e., unforced) and compare the decoded predictions with the ground-truth evolution of the system.

Figure 13: Prediction sequence of a forced CON model with latent dimension \(n_{z}=12\) trained on the soft robotic _CS_ dataset containing trajectories of a simulated constant strain robot with one segment. **Top row:** Ground-truth evolution of the system. **Bottom row:** Predictions of the _CON-M_ model.

The prediction model is given three images centered around \(t=0\) for encoding the initial latent \(z(0)\) and estimation of the initial latent velocity \(\dot{z}(0)\). Subsequently, we roll out the autonomous network dynamics (i.e., unforced) and compare the decoded predictions with the ground-truth evolution of the system.

Figure 14: Prediction sequence of an unforced CON model with latent dimension \(n_{z}=8\) trained on the _PCC-NS-2_ dataset. **Top row:** Ground-truth evolution of the system. **Bottom row:** Predictions of the _CON-M_ model.

Figure 15: Prediction sequence of a forced CON model with latent dimension \(n_{z}=8\) trained on the _PCC-NS-2_ dataset. **Top row:** Ground-truth evolution of the system. **Bottom row:** Predictions of the _CON-M_ model.

The prediction model is given three images centered around \(t=0\) for encoding the initial latent \(z(0)\) and estimation of the initial latent velocity \(\hat{z}(0)\). Subsequently, we provide the same constant input \(u\) to both the simulator and the network dynamics (i.e., unforced) and compare the decoded predictions with the ground-truth evolution of the system.

Figure 16: Prediction sequence of a forced CON model with latent dimension \(n_{z}=12\) trained on the soft robotic _PCC-NS-3_ dataset containing trajectories of a simulated piecewise constant curvature robot with three segments. **Top row:** Ground-truth evolution of the system. **Bottom row:** Predictions of the _CON-M_ model. The prediction model is given three images centered around \(t=0\) for encoding the initial latent \(z(0)\) and estimation of the initial latent velocity \(\dot{z}(0)\). Subsequently, we roll out the autonomous network dynamics (i.e., unforced) and compare the decoded predictions with the ground-truth evolution of the system.

Figure 17: Prediction sequence of an unforced, 1st-order CON model with latent dimension \(n_{z}=4\) trained on the reaction-diffusion (_R-D_) dataset. **Top row:** Ground-truth evolution of the system. **Bottom row:** Predictions of the _CON-M_ model. We roll out the autonomous, 1st-order network dynamics (i.e., unforced) and compare the decoded predictions with the ground-truth evolution of the system.

Appendix on latent-space control

### Latent-space control of a damped harmonic oscillator

We consider an actuated version of the _M-SP+F_ dataset (i.e., a damped harmonic oscillator) and denote it with _M-SP+F+A_. All system, trajectory sampling and rendering parameters remain the same, except that for each trajectory in the dataset we randomly sample a forcing \(u\sim\mathcal{U}(-1\,\mathrm{N},1\,\mathrm{N})\).

We train a CON model with latent dimension \(n_{z}=1\) over three random seeds on the _M-SP+F+A_ dataset. This means that the network consists of a single oscillator. From the three different random seeds, we choose the model that achieves the best validation loss, which results in an RMSE of \(0.0327\), a PSNR of \(5.99\), and SSIM of \(0.9796\) on the test set.

Fig. 18 shows how the encoder learns an almost linear relationship between the actual configuration of the system and the predicted latent space representation. Furthermore, we notice that both the ground-truth and the learned potential energy are convex and exhibit a global minimum at \(q=0\,\mathrm{m}\).

We compare the performance of _P-satl-D_, _D+FF_, and _P-satl-D+FF_ controllers based on the CON model in Fig. 19. For the _P-satl-D_ controller, we choose the control gains \(K_{\mathrm{p}}=10\), \(K_{\mathrm{i}}=10\), \(K_{\mathrm{d}}=5\), \(\upsilon=1\). The _D+FF_ controller uses \(K_{\mathrm{d}}=3.5\). Finally, the _P-satl-D+FF_ is configured with \(K_{\mathrm{p}}=2\), \(K_{\mathrm{i}}=0.3\), \(K_{\mathrm{d}}=3.5\), \(\upsilon=1\). The results show that the _P-satl-D+FF_ controller exhibits thanks to its feedforward term no overshooting and a faster response time than the pure feedback controller _P-satl-D_. The high accuracy of the feedforward term can be seen from the performance of the _D+FF_ controller, that only exhibits relatively small steady-state error. Adding small proportional and integral feedback actions in the _P-satl-D+FF_ controller keeps the compliance high while removing the steady-state error and reducing the response time.

Finally, we visualize the behavior of the _P-satl-D+FF_ controller as a sequence of stills in Fig. 20.

### Latent-space control of a two segment PCC soft robot

#### e.2.1 Potential energy landscape

When leveraging (learned) dynamical models for setpoint regulation, it is essential to accurately estimate the potential energy as this dictates the efficacy of the feedforward terms. Therefore, we qualitatively evaluate the potential energy landscape of the CON latent dynamic model.

In Fig. 21(a), we can see how CON contains a single, isolated, and globally asymptotically stable equilibrium as proven in Appendix A.2 and Section 2, respectively.

Furthermore, we want to verify that the learned potential corresponds to the actual potential energy of the simulated system. An autonomous continuum soft robot with the tip pointing downwards in a straight configuration exhibits an isolated, globally asymptotically stable equilibrium at \(q=0\) (i.e., zero strains) [42]. For this purpose, we can compare the learned potential energy field in Fig. 21(b) with the ground-truth potential energy field in Fig. 21(c). We confirm, based on Fig. 21(b), that, indeed, the learned potential also has its minimum close to/at \(q=0\). Although the field is shaped slightly differently, the potential forces are clearly pointing inwards towards the global attractor.

Figure 18: **Panel (a): Learned mapping from configuration to latent space for the CON model with \(n_{z}\) (i.e., consisting of a single oscillator) trained on the actuated damped harmonic oscillator (_M-SP+F+A_) dataset. Panel (b): The blue line represents the ground-truth potential energy of the damped harmonic oscillator. The orange line represents the learned potential energy of the CON model evaluated vs. the system configuration by rendering and subsequently encoding into latent space each configuration value.**

#### e.2.2 Model selection

For the control experiments, we train instances of the _MECH-NODE_ and _CON-M_ models with latent dimension \(n_{z}=2\) and with neural network weights initialized with three different random seeds. For _MECH-NODE_, we choose the model with the lowest validation loss (seed \(0\)).

For the _CON_ network, we found that model-based control does not perform as well when the latent stiffness \(\Gamma_{\text{w}}\) (as visualized in Fig. 21(a)) is significantly larger along one of the Eigenvectors than along the other one. Therefore, we evaluate the Eigenvalues of the learned stiffness matrix in \(\mathcal{W}\)-coordinates after training: \(\lambda_{1,2}(\Gamma_{\text{w}})\). Particularly, we choose the seed that minimizes the normalized standard deviation of the Eigenvalues

\[\mu_{\lambda} =\frac{\lambda_{1}(\Gamma_{\text{w}})+\lambda_{2}(\Gamma_{\text{ w}})}{2},\] \[\sigma_{\lambda} =\sqrt{\frac{(\lambda_{1}(\Gamma_{\text{w}})-\mu_{\lambda})^{2}+ (\lambda_{2}(\Gamma_{\text{w}})-\mu_{\lambda})^{2}}{2}},\] (74) \[\text{seed} =\arg\min\frac{\sigma_{\lambda}}{\mu_{\lambda}}.\]

#### e.2.3 Additional control results

Additional results for the _P-sat-D_ feedback controller based on the MECH-NODE and CON models are provided in Fig. 23, Fig. 24, respectively and for the _P-sat-D+FF_ controller based on the CON model in Fig. 25. Sequences of stills for the _CON P-sat-D+FF_ controller are provided in Fig. 22.

Figure 19: Latent-space control of an actuated damped harmonic oscillator (_M-SP+F+A_) following a sequence of setpoints. We compare multiple controllers based on a trained CON network with \(n_{z}=1\). The CON model weights are initialized using a random seed of 0. The blue line represents a pure feedback controller (_P-sat-D_). The orange line visualizes the behavior of a feedforward controller with only a damping term applied in feedback (_D+FF_). The green line shows the performance of our proposed combination of feedback and feedforward terms (_P-sat-D+FF_). The dotted and solid lines show the reference and actual values, respectively. For each setpoint, we randomly sample a desired shape \(q^{\text{d}}\) and render the corresponding image \(o^{\text{d}}\). This image is then encoded to a target latent \(z^{\text{d}}\). The controller then computes a latent-space torque \(F^{\text{d}}\), which is decoded to an input \(u\). Finally, we provide this input to the simulator, which performs a roll-out of the closed-loop dynamics. Important: The robot’s configuration (i.e., the first-principle, minimal-order state) is solely used for generating a target image and simulating the closed-loop system.

Figure 20: Sequence of closed-loop control of an actuated damped harmonic oscillator (_M-SP+F+A_) with a _P-satI-D+FF_controller based on a trained CON with \(n_{z}=1\). **Columns 1-4:** show the actual behavior of the closed-loop system. **Column 5:** demonstrates the target image that the control sees for all time instances in the row.

Figure 21: Potential energy landscapes of a CON with \(n_{z}=2\) trained to learn the latent space dynamics of a continuum soft robots (simulated with two PCC segments). **Panel (a):** Here, we visualize the learned potential energy of CON using the color scale as a function of the latent representation \(z=x_{\mathrm{w}}\in\mathbb{R}^{2}\). The arrows denote the gradient of the potential field \(\frac{\partial\mathcal{U}}{\partial z}\) (i.e., the potential force), with the magnitude of the gradient expressed as the length of the arrow. **Panel (b):** Again, we display the learned potential energy of CON using the color scale, but in this case, as a function of the configuration \(q\in\mathbb{R}\) of the robot (that is hidden from the model). First, we render an image \(o\) of the shape of the robot for each configuration \(q=[q_{1}\hskip 14.226378ptq_{2}]^{\mathrm{T}}\in\mathbb{R}^{2}\). Then, we encode the image into latent space as \(z=\Phi(o)\). This allows us then to compute the potential energy \(\mathcal{U}(z)\) of the CON latent dynamics model. **Panel (c):** Here, we display the potential energy and its associated potential forces of the actual (i.e., simulated) system.

Figure 23: Latent-space control of a continuum soft robot (simulated using two PCC segments) following a sequence of setpoints with a pure **P-satI-D** feedback controller operating in a 2D latent space learned with the **MECH-NODE** model. The CON model weights are initialized using a **random seed of 0**. The dotted and solid lines show the reference and actual values, respectively. For each setpoint, we randomly sample a desired shape \(q^{\mathrm{d}}\) and render the corresponding image \(o^{\mathrm{d}}\). This image is then encoded to a target latent \(z^{\mathrm{d}}\). The controller then computes a latent-space torque \(F^{\mathrm{d}}\), which is decoded to an input \(u\). Finally, we provide this input to the simulator, which performs a roll-out of the closed-loop dynamics. Important: The robot’s configuration (i.e., the first-principle, minimal-order state) is solely used for generating a target image and simulating the closed-loop system.

Figure 22: Sequence of closed-loop control of a continuum soft robot consisting of two constant curvature segments with the _P-satI-D+FF_ based on a trained CON with \(n_{z}=2\). **Columns 1-4:** show the actual behavior of the closed-loop system. **Column 5:** demonstrates the target image that the control sees for all time instances in the row.

Figure 24: Latent-space control of a continuum soft robot (simulated using two PCC segments) following a sequence of setpoints with a pure **P-satI-D** feedback controller operating in a 2D latent space learned with the **CON** model. The CON model weights are initialized using a random seed of \(0\). The dotted and solid lines show the reference and actual values, respectively. For each setpoint, we randomly sample a desired shape \(q^{\mathrm{d}}\) and render the corresponding image \(o^{\mathrm{d}}\). This image is then encoded to a target latent \(z^{\mathrm{d}}\). The controller then computes a latent-space torque \(F^{\mathrm{d}}\), which is decoded to an input \(u\). Finally, we provide this input to the simulator, which performs a roll-out of the closed-loop dynamics. Important: The robot’s configuration (i.e., the first-principle, minimal-order state) is solely used for generating a target image and simulating the closed-loop system.

Figure 25: Latent-space control of a continuum soft robot (simulated using two PCC segments) following a sequence of setpoints with a pure **P-satI-D+FF** feedback & feedforward controller operating in a 2D latent space learned with the **CON** model. The CON model weights are initialized using a random seed of \(0\). The dotted and solid lines show the reference and actual values, respectively. For each setpoint, we randomly sample a desired shape \(q^{\mathrm{d}}\) and render the corresponding image \(o^{\mathrm{d}}\). This image is then encoded to a target latent \(z^{\mathrm{d}}\). The controller then computes a latent-space torque \(F^{\mathrm{d}}\), which is decoded to an input \(u\). Finally, we provide this input to the simulator, which performs a roll-out of the closed-loop dynamics. Important: The robot’s configuration (i.e., the first-principle, minimal-order state) is solely used for generating a target image and simulating the closed-loop system.

Extended discussion on future applications and limitations

### Systems for which we would expect the proposed method to work

Mechanical systems with continuous dynamics, dissipation, and a single, attractive equilibrium point.The proposed method is a very good fit for mechanical systems with continuous dynamics, dissipation, and a single, attractive equilibrium point. In this case, the real system and the latent dynamics share the energetic structure and stability guarantees. Examples of such systems include many soft robots, deformable objects with dominant elastic behavior, and other mechanical structures with elasticity.

Local modeling of (mechanical) systems that do not meet the global assumptions.Even if the global assumptions of the proposed method are not met, the method can still be applied to model the local behavior around a local asymptotic equilibrium point of the system (i.e., in the case of multi-stability). For example, the method could be used to model the behavior of a robotic leg locally in contact with the ground, a cobot's interaction with its environment, etc.

### Systems for which we could envision the proposed method to work under (minor) modifications

Mechanical systems without dissipation.The proposed method would currently not work well for mechanical systems without any dissipation, as (a) the original system will likely not have a globally asymptotically stable equilibrium point, and more importantly, (b) we currently force the damping learned in latent space to be positive definite. However, these systems are not common in practice as friction and other dissipation mechanisms are omnipresent, and the proposed method can learn very small damping values (e.g., the mass-spring+friction system). A possible remedy could be to relax the positive definiteness of the damping matrix in the latent space, allowing for zero damping. This would allow the method to work for systems without dissipation, such as conservative systems. Examples of such systems include a mass-spring system without damping, the n-body problem, etc.

Systems with discontinuous dynamics.The proposed method might underperform for systems with highly discontinuous dynamics, such as systems with impacts, friction, or other discontinuities. In these cases, the latent dynamics might not capture the real system's behavior accurately, and the control performance of feedforward + feedback will very likely be worse than pure feedback. Again, the method should be able to capture local behavior well. A possible remedy for learning global dynamics could be to augment the latent dynamics with additional terms that capture the discontinuities, such as contact and friction models (e.g., stick-slip friction).

Systems with multiple equilibrium points.The original system having multiple equilibria conflicts with the stability assumptions underlying the proposed CON latent dynamics. In this case, as, for example, seen on the pendulum+friction and double pendulum + friction results, the method might work locally but will not be able to capture the global behavior of the system. A possible remedy could be to relax the global stability assumptions of the CON network. For example, the latent dynamics could be learned in the original coordinates of CON while allowing \(W\) also to be negative definite. This would allow the system to have multiple equilibria & attractors. Examples of such systems include a robotic arm under gravity, pendula under gravity, etc.

Systems with periodic behavior.The proposed method will likely not work well for systems with periodic behavior, as they do not have a single, attractive equilibrium point. Examples of such systems include a mass-spring system with a periodic external force, a pendulum with a periodic external force, some chemical reactions, etc. Again, it is likely possible to apply the presented method to learning a local behavior (i.e., not completing the full orbit). A possible remedy could be to augment the latent dynamics with additional terms that capture the periodic behavior, such as substituting the harmonic oscillators with Van der Pol oscillators to establish a limit cycle or a supercritical Hopf bifurcation.

### Systems for which we would not expect the proposed method to work

Nonholonomic systems.The proposed method likely would not work well for nonholonomic systems, as both structure (e.g., physical constraints) and stability characteristics would not be shared between the real system and the latent dynamics. Examples of such systems include vehicles, a ball rolling on a surface, and many mobile robots.

Partially observable and non-markovian systems.As the CON dynamics are evaluated based on the latent position and velocity encoded by the observation of the current time step and the observation-space velocity, we implicitly assume that the system is (a) fully observable and (b) fulfills the Markov property. This assumption might not hold for partially observable systems, such as systems with hidden states or systems with delayed observations. Examples of such cases include settings where the system is partially occluded or in situations without sufficient (camera) perspectives covering the system. Furthermore, time-dependent material properties, such as viscoelasticity or hysteresis, that are present and significant in some soft robots and deformable objects are not captured by the method in its current formulation.

## NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The claims and contributions made in the abstract and introduction are all supported by theoretical and/or experimental results included in the paper. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: The known limitations of the proposed method are listed and presented in multiple places in the manuscript: the last paragraph of the introduction, in Section 6, and an extended version in Appendix F. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes] Justification: All equations, Theorems, and Lemmas are numbered and cross-referenced. In each Theorem/Lemma, we clearly state the assumptions under which the proof is valid (e.g., positive definite matrices for the ISS stability proof). All Theorems are included in the main paper: for the global asymptotic stability proof, we directly detail the proof in the main paper, and for the ISS proof, we provide a sketch with the full proof appearing in the Appendix. We also include auxiliary Lemmas in the Appendix. Guidelines: * The answer NA means that the paper does not include theoretical results.

* All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced.
* All assumptions should be clearly stated or referenced in the statement of any theorems.
* The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.
* Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.
* Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: All the code for the experiments has been open-sourced on GitHub. Furthermore, we provide a detailed description of the implementation details in Appendix C. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: The code associated with this paper is available on GitHub2. It allows the user to generate the datasets, run the hyperparameters selection, train the models, and generats result plots based on training checkpoints. Footnote 2: https://github.com/tud-phi/uncovering-iss-coupled-oscillator-networks-from-pixels

Guidelines:

* The answer NA means that paper does not include experiments requiring code.
* Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details.
* While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).

* The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details.
* The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.
* The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.
* At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).
* Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: In Appendix C, we include implementation details such as the used libraries, algorithms, optimizers, and evaluation procedures. All hyperparameters (e.g., learning rate, loss weights, weight decay, etc.) can be found in the code on GitHub (specifically, in the sweep_generic_dynamics_autoencoder.py Python script that is placed in the examples/sweeping folder). Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in the appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: We run all experiments with various initializations (i.e., different random seeds), and each result table/plot is accompanied by a description of how the variability of results is captured. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors). * It should be clear whether the error bar is the standard deviation or the standard error of the mean. * It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified. * For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates). * If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: In Section C.8, we report details about the necessary compute for performing the experiments reported in this paper. Guidelines: * The answer NA means that the paper does not include experiments.

* The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.
* The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.
* The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: The authors have reviewed the NeurIPS Code of Ethics, and this research conforms, in every respect, with this code. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: This paper primarily involves fundamental research, and the presented application of predicting and controlling the future evolutions of dynamical systems does not directly have any broader societal impact. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations. * The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. * The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology. * If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: This work by itself does not pose any risk for misuse. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.

* We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: The code accompanying this submission is original. While we do rely on common open-source 3rd-party packages (e.g., JAX, flax, diffrax, etc.), we clearly document these dependencies in the requirements.txt file of the accompanying code archive. Furthermore, we leverage the datasets that are part of the _DeepMind Hamiltonian Dynamics Suite_[26]3 and have been open-sourced with an Apache 2.0 license.

Footnote 3: https://github.com/mstoelzle/dm_hamiltonian_dynamics_suite

Guidelines:

* The answer NA means that the paper does not use existing assets.
* The authors should cite the original paper that produced the code package or dataset.
* The authors should state which version of the asset is used and, if possible, include a URL.
* The name of the license (e.g., CC-BY 4.0) should be included for each asset.
* For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.
* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [Yes] Justification: We release the necessary code to generate the datasets that we used in this paper alongside the submission. Guidelines: * The answer NA means that the paper does not release new assets. * Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc. * The paper should discuss whether and how consent was obtained from people whose asset is used. * At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: This research did not involve any crowdsourcing experiments or trials with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper. * According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects**Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained?

Answer: [NA]

Justification: This research did not involve any trials with human subjects.

Guidelines:

* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.