# Group-wise oracle-efficient algorithms for

online multi-group learning

Samuel Deng

Department of Computer Science

Columbia University

samdeng@cs.columbia.edu

&Daniel Hsu

Department of Computer Science

Columbia University

djhsu@cs.columbia.edu

&Jingwen Liu

Department of Computer Science

Columbia University

jingwenliu@cs.columbia.edu

###### Abstract

We study the problem of online multi-group learning, a learning model in which an online learner must simultaneously achieve small prediction regret on a large collection of (possibly overlapping) subsequences corresponding to a family of _groups_. Groups are subsets of the context space, and in fairness applications, they may correspond to subpopulations defined by expressive functions of demographic attributes. In contrast to previous work on this learning model, we consider scenarios in which the family of groups is too large to explicitly enumerate, and hence we seek algorithms that only access groups via an optimization oracle. In this paper, we design such oracle-efficient algorithms with sublinear regret under a variety of settings, including: (i) the i.i.d. setting, (ii) the adversarial setting with smoothed context distributions, and (iii) the adversarial transductive setting.

## 1 Introduction

We study the problem of online multi-group learning, originally introduced by [1] (adapting the specialists/time-selection setup of [1, 10, 11]). In this learning model, we consider a collection of groups \(\mathcal{G}\), which are (possibly intersecting) subsets of a context space \(\mathcal{X}\), as well as a hypothesis class \(\mathcal{H}\) of functions defined on \(\mathcal{X}\). Contexts \(x_{1},x_{2},\ldots,x_{T}\) arrive one-by-one over a sequence of \(T\) rounds, and the learner must make a prediction associated with each \(x_{t}\). The learner's goal is to perform well on _every_ subsequence of rounds corresponding to each group \(g\in\mathcal{G}\). Here, performance is measured relative to the predictions of the best-in-hindsight hypothesis \(h\in\mathcal{H}\) for the specific subsequence under consideration.

A common interpretation of multi-group learning--which is natural when considering fairness in machine learning (ML)--identifies contexts \(x\in\mathcal{X}\) with individuals, each group \(g\in\mathcal{G}\) with a subpopulation (perhaps defined by a combination of various demographic features such as age and gender), and each hypothesis \(h\in\mathcal{H}\) with a classifier that makes predictions about individuals [13]. The goal of the learner, then, is to predict as well as the best subpopulation-specific hypothesis, for all subpopulations simultaneously.

The standard benchmark in online learning is regret, which compares the performance of the learner on all rounds to that of the single best hypothesis in hindsight. But such a benchmark is only meaningful if there is a hypothesis that performs well in all contexts. At the other extreme, we may hope that the learner performs as well as using the best context-specific hypothesis in everyround. However, this may be impossible if no context is ever repeated. The group-wise notion of regret in online multi-group learning naturally interpolates between these two extremes: the former is recovered when \(\mathcal{G}=\{\mathcal{X}\}\), and the latter when \(\mathcal{G}=\{\{x\}:x\in\mathcal{X}\}\).

We are particularly interested in scenarios where \(\mathcal{G}\) may be extremely large (and perhaps even infinite). In such cases, it is too time-consuming to explicitly enumerate the groups in \(\mathcal{G}\), and this precludes the use of the algorithmic solutions from prior works [1, 1].

The use of highly expressive families of groups has been a recent focus in the ML fairness literature, where fairness with respect to such rich families of groups is seen as compromise between coarse notions of statistical fairness that ignore intersectionality, and individualized notions of fairness that are typically difficult to ensure [11, 12, 13, 14, 15]. For example, if groups are defined by simple combinations of demographic attributes (e.g., linear threshold functions), then the number of subsequences determined by these groups may grow exponentially with the number of attributes. To deal with the intractability of explicit enumeration of groups, these prior works rely on optimization oracles that implicitly search through the family of groups. In this work, we seek to do the same, but for the online (as opposed to batch) problem at hand.

Another motivation for multi-group learning with rich families of groups comes from the literature on "subgroup robustness" [20], where one is concerned with the test-time distribution shifting from the training distribution by restricting to subsets (or "subgroups") of the feature space. Such scenarios have been practically motivated, for instance, in medical domains where training data sets are constructed to include data from all patients (healthy and sick) as a matter of convenience, but the population relevant to the application is only a subset of the sick patients for which an intervention is potentially possible [1]. It may be difficult to anticipate which subgroup will ultimately be relevant (or even to provide an explicit shortlist of such subgroups), but multi-group learning with a very rich and expressive family of groups \(\mathcal{G}\) ensures that, as long as a subgroup is well-approximated or within the collection \(\mathcal{G}\), it obtains our theoretical guarantees. This motivates dealing with large or potentially infinite \(\mathcal{G}\) to provide guarantees for as many subgroups as possible.

### Summary of Results

We construct an end-to-end oracle-efficient online learning algorithm that is oracle-efficient in _all_ the problem parameters. Namely, it is oracle-efficient in both \(\mathcal{H}\) and \(\mathcal{G}\). In the case of finite \(\mathcal{H}\) or \(\mathcal{G}\), this admits an exponential computational speedup over the previous algorithms; in the case of infinite \(\mathcal{G}\), this is the first algorithm that achieves multi-group online learning. With this in mind, we can even think of \(\mathcal{G}\) as representing a binary-valued function class that takes in contexts and selects subsequences \(S\subseteq[T]\) based on those contexts in possibly complex ways.

Previous work has shown that the basic goal of designing a computationally efficient algorithm (in all problem parameters) to achieve \(o(T)\) regret for fully worst-case adversaries is impossible [16, 15]. Research has therefore focused on natural structural assumptions in which computational efficiency and sublinear regret is possible, albeit in the traditional setting without groups [21, 14, 13, 15]. Because the multi-group online adversarial setting is strictly harder than the standard setting in which this lower bound applies (simply consider multi-group learning with one group: the entire sequence), we must also take similar assumptions to circumvent the computational hardness result. In this work, we consider the same structural assumptions in the multi-group scenario. Specifically, we make the following contributions (with \(\tilde{O}(\cdot)\) suppressing \(\log\) factors):

1. **Group-wise oracle efficiency for the smoothed setting.** We present an oracle-efficient algorithm that achieves \(\tilde{O}(\sqrt{dT/\sigma})\) regret on every group \(g\in\mathcal{G}\) for a binary-valued action space for the _smoothed online learning setting_ of [14, 15], where \(d\) is a bound on the VC dimension of \(\mathcal{H}\) and \(\mathcal{G}\), and \(\sigma\) is a parameter interpolating between the scenarios in which contexts are generated by a worst-case adversary and a benign, fully i.i.d. adversary.
2. **Group-wise oracle-efficiency through generalized follow-the-perturbed leader.** If a sufficient condition referred to as \(\gamma\)_-approximability_ in previous literature ([24]) is met, a variant of our oracle-efficient algorithm achieves, for each particular \(g\in\mathcal{G}\), a regret of \(\tilde{O}(\sqrt{NT_{g}\log|\mathcal{H}||\mathcal{G}|})\) for finite \(\mathcal{H}\) and \(\mathcal{G}\), where \(N\) corresponds roughly to a required number of perturbations, and \(T_{g}\) is the number of rounds \(t\in[T]\) in which \(x_{t}\in g\). The dependence on \(T_{g}\) as opposed to \(T\) is preferable if some groups do not appear frequently over the \(T\) rounds. As a special case, our algorithm also achieves \(\tilde{O}(N^{1/4}\sqrt{T_{g}\log|\mathcal{H}||\mathcal{G}|})\) in the _transductive setting_ of [1, 1], where the adversary must reveal a set of \(N\) future contexts before learning begins.

Table 1 summarizes our results in relation to existing work. Our algorithms follow a more general algorithm design template based on the _adversary moves first (AMF)_ framework of [10]. We extend this framework with the following technical enhancements: sparsifying the implicit distributions over the hypothesis spaces used by _follow-the-perturbed-leader (FTPL)_ algorithms, and simplifying the min-max game that is solved in every iteration of AMF.

In particular, the AMF framework allows us to have low-regret with respect to all group-hypothesis pairs; the multi-objective regret guarantees are useful for our purposes because we want to guarantee simultaneous low regret over all \(g\in\mathcal{G}\). However, naively applying AMF requires us to enumerate these objectives, in turn enumerating \(\mathcal{G}\), the main issue we want to avoid. FTPL comes to the rescue and allows us to have low-regret to all pairs implicitly without enumerating them. So AMF allows us to compete with all \(g\in\mathcal{G}\); FTPL ensures this is efficient. The algorithmic details and main technical challenges can be found in Section 4.2. These techniques allow us to adapt this framework to the scenario where the number of groups is too large to enumerate, and they may find use in other multi-objective learning problems.

### Related Work

[1] showed that it is possible to achieve sublinear multi-group regret by reducing to the _specialists framework_ of [1, 13, 14] (a.k.a. _sleeping experts_). The multi-group regret they achieve scales logarithmically in both \(\mathcal{H}\) and \(\mathcal{G}\); this recovers the minimax regret when specializing to the standard online learning setting (with finite \(\mathcal{H}\)) with only a single group. The paper focuses on regret rather than computational considerations; a direct implementation of their algorithm uses time and space linear in \(|\mathcal{H}|\times|\mathcal{G}|\), and there are no stated guarantees for infinite \(\mathcal{H}\) or \(\mathcal{G}\).

\begin{table}
\begin{tabular}{l l l l l l} \hline \hline Work & Setting & Regret & Computation & Oracle- & Oracle- \\  & & & & efficient in \(\mathcal{H}\) & in \(\mathcal{G}\) \\ \hline
[1] & Adversarial & \(\sqrt{T_{g}\log|\mathcal{H}||\mathcal{G}|}\) for all & Time: \(O(|\mathcal{H}||\mathcal{G}|)\) & No & No \\  & & \(g\in\mathcal{G}\) & Space: \(O(|\mathcal{H}||\mathcal{G}|)\) & & \\ \hline
[1] & Adversarial & \(\sqrt{T_{g}\log|\mathcal{H}||\mathcal{G}|}\) for all & Time: \(O(|\mathcal{G}|)\) Space: & Yes & No \\  & & \(g\in\mathcal{G}\) & \(O(|\mathcal{G}|)\) & & \\ \hline
[1] & \(\sigma\)-Smooth & \(\sqrt{\frac{dT\log T}{\sigma}}\) (does not handle multi-group setting) & Time: poly(\(T\)) calls to optimization oracle & Yes & N/A \\ \hline
[1] & \(\sigma\)-Smooth & \(\sqrt{\frac{dT\log T}{\sigma^{1/2}}}\) (does not handle multi-group setting) & Time: poly(\(T\)) calls to optimization oracle & Yes & N/A \\ \hline
[1] & \(\sigma\)-Smooth & \(\sqrt{\frac{dT\log T}{\sigma}}\) for all \(g\in\mathcal{G}\) & Time: poly(\(T\)) calls to optimization oracle & Yes & N/A \\ Ours (Theorem 5.1) & \(\gamma\)-approximable & \(\sqrt{NT_{g}\log|\mathcal{H}||\mathcal{G}|}\) for all \(g\in\mathcal{G}\) & Time: poly(\(T\)) calls to optimization oracle & Yes & **Yes** \\ Ours (Corollary 5.1.1) & Transductive & \(N^{1/4}\sqrt{T_{g}\log|\mathcal{H}||\mathcal{G}|}\) & Time: poly(\(T\)) calls to optimization oracle & Yes & **Yes** \\ \hline \hline \end{tabular}
\end{table}
Table 1: In the table above, \(T\) is the number of rounds of online learning, \(T_{g}\) is the number of rounds for a particular group \(g\), \(\mathcal{H}\) is the hypothesis class, \(\mathcal{G}\) is the collection of groups, and \(\sigma\) is the smoothness parameter defined in Definition 4.1. \(d\) is an upper bound on the VC dimension of \(\mathcal{H}\). In our \(\sigma\)-smooth result in the fifth row, \(d\) is also an upper bound on the VC dimension of a possibly infinite collection of groups, \(\mathcal{G}\). In the \(\gamma\)-approximable setting of the sixth row, \(N\) is the number of perturbations.

[Ach+23] show how to avoid enumeration of \(\mathcal{H}\) using an optimization oracle for \(\mathcal{H}\). They achieve this by applying a meta-algorithm atop a black-box oracle-efficient online learning algorithm, but this meta-algorithm ultimately requires explicit enumeration of \(\mathcal{G}\). Our work, in contrast, uses an optimization oracle for \(\mathcal{G}\times\mathcal{H}\) jointly and hence avoids explicit enumeration of either \(\mathcal{G}\) or \(\mathcal{H}\).

Multi-group (agnostic) learning has also been studied in the batch setting [11, 12, 13, 14]. In this setting, training data is drawn i.i.d. from a fixed distribution, and the learner's goal is to find a single hypothesis \(\hat{h}\) (possibly outside of \(\mathcal{H}\)) that ensures small excess risk \(\mathbb{E}[\ell(\hat{h}(x),y)\mid x\in g]-\inf_{h\in\mathcal{H}}\mathbb{E}[ \ell(\hat{h}(x),y)\mid x\in g]\) for every group \(g\in\mathcal{G}\) simultaneously. The works of [11, 12] design algorithms for achieving this learning criterion under a certain "multi-PAC compatibility" assumption on \(\mathcal{H}\) and \(\mathcal{G}\). [13, 14] design multi-group learning algorithms that remove the need for this assumption. One of the algorithms of [12], which enjoys near optimal sample complexity for general but finite \(\mathcal{H}\) and \(\mathcal{G}\), is based on the the online multi-group learning approach of [1] combined with online-to-batch conversion.

The proof of our algorithm builds on two primary technical frameworks studied in previous literature: the _adversary moves first (AMF)_ framework of [10], and a line of work designing follow-the-perturbed leader style algorithms [15] for adversarial online learning in the oracle-efficient learning model [16, 17, 18, 19, 20].

## 2 Preliminaries

### Notation

Throughout, \(\mathcal{X}\) denotes a _context space_, and \(\mathcal{Y}\) denotes an _action space_. For example, in a typical (online) supervised learning setup, \(\mathcal{X}\) is the feature space, and \(\mathcal{Y}\) is the label space. A _group_\(g\) is a subset of the context space \(\mathcal{X}\). We overload the notation \(g\) for a group by using it as an indicator function \(g(x):=\mathbf{1}\left\{x\in g\right\}\) for group membership. Let \(2^{\mathcal{X}}\) denote all subsets of the context space \(\mathcal{X}\), and let \(\mathcal{Y}^{\mathcal{X}}\) denote all possible mappings from \(\mathcal{X}\) to \(\mathcal{Y}\). For an integer \(n\), denote \([n]:=\{1,2,\ldots,n\}\).

For simplicity of exposition, we will focus on the setting where \(\mathcal{Y}\) is binary throughout, i.e. \(\mathcal{Y}=\{-1,1\}\). We note that our techniques are more general, however, and may be adapted to the case of finite, multi-class action spaces (see Appendix C for details).

### Online Multi-Group Learning

We formally define the multi-group learning model as follows. Let \(\mathcal{G}\subset 2^{\mathcal{X}}\) be a collection of (possibly non-disjoint) groups, and let \(\mathcal{H}\subset\mathcal{Y}^{\mathcal{X}}\) be a _hypothesis class_ of functions \(h:\mathcal{X}\rightarrow\mathcal{Y}\) mapping from contexts to actions. Let \(\ell:\mathcal{Y}\times\mathcal{Y}\rightarrow[0,1]\) be a bounded loss function. In each round \(t\in[T]\):

1. Nature chooses \((x_{t},y_{t})\in\mathcal{X}\times\mathcal{Y}\) and reveals \(x_{t}\).
2. The learner chooses an action \(\hat{y}_{t}\in\mathcal{Y}\).
3. Nature reveals \(y_{t}\in\mathcal{Y}\).
4. The learner incurs loss \(\ell(\hat{y}_{t},y_{t})\in[0,1]\).

The choices of Nature and the learner may be randomized. In the standard online prediction setting, the regret of the learner is the difference between the cumulative loss of the learner and that of the best-in-hindsight hypothesis from \(\mathcal{H}\): \(\operatorname{Reg}_{T}(\mathcal{H}):=\sum_{t=1}^{T}\ell(\hat{y}_{t},y_{t})- \min_{h\in\mathcal{H}}\sum_{t=1}^{T}\ell(h(x_{t}),y_{t})\). The goal of the learner is to achieve sublinear (in \(T\)) expected regret.

In multi-group online learning, we consider the regret of the learner on subsequences of rounds \((t\in[T]:x_{t}\in g)\) defined by the groups \(g\in\mathcal{G}\) and the sequence of contexts \(x_{1},\ldots,x_{T}\). Specifically, the _(multi-group) regret of the learner on group \(g\)_ is

\[\operatorname{Reg}_{T}(\mathcal{H},g):=\sum_{t=1}^{T}g(x_{t})\ell(\hat{y}_{t},y _{t})-\min_{h\in\mathcal{H}}\sum_{t=1}^{T}g(x_{t})\ell(h(x_{t}),y_{t}).\] (1)

Crucially, the best hypothesis for one group may differ from that of another group. Further, groups may intersect, precluding the strategy of simply running a separate no-regret algorithm for each group. The learner seeks to achieve achieve sublinear expected regret, on all groups \(g\in\mathcal{G}\) simultaneously.

### Group Oracle-Efficiency

The main challenge posed in this work is to design computationally efficient algorithms that work with both large hypothesis classes \(\mathcal{H}\) and large collections of groups \(\mathcal{G}\). The prior work of [1] shows how to use the following optimization oracle to avoid explicitly enumerating the hypothesis class \(\mathcal{H}\) (but still require enumerating \(\mathcal{G}\)).

**Definition 2.1** (Optimization Oracle).: _For some error parameter \(\alpha\geq 0\) and function class \(\mathcal{F}\in\overline{\mathcal{Z}}^{\mathcal{X}}\), an \(\alpha\)-approximate optimization oracle \(\mathrm{OPT}\) takes a collection of pairs \((x_{1},z_{1}),\ldots,(x_{m},z_{m})\in\mathcal{X}\times\mathcal{Z}\), a sequence of weights \(w_{1},\ldots,w_{m}\in\mathbb{R}\), and a sequence of \(m\) loss functions \(\ell_{i}:\overline{\mathcal{Z}}\times\mathcal{Z}\rightarrow[-1,1]\) and outputs a function \(\hat{f}:=\mathrm{OPT}(\{(x_{i},z_{i},w_{i})\}_{i=1}^{m})\in\mathcal{F}\) satisfying:_

\[\sum_{i=1}^{m}w_{i}\ell_{i}(\hat{f}(x_{i}),z_{i})\leq\inf_{f\in\mathcal{F}}\sum _{i=1}^{m}w_{i}\ell_{i}(f(x_{i}),z_{i})+\alpha.\]

Instantiating (in Definition 2.1) \(\mathcal{Z}\) as our action space \(\mathcal{Y}\), each \(\ell_{i}\) as the given loss \(\ell\) of our problem, and \(\mathcal{F}\) as our hypothesis class \(\mathcal{H}\) gives a standard empirical risk minimization (ERM) oracle over a dataset \(\{(x_{i},y_{i})\}_{i=1}^{m}\). We present this more general definition to distinguish the action space \(\mathcal{Y}\) of the problem from the output space of the oracle (see Definition 2.2).

The optimization oracle is regarded as a natural computational primitive because, for many problems in machine learning, various heuristic methods (e.g., stochastic gradient descent) appear to routinely solve such problem instances despite the worst-case intractability of such problems.

The work of [1] still relies on explicit enumeration of \(\mathcal{G}\). We show how this can be avoided using a joint optimization oracle for \(\mathcal{G}\times\mathcal{H}\), defined as follows.

**Definition 2.2** (\((\mathcal{G},\mathcal{H})\)-optimization oracle).: _Fix an error parameter \(\alpha\geq 0\). For a collection of groups \(\mathcal{G}\in 2^{\mathcal{X}}\), a collection of hypotheses \(\mathcal{H}\subseteq\mathcal{Y}^{\mathcal{X}}\), and a sequence of \(m\) loss functions \(\ell_{i}:(\{0,1\}\times\mathcal{Y})\times(\mathcal{Y}\times\mathcal{Y}) \rightarrow[-1,1]\), an \(\alpha\)-approximate \((\mathcal{G},\mathcal{H})\)-optimization oracle \(\mathrm{OPT}_{(\mathcal{G},\mathcal{H})}^{\alpha}\) is an \(\alpha\)-approximation optimization oracle (Definition 2.1) that outputs a pair \((\tilde{g},\tilde{h})\in\mathcal{G}\times\mathcal{H}\) satisfying:_

\[\sum_{i=1}^{m}w_{i}\ell_{i}((\tilde{g}(x_{i}),\tilde{h}(x_{i})),(y_{i},y_{i}^ {\prime}))\geq\sup_{(g^{*},h^{*})\in\mathcal{G}\times\mathcal{H}}\sum_{i=1}^{ m}w_{i}\ell_{i}((g^{*}(x_{i}),h^{*}(x_{i})),(y_{i},y_{i}^{\prime}))-\alpha.\] (2)

If \(\mathcal{Y}=\{-1,1\}\) (which we assume in the main paper body), this oracle outputs a group-hypothesis pair \((\tilde{g},\tilde{h})\) that maximizes the batch loss over \(m\) examples \((x_{i},(y_{i},y_{i}^{\prime}))\) in \(\mathcal{X}\times\{-1,1\}^{2}\). [10] also made such an assumption and gave two implementations: one based on cost-sensitive classification oracles for \(\mathcal{G}\) and \(\mathcal{H}\) separately, the other a heuristic algorithm that is empirically effective. Details of these oracle instantiations are included in Appendix B.3.

We also require an optimization oracle for \(\mathcal{H}\) itself, defined similarly. This can be thought of simply as (exact) empirical risk minimization over \(\mathcal{H}\).1

Footnote 1: In fact, it will suffice to have a substantially simpler oracle that, given a single \((x,y)\in\mathcal{X}\times\mathcal{Y}\), determines if there exists \(h\in\mathcal{H}\) such that \(h(x)=y\).

**Definition 2.3** (\(\mathcal{H}\)-optimization oracle).: _For a collection of hypotheses \(\mathcal{H}\subseteq\mathcal{Y}^{\mathcal{X}}\), and a sequence of \(m\) loss functions \(\ell_{i}:\mathcal{Y}\times\mathcal{Y}\rightarrow[-1,1]\), an \(\mathcal{H}\)-optimization oracle \(\mathrm{OPT}_{\mathcal{H}}\) is a \(0\)-approximation optimization oracle (Definition 2.1, with \(\alpha=0\)) that outputs a hypothesis \(h\in\mathcal{H}\) satisfying \(\sum_{i=1}^{m}w_{i}\ell_{i}(h(x_{i}),y_{i})\leq\inf_{h^{*}\in\mathcal{H}}\sum _{i=1}^{m}w_{i}\ell_{i}(h^{*}(x_{i}),y_{i})\)._

## 3 Warm-up: I.I.D. Setting

In this section, as a warm-up, we consider a setting where Nature is stochastic and oblivious: the \((x_{t},y_{t})\) are drawn i.i.d. from a single fixed (but unknown) distribution \(\mu\), independent of any choices of the learner. In a standard online prediction setting with i.i.d. data, it suffices to use a "follow-the-leader" (FTL) strategy (see, e.g., [14]), which can be easily implemented using an optimization oracle for \(\mathcal{H}\). However, such a strategy only guarantees low regret on \(g=\mathcal{X}\). To achieve low regret on all (possibly intersecting) groups \(g\in\mathcal{G}\) simultaneously, we need a multi-group analogue of FTL.

What makes FTL work in the standard online prediction setting is the instantaneous expected regret bound of empirical risk minimization (ERM) on i.i.d. data. Therefore, it is natural to replace ERM with a batch multi-group algorithm [16, 1]; this will ensure the requisite instantaneous guarantee on all groups \(g\in\mathcal{G}\). We show how to use the oracle-efficient algorithm ListUpdate of [1] for the online multi-group problem.

Throughout this section, we assume \(\ell\) is the zero-one loss (for simplicity), and that \(\mathcal{H}\) and \(\mathcal{G}\) both have VC dimension at most \(d\geq 1\). For any \(g\in\mathcal{G}\), let \(P(g):=\mathbb{E}_{(x,y)\sim\mu}[g(x)]\) be the probability mass of group \(g\).

**Theorem 3.1** (Theorem 16 of [1]).: _For any \(\delta\in(0,1)\), given \(n\) i.i.d. training samples \(\{(x_{i},y_{i})\}_{i=1}^{n}\) from \(\mu\), the ListUpdate algorithm2 returns a function \(f:\mathcal{X}\to\mathcal{Y}\) such that, with probability \(1-\delta\), for any group \(g\in\mathcal{G}\),_

Footnote 2: Technically, we use the TrainByOpt variant of ListUpdate from Theorem 16 of [1].

\[\mathbb{E}[\ell(f(x),y)\mid x\in g]\leq\min_{h\in\mathcal{H}}\mathbb{E}[\ell( h(x),y)\mid x\in g]+\frac{1}{P(g)}\cdot O\left(\left(\frac{d\log n+\log(1/ \delta)}{n}\right)^{1/3}\right).\]

_Moreover, ListUpdate makes \(\mathrm{poly}(n,d,\log(1/\delta))\) calls to a \((\mathcal{G},\mathcal{H})\) optimization oracle._

Our algorithm, Online ListUpdate, forms its prediction \(\hat{y}_{t}\) in round \(t\) as follows:

* Run ListUpdate on the samples from previous rounds \((x_{1},y_{1}),\ldots,(x_{t-1},y_{t-1})\).
* Let \(f_{t}\) denote the function returned by ListUpdate, and predict \(\hat{y}_{t}:=f_{t}(x_{t})\).

Using Theorem 3.1, we obtain the following multi-group regret bound for Online ListUpdate.

**Theorem 3.2**.: _If \((x_{t},y_{t})\) are drawn i.i.d. from a fixed distribution \(\mu\) over \(\mathcal{X}\times\mathcal{Y}\), Online ListUpdate achieves the following expected multi-group regret bound: for all \(g\in\mathcal{G}\),_

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]=O\left(\left(d\log T\right)^{1/3} T^{2/3}+\sqrt{dT\log T}\right).\]

The proof of Theorem 3.2 is given in Appendix A.

## 4 Group Oracle-Efficiency with Smooth Contexts

In this section, we first describe a natural problem setting in which oracle-efficient online multi-group learning is possible: the smoothed online learning setting (Section 4.1), for which the i.i.d. setting of Section 3 is a special case. We then present our main algorithm, Algorithm 1, for achieving oracle-efficient online multi-group learning (Section 4.2). Easy modifications of this main algorithm will admit oracle-efficient online multi-group learning for other common online learning specifications, as described in Section 5.

### Smoothed Online Learning

We now describe _smoothed online learning_, a prevalent model in recent literature in computationally efficient online learning that formalizes the natural relaxation that Nature is not maximally adversarial [1, 13, 14, 15]. The main assumption is that, instead of choosing _arbitrary_ (possibly worst-case) examples \((x_{t},y_{t})\in\mathcal{X}\times\mathcal{Y}\) at every round, Nature adversarially fixes a distribution \(\mu_{t}\) over \(\mathcal{X}\) and draws \(x_{t}\sim\mu_{t}\), while still drawing \(y_{t}\) adversarially. Formally, we restrict such distributions to be _\(\sigma\)-smooth_, following the definitions of [1, 1].

**Definition 4.1** (\(\sigma\)-smooth distribution).: _Let \(\mu\) be some probability measure on \(\mathcal{X}\), and let \(\mathcal{B}\) be a base measure on \(\mathcal{X}\). The distribution \(\mu\) is \(\sigma\)-smooth (with respect to \(\mathcal{B}\)) if \(\mu\) is absolutely continuous3 with respect to \(\mathcal{B}\) and_

Footnote 3: A probability measure \(\mu\) is _absolutely continuous_ to another measure \(\mathcal{B}\) if, for every \(\mathcal{B}\)-measurable set \(A\), \(\mathcal{B}(A)=0\) implies \(\mu(A)=0\).

\[\mathrm{ess}\sup\frac{d\mu}{d\mathcal{B}}\leq\frac{1}{\sigma}.\]

_We denote the set of all \(\sigma\)-smooth distributions on \(\mathcal{X}\) with respect to the measure \(\mathcal{B}\) as \(\mathcal{S}_{\sigma}(\mathcal{X},\mathcal{B})\). If \(\mathcal{B}\) is clear from context, we simply write \(\mathcal{S}_{\sigma}(\mathcal{X})\). We assume that we have sample access to \(\mathcal{B}\) throughout. For simplicity, one may assume \(\mathcal{B}\) is uniform on \(\mathcal{X}\)._Definition 4.1 interpolates between the benign setting where \(x_{t}\) are drawn i.i.d. from \(\mu\) when \(\sigma=1\), and the fully adversarial setting when \(\sigma\) approaches \(0\). In this sense, the warm-up result of Section 3 is a special case of this setting when \(\sigma=1\) and \(\mu\) is fixed for all rounds. Note that this definition does not restrict the choice of \(y_{t}\) at all; \(y_{t}\) may still be chosen adversarially.

With this definition in hand, consider the following specification of the learning game outlined in Section 2.2, henceforth refered to as the _\(\sigma\)-smooth online learning setting._ For each round \(t\in[T]\):

1. Nature fixes a distribution \(\mu_{t}\in\mathcal{S}_{\sigma}(\mathcal{X})\) that may depend in any way on the entire history prior to round \(t\). Nature samples \(x_{t}\sim\mu_{t}\) and chooses \(y_{t}\in\mathcal{Y}\) adversarially; \(x_{t}\) is revealed to the learner.
2. The learner (randomly) chooses an action \(\hat{y}_{t}\in\mathcal{Y}\).
3. Nature reveals \(y_{t}\in\mathcal{Y}\), and the learner incurs the loss \(\ell(\hat{y}_{t},y_{t})\in[0,1]\).

We now depart from the previous literature that considers oracle-efficient algorithms in this setting ([11, 12]), as we focus on the more difficult objective of minimizing multi-group regret over a collection \(\mathcal{G}\), as in Equation (1). This setting will allow us to employ our \((\mathcal{G},\mathcal{H})\)-optimization oracle in Definition 2.2; a full description of our algorithm is now in order in Section 4.2.

### Algorithm for Smooth Contexts

In this section, we present Algorithm 1, our main algorithm for multi-group online learning for the \(\sigma\)-smooth setting. At a high level, our algorithm takes inspiration from the very general _adversary-moves-first (AMF) framework_ for multiobjective online learning of [13]. Our algorithm can be thought of as a sequential game between two competing players: an adversarial \((\mathcal{G},\mathcal{H})\)-player and the learner, referred to, in the context of Algorithm 1 as the \(\mathcal{H}\)-player. On each round \(t\), the \((\mathcal{G},\mathcal{H})\)-player employs a \((\mathcal{G},\mathcal{H})\)-optimization oracle, \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\), to play a distribution over group-hypothesis pairs that maximizes the misfortune of the \(\mathcal{H}\)-player, based on the history up until \(t\). Upon receiving this distribution (and the context \(x_{t}\) from Nature), the \(\mathcal{H}\)-player chooses \(\hat{y}_{t}\) randomly according to a distribution obtained by solving a simple constant-size linear program, and then incurs the loss \(\ell(\hat{y}_{t},y_{t})\). The \((\mathcal{G},\mathcal{H})\)-player, taking this new loss into account, can now adjust his strategy to foil the \(\mathcal{H}\)-player in the next round by putting mass on the groups on which the \(\mathcal{H}\)-player performs poorly. Crucially, neither \(\mathcal{G}\) nor \(\mathcal{H}\) is ever accessed directly, although our proofs need to maintain a distribution over \(\mathcal{G}\times\mathcal{H}\). In order to do this, we make the crucial observation that FTPL maintains an _implicit_ distribution over \(\mathcal{G}\times\mathcal{H}\) and we sparsely approximate that distribution through repeatedly querying the \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) oracle. (For clarity, we use the tilde decoration, \(\tilde{h}\) and \(\tilde{g}\), on hypotheses and groups obtained by the \((\mathcal{G},\mathcal{H})\)-player using \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\).)

**Main algorithm.** For any \(x\in\mathcal{X}\), define \(\tilde{\ell}_{x}:(\{0,1\}\times\mathcal{Y})\times(\mathcal{Y}\times\mathcal{ Y})\to[-1,1]\) as:

\[\tilde{\ell}_{x}((\tilde{g},\tilde{h}),(y^{\prime},y)):=\tilde{g}(x)\left( \ell(y^{\prime},y)-\ell(\tilde{h}(x),y)\right),\] (3)

where \(\ell(\cdot,\cdot)\) is the loss given by the learning problem. The quantity \(\tilde{\ell}_{x}\) is the loss that the \((\mathcal{G},\mathcal{H})\)-player is maximizing; it corresponds to the single-round regret of the learner on group \(g\) to the hypothesis \(h\) if the context on that round is \(x\).

The \((\mathcal{G},\mathcal{H})\)-player will employ the FTPL style strategy of [12], adapted to our setting. For each round \(t\), this requires generating \(n\)_perturbation examples_ as extra input to \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\). To generate these hallucinated perturbation examples, we independently draw \(z_{t,j}\sim\mathcal{B}\) and \(\gamma_{t,j}\sim N(0,1)\), samples \(j\in[n]\) from the base measure and the standard Gaussian, respectively. In this section, \(\mathcal{Y}=\{-1,1\}\) and \(\mathcal{H}\subseteq\{-1,1\}^{\mathcal{X}}\), so we use the perturbations in their FTPL variant for binary-valued action spaces (outlined in Appendix B.6),

\[\pi^{\mathrm{bin}}_{t,n}(g,h,\eta):=\sum_{j=1}^{n}\frac{\eta\gamma_{t,j}g(z_{t,j})h(z_{t,j})}{\sqrt{n}}.\] (4)

**Remark**.: _We focus on the setting where \(\mathcal{Y}=\{-1,1\}\) for ease of exposition, but settings in which \(\mathcal{Y}\) is a general finite set can be handled with easy modifications. See Appendix C for details._

**Remark**.: _Multi-group online learning settings other than the \(\sigma\)-smooth setting can be handled appropriately simply by replacing the strategy of the \((\mathcal{G},\mathcal{H})\)-player by an appropriate no-regretalgorithm with access to \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\). Examples of such variants are given in Section 5, and the general framework for such modifications is given in Appendix B._

**Remark**.: _With appropriate modifications, one can instantiate the \((\mathcal{G},\mathcal{H})\)-player with the FTPL style strategy of [1] instead, inheriting the \(\sigma^{-1/4}\) dependence summarized in Table 1. Our focus in this paper is not on the dependence on \(\sigma\), however, so our main exposition centers around the similar algorithmic techniques of [1]._

It is clear that \(\mathcal{G}\) and \(\mathcal{H}\) are never accessed except through \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) and \(\mathrm{OPT}_{\mathcal{H}}\). We make \(M\) oracle calls to \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) and two oracle calls to \(\mathrm{OPT}_{\mathcal{H}}\) at each round.

**Theorem 4.1**.: _Let \(\mathcal{Y}=\{-1,1\}\) be a binary action space, \(\mathcal{H}\subseteq\{-1,1\}^{\mathcal{X}}\) be a binary-valued hypothesis class, \(\mathcal{G}\subseteq 2^{\mathcal{X}}\) be a (possibly infinite) collection of groups, and \(\ell:\{-1,1\}\times\{-1,1\}\to[0,1]\) be a bounded loss function. Let the VC dimensions of \(\mathcal{H}\) and \(\mathcal{G}\) both be bounded by \(d\). Let \(\alpha\geq 0\) be the approximation error of the oracle \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\). If we are in the \(\sigma\)-smooth online learning setting, then, for \(M=\mathrm{poly}(T),n=\mathrm{poly}(T/\sigma)\), and \(\eta=\mathrm{poly}(T/\sigma)\), Algorithm 1 achieves, for each \(g\in\mathcal{G}\):_

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq O\left(\sqrt{\frac{dT\log T}{ \sigma}}+\alpha T\right),\]_where the expectation is over all the randomness of the \((\mathcal{G},\mathcal{H})\)-player's perturbations and the \(\mathcal{H}\)-player's Bernoulli choices. (See Corollary B.7.1 for precise settings of \(M\), \(n\), and \(\eta\).)_

Technical details.We solve three main difficulties toward ensuring that our algorithm achieves diminishing multi-group regret while maintaining computational efficiency for large or infinite \(\mathcal{G}\), which we outline here. The full proof of Theorem 4.1 is in Appendix B.

First, although the general framework of casting online learning problems with multiple objectives as two-player games is not new ([10, 11, 12]), previous works have employed a multiplicative weights algorithm to hedge against the multiple objectives, requiring explicit enumeration. Departing from previous literature, however, our \((\mathcal{G},\mathcal{H})\)-player uses a _follow-the-perturbed leader (FTPL)_ style algorithm (see, e.g., [13]) with \(\mathrm{OPT}_{(\mathcal{G},\mathcal{H})}\). The particular follow-the-perturbed leader variant of [12] constructs "perturbations" via a set of fake examples drawn from the the base measure \(\mathcal{B}\) on \(\mathcal{X}\), and, is thus suitable for our oracle and problem setting.

Second, a key property needed by the proof of Algorithm 1 is that the \(\mathcal{H}\)-player must receive a _distribution_ over \(\mathcal{G}\times\mathcal{H}\) to reduce the complex multi-objective criterion of performing well against all \((g,h)\in\mathcal{G}\times\mathcal{H}\) to a scalar quantity. Previous work directly supplied this distribution through the multiplicative weights algorithm. However, this would involve explicitly enumerating \(\mathcal{G}\) and \(\mathcal{H}\). On the other hand, using an FTPL algorithm as is would only output a _single_ action from \(\mathcal{G}\times\mathcal{H}\), which is insufficient. To remedy this, we make the crucial observation that FTPL algorithms _implicitly_ maintain a distribution over \(\mathcal{G}\times\mathcal{H}\) through the randomness of their perturbations, and, thus, we construct the empirical approximation of this distribution through repeatedly calling \(\mathrm{OPT}_{(\mathcal{G},\mathcal{H})}\). Standard uniform convergence arguments are used to bound the number of oracle calls needed. An argument employing the minimax theorem shows that the final regret guarantee of the entire algorithm essentially inherits the regret of the FTPL algorithm, plus sublinear error terms.

Finally, the \(\mathcal{H}\)-player chooses a distribution over \(\mathcal{Y}\) by by solving an exceedingly simple linear program (LP) with two optimization variables, \(p\) and \(\lambda\). The value \(p\in[0,1]\) corresponds to the parameter of a Bernoulli distribution from which we sample to choose \(\hat{y}_{t}\). This choice of action corresponds exactly to choosing the minimax optimal strategy against the worst-case \(y\) that Nature could select. We employ similar techniques as [10], analyzing the value of this min-max game as if Nature (the \(\max\) in the min-max) had gone first instead. The two calls to \(\mathrm{OPT}_{\mathcal{H}}\) are used just to find the actions achievable by \(\mathcal{H}\) on \(x_{t}\). (Note that it is possible that \(h^{\prime}_{y^{\prime}}(x_{t})\neq y^{\prime}\) for some \(y^{\prime}\in\mathcal{Y}\), in which case the Learner will always play \(-y^{\prime}\), regardless of the value of \(p\).)

## 5 Group Oracle-Efficiency in Other Settings

In the previous section, we presented an algorithm that achieves \(o(T)\) expected regret for all \(g\in\mathcal{G}\), satisfying our main desideratum from Section 2.2. However, in some cases, we may want something more. Suppose that some groups are rarer than others; in this case, a natural extension would be to ensure a stronger "adaptive" regret bound that instead scales with \(T_{g}:=\sum_{t=1}^{T}g(x_{t})\), the number of times group \(g\) appeared in the \(T\) rounds. We note that the algorithm of [12] achieves such a multi-group regret guarantee (for finite \(\mathcal{H}\) and \(\mathcal{G}\)), but their algorithm is not oracle-efficient. So a question that remains is whether such guarantees can be achieved in an oracle-efficient manner.

In this section, we are back in the general fully adversarial multi-group online learning setting of Section 2.2 (without i.i.d. or smoothness assumptions). We discuss how to modify Algorithm 1 via the _Generalized Follow-the Perturbed-Leader (GFTPL) framework_ of [14, 15] to obtain regret guarantees on group \(g\) where the dependence on \(T\) is replaced (at least in part) with \(T_{g}\). Due to space limitations, we give a sketch here; the full details are in Appendix C.

We first make a simple observation that motivates our use of more advanced oracle-efficient online learning techniques. Recall the \(\tilde{g}\)-specific per-round regret to \(\tilde{h}\) of playing \(h(x_{t})\) at round \(t\in[T]\):

\[\tilde{\ell}_{x_{t}}((\tilde{g},\tilde{h}),(h(x_{t}),y))=\tilde{g}(x_{t}) \left(\ell(h(x_{t}),y)-\ell(\tilde{h}(x_{t}),y)\right).\]

The job of the \((\mathcal{G},\mathcal{H})\)-player is to run a no-regret algorithm to maximize this quantity in aggregate, as described in Section 4.2 and detailed in Appendix B.5. The online learning literature for _small-loss regret_ focuses on developing algorithms that have regret depending on cumulative loss in hindsight instead of the number of rounds \(T\)[14, 15, 16]; this has the advantage of giving a tighterregret bound when losses are small in magnitude. It is immediate that \(\ell_{x_{t}}((\tilde{(g},\tilde{h}),(h(x_{t}),y))=0\) whenever \(\tilde{g}(x_{t})=0\), so a small-loss regret would immediately give a \(o(T_{g})\) guarantee.

We focus on the case where \(\mathcal{G}\) and \(\mathcal{H}\) are finite, and \(\mathcal{G}\times\mathcal{H}\) is the set of experts the \((\mathcal{G},\mathcal{H})\)-player has access to. Most small-loss regret algorithms would require prohibitive enumeration of \(\mathcal{G}\times\mathcal{H}\)[10, 11, 12], but the _GFTPL with small-loss bound algorithm_ of [20] has the property that it is oracle-efficient _and_ enjoys small-loss regret. This algorithm follows the GFTPL design template of [13], which, similar to the classic FTPL algorithm of [13], generates a noise vector to perturb each each decision of expert. However, whereas the classic FTPL algorithm generates \(|\mathcal{G}|\times|\mathcal{H}|\) independent random noise variables, GFTPL only generates \(N\ll|\mathcal{G}|\times|\mathcal{H}|\) independent random variables and uses a _perturbation matrix (PM)_\(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times N}\) to translate the noise vector back to \(|\mathcal{G}|\times|\mathcal{H}|\)_dependent_ perturbations.

The main challenge in instantiating a GFTPL algorithm is to construct a suitable \(\Gamma\) for the problem at hand. [20] provide two sufficient conditions for \(\Gamma\) that, respectively, imbue the GFTPL algorithm with oracle-efficiency and small-loss regret: _implementability_ and _approximability_. In our setting, implementability requires that every column of \(\Gamma\) correspond to a dataset of "fake examples" suitable to \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\). Approximability with parameter \(\gamma>0\) guarantees the stability property that the ratio \(\mathbb{P}[(\tilde{g}_{t},\tilde{h}_{t})=(g,h)]/\mathbb{P}[(\tilde{g}_{t+1}, \tilde{h}_{t+1})=(g,h)]\leq\exp(\gamma\eta_{t})\) for all \((g,h)\in\mathcal{G}\times\mathcal{H}\), where \(\eta_{t}>0\) is the per-round learning rate of GFTPL. If such a \(\Gamma\) exists, then instantiating the \((\mathcal{G},\mathcal{H})\)-player in Algorithm 1 with GFTPL (instead of the algorithm of [11]) gives us the stronger \(o(T_{g})\) regret guarantee. Full definitions and the proof, with the precise setting of \(M\), can be found in Appendix C and Proposition C.3.1.

**Theorem 5.1**.: _Assume \(\mathcal{H},\mathcal{G}\) are finite and there exists a \(\gamma\)-approximable and implementable perturbation matrix \(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times N}\). Let \(\alpha\geq 0\) be the approximation parameter of \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\). Let the no-regret algorithm for the \((\mathcal{G},\mathcal{H})\)-player in Algorithm 1 be the GFTPL algorithm of [20] instantiated with \(\Gamma\), with parameter \(M=\mathrm{poly}(T)\). Then, for each \(g\in\mathcal{G}\):_

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq O\left(\sqrt{T_{g}}\max\left\{ \gamma,\log|\mathcal{H}||\mathcal{G}|,\sqrt{N\log|\mathcal{H}||\mathcal{G}|} \right\}+\alpha T\right)\]

We give a particular setting in which one can easily construct an approximable and implementable \(\Gamma\).

**Transductive Setting.** In the _transductive setting_ of [11, 12], Nature reveals a set \(X\subset\mathcal{X}\) to the Learner at the beginning of the learning process; then at each round \(t\in[T]\), Nature can only choose \(x_{t}\) from \(X\). Let \(N:=|X|\) denote the number of different contexts that Nature chooses from. For this setting, we can explicitly construct \(\Gamma\) to get the following result.

**Corollary 5.1.1** (Transductive setting).: _In the transductive setting, there exists a perturbation matrix \(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times 4N}\) such that Algorithm 1 with GFTPL parameterized with \(M=\mathrm{poly}(T)\) and \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) with error parameter \(\alpha\geq 0\) satisfies:_

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq O\left(\sqrt{T_{g}}\sqrt{\max \left\{\log|\mathcal{H}||\mathcal{G}|,\sqrt{N\log|\mathcal{H}||\mathcal{G}|} \right\}}+\alpha T\right)\quad\text{ for all }g\in\mathcal{G}.\]

Suppose that \(N\leq T\) (which is the case in the transductive learning setting from [12]). Then the regret bound (ignoring the dependence on \(\log(|\mathcal{H}||\mathcal{G}|)\)) on group \(g\) is \(O(\sqrt{T_{g}}T^{1/4})\), which is asymptotically smaller than \(\sqrt{T}\) whenever \(T_{g}=o(\sqrt{T})\). If \(N\) is fixed independent of \(T\), then the regret bound is \(O(\sqrt{T_{g}})\).

## 6 Conclusion and Future Work

In this paper, we design algorithms for online multi-group learning that are oracle-efficient and achieve diminishing \(o(T)\) expected regret for all groups \(g\in\mathcal{G}\) simultaneously, even when \(\mathcal{G}\) is too large to explicitly enumerate. The most interesting future directions that we leave open in this work include designing oracle-efficient algorithms that achieve \(o(T_{g})\) group-specific regret for _infinite_\(\mathcal{H}\) and \(\mathcal{G}\) and in more general settings.

[MISSING_PAGE_FAIL:11]

* [HJZ24] Nika Haghtalab, Michael Jordan, and Eric Zhao. "A unifying perspective on multi-calibration: Game dynamics for multi-objective learning". In: _Advances in Neural Information Processing Systems_ 36 (2024).
* [HK16] Elad Hazan and Tomer Koren. "The computational power of optimization in online learning". In: _Proceedings of the forty-eighth annual ACM symposium on Theory of Computing_. STOC '16. New York, NY, USA: Association for Computing Machinery, June 2016, pp. 128-141.
* [HP05] Marcus Hutter and Jan Poland. "Adaptive Online Prediction by Following the Perturbed Leader". In: _Journal of Machine Learning Research_ 6.22 (2005), pp. 639-660.
* [HPY23] Nika Haghtalab, Chara Podimata, and Kunhe Yang. "Calibrated Stackelberg Games: Learning Optimal Commitments Against Calibrated Agents". In: _Advances in Neural Information Processing Systems_ 36 (Dec. 2023), pp. 61645-61677.
* [HRS22] Nika Haghtalab, Tim Roughgarden, and Abhishek Shetty. "Smoothed Analysis with Adaptive Adversaries". In: _2021 IEEE 62nd Annual Symposium on Foundations of Computer Science (FOCS)_. Feb. 2022, pp. 942-953.
* [Kea+18] Michael Kearns, Seth Neel, Aaron Roth, and Zhiwei Steven Wu. "Preventing fairness gerrymandering: Auditing and learning for subgroup fairness". In: _International conference on machine learning_. PMLR. 2018, pp. 2564-2572.
* [KGZ19] Michael P Kim, Amirata Ghorbani, and James Zou. "Multiaccuracy: Black-box post-processing for fairness in classification". In: _Proceedings of the 2019 AAAI/ACM Conference on AI, Ethics, and Society_. 2019, pp. 247-254.
* [KK05] Sham Kakade and Adam Tauman Kalai. "From Batch to Transductive Online Learning". In: _Advances in Neural Information Processing Systems_. Vol. 18. MIT Press, 2005.
* [KV05] Adam Kalai and Santosh Vempala. "Efficient algorithms for online decision problems". In: _Journal of Computer and System Sciences_ 71.3 (Oct. 2005), pp. 291-307.
* [Lee+22] Daniel Lee, Georgy Noarov, Mallesh Pai, and Aaron Roth. "Online minimax multiobjective optimization: Multicalibeating and other applications". In: _Advances in Neural Information Processing Systems_ 35 (2022), pp. 29051-29063.
* [LS15] Haipeng Luo and Robert E Schapire. "Achieving all with no parameters: Adamormal-hedge". In: _Conference on Learning Theory_. PMLR. 2015, pp. 1286-1304.
* [Nat89] B. K. Natarajan. "On learning sets and functions". In: _Machine Learning_ 4.1 (Oct. 1989), pp. 67-97.
* [NMR44] John von Neumann, Oskar Morgenstern, and Ariel Rubinstein. _Theory of Games and Economic Behavior (60th Anniversary Commemorative Edition)_. Princeton University Press, 1944.
* [Oak+20] Luke Oakden-Rayner, Jared Dunnmon, Gustavo Carneiro, and Christopher Re. "Hidden stratification causes clinically meaningful failures in machine learning for medical imaging". In: _Proceedings of the ACM conference on health, inference, and learning_. 2020, pp. 151-159.
* [RST11] Alexander Rakhlin, Karthik Sridharan, and Ambuj Tewari. "Online Learning: Stochastic, Constrained, and Smoothed Adversaries". In: _Advances in Neural Information Processing Systems_. Vol. 24. Curran Associates, Inc., 2011.
* [RY21] Guy N. Rothblum and Gal Yona. "Multi-group Agnostic PAC Learnability". In: _Proceedings of the 38th International Conference on Machine Learning_. PMLR, July 2021, pp. 9107-9115.
* [Sag+20] Shiori Sagawa, Pang Wei Koh, Tatsunori B Hashimoto, and Percy Liang. "Distributionally robust neural networks for group shifts: On the importance of regularizat ion for worst-case generalization". In: _International Conference on Learning Representations_. 2020.
* [SKS16] Vasilis Syrgkanis, Akshay Krishnamurthy, and Robert Schapire. "Efficient Algorithms for Adversarial Contextual Learning". In: _Proceedings of The 33rd International Conference on Machine Learning_. Ed. by Maria Florina Balcan and Kilian Q. Weinberger. Vol. 48. Proceedings of Machine Learning Research. New York, New York, USA: PMLR, June 2016, pp. 2159-2168.
* [TH22] Christopher J. Tosh and Daniel Hsu. "Simple and near-optimal algorithms for hidden stratification and multi-group learning". In: _Proceedings of the 39th International Conference on Machine Learning_. PMLR, June 2022, pp. 21633-21657.

* [Wan+22] Guanghui Wang, Zihao Hu, Vidya Muthukumar, and Jacob D. Abernethy. "Adaptive Oracle-Efficient Online Learning". In: _Advances in Neural Information Processing Systems 35_ (Dec. 2022), pp. 23398-23411.

Proof of Theorem 3.2

The goal is to prove that Online ListUpdate satisfies, for all \(g\in\mathcal{G}\),

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq O\left((d\log T)^{1/3}T^{2/3}+ \sqrt{dT\log T}\right).\]

Fix any \(g\in\mathcal{G}\). For each \(h\in\mathcal{H}\), define

\[\mathrm{Reg}_{T}(h,g):=\sum_{t=1}^{T}g(x_{t})(\ell(\hat{y}_{t},y_{t})-\ell(h(x _{t}),y_{t})).\]

By linearity of expectation, Theorem 3.1, and an elementary integral bound,

\[\mathbb{E}[\mathrm{Reg}_{T}(h,g)] =\sum_{t=1}^{T}\mathbb{E}[g(x_{t})\ell(\hat{y}_{t},y_{t})-\mathbb{ E}[g(x_{t})\ell(h(x_{t}),y_{t})]\] \[\leq 1+\sum_{t=2}^{T}P(g)\cdot(\mathbb{E}[\ell(f_{t}(x_{t}),y_{t} )\mid x_{t}\in g]-\mathbb{E}[g(x_{t})\ell(h(x_{t}),y_{t})\mid x_{t}\in g])\] \[\leq 1+\sum_{t=2}^{T}\left((1-\delta)\cdot O\left(\left(\frac{d \log(t-1)+\log(1/\delta)}{t-1}\right)^{1/3}\right)+\delta\right)\] \[=1+O\left((d\log T+\log(1/\delta))^{1/3}T^{2/3}+\delta T\right).\]

Plug-in \(\delta=1/T\) to obtain

\[\mathbb{E}[\mathrm{Reg}_{T}(h,g)]\leq O\left((d\log T)^{1/3}T^{2/3}\right).\]

It remains to relate \(\max_{h\in\mathcal{H}}\mathbb{E}[\mathrm{Reg}_{T}(h,g)]\) to \(\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\). Define

\[h_{g}\in\operatorname*{arg\,min}_{h\in\mathcal{H}}\mathbb{E}_{(x,y)\sim\mu}[g (x)\ell(h(x),y)]\quad\text{and}\quad\hat{h}_{g}\in\operatorname*{arg\,min}_{h \in\mathcal{H}}\sum_{t=1}^{T}g(x_{t})\ell(h(x_{t}),y_{t}).\]

Then

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]=\max_{h\in\mathcal{H}}\mathbb{E}[ \mathrm{Reg}_{T}(h,g)]+\mathbb{E}\left[\sum_{t=1}^{T}g(x_{t})(\ell(h_{g}(x_{t},y_{t})-\ell(\hat{h}_{g}(x_{t}),y_{t}))\right].\]

Since \(\mathcal{H}\) has VC dimension at most \(d\), a standard uniform convergence argument implies

\[\mathbb{E}\left[\max_{h\in\mathcal{H}}T\mathbb{E}_{(x,y)\sim\mu}[g(x)\ell(h(x ),y)]-\sum_{t=1}^{T}g(x_{t})\ell(h(x_{t}),y_{t})\right]\leq O\left(\sqrt{dT \log T}\right).\]

Using the definitions of \(h_{g}\) and \(\hat{h}_{g}\), we obtain

\[\mathbb{E}\left[\sum_{t=1}^{T}g(x_{t})(\ell(h_{g}(x_{t},y_{t})-\ell(\hat{h}_{ g}(x_{t}),y_{t}))\right]\leq O\left(\sqrt{dT\log T}\right).\]

Therefore, we conclude that

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq O\left((d\log T)^{1/3}T^{2/3} +\sqrt{dT\log T}\right).\]

This finishes the proof of Theorem 3.2. \(\Box\)Proof of Main Theorem 4.1

In this section, we prove the multi-group regret guarantee of our main algorithm, Algorithm 1. To restate the theorem, we aim to show, for all \(g\in\mathcal{G}\),

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq O\left(\sqrt{\frac{dT\log T}{ \sigma}}+\alpha T\right).\]

More explicitly, we aim to show that:

\[\sum_{t=1}^{T}\mathbb{E}[g(x_{t})\left(\ell(h_{t}(x_{t}),y_{t})-\ell(h^{*}(x_{ t}),y_{t})\right)]\leq O\left(\sqrt{\frac{dT\log T}{\sigma}}+\alpha T\right),\]

where \(h^{*}\in\min_{h\in\mathcal{H}}\sum_{t=1}^{T}g(x_{t})\ell(h(x_{t}),y_{t}).\) We follow a generalization of the online minimax multiobjective optimization framework of [10], with techniques inspired by [11].

### The AMF Algorithm Framework

We first restate their "adversary-moves-first" AMF algorithm of [10] and its main regret guarantee for convenience, as we will need to adapt and generalize it to our setting. Let \(\mathcal{A}_{t}\) denote a general action space of the learner, and let \(\mathcal{Z}_{t}\) denote the general action space of the adversary at round \(t\in[T]\). In full generality, \(\mathcal{A}_{t}\) and \(\mathcal{Z}_{t}\) are allowed to change with the rounds \(t\in[T]\). We differentiate this from the action space \(\mathcal{Y}\) of the main body. For each round \(t=1,\dots,T\), consider the following setting, which we refer to as the _multiobjective online optimization problem_:

1. The adversary selects a continuous, \(d\)-dimensional loss function \(r_{t}:\mathcal{A}_{t}\times\mathcal{Z}_{t}\to[-1,1]^{d}\). Each component \(r_{t}^{j}:\mathcal{A}_{t}\times\mathcal{Z}_{t}\to[-1,1]\) is convex in \(\mathcal{A}_{t}\) and concave in \(\mathcal{Z}_{t}\).
2. The learner selects an action \(a_{t}\in\mathcal{A}_{t}\).
3. Nature observes the learner's action \(a_{t}\) and responds with \(z_{t}\in\mathcal{Z}_{t}\).
4. The learner incurs the \(d\)-dimensional loss \(r_{t}(a_{t},z_{t})\).

In this setting, the learner's goal is to minimize the value of the maximum dimension of the accumulated loss vector after \(T\) rounds:

\[\max_{j\in[d]}\sum_{t=1}^{T}r_{t}^{j}(a_{t},z_{t}).\]

To benchmark the learner's performance, we consider the following quantity, which we refer to as the _adversary-moves-first (AMF) value at round \(t\)_.

**Definition B.1** (Adversary-Moves-First (AMF) Value at Round \(t\),[10]).: _The adversary-moves-first (AMF) value at round \(t\) is the value:_

\[v_{t}^{A}:=\max_{z_{t}\in\mathcal{Z}_{t}}\min_{a_{t}\in\mathcal{A}_{t}}\left( \max_{j\in[d]}r_{t}^{j}(a_{t},z_{t})\right).\] (6)

We conceive of the value \(v_{t}^{A}\) in (6) as the aspirational smallest value of the maximium coordinate of \(r_{t}\) the learner could guarantee _if_ the adversary had to reveal \(z_{t}\) first and the learner could best respond with \(a_{t}\). Per how the multiobjective online optimization problem is set up, however, the opposite is true -- the learner must commit to an action \(a_{t}\in\mathcal{A}_{t}\) first, and _then_ the adversary is allowed to play \(z_{t}\in\mathcal{Z}_{t}\) in response to maximize the learner's misfortune. Regardless, we can define a notion of regret with respect to this particular benchmark.

**Definition B.2** (Adversary-Moves-First (AMF) Regret).: _Over \(T\) rounds of the above multiobjective online optimization problem, the adversary-moves-first regret of the learner is:_

\[\mathrm{AMFReg}_{T}:=\max_{j\in[d]}\left(\sum_{t=1}^{T}r_{t}^{j}(a_{t},z_{t})- v_{t}^{A}\right).\]

This notion measures the cumulative regret the learner has for not playing the action \(a_{t}\in\mathcal{A}_{t}\) achieving the aspirational value \(v_{t}^{A}\) at round \(t\) over _all_\(d\) coordinates of the loss vector.

A natural question, then, is to wonder if such a regret can be made to diminish sublinearly. That is, does there exist an algorithm such that \(\mathrm{AMFReg}_{T}\leq o(T)\)? [10] answer this in the affirmative, presenting Algorithm 2.

```
1:for\(t=1,2,3,\ldots,T\)do
2: Receive adversarially chosen action spaces \(\mathcal{A}_{t}\) and \(\mathcal{Z}_{t}\) and the \(d\)-dimensional loss function \(r_{t}:\mathcal{A}_{t}\times\mathcal{Z}_{t}\rightarrow[-1,1]^{d}\).
3: Let \[q_{t}^{j}:=\frac{\exp\left(\eta\sum_{s=1}^{t-1}r_{s}^{j}(a_{s},z_{s})\right)}{ \sum_{i\in[d]}\exp\left(\eta\sum_{s=1}^{t-1}r_{s}^{i}(a_{s},z_{s})\right)}\ \text{ for }j\in[d].\] For \(t=1\), let \(q_{t}^{j}=1/d\) for all \(j\in[d]\).
4: Solve the min-max optimization problem: \[a_{t}\in\operatorname*{arg\,min}_{a\in\mathcal{A}_{t}}\max_{z\in\mathcal{Z}_ {t}}\sum_{j\in[d]}q_{t}^{j}r_{t}^{j}(a,z).\] (7)
5: Commit to the action \(a_{t}\in\mathcal{A}_{t}\), observe Nature's choice \(z_{t}\in\mathcal{Z}_{t}\), and incur loss \(r_{t}(a_{t},z_{t})\).
6:endfor ```

**Algorithm 2** AMF Algorithm of [10]

It is not immediately clear at first glance how Algorithm 2 translates to our multi-group online learning setting. In the next section, we will show a reduction from our setting to the this AMF framework. We will specialize Algorithm 2 to our setting and prove a "meta-theorem" similar to the original guarantee of Algorithm 2 and proceed to control the regret via that meta-theorem in subsequent sections.

### Reduction of multi-group online learning to AMF Framework

Recall that, in this paper, we actually care about the _online multi-group learning setting_ described in Section 2.2. We restate the objective here for convenience.

In multi-group online learning, the learner has access to a hypothesis class \(\mathcal{H}\) taking contexts from \(\mathcal{X}\) and outputting actions in \(\mathcal{Y}\), a common action space for the learner and Nature. There is a common loss function for the problem, \(\ell(\cdot,\cdot):\mathcal{Y}\times\mathcal{Y}\rightarrow[0,1]\). To allow confusion, we refer to the adversary in the multi-group online setting of Section 2.2 as "Nature" and the adversary in the online multiobjective optimization problem of Section B.1 as "the adversary." The learners in both settings correspond to one another, so we just use "the learner." For clarity of exposition, we let \(\mathcal{Y}=\{-1,1\}\) be a binary action space for the remainder of Appendix B. The generalization to the case where \(\mathcal{Y}\) takes \(K\) discrete values is sketched in Appendix C.

We consider the regret of the learner on subsequences of rounds \((t\in[T]:x_{t}\in g)\) defined by the groups \(g\in\mathcal{G}\) and the sequence of contexts \(x_{1},\ldots,x_{T}\). Specifically, the _(multi-group) regret of the learner on group \(g\)_ is

\[\mathrm{Reg}_{T}(\mathcal{H},g):=\sum_{t=1}^{T}g(x_{t})\ell(\hat{y}_{t},y_{t}) -\min_{h\in\mathcal{H}}\sum_{t=1}^{T}g(x_{t})\ell(h(x_{t}),y_{t}).\] (8)

Crucially, the best hypothesis for one group may differ from that of another group. The learner seeks to achieve achieve sublinear expected regret, on all groups \(g\in\mathcal{G}\) simultaneously.

We now show a reduction from the multi-group online learning setting to the general multiobjective online optimization problem of the previous Section B.1. An important observation is that, when \(\mathcal{Y}=\{-1,1\}\), varying \(h_{t}\in\mathcal{H}\) only affects the regret at round \(t\in[T]\) insofar as its behavior on \(x_{t}\). That is, for a fixed \(x_{t}\in\mathcal{X}\) and \(y\in\mathcal{Y}\), \(\ell(h_{t}(x_{t}),y)\in\{\ell(-1,y),\ell(1,y)\}\). Note that it is possible for the set \(\{h(x_{t}):h\in\mathcal{H}\}\subseteq\mathcal{Y}\) to be a singleton set, in which case the learner will always take this unique action.

* Let \(\mathcal{A}_{t}\), the learner's action space for round \(t\in[T]\) in Section B.1, be the simplex \(\Delta(\mathcal{Y})\).

* Let \(\mathcal{Z}_{t}\), the adversary's action space in Section B.1, be \(\mathcal{Z}_{t}=[0,1]\) for all \(t\in[T]\), which will correspond to the parameter of a Bernoulli distribution over the binary-valued action space \(\mathcal{Y}\) of Nature in the multi-group online learning problem.
* Let \(r_{t}:\mathcal{A}_{t}\times\mathcal{Z}_{t}\to[-1,1]^{d}\), the adversarially chosen loss function, be \(\mathcal{G}\times\mathcal{H}\)-dimensional, with each coordinate corresponding to a pair \((\tilde{g},\tilde{h})\in\mathcal{G}\times\mathcal{H}\). Consider any \(p,\gamma\in[0,1]\), each determining a Bernoulli distribution over \(\mathcal{Y}=\{-1,1\}\). As in Section 4.2, for any \(x\in\mathcal{X}\): \[\tilde{\ell}_{x}((\tilde{g},\tilde{h}),(y^{\prime},y)):=\tilde{g}(x)\left( \ell(y^{\prime},y)-\ell(\tilde{h}(x),y)\right).\] Then, define: \[r_{t}^{(\tilde{g},\tilde{h})}(p,\gamma):=\mathbb{E}_{y^{\prime}\sim p}\mathbb{ E}_{y\sim\mathrm{Ber}(\gamma)}\left[\tilde{\ell}_{x_{t}}((\tilde{g},\tilde{h}),(y^{ \prime},y))\right].\] (9) Above, the loss \(\ell(\cdot,\cdot)\) is the fixed loss of the multi-group online learning problem, and \(x_{t}\in\mathcal{X}\) is the context chosen by Nature at round \(t\), which indexes \(r_{t}\).

It may now be slightly clearer how Algorithm 1 maps to Algorithm 2, but we provide a high-level overview here to prepare the reader for the subsequent sections.

* The distribution \(q_{t}\in\Delta[d]\) in Line 3 of Algorithm 2 corresponds to the implicit distribution formed by querying \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\)\(M\) times to generate \(\{(\tilde{g}_{i},\tilde{h}_{i})\}_{i=1}^{M}\), i.e. the \((\mathcal{G},\mathcal{H})\)-player.
* Solving the min-max optimization problem in Line 4, Equation (7) of Algorithm 2 corresponds to the two calls to the simple optimization problem solved by the \(\mathcal{H}\)-player and solving the simple one-dimensional linear program in Line 8 of Algorithm 1.

We make these correspondences formal in the subsequent sections. To organize this, we first formally show the correspondence between the \((\mathcal{G},\mathcal{H})\)-player and the construction of \(q_{t}\), and the \(\mathcal{H}\)-player and Equation (7) in Algorithm 2.

### Instantiations of the \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) oracle

The computational primitive our algorithm assumes access to is a \((\mathcal{G},\mathcal{H})\)-optimization oracle, defined in Definition 2.2, and requoted here for ease of reference.

**Definition B.3** (\((\mathcal{G},\mathcal{H})\)-optimization oracle).: _Fix an error parameter \(\alpha\geq 0\). For a collection of groups \(\mathcal{G}\in 2^{\mathcal{X}}\), a collection of hypotheses \(\mathcal{H}\subseteq\mathcal{Y}^{\mathcal{X}}\), and a sequence of \(m\) loss functions \(\ell_{i}:(\{0,1\}\times\mathcal{Y})\times(\mathcal{Y}\times\mathcal{Y})\to[- 1,1]\), an \(\alpha\)-approximate \((\mathcal{G},\mathcal{H})\)-optimization oracle \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) is an \(\alpha\)-approximation optimization oracle (Definition 2.1) that outputs a pair \((\tilde{g},\tilde{h})\in\mathcal{G}\times\mathcal{H}\) satisfying:_

\[\sum_{i=1}^{m}w_{i}\ell_{i}((\tilde{g}(x_{i}),\tilde{h}(x_{i})),(y_{i},y^{ \prime}_{i}))\geq\sup_{(g^{*},h^{*})\in\mathcal{G}\times\mathcal{H}}\sum_{i=1 }^{m}w_{i}\ell_{i}((g^{*}(x_{i}),h^{*}(x_{i})),(y_{i},y^{\prime}_{i}))-\alpha.\] (10)

A common assumption in the literature on oracle-efficient online learning is positing the existence of some reasonable optimization oracle, typically commensurate to the ability to solve ERM. Although it is well-known that ERM is computationally hard in the worst-case, a bedrock of modern machine learning is the assumption that ERM is at least heuristically and approximately solvable. Although, for the purposes of our work, we assume access to this oracle as a black-box, it is natural to wonder if such an oracle can be instantiated. [1] gives two such instantiations which we quote here for completeness.

We consider the specific instantiation of the \((\mathcal{G},\mathcal{H})\)-oracle in Algorithm 1 for a specific round \(t\in[T]\), which aims to solve the following optimization problem for some \((\tilde{g}_{t},\tilde{h}_{t})\in\mathcal{G}\times\mathcal{H}\):

\[\sum_{s=1}^{t-1}\tilde{g}_{t}(x_{s})\left(\ell(\hat{y}_{s},y_{s})-\ell(\tilde{h }_{t}(x_{s}),y_{s})\right)\geq\mathrm{OPT}-\alpha,\] (11)

where \(\mathrm{OPT}:=\sup_{g^{*},h^{*}\in(\mathcal{G},\mathcal{H})}\sum_{s=1}^{t-1}g^ {*}(x_{s})\left(\ell(\hat{y}_{s},y_{s})-\ell(h^{*}_{t}(x_{s}),y_{s})\right)\).

In both instantiations of the oracle in [1], the oracle aims to find a \((g,h)\in(\mathcal{G},\mathcal{H})\) competitive to some reference model, \(f:\mathcal{X}\to\{0,1\}\). For simplicity, as in the main body, we assume that \(\mathcal{Y}=\{0,1\}\), and the "reference model" we compete with is given by the Learner's history of actions up to round \(t\): \((x_{1},\hat{y}_{1}),\ldots,(x_{t-1},\hat{y}_{t-1})\). That is, we compare with the function \(f:\mathcal{X}\to\{0,1\}\) that maps \(f(x_{s})=\hat{y}_{s}\) for all \(s=1,\ldots,t-1\).

**Reduction to ternary classification.** The first instantiation of a \((\mathcal{G},\mathcal{H})\) oracle in [1] reduces the optimization oracle to the existence of a solver for a weighted ternary classification problem. The exposition here is quoted directly from [1].

Start with a class \(\mathcal{K}\) of _ternary_ valued functions \(p:\mathcal{X}\to\{0,1,?\}\). For each \(p\in\mathcal{K}\), define the _\(p\)-derived group_ and _\(p\)-derived hypothesis_ as:

\[g_{p}(x)=\begin{cases}1&\text{if }p(x)\in\{0,1\}\\ 0&\text{if }p(x)=?\end{cases}\quad h_{p}(x)=\begin{cases}p(x)&\text{if }p(x) \in\{0,1\}\\ 0&\text{if }p(x)=?\end{cases}\]

This class \(\mathcal{K}\) induces a set of pairs \((g_{p},h_{p})\) and a product class \((\mathcal{G},\mathcal{H})_{\mathcal{K}}:=\{(g_{p},h_{p}):p\in\mathcal{K}\}\). We may now define a _cost-sensitive classification_ problem over \(\mathcal{K}\) as follows, given an existing model \(f:\mathcal{X}\to\{0,1\}\), with the following costs:

\[c_{f}((x,y),z):=\begin{cases}0&\text{if }z=?\\ 1&\text{if }f(x)=y\neq z\\ -1&\text{if }z=y\neq f(x)\\ 0&\text{otherwise}\end{cases}.\]

For any distribution \(\mu\) over \(\mathcal{X}\times\{0,1\}\), the associated cost-sensitive classification problem for costs \(c_{f}((x,y),z)\) defined above is:

\[p^{*}\in\operatorname*{arg\,min}_{p\in\mathcal{K}}\mathbb{E}_{(x,y)\sim\mu}[c _{f}((x,y),p(x))].\] (12)

Many efficient algorithms that heuristically solve such optimization problems exist.

The main theorem from [1], restated here, is the following:

**Theorem B.1**.: _Fix any arbitrary distribution \(\mu\) over \(\mathcal{X}\times\{0,1\}\). Let \(\mathcal{K}\) be a class of ternary-valued functions \(p:\mathcal{X}\to\{0,1,?\}\) and let \(f:\mathcal{X}\to\{0,1\}\) be any binary-valued model. Let \(p^{*}\) be the solution to the cost-sensitive classification problem in Equation (12). Then,_

\[(g_{p}^{*},h_{p}^{*})\in\operatorname*{arg\,max}_{(g,h)\in(\mathcal{G}, \mathcal{H})_{\mathcal{K}}}\mathbb{E}_{(x,y)\sim\mu}\left[g(x)\left(\ell(f(x ),y)-\ell(h(x),y)\right)\right].\]

_When \(\mu\) is the empirical distribution over \(x_{1},\ldots,x_{t-1}\), the solution \((g_{p}^{*},h_{p}^{*})\) forms a solution to the optimization problem in Equation (11) when \((\mathcal{G},\mathcal{H})_{\mathcal{K}}=\mathcal{G}\times\mathcal{H}\)._

We refer the reader to Section 4.2 in [1] for a proof.

**Reduction to alternating maximization.** Another instantiation of the \((\mathcal{G},\mathcal{H})\)-oracle in [1] is an alternating maximization approach. The reduction to ternary classification quoted above relies on an oracle for the class \(\mathcal{K}\) and supplies guarantees for the derived class \((\mathcal{G},\mathcal{H})_{\mathcal{K}}\). However, if we wish to begin with \(\mathcal{G}\times\mathcal{H}\), we can take an "EM-style" alternating maximization approach that only requires ERM oracles for \(\mathcal{G}\) and \(\mathcal{H}\) separately. This approach only guarantees a saddle point local optimum.

The main idea is that, by holding \(g\) fixed and solving for \(h^{*}\), and vice versa, the following optimization problems are no harder than ERM over \(\mathcal{G}\) and \(\mathcal{H}\) individually:

\[g^{*}\in\operatorname*{arg\,max}_{g^{*}\in\mathcal{G}}\mathbb{E} _{(x,y)\sim\mu}[g^{*}(x)\left(\ell(f(x),y)-\ell(h(x),y)\right)]\] (13) \[h^{*}\in\operatorname*{arg\,max}_{h\in\mathcal{H}}\mathbb{E}_{(x, y)\sim\mu}[g(x)\left(\ell(f(x),y)-\ell(h^{*}(x),y)\right)].\] (14)

In Equation (13), \(h\) is fixed and we solve for \(g^{*}\); in Equation (14), \(g\) is fixed, and we solve for \(h^{*}\). With appropriate modifications to the distribution \(\mu\) we can construct ERM problems for \(g^{*}\) and \(h^{*}\) commensurate to solving Equations (13) and (14). We refer the reader to Lemmas 21 and 22 in [1] for the proofs.

This allows us to state an alternating maximization algorithm for finding a saddle point \((g,h)\in\mathcal{G}\times\mathcal{H}\) that gives a local optimum to Equation (11) in Algorithm 3. The corresponding theorem, restated from [1] is:

**Theorem B.2**.: _Let \(\epsilon>0\). Fix any empirical distribution over \((x_{1},y_{1}),\ldots,(x_{m},y_{m})\), let \(f:\mathcal{X}\to\{0,1\}\) be an arbitrary model, and let \(\mathcal{G}\) and \(\mathcal{H}\) be arbitrary group and hypothesis classes. After solving at most \(2/\epsilon\) ERM problems over each of \(\mathcal{G}\) and \(\mathcal{H}\) (in Equations (13) and (14), respectively), Algorithm 3 returns a pair \((g^{*},h^{*})\) with the properties that:_

1. _For every_ \(h\in\mathcal{H}\)_,_ \[\sum_{i=1}^{m}g^{*}(x_{i})\left(\ell(f(x_{i}),y_{i})-\ell(h(x_{i}),y_{i})\right) \leq\sum_{i=1}^{m}g^{*}(x_{i})\left(\ell(f(x_{i}),y_{i})-\ell(h^{*}(x_{i}),y_{ i})\right)+\epsilon.\]
2. _For every_ \(g\in\mathcal{G}\)_,_ \[\sum_{i=1}^{m}g(x_{i})\left(\ell(f(x_{i}),y_{i})-\ell(h^{*}(x_{i}),y_{i})\right) \leq\sum_{i=1}^{m}g^{*}(x_{i})\left(\ell(f(x_{i}),y_{i})-\ell(h^{*}(x_{i}),y_{ i})\right)+\epsilon.\]

```
0: Dataset \(\{(x_{i},y_{i})\}_{i=1}^{m}\), a model \(f:\mathcal{X}\to\{0,1\}\), error parameter \(\epsilon\).
1: Initialize \((g^{*},h^{*})\in\mathcal{G}\times\mathcal{H}\) arbitrarily.
2: Let \[\mathrm{VAL}:=\sum_{i=1}^{m}g^{*}(x_{i})\left(\ell(f(x_{i}),y_{i})\right)-\ell (h^{*}(x_{i}),y_{i}))\]
3: Use ERM oracle for Equations (13) and (14) to solve for: \[g^{*} \in\operatorname*{arg\,max}_{g\in\mathcal{G}}\sum_{i=1}^{m}g(x) \left(\ell(f(x),y)-\ell(h^{*}(x),y)\right)\] \[h^{*} \in\operatorname*{arg\,max}_{h\in\mathcal{H}}\sum_{i=1}^{m}g^{*}( x)\left(\ell(f(x),y)-\ell(h(x),y)\right)\]
4:while\(\sum_{i=1}^{m}g^{*}(x)\left(\ell(f(x),y)-\ell(h^{*}(x),y)\right)\geq\mathrm{ VAL}+\epsilon\)do
5: Let \[\mathrm{VAL}:=\sum_{i=1}^{m}g^{*}(x_{i})\left(\ell(f(x_{i}),y_{i})\right)-\ell (h^{*}(x_{i}),y_{i}))\]
6: Use ERM oracle for Equations (13) and (14) to solve for: \[g^{*} \in\operatorname*{arg\,max}_{g\in\mathcal{G}}\sum_{i=1}^{m}g(x) \left(\ell(f(x),y)-\ell(h^{*}(x),y)\right)\] \[h^{*} \in\operatorname*{arg\,max}_{h\in\mathcal{H}}\sum_{i=1}^{m}g^{*}( x)\left(\ell(f(x),y)-\ell(h(x),y)\right)\]
7:endwhile
8: Return \((g^{*},h^{*})\in\mathcal{G}\times\mathcal{H}\). ```

**Algorithm 3** Alternating Maximization for \(\mathcal{G}\times\mathcal{H}\) Oracle

We believe that it is an interesting and worthwhile open question to develop more specific instantiations of this \((\mathcal{G},\mathcal{H})\)-oracle for more specific problem settings that are computationally efficient and have provable optimization guarantees.

### The group-hypothesis and hypothesis players

We formally define how the \((\mathcal{G},\mathcal{H})\)-player corresponds to the weights \(q_{t}\in\Delta[d]\) in Algorithm 2. The crucial observation here is that the perturbations of the FTPL algorithm of [1] used in our setting form an implicit distribution over \(\mathcal{G}\times\mathcal{H}\) that can be approximated by calling the \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) oracle \(M\) times.

In the proceeding sections, we denote \(\Delta(\mathcal{G}\times\mathcal{H})\) as the (possibly infinite-dimensional) space of measures over the functions \(\mathcal{G}\times\mathcal{H}\). However, we will always only access sparse distributions on thisspace, with a finite number of \((g,h)\) pairs in \(\mathcal{G}\times\mathcal{H}\) obtaining nonzero mass. The following definition should make this clear.

**Definition B.4** (The distribution of the \((\mathcal{G},\mathcal{H})\)-player).: _For any round \(t\in[T]\), let \(\{(\tilde{g}_{i},\tilde{h}_{i})\}_{i=1}^{M}\) be the \(M\) samples drawn from querying \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) in Algorithm 1. Let the empirical distribution \(\tilde{q}_{t}\in\Delta(\mathcal{G}\times\mathcal{H})\) be the distribution of the \((\mathcal{G},\mathcal{H})\)-player at round \(t\)._

It is easy to see that \(\tilde{q}_{t}\) is a valid distribution over \((\mathcal{G},\mathcal{H})\), with measure over \(A\subseteq\mathcal{G}\times\mathcal{H}\), defined by:

\[P_{M}(A):=\frac{1}{M}\sum_{i=1}^{M}\delta_{(\tilde{g}_{i},\tilde{h}_{i})}(A),\]

where \(\delta_{(\tilde{g}_{i},\tilde{h}_{i})}\) is the Dirac measure of \((\tilde{g}_{i},\tilde{h}_{i})\) falling into the set \(A\). The stochasticity of \((\tilde{g}_{i},\tilde{h}_{i})\) is over the random perturbations described in Section 4.2, Equation (4). Equipped with this definition, we can take empirical expectations over \(\tilde{q}_{t}\in\Delta(\mathcal{G}\times\mathcal{H})\) in the usual way. Observe that, in Algorithm 2, Equation (7), the optimization problem at round \(t\), is equivalent to:

\[a_{t}\in\operatorname*{arg\,min}_{a\in\mathcal{A}}\max_{z\in\mathcal{Z}} \mathbb{E}_{j\sim q_{t}}\left[r_{t}^{j}(a,z)\right].\]

Because the \(d\) objectives in our reduction (Section B.2) correspond to each group-hypothesis pair \((g,h)\in\mathcal{G}\times\mathcal{H}\), \(\mathcal{A}_{t}\) corresponds to \(\Delta(\mathcal{Y})\), and \(\mathcal{Z}_{t}\) always corresponds to \([0,1]\), we can equivalently consider the min-max optimization problem at round \(t\in[T]\):

\[p_{t}\in\operatorname*{arg\,min}_{p\in\Delta(\mathcal{Y})}\max_{\gamma\in[0,1 ]}\mathbb{E}_{(\tilde{g},\tilde{h})\sim\tilde{q}_{t}}\left[r_{t}^{(\tilde{g}, \tilde{h})}(p,\gamma)\right],\] (15)

where \(r_{t}^{(\tilde{g},\tilde{h})}\) is defined in Equation 9. The next lemma relates the optimization procedure of the \(\mathcal{H}\)-player in Algorithm 1 to the min-max optimization procedure of Equation (7) in Algorithm 2.

**Lemma B.3** (The optimization of the \(\mathcal{H}\)-player).: _For any round \(t\in[T]\), let \(\{(\tilde{g}_{i},\tilde{h}_{i})\}_{i=1}^{M}\) denote the \(M\) samples obtained by calling \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\)\(M\) times in Algorithm 1, and denote \(\tilde{q}_{t}\in\Delta(\mathcal{G}\times\mathcal{H})\) denote the corresponding empirical distribution (Definition B.4). Then, \(p_{t}\in\Delta(\mathcal{Y})\) defined in Equation (15) above is equivalent to the distribution \((p,1-p)\in\Delta(\{-1,1\})\) obtained from solving the linear program of the \(\mathcal{H}\)-player in Algorithm 1._

Proof.: Consider any round \(t\in[T]\). Observe that Line 8 of Algorithm 1 is equivalent to solving the linear program for \(\lambda\in\mathbb{R}\) and \(\boldsymbol{p}:=(p,1-p)\in\mathbb{R}^{2}\) :

\[\min\ \lambda\] \[\mathrm{s.t.}\sum_{\boldsymbol{p}_{i}}=1\] \[\boldsymbol{p}^{\top}\tilde{L}e_{i}\leq\lambda\quad\forall i\in[2]\] \[\boldsymbol{p}_{i}\geq 0\quad\forall i\in[2]\]

where the payoff matrix \(\tilde{L}\in[-1,1]^{2\times 2}\) has the coordinates \((y^{\prime},y)\):

\[\tilde{L}_{(y^{\prime},y)}:=\frac{1}{M}\sum_{i=1}^{M}\tilde{\ell}_{x_{i}}(( \tilde{g}_{t}^{(i)},\tilde{h}_{t}^{(i)}),(y^{\prime},y)),\]

and \(e_{i}\) is the \(i\)th coordinate vector of \(\mathbb{R}^{2}\). Let \(\Delta(\mathcal{Y})\) denote the space of probability distributions over \(\mathcal{Y}\). Let \(\boldsymbol{p}=(p,1-p)\) and \(\boldsymbol{z}=(\gamma,1-\gamma)\), and, as shorthand, denote \(\boldsymbol{p}(-1)=1-p\), \(\boldsymbol{p}(1)=p\), \(\boldsymbol{z}(-1)=1-\gamma\), and \(\boldsymbol{z}(1)=\gamma\).

By the equivalence of linear programs (LPs) to zero-sum min-max games (see, e.g., [11, 12]), obtaining the optimal \(\bm{p}\) for this LP is the equivalent to solving:

\[\min_{\bm{p}\in\Delta(\mathcal{Y})}\max_{\bm{z}\in\Delta(\mathcal{Y })}\bm{p}^{\top}\tilde{L}z =\min_{\bm{p}\in\Delta(\mathcal{Y})}\max_{\bm{z}\in\Delta(\mathcal{ Y})}\frac{1}{M}\sum_{y\in\mathcal{Y}}\sum_{y^{\prime}\in\mathcal{Y}}\sum_{i=1}^{M} \bm{p}(y^{\prime})\bm{z}(y)\tilde{\ell}_{x_{t}}((\tilde{g}_{t}^{(i)},\tilde{h }_{t}^{(i)}),(y^{\prime},y))\] \[=\min_{\bm{p}\in\Delta(\mathcal{Y})}\max_{\bm{z}\in\Delta( \mathcal{Y})}\sum_{y\in\mathcal{Y}}\sum_{y^{\prime}\in\mathcal{Y}}\bm{p}(y^{ \prime})\bm{z}(y)\mathbb{E}_{(\tilde{g},\tilde{h})\sim\tilde{q}_{t}}\left[ \tilde{\ell}_{x_{t}}((\tilde{g},\tilde{h}),(y^{\prime},y))\right]\] \[=\min_{\bm{p}\in\Delta(\mathcal{Y})}\max_{\bm{z}\in\Delta( \mathcal{Y})}\mathbb{E}_{y^{\prime}\sim\bm{p}}\mathbb{E}_{y\sim\mathrm{Ber}( \gamma)}\left[\mathbb{E}_{(\tilde{g},\tilde{h})\sim\tilde{q}_{t}}\left[ \tilde{\ell}_{x_{t}}((\tilde{g},\tilde{h}),(y^{\prime},y)\right]\right]\] \[=\min_{p\in\Delta(\mathcal{Y})}\max_{\gamma\in[0,1]}\mathbb{E}_{ y^{\prime}\sim\mathrm{Ber}(p)}\mathbb{E}_{y\sim\mathrm{Ber}(\gamma)}\left[ \mathbb{E}_{(\tilde{g},\tilde{h})\sim\tilde{q}_{t}}\left[\tilde{\ell}_{x_{t}} ((\tilde{g},\tilde{h}),(y^{\prime},y)\right]\right]\] \[=\min_{p\in\Delta(\mathcal{Y})}\max_{\gamma\in[0,1]}\mathbb{E}_{ (\tilde{g},\tilde{h})\sim\tilde{q}_{t}}\left[r_{t}^{(\tilde{g},\tilde{h})}(p, \gamma)\right]\]

Above, the first equality just comes from definition of \(\tilde{L}\), the second equality is from the Definition B.4 of the empirical distribution \(\tilde{q}_{t}\), the third and fourth equalities are from the definition of \(\bm{p}\) and \(\bm{z}\) in the previous paragraph. The final equality is just from interchanging the order of expectation and the definition of \(r_{t}^{(\tilde{g},\tilde{h})}(p,\gamma)\) in Equation (9). By this chain of inequalities, we see that obtaining the optimal \(\bm{p}\) for the original LP corresponds exactly to the choice of \(p_{t}\) in Equation (15). 

Lemma B.3 tells us that the strategy of the \(\mathcal{H}\)-player (i.e., Lines 8 and 9 in Algorithm 1) to obtain \(h_{t}\) is exactly the same as obtaining the minimizing \(p_{t}\) in Equation (15). From the exposition above, this corresponds to the min-max optimization problem in Equation (7) when \(q_{t}\) is \(\tilde{q}_{t}\), the distribution over \(\mathcal{G}\times\mathcal{H}\). We now proceed to prove a more general "meta-theorem" from which the regret guarantee of Algorithm 1 will follow once we plug in a specific FTPL algorithm for the \((\mathcal{G},\mathcal{H})\)-player.

### Meta-algorithm for Online Multi-group Learning

We now present a meta-algorithm, Algorithm 4, and its corresponding Theorem B.4, the "meta-theorem" for online multi-group learning from which Theorem 4.1 follows. This is more general, however, than the guarantee in Theorem 4.1, and we emphasize that, through changing the no-regret algorithm for the \((\mathcal{G},\mathcal{H})\)-player, we can obtain regret guarantees for settings other than the smoothed online learning setting of Theorem 4.1. Section 5 gives a couple of examples, which we elaborate in Appendix C.

Note that approximating the distribution of the \((\mathcal{G},\mathcal{H})\)-player is crucial to obtain computational efficiency, as we cannot hope to enumerate \(\mathcal{G}\) and \(\mathcal{H}\) by explicitly representing \(q_{t}\) in Algorithm 4. Thus, sampling \(M\) times is a crucial "sparsification" step that allows us to implicitly access the distribution over \(\mathcal{G}\times\mathcal{H}\) that the \((\mathcal{G},\mathcal{H})\)-player maintains.

We prove Theorem B.4 through techniques similar to the regret guarantee proof of Algorithm 2 in [13]. Namely, we observe that by using the reduction outlined in Section B.2 with the \(\mathcal{G}\times\mathcal{H}\)-dimensional loss

\[r_{t}^{(\tilde{g},\tilde{h})}(p,\gamma) =\mathbb{E}_{h(x_{t})\sim p}\mathbb{E}_{y\sim\mathrm{Ber}(\gamma)} \left[\tilde{g}(x_{t})\left(\ell(h(x_{t}),y)-\ell(\tilde{h}(x_{t}),y)\right)\right]\] \[=\mathbb{E}_{h(x_{t})\sim p}\mathbb{E}_{y\sim\mathrm{Ber}(\gamma)} \left[\tilde{\ell}\left((\tilde{g},\tilde{h}),(h(x_{t}),y)\right)\right]\]

we may obtain a bound on the multi-group regret of our Algorithm 4 by obtaining an adversary-moves-first regret guarantee (Definition B.2). For simplicity, we prove this for the case of binary actions \(\mathcal{Y}=\{-1,1\}\); we outline how to obtain a similar theorem for multi-class action spaces in Appendix C.

**Theorem B.4** (Meta-Theorem for Online Multi-group Learning).: _Let \(\mathcal{X}\) be a context space, let \(\mathcal{Y}:=\{-1,1\}\) be a binary action space, and let \(\mathcal{H}\) be a hypothesis class of functions \(h:\mathcal{X}\to\mathcal{Y}\), and let \(\mathcal{G}\) be a collection of groups, \(g:\mathcal{X}\to\{0,1\}\). Let \(\ell:\mathcal{Y}\times\mathcal{Y}\to[0,1]\) be a bounded loss function. Suppose the \((\mathcal{G},\mathcal{H})\)-player of Algorithm 4 is instantiated with a no-regret (maximization) algorithm operating over \(\mathcal{H}\times\mathcal{G}\) that has the guarantee that for any sequence of losses of length \(T\) bounded in \([-1,1]\), by playing (a possibly implicit distribution) \(q_{t}\), it has regret at most \(R(T)\) in expectation._Then, with expectation over any randomness of the \((\mathcal{G},\mathcal{H})\)-player and Nature, Algorithm 1 obtains the multi-group regret guarantee of:_

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq\sum_{t=1}^{T}v_{t}^{A}+\sum_{t=1} ^{T}\mathbb{E}[\epsilon_{t}(M)]+R(T),\] (16)

_for all \(g\in\mathcal{G}\), where_

\[v_{t}^{A}:=\max_{\gamma\in[0,1]}\min_{p_{t}\in\Delta(\mathcal{H})}\max_{( \tilde{g},\tilde{h})\in\mathcal{G}\times\mathcal{H}}\mathbb{E}_{h\sim p_{t},y \sim\mathrm{Ber}(\gamma)}\left[\tilde{g}(x_{t})(\ell(h(x_{t}),y)-\ell(\tilde{h} (x_{t}),y))\right]\] (17)

_and \(\epsilon_{t}(M)\) is the error incurred from estimating \(q_{t}\) with \(\tilde{q}_{t}\) with \(M\) samples at step \(t\in[T]\)._

Proof.: From the perspective of the \((\mathcal{G},\mathcal{H})\)-player, who is running a regret maximization algorithm, the following game is being played. For \(t=1,2,3,\ldots,T\):

* Receive a context \(x_{t}\in\mathcal{X}\) from Nature, possibly adversarially and depending on the past \(t-1\) rounds.
* Play a pair \((\tilde{h}_{t},\tilde{g}_{t})\in\mathcal{H}\times\mathcal{G}\), possibly randomly and dependent on the last \(t-1\) rounds, where pairs are functions \[(h,g):\mathcal{X}\rightarrow\mathcal{Y}\times\{0,1\}.\]
* Commit to the action \(\tilde{g}_{t}:=(\tilde{h}_{t}(x_{t}),\tilde{g}_{t}(x_{t}))\in\mathcal{Y} \times\{0,1\}.\)* An adversary (the \(\mathcal{H}\)-player's prediction _and_ Nature) reveals \((\hat{y}_{t},y_{t})\in\mathcal{Y}\times\mathcal{Y}\), and we incur the loss: \[\tilde{\ell}((\tilde{g},\tilde{h}),(\hat{y}_{t},y_{t})):=\tilde{g}(x_{t}) \left(\ell(\hat{y}_{t},y_{t})-\ell(\tilde{h}_{t}(x_{t}),y_{t})\right).\] Here, \(\hat{y}_{t}=h_{t}(x_{t})\), which is a random variable depending on sampling from \(p_{t}\), the Bernoulli distribution of the \(\mathcal{H}\)-player at round \(t\).

Note that the \((\mathcal{G},\mathcal{H})\)-player is attempting to _maximize_ this loss.

Let \(h_{1},\ldots,h_{T}\) be the sequence of hypotheses chosen by the \(\mathcal{H}\)-player, and let \(y_{1},\ldots,y_{T}\) be the sequence of adversarially chosen outcomes. Then, by the regret guarantee of the \((\mathcal{G},\mathcal{H})\)-player's no-regret algorithm algorithm, for any \((h^{*},g^{*})\in\mathcal{H}\times\mathcal{G}\):

\[\sum_{t=1}^{T}\mathbb{E}\left[\tilde{\ell}((g^{*},h^{*}),(h_{t}(x_{t}),y_{t}) )\right]-\sum_{t=1}^{T}\mathbb{E}_{(\tilde{y}_{t},\tilde{h}_{t})\sim q_{t}} \left[\tilde{\ell}((\tilde{g}_{t},\tilde{h}_{t}),(h_{t}(x_{t}),y_{t}))\right] \leq R(T),\]

where the expectation is over the distributions \(q_{t}\) over \(\Delta(\mathcal{H}\times\mathcal{G})\) that the \((\mathcal{G},\mathcal{H})\)-player commits to at each round _and_ the random choices of Nature and the \(\mathcal{H}\)-player's random choice of \(\hat{y}_{t}\) at each round. To ease notation, we keep the subscript in the expectation over \(h_{t}\) hidden, noting that \(h_{t}(x_{t})\sim p_{t}\) is a random variable throughout. For instance, in the case of Theorem 4.1, this is a random process determined by the \((\mathcal{G},\mathcal{H})\)-player sampling \(n\) perturbation terms and calling the \((\mathcal{G},\mathcal{H})\)-oracle to obtain the random variable \((\tilde{g}_{t},\tilde{h}_{t})\). Instantiating the regret bound for all \((h^{*},g^{*})\) gives us:

\[\max_{(h^{*},g^{*})\in\mathcal{H}\times\mathcal{G}}\sum_{t=1}^{T}\mathbb{E} \left[\tilde{\ell}((g^{*},h^{*}),(h_{t}(x_{t}),y_{t}))\right]\leq\sum_{t=1}^{ T}\mathbb{E}_{(\tilde{g}_{t},\tilde{h}_{t})\sim q_{t}}\left[\tilde{\ell}(( \tilde{g}_{t},\tilde{h}_{t}),(h_{t}(x_{t}),y_{t}))\right]+R(T).\]

However, we do not have direct access to \(q_{t}\), the implicit distribution over \(\mathcal{G}\times\mathcal{H}\), but we have an approximation \(\tilde{q}_{t}\). In Algorithm 2, \((\tilde{g}_{t},\tilde{h}_{t})\) is drawn according to \(\tilde{q}_{t}\), the empirical distribution over \(\Delta(\mathcal{H}\times\mathcal{G})\) formed by drawing \(M\) samples \(\{(\tilde{h}_{t}^{(i)},\tilde{g}_{t}^{(i)}\}_{i=1}^{M}\) from \(\tilde{q}_{t}\). Fixing \(x_{t},y_{t}\), and \(h_{t}(x_{t})\), let \(\epsilon_{t}(M)\) be the error we incur from replacing the true distribution \(q_{t}\) by the empirical distribution \(\tilde{q}_{t}\), which we can handle through uniform convergence on the samples \(\{(\tilde{h}_{t}^{(i)},\tilde{g}_{t}^{(i)}\}_{i=1}^{M}\) (see Lemma B.6):

\[\left|\mathbb{E}_{(\tilde{g},\tilde{h})\sim\tilde{q}_{t}}[\tilde{\ell}((\tilde {g},\tilde{h}),(h_{t}(x_{t}),y_{t}))]-\mathbb{E}_{(g,h)\sim q_{t}}[\tilde{ \ell}((g,h),(h_{t}(x_{t}),y_{t}))]\right|\leq\epsilon_{t}(M).\]

Adding the estimation error at each \(t\in[T]\), our regret bound becomes:

\[\max_{(h^{*},g^{*})\in\mathcal{H}\times\mathcal{G}} \sum_{t=1}^{T}\mathbb{E}\left[\tilde{\ell}((g^{*},h^{*}),(h_{t}(x_ {t}),y_{t}))\right]\leq\sum_{t=1}^{T}\mathbb{E}_{(\tilde{g}_{t},\tilde{h}_{t })\sim q_{t}}\left[\tilde{\ell}((\tilde{g}_{t},\tilde{h}_{t}),(h_{t}(x_{t}),y_ {t}))\right]+R(T)\] \[\leq\sum_{t=1}^{T}\mathbb{E}_{(\tilde{g}_{t},\tilde{h}_{t})\sim \tilde{q}_{t}}\left[\tilde{\ell}((\tilde{g}_{t},\tilde{h}_{t}),(h_{t}(x_{t}),y_ {t}))\right]+\sum_{t=1}^{T}\epsilon_{t}(M)+R(T).\]

Now, we aim to bound the terms \(\mathbb{E}_{(\tilde{g}_{t},\tilde{h}_{t})\sim\tilde{q}_{t}}\left[\tilde{\ell}(( \tilde{g}_{t},\tilde{h}_{t}),(h_{t}(x_{t}),y_{t}))\right]\). At round \(t\in[T]\), Algorithm 4 chooses the best response \(h_{t}\in\mathcal{H}\) by solving a linear program for a Bernoulli parameter \(p\) and then sampling \(h\) from \(\mathrm{Ber}(p)\). This is equivalent to sampling \(h_{t}(x_{t})\sim p_{t}\), where \(p_{t}:=(p,1-p)\) on \(\Delta(\mathcal{Y})\). We use sampling from this Bernoulli distribution and sampling from \(p_{t}\) interchangeably. By Lemma B.3, this is equivalent to solving the min-max optimization problem in Equation (15)

\[p_{t}\in\operatorname*{arg\,min}_{p\in\Delta(\mathcal{Y})}\max_{\gamma\in[0,1]} \mathbb{E}_{(\tilde{g}_{t},\tilde{h}_{t})\sim\tilde{q}_{t}}\left[r_{t}^{(\tilde{ g}_{t},\tilde{h}_{t})}(p,\gamma)\right],\]

which, by definition of \(r_{t}^{(\tilde{g},\tilde{h})}(p,\gamma)\), is equivalent to:

\[p_{t}\in\operatorname*{arg\,min}_{p_{t}\in\Delta(\mathcal{Y})}\max_{\gamma\in[0, 1]}\mathbb{E}_{(\tilde{g}_{t},\tilde{h}_{t})\sim\tilde{q}_{t}}\left[\mathbb{E}_{ h_{t}(x_{t})\sim p_{t}}\mathbb{E}_{y\sim\mathrm{Ber}(\gamma)}\left[\tilde{g}_{t}(x_ {t})\left(\ell(h_{t}(x_{t}),y)-\ell(\tilde{h}_{t}(x_{t}),y))\right)\right] \right].\] (18)

The inner expectations are linear in \(p_{t}\) and \(\gamma\), and taking the outer expectation over \(\tilde{q}_{t}\) maintains linearity. Therefore, this is a convex and concave min-max optimization problem, and von Neumann'sminimax theorem [10] applies, allowing us to swap the order of minimization and maximization. Therefore

\[\min_{p_{t}\in\Delta(\mathcal{Y})}\max_{\gamma\in[0,1]}\mathbb{E}_{( \tilde{g}_{t},\tilde{h}_{t})\sim\tilde{q}_{t}}\left[\mathbb{E}_{h_{t}(x_{t}) \sim p_{t}}\mathbb{E}_{y\sim\mathrm{Ber}(\gamma)}\left[\tilde{g}_{t}(x_{t}) \left(\ell(h_{t}(x_{t}),y)-\ell(\tilde{h}_{t}(x_{t}),y)\right)\right)\right]\right]\] \[=\max_{\gamma\in[0,1]}\min_{p_{t}\in\Delta(\mathcal{Y})}\mathbb{E }_{(\tilde{g}_{t},\tilde{h}_{t})\sim\tilde{q}_{t}}\left[\mathbb{E}_{h_{t}(x_{t })\sim p_{t}}\mathbb{E}_{y\sim\mathrm{Ber}(\gamma)}\left[\tilde{g}_{t}(x_{t}) \left(\ell(h_{t}(x_{t}),y)-\ell(\tilde{h}_{t}(x_{t}),y)\right)\right)\right]\right]\] \[\leq\max_{\gamma\in[0,1]}\min_{p_{t}\in\Delta(\mathcal{Y})}\max_{ (\tilde{g},\tilde{h})\in\mathcal{G}\times\mathcal{H}}\mathbb{E}_{h_{t}(x_{t}) \sim p_{t},y\sim\mathrm{Ber}(\gamma)}\left[\tilde{g}(x_{t})\left(\ell(h_{t}(x_{ t}),y)-\ell(\tilde{h}(x_{t}),y)\right)\right]=v_{t}^{A}\]

where the first equality is from the minimax theorem and the second inequality is just because averages are less than or equal to maximums. Combining all the inequalities, we obtain

\[\max_{(h^{*},g^{*})\in\mathcal{H}\times\mathcal{G}}\sum_{t=1}^{T}\tilde{\ell}( (g^{*},h^{*}),(h_{t}(x_{t}),y_{t}))\leq\sum_{t=1}^{T}v_{t}^{A}+\sum_{t=1}^{T} \epsilon_{t}(M)+R(T),\]

and our theorem follows from taking an expectation on both sides and substituting back the definition of

\[\tilde{\ell}((g^{*},h^{*}),(h(x_{t}),y_{t})):=g^{*}(x_{t})\left(\ell(h(x_{t}),y_{t})-\ell(h^{*}(x_{t}),y_{t})\right),\]

because each \(\tilde{\ell}((g^{*},h^{*}),(h(x_{t}),y_{t}))\) is simply the per-round regret. 

With Theorem B.4 in hand, it remains to make sure that the two terms \(\sum_{t=1}^{T}v_{t}^{A}\) and \(\sum_{t=1}^{T}\mathbb{E}[\epsilon_{t}(M)]\) are both \(o(T)\). Then, if we have a no-regret algorithm with \(o(T)\) regret while only accessing \(\mathcal{G}\) and \(\mathcal{H}\) through the \(\mathrm{OPT}_{(\mathcal{G},\mathcal{H})}^{n}\) oracle, we will have a multi-group online learning algorithm. The next two lemmas show that both terms are, indeed, \(o(T)\).

First, we bound the values \(v_{t}^{A}\), which are known as the "AMF values" in the framework of [11].

**Lemma B.5**.: _For any \(t\in[T]\), the AMF value of the game at round \(t\), is nonpositive, i.e._

\[v_{t}^{A}:=\max_{\gamma\in[0,1]}\min_{p_{t}\in\Delta(\mathcal{H})}\max_{(h,g )\in\mathcal{H}\times\mathcal{G}}\mathbb{E}[g(x_{t})(\ell(h_{t}(x_{t}),y)-\ell (h(x_{t}),y))]\leq 0,\]

_where the expectation is taken over \(h_{t}\sim p_{t}\) and \(y\sim\mathrm{Ber}(\gamma)\)._

Proof.: Fix any parameter \(\gamma\in[0,1]\) for the \(\max\) player. Then, for any \((h,g)\in\mathcal{H}\times\mathcal{G}\),

\[\mathbb{E}\left[g(x_{t})(\ell(h_{t}(x_{t}),y)-\ell(h(x_{t}),y)) \right]= \gamma\mathbb{E}_{h_{t}\sim p_{t}}[g(x_{t})(\ell(h_{t}(x_{t}),1) -\ell(h(x_{t}),1))]\] \[+(1-\gamma)\mathbb{E}_{h_{t}\sim p_{t}}[g(x_{t})(\ell(h_{t}(x_{t }),-1)-\ell(h(x_{t}),-1))].\]

Expanding the expectation over \(h_{t}\sim p_{t}\), this is equivalent to:

\[g(x_{t})\sum_{h^{\prime}\in\mathcal{H}}p_{h^{\prime}}^{t}(\gamma\ell(h^{\prime }(x_{t}),1)+(1-\gamma)\ell(h^{\prime}(x_{t}),0))-g(x_{t})(\gamma\ell(h(x_{t}), 1)+(1-\gamma)\ell(h(x_{t}),0)),\]

so it suffices to find \(p_{t}\in\Delta(\mathcal{H})\) such that, for all \((h,g)\in\mathcal{H}\times\mathcal{G}\),

\[g(x_{t})\sum_{h^{\prime}\in\mathcal{H}}p_{h^{\prime}}^{t}(\gamma\ell(h^{\prime }(x_{t}),1)+(1-\gamma)\ell(h^{\prime}(x_{t}),0))\leq g(x_{t})(\gamma\ell(h(x_{ t}),1)+(1-\gamma)\ell(h(x_{t}),0)).\]

The \(g(x_{t})\) value is the same for both sides, so it really suffices to find the \(p_{t}\in\Delta(\mathcal{H})\) such that, for all \(h\in\mathcal{H}\),

\[p_{h^{\prime}}^{t}(\gamma\ell(h^{\prime}(x_{t}),1)+(1-\gamma)\ell(h^{\prime}(x_ {t}),0))\leq\gamma\ell(h(x_{t}),1)+(1-\gamma)\ell(h(x_{t}),0).\]

Because we know \(\gamma\), the Bernoulli parameter for the true distribution of \(y\mid x_{t}\), we can choose \(p^{t}\in\Delta(\mathcal{H})\) to put all its mass on the \(h^{*}\in\mathcal{H}\) that minimizes this risk, i.e.

\[h^{*}\in\operatorname*{arg\,min}_{h\in\mathcal{H}}\mathbb{E}_{y}[\ell(h(x_{t}),y )\mid x_{t}].\]

This is, by definition, exactly the \(h^{*}\) such that, for any \(h\in\mathcal{H}\),

\[\gamma\ell(h^{*}(x_{t}),1)+(1-\gamma)\ell(h^{*}(x_{t}),-1)\leq\gamma\ell(h(x_{t }),1)+(1-\gamma)\ell(h(x_{t}),-1).\]Therefore, we have that:

\[v_{t}^{A} =\max_{\gamma\in[0,1]}\min_{p_{t}\in\Delta(\mathcal{H})}\max_{(h,g) \in\mathcal{H}\times\mathcal{G}}\mathbb{E}_{h^{\wedge}\sim p_{t},y\sim\mathrm{ Ber}(\gamma)}[g(x_{t})(\ell(h^{\prime}(x_{t}),y)-\ell(h(x_{t}),y))]\] \[\leq\max_{\gamma\in[0,1],(h,g)\in\mathcal{H}\times\mathcal{G}} \mathbb{E}_{y\sim\mathrm{Ber}(\gamma)}[g(x_{t})(\ell(h^{*}(x_{t}),y)-\ell(h(x_{ t}),y))]\] \[\leq 0.\]

The final inequality follows from our argument above. 

Next, we bound the expected approximation error we incur from replacing \(q_{t}\) with the empirical distribution \(\tilde{q}_{t}\) obtained from the \(M\) samples \(\{(\tilde{g}_{t}^{(i)},\tilde{h}_{t}^{(i)})_{i=1}^{M},\) which we denoted as \(\epsilon_{t}(M).\) This comes from a standard uniform convergence argument.

**Lemma B.6**.: _Let \(t\in[T]\) and \(x_{t}\in\mathcal{X}\) be fixed, and consider the function \(\tilde{\ell}_{x_{t}}((g,h),(y^{\prime},y)):=g(x_{t})(\ell(y^{\prime},y)-\ell( h(x_{t}),y)).\) Let \(|\mathcal{Y}|=k<\infty.\) If \(M\geq T^{1+\delta}\), where \(\delta=\Omega(\frac{\log(\log T+\log k)}{\log T})\), then over the randomness of drawing \(M\) samples \(\{(\tilde{g}_{t}^{(i)},\tilde{h}_{t}^{(i)})_{i=1}^{M}\) to construct the empirical distribution \(\tilde{q}_{t}\) described in Definition B.4, for all \(y^{\prime},y\in\mathcal{Y}\), let \(\epsilon_{t}(M)\) be defined as the supremum_

\[\epsilon_{t}(M):=\sup_{(y^{\prime},y)\in\mathcal{Y}\times\mathcal{Y}}\left| \mathbb{E}_{(\tilde{y},\tilde{h})\sim\tilde{q}_{t}}[\tilde{\ell}_{x_{t}}(( \tilde{g},\tilde{h}),(y^{\prime},y))]-\mathbb{E}_{(g,h)\sim q_{t}}[\tilde{ \ell}_{x_{t}}((g,h),(y^{\prime},y))]\right|,\]

_and, over all \(T\) rounds,_

\[\mathbb{E}\left[\sum_{i=1}^{T}\epsilon_{t}(M)\right]\leq 2\sqrt{T}.\]

Proof.: Fix any round \(t\in[T].\) We use a standard uniform convergence argument to ensure that the empirical distribution \(\tilde{q}_{t}\) and the true distribution \(q_{t}\) are close for the function \(\tilde{\ell}_{x_{t}}((g,h),(y^{\prime},y))\) for all \(y^{\prime},y\in\mathcal{Y}.\) We assume that \(\mathcal{Y}\) is finite, and denote \(k:=|\mathcal{Y}|.\)

Let \(\{(\tilde{g}_{t}^{(i)},\tilde{h}_{t}^{(i)})_{i=1}^{M}\}\) denote the \(M\) random samples from \(\mathcal{G}\times\mathcal{H}.\) We note that the expectation over \(\tilde{q}_{t}\) is the same as:

\[\mathbb{E}_{(\tilde{g},\tilde{h})\sim\tilde{q}_{t}}\left[\tilde{\ell}((\tilde{ g},\tilde{h}),(y^{\prime},y))\right]=\frac{1}{M}\sum_{i=1}^{M}\tilde{\ell} \left((\tilde{g}_{t}^{(i)},\tilde{h}_{t}^{(i)}),(y^{\prime},y)\right).\]

Consider the empirical process

\[\sup_{(y^{\prime},y)\in\mathcal{Y}^{2}}\left|\frac{1}{M}\sum_{i=1}^{M}\underbrace {\tilde{\ell}((\tilde{g}_{t}^{(i)},\tilde{h}_{t}^{(i)}),(y^{\prime},y))- \mathbb{E}_{(g,h)\sim q_{t}}\left[\tilde{\ell}((g,h),(y^{\prime},y))\right]}_ {Z_{i}(y^{\prime},y)}\right|.\]

For notational simplicity, let us refer to this empirical process as:

\[\sup_{(y^{\prime},y)\in\mathcal{Y}^{2}}\left|\frac{1}{M}\sum_{i=1}^{M}Z_{i}(y ^{\prime},y)\right|=\epsilon_{t}(M).\]

Because \(\ell(\cdot,\cdot)\in[0,1]\), we know \(\tilde{\ell}\in[-1,1].\) Moreover, \(|\mathcal{Y}^{2}|=k^{2}.\) We can now use Hoeffding's inequality and a union bound to obtain:

\[\mathbb{P}\left[\sup_{(y^{\prime},y)\in\mathcal{Y}^{2}}\left|\frac{1}{M}\sum_ {i=1}^{M}Z_{i}(y^{\prime},y)\right|\geq\varepsilon\right]\leq k^{2}\exp(-2M \varepsilon^{2})\leq k^{2}\exp(-2T^{1+\delta}\varepsilon^{2}).\]By the elementary integral inequality \(\mathbb{E}[X]\leq\int_{0}^{\infty}\mathbb{P}[X\geq t]dt\), we obtain:

\[\mathbb{E}\left[\sup_{(y^{\prime},y)\in\mathcal{Y}^{2}}\left|\frac{ 1}{M}\sum_{i=1}^{M}Z_{i}(y^{\prime},y)\right|\right] \leq\int_{0}^{\infty}\mathbb{P}\left[\sup_{(y^{\prime},y)\in \mathcal{Y}^{2}}\left|\frac{1}{M}\sum_{i=1}^{M}Z_{i}(y^{\prime},y)\right|\geq t \right]dt\] \[\leq\int_{0}^{w}\mathbb{P}\left[\sup_{(y^{\prime},y)\in\mathcal{ Y}^{2}}\left|\frac{1}{M}\sum_{i=1}^{M}Z_{i}(y^{\prime},y)\right|\geq t \right]dt+\int_{w}^{\infty}k^{2}\exp(-2T^{1+\delta}t^{2})dt\] \[\leq w+\int_{w}^{\infty}k^{2}\exp(-2T^{1+\delta}t^{2})dt\] \[\leq w+k^{2}\exp(-2T^{1+\delta}w^{2}),\]

where \(w>0\) is an arbitrary parameter. Set \(w=\sqrt{\frac{1}{T}}\). If \(\delta\geq\frac{\log\left(2\log(k)+\frac{1}{\delta}\log(T)\right)}{2\log T}\), then:

\[\mathbb{E}\left[\sup_{(y^{\prime},y)\in\mathcal{Y}^{2}}\left|\frac{1}{M}\sum _{i=1}^{M}Z_{i}(y^{\prime},y)\right|\right]=\mathbb{E}[\epsilon_{t}(M)]\leq 2 \sqrt{\frac{1}{T}}.\]

Therefore, summing up over all \(T\) rounds, we obtain \(\sum_{t=1}^{T}\mathbb{E}[\epsilon_{t}(M)]\leq 2\sqrt{T}\). 

### Instantiating the meta-algorithm for Theorem 4.1

Finally, we instantiate Theorem B.4 with a concrete no-regret algorithm for the \((\mathcal{G},\mathcal{H})\)-player to obtain Theorem 4.1. We employ the specific no-regret algorithm of [1] for our \((\mathcal{G},\mathcal{H})\)-player, restated here for reference.

**Theorem B.7** (Smoothed FTPL of [1]).: _Let \(\mathcal{F}:\mathcal{X}\to[-1,1]\) be a function class and let \(\ell\) be a loss function that is \(L\)-Lipschitz in both arguments. Suppose further that we are in the smoothed online learning setting (see Section 4.1) where each \(x_{i}\) are drawn from a distribution that is \(\sigma\)-smooth with respect ot some base measure \(\mathcal{B}\) on \(\mathcal{X}\). Let_

\[\pi_{t,n}(f):=\sum_{i=1}^{n}\frac{f(z_{i,i})\gamma_{i,i}}{\sqrt{n}},\]

_where \(z_{t,i}\sim\mathcal{B}\) are independent and the \(\gamma_{t,i}\) are independent standard Gaussian variables. Suppose that \(\alpha\geq 0\) and consider the algorithm which uses an \(\alpha\)-approximate oracle for \(\mathcal{F}\) (see Definition 2.1) to choose \(f_{t}\) according to_

\[\sum_{s=1}^{t-1}\ell(f_{t}(x_{s}),y_{s})+\eta\pi_{t,n}(f_{t})\leq\inf_{f^{*} \in\mathcal{F}}\sum_{s=1}^{t-1}\ell(f^{*}(x_{s}),y_{s})+\pi_{t,n}(f^{*})+\alpha,\]

_and let \(\hat{y}_{t}=f_{t}(x_{t})\). If \(\mathcal{F}\) and \(y_{t}\) are binary valued, with the VC dimension of \(\mathcal{F}\) bounded by \(d\geq 1\), then for \(n=T/\sqrt{\sigma}\) and \(\eta=\sqrt{\frac{T\log(TL/\sigma)}{\sigma}}\)_

\[\mathbb{E}[\mathrm{Reg}_{T}(f_{t})]\leq C\left(\sqrt{\frac{dT\log T}{\sigma}}+ \alpha T\right),\]

_where \(C>0\) is some absolute constant._

This is precisely what the \((\mathcal{G},\mathcal{H})\)-player does in Algorithm 1. Let \(\mathcal{G}:=\{g\subseteq\mathcal{X}:g\in\mathcal{G}\}\) be a collection of groups, represented as Boolean functions \(g:\mathcal{X}\to\{0,1\}\). Let \(\mathcal{H}\) be a hypothesis class of binary-valued functions \(h:\mathcal{X}\to\{-1,1\}\). To be clear, the we map Theorem B.7 to our Algorithm 1 in the following way:

* Let \(\mathcal{F}\) of Theorem B.7 be the class of functions in \([-1,1]^{\mathcal{X}}\) defined by: \[\mathcal{F}:=\{x\mapsto\tilde{g}(x)\tilde{h}(x):\tilde{g}\in\mathcal{G}, \tilde{h}\in\mathcal{H}\}.\] Note that each \(f\in\mathcal{F}\) maps to \(\{-1,0,1\}\).

* Let the loss function in Theorem B.7 be the loss of the \((\mathcal{G},\mathcal{H})\)-player on \(x\in\mathcal{X}\): \[\tilde{\ell}((\tilde{g},\tilde{h}),(h(x),y)):=\tilde{g}(x)\left(\ell(h(x),y)- \ell(\tilde{h}(x),y)\right).\] In terms of \(\mathcal{F}\) above, we can rewrite this as: \[\tilde{\ell}(f(x),(y^{\prime},y)):=\begin{cases}0&\text{if }f(x)=0\\ \ell(y^{\prime},y)-\ell(-1,y)&\text{if }f(x)=-1\\ \ell(y^{\prime},y)-\ell(1,y)&\text{if }f(x)=1.\end{cases}\] This loss function has the signature \(\tilde{\ell}:\{-1,0,1\}\times\{-1,1\}^{2}\to[-1,1]\) because \(\ell(\cdot,\cdot)\in[0,1]\). It is also \(2\)-Lipschitz in both arguments.
* It remains to make sure that ternary-valued functions taking values in \(\{-1,0,1\}\) do not break the proof of Theorem B.7. In the proof of Theorem B.7 in [11], the binary-valued function case where \(f\) has range \(\{-1,1\}\) is handled by embedding \(\{-1,1\}\) into the real line. There are two main parts of the proof that rely on this assumption that \(f\) has range \(\{-1,1\}\) that easily maintain when \(f\) has range \(\{-1,0,1\}\).
* First, in Lemma 34 of [11], the authors use \(L\)-Lipschitzness and the simple fact that \(|f(x)-f^{\prime}(x)|\leq(f(x)-f^{\prime}(x))^{2}\) when \(f\in\{-1,1\}\). This still holds when \(f\in\{-1,0,1\}\).
* Second, [11] also use the fact that \(\|f\|_{L_{2}}=1\) for all \(f\in\mathcal{F}\), which is also true for \(f\in\{-1,0,1\}\). Finally, the rest of the proof in Lemma 35 of [11] relies only on the Lipschitzness of \(\tilde{\ell}\) to employ standard smoothness arguments and Rademacher contraction, which we have already established.
* Putting all this together, the \((\mathcal{G},\mathcal{H})\)-player in Algorithm 1 essentially runs the algorithm of B.7, with the caveat that it calls the \(\operatorname{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) oracle \(M\) times to get the empirical approximation \(\tilde{q}_{t}\) of the true implicit distribution \(q_{t}\) over \(\mathcal{G}\times\mathcal{H}\). This implicit distribution is defined by the random process of drawing the \(n\) perturbations and calling the optimization oracle.

Therefore, by Lemmas B.6, B.5, and Theorem B.7 applied to the "meta-theorem" Theorem B.4, we immediately obtain our main theorem, Theorem 4.1. We now restate Theorem 4.1 as Corollary B.7.1 with the specified choices of parameters.

**Corollary B.7.1** (Theorem 4.1, with parameters specified).: _Let \(\mathcal{Y}=\{-1,1\}\) be a binary action space, \(\mathcal{H}\subseteq\{-1,1\}^{\mathcal{X}}\) be a binary-valued hypothesis class, \(\mathcal{G}\subseteq 2^{\mathcal{X}}\) be a (possibly infinite) collection of groups, and \(\ell:\{-1,1\}\times\{-1,1\}\to[0,1]\) be a bounded loss function. Let the VC dimensions of \(\mathcal{H}\) and \(\mathcal{G}\) both be bounded by \(d\). Let \(\alpha\geq 0\) be the approximation error of the oracle \(\operatorname{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\). If we are in the \(\sigma\)-smooth online learning setting, then, for \(M\geq T^{1+\delta},\delta\geq\frac{\log\left(2\log(k)+\frac{1}{2}\log(T) \right)}{2\log T},n=T/\sqrt{\sigma},\) and \(\eta=\sqrt{\frac{T\log(T/\sigma)}{\sigma}}\), Algorithm 1 achieves, for each \(g\in\mathcal{G}\):_

\[\mathbb{E}[\operatorname{Reg}_{T}(\mathcal{H},g)]\leq\sqrt{\frac{dT\log T}{ \sigma}}+\alpha T,\]

_where the expectation is over all the randomness of the \((\mathcal{G},\mathcal{H})\)-player's perturbations and the \(\mathcal{H}\)-player's Bernoulli choices._

## Appendix C Other instantiations of the meta-algorithm

It is be clear from the statement of Theorem B.4 that our "meta-algorithm" Algorithm 4 straightforwardly applies for other online learning settings as well, so long as we adopt an appropriate strategy for the \((\mathcal{G},\mathcal{H})\)-player. In this section, we give a few examples of this flexibility for discrete action spaces in the smoothed online setting and the

### Multi-class action spaces

Instead of \(|\mathcal{Y}|=2\), we can let \(|\mathcal{Y}|=K\), more generally. In this case, a straightforward extension of Theorem B.7 allows us to embed \(\mathcal{Y}\cup\{0,1\}\) into the real line, and we generalize to considering the Natarajan dimension [14] of \(\mathcal{H}\) instead of the VC dimension. Rademacher contraction and Lipschitzness still apply to \(\tilde{\ell}\), so with just a difference in the absolute constant, we obtain the following multi-class analogue of Theorem 4.1 as a corollary. Thus, for the \((\mathcal{G},\mathcal{H})\)-player in Algorithm 1, we can just use the same exact algorithm outlined in Theorem B.7.

We make a small change to the \(\mathcal{H}\)-player in Algorithm 1. In the multi-class action space setting, we need to make \(K\) calls to the \(\mathrm{OPT}_{\mathcal{H}}\) oracle and solve a \(K\times K\) size linear program for the \(\mathcal{H}\)-player at each step. For completeness, we present the algorithm for the \(K\)-class action spaces here, as Algorithm 5.

```
0: Perturbation strength \(\eta>0\); number of \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) calls \(M\in\mathbb{N}\).
1:for\(t=1,2,3,\ldots,T\)do
2: Receive a context \(x_{t}\sim\mu_{t}\) from Nature.
3:for\(i=1,2,3,\ldots,M\)do
4:\((\mathcal{G},\mathcal{H})\)**-player:** Draw \(n\) hallucinated examples as in Equation (4) to construct \(\pi^{\mathrm{bin}}_{t,n}\).
5:\((\mathcal{G},\mathcal{H})\)**-player:** Using the entire history \(\{(\hat{y}_{s},y_{s})\}_{s=1}^{t-1}\) so far, call \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) to obtain \((\tilde{g}_{t}(i),\tilde{h}^{(i)}_{t})\in\mathcal{G}\times\mathcal{H}\) satisfying: \[\sum_{s=1}^{t-1}\tilde{\ell}_{x_{s}}((\tilde{g},\tilde{h}),(\hat{y }_{s},y_{s}))+\pi^{\mathrm{bin}}_{t,n}(\tilde{g},\tilde{h},\eta)\\ \geq\sup_{(g^{*},h^{*})\in\mathcal{G}\times\mathcal{H}}\sum_{s=1} ^{t-1}\tilde{\ell}_{x_{s}}((g^{*},h^{*}),(\hat{y}_{s},y_{s}))+\pi^{\mathrm{ bin}}_{t,n}(g^{*},h^{*},\eta)-\alpha\] (19)
6:endfor
7:\(\mathcal{H}\)**-player:** Call \(\mathrm{OPT}_{\mathcal{H}}\)\(K\) times on the singleton datasets \(\{(x_{t},k)\}\) for action \(k\in[K]\) with the 0-1 loss, obtaining: \[h^{\prime}_{k}\in\operatorname*{arg\,min}_{h^{\prime}\in\mathcal{H}}\mathbf{1 }\left\{h^{*}(x_{t})\neq k\right\}\]
8:\(\mathcal{H}\)**-player:** Using the \(M\) samples \(\{(\tilde{g}^{(i)}_{t},\tilde{h}^{(i)}_{t})\}_{i=1}^{M}\), construct the \(K\times K\) payoff matrix \(\tilde{L}\in[-1,1]^{K\times K}\) indexed by \((k,y)\in[K]\times[K]\): \[\tilde{L}_{k,y}:=\sum_{i=1}^{M}\tilde{\ell}_{x_{t}}((\tilde{g}^{(i)}_{t}, \tilde{h}^{(i)}_{t}),(h^{\prime}_{k}(x_{t}),y)).\]
9:\(\mathcal{H}\)**-player:** Solve the linear program \[\min_{\bm{p}\in\mathbb{R}^{K},\lambda\in\mathbb{R}} \lambda\] \[\mathrm{s.t.} \bm{p}^{\top}\tilde{L}e_{y}\leq\lambda\quad\forall y\in[K]\] \[\bm{p}_{k}\geq 0\quad\forall k\in[K]\] \[\sum\bm{p}_{i}=1\] (where \(e_{y}\) is the \(y\)-th coordinate vector in \(\mathbb{R}^{K}\))
10: Sample \(k\sim\bm{p}\), let \(h_{t}=h^{\prime}_{k}\).
11: Learner commits to the action \(\hat{y}_{t}=h_{t}(x_{t})\); Nature reveals \(y_{t}\).
12: Learner incurs the loss \(\ell(\hat{y}_{t},y_{t})\).
13:endfor ```

**Algorithm 5** Algorithm for Group Oracle Efficiency (multi-class)

**Theorem C.1**.: _Let \(\mathcal{Y}=\{1,\ldots,K\}\) be a \(K\)-class action space, \(\mathcal{H}\subseteq\mathcal{Y}^{\mathcal{X}}\) be a \(K\)-valued hypothesis class, \(\mathcal{G}\subseteq 2^{\mathcal{X}}\) be a (possibly infinite) collection of groups, and \(\ell:\mathcal{Y}\times\mathcal{Y}\rightarrow[0,1]\) be a bounded loss function. Let the Natarajan dimension [14] of \(\mathcal{H}\) and the VC dimension of \(\mathcal{G}\) both be bounded by \(d\). Let \(\alpha\geq 0\) be the approximation error of the oracle \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\). If we are in the \(\sigma\)-smooth online learning setting, then, for appropriate choices of \(M\in\mathbb{N},n\in\mathbb{N},\) and \(\eta>0\), Algorithm 5 achieves,_for each \(g\in\mathcal{G}\):_

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq O\left(\sqrt{\frac{dT\log T}{ \sigma}}+\alpha T\right),\]

_where the expectation is over all the randomness of the \((\mathcal{G},\mathcal{H})\)-player's perturbations._

### Group-dependent regret

In this section, we give the details on how to achieve the desired _group-dependent regret_ guarantees of Section 5. Throughout this section, for any \(g\in\mathcal{G}\), let \(T_{g}:=\sum_{t=1}^{T}g(x_{t})\). The results in this section hinge on the _GFTPL with small-loss bound_ algorithm of [22]. The main idea will be to instantiate the \((\mathcal{G},\mathcal{H})\)-player in our meta-algorithm, Algorithm 4 using the GFTPL with small-loss bound algorithm so Theorem B.4 allows us to directly inherit its regret guarantee. We quote the algorithm here, adapted to our setting, for reference. Throughout this section, we use the familiar notation from Section 4.2 of the main body:

\[\tilde{\ell}_{x}((\tilde{g},\tilde{h}),(y^{\prime},y)):=\tilde{g}(x)\left( \ell(y^{\prime},y)-\ell(\tilde{h}(x),y)\right),\] (20)

where \(\ell(\cdot,\cdot)\) is the fixed loss of the entire multi-group online learning setting.

```
0: Perturbation matrix \(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times N}\)
1: Draw i.i.d. vector \(\nu=(\nu^{(1)},\ldots,\nu^{(N)})\sim\mathrm{Lap}(1)^{N}\), i.e., \(p(\nu^{(i)})=\frac{1}{2}\exp(-|\nu^{(i)}|)\).
2:for\(t=1,2,3,\ldots,T\)do
3: Set \(\nu_{t}\leftarrow\frac{\nu}{\eta_{t}}\) where \(\eta_{t}>0\) is a parameter computed online.
4: Using the entire history up to \(t-1\) so far, call \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) to obtain \((\tilde{g},\tilde{h})\in\mathcal{G}\times\mathcal{H}\) satsiying: \[\sum_{s=1}^{t-1}\tilde{\ell}_{x_{s}}((\tilde{g},\tilde{h}),( \hat{y}_{s},y_{s}))+\langle\Gamma^{(\tilde{g},\tilde{h})},\nu_{t}\rangle\\ \geq\sup_{(g^{*},h^{*})\in\mathcal{G}\times\mathcal{H}}\sum_{s=1 }^{t-1}\tilde{\ell}_{x_{s}}((g^{*},h^{*}),(\hat{y}_{s},y_{s}))+\langle\Gamma^ {(\tilde{g},\tilde{h})},\nu_{t}\rangle-\alpha,\] (21) where \(\Gamma^{(\tilde{g},\tilde{h})}\) is the \((\tilde{g},\tilde{h})\)th row of \(\Gamma\).
5:endfor ```

**Algorithm 6** GFTPL with small-loss bound

In our setting, the classical FTPL algorithm of [10] draws \(|\mathcal{G}|\times|\mathcal{H}|\) independent perturbations at each round, which requires enumeration of both \(\mathcal{G}\) and \(\mathcal{H}\). In order to remedy this, the GFTPL algorithm of [11] uses a \(|\mathcal{G}||\mathcal{H}|\times N\) perturbation matrix \(\Gamma\) to generate dependent "shared randomness." The transformation \(\Gamma\) applies to a perturbation vector \(\nu\in\mathbb{R}^{N}\), where \(N\) is much smaller than \(|\mathcal{G}||\mathcal{H}|\). Running FTPL with these perturbations, then, results on an oracle-efficient algorithm. [22] extends this by showing that, under certain conditions on \(\Gamma\), this oracle-efficient algorithm can also achieve a _small-loss regret_, where the regret diminishes based on the total magnitude of the losses over the \(T\) rounds instead of the number of rounds.

Specifically, a _small loss regret_ looks like the following. It is well-known that, in the worst-case, a regret of \(O\left(\sqrt{T\log|\mathcal{G}||\mathcal{H}|}\right)\) is minimax optimal [10]. However, stronger bounds have been obtained for problems with "small losses" (see, e.g., [12, 10, 11]), where, for a loss function \(f:(\mathcal{G}\times\mathcal{H})\times\mathcal{Y}\rightarrow[0,1]\), one can achieve:

\[O\left(\sqrt{\sum_{t=1}^{T}f((h_{t},g_{t}),y_{t})\log|\mathcal{H}||\mathcal{G }|}\right),\]

which is sharper than the \(O\left(\sqrt{T\log|\mathcal{H}||\mathcal{G}|}\right)\) bound when \(f((h_{t},g_{t}),y_{t})<1\) on some rounds. We desire this property to achieve a regret bound in the multi-group online learning setting that is sublinear in terms of the number of rounds a group appears \(T_{g}\).

Following [12], we require the perturbation matrix \(\Gamma\) to have two sufficient conditions for Algorithm 6 to obtain the desired small-loss regret. The first is \(\gamma\)-approximability, which is a condition that ensures the stability choices of \((\tilde{g}_{t},\tilde{h}_{t})\) and \((\tilde{g}_{t+1},\tilde{h}_{t+1})\) across rounds. In particular, the stability needed is a bound on the ratio:

\[\frac{\mathbb{P}[(\tilde{g}_{t},\tilde{h}_{t})=(g,h)]}{\mathbb{P}[(\tilde{g}_{t +1},\tilde{h}_{t+1})=(g,h)]}\leq\exp(\gamma\eta_{t})\]

for all \((g,h)\in\mathcal{G}\times\mathcal{H},\) where \(\eta_{t}>0\) is the per-round learning rate of GFTPL. By Lemma 2 of [12], the following condition is sufficient to ensure this property. We restate it here, translated to our setting.

**Definition C.1** (\(\gamma\)-approximability [12]).: _Let \(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times N}\), where \(N\) is the dimension of the noise vector, \(\nu\) in Algorithm 6. Define \(B_{\gamma}^{1}:=\{s\in\mathbb{R}^{N}:\|s\|_{1}\leq\gamma\}\). \(\Gamma\) is \(\gamma\)-approximable if, for all \((g,h)\in\mathcal{G}\times\mathcal{H}\) and \((x,y^{\prime},y)\in\mathcal{X}\times\mathcal{Y}\times\mathcal{Y}\), there exists \(s\in\mathbb{R}^{N}\) with \(\|s\|_{1}\leq\gamma\) such that the following holds for all \((g^{\prime},h^{\prime})\in\mathcal{G}\times\mathcal{H}\):_

\[\langle\Gamma^{(g,h)}-\Gamma^{(g^{\prime},h^{\prime})},s\rangle\geq\tilde{ \ell}_{x}((g,h),(y^{\prime},y))-\tilde{\ell}_{x}((g^{\prime},h^{\prime}),(y^{ \prime},y)).\]

The second property is implementability. This property actually allows us to use our optimization oracle (in our case, \(\operatorname{OPT}_{(\mathcal{G},\mathcal{H})}^{\alpha}\)) to access \(\Gamma\) without explicitly representing it. In essence, it requires that we can generate a small number of "fake examples" that effectively implement the perturbation needed by Algorithm 6.

**Definition C.2** (Implementability [13]).: _A matrix \(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times N}\) is implementable with complexity \(M\) if for each \(j\in[N]\) there exists a dataset \(S_{j}\) with \(|S_{j}|\leq M\) such that, for all pairs of rows \((g,h),(g^{\prime},h^{\prime})\in\mathcal{G}\times\mathcal{H}\),_

\[\Gamma^{((g,h),j)}-\Gamma^{((g^{\prime},h^{\prime}),j)}=\sum_{(w,(x,y,y^{ \prime}))\in S_{j}}w\left(\tilde{\ell}_{x}((\tilde{g},\tilde{h}),(y^{\prime}, y))-\tilde{\ell}_{x}((\tilde{g}^{\prime},\tilde{h}^{\prime}),(y^{\prime},y)) \right).\]

In the above definition, the fake examples are tuples of a context \(x\in\mathcal{X}\) and two outcomes \(y,y^{\prime}\in\mathcal{Y}\). Finally, with the sufficient conditions of implementability and approximability, we quote the main regret guarantee of Algorithm 6in [12] here.

**Theorem C.2** (Regret guarantee of 6 [12]).: _Let \(\{1,\dots,K\}\) be the action space of the Learner and let \(\mathcal{Z}\) be the action space of the adversary. Suppose that, at each round, the Learner chooses action \(x_{t}\in[K]\), the adversary chooses action \(z_{t}\in\mathcal{Z}\), and the loss function is \(f:[K]\times\mathcal{Z}\to[0,1]\). Let \(L_{T}^{*}=\min_{k\in[K]}\sum_{t=1}^{T}f(k,y_{t})\). Then, if there exists a \(\gamma\)-approximable matrix \(\Gamma\), Algorithm 6 instantiated with \(\Gamma\) and \(\eta_{t}:=\min\left\{\frac{1}{\gamma},\frac{C}{\sqrt{L_{t-1}^{*}+1}}\right\}\) achieves the following regret bound:_

\[\mathbb{E}[\operatorname{Reg}_{T}] \leq\left(\frac{4\sqrt{2}\max\{2\log K,\sqrt{N\log K}\}}{C}+2 \gamma\left(C+\frac{1}{C}\right)\right)\sqrt{L_{T}^{*}+1}\] \[+8\gamma\log\left(\frac{1}{C}\sqrt{L_{T}^{*}+1}+\gamma\right)+2 \gamma^{2}+4\sqrt{2}\max\{2\log K,\sqrt{N\log K}\}\gamma.\]

_With an appropriate choice of \(C>0\), we may obtain the regret bound:_

\[O\left(\sqrt{L_{T}^{*}}\max\left\{\gamma,\log K,\sqrt{N\log K}\right\}\right)\] (22)

_If \(\Gamma\) is also implementable with complexity \(M\), then Algorithm 6 is oracle-efficient, making \(O(T+NM)\) oracle calls per round, where \(N\) is the number of columns of \(\Gamma\)._

Finally, we need one more lemma using a standard uniform convergence argument to bound the approximation error from sampling with \(\operatorname{OPT}_{(\mathcal{G},\mathcal{H})}^{\alpha}M\) times. This is essentially the same as Lemma B.6, but we obtain a sharper bound on \(\mathbb{E}\left[\sum_{t=1}^{T}\epsilon_{t}(M)\right]\) at the cost of making polynomially (in \(T\)) more calls to the oracle.

**Lemma C.3**.: _Let \(t\in[T]\) and \(x_{t}\in\mathcal{X}\) be fixed, and consider the function \(\tilde{\ell}_{x_{t}}((g,h),(y^{\prime},y)):=g(x_{t})(\ell(y^{\prime},y)-\ell(h( x_{t}),y))\). Let \(|\mathcal{Y}|=k<\infty\). If \(M\geq T^{2}\log(k^{2}T)\), then over the randomness of drawing \(M\) samples \(\{(\tilde{g}_{t}^{(i)},\tilde{h}_{t}^{(i)})_{i=1}^{M}\}\) to construct the empirical distribution \(\tilde{q}_{t}\) described in Definition B.4, for all \(y^{\prime},y\in\mathcal{Y}\), let \(\epsilon_{t}(M)\) be defined as the supremum_

\[\epsilon_{t}(M):=\sup_{(y^{\prime},y)\in\mathcal{Y}\times\mathcal{Y}}\left| \mathbb{E}_{(\tilde{g},\tilde{h})\sim\tilde{q}_{t}}[\tilde{\ell}_{x_{t}}(( \tilde{g},\tilde{h}),(y^{\prime},y))]-\mathbb{E}_{(g,h)\sim q_{t}}[\tilde{ \ell}_{x_{t}}((g,h),(y^{\prime},y))]\right|,\]

_and, over all \(T\) rounds,_

\[\mathbb{E}\left[\sum_{i=1}^{T}\epsilon_{t}(M)\right]\leq 2.\]

Proof.: The proof of this lemma follows the proof of Lemma B.6 exactly, except for the choice of \(M\). Therefore, just using the exact same notation as Lemma B.6, we have:

\[\mathbb{P}\left[\sup_{(y^{\prime},y)\in\mathcal{Y}^{2}}\left|\frac{1}{M}\sum_ {i=1}^{M}Z_{i}(y^{\prime},y)\right|\geq\varepsilon\right]\leq k^{2}\exp(-2M \varepsilon^{2})\]

By the same exact argument using \(\mathbb{E}[X]\leq\int_{0}^{\infty}\mathbb{P}[X\geq t]dt\), we obtain

\[\mathbb{E}\left[\sup_{(y^{\prime},y)\in\mathcal{Y}^{2}}\left|\frac{1}{M}\sum_ {i=1}^{M}Z_{i}(y^{\prime},y)\right|\right]\leq w+k^{2}\exp(-2Mw^{2}),\]

where \(w>0\) is an arbitrary parameter. Set \(w=\frac{1}{T^{2}}\). Then, if \(M\geq T^{2}\log(kT)\), we get

\[\mathbb{E}[\epsilon_{t}(M)]=\mathbb{E}\left[\sup_{(y^{\prime},y)\in\mathcal{Y }^{2}}\left|\frac{1}{M}\sum_{i=1}^{M}Z_{i}(y^{\prime},y)\right|\right]\leq 2/T.\]

The lemma follows from summing over \(T\). 

Proof of Theorem 5.1.: We can now prove Theorem 5.1. The main idea is that the small loss regret translates directly into a \(o(T_{g})\) regret due to how we defined our loss function, \(\tilde{\ell}_{x}\), so we simply instantiate the \((\mathcal{G},\mathcal{H})\)-player in the general algorithm template of Algorithm 4 with Algorithm 6. This allows us to directly inherit the \(o(T_{g})\) regret guarantee. We restate it here, with parameters specified, as Proposition C.3.1. 

**Proposition C.3.1** (Theorem 5.1, with parameters specified).: _Assume \(\mathcal{H},\mathcal{G}\) are finite and there exists a \(\gamma\)-approximable and implementable perturbation matrix \(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times N}\). Let \(|\mathcal{Y}|=k\). Let \(\alpha\geq 0\) be the approximation parameter of \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\). Let the no-regret algorithm for the \((\mathcal{G},\mathcal{H})\)-player in Algorithm 1 be the GFTPL algorithm of [12] instantiated with \(\Gamma\), with parameter \(M=T^{2}\log(k^{2}T)\). Then, for each \(g\in\mathcal{G}\):_

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq O\left(\sqrt{T_{g}}\max\left\{ \gamma,\log|\mathcal{H}||\mathcal{G}|,\sqrt{N\log|\mathcal{H}||\mathcal{G}|} \right\}+\alpha T\right)\]

Proof.: Armed with approximability and implementability, we are ready to prove Theorem 5.1. Suppose that there exists a \(\gamma\)-approximable and implementable perturbation matrix \(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times N}\). In the setting of Theorem C.2, we instantiate \(K=|\mathcal{G}||\mathcal{H}|\), \(\mathcal{Z}=\mathcal{X}\times\mathcal{Y}\times\mathcal{Y}\), and the loss function \(f(\cdot,\cdot)\) as:

\[f((g,h),(x,y^{\prime},y)):=\tilde{\ell}_{x}((g,h),(y^{\prime},y))=g(x)\left( \ell(y^{\prime},y)-\ell(h(x),y)\right).\]Observe that, with the loss instantiated as \(\tilde{\ell}_{x}\), we have:

\[L_{T}^{*} =\min_{(g,h)\in\mathcal{G}\times\mathcal{H}}\sum_{t=1}^{T}\tilde{ \ell}_{x}((g,h),(x_{t},y_{t}^{\prime},y_{t}))\] \[\leq\sum_{t=1}^{T}\tilde{\ell}_{x}((g,h),(x_{t},y_{t}^{\prime},y_{ t}))\quad\text{ for all }(g,h)\in\mathcal{G}\times\mathcal{H}\] \[=\sum_{t=1}^{T}g(x_{t})(\ell(y_{t}^{\prime},y_{t})-\ell(h(x_{t}), y_{t}))\quad\text{ for all }(g,h)\in\mathcal{G}\times\mathcal{H}.\] \[\leq\sum_{t=1}^{T}g(x_{t})=T_{g},\]

for all \(g\in\mathcal{G}\). The last inequality just comes from the fact that \(\ell(\cdot,\cdot)\in[0,1]\). By directly applying Theorem C.2, we obtain the regret guarantee for Algorithm 6 of

\[\mathbb{E}[\mathrm{Reg}_{T}] \leq O\left(\sqrt{L_{T}^{*}}\max\left\{\gamma,\log|\mathcal{G}|| \mathcal{H}|,\sqrt{N\log|\mathcal{G}||\mathcal{H}|}\right\}\right)\] \[\leq O\left(\sqrt{T_{g}}\max\left\{\gamma,\log|\mathcal{G}|| \mathcal{H}|,\sqrt{N\log|\mathcal{G}||\mathcal{H}|}\right\}\right).\]

However, this is just the regret guarantee of Algorithm 6, not the regret guarantee of our end-to-end multi-group online learning algorithm, Algorithm 1. We replace the algorithm of [11] in Algorithm 1 with Algorithm 6. That is, we use the Algorithm 6 for the \((\mathcal{G},\mathcal{H})\)-player in Algorithm 4; a full description of this substitution is in Algorithm 7. By our meta-theorem, Theorem B.4, this entire algorithm achieves the multi-group regret guarantee, for all \(g\in\mathcal{G}\):

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)] \leq\sum_{t=1}^{T}v_{t}^{A}+\sum_{t=1}^{T}\mathbb{E}[\epsilon_{t} (M)]+R(T).\] (23) \[\leq\sum_{t=1}^{T}\mathbb{E}[\epsilon_{t}(M)]+O\left(\sqrt{T_{g}} \max\left\{\gamma,\log|\mathcal{G}||\mathcal{H}|,\sqrt{N\log|\mathcal{G}|| \mathcal{H}|}\right\}\right).\] (24)

Equation (24) follows from applying Lemma B.5 and using the regret bound for Algorithm 6 established above. It remains to ensure that \(\sum_{t=1}^{T}\mathbb{E}[\epsilon_{t}(M)]\leq o(T_{g})\). Simply applying Lemma B.6 results in \(\sum_{t=1}^{T}\mathbb{E}[\epsilon_{t}(M)]=2\sqrt{T}\), which is insufficient for our purposes. Instead, we use Lemma C.3, which ensures that \(\sum_{t=1}^{T}\mathbb{E}[\epsilon_{t}(M)]\leq O(1)\) at the cost of increasing \(M\) to be \(M\geq T^{2}\log(k^{2}T)\), making polynomially more oracle calls to \(\mathrm{OPT}_{(\mathcal{G},\mathcal{H})}^{\alpha}\) per-round. This gives us the final regret guarantee of

\[\mathbb{E}[\mathrm{Reg}_{T}(\mathcal{H},g)]\leq 2+O\left(\sqrt{T_{g}}\max\left\{ \gamma,\log|\mathcal{G}||\mathcal{H}|,\sqrt{N\log|\mathcal{G}||\mathcal{H}|} \right\}\right),\]

as desired. 

One possible setting in which a \(\Gamma\) matrix is easily constructible is the _transductive setting_. Here, we explicitly show how to construct \(\Gamma\) to obtain Corollary 5.1.1.

Proof of Corollary 5.1.1.: Let \(X\subseteq\mathcal{X}\) be the set the adversary fixes beforehand in the transductive setting, where \(N:=|X|\). We can construct a 1-approximable and implementable \(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times 4N}\) by creating a row for each \((g,h)\in\mathcal{G}\times\mathcal{H}\) and a column for each \((x,y,y^{\prime})\in X\times\mathcal{Y}\times\mathcal{Y}\), and setting each entry as

\[\Gamma^{((g,h),(x,y,y^{\prime}))}:=\tilde{\ell}_{x}((g,h),(y^{\prime},y)).\]```
0: Perturbation matrix \(\Gamma\in[-1,1]^{|\mathcal{G}||\mathcal{H}|\times N}\); number of \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) calls \(M\in\mathbb{N}\).
1:for\(t=1,2,3,\ldots,T\)do
2: Receive a (possibly adversarial) context \(x_{t}\sim\mu_{t}\) from Nature.
3:for\(i=1,2,3,\ldots,M\)do
4:\((\mathcal{G},\mathcal{H})\)-player: Draw i.i.d. vector \(\nu=(\nu^{(1)},\ldots,\nu^{(N)})\sim\mathrm{Lap}(1)^{N}\), i.e., \(p(\nu^{(i)})=\frac{1}{2}\exp(-|\nu^{(i)}|)\).
5:\((\mathcal{G},\mathcal{H})\)-player: Set \(\nu_{t}\leftarrow\frac{\nu}{\eta_{t}}\) where \(\eta_{t}:=\min\left\{\frac{1}{\gamma},\frac{C}{\sqrt{L_{t-1}^{*}+1}}\right\}\).
6:\((\mathcal{G},\mathcal{H})\)-player: Using the entire history \(\{(\hat{y}_{s},y_{s})\}_{s=1}^{t-1}\) so far, call \(\mathrm{OPT}^{\alpha}_{(\mathcal{G},\mathcal{H})}\) to obtain \((\tilde{g},\tilde{h})\in\mathcal{G}\times\mathcal{H}\) satisfying: \[\sum_{s=1}^{t-1}\tilde{\ell}_{x_{s}}((\tilde{g},\tilde{h}),( \hat{y}_{s},y_{s}))+\langle\Gamma^{(\tilde{g},\tilde{h})},\nu_{t}\rangle\\ \geq\sup_{(g^{*},h^{*})\in\mathcal{G}\times\mathcal{H}}\sum_{s=1} ^{t-1}\tilde{\ell}_{x_{s}}((g^{*},h^{*}),(\hat{y}_{s},y_{s}))+\langle\Gamma^{ (\tilde{g},\tilde{h})},\nu_{t}\rangle-\alpha,\] (25) where \(\Gamma^{(\tilde{g},\tilde{h})}\) is the \((\tilde{g},\tilde{h})\)th row of \(\Gamma\).
7:endfor
8:\(\mathcal{H}\)-player: Call \(\mathrm{OPT}_{\mathcal{H}}\) twice on the singleton datasets \(\{(x_{t},-1)\}\) and \(\{(x_{t},1)\}\) with the 0-1 loss, obtaining: \[h^{\prime}_{1}\in\operatorname*{arg\,min}_{h^{*}\in\mathcal{H}}\mathbf{1}\left\{ h^{*}(x_{t})\neq 1\right\}\quad h^{\prime}_{-1}\in\operatorname*{arg\,min}_{h^{*} \in\mathcal{H}}\mathbf{1}\left\{h^{*}(x_{t})\neq-1\right\}.\]
9:\(\mathcal{H}\)-player: Solve the linear program \[\min_{p,\lambda\in\mathbb{R}} \lambda\] \[\mathrm{s.t.} \sum_{i=1}^{M}p\tilde{\ell}_{x_{t}}((\tilde{g}_{t}^{(i)},\tilde{ h}_{t}^{(i)}),(h^{\prime}_{1}(x_{t}),y))+(1-p)\tilde{\ell}_{x_{t}}((\tilde{g}_{t}^ {(i)},\tilde{h}_{t}^{(i)}),(h^{\prime}_{-1}(x_{t}),y))\leq\lambda\quad\forall y \in\{-1,1\}\] \[0\leq p\leq 1.\]
10: Sample \(b\sim\mathrm{Ber}(p)\) where \(b\in\{-1,1\}\), let \(h_{t}=h^{\prime}_{b}\).
11: Learner commits to the action \(\hat{y}_{t}=h_{t}(x_{t})\); Nature reveals \(y_{t}\).
12: Learner incurs the loss \(\ell(\hat{y}_{t},y_{t})\).
13:endfor ```

**Algorithm 7** Algorithm for Group Oracle Efficiency (with GFTPL)

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The three main theorems of the paper and their respective problem settings are laid out in the abstract and Section 1.1, the Summary of Results section, of the introduction. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: We discuss the technical assumptions needed to design oracle-efficient algorithms in Sections 3, 4, and 5 (respectively, i.i.d. assumption, smooth assumption, and existence of perturbation matrix assumption). We also note that our work does not address group-dependent \(o(T_{g})\) regret for infinite \(\mathcal{G}\) and \(\mathcal{H}\), as mentioned in Section 6. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes]Justification: All theorems are formally stated in the main body and proved in the Appendix. Each main theorem, Theorem 3.2, Theorem 4.1, and Theorem 5.1, are stated in the main body and proven in the Appendix. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [NA] Justification: This is a theory paper, where the main contributions are towards novel algorithmic design principles for a learning-theoretic model. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [NA] Justification: This is a theory paper (see above).

Guidelines:

* The answer NA means that paper does not include experiments requiring code.
* Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details.
* While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).
* The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details.
* The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.
* The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.
* At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).
* Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [NA] Justification: This is a theory paper (see above). Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [NA] Justification: This is a theory paper (see above). Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors). * It should be clear whether the error bar is the standard deviation or the standard error of the mean. * It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified. * For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates). * If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.

8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [NA] Justification: This is a theory paper (see above). Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: This paper mainly focuses on a theoretical problem that does not involve the use of any real-world datasets. Insofar as the proofs go, we have attempted to make them clear and easily checkable. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: The main contribution of this work is towards algorithmic techniques for a learning theory problem. We see the societal impacts of such techniques as minimal. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations. * The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. * The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.

* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: Our paper does not include any trained models or data. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [NA] Justification: Our paper does not use any licensed code, data, or models. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided. * If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset. * For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. * If this information is not available online, the authors are encouraged to reach out to the asset's creators.
13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: Our paper does not use any new assets (no experiments). Guidelines: * The answer NA means that the paper does not release new assets. * Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc. * The paper should discuss whether and how consent was obtained from people whose asset is used. * At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.

14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: Our paper does not conduct any experiments on human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper. * According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: Our paper does not conduct any experiments on human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper. * We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution. * For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.