# CondTSF: One-line Plugin of Dataset Condensation

for Time Series Forecasting

 Jianrong Ding1,2\({}^{*}\), Zhanyu Liu1\({}^{*}\), Guanjie Zheng1\({}^{\dagger}\), Haiming Jin1, Linghe Kong1

1 School of Electronic Information and Electrical Engineering, Shanghai Jiao Tong University

2 Zhiyuan College, Shanghai Jiao Tong University

{rafaelding,zhyliu00,gjzheng,jinhaiming,linghe.kong}@sjtu.edu.cn

###### Abstract

_Dataset condensation_ is a newborn technique that generates a small dataset that can be used in training deep neural networks (DNNs) to lower storage and training costs. The objective of dataset condensation is to ensure that the model trained with the synthetic dataset can perform comparably to the model trained with full datasets. However, existing methods predominantly concentrate on classification tasks, posing challenges in their adaptation to time series forecasting (TS-forecasting). This challenge arises from disparities in the evaluation of synthetic data. In classification, the synthetic data is considered well-distilled if the model trained with the full dataset and the model trained with the synthetic dataset yield identical labels for the same input, regardless of variations in output logits distribution. Conversely, in TS-forecasting, the effectiveness of synthetic data distillation is determined by the distance between predictions of the two models. The synthetic data is deemed well-distilled only when all data points within the predictions are similar. Consequently, TS-forecasting has a more rigorous evaluation methodology compared to classification. To mitigate this gap, we theoretically analyze the optimization objective of dataset condensation for TS-forecasting and propose a new one-line plugin of dataset condensation for TS-forecasting designated as Dataset **Cond**ensation for **T**ime **S**eries **F**orecasting (CondTSF) based on our analysis. Plugging CondTSF into previous dataset condensation methods facilitates a reduction in the distance between the predictions of the model trained with the full dataset and the model trained with the synthetic dataset, thereby enhancing performance. We conduct extensive experiments on eight commonly used time series datasets. CondTSF consistently improves the performance of all previous dataset condensation methods across all datasets, particularly at low condensing ratios.

## 1 Introduction

Dataset condensation is a strategy for mitigating the computational demands of training large models on extensive datasets. It is pointed out by previous works[15, 32] that building foundation models[14, 10, 6, 35, 2, 44] on time series forecasting (TS-forecasting) have become a hot topic. However, fine-tuning these large models using full time series datasets can entail considerable computational overhead. Hence, the employment of dataset condensation techniques becomes imperative. In recent years, various methods have been proposed in the field of dataset condensation, such as matching-based methods[51, 49, 3, 20, 38, 7, 5, 41, 50, 52, 36] and kernel methods[33, 55]. To date, dataset condensation methods have achieved success in classification tasks, including image classification[8, 11, 22], graph classification[17, 16, 23, 43, 25, 9, 27] and time series classification[26].

However, directly applying these dataset condensation methods designed for classification to the domain of time series forecasting (TS-forecasting) results in performance degradation. The objective of dataset condensation is to generate a synthetic dataset so that when the model \(\mathcal{M}_{s}\) trained with the synthetic dataset and the model \(\mathcal{M}_{f}\) trained with the full dataset are given identical input, the two models output **similar predictions**. However, the concept of **similar prediction** differs between classification and TS-forecasting. In classification, as shown in Fig.1(a), predictions are considered similar if \(\mathcal{M}_{s}\) and \(\mathcal{M}_{f}\) assign the same class label, irrespective of differences in the distribution of output logits. Conversely, in TS-forecasting, as illustrated in Fig.1(b), the similarity of predictions from \(\mathcal{M}_{s}\) and \(\mathcal{M}_{f}\) is indicated by the mean squared distance of the predictions. The predictions are deemed similar only when all data points within the predictions are similar. This distinction in evaluation indicates TS-forecasting imposes more stringent criteria in discerning **similar predictions** compared to classification. It poses a challenge that previous dataset condensation methods based on classification fail to provide adequate assurance for the similarity between predictions of \(\mathcal{M}_{s}\) and \(\mathcal{M}_{f}\) within the realm of TS-forecasting.

To mitigate the gap, we propose a novel one-line dataset condensation plugin designed specifically for TS-forecasting called **Condensation** for **T**ime **S**eries **F**orecasting (CondTSF) based on our theoretical analysis. We first formulate the optimization objective of dataset condensation for TS-forecasting. Then we transform the original optimization objective into minimizing the distance between predictions of \(\mathcal{M}_{s}\) and \(\mathcal{M}_{f}\). Furthermore, to minimize the distance between predictions of \(\mathcal{M}_{s}\) and \(\mathcal{M}_{f}\), we decompose the task into minimizing two terms, namely **gradient term** and **value term**. We theoretically prove that plugging CondTSF into previous methods can minimize the **value term** and **gradient term** synchronously. Therefore, CondTSF serves as an effective plugin to boost the performance of dataset condensation for TS-forecasting. As depicted in Fig.1(c), plugging CondTSF into previous methods yields a significant enhancement in performance.

In short, our contributions can be summarized as follows.

* To the best of our knowledge, we are the first to explore dataset condensation for TS-forecasting. We conduct a theoretical analysis of the optimization objective of dataset condensation for TS-forecasting, breaking it down into two optimizable terms to facilitate improved optimization.
* Leveraging insights from our theoretical analysis of TS-forecasting, we propose a simple yet effective dataset condensation plugin CondTSF. Plugging CondTSF into existing methods enables synchronous optimization of the two terms, leading to performance enhancement.
* We conduct extensive experiments on eight widely used time series datasets to prove the effectiveness of CondTSF. CondTSF notably improves the performance of all previous dataset condensation methods across all datasets, particularly under low condensing ratios.

## 2 Related Works

**Time Series Forecasting:** Time series forecasting (TS-forecasting) is the task of using historical, time-stamped data to predict future values. Previous works utilize different methods to achieve better

Figure 1: **Left:** Difference between evaluation of dataset condensation for classification tasks and time series forecasting tasks. **Right:** Comparison in performance of previous methods with and without CondTSF.

performance. These models can be mainly categorized into 3 types. **(1)** Transformer-based Models: Transformer[40] have shown great success in natural language processing, and models based on transformers[53; 42; 24; 54] emerged in TS-forecasting fields. **(2)** MLP-based Models: Efforts to use MLP-based models have been put into TS-forecasting in recent years[47] since DLinear[45] triumph transformer-based models with a simple MLP structure. **(3)** Patch-based Models: These models[34; 48; 28; 29] focused on learning representation cross patches instead of learning attention at each time point. Therefore they used a patching strategy before feeding the data to transformers.

**Dataset Condensation:** Dataset condensation is a task that aims at distilling a large dataset into a smaller one so that when a model is trained on the small synthetic dataset and the full dataset separately, the testing performances of the trained models are similar. Previous works related to dataset condensation can be divided into 3 classes below. **(1)** Coreset Selecting Methods: These methods aim at selecting data with representative features from source dataset to construct a synthetic dataset[1; 4; 12; 37; 39]. **(2)** Matching-based Methods: These methods aim at minimizing a specific metric surrogate model learned from source dataset and synthetic dataset. The defined metrics are different, including gradient[51; 18; 46], features from the same class[41], distribution of synthetic data[50; 52] and training trajectories[3; 5; 7; 11; 8]. **(3)** Kernel-based Methods: These methods aim at obtaining a closed-form solution for the optimization problem utilizing kernel ridge-regression[20; 33]. In this way, the bi-level optimization problem of dataset condensation is reduced to a single-level optimization problem. Based on these results, the following works have made significant progress in different areas, including decreasing training cost and time[55], improving performance[30; 31].

## 3 Preliminaries

**Dataset Condensation for TS-forecasting** Given a time series dataset, we split the dataset into a train set and a test set. In this paper, we denote the train set as \(\bm{f}\) and the test set as \(\bm{x}\). We denote the synthetic dataset as \(\bm{s}\). The synthetic dataset \(\bm{s}\) is a small dataset distilled from the full train set \(\bm{f}\). Train set \(\bm{f}\), test set \(\bm{x}\), and synthetic dataset \(\bm{s}\) are all vectors. We employ \(\mathcal{M}_{\theta}\) as a neural network parameterized by \(\theta\). Without losing generality, we suppose the model \(\mathcal{M}_{\theta}\) is using historical sequence \(\bm{x}_{t:t+m}\) with length \(m\) to predict future sequence \(\bm{x}_{t+m:t+m+n}\) with length \(n\). Given the test set \(\bm{x}\), we formulate the test error of \(\mathcal{M}_{\theta}\) as the error between the prediction of \(\mathcal{M}_{\theta}\) on test input \(\bm{x}_{t:t+m}\) and the test label \(\bm{x}_{t+m:t+m+n}\), as shown in Eq.1.

\[\mathcal{L}_{test}(\mathcal{M}_{\theta},\bm{x})\triangleq\sum_{t}||\mathcal{ M}_{\theta}(\bm{x}_{t:t+m})-\bm{x}_{t+m:t+m+n}||^{2}\] (1)

During **dataset condensation process**, a distribution of initial model parameters \(P_{\theta}\) is available for training model parameter sampling, and the full train set \(\bm{f}\) is available for condensation. Subsequently, a synthetic dataset \(\bm{s}\) is distilled from the full train set \(\bm{f}\) using dataset condensation methods. During **testing process**, initial testing model parameter \(\theta_{0,test}\) is sampled from \(P_{\theta}\). Since \(\theta_{0,test}\) is sampled in the testing process, it's unavailable during the previous dataset condensation process. Then model parameters \(\theta_{s,test}\) and \(\theta_{f,test}\) are obtained by training initial testing parameter \(\theta_{0,test}\) on synthetic dataset \(\bm{s}\) and the full train set \(\bm{f}\) respectively. The objective of dataset condensation is to ensure model \(\mathcal{M}_{\theta_{s,test}}\) and \(\mathcal{M}_{\theta_{f,test}}\) have comparable performance on test set \(\bm{x}\). Therefore the practical optimization objective is to ensure that model \(\mathcal{M}_{\theta_{s,test}}\) trained with synthetic dataset \(\bm{s}\) minimizes the test error \(\mathcal{L}_{test}\) on test set \(\bm{x}\). The optimization objective is formulated as Eq.2.

\[\min_{\bm{s}}\mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}},\bm{x})\] (2)

## 4 Method

Since test set \(\bm{x}\) is not available during the dataset condensation process, the original optimization objective for dataset condensation in Eq.2 is non-optimizable. To mitigate this gap, in the following sections, we transform the non-optimizable objective into two distinct optimizable terms. Then we develop methods to optimize the two terms, thereby indirectly optimizing the original objective.

### Decomposition

In this section, we decompose the optimization objective of dataset condensation in Eq.2 into two optimizable terms for better optimization. In the testing process, the initial testing model parameter \(\theta_{0,test}\) is sampled from a distribution of initial model parameters \(P_{\theta}\). Then we train \(\theta_{0,test}\) on the synthetic dataset \(\bm{s}\) to get model parameter \(\theta_{s,test}\), and train \(\theta_{0,test}\) on the full train set \(\bm{f}\) to get model parameter \(\theta_{f,test}\). Given test dataset \(\bm{x}\), the optimization objective is formulated as Eq.3.

\[\begin{split}\underset{\bm{s}}{\min}\mathcal{L}_{test}(\mathcal{M }_{\theta_{s,test}},\bm{x})\\ \text{where}\ \ \mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}},\bm{x })=\sum_{t}||\mathcal{M}_{\theta_{s,test}}(\bm{x}_{t:t+m})-\bm{x}_{t+m:t+m+n}|| ^{2}\end{split}\] (3)

Meanwhile, there is a non-optimizable error \(\bm{\epsilon}\) between the prediction of model \(\mathcal{M}_{\theta_{f,test}}\) and the true label from the test dataset, which is formulated in Eq.4.

\[\bm{x}_{t+m:t+m+n}=\mathcal{M}_{\theta_{f,test}}(\bm{x}_{t:t+m})+\bm{\epsilon}\] (4)

Then we decompose the upper bound of \(\mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}},\bm{x})\) into two terms, as shown in Thm.1. We utilize Taylor Expansion in the proof of Thm.1. For each real test data \(x_{t:t+m}\), we can arbitrarily choose position \(t^{\prime}\) and get synthetic data \(s_{t^{\prime}:t^{\prime}+m}\). Then we can perform Taylor Expansion with \(s_{t^{\prime}:t^{\prime}+m}\) to obtain the value of \(\mathcal{M}_{\theta_{s,test}}(\bm{x}_{t:t+m})\) and \(\mathcal{M}_{\theta_{f,test}}(\bm{x}_{t:t+m})\).

**Theorem 1**.: _Given arbitrary synthetic data \(\bm{s}_{t^{\prime}:t^{\prime}+m}\), the upper bound of the optimization objective of dataset condensation \(\mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}},\bm{x})\) can be formulated as such_

\[\begin{split}\mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}}, \bm{x})\leq&\sum_{t}||\bm{\epsilon}||^{2}+\underbrace{||\mathcal{ M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})-\mathcal{M}_{\theta_{f,test}}( \bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}}_{\text{Value Term}}\\ &+\underbrace{||(\nabla\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{ \prime}:t^{\prime}+m})-\nabla\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}: t^{\prime}+m}))^{\top}(\bm{x}_{t:t+m}-\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}}_{ \text{Gradient Term}}\end{split}\] (5)

To prove Thm.1, we use linear models for further analysis since linear models can be both effective and efficient in TS-forecasting[45]. Given a linear model \(\mathcal{M}_{\theta}(\bm{x})=\theta\bm{x}\), its second and higher order gradient is zero. Therefore first-order Taylor Expansion is sufficient to obtain the accurate prediction of the model. Meanwhile, if \(\mathcal{M}_{\theta}\) is a non-linear model, we ignore the higher-order terms of Taylor Expansion. We prove Thm.1 by applying the property of the first-order Taylor Expansion and triangular inequality of norm functions. The complete proof is in App.A.1. Hence we decompose the optimization objective of dataset condensation for TS-forecasting into two optimizable terms, namely **value term** and **gradient term**. For **value term**, it ensures \(\mathcal{M}_{\theta_{s,test}}\) and \(\mathcal{M}_{\theta_{f,test}}\) are similar in prediction values. For **gradient term**, it ensures the predictions of \(\mathcal{M}_{\theta_{f,test}}\) and \(\mathcal{M}_{\theta_{f,test}}\) are similar in gradient. Optimizing these two terms can optimize the upper bound of the original optimization objective, and therefore indirectly optimize the original optimization objective in Eq.3.

### Gradient Term Optimization

We develop a method to optimize **gradient term** in this section. Given a linear model \(\mathcal{M}_{\theta}(\bm{x})=\theta\bm{x}\), its gradient on input is \(\nabla\mathcal{M}_{\theta}(\bm{x})=\theta^{\top}\). It indicates that the gradient of a linear model on input is the parameter of the model. We apply Cauchy-Schwarz Inequality to the gradient term and get its upper bound. We reformulate the gradient term and get its upper bound as shown in Eq.6.

\[\begin{split}&||(\nabla\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{ \prime}:t^{\prime}+m})-\nabla\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t ^{\prime}+m}))^{\top}(\bm{x}_{t:t+m}-\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2} \text{ (Gradient Term)}\\ =&||(\theta_{s,test}-\theta_{f,test})(\bm{x}_{t:t+m} -\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\\ \leq&||\theta_{s,test}-\theta_{f,test}||^{2}\cdot|| \bm{x}_{t:t+m}-\bm{s}_{t^{\prime}:t^{\prime}+m}||^{2}\end{split}\] (6)

Figure 2: Complete process of dataset condensation using CondTSF.

Since test data \(\bm{x}_{t:t+m}\) is not available during the dataset condensation process, the distance between synthetic data and test data \(||\bm{x}_{t:t+m}-\bm{s}_{t^{\prime}:t^{\prime}+m}||^{2}\) is not optimizable. Therefore we only need to optimize the distance between parameters \(||\theta_{s,test}-\theta_{f,test}||^{2}\). All previous dataset condensation methods based on parameter matching can minimize this distance. Here we utilize MTT[3] as an example to clarify the optimization process. The optimization objective of trajectory matching is

\[\min_{\bm{s}}\frac{||\theta_{f,test}-\theta_{s,test}||^{2}}{||\theta_{f,test}- \theta_{0,test}||^{2}}\] (7)

However, since \(\theta_{s,test}\) and \(\theta_{f,test}\) are trained from testing initial parameter \(\theta_{0,test}\sim P_{\theta}\), they are not available during dataset condensation process. Therefore, in practice, we sample \(\theta_{0}^{0},\dots,\theta_{0}^{k}\sim P_{\theta}\) as initial parameters during dataset condensation process. The initial parameters are trained on synthetic dataset \(\bm{s}\) and full train set \(\bm{f}\) respectively to get \(\theta_{s}^{0},\dots,\theta_{s}^{k}\) and \(\theta_{f}^{0},\dots,\theta_{f}^{k}\). Then we substitute \(\theta_{s,test}\), \(\theta_{f,test}\) and \(\theta_{0,test}\) in Eq.7 with parameters sampled in dataset condensation, making the optimization objective optimizable. The practical optimization objective is shown in Eq.8.

\[\min_{\bm{s}}\sum_{i=0}^{k}\frac{||\theta_{f}^{i}-\theta_{s}^{i}||^{2}}{|| \theta_{f}^{i}-\theta_{0}^{i}||^{2}}\] (8)

In practice, \(\theta_{0}^{0},\dots,\theta_{0}^{k}\) and \(\theta_{f}^{0},\dots,\theta_{f}^{k}\) are sampled, trained, and stored in a parameter buffer before dataset condensation process. It can be concluded that using trajectory matching methods is intuitively minimizing the distance between \(\theta_{s}^{i}\) and \(\theta_{f}^{i}\) for all initial parameters \(\theta_{0}^{i}\sim P_{\theta}\). By minimizing the upper bound of the gradient term, trajectory matching methods indirectly optimize the gradient term.

### Value Term Optimization

We develop an optimization objective to optimize the **value term** in this section. Since \(\theta_{f,test}\) is trained from \(\theta_{0,test}\), it's unavailable in dataset condensation process. To mitigate this gap, we prove that although \(\theta_{f,test}\) is unavailable in dataset condensation process, its prediction \(\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})\) is still available. To prove this statement, we sample initial model parameters \(\theta_{0}^{0},\dots,\theta_{0}^{k}\) from \(P_{\theta}\). Then \(\theta_{0}^{0},\dots,\theta_{0}^{k}\) are all trained with the same full train set \(\bm{f}\). After training, we get parameters \(\theta_{f}^{0},\dots,\theta_{f}^{k}\). It is observed that models \(\mathcal{M}_{\theta_{f}^{0}},\dots,\mathcal{M}_{\theta_{f}^{k}}\) predict similarly given arbitrary synthetic data \(\bm{s}_{t^{\prime}:t^{\prime}+m}\) as input.

Since initial testing parameter \(\theta_{0,test}\) is also sampled from the same distribution \(P_{\theta}\) and \(\theta_{f,test}\) is trained from \(\theta_{0,test}\) using the same full train set \(\bm{f}\), the prediction of \(\mathcal{M}_{\theta_{f},test}\) is similar to predictions of an arbitrary expert model \(\mathcal{M}_{\theta_{f}^{i}}\). The conclusion is formulated in Eq.9.

\[\mathcal{M}_{\theta_{f},test}(\bm{s}_{t^{\prime}:t^{\prime}+m})\approx\mathcal{ M}_{\theta_{f}^{0}}(\bm{s}_{t^{\prime}:t^{\prime}+m})\approx\mathcal{M}_{ \theta_{f}^{1}}(\bm{s}_{t^{\prime}:t^{\prime}+m})\approx\dots\approx\mathcal{ M}_{\theta_{f}^{k}}(\bm{s}_{t^{\prime}:t^{\prime}+m})\] (9)

Figure 3: Given the same synthetic data as input, all expert models trained on the full train set \(\bm{f}\) provide similar predictions. The initial parameters of the models are sampled from the same distribution \(P_{\theta}\). The visualization of this figure utilized MDS[19] algorithm for dimension reduction.

Experiments have proved Eq.9 in Fig.3. As shown in Fig.3, for each synthetic data input \(\bm{s}_{t^{\prime}:t^{\prime}+m}\) (orange points), the predictions of corresponding expert models (yellow and blue points) are similar. Therefore, although \(\theta_{f,test}\) is unavailable in the dataset condensation process, its prediction \(\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})\) can be obtained using the prediction of an arbitrary expert model \(\mathcal{M}_{\theta^{i}_{f}}(\bm{s}_{t^{\prime}:t^{\prime}+m})\). Now we reformulate the value term and transform it into a practical optimization objective. Firstly, We formulate the upper bound of the value term as shown in Thm.2.

**Theorem 2**.: _The upper bound of the value term can be formulated as such_

\[||\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})-\mathcal{M}_ {\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\leq 2\cdot\sum_{t^{ \prime}}||\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})-\bm {s}_{t^{\prime}+m:t^{\prime}+m+n}||^{2}\] (10)

We prove Thm.2 by utilizing the triangular inequality and the prediction optimality of \(\theta_{s,test}\) on synthetic data \(\bm{s}\). The complete proof is in App.A.2. According to Thm.2, we obtain an optimizable upper bound of the value term. Therefore the optimization objective for the value term can be naturally defined as minimizing the upper bound of the value term, as shown in Eq.11.

\[\min_{\bm{s}}\mathcal{L}_{label}\ \ \text{where}\ \ \mathcal{L}_{label}=\sum_{t^{ \prime}}||\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})-\bm {s}_{t^{\prime}+m:t^{\prime}+m+n}||^{2}\] (11)

According to Thm.2, label error \(\mathcal{L}_{label}\) is the upper bound of the value term. Therefore, by minimizing the upper bound of the value term, the value term is indirectly minimized.

### CondTSF

In this section, we develop a one-line plugin called CondTSF to minimize the label error \(\mathcal{L}_{label}\) in Eq.11 so that the **value term** can be optimized. CondTSF is a lightweight one-line plugin, no backpropagation or gradient is required during the update. CondTSF utilizes a simple yet effective additive method to iteratively update the synthetic data \(\bm{s}\) and minimize the label error \(\mathcal{L}_{label}\). In TS-forecasting, when generating training data, the data is usually sampled overlap from the dataset. Inspired by the overlap property, we utilize an additive method in CondTSF to gradually update the synthetic data to avoid vibrations. In the \(i_{\text{th}}\) update iteration, CondTSF uses the prediction of expert model \(\mathcal{M}_{f,test}(\bm{s}_{t^{\prime}:t^{\prime}+m})\) to update synthetic label \(\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}\). The update process is shown in Eq.12.

\[\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}^{(i+1)}=(1-\beta)\cdot\bm{s}_{t^{\prime} +m:t^{\prime}+m+n}^{(i)}+\beta\cdot\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{ \prime}:t^{\prime}+m}^{(i)})\] (12)

[MISSING_PAGE_FAIL:7]

set the length of the synthetic dataset as 48, as shown in Table.2. Each synthetic dataset can only generate one training pair. We conduct experiments with two larger distill ratios as shown in App.B.

**Model Settings:** We plug CondTSF into existing dataset condensation models based on parameter matching, including DC[51], MTT[3], PP[21], TESLA[5], FTD[7] and DATM[11] to prove the effectiveness of CondTSF. We also conduct experiments on non-parameter-matching based methods, including DM[50], IDM[52], KIP[33], FRePo[55] to prove that optimizing value term only also helps boost the performance. The experiment setting and results are shown in App.E. We use DLinear[45] as the expert model to perform dataset condensation since DLinear is a linear model.

**Metric Settings:** The source dataset is first divided into a train set and a test set. All synthetic data is initialized by randomly sampling data from the train set. After a synthetic dataset is finished distilling, it is used to train another five models. After the five models are trained, they are tested on the test set. Their average mean absolute error (MAE) and mean square error (MSE) are recorded. We repeat the process above five times and report the average and standard deviation. While testing the generalization ability of the dataset condensation methods, DLinear[45] is used as the expert model to perform dataset condensation. Meanwhile, MLP, LSTM[13], and CNN are used as test models when testing the generalization ability of the dataset condensation methods.

\begin{table}
\begin{tabular}{l c c c c c c c c} \hline \hline  & \multicolumn{3}{c}{**Exchange-Refer**} & \multicolumn{3}{c}{**Provider**} \\ \cline{2-10}  & MLP & \multicolumn{1}{c}{LSTM} & \multicolumn{1}{c}{RMSE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} \\ \hline Random & 0.01316.0 & 1.24667 & 0.03460 & 1.1935.0 & 0.0160.0 & 1.2171.0 & 0.1534.0 & 0.0160.0 & 0.5326.0 & 0.5311.0 & 0.5396.0 & 0.5366.0 & 0.6553.0 \\ \hline DC & 0.01316.0 & 1.24667 & 0.03467 & 0.0131 & 0.0160.0 & 0.0170.0 & 0.0170.0 & 0.0140.0 & 0.5426.0 & 0.516.0 & 0.5366.0 & 0.5376.0 & 0.5366.0 \\ \hline DC & 0.01316.0 & 0.0170.0 & 0.0111 & 0.0154.0 & 0.0160.0 & 0.0170.0 & 0.0170.0 & 0.0140.0 & 0.5426.0 & 0.516.0 & 0.5366.0 & 0.5366.0 & 0.5371.0 \\ \hline KD & 0.01316.0 & 0.0170.0 & 0.0111 & 0.0154.0 & 0.0160.0 & 0.0170.0 & 0.0170.0 & 0.0170.0 & 0.0160.0 & 0.0170.0 & 0.0170.0 & 0.0170.0 & 0.0170.0 \\ RFA & 0.01316.0 & 0.0170.0 & 0.0111 & 0.0154.0 & 0.0160.0 & 0.0170.0 & 0.0170.0 & 0.0170.0 & 0.0170.0 & 0.0170.0 & 0.0170.0 & 0.0170.0 & 0.0170.0 \\ RFA & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 \\ MTF & 0.01421.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 \\ RFA & 0.01421.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 \\ RFA & 0.01421.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 \\ RFA & 0.01421.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 \\ \hline CendT & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 & 0.0140.0 \\ \hline \hline \end{tabular}
\end{table}
Table 2: Information and condensation settings of time series datasets.

\begin{table}
\begin{tabular}{l c c c c c c c c c c c c} \hline \hline  & \multicolumn{3}{c}{**Exchange-Refer**} & \multicolumn{3}{c}{**Provider**} \\ \cline{2-13}  & MLP & \multicolumn{1}{c}{LSTM} & \multicolumn{1}{c}{RMSE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} & \multicolumn{1}{c}{MAE} \\ \hline Random & 0.01316.0 & 1.24667 & 0.03460 & 0.0171 & 0.0135.0 & 0.0160.0 & 0.1571.0 & 0.5344.0 & 0.0150.0 & 0.5326.0 & 0.5311.0 & 0.5396.0 & 0.5396.0 & 0.5366.0 & 0.6553.0 \\ \hline DC & 0.01316.0 & 0.01316.0 & 0.0111 & 0.0154.0 & 0.0140.0 & 0.0140.0

**Implementation Details:** As a plugin module, we test CondTSF with all previous methods. Each synthetic dataset is optimized using a standard training process according to the chosen backbone model. CondTSF is set to update every 3 epochs and the additive update ratio \(\beta\) is set to be 0.01. All the experiments are carried out on an NVIDIA RTX 3080Ti.

### Results

**Single Architecture Performance:** The results are summarized in Table.1. For each backbone method, the first line shows the performance of the backbone model, the second line shows the performance of a backbone model with CondTSF, and the third line shows the percentage of reduction in MAE and MSE after CondTSF is applied. There's a considerable reduction in error for all backbone models. The results suggest that CondTSF is effective in optimizing the value term and enhancing the performance in dataset condensation for TS-forecasting. However, using CondTSF on DC[51] is not as effective as other methods. The reason is that instead of directly matching parameters, DC matches the gradient of parameters on loss in each iteration. Indirectly matching gradient leads to accumulating errors in parameters, making DC unable to lower parameter error as effectively as directly matching parameters. Therefore CondTSF is not effective enough when applied to DC[51].

**Cross Architecture Performance:** We also conduct experiments to evaluate the cross-architecture performance of dataset condensation methods. The results are summarized in Table.3. We test all models on all datasets with MLP, LSTM[13], and CNN as test models. All synthetic data is distilled using DLinear[45] model as experts. We use MTT[3] as the backbone for CondTSF. We observe that CondTSF based on MTT outperformed all other previous models.

### Discussion

**Test Performance and Errors:** We conduct experiments on ExchangeRate dataset with MTT[3] and MTT+CondTSF. As shown in Fig.4, trajectory of parameter error \(\frac{\left\|\theta_{f}-\theta_{o}\right\|^{2}}{\left\|\theta_{f}-\theta_{o }\right\|^{2}}\), label error \(\mathcal{L}_{label}\) and test error \(\mathcal{L}_{test}\) through the distillation process are presented. Regarding the parameter error corresponding to the gradient term, both MTT and MTT+CondTSF converge quickly, suggesting that the incorporation of CondTSF doesn't impact parameter alignment. As for the label error corresponding to the value term, since the initial synthetic data \(\bm{s}\) is randomly sampled from the train set \(\bm{f}\) and the expert model is trained by the train set \(\bm{f}\), the label error of \(\bm{s}\) is small at the beginning. However, the utilization of MTT results in an elevation of label error, whereas employing CondTSF effectively mitigates this increase in label error. During the test, MTT+CondTSF notably outperforms MTT by concurrently optimizing both the value term and the gradient term.

## 6 Limitations

The limitation of this work is that we use linear models in our analysis so that the gradient of a model on input is the parameter of the model. Therefore, only linear models like DLinear[45] are solid enough to be an expert model for dataset condensation. The analysis no longer holds when it comes to more complicated models. However, experiments in App.D and App.E show that CondTSF is

Figure 4: Changing trajectory of **Left:** parameter error which refer to gradient term, **Middle:** label error which refer to value term and **Right:** test error during dataset condensation process.

also effective with non-parameter-matching methods and non-linear models, which merits further exploration.

## 7 Conclusion

In this study, we provide abundant proof that previous dataset condensation methods based on classification are not suitable for dataset condensation for TS-forecasting. We elucidate that these earlier methods, predominantly focused on classification tasks, only address a portion of the optimization objective pertinent to TS-forecasting. To address this issue, we propose a plugin module called CondTSF that can collaborate with parameter matching based dataset condensation methods. CondTSF optimizes the optimization objective that previous methods have neglected and boosts the performance of dataset condensation methods on TS-forecasting. We conduct experiments on eight widely used time series datasets and prove the effectiveness of our proof and method. CondTSF consistently enhances the performance of all previous techniques across all datasets, substantiating its effectiveness in improving dataset condensation outcomes for TS-forecasting applications.

## Acknowledgements

This work was sponsored by National Natural Science Foundation of China under Grant No. 62102246, 62272301, and Provincial Key Research and Development Program of Zhejiang under Grant No. 2021C01034. Part of the work was done when the students were doing internships at Yunqi Academy of Engineering.

## References

* [1] Olivier Bachem, Mario Lucic, and Andreas Krause. Practical coreset constructions for machine learning. _arXiv preprint arXiv:1703.06476_, 2017.
* [2] Defu Cao, Furong Jia, Sercan O Arik, Tomas Pfister, Yixiang Zheng, Wen Ye, and Yan Liu. Tempo: Prompt-based generative pre-trained transformer for time series forecasting. _arXiv preprint arXiv:2310.04948_, 2023.
* [3] George Cazenavette, Tongzhou Wang, Antonio Torralba, Alexei A Efros, and Jun-Yan Zhu. Dataset distillation by matching training trajectories. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 4750-4759, 2022.
* [4] Yutian Chen, Max Welling, and Alex Smola. Super-samples from kernel herding. _arXiv preprint arXiv:1203.3472_, 2012.
* [5] Justin Cui, Ruochen Wang, Si Si, and Cho-Jui Hsieh. Scaling up dataset distillation to imagenet-1k with constant memory. In _International Conference on Machine Learning_, pages 6565-6590. PMLR, 2023.
* [6] Abhimanyu Das, Weihao Kong, Rajat Sen, and Yichen Zhou. A decoder-only foundation model for time-series forecasting. _arXiv preprint arXiv:2310.10688_, 2023.
* [7] Jiawei Du, Yidi Jiang, Vincent YF Tan, Joey Tianyi Zhou, and Haizhou Li. Minimizing the accumulated trajectory error to improve dataset distillation. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 3749-3758, 2023.
* [8] Jiawei Du, Qin Shi, and Joey Tianyi Zhou. Sequential subset matching for dataset distillation. _Advances in Neural Information Processing Systems_, 36, 2024.
* [9] Qizhang Feng, Zhimeng Jiang, Ruiquan Li, Yicheng Wang, Na Zou, Jiang Bian, and Xia Hu. Fair graph distillation. In _Proceedings of the Advances in Neural Information Processing Systems (NeurIPS)_, 2023.
* [10] Azul Garza and Max Mergenthaler-Canseco. Timegpt-1. _arXiv preprint arXiv:2310.03589_, 2023.

* [11] Ziyao Guo, Kai Wang, George Cazenavette, Hui Li, Kaipeng Zhang, and Yang You. Towards lossless dataset distillation via difficulty-aligned trajectory matching. _arXiv preprint arXiv:2310.05773_, 2023.
* [12] Sariel Har-Peled and Akash Kushal. Smaller coresets for k-median and k-means clustering. In _Proceedings of the twenty-first annual symposium on Computational geometry_, pages 126-134, 2005.
* [13] Sepp Hochreiter and Jurgen Schmidhuber. Long short-term memory. _Neural computation_, 9(8):1735-1780, 1997.
* [14] Ming Jin, Shiyu Wang, Lintao Ma, Zhixuan Chu, James Y Zhang, Xiaoming Shi, Pin-Yu Chen, Yuxuan Liang, Yuan-Fang Li, Shirui Pan, et al. Time-llm: Time series forecasting by reprogramming large language models. _arXiv preprint arXiv:2310.01728_, 2023.
* [15] Ming Jin, Qingsong Wen, Yuxuan Liang, Chaoli Zhang, Siqiao Xue, Xue Wang, James Zhang, Yi Wang, Haifeng Chen, Xiaoli Li, et al. Large models for time series and spatio-temporal data: A survey and outlook. _arXiv preprint arXiv:2310.10196_, 2023.
* [16] Wei Jin, Xianfeng Tang, Haoming Jiang, Zheng Li, Danqing Zhang, Jiliang Tang, and Bin Ying. Condensing graphs via one-step gradient matching. In _Proceedings of the ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD)_, 2022.
* [17] Wei Jin, Lingxiao Zhao, Shichang Zhang, Yozen Liu, Jiliang Tang, and Neil Shah. Graph condensation for graph neural networks. In _Proceedings of the International Conference on Learning Representations (ICLR)_, 2022.
* [18] Jang-Hyun Kim, Jinuk Kim, Seong Joon Oh, Sangdoo Yun, Hwanjun Song, Joonhyun Jeong, Jung-Woo Ha, and Hyun Oh Song. Dataset condensation via efficient synthetic-data parameterization. In _International Conference on Machine Learning_, pages 11102-11118. PMLR, 2022.
* [19] Joseph B Kruskal. Multidimensional scaling by optimizing goodness of fit to a nonmetric hypothesis. _Psychometrika_, 29(1):1-27, 1964.
* [20] Saehyung Lee, Sanghyuk Chun, Sangwon Jung, Sangdoo Yun, and Sungroh Yoon. Dataset condensation with contrastive signals. In _International Conference on Machine Learning_, pages 12352-12364. PMLR, 2022.
* [21] Guang Li, Ren Togo, Takahiro Ogawa, and Miki Haseyama. Dataset distillation using parameter pruning. _IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences_, 2023.
* [22] Haoyang Liu, Tiancheng Xing, Luwei Li, Vibhu Dalal, Jingrui He, and Haohan Wang. Dataset distillation via the wasserstein metric. _arXiv preprint arXiv:2311.18531_, 2023.
* [23] Mengyang Liu, Shanchuan Li, Xinshi Chen, and Le Song. Graph condensation via receptive field distribution matching. _arXiv preprint arXiv:2206.13697_, 2022.
* [24] Shizhan Liu, Hang Yu, Cong Liao, Jianguo Li, Weiyao Lin, Alex X Liu, and Schahram Dustdar. Pyraformer: Low-complexity pyramidal attention for long-range time series modeling and forecasting. In _International conference on learning representations_, 2021.
* [25] Yilun Liu, Ruihong Qiu, and Zi Huang. Cat: Balanced continual graph learning with graph condensation. In _Proceedings of the IEEE International Conference on Data Mining (ICDM)_, 2023.
* [26] Zhanyu Liu, Ke Hao, Guanjie Zheng, and Yanwei Yu. Dataset condensation for time series classification via dual domain matching. _arXiv preprint arXiv:2403.07245_, 2024.
* [27] Zhanyu Liu, Chaolv Zeng, and Guanjie Zheng. Graph data condensation via self-expressive graph structure reconstruction. _arXiv preprint arXiv:2403.07294_, 2024.

* [28] Zhanyu Liu, Guanjie Zheng, and Yanwei Yu. Cross-city few-shot traffic forecasting via traffic pattern bank. In _Proceedings of the 32nd ACM International Conference on Information and Knowledge Management_, pages 1451-1460, 2023.
* [29] Zhanyu Liu, Guanjie Zheng, and Yanwei Yu. Multi-scale traffic pattern bank for cross-city few-shot traffic forecasting. _arXiv preprint arXiv:2402.00397_, 2024.
* [30] Noel Loo, Ramin Hasani, Alexander Amini, and Daniela Rus. Efficient dataset distillation using random feature approximation. _Advances in Neural Information Processing Systems_, 35:13877-13891, 2022.
* [31] Noel Loo, Ramin Hasani, Mathias Lechner, and Daniela Rus. Dataset distillation with convexified implicit gradients. _arXiv preprint arXiv:2302.06755_, 2023.
* [32] John A Miller, Mohammed Aldosari, Farah Saeed, Nasid Habib Barna, Subas Rana, I Budak Arpinar, and Ninghao Liu. A survey of deep learning and foundation models for time series forecasting. _arXiv preprint arXiv:2401.13912_, 2024.
* [33] Timothy Nguyen, Zhourong Chen, and Jaehoon Lee. Dataset meta-learning from kernel ridge-regression. In _International Conference on Learning Representations_, 2020.
* [34] Yuqi Nie, Nam H Nguyen, Phanwadee Sinthong, and Jayant Kalagnanam. A time series is worth 64 words: Long-term forecasting with transformers. _arXiv preprint arXiv:2211.14730_, 2022.
* [35] Kashif Rasul, Arjun Ashok, Andrew Robert Williams, Arian Khorasani, George Adamopoulos, Rishika Bhagwatkar, Marin Bilos, Hena Ghonia, Nadhir Vincent Hassen, Anderson Schneider, et al. Lag-llama: Towards foundation models for time series forecasting. _arXiv preprint arXiv:2310.08278_, 2023.
* [36] Ahmad Sajedi, Samir Khaki, Ehsan Amjadian, Lucy Z Liu, Yuri A Lawryshyn, and Konstantinos N Plataniotis. Datadam: Efficient dataset distillation with attention matching. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 17097-17107, 2023.
* [37] Ozan Sener and Silvio Savarese. Active learning for convolutional neural networks: A core-set approach. _arXiv preprint arXiv:1708.00489_, 2017.
* [38] Seungjae Shin, Heesun Bae, Donghyeok Shin, Weonyoung Joo, and Il-Chul Moon. Loss-curvature matching for dataset selection and condensation. In _International Conference on Artificial Intelligence and Statistics_, pages 8606-8628. PMLR, 2023.
* [39] Ivor W Tsang, James T Kwok, Pak-Ming Cheung, and Nello Cristianini. Core vector machines: Fast svm training on very large data sets. _Journal of Machine Learning Research_, 6(4), 2005.
* [40] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. _Advances in neural information processing systems_, 30, 2017.
* [41] Kai Wang, Bo Zhao, Xiangyu Peng, Zheng Zhu, Shuo Yang, Shuo Wang, Guan Huang, Hakan Bilen, Xinchao Wang, and Yang You. Cafe: Learning to condense dataset by aligning features. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 12196-12205, 2022.
* [42] Haixu Wu, Jiehui Xu, Jianmin Wang, and Mingsheng Long. Autoformer: Decomposition transformers with auto-correlation for long-term series forecasting. _Advances in neural information processing systems_, 34:22419-22430, 2021.
* [43] Zhe Xu, Yuzhong Chen, Menghai Pan, Huiyuan Chen, Mahashweta Das, Hao Yang, and Tong Hanghang. Kernel ridge regression-based graph dataset distillation. In _Proceedings of the ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD)_, 2023.
* [44] Hao Xue and Flora D Salim. Promptcast: A new prompt-based learning paradigm for time series forecasting. _IEEE Transactions on Knowledge and Data Engineering_, 2023.

* [45] Ailing Zeng, Muxi Chen, Lei Zhang, and Qiang Xu. Are transformers effective for time series forecasting? In _Proceedings of the AAAI conference on artificial intelligence_, volume 37, pages 11121-11128, 2023.
* [46] Lei Zhang, Jie Zhang, Bowen Lei, Subhabrata Mukherjee, Xiang Pan, Bo Zhao, Caiwen Ding, Yao Li, and Dongkuan Xu. Accelerating dataset distillation via model augmentation. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 11950-11959, 2023.
* [47] Tianping Zhang, Yizhuo Zhang, Wei Cao, Jiang Bian, Xiaohan Yi, Shun Zheng, and Jian Li. Less is more: Fast multivariate time series forecasting with light sampling-oriented mlp structures. _arXiv preprint arXiv:2207.01186_, 2022.
* [48] Yunhao Zhang and Junchi Yan. Crossformer: Transformer utilizing cross-dimension dependency for multivariate time series forecasting. In _The eleventh international conference on learning representations_, 2022.
* [49] Bo Zhao and Hakan Bilen. Dataset condensation with differentiable siamese augmentation. In _International Conference on Machine Learning_, pages 12674-12685. PMLR, 2021.
* [50] Bo Zhao and Hakan Bilen. Dataset condensation with distribution matching. In _Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision_, pages 6514-6523, 2023.
* [51] Bo Zhao, Konda Reddy Mopuri, and Hakan Bilen. Dataset condensation with gradient matching. _ICLR_, 1(2):3, 2021.
* [52] Ganlong Zhao, Guanbin Li, Yipeng Qin, and Yizhou Yu. Improved distribution matching for dataset condensation. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 7856-7865, 2023.
* [53] Haoyi Zhou, Shanghang Zhang, Jieqi Peng, Shuai Zhang, Jianxin Li, Hui Xiong, and Wancai Zhang. Informer: Beyond efficient transformer for long sequence time-series forecasting. In _Proceedings of the AAAI conference on artificial intelligence_, volume 35, pages 11106-11115, 2021.
* [54] Tian Zhou, Ziqing Ma, Qingsong Wen, Xue Wang, Liang Sun, and Rong Jin. Fedformer: Frequency enhanced decomposed transformer for long-term series forecasting. In _International conference on machine learning_, pages 27268-27286. PMLR, 2022.
* [55] Yongchao Zhou, Ehsan Nezhadarya, and Jimmy Ba. Dataset distillation using neural feature regression. _Advances in Neural Information Processing Systems_, 35:9813-9827, 2022.

## Appendix A Complete Proof

### Complete Proof for Theorem 1

**Theorem 1**.: _Given arbitrary synthetic data \(\bm{s}_{t^{\prime}:t^{\prime}+m}\), the upper bound of the optimization objective of dataset condensation \(\mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}},\bm{x})\) can be formulated as such_

\[\begin{split}\mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}}, \bm{x})\leq&\sum_{t}||\bm{\epsilon}||^{2}+\underbrace{\|\mathcal{ M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})-\mathcal{M}_{\theta_{f, test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}}_{\text{Value Term}}\\ &+\underbrace{\left|(\nabla\mathcal{M}_{\theta_{s,test}}(\bm{s}_ {t^{\prime}:t^{\prime}+m})-\nabla\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{ \prime}:t^{\prime}+m}))^{\top}(\bm{x}_{t:t+m}-\bm{s}_{t^{\prime}:t^{\prime}+m} )||^{2}}_{\text{Gradient Term}}\end{split}\] (14)

Proof.: Replacing the true label \(\bm{x}_{t+m:t+m+n}\) in \(\mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}},\bm{x})\) with Eq.4, the optimization objective of dataset condensation for TS-forecasting is reformulated as the distance between the predictions of \(\mathcal{M}_{\theta_{s,test}}\) and \(\mathcal{M}_{\theta_{f,test}}\) given the same test input. Then the triangular inequality of norm functions is used and the original optimization objective can be transformed to its upper bound, as shown in Eq.15.

\[\begin{split}\mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}}, \bm{x})&=\sum_{t}||\mathcal{M}_{\theta_{s,test}}(\bm{x}_{t:t+m})- \bm{x}_{t+m:t+m+n}||^{2}\\ &=\sum_{t}||\mathcal{M}_{\theta_{s,test}}(\bm{x}_{t:t+m})- \mathcal{M}_{\theta_{f,test}}(\bm{x}_{t:t+m})-\bm{\epsilon}||^{2}\\ &\leq\sum_{t}||\mathcal{M}_{\theta_{s,test}}(\bm{x}_{t:t+m})- \mathcal{M}_{\theta_{f,test}}(\bm{x}_{t:t+m})||^{2}+||\bm{\epsilon}||^{2}\end{split}\] (15)

In Eq.15, we prove that minimizing the distance between \(\mathcal{M}_{\theta_{s,test}}(\bm{x}_{t:t+m})\) and \(\mathcal{M}_{\theta_{f,test}}(\bm{x}_{t:t+m})\) is equivalent to minimizing the upper bound of the original optimization objective. Then we decompose the distance between predictions of \(\mathcal{M}_{\theta_{s,test}}\) and \(\mathcal{M}_{\theta_{f,test}}\) into two optimizable terms for better optimization. We use linear models for further analysis since linear models can be both effective and efficient in TS-forecasting tasks[45]. Given a linear model \(\mathcal{M}_{\theta}(\bm{x})=\theta\bm{x}\), its second and higher order gradient is zero, i.e. \(\nabla^{k}\mathcal{M}_{\theta}(\bm{x})=\mathbf{0},\forall k\geq 2\). Therefore, first-order Taylor Expansion can be utilized to get the prediction of the model \(\mathcal{M}_{\theta}\) on test data \(\bm{x}_{t:t+m}\) using the prediction and gradient of the model \(\mathcal{M}_{\theta}\) on arbitrary synthetic data \(\bm{s}_{t^{\prime}:t^{\prime}+m}\). The process is formulated in Eq.16. Meanwhile, it is worth mentioning that if \(\mathcal{M}_{\theta}\) is a non-linear model, then the second and higher-order terms of the Taylor Expansion are ignored in Eq.16.

\[\mathcal{M}_{\theta}(\bm{x}_{t:t+m})=\mathcal{M}_{\theta}(\bm{s}_{t^{\prime}: t+m})+\nabla\mathcal{M}_{\theta}(\bm{s}_{t^{\prime}:t^{\prime}+m})^{\top}(\bm{x}_ {t:t+m}-\bm{s}_{t^{\prime}:t^{\prime}+m})\] (16)

Then we expand Eq.15 with Taylor expansion. After that, the triangular inequality of norm functions is used to get its upper bound. In the meantime, by applying the triangular inequality, the optimization objective can be decomposed into two optimizable terms.

\[\begin{split}\mathcal{L}_{test}(\mathcal{M}_{\theta_{s,test}}, \bm{x})\leq&\sum_{t}||\mathcal{M}_{\theta_{s,test}}(\bm{x}_{t:t+m })-\mathcal{M}_{\theta_{f,test}}(\bm{x}_{t:t+m})||^{2}+||\bm{\epsilon}||^{2} \\ =&\sum_{t}||\bm{\epsilon}||^{2}+||\mathcal{M}_{\theta _{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})+\nabla\mathcal{M}_{\theta_{s,test} }(\bm{s}_{t^{\prime}:t^{\prime}+m})^{\top}(\bm{x}_{t:t+m}-\bm{s}_{t^{\prime} :t^{\prime}+m})\\ &-\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m}) -\nabla\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})^{\top} (\bm{x}_{t:t+m}-\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\\ =&\sum_{t}||\bm{\epsilon}||^{2}+||\mathcal{M}_{\theta _{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})-\mathcal{M}_{\theta_{f,test}}(\bm {s}_{t^{\prime}:t^{\prime}+m})\\ &+(\nabla\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{ \prime}+m})-\nabla\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+ m}))^{\top}(\bm{x}_{t:t+m}-\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\\ \leq&\sum_{t}||\bm{\epsilon}||^{2}+\underbrace{\| \mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})-\mathcal{M}_{ \theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}}_{\text{Value Term}}\\ &+\underbrace{\left|(\nabla\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{ \prime}:t^{\prime}+m})-\nabla\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{ \prime}+m}))^{\top}(\bm{x}_{t:t+m}-\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}}_{ \text{Gradient Term}}\end{split}\] (17)

Therefore Thm.1 is proved.

### Complete Proof for Theorem 2

**Theorem 2**.: _The upper bound of the value term can be formulated as such_

\[||\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})-\mathcal{M}_{ \theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\leq 2\cdot\sum_{t^{ \prime}}||\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})-\bm{s }_{t^{\prime}+m:t^{\prime}+m+n}||^{2}\] (18)

Proof.: We first use triangular inequality and the non-negativity of norm functions to get the upper bound of the value term. The process is shown in Eq.19.

\[||\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})- \mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\text{ (Value Term)}\] (19) \[= ||\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m} )-\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}+\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}- \mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\] \[\leq ||\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m} )-\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}||^{2}+||\bm{s}_{t^{\prime}+m:t^{\prime} +m+n}-\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\] \[\leq \sum_{t^{\prime}}||\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{ \prime}:t^{\prime}+m})-\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}||^{2}+\sum_{t^{ \prime}}||\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}-\mathcal{M}_{\theta_{f,test}}( \bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\]

For further analysis, we need to step back and formulate the training process of \(\theta_{s}\) to derive an inequality. By doing dataset condensation, a synthetic dataset \(\bm{s}\) is obtained. Then we formulate the training process of \(\theta_{s,test}\) on synthetic data \(\bm{s}\) as minimizing the prediction error on \(\bm{s}\). The training process is formulated in Eq.20.

\[\theta_{s,test}=\arg\min_{\theta}\sum_{t^{\prime}}||\mathcal{M}_{\theta}(\bm{ s}_{t^{\prime}:t^{\prime}+m})-\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}||^{2}\] (20)

Now we can derive an inequality. We denote \(\bm{s}\) as the synthetic dataset obtained by dataset condensation. We denote \(\mathcal{M}_{\theta_{s,test}}\) as the model that is trained on \(\bm{s}\) as shown Eq.20. According to Eq.20, \(\mathcal{M}_{\theta_{s,test}}\) has the lowest prediction error on synthetic data \(\bm{s}\) under the given model architecture. Since \(\mathcal{M}_{\theta_{s,test}}\) and \(\mathcal{M}_{\theta_{f,test}}\) share the same model architecture, the prediction error of \(\mathcal{M}_{\theta_{s,test}}\) on synthetic data \(\bm{s}\) is no larger than the prediction error of \(\mathcal{M}_{f,test}\) on synthetic data \(\bm{s}\). This inequality can be formulated as such

\[\sum_{t^{\prime}}||\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime} +m})-\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}||^{2}\leq\sum_{t^{\prime}}||\bm{s}_{ t^{\prime}+m:t^{\prime}+m+n}-\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{ \prime}+m})||^{2}\] (21)

By applying Eq.21 to Eq.19, we obtain the upper bound of the value term, as shown in Eq.22.

\[||\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m} )-\mathcal{M}_{\theta_{f,test}}(\bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\text{ (Value Term)}\] (22) \[\leq \sum_{t^{\prime}}||\mathcal{M}_{\theta_{s,test}}(\bm{s}_{t^{ \prime}:t^{\prime}+m})-\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}||^{2}+\sum_{t^{ \prime}}||\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}-\mathcal{M}_{\theta_{f,test}}( \bm{s}_{t^{\prime}:t^{\prime}+m})||^{2}\] \[\leq 2\cdot\sum_{t^{\prime}}||\mathcal{M}_{\theta_{f,test}}(\bm{s}_{ t^{\prime}:t^{\prime}+m})-\bm{s}_{t^{\prime}+m:t^{\prime}+m+n}||^{2}\]

Therefore Thm.2 is proved.

[MISSING_PAGE_FAIL:16]

### 3-times Standard Ratio Condensation

We distill the dataset into a synthetic dataset with a flexible length for each dataset. Each synthetic dataset is 3 times larger than the synthetic data in Table.4. The information on condensation is shown in Table.6. The performance is shown in Table.7.

We observe that CondTSF consistently improves the performance of backbone models with all condensing ratios, suggesting the effectiveness of CondTSF with different condensing ratios.

\begin{table}
\begin{tabular}{l|c c c c c c c} \hline \hline  & \multicolumn{2}{c||}{ETTm1aEttTm2} & \multicolumn{2}{c||}{ETTm1aEttTm2} & ExchangeRate & Weather & Electricity & Traffic \\ \hline Dataset length & 57600 & 14400 & 7588 & 52696 & 26304 & 17544 \\ Distilled ratio & 0.6\% & 1.2\% & 3\% & 0.6\% & 0.9\% & 1.2\% \\ Distilled length & 345 & 172 & 227 & 316 & 236 & 210 \\ \hline \hline \end{tabular}
\end{table}
Table 6: Information and condensation settings of time series datasets.

\begin{table}
\begin{tabular}{l|c||c c c c c c c c} \hline \hline  & \multicolumn{2}{c||}{ContTSF} & \multicolumn{2}{c||}{ExchangeRate} & \multicolumn{2}{c||}{Weather} & \multicolumn{2}{c||}{Electrictivity} & \multicolumn{2}{c}{The Traffic} \\ \hline Random & - & 0.0821\(\pm\)0.081 & 1.253\(\pm\)0.223 & 0.447\(\pm\)0.067 & 0.471\(\pm\)0.105 & 0.832\(\pm\)0.016 & 1.079\(\pm\)0.041 & 0.840\(\pm\)0.021 & 1.320\(\pm\)0.052 \\ \hline \multirow{3}{*}{DC} & ✗ & 0.711\(\pm\)0.028 & 0.864\(\pm\)0.063 & 0.439\(\pm\)0.027 & 0.444\(\pm\)0.035 & 0.827\(\pm\)0.008 & 1.068\(\pm\)0.018 & 0.833\(\pm\)0.006 & 1.304\(\pm\)0.037 \\  & ✓ & 0.614\(\pm\)0.117 & 0.658\(\pm\)0.224 & 0.396\(\pm\)0.013 & 0.372\(\pm\)0.019 & 0.840\(\pm\)0.003 & 1.042\(\pm\)0.009 & 0.816\(\pm\)0.005 & 1.271\(\pm\)0.003 \\  & \(\downarrow\) & 13.6\% & 2.3\% & 9.8\% & 1.6\% & 2.8\% & 5.2\% & 2.0\% & 2.6\% \\ \hline \multirow{3}{*}{MTT} & ✗ & 0.201\(\pm\)0.012 & 0.066\(\pm\)0.008 & 0.324\(\pm\)0.023 & 0.293\(\pm\)0.027 & 0.332\(\pm\)0.004 & 0.242\(\pm\)0.003 & 0.432\(\pm\)0.007 & 0.520\(\pm\)0.008 \\  & ✓ & 0.175\(\pm\)0.006 & 0.050\(\pm\)0.002 & 0.274\(\pm\)0.013 & 0.255\(\pm\)0.007 & 0.331\(\pm\)0.003 & 0.241\(\pm\)0.003 & 0.422\(\pm\)0.006 & 0.505\(\pm\)0.003 \\  & ✓ & 12.8\% & 23.7\% & 15.6\% & 1.27\% & 0.3\% & 0.1\% & 2.3\% & 2.9\% \\ \hline \multirow{3}{*}{PP} & ✗ & 0.198\(\pm\)0.008 & 0.064\(\pm\)0.005 & 0.308\(\pm\)0.015 & 0.277\(\pm\)0.015 & 0.333\(\pm\)0.004 & 0.242\(\pm\)0.003 & 0.435\(\pm\)0.005 & 0.522\(\pm\)0.008 \\  & ✓ & 0.176\(\pm\)0.003 & 0.051\(\pm\)0.002 & 0.274\(\pm\)0.006 & 0.299\(\pm\)0.002 & 0.330\(\pm\)0.001 & 0.239\(\pm\)0.002 & 0.429\(\pm\)0.004 & 0.512\(\pm\)0.005 \\  & \(\downarrow\) & 11.0\% & 19.9\% & 11.0\% & 6.5\% & 1.0\% & 1.2\% & 1.4\% & 1.8\% \\ \hline \multirow{3}{*}{TESLA} & ✗ & 0.209\(\pm\)0.016 & 0.071\(\pm\)0.011 & 0.297\(\pm\)0.005 & 0.265\(\pm\)0.003 & 0.446\(\pm\)0.011 & 0.371\(\pm\)0.014 & 0.593\(\pm\)0.011 & 0.734\(\pm\)0.023 \\  & ✓ & 0.176\(\pm\)0.009 & 0.051\(\pm\)0.005 & 0.287\(\pm\)0.005 & 0.262\(\pm\)0.004 & 0.413\(\pm\)0.007 & 0.366\(\pm\)0.009 & 0.551\(\pm\)0.018 & 0.664\(\pm\)0.004 \\  & \(\downarrow\) & 15.6\% & 27.9\% & 3.6\% & 1.1\% & 7.3\% & 9.3\% & 7.1\% & 9.5\% \\ \hline \multirow{3}{*}{FTD} & ✗ & 0.198\(\pm\)0.008 & 0.064\(\pm\)0.005 & 0.328\(\pm\)0.015 & 0.298\(\pm\)0.017 & 0.333\(\pm\)0.006 & 0.243\(\pm\)0.004 & 0.435\(\pm\)0.003 & 0.523\(\pm\)0.005 \\  & ✓ & 0.172\(\pm\)0.004 & 0.049\(\pm\)0.002 & 0.281\(\pm\)0.007 & 0.285\(\pm\)0.004 & 0.313\(\pm\)0.005 & 0.243\(\pm\)0.004 & 0.421\(\pm\)0.003 & 0.501\(\pm\)0.005 \\  & \(\downarrow\) & 13.3\% & 2.3\% & 14.3\% & 13.4\% & 0.7\% & 0.0\% & 3.3\% & 4.3\% \\ \hline \multirow{3}{*}{DATH} & ✗ & 0.196\(\pm\)0.010 & 0.062\(\pm\)0.005 & 0.284\(\pm\)0.009 & 0.264\(\pm\)0.008 & 0.335\(\pm\)0.006 & 0.244\(\pm\)0.005 & 0.437\(\pm\)0.005 & 0.523\(\pm\)0.007 \\  & ✓ & 0.173\(\pm\)0.007 & 0.049\(\pm\)0.003 & 0.275\(\pm\)0.005 & 0.251\(\pm\)0.001 & 0.326\(\pm\)0.003 & 0.238\(\pm\)0.003 & 0.416\(\pm\)0.005 & 0.497\(\pm\)0.003 \\  & ✓ & 12.0\% & 2.1\% & 13.9\% & 3.0\% & 4.8\% & 2.8\% & 2.2\% & 4.6\% & 5.0\% \\ \hline \multirow{3}{*}{Full} & ✗ & 0.110\(\pm\)0.001 & 0.023\(\pm\)0.000 & 0.197\(\pm\)0.001 & 0.131\(\pm\)0.001 & 0.312\(\pm\)0.002 & 0.223\(\pm\)0.002 & 0.406\(\pm\)0.003 & 0.492\(\pm\)0.004 \\ \cline{1-1} \cline{2

[MISSING_PAGE_EMPTY:18]

[MISSING_PAGE_FAIL:19]

[MISSING_PAGE_FAIL:20]

[MISSING_PAGE_FAIL:21]

We observe that CondTSF consistently reduces the testing error with different utilization gaps.

### Relationship of Performance and Label Error

We also conduct experiments on label error and test error. We visualize the trajectory of label error \(\mathcal{L}_{label}\) and test error through the distillation process. The results are shown in Fig.8.

* **Model 1:** Use MTT to distill for 200 epochs.
* **Model 2:** Use MTT to distill for 160 epochs and then use CondTSF to update for 40 epochs.

As shown in Fig.8, it can be observed that using MTT[3] leads to an increase in label error \(\mathcal{L}_{label}\). While applying CondTSF effectively lowers the label error in the last 40 epochs, and therefore enhancing the performance.

Figure 7: **Yellow:** Use MTT to distill for 200 epochs. **Orange:** Use MTT to distill for 200 epochs and use CondTSF to update every 5 epochs.

Figure 8: Visualization of the training curve of label error and test error during the distillation process.

Parameter Sensitivity of CondTSF

We test CondTSF with different update gaps \(G\) and additive update ratios \(\beta\). We utilize the standard distill ratio as shown in Table.4. Our observations indicate that CondTSF displays a notable degree of robustness concerning these parameters. Specifically, the effectiveness of CondTSF persists when the update gap \(G\) is moderately sized and additive update ratio \(\beta\) is not excessively small.

Figure 9: Performance of CondTSF with different update gaps and update ratios.

[MISSING_PAGE_FAIL:25]

Figure 12: Visualization of synthetic data.

Figure 13: Visualization of synthetic data.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: As shown in Sec.1, we explicitly claim the contributions of this work. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: As shown in Sec.6, we discuss the limitations of this work. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. 3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes]Justification: We propose two theorems in Sec.4. We provide complete proof of the two theorems in App.A.1 and App.A.2.

Guidelines:

* The answer NA means that the paper does not include theoretical results.
* All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced.
* All assumptions should be clearly stated or referenced in the statement of any theorems.
* The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.
* Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.
* Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: We provide the detailed algorithm in Sec.4. We provide detailed parameter settings to reproduce the results in Sec.5. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code**Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: We attach the code needed to reproduce the results with the paper. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: We provide detailed hyperparameter settings in Sec.5 that are necessary to reproduce the results. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: We repeat each experiment five times and the average and standard deviation of errors are reported in Sec.5. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).

* The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)
* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: As shown in Sec.5, we provide the model of the GPU we used for experiments. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: This work does not involve human subjects. As shown in Sec.5, the datasets used in this work are all widely used open-source datasets. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: This work does not involve human subjects. As shown in Sec.5, the datasets used in this work are widely used and open-source. There's no harm to humans or leak of privacy in this work. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.

* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: As shown in Sec.5, the datasets used in this work are all widely used and open-source. There's no risk of releasing unsafe data. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licensees for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: As shown in Sec.5, we cite the papers that produced the code. The datasets used in this work are all widely used and open-source. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.

* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [Yes] Justification: We provide documents with the code. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: This work does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: This work does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.