# Linear Time Approximation Algorithm for Column Subset Selection with Local Search

Yuanbin Zou\({}^{1,2}\), Ziyun Huang\({}^{3}\), Jinhui Xu\({}^{4}\), Jianxin Wang\({}^{1,2,5}\), Qilong Feng\({}^{1,2,}\)

\({}^{1}\)School of Computer Science and Engineering, Central South University,

Changsha 410083, China

\({}^{2}\)Xiangjiang Laboratory, Changsha 410205, China

\({}^{3}\)Department of Computer Science and Software Engineering, Penn State Erie,

The Behrend College

\({}^{4}\)Department of Computer Science and Engineering, State University of New York at Buffalo,

NY, USA

\({}^{5}\)The Hunan Provincial Key Lab of Bioinformatics, Central South University,

Changsha 410083, China

yuanbinzou@csu.edu.cn, csufeng@mail.csu.edu.cn,

zxh201@psu.edu, jinhui@buffalo.edu, jxwang@mail.csu.edu.cn

Corresponding Author

###### Abstract

The Column Subset Selection (CSS) problem has been widely studied in dimensionality reduction and feature selection. The goal of the CSS problem is to output a submatrix \(S\), consisting of \(k\) columns from an \(n\times d\) input matrix \(A\) that minimizes the residual error \(\|A-SS^{\dagger}A\|_{F}^{2}\), where \(S^{\dagger}\) is the Moore-Penrose inverse matrix of \(S\). Many previous approximation algorithms have non-linear running times in both \(n\) and \(d\), while the existing linear-time algorithms have a relatively larger approximation ratios. Additionally, the local search algorithms in existing results for solving the CSS problem are heuristic. To achieve linear running time while maintaining better approximation using a local search strategy, we propose a local search-based approximation algorithm for the CSS problem with exactly \(k\) columns selected. A key challenge in achieving linear running time with the local search strategy is how to avoid exhaustive enumerations of candidate columns for constructing swap pairs in each local search step. To address this issue, we propose a two-step mixed sampling method that reduces the number of enumerations for swap pair construction from \(O(dk)\) to \(k\) in linear time. Although the two-step mixed sampling method reduces the search space of local search strategy, bounding the residual error after swaps is a non-trivial task. To estimate the changes in residual error after swaps, we propose a matched swap pair construction method to bound the approximation loss, ensuring a constant probability of loss reduction in each local search step. In expectation, these techniques enable us to obtain the local search algorithm for the CSS problem with theoretical guarantees, where a \(53(k+1)\)-approximate solution can be obtained in linear running time \(O(ndk^{4}\log k)\). Empirical experiments show that our proposed algorithm achieves better quality and time compared to previous algorithms on both small and large datasets. Moreover, it is at least 10 times faster than state-of-the-art algorithms across all large-scale datasets.

Introduction

In machine learning, handling high-dimensional datasets often requires the use of dimensionality reduction techniques, among which Singular Value Decomposition (SVD) is one of the most commonly utilized techniques in practice. The goal of SVD is to minimize the Frobenius norm of the error, aiming to achieve a low-rank approximation of a matrix with theoretical guarantees. An alternative way is to select a small subset of columns from the matrix as representations to well approximate the given matrix, which is known as the Column Subset Selection (CSS) problem. The CSS problem has been widely studied in machine learning for dimensionality reduction with improved interpretability. As pointed out in [4; 27; 17; 13; 20], the number of selected columns \(k\) is much smaller than both \(n\) and \(d\), i.e., \(k\ll\min\{n,d\}\). We consider the following CSS problem.

**Definition 1.1**.: _Given a matrix \(A\in\mathbb{R}^{n\times d}\) and a positive integer \(k\), the goal of CSS problem is to select \(k\) columns of \(A\) forming a matrix \(S\in\mathbb{R}^{n\times k}\) that minimizes the residual error_

\[\|A-SS^{\dagger}A\|_{F}^{2},\]

_where \(S^{\dagger}\) represents the Moore-Penrose inverse matrix of \(S\), and \(\|A\|_{F}^{2}=\sum_{i=1}^{n}\sum_{j=1}^{d}A_{ij}^{2}\) denotes the square of Frobenius norm._

The CSS problem is known to be UG-hard [9]. For the CSS problem, several heuristic algorithms [2; 22; 23] were proposed. However, a main concern for these heuristics is the lack of theoretical guarantees on both the running time and approximation error. Several \((1+\epsilon)\)-approximation bi-criteria algorithms have been proposed for the CSS problem [19; 4; 13; 15]. Many of these algorithms achieve running time of \(O(nd\cdot\text{poly}(k))\), which is referred to as linear in both \(n\) and \(d\)[26; 11]. Although these algorithms achieve \((1+\epsilon)\)-approximation, they require selecting more than \(k\) columns. For the CSS problem with exactly \(k\) columns selected, Boutsidis et al. [5] proposed an \(O(k^{2}\log k)\)-approximation algorithm with \(O(\min\{n^{2}d,nd^{2}\})\) running time, using leverage score sampling and QR decomposition methods. Deshpande and Rademacher [13] proposed a volume sampling algorithm, which yields a \((k+1)\)-approximation in time \(O(kdn^{3}\log n)\). Guruswami and Sinop [19] gave an improved approximation algorithm with \(O(n^{2}dk)\) running time using fast volume sampling method, achieving the same \((k+1)\)-approximation. The running time of these algorithms has at least a quadratic dependence on \(n\) or \(d\). Deshpande and Vempala [15] presented a linear-time algorithm with \((k+1)!\)-approximation using adaptive sampling method.

Although the algorithm using the adaptive sampling method [15] achieves the linear running time, its approximation ratio is considerably larger than other algorithms. Moreover, as shown in [23], local search can improve the quality of the solution for the CSS problem. However, a potential limitation of the local search algorithm proposed in [23] is the lack of theoretical guarantees on the number of local search steps required for reaching a convergence.

To apply the local search strategy to handle the CSS problem, the running time of each iteration is quadratically dependent on \(d\), making it impractical for large-scale datasets. More specifically, the single-swap strategy in local search enumerates \(O(kd)\) swaps to improve the current solution, where the swap pair is constructed between the given matrix and the set of selected columns during the local search step. This method results in an \(O(nd^{2}k^{2})\) running time in each iteration, making it difficult to maintain linear running time in both \(n\) and \(d\). Secondly, to the best of our knowledge, there is no available result that provides an approximation guarantee for solving the CSS problem using the local search strategy.

### Our Contribution

In this paper, we propose a local search algorithm for solving the CSS problem with running time linear in both \(n\) and \(d\). The key challenge for the local search algorithm is to avoid the \(O(nd^{2}k^{2})\) running time caused by enumerating all possible swap pairs. To overcome this challenge, we propose a two-step mixed sampling method that selects a candidate column with a specific probability for swapping, reducing the enumeration of swap pairs from \(O(dk)\) to \(k\). By applying the two-step mixed sampling method, the running time of each local search step is reduced from \(O(nd^{2}k^{2})\) to \(O(ndk^{2})\).

Although the two-step mixed sampling method accelerates the local search process, bounding the residual error of the solution after swaps is a non-trivial task. Specifically, it is challenging to theoretically estimate the improvement in the approximation loss of the current solution after swaps.

To address this issue, we propose a matched swap-pair construction method. This method identifies matched column pairs between the current solution and the optimal solution. Based on these matched pairs, we guarantee that the two-step mixed sampling method can find a column. With constant probability, this column reduces the residual error of the updated solution by a multiplicative factor of \(1-\Theta(1/k)\) in each local search step. With this approach, the expected number of iterations can be bounded by \(O(k^{2}\log k)\). Therefore, we obtain a local search-based approximation algorithm with \(O(ndk^{4}\log k)\) running time. The main contributions of this paper are summarized as follows.

* For the CSS problem, we propose a new algorithm that uses local search with a two-step mixed sampling method. This method avoids the quadratic dependence of \(d\) on running time by reducing the number of swap pair enumerations during the local search process. Additionally, we propose a matched swap-pair construction method to bound the improvement of residual error during swaps. With these techniques, we achieve a \(53(k+1)\)-approximation with exactly \(k\) columns selected, where the running time of our proposed algorithm is \(O(ndk^{4}\log k)\).
* Numerical experiments show that our algorithm performs better in terms of quality on both small and large datasets compared to previous algorithms that selects exactly \(k\) columns, and is at least 10 times faster than the state-of-the-art algorithms on all large datasets.

### Related Work

Within the framework of rank-revealing QR factorization (RRQR) [6], several poly(\(k,d\))-approximation results [3; 7; 18] have been proposed. These results achieve running time of \(O(nd^{2})\) while selecting exactly \(k\) columns to solve the CSS problem with Frobenius norm error. Deshpande et al. [14] gave the lower bound of \((k+1)\)-approximation for the problem. Furthermore, Boutsidis et al. [5] proposed a randomized algorithm with \(O(\min\{n^{2}d,nd^{2}\})\) running time and \(O(k^{2}\log k)\)-approximation. More precisely, Deshpande and Rademacher [13] provided a deterministic \((k+1)\)-approximation with \(O(dn^{3}\log nk)\) running time. To improve the running time, Guruswami and Sinop [19] proposed an \(O(n^{2}dk)\) time randomized algorithm with \((k+1)\)-approximation. Additionally, there are many bi-criteria algorithms that relax the number of selected columns. Volume sampling methods have been widely applied to the CSS problem. Deshpande and Vempala [15] utilized these methods to achieve a PTAS, selecting \(O(k/\epsilon^{2}+k^{2}\log k)\) columns. Boutsidis et al. [4] proposed a linear-time algorithm with a \((1+\epsilon)\)-approximation, requiring \(O(k/\epsilon)\) columns selected. Guruswami and Sinop [19] developed a deterministic algorithm that also achieves a \((1+\epsilon)\)-approximation with \(O(k/\epsilon)\) columns selected. Civril and Magdon-Ismail [10] gave improved bounds for obtaining a PTAS using \(k\)-leverage score sampling and SVD, by selecting \(\widetilde{O}(k\log k/\epsilon^{2})\)2 columns. Altschuler et al. [1] developed a distributed greedy algorithm for the objective \(||SS^{t}A||_{F}^{2}\). Wang and Singh [28] studied the CSS problem in the missing-data case. Several bi-criteria algorithms have been proposed for the CSS problems with \(\ell_{1}\) norm [12; 21; 25; 8]. In both offline and online settings, Woodruff and Yasuda [29] provided several bi-criteria algorithms for the CSS problem with the \(\ell_{p}\) norm.

Footnote 2: \(\tilde{O}(n)\) denotes the asymptotic complexity, ignoring polylogarithmic factors, i.e., terms of the form \(\text{poly}(\log n)\).

## 2 Preliminaries

For any positive integer \(n\), let \([n]\) denote the set \(\{1,2,\ldots,n\}\). Given a matrix \(A\in\mathbb{R}^{n\times d}\), let \(A_{ij}\) be the element in the \(i\)-th row and the \(j\)-th column of \(A\), and define the Frobenius norm of \(A\) as

\begin{table}
\begin{tabular}{c c c c} \hline References & Approximation Ratio & Method & Running Time \\ \hline
[15] & \((k+1)!\) & adaptive sampling & \(O(ndk^{2})\) \\
[5] & \(O(k^{2}\log k)\) & leverage score sampling + QR decomposition & \(O(\min\{n^{2}d,nd^{2}\})\) \\
[13] & \(k+1\) & volume sampling & \(O(kn^{3}d\log n)\) \\
[19] & \(k+1\) & fast volume sampling & \(O(n^{2}dk)\) \\ \hline This paper & \(53(k+1)\) & local search + two-step mixed sampling & \(O(ndk^{4}\log k)\) \\ \hline \end{tabular}
\end{table}
Table 1: Comparison of existing results for the CSS Problem with exactly \(k\) columns selected, where \(n\) is the number of rows in the given matrix, \(d\) is the number of columns, and \(k\) is the number of selected columns.

\(\|A\|_{F}^{2}=\sum_{i=1}^{n}\sum_{j=1}^{d}A_{ij}^{2}\). Denote \(A_{:j}\) as the \(j\)-th column of \(A\), and \(A_{i:}\) as the \(i\)-th row of \(A\). Let \(A^{\top}\) be the transpose of \(A\) and \(A^{\dagger}\) be the Moore-Penrose inverse of \(A\). Given an \(n\times d\) matrix \(A\), let \(\mathcal{I}\) be the set of column indices from \(A\), and let \(A_{\mathcal{I}}\) denote the \(n\times|\mathcal{I}|\) submatrix of \(A\) consisting of the columns corresponding to the indices in \(\mathcal{I}\). For a matrix \(A\), the linear span of its column vectors is denoted as span \((A)\). For any two \(n\times d\) matrices \(A\) and \(B\), \(\|AB\|_{F}\leq\|A\|_{F}\|B\|_{2}\) and \(\|AB\|_{F}\leq\|A\|_{2}\|B\|_{F}\). Given any matrix \(A\in\mathbb{R}^{n\times d}\), the singular value decomposition (SVD) of \(A\) can be written as \(A=\sum_{i=1}^{n}\sigma_{i}u_{i}v_{i}^{\top}\), where \(\sigma_{1}\geq\ldots\geq\sigma_{n}\geq 0\) are the singular values, \(\{u_{1},\ldots,u_{n}\}\subseteq\mathbb{R}^{n}\) are the left singular vectors, and \(\{v_{1},\ldots,v_{d}\}\subseteq\mathbb{R}^{d}\) are the right singular vectors. Denote \(rank(A)\) be the rank of a matrix \(A\), which is the number of non-zero singular values of \(A\). Moreover, we denote \(A_{k}=\sum_{i=1}^{k}\sigma_{i}u_{i}v_{i}^{\top}\) as the best rank-\(k\) approximation to \(A\) under the Frobenius norm. The spectral norm of \(A\), denoted by \(\|A\|_{2}\), is defined as the largest singular value of \(A\), i.e., \(\|A\|_{2}=\sigma_{\max}(A)\). Given a solution \(S\) to the CSS problem on matrix \(A\), we define the residual error of \(S\) as \(f(A,S)=\|A-SS^{\dagger}A\|_{F}^{2}\).

## 3 Linear Time Local Search Algorithm for CSS Problem

In this section, we propose a local search approximation algorithm for solving the CSS problem, called LSCSS, which maintains a running time linear in both \(n\) and \(d\). Directly applying single-swaplocal search to solve the CSS problem results in an \(O(nd^{2}k^{2})\) running time by enumerating all possible swap pairs. Thus, it is challenging to apply the local search method to solve the CSS problem while maintaining a linear dependence on both \(n\) and \(d\) in the running time. To avoid \(O(nd^{2}k^{2})\) running time in each local search step, we propose a two-step mixed sampling method to reduce the running time from \(O(nd^{2}k^{2})\) to \(O(ndk^{2})\). Although the sampling method reduces the running time by directly using the single-swap local search, analyzing the bound of improvement on the residual error after swaps is a difficult task. To provide a theoretical analysis for the local search step, we propose a matched swap pair construction method to bound the improvement on the residual error during swaps. By carefully analyzing the improvement, we show that our proposed algorithm achieves \(53(k+1)\)-approximation with \(O(ndk^{4}\log k)\) running time. The detailed algorithm for the CSS problem is given in Algorithm 1.

The LSCSS algorithm mainly comprises local search and two-stage mixed sampling components. The high-level idea behind our proposed local search is to identify a swap pair that minimizes the residual error in each iteration. The swap pair consists of a column from the input matrix to swap in and a column from the current solution to swap out. By repeating this process, the algorithm produces an updated solution with better quality. Moreover, the two-stage mixed sampling method involves two steps for obtaining a candidate column from the input matrix. Firstly, a set of column indices is constructed by sampling each column with probability proportional to its residual error for the current solution. Then, a column is uniformly selected from the set of candidate indices as the final column to swap in. To ensure that the input matrix for the local search process is full rank, we construct a new matrix \(A^{\prime}\) by adding a small perturbation matrix \(D\) to the original matrix \(A\) during the initialization, where \(D\) is full-rank and has non-zero values only on its diagonal. The full-rank property of \(A^{\prime}\) is used in subsequent analysis.

The LSCSS algorithm begins by obtaining an initial solution \(S\) with exactly \(k\) columns and constructing a full-rank matrix \(A^{\prime}\) during the initialization (steps 1-12 of Algorithm 1), which achieves a \((k+1)!\)-approximate solution on \(A^{\prime}\). We start by initializing an index set \(\mathcal{I}\) and setting the matrix \(E=A\). A new column index is added to \(\mathcal{I}\) by sampling each column index \(i\) from \([d]\) with probability proportional to \(p_{i}=\|E_{:i}\|_{2}^{2}/\|E\|_{F}^{2}\). Then, \(E\) is updated as \(E=A-A_{\mathcal{I}}A_{\mathcal{I}}^{\dagger}A\). Repeating this process \(k\) times, we obtain an initial solution \(S=A_{\mathcal{I}}\). To construct a full-rank matrix, we construct an \(n\times d\) zero matrix \(D\) and compute the parameter \(\alpha=\|A-SS^{\dagger}A\|_{F}/(52\min\{n,d\}(k+1)!)^{-1/2}\) using the initial solution \(S\) and \(A\). Each diagonal entry \(D_{ii}\) is set to \(\alpha\). Since \(\text{rank}(A+D)=\text{rank}(D)\), we construct the full-rank matrix \(A^{\prime}\) by adding the full-rank matrix \(D\) to the input matrix \(A\). To solve the CSS problem on \(A^{\prime}\), we execute steps 3-6 of Algorithm 1 to obtain the solution \(S=A_{\mathcal{I}}^{\prime}\). The detailed process described in steps 1-12 of Algorithm 1 requires \(O(ndk^{2})\) time.

The local search performed in steps 13-15 of Algorithm 1 plays a crucial role in LSCSS, involving two main steps. Firstly, we compute the matrix \(E=A^{\prime}-SS^{\dagger}A^{\prime}\) for the current solution \(S\). Then, a set \(C\) of \(10k\) column indices is constructed by sampling each column index \(i\) from \([d]\) with probability \(p_{i}=\|E_{:i}\|_{2}^{2}/\|E\|_{F}^{2}\). Next, a column index \(p\) is uniformly selected from \(C\), referred to as the "swap-in" column index. Let \(\mathcal{I}\) denote the set of column indices of \(S\) in \(A^{\prime}\). Subsequently, if there exists an index \(q\in I\) such that \(f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{q\}\cup\{p\}})<f(A^{\prime},S)\), we choose \(q\) as the "swap-out" column index and update the set of indices to \(\mathcal{I}=\mathcal{I}\setminus\{q\}\cup\{p\}\). Finally, Algorithm 2 returns the solution \(S=A^{\prime}_{\mathcal{I}}\). After repeating this process \(T=O(k^{2}\log k)\) times, Algorithm 1 returns the final solution \(S\) for the input matrix \(A\).

In the following, we explain in more detail how our proposed local search algorithm achieves a \(53(k+1)\)-approximation for the original matrix \(A\). Given an initial solution, the main idea for analyzing the approximation ratio of our algorithm is to bound the improvement on residual error during the swaps in the local search step. To achieve this bound, we propose a matched swap pair construction method that guarantees an improvement in the current solution by swapping one column (Lemma 3.6 and Lemma 3.7). By carefully analyzing the improvement, we show that with constant probability the approximation loss of the current solution can be reduced by a multiplicative factor of \(1-\Theta(1/k)\) in each iteration of the local search algorithm (Lemma 3.8). This implies that after \(O(k^{2}\log k)\) iterations, we have \(\|A^{\prime}-SS^{\dagger}A^{\prime}\|_{F}^{2}\leq 26(k+1)\|A^{\prime}-A^{ \prime}_{k}\|_{F}^{2}\) (Theorem 3.9). Finally, by analyzing the change in the residual error caused by removing matrix \(D\) from \(A^{\prime}\), we obtain \(\|A^{\prime}-SS^{\dagger}A^{\prime}\|_{F}^{2}\leq 53(k+1)\|A-A_{k}\|_{F}^{2}\) in expectation (Lemma 3.10).

We assume that the matrix \(A\) has been normalized such that \(\|A\|_{F}^{2}=1/4\). Otherwise, we can normalize each element \(A_{ij}\) in \(A\) as \(A_{ij}=\frac{A_{ij}}{2\|A\|_{F}}\). Next, we consider a single iteration of Algorithm2. We assume that the current solution has a high residual error (larger than \(25(k+1)\|A^{\prime}-A^{\prime}_{k}\|_{F}^{2}\) before executing Algorithm 2 on \(A^{\prime}\). Otherwise, the initial solution \(S\) is a \(25(k+1)\)-approximation for the input matrix \(A^{\prime}\).

Let \(S^{*}=\{s^{*}_{1},\ldots,s^{*}_{k}\}\) be the optimal solution with exactly \(k\) selected for \(A^{\prime}\), and let \(S=\{s_{1},\ldots,s_{k}\}\) be the current solution. We define \(\phi(A^{\prime},S^{*},S,s^{*})=\arg\min_{s\in S}f(A^{\prime},S^{*}\backslash \{s^{*}\}\cup\{s\})\) as a mapping function that finds \(s\) from \(S\) such that the residual error \(f(A^{\prime},S^{*}\backslash\{s^{*}\}\cup\{s\})\) is minimized. Thus, we say that \(s^{*}\) is captured by \(\phi(A^{\prime},S^{*},S,s^{*})\). Each column \(s^{*}\in S^{*}\) is captured by exactly one column from \(S\). Let \(\mathcal{I}\) denote the set of column indices of \(S\) in matrix \(A^{\prime}\). We denote \(L\) as the set of columns indices in \(S\) that do not capture any optimal columns. We denote \(H\) as the set of indices where each column in \(S\) captures exactly one optimal column.

The main idea behind the matched swap pair construction method is to analyze the change in residual error caused by swapping an index from set \(H\) (or \(L\)) with an index from a sampled column, using a two-step mixed sampling approach for the current solution \(S\). For the column \(s_{h}\) (where \(h\in H\)) in \(S\), \(s_{h}\) captures exactly the column \(s^{*}_{h}\) of the optimal solution \(S^{*}\), serving as the candidate column for \(s^{*}_{h}\). If the residual error of swapping \(s_{h}\) to replace \(s^{*}_{h}\) is large, we prove that with constant probability, sampling a new column can reduce the residual error and update \(s_{h}\). Similarly, for the column \(s_{l}\) (where \(l\in L\)) in \(S\), \(s_{l}\) does not match any optimal column. We also show that, with constant probability, sampling a column from the input matrix \(A^{\prime}\) can reduce the residual error for columns in set \(L\). To analyze the improvement in residual error during swaps, we focus on a single swap process, evaluating both the increase in residual error from removing a column \(s\) from \(S\) and the decrease in residual error from inserting a new column. We give the following definition to measure the change resulting from removing a column.

**Definition 3.1**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, and let \(S\) be a solution on \(A^{\prime}\). Let \(\mathcal{I}\) be the set of column indices of \(S\). The change in residual error by removing the column \(i\) from \(\mathcal{I}\) is defined as_

\[\tau(A^{\prime},S,\mathcal{I}\backslash\{i\})=f(A^{\prime},A^{\prime}_{ \mathcal{I}\backslash\{i\}})-f(A^{\prime},S).\]

To bound \(\tau(A^{\prime},S,\mathcal{I}\backslash i)\) of solution \(S\) on the matrix \(A^{\prime}\), we provide the theoretical guarantee in the following lemma. (Detailed proof of Lemma 3.2 is given in Appendix A.1)

**Lemma 3.2**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, and let \(S\) be a solution on \(A^{\prime}\). Let \(\mathcal{I}\) be the set of the column indices in \(S\). For \(i\in\mathcal{I}\), we have_

\[\tau(A^{\prime},S,\mathcal{I}\backslash\{i\})\leq\|A^{\prime}_{ \mathcal{I}}A^{\prime}_{\mathcal{I}}A^{\prime}\|_{F}^{2}.\]

To further analyze the bound on \(\tau(A^{\prime},S,\mathcal{I}\backslash\{i\})\), we decompose the projection matrix \(A^{\prime}_{\mathcal{I}}A^{\prime}_{\mathcal{I}}A^{\prime}\) and show that the expected upper bound of \(\tau(A^{\prime},S,\mathcal{I}\backslash\{i\})\) is proportional to \(\|A^{\prime}\|_{F}^{2}\). (Detailed proof of Lemma 3.3 is given in Appendix A.1)

**Lemma 3.3**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, \(k\) be a positive integer, and let \(\mathcal{I}\) be the set of column indices of \(S\) for the CSS problem on \(A^{\prime}\). In expectation, the following inequality holds_

\[\|A^{\prime}_{\mathcal{I}}A^{\prime}_{\mathcal{I}}A^{\prime}\|_{F}^{2}\leq \frac{k^{2}}{d^{2}}\|A^{\prime}\|_{F}^{2}.\]

In the following, we theoretically bound the residual error resulting from adding a candidate column index \(p\) to the set \(\mathcal{I}\) of column indices in \(S\), where \(p\) is chosen using the two-step mixed sampling method. (Detailed proof of Lemma 3.4 is given in Appendix A.1)

**Lemma 3.4**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, \(k\) be a positive integer, and let \(S\) be a solution with the set \(\mathcal{I}\) of column indices in \(S\). Let \(E=A^{\prime}-SS^{\dagger}A^{\prime}\). The column index \(p\) is obtained by executing steps 2-3 of Algorithm 2. In expectation, the following inequality holds_

\[f(A^{\prime},A^{\prime}_{\mathcal{I}\cup\{p\}})\leq f_{k}(A^{\prime},opt)+ \frac{1}{10}f(A^{\prime},S),\]

_where \(f_{k}(A^{\prime},opt)\) denotes the best rank-\(k\) solution._

According to the aforementioned mapping function \(\phi(\cdot)\), we obtain the subset \(H\) from the set \(\mathcal{I}\) of column indices and the set \(R=\mathcal{I}\backslash H\). By using the matched swap pair construction method, there are two cases for the residual error of the current solution:1. For the set \(H\), where \(\sum_{h\in H}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{h\}})>\frac{21}{50} \sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{i\}})\).
2. For the set \(R=\mathcal{I}\backslash H\), where \(\sum_{r\in R}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{r\}})\geq\frac{29 }{50}\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{i\}})\).

By Lemma 3.2 and Lemma 3.4, we define the good columns \(s_{i}\) for \(i\in\mathcal{I}\) with respect to \(S\) as follows.

**Definition 3.5**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, and let \(k\) be a positive integer. Let \(S^{*}\) be the optimal solution with exactly \(k\) columns selected, and let \(\mathcal{I}^{*}\) be the set of column indices in \(S^{*}\). Let \(S\) be any solution with exactly \(k\) columns selected, and let \(\mathcal{I}\) be the set of column indices in \(S\). A column index \(i\in\mathcal{I}\) is called good if_

\[f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{i\}})-\tau(A^{ \prime},S,\mathcal{I}\setminus\{i\})-\tau(A^{\prime},A^{\prime}_{\mathcal{I} \cup\{p\}},(\mathcal{I}\cup\{p\})\backslash\{i\})\] \[-\frac{11}{10}\left(f(A^{\prime},A^{\prime}_{\mathcal{I}^{*} \setminus\{i^{*}\}})+\frac{1}{10}f(A^{\prime},S)\right)>\frac{1}{100k}f(A^{ \prime},S),\]

_where \(i^{*}\in\mathcal{I}^{*}\) is the column index mapped from \(i\in\mathcal{I}\) by the function \(\phi(\cdot)\), and \(p\) is a column index obtained by executing steps 2-3 of Algorithm 2._

Definition 3.5 estimates the gain from replacing the column \(s_{h}\) with a new column obtained using the two-step sampling method. Next, we argue that if case (1) happens, the sum of residual errors for the good columns is large. (Detailed proof of Lemma 3.6 is given in Appendix A.1)

**Lemma 3.6**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, \(k\) be a positive integer, and let \(S\) be the solution to the CSS problem on \(A^{\prime}\). Let \(\mathcal{I}\) be the set of column indices in \(S\). If \(50\sum_{h\in H}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{h\}})\geq 21 \sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{i\}})\) and \(f(A^{\prime},S)\geq 25(k+1)f_{k}(A^{\prime},opt)\), we have_

\[\sum_{h\in H,h\,is\,good}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{h\}}) \geq\frac{1}{125}\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}_{\mathcal{I} \setminus\{i\}}).\]

Since \(R=\mathcal{I}\backslash H\), it holds that \(L\subseteq R\). The index set \(R\) contains two subsets: \(L\) and \(R\backslash L\), where the indices in \(L\) do not capture any optimal columns according to the mapping function \(\phi(\cdot)\) and the indices in \(R\backslash L\) capture at least two columns. Similar to case (1), we argue that if case (2) occurs, the sum of residual errors for the good columns is large. (Detailed proof of Lemma 3.7 is given in Appendix A.1)

**Lemma 3.7**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, \(k\) be a positive integer, and let \(S\) be a solution for the CSS problem on matrix \(A^{\prime}\). Let \(\mathcal{I}\) be the set of column indices in \(S\). If \(\sum_{r\in R}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{r\}})\geq 29/50 \sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{i\}})\) and \(f(A^{\prime},S)\geq 25(k+1)f_{k}(A^{\prime},opt)\), we have_

\[\sum_{r\in R,r\,is\,good}f(A^{\prime},A^{\prime}_{\mathcal{I}\setminus\{r\}}) \geq\frac{1}{125}\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}_{\mathcal{I} \setminus\{i\}}).\]

In the following, we prove that if the residual error of the current solution is larger than \(25(k+1)f_{k}(A^{\prime},opt)\), each local search step reduces the residual error by a factor of \(1-\Theta(\frac{1}{k})\) with constant probability. (Detailed proof of Lemma 3.8 is given in Appendix A.1)

**Lemma 3.8**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) and \(S\in\mathbb{R}^{k\times d}\) be the input matrices for Algorithm 2, where \(k\) is a positive integer and \(S\) is the solution of the CSS problem on \(A^{\prime}\). Suppose that \(f(A^{\prime},S)\geq 25(k+1)\cdot f_{k}(A^{\prime},opt)\). Then, with probability at least \(1/1375\), Algorithm 2 returns a new solution \(S^{\prime}\) with_

\[f(A^{\prime},S^{\prime})\leq(1-1/(100k))f(A^{\prime},S).\]

Subsequently, we prove that the LSCSS algorithm achieves a \(26(k+1)\)-approximation for \(A^{\prime}\) after \(O(k^{2}\log k)\) iterations.

**Theorem 3.9**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be the input matrix obtained in step 12 of Algorithm 1, let \(k\) be a positive integer, and let \(S\) be the solution returned after executing Algorithm 2\(T=O(k^{2}\log k)\) times. Then, it holds that_

\[\mathbb{E}[\|A^{\prime}-SS^{\dagger}A^{\prime}\|_{F}^{2}]\leq 26(k+1)\|A^{ \prime}-A^{\prime}_{k}\|_{F}^{2},\]

_where \(A^{\prime}_{k}\) is the best rank-\(k\) approximation of \(A^{\prime}\) for the CSS problem. The running time of Algorithm 1 is \(O(ndk^{4}\log k)\)._Proof.: Let \(\hat{S}\) denote the submatrix consisting of \(k\) columns obtained in step 12 of Algorithm 1. For the initial solution \(\hat{S}\), Deshpande and Vempala [15] provide an approximation ratio of \((k+1)!\). Before executing steps 13-15 of Algorithm 1, the residual error of the initial solution \(\hat{S}\) is larger than \(25(k+1)\|A^{\prime}-A_{k}^{\prime}\|_{F}^{2}\). According to Lemma 3.8, with probability \(1/1375\), we can reduce the residual error by a multiplicative factor of \((1-1/100k)\).

Let \(T=O(k^{2}\log k)\). We define a random process \(\mathcal{P}\) with initial residual error \(\|A^{\prime}-\hat{S}\hat{S}^{\dagger}A^{\prime}\|_{F}^{2}\) of the solution \(\hat{S}\) such that for \(T\) iterations of Algorithm 2, it reduces the value of \(\|A^{\prime}-\hat{S}\hat{S}^{\dagger}A^{\prime}\|_{F}^{2}\) by at least \((1-\frac{1}{100k})\) with probability \(1/1375\), and it increases the final value of \(\|A^{\prime}-\hat{S}\hat{S}^{\dagger}A^{\prime}\|_{F}^{2}\) by \(25(k+1)\|A^{\prime}-A_{k}^{\prime}\|_{F}^{2}\). It is obvious that \(\mathbb{E}[\|A^{\prime}-SS^{\dagger}A^{\prime}\|_{F}^{2}]\leq\mathbb{E}[\|A^{ \prime}-\hat{S}\hat{S}^{\dagger}A^{\prime}\|_{F}^{2}]\). Then, we have

\[\mathbb{E}[\mathcal{P}]= 25(k+1)\|A^{\prime}-A_{k}^{\prime}\|_{F}^{2}+\|A^{\prime}-\hat{S} \hat{S}^{\dagger}A^{\prime}\|_{F}^{2}\cdot\sum_{i=0}^{T}\binom{T}{i}\frac{i}{1 375}\frac{1374}{1375}^{T-i}\left(1-\frac{1}{100k}\right)^{i}\] \[\leq \|A^{\prime}-\hat{S}\hat{S}^{\dagger}A^{\prime}\|_{F}^{2}\cdot \left(1-\frac{1}{137500k}\right)^{137500k\log(k+1)!}+25(k+1)\|A^{\prime}-A_{k} ^{\prime}\|_{F}^{2}\] \[\leq \frac{\|A^{\prime}-\hat{S}\hat{S}^{\dagger}A^{\prime}\|_{F}^{2}} {(k+1)!}+25(k+1)\|A^{\prime}-A_{k}^{\prime}\|_{F}^{2}.\]

This implies that \(\mathbb{E}[\|A^{\prime}-SS^{\dagger}A^{\prime}\|_{F}^{2}|\hat{S}]\leq\frac{\| A^{\prime}-\hat{S}\hat{S}^{\dagger}A^{\prime}\|_{F}^{2}}{(k+1)!}+25(k+1)\|A^{ \prime}-A_{k}^{\prime}\|_{F}^{2}\).

Thus, we obtain

\[\mathbb{E}[\|A^{\prime}-SS^{\dagger}A^{\prime}\|_{F}^{2}] =\sum_{\hat{S}}\mathbb{E}[\|A^{\prime}-SS^{\dagger}A^{\prime}\|_ {F}^{2}|\hat{S}]Pr(\hat{S})\] \[\leq\sum_{\hat{S}}Pr(\hat{S})\left(\frac{\|A^{\prime}-\hat{S} \hat{S}^{\dagger}A^{\prime}\|_{F}^{2}}{(k+1)!}+25(k+1)\|A^{\prime}-A_{k}^{ \prime}\|_{F}^{2}\right)\] \[\leq\frac{E[\|A^{\prime}-\hat{S}\hat{S}^{\dagger}A^{\prime}\|_{F }^{2}]}{(k+1)!}+25(k+1)\|A^{\prime}-A_{k}^{\prime}\|_{F}^{2}.\]

Since \(\|A^{\prime}-\hat{S}\hat{S}^{\dagger}A^{\prime}\|_{F}^{2}\leq(k+1)!\|A^{ \prime}-A_{k}^{\prime}\|_{F}^{2}\) in expectation, we have \(\mathbb{E}[\|A^{\prime}-SS^{\dagger}A^{\prime}\|_{F}^{2}]\leq 26(k+1)\|A^{\prime}-A_{k}^{ \prime}\|_{F}^{2}\).

**Running Time Analysis.** In LSCSS algorithm, the process of constructing the initial solution in the steps 2-11 of Algorithm 1 takes \(O(ndk^{2})\) time. In order to obtain an \(O(k+1)\)-approximate solution, Algorithm 2 requires \(O(k^{2}\log k)\) iterations. In each iteration, computing the residual matrix requires \(O(ndk)\) time. The steps 4-8 of Algorithm 2 require \(O(ndk^{2})\) time to recalculate the residual error. Therefore, the overall running time of Algorithm 1 is \(O(ndk^{4}\log k)\). 

In the following, we analyze the change in residual error caused by replacing the input matrix \(A\) with \(A^{\prime}=A+D\), which leads to the final solution of Algorithm 1 achieving a \(53(k+1)\)-approximation. (Detailed proof of Lemma 3.10 is given in Appendix A.1)

**Lemma 3.10**.: _Let \(A\in\mathbb{R}^{n\times d}\) be an input matrix, and let \(k\) be a positive integer. Define \(D\) as an \(n\times d\) matrix with elements_

\[D_{ij}=\begin{cases}\frac{\|A-S_{1}S_{1}^{\dagger}A\|_{F}}{(52\min\{n,d\}(k+1) )^{1/2}},&\text{if }i=j\\ 0,&\text{otherwise}\end{cases},\]

_where \(S_{1}\) is obtained by executing the first round of steps 3-6 in Algorithm 1. Let \(A^{\prime}=A+D\). The solution \(S_{2}\) returned by executing Algorithm 2 for \(T=O(k^{2}\log k)\) iterations satisfies_

\[\mathbb{E}[\|A^{\prime}-S_{2}S_{2}^{\dagger}A^{\prime}\|_{F}^{2}]\leq 53(k+1)\|A-A_{k} \|_{F}^{2},\]

_where \(A_{k}\) is the best rank-\(k\) approximation for \(A\)._Experiments

In this section, we compare our algorithm for the CSS problem with the previous ones. For hardware, all the experiments are conducted on a machine with 72 Intel Xeon Gold 6230 CPUs and 2TB memory.

Datasets.In this paper, we evaluate the performance of our algorithms on a total of 22 real-world datasets. In previous studies [23, 1], the CSS problem typically involves datasets with no more than 100,000 rows and 20,000 columns. We include the 14 smaller datasets listed in Table 5 (Appendix A.2). To extend the evaluation to larger datasets, we include 8 additional datasets detailed in Table 2. Six datasets contain between 40,000 and 480,000 columns, and two contain 400,000 and 8 million rows, respectively. All datasets can be found on the website34.

Footnote 3: https://archive.ics.uci.edu/datasets

Footnote 4: https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/

Algorithms and parameters.In our experimental evaluation, we consider the following five distinct algorithms:

* TwoStage. This is a two-stage algorithm from [5] that combines leverage score sampling and rank-revealing QR factorization.
* Greedy. This is an algorithm in [16, 1], which uses greedy algorithm to generate solution.
* VolumeSampling. This is an algorithm in [13], which uses volume sampling method.
* ILS. This is an algorithm in [23], which uses heuristic local search method.
* LSCSS. This is our algorithm given in Algorithm 1, which uses the two-step mixed sampling and local search methods.

MethodologyWe use the error ratio to evaluate the effectiveness of various algorithms, as defined in [23]. The error ratio is given by the formula \(\|A-SS^{\dagger}A\|_{F}^{2}/\|A-A_{k}\|_{F}^{2}\), where it quantifies the discrepancy between the selected columns and the optimal rank-\(k\) matrix approximation. A smaller error ratio indicates better algorithm performance. Following [23], we test the TwoStage, VolumeSampling, ILS, and LSCSS algorithms on each dataset 10 times to calculate the average error ratio and running time. Since the Greedy algorithm is deterministic, it is tested only once per dataset.

Experimental setup.For the CSS problem with the Frobenius norm, we run the TwoStage, Greedy, ILS, and LSCSS algorithms on both the 8 large datasets and 14 small datasets, providing the average results for each method. The ILS and our LSCSS algorithm are based on local search method. For fair comparison, we set the number of iterations to be \(2k\) for ILS and LSCSS. Since the VolumeSampling requires \(O(dkn^{3}\log n)\) runtime and \(O(n^{2}+d^{2})\) memory, it cannot handle the 8 large datasets because the algorithm requires more than 48 hours of runtime and over 2TB of memory. However, the other four algorithms generally produce a solution within 48 hours and with less than 2TB of memory. Thus, we only include VolumeSampling in the comparison on the 14 smaller datasets and exclude its results from Tables 3 and 4.

\begin{table}
\begin{tabular}{c c c} \hline
**Datasets** & **Instances** & **Features** \\ \hline Condition Monitoring of Hydraulic Systems(CMHS) & 2205 & 43680 \\ Farm Ads (FAs) & 4143 & 54877 \\ Electricity Load Diagrams (ELD) & 370 & 140256 \\ Gas & 180 & 150000 \\ YaleB & 16380 & 307200 \\ Twin Gas Sensor Arrays (TGas) & 640 & 4800000 \\ Epsilon & 4000000 & 2000 \\ Mnist8m & 8000000 & 784 \\ \hline \end{tabular}
\end{table}
Table 2: Summary of the datasetsResults for the CSS problem.Table 3 shows the comparison of running time for varying values of \(k\), where the time is measured by seconds. LSCSS is at least 10 times faster than other algorithms across all datasets and at least 15 times faster than the TwoStage and Greedy algorithms. Our algorithm successfully outputs a feasible solution within 5 hours on all datasets, whereas other algorithms fail to do so within 48 hours or need more than 2TB memory. The comparison of error ratios, reported as mean\(\pm\)std with the best results highlighted in bold, is presented in Table 4 in the Appendix A.2. The LSCSS algorithm achieves the best error ratios on almost all datasets.

Moreover, we compare the running time and error ratio of five algorithms with varying values of \(k\) on 14 small datasets (Appendix A.2). The experimental results show that the LSCSS algorithm outperforms other algorithms in terms of quality and is at least 2 times faster than Greedy, VolumeSampling and ILS algorithms on all small datasets.

## 5 Conclusion

In this paper, we propose a linear-time approximation algorithm for the CSS problem using local search and two-step mixed sampling methods. Experimental results demonstrate that our framework outperforms previous algorithms for solving the CSS problem with exactly \(k\) columns selected. An interesting future direction is how to design multi-swap local search approximation algorithms for handling the CSS problem.

## Acknowledgments

This work was supported by National Natural Science Foundation of China (62432016, 62172446), Open Project of Xiangjiang Laboratory (22XJ02002), and Central South University Research Programme of Advanced Interdisciplinary Studies (2023QYJC023). This work was also carried out in part using computing resources at the High Performance Computing Center of Central South University.

\begin{table}
\begin{tabular}{c c c c c|c c c c c} \hline
**Dataset** & **k** & **TwoStage** & **Greedy** & **ILS** & ** LSCSS** & **Dataset** & **k** & **TwoStage** & **Greedy** & **ILS** & ** LSCSS** \\ \hline \multirow{9}{*}{CMHS} & 5 & 343.91 & 493.43 & 18.43 & **2.82** & & 5 & 228.66 & 127.31 & 143.08 & **3.40** \\  & 10 & 548.58 & 716.27 & 54.59 & **5.17** & 10 & 226.53 & 248.89 & 498.29 & **10.58** \\  & 15 & 647.34 & 1045.83 & 122.49 & **13.39** & & 15 & 219.35 & 369.95 & 1032.53 & **17.65** \\  & 20 & 847.87 & 1362.44 & 219.43 & **30.45** & & 20 & 221.97 & 495.09 & 1744.18 & **18.27** \\  & 25 & 1150.13 & 1679.30 & 331.24 & **43.27** & & 25 & 229.24 & 624.69 & 2659.60 & **22.29** \\  & 30 & 1249.27 & 1955.13 & 476.28 & **52.82** & & 30 & 232.34 & 749.99 & 3789.49 & **22.76** \\  & 50 & 1364.90 & 2598.43 & 1321.73 & **62.36** & & 50 & 291.93 & 1265.93 & 10363.85 & **36.04** \\  & 100 & 1552.57 & 2736.06 & 4457.66 & **108.98** & 100 & 539.00 & 2738.69 & 44037.65 & **95.67** \\ \hline \multirow{9}{*}{ELD} & 5 & 434.60 & 245.14 & 25.28 & **2.18** & & 5 & 822.75 & 312.98 & 154.37 & **17.15** \\  & 10 & 539.22 & 436.11 & 50.98 & **3.47** & & 10 & 1205.25 & 617.40 & 539.61 & **30.28** \\  & 15 & 740.71 & 621.19 & 970.50 & **5.36** & & 15 & 1668.43 & 960.75 & 1202.76 & **36.99** \\  & 20 & 940.42 & 1598.41 & 418.07 & **13.93** & & 20 & 2295.85 & 1335.77 & 2095.39 & **49.90** \\  & 25 & 1237.54 & 1710.38 & 236.24 & **22.98** & & TQAS & 25 & 2769.69 & 1767.18 & 3349.04 & **61.36** \\  & 30 & 1536.68 & 2307.04 & 291.32 & **35.03** & & 30 & 3818.48 & 2230.84 & 4760.69 & **77.93** \\  & 50 & 1378.76 & 3649.70 & 727.45 & **66.27** & & 50 & 7098.36 & 4419.23 & 6772.58 & **114.23** \\  & 100 & 2384.16 & 5940.40 & 2696.24 & **89.94** & & 100 & 9186.20 & 12439.81 & 9352.80 & **243.89** \\ \hline \multirow{9}{*}{Gas} & 5 & 404.52 & 426.89 & 56.71 & **5.83** & & 5 & 5OM & 17214.54 & 2190.74 & **175.24** \\  & 10 & 597.72 & 785.37 & 148.36 & **11.67** & & 10 & OOM & 221120.58 & 9855.42 & **501.67** \\  & 15 & 858.04 & 1162.98 & 202.17 & **19.30** & & 15 & OOM & \(>\)48h & 127824.29 & **793.47** \\  & 20 & 1312.71 & 1546.90 & 428.71 & **47.90** & & 20 & OOM & \(>\)48h & 23694.02 & **1082.21** \\  & 25 & 1714.95 & 1977.13 & 1623.66 & **130.11** & & 25 & OOM & \(>\)48h & 35229.86 & **1756.18** \\  & 30 & 2237.17 & 33137.14 & 4658.71 & **322.92** & & 30 & OOM & \(>\)48h & -48h & **4108.82** \\  & 50 & 4944.07 & 7852.03 & 7088.39 & **386.15** & & 50 & OOM & \(>\)48h & \(>\)48h & **7127.35** \\  & 100 & 2953.59 & 12703.14 & 12190.91 & **950.50** & & 100 & OOM & \(>\)48h & -48h & **13865.08** \\ \hline \multirow{9}{*}{Mnist8m} & 5 & 18125.23 & 5564.512 & 3255.38 & **483.02** & & 5 & 8916.54 & 1067.48 & 283.22 & **24.85** \\  & 10 & 22126.92 & 3476.58 & 221587.49 & **2991.29** & & 10 & 9221.10 & 2111.57 & 979.81 & **38.71** \\ \cline{1-1}  & 15 & 48\(\pm\)48 & \(\pm\)48h & 53973.46 & **3420.13** & & 15 & 4926.96 & 3193.27 & 2093.51 & **69.00** \\ \cline{1-1}  & 20 & \(>\)48h & \(\pm\)48h & \(\pm\)48h & **6690.07** & Epsilon & 20 & 10330.94 & 4332.60 & 3645.36 & **102.46** \\ \cline{1-1}  & 25 & \(>\)48h & \(\pm\)48h & \(\pm\)48h & **8485.13** & & 25 & 10928.29 & 5570.65 & 5564.13 & **163.25** \\ \cline{1-1}  & 30 & \(>\)48h & \(\pm\)48h & \(\pm\)48h & **9495.18** & & 30 & 1171.33 & 6861.29 & 7277.87 & **352.39** \\ \cline{1-1}  & 50 & \(>\)48h & \(\pm\)48h & \(\pm\)48h & **13236.29** & & 50 & 13839.09 & 14251.47 & 16939.53 & **662.20** \\ \cline{1-1}  & 100 & \(>\)48h & \(\pm\)48h & \(\pm\)48h & **169

## References

* [1] Jason M. Altschuler, Aditya Bhaskara, Gang Fu, Vahab S. Mirrokni, Afshin Rostamizadeh, and Morteza Zadimoghaddam. Greedy column subset selection: New bounds and distributed algorithms. In _Proceedings of the 33rd International Conference on Machine Learning_, pages 2539-2548, 2016.
* [2] Hiromasa Arai, Crystal Maung, and Haim Schweitzer. Optimal column subset selection by A-star search. In _Proceedings of the 29th AAAI Conference on Artificial Intelligence_, pages 1079-1085, 2015.
* [3] Christian H Bischof and Gregorio Quintana-Orti. Computing rank-revealing QR factorizations of dense matrices. _ACM Transactions on Mathematical Software_, 24(2):226-253, 1998.
* [4] Christos Boutsidis, Petros Drineas, and Malik Magdon-Ismail. Near optimal column-based matrix reconstruction. In _Proceedings of the 52nd IEEE Annual Symposium on Foundations of Computer Science_, pages 305-314, 2011.
* [5] Christos Boutsidis, Michael W Mahoney, and Petros Drineas. An improved approximation algorithm for the column subset selection problem. In _Proceedings of the 20th Annual ACM-SIAM Symposium on Discrete Algorithms_, pages 968-977, 2009.
* [6] Tony F Chan and Per Christian Hansen. Some applications of the rank revealing QR factorization. _SIAM Journal on Scientific and Statistical Computing_, 13(3):727-741, 1992.
* [7] Shivkumar Chandrasekaran and Ilse CF Ipsen. On rank-revealing factorisations. _SIAM Journal on Matrix Analysis and Applications_, 15(2):592-622, 1994.
* [8] Flavio Chierichetti, Sreenivas Gollapudi, Ravi Kumar, Silvio Lattanzi, Rina Panigrahy, and David P Woodruff. Algorithms for \(\ell_{p}\) low-rank approximation. In _Proceedings of the 34th International Conference on Machine Learning_, pages 806-814, 2017.
* [9] Ali Civril. Column subset selection problem is UG-Hard. _Journal of Computer and System Sciences_, 80(4):849-859, 2014.
* [10] Ali Civril and Malik Magdon-Ismail. Column subset selection via sparse approximation of SVD. _Theoretical Computer Science_, 421:1-14, 2012.
* [11] Kenneth L. Clarkson and David P. Woodruff. Low rank approximation and regression in input sparsity time. In _Proceedings of the 45th Annual ACM SIGACT Symposium on Theory of Computing_, pages 81-90, 2013.
* [12] Chen Dan, Hong Wang, Hongyang Zhang, Yuchen Zhou, and Pradeep Ravikumar. Optimal analysis of subset-selection based \(\ell_{p}\) low-rank approximation. In _Proceedings of the 33rd Conference on Neural Information Processing Systems_, pages 2541-2552, 2019.
* [13] Amit Deshpande and Luis Rademacher. Efficient volume sampling for row/column subset selection. In _Proceedings of the 51st IEEE Annual Symposium on Foundations of Computer Science_, pages 329-338, 2010.
* [14] Amit Deshpande, Luis Rademacher, Santosh S Vempala, and Grant Wang. Matrix approximation and projective clustering via volume sampling. _Theory of Computing_, 2(1):225-247, 2006.
* [15] Amit Deshpande and Santosh Vempala. Adaptive sampling and fast low-rank matrix approximation. In _Proceedings of the 9th International Workshop on Approximation Algorithms for Combinatorial Optimization Problems_, pages 292-303. 2006.
* [16] Ahmed K Farahat, Ali Ghodsi, and Mohamed S Kamel. An efficient greedy method for unsupervised feature selection. In _Proceedings of the 11th IEEE International Conference on Data Mining_, pages 161-170, 2011.
* [17] Alan Frieze, Ravi Kannan, and Santosh Vempala. Fast monte-carlo algorithms for finding low-rank approximations. _Journal of the ACM_, 51(6):1025-1041, 2004.

* [18] Ming Gu and Stanley C Eisenstat. Efficient algorithms for computing a strong rank-revealing QR factorization. _SIAM Journal on Scientific Computing_, 17(4):848-869, 1996.
* [19] Venkatesan Guruswami and Ali Kemal Sinop. Optimal column-based low-rank matrix reconstruction. In _Proceedings of the 23rd Annual ACM-SIAM Symposium on Discrete Algorithms_, pages 1207-1214, 2012.
* [20] Nathan Halko, Per-Gunnar Martinsson, and Joel A. Tropp. Finding structure with randomness: Probabilistic algorithms for constructing approximate matrix decompositions. _SIAM Review_, 53(2):217-288, 2011.
* [21] Arvind V Mahankali and David P Woodruff. Optimal \(\ell_{1}\) column subset selection and a fast PTAS for low rank approximation. In _Proceedings of the 32nd Annual Symposium on Discrete Algorithms_, pages 560-578, 2021.
* [22] Bruno Ordozgoiti, Sandra Gomez Canaval, and Alberto Mozo. A fast iterative algorithm for improved unsupervised feature selection. In _Proceedings of the 16th IEEE International Conference on Data Mining_, pages 390-399, 2016.
* [23] Bruno Ordozgoiti, Sandra Gomez Canaval, and Alberto Mozo. Iterative column subset selection. _Knowledge and Information Systems_, 54(1):65-94, 2018.
* [24] Gregorio Quintana-Orti, Xiaobai Sun, and Christian H Bischof. A blas-3 version of the QR factorization with column pivoting. _SIAM Journal on Scientific Computing_, 19(5):1486-1494, 1998.
* [25] Zhao Song, David P Woodruff, and Peilin Zhong. Low rank approximation with entrywise \(\ell_{1}\)-norm error. In _Proceedings of the 49th Annual ACM SIGACT Symposium on Theory of Computing_, pages 688-701, 2017.
* [26] Zhao Song, David P. Woodruff, and Peilin Zhong. Average case column subset selection for entrywise \(\ell_{1}\)-norm loss. In _Proceedings of the 33rd Annual Conference on Neural Information Processing Systems_, pages 10111-10121, 2019.
* [27] Zhao Song, David P. Woodruff, and Peilin Zhong. Towards a zero-one law for column subset selection. In _Proceedings of the 33rd Annual Conference on Neural Information Processing Systems_, pages 6120-6131, 2019.
* [28] Yining Wang and Aarti Singh. Column subset selection with missing data via active sampling. In _Proceedings of the 18th International Conference on Artificial Intelligence and Statistics_, pages 1033-1041, 2015.
* [29] David P. Woodruff and Taisuke Yasuda. New subset selection algorithms for low rank approximation: Offline and online. In _Proceedings of the 55th Annual ACM Symposium on Theory of Computing_, pages 1802-1813, 2023.

Appendix / supplemental material

### Missing Proofs

**Lemma 3.2**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, and let \(S\) be a solution on \(A^{\prime}\). Let \(\mathcal{I}\) be the set of column indices in \(S\). For \(i\in\mathcal{I}\), we have_

\[\tau(A^{\prime},S,\mathcal{I}\backslash\{i\})\leq\|A^{\prime}{}_{\mathcal{I}} A^{\prime}{}_{\mathcal{I}}^{\dagger}A^{\prime}\|_{F}^{2}.\]

Proof.: Given a solution \(S\), we demonstrate an equivalent transformation to simplify the expression of the residual error for \(S\):

\[\|A^{\prime}-SS^{\dagger}A^{\prime}\|_{F}^{2} =\text{tr}((A^{\prime}-SS^{\dagger}A^{\prime})^{\top}(A^{\prime}- SS^{\dagger}A^{\prime}))\] \[=\text{tr}(A^{\prime\top}A^{\prime}-A^{\prime\top}SS^{\dagger}A^ {\prime}-A^{\prime\top}(SS^{\dagger})^{\top}A^{\prime}+A^{\prime\top}(SS^{ \dagger})^{\top}SS^{\dagger}A^{\prime})\] \[=\text{tr}(A^{\prime\top}A^{\prime}-2A^{\prime\top}SS^{\dagger}A ^{\prime}+A^{\prime\top}SS^{\dagger}A^{\prime})\] \[=\text{tr}(A^{\prime\top}A^{\prime})-\text{tr}(A^{\prime\top}SS^ {\dagger}A^{\prime})\] \[=\text{tr}(A^{\prime\top}A^{\prime})-\text{tr}(A^{\prime\top}(SS^ {\dagger})^{\top}SS^{\dagger}A^{\prime})\] \[=\text{tr}(A^{\prime\top}A^{\prime})-\|SS^{\dagger}A^{\prime}\|_ {F}^{2},\]

where the third equality follows from \(S^{\dagger}SS^{\dagger}=S^{\dagger}\) and \((SS^{\dagger})^{\top}=SS^{\dagger}\).

By the above equality, we have

\[f(A^{\prime},S^{\prime})-f(A^{\prime},S) =\|A^{\prime}-S_{\mathcal{I}\backslash\{i\}}S_{\mathcal{I} \backslash\{i\}}^{\dagger}A^{\prime}\|_{F}^{2}-\|A^{\prime}-S_{\mathcal{I}}S_ {\mathcal{I}}^{\dagger}A^{\prime}\|_{F}^{2}\] \[=\|S_{\mathcal{I}}S_{\mathcal{I}}^{\dagger}A^{\prime}\|_{F}^{2}- \|S_{\mathcal{I}\backslash\{i\}}S_{\mathcal{I}\backslash\{i\}}^{\dagger}A^{ \prime}\|_{F}^{2}\] \[\leq\|S_{\mathcal{I}}S_{\mathcal{I}}^{\dagger}A^{\prime}\|_{F}^{2}.\]

**Lemma 3.3**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, \(k\) be a positive integer, and let \(\mathcal{I}\) be the set of column indices of \(S\) for the CSS problem on \(A^{\prime}\). In expectation, the following inequality holds:_

\[\|A^{\prime}{}_{\mathcal{I}}A^{\prime\dagger}_{\mathcal{I}}A^{\prime}\|_{F}^{ 2}\leq\frac{k^{2}}{d^{2}}\|A^{\prime}\|_{F}^{2}.\]

Proof.: We begin by seeking to bound the Frobenius norm of the matrix product \(A^{\prime}{}_{\mathcal{I}}A^{\prime\dagger}_{\mathcal{I}}A^{\prime}\). Using the submultiplicative property of the Frobenius norm, we get

\[\|A^{\prime}{}_{\mathcal{I}}A^{\prime\dagger}_{\mathcal{I}}A^{\prime}\|_{F}^{ 2}\leq\|A^{\prime}{}_{\mathcal{I}}A^{\prime}\|_{F}^{2}\cdot\|A^{\prime}\|_{F}^ {2}.\]

Next, by the norm inequality, we have

\[\|A^{\prime}{}_{\mathcal{I}}A^{\prime\dagger}_{\mathcal{I}}\|_{F}^{2}\leq\|A^ {\prime}{}_{\mathcal{I}}^{\dagger}\|_{2}^{2}\cdot\|A^{\prime}{}_{\mathcal{I}} \|_{F}^{2}.\]

Since the matrix \(A\) is full rank, which is ensured by steps 7-10 of Algorithm 1. Therefore, \(\|A^{\prime\dagger}_{\mathcal{I}}\|_{2}^{2}\) can be reformulated as the maximum eigenvalue of \(A^{\prime\top}_{\mathcal{I}}A^{\prime}{}_{\mathcal{I}}\). Specifically, we have

\[\|A^{\prime\dagger}_{\mathcal{I}}\|_{2}^{2}=\frac{1}{\lambda_{\min}(A^{\prime \top}_{\mathcal{I}}A^{\prime}{}_{\mathcal{I}})}=\lambda_{\max}(A^{\prime\top} _{\mathcal{I}}A^{\prime}{}_{\mathcal{I}}).\]

Substituting this into \(\|A^{\prime}{}_{\mathcal{I}}A^{\prime}{}_{\mathcal{I}}^{\dagger}A^{\prime}\|_{F} ^{2}\), we get

\[\|A^{\prime}{}_{\mathcal{I}}A^{\prime}{}_{\mathcal{I}}^{\dagger}A^{\prime}\|_{ F}^{2}\leq\lambda_{\max}(A^{\prime\top}_{\mathcal{I}}A^{\prime}{}_{\mathcal{I}}) \cdot\|A^{\prime}{}_{\mathcal{I}}\|_{F}^{2}\cdot\|A^{\prime}\|_{F}^{2}.\]

Since the maximum eigenvalue \(\lambda_{\max}(A^{\prime\top}_{\mathcal{I}}A^{\prime}{}_{\mathcal{I}})\) is bounded above by \(\|A^{\prime}{}_{\mathcal{I}}\|_{F}^{2}\), we obtain

\[\|A^{\prime}{}_{\mathcal{I}}A^{\prime\dagger}_{\mathcal{I}}A^{\prime}\|_{F}^{2} \leq\|A^{\prime}{}_{\mathcal{I}}\|_{F}^{4}\cdot\|A^{\prime}\|_{F}^{2}.\]Finally, by the expectation \(\mathbb{E}[\|A^{\prime}{}_{\mathcal{I}}\|_{F}^{2}]=\frac{k}{d}\|A^{\prime}\|_{F}^{2}\) and \(\|A\|_{F}^{2}=\frac{1}{4}\), we have

\[\|A^{\prime}{}_{\mathcal{I}}\|_{F}^{4} \leq\left(\frac{k}{d}\right)^{2}\|A^{\prime}\|_{F}^{4}\] \[=\frac{k^{2}}{d^{2}}(\|A+D\|_{F}^{2})^{2}\] \[\leq\frac{k^{2}}{d^{2}}(2\|A\|_{F}^{2}+2\|D\|_{F}^{2})^{2}\] \[=\frac{k^{2}}{d^{2}}(2\|A\|_{F}^{2}+2\sum_{i=1}^{\min\{n,d\}}D_{ ii}^{2})^{2}\] \[=\frac{k^{2}}{d^{2}}(2\|A\|_{F}^{2}+2\min\{n,d\}\frac{\|A-SS^{ \dagger}A\|_{F}^{2}}{52\min\{n,d\}(k+1)!})^{2}\] \[\leq\frac{k^{2}}{d^{2}}(2\|A\|_{F}^{2}+2\frac{\|A\|_{F}^{2}}{52( k+1)!})^{2}\] \[\leq\frac{k^{2}}{d^{2}}(4\|A\|_{F}^{2})^{2}\] \[=\frac{k^{2}}{d^{2}}.\]

where the first equality results from \(A^{\prime}=A+D\), and the second inequality follows from the property \(\|A+B\|_{F}^{2}\leq 2(\|A\|_{F}^{2}+\|B\|_{F}^{2})\) for any two matrices \(A,B\in\mathbb{R}^{n\times d}\).

Combining the above inequalities, we conclude that

\[\|A^{\prime}{}_{\mathcal{I}}A^{\prime}{}_{\mathcal{I}}^{\dagger}A^{\prime}\|_ {F}^{2}\leq\frac{k^{2}}{d^{2}}\|A^{\prime}\|_{F}^{2}.\]

**Lemma 3.4**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, \(k\) be a positive integer, and let \(S\) be a solution with the set \(\mathcal{I}\) of column indices in \(S\). Let \(E=A^{\prime}-SS^{\dagger}A^{\prime}\). The column index \(p\) is obtained by executing steps 2-3 of Algorithm 2. In expectation, the following inequality holds_

\[f(A^{\prime},A^{\prime}_{\mathcal{I}\cup\{p\}})\leq f_{k}(A^{\prime},opt)+ \frac{1}{10}f(A^{\prime},S),\]

_where \(f_{k}(A^{\prime},opt)\) denotes the best rank-\(k\) solution._

Proof.: Let \(p_{j}=\frac{\|E_{j}\|_{F}^{2}}{\|E\|_{F}^{2}}\) be the probability that each column index \(j\in[d]\) is sampled. To bound \(f(A,A_{T\cup\{p\}})\), we define a random variable \(X_{i}^{l}\) for \(i\in[r],j\in[d]\), and \(l\in[z]\) as follows:

\[X_{i}^{l}=\frac{v_{ij}}{p_{j}}E_{:j}\text{ with probability }p_{j}.\]

We denote \(X_{i}\) as the random variable that is randomly picked from the set \(C=\{X_{i}^{1},X_{i}^{2},\ldots,X_{i}^{l}\}\). Therefore, the expected value of \(X_{i}\) is given by

\[\mathbb{E}(X_{i}) =\sum_{l=1}^{z}\mathbf{Pr}(\text{$l$-th is picked})\cdot\mathbb{E }\left(X_{i}^{l}\right)\] \[=\frac{1}{z}\sum_{l=1}^{z}\mathbb{E}(X_{i}^{l})\] \[=\frac{1}{z}\sum_{l=1}^{z}\sum_{j=1}^{d}\left(p_{j}\cdot\frac{v_{ ij}}{p_{j}}E_{:j}\right)\]\[=\frac{1}{z}\sum_{l=1}^{z}\sum_{j=1}^{d}v_{ij}E_{:j}\] \[=\frac{1}{z}\sum_{l=1}^{z}Ev_{i}\] \[=Ev_{i},\]

where the second equality follows from the linearity of expectation, and the last second equality results from the linear combination of \(v_{i}\) and \(E\).

Let \(w_{i}=(SS^{\dagger}A)v_{i}+X_{i}\) for \(i\in[r]\). Therefore, we have \(\mathbb{E}(w_{i})=\sigma_{i}u_{i}\).

Thus, we have the equality \(w_{i}-\sigma_{i}v_{i}=X_{i}-Ev_{i}\). By calculating its second central moment, we obtain

\[\mathbb{E}(\|w_{i}-\sigma_{i}u_{i}\|_{2}^{2}) =\mathbb{E}(\|X_{i}-Ev_{i}\|_{2}^{2})\] \[=\mathbb{E}(\|X_{i}\|_{2}^{2})-2\mathbb{E}(X_{i})\cdot Ev_{i}+\| Ev_{i}\|_{2}^{2}\] \[=\mathbb{E}(\|X_{i}\|_{2}^{2})-\|Ev_{i}\|_{2}^{2}.\]

Next, we seek to bound \(\mathbb{E}(\|X_{i}\|_{2}^{2})\),

\[\mathbb{E}(\|X_{i}\|_{2}^{2}) =\mathbb{E}\left(\|\sum_{l=1}^{z}\mathbf{Pr}(l\text{-th is picked}) \cdot X_{i}^{l}\|^{2}\right)\] \[=\sum_{l=1}^{z}(\mathbf{Pr}(l\text{-th is picked}))^{2}\mathbb{E} (\|X_{i}^{l}\|_{2}^{2})+\sum_{1\leq l_{1}<l_{2}\leq z}\mathbf{Pr}(l_{1}\text{-th and $l_{2}$-th are picked})\mathbb{E}(X_{i}^{l_{1}}\cdot X_{i}^{l_{2}})\] \[=\frac{1}{z^{2}}\sum_{l=1}^{z}\mathbb{E}(\|X_{i}^{l}\|_{2}^{2})+ \frac{2}{z^{2}}\sum_{1\leq l_{1}<l_{2}\leq z}\mathbb{E}(X_{i}^{l_{1}}\cdot X_{ i}^{l_{2}})\] \[=\frac{1}{z^{2}}\sum_{l=1}^{z}\mathbb{E}(\|X_{i}^{l}\|_{2}^{2})+ \frac{z-1}{z}\|Ev_{i}\|_{2}^{2}.\]

The term of \(\frac{2}{z^{2}}\sum_{1\leq l_{1}<l_{2}\leq z}\mathbb{E}(X_{i}^{l_{1}}\cdot X_{ i}^{l_{2}})=\frac{z-1}{z}\|Ev_{i}\|_{2}^{2}\) follows from the independence of \(X_{i}^{l_{1}}\) and \(X_{i}^{l_{2}}\). Therefore, we conclude that

\[\mathbb{E}(\|w_{i}-\sigma_{i}u_{i}\|_{2}^{2})=\frac{1}{z^{2}}\sum_{l=1}^{z} \mathbb{E}(\|X_{i}^{l}\|_{2}^{2})-\frac{1}{z}\|Ev_{i}\|_{2}^{2}.\]

For the first term in the above equation, we have

\[\mathbb{E}(\|X_{i}^{l}\|_{2}^{2}) =\sum_{j=1}^{d}p_{j}\frac{\|E_{:j}v_{ij}\|_{2}^{2}}{p_{j}^{2}}\] \[=\sum_{j=1}^{d}\frac{\|E\|_{F}^{2}}{\|E_{:j}\|_{F}^{2}}\|E_{:j}v_{ ij}\|_{2}^{2}\] \[=\|E\|_{F}^{2}\cdot\sum_{i=1}^{d}\frac{\|E_{:j}v_{ij}\|_{F}^{2}}{ \|E_{:j}\|_{2}^{2}}\] \[\leq\|E\|_{F}^{2}\cdot\frac{\|Ev_{i}\|_{2}^{2}}{\|E\|_{F}^{2}}\] \[=\|Ev_{i}\|_{2}^{2}.\]

Combining the above inequality, we have

\[\mathbb{E}(\|w_{i}-\sigma_{i}u_{i}\|_{2}^{2})\leq\frac{1}{z}\|Ev_{i}\|_{2}^{2}.\]Let \(y_{i}=w_{i}/\sigma_{i}\) for \(i\in[k]\) and let matrix \(F=(\sum_{i=1}^{k}y_{i}u_{i}^{T})A^{\prime}\). Therefore, we have \(\|A^{\prime}-A^{\prime}{}_{\mathcal{I}\cup\{p\}}{A^{\prime}}^{\dagger}{}_{ \mathcal{I}\cup\{p\}}^{2}A^{\prime}\|_{F}^{2}\leq\|A^{\prime}-F\|_{F}^{2}\). By decomposing \(F\) along the right singular vectors \(\{v_{1},\ldots,v_{d}\}\), we have:

\[\mathbb{E}(\|A^{\prime}-A^{\prime}{}_{\mathcal{I}\cup\{p\}}{A^{ \prime}}^{\dagger}{}_{\mathcal{I}\cup\{p\}}A^{\prime}\|_{F}^{2}) \leq\mathbb{E}(\|A^{\prime}-F\|_{F}^{2})\] \[=\sum_{i=1}^{d}\mathbb{E}(\|(A^{\prime}-F)v_{i}\|_{2}^{2})\] \[\leq\sum_{i=1}^{k}\mathbb{E}(\|\sigma_{i}u_{i}-w_{i}\|_{2}^{2})+ \sum_{i=k+1}^{d}\sigma_{i}^{2}\] \[\leq f_{k}(A^{\prime},opt)+\frac{k}{z}f(A^{\prime},A^{\prime}{}_ {\mathcal{I}}),\]

where the last second inequality uses that \(f_{k}(A^{\prime},opt)=\sum_{i=k+1}^{d}\sigma_{i}^{2}\).

Setting the \(z=10k\), we obtain that

\[f(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}})\leq f_{k}(A^{\prime},opt)+ \frac{1}{10}f(A^{\prime},S).\]

**Lemma 3.6**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, \(k\) be a positive integer, and let \(S\) be the solution to the CSS problem on \(A^{\prime}\). Let \(\mathcal{I}\) be the set of column indices in \(S\). If \(50\sum_{h\in H}f(A^{\prime},A^{\prime}{}_{\mathcal{I}\setminus\{h\}})\geq 21 \sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}{}_{\mathcal{I}\setminus\{i\}})\) and \(f(A^{\prime},S)\geq 25(k+1)f_{k}(A^{\prime},opt)\), we have_

\[\sum_{h\in H,h\text{ is good}}f(A^{\prime},A^{\prime}{}_{\mathcal{I}\setminus \{h\}})\geq\frac{1}{125}\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}{}_{ \mathcal{I}\setminus\{i\}}).\]

Proof.: First, we prove that the residual error is non-increasing. Let \(S_{k}\) be a subset of \(k\) columns from \(A^{\prime}\). Let \(p\in A^{\prime}\) be a column not in \(S_{k}\), and define \(S_{k+1}=S_{k}\cup\{p\}\). The residual error function is defined as:

\[f(A^{\prime},S)=\|A^{\prime}-SS^{\dagger}A^{\prime}\|_{F}^{2}=\|A^{\prime}\|_ {F}^{2}-\|SS^{\dagger}A^{\prime}\|_{F}^{2}.\]

Our goal is to show that \(f(A^{\prime},S_{k+1})\leq f(A^{\prime},S_{k})\), i.e., the residual error is non-increasing when a column is added to \(S_{k}\).

Since \(\|A^{\prime}\|_{F}^{2}\) is constant, we only need to prove that \(\|S_{k+1}S_{k+1}^{\dagger}A^{\prime}\|_{F}^{2}\geq\|S_{k}S_{k}^{\dagger}A^{ \prime}\|_{F}^{2}\). For any column \(u\) of \(A^{\prime}\), denote

\[\Delta(u)=\|S_{k+1}S_{k+1}^{\dagger}u\|_{2}^{2}-\|S_{k}S_{k}^{\dagger}u\|_{2}^ {2}.\]

If \(p\in\operatorname{span}(S_{k})\), then \(\operatorname{span}(S_{k+1})=\operatorname{span}(S_{k})\), and thus \(\Delta(u)=0\). Otherwise, if \(p\notin\operatorname{span}(S_{k})\), define the orthogonal component of \(p\) with respect to \(\operatorname{span}(S_{k})\) as

\[p_{\perp}=p-S_{k}S_{k}^{\dagger}p,\]

and normalize it as \(p^{\prime}=\frac{p_{\perp}}{\|p_{\perp}\|_{2}}\).

For any \(u\), the projection onto \(\operatorname{span}(S_{k+1})\) is \(S_{k+1}S_{k+1}^{\dagger}u=S_{k}S_{k}^{\dagger}u+\langle u,p^{\prime}\rangle p^{\prime}\), where \(\langle u,p^{\prime}\rangle\) denotes the inner product. Therefore, \(\|S_{k+1}S_{k+1}^{\dagger}u\|_{2}^{2}=\|S_{k}S_{k}^{\dagger}u\|_{2}^{2}+| \langle u,p^{\prime}\rangle|^{2}\) holds, implying that \(\Delta(u)=|\langle u,p^{\prime}\rangle|^{2}\geq 0\). Summing over all columns \(u\) of \(A^{\prime}\), we obtain \(\|S_{k+1}S_{k+1}^{\dagger}A^{\prime}\|_{F}^{2}-\|S_{k}S_{k}^{\dagger}A^{ \prime}\|_{F}^{2}=\sum_{u}\Delta(u)\geq 0\). Thus, the residual error function satisfies

\[f(A^{\prime},S_{k+1})=\|A^{\prime}\|_{F}^{2}-\|S_{k+1}S_{k+1}^{\dagger}A^{ \prime}\|_{F}^{2}\leq\|A^{\prime}\|_{F}^{2}-\|S_{k}S_{k}^{\dagger}A^{\prime}\|_ {F}^{2}=f(A^{\prime},S_{k}).\]

This proves that adding a column to \(S_{k}\) does not increase the residual error.

By Lemma 3.2, we have

\[\tau(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}},\mathcal{I}\cup\{p\}\backslash \{h\})=f(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}\backslash\{h\}})-f(A^{ \prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}})\leq\|A^{\prime}{}_{\mathcal{I} \cup\{p\}}A^{\prime}\|_{F}^{2}.\]Similarly, we have

\[\tau(A^{\prime},S,\mathcal{I}\backslash\{h\})=f(A^{\prime},A^{\prime}{}_{\mathcal{ I}\backslash\{h\}})-f(A^{\prime},S)\leq\|SS^{\dagger}A^{\prime}\|_{F}^{2}.\]

Thus, by Lemma 3.3, we obtain \(\tau(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}},\mathcal{I}\cup\{p\} \backslash\{h\})+\tau(A^{\prime},S,\mathcal{I}\backslash\{h\})\leq\frac{(k+1) ^{2}}{d^{2}}\|A\|_{F}^{2}+\frac{k^{2}}{d^{2}}\|A\|_{F}^{2}\leq\frac{2(k+1)^{2} }{d^{2}}\|A\|_{F}^{2}\), where \(h\in H\).

Next, we have \(\sum_{h\in H}f(A^{\prime},S\backslash\{h\})\geq\frac{21}{50}\sum_{i\in \mathcal{I}}f(A^{\prime},A^{\prime}{}_{\mathcal{I}\backslash\{i\}})\). By Definition 3.5 and Lemma 3.2, we have

\[\sum_{h\in H,h\text{ is not good}}f(A^{\prime},A^{\prime}{}_{ \mathcal{I}\backslash\{h\}}) \leq\sum_{h\in H}\tau(A^{\prime},S,\mathcal{I}\backslash\{h\})+ \tau(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}},\mathcal{I}\cup\{p\} \backslash\{h\})\] \[+\frac{11k}{10}(f(A^{\prime},A^{\prime}{}_{\mathcal{I}^{*} \backslash\{h^{*}\}})+\frac{1}{10}f(A^{\prime},S))+\frac{1}{100}f(A^{\prime},S)\] \[\leq\frac{2k(k+1)^{2}}{d^{2}}\|A^{\prime}\|_{F}^{2}+\frac{11k}{10 }(\frac{k^{2}}{d^{2}}\|A^{\prime}\|_{F}^{2}+f(A^{\prime},S^{*}))\] \[+\frac{11k+1}{100}f(A^{\prime},S)\] \[\leq\frac{31k^{3}}{10d^{2}}\|A^{\prime}\|_{F}^{2}+\frac{11k}{10} f(A^{\prime},S^{*})+\frac{11k+1}{100}f(A^{\prime},S)\] \[\leq\frac{31k^{3}}{10d^{2}}\|A^{\prime}\|_{F}^{2}+\frac{11k(k+1)} {10}f_{k}(A^{\prime},opt)+\frac{11k+1}{100}f(A^{\prime},S)\] \[\leq\frac{11k(k+1)}{10}f_{k}(A^{\prime},opt)+\frac{11k+1}{100}f(A ^{\prime},S)\] \[+\frac{31k^{3}}{10d^{2}}\frac{\|A\|_{F}^{2}}{f(A^{\prime},opt)}f_ {k}(A^{\prime},opt)\] \[\leq\frac{11k(k+1)}{10}f_{k}(A^{\prime},opt)+\frac{11k+1}{100}f(A ^{\prime},S)+\frac{31k^{3}}{5d^{2}}f_{k}(A^{\prime},opt),\]

where the fourth inequality follows from the fact that \(S^{*}\) is the optimal solution with exactly \(k\) columns selected, and \(f(A^{\prime},S^{*})\leq(k+1)f_{k}(A^{\prime},opt)\).

Using \(f(A^{\prime},S)\geq 25(k+1)f_{k}(A^{\prime},opt)\) and the non-increasing property of residual error, we obtain that

\[\sum_{h\in H,h\text{is not good}}f(A^{\prime},A^{\prime}{}_{\mathcal{I} \backslash\{h\}})\leq\frac{103k}{250}\cdot f(A^{\prime},S).\]

By \(kf(A^{\prime},S)\leq\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}{}_{\mathcal{ I}\backslash\{i\}})\),

\[\sum_{h\in H,h\text{is not good}}f(A^{\prime},A^{\prime}{}_{\mathcal{I} \backslash\{h\}})\leq\frac{103}{250}\cdot\sum_{i\in\mathcal{I}}f(A^{\prime},A^ {\prime}{}_{\mathcal{I}\backslash\{i\}}).\]

Thus, we have

\[\sum_{h\in H,h\text{ is good}}f(A^{\prime},A^{\prime}{}_{\mathcal{I} \backslash\{h\}})\geq\frac{1}{125}\cdot\sum_{i\in\mathcal{I}}f(A^{\prime},A^{ \prime}{}_{\mathcal{I}\backslash\{i\}}).\]

**Lemma 3.7**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) be a full-rank matrix, \(k\) be a positive integer, and let \(S\) be a solution for the CSS problem on matrix \(A^{\prime}\). Let \(\mathcal{I}\) be the set of column indices in \(S\). If \(\sum_{r\in R}f(A^{\prime},A^{\prime}{}_{\mathcal{I}\backslash\{r\}})\geq 29/50 \sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}{}_{\mathcal{I}\backslash\{i\}})\) and \(f(A^{\prime},S)\geq 25(k+1)f_{k}(A^{\prime},opt)\), we have_

\[\sum_{r\in R,r\text{ is good}}f(A^{\prime},A^{\prime}{}_{\mathcal{I} \backslash\{r\}})\geq\frac{1}{125}\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}{} _{\mathcal{I}\backslash\{i\}}).\]Proof.: By Lemma 3.3, we have \(\tau(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}},\mathcal{I}\cup\{p\}\backslash \{l\})+\tau(A^{\prime},S,\mathcal{I}\backslash\{l\})\leq\frac{(k+1)^{2}}{d^{2}} \|A\|_{F}^{2}+\frac{k^{2}}{d^{2}}\|A\|_{F}^{2}\leq\frac{2(k+1)^{2}}{d^{2}}\|A\|_ {F}^{2}\), where \(l\in L\).

We have \(\sum_{r\in R}f(A^{\prime},A^{\prime}{}_{\mathcal{I}\backslash\{r\}})\geq 29/50 \sum_{i\in\mathcal{I}}f(A^{\prime},{}^{\prime}{}_{\mathcal{I}\backslash\{i\}})\). Note that \(|R|\leq 2|L|\). By Definition 3.5 and Lemma 3.2, we have

\[\sum_{r\in R,r\text{ is not good}}f(A^{\prime},A^{\prime}{}_{ \mathcal{I}\backslash\{r\}}) \leq 2|L|\min_{l\in L}\tau(A^{\prime},S,\mathcal{I}\backslash\{l \})+\tau(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}},\mathcal{I}\cup\{p\} \backslash\{l\})\] \[+\frac{11k}{10}(f(A^{\prime},A^{\prime}{}_{\mathcal{I}^{*} \backslash\{l^{*}\}})+\frac{1}{10}f(A^{\prime},S))+\frac{1}{100}f(A^{\prime},S)\] \[\leq 2\sum_{l\in L}\tau(A^{\prime},S,\mathcal{I}\backslash\{l\})+ \tau(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}},\mathcal{I}\cup\{p\} \backslash\{l\})\] \[+\frac{11k}{10}(f(A^{\prime},A^{\prime}{}_{\mathcal{I}^{*} \backslash\{l^{*}\}})+\frac{1}{10}f(A^{\prime},S))+\frac{1}{100}f(A^{\prime},S)\] \[\leq\frac{4k(k+1)^{2}}{d^{2}}\|A^{\prime}\|_{F}^{2}+\frac{11k}{10 }(\frac{k^{2}}{d^{2}}\|A^{\prime}\|_{F}^{2}+f(A^{\prime},S^{*}))\] \[+\frac{11k+1}{100}f(A^{\prime},S)\] \[\leq\frac{51k(k+1)^{2}}{10d^{2}}\|A^{\prime}\|_{F}^{2}\] \[+\frac{11k(k+1)}{10}f_{k}(A^{\prime},opt)+\frac{11k+1}{100}f(A^{ \prime},S)\] \[\leq\frac{51k^{3}}{10d^{2}}\frac{\|A^{\prime}\|_{F}^{2}}{f_{k}(A^ {\prime},opt)}f_{k}(A^{\prime},opt)\] \[+\frac{11k(k+1)}{10}f_{k}(A^{\prime},opt)+\frac{11k+1}{100}f(A^{ \prime},S)\] \[\leq\frac{51k^{3}}{5d^{2}}f_{k}(A^{\prime},opt)+\frac{11k(k+1)}{10 }f_{k}(A^{\prime},opt)+\frac{11k+1}{100}f(A^{\prime},S).\]

Using \(f(A^{\prime},S)\geq 25(k+1)f_{k}(A^{\prime},opt)\) and the non-increasing property of the residual error (as in the proof of Lemma 3.6), we obtain

\[\sum_{r\in R,r\text{ is not good}}f(A^{\prime},A^{\prime}{}_{ \mathcal{I}\backslash\{l\}})\leq\frac{143k}{250}f(A^{\prime},S)\]

By \(kf(A^{\prime},S)\leq\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}{}_{ \mathcal{I}\backslash\{i\}})\), we have

\[\sum_{r\in R,r\text{ is not good}}f(A^{\prime},A^{\prime}{}_{ \mathcal{I}\backslash\{l\}})\leq\frac{143}{250}\sum_{i\in\mathcal{I}}f(A^{ \prime},A^{\prime}{}_{\mathcal{I}\backslash\{i\}}).\]

By combining the previous inequality with the bound \(\sum_{r\in R}f(A^{\prime},A^{\prime}{}_{\mathcal{I}\backslash\{r\}})\geq 29/50 \sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}{}_{\mathcal{I}\backslash\{i\}})\), we have \(\sum_{r\in R,r\text{ is good}}f(A^{\prime},A^{\prime}{}_{\mathcal{I} \backslash\{r\}})\geq\frac{1}{125}\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime }{}_{\mathcal{I}\backslash\{i\}})\).

**Lemma 3.8**.: _Let \(A^{\prime}\in\mathbb{R}^{n\times d}\) and \(S\in\mathbb{R}^{k\times d}\) be the input matrices for Algorithm 2, where \(k\) is a positive integer and \(S\) is the solution to the CSS problem on \(A^{\prime}\). Suppose that \(f(A^{\prime},S)\geq 25(k+1)\cdot f_{k}(A^{\prime},opt)\). Then, with probability at least \(1/1375\), Algorithm 2 returns a new solution \(S^{\prime}\) with \(f(A^{\prime},S^{\prime})\leq(1-1/(100k))f(A^{\prime},S)\)._

Proof.: Let \(\mathcal{I}\) denote the set of column indices in \(S\). Let \(S^{*}\) be the optimal solution with exactly \(k\) columns selected, and let \(\mathcal{I}^{*}\) be set of the columns indices in \(S^{*}\). Let \(p\) denote the column index obtained by the steps 2-3 of Algorithm 2. Let \(p^{*}\in\mathcal{I}^{*}\) be the column corresponding to index \(p\), as determined by the mapping function \(\phi(\cdot)\). According to Lemma 3.6, the probability of sampling a good column index is at least

\[\frac{(1/125)\sum_{h\in H,h\text{ is good }}f(A^{\prime},A^{\prime}{}_{\mathcal{I} \setminus\{h\}})}{\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}{}_{\mathcal{I} \setminus\{i\}})}\geq\frac{1}{125}.\]

Let \(h\) represent an arbitrary good column index. By Lemma 3.4 and the non-increasing property of residual error \(f(\cdot)\) (as shown in the proof of Lemma 3.6), we have

\[\mathbb{E}[f(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}})] \leq f_{k}(A^{\prime},opt)+\frac{1}{10}f(A^{\prime},S)\] \[\leq f(A^{\prime},A^{\prime}{}_{\mathcal{I}^{*}\setminus\{h^{*} \}})+\frac{1}{10}f(A^{\prime},S).\]

Hence, by the Markov inequality, we obtain

\[\mathbf{Pr}[f(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}})\leq\frac{11}{10 }(f(A^{\prime},A^{\prime}{}_{\mathcal{I}^{*}\setminus\{h^{*}\}})+\frac{1}{10 }f(A^{\prime},S))|h\in H]\geq\frac{1}{11}.\]

Combining the above inequalities, the probability that the sampled column index \(p\) replaces some good column index \(h\) is at least

\[\frac{1}{125}\cdot\frac{1}{11}>\frac{1}{1375}.\]

Similarly, according to Lemma 3.7, the probability of sampling a good column index is at least

\[\frac{(1/125)\sum_{r\in R,r\text{ is good }}f(A^{\prime},A^{\prime}{}_{\mathcal{I} \setminus\{r\}})}{\sum_{i\in\mathcal{I}}f(A^{\prime},A^{\prime}{}_{\mathcal{I }\setminus\{i\}})}\geq\frac{1}{125}.\]

By Lemma 3.4 and the Markov inequality, we obtain

\[\mathbf{Pr}[f(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}})\leq\frac{11}{1 0}(f(A^{\prime},A^{\prime}{}_{\mathcal{I}^{*}\setminus\{r^{*}\}})+\frac{1}{10 }f(A^{\prime},S))|r\in R]\geq\frac{1}{11}.\]

Thus, the probability that the sampled column index \(p\) for some good column index \(r\) is at least

\[\frac{1}{125}\cdot\frac{1}{11}>\frac{1}{1375}.\]

By Definition 3.1, we have \(\tau(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}},\mathcal{I}\cup\{p\} \backslash\{q\})=f(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}\setminus\{q \}})-f(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}})\), and \(\tau(A^{\prime},S,\mathcal{I}\backslash\{q\})=f(A^{\prime},A^{\prime}{}_{ \mathcal{I}\setminus\{q\}})-f(A^{\prime},S)\).

Now, for the column index \(q\in H\cup R\), we can upper bound the updated residual error \(f(A^{\prime},S^{\prime})\) as follows.

\[f(A^{\prime},S^{\prime})\leq f(A^{\prime},A^{\prime}{}_{\mathcal{ I}\setminus\{q\}\cup\{p\}})\] \[=f(A^{\prime},S)-\left(f(A^{\prime},S)-f(A^{\prime},A^{\prime}{}_{ \mathcal{I}\setminus\{q\}\cup\{p\}})\right)\] \[=f(A^{\prime},S)-\left(f(A^{\prime},S)-f(A^{\prime},A^{\prime}{}_ {\mathcal{I}\cup\{p\}})+f(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}})-f( A^{\prime},A^{\prime}{}_{(\mathcal{I}\cup\{p\})\setminus\{q\}})\right)\] \[=f(A^{\prime},S)-\left(f(A^{\prime},S)-\tau(A^{\prime},A^{\prime}{} _{\mathcal{I}\cup\{p\}},(\mathcal{I}\cup\{p\})\backslash\{q\})-f(A^{\prime},A^ {\prime}{}_{\mathcal{I}\cup\{p\}})\right)\] \[=f(A^{\prime},S)-(f(A^{\prime},\mathcal{I}\backslash\{q\})-\tau( A^{\prime},S,\mathcal{I}\backslash\{q\})\] \[-\tau(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}},(\mathcal{I }\cup\{p\})\backslash\{q\})-f(A^{\prime},A^{\prime}{}_{\mathcal{I}\cup\{p\}}))\] \[\leq f(A^{\prime},S)-(f(A^{\prime},\mathcal{I}\backslash\{q\})- \tau(A^{\prime},S,\mathcal{I}\backslash\{q\})-\tau(A^{\prime},A^{\prime}{}_{ \mathcal{I}\cup\{p\}},(\mathcal{I}\cup\{p\})\backslash\{q\})\] \[-\frac{11}{10}(f(A^{\prime},A^{\prime}{}_{\mathcal{I}^{*}\setminus \{q^{*}\}})+\frac{1}{10}f(A^{\prime},S)))\] \[\leq f(A^{\prime},S)-\frac{1}{100k}f(A^{\prime},S).\]

Thus, by combining the two cases, we obtain that with probability at least \(1/1375\),

\[f(A^{\prime},S^{\prime})\leq(1-1/(100k))f(A^{\prime},S).\]

**Lemma 3.10**.: _Let \(A\in\mathbb{R}^{n\times d}\) be an input matrix, and let \(k\) be a positive integer. Define \(D\) as an \(n\times d\) matrix with elements_

\[D_{ij}=\begin{cases}\frac{\|A-S_{1}S_{1}^{\dagger}A\|_{F}}{(52\min\{n,d\}(k+1)!) ^{1/2}},&\text{if }i=j\\ 0,&\text{otherwise}\end{cases},\]

_where \(S_{1}\) is obtained by executing the first round of steps 3-6 in Algorithm 1. Let \(A^{\prime}=A+D\). The solution \(S_{2}\) returned by executing Algorithm 2 for \(T=O(k^{2}\log k)\) iterations satisfies_

\[\mathbb{E}[\|A^{\prime}-S_{2}S_{2}^{\dagger}A^{\prime}\|_{F}^{2}]\leq 53(k+1)\|A- A_{k}\|_{F}^{2},\]

_where \(A_{k}\) is the best rank-\(k\) approximation for \(A\)._

Proof.: Let \(A^{\prime}_{k}\) be the best rank-\(k\) approximation of \(A^{\prime}\), and \(A_{k}\) be the best rank-\(k\) approximation of \(A\). For the initial solution \(S_{1}\), Deshpande and Vempala [15] provide an approximation ratio of \((k+1)!\). By Lemma 3.9, we obtain

\[\mathbb{E}[\|A^{\prime}-S_{2}S_{2}^{\dagger}A^{\prime}\|_{F}^{2}] \leq 26(k+1)\|A^{\prime}-A^{\prime}_{k}\|_{F}^{2}\] \[\leq 26(k+1)\|A^{\prime}-A_{k}\|_{F}^{2}\] \[=26(k+1)\|A^{\prime}-A+A-A_{k}\|_{F}^{2}\] \[\leq 52(k+1)\left(\|A^{\prime}-A\|_{F}^{2}+\|A-A_{k}\|_{F}^{2}\right)\] \[\leq 52(k+1)\left(\|D\|_{F}^{2}+\|A-A_{k}\|_{F}^{2}\right)\] \[=52(k+1)\left(\|A-A_{k}\|_{F}^{2}+\sum_{i=1}^{\min\{n,d\}}D_{ii}^{2}\right)\] \[\leq 52(k+1)\left(\|A-A_{k}\|_{F}^{2}+\min\{n,d\}\cdot\left( \frac{\|A-S_{1}S_{1}^{\dagger}A\|_{F}^{2}}{52\min\{n,d\}\cdot(k+1)!}\right)\right)\] \[=52(k+1)\left(\|A-A_{k}\|_{F}^{2}+\frac{\|A-S_{1}S_{1}^{\dagger}A \|_{F}^{2}}{52(k+1)!}\right)\] \[\leq 52(k+1)\left(\|A-A_{k}\|_{F}^{2}+\frac{\|A-A_{k}\|_{F}^{2}}{5 2}\right)\] \[=53(k+1)\|A-A_{k}\|_{F}^{2},\]

where the second inequality holds because \(\|A^{\prime}-A^{\prime}_{k}\|_{F}^{2}\leq\|A^{\prime}-B\|_{F}^{2}\) for any \(n\times d\) matrix \(B\) with \(rank(B)=k\), and the third inequality results from the triangle inequality \(\|A+B\|_{F}^{2}\leq 2(\|A\|_{F}^{2}+\|B\|_{F}^{2})\) for any two matrices \(A,B\in\mathbb{R}^{n\times d}\). 

### Complementary Experiments

#### a.2.1 Experiments on Small Datasets

In this section, we compare our algorithm with four algorithms (TwoStage, Greedy, VolumeSampling, and ILS) introduced in Section 4 using 14 small real-world datasets. Following [23; 1], these datasets are listed in Table 5 and all datasets can be found on the website6.

Footnote 6: http://www.cs.columbia.edu/CAVE/software/softlib/coil-20.php., http://www.sheffield.ac.uk/eee/research/iel/research/face., http://www.cs.nyu.edu/~roweis/data.html.., http://vision.ucsd.edu/~leek/ExtYaleDatabase/ExtYaleB.html.., http://www.iro.umontreal.ca/~lisa/twiki/bin/view.cgi/Public/PublicDatasets., https://archive.ics.uci.edu/datasets, https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/, and http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html.

We use the same experimental settings as in Section 4 to run these algorithms on 14 datasets. The running time results are presented in Tables 6 and 7. LSCSS is at least 2 times faster than the Greedy,VolumeSampling, and ILS algorithms. The error ratio, reported as mean \(\pm\) std, with the best results highlighted in bold, is shown in Tables 8 and 9. LSCSS outperforms all other algorithms in terms of quality across all datasets.

#### a.2.2 Experiments on QR with Column Pivoting and LSCSS Algorithms

In this section, we present experimental results comparing the performance of our proposed LSCSS algorithm with the QR with Column Pivoting (QRP) algorithm [24] for varying \(k\). The QRP algorithm uses column pivoting to improve the traditional QR decomposition.

To compare our proposed algorithm with the QRP algorithm, we conducted experiments on five datasets: CMHS, ELD, Gas, FAds, and TGas (listed in Table 2). Due to the memory requirement of the QRP algorithm exceeding 2TB for the remaining datasets in Table 2, those datasets were excluded from our comparison. For the QRP algorithm, we followed the procedure outlined in [24], first obtaining the permutation matrix \(P\) that satisfies \(AP=QR\). Then, we selected the top \(k\) elements from the diagonal of \(P\) as the indices \(C\) of the \(k\) columns and computed the error ratio of solution \(A_{C}\). The detailed results in Table 10 show that our algorithm achieves lower error ratios across all datasets and is faster than the QRP algorithm.

\begin{table}
\begin{tabular}{c c c c c c} \hline
**Dataset** & **k** & **TwoStage** & **Greedy** & **ILS** & **LSCSS** \\ \hline \multirow{9}{*}{CMHS} & 5 & 56.9579\(\pm\)1.4638 & 1.7446 & 1.2494\(\pm\)0.0492 & **1.1348\(\pm\)0.0202** \\  & 10 & 254.7578\(\pm\)3.8753 & 1.9111 & 1.4803\(\pm\)0.0380 & **1.2237\(\pm\)0.0894** \\  & 15 & 5239.830\(\pm\)28.9132 & 2.1692 & 1.6455\(\pm\)0.0106 & **1.6134\(\pm\)0.0177** \\  & 20 & 655.8496\(\pm\)13.7001 & 1.9725 & 1.6582\(\pm\)0.0120 & **1.6489\(\pm\)0.0482** \\  & 25 & 815.5154\(\pm\)12.7724 & 1.9762 & 1.7237\(\pm\)0.0251 & **1.6652\(\pm\)0.0628** \\  & 30 & 955.9324\(\pm\)13.1531 & 1.9109 & 1.7012\(\pm\)0.0081 & **1.6377\(\pm\)0.0136** \\  & 50 & 1408.5406\(\pm\)10.4335 & 1.7384 & 1.6851\(\pm\)0.0095 & **1.6250\(\pm\)0.0553** \\  & 100 & 2009.6582\(\pm\)25.6895 & 1.5354 & 1.5681\(\pm\)0.00053 & **1.5042\(\pm\)0.0199** \\ \hline \multirow{9}{*}{FARs} & 5 & 1.1791\(\pm\)0.0063 & 1.0807 & 1.0660\(\pm\)0.0165 & **1.0648\(\pm\)0.0194** \\  & 10 & 1.2094\(\pm\)0.0172 & 1.1026 & 1.0719\(\pm\)0.0002 & **1.0748\(\pm\)0.0208** \\  & 15 & 1.2007\(\pm\)0.0511 & 1.1217 & 1.0727\(\pm\)0.0083 & **1.0726\(\pm\)0.0114** \\  & 20 & 1.2271\(\pm\)0.0082 & 1.1405 & 1.1174\(\pm\)0.0053 & **1.0815\(\pm\)0.0126** \\  & 25 & 1.2598\(\pm\)0.0036 & 1.1477 & 1.1291\(\pm\)0.0431 & **1.1020\(\pm\)0.0090** \\  & 30 & 1.2728\(\pm\)0.0053 & 1.1647 & 1.1011\(\pm\)0.0045 & **1.0898\(\pm\)0.0097** \\  & 50 & 1.3320\(\pm\)0.0068 & 1.2205 & 1.2361\(\pm\)0.0341 & **1.2140\(\pm\)0.0112** \\  & 100 & 1.4565\(\pm\)0.0118 & 1.3274 & 1.3516\(\pm\)0.0522 & **1.2628\(\pm\)0.0195** \\ \hline \multirow{9}{*}{ELD} & 5 & 2.0090\(\pm\)0.0428 & 1.5557 & 1.1626\(\pm\)0.0108 & **1.1570\(\pm\)0.0347** \\  & 10 & 2.4693\(\pm\)0.3801 & 1.6769 & 1.2228\(\pm\)0.0090 & **1.2197\(\pm\)0.0609** \\  & 15 & 2.7804\(\pm\)0.1867 & 1.6912 & 1.2466\(\pm\)0.0157 & **1.2397\(\pm\)0.0384** \\  & 20 & 3.4629\(\pm\)0.1021 & 1.9075 & 1.3616\(\pm\)0.0122 & **1.3580\(\pm\)0.0378** \\  & 25 & 4.6062\(\pm\)0.1384 & 1.9911 & 1.4347\(\pm\)0.0095 & **1.4146\(\pm\)0.0023** \\  & 30 & 5.6617\(\pm\)0.1601 & 2.1623 & 1.4855\(\pm\)0.0312 & **1.4671\(\pm\)0.0634** \\  & 50 & 12.0868\(\pm\)0.1241 & 2.4405 & 1.5643\(\pm\)0.0353 & **1.5475\(\pm\)0.0604** \\  & 100 & 42.7583\(\pm\)0.2457 & 2.9438 & 1.8116\(\pm\)0.0075 & **1.7935\(\pm\)0.0445** \\ \hline \multirow{9}{*}{TGas} & 5 & 4.3402\(\pm\)0.0298 & 1.4203 & 1.2641\(\pm\)0.0115 & **1.1657\(\pm\)0.1101** \\  & 10 & 10.3151\(\pm\)0.0233 & 1.9085 & **1.4812\(\pm\)0.0388** & 1.4858\(\pm\)0.0731 \\  & 15 & 17.2847\(\pm\)0.0530 & 2.0486 & 1.6572\(\pm\)0.0162 & **1.6107\(\pm\)0.0547** \\  & 20 & 25.3236\(\pm\)0.0474 & 2.2949 & 1.6480\(\pm\)0.0220 & **1.5986\(\pm\)0.0879** \\  & 25 & 35.4978\(\pm\)0.0085 & 2.4922 & 1.7614\(\pm\)0.0361 & **1.7588\(\pm\)0.0850** \\  & 30 & 47.0122\(\pm\)0.0811 & 2.4077 & 1.7814\(\pm\)0.0129 & **1.7680\(\pm\)0.1291** \\  & 50 & 109.0546\(\pm\)0.0506 & 2.5511 & **1.7567\(\pm\)0.0185** & 1.7628\(\pm\)0.0938 \\  & 100 & 425.7642\(\pm\)0.0372 & 2.4501 & 1.7955\(\pm\)0.0071 & **1.7873\(\pm\)0.0425** \\ \hline \multirow{9}{*}{Gas} & 5 & 5.4063\(\pm\)0.0635 & 1.5689 & **1.4692\(\pm\)0.0102** & 1.4721\(\pm\)0.0765 \\  & 10 & 12.1241\(\pm\)0.0542 & 1.7919 & **1.6262\(\pm\)0.0760** & 1.6315\(\pm\)0.0747 \\  & 15 & 19.2035\(\pm\)0.0078 & 1.7675 & 1.7093\(\pm\)0.0500 & **1.6779\(\pm\)0.0448** \\  & 20 & 26.1705\(\pm\)0.1036 & 1.7616 & 1.6635\(\pm\)0.0678 & **1.6263\(\pm\)0.0263** \\  & 25 & 34.1813\(\pm\)0.1193 & 1.7907 & 1.6576\(\pm\)0.0365 & **1.6545\(\pm\)0.0031** \\  & 30 & 41.0833\(\pm\)0.3698 & 1.8155 & 1.6540\(\pm\)0.0012 & **1.6346\(\pm\)0.0199** \\  & 50 & 76.6821\(\pm\)1.8847 & 1.8207 & 1.6749\(\pm\)0.0403 & **1.6717\(\pm\)0.0082** \\  & 100 & 209.5885\(\pm\)0.0179 & 2.0473 & 1.6823\(\pm\)0.0196 & **1.6676\(\pm\)0.0165** \\ \hline \multirow{9}{*}{YaleB} & 5 & 0OM & 1.6582 & 1.4791\(\pm\)0.0473 & **1.4253\(\pm\)0.0905** \\  & 10 &  OOM & 1.7959 & **1.5023\(\pm\)0.0315** & 1.5340\(\pm\)0.0448 \\  & 15

\begin{table}
\begin{tabular}{c|c|c c c c c} \hline
**Dataset** & **k** & **TwoStage** & **Greedy** & **VolumeSampling** & **ILS** & **LSCSS** \\ \hline  & 5 & 1.14 & 1.70 & 71.75 & 0.32 & **0.02** \\  & 10 & 1.13 & 1.53 & 146.81 & 1.10 & **0.05** \\  & 15 & 1.16 & 2.37 & 217.47 & 2.77 & **0.07** \\  & 20 & 1.18 & 3.32 & 241.11 & 5.72 & **0.14** \\ arrhythmia & 25 & 1.19 & 4.15 & 282.61 & 8.47 & **0.22** \\  & 30 & 1.17 & 5.02 & 294.37 & 10.96 & **0.28** \\  & 50 & 1.23 & 8.38 & 482.52 & 39.51 & **0.67** \\  & 100 & 1.45 & 18.44 & 963.81 & 190.94 & **1.02** \\ \hline  & 5 & 1.19 & 1.09 & 57.28 & 0.33 & **0.04** \\  & 10 & 1.26 & 2.21 & 112.59 & 1.78 & **0.10** \\  & 15 & 1.29 & 3.31 & 162.58 & 4.25 & **0.16** \\  & 20 & 1.29 & 4.68 & 204.88 & 7.90 & **0.28** \\ binaryalpha & 25 & 1.32 & 5.87 & 260.07 & 12.03 & **0.36** \\  & 30 & 1.31 & 7.89 & 297.84 & 15.68 & **0.51** \\  & 50 & 1.38 & 14.29 & 487.54 & 50.88 & **0.75** \\  & 100 & 1.56 & 27.69 & 929.32 & 254.56 & **1.39** \\ \hline  & 5 & 1.57 & 3.84 & 1498.82 & 1.09 & **0.03** \\  & 10 & 1.85 & 8.34 & 3050.59 & 4.26 & **0.16** \\  & 15 & 2.03 & 13.56 & 4261.67 & 9.77 & **0.28** \\ COIL20 & 20 & 2.07 & 18.43 & 6147.76 & 17.20 & **0.44** \\ COIL20 & 25 & 2.02 & 24.72 & 7242.89 & 28.77 & **0.49** \\  & 30 & 2.03 & 30.44 & 9834.91 & 38.89 & **0.76** \\  & 50 & 2.18 & 50.90 & 17081.15 & 113.82 & **1.59** \\  & 100 & 2.49 & 89.30 & 73120.66 & 502.32 & **2.37** \\ \hline  & 5 & 13.18 & 20.79 & 5119.43 & 10.30 & **0.97** \\  & 10 & 15.37 & 46.10 & 10639.06 & 37.18 & **2.63** \\  & 15 & 15.59 & 72.65 & 14595.50 & 81.18 & **3.74** \\  & 20 & 15.42 & 101.63 & 23074.20 & 149.07 & **6.11** \\  & 25 & 15.45 & 133.56 & 26595.60 & 237.15 & **7.65** \\  & 30 & 15.58 & 166.70 & 31913.35 & 351.73 & **8.28** \\  & 50 & 15.71 & 317.13 & 51880.07 & 1120.75 & **14.36** \\  & 100 & **17.76** & 841.74 & 104368.19 & 6138.42 & 38.39 \\ \hline  & 5 & 0.41 & 0.43 & 23.34 & 0.57 & **0.04** \\  & 10 & 0.48 & 1.08 & 46.23 & 3.01 & **0.08** \\  & 15 & 0.43 & 1.67 & 86.54 & 6.38 & **0.17** \\  & 20 & 0.53 & 2.32 & 101.05 & 11.31 & **0.24** \\  & 25 & 0.54 & 3.17 & 117.49 & 18.24 & **0.32** \\  & 30 & 0.52 & 3.88 & 151.58 & 26.98 & **0.49** \\  & 50 & 0.67 & 6.24 & 253.12 & 72.95 & **0.53** \\  & 100 & **0.97** & 567.23 & 960.52 & 400.13 & 1.07 \\ \hline  & 5 & 2.04 & 10.39 & 3617.83 & 3.79 & **0.35** \\  & 10 & 2.29 & 22.89 & 5340.22 & 13.78 & **0.73** \\  & 15 & 2.24 & 36.11 & 7067.92 & 29.61 & **1.04** \\  & 20 & 2.25 & 49.81 & 8483.23 & 51.92 & **1.32** \\  & 25 & 2.23 & 64.70 & 18531.69 & 82.38 & **1.81** \\  & 30 & 2.24 & 79.76 & 21504.78 & 120.58 & **2.05** \\  & 50 & 2.39 & 145.43 & 37048.08 & 343.95 & **2.28** \\  & 100 & **2.62** & 333.87 & 52324.39 & 1512.94 & 3.92 \\ \hline \end{tabular}
\end{table}
Table 6: Comparison results of running time for varying \(k\) on 6 small datasets. If an algorithm fails to output a solution within 48 hours, the running time is set as “\(>\)48h”.

\begin{table}
\begin{tabular}{c|c c|c|c c} \hline Dataset & **Rows** & **Columns** & **Dataset** & **Rows** & **Columns** \\ \hline sonar & 208 & 60 & mediamill & 30993 & 120 \\ BinaryAlpha & 1404 & 320 & musk & 7074 & 168 \\ dna & 2000 & 180 & arrhythmia & 452 & 279 \\ CTs & 53500 & 386 & sEMG & 1800 & 2500 \\ ORL & 400 & 10304 & USPS & 9298 & 256 \\ COIL20 & 1440 & 1024 & ISOLET & 7797 & 617 \\ mnist & 10000 & 784 & UMIST & 575 & 12880 \\ \hline \end{tabular}
\end{table}
Table 5: Summary of 14 Small Datasets

\begin{table}
\begin{tabular}{c|c|c c c c c} \hline
**Dataset** & **k** & **TwoStage** & **Greedy** & **VolumeSampling** & **ILS** & **LSCSS** \\ \hline  & 5 & 0.64 & 4.75 & 1739.68 & 4.93 & **0.52** \\  & 10 & 4.63 & 10.11 & 2308.06 & 18.13 & **1.06** \\  & 15 & 4.51 & 15.57 & 2739.37 & 40.99 & **1.86** \\  & 20 & 6.55 & 21.39 & 3658.98 & 72.93 & **2.43** \\  & 25 & 7.54 & 27.41 & 4576.99 & 104.55 & **3.53** \\  & 30 & 10.62 & 33.53 & 5481.76 & 143.93 & **4.26** \\  & 50 & 13.78 & 60.84 & 9143.62 & 467.94 & **8.85** \\  & 100 & 21.23 & 114.71 & 17427.80 & 2727.86 & **15.41** \\ \hline  & 5 & 0.19 & 0.05 & 0.71 & 0.02 & **0.01** \\  & 10 & 0.16 & 0.10 & 1.06 & 0.07 & **0.02** \\  & 15 & 0.16 & 0.14 & 1.86 & 0.15 & **0.03** \\ sonar & 20 & 0.17 & 0.18 & 2.55 & 0.26 & **0.04** \\  & 25 & 0.15 & 0.22 & 2.97 & 0.41 & **0.07** \\  & 30 & 0.16 & 0.25 & 3.43 & 0.63 & **0.11** \\  & 50 & 0.29 & 0.34 & 5.39 & 1.90 & **0.18** \\ \hline  & 5 & 0.72 & 2.02 & 10.37 & 1.39 & **0.10** \\  & 10 & 0.75 & 4.65 & 19.89 & 5.77 & **0.15** \\  & 15 & 0.76 & 7.28 & 29.05 & 14.05 & **0.22** \\  & 20 & 0.79 & 10.17 & 39.21 & 24.34 & **0.34** \\  & 25 & 0.81 & 13.15 & 47.87 & 41.61 & **0.40** \\  & 30 & 0.87 & 16.27 & 55.09 & 57.71 & **0.68** \\  & 50 & 0.83 & 29.45 & 90.17 & 184.35 & **0.75** \\  & 100 & **1.25** & 60.38 & 178.53 & 761.19 & 1.90 \\ \hline  & 5 & 4.99 & 40.26 & 6290.13 & 3.28 & **0.45** \\  & 10 & 5.38 & 81.72 & 14800.67 & 10.92 & **1.04** \\  & 15 & 5.98 & 124.24 & 31659.17 & 21.72 & **1.51** \\  & 20 & 7.04 & 166.41 & 63172.23 & 38.54 & **2.02** \\  & 25 & 7.29 & 208.73 & \(>\)48h & 57.43 & **2.47** \\  & 30 & 7.71 & 253.16 & \(>\)48h & 79.04 & **3.28** \\  & 50 & 8.26 & 446.44 & \(>\)48h & 221.22 & **4.52** \\  & 100 & 10.83 & 1003.05 & \(>\)48h & 920.75 & **8.79** \\ \hline  & 5 & 2.88 & 26.40 & 4670.13 & 3.37 & **0.21** \\  & 10 & 3.64 & 53.72 & 8317.94 & 8.18 & **0.27** \\  & 15 & 9.04 & 80.43 & 12421.25 & 14.23 & **0.56** \\  & 20 & 23.67 & 108.34 & 16367.79 & 21.98 & **0.78** \\  & 25 & 33.4 & 138.25 & 20450.05 & 31.43 & **1.13** \\  & 30 & 35.64 & 168.26 & 24341.61 & 43.89 & **1.25** \\  & 50 & 37.32 & 294.22 & 45980.34 & 107.87 & **2.54** \\  & 100 & 47.36 & 716.27 & 96733.46 & 386.42 & **7.91** \\ \hline  & 5 & 2.47 & 69.85 & 10852.31 & 6.02 & **0.2** \\  & 10 & 2.94 & 140.38 & 21398.78 & 14.37 & **0.53** \\  & 15 & 7.52 & 212.42 & 31965.75 & 25.03 & **0.90** \\  & 20 & 22.61 & 278.14 & 44963.09 & 38.73 & **1.13** \\  & 25 & 31.67 & 328.22 & 53477.56 & 53.96 & **1.54** \\  & 30 & 31.95 & 404.45 & 71528.05 & 69.63 & **1.80** \\  & 50 & 33.31 & 732.53 & \(>\)48h & 168.18 & **4.11** \\  & 100 & 39.54 & 1532.27 & \(>\)48h & 428.62 & **11.97** \\ \hline  & 5 & 3.32 & 22.45 & 2834.30 & 4.73 & **0.38** \\  & 10 & 3.36 & 47.99 & 5582.86 & 17.21 & **0.8** \\  & 15 & 3.41 & 71.95 & 8039.87 & 37.67 & **1.33** \\  & 20 & 3.49 & 96.56 & 10681.44 & 68.24 & **1.88** \\  & 25 & 3.45 & 124.43 & 13936.23 & 104.85 & **2.43** \\  & 30 & 3.52 & 153.30 & 19584.82 & 154.39 & **3.23** \\  & 50 & **3.69** & 267.98 & 27634.12 & 435.65 & 4.71 \\  & 100 & **4.16** & 572.09 & 58759.88 & 1907.21 & 7.84 \\ \hline  & 5 & 0.91 & 1.15 & 303.02 & 2.24 & **0.12** \\  & 10 & 1.14 & 2.25 & 628.31 & 8.11 & **0.25** \\  & 15 & 1.13 & 3.35 & 947.55 & 18.84 & **0.33** \\  & 20 & 1.12 & 4.60 & 1307.11 & 34.29 & **0.66** \\  & 25 & 1.29 & 6.06 & 1584.26 & 54.62 & **0.82** \\  & 30 & 1.25 & 7.59 & 1899.81 & 77.41 & **1.20** \\  & 50 & **1.56** & 15.26 & 3327.07 & 241.06 & 2.37 \\  & 100 & **2.21** & 41.90 & 6458.70 & 1088.98 & 6.79 \\ \hline \end{tabular}
\end{table}
Table 7: Comparison results on running time for varying \(k\) on 8 small datasets. If an algorithm fails to output a solution within 48 hours, the running time is set as “\(>\)48h”.

[MISSING_PAGE_FAIL:25]

[MISSING_PAGE_FAIL:26]

\begin{table}
\begin{tabular}{c|c|c c c c} \hline \multirow{2}{*}{Dataset} & \multirow{2}{*}{\(k\)} & \multicolumn{2}{c}{QRP} & \multicolumn{2}{c}{LSCSS} \\ \cline{3-5}  & & ratio & time & ratio & time \\ \hline \multirow{6}{*}{CMHS} & 5 & 4.9384 & 1289.86 & 1.1348\(\pm\)0.0202 & 2.82 \\  & 10 & 3.3580 & 1289.87 & 1.2237\(\pm\)0.0894 & 5.17 \\  & 15 & 5.7633 & 1289.87 & 1.6134\(\pm\)0.0177 & 13.39 \\  & 20 & 3.5838 & 1289.90 & 1.6489\(\pm\)0.0482 & 30.45 \\  & 25 & 3.7979 & 1289.88 & 1.6652\(\pm\)0.0628 & 43.27 \\  & 30 & 4.0852 & 1289.91 & 1.6377\(\pm\)0.0136 & 52.82 \\  & 50 & 4.0925 & 1289.93 & 1.6250\(\pm\)0.0553 & 62.36 \\  & 100 & 4.6109 & 1289.98 & 1.5042\(\pm\)0.0199 & 108.98 \\ \hline \multirow{6}{*}{ELD} & 5 & 1.9681 & 124.93 & 1.1570\(\pm\)0.03478 & 2.18 \\  & 10 & 2.5603 & 124.93 & 1.2197\(\pm\)0.0609 & 3.47 \\  & 15 & 2.6873 & 124.94 & 1.2397\(\pm\)0.0384 & 5.36 \\  & 20 & 2.8871 & 124.94 & 1.3580\(\pm\)0.0378 & 13.93 \\  & 25 & 3.4399 & 124.94 & 1.4146\(\pm\)0.0023 & 22.98 \\  & 30 & 3.5369 & 124.95 & 1.4671\(\pm\)0.0634 & 35.03 \\  & 50 & 4.3966 & 124.97 & 1.5475\(\pm\)0.0604 & 66.27 \\  & 100 & 4.8920 & 125.03 & 1.7935\(\pm\)0.0445 & 89.94 \\ \hline \multirow{6}{*}{Gas} & 5 & 2.2778 & 913.83 & 1.4721\(\pm\)0.0765 & 5.83 \\  & 10 & 2.1567 & 913.60 & 1.6315\(\pm\)0.0747 & 11.67 \\  & 15 & 2.5804 & 913.60 & 1.6779\(\pm\)0.0448 & 19.3 \\  & 20 & 2.4450 & 913.62 & 1.6263\(\pm\)0.0263 & 47.9 \\  & 25 & 2.7521 & 913.60 & 1.6545\(\pm\)0.0031 & 130.11 \\  & 30 & 2.8961 & 913.62 & 1.6346\(\pm\)0.0199 & 322.92 \\  & 50 & 2.8465 & 913.63 & 1.6717\(\pm\)0.0082 & 386.15 \\  & 100 & 3.6717 & 913.65 & 1.6676\(\pm\)0.0165 & 850.01 \\ \hline \multirow{6}{*}{FAds} & 5 & 1.1361 & 6487.57 & 1.0648\(\pm\)0.0194 & 3.4 \\  & 10 & 1.1805 & 6487.52 & 1.0748\(\pm\)0.0208 & 10.58 \\  & 15 & 1.2055 & 6487.52 & 1.0726\(\pm\)0.0114 & 17.65 \\  & 20 & 1.2224 & 6487.54 & 1.0815\(\pm\)0.0126 & 18.27 \\  & 25 & 1.2383 & 6487.55 & 1.1020\(\pm\)0.0090 & 22.29 \\  & 30 & 1.2531 & 6487.65 & 1.0898\(\pm\)0.0097 & 22.76 \\  & 50 & 1.2886 & 6487.62 & 1.2140\(\pm\)0.0112 & 36.04 \\  & 100 & 1.3430 & 6487.74 & 1.2628\(\pm\)0.0195 & 95.67 \\ \hline \multirow{6}{*}{TGas} & 5 & 2.7632 & 1239.08 & 1.1657\(\pm\)0.1101 & 17.15 \\  & 10 & 4.0830 & 1239.06 & 1.4858\(\pm\)0.0731 & 30.28 \\ \cline{1-1}  & 15 & 6.4080 & 1239.07 & 1.6107\(\pm\)0.0547 & 36.99 \\ \cline{1-1}  & 20 & 7.1182 & 1239.07 & 1.5986\(\pm\)0.0879 & 49.9 \\ \cline{1-1}  & 25 & 9.3027 & 1239.08 & 1.7588\(\pm\)0.0850 & 61.36 \\ \cline{1-1}  & 30 & 10.4892 & 1239.10 & 1.7680\(\pm\)0.1291 & 77.93 \\ \cline{1-1}  & 50 & 18.9009 & 1239.16 & 1.7628\(\pm\)0.0938 & 114.23 \\ \cline{1-1}  & 100 & 23.9558 & 1239.42 & 1.7873\(\pm\)0.0425 & 243.89 \\ \hline \end{tabular}
\end{table}
Table 10: Comparison results on error ratio and running time for QRP and LSCSS algorithms

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The main claims made in the abstract reflect the paper's primary contributions and scope. In this paper, an approximation algorithm with running time linear in both \(n\) and \(d\) is proposed for the Column Subset Selection problem, which selects exactly \(k\) columns. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [NA] Justification: This paper has no limitation. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof?Answer: [Yes] Justification: All the theorems, formulas, and proofs are clearly stated in the paper. Guidelines:

* The answer NA means that the paper does not include theoretical results.
* All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced.
* All assumptions should be clearly stated or referenced in the statement of any theorems.
* The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.
* Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.
* Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: The information required to reproduce the main experimental results is provided in the paper. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code**Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: The datasets can be found via the link provided in the paper, and the codes are available upon request via email. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: The experimental settings have been clearly stated in the paper. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: In the experiment comparison results, each algorithm is executed 10 times on each dataset, and the average results are reported as the final results. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).

* The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)
* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: For each experiment, the paper provides details on the computer resources required to reproduce the results. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: The research presented in the paper complies with the NeurIPS Code of Ethics. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: We present a linear time local search algorithm for the CSS problem with exactly \(k\) columns selected, which we expect to be beneficial for handling other dimensionality reduction tasks. The primary purpose is to offer algorithmic insights for obtaining linear time algorithm, where we do not foresee any societal consequences specifically related to the proposed method. Guidelines: * The answer NA means that there is no societal impact of the work performed.

* If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.
* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: This paper poses no such risks about safeguards. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [NA] Justification: This paper poses no such risks about safeguards. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.

* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: This paper does not use existing assets. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.