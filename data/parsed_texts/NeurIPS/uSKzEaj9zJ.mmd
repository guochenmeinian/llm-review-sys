# Nonlocal Attention Operator: Materializing Hidden Knowledge Towards Interpretable Physics Discovery

 Yue Yu

Department of Mathematics,

Lehigh University,

Bethlehem, PA 18015, USA

yuy214@lehigh.edu

&Ning Liu

Global Engineering and

Materials, Inc.,

Princeton, NJ 08540, USA

&Fei Lu

Department of Mathematics,

Johns Hopkins University,

Baltimore, MD 21218, USA

&Tian Gao

IBM Research,

Yorktown Heights,

NY 10598, USA

&Siavash Jafarzadeh

Department of Mathematics,

Lehigh University,

Bethlehem, PA 18015, USA

&Stewart Silling

Center for Computing Research,

Sandia National Laboratories,

Albuquerque, NM 87123, USA

Corresponding Author

###### Abstract

Despite the recent popularity of attention-based neural architectures in core AI fields like natural language processing (NLP) and computer vision (CV), their potential in modeling complex physical systems remains under-explored. Learning problems in physical systems are often characterized as discovering operators that map between function spaces based on a few instances of function pairs. This task frequently presents a severely ill-posed PDE inverse problem. In this work, we propose a novel neural operator architecture based on the attention mechanism, which we coin Nonlocal Attention Operator (NAO), and explore its capability towards developing a foundation physical model. In particular, we show that the attention mechanism is equivalent to a double integral operator that enables nonlocal interactions among spatial tokens, with a data-dependent kernel characterizing the inverse mapping from data to the hidden parameter field of the underlying operator. As such, the attention mechanism extracts global prior information from training data generated by multiple systems, and suggests the exploratory space in the form of a nonlinear kernel map. Consequently, NAO can address ill-posedness and rank deficiency in inverse PDE problems by encoding regularization and achieving generalizability. We empirically demonstrate the advantages of NAO over baseline neural models in terms of generalizability to unseen data resolutions and system states. Our work not only suggests a novel neural operator architecture for learning interpretable foundation models of physical systems, but also offers a new perspective towards understanding the attention mechanism. Our code and data accompanying this paper are available at https://github.com/fishmoon1234/NAO.

## 1 Introduction

The interpretability of machine learning (ML) models has become increasingly important from the security and robustness standpoints (Rudin et al., 2022, Molnar, 2020). This is particularly true in physics modeling problems that can affect human lives, where not only the accuracy but also the transparency of data-driven models are essential in making decisions (Coorey et al., 2022, Ferrari and Willcox, 2024). Nevertheless, it remains challenging to discover the underlying physical system and the governing mechanism from data. Taking the material modeling task for instance, given that only the deformation field is observable, the goal of discovering the underlying material parameter field and mechanism presents an ill-posed unsupervised learning task. That means, even if an ML model can serve as a good surrogate to predict the corresponding loading field from a given deformation field, its inference of the material parameters can still drastically deteriorate.

To discover an interpretable mechanism for physical systems, a major challenge is to infer the governing laws of these systems that are often high- or infinite-dimensional, from data that are comprised of discrete measurements of continuous functions. Therefore, a data-driven surrogate model needs to learn not only the mapping between input and output function pairs, but also the mapping from given function pairs to the hidden state. From the PDE-based modeling standpoint, learning a surrogate model corresponds to a forward problem, whereas inferring the underlying mechanism is an inverse problem. The latter is generally an enduring ill-posed problem, especially when the measurements are scarce. Unfortunately, such an ill-posedness issue may become even more severe in neural network models, due to the inherent bias of neural network approximations (Xu et al., 2019). To tackle this challenge, many deep learning methods have recently been proposed as inverse PDE solvers (Fan and Ying, 2023; Molinaro et al., 2023; Jiang et al., 2022; Chen et al., 2023). The central idea is to incorporate prior information into the learning scheme, in the form of governing PDEs (Yang et al., 2021; Li et al., 2021), regularizers (Dittmer et al., 2020; Obmann et al., 2020; Ding et al., 2022; Chen et al., 2023), or additional operator structures (Uhlmann, 2009; Lai et al., 2019; Yilmaz, 2001). However, such prior information is often either unavailable or problem-specific in complex systems. As a result, these methods can only solve the inverse problem for a particular system, and one has to start from scratch when the system varies (e.g., when the material of the specimen undergoes degradation in a material modeling task).

In this work, we propose **Nonlocal Attention Operator (NAO)**, a novel attention-based neural operator architecture to simultaneously solve both forward and inverse modeling problems. Neural operators (NOs) (Li et al., 2020, 2020, 2020) learn mappings between infinite-dimensional function spaces in the form of integral operators, hence they provide promising tools for the discovery of continuum physical laws by manifesting the mapping between spatial and/or spatiotemporal data; see You et al. (2022); Liu et al. (2024, 2024, 2023); Ong et al. (2022); Cao (2021); Lu et al. (2019, 2021); Goswami et al. (2022); Gupta et al. (2021) and references therein. However, most NOs focus on providing an efficient surrogate for the underlying physical system as a forward solver. They are often employed as black-box universal approximators but lack interpretability of the underlying physical laws. In contrast, the key innovation of NAO is that it introduces a kernel map based on the attention mechanism for simultaneous learning of the operator and the kernel map. As such, the kernel map automatically infers the context of the underlying physical system in an unsupervised manner. Intuitively, the attention mechanism extracts hidden knowledge from multiple systems by providing a function space of identifiability for the kernels, which acts as an automatic data-driven regularizer and endows the learned model's generalizability to new and unseen system states.

In this context, NAO learns a kernel map using the attention mechanism and simultaneously solves both the forward and inverse problems. The kernel map, whose parameters extract the global information about the kernel from multiple systems, efficiently infers resolution-invariant kernels from new datasets. As a consequence, NAO can achieve interpretability of the nonlocal operator and enable the discovery of hidden physical laws. **Our key contributions** include:

* We bridge the divide between inverse PDE modeling and physics discovery tasks, and present a method to simultaneously perform physics modeling (forward PDE) and mechanism discovery (inverse PDE).
* We propose a novel neural operator architecture NAO, based on the principle of contextual discovery from input/output function pairs through a kernel map constructed from multiple physical systems. As such, NAO is generalizable to new and unseen physical systems, and offers meaningful physical interpretation through the discovered kernel.
* We provide theoretical analysis to show that the attention mechanism in NAO acts to provide the space of identifiability for the kernels from the training data, which reveals its ability to resolve ill-posed inverse PDE problems.

Figure 1: Illustration of NAOâ€™s architecture.

* We conduct experiments on zero-shot learning to new and unseen physical systems, demonstrating the generalizability of NAO in both forward and inverse PDE problems.

## 2 Background and related work

Our work resides at the intersection of operator learning, attention-based models, and forward and inverse problems of PDEs. The ultimate goal is to model multiple physical systems from data while simultaneously discovering the hidden mechanism.

**Neural operator for hidden physics.** Learning complex physical systems directly from data is ubiquitous in scientific and engineering applications (Ghaboussi et al., 1998; Liu et al., 2024; Ghaboussi et al., 1991; Carleo et al., 2019; Karniadakis et al., 2021; Zhang et al., 2018; Cai et al., 2022; Pfau et al., 2020; He et al., 2021; Besand et al., 2006). In many applications, the underlying governing laws are unknown, hidden in data to be revealed by physical models. Ideally, these models should be _interpretable_ for domain experts, who can then use these models to make further predictions and expand the understanding of the target physical system. Also, these models should be _resolution-invariant_. Neural operators are designed to learn mappings between infinite-dimensional function spaces (Li et al., 2020, 2020, 2022; Ong et al., 2022; Cao, 2021; Lu et al., 2019, 2021; Goswami et al., 2022; Gupta et al., 2021). As a result, NOs provide a promising tool for the discovery of physical laws by manifesting the mapping between spatial and/or spatio-temporal data.

**Forward and inverse PDE problems.** Most current NOs focus on providing an efficient surrogate for the underlying physical system as a forward PDE solver. They are often employed as black-box universal approximators without interpretability of the underlying physical laws. Conversely, several deep learning methods have been proposed as inverse PDE solvers (Fan and Ying, 2023; Molinaro et al., 2023; Jiang et al., 2022; Chen et al., 2023), aiming to reconstruct the parameters in the PDE from solution data. Compared to the forward problem, the inverse problem is typically more challenging due to its ill-posed nature. To tackle the ill-posedness, many NOs incorporate prior information, in the form of governing PDEs (Yang et al., 2021; Li et al., 2021), regularizers (Dittmer et al., 2020; Obmann et al., 2020; Ding et al., 2022; Chen et al., 2023), or additional operator structures (Uhlmann, 2009; Lai et al., 2019; Yilmaz, 2001). To our knowledge, our NO architecture is the first that solves both the forward (prediction) and inverse (discovery) problems simultaneously.

**Attention mechanism.** Since 2017, the attention mechanism has become the backbone of state-of-the-art deep learning models on many core AI tasks like NLP and CV. By calculating the similarity among tokens, the attention mechanism captures long-range dependencies between tokens (Vaswani et al., 2017). Then, the tokens are spatially mixed to obtain the layer output. Based on the choice of mixers, attention-based models can be divided into three main categories: discrete graph-based attentions (Child et al., 2019; Ho et al., 2019; Wang et al., 2020; Katharopoulos et al., 2020), MLP-based attentions (Tolstikhin et al., 2021; Touvron et al., 2022; Liu et al., 2021), and convolution-based attentions (Lee-Thorp et al., 2021; Rao et al., 2021; Guibas et al., 2021; Nekoozadeh et al., 2023). While most attention models focus on discrete mixers, it is proposed in Guibas et al. (2021); Nekoozadeh et al. (2023); Tsai et al. (2019); Cao (2021); Wei and Zhang (2023) to frame token mixing as a kernel integration, with the goal of obtaining predictions independent of the input resolution.

Along the line of PDE-solving tasks, various attention mechanisms have been used to enlarge model capacity. To improve the accuracy of forward PDE solvers, Cao (2021) removes the softmax normalization in the attention mechanism and employs linear attention as a learnable kernel in NOs. Further developments include the Galerkin-type linear attention in an encoder-decoder architecture in OFormer (Li et al., 2022), a hierarchical transformer for learning multiscale problems (Liu et al., 2022), and a heterogeneous normalized attention with a geometric gating mechanism (Hao et al., 2023) to handle multiple input features. In particular, going beyond solving a single PDE, the foundation model feature of attention mechanisms has been applied towards solving multiple types of PDEs within a specified context in Yang and Osher (2024); Ye et al. (2024); Sun et al. (2024); Zhang (2024). However, none of the existing work discovers hidden physics from data, nor do they discuss the connections between the attention mechanism and the inverse PDE problem.

## 3 Nonlocal Attention Operator

Consider multiple physical systems that are described by a class of operators mapping from input functions \(u\in\mathbb{X}\) to output functions \(f\in\mathbb{Y}\). Our goal is to learn the common physical law, in the form of operators \(\mathcal{L}_{K}:\mathbb{X}\rightarrow\mathbb{Y}\) with system-dependent kernels \(K\):

\[\mathcal{L}_{K}[u]+\epsilon=f.\] (1)Here \(\mathbb{X}\) and \(\mathbb{Y}\) are Banach spaces, \(\epsilon\) denotes an additive noise describing the discrepancy between the ground-truth operator and the optimal surrogate operator, and \(K\) is a kernel function representing the nonlocal spatial interaction. As such, the kernel provides the knowledge of its corresponding system, while (1) offers a zero-shot prediction model for new and unseen systems.

To formulate the learning, we consider \(n_{train}\) training datasets from different systems, with each dataset containing \(d_{u}\) function pairs \((u,f)\):

\[\mathcal{D}_{\mathrm{tr}}=\{\{(u_{i}^{\eta}(x),f_{i}^{\eta}(x))\}_{i=1}^{d_{u}} \}_{\eta=1}^{n_{train}}.\] (2)

In practice, the data of the input and output functions are on a spatial mesh \(\{x_{k}\}_{k=1}^{n_{x}}\subset\Omega\subset\mathbb{R}^{d_{x}}\). The \(n_{train}\) models with kernels \(\{K^{\eta}\}_{\eta=1}^{n_{train}}\) correspond to different material micro-structures or different parametric settings. As a demonstration, we consider models for heterogeneous materials with operators in the form

\[\mathcal{L}_{K}[u](x)=\int_{\Omega}K(x,y)g[u](y)dy,\,x\in\Omega,\] (3)

where \(g[u](y)\) is a functional of \(u\) determined by the operator; for example \(g[u](y)=u(y)\) in Section 5.3. Our approach extends naturally to other forms of operators, such as those with radial interaction kernels in Section 5.1 and heterogeneous interaction in the form of \(\mathcal{L}_{K}[u](x)=\int_{\Omega}K(x,y)g[u](x,y)dy\). Additionally, for simplicity, we consider scalar-valued functions \(u\) and \(f\) and note that the extension to vector-valued functions is trivial.

**Remark:** Such an operator learning problem arises in many applications in forward and inverse PDE-solving problems. The inference of the kernel \(K\) is an inverse problem, and the learning of the nonlocal operator is a forward problem. When considering a single physical system and taking \(K\) in (3) as an input-independent kernel, classical NOs can be obtained for forward PDE-solving tasks (Li et al., 2020; Guibas et al., 2021) and governing law learning tasks (You et al., 2021; Jafarzadeh et al., 2024). Different from existing work, we consider the operator learning across multiple systems.

### Kernel map with attention mechanism

The key ingredient in NAO is a kernel map constructed using the attention mechanism. It maps from data pairs to an estimation of the underlying kernel. The kernel map

\[\{(u_{i},f_{i})\}_{i=1}^{d_{u}}\,\rightarrow\,K[\mathbf{u}_{1:d},\mathbf{f}_{ 1:d};\theta]\] (4)

has parameters \(\theta\) estimated from the training dataset (2). As such, it maps from the token \((\mathbf{u}_{1:d},\mathbf{f}_{1:d})\) of the dataset \(\{(u_{i},f_{i})\}_{i=1}^{d_{u}}\) to a kernel estimator, acting as an inverse PDE solver.

A major innovation of this kernel map is its dependence on both \(u\) and \(f\) through their tokens. Thus, our approach distinguishes itself from the forward problem-solving NOs in the related work section, where the attention depends only on \(u\).

We first transfer the data \(\{(u_{i},f_{i})\}_{i=1}^{d_{u}}\) to tokens \((\mathbf{u}_{1:d},\mathbf{f}_{1:d})\) according to the operator in (3) by

\[\begin{split}\mathbf{u}_{1:d}&=(\mathbf{u}_{1}, \ldots,\mathbf{u}_{d})=\big{(}g[u_{j}](y_{k})\big{)}_{1\leq j\leq d,1\leq k \leq N}\in\mathbb{R}^{N\times d},\\ \mathbf{f}_{1:d}&=(f_{j}(x_{k}))_{1\leq j\leq d,1 \leq k\leq N}\in\mathbb{R}^{N\times d},\end{split}\] (5)

where \(d=d_{u}\) and \(N=n_{x}\), assuming that \(g[u]\) has a spatial mesh \(\{y_{k}=x_{k}\}_{k=1}^{N}\).

Then, our discrete \((L+1)\)-layer attention model for the inverse PDE problem writes:

\[\begin{split}\bm{X}_{\text{in}}&=\bm{X}^{(0)}=(\bm {U}^{(0)},\bm{F}^{(0)}):=(\mathbf{u}_{1:d};\mathbf{f}_{1:d})\in\mathbb{R}^{2N \times d},\\ \bm{X}^{(l)}&=\text{Att}[\bm{X}^{(l-1)};\theta_{l}] \bm{X}^{(l-1)}+\bm{X}^{(l-1)}=:(\bm{U}^{(l)},\bm{F}^{(l)})\in\mathbb{R}^{2N \times d},\quad 1\leq l<L,\\ \bm{X}_{\text{out}}&=\bm{X}^{L}=K[\mathbf{u}_{1:d}, \mathbf{f}_{1:d};\theta]\mathbf{u}_{1:d}\approx\mathbf{f}_{1:d}\in\mathbb{R}^{ N\times d}.\end{split}\] (6)

Here, \(\theta_{l}=(\bm{W}_{l}^{Q}\in\mathbb{R}^{d\times d_{k}},\bm{W}_{l}^{K}\in \mathbb{R}^{d\times d_{k}})\) and the attention function is

\[\text{Attn}[\bm{X};\theta_{l}]=\sigma\left(\frac{1}{\sqrt{d_{k}}}\bm{X}\bm{W} _{l}^{Q}\bm{W}_{l}^{K}{}^{\top}\bm{X}^{\top}\right)\in\mathbb{R}^{2N\times 2N}.\]

The kernel map is defined as

\[\begin{split} K[\mathbf{u}_{1:d},\mathbf{f}_{1:d};\theta]& =W^{P,u}\sigma\left(\frac{1}{\sqrt{d_{k}}}(\bm{U}^{(L-1)})^{\top}\bm{W}_{L}^{Q} (\bm{W}_{L}^{K})^{\top}\bm{U}^{(L-1)}\right)\\ &+W^{P,f}\sigma\left(\frac{1}{\sqrt{d_{k}}}(\bm{F}^{(L-1)})^{ \top}\bm{W}_{L}^{Q}(\bm{W}_{L}^{K})^{\top}\bm{U}^{(L-1)}\right),\end{split}\] (7)

[MISSING_PAGE_FAIL:5]

For simplicity, we assume that the dataset in (2) has \(d_{u}=1\) and \(n_{train}=1\) with a uniform mesh \(\{x_{j}\}_{j=1}^{n_{x}}\). We define the tokens by

\[\mathbf{u}_{1:d}=(\mathbf{u}_{1},\ldots,\mathbf{u}_{d})=(g[u](r_{k},x_{j}))_{1 \leq j\leq d,1\leq k\leq N}\in\mathbb{R}^{N\times d},\ \mathbf{f}_{1:d}=(f(x_{j}))_{1\leq j\leq d}\in \mathbb{R}^{1\times d},\] (13)

where \(d=n_{x}\) and \(\{r_{k}\}_{k=1}^{N}\) is the spatial mesh for \(K\)'s independent variable \(r\in[0,\delta]\).

**Lemma 4.1**.: _Consider the two-layer attention model in (6)-(7) with bounded parameters. For each \(d\) and \(N\), let \(\{x_{j}\}_{j=1}^{d}\) and \(\{r_{k}\}_{k=1}^{N}\) be uniform meshes of the compact sets \(\Omega\) and \([0,\delta]\), and let \(\{A_{j}\}_{j=1}^{d}\) be the resulting uniform partition of \(\Omega\). Assume that \(g[u]\) in (12) is continuous on \([0,\delta]\times\Omega\). Then,_

\[\lim_{N\to\infty}\lim_{d\to\infty}\sum_{k=1}^{N}K[\mathbf{u}_{1:d},\mathbf{f}_{1:d};\theta](r_{k})\mathbf{1}_{[r_{k-1},r_{k})}(r)(r_{k}-r_{k-1})\] (14) \[= K[u,f](r):=\int_{0}^{\delta}W^{P,u}(|r^{\prime}|)\sigma\left( \int\int\left[g[u](r^{\prime},x)W^{QR}(x,y)g[u](r,y)dxdy\right]\right)dr^{\prime}\] \[+W^{P,f}\sigma\left(\int\int\left[f(x)W^{QR}(x,y)g[u](r,y)\right] dxdy\right),\]

_where \(W^{QK}(x,y)=\lim_{d\to\infty}\sum_{j,j^{\prime}=1}^{d}W^{QK}[j,j^{\prime}] \mathbf{1}_{A_{j}\times A_{j^{\prime}}}(x,y)\) is the scaled \(L^{2}(\Omega\times\Omega)\) limit of the parameter matrix \(W^{QK}[j^{\prime},j]=\sum_{l=1}^{d_{h}}W^{Q}[j,l]\cdot W^{K}[j^{\prime},l]\) and \(W^{P,u}(r)=\lim_{N\to\infty}\sum_{k=1}^{N}W^{P,u}[k]\mathbf{1}_{[r_{k-1},r_{k })}(r)\)._

### Space of identifiability for the kernels

For a given training dataset, we show that the function space in which the kernels can be identified is the closure of a data-adaptive reproducing kernel Hilbert space (RKHS). This space contains the range of the kernel map and hence provides the ground for analyzing the inverse problem.

**Lemma 4.2** (Space of Identifiability).: _Assume that the training data pairs in (2) are sampled from continuous functions \(\{u_{i}^{\eta}\}_{i,j=1}^{d_{u},n_{train}}\) with a compact support. Then, the function space the loss function in (9) has a unique minimizer \(K(s)=K[\mathbf{u}_{1:d}^{\eta},\mathbf{f}_{1:d}^{\eta};\theta](s)\) is the closure of a data-adaptive RKHS \(H_{G}\) with a reproducing kernel \(\bar{G}\) determined by the training data:_

\[\bar{G}(r,s)=[\rho^{\prime}(r)\rho^{\prime}(s)]^{-1}G(r,s),\]

_where \(\rho^{\prime}\) is the density of the empirical measure \(\rho\) defined by_

\[\rho^{\prime}(r):=\frac{1}{Z}\sum_{\eta=1}^{n_{train}}\sum_{i=1}^{d_{u}}\int_ {\Omega}|g[u_{i}^{\eta}](r,x)|dx,\] (15)

_and the function \(G\) is defined by \(G(r,s):=\frac{1}{n_{train}d}\sum_{\eta=1}^{n_{train}}\sum_{i=1}^{d_{u}}\int_ {\Omega}g[u_{i}^{\eta}](r,x)g[u_{i}^{\eta}](s,x)dx\)._

The above space is data-adaptive since the integral kernel \(\bar{G}\) depends on data. It characterizes the information in the training data for estimating the nonlocal kernel \(K(s)=K[\mathbf{u}_{1:d}^{\eta},\mathbf{f}_{1:d}^{\eta};\theta](s)\). In general, the more data, the larger the space is. On the other hand, note that the loss function's minimizer with respect to \(K(s)\) is not the kernel map. The minimizer is a fixed estimator for the training dataset and does not provide any information for estimating the kernel from another dataset.

**Comparison with regularized estimators.** The kernel map solves the ill-posed inverse problem using prior information from the training dataset of multiple systems, which is not used in classical inverse problem solvers. To illustrate this mechanism, consider the extreme case of estimating the kernel in the nonlocal operator from a dataset consisting of only a single function pair \((u,f)\). This inverse problem is severely ill-posed because of the small dataset and the need for deconvolution to estimate the kernel. Thus, regularization is necessary, where two main challenges present: (i) the selection of a proper regularization with limited prior information, and (ii) the prohibitive computational cost of solving the resulting large linear systems many times.

In contrast, our kernel map \(K[\mathbf{u}_{1:d},\mathbf{f}_{1:d};\theta](s)\), with the parameter \(\theta\) estimated from the training datasets, acts on the token \((\mathbf{u}_{1:d},\mathbf{f}_{1:d})\) of \((u,f)\) to provide an estimator. It passes the prior information about the kernel from the training dataset to the estimation for new datasets. Importantly,it captures the nonlinear dependence of the estimator on the data \((u,f)\). Computationally, it can be applied directly to multiple new datasets without solving the linear systems. In Section B.2, we further show that a regularized estimator depends nonlinearly on the data pair \((u,f)\). In particular, similar to Lemma 4.1, there is an RKHS determined by the data pair \((u,f)\). The regularized estimator suggests that the kernel map can involve a component quadratic in the feature \(g[u]\), similar to the limit form of the attention model in Lemma 4.1.

## 5 Experiments

We assess the performance of NAO on a wide range of physics modeling and discovery datasets. Our evaluation focuses on several key aspects: 1) we demonstrate the merits of the continuous and linear attention mechanism, compare the performance with the baseline discrete attention model (denoted as Discrete-NAO), the softmax attention mechanism (denoted as Softmax-NAO), NAO with input on \(u\) only (denoted as NAO-u), the convolution-based attention mechanism (denoted as AFNO (Guibas et al., 2021)), and an MLP-based encoder architecture that maps the datum \([\bm{u}_{1:d},\bm{f}_{1:d}]\) directly to a latent kernel (denoted as Autoencoder); 2) we measure the generalizability, in particular, the zero-shot prediction performance in modeling a new physical system with unseen governing equations, and across different resolutions; 3) we evaluate the data efficiency-accuracy trade-off in ill-posed inverse PDE learning tasks, as well as the interpretability of the learned kernels. In all experiments, the optimization is performed with the Adam optimizer. To conduct fair comparison across different methods, we tune the hyperparameters, including the learning rates, the decay rates, and the regularization parameters, to minimize the training loss. In all examples, we use 3-layer models, and parameterize the kernel network \(W^{P,u}\) and \(W^{P,f}\) with a 3-layer MLP with hidden dimensions \((32,64)\) and LeakyReLU activation. Experiments are conducted on a single NVIDIA GeForce RTX 3090 GPU with 24 GB memory. Additional results and details on data generation and training strategies are provided in Appendix C.

### Radial kernel learning

In this example, we consider the learning of nonlocal diffusion operators, in the form:

\[\mathcal{L}_{\gamma_{\eta}}[u](x)=\int_{\Omega}\gamma_{\eta}(|y-x|)[u(y)-u(x)] dy=f(x),\forall x\in\Omega.\] (16)

Unlike a (local) differential operator, this operator depends on the function \(u\) nonlocally through the convolution of \(u(y)-u(x)\), and the operator is characterized by a radial kernel \(\gamma_{\eta}\). It finds broad physical applications in describing fracture mechanics (Silling, 2000), anomalous diffusion behaviors (Bucur et al., 2016), and the homogenization of multiscale systems (Du et al., 2020).

\begin{table}
\begin{tabular}{c c|c|c c|c c} \hline Case & model & \#param & \multicolumn{2}{c}{Operator test error} & \multicolumn{2}{c}{Kernel test error} \\ \cline{3-7}  & & & ID & OOD1 & ID & OOD1 \\ \hline \hline \multirow{6}{*}{\(d\) = 302, \(d_{k}\)=10} & Discrete-NAO & 16526 & **1.33\%** & 25.81\% & 29.02\% & 28.80\% \\  & Softmax-NAO & 18843 & 13.45\% & 66.06\% & 67.55\% & 85.80\% \\  & AFNO & 19605 & 22.62\% & 68.76\% & - & - \\  & NAO & 18843 & 1.48\% & **8.10\%** & **5.40\%** & **10.02\%** \\  & NAO-u & 18842 & 13.68\% & 66.68\% & 20.46\% & 74.03\% \\  & Autoencoder & 16424 & 12.97\% & 1041.49\% & 22.56\% & 136.79\% \\ \hline \hline \(d\) = 302, \(d_{k}\)=5 & Discrete-NAO & 10465 & **1.63\%** & 15.80\% & 33.21\% & 30.39\% \\  & NAO & 12783 & 2.34\% & **9.23\%** & **6.87\%** & **14.62\%** \\ \hline \(d\) = 302, \(d_{k}\)=20 & Discrete-NAO & 28645 & 1.35\% & 18.70\% & 35.49\% & 30.81\% \\  & NAO & 30963 & **1.33\%** & **9.12\%** & **4.63\%** & **9.14\%** \\ \hline \hline \(d\) = 100, \(d_{k}\)=10 & Discrete-NAO & 8446 & 1.73\% & 14.92\% & 34.52\% & 35.20\% \\  & NAO & 10763 & **1.07\%** & **6.35\%** & **7.41\%** & **17.02\%** \\ \hline \(d\) = 50, \(d_{k}\)=10 & Discrete-NAO & 6446 & 2.29\% & 10.31\% & 41.80\% & 45.30\% \\  & NAO & 8763 & **1.56\%** & **7.19\%** & **15.95\%** & **29.47\%** \\ \hline \(d\) = 30, \(d_{k}\)=10 & Discrete-NAO & 5646 & 5.60\% & 11.31\% & 58.24\% & 64.23\% \\  & NAO & 7963 & **2.94\%** & **8.04\%** & **22.65\%** & **33.77\%** \\ \hline \hline \end{tabular}
\end{table}
Table 1: Test errors and the number of trainable parameters for the radial kernel problem, where bold numbers highlight the best methods. The small operator errors and large kernel errors of discrete-NAO highlight the ill-posedness of the inverse problem. NAO overcomes the ill-posedness and yields resolution-invariant estimators.

In this context, our goal is to learn the operator \(\mathcal{L}\) as well as to discover the hidden mechanism, namely the kernel \(K[\bm{u}_{1:d},\bm{f}_{1:d};\theta](x,y)=\gamma_{\eta}(|y-x|)\). In the form of the operator in (12), we have \(K(r)=\gamma_{\eta}(r)\) and \(g[u](r,x)=u(x+r)+u(x-r)-2u(x)\text{for}\;r\in[0,\delta]\).

To generate the training data, we consider \(7\) sine-type kernels

\[\gamma_{\eta}(|y-x|):=\exp(-\eta(|y-x|))\sin(6|y-x|)\mathbf{1}_{[0,11]}(|y-x|), \;\eta=1,2,3,4,6,7,8.\] (17)

Here, \(\eta\) denotes task index. We generate \(4530\) data pairs \((g^{\eta}[u],f^{\eta})\) with a fixed resolution \(\Delta x=0.0125\) for each task, where the loading function \(\mathcal{L}_{\gamma_{\eta}}[u^{\eta}]=f^{\eta}\) is computed by the adaptive Gauss-Kronrod quadrature method. Then, we form a training sample of each task by taking \(d\) pairs from this task. When taking the token size \(d=302\), each task contains \(\frac{4530}{302}=15\) samples. We consider two test kernels: one following the same rule of (17) with \(\eta=5\) (denoted as the "in-distribution (ID) test" system), and the other following a different rule (denoted as the "out-of-distribution (OOD) test1" system):

\[\gamma_{ood1}(|y-x|):=|y-x|(11-|y-x|)\exp(-5(|y-x|))\sin(6|y-x|)\mathbf{1}_{[ 0,11]}(|y-x|).\] (18)

Both the operator error (10) and the kernel error (11) are provided in Table 1. While the former measures the error of the learned forward PDE solver (i.e., learning a physical model), the latter demonstrates the capability of serving as an inverse PDE solver (i.e., physics discovery).

**Ablation study.** We first perform an ablation study on NAO, by comparing its performance with its variants (Discrete-NAO, Softmax-NAO, and NAO-u), AFNO, and Autoencoder, with a fixed token dimension \(d=302\), query-key feature size \(d_{k}=10\), and data resolution \(\Delta x=0.0125\). When comparing the operator errors, both Discrete-NAO and NAO serve as good surrogate models for the ID task with relative errors of \(1.33\%\) and \(1.48\%\), respectively, while the other three baselines show \(>10\%\) errors. Therefore, we focus more on the comparison between Discrete-NAO and NAO. This gap becomes more pronounced in the OOD task: only NAO is able to provide a surrogate of \(\mathcal{L}_{\gamma_{ood}}\) with \(<10\%\) error, who outperforms its discrete mixer counterpart by \(68.62\%\), indicating that NAO learns a more generalizable mechanism. This argument is further affirmed when comparing the kernel errors, where NAO substantially outperforms all baselines by at least \(81.39\%\) in the ID test and \(65.21\%\) in the OOD test. This study verifies our analysis in Section 4: NAO learns the kernel map in the space of identifiability, and hence possesses advantages in solving the challenging ill-posed inverse problem. Additionally, we vary the query-key feature size from \(d_{k}=10\) to \(d_{k}=5\) and \(d_{k}=20\). Note that \(d_{k}\) determines the rank bound of \(W^{QK}\), the matrix that characterizes the interaction between different data pairs. Discrete-NAO again performs well only in approximating the operator for the ID test, while NAO achieves consistent results in both tests and criteria, showing that it has successfully discovered the intrinsic low-dimension in the kernel space.

**Alleviating ill-posedness.** To further understand NAO's capability as an inverse PDE solver, we reduce the number of data pairs for each sample from \(d=302\) to \(d=30\), making it more ill-posed as an inverse PDE problem. NAO again outperforms its discrete mixer counterpart in all aspects. Interestingly, the errors in NAO increase almost monotonically, showing its robustness. For Discrete-NAO, the error also increases monotonically in the ID operator test, but there exists no consistent pattern in other test criteria. Figure 2 shows the learned test kernels in both the ID and OOD tasks. It shows that Discrete-NAO learns highly oscillatory kernels, while our continuous NAO only has a discrepancy near \(|x-y|=0\). Note that when \(|x-y|=0\), we have \(u(y)-u(x)=0\) in the ground-truth operator (16), and hence the kernel value at this point does not change the operator

Figure 2: Results on radial kernel learning, when learning the test kernel from a small (\(d=30\)) number of data pairs: test on an ID task (left), and test on an OOD task (right).

value. That means, our data provides almost no information at this point. This again verifies our analysis: continuous NAO learns the kernel map structure from small data based on prior knowledge from other task datasets.

Cross-resolution.We test the NAO model trained with \(\Delta x=0.0125\) on a dataset corresponding to \(\Delta x=0.025\), and plot the results in Figure 2 Left. The predicted kernel is very similar to the one learned from the same resolution, and the error is also on-par (\(22.65\%\) versus \(20.79\%\)).

### Solution operator learning

We consider the modeling of 2D sub-surface flows through a porous medium with a heterogeneous permeability field. Following the settings in Li et al. (2020), the high-fidelity synthetic simulation data for this example are described by the Darcy flow. Here, the physical domain is \(\Omega=[0,1]^{2}\), \(b(\bm{x})\) is the permeability field, and the Darcy's equation has the form:

\[-\nabla\cdot(b(\bm{x})\nabla p(\bm{x}))=g(\bm{x}),\ \ \ \ \ \bm{x}\in\Omega;\ \ \ \ \ \ \ p(\bm{x})=0,\ \ \ \bm{x}\in\partial\Omega.\] (19)

In this context, we aim to learn the solution operator of Darcy's equation and compute the pressure field \(p(\bm{x})\). We consider two study scenarios. 1) \(g\to p\): each task has a fixed microstructure \(b(\bm{x})\), and our goal is to learn the (linear) solution operator mapping from each loading field \(g\) to the corresponding solution field \(p\). In this case, the kernel \(K\) acts as the Green's function of (19), and can be approximated by the inverse of the stiffness matrix. 2) \(b\to p\): each task has a fixed loading field \(g(\bm{x})\), and our goal is to learn the (nonlinear) solution operator mapping from the permeability field \(b\) to the corresponding solution field \(p\).

We report the operator learning results in Table 2, where NAO slightly outperforms Discrete-NAO in most cases, using only 1/2 or 1/3 the number of trainable parameters. On the other hand, we also verify the kernel learning results by comparing the learned kernels in a test case with the ground-truth inverse of stiffness matrix in Figure 3. Although both Discrete-NAO and NAO capture the major pattern, the kernel from Discrete-NAO again shows a spurious oscillation in regions where the ground-truth kernel has zero value. On the other hand, by exploring the kernel map in the integrated knowledge space, the learned kernel from NAO does not exhibit such spurious modes.

To demonstrate the physical interpretability of the learned kernel, in the first row of Figure 4 we show the ground-truth microstructure \(b(\bm{x})\), a test loading field instance \(g(\bm{x})\), and the corresponding solution \(p(\bm{x})\). By taking the summation of the kernel strength on each row, one can discover the interaction strength of each material point \(x\) with its neighbors. As this strength is related to the permeability field \(b(x)\), the underlying microstructure can be recovered accordingly. In the bottom row of Figure 4, we demonstrate the discovered microstructure of this test task. We note that the discovered microstructure is smoothed out due to the continuous setting of our learned kernel (as shown in the bottom left plot), and a thresholding step is performed to discover the two-phase microstructure. The discovered microstructure (bottom right plot) matches well with the hidden ground-truth microstructure (left plot), except for regions near the domain boundary. This mismatch is due to

\begin{table}
\begin{tabular}{c c|c|c|c} \hline Case & model & \#param & Linear Operator: \(g\to p\) & Nonlinear Operator: \(b\to p\) \\ \hline \(d\) = 20, \(d_{k}\)=20 & Discrete-NAO & 161991 & 8.61\% & **10.84\%** \\
900 samples & NAO & 89778 & **8.33\%** & 11.40\% \\ \hline \(d\) = 50, \(d_{k}\)=40 & Discrete-NAO & 662163 & 3.28\% & 5.61\% \\
9000 samples & NAO & 189234 & **3.19\%** & **5.28\%** \\ \hline \end{tabular}
\end{table}
Table 2: Test errors and the number of trainable parameters in solution operator learning.

Figure 3: Kernel visualization in experiment 2, where the kernels correspond to the inverse of stiffness matrix: ground truth (left), test kernel from Discrete-NAO (middle), kernel from NAO (right).

the applied Dirichlet-type boundary condition (\(p(x)=0\) on \(\partial\Omega\)) in all samples, which leads to the measurement pairs \((p(x),g(x))\) containing no information near the domain boundary \(\partial\Omega\) and makes it impossible to identify the kernel on boundaries.

### Heterogeneous material learning

In this example, we investigate the learning of heterogeneous and nonlinear material responses using the Mechanical MNIST benchmark (Lejeune, 2020). For training and testing, we take 500 heterogeneous material specimens, where each specimen is governed by a Neo-Hookean material with a varying modulus converted from the MNIST bitmap images. On each specimen, 200 loading/response data pairs are provided. Two generalization scenarios are considered. 1) We mix the data from all numbers and randomly take \(10\%\) of specimens for testing. This scenario corresponds to an ID test. 2) We leave all specimens corresponding to the number '9' for testing, and use the rest for training. This scenario corresponds to an OOD test. The corresponding results are listed in Table 3, where NAO again outperforms its discrete counterpart.

## 6 Conclusion

We propose Nonlocal Attention Operator (NAO), a novel NO architecture to simultaneously learn both the forward (modeling) and inverse (discovery) solvers in physical systems from data. In particular, NAO learns the function-to-function mapping based on an integral NO architecture and provides a surrogate forward solution predictor. In the meantime, the attention mechanism is crafted in building a kernel map from input-output function pairs to the system's function parameters, offering zero-shot generalizability to new and unseen physical systems. As such, the kernel map explores in the function space of identifiability, resolving the enduring ill-posedness in inverse PDE problems. In our empirical demonstrations, NAO outperforms all selected baselines on multiple datasets of inverse PDE problems and out-of-distribution generalizability tasks.

**Broader Impacts:** Beyond its merits in forward/inverse PDE modeling, our work represents an initial exploration in understanding the attention mechanism in physics modeling, and paves a theoretical path towards building a foundation model in scientific ML.

**Limitations:** Due to limited computational resource, our experiments focus on learning from a small to medium number (\(<500\)) of similar physical systems. It would be beneficial to expand the coverage and enable learning across different types of physical systems.

Figure 4: Demonstration of the generated data and the recovered microstructure from the learned kernel in Example 2. Top row: the ground-truth two-phase material microstructure from a test task (left), an exemplar loading field instance (middle), and the corresponding solution field instance (right). Bottom row: summation of the learned kernel for each line, corresponding to the total interaction of all material points (left), and the discovered two-phase material microstructure after thresholding (right).

\begin{table}
\begin{tabular}{c c|c|c c} \hline Case & model & \#param & ID test & OOD test \\ \hline \(d\) = 40, \(d_{h}\)=40 & Discrete-NAO & 5,469,528 & 7.21\% & 7.95\% \\ \(22500\) samples & NAO & 142,534 & **6.57\%** & **6.26\%** \\ \hline \(d\) = 100, \(d_{h}\)=100 & Discrete-NAO & 7,353,768 & 6.34\% & 6.01\% \\ \(45000\) samples & NAO & 303,814 & **4.75\%** & **5.58\%** \\ \hline \end{tabular}
\end{table}
Table 3: Test errors and the number of trainable parameters in heterogeneous material learning.

## Acknowledgments and Disclosure of Funding

S. Jafarzadeh would like to acknowledge support by the AFOSR grant FA9550-22-1-0197, and Y. Yu would like to acknowledge support by the National Science Foundation (NSF) under award DMS-1753031 and the National Institute of Health under award 1R01GM157589-01. Portions of this research were conducted on Lehigh University's Research Computing infrastructure partially supported by NSF Award 2019035. F. Lu would like to acknowledge support by NSF DMS-2238486.

This article has been authored by an employee of National Technology and Engineering Solutions of Sandia, LLC under Contract No. DE-NA0003525 with the U.S. Department of Energy (DOE). The employee owns all right, title and interest in and to the article and is solely responsible for its contents. The United States Government retains and the publisher, by accepting the article for publication, acknowledges that the United States Government retains a non-exclusive, paid-up, irrevocable, worldwide license to publish or reproduce the published form of this article or allow others to do so, for United States Government purposes. The DOE will provide public access to these results of federally sponsored research in accordance with the DOE Public Access Plan https://www.energy.gov/downloads/doe-public-access-plan.

## References

* Besnard et al. (2006) Gilles Besnard, Francois Hild, and Stephane Roux. finite-element displacement fields analysis from digital images: application to portevin-le chatelier bands. _Experimental mechanics_, 46(6):789-803, 2006.
* Bucur et al. (2016) Claudia Bucur, Enrico Valdinoci, et al. _Nonlocal diffusion and applications_, volume 20. Springer, 2016.
* Cai et al. (2022) Shengze Cai, Zhiping Mao, Zhicheng Wang, Minglang Yin, and George Em Karniadakis. Physics-informed neural networks (PINNs) for fluid mechanics: A review. _Acta Mechanica Sinica_, pages 1-12, 2022.
* Cao (2021) Shuhao Cao. Choose a transformer: Fourier or galerkin. _Advances in neural information processing systems_, 34:24924-24940, 2021.
* Carleo et al. (2019) Giuseppe Carleo, Ignacio Cirac, Kyle Cranmer, Laurent Daudet, Maria Schuld, Naftali Tishby, Leslie Vogt-Maranto, and Lenka Zdeborova. Machine learning and the physical sciences. _Reviews of Modern Physics_, 91(4):045002, 2019.
* Chen et al. (2023) Ke Chen, Chunmei Wang, and Haizhao Yang. let data talk: data-regularized operator learning theory for inverse problems. _arXiv preprint arXiv:2310.09854_, 2023.
* Child et al. (2019) Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse transformers. _arXiv preprint arXiv:1904.10509_, 2019.
* Coorey et al. (2022) Genevieve Coorey, Gemma A Figtree, David F Fletcher, Victoria J Snelson, Stephen Thomas Vernon, David Winlaw, Stuart M Grieve, Alistair McEwan, Jean Yee Hwa Yang, Pierre Qian, Kieran O'Brien, Jessica Orchard, Jinman Kim, Sanjay Patel, and Julie Redfern. The health digital twin to tackle cardiovascular disease--A review of an emerging interdisciplinary field. _NPJ Digital Medicine_, 5:126, 2022.
* Ding et al. (2022) Wen Ding, Kui Ren, and Lu Zhang. Coupling deep learning with full waveform inversion. _arXiv preprint arXiv:2203.01799_, 2022.
* Dittmer et al. (2020) Soren Dittmer, Tobias Kluth, Peter Maass, and Daniel Otero Baguer. Regularization by architecture: A deep prior approach for inverse problems. _Journal of Mathematical Imaging and Vision_, 62:456-470, 2020.
* Du et al. (2020) Qiang Du, Bjorn Engquist, and Xiaochuan Tian. Multiscale modeling, homogenization and nonlocal effects: Mathematical and computational issues. _Contemporary mathematics_, 754:115-140, 2020.
* Fan and Ying (2023) Yuwei Fan and Lexing Ying. Solving traveltime tomography with deep learning. _Communications in Mathematics and Statistics_, 11(1):3-19, 2023.
* Fan et al. (2020)* Ferrari and Willcox (2024) Alberto Ferrari and Karen Willcox. Digital twins in mechanical and aerospace engineering. _Nature Computational Science_, 4(3):178-183, 2024.
* Ghaboussi et al. (1991) J Ghaboussi, JH Garrett Jr, and Xiping Wu. Knowledge-based modeling of material behavior with neural networks. _Journal of engineering mechanics_, 117(1):132-153, 1991.
* Ghaboussi et al. (1998) Jamshid Ghaboussi, David A Pecknold, Mingfu Zhang, and Rami M Haj-Ali. Autoprogressive training of neural network constitutive models. _International Journal for Numerical Methods in Engineering_, 42(1):105-126, 1998.
* Goswami et al. (2022) Somdatta Goswami, Aniruddha Bora, Yue Yu, and George Em Karniadakis. Physics-informed neural operators. _2022 arXiv preprint arXiv:2207.05748_, 2022.
* Guibas et al. (2021) John Guibas, Morteza Mardani, Zongyi Li, Andrew Tao, Anima Anandkumar, and Bryan Catanzaro. Adaptive fourier neural operators: Efficient token mixers for transformers. _arXiv preprint arXiv:2111.13587_, 2021.
* Gupta et al. (2021) Gaurav Gupta, Xiongye Xiao, and Paul Bogdan. Multiwavelet-based operator learning for differential equations. _Advances in neural information processing systems_, 34:24048-24062, 2021.
* Hao et al. (2023) Zhongkai Hao, Zhengyi Wang, Hang Su, Chengyang Ying, Yinpeng Dong, Songming Liu, Ze Cheng, Jian Song, and Jun Zhu. Gnot: A general neural operator transformer for operator learning. In _International Conference on Machine Learning_, pages 12556-12569. PMLR, 2023.
* He et al. (2021) Qizhi He, Devin W Laurence, Chung-Hao Lee, and Jiun-Shyan Chen. Manifold learning based data-driven modeling for soft biological tissues. _Journal of Biomechanics_, 117:110124, 2021.
* Ho et al. (2019) Jonathan Ho, Nal Kalchbrenner, Dirk Weissenborn, and Tim Salimans. Axial attention in multidimensional transformers. _arXiv preprint arXiv:1912.12180_, 2019.
* Jafarzadeh et al. (2024) Siavash Jafarzadeh, Stewart Silling, Ning Liu, Zhongqiang Zhang, and Yue Yu. Peridynamic neural operators: A data-driven nonlocal constitutive model for complex material responses. _Computer Methods in Applied Mechanics and Engineering_, 425:116914, 2024.
* Jiang et al. (2022) Hanyang Jiang, Yuehaw Khoo, and Haizhao Yang. Reinforced inverse scattering. _arXiv preprint arXiv:2206.04186_, 2022.
* Karniadakis et al. (2021) George Em Karniadakis, Ioannis G Kevrekidis, Lu Lu, Paris Perdikaris, Sifan Wang, and Liu Yang. Physics-informed machine learning. _Nature Reviews Physics_, 3(6):422-440, 2021.
* Katharopoulos et al. (2020) Angelos Katharopoulos, Apoorv Vyas, Nikolaos Pappas, and Francois Fleuret. Transformers are rnns: Fast autoregressive transformers with linear attention. In _International conference on machine learning_, pages 5156-5165. PMLR, 2020.
* Lai et al. (2019) Ru-Yu Lai, Qin Li, and Gunther Uhlmann. Inverse problems for the stationary transport equation in the diffusion scaling. _SIAM Journal on Applied Mathematics_, 79(6):2340-2358, 2019.
* Lee-Thorp et al. (2021) James Lee-Thorp, Joshua Ainslie, Ilya Eckstein, and Santiago Ontanon. Fnet: Mixing tokens with fourier transforms. _arXiv preprint arXiv:2105.03824_, 2021.
* Lejeune (2020) Emma Lejeune. Mechanical mnist: A benchmark dataset for mechanical metamodels. _Extreme Mechanics Letters_, 36:100659, 2020.
* Li et al. (2022) Zijie Li, Kazem Meidani, and Amir Barati Farimani. Transformer for partial differential equations' operator learning. _arXiv preprint arXiv:2205.13671_, 2022.
* Li et al. (2020a) Zongyi Li, Nikola Kovachki, Kamyar Azizzadenesheli, Burigede Liu, Kaushik Bhattacharya, Andrew Stuart, and Anima Anandkumar. Neural operator: Graph kernel network for partial differential equations. _arXiv preprint arXiv:2003.03485_, 2020a.
* Li et al. (2020b) Zongyi Li, Nikola Kovachki, Kamyar Azizzadenesheli, Burigede Liu, Andrew Stuart, Kaushik Bhattacharya, and Anima Anandkumar. Multipole graph neural operator for parametric partial differential equations. _Advances in Neural Information Processing Systems_, 33:NeurIPS 2020, 2020b.

Zongyi Li, Nikola Borislavov Kovachki, Kamyar Azizzadenesheli, Kaushik Bhattacharya, Andrew Stuart, and Anima Anandkumar. Fourier NeuralOperator for Parametric Partial Differential Equations. In _International Conference on Learning Representations_, 2020c.
* Li et al. (2021) Zongyi Li, Hongkai Zheng, Nikola Kovachki, David Jin, Haoxuan Chen, Burigede Liu, Kamyar Azizzadenesheli, and Anima Anandkumar. Physics-informed neural operator for learning partial differential equations. _2021 arXiv preprint arXiv:2111.03794_, 2021.
* Liu et al. (2021) Hanxiao Liu, Zihang Dai, David So, and Quoc V Le. Pay attention to mlps. _Advances in neural information processing systems_, 34:9204-9215, 2021.
* Liu et al. (2023) Ning Liu, Yue Yu, Huaiqian You, and Neeraj Tatikola. Ino: Invariant neural operators for learning complex physical systems with momentum conservation. In _International Conference on Artificial Intelligence and Statistics_, pages 6822-6838. PMLR, 2023.
* Liu et al. (2024a) Ning Liu, Yiming Fan, Xianyi Zeng, Milan Klower, LU ZHANG, and Yue Yu. Harnessing the power of neural operators with automatically encoded conservation laws. In _Forty-first International Conference on Machine Learning_, 2024a.
* Liu et al. (2024b) Ning Liu, Siavash Jafarzadeh, and Yue Yu. Domain agnostic fourier neural operators. _Advances in Neural Information Processing Systems_, 36, 2024b.
* Liu et al. (2024c) Ning Liu, Xuxiao Li, Manoj R Rajanna, Edward W Reutzel, Brady Sawyer, Prahalada Rao, Jim Lua, Nam Phan, and Yue Yu. Deep neural operator enabled digital twin modeling for additive manufacturing. _arXiv preprint arXiv:2405.09572_, 2024c.
* Liu et al. (2022) Xinliang Liu, Bo Xu, and Lei Zhang. Ht-net: Hierarchical transformer based operator learning model for multiscale pdes. 2022.
* Lu et al. (2022) Fei Lu, Quanjun Lang, and Qingci An. Data adaptive rkhs tikhonov regularization for learning kernels in operators. In _Mathematical and Scientific Machine Learning_, pages 158-172. PMLR, 2022.
* Lu et al. (2023) Fei Lu, Qingci An, and Yue Yu. Nonparametric learning of kernels in nonlocal operators. _Journal of Peridynamics and Nonlocal Modeling_, pages 1-24, 2023.
* Lu et al. (2019) Lu Lu, Pengzhan Jin, and George Em Karniadakis. Deeponet: Learning nonlinear operators for identifying differential equations based on the universal approximation theorem of operators. _arXiv preprint arXiv:1910.03193_, 2019.
* Lu et al. (2021) Lu Lu, Pengzhan Jin, Guofei Pang, Zhongqiang Zhang, and George Em Karniadakis. Learning nonlinear operators via DeepONet based on the universal approximation theorem of operators. _Nature Machine Intelligence_, 3(3):218-229, 2021.
* Molinaro et al. (2023) Roberto Molinaro, Yunan Yang, Bjorn Engquist, and Siddhartha Mishra. Neural inverse operators for solving pde inverse problems. _arXiv preprint arXiv:2301.11167_, 2023.
* Molnar (2020) Christoph Molnar. _Interpretable machine learning_. 2020.
* Nekoozadeh et al. (2023) Anahita Nekoozadeh, Mohammad Reza Ahmadzadeh, and Zahra Mardani. Multiscale attention via wavelet neural operators for vision transformers. _arXiv preprint arXiv:2303.12398_, 2023.
* Obmann et al. (2020) Daniel Obmann, Johannes Schwab, and Markus Haltmeier. Deep synthesis regularization of inverse problems. _arXiv preprint arXiv:2002.00155_, 2020.
* Ong et al. (2022) Yong Zheng Ong, Zuowei Shen, and Haizhao Yang. IAE-Net: integral autoencoders for discretization-invariant learning. _arXiv preprint arXiv:2203.05142_, 2022.
* Pfau et al. (2020) David Pfau, James S Spencer, Alexander GDG Matthews, and W Matthew C Foulkes. Ab initio solution of the many-electron schrodinger equation with deep neural networks. _Physical Review Research_, 2(3):033429, 2020.
* Rao et al. (2021) Yongming Rao, Wenliang Zhao, Zheng Zhu, Jiwen Lu, and Jie Zhou. Global filter networks for image classification. _Advances in neural information processing systems_, 34:980-993, 2021.
* Rao et al. (2021)Cynthia Rudin, Chaofan Chen, Zhi Chen, Haiyang Huang, Lesia Semenova, and Chudi Zhong. Interpretable machine learning: Fundamental principles and 10 grand challenges. _Statistic Surveys_, 16:1-85, 2022.
* Silling (2000) Stewart A Silling. Reformulation of elasticity theory for discontinuities and long-range forces. _Journal of the Mechanics and Physics of Solids_, 48(1):175-209, 2000.
* Sun et al. (2024) Jingmin Sun, Yuxuan Liu, Zecheng Zhang, and Hayden Schaeffer. Towards a foundation model for partial differential equation: Multi-operator learning and extrapolation. _arXiv preprint arXiv:2404.12355_, 2024.
* Tolstikhin et al. (2021) Ilya O Tolstikhin, Neil Houlsby, Alexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Thomas Unterthiner, Jessica Yung, Andreas Steiner, Daniel Keysers, Jakob Uszkoreit, et al. Mlp-mixer: An all-mlp architecture for vision. _Advances in neural information processing systems_, 34:24261-24272, 2021.
* Touvron et al. (2022) Hugo Touvron, Piotr Bojanowski, Mathilde Caron, Matthieu Cord, Alaaeldin El-Nouby, Edouard Grave, Gautier Izacard, Armand Joulin, Gabriel Synnaeve, Jakob Verbeek, et al. Resmlp: Feed-forward networks for image classification with data-efficient training. _IEEE Transactions on Pattern Analysis and Machine Intelligence_, 45(4):5314-5321, 2022.
* Tsai et al. (2019) Yao-Hung Hubert Tsai, Shaojie Bai, Makoto Yamada, Louis-Philippe Morency, and Ruslan Salakhutdinov. Transformer dissection: a unified understanding of transformer's attention via the lens of kernel. _arXiv preprint arXiv:1908.11775_, 2019.
* Uhlmann (2009) Gunther Uhlmann. Electrical impedance tomography and calderon's problem. _Inverse problems_, 25(12):123011, 2009.
* Vaswani et al. (2017) Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. _Advances in neural information processing systems_, 30, 2017.
* Wang et al. (2020) Sinong Wang, Belinda Z Li, Madian Khabsa, Han Fang, and Hao Ma. Linformer: Self-attention with linear complexity. _arXiv preprint arXiv:2006.04768_, 2020.
* Wei and Zhang (2023) Min Wei and Xuesong Zhang. Super-resolution neural operator. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 18247-18256, 2023.
* Xu et al. (2019) Zhi-Qin John Xu, Yaoyu Zhang, Tao Luo, Yanyang Xiao, and Zheng Ma. Frequency principle: Fourier analysis sheds light on deep neural networks. _arXiv preprint arXiv:1901.06523_, 2019.
* Yang and Osher (2024) Liu Yang and Stanley J Osher. Pde generalization of in-context operator networks: A study on 1d scalar nonlinear conservation laws. _arXiv preprint arXiv:2401.07364_, 2024.
* Yang et al. (2021) Liu Yang, Xuhui Meng, and George Em Karniadakis. B-pinns: Bayesian physics-informed neural networks for forward and inverse pde problems with noisy data. _Journal of Computational Physics_, 425:109913, 2021.
* Ye et al. (2024) Zhanhong Ye, Xiang Huang, Leheng Chen, Hongsheng Liu, Zidong Wang, and Bin Dong. Pdeformer: Towards a foundation model for one-dimensional partial differential equations. _arXiv preprint arXiv:2402.12652_, 2024.
* Yilmaz (2001) Ozdogan Yilmaz. _Seismic data analysis_, volume 1. Society of exploration geophysicists Tulsa, 2001.
* You et al. (2021) Huaiqian You, Yue Yu, Nathaniel Trask, Mamikon Gulian, and Marta DElia. Data-driven learning of nonlocal physics from high-fidelity synthetic data. _Computer Methods in Applied Mechanics and Engineering_, 374:113553, 2021.
* You et al. (2022) Huaiqian You, Yue Yu, Marta D'Elia, Tian Gao, and Stewart Silling. Nonlocal kernel network (NKN): A stable and resolution-independent deep neural network. _Journal of Computational Physics_, page arXiv preprint arXiv:2201.02217, 2022.

Linfeng Zhang, Jiequn Han, Han Wang, Roberto Car, and E Weinan. Deep potential molecular dynamics: a scalable model with the accuracy of quantum mechanics. _Physical Review Letters_, 120(14):143001, 2018.
* Zhang [2024] Zecheng Zhang. Modno: Multi operator learning with distributed neural operators. _arXiv preprint arXiv:2404.02892_, 2024.

[MISSING_PAGE_FAIL:16]

Therefore, the attention mechanism of each layer is in fact an integral operator after a rescaling:

\[\left(\begin{array}{c}g^{(l)}(x)\\ f^{(l)}(x)\end{array}\right)=\int_{\Omega}K^{(l)}(x,y)\left(\begin{array}{c}g^{ (l-1)}(y)\\ f^{(l-1)}(y)\end{array}\right)dy+\left(\begin{array}{c}g^{(l-1)}(x)\\ f^{(l-1)}(x)\end{array}\right),\] (20)

with the kernel \(K^{(l)}(x,y)\) defined as:

\[\left[\begin{array}{cc}\sum_{\omega,\nu=1}^{d}\left(g^{(l-1)}_{\omega}(x) \bm{W}^{QK}_{l}[\omega,\nu]g^{(l-1)}_{\nu}(y)\right)&\sum_{\omega,\nu=1}^{d} \left(g^{(l-1)}_{\omega}(x)\bm{W}^{QK}_{l}[\omega,\nu]f^{(l-1)}_{\nu}(y) \right)\\ \sum_{\omega,\nu=1}^{d}\left(f^{(l-1)}_{\omega}(x)\bm{W}^{QK}_{l}[\omega,\nu ]g^{(l-1)}_{\nu}(y)\right)&\sum_{\omega,\nu=1}^{d}\left(f^{(l-1)}_{\omega}(x) \bm{W}^{QK}_{l}[\omega,\nu]f^{(l-1)}_{\nu}(y)\right)\end{array}\right].\] (21)

For the \(L-\)th layer update, we denote the approximated value of \(f_{\beta}(x_{\alpha})\) as \(\tilde{f}_{\beta}(x_{\alpha}):=\bm{X}_{\text{out}}[\alpha,\beta]\), then

\[\tilde{f}_{\beta}(x_{\alpha})= \sum_{\gamma=1}^{N}K[\mathbf{u}_{1:d},\mathbf{f}_{1:d};\theta][ \alpha,\gamma]g[u_{\beta}](x_{\gamma})\] \[= \sum_{\lambda,\gamma=1}^{N}\sum_{\omega,\nu=1}^{d}W^{P,u}[\alpha,\lambda]\left(\bm{U}^{(L-1)}[\lambda,\omega]W^{QK}_{L}[\omega,\nu]\bm{U}^{(L -1)}[\gamma,\nu]\right)g[u_{\beta}](x_{\gamma})\] \[+\sum_{\lambda,\gamma=1}^{N}\sum_{\omega,\nu=1}^{d}W^{P,f}[\alpha,\lambda]\left(\bm{F}^{(L-1)}[\lambda,\omega]W^{QK}_{L}[\omega,\nu]\bm{U}^{(L -1)}[\gamma,\nu]\right)g[u_{\beta}](x_{\gamma})\] \[= \sum_{\lambda,\gamma=1}^{N}\sum_{\omega,\nu=1}^{d}W^{P,u}[\alpha,\lambda]\left(g^{(L-1)}_{\omega}(x_{\lambda})W^{QK}_{L}[\omega,\nu]g^{(L-1)} _{\nu}(x_{\gamma})\right)g[u_{\beta}](x_{\gamma})\] \[+\sum_{\lambda,\gamma=1}^{N}\sum_{\omega,\nu=1}^{d}W^{P,f}[\alpha,\lambda]\left(f^{(L-1)}_{\omega}(x_{\lambda})W^{QK}_{L}[\omega,\nu]g^{(L-1)} _{\nu}(x_{\gamma})\right)g[u_{\beta}](x_{\gamma})\] \[\approx \frac{1}{\Delta x^{2D}}\int_{\Omega}\int_{\Omega}\sum_{\omega, \nu=1}^{d}W^{P,u}(x_{\alpha},z)\left(g^{(L-1)}_{\omega}(z)W^{QK}_{L}[\omega, \nu]g^{(L-1)}_{\nu}(y)\right)dz\;g[u_{\beta}](y)dy\] \[+\frac{1}{\Delta x^{2D}}\int_{\Omega}\int_{\Omega}\sum_{\omega, \nu=1}^{d}W^{P,f}(x_{\alpha},z)\left(f^{(L-1)}_{\omega}(z)W^{QK}_{L}[\omega, \nu]g^{(L-1)}_{\nu}(y)\right)dz\;g[u_{\beta}](y)dy.\]

Hence, a (rescaled) continuous limit of the kernel writes:

\[K[\mathbf{u}_{1:d},\mathbf{f}_{1:d};\theta](x,y)= \int_{\Omega}\sum_{\omega,\nu=1}^{d}W^{P,u}(x,z)\left(g^{(L-1)}_{ \omega}(z)W^{QK}_{L}[\omega,\nu]g^{(L-1)}_{\nu}(y)\right)dz\] \[+\int_{\Omega}\sum_{\omega,\nu=1}^{d}W^{P,f}(x,z)\left(f^{(L-1)}_{ \omega}(z)W^{QK}_{L}[\omega,\nu]g^{(L-1)}_{\nu}(y)\right)dz.\]

## Appendix B Proofs and connection with regularized estimator

### Proofs

Proof of Lemma 4.1.: With \(\{r_{k}\}_{k=1}^{N}\), we can write the attention-based kernel in (7) as

\[K[\mathbf{u}_{1:d},\mathbf{f}_{1:d};\theta](r_{k})= \sum_{k^{\prime}=1}^{N}W^{P,u}(r_{k^{\prime}})\sigma\left(\sum_{l =1}^{d_{k}}\sum_{j=1}^{d}\sum_{j=1}^{d}\mathbf{u}_{j}(r_{k^{\prime}})W^{Q}[j,l]\cdot W^{K}[j^{\prime},l]\mathbf{u}_{j^{\prime}}(r_{k})\right)\] (22) \[+W^{P,f}\sigma\left(\sum_{l=1}^{d_{k}}\sum_{j=1}^{d}\sum_{j^{ \prime}=1}^{d}\left[\mathbf{f}_{j}W^{Q}[j,l]\cdot W^{K}[j^{\prime},l]\mathbf{u }_{j^{\prime}}(r_{k})\right]\right).\]Denoting \(W^{QK}[j^{\prime},j]=\sum_{l=1}^{d_{k}}W^{Q}[j,l]\cdot W^{K}[j^{\prime},l]\), we write the kernel in (22) as

\[K[\mathbf{u}_{1:d},\mathbf{f}_{1:d};\theta](r)= \sum_{r^{\prime}=1}^{N}W^{P,u}(|r^{\prime}|)\sigma\left(\sum_{j=1} ^{d}\sum_{j^{\prime}=1}^{d}\left[g[u](r^{\prime},x_{i_{j}})W^{QK}[j,j^{\prime} ]g[u](r,x_{i_{j^{\prime}}})\right]\right)\] \[+W^{P,f}\sigma\left(\sum_{i=1}^{d}\sum_{j=1}^{d}\left[f(x_{i_{j^{ \prime}}})W^{QK}[j,j^{\prime}]g[u](r,x_{i_{j}})\right]\right).\]

Then, as \(d\to\infty\) is achieved by refining the spatial mesh, viewing the summation in \(j\) as Riemann sum,

\[\lim_{d\to\infty}\sum_{j=1}^{d}\sum_{j^{\prime}=1}^{d}g[u](r^{\prime},x_{i_{j} })W^{QK}[j,j^{\prime}]g[u](r,x_{i_{j^{\prime}}})=\int\int g[u](r,x)W^{QK}(x,y )g[u](s,y)dxdy,\]

where the integral exists since \(g[u](r,x)W^{QK}(x,y)\) is bounded. Sending also the number of tokens, \(N\), to infinity, we obtain the limit attention model in (14). 

Proof of Lemma 4.2.: The proof is adapted from Lu et al. (2023, 2022). Write \(K(r)=K[\mathbf{u}_{1:d}^{\eta},\mathbf{f}_{1:d}^{\eta}](r)\). Notice that the loss function in (9) can be expanded as

\[\mathcal{E}(K)= \frac{1}{n_{train}}\sum_{\eta=1}^{n_{train}}\sum_{i=1}^{d_{\pi}} \int_{\Omega}\left[\int_{0}^{\delta}K(r)g[u_{i}^{\eta}](r,x))dr-f_{i}^{\eta}( x)\right]^{2}dx\] \[= \frac{1}{n_{train}}\sum_{\eta=1}^{n_{train}}\sum_{i=1}^{d_{\pi}} \int_{0}^{\delta}\int_{0}^{\delta}K(s)K(r)\int_{\Omega}g[u_{i}^{\eta}](s,x))g [u_{i}^{\eta}](r,x))dxdrds\] \[-\frac{2}{n_{train}}\sum_{\eta=1}^{n_{train}}\sum_{i=1}^{d_{\pi}} \int_{0}^{\delta}K(r)\int_{\Omega}g[u_{i}^{\eta}](r,x)f_{i}^{\eta}(x)dxdr+Const.\] \[= \langle\mathcal{L}_{\bar{G}}K,K\rangle_{L_{\rho}^{2}}-2\langle K, K^{D}\rangle_{L_{\rho}^{2}}+Const.,\]

where \(\mathcal{L}_{\bar{G}}:L_{\rho}^{2}\to L_{\rho}^{2}\) is the integral operator

\[\mathcal{L}_{\bar{G}}K(s):=\int_{0}^{\delta}K(r)\bar{G}(r,s)dr\]

and \(K^{D}\) is the Riesz representation of the bounded linear functional

\[\langle K,K^{D}\rangle_{L_{\rho}^{2}}=\frac{1}{n_{train}}\sum_{\eta=1}^{n_{ train}}\sum_{i=1}^{d_{\pi}}\int_{0}^{\delta}K(r)\int_{\Omega}g[u_{i}^{\eta}](r,x)f_{i}^{ \eta}(x)dxdr.\]

Thus, the quadratic loss function has a unique minimizer in \(\mathrm{Null}(\mathcal{L}_{\bar{G}})^{\perp}\).

Meanwhile, since the data pairs are continuous with compact support, the function \(\bar{G}\) is a square-integrable reproducing kernel. Thus, the operator \(\mathcal{L}_{\bar{G}}\) is compact and \(H_{G}=\mathcal{L}_{\bar{G}}^{1/2}L_{\rho}^{2}\). Then, \(\mathrm{Null}(\mathcal{L}_{\bar{G}})^{\perp}=\overline{H_{G}}\), where the closure is with respect to \(L_{\rho}^{2}\). 

### Connection with regularized estimator

Consider the inverse problem of estimating the nonlocal kernel \(K\) given a data pair \((u,f)\). In the classical variational approach, one seeks the minimizer of the following loss function

\[\mathcal{E}(K)= \int_{\Omega}\left[\int_{0}^{\delta}K(r)g[u](r,x)dr-f(x)\right]^{2}dx\] (23)

The inverse problem is ill-posed in the sense that the minimizer can often be non-unique or sensitive to the noise or measurement error in data \((u,f)\). Thus, regularization is crucial to produce a stable solution.

To connect with the attention-based model, we consider regularizing using an RKHS \(H_{W}\) with a square-integrable reproducing kernel \(W\). One seeks an estimator in \(H_{W}\) by regularizing the loss with the \(\|K\|_{H_{W}}^{2}\), and minimizes the regularized loss function

\[\mathcal{E}_{\lambda,W}(K)= \mathcal{E}(K)+\lambda\int_{0}^{\infty}\int_{0}^{\infty}K(s)K(r)W (r,s)drds.\] (24)

The next lemma shows that the regularized estimator is a nonlinear function of the data pair \((u,f)\), where the nonlinearity comes from the kernel \(G_{u}\) and the parameter \(\lambda_{*}\).

**Lemma B.1**.: _The regularized loss function in \(\mathcal{E}_{\lambda,W}(K)\) in (24) is_

\[\mathcal{E}_{\lambda,W}(K)= \int_{0}^{\infty}\int_{0}^{\infty}K(r)K(s)[G_{u}(r,s)+\lambda W( r,s)]drds-2\int_{0}^{\infty}K(r)K^{u,f}(r)dr+Const.,\] (25)

_where \(G_{u}\) is defined in (27). Its minimizer is_

\[\widehat{K}=(\mathcal{L}_{G_{u}}+\lambda_{*}\mathcal{L}_{W})^{-1}K^{u,f},\] (26)

_where \(\mathcal{L}_{G_{u}}\) and \(\mathcal{L}_{W}\) are integral operators with integral kernels \(G_{u}\) defined in (27) and \(W\),_

\[\mathcal{L}_{G_{u}}K(s):=\int_{0}^{\infty}K(r)G_{u}(r,s)dr,\quad\mathcal{L}_{ W}K(s):=\int_{0}^{\infty}K(r)W(r,s)dr,\]

\(\lambda_{*}\) _is the optimal hyper-parameter controlling the strength of regularization, and \(K^{u,f}(r)=\int_{\Omega}g[u](r,x)f(x)dx\) is a function determined by the data \((u,f)\)._

When there is no prior information on the regularization, which happens often for the learning of the kernel, one can use the data-adaptive RKHS \(H_{G_{u}}\) with the reproducing kernel \(G_{u}\) determined by data:

\[G_{u}(r,s)= \int_{\Omega}g[u](r,x)g[u](s,x)dx.\] (27)

Lu et al. [2023] shows that this regularizer can lead to consistent convergent estimators.

_Remark B.2_ (Discrete data and discrete inverse problem).: In practice, the datasets are discrete. One can view the discrete inverse problem as a discretization of the continuous inverse problem. Assume that the integrands are compactly supported and when the integrals are approximated by Riemann sums, we can write loss function for discrete \(\mathbf{K}=(K(r_{1}),\ldots,K(r_{N}))^{\top}\in\mathbb{R}^{N\times 1}\) as

\[\mathcal{E}_{\lambda,W}(K) \approx\sum_{k,k^{\prime}=1}^{N,N}K(r_{k})K(r_{k^{\prime}})[G_{u} (r_{k},r_{k^{\prime}})+\lambda W(r_{k},r_{k^{\prime}})](\Delta r)^{2}-2\sum_{ k=1}^{N}K(r_{k})K^{u,f}(r_{k})\Delta r+Const.\] \[= \mathbf{K}^{\top}[\mathbf{G}_{u}+\lambda\mathbf{W}]\mathbf{K}-2 \mathbf{K}^{\top}\mathbf{K}^{u,f}+Const.,\] (28)

where, recalling the definition of the token \(\mathbf{u}_{1:d}\) in (5),

\[\mathbf{G}_{u}=(G_{u}(r_{k},r_{k^{\prime}}))_{1\leq k,k^{\prime}\leq K}=(\int_ {\Omega}g[u](x,r_{k})g[u](x,r_{k^{\prime}})dx)_{1\leq k,k^{\prime}\leq K} \approx\mathbf{u}_{1:d}\mathbf{u}_{1:d}^{\top},\]

\(\mathbf{W}=(W(r_{k},r_{k^{\prime}}))_{1\leq k,k^{\prime}\leq K}\) and \(\mathbf{K}^{u,f}=\left(\int_{\Omega}g[u](r_{k},x)f(x)dx\right)_{1\leq k\leq N}\).

The minimizer of this discrete loss function with the optimal hyper-parameter \(\lambda_{*}\) is

\[\widehat{\mathbf{K}}=(\mathbf{G}_{u}+\lambda_{*}\mathbf{W})^{-1}\mathbf{K}^{u,f}.\]

In particular, when taking \(\mathbf{W}=\mathbf{G}_{u}\) and using the Neumann series \((\lambda_{*}^{-1}\mathbf{G}_{u}^{2}+I)^{-1}=\sum_{k=0}^{\infty}(-1)^{k} \lambda_{*}^{-k}\mathbf{G}_{u}^{2k}\), we have

\[\widehat{\mathbf{K}}=(\lambda_{*}^{-1}\mathbf{G}_{u}^{2}+I)^{-1}\lambda_{*}^{ -1}\mathbf{G}_{u}\mathbf{K}^{u,f}=\lambda_{*}^{-1}\mathbf{G}_{u}\mathbf{K}^{ u,f}-\lambda_{*}^{-2}\mathbf{G}_{u}^{3}\mathbf{K}^{u,f}+\sum_{k=2}^{\infty}(-1)^{k} \lambda_{*}^{-k}\mathbf{G}_{u}^{2k}\mathbf{G}_{u}\mathbf{K}^{u,f}.\]

In particular, \(\lambda_{*}\) depends on both \(\mathbf{G}_{u}\) and \(\mathbf{K}^{u,f}\). Hence, the estimator \(\widehat{\mathbf{K}}\) is nonlinear in \(\mathbf{G}_{u}\) and \(\mathbf{K}^{u,f}\), and it is important to make the attention depend nonlinearly on the token \(\mathbf{u}_{1:d}\), as in (7).

Proof of Lemma b.1.: Since \(K\) is radial and noticing that

\[\int_{|\xi|=1}(u(x+r\xi)-u(x))d\xi=u(x+r)+u(x-r)-2u(x)=g[u](r,x)\]

since \(\xi\in\mathbb{R}^{1}\), we can write

\[\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}K(|s|)K(|r|)\int_{ \Omega}(u(x+s)-u(x))(u(x+r)-u(x))dxdrds\] \[= \int_{0}^{\infty}\int_{0}^{\infty}K(r)K(s)\int_{|\xi^{\prime}|=1} \int_{|\xi|=1}\int_{\Omega}(u(x+s\xi^{\prime})-u(x))(u(x+r\xi)-u(x))dxd\xi d \xi^{\prime}\] \[= \int_{0}^{\infty}\int_{0}^{\infty}K(r)K(s)\int_{\Omega}g[u](r,x) g[u](s,x)dxdrds\] \[= \int_{0}^{\infty}\int_{0}^{\infty}K(r)K(s)G_{u}(r,s)drds.\]

Meanwhile, by the Riesz representation theorem, there exists a function \(K^{u,f}\in L^{2}(0,\infty)\) such that

\[\int_{-\infty}^{\infty}K(|r|)\int_{\Omega}(u(x+r)-u(x))f(x)dxdr\] \[= \int_{0}^{\infty}K(r)\int_{|\xi|=1}\int_{\Omega}(u(x+r)-u(x))f(x )dxd\xi dr\] \[= \int_{0}^{\infty}K(r)\int_{\Omega}g[u](r,x)f(x)dxdr=\int_{0}^{ \infty}K(r)K^{u,f}(r)dr.\]

Combining these two equations, we can write the loss function as

\[\mathcal{E}(K)= \int_{\Omega}\left[\int_{-\infty}^{\infty}K(|s|)(u(x+s)-u(x))ds-f (x)\right]^{2}dx\] \[= \int_{-\infty}^{\infty}\int_{-\infty}^{\infty}K(|s|)K(|r|)\int_{ \Omega}(u(x+s)-u(x))(u(x+r)-u(x))dxdrds\] \[-\int_{-\infty}^{\infty}K(|s|)\int_{\Omega}(u(x+s)-u(x))f(x)dxds +Const.\] \[= \int_{0}^{\infty}\int_{0}^{\infty}K(r)K(s)G_{u}(r,s)drds-2\int_{ 0}^{\infty}K(r)K^{u,f}(r)dr+Const..\]

Then, we can write the regularized loss function \(\mathcal{E}_{\lambda,W}(K)\) as

\[\mathcal{E}_{\lambda,W}(K)= \int_{0}^{\infty}\int_{0}^{\infty}K(r)K(s)[G_{u}(r,s)+\lambda W(r,s)]drds-2\int_{0}^{\infty}K(r)K^{u,f}(r)dr+Const.\] \[= ((\mathcal{E}_{G_{u}}+\lambda\mathcal{L}_{W})K,K)_{L^{2}(0,\infty )}-2\langle K,K^{u,f}\rangle_{L^{2}(0,\infty)}+Const.\]

Selecting the optimal hyper-parameter \(\lambda_{*}\), which depends on both \((u,f)\) and \(W\), and setting the Frechet derivative of \(\mathcal{E}_{\lambda,W}\) over \(L^{2}(0,\infty)\) to be zero, we obtain the regularized estimator in (26). 

## Appendix C Data generation and additional discussion

### Example 1: radial kernel learning

In all settings except the "single task" one, all kernels act on the same set of functions \(\{u_{i}\}_{i=1,2}\) with \(u_{1}=\cos(x)\mathbf{1}_{[-\pi,\pi]}(x)\) and \(u_{2}(x)=\sin(2x)\mathbf{1}_{[-\pi,\pi]}(x)\). In the "single task" setting, to create more diverse samples, the single kernel acts on a set of 14 functions: \(u_{k}=\cos(kx)\mathbf{1}_{[-\pi,\pi]}(x)\), \(k=1,\cdots,7\) and \(u_{k}(x)=\sin(kx)\mathbf{1}_{[-\pi,\pi]}(x)\), \(k=8,\cdots,14\). In the ground-truth model, the integral \(\mathcal{L}_{\gamma_{\eta}}[u_{i}]\) is computed by the adaptive Gauss-Kronrod quadrature method, which is much more accurate than the Riemann sum integrator that we use in the learning stage. To create discrete datasets with different resolutions, for each \(\Delta x\in 0.0125\times\{1,2\}\), we take values\(\{u_{i}(x_{j}),f_{i}(x_{j}):x_{j}\in[-40,40],j=1,\ldots,J\}_{i=1}^{N}\), where \(x_{j}\) is the grid point on the uniform mesh of size \(\Delta x\). We form a training sample of each task by taking \(d\) pairs from this task. When taking the token size \(d\) and \(k\) function pairs, each task contains \(\lfloor\frac{2265}{d}\rfloor\times k\) samples.

**More diverse tasks.** To further evaluate the generalization capability of NAO as a foundation model, we add another two types of kernels into the training dataset. The training dataset is now constructed based on 21 kernels of three groups, with \(15\) samples on each kernel:

* sine-type kernels: \(\gamma_{\eta}^{\sin}(r)=\exp(-\eta r)\sin(6r)\mathbf{1}_{[0,11]}(r)\), \(\eta=1,2,3,4,6,7,8\).
* cosine-type kernels: \(\gamma_{\eta}^{\cos}(r)=\frac{10-r}{20}\cos(\eta r)(10-r)\mathbf{1}_{[0,10]}(r)\), \(\eta=0,1,2,3,4,5,6\).
* polynomial-type kernels: \(\gamma_{\eta}^{poly}(r)=\exp(-0.1r)p_{\eta}\left(\frac{r-10}{10}\right) \mathbf{1}_{[0,10]}(r)\), \(\eta=1,2,3,4,5,6,7\), where \(p_{\eta}\) is the degree-\(\eta\) Legendre polynomial.

Based on this enriched dataset, besides the original "sine only" setting, three additional settings are considered to compare the generalizability across different settings. The results are reported in Table 4 and Figure 5. In addition to the original setting corresponding to all "sine" kernels, in part II of Table 4 (denoted as "sine+cosine+polyn"), we consider a "diverse task" setting, where all \(315\) samples are employed in training. In part III, we consider a "single task" setting, where only the first sine-type kernel, \(\gamma(r)=\exp(-r)\sin(6r)\mathbf{1}_{[0,11]}(r)\), is considered as the training task, with \(105\) samples on this task. Lastly, in part IV we demonstrate a "fewer samples" setting, where the training dataset still consists of all \(21\) tasks but with only \(5\) samples on each task. For testing, besides the ID and OOD tasks in the ablation study, we add an additional OOD task with a Gaussian-type kernel \(\gamma_{ood2}(r)=\frac{\exp(-0.5r^{2})}{\sqrt{2\pi}}\), which is substantially different from all training tasks.

As shown in Table 4, considering diverse datasets helps in both OOD tests (the kernel error is reduced from \(9.14\%\) to \(6.92\%\) in OOD test 1, and from \(329.66\%\) to \(10.48\%\) in OOD test 2), but not for the ID test (the kernel error is slightly increased from \(4.03\%\) to \(5.04\%\)). We also note that since the "sine only" setting only sees systems with the same kernel frequency in training, it does not generalize to OOD test 2, where it becomes necessary to include more diverse training tasks. As the training tasks become more diverse, the intrinsic dimension of kernel space increases, requiring a larger rank size \(d_{k}\) of the weight matrices. When comparing the "fewer samples" setting with the "sine only" setting, the former exhibits better task diversity but fewer samples per task. One can see that the performance deteriorates on the ID test but improves on OOD test 2. This observation emphasizes the balance between the diversity of tasks and the number of training samples per task.

### Example 2: solution operator learning

For one example, we generate the synthetic data based on the Darcy flow in a square domain of size \(1\times 1\) subjected to Dirichlet boundary conditions. The problem setting is: \(-\nabla(b(x)\nabla p(x))=g(x)\) subjected to \(p(x)=0\) on all boundaries. This equation describes the diffusion in heterogeneous fields, such as the subsurface flow of underground water in porous media. The heterogeneity is represented by the location-dependent conductivity \(b(x)\). \(p(x)\) is the source term, and the hydraulic height \(g(x)\) is the solution. For each data instance, we solve the equation on a \(21\times 21\) grid using an in-house finite difference code. We consider 500 random microstructures consisting of two distinct phases. For each microstructure, the square domain is randomly divided into two subdomains with different conductivity of either 12 or 3. Additionally, we consider 100 different \(g(x)\) functions obtained via a Gaussian random field generator. For each microstructure, we solve the Darcy problem considering all 100 source terms, resulting in a dataset of \(N=10,000\) function pairs in the form of \(\{p_{i}(x_{j}),g_{i}(x_{j})\}_{i=1}^{N}\), and \(j=1,2,\cdots,441\) where \(x_{j}\)'s are the discretization points on the square domain.

In operator learning settings, we note that the permutation of function pairs in each sample should not change the learned kernel, i.e., one should have \(K[\mathbf{u}_{1:d},\mathbf{f}_{1:d}]=K[\mathbf{u}_{\sigma(1:d)},\mathbf{f}_{ \sigma(1:d)}]\), where \(\sigma\) is the permutation operator. Hence, we augment the training dataset by permuting the function pairs in each task. Specifically, with \(100\) microstructures (tasks) and \(100\) function pairs per task, we randomly permut the function pairs and take \(100\) function pairs for \(100\) times per task. As a result, we can generate a total of 10000 samples (9000 for training and 1000 for testing) in the form of \(\{\mathbf{u}_{1:100}^{\eta},\mathbf{f}_{1:100}^{\eta}\}_{\eta=1}^{10000}\).

### Example 3: heterogeneous material learning

In the Mechanical MNIST dataset, we generate a large set of heterogeneous material responses subjected to mechanical forces. This is similar to the approach in Lejeune (2020). The material property (stiffness) of the heterogeneous medium is constructed assuming a linear scaling between 1 and 100, according to the gray-scale bitmap of the MNIST images, which results in a set of 2D square domains with properties that vary according to MNIST digit patterns. The problem setting for this data set is the equilibrium equation:\(-\nabla\cdot P(x)=f(x)\) subjected to Dirichlet boundary condition of zero displacement and nonzero variable external forces:\(f(x)\). \(P(x)=\hat{P}(I+\nabla u(x))\) is the stress tensor and is a nonlinear function of displacement \(u(x)\). The choice of material models determines the stress function, and here we employ the Neo-Hookean material model as in Lejeune

\begin{table}
\begin{tabular}{c c|c|c c c|c c c} \hline \(d_{k}\) & model & \#param & \multicolumn{4}{c}{Operator test error} & \multicolumn{4}{c}{Kernel test error} \\ \cline{3-10}  & & & ID & OOD1 & OOD2 & ID & OOD1 & OOD2 \\ \hline \hline \multicolumn{10}{c}{**sine only:** Train on sine dataset, 105 samples in total} \\ \hline
10 & Discrete-NAO & 16526 & 1.33\% & 25.81\% & 138.00\% & 29.02\% & 28.80\% & 97.14\% \\  & NAO & 18843 & 1.48\% & 8.10\% & 221.04\% & 5.40\% & 10.02\% & 420.60\% \\ \hline
20 & Discrete-NAO & 28645 & 1.35\% & 18.70\% & 99.50\% & 35.49\% & 30.81\% & 101.08\% \\  & NAO & 30963 & 1.33\% & 9.12\% & 211.78\% & 4.63\% & 9.14\% & 329.66\% \\ \hline
40 & Discrete-NAO & 52886 & 1.30\% & 31.37\% & 49.83\% & 38.89\% & 30.02\% & 129.84\% \\  & NAO & 55203 & **0.67\%** & 7.34\% & 234.43\% & **4.03\%** & 12.16\% & 1062.3\% \\ \hline  & Autoencoder & 16424 & 12.97\% & 1041.94\% & 698.72\% & 22.56\% & 136.79\% & 304.37\% \\ \hline \hline \multicolumn{10}{c}{**sine+cosine+polyn:** Train on diverse (sine, cosine and polynomial) dataset, 315 samples in total} \\ \hline
10 & Discrete-NAO & 16526 & 2.27\% & 13.02\% & 11.50\% & 10.41\% & 30.79\% & 77.80\% \\  & NAO & 18843 & 2.34\% & 14.37\% & 10.05\% & 7.26\% & 28.23\% & 94.38\% \\ \hline
20 & Discrete-NAO & 28645 & 1.60\% & 6.03\% & 19.73\% & 21.83\% & 21.29\% & 18.97\% \\  & NAO & 30963 & 1.64\% & 3.25\% & **3.58\%** & 5.45\% & 8.87\% & 15.82\% \\ \hline
40 & Discrete-NAO & 52886 & 1.45\% & 5.49\% & 18.26\% & 20.07\% & 19.46\% & 18.44\% \\  & NAO & 55203 & 1.54\% & **3.09\%** & 7.69\% & 5.04\% & **6.92\%** & **10.48\%** \\ \hline  & Autoencoder & 56486 & 12.67\% & 341.96\% & 21.16\% & 27.06\% & 52.43\% & 128.08\% \\ \hline \hline \multicolumn{10}{c}{**Single task:** Train on a single sine dataset, 105 samples in total} \\ \hline
10 & NAO & 18843 & 104.49\% & 104.37\% & 56.64\% & 100.31\% & 100.00\% & 94.98\% \\ \hline
20 & NAO & 30963 & 116.89\% & 105.52\% & 85.40\% & 99.02\% & 99.55\% & 98.37\% \\ \hline
40 & NAO & 55203 & 111.33\% & 104.12\% & 76.78\% & 101.61\% & 100.33\% & 95.90\% \\ \hline \hline \multicolumn{10}{c}{**Fewer samples:** Train on diverse (sine, cosine and polynomial) dataset, 105 samples in total} \\ \hline
10 & NAO & 18843 & 4.23\% & 15.34\% & 11.13\% & 10.11\% & 25.23\% & 97.63\% \\ \hline
20 & NAO & 30963 & 4.15\% & 10.15\% & 9.59\% & 8.84\% & 23.08\% & 20.05\% \\ \hline
40 & NAO & 55203 & 3.69\% & 11.67\% & 6.08\% & 9.19\% & 24.04\% & 25.58\% \\ \hline \hline \end{tabular}
\end{table}
Table 4: Training and test for the radial kernel problem with more diverse tasks with fixed \(d=302\), where bold numbers highlight the best methods across different data settings. These results emphasize the balance between task diversity and the number of samples per task.

[2020]. From MNIST, we took 50 samples of each digit resulting in a total of 500 microstructures. We consider 200 different external forces \(f(x)\) obtained via a Gaussian random field, and solve the problem for each pair of microstructure and external force, resulting in \(N=100,000\) samples. To solve each sample, we use FEniCS finite element package considering a \(140\times 140\) uniform mesh. We then downsample from the finite element nodes to get values for the solution \(u(x)\) and external force \(f(x)\) on a the coarser \(29\times 29\) equi-spaced grid. The resulting dataset is of the form: \(\{u_{i}(x_{j}),f_{i}(x_{j})\}_{i=1}^{N}\), and \(j=1,2,...,841\) where \(x_{j}\)'s are the equi-spaced sampled spatial points.

Similar to Example 2, we perform the permutation trick to augment the training data. In particular, with \(500\) microstructures (tasks) and \(200\) function pairs per task, we randomly permute the function pairs and take \(100\) function pairs for \(100\) times per task. As a result, we can generate a total of 50000 samples, where 45000 are used for training and 5000 for testing.

## Appendix D Computational complexity

Denote \((N,d,d_{k},L,n_{train})\) as the size of the spatial mesh, the number of data pairs in each training model, the column width of the query/key weight matrices \(W^{Q}\) and \(W^{K}\), the number of layers, and the number of training models. The number of trainable parameters in a discrete NAO is of size \(O(L\times d\times d_{k}+N^{2})\). For continuous-kernel NAO, taking a three-layer MLP as a dense net of size \((d,h_{1},h_{2},1)\) for the trainable kernels \(W^{P,u}\) and \(W^{P,f}\) for example, its the corresponding number of trainable parameters is \(O(d\times h_{1}+h_{1}\times h_{2})\). Thus, the total number of trainable parameters for a continuous-kernel NAO is \(O(L\times d\times d_{k}+d\times h_{1}+h_{1}\times h_{2})\).

The computational complexity of NAO is quadratic in the length of the input and linear in the data size, with \(O([d^{2}(3N+d_{k})+6N^{2}d]Ln_{train})\) flops in each epoch in the optimization. It is computed as follows for each layer and the data of each training model: the attention function takes \(O(d^{2}d_{k}+2Nd^{2}+4N^{2}d)\) flops, and the kernel map takes \(O(d^{2}d_{k}+Nd^{2}+2N^{2}d)\) flops; thus, the total is \(O(d^{2}(3N+d_{k})+6N^{2}d)\) flops. In inverse PDE problems, we generally have \(d\ll N\), and hence the complexity of NAO is \(O(N^{2}d)\) per layer per sample.

Compared with other methods, it is important to note that NAO solves both forward and ill-posed inverse problems using multi-model data. Thus, we don't compare it with methods that solve the problems for a single model data, for instance, the regularized estimator in Appendix B. Methods solving similar problems are the original attention model [Vaswani et al., 2017], convolution neural network (CNN), and graph neural network (GNN). As discussed in Vaswani et al. [2017], these models have a similar computational complexity, if not any higher. In particular, the complexity of the original attention model is \(O(N^{2}d)\), and the complexity of CNN is \(O(kNd^{2})\) with \(k\) being the kernel size, and a full GNN is of complexity \(O(N^{2}d^{2})\).

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: We have clearly stated our claims in the abstract and introduction, including the key contributions that our proposed model NAO provides a novel input-dependent kernel for context extraction, integrates forward and inverse PDE predictions in one framework, and offers the capability in solving ill-posed inverse PDE problems.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: The limitations of the work is discussed in the Conclusion section.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes] Justification: We have provided the full set of assumptions and corresponding complete proofs under each proposed Lemma with detailed derivations included in the Appendix A and B.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: We have elaborated the detailed architectures of the proposed model in the main body of the paper as well as data generation details in Appendix C. The code and accompanying data have been released at https://github.com/fishmoon1234/NAO.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: The code and accompanying data have been released at https://github.com/fishmoon1234/NAO.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: We briefly state the training and test strategies at the beginning of the Experiments section, with the full details provided in Appendix C.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [No] Justification: Error bars are not reported due to the limited computational resource. Nevertheless, we have tuned the hyperparameters of all the considered models and reported extensive results in a large variety of settings, and they all support our claim.

8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: The computing resources are reported in the first paragraph of the Experiments section. In particular, all the experiments are conducted on a single NVIDIA GeForce RTX 3090 GPU with 24 GB memory.
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: The research conducted in the paper conform with the NeurIPS Code of Ethics.
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [Yes] Justification: The discussion on the societal impacts can be found in the Conclusion section.
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: The paper poses no such risks.
12. **Licensees for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: We have cited the original papers that produced the code package or dataset where appropriate.
13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [Yes] Justification: The code and accompanying data have been released at https://github.com/fishmoon1234/NAO, with instructions and pretrained models provided.
14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects.
15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained?Answer: [NA]

Justification: The paper does not involve crowdsourcing nor research with human subjects.