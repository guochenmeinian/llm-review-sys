# Temporal Continual Learning with Prior Compensation for Human Motion Prediction

 Jianwei Tang

Sun Yat-sen University

tangjw7@mail2.sysu.edu.cn &Jiangxin Sun

Sun Yat-sen University

sunjx5@mail2.sysu.edu.cn &Xiaotong Lin

Sun Yat-sen University

linxt29@mail2.sysu.edu.cn &Lifang Zhang

Dongguan University of Technology

2017028@dgut.edu.cn &Wei-Shi Zheng

Sun Yat-sen University

wszheng@ieee.org &Jian-Fang Hu

Sun Yat-sen University

hujf5@mail.sysu.edu.cn

Jian-Fang Hu is the corresponding author. Hu is also with Guangdong Province Key Laboratory of Information Security Technology, Guangzhou, China and Key Laboratory of Machine Intelligence and Advanced Computing, Ministry of Education, China.

###### Abstract

Human Motion Prediction (HMP) aims to predict future poses at different moments according to past motion sequences. Previous approaches have treated the prediction of various moments equally, resulting in two main limitations: the learning of short-term predictions is hindered by the focus on long-term predictions, and the incorporation of prior information from past predictions into subsequent predictions is limited. In this paper, we introduce a novel multi-stage training framework called Temporal Continual Learning (TCL) to address the above challenges. To better preserve prior information, we introduce the Prior Compensation Factor (PCF). We incorporate it into the model training to compensate for the lost prior information. Furthermore, we derive a more reasonable optimization objective through theoretical derivation. It is important to note that our TCL framework can be easily integrated with different HMP backbone models and adapted to various datasets and applications. Extensive experiments on four HMP benchmark datasets demonstrate the effectiveness and flexibility of TCL. The code is available at https://github.com/hyqlat/TCL.

## 1 Introduction

Human Motion Prediction (HMP) aims to predict future poses at varied temporal moments based on the observed motion sequences. The accurate prediction of human motion plays a vital role in many applications, such as autonomous driving, human-robot interaction, and security monitoring, enabling the anticipation and mitigation of risks. This task is challenging due to its requirement for predicting multiple moments, including short-term predictions for the "near-future" and long-term predictions for the "far-future".

Previous approaches address this task by autoregressively forecasting using recurrent neural networks (RNNs) and transformer architectures [14, 12, 15, 9, 1, 5, 40, 42, 1, 4, 26, 37, 4], or parallelly generating all frames with graph convolution networks (GCNs) [28, 26, 23, 25, 30, 31, 2]. These methods employthe one-stage training strategy to directly train a model that can predict both the short-term prediction and the long-term prediction. However, the long-term motion prediction is more challenging since the future motion can vary greatly (i.e., the prediction space is large), which would increase the uncertainty and ambiguity of future prediction. As the prediction length increases, the fitting of the high-uncertainty long-term prediction will gradually dominate the learning process of the prediction model, which hinders the learning of short-term predictions and further limits the full potential of leveraging the prior knowledge learned from short-term inputs to facilitate long-term predictions.

This motivates us to exploit proper training strategies to better learn and utilize the prior knowledge. We further investigate this by conducting preliminary experiments on the following settings "short+long", "short only", and "short then short+long", which are illustrated in Figure 1. The results are summarized in Figure 2. We observe that "short then short+long" outperforms "short+long" on long-term prediction, which implies that the knowledge learned in short-term prediction can serve as a prior to facilitating the learning of "far-future" prediction. This is intuitive and thus we can use a progressive learning approach, where the model is trained to predict increasing numbers of frames over multiple training stages, e.g., starting with 5 frames in the first stage and 10 frames in the second stage, and so on. However, we also observe that "short then short+long" performs worse than "short only" by a considerable margin for short-term prediction, which demonstrates the joint learning of short-term and long-term prediction results in knowledge forgetting for short-term prediction.

To overcome these problems, we introduce the Prior Compensation Factor (PCF) into the multi-stage training method to obtain a sequential continuous learning framework, which is named Temporal Continual Learning (TCL). It is a multi-stage training framework that alleviates constraint posed by long-term prediction on short-term prediction and effectively utilize prior information from short-term prediction. Specifically, we divide the future sequence into segments and divide the training process

Figure 1: Illustration of three different prediction settings. “short+long” and “short only” represent optimizing prediction for the entire sequence and prediction only for the first 5 frames, respectively. “short then short+long” denotes training the entire sequence after pretraining for the first 5 frames.

Figure 2: Preliminary experiment results of three different prediction settings (lower values indicate better performance). (a) shows the short-term prediction results (predicting the 2-nd frame), while (b) illustrates the long-term prediction results(predicting the 25-th frame).

into multiple stages accordingly. We incrementally increase the number of prediction segments, allowing us to leverage the prior knowledge acquired from earlier stages for predicting the subsequent ones. Upon completion of each stage's training, the learned prior knowledge is saved in the model parameters. However, with the changing of optimization objective when switching stages, the prior knowledge gradually fades away. In order to overcome this forgetting problem of prior knowledge, we further introduce the PCF, which is designed as a learnable variable. Then, we derive a more reasonable optimization objective for this regression problem through theoretical derivation.

The proposed training framework is flexible and can be easily integrated with various HMP backbones or adapted to different datasets. To validate the effectiveness and flexibility of our framework, we conduct experiments on four popular HMP benchmark datasets by integrating TCL with several HMP backbones. Our contributions can be summarized as follows:1) We identify certain limitations in existing HMP models and propose a novel multi-stage training strategy called Temporal Continual Learning to obtain a more accurate motion prediction model. 2) We introduce a Prior Compensation Factor to tackle the forgetting problem of prior knowledge, which can be learned jointly with the prediction model parameters. 3) We obtain an easily optimized and more reasonable objective function through theoretical derivation.

## 2 Related Work

Autoregressive prediction approaches for HMP.Motivated by natural language processing, many researchers have adopted sequence-to-sequence models to exploit the temporal information of pose sequences in HMP, which includes RNNs, Long Short-Term Memory Networks (LSTMs) [15] and Transformer [43]. For instance, ERD [8] combined LSTMs with an encoder-decoder to model the temporal aspect, while Jain _et al.[18]_ proposed Structural-RNN to capture spatiotemporal features of human motion. Martinez _et al.[32]_ applied a sequence-to-sequence architecture for modeling the human motion structure. Aksan _et al.[1]_ used Transformer to autoregressively predict future poses. Sun _et al.[40]_ designed a query-read process to retrieve some motion dynamics from the memory bank. Lucas _et al.[27]_ proposed a GPT-like[35] autoregressive method to generate human poses. Tang _et al.[42]_ combined attention mechanism and LSTM to complete the human motion prediction task. However, autoregressive methods are difficult to train and suffer from error accumulation problem.

Parallel prediction approaches for HMP.Some researchers employed parallel prediction methods to address HMP problem [2; 6; 7; 23; 25; 30; 31; 28]. The works of [21; 22; 23] used GCN to encode feature or to decode it, which associates different joints' information. Mao _et al.[31]_ viewed a pose as a fully connected graph and used GCN to extract hidden information between any pair of joints. Martinez _et al.[33]_ devised a transformer-based network to predict human poses. Sofianos _et al.[39]_ proposed a method to extract spatiotemporal features using GCNs. And Ma _et al.[28]_ tried to achieve better prediction results using a progressive manner. Xu _et al.[45]_ used multi-level spatial-temporal anchors to make diverse predictions.

Continual learning.Although Deep Neural Networks (DNNs) have demonstrated impressive performance on specific tasks, their limitations in handling diverse tasks hinder their broader applicability. Therefore, some researchers introduced the concept of Continual Learning (CL)[36] to DNNs to ensure that models retain the knowledge of previous tasks while learning new tasks. Kirkpatrick _et al.[20]_ proposed the Elastic Weight Consolidation (EWC) method to overcome the catastrophic forgetting problem and improve the performance of multi-task problems. Shin _et al.[38]_ introduced a method that addresses catastrophic forgetting in sequential learning scenarios by using a generative model to replay data from past tasks during the training of new tasks. It is important to note that the traditional CL approaches do not account for temporal correlation and are unable to leverage data from previous tasks.

## 3 Method

The problem of human motion prediction involves predicting future motion sequences by utilizing previously observed motion sequences. Formally, let \(\mathbf{X}_{1:T_{h}}=[\mathbf{X}_{1},\mathbf{X}_{2},\cdots,\mathbf{X}_{T_{h}} ]\in\mathbb{R}^{J\times D\times T_{h}}\) denotes the observed motion sequence of length \(T_{h}\) where \(\mathbf{X}_{i}\) indicates motion of time \(i\), and \(\mathbf{X}_{T_{h}+1:T_{h}+T_{p}}=[\mathbf{X}_{T_{h}+1},\mathbf{X}_{T_{h}+2}, \cdots,\mathbf{X}_{T_{h}+T_{p}}]\in\mathbb{R}^{J\times D\times T_{p}}\) represents the motion sequence of length \(T_{p}\) that needs to be predicted. Note that \(J\) is the number of joints for each pose, and \(D\) is the dimension of coordinates. It can be regarded as a composite task consisting of multiple sequential prediction tasks, which involves predicting the future poses at varied moments conditioned on the motion sequences observed in the past.

To accomplish this multiple sequential prediction task, we first model the HMP problem as solving the following optimization problem:

\[\bm{\theta}^{*}=\operatorname*{arg\,max}_{\bm{\theta}}P(\mathbf{X}_{T_{h}+1}, \mathbf{X}_{T_{h}+2},\cdots,\mathbf{X}_{T_{h}+T_{p}}|\mathbf{X}_{1},\mathbf{X}_ {2},\cdots,\mathbf{X}_{T_{h}};\bm{\theta}).\] (1)

Thus our target is to find the optimal model that maximizes Equation (1). To achieve this, we propose a framework called Temporal Continual Learning. Specifically, we partition the entire prediction interval into several smaller segments and perform multi-stage training. We claim that this enables the utilization of prior information from previous segments as knowledge for predicting the subsequent segments. Further, as the optimization objective changes in each training stage, we find that the prior knowledge, i.e., information learned in previous training stages, will be forgotten to a certain degree. To mitigate this problem, we introduce a Prior Compensation Factor and accordingly derive a more reasonable optimization objective at each stage.

### Multi-stage Training Process.

We initially decouple the future sequence into \(K\) segments with time boundaries \(T_{Z_{1}},T_{Z_{2}},\cdots,T_{Z_{K}}\), where \(T_{Z_{K}}=T_{h}+T_{p}\). And we denote the prediction of segment \(k\) as task \(Z_{k}\), which can be expressed as follows:

* Task \(Z_{1}:\quad\mathbf{X}_{1:T_{h}}\rightarrow\mathbf{X}_{T_{h}+1:T_{Z_{1}}}\)
* Task \(Z_{2}:\quad\mathbf{X}_{1:T_{h}}\rightarrow\mathbf{X}_{T_{Z_{1}}+1:T_{Z_{2}}}\)
* Task \(Z_{K}:\quad\mathbf{X}_{1:T_{h}}\rightarrow\mathbf{X}_{T_{Z_{K-1}}+1:T_{Z_{K}}}\)

To be specific, the target of task \(Z_{1}\) is to predict \(\mathbf{X}_{T_{h}+1:T_{Z_{1}}}\) conditioned on \(\mathbf{X}_{1:T_{h}}\), and task \(Z_{k}\) aims to predict \(\mathbf{X}_{T_{Z_{k-1}}+1:T_{Z_{k}}}\) with \(\mathbf{X}_{1:T_{h}}\) as condition. Therefore, by leveraging bayesian formulation, optimization problem \(P(\mathbf{X}_{T_{h}+1},\mathbf{X}_{T_{h}+2},\cdots,\mathbf{X}_{T_{h}+T_{p}}| \mathbf{X}_{1},\mathbf{X}_{2},\cdots,\mathbf{X}_{T_{h}};\bm{\theta})\) can be formulated as:

\[P(Z_{1}Z_{2}\cdots Z_{K};\bm{\theta})=P(Z_{K}|Z_{1}Z_{2}\cdots Z_{K-1};\bm{ \theta})P(Z_{K-1}|Z_{1}Z_{2}\cdots Z_{K-2};\bm{\theta})\cdots P(Z_{1};\bm{ \theta}),\] (2)

where \(\bm{\theta}\) is model parameters to be learned. In the following, we denote "\(Z_{1}Z_{2}\cdots Z_{k}\)" as "\(Z_{1:k}\)". Our target is to maximize Equation (2) which means finding optimal model to accomplish all tasks.

For the purpose of transferring the prior knowledge in preceding tasks to their subsequent prediction task, we progressively increase the number of tasks in temporal order and train them successively. More precisely, our training is decomposed into \(K\) stages. In each stage \(S_{k}\), we leverage the optimal model parameters \(\bm{\theta}_{k-1}^{*}\) trained in the previous stage \(S_{k-1}\) to initialize the parameters \(\bm{\theta}\), and then update it based on the prediction tasks \(Z_{1},Z_{2},\cdots,Z_{k}\) (maximizing \(P(Z_{1:k};\bm{\theta})\)). Since the model is trained to optimize the prediction tasks \(Z_{1:k-1}\) in training stage \(S_{k-1}\), the knowledge of tasks \(Z_{1:k-1}\) can be implicitly involved in its well-trained parameters \(\bm{\theta}_{k-1}^{*}\). Initializing \(\bm{\theta}_{k}\) as \(\bm{\theta}_{k-1}^{*}\) can exploit the prior knowledge learned in previous tasks to assist the prediction of the next task.

### Definition of Prior Compensation Factor.

With training different optimization objectives stage by stage, the prior knowledge provided by previous tasks can be effectively exploited to predict the subsequent task. However, the change of the optimization objective in different training stages could also bring about the knowledge forgetting problem. To mitigate the problem, we introduce \(\alpha_{Z_{1:k-1}\to Z_{k}}\) to estimate the extent of forgotten knowledge when utilizing prior knowledge from tasks \(Z_{1:k-1}\) to predict task \(Z_{k}\), which we refer to as the "Prior Compensation Factor".

\[\alpha_{Z_{1:k-1}\to Z_{k}}=P(Z_{k}|Z_{1:k-1};\bm{\theta})-P(Z_{k}| \hat{Z}_{1:k-1};\bm{\theta}).\] (3)

Here, \(\hat{Z}_{1:k-1}\) is regarded as the prior knowledge that is reserved and can be still provided for predicting task \(Z_{k}\). So \(\hat{Z}_{1:k-1}\) initially represents the prior knowledge reserved in \(\bm{\theta}_{k-1}^{*}\) in every stage \(S_{k}\) and would get somewhat corrupted gradually during training. \(P(Z_{k}|Z_{1:k-1};\bm{\theta})\) indicates the most ideal case, where the current prediction task \(Z_{k}\) can fully leverage the prior information provided by previous prediction tasks \(Z_{1:k-1}\). Consequently, the loss of the prior knowledge is non-negative, implying that \(0\leq\alpha_{Z_{1:k-1}\to Z_{k}}\leq 1-P(Z_{k}|\hat{Z}_{1:k-1};\bm{\theta})\). Specifically, we can observe that \(\alpha=0\) when \(P(Z_{k}|Z_{1:k-1};\bm{\theta})=P(Z_{k}|\hat{Z}_{1:k-1};\bm{\theta})\), which implies that all the prior knowledge of previous tasks is completely exploited although the \(\bm{\theta}\) changes. By substituting Equation (3) into Equation (2) and taking the negative logarithm, we can obtain:

\[-\log P(Z_{1:k};\bm{\theta})=-\log P(Z_{1};\bm{\theta})-\sum_{i=2}^{k}\log(P( Z_{i}|\hat{Z}_{1:i-1};\bm{\theta})+\alpha_{Z_{1:i-1}\to Z_{i}}).\] (4)

Our objective is to minimize \(-\log P(Z_{1:k};\bm{\theta})\) with respect to the model parameter \(\bm{\theta}\) and prior compensation factors \(\{\alpha_{Z_{1:i-1}\to Z_{i}},i=2,3,\cdots,k\}\).

### Optimization Objective

Optimizing Equation (4) directly is challenging due to the presence of the PCF \(\alpha\) and \(P(Z_{k}|\hat{Z}_{1:k-1};\bm{\theta})\) inside the logarithm. By applying Lemma 3.1 (details provided in the appendix), we can obtain an upper bound for Equation (4), which can be expressed as:

\[\begin{split} UB&=-\log P(Z_{1};\bm{\theta})+\sum_{ i=2}^{k}((1-\alpha_{Z_{1:i-1}\to Z_{i}})(-\log P(Z_{i}|\hat{Z}_{1:i-1};\bm{ \theta}))\\ &+(1-\alpha_{Z_{1:i-1}\to Z_{i}})\log(1-\alpha_{Z_{1:i-1}\to Z_{ i}})+\log(1+\alpha_{Z_{1:i-1}\to Z_{i}})).\end{split}\] (5)

Hence, we can turn to minimize the upper bound of Equation (4). It appears that in the optimization objective, \(\alpha_{Z_{1:i-1}\to Z_{i}}\) serves as a factor to control the weights of different tasks, which mitigates the loss of prior information and thus compensates for the lost prior knowledge. The Lemma 3.2 indicates that the largest difference between \(-\log P(Z_{1:k};\bm{\theta})\) and the upper bound \(UB\) would not exceed \(\log(\nicefrac{{3}}{{2}})*(k-1)\) when \(P(Z_{i}|\hat{Z}_{1:i-1};\bm{\theta})\geq\nicefrac{{1}}{{2}},i\in\{2,3,\cdots,k\}\).

Lemma 3.1.For \(0\leq a\leq 1-b\) and \(0<b\leq 1\), the inequality \(-\log(a+b)\leq(1-a)(-\log b)+(1-a)\log(1-a)+\log(1+a)\) holds. The equality holds if and only if \(a=0\).

Lemma 3.2.The absolute difference between the target objective (Equation (4)) and the upper bound (Equation (5)) is not larger than \(\log(\nicefrac{{3}}{{2}})*(k-1)\) when \(P(Z_{i}|\hat{Z}_{1:i-1};\bm{\theta})\geq\nicefrac{{1}}{{2}},i\in\{2,3,\cdots,k\}\). This bound is achieved when \(P(Z_{k}|\hat{Z}_{1:k-1};\bm{\theta})=\nicefrac{{1}}{{2}}\) and \(\alpha_{Z_{1:i-1}\to Z_{i}}=\nicefrac{{1}}{{2}},i\in\{2,3,\cdots,k\}\).

Due to the space limitation, we present the proofs of Lemma 3.1 and 3.2 in the appendix.

An intuitive explanation.Figure 3 illustrates the comparison between the term \(-\log(P(Z_{k}|\hat{Z}_{1:k-1};\bm{\theta})+\alpha_{Z_{1:k-1}\to Z_{k}})\) in the actual optimization objective, the term \(-\log P(Z_{k}|\hat{Z}_{1:k-1};\bm{\theta})\) in the naive optimization objective merely leveraging multi-stage training strategy, and the corresponding approximate term in our optimization objective. It can be observed that our approximation method has a smaller difference from the actual optimization objective compared to the naive method. This is important as a more reasonable objective function can improve the accuracy of the optimization process. When the prior compensation factor \(\alpha_{Z_{1:k-1}\to Z_{k}}\) is zero, which means \(P(Z_{k}|Z_{1:k-1};\bm{\theta})=P(Z_{k}|\hat{Z}_{1:k-1};\bm{\theta})\), the prior prediction information from previous tasks \(Z_{1:k-1}\) is not lost. As the value of \(\alpha\) increases, the discrepancy between the actual objective \(P(Z_{k}|Z_{1:k-1};\bm{\theta})\) and the objective of the naive method \(P(Z_{k}|\hat{Z}_{1:k-1};\bm{\theta})\) becomes more evident, indicating a greater degree of forgetting prior knowledge. In contrast, our approach narrows this gap by effectively mitigating the loss of prior information obtained from tasks \(Z_{1:k-1}\).

### Optimization Strategy

We train the model in a multi-stage manner, in which an initial stage and \(K-1\) TCL stages are involved. The initial stage \(S_{1}\) aims to forecast the motion in the foremost segment, while each TCL stage \(S_{k},k\in\{2,3,\cdots,K\}\) performs prediction for segments \(Z_{1:k}\) and simultaneously trains\(\alpha_{Z_{1:k-1}\to Z_{k}}\). Once the stage \(S_{k}\) is completely trained, we then estimate the factors \(\hat{\alpha}_{Z_{1:k-1}\to Z_{k}}\) which would be used in the optimization of the following stages. This process is repeated until the final stage \(S_{K}\) is reached.

Learning of initial stage \(S_{1}\).Following the implementations of previous methods [19], we can train the initial stage \(Z_{1}\) with Mean Suqared Error (MSE) loss:

\[\mathcal{L}_{1}=\sum_{i=T_{h}+1}^{T_{Z_{1}}}\left\|\mathbf{X}_{i}-\hat{\mathbf{ X}}_{i}\right\|^{2}\] (6)

where \(\mathbf{X}_{i}\) and \(\hat{\mathbf{X}}_{i}\) represent the ground truth and predicted motion of the \(i\)-th frames respectively.

Temporal Continual Learning at stage \(S_{k}\).In stage \(S_{k}\) (\(k\geq 2\)), we need to update the model parameters \(\boldsymbol{\theta}\) corresponding to tasks \(Z_{1:k}\) and the PCF \(\alpha_{Z_{1:k-1}\to Z_{k}}\). According to Equation (5), the loss function in this stage can be calculated as follows:

\[\begin{split}\mathcal{L}_{k}=&(1-\alpha_{Z_{1:k-1} \to Z_{k}})\sum_{i=T_{Z_{k-1}}+1}^{T_{Z_{k}}}\left\|\mathbf{X}_{i}-\hat{ \mathbf{X}}_{i}\right\|^{2}+(1-\alpha_{Z_{1:k-1}\to Z_{k}})\log(1- \alpha_{Z_{1:k-1}\to Z_{k}})\\ &+\log(1+\alpha_{Z_{1:k-1}\to Z_{k}})+\sum_{j=2}^{k-1}(1-\hat{ \alpha}_{Z_{1:j-1}\to Z_{j}})\sum_{i=T_{Z_{j-1}}+1}^{T_{Z_{j}}}\left\| \mathbf{X}_{i}-\hat{\mathbf{X}}_{i}\right\|^{2}+\mathcal{L}_{1}\end{split}\] (7)

where the parameters \(\hat{\alpha}_{Z_{1}\to Z_{2}},\cdots,\hat{\alpha}_{Z_{1:k-2}\to Z_{k-1}}\) are determined in the learning of previous stages. Once the model parameters for stage \(S_{k}\) are determined, we then calculate \(\hat{\alpha}_{Z_{1:k-1}\to Z_{k}}\) as:

\[\hat{\alpha}_{Z_{1:k-1}\to Z_{k}}=\frac{1}{M}\sum_{m=1}^{M}\hat{\alpha}_{Z_{1: k-1}\to Z_{k}}^{m}\] (8)

where \(M\) represents number of samples and \(\hat{\alpha}_{Z_{1:k-1}\to Z_{k}}^{m}\) is PCF estimated for the \(m\)-th sample.

We continue the TCL training process by predicting stage \(S_{k+1}\) and updating the model parameter \(\boldsymbol{\theta}\) as well as PCF \(\alpha_{Z_{1:k}\to Z_{k+1}}\). We repeat this TCL process until we reach the final stage \(S_{K}\). In practice, we require the backbone model to output an extra dimension and pass it through an MLP head to obtain \(\alpha\). The algorithm flow is summarized in Algorithm 1.

Figure 3: A toy example illustrating the optimization objectives. Our approximate optimization objective is closer to the actual objective compared to the naive optimization method.

## 4 Experiments

### Experimental Setup

We validate our framework on four benchmark datasets. Human3.6M[17] is a large dataset that contains 3.6 million 3D human pose data. 15 types of actions performed by 7 actors(S1, S5, S6, S7, S8, S9 and S11) are included in this dataset. Each actor is represented by a skeleton of 32 joints. However, following the data preprocessing method proposed in [28; 31], we only use 22 joints. The global rotations and translations of poses are removed, and the frame rate is downsampled from 50 fps to 25 fps. For testing and validation, we use actors S5 and S11, while training is conducted on the remaining sections of the dataset. CMU-MoCap is a smaller dataset that has 8 different action categories. The global rotations and translations of the poses are also removed. Each pose contains 38 joints, but following the data preprocessing methods in [28; 31], we only use 25 joints. 3DPW[44] is a challenging dataset that contains human motion data captured from both indoor and outdoor scenes. Poses in this dataset are represented in 3D space, with each pose containing 26 joints. However, only 23 of these joints are used, as the other three are redundant. The Archive of Motion Capture as Surface Shapes (AMASS)[29] dataset gathers 18 existing mocap datasets. Following [39], we select 13 from those and take 8 for training, 4 for validation and 1 (BMLrub) as the test set. We consider forecasting the body joints only and discard those 4 static ones, leading to an 18-joint human pose.

Following the benchmark protocols, we use the Mean Per Joint Position Error (MPJPE) in millimeters (ms) as our evaluation metric for 3D coordinate errors and Euler Angle Error (EAE) for Euler angle representations. The performance is better if this metric is smaller.

Implementation Details.Following [28; 30; 39], we set the input length to 10 frames and the predictive output to 25 frames for Human3.6M, AMASS and CMU-Mocap datasets, respectively. For the 3DPW dataset, we predict 30 frames conditioned on the observation of the preceding 10 frames. We choose PGBIG as our backbone model by default. In order to learn the PCF, we add an extra dimension to the output of the backbone model and calculate PCF through an MLP network whose hidden dimension is set to 512. We partitioned the future sequences into three segments with lengths of 3, 9, and 13. The training process was conducted on an NVIDIA RTX 3090 GPU for 120 epochs, allocating 50, 90, and 120 epochs for each respective stage.

[MISSING_PAGE_FAIL:8]

the preservation of prior information, resulting in the forgetting of prior knowledge. Here, we utilize \(\alpha\) to mitigate the loss of prior information, thereby improving the overall training of the model.

### Ablation Studies

We conduct several ablation experiments to further verify the effectiveness of our proposed framework.

Evaluation on the number of tasks.As shown in Table 3, the model's performance improves as the number of tasks gets larger from 1 to 3, and it remains stable when the number of tasks becomes larger than 3.

Evaluation on different implementations.As Figure 6 shows, we compare the results of four different implementations. PGBIG is our baseline model. "w/o \(\alpha\)" means that we only divide the training process into several stages to train each task without using the PCF. "HC" represents using a hand-crafted coefficient that changes its values similar to our PCF at each epoch. Specifically, in stage \(S_{1}\), the value of \(\alpha\) is set to 1. In stage \(S_{2}\), \(\alpha\) is initially set to 0.1 and increased by 0.05 at each epoch until reaching 0.5, where it remains constant. The same pattern applies to stage \(S_{3}\). In each subfigure, we show the results of \(Z_{k}\) on the validation set which is obtained at stage \(S_{k}\).

Figure 4: Some visualization results on Human3.6M dataset.

Figure 5: \(\alpha\) at different stages.

\begin{table}
\begin{tabular}{c|c c c c c} \hline number of tasks & 1 & 2 & 3 & 5 & 8 \\ \hline avg error & 66.95 & 66.02 & 65.00 & 65.05 & 65.03 \\ \hline \end{tabular}
\end{table}
Table 3: The average error of different numbers of tasks.

In stage \(S_{1}\), where no prior information is available, the results of "w/o \(\alpha\)", "HC", and "Ours" are identical, but superior to the baseline. This validates the effectiveness of decomposing multiple-moment predictions, as it alleviates the constraint of long-term predictions on short-term predictions and enhances the model's ability to learn short-term predictions. In the following stages, the performance of "w/o \(\alpha\)" is worse than "Ours", which indicates that the prior knowledge exploited by our framework benefits the prediction model training. Moreover, as the training period progressed, the performance gap becomes larger. However, the method without \(\alpha\) can still achieve better performance than "PGBIG", indicating that training model in a multi-stage manner can also exploit some useful prior information for prediction. We also note that the performance of "Ours" is much better than "HC", which conducts temporal continual learning with fixed and manually defined PCF. It demonstrates that joint training PCF and model parameters is beneficial.

The forgetting of prior knowledge.As shown in Table 4, introducing the prior compensation factor alleviates the performance degradation from stage \(S_{1}\) to stage \(S_{3}\) of task \(Z_{1}\)'s predictions. Specifically, without PCF, the prediction error of \(Z_{1}\) increases by 0.83, whereas with PCF, it only increases by 0.27. This result suggests that PCF can effectively alleviate the forgetting issue. As a result, \(Z_{1}\) can offer more comprehensive priors for \(Z_{2}\) and \(Z_{3}\) predictions, resulting in better prediction performance.

## 5 Conclusion

In this paper, we introduced the temporal continual learning framework for addressing the challenges in human motion prediction. Our framework addresses the constraint between long-term and short-term prediction, allowing for better utilization of prior knowledge from short-term prediction to enhance the performance of long-term prediction. Additionally, we introduced the prior compensation factor to mitigate the issue of forgetting information. Extensive experiments demonstrated our framework's effectiveness and flexibility.

Limitation.Our proposed training framework may slightly increase training time. However, the testing time remains unchanged compared to the backbone model.

Broader Impact.We believe our work has value for not only human motion prediction but also for more general prediction tasks and backbone models [41, 24, 16, 34]. This has benefits in various areas such as security monitoring, robotics, and autonomous driving.

\begin{table}

\end{table}
Table 4: The average error of different tasks at the end of each stage. \(Z_{i}\) represents task \(i\).

Figure 6: Comparison of different approaches. PGBIG is a baseline model that is trained without multi-stage. “w/o \(\alpha\)” represents training multi-stage process without PCF. “HC” means using a hand-designed coefficient. “Ours” is a multi-stage training process with PCF.

## Acknowledgments and Disclosure of Funding

This work was supported partially by the NSFC (U21A20471, U22A2095, 62076260, 61772570), Guangdong Natural Science Funds Project (2020B1515120085, 2023B1515040025), Guangdong NSF for Distinguished Young Scholar (2022B1515020009), and Guangzhou Science and Technology Plan Project (202201011134).

## References

* [1] E. Aksan, M. Kaufmann, P. Cao, and O. Hilliges. A spatio-temporal transformer for 3d human motion prediction. In _2021 International Conference on 3D Vision (3DV)_, pages 565-574. IEEE, 2021.
* [2] E. Aksan, M. Kaufmann, and O. Hilliges. Structured prediction helps 3d human motion modelling. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 7144-7153, 2019.
* [3] A. Bouazizi, A. Holzbock, U. Kressel, K. Dietmayer, and V. Belagiannis. Motionmixer: Mlp-based 3d human body pose forecasting. _arXiv preprint arXiv:2207.00499_, 2022.
* [4] H.-k. Chiu, E. Adeli, B. Wang, D.-A. Huang, and J. C. Niebles. Action-agnostic human pose forecasting. In _2019 IEEE Winter Conference on Applications of Computer Vision (WACV)_, pages 1423-1432. IEEE, 2019.
* [5] E. Corona, A. Pumarola, G. Alenya, and F. Moreno-Noguer. Context-aware human motion prediction. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 6992-7001, 2020.
* [6] Q. Cui and H. Sun. Towards accurate 3d human motion prediction from incomplete observations. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 4801-4810, 2021.
* [7] Q. Cui, H. Sun, and F. Yang. Learning dynamic relationships for 3d human motion prediction. In _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pages 6519-6527, 2020.
* [8] K. Fragkiadaki, S. Levine, P. Felsen, and J. Malik. Recurrent network models for human dynamics. In _Proceedings of the IEEE international conference on computer vision_, pages 4346-4354, 2015.
* [9] P. Ghosh, J. Song, E. Aksan, and O. Hilliges. Learning human motion models for long-term predictions. In _2017 International Conference on 3D Vision (3DV)_, pages 458-466. IEEE, 2017.
* [10] A. Gopalakrishnan, A. Mali, D. Kifer, L. Giles, and A. G. Ororbia. A neural temporal model for human motion prediction. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 12116-12125, 2019.
* [11] L.-Y. Gui, Y.-X. Wang, X. Liang, and J. M. Moura. Adversarial geometry-aware human motion prediction. In _Proceedings of the european conference on computer vision (ECCV)_, pages 786-803, 2018.
* [12] L.-Y. Gui, Y.-X. Wang, D. Ramanan, and J. M. Moura. Few-shot human motion prediction via meta-learning. In _Proceedings of the European Conference on Computer Vision (ECCV)_, pages 432-450, 2018.
* [13] W. Guo, Y. Du, X. Shen, V. Lepetit, X. Alameda-Pineda, and F. Moreno-Noguer. Back to mlp: A simple baseline for human motion prediction. In _Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision_, pages 4809-4819, 2023.
* [14] X. Guo and J. Choi. Human motion prediction via learning local structure representations and temporal dependencies. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 33, pages 2580-2587, 2019.

* [15] S. Hochreiter and J. Schmidhuber. Long short-term memory. _Neural computation_, 9(8):1735-1780, 1997.
* [16] J.-F. Hu, J. Sun, Z. Lin, J.-H. Lai, W. Zeng, and W.-S. Zheng. Apanet: Auto-path aggregation for future instance segmentation prediction. _IEEE Transactions on Pattern Analysis and Machine Intelligence_, 44(7):3386-3403, 2021.
* [17] C. Ionescu, D. Papava, V. Olaru, and C. Sminchisescu. Human3. 6m: Large scale datasets and predictive methods for 3d human sensing in natural environments. _IEEE transactions on pattern analysis and machine intelligence_, 36(7):1325-1339, 2013.
* [18] A. Jain, A. R. Zamir, S. Savarese, and A. Saxena. Structural-rnn: Deep learning on spatio-temporal graphs. In _Proceedings of the ieee conference on computer vision and pattern recognition_, pages 5308-5317, 2016.
* [19] A. Kendall, Y. Gal, and R. Cipolla. Multi-task learning using uncertainty to weigh losses for scene geometry and semantics. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 7482-7491, 2018.
* [20] J. Kirkpatrick, R. Pascanu, N. Rabinowitz, J. Veness, G. Desjardins, A. A. Rusu, K. Milan, J. Quan, T. Ramalho, A. Grabska-Barwinska, et al. Overcoming catastrophic forgetting in neural networks. _Proceedings of the national academy of sciences_, 114(13):3521-3526, 2017.
* [21] T. Lebailly, S. Kiciroglu, M. Salzmann, P. Fua, and W. Wang. Motion prediction using temporal inception module. In _Proceedings of the Asian Conference on Computer Vision_, 2020.
* [22] M. Li, S. Chen, X. Chen, Y. Zhang, Y. Wang, and Q. Tian. Symbiotic graph neural networks for 3d skeleton-based human action recognition and motion prediction. _IEEE Transactions on Pattern Analysis and Machine Intelligence_, 44(6):3316-3333, 2021.
* [23] M. Li, S. Chen, Y. Zhao, Y. Zhang, Y. Wang, and Q. Tian. Dynamic multiscale graph neural networks for 3d skeleton based human motion prediction. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 214-223, 2020.
* [24] Z. Lin, J. Sun, J.-F. Hu, Q. Yu, J.-H. Lai, and W.-S. Zheng. Predictive feature learning for future segmentation prediction. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 7365-7374, 2021.
* [25] J. Liu and J. Yin. Multi-grained trajectory graph convolutional networks for habit-unrelated human motion prediction. _arXiv preprint arXiv:2012.12558_, 2020.
* [26] Z. Liu, S. Wu, S. Jin, Q. Liu, S. Lu, R. Zimmermann, and L. Cheng. Towards natural and accurate future motion prediction of humans and animals. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 10004-10012, 2019.
* [27] T. Lucas, F. Baradel, P. Weinzaepfel, and G. Rogez. Posegpt: Quantization-based 3d human motion generation and forecasting. In _European Conference on Computer Vision_, pages 417-435. Springer, 2022.
* [28] T. Ma, Y. Nie, C. Long, Q. Zhang, and G. Li. Progressively generating better initial guesses towards next stages for high-quality human motion prediction. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 6437-6446, 2022.
* [29] N. Mahmood, N. Ghorbani, N. F. Troje, G. Pons-Moll, and M. J. Black. Amass: Archive of motion capture as surface shapes. In _Proceedings of the IEEE/CVF international conference on computer vision_, pages 5442-5451, 2019.
* [30] W. Mao, M. Liu, and M. Salzmann. History repeats itself: Human motion prediction via motion attention. In _European Conference on Computer Vision_, pages 474-489. Springer, 2020.
* [31] W. Mao, M. Liu, M. Salzmann, and H. Li. Learning trajectory dependencies for human motion prediction. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 9489-9497, 2019.

* [32] J. Martinez, M. J. Black, and J. Romero. On human motion prediction using recurrent neural networks. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 2891-2900, 2017.
* [33] A. Martinez-Gonzalez, M. Villamizar, and J.-M. Odobez. Pose transformers (potr): Human motion prediction with non-autoregressive transformers. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 2276-2284, 2021.
* [34] A. Mohamed, K. Qian, M. Elhoseiny, and C. Claudel. Social-stgcnn: A social spatio-temporal graph convolutional neural network for human trajectory prediction. In _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pages 14424-14432, 2020.
* [35] A. Radford, K. Narasimhan, T. Salimans, I. Sutskever, et al. Improving language understanding by generative pre-training. 2018.
* [36] M. B. Ring. Child: A first step towards continual learning. _Machine Learning_, 28(1):77-104, 1997.
* [37] H.-F. Sang, Z.-Z. Chen, and D.-K. He. Human motion prediction based on attention mechanism. _Multimedia Tools and Applications_, 79(9):5529-5544, 2020.
* [38] H. Shin, J. K. Lee, J. Kim, and J. Kim. Continual learning with deep generative replay. _Advances in neural information processing systems_, 30, 2017.
* [39] T. Sofianos, A. Sampieri, L. Franco, and F. Galasso. Space-time-separable graph convolutional network for pose forecasting. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 11209-11218, 2021.
* [40] J. Sun, Z. Lin, X. Han, J.-F. Hu, J. Xu, and W.-S. Zheng. Action-guided 3d human motion prediction. _Advances in Neural Information Processing Systems_, 34:30169-30180, 2021.
* [41] J. Sun, J. Xie, J.-F. Hu, Z. Lin, J. Lai, W. Zeng, and W.-s. Zheng. Predicting future instance segmentation with contextual pyramid convlstms. In _Proceedings of the 27th acm international conference on multimedia_, pages 2043-2051, 2019.
* [42] J. Tang, J. Wang, and J.-F. Hu. Predicting human poses via recurrent attention network. _Visual Intelligence_, 1(1):18, Aug 2023.
* [43] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and I. Polosukhin. Attention is all you need. _Advances in neural information processing systems_, 30, 2017.
* [44] T. Von Marcard, R. Henschel, M. J. Black, B. Rosenhahn, and G. Pons-Moll. Recovering accurate 3d human pose in the wild using imus and a moving camera. In _Proceedings of the European conference on computer vision (ECCV)_, pages 601-617, 2018.
* [45] S. Xu, Y.-X. Wang, and L.-Y. Gui. Diverse human motion prediction guided by multi-level spatial-temporal anchors. In _European Conference on Computer Vision_, pages 251-269. Springer, 2022.