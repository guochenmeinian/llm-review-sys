# DDK: Distilling Domain Knowledge for Efficient

Large Language Models

 Jiaheng Liu\({}^{\dagger,1}\), Chenchen Zhang*, Jinyang Guo\({}^{3}\), Yuanxing Zhang\({}^{2}\), Haoran Que\({}^{1}\),

**Ken Deng**\({}^{1}\), **Zhiqi Bai**\({}^{1}\), Jie Liu\({}^{4}\), Ge Zhang\({}^{5}\), Jiakai Wang\({}^{2}\), Yanan Wu\({}^{1}\), **Congnan Liu\({}^{1}\),

**Jiaming Wang**\({}^{2}\), **Lin Qu**\({}^{2}\), **Wenbo Su**\({}^{1}\), **Bo Zheng**\({}^{1}\)

\({}^{1}\)Taobao & Tmall Group of Alibaba, \({}^{2}\)Alibaba Group, \({}^{3}\)The University of Sydney,

\({}^{4}\)The Chinese University of Hong Kong, \({}^{5}\)University of Waterloo

{ljh411989}@alibaba-inc.com

* First two authors contributed equally.

###### Abstract

Despite the advanced intelligence abilities of large language models (LLMs) in various applications, they still face significant computational and storage demands. Knowledge Distillation (KD) has emerged as an effective strategy to improve the performance of a smaller LLM (i.e., the student model) by transferring knowledge from a high-performing LLM (i.e., the teacher model). Prevailing techniques in LLM distillation typically use a black-box model API to generate high-quality pretrained and aligned datasets, or utilize white-box distillation by altering the loss function to better transfer knowledge from the teacher LLM. However, these methods ignore the knowledge differences between the student and teacher LLMs across domains. This results in excessive focus on domains with minimal performance gaps and insufficient attention to domains with large gaps, reducing overall performance. In this paper, we introduce a new LLM distillation framework called DDK, which dynamically adjusts the composition of the distillation dataset in a smooth manner according to the domain performance differences between the teacher and student models, making the distillation process more stable and effective. Extensive evaluations show that DDK significantly improves the performance of student models, outperforming both continuously pretrained baselines and existing knowledge distillation methods by a large margin.

## 1 Introduction

Recent advancements in Large Language Models (LLMs) such as LLaMA [7; 9; 58; 59] have garnered significant attention due to their strong intelligence. However, these models also impose considerable computational and storage demands, particularly in practical deployments such as instant chat, copilot, and query rewriting. Consequently, the development of lightweight yet efficacious LLMs suitable for real-world applications has become an area of increasing research interest. Several small-scale LLMs, e.g., Phi [39] and MiniCPM [32], have been designed to facilitate rapid inference on devices with limited resources. These models are generally trained from scratch using a large volume of selectively curated high-quality datasets, which could be prohibitive for the broader research community. Meanwhile, there has been a surge in the exploration of model compression techniques [40] to reduce the resource footprint of LLMs. Apart from these techniques, knowledge distillation (KD) emerges as a prominent method for creating effective neural networks, which transfer knowledge from a high-performing teacher model to a compact student model.

The primary challenges in enhancing the performance of KD approaches on LLMs stem from two main aspects: i) appropriately utilizing the data [3; 67]; ii) stabilize the distillation process [68]. Recently, it has become increasingly acknowledged that the mixture ratios of various domains within the training dataset substantially affect the performance [20; 67; 69]. Regarding the issue of data composition, the influence of domain-specific mixtures for KD remains underexplored. As shown in Fig. 1, the performance between Qwen-1.5 1.8B [7] (student) and Qwen-1.5 14B [7] (teacher) reveals that the performance gap varies significantly across domains. For instance, in the "Books" domain, the student model significantly underperforms the teacher model, while in "The Stack" domain, the difference is minimal, which indicates that the "Books" domain is relatively not optimized well for the student model compared to the teacher model, and more data from the "Books" domain should be included. Therefore, we aim to design a knowledge distillation framework that can dynamically adjust the data composition during distillation to reallocate more computation to domains, where the student and teacher models have larger performance gaps.

In this paper, we introduce a novel methodology, termed **D**istill **D**omain **K**nowledge for LLMs (DDK), which effectively optimizes domain-specific mixtures to address the performance discrepancy between teacher and student models across different domains. Specifically, DDK begins by quantifying the performance deviations between the teacher and student LLMs using an offline-collected validation dataset across various domains. Next, it periodically re-calculates the domain discrepancy factor based on the performance gap between the teacher and student models. Finally, DDK employs a domain knowledge-guided sampling strategy to sample data from different domains with varying probabilities based on the calculated domain discrepancy factor. Additionally, inspired by the optimization algorithms [36], we propose a factor smooth updating mechanism to augment the stability and robustness of the DDK approach. For the supervision loss, we minimize the differences in the output logits between the teacher and student models. As demonstrated in Fig. 1, the performance gap across domains is significantly reduced by DDK.

Our main contributions are summarized as follows:

* To the best of our knowledge, we are the first to study the influence of domain-specific data mixtures for distilling LLMs, and efficiently transfer the domain knowledge of the teacher network upon the domain weights.
* DDK proposes a factor smooth updating strategy to strategically enhance the appropriate focus of the distillation process on targeted domains, which effectively stabilizes the domain knowledge guided sampling process for smoother distillation.
* Extensive experiments on multiple benchmark datasets demonstrate the effectiveness and generalization ability of our proposed DDK.

## 2 Related Works

**Large Language Models.** The emergence of LLMs [62; 72; 24; 41; 19; 65; 49; 53; 27; 6; 66] marks a significant milestone in the domain of natural language processing, with notable examples including GPT3, Lamda, Palm, and several others [2; 4; 10; 44; 57]. For example, Radford and Narasimhan

Figure 1: The perplexity scores of different methods across different domains for different methods (See Section 4 for more details.). Note that “Chinese CC” denotes “Chinese CommonCrawl”.

[50] introduced the GPT model, leveraging multiple layers of transformer decoder blocks, while Meta later developed LLaMA [58] employing an enhanced transformer architecture, subsequently evolved into LLaMA2 [59]. Recent advancements have also seen the application of instruction tuning [13; 63] and learning through human feedback [8; 45; 74] to better align LLMs with human understanding and foster the creation of versatile AI assistants [21; 43]. Despite their potential, LLMs' extensive capabilities are often accompanied by vast sizes [35; 64], demanding significant computational resources. In this work, we aim to focus on how to produce small LLMs based on the knowledge distillation approach.

**Knowledge Distillation**. Knowledge distillation is a pivotal technique in model compression and acceleration [61; 42; 26; 70; 25], primarily employed to transfer knowledge from a robust, well-trained teacher model to a compact student model [29; 1; 37]. Recently, several approaches to knowledge distillation tailored for LLMs have been proposed. These approaches can be broadly classified into two categories: _White-box KD_ leverages either the internal parameters or the logits of the teacher LLM during the distillation process [22; 46; 56; 71]. For example, Gu et al. [23] propose that traditional Kullback-Leibler divergence (KLD) objective is inappropriate for open text generation tasks and propose MiniLLM to minimize reverse KLD through policy gradient techniques [54]. Conversely, _black-box KD_ relies solely on the outputs from the teacher model [12; 30; 34; 48; 60]. For example, "Distilling Step-by-Step" strategy [31] employs Chain of Thought (CoT) prompting to provide sophisticated guidance during distillation. These two types of KD approaches mainly focus on aligning the generative behaviors of the teacher and student models. DDK delves into the efficacies of domain-specific distillation, aiming to mitigate the discrepancies in performance between the teacher and student model across different domains. Hence, DDK is fundamentally orthogonal to these methods.

## 3 Methodology

### Overview

Figure 2 illustrates the comprehensive architecture of the DDK framework. DDK employs a large-scale teacher LLM and a comparatively smaller student LLM, with the objective of transferring knowledge from the former to the latter to enhance performance utilizing a specially curated distillation dataset. Initially, the distillation dataset is constructed by randomly sampling from the training corpus. Throughout the distillation process, we continuously assess the domain-specific performance of both the teacher and student LLMs, and use domain knowledge guided sampling to dynamically update the data mixture on the student's abilities within specific domains. As the domain proficiency of the student LLM evolves during distillation, we introduce a factor smooth updating strategy to ensure the robustness of the domain knowledge-guided sampling approach. Finally, DDK provides of a better student LLM, optimized for enhanced performance across targeted domains.

### Domain Knowledge Guided Sampling

The distilled student LLMs are anticipated to exhibit robust competence across various preset domains. Nevertheless, prevailing knowledge distillation techniques tailored for LLMs tend to homogeneously optimize performance across these domains, leading to potential performance degradation. To address this issue, we design the domain knowledge guided sampling strategy to enhance distillation efficacy by prioritizing domain-specific complexities.

**Domain discrepancy factor construction.** We consider a dataset \(\mathcal{D}\) that has been partitioned into \(N\) distinct domains. We denote the pre-trained teacher LLM as \(\mathcal{M}_{\text{T}}\) and the student model, which is currently under training, as \(\mathcal{M}_{\text{S}}\). To efficiently identify and prioritize data that may yield the most learning benefit, particularly from domains where the student model underperforms, we introduce a _domain discrepancy factor_ denoted as \(\mathbf{r}\in\mathbb{R}^{N}\). Each component \(\mathbf{r}[i]\) of this vector quantitatively represents the discrepancy in performance between the teacher and student models within the \(i\)-th domain. As we assume a good student should exhibit close approximation to the teacher across all domains, \(\mathbf{r}\) is calibrated to reflect differential performance indices as follows:

\[\mathbf{r}[i]=\exp(\ell_{\text{S}}[i]/\ell_{\text{T}}[i])/\sum_{i^{\prime}\in \{1,\dots,N\}}\exp(\ell_{\text{S}}[i^{\prime}]/\ell_{\text{T}}[i^{\prime}])\] (1)

where \(\ell_{\text{S}}[i]= \exp(\operatorname{CE}(\mathcal{M}_{\text{S}}(V_{i}),Y_{i}))\) and \(\ell_{\text{T}}[i]=\exp(\operatorname{CE}(\mathcal{M}_{\text{T}}(V_{i}),Y_{i}))\).

Here, \(V_{i}\) and \(Y_{i}\) are the inputs and the ground-truth labels of the validation dataset of the \(i\)th domain. \(\text{CE}(\cdot)\) represents the cross-entropy loss. \(\ell_{\text{S}}\in\mathbb{R}^{N}\) and \(\ell_{\text{T}}\in\mathbb{R}^{N}\) are the perplexity scores over the validation sets of all domains for student and teacher respectively, indexed by the domain index \(i\). In this case, a higher value of \(\mathbf{r}[i]\) signifies a pronounced disparity in domain-specific proficiency between the student model and the teacher model. Accordingly, it is imperative to allocate more relevant data to enhance the domain expertise.

**Domain knowledge guided sampling.** We employ a domain knowledge-informed sampling strategy to refine the composition of the distillation dataset, which utilizes a probabilistic mechanism defined by vector \(\mathbf{r}\) to iteratively select samples from the training corpus. The process continues cyclically once a domain data has been exhausted. Finally, DDK strategically increases the data allocation towards underperforming domains, thereby mitigating the performance discrepancies between the teacher and student models across all domains.

### Factor Smooth Updating

With the domain knowledge guided sampling strategy, we can dynamically focus on more challenging domains during the distillation process. Nonetheless, we observe that the domain discrepancy factor exhibits significant fluctuations throughout this procedure. Such rapid alterations may precipitate exceedingly unbalanced data sampling, potentially compromising the stability of the distillation.

**Factor smooth updating.** To enhance the stability of the distillation process, we periodically adjust the domain discrepancy factor every \(K\) iterations throughout the distillation process, thereby partitioning it into discrete intervals. The parameter \(K\) is pivotal as it governs the system's capacity to address immediate discrepancies and influences the stability of the data mixture. We denote the domain discrepancy factor for the \(i\)-th domain at the \(t\)-th interval of distillation as \(\mathbf{r}^{t}[i]\). Similarly, let \(\ell_{\text{S}}^{t}[i]\) and \(\ell_{\text{T}}^{t}[i]\) denote the perplexity scores at the beginning of the \(t\)-th distillation interval. In DDK, the domain discrepancy factor at the \((t+1)\)-th interval is defined as:

\[\begin{split}&\mathbf{r}^{t+1}[i]=\alpha\frac{\bm{\psi}^{t+1}[i]}{ \sum_{i=1}^{N}\bm{\psi}^{t+1}[i]}+(1-\alpha)/N,\\ &\text{where }\bm{\psi}^{t+1}[i]=\mathbf{r}^{t}[i]\text{exp}(\ell_{ \text{S}}^{t+1}[i]/\ell_{\text{T}}^{t+1}[i]).\end{split}\] (2)

Note that a constant term is incorporated in \(\mathbf{r}^{t}[i]\) to preclude the occurrence of excessively small values, thereby guaranteeing a baseline probability for data sampling across various domains. The parameter \(\alpha\), designated as the smoothing coefficient, is fixed at a value of 0.5 in our experimental

Figure 2: Overview of the distillation process of DDK. First, the training dataset is divided into distinct domains based on predefined criteria. Then, DDK dynamically modulates the distribution of domain-specific data, augmenting the amount allocated to domains where the student model struggles the most. The proportions attributed to each domain are recalculated at distillation intervals by employing a factor smooth updating approach.

setup. In addition, the inclusion of \(\bm{\psi}^{t}\) imparts a history mixture information on the modification of the domain discrepancy factor. This mechanism facilitates a gradual modification of \(\mathbf{r}^{t}[i]\), thereby minimizing fluctuations and ensuring a stable, domain knowledge-driven distillation process for fetching informative data.

### Overall Optimization

As we jointly update the student LLM parameters and the domain discrepancy factor in the distillation process, the optimization object can be written as follows:

\[\min_{\theta_{\text{S}}}\sum_{i\in\{1,\dots,N\}}\text{CE}(\mathcal{M}_{\text{S }}(V_{i}),Y_{i})+\gamma\text{KL}(\mathrm{Softmax}(z_{\text{S}}(V_{i}),T), \mathrm{Softmax}(z_{\text{T}}(V_{i}),T)),\] (3)

where \(\theta_{\text{S}}\) is the parameters of the student model. \(z_{\text{S}}(\cdot)\) and \(z_{\text{T}}(\cdot)\) are the output hidden states from student and teacher LLMs, respectively. We leverage KL-divergence to approximate the student model's output to the teacher model's output, over a distillation temperature \(T\). \(\gamma\) is the factor to balance these two terms. Algorithm 1 summarizes the pseudo-code of the DDK process. In practice, the distillation process is typically concluded either when all available data has been fully utilized or when the domain discrepancy factor approaches a threshold indicative of minimal disparity between the teacher and student models.

```
0: Distillation dataset \(D\); The steps per distillation interval \(K\);
1: Initialize domain discrepancy factor \(\mathbf{r}^{0}\) based on Eq. 1;
2: Randomly sample \(D^{0}\subset D\) that supports \(K\) steps distillation;
3: Initialize student training iteration \(c=0\), distillation interval \(t=0\);
4:for each iteration in the training process do
5: // Update student LLM parameters
6: Read a batch of samples and use Eq. 3 to update the parameters of student LLM;
7:\(c=c+1\)
8:if\(c\) mod \(K\) == 0 then
9: // Update distillation data mixture
10: \(t=t+1\);
11: Use Eq. 2 to update domain discrepancy factor \(\mathbf{r}^{t}\);
12: Sample a dataset, \(D^{t}\subset D\), that supports \(K\) steps distillation according to \(\mathbf{r}^{t}\);
13: Shuffle \(D^{t}\);
14:if\(t\) reaches a preset maximal number of intervals then
15: Stop the distillation loop;
16: The distilled student LLM; ```

**Algorithm 1** Distillation procedure of the DDK framework.

## 4 Experiments

In this section, we make comprehensive evaluations to answer two research questions: **RQ1**: To what extent does the DDK process improve the performance of a small-scale LLM? **RQ2**: How does the dynamic domain-specific guidance contribute to the overall improvement?

### Experimental Setup

Model configuration details.We use the Qwen-1.5 [7] and LLaMA2 [59] to demonstrate the effectiveness of DDK. Regarding the Qwen-1.5 series, we use Qwen-1.5 14B and Qwen-1.5 1.8B as the teacher and student models, respectively. For LLaMA2 series, we use LLaMA2 13B and TinyLLaMA 1.1B [73] as the teacher and student models, respectively.

Training details.Due to the unavailability of training data for LLaMA2 and Qwen-1.5 models, we mainly utilize RedPajama [16] for distillation, which consists of training data derived from seven distinct domains: CommonCrawl, C4, The Stack, Wikipedia, Books, ArXiv, and StackExchange.

[MISSING_PAGE_FAIL:6]

### Main Results

As shown in Table 1-2, we report the performance results of different baseline methods. The following observations provide a comprehensive response to RQ1: (1) We see that the absence of knowledge transfer from the teacher model significantly impedes the student model's capabilities in intricate tasks such as coding (e.g., HumanEval) and Chinese comprehension (e.g., C3). (2) DDK outperforms other baseline methods when using different types of teacher and student models, which demonstrates the effectiveness of DDK for training small student LLMs. (3) The baseline methods KD, TED, and MiniLLM exhibit similar performance. For instance, the average accuracy of these three approaches hovers around 52% when distilling onto the Qwen student model. We hypothesize that in the context of LLM distillation, domain data mixture may emerge as a key performance bottleneck, and the existing baseline techniques fail to adequately address this challenge. (4) The performance gains vary across different domains. Notably, when distilling the Qwen model, we achieve significant improvements on the reasoning tasks (e.g., Code on Humaneval and MBPP, Math on GSM8K), which indicates that the student model can improve a lot on the reasoning tasks under the guidance of the teacher model. This empirical observation suggests that DDK is successful in directing additional attention toward the more challenging problem domains.

### Ablation Study

In this section, we perform ablation studies to assess the robustness of the DDK model and its sensitivity to key hyperparameters. We collected data using Qwen 1.5 and reported its performance on the validation sets of MMLU, RACE, and ARC-C, which differ from those discussed in the previous subsection. Initially, we concentrate on addressing RQ1 through fine-grained analyses.

**Effect of data sampling strategies.** We propose two variants of data sampling strategies on DDK. For DDK (w/o FS), we just remove the factor smooth updating mechanism and directly take \(\mathbf{r}^{t}\) as the probability of each domain. For DDK (ES), we sample data from each domain equally. The results are shown in Fig. 4, and we can suppose that both factor smooth updating and domain knowledge guided sampling contribute to the distillation owing to the existence of domain-specific discrepancy.

**Effect of distillation interval.** Fig. 3 (a) shows the evaluation results on the effect of the distillation interval hyperparameter (i.e., \(K\)) in Alg. 1. We observe that increasing \(K\) from 100 to 1,000 leads to better performance, indicating that a rapid updating frequency may destabilize the distillation process. However, further increasing \(K\) leads to inferior results. We conclude that when the updating

Figure 4: Effect of data sampling strategies.

Figure 3: (a). Effect of distillation interval. (b). Effect of the number of training tokens.

[MISSING_PAGE_FAIL:8]

**Visualization.** To better show the effectiveness of the factor smooth strategy in DDK, we compare the DDK (w/o FS) with our DDK by showing the domain discrepancy in the training process, where DDK (w/o FS) means that we remove the factor smooth updating strategy. Specifically, in Fig. 5, we compute the \((\ell_{\text{S}}[i]/\ell_{\text{T}}[i])\) as the ratio to represent the domain discrepancy for \(i\)-th domain, where a large ratio means a large discrepancy. As shown in Fig. 5, we observe that the ratio updates smoothly in DDK. Besides, in Table 4, the DDK is better than DDK (w/o FS), which means DDK can benefit a lot when using the factor smooth updating strategy.

Moreover, we refer readers to see Appendix B.2 and Appendix C for more details on the training costs and inference examples.

## 5 Conclusion

In this study, we introduce DDK, a novel framework for knowledge distillation tailored for LLMs. Our initial investigations underscore the criticality of optimizing domain data mixtures in the context of LLM distillation. To address this, we propose a domain knowledge-guided sampling approach that dynamically modulates the sampling probabilities across various domains. Furthermore, we put forward a factor smooth update strategy aimed at enhancing both the stability and the efficacy of the distillation process. Comprehensive evaluations of several benchmark datasets with diverse teacher-student model configurations demonstrate the effectiveness of the DDK framework.

\begin{table}
\begin{tabular}{l|c c c c c|c c} \hline \hline
**Methods** & **CEval** & **MMLU** & **GSM8K** & **Arc-E** & **Arc-C** & **Avg.** \\ \hline Qwen-14B & 79.86 & 66.30 & 69.14 & 89.24 & 82.25 & 77.36 \\ \hline Student (1.8B) & 61.96 & 45.59 & 38.4 & 72.16 & 52.11 & 54.04 \\ + CPT & 60.92 & 45.60 & 43.36 & 73.10 & 52.28 & 55.05 \\ + KD & 61.66 & 44.28 & 50.26 & 73.87 & 54.69 & 56.95 \\ + **DDK (Ours)** & 65.38 & 47.59 & 55.19 & 76.64 & 57.01 & **60.36** \\ \hline \hline \end{tabular}
\end{table}
Table 6: Few-shot (**5-shot**) performance results of different methods on the Qwen-1.5 models. Note that we use Qwen-1.5 14B and Qwen-1.5 1.8B as teacher and student models, respectively.

Figure 5: Visualization on the domain discrepancy among three domains.

\begin{table}
\begin{tabular}{l|c c|c c|c c|c c|c c} \hline \hline \multirow{2}{*}{**Methods**} & \multicolumn{2}{c|}{**Python**} & \multicolumn{2}{c|}{**JAVA**} & \multicolumn{2}{c|}{**TypeScript**} & \multicolumn{2}{c|}{**C\#**} & \multicolumn{2}{c}{**Avg.**} \\  & EM & ES & EM & ES & EM & ES & EM & ES & EM & ES \\ \hline Teacher (15.5B) & 35.9 & 66.1 & 41.5 & 72.9 & 38.7 & 73.7 & 56.3 & 79.3 & 43.1 & 73.0 \\ \hline Student (3B) & 20.8 & 41.5 & 25.3 & 51.4 & 25.7 & 56.2 & 40.5 & 60.5 & 28.1 & 52.4 \\ + CPT & 24.8 & 49.3 & 31.6 & 61.5 & 30.5 & 63.7 & 47.1 & 68.4 & 33.5 & 60.7 \\ + KD & 26.5 & 53.2 & 32.4 & 61.1 & 31.6 & 64.5 & 48.0 & 69.8 & 34.6 & 61.2 \\ **+ DDK (Ours)** & 31.7 & 62.2 & 34.6 & 69.8 & 33.2 & 69.3 & 50.9 & 76.2 & 37.6 & 69.4 \\ \hline \hline \end{tabular}
\end{table}
Table 5: Results of different methods on the StarCoder models. Note that we use StarCoder 15.5B and StarCoder 3B as teacher and student models, respectively.

## References

* Agarwal et al. [2024] R. Agarwal, N. Vieillard, Y. Zhou, P. Stanczyk, S. R. Garea, M. Geist, and O. Bachem. On-policy distillation of language models: Learning from self-generated mistakes. In _The Twelfth International Conference on Learning Representations_, 2024.
* Almazrouei et al. [2023] E. Almazrouei, H. Alobeidli, A. Alshamsi, A. Cappelli, R. Cojocaru, M. Debbah, E. Goffinet, D. Heslow, J. Launay, Q. Malartic, B. Noune, B. Pannier, and G. Penedo. Falcon-40B: an open large language model with state-of-the-art performance. 2023.
* Amos et al. [2024] I. Amos, J. Berant, and A. Gupta. Never train from scratch: Fair comparison of long-sequence models requires data-driven priors. In _The Twelfth International Conference on Learning Representations_, 2024. URL https://openreview.net/forum?id=PdaPky8MUn.
* Anil et al. [2023] R. Anil, A. M. Dai, O. Firat, M. Johnson, D. Lepikhin, A. Passos, S. Shakeri, E. Taropa, P. Bailey, Z. Chen, et al. Palm 2 technical report. _arXiv preprint arXiv:2305.10403_, 2023. URL https://arxiv.org/abs/2305.10403.
* Austin et al. [2021] J. Austin, A. Odena, M. Nye, M. Bosma, H. Michalewski, D. Dohan, E. Jiang, C. Cai, M. Terry, Q. Le, and C. Sutton. Program synthesis with large language models, 2021.
* Bai et al. [2024] G. Bai, J. Liu, X. Bu, Y. He, J. Liu, Z. Zhou, Z. Lin, W. Su, T. Ge, B. Zheng, and W. Ouyang. Mt-bench-101: A fine-grained benchmark for evaluating large language models in multi-turn dialogues. _arXiv_, 2024.
* Bai et al. [2023] J. Bai, S. Bai, Y. Chu, Z. Cui, K. Dang, X. Deng, Y. Fan, W. Ge, Y. Han, F. Huang, B. Hui, L. Ji, M. Li, J. Lin, R. Lin, D. Liu, G. Liu, C. Lu, K. Lu, J. Ma, R. Men, X. Ren, X. Ren, C. Tan, S. Tan, J. Tu, P. Wang, S. Wang, W. Wang, S. Wu, B. Xu, J. Xu, A. Yang, H. Yang, J. Yang, S. Yang, Y. Yao, B. Yu, H. Yuan, Z. Yuan, J. Zhang, X. Zhang, Y. Zhang, Z. Zhang, C. Zhou, J. Zhou, X. Zhou, and T. Zhu. Qwen technical report. _arXiv preprint arXiv:2309.16609_, 2023.
* Bai et al. [2022] Y. Bai, A. Jones, K. Ndousse, A. Askell, A. Chen, N. DasSarma, D. Drain, S. Fort, D. Ganguli, T. Henighan, et al. Training a helpful and harmless assistant with reinforcement learning from human feedback. _arXiv preprint arXiv:2204.05862_, 2022. URL https://arxiv.org/abs/2204.05862.
* Baichuan [2023] Baichuan. Baichuan 2: Open large-scale language models. _arXiv preprint arXiv:2309.10305_, 2023. URL https://arxiv.org/abs/2309.10305.
* Brown et al. [2020] T. Brown, B. Mann, N. Ryder, M. Subbiah, et al. Language models are few-shot learners. In _Proceedings of NeurIPS_, 2020. URL https://papers.nips.cc/paper/2020/hash/1457c0d6bfcb4967418bfb8ac142f64a-Abstract.html.
* Chen et al. [2021] M. Chen, J. Tworek, H. Jun, Q. Yuan, H. P. de Oliveira Pinto, J. Kaplan, H. Edwards, Y. Burda, N. Joseph, G. Brockman, A. Ray, R. Puri, G. Krueger, M. Petrov, H. Khlaaf, G. Sastry, P. Mishkin, B. Chan, S. Gray, N. Ryder, M. Pavlov, A. Power, L. Kaiser, M. Bavarian, C. Winter, P. Tillet, F. P. Such, D. Cummings, M. Plappert, F. Chantzis, E. Barnes, A. Herbert-Voss, W. H. Guss, A. Nichol, A. Paino, N. Tezak, J. Tang, I. Babuschkin, S. Balaji, S. Jain, W. Saunders, C. Hesse, A. N. Carr, J. Leike, J. Achiam, V. Misra, E. Morikawa, A. Radford, M. Knight, M. Brundage, M. Murati, K. Mayer, P. Welinder, B. McGrew, D. Amodei, S. McCandlish, I. Sutskever, and W. Zaremba. Evaluating large language models trained on code. 2021.
* Chen et al. [2023] Z. Chen, Q. Gao, A. Bosselut, A. Sabharwal, and K. Richardson. DISCO: Distilling counterfactuals with large language models. In A. Rogers, J. Boyd-Graber, and N. Okazaki, editors, _Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_, pages 5514-5528, Toronto, Canada, July 2023. Association for Computational Linguistics. doi: 10.18653/v1/2023.acl-long.302. URL https://aclanthology.org/2023.acl-long.302.
* Chung et al. [2022] H. W. Chung, L. Hou, S. Longpre, B. Zoph, Y. Tay, W. Fedus, E. Li, X. Wang, M. Dehghani, S. Brahma, et al. Scaling instruction-finetuned language models. _arXiv preprint arXiv:2210.11416_, 2022. URL https://arxiv.org/abs/2210.11416.

* Clark et al. [2018] P. Clark, I. Cowhey, O. Etzioni, T. Khot, A. Sabharwal, C. Schoenick, and O. Tafjord. Think you have solved question answering? try arc, the ai2 reasoning challenge. _arXiv preprint arXiv:1803.05457_, 2018.
* Cobbe et al. [2021] K. Cobbe, V. Kosaraju, M. Bavarian, M. Chen, H. Jun, L. Kaiser, M. Plappert, J. Tworek, J. Hilton, R. Nakano, C. Hesse, and J. Schulman. Training verifiers to solve math word problems. _arXiv preprint arXiv:2110.14168_, 2021.
* Computer [2023] T. Computer. Redpajama: an open dataset for training large language models, October 2023. URL https://github.com/togethercomputer/RedPajama-Data.
* Dao [2023] T. Dao. FlashAttention-2: Faster attention with better parallelism and work partitioning. 2023.
* 16, 2023_, 2023.
* Du et al. [2024] X. Du, Z. Yu, S. Gao, D. Pan, Y. Cheng, Z. Ma, R. Yuan, X. Qu, J. Liu, T. Zheng, X. Luo, G. Zhou, B. Yuan, W. Chen, J. Fu, and G. Zhang. Chinese tiny llm: Pretraining a chinese-centric large language model, 2024.
* Fan et al. [2023] S. Fan, M. Pagliardini, and M. Jaggi. DOGE: Domain reweighting with generalization estimation. In _Second Agent Learning in Open-Endedness Workshop_, 2023. URL https://openreview.net/forum?id=qiKqsqvYXm.
* Google [2023] Google. Bard, 2023. URL https://blog.google/technology/ai/bard-google-ai-search-updates/.
* Gou et al. [2021] J. Gou, B. Yu, S. J. Maybank, and D. Tao. Knowledge distillation: A survey. _International Journal of Computer Vision_, 129:1789-1819, 2021.
* Gu et al. [2024] Y. Gu, L. Dong, F. Wei, and M. Huang. Knowledge distillation of large language models, 2024.
* Guo et al. [2023] H. Guo, J. Yang, J. Liu, L. Yang, L. Chai, J. Bai, J. Peng, X. Hu, C. Chen, D. Zhang, et al. Owl: A large language model for it operations. _arXiv preprint arXiv:2309.09298_, 2023.
* Guo et al. [2021] J. Guo, J. Liu, and D. Xu. Jointpruning: Pruning networks along multiple dimensions for efficient point cloud processing. _IEEE Transactions on Circuits and Systems for Video Technology_, 2021.
* Guo et al. [2022] J. Guo, J. Liu, and D. Xu. 3d-pruning: A model compression framework for efficient 3d action recognition. _IEEE Transactions on Circuits and Systems for Video Technology_, 32(12):8717-8729, 2022.
* Guo et al. [2024] J. Guo, J. Wu, Z. Wang, J. Liu, G. Yang, Y. Ding, R. Gong, H. Qin, and X. Liu. Compressing large language models by joint sparsification and quantization. In _Proceedings of the 41st International Conference on Machine Learning_, pages 16945-16957, 2024.
* Hendrycks et al. [2020] D. Hendrycks, C. Burns, S. Basart, A. Zou, M. Mazeika, D. Song, and J. Steinhardt. Measuring massive multitask language understanding. _arXiv preprint arXiv:2009.03300_, 2020.
* Hinton et al. [2015] G. Hinton, O. Vinyals, and J. Dean. Distilling the knowledge in a neural network. _arXiv preprint arXiv:1503.02531_, 2015.
* Ho et al. [2023] N. Ho, L. Schmid, and S.-Y. Yun. Large language models are reasoning teachers. In A. Rogers, J. Boyd-Graber, and N. Okazaki, editors, _Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_, pages 14852-14882, Toronto, Canada, July 2023. Association for Computational Linguistics. doi: 10.18653/v1/2023.acl-long.830. URL https://aclanthology.org/2023.acl-long.830.

* Hsieh et al. [2023] C.-Y. Hsieh, C.-L. Li, C.-k. Yeh, H. Nakhost, Y. Fujii, A. Ratner, R. Krishna, C.-Y. Lee, and T. Pfister. Distilling step-by-step! outperforming larger language models with less training data and smaller model sizes. In A. Rogers, J. Boyd-Graber, and N. Okazaki, editors, _Findings of the Association for Computational Linguistics: ACL 2023_, pages 8003-8017, Toronto, Canada, July 2023. Association for Computational Linguistics. doi: 10.18653/v1/2023.findings-acl.507. URL https://aclanthology.org/2023.findings-acl.507.
* Hu et al. [2024] S. Hu, Y. Tu, X. Han, C. He, G. Cui, X. Long, Z. Zheng, Y. Fang, Y. Huang, W. Zhao, et al. Minicpm: Unveiling the potential of small language models with scalable training strategies. _arXiv preprint arXiv:2404.06395_, 2024.
* Huang et al. [2023] Y. Huang, Y. Bai, Z. Zhu, J. Zhang, J. Zhang, T. Su, J. Liu, C. Lv, Y. Zhang, J. Lei, Y. Fu, M. Sun, and J. He. C-eval: A multi-level multi-discipline chinese evaluation suite for foundation models. In _Advances in Neural Information Processing Systems_, 2023.
* Jiang et al. [2023] Y. Jiang, C. Chan, M. Chen, and W. Wang. Lion: Adversarial distillation of proprietary large language models, 2023.
* Kaplan et al. [2020] J. Kaplan, S. McCandlish, T. Henighan, T. B. Brown, B. Chess, R. Child, S. Gray, A. Radford, J. Wu, and D. Amodei. Scaling laws for neural language models. _arXiv preprint arXiv:2001.08361_, 2020. URL https://arxiv.org/abs/2001.08361.
* Kingma and Ba [2014] D. P. Kingma and J. Ba. Adam: A method for stochastic optimization. _arXiv preprint arXiv:1412.6980_, 2014.
* Ko et al. [2024] J. Ko, S. Kim, T. Chen, and S. Yun. Distillm: Towards streamlined distillation for large language models. _ArXiv_, abs/2402.03898, 2024.
* Lai et al. [2017] G. Lai, Q. Xie, H. Liu, Y. Yang, and E. Hovy. Race: Large-scale reading comprehension dataset from examinations. _arXiv preprint arXiv:1704.04683_, 2017.
* Li et al. [2023] Y. Li, S. Bubeck, R. Eldan, A. Del Giorno, S. Gunasekar, and Y. T. Lee. Textbooks are all you need ii: phi-1.5 technical report. _arXiv preprint arXiv:2309.05463_, 2023.
* Liang et al. [2023] C. Liang, S. Zuo, Q. Zhang, P. He, W. Chen, and T. Zhao. Less is more: Task-aware layer-wise distillation for language model compression. _ICML_, 2023.
* Liu et al. [2024] J. Liu, Z. Bai, Y. Zhang, C. Zhang, Y. Zhang, G. Zhang, J. Wang, H. Que, Y. Chen, W. Su, et al. E2-llm: Efficient and extreme length extension of large language models. _arXiv preprint arXiv:2401.06951_, 2024.
* Liu et al. [2024] J. Liu, J. Li, K. Wang, H. Guo, J. Yang, J. Peng, K. Xu, X. Liu, and J. Guo. Lta-pcs: Learnable task-agnostic point cloud sampling. In _CVPR_, 2024.
* OpenAI [2022] OpenAI. OpenAI: Introducing ChatGPT, 2022. URL https://openai.com/blog/chatgpt.
* OpenAI [2023] OpenAI. GPT-4 technical report, 2023. URL https://cdn.openai.com/papers/gpt-4.pdf.
* Ouyang et al. [2022] L. Ouyang, J. Wu, X. Jiang, D. Almeida, C. L. Wainwright, P. Mishkin, C. Zhang, S. Agarwal, K. Slama, A. Ray, et al. Training language models to follow instructions with human feedback. In _Proceedings of NeurIPS_, 2022. URL https://arxiv.org/abs/2203.02155.
* Padmanabhan et al. [2023] S. Padmanabhan, Y. Onoe, M. J. Zhang, G. Durrett, and E. Choi. Propagating knowledge updates to lms through distillation. _arXiv preprint arXiv:2306.09306_, 2023.
* Paster et al. [2023] K. Paster, M. D. Santos, Z. Azerbayev, and J. Ba. Openwebmath: An open dataset of high-quality mathematical web text, 2023.
* Peng et al. [2023] B. Peng, C. Li, P. He, M. Galley, and J. Gao. Instruction tuning with gpt-4. _ArXiv_, abs/2304.03277, 2023.
* Que et al. [2024] H. Que, J. Liu, G. Zhang, C. Zhang, X. Qu, Y. Ma, F. Duan, Z. Bai, J. Wang, Y. Zhang, X. Tan, J. Fu, W. Su, J. Wang, L. Qu, and B. Zheng. D-cpt law: Domain-specific continual pre-training scaling law for large language models. _ArXiv_, abs/2406.01375, 2024.

* [50] A. Radford and K. Narasimhan. Improving language understanding by generative pre-training. 2018. URL https://api.semanticscholar.org/CorpusID:49313245.
* [51] K. Sakaguchi, R. L. Bras, C. Bhagavatula, and Y. Choi. Winogrande: An adversarial winograd schema challenge at scale. _Communications of the ACM_, 64(9):99-106, 2021.
* [52] K. Sun, D. Yu, D. Yu, and C. Cardie. Investigating prior knowledge for challenging chinese machine reading comprehension. _Transactions of the Association for Computational Linguistics_, 2020. URL https://arxiv.org/abs/1904.09679v3.
* [53] T. Sun, L. Chai, J. Yang, Y. Yin, H. Guo, J. Liu, B. Wang, L. Yang, and Z. Li. Unic-Coder: Scaling code large language model via universal code. In L.-W. Ku, A. Martins, and V. Srikumar, editors, _Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_, pages 1812-1824, Bangkok, Thailand, Aug. 2024. Association for Computational Linguistics. doi: 10.18653/v1/2024.acl-long.100. URL https://aclanthology.org/2024.acl-long.100.
* [54] R. S. Sutton, D. A. McAllester, S. Singh, and Y. Mansour. Policy gradient methods for reinforcement learning with function approximation. In _NIPS_, 1999.
* [55] A. Talmor, J. Herzig, N. Lourie, and J. Berant. Commonsenseqa: A question answering challenge targeting commonsense knowledge. _arXiv preprint arXiv:1811.00937_, 2018.
* [56] I. Timiryasov and J.-L. Tastet. Baby llama: knowledge distillation from an ensemble of teachers trained on a small dataset with no performance penalty. _arXiv preprint arXiv:2308.02019_, 2023.
* [57] H. Touvron, T. Lavril, G. Izacard, X. Martinet, M.-A. Lachaux, T. Lacroix, B. Roziere, N. Goyal, E. Hambro, F. Azhar, A. Rodriguez, A. Joulin, E. Grave, and G. Lample. LLaMA: Open and efficient foundation language models. _arXiv preprint arXiv:2302.13971_, 2023. URL https://arxiv.org/pdf/2302.13971.pdf.
* [58] H. Touvron, T. Lavril, G. Izacard, X. Martinet, M.-A. Lachaux, T. Lacroix, B. Roziere, N. Goyal, E. Hambro, F. Azhar, A. Rodriguez, A. Joulin, E. Grave, and G. Lample. LLama: Open and efficient foundation language models, 2023.
* [59] H. Touvron, L. Martin, K. Stone, P. Albert, A. Almahairi, Y. Babaei, N. Bashlykov, S. Batra, P. Bhargava, S. Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. _arXiv preprint arXiv:2307.09288_, 2023.
* [60] P. Wang, Z. Wang, Z. Li, Y. Gao, B. Yin, and X. Ren. Scott: Self-consistent chain-of-thought distillation. In _Annual Meeting of the Association for Computational Linguistics_, 2023.
* [61] Z. Wang, J. Guo, R. Gong, Y. Yong, A. Liu, Y. Huang, J. Liu, and X. Liu. Ptsbench: A comprehensive post-training sparsity benchmark towards algorithms and models. In _ACM Multimedia 2024_.
* [62] Z. M. Wang, Z. Peng, H. Que, J. Liu, W. Zhou, Y. Wu, H. Guo, R. Gan, Z. Ni, M. Zhang, Z. Zhang, W. Ouyang, K. Xu, W. Chen, J. Fu, and J. Peng. Rolellum: Benchmarking, eliciting, and enhancing role-playing abilities of large language models. _arXiv preprint arXiv: 2310.00746_, 2023.
* [63] J. Wei, M. Bosma, V. Y. Zhao, K. Guu, A. W. Yu, B. Lester, N. Du, A. M. Dai, and Q. V. Le. Finetuned language models are zero-shot learners. In _Proceedings of ICLR_, 2022. URL https://openreview.net/forum?id=gEZrGCozdqR.
* [64] J. Wei, Y. Tay, R. Bommasani, C. Raffel, B. Zoph, S. Borgeaud, D. Yogatama, M. Bosma, D. Zhou, D. Metzler, et al. Emergent abilities of large language models. _Transactions on Machine Learning Research_, 2022. URL https://openreview.net/pdf?id=yzkSU5zdwD.
* [65] Y. Wu, J. Liu, X. Bu, J. Liu, Z. Zhou, Y. Zhang, C. Zhang, Z. Bai, H. Chen, T. Ge, et al. Conceptmath: A bilingual concept-wise benchmark for measuring mathematical reasoning of large language models. _arXiv preprint arXiv:2402.14660_, 2024.

* [66] M. Xia, T. Gao, Z. Zeng, and D. Chen. Sheared llama: Accelerating language model pre-training via structured pruning. _arXiv preprint arXiv:2310.06694_, 2023.
* [67] S. M. Xie, H. Pham, X. Dong, N. Du, H. Liu, Y. Lu, P. S. Liang, Q. V. Le, T. Ma, and A. W. Yu. Doremi: Optimizing data mixtures speeds up language model pretraining. _Advances in Neural Information Processing Systems_, 36, 2024.
* [68] Z. Yang, A. Zeng, Z. Li, T. Zhang, C. Yuan, and Y. Li. From knowledge distillation to self-knowledge distillation: A unified approach with normalized loss and customized soft labels. In _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pages 17185-17194, 2023.
* [69] J. Ye, P. Liu, T. Sun, Y. Zhou, J. Zhan, and X. Qiu. Data mixing laws: Optimizing data mixtures by predicting language modeling performance. _arXiv preprint arXiv:2403.16952_, 2024.
* [70] Z. Yuan, J. Guo, D. An, J. Wu, H. Zhu, J. Li, X. Chen, K. Xu, and J. Liu. VRDistill: Vote refinement distillation for efficient indoor 3d object detection. In _ACM Multimedia 2024_, 2024.
* [71] C. Zhang, D. Song, Z. Ye, and Y. Gao. Towards the law of capacity gap in distilling language models. _arXiv preprint arXiv:2311.07052_, 2023.
* [72] G. Zhang, S. Qu, J. Liu, C. Zhang, C. Lin, C. L. Yu, D. Pan, E. Cheng, J. Liu, Q. Lin, et al. Map-neo: Highly capable and transparent bilingual large language model series. _arXiv preprint arXiv:2405.19327_, 2024.
* [73] P. Zhang, G. Zeng, T. Wang, and W. Lu. Tinyllama: An open-source small language model, 2024.
* [74] Z. Zhou, J. Liu, C. Yang, J. Shao, Y. Liu, X. Yue, W. Ouyang, and Y. Qiao. Beyond one-preference-for-all: Multi-objective direct preference optimization. _arXiv preprint arXiv:2310.03708_, 2023.

Broader Impacts and Limitations

**Broader Impacts.** Based on our DDK, we can boost the performance of small LLMs a lot under the guidance of the teacher LLMs. In real-world scenes, we hope our enhanced small LLMs can be deployed on low-resource devices (e.g., PCs or Mobiles) and make future life better with better small LLMs.

**Limitations.** First, we have to tune several hyperparameters to achieve better performance in our DDK. Second, due to the GPU resource limitations, we only distill the 1.1B, 1.8B and 4B sizes under the guidance of teachers with 7B and 10B+ sizes. In the future, we will investigate the performance of knowledge distillation using larger student and larger teacher models.

## Appendix B More Details

### Discussion on the differences between DDK and Sheared LLaMA

First, for the solved tasks. the Sheared LLaMA [66] is proposed for structure pruning, while our DDK is proposed for knowledge distillation on the LLMs. Therefore, our DDK is orthogonal to the Sheared LLaMA and we can further improve the performance of small models pruned by Sheared LLaMA. Second, for the technical details, the sheared LLaMA needs to first fit a scaling function using three open-sourced LLaMA models (i.e., LLAMA2-7B/13B/70B) when pruning the LLaMA model series, where the fitting data points are very limited. In Sheared LLaMA, the authors also claim the estimated reference losses for different domains are also biased as the limited data points for estimating the scaling law parameters. Besides, in many real-world pruning scenarios, we cannot usually obtain a series of models under the same training setting. Thus, we cannot predict the losses across different domains of the small-size model when a series of models are not provided. In contrast, in DDK, we directly use the domain loss predicted by the teacher model as the reference loss without fitting the scaling function, where the teacher-predicted losses are used as the accurate guidance to improve the student model. Besides, the Sheared LLaMA is proposed to enhance the training efficiency of the continued pre-training setting of the pruned model, the guidance of the teacher model is not included. In addition, our DDK also introduces the factor smooth updating strategy, which is not used in Sheared LLaMA and can make the change of the domain mixture more stable. Moreover, in the following table, we also provide the results of replacing our proposed factor smooth updating strategy with the strategy of Sheared LLaMA, and observe that DDK is better a lot, which further shows the effectiveness of our factor smooth updating strategy.

### Details on the training costs

As shown in Table 7, we compare the TFLOPs of three representative baseline methods, and observe that the training costs of our DDK are acceptable when compared with the baseline KD method.

## Appendix C More Sentence Examples

In the following, we provide more examples generated by the original and distilled models. We find that the sentences generated by the distilled model are superior to those generated by the original model in terms of fluency, relevance, and informativeness regarding the given topic.

\begin{table}
\begin{tabular}{l|c c c} \hline \hline Models & **CPT** & **KD** & **DDK** \\ \hline TFLOPs & 1.456e8 & 5.364e8 & 5.401e8 \\ \hline \hline \end{tabular}
\end{table}
Table 7: Training TFLOPs on all data of different methods for Qwen-1.5. For KD and DDK, we use the Qwen-1.5 14B to distill the Qwen-1.5 1.8B.

Prompt:

Question: Janet's ducks lay 16 eggs per day. She eats three for breakfast every morning and bakes muffins for her friends every day with four. She sells the remainder at the farmers' market daily for $2 per fresh duck egg. How much in dollars does she make every day at the farmers' market?

Answer: 18

Question: A robe takes 2 bolts of blue fiber and half that much white fiber. How many bolts in total does it take?

Answer: 3

Question: Josh decides to try flipping a house. He buys a house for $80,000 and then puts in $50,000 in repairs. This increased the value of the house by 150%. How much profit did he make?

Answer: 70000

Question: James decides to run 3 sprints 3 times a week. He runs 60 meters each sprint. How many total meters does he run a week?

Answer:

Assistant (Qwen-1.5 1.8B):

1800

Assistant (Qwen-1.5 1.8B DDK):

540

Prompt:

Gunter is trying to count the jelly beans in a jar. He asks his friends how many they think are in the jar. One says 80. Another says 20 more than half the first one. A third says 25% more than the first one. What is their average guess?

Answer:

Assistant (Qwen-1.5 1.8B):

First, we need to find half of the first number, which is 80 / 2 = 40.

Then, we need to add 20 more to that number, which is 40 + 20 = 60.

Next, we need to find 25% of the first number, which is 80 * 0.25 = 20.

Finally, we add that number to the first number, which is 60 + 20 = 80.

Now, we can find the average by adding up all the guesses and dividing by the number of guesses, which is 80 + 60 + 20 = 160.

Finally, we divide that number by the number of guesses, which is 3, to find the average, which is 160 / 3 = 53.33.

Therefore, the answer is 53.

Assistant (Qwen-1.5 1.8B DDK):

The first friend's guess is 80 jelly beans.

The second friend's guess is 20 more than half of 80, which is (80/2) + 20 = 40 + 20 = 60 jelly beans.

The third friend's guess is 25% more than 80, which is 80 + (0.25 * 80) = 80 + 20 = 100 jelly beans.

To find the average guess, we add up all the guesses and divide by the number of friends, which is 3.

So the average guess is (80 + 60 + 100) / 3 = 240 / 3 = 80 jelly beans.

The answer is: 80

[MISSING_PAGE_EMPTY:17]

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: We have highlighted the main contribution of this paper in the abstract and instruction sections - DKK focuses on the domain discrepancies to adaptively improve the efficacy of knowledge distillation tailored to LLMs. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: As mentioned in Appendix A. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof?Answer: [Yes] Justification: Equations 2 and 3 concludes the main theory assumptions and proofs of this paper. We also provide sufficient explanations attached to them. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: The full details of the experiments are provided in Section 4. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code**Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: All data used in this paper is open-sourced. The codes for the baseline methods are also collected from Github. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: This information is provided in Section 4. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: We have made sufficient ablation studies to show the confidence of the results. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).

* The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)
* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: Mentioned in Section 4 and Appendix B. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: No ethic issues are related to this topics. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [Yes] Justification: We discuss the broader impact in Appendix A. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.

* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: No such risks. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licensees for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: We have cited all relevant papers. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided. * If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset. * For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.

* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: We have not yet release new assets. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: All evaluations are conducted by rules. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: Unrelated. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.