Reinforcement Learning with LTL and \(\omega\)-Regular Objectives via Optimality-Preserving Translation to Average Rewards

Xuan-Bach Le\({}^{1}\)1  Dominik Wagner\({}^{1}\)1

Leon Witzman\({}^{1}\)   Alexander Rabinovich\({}^{2}\)   Luke Ong\({}^{1}\)

\({}^{1}\)NTU Singapore  \({}^{2}\)Tel Aviv University

{bach.le,dominik.wagner,luke.ong}@ntu.edu.sg

witz20001@e.ntu.edu.sg   rabinoa@tauex.tau.ac.il

These authors contributed equally to this work.

###### Abstract

Linear temporal logic (LTL) and, more generally, \(\omega\)-regular objectives are alternatives to the traditional discount sum and average reward objectives in reinforcement learning (RL), offering the advantage of greater comprehensibility and hence explainability. In this work, we study the relationship between these objectives. Our main result is that each RL problem for \(\omega\)-regular objectives can be reduced to a limit-average reward problem in an optimality-preserving fashion, via (finite-memory) reward machines. Furthermore, we demonstrate the efficacy of this approach by showing that optimal policies for limit-average problems can be found asymptotically by solving a sequence of discount-sum problems approximately. Consequently, we resolve an open problem: optimal policies for LTL and \(\omega\)-regular objectives can be learned asymptotically.

## 1 Introduction

Reinforcement learning (RL) is a machine learning paradigm whereby an agent aims to accomplish a task in a generally unknown environment [37]. Traditionally, tasks are specified via a scalar reward signal obtained continuously through interactions with the environment. These rewards are aggregated over entire trajectories either through averaging or by summing the exponentially decayed rewards. However, in many applications, there are no reward signals that can naturally be extracted from the environment. Moreover, reward signals that are supplied by the user are prone to error in that the chosen low-level rewards often fail to accurately capture high-level objectives. Generally, policies derived from local rewards-based specifications are hard to understand because it is difficult to express or explain their global intent.

As a remedy, it has been proposed to specify tasks using formulas in Linear Temporal Logic (LTL) [41, 30, 9, 38, 15, 34, 14] or \(\omega\)-regular languages more generally [30]. In this framework, the aim is to maximise the probability of satisfying a logical specification. LTL can precisely express a wide range of high-level behavioural properties such as liveness (infinitely often \(P\)), safety (always \(P\)), stability (eventually always \(P\)), and priority (\(P\) then \(Q\) then \(T\)).

Motivated by this, a growing body of literature study learning algorithms for RL with LTL and \(\omega\)-regular objectives (e.g. [41, 15, 30, 7, 32, 20, 21, 16]). However, to the best of our knowledge, all of these approaches may fail to learn provably optimal policies without prior knowledge of a generally unknown parameter such as the optimal \(\epsilon\)-return mixing time [15] or the \(\epsilon\)-recurrence time [30],which depend on the (unavailable) transition probabilities of the MDP. Moreover, it is known that neither LTL nor (limit) average reward objectives are PAC (probably approximately correct) learnable [2]. Consequently, approximately optimal policies can only possibly be found asymptotically but not in bounded time. 1

Footnote 1: Formally, for some \(\epsilon,\delta>0\) it is impossible to learn \(\epsilon\)-approximately optimal policies with probability \(1-\delta\) in finite time.

In this work, we pursue a different strategy: rather than solving the RL problem directly, we study _optimality-preserving_ translations [2] from \(\omega\)-regular objectives to more traditional rewards, in particular, limit-average rewards. This method offers a significant advantage: it enables the learning of optimal policies for \(\omega\)-regular objectives by solving a single more standard problem, for which we can leverage existing off-the-shelf algorithms (e.g. [26; 15; 30]). In this way, all future advances--in both theory and practice--for these much more widely studied problems carry over directly, whilst still enjoying significantly more explainable and comprehensible specifications. It is well-known that such a translation from LTL to discounted rewards is impossible [2]. Intuitively, this is because the latter cannot capture infinite horizon tasks such as reachability or safety [2; 42; 19]. Hence, we instead investigate translations to limit-average rewards in this paper.

#### Contributions

We study reinforcement learning of \(\omega\)-regular and LTL objectives in Markov decision processes (MDPs) with unknown probability transitions, translations to limit-average reward objectives and learning algorithms for the latter. In detail:

1. We prove a negative result (Proposition 4): in general it is not possible to translate \(\omega\)-regular objectives to limit average objectives in an optimality-preserving manner if rewards are memoryless (i.e., independent of previously performed actions, sometimes called history-free or Markovian).
2. On the other hand, our main result (Theorem 12) resolves Open Problem 1 in [2]: such an optimality-preserving translation is possible if the reward assignment may use finite memory as formalised by reward machines [23; 24].
3. To underpin the efficacy of our reduction approach, we provide the first convergence proof (Theorem 16) of an RL algorithm (Algorithm 1) for average rewards. To the best of our knowledge (and as indicated by [13]), this is the first proof _without assumptions on the induced Markov chains_. In particular, the result applies to multichain MDPs, which our translation generally produces, with unknown probability transitions. Consequently, we also resolve Open Problem 4 of [2]: RL for \(\omega\)-regular and LTL objectives can be learned in the limit (Theorem 18).

#### Outline.

We start by reviewing the problem setup in Section 2. Motivated by the impossibility result for simple reward functions, we define reward machines (Section 3). In Section 4 we build intuition for the proof of our main result in Section 5. Thereafter, we demonstrate that RL with limit-average, \(\omega\)-regular and LTL objectives can be learned asymptotically (Section 6). Finally, we review related work and conclude in Section 7.

## 2 Background

Recall that a _Markov Decision Process (MDP)_ is a tuple \(\mathcal{M}=(S,A,s_{0},P)\) where \(S\) is a finite set of states, \(s_{0}\in S\) is the initial state, \(A\) is the finite set of actions and \(P:S\times A\times S\rightarrow[0,1]\) is the probability transition function such that \(\sum_{s^{\prime}\in S}P(s,a,s^{\prime})=1\) for every \(s\in S\) and \(a\in A\). MDPs may be graphically represented; see e.g. Fig. 0(a). We let \(\mathrm{Runs}_{\mathbb{R}^{1}}(S,A)=S\times(A\times S)^{*}\) and \(\mathrm{Runs}(S,A)=(S\times A)^{\omega}\) denote the set of finite runs and the set of infinite runs in \(\mathcal{M}\) respectively.

A _policy_\(\pi:\mathrm{Runs}_{\mathbb{R}^{1}}(S,A)\rightarrow\mathcal{D}(A)\) maps finite runs to distributions over actions. We let \(\Pi(S,A)\) denote the set of all such policies. A policy \(\pi\) is _memoryless_ if \(\pi(s_{0}a_{0}\ldots s_{n})=\pi(s^{\prime}_{0}a^{\prime}_{0}\ldots s^{\prime}_ {m})\) for all finite runs \(s_{0}a_{0}\ldots s_{n}\) and \(s^{\prime}_{0}a^{\prime}_{0}\ldots s^{\prime}_{m}\) such that \(s_{n}=s^{\prime}_{m}\). For each MDP \(\mathcal{M}\) and policy \(\pi\), there is a natural induced probability measure \(\mathcal{D}_{\pi}^{\mathcal{M}}\) on its runs.

The desirability of policies for a given MDP \(\mathcal{M}\) can be expressed as a function \(\mathcal{J}:\Pi(S,A)\rightarrow\mathbb{R}\). Much of the RL literature focuses on discounted-sum \(\mathcal{J}_{\mathcal{R}^{\gamma}}^{\mathcal{M}}\) and limit-average reward objectives \(\mathcal{J}_{\mathcal{R}^{\omega}}^{\mathcal{M}}\),which lift a reward function \(\mathcal{R}:S\times A\times S\to\mathbb{R}\) for single transitions to runs \(\rho=s_{0}a_{0}s_{1}a_{1}\ldots\) as follows:

\[\mathcal{J}_{\mathcal{R}^{\gamma}}^{\mathcal{M}}(\pi):=\mathbb{E}_{\rho\sim \mathcal{D}_{\pi}^{\mathcal{M}}}\left[\sum_{i=0}^{\infty}\ \gamma^{i}\cdot r_{i}\right]\qquad\quad\mathcal{J}_{\mathcal{R}^{\pi}}^{ \mathcal{M}}(\pi):=\liminf_{t\to\infty}\mathbb{E}_{\rho\sim\mathcal{D}_{\pi}^{ \mathcal{M}}}\left[\frac{1}{t}\cdot\sum_{i=0}^{t-1}\ r_{i}\right]\]

where \(r_{i}=\mathcal{R}(s_{i},a_{i},s_{i+1})\) and \(\gamma\in(0,1)\) is the _discount factor_.

\(\omega\)-Regular Objectives.\(\omega\)-regular objectives (which subsume LTL objectives) are an alternative to these traditional objectives. Henceforth, we fix an alphabet \(\mathcal{AP}\) and a _label function_\(\lambda:S\times A\times S\to 2^{\mathcal{AP}}\) for transitions, where \(2^{X}\) is the power set of a set \(X\). Each run \(\rho=s_{0}a_{0}s_{1}a_{1}s_{2}\ldots\) induces a sequence of labels \(\lambda(\rho)=\lambda(s_{0},a_{0},s_{1})\lambda(s_{1},a_{1},s_{2})\ldots\). Thus, for a set \(L\subseteq(2^{\mathcal{AP}})^{\omega}\) of "desirable" label sequences we can consider the probability of a run's labels being in that set: \(\mathbb{P}_{\rho\sim\mathcal{D}_{\pi}^{\mathcal{M}}}[\lambda(\rho)\in L]\).

**Example 1**.: For instance, an autonomous car may want to "visit a petrol station exactly once" to conserve resources (e.g. time or petrol). Consider the MDP in Fig. 0(a) where the state \(s_{1}\) represents a petrol station. We let \(\mathcal{AP}=\{p\}\) (\(p\) for petrol), \(\lambda(s_{0},b,s_{1})=\{p\}\), and the rest are labeled with \(\emptyset\). The desirable label sequences are \(L=\{\lambda_{1}\lambda_{2}\cdots|\ \text{ for exactly one }i\in\mathbb{N},\lambda_{i}=\{p\}\}\).

In this work, we focus on \(L\) which are \(\omega\)-regular languages. It is well known that \(\omega\)-regular languages are precisely the languages recognised by Deterministic Rabin Automata (DRA) [27, 29]:

**Definition 2**.: A DRA is a tuple \(\mathcal{A}=(Q,2^{\mathcal{AP}},q_{0},\delta,F)\) where \(Q\) is a finite state set, \(2^{\mathcal{AP}}\) is the alphabet, \(q_{0}\in Q\) is the initial state, \(\delta:Q\times 2^{\mathcal{AP}}\to Q\) is the transition function, and \(F=\{(A_{1},R_{1}),\ldots,(A_{n},R_{n})\}\), where \(A_{i},R_{i}\subseteq Q\), is the accepting condition. Let \(\rho\in(2^{\mathcal{AP}})^{\omega}\) be an infinite run and \(\mathrm{InfS}(\rho)\) the set of states visited infinitely often by \(\rho\). We say \(\rho\) is accepted by \(\mathcal{A}\) if there exists some \((A_{i},R_{i})\in F\) such that \(\rho\) visits some state in \(A_{i}\) infinitely often whilst visiting every state in \(R_{i}\) finitely often, i.e. \(\mathrm{InfS}(\rho)\cap A_{i}\neq\emptyset\) and \(\mathrm{InfS}(\rho)\cap R_{i}=\emptyset\).

For example, the objective in Example 1 may be represented by the DRA in Fig. 0(b).

Thus, the desirability of \(\pi\) is the probability of \(\pi\) generating an accepting sequence in the DRA \(\mathcal{A}\):

\[\mathcal{J}_{\mathcal{A}}^{\mathcal{M}}(\pi)\ :=\ \mathbb{P}_{\rho\sim\mathcal{D}_{ \pi}^{\mathcal{M}}}[\lambda(\rho)\text{ is accepted by the automaton }\mathcal{A}]\] (1)

Remarks.The class of \(\omega\)-regular languages subsumes languages expressed by Linear Temporal Logic (LTL, see e.g. [4, Ch. 5]), a logical framework in which e.g. reachability (eventually \(P\), \(\Diamond P\)), safety (always \(P\), \(\Box P\)) and reach-avoid (eventually \(P\) whilst avoiding \(Q\), \((\neg Q)\,\mathcal{U}\,P\)) properties can be expressed concisely and intuitively. The specification of our running Example 1 to visit the petrol station exactly once can be expressed as the LTL formula \((\neg p)\,\mathcal{U}\,(p\wedge\Diamond\Box\neg p)\), where \(\Diamond Q\) denotes "\(Q\) holds at the next step". Furthermore, our label function \(\lambda\), which maps transitions to labels, is more general than other definitions (e.g. [41, 15, 30]) instead mapping states to labels. As a result, we are able to articulate properties that involve actions, such as "to reach the state \(s\) while avoiding taking the action \(a\)".

Optimality-Preserving Specification Translations.Rather than solving the problem of synthesising optimal policies for Eq. (1) directly, we are interested in reducing it to more traditional RL

Figure 1: Examples of an MDP and DRA.

problems and applying off-the-shelf RL algorithms to find optimal policies. To achieve this, the reduction needs to be _optimality preserving2_:

Footnote 2: This definition makes sense both for the case of reward functions \(\mathcal{R}_{(S,A,\lambda,\mathcal{A})}:S\times A\times S\rightarrow\mathbb{R}\) and reward machines (introduced in the subsequent section).

**Definition 3** ([2]).: An _optimality-preserving specification translation_ from \(\omega\)-regular objectives to limit-average rewards is a computable function mapping each tuple \((S,A,\lambda,\mathcal{A})\) to \(\mathcal{R}_{(S,A,\lambda,\mathcal{A})}\) s.t.

 policies maximising \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}\) also maximise \(\mathcal{J}^{\mathcal{M}}_{\mathcal{A}}\), where \(\mathcal{R}:=\mathcal{R}_{(S,A,\lambda,\mathcal{A})}\)

for every MDP \(\mathcal{M}=(S,A,s_{0},P)\), label function \(\lambda:S\times A\times S\to 2^{\mathcal{AP}}\) and DRA \(\mathcal{A}\).

We stress that since the probability transition function \(P\) is generally not known, the specification translation may not depend on it.

## 3 Negative Result and Reward Machines

Reward functions emit rewards purely based on the transition being taken without being able to take the past into account. On the other hand, DRAs have finite memory. Therefore, there cannot generally be optimality-preserving translations from \(\omega\)-regular objectives to limit average rewards provided by reward functions:

**Proposition 4**.: _There is an MDP \(\mathcal{M}\) and an \(\omega\)-regular language \(L\) for which it is impossible to find a reward function \(\mathcal{R}:S\times A\times S\rightarrow\mathbb{R}\) such that every \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}\)-optimal policy of \(\mathcal{M}\) also maximises the probability of membership in \(L\)._

Remarkably, this rules out optimality-preserving specification translations even if transition probabilities are fully known3.

Footnote 3: In Appendix A we show another negative result (Proposition 19): even for a strict subset of \(\omega\)-regular specifications such translations are impossible.

Proof.: Consider the deterministic MDP in Fig. 0(a) and the objective of Example 1 "to visit \(s_{1}\) exactly once" expressed by the DRA \(\mathcal{A}\) in Fig. 0(b). Assume towards contradiction there exists a reward function \(\mathcal{R}:S\times A\times S\rightarrow\mathbb{R}\) such that optimal policies w.r.t. \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}\) maximise acceptance by \(\mathcal{A}\). Note that every policy \(\pi^{*}\) maximising acceptance by the DRA induces the run \(s_{0}(as_{0})^{n}bs_{1}bs_{0}(as_{0})^{\omega}\) for some \(n\in\mathbb{N}\), and \(\mathcal{J}^{\mathcal{M}}_{\mathcal{A}}(\pi^{*})=1\). Thus, its limit-average reward is \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\pi^{*})=\mathcal{R}(s_{ 0},a,s_{0})\). Now, consider the policy \(\pi\) always selecting action \(a\) with probability \(1\). As the run induced by \(\pi\) is \(s_{0}(as_{0})^{\omega}\), we deduce that \(\mathcal{J}^{\mathcal{M}}_{\mathcal{A}}(\pi)=0\) and \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\pi)=\mathcal{R}(s_{0},a,s_{0})=\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\pi^{*})\), which is a contradiction since \(\pi\) is not \(\mathcal{J}^{\mathcal{M}}_{\mathcal{A}}\)-optimal. 

Since simple reward functions lack the expressiveness to capture \(\omega\)-regular objectives, we employ a generalisation, reward machines [23, 24], whereby rewards may also depend on an internal state:

**Definition 5**.: A _reward machine (RM)_ is a tuple \(\mathcal{R}=(U,u_{0},\delta_{u},\delta_{r})\) where \(U\) is a finite set of states, \(u_{0}\in U\) is the initial state, \(\delta_{r}:U\times(S\times A\times S)\rightarrow\mathbb{R}\) is the reward function, and \(\delta_{u}:U\times(S\times A\times S)\to U\) is the update function.

Intuitively, a RM \(\mathcal{R}\) utilises the current transition to update its states through \(\delta_{u}\) and assigns the rewards through \(\delta_{r}\). For example, Fig. 0(a) depicts a reward machine for the MDP of Fig. 0(a), where the states count the number of visits to \(s_{1}\) (0 times, once, more than once).

Let \(\rho=s_{0}a_{0}s_{1}\cdots\) be an infinite run. Since \(\delta_{u}\) is deterministic, it induces a sequence \(u_{0}u_{1}\ldots\) of states in \(\mathcal{R}\), where \(e_{i}=(s_{i},a_{i},s_{i+1})\) and \(u_{i+1}=\delta_{u}(u_{i},e_{i})\). The _limit-average reward_ of a policy \(\pi\) is defined as:

\[\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\pi)\ :=\ \liminf_{t\rightarrow\infty}\mathbb{E}_{\rho\sim\mathcal{D}^{ \mathcal{M}}_{\pi}}\left[\frac{1}{t}\sum_{i=1}^{t-1}\,\delta_{r}(u_{i},e_{i})\right]\]

It is seen that limit-average optimal policies \(\pi^{*}\) for the MDP in Fig. 0(a) and the RM in Fig. 0(a) eventually select action \(b\) exactly once in state \(s_{0}\) to achieve \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\pi^{*})=1\).

In the following two sections, we present a general translation from \(\omega\)-regular languages to limit-average reward machines, and we show that our translation is optimality-preserving (Theorem 12).

Remarks.Our definition of RM is more general than the one presented in [23; 24], where \(\delta^{\prime}_{u}:U\to[S\times A\times S\to\mathbb{R}]\) and \(\delta^{\prime}_{r}:U\times 2^{A^{\mathcal{P}}}\to U\). Note that \((\delta^{\prime}_{u},\delta^{\prime}_{r})\) can be reduced to \((\delta_{u},\delta_{r})\) by expanding the state space of the RM to include the previous state and utilising the inverse label function \(\lambda^{-1}\). It is worth pointing out that Theorem 12 does not contradict a negative result in [2] regarding the non-existence of an optimality-preserving translation from LTL constraints to _abstract_ limit-average reward machines (where only the _label_ of transitions is provided to \(\delta_{u}\) and \(\delta_{r}\)).

## 4 Warm-Up: Transitions with Positive Probability are Known

To help the reader gain intuition about our construction, we first explore the situation where the support \(\{(s,a,s^{\prime})\in S\times A\times S\mid P(s,a,s^{\prime})>0\}\) of the MDP's transition function is known. Crucially, we do not assume that the _magnitude_ of these (non-zero) probabilities are known. Subsequently, in Section 5, we fully eliminate this assumption.

This assumption allows us to draw connections between our problem and a familiar scenario in probabilistic model checking [4, Ch. 10], where the acceptance problem for \(\omega\)-regular objectives can be transformed into a reachability problem. Intuitively, our reward machine monitors the state of the DRA and provides reward \(1\) if the MDP and the DRA are in certain "good" states (\(0\) otherwise).

For the rest of this section, we fix an MDP without transition function \((S,A,s_{0})\), a set of possible transitions \(E\subseteq S\times A\times S\), a label function \(\lambda:S\times A\times S\to 2^{\mathcal{A}P}\) and a DRA \(\mathcal{A}=(Q,2^{A^{\mathcal{P}}},q_{0},\delta,F)\). Our aim is to find a reward machine \(\mathcal{R}\) such that for every transition function \(P\) compatible with \(E\) (formally: \(E=\{(s,a,s^{\prime})\mid P(s,a,s^{\prime})>0\}\)), optimal policies for limit-average rewards are also optimal for the acceptance probability of the DRA \(\mathcal{A}\).

### Product MDP and End Components

First, we form the _product MDP_\(\mathcal{M}\otimes\mathcal{A}\) (e.g. [41; 15]), which synchronises the dynamics of the MDP \(\mathcal{M}\) with the DRA \(\mathcal{A}\). Formally, \(\mathcal{M}\otimes\mathcal{A}=(V,A,v_{0},\Delta,F_{\mathcal{M}})\) where \(V=S\times Q\) is the set of states, \(A\) is the set of actions, \(v_{0}=(s_{0},q_{0})\) is the initial state. The transition probability function \(\Delta:V\times A\times V\to[0,1]\) satisfies \(\Delta(v,a,v^{\prime})=P(s,a,s^{\prime})\) given that \(v=(s,q)\), \(v^{\prime}=(s^{\prime},q^{\prime})\), and \(\delta(q,\lambda(s,a,s^{\prime}))=q^{\prime}\). The accepting condition is \(F_{\mathcal{M}}=\{(A^{\prime}_{1},R^{\prime}_{1}),(A^{\prime}_{2},R^{\prime} _{2}),\ldots\}\) where \(A^{\prime}_{i}=S\times A_{i}\), \(R^{\prime}_{i}=S\times R_{i}\), and \((A_{i},R_{i})\in F\). A run \(\rho=(s_{0},q_{0})a_{0}\cdots\) is accepted by \(\mathcal{M}\otimes\mathcal{A}\) if there exists some \((A^{\prime}_{i},R^{\prime}_{i})\in F_{\mathcal{M}}\) such that \(\mathrm{InfV}(\rho)\cap A^{\prime}_{i}\neq\emptyset\) and \(\mathrm{InfV}(\rho)\cap R^{\prime}_{i}=\emptyset\), where \(\mathrm{InfV}\) is the set of states \((s,v)\) in the product MDP visited infinitely often by \(\rho\).

Note that product MDPs have characteristics of both MDPs and DRAs which neither possesses in isolation: transitions are generally probabilistic and there is a notation of acceptance of runs. For example, the product MDP for Fig. 1 is shown in Fig. 1(b). Due to the deterministic nature of the DRA \(\mathcal{A}\), every run \(\rho\) in \(\mathcal{M}\) gives rise to a unique run \(\rho^{\otimes}\) in \(\mathcal{M}\otimes\mathcal{A}\). Crucially, for every policy \(\pi\),

\[\mathbb{P}_{\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi}}[\rho\text{ is accepted by }\mathcal{A}]=\mathbb{P}_{\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi}}[\rho^{ \otimes}\text{ is accepted by }\mathcal{M}\otimes\mathcal{A}]\] (2)

We make use of well-known almost-sure characterisation of accepting runs via the notion of accepting end components:

Figure 2: A reward machine and the product MDP for the running Example 1.

**Definition 6**.: An _end component_ (EC) of \(\mathcal{M}\otimes\mathcal{A}=(V,A,v_{0},\Delta,F_{\mathcal{M}})\) is a pair \((T,\mathrm{Act})\) where \(T\subseteq V\) and \(\mathrm{Act}:T\to 2^{A}\) satisfies the following conditions

1. For every \(v\in T\) and \(a\in\mathrm{Act}(v)\), we have \(\sum_{v^{\prime}\in T}\Delta(v,a,v^{\prime})=1\), and
2. The graph \((T,\rightarrow_{\mathrm{Act}})\) is strongly connected, where \(v\rightarrow_{\mathrm{Act}}v^{\prime}\) iff \(\Delta(v,a,v^{\prime})>\ 0\) for some \(a\in\mathrm{Act}(v)\).

\((T,\mathrm{Act})\) is an _accepting EC (AEC)_ if \(T\cap A^{\prime}_{i}\neq\emptyset\) and \(T\cap R^{\prime}_{i}=\emptyset\) for some \((A^{\prime}_{i},R^{\prime}_{i})\in F_{\mathcal{M}}\).

Intuitively, an EC is a strongly connected sub-MDP. For instance, for the product MDP in Fig. 1(b) there are five end components, \((\{(s_{0},q_{0})\},(s_{0},q_{0})\mapsto\{a\})\), \((\{(s_{0},q_{1})\},(s_{0},q_{1})\mapsto\{a\})\), \((\{(s_{0},q_{2})\},(s_{0},q_{2})\mapsto\{a\})\), \((\{(s_{0},q_{2})\},(s_{0},q_{2})\mapsto\{b\})\) and \((\{(s_{0},q_{2})\},(s_{0},q_{2})\mapsto\{a,b\})\). \((\{(s_{0},q_{1})\},(s_{0},q_{1})\mapsto\{a\})\) is its only accepting end component.

It turns out that, almost surely, a run is accepted iff it enters an accepting end component and never leaves it [1]. Therefore, a natural idea for a reward machine is to use its state to keep track of the state \(q\in Q\) the DRA is in and give reward 1 to transitions \((s,a,s^{\prime})\) if \((s,q)\) is in some AEC (and \(0\) otherwise). Unfortunately, this approach falls short since the AEC may contain non-accepting ECs, thus assigning maximal reward to sub-optimal policies.4 As a remedy, we introduce a notion of minimal AEC, and ensure that only runs eventually committing to one such minimal AEC get a limit-average reward of 1.

Footnote 4: To illustrate this point, consider the product MDP \((\{s_{0},s_{1}\},\{a,b\},s_{0},P,F)\) where \(P(s_{0},b,s_{0})=P(s_{0},a,s_{1})=P(s_{1},a,s_{0})=1\) and \(F=\{(\{s_{1}\},\emptyset)\}\), i.e. the objective is to visit \(s_{1}\) infinitely often.

**Definition 7**.: An AEC \((T,\mathrm{Act})\) is an _accepting simple EC (ASEC)_ if \(|\,\mathrm{Act}(v)|=1\) for every \(v\in T\).

Let \(\mathcal{C}_{1}=(T_{1},\mathrm{Act}_{1}),\ldots,\mathcal{C}_{n}=(T_{n}, \mathrm{Act}_{n})\) be a collection of ASECs covering all states in ASECs, i.e. if \((s,q)\) is in some ASEC then \((s,q)\in T_{1}\cup\cdots\cup T_{n}\). In particular, \(n\leq|S\times Q|\) is sufficient.

We can prove that every AEC contains an ASEC (see Lemma 20 in Appendix B). Consequently,

**Lemma 8**.: _Almost surely, if \(\rho\) is accepted by \(\mathcal{A}\) then \(\rho^{\otimes}\) reaches a state in some ASEC \(\mathcal{C}_{i}\) of \(\mathcal{M}\otimes\mathcal{A}\)._

### Reward Machine and Correctness

Next, to ensure that runs eventually commit to one such ASEC we introduce the following notational shorthand: for \((s,q)\in T_{1}\cup\cdots\cup T_{n}\), let \(\mathcal{C}_{(s,q)}=(T_{(s,q)},\mathrm{Act}_{(s,q)})\) be the \(\mathcal{C}_{i}\) with minimal \(i\) containing \((s,q)\), i.e. \(C_{(s,q)}:=C_{\min\{1\leq i\leq n|(s,q)\in T_{1}\}}\).

Intuitively, we give a reward of 1 if \((s,q)\) is in one of the \(\mathcal{C}_{1},\ldots,\mathcal{C}_{n}\). However, once an action is performed which deviates from \(\mathrm{Act}_{(s,q)}\) no rewards are given thereafter, thus resulting in a limit average reward of \(0\).

A state in the reward machine has the form \(q\in Q\), keeping track of the state in the DRA, or \(\bot\), which is a sink state signifying that in a state in \(\mathcal{C}_{1},\ldots,\mathcal{C}_{n}\) we have previously deviated from \(\mathrm{Act}_{(s,q)}\).

Finally, we are ready to formally define the reward machine \(\mathcal{R}=\mathcal{R}_{(S,A,\lambda,\mathcal{A})}\) exhibiting our specification translation as \((Q\cup\{\bot\},q_{0},\delta_{u},\delta_{r})\), where

\[\delta_{u}(u,(s,a,s^{\prime})):=\begin{cases}\bot&\text{if $u=\bot$ or}\\ &\big{(}(s,u)\in T_{1}\cup\cdots\cup T_{n}\text{ and }a\not\in\mathrm{Act}_{(s,u )}(s,u)\big{)}\\ \delta(u,\lambda(s,a,s^{\prime}))&\text{otherwise}\end{cases}\] \[\delta_{r}(u,(s,a,s^{\prime})):=\begin{cases}1&\text{if $u\neq\bot$ and $(s,u)\in T_{1}\cup\cdots\cup T_{n}$}\\ 0&\text{otherwise}\end{cases}\]

For our running example, this construction essentially yields the reward machine in Fig. 1(a) (with some inconsequential modifications cf. Fig. 4 in Appendix B).

**Theorem 9**.: _For all transition probability functions \(P\) with support \(E\), policies maximising the limit-average reward w.r.t. \(\mathcal{R}\) also maximise the acceptance probability of the DRA \(\mathcal{A}\)._

This result follows immediately from the following (the full proof is presented in Appendix B):

**Lemma 10**.: _Let \(P\) be a probability transition function with support \(E\) and \(\mathcal{M}:=(S,A,s_{0},P)\)._

1. _For every policy_ \(\pi\)_,_ \(\mathcal{J}_{\mathcal{R}^{\text{as}}}^{\mathcal{M}}(\pi)\leq\mathcal{J}_{ \mathcal{A}}^{\mathcal{M}}(\pi)\)_._
2. _For every policy_ \(\pi\)_, there exists some policy_ \(\pi^{\prime}\) _satisfying_ \(\mathcal{J}_{\mathcal{A}}^{\mathcal{M}}(\pi)\leq\mathcal{J}_{\mathcal{R}^{ \text{as}}}^{\mathcal{M}}(\pi^{\prime})\)_._

Proof sketch.: 1. By construction, every run receiving a limit-average reward of \(1\), must have entered some ASEC \(\mathcal{C}_{i}\) and never left it. Furthermore, almost surely all states are visited infinitely often and the run is accepted by definition of accepting ECs.

2. By Lemma 8, almost surely, a run is only accepted if it enters some \(\mathcal{C}_{i}\). We set \(\pi^{\prime}\) to be the policy agreeing with \(\pi\) until reaching one of the \(\mathcal{C}_{1},\ldots,\mathcal{C}_{n}\) and henceforth following the action \(\operatorname{Act}(s_{t},q_{t})(s_{t},q_{t})\), where \(q_{t}\) is the state of the DRA at step \(t\), yielding a guaranteed limit-average reward of \(1\) for the run by construction. 

**Remark 11**.: Our construction considers a collection of ASECs covering all states in ASECs. Whilst it does not necessarily require listing all possible ASECs but only (up to) one ASEC per state, it is unclear whether this can be obtained in polynomial time. In Appendix B.1, we present an alternative (yet more complicated) construction which has polynomial time complexity.

## 5 Main Result

In this section, we generalise the approach of the preceding section to prove our main result:

**Theorem 12**.: _There exists an optimality-preserving translation from \(\omega\)-regular languages to limit-average reward machines._

Again, we fix an MDP without transition function \((S,A,s_{0})\), a label function \(\lambda:S\times A\times S\to 2^{\mathcal{AP}}\) and a DRA \(\mathcal{A}=(Q,2^{\mathcal{AP}},q_{0},\delta,F)\). Note that the ASECs of a product MDP are uniquely determined by the non-zero probability transitions. Thus, for each set of transitions \(E\subseteq(S\times Q)\times A\times(S\times Q)\), we let \(\mathcal{C}_{1}^{E}=(T_{1},\operatorname{Act}_{1}),\ldots,\mathcal{C}_{n}^{E }=(T_{n},\operatorname{Act}_{n})\) denote a collection of ASECs covering all states in ASECs w.r.t. the MDPs in which \(E\) is the set of non-zero probability transitions.5 Then, for each set \(E\) and state \((s,q)\in T_{1}^{E}\cup\cdots\cup T_{n}^{E}\), we let \(\mathcal{C}_{(s,q)}^{E}=(T_{(s,q)}^{E},\operatorname{Act}_{(s,q)}^{E})\) be the ASEC \(\mathcal{C}_{i}^{E}\) that contains \((s,q)\) in which the index \(i\) is minimal.

Footnote 5: To achieve the same number \(n\) of ASECs we can add duplicates. If there are no ASECs we can set \(T_{i}:=\emptyset\).

Our reward machine \(\mathcal{R}=\mathcal{R}_{(S,A,\lambda,\mathcal{A})}\) extends the ideas from the preceding section. Importantly, we keep track of the set of transitions \(E\) taken so far and assign rewards according to our current knowledge about the graph of the product MDP. Therefore, we propose employing states of the form \((q,f,E)\), where \(q\in Q\) keeps track of the state of the DRA, \(f\in\{\top,\bot\}\) is a _status flag_ and \(E\subseteq(S\times Q)\times A\times(S\times Q)\) memorises the transitions in the product MDP encountered thus far.

Intuitively, we set the flag to \(\bot\) if we are in MDP state \(s\), \((s,q)\) is in one of the \(\mathcal{C}_{1}^{E},\ldots,\mathcal{C}_{n}^{E}\) and the chosen action deviates from \(\operatorname{Act}_{(s,q)}^{E}(s,q)\). We can recover from \(\bot\) by discovering new transitions. Besides, we give reward \(1\) if \(f=\top\) and \((s,q)\) is in one of the \(\mathcal{C}_{1}^{E},\ldots,\mathcal{C}_{n}^{E}\) (and \(0\) otherwise).

The status flag is required since discovering new transitions will change the structure of (accepting simple) end components. Hence, differently from the preceding section, it is not sufficient to have a single sink state.

The initial state of our reward machine is \(u_{0}:=(q_{0},\top,\emptyset)\) and we formally define the update and reward functions as follows:

\[\delta_{u}((q,f,E),(s,a,s^{\prime})):=\begin{cases}(q^{\prime},\bot,E)&\text{ if }f=\bot\text{ and }e\in E\\ (q^{\prime},\bot,E)&\text{ if }f=\top,e\in E,(s,q)\in T_{1}^{E}\cup\cdots\cup T_{n}^ {E}\text{ and }\\ &a\not\in\operatorname{Act}_{(s,q)}^{E}(s,q)\\ (q^{\prime},\top,E\cup\{e\})&\text{ otherwise }\end{cases}\]

\[\delta_{r}((q,f,E),(s,a,s^{\prime})):=\begin{cases}1&\text{if }f=\top,(s,q)\in T_{1}^{E}\cup\cdots\cup T_{n}^ {E}\\ 0&\text{otherwise }\end{cases}\]

where \(q^{\prime}:=\delta(q,\lambda(s,a,s^{\prime}))\) and \(e:=((q,s),a,(q^{\prime},s^{\prime}))\).

**Example 13**.: For our running example (see Example 1 and Fig. 1) initially no transitions are known (hence no ASECs). Therefore, all transitions receive reward \(0\). Once action \(a\) has been performed in state \(s_{0}\) in the MDP \(\mathcal{M}\) and \((q_{1},f,E)\) in the reward machine \(\mathcal{R}\), we have discovered the ASEC \((\{(s_{0},q_{1})\},(s_{0},q_{1})\mapsto\{a\})\) and a reward of \(1\) is given henceforth unless action \(b\) is selected eventually. In that case, we leave the ASEC and we will not discover further ASECs since there is only one. From here, it is not possible to return to state \(q_{1}\) in the DRA and henceforth only reward \(0\) will be obtained.

Theorem 12 is proven by demonstrating an extension of Lemma 10 (see Appendix C):

**Lemma 14**.: _Suppose \(\mathcal{M}=(S,A,s_{0},P)\) is an arbitrary MDP._

1. _For every policy_ \(\pi\)_,_ \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\pi)\leq\mathcal{J}^{ \mathcal{M}}_{\mathcal{A}}(\pi)\)_._
2. _For every policy_ \(\pi\)_, there exists some policy_ \(\pi^{\prime}\) _satisfying_ \(\mathcal{J}^{\mathcal{M}}_{\mathcal{A}}(\pi)\leq\mathcal{J}^{\mathcal{M}}_{ \mathcal{R}^{\text{avg}}}(\pi^{\prime})\)_._

Note that Lemma 14 immediately proves that the reduction is not only optimality preserving (Theorem 12) but also robust: every \(\epsilon\)-approximately limit-average optimal policy is also \(\epsilon\)-approximately optimal w.r.t. \(\mathcal{J}^{\mathcal{M}}_{\mathcal{A}}\). This observation is important because _exactly_ optimal policies for the limit average problem may be hard to find.

Intuitively, to see part 1 of Lemma 14 we note: If an average reward of \(1\) is obtained for a run, the reward machine believes, based on the partial observation of the product MDP, that the run ends up in an ASEC. Almost surely, we eventually discover all possible transitions involving the same state-action pairs as this ASEC and therefore this must also be an ASEC w.r.t. the true, unknown product MDP. For part 2, we modify the policy \(\pi\) similarly as in Lemma 10 by selecting actions \(\operatorname{Act}(s_{t},q_{t})\) once having entered an ASEC \(\mathcal{C}=(T,\operatorname{Act})\) w.r.t. the true, unknown product MDP.6

Footnote 6: NB The modified policy depends on the true, unknown support of the probability transition function; we only claim the _existence_ of such a policy.

## 6 Convergence for Limit Average, \(\omega\)-Regular and LTL Objectives

Thanks to the described translation, advances (in both theory and practice) in the study of RL with average rewards carry over to RL with \(\omega\)-regular and LTL objectives. In this section, we show that it is possible to learn optimal policies for limit average rewards in the limit. Hence, we resolve an open problem [2]: also RL with \(\omega\)-regular and LTL objectives can also be learned in the limit.

We start with the case of simple reward functions \(\mathcal{R}:S\times A\times S\to\mathbb{R}\). Recently, [18, Theorem 4.2] have shown that discount optimal policies for sufficiently high discount factor \(\overline{\gamma}\in[0,1)\) are also limit average optimal.7 This result alone is not enough to demonstrate Theorem 16 since \(\overline{\gamma}\) is generally not known and in finite time we might only obtain _approximately_ limit average optimal policies.

Footnote 7: Recall (see e.g. [22, Sec. 8.1]) that for any policy \(\pi\in\Pi\), \(\lim_{\gamma\nearrow 1}(1-\gamma)\cdot\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{ \uparrow}}(\pi)=\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\pi_{k}}}(\pi)\).

Our approach is to reduce RL with average rewards to a _sequence_ of discount sum problems with increasingly high discount factor, which are solved with increasingly high accuracy. Our crucial insight is that eventually the approximately optimal solutions to the discounted problems will also be limit average optimal (see Appendix D for a proof):

**Lemma 15**.: _Suppose \(\gamma_{k}\nearrow 1\), \(\epsilon_{k}\searrow 0\) and suppose each \(\pi_{k}\) is a memoryless policy. Then there exists \(k_{0}\) such that for all \(K\ni k\geq k_{0}\), \(\pi_{k}\) is limit average optimal, where \(K\) is the set of \(k\in\mathbb{N}\) satisfying \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\uparrow_{k}}}(\pi_{k})\geq\mathcal{J }^{\mathcal{M}}_{\mathcal{R}^{\uparrow_{k}}}(\pi)-\epsilon_{k}\) for all memoryless policies \(\pi\)._

Our proof harnesses yet another notion of optimality: a policy \(\pi\) is _Blackwell optimal_ (cf. [6] and [22, Sec. 8.1]) if there exists \(\overline{\gamma}\in(0,1)\) such that \(\pi\) is \(\gamma\)-discount optimal for all \(\overline{\gamma}\leq\gamma<1\). It is well-known that memoryless Blackwell optimal policies always exist [6, 18] and they are also limit-average optimal [22, 18].

Thanks to the PAC (probably approximately correct) learnability of RL with discounted rewards [26, 36], there exists an algorithm Discounted which receives as inputs a simulator for \(\mathcal{M}\), \(\mathcal{R}\) as well as \(\gamma,\epsilon\) and \(\delta\), and with probability \(1-\delta\) returns an \(\epsilon\)-optimal memoryless policy for discount factor \(\gamma\). In view of Lemma 15, our approach is to run the PAC algorithm for discount-sum RL for increasingly large discount factors \(\gamma\) and increasingly low \(\delta\) and \(\epsilon\) (Algorithm 1).

**Theorem 16**.: _RL with average reward functions can be learned in the limit by Algorithm 1: almost surely there exists \(k_{0}\in\mathbb{N}\) such that \(\pi_{k}\) is limit-average optimal for \(k\geq k_{0}\)._

Proof.: Using the definition for \(K\) of Lemma 15 of iterations where the PAC-MDP algorithm succeeds,

\[\mathbb{E}\left[\#(\mathbb{N}\setminus K)\right]\leq\sum_{k\in\mathbb{N}} \mathbb{P}[\text{PAC-MDP fails in iteration }k]\leq\sum_{k\in\mathbb{N}}\delta_{k}=\sum_{k\in\mathbb{N}}\frac{1}{k^{2}}<\infty\]

The claim follows immediately with Lemma 15. 

Next, we turn to the more general case of reward _machines_. [23, 24] observe that optimal policies for reward machines can be learned by learning optimal policies for the modified MDP which additionally tracks the state the reward machine is in and assigns rewards accordingly. We conclude at once:

**Corollary 17**.: _RL with average reward machines can be learned in the limit._

Finally, harnessing Theorem 12 we resolve Open Problem 4 of [2]:

**Theorem 18**.: _RL with \(\omega\)-regular and LTL objectives can be learned in the limit._

Discussion.Algorithm 1 makes independent calls to black box algorithms for discount sum rewards. Many such algorithms with PAC guarantees are model based (e.g. [26, 36]) and sample from the MDP to obtain suitable approximations of the transition probabilities. Thus, Algorithm 1 can be improved in practice by re-using approximations obtained in earlier iterations and refining them.

## 7 Related Work and Conclusion

The connection between acceptance of \(\omega\)-regular languages in the product MDP and AECs is well-known in the field of probabilistic model checking [4, 12]. As an alternative to DRAs [41, 14, 32], Limit Deterministic Buchi Automata [35] have been employed to express \(\omega\)-regular languages for RL [38, 7, 10, 20, 21].

A pioneering work on RL for \(\omega\)-regular rewards is [41], which expresses \(\omega\)-regular objectives using Deterministic Rabin Automata. Similar RL approaches for \(\omega\)-regular objectives can also be found in [14, 38, 10, 15]. The authors of [15, 30] approach RL for \(\omega\)-regular objectives directly by studying the reachability of AECs in the product MDP and developing variants of the R-MAX algorithm [8] to find optimal policies. However, these approaches require prior knowledge of the MDP, such as the structure of the MDP, the optimal \(\epsilon\)-return mixing time [15], or the \(\epsilon\)-recurrence time [30].

Various studies have explored reductions of \(\omega\)-regular objectives to discounted rewards, and subsequently applied Q-learning and its variants for learning optimal policies [7, 32, 20, 21, 16]. In a similar spirit, [39] present a translation from LTL objectives to _eventual discounted_ rewards, where only strictly positive rewards are discounted. These translations are generally not optimality preserving unless the discount factor is selected in a suitable way. Again, this is impossible without prior knowledge of the exact probability transition functions in the MDP.

[25] propose a translation to limit-average rewards for \(\omega\)-regular specifications which are also _absolute liveness_ properties. (In particular, optimal policies satisfy such specifications with either probability \(0\) or \(1\).) Their translation is optimality-preserving provided the MDP is _communicating_ and the magnitute of penalty rewards in their construction are chosen sufficiently large (which requires knowledge of the MDP).

Furthermore, whilst there are numerous convergent RL algorithms for average rewards for _unichain_ or _communicating8_ MDPs (e.g. [8, 43, 17, 33, 3, 40]), it is unknown whether such an algorithm exists for general multichain MDPs with a guaranteed convergence property. In fact, a negative result in [2, 5] shows that there is no PAC (probably approximately correct) algorithm for LTL objectives and limit-average rewards when the MDP transition probabilities are unknown.

Footnote 8: These assumptions generally fail for our setting, where in view of Corollary 17, MDP states also track the states of the reward machine. For instance, in the reward machine in Fig. 2a it is impossible to reach \(u_{1}\) from \(u_{2}\).

[8] have proposed an algorithm with PAC guarantees provided \(\epsilon\)-return mixing times are known. They informally argue that for fixed sub-optimality tolerance \(\epsilon\), this assumption can be lifted by guessing increasingly large candidates for the \(\epsilon\)-return mixing time. This yields \(\epsilon\)-approximately optimal policies in the limit. However, it is not clear how to asymptotically obtain exactly optimal policies as this would require simultaneously decreasing \(\epsilon\) and increasing guesses for the \(\epsilon\)-return mixing time (which depends on \(\epsilon\)).

Conclusion.We have presented an optimality-preserving translation from \(\omega\)-regular objectives to limit-average rewards furnished by reward machines. As a consequence, off-the-shelf RL algorithms for average rewards can be employed in conjunction with our translation to learn policies for \(\omega\)-regular objectives. Furthermore, we have developed an algorithm asymptotically learning provably optimal policies for limit-average rewards. Hence, also optimal policies for \(\omega\)-regular and LTL objectives can be learned in the limit. Our results provide affirmative answers to two open problems in [2].

Limitations.We focus on MDPs with finite state and action sets and assume states are fully observable. The assumption of Section 4 that the support of the MDP's probability transition function is known is eliminated in Section 5. Whilst the size of our general translation--the first optimality-preserving translation--is exponential, the additional knowledge in Section 4 enables a construction of the reward machine of the same size as the DRA expressing the objective. Hence, we conjecture that this size is minimal relative to the DRA specification. Since RL with average rewards is not PAC learnable, we cannot possibly provide finite-time complexity guarantees of our Algorithm 1.

## Acknowledgments and Disclosure of Funding

This research is supported by the National Research Foundation, Singapore, under its RSS Scheme (NRFRSS2022-009).

## References

* [1] Luca Alfaro. _Formal Verification of Probabilistic Systems_. Phd thesis, Stanford University, Stanford, CA, USA, 1998.
* [2] Rajeev Alur, Suguman Bansal, Osbert Bastani, and Kishor Jothimurugan. A framework for transforming specifications in reinforcement learning. In Jean-Francois Raskin, Krishnendu Chatterjee, Laurent Doyen, and Rupak Majumdar, editors, _Principles of Systems Design: Essays Dedicated to Thomas A. Henzinger on the Occasion of His 60th Birthday_, pages 604-624, Cham, 2022. Springer Nature Switzerland.
* [3] Peter Auer, Thomas Jaksch, and Ronald Ortner. Near-optimal regret bounds for reinforcement learning. In D. Koller, D. Schuurmans, Y. Bengio, and L. Bottou, editors, _Advances in Neural Information Processing Systems_, volume 21. Curran Associates, Inc., 2008.
* [4] Christel Baier and Joost-Pieter Katoen. _Principles of Model Checking_. The MIT Press, 2008.
* 32nd International Conference, CAV 2020, Los Angeles, CA, USA, July 21-24, 2020, Proceedings, Part II_, volume 12225 of _Lecture Notes in Computer Science_, pages 304-326. Springer, 2020.
* 726, 1962.
* [7] Alper Kamil Bozkurt, Yu Wang, Michael M. Zavlanos, and Miroslav Pajic. Control synthesis from Linear Temporal Logic specifications using model-free reinforcement learning. _2020 IEEE International Conference on Robotics and Automation (ICRA)_, pages 10349-10355, 2019.
* A general polynomial time algorithm for near-optimal reinforcement learning. _J. Mach. Learn. Res._, 3(null):213-231, mar 2003.
* [9] Tomas Brazdil, Krishnendu Chatterjee, Martin Chmelik, Vojtech Forejt, Jan Kretinsky, Marta Kwiatkowska, David Parker, and Mateusz Ujma. Verification of Markov Decision Processes using learning algorithms. In _Automated Technology for Verification and Analysis: 12th International Symposium, ATVA 2014, Sydney, NSW, Australia, November 3-7, 2014, Proceedings 12_, pages 98-114. Springer, 2014.
* [10] Mingyu Cai, Shaoping Xiao, Zhijun Li, and Zhen Kan. Optimal probabilistic motion planning with potential infeasible LTL constraints. _IEEE Transactions on Automatic Control_, 68(1):301-316, 2023.
* [11] Krishnendu Chatterjee and Monika Henzinger. Faster and dynamic algorithms for maximal end-component decomposition and related graph problems in probabilistic verification. In Dana Randall, editor, _Proceedings of the Twenty-Second Annual ACM-SIAM Symposium on Discrete Algorithms, SODA 2011, San Francisco, California, USA, January 23-25, 2011_, pages 1318-1336. SIAM, 2011.
* [12] Luca de Alfaro. Computing minimum and maximum reachability times in probabilistic systems. In Jos C. M. Baeten and Sjouke Mauw, editors, _CONCUR'99 Concurrency Theory_, pages 66-81, Berlin, Heidelberg, 1999. Springer Berlin Heidelberg.
* [13] Vektor Dewanto, George Dunn, Ali Eshragh, Marcus Gallagher, and Fred Roosta. Average-reward model-free reinforcement learning: A systematic review and literature mapping, 2021.
* [14] Xuchu Ding, Stephen L. Smith, Calin Belta, and Daniela Rus. Optimal control of Markov Decision Processes with Linear Temporal Logic constraints. _IEEE Transactions on Automatic Control_, 59(5):1244-1257, 2014.
* [15] Jie Fu and Ufuk Topcu. Probably approximately correct MDP learning and control with Temporal Logic constraints. In Dieter Fox, Lydia E. Kavraki, and Hanna Kurniawati, editors, _Robotics: Science and Systems X, University of California, Berkeley, USA, July 12-16, 2014_, 2014.
* [16] Qitong Gao, Davood Hajinezhad, Yan Zhang, Yiannis Kantaros, and Michael M. Zavlanos. Reduced variance deep reinforcement learning with Temporal Logic specifications. In _Proceedings of the 10th ACM/IEEE International Conference on Cyber-Physical Systems_, ICCPS '19, page 237-248, New York, NY, USA, 2019. Association for Computing Machinery.
* [17] Abhijit Gosavi. Reinforcement learning for long-run average cost. _European Journal of Operational Research_, 155(3):654-674, 2004. Traffic and Transportation Systems Analysis.
* 16, 2023_, 2023.
* [19] Ernst Moritz Hahn, Mateo Perez, Sven Schewe, Fabio Somenzi, Ashutosh Trivedi, and Dominik Wojtczak. Omega-regular objectives in model-free reinforcement learning. In Tomas Vojnar and Lijun Zhang, editors, _Tools and Algorithms for the Construction and Analysis of Systems_, pages 395-412, Cham, 2019. Springer International Publishing.
* [20] Hosein Hasanbeig, Daniel Kroening, and Alessandro Abate. Certified reinforcement learning with logic guidance. _Artificial Intelligence_, 322:103949, 2023.
* [21] Mohammadhosein Hasanbeig, Daniel Kroening, and Alessandro Abate. Deep reinforcement learning with Temporal Logics. In Nathalie Bertrand and Nils Jansen, editors, _Formal Modeling and Analysis of Timed Systems_, pages 1-22, Cham, 2020. Springer International Publishing.

* [22] Arie Hordijk and Alexander A. Yushkevich. _Blackwell Optimality_, pages 231-267. Springer US, Boston, MA, 2002.
* [23] Rodrigo Toro Icarte. _Reward Machines_. Phd thesis, University of Toronto, 03 2022.
* [24] Rodrigo Toro Icarte, Toryn Klassen, Richard Valenzano, and Sheila McIlraith. Using reward machines for high-level task specification and decomposition in reinforcement learning. In Jennifer Dy and Andreas Krause, editors, _Proceedings of the 35th International Conference on Machine Learning_, volume 80 of _Proceedings of Machine Learning Research_, pages 2107-2116. PMLR, 10-15 Jul 2018.
* [25] Milad Kazemi, Mateo Perez, Fabio Somenzi, Sadegh Soudjani, Ashutosh Trivedi, and Alvaro Velasquez. Translating omega-regular specifications to average objectives for model-free reinforcement learning. In Piotr Faliszewski, Viviana Mascardi, Catherine Pelachaud, and Matthew E. Taylor, editors, _21st International Conference on Autonomous Agents and Multiagent Systems, AAMAS 2022, Auckland, New Zealand, May 9-13, 2022_, pages 732-741. International Foundation for Autonomous Agents and Multiagent Systems (IFAAMAS), 2022.
* [26] Michael Kearns and Satinder Singh. Near-optimal reinforcement learning in polynomial time. _Machine Learning_, 49:209-232, 2002.
* [27] Bakhadyr Khoussainov and Anil Nerode. _Automata Theory and its Applications_. Birkhauser Boston, Boston, MA, 2001.
* [28] Achim Klenke. _Probability Theory: A Comprehensive Course_. Universitext. Springer London, 2014.
* [29] Dexter Kozen. _Theory of Computation_. Springer, London, 2006.
* [30] Mateo Perez, Fabio Somenzi, and Ashutosh Trivedi. A PAC learning algorithm for LTL and omega-regular objectives in MDPs. _Proceedings of the AAAI Conference on Artificial Intelligence_, 38(19):21510-21517, 2024.
* [31] Martin L. Puterman. _Markov Decision Processes: Discrete Stochastic Dynamic Programming_. John Wiley & Sons, Inc., USA, 1st edition, 1994.
* [32] Dorsa Sadigh, Eric S. Kim, Samuel Coogan, S. Shankar Sastry, and Sanjit A. Seshia. A learning based approach to control synthesis of Markov Decision Processes for Linear Temporal Logic specifications. In _53rd IEEE Conference on Decision and Control_, pages 1091-1096, 2014.
* [33] Anton Schwartz. A reinforcement learning method for maximizing undiscounted rewards. In _International Conference on Machine Learning_, 1993.
* [34] Daqian Shao and Marta Kwiatkowska. Sample efficient model-free reinforcement learning from LTL specifications with optimality guarantees. _IJCAI International Joint Conference on Artificial Intelligence_, 2023-Augus:4180-4189, 2023.
* [35] Salomon Sickert, Javier Esparza, Stefan Jaax, and Jan Kretinsky. Limit-deterministic Buchi automata for Linear Temporal Logic. In Swarat Chaudhuri and Azadeh Farzan, editors, _Computer Aided Verification_, pages 312-332, Cham, 2016. Springer International Publishing.
* [36] Alexander L. Strehl, Lihong Li, and Michael L. Littman. Reinforcement learning in finite MDPs: PAC analysis. _J. Mach. Learn. Res._, 10:2413-2444, 2009.
* [37] Richard S. Sutton and Andrew G. Barto. _Reinforcement Learning: An Introduction_. A Bradford Book, Cambridge, MA, USA, 2018.
* [38] Cameron Voloshin, Hoang Le, Swarat Chaudhuri, and Yisong Yue. Policy optimization with Linear Temporal Logic constraints. _Advances in Neural Information Processing Systems_, 35:17690-17702, 2022.
* [39] Cameron Voloshin, Abhinav Verma, and Yisong Yue. Eventual discounting Temporal Logic counterfactual experience replay. In Andreas Krause, Emma Brunskill, Kyunghyun Cho, Barbara Engelhardt, Sivan Sabato, and Jonathan Scarlett, editors, _International Conference on Machine Learning, ICML 2023, 23-29 July 2023, Honolulu, Hawaii, USA_, volume 202 of _Proceedings of Machine Learning Research_, pages 35137-35150. PMLR, 2023.

* [40] Yi Wan, Abhishek Naik, and Richard S. Sutton. Learning and planning in average-reward Markov Decision Processes. In Marina Meila and Tong Zhang, editors, _Proceedings of the 38th International Conference on Machine Learning, ICML 2021, 18-24 July 2021, Virtual Event_, volume 139 of _Proceedings of Machine Learning Research_, pages 10653-10662. PMLR, 2021.
* [41] Eric M. Wolff, Ufuk Topcu, and Richard M. Murray. Robust control of uncertain Markov Decision Processes with Temporal Logic specifications. In _2012 IEEE 51st IEEE Conference on Decision and Control (CDC)_, pages 3372-3379, 2012.
* [42] Cambridge Yang, Michael L. Littman, and Michael Carbin. On the (in)tractability of reinforcement learning for LTL objectives. _IJCAI International Joint Conference on Artificial Intelligence_, pages 3650-3658, 2022.
* [43] Shangdong Yang, Yang Gao, Bo An, Hao Wang, and Xingguo Chen. Efficient average reward reinforcement learning using constant shifting values. _Proceedings of the AAAI Conference on Artificial Intelligence_, 30(1), 2016.

## Appendix A Supplementary Materials for Section 3

Recall that a \(\omega\)-regular language \(L\) is prefix-independent if for every infinite label sequence \(w\in(2^{\mathcal{AP}})^{\omega}\), we have \(w\in L\) iff \(w^{\prime}\in L\) for every suffix \(w^{\prime}\) of \(w\). We prove that there is no optimality-preserving translation for reward functions regardless of whether \(L\) is prefix-independent or not. The prefix-dependent case was given in Section 3. Here we focus on the other case:

**Proposition 19**.: _There exists a tuple \((S,A,s_{0},\lambda)\) and a prefix-independent \(\omega\)-regular language \(L\) for which it is impossible to find a reward function \(\mathcal{R}:S\times A\times S\to\mathbb{R}\) such that for every probability transition \(P\), let \(\mathcal{M}=(S,A,s_{0},P,\lambda)\), then every \(\mathcal{R}^{\text{avg}}\)-optimal policy of \(\mathcal{M}\) is also \(L\)-optimal (i.e. maximizing the probability of membership in \(L\))._

Proof.: Our proof technique is based on the fact that we can modify the transition probability function. Consider the MDP in Fig. 2(a), where the objective is to visit either \(s_{1}\) or \(s_{3}\) infinitely often. It can be checked that the DRA in Fig. 2(b) captures the given objective and the language accepted by \(\mathcal{A}\) is prefix-independent. There are only two deterministic memoryless policies: \(\pi_{1}\), which consistently selects action \(a\), and \(\pi_{2}\), which consistently selects action \(b\). For the sake of contradiction, let's assume the existence of a reward function \(\mathcal{R}\) that preserves optimality for every transition probability function \(P\). Pick \(p_{1}=1\) and \(p_{2}=0\). Then \(\mathcal{J}_{\mathcal{A}}^{\mathcal{M}}(\pi_{1})=1\) and \(\mathcal{J}_{\mathcal{A}}^{\mathcal{M}}(\pi_{2})=0\), which implies that \(\pi_{1}\) is \(\mathcal{A}\)-optimal whereas \(\pi_{2}\) is not. Thus \(\mathcal{R}(s_{1},a,s_{1})=\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{ M}}(\pi_{1})>\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\pi_{2})= \mathcal{R}(s_{0},b,s_{0})\). Now, assume \(p_{1},p_{2}\in(0,1)\). Accordingly, we have \(\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\pi_{1})\geq p_{1} \mathcal{R}(s_{1},a,s_{1})\) and we can deduce that (e.g. by solving the linear equation system described in [31, SS8.2.3]) \(\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\pi_{2})=\frac{p_{2}}{2 -p_{2}}\mathcal{R}(s_{0},b,s_{0})+\frac{1-p_{2}}{2-p_{2}}\left(\mathcal{R}(s_{ 0},b,s_{3})+\mathcal{R}(s_{3},b,s_{0})\right)\). As a result:

\[\lim_{p_{1}\to 1}\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\pi_{1}) \;\geq\;\mathcal{R}(s_{1},a,s_{1})\;>\;\mathcal{R}(s_{0},b,s_{0})\;=\;\lim_{p _{2}\to 1}\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\pi_{2})\]

Consequently, if \(p_{1},p_{2}\) are sufficiently large then \(\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\pi_{1})>\mathcal{J}_{ \mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\pi_{2})\). However, this contradicts to the fact that \(\pi_{2}\) is \(\mathcal{A}\)-optimal and \(\pi_{1}\) is not, since \(\mathcal{J}_{\mathcal{A}}^{\mathcal{M}}(\pi_{2})=1>p_{1}=\mathcal{J}_{\mathcal{ A}}^{\mathcal{M}}(\pi_{1})\). Hence, there is no such reward function \(\mathcal{R}\). 

## Appendix B Supplementary Materials for Section 4

**Lemma 20**.: _Every AEC contains an ASEC._

Proof.: Consider an AEC \(\mathcal{C}=(T,\operatorname{Act})\) of \(\mathcal{M}_{\mathcal{A}}\). We will prove this by using induction on the number of actions in \(\mathcal{C}\), denoted as \(\mathsf{size}(\mathcal{C}):=\sum_{s\in T}|\operatorname{Act}(s)|\geq 1\). For the base case where \(\mathsf{size}(\mathcal{C})=1\), it can be deduced that \(\mathcal{C}\) consists of only one accepting state with a self-loop. Therefore, \(\mathcal{C}\) itself is an ASEC.

Figure 3: Counter-example for prefix-independent objectives.

Now, let's assume that \(\text{size}(\mathcal{C})=k+1\geq 2\). If \(\mathcal{C}\) is already an ASEC, then we are done. Otherwise, there exists a state \(s\in T\) such that \(|\operatorname{Act}(s)|>1\). Since \(\mathcal{C}\) is strongly connected, there exists a finite path \(\rho=s\alpha s_{1}a_{1}\ldots s_{n}a_{n}s_{F}\) where \(s_{F}\) is an accepting state and all the states \(s_{1},\ldots,s_{n}\) are different from \(s\). Let \(a^{\prime}\in\operatorname{Act}(s)\) such that \(a^{\prime}\neq a\). We construct a new AEC \(\mathcal{C}^{\prime}=(T^{\prime},\operatorname{Act}^{\prime})\) by first removing \(a^{\prime}\) from \(\operatorname{Act}(s)\) and then removing all the states that are no longer reachable from \(s\) along with their associated transitions. It is important to note that after the removal, \(s_{F}\in T^{\prime}\) since we can reach \(s_{F}\) from \(s\) without taking the action \(a^{\prime}\). (Besides, the graph is still strongly connected.) Since \(\text{size}(\mathcal{C}^{\prime})\leq k\), we can apply the induction hypothesis to conclude that \(\mathcal{C}^{\prime}\) contains an ASEC, thus completing the proof. 

**Lemma 8**.: _Almost surely, if \(\rho\) is accepted by \(\mathcal{A}\) then \(\rho^{\otimes}\) reaches a state in some ASEC \(\mathcal{C}_{i}\) of \(\mathcal{M}\otimes\mathcal{A}\)._

To proof this result, we recall a well-known result in probabilistic model checking that with probability of one (wpo), every run \(\rho\) of the policy \(\pi\) eventually stays in one of the ECs of \(\mathcal{M}_{\mathcal{A}}\) and visits every transition in that EC infinitely often. To state this formally, we define for any run \(\rho=s_{0}a_{0}s_{1}\cdots\),

\[\operatorname{InfSA}(\rho):=\{(s,a)\in S\times A\mid\{i\in\mathbb{N}\mid s_{i }=s\wedge a_{i}=a\}|=\infty\}\]

the set of state-action-pairs occurring infinitely often in \(\rho\). Furthermore, a state-action set \(\chi\subseteq S\times A\) defines a sub-MDP \(\operatorname{sub}(\chi):=(T,\operatorname{Act})\), where

\[T:=\{s\in S\mid(s,a)\in\chi\text{ for some }a\in A\}\qquad\qquad\operatorname{ Act}(s):=\{a\mid(s,a)\in\chi\}\]

**Lemma 21** ([12]).: \(\mathbb{P}_{\rho\sim\mathcal{D}_{\pi}^{\mathcal{M}\otimes\mathcal{A}}}[ \operatorname{sub}(\operatorname{InfSA}(\rho))\) _is an end component\(]=1\)._

For the sake of self-containedness, we recall the proof of [12].

Proof.: We start with two more definitions: for any sub-MDP \((T,\operatorname{Act})\)[1], let

\[\operatorname{sa}(T,\operatorname{Act}):=\{(s,a)\in T\times A\mid a\in \operatorname{Act}(s)\}\]

be the set of state-action pairs \((s,a)\) such that \(a\) is enabled in \(s\). Finally, let

\[\Omega^{(T,\operatorname{Act})}:=\{\rho\in\operatorname{Runs}(S,A)\mid \operatorname{InfSA}(\rho)=\operatorname{sa}(T,\operatorname{Act})\}\]

be the set of runs such that action \(a\) is taken infinitely often in state \(s\) iff \(s\in T\) and \(a\in\operatorname{Act}(s)\). Note that the \(\Omega^{(T,\operatorname{Act})}\) constitute a partition of \(\operatorname{Runs}(S,A)\).

Therefore, it suffices to establish for any sub-MDP \((T,\operatorname{Act})\), \((T,\operatorname{Act})\) is an end-component or \(\mathbb{P}[\rho\in\Omega^{(T,\operatorname{Act})}]=0\).

Let \((T,\operatorname{Act})\) be an arbitrary sub-MDP. First, suppose there exist \(s\in T\) and \(a\in\operatorname{Act}(t)\) such that \(p:=\sum_{s^{\prime}\in T}\Delta(t,a,t^{\prime})<1\). By definition each \(\rho\in\Omega^{(T,\operatorname{Act})}\) takes action \(a\) in state \(s\) infinitely often. Hence, not only \(\mathbb{P}[\rho\in\Omega^{(T,\operatorname{Act})}]\leq p^{k}\) for all \(k\in\mathbb{N}\) but also \(\mathbb{P}[\rho\in\Omega^{(T,\operatorname{Act})}]=0\).

Thus, we can assume that for all \(s\in T\) and \(a\in\operatorname{Act}(t)\), \(\sum_{s^{\prime}\in T}\Delta(t,a,t^{\prime})=1\). If \(\Omega^{(T,\operatorname{Act})}=\emptyset\) then clearly \(\mathbb{P}[\rho\in\Omega^{(T,\operatorname{Act})}]=0\) follows. Otherwise, take any \(\rho=s_{0}a_{0}a_{1}\cdots\in\Omega^{(T,\operatorname{Act})}\), and let \(t,t^{\prime}\in T\) be arbitrary. We show that there exists a connecting path in \((T,\rightarrow_{\operatorname{Act}})\), which implies that \((T,\operatorname{Act})\) is an end component.

Evidently, there exists an index \(i_{0}\) such that all state-action pairs occur infinitely often in \(\rho\), i.e.

\[\{(s_{i_{0}},a_{i_{0}}),(s_{i_{0}+1},a_{i_{0}+1}),\ldots\}=\operatorname{InfSA} (\rho)\]

Thus, for all \(i\geq i_{0}\), \(s_{i}\in T\) and \(a_{i}\in\operatorname{Act}(s_{i})\), and for all \(i^{\prime}>i\geq i_{0}\), there is a path from \(s_{i}\) to \(s_{i^{\prime}}\) in \((T,\rightarrow_{\operatorname{Act}})\). Finally, it suffices to note that clearly for some \(i^{\prime}>i=i_{0}\), \(s_{i}=t\) and \(s_{i^{\prime}}=t^{\prime}\). 

Proof of Lemma 8.: By Lemma 21, almost surely \(\operatorname{sub}(\operatorname{InfSA}(\rho))\) is an accepting end component. Clearly, \(\rho\) is only accepted by the product MDP if this end component is an _accepting_ EC. By Lemma 20 this AEC contains an ASEC. Therefore, by definition of \(\operatorname{sub}(\operatorname{InfSA}(\rho))\), \(\rho\) almost surely in particular _enters_ some ASEC. Finally, since the \(\mathcal{C}_{1},\ldots,\mathcal{C}_{n}\) cover all states in ASECs, \(\rho\) almost surely enters some \(\mathcal{C}_{i}\).

Before turning to the proof of Lemma 10, let \(\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\rho)=\liminf_{t\to\infty} \frac{1}{t}\cdot\sum_{i=0}^{t-1}\,r_{i}\) denote the limit-average reward of a run \(\rho\). Note that, for any run \(\rho\), \(\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\rho)\in\{0,1\}\). Thus, by the dominated convergence theorem [28, Cor. 6.26],

\[\mathbb{P}_{\rho\sim\mathcal{D}_{\pi}^{\mathcal{M}}}\left[\mathcal{ J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\rho)=1\right]\ =\ \mathbb{E}_{\rho\sim\mathcal{D}_{\pi}^{\mathcal{M}}}[\mathcal{J}_{\mathcal{R}^{ \text{avg}}}^{\mathcal{M}}(\rho)]\ =\ \liminf_{t\to\infty}\mathbb{E}_{\rho\sim\mathcal{D}_{\pi}^{ \mathcal{M}}}\left[\frac{1}{t}\cdot\sum_{i=0}^{t-1}\,r_{i}\right]\ =\ \mathcal{J}_{\mathcal{R}^{\text{avg}}}^{ \mathcal{M}}(\pi)\] (3)

**Lemma 10**.: _Let \(P\) be a probability transition function with support \(E\) and \(\mathcal{M}:=(S,A,s_{0},P)\)._

1. _For every policy_ \(\pi\)_,_ \(\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\pi)\leq\mathcal{J}_{ \mathcal{A}}^{\mathcal{M}}(\pi)\)_._
2. _For every policy_ \(\pi\)_, there exists some policy_ \(\pi^{\prime}\) _satisfying_ \(\mathcal{J}_{\mathcal{A}}^{\mathcal{M}}(\pi)\leq\mathcal{J}_{\mathcal{R}^{ \text{avg}}}^{\mathcal{M}}(\pi^{\prime})\)_._

Proof.:
1. For any run \(\rho\), \(\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\rho)=1\) only if \(\rho^{\otimes}\) enters a \(\mathcal{C}_{i}\) and never leaves it. (\(\rho^{\otimes}\) might have entered other \(\mathcal{C}_{j}\)'s earlier but then those necessarily need to overlap with yet another \(\mathcal{C}_{k}\) such that \(i\leq k<j\) to avoid being trapped in state \(\bot\), resulting in \(\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\rho)=1\). Furthermore, this \(\mathcal{C}_{i}\) can only overlap with \(\mathcal{C}_{j}\) if \(i<j\). Otherwise, the reward machine would have enforced transitioning to \(\mathcal{C}_{j}\).) Since \(\mathcal{C}_{i}\) is an ASEC, \(\rho^{\otimes}\) is accepted by the product MDP \(\mathcal{M}\otimes\mathcal{A}\). Hence, by Eqs. (2) and (3), \[\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\pi)\ =\ \mathbb{P}_{\rho\sim \mathcal{D}_{\pi}^{\mathcal{M}}}\left[\mathcal{J}_{\mathcal{R}^{\text{avg}}} ^{\mathcal{M}}(\rho)=1\right]\ \leq\ \mathbb{P}_{\rho\sim\mathcal{D}_{\pi}^{\mathcal{M}}}\left[ \rho^{\otimes}\text{ accepted by }\mathcal{M}\otimes\mathcal{A}\right]\ =\ \mathcal{J}_{ \mathcal{A}}^{\mathcal{M}}(\pi)\]
2. Let \(\pi\) be arbitrary. For a run \(s_{0}a_{0}\cdots\) let \(q_{t}\) be the state of the DRA in step \(t\). Define \(\pi^{\prime}\) to follow \(\pi\) until reaching \(s_{t}\) such that \((s_{t},q_{t})\in T_{1}\cup\cdots\cup T_{n}\). Henceforth, we select the (unique) action guaranteeing to stay in the \(\mathcal{C}_{i}\) with minimal \(i\) including the current state, i.e. \(\operatorname{Act}_{(q,u)}(q,u)\). Formally9, Footnote 9: We slightly abuse notation in the “otherwise”-case and denote by \(\operatorname{Act}_{(s_{t},q_{t})}(s_{t},q_{t})\) the distribution selecting the state in the singleton set \(\operatorname{Act}_{(s_{t},q_{t})}(s_{t},q_{t})\) with probability 1. \[\pi^{\prime}(s_{0}a_{0}\cdots s_{t})\ :=\ \begin{cases}\pi(s_{0}a_{0}\cdots s_{t})&\text{if }(s_{t},q_{t}) \not\in T_{1}\cup\cdots\cup T_{n}\\ \operatorname{Act}_{(s_{t},q_{t})}(s_{t},q_{t})&\text{otherwise}\end{cases}\] (4) Note that whenever a run \(\rho\sim\mathcal{D}_{\pi^{\prime}}^{\mathcal{M}}\) follows the modified policy \(\pi^{\prime}\) and its induced run \(\rho^{\otimes}\) reaches some ASEC \(\mathcal{C}_{i}\) then \(\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\rho)=1\). Thus, \[\mathbb{P}_{\rho\sim\mathcal{D}_{\pi^{\prime}}^{\mathcal{M}}}[\rho^{\otimes} \text{ reaches some }\mathcal{C}_{i}]\ \leq\ \mathbb{E}_{\rho\sim\mathcal{D}_{\pi^{\prime}}^{\mathcal{M}}}[ \mathcal{J}_{\mathcal{R}^{\text{avg}}}^{\mathcal{M}}(\rho)]\ =\ \mathcal{J}_{\mathcal{R}^{\text{avg}}}^{ \mathcal{M}}(\pi^{\prime})\] Furthermore, by Lemma 8 almost surely, every induced run \(\rho^{\otimes}\) accepted by the product MDP must reach some \(\mathcal{C}_{i}\). Consequently, by Eq. (2), \[\mathcal{J}_{\mathcal{A}}^{\mathcal{M}}(\pi) =\mathbb{P}_{\rho\sim\mathcal{D}_{\pi}^{\mathcal{M}}}[\rho^{ \otimes}\text{ is accepted by }\mathcal{M}\otimes\mathcal{A}]\] \[\leq\mathbb{P}_{\rho\sim\mathcal{D}_{\pi}^{\mathcal{M}}}[\rho^{ \otimes}\text{ reaches some }\mathcal{C}_{i}]\] \[=\mathbb{P}_{\rho\sim\mathcal{D}_{\pi^{\prime}}^{\mathcal{M}}}[ \rho^{\otimes}\text{ reaches some }\mathcal{C}_{i}]\leq\mathcal{J}_{\mathcal{R}^{\text{avg}}}^{ \mathcal{M}}(\pi^{\prime})\] In the penultimate step, we have exploited the fact that \(\pi\) and \(\pi^{\prime}\) agree until reaching the first \(\mathcal{C}_{i}\).

Figure 4: Reward machine yielded by our construction in Section 4 for the running example.

### Efficient Construction

We consider a different collection \(\mathcal{C}_{1},\ldots,\mathcal{C}_{n}\) of ASECs:

Suppose \(\mathcal{C}^{\prime}_{1},\ldots,\mathcal{C}^{\prime}_{n}\) is a collection of AECs (not necessarily simple ones) containing all states in AECs. Then we consider ASECs \(\mathcal{C}_{1},\ldots,\mathcal{C}_{n}\) such that \(\mathcal{C}_{i}\) is contained in \(\mathcal{C}^{\prime}_{i}\).

The definition of the reward machine in Section 4.2 and the extension in Section 5 do not need to be changed. Next, we argue the following:

1. This collection can be obtained efficiently (in time polynomial in the size of the MDP and DRA).
2. Lemma 10 and hence the correctness result (Theorem 9) still hold.

For 1. it is well-known that a collection of maximal AECs (covering all states in AECs) can be found efficiently using graph algorithms [1, Alg. 3.1], [15, 11] and [4, Alg. 47 and Lemma 10.125]. Subsequently, Lemma 20 can be used to obtain an ASEC contained in each of them. In particular, note that the proof of Lemma 20 immediately gives rise to an efficient algorithm. (Briefly, we iteratively remove actions and states whilst querying reachability properties.)

For 2., the first part of Lemma 10 clearly still holds. For the second, we modify policy \(\pi\) as follows: Once, \(\pi\) enters a maximal accepting end component we select an action on the shortest path to the respective ASEC \(\mathcal{C}_{i}\) inside \(\mathcal{C}^{\prime}_{i}\). Once we enter one of the \(\mathcal{C}_{i}\) we follow the actions specified by the ASEC as before. Observe that the probability that under an AEC is entered is the same as the probability that one of the \(\mathcal{C}_{i}\) is entered under the modified policy. The lemma, hence Theorem 9, follow.

## Appendix C Supplementary Materials for Section 5

**Lemma 14**.: _Suppose \(\mathcal{M}=(S,A,s_{0},P)\) is an arbitrary MDP._

1. _For every policy_ \(\pi\)_,_ \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\pi)\leq\mathcal{J}^{ \mathcal{M}}_{\mathcal{A}}(\pi)\)_._
2. _For every policy_ \(\pi\)_, there exists some policy_ \(\pi^{\prime}\) _satisfying_ \(\mathcal{J}^{\mathcal{M}}_{\mathcal{A}}(\pi)\leq\mathcal{J}^{\mathcal{M}}_{ \mathcal{R}^{\text{avg}}}(\pi^{\prime})\)_._

Proof.:
1. For a run \(\rho\), let \(E_{\rho}\) be the set of transitions encountered in the product MDP. Note that \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\rho)=1\) only if \(\rho^{\otimes}\) enters some \(\mathcal{C}^{E_{\rho}}_{i}\) and never leaves it. (\(\rho^{\otimes}\) might have entered other \(\mathcal{C}^{E}_{j}\)s earlier for \(E\subseteq E_{\rho}\).) With probability 1, \(E_{\rho}\) contains all the transitions present in \(\mathcal{C}^{E_{\rho}}_{i}\) in the actual MDP. (NB possible transitions outside of \(\mathcal{C}^{E_{\rho}}_{i}\) might be missing from \(E_{\rho}\).) In particular, with probability 1, \(\mathcal{C}^{E_{\rho}}_{i}\) is also an ASEC for the true unknown MDP and \(\rho^{\otimes}\) is accepted by the product MDP \(\mathcal{M}\otimes\mathcal{A}\). Consequently, using Eq. (3) again, \[\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\pi)=\mathbb{P}_{\rho \sim\mathcal{D}^{\mathcal{M}}_{\pi}}[\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{ \text{avg}}}(\rho)=1]\leq\mathbb{P}_{\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi}} [\rho^{\otimes}\text{ accepted by }\mathcal{M}\otimes\mathcal{A}]=\mathcal{J}^{ \mathcal{M}}_{\mathcal{A}}(\pi)\]
2. Let \(\pi\) be arbitrary. We modify \(\pi\) to \(\pi^{\prime}\) as follows: until reaching an ASEC \(\mathcal{C}=(T,\mathrm{Act})\) w.r.t. the true, unknown10 set of transitions \(E^{*}\) follow \(\pi\). Henceforth, select action \(\mathrm{Act}^{E^{*}}_{(s_{t},q_{t})}(s_{t},q_{t})\). We claim that whenever \(\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi^{\prime}}\) follows the modified policy \(\pi^{\prime}\) and \(\rho^{\otimes}\) reaches some ASEC in the true product MDP, \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\text{avg}}}(\rho)=1\). To see this, suppose \(\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi^{\prime}}\) is such that for some minimal \(t_{0}\in\mathbb{N}\), \((s_{t_{0}},q_{t_{0}})\in T^{E^{*}}_{1}\cup\cdots\cup T^{E^{*}}_{n}\). Let \(\mathcal{C}=(T,\mathrm{Act}):=\mathcal{C}^{E^{*}}_{(s_{t_{0}},q_{t_{0}})}\). Define \(E_{t}\) to be the transitions encountered up to step \(t\in\mathbb{N}\), i.e. \(E_{t}:=\{((s_{k},q_{k}),a_{k},(s_{k+1},q_{k+1}))\mid 0\leq k<t\}\). Then almost surely for some minimal \(t\geq t_{0}\)\(E_{t}\) contains all transitions in \(\mathcal{C}\), and no further transitions will be encountered, i.e. for all \(t^{\prime}\geq t\), \(E_{t^{\prime}}=E_{t}\). Define \(\overline{E}:=E_{t}\). Note that for all \(((s,q),a,(s^{\prime},q^{\prime}))\in\overline{E}\) such that \((s,q)\in T\), \(\mathrm{Act}(s,q)=\{a\}\). (This is because upon entering the ASEC \(\mathcal{C}\) we immediately switch to following the action dictated by \(\mathrm{Act}\). Thus, we avoid "accidentally" discovering other ASECs w.r.t. the partial knowledge of the product MDP's graph, which might otherwise force us to perform actions leaving \(\mathcal{C}\).) Consequently, there cannot be another ASEC \(\mathcal{C}^{\prime}=(T^{\prime},\mathrm{Act}^{\prime})\) w.r.t. \(\overline{E}\) overlapping with \(\mathcal{C}\), i.e. \(T\cap T^{\prime}\neq\emptyset\). Therefore, for all \((s,q)\in\mathcal{C}\), \(\mathrm{Act}^{\overline{E}}_{(s,q)}=\mathrm{Act}\). Consequently, \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\mathrm{reg}}}(\rho)=1\).

Thus,

\(\mathbb{P}_{\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi}}[\rho^{\otimes}\) reaches some ASEC in true product MDP\(]\leq\mathbb{E}_{\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi}}[\mathcal{J}^{ \mathcal{M}}_{\mathcal{R}^{\mathrm{reg}}}(\rho)]=\mathcal{J}^{\mathcal{M}}_{ \mathcal{R}^{\mathrm{reg}}}(\pi^{\prime})\)

Consequently,

\[\mathcal{J}^{\mathcal{M}}_{\mathcal{A}}(\pi) =\mathbb{P}_{\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi}}[\rho^{ \otimes}\text{ is accepted by }\mathcal{M}\otimes\mathcal{A}]\] \[\leq\mathbb{P}_{\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi}}[\rho^{ \otimes}\text{ reaches some ASEC in true product MDP}]\] \[=\mathbb{P}_{\rho\sim\mathcal{D}^{\mathcal{M}}_{\pi}}[\rho^{ \otimes}\text{ reaches some ASEC in true product MDP}]\leq\mathcal{J}^{\mathcal{M}}_{ \mathcal{R}^{\mathrm{reg}}}(\pi^{\prime})\]

In the penultimate step we have exploited that \(\pi\) and \(\pi^{\prime}\) agree until reaching some ASEC in true product MDP. 

## Appendix D Supplementary Materials for Section 6

Let \(\Pi\) be the set of all memoryless policies and \(\Pi^{*}\) be the set of all limit-average optimal policies. Besides, let \(w^{*}:=\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\mathrm{reg}}}(\pi^{*})\) the limit average reward of any optimal \(\pi^{*}\in\Pi^{*}\).

Lemma 15 is proven completely analagously to the following (where \(K=\mathbb{N}\)):

**Lemma 22**.: _Suppose \(\gamma_{k}\nearrow 1\), \(\epsilon_{k}\searrow 0\) and each \(\pi_{k}\) is a memoryless policy satisfying \(\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\gamma_{k}}}(\pi_{k})\geq\mathcal{J}^ {\mathcal{M}}_{\mathcal{R}^{\gamma_{k}}}(\pi)-\epsilon_{k}\) for all \(\pi\in\Pi\). Then there exists \(k_{0}\) such that for all \(k\geq k_{0}\), \(\pi_{k}\) is limit average optimal._

Proof.: We define \(\Delta:=\min_{\pi\in\Pi\setminus\Pi^{*}}\mathcal{J}^{\mathcal{M}}_{\mathcal{R }^{\mathrm{reg}}}(\pi)-w^{*}>0\). Recall (see e.g. [22, Sec. 8.1]) that for any policy \(\pi\in\Pi\),

\[\lim_{\gamma\nearrow 1}(1-\gamma)\cdot\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{ \gamma}}(\pi)=\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\mathrm{reg}}}(\pi)\] (5)

Since \(\Pi\) is finite, due to Eq. (5) there exists \(\gamma_{0}\) such that

\[|\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\mathrm{reg}}}(\pi)-(1-\gamma)\cdot \mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\gamma}}(\pi)|\leq\frac{\Delta}{4}\] (6)

for all \(\pi\in\Pi\) and \(\gamma\in[\gamma_{0},1)\). Let \(\pi^{*}\) be a memoryless Blackwell optimal policy (which exists due to [6, 18]). Note that

\[w^{*}=\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\mathrm{reg}}}(\pi^{*})\] (7)

and there exists \(\overline{\gamma}\in[0,1)\) such that

\[\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\gamma}}(\pi^{*})\geq\mathcal{J}^{ \mathcal{M}}_{\mathcal{R}^{\gamma}}(\pi)\] (8)

for all \(\gamma\in[\overline{\gamma},1)\) and \(\pi\in\Pi\). Moreover, there clearly exists \(k_{0}\) such that \(\epsilon_{k}\leq\Delta/4\) and \(\gamma_{k}\geq\gamma_{0},\overline{\gamma}\) for all \(k\geq k_{0}\).

Therefore, for any \(k\geq k_{0}\),

\[|\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\mathrm{reg}}}(\pi_{k})-w^{*}| \leq(1-\gamma_{k})\cdot\left|\mathcal{J}^{\mathcal{M}}_{\mathcal{R }^{\gamma_{k}}}(\pi_{k})-\mathcal{J}^{\mathcal{M}}_{\mathcal{R}^{\gamma_{k}}}( \pi^{*})\right|+\frac{\Delta}{2}\] Eqs. (6) and (7) \[\leq(1-\gamma_{k})\cdot\epsilon_{k}+\frac{\Delta}{2}\] premise and Eq. (8) \[\leq\frac{4}{3}\cdot\Delta\]

Consequently, by definition of \(\Delta\), \(\pi_{k}\in\Pi^{*}\)

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The main results mentioned in the abstract and introduction are Proposition 4 and Theorems 12, 16 and 18. They accurately reflect the paper's contributions and scope. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: Limitations are discussed in Section 7. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes]Justification: Full proofs are presented in the appendices and results are cross-referenced. At the beginning of Section 4 we assume knowledge of the support of the MDP's probability transition function for presentational purposes. This assumption is fully removed in Section 5. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [NA] Justification: The paper does not include experiments. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code**Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [NA] Justification: The paper does not include experiments. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [NA] Justification: The paper does not include experiments. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [NA] Justification: The paper does not include experiments. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [NA] Justification: The paper does not include experiments. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: The research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: There is no societal impact of the work performed. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.

* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: The paper poses no such risks. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licensees for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [NA] Justification: The paper does not use existing assets. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided. * If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset. * For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.

* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: The paper does not release new assets. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.