# Graph Classification via Reference Distribution Learning: Theory and Practice

Zixiao Wang  Jicong Fan

School of Data Science

The Chinese University of Hong Kong, Shenzhen

zixiaowang@link.cuhk.edu.cn  fanjicong@cuhk.edu.cn

Corresponding author

###### Abstract

Graph classification is a challenging problem owing to the difficulty in quantifying the similarity between graphs or representing graphs as vectors, though there have been a few methods using graph kernels or graph neural networks (GNNs). Graph kernels often suffer from computational costs and manual feature engineering, while GNNs commonly utilize global pooling operations, risking the loss of structural or semantic information. This work introduces Graph Reference Distribution Learning (GRDL), an efficient and accurate graph classification method. GRDL treats each graph's latent node embeddings given by GNN layers as a discrete distribution, enabling direct classification without global pooling, based on maximum mean discrepancy to adaptively learned reference distributions. To fully understand this new model (the existing theories do not apply) and guide its configuration (e.g., network architecture, references' sizes, number, and regularization) for practical use, we derive generalization error bounds for GRDL and verify them numerically. More importantly, our theoretical and numerical results both show that GRDL has a stronger generalization ability than GNNs with global pooling operations. Experiments on moderate-scale and large-scale graph datasets show the superiority of GRDL over the state-of-the-art, emphasizing its remarkable efficiency, being at least 10 times faster than leading competitors in both training and inference stages. The source code of GRDL is available at https://github.com/jicongfan/GRDL-Graph-Classification.

## 1 Introduction

Graphs serve as versatile models across diverse domains, such as social networks (Wang et al., 2018), biological compounds (Jumper et al., 2021), and the brain (Ktena et al., 2017). There has been considerable interest in developing learning algorithms for graphs, such as graph kernels (Gartner et al., 2003; Shervashidze et al., 2011; Chen et al., 2022) and graph neural networks (GNNs) (Kipf and Welling, 2016; Defferrard et al., 2016; Gilmer et al., 2017). GNNs have emerged as powerful tools, showcasing state-of-the-art performance in various graph prediction tasks (Velickovic et al., 2017; Gilmer et al., 2017; Hamilton et al., 2017; Xu et al., 2018; Sun et al., 2019; You et al., 2021; Ying et al., 2021; Liu et al., 2022; Chen et al., 2022; Xiao et al., 2022; Sun et al., 2023; Sun and Fan, 2024; Sun et al., 2024). Despite the evident success of GNNs in numerous graph-related applications, their potential remains underutilized, particularly in the domain of graph-level classification.

Current GNNs designed for graph classification commonly consist of two components: the embedding of node features through message passing (Gilmer et al., 2017) and subsequent aggregation by some permutation invariant global pooling (also called readout) operations (Xu et al., 2018). The primary purpose of pooling is to transform a graph's node embeddings, a matrix, into a single vector.

Empirically, pooling operations play a crucial role in classification (Ying et al., 2018). However, these pooling operations tend to be naive, often employing methods such as simple summation or averaging. These functions collect only first-order statistics, leading to a loss of structural or semantic information. In addition to the conventional sum or average pooling, more sophisticated pooling operations have shown improvements in graph classification (Li et al., 2015; Ying et al., 2018; Lee et al., 2019, 2021; Buterez et al., 2022; Yu et al., 2024), but they still carry the inherent risk of information loss.

Different from graph kernel methods and existing GNN methods, we propose a novel GNN method that classifies the nodes' embeddings themselves directly, thus avoiding the global pooling step. In our method, we treat the nodes' latent representations of each graph, learned by a neural network, as a discrete distribution and classify these distributions into \(K\) different classes. The classification is conducted via measuring the similarity between the latent graph's distributions and \(K\) discriminative reference discrete distributions. The reference distributions can be understood as nodes' embeddings of representative virtual graphs from \(K\) different classes, and they are jointly learned with the parameters of the neural network in an end-to-end manner. To evaluate our method, we analyze the generalization ability of our model both theoretically and empirically. Our contributions are two-fold.

* We propose a novel graph classification method GRDL that is efficient and accurate.
* GRDL does not require any global pooling operation and hence effectively preserves the information of node embeddings.
* Besides its high classification accuracy, GRDL is scalable to large graph datasets and is at least ten times faster than leading competitors in both training and inference stages.
* We provide theoretical guarantees, e.g. generalization error bounds, for GRDL.
* The result offers valuable insights into how the model performance scales with the properties of graphs, neural network structure, and reference distributions, guiding the model design.
* For instance, the generalization bounds reveal that the references' norms and numbers have tiny impacts on the generalization, which is also verified by the experiments.
* More importantly, we theoretically prove that GRDL has a stronger generalization ability than GNNs with global pooling operations.

The rest of this paper is organized as follows. We introduce our model in Section 2 and analyze the generalization ability in Section 3. Related works are discussed in Section 4. Section 5 presents the numerical results on 11 benchmarks in comparison to 12 competitors.

## 2 Proposed Approach

### Model Framework

Following convention, we denote a graph with index \(i\) by \(G_{i}=(V_{i},E_{i})\), where \(V_{i}\) and \(E_{i}\) are the vertex (node) set and edge set respectively. Given a graph dataset \(\mathcal{G}=\{(G_{1},y_{1}),(G_{2},y_{2}),\ldots,(G_{N},y_{N})\}\), where \(y_{i}\in\{1,2,\ldots,K\}\) is the associated label of \(G_{i}\) and \(y_{i}=k\) means \(G_{i}\) belongs to class \(k\), the goal is to learn a classifier \(f\) from \(\mathcal{G}\) that generalizes well to unseen graphs. Since in many scenarios, each node of a graph has a feature vector \(\mathbf{x}\) and the graph is often represented by an adjacency matrix \(\mathbf{A}\), we also write \(G_{i}=(\mathbf{A}_{i},\mathbf{X}_{i})\) for convenience, where \(\mathbf{A}_{i}\in\mathbb{R}^{n_{i}\times n_{i}}\), \(\mathbf{X}_{i}\in\mathbb{R}^{n_{i}\times d_{0}}\), \(n_{i}=|V_{i}|\) is the number of nodes of graph \(i\), and \(d_{0}\) denotes the number of features. We may alternatively denote the graph dataset as \(\mathcal{G}=\{((\mathbf{A}_{1},\mathbf{X}_{1}),y_{1}),((\mathbf{A}_{2}, \mathbf{X}_{2}),y_{2}),\ldots,((\mathbf{A}_{N},\mathbf{X}_{N}),y_{N})\}\).

Our approach is illustrated in Figure 1. For graph classification, we first use a GNN, denoted as \(f_{G}\), to transform each graph to a node embedding matrix \(\mathbf{H}_{i}\in\mathbb{R}^{n_{i}\times d}\) that encodes its properties, i.e.,

\[\mathbf{H}_{i}=f_{G}(G_{i})=f_{G}(\mathbf{A}_{i},\mathbf{X}_{i}),\] (1)

where \(f_{G}\in\mathcal{F}_{G}\) and \(\mathcal{F}_{G}\) denotes a hypothesis space. The remaining task is to classify \(\mathbf{H}_{i}\) without global pooling. Direct classification of node embeddings is difficult due to two reasons:

1. Different graphs have different numbers of nodes, i.e. in general, \(n_{i}\neq n_{j}\) if \(i\neq j\).
2. The node embeddings of each graph are permutation invariant, namely, \(\mathbf{PH}_{i}\) and \(\mathbf{H}_{i}\) represent the same graph for any permutation matrix \(\mathbf{P}\).

However, the two properties are naturally satisfied if we treat the node embeddings of each graph as a discrete distribution. Specifically, each \(\mathbf{H}_{i}\) is a discrete distribution and each row of \(\mathbf{H}_{i}\) is an outcome of the distribution. There is no order between the outcomes in each distribution. Also, different distributions may have different numbers of outcomes. Before introducing our method in detail, we first give a toy example where the commonly used mean and max pooling operations fail.

**Example 2.1**.: _Suppose two graphs \(G_{1}\) and \(G_{2}\) have self-looped adjacency matrices \(\tilde{\mathbf{A}}_{1}=[1\;1\;1\;0;1\;1\;0\;1\;1\;0\;1\;1;0\;1\;1]\) and \(\tilde{\mathbf{A}}_{2}=[1\;0\;0\;0;0\;1\;1\;0;0\;1\;1\;0;0\;0\;1]\) respectively, and have one-dimensional node features \(\mathbf{X}_{1}=[3\;6\;9\;12]^{\top}\) and \(\mathbf{X}_{2}=[6\;6\;9\;9]^{\top}\) respectively. Let \(\hat{\mathbf{A}}_{i}\) be the normalized adjacency matrices, i.e., \(\hat{\mathbf{A}}_{i}=\text{diag}(\hat{\mathbf{A}}_{i}\mathbf{1})^{-1/2}\tilde{ \mathbf{A}}_{i}\text{diag}(\tilde{\mathbf{A}}_{i}\mathbf{1})^{-1/2}\). Performing the neighbor aggregation \(\mathbf{H}_{i}=\hat{\mathbf{A}}_{i}\mathbf{X}_{i}\), \(i=1,2\), we obtain \(\mathbf{H}_{1}=[6\;7\;8\;9]^{\top}\) and \(\mathbf{H}_{2}=[6\;7.5\;7.5\;9]^{\top}\). We see that \(\mathrm{mean}(\mathbf{H}_{1})=\mathrm{mean}(\mathbf{H}_{2})=7.5\) and \(\max(\mathbf{H}_{1})=\max(\mathbf{H}_{2})=9\). This means the simple mean and max pooling operations failed to distinguish the two graphs. In contrast, our method treats \(\mathbf{H}_{1}\) and \(\mathbf{H}_{2}\) as two different discrete distributions and hence is able to distinguish the two graphs. Note that incorporating a learnable parameter \(\mathbf{W}\), i.e., \(\mathbf{H}_{i}=\hat{\mathbf{A}}_{i}\mathbf{X}_{i}\mathbf{W}\), or performing multiple times of neighbor aggregation does not change the conclusion._

We propose to classify the discrete distributions \(\{\mathbf{H}_{1},\mathbf{H}_{2},\ldots,\mathbf{H}_{N}\}\triangleq\mathcal{H}\) by a reference layer \(f_{D}\). The classification involves measuring the similarity between \(\mathbf{H}_{i}\) and \(K\) reference discrete distributions \(\{\mathbf{D}_{1},\mathbf{D}_{2},\ldots,\mathbf{D}_{K}\}\triangleq\mathcal{D}\) that are discriminative. Each \(\mathbf{D}_{k}\in\mathbb{R}^{m_{k}\times d}\) can be understood as node embeddings of a virtual graph from the \(k\)-th class, \(k\in[K]\). We make \(m_{1}=\cdots=m_{K}=m\) for convenience. Letting \(\xi\) be a similarity measure between two discrete distributions, then

\[s_{ik}:=\xi(\mathbf{H}_{i},\mathbf{D}_{k}),\quad i\in[N],\;k\in[K].\] (2)

This forms a matrix \(\mathbf{S}=[\mathbf{s}_{1},\mathbf{s}_{2},\ldots,\mathbf{s}_{N}]^{\top}\) where

\[\mathbf{s}_{i}=f_{D}(\mathbf{H}_{i})=[s_{i1},s_{i2},\ldots,s_{iK}]^{\top}\in \mathbb{R}^{K},\] (3)

\(f_{D}\in\mathcal{F}_{D}\) and \(\mathcal{F}_{D}\) denotes a hypothesis space induced by the reference layer. References in \(\mathcal{D}\) are parameters of the reference layer and are jointly learned with node-embedding network parameters in an end-to-end manner. Now combining Equation (1) and Equation (3), we arrive at

\[\mathbf{s}_{i}=f_{D}(f_{G}(G_{i})),\quad i\in[N].\] (4)

\(f_{D}\circ f_{G}\) calculates \(\mathbf{s}_{i}\), representing similarities between \(G_{i}\) and all references. We get \(G_{i}\)'s label by

\[y_{\text{pred},i}=\arg\max_{k}s_{ik}.\] (5)

To train the model, we first use the softmax function to convert \(\mathbf{s}_{i}\) to a label vector \(\hat{\mathbf{y}}_{i}=[\hat{y}_{i1},\ldots,\hat{y}_{iK}]^{\top}\), where

\[\hat{y}_{ik}=\frac{\exp\left(s_{ik}\right)}{\sum_{j=1}^{K}\exp\left(s_{ij} \right)},\quad k\in[K].\] (6)

Figure 1: The GRDL framework. Classification involves using a GNN \(f_{G}\) to encode a graph’s information into a node embedding distribution. The similarities between the node embeddings and \(K\) reference distributions are calculated by the reference module \(f_{D}\). The graph is assigned the label of the reference that exhibits the highest similarity.

Using the cross-entropy loss, we minimize

\[\mathcal{L}_{\text{CE}}=-\frac{1}{N}\sum_{i=1}^{N}\sum_{k=1}^{K}y_{ik}\log\hat{y}_ {ik}.\] (7)

Intuitively, the reference distributions in \(\mathcal{D}\) should be different from each other to ensure discriminativeness. Therefore, we also consider the following discrimination loss:

\[\mathcal{L}_{\text{Dis}}=\sum_{k}\sum_{k^{\prime}\neq k}\xi(\mathbf{D}_{k}, \mathbf{D}_{k^{\prime}}).\] (8)

Then we solve the following problem:

\[\min_{f_{G}\in\mathcal{F}_{G},f_{D}\in\mathcal{F}_{D}}\mathcal{L}_{\text{CE}}+ \lambda\mathcal{L}_{\text{Dis}},\] (9)

where \(\lambda\geq 0\) is a hyperparameter. We call (9) Graph Classification via Reference Distribution Learning (GRDL). Specific designs of \(\mathcal{F}_{G}\) and \(\mathcal{F}_{D}\) are detained in the next section.

### Design of \(\mathcal{F}_{G}\) and \(\mathcal{F}_{D}\)

We get GRDL's network \(\mathcal{F}\) by concatenating the node embedding module and the reference module:

\[\mathcal{F}:=\mathcal{F}_{D}\circ\mathcal{F}_{G}.\] (10)

**Design of \(\mathcal{F}_{G}\)** We use an \(L\)-layer message passing network as our node embedding module \(\mathcal{F}_{G}\):

\[\mathcal{F}_{G}:=\mathcal{F}^{L}\circ\mathcal{F}^{L-1}\circ\cdots\circ \mathcal{F}^{1}.\] (11)

\(\mathcal{F}^{l}\) is the \(l\)-th message passing layer (e.g. a GIN layer [20]) that updates the representation of a node by aggregating representations of its neighbors, meaning

\[a_{v}^{(l)}=\text{AGGREGATE}^{(l)}\left(\left\{h_{u}^{(l-1)}:u\in\mathcal{N}( v)\right\}\right),\quad h_{v}^{(l)}=\text{COMBINE}^{(l)}\left(h_{v}^{(l-1)},a_{v}^{(l)}\right)\] (12)

where \(h_{v}^{(l)}\) is the feature vector of node \(v\) produced by the \(l\)-th layer \(\mathcal{F}^{l}\). Different GNNs have different choices of COMBINE\({}^{(l)}(\cdot)\) and AGGREGATE\({}^{(l)}(\cdot)\).

**Design of \(\mathcal{F}_{D}\)** Based on (3), the hypothesis space defined by the reference layer is

\[\mathcal{F}_{D}:=\{\mathbf{H}_{i}\mapsto\mathbf{s}_{i}\in\mathbb{R}^{K}:s_{ik }=\xi(\mathbf{H}_{i},\mathbf{D}_{k}),\mathbf{D}_{k}\in\mathbb{R}^{m\times d}\}.\] (13)

In our work, we choose \(\xi(\cdot,\cdot)\) to be the negative squared Maximum Mean Discrepancy (MMD). Initially used for two-sample tests, MMD is now widely used to measure the dissimilarity between distributions [13]. For an embedding \(\mathbf{H}\in\mathbb{R}^{n\times d}\) and a reference \(\mathbf{D}\in\mathbb{R}^{m\times d}\),

\[\xi(\mathbf{H},\mathbf{D})= -\operatorname{MMD}^{2}\left(\mathbf{H},\mathbf{D}\right)=-\left \lVert\frac{1}{n}\sum_{i=1}^{n}\phi(\mathbf{h}_{i})-\frac{1}{m}\sum_{j=1}^{m} \phi(\mathbf{d}_{j})\right\rVert_{2}^{2}\] \[= \frac{2}{mn}\sum_{i=1}^{n}\sum_{j=1}^{m}\phi(\mathbf{h}_{i})^{ \top}\phi(\mathbf{d}_{j})-\frac{1}{n^{2}}\sum_{i=1}^{n}\sum_{i^{\prime}=1}^{n} \phi(\mathbf{h}_{i})^{\top}\phi(\mathbf{h}_{i^{\prime}})-\frac{1}{m^{2}}\sum_ {j=1}^{m}\sum_{j^{\prime}=1}^{m}\phi(\mathbf{d}_{j})^{\top}\phi(\mathbf{d}_{j ^{\prime}})\] (14)

where \(\phi\) is some feature map, \(\mathbf{h}_{i}^{\top}\) is the \(i\)-th row of \(\mathbf{H}\), and \(\mathbf{d}_{j}^{\top}\) is the \(j\)-th row of \(\mathbf{D}\). The MMD in (14) is known as biased MMD [13] and its performance is almost the same as the unbiased one, in our experiments. Therefore we only present (14) here. Using kernel trick \(k(\mathbf{x},\mathbf{x}^{\prime})=\phi(\mathbf{x})^{\top}\phi(\mathbf{x}^{ \prime})\), we obtain from (14) that

\[\xi(\mathbf{H},\mathbf{D})=\frac{2}{mn}\sum_{i=1}^{n}\sum_{j=1}^{m}k(\mathbf{h }_{i},\mathbf{d}_{j})-\frac{1}{n^{2}}\sum_{i=1}^{n}\sum_{i^{\prime}=1}^{n}k( \mathbf{h}_{i},\mathbf{h}_{i^{\prime}})-\frac{1}{m^{2}}\sum_{j=1}^{m}\sum_{j^{ \prime}=1}^{m}k(\mathbf{d}_{j},\mathbf{d}_{j^{\prime}}).\]

In this work, we employ the Gaussian kernel, i.e.,

\[k(\mathbf{x},\mathbf{x}^{\prime})=\exp\left(-\theta\lVert\mathbf{x}-\mathbf{x }^{\prime}\rVert_{2}^{2}\right)\] (15)where \(\theta>0\) is a hyperparameter. The Gaussian kernel defines an infinite-order polynomial feature map \(\phi\), covering all orders of statistics of the input variable. Consequently, MMD with the Gaussian kernel characterizes the difference between two distributions across all moments. Actually, we found that, in GRDL, the Gaussian kernel often outperformed other kernels such as the polynomial kernel.

Several other statistical distances are available for measuring the difference between distributions, including Wasserstein distance and Sinkhorn divergence (Peyre and Cuturi, 2020). However, their computational complexity is prohibitively high, making the model impractical for large-scale graph datasets. We also find, through experiments, that in our method, the classification performance of MMD is better than that of Wasserstein distance and Sinkhorn divergence as shown later in Table 1. These explain why we prefer MMD.

### Algorithm Implementation

The \(\theta\) in the Gaussian kernel (15) plays a crucial role in determining the statistical efficiency of MMD. Optimally setting of \(\theta\) remains an open problem and many heuristics are available (Gretton et al., 2012). To simplify the process, we make \(\theta\) learnable in our GRDL and rewrite \(\xi\) as \(\xi_{\theta}\). Our empirical results in Appendix D.5 show that GRDL with learnable \(\theta\) performs better. For convenience, we denote all the parameters of \(f_{G}\) as \(\mathbf{w}\) and let \(f_{\mathbf{w},\mathcal{D},\theta}=f_{D}\circ f_{G}\). Then we rewrite problem (9) as

\[\min_{\mathbf{w},\mathcal{D},\theta}-\frac{1}{N}\sum_{i=1}^{N}\sum_{k=1}^{K}y _{ik}\log\frac{\exp\left(f_{\mathbf{w},\mathcal{D},\theta}(G_{i})_{k}\right) }{\sum_{j=1}^{K}\exp\left(f_{\mathbf{w},\mathcal{D},\theta}(G_{i})_{j}\right) }+\lambda\sum_{k^{\prime}\neq k}\xi_{\theta}(\mathbf{D}_{k},\mathbf{D}_{k^{ \prime}}).\] (16)

The (mini-batch) training of GRDL model is detailed in Algorithm 1 (see Appendix C).

## 3 Theoretical Analysis

In this section, we provide theoretical guarantees for GRDL, due to the following motivations:

* As the proposed approach is novel, it is necessary to understand it thoroughly using theoretical analysis, e.g., understand the influences of data and model properties on the classification.
* It is also necessary to provide guidance for the model design to guarantee high accuracy in inference stages.

### Preliminaries

**Matrix constructions** We construct big matrices \(\mathbf{X}\), \(\mathbf{A}\) and \(\mathbf{D}\), where \(\mathbf{X}=\left[\mathbf{X}_{1}^{\top},\mathbf{X}_{2}^{\top},\ldots,\mathbf{ X}_{N}^{\top}\right]^{\top}\in\mathbb{R}^{(\sum_{i}n_{i})\times d}\); \(\mathbf{A}=\text{diag}(\mathbf{A}_{1},\mathbf{A}_{2},\ldots,\mathbf{A}_{N}) \in\mathbb{R}^{(\sum_{i}n_{i})\times(\sum_{i}n_{i})}\) is a block diagonal matrix, \(\mathbf{D}=\left[\mathbf{D}_{1}^{\top},\mathbf{D}_{2}^{\top},\ldots,\mathbf{ D}_{K}^{\top}\right]^{\top}\in\mathbb{R}^{Km\times d}\). The adjacency matrix with self-connectivity is \(\tilde{\mathbf{A}}=\mathbf{A}+\mathbf{I}\). The huge constructed graph is denoted by \(\mathbf{G}=(\tilde{\mathbf{A}},\mathbf{X})\). This construction allows us to treat all graphs in dataset \(\mathcal{G}\) as a whole and it is crucial for our derivation.

**Neural network** Previously, for a deterministic network \(f\in\mathcal{F}\), its output after feeding forward a single graph is \(f(G_{i})\). However, we mainly deal with the huge constructed graph \(\mathbf{G}\) in this section, and notation will be overloaded to \(f(\mathbf{G})=\mathbf{S}\in\mathbb{R}^{N\times K}\), a matrix whose \(i\)-th row is \(f(G_{i})^{\top}\).

We instantiate the message passing network as Graph Isomorphism Network (GIN) (Xu et al., 2018). We choose to focus on GIN for two reasons. Firstly, the analysis on GIN is currently limited, most of the current bounds for GNNs don't apply for GIN (Garg et al., 2020; Liao et al., 2021; Tang and Liu, 2023). The other reason is that GIN is used as the message-passing network in our numerical experiments. Notably, our proof can be easily adapted to other message-passing GNNs (e.g. GCN (Kipf and Welling, 2016)). GIN updates node representations as

\[h_{v}^{(l)}=\text{MLP}^{(l)}\bigg{(}(1+\varepsilon^{(l)})h_{v}^{(l-1)}+\sum_{u \in\mathcal{N}(v)}h_{u}^{(l-1)}\bigg{)}\] (17)

where \(h_{v}^{(l)}\) denotes the node features generated by \(l\)-th GIN message passing layer. Let \(\varepsilon^{(l)}=0\) for all layers and suppose all MLPs have \(r\) layers, the node updates can be written in matrix form as

\[\mathbf{H}^{(l)}=\sigma\left(\cdots\sigma\left(\left(\tilde{\mathbf{A}} \mathbf{H}^{(l-1)}\right)\mathbf{W}_{1}^{(l)}\right)\cdots\mathbf{W}_{r-1}^{( l)}\right)\mathbf{W}_{r}^{(l)}\] (18)where \(\mathbf{W}_{i}^{(l)}\in\mathbb{R}^{d_{i-1}^{(l)}\times d_{i}^{(l)}}\) is the weight matrix, and \(\mathbf{H}^{(l)}\) is the matrix of node features with \(\mathbf{H}^{(0)}=\mathbf{X}\). \(\sigma(\cdot)\) is the non-linear activation function. Let \(\mathcal{F}^{l}\) be the function space induced by the \(l\)-th message passing layer, meaning

\[\mathcal{F}^{l}=\{(\tilde{\mathbf{A}},\mathbf{H}^{(l-1)})\mapsto\mathbf{H}^{(l )}:\mathbf{W}_{i}^{(l)}\in\mathcal{B}_{i}^{(l)},i\in[r]\}\] (19)

where \(\mathcal{B}_{i}^{(l)}\) is some constraint set on the weight matrix \(\mathbf{W}_{i}^{(l)}\) and \(\mathbf{H}^{(l)}\) is given by (18). The \(L\)-layer GIN function space \(\mathcal{F}_{G}\) is the composition of \(\mathcal{F}^{l}\) for \(l\in[L]\), i.e.,

\[\mathcal{F}_{G}=\mathcal{F}^{L}\circ\mathcal{F}^{L-1}\circ\cdots\circ \mathcal{F}^{1}=\{\mathbf{G}\mapsto f^{L}(\cdots f^{1}(\mathbf{G})):f^{i}\in \mathcal{F}^{i},\forall i\in[L]\}.\] (20)

Letting \(s_{ik}=-\mathrm{MMD}^{2}(\mathbf{H}_{i}^{(L)},\mathbf{D}_{k})\), the reference layer defines the following function space

\[\mathcal{F}_{D}=\{\mathbf{H}^{(L)}\mapsto\mathbf{S}\in\mathbb{R}^{N\times K}: \mathbf{D}_{k}\in\mathbb{R}^{m\times d},k\in[K]\}.\] (21)

Our proposed network (GRDL) is essentially \(\mathcal{F}:=\mathcal{F}_{D}\circ\mathcal{F}_{G}\).

**Loss Function** Instead of the cross entropy loss (7), we consider a general loss function \(l_{\gamma}(\cdot,\cdot)\) satisfying \(0\leq l_{\gamma}\leq\gamma\) to quantify the model performance. Importantly, this loss function is not restricted to the training loss because our generalization bound is optimization-independent. For instance, the loss function can be the ramp loss that is commonly used for classification tasks (Bartlett et al., 2017; Mohri et al., 2018). Given a neural network \(f\in\mathcal{F}\), we want to upper bound the model population risk of graphs and labels from an unknown distribution \(\mathcal{X}\times\mathcal{Y}\)

\[L_{\gamma}(f):=\mathop{\mathbb{E}}_{(G,y)\sim\mathcal{X}\times\mathcal{Y}}\left[ l_{\gamma}(f(G),y)\right].\] (22)

Given the observed graph dataset \(\mathcal{G}\) sampled from \(\mathcal{X}\times\mathcal{Y}\), the empirical risk is

\[\hat{L}_{\gamma}(f):=\frac{1}{N}\sum_{i=1}^{N}l_{\gamma}(f(G_{i}),y_{i}),\] (23)

of which (7) is just a special case. Appendix E provides more details about the setup and our idea.

### Main Results

For convenience, similar to (Bartlett et al., 2017; Ju et al., 2023), we make the following assumptions.

**Assumption 3.1**.: The following conditions hold for \(\mathcal{F}_{\gamma}:=\{(G,y)\mapsto l_{\gamma}(f(G),y):f\in\mathcal{F}\}\):

1. The activation function \(\sigma(\cdot)\) is 1-Lipschitz (e.g. Sigmoid, ReLU).
2. The weight matrices satisfy \(\mathbf{W}_{i}^{(l)}\in\mathcal{B}_{i}^{(l)}:=\{\mathbf{W}_{i}^{(l)}:\| \mathbf{W}_{i}^{(l)}\|_{\sigma}\leq\kappa_{i}^{(l)},\|\mathbf{W}_{i}^{(l)}\|_{2,1}\leq b_{i}^{(l)}\}\).
3. The constructed reference matrix satisfy \(\|\mathbf{D}\|_{2}\leq b_{D}\).
4. The Gaussian kernel parameter \(\theta\) is fixed.
5. The loss function \(l_{\gamma}(\cdot,y):\mathbb{R}^{K}\rightarrow\mathbb{R}\) is \(\mu\)-Lipschitz w.r.t \(\|\cdot\|_{2}\) and \(0\leq l_{\gamma}\leq\gamma\).

**Theorem 3.2** (Generalization bound of GRDL).: _Let \(n=\min_{i}n_{i}\), \(c=\|\tilde{\mathbf{A}}\|_{\sigma}\), and \(\bar{d}=\max_{i,l}d_{i}^{(l)}\). Denote \(R_{G}:=c^{2L}\|\mathbf{X}\|_{2}^{2}\ln(2\bar{d}^{2})\big{(}\prod_{l=1}^{L}(\prod _{i=1}^{r}\kappa_{i}^{(l)})^{2}\big{)}\big{(}\sum_{l=1}^{L}\sum_{i=1}^{r}\binom{ b_{i}^{(l)}}{\kappa_{i}^{(l)}}^{2/3}\big{)}^{3}\). For graphs \(\mathcal{G}=\{(G_{i},y_{i})\}_{i=1}^{N}\) drawn i.i.d from any probability distribution over \(\mathcal{X}\times\{1,\ldots,K\}\) and references \(\{\mathbf{D}_{k}\}_{k=1}^{K},\mathbf{D}_{k}\in\mathbb{R}^{m\times d}\), with probability at least \(1-\delta\), every loss function \(l_{\gamma}\) and network \(f\in\mathcal{F}\) under Assumption 3.1 satisfy_

\[L_{\gamma}(f)\leq\hat{L}_{\gamma}(f)+3\gamma\sqrt{\frac{\ln{(2/\delta)}}{2N}+ \frac{8\gamma+24\sqrt{v_{1}+v_{2}}\ln N+24\gamma\sqrt{Nv_{2}\ln v_{3}}}{N}}\]

_where \(v_{1}=\frac{64\theta KR_{G}\mu^{2}}{n}\), \(v_{2}=Km\bar{d}\), and \(v_{3}=\frac{24\sqrt{\theta N}b_{D}\mu}{\sqrt{m}}\)._

The bound shows how the properties of the neural network, graphs, reference distributions, etc, influence the gap between training error and testing error. A detailed discussion will be presented in Section 3.3. Some interesting corollaries of Theorem 3.2, e.g., misclassification rate bound, can be found in Appendix F.7. Besides small generalization error \(L_{\gamma}(f)-\hat{L}_{\gamma}(f)\), a good model should have small empirical risk \(\hat{L}_{\gamma}(f)\). The empirical risk \(\hat{L}_{\gamma}(f)\) is typically a surrogate loss of misclassification rate of training data and a lower misclassification rate implies a smaller \(\hat{L}_{\gamma}(f)\). We now provide a guarantee for the correct classification of training data, namely small \(\hat{L}_{\gamma}(f)\).

Notably, the node embeddings \(\mathbf{H}_{i}\) from the \(k\)-th class as well as the reference distributions \(\mathbf{D}_{k}\) are essentially some _finite samples from an underlying continuous distribution_\(\mathbb{P}_{k}\). One potential risk is that, although the continuous distributions \(\mathbb{P}_{1},\mathbb{P}_{2},\ldots,\mathbb{P}_{K}\) are distinct, we can only observe their finite samples and may fail to distinguish them from each other with MMD. Specifically, suppose a node embedding \(\mathbf{H}_{i}\) is from the \(k\)-th class, although \(0=\mathrm{MMD}(\mathbb{P}_{k},\mathbb{P}_{k})<\mathrm{MMD}(\mathbb{P}_{k}, \mathbb{P}_{j})\) for any \(j\neq k\), it is likely that \(\mathrm{MMD}(\mathbf{H}_{i},\mathbf{D}_{k})>\mathrm{MMD}(\mathbf{H}_{i}, \mathbf{D}_{j})\) for some \(j\neq k\). The following theorem provides the correctness guarantee for the training dataset \(\mathcal{G}\):

**Theorem 3.3**.: _All graphs in the training set \(\mathcal{G}\) are classified correctly with probability at least \(1-\delta\) if_

\[\min_{i\neq j}\mathrm{MMD}(\mathbb{P}_{i},\mathbb{P}_{j})>\left(\tfrac{1}{ \sqrt{m}}+\tfrac{1}{\sqrt{n}}\right)\left(4+4\sqrt{\log\tfrac{2N}{\delta}} \right).\]

Theorem 3.3 implies that a larger reference distribution size \(m\) benefits the classification accuracy of training data, resulting in a lower \(\hat{L}_{\gamma}(f)\). Moreover, a larger \(\min_{i\neq j}\mathrm{MMD}(\mathbb{P}_{i},\mathbb{P}_{j})\) also makes correct classification easier according to the theorem, justifying our usage of discriminative loss (8).

### Bound Discussion and Numerical Verification

Let \(\bar{\kappa}=\max_{i,l}\kappa_{i}^{(l)}\), \(\bar{b}=\max_{i,l}\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)}}\) and suppose \(\delta\) is large enough, we simplify Theorem 3.2 as

\[L_{\gamma}(f)\leq\hat{L}_{\gamma}(f)+\tilde{\mathcal{O}}\big{(}\tfrac{\sqrt{ \bar{\upsilon}_{1}}+\gamma\sqrt{N\bar{\upsilon}_{2}}}{N}\big{)}\leq\hat{L}_{ \gamma}(f)+\tilde{\mathcal{O}}\big{(}\tfrac{\mu\bar{b}\|\mathbf{X}\|_{2}c^{L}( Lr)^{\frac{3}{2}}\bar{\kappa}^{Lr}\sqrt{\theta K/n}}{N}+\gamma\sqrt{\tfrac{Kmd}{N}} \big{)}\]

**I. Dependence on graph property** One distinctive feature of our bound is its dependence on the spectral norm of graphs' adjacency matrix. The large adjacency matrix \(\tilde{\mathbf{A}}\) is a block-diagonal matrix, so its spectral norm \(c=\|\tilde{\mathbf{A}}\|_{\sigma}=\max_{i\in[N]}\|\tilde{\mathbf{A}}_{i}\|_{\sigma}\). By Lemma F.8, incorporating \(c^{L}\) is sufficient for any \(L\)-step GIN message passing. This result aligns with Ju et al. (2023), who achieved this conclusion via PAC-Bayesian analysis. Our derivation, based on the Rademacher complexity, provides an alternative perspective supporting this result. Notably, Liao et al. (2021) and Garg et al. (2020) proposed bounds scaling with graphs' maximum node degree, which is larger than the spectral norm of the graphs' adjacency matrix (Lemma F.18). Consequently, our bound is tighter.

**II. Use moderate-size message passing GIN** The bound scales with the size of the message passing GIN, following \(\tilde{O}(c^{L}(Lr)^{\frac{3}{2}}\bar{\kappa}^{Lr})\). Empirical observations reveal \(\bar{\kappa}>1\), and we prove that \(c>1\) (refer to Lemma F.20). Therefore, when the message-passing GNN has sufficient expressive power (resulting in a small \(\hat{L}_{\gamma}(f)\)), a network with a smaller \(L\) and \(r\) may guarantee a tighter bound on the population risk compared to a larger one. Therefore, a promising strategy is to use a moderate-size message passing GNN. This is empirically supported by Figure 5 of Appendix D.7.

**III. Use moderate-size references** The bound scales with the size of reference distributions \(m\) as \(\tilde{O}(\sqrt{m})\). When \(m\) is smaller, the bound tends to be tighter. However, if \(m\) is too small, the model's expressive capacity is limited, potentially resulting in a large empirical risk \(\hat{L}_{\gamma}(f)\), and consequently, a large population risk. Therefore, using moderate-size references is a promising choice, as supported by our empirical validation results in Appendix D.3 (see Figure 6).

**IV. Regularization on references norm barely helps** Regularizing the norm of references \(\|\mathbf{D}\|_{2}\), i.e., reducing \(b_{D}\), might be considered to enhance the model's generalization. However, it is important to note that \(b_{D}\) only influences the term \(\upsilon_{3}\) (in logarithm) in Theorem 3.2 and has a tiny influence on the overall bound. Conversely, such regularization constrains the model's expressive capacity, potentially leading to a large \(\hat{L}_{\gamma}(f)\) and increasing the population risk. This observation is empirically supported by experiments in Appendix D.7 (see Table 10).

**V. GRDL has a tighter bound than GIN with global pooling** In Appendix A, we provide the generalization error bound, i.e., Theorem A.1, for GIN with global pooling and compare it with Theorem 3.2. The result shows that our GRDL has a stronger generalization ability than GIN, which is further supported by the numerical results in Table 4.

_Remark 3.4_.: Currently, we use \(K\) reference distributions for classification (one for each class). One natural approach to enhancing the model's expressive power is increasing the number of references for each class. However, counterintuitively, our empirical observations, supported by Theorem B.1, suggest that having only one reference per class is optimal. We discuss this further in Appendix B.

## 4 Related Work

Various sophisticated pooling operations have been designed to preserve the structural information of graphs (Bianchi et al., 2020; Ranjan et al., 2020; Baek et al., 2021; Chen and Gel, 2023; Yu et al., 2024). For instance, DIFFPOOL, designed by Ying et al. (2018), learns a differentiable soft cluster assignment for nodes and maps nodes to a set of clusters to output a coarsened graph. Another method by Lee et al. (2019) utilizes a self-attention mechanism to distinguish nodes for retention or removal, and both node features and graph topology are considered with the self-attention mechanism.

A recent research direction focuses on preserving structural information by leveraging the optimal transport (OT) (Peyre and Cuturi, 2020). OT-GNN, proposed by Chen et al. (2021), embeds a graph to a vector by computing Wasserstein distances between node embeddings and some "learned point clouds". TFGW, introduced by Vincent-Cuz et al. (2022), embeds a graph to a vector of Fused Gromov-Wasserstein (FGW) distance (Vayer et al., 2018) to a set of "template graphs". OT distances have also been combined with dictionary learning to learn graph vector embedding in an unsupervised way (GDL) (Liu et al., 2022; Vincent-Cuz et al., 2021; Zeng et al., 2023).

Similar to the "learned point clouds" in OT-GNN, "template graphs" in TFGW, and dictionaries in GDL, our GRDL preserves information in node embeddings using reference distributions. To the best of the authors' knowledge, we are the first to model a graph's node embeddings as a discrete distribution and propose to classify it directly without aggregating it into a vector, marking our novel contribution. Additionally, our work stands out as the first to analyze the generalization bounds for this type of model, adding a theoretically grounded dimension to the research. By the way, our method is much more efficient than OT-GNN and TFGW. Please see Figure 2 and Table 8.

## 5 Numerical Experiments

### Graph Classification Benchmark

DatasetsWe leverage eight popular graph classification benchmarks (Morris et al., 2020), comprising five bioinformatics datasets (MUTAG, PROTEINS, NCI1, PTC-MR, BZR) and three social network datasets (IMDB-B, IMDB-M, COLLAB). We also use three large-scale imbalanced datasets (PC-3, MCF-7, and ogbg-molhiv (Hu et al., 2020)). A summary of data statistics is in Table 6.

\begin{table}
\begin{tabular}{l c c c c c c c c} \hline \hline \multirow{2}{*}{**Method**} & \multicolumn{6}{c}{**Dataset**} & \multicolumn{3}{c}{**Average**} \\ \cline{2-10}  & MUTAG & PROTEINS & NCI1 & IMDB-B & IMDB-M & PTC-MR & BZR & COLLAB \\ \hline \hline PATCHY-SAN & **92.6\(\pm\)4.2** & 75.1\(\pm\)3.3 & 76.9\(\pm\)2.3 & 62.9\(\pm\)3.9 & 45.9\(\pm\)2.5 & 60.0\(\pm\)4.8 & 85.6\(\pm\)3.7 & 73.1\(\pm\)2.7 & 71.5 \\ GIN & 89.4\(\pm\)5.6 & 76.2\(\pm\)2.8 & 82.2\(\pm\)8.0 & 64.3\(\pm\)3.1 & 50.9\(\pm\)1.7 & 64.6\(\pm\)7.0 & 82.6\(\pm\)3.5 & 79.3\(\pm\)1.7 & 73.6 \\ DropGIN & 90.4\(\pm\)7.0 & 76.9\(\pm\)4.3 & 81.9\(\pm\)2.5 & 66.3\(\pm\)5.5 & 61.3\(\pm\)2.3 & 66.3\(\pm\)8.6 & 77.8\(\pm\)2.6 & 80.1\(\pm\)2.8 & 73.9 \\ DIFFPOOL & 89.4\(\pm\)4.6 & 76.2\(\pm\)1.4 & 80.9\(\pm\)0.7 & 61.1\(\pm\)3.0 & 45.8\(\pm\)1.4 & 60.0\(\pm\)5.2 & 79.8\(\pm\)3.6 & 80.8\(\pm\)1.6 & 71.8 \\ SEP & 89.4\(\pm\)6.1 & 76.4\(\pm\)0.4 & 78.4\(\pm\)0.6 & **74.1\(\pm\)0.6** & 51.5\(\pm\)0.7 & 68.5\(\pm\)5.2 & 86.9\(\pm\)0.8 & **81.3\(\pm\)0.2** & 75.8 \\ GMT & 89.9\(\pm\)4.2 & 75.1\(\pm\)0.6 & 79.9\(\pm\)0.4 & **73.5\(\pm\)0.8** & 50.7\(\pm\)2.6 & 82.6\(\pm\)0.8 & 80.7\(\pm\)0.5 & 75.7 \\ MnCutPol & 90.6\(\pm\)4.6 & 74.4\(\pm\)0.7 & 74.5\(\pm\)0.9 & 72.7\(\pm\)0.8 & 51.0\(\pm\)7.0 & 78.3\(\pm\)4.4 & 87.1\(\pm\)1.0 & **89.0\(\pm\)0.3** & 75.0 \\ ASAP & 87.4\(\pm\)5.7 & 73.9\(\pm\)0.6 & 71.5\(\pm\)0.4 & 72.8\(\pm\)0.5 & 50.8\(\pm\)0.8 & 64.6\(\pm\)6.8 & 85.3\(\pm\)1.3 & 78.6\(\pm\)0.5 & 73.1 \\ WittTopOpol & 89.4\(\pm\)5.4 & 80.0\(\pm\)3.2 & 79.9\(\pm\)1.3 & 72.6\(\pm\)1.8 & **52.9\(\pm\)1.8** & 64.6\(\pm\)1.8 & 87.8\(\pm\)2.4 & 80.1\(\pm\)1.6 & 75.9 \\ \hline OT-GNN & 91.6\(\pm\)4.6 & 76.6\(\pm\)4.0 & **82.9\(\pm\)1.2** & 67.5\(\pm\)3.5 & 52.1\(\pm\)3.0 & 68.7\(\pm\)5.9 & 85.3\(\pm\)3.3 & 80.7\(\pm\)2.9 & 75.7 \\ WEGL & 91.0\(\pm\)3.4 & 73.7\(\pm\)1.9 & 75.5\(\pm\)1.4 & 66.4\(\pm\)2.1 & 50.3\(\pm\)1.0 & 66.2\(\pm\)6.9 & 84.4\(\pm\)4.6 & 79.6\(\pm\)0.5 & 73.4 \\ \hline FGW - ADJ & 82.6\(\pm\)7.2 & 72.4\(\pm\)4.7 & 74.4\(\pm\)2.1 & 70.8\(\pm\)3.6 & 48.9\(\pm\)3.9 & 55.3\(\pm\)0.8 & 86.9\(\pm\)1.0 & 80.6\(\pm\)1.5 & 71.5 \\ FGW - SP & 84.4\(\pm\)7.3 & 74.3\(\pm\)3.3 & 72.8\(\pm\)1.5 & 65.0\(\pm\)4.7 & 47.8\(\pm\)3.8 & 55.7\(\pm\)0.8 & 86.9\(\pm\)1.0 & 78.7\(\pm\)2.4 & 70.6 \\ WL & 87.4\(\pm\)5.4 & 74.2\(\pm\)6.8 & **58.1\(\pm\)2.7** & 67.5\(\pm\)4.0 & 48.4\(\pm\)4.2 & 56.0\(\pm\)3.9 & 81.3\(\pm\)0.6 & 78.5\(\pm\)1.7 & 72.4 \\ WWL & 86.3\(\pm\)7.9 & 73.1\(\pm\)1.4 & **85.7\(\pm\)0.8** & 71.6\(\pm\)3.8 & 52.6\(\pm\)3.0 & 52.6\(\pm\)6.8 & 87.6\(\pm\)0.6 & **81.4\(\pm\)2.1** & 73.9 \\ \hline SAT & **92.6\(\pm\)4.3** & 77.7\(\pm\)3.2 & 82.5\(\pm\)0.8 & 70.0\(\pm\)1.3 & 47.3\(\pm\)3.2 & 68.3\(\pm\)4.9 & **91.7\(\pm\)2.1** & 80.6\(\pm\)0.6 & 76.1 \\ Graphformer & 89.6\(\pm\)6.2 & 76.3\(\pm\)2.7 & 78.6\(\pm\)2.1 & 70.3\(\pm\)0.9 & 48.9\(\pm\)2.0 & **71.4\(\pm\)5.2** & 85.3\(\pm\)2.3 & 80.3\(\pm\)1.3 & 75.1 \\ \hline \hline GRDL & **92.1\(\pm\)5.9** & **82.6\(\pm\)1.2** & 80.4\(\pm\)0.8 & **74.8\(\pm\)2.0** & **52.9\(\pm\)1.8** & 68.3\(\pm\)5.4 & **92.9\(\pm\)1.1** & **79.8\(\pm\)9.0** & **77.9** \\ GRDL-W & 90.8\(\pm\)4.6 & **82.1\(\pm\)0.9** & 80.9\(\pm\)0.8 & 72.2\(\pm\)3.3 & **53.1\(\pm\)9.9** & 68.5\(\pm\)3.2 & 90.6\(\pm\)1.5 & 80.4\

**Baselines** Our approach is benchmarked against four groups of state-of-the-art baselines: 1) GNN models with global or sophisticated pooling operations, including PATCHY-SAN (Niepert et al., 2016), DIFFPOOL (Ying et al., 2018), GIN (Xu et al., 2018), DropGIN (Papp et al., 2021), SEP (Wu et al., 2022), GMT (Baek et al., 2021), MinCutPool (Bianchi et al., 2020), ASAP (Ranjan et al., 2020), and Wit-TopoPool (Chen and Gel, 2023); 2) Optimal transport based models such as WEGL (Kolouri et al., 2020) and OT-GNN (Chen et al., 2021); 3) Kernel-based approaches including FGW (Tittouan et al., 2019) operating on adjacency (ADJ) and shortest path (SP) matrices, the WL subtree kernel (Shervashidze et al., 2011), and the Wasserstein WL kernel (Toginalli et al., 2019); 4) Graph transformers including Graphormer (Ying et al., 2021) and SAT (Chen et al., 2022a). We also show the results of two variations of our GRDL: GRDL using Sinkhorn divergence (GRDL-S) and GRDL using Wasserstein distance (GRDL-W). For large imbalanced datasets, we only benchmark our GRDL against PATCHY-SAN, GIN, and DIFFPOOL because other methods are too costly. Details about the initialization and hyper-parameters setting can be found in Appendix D.3.

**Experiment Settings** Due to the page limitation, please refer to Appendix D.2.

**Classification Results** Table 1 shows the classification results. The AUC-ROC scores of experiments results on the three large imbalanced datasets are reported in Table 2. Our method has top 3 classification performance over baselines in almost all datasets. Our GRDL, GRDL-W and GRDL-S have close performance. However, as shown later in Figure 2, our original GRDL has significantly lower time costs and thus is preferable for practical use. Graph transformers also have competitive performance, but they have significantly larger amount parameters and much higher time costs than our model, as shown by Table 13 in Appendix D.8.

### Time Cost Comparison

We compare the time cost of our GRDL with two models that leverage optimal transport distances discussed in Section 4: OT-GNN (Chen et al., 2021) and TFGW (Vincent-Cuaz et al., 2022). Compared with them, our model has significantly lower time costs. We present empirical average training time per epoch in Figure 2 and average prediction time per graph in Table 9 in Appendix D.4. Experiments were conducted on CPUs (Apple M1) using identical batch sizes, ensuring a fair comparison. It's noteworthy that the OT solver employed in TFGW and OT-GNN is currently confined to CPU, influencing the choice of hardware for this evaluation. We analyzed the theoretical time complexity in Appendix D.4 (see Table 8).

We also compare training time with two latest pooling methods including Wit-TopoPool (Chen and Gel, 2023) and MSGNN (Lv et al., 2023) on eight real datasets and three synthetic datasets. The three synthetic datasets have 2000 graphs with 100(SYN-100), 300(SYN-300), and 500(SYN-500) nodes per graph, respectively. The edge number is \(0.1n^{2}\) where \(n\) is the number of nodes. The empirical training time per epoch is shown in Table 3, where empty of MSGNN means it takes more than 200 seconds to train a single epoch, which is too costly. As can be seen, our method is the most efficient among these three methods.

### Graph Visualization

We use t-SNE (Van der Maaten and Hinton, 2008) to visualize the distributions of graphs' node embeddings given by our GRDL model, which is equivalent to visualizing each graph in a 3-D coordinate system. Firstly we use MMD to calculate a distance matrix \(\mathbf{C}\in\mathbb{R}^{(N+K)\times(N+K)}\) between

\begin{table}
\begin{tabular}{l c c c} \hline \hline \multirow{2}{*}{**Method**} & \multicolumn{3}{c}{**Dataset**} \\ \cline{2-4}  & PC-3 & MCF-7 & ogbg-molhiv \\ \hline GIN & 84.6\(\pm\)1.4 & 80.6\(\pm\)1.5 & 77.8\(\pm\)1.3 \\ DIFFPOOL & 83.2\(\pm\)1.9 & 77.2\(\pm\)1.3 & 73.7\(\pm\)1.8 \\ PATCHY-SAN & 80.7\(\pm\)2.1 & 78.9\(\pm\)3.1 & 70.2\(\pm\)2.1 \\ GRDL & **85.1\(\pm\)1.6** & **81.4\(\pm\)1.3** & **79.8\(\pm\)1.0** \\ \hline \hline \end{tabular}
\end{table}
Table 2: AUC-ROC scores of large imbalanced data classification. Bold text indicates the best.

\begin{table}
\begin{tabular}{l c c c c c c c c c c c} \hline \hline  & MutData & proteins & NCI & IMD-B & IMD-M & PTC-MR & BZR & COLLAB & SYN-100 & SYN-300 & SYN-500 \\ \hline GRDL (ours) & 0.4 & 3.4 & 12.6 & 2.4 & 3.5 & 0.8 & 1.2 & 16.3 & 26.6 & 45.8 & 88.7 \\ WitTorPool & 0.4 & 2.6 & 21.4 & 2.4 & 2.6 & 1.0 & 1.3 & 39.1 & 32.9 & 50.8 & 97.5 \\ MSGNN & 45.2 & - & - & - & 75.5 & 135.3 & - & - & - & - \\ \hline \hline \end{tabular}
\end{table}
Table 3: Comparison of time cost (second) per epoch with Wit-TopoPool and MSGNN.

the node embeddings \(\{\mathbf{H}_{i}\}_{i=1}^{N}\) and the reference distributions \(\{\mathbf{D}_{k}\}_{k=1}^{K}\). The 3-D visualization given by t-SNE using **C** is presented in Figure 3. The graphs are located around the references. It means that the learned references can represent realistic graphs' latent node embeddings from the data.

### More Numerical Results

The ablation study, influence of \(\theta\), generalization comparison with GIN are in Appendices D.5, D.6, and A, respectively.

## 6 Conclusions

We proposed GRDL, a novel framework for graph classification without global pooling operations and hence effectively preserve the information of node embeddings. What's more, we theoretically analyzed the generalization ability of GRDL, which provided valuable insights into how the generalization ability scales with the properties of the graph data and network structure. Extensive experiments on moderate-scale and large-scale benchmark datasets verify the effectiveness and efficiency of GRDL in comparison to baselines. However, on some benchmark datasets (e.g. NCI1), our model does not outperform the baseline, which may be a limitation of our work and requires further investigation in the future.

Figure 3: T-SNE visualization of MUTAG embeddings and reference distributions given by GRDL. Each dot denotes a graph and each square denotes a reference distribution.

Figure 2: Average training time per epoch. GRDL is 10 times faster than OT-GNN and TFGW.

## Acknowledgments

This work was supported by the National Natural Science Foundation of China under Grant No.62376236, the Guangdong Provincial Key Laboratory of Mathematical Foundations for Artificial Intelligence (2023B1212010001), Shenzhen Science and Technology Program ZDSYS20230626091302006, Shenzhen Stability Science Program 2023, and Hetao Shenzhen-Hong Kong Science and Technology Innovation Cooperation Zone Project (No.HZQSWS-KCCYB-2024016). The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper.

The authors appreciate the reviewers and area chair of the paper.

## References

* Baek et al. (2021) Jinheon Baek, Minki Kang, and Sung Ju Hwang. Accurate learning of graph representations with graph multiset pooling. _arXiv preprint arXiv:2102.11533_, 2021.
* Bartlett et al. (2017) Peter L Bartlett, Dylan J Foster, and Matus J Telgarsky. Spectrally-normalized margin bounds for neural networks. _Advances in neural information processing systems_, 30, 2017.
* Bengio and Grandvalet (2003) Yoshua Bengio and Yves Grandvalet. No unbiased estimator of the variance of k-fold cross-validation. _Advances in Neural Information Processing Systems_, 16, 2003.
* Bianchi et al. (2020) Filippo Maria Bianchi, Daniele Grattarola, and Cesare Alippi. Spectral clustering with graph neural networks for graph pooling. In _International conference on machine learning_, pages 874-883. PMLR, 2020.
* Buterez et al. (2022) David Buterez, Jon Paul Janet, Steven J Kiddle, Dino Oglic, and Pietro Lio. Graph neural networks with adaptive readouts. _Advances in Neural Information Processing Systems_, 35:19746-19758, 2022.
* Chen et al. (2021) Benson Chen, Gary Becigneul, Octavian-Eugen Ganea, Regina Barzilay, and Tommi Jaakkola. Optimal transport graph neural networks, 2021.
* Chen et al. (2022a) Dexiong Chen, Leslie O'Bray, and Karsten Borgwardt. Structure-aware transformer for graph representation learning. In _Proceedings of the 39th International Conference on Machine Learning (ICML)_, Proceedings of Machine Learning Research, 2022a.
* Chen et al. (2022b) Samantha Chen, Sunhyuk Lim, Facundo Memoli, Zhengchao Wan, and Yusu Wang. Weisfeiler-lehman meets gromov-wasserstein. In _International Conference on Machine Learning_, pages 3371-3416. PMLR, 2022b.
* Chen and Gel (2023) Yuzhou Chen and Yulia R. Gel. Topological pooling on graphs. In _Proceedings of the Thirty-Seventh AAAI Conference on Artificial Intelligence and Thirty-Fifth Conference on Innovative Applications of Artificial Intelligence and Thirteenth Symposium on Educational Advances in Artificial Intelligence_, AAAI'23/IAAI'23/EAAI'23, 2023.
* Cuturi (2013) Marco Cuturi. Sinkhorn distances: Lightspeed computation of optimal transport. _Advances in neural information processing systems_, 26, 2013.
* Defferrard et al. (2016) Michael Defferrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks on graphs with fast localized spectral filtering. _Advances in neural information processing systems_, 29, 2016.
* Garg et al. (2020) Vikas Garg, Stefanie Jegelka, and Tommi Jaakkola. Generalization and representational limits of graph neural networks. In _International Conference on Machine Learning_, pages 3419-3430. PMLR, 2020.
* Gartner et al. (2003) Thomas Gartner, Peter Flach, and Stefan Wrobel. On graph kernels: Hardness results and efficient alternatives. In _Learning Theory and Kernel Machines: 16th Annual Conference on Learning Theory and 7th Kernel Workshop, COLT/Kernel 2003, Washington, DC, USA, August 24-27, 2003. Proceedings_, pages 129-143. Springer, 2003.
* Gartner et al. (2017)Justin Gilmer, Samuel S Schoenholz, Patrick F Riley, Oriol Vinyals, and George E Dahl. Neural message passing for quantum chemistry. In _International conference on machine learning_, pages 1263-1272. PMLR, 2017.
* Gretton et al. (2012a) Arthur Gretton, Karsten M Borgwardt, Malte J Rasch, Bernhard Scholkopf, and Alexander Smola. A kernel two-sample test. _The Journal of Machine Learning Research_, 13(1):723-773, 2012a.
* Gretton et al. (2012b) Arthur Gretton, Dino Sejdinovic, Heiko Strathmann, Sivaraman Balakrishnan, Massimiliano Pontil, Kenji Fukumizu, and Bharath K Sriperumbudur. Optimal kernel choice for large-scale two-sample tests. _Advances in neural information processing systems_, 25, 2012b.
* Hamilton et al. (2017) Will Hamilton, Zhitao Ying, and Jure Leskovec. Inductive representation learning on large graphs. _Advances in neural information processing systems_, 30, 2017.
* Hu et al. (2020) Weihua Hu, Matthias Fey, Marinka Zitnik, Yuxiao Dong, Hongyu Ren, Bowen Liu, Michele Catasta, and Jure Leskovec. Open graph benchmark: Datasets for machine learning on graphs. _arXiv preprint arXiv:2005.00687_, 2020.
* Ju et al. (2023) Haotian Ju, Dongyue Li, Aneesh Sharma, and Hongyang R. Zhang. Generalization in graph neural networks: Improved pac-bayesian bounds on graph diffusion. In _Proceedings of The 26th International Conference on Artificial Intelligence and Statistics_, volume 206, pages 6314-6341. PMLR, 25-27 Apr 2023.
* Jumper et al. (2021) John Jumper, Richard Evans, Alexander Pritzel, Tim Green, Michael Figurnov, Olaf Ronneberger, Kathryn Tunyasuvunakool, Russ Bates, Augustin Zidek, Anna Potapenko, et al. Highly accurate protein structure prediction with alphafold. _Nature_, 596(7873):583-589, 2021.
* Kingma and Ba (2014) Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. _arXiv preprint arXiv:1412.6980_, 2014.
* Kipf and Welling (2016) Thomas N Kipf and Max Welling. Semi-supervised classification with graph convolutional networks. _arXiv preprint arXiv:1609.02907_, 2016.
* Kolouri et al. (2020) Soheil Kolouri, Navid Naderializadeh, Gustavo K Rohde, and Heiko Hoffmann. Wasserstein embedding for graph learning. _arXiv preprint arXiv:2006.09430_, 2020.
* Ktena et al. (2017) Sofia Ira Ktena, Sarah Parisot, Enzo Ferrante, Martin Rajchl, Matthew Lee, Ben Glocker, and Daniel Rueckert. Distance metric learning using graph convolutional networks: Application to functional brain networks. In _Medical Image Computing and Computer Assisted Intervention- MICCAI 2017: 20th International Conference, Quebec City, QC, Canada, September 11-13, 2017, Proceedings, Part I 20_, pages 469-477. Springer, 2017.
* Lee et al. (2021) Dongha Lee, Su Kim, Seonghyeon Lee, Chanyoung Park, and Hwanjo Yu. Learnable structural semantic readout for graph classification. In _2021 IEEE International Conference on Data Mining (ICDM)_, pages 1180-1185. IEEE, 2021.
* Lee et al. (2019) Junhyun Lee, Inyeop Lee, and Jaewoo Kang. Self-attention graph pooling. In _International conference on machine learning_, pages 3734-3743. PMLR, 2019.
* Li et al. (2015) Yujia Li, Daniel Tarlow, Marc Brockschmidt, and Richard Zemel. Gated graph sequence neural networks. _arXiv preprint arXiv:1511.05493_, 2015.
* Liao et al. (2021) Renjie Liao, Raquel Urtasun, and Richard Zemel. A PAC-Bayesian approach to generalization bounds for graph neural networks. In _International Conference on Learning Representations_, 2021.
* Liu et al. (2022a) Weijie Liu, Jiahao Xie, Chao Zhang, Makoto Yamada, Nenggan Zheng, and Hui Qian. Robust graph dictionary learning. In _The Eleventh International Conference on Learning Representations_, 2022a.
* Liu et al. (2022b) Yixin Liu, Ming Jin, Shirui Pan, Chuan Zhou, Yu Zheng, Feng Xia, and S Yu Philip. Graph self-supervised learning: A survey. _IEEE Transactions on Knowledge and Data Engineering_, 35(6):5879-5900, 2022b.
* Liu et al. (2020)Yiqin Lv, Zhiliang Tian, Zheng Xie, and Yiping Song. Multi-scale graph pooling approach with adaptive key subgraph for graph representations. In _Proceedings of the 32nd ACM International Conference on Information and Knowledge Management_, CIKM '23. Association for Computing Machinery, 2023.
* Maron et al. (2019) Haggai Maron, Heli Ben-Hamu, Hadar Serviansky, and Yaron Lipman. Provably powerful graph networks. _Advances in neural information processing systems_, 32, 2019.
* Mohri et al. (2018) Mehryar Mohri, Afshin Rostamizadeh, and Ameet Talwalkar. _Foundations of machine learning_. MIT press, 2018.
* Morris et al. (2020) Christopher Morris, Nils M. Kriege, Franka Bause, Kristian Kersting, Petra Mutzel, and Marion Neumann. Tudataset: A collection of benchmark datasets for learning with graphs. In _ICML 2020 Workshop on Graph Representation Learning and Beyond (GRL+ 2020)_, 2020. URL www.graphlearning.io.
* Niepert et al. (2016) Mathias Niepert, Mohamed Ahmed, and Konstantin Kutzkov. Learning convolutional neural networks for graphs. In _International conference on machine learning_, pages 2014-2023. PMLR, 2016.
* Papp et al. (2021) Pal Andras Papp, Karolis Martinkus, Lukas Faber, and Roger Wattenhofer. Dropgnn: Random dropouts increase the expressiveness of graph neural networks. _Advances in Neural Information Processing Systems_, 34:21997-22009, 2021.
* Peyre and Cuturi (2020) Gabriel Peyre and Marco Cuturi. Computational optimal transport, 2020.
* Ranjan et al. (2020) Ekagra Ranjan, Soumya Sanyal, and Partha Talukdar. Asap: Adaptive structure aware pooling for learning hierarchical graph representations. In _Proceedings of the AAAI conference on artificial intelligence_, volume 34, pages 5470-5477, 2020.
* Shervashidze et al. (2011) Nino Shervashidze, Pascal Schweitzer, Erik Jan Van Leeuwen, Kurt Mehlhorn, and Karsten M Borgwardt. Weisfeiler-lehman graph kernels. _Journal of Machine Learning Research_, 12(9), 2011.
* Sun et al. (2019) Fan-Yun Sun, Jordan Hoffmann, Vikas Verma, and Jian Tang. Infograph: Unsupervised and semi-supervised graph-level representation learning via mutual information maximization. _arXiv preprint arXiv:1908.01000_, 2019.
* Sun and Fan (2024) Yan Sun and Jicong Fan. MMD graph kernel: Effective metric learning for graphs via maximum mean discrepancy. In _The Twelfth International Conference on Learning Representations_, 2024. URL https://openreview.net/forum?id=GZ6AcZwA8r.
* Sun et al. (2023) Ziheng Sun, Chris Ding, and Jicong Fan. Lovasz principle for unsupervised graph representation learning. In _Thirty-seventh Conference on Neural Information Processing Systems_, 2023.
* Sun et al. (2024) Ziheng Sun, Xudong Wang, Chris Ding, and Jicong Fan. Learning graph representation via graph entropy maximization. In _Forty-first International Conference on Machine Learning_, 2024.
* Tang and Liu (2023) Huayi Tang and Yong Liu. Towards understanding generalization of graph neural networks. In Andreas Krause, Emma Brunskill, Kyunghyun Cho, Barbara Engelhardt, Sivan Sabato, and Jonathan Scarlett, editors, _Proceedings of the 40th International Conference on Machine Learning_, volume 202 of _Proceedings of Machine Learning Research_, pages 33674-33719. PMLR, 23-29 Jul 2023.
* Titouan et al. (2019) Vayer Titouan, Nicolas Courty, Romain Tavenard, Chapel Laetitia, and Remi Flamary. Optimal transport for structured data with application on graphs. In _Proceedings of the 36th International Conference on Machine Learning_, volume 97 of _Proceedings of Machine Learning Research_, pages 6275-6284. PMLR, 09-15 Jun 2019.
* Togninalli et al. (2019) Matteo Togninalli, Elisabetta Ghisu, Felipe Llinares-Lopez, Bastian Rieck, and Karsten Borgwardt. Wasserstein weisfeiler-lehman graph kernels. _Advances in neural information processing systems_, 32, 2019.
* Maaten and Hinton (2008) Laurens Van der Maaten and Geoffrey Hinton. Visualizing data using t-sne. _Journal of machine learning research_, 9(11), 2008.
* Maaten et al. (2019)Titouan Vayer, Laetita Chapel, Remi Flamary, Romain Tavenard, and Nicolas Courty. Fused gromov-wasserstein distance for structured objects: theoretical foundations and mathematical properties, 2018.
* Velickovic et al. (2017) Petar Velickovic, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro Lio, and Yoshua Bengio. Graph attention networks. _arXiv preprint arXiv:1710.10903_, 2017.
* Vincent-Cuaz et al. (2021) Cedric Vincent-Cuaz, Titouan Vayer, Remi Flamary, Marco Corneli, and Nicolas Courty. Online graph dictionary learning. In _International conference on machine learning_, pages 10564-10574. PMLR, 2021.
* Vincent-Cuaz et al. (2022) Cedric Vincent-Cuaz, Remi Flamary, Marco Corneli, Titouan Vayer, and Nicolas Courty. Template based graph neural network with optimal transport distances. _Advances in Neural Information Processing Systems_, 35:11800-11814, 2022.
* Wang et al. (2018) Zhovia Wang, Tianshui Chen, Jimmy Ren, Weihao Yu, Hui Cheng, and Liang Lin. Deep reasoning with knowledge graph for social relationship understanding. In _Proceedings of the Twenty-Seventh International Joint Conference on Artificial Intelligence, IJCAI-18_, pages 1021-1028. International Joint Conferences on Artificial Intelligence Organization, 7 2018. doi: 10.24963/ijcai.2018/142. URL https://doi.org/10.24963/ijcai.2018/142.
* Wu et al. (2022) Junran Wu, Xueyuan Chen, Ke Xu, and Shangzhe Li. Structural entropy guided graph hierarchical pooling. In _International conference on machine learning_, pages 24017-24030. PMLR, 2022.
* Xiao et al. (2022) Teng Xiao, Zhengyu Chen, Zhimeng Guo, Zeyang Zhuang, and Suhang Wang. Decoupled self-supervised learning for graphs. _Advances in Neural Information Processing Systems_, 35:620-634, 2022.
* Xu et al. (2018) Keyulu Xu, Weihua Hu, Jure Leskovec, and Stefanie Jegelka. How powerful are graph neural networks? _arXiv preprint arXiv:1810.00826_, 2018.
* Ying et al. (2021) Chengxuan Ying, Tianle Cai, Shengjie Luo, Shuxin Zheng, Guolin Ke, Di He, Yanming Shen, and Tie-Yan Liu. Do transformers really perform badly for graph representation? _Advances in neural information processing systems_, 34:28877-28888, 2021.
* Ying et al. (2018) Zhitao Ying, Jiaxuan You, Christopher Morris, Xiang Ren, Will Hamilton, and Jure Leskovec. Hierarchical graph representation learning with differentiable pooling. _Advances in neural information processing systems_, 31, 2018.
* You et al. (2021) Yuning You, Tianlong Chen, Yang Shen, and Zhangyang Wang. Graph contrastive learning automated. In _International Conference on Machine Learning_, pages 12121-12132. PMLR, 2021.
* Yu et al. (2024) Jiajun Yu, Zhihao Wu, Jinyu Cai, Adele Lu Jia, and Jicong Fan. Kernel readout for graph neural networks. In Kate Larson, editor, _Proceedings of the Thirty-Third International Joint Conference on Artificial Intelligence, IJCAI-24_, pages 2505-2514. International Joint Conferences on Artificial Intelligence Organization, 8 2024. doi: 10.24963/ijcai.2024/277. URL https://doi.org/10.24963/ijcai.2024/277. Main Track.
* Zeng et al. (2023) Zhichen Zeng, Ruike Zhu, Yinglong Xia, Hanqing Zeng, and Hanghang Tong. Generative graph dictionary learning. In _International Conference on Machine Learning_, pages 40749-40769. PMLR, 2023.

## Appendix

### Table of Contents

* A Generalization Comparison to GIN with Global Pooling
* B Theory and Experiments of GRDL with Multiple Reference Distributions
* C Detailed Training Algorithm of GRDL
* D More Experiments
* D.1 Dataset Statistics
* D.2 Experiment Settings
* D.3 Hyper-parameter Settings and Parameter Initializations
* D.4 Time Complexity
* D.5 Ablation Study
* D.6 Influence of \(\theta\)
* D.7 Experiments on The Generalization Error Bound
* D.8 Parameter Number and Time Cost Comparison with Graph Transformers
* E Proof Setups
* F Proof for Theorems, Corollaries, and Lemmas
* F.1 Correctness Analysis
* F.2 Lipschitz properties
* F.3 Covering number
* F.4 Proof of Lemma E.2
* F.5 Proof of Lemma F.8
* F.6 Proof of Theorem 3.2
* F.7 Corollary of Theorem 3.2
* F.8 Adjacency matrix spectral norm
* F.9 Generalization of MMD (to be used in Section F.10)
* F.10 Proof of Lemma F.2
* F.11 Proof of Theorem A.1
Generalization Comparison to GIN with Global Pooling

To see the advantage of our GRDL, we compare it with GIN. The only difference between GRDL and GIN is that GRDL uses a reference layer while GIN uses readout. We add an \(r^{\prime}\)-layer MLP as the classifier after message-passing modules in the GIN. The following theorem gives an upper bound of GIN's generalization error:

**Theorem A.1** (Generalization bound of GIN).: _Let \(n=\min_{i}n_{i}\), \(c=\|\tilde{\mathbf{A}}\|_{\sigma}\), and \(\bar{d}=\max_{i,l}d_{i}^{(l)}\). Denote \(R_{G}:=c^{2L}\|\mathbf{X}\|_{2}^{2}\ln(2\bar{d}^{2})\big{(}\prod_{l=1}^{L}( \prod_{i=1}^{r}\kappa_{i}^{(l)})^{2}\big{)}\big{(}\sum_{l=1}^{L}\sum_{i=1}^{r} \binom{b_{i}^{(l)}}{\kappa_{i}^{(l)}}^{2/3}\big{)}^{3}\). For graphs \(\mathcal{G}=\{(G_{i},y_{i})\}_{i=1}^{N}\) drawn i.i.d from any probability distribution over \(\mathcal{X}\times\{1,\ldots,K\}\), with probability at least \(1-\delta\), GIN network with mean readout satisfies_

\[L_{\gamma}(f)\leq\hat{L}_{\gamma}(f)+3\gamma\sqrt{\frac{\ln{(2/\delta)}}{2N}}+ \frac{8\gamma+24\mu(\prod_{i=1}^{r^{\prime}}\kappa_{i}^{(L+1)})\sqrt{\frac{R_ {G}+R_{G}^{\prime}}{2}\ln N}}{N}\]

_where \(R_{G}^{\prime}=c^{2L}\|\mathbf{X}\|_{2}^{2}\ln(2\bar{d}^{2})\big{(}\prod_{l=1 }^{L}(\prod_{i=1}^{r}\kappa_{i}^{(l)})^{2}\big{)}\big{(}3C_{2}^{2}C_{1}+3C_{2} C_{1}^{2}+C_{1}^{3}\big{)}\), \(C_{1}=\sum_{i=1}^{r^{\prime}}\frac{b_{i}^{(L+1)}}{\kappa_{i}^{(L+1)}}\), and \(C_{2}=\sum_{l=1}^{L}\sum_{i=1}^{r}\big{(}\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)}} \big{)}^{2/3}\)._

This bound is derived using the same techniques as our GRDL bound in Theorem 3.2. To compare these two bounds, we only need to compare the following two terms:

\[Q_{\text{GRDL}} :=24\sqrt{v_{1}+v_{2}}\ln N+24\gamma\sqrt{Nv_{2}\ln v_{3}}\] (Theorem 3.2) \[Q_{\text{GIN}} :=24\mu\Big{(}\prod_{i=1}^{r^{\prime}}\kappa_{i}^{(L+1)}\Big{)} \sqrt{R_{G}+R_{G}^{\prime}}\ln N\] (Theorem A.1)

where \(v_{1}=\frac{64\theta K\mu^{2}}{n}R_{G}\), \(v_{2}=Km\bar{d}\), and \(v_{3}=\frac{24\sqrt{\theta N}b_{D}\mu}{\sqrt{m}}\). Our observations are as follows.

* The \(\theta\) in \(v_{1}\) can be absorbed into \(\mathbf{W}_{r}^{(L)}\) and \(\{\mathbf{D}_{k}\}_{k=1}^{K}\). Since \(n\gg K\), we conclude that \(\frac{64\theta K}{n}\) is smaller than 1 in practice. Therefore, \(v_{1}\leq\mu^{2}R_{G}\).
* \(v_{2}=Km\bar{d}\) and \(v_{3}=\frac{24\sqrt{\theta N}b_{D}\mu}{\sqrt{m}}\) are much smaller than \(R_{G}^{\prime}\) as well as \(R_{G}\), i.e., \(v_{2}\ll R_{G}^{\prime}\) and \(v_{3}\ll R_{G}^{\prime}\). The reason is that \(R_{G}^{\prime}\) and \(R_{G}\) involve the multiplication of terms related to \(c\), \(\|\mathbf{X}\|_{2}^{2}\), and \(\kappa_{i}^{(l)}\).
* In Theorem A.1, \(\prod_{i=1}^{r^{\prime}}\kappa_{i}^{(L+1)}\) is typically larger than \(3\) for \(r^{\prime}>1\) based on empirical observations. We also observe that \(\prod_{i=1}^{r^{\prime}}\kappa_{i}^{(L+1)}\) may be smaller than \(1\) for \(r^{\prime}\) = 1, but the linear classifier's expressive capacity is very limited and thus has large training error. Therefore, we focus on the case where \(r^{\prime}>1\).

Now we can conclude that \(Q_{\text{GRDL}}<Q_{\text{GIN}}\). Therefore, the generalization error upper bound of GIN is larger than of GRDL, meaning our GRDL generalizes better on unseen data than GIN in the worst case. It is worth noting that these results apply to other GNNs such as GCN.

We now use numerical experiments on real datasets to support our claim. The training and testing accuracy of GRDL and GIN are shown in Table 4. We see that the training accuracy of our GRDL is close to that of GIN, but the testing accuracy of our GRDL is much higher than that of GIN. This means that GRDL and GIN have similar training errors but the former has a stronger generalization ability.

## Appendix B Theory and Experiments of GRDL with Multiple Reference Distributions

Currently, we use \(K\) reference distributions for classification (one for each class). One natural approach to enhance the model's expressive power is to increase the number of reference distributions for each class. However, counterintuitively, our empirical observations suggest that having only one reference per class is optimal. In this section, we will explore and provide insights into this phenomenon.

Suppose we have \(P\) reference distributions for each class, i.e. \(\mathcal{D}\triangleq\left\{\mathbf{D}_{k}^{(p)}\right\}_{k\in[K]}^{p\in[P]}\), where \(\mathbf{D}_{k}^{(p)}\) is the \(p\)-th reference in the \(k\)-th class. The prediction in Equation (5) is changed to

\[y_{\text{pred},i}=\arg\max_{k\in[K]}s_{ik},\quad s_{ik}=\sum_{p=1}^{P}\xi( \mathbf{H}_{i},\mathbf{D}_{k}^{(p)}).\] (24)

The training algorithm is nearly the same as our GRDL with one reference per class (Algorithm 1) except for the mini-batch training loss because of the multiple references, i.e.,

\[\mathcal{L}=-\frac{1}{B}\sum_{i\in\mathcal{B}}\sum_{k=1}^{K}y_{ik}\log\hat{y}_ {ik}+\lambda\sum_{k^{\prime}\neq k}\sum_{p,p^{\prime}=1}^{P}\xi_{\theta}( \mathbf{D}_{k}^{(p)},\mathbf{D}_{k^{\prime}}^{(p^{\prime})})\] (25)

We compare the model with \(P=2\) (GRDL-2) and \(P=3\) (GRDL-3) with our GRDL (\(P=1\)). Table 5 shows the classification accuracy of the models on the benchmark datasets.

To explain why GRDL performs better than the models with more references, we first introduce the following theorem

**Theorem B.1**.: _Let \(n\) be the minimum number of nodes for graphs \(\left\{G_{i}\right\}_{i=1}^{N}\), \(\theta\) be the hyper-parameter in the Gaussian kernel (Equation (15)), \(c=\|\tilde{\mathbf{A}}\|_{\sigma}\). For graphs \(\mathcal{G}=\left\{(G_{i},y_{i})\right\}_{i=1}^{N}\) drawn i.i.d from any probability distribution over \(\mathcal{X}\times\{1,\ldots,K\}\) and references \(\left\{\mathbf{D}_{k}^{(p)}\right\}_{k\in[K]}^{p\in[P]},\mathbf{D}_{k}^{(p)} \in\mathbb{R}^{m\times d}\), with probability at least \(1-\delta\), every loss function \(l_{\gamma}\) and network \(f\in\mathcal{F}\) under Assumption 3.1 satisfy_

\[L_{\gamma}(f)\leq\hat{L}_{\gamma}(f)+3\gamma\sqrt{\frac{\ln\left(2/\delta \right)}{2N}}+\frac{8\gamma+24\sqrt{v_{1}+v_{2}}\ln N+24\gamma\sqrt{Nv_{2}\ln v _{3}}}{N}\]

\begin{table}
\begin{tabular}{l c c c c} \hline \hline \multirow{2}{*}{Dataset} & \multicolumn{3}{c}{GRDL} & \multicolumn{2}{c}{GIN} \\  & Training Accuracy & Testing Accuracy & Training Accuracy & Testing Accuracy \\ \hline MUTAG & 93.3 & 92.1 & 92.7 & 89.4 \\ PROTEINS & 83.1 & 82.6 & 80.5 & 76.2 \\ NCI1 & 82.8 & 80.4 & 83.3 & 82.2 \\ IMDB-B & 76.3 & 74.8 & 75.9 & 64.3 \\ IMDB-M & 53.1 & 52.9 & 51.7 & 50.9 \\ PTC-MR & 71.3 & 68.3 & 66.1 & 64.6 \\ BZR & 93.1 & 92.0 & 93.9 & 82.6 \\ COLLAB & 82.1 & 79.9 & 82.3 & 79.3 \\ \hline Average & 79.4 & 77.9 & 78.3 & 73.6 \\ \hline \hline \end{tabular}
\end{table}
Table 4: Comparison of the training and testing accuracy between GRDL and GIN.

\begin{table}
\begin{tabular}{l c c c} \hline \hline \multirow{2}{*}{**Dataset**} & \multicolumn{3}{c}{**Method**} \\ \cline{2-3}  & GRDL & GRDL-2 & GRDL-3 \\ \hline MUTAG & **92.1\(\pm\)5.9** & 91.5\(\pm\)4.8 & 90.4\(\pm\)3.1 \\ PROTEINS & **82.6\(\pm\)1.2** & 81.4\(\pm\)2.1 & 81.3\(\pm\)2.9 \\ NCI1 & **80.4\(\pm\)0.8** & 79.3\(\pm\)1.0 & 80.0\(\pm\)1.6 \\ IMDB-B & **74.8\(\pm\)2.0** & 73.6\(\pm\)2.2 & 74.0\(\pm\)1.4 \\ IMDB-M & **52.9\(\pm\)1.8** & 51.1\(\pm\)1.2 & 50.3\(\pm\)2.1 \\ PTC-MR & **68.3\(\pm\)5.4** & 66.3\(\pm\)6.4 & 65.4\(\pm\)5.5 \\ BZR & **92.0\(\pm\)1.1** & 87.1\(\pm\)2.7 & 88.2\(\pm\)3.1 \\ COLLAB & **79.8\(\pm\)0.9** & 77.9\(\pm\)1.2 & 77.5\(\pm\)0.7 \\ \hline \hline \end{tabular}
\end{table}
Table 5: Classification accuracy of models with multiple reference distributions. **Bold** text indicates the best mean accuracy.

_where_

\[v_{1}=\frac{64\theta P^{2}KR_{G}\mu^{2}}{n},v_{2}=Km\bar{d},v_{3}=\frac{24P\sqrt{ \theta N}b_{D}\mu}{\sqrt{m}},R_{G}=c^{2L}\|\mathbf{X}\|_{2}^{2}\ln(2\bar{d}^{2}) \left(\prod_{l=1}^{L}\left(\prod_{i=1}^{r}\kappa_{i}^{(l)}\right)^{2}\right) \left(\sum_{l=1}^{L}\sum_{i=1}^{r}\left(\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)}} \right)^{2/3}\right)^{3}.\]

This is essentially a more general version of Theorem 3.2. The following is a brief proof of this theorem.

Proof.: The only difference between multiple reference distributions and a single reference distribution comes from the calculation of \(s_{ij}\).

\[|s_{ij}-s_{ij}^{\prime}| =\left|\sum_{p=1}^{P}\left(\mathrm{MMD}^{2}\left(\mathbf{H}_{i}, \mathbf{D}_{j}^{(p)}\right)-\mathrm{MMD}^{2}\left(\mathbf{H}_{i}^{\prime}, \mathbf{D}_{j}^{(p)^{\prime}}\right)\right)\right|\] \[\leq\sum_{p=1}^{P}\left|\mathrm{MMD}^{2}\left(\mathbf{H}_{i}, \mathbf{D}_{j}^{(p)}\right)-\mathrm{MMD}^{2}\left(\mathbf{H}_{i}^{\prime}, \mathbf{D}_{j}^{(p)^{\prime}}\right)\right|\] \[\leq 4\sqrt{\theta}P\left(n^{-1/2}\|\mathbf{H}_{i}-\mathbf{H}_{i}^ {\prime}\|_{2}+m^{-1/2}\|\mathbf{D}_{j}-\mathbf{D}_{j}^{\prime}\|_{2}\right)\]

Then with minor modifications of proof of Lemma F.14, the covering number of \(\mathcal{F}\) is given by

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F},\rho\right)\leq\frac{64\theta P^{2} KR_{G}}{n\epsilon^{2}}+Kmd\ln\left(\frac{24b_{D}P\sqrt{\theta N}}{\sqrt{m }\epsilon}\right).\]

Then the theorem can be proved using the same process as the proof of Theorem 3.2. 

Let \(\bar{\kappa}=\max_{i,l}\kappa_{i}^{(l)}\), \(\bar{b}=\max_{i,l}\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)}}\) and suppose \(\delta\) is sufficiently large. The bound in Theorem B.1 can be simplified to

\[L_{\gamma}(f)\leq\hat{L}_{\gamma}(f)+\tilde{\mathcal{O}}\left(\frac{\sqrt{v_ {1}}+\gamma\sqrt{Nv_{2}}}{N}\right)\leq\hat{L}_{\gamma}(f)+\tilde{\mathcal{O} }\left(\frac{\mu\bar{b}\|\mathbf{X}\|_{2}c^{L}(Lr)^{\frac{3}{2}}\bar{\kappa}^ {Lr}P\sqrt{\theta K/n}}{N}+\gamma\sqrt{\frac{Kmd}{N}}\right)\] (26)

Empirically, we observe that the training loss \(\hat{L}_{\gamma}\) and the misclassification rate are nearly the same for small \(P\) and large \(P\) as shown in Figure 4. Therefore, smaller \(P\) implies tighter generalization bound in (26). This means that one reference distribution for each class (\(P=1\)) may be the optimal choice.

Another explanation is that, the nodes embeddings of graphs in the same class can be regarded as samples drawn from a single discrete distribution, thus learning a single reference distribution is sufficient to provide high classification accuracy. On the other hand, the union of multiple distributions can be regarded as a single distribution.

## Appendix C Detailed Training Algorithm of GRDL

In practice, since the scale of \(\theta\) is different from the scale of other parameters in the model, a different learning rate is used to update it. Suppose Adam (Kingma and Ba, 2014) is used to optimize the parameters, then the training of GRDL model is presented in Algorithm 1.

## Appendix D More Experiments

### Dataset Statistics

The statistics of the datasets are reported in Table 6. PC-3, MCF-7, and ogbg-molhiv are three large graph datasets.

### Experiment Settings

In the GNN literature, researchers typically perform 10-fold cross-validation and report the best average accuracy along with standard deviation (Xu et al., 2018; Papp et al., 2021; Maron et al., 2019). But here, we adopt a different strategy used in (Vincent-Cuza et al., 2022). We quantify the generalization capacities of models by performing a 10-fold cross-validation with a holdout test set which is never seen during training. The validation accuracy is tracked every 5 epochs, and the model that maximizes the validation accuracy is retained for testing. This setting is more realistic than a simple 10-fold CV and can better quantify models' generalization performances (Bengio and Grandvalet, 2003). However, the test sets for MUTAG and PTC-MR contain only 18 and 34 graphs respectively, making them too small for assessing generalization ability. Therefore, for MUTAG and PTC-MR, we use 10-fold cross-validation following (Xu et al., 2018). Notice that kernel-based methods do not require a stopping criterion dependent on a validation set, so we report results of 10-fold nested cross-validation repeated 10 times following (Titouan et al., 2019).

### Hyper-parameter Settings and Parameter Initializations

ModelFor all the baselines, we adopt the hyper-parameters suggested in the original papers. For our methods, we use GIN (Xu et al., 2018) layers as the embedding network. Every GIN layer is an

Figure 4: Training data misclassification rate on MUTAG (left) and IMDB-BINARY (right) with different numbers of references for each class (\(P\)). The effect of \(P\) on the training misclassification rates is not obvious.

MLP of 2 layers (\(r=2\)) with batch normalization, whose number of units is validated in \(\{32,64\}\) for all datasets. The parameter \(\lambda\) is validated in \(\{0.1,1\}\). We validate the number of GIN layers (\(L\)) in \(\{3,4,5,6,7,8,9\}\). For each dataset, the references' dimension (\(m\)) is validated in the minimum number of nodes (G1), average of the minimum and median number of nodes (G2), median number of nodes (G3), average of the median and maximum number of nodes (G4), and the maximum number of nodes (G5) of graphs in the dataset. The reference for each class is initialized as follows: 1) If there is a \(m\)-node graph in the dataset that belongs to the corresponding class, then the reference is initialized as node embeddings of the graph. 2) If no graph in the class has \(m\) nodes, then we perform K-Means clustering on the graphs of the class, and the \(m\) clustering center is chosen to be the initial reference.

OptimizationThe models are trained with Adam optimizer with an initial learning rate \(\alpha_{1}=10^{-3}\) for network weights and references. The learning rate \(\alpha_{1}\) decays exponentially with a factor 0.95. Since the Gaussian kernel parameter \(\theta\) is small in practice (around \(10^{-3}\) in our model), it is hard to choose a learning rate for it. Therefore, we consider \(\pi=\frac{1}{\theta}\) instead. \(\pi\) is initialized to \(500\) and its initial learning rate \(\alpha_{2}\) is validated in \(\{0.1,1\}\). The batch size for all datasets is fixed to 32.

Detailed hyper-parameters setting can be found in Table 7.

### Time Complexity

To provide a comprehensive understanding, we first show the forward propagation time complexity of the three models for a single graph \(G=(\mathbf{A},\mathbf{X}),\mathbf{A}\in\mathbb{R}^{n\times n},\mathbf{X}\in \mathbb{R}^{n\times d}\). Given that all three models employ a Graph Neural Network (GNN) for obtaining node embeddings, we denote the complexity and the number of parameters of the GNN embedding part as \(C_{1}\) and \(N_{1}\), respectively. Additionally, both OT-GNN and TFGW are augmented with an MLP for classification, introducing

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline datasets & features & \#graphs & \#classes & min \#nodes & median \#nodes & max \#nodes \\ \hline MUTAG & \(\{0,\dots,6\}\) & 188 & 2 & 10 & 17 & 28 \\ PROTEINS & \(\mathbb{R}^{29}\) & 1113 & 2 & 2 & 13 & 63 \\ NCI1 & \(\{0,\dots,36\}\) & 4110 & 2 & 3 & 27 & 111 \\ PTC-MR & \(\{0,\dots,17\}\) & 344 & 2 & 2 & 13 & 64 \\ BZR & \(\mathbb{R}^{3}\) & 405 & 2 & 13 & 35 & 57 \\ IMDB-B & None & 1000 & 2 & 12 & 17 & 136 \\ IMDB-M & None & 1500 & 3 & 7 & 10 & 89 \\ COLLAB & None & 5000 & 3 & 32 & 52 & 492 \\ \hline PC-3 & \(\{0,\dots,28\}\) & 27509 & 2 & 3 & 24 & 113 \\ MCF-7 & \(\{0,\dots,28\}\) & 27770 & 2 & 3 & 24 & 113 \\ ogbg-molhiv & \(\mathbb{R}^{29}\) & 41127 & 2 & 2 & 23 & 222 \\ \hline \hline \end{tabular}
\end{table}
Table 6: Dataset Statistics

\begin{table}.

\begin{tabular}{l c c c c c} \hline \hline datasets & \#layers & reference dim & hidden channels & \(\lambda\) & \(\alpha_{2}\) \\ \hline MUTAG & 5 & G2 & 32 & 1.0 & 1.0 \\ PROTEINS & 5 & G3 & 32 & 1.0 & 0.1 \\ NCI1 & 5 & G3 & 32 & 1.0 & 0.1 \\ IMDB-B & 5 & G3 & 32 & 1.0 & 1.0 \\ IMDB-M & 5 & G3 & 32 & 0.1 & 0.1 \\ PTC-MR & 5 & G3 & 32 & 1.0 & 0.1 \\ BZR & 5 & G3 & 32 & 1.0 & 0.1 \\ COLLAB & 6 & G3 & 32 & 1.0 & 0.1 \\ PC-3 & 6 & G4 & 64 & 1.0 & 0.1 \\ MCF-7 & 6 & G4 & 64 & 1.0 & 0.1 \\ ogbg-molhiv & 6 & G4 & 64 & 1.0 & 0.1 \\ \hline \hline \end{tabular}
\end{table}
Table 7: Hyper-parameter settings for experiment results in Table 1an extra complexity \(C_{2}\) and additional parameters \(N_{2}\). In the case of our GRDL, the number of references aligns with the number of classes \(K\).

Let's assume the number of references for OT-GNN is \(K_{1}\), and for TFGW, it is \(K_{2}\). Notably, TFGW and OT-GNN usually choose \(K_{1}=2K\) and \(K_{2}=2K\). Additionally, assuming that all references \(\mathbf{D}_{i}\in\mathbb{R}^{m\times d}\). Since the GW distance is iteratively computed in Vincent-Cuaz et al. (2022), we denote the number of iterations for convergence as \(T\). The time complexity and the number of parameters are outlined in Table 8.

Notice that Wasserstein distance can be approximated by sinkhorn iterations with complexity \(O((m+n)^{2})\) per iteration (Cuturi, 2013). But in practice, the exact calculation with \(O((m+n)^{3}\log{(m+n)})\) complexity empirically gives better performance in terms of both precision and speed, so it is implemented in the original paper of OT-GNN (Chen et al., 2021). Theoretically, our GRDL has lower prediction time complexity and a reduced parameter count. Table 9 shows the empirical prediction time per graph

### Ablation Study

We consider two variants of GRDL. The first one is GRDL with a fixed \(\theta=10^{-2}\) in the Gaussian kernel. The other is GRDL with \(\lambda=0\) in (9), which does not have the discriminativeness constraint on the references. We also include another baseline where we first use sum pooling over node embeddings and get the graph embedding vectors. The graph vectors are then used to compare with references (vectors in this case) with discrimination loss. The classification results of benchmark datasets are given in Table 11. The original model with learnable \(\theta\) and discriminativeness constraints consistently outperforms the other two.

### Influence of \(\theta\)

In our model, we initialized the Gaussian kernel hyper-parameter \(\theta\) to \(2\times 10^{-3}\) and it was adaptively learned during training. Actually, all values between \(1\times 10^{-4}\) and \(1\times 10^{-1}\) give similar performance, as it is adaptively adjusted in the training. The initialization of the neural network parameters and the reference distributions cannot guarantee that \(\mathbf{x}\) is close to \(\mathbf{x}^{\prime}\). If \(\theta\) is too large, the Gaussian kernel \(k(\mathbf{x},\mathbf{x}^{\prime})=\exp{(-\theta\|\mathbf{x}-\mathbf{x}^{\prime }\|_{2}^{2})}\) will be too sharp, which will lead to almost zero values. Hence, MMD will fail to effectively quantify the distance between the embeddings and reference distributions, as shown in Table 12.

\begin{table}
\begin{tabular}{l c c} \hline \hline \multirow{2}{*}{**Dataset**} & \multicolumn{2}{c}{**Method**} \\ \cline{2-3}  & GRDL & GRDL-R \\ \hline MUTAG & **92.1\(\pm\)5.9** & 91.6\(\pm\)5.5 \\ PROTEINS & **82.6\(\pm\)1.2** & 80.3\(\pm\)1.2 \\ NCI1 & **80.4\(\pm\)0.8** & 78.6\(\pm\)0.9 \\ IMDB-B & **74.8\(\pm\)2.0** & 73.6\(\pm\)1.6 \\ IMDB-M & **52.9\(\pm\)1.8** & 48.3\(\pm\)1.6 \\ PTC-MR & **68.3\(\pm\)5.4** & 68.1\(\pm\)6.4 \\ BZR & **92.0\(\pm\)1.1** & 90.7\(\pm\)2.4 \\ COLLAB & **79.8\(\pm\)0.9** & 77.9\(\pm\)0.7 \\ \hline \hline \end{tabular}
\end{table}
Table 9: Average prediction time per graph (\(10^{-3}\) Table 10: Comparison of GRDL with/without regularization on references norm.

\begin{table}
\begin{tabular}{l c c} \hline \hline Model & Complexity & Parameters \\ \hline GRDL & \(C_{1}+\mathcal{O}\left(K(n^{2}+mn+m^{2})\right)\) & \(N_{1}+Kmd\) \\ OT-GNN & \(C_{1}+\mathcal{O}\left(K_{1}(m+n)^{3}\log{(m+n)}\right)+C_{2}\) & \(N_{1}+K_{1}md+N_{2}\) \\ TFGW & \(C_{1}+\mathcal{O}\left(TK_{2}(m^{2}n+n^{2}m)\right)+C_{2}\) & \(N_{1}+K_{2}md+N_{2}\) \\ \hline \hline \end{tabular}
\end{table}
Table 8: Time complexity and number of parameters for GRDL, OT-GNN and TFGW.

### Experiments on The Generalization Error Bound

Use moderate-size message passing networkWe choose the training loss to be the cross-entropy loss (\(\lambda=0\)) and \(l_{\gamma}\) is chosen the same as the training loss. We validate the number of GIN layers \(L\in\{3,4,5,6\}\) and the number of MLP layers for each GIN layer \(r\in\{2,3,4\}\). \(L_{\gamma}\) is set to be the validation loss and \(\hat{L}_{\gamma}\) is set to be the training loss. From Figure 5, we have the following observations

* For any fixed \(r\), if \(L\) is increasing, the empirical risk \(\hat{L}_{\gamma}\) increases, and the population risk \(L_{\gamma}\) either increases (\(r=3\) and \(r=4\)) or first decreases then increases (\(r=2\)).
* For any fixed \(L\), if \(r\) is increasing, the population risk \(L_{\gamma}\) first decreases then increases in most of the cases, and the empirical risk \(\hat{L}_{\gamma}\) decreases in most of the cases.

These observations align with our bound and support our claim that moderate-size GNN should be used.

Use moderate-size referencesWe validate the reference size (\(m\)) in our experiments on real datasets, as detailed in Appendix D.3. The results in Appendix D.3 show that moderate-size references (G2, G3, G4) provide better generalization results. Here, we present the classification results for MUTAG and PROTEINS by choosing \(m\) from more fine-grained sets. For MUTAG, \(m\) is chosen from \(1,2,\ldots,30\). For PROTEINS, \(m\) is chosen from \(1,3,5,\ldots,61\). The figures in Figure 6 show that our model performs the best when a moderate \(m\) is used.

Regularization on references norm barely helpsConsider a model regularizing the norm of references \(\|\mathbf{D}\|_{2}\) (GRDL-R)

\[\min\mathcal{L}_{\text{CE}}+\lambda_{1}\mathcal{L}_{\text{Dis}}+\lambda_{2}\| \mathbf{D}\|_{2}\] (27)

The hyper-parameter \(\lambda_{2}\) is set as \(0.01\). Table 10 compares the empirical results of GRDL model and the results of GRDL-R model. From the table, we can see that GRDL performs better than GRDL-R on all datasets, which verifies our discussion in Section 3.3. Therefore, the regularization of references barely helps in our model.

### Parameter Number and Time Cost Comparison with Graph Transformers

Table 13 compares the number of parameters and training time per epoch of our GRDL with two graph transformers method. We can see that our GRDL has significantly fewer parameters and training time, making it preferable. All experiments are conducted on one RTX3080.

\begin{table}
\begin{tabular}{l c c c c c} \hline \hline \multirow{2}{*}{**Dataset**} & \multicolumn{5}{c}{**Method**} \\ \cline{2-6}  & GRDL & GRDL fixed \(\theta\) & GRDL \(\lambda=0\) & GRDL+Sum \(\lambda=0\) \\ \hline MUTAG & **92.1\(\pm\)5.9** & 90.4\(\pm\)6.4 & 89.9\(\pm\)4.9 & 89.9\(\pm\)6.0 \\ PROTEINS & **82.6\(\pm\)1.2** & 81.8\(\pm\)0.9 & 81.8\(\pm\)1.3 & 78.4\(\pm\)0.6 \\ NCI1 & **80.4\(\pm\)0.8** & 80.2\(\pm\)2.2 & 80.0\(\pm\)1.6 & 77.2\(\pm\)1.7 \\ IMDB-B & **74.8\(\pm\)2.0** & 72.8\(\pm\)1.8 & 73.1\(\pm\)1.5 & 71.6\(\pm\)5.2 \\ IMDB-M & **52.9\(\pm\)1.8** & 52.1\(\pm\)1.2 & 51.3\(\pm\)1.4 & 49.8\(\pm\)5.4 \\ PTC-MR & **68.3\(\pm\)5.4** & 66.6\(\pm\)5.7 & 66.6\(\pm\)5.9 & 62.5\(\pm\)6.3 \\ BZR & **92.0\(\pm\)1.1** & 90.1\(\pm\)1.5 & 89.5\(\pm\)2.3 & 85.3\(\pm\)1.5 \\ COLLAB & **79.8\(\pm\)0.9** & 79.5\(\pm\)0.7 & 79.0\(\pm\)1.0 & 77.1\(\pm\)0.9 \\ \hline \hline \end{tabular}
\end{table}
Table 11: Classification accuracy of ablation methods. Bold text indicates the best mean accuracy.

\begin{table}
\begin{tabular}{l c c c c c c c} \hline \hline \(\theta\) & \(1\times 10^{-4}\) & \(1\times 10^{-3}\) & \(1\times 10^{-2}\) & \(1\times 10^{-1}\) & \(1\) & \(1\times 10^{1}\) & \(1\times 10^{2}\) & \(1\times 10^{3}\) \\ \hline Accuracy & 0.9096 & 0.9149 & 0.9113 & 0.9113 & 0.8254 & 0.6822 & 0.5737 & 0.3345 \\ \hline \hline \end{tabular}
\end{table}
Table 12: Classification accuracy of MUTAG dataset with different \(\theta\).

## Appendix E Proof Setups

**Vector and matrix norms** The \(\ell_{2}\)-norm \(\|\cdot\|_{2}\) is always computed entry-wise; thus, for a matrix, it corresponds to the Frobenius norm. The metric \(\rho\) of function spaces is defined as the \(\ell_{2}\)-norm of the difference between the outputs of functions given some input \(X\), i.e.,

\[\rho(f_{1},f_{2})=\|f_{1}(X)-f_{2}(X)\|_{2}.\] (28)

Finally, let \(\|\cdot\|_{\sigma}\) be the spectral norm and \(\|\cdot\|_{p,q}\) be the \((p,q)\) matrix norm defined by \(\|\mathbf{A}\|_{p,q}:=\|(\|\mathbf{A}_{:,1}\|_{p},\ldots,\|\mathbf{A}_{:,m}\|_ {p})\|_{q}\) for \(\mathbf{A}\in\mathbb{R}^{d\times m}\).

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline \multirow{2}{*}{**Dataset**} & \multicolumn{6}{c}{**Method**} \\ \cline{2-7}  & \multicolumn{2}{c}{GRDL} & \multicolumn{2}{c}{SAT} & \multicolumn{2}{c}{Graphormer} \\  & \# Parameters & Time & \# Parameters & Time & \# Parameters & Time \\ \hline MUTAG & **11k** & **0.11** & 663k & 0.64 & 647k & 0.59 \\ PROTEINS & **12k** & **0.52** & 666k & 3.51 & 650k & 3.31 \\ NCI1 & **13k** & **1.77** & 667k & 12.08 & 651k & 11.37 \\ IMDB-B & **15k** & **0.42** & 680k & 3.69 & 664k & 3.42 \\ IMDB-M & **13k** & **0.69** & 674k & 4.32 & 658k & 4.06 \\ PTC-MR & **12k** & **0.17** & 663k & 1.17 & 647k & 0.97 \\ BZR & **11k** & **0.21** & 665k & 1.26 & 649k & 1.09 \\ COLLAB & **31k** & **3.71** & 725k & 17.45 & 709k & 16.89 \\ \hline Average & **15k** & **0.95** & 675k & 5.51 & 659k & 5.21 \\ \hline \hline \end{tabular}
\end{table}
Table 13: Number of parameters and time cost per training epoch (seconds) of GRDL and Graph transformers.

Figure 5: The blue and orange lines denote the training error \(\hat{L}_{\gamma}\) and validation error \(L_{\gamma}\), respectively, of GRDL with \(r\in\{2,3,4\},L\in\{3,4,5,6\}\)Rademacher complexityRademacher complexityRademacher complexity is a standard complexity measure of hypothesis function space. Given dataset \(\mathcal{G}\) and hypothesis function space \(\mathcal{F}\), the Rademacher complexity is defined as

\[\mathcal{R}_{\mathcal{G}}(\mathcal{F}):=\operatorname*{\mathbb{E}}_{\sigma_{1}, \ldots,\sigma_{N}}\left[\sup_{f\in\mathcal{F}}\frac{1}{N}\sum_{i=1}^{N}\sigma_ {i}f(G_{i})\right]\] (29)

where \(\sigma_{1},\ldots,\sigma_{N}\) are independent Rademacher variables.

Then the bound can be derived with the help of the following lemma:

**Lemma E.1**.: _Given hypothesis function space \(\mathcal{F}\) that maps a graph \(G\in\mathcal{X}\) to \(\mathbb{R}^{K}\) and any \(\gamma>0\), define \(\mathcal{F}_{\gamma}:=\{(G,y)\mapsto l_{\gamma}(f(G),y):f\in\mathcal{F}\}.\) Then, with probability at least \(1-\delta\) over a sample \(\mathcal{G}\) of size \(N\), every \(f\in\mathcal{F}\) satisfies \(L_{\gamma}(f)\leq\hat{L}_{\gamma}(f)+2\mathcal{R}_{\mathcal{G}}(\mathcal{F}_ {\gamma})+3\gamma\sqrt{\frac{\ln\left(2/\delta\right)}{2N}}\)._

This Lemma is a standard tool in Rademacher complexity [10]. The only problem left is to calculate the Rademacher complexity \(\mathcal{R}_{\mathcal{G}}(\mathcal{F}_{\gamma})\).

Covering number complexity boundsDirect calculation of the Rademacher complexity is often hard and the covering number is typically used to upper bound it. \(V\) is an \(\epsilon\)-cover of \(U\) with respect to some metric \(\varrho\) if for all \(v\in U\), there exists \(v^{\prime}\in V\) such that \(\varrho(v,v^{\prime})\leq\epsilon\), meaning

\[\sup_{v\in U}\min_{v^{\prime}\in V}\varrho(v,v^{\prime})\leq\epsilon.\] (30)

The covering number \(\mathcal{N}\left(\epsilon,U,\varrho\right)\) is defined as the least cardinality of the subset \(V\). With covering number, the Rademacher complexity is upper bounded by the following Dudley entropy integral:

**Lemma E.2** (Lemma A.5 of Bartlett et al. [2017], reformulated).: _Let \(\mathcal{F}_{\gamma}\) be a real-valued function class taking values in \([0,\gamma]\), and assume that \(\mathbf{0}\in\mathcal{F}_{\gamma}\). Then_

\[\mathcal{R}_{\mathcal{G}}(\mathcal{F}_{\gamma})\leq\inf_{\alpha>0}\left(\frac{4 \alpha\gamma}{\sqrt{N}}+\frac{12}{N}\int_{\gamma\alpha}^{\gamma\sqrt{N}}\sqrt {\ln\mathcal{N}\left(\epsilon,\mathcal{F}_{\gamma},\rho\right)}\,d\epsilon \right).\]

Now the only thing left is to bound \(\mathcal{N}\left(\epsilon,\mathcal{F}_{\gamma},\rho\right)\).

## Appendix F Proof for Theorems, Corollaries, and Lemmas

### Correctness Analysis

We first provide the formal definition of correct classification:

Figure 6: Misclassification rate of GRDL on MUTAG (Figure 5(a)) and PROTEINS (Figure 5(b)) using different reference sizes \(m\). The figures show that our model performs the best when a moderate \(m\) is used.

**Definition F.1** (Correctness of Classification).: For a graph \(G_{i}\) with node embedding \(\mathbf{H}_{i}\) belonging to the \(k\)-th class, it is correctly classified if \(\operatorname{MMD}(\mathbf{H}_{i},\mathbf{D}_{k})<\min_{j\neq k}\operatorname{ MMD}(\mathbf{H}_{i},\mathbf{D}_{j})\).

**Lemma F.2** (Correctness of Classification).: _The classification of a graph \(G_{i}\) belonging to the \(k\)-th class (with latent node embedding \(\mathbf{H}_{i}\)) is correct with probability at least \(1-\delta\) if_

\[\min_{j\neq k}\operatorname{MMD}(\mathbb{P}_{k},\mathbb{P}_{j})>\left(\frac{1 }{\sqrt{m}}+\frac{1}{\sqrt{n}}\right)\left(4+4\sqrt{\log\frac{2}{\delta}} \right).\]

Lemma F.2 suggests that a larger reference distributions size (\(m\)) and graphs with more nodes (\(n\)) induce a smaller \(\left(\frac{1}{\sqrt{m}}+\frac{1}{\sqrt{n}}\right)\left(4+4\sqrt{\log\frac{2}{ \delta}}\right)\), making correct classification easier. Proof of this theorem is provided in Appendix F.10.

### Lipschitz properties

This section proves some useful lemmas related to functions' lipschitz property.

**Lemma F.3**.: _For any \(\mathbf{Z},\mathbf{Z}^{\prime}\in\mathbb{R}^{n\times d}\) and \(\mathbf{W}\in\mathbb{R}^{d\times m}\), \(\|(\mathbf{Z}-\mathbf{Z}^{\prime})\mathbf{W}\|_{2}\leq\|\mathbf{W}^{\top}\|_ {\sigma}\|\mathbf{Z}-\mathbf{Z}^{\prime}\|_{2}\)_

Proof.: First consider matrices \(\mathbf{X},\mathbf{Y}\in\mathbb{R}^{d\times d}\) where \(\mathbf{X},\mathbf{Y}\) are positive semi-definite. \(\mathbf{Y}\) is unitarily diagonalizable, means \(\mathbf{Q}\Lambda\mathbf{Q}^{-1}\) where \(\Lambda=diag(\lambda_{1},\ldots,\lambda_{d})\) is the diagonal matrix of eigenvalues of \(\mathbf{Y}\). Then we have

\[\text{Tr}(\mathbf{X}\mathbf{Y})=\text{Tr}(\mathbf{X}\mathbf{Q}\Lambda\mathbf{ Q}^{-1})=\text{Tr}(\Lambda\mathbf{Q}^{-1}\mathbf{X}\mathbf{Q})\]

Let \(\mathbf{P}=\mathbf{Q}^{-1}\mathbf{X}\mathbf{Q}\), and \(\lambda_{0}=\max_{i}\lambda_{i}\), we have

\[\text{Tr}(\mathbf{X}\mathbf{Y})=\text{Tr}(\Lambda\mathbf{P})=\sum_{k}\lambda _{k}p_{kk}\leq\sum_{k}\lambda_{0}p_{kk}=\lambda_{0}\text{Tr}(\mathbf{P})= \lambda_{0}\text{Tr}(\mathbf{Q}^{-1}\mathbf{X}\mathbf{Q})=\lambda_{0}\text{ Tr}(\mathbf{X})\]

Take \(\mathbf{X}=(\mathbf{Z}-\mathbf{Z}^{\prime})^{\top}(\mathbf{Z}-\mathbf{Z}^{ \prime})\) and \(\mathbf{Y}=\mathbf{W}\mathbf{W}^{\top}\), easy to see that

\[\|(\mathbf{Z}-\mathbf{Z}^{\prime})\mathbf{W}\|_{2}=\text{Tr}\left((\mathbf{Z}- \mathbf{Z}^{\prime})^{\top}(\mathbf{Z}-\mathbf{Z}^{\prime})\mathbf{W}\mathbf{ W}^{\top}\right)\leq\lambda_{max}(\mathbf{W}\mathbf{W}^{\top})\text{Tr} \left((\mathbf{Z}-\mathbf{Z}^{\prime})^{\top}(\mathbf{Z}-\mathbf{Z}^{\prime}) \right)=\|\mathbf{W}^{\top}\|_{\sigma}\|\mathbf{Z}-\mathbf{Z}^{\prime}\|_{2}\]

**Lemma F.4**.: _If \(\sigma:\mathbb{R}^{d}\to\mathbb{R}^{d}\) is \(\kappa\)-Lipschitz along ever coordinate, then it is \(\kappa\)-Lipschitz according to \(\|\cdot\|_{p}\) for any \(p\geq 1\)._

Proof.: For any \(z,z^{\prime}\in\mathbb{R}^{d}\),

\[\|\sigma(z)-\sigma(z^{\prime})\|_{p} =\left(\sum_{i}|\sigma(z)_{i}-\sigma(z^{\prime})_{i}|^{p}\right)^ {1/p}\] \[\leq\left(\sum_{i}\kappa^{p}|z_{i}-z_{i}^{\prime}|^{p}\right)^{1/p}\] \[=\kappa\|z-z^{\prime}\|_{p}\]

**Lemma F.5** (Lemma A.3 of Bartlett et al. [2017]).: _For every \(j\) and every \(p\geq 1\), \(\mathcal{M}(\cdot,j)\) is \(2\)-Lipschitz w.r.t \(\|\cdot\|_{p}\)._

Proof.: Let \(v,v^{\prime},j\) be given. Without loss of generality, suppose \(\mathcal{M}(v,j)\geq\mathcal{M}(v^{\prime},j)\). Choose coordinate \(i\neq j\) so that \(\mathcal{M}(v^{\prime},j)=v^{\prime}_{j}-v^{\prime}_{i}\). Then

\[\mathcal{M}(v,j)-\mathcal{M}(v^{\prime},j) =(v_{j}-\max_{l\neq j}v_{l})-(v^{\prime}_{j}-v^{\prime}_{i})=v_{j}- v^{\prime}_{j}+v^{\prime}_{i}+\min_{l\neq j}(-v_{l})\] \[\leq(v_{j}-v^{\prime}_{j})+(v^{\prime}_{i}-v_{i})\leq 2\|v-v^{ \prime}\|_{\infty}\leq 2\|v-v^{\prime}\|_{p}\]

**Lemma F.6**.: _For every \(p>1\), \(r_{\zeta}(-\mathcal{M}(\cdot,y))\) is \(\frac{2}{\zeta}\)-Lipschitz w.r.t \(\|\cdot\|_{p}\)._

Proof.: Recall that,

\[r_{\zeta}(t):=\begin{cases}0&t<-\zeta,\\ 1+t/\zeta&r\in[-\zeta,0],\\ 1&t>0,\end{cases}\] (31)

Then the proof is trivial be Lemma F.5. 

**Lemma F.7**.: _Cross entropy loss \(l(\mathbf{x},\mathbf{y})=-\sum_{k=1}^{K}y_{k}\log\frac{\exp{(x_{k})}}{\sum_{j= 1}^{K}\exp{(x_{j})}}\) is \(\sqrt{2}\)-Lipschitz w.r.t \(\|\cdot\|_{2}\)._

Proof.: Since \(l\) is differentiable, it is sufficient to find \(\mu\) such that \(\|\nabla l\|_{2}\leq\mu\). Without loss of generality, suppose \(y_{i}=1\), then \(l(\mathbf{x},\mathbf{y})=-\log\frac{\exp{(x_{i})}}{\sum_{j=1}^{K}\exp{(x_{j})}}\). Let \(s=\sum_{k}\exp{x_{k}}\), we have

\[\nabla l_{i}=-\frac{\sum_{l\neq i}\exp{(x_{l})}}{s},\qquad\nabla l_{j}=\frac{ \exp{(x_{j})}}{s}\quad\forall j\neq i\]

Therefore

\[\|\nabla l\|_{2}^{2}=\frac{(\sum_{l\neq i}\exp{(x_{l})})^{2}+\sum_{l\neq i} \exp{(2x_{l})}}{s^{2}}\stackrel{{(a)}}{{\leq}}2\frac{(\sum_{l \neq i}\exp{(x_{l})})^{2}}{s^{2}}\leq 2\]

where \((a)\) is because Cauchy-Schwarz inequality. 

### Covering number

The following lemma provides an upper bound of the covering number for the network \(\mathcal{F}_{G}\).

**Lemma F.8** (Covering number bound of \(\mathcal{F}_{G}\)).: _Let \(c=\|\tilde{\mathbf{A}}\|_{\sigma}\) and \(\bar{d}=\max_{i,l}d_{i}^{(l)}\). Given an \(L\)-layer GIN message passing network \(\mathcal{F}_{G}\), for any \(\epsilon>0\)_

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F}_{G},\rho\right)\leq\frac{R_{G}}{ \epsilon^{2}}\]

_where \(R_{G}=c^{2L}\|\mathbf{X}\|_{2}^{2}\ln(2d^{2})\left(\prod_{l=1}^{L}\kappa_{l}^ {2}\right)\left(\sum_{l=1}^{L}\left(\tau_{l}\right)^{\frac{2}{3}}\right)^{3}\) and \(\kappa_{l}=\prod_{j=1}^{r}\kappa_{j}^{(l)}\), \(\tau_{l}=\left(\sum_{i=1}^{r}\left(\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)}}\right) ^{2/3}\right)^{3/2}\)._

Firstly, we introduce the core lemma used to find the covering number of compositions of multiple hypothesis function classes.

**Lemma F.9**.: _Given hypothesis function classes \(\mathcal{F}_{1},\mathcal{F}_{2},\ldots\mathcal{F}_{k}\) that maps input from matrix space to output in matrix space and their covering radius \((\epsilon_{1},\epsilon_{2},\ldots,\epsilon_{k})\). Assume all functions in \(\mathcal{F}_{i}\) is \(\kappa_{i}\)-Lipschitz w.r.t. \(\|\cdot\|_{2}\), and \(\ln\mathcal{N}(\epsilon_{i},\mathcal{F}_{i},\rho)\leq g(\eta_{i})\) for some function \(g\) with parameters \(\eta_{i}\) (\(\eta_{i}\) can be multi-valued). Then there exists \(\epsilon\)-cover \(\mathcal{C}\) of \(\mathcal{F}=\mathcal{F}_{k}\circ\mathcal{F}_{k-1}\circ\cdots\mathcal{F}_{1}\) with \(\epsilon=\sum_{i=1}^{k}\left(\epsilon_{i}\prod_{j=i+1}^{k}\kappa_{j}\right)\) such that_

\[\ln|\mathcal{C}|\leq\sum_{i=1}^{k}g(\eta_{i})\]

Proof.: Inductively construct covers as follows.

* Let \(\mathcal{C}_{1}\) be the \(\epsilon_{1}\)-cover of \(\mathcal{F}_{1}\). By our assumption, \[\ln|\mathcal{C}_{1}|\leq g(\eta_{1})\]
* Let \(\mathcal{C}_{j}\) as a \(\epsilon_{j}\)-cover of \(\mathcal{F}_{j}\circ\cdots\circ\mathcal{F}_{1}\). Suppose \(\ln|\mathcal{C}_{j}|\leq\sum_{i=1}^{j}g(\eta_{i})\). For every \(f_{j}^{\prime}\circ\ldots f_{1}^{\prime}\in\mathcal{C}_{j}\), we construct \(\mathcal{C}_{j+1,f_{j}^{\prime},\ldots,f_{1}^{\prime}}\) as an \(\epsilon_{j+1}\)-cover of \(\mathcal{F}_{j+1}\circ f_{j}^{\prime}\circ\cdots\circ f_{1}^{\prime}\). Define \[\mathcal{C}_{j+1}:=\bigcup_{f_{h}^{\prime}\in\mathcal{C}_{h},h\leq j}\mathcal{ C}_{j+1,f_{j}^{\prime},\ldots,f_{1}^{\prime}}\]It is clearly a cover of \(\mathcal{F}_{j+1}\circ\mathcal{F}_{j}\circ\cdots\circ\mathcal{F}_{1}\) By our assumption, we know that

\[\ln\left|\mathcal{C}_{j+1,f^{\prime}_{j},\ldots,f^{\prime}_{1}}\right| \leq g(\eta_{j+1})\] \[\left|\mathcal{C}_{j+1,f^{\prime}_{j},\ldots,f^{\prime}_{1}}\right| \leq\exp\left(g(\eta_{j+1})\right)\]

Then, it is trivial to see

\[\left|\mathcal{C}_{j+1}\right| \leq\left|\mathcal{C}_{j}\right|\exp\left(g(\eta_{j})\right)\] \[\ln\left|\mathcal{C}_{j+1}\right| \leq\sum_{i=1}^{j+1}g(\eta_{i})\]

By the inductive arguments above, we can conclude that

\[\ln\left|\mathcal{C}\right|=\ln\left|\mathcal{C}_{k}\right|\leq\sum_{i=1}^{k} g(\eta_{i})\]

Next, inductively find the cover radius \(\epsilon\) for \(\mathcal{C}\).

* It is trivial in the base case that the cover of \(\mathcal{C}_{1}\) is \(\epsilon_{1}\).
* Suppose for \(\mathcal{C}_{h}\), the cover radius satisfies \[\epsilon_{h}=\sum_{i=1}^{h}\left(\epsilon_{i}\prod_{j=i+1}^{h}\kappa_{j}\right)\] For all \(f_{h+1}\circ f_{h}\circ\cdots\circ f_{1}\in\mathcal{F}_{h+1}\circ\mathcal{F}_ {h}\circ\cdots\circ\mathcal{F}_{1}\), there exists \(f^{\prime}_{h+1}\circ f^{\prime}_{h}\circ\cdots\circ f^{\prime}_{1}\in \mathcal{C}_{h+1}\) such that \[\rho(f^{\prime}_{h+1}\circ f^{\prime}_{h}\circ\cdots\circ f^{ \prime}_{1},f_{h+1}\circ f_{h}\circ\cdots\circ f_{1}) \leq\rho(f^{\prime}_{h+1}\circ f^{\prime}_{h}\circ\cdots\circ f ^{\prime}_{1},f_{h+1}\circ f^{\prime}_{h}\circ\cdots\circ f^{\prime}_{1})\] \[+\rho(f_{h+1}\circ f^{\prime}_{h}\circ\cdots\circ f^{\prime}_{1}, f_{h+1}\circ f_{h}\circ\cdots\circ f_{1})\] \[\leq\epsilon_{h+1}+\kappa_{h+1}\rho(f^{\prime}_{h}\circ\cdots \circ f^{\prime}_{1},f_{h}\circ\cdots\circ f_{1})\] \[\leq\epsilon_{h+1}+\kappa_{h+1}\epsilon_{h}\] \[=\sum_{i=1}^{h+1}\left(\epsilon_{i}\prod_{j=i+1}^{h+1}\kappa_{j}\right)\] By the inductive arguments, \[\epsilon=\epsilon_{k}=\sum_{i=1}^{k}\left(\epsilon_{i}\prod_{j=i+1}^{k}\kappa_ {j}\right)\]

The following matrix covering number is well-known and the detailed proof can be found in Bartlett et al. (2017).

**Lemma F.10**.: _Let conjugate exponents \((p,q)\) and \((r,s)\) be given with \(p\leq 2\), as well as positive reals \((a,b,\epsilon)\) and positive integer m. Let matrix \(\mathbf{X}\in\mathbb{R}^{n\times d}\) be given with \(\|\mathbf{X}\|_{p}\leq b\). Then_

\[\ln\mathcal{N}\left(\left\{\mathbf{X}\mathbf{A}:\mathbf{A}\in\mathbb{R}^{d \times m},\|\mathbf{A}\|_{q,s}\leq a\right\},\epsilon,\|\cdot\|_{2}\right) \leq\left\lceil\frac{a^{2}b^{2}m^{2/r}}{\epsilon^{2}}\right\rceil\ln\left(2dm\right)\]

For the composition of a hypothesis function class and a \(\kappa\)-Lipschitz function, we have the following lemma

**Lemma F.11**.: _Suppose \(\psi\) is a \(\kappa\)-Lipschitz function, then \(\ln\mathcal{N}(\epsilon,\psi\circ\mathcal{F},\rho)\leq\ln\mathcal{N}(\epsilon/ \kappa,\mathcal{F},\rho)\)_

Proof.: Let \(\mathcal{C}\) denote \(\frac{\epsilon}{\kappa}\)-cover of \(\mathcal{F}\), then for any \(f\in\mathcal{F}\), there exists \(f^{\prime}\in\mathcal{C}\) such that \(\rho(f,f^{\prime})\leq\frac{\epsilon}{\kappa}\). Let \(\mathbf{Z}\) denote the input, we have \[\rho(\psi\circ f^{\prime},\psi\circ f) =\|\psi\circ f^{\prime}(\mathbf{Z})-\psi\circ f(\mathbf{Z})\|_{2}\] \[\leq\kappa\|f^{\prime}(\mathbf{Z})-f(\mathbf{Z}zh)\|_{2}\] (Lemma F.4) \[=\kappa\rho(f^{\prime},f)\] \[\leq\epsilon\]

**Lemma F.12**.: _Given \(\mathbf{H},\mathbf{H}^{\prime}\in\mathbb{R}^{n\times d}\) and \(\mathbf{D},\mathbf{D}^{\prime}\in\mathbb{R}^{m\times d}\). Squared MMD distance with gaussian kernel \(k(x,y)=\exp\left\{-\theta\|x-y\|_{2}^{2}\right\}\) satisfies_

\[\left|\mathrm{MMD}^{2}\left(\mathbf{H},\mathbf{D}\right)-\mathrm{MMD}^{2} \left(\mathbf{H}^{\prime},\mathbf{D}^{\prime}\right)\right|\leq 4\sqrt{\theta} \left(n^{-1/2}\|\mathbf{H}-\mathbf{H}^{\prime}\|_{2}+m^{-1/2}\|\mathbf{D}- \mathbf{D}^{\prime}\|_{2}\right)\]

Proof.: The matrices have the form

\[\mathbf{H}=\begin{bmatrix}\mathbf{h}_{1}^{\top}\\ \mathbf{h}_{2}^{\top}\\ \vdots\\ \mathbf{h}_{n}^{\top}\end{bmatrix}\qquad\mathbf{H}^{\prime}=\begin{bmatrix} \mathbf{h}_{1}^{\prime\top}\\ \mathbf{h}_{2}^{\prime\top}\\ \vdots\\ \mathbf{h}_{n}^{\top\top}\end{bmatrix}\qquad\mathbf{D}=\begin{bmatrix} \mathbf{d}_{1}^{\top}\\ \mathbf{d}_{2}^{\top}\\ \vdots\\ \mathbf{d}_{m}^{\top}\end{bmatrix}\qquad\mathbf{D}^{\prime}=\begin{bmatrix} \mathbf{d}_{1}^{\prime\top}\\ \mathbf{d}_{1}^{\prime\top}\\ \vdots\\ \mathbf{d}_{m}^{\prime\top}\end{bmatrix}\]

Then we have

\[\left|\mathrm{MMD}^{2}\left(\mathbf{H},\mathbf{D}\right)-\mathrm{MMD }^{2}\left(\mathbf{H}^{\prime},\mathbf{D}^{\prime}\right)\right|\leq \left|\frac{1}{n^{2}}\sum_{i,j=1}^{n}\left[\exp\left(-\theta\| \mathbf{h}_{i}-\mathbf{h}_{j}\|_{2}^{2}\right)-\exp\left(-\theta\|\mathbf{h}^ {\prime}{}_{i}-\mathbf{h}^{\prime}{}_{j}\|_{2}^{2}\right)\right]\right|\] \[+\left|\frac{1}{m^{2}}\sum_{i,j=1}^{m}\left[\exp\left(-\theta\| \mathbf{d}_{i}-\mathbf{d}_{j}\|_{2}^{2}\right)-\exp\left(-\theta\|\mathbf{d}^ {\prime}{}_{i}-\mathbf{d}^{\prime}{}_{j}\|_{2}^{2}\right)\right]\right|\] \[+\left|\frac{2}{mn}\sum_{i=1}^{n}\sum_{j=1}^{m}\left[\exp\left(- \theta\|\mathbf{h}_{i}-\mathbf{d}_{j}\|_{2}^{2}\right)-\exp\left(-\theta\| \mathbf{h}^{\prime}{}_{i}-\mathbf{d}^{\prime}{}_{j}\|_{2}^{2}\right)\right]\right|\] \[\overset{(a)}{\leq} \frac{\sqrt{\theta}}{n^{2}}\sum_{i,j=1}^{n}\left[\|\mathbf{h}_{i} -\mathbf{h}_{j}\|_{2}-\|\mathbf{h}^{\prime}{}_{i}-\mathbf{h}^{\prime}{}_{j}\| _{2}+\frac{\sqrt{\theta}}{m^{2}}\sum_{i,j=1}^{m}\|\mathbf{d}_{i}-\mathbf{d}_{ j}\|_{2}-\|\mathbf{d}^{\prime}{}_{i}-\mathbf{d}^{\prime}{}_{j}\|_{2}\right.\] \[+\frac{2\sqrt{\theta}}{mn}\sum_{i=1}^{n}\sum_{j=1}^{m}\|\mathbf{h }_{i}-\mathbf{d}_{j}\|_{2}-\|\mathbf{h}^{\prime}{}_{i}-\mathbf{d}^{\prime}{}_{ j}\|_{2}\] \[\overset{(b)}{\leq} \frac{\sqrt{\theta}}{n^{2}}\sum_{i,j=1}^{n}\|\left(\mathbf{h}_{i} -\mathbf{h}^{\prime}{}_{i}\right)-\left(\mathbf{h}_{j}-\mathbf{h}^{\prime}{}_{ j}\right)\|_{2}+\frac{\sqrt{\theta}}{m^{2}}\sum_{i,j=1}^{m}\|\left( \mathbf{d}_{i}-\mathbf{d}^{\prime}{}_{i}\right)-\left(\mathbf{d}_{j}-\mathbf{ d}^{\prime}{}_{j}\right)\|_{2}\] \[+\frac{2\sqrt{\theta}}{mn}\sum_{i=1}^{n}\sum_{j=1}^{m}\|\left( \mathbf{h}_{i}-\mathbf{h}^{\prime}{}_{i}\right)-\left(\mathbf{d}_{j}-\mathbf{ d}^{\prime}{}_{j}\right)\|_{2}\] \[\leq \frac{4\sqrt{\theta}}{n}\sum_{i=1}^{n}\|\mathbf{h}_{i}-\mathbf{h }^{\prime}{}_{i}\|_{2}+\frac{4\sqrt{\theta}}{m}\sum_{j=1}^{m}\|\mathbf{d}_{i} -\mathbf{d}^{\prime}{}_{i}\|_{2}\] \[\overset{(c)}{\leq} \frac{4\sqrt{\theta n}}{n}\|\mathbf{H}-\mathbf{H}^{\prime}\|_{2} +\frac{4\sqrt{\theta m}}{m}\|\mathbf{D}-\mathbf{D}^{\prime}\|_{2}\] \[= 4\sqrt{\theta}\left(n^{-1/2}\|\mathbf{H}-\mathbf{H}^{\prime}\|_ {2}+m^{-1/2}\|\mathbf{D}-\mathbf{D}^{\prime}\|_{2}\right).\]

In the above derivation, (a) holds due to \(\left|\exp\left(-x^{2}\right)-\exp\left(-y^{2}\right)\right|\leq|x-y|\) for any \(x,y\geq 0\), (b) holds due to the triangle inequality, and (c) holds by the Cauchy-Schwarz inequality. 

The covering number for a single GIN message passing layer \(\mathcal{F}^{l}\) with the following Lemma:

**Lemma F.13** (Covering number of \(\mathcal{F}^{l}\)).: _Let \(c=\|\tilde{\mathbf{A}}\|_{\sigma}\). For any \(l\in[L]\) and \(\epsilon>0\)_

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F}^{l},\rho\right)\leq\frac{c^{2l}\tau_{ l}^{2}\left(\prod_{i=1}^{l}\kappa_{i}\right)^{2}}{\epsilon^{2}}\|\mathbf{X}\|_{2}^{2} \ln(2\bar{d}^{2}),\]

_where \(\kappa_{i}=\prod_{j\leq r}\kappa_{j}^{(i)}\), \(\tau_{l}=\left(\sum_{i=1}^{r}\left(\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)}}\right)^ {2/3}\right)^{3/2}\)._

Proof.: With a little abuse of notation, remove the superscript in Equation (19) for now

\[\mathcal{F}^{l}=\left\{(\tilde{\mathbf{A}},\mathbf{H})\mapsto\sigma\left( \cdots\sigma\left(\left(\tilde{\mathbf{A}}\mathbf{H}\right)\mathbf{W}_{1} \right)\cdots\mathbf{W}_{r-1}\right)\mathbf{W}_{r}:\mathbf{W}_{i}\in\mathcal{ B}_{i}\right\}\]

where \(\mathcal{B}_{i}:=\left\{\mathbf{W}_{i}:\|\mathbf{W}_{i}^{\top}\|_{\sigma} \leq\kappa_{i},\|\mathbf{W}_{i}\|_{2,1}\leq b_{i}\right\}\). Denote \(\mathcal{F}_{i}=\{\mathbf{Z}\mapsto\sigma(\mathbf{Z}\mathbf{W}_{i}):\mathbf{W }_{i}\in\mathcal{B}_{i}\}\) for \(i\in[r-1]\), \(\mathcal{F}_{r}=\{\mathbf{Z}\mapsto\mathbf{Z}\mathbf{W}_{r}:\mathbf{W}_{r} \in\mathcal{B}_{r}\}\), then

\[\mathcal{F}^{l}=\mathcal{F}_{r}\circ\mathcal{F}_{r-1}\circ\cdots\mathcal{F}_{1}\]

For any \(f_{i}\in\mathcal{F}_{i},i\in[r-1]\) with arbitrary input \(\mathbf{Z},\mathbf{Z}^{\prime}\)

\[\|f_{i}(\mathbf{Z})-f_{i}(\mathbf{Z}^{\prime})\|_{2} =\|\sigma(\mathbf{Z}\mathbf{W}_{i})-\sigma(\mathbf{Z}^{\prime} \mathbf{W}_{i})\|_{2}\] \[\leq\|\mathbf{Z}\mathbf{W}_{i}-\mathbf{Z}^{\prime}\mathbf{W}_{i} \|_{2}\] (Lemma F.4) \[\leq\|\mathbf{W}_{i}^{\top}\|_{\sigma}\|\mathbf{Z}-\mathbf{Z}^{ \prime}\|_{2}\] (Lemma F.3) \[=\kappa_{i}\|\mathbf{Z}-\mathbf{Z}^{\prime}\|_{2}\]

Similarly, for any \(f_{r}\in\mathcal{F}_{r}^{\prime}\), Lemma F.3 gives

\[\|f_{r}(\mathbf{Z})-f_{r}(\mathbf{Z}^{\prime})\|_{2}=\|\mathbf{Z}\mathbf{W}_{ r}-\mathbf{Z}^{\prime}\mathbf{W}_{r}\|_{2}\leq\kappa_{r}\|\mathbf{Z}- \mathbf{Z}^{\prime}\|_{2}\]

Denoting \(\mathbf{Z}_{i-1}\) as the input to \(\mathcal{F}_{i}\) (\(\mathbf{Z}_{0}=\mathbf{Z}=\tilde{\mathbf{A}}\mathbf{H}\)) and using the Lipschitz conditions, we have

\[f_{i}(f_{i-1}(\ldots f_{1}(\mathbf{Z})))\leq\left(\prod_{j=1}^{i}\kappa_{j} \right)\|\mathbf{Z}\|_{2}\leq c\left(\prod_{j=1}^{i}\kappa_{j}\right)\| \mathbf{H}\|_{2}\] (32)

for any \(f_{i}\circ f_{i-1}\circ\cdots\circ f_{1}\in\mathcal{F}_{i}\circ\mathcal{F}_{i -1}\circ\cdots\circ\mathcal{F}_{1}\). So \(\|\mathbf{Z}_{i-1}\|_{2}\leq c\left(\prod_{j=1}^{i-1}\kappa_{j}\right)\| \mathbf{H}\|_{2}\triangleq c_{i-1}\). By Lemma F.10 and Lemma F.11, we have

\[\ln\mathcal{N}\left(\epsilon_{i},\mathcal{F}_{i},\rho\right)\leq\frac{b_{i}^{ 2}c_{i-1}^{2}}{\epsilon_{i}^{2}}\ln(2\bar{d}^{2})\]

\(W\) is the maximum dimension of weight matrices (as previously defined in the main text). Thus by Lemma F.9, we have the covering number

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F}^{l},\rho\right)\leq\sum_{i=1}^{r} \frac{b_{i}^{2}c_{i-1}^{2}}{\epsilon_{i}^{2}}\ln(2\bar{d}^{2})=c^{2}\|\mathbf{ H}\|_{2}^{2}\ln(2\bar{d}^{2})\sum_{i=1}^{r}\frac{b_{i}^{2}\left(\prod_{j}^{i-1} \kappa_{j}\right)^{2}}{\epsilon_{i}^{2}}\]

with cover radius \(\epsilon=\sum_{i=1}^{r}\left(\epsilon_{i}\prod_{j=i+1}^{r}\kappa_{j}\right)\). Next we need to choose \(\epsilon_{i}\) to minimize the right hand side of the above inequality. Holder's inequality states that when \(\frac{1}{p}+\frac{1}{q}=1\),

\[\langle\mathbf{a},\mathbf{b}\rangle \leq\|\mathbf{a}\|_{p}\|\mathbf{b}\|_{q}\] \[\sum_{i}a_{i}b_{i} \leq\left(\sum_{i}a_{i}^{p}\right)^{1/p}\left(\sum_{i}b_{i}^{q} \right)^{1/q}\]Let \(\alpha_{i}^{2}=b_{i}^{2}\left(\prod_{j}^{i-1}\kappa_{j}\right)^{2},\beta_{i}=\prod _{j=i+1}^{r}\kappa_{j}\). Choose \(p=\frac{1}{3},q=\frac{2}{3}\),

\[\left[\sum_{i}\left(\frac{\alpha_{i}}{\epsilon_{i}}\right)^{\frac {2}{3}\times 3}\right]^{\frac{1}{3}}\left[\sum_{i}\left(\beta_{i}\epsilon_{i} \right)^{\frac{2}{3}\times\frac{3}{2}}\right]^{\frac{2}{3}}\geq\sum_{i}\left( \alpha_{i}\beta_{i}\right)^{\frac{2}{3}}\] (33) \[\left(\sum_{i}\left(\frac{\alpha_{i}}{\epsilon_{i}}\right)^{2} \right)\left(\sum_{i}\beta_{i}\epsilon_{i}\right)^{2}\geq\left(\sum_{i}\left( \alpha_{i}\beta_{i}\right)^{\frac{2}{3}}\right)^{3}\] \[\left(\sum_{i=1}^{r}\frac{b_{i}^{2}\left(\prod_{j=1}^{i-1} \kappa_{j}\right)^{2}}{\epsilon_{i}^{2}}\right)\left(\sum_{i=1}^{r}\left( \epsilon_{i}\prod_{j=i+1}^{r}\kappa_{j}\right)\right)^{2}\geq\prod_{j=1}^{r} \kappa_{j}^{2}\left(\sum_{i=1}^{r}\left(\frac{b_{i}}{\kappa_{i}}\right)^{ \frac{2}{3}}\right)^{3}\] \[\sum_{i=1}^{r}\frac{b_{i}^{2}\left(\prod_{j=1}^{i-1}\kappa_{j} \right)^{2}}{\epsilon_{i}^{2}}\geq\frac{1}{\epsilon^{2}}\prod_{j=1}^{r}\kappa_ {j}^{2}\left(\sum_{i=1}^{r}\left(\frac{b_{i}}{\kappa_{i}}\right)^{\frac{2}{3}} \right)^{3}\]

Add the superscript back,

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F}^{l},\rho\right)\leq\ln(2d^{2})\frac{ c^{2}\|\mathbf{H}^{(l-1)}\|_{2}^{2}}{\epsilon^{2}}\prod_{j=1}^{r}\left(\kappa_{j}^ {(l)}\right)^{2}\left(\sum_{i=1}^{r}\left(\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)} }\right)^{\frac{2}{3}}\right)^{3}\]

\(\mathbf{H}^{(l-1)}=f^{(l-1)}\left(\tilde{\mathbf{A}}f^{(l-2)}\left(\ldots f^{ (1)}\left(\tilde{\mathbf{A}}\mathbf{X}\right)\right)\right)\) where \(f^{(k)}\in\mathcal{F}^{k}\) for \(k\in[l-1]\). By Equation (32), it is easy to see

\[\|\mathbf{H}^{(l-1)}\|_{2} \leq c\prod_{j=1}^{r}\kappa_{j}^{(l-1)}\|f^{(l-2)}\left(\ldots f^ {(1)}\left(\tilde{\mathbf{A}}\mathbf{X}\right)\right)\|_{2}\] \[\leq\cdots\] \[\leq c^{l-1}\|\mathbf{X}\|_{2}\prod_{i=1}^{l-1}\left(\prod_{j=1}^{ r}\kappa_{j}^{(i)}\right)\] \[=c^{l-1}\|\mathbf{X}\|_{2}\prod_{i\leq l-1,j\leq r}\kappa_{j}^{(i)}\]

Letting \(\kappa_{i}=\prod_{j\leq r}\kappa_{j}^{(i)},\tau_{l}=\left(\sum_{i=1}^{r} \left(\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)}}\right)^{2/3}\right)^{3/2}\), we finish the proof, i.e.,

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F}^{l},\rho\right)\leq\frac{c^{2l}\tau_ {l}^{2}\left(\prod_{i=1}^{l}\kappa_{i}\right)^{2}}{\epsilon^{2}}\|\mathbf{X}\|_ {2}^{2}\ln(2d^{2})\]

With the covering number of \(\mathcal{F}_{G}\), we can calculate the covering number of \(\mathcal{F}\) in Equation (10).

**Lemma F.14** (Covering number of \(\mathcal{F}\)).: _Suppose \(\theta\) in the kernel (Equation (15)) is fixed. For any \(\epsilon>0\)_

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F},\rho\right)\leq\frac{64\theta KR_{G}}{ n\epsilon^{2}}+Kmd\ln\left(\frac{24b_{D}\sqrt{\theta N}}{\sqrt{m}\epsilon}\right)\]

_where \(R_{G}\) is defined the same as Lemma F.8._

Proof.: Denote \(\mathbf{S}\in\mathbb{R}^{N\times K}\) as the output of function \(\mathcal{F}\). Consider the entry \((i,j)\) of \(\mathbf{S}\), by Lemma F.12, it has

\[|s_{ij}-s_{ij}^{\prime}| =\left|\mathrm{MMD}^{2}\left(\mathbf{H}_{i},\mathbf{D}_{j}\right)- \mathrm{MMD}^{2}\left(\mathbf{H}_{i}^{\prime},\mathbf{D}_{j}^{\prime}\right)\right|\] \[\leq 4\sqrt{\theta}\left(n^{-1/2}\|\mathbf{H}_{i}-\mathbf{H}_{i}^{ \prime}\|_{2}+m^{-1/2}\|\mathbf{D}_{j}-\mathbf{D}_{j}^{\prime}\|_{2}\right)\]Then for the whole matrix \(\mathbf{S}\),

\[\|\mathbf{S}-\mathbf{S}^{\prime}\|_{2} =\sqrt{\sum_{i=1}^{N}\sum_{j=1}^{K}|s_{ij}-s_{ij}^{\prime}|^{2}}\] \[\leq 4\sqrt{\theta}\sqrt{\sum_{i=1}^{N}\sum_{j=1}^{K}\left(n^{-1/2 }\|\mathbf{H}_{i}-\mathbf{H}_{i}^{\prime}\|_{2}+m^{-1/2}\|\mathbf{D}_{j}- \mathbf{D}_{j}^{\prime}\|_{2}\right)^{2}}\] \[\stackrel{{(a)}}{{\leq}}4\sqrt{\theta}\sqrt{\sum_{i =1}^{N}\sum_{j=1}^{K}2\left(n^{-1}\|\mathbf{H}_{i}-\mathbf{H}_{i}^{\prime}\|_{2 }^{2}+m^{-1}\|\mathbf{D}_{j}-\mathbf{D}_{j}^{\prime}\|_{2}^{2}\right)}\] \[=4\sqrt{2\theta}\sqrt{(Kn^{-1}\|\mathbf{H}-\mathbf{H}^{\prime}\| _{2}^{2}+Nm^{-1}\|\mathbf{D}-\mathbf{D}^{\prime}\|_{2}^{2})}\]

where (a) holds due to \((x+y)^{2}\leq 2(x^{2}+y^{2})\). If \(\|\mathbf{H}-\mathbf{H}^{\prime}\|_{2}\leq\epsilon_{1}\) and \(\|\mathbf{D}-\mathbf{D}^{\prime}\|_{2}\leq\epsilon_{2}\), then

\[\|\mathbf{S}-\mathbf{S}^{\prime}\|_{2} \leq 4\sqrt{2\theta}\sqrt{(Kn^{-1}\epsilon_{1}^{2}+Nm^{-1} \epsilon_{2}^{2})}\] \[\leq\epsilon\]

by choosing \(\epsilon_{1}=\frac{\sqrt{n}}{8\sqrt{K\theta}}\epsilon\) and \(\epsilon_{2}=\frac{\sqrt{m}}{8\sqrt{N\theta}}\epsilon\). Let \(\mathcal{B}_{D}:=\{\mathbf{D}\in\mathbb{R}^{Km\times d}:\|\mathbf{D}\|_{2}\leq b _{D}\}\). It is well-known that there exists an \(\epsilon_{2}\)-cover obeying

\[\mathcal{N}\left(\epsilon_{2},\mathcal{B}_{D},\|\cdot\|_{2}\right)\leq\left( \frac{3b_{D}}{\epsilon_{2}}\right)^{Kmd}\] (34)

Denote the output space of \(\mathcal{F}_{G},\mathcal{F}\) as \(\mathcal{H},\mathcal{Z}\) respectively, we can bound the covering number as

\[\mathcal{N}\left(\epsilon,\mathcal{F},\rho\right) =\mathcal{N}\left(\epsilon,\mathcal{Z},\|\cdot\|_{2}\right)\] \[\leq\mathcal{N}\left(\epsilon_{1},\mathcal{H},\|\cdot\|_{2} \right)\mathcal{N}\left(\epsilon_{2},\mathcal{B}_{D},\|\cdot\|_{2}\right)\]

It follows from Lemma F.8 and inequality (34) that

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F},\rho\right) \leq\ln\mathcal{N}\left(\epsilon_{1},\mathcal{H},\|\cdot\|_{2} \right)+\ln\mathcal{N}\left(\epsilon_{2},\mathcal{B}_{D},\|\cdot\|_{2}\right)\] \[\leq\frac{64\theta KR_{G}}{n\epsilon^{2}}+Kmd\ln\left(\frac{24b_{D }\sqrt{\theta N}}{\sqrt{m}\epsilon}\right)\]

### Proof of Lemma e.2

The Dudley entropy integral bound used by Bartlett et al. (2017) is

**Lemma F.15** (Lemma A.5 of Bartlett et al. (2017)).: _Let \(\mathcal{F}\) be a real-valued function class taking values in \([0,1]\), and assume that \(\mathbf{0}\in\mathcal{F}\). Then_

\[\mathcal{R}_{\mathcal{G}}(\mathcal{F})\leq\inf_{\alpha>0}\left(\frac{4\alpha}{ \sqrt{N}}+\frac{12}{N}\int_{\alpha}^{\sqrt{N}}\sqrt{\ln\mathcal{N}\left( \epsilon,\mathcal{F},\rho\right)}\,d\epsilon\right).\]

Lemma E.2 can be proved with simple modifications.

Proof.: Let \(\mathcal{F}^{\prime}=\psi\circ\mathcal{F}_{\gamma}\) where \(\psi(x)=\frac{1}{\gamma}x\), then \(\mathcal{F}^{\prime}\) is a real-valued function class taking values in \([0,1]\). By Lemma F.15, it has

\[\mathcal{R}_{\mathcal{G}}(\mathcal{F}^{\prime}) \leq\inf_{\alpha>0}\left(\frac{4\alpha}{\sqrt{N}}+\frac{12}{N} \int_{\alpha}^{\sqrt{N}}\sqrt{\ln\mathcal{N}\left(\frac{\epsilon}{\gamma}, \mathcal{F}^{\prime},\rho\right)}\,d(\frac{\epsilon}{\gamma})\right)\] \[=\inf_{\alpha>0}\left(\frac{4\alpha}{\sqrt{N}}+\frac{12}{N\gamma} \int_{\gamma\alpha}^{\gamma\sqrt{N}}\sqrt{\ln\mathcal{N}\left(\frac{\epsilon}{ \gamma},\psi\circ\mathcal{F}_{\gamma},\rho\right)}\,d\epsilon\right)\] \[\leq\inf_{\alpha>0}\left(\frac{4\alpha}{\sqrt{N}}+\frac{12}{N \gamma}\int_{\gamma\alpha}^{\gamma\sqrt{N}}\sqrt{\ln\mathcal{N}\left(\epsilon, \mathcal{F}_{\gamma},\rho\right)}\,d\epsilon\right)\] (Lemma F.11)

Multiplying both side by \(\gamma\), it has

\[\mathcal{R}_{\mathcal{G}}(\mathcal{F}_{\gamma})\leq\inf_{\alpha>0}\left(\frac {4\alpha\gamma}{\sqrt{N}}+\frac{12}{N}\int_{\gamma\alpha}^{\gamma\sqrt{N}}\sqrt {\ln\mathcal{N}\left(\epsilon,\mathcal{F}_{\gamma},\rho\right)}\,d\epsilon \right).\]

### Proof of Lemma F.8

Proof.: By Lemma F.13, we know

\[\ln\mathcal{N}\left(\epsilon_{l},\mathcal{F}^{l},\rho\right)\leq\frac{c^{2l} \tau_{l}^{2}\left(\prod_{i=1}^{l}\kappa_{i}\right)^{2}}{\epsilon_{l}^{2}}\| \mathbf{X}\|_{2}^{2}\ln(2d^{2})\]

For any \(f_{l}\in\mathcal{F}^{l}\), given input \(\mathbf{Z}\), it has

\[\|f_{l}(\mathbf{Z})\|_{2} =\|\sigma\left(\cdots\sigma\left(\left(\tilde{\mathbf{A}}\mathbf{ Z}\right)\mathbf{W}_{1}^{(l)}\right)\cdots\mathbf{W}_{r-1}^{(l)}\right) \mathbf{W}_{r}^{(l)}\|_{2}\] \[\leq\kappa_{r}^{(l)}\|\sigma\left(\cdots\sigma\left(\left(\tilde{ \mathbf{A}}\mathbf{Z}\right)\mathbf{W}_{1}^{(l)}\right)\cdots\mathbf{W}_{r-1}^ {(l)}\right)\|_{2}\] (Lemma F.3) \[\leq\|\sigma\left(\cdots\sigma\left(\left(\tilde{\mathbf{A}} \mathbf{Z}\right)\mathbf{W}_{1}^{(l)}\right)\cdots\mathbf{W}_{r-2}^{(l)} \right)\mathbf{W}_{r-1}^{(l)}\|_{2}\] (Lemma F.4) \[\leq\cdots\] \[\leq\left(\prod_{j=1}^{r}\kappa_{j}^{(l)}\right)\|\mathbf{A} \mathbf{Z}\|_{2}\] \[\leq c\left(\prod_{j=1}^{r}\kappa_{j}^{(l)}\right)\|\mathbf{Z}\|_ {2}\] \[=c\kappa_{l}\|\mathbf{Z}\|_{2}\]

which means all \(f_{l}\in\mathcal{F}^{l}\) is \(c\kappa_{l}\)-Lipschitz. Applying Lemma F.9, we have

\[\ln\mathcal{N}(\epsilon,\mathcal{F}^{\prime},\rho)\leq\sum_{l=1}^{L}\frac{ \tau_{l}^{2}\left(\prod_{j=1}^{l}c\kappa_{j}\right)^{2}}{\epsilon_{l}^{2}}\| \mathbf{X}\|_{2}^{2}\ln(2d^{2})\]

with \(\epsilon=\sum_{l=1}^{L}\left(\epsilon_{l}\prod_{j=l+1}^{r}c\kappa_{j}\right)\). The only thing left is to minimize \(\sum_{l=1}^{L}\frac{\tau_{l}^{2}\left(\prod_{j=1}^{l}c\kappa_{j}\right)^{2}}{ \epsilon_{l}^{2}}\) by controlling \(\epsilon_{l}\)'s. Choose \(\alpha_{l}^{2}=\tau_{l}^{2}\left(\prod_{j=1}^{l}c\kappa_{j}\right)^{2},\beta_{l }=\prod_{j=l+1}^{L}c\kappa_{j}\). Choose \(p=\frac{1}{3},q=\frac{2}{3}\), and apply Holder's inequality in the same ways as Equation (33), this yields

\[\left(\sum_{l}\left(\frac{\alpha_{l}}{\epsilon_{l}}\right)^{2} \right)\left(\sum_{l}\beta_{l}\epsilon_{l}\right)^{2}\geq\left(\sum_{l}\left( \alpha_{l}\beta_{l}\right)^{\frac{2}{4}}\right)^{3}\] \[\left(\sum_{l=1}^{L}\frac{\tau_{l}^{2}\left(\prod_{j=1}^{l}c \kappa_{j}\right)^{2}}{\epsilon_{l}^{2}}\right)\left(\sum_{l=1}^{L}\left( \epsilon_{l}\prod_{j=l+1}^{L}c\kappa_{j}\right)\right)^{2}\geq c^{2L}\prod_{j=1 }^{L}\kappa_{j}^{2}\left(\sum_{l=1}^{L}\left(\tau_{l}\right)^{\frac{2}{3}} \right)^{3}\] \[\sum_{l=1}^{L}\frac{\tau_{l}^{2}\left(\prod_{j=1}^{l}c\kappa_{j} \right)^{2}}{\epsilon_{l}^{2}}\geq\frac{1}{\epsilon^{2}}c^{2L}\prod_{j=1}^{L} \kappa_{j}^{2}\left(\sum_{l=1}^{L}\left(\tau_{l}\right)^{\frac{2}{3}}\right)^ {3}\]

Thus derives the conclusion

\[\ln\mathcal{N}(\epsilon,\mathcal{F}_{G},\rho)\leq\frac{R_{G}}{\epsilon^{2}}\]

where \(R_{G}=c^{2L}\|\mathbf{X}\|_{2}^{2}\ln(2\bar{d}^{2})\left(\prod_{l=1}^{L} \kappa_{l}^{2}\right)\left(\sum_{l=1}^{L}\left(\tau_{l}\right)^{\frac{2}{3}} \right)^{3}\). 

### Proof of Theorem 3.2

Proof.: Since \(l_{\gamma}\left(\cdot,y\right)\) is \(\mu\)-Lipschitz, we can bound the covering number of \(\mathcal{F}_{\gamma}\) (defined in Lemma E.1)

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F}_{\gamma},\rho\right) \leq\ln\mathcal{N}\left(\frac{\epsilon}{\mu},\mathcal{F},\rho\right)\] (Lemma F.11) \[\leq\frac{64\theta KR_{G}\mu^{2}}{n\epsilon^{2}}+Kmd\ln\left( \frac{24b_{D}\mu\sqrt{\theta N}}{\sqrt{m\epsilon}}\right)\] (Lemma F.14)

Denote \(v_{1}=\frac{64\theta KR_{G}\mu^{2}}{n},v_{2}=Kmd\bar{d},v_{3}=\frac{24\sqrt{ \theta N}b_{D}\mu}{\sqrt{m}}\), then by Lemma E.2, we can bound the Rademacher complexity

\[\mathcal{R}_{\mathcal{G}}(\mathcal{F}_{\gamma}) \leq\inf_{\alpha>0}\left(\frac{4\alpha\gamma}{\sqrt{N}}+\frac{12} {N}\int_{\gamma\alpha}^{\gamma\sqrt{N}}\sqrt{\frac{v_{1}}{\epsilon^{2}}+v_{2} \ln\frac{v_{3}}{\epsilon}}\,d\epsilon\right)\] \[\overset{(a)}{\leq}\inf_{\alpha>0}\left(\frac{4\alpha\gamma}{ \sqrt{N}}+\frac{12}{N}\int_{\gamma\alpha}^{\gamma\sqrt{N}}\sqrt{\frac{v_{1}+v_ {2}}{\epsilon^{2}}+v_{2}\ln v_{3}}\,d\epsilon\right)\] \[\overset{(b)}{\leq}\inf_{\alpha>0}\left(\frac{4\alpha\gamma}{ \sqrt{N}}+\frac{12}{N}\left(\int_{\gamma\alpha}^{\gamma\sqrt{N}}\frac{\sqrt{v_{ 1}+v_{2}}}{\epsilon}+\sqrt{v_{2}\ln v_{3}}\,d\epsilon\right)\right)\] \[=\inf_{\alpha>0}\left(\frac{4\alpha\gamma}{\sqrt{N}}+\frac{12}{N} \left(\sqrt{v_{1}+v_{2}}\ln\left(\frac{\sqrt{N}}{\alpha}\right)+\gamma\sqrt{v _{2}\ln v_{3}}\left(\sqrt{N}-\alpha\right)\right)\right)\] \[\overset{(c)}{\leq}\frac{4\gamma}{N}+\frac{12\sqrt{v_{1}+v_{2}} \ln N}{N}+\frac{12\gamma(N-1)\sqrt{v_{2}\ln v_{3}}}{N\sqrt{N}}\] \[\leq\frac{4\gamma}{N}+\frac{12\sqrt{v_{1}+v_{2}}\ln N}{N}+\frac{ 12\gamma\sqrt{v_{2}\ln v_{3}}}{\sqrt{N}}\]

where (a) holds due to \(\ln\frac{1}{x}\leq\frac{1}{x^{2}}\), (b) holds due to \(\sqrt{x+y}\leq\sqrt{x}+\sqrt{y}\). For (c), we have chosen \(\alpha=\frac{1}{\sqrt{N}}\).

It can be shown that the covering number bound of \(\mathcal{F}_{D}\) satisfies \(\mathcal{N}(\epsilon,\mathcal{F}_{D},\rho)\leq(3b_{D}/\epsilon)^{Kmd}\) (Lemma F.14). Combining the bounds of \(\mathcal{N}\left(\epsilon,\mathcal{F}_{G},\rho\right)\) and \(\mathcal{N}(\epsilon,\mathcal{F}_{D},\rho)\) and Lemmas E.1 and E.2, we derive the generalization bound:

\[L_{\gamma}(f)\leq\hat{L}_{\gamma}(f)+\frac{8\gamma+24\sqrt{v_{1}+v_{2}}\ln N+24 \gamma\sqrt{Nv_{2}\ln v_{3}}}{N}+3\gamma\sqrt{\frac{\ln\left(2/\delta\right)}{2 N}}\]

This finished the proof.

### Corollary of Theorem 3.2

**Corollary F.16** (Mis-classification rate upper bound of GRDL).: _Let \(n\) be the minimum number of nodes for graphs \(\{G_{i}\}_{i=1}^{N}\), \(\theta\) be the hyper-parameter in gaussian kernel (Equation (15)), \(c=\|\tilde{\mathbf{A}}\|_{\sigma}\). For graphs \(\mathcal{G}=\left\{(G_{i},y_{i})\right\}_{i=1}^{N}\) drawn i.i.d from any probability distribution over \(\mathcal{X}\times\{1,\ldots,K\}\) and references \(\{\mathbf{D}_{k}\}_{k=1}^{K},\mathbf{D}_{k}\in\mathbb{R}^{m\times d}\), with probability at least \(1-\delta\), every margin \(\zeta>0\) and network \(f\in\mathcal{F}\) under Assumption 3.1 satisfy_

\[\Pr_{G\sim\mathcal{X}}[\arg\max_{j}f(G)_{j}\neq y]\leq\hat{L}_{\zeta}(f)+3\sqrt {\frac{\ln\left(2/\delta\right)}{2N}}+\frac{8+24\sqrt{v_{1}+v_{2}}\ln N+24 \sqrt{Nv_{2}\ln v_{3}}}{N}\]

_where_

\[v_{1}=\frac{256\theta KR_{G}}{n\zeta^{2}},v_{2}=Km\bar{d},v_{3}=\frac{48b_{D} \sqrt{\theta N}}{\sqrt{m}\zeta},R_{G}=c^{2L}\|\mathbf{X}\|_{2}^{2}\ln(2\bar{d} ^{2})\left(\prod_{l=1}^{L}\left(\prod_{i=1}^{r}\kappa_{i}^{(l)}\right)^{2} \right)\left(\sum_{l=1}^{L}\sum_{i=1}^{r}\left(\frac{b_{i}^{(l)}}{\kappa_{i}^{ (l)}}\right)^{2/3}\right)^{3},\]

_and \(\hat{L}_{\zeta}(f)\leq N^{-1}\sum_{i}\mathds{1}[f(G_{i})_{y_{i}}\leq\zeta+\arg \max_{j\neq y_{i}}f(G_{i})_{j}]\)._

Proof.: Choose the loss \(l_{\gamma}(\cdot,y)\) as

\[l_{\gamma}(\cdot,y)=r_{\zeta}(-\mathcal{M}(\cdot,y))\]

where \(\mathcal{M}(v,y):=v_{y}-\max_{i\neq y}v_{i}\) is the margin operator and

\[r_{\zeta}(t):=\begin{cases}0&t<-\zeta,\\ 1+t/\zeta&t\in[-\zeta,0],\\ 1&t>0.\end{cases}\]

is called the ramp loss. The population ramp risk is defined as \(L_{\zeta}(f):=\mathbb{E}_{G\sim\mathcal{X}}\left[r_{\zeta}(-\mathcal{M}(f(G), y))\right]\). Given the graph dataset \(\mathcal{G}\) sampled from \(\mathcal{X}\), the empirical ramp risk is \(\hat{L}_{\zeta}(f):=N^{-1}\sum_{i=1}^{N}r_{\zeta}(-\mathcal{M}(f(G_{i}),y_{i}))\). It is clear that \(\mathds{1}[\arg\max_{j}f(G)_{j}\neq y]\leq r_{\zeta}(-\mathcal{M}(f(G),y))\), so

\[\Pr_{G\sim\mathcal{X}}[\arg\max_{j}f(G)_{j}\neq y]=\mathbb{E}_{G\sim\mathcal{ X}}\left[\mathds{1}(\arg\max_{j}f(G)_{j}\neq y)\right]\leq L_{\zeta}(f)\]

It is easy to see that \(\gamma=1\) in this case. Also by Lemma F.6, \(\mu=\frac{2}{\zeta}\). Then it is trivial to get the bound by Theorem 3.2 with simple substitution

\[\Pr_{G\sim\mathcal{X}}[\arg\max_{j}f(G)_{j}\neq y] \leq L_{\zeta}(f)\] \[\leq\hat{L}_{\zeta}(f)+3\sqrt{\frac{\ln\left(2/\delta\right)}{2N }}+\frac{8+24\sqrt{v_{1}+v_{2}}\ln N+24\sqrt{Nv_{2}\ln v_{3}}}{N}\]

where \(v_{1}=\frac{256\theta KR_{G}}{n\zeta^{2}},v_{2}=Km\bar{d},v_{3}=\frac{48b_{D} \sqrt{\theta N}}{\sqrt{m\zeta}},R_{G}=c^{2L}\|\mathbf{X}\|_{2}^{2}\ln(2\bar{d} ^{2})\left(\prod_{l=1}^{L}\left(\prod_{i=1}^{r}\kappa_{i}^{(l)}\right)^{2} \right)\left(\sum_{l=1}^{L}\sum_{i=1}^{r}\left(\frac{b_{i}^{(l)}}{\kappa_{i}^{ (l)}}\right)^{2/3}\right)^{3}\). Also, \(r_{\zeta}(-\mathcal{M}(f(G_{i}),y_{i}))\leq\mathds{1}[f(G_{i})_{y_{i}}\leq \zeta+\arg\max_{j\neq y_{i}}f(G_{i})_{j}]\), so we have

\[\hat{L}_{\zeta}(f)=N^{-1}\sum_{i=1}^{N}r_{\zeta}(-\mathcal{M}(f(G_{i}),y_{i})) \leq N^{-1}\sum_{i=1}^{N}\mathds{1}[f(G_{i})_{y_{i}}\leq\zeta+\arg\max_{j\neq y _{i}}f(G_{i})_{j}]\]

**Corollary F.17** (Generalization bound with cross-entropy loss).: _Suppose \(l_{\gamma}(\cdot,y)\) is the cross-entropy loss \(\mathcal{L}_{\text{CE}}\) (7). Let \(n\) be the minimum number of nodes for graphs \(\{G_{i}\}_{i=1}^{N}\), \(\theta\) be the hyper-parameter in gaussian kernel (Equation (15)), \(c=\|\tilde{\mathbf{A}}\|_{\sigma}\). For graphs \(\mathcal{G}=\left\{(G_{i},y_{i})\right\}_{i=1}^{N}\) drawn i.i.d fromany probability distribution over \(\mathcal{X}\times\{1,\ldots,K\}\) and references \(\{\mathbf{D}_{k}\}_{k=1}^{K},\mathbf{D}_{k}\in\mathbb{R}^{m\times d}\), with probability at least \(1-\delta\), every network \(f\in\mathcal{F}\) under Assumption 3.1 satisfy_

\[L_{\gamma}(f)\leq\hat{L}_{\gamma}(f)+3\gamma\sqrt{\frac{\ln{(2/ \delta)}}{2N}}+\frac{8\gamma+24\sqrt{v_{1}+v_{2}}\ln{N}+24\gamma\sqrt{Nv_{2} \ln{v_{3}}}}{N}\]

_where \(v_{1}=\frac{128\theta KR_{G}}{n},v_{2}=Km\bar{d},v_{3}=\frac{24\sqrt{2\theta N} b_{D}}{\sqrt{m}},R_{G}=c^{2L}\|\mathbf{X}\|_{2}^{2}\ln(2\bar{d}^{2})\left(\prod_{l=1}^{ L}\left(\prod_{i=1}^{r}\kappa_{i}^{(l)}\right)^{2}\right)\left(\sum_{l=1}^{L}\sum_{i= 1}^{r}\left(\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)}}\right)^{2/3}\right)^{3}\)._

Proof.: According to Lemma F.7, \(\mu=\sqrt{2}\). Then the proof is trivial by substituting it into Theorem 3.2. 

### Adjacency matrix spectral norm

**Lemma F.18**.: _Let \(G=(V,E)\) be an undirected graph with adjacency matrix \(\mathbf{A}\in\mathbb{R}^{n\times n}\), \(d_{G}\) be the maximum degree of G. Then, the adjacency matrix satisfies_

\[\|\mathbf{A}\|_{\sigma}\leq d_{G}\]

Proof.: Based on the definition of the spectral norm, we have

\[\|\mathbf{A}\|_{\sigma}\stackrel{{(a)}}{{=}}\max_{\|\mathbf{x}\| _{2}=1}\mathbf{x}^{\top}\mathbf{A}\mathbf{x}=\max_{\|\mathbf{x}\|_{2}=1}\sum_{ (i,j)\in E}x_{i}x_{j}\leq\max_{\|\mathbf{x}\|_{2}=1}\sum_{(i,j)\in E}\frac{1}{ 2}(x_{i}^{2}+x_{j}^{2})=d_{G}\sum_{i\in V}x_{i}^{2}=d_{G}\]

where (a) is because \(\mathbf{A}\) is a real symmetric matrix. 

**Lemma F.19**.: _For any matrix \(\mathbf{X}\in\mathbb{R}^{m\times n}\), \(\|\mathbf{X}\|_{\sigma}\leq\|\mathbf{X}\|_{2}\leq\sqrt{r}\|\mathbf{X}\|_{\sigma}\) where \(r=\text{rank}(\mathbf{X})\)_

Proof.: By the definition of spectral norm,

\[\|\mathbf{X}\|_{\sigma}=\sqrt{\lambda_{\text{max}}(\mathbf{X}^{\top}\mathbf{ X})}\]

where \(\lambda_{\text{max}}\) denotes the largest eigenvalue. Since \(\mathbf{X}^{\top}\mathbf{X}\) is a positive semi-definite real symmetric matrix, it must has \(n\) real eigenvalues that can be ordered as

\[\lambda_{1}\geq\lambda_{2}\geq\cdots\geq\lambda_{r}>\lambda_{r+1}\cdots= \lambda_{n}=0.\]

Then it has

\[\|\mathbf{X}\|_{\sigma}=\sqrt{\lambda_{1}}\leq\sqrt{\sum_{i=1}^{n}\lambda_{i} }=\sqrt{\text{tr}(\mathbf{X}^{\top}\mathbf{X})}=\|\mathbf{X}\|_{2}\leq\sqrt{ r\lambda_{1}}=\sqrt{r}\|\mathbf{X}\|_{\sigma}.\]

**Lemma F.20**.: _Let \(G=(V,E)\) be a graph with adjacency matrix \(\mathbf{A}\in\mathbb{R}^{n\times n}\). Assume \(|E|>0\), then \(c=\|\tilde{\mathbf{A}}\|_{\sigma}=\|\mathbf{A}+\mathbf{I}\|_{\sigma}>1\)._

Proof.: By Lemma F.19,

\[\|\tilde{\mathbf{A}}\|_{\sigma}\geq\frac{1}{\sqrt{r}}\|\tilde{\mathbf{A}}\|_ {2}=\frac{1}{\sqrt{r}}\|\mathbf{A}+\mathbf{I}\|_{2}\geq\frac{1}{\sqrt{r}}\| \mathbf{A}\|_{2}+\frac{1}{\sqrt{r}}\|\mathbf{I}\|_{2}\stackrel{{(a) }}{{>}}\frac{1}{\sqrt{r}}\|\mathbf{I}\|_{2}=\sqrt{\frac{n}{r}}\geq 1\]

where (a) is because \(|E|>1\)

### Generalization of MMD (to be used in Section F.10)

Before stating the lemma, we first give alternative definitions of MMD. Let \(\mathbb{P}\) be a continuous probability distribution of some random variable \(Z\) taking values from space \(\mathcal{Z}\). Then, the kernel mean embedding of \(\mathbb{P}\) associated with the continuous, bounded, and positive-definite kernel function \(k:\mathcal{Z}\times\mathcal{Z}\to\mathbb{R}\) is

\[\mu_{\mathbb{P}}:=\int_{\mathcal{Z}}k(z,\cdot)\,d\mathbb{P}(z)\] (35)

which is an element in the Reproducing Kernel Hilbert Space (RKHS) \(\mathscr{H}\) associated with kernel \(k\). In many practical situations, it is unrealistic to assume access to the true distribution \(\mathbb{P}\). Instead, we only have access to samples \(P=\{z_{i}\}_{i=1}^{n}\) from \(\mathbb{P}\). We can approximate (35) by the empirical kernel mean embedding

\[\hat{\mu}_{\mathbb{P}}:=\frac{1}{n}\sum_{i=1}^{n}k(z_{i},\cdot).\] (36)

For another continuous distribution \(\mathbb{Q}\) with samples \(Q=\{z_{i}^{\prime}\}_{i=1}^{m}\), the MMD between the two probability distribution is defined as

\[\mathrm{MMD}(\mathbb{P},\mathbb{Q})=\|\mu_{\mathbb{P}}-\mu_{\mathbb{Q}}\|_{ \mathscr{H}},\]

and the empirical MMD is

\[\mathrm{MMD}(P,Q)=\|\hat{\mu}_{\mathbb{P}}-\hat{\mu}_{\mathbb{Q}}\|_{ \mathscr{H}}.\]

Denote \(d:=\mathrm{MMD}(\mathbb{P},\mathbb{Q})\) and \(\hat{d}:=\mathrm{MMD}(P,Q)\), we have the follow Lemma:

**Lemma F.21**.: _With probability at least \(1-\delta\) we have_

\[|d-\hat{d}|\leq\left(\frac{1}{\sqrt{m}}+\frac{1}{\sqrt{n}}\right)\left(2+ \sqrt{2\log\frac{2}{\delta}}\right)\]

Proof.: We use the following Lemma:

**Lemma F.22** (Theorem 7 of Gretton et al. (2012a), reformulated).: _Assume \(0\leq k(x,y)\leq K\). Then with probability at least \(1-2\exp\left(\frac{-e^{2}mn}{2K(m+n)}\right)\)_

\[\left|d-\hat{d}\right|\leq 2\left(\frac{1}{\sqrt{m}}+\frac{1}{\sqrt{n}}\right)+\varepsilon\]

Let \(\delta=2\exp\left(\frac{-e^{2}mn}{2K(m+n)}\right)\), then it has

\[\varepsilon=\sqrt{\frac{1}{m}+\frac{1}{n}}\sqrt{2\log\left(\frac{2}{\delta} \right)}.\]

Therefore, with probability at least \(1-\delta\)

\[\left|d-\hat{d}\right| \leq 2\left(\frac{1}{\sqrt{m}}+\frac{1}{\sqrt{n}}\right)+\sqrt{ \frac{1}{m}+\frac{1}{n}}\sqrt{2\log\left(\frac{2}{\delta}\right)}\] \[\leq\left(\frac{1}{\sqrt{m}}+\frac{1}{\sqrt{n}}\right)\left(2+ \sqrt{2\log\frac{2}{\delta}}\right)\]

### Proof of Lemma F.2

Proof.: For simplicity, let \(k^{\prime}:=\arg\min_{j\neq k}\mathrm{MMD}(\mathbf{H}_{i},\mathbf{D}_{j})\). Since \(\mathbf{H}_{i}\) and \(\mathbf{D}_{k}\) are finite samples from \(\mathbb{P}_{k}\), and \(\mathbf{D}_{k^{\prime}}\) is sampled from \(\mathbb{P}_{k^{\prime}}\), by Lemma F.21, we have

\[|\mathrm{MMD}(\mathbb{P}_{k},\mathbb{P}_{k})-\mathrm{MMD}(\mathbf{H}_{i}, \mathbf{D}_{k})| \leq\Delta_{1}=\left(\frac{1}{\sqrt{m}}+\frac{1}{\sqrt{n}}\right) \left(2+\sqrt{2\log\frac{2}{\delta^{\prime}}}\right)\quad w.p.\quad(1-\delta^{ \prime}),\]

\[|\mathrm{MMD}(\mathbb{P}_{k},\mathbb{P}_{k^{\prime}})-\mathrm{MMD}(\mathbf{H}_ {i},\mathbf{D}_{k^{\prime}})| \leq\Delta_{2}=\left(\frac{1}{\sqrt{m}}+\frac{1}{\sqrt{n}}\right) \left(2+\sqrt{2\log\frac{2}{\delta^{\prime}}}\right)\quad w.p.\quad(1-\delta^ {\prime}).\]

Therefore, with probability at least \(1-2\delta^{\prime}\) (union bound), we have

\[\mathrm{MMD}(\mathbf{H}_{i},\mathbf{D}_{k})-\mathrm{MMD}(\mathbb{P}_{k}, \mathbb{P}_{k})=\mathrm{MMD}(\mathbf{H}_{i},\mathbf{D}_{k})-0\leq\Delta_{1} \quad\text{and}\quad\mathrm{MMD}(\mathbb{P}_{k},\mathbb{P}_{k^{\prime}})- \mathrm{MMD}(\mathbf{H}_{i},\mathbf{D}_{k^{\prime}})\leq\Delta_{2}.\]

It follows that

\[\mathrm{MMD}(\mathbf{H}_{i},\mathbf{D}_{k})-\mathrm{MMD}(\mathbf{H}_{i}, \mathbf{D}_{k^{\prime}})\leq-\mathrm{MMD}(\mathbb{P}_{k},\mathbb{P}_{k^{\prime }})+\Delta_{1}+\Delta_{2}.\]

By Definition F.1, to ensure correct classification, we can let

\[-\mathrm{MMD}(\mathbb{P}_{k},\mathbb{P}_{k^{\prime}})+\Delta_{1}+\Delta_{2}<0.\]

This means

\[\mathrm{MMD}(\mathbb{P}_{k},\mathbb{P}_{k^{\prime}})>\Delta_{1}+\Delta_{2}= \left(\frac{1}{\sqrt{m}}+\frac{1}{\sqrt{n}}\right)\left(4+2\sqrt{2\log\frac{2 }{\delta^{\prime}}}\right).\] (37)

Therefore, if (37) holds, the classification is correct with probability at least \(1-2\delta^{\prime}\). Letting \(\delta=2\delta^{\prime}\), we finish the proof. 

### Proof of Theorem a.1

Let \(\mathbf{H}\in\mathbb{R}^{\sum_{i}n_{i}\times d}\) be the output of the message passing layers. Then the mean readout is a matrix multiplication

\[\mathbf{Z}=\mathbf{M}\mathbf{H},\quad\mathbf{M}=\begin{bmatrix}\frac{1}{n_{1} }&\dots&\frac{1}{n_{1}}&0&\dots&0&0&\dots&0\\ 0&\dots&0&\frac{1}{n_{2}}&\dots&\frac{1}{n_{2}}&0&\dots&0\\ \vdots&&\vdots&\vdots&&\vdots&\vdots&&\vdots\\ 0&\dots&0&0&\dots&0&\frac{1}{n_{N}}&\dots&\frac{1}{n_{N}}\end{bmatrix}.\]

It is easy to see \(\|\mathbf{M}\|_{\sigma}\leq 1\). Since a MLP is concatenated after readout, by the proof of Lemma F.8, the covering number of GIN \(\mathcal{F}^{\prime}\) is

\[\ln\mathcal{N}\left(\epsilon,\mathcal{F}^{\prime},\rho\right)\leq\frac{c^{2L} \|\mathbf{X}\|_{2}^{2}\ln(2d^{2})}{\epsilon^{2}}\mathcal{A}\]

where \(\mathcal{A}=\big{(}\prod_{l=1}^{L}(\prod_{i=1}^{r}\kappa_{i}^{(l)})^{2}(\prod_ {i=1}^{r^{\prime}}\kappa_{i}^{(L+1)})^{2}\big{)}\big{(}\sum_{l=1}^{L}\sum_{i=1 }^{r}\big{(}\frac{b_{i}^{(l)}}{\kappa_{i}^{(l)}}\big{)}^{2/3}+\sum_{i=1}^{r^{ \prime}}\big{(}\frac{b_{i}^{(L+1)}}{\kappa_{i}^{(L+1)}}\big{)}^{2/3}\big{)}^{3}\).

Then by Lemma E.2, the generalization bound can be easily derived by taking \(\alpha=\frac{1}{\sqrt{N}}\).

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The main claims made in the abstract and introduction accurately reflect the paper's contributions and scope. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: The paper discusses the limitations of the work in the conclusion. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes] Justification: The paper provides the full set of assumptions and a complete proof. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems.

* The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.
* Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.
* Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: The paper fully discloses all the information needed to reproduce the main experimental results. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: The paper provides open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).
* The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details.
* The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.
* The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.
* At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).
* Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: The paper specifies all the training and test details necessary to understand the results. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: The paper reports information about the statistical significance of the experiments. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors). * It should be clear whether the error bar is the standard deviation or the standard error of the mean. * It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified. * For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates). * If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes]Justification: The paper provides sufficient information on the computer resources needed to reproduce the experiments. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: The research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: All the datasets used in the paper are open-source. There is no negative societal impact. Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations. * The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. * The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology. * If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: The paper poses no such risks. Guidelines: ** The answer NA means that the paper poses no such risks.
* Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.
* Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.
* We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
* **Licensees for existing assets*
* Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: The creators and original owners of assets used in the paper are properly credited and the license and terms of use explicitly mentioned and properly respected. Guidelines:
* The answer NA means that the paper does not use existing assets.
* The authors should cite the original paper that produced the code package or dataset.
* The authors should state which version of the asset is used and, if possible, include a URL.
* The name of the license (e.g., CC-BY 4.0) should be included for each asset.
* For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.
* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: The paper does not release new assets. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: the paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.