Abstracted Shapes as Tokens - A Generalizable and Interpretable Model for Time-series Classification

Yunshi Wen

Rensselaer Polytechnic

Institute

weny2@rpi.edu

&Tengfei Ma

Stony Brook University

tengefei.ma@stonybrook.edu

&Tsui-Wei Weng

University of California,

San Diego

lweng@ucsd.edu

&Lam M. Nguyen

IBM Research

lamnguyen.mltd@ibm.com

&Anak Agung Julius

Rensselaer Polytechnic

Institute

agung@ecse.rpi.edu

Corresponding to Yunshi Wen (weny2@rpi.edu) and Tengfei Ma (tengefei.ma@stonybrook.edu)

###### Abstract

In time-series analysis, many recent works seek to provide a unified view and representation for time-series across multiple domains, leading to the development of foundation models for time-series data. Despite diverse modeling techniques, existing models are black boxes and fail to provide insights and explanations about their representations. In this paper, we present VQShape, a pre-trained, generalizable, and interpretable model for time-series representation learning and classification. By introducing a novel representation for time-series data, we forge a connection between the latent space of VQShape and shape-level features. Using vector quantization, we show that time-series from different domains can be described using a unified set of low-dimensional codes, where each code can be represented as an abstracted shape in the time domain. On classification tasks, we show that the representations of VQShape can be utilized to build interpretable classifiers, achieving comparable performance to specialist models. Additionally, in zero-shot learning, VQShape and its codebook can generalize to previously unseen datasets and domains that are not included in the pre-training process. The code and pre-trained weights are available at https://github.com/YunshiWen/VQShape.

## 1 Introduction

As one of the fundamental forms of data, time-series (TS) exist in a wide range of domains and applications, including healthcare, weather, traffic, motions, human activities, sensors, etc. Modeling TS data across multiple domains has been a challenging task since TS data can have diverse sampling rates, lengths, magnitudes, frequencies, and noise levels. Due to this heterogeneity, most of the existing machine learning methods for TS modeling focus only on a single dataset or a single domain.

Recently, motivated by the success of large pre-trained models in natural language processing and computer vision, various approaches adopted from these two fields have been proposed to build a unified view and feature space for TS data from different domains [Liang et al., 2024]. Most of the models use a transformer as the backbone and pre-train it on a diverse range of datasets [Zerveas et al., 2021, Nie et al., 2023, Goswami et al., 2024]. These methods have achieved great success in TS representation learning, benefiting various downstream tasks and demonstrating their generalizability. Despite their success, most of them remain black boxes since they cannot provide human-understandable representations. While tokenizers have played increasingly important roles in pre-trained models for language and vision, in TS, pre-training is often conducted by predicting the next or masked timestamp, time window, or patch, lacking the concept of discrete tokens as in LLMs. Very recently, Talukder et al. (2024) developed TOTEM, which utilizes VQ-VAE (van den Oord et al., 2017) to obtain the codebook and reconstruct the TS. Nevertheless, like all other VQ-VAE models, the tokens from the codebook are just latent vector representations and lack physical meaning.

Alternatively, in interpretable TS modeling, shapelets have been recognized as interpretable and expressive features for TS data. Initially defined as TS subsequences that discriminate different categories in classification (Ye and Keogh, 2011), they were later generalized to representative patterns (Grabocka et al., 2014). Specifically, shapelets can transform TS data into low-dimensional representations either in the form of the distance between a shapelet and a TS, or as a logical predicate that measures the probability of a shapelet existing in a TS (Lines et al., 2012). However, despite their effectiveness in classification tasks, this shape-level feature lacks flexibility since shapelets with pre-defined lengths are optimized for capturing discriminative features for making dataset-specific predictions. For example, when measuring human motion with accelerometers, an adult and a child performing the same gesture may record TS with different offsets, scales, and durations. Although they share the same shape-level concept, multiple shapelets are required to describe them separately. Additionally, shapelet-based interpretable models are specialized to a single dataset, and the learned shapelets fail to transfer to different domains.

In this paper, motivated by the limitations of existing pre-trained models and interpretable models in TS, we propose VQshape, a self-supervised pre-trained model that provides abstracted shapes as interpretable and generalizable tokens for TS modeling. Firstly, we decompose a TS subsequence into a set of attributes, including abstracted shape, offset, scale, start time, and duration. By incorporating vector quantization, VQshape learns a codebook of abstracted shapes that are generalizable and descriptive, representing TS from various domains. Evaluated on various classification tasks, and without fine-tuning, VQshape achieves comparable performance to black-box pre-trained models while additionally providing interpretable latent-space tokens and representations to describe TS data. Our contributions are summarized below:

* We present an interpretable representation composed of abstracted shapes and attributes to describe TS data based on shape-level features, which enables the learning of dataset-agnostic interpretable features.
* We introduce VQshape, to the best of our knowledge, the first self-supervised pre-trained model that extracts interpretable representations from any TS data. VQshape also learns a codebook containing abstracted shapes that generalize to multiple datasets.
* Pre-trained on diverse datasets and without fine-tuning, VQshape achieves comparable performance to existing black-box models on benchmark classification datasets. We explicitly demonstrate that the representations and VQShape are interpretable and generalizable for unseen datasets and domains.

## 2 Related Work

Deep learning methods for TS analysis.Deep learning methods are increasingly applied to TS analysis. Existing methods can be categorized into two groups depending on whether they use a Transformer structure as the backbone. For non-Transformer-based models, classical deep learning models such as MLP, CNN, and ResNet demonstrate decent performance on various tasks (Wang et al., 2017). Recent methods have developed various feature engineering techniques to model explicit features of TS data. TimesNet (Wu et al., 2023) transforms TS into 2D space to capture multi-period features in a modularized way, achieving state-of-the-art performance on various tasks. TS2Vec (Yue et al., 2022) employs hierarchical contrastive learning for unsupervised representation learning of TS data. T-Rep (Fraikin et al., 2024) introduces a self-supervised representation learning approach by augmenting the TS with time embeddings, providing additional temporal structure to the latent space.

Transformers have been increasingly applied to TS analysis, but usually with some modifications to the original structure. For example, Autoformer (Wu et al., 2021) modifies the attention mechanism by incorporating an Auto-Correlation mechanism to capture temporal dependencies. When applying Transformers to real-valued data, transforming the inputs into patches has been recognized as an effective approach for images (Dosovitskiy et al., 2021) since the tokens could contain more semantic meaning, like a "word" in language. Similarly, PatchTST (Nie et al., 2023) shows that TS analysis also benefits from combining patched inputs with Transformers, viewing a TS as a sequence of 64 "words".

Pre-trained Models for TS data.The success of large pre-trained models in language and vision motivates the development of foundation models for TS analysis. Existing approaches aim to find a unified view for TS data from different perspectives. For example, TST (Zerveas et al., 2021) uses the Transformer model (Vaswani et al., 2017) and is pre-trained using masked reconstruction, while TimeGPT-1 (Garza et al., 2023) is pre-trained by generating a forecasting window. MOMENT (Goswami et al., 2024) extends a patch-based Transformer (Nie et al., 2023) to multiple datasets by unifying the lengths of TS data using padding and sub-sampling. The model is also pre-trained to reconstruct the masked patches. TOTEM (Talukder et al., 2024) applies a convolutional neural network (CNN) encoder to raw TS data and uses vector quantization (VQ) on the encoder outputs, providing a discrete and domain-invariant codebook for TS data. TOTEM is pre-trained as a VQ-VAE (van den Oord et al., 2017) to reconstruct the whole TS, viewing the latent-space codes from convolutions as a unified representation. UniTS (Gao et al., 2024) introduces a prompt-based method to unify predictive and generative tasks within a single model and pre-training process. Although these methods learn representations that benefit various downstream tasks and demonstrate generalizability, these pre-trained models remain black boxes since they cannot provide human-understandable representations.

## 3 Proposed Method

Towards interpretable TS modeling, we first present the formulations of shape-level representations, describing univariate TS data using a set of abstracted shapes and attributes. Then, we introduce the architecture of VQShape and its components with detailed workflow and products from each step.

Notations.Let \((\mathcal{X},\mathcal{Y})=\{(x_{i},y_{i})|i=1,\ldots,N\}\) denote a TS classification dataset with \(N\) samples, where \(x_{i}\in\mathbb{R}^{M\times T}\) is a multivariate TS sample and \(y_{i}\in\{1,\ldots,C\}\) is the class label. Here, \(M\) is the number of variables, \(T\) is the length in timestamp, and \(C\) is the number of categories. Each multivariate TS sample \(x_{i}\) can be viewed as a set of univariate TS samples where \(x_{i}^{m}\in\mathbb{R}^{T}\) denotes the TS at the \(m^{\text{th}}\) variable. For simplicity in notations, in this paper, \(x_{i,t_{1}:t_{2}}^{m}\) denotes a subsequence of \(x_{i}^{m}\) between timestamp \(\lfloor Tt_{1}\rfloor\) and \(\lfloor Tt_{2}\rfloor\), where \(t_{1},t_{2}\in[0,1]\) are relative positions.

### Shape-level representation

For a univariate TS \(x\), a subsequence \(s_{k}\) can be represented by an attribute tuple \(\tau_{k}=(z_{k},\mu_{k},\sigma_{k},t_{k},l_{k})\) where

* \(z_{k}\in\mathbb{R}^{d_{\text{out}}}\) is the code for abstracted shape of \(s_{k}\),
* \(\mu_{k}\in\mathbb{R}^{1}\) is the offset of \(s_{k}\),
* \(\sigma_{k}\in\mathbb{R}^{1}\) is the scale (standard deviation) of \(s_{k}\) and \(\sigma_{k}>0\),
* \(t_{k}\in\mathbb{R}^{1}\) is the relative starting position of \(s_{k}\) in \(x\) and \(0\leq t_{k}\leq 1-l_{\text{min}}\),
* \(l_{k}\in\mathbb{R}^{1}\) is the relative length of \(s_{k}\) w.r.t. the length of \(x\) and \(l_{\text{min}}\leq l_{k}\leq 1-t_{k}\).

Here, \(l_{\text{min}}\) is the hyperparameter that defines the minimum length of a shape. We set \(l_{\text{min}}=1/64\) as it is the length of a patch. In this work, we develop a pre-trained transformer model to produce a set of attribute tuples \(\mathcal{T}=\{\tau_{k}\mid k=1,\ldots,K\}\) given a univariate TS \(x\). Additionally, the model learns a codebook of abstracted shape \(z\) that is reusable and generalizable for datasets from different domains.

### VQShape Architecture

The VQShape model contains a TS encoder \(\mathcal{E}\), a TS decoder \(\mathcal{D}\), a latent-space codebook \(\mathcal{Z}\), a shape decoder \(\mathcal{S}\), an attribute encoder \(\mathcal{A}_{\text{enc}}\), and an attribute decoder \(\mathcal{A}_{\text{dec}}\). An overview of VQShape is presented in Figure 1. We then present a detailed formulation for each component.

TS Encoding.VQShape contains a patch-based transformer encoder (Nie et al., 2023; Goswami et al., 2024) which first transforms a univariate TS \(x\) into \(K\) non-overlapping fixed-length patches with dimension \(d^{\text{patch}}\). Then, the patches are encoded by learnable linear projection and additive position embedding, forming patch embeddings that serve as inputs to a transformer model. The transformer outputs \(K\) latent embeddings \(\hat{h}\in\mathbb{R}^{d^{\text{embed}}}\). Formally, the TS encoder is denoted by \(\{\hat{h}_{k}\in\mathbb{R}^{d^{\text{embed}}}\mid k=1,\dots,K\}=\mathcal{E}(x)\). Note that \(\hat{h}_{k}\) could contain information from all patches instead of only the \(k^{\text{th}}\) patch.

Attribute Decoding.The attribute decoder \(\mathcal{A}_{\text{dec}}\) takes a latent embedding \(h_{k}\) and extracts an attribute tuple \(\hat{\tau}_{k}=(\hat{z}_{k},\mu_{k},\sigma_{k},t_{k},l_{k})\). Formally, \(\mathcal{A}_{\text{dec}}\) performs

\[\hat{\tau}_{k}=(\hat{z}_{k},\mu_{k},\sigma_{k},t_{k},l_{k})= \mathcal{A}_{\text{dec}}(h_{k}),\;\text{where}\begin{cases}\hat{z}_{k}=f_{z} (h_{k}),\\ \mu_{k}=f_{\mu}(h_{k}),\\ \sigma_{k}=\texttt{softmax}(f_{\sigma}(h_{k})),\\ t_{k}=\texttt{sigmoid}(f_{t}(h_{k}))\cdot(1-l_{\text{min}}),\\ l_{k}=\texttt{sigmoid}(f_{l}(h_{k}))\cdot(1-t_{k})+l_{\text{min}}.\end{cases}\] (1)

Each decoding function in \(\{f_{z},f_{\mu},f_{\sigma},f_{t},f_{l}\}\) is implemented using a multi-layer perceptron (MLP) with one hidden layer and ReLU activation. Following a common notation (Esser et al., 2021), \(\hat{\tau}\) denotes the attribute tuple before quantization.

Codebook and Vector-Quantization.The latent-space codebook is denoted by \(\mathcal{Z}=\{z_{q}\in\mathbb{R}^{d^{\text{rank}}}\mid q=1,\dots,N^{\text{ code}}\}\). To learn a generalizable codebook that contains only the abstracted shape-level features, we use low-dimensional codes with \(d^{\text{code}}=8\). This configuration also creates a bottleneck for reconstruction, minimizing additional information that can be inferred besides the abstracted shapes. The quantization follows VQ-VAE (van den Oord et al., 2017) that selects the discrete code based on Euclidean distance where

\[z_{k}=\operatorname*{arg\,min}_{z_{q}\in\mathcal{Z}}\|\hat{z}_{k}-z_{q}\|.\] (2)

Shape Decoding.The abstracted shape of a TS subsequence is a sequence with its length, offset, and scale information removed through normalizations. Given \(\tau_{k}=(z_{k},\mu_{k},\sigma_{k},t_{k},l_{k})\), we first extract the target subsequence from \(x\) specified by \(t_{k}\) and \(l_{k}\) denoted by \(x_{t_{k}:t_{k}+l_{k}}\). Then, \(x_{t:t+l}\) is interpolated to a fixed length of \(d^{\text{s}}\) to remove the length information. The shape decoder \(\mathcal{S}\) takes \(z_{k}\) and outputs another sequence with the same length. Formally, for \(\tau_{k}\), this step produces two sequences

\[s_{k}^{\text{target}}\in\mathbb{R}^{d^{s}} =\texttt{interpolate}(x_{t_{k}:t_{k}+l_{k}}),\] (3) \[s_{k}\in\mathbb{R}^{d^{s}} =\mathcal{S}(z_{k})\cdot\sigma_{k}+\mu_{k}.\]

Note that the output of \(\mathcal{S}\) is normalized such that \(\mathcal{S}(z_{k})\) has the offset and scale information removed.

Figure 1: Overview of VQShape

Attribute encoding and reconstruction.The attribute tuple after quantization \(\tau_{k}=(z_{k},\mu_{k},\sigma_{k},t_{k},l_{k})\) is transformed by a learnable linear projection denoted by \(h_{k}\in\mathbb{R}^{d^{\text{mud}}}=\texttt{Linear}(\tau_{k})\). Then, the TS decoder \(\mathcal{D}\) takes \(\{h_{k}\mid k=1,\dots,K\}\) and outputs the reconstructed TS \(\hat{x}\).

## 4 Pre-training

VQShape is pre-trained on diverse datasets to learn dataset-agnostic features and tokens. In this section, we introduce the self-supervised training strategies and objectives of VQShape. Then, we discuss the representations the model could provide to down-stream tasks.

### Objectives

The optimization objectives of VQShape during the pre-training stage are summarized below.

Reconstructions.Analogous to most of the VQ-VAE approaches, VQShape is trained to accurately reconstruct the input TS to learn essential latent-space representations for modeling TS data. Additionally, to provide interpretable representations, the decoded shapes should be similar to the actual subsequences. Therefore, the reconstruction minimizes two objectives:

Time-series reconstruction: \[\mathcal{L}_{x}=\|x-\hat{x}\|_{2}^{2},\] (4) Subsequence reconstruction: \[\mathcal{L}_{s}=\frac{1}{K}\sum_{k=1}^{K}\|s_{k}^{\text{target}}-s_{k}\|_ {2}^{2}.\] (5)

Vector Quantization.We follow VQ-VAE (van den Oord et al., 2017) to define the vector-quantization objective which trains the encoder \(\mathcal{E}\) and codebook \(\mathcal{Z}\). Additionally, inspired by Yu et al. (2024), we add additional entropy terms to encourage codebook usage. We find these terms could improve pre-training stability and avoid collapse of codebook usage. The objective for learning the codebook is defined by

\[\mathcal{L}_{\text{vq}}=\underbrace{\|\hat{z}-\texttt{sg}(z)\|_{2}^{2}+ \lambda_{\text{commit}}\|\texttt{sg}(\hat{z})-z\|_{2}^{2}}_{\text{quantization}}+ \underbrace{\mathbb{E}\left[H(q(\hat{z},\mathcal{Z}))\right]-H(\mathbb{E} \left[q(\hat{z},\mathcal{Z})\right])}_{\text{codebook usage}},\] (6)

where \(\texttt{sg}(\cdot)\) is the stop-gradient operator and \(H(\cdot)\) is the entropy function for discrete variables. \(q(z,\mathcal{Z})=\texttt{softmax}\left(\|\hat{z}-z_{k}\|_{2}^{2}\mid z_{k}\in \mathcal{Z}\right]\right)\) measures the distance between \(\hat{z}\) and all codes in \(\mathcal{Z}\) as a categorical distribution.

Disentanglement of shapes.In Equation 5, the attributes \((z_{k},\mu_{l},\sigma_{k})\) are optimized towards accurate subsequence reconstructions. It is important to note that, since \((t_{k},l_{k})\) defines \(s_{k}^{\text{target}}\), they are essential for learning the abstracted shapes and the codebook. However, it is challenging to use gradients from reconstruction in Equation 4 solely to learn \((t_{k},l_{k})\) for making informative subsequence selection. Therefore, we introduce an additional regularization that encourages the latent-space tokens (attributes) to capture shape-level information with diverse positions and scales. This regularization is defined as

\[\mathcal{L}_{\text{div}}=\frac{1}{K^{2}}\sum_{k_{1}=1}^{K}\sum_{ k_{2}=1}^{K}\mathbbm{1}(k_{1}\neq k_{2})\texttt{relu}\left(\epsilon-\| \kappa(t_{k_{1}},l_{k_{1}})-\kappa(t_{k_{2}},l_{k_{2}})\|_{2}^{2}\right),\] (7) \[\text{where}\ \ \kappa(t_{k},l_{k})=\left[\begin{array}{c} \cos(t_{k}\pi)\cdot\ln(l_{k})/\ln(l_{\text{min}})\\ \sin(t_{k}\pi)\cdot\ln(l_{k})/\ln(l_{\text{min}})\end{array}\right].\]

In Equation 7, \(\kappa(t_{k},l_{k})\) defines a coordinate transformation which maps \((t_{k},l_{k})\) into a space where (1) small \(l_{k}\) values become more diverse and (2) large \(l_{k}\) values from different \(t_{k}\) become more concentrated. By making different \((t_{k},l_{k})\) diverse in this space, \(\mathcal{L}_{\text{div}}\) encourages the model to capture disentangled shape-level information while increasing the use of short sequences to capture local details. Figure 8 visualizes an example of transformation \(\kappa\). \(\epsilon\) is a hyperparameter that defines a threshold distance in the transformed coordinate where two \((t_{k},l_{k})\) samples are considered sufficiently diverse.

The overall pre-training objective is to minimize

\[\mathcal{L}_{\text{pretrain}}=\lambda_{x}\mathcal{L}_{x}+\lambda_{s}\mathcal{L}_{ s}+\lambda_{\text{vq}}\mathcal{L}_{\text{vq}}+\lambda_{\text{div}}\mathcal{L}_{ \text{div}},\] (8)

where \(\lambda_{x},\lambda_{s},\lambda_{\text{vq}},\lambda_{\text{div}}\) are hyperparameters that define the weighting between the components. During pre-training of VQShape, we set \(\lambda_{x}=\lambda_{s}=\lambda_{\text{vq}}=1\), \(\lambda_{\text{div}}=0.8\), and \(\lambda_{\text{commit}}=0.25\).

Design Analysis.Overall, the encoding process in VQShape (Transformer encoder and attribute decoder) introduces an inductive bias by representing and summarizing univariate TS using a set of abstracted shapes along with their position, length, offset, and scale. The pre-training objectives guide the components toward learning interpretable representations (via subsequence reconstruction in Equation 5) and disentangled representations (via regularization in Equation 7), while preserving the information necessary to describe the TS (via reconstruction in Equation 4). These objectives introduce interpretability to the conventional deep autoencoder structure. By pre-training on diverse datasets with a universal codebook, VQShape further leverages this inductive bias to produce discrete and dataset-agnostic representations, resulting in a vocabulary of abstracted shapes that can be used as primitives to describe TS data.

Model Configurations.The settings of VQShape related to the model size correspond to those of the MOMENT-Small[Goswami et al., 2024] model. Specifically, we interpolate all the input univariate TS \(x\) to have length \(T=512\), which is broken into \(K=64\) patches with \(d^{\text{patch}}=8\). The Transformer layers in the encoder \(\mathcal{E}\) and decoder \(\mathcal{D}\) have 8 heads, an embedding dimension \(d^{\text{embed}}=512\), and a feed-forward layer of size \(2048\). We employ an asymmetric structure with an 8-layer encoder \(\mathcal{E}\) and a 2-layer decoder \(\mathcal{D}\)[He et al., 2022]. The codebook \(\mathcal{Z}\) contains \(N^{\text{code}}=512\) codes, each with dimension \(d^{\text{code}}=8\). The subsequences \(s_{k}^{\text{target}}\) and decoded sequences \(s_{k}\) have length \(d^{\text{s}}=128\). We set the minimum shape length \(l\text{min}=1/64\). With these settings, VQShape has 37.1 million parameters.

In the pre-training stage, we train VQShape with the AdamW optimizer, using weight decay \(\lambda=0.01\), \(\beta_{1}=0.9\), \(\beta_{2}=0.999\), gradient clipping of \(1.0\), and an effective batch size of 2048. We employ a cosine learning rate schedule with an initial learning rate of \(1e^{-4}\), a final learning rate of \(1e^{-5}\), and 1 epoch of linear warm-up. The pre-training dataset contains univariate TS extracted from the training split of 29 datasets from the UEA Multivariate TS Classification Archive [Bagnall et al., 2018], excluding the InsectWingbeat dataset, resulting in 1,387,642 univariate TS. We train VQShape for \(50\) epochs on this dataset using bfloat-16 mixed precision.

### Representations for down-stream tasks

VQShape provides two types of representations: **Latent-space Tokens** and **Code Histogram**.

Tokens.Similar to the latent-space feature map of typical VQ approaches such as VQ-VAE [van den Oord et al., 2017] and VQ-GAN [Esser et al., 2021], VQShape also provides a set of tokens as representations. For an input univariate TS \(x\), the token representations are composed as \(\mathcal{T}\in\mathbb{R}^{K\times(d^{\text{data}+4})}=\{\tau_{k}=(z_{k},\mu_{k}, \sigma_{k},t_{k},l_{k})\mid k=1,\dots,K\}\). The token representations can be useful for general down-stream tasks but are less interpretable than the code histogram representations in classification tasks.

Code Histogram.Inspired by Concept Bottleneck Models (CBMs) [Koh et al., 2020] developed in computer vision, we can also view each \(z_{q}\in\mathcal{Z}\) as a concept for TS data. As CBMs have concept scores as representations, VQShape provides a similar representation in the form of a histogram of codes. Based on Equation 2, we can also have a vector of code indices

\[\mathbf{q}=\left[q_{k}=\operatorname*{arg\,min}_{q=1,\dots,N^{\text{code}}}\| \hat{z}_{k}-z_{q}\|\mid k=1,\dots,K\right].\] (9)

Then, the code histogram representation is defined as \(\mathbf{r}\in\mathbb{R}^{N^{\text{code}}}=\texttt{histogram}(\mathbf{q})\) where each element in \(\mathbf{r}\) is the frequency of index \(q\) in \(\mathbf{q}\). Intuitively, the code histogram representation is analogous to BOSS [Schafer, 2015] but with non-deterministic window size and dataset-agnostic symbols. In classification tasks, this type of representation can be more interpretable since classifiers based on these features are able to produce rule-like predictions that are straightforward to interpret and understand.

[MISSING_PAGE_FAIL:7]

and its codebook can also generalize to datasets and domains not observed during pre-training. To demonstrate cross-domain generalizability, we train another model using 9 datasets from the UEA archive that are commonly selected to train and evaluate deep learning models (Zerveas et al., 2021; Wu et al., 2023), and then evaluate it on all 29 datasets. The right half of Table 2 summarizes the performance of this model, compared with MOMENT and UniTS trained with the same setup. We observe that VQShape and MOMENT trained on fewer datasets result in similar but slightly worse performance, indicating that the representations learned by the models can generalize to unseen domains.

### Interpretability

Universal Codebook of Abstracted Shapes.One of the most essential components of VQShape is the dataset-agnostic codebook that contains abstracted shapes. In Figure 6 of Appendix C.1, we decode all 512 codes in the codebook of VQShape to visualize their corresponding abstracted shapes. We observe that a large number of codes are decoded into similar shapes, which suggests that the codebook size can be further reduced. We then visualize the distribution of codes learned from pre-training (see Figure 7) which contains about 60 clusters. Inspired by this observation, we train a variant named VQShape-64 with codebook size \(N^{\text{code}}=64\). Figure 2 presents the decoded codebook of VQShape-64.

Interpretable Representations.Overall, the encoding of VQShape can be interpreted as "TS \(x\) is decomposed into (shape \(z_{1}\) with offset \(\mu_{1}\) and scale \(\sigma_{1}\), at \(t_{1}\) with length \(l_{1}\)), \(\dots\)", and the decoding can be interpreted as "The composition of (shape \(z_{1}\) with offset \(\mu_{1}\) and scale \(\sigma_{1}\), at \(t_{1}\) with length \(l_{1}\)), \(\dots\) becomes \(\hat{x}\)". Figure 3 includes an example of interpretable representations learned by VQShape. From visualizations, we can confirm that VQShape can learn abstracted shapes that capture shape-level information with various positions and scales.

Discriminative Representations for Classification.We further show that the interpretable representations produced by VQShape also capture discriminative patterns that distinguish different categories in classification tasks. Figure 4 visualizes the average code histogram for samples from two categories. From the feature maps, it is obvious that several codes have significant differences in frequency between the two categories; these serve as discriminative features in classification tasks. We decode and visualize their corresponding abstracted shapes. The intuition provided by the histogram features can be interpreted as: "Samples from the CW circle category usually contain shape \(s_{61}\) in variate 1, and samples from the CCW circle category contain shape \(s_{33}\) in variate 3, etc."

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline Pre-trained on: & \multicolumn{3}{c}{29 datasets} & \multicolumn{3}{c}{9 datasets} \\ \cline{2-7}  & MOMENT & UniTS & VQShape & MOMENT & UniTS & VQShape \\ \hline Mean Accuracy & 0.697 & 0.581 & **0.723** & 0.697 & 0.559 & **0.723** \\ Median Accuracy & 0.736 & 0.649 & **0.810** & 0.733 & 0.649 & **0.792** \\ Mean Rank & 1.655 & 2.862 & **1.483** & 1.655 & 2.966 & **1.310** \\ Num. Top-1 & 13 & 0 & **16** & 11 & 0 & **20** \\ \hline \hline \end{tabular}
\end{table}
Table 2: Comparison between three models pre-trained on all or a subset of the UEA datasets. The best cases are marked with bold. Complete results are presented in Table 6.

Figure 2: Visualization of the decoded codebook from VQShape-64.

[MISSING_PAGE_EMPTY:9]

[MISSING_PAGE_FAIL:10]

## References

* Bagnall et al. (2018) Anthony Bagnall, Hoang Anh Dau, Jason Lines, Michael Flynn, James Large, Aaron Bostrom, Paul Southam, and Eamonn Keogh. The UEA multivariate time series classification archive, 2018. _arXiv preprint arXiv:1811.00075_, 2018.
* Bostrom and Bagnall (2017) Aaron Bostrom and Anthony Bagnall. A shapelet transform for multivariate time series classification. _arXiv preprint arXiv:1712.06428_, 2017.
* Chen et al. (2013) Yanping Chen, Bing Hu, Eamonn Keogh, and Gustavo EAPA Batista. DTW-D: time series semi-supervised learning from a single example. In _Proceedings of the 19th ACM SIGKDD international conference on Knowledge discovery and data mining_, pages 383-391, 2013.
* Dosovitskiy et al. (2021) Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, and Neil Houlsby. An image is worth 16x16 words: Transformers for image recognition at scale. In _International Conference on Learning Representations_, 2021.
* Eldele et al. (2021) Emadeldeen Eldele, Mohamed Ragab, Zhenghua Chen, Min Wu, Chee Keong Kwoh, Xiaoli Li, and Cuntai Guan. Time-series representation learning via temporal and contextual contrasting. In _Proceedings of the Thirtieth International Joint Conference on Artificial Intelligence, IJCAI-21_, pages 2352-2359, 2021.
* Esser et al. (2021) Patrick Esser, Robin Rombach, and Bjorn Ommer. Taming transformers for high-resolution image synthesis. In _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pages 12873-12883, 2021.
* Fraikin et al. (2024) Archibald Felix Fraikin, Adrien Bennetot, and Stephanie Allassonniere. T-rep: Representation learning for time series using time-embeddings. In _The Twelfth International Conference on Learning Representations_, 2024.
* Gao et al. (2024) Shanghua Gao, Teddy Koker, Owen Queen, Thomas Hartvigsen, Theodoros Tsiligkaridis, and Marinka Zitnik. UniTS: Building a unified time series model. _arXiv preprint arXiv:2403.00131_, 2024.
* Garza et al. (2023) Azul Garza, Cristian Challu, and Max Mergenthaler-Canseco. TimeGPT-1. _arXiv preprint arXiv:2310.03589_, 2023.
* Goswami et al. (2024) Mononito Goswami, Konrad Szefer, Arjun Choudhry, Yifu Cai, Shuo Li, and Artur Dubrawski. Moment: A family of open time-series foundation models. In _International Conference on Machine Learning_, 2024.
* Grabocka et al. (2014) Josif Grabocka, Nicolas Schilling, Martin Wistuba, and Lars Schmidt-Thieme. Learning time-series shapelets. In _Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining_, pages 392-401, 2014.
* He et al. (2022) Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li, Piotr Dollar, and Ross Girshick. Masked autoencoders are scalable vision learners. In _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pages 16000-16009, 2022.
* Koh et al. (2020) Pang Wei Koh, Thao Nguyen, Yew Siang Tang, Stephen Mussmann, Emma Pierson, Been Kim, and Percy Liang. Concept bottleneck models. In _International conference on machine learning_, pages 5338-5348. PMLR, 2020.
* Liang et al. (2024) Yuxuan Liang, Haomin Wen, Yuqi Nie, Yushan Jiang, Ming Jin, Dongjin Song, Shirui Pan, and Qingsong Wen. Foundation models for time series analysis: A tutorial and survey. _arXiv preprint arXiv:2403.14735_, 2024.
* Lines et al. (2012) Jason Lines, Luke M Davis, Jon Hills, and Anthony Bagnall. A shapelet transform for time series classification. In _Proceedings of the 18th ACM SIGKDD international conference on Knowledge discovery and data mining_, pages 289-297, 2012.
* Nie et al. (2023) Yuqi Nie, Nam H. Nguyen, Phanwadee Sinthong, and Jayant Kalagnanam. A time series is worth 64 words: Long-term forecasting with transformers. In _International Conference on Learning Representations_, 2023.
* Nie et al. (2018)* Ruiz et al. (2021) Alejandro Pasos Ruiz, Michael Flynn, James Large, Matthew Middlehurst, and Anthony Bagnall. The great multivariate time series classification bake off: a review and experimental evaluation of recent algorithmic advances. _Data Mining and Knowledge Discovery_, 35(2):401-449, 2021.
* Schafer (2015) Patrick Schafer. The boss is concerned with time series classification in the presence of noise. _Data Mining and Knowledge Discovery_, 29:1505-1530, 2015.
* Talukder et al. (2024) Sabera J Talukder, Yisong Yue, and Georgia Gkioxari. TOTEM: Tokenized time series embeddings for general time series analysis. In _ICLR 2024 Workshop on Learning from Time Series For Health_, 2024.
* van den Oord et al. (2017) Aaron van den Oord, Oriol Vinyals, and Koray kavukcuoglu. Neural discrete representation learning. In _Advances in Neural Information Processing Systems_, 2017.
* van der Maaten and Hinton (2008) Laurens van der Maaten and Geoffrey Hinton. Visualizing data using t-sne. In _Journal of Machine Learning Research_, volume 9, pages 2579-2605, 2008.
* Vaswani et al. (2017) Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. In _Advances in Neural Information Processing Systems_, volume 30, 2017.
* Wang et al. (2017) Zhiguang Wang, Weizhong Yan, and Tim Oates. Time series classification from scratch with deep neural networks: A strong baseline. In _2017 International joint conference on neural networks (IJCNN)_, pages 1578-1585. IEEE, 2017.
* Wu et al. (2021) Haixu Wu, Jiehui Xu, Jianmin Wang, and Mingsheng Long. Autoformer: Decomposition transformers with auto-correlation for long-term series forecasting. In _Advances in Neural Information Processing Systems_, 2021.
* Wu et al. (2023) Haixu Wu, Tengge Hu, Yong Liu, Hang Zhou, Jianmin Wang, and Mingsheng Long. Timesnet: Temporal 2d-variation modeling for general time series analysis. In _International Conference on Learning Representations_, 2023.
* Ye and Keogh (2011) Lexiang Ye and Eamonn Keogh. Time series shapelets: a novel technique that allows accurate, interpretable and fast classification. _Data mining and knowledge discovery_, 2011.
* tokenizer is key to visual generation. In _The Twelfth International Conference on Learning Representations_, 2024.
* Yue et al. (2022) Zhihan Yue, Yujing Wang, Juanyong Duan, Tianmeng Yang, Congrui Huang, Yunhai Tong, and Bixiong Xu. TS2Vec: Towards universal representation of time series. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 36, pages 8980-8987, 2022.
* Zeng et al. (2023) Ailing Zeng, Muxi Chen, Lei Zhang, and Qiang Xu. Are transformers effective for time series forecasting? In _Proceedings of the AAAI conference on artificial intelligence_, volume 37, pages 11121-11128, 2023.
* Zerveas et al. (2021) George Zerveas, Srideepika Jayaraman, Dhaval Patel, Anuradha Bhamidipaty, and Carsten Eickhoff. A transformer-based framework for multivariate time series representation learning. In _Proceedings of the 27th ACM SIGKDD conference on knowledge discovery & data mining_, pages 2114-2124, 2021.
* Zhou et al. (2022) Tian Zhou, Ziqing Ma, Qingsong Wen, Xue Wang, Liang Sun, and Rong Jin. Fedformer: Frequency enhanced decomposed transformer for long-term series forecasting. In _International conference on machine learning_, pages 27268-27286. PMLR, 2022.

Experiment Setup

Environment.VQShape is implemented using Python 3.11.8 and PyTorch 2.2.2. The pre-training and evaluations are conducted on a machine with Intel Core i7-11700k CPU, 32GB of RAM, and a Nvidia RTX 4090 24GB GPU.

Classification tasks.Taking frozen pre-trained representations from VQShape, we learn a linear classifier to make predictions. When training the linear classifier, we found that token representations work better with regularization of L2 on classifier weights, while histogram representations are more compatible with dropout on features. Therefore, to avoid overfitting and obtain the optimal performance, we tune both the L2 regularization weight (or weight decay) and the dropout rate.

When learning the linear classifier, we repeat the experiment with five random seeds and report the average accuracy in Table 5. The standard deviations of the five runs are included in Table 7. Note that we exclude the InsectWingbeat dataset since the dataset contains inconsistent and very short TS samples such as \(T=1\). Considering that the dataset has significantly more samples and channels than other datasets, the high volume of such short samples may have a negative effect on our method since the short TS do not contain any meaningful shape-level features.

Baseline Results.For baseline results presented in Table 1 and Table 5, we reproduce STRF with the Aeon-Tookit2 and Scikit-learn packages. We reproduce DLinear, Autoformer, FEDformer, PatchTST, and TimesNet using implementation from Wu et al. (2023) 3. Results of DTW, TS-TCC, TST, and TS2Vec are obtained from the TS2Vec paper (Yue et al., 2022). Results of MOMENT

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline Dataset & Train Size & Test Size & Variables & Length & Categories & Type \\  & \(N_{\text{train}}\) & \(N_{\text{test}}\) & \(M\) & \(T\) & \(C\) & \\ \hline ArticularyWordRecognition & 275 & 300 & 9 & 144 & 25 & MOTION \\ Atrial Fibrillation & 15 & 15 & 2 & 640 & 3 & ECG \\ BasicMotions & 40 & 40 & 6 & 100 & 4 & HAR \\ CharacterTrajectories & 1422 & 1436 & 3 & 119 & 20 & MOTION \\ Cricket & 108 & 72 & 6 & 1197 & 12 & HAR \\ DuckDuckGeese & 50 & 50 & 1345 & 270 & 5 & AUDIO \\ ERing & 30 & 270 & 4 & 65 & 6 & HAR \\ EigenWorms & 128 & 131 & 6 & 17948 & 5 & MOTION \\ Epilepsy & 137 & 138 & 3 & 206 & 4 & HAR \\ EthanolConcentration & 261 & 263 & 3 & 1751 & 4 & OTHER \\ FaceDetection & 5890 & 3524 & 144 & 62 & 2 & EEG \\ FingerMovements & 316 & 100 & 28 & 50 & 2 & EEG \\ HandMovementDirection & 160 & 74 & 10 & 400 & 4 & EEG \\ Handwriting & 150 & 580 & 3 & 52 & 26 & HAR \\ Heartbeat & 204 & 205 & 61 & 405 & 2 & AUDIO \\ InsectWingbeat & 25000 & 25000 & 200 & 22 & 10 & AUDIO \\ JapaneseVowels & 270 & 370 & 12 & 29 & 9 & AUDIO \\ LSST & 2459 & 2466 & 6 & 36 & 14 & OTHER \\ Libras & 180 & 180 & 2 & 45 & 15 & HAR \\ MotorImagery & 278 & 100 & 64 & 3000 & 2 & EEG \\ NATOPS & 180 & 180 & 24 & 51 & 6 & HAR \\ PEMS-SF & 267 & 173 & 263 & 144 & 7 & MISC \\ PenDigits & 7494 & 3498 & 2 & 8 & 10 & MOTION \\ PhonemeSpectra & 3315 & 3353 & 11 & 217 & 39 & SOUND \\ RacketSports & 151 & 152 & 6 & 30 & 4 & HAR \\ SelfRegulationSCP1 & 268 & 293 & 6 & 896 & 2 & EEG \\ SelfRegulationSCP2 & 200 & 180 & 7 & 1152 & 2 & EEG \\ SpokenArabicDigits & 6599 & 2199 & 13 & 93 & 10 & SPEECH \\ StandWalkJump & 12 & 15 & 4 & 2500 & 3 & ECG \\ UWaveGestureLibrary & 120 & 320 & 3 & 315 & 8 & HAR \\ \hline \hline \end{tabular}
\end{table}
Table 4: Information of the 30 benchmark datasets from the UEA archive.

[MISSING_PAGE_FAIL:14]

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline \multicolumn{2}{l}{Pre-trained on:} & \multicolumn{4}{c}{29 datasets} & \multicolumn{4}{c}{9 datasets} \\ \cline{2-7}  & \multicolumn{1}{c}{MOMENT} & \multicolumn{1}{c}{UniTS} & \multicolumn{1}{c}{VQShape} & \multicolumn{1}{c}{MOMENT} & \multicolumn{1}{c}{UniTS} & \multicolumn{1}{c}{VQShape} \\ \cline{2-7} Dataset & \multicolumn{1}{c}{} & \multicolumn{1}{c}{} & \multicolumn{1}{c}{} & \multicolumn{1}{c}{} & \multicolumn{1}{c}{} & \multicolumn{1}{c}{} & \multicolumn{1}{c}{} & \\ \hline ArticularyWordRecognition & **0.990** & 0.860 & 0.987 & 0.987 & 0.880 & 0.990 \\ Atrial Fibrillation & **0.533** & 0.400 & 0.520 & 0.480 & 0.400 & 0.480 \\ BasicMotions & 0.760 & 0.775 & **0.910** & 0.790 & 0.775 & 0.950 \\ CharacterTrajectories & **0.982** & 0.723 & 0.969 & 0.982 & 0.735 & 0.966 \\ Cricket & **0.986** & 0.944 & 0.978 & 0.989 & 0.819 & 0.989 \\ DuckDuckGeese & **0.464** & 0.400 & 0.360 & 0.384 & 0.240 & 0.396 \\ ERing & 0.907 & 0.700 & **0.960** & 0.937 & 0.756 & 0.976 \\ EigenWorms & **0.663** & 0.466 & 0.603 & 0.667 & 0.389 & 0.583 \\ Epilepsy & **0.987** & 0.826 & 0.893 & 0.983 & 0.819 & 0.877 \\ EthanolConcentration \(\dagger\) & **0.414** & 0.213 & 0.325 & 0.424 & 0.247 & 0.303 \\ FaceDetection \(\dagger\) & 0.597 & 0.500 & **0.653** & 0.601 & 0.529 & 0.649 \\ FingerMovements & 0.630 & 0.510 & **0.642** & 0.630 & 0.490 & 0.638 \\ HandMovementDirection & 0.381 & 0.257 & **0.546** & 0.408 & 0.216 & 0.508 \\ Handwriting \(\dagger\) & 0.225 & 0.087 & **0.270** & 0.245 & 0.153 & 0.280 \\ Heartbeat \(\dagger\) & **0.744** & 0.649 & 0.663 & 0.733 & 0.649 & 0.661 \\ JapaneseVowels \(\dagger\) & 0.706 & 0.843 & **0.945** & 0.709 & 0.824 & 0.952 \\ LSST & 0.429 & 0.361 & **0.511** & 0.423 & 0.415 & 0.510 \\ Libras & **0.908** & 0.633 & 0.814 & 0.879 & 0.556 & 0.813 \\ MotorImagery & 0.642 & 0.510 & **0.680** & 0.682 & 0.460 & 0.672 \\ NATOPS & **0.860** & 0.711 & 0.810 & 0.862 & 0.661 & 0.792 \\ PEMS-SF \(\dagger\) & **0.875** & 0.821 & 0.865 & 0.891 & 0.861 & 0.889 \\ PenDigits & 0.965 & 0.819 & **0.973** & 0.965 & 0.669 & 0.970 \\ PhonemeSpectra & **0.090** & 0.070 & 0.087 & 0.071 & 0.069 & 0.085 \\ RacketSports & 0.736 & 0.671 & **0.851** & 0.763 & 0.678 & 0.882 \\ SelfRegulationSCP1 \(\dagger\) & 0.829 & 0.652 & **0.904** & 0.821 & 0.717 & 0.898 \\ SelfRegulationSCP2 \(\dagger\) & 0.576 & 0.506 & **0.596** & 0.588 & 0.417 & 0.624 \\ SpokenArabicDigits & 0.971 & 0.751 & **0.976** & 0.963 & 0.769 & 0.975 \\ StandWalkJump & 0.493 & 0.533 & **0.787** & 0.507 & 0.333 & 0.747 \\ UWaveGestureLibrary \(\dagger\) & 0.871 & 0.656 & **0.888** & 0.846 & 0.688 & 0.902 \\ \hline \hline \end{tabular}
\end{table}
Table 6: Full results of three models pre-trained on the UEA datasets. The best case for models pre-trained on 29 datasets is marked with bold, and the best case for models pre-trained on 9 datasets is marked with underline. The 9 datasets are marked with \(\dagger\).

[MISSING_PAGE_FAIL:16]

[MISSING_PAGE_FAIL:17]

[MISSING_PAGE_EMPTY:18]

Figure 6: (Continue) Visualizations of the abstracted shapes decoded from the codebook of VQShape

### Code Distribution

In Figure 7, we plot the distribution of 512 codes in the codebook transformed to 2D space using t-SNE [van der Maaten and Hinton, 2008]. The codes can be roughly cluster into 60 groups, suggesting that there may only exists 60 diversed abstracted shapes in the codebook.

### Visualization of \(\kappa\) transform

We provide a visualization \(\kappa(t,l)\) transform discussed in Section 4.1 in Figure 8. The left figure shows \((t,l)\) samples uniformly sampled from the original coordinate. According to Section 3.1, \((t,l)\) samples can only appear in the lower-triangular plane. After the \(\kappa(t,l)\) transform, the corresponding samples are plotted in the transformed coordinate. Samples with small \(l\) in the original coordinate becomes more separated in the new coordinate, which encourage the model to capture local details in short subsequences. Samples with large \(l\) becomes more concentrated and are less sensitive to their \(t\) value since they are likely to capture redundant information.

Figure 8: Visualization of transformation \(\kappa(t,l)\).

Figure 7: t-SNE plot of the codes.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: We claimed in the abstract and introduction that we propose a generalizable and interpretable representation for TS data, as well as a pre-trained model VQShape to extract the representations. We detailed the formulation and training procedure of VQShape, and validate with experiments on classification tasks that the model and its representations are indeed interpretable and generalizable. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: We briefly discuss limitations in Section 5 and have present additional limitations in Section 6. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs**Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [NA] Justification: This paper does not contain theoretical result that requires proof. But we demonstrate the effectiveness of our formulations using experiment results. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: We detailed the formulations and training objective of the model, as well as the experiment setups. These information is sufficient to reproduce our results without code. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.

5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: We open-source our implementations and pre-trained checkpoints. All the datasets used in this paper are publicly available. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: We include detailed information about model architecture and hyperparamers in Section 4.1. Details on experiment setups are provided in the Appendix. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: We report the standard deviation of classification accuracy in Table 7 and Table 8. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.

* The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).
* The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)
* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: We include detailed software and hardware environment in Appendix A. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: Experiments in this paper is conducted only using publicly available datasets, without involving any human subjects. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [Yes] Justification: This paper focuses on the development of interpretable models for time-series data, which could potentially improve the transparency of deep leanring methdos. Guidelines: * The answer NA means that there is no societal impact of the work performed.

* If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.
* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: This paper does not contains data or models that have a high risk of misuse. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: All the datasets used in this paper are publicly available and properly cited. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.

* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [Yes] Justification: This paper introduce a new model and its implementation, which is documented and provided in the supplementary materials. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: This paper does not involve any human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: This paper does not involve any experiment that requires IRB approval or equivalent. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.