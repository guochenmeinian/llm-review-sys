# EFO\({}_{k}\)-CQA: Towards Knowledge Graph

Complex Query Answering beyond Set Operation

Anonymous Author(s)

Affiliation

Address

email

###### Abstract

To answer complex queries on knowledge graphs, logical reasoning over incomplete knowledge needs learning-based methods because they are capable of generalizing over unobserved knowledge. Therefore, an appropriate dataset is fundamental to both obtaining and evaluating such methods under this paradigm. In this paper, we propose a comprehensive framework for data generation, model training, and method evaluation that covers the combinatorial space of Existential First-order Queries with multiple variables (EFO\({}_{k}\)). The combinatorial query space in our framework significantly extends those defined by set operations in the existing literature. Additionally, we construct a dataset, EFO\({}_{k}\)-CQA, with 741 query types for empirical evaluation, and our benchmark results provide new insights into how query hardness affects the results. Furthermore, we demonstrate that the existing dataset construction process is systematically biased and hinders the appropriate development of query-answering methods, highlighting the importance of our work. Our code and data are provided in https://anonymous.4open.science/r/EFOK-CQA/README.md

## 1 Introduction

The Knowledge Graph (KG) is a powerful database that encodes relational knowledge into a graph representation [34; 31], supporting downstream tasks [41; 8] with essential factual knowledge. However, KGs suffer from incompleteness during its construction [34; 7; 19]. The task of Complex Query Answering (CQA) proposed recently has attracted much research interest [13; 28]. This task ambitiously aims to answer database-level complex queries described by logical complex connectives (conjunction \(\wedge\), disjunction \(\vee\), and negation \(\neg\)) and quantifiers1 (existential \(\exists\)) [37; 27; 18]. Currently, learning-based methods dominate the CQA tasks because they can empirically generalize to unseen knowledge as well as prevent the resource-demanding symbolic search.

Footnote 1: The universal quantifier is usually not considered in query answering tasks, as a common practice from both CQA on KG [37; 27] and database query answering [25].

The thriving of learning-based methods also puts an urgent request on high-quality benchmarks, including datasets with comprehensive coverage of queries and sound answers, and fair evaluation protocol for learning-based approaches. In the previous study, datasets are developed by progressively expanding the **syntactical expressiveness**, where conjunction [13], union [26], negation [28], and other operators [20] are taken into account sequentially. In particular, BetaE dataset [28] contains all logical connectives and becomes the standard training set for model development. A largerevaluation benchmark EFO-1-QA [36] was proposed to systematically evaluate the combinatorial generalizability of CQA models on such queries. More related works are included in Appendix A.

However, the queries in previous datasets [28; 36] are recently justified as "Tree-Form" queries [39] as they rely on the tree combinations of set operations. Compared to the well-established TPC-H decision support benchmark [25] for database query processing, queries in existing CQA benchmarks [28; 36] have two common shortcomings: (1) lack of **combinatorial answers**: only one variable is queried, and (2) lack of **structural hardness**: all existing queries subject to the structure-based tractability [29; 39]. It is rather questionable whether existing CQA data under such limited scope can support the future development of methodologies for general decision support with incomplete knowledge.

The goal of this paper is to establish a new framework that addresses the aforementioned shortcomings to support further research in complex query answering on knowledge graphs. Our framework is formally motivated by the well-established investigation of constraint satisfaction problems [29], in which all queries can be formulated. In general, the contribution of our work is four folds.

**Complete coverage**: We capture the complete Existential First Order (EFO) queries from their rigorous definitions, underscoring both **combinatorial hardness** and **structural hardness** and extending the existing coverage [36] which covers only a subset of \(\text{EFO}_{1}\) query. The captured query family is denoted as \(\text{EFO}_{k}\) where \(k\) stands for multiple variables.
**Curated datasets**: We derive \(\text{EFO}_{k}\)-CQA dataset, a enormous extension of the previous EFO-1-QA benchmark [36] and contains 741 types of query. We design several systematic rules to guarantee that our dataset includes high-quality nontrivial queries, particularly those that contain multiple query variables and are not structure-based tractable.
**Convenient implementation**: We implement the entire pipeline for query generation, answer sampling, model training and inference, and evaluation for the undiscussed scenarios of **combinatorial answers**. Our pipeline is backward compatible, which supports both set operation-based methods and more recent ones.
**Results and findings**: We evaluate six representative CQA methods on our benchmark. Our results refresh the previous empirical findings and further reveal the structural bias of previous data.

## 2 Problem definition

### Existential first order (EFO) queries on knowledge graphs

Given a set \(\mathcal{E}\) of entities and a set \(\mathcal{R}\) of relations, a knowledge graph \(\mathcal{KG}\) encodes knowledge as a set of factual triple \(\mathcal{KG}=\{(h,r,t)\}\subset\mathcal{E}\times\mathcal{R}\times\mathcal{E}\). We always assume the KG that we have observed \(\mathcal{KG}_{o}\) is only part of the real KG, meaning that \(\mathcal{KG}_{o}\subset\mathcal{KG}\).

The existing research only focuses on the logical formulas without universal quantifiers [27; 35]. We then offer the definition of it based on strict first order logic.

**Definition 1** (Term).: _A term is either a variable \(x\) or an entity \(a\in\mathcal{E}\)._

**Definition 2** (Atomic formula).: \(\phi\) _is an atomic formula if \(\phi=r(h,t)\), where \(r\in\mathcal{R}\) is a relation, \(h\) and \(t\) are two terms._

**Definition 3** (Existential first order formula).: _The set of the existential formulas is the smallest set \(\Phi\) that satisfies the following2:_

Footnote 2: We always assume all variables are named differently as common practice in logic.

1. _For atomic formula_ \(r(h,t)\)_, itself and its negation_ \(r(h,t),\neg r(h,t)\in\Phi\)__
2. _If_ \(\phi,\psi\in\Phi\)_, then_ \((\phi\land\psi),(\phi\lor\psi)\in\Phi\)__
3. _If_ \(\phi\in\Phi\) _and_ \(x_{i}\) _is any variable, then_ \(\exists x_{i}\phi\in\Phi\)_._

**Definition 4** (Free variable).: _If a variable \(y\) is not associated with an existential quantifier, it is called a free variable, otherwise, it is called a bounded variable. We write \(\phi(y_{1},\cdots,y_{k})\) to indicate \(y_{1},\cdots,y_{k}\) are the free variables of \(\phi\)._

**Definition 5** (Sentence and query).: _A formula \(\phi\) is a sentence if it contains no free variables, otherwise, it is called a query. In this paper, we always consider formula with free variables, thus, we use formula and query interchangeably._

**Definition 6** (Substitution).: _For \(a_{1},\cdots,a_{k}\), where \(a_{i}\in\mathcal{E}\), we write \(\phi(a_{1}/y_{1},\cdots,a_{k}/y_{k})\) or simply \(\phi(a_{1},\cdots,a_{k})\) for the result of simultaneously replacing all the occurrence of \(y_{i}\) in \(\phi\) by \(a_{i}\), \(i=1,\cdots,k\)._

**Definition 7** (Answer of an EFO query).: _For a given existential query \(\phi(y_{1},\cdots,y_{k})\) and a knowledge graph \(\mathcal{KG}\), its answer is a set that defined by_

\[\mathcal{A}[\phi(y_{1},\cdots,y_{k})]=\{(a_{1},\cdots,a_{k}))|a_{i}\in \mathcal{E},i=1,\cdots,k,\,\phi(a_{1},\cdots,a_{k})\text{ is True in }\mathcal{KG}\}.\]

**Definition 8** (Disjunctive Normal Form (DNF)).: _For any existential formula \(\phi(y_{1},\cdots,y_{k})\), it can be converted to the Disjunctive normal form as shown below:_

\[\phi(y_{1},\cdots,y_{k}) =\gamma_{1}(y_{1},\cdots,y_{k})\vee\cdots\vee\gamma_{m}(y_{1}, \cdots,y_{k}),\] (1) \[\gamma_{i}(y_{1},\cdots,y_{k}) =\exists x_{1},\cdots,x_{n}.\rho_{i1}\wedge\cdots\wedge\rho_{it},\] (2)

where \(\rho_{ij}\) is either an atomic formula or its negation, \(x_{i}\) is called an existential variable.

DNF form has a strong property that \(\mathcal{A}[\phi(y_{1},\cdots,y_{k})]=\cup_{i=1}^{m}\mathcal{A}[\gamma_{i}(y_ {1},\cdots,y_{k})]\), which allows us to only consider conjunctive formulas \(\gamma_{i}\) and then aggregate those answers to retrieve the final answers. This practical technique has been used in many previous research [22, 27]. Therefore, we only discuss conjunctive formulas in the rest of this paper.

### Constraint satisfaction problem for EFO queries

Formally, a Constraint Satisfaction Problem (CSP) \(\mathcal{P}\) can be represented by a triple \(\mathcal{P}=(X,D,C)\) where \(X=(v_{1},\cdots,v_{n})\) is an \(n\)-tuple of variables, \(D=(D_{1},\cdots,D_{n})\) is the corresponding \(n\)-tuple of domains, \(C=(C_{1},\cdots,C_{t})\) is \(t\)-tuple constraint, each constraint \(C_{i}\) is a pair of \((S_{i},R_{S_{i}})\) where \(S_{i}\) is a set of variables \(S_{i}=\{v_{i_{j}}\}\) and \(R_{S_{i}}\) is the constraint over those variables [29].

Historically, there are strong parallels between CSP and conjunctive queries in knowledge bases [10, 17]. The terms correspond to the variable set \(X\). The domain \(D_{i}\) of a constant entity contains only itself, while it is the whole entity set \(\mathcal{E}\) for other variables. Each constraint \(C_{i}\) is binary that is induced by an atomic formula or its negation, for example, for an atomic formula \(r(h,t)\), we have \(S_{i}=\{h,t\}\), \(R_{S_{i}}=\{(h,t)|h,t\in\mathcal{E},(h,r,t)\in\mathcal{KG}\}\). Finally, by the definition of existential quantifier, we only consider the answer of free variables, rather than tracking all terms within the existential formulas.

**Definition 9** (CSP answer of conjunctive formula).: _For a conjunctive formula \(\gamma\) in Equation 2 with \(k\) free variables and \(n\) existential variables, the answer set, \(\overline{A}\), of it formulated as CSP instance is:_

\[\overline{\mathcal{A}}[\gamma(y_{1},\cdots,y_{k})]=\mathcal{A}[\gamma^{ \star}(y_{1},\cdots,y_{n+k})],\text{ where }\gamma^{\star}=\rho_{i1}\wedge\cdots\wedge\rho_{it}.\]

This shows that the inference of existential formulas is easier than solving CSP instances since the existential variables do not need to be kept track of.

Figure 1: Operator Tree versus Query Graph. **Left**: An operator tree representing a given query “List the presidents of European countries that have never held the Olympics” [28]; **Right**: A query graph representing a given query “Find a pair of persons who are both colleagues and co-authors and were born in the same country, with one having awarded the fields medal while the another not”, which is both a multigraph and a cyclic graph, containing two free variables.

### The representation of query

To give an explicit representation of existential formula, operator tree [13] was proposed to represent a formula, where each node represents the answer set for a sub-query, and the logic operators in it naturally represent set operations. This method allows for the recursive computation from constant entity to the final answer set in a bottom-up manner [28]. We also provide full details of the operator tree and tree-form query in Appendix C. However, this representation method is inherently directed, acyclic, and simple, therefore more recent research breaks these constraints by being bidirectional [21; 37] or being cyclic or multi graph [39]. To meet these new requirements, they propose to represent the formula by the query graph [39], which inherits the convention of constraint network in representing CSP instance. We utilize this design and further extend it to represent EFO\({}_{k}\) formula that contains multiple free variables. We provide the illustration and comparison of the operator tree and the query graph in Figure 1, where we show the strong expressiveness of the query graph. We also provide the formal definition of query graph as follows:

**Definition 10** (Query graph).: _Let \(\gamma\) be a conjunctive formula in equation 2, its query graph is defined by \(G(\gamma)=\{(h,r,t,\textit{(T/F})\})\), where an atomic formula \(r(h,t)\) in \(\gamma\) corresponds to \((h,r,t,\textit{T})\) and \(\neg r(h,t)\) corresponds to \((h,r,t,\textit{F})\)._

Therefore, any conjunctive formulas can be represented by a query graph, in the rest of the paper, we use query graphs and conjunctive formulas interchangeably.

## 3 The combinatorial space of EFO\({}_{k}\) queries

Although previous research has given a systematic investigation in the combinatorial space of operator trees [36], the combinatorial space of the query graph is much more challenging due to the extremely large search space and the lack of explicit recursive formulation. To tackle this issue on a strong theoretical background, we put forward additional assumptions to exclude trivial query graphs. Such assumptions or restrictions also exist in the previous dataset and benchmark [28; 36]. Specifically, we propose to split the task of generating data into two levels, the abstract level, and the grounded level. At the abstract level, we create _abstract query graph_, at the grounded level, we provide the abstract query graph with the relation and constant and instantiate it as a query graph. In this section, we elaborate on how we investigate the scope of the nontrivial EFO\({}_{k}\) query of interest step by step.

### Nontrivial abstract query graph of EFO\({}_{k}\)

The abstract query graph is the ungrounded query graph without information of certain knowledge graphs, and we give an example in Figure 3.

**Definition 11** (Abstract query graph).: _The abstract query graph \(\mathcal{G}=(V,E,f,g)\) is a directed graph with three node types,\(\{\)**Constant Entity, Existential Variable, Free Variable\(\}\)**, and two edge types,\(\{\)**positive, negative\(\}\)**. The \(V\) is the set of nodes, \(E\) is the set of directed edges, \(f\) is the function maps node to node type, \(g\) is the function maps edge to edge type._

**Definition 12** (Grounding).: _For an abstract query graph \(\mathcal{G}\), a grounding is a function \(I\) that maps it into a query graph \(G=I(\mathcal{G})\)._

Figure 2: Left: Example of trivial abstract query graph, in the upper left graph, the \(x_{1}\) is redundant violating Assumption 13, in the bottom left graph, answers for the whole query can be decomposed to answer two free variables \(y_{1}\) and \(y_{2}\) alone, violating Assumption 14. Right: Example of new query graph that is not included in previous benchmark [36] even though it can be represented by operator-tree. The representation of query graph follows Figure 1.

We propose two assumptions of the abstract query graph as follows:

**Assumption 13** (No redundancy).: _For an abstract query graph \(\mathcal{G}\), there is not a subgraph \(\mathcal{G}_{s}\subseteq\mathcal{G}\) such that for every grounding \(I\), \(\mathcal{A}[I(\mathcal{G})]=\mathcal{A}[I(\mathcal{G}_{s})]\)._

**Assumption 14** (No decomposition).: _For an abstract query graph \(\mathcal{G}\), there are no such two subgraphs \(\mathcal{G}_{1}\), \(\mathcal{G}_{2}\), satisfying that \(\mathcal{G}_{1},\mathcal{G}_{2}\subseteq\mathcal{G}\), such that for every instantiation \(I\), \(\mathcal{A}[I(\mathcal{G})]=\mathcal{A}[I(\mathcal{G}_{1})]\times\mathcal{A}[I (\mathcal{G}_{2})]\), where the \(\times\) represents the cartesian product._

The assumption 14 inherits the idea of the **structural** decomposition technique in CSP [11], which allows for solving a CSP instance by solving several sub-problems and combining the answer together based on topology property. Additionally, meeting these two assumptions in the grounded query graph is extremely computationally costly thus we avoid it in practice.

We provide some easy examples to be excluded for violating the assumptions above in Figure 2.

### Nontrivial query graph of \(\text{EFO}_{k}\)

Similarly, we propose two assumptions on the query graph.

**Assumption 15** (Meaningful negation).: _For any negative edge \(e\) in query graph \(G\), we require removing it results in different CSP answers: \(\overline{\mathcal{A}}[G-e]\neq\overline{\mathcal{A}}[G]\).3_

Footnote 3: Ideally, we should expect them to have different answers as the existential formulas, however, this is computation costly and difficult to sample in practice, which is further discussed in Appendix D.

Assumption 15 treats negation separately because of the fact that for any \(\mathcal{KG}\), any relation \(r\in\mathcal{R}\), there is \(|\{(h,t)|h,t\in\mathcal{E},(h,r,t)\in\mathcal{KG}\}|\ll|\mathcal{E}|^{2}\), which means that the constraint induced by the negation of an atomic formula is much less "strict" than the one induced by a positive atomic formula.

**Assumption 16** (Appropriate answer size).: _There is a constant \(M\ll|\mathcal{E}|\) to bound the candidate set for each free variable \(y_{i}\) in \(G\), such that for any \(i\), \(|\{a_{i}\in\mathcal{E}|(a_{1},\cdots,a_{i},\cdots,a_{k})\in\mathcal{A}[G]\}|\leq M\)._

We note the Assumption 16 **extends** the "bounded negation" assumption in the previous dataset [28; 36]. We give an example "Find a city that is located in Europe and is the capital of a country that has not held the Olympics" in Figure 2, where the candidate set of \(x_{1}\) is in fact bounded by its relation with the \(y_{1}\) variable but not from the bottom "Olympics" constant, hence, this query is excluded in their dataset due to the directionality of operator tree.

Overall, the scope of the formula investigated in this paper surpasses the previous EFO-1-QA benchmark because of: (1). We include the \(\text{EFO}_{k}\) formula with multiple free variables for the first time; (2). We include the whole family of \(\text{EFO}_{1}\) query, many of them can not be represented by operator tree; (3) Our assumption is more systematic than previous ones as shown by the example in Figure 2. More details are offered in Appendix D.3.

## 4 Framework

We develop a versatile framework that supports five key functionalities fundamental to the whole CQA task: (1) Enumeration of nontrivial abstract query graphs as discussed in Section 3; (2) Sample grounding for the abstract query graph; (3) Compute answer for any query graph efficiently; (4) Support implementation of existing CQA models; (5) Conduct evaluation including newly introduced \(\text{EFO}_{k}\) queries with multiple free variables. We explain each functionality in the following. An illustration of the first three functionalities is given in Figure 3, where we show how each functionality cooperates to help CQA tasks. We note that preprocessing allows us to extend our framework to more avant-garde settings, like inductive settings or graphs with numerics, more discussions in Appendix G.

### Enumerate abstract query graph

As discussed in Section 3, we are able to abide by those assumptions as well as **enumerate** all possible query graphs within a given search space where certain parameters, including the number 

### Ground abstract query graph

To ground an abstract query graph \(\mathcal{G}\) and comply with the assumption 15, we split the abstract query graph into two parts, the positive part and the negative part, \(\mathcal{G}=\mathcal{G}_{p}\cup\mathcal{G}_{n}\). Then the grounding process is also split into two steps: 1. Sample grounding for the positive subgraph \(\mathcal{G}_{p}\) and compute its answer, 2. Ground the \(\mathcal{G}_{n}\) to decrease the answer got in the first step. Details in Appendix D.2.

Finally, to fulfill the assumption 16, we follow the previous practice of manually filtering out queries that have more than \(100\times k\) answers [28; 36], as we have introduced the \(\text{EFO}_{k}\) queries.

### Answer for existential formula

As illustrated in Section 2.2, the answer to an existential formula can be solved by a CSP solver, however, we also show in Definition 9 that solve it as CSP leads to huge computation costs. Thus, we develop our own algorithm following the standard solving technique of CSP, which ensures consistency conditions in the first step, and do the backtracking to get the final answers in the second step. Finally, we select part of our sampled queries and double-check it with the CSP solver https://github.com/python-constraint/python-constraint.

### Learning-based methods

As the query graph is an extension to the operator tree regarding the express ability to existential formulas, we are able to reproduce CQA models that are initially implemented by the operator tree in our new framework. Specifically, since the operator tree is directed and acyclic, we compute its topology ordering that allows for step-by-step computation in the query graph. This algorithm is illustrated in detail in the Appendix F. Therefore, our pipeline is backward compatible.

Conversely, for the newly proposed models that are based on query graphs, the original operator tree framework is not able to implement them, while our framework is powerful enough. We have therefore clearly shown that the query graph representation is more powerful than the previous operator tree and is able to support arbitrary existential formulas as explained in Section 2.3.

### Evaluation protocol

As we have mentioned in Section 2.1, there is an observed knowledge graph \(\mathcal{KG}_{o}\) and a full knowledge graph \(\mathcal{KG}\). Thus, there is a set of observed answers \(\mathcal{A}_{o}\) and a set of full answers \(\mathcal{A}\) correspondingly. Since the goal of CQA is to tackle the challenge of incompleteness, it has been a common practice to

Figure 3: Illustration of the all functionalities of our framework. Real-world KG is preprocessed and fed into our pipeline, which contains the whole process of data generation and supports end-to-end machine learning as well as evaluation. The origin of the KG picture is in Appendix I.

evaluate CQA models by the "hard" answers \(\mathcal{A}_{h}=\mathcal{A}-\mathcal{A}_{o}\)[26, 27]. However, to the best of our knowledge, there has not been a systematic evaluation protocol for EFO\({}_{k}\) queries, thus we leverage this idea and propose three types of different metrics to fill the research gap in the area of evaluation of queries with multiple free variables, and thus have combinatorial answers.

**Marginal.** For any free variable \(y_{i}\), its full answer is \(\mathcal{A}^{y_{i}}=\{a_{i}\in\mathcal{E}|(a_{1},\cdots,a_{i},\cdots,a_{k}) \in\mathcal{A}\}\), the observed answer of it \(\mathcal{A}^{y_{i}}_{o}\) is defined similarly. This is termed "solution projection" in CSP theory [12] to evaluate whether the locally retrieved answer can be extended to an answer for the whole problem. Then, we rank the hard answer \(\mathcal{A}^{y_{i}}_{h}=\mathcal{A}^{y_{i}}-\mathcal{A}^{y_{i}4}_{o}\), against those non-answers \(\mathcal{E}-\mathcal{A}^{y_{i}}-\mathcal{A}^{y_{i}}_{o}\) and use the ranking to compute standard metrics like MRR, HIT@K for every free variable. Finally, the metric on the whole query graph is taken as the average of the metric on all free variables. We note that this metric is an extension of the previous design [20]. However, this metric has the inherent drawback that it fails to evaluate the combinatorial answer by the \(k\)-length tuple and thus fails to find the correspondence among free variables.

**Multiply.** Because of the limitation of the marginal metric discussed above, we propose to evaluate the combinatorial answer by each \(k\)-length tuple \((a_{1},\cdots,a_{k})\) in the hard answer set \(\mathcal{A}_{h}\). Specifically, we rank each \(a_{i}\) in the corresponding node \(y_{i}\) the same as the marginal metric. Then, we propose the HIT@\(n^{k}\) metric, it is 1 if all \(a_{i}\) is ranked in the top \(n\) in the corresponding node \(y_{i}\), and 0 otherwise.

**Joint.** Finally, we note these metrics above are not the standard way of evaluation, which is based on a joint ranking for all the \(\mathcal{E}^{k}\) combinations of the entire search space. We propose to estimate the joint ranking in a closed form given certain assumptions, see Appendix E for the proof and details.

## 5 The EFO\({}_{k}\)-CQA dataset and benchmark results

### The EFO\({}_{k}\)-CQA dataset

With the help of our framework developed in Section 4, we develop a new dataset called EFO\({}_{k}\)-CQA, whose combinatorial space is parameterized by the number of constants, existential and free variables, and the number of edges. EFO\({}_{k}\)-CQA dataset includes 741 different abstract query graphs in total.

\begin{table}
\begin{tabular}{c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & \multirow{2}{*}{\(c\)} & \multirow{2}{*}{\(c\)} & \multirow{2}{*}{0} & \multirow{2}{*}{1} & \multicolumn{3}{c}{2} & \multirow{2}{*}{AVG.(c)} & \multirow{2}{*}{AVG.} \\ \cline{4-9} \cline{8-9}  & & & SDAG & & & & & & \\ \hline \multirow{4}{*}{BetaE} & 1 & 31.4 & 33.0 & 22.3 & 21.1 & 17.7 & 30.7 & 22.1 & \\  & 3 & 2 & 57.2 & 36.2 & 35.5 & 29.3 & 29.4 & 45.3 & 32.5 & \\  & 3 & 80.0 & 53.1 & 55.6 & 38.2 & 37.8 & 58.2 & 42.1 & 36.4 \\ \cline{2-9}  & AVG(c) & 93.9 & 43.8 & 40.6 & 33.8 & 32.7 & 49.3 & & \\ \hline \multirow{4}{*}{LogicE} & 1 & 34.4 & 34.9 & 23.0 & 21.4 & 17.4 & 30.3 & 22.4 & \\  & 2 & 60.0 & 38.4 & 36.8 & 29.8 & 29.3 & 45.3 & 33.0 & 36.7 \\  & 3 & 83.0 & 55.5 & 55.5 & 38.5 & 37.8 & 57.8 & 42.4 & \\ \cline{2-9}  & AVG(c) & 62.2 & 46.0 & 42.0 & 34.2 & 32.6 & 49.1 & & \\ \hline \multirow{4}{*}{ConE} & 1 & 34.9 & 35.4 & 23.6 & 21.8 & 18.4 & 34.2 & 23.5 & \\  & 2 & 61.0 & 39.1 & 38.4 & 32.0 & 31.5 & 50.2 & 35.2 & \\  & 3 & 84.8 & 56.7 & 57.1 & 41.1 & 40.0 & 63.4 & 44.9 & 39.0 \\ \cline{2-9}  & AVG(c) & 63.4 & 47.0 & 43.5 & 36.5 & 34.7 & 54.1 & & \\ \hline \multirow{4}{*}{COD} & 1 & **39.0** & 34.2 & 17.6 & 17.4 & 12.7 & 28.7 & 18.7 & \\  & 2 & 50.7 & 33.8 & 33.6 & 28.4 & 28.4 & 45.7 & 31.4 & 35.9 \\  & 3 & 58.4 & 49.6 & 52.4 & 39.3 & 39.1 & 60.4 & 42.6 & 35.9 \\ \cline{2-9}  & AVG(c) & 50.7 & 41.4 & 38.4 & 33.8 & 32.4 & 50.2 & & \\ \hline \multirow{4}{*}{LMPNN} & 1 & 38.6 & 37.8 & 21.8 & 22.9 & 17.8 & 31.7 & 23.2 & \\  & 2 & 62.2 & 40.2 & 35.0 & 30.8 & 28.1 & 44.4 & 32.5 & \\  & 3 & 86.6 & 36.9 & 51.9 & 38.3 & 35.3 & 55.8 & 40.8 & 35.8 \\ \cline{2-9}  & AVG(c) & 65.4 & 47.8 & 39.6 & 34.5 & 30.8 & 48.0 & & \\ \hline \multirow{4}{*}{FIT} & 1 & 38.7 & **42.7** & **32.5** & **26.1** & **22.5** & **41.5** & **28.8** & \\  & 2 & **65.5** & **47.7** & **48.2** & **39.7** & **40.1** & **56.5** & **43.4** & **47.0** \\ \cline{1-1}  & 3 & **84.2** & **43.9** & **43.5** & **50.5** & **50.4** & **63.5** & **53.6** & **47.0** \\ \cline{1-1} \cline{2-9}  & AVG(c) & **65.8** & **54.7** & **51.5** & **44.9** & **43.7** & **57.5** & & \\ \hline \hline \end{tabular}
\end{table}
Table 1: HIT@10 scores(%) for inferring queries with one free variable on FB15k-237. We denote \(e\), \(c\) as the number of existential variables, constant entities correspondingly. SDAG represents Simple Directed Acyclic Graph, Multi for multigraph, and Cyclic for cyclic graph. AVG.(\(c\)) and AVG.(\(e\)) is the average score of queries with the number of constant entities / existential variables fixed.

The parameters and the generation process, as well as its statistics, are detailed in Appendix D.4, where we also provide a dataset constructed in inductive settings. However, we mainly focus on transductive settings in the main paper since there are very few inductive models to benchmark.

We have made some adaptations to the implementation of CQA models, allowing them to infer \(\text{EFO}_{k}\) queries, full detail in Appendix F. The experiment is conducted on a standard KG FB15k-237 [32], additional experiments on other standard KGs FB15k and NELL are presented in Appendix H.

### Benchmark results for \(k=1\)

Because of the great number of abstract query graphs, we follow previous work [36] to group query graphs by three factors: (1). the number of constant entities; (2). the number of existential variables, and (3). the topology of the query graph5. The result is shown in Table 1 and Figure 4.

Footnote 5: To facilitate our discussion, we make a further constraint in our \(\text{EFO}_{k}\)-CQA dataset that the total edge is at most as many as the number of nodes, thus, a graph can not be both a multigraph and a cyclic graph.

**Structure analysis.** Firstly, we find a clear monotonic trend that adding constant entities makes a query easier while adding existing variables makes a query harder, which the previous research [36] fails to uncover. Besides, we are the first to consider the topology of query graphs: when the number of constants and existential variables is fixed, we have found the originally investigated queries that correspond to Simple Directed Acyclic Graphs (SDAG) are generally easier than the multigraphs ones but harder than the cyclic graph ones. This is an intriguing result that greatly deviates from traditional CSP theory which finds that the cyclic graph is NP-complete, while the acyclic graph is tractable [6]. We conjecture that the cyclic graph contains one more constraint than SDAG that serves as a source of information for CQA models, while the multigraph tightens an existing constraint and thus makes the query harder.

**Model analysis.** For models that are built on operator tree, including BetaE, LogicE, and ConE, their relative performance is steady among all breakdowns and is consistent with their reported score in the original dataset [28].However, for models that are built on query graphs, including CQD, LMPNN, and FIT, we found that LMPNN performs generally better than CQD in SDAG, but falls behind CQD in multigraphs and cyclic graphs. We assume the reason is that LMPNN requires training while CQD does not, however, the original dataset are **biased** which only considers SDAG, leading to the result

Figure 4: Relative performance of the six representative CQA models in queries with one free variable, where the ranking of query types is determined by the average HIT@10 score. A Gaussian filter with sigma=1 is added to smooth the curve.

that LMPNN doesn't generalize well to the unseen tasks with different topology property. We expect future CQA models may use our framework to address this issue and gain better generalization.

Moreover, by the detailed observation in Figure 4, we plot two boxes. In the red box, we find that even the worst model and the best model have pretty similar performance in these easiest queries despite that they may differ greatly in other queries. In the black box, we note that CQD [2], though designed in a rather general form, is pretty unstable when comes to empirical evaluation, as it has a clear downward curve and deviates from other model's performance enormously in most difficult query types. Therefore, though its performance is better than LMPNN on average as reported in Table 1, its unsteady performance suggests its inherent weakness, especially when the users are risk-sensitive and desire a trustworthy machine-learning model that does not crash in extreme cases [33].

We note FIT is designed to infer all EFO\({}_{1}\) queries and is indeed able to outperform other models in almost all breakdowns, however, its performance comes with the price of computational cost, and face challenges in cyclic graph where it degenerates to enumeration: we further explain in Appendix F.

### Benchmark results for \(k=2\)

As we have explained in Section 4.5, we propose three kinds of metrics, marginal ones, multiply ones, and joint ones, from easy to hard, to evaluate the performance of a model in the scenario of multiple variables. The evaluation result is shown in Table 2. As the effect of the number of constant variables is quite clear, we remove it and add the metrics based on HIT\(@10\) as the new factor.

For the impact regarding the number of existential variables and the topology property of the query graph, we find the result is similar to Table 1, which may be explained by the fact that those models are all initially designed to infer queries with one free variable. For the three metrics we have proposed, we have identified a clear difficulty difference among them though they generally show similar trends. The scores of joint HIT@10 are pretty low, indicating the great hardness of answering queries with multiple variables. Moreover, we have found that FIT falls behind other models in some breakdowns which are mostly cyclic graphs, corroborating our discussion in Section 5.2. We offer more experiment results and further discussion in Appendix H.

## 6 Conclusion

In this paper, we make a thorough investigation of the family of EFO\({}_{k}\) formulas based on a strong theoretical background. We then present a new powerful framework that supports several functionalities essential to CQA task, and build the EFO\({}_{k}\)-CQA dataset that greatly extends the previous datasets. Our evaluation result brings new empirical findings and reflects the biased selection in the previous dataset impairs the performance of CQA models, emphasizing the contribution of our work.

\begin{table}
\begin{tabular}{c c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & HIT@10 & \(e=0\) & \multicolumn{4}{c}{\(e=1\)} & \multicolumn{4}{c}{\(e=2\)} & \multirow{2}{*}{AVG.} \\  & Type & & SDMG & Multi & SDMG & Multi & Cyclic & SDMG & Multi & Cyclic & \\ \hline \multirow{3}{*}{RetEl} & Marginal & 54.5 & 50.2 & 49.5 & 46.0 & 58.8 & 37.2 & 35.5 & 58.3 & 43.8 \\  & Multi & 27.3 & 22.4 & 22.3 & 16.9 & 26.2 & 16.9 & 13.9 & 25.7 & 18.3 \\  & Joint & 6.3 & 5.4 & 5.2 & 4.2 & 10.8 & 2.2 & 2.3 & 9.5 & 4.5 \\ \hline \multirow{3}{*}{LogileE} & Marginal & 58.2 & 50.9 & 52.2 & 47.4 & 60.4 & 37.7 & 35.8 & 59.2 & 44.6 \\  & Multiply & 32.1 & 23.1 & 24.9 & 18.1 & 28.3 & 18.1 & 14.8 & 26.6 & 19.5 \\  & Joint & 6.8 & 6.0 & 6.1 & 4.5 & 12.3 & 2.5 & 2.7 & 10.3 & 5.1 \\ \hline \multirow{3}{*}{CoE} & Marginal & 60.3 & 53.8 & 54.2 & 50.3 & **66.2** & 40.1 & 38.5 & **63.7** & 47.7 \\  & Multiply & 33.7 & 25.2 & 26.1 & 19.8 & 32.1 & 19.5 & 16.3 & 30.3 & 21.5 \\  & Joint & 6.7 & 6.4 & 6.2 & 4.8 & 12.6 & 2.6 & 2.7 & 10.9 & 5.3 \\ \hline \multirow{3}{*}{COO} & Marginal & 50.4 & 46.5 & 49.1 & 45.6 & 59.7 & 33.5 & 33.1 & 61.5 & 42.8 \\  & Multiply & 28.9 & 23.4 & 25.4 & 19.5 & 31.3 & 17.8 & 16.0 & 30.5 & 21.0 \\  & Joint & **8.0** & 8.0 & 7.4 & 6.0 & **13.9** & 36.0 & 39.8 & **12.0** & **6.4** \\ \hline \multirow{3}{*}{LMPNN} & Marginal & 58.4 & 51.1 & 54.9 & 49.2 & 64.7 & 39.6 & 36.1 & 58.7 & 45.4 \\  & Multiply & 35.0 & 26.7 & 29.2 & 21.7 & **33.4** & 21.4 & 17.0 & 28.4 & 22.2 \\  & Joint & 7.6 & 7.5 & 7.1 & 5.3 & 12.9 & 2.8 & 2.9 & 9.5 & 5.2 \\ \hline \multirow{3}{*}{FIT} & Marginal & **64.3** & **61.0** & **63.1** & **60.7** & 58.5 & **49.0** & **49.1** & 60.2 & **54.3** \\  & Multiply & **39.7** & **32.2** & **35.9** & **27.8** & 27.4 & **29.5** & **26.8** & **32.4** & **29.2** \\ \cline{1-1}  & Joint & 7.4 & **9.0** & **7.8** & **6.5** & 10.1 & **3.7** & **4.6** & 10.6 & **6.4** \\ \hline \hline \end{tabular}
\end{table}
Table 2: HIT@10 scores(%) of three different types for answering queries with two free variables on FB15k-237. The constant number is fixed to be two. \(e\) is the number of existential variables. The SDAG, Multi, and Cyclic are the same as Table 1.

## References

* Alivanistos et al. [2022] Dimitrios Alivanistos, Max Berrendorf, Michael Cochez, and Mikhail Galkin. Query Embedding on Hyper-relational Knowledge Graphs, September 2022. arXiv:2106.08166 [cs].
* Arakelyan et al. [2020] Erik Arakelyan, Daniel Daza, Pasquale Minervini, and Michael Cochez. Complex Query Answering with Neural Link Predictors. In _International Conference on Learning Representations_, 2020.
* Bai et al. [2022] Jiaxin Bai, Zihao Wang, Hongming Zhang, and Yangqiu Song. Query2Particles: Knowledge Graph Reasoning with Particle Embeddings. In _Findings of the Association for Computational Linguistics: NAACL 2022_, pages 2703-2714, 2022.
* Bai et al. [2023] Yushi Bai, Xin Lv, Juanzi Li, and Lei Hou. Answering Complex Logical Queries on Knowledge Graphs via Query Computation Tree Optimization. In _Proceedings of the 40th International Conference on Machine Learning_, pages 1472-1491. PMLR, July 2023. ISSN: 2640-3498.
* Bordes et al. [2013] Antoine Bordes, Nicolas Usunier, Alberto Garcia-Duran, Jason Weston, and Oksana Yakhnenko. Translating Embeddings for Modeling Multi-relational Data. In _Advances in Neural Information Processing Systems_, volume 26. Curran Associates, Inc., 2013.
* Carbonnel and Cooper [2016] Clement Carbonnel and Martin C Cooper. Tractability in constraint satisfaction problems: a survey. _Constraints_, 21(2):115-144, 2016. Publisher: Springer.
* Carlson et al. [2010] Andrew Carlson, Justin Betteridge, Bryan Kisiel, Burr Settles, Estevam Hruschka, and Tom Mitchell. Toward an architecture for never-ending language learning. In _Proceedings of the AAAI conference on artificial intelligence_, volume 24, pages 1306-1313, 2010. Issue: 1.
* Ehrlinger and Woss [2016] Lisa Ehrlinger and Wolfram Woss. Towards a definition of knowledge graphs. _SEMANTICS (Posters, Demos, SuCCESS)_, 48(1-4):2, 2016.
* Galkin et al. [2022] Michael Galkin, Zhaocheng Zhu, Hongyu Ren, and Jian Tang. Inductive logical query answering in knowledge graphs. _Advances in Neural Information Processing Systems_, 35:15230-15243, 2022.
* Gottlob et al. [1999] Georg Gottlob, Nicola Leone, and Francesco Scarcello. Hypertree decompositions and tractable queries. In _Proceedings of the eighteenth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems_, pages 21-32, 1999.
* Gottlob et al. [2000] Georg Gottlob, Nicola Leone, and Francesco Scarcello. A comparison of structural CSP decomposition methods. _Artificial Intelligence_, 124(2):243-282, December 2000.
* Greco and Scarcello [2013] Gianluigi Greco and Francesco Scarcello. On The Power of Tree Projections: Structural Tractability of Enumerating CSP Solutions. _Constraints_, 18(1):38-74, January 2013. arXiv:1005.1567 [cs].
* Hamilton et al. [2018] Will Hamilton, Payal Bajaj, Marinka Zitnik, Dan Jurafsky, and Jure Leskovec. Embedding logical queries on knowledge graphs. _Advances in neural information processing systems_, 31, 2018.
* Hu et al. [2022] Zhiwei Hu, Victor Gutierrez-Basulto, Zhiliang Xiang, Xiaoli Li, and Jeff Pan. _Type-aware Embeddings for Multi-Hop Reasoning over Knowledge Graphs_. May 2022.
* Huang et al. [2022] Qian Huang, Hongyu Ren, and Jure Leskovec. Few-shot relational reasoning via connection subgraph pretraining. _Advances in Neural Information Processing Systems_, 35:6397-6409, 2022.
* Jia et al. [2021] Zhen Jia, Soumajit Pramanik, Rishiraj Saha Roy, and Gerhard Weikum. Complex Temporal Question Answering on Knowledge Graphs. In _Proceedings of the 30th ACM International Conference on Information & Knowledge Management_, CIKM '21, pages 792-802, New York, NY, USA, 2021. Association for Computing Machinery.

* [17] Phokion G Kolaitis and Moshe Y Vardi. Conjunctive-query containment and constraint satisfaction. In _Proceedings of the seventeenth ACM SIGACT-SIGMOD-SIGART symposium on Principles of database systems_, pages 205-213, 1998.
* [18] Jure Leskovec. Databases as Graphs: Predictive Queries for Declarative Machine Learning. In _Proceedings of the 42nd ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database Systems_, PODS '23, page 1, New York, NY, USA, 2023. Association for Computing Machinery. event-place: Seattle, WA, USA.
* [19] Leonid Libkin and Cristina Sirangelo. Open and Closed World Assumptions in Data Exchange. _Description Logics_, 477, 2009.
* [20] Lihui Liu, Boxin Du, Heng Ji, ChengXiang Zhai, and Hanghang Tong. Neural-Answering Logical Queries on Knowledge Graphs. In _Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery & Data Mining_, pages 1087-1097, 2021.
* [21] Xiao Liu, Shiyu Zhao, Kai Su, Yukuo Cen, Jiezhong Qiu, Mengdi Zhang, Wei Wu, Yuxiao Dong, and Jie Tang. Mask and Reason: Pre-Training Knowledge Graph Transformers for Complex Logical Queries. In _Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining_, pages 1120-1130, August 2022. arXiv:2208.07638 [cs].
* [22] Xiao Long, Liansheng Zhuang, Li Aodi, Shafei Wang, and Houqiang Li. Neural-based Mixture Probabilistic Query Embedding for Answering FOL queries on Knowledge Graphs. 2022.
* [23] Haoran Luo, Yuhao Yang, Gengxian Zhou, Yikai Guo, Tianyu Yao, Zichen Tang, Xueyuan Lin, Kaiyang Wan, and others. NQE: N-ary Query Embedding for Complex Query Answering over Hyper-relational Knowledge Graphs. _arXiv preprint arXiv:2211.13469_, 2022.
* [24] Francois Luus, Prithviraj Sen, Pavan Kapanipathi, Ryan Riegel, Ndivhuwo Makondo, Thabang Lebese, and Alexander Gray. Logic embeddings for complex query answering. _arXiv preprint arXiv:2103.00418_, 2021.
* [25] Meikel Poess and Chris Floyd. New TPC benchmarks for decision support and web commerce. _ACM Sigmod Record_, 29(4):64-71, 2000. Publisher: ACM New York, NY, USA.
* [26] H Ren, W Hu, and J Leskovec. Query2box: Reasoning Over Knowledge Graphs In Vector Space Using Box Embeddings. In _International Conference on Learning Representations (ICLR)_, 2020.
* [27] Hongyu Ren, Mikhail Galkin, Michael Cochez, Zhaocheng Zhu, and Jure Leskovec. Neural Graph Reasoning: Complex Logical Query Answering Meets Graph Databases, March 2023. arXiv:2303.14617 [cs].
* [28] Hongyu Ren and Jure Leskovec. Beta embeddings for multi-hop logical reasoning in knowledge graphs. _Advances in Neural Information Processing Systems_, 33:19716-19726, 2020.
* [29] Francesca Rossi, Peter van Beek, and Toby Walsh. _Handbook of Constraint Programming_. Elsevier Science Inc., USA, 2006.
* [30] Apoorv Saxena, Soumen Chakrabarti, and Partha Talukdar. Question Answering Over Temporal Knowledge Graphs, June 2021. arXiv:2106.01515 [cs].
* [31] Fabian M Suchanek, Gjergji Kasneci, and Gerhard Weikum. Yago: a core of semantic knowledge. In _Proceedings of the 16th international conference on World Wide Web_, pages 697-706, 2007.
* [32] Kristina Toutanova and Danqi Chen. Observed versus latent features for knowledge base and text inference. In _Proceedings of the 3rd workshop on continuous vector space models and their compositionality_, pages 57-66, 2015.

* [33] Kush R. Varshney. Trustworthy machine learning and artificial intelligence. _XRDS: Crossroads, The ACM Magazine for Students_, 25(3):26-29, 2019.
* [34] Denny Vrandecic and Markus Krotzsch. Wikidata: a free collaborative knowledgebase. _Communications of the ACM_, 57(10):78-85, 2014. Publisher: ACM New York, NY, USA.
* [35] Zihao Wang, Yangqiu Song, Ginny Wong, and Simon See. Logical Message Passing Networks with One-hop Inference on Atomic Formulas. In _The Eleventh International Conference on Learning Representations_, 2023.
* [36] Zihao Wang, Hang Yin, and Yangqiu Song. Benchmarking the Combinatorial Generalizability of Complex Query Answering on Knowledge Graphs. _Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks_, 1, December 2021.
* [37] Zihao Wang, Hang Yin, and Yangqiu Song. Logical Queries on Knowledge Graphs: Emerging Interface of Incomplete Relational Data. _Data Engineering_, page 3, 2022.
* [38] Zezhong Xu, Wen Zhang, Peng Ye, Hui Chen, and Huajun Chen. Neural-Symbolic Entangled Framework for Complex Query Answering, September 2022. arXiv:2209.08779 [cs].
* [39] Hang Yin, Zihao Wang, and Yangqiu Song. Rethinking existential first order queries and their inference on knowledge graphs. In _The Twelfth International Conference on Learning Representations_, 2024.
* [40] Zhanqiu Zhang, Jie Wang, Jiajun Chen, Shuiwang Ji, and Feng Wu. Cone: Cone embeddings for multi-hop reasoning over knowledge graphs. _Advances in Neural Information Processing Systems_, 34:19172-19183, 2021.
* [41] Tao Zhou, Jie Ren, Matos Medo, and Yi-Cheng Zhang. Bipartite network projection and personal recommendation. _Physical review E_, 76(4):046115, 2007. Publisher: APS.

## Checklist

1. For all authors... 1. Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? [Yes] 2. Did you describe the limitations of your work? [Yes] We can not handle queries with the universal quantifier, meaning that we can not cover all queries that have been proposed by previous dataset and benchmarks. 3. Did you discuss any potential negative societal impacts of your work? [Yes] We have discussed the possible negative social impact, see Appendix I. 4. Have you read the ethics review guidelines and ensured that your paper conforms to them? [Yes]
2. If you are including theoretical results... 1. Did you state the full set of assumptions of all theoretical results? [Yes] Clear assumptions are made in Section 3 to define the scope of the query we investigate. 2. Did you include complete proofs of all theoretical results? [Yes] All the proofs are provided in Appendix D.1.
3. If you ran experiments (e.g. for benchmarks)... 1. Did you include the code, data, and instructions needed to reproduce the main experimental results (either in the supplemental material or as a URL)? [Yes] We have given the link in the abstract. 2. Did you specify all the training details (e.g., data splits, hyperparameters, how they were chosen)? [Yes] This is in Appendix F.

* Did you report error bars (e.g., with respect to the random seed after running experiments multiple times)? [No] However, we have evaluated CQA models in the previous dataset and the result is similar to the scores in original paper.
* Did you include the total amount of compute and the type of resources used (e.g., type of GPUs, internal cluster, or cloud provider)? [Yes]
* If you are using existing assets (e.g., code, data, models) or curating/releasing new assets... 1. If your work uses existing assets, did you cite the creators? [Yes] 2. Did you mention the license of the assets? [No] They are all open datasets. 3. Did you include any new assets either in the supplemental material or as a URL? [Yes] 4. Did you discuss whether and how consent was obtained from people whose data you're using/curating? [N/A] We only use public data and don't obtain from individuals. 5. Did you discuss whether the data you are using/curating contains personally identifiable information or offensive content? [N/A]
* If you used crowdsourcing or conducted research with human subjects... 1. Did you include the full text of instructions given to participants and screenshots, if applicable? [N/A] We have not used crowdsourcing. 2. Did you describe any potential participant risks, with links to Institutional Review Board (IRB) approvals, if applicable? [N/A] 3. Did you include the estimated hourly wage paid to participants and the total amount spent on participant compensation? [N/A]

## Appendix A Related works

Answering complex queries on knowledge graphs differs from database query answering by being a data-driven task [37], where the incompleteness of the knowledge graph is addressed by methods that learn from data. Meanwhile, learning-based methods enable faster neural approximate solutions of symbolic query answering problems [27].

The prevailing way is query embedding, where the computational results are embedded and computed in the low-dimensional embedding space. Specifically, the query embedding over the set operator trees is the earliest proposed [13]. The supported set operators include projection[13], intersection [26], union and negation [28], and later on be improved by various designs [40, 3]. Such methods assume queries can be converted into the recursive execution of set operations, which imposes additional assumptions on the solvable class of queries [36]. These assumptions introduce additional limitations of such query embeddings

Recent advancements in query embedding methods adapt query graph representation and graph neural networks, supporting atomics [21] and negated atomics [35]. Query embedding on graphs bypasses the assumptions for queries [36]. Meanwhile, other search-based inference methods [2, 39] are rooted in fuzzy calculus and not subject to the query assumptions [36].

Though many efforts have been made, the datasets of complex query answering are usually subject to the assumptions by set operator query embeddings [36]. Many other datasets are proposed to enable queries with additional features, see [27] for a comprehensive survey of datasets. However, only one small dataset proposed by [39] introduced queries and answers beyond such assumptions [36]. It is questionable that this small dataset is fair enough to justify the advantages claimed in advancement methods [35, 39] that aim at complex query answering. The dataset [39] is still far away from the systematical evaluation as proposed in [36] and EFO\({}_{k}\)-CQA proposed in this paper fills this gap.

## Appendix B Details of constraint satisfaction problem

In this section, we introduce the constraint satisfaction problem (CSP) again. One instance of CSP \(\mathcal{P}\) can be represented by a triple \(\mathcal{P}=(X,D,C)\) where \(X=(x_{1},\cdots,x_{n})\) is an \(n\)-tuple of variables,\(D=(D_{1},\cdots,D_{n})\) is the corresponding \(n\)-tuple of domains, meaning for each \(i\), \(x_{i}\in D_{i}\). Then, \(C=(C_{1},\cdots,C_{t})\) is \(t\)-tuple constraint, each constraint \(C_{i}\) is a pair of \((S_{i},R_{S_{i}})\) where \(S_{i}\) is called the scope of the constraint, meaning it is a set of variables \(S_{i}=\{x_{i_{j}}\}\) and \(R_{S_{i}}\) is the constraint over those variables [29], meaning that \(R_{S_{i}}\) is a subset of the cartesian product of variables in \(S_{i}\).

Then the formulation of existential conjunctive formulas as CSP has already been discussed in Section 2.2. Additionally, for the negation of atomic formula \(\neg r(h,t)\), we note the constraint \(C\) is also binary with \(S_{i}=\{h,t\}\), \(R_{S_{i}}=\{(h,t)|h,t\in\mathcal{E},(h,r,t)\notin\mathcal{KG}\}\), this means that \(R_{S_{i}}\) is a very large set, thus the constraint is less "strict" than the positive ones.

## Appendix C Preliminary of tree form query

We explain the operator tree method, as well as the tree-form queries in this section, which is firstly introduced in [39]. The tree-form queries are defined to be the syntax closure of the operator tree method and are the prevailing query types in the existing datasets [28, 36], see the definition below:

**Definition 17** (Tree-Form Query).: _The set of the Tree-Form queries is the smallest set \(\Phi\) such that:_

1. _If_ \(\phi(y)=r(a,y)\)_, where_ \(a\in\mathcal{E}\)_, then_ \(\phi(y)\in\Phi\)_;_
2. _If_ \(\phi(y)\in\Phi,\neg\phi(y)\in\Phi\)_;_
3. _If_ \(\phi(y),\psi(y)\in\Phi\)_, then_ \((\phi\wedge\psi)(y)\in\Phi\) _and_ \((\phi\vee\psi)(y)\in\Phi\)_;_
4. _If_ \(\phi(y)\in\Phi\) _and_ \(y^{\prime}\) _is any variable, then_ \(\psi(y^{\prime})=\exists y.r(y,y^{\prime})\wedge\phi(y)\in\Phi\)_._

We note that the family of tree-form queries deviates from the targeted EFO\({}_{1}\) query family [39]. The rationale of the definition is that the previous model relied on the representation of "**operator tree**" which addresses logical queries to simulate logical reasoning as the execution of set operators [28, 40, 38], where each node represents a set of entities corresponding to the answer set of a sub-query [39]. Then, logical connectives are transformed into operator nodes for set projections(Definition 17 i,iv), complement(Definition 17 ii), intersection, and union(Definition 17 iii) [36]. Particularly, the set projections are derived from the Skolemization of predicates [24]. Therefore, the operator tree method that has been adopted in lines of research [28, 40, 38] is just a model that neuralizes these set operations: projection, complement, intersection, and union. These different models basically only differ from each other by their parameterization while having the same expressiveness as characterized by the tree form query.

Specifically, the left side of the Figure 1 shows an example of the operator tree, where "Held" and "Located" are treated as two projections, "N" represents set complement, and "I" represents set intersection. Therefore, the embedding of the root representing the answer set can be computed based on these set operations in a bottom-up manner [28].

Finally, it has been noticed that tree-form query is subject to structural traceability and only has polynomial time combined complexity for inference while the general EFO\({}_{k}\), or even EFO\({}_{1}\) queries, is NP-complete, with detailed proof in [39]. Therefore, this result highlights the importance of investigating the EFO\({}_{k}\) queries as it greatly extends the previous tree-form queries.

## Appendix D Construction of the whole EFO\({}_{k}\)-CQA dataset

In this section, we provide details for the construction of the EFO\({}_{k}\)-CQA dataset.

### Enumeration of the abstract query graphs

We first give a proposition of the property of abstract query graph:

**Proposition 18**.: _For an abstract query graph \(\mathcal{G}\), if it conforms Assumption 13 and Assumption 14, then removing all constant entities in \(\mathcal{G}\) will lead to only one connected component and no edge is connected between two constant entities._Proof.: We prove this by contradiction. If there is an edge (whether positive or negative) between constant entities, then this edge is redundant, violating Assumption 13. Then, if there is more than one connected component after removing all constant entities in \(\mathcal{G}\). Suppose one connected component has no free variable, then this part is a sentence and thus has a certain truth value, whether 0 or 1, which is redundant, violating Assumption 13. Then, we assume every connected component has at least one free variable, we assume there is \(m\) connected component and we have:

\[Node(\mathcal{G})=(\cup_{i=1}^{m}Node(\mathcal{G}_{i}))\cup Node(\mathcal{G}_{c})\]

where \(m>1\), the \(\mathcal{G}_{c}\) is the set of constant entities and each \(\mathcal{G}_{i}\) is the connected component, we use \(Node(\mathcal{G})\) to denote the node set for a graph \(\mathcal{G}\). Then this equation describes the partition of the node set of the original \(\mathcal{G}\).

Then, we construct \(\mathcal{G}_{a}=G[Node(\mathcal{G}_{1})\cup\mathcal{G}_{c}]\) and \(\mathcal{G}_{b}=G[(\cup_{i=1}^{m}Node(\mathcal{G}_{i}))\cup Node(\mathcal{G}_{ c})]\), where \(G\) represents the induced graph. Then we naturally have that \(\mathcal{A}[I(\mathcal{G})]=\mathcal{A}[I(\mathcal{G}_{a})]\times\mathcal{A}[ I(\mathcal{G}_{b})]\), where the \(\times\) represents the Cartesian product, violating Assumption 14.

Additionally, as mentioned in Appendix B, the negative constraint is less "strict", we formally put an additional assumption of the real knowledge graph as the following:

**Assumption 19**.: _For any knowledge graph \(\mathcal{KG}\), with its entity set \(\mathcal{E}\) and relations set \(\mathcal{R}\), we assume it is somewhat sparse with regard to each relation, meaning: for any \(r\in\mathcal{R},|\{a\in\mathcal{E}|\exists b,(a,r,b)\in\mathcal{KG}\text{ or }(b,r,a)\in\mathcal{KG}\}|\ll|\mathcal{E}|\)._

Then we develop another proposition for the abstract query graph:

**Proposition 20**.: _With the knowledge graph conforming Assumption 19, for any node \(u\) in the abstract query graph \(\mathcal{G}\), if \(u\) is an existential variable or free variable, then it can not only connect with negative edges._

Proof.: Suppose \(u\) only connects to \(m\) negative edge \(e_{1},\cdots,e_{m}\). For any grounding \(I\), we assume \(I(e_{i})=r_{i}\in\mathcal{R}\). For each \(r_{i}\), we construct its endpoint set

\[\text{Endpoint}(r_{i})=\{a\in\mathcal{E}|\exists b.(a,r,b)\in\mathcal{KG}\text { or }(b,r,a)\in\mathcal{KG}\}\]

by the assumption 19, we have \(|Endpoint(r_{i})|\ll\mathcal{E}|\), then we have:

\[|\cup_{i=1}^{m}\text{Endpoint}(r_{i})|\leq\Sigma_{i=1}^{m}|\text{Endpoint}(r_{ i})|\ll|\mathcal{E}|\]

since \(m\) is small due to the size of the abstract query graph. Then we have two situations about the type of node \(u\):

**1.If node \(u\) is an existential variable.**

Then we construct a subgraph \(\mathcal{G}_{s}\) be the induced subgraph of \(Node(\mathcal{G})-u\), then for any possible grounding \(I\), we prove that \(\mathcal{A}[I(\mathcal{G}_{s})]\)=\(\mathcal{A}[I(\mathcal{G})]\), the right is clearly a subset of the left due to it

Figure 5: The four steps of enumerating the abstract query graphs. We note that the example and representation follow Figure 3.

contains more constraints, then we show every answer of the left is also an answer on the right, we merely need to give an appropriate candidate in the entity set for node \(v\), and in fact, we choose any entity in the set \(\mathcal{E}-\cup_{i=1}^{m}\text{Endpoint}(r_{i})\) since it suffices to satisfies all constraints of node \(u\), and we have proved that \(|\mathcal{E}-\cup_{i=1}^{m}\text{Endpoint}(r_{i})|>0\).

This violates the Assumption 13.

**2.If node \(u\) is a free variable.**

Similarly, any entity in the set \(\mathcal{E}-\cup_{i=1}^{m}\text{Endpoint}(r_{i})\) will be an answer for the node \(u\), thus violating the Assumption 16.

We note the proposition 20 extends the previous requirement about negative queries, which is firstly proposed in [28] and inherited and named as "bounded negation" in [36], the "bounded negation" requires the negation operator should be followed by the intersection operator in the operator tree. Obviously, the abstract query graph that conforms to "bounded negation" will also conform to the requirement in Proposition 20. A vivid example is offered in Figure 2.

Finally, we make the assumption of the distance to the free variable of the query graph:

**Assumption 21**.: _There is a constant \(d\), such that for every node \(u\) in the abstract query graph \(\mathcal{G}\), it can find a free variable in its \(d\)-hop neighbor._

We have this assumption to exclude the extremely long-path queries.

Equipped with the propositions and assumptions above, we explore the combinatorial space of the abstract query graph given certain hyperparameters, including: the max number of free variables, max number of existential variables, max number of constant entities, max number of all nodes, max number of all edges, max number of edges surpassing the number of nodes, max number of negative edge, max distance to the free variable. In practice, these numbers are set to be: 2, 2, 3, 6, 6, 0, 1, 3. We note that the max number of edges surpassing the number of nodes is set to 0, which means that the query graph can at most have one more edge than a simple tree, thus, we exclude those query graphs that are both cyclic graphs and multigraphs, making our categorization and discussion in the experiments in Section 5.2 and Section 5.3 much more straightforward and clear.

Then, we create the abstract query graph by the following steps, which is a graph with three types of nodes and two kinds of edges:

1. First, create a simple connected graph \(\mathcal{G}_{1}\) with two types of nodes, the existential variable and the free variable, and one type of edge, the positive edge.
2. We add additional edges to the simple graph \(\mathcal{G}_{1}\) and make it a multigraph \(\mathcal{G}_{2}\).
3. Then, the constant variable is added to the graph \(\mathcal{G}_{2}\), In this step, we make sure not too long existential leaves. The result is graph \(\mathcal{G}_{3}\).
4. Finally, random edges in \(\mathcal{G}_{3}\) are replaced by the negation edge, and we get the final abstract query graph \(\mathcal{G}_{4}\).

In this way, all possible query graphs within a certain combinatorial space are enumerated, and finally, we filter duplicated graphs with the help of the graph isomorphism algorithm. We give an example to illustrate the four-step construction of an abstract query graph in Figure 5.

### Ground abstract query graph with meaningful negation

To fulfill the Assumption 15 as discussed in Section 4.2, for an abstract query graph\(\mathcal{G}=(V,E,f,g)\), we have two steps: (1). Sample grounding for the positive subgraph \(\mathcal{G}_{p}\) and compute its answer (2). Ground the \(\mathcal{G}_{n}\) to decrease the answer got in the first step. Then we define positive subgraph \(\mathcal{G}_{p}\) to be defined as such, its edge set \(E^{\prime}=\{e\in E|g(e)=positive\}\), its node set \(V^{\prime}=\{u|u\in V,\exists e\in E|g(e)=positive\}\). We have the following lemma:\(E^{\prime}\) and \(e\) connects to \(u\)). Then \(\mathcal{G}_{p}\)=\((V^{\prime},E^{\prime},f,g)\). We note that because of Proposition 20, if a node \(u\in V-V^{\prime}\), then we know node \(u\) must be a constant entity.

Then we sample the grounding for the positive subgraph \(\mathcal{G}_{p}\), we also compute the CSP answer \(\overline{\mathcal{A}}_{p}\) for this subgraph.

Then we ground what is left in the positive subgraph, we split each negative edge in \(E-E^{\prime}\) into two categories:

**1. This edge \(e\) connects two nodes \(u,v\), and \(u,v\in V^{\prime}\).**

In this case, we sample the relation \(r\) to be the grounding of \(e\) such that it negates some of the answers in \(\overline{\mathcal{A}}_{p}\).

**2. This edge \(e\) connects two nodes \(u,v\), where \(u\in V^{\prime}\), while \(v\notin V^{\prime}\).**

In this case, we sample the relation \(r\) for \(e\) and entity \(a\) for \(v\) such that they negate some answer in \(\overline{\mathcal{A}}_{p}\), we note we only need to consider the possible candidates for node \(u\) and it is quite efficient.

We note that there is no possibility that neither of the endpoints is in \(V^{\prime}\) because as we have discussed above, this means that both nodes are constant entities, but in Proposition 18 we have asserted that no edge is connected between two entities.

### The comparison to previous benchmark

To give an intuitive comparison of our \(\text{EFO}_{k}\)-CQA dataset against those previous datasets and benchmark, including the BetaE dataset [28], the EFO-1-QA benchmark [36] that extends BetaE dataset, and the FIT dataset [39] that explores 10 more new query types, we offer a new figure in Figure 6.

It can be clearly observed that EFO-1-QA covers the BetaE dataset and has provided a quite systematic investigation in tree form query, while FIT deviates from them and studies ten new query types that are in \(\text{EFO}_{1}\) but not tree form.

As discussed in Section 3, the scope of the formula investigated in our \(\text{EFO}_{k}\)-CQA dataset surpasses the previous EFO-1-QA benchmark and FIT dataset because of three reasons: (1). We include the \(\text{EFO}_{k}\) formula with multiple free variables that has never been investigated(the bottom part of

Figure 6: Illustration of the comparison between the \(\text{EFO}_{k}\)-CQA dataset (navy blue box) and the previous dataset (three yellow boxes), where the BetaE and EFO-1-QA aim to investigate the tree form query, explained in Appendix C, while the FIT dataset aims to investigate \(\text{EFO}_{1}\) query that is not tree form. FIT is not a subset of \(\text{EFO}_{k}\)-CQA because its “3pm” query is not included in \(\text{EFO}_{k}\)-CQA.

nay blue box in Figure 6); (2). We systematically investigate those EFO\({}_{1}\) queries that are not tree form while the previous FIT dataset only discusses ten hand-crafted query types (the navy blue part between two white lines in Figure 6); (3) Our assumption is more systematic than previous ones as shown by the example in Figure 2(the top navy blue part above two white lines in Figure 6). Though we only contain 741 query types while the EFO-1-QA benchmark contains 301 query types, we list reasons for the number of query types is not significantly larger than the previous benchmark: (1). EFO-1-QA benchmark relies on the operator tree that contains union, which represents the logic conjunction(\(\vee\)), however, we only discuss the conjunctive queries because we always utilize the DNF of a query. We notice that there are only 129 query types in EFO-1-QA without the union, significantly smaller than the EFO\({}_{k}\)-CQA dataset. (2). In the construction of EFO\({}_{k}\)-CQA dataset, we restrict the query graph to have at most one negative edge to avoid the total number of query types growing quadratically, while in EFO-1-QA benchmark, their restrictions are different than ours and it contains queries that have two negative atomic formulas as indicated by the right part of yellow box is not contained in the navy blue box.

### EFO\({}_{k}\)-CQA statistics

The statistics of our EFO\({}_{k}\)-CQA dataset are shown in Table 3 and Table 4, they show the statistics of our abstract query graph by their topology property, the statistics are split into the situation that the number of free variable \(k=1\) and the number of free variable \(k=2\), correspondingly. We note abstract query graphs with seven nodes have been excluded as the setting of hyperparameters discussed in Appendix D.1, we make these restrictions to control the quadratic growth in the number of abstract query graphs.

Finally, in FB15k-237, we sample 1000 queries for an abstract query graph without negation, 500 queries for an abstract query graph with negation; in FB15k, we sample 800 queries for an abstract query graph without negation, 400 queries for an abstract query graph with negation; in NELL, we sample 400 queries for an abstract query graph without negation, 100 queries for an abstract query graph with negation. As we have discussed in Appendix D.2, sample negative query is computationally costly, thus we sample less of them.

Moreover, we provide our EFO\({}_{k}\)-CQA dataset an inductive version, with the same query types as the transductive version, while the number of queries per query type is set to 400 for positive ones and 100 for negative ones. The inductive ratio is set to 175%, following the setting in [9].

## Appendix E Evaluation details

We explain the evaluation protocol in detail for Section 4.5.

Firstly, we explain the computation of common metrics, including Mean Reciprocal Rank(MRR) and HIT@K, given the full answer \(\mathcal{A}\) in the whole KG and the observed answer \(\mathcal{A}_{o}\) in the observed KG, we focus on the hard answer \(\mathcal{A}_{h}\) as it requires more than memorizing the observed KG and serves as the indicator of the capability of reasoning.

\begin{table}
\begin{tabular}{c c c c c c c c c} \hline \hline \(c\)\(e\) & 0 & \multicolumn{2}{c}{1} & \multicolumn{2}{c}{2} & \multicolumn{2}{c}{Sum.(\(c\))} & Sum. \\ \cline{2-9} \(c\) & SDAG & SDAG & Multi & SDAG & Multi & Cyclic & & \\ \hline
1 & 1 & 2 & 4 & 4 & 16 & 4 & 31 & \\
2 & 2 & 6 & 6 & 20 & 40 & 8 & 82 & \\
3 & 2 & 8 & 8 & 36 & 72 & 12 & 138 & \\ \hline Sum.(\(e\)) & 5 & 16 & 18 & 60 & 128 & 24 & & \\ \hline \hline \end{tabular}
\end{table}
Table 3: The number of abstract query graphs with one free variable. We denote \(e\) as the number of existential variables and \(c\) as the number of constant entities. SDAG represents the Simple Directed Acyclic Graph, Multi for multigraph, and Cyclic for the cyclic graph. Sum.(\(c\)) and Sum.(\(e\)) is the total number of queries with the number of constant entities / existential variables fixed.

Specifically, we rank each hard answer \(a\in\mathcal{A}_{h}\) against all non-answers \(\mathcal{E}-\mathcal{A}-\mathcal{A}_{o}\), the reason is that we need to neglect other answers so that answers do not interfere with each other, finally, we get the ranking for \(a\) as \(r\). Then its MRR is \(1/r\), and its HIT@k is \(\mathbf{1}_{r\leqslant k}\), thus, the score of a query is the mean of the scores of every its hard answer. We usually compute the score for a query type (which corresponds to an abstract query graph) as the mean score of every query within this type.

As the marginal score and the multiply score have already been explained in Section 4.5, we only mention one point that it is possible that every free variable does not have marginal hard answer. Assume that for a query with two free variables, its answer set \(\mathcal{A}=\{(a_{1},a_{2}),(a_{1},a_{3}),(a_{4},a_{2})\}\) and its observed answer set \(\mathcal{A}_{o}=\{(a_{1},a_{3}),(a_{4},a_{2})\}\). In this case, \(a_{1}\) is not the marginal hard answer for the first free variable and \(a_{2}\) is not the marginal hard answer for the second free variable, in general, no free variable has its own marginal hard answer.

\begin{table}
\begin{tabular}{c c c c c c c c c c} \hline \hline \multirow{2}{*}{\(c\)} & \multirow{2}{*}{\(e=0\)} & \multicolumn{3}{c}{\(e=1\)} & \multicolumn{3}{c}{\(e=2\)} & \multirow{2}{*}{AVG.} \\ \cline{2-2} \cline{5-10}  & SDAG & & & & SDAG & & Multi & Cyclic & SDAG & Multi & Cyclic \\ \hline \(c=1\) & 1 & 2 & 7 & 18 & 4 & 6 & 32 & 26 & 96 \\ \(c=2\) & 4 & 4 & 20 & 36 & 8 & 38 & 108 & 64 & 282 \\ \(c=3\) & 4 & 4 & 32 & 60 & 12 & - & - & - & 112 \\ \hline \hline \end{tabular}
\end{table}
Table 4: The number of abstract query graphs with two free variables. The notation of \(e\), \(c\) SDAG, Multi, and Cyclic are the same as Table 3. And “-” means that this type of abstract query graph is not included.

Then we only discuss the joint metric, specifically, we only explain how to estimate the joint ranking by the individual ranking of each free variable. For each possible \(k\)-tuple \((a_{1},\cdots,a_{k})\), if \(a_{i}\) is ranked as \(r_{i}\) among the **whole** entity set \(\mathcal{E}\), we compute the score of this tuple as \(\Sigma_{i=1}^{k}r_{i}\), then we sort the whole \(\mathcal{E}^{k}\)\(k\)-tuple by their score, for the situation of a tie, we just use the lexicographical order. After the whole joint ranking is got, we use the standard evaluation protocol that ranks each hard answer against all non-answers. It can be confirmed that this estimation method admits a closed-form solution for the sorting in \(\mathcal{E}^{k}\) space, thus the computation cost is affordable.

We just give the closed-form solution when there are two free variables:

for the tuple \((r_{1},r_{2})\), the possible combinations that sum less than \(r_{1}+r_{2}\) is \(\binom{r_{1}+r_{2}-1}{2}\), then, there is \(r_{1}-1\) tuple that ranks before \((r_{1},r_{2})\) because of lexicographical order, thus, the final ranking for the tuple \((r_{1},r_{2})\) is just \(\binom{r_{1}+r_{2}-1}{2}+r_{1}\) that can be computed efficiently.

## Appendix F Implementation details of CQA models

In this section, we provide implementation details of CQA models that have been evaluated in our paper. For query embedding methods that rely on the operator tree, including BetaE [28], LogicE [24], and ConE [40], we compute the ordering of nodes in the query graph in Algorithm 2, then we compute the embedding for each node in the query graph Algorithm 1, the final embedding of every free node are gotten to be the predicted answer. Especially, the node ordering we got in Algorithm 2 coincides with the natural topology ordering induced by the directed acyclic operator tree, so we can compute the embedding in the same order as the original implementation. Then, in Algorithm 1, we implement each set operation in the operator tree, including intersection, negation, and set projection. By the merit of the Disjunctive Normal Form (DNF), the union is tackled in the final step. Thus, our implementation can coincide with the original implementation in the original dataset [28].

For CQD [2] and LMPNN [35], their original implementation does not require the operator tree, so we just use their original implementation. Specifically, in a query graph with multiple free variables, for CQD we predict the answer for each free variable individually as taking others free variables as existential variables, for LMPNN, we just got all embedding of nodes that represent free variables.

For FIT [39], though it is proposed to solve EFO\({}_{1}\) queries, it is computationally costly: it has a complexity of \(O(\mathcal{E}^{2})\) in the acyclic graphs and is even not polynomial in the cyclic graphs, the reason is that FIT degrades to enumeration to deal with cyclic graph. In our implementation, we further restrict FIT to at most enumerate 10 possible candidates for each node in the query graph, this practice has allowed FIT to be implemented in the dataset FB15k-237 [32]. However, it cost 20 hours to evaluate FIT on our EFO\({}_{k}\)-CQA dataset while other models only need no more than two hours. Moreover, for larger knowledge graph, including NELL [7] and FB15k [5], we have also encountered an out-of-memory error in a Tesla V100 GPU with 32G memory when implementing FIT, thus, we omit its result in these two knowledge graphs.

## Appendix G Extension to more complex query answering

In this section, we discuss possible further development in the task of complex query answering and how our work, especially our framework proposed in Section 4 can help with future development. We list some new features that may be of interest and show the maximum versatility our framework can reach. Our analysis and characterization of future queries inherit the outlook in [37] and also is based on the current development.

**Inductive Reasoning** Inductive reasoning is a new trend in the field of complex query answering. Some entities [9] or even relations [15] are not seen in the training period, namely they can not be found by the observed knowledge graph \(\mathcal{G}_{o}\) therefore, the inductive generalization is essential for the model to infer answers. We note that our framework is powerful enough to sample inductive queries with the observed knowledge graph \(\mathcal{G}_{o}\) given. Therefore, the functionality of sampling inductive query is easily contained and implemented in our framework, see https://github.com/HKUST-KnowComp/EFOK-CQA. We note there we have already provided our EFO\({}_{k}\)-CQA dataset in this setting as discussed in Appendix D.4.

**N-ary relation** N-ary relation is a relation that has \(n>2\) corresponding entities, therefore, the factual information in the knowledge graph is not a triple but a \((n+1)\)-tuple. Moreover, the query graph is also a hypergraph, making the corresponding CSP problem even harder. This is a newly introduced topic [23, 1] in complex query answering, which our framework has limitations in representing.

**Knowledge graph with attribute** Currently, there has been some research that has taken the additional attribute of the knowledge graph into account. Typical attributes include entity types [14], numerical literals [4],triple timestamps [16, 30], and triple probabilities [7]. We note that attributes expand the entity set \(\mathcal{E}\) from all entities to entities with attribute values, it is also possible that the relation set \(\mathcal{R}\) is also extended to contain corresponding relations, like "greater", "less" when dealing with numerical literals. Then, our framework can represent queries on such extended knowledge graphs like in [4], where no function like "plus", or "minus" is considered and the predicates are also binary.

Overall, our framework can be applied to some avant-garde problem settings given certain properties, thus those functionalities proposed in Section 4 can be useful. We hope our discussion helps with the future development of complex query answering.

## Appendix H Additional experiment result and analysis

In this section, we offer another experiment result not available to be shown in the main paper. For the purpose of supplementation, we select some representative experiment result as the experiment result is extremely complex to be categorized and be shown. we present the further benchmark result of the following: the analysis of benchmark result in detail, more than just the averaged score in Table 1 and Table 2, which is provided in Appendix H.1; result of different knowledge graphs, including NELL and FB15k, which is provided in Appendix H.2 and H.3, the situation of more constant entities since we only discuss when there are two constant entities in Table 2, the result is provided in Appendix H.4, and finally, all queries(including the queries without marginal hard answers), in Appendix H.5.

We note that we have explained in Section 4.5 and Appendix E that for a query with multiple free variables, some or all of the free variables may not have their marginal hard answer and thus the marginal metric can not be computed. Therefore, in the result shown in Table 2 in Section 5.3, we only conduct evaluation on those queries that both of their free variables have marginal hard answers, and we offer the benchmark result of all queries in Appendix H.5 where only two kinds of metrics are available.

### Further result and analysis of the experiment in main paper

To supplement the experiment result already shown in Section 5.2 and Section 5.3, we have included more benchmark results in this section. Though the averaged score is a broadly-used statistic to benchmark the model performance on our EFO\({}_{k}\) queries, this is not enough and we have offered much more detail in this section.

**Whole combinatorial space helps to develop trustworthy machine learning models.** Firstly, we show more detailed benchmark results of the relative performance between our selected six CQA models, the result is shown in Table 4. Specifically, we plot two boxes, the black one, including the most difficult query types, and the red box, including the easiest query types. In the easiest part, we find that even the worst model and the best model have pretty similar performance despite that they

Figure 7: Relative performance of the six representative CQA models in referring queries with two free variables, the ranking of query types is determined by the average Multiply HIT@10 score. A Gaussian filter with sigma=1 is added to smooth the curve.

may differ greatly in other query types. The performance in the most difficult query types is more important when the users are risk-sensitive and desire a trustworthy machine-learning model that does not crash in extreme cases [33] and we highlight it in the black box. In the black box, we note that CQD [2], though designed in a rather general form, is pretty unstable when comes to empirical evaluation, as it has a clear downward curve and deviates from other model's performance enormously in the most difficult query types. Therefore, though its performance is better than LMPNN and comparable to BetaE on average as reported in Table 1, its unsteady performance suggests its inherent weakness. On the other hand, ConE [40] is much more steady and outperforms BetaE and LogicE consistently. We also show the result when there are two free variables in Figure 7, where the model performance is much less steady but the trend is similar to the \(\text{EFO}_{1}\) case in general.

**Empirical hardness of query types and incomplete discussion of the previous dataset.** Moreover, we also discuss the empirical hardness of query types themselves and compare different datasets accordingly in Figure 8. We find the standard deviation of the six representative CQA models increases in the most difficult part and decreases in the easiest part, corroborating our discussion in the first paragraph. We also highlight those query types that have already been investigated in BetaE dataset [28] and FIT dataset [39]. We intuitively find that the BetaE dataset does not include very challenging query types while the FIT dataset mainly focuses on them. This can be explained by the fact that nine out of ten most challenging query types correspond to multigraph, which the BetaE dataset totally ignores while the FIT dataset highlights it as a key feature. To give a quantitative analysis of whether their hand-crafted query types are sampled from the whole combinatorial space, we have adopted the Kolmogorov-Smirnov test to test the distribution discrepancy between their distribution and the query type distribution in \(\text{EFO}_{k}\)-CQA since \(\text{EFO}_{k}\)-CQA enumerates all possible query types in the given combinatorial space and is thus unbiased. We find that the BetaE dataset is indeed generally easier and its p-value is 0.78, meaning that it has a 78 percent possibility to be unbiased, while the FIT dataset is significantly harder and its p-value is 0.27. Therefore, there is

Figure 8: Query type distribution in three different datasets, BetaE one, FIT one, and the \(\text{EFO}_{1}\) part in our \(\text{EFO}_{k}\)-CQA dataset. The left part shows the histogram that represents the probability density function of each dataset. The ranking of query types is also determined by the mean HIT@10 score as in Figure 4, with the standard deviation of the performance of the six CQA models shown as the light blue error bar.

no significant statistical evidence to prove they are sampled from the whole combinatorial space unbiasedly.

### Further benchmark result of \(k\)=1

Firstly, we present the benchmark result when there is only one free variable, since the result in FB15k-237 is provided in Table 1, we provide the result for other standard knowledge graphs, FB15k and NELL, their result is shown in Table 6 and Table 7, correspondingly. We note that FIT is out of memory with the two large graphs FB15k and NELL as explained in Appendix F and we do not include its result. As FB15k and NELL are both reported to be easier than FB15k-237, the models have better performance. The trend and analysis are generally similar to our discussion in Section 5.2 with some minor, unimportant changes that LogicE [24] has outperformed ConE [40] in the knowledge graph NELL, indicating one model may not perform identically well in all knowledge graphs.

### Further benchmark result for \(k\)=2 in more knowledge graphs

Then, similar to Section 5.3, we provide the result for other standard knowledge graphs, FB15k and NELL, when the number of constant entities is fixed to two, their result is shown in Table 8 and Table 9, correspondingly.

\begin{table}
\begin{tabular}{c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & \multirow{2}{*}{\(c\)} & \multirow{2}{*}{0} & \multirow{2}{*}{1} & \multicolumn{3}{c}{2} & \multirow{2}{*}{AVG.(\(c\))} & \multirow{2}{*}{AVG.} \\ \cline{5-8} \cline{7-10}  & & SDAG & & & & & & & \\ \hline \multirow{4}{*}{BetaE} & 1 & 16.2 & 17.9 & 10.9 & 10.6 & 8.5 & 16.5 & 11.1 & \\  & 2 & 35.6 & 20.2 & 19.1 & 15.7 & 15.7 & 27.1 & 17.8 & 20.7 \\  & 3 & 53.3 & 32.4 & 33.1 & 21.7 & 21.6 & 37.4 & 24.8 & \\ \cline{2-10}  & AVG.(\(e\)) & 37.4 & 25.7 & 23.5 & 18.8 & 18.1 & 30.5 & & \\ \hline \multirow{4}{*}{LogicE} & 1 & 17.4 & 19.0 & 11.5 & 11.0 & 8.5 & 16.8 & 11.5 & \\  & 2 & 36.7 & 21.2 & 19.8 & 16.5 & 16.1 & 27.3 & 18.4 & 21.3 \\  & 3 & 55.5 & 34.6 & 34.5 & 22.3 & 22.0 & 37.5 & 25.4 & \\ \cline{2-10}  & AVG.(\(e\)) & 38.9 & 27.3 & 24.5 & 19.4 & 18.5 & 30.6 & & \\ \hline \multirow{4}{*}{ConE} & 1 & 18.6 & 19.9 & 11.8 & 11.4 & 9.3 & 18.7 & 12.3 & \\  & 2 & 39.1 & 22.4 & 20.8 & 18.1 & 17.6 & 30.7 & 20.1 & \\  & 3 & 58.8 & 36.4 & 37.0 & 24.6 & 23.8 & 41.7 & 27.6 & 23.1 \\ \cline{2-10}  & AVG.(\(e\)) & 41.4 & 28.7 & 26.0 & 21.3 & 20.1 & 34.2 & & \\ \hline \multirow{4}{*}{CQD} & 1 & **22.2** & 19.5 & 9.0 & 9.2 & 6.4 & 15.6 & 10.0 & \\  & 2 & 35.3 & 20.1 & 19.1 & 16.4 & 16.2 & 27.6 & 18.4 & \\  & 3 & 40.3 & 32.9 & 34.3 & 24.4 & 24.0 & 40.2 & 26.8 & \\ \cline{2-10}  & AVG.(\(e\)) & 33.9 & 26.2 & 23.7 & 20.5 & 19.4 & 31.9 & & \\ \hline \multirow{4}{*}{LMPNN} & 1 & 20.5 & 21.4 & 11.2 & 11.6 & 8.7 & 17.0 & 11.9 & \\  & 2 & 42.0 & 22.6 & 18.5 & 16.5 & 14.9 & 26.5 & 17.9 & \\  & 3 & 62.3 & 35.9 & 31.6 & 22.1 & 19.8 & 35.5 & 24.0 & 20.5 \\ \cline{2-10}  & AVG.(\(e\)) & 44.2 & 28.8 & 22.7 & 19.4 & 16.9 & 29.4 & & \\ \hline \multirow{4}{*}{FIT} & 1 & **22.2** & **25.0** & **17.4** & **13.9** & **11.7** & **23.3** & **15.6** & \\  & 2 & **45.3** & **29.6** & **28.5** & **23.8** & **24.3** & **35.5** & **26.5** & **30.3** \\ \cline{1-1}  & 3 & **64.5** & **44.8** & **45.4** & **33.3** & **33.5** & **44.4** & **36.2** & \\ \cline{1-1} \cline{2-10}  & AVG.(\(e\)) & **46.7** & **36.2** & **33.6** & **28.6** & **27.9** & **37.9** & & \\ \hline \hline \end{tabular}
\end{table}
Table 5: MRR scores(%) for inferring queries with one free variable on FB15k-237. We denote \(e\) as the number of existential variables and \(c\) as the number of constant entities. SDAG represents the Simple Directed Acyclic Graph, Multi for multigraph, and Cyclic for the cyclic graph. AVG.(\(c\)) and AVG.(\(e\)) is the average score of queries with the number of constant entities / existential variables fixed.

We note that though in some breakdowns, the marginal score is over 90 percent, almost close to 100 percent, the joint score is pretty slow, which further corroborates our findings that joint metric is significantly harder and more challenging in Section 5.3.

### Further benchmark result for \(k\)=2 with more constant numbers.

As the experiment in Section 5.3 only contains the situation where the number of constant entity is fixed as one, we offer the further experiment result in Table 10.

The result shows that models perform worse with fewer constant variables when compares to the result in Table 2, this observation is the same as the previous result with one free variable that has been discussed in Section 5.2.

### Further benchmark result for \(k\)=2 including all queries

Finally, as we have explained in Section 4.5 and Appendix E, there are some valid EFO\({}_{k}\) queries without marginal hard answers when \(k>1\). Thus, there is no way to calculate the marginal scores, all our previous experiments are therefore only conducted on those queries that all their free variables have marginal hard answers. In this section, we only present the result of the Multiply and Joint score, as they can be computed for any valid EFO\({}_{k}\) queries, and therefore this experiment is conducted on the whole EFO\({}_{k}\)-CQA dataset.

We follow the practice in Section 5.3 that fixed the number of constant entities as two, as the impact of constant entities is pretty clear, which has been further corroborated in Appendix H.4. The experiments are conducted on all three knowledge graphs, FB15k-237, FB15k, and NELL, the result is shown in Table 11, Table 12, and Table 13, correspondingly.

\begin{table}
\begin{tabular}{c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & \multirow{2}{*}{\(c\)\(e\)} & \multirow{2}{*}{0} & \multirow{2}{*}{1} & \multirow{2}{*}{2} & \multirow{2}{*}{AVG.(\(c\))} & \multirow{2}{*}{AVG.} \\ \cline{5-10}  & & & & & & & & & & \\ \hline \multirow{4}{*}{BetaE} & 1 & 38.6 & 30.4 & 29.2 & 21.7 & 21.7 & 24.1 & 24.3 & \\  & 2 & 49.7 & 34.0 & 37.2 & 28.3 & 29.2 & 35.5 & 31.0 & 34.0 \\  & 3 & 63.5 & 46.4 & 48.6 & 33.9 & 36.1 & 45.8 & 38.1 & \\ \cline{2-10}  & AVG.(\(e\)) & 63.5 & 46.4 & 48.6 & 33.9 & 36.1 & 45.8 & 38.1 & \\ \hline \multirow{4}{*}{LogicE} & 1 & 46.0 & 33.8 & 32.1 & 23.3 & 22.8 & 25.6 & 26.2 & \\  & 2 & 51.2 & 35.9 & 39.0 & 30.6 & 30.5 & 36.9 & 32.7 & 35.6 \\  & 3 & 64.5 & 48.6 & 49.8 & 35.4 & 37.5 & 47.7 & 39.6 & \\ \cline{2-10}  & AVG.(\(e\)) & 54.9 & 41.7 & 42.3 & 32.8 & 33.4 & 40.4 & & \\ \hline \multirow{4}{*}{ConE} & 1 & 52.5 & 35.8 & 34.9 & 25.9 & 25.9 & 29.5 & 29.3 & \\  & 2 & 57.0 & 40.0 & 43.4 & 33.2 & 34.2 & 40.8 & 36.3 & \\  & 3 & 70.6 & 53.1 & 55.3 & 39.3 & 41.8 & 52.5 & 43.9 & \\ \cline{2-10}  & AVG.(\(e\)) & 61.0 & 45.6 & 46.8 & 36.1 & 37.4 & 44.8 & & \\ \hline \multirow{4}{*}{CQD} & 1 & 74.6 & 36.1 & 32.7 & 17.6 & 16.7 & 25.4 & 23.7 & \\  & 2 & 52.2 & 35.2 & 40.9 & 29.2 & 31.5 & 39.2 & 33.2 & 37.2 \\  & 3 & 53.3 & 32.4 & 33.1 & 21.7 & 21.6 & 37.4 & 24.8 & \\ \cline{2-10}  & AVG.(\(e\)) & 59.4 & 41.5 & 44.6 & 33.3 & 35.3 & 43.3 & & \\ \hline \multirow{4}{*}{LMPNN} & 1 & 63.7 & 39.9 & 35.3 & 28.7 & 26.4 & 28.7 & 30.7 & \\  & 2 & 65.0 & 41.9 & 38.8 & 34.4 & 31.7 & 38.4 & 35.1 & \\ \cline{1-1}  & 3 & 79.8 & 54.0 & 49.5 & 38.9 & 37.1 & 48.0 & 40.8 & \\ \cline{1-1} \cline{2-10}  & AVG.(\(e\)) & 70.2 & 47.4 & 42.8 & 36.6 & 34.1 & 41.6 & & \\ \hline \hline \end{tabular}
\end{table}
Table 6: MRR scores(%) for inferring queries with one free variable on FB15k. The notation of \(e,c\), SDAG, Multi, Cyclic, AVG.(\(c\)) and AVG.(\(e\)) are the same as Table 1.

Interestingly, comparing the result in Table 2 and Table 11, the multiple scores actually increase through the joint scores are similar. This may be explained by the fact that if one free variable has no marginal hard answer, then it can be easily predicted, leading to a better performance for the whole query.

## Appendix I Society impact

This paper addresses the topic of complex query answering on knowledge graphs, a subject that has garnered attention within the machine learning community for approximately four years. This paper mainly focuses on extending the scope of the complex query given the same knowledge graph and also presents systematic benchmarks and convenient implementation for the whole pipeline of complex query answering, which holds the potential to significantly advance the development of complex query answering models.

The outcomes of this work have practical applications, particularly in areas such as fraud detection, where queries involving multiple free variables and cyclic patterns are necessary. Furthermore, since this study utilizes publicly available knowledge graphs without incorporating new information sources, concerns regarding data leakage are unlikely to arise. However, it's still important to note that this work may lead to unexpected negative societal impact which we are unable to foresee in the current stages. We recognize the necessity of ongoing evaluation and responsible oversight to identify and address any unintended consequences that may arise as a result of this research.

Additionally, the figure of the real-world KG in Figure 2(s) taken from https://medium.com/@fakrami/re-evaluation-of-knowledge-graph-completion-methods-7dfe2e981a77.

\begin{table}
\begin{tabular}{c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & \multirow{2}{*}{\(c\)\(e\)} & \multirow{2}{*}{0} & \multirow{2}{*}{1} & \multirow{2}{*}{2} & \multirow{2}{*}{AVG.(\(c\))} & \multirow{2}{*}{AVG.} \\ \cline{3-3} \cline{5-10}  & & & & & & & & & & \\ \hline \multirow{4}{*}{BetaE} & 1 & 13.9 & 26.4 & 35.0 & 8.6 & 14.9 & 19.1 & 17.5 & \\  & 2 & 58.8 & 31.5 & 43.8 & 22.4 & 30.6 & 34.7 & 30.7 & 33.6 \\  & 3 & 78.8 & 48.6 & 58.3 & 29.6 & 39.0 & 47.0 & 39.5 & \\ \cline{2-10}  & AVG.(\(e\)) & 53.1 & 38.5 & 48.3 & 25.2 & 33.3 & 38.2 & & \\ \hline \multirow{4}{*}{LogicE} & 1 & 18.3 & 29.2 & 39.6 & 12.1 & 19.0 & 20.4 & 21.1 & \\  & 2 & 63.5 & 34.4 & 47.3 & 26.4 & 34.0 & 37.6 & 34.2 & 36.9 \\  & 3 & 79.6 & 51.2 & 59.3 & 33.1 & 42.2 & 50.1 & 42.6 & \\ \cline{2-10}  & AVG.(\(e\)) & 56.3 & 41.3 & 50.9 & 28.8 & 36.7 & 41.0 & & \\ \hline \multirow{4}{*}{ConE} & 1 & 16.7 & 26.9 & 36.6 & 11.1 & 16.9 & 22.3 & 19.6 & \\  & 2 & 60.5 & 33.6 & 46.6 & 25.3 & 33.1 & 40.1 & 33.6 & \\  & 3 & 79.9 & 50.6 & 59.2 & 33.2 & 42.2 & 52.6 & 42.8 & \\ \cline{2-10}  & AVG.(\(e\)) & 54.9 & 40.3 & 50.0 & 28.4 & 36.2 & 43.4 & & \\ \hline \multirow{4}{*}{CQD} & 1 & 22.3 & 30.6 & 37.3 & 13.3 & 17.9 & 20.7 & 20.9 & \\  & 2 & 59.8 & 34.0 & 45.2 & 28.8 & 35.4 & 38.9 & 35.3 & 38.2 \\ \cline{2-10}  & 3 & 62.7 & 48.8 & 59.9 & 36.4 & 44.1 & 52.6 & 44.3 & \\ \cline{2-10}  & AVG.(\(e\)) & 50.1 & 40.2 & 49.9 & 31.6 & 38.1 & 42.7 & & \\ \hline \multirow{4}{*}{LMPNN} & 1 & 20.7 & 29.8 & 33.3 & 13.4 & 16.5 & 21.8 & 19.8 & \\  & 2 & 63.5 & 35.4 & 43.3 & 27.0 & 30.2 & 37.6 & 32.3 & \\ \cline{1-1}  & 3 & 80.8 & 50.7 & 56.0 & 33.6 & 39.2 & 47.6 & 40.7 & \\ \cline{1-1} \cline{2-10}  & AVG.(\(e\)) & 57.4 & 41.5 & 46.7 & 29.4 & 33.6 & 40.0 & & \\ \hline \hline \end{tabular}
\end{table}
Table 7: MRR scores(%) for inferring queries with one free variable on NELL. The notation of \(e,c\), SDAG, Multi, Cyclic, AVG.(\(c\)) and AVG.(\(e\)) are the same as Table 1.

\begin{table}
\begin{tabular}{c c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & HIT@10 & \multicolumn{2}{c}{\(e=0\)} & \multicolumn{3}{c}{\(e=1\)} & \multicolumn{3}{c}{\(e=2\)} & \multirow{2}{*}{AVG.} \\ \cline{3-3} \cline{5-10}  & Type & SDAG & Multi & SDAG & Multi & Cyclic & SDAG & Multi & Cyclic & \\ \hline \multirow{3}{*}{BetaE} & Marginal & 76.9 & 77.2 & 68.9 & 69.3 & 75.1 & 55.0 & 57.4 & 73.6 & 63.6 \\  & Multiply & 41.7 & 41.6 & 31.7 & 31.0 & 38.7 & 25.2 & 25.9 & 36.1 & 29.7 \\  & Joint & 11.6 & 13.7 & 8.7 & 8.6 & 17.8 & 4.9 & 5.4 & 14.3 & 8.4 \\ \hline \multirow{3}{*}{LogicE} & Marginal & 82.9 & 80.9 & 73.6 & 72.9 & 76.6 & 58.9 & 60.7 & 75.7 & 66.9 \\  & Multiply & 47.5 & 45.0 & 36.3 & 34.1 & 40.4 & 28.5 & 29.0 & 38.0 & 32.7 \\  & Joint & 12.7 & 13.9 & 10.0 & 9.9 & 19.2 & 6.1 & 6.5 & 15.9 & 9.6 \\ \hline \multirow{3}{*}{ConE} & Marginal & 84.1 & 84.8 & 76.5 & 76.3 & 81.4 & 61.8 & 63.8 & 79.7 & 70.2 \\  & Multiply & 48.7 & 48.1 & 37.7 & 35.9 & 44.2 & 29.9 & 30.4 & 41.4 & 34.6 \\  & Joint & 14.2 & 15.6 & 10.3 & 10.4 & 20.6 & 6.2 & 6.6 & 16.9 & 10.1 \\ \hline \multirow{3}{*}{CQD} & Marginal & 73.8 & 76.8 & 69.0 & 71.9 & 76.3 & 51.1 & 54.4 & 77.0 & 62.9 \\  & Multiply & 45.0 & 46.6 & 37.4 & 36.9 & 43.9 & 28.1 & 29.2 & 41.9 & 34.0 \\  & Joint & 17.1 & 19.0 & 13.1 & 13.0 & 20.6 & 7.7 & 8.6 & 18.1 & 11.9 \\ \hline \multirow{3}{*}{LMPNN} & Marginal & 89.2 & 80.1 & 80.3 & 78.2 & 84.2 & 65.6 & 63.7 & 80.2 & 71.3 \\  & Multiply & 56.6 & 50.5 & 45.7 & 42.4 & 49.0 & 37.6 & 34.8 & 44.6 & 39.7 \\ \cline{1-1}  & Joint & 18.9 & 17.2 & 12.9 & 12.4 & 22.4 & 8.0 & 7.5 & 16.9 & 11.2 \\ \hline \hline \end{tabular}
\end{table}
Table 8: HIT@10 scores(%) of three different types for answering queries with two free variables on FB15k. The constant number is fixed to be two. The notation of \(e\), SDAG, Multi, and Cyclic is the same as Table 2.

\begin{table}
\begin{tabular}{c c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & HIT@10 & \multicolumn{2}{c}{\(e=0\)} & \multicolumn{3}{c}{\(e=1\)} & \multicolumn{3}{c}{\(e=2\)} & \multirow{2}{*}{AVG.} \\ \cline{3-3} \cline{5-10}  & Type & SDAG & Multi & SDAG & Multi & Cyclic & SDAG & Multi & Cyclic & \\ \hline \multirow{3}{*}{BetaE} & Marginal & 81.3 & 95.9 & 72.8 & 85.5 & 79.9 & 57.2 & 66.7 & 77.0 & 71.2 \\  & Multiply & 48.2 & 56.7 & 41.3 & 46.1 & 47.6 & 33.1 & 36.5 & 42.9 & 39.6 \\  & Joint & 19.2 & 31.8 & 21.2 & 26.5 & 21.7 & 13.8 & 17.5 & 18.5 & 18.8 \\ \hline \multirow{3}{*}{LogicE} & Marginal & 87.1 & 99.8 & 81.0 & 91.8 & 83.2 & 65.7 & 74.0 & 81.0 & 77.7 \\  & Multiply & 52.5 & 60.3 & 47.6 & 51.7 & 50.2 & 39.4 & 42.6 & 46.0 & 44.8 \\  & Joint & 21.1 & 32.8 & 25.4 & 30.5 & 23.3 & 18.0 & 21.5 & 20.5 & 22.3 \\ \hline \multirow{3}{*}{ConE} & Marginal & 82.6 & 96.4 & 76.0 & 87.8 & 88.1 & 60.0 & 69.3 & 83.0 & 74.7 \\  & Multiply & 48.7 & 56.9 & 41.9 & 46.3 & 52.2 & 34.5 & 38.1 & 47.7 & 41.7 \\  & Joint & 17.0 & 30.9 & 19.3 & 25.0 & 24.9 & 12.9 & 17.2 & 20.3 & 18.8 \\ \hline \multirow{3}{*}{CQD} & Marginal & 79.5 & 96.3 & 83.2 & 92.2 & 83.5 & 65.8 & 75.7 & 84.8 & 79.4 \\  & Multiply & 49.2 & 57.8 & 51.1 & 53.1 & 51.4 & 40.6 & 45.1 & 50.6 & 47.4 \\  & Joint & 23.0 & 38.0 & 29.7 & 34.2 & 26.4 & 21.4 & 25.4 & 24.0 & 26.0 \\ \hline \multirow{3}{*}{LMPNN} & Marginal & 88.5 & 96.6 & 81.5 & 90.9 & 85.3 & 65.0 & 70.7 & 83.1 & 76.7 \\  & Multiply & 55.7 & 62.4 & 50.3 & 53.3 & 54.0 & 40.8 & 42.6 & 50.3 & 46.5 \\ \cline{1-1}  & Joint & 23.4 & 36.4 & 25.5 & 29.4 & 24.0 & 16.6 & 19.7 & 21.5 & 21.5 \\ \hline \hline \end{tabular}
\end{table}
Table 9: HIT@10 scores(%) of three different types for answering queries with two free variables on NELL. The constant number is fixed to be two. The notation of \(e\), SDAG, Multi, and Cyclic is the same as Table 2.

\begin{table}
\begin{tabular}{c c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & \multirow{2}{*}{
\begin{tabular}{c} HIT@10 \\ Type \\ \end{tabular} } & \multicolumn{2}{c}{\(e=0\)} & \multicolumn{2}{c}{\(e=1\)} & \multicolumn{2}{c}{\(e=2\)} & \multirow{2}{*}{AVG.} \\ \cline{3-3} \cline{5-10}  & & SDAG & & & & & & & & \\ \hline \multirow{3}{*}{BetaE} & Marginal & 37.5 & 29.7 & 33.4 & 28.1 & 35.6 & 30.0 & 25.9 & 41.2 & 31.2 \\  & Multiply & 18.9 & 13.7 & 15.3 & 10.3 & 15.2 & 17.7 & 13.3 & 17.2 & 14.3 \\  & Joint & 0.9 & 1.1 & 1.4 & 0.9 & 3.3 & 1.1 & 0.9 & 3.9 & 1.7 \\ \hline \multirow{3}{*}{LogicE} & Marginal & 40.6 & 30.7 & 36.0 & 29.1 & 34.6 & 29.8 & 25.3 & 41.5 & 31.4 \\  & Multiply & 21.1 & 14.3 & 17.2 & 10.9 & 16.3 & 17.8 & 13.3 & 17.5 & 14.7 \\  & Joint & 1.4 & 1.4 & 1.6 & 0.9 & 3.7 & 1.4 & 1.0 & 4.3 & 1.9 \\ \hline \multirow{3}{*}{ConE} & Marginal & 40.8 & 32.4 & 37.3 & 30.4 & 40.7 & 31.1 & 26.9 & 45.0 & 33.5 \\  & Multiply & 22.1 & 15.2 & 18.4 & 11.7 & 19.3 & 18.5 & 14.8 & 20.9 & 16.5 \\  & Joint & 1.4 & 1.0 & 1.7 & 1.0 & 4.3 & 1.4 & 1.0 & 4.4 & 2.0 \\ \hline \multirow{3}{*}{CQD} & Marginal & 73.8 & 76.8 & 69.0 & 71.9 & 76.3 & 51.1 & 54.4 & 77.0 & 62.9 \\  & Multiply & 23.3 & 9.1 & 18.5 & 9.2 & 16.2 & 14.6 & 9.2 & 19.1 & 12.9 \\  & Joint & 1.5 & 0.6 & 2.0 & 1.1 & 3.4 & 1.5 & 0.9 & 4.4 & 1.9 \\ \hline \multirow{3}{*}{LMPNN} & Marginal & 39.0 & 27.6 & 40.0 & 29.5 & 39.3 & 30.6 & 24.8 & 42.7 & 32.0 \\  & Multiply & 25.1 & 13.9 & 24.3 & 13.3 & 21.6 & 20.0 & 14.0 & 21.1 & 17.1 \\  & Joint & 1.6 & 1.3 & 2.5 & 1.3 & 3.9 & 1.5 & 1.0 & 4.0 & 2.0 \\ \hline \hline \end{tabular}
\end{table}
Table 11: HIT@10 scores(%) of two different types for answering queries with two free variables on FB15k-237(including queries without the marginal hard answer). The constant number is fixed to be two. The notation of \(e\), SDAG, Multi, and Cyclic is the same as Table 2.

\begin{table}
\begin{tabular}{c c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & \multirow{2}{*}{
\begin{tabular}{c} HIT@10 \\ Type \\ \end{tabular} } & \multicolumn{2}{c}{\(e=0\)} & \multicolumn{2}{c}{\(e=1\)} & \multicolumn{2}{c}{\(e=2\)} & \multirow{2}{*}{AVG.} \\ \cline{3-3} \cline{5-10}  & & SDAG & & & & & & & & \\ \hline \multirow{3}{*}{BetaE} & Multiply & 29.1 & 29.1 & 18.3 & 37.5 & 10.4 & 28.0 & 93.6 & 74.6 & 24.1 \\  & Joint & 2.1 & 2.2 & 1.7 & 3.0 & 2.4 & 1.8 & 5.8 & 14.2 & 4.6 \\ \hline \multirow{3}{*}{LogicE} & Multiply & 31.6 & 32.9 & 19.8 & 39.6 & 10.9 & 28.7 & 96.3 & 73.8 & 25.4 \\  & Joint & 2.6 & 2.5 & 2.1 & 3.1 & 2.5 & 2.2 & 6.4 & 15.6 & 5.0 \\ \hline \multirow{3}{*}{ConE} & Multiply & 32.6 & 31.9 & 20.5 & 41.0 & 12.6 & 29.0 & 99.7 & 86.8 & 27.0 \\  & Joint & 3.0 & 2.1 & 1.9 & 3.3 & 2.7 & 2.2 & 6.6 & 16.8 & 5.4 \\ \hline \multirow{3}{*}{CQD} & Multiply & 34.5 & 23.4 & 22.3 & 36.8 & 10.6 & 26.4 & 75.3 & 77.3 & 25.6 \\  & Joint & 2.9 & 1.4 & 2.1 & 3.3 & 2.3 & 2.0 & 5.0 & 15.0 & 5.6 \\ \hline \multirow{3}{*}{LMPNN} & Multiply & 36.8 & 29.3 & 27.5 & 45.8 & 13.9 & 31.2 & 97.0 & 86.5 & 27.9 \\  & Joint & 2.7 & 2.2 & 2.7 & 3.9 & 2.5 & 2.1 & 5.8 & 14.6 & 5.0 \\ \hline \multirow{3}{*}{FIT} & Multiply & 41.5 & 44.4 & 28.9 & 56.8 & 10.2 & 39.4 & 139.7 & 100.3 & 35.0 \\  & Joint & 2.4 & 2.3 & 2.1 & 3.4 & 1.6 & 2.2 & 7.4 & 15.4 & 5.9 \\ \hline \hline \end{tabular}
\end{table}
Table 10: HIT@10 scores(%) of three different types for answering queries with two free variables on FB15k-237. The constant number is fixed to be one. The notation of \(e\), SDAG, Multi, and Cyclic is the same as Table 2.

\begin{table}
\begin{tabular}{c c c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & HIT@10 & \multicolumn{2}{c}{\(e=0\)} & \multicolumn{3}{c}{\(e=1\)} & \multicolumn{3}{c}{\(e=2\)} & \multirow{2}{*}{AVG.} \\ \cline{3-3} \cline{5-10}  & Type & SDAG & & & & & & & & & \\ \cline{3-10}  & & SDAG & Multi & SDAG & Multi & Cyclic & SDAG & Multi & Cyclic & \\ \hline \multirow{3}{*}{BetaE} & Multiply & 21.2 & 47.3 & 22.0 & 51.9 & 14.7 & 24.1 & 80.5 & 79.7 & 33.4 \\  & Joint & 4.2 & 19.6 & 6.8 & 19.1 & 5.1 & 6.8 & 26.7 & 24.0 & 14.1 \\ \hline \multirow{3}{*}{LogicE} & Multiply & 26.6 & 52.8 & 28.8 & 63.4 & 16.0 & 32.8 & 103.1 & 88.5 & 38.9 \\  & Joint & 3.8 & 21.5 & 9.7 & 26.0 & 5.9 & 11.5 & 36.9 & 27.3 & 16.5 \\ \hline \multirow{3}{*}{ConE} & Multiply & 25.3 & 51.4 & 23.9 & 53.9 & 16.9 & 27.3 & 90.7 & 90.6 & 36.7 \\  & Joint & 3.4 & 20.2 & 6.4 & 17.0 & 6.1 & 7.2 & 27.0 & 27.1 & 14.2 \\ \hline \multirow{3}{*}{CQD} & Multiply & 30.3 & 48.9 & 30.6 & 64.3 & 15.9 & 33.1 & 88.9 & 91.2 & 40.9 \\  & Joint & 4.4 & 21.9 & 9.8 & 27.5 & 5.6 & 12.0 & 37.6 & 28.1 & 18.0 \\ \hline \multirow{3}{*}{LMPNN} & Multiply & 33.4 & 58.3 & 33.7 & 65.3 & 19.4 & 30.7 & 85.1 & 105.0 & 41.8 \\  & Joint & 4.4 & 23.7 & 10.0 & 21.9 & 5.8 & 8.2 & 23.2 & 28.8 & 15.7 \\ \hline \hline \end{tabular}
\end{table}
Table 13: HIT@10 scores(%) of two different types for answering queries with two free variables on NELL(including queries without the marginal hard answer). The constant number is fixed to be two. The notation of \(e\), SDAG, Multi, and Cyclic is the same as Table 2.

\begin{table}
\begin{tabular}{c c c c c c c c c c c} \hline \hline \multirow{2}{*}{Model} & HIT@10 & \multicolumn{2}{c}{\(e=0\)} & \multicolumn{3}{c}{\(e=1\)} & \multicolumn{3}{c}{\(e=2\)} & \multirow{2}{*}{AVG.} \\ \cline{3-3} \cline{5-10}  & Type & SDAG & & & & & & & \\ \hline \multirow{3}{*}{BetaE} & Multiply & 42.1 & 57.2 & 26.5 & 66.5 & 15.5 & 34.6 & 134.9 & 100.0 & 35.0 \\  & Joint & 6.6 & 9.4 & 4.5 & 10.2 & 4.6 & 4.3 & 16.7 & 26.0 & 9.2 \\ \hline \multirow{3}{*}{LogicE} & Multiply & 48.2 & 65.6 & 31.0 & 71.6 & 16.8 & 37.8 & 143.9 & 105.8 & 38.1 \\  & Joint & 7.5 & 11.2 & 5.6 & 12.5 & 5.3 & 5.6 & 20.4 & 28.5 & 10.5 \\ \hline \multirow{3}{*}{ConE} & Multiply & 50.2 & 72.2 & 32.8 & 74.6 & 18.3 & 38.3 & 149.3 & 114.3 & 40.4 \\  & Joint & 6.8 & 10.0 & 5.2 & 12.5 & 5.5 & 5.2 & 19.4 & 30.4 & 11.0 \\ \hline \multirow{3}{*}{CQD} & Multiply & 48.1 & 55.9 & 31.9 & 69.0 & 15.8 & 29.5 & 93.5 & 103.2 & 37.6 \\  & Joint & 9.4 & 11.4 & 6.6 & 14.8 & 4.8 & 5.5 & 17.5 & 27.2 & 12.0 \\ \hline \multirow{3}{*}{LMPNN} & Multiply & 58.4 & 79.5 & 43.1 & 94.6 & 21.3 & 40.9 & 146.2 & 135.9 & 45.0 \\  & Joint & 8.6 & 12.9 & 6.8 & 15.6 & 6.2 & 5.4 & 19.3 & 31.7 & 11.6 \\ \hline \hline \end{tabular}
\end{table}
Table 12: HIT@10 scores(%) of two different types for answering queries with two free variables on FB15k(including queries without the marginal hard answer). The constant number is fixed to be two. The notation of \(e\), SDAG, Multi, and Cyclic is the same as Table 2.