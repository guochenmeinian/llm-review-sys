# Vitron: A Unified Pixel-level Vision LLM for Understanding, Generating, Segmenting, Editing

 Hao Fei\({}^{1,2}\) Shengqiong Wu\({}^{1,2}\) Hanwang Zhang\({}^{1,3}\) Tat-Seng Chua\({}^{2}\) Shuicheng Yan\({}^{1,}\)

\({}^{1,}\)*Skywork AI, Singapore \({}^{2}\) National University of Singapore \({}^{3}\) Nanyang Technological University

haofei37@nus.edu.sg swu@u.nus.edu hanwangzhang@ntu.edu.sg dcscts@nus.edu.sg shuicheng.yan@kunlun-inc.com

Shuicheng Yan is the corresponding author. This work was performed when Hao Fei was an Associate Member, and Shengqiong Wu was an Intern at Skywork AI.

###### Abstract

Recent developments of vision large language models (LLMs) have seen remarkable progress, yet still encounter challenges towards multimodal generalists, such as coarse-grained instance-level understanding, lack of unified support for both images and videos, and insufficient coverage across various vision tasks. In this paper,

Figure 1: Vitron supports four main task clusters of visions, spanning visual comprehension to visual generation, from low level to high level.

we present **Vitron**, a universal pixel-level vision LLM designed for comprehensive _understanding_, _generating_, and _editing_ of both static images and dynamic videos. Building on top of an LLM backbone, Vitron incorporates encoders for images, videos, and pixel-level regional visuals within its frontend modules, while employing state-of-the-art visual specialists as its backend, via which Vitron supports a spectrum of vision end tasks, spanning visual comprehension to visual generation, from low level to high level. To ensure an effective and precise message passing from LLM to backend modules for function invocation, we propose a novel hybrid method by simultaneously integrating discrete textual instructions and continuous signal embeddings. Further, we design various pixel-level spatiotemporal vision-language alignment learning for Vitron to reach the best fine-grained visual capability. Finally, a cross-task synergy module is advised to learn to maximize the task-invariant fine-grained visual features, enhancing the synergy between different visual tasks. Demonstrated over 12 visual tasks and evaluated across 22 datasets, Vitron showcases its extensive capabilities in the four main vision task clusters. Overall, this work illuminates the great potential of developing a more unified multimodal generalist.

## 1 Introduction

Recently, the field of multimodal large language models (MLLMs) has witnessed rapid and flourishing development across multiple communities. Extensive research efforts have been directed towards augmenting powerful, purely language-based LLMs with modules capable of visual perception, thereby extending their applicability to MLLMs [1, 49, 63, 127, 77, 111, 27]. MLLMs, such as BLIP-2 [49], LLAVA [63], MiniGPT-4 [138] and GPT-4V [121] etc., demonstrate a robust and exceptional capability in image understanding, paralleling the deep semantic comprehension of language. In the realm of vision, the ability to process and comprehend dynamic videos is equally critical. Concurrently, several MLLMs have emerged with a focus on video understanding, e.g., VideoChat [50] and Video-LLaMA [128], demonstrating significant advancements in video comprehension.

Subsequent studies have sought to further expand the capabilities of MLLMs, with efforts bifurcating into two primary dimensions. On one hand, there's a deepening of MLLMs' understanding of vision, transitioning from coarse, instance-level comprehension towards a pixel-level, fine-fined understanding of images, thereby achieving visual regional grounding capabilities, as seen in GLaMM [84], PixelLM [85], and MiniGPT-v2 [11], etc., alongside the counterparts in pixel-grounding video LLMs [74]. On the other hand, there's an expansion in the breadth of functionalities MLLMs can support within the vision field. A portion of the research has already ventured into enabling MLLMs not just to comprehend input vision signals but also to support the generation and output of vision content, with systems like GILL [43], Emu [96], etc., flexibly generating image content, and GPT4Video [105] and NExT-GPT [114] achieving video generation.

We posit that the future trend of vision LLMs necessarily involves the enhancement of their capabilities towards a high degree of unification, i.e., multimodal generalists. However, our observations reveal that despite the diversity of existing vision LLMs developed by the community, there is still a clear lack of unification. **First**, almost all existing vision LLMs treat images and videos as separate entities, either supporting only images or videos [1, 96, 128, 96]. We argue for a unified vision MLLM framework that concurrently supports both images and videos, acknowledging that vision inherently comprises both static images and dynamic videos - both core components of our world and largely interchangeable in most scenarios. **Second**, the current support for vision functionalities in MLLMs is found wanting, with most models only capable of understanding [63, 138], or at most generating images or videos [20, 105]. We contend that future MLLMs should embrace a broader spectrum of vision tasks and functionalities, enabling unified support for all vision-related tasks and achieving an _"one for all"_ capability, which is vital for real-world applications, especially in vision creation that often involves a series of iterative and interactive operations. For example, users typically start by _generating_ images from text, transforming an idea into visual content; and then refining this content through further fine-grained _editing_ to add more details; following, proceeding to create dynamic content by _generating_ videos from the images; and finally, engaging in several rounds of iterative interaction, such as video _editing_, to enhance and finalize their creation. **Last but not the least**, for a generalist integrated with various multimodal functionalities, one key lies in how to ensure that all tasks achieve their best performance as much as possible. This includes both that, 1) the instructionsfrom the LLM are precisely conveyed to the downstream decoders, and 2) different tasks do not undermine each other but rather cooperate.

To address all these gaps, this paper introduces **Vitron**, a pioneering universal pixel-level vision LLM, as shown in Fig. 2. First, Vitron leverages a backbone LLM for comprehending, reasoning, decision-making, and multi-round user interactions. To perceive both image and video modal signals and support fine-grained user visual inputs, Vitron incorporates encoders for images, videos, and regional box/sketch-specified inputs. On the backend, several state-of-the-art (SoTA) image and video modules are integrated for decoding and executing a wide range of vision tasks, spanning from lower to higher levels, such as visual understanding (perceiving and reasoning), generating, segmenting (grounding and tracking), editing (inpainting). To ensure that Vitron precisely conveys the LLM's decisions to various backend decoder modules for function invocation, we propose a novel hybrid method of instruction passing. Specifically, we enable the LLM to output not only discrete textual instructions, but also continuous signal feature embeddings passed to the modules. Finally, to maximize the functionalities of different modules within Vitron, we further devise a synergy module, where we fully maximize the task-persistent fine-grained visual features to be shared among different visual tasks.

The overall training for Vitron aims to equip it with robust and powerful vision understanding and manipulation capabilities. We first imbue Vitron basic MLLM skills by carrying out 1) vision-language alignment learning between the frontend encoders and central LLM, also 2) invocation-oriented instruction tuning, and 3) embedding-oriented alignment tuning between LLM and backend modules. Going beyond this, we further try to strengthen Vitron's capacities. On the one hand, we introduce fine-grained spatiotemporal vision grounding instruction tuning, training LLM on grounding predictions and pixel-aware perception for images and videos, such that Vitron sufficiently gains pixel-level visual perception. On the other hand, we utilize adversarial training [29, 100] to decouple _task-specific features_ from _task-invariant fine-grained visual features_ in signal feature representations, thereby enhancing the synergy between different tasks.

Extensive experiments covering 12 tasks across 22 datasets are performed. Leveraging its advanced architecture as a multimodal generalist, Vitron demonstrates proficiency in a comprehensive range of vision tasks. Notably, the unified system's performance is on par with or even surpasses singleton state-of-the-art specialists on specific tasks. Further analyses reveal the efficacy of each design of the system. Our overall contributions are summarized as follows.

To our knowledge, we for the first time propose a grand unified vision MLLM, Vitron, capable of pixel-level understanding, generating, segmenting, editing of both images and videos.

Figure 2: Technical overview of the Vitron framework.

introduce a more effective LLM-to-decode instruction-passing mechanism over both discrete texts and continuous signal embeddings. 

We propose carrying out various pixel-level vision-language spatiotemporal alignment learning for MLLMs to reach the best fine-grained visual capability. 

We devise a synergy module to maximize the task-persistent fine-grained visual features shareable among all different visual tasks, via which Vitron surpasses existing SoTA specialists' performance.

## 2 Related Work

Achieving a profound understanding and comprehensive operational capabilities in vision, ranging from low-level visual pixel understanding [7; 65; 122; 46; 55; 102; 52; 53; 54] to high-level comprehension of overall semantics [19; 45; 70; 23; 31; 38; 39; 48; 115; 26; 56; 24], represents a significant topic. Recent years have seen the development of highly potent large-scale vision models, such as ViT [21] and CLIP [83], which have achieved remarkable vision understanding capabilities; models like SAM [42] and SEEM [139] have solved vision segmentation tasks; and diffusion-based models [34; 82; 73; 28; 112; 86; 25] have reached unprecedented performance in vision generation. Yet these models might lack an LLM as a central decision processor, unable to flexibly interpret user intent or execute tasks interactively [97; 47; 114]. The emergence of LLMs has exhibited unprecedented intelligence capability [99; 76; 16]. Extending the success of language understanding in LLMs, researchers have promptly investigated and developed various MLLMs, enabling LLMs to comprehend vision. By integrating high-performance vision encoders of images or videos into language-based LLMs, these models have been made capable of understanding vision signals [77; 1; 49; 81; 63]. Going beyond vision understanding, further research has aimed to enhance MLLMs, for instance, by endowing them with vision generation capabilities [96; 43] or supporting pixel-level understanding and grounding [130; 125; 85; 132; 110]. In Table 1 we summarize some existing popular vision MLLMs in terms of the vision function support.

However, we observe that current research on vision LLMs lacks depth in two critical aspects. Firstly, current vision LLMs tend to separate images and videos, supporting either one or the other. The construction of a unified MLLM is crucial, as vision inherently encompasses both static images and dynamic videos, both of which are core components of our visual world. Thus, covering both aspects simultaneously is essential for optimally adapting to practical applications. Although models like NExT-GPT [114] have relatively well-supported unification across various modalities, they fall short in supporting pixel-level in-depth vision understanding and comprehensive support for vision operation tasks. The second issue is the incomplete support for vision tasks by existing MLLMs. Most current MLLMs primarily support understanding images or videos [63; 138], with

\begin{table}
\begin{tabular}{l c c c c c c} \hline \hline \multirow{2}{*}{**Model**} & \multicolumn{2}{c}{**Vision Supporting**} & \multicolumn{2}{c}{**Pixel/Regional**} & \multicolumn{2}{c}{**Segmenting/**} & \multirow{2}{*}{**Generating**} & \multirow{2}{*}{**Editing**} & \multirow{2}{*}{**Cross-task Synergy**} \\ \cline{2-2} \cline{5-6}  & **Image** & & & **Video** & & & \\ \hline Flamingo [1] & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ \\ BLIP-2 [49] & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ & ✗ \\ MiniGPT+ [138] & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ & ✗ \\ LLVA [63] & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ & ✗ \\ GILL [43] & ✓ & ✗ & ✗ & ✗ & ✓ & ✗ & ✗ \\ Emu [96] & ✓ & ✗ & ✗ & ✗ & ✓ & ✗ & ✗ \\ MiniGPT-5 [135] & ✓ & ✗ & ✗ & ✗ & ✓ & ✗ & ✗ \\ DreamLLM [20] & ✓ & ✗ & ✗ & ✗ & ✓ & ✗ & ✗ \\ \hline GPT4RoI [130] & ✓ & ✗ & ✓ & ✓ & ✗ & ✗ & ✗ \\ NEXT-Clat [126] & ✓ & ✗ & ✓ & ✓ & ✗ & ✗ & ✗ \\ MiniGPT-v2 [11] & ✓ & ✗ & ✓ & ✓ & ✗ & ✗ & ✗ \\ Shikra [12] & ✓ & ✗ & ✓ & ✓ & ✗ & ✗ & ✗ \\ Kosmos-2 [78] & ✓ & ✗ & ✓ & ✓ & ✗ & ✗ & ✗ \\ GLAMM [84] & ✓ & ✗ & ✓ & ✓ & ✗ & ✗ \\ Osprey [125] & ✓ & ✗ & ✓ & ✓ & ✗ & ✗ & ✗ \\ PixelLM [85] & ✓ & ✗ & ✓ & ✓ & ✗ & ✗ \\ LLVAVA-Plus [64] & ✓ & ✗ & ✗ & ✓ & ✓ & ✓ & ✗ \\ \hline VideoChatt [50] & ✗ & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ \\ Video-LLAMa [128] & ✗ & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ \\ Video-LLaVA [59] & ✓ & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ \\ Video-ChaGTPT [67] & ✗ & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ \\ GPT4Video [105] & ✗ & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ \\ PGVIeo-LLaVA [74] & ✗ & ✓ & ✓ & ✓ & ✓ & ✗ & ✗ \\ \hline NExT-GPT [114] & ✓ & ✓ & ✗ & ✗ & ✗ & ✗ & ✗ \\ \hline Vitron (Ours) & ✓ & ✓ & ✓ & ✓ & ✓ & ✓ & ✓ & ✓ \\ \hline \hline \end{tabular}
\end{table}
Table 1: Comparisons of existing (partially, imperfect coverage) representative vision MLLM.

only a few supporting generation [20, 105] or editing/inpainting [113]. Building a generalist that can handle (almost) all vision-related tasks and operations in an end-to-end architecture should be the next major trend for vision MLLMs. Yet simply integrating existing visual specialists into an LLM to form MLLMs is not sufficient enough, as genuine human-level AI should possess universal intelligence with robust cross-task generalizability [72]. Thus, it is necessary to further consider how to enable synergy effects [20] among different task specialists within a generalist, for which goal, we have devised a synergy strategy in this work. Besides, compared to the multimodal comprehension capabilities of MLLM, endowing MLLM with strong multimodal generative abilities is even more challenging. The key lies in how to effectively and unbiasedly convey MLLM's semantic understanding signals to the backbone decoder modules. There are two mainstream approaches to LLM-to-decoder message passing within the MLLM community. One is based on discrete textual instructions [106, 90, 104], and the other on continuous signal embeddings [43, 20, 114]. However, we find that these two methods are complementary. Specifically, the former allows the LLM to efficiently convey task execution commands to the backend modules through simple text, but it struggles to provide modality-specific signals; the latter can conveniently carry the features needed for tasks, but fails to accurately convey execution intention (especially for managing many modules). In this work, we propose a hybrid method by integrating them together.

## 3 Architecture of Vitro

Vitron takes most common '_encoder-LLM-decoder_' architecture paradigm, as in existing popular MLLMs [63, 20, 114]. The overall framework is shown in Fig. 2, where three key blocks are included: 1) frontend vision&language encoders, 2) central LLM for semantics understanding and text generation, and 3) backend decoder modules for user responding and vision manipulation.

### Frontend Vision-Language Encoding

For both images and videos, we employ the CLIP ViT-L/14@336px [83] as the encoder, respectively. The video encoder independently processes each frame, further employing average pooling across the temporal dimension to yield overall temporal representation features. Then, we employ a regional pixel-aware visual extractor as the sketch encoder for user interaction, e.g., clicking, drawing boxes or polygons, and making scribbles. We mainly follow [125], and use the object-based representations of mask regions that come from user's inputs, which not only encode the pixel-level visual features but also gather the spatial position information of each region. The region features are pooled with also the binary mask of spatial geometry of the object region encoded, and the resulting embeddings are used. Then, the multimodal feature representations are passed to LLM via linear projection.

### Core LLM

In Vitro, an LLM serves as the pivotal agent. Following the most common practice [15, 94, 128], we utilize Vicuna (7B, version 1.5). The LLM processes inputs from both language and visual modalities to perform semantic understanding and reasoning, and then make decisions. For visual comprehension tasks, LLM directly outputs textual responses for users. On the other side, LLM also needs to transmit signals and instructions to backend modules, directing them to invocate more complex tasks that go beyond text generation, such as visual segmentation, generation, and editing. As emphasized earlier, the ability of LLMs to effectively and precisely convey messages is crucial to the performance of complex multimodal tasks. To this end, we propose fully integrating the advantages of the two common message-passing methods: _discrete textual instructions_ and _continuous signal embeddings_. The former aids in accurately invoking different backbone modules (thanks to the LLM's proficiency in task dispatching), while the latter supplements with richer modality-preserved visual features that cannot be directly described through discrete text. As depicted in Fig. 2, the LLM outputs 1) text responses for users, 2) text instructions for module invocation, and 3) feature embeddings of special tokens. The feature embeddings are split into the task-specific features and the task-invariant fine-grained visual-language features. Both the text instructions and feature embeddings are passed to backbone modules.

### Backend Visual Specialists

To enable our MLLM with various visual task abilities, we integrate an array of singleton vision specialists into LLM. For image generation and editing, we integrate the diffusion-based model GLIGEN [57]. For image and video segmentation, we opt for SEEM [139]. For video generation, ZeroScope [8] and I2VGen-XL [131] are utilized for text-to-video and image-to-video tasks, respectively. Lastly, for video editing functionality, we incorporate StableVideo [9]. The text instructions from LLM first determine which task module to invoke; simultaneously, feature embeddings are fed into the corresponding module's feature encoder to assist with task execution. Specifically, we design a structured invocation template, including 1) Module name, 2) Invocation command, and 3) Region (optional) specifying a fine-grained vision feature needed for certain tasks. The feature embeddings include both _task-specific features_ and _task-invariant fine-grained features_. The purpose of this design is to achieve feature decoupling, during which we aim to have the task-invariant fine-grained features shared as widely as possible among all tasks to facilitate synergy between different tasks.

## 4 Pixel-aware Synergistic Vision-Language Understanding Tuning

With the Vitron framework, we now train the model with three stages of targets. First, we try to endow it with basic multimodal capabilities, i.e., comprehension and generation. Then, we engage in fine-grained vision grounding instruction tuning to further enhance the model's pixel-level perception abilities. Finally, we carry out cross-task synergy learning, maximizing the shared fine-grained features among all tasks.

### Basic Multimodal Comprehension and Generation Skill Training

In the first stage of training, the primary goal is to equip the MLLM with basic multimodal understanding and generation abilities, including the frontend alignment of encoder-LLM, as well as the backend alignment of LLM-decoder. Appendix SSB.1 details all the following three types of training.

**Overall Vision-Language Alignment Learning.** This is to ensure the input vision and language are mapped to a unified feature space. Following prior common practice, we utilize datasets comprising 'image-caption' pairs (CC3M [89]), 'video-caption' pairs (Webvid [4]), and'region-caption' pairs (RefCOCO [40]) drawn from existing established corpora and benchmarks. When provided with an image, video, or specific visual region, we engage the frozen LLM to generate a text description or caption that aligns with the reference caption.

**Text Invocation Instruction Tuning.** This step of training aims to equip the system with the precise capability to execute commands, allowing the LLM to generate appropriate and correct invocation text instructions. To accomplish this, we collect a total of 55,000+ instruction tuning samples.

**Embedding-oriented Decoder Alignment Tuning.** Besides using explicit textual instruction to invocate downstream modules, the signal feature embedding/representation (from LLM) should also be fed to the modules. Following [114], we align the feature embedding with all the visual modules' input encoders via the decoding-side projection layers, i.e., by minimizing their distances.

### Fine-grained Spatiotemporal Vision Grounding Instruction Tuning

A visual generalist should require a strong capability of pixel-aware vision understanding of both images and videos. Thus, we propose a fine-grained spatiotemporal vision grounding instruction tuning for Vitron. The core idea is to enable the LLM to ground the fine-grained spatiality of images and the detailed temporality of videos. Appendix SSB.2 extends more detailed descriptions of the following three learning aspects.

**Image Spatial Grounding.** Considering that the LLM alone can only output text, we design it to respond with the corresponding bounding box areas. We focus on two types of tasks: grounded image captioning [133, 137] and referring image segmentation [40].

**Video Spatial-Temporal Grounding.** For videos, the LLM must identify spatial regions and ground them within the temporal context of the video, essentially achieving video tracking. Similarly, we explore tasks such as grounded video captioning [136] and referring video tracking [107].

**Grounding-aware Vision QA.** The grounding tasks mentioned above only touch upon the low-level aspects of vision perception. However, in many scenarios, it's essential for the LLM to possess high-level, in-depth vision reasoning capabilities, building upon the foundational low-level pixel grounding. Thus, we further introduce grounding-aware vision QA, including Image-QA [88, 37] and Video-QA [124], enabling LLM to undertake semantic-level QA tasks based on the grounded results.

### Cross-task Synergy Learning

As a generalist, directly invoking different specialists leads to a critical issue: _how to ensure that the different modules (tasks) work together synergistically?_ Otherwise, without such collaboration,

Figure 3: Illustration of the synergy module.

[MISSING_PAGE_FAIL:7]

shown in Tables 5 illustrate that Vitro surpasses the best baseline across various datasets and metrics, proving its strong and accurate fine-grained semantic understanding of images.

The above two tasks focus solely on the model's ability to recognize at the region level. Taking a step further, we delve deeper into assessing the capability for image semantics understanding, particularly through image-based Visual Question Answering (VQA) tasks. These tasks effectively reflect the model's proficiency in comprehending the deeper semantic content of images. Table 6 displays the results across a series of six datasets for image-based VQA. We primarily compare two groups of models: those with and without pixel-wise vision grounding capabilities. The findings indicate that models equipped with fine-grained grounding abilities indeed show stronger task performance, suggesting that fine-grained grounding contributes to a more profound understanding of semantics. Notably, our Vitro achieves the highest performance among the models evaluated.

Region-level Video Understanding.Similarly, for videos, we evaluate the Region-level Video Understanding capability. Building on observations from images, we now directly engage in video QA tasks. Table 7 presents the results on video QA across four representative datasets. Interestingly, while PG-Video-LLaVA has video grounding capabilities, it does not show better results than Video-LLaVA, which lacks grounding. However, our Vitro achieves superior performance. This indirectly proves that our system possesses more accurate video grounding capabilities (as previously demonstrated in Table 8), along in better video semantics understanding.

### Results on Vision Generation

Next, we assess our system's capabilities in vision generation, focusing on three of the most representative types of generation tasks: text-to-image generation, text-to-video generation, and image-to-video generation. These tasks broadly cover the spectrum of image generation requirements. Tables 8, 9, and 10 showcase how our Vitro performs in comparison to other SoTA systems, including both MLLM and non-MLLM synthesizers. The results clearly demonstrate that Vitro outperforms on all three tasks. For instance, in both text-to-image and text-to-video generation tasks, Vitro shows more advanced performance compared to NExT-GPT. Similarly, in the image-to-video generation task, Vitro still outshines the SoTA baseline, VideoCrafter1, showcasing superior results.

### Results on Vision Editing

Image Editing.We use the MagicBrush dataset [129], which challenges models with an editing query that demands a series of complex edits to an image. These edits include removing, changing, inpainting, and adding elements. Since there are currently no MLLM systems that support image editing, our comparison is limited to non-LLM expert systems. In Table 11, we present the performance of different models across various metrics. Vitro demonstrates stronger performance on all metrics, indicating its stable image editing capabilities.

\begin{table}
\begin{tabular}{l c c c} \hline
**Method** & **Ground?** & **OKVQA [88]** & **GQA [37]** \\ \hline Flaminging [1] & ✗ & 44.7 & - \\ BLIP-2 [49] & ✗ & 45.9 & 41.0 \\ InstructBLIP [17] & ✗ & - & 49.5 \\ MiniGPT-4 [138] & ✗ & 37.5 & 30.8 \\ LLaVA [63] & ✗ & 54.4 & 41.3 \\ Shixra [12] & ✓ & 47.2 & - \\ MiniGPT-2 [11] & ✓ & 57.8 & 60.1 \\ \hline
**Vitron** & ✗ & **59.4** & **62.1** \\ \multicolumn{3}{l}{w/o syng.} & ✓ & -2.0 & -1.7 \\ \hline \end{tabular}
\end{table}
Table 6: Results (accuracy) on image-based VQA.

\begin{table}
\begin{tabular}{l c c c} \hline
**Method** & **FID (\(\downarrow\))** & **CLIPSIM (\(\uparrow\))** \\ \hline CGIDE [75] & 12.24 \\ SD [86] & 11.21 \\ NExT-GPT [114] & 11.28 \\ Emu [96] & 11.66 \\ GILL [43] & 12.20 \\ DreamLLM [20] & 8.46 \\ \multicolumn{3}{l}{NET-GPT [114]} \\ \multicolumn{3}{l}{w/o syng.} & **7.57** \\ \hline \end{tabular} 
\begin{tabular}{l c c} \hline
**Method** & **FID (\(\downarrow\))** & **CLIPSIM (\(\uparrow\))** \\ \hline CGVideo [33] & 23.59 & 0.2631 \\ MakeVideo [92] & 13.17 & 0.3049 \\ Latent-VDM [86] & 14.25 & 0.2756 \\ Latent-Shift [2] & 15.23 & 0.2773 \\ CoDi [97] & — & 0.2890 \\ NExT-GPT [114] & 13.04 & 0.3085 \\ \multicolumn{3}{l}{WITron} & **10.11** & **0.3682** \\ w/o syng. & +3.17 & -0.5672 \\ \hline \end{tabular}
\end{table}
Table 10: Image-to-Video generation on UCF101 [93].

\begin{table}
\begin{tabular}{l c c c} \hline
**Method** & **FVD (\(\downarrow\))** & **IS (\(\uparrow\))** \\ \hline AnimateAny [18] & 642.64 & 63.87 \\ DynamiCrafter [116] & 404.50 & 41.97 \\ SEINE [13] & 306.49 & 54.02 \\ VideoCrafter1 [10] & 297.62 & 50.88 \\ \multicolumn{3}{l}{WITron} & **175.46** & **56.89** \\ w/o syng. & +96.24 & -5.03 \\ \hline \end{tabular}
\end{table}
Table 10: Image-to-Video generation on UCF101 [93].

\begin{table}
\begin{tabular}{l c c c} \hline
**Method** & **Ground?** & **OKVQA [88]** & **GQA [37]** \\ \hline Flaming [1] & ✗ & 44.7 & - \\ BLIP-2 [49] & ✗ & 45.9 & 41.0 \\ InstructBLIP [17] & ✗ & - & 49.5 \\ MiniGPT-4 [138] & ✗ & 37.5 & 30.8 \\ LLaVA [63] & ✗ & 54.4 & 41.3 \\ Shixra [12] & ✓ & 47.2 & - \\ MiniGPT-2 [11] & ✓ & 57.8 & 60.1 \\ \multicolumn{3}{l}{Vitron} & ✗ & **59.4** & **62.1** \\ \multicolumn{3}{l}{w/o syng.} & ✓ & -2.0 & -1.7 \\ \hline \end{tabular}
\end{table}
Table 7: Results (accuracy and confidence Score) on video QA.

\begin{table}
\begin{tabular}{l c c c} \hline
**Method** & **FVD (\(\downarrow\))** & **CSIPIM (\(\uparrow\))** \\ \hline AnimateAny [18] & 642.64 & 63.87 \\ DynamiCrafter [116] & 404.50 & 41.97 \\ SEINE [13] & 306.49 & 54.02 \\ VideoCrafter1 [10] & 297.62 & 50.88 \\ \multicolumn{3}{l}{WITron} & **175.46** & **56.89** \\ w/o syng. & +96.24 & -5.03 \\ \hline \end{tabular}
\end{table}
Table 10: Image-to-Video generation on UCF101 [93].

Video Editing.For video editing, the community currently lacks a standardized benchmark and evaluation method akin to those for image editing. Therefore, we opted for a manual evaluation approach. We asked different video editing systems to edit the same video based on the same query, after which five individuals were asked to score the edited videos. The evaluation focused on 1) the success of target content modifications and 2) the faithfulness/fidelity of non-target content. Table 12 presents the manual evaluation results for video editing. It is clear that Vitron outperforms the two baseline systems in both respects, showcasing superior video editing capabilities. Following this, we visualized the process of video editing by Vitron.

## 6 Discussions

Above we demonstrate the overall efficacy of Vitron via extensive quantitative comparison. Now we take one step further, exploring how and why the system advances via in-depth analyses.

\(\blacktriangleright\)**Discrete Textual Instruction or Continuous Signal Embedding, Which Better?Firstly, we explore different message-passing mechanisms to determine whether discrete textual instruction is more beneficial, or whether continuous signal embedding is better for building a multi-modal generalist. Also, we validate the pros and cons of the proposed hybrid method of message passing. We conduct tests on 6 tasks, where we compare the task performance of Vitron using the hybrid method (default setting), without signal embedding and without text instruction, as well as the successful execution rate of the backend task module. Fig. 4 presents the results. As can be observed, overall, the performance under scenarios utilizing both methods is consistently better, which confirms the effectiveness of our hybrid mode. Meanwhile, we find that the method of text instruction is more conducive to the successful execution of backend modules, but soft feature embedding seems to be more useful in terms of specific task performances.

\(\blacktriangleright\)**How Much Does Each Fine-grained Visual Grounding Learning Contribute?Next, we validate the specific contribution of the various fine-grained visual grounding learning strategies proposed in SS4.2. Fig. 5 (the top 4 relate to image tasks, and the bottom 4 to video tasks) shows the impact on performance when a particular learning strategy is removed. Generally, all these 3 types of fine-grained visual grounding learning strategies are vital for different downstream tasks. For instance, grounding and referring segmentation tasks directly influence fine-grained visual recognition tasks, whereas tuning for grounding-aware visual QA considerably boosts cognition level QA tasks. This verifies the efficacy of our proposed fine-grained visual grounding tuning strategies.

\(\blacktriangleright\)**Does Vitron Really Achieve Cross-task Synergy?Finally, we investigate if our system could adequately support cross-task synergy. Based on the results of the ablation item for the'synergy

Figure 4: The influences of using different strategies for message passing.

\begin{table}
\begin{tabular}{l c c c c} \hline
**Method** & **CLIP\({}_{dir}\) (\(\uparrow\))** & **CLIP\({}_{img}\) (\(\uparrow\))** & **CLIP\({}_{out}\) (\(\uparrow\))** & **LI (\(\downarrow\))** \\ \hline InstructPixPix [6] & 0.115 & 0.837 & 0.245 & 0.093 \\ MagicBrush [129] & 0.123 & 0.883 & 0.261 & 0.058 \\ Pap [101] & 0.025 & 0.568 & 0.101 & 0.280 \\ NT-Inv [71] & 0.121 & 0.752 & 0.263 & 0.077 \\ Emu-Edit [91] & 0.135 & 0.897 & 0.261 & 0.052 \\ \hline
**Vitron** & **0.142** & **0.910** & **0.274** & **0.047** \\ \hline w/o syng. & -0.012 & -0.104 & -0.078 & + 0.036 \\ \hline \end{tabular}
\end{table}
Table 11: Image editing results on MagicBrush [129].

module' in Table 2 to Table 12, we can observe that the synergy learning mechanism indeed positively influences overall performance. In Fig. 6 we further study whether there is synergy between different tasks and their collaborative relations. For ease of study, we considered a one-to-one mapping relationship, studying the cooperation between pairs of tasks one at a time. It is evident that the cooperative effects vary between different tasks. Tasks or backbone modules that rely more heavily on fine-grained visual features gained more significant improvements. This also demonstrates that our synergy learning module can successfully facilitate cross-task synergy.

## 7 Conclusion

In this work, we present Vitron, a grand unified pixel-level vision LLM for seamlessly understanding (perceiving and reasoning), generating, segmenting (grounding and tracking), and editing (inpainting) both images and videos. We further introduce a novel hybrid method of message passing that combines discrete textual instructions with continuous signal embeddings to ensure precise function invocation. Furthermore, Vitron employs pixel-level spatiotemporal vision-language alignment to enhance its fine-grained visual capabilities. A cross-task synergy module is also developed to optimize the use of task-invariant fine-grained visual features, boosting synergy across various visual tasks. On 12 visual tasks across 22 datasets, Vitron exhibits extensive capabilities in visual segmentation, fine-grained vision understanding, generation, and editing. Overall, this research showcases the great potential to build a vision-language generalist that can advance toward a more unified AI.

## Acknowledgements

This research is supported by Skywork AI, NExT++ Research Center.

Figure 5: The impact of various fine-grained visual grounding learning strategies.

Figure 6: The synergy correlation between each pair of visual tasks. The deeper the color of the cell, the more synergistic they are in between.

## References

* [1]J. Alyrac, J. Donahue, P. Luc, A. Miech, I. Barr, Y. Hasson, K. Lenc, A. Mensch, K. Millican, M. Reynolds, R. Ring, E. Rutherford, S. Cabi, T. Han, Z. Gong, S. Samangooei, M. Monteiro, J. L. Menick, S. Borgeaud, A. Brock, A. Nematzadeh, S. Sharifzadeh, M. Binkowski, R. Barreira, O. Vinyals, A. Zisserman, and K. Simonyan (2022) Flamingo: a visual language model for few-shot learning. In Proceedings of the NeurIPS, Cited by: SS1.
* [2]J. An, S. Zhang, H. Yang, S. Gupta, J. Huang, J. Luo, and X. Yin (2023) Latent-shift: latent diffusion with temporal shift for efficient text-to-video generation. CoRRabs/2304.08477. Cited by: SS1.
* [3]T. Bai, J. Luo, J. Zhao, B. Wen, and Q. Wang (2021) Recent advances in adversarial training for adversarial robustness. In Proceedings of the IJCAI, pp. 4312-4321. Cited by: SS1.
* [4]M. Bain, A. Nagrani, G. Varol, and A. Zisserman (2021) Frozen in time: a joint video and image encoder for end-to-end retrieval. In Proceedings of the ICCV, pp. 1708-1718. Cited by: SS1.
* [5]O. Bar-Tal, D. Ofri-Amar, R. Fridman, Y. Kasten, and T. Dekel (2022) Text2live: text-driven layered image and video editing. In Proceedings of the ECCV, pp. 707-723. Cited by: SS1.
* [6]T. Brooks, A. Holynski, and A. A. Efros (2023) Instructpix2pix: learning to follow image editing instructions. In Proceedings of the CVPR, pp. 18392-18402. Cited by: SS1.
* [7]N. Carion, F. Massa, G. Synnaeve, N. Usunier, A. Kirillov, and S. Zagoruyko (2020) End-to-end object detection with transformers. In Proceedings of the ECCV, Cited by: SS1.
* [8]C. C. (2023) Zeroscope: diffusion-based text-to-video synthesis. External Links: Link Cited by: SS1.
* [9]W. Chai, X. Guo, G. Wang, and Y. Lu (2023) StableVideo: text-driven consistency-aware diffusion video editing. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pp. 23040-23050. Cited by: SS1.
* [10]H. Chen, M. Xia, Y. He, Y. Zhang, X. Cun, S. Yang, J. Xing, Y. Liu, Q. Chen, X. Wang, et al. (2023) VideoCarfter1: open diffusion models for high-quality video generation. arXiv preprint arXiv:2310.19512. Cited by: SS1.
* [11]J. Chen, D. Zhu, X. Shen, X. Li, Z. Liu, P. Zhang, R. Krishnamoorthi, V. Chandra, Y. Xiong, and M. Elhoseiny (2023) MinigPT-v2: large language model as a unified interface for vision-language multi-task learning. arXiv preprint arXiv:2310.09478. Cited by: SS1.
* [12]K. Chen, Z. Zhang, W. Zeng, R. Zhang, F. Zhu, and R. Zhao (2023) Shikra: unleashing multimodal llm's referential dialogue magic. arXiv preprint arXiv:2306.15195. Cited by: SS1.
* [13]X. Chen, Y. Wang, L. Zhang, S. Zhuang, X. Ma, J. Yu, Y. Wang, D. Lin, Y. Qiao, and Z. Liu (2023) Seine: short-to-long video diffusion model for generative transition and prediction. In Proceedings of the ICLR, Cited by: SS1.
* [14]H. K. Cheng and A. G. Schwing (2022) Xmem: long-term video object segmentation with an Atkinson-shiftin memory model. In Proceedings of the ECCV, pp. 640-658. Cited by: SS1.
* [15]W. Chiang, Z. Li, Z. Lin, Y. Sheng, Z. Wu, H. Zhang, L. Zheng, S. Zhuang, Y. Zhuang, J. E. Gonzalez, I. Stoica, and E. P. Xing (2023) Vicuna: an open-source chatbot imressing gpt-4 with 90 2023. Cited by: SS1.
* [16]H. W. Chung, L. Hou, S. Longpre, B. Zoph, Y. Tay, W. Fedus, E. Li, X. Wang, M. Dehghani, S. Brahma, A. W. Wenson, S. Shane Gu, Z. Dai, M. Suzgun, X. Chen, A. Chowdhery, S. Narang, G. Mishra, A. Yu, V. Y. Zhao, Y. Huang, A. M. Dai, H. Yu, S. Petrov, E. H. Chi, J. Dean, J. Devlin, A. Roberts, D. Zhou, Q. V. Le, and J. Wei (2022) Scaling instruction-finetuned language models. CoRRabs/2210.11416. Cited by: SS1.
* [17]W. Dai, J. Li, D. Li, A. M. Tiong, J. Zhao, W. Wang, B. Li, P. Fung, and S. C. H. Hoi (2023) InstructDiblp: towards general-purpose vision-language models with instruction tuning. CoRRabs/2305.06500. Cited by: SS1.
* [18]Z. Dai, Z. Zhang, Y. Yao, B. Qiu, S. Zhu, L. Qin, and W. Wang (2023) Fine-grained open domain image animation with motion guidance. arXiv preprint arXiv:2311.12886. Cited by: SS1.
* [19]W. Dai, J. Li, D. Li, A. M. Tiong, J. Zhao, W. Wang, B. Li, P. Fung, and S. C. H. Hoi (2023) InstructDiblp: towards general-purpose vision-language models with instruction tuning. CoRRabs/2305.06500. Cited by: SS1.
* [20]W. Dai, J. Li, D. Li, A. M. Tiong, J. Zhao, W. Wang, B. Li, P. Fung, and S. C. H. Hoi (2023) InstructDiblp: towards general-purpose vision-language models with instruction tuning. CoRRabs/2305.06500. Cited by: SS1.
* [21]W. Dai, J. Li, D. Li, A. M. Tiong, J. Zhao, W. Wang, B. Li, P. Fung, and S. C. H. Hoi (2023) InstructDiblp: towards general-purpose vision-language models with instruction tuning. CoRRabs/2305.06500. Cited by: SS1.
* [22]W. Dai, J. Li, D. Li, A. M. Tiong, J. Zhao, W. Wang, B. Li, P. Fung, and S. C. H. Hoi (2023) InstructDiblp: towards general-purpose vision-language models with instruction tuning. CoRRabs/2305.06500. Cited by: SS1.
* [23]W. Dai, J. Li, D. Li, A. M. Tiong* [19] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical image database. In _Proceedings of the CVPR_, pages 248-255. Ieee, 2009.
* [20] Runpei Dong, Chunrui Han, Yuang Peng, Zekun Qi, Zheng Ge, Jinrong Yang, Liang Zhao, Jianjian Sun, Hongyu Zhou, Haoran Wei, et al. Dreamllm: Synergistic multimodal comprehension and creation. _arXiv preprint arXiv:2309.11499_, 2023.
* [21] Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, and Neil Houlsby. An image is worth 16x16 words: Transformers for image recognition at scale. In _Proceedings of the ICLR_, 2021.
* [22] Heng Fan, Liting Lin, Fan Yang, Peng Chu, Ge Deng, Sijia Yu, Hexin Bai, Yong Xu, Chunyuan Liao, and Haibin Ling. Lasot: A high-quality benchmark for large-scale single object tracking. In _Proceedings of the CVPR_, pages 5374-5383, 2019.
* [23] Hao Fei, Qian Liu, Meishan Zhang, Min Zhang, and Tat-Seng Chua. Scene graph as pivoting: Inference-time image-free unsupervised multimodal machine translation with visual scene hallucination. In _Proceedings of the ACL_, pages 5980-5994, 2023.
* [24] Hao Fei, Shengqiong Wu, Wei Ji, Hanwang Zhang, and Tat-Seng Chua. Dysen-vdm: Empowering dynamics-aware text-to-video diffusion with llms. In _Proceedings of the CVPR_, pages 7641-7653, 2024.
* [25] Hao Fei, Shengqiong Wu, Wei Ji, Hanwang Zhang, Meishan Zhang, Mong-Li Lee, and Wynne Hsu. Video-of-thought: Step-by-step video reasoning from perception to cognition. In _Proceedings of the ICML_, 2024.
* [26] Hao Fei, Shengqiong Wu, Meishan Zhang, Min Zhang, Tat-Seng Chua, and Shuicheng Yan. Enhancing video-language representations with structural spatio-temporal alignment. _IEEE Transactions on Pattern Analysis and Machine Intelligence_, 2024.
* [27] Hao Fei, Yuan Yao, Zhuosheng Zhang, Fuxiao Liu, Ao Zhang, and Tat-Seng Chua. From multimodal llm to human-level ai: Modality, instruction, reasoning, efficiency and beyond. In _Proceedings of the COLING: Tutorial Summaries_, pages 1-8, 2024.
* [28] Weixi Feng, Xuehai He, Tsu-Jui Fu, Varun Jampani, Arjun R. Akula, Pradyumna Narayana, Sugato Basu, Xin Eric Wang, and William Yang Wang. Training-free structured diffusion guidance for compositional text-to-image synthesis. _CoRR_, abs/2212.05032, 2022.
* [29] Yaroslav Ganin, Evgeniya Ustinova, Hana Ajakan, Pascal Germain, Hugo Larochelle, Francois Laviolette, Mario March, and Victor Lempitsky. Domain-adversarial training of neural networks. _Journal of machine learning research_, 17(59):1-35, 2016.
* [30] Peng Gao, Jiaming Han, Renrui Zhang, Ziyi Lin, Shijie Geng, Aojun Zhou, Wei Zhang, Pan Lu, Conghui He, Xiangyu Yue, et al. Llama-adapter v2: Parameter-efficient visual instruction model. _arXiv preprint arXiv:2304.15010_, 2023.
* [31] Xin Gu, Guang Chen, Yufei Wang, Libo Zhang, Tiejian Luo, and Longyin Wen. Text with knowledge graph augmented transformer for video captioning. In _Proceedings of the CVPR_, pages 18941-18951, 2023.
* [32] Danna Gurari, Qing Li, Abigale J Stangl, Anhong Guo, Chi Lin, Kristen Grauman, Jiebo Luo, and Jeffrey P Bigham. Vizwiz grand challenge: Answering visual questions from blind people. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 3608-3617, 2018.
* [33] Wenyi Hong, Ming Ding, Wendi Zheng, Xinghan Liu, and Jie Tang. Cogvideo: Large-scale pretraining for text-to-video generation via transformers. _CoRR_, abs/2205.15868, 2022.
* [34] Emiel Hoogeboom, Didrik Nielsen, Priyank Jaini, Patrick Forre, and Max Welling. Argmax flows and multinomial diffusion: Towards non-autoregressive language models. _CoRR_, 2021.
* [35] Edward J. Hu, Yelong Shen, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, Lu Wang, and Weizhu Chen. Lora: Low-rank adaptation of large language models. In _Proceedings of the ICLR_, 2022.
* [36] Lianghua Huang, Xin Zhao, and Kaiqi Huang. Got-10k: A large high-diversity benchmark for generic object tracking in the wild. _IEEE transactions on pattern analysis and machine intelligence_, 43(5):1562-1577, 2019.

* [37] Drew A Hudson and Christopher D Manning. Gqa: A new dataset for real-world visual reasoning and compositional question answering. In _Proceedings of the CVPR_, pages 6700-6709, 2019.
* [38] Jiayi Ji, Yunpeng Luo, Xiaoshuai Sun, Fuhai Chen, Gen Luo, Yongjian Wu, Yue Gao, and Rongrong Ji. Improving image captioning by leveraging intra-and inter-layer global representation in transformer network. In _Proceedings of the AAAI_, pages 1655-1663, 2021.
* [39] Jiayi Ji, Yiwei Ma, Xiaoshuai Sun, Yiyi Zhou, Yongjian Wu, and Rongrong Ji. Knowing what to learn: a metric-oriented focal mechanism for image captioning. _IEEE Transactions on Image Processing_, 31:4321-4335, 2022.
* [40] Sahar Kazemzadeh, Vicente Ordonez, Mark Matten, and Tamara Berg. Referitgame: Referring to objects in photographs of natural scenes. In _Proceedings of the EMNLP_, pages 787-798, 2014.
* [41] Douwe Kiela, Hamed Firooz, Aravind Mohan, Vedanuj Goswami, Amanpreet Singh, Pratik Ringshia, and Davide Testuggine. The hateful memes challenge: Detecting hate speech in multimodal memes. 33:2611-2624, 2020.
* [42] Alexander Kirillov, Eric Mintun, Nikhila Ravi, Hanzi Mao, Chloe Rolland, Laura Gustafson, Tete Xiao, Spencer Whitehead, Alexander C Berg, Wan-Yen Lo, et al. Segment anything. _arXiv preprint arXiv:2304.02643_, 2023.
* [43] Jing Yu Koh, Daniel Fried, and Russ R Salakhutdinov. Generating images with multimodal language models. In _Proceedings of the NeurIPS_, 2023.
* [44] Ranjay Krishna, Yuke Zhu, Oliver Groth, Justin Johnson, Kenji Hata, Joshua Kravitz, Stephanie Chen, Yannis Kalantidis, Li-Jia Li, David A. Shamma, Michael S. Bernstein, and Li Fei-Fei. Visual genome: Connecting language and vision using crowdsourced dense image annotations. _International Journal of Computer Vision_, 123(1):32-73, 2017.
* [45] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification with deep convolutional neural networks. _Communications of the ACM_, 60(6):84-90, 2017.
* [46] Xin Lai, Zhuotao Tian, Yukang Chen, Yanwei Li, Yuhui Yuan, Shu Liu, and Jiaya Jia. Lisa: Reasoning segmentation via large language model. _arXiv preprint arXiv:2308.00692_, 2023.
* [47] Juncheng Li, Kaihang Pan, Zhiqi Ge, Minghe Gao, Hanwang Zhang, Wei Ji, Wenqiao Zhang, Tat-Seng Chua, Siliang Tang, and Yueting Zhuang. Fine-tuning multimodal lms to follow zero-shot demonstrative instructions. In _Proceedings of the ICLR_, 2023.
* [48] Juncheng Li, Siliang Tang, Linchao Zhu, Wenqiao Zhang, Yi Yang, Tat-Seng Chua, and Fei Wu. Variational cross-graph reasoning and adaptive structured semantics learning for compositional temporal grounding. _IEEE Transactions on Pattern Analysis and Machine Intelligence_, 2023.
* [49] Junnan Li, Dongxu Li, Silvio Savarese, and Steven C. H. Hoi. BLIP-2: bootstrapping language-image pre-training with frozen image encoders and large language models. In _Proceedings of the ICML_, pages 19730-19742, 2023.
* [50] Kunchang Li, Yinan He, Yi Wang, Yizhuo Li, Wenhai Wang, Ping Luo, Yali Wang, Limin Wang, and Yu Qiao. Videochat: Chat-centric video understanding. _CoRR_, abs/2305.06355, 2023.
* [51] Mingxing Li, Li Hu, Zhiwei Xiong, Bang Zhang, Pan Pan, and Dong Liu. Recurrent dynamic embedding for video object segmentation. In _Proceedings of the CVPR_, pages 1332-1341, 2022.
* [52] Xiangtai Li, Wenwei Zhang, Jiangmiao Pang, Kai Chen, Guangliang Cheng, Yunhai Tong, and Chen Change Loy. Video k-net: A simple, strong, and unified baseline for video segmentation. In _Proceedings of the CVPR_, 2022.
* [53] Xiangtai Li, Haobo Yuan, Wenwei Zhang, Guangliang Cheng, Jiangmiao Pang, and Chen Change Loy. Tube-link: A flexible cross tube baseline for universal video segmentation. In _Proceedings of the ICCV_, 2023.
* [54] Xiangtai Li, Henghui Ding, Wenwei Zhang, Haobo Yuan, Guangliang Cheng, Pang Jiangmiao, Kai Chen, Ziwei Liu, and Chen Change Loy. Transformer-based visual segmentation: A survey. _IEEE Transactions on Pattern Analysis and Machine Intelligence_, 2024.
* [55] Xiangtai Li, Haobo Yuan, Wei Li, Henghui Ding, Size Wu, Wenwei Zhang, Yining Li, Kai Chen, and Chen Change Loy. Omg-seg: Is one model good enough for all segmentation? In _Proceedings of the CVPR_, 2024.

* [56] Yicong Li, Xiang Wang, Junbin Xiao, Wei Ji, and Tat-Seng Chua. Invariant grounding for video question answering. In _Proceedings of the CVPR_, pages 2918-2927, 2022.
* [57] Yuheng Li, Haotian Liu, Qingyang Wu, Fangzhou Mu, Jianwei Yang, Jianfeng Gao, Chunyuan Li, and Yong Jae Lee. Gligen: Open-set grounded text-to-image generation. In _Proceedings of the CVPR_, pages 22511-22521, 2023.
* [58] Yuncheng Li, Yale Song, Liangliang Cao, Joel Tetreault, Larry Goldberg, Alejandro Jaimes, and Jiebo Luo. Tgif: A new dataset and benchmark on animated gif description. In _Proceedings of the CVPR_, pages 4641-4650, 2016.
* [59] Bin Lin, Bin Zhu, Yang Ye, Munan Ning, Peng Jin, and Li Yuan. Video-llava: Learning united visual representation by alignment before projection. _arXiv preprint arXiv:2311.10122_, 2023.
* [60] Tsung-Yi Lin, Michael Maire, Serge J. Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr Dollar, and C. Lawrence Zitnick. Microsoft COCO: common objects in context. In David J. Fleet, Tomas Pajdla, Bernt Schiele, and Tinne Tuytelaars, editors, _Proceedings of the ECCV_, pages 740-755, 2014.
* [61] Chang Liu, Henghui Ding, and Xudong Jiang. Gres: Generalized referring expression segmentation. In _Proceedings of the CVPR_, pages 23592-23601, 2023.
* [62] Fangyu Liu, Guy Emerson, and Nigel Collier. Visual spatial reasoning. _Transactions of the Association for Computational Linguistics_, 11:635-651, 2023.
* [63] Haotian Liu, Chunyuan Li, Qingyang Wu, and Yong Jae Lee. Visual instruction tuning. _CoRR_, abs/2304.08485, 2023.
* [64] Shilong Liu, Hao Cheng, Haotian Liu, Hao Zhang, Feng Li, Tianhe Ren, Xueyan Zou, Jianwei Yang, Hang Su, Jun Zhu, et al. Llava-plus: Learning to use tools for creating multimodal agents. _arXiv preprint arXiv:2311.05437_, 2023.
* [65] Shilong Liu, Zhaoyang Zeng, Tianhe Ren, Feng Li, Hao Zhang, Jie Yang, Chunyuan Li, Jianwei Yang, Hang Su, Jun Zhu, et al. Grounding dino: Marrying dino with grounded pre-training for open-set object detection. _arXiv preprint arXiv:2303.05499_, 2023.
* [66] Pan Lu, Liang Qiu, Jiaqi Chen, Tony Xia, Yizhou Zhao, Wei Zhang, Zhou Yu, Xiaodan Liang, and Song-Chun Zhu. Iconqa: A new benchmark for abstract diagram understanding and visual language reasoning. _arXiv preprint arXiv:2110.13214_, 2021.
* [67] Muhammad Maaz, Hanoona Abdul Rasheed, Salman H. Khan, and Fahad Shahbaz Khan. Video-chatgpt: Towards detailed video understanding via large vision and language models. _CoRR_, abs/2306.05424, 2023.
* [68] Junhua Mao, Jonathan Huang, Alexander Toshev, Qana Camburu, Alan L Yuille, and Kevin Murphy. Generation and comprehension of unambiguous object descriptions. In _Proceedings of the CVPR_, pages 11-20, 2016.
* [69] Anton Milan, Laura Leal-Taixe, Ian Reid, Stefan Roth, and Konrad Schindler. Mot16: A benchmark for multi-object tracking. _arXiv preprint arXiv:1603.00831_, 2016.
* [70] Victor Siemen Janusz Milewski, Marie-Francine Moens, and Iacer Calixto. Are scene graphs good enough to improve image captioning? In _Proceedings of the AACL_, pages 504-515, 2020.
* [71] Ron Mokady, Amir Hertz, Kfir Aberman, Yael Pritch, and Daniel Cohen-Or. Null-text inversion for editing real images using guided diffusion models. In _Proceedings of the CVPR_, pages 6038-6047, 2023.
* [72] Meredith Ringel Morris, Jascha Sohl-dickstein, Noah Fiedel, Tris Warkentin, Allan Dafoe, Aleksandra Faust, Clement Farabet, and Shane Legg. Levels of agi: Operationalizing progress on the path to agi. _arXiv preprint arXiv:2311.02462_, 2023.
* [73] Chong Mou, Xintao Wang, Liangbin Xie, Jian Zhang, Zhongang Qi, Ying Shan, and Xiaohu Qie. T2i-adapter: Learning adapters to dig out more controllable ability for text-to-image diffusion models. _arXiv preprint arXiv:2302.08453_, 2023.
* [74] Shehan Munasinghe, Rusiru Thushara, Muhammad Maaz, Hanoona Abdul Rasheed, Salman Khan, Mubarak Shah, and Fahad Khan. Pg-video-llava: Pixel grounding large video-language models. _arXiv preprint arXiv:2311.13435_, 2023.

* [75] Alexander Quinn Nichol, Prafulla Dhariwal, Aditya Ramesh, Pranav Shyam, Pamela Mishkin, Bob McGrew, Ilya Sutskever, and Mark Chen. GLIDE: towards photorealistic image generation and editing with text-guided diffusion models. In _Proceedings of the ICML_, pages 16784-16804, 2022.
* [76] OpenAI. Introducing chatgpt. 2022.
* [77] OpenAI. Gpt-4 technical report. 2022.
* [78] Zhiliang Peng, Wenhui Wang, Li Dong, Yaru Hao, Shaohan Huang, Shuming Ma, and Furu Wei. Kosmos-2: Grounding multimodal large language models to the world. _arXiv preprint arXiv:2306.14824_, 2023.
* [79] Bryan A Plummer, Liwei Wang, Chris M Cervantes, Juan C Caicedo, Julia Hockenmaier, and Svetlana Lazebnik. Flickr30k entities: Collecting region-to-phrase correspondences for richer image-to-sentence models. In _Proceedings of the ICCV_, pages 2641-2649, 2015.
* [80] Jordi Pont-Tuset, Federico Perazzi, Sergi Caelles, Pablo Arbelaez, Alex Sorkine-Hornung, and Luc Van Gool. The 2017 davis challenge on video object segmentation. _arXiv preprint arXiv:1704.00675_, 2017.
* [81] Long Qian, Juncheng Li, Yu Wu, Yaobo Ye, Hao Fei, Tat-Seng Chua, Yueting Zhuang, and Siliang Tang. Momentor: Advancing video large language model with fine-grained temporal reasoning. In _Proceedings of the ICML_, 2024.
* [82] Leigang Qu, Shengqiong Wu, Hao Fei, Liqiang Nie, and Tat-Seng Chua. Layoutllm-t2i: Eliciting layout guidance from LLM for text-to-image generation. In _Proceedings of the ACM MM_, pages 643-654, 2023.
* [83] Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, Gretchen Krueger, and Ilya Sutskever. Learning transferable visual models from natural language supervision. In _Proceedings of the ICML_, pages 8748-8763, 2021.
* [84] Hanoona Rasheed, Muhammad Maaz, Sahal Shaji, Abdelrahman Shaker, Salman Khan, Hisham Cholakkal, Rao M Anwer, Erix Xing, Ming-Hsuan Yang, and Fahad S Khan. Glamm: Pixel grounding large multimodal model. _arXiv preprint arXiv:2311.03356_, 2023.
* [85] Zhongwei Ren, Zhicheng Huang, Yunchao Wei, Yao Zhao, Dongmei Fu, Jiashi Feng, and Xiaojie Jin. Pixellm: Pixel reasoning with large multimodal model. _arXiv preprint arXiv:2312.02228_, 2023.
* [86] Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Bjorn Ommer. High-resolution image synthesis with latent diffusion models. In _Proceedings of the CVPR_, pages 10674-10685, 2022.
* [87] Christoph Schuhmann, Richard Vencu, Romain Beaumont, Robert Kaczmarczyk, Clayton Mullis, Aarush Katta, Theo Coombes, Jenia Jitsev, and Aran Komatsuzaki. Laion-400m: Open dataset of clip-filtered 400 million image-text pairs. _arXiv preprint arXiv:2111.02114_, 2021.
* [88] Dustin Schwenk, Apoorv Khandelwal, Christopher Clark, Kenneth Marino, and Roozbeh Mottaghi. A-okvqa: A benchmark for visual question answering using world knowledge. In _Proceedings of the ECCV_, pages 146-162, 2022.
* [89] Piyush Sharma, Nan Ding, Sebastian Goodman, and Radu Soricut. Conceptual captions: A cleaned, hypernymed, image alt-text dataset for automatic image captioning. In _Proceedings of the ACL_, pages 2556-2565, 2018.
* [90] Yongliang Shen, Kaitao Song, Xu Tan, Dongsheng Li, Weiming Lu, and Yueting Zhuang. Hugginggt: Solving AI tasks with chatgpt and its friends in huggingface. _CoRR_, abs/2303.17580, 2023.
* [91] Shelly Sheynin, Adam Polyak, Uriel Singer, Yuval Kirstain, Amit Zohar, Oron Ashual, Devi Parikh, and Yaniv Taigman. Emu edit: Precise image editing via recognition and generation tasks. _arXiv preprint arXiv:2311.10089_, 2023.
* [92] Uriel Singer, Adam Polyak, Thomas Hayes, Xi Yin, Jie An, Songyang Zhang, Qiyuan Hu, Harry Yang, Oron Ashual, Oran Gafni, Devi Parikh, Sonal Gupta, and Yaniv Taigman. Make-a-video: Text-to-video generation without text-video data. _CoRR_, abs/2209.14792, 2022.
* [93] Khurram Soomro, Amir Roshan Zamir, and Mubarak Shah. Ucf101: A dataset of 101 human actions classes from videos in the wild. _arXiv preprint arXiv:1212.0402_, 2012.
* [94] Yixuan Su, Tian Lan, Huayang Li, Jialu Xu, Yan Wang, and Deng Cai. Pandagpt: One model to instruction-follow them all. _CoRR_, abs/2305.16355, 2023.

* [95] Peize Sun, Jinkun Cao, Yi Jiang, Zehuan Yuan, Song Bai, Kris Kitani, and Ping Luo. Dancetrack: Multi-object tracking in uniform appearance and diverse motion. In _Proceedings of the CVPR_, pages 20993-21002, 2022.
* [96] Quan Sun, Qiying Yu, Yufeng Cui, Fan Zhang, Xiaosong Zhang, Yueze Wang, Hongcheng Gao, Jingjing Liu, Tiejun Huang, and Xinlong Wang. Generative pretraining in multimodality. _arXiv preprint arXiv:2307.05222_, 2023.
* [97] Zineng Tang, Ziyi Yang, Chenguang Zhu, Michael Zeng, and Mohit Bansal. Any-to-any generation via composable diffusion. _CoRR_, abs/2305.11846, 2023.
* [98] Zongheng Tang, Yue Liao, Si Liu, Guanbin Li, Xiaojie Jin, Hongxu Jiang, Qian Yu, and Dong Xu. Human-centric spatio-temporal video grounding with visual transformers. _IEEE Transactions on Circuits and Systems for Video Technology_, 32(12):8238-8249, 2021.
* [99] Hugo Touvron, Thibaut Lavril, Gautier Izzacard, Xavier Martinet, Marie-Anne Lachaux, Timothee Lacroix, Baptiste Roziere, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, and Guillaume Lample. Llama: Open and efficient foundation language models. _CoRR_, abs/2302.13971, 2023.
* [100] Florian Tramer, Alexey Kurakin, Nicolas Papernot, Ian Goodfellow, Dan Boneh, and Patrick McDaniel. Ensemble adversarial training: Attacks and defenses. _arXiv preprint arXiv:1705.07204_, 2017.
* [101] Narek Tumanyan, Michal Geyer, Shai Bagon, and Tali Dekel. Plug-and-play diffusion features for text-driven image-to-image translation. In _Proceedings of the CVPR_, pages 1921-1930, 2023.
* [102] Junke Wang, Dongdong Chen, Zuxuan Wu, Chong Luo, Chuanxin Tang, Xiyang Dai, Yucheng Zhao, Yujia Xie, Lu Yuan, and Yu-Gang Jiang. Look before you match: Instance understanding matters in video object segmentation. In _Proceedings of the CVPR_, pages 2268-2278, 2023.
* [103] Peng Wang, An Yang, Rui Men, Junyang Lin, Shuai Bai, Zhikang Li, Jianxin Ma, Chang Zhou, Jingren Zhou, and Hongxia Yang. Ofa: Unifying architectures, tasks, and modalities through a simple sequence-to-sequence learning framework. In _Proceedings of the ICML_, pages 23318-23340. PMLR, 2022.
* [104] Xinyu Wang, Bohan Zhuang, and Qi Wu. Modaverse: Efficiently transforming modalities with llms. _arXiv preprint arXiv:2401.06395_, 2024.
* [105] Zhanyu Wang, Longyue Wang, Zhen Zhao, Minghao Wu, Chenyang Lyu, Huayang Li, Deng Cai, Luping Zhou, Shuming Shi, and Zhaopeng Tu. Gpt4video: A unified multimodal large language model for Instruction-followed understanding and safety-aware generation. _arXiv preprint arXiv:2311.16511_, 2023.
* [106] Chenfei Wu, Shengming Yin, Weizhen Qi, Xiaodong Wang, Zecheng Tang, and Nan Duan. Visual chatgpt: Talking, drawing and editing with visual foundation models. _CoRR_, abs/2303.04671, 2023.
* [107] Dongming Wu, Wencheng Han, Tiancai Wang, Xingping Dong, Xiangyu Zhang, and Jianbing Shen. Referring multi-object tracking. In _Proceedings of the CVPR_, pages 14633-14642, 2023.
* [108] Jay Zhangjie Wu, Yixiao Ge, Xintao Wang, Weixian Lei, Yuchao Gu, Wynne Hsu, Ying Shan, Xiaohu Qie, and Mike Zheng Shou. Tune-a-video: One-shot tuning of image diffusion models for text-to-video generation. _CoRR_, abs/2212.11565, 2022.
* [109] Jialian Wu, Jianfeng Wang, Zhengyuan Yang, Zhe Gan, Zicheng Liu, Junsong Yuan, and Lijuan Wang. Grit: A generative region-to-text transformer for object understanding. _arXiv preprint arXiv:2212.00280_, 2022.
* [110] Jianzong Wu, Xiangtai Li, Chenyang Si, Shangchen Zhou, Jingkang Yang, Jiangning Zhang, Yining Li, Kai Chen, Yunhai Tong, Ziwei Liu, et al. Towards language-driven video inpainting via multimodal large language models. _arXiv preprint arXiv:2401.10226_, 2024.
* [111] Mingrui Wu, Xinyue Cai, Jiayi Ji, Jiale Li, Oucheng Huang, Gen Luo, Hao Fei, Xiaoshuai Sun, and Rongrong Ji. Controlllm: Training-free visual prompt learning for multimodal large language models. _arXiv preprint arXiv:2407.21534_, 2024.
* [112] Shengqiong Wu, Hao Fei, Hanwang Zhang, and Tat-Seng Chua. Imagine that! abstract-to-intricate text-to-image synthesis with scene graph hallucination diffusion. In _Proceedings of the NeurIPS_, pages 79240-79259, 2023.
* [113] Shengqiong Wu, Hao Fei, Xiangtai Li, Jiayi Ji, Hanwang Zhang, Tat-Seng Chua, and Shuicheng Yan. Towards semantic equivalence of tokenization in multimodal llm. _arXiv preprint arXiv:2406.05127_, 2024.

* [114] Shengqiong Wu, Hao Fei, Leigang Qu, Wei Ji, and Tat-Seng Chua. NEXT-GPT: Any-to-any multimodal llm. In _Proceedings of the ICML_, 2024.
* [115] Junbin Xiao, Angela Yao, Zhiyuan Liu, Yicong Li, Wei Ji, and Tat-Seng Chua. Video as conditional graph hierarchy for multi-granular question answering. In _Proceedings of the AAAI_, pages 2804-2812, 2022.
* [116] Jinbo Xing, Menghan Xia, Yong Zhang, Haoxin Chen, Xintao Wang, Tien-Tsin Wong, and Ying Shan. Dynamicrafter: Animating open-domain images with video diffusion priors. _arXiv preprint arXiv:2310.12190_, 2023.
* [117] Dejing Xu, Zhou Zhao, Jun Xiao, Fei Wu, Hanwang Zhang, Xiangnan He, and Yueting Zhuang. Video question answering via gradually refined attention over appearance and motion. In _Proceedings of the ACM MM_, pages 1645-1653, 2017.
* [118] Jun Xu, Tao Mei, Ting Yao, and Yong Rui. MSR-VTT: A large video description dataset for bridging video and language. In _Proceedings of the CVPR_, pages 5288-5296, 2016.
* [119] Ning Xu, Linjie Yang, Yuchen Fan, Dingcheng Yue, Yuchen Liang, Jianchao Yang, and Thomas Huang. Youtube-vos: A large-scale video object segmentation benchmark. _arXiv preprint arXiv:1809.03327_, 2018.
* [120] Zhao Yang, Jiaqi Wang, Yansong Tang, Kai Chen, Hengshuang Zhao, and Philip HS Torr. Lavt: Language-aware vision transformer for referring image segmentation. In _Proceedings of the CVPR_, pages 18155-18165, 2022.
* [121] Zhengyuan Yang, Linjie Li, Kevin Lin, Jianfeng Wang, Chung-Ching Lin, Zicheng Liu, and Lijuan Wang. The dawn of Imms: Preliminary explorations with gpt-4v (ision). _arXiv preprint arXiv:2309.17421_, 9(1): 1, 2023.
* [122] Zongxin Yang and Yi Yang. Decoupling features in hierarchical propagation for video object segmentation. 35:36324-36336, 2022.
* [123] Licheng Yu, Patrick Poirson, Shan Yang, Alexander C Berg, and Tamara L Berg. Modeling context in referring expressions. In _Proceedings of the ECCV_, pages 69-85, 2016.
* [124] Zhou Yu, Dejing Xu, Jun Yu, Ting Yu, Zhou Zhao, Yueting Zhuang, and Dacheng Tao. Activitynet-qa: A dataset for understanding complex web videos via question answering. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 33, pages 9127-9134, 2019.
* [125] Yuqian Yuan, Wentong Li, Jian Liu, Dongqi Tang, Xinjie Luo, Chi Qin, Lei Zhang, and Jianke Zhu. Osprey: Pixel understanding with visual instruction tuning. _arXiv preprint arXiv:2312.10032_, 2023.
* [126] Ao Zhang, Liming Zhao, Chen-Wei Xie, Yun Zheng, Wei Ji, and Tat-Seng Chua. Next-chat: An lmm for chat, detection and segmentation. _arXiv preprint arXiv:2311.04498_, 2023.
* [127] Ao Zhang, Hao Fei, Yuan Yao, Wei Ji, Li Li, Zhiyuan Liu, and Tat-Seng Chua. Vpgtrans: Transfer visual prompt generator across llms. 36, 2024.
* [128] Hang Zhang, Xin Li, and Lidong Bing. Video-llama: An instruction-tuned audio-visual language model for video understanding. _CoRR_, abs/2306.02858, 2023.
* [129] Kai Zhang, Lingbo Mo, Wenhu Chen, Huan Sun, and Yu Su. Magicbrush: A manually annotated dataset for instruction-guided image editing. 36, 2024.
* [130] Shilong Zhang, Peize Sun, Shoufa Chen, Min Xiao, Wenqi Shao, Wenwei Zhang, Kai Chen, and Ping Luo. Gpt4roi: Instruction tuning large language model on region-of-interest. _arXiv preprint arXiv:2307.03601_, 2023.
* [131] Shiwei Zhang, Jiayu Wang, Yingya Zhang, Kang Zhao, Hangjie Yuan, Zhiwu Qin, Xiang Wang, Deli Zhao, and Jingren Zhou. I2vgen-xl: High-quality image-to-video synthesis via cascaded diffusion models. _arXiv preprint arXiv:2311.04145_, 2023.
* [132] Tao Zhang, Xiangtai Li, Hao Fei, Haobo Yuan, Shengqiong Wu, Shunping Ji, Chen Change Loy, and Shuicheng Yan. Omg-llava: Bridging image-level, object-level, pixel-level reasoning and understanding. _arXiv preprint arXiv:2406.19389_, 2024.
* [133] Wenqiao Zhang, Haochen Shi, Siliang Tang, Jun Xiao, Qiang Yu, and Yueting Zhuang. Consensus graph representation learning for better grounded image captioning. In _Proceedings of the AAAI_, pages 3394-3402, 2021.

* [134] Zhu Zhang, Zhou Zhao, Yang Zhao, Qi Wang, Huasheng Liu, and Lianli Gao. Where does it exist: Spatio-temporal video grounding for multi-form sentences. In _Proceedings of the CVPR_, pages 10668-10677, 2020.
* [135] Kaizhi Zheng, Xuehai He, and Xin Eric Wang. Minigpt-5: Interleaved vision-and-language generation via generative vokens. _arXiv preprint arXiv:2310.02239_, 2023.
* [136] Luowei Zhou, Yannis Kalantidis, Xinlei Chen, Jason J. Corso, and Marcus Rohrbach. Grounded video description. In _Proceedings of the CVPR_, pages 6578-6587, 2019.
* [137] Yuanen Zhou, Meng Wang, Daqing Liu, Zhenzhen Hu, and Hanwang Zhang. More grounded image captioning by distilling image-text matching model. In _Proceedings of the CVPR_, pages 4776-4785, 2020.
* [138] Deyao Zhu, Jun Chen, Xiaoqian Shen, Xiang Li, and Mohamed Elhoseiny. Minigpt-4: Enhancing vision-language understanding with advanced large language models. _CoRR_, abs/2304.10592, 2023.
* [139] Xueyan Zou, Jianwei Yang, Hao Zhang, Feng Li, Linjie Li, Jianfeng Wang, Lijuan Wang, Jianfeng Gao, and Yong Jae Lee. Segment everything everywhere all at once. In _Proceedings of the NeurIPS_, 2024.

[MISSING_PAGE_FAIL:19]

to the _task-specific features_.

To teach the LLM to produce the correct invocation responses, we need to create data for instruction tuning. A key is ensuring that the data covers all possible scenarios. We must take into account different ways users might interact with the system for each functionality mentioned in Table 13 (except for text generation). For example, when requesting video creation, a user might describe what they want purely in text, or provide a reference image as the basis for the desired video. Similarly, for editing images or videos, users could express their editing requests either through text, or by using sketches, scribbles and other interactions. Thus, the LLM needs to be versatile in accepting various types of user inputs and generating an accurate invocation response that matches the requirements of the backend modules. Technically, we make use of the existing annotated datasets for various vision tasks included in this work. For each task under specific different user input scenarios, with the corresponding data, we design various template dialogue-format examples. Based on these examples we then prompt the GPT-4 to generate more samples under various topics and enriched scenarios. Finally, we collect a total of 55,000+ invocation-oriented instruction tuning samples. In Table 14 we provide a summary of these datasets.

Embedding-oriented Decoder Alignment Tuning.Besides using the explicit textual instruction to invocate downstream modules, also the signal feature embedding/representation (from LLM) should also be fed to the modules. Denote the _task-specific features_ as \(\bm{v}^{p}\) and _task-invariant fine-grained features_ as \(\bm{v}^{s}\). We will concatenate them as one unified feature embedding \(\bm{v}=[\bm{v}^{p};\bm{v}^{s}]\) and then send \(\bm{v}\) to the downstream module.

Following [114], we align the feature embedding with all the visual module's input encoders via the decoding-side projection layers. We do this feature alignment learning by minimizing the distance between the projected feature embedding and the module's input encoder. For example for diffusion-based image or video generation, we may directly use the textual condition encoder, while keeping all the other modules fixed. Technically, to endow the model to produce other modalities beyond text, we add the signal tokens to the vocabulary of the LLM. In the alignment training phase, we mainly take the captions from CC3M, WebVid, and AudioCaps as inputs and concatenate them with the special signal tokens as outputs. The loss function comprises three key components: 1) the negative log-likelihood of producing signal tokens, and 2) the caption alignment loss: \(l_{2}\)-distance between the

\begin{table}
\begin{tabular}{l l l l l} \hline \hline
**Function** & **Vitron Input** & **Module Input** & **Data Source** & **Amount** \\ \hline Image Generation & & Image-Caption & CC3M [89] & 4,000 \\ \hline \multirow{3}{*}{Image Segmentation} & \multirow{3}{*}{\(\bm{\cdot}\)} & \multirow{3}{*}{\(\bm{\cdot}\)} & RefCOCO [40] & 4,000 \\  & & & RefCOCO [40] & 5,000 \\  & & & RefCOCO [40] & 5,000 \\  & & & Object-Name & gRefCOCO [61] & 2,028 \\ \hline \multirow{3}{*}{Image Editing} & \multirow{3}{*}{\(\bm{\cdot}\)} & \multirow{3}{*}{\(\bm{\cdot}\)} & COCO201760 [60] & 4,000 \\  & & & Bounding-Box & MagicBrush [129] & 5,000 \\ \hline \hline \multirow{3}{*}{Video Generation} & \multirow{3}{*}{\(\bm{\cdot}\)} & Video-Caption & WebVid [4] & 7,000 \\  & & & LAON-4000 [87] & 4,000 \\ \hline \multirow{3}{*}{Video Segmentation} & \multirow{3}{*}{\(\bm{\cdot}\)} & \multirow{3}{*}{\(\bm{\cdot}\)} & WebVid [4], [64] & 5,000 \\  & & & RefCOCO [61] & 5,000 \\ \cline{1-1}  & & & Editing-Query & WebVid [4] & 5,000 \\ \hline \multirow{3}{*}{Video Editing} & \multirow{3}{*}{\(\bm{\cdot}\)} & \multirow{3}{*}{\(\bm{\cdot}\)} & **Edit-Query** & WebVid [4] & 5,000 \\ \cline{1-1}  & & & Editing-Query & WebVid [4] & 5,000 \\ \hline \hline \end{tabular}
\end{table}
Table 14: Feature summary of the constructed data for text invocation instruction tuning. [ENDFOOTNOTE]

Figure 14: **Video Editing**

[MISSING_PAGE_FAIL:21]

Grounding-aware Vision QA.The grounding tasks mentioned above only touch upon the low-level aspects of vision perception. However, in many scenarios, it's essential for the LLM to possess high-level, in-depth vision reasoning capabilities, building upon the foundational low-level pixel grounding. Therefore, we further introduce grounding-aware vision QA, enabling the LLM to undertake semantic-level QA tasks based on the grounded results. Specifically, we consider both image-grounded QA and video-grounded QA. The data sources for these tasks remain the same as mentioned above for the grounding tasks. And we again rely on GPT-42 to use its imaginative capabilities to design reasonable questions and answers based on the given grounding content of the above grounding/segmentation datasets, formatting these into an instruction-tuning format.

Footnote 2: https://openai.com/index/gpt-4/

### Cross-task Synergy Learning

Let's denote the _task-specific features_ as \(\bm{v}^{p}\) and _task-invariant fine-grained features_ as \(\bm{v}^{s}\). We will concatenate them as one unified feature embedding \(\bm{v}=[\bm{v}^{p};\bm{v}^{s}]\) and then send \(\bm{v}\) to the downstream module \(M_{k}\) for the \(k\)-th task prediction:

\[y_{k}\leftarrow\text{M}(\bm{v}).\] (1)

Although we separate the two feature spaces into the shared one \(\bm{v}^{s}\) and private one \(\bm{v}^{p}\), there are still chances that the learned shared and the private features are closely entangled, weakening the refining of the shared task-invariant fine-grained feature. Therefore, we employ a third-party task discriminator with adversarial training to refine the features. The discriminator \(D\) is a classifier for predicting what the current task is, based merely on the task-invariant fine-grained feature representation \(\bm{v}^{s}\). Ideally, once the discriminator cannot accurately identify the task ID \(y_{k}^{d}\), the task-invariant fine-grained feature representation \(\bm{v}^{s}\) can be understood as the most purified one. Specifically, the discriminator is a 4-layer 768-d Transformer (Trm) network, where we use a feedforward layer (FFN) with Softmax for the task prediction:

\[\bm{v}^{{}^{\prime}}=\text{Trm}(\bm{v}_{1},\cdots,\bm{v}_{n}),\] (2)

\[\bar{y}_{k}^{d}=\text{Softmax}(\text{FFN}(\bm{v}^{{}^{\prime}})),\] (3)

where \(\bar{y}_{k}^{d}\) is the predicted task ID.

The target of this adversarial training is to urge the shared features such that the discriminator cannot reliably predict the task ID:

\[\mathcal{L}^{syn}=\text{min}_{\theta}(\text{max}_{D}(\sum_{k}\bar{y}_{k}^{d} \log(y_{k}^{d}))).\] (4)

### Overall Training Remarks

All our framework is trained through three main stages, in a specific ordering of sub-steps:

\(\bullet\)**Step-1:**: Basic Multimodal Comprehension and Generation Skill Training, cf SS4.1.

\(\bullet\)**Step-1.1:**: Aligning the encoder-LLM for overall vision-language alignment learning.

\(\bullet\)**Step-1.2:**: Doing text invocation instruction tuning such that the MLLM learns to output text instructions in the correct format.

\(\bullet\)**Step-1.3:**: When the above step is converging, training the LLM with continuous soft embedding-oriented LLM-decoder alignment, such that the LLM overall can convey the signal to the downstream modules.

\(\bullet\)**Step-2:**: Fine-grained Spatiotemporal Vision Grounding Instruction Tuning, cf SS4.2.

\(\bullet\)**Step-2.1:**: Starting by doing the Image Spatial Grounding training, on the grounded image captioning task and referring image segmentation task.

\(\bullet\)**Step-2.2:**: When MLLM has the ability for fine-grained spatial understanding, doing the Video Spatial-Temporal Grounding training, on the grounded video captioning task and referring video tracking task.

\(\bullet\)**Step-2.3:**: When the MLLM has learned to have the competent ability of both image and video spatiotemporal understanding at the perception level, doing the Grounding-aware Vision QA task at the cognition level.

\(\bullet\)**Step-3:**: As the final step, when the overall system has learned to have a competitive ability in various visual tasks, dining the cross-task synergy learning, cf SS4.3. This should be done by combining both the adversarial training (\(\mathcal{L}^{syn}\)) with the end-task prediction (\(\mathcal{L}_{k}\)). So the total loss of the step-3 is: \(\mathcal{L}^{syn}+\sum_{k}\mathcal{L}_{k}\).

## Appendix C Extended Experimental Settings

We quantify the performance of Vitron on a variety of standard benchmarks for downstream vision tasks and compare it against some of the currently strong-performing systems. Given the countless vision tasks within the community, our experiments focus only on 1-2 of the most representative tasks from each task category for validation. To ensure a fair comparison, all subsequent experiments adopt settings same or similar to those of baseline systems, with evaluations following established practices. Before experiments, we perform targeted pre-training on all of Vitron's backend modules (such as GLIGEN and SEEM) on their respective datasets. This ensures our system is optimized for the best possible performance during testing. Our approach centers on training the linear projection layers of all encoders and efficiently fine-tuning the language model using LoRA.

Our backbone LLM is Vicuna3, 7B, version 1.5. The CLIP-ViT encoders for both images and videos are with a patch size of 14, and convert all images and video frames into 336px resolutions. The task discriminator in our synergy module is with a Transformer architecture, with 4 layers and each in 768-d representation. To train our model, we employ the AdamW optimizer along with a learning rate scheduler. The pre-training of Vitron unfolds in three phases, all conducted on 10\(\sim\)16 \(\times\) A100 (80G) GPUs. Initially, we train the model using a global batch size of 128 and a maximum learning rate of 3e-4, a process that takes approximately 40 hours. In the second tuning phase, we adjust the model with a maximum learning rate of 1e-5, utilizing a global batch size of 90. This stage of training lasts about 35 hours. The third phase of training employs a global batch size of 128 and maintains the maximum learning rate of 1e-5, completing in roughly 10 hours.

Footnote 3: https://huggingface.co/lmsys/vicuna-7b-v1.5

## Appendix D More Experiment Results

### Vision Segmentation

Video Segmentation.Table 15 presents the comprehensive comparison of Vitron with some SoTA systems in video tracking on DAVIS 17 [80] Test-Dev and Youtube-VOS 2019 [119] Val sets.

### Fine-grained Vision Understanding

Region-level Image Understanding.The comparisons of image-referring expression comprehension on three datasets are shown in Tables 16.

Region-level Video Understanding.Table 18 presents the results of video QA across 4 representative datasets. Interestingly, while PG-Video-LLaVA has video grounding capabilities, it does not show better results than Video-LLaVA, which lacks grounding. However, our Vitron achieves superior performance.

## Appendix E Qualitative Studies of Case Visualizations

### Vision Segmentation

Fig. 7 further demonstrates an example of how our Vitron processes image segmentation tasks in an interactive manner with the user. When users sketch or doodle outlines on specific areas of an image, Vitron is capable of accurately identifying the corresponding objects within the image. Following this, it precisely generates the bounding box and mask area for the identified objects.

Fig. 8 also demonstrates the process of video segmentation. Vitron successfully identifies, localizes, and tracks the target in the video based on the provided queries. Our system demonstrates a

\begin{table}
\begin{tabular}{l c c c c c c c c} \hline \multirow{2}{*}{**Method**} & \multicolumn{3}{c}{**RefCOCO [40]**} & \multicolumn{3}{c}{**RefCOCO+ [123]**} & \multicolumn{3}{c}{**RefCOCOg [68]**} \\ \cline{2-10}  & Val & TestA & TestB & Val & TestA & TestB & Val & Test \\ \hline OFA [103] & 80.0 & 83.7 & 76.4 & 68.3 & 76.0 & 61.8 & 67.6 & 67.6 \\ Shikra [12] & 87.0 & 90.6 & 80.2 & 81.6 & 87.4 & 72.1 & 82.3 & 82.2 \\ MiniGPT-v2 [11] & 88.7 & 91.6 & 85.3 & 79.9 & 85.1 & 74.4 & 84.4 & 84.6 \\ \hline Vitron & **90.9** & **93.2** & **89.3** & **83.7** & **89.1** & **76.9** & **86.4** & **87.0** \\ \hline \end{tabular}
\end{table}
Table 16: Results (accuracy) of image referring expression comprehension.

\begin{table}
\begin{tabular}{l c c c c c c c} \hline \multirow{2}{*}{**Method**} & \multirow{2}{*}{**Grounding**} & **MSVD-QA [117]** & **MSRVT-QA [118]** & **TGIP-QA [58]** & **ActivityNet-QA [124]** \\ \cline{2-7}  & & **Accuracy** & **Score** & **Accuracy** & **Score** & **Accuracy** & **Score** & **Accuracy** & **Score** \\ \hline VideoChat [50] & ✗ & 56.3 & 2.8 & 45.0 & 2.5 & 34.4 & 2.3 & - & 2.2 \\ LLaMA-Adapter [30] & ✗ & 54.9 & 3.1 & 43.8 & 2.7 & 54.3 & 3.3 & 34.2 & 2.7 \\ Video-LLaMA [128] & ✗ & 51.6 & 2.5 & 29.6 & 1.8 & 51.4 & 3.4 & 12.4 & 1.1 \\ Video-ChaqGPT [67] & ✗ & 64.9 & 3.3 & 49.3 & 2.8 & 51.4 & 3.0 & 35.2 & 2.7 \\ Video-LLaVA [59] & ✗ & 70.7 & 3.9 & 59.2 & 3.5 & 70.0 & 4.0 & 45.3 & 3.3 \\ PG-Video-LLaVA [74] & ✓ & 64.1 & 3.7 & 51.6 & 3.3 & 66.8 & 3.8 & 39.9 & 3.3 \\ Vitron & ✓ & **74.9** & **4.0** & **62.0** & **3.8** & **72.4** & **4.1** & **51.0** & **3.7** \\ \hline \end{tabular}
\end{table}
Table 17: Results (accuracy) on image-based VQA.

\begin{table}
\begin{tabular}{l c c c c c c c c} \hline \multirow{2}{*}{**Method**} & \multicolumn{3}{c}{**MSVD-QA [117]**} & **MSRVT-QA [118]** & **TGIP-QA [58]** & **ActivityNet-QA [124]** \\ \cline{2-10}  & & **Accuracy** & **Score** & **Accuracy** & **Score** & **Accuracy** & **Score** \\ \hline VideoChat [50] & ✗ & 56.3 & 2.8 & 45.0 & 2.5 & 34.4 & 2.3 & - & 2.2 \\ LLaMA-Adapter [30] & ✗ & 54.9 & 3.1 & 43.8 & 2.7 & 54.3 & 3.3 & 34.2 & 2.7 \\ Video-LLaMA [128] & ✗ & 51.6 & 2.5 & 29.6 & 1.8 & 51.4 & 3.4 & 12.4 & 1.1 \\ Video-ChaqGPT [67] & ✗ & 64.9 & 3.3 & 49.3 & 2.8 & 51.4 & 3.0 & 35.2 & 2.7 \\ Video-LLaVA [59] & ✗ & 70.7 & 3.9 & 59.2 & 3.5 & 70.0 & 4.0 & 45.3 & 3.3 \\ PG-Video-LLaVA [74] & ✓ & 64.1 & 3.7 & 51.6 & 3.3 & 66.8 & 3.8 & 39.9 & 3.3 \\ Vitron & ✓ & **74.9** & **4.0** & **62.0** & **3.8** & **72.4** & **4.1** & **51.0** & **3.7** \\ \hline \end{tabular}
\end{table}
Table 18: Results (accuracy and confidence Score) on video QA.

\begin{table}
\begin{tabular}{l c c c c c c c} \hline \multirow{2}{*}{**Method**} & \multicolumn{3}{c}{**MSVD-QA [117]**} & **MSRVT-QA [118]** & **TGIP-QA [58]** & **ActivityNet-QA [124]** \\ \cline{2-10}  & **Accuracy** & **Score** & **Accuracy** & **Score** & **Accuracy** & **Score** & **Accuracy** & **Score** \\ \hline VideoChat [50] & ✗ & 56.3 & 2.8 & 45.0 & 2.5 & 34.4 & 2.3 & - & 2.2 \\ LLaMA-Adapter [30] & ✗ & 54.9 & 3.1 & 43.8 & 2.7 & 54.3 & 3.3 & 34.2 & 2.7 \\ Video-LLaMA [128] & ✗ & 51.6 & 2.5 & 29.6 & 1.8 & 51.4 & 3.4 & 12.4 & 1.1 \\ Video-ChaqGPT [67] & ✗ & 64.9 & 3.3 & 49.3 & 2.8 & 51.4 & 3.0 & 35.2 & 2.7 \\ Video-LLaVA [59] & ✗ & 70.7 & 3.9 & 59.2 & 3.5 & 70.0 & 4.0 & 45.3 & 3.3 \\ PG-Video-LLaVA [74] & ✓ & 64.1 & 3.7 & 51.6 & 3.3 & 66.8 & 3.8 & 39.9 & 3.3 \\ Vitron & ✓ & **74.9** & **4.0** & **62.0** & **3.8** & **72.4** & **4.1** & **51.0** & **3.7** \\ \hline \end{tabular}
\end{table}
Table 15: Results of video object segmentation.

remarkable ability to accurately and flexibly capture the user's intent, even when the desired object to be segmented is described in a highly implicit manner.

### Fine-grained Vision Understanding

Fig. 10 highlights Vitron's fine-grained visual understanding capabilities through regional image captioning, to accurately understand and appropriately describe image regions.

Further, we showcase a visualization process illustrating how Vitron accomplishes fine-grained visual understanding through video grounding tasks in Fig. 10. Vitron's precise perception of video details ensures a more accurate understanding of content semantics, leading to stronger video understanding capabilities.

Figure 11: Demonstration of vision generation across different modalities.

Figure 10: Demonstration of fine-grained visual understanding via video grounding.

Figure 9: Demonstration of fine-grained visual understanding via image grounding.

### Vision Generation

Fig. 11 illustrates the process of vision generation across different modalities, including text, image, and video. Initially, users start with a basic text command, and Vitron is capable of transforming a simple idea into a detailed video. However, if users are not satisfied with the video generated directly from text, they can first generate an image from text, then fine-tune or edit this image, and finally create a satisfying video based on the adjusted image. Our Vitron, thanks to its robust interactive capability via multi-turn dialogue, enables users to perform a series of consecutive operations, ultimately facilitating smooth content creation. This fully helps meet the demands of real-world application scenarios.

### Vision Editing

We showcase the specific process of this image editing, as illustrated in Fig. 12. Vitron is capable of accepting different forms of user inputs (textual instruction or sketch) for precise image edits. It maintains contextual consistency throughout a series of sequential editing operations, ultimately achieving satisfactory results that meet the user's expectations.

Fig. 13 illustrates this process. Vitron competently handles video editing tasks, including modifications to the content's subject, and changes to the video's style, etc.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: in the Section 1 & 2 Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: in the Experiment part. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes]Justification: in the Section 3 & 4 Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: in the Appendix A and Appendix C Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material?Answer: [Yes] Justification: All the data utilized in our experiments are publicly available. We will release the code upon the acceptance of the paper. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: in the Appendix C Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes] Justification: in the Section 5 and Appendix D, and All results are reported after the statistical significance tests. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors).

* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: in the Section C Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? Answer: [Yes] Justification: the research conducted in the paper conforms, in every respect, with the NeurIPS Code of Ethics Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [No] Justification: [NA] Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.

* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: the paper poses no such risks. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [NA] Justification: the paper does not use existing assets. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided. * If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset. * For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.

* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
* **New Assets*
* Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: the paper does not release new assets. Guidelines:
* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
* **Crowdsourcing and Research with Human Subjects*
* Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: the paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
* **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects*
* Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: the paper does not involve crowdsourcing nor research with human subjects. Guidelines:
* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.