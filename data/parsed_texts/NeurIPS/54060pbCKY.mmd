Towards Faster Quantum Circuit Simulation Using Graph Decompositions, GNNs and Reinforcement Learning

Alexander Koziell-Pipe1  Richie Yeung1  Matthew Sutcliffe1

Department of Computer Science

University of Oxford

Oxford, UK

[firstname.lastname]@cs.ox.ac.uk

Footnote 1: Co-first authors

###### Abstract

In this work, we train a graph neural network with reinforcement learning to more efficiently simulate quantum circuits using the ZX-calculus. Our experiments show a marked improvement in simulation efficiency using the trained model over existing methods that do not incorporate AI. In this way, we demonstrate a machine learning model that can reason effectively within a mathematical framework such that it enhances scientific research in the important domain of quantum computing.

In the present-day 'Noisy Intermediate Scale' (NISQ) era of quantum computing [30], quantum resources are still largely limited. Given this limit on quantum resources, being able to simulate quantum computations efficiently and at scale on classical hardware can accelerate quantum computing research and set a standard for benchmarking quantum computers.

While in general quantum circuit simulation can be #P-hard [28], a subclass of quantum circuits known as stabiliser circuits can be simulated in polynomial time with respect to size [1]. Hence a technique for simulating quantum circuits is to decompose them into an ensemble of efficiently simulated stabiliser circuits, the aggregation of which simulates the same computation as the original circuit. Decompositions are calculated iteratively, where sub-circuits are decomposed in a sequential manner until the ensemble of stabiliser circuits is achieved. At each step in the decomposition, the choice of sub-circuit to decompose can greatly affect the number of stabiliser circuits that need to be simulated at the end - in the worst case, this is exponential with respect to the number of a certain type of gate, called a \(T\)-gate, in the original circuit.

In this work, we formulate the challenge of choosing good sub-circuit decompositions as a reinforcement learning problem, where an agent learns to make decisions in a combinatorially large action space. To facilitate this, we utilise a mathematical framework known as the ZX-calculus, in which quantum circuits are represented as graphs and reasoning amounts to a set of rules allowing one graph to be transformed into another. Formulating our problem in terms of graphs enables the use of Graph Neural Networks (GNNs), which have seen promising applications in other scientific domains including bioinformatics [39], social networks [17], and combinatorial optimisation [7].

We show that, for classes of quantum circuit known not to be efficiently classically simulated, our GNN agent trained using reinforcement learning achieves significantly more efficient decompositions compared to current methods that do not incorporate AI. Moreover, we show that additional algebraic rules can be added to the decomposition strategy to achieve even further improvements in simulation efficiency. As such, our model demonstrates the ability of an AI-agent to reason about a task that typically requires strong mathematical reasoning skills and a deep understanding of the algebraic structures underlying quantum circuits. Furthermore, it improves our capacity to conduct scientific research in the increasingly important field of quantum computing.

## 1 ZX-Calculus

Quantum algorithms can be expressed graphically in circuit notation, with quantum gates composed together in a time-ordered structure. The ZX-calculus [11, 12, 23, 36], offers a powerful alternative which has proven effective for reasoning about quantum computing problems such as circuit compilation and optimisation [5, 8, 13, 14, 15, 18, 27, 29] as well as classical simulation [2, 9, 10, 22, 24, 26, 33, 34, 35]. In our work we use a variation of the ZX-calculus comprised of graphs whose vertices, called _spiders_, are labelled by a real number \(\in[0,2\pi)\) (the _phase_) and two types of edges:

\[\diagram\node{m}\arrow{e,t}{\node{\vdots}}\node{n}\node{:=}\begin{pmatrix}1&0& \cdots&0\\ 0&0&\cdots&0\\ \vdots&\vdots&\ddots&\vdots\\ 0&0&\cdots&e^{i\alpha}\end{pmatrix}\arrow{e,t}{\node{\vdots}}\node{:=}\begin{pmatrix} 1&0\\ 0&1\end{pmatrix}\]

The way spiders are wired together by edges in a ZX-diagram with \(m\) inputs and \(n\) outputs determines a matrix in \(\mathbb{C}^{2^{n}\times 2^{m}}\). Furthermore, wiring the inputs of one diagram to the outputs of another amounts to multiplication of their respective matrices, while juxtaposing two diagrams in parallel amounts to taking the Kronecker product. Indeed, for arbitrary \(m,n\) the ZX-calculus is sufficient to express any matrix in \(\mathbb{C}^{2^{n}\times 2^{m}}\), hence any quantum circuit acting on qubits. In particular, standard gates in quantum computing may be expressed as ZX-diagrams:

\[\diagram\node{Z}\arrow{e,t}{\node{=}}\node{\node{\vbox{\hbox{\includegraphics[ ight=0.0pt]{ZX-diagram.pdf}}}}}\node{T}\arrow{e,t}{\node{=}}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{CNOT}\arrow{e,t}{ \node{=}}\node{\vbox{\hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{ CZ}\arrow{e,t}{\node{=}}\node{\vbox{\hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\]

Note that when no number is present on a spider, the phase is implicitly taken to equal \(0\). Diagrams may be deformed arbitrarily and still represent the same quantum computation, provided the graph topology is conserved. They may also be modified using _rewrite rules_, which express how subdiagrams may be replaced without changing the semantics (the matrix they represent) [36]:

\[\diagram\node{\vbox{\hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}} \node{\vbox{\hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=} \node{\vbox{\hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{ \vbox{\hbox{\includegraphics[ightightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{ \vbox{\hbox{\includegraphics[ightightightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightightightight=0.0pt]{ZX-diagram.pdf}}}}\node{=}\node{\vbox{ \hbox{\includegraphics[ightightightightight=0.0pt]{ZX-diagram.

Circuit Simulation via Graph Decompositions

Where near-term quantum hardware is insufficient for computing quantum circuits of non-trivial scale, the use of classical simulation can be very helpful in verifying their behaviour. Specifically, there is _weak_ simulation, wherein a quantum circuit is emulated to provide some probabilistic output, and _strong_ simulation, where the probability of a particular measurement outcome is determined. The latter is strictly more powerful as it can be used to achieve the former, and is the focus of our work.

Strong simulation of a quantum circuit can be performed by first representing it as a ZX-diagram, then reducing it to a scalar number via rewrite rules - this scalar represents the probability amplitude of the quantum computation. Where the rewrite rules are insufficient, _decompositions_ may be employed to remove problematic sub-diagrams at the cost of splitting the original diagram into a weighted sum of diagrams. For Clifford+T diagrams, one state of the art decomposition used for classical simulation is the \(|\mathrm{magic}_{5}\rangle\) decomposition, introduced by Kissinger et al. [24]:

**Lemma 1**.: _The \(|\mathrm{magic}_{5}\rangle\) decomposition [24]:_

_exchanges a set of \(5\) T-spiders for \(3\) partial stabiliser terms._

This decomposition removes \(4\) T-spiders at the cost of replacing a single graph term with \(3\) terms. Efficient decompositions for Clifford+T diagrams remove hard-to-simulate T-spiders while introducing as few new terms as possible in the weighted sum. We quantify this efficiency via the _decomposition efficiency coefficient_\(\alpha\), defined as follows:

**Definition 1**.: _The efficiency of a particular decomposition can be measured via:_

\[\alpha:=\frac{\log_{2}N}{t}\]

_where \(N\) is the number of terms produced and \(t\) is the number of T-spiders removed by the decomposition. The overall efficiency of a sequence of decompositions and diagram rewrites, \(\alpha_{\mathrm{effective}}\), can be measured similarly._

A lower \(\alpha\) means a more efficient decomposition. For the \(|\mathrm{magic}_{5}\rangle\) decomposition of equation (1), the efficiency is \(\alpha\approx 0.396\). In practice, the decomposition is applied to a sub-circuit, and after diagram rewrites have been applied to the resulting terms, the number of T-spiders remaining may be reduced even further. This can lead to an \(\alpha_{\mathrm{effective}}\) far lower than \(0.396\).

The present state-of-the-art-algorithm [24] deterministically applies efficient structure-specific decompositions (see appendix A) wherever applicable, relying on the \(|\mathrm{magic}_{5}\rangle\) decomposition only when these structures are no longer found. In each case, this algorithm selects the \(5\) T-spiders upon which to apply this decomposition at random. However, we emphasise that this choice of \(5\) T-spiders greatly influences the effective \(\alpha\) during a sequence of decompositions and diagram rewrites. As such, selecting spiders that lead to more efficient decompositions, thus yielding fewer stabiliser terms to simulate overall can significantly reduce the computational cost of strong simulation. It is this problem of selecting spiders giving more efficient decompositions that we tackle using AI.

## 3 Experiments

**Data Generation** Training, validation and test data is generated using PyZX: the Python library for quantum circuit rewriting and optimisation using the ZX-calculus [21]. We generate three different types of ZX-diagrams: 1. Clifford+T quantum circuits, 2. grid-like diagrams, and 3. random graphs generated using the \(G(n,m)\) Erdos-Renyi model [16]. Generating random samples from these 3 classes of diagram requires specifying parameters determining the diagram size and phases that appear on the spiders. Specific parameter details used for generating the data can be found in the appendix section C.1.

**GNN Architecture** We use a graph attention network (GAT) [38]-based architecture. For the reinforcement learning algorithm used, the full architecture is divided into a features extractor, policy network and value network. The features extractor processes the input graph. The output of the features extractor is then fed into two separate networks: a policy network, which outputs a probability distribution used to sample vertices for the graph decomposition; and a value network, which assesses the relative value of the current state in the reinforcement learning environment. The value network is only used during training and is not required at inference time.

The features extractor consists of 8 GAT layers each with 4 attention heads and embedding dimension of 64. The policy and value networks follow a transformer-style architecture, consisting of blocks of alternating GAT layers with MLP layers. Residual connections, GELU activations[19], Graph normalisation layers [6], and layer normalisation [4] layers are used. We note the similarity of the policy and value network architectures to a standard transformer architecture [37], with attention layers replaced with GAT layers, and some layer normalisations replaced with graph normalisation. For further details on the architecture, see appendix section C.2.

**Reinforcement Learning Setup** We train the model using the Proximal Policy Optimisation (PPO) reinforcement learning (RL) algorithm [31] with an adapted version of generalized advantage estimation [32]. Observations in the RL environment are graphs, actions are vertices to which the \(\left|\operatorname{magic}_{5}\right\rangle\) decomposition (1) is applied, and rewards are the effective \(\alpha\)-efficiencies of applying \(\left|\operatorname{magic}_{5}\right\rangle\) to these particular vertices. Further details are given in the appendix section C.3. Data is sampled randomly during training, and intra-training performance is assessed on a validation dataset. We save model weights achieving the best performance on the validation set during a random hyperparameter search; hyperparameters for the top performing weights are listed in table 1, appendix section C.4.

**Evaluation & Results** We evaluate the models on an unseen test dataset. The best model obtains a mean effective \(\alpha\) of \(0.263\): a marked improvement over selecting the vertices for the decomposition randomly as in Kissinger et al. [24], which achieves \(0.293\) on the same data. Note that an asymptotic decrease in \(\alpha\) leads to an exponential factor speed-up. As an additional investigation, we compare efficiency coefficients when augmenting both methods with an additional set of decompositions, called the \(\left|\operatorname{cat}_{n}\right\rangle\) decompositions (see appendix A). In both cases, the decompositions are applied according to the algorithm in Kissinger et al. [24] which is the best, to our knowledge, heuristics-based algorithm using \(\left|\operatorname{cat}_{n}\right\rangle\) and \(\left|\operatorname{magic}_{5}\right\rangle\). In this experiment, the model achieves a mean effective \(\alpha\) of \(0.232\), versus \(0.235\) for [24]. This improvement in effective \(\alpha\) is highlighted by figure 0(a). These results are further summarised appendix D.

Moreover, when looking at the number of stabiliser terms to simulate after decomposition, our model observes better scaling behavior as the number of T-spiders, which comprise the non-stabiliser components of the ZX-diagrams, increases - see figure 0(b). We hypothesise that this is because the message passing performed by the graph neural network permits, within a limited neighborhood, broader contextual information about the diagram to be taken into account when choosing the site of a decomposition, whereas the heuristic method of [24] does not.

Figure 1: Comparison of our trained model versus Kissinger et al. [24]

## 4 Discussion

Our experiments have shown that a machine learning model can be perform effective mathematical reasoning, with applications to the domain of quantum computing. This was enabled by an algebraic framework: the ZX-calculus, which allowed the task of simulating quantum circuits to be formulated in terms of graphs, making the problem amenable to graph neural networks. Furthermore, the algebraic nature of the ZX-calculus provided a way of designing a reinforcement learning environment in which to learn the circuit simulation task. The trained model showed a marked improvement in simulation efficiency over existing methods without the use of AI.

These initial results are extremely promising: our methodology could be extended to include a broader set of decompositions into the model's action space. Recent work has shown that heuristics-based applications of decompositions, such as in [2; 3; 34], are remarkably effective for a broad range of quantum circuits. We also note that the ZX-calculus has applications to many other problems in quantum computing beyond circuit simulation. This suggests that similar approaches applying AI to other pertinent areas of quantum computing research, such as circuit optimisation and error correction, could be facilitated by the ZX-calculus in the same manner. Typically, these problems are solved by domain experts due to a solid understanding of the mathematics required. Our work suggests, however, that given a sufficient framework within which to perform reasoning, a machine learning model can learn to solve these mathematics-intensive problems. Indeed, it is clear that the ability of AI to solve problems requiring a high-level mathematical understanding can significantly enhance research and engineering across a broad range of scientific domains.

## Acknowledgments and Disclosure of Funding

Alexander Koziell-Pipe and Richie Yeung would like to thank Simon Harrison for his generous support via the Wolfson Harrison UKRI Quantum Foundation Scholarship, as well as the enthusiasm he shows toward their research. Alexander Koziell-Pipe and Richie Yeung are part-funded by the EPSRC.

## References

* Aaronson and Gottesman [2004] Scott Aaronson and Daniel Gottesman. Improved simulation of stabilizer circuits. _Physical Review A_, 70(5):052328, 2004.
* Ahmad [2024] Wira Azmoon Ahmad. Efficient Heuristics for Classical Simulation of Quantum Circuits Using ZX-Calculus. Master's thesis, University of Oxford, 2024.
* Ahmad and Sutcliffe [2024] Wira Azmoon Ahmad and Matthew Sutcliffe. Dynamic t-decomposition for classical simulation of quantum circuits. _[Preprint]_, 2024.
* Ba et al. [2016] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E. Hinton. Layer normalization, 2016. URL [https://arxiv.org/abs/1607.06450](https://arxiv.org/abs/1607.06450).
* Borgna et al. [2021] Agustin Borgna, Simon Perdix, and Benoit Valiron. Hybrid quantum-classical circuit simplification with the ZX-calculus. In Hakjoo Oh, editor, _Programming Languages and Systems_, pages 121-139, Cham, 2021. Springer International Publishing. doi: 10.1007/978-3-030-89051-3_8.
* Cai et al. [2021] Tianle Cai, Shengjie Luo, Keyulu Xu, Di He, Tie-Yan Liu, and Liwei Wang. Graphnorm: A principled approach to accelerating graph neural network training, 2021. URL [https://arxiv.org/abs/2009.03294](https://arxiv.org/abs/2009.03294).
* Cappart et al. [2022] Quentin Cappart, Didier Chetelat, Elias Khalil, Andrea Lodi, Christopher Morris, and Petar Velickovic. Combinatorial optimization and reasoning with graph neural networks, 2022. URL [https://arxiv.org/abs/2102.09544](https://arxiv.org/abs/2102.09544).
* Charton et al. [2023] Francois Charton, Alexandre Krajenbrink, Konstantinos Meichanetzidis, and Richie Yeung. Teaching small transformers to rewrite ZX diagrams. In _The 3rd Workshop on Mathematical Reasoning and AI at NeurIPS'23_, 2023. URL [https://openreview.net/forum?id=btQ7Bt1NLF](https://openreview.net/forum?id=btQ7Bt1NLF).

* Codsi [2022] Julien Codsi. Cutting-Edge Graphical Stabiliser Decompositions for Classical Simulation of Quantum Circuits. Master's thesis, University of Oxford, 2022. URL [https://www.cs.ox.ac.uk/people/aleks.kissinger/theses/codsi-thesis.pdf](https://www.cs.ox.ac.uk/people/aleks.kissinger/theses/codsi-thesis.pdf).
* Codsi and van de Wetering [2022] Julien Codsi and John van de Wetering. Classically Simulating Quantum Supremacy IQP Circuits trough a Random Graph Approach. _arXiv preprint arXiv:2212.08609_, 2022.
* Coecke and Duncan [2011] Bob Coecke and Ross Duncan. Interacting quantum observables: categorical algebra and diagrammatics. _New Journal of Physics_, 13(4):043016, 2011.
* Coecke and Kissinger [2017] Bob Coecke and Aleks Kissinger. _Picturing Quantum Processes: A First Course in Quantum Theory and Diagrammatic Reasoning_. Cambridge University Press, 2017.
* Cowtan et al. [2020] Alexander Cowtan, Silas Dilkes, Ross Duncan, Will Simmons, and Seyon Sivarajah. Phase Gadget Synthesis for Shallow Circuits. In Bob Coecke and Matthew Leifer, editors, _Proceedings 16th International Conference on Quantum Physics and Logic, Chapman University, Orange, CA, USA, 10-14 June 2019_, volume 318 of _Electronic Proceedings in Theoretical Computer Science_, pages 213-228. Open Publishing Association, 2020. doi: 10.4204/EPTCS.318.13.
* de Beaudrap et al. [2020] Niel de Beaudrap, Xiaoning Bian, and Quanlong Wang. Fast and Effective Techniques for T-Count Reduction via Spider Nest Identities. In Steven T. Flammia, editor, _15th Conference on the Theory of Quantum Computation, Communication and Cryptography (TQC 2020)_, volume 158 of _Leibniz International Proceedings in Informatics (LIPIcs)_, pages 11:1-11:23, Dagstuhl, Germany, 2020. Schloss Dagstuhl-Leibniz-Zentrum fur Informatik. ISBN 978-3-95977-146-7. doi: 10.4230/LIPIcs.TQC.2020.11.
* Duncan et al. [2020] Ross Duncan, Aleks Kissinger, Simon Perdrix, and John van de Wetering. Graph-theoretic Simplification of Quantum Circuits with the ZX-calculus. _Quantum_, 4:279, 6 2020. ISSN 2521-327X. doi: 10.22331/q-2020-06-04-279.
* Erdos and Renyi [2022] Paul L. Erdos and Alfred Renyi. On random graphs. i. _Publicationes Mathematicae Debrecen_, 2022. URL [https://api.semanticscholar.org/CorpusID:253789267](https://api.semanticscholar.org/CorpusID:253789267).
* Fan et al. [2019] Wenqi Fan, Yao Ma, Qing Li, Yuan He, Eric Zhao, Jiliang Tang, and Dawei Yin. Graph neural networks for social recommendation, 2019. URL [https://arxiv.org/abs/1902.07243](https://arxiv.org/abs/1902.07243).
* 1 July 2022_, volume 394 of _Electronic Proceedings in Theoretical Computer Science_, pages 415-431. Open Publishing Association, 2023. doi: 10.4204/EPTCS.394.20.
* Hendrycks and Gimpel [2023] Dan Hendrycks and Kevin Gimpel. Gaussian error linear units (gelus), 2023. URL [https://arxiv.org/abs/1606.08415](https://arxiv.org/abs/1606.08415).
* Kingma and Ba [2014] Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. _arXiv preprint arXiv:1412.6980_, 2014.
* Kissinger and van de Wetering [2019] Aleks Kissinger and John van de Wetering. Pyzx: Large scale automated diagrammatic reasoning. _arXiv preprint arXiv:1904.04735_, 2019.
* Kissinger and van de Wetering [2022] Aleks Kissinger and John van de Wetering. Simulating quantum circuits with zx-calculus reduced stabiliser decompositions. _Quantum Science and Technology_, 7(4):044001, July 2022. ISSN 2058-9565. doi: 10.1088/2058-9565/ac5d20. URL [http://dx.doi.org/10.1088/2058-9565/ac5d20](http://dx.doi.org/10.1088/2058-9565/ac5d20).
* Kissinger and van de Wetering [2024] Aleks Kissinger and John van de Wetering. _Picturing Quantum Software: An Introduction to the ZX-Calculus and Quantum Compilation_. Preprint, 2024.
* Kissinger et al. [2022] Aleks Kissinger, John van de Wetering, and Renaud Vilmart. Classical simulation of quantum circuits with partial and graphical stabiliser decompositions. In _17th Conference on the Theory of Quantum Computation, Communication and Cryptography_, 2022.

* Kitaev [1997] A Yu Kitaev. Quantum computations: algorithms and error correction. _Russian Mathematical Surveys_, 52(6):1191, 1997.
* Koch et al. [2024] Mark Koch, Richie Yeung, and Quanlong Wang. Contraction of zx diagrams with triangles via stabiliser decompositions. _Physica Scripta_, 2024. URL [http://iopscience.iop.org/article/10.1088/1402-4896/ad6fd8](http://iopscience.iop.org/article/10.1088/1402-4896/ad6fd8).
* McElvanney and Backens [2023] Tommy McElvanney and Miriam Backens. Flow-preserving ZX-calculus Rewrite Rules for Optimisation and Obfuscation. In Shane Mansfield, Benoit Valiron, and Vladimir Zamdzhiev, editors, _Proceedings of the Twentieth International Conference on Quantum Physics and Logic, Paris, France, 17-21st July 2023_, volume 384 of _Electronic Proceedings in Theoretical Computer Science_, pages 203-219. Open Publishing Association, 2023. doi: 10.4204/EPTCS.384.12.
* Movassagh [2023] Ramis Movassagh. The hardness of random quantum circuits. _Nature Physics_, 19(11):1719-1724, 2023.
* Nagele and Marquardt [2024] Maximilian Nagele and Florian Marquardt. Optimizing zx-diagrams with deep reinforcement learning. _Machine Learning: Science and Technology_, 5(3):035077, sep 2024. doi: 10.1088/2632-2153/ad76f7. URL [https://dx.doi.org/10.1088/2632-2153/ad76f7](https://dx.doi.org/10.1088/2632-2153/ad76f7).
* Preskill [2018] John Preskill. Quantum computing in the nisq era and beyond. _Quantum_, 2:79, August 2018. ISSN 2521-327X. doi: 10.22331/q-2018-08-06-79. URL [http://dx.doi.org/10.22331/q-2018-08-06-79](http://dx.doi.org/10.22331/q-2018-08-06-79).
* Schulman et al. [2017] John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy optimization algorithms, 2017. URL [https://arxiv.org/abs/1707.06347](https://arxiv.org/abs/1707.06347).
* Schulman et al. [2018] John Schulman, Philipp Moritz, Sergey Levine, Michael Jordan, and Pieter Abbeel. High-dimensional continuous control using generalized advantage estimation, 2018. URL [https://arxiv.org/abs/1506.02438](https://arxiv.org/abs/1506.02438).
* Sutcliffe [2024] Matthew Sutcliffe. Smarter k-partitioning of zx-diagrams for improved quantum circuit simulation. _arXiv preprint arXiv:2409.00828_, 2024. URL [https://arxiv.org/abs/2409.00828](https://arxiv.org/abs/2409.00828).
* Sutcliffe and Kissinger [2024] Matthew Sutcliffe and Aleks Kissinger. Procedurally optimised zx-diagram cutting for efficient t-decomposition in classical simulation. _Electronic Proceedings in Theoretical Computer Science_, 406:63-78, August 2024. ISSN 2075-2180. doi: 10.4204/eptcs.406.3. URL [http://dx.doi.org/10.4204/EPTCS.406.3](http://dx.doi.org/10.4204/EPTCS.406.3).
* Sutcliffe and Kissinger [2024] Matthew Sutcliffe and Aleks Kissinger. Fast classical simulation of quantum circuits via parametric rewriting in the zx-calculus. _arXiv preprint arXiv:2403.06777_, 2024. URL [https://arxiv.org/abs/2403.06777](https://arxiv.org/abs/2403.06777).
* van de Wetering [2020] John van de Wetering. Zx-calculus for the working quantum computer scientist, 2020.
* Vaswani et al. [2017] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. In _Advances in neural information processing systems_, pages 5998-6008, 2017.
* Velickovic et al. [2018] Petar Velickovic, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro Lio, and Yoshua Bengio. Graph attention networks, 2018. URL [https://arxiv.org/abs/1710.10903](https://arxiv.org/abs/1710.10903).
* Xu et al. [2018] Keyulu Xu, Chengtao Li, Yonglong Tian, Tomohiro Sonobe, Ken ichi Kawarabayashi, and Stefanie Jegelka. Representation learning on graphs with jumping knowledge networks, 2018. URL [https://arxiv.org/abs/1806.03536](https://arxiv.org/abs/1806.03536).

## Appendix A Cat state decompositions

A \(|\mathrm{cat}_{n}\rangle\) state is defined as follows:

[MISSING_PAGE_FAIL:8]

[MISSING_PAGE_FAIL:9]

[MISSING_PAGE_FAIL:10]