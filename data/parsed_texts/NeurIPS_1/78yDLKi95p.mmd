# Language Model Tokenizers Introduce

Unfairness Between Languages

Aleksandar Petrov, Emanuele La Malfa, Philip H.S. Torr, Adel Bibi

University of Oxford

aleks@robots.ox.ac.uk

###### Abstract

Recent language models have shown impressive multilingual performance, even when not explicitly trained for it. Despite this, there are concerns about the quality of their outputs across different languages. In this paper, we show how disparity in the treatment of different languages arises at the tokenization stage, well before a model is even invoked. The same text translated into different languages can have drastically different tokenization lengths, with differences up to 15 times in some cases. These disparities persist even for tokenizers that are intentionally trained for multilingual support. Character-level and byte-level models also exhibit over 4 times the difference in the encoding length for some language pairs. This induces unfair treatment for some language communities in regard to the cost of accessing commercial language services, the processing time and latency, as well as the amount of content that can be provided as context to the models. Therefore, we make the case that we should train future language models using multilingually fair subword tokenizers.

## 1 Introduction

Language models are increasingly important in natural language processing tasks, as they can understand and generate human-like language. They have been deployed in applications such as virtual assistants (Chen et al., 2021; Ouyang et al., 2022), chatbots (Kuhail et al., 2023; Lee et al., 2023), machine translation (Stahlberg, 2020; Ranathunga et al., 2023), and text summarization (Kryscinski et al., 2019; Xu et al., 2020). As general-purpose technologies, it is also projected that Large Language Models (LLMs) will have a significant impact on the economy and the labour market (Teubner et al., 2023; Eloundou et al., 2023).

Such LLMs are often trained using large swaths of internet content regardless of language. Hence, these models often end up being multilingual, even if not by design. ChatGPT (OpenAI, 2022) is a prominent recent example (Bang et al., 2023; Jiao et al., 2023; Johnson, 2023). Given the economic benefits of LLMs and LLM-derived technology, it's beneficial that they support multiple languages. Equal access is crucial, and multilingual support is a key component of this.

However, this multilingualism is currently treated as a curious emergent phenomenon rather than a carefully designed, controlled and managed process. The performance of LLMs has been shown to be generally lower in non-target languages, a problem especially pronounced for low-resource languages (Virtanen et al., 2019; Ahuja et al., 2023). Providing access to the same technology in different languages but moderation and safety tools only for some has resulted in dire societal consequences before (Stecklow, 2018; Facebook, 2021; Leung, 2022). Differing cost of access could also reinforce inequality in opportunities for economic mobility and social participation (Lythreatis et al., 2022). Therefore, as LLM multilingualism emerges,

[MISSING_PAGE_FAIL:2]

The existence of glitch tokens like "\(\not\leftrightarrow\)\(\not\rightarrow\)\(\not\rightarrow\)"and "\(\not\rightarrow\)\(\not\rightarrow\)\(\not\rightarrow\)\(\not\rightarrow\)"despite the lack of a dedicated token for "\(\stackrel{{\mbox{\tiny{c}}}}{{=}}\)" shows that tokenizers are heavily influenced by the biases of the corpus source. If one uses non-natural inputs, log files, or specialist forums, the tokenizer vocabulary would reflect this. While cl100K_base, the tokenizer used for the newer ChatGPT and GPT-4, may not have glitch tokens it still requires two tokens to represent some Cyrillic letters and three tokens for more than 65% of kanji characters. Therefore, to place all languages on an equal footing, it is important to have the tokens balanced across languages.

## 3 Measuring Tokenizer Parity

To demonstrate that the above examples are not anecdotal evidence, we introduce the notion of _tokenizer parity_ to systematically assess how fairly tokenizers treat equivalent sentences in different languages. Parity occurs when a tokenizer exhibits similar tokenized lengths for the same sentence in different languages. Take a sentence \(s_{A}\) in language \(A\) and its translation \(s_{B}\) to language \(B\). Then, a tokenizer \(t\) achieves parity for \(A\) with respect to \(B\) at \(s_{A}\) and \(s_{B}\) if \(\nicefrac{{|t(s_{A})|}}{{|t(s_{B})|}}\approx 1\), where \(t(s_{A})\) is the tokenization of the sentence \(s_{A}\) and \(|t(s_{A})|\) represents its length. The ratio \(\nicefrac{{|t(s_{A})|}}{{|t(s_{B})|}}\) is the _premium_ for \(A\) relative to \(B\). 2

Footnote 2: The concurrent work by Ahia et al. (2023) also evaluates the tokenization premiums for different languages and reaches similar conclusions.

## 4 Tokenization Length Differences Across Languages

Languages vary significantly in the number of tokens required to encode the same content, as demonstrated in the examples in Section 2. Hence, following Section 3, we measure the tokenization premium of different tokenizers. To this end, we use the FLORES-200 parallel corpus, comprising of the same 2000 sentences taken from Wikipedia and human-translated to 200 different languages (Guzman et al., 2019; Goyal et al., 2021; Costa-jussa et al., 2022). We look at subword tokenization models which target English, languages other than English, language varieties, multi-lingual tokenizers, as well as tokenizer-free (byte-level) modelling.

### Parity for English-centric Models

As most models target English, we report in Table 1 the tokenization parity for a subset of languages in FLORES-200. The parities for all 200 languages are in Appendix C. 3 GPT-2 (Radford et al., 2019), RoBERTa (Liu et al., 2019), and the r50K_base, p50k_base and p50K_edit tokenizers (OpenAI, 2022) have close4 tokenization lengths so we report them together. ChatGPT and GPT-4 share the same cl100k_base tokenizer and are also reported together. Some models, such as FlanT5 (Chung et al., 2022), use a special UNK token to model unknown symbols not encountered during training. Hence, to ensure a fair comparison, we report only languages where no more than 10% of the input characters are mapped to UNK tokens (marked with --).

Footnote 3: An interactive table of all the languages and tokenizers is also available on the project website.

Footnote 4: The largest tokenizer parity difference between them is less than 0.005.

Table 1 shows large variations in the tokenizer parity for all tokenizers. For GPT-2 and RoBERTa, Pangasinan, the language with shortest tokenization, is already 66% more expensive to process than English. ChatGPT and GPT-4 are slightly closer to parity, likely

\begin{table}
\begin{tabular}{l r r r} \hline \hline  & \multicolumn{2}{c}{GPT-2} & \multicolumn{2}{c}{ChatGPT} & \multicolumn{1}{c}{FlanT5} \\  & RoBERTa & GPT-4 & \multicolumn{1}{c}{FlanT5} \\ \hline Bulgarian & 5.51 & 2.64 & — \\ Burmese & 16.89 & 11.70 & — \\ Chinese (Simplified) & 3.21 & 1.91 & — \\ Dzongkha & 16.36 & 12.33 & — \\ English & 1.00 & 1.00 & 1.00 \\ French & 2.00 & 1.60 & 1.60 \\ German & 2.14 & 1.58 & 1.37 \\ Italian & 2.01 & 1.64 & 2.18 \\ Japanese & 3.00 & 2.30 & — \\ Jingpho & 2.65 & 2.35 & 3.41 \\ Maori & 2.45 & 2.35 & 3.28 \\ Norwegian Bokmål & 1.86 & 1.56 & 2.24 \\ Odia & 13.38 & 12.48 & — \\ Pangasinan & 1.66 & 1.57 & 2.18 \\ Portuguese & 1.94 & 1.48 & 2.21 \\ Romanian & 2.48 & 1.88 & 1.50 \\ Santali & 12.86 & 12.80 & — \\ Shan & 18.76 & 15.05 & — \\ Spanish & 1.99 & 1.55 & 2.23 \\ Standard Arabic & 4.40 & 3.04 & — \\ Tumbuka & 2.78 & 2.57 & 3.29 \\ Vietnamese & 4.54 & 2.45 & — \\ \hline \hline \end{tabular}
\end{table}
Table 1: Premiums with respect to English on FLORES-200 for several **English-centric** models. The languages in the top or bottom three for any tokenizer, as well as the ones discussed in the text, are shown.

due to their larger vocabulary size. However, the cheapest languages, Portuguese, Pangasinan and German, still see a premium of 50% when compared to English. Shan has the worst tokenizer parity for all four models. Take as an example "\(\hat{\zeta}\):", one of the Shan words for "you". It is tokenized by ChatGPT and GPT-4 as:

This word is constructed from one consonant and three diacritics. As the diacritics are encoded separately, there are four Unicode codepoints for this Shan character, resulting in 9 tokens. The English "you" has three characters but a single token.

FlanT5 has more than 10% UNK tokens for 42% of languages (-- in Table 1). It has a higher premium than the other tokenizers for all other languages except German and Romanian.

Summary.All four English-centric tokenizers we consider are far from tokenization parity. Portuguese is closest to parity with English for the ChatGPT and GPT-4 tokenizer but still requires about 50% more tokens for the same content. Shan is furthest from parity for this tokenizer with 15 times longer encodings compared to English. FlanT5 is closer to parity with its premium range 1.37-3.41 but it encodes only 54% of the languages, so we cannot say that it is more multilingually fair than the other tokenizers.

### Parity for Models with Other Target Languages

There are models targeting languages other than English as well. Table 2 shows six such models based on the BERT architecture (Devlin et al., 2019): ArabicBERT (Safaya et al., 2020), RoCBert for Chinese (Su et al., 2022), CamemBERT for French (Martin et al., 2020), GottBERT for German (Scheible et al., 2020), BERT Japanese (Tohoku NLP Group, 2019) and PhoBERT for Vietnamese (Nguyen and Nguyen, 2020).

\begin{table}
\begin{tabular}{l r r r r r r} \hline \hline  & \multicolumn{2}{c}{Arabic RoCBert CameronBERT GottBERT BERT PhoBERT BERT (Chinese)} & \multicolumn{2}{c}{BERT(French)} & \multicolumn{2}{c}{PubMed(German) Japanese (Vietnamese)} \\ \hline Belarusian & 4.74 & — & — & 5.62 & — & 3.46 \\ Bulgarian & 4.30 & — & — & 4.73 & — & 3.09 \\ Catalan & 2.36 & 2.86 & 1.59 & 1.89 & 1.95 & 1.57 \\ Chinese (Simp.) & — & 1.00 & — & 3.95 & 0.82 & — \\ Chinese (Trad.) & — & 0.94 & — & 3.82 & 0.84 & — \\ Dutch & 2.52 & 2.92 & 1.68 & 1.73 & 1.98 & 1.58 \\ Dzongkha & — & — & — & 16.12 & — & — \\ English & 1.83 & 2.60 & 1.20 & 1.35 & 1.49 & 1.20 \\ French & 2.42 & 3.10 & 1.00 & 1.99 & 2.03 & 1.66 \\ Frulian & 2.33 & 2.79 & 1.66 & 1.98 & 1.92 & 1.59 \\ German & 2.63 & 3.12 & 1.85 & 1.00 & 2.04 & 1.67 \\ Greek & 4.93 & 3.00 & — & 6.73 & — & 3.73 \\ Italian & 2.58 & 3.10 & 1.63 & 1.93 & 2.04 & 1.60 \\ Japanese & 1.85 & 1.34 & — & 4.35 & 1.00 & \\ Jingpho & 3.12 & 3.12 & 2.13 & 2.55 & 2.47 & 1.84 \\ Luxembourgish & 2.56 & 2.97 & 1.82 & 1.75 & 1.96 & 1.72 \\ N. Lev. Arabic & 1.00 & — & — & 6.52 & — & — \\ Shan & — & — & — & 16.88 & — & — \\ Standard Arabic & 1.00 & — & — & 7.03 & — & — \\ Tagalog & 2.84 & 3.28 & 2.00 & 2.20 & 2.39 & 1.74 \\ Task Albanian & 2.66 & 2.90 & 2.17 & 2.39 & — & 2.02 \\ Tsonga & 3.01 & 3.09 & 2.03 & 2.29 & 2.46 & 1.76 \\ Tumbuka & 3.27 & 3.49 & 2.21 & 2.61 & — & 2.00 \\ Vietnamese & 2.52 & 2.55 & — & 4.12 & — & 1.00 \\ Yue Chinese & — & 0.92 & — & 3.75 & — & — \\ \hline \hline \end{tabular}
\end{table}
Table 2: Tokenizer premiums on the FLORES-200 dataset for **non-English centric models**. The premium is computed with respect to the target language (Modern Standard Arabic was used for Arabic BERT and Simplified Chinese for RoCBert). The languages that are in the top or bottom two for any tokenizer as well as the ones discussed are shown.

\begin{table}
\begin{tabular}{l r r r} \hline \hline  & \multicolumn{2}{c}{MuRIL} \\ \hline English & 1.00 \\ Nepali & 1.01 \\ Bengali & 1.01 \\ Tamil & 1.06 \\ Marathi & 1.06 \\ Kannada & 1.06 \\ Hindi & 1.16 \\ Malayalam & 1.18 \\ Gujarati & 1.19 \\ Sanskrit & 1.21 \\ Telugu & 1.21 \\ Odia & 1.21 \\ Sindhi & 1.22 \\ Assamese & 1.24 \\ Urdu & 1.26 \\ Eastern Panjabi & 1.35 \\ Kashmiri (Arabic) & 1.75 \\ Kashmiri (Devanagari) & 1.75 \\ Tumbka & 3.27 \\ Vietnamese & 2.55 & — & 4.12 & — & 1.00 \\ Yue Chinese & — & 0.92 & — & 3.75 & — \\ \hline \hline \end{tabular}
\end{table}
Table 3: Tokenizer premiums on the FLORES-200 dataset for the MuRIL model focusing on **16 Indian languages and English**. The premium is computed with respect to English.

The English premium for GottBERT (1.35) is lower than those for Dutch (1.73) and Luxembourgish (1.75), which are more linguistically similar to German. CamemBERT is similar: English has the lowest premium (1.20), while Catalan (1.59) and Friulian (1.66) have higher premiums. PhoBERT also has English with the lowest tokenizer premium (1.20). Thus, even models targeting other languages exhibit a preference for English tokenization.

RoCBert and BERT Japanese differ by having the other target language as the one closest to parity, possibly due to the partially shared script. ArabicBERT demonstrates a similar behaviour, with Central Kanuri (1.27) and Acehnese (1.73), both written in Arabic script, and with English at 1.82. Sharing writing systems seems to improve tokenization parity.

Across all tokenizers, the premium for English relative to the respective target language is significantly lower than the premium of RoBERTa for that target language. This asymmetry between English and all other languages likely stems from the extensive incorporation of English in documents written in other languages (Zhang et al., 2022).

We also consider MuRIL, a BERT-based model trained on 16 Indian languages and English (Khanuja et al., 2021). Despite the model's focus on Indian languages, it remains most token-efficient for English (see Table 3).

Unequal treatment of dialects or linguistic varieties can lead to social and economic disadvantages making it important to also study the tokenization differences between the "standard" language and its varieties. For Swiss German and the Mauritian and Haitian Creoles, there are large differences in tokenization lengths compared respectively to High German (on GottBERT) and French (on CamemBERT). English is much closer to parity for both models than these language varieties. Therefore subword tokenizers might not be able to generalize to language varieties, such as dialects and creoles. The tokenizers of ArabicBERT and BERT Japanese, however, are close to parity across various dialects of both languages and have lower premiums for the dialects than for English. This is likely due to the good representation of the dialects in the dataset as well as the dialects being linguistically closer to the respective standard languages. The detailed analysis is deferred to Appendix B.

Summary.We observed that the tokenizers targeting French, German and Vietnamese have English as the language closest to parity, rather than more linguistically close languages. On the other hand, tokenizers for Arabic, Chinese and Japanese have lower premiums for languages they share a script with. Notably, despite targeting Indian languages, MuRIL still has the shortest tokenizations for English. Finally, across all tokenizers, the premium for English is lower than the premium for the same language for the English-centric RoBERTa. Hence, we conclude that tokenizers for other languages give English preferential treatment.

\begin{table}
\begin{tabular}{l r r r r r} \hline \hline  & \multicolumn{2}{c}{XLM-R} & \multicolumn{2}{c}{NLLB mT5} & \multicolumn{2}{c}{M2M100} & \multicolumn{1}{c}{BLOOM} \\ \hline Bulgarian & 1.16 & 1.31 & 1.28 & 1.23 & 2.49 \\ Central Kanuri & 2.60 & 2.54 & 2.43 & 2.49 & 2.10 \\ Chinese (Simp.) & 0.97 & 1.11 & 0.92 & 1.05 & 0.95 \\ Dzongkha & — & 1.48 & 4.24 & — & 7.36 \\ English & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 \\ Indonesian & 0.94 & 0.93 & 1.08 & 0.98 & 0.96 \\ Italian & 1.19 & 1.25 & 1.34 & 1.25 & 1.62 \\ Japanese & 1.11 & 1.01 & 0.90 & 1.20 & 1.81 \\ Kabije & 2.98 & 1.56 & 2.83 & 2.71 & 3.34 \\ Santali & — & 2.49 & — & — & 12.71 \\ Shan & 4.43 & 1.94 & 3.28 & 4.63 & 12.06 \\ Std. Arabic & 1.18 & 1.40 & 1.35 & 1.29 & 1.14 \\ Std. Tibetan & — & 1.44 & 3.68 & — & 6.66 \\ Uyghur & 1.41 & 1.40 & 2.57 & 3.00 & 3.67 \\ Yue Chinese & 0.93 & 1.05 & 0.95 & 1.03 & 0.93 \\ \hline \hline \end{tabular}
\end{table}
Table 4: Tokenizer premiums with respect to English on FLORES-200 for **multilingual models**. The languages that are in the top or bottom two for any tokenizer, as well as the ones discussed in the text, are shown.

\begin{table}
\begin{tabular}{l r r} \hline \hline  & \multicolumn{2}{c}{CANINE} & \multicolumn{1}{c}{ByT5} \\  & \multicolumn{1}{c}{UTF-32 bytes} & \multicolumn{1}{c}{UTF-8 bytes} \\ \hline Bulgarian & 1.04 & 1.89 \\ Burmeese & 1.24 & 3.51 \\ Chinese (Simplified) & 0.34 & 0.93 \\ Chinese (Traditional) & 0.32 & 0.89 \\ Dzongkha & 1.25 & 3.64 \\ English & 1.00 & 1.00 \\ Italian & 1.18 & 1.19 \\ Japanese & 0.44 & 1.27 \\ Shan & 1.42 & 3.94 \\ Standard Arabic & 0.88 & 1.60 \\ Standard Tibetan & 1.13 & 3.31 \\ Tok Pisin & 1.28 & 1.28 \\ Tumbuka & 1.30 & 1.32 \\ Yue Chinese & 0.31 & 0.87 \\ \hline \hline \end{tabular}
\end{table}
Table 5: Tokenizer premiums with respect to English on FLORES-200 for **byte-level models**. The languages that are in the top or bottom two for any tokenizer, as well as the ones discussed in the text, are shown.

### Parity for Multilingual Models

There has been a growing interest in multilingual language models, particularly for translation (Dabre et al., 2020). As these models are intended to support a variety of languages, one would expect them to be close to tokenizer parity. We compare several such multilingual models: XML-R (Conneau et al., 2020), NLLB (Costa-jussa et al., 2022), M2M100 (Fan et al., 2021) and mT5 (Xue et al., 2020). All of these models use the SentencePiece tokenizer with upsampling for rare languages. The final model, BLOOM (Scao et al., 2022), uses byte-level BPE instead of SentencePiece and is designed to maintain similar ratios of tokens per word for each language as reference monolingual tokenizers.

BLOOM and NLLB encode all languages with less than 10% UNK tokens, respectively thanks to byte-level BPE tokenization and being trained on the same 200 languages as FLORES-200 (see Table 4). The other three models fail to encode at least one language. All five models have languages with premiums of more than 2.5. Still, all models are better than the English-centric models in Table 1. Figure 1 shows how XLM-R is much closer to parity than RoBERTa (on which it is based), over all languages it can encode. However, none of the models uniformly reaches parity across all languages. Therefore even models which are intentionally designed to be multilingual suffer from a lack of tokenization parity.

Summary:Multilingual models can improve the tokenization parity for different languages but challenges remain in achieving tokenization parity across all languages.

### Parity for Byte-level Tokenization Models

Byte-level representation is crucial for multilingual support, as it encodes any Unicode codepoint, even if unseen during training. One can also bypass vocabulary construction and directly employ the 256 byte values, enabling end-to-end training (_byte-level tokenization_). CANINE (Clark et al., 2022) is a large model that operates at the Unicode codepoint level rather than the byte level. The CANINE tokenizer is thus equivalent to the UTF-32 encoding, resulting in an implicit tokenizer with a vocabulary of 1,114,112. ByT5 (Xue et al., 2022), on the other hand, uses the UTF-8 encoding: an implicit vocabulary of 256 tokens.5

Figure 1: Comparison of the tokenization premiums for XLM-R and RoBERTa for the subset of languages that XLM-R encodes with less than 10% to the UNK token.

Figure 2: Average processing time and length of the tokenized inputs of RoBERTa. Each FLORES-200 sentence is processed for 20 independent runs. The script family designation is only for illustration purposes.

These byte-level models can represent any Unicode codepoint without an explicit tokenization step but there are still significant tokenization disparities. For CANINE, Shan has a premium of 4.58 relative to Yue Chinese. This can be attributed to the fact that CANINE provides a single token for each Unicode codepoint, which results in Chinese being more token-efficient (with a premium range 0.31-0.34 relative to English for the three Chinese languages) as each character is treated as a single token. This encoding also puts Shan at a disadvantage, as its encoding relies on diacritics represented as separate Unicode codepoints. Other languages, such as Tok Pisin and Tumbuka, which use the Latin script but require more characters than English for the same text, also face similar challenges.

Tokenization disparity is also present in the ByT5 model. The tokenization premium for ByT5 ranges from 0.87 (for Yue Chinese) to 3.94 (for Shan). The introduction of the variable-width UTF-8 encoding of Unicode characters in ByT5 creates another issue of unequal treatment. ASCII characters, which are sufficient for English, require only one byte. Other Latin script characters, as well as Greek, Cyrillic, Coptic, Armenian, Hebrew, Arabic and Syriac, require two bytes, while Chinese, Japanese and Korean characters require three bytes. Therefore, the tokenization of Chinese and Japanese is about three times as long for ByT5 as it is for CANINE (Table 5). Shan's premium of 3.94 is due to the fact that all its consonants and diacritics require three bytes. For example, the word "\(\overset{\sim}{\xi}\)." is encoded by ByT5 as 12 tokens, whereas the corresponding "you" requires 3 tokens. The situation is similar for other languages like Dzongkha, Tibetan and Burmese.

Summary.Byte-level models also fail to achieve parity among the languages from FLORES-200 exhibiting a premium of over 4 times for some language pairs. There are two sources of multilingual tokenizer disparities. First, there are natural differences in the number of characters used in different languages to communicate the same content. Second, the UTF-8 standard uses different number of bytes to encode codepoints of different scripts.

## 5 Fairness Implications of Tokenization Length Differences

We showed that no matter whether one uses subword, multilingual, or byte-level tokenization, none of the tokenizers gets close to parity for all languages in FLORES-200. This lack of tokenization parity is not merely a curiosity: it leads to unfairness in the cost to access language models, the latency of the service and the amount of data that can be processed.

### Cost

It is increasingly common to access LLMs as paid API services. One pricing approach, employed by OpenAI at the time of writing,6 is to charge per token. Therefore, the tokenization premiums discussed in Section 4 directly map to cost premiums. For ChatGPT and GPT-4, the cost to process a text in German or Italian is about 50% higher than to process the same text in English (Table 1). Using them in Dzongkha, Odia, Santali or Shan, the most expensive languages for these services, costs more than 12 times more than in English.

Footnote 6: [https://openai.com/pricing](https://openai.com/pricing)

Another pricing strategy is per Unicode character: the approach currently taken by the Google Cloud Natural Language service.7 However, as we showed in Section 4.4, the same content can have very different lengths when measured in Unicode characters. Burmese, Dzongkha, Shan, Tok Pisin or Tumbuka require more than 4 times more characters than Yue Chinese for the same text, resulting in a proportional cost difference. Therefore, both the per-token and the per-character approaches result in large disparities in the cost for users of different languages to use the exact same service.

Footnote 7: [https://cloud.google.com/natural-language/pricing](https://cloud.google.com/natural-language/pricing)

### Latency

High latency of real-time interactions for users of certain languages can result in a suboptimal experience and communication breakdowns. For customer support or emergency services, delays in response time can lead to miscommunication or delayed assistance.

As some languages have significantly longer tokenized inputs, they would also experience longer processing times. The transformer attention mechanism has a quadratic complexity in the number of input tokens (Keles et al., 2023). However, the full model architecture contains other submodules and therefore the overall complexity might be different.

To assess the effect of the tokenization length on the latency, in Figure 2 we plot the computation time of RoBERTa against the tokenization lengths. It appears that the processing time is linear in the tokenization length rather than quadratic, showing a strong correlation between sequence length and execution time. Therefore, tokenization disparities across languages also affect the latency and processing time for text in these languages.

As expected, English is on the left lower corner, having the shortest tokenization and one of the fastest processing times. Shan is on the other extreme with the longest tokenization length and execution time (almost twice that of English). We can also observe clear trends dependent on the script used. Latin script and other Greek-derived scripts show the shortest tokenization lengths and processing times followed by the Chinese-Japanese-Korean (CJK) and Arabic languages. Other predominantly Asian and African scripts have longer tokenization lengths and processing times.

The latency implications of tokenization disparity are not limited to text models. Speech recognition models often produce a series of tokens as their output sequentially. Similarly, speech synthesis takes as an input tokenized text (Latif et al., 2023). Therefore, differences in tokenization affect speech models too.

### Long context processing

Transformers models have difficulty processing long inputs (Liu et al., 2023). Given that the size of the input is contingent upon the tokenization process, inputs of greater length may impose a challenge for language models to adequately reason over. Such a predicament may result in reduced abilities or limited applicability for languages with high tokenization premiums. For example, RoBERTa has a fixed block size of 512, GPT-2 has 768, 1024, 1280, or 1600 Radford et al. (2019), GPT-4 comes in 8,000 and 16,000 context variants.8 These models cannot process inputs longer than that. Therefore, one can process less than a tenth of the content in languages like Burmese and Dzongkha than they can in English.

Footnote 8: [https://openai.com/pricing](https://openai.com/pricing)

Alongside inconveniencing the users of these languages, this can also result in diminished performance on automated systems, such as content moderation. Reliable content moderation is crucial for tackling hate speech and diminished performance has already been shown to fail to prevent its spread (Stecklow, 2018; Facebook, 2021). Therefore, reduced long context capabilities for some languages could have severe real-world impacts.

## 6 Towards Multilingual Tokenization Fairness

Section 5 showed that high values of tokenization parity for a language lead to increased cost and latency and decreased capacity for long context processing. In this section, we argue that training language models from scratch with a multilingually fair subword tokenizer is the only approach that can effectively address all these aspects of tokenization unfairness.

Subword tokenization is necessary to achieve parity.In Section 4.4, we showed that neither character-level nor byte-level input representation can achieve tokenization parity. Therefore, a variation of subword tokenization is necessary. For example, Chinese characters could be individual tokens, Latin characters might be represented as tokens with an average length of about 3 characters while pairs of Burmese characters and their diacritics being assigned single tokens. Such an approach would account for Chinese requiring one-third the characters English does (as shown in Table 5).

A separate tokenizer for determining the processing cost is not sufficient.An easy patch for existing models is to use a separate tokenizer for calculating how much a user should be charged. Using one tokenizer for computing the cost and another to process the input can easily be applied to existing systems without the need to retrain the LLM itself. However, as the tokenizer for the language model is unchanged, this approach would still suffer from latency and inability to process long contexts. Therefore, to ensure similar processing times and long context capabilities across languages, the language model has to be trained with a multilingually fair tokenizer.

The tokenization needs to support all Unicode codepoints.Amongst all tokenizers we examine in this paper, the ones which encode all FLORES-200 languages all have one thing in common: they build their tokenization on top of Unicode representation, allowing them them to represent all characters. Therefore, a multilingually fair tokenizer should also start from a Unicode (or equivalent) encoding. Considering that subword tokenization is necessary, building the vocabulary from UTF-8 would likely result in a smaller dictionary than building it on top of UTF-32. Hence, UTF-8 is likely the more appropriate choice.

Building a multilingually fair parallel corpus.Building and evaluating multilingually fair tokenizers requires attention to the parallel corpus used. One must ensure a balanced representation of topics, otherwise, the resulting tokenizer might end up being multilingually fair only for a subset of topics. The presence of named entities must also be balanced. For example, in FLORES-200, there are many English-centric names and institutions, which might skew the results in favour of English. Additionally, the same sentence can have different translations with varying tokenization lengths. To account for this, a diversity of translations could ensure tokenization fairness across languages. These limitations also hold for the results in this paper. Hence, developing a well-curated and diverse parallel corpus is crucial for the development and evaluation of a multilingually fair tokenizer.

Building a multilingually fair tokenizer from monolingual tokenizers.As discussed in Section 4, byte-level, character-level and word-level tokenizers cannot achieve tokenization parity and subword tokenization is needed. However, simply training a subword tokenizer on a balanced dataset is also not sufficient as languages can share tokens. For example, "hotel" is written the same way in English, Spanish, Italian, Portuguese, Dutch, Danish, Hungarian, Polish, etc. Hence, languages from more numerous language families will also witness shorter tokenization lengths while more isolated languages and scripts, e.g. Korean, would see larger language premiums: "hotel" in Korean is "\(\malt\)" and no other language has the same spelling as no other language uses the Korean script.

To address this issue, we suggest a two-stage process towards building a multilingually fair tokenizer. First, train individual monolingual tokenizers for all target languages. Then, merge them while maintaining parity. The merging can be done by starting with the 256 tokens corresponding to each value a byte can take and then repeatedly adding the most frequently used token for the language with the highest premium.

While a multilingually fair tokenizer would lead to more tokens being needed for the dominant language, this additional cost would likely be much smaller than the benefit for the rest of the languages. The vocabulary size has diminishing returns: the additional tokens correspond to increasingly rare (parts of) words. For example, with only a third of the vocab

Figure 3: How much longer will English language tokenization be if we dedicate a fraction of the cl1100k_base vocabulary to other languages? This plot shows how many tokens will be necessary to encode the English language corpus of FLORES-200 for different subsets of the cl100k_base vocabulary.

ulary, English sequences will become just 10% longer for ChatGPT/GPT-4 (see Figure 3). Therefore, by removing rarely used tokens of the dominant language and replacing them with frequently used tokens in other languages, we would likely see an overall net benefit.

## 7 Related Works

Fairness and bias in language models.The rapid increase in the size of language models has raised concerns regarding their biases and unfairness (Bender et al., 2021). For example, Bolukbasi et al. (2016), May et al. (2019) and Nadeem et al. (2021) showed that stereotypes and biases exist in language models, while Magee et al. (2021) identified the presence of intersectional biases which may be resistant to debiasing techniques. Language models were also shown to rely on social biases in question answering (Parrish et al., 2022). Another challenge is the generation of toxic content which can occur even without prompting (Gehman et al., 2020). Interestingly, Gururangan et al. (2022) point out that datasets consider one type of English as a higher quality depending on the location of the writer rather than on factuality or literary acclaim. Moreover, Ramesh et al. (2023) and Levy et al. (2023) highlighted the need to consider fairness issues of languages other than English, as they may have distinct sources of bias and solutions for English may not be applicable.

Multilingual performance.One approach towards similar multilingual performance is to frame languages as entities as recently proposed by Choudhury and Deshpande (2021). Another method is to separately train vocabularies for different language clusters to balance cross-lingual and language-specific tokens (Chung et al., 2020). Still, multilingual models struggle to deliver on the promises of deep transfer learning for lower-resourced languages (Virtanen et al., 2019) and perform differently depending on the script and resource level of the language (Bang et al., 2023). Ahuja et al. (2023) found that generative models perform better on higher-resource languages and languages that use the Latin script, possibly due to the context length restrictions for some languages. Zhang et al. (2022) show that a balanced tokenizer corpus results in better translation performance. Separately, Hofmann et al. (2021, 2022) show that the BPE results in suboptimal token choices even for English and demonstrate that addressing this issue boosts performance. Similarly, Rajab (2022) and Oladipo et al. (2022) discuss how tokenization affects performance for African languages.

Measuring tokenization lengths.Zhang et al. (2022) suggested using the ratio of the average sentence length in tokens to the length in characters as a measure of closeness to the character level. However, this method may not be suitable for comparing languages due to differences in sentence length across languages. On the other hand, Acs (2019) and Scao et al. (2022) measure the number of tokens created per word, but this method may not be effective for comparing languages due to differences in semantic content per word and the lack of word delineation in some languages. Rust et al. (2021) show that mBERT (Devlin et al., 2019) breaks down English words the least, in line with our findings of English receiving special treatment. However, to the best of our knowledge, we are the first to leverage a parallel corpus to compare tokenization lengths across languages.

## 8 Conclusion

This paper highlights the significant disparities in tokenization across different languages which can lead to unequal treatment and disadvantages for certain language communities. The findings reveal that even tokenizers explicitly trained for multilingual support exhibit tokenization lengths that vary by up to a factor of 13. Furthermore, character-level and byte-level models also demonstrate encoding length discrepancies that are more than 4 times longer. These disparities have important real-world implications including increased costs for accessing commercial language services, longer processing times and limitations on the amount of contextual information provided to language models. To address these issues, we propose the development of multilingually fair tokenizers for future language models emphasizing the importance of ensuring comparable performance and accessibility across supported languages. By achieving tokenization parity, we can mitigate inequalities and promote fair access to language technologies across diverse linguistic communities.

## Acknowledgements

We would like to thank Puyu Wang, Francisco Eiras, Ambre Bertrand and Carmen Scheide-mann for their linguistic advice. Janet Pierrehumbert introduced us to many relevant prior works. We also extend special gratitude to Shinnosuke Takamichi and Hiroshi Saruwatari for open-sourcing the CPJD corpus for this project. Finally, we thank the reviewers; their feedback greatly improved this manuscript.

AB has received funding from the Amazon Research Awards. This work is supported by a UKRI grant Turing AI Fellowship (EP/W002981/1) and the EPSRC Centre for Doctoral Training in Autonomous Intelligent Machines and Systems (EP/S024050/1). We also thank the Royal Academy of Engineering and FiveAI.

## References

* Abdelali et al. (2014) Ahmed Abdelali, Francisco Guzman, Hassan Sajjad, and Stephan Vogel. 2014. The AMARA corpus: Building parallel language resources for the educational domain. In _Proceedings of the Ninth International Conference on Language Resources and Evaluation_ (_LREC 14_). European Language Resources Association (ELRA).
* Ahia et al. (2023) Orevaoghene Ahia, Sachin Kumar, Hila Gonen, Jungo Kasai, David R. Mortensen, Noah A. Smith, and Yulia Tsvetkov. 2023. Do all languages cost the same? Tokenization in the era of commercial language models. _arXiv preprint arXiv:2305.13707_.
* Ahuja et al. (2023) Kabir Ahuja, Rishav Hada, Millicent Ochieng, Prachi Jain, Harshita Diddee, Samuel Maina, Tanuja Ganu, Sameer Segal, Maxamed Axmed, Kalika Bali, and Sunayana Sitaram. 2023. MEGA: Multilingual evaluation of generative AI. _arXiv preprint arXiv:2303.12528_.
* Bai et al. (2023) Jinze Bai, Shuai Bai, Shusheng Yang, Shijie Wang, Sinan Tan, Peng Wang, Junyang Lin, Chang Zhou, and Jingren Zhou. 2023. Qwen-VL: A versatile vision-language model for understanding, localization, text reading, and beyond. _arXiv preprint arXiv:2308.12966_.
* Bang et al. (2023) Yejin Bang, Samuel Cahyawijaya, Nayeon Lee, Wenliang Dai, Dan Su, Bryan Willie, Holy Lovenia, Ziwei Ji, Tiezheng Yu, Willy Chung, Quyet V. Do, Yan Xu, and Pascale Fung. 2023. A multitask, multilingual, multimodal evaluation of ChatGPT on reasoning, hallucination, and interactivity. _arXiv preprint arXiv:2302.04023_.
* massively multilingual & multimodal machine translation. _arXiv preprint arXiv:2308.11596_.
* Bassiouney (2009) Reem Bassiouney. 2009. _Arabic Sociolinguistics_. Edinburgh University Press.
* Bender et al. (2021) Emily M. Bender, Timnit Gebru, Angelina McMillan-Major, and Shmargaret Shmitchell. 2021. On the dangers of stochastic parrots: Can language models be too big? In _Proceedings of the 2021 ACM Conference on Fairness, Accountability, and Transparency_.
* Bengio et al. (2000) Yoshua Bengio, Rejean Ducharme, and Pascal Vincent. 2000. A neural probabilistic language model. _Advances in Neural Information Processing Systems_.
* Bolukbasi et al. (2016) Tolga Bolukbasi, Kai-Wei Chang, James Y Zou, Venkatesh Saligrama, and Adam T Kalai. 2016. Man is to computer programmer as woman is to homemaker? Debiasing word embeddings. In _Advances in Neural Information Processing Systems_.
* Bouamor et al. (2018) Houda Bouamor, Nizar Habash, Mohammad Salameh, Wajdi Zaghouani, Owen Rambow, Dana Abdulrahim, Ossama Obeid, Salam Khalifa, Fadhl Eryani, Alexander Erdmann, et al. 2018. The MADAR Arabic dialect corpus and lexicon. In _Proceedings of the Eleventh International Conference on Language Resources and Evaluation_ (_LREC 2018_).
* Chen et al. (2021) Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira Pinto, Jared Kaplan, Harri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, et al. 2021. Evaluating large language models trained on code. _arXiv preprint arXiv:2107.03374_.
* Chen et al. (2021)Monojit Choudhury and Amit Deshpande. 2021. How linguistically fair are multilingual pre-trained language models? In _Proceedings of the AAAI Conference on Artificial Intelligence_.
* Chung et al. (2020) Hyung Won Chung, Dan Garrette, Kiat Chuan Tan, and Jason Riesa. 2020. Improving multilingual models with language-clustered vocabularies. In _Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP)_.
* Chung et al. (2022) Hyung Won Chung, Le Hou, Shayne Longpre, Barret Zoph, Yi Tay, William Fedus, Eric Li, Xuezhi Wang, Mostafa Dehghani, Siddhartha Brahma, et al. 2022. Scaling instruction-finetuned language models. _arXiv preprint arXiv:2210.11416_.
* Chung et al. (2016) Junyoung Chung, Kyunghyun Cho, and Yoshua Bengio. 2016. A character-level decoder without explicit segmentation for neural machine translation. In _Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_.
* Clark et al. (2022) Jonathan H. Clark, Dan Garrette, Iulia Turc, and John Wieting. 2022. Canine: Pre-training an Efficient Tokenization-Free Encoder for Language Representation. _Transactions of the Association for Computational Linguistics_.
* Conneau et al. (2020) Alexis Conneau, Kartikay Khandelwal, Naman Goyal, Vishrav Chaudhary, Guillaume Wenzek, Francisco Guzman, Edouard Grave, Myle Ott, Luke Zettlemoyer, and Veselin Stoyanov. 2020. Unsupervised cross-lingual representation learning at scale. In _Annual Meeting of the Association for Computational Linguistics_.
* Costa-jussa et al. (2022) Marta R Costa-jussa, James Cross, Onur Celebi, Maha Elbayad, Kenneth Heafield, Kevin Heffernan, Elahe Kalbassi, Janice Lam, Daniel Licht, Jean Maillard, et al. 2022. No language left behind: Scaling human-centered machine translation. _arXiv preprint arXiv:2207.04672_.
* Dabre et al. (2020) Raj Dabre, Chenhui Chu, and Anoop Kunchukuttan. 2020. A survey of multilingual neural machine translation. _ACM Computing Surveys_.
* Dabre and Sukhoo (2022) Raj Dabre and Aneerav Sukhoo. 2022. MorisienMT: A dataset for Mauritian Creole machine translation. _arXiv preprint arXiv:2206.02421_.
* DeGraff (2007) Michel DeGraff. 2007. Kreyol Ayisyen, or Haitian Creole (Creole French).
* Devlin et al. (2019) Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: Pre-training of deep bidirectional transformers for language understanding. In _Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies_.
* Dogan-Schonberger et al. (2021) Pelin Dogan-Schonberger, Julian Mader, and Thomas Hofmann. 2021. SwissDial: Parallel multidialectal corpus of spoken Swiss German. _arXiv preprint arXiv:2103.11401_.
* Eloundou et al. (2023) Tyna Eloundou, Sam Manning, Pamela Mishkin, and Daniel Rock. 2023. GPTs are GPTs: An early look at the labor market impact potential of large language models. _arXiv preprint arXiv:2303.10130_.
* Facebook (2021) Facebook. 2021. Sri Lanka human rights impact assessment. Accessed on April 11, 2023.
* Fan et al. (2021) Angela Fan, Shruti Bhosale, Holger Schwenk, Zhiyi Ma, Ahmed El-Kishky, Siddharth Goyal, Mandeep Baines, Onur Celebi, Guillaume Wenzek, Vishrav Chaudhary, et al. 2021. Beyond English-centric multilingual machine translation. _The Journal of Machine Learning Research_.
* Gage (1994) Philip Gage. 1994. A new algorithm for data compression. _C Users Journal_.
* Gao et al. (2020) Yingqiang Gao, Nikola I. Nikolov, Yuhuang Hu, and Richard H.R. Hahnloser. 2020. Character-level translation with self-attention. In _Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics_.
* Gage et al. (2020)Samuel Gehman, Suchin Gururangan, Maarten Sap, Yejin Choi, and Noah A. Smith. 2020. RealToxicityPrompts: Evaluating neural toxic degeneration in language models. In _Findings of the Association for Computational Linguistics: EMNLP_. Association for Computational Linguistics.
* Goyal et al. (2021) Naman Goyal, Cynthia Gao, Vishrav Chaudhary, Peng-Jen Chen, Guillaume Wenzek, Da Ju, Sanjana Krishnan, Marc'Aurelio Ranzato, Francisco Guzman, and Angela Fan. 2021. The FLORES-101 evaluation benchmark for low-resource and multilingual machine translation. _Transactions of the Association for Computational Linguistics_.
* Gururangan et al. (2022) Suchin Gururangan, Dallas Card, Sarah K. Dreier, Emily K. Gade, Leroy Z. Wang, Zeyu Wang, Luke Zettlemoyer, and Noah A. Smith. 2022. Whose language counts as high quality? Measuring language ideologies in text data selection. _arXiv preprint arXiv:2201.10474_.
* Guzman et al. (2019) Francisco Guzman, Peng-Jen Chen, Myle Ott, Juan Pino, Guillaume Lample, Philipp Koehn, Vishrav Chaudhary, and Marc'Aurelio Ranzato. 2019. Two new evaluation datasets for low-resource machine translation: Nepali-English and Sinhala-English. In _Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP)_.
* Hattori (1973) Shiro Hattori. 1973. Japanese dialects. In _Diachronic, areal, and typological linguistics_.
* Hofmann et al. (2021) Valentin Hofmann, Janet Pierrehumbert, and Hinrich Schutze. 2021. Superbizarre is not superb: Derivational morphology improves BERT's interpretation of complex words. In _Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)_.
* Hofmann et al. (2022) Valentin Hofmann, Hinrich Schutze, and Janet Pierrehumbert. 2022. An embarrassingly simple method to mitigate undesirable properties of pretrained language model tokenizers. In _Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers)_.
* Hogg et al. (1984) Michael A. Hogg, Nicholas Joyce, and Dominic Abrams. 1984. Diglossia in Switzerland? A social identity analysis of speaker evaluations. _Journal of Language and Social Psychology_.
* Jiao et al. (2023) Wenxiang Jiao, Wenxuan Wang, Jen-tse Huang, Xing Wang, and Zhaopeng Tu. 2023. Is ChatGPT a good translator? Yes with GPT-4 as the engine. _arXiv preprint arXiv:2301.08745_.
* Johnson (2023) Johnson. 2023. ChatGPT is a marvel of multilingualism. _The Economist_.
* Kaye (2001) Alan S. Kaye. 2001. Diglossia: The state of the art. _International Journal of the Sociology of Language_.
* Keles et al. (2023) Feyza Duman Keles, Pruthuvi Mahesakya Wijewardena, and Chinmay Hegde. 2023. On the computational complexity of self-attention. In _International Conference on Algorithmic Learning Theory_.
* Khanuja et al. (2021) Simran Khanuja, Diksha Bansal, Sarvesh Mehtani, Savya Khosla, Atreyee Dey, Balaji Gopalan, Dilip Kumar Margam, Pooja Aggarwal, Rajiv Teja Nagipogu, Shachi Dave, Shruti Gupta, Subhash Chandra Bose Gali, Vish Subramanian, and Partha Talukdar. 2021. MuRIL: Multilingual representations for Indian languages. _arXiv preprint arXiv:2103.10730_.
* Kryscinski et al. (2019) Wojciech Kryscinski, Nitish Shirish Keskar, Bryan McCann, Caiming Xiong, and Richard Socher. 2019. Neural text summarization: A critical evaluation. In _Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP)_, Hong Kong, China.
* Koehn et al. (2021)* Kudo (2018) Taku Kudo. 2018. Subword regularization: Improving neural network translation models with multiple subword candidates. In _Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_.
* Kudo and Richardson (2018) Taku Kudo and John Richardson. 2018. SentencePiece: A simple and language independent subword tokenizer and detokenizer for neural text processing. In _Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing: System Demonstrations_.
* Kuhail et al. (2023) Mohammad Amin Kuhail, Nazik Alturki, Salwa Alramlawi, and Kholood Alhejori. 2023. Interacting with educational chatbots: A systematic review. _Education and Information Technologies_.
* Latif et al. (2023) Siddique Latif, Aun Zaidi, Heriberto Cuayahuitl, Fahad Shamshad, Moazzam Shoukat, and Junaid Qadir. 2023. Transformers in speech processing: A survey. _arXiv preprint arXiv:2303.11607_.
* Lee et al. (2017) Jason Lee, Kyunghyun Cho, and Thomas Hofmann. 2017. Fully character-level neural machine translation without explicit segmentation. _Transactions of the Association for Computational Linguistics_.
* Lee et al. (2023) Peter Lee, Sebastien Bubeck, and Joseph Petro. 2023. Benefits, limits, and risks of GPT-4 as an AI chatbot for medicine. _New England Journal of Medicine_.
* Lent et al. (2021) Heather Lent, Emanuele Bugliarello, Miryam de Lhoneux, Chen Qiu, and Anders Sogaard. 2021. On language models for creoles. In _Proceedings of the 25th Conference on Computational Natural Language Learning_. Association for Computational Linguistics.
* Lent et al. (2022) Heather Lent, Kelechi Ogueji, Miryam de Lhoneux, Orevaoghene Ahia, and Anders Sogaard. 2022. What a creole wants, what a creole needs. In _Proceedings of the Thirteenth Language Resources and Evaluation Conference_.
* Leung (2022) Janny Leung. 2022. Shortcuts and shortfalls in Meta' s content moderation practices: A glimpse from its oversight board's first year of operation. _Comparative Law and Language_.
* Levy et al. (2023) Sharon Levy, Neha Anna John, Ling Liu, Yogarshi Vyas, Jie Ma, Yoshinari Fujinuma, Miguel Ballesteros, Vittorio Castelli, and Dan Roth. 2023. Comparing biases and the impact of multilingual training across multiple languages. _arXiv preprint arXiv:2305.11242_.
* Liu et al. (2023) Nelson F Liu, Kevin Lin, John Hewitt, Ashwin Paranjape, Michele Bevilacqua, Fabio Petroni, and Percy Liang. 2023. Lost in the middle: How language models use long contexts. _arXiv preprint arXiv:2307.03172_.
* Liu et al. (2020) Yinhan Liu, Jiatao Gu, Naman Goyal, Xian Li, Sergey Edunov, Marjan Ghazvininejad, Mike Lewis, and Luke Zettlemoyer. 2020. Multilingual denoising pre-training for neural machine translation. _Transactions of the Association for Computational Linguistics_.
* Liu et al. (2019) Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. 2019. RoBERTa: A robustly optimized bert pretraining approach. _arXiv preprint arXiv:1907.11692_.
* Ludi (2007) Georges Ludi. 2007. The Swiss model of plurilingual communication. _Receptive multilingualism: Linguistic analyses, language policies and didactic concepts_.
* Lythreatis et al. (2022) Sophie Lythreatis, Sanjay Kumar Singh, and Abdul-Nasser El-Kassar. 2022. The digital divide: A review and future research agenda. _Technological Forecasting and Social Change_.
* Magee et al. (2021) Liam Magee, Lida Ghahremanlou, Karen Soldatic, and Shanthi Robertson. 2021. Intersectional bias in causal language models. _arXiv preprint arXiv:2107.07691_.
* Martin et al. (2020) Louis Martin, Benjamin Muller, Pedro Javier Ortiz Suarez, Yoann Dupont, Laurent Romary, Eric Villemonte de La Clergerie, Djame Seddah, and Benoit Sagot. 2020. CamemBERT: A tasty French language model. In _Annual Meeting of the Association for Computational Linguistics_.
* Martin et al. (2021)Chandler May, Alex Wang, Shikha Bordia, Samuel R. Bowman, and Rachel Rudinger. 2019. On measuring social biases in sentence encoders. In _Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers)_.
* Mielke et al. (2021) Sabrina J Mielke, Zaid Alyafeai, Elizabeth Salesky, Colin Raffel, Manan Dey, Matthias Galle, Arun Raja, Chenglei Si, Wilson Y Lee, Benoit Sagot, et al. 2021. Between words and characters: A brief history of open-vocabulary modeling and tokenization in NLP. _arXiv preprint arXiv:2112.10508_.
* Computerphile. Accessed on April 11, 2023.
* Munro (2010) Robert Munro. 2010. Crowdsourced translation for emergency response in Haiti: the global collaboration of local knowledge. In _Proceedings of the Workshop on Collaborative Translation: technology, crowdsourcing, and the translator perspective_. Association for Machine Translation in the Americas.
* Muysken and Smith (1994) Pieter Muysken and Norval Smith. 1994. The study of pidgin and creole languages. In _Pidgins and creoles: An introduction_.
* Nadeem et al. (2021) Moin Nadeem, Anna Bethke, and Siva Reddy. 2021. StereoSet: Measuring stereotypical bias in pretrained language models. In _Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing_ (_Volume 1: Long Papers_).
* Nguyen and Nguyen (2020) Dat Quoc Nguyen and Anh-Tuan Nguyen. 2020. PhoBERT: Pre-trained language models for Vietnamese. In _Findings of the Association for Computational Linguistics: EMNLP_.
* Oladipo et al. (2022) Akintunde Oladipo, Odunayo Ogundepo, Kelechi Ogueji, and Jimmy Lin. 2022. An exploration of vocabulary size and transfer effects in multilingual language models for African languages. In _3rd Workshop on African Natural Language Processing_.
* OpenAI (2022) OpenAI. 2022. Introducing ChatGPT. Accessed on April 11, 2023.
* OpenAI (2022) OpenAI. 2022. tiktoken. Git commit: 82facf9.
* OpenAI (2023) OpenAI. 2023. GPT-4 technical report. _arXiv preprint arXiv:2303.08774_.
* Ouyang et al. (2022) Long Ouyang, Jeffrey Wu, Xu Jiang, Diogo Almeida, Carroll Wainwright, Pamela Mishkin, Chong Zhang, Sandhini Agarwal, Katarina Slama, Alex Ray, et al. 2022. Training language models to follow instructions with human feedback. _Advances in Neural Information Processing Systems_.
* Parrish et al. (2022) Alicia Parrish, Angelica Chen, Nikita Nangia, Vishakh Padmakumar, Jason Phang, Jana Thompson, Phu Mon Htut, and Samuel Bowman. 2022. BBQ: A hand-built bias benchmark for question answering. In _Findings of the Association for Computational Linguistics: ACL 2022_.
* Pfeiffer et al. (2021) Jonas Pfeiffer, Ivan Vulic, Iryna Gurevych, and Sebastian Ruder. 2021. UNKs everywhere: Adapting multilingual language models to new scripts. In _Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing_.
* Radford et al. (2019) Alec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. 2019. Language models are unsupervised multitask learners.
* Rajab (2022) Jenalea Rajab. 2022. Effect of tokenisation strategies for low-resourced Southern African languages. In _3rd Workshop on African Natural Language Processing_.
* Ramesh et al. (2023) Krithika Ramesh, Sunayana Sitaram, and Monojit Choudhury. 2023. Fairness in language models beyond English: Gaps and challenges. In _Findings of the Association for Computational Linguistics: EACL 2023_. Association for Computational Linguistics.
* Ramesh et al. (2021)* Ranathunga et al. (2023) Surangika Ranathunga, En-Shiun Annie Lee, Marjana Prifti Skenduli, Ravi Shekhar, Mehreen Alam, and Rishemjit Kaur. 2023. Neural machine translation for low-resource languages: A survey. _ACM Computing Surveys_.
* Rumbelow and Watkins (2023a) Jessica Rumbelow and Matthew Watkins. 2023a. SolidGoldMagikarp III: Glitch token archaeology. Accessed on April 11, 2023.
* Rumbelow and Watkins (2023b) Jessica Rumbelow and Matthew Watkins. 2023b. SolidGoldMagikarp (plus, prompt generation). Accessed on April 11, 2023.
* Russ (1990) Charles Russ. 1990. _The Dialects of Modern German: A Linguistic Survey_.
* Rust et al. (2021) Phillip Rust, Jonas Pfeiffer, Ivan Vulic, Sebastian Ruder, and Iryna Gurevych. 2021. How good is your tokenizer? On the monolingual performance of multilingual language models. In _Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing_ (_Volume 1: Long Papers_).
* Safaya et al. (2020) Ali Safaya, Moutasem Abdullatif, and Deniz Yuret. 2020. KUISAIL at SemEval-2020 task 12: BERT-CNN for offensive speech identification in social media. In _Proceedings of the Fourteenth Workshop on Semantic Evaluation_.
* Le Scao et al. (2022) Teven Le Scao, Angela Fan, Christopher Akiki, Ellie Pavlick, Suzana Ilic, Daniel Hesslow, Roman Castagne, Alexandra Sasha Luccioni, Francois Yvon, Matthias Galle, et al. 2022. BLOOM: A 176B-parameter open-access multilingual language model. _arXiv preprint arXiv:2211.05100_.
* Scheible et al. (2020) Raphael Scheible, Fabian Thomczyk, Patric Tippmann, Victor Jaravine, and Martin Boeker. 2020. GottBERT: A pure German language model. _arXiv preprint arXiv:2012.02110_.
* Schuster and Nakajima (2012) Mike Schuster and Kaisuke Nakajima. 2012. Japanese and Korean voice search. In _IEEE International Conference on Acoustics, Speech and Signal Processing_ (_ICASSP_).
* Sennrich et al. (2016) Rico Sennrich, Barry Haddow, and Alexandra Birch. 2016. Neural machine translation of rare words with subword units. In _Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics_ (_Volume 1: Long Papers_).
* Seuren (1995) Pieter A. M. Seuren. 1995. Notes on the history and the syntax of Mauritian Creole. _Linguistics_.
* Shao et al. (2018) Yan Shao, Christian Hardmeier, and Joakim Nivre. 2018. Universal word segmentation: Implementation and interpretation. _Transactions of the Association for Computational Linguistics_.
* Sieber and Sitta (1987) Peter Sieber and Horst Sitta. 1987. Deutsch in der Schweiz. _Zeitschrift fur Germanistik_.
* Stahlberg (2020) Felix Stahlberg. 2020. Neural machine translation: A review. _Journal of Artificial Intelligence Research_.
* Stecklow (2018) Steve Stecklow. 2018. Hatebook. _Reuters_. Accessed on April 11, 2023.
* Su et al. (2022) Hui Su, Weiwei Shi, Xiaoyu Shen, Zhou Xiao, Tuo Ji, Jiarui Fang, and Jie Zhou. 2022. RoCbert: Robust Chinese BERT with multimodal contrastive pretraining. In _Annual Meeting of the Association for Computational Linguistics_.
* Sun et al. (2020) Lichao Sun, Kazuma Hashimoto, Wenpeng Yin, Akari Asai, Jia Li, Philip Yu, and Caiming Xiong. 2020. Adv-BERT: BERT is not robust on misspellings! Generating nature adversarial samples on BERT. _arXiv preprint arXiv:2003.04985_.
* Takamichi and Saruwatari (2018) Shinnosuke Takamichi and Hiroshi Saruwatari. 2018. CPJD corpus: Crowdsourced parallel speech corpus of Japanese dialects. In _Proceedings of the Eleventh International Conference on Language Resources and Evaluation_ (_LREC 2018_).
* Takamichi et al. (2018)Yuqing Tang, Chau Tran, Xian Li, Peng-Jen Chen, Naman Goyal, Vishrav Chaudhary, Jiatao Gu, and Angela Fan. 2020. Multilingual translation with extensible multilingual pretraining and finetuning. _arXiv preprint arXiv:2008.00401_.
* Teubner et al. (2023) Timm Teubner, Christoph M Flath, Christof Weinhardt, Wil van der Aalst, and Oliver Hinz. 2023. Welcome to the era of ChatGPT et al: The prospects of large language models. _Business & Information Systems Engineering_.
* The Unicode Consortium (2022) The Unicode Consortium. 2022. The Unicode standard, Version 15.0.0.
* Tiedemann (2012) Jorg Tiedemann. 2012. Parallel data, tools and interfaces in OPUS. In _Proceedings of the Eight International Conference on Language Resources and Evaluation_ (_LREC'12_).
* Tohoku (2019) Tohoku NLP Group. 2019. BERT models for Japanese NLP.
* Touvron et al. (2023) Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timothee Lacroix, Baptiste Roziere, Naman Goyal, Eric Hambro, Faisal Azhar, et al. 2023. LLaMA: Open and efficient foundation language models. _arXiv preprint arXiv:2302.13971_.
* Trentman and Shiri (2020) Emma Trentman and Sonia Shiri. 2020. The mutual intelligibility of Arabic dialects: Implications for the language classroom. _Critical Multilingualism Studies_.
* Vaswani et al. (2017) Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. _Advances in Neural Information Processing Systems_.
* Virtanen et al. (2019) Antti Virtanen, Jenna Kanerva, Rami Ito, Jouni Luoma, Juhani Luotolahti, Tapio Salakoski, Filip Ginter, and Sampo Pyysalo. 2019. Multilingual is not enough: BERT for Finnish. _arXiv preprint arXiv:1912.07076_.
* Webster and Kit (1992) Jonathan J. Webster and Chunyu Kit. 1992. Tokenization as the initial phase in NLP. In _The International Conference on Computational Linguistics_.
* Xu et al. (2020) Jiacheng Xu, Zhe Gan, Yu Cheng, and Jingjing Liu. 2020. Discourse-aware neural extractive text summarization. In _Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics_. Association for Computational Linguistics.
* Xue et al. (2022) Linting Xue, Aditya Barua, Noah Constant, Rami Al-Rfou, Sharan Narang, Mihir Kale, Adam Roberts, and Colin Raffel. 2022. ByT5: Towards a token-free future with pre-trained byte-to-byte models. _Transactions of the Association for Computational Linguistics_.
* Xue et al. (2020) Linting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya Siddhant, Aditya Barua, and Colin Raffel. 2020. mT5: A massively multilingual pre-trained text-to-text transformer. In _Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies_.
* Yamagiwa (1967) Joseph K. Yamagiwa. 1967. On dialect intelligibility in Japan. _Anthropological Linguistics_.
* Zhang et al. (2022) Shiyue Zhang, Vishrav Chaudhary, Naman Goyal, James Cross, Guillaume Wenzek, Mohit Bansal, and Francisco Guzman. 2022. How robust is neural machine translation to language imbalance in multilingual tokenizer training? In _Proceedings of the 15th Biennial Conference of the Association for Machine Translation in the Americas_ (_Volume 1: Research Track_).
* Acs (2019) Judit Acs. 2019. Exploring BERT's vocabulary. Accessed on April 11, 2023.
* Ceplo et al. (2016) Slavomir Ceplo, Jan Batora, Adam Benkato, Jiri Milicka, Christophe Pereira, and Petr Zemanek. 2016. Mutual intelligibility of spoken Maltese, Libyan Arabic, and Tunisian Arabic functionally tested: A pilot study. _Folia Linguistica_.
* De La Rocha et al. (2019)Background on Tokenization

To enable automatic processing of language, it must first be represented in a suitable form. The current practice is to use _tokenization_ which is the process of turning natural language into sequences of _tokens_ coming from a finite and pre-determined set called _vocabulary_(Webster and Kit, 1992). Each token is typically associated with an integer value. Language models process such sequences of integers, rather than sequences of characters or words. In this section, we offer a brief overview of the contemporary tokenization methods. For further details, we recommend the comprehensive survey by Mielke et al. (2021).

Word tokenization.The simplest tokenization method is splitting at white spaces, where each word is assigned its own token (Bengio et al., 2000). This approach, however, requires that all possible words are in the vocabulary which is not possible in practice. Therefore word tokenization often fails to handle cases like "won't", words spelled with accented characters like "naive" or "acal", spelling mistakes and named entities like "Cottonshopeburnfoot" (Sun et al., 2020). This makes it unsuitable for representing _open vocabularies_, where the words encountered are not limited to a predetermined set. Furthermore, languages that do not use spaces to separate words, such as Chinese, Japanese and Burmese, pose additional challenges for this approach (Shao et al., 2018).

Subword tokenization.Hence, most current models use _subword tokenization_, where complex words are broken down into multiple tokens. Subword tokenization can efficiently handle complex terms by breaking them down into parts, _e.g._, "Cottonshopeburnfoot" "Cotton"+"shop"+"e"+"burn"+"foot". This approach can represent novel words, including misspelled ones, in an open vocabulary setting.

Subword vocabularies are usually data-based approaches which use large corpora to learn which subword sequences occur frequently in practice. Schuster and Nakajima (2012) introduced one of the first subword tokenizers, WordPiece, as a way to handle Japanese and Korean. Sennrich et al. (2016) proposed using Byte-Pair Encoding (BPE) (Gage, 1994) for learning subwords by merging the most frequently occurring pairs. BPE has since been widely used for most of the popular tokenizers. Kudo (2018) proposed an alternative approach via gradually pruning a large vocabulary. It removes tokens that are less likely to improve the performance of a simple unigram language model. Both methods rely on pre-tokenization (splitting on whitespaces, when available), which is not an invertible process. SentencePiece (Kudo and Richardson, 2018) addresses this de-tokenization ambiguity by treating whitespace as a special symbol, including it in the vocabulary, and supports both methods. SentencePiece with BPE is by far the most popular tokenization method for the models considered in this paper.

Unicode support.Even if subword tokenization ensures that individual characters are in the vocabulary, this still leaves the question of which characters are to be included. Simple solution is to take the ASCII characters. However, this means that words in other scripts or accented letters will fall out of it. A common workaround is to represent strings outside the vocabulary as a special UNK token. However, if there are too many UNK tokens in an input, the performance of the model tends to deteriorate (Pfeiffer et al., 2021). Therefore, it is desirable that the number of UNK tokens in the input is kept as low as possible. A simple and commonly used solution is to base the vocabulary building on Unicode.

Unicode is a computing industry standard for representing text characters (The Unicode Consortium, 2022). Unicode supports virtually all languages (including many ancient ones, emojis and special characters) by assigning every grapheme, modifier, punctuation mark, control character or formatting character one of 1,114,112 integer _codepoints_. The codepoints can be represented in binary as the variable-width encoding UTF-8, which encodes every codepoint with one to four bytes, or the fixed-width UTF-32 which encodes all codepoints with four bytes (see Figure 4).

UTF-8 can therefore represent any string in any language as a string of bytes. As each byte can take only one out of 256 values, 256 tokens can be sufficient to encode all texts. In practice this is usually combined with the BPE tokenizer. At first, the corpus is en coded as UTF-8 bytes and then BPE is ran on top of it. As most characters occur frequently, BPE would assign them a dedicated token. If the model encounters a character that didn't exist in the training corpus (_e.g._, the medium skin tone waving hand (3), it can still represent it byte-by-byte (F0+9F+91+8B for the waving hand and F0+9F+8F+BD for the skin tone modifier). This allows the vocabulary to efficiently represent frequently occurring words and rare characters. For example, the sentence "I love acaI" could be tokenized as "I "+"love "+"a"+C3+A7+"a"+C3+AD.

Byte-level and character-level tokenization.If we can represent any input with just 256 characters, then why bother with subword tokens? A key consideration is sequence length. This is since transformers (Vaswani et al., 2017), the currently predominant deep learning architecture for language models, have attention layers with a quadratic complexity in the input length. Hence, as the number of characters is much longer than the sub-word tokenization, working on the character level has been traditionally considered computationally inefficient. However, Chung et al. (2016), Lee et al. (2017), Gao et al. (2020), Clark et al. (2022) and Xue et al. (2022) proposed various architectures working around this issue and operating directly on characters or UTF-8 bytes.

## Appendix B Parity for Linguistic Varieties

A language can vary according to factors such as geography, history, social class and culture. As a result, different dialects, pidgin and creole language variations emerge, each with its own distinct set of grammar, vocabulary and pronunciation rules.9 Unequal treatment of certain dialects or languages can lead to social and economic disadvantages for those who speak them. Therefore, it is important to also study the tokenization differences between the "standard" language and its varieties.10 Unfortunately, parallel corpora for dialects, pidgin and creole language variations are far and few in between. In this section, however, we show results on regional Swiss German varieties, Arabic and Japanese dialects, as well as Haitian and Mauritian creoles.

Footnote 9: While no standard definitions exist, dialects are usually considered to be regional variations of a language, whereas pidgin and creole languages are contact languages that emerge from the interaction of speakers of different languages (Muysken and Smith, 1994).

Footnote 10: We refer to the language that the datasets label as “standard”, “official” or “dominant” without necessarily endorsing this designation.

Swiss German dialects.Swiss German is a dialect continuum which significantly differs from the formal High German. German-speaking Switzerland is diglossic:11 High German is used alongside regional dialects (Hogg et al., 1984). In contrast to other dialects, the use of Swiss dialects is increasing (Sieber and Sitta, 1987) especially online (Ludi, 2007). Swiss German dialects are often considered unintelligible to High German speakers and sometimes even speakers of different dialects may find difficulty understanding each other (Russ, 1990). Therefore, ensuring that German-targeting NLP applications can process Swiss German dialects is important.

Footnote 11: Diglossia is the situation of two dialects or languages being used by a single language community (Kaye, 2001).

To this end, we compare the tokenization parity relative to High German of GottBERT (Scheible et al., 2020) on the regional dialects of Aargau, Bern, Basel, Graubunden, Luzern,

Figure 4: Comparison of variable width Unicode encoding (UTF-8) and fixed width encoding (UTF-32). Image adapted from (The Unicode Consortium, 2022).

St. Gallen, Wallis and Zurich. We use SwissDial, a parallel multidialectal corpus, as the basis of comparison (Dogan-Schonberger et al., 2021). It is worth noting, that the dialect of each city and its corresponding region may differ significantly. Therefore there might be large variations within regions as well.

The results in Table 6 show a disparity between the tokenization lengths for High German and the Swiss dialects with a premium ranging from 1.38 for the Zurich dialect, or _Zurituitsch_, to 1.59 for the Bernese _Barndutsch_. In fact, English has a lower premium than any Swiss dialect (1.35 on FLORES-200, Table 2) and the premium for Bernese German is close to the linguistically further Swedish (1.64) and Norwegian Bokmal (1.65). The following example from SwissDial shows how the sentence "Like he's waiting for something" has almost twice as long tokenization in Bernese German compared to High German:

\begin{table}
\begin{tabular}{l r} \hline \hline Region & GottBERT parity \\ \hline High German & 1.00 \\ Zurich & 1.38 \\ St. Gallen & 1.40 \\ Basel & 1.41 \\ Graubinden & 1.44 \\ Luzern & 1.52 \\ Aargau & 1.53 \\ Wallis & 1.58 \\ Bern & 1.59 \\ \hline \hline \end{tabular}
\end{table}
Table 6: GottBERT tokenizer premiums on the SwissDial dataset for **Swiss German dialects**. The premium is computed with respect to High German.

\begin{table}
\begin{tabular}{l r l r} \hline \hline City & ArabicBERT & City & ArabicBERT \\ \hline Jeddah & 0.91 & Sanaa & 1.01 \\ Doha & 0.92 & Beirut & 1.02 \\ Riyadh & 0.92 & Benghazi & 1.02 \\ Muscat & 0.94 & Cairo & 1.03 \\ Basra & 0.95 & Sfax & 1.03 \\ Salt & 0.95 & Tripoli & 1.05 \\ Baghdad & 0.96 & Aswan & 1.06 \\ Damascus & 0.97 & Alexandria & 1.06 \\ Aleppo & 0.97 & Tunis & 1.06 \\ Jerusalem & 0.97 & Algiers & 1.07 \\ Khartoum & 0.98 & Mosul & 1.10 \\ Amman & 0.99 & Fes & 1.11 \\ Std. Arabic & 1.00 & Rabat & 1.17 \\ \hline \hline \end{tabular}
\end{table}
Table 7: ArabicBERT tokenizer premiums on the MADAR dataset for **Arabic dialects**. The premium is computed relative to Standard Arabic.

and its dialects are commonly used in written communication, it is vital that tokenizers handle them equally well.

To assess the performance of Arabic tokenizers, we compare the tokenization lengths of ArabicBERT (Safaya et al., 2020) across 25 Arabic dialects. To this end, we use the MADAR parallel corpus of Arabic dialects (Bouamor et al., 2018).

Table 7 shows the premiums relative to Standard Modern Arabic. The premium varies from 0.91 for the Jeddah dialect to 1.17 for the Rabat dialect. This is significantly lower than the premium for English (1.83 on FLORES-200 Table 2). The range is also much smaller than for the Swiss German dialects and approximately half of the considered dialects have a lower premium than Standard Modern Arabic. Therefore, one could say that the tokenizer of ArabicBERT achieves tokenization parity for these 25 Arabic vernaculars. This is likely because the corpus and vocabulary set on which ArabicBERT was trained contained dialectical Arabic. It is also possible that Arabic dialects are closer to Modern Standard Arabic and more mutually intelligible than Swiss German dialects are to High German (Ceplo et al., 2016; Trentman and Shiri, 2020). Still, this difference between the parity for Swiss and Arabic dialects indicates that including a broader set of vernaculars and dialects in the corpus results in improved tokenization parity.

Japanese dialects.Japanese also has a number of regional dialects (Hattori, 1973). We compare the tokenization parity of BERT Japanese (Tohoku NLP Group, 2019) across them. We employ the CPJD dataset by Takamichi and Saruwatari (2018) which contains transcriptions of the voice recordings of 250 sentences across 20 dialects.

The results in Table 8 show that the premium compared to Standard Japanese (Tokyo dialect) ranges from 1.01 (for Saitama prefecture, neighbouring Tokyo) to 1.15 (for Morokata-ben and Okayama-ben). These all are significantly lower than the premium for English (1.49, as shown in Table 2). Therefore, similarly to ArabicBERT, this is an example of the tokenizer being relatively well-aligned with the dialects. This is likely because Japanese dialects are more closely related (and intelligible (Yamagiwa, 1967) to Standard Japanese speakers) than the Swiss dialects are to High German speakers.

Mauritian and Haitian Creoles.While creoles often have some similarities with a high-resource language (usually English or French), the differences are significant to necessitate special attention to their support (Lent et al., 2021, 2022). This is especially critical for emergency services and disaster management (Munro, 2010).

Mauritian Creole is based on French as well as the languages of slaves imported from Madagascar and East Africa. As the British gained control of Mauritius, they brought indentured labourers from India who further had an effect on the formation of the modern Mauritian

\begin{table}
\begin{tabular}{l r r l} \hline \hline Dialect & Corpus Parity & Dialect & Corpus Parity \\ \hline Akita-ben & 2 & 1.09 & Miyazaki-ben & 1 & 1.05 \\ Awa-ben & 2 & 1.09 & Morokata-ben & 1 & 1.15 \\ Fukui-ben & 2 & 1.04 & Nara-ben & 2 & 1.09 \\ Fukuoka-ben & 1 & 1.03 & Nara-ben & 2 & 1.03 \\ Hiroshima-ben & 1 & 1.02 & Okayama-ben & 1 & 1.15 \\ Hokkaido-ben & 2 & 1.06 & Oosaka-ben & 2 & 1.03 \\ Iwaki-ben & 2 & 1.08 & Saitama-ben & 1 & 1.01 \\ Iyo-ben & 1 & 1.05 & Tosa-ben & 1 & 1.03 \\ Izumo-ben & 1 & 1.10 & Toshu-ben & 1 & 1.06 \\ Kanazawa-ben & 2 & 1.11 & Tsugaru-ben & 1 & 1.09 \\ Kyokotoba & 2 & 1.07 & & & \\ \hline \hline \end{tabular}
\end{table}
Table 8: BERT Japanese tokenizer premiums on the CPJD dataset for **Japanese dialects**. The premium is computed with respect to Standard Japanese. The CPJD dataset consists of two parallel corpora with the dialects split across the two. Hence, we have also indicated the corpus for each dialect. Nara-ben has two entries as the dataset has transcriptions for two separate speakers. The suffix “-ben” (\(\mathcal{H}\)) means “speech” or “dialect”.

Creole (Seuren, 1995). Similarly, Haitian Creole (_Kreyol_) emerged from the interaction of French and the various Niger-Congo languages spoken by the Africans brought as slaves (DeGraff, 2007).

Considering that both languages have their basis in French, one would expect that tokenizers targeting French would have low tokenization parities for Mauritian and Haitian Creoles. However, taking the tokenizer of CamemBERT (Martin et al., 2020), the premium for Mauritian Creole is 1.20 using the MorisienMT parallel corpus (Dabre and Sukhoo, 2022). The premium for Haitian Creole is 1.64 when using the QEDv2 corpus (Tiedemann, 2012; Abdelali et al., 2014). Haitian Creole is also represented in the FLORES-200 dataset where the premium relative to French is 1.58. This is significantly larger than linguistically further languages such as English (1.20), Pangasinan (1.49) and Nigerian Fulfude (1.54). Therefore, CamemBERT is not well-placed to tokenize French-related creoles despite the model being trained for French.

## Appendix C Extended Tables of Tokenization Premiums

In addition to the models presented in the main text, these extended tables also include LLAMA (Touvron et al., 2023), MBart50 (Liu et al., 2020; Tang et al., 2020), SeamlessM4T (Barrault et al., 2023) and Qwen-VL (Bai et al., 2023).

Language

[MISSING_PAGE_EMPTY:25]

\begin{tabular}{l c c c c c c c c c c c c} Language & & & & & & & & & & & & & & & & & \\ \hline Hebrew & 1.12 & 1.22 & — & 1.39 & 0.78 & 2.92 & 1.72 & — & 0.78 & — & 1.24 & 1.24 & 1.48 \\ Hindi & 1.25 & 1.59 & — & 2.55 & 1.00 & 1.28 & — & 1.16 & 1.00 & — & 1.22 & 1.22 & 4.47 \\ Chhattisgarhi & 1.41 & 1.60 & — & 2.46 & 0.97 & 1.44 & — & 1.34 & 0.97 & — & 1.26 & 1.26 & 4.26 \\ Croatian & 1.10 & 1.30 & 2.43 & 1.01 & 0.98 & 1.80 & 1.36 & — & 0.98 & 1.27 & 1.17 & 1.17 & 1.83 \\ Hungarian & 1.18 & 1.26 & 2.99 & 1.16 & 1.05 & 2.07 & 1.40 & 2.31 & 1.05 & — & 1.27 & 1.27 & 2.12 \\ Armenian & 1.38 & 1.58 & — & 2.04 & 1.11 & 4.31 & — & — & 1.11 & — & 1.51 & 1.54 \\ Igbo & 2.12 & 1.79 & 3.17 & 1.21 & 1.02 & 1.72 & 1.50 & — & 1.02 & — & 1.32 & 1.32 & 2.37 \\ Ilocano & 1.61 & 1.61 & 2.82 & 1.21 & 1.21 & 1.90 & 1.55 & 2.0

[MISSING_PAGE_FAIL:27]

[MISSING_PAGE_FAIL:28]