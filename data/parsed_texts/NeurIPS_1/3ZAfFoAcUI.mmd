# On the Inductive Bias of Stacking Towards Improving Reasoning

Nikunj Saunshi

Google Research

nsaunshi@google.com

&Stefani Karp

Google Research

stefanik@google.com

&Shankar Krishnan

Google Research

skrishnan@google.com

&Sobhan Miryoosefi

Google Research

miryoosefi@google.com

&Sashank J. Reddi

Google Research

sashank@google.com

&Sanjiv Kumar

Google Research

sanjivk@google.com

Corresponding author

###### Abstract

Given the increasing scale of model sizes, efficient training strategies like gradual stacking [10, 1] have garnered interest. Stacking enables efficient training by gradually growing the depth of a model in stages and using layers from a smaller model in an earlier stage to initialize the next stage. Although efficient for training, the model biases induced by such growing approaches are largely unexplored. In this work, we examine this fundamental aspect of gradual stacking, going beyond its efficiency benefits. We propose a variant of gradual stacking called **Midas** that can speed up language model training by up to 40%. Furthermore we discover an intriguing phenomenon: **Midas** is not only training-efficient but surprisingly also has an inductive bias towards improving downstream tasks, especially tasks that require reasoning abilities like reading comprehension and math problems, despite having similar or slightly worse perplexity compared to baseline training. To further analyze this inductive bias, we construct _reasoning primitives_ - simple synthetic tasks that are building blocks for reasoning - and find that a model pretrained with stacking is significantly better than standard pretraining on these primitives, with and without fine-tuning. This provides stronger and more robust evidence for this inductive bias towards reasoning. These findings of training efficiency and inductive bias towards reasoning are verified at 1B, 2B and 8B parameter language models. Finally, we conjecture the underlying reason for this inductive bias by exploring the connection of stacking to looped models and provide strong supporting empirical analysis.

## 1 Introduction

With the advent of very large deep learning models, efficient training to reduce the compute and time requirements is becoming increasingly important. Along with efficient optimization procedures, there has been a surge in interest to design efficient training strategies. One practical approach is to use smaller models to initialize larger models. Usually, this results in much faster convergence compared to vanilla training [2, 20, 17, 16, 18, 19, 23, 21, 22, 24, 25]. Stacking and growing based approaches have particularly gained traction recently. For instance, gradual stacking [17] is a prominent approach where in each stage the last few layers of the modelare stacked onto itself to initialize the model's next stage, until the desired depth is reached. This has been shown to significantly speed up BERT pretraining and also has some theoretical justification for the efficiency aspect. While these methods can speed up training, such changes can also induce specific biases into the model. However, the effect of stacking-based approaches on generalization remains a fundamental open question and is largely unexplored.

Modern deep learning models, when trained carefully, have been shown to exhibit interesting inductive biases, and their success is partially attributed to them. Such biases can arise either from model architecture, optimization techniques, or training strategies, and these biases come in various forms including simplicity bias, flatness of learned function, and sparsity. The implicit bias of optimizers, in particular, has been subject to extensive research. For instance, the implicit bias of first-order methods like stochastic gradient descent has been studied extensively in overparametrized settings (Gunasekar et al., 2018; Liu et al., 2023). Similarly, the inductive biases of architecture components like self-attention and convolution have also been studied (Edelman et al., 2022; Wang and Wu, 2023). More recently, there has also been interest in constructs like looped models (Lan et al., 2020; Dehghani et al., 2018) that share weights across layers. They have been shown to be powerful enough to emulate programmable computers (Gianou et al., 2023) and have the inductive bias to simulate iterative solutions (Yang et al., 2023), thereby yielding models with algorithmic abilities. However, in this vein, very little is known about the implicit biases of newer training strategies (e.g., greedy layerwise training or gradual stacking) that are gaining popularity.

In this work, we investigate the inductive bias of stacking-based approaches beyond training efficiency. We uncover an intriguing phenomenon -- _pretraining with a variant of stacking is not only efficient, but also has a desirable inductive bias towards improving downstream benchmarks_. First, through comprehensive empirical analysis, we discover a novel variant of gradual stacking called **Midas** (MIDdie grAdual Stacking) which copies the middle block of layers of a small network to initialize a larger network (see Figure 1). We demonstrate that **Midas** is more efficient in training compared to standard training and the previous leading stagewise training approach. However, remarkably, it also yields _significantly better performance on many downstream reasoning tasks_. For instance, we see in Figure 1 that **Midas** has significantly better performance on math word problems and reasoning primitives. This performance boost should come as a surprise, since **Midas** uses exactly the same data and fewer training FLOPS compared to standard training. In fact, the pretraining perplexity of **Midas** on a validation set matches that of standard baseline training. This strongly suggests that there is some inductive bias for **Midas** at play.

In this paper, we formalize and provide strong evidence for such an "inductive bias" - **Midas** achieves better downstream evaluations despite performing similarly in terms of pretraining validation perplexity. Thus, the improved quality of **Midas** is not because of better generalization in the pretraining objective, but rather due to its ability to extract more skills and abilities from the pretraining process. This kind of inductive bias phenomenon was first formalized in Saunshi et al. (2022) for contrastive learning and later in Liu et al. (2023) for language modeling on synthetic data. However, this is the first evidence of a strong inductive bias for a training procedure in real language model

Figure 1: (a) Pictorial depiction of gradual stacking and **Midas**. (b) Accuracy improvements (in %) for model trained with **Midas** over baseline for various task groups, despite having the same perplexity. For both 1B, 2B and 8B models, we see that improvements are mostly positive, and are much larger for tasks that require a lot of reasoning.

training. While our real-world benchmarks already provide strong evidence, in order to better isolate the contributing factors, we construct simple synthetic tasks that are building blocks for reasoning, called _reasoning primitives_. We find that a model pretrained with **Midas** has much better performance on the reasoning primitives than a model obtained through standard pretraining, as is evident in Figure 1. In light of the above discussion, we state the main contributions of our paper.

* We propose a novel variant of gradual stacking, called **Midas**, that achieves better training efficiency than gradual stacking.
* Our investigation of the inductive bias in gradual stacking approaches, particularly with **Midas**, reveals a surprising benefit: _beyond enabling efficient training, it also enhances performance on downstream tasks_. This improvement is especially notable in tasks that rely on context and reasoning abilities.
* We provide strong evidence of the aforementioned phenomenon on several datasets that have previously been used to demonstrate reasoning capabilities.
* We construct simple synthetic tasks that are building blocks for reasoning and demonstrate that **Midas** performs significantly better than baseline training on these tasks. These datasets may be of independent interest to the LLM reasoning community.
* Finally, we conjecture the reason behind improved reasoning capabilities of **Midas** by presenting connections between gradual stacking and looped models and provide strong empirical evidence to support it.

## 2 Problem Setup

In this section, we first present the problem setup and background material needed for this paper. Before we discuss the problem setting, we set up the following notation for the rest of the paper.

**Notation.** For a deep network \(f\), we use \(f_{i}\) and \(\#(f)\) to denote the \(i^{\text{th}}\) layer and the number of layers of the network, respectively. With slight abuse of notation, we use \(f_{i,b}\) (where \(i,b\in Z^{+}\)) to denote the layers between \((i-1)\cdot b\) to \(i\cdot b\) of a deep network \(f\). In other words, \(f_{i,b}\) denotes the \(i^{\text{th}}\) block of \(b\) layers in a deep network \(f\). \(a_{1:k}\) is used to denote a sequence of \(k\) scalars \(\{a_{1},\dots,a_{k}\}\).

Our goal is to learn a function \(f:\mathcal{X}\rightarrow\mathcal{Y}\) which minimizes the loss \(\mathbb{E}_{(x,y)\sim\mathcal{D}}\ell(f(x),y)\), for some loss function \(\ell:\mathcal{Y}\times\mathcal{Y}\rightarrow\mathbb{R}^{+}\cup\{0\}\) and data distribution \(\mathcal{D}\) on \(\mathcal{X}\times\mathcal{Y}\). We are interested in functions of the form \(f=f_{L}\circ f_{L-1}\circ\dots\circ f_{1}\) where \(\circ\) and \(L\) represent function composition and depth of the network, respectively. We use \(\mathcal{F}_{L}\) to denote the function class consisting of functions of this form. Given samples from the distribution \(\mathcal{D}\), we typically use an iterative stochastic optimizer (e.g., SGD) to learn a function that minimizes the loss. We note that the optimization procedure is inconsequential to the arguments in the paper. For standard training, each iteration is of the form:

\[f^{t}=f^{t-1}+\mathcal{A}(f^{t-1},\mathcal{B}_{t},\eta_{t}),\] ( **Standard Training** )

where \(\mathcal{B}_{t}\) is a mini-batch from distribution \(\mathcal{D}\) and \(\mathcal{A}(f^{t-1},\mathcal{B}_{t},\eta_{t})\) represents the iterative optimizer update at \(f^{t-1}\) on \(\mathcal{B}_{t}\) and learning rate \(\eta_{t}\). The computation cost and memory requirement for training typically increases linearly with the depth, making even simple algorithms, like SGD, slow for very large models. Throughout this paper, we use \(T\) to denote the total number of training iterations.

### \(k\)-stage training

Since we primarily focus on stagewise training approaches, it is useful to formally define a stagewise training procedure. In contrast to standard training, \(k\)-stage training involves dividing the training process into \(k\) stages, and at each stage, using the the model from the previous stage to initialize the model in the current stage. For simplicity, we assume \(L\) is divisible by \(k\). The following are the key ingredients:

1. **Function class across stages.** At stage \(i\), we use function class \(\mathcal{F}_{d(i)}\) where \(d(i)\) denotes the depth of the network at that stage. When \(d(i)\ll L\), training is more efficient.
2. **Training schedules across stages.** As training is divided into \(k\) stages, we use \(T_{1},\cdots,T_{k}\) steps across stages such that \(\sum_{i=1}^{k}T_{i}=T\).

3. **Stage initialization.** This is the key component of stagewise training. Given a network \(f\in\mathcal{F}_{d(i-1)}\) trained in the \((i-1)^{\text{th}}\) stage, let \(\mathcal{M}_{i}(f)\) denote the network initialization for the next stage where \(\mathcal{M}_{i}:\mathcal{F}_{d(i-1)}\rightarrow\mathcal{F}_{d(i)}\) is a growth operator.

Almost all the recent stagewise training procedures are different instantiations of this framework, using different training schedules and stage initializations. We will revisit some prominent instantiations of the framework in the next section.

### Progressive & Gradual Stacking

Progressive and gradual stacking are two special instantiations of the aforementioned framework. We provide a brief description of these approaches since they are important for our discussion.

**Progressive Stacking**(Gong et al., 2019). This is a simple instance of \(k\)-stage training setup where model in the previous stage is stacked onto itself to initialize the model in the next stage. In particular, **(1)** depth \(d(i)=2^{i-1}d(1)\) grows exponentially, **(2)** schedule \(T_{i}\) is typically \(T/k\) or proportional to \(d(i)\), and **(3)** the growth function \(\mathcal{M}_{i}(f)=f\circ f\).

**Gradual Stacking**(Reddi et al., 2023). In contrast to progressive stacking, gradual stacking linearly increases the model depth by \(k\) in each stage. It only stacks the last \(L/k\) layers of model from the previous stage to initialize the model in the next stage, as follows.

1. The depth \(d(i)=\frac{L-i}{k}\) grows linearly with the stage.
2. \(T_{i}\) is typically either \(T/k\) or allocated proportional or exponential to depth.
3. \(\mathcal{M}_{i}(f_{d(i-1)}\circ\cdots\circ f_{1})=f_{d(i-1)}\cdots\circ f_{d(i -1)-(L/k)+1}\circ f_{d(i-1)}\cdots f_{1}\). This corresponds to stacking the last \(L/k\) layers onto the network to initialize the next stage model.

In the next section, we study a novel variant of gradual stacking that enables faster training and exhibits an interesting inductive bias, which we examine carefully.

## 3 Algorithm: Midas

We present the **Midas** algorithm in this section. We first discuss the motivation behind this variant of gradual stacking and then formally define the algorithm.

### Motivation

The motivation for **Midas** touches upon two crucial aspects: (a) the role of different layers in a deep network and (b) a connection to looped models. Before delving into more technical details, it is important to illustrate these points. We present the case for **Midas** based on three observations.

Figure 2: (a) For an ALBert model trained with weight sharing across all layers, we measure the functional similarity between layers by looking at the top 1% activated neurons in each MLP layer and measure the intersection-over-union (IoU) metric for each pair of layers. Despite all layers having the same parameters, a natural functional similarity structure emerges around the middle. (b) For a UL2 model trained with GradStack, we measure the cosine similarity between every pair of layer blocks for the first feedforward layer weights. (c) The same similarity measured for **Midas**. The cosine similarities for stacking based models suggests a strong connection to looped models, and **Midas** has a closer similarity structure to ALBert style looped models than GradStack.

**Observation 1: gradual stacking breaks the natural role of layers.** Recall that gradual stacking initializes a larger model by duplicating and stacking the last block of \(b\) from the smaller model. Thus in the newly initialized model, the second-last block of \(b\) layers will be the same as the last \(b\) layers of the smaller model (see Figure 1). Intuitively, this is undesirable since the last few layers have been shown to play a different role compared to other layers for Transformer models (Belrose et al., 2023). We further validate this in Figure 6. Thus, duplicating the last few layers can break the natural role of layers at the initialization, making it a suboptimal choice. However, it is plausible that the similarity structure across layers is broken after continued training and the initialization is inconsequential. The next observation shows that this is not true, and establishes a connection to looped models - networks with shared parameters between layers.

**Observation 2: gradual stacking leads to models resembling looped models.** To check the effect of the initialization, we measure the cosine similarity between weights of layers for a model pretrained with gradual stacking. In Figure 1(b), we observe that indeed the layers continue to have very high cosine similarity at the end of training, thus establishing a connection between stacking and looped models like ALBert (Lan et al., 2020) and Universal Transformers (Dehghani et al., 2018). Unsurprisingly, the similarity structure for gradual stacking is lopsided towards the end of the model, which raises the question: _Is this similarity structure natural for looped models?_

**Observation 3: looped models exhibit similarity in the middle.** In order to study this, we train a prototypical looped model, ALBert, where all layers share the same parameters. Surprisingly, despite parameters being shared, a natural similarity structure emerges between layers: yet again the first and last layers tend to be functionally dissimilar to other layers, whereas the functional similarity between layers is the highest in the middle (see Figure 1(a)).

The above observations provides a strong motivation for stacking in the middle rather than at the end, thus inspiring our Midas algorithm.

### Midas algorithm

First we define the following mapping operator that is useful for stage initialization in Midas.

\[\mathcal{M}(f,b)=f_{n,b}\circ\cdots\circ\underbrace{f_{\lceil n/2\rceil,b} \circ f_{\lceil n/2\rceil,b}}_{\text{Replication}}\circ\cdots\circ f_{1,b}, \tag{1}\]

where \(n=\#(f)/b\) is the number of blocks of \(b\) layers in deep network \(f\). Note that operator \(\mathcal{M}(f,b)\) expands the size of the network by size \(b\). Based on this operator, Midas can again be described as a simple instantiation of the \(k\)-stage training framework, as seen below. For completeness, the pseudocode for Midas in listed in Algorithm 1.

```
Schedule \(T_{1:k}\), \(\eta_{1:T}\), optimizer update \(\mathcal{A}\) (see Section 2), data distribution \(\mathcal{D}\). Initialize\(f^{1,0}\in\mathcal{F}_{L/k}\). for\(s=1\to k\)do for\(t=1\to T_{s}\)do  Sample batch \(\mathcal{B}_{t}\) from \(\mathcal{D}\). \(f^{s,t}=f^{s,t-1}+\mathcal{A}(f^{s,t-1},\mathcal{B}_{t},\eta_{t})\) endfor  Initialize for next stage: \(f^{s+1,0}=\mathcal{M}(f^{s,T_{s}},L/k)\) (see Equation 1) endfor return\(f^{k,T}\)
```

**Algorithm 1****Midas**

Figure 3: Histogram of accuracy improvements for models trained with Midas over baseline. The data points are Midas 1B models listed in Table 1. The figure shows that Midas-based models have much higher improvement in the contextual version of TyDiQA compared to the non-contextual version.

1. The depth \(d(i)=\frac{L^{i}}{k}\) grows linearly with the stage, similar to gradual stacking.
2. \(T_{i}\) is typically either proportional to \(i\) (linear proportional) or \(i^{2}\) (square proportional) or \(\exp(i)\) (exponential). We will revisit this during our empirical analysis.
3. We use growth operator \(\mathcal{M}\) in equation 1 for initializing the next stage, which corresponds to replicating the middle \(L/k\) layers to initialize the next stage model.

### Experiments: UL2 Pretraining

In this section, we evaluate **Midas** for standard language model pretraining. We train a 24L decoder-only model with 1.5B parameters using the UL2 objective (Tay et al., 2022) on a mixture of C4, Wikipedia, Arxiv and Github. The observations also hold for GPT-style autoregressive language modeling. To enable fair comparison, we cached the pretraining dataset and so all methods are trained for the same number 500B tokens in the same order, using the same batch size (refer to Appendix A.1 for more details on the training setup). We pretrain models with three methods: (a) standard training (_Baseline_), (b) gradual stacking (GradStack) and (c) our proposed method **Midas**. The goal is to compare them with respect to validation loss and downstream performance on several diverse benchmarks. Motivated by the proportional schedules from prior work, we try the following generalized proportional schedules for gradual stacking and **Midas**.

**Definition 3.1** (Prop-\(\alpha\) schedule).: _For a total training budget of \(T\) steps, the schedule Prop-\(\alpha\) spends time \(T_{i}\) in each stage such that \(T_{i}\propto i^{\alpha}\) for all stages \(i\in[k]\). Thus \(T_{i}=\frac{i^{\alpha}}{\sum_{j=1}^{i^{\alpha}}j^{\alpha}}T\)_

Prop-1 schedule has been found to work very well for BERT pretraining (Reddi et al., 2023). Since UL2 pretraining is a harder task, we also explore less aggressive schedules like Prop-2 and Prop-3 that spend more time on larger models.

**Efficiency and perplexity findings.** We summarize the main results in Table 1, for various stacking methods and schedules. Firstly, we note that for all schedules, **Midas** has significantly better validation log perplexity than GradStack at the same speedup level. This suggests that stacking in the middle is a lot more effective for optimization than stacking at the end of the model. With the Prop-2 schedule, **Midas** is 24% faster and nearly matches the baseline's log perplexity. Additionally, we observe that the findings are robust to the choice of block size for stacking.

**Downstream benchmark evaluations.** While perplexity can serve as a decent proxy for model quality, there is growing evidence that it is not the best measure (Liang et al., 2023). Downstream benchmark evaluations serve as a more holistic measure for quality and are out-of-distribution evaluations of skills. To this effect, we evaluate **Midas** on many standard benchmarks and these are grouped into task categories in Table 1 (refer to Appendix A.2 for more detailed evaluations on individual tasks). The accuracy for task category is an average over representative tasks from that group. For instance, for closed book QA task, we consider an average accuracy on TriviaQA, TydiQA (no context), NaturalQuestions and WebQuestions.

Surprisingly, we find that downstream improvements for **Midas** are significantly larger than the improvements in perplexity. In particular, **Midas** with Prop-2 schedule has very similar perplexity to baseline at 24% speedup, but the average downstream performance for **Midas** (26.8%) is much better than baseline (24.0%). In fact, even **Midas** with Prop-1 schedule which has worse log perplexity is much better on downstream evaluations. Similar trends of better downstream evals holds for the 2B parameter model. The improvements are particularly large for open book QA and math word problems, both of which are tasks that require reasoning abilities whereas memorization tasks like closed book QA do not improve. We conjecture that these downstream improvements are due to an _inductive bias_ induced by stacking and we dive deeper into this in the next section.

## 4 Inductive bias of stacking

Results in Table 1 demonstrate that **Midas** not only yields training speedups, but also improves downstream evaluations when trained on the same number of tokens as standard training. This suggests that stacking can extract more _skills_ out of the same data. Here, we take a closer look at these improvements in downstream evaluations through the lens of an _inductive bias_ of stacking.

### Downstream performance vs log perplexity

A reasonable expectation from pretraining is that improvements in the pretraining objective would correlate with improvements in model quality and downstream performance. This notion of transfer has even been theoretically formalized for language modeling in Saunshi et al. (2020), Arora and Goyal (2023). Thus, based on this, a natural explanation for the downstream improvements of stacking would be that it generalizes better on the pretraining objective. However, as we see in Table 1, downstream performance of **Midas** is better despite having similar or worse _validation_ perplexity - hence this is not simply the case of better generalization to unseen pretraining data. It is natural to ask: _If not perplexity, what explains this downstream phenomenon?_

Since pretraining objective is just a proxy objective for model quality, it is plausible that different training strategies and model architectures can extract different levels of skills from it. This is because there are multiple ways of doing well on the pretraining tasks, and some training strategies can be biased to pick one solution over another one. This behavior has been formalized as the inductive bias in pretraining by recent work (Saunshi et al., 2022; Liu et al., 2023) - at the same level of validation pretraining loss, different optimization algorithms could have vastly different downstream performance. We hypothesize that a similar phenomenon is at play when it comes to stacking.

**Isoplots.** Inspired by this phenomenon of different downstream performance at the same perplexity, we visualize the inductive bias of a method by plotting downstream accuracy vs log perplexity isoplots as training proceeds. We use the UL2 1B models that are pretrained with standard (baseline) training and with **Midas** using the Prop-2 schedule (refer to Section 3.3 for more details). In Figure 4, we visualize the downstream vs log perplexity plots for different task groups - closed-book QA, open-book QA and math word problems. We observe a very interesting trend - **Midas** and baseline training can have different isoplot behaviors and the divergence is different for different tasks.

\begin{table}
\begin{tabular}{l c c c|c c c|c|c} \hline \hline  & \(d(i)/i\) (black line) & Schedule & Speedup & \begin{tabular}{c} Loss (\(\downarrow\)) \\ (validation) \\ \end{tabular} & Closed & Open & Math Word & All Tasks \\ Book QA (\(\uparrow\)) & Book QA (\(\uparrow\)) & \begin{tabular}{c} Problems (\(\uparrow\)) \\ (\(\uparrow\) value) \\ \end{tabular} & \begin{tabular}{c} Average (\(\uparrow\)) \\ (\(\uparrow\) value) \\ \end{tabular} & 
\begin{tabular}{c} Average (\(\uparrow\)) \\ (\(\uparrow\) value) \\ \end{tabular} \\ \hline \hline \multicolumn{8}{c}{**1B Parameters**} \\ \hline Baseline & 24 & & 1x & **1.996** & **13.2** & 33.3 & 23.5 & 24.0 \\ \hline GradStack & 4 & Prop-1 & 1.39x & 2.045 & 10.3 & 31.4 & 23.5 & 22.6 \\
**Midas** & 4 & Prop-1 & 1.39x & 2.028 & 11.6 & 34.5 & 30.3 & 26.7 \\
**Midas** & 3 & Prop-1 & 1.41x & 2.032 & 10.6 & 36.1 & 27.0 & 25.6 \\ \hline GradStack & 4 & Prop-2 & 1.24x & 2.024 & 11.0 & 31.6 & 17.3 & 20.4 \\
**Midas** & 4 & Prop-2 & 1.24x & 2.009 & 11.7 & 36.3 & 29.0 & 26.8 \\
**Midas** & 3 & Prop-2 & 1.26x & 2.012 & 11.9 & **37.3** & 29.8 & 27.5 \\ \hline
**Midas** & 4 & Prop-3 & 1.16x & 1.999 & 12.5 & 34.8 & **33.3** & **28.3** \\ \hline \hline \multicolumn{8}{c}{**2B Parameters**} \\ \hline Baseline & 48 & & 1x & **1.926** & 15.2 & 39.1 & 27.1 & 28.0 \\ \hline
**Midas** & 8 & Prop-1 & 1.39x & 1.947 & 14.0 & 38.9 & 32.0 & 29.5 \\ \hline GradStack & 8 & Prop-2 & 1.24x & 1.945 & 14.2 & 37.0 & 24.5 & 25.9 \\
**Midas** & 8 & Prop-2 & 1.24x & 1.929 & **15.7** & **40.2** & **38.2** & **32.9** \\ \hline \hline \multicolumn{8}{c}{**8B Parameters**} \\ \hline Baseline & 72 & & 1x & **1.841** & 21.1 & 39.6 & 34.9 & 32.8 \\ \hline
**Midas** & 9 & Prop-2 & 1.26x & 1.844 & **21.8** & **40.0** & **43.1** & **36.4** \\ \hline \hline \end{tabular}
\end{table}
Table 1: Downstream evaluations for UL2 pretrained models with 1B, 2B and 8B parameters. Comparisons include standard training (Baseline), gradual stacking (GradStack) from (Reddi et al., 2023) and our proposed method **Midas**. The downstream evaluations are averaged over tasks within 3 task groups. See Appendix A for precise tasks included in each task group. For each category and model size, we highlight the top model is **bolded** and the second best model is underlined. Firstly, **Midas** is much better than GradStack, thus justifying stacking in the middle. Secondly, **Midas** can match the log perplexity of baseline training while being roughly 24% faster. Furthermore, even the schedule with 40% speedup has much better downstream evaluations compared to baseline, even though it has worse log perplexity. The improvements are particularly large for task groups that require reasoning (open book QA, math word problems).

### Reasoning vs memorization for QA

For a clearer display of the inductive bias, we measure the improvements due to **Midas** on closed book vs open book QA tasks. It is reasonable to assume that closed book QA tasks require strong memorization abilities whereas open book QA tasks require some reasoning abilities to infer answers from the context that is provided. On average, we see much larger improvements on open book QA tasks compared to closed book QA tasks, as already evident in Figure 1 and Table 1.

**Midas is significantly better on Open book QA.** To make a direct comparison, we consider TydiQA-GoldP and TydiQA-NoContext tasks - the datasets are identical and the only difference is whether or not additional context is provided (the answer for the contextual version is guaranteed to be inferred from the given context). In Figure 3, we see that the improvements by various **Midas** based models on the contextual version of TydiQA are much higher than those on the non-contextual version. This provides direct evidence of the bias of **Midas** towards improving tasks that require reasoning. Furthermore, we find that the memorization performance of stacking improves as the schedule spends more time on the larger model.

### Reasoning in math tasks

To test reasoning abilities, we evaluate the language models on various math word problem datasets like SVAMP (Patel et al., 2021), ASDiv (Miao et al., 2020), AQuA dataset for algebraic word problems, the MAWPS benchmark (Koncel-Kedziorski et al., 2016). We report 5-shot evaluation for the pretrained model on these tasks. Following Wei et al. (2022), we use an external calculator to do the arithmetic and evaluate the models on their ability to compute the correct expression for the answer. This is because small models have bad arithmetic accuracy. The choice of using calculator or not does not significantly affect the trends of the results. For stacking, we use **Midas**Prop-2 model because it achieves nearly the same perplexity as the baseline model (while being 24% faster), thus, leading to a fair comparison based on the previous notion of inductive bias.

**Midas is significantly better on Math/Reasoning tasks.** Detailed results can be found in Table 5. For most math tasks, we observe that the **Midas**-based pretrained model is significantly better than the baseline model, especially for the MAWPs benchmark. This provides further evidence of better math and reasoning capabilities of **Midas**.

**GSM8K fine-tuning.** We also evaluate the 2B and 8B models on harder math problems from the GSM8k dataset (Cobbe et al., 2021) through few-shot prompting and fine-tuning. Full results are presented in Table 2. For **Midas** we use the Prop-2 model that has very similar perplexity as the

Figure 4: Downstream evaluation vs validation log perplexity isoplots as training proceeds for baseline and **Midas** 1B models trained on the same data (stacking is 24% faster here). On the y-axis we track the performance on various task groups – closed book QA, open book QA, math word problems and our reasoning primitives from Section 5. On the x-axis the log perplexity is presented in the reverse order, thus downstream performance for both methods improves as log perplexity gets lower. For closed book QA (memorization) tasks **Midas** has very similar trends to baseline. For open book QA tasks and math word problems, **Midas** has much better downstream performance at an equivalent log perplexity. This showcases the inductive bias of **Midas** towards better overall quality and better reasoning abilities.

baseline model. We find that **Midas** has much higher accuracy after fine-tuning, thus suggesting that the benefits of the inductive bias continue after fine-tuning and are not just restricted to few-shot evaluations. In particular, on the test set, the accuracy metric increased from 5.3% (for the baseline model) to 10.4% (for **Midas**) for the 2B model (these numbers were produced by computing the average score over three runs with different random seeds). Similarly the GSM8k accuracy of the 8B model improves from 12.3% to 15.2%. This suggests that **Midas** not only improves the performance on harder math tasks, but also that the gains remain or improve after fine-tuning.

Effect of calculator.For LLMs with less than 20B parameters, Wei et al. (2022) found that models often solve math problems correctly but make arithmetic errors, leading to low accuracy. Wei et al. (2022) remedied this by computing all arithmetic expressions using a Python program as an external calculator. In Table 2 we find that this improves the accuracy for our models too. Interestingly, the gap between **Midas** and baseline gets even larger with calculator use in almost all comparisons. We believe this is because arithmetic abilities are closer to memorization for smaller models (Razeghi et al., 2022) and calculator use makes the problem closer to reasoning, since now the model only has to infer the right expression. We believe this interplay between reasoning and memorization for math problems deserves further investigation.

### Connection to looped models

Given the nature of the growth operator in each stage, we hypothesize that stacking based models are close to looped models. The layer duplication that happens at every stage ensures that blocks of layers start from a common initialization. We measure the similarity between different blocks of layers by measuring cosine similarities between the parameter vectors (see Figure 2). Since looped models have been conjectured to solve algorithmic problems (Giannou et al., 2023) by finding iterative solutions (Yang et al., 2023), we conjecture that the better reasoning abilities of **Midas** are due to this connection to looped models We believe exploring this further is a very fruitful direction.

\begin{table}
\begin{tabular}{c|c|c|c|c|c|c|c} \hline \multirow{2}{*}{Model} & \multirow{2}{*}{
\begin{tabular}{c} Pretraining \\ Loss (\(\downarrow\)) \\ \end{tabular} } & Math WPs (5-shot) & \multicolumn{2}{c|}{GSM8k (8-shot)} & \multicolumn{2}{c}{GSM8k (Finetune)} \\  & & W/o calc. & W calc. & W/o calc. & W/o calc. & W calc. \\ \hline \hline \multicolumn{8}{c}{**2B Parameters**} \\ \hline \hline Baseline & 1.926 & 15.4 & 27.1 & 3.0 & 3.6 & 5.3 & 8.5 \\
**Midas** & 1.929 & 22.5 & 38.3 & 3.0 & 4.1 & 10.4 & 14.5 \\ \hline \hline \multicolumn{8}{c}{**3B Parameters**} \\ \hline \hline Baseline & 1.841 & 27.3 & 34.9 & 4.5 & 6.6 & 12.3 & 15.8 \\
**Midas** & 1.844 & 32.9 & 43.1 & 5.5 & 7.4 & 15.2 & 18.7 \\ \hline \end{tabular}
\end{table}
Table 2: Evaluation on math tasks, including math word problems from Table 1 and a harder task GSM8k. For GSM8k we report accuracy with 8-shot prompts and with finetuning. We also report accuracy on all tasks after using an external calculator to fix arithmetic errors; this corresponds to w/ calc. Overall the use of calculator improves the accuracy for all models on all tasks. The benefit of **Midas** over baseline is even higher with calculator.

Figure 5: Accuracy improvements for model trained with **Midas** over baseline for representative _reasoning primitives_, despite having the same perplexity. We see clear improvements for **Midas** on almost all the primitives, both with 5-shot evaluation and after fine-tuning (FT) for the depth 1 and 2 primitive.

## 5 Deep dive into reasoning improvements

To further investigate the nature of this inductive bias, we construct various simple synthetic tasks to help tease apart the model's capabilities. We conjecture that these simple tasks capture core basic capabilities needed for contextual reasoning, and we therefore call these tasks "contextual reasoning primitives". They are: induction copying, variable assignment, and pre-school math (PSM), discussed further below. Overall, across various few-shot evaluations and fine-tuning, we see significant performance gaps between **Midas** and baseline training, suggesting that we have successfully isolated some of the basic capabilities at which **Midas** excels relative to baseline training. We refer the reader to Appendix B for more results and the exact input format.

**Primitive 1: Induction copying.** The "induction copying" primitive presents a sequence of words, followed by a subsequence selected randomly from within this original sequence, and asks the model to output the _next_ word in the sequence. A simplified example is: "pum nyj gdq ocu rzk jbw mlz eny kyx uni rzk jbw mlz eny kyx", and the expected output is "uni". This primitive is inspired by the "induction head" mechanism introduced in Olsson et al. (2022), which is posited to be the basic mechanism for in-context learning more generally. In Figure 5, task "Copying", we present results for 3-letter words of random letters, separated by spaces, with a sequence length of 10 and a subsequence length of 5.

**Primitive 2: Variable assignment.** The "variable assignment" primitive tests the model's ability to associate a value with a variable name and apply this ability _compositionally_, which we test by varying the "depth" of the task. We conjecture that this ability is a core function in contextual reasoning, particularly in math. An example of the depth-0 variant is "u=1; t=0; v=13; y=4; f=22; y=", and the expected output is 4. An example of the depth-2 variant is "y=7; f=0; z=3; b=9; x=8; q=y; l=f; m=z; h=x; a=b; n=h; j=m; t=a; i=1; g=q; n=", and the expected output is 8. Refer to Appendix B for more details.

**Primitive 3: Pre-school math (PSM).** This tests the model's ability to solve a very simple "pre-school math" problem by correctly associating multiple values and variables _simultaneously_ and applying this association to a particular task. An example is "z=6; b=5; i=-z+b; i=", and the expected answer (with chain-of-thought) is "-6+5=-1".

**5-shot evaluation results.** Figure 5 presents the results for representative tasks, with more results in Appendix B. Overall, we see that **Midas** outperforms baseline training across all tasks. In particular, we see that **Midas** is significantly stronger than the baseline at Depth 0, Copying, PSM-calc, and Depth 1, in decreasing order of magnitude of the performance gap. Depth-2 is much harder and is at random guessing (20%) for both models.

**Fine-tuning results.** Due to the difficulty of the variable assignment task at Depths 1 and 2, we investigate fine-tuning on these tasks as well. We fine-tune on a mixture of 32 depth-1 examples and 32 depth-2 examples (i.e., only 64 examples total), using full-batch gradient descent. Figure 5 reports the validation accuracy on Depth 1 and Depth 2 after fine-tuning on this mixture (tasks "Depth 1 (FT)" and "Depth 2 (FT)"). Overall, we see that fine-tuning with just 64 examples significantly improves performance, resulting in **Midas** outperforming the baseline by a gap of over 20% validation accuracy at both depths. See Appendix B for further fine-tuning and evaluation details.

## 6 Conclusions and future work

In this work we propose a novel stacking method that outperforms previous stacking methods and speeds up language model pretraining by 25-40%. In the process, we uncover a very intriguing inductive bias of stacking - its ability to improve downstream reasoning tasks. Through extensive empirical analysis, the paper makes a strong case for the presence and significance of this inductive bias. We believe this deserves further attention and exploration since understanding this inductive bias could unlock new approaches to improving model quality, reasoning in particular. The reasoning primitives start to provide more insights by isolating the reasoning improvements and we hope that the dataset is useful for future research on improving reasoning. Finally, understanding the dichotomy between memorization and reasoning, and how this affects the performance on various tasks, is an interesting direction to pursue.

Acknowledgments.We thank Srinadh Bhojanapalli and Vaishnavh Nagarajan for discussions on the role of layers and memory vs contextual tasks, respectively, in the early stages of the project. We also thank Satyen Kale for valuable feedback throughout the project.

## References

* Arora and Goyal (2023) Sanjeev Arora and Anirudh Goyal. A theory for emergence of complex skills in language models. _arXiv preprint arXiv:2307.15936_, 2023.
* Belrose et al. (2023) Nora Belrose, Zach Furman, Logan Smith, Danny Halawi, Igor Ostrovsky, Lev McKinney, Stella Biderman, and Jacob Steinhardt. Eliciting latent predictions from transformers with the tuned lens. _arXiv preprint arXiv:2303.08112_, 2023.
* Chen et al. (2022) Cheng Chen, Yichun Yin, Lifeng Shang, Xin Jiang, Yujia Qin, Fengyu Wang, Zhi Wang, Xiao Chen, Zhiyuan Liu, and Qun Liu. bert2BERT: Towards reusable pretrained language models. In _Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics_, 2022.
* Chen et al. (2016) Tianqi Chen, Ian Goodfellow, and Jonathon Shlens. Net2net: Accelerating learning via knowledge transfer. _International Conference on Learning Representations_, 2016.
* Cobbe et al. (2021) Karl Cobbe, Vineet Kosaraju, Mohammad Bavarian, Mark Chen, Heewoo Jun, Lukasz Kaiser, Matthias Plappert, Jerry Tworek, Jacob Hilton, Reiichiro Nakano, et al. Training verifiers to solve math word problems. _arXiv preprint arXiv:2110.14168_, 2021.
* Dehghani et al. (2018) Mostafa Dehghani, Stephan Gouws, Oriol Vinyals, Jakob Uszkoreit, and Lukasz Kaiser. Universal transformers. In _International Conference on Learning Representations_, 2018.
* Edelman et al. (2022) Benjamin L. Edelman, Surbhi Goel, Sham Kakade, and Cyril Zhang. Inductive biases and variable creation in self-attention mechanisms. In _International Conference on Machine Learning_, 2022.
* Giannou et al. (2023) Angeliki Giannou, Shashank Rajput, Jy-yong Sohn, Kangwook Lee, Jason D Lee, and Dimitris Papailiopoulos. Looped transformers as programmable computers. In _International Conference on Machine Learning_, 2023.
* Gong et al. (2019) Linyuan Gong, Di He, Zhuohan Li, Tao Qin, Liwei Wang, and Tieyan Liu. Efficient training of bert by progressively stacking. In _International conference on machine learning_, pages 2337-2346. PMLR, 2019.
* Gunasekar et al. (2018) Suriya Gunasekar, Jason Lee, Daniel Soudry, and Nathan Srebro. Characterizing implicit bias in terms of optimization geometry. In _Proceedings of the 35th International Conference on Machine Learning_, Proceedings of Machine Learning Research. PMLR, 10-15 Jul 2018.
* Kim et al. (2023) Dahyun Kim, Chanjun Park, Sanghoon Kim, Wonsung Lee, Wonho Song, Yunsu Kim, Hyeonwoo Kim, Yungi Kim, Hyeonju Lee, Jihoo Kim, et al. Solar 10.7 b: Scaling large language models with simple yet effective depth up-scaling. _arXiv preprint arXiv:2312.15166_, 2023.
* Koncel-Kedziorski et al. (2016) Rik Koncel-Kedziorski, Subhro Roy, Aida Amini, Nate Kushman, and Hannaneh Hajishirzi. Mawps: A math word problem repository. In _Proceedings of the 2016 conference of the north american chapter of the association for computational linguistics: human language technologies_, 2016.
* Lan et al. (2020) Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, and Radu Soricut. Albert: A lite bert for self-supervised learning of language representations. In _International Conference on Learning Representations_, 2020.
* Li et al. (2023) Xiang Li, Yiqun Yao, Xin Jiang, Xuezhi Fang, Xuying Meng, Siqi Fan, Peng Han, Jing Li, Li Du, Bowen Qin, et al. Flm-101b: An open llm and how to train it with $100 k budget. _arXiv preprint arXiv:2309.03852_, 2023.
* Liang et al. (2023) Percy Liang, Rishi Bonmasani, Tony Lee, Dimitris Tsipras, Dilara Soylu, Michihiro Yasunaga, Yian Zhang, Deepak Narayanan, Yuhuai Wu, Ananya Kumar, et al. Holistic evaluation of language models. _Transactions on Machine Learning Research_, 2023.
* Liu et al. (2019)Hong Liu, Sang Michael Xie, Zhiyuan Li, and Tengyu Ma. Same pre-training loss, better downstream: Implicit bias matters for language models. In _International Conference on Machine Learning_. PMLR, 2023.
* Miao et al. (2020) Shen-Yun Miao, Chao-Chun Liang, and Keh-Yih Su. A diverse corpus for evaluating and developing english math word problem solvers. In _Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics_, pages 975-984, 2020.
* Olsson et al. (2022) Catherine Olsson, Nelson Elhage, Neel Nanda, Nicholas Joseph, Nova DasSarma, Tom Henighan, Ben Mann, Amanda Askell, Yuntao Bai, Anna Chen, Tom Conerly, Dawn Drain, Deep Ganguli, Zac Hatfield-Dodds, Danny Hernandez, Scott Johnston, Andy Jones, Jackson Kernion, Liane Lovitt, Kamal Ndousse, Dario Amodei, Tom Brown, Jack Clark, Jared Kaplan, Sam McCandlish, and Chris Olah. In-context learning and induction heads. _arXiv preprint arXiv:2209.11895_, 2022.
* Patel et al. (2021) Arkil Patel, Satwik Bhattamisha, and Navin Goyal. Are nlp models really able to solve simple math word problems? In _Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies_. Association for Computational Linguistics, 2021.
* Raffel et al. (2020) Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. _Journal of machine learning research_, 2020.
* Razeghi et al. (2022) Yasaman Razeghi, Robert L Logan IV, Matt Gardner, and Sameer Singh. Impact of pretraining term frequencies on few-shot numerical reasoning. In Yoav Goldberg, Zornitsa Kozareva, and Yue Zhang, editors, _Findings of the Association for Computational Linguistics: EMNLP 2022_. Association for Computational Linguistics, 2022.
* Reddi et al. (2023) Sashank Reddi, Sobhan Miryoosefi, Stefani Karp, Shankar Krishnan, Satyen Kale, Seungyeon Kim, and Sanjiv Kumar. Efficient training of language models using few-shot learning. In _Proceedings of the 40th International Conference on Machine Learning_, 2023.
* Saunshi et al. (2020) Nikunj Saunshi, Sadhika Malladi, and Sanjeev Arora. A mathematical exploration of why language models help solve downstream tasks. In _International Conference on Learning Representations_, 2020.
* Saunshi et al. (2022) Nikunj Saunshi, Jordan Ash, Surbhi Goel, Dipendra Misra, Cyril Zhang, Sanjeev Arora, Sham Kakade, and Akshay Krishnamurthy. Understanding contrastive learning requires incorporating inductive biases. In _Proceedings of the 39th International Conference on Machine Learning_, 2022.
* Shazeer and Stern (2018) Noam Shazeer and Mitchell Stern. Adafactor: Adaptive learning rates with sublinear memory cost. In _International Conference on Machine Learning_, pages 4596-4604. PMLR, 2018.
* Tay et al. (2022) Yi Tay, Mostafa Dehghani, Vinh Q Tran, Xavier Garcia, Jason Wei, Xuezhi Wang, Hyung Won Chung, Dara Bahri, Tal Schuster, Steven Zheng, et al. Ul2: Unifying language learning paradigms. In _The Eleventh International Conference on Learning Representations_, 2022.
* Touvron et al. (2023) Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. _arXiv preprint arXiv:2307.09288_, 2023.
* Wang et al. (2023) Peihao Wang, Rameswar Panda, Lucas Torroba Hennigen, Philip Greengard, Leonid Karlinsky, Rogerio Feris, David Daniel Cox, Zhangyang Wang, and Yoon Kim. Learning to grow pretrained models for efficient transformer training. _arXiv preprint arXiv:2303.00980_, 2023.
* Wang et al. (2024) Yite Wang, Jiahao Su, Hanlin Lu, Cong Xie, Tianyi Liu, Jianbo Yuan, Haibin Lin, Ruoyu Sun, and Hongxia Yang. LEMON: Lossless model expansion. In _The Twelfth International Conference on Learning Representations_, 2024.
* Wang and Wu (2023) Zihao Wang and Lei Wu. Theoretical analysis of the inductive biases in deep convolutional networks. In _Thirty-seventh Conference on Neural Information Processing Systems_, 2023.
* Wang et al. (2020)Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Fei Xia, Ed Chi, Quoc V Le, Denny Zhou, et al. Chain-of-thought prompting elicits reasoning in large language models. _Advances in neural information processing systems_, 2022.
* Yang et al. (2023) Liu Yang, Kangwook Lee, Robert Nowak, and Dimitris Papailiopoulos. Looped transformers are better at learning learning algorithms. _arXiv preprint arXiv:2311.12424_, 2023.
* Yao et al. (2024) Yiqun Yao, Zheng Zhang, Jing Li, and Yequan Wang. Masked structural growth for 2x faster language model pre-training. In _The Twelfth International Conference on Learning Representations_, 2024.

Experimental Details

### Pretraining details

Model architecture.We use a decoder-only model and train it using the UL2 objective (Tay et al., 2022) with 60% causal LM, 20% prefix LM and 20% span corruption. The 1B model uses 24 layers, model dimension of 2048, hidden dimension of 5120 and 32 attention heads. The 2B model is very similar to the 1B model, except it uses 48 layers instead of 24. The 8B model uses 72 layers, model dimension of 2048, hidden dimension of 16384 and 16 attention heads.

Dataset.We use a mixture of C4 (57%) (Raffel et al., 2020), Wikipedia (17%), Github (17%), Arxiv (9%); the proportions are motivated by the dataset used for Llama pretraining (Touvron et al., 2023). All models are trained for 512B tokens that are precached so that all model see exactly the same data in the same order. This corresponds to 0.86 epochs of C4, 9 epochs of Wikipedia, 0.58 epochs of Arxiv and 0.44 epochs of Github.

Training details.For the 1B and 2B models, we use a cosine learning schedule with a peak learning rate of \(0.01\) that decays to \(0.001\) in the end, and use a batch size of 512. For the 8B model we use a peak learning rate of \(0.001\) and decay it to \(0.0001\), and use a batch size of 1024. Peak learning rate was tuned to be optimal for baseline training. All experiments use the AdaFactor optimizer (Shazeer and Stern, 2018) and sequence length of 1280.

### Additional downstream evaluations

In this section we share further experimental details related to the results summarized in the Table 1.

\begin{table}
\begin{tabular}{l c c c|c|c|c|c} \hline \hline  & \(d(i)/i\) & Schedule & Speedup & Trivia QA & TyDi QA & Natural & Web \\  & & & & & (w/o Context) & Questions & Questions \\ \hline \hline \multicolumn{6}{c}{**1B Parameters**} \\ \hline Baseline & 24 & & 1x & 28.1 & 12.0 & 4.5 & 8.1 \\ \hline GradStack & 4 & Prop-1 & 1.39x & 22.4 & 10.1 & 3.0 & 5.8 \\
**Midas** & 4 & Prop-1 & 1.39x & 25.0 & 11.7 & 3.7 & 5.9 \\
**Midas** & 3 & Prop-1 & 1.41x & 22.9 & 9.6 & 3.5 & 6.5 \\ \hline GradStack & 4 & Prop-2 & 1.24x & 22.9 & 11.4 & 4.0 & 5.9 \\
**Midas** & 4 & Prop-2 & 1.24x & 26.4 & 10.4 & 3.7 & 6.4 \\
**Midas** & 3 & Prop-2 & 1.26x & 25.5 & 10.9 & 3.8 & 7.4 \\ \hline
**Midas** & 4 & Prop-3 & 1.16x & 26.9 & 12.0 & 4.5 & 6.8 \\ \hline \hline \multicolumn{6}{c}{**2B Parameters**} \\ \hline Baseline & 48 & & 1x & 33.6 & 12.8 & 5.9 & 8.7 \\ \hline
**Midas** & 8 & Prop-1 & 1.39x & 31.1 & 11.7 & 5.6 & 7.8 \\ \hline GradStack & 8 & Prop-2 & 1.24x & 32.0 & 12.5 & 5.8 & 6.7 \\
**Midas** & 8 & Prop-2 & 1.24x & 34.6 & 13.0 & 6.3 & 8.9 \\ \hline \hline \multicolumn{6}{c}{**8B Parameters**} \\ \hline Baseline & 72 & & 1x & 47.0 & 15.2 & 9.6 & 12.9 \\ \hline
**Midas** & 9 & Prop-2 & 1.26x & 47.9 & 17.0 & 9.2 & 13.1 \\ \hline \hline \end{tabular}
\end{table}
Table 3: Closed Book QA

## Appendix B Details for contextual reasoning primitives

In this section, we provide further details corresponding to Section 5.

All evaluations in Section 5 were performed on the 1B-parameter models. For **Midas**, we use the variant with block size 4 and the Prop-2 schedule.

### Exact input format

Expanding on Section 5, here we provide the format of the inputs and target outputs. The only caveat is that, for simplicity of presentation, we present the inputs in 0-shot form here vs. their 5-shot form. In 5-shot form, which is how we conduct the 5-shot evaluations, each example is separated by two consecutive newline characters.

\begin{table}
\begin{tabular}{l c c c|c|c|c|c|c} \hline \hline  & \(d(i)/i\) & Schedule & Speedup & \begin{tabular}{c} TyDi QA \\ (w/ Context) \\ \end{tabular} & \begin{tabular}{c} SquadV2 \\ \\ \end{tabular} & 
\begin{tabular}{c} DROP \\ \end{tabular} & QuAC & CoQA \\ \hline \hline \multicolumn{8}{c}{**1B Parameters**} \\ \hline \hline Baseline & 24 & 1x & 31.4 & 41.1 & 22.9 & 18.8 & 52.6 \\ \hline GradStack & 4 & Prop-1 & 1.39x & 34.3 & 36.9 & 21.5 & 17.5 & 46.8 \\
**Midas** & 4 & Prop-1 & 1.39x & 36.1 & 39.1 & 24.3 & 18.7 & 54.4 \\
**Midas** & 3 & Prop-1 & 1.41x & 37.0 & 44.9 & 25.0 & 18.4 & 55.1 \\ \hline GradStack & 4 & Prop-2 & 1.24x & 30.0 & 41.0 & 22.1 & 17.2 & 47.8 \\
**Midas** & 4 & Prop-2 & 1.24x & 35.5 & 46.6 & 24.4 & 19.7 & 55.4 \\
**Midas** & 3 & Prop-2 & 1.26x & 38.2 & 46.3 & 24.8 & 19.9 & 57.3 \\ \hline
**Midas** & 4 & Prop-3 & 1.16x & 33.6 & 40.2 & 24.7 & 19.5 & 55.9 \\ \hline \hline \multicolumn{8}{c}{**2B Parameters**} \\ \hline \hline Baseline & 48 & 1x & 42.5 & 49.6 & 25.1 & 20.6 & 57.8 \\ \hline
**Midas** & 8 & Prop-1 & 1.39x & 37.7 & 48.9 & 26.1 & 20.1 & 61.8 \\ \hline GradStack & 8 & Prop-2 & 1.24x & 38.0 & 47.9 & 23.6 & 19.0 & 56.7 \\
**Midas** & 8 & Prop-2 & 1.24x & 41.8 & 48.0 & 27.9 & 20.7 & 62.6 \\ \hline \hline \multicolumn{8}{c}{**8B Parameters**} \\ \hline \hline Baseline & 72 & 1x & 39.1 & 51.8 & 25.9 & 19.6 & 61.6 \\ \hline
**Midas** & 9 & Prop-2 & 1.26x & 38.9 & 48.9 & 27.0 & 20.5 & 64.8 \\ \hline \hline \end{tabular}
\end{table}
Table 4: Open Book QA

\begin{table}
\begin{tabular}{l c c c|c|c|c|c|c|c} \hline \hline  & \(d(i)/i\) & Schedule & Speedup & \begin{tabular}{c} ASDiv \\ Add/Sub \\ \end{tabular} & \begin{tabular}{c} MAWPS \\ Multi-Arith \\ \end{tabular} & \begin{tabular}{c} MAWPS \\ Single-Eq \\ \end{tabular} & \begin{tabular}{c} MAWPS \\ Single-Op \\ \end{tabular} & \begin{tabular}{c} VAMP \\ Single-Op \\ \end{tabular} & \begin{tabular}{c} VAMP \\ Single-Op \\ \end{tabular} & 
\begin{tabular}{c} VAMP \\ Single-Op \\ \end{tabular} \\ \hline \hline \multicolumn{8}{c}{**1B Parameters**} \\ \hline \hline Baseline & 24 & 1x & 21.7 & 39.0 & 1.7 & 30.5 & 34.2 & 13.9 \\ \hline GradStack & 4 & Prop-1 & 1.39x & 19.1 & 38.8 & 2.0 & 31.1 & 35.2 & 15.1 \\
**Midas** & 4 & Prop-1 & 1.39x & 27.7 & 45.1 & 2.8 & 40.2 & 49.1 & 16.9 \\
**Midas** & 3 & Prop-1 & 1.41x & 25.8 & 45.1 & 2.5 & 33.1 & 40.7 & 14.8 \\ \hline \multicolumn{8}{c}{**GrabStack**} \\ \hline \hline GrabStack & 4 & Prop-2 & 1.24x & 15.2 & 29.1 & 1.0 & 24.6 & 26.3 & 7.6 \\
**Midas** & 4 & Prop-2 & 1.24x & 26.3 & 51.9 & 3.3 & 39.4 & 40.0 & 13.0 \\
**Midas** & 3 & Prop-2 & 1.26x & 28.6 & 39.0 & 3.0 & 41.1 & 50.4 & 16.8 \\ \hline
**Midas** & 4 & Prop-3 & 1.16x & 28.9 & 55.7 & 1.5 & 41.1 & 50.9 & 21.8 \\ \hline \hline \multicolumn{8}{c}{**2B Parameters**} \\ \hline \hline Baseline & 48 & 1x & 27.9 & 41.5 & 3.2 & 37.4 & 36.5 & 16.4 \\
**Midas** & 8 & Prop-1 & 1.39x & 29.0 & 56.2 & 1.0 & 41.9 & 45.9 & 18.1 \\ \hline GradStack & 8 & Prop-2 & 1.24x & 22.7 & 43.0 & 3.2 & 30.5 & 33.1 & 14.3 \\
**Midas** & 8 & Prop-2 & 1.24x & 34.7 & 58.2 & 7.3 & 50.0 & 57.5 & 21.8 \\ \hline \hline \multicolumn{8}{c}{**8B Parameters**} \\ \hline \hline Baseline & 72 & 1x & 35.0 & 44.6 & 3.7 & 46.0 & 57.1 & 22.9 \\ \hline
**Midas** & 9 & Prop-2 & 1.26x & 39.3 & 60.8 & 5.2 & 54.9 & 66.0 & 32.2 \\ \hline \hline \end{tabular}
\end{table}
Table 5: Math World ProblemsFor each dataset below, the inputs are separated from the targets by the "\(\uparrow\)" character (this is not a token in the input), and the targets are colored in red.

Figure 5 uses the following _evaluation_ datasets, in the following order:

1. Copying (random-letter words)
2. Variable assignment depth 0 (code)
3. Variable assignment depth 1 (code)
4. Variable assignment depth 1 (code)
5. Variable assignment depth 2 (code)
6. Variable assignment depth 2 (code)
7. Pre-school math (PSM)

**Copying (random-letter words):**

Fill in blank:

pum nyj gdq ocu rzk jbw mlz eny kyx uni rzk jbw mlz eny kyx ____. ->|uni

**Copying (real words):**

Fill in blank:

eat fit ban sea vet zit pea cat van tea sea vet zit pea cat ____. ->|van

**Variable assignment depth 0 (basic):**

Figure 6: Measure of linearity for different layers in pretrained BERT-Base and BERT-Large models. For each layer \(i\), we fit a linear map \(A_{i}\) between inputs \(Y_{i}\) and the output of the Transformer block (without the residual connection), \(Y_{i+1}-Y_{i}\). We then measure the r2 score and cosine similarity for the learned linear fit. The first and last few layers demonstrate a much higher level of linearity compared to the rest of the layers.

Fill in blank:

o=14

s=4

u=8

m=10

q=12

m=____... ->|10

**Variable assignment depth 1 (basic):**

Fill in blank:

g=21

b=24

v=3

s=23

h=20

k=b

a=s

n=v

f=g

d=h

a=____... ->|23

**Variable assignment depth 2 (basic):**

Fill in blank:

w=24

l=12

d=16

e=5

j=9

g=j

y=e

r=1

k=d

h=w

v=g

i=r

c=h

t=k

p=y

c=____... ->|24

**Variable assignment depth 0 (math):**

[MISSING_PAGE_EMPTY:18]

The following is a very short Python program. Use the program to resolve the value of the variable in the question.

Program: q=12 k=17 l=1 y=3 a=6 Question: What is the value of k? Answer: |17

**Variable assignment depth 1 (code):**

The following is a very short Python program. Use the program to resolve the value of the variable in the question.

Program: k=11 f=21 e=10 l=7 c=13 y=f o=c r=e u=k n=l Question: What is the value of o? Answer: |13

**Variable assignment depth 2 (code):**

The following is a very short Python program. Use the program to resolve the value of the variable in the question.

Program: t=13 j=14 v=4 s=17 y=21 q=j l=se=y h=t x=v b=x f=e n=q a=h i=l Question: What is the value of i? Answer: |17

**Pre-school math (PSM):**

Fill in blank: k=1 j=8 l=-k+j l=____. ->|-1+8=7

**Arithmetic:**

-3+2=-1

-6+1=-5

+9-7=2

-6-4=-10

-6-1=-7

+1+9=|10

### Fine-tuning details

For fine-tuning, we use the "code" variant of the variable assignment task, depths 1 and 2, in 0-shot form (i.e., no in-context examples). Due to the randomness of the data generation process and the rather small size of each dataset (64 examples), we randomly generate 3 different 64-example fine-tuning datasets (consisting of 32 depth-1 examples and 32 depth-2 examples), fine tune on each, and report our results as an average across the 3 runs. Table 7 reports the standard deviations as well.

Regarding hyperparameters, we continue to use AdaFactor [Shazeer and Stern, 2018] with the same hyperparameters as in the pretraining phase, with the exception of learning rate and batch size. We use a constant learning rate of 0.001, which was chosen to match the final learning rate of the pretraining phase. We use full-batch training with our 64-example datasets. We then evaluate performance separately on depth 1 and depth 2.

For every step \(i\in\{200,\dots,300\}\), chosen to be significantly _after_ training has converged to 100% accuracy (we do not observe overfitting in this range as training continues), we evaluate performance on a 1000-example holdout set. For smoothing purposes, we average over steps 200 through 300 and report the final averaged performance.

### Full 5-shot and fine-tuning results

5-shot.Table 6 includes 5-shot evaluation results for all contextual reasoning primitives. Rows 1, 9, 10, 11, and 14 are the rows which appear in Figure 5.

When performance is better than random guessing, **Midas** consistently outperforms the baseline in rows 1-11.

For pre-school math (rows 12-14), the value we report in Figure 5 is "with calculator". This is because the pre-school math task actually combines two capabilities: reasoning and arithmetic. Arithmetic can be thought of as a memorization task. We evaluate arithmetic for **Midas** and baseline training, and we see that arithmetic is quite poor for both models (7.8% and 9.6%, respectively, in Table 6). However, by evaluating PSM with chain-of-thought and only assessing the accuracy of the reasoning chain itself, i.e., "-6+5" vs. "-1", we can successfully disentangle reasoning and memorization in our evaluation. This is equivalent to having access to a calculator, so we call it "PSM with calculator" or "PSM-calc" in Figure 5.

Fine tuning.Table 7 presents the fine-tuning results from Figure 5 along with corresponding standard deviations (across the 3 trials).

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline
**Task** & **Midas (\%)** & **Baseline (\%)** & **Random guessing(\%)** \\ \hline Copying (random-letter words) & 24.3 & 14.9 & 10 \\ \hline Copying (real words) & 17.8 & 10.3 & 10 \\ \hline \hline Variable assignment depth 0 (basic) & 35.6 & 32.1 & 20 \\ \hline Variable assignment depth 1 (basic) & 20.6 & 21.9 & 20 \\ \hline Variable assignment depth 2 (basic) & 18.9 & 17.7 & 20 \\ \hline \hline Variable assignment depth 0 (math) & 92.8 & 50.1 & 20 \\ \hline Variable assignment depth 1 (math) & 26.5 & 19.2 & 20 \\ \hline Variable assignment depth 2 (math) & 20.4 & 18.8 & 20 \\ \hline \hline Variable assignment depth 0 (code) & 86.0 & 49.7 & 20 \\ \hline Variable assignment depth 1 (code) & 28.3 & 21.6 & 20 \\ \hline Variable assignment depth 2 (code) & 19.5 & 19 & 20 \\ \hline \hline Pre-school math (PSM), no calculator & 7.8 & 9.6 & n/a \\ \hline Arithmetic-only accuracy & 9.7 & 10.3 & n/a \\ \hline Pre-school math (PSM), with calculator & 69.5 & 62 & n/a \\ \hline \end{tabular}
\end{table}
Table 6: 5-shot results for all variants of the contextual reasoning primitives. This is an expanded set compared to Figure 5.

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline
**Task** & **Midas (\%)** & **Baseline (\%)** & **Random guessing(\%)** \\ \hline Variable assignment depth 1 (code) & 68.54 \(\pm\) 7.69 & 43.75 \(\pm\) 5.54 & 20 \\ \hline Variable assignment depth 2 (code) & 44.97 \(\pm\) 7.26 & 23.88 \(\pm\) 1.56 & 20 \\ \hline \end{tabular}
\end{table}
Table 7: Fine-tuning results corresponding to Figure 5’s 2 fine-tuning tasks. Additionally, this table reports the standard deviation across the 3 runs with \(\pm\) std dev.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The Abstract and Introduction provide a good summary of the paper's contributions. They express measured excitement about the results without overpromising. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: It has been discussed throughout the paper. In particular, Midas provides limited improvement on memorization-based tasks which has been discussed in Section 3.3 and Section 4. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs**Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [NA] Justification: No theoretical result is provided in this paper. Guidelines:

* The answer NA means that the paper does not include theoretical results.
* All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced.
* All assumptions should be clearly stated or referenced in the statement of any theorems.
* The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.
* Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.
* Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: Section 3 and Appendix A are sufficient for reproducing the main results discussed in this paper. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.

5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [No] Justification: We do not provide access to the data and code, but the data and models come from prior works; where differences between our work and prior work appear, we highlight them (Section 3 and Section A). Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: The experimental details have been provided in Appendix A. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [No] Justification: Due to the computational demands of exploring a reasonably large set of experiments, it was not feasible to perform multiple runs per setting. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.

* The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).
* The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)
* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [No] Justification: We do not report these details in the submission but can include them in a final version. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics [https://neurips.cc/public/EthicsGuidelines?](https://neurips.cc/public/EthicsGuidelines?) Answer: [Yes] Justification: We have reviewed the NeurIPS Code of Ethics. To the best of our knowledge, this work conforms. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [No] Justification: This a foundational/analytical paper not tied to any specific application or deployment. Guidelines: ** The answer NA means that there is no societal impact of the work performed.
* If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.
* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).

11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: No data or models have been released with this paper. Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.

12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [No] Justification: The creators of data and models are cited, but we did not include licenses for all assets. Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset.

* For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.
* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: The paper does not release new assets. Guidelines: * The answer NA means that the paper does not release new assets. * Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc. * The paper should discuss whether and how consent was obtained from people whose asset is used. * At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper. * According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.

* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.