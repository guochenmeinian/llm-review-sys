Promoting Fairness Among Dynamic Agents in Online-Matching Markets under Known Stationary Arrival Distributions

Will Ma

Graduate School of Business

Columbia University

New York, NY 10027

wm2428@gsb.columbia.edu

&Pan Xu

Department of Computer Science

New Jersey Institute of Technology

Newark, NJ 07102

pxu@njit.edu

###### Abstract

Online (bipartite) matching under known stationary arrivals is a fundamental model that has been studied extensively with the objective of maximizing the total number of customers served. We instead study the objective of _maximizing the minimum matching rate across all online types_, which is referred to as long-run (individual) fairness. For Online Matching under long-run Fairness (OM-LF) with a single offline agent, we show that the first-come-first-serve (FCFS) policy is \(1\)-competitive, _i.e._, matching any optimal clairvoyant. For the general case of OM-LF: We present a sampling algorithm (SAMP) and show that (1) SAMP is of competitiveness of at least \(1-1/e\) and (2) it is asymptotically optimal with competitiveness approaching one in different regimes when either all offline agents have a sufficiently large matching capacity, or all online types have a sufficiently large arrival rate, or highly imbalance between the total offline matching capacity and the number of online arrivals. To complement the competitive results, we show the following hardness results for OM-LF: (1) Any non-rejecting policy (matching every arriving online agent if possible) is no more than \(1/2\)-competitive; (2) Any (randomized) policy is no more than \((\sqrt{3}-1)\)-competitive; (3) SAMP can be no more than \((1-1/e)\)-competitive suggesting the tightness of competitive analysis for SAMP. We stress that all hardness results mentioned here are independent of any benchmarks. We also consider a few extensions of OM-LF by proposing a few variants of fairness metrics, including long-run group-level fairness and short-run fairness, and we devise related algorithms with provable competitive performance.

## 1 Introduction

In online (bipartite) matching problems, nodes on one side of a bipartite graph are given in advance, while nodes on the other side arrive one-by-one. We refer to the two sets of nodes as _offline_ and _online_ agents, respectively. The edges incident to an online agent, which indicate the offline agents eligible to serve it, are revealed upon its arrival. An online matching algorithm must immediately serve each arriving agent using up to one eligible and unmatched offline agent; matches once made cannot be rearranged. The performance of an algorithm is typically evaluated as the total number of matches made, taking expectations as necessary if there is randomness in the arrivals or the algorithm. In this paper, we study online matching problems where performance is instead determined by the _fairness_ in service provided to different online agent types.

**Online Matching under Long-Run Fairness** (\(\mathrm{OM-LF}\)). Suppose there is a bipartite graph \(G=(I,J,E)\), where \(I\) and \(J\) denote the sets of _types_ for offline and online agents, respectively. Here each online type is defined based on certain attributes, _e.g._, race and/or gender identity, which are observed upon arrival. For an offline agent (of type) \(i\in I\), let \(\mathcal{N}_{i}\subseteq J\) denote the "neighboring" online types that \(i\) is eligible to serve. Similarly, for an online agent (of type) \(j\in J\), let \(\mathcal{N}_{j}\subseteq I\) denote the offline agent types eligible to serve \(j\).1 Each offline type \(i\in I\) has an integer capacity \(b_{i}\geq 1\) indicating the maximum number of online agents (with types in \(\mathcal{N}_{i}\)) that \(i\) can serve.2 (**Arriving Process**). Agents of each online type \(j\in J\) arrive according to an _independent_ Poisson process with _homogeneous_ rate \(\lambda_{j}>0\), over a time horizon scaled to be \([0,1]\).3 When an online agent arrives in the time horizon [0,1], its type \(j\) is revealed, and an online algorithm (or policy) \(\mathsf{ALG}\) must make an immediate and irreversible decision from two options: either reject \(j\) or serve \(j\) by assigning it to an offline agent \(i\in\mathcal{N}_{j}\) that still has available capacity. For the latter choice, \(i\)'s matching capacity will be reduced by one. **(Fairness Metric)**. For each online type \(j\in J\), let \(X_{j}\) be the number of agents \(j\) served by \(\mathsf{ALG}\) and \(A_{j}\) the number of \(j\)'s arrivals by the end of the time horizon. For any \(\lambda>0\), let \(\mathrm{Pois}(\lambda)\) denote a Poisson random variable with mean \(\lambda\). By our assumption, \(A_{j}\) is distributionally identical to a \(\mathrm{Pois}(\lambda_{j})\) for every \(j\in J\). Let \(\mathcal{A}=(A_{j})_{j\in J}\), which is referred to as the (random) _arrival vector_ with each \(A_{j}\sim\mathrm{Pois}(\lambda_{j})\). We define a long-run fairness as follows.

Footnote 1: In this paper, we refer to an agent of type \(i\) (\(j\)) as agent \(i\) (\(j\)) for simplicity when the context is clear.

Footnote 2: The capacity \(b_{i}\) for offline type \(i\) can be understood as the collective service capacity of all agents belonging to that particular type. In other words, it represents the total capacity available from serving agents of type \(i\).

Footnote 3: Observe that our arrival setting is essentially equivalent to the _Know Identical Independent Distributions_ (KIID), which is a discrete counterpart commonly assumed among studies of online matching under known distributions; see detailed discussions regarding “Online Bipartite Matching” in Section 3.

\[\mathrm{FAIR-L}\ \left(\text{Long-Run Fairness}\right)=\min_{j\in J}\frac{ \mathbb{E}_{\mathcal{A},\mathsf{ALG}}[X_{j}]}{\mathbb{E}_{\mathcal{A}}[A_{j} ]}=\min_{j\in J}\frac{\mathbb{E}_{\mathcal{A},\mathsf{ALG}}[X_{j}]}{\lambda_{j }}. \tag{1}\]

We aim to design an online algorithm \(\mathsf{ALG}\) such that the achieved fairness is maximized. Note that all the information mentioned earlier, such as the graph \(G=(I,J,E)\), the capacities of offline agents \(\{b_{i}|i\in I\}\), and the arrival rates of online agents \(\{\lambda_{j}|j\in J\}\), are accessible to the algorithm \(\mathsf{ALG}\) as part of the input. _We refer to our problem as Online Matching under Long-Run Fairness (among online types)_ (\(\mathrm{OM-LF}\)).

**Remarks on \(\mathrm{FAIR-L}\)**. (1) Random variables \(\{X_{j}|j\in J\}\) are dependent on both the arrival vector \(\mathcal{A}\) and any random bits used in the algorithm \(\mathsf{ALG}\) itself. (2) For the long-run fairness \(\mathrm{FAIR-L}\), the time horizon typically represents one single day, and the algorithm is audited for fairness over a large number of days. In this case, the total number of agents (of type) \(j\) served over all the days will be statistically close to \(T\) times the numerator in (1), while the total number of arrivals of type \(j\) over all the days will be statistically close to \(T\) times the denominator. As a result, the audited performance is the minimum of this fraction over all types \(j\in J\).

## 2 Preliminaries and Main Contributions

**Competitive Ratio**. Consider a given instance, characterized as

\(\mathcal{I}=\big{(}G=(I,J,E),(b_{i})_{i\in I},(\lambda_{j})_{j\in J})\big{)}\), an online algorithm \(\mathsf{ALG}\), and a given fairness metric. We overload notation and let \(\mathsf{ALG}(\mathcal{I})\) denote the expected performance of \(\mathsf{ALG}\) on \(\mathcal{I}\). Similarly, we use \(\mathsf{OPT}(\mathcal{I})\) to denote an optimal clairvoyant algorithm and its corresponding performance when the context is clear. Note that \(\mathsf{OPT}\) can set the values of \((X_{j})_{j}\) with advance knowledge of \(\mathcal{A}\). With a fixed objective in mind, an algorithm \(\mathsf{ALG}\) is said to be at least _\(c\)-competitive_ if \(\mathsf{ALG}(\mathcal{I})\geq c\cdot\mathsf{OPT}(\mathcal{I})\) for any possible instance \(\mathcal{I}\). The maximum possible value over \(c\leq 1\) for which the above holds is called the _competitiveness_ of \(\mathsf{ALG}\). The maximum possible competitiveness within a class of online algorithms is called the _competitive ratio_ for that class.

**Holistic Nature of an Optimal Clairvoyant Algorithm**. Consider the classical (edge-weighted) online bipartite matching under KIID where the goal is to maximize the total weight of all matches. In that case, an optimal clairvoyant algorithm \(\mathsf{OPT}\) will aim to optimize the objective on every realized instance and it can always find a deterministic strategy to do so. However, this may not be true in our problem. To see this, consider a simple example under \(\mathrm{FAIR-L}\) where there is one single offline agent with \(b=1\) and two online types with \(\lambda_{1}=\epsilon\) and \(\lambda_{2}=1\). For any realized arrival vector \(\mathcal{A}=(A_{1},A_{2})\) with \(A_{1}\geq 1\) and \(A_{2}\geq 1\), we can show that the strategy of \(\mathsf{OPT}\) on \(\mathcal{A}\) can be characterized as follows: serve \(j=1\) and \(j=2\) with respective probabilities \(p\) and \(1-p\), where \(p\geq(\mathsf{e}-2)/(\mathsf{e}-1)\approx 0.418\). This suggests that OPT has to resort to a randomized strategy on \(\mathcal{A}\), and it does not suffice to simply maximize the objective of \(\min\big{(}\mathbb{E}[X_{1}]/\epsilon,\mathbb{E}[X_{2}]/1\big{)}\) on every realization of \(\mathcal{A}\). _More detailed discussions and clarifications can be seen in Appendix A_.

**Benchmark Linear Program (LP).** To guide the choice between offline agents, we write the following LP with variables \(\{x_{ij}|(ij)\in E\}\) and \(s\), where the variable \(x_{ij}\) can be interpreted as the expected number of online type \(j\) served by offline agent \(i\) in an optimal clairvoyant algorithm (OPT), while \(s\) can be interpreted as the "scale" of demand that can be served.

\[\max s \tag{2}\] \[\sum_{j\in\mathcal{N}_{i}}x_{ij}\leq b_{i}\qquad\forall i\in I\] (3) \[\sum_{i\in\mathcal{N}_{j}}x_{ij}\geq s\cdot\lambda_{j}\ \ \forall j\in J\] (4) \[s,x_{ij}\geq 0\qquad\qquad\forall(i,j)\in E \tag{5}\]

_Throughout this paper, we refer to the linear program described above as LP (2). We utilize the notation \(\mathsf{OPT}\) to denote both an optimal clairvoyant policy and its corresponding performance when the context is clear._

**Lemma 1**.: LP (2) _is a valid benchmark for \(\mathrm{OM-LF}\), i.e., the optimal value of \(\mathrm{LP}\) (2), denoted by \(s^{*}\), is a valid upper bound for the performance of a clairvoyant algorithm. Therefore, \(\mathsf{OPT}\leq\min\{s^{*},1\}\)._

Note that it is important in Lemma 1 that we also upper bound OPT by 1; this will allow us to later establish asymptotic optimality in \(s^{*}\).

Proof.: Consider any clairvoyant algorithm OPT. Let \(X_{ij}\) be the random variable for the number of times it uses \(i\) to serve \(j\), with \(X_{j}=\sum_{i\in\mathcal{N}_{j}}X_{ij}\). Recall that \(\mathsf{OPT}=\min_{j\in J}\mathbb{E}[X_{j}]/\lambda_{j}\). It can be checked that setting \(x_{ij}=\mathbb{E}[X_{ij}],s=\mathsf{OPT}\) constitutes a feasible LP solution with objective value \(\mathsf{OPT}\). Therefore, \(\mathrm{LP}\geq\mathsf{OPT}\), and \(1\geq\mathsf{OPT}\) holds by definition, completing the proof. 

**Remarks on \(\mathrm{LP}\)** (2). Among existing studies of online matching under known distributions, all benchmark LPs are designed solely for outputting an upper bound on the performance of an optimal clairvoyant (OPT), which is then used to establish a lower bound on the resulting competitiveness by comparing the performance of an online algorithm against it. In contrast, the benchmark LP (2) proposed here serves dual purposes. The optimal value \(s^{*}\) of LP (2), not only offers an upper bound on OPT but also plays a crucial role in scaling online sampling distributions (_e.g.,_ in Algorithm SAMP of Theorem 1). This means that benchmark LP (2) actively participates in the online algorithm design, serving as a key component in shaping the online decision-making process of the algorithms.

### Main Contributions

In this paper, we introduce a fairness metric among online types, defined in (1), and propose a model, called _online matching under long-run fairness among online types_ (\(\mathrm{OM-LF}\)). Our contributions are summarized as follows.

#### 2.1.1 A Warm-Up for \(\mathrm{OM-LF}\) with a Single Offline Agent.

We observe that when there is a single offline agent, the optimal online algorithm is First-Come-First-Serve (\(\mathsf{FCFS}\)), which assigns all incoming agents to the offline agent as long as capacity is available. We demonstrate that \(\mathsf{FCFS}\) is \(1\)-competitive.

**Proposition 1**.: _For \(\mathrm{OM-LF}\) with one single offline agent, \(\mathsf{FCFS}\) is \(1\)-competitive, making it optimal among all algorithms._

Proof.: Suppose that \(I\) consists of a single offline agent with capacity \(b\). Let \(A\) be the random variable for the total number of online arrivals, in which case \(\mathsf{FCFS}\) serves the first \(\min\{A,b\}\) arrivals. Conditioned on any value \(A>0\), the distribution of online types served is proportional to the arrival rates \(\lambda_{j}\). That is, for any online type \(j\in J\), the expected number of type-\(j\) agents served is \(\mathbb{E}\Big{[}\min\{\mathrm{Pois}(\sum_{j\in J}\lambda_{j}),b\}\Big{]}\cdot \frac{\lambda_{j}}{\sum_{j\in J}\lambda_{j}}\). All in all, \(\mathsf{FCFS}\) achieves a fairness of

\(\mathbb{E}\Big{[}\min\{\mathrm{Pois}(\sum_{j\in J}\lambda_{j}),b\}\Big{]}/\sum _{j\in J}\lambda_{j}\), which cannot be beaten even by a clairvoyant algorithm since the total number of agents served cannot exceed \(\mathbb{E}\Big{[}\min\{\mathrm{Pois}(\sum_{j\in J}\lambda_{j}),b\}\Big{]}\). This shows that \(\mathsf{FCFS}\) is \(1\)-competitive and is also the optimal clairvoyant algorithm. 

#### 2.1.2 General Cases of \(\mathrm{Om}\)-\(\mathrm{LF}\).

We consider \(\mathrm{OM}\)-\(\mathrm{LF}\) with multiple offline agents, where each offline agent may have a different capacity.

**Theorem 1** (Section 4).: _There is an algorithm (\(\mathsf{SAMP}\)) for \(\mathrm{OM}\)-\(\mathrm{LF}\), whose competitiveness is lower-bounded by \(\kappa(b,s^{*})\doteq\mathbb{E}[\min(\mathrm{Pois}(b/s^{*}),b)]\cdot\max(s^{*},1)/b\geq\kappa(1,1)=1-1/\mathsf{e}\), where \(b=\min_{i\in I}b_{i}\) and \(s^{*}\in(0,\infty)\) is the optimal value to benchmark LP (2) that measures the inverse of the overall demand saturation in the system. Meanwhile, the competitiveness of \(\mathsf{SAMP}\) approaches \(1\) when either \(b\to\infty\) or \(s^{*}\to 0^{+}\) (demand dominates supply) or \(s^{*}\to\infty\) (supply dominates demand)._

**Theorem 2** (Section 5).: _For \(\mathrm{OM}\)-\(\mathrm{LF}\), the following hardness results hold: (1) Any non-rejection algorithm (possibly randomized) that serves an incoming agent whenever possible is no more than \(1/2\)-competitive. (2) Any algorithm (possibly randomized) is no more than \((\sqrt{3}-1)\)-competitive. (3) The competitive analysis of \(\mathsf{SAMP}\) is tight, as it cannot be more than \((1-1/\mathsf{e})\)-competitive. All the hardness results mentioned in (1), (2), and (3) are independent of any benchmarks.4_

Footnote 4: When we state that all hardness results provided in the paper are independent of any benchmarks, we mean that all competitiveness results are computed directly against the performance of a clairvoyant optimal policy (OPT), rather than any upper bound on OPT (e.g., the optimal value of a benchmark LP, as claimed in Lemma 1).

#### 2.1.3 Extension of \(\mathrm{Om}\)-\(\mathrm{LF}\) to Group-Level Fairness.

We consider an extension of \(\mathrm{OM}\)-\(\mathrm{LF}\) when each online type belongs to some pre-defined protected groups. Specifically, suppose there is a collection of protected groups \(\mathcal{G}\), where each group \(g\in\mathcal{G}\) is a subset of \(J\), indicating the online agent types that fall under group \(g\). We assume w.l.o.g. that every type \(j\in J\) is contained in at least one group (otherwise we could discard and never serve that type); note however that groups can overlap with each other. We generalize long-run fairness (\(\mathrm{FAIR}\)-\(\mathrm{L}\)), as defined in Equation (1), to a group-level version with respect to groups of \(\mathcal{G}\) as follows:

\[\mathrm{FAIR}\text{-}\mathrm{L}(\mathcal{G})=\min_{g\in\mathcal{G}}\frac{ \mathbb{E}_{\mathcal{A},\mathsf{ALG}}[X(g)]}{\sum_{j\in g}\lambda_{j}}, \tag{6}\]

where \(X(g)=\sum_{j\in g}X_{j}\) denotes the (random) number of types in \(g\) served in an algorithm \(\mathsf{ALG}\).

**Comparison between (Individual) Long-Run Fairness \(\mathrm{FAIR}\)-\(\mathrm{L}\) in (1) and Group-Level Long-Run Fairness in (6)**. The original long-run fairness \(\mathrm{FAIR}\)-\(\mathrm{L}\), as defined in (1), can be considered a special case of group-level long-run fairness in (6) with respect to \(\mathcal{G}=\{g=\{j\}|j\in J\}\), where each group consists of a single online type. Therefore, \(\mathrm{FAIR}\)-\(\mathrm{L}\) in (1) can be interpreted as _individual_ long-run fairness with respect to every single type, as opposed to group-level fairness with respect to a pre-defined set of groups \(\mathcal{G}\). We emphasize that overlaps among groups can potentially doom classical policies, such as first-come-first-serve (FCFS), even under very simple settings. Proposition 1 states that \(\mathsf{FCFS}\) is \(1\)-competitive (i.e., matching the performance of a clairvoyant optimal) for individual long-run fairness when there is a single offline agent. In contrast, Example 1 (see below) demonstrates that _FCFS is zero-competitive for group-level long-run fairness, as defined in (6), under the same setting of a single offline agent_.

**Example 1** (FCFS is zero-competitive for group-level fairness).: _Consider the following example: There is a single server with unit capacity. There are \(n+1\) online types, indexed as \(j=0,1,2,\ldots,n\), each with an arrival rate of 1, and \(n\) groups such that each group \(k=1,2,\ldots,n\) consists of two types \((0,j)\) with \(j=k\). We can verify the following: (1) Any clairvoyant optimal (\(\mathsf{OPT}\)) can achieve a group-level (long-run) fairness of at least \((1-1/e)/2\). For any offline policy prioritizing serving arriving online types of \(j=0\), it achieves a group-level fairness of at least \((1-1/e)/2\). (2) FCFS achieves a group-level fairness of \(1/(n+1)\): Note that each group has one agent served by FCFSonly when the first arriving agent belongs to one of the two types in that group, which occurs with probability \(2/(n+1)\). Thus, we conclude that FCFS is zero-competitive for group-level fairness (when \(n\to\infty\))._

**Theorem 3** (Appendix G).: _For \(\mathrm{OM-LF}\) with group-level long-run fairness: (1) There exists an algorithm (\(\mathsf{SAMP}\)-\(\mathsf{G}\)) that achieves a competitive ratio of at least \(1-\mathsf{e}^{-b}b^{b}/b!\) with \(b=\min_{i\in I}b_{i}\), which is increasing over \(b\in\{1,2,\ldots\}\) and approaches 1 as \(b\to\infty\); (2) There exists an algorithm (\(\mathsf{RESERVE}\)) that achieves a competitive ratio of at least \(1-\mathsf{e}^{-\lambda}\lambda^{\lambda}/\lambda!\) with \(\lambda=\min_{j\in J}\lambda_{j}\), which approaches 1 as \(\lambda\to\infty\)._

**Remarks on Results in Theorems 1, 2, and 3**. (1) Ma et al. [28] considered both long-run individual and group-level fairness maximization, but their focus was on fairness among _offline agents_. This is in contrast to the emphasis on fairness among online types. Another difference is that the work of [28] assumed integral arrival rates among online types and utilized this assumption to propose a strengthened benchmark LP. Additionally, they claimed that each online type could be made to admit a unit arrival rate (\(\lambda_{j}=1\)) by creating multiple copies. In our paper, however, we do not make any assumptions regarding the arrival rates among online types: They can take any fractional or integer values, allowing for a more general analysis of fairness among online types. A more detailed discussion can be seen in Appendix B. (2) As noted before, our arrival setting is essentially equivalent to the _Know Identical Independent Distributions_ (KIID), which is a discrete arrival setting commonly assumed in the study of online matching under known distributions. For Online Matching under KIID (OM-KIID), the most commonly studied objective is the maximization of the total weight of all matches under different weight settings, including unweighted, vertex-weighted (offline-side), and edge-weighted scenarios. To date, there have been only two known hardness results for OM-KIID with general arrival rates: one is \(0.823\) for unweighted and vertex-weighted due to [31] and the other is \(0.703\) for edge-weighted due to [21]. Our hardness result of \(\sqrt{3}-1\approx 0.732\) contributes to this short list of hardness results for OM-KIID. Notably, our analysis focuses on the objective of maximizing long-run fairness among online types, which adds a new dimension to the study of OM-KIID and expands the understanding of the inherent challenges and limitations in achieving fairness in online matching scenarios.

#### 2.1.4 Another Fairness Metric: Short-Run Fairness.

We propose a second fairness metric, called _Short-Run Fairness_, which is defined as follows:

\[\mathrm{FAIR-S}=\mathbb{E}_{\mathcal{A}}\left[\min_{j\in J:A_{j}>0}\frac{ \mathbb{E}_{\mathsf{ALG}}[X_{j}|\mathcal{A}]}{A_{j}}\right], \tag{7}\]

where \(\mathcal{A}=(A_{j})_{j\in J}\) is the (random) arrival vector with \(A_{j}\sim\mathrm{Pois}(\lambda_{j})\) being the number of arrivals of type \(j\in J\).5

Footnote 5: Note that we can define the group-level short-run fairness following the same way as \(\mathrm{FAIR-L}\): \(\mathrm{FAIR-S}(\mathcal{G})=\mathbb{E}_{\mathcal{A}}\left[\min_{g\in\mathcal{ G}:A(g)>0}\frac{\mathbb{E}_{\mathsf{ALG}}[X_{j}(g)|\mathcal{A}]}{A(g)}\right]\), where \(A(g)=\sum_{j\in g}A_{j}\) denotes the number of arrivals of types in \(g\), and \(X(g)=\sum_{j\in g}X_{j}\) the number of types in \(g\) served by ALG. We can verify that all the analysis and results obtained for \(\mathrm{FAIR-S}\) in this paper, as shown in Theorem 4, also apply to group-level short-run fairness for any collection of groups \(\mathcal{G}\).

**Remarks on \(\mathrm{FAIR-S}\)**. (a) In the numerator of \(\mathrm{FAIR-S}\), \(\mathbb{E}_{\mathsf{ALG}}[X_{j}|\mathcal{A}]\) is a conditional expectation taken over only the randomness in the algorithm ALG. (b) In \(\mathrm{FAIR-S}\), types \(j\) with no realized arrivals (for which the denominator \(A_{j}=0\)) are ignored. Also, we assume that \(\mathrm{FAIR-S}=1\) in case all \(A_{j}=0\), _i.e.,_ no online agents arrive. (c) No inherent relation can be imposed on \(\mathrm{FAIR-L}\) and \(\mathrm{FAIR-S}\). _There are examples supporting both possibilities that \(\mathrm{FAIR-L}>\mathrm{FAIR-S}\) and \(\mathrm{FAIR-L}<\mathrm{FAIR-S}\); see details in Appendix C._ (d) For the short-run fairness, the algorithm is audited for fairness based on the realized arrivals every single day. To avoid impossibility results, evaluation in the numerator of (7) is based on the _expected_ service over any randomness in the algorithm.6 Interpreted another way, when evaluating Short-Run Fairness, we are allowing for _fractional_ allocations to be made on a given day. The overall performance (7) then takes the expectation of the daily audit scores over a large number of days. (e) Note that the definitions of long-run and short-run fairness, as shown in equations (1) and (7) respectively, bear similarities to two other concepts known as _ex-ante_ and _ex-post_ fairness. These concepts have been extensively studied in the field of online resource allocation [2, 15, 30]. Specifically, our notion of long-run fairness aligns more closely with the idea of ex-ante fairness, which focuses on the minimum expectation, while the short-run fairness aligns more closely with the concept of ex-post fairness, which emphasizes the expectation of the minimum outcome.

Unlike \(\mathrm{FAIR}\)-L, online matching under \(\mathrm{FAIR}\)-S is quite technically challenging, even for upper-bounding the performance of an optimal clairvoyant policy (OPT). So far, we have not found any appropriate linear program that can serve as a valid benchmark for OPT as we did for FAIR-L. That being said, we take an initial stab by focusing on a simple case when there is a _single_ offline agent with a service capacity of \(b\). Even in this special case, characterizing the optimal online algorithm that maximizes \(\mathrm{FAIR}\)-S is technically challenging. This contrasts with Proposition 1, which states that \(\mathsf{FCFS}\) is \(1\)-competitive under \(\mathrm{FAIR}\)-L with a single offline agent.

**Theorem 4** (Appendix H).: _For online matching under \(\mathrm{FAIR}\)-S with a single offline agent of capacity \(b\) and a total online arrival rate of \(\lambda:=\sum_{j\in J}\lambda_{j}\): (1) \(\mathsf{FCFS}\) is \(0.863\)-competitive when \(\lambda\leq 1\); (2) No algorithm can achieve a competitive ratio greater than \(0.942\) when \(b=\lambda=1\); (3) There exists an algorithm (_Prob-Rej_) that achieves a competitive ratio of at least \(1-o(1)\), where \(o(1)\) is a vanishing term as \(\lambda\to\infty\)._

## 3 Other Related Work

**Online Bipartite Matching.** Online bipartite matching was pioneered by Karp et al. [24] and its variants have gained interest during the past two decades in the CS community. Based on the arrival setting of online agents, there are three major categories: (1) Adversarial, the arrival sequence is fully unknown but fixed, see, _e.g.,_[7, 33]; (2) Random arrival order, the full arrival sequence forms a random permutation over a set of unknown agents, see, _e.g.,_[36, 29, 23, 17, 13]; (3) known/unknown distributions, the stochastic arrivals of online agents follow certain known/unknown distributions. A special case here is when online arrivals follow Known Independent and Identical Distributions (KIID), see, _e.g.,_[14, 18, 31, 22]. Our arrival setting shares the spirit of KIID, though we consider a continuous version instead of discrete. Huang and Shu [19] considered the same arrival setting as ours and show that under mild assumptions,7 the performance of an online algorithm is almost the same under the two arrival settings (_i.e.,_ KIID and independent Poisson process).

Footnote 7: Specifically, as stated in the paper [19], for any algorithm, its competitiveness can be translated between the two models up to a multiplicative factor of \(1-O(\Lambda^{-1/2})\), where \(\Lambda:=\sum_{j\in J}\lambda_{j}\) represents the total arrival rate of all online types. Note that, it is a common practice to consider \(\Lambda\to\infty\) or \(n\to\infty\) (the counterpart of \(\Lambda\) in the KIID setting) in competitive analysis for online matching models under known distributions, which is assumed in this paper as well.

There is an interesting connection between our model under Long-Run fairness and the _online-side_ vertex-weighted online matching under KIID. So far, studies about vertex-weighted online matching all focus on the setting of the offline side, _i.e.,_ all edges incident to any given offline agent share a weight. Examples include [19] and [6] under KIID, [20] under random arrival order, and [1] under adversarial arrival order. By contrast, we believe that our analysis and results can be applied to the _online-side_ vertex-weighted online matching problem, which we leave as future work.

**Fair Operations**. Fairness in operations is a topic of increasing interest and we aim to provide a brief literature review. Classical works in this area include [4] and [5] which define the price of fairness and efficiency-fairness tradeoff, respectively, in an axiomatic fashion. Gig platforms have motivated many studies on balancing multiple objectives [26], including fair allocation on the rider side [34] and income equality on the driver side [38] in rideshare. Fair _pricing_ to the customer side has been more generally studied in [12], while fair allocation has been studied in transportation problems [10, 9, 35] and COVID-19 vaccine distributions [37]. We note that in the application of [10], the authors justify prioritizing transportation for certain groups (e.g. seniors), instead of balancing fairness across all groups as we do.

More generally, online resource allocation frameworks that can capture fairness have been considered in [3, 25, 11]. These papers all derive regret bounds which are sublinear in the number of arrivals, while we derive competitive ratio bounds which hold universally and establish asymptotic optimalityin regimes (involving the demand saturation) not previously captured. However, we should note that our techniques appear to be reliant on the \(\max\)-\(\min\) objective function, while these papers allow for more general functions.

## 4 Proof of Theorem 1: Online Matching Under Long-Run Fairness (\(\mathrm{OM}\)-\(\mathrm{LF}\))

### Algorithm \(\mathsf{SAMP}\) and Intuitions

In this section, we present an LP-based sampling algorithm, denoted by \(\mathsf{SAMP}\), which is \((1-1/\mathsf{e})\)-competitive and asymptotically optimal in many parameter regimes. Let \(\{x^{*}_{ij},s^{*}\}\) be an optimal solution to the benchmark LP (2). For all \(j\in J\), WLOG assume that \(x^{*}_{j}\doteq\sum_{i\in\mathcal{N}_{j}}x^{*}_{ij}=s^{*}\cdot\lambda_{j}\).8\(\mathsf{SAMP}\) is formally stated in Algorithm 1.

Footnote 8: This is because if \(\sum_{i\in\mathcal{N}_{j}}x^{*}_{ij}>s^{*}\cdot\lambda_{j}\), then we can re-scale the values of \(x^{*}_{ij}\) by \((s^{*}\cdot\lambda_{j})/(\sum_{i\in\mathcal{N}_{j}}x^{*}_{ij})\), without violating feasibility.

```
1 Solve \(\mathrm{LP}\) (2) to get an optimal solution \(\{x^{*}_{ij},s^{*}\}\).
2 Let an online agent (of type) \(j\) arrive at time \(t\).
3 Sample a neighbor \(i\in\mathcal{N}_{j}\) with probability \(x^{*}_{ij}/(s^{*}\cdot\lambda_{j})\). /* This is a valid distribution since \(\sum_{i\in\mathcal{N}_{j}}x^{*}_{ij}/(s^{*}\cdot\lambda_{j})=x^{*}_{j}/(s^{*} \cdot\lambda_{j})=1\). */
4If \(i\) is safe, i.e., i has remaining capacity, then assign \(i\) to serve \(j\); otherwise, reject \(j\).
```

**ALGORITHM 1**An LP-based Sampling Algorithm (\(\mathsf{SAMP}\))

SAMP does not re-sample an offline agent if the first one sampled is unavailable, so it does not share the property of \(\mathsf{FCFS}\) that an incoming agent is served whenever possible. The property that \(\mathsf{SAMP}\) sometimes "rejects" an incoming agent is imperative for it to surpass the barrier of \(1/2\), as suggested by Theorem 2.

### Proof of Theorem 1: Competitive Analysis of \(\mathsf{SAMP}\)

First, we use two lemmas to analyze the number of times each online type is served by \(\mathsf{SAMP}\).

**Lemma 2**.: _For each \(i\in I\) and \(t\in[0,1]\), let \(\mathsf{SF}_{it}\) indicate if offline agent \(i\) is safe at the instantaneous point in time \(t\) in algorithm \(\mathsf{SAMP}\), i.e., i still has remaining capacity at \(t\). \(\mathbb{E}[\mathsf{SF}_{it}]\geq\Pr[\mathrm{Pois}(b_{i}t/s^{*})<b_{i}]\), for all \(i\in I\) and \(t\in[0,1]\)._

Proof.: An offline agent \(i\) is safe at time \(t\) if and only if there have been fewer than \(b_{i}\) arrivals before \(t\) which sampled \(i\). Such arrivals are Poisson with total rate \(\sum_{j\in\mathcal{N}_{i}}\lambda_{j}\cdot\frac{x^{*}_{ij}}{s^{*}\cdot\lambda _{j}}\), which is at most \(b_{i}/s^{*}\) by LP constraints (3). Therefore, the number of such arrivals is Poisson with mean at most \(b_{i}\cdot t/s^{*}\), completing the proof. 

**Lemma 3**.: _Let \(X^{S}_{j}\) be the random number of times type \(j\) is serviced in \(\mathsf{SAMP}\). Then for all \(j\in J\),_

\[\frac{\mathbb{E}[X^{S}_{j}]}{\lambda_{j}}\geq s^{*}\cdot\min_{i\in I}\frac{ \mathbb{E}[\min\{\mathrm{Pois}(b_{i}/s^{*}),b_{i}\}]}{b_{i}}. \tag{8}\]

Proof.: Consider any \(i,j\) for which an offline agent \(i\) is eligible to serve online type \(j\). Let \(X^{S}_{ij}\) be the random variable for the number of times \(\mathsf{SAMP}\) uses \(i\) to serve \(j\). \(X^{S}_{ij}\) is incremented whenever: (1) type \(j\) arrives (occurring following Poisson process of rate \(\lambda_{j}\)); (2) \(i\) is sampled (occurring with probability \(x^{*}_{ij}/(s^{*}\cdot\lambda_{j})\)); and (3) \(i\) is safe (occurring with probability at least \(\Pr[\mathrm{Pois}(b_{i}t/s^{*})<b_{i}]\), by Lemma 2). Since these events are mutually independent, we have

\[\mathbb{E}[X^{S}_{ij}] \geq\int_{0}^{1}\lambda_{j}\cdot\frac{x^{*}_{ij}}{s^{*}\cdot \lambda_{j}}\cdot\Pr[\mathrm{Pois}(b_{i}\cdot t/s^{*})<b_{i}]dt\] \[=\frac{x^{*}_{ij}}{b_{i}}\int_{0}^{1}\frac{b_{i}}{s^{*}}\cdot \Pr[\mathrm{Pois}(b_{i}\cdot t/s^{*})<b_{i}]dt=\frac{x^{*}_{ij}}{b_{i}}\cdot \mathbb{E}[\min\{\mathrm{Pois}(b_{i}/s^{*}),b_{i}\}].\]The final equality holds because the integral "counts" an arrival from a Poisson process of rate \(b_{i}/s^{*}\) whenever the number of arrivals thus far is less than \(b_{i}\); this equals, in expectation, the number of arrivals from such a process truncated by \(b_{i}\).

Now, for any online type \(j\in J\), let \(X^{S}_{j}=\sum_{i\in\mathcal{N}_{j}}X^{S}_{ij}\) be the random variable for the number of times \(\mathsf{SAMP}\) serves \(j\). The previous derivation for \(X^{S}_{ij}\) implies that

\[\mathbb{E}[X^{S}_{j}]\geq\sum_{i\in\mathcal{N}_{j}}x^{*}_{ij}\cdot\frac{ \mathbb{E}[\min\{\mathrm{Pois}(b_{i}/s^{*}),b_{i}\}]}{b_{i}}\geq s^{*}\cdot \lambda_{j}\cdot\min_{i\in\mathcal{N}_{j}}\frac{\mathbb{E}[\min\{\mathrm{Pois}( b_{i}/s^{*}),b_{i}\}]}{b_{i}},\]

where the second inequality uses LP constraint (4). This completes the proof. 

Having derived the expression on the RHS of (8), we aim to lower bound it in terms of simpler expressions of \(b_{i}\) and \(s^{*}\). Recall that \(\kappa(b,s)\doteq\max\{s,1\}\cdot\frac{\mathbb{E}[\min\{\mathrm{Pois}(b/s),b\} ]}{b}\) for any integer \(b\geq 1\) and \(s>0\). For any \(\lambda>0\) and \(s>0\), define \(\eta(\lambda,s)=\frac{\mathbb{E}[\min\mathrm{Pois}(\lambda),\lambda s]}{\lambda \cdot\min(s,1)}\), a related function we will later use in our analysis. We can verify that \(\kappa(b,s)=\eta(b/s,s)\) and \(\eta(\lambda,s)=\kappa(\lambda s,s)\). Below are a few properties of \(\kappa(b,s)\).

**Lemma 4** (Appendix D).: _(1) For any fixed \(s>0\), \(\kappa(b,s)\) is increasing over \(b\in\{1,2,\ldots\}\); (2) For any fixed integer \(b\geq 1\), \(\kappa(b,s)\) is minimized at \(s=1\); (3) For all integers \(b\geq 1\) and \(s>0\), \(\kappa(b,s)\geq\kappa(1,1)=1-1/\mathsf{e}\); (4) When \(s>1\), \(\kappa(b,s)\geq 1-\exp\big{(}-b\ln s\cdot(1-o(1))\big{)}\), where \(o(1)\) vanishes when \(s\to\infty\); (5) When \(s=1\), \(\kappa(b,1)\geq 1-\frac{1}{\sqrt{2\pi(b-1)}}\) with \(b>1\); (6) When \(0<s<1\), \(\kappa(b,s)\geq 1-\exp\big{(}-\frac{b}{2s}(1-s)^{2}\big{)}\)._

Proof of Theorem 1.: By Lemma 3, the fairness of \(\mathsf{SAMP}\) under \(\mathrm{FAIR}\)-\(\mathrm{L}\) is at least

\[\frac{\mathbb{E}[X^{S}_{j}]}{\lambda_{j}}\geq s^{*}\cdot\min_{i\in I}\frac{ \mathbb{E}[\min\{\mathrm{Pois}(b_{i}/s^{*}),b_{i}\}]}{b_{i}}\geq s^{*}\cdot \frac{\mathbb{E}[\min\{\mathrm{Pois}(b/s^{*}),b\}]}{b},\]

where \(b=\min_{i}b_{i}\), and the last inequality follows from Part (1) of Lemma 4. By Lemma 1, \(\mathsf{OPT}\leq\min\{s^{*},1\}\). Putting these statements together, we see that the competitive ratio is lower bounded by

\[\frac{s^{*}}{\min\{s^{*},1\}}\cdot\frac{\mathbb{E}[\min\{\mathrm{Pois}(b/s^{*} ),b\}]}{b}=\kappa(b,s^{*}).\]

All of the properties about \(\kappa(b,s^{*})\) follow directly from Lemma 4, with the asymptotic behavior when \(b\to\infty\), \(s^{*}\to 0^{+}\), or \(s^{*}\to\infty\) following from the bounds given in parts (4)-(6) of Lemma 4. 

## 5 Proof of Theorem 2

**Example 2** (Bad Example).: \(J\) _consists of a large number of "rare types" \(t=1,\ldots,n\) each with \(\lambda_{t}=1/n\) and a single "common type" \(0\) with \(\lambda_{0}=n-1\). \(I\) consists of \(n\) unit-capacity servers such that each rare type \(t=1,\ldots,n\) can only be served by a server \(t\), but all servers can serve the common type. The graph structure is shown in Figure 1._

_We can verify that the optimal clairvoyant algorithm gives priority to rare types, and uses each server \(t\in\{1,2,\ldots,n\}\) for which type \(t\) never arrived to serve the common type. The expected amount of each rare type \(t\) served is \(1-\mathsf{e}^{-1/n}\geq 1/n-O(1/n^{2})\), while the expected number of the common type served is at least \(n-1-n(1-\mathsf{e}^{-1/n})\geq n-2\). Thus, we claim any optimal clairvoyant (\(\mathsf{OPT}\)) can achieve a long-run fairness of \(1-O(1/n)\) under \(\mathrm{FAIR}\)-\(\mathrm{L}\)._

### Proof of Part (1) of Theorem 2: \(1/2\)-Upper Bound for Non-Rejecting

We first use Example 2 to show that non-rejecting algorithms cannot be better than 1/2-competitive.

**Lemma 5**.: _On Example 2, any non-rejecting online algorithm is no more than \(1/2\)-competitive relative to the best clairvoyant algorithm._Proof.: An online algorithm that serves incoming agents whenever possible must have a (randomized) order for available servers to use on the common type. The rare type which is in position \(P\in[n]\) in this order must have an arrival before the \(P\)'th arrival of the common type \(0\), to have any chance of being served. For a given rare type \(t\), let \(P_{t}\) denote the (randomized) position of type \(t\) in this order. For any position \(\tilde{P}\in[n]\), let \(\operatorname{Arr}(P)\in[0,1]\) denote the arrival time of the \(P\)'th arrival of the common type \(0\). By independence of the Poisson processes for the arrivals of different types, the probability of a rare type \(t\) being served is at most

\[\mathbb{E}[1-\exp(-\operatorname{Arr}(P_{t})/n)]\leq\mathbb{E}[\operatorname{ Arr}(P_{t})/n], \tag{9}\]

which in turn is at most \((\frac{\mathbb{E}[P_{t}]+1}{n})/n\) for sufficiently large \(n\).9 Recall that for each rare type \(t=1,2,\ldots,n\), \(P_{t}\in\{1,2,\ldots,n\}\) denotes the position of type \(t\) in a randomized order adopted by a non-rejecting policy. Thus, we claim that \(\sum_{t=1}^{n}\mathbb{E}[P_{t}]=n(n+1)/2\). This implies that at least one rare type \(t\) must satisfy \(\mathbb{E}[P_{t}]\leq(n+1)/2\). Therefore, the fairness of this online algorithm cannot exceed \(1/2+O(1/n)\). 

Footnote 9: This is because as \(n\to\infty\), the arrivals of a Poisson process of rate \(n\) are evenly spaced in \([0,1]\) w.h.p.

**Remarks**. In Appendix E, we present a proof of Lemma 6, which can be viewed as a stronger version of Lemma 5. The alternative proof, though more technically involved, provides a foundational framework for analyzing a much broader class of online policies and is more self-explanatory. Additionally, in Appendix F, we focus on the bad example (Example 2) to conduct a quantitative study on the tradeoff between competitiveness and the number of rejected agents.

### Proof of Part (2) of Theorem 2: \((\sqrt{3}-1)\)-Upper Bound for Any Randomized

Proof.: On Example 2, any online algorithm that is going to reject the common type is better off doing so sooner rather than later, since an earlier rejection allows more time to observe which rare types arrive, and give those types priority. For any \(\tau\in[0,1]\), suppose that the online algorithm, denoted by \(\mathsf{ALG}(\tau)\), starts accepting common types after time \(\tau\).

The online algorithm must have some (possibly randomized) order of offline servers to use when it wants to serve the common type. The rare type whose corresponding offline server is in position \(P\in[n]\) in this order must have an arrival before the \(P\)'th arrival of the common type _after time_\(\tau\), to have any hope of being served. Counting from time \(\tau\), the \(P\)'th arrival of the common type will occur before \(\tau+\frac{P+1}{n}\) w.h.p. as \(n\to\infty\). As a result, the probability of this rare type being served is at most

\[1-\exp(-\frac{\min\{\tau+\frac{P+1}{n},1\}}{n})\leq\frac{\min\{\tau+\frac{P+1} {n},1\}}{n}.\]

As \(n\to\infty\), the average value of the RHS expression over \(P=1,\ldots,n\) is

\[\frac{1}{n}\int_{0}^{1}\min\{\tau+z,1\}dz=\frac{1}{n}(\tau+\frac{1}{2}-\frac{1 }{2}\tau^{2}).\]

Figure 1: A bad example used to show hardness results for any randomized and non-rejecting algorithms and the tightness of competitive analysis for \(\mathsf{SAMP}\).

Therefore, even using a randomized order, there must exist a rare type whose probability of being served is at most \(\frac{1}{n}(\tau+\frac{1}{2}-\frac{1}{2}\tau^{2})\). Meanwhile, for any \(\tau\), the expected number of common types served can be at most \((n-1)(1-\tau)\). Since the arrival rates for rare and common types are \(\frac{1}{n}\) and \(n-1\) respectively, the fairness of the online algorithm cannot exceed \(\min\{\tau+\frac{1}{2}-\frac{1}{2}\tau^{2},1-\tau\}\).

We can verify that the fairness of the online algorithm is maximized at \(\tau=2-\sqrt{3}\), in which case it equals \(\sqrt{3}-1\). Meanwhile, for Example 2, a clairvoyant algorithm can achieve a fairness of 1. This completes the proof. 

### Proof of Part (3) of Theorem 2: Tightness of Competitive Analysis of \(\mathsf{SAMP}\)

Proof.: For each \(t\in\{1,2,\ldots,n\}\) and \(\tilde{t}\in\{0,1,2,\ldots,n\}\), let \(x^{*}_{t,\tilde{t}}\) denote the value set by an optimal solution of LP (2) on the edge \((i_{t},j_{\tilde{t}})\) in Example 2. We can verify that the optimal LP solution sets \(x^{*}_{t,t}=1/n\) and \(x^{*}_{t,0}=1-1/n\) for each \(t=1,\ldots,n\), and \(s^{*}=1\). As a result, each offline agent \(t\in[n]\) serves a demand with a total arrival rate of one. Thus, each offline agent \(t\) successfully serves a demand with probability \(1-1/\mathsf{e}\) since no demand arrives otherwise (which occurs with probability \(1/\mathsf{e}\)). Conditioned on offline agent \(t\) serving a demand, the probability of that demand being of rare type \(t\) (instead of the common type \(0\)) is \(1/n\). Therefore, for any rare type \(t\in[n]\), we have \(\mathbb{E}[X_{t}]/\lambda_{t}=1-1/\mathsf{e}\), where \(X_{t}\) denotes the random number of times type \(t\) is serviced. Thus, and under \(\mathrm{FAIR}\)-L, \(\mathsf{SAMP}\) achieves a fairness of at most \(1-1/\mathsf{e}\). Meanwhile, in Example 2, we show that a clairvoyant algorithm can achieve a \(\mathrm{FAIR}\)-L of \(1-O(1/n)\), completing the proof. 

## 6 Conclusion and Reservations

We propose algorithms for maintaining statistical parity in the service rates provided to different online types or groups when agents arrive dynamically. We believe this has the potential to make a positive impact on _e.g.,_ sharing economy platforms, where our algorithms will give priority to under-served groups when matching agents, thereby boosting their rates of service. However, we admit that our algorithms do not address any underlying discrimination issues of why those groups were less commonly served by hosts/drivers in the first place. Also, our algorithms are only "fair" with respect to the fairness metrics we defined: Our model does not necessarily guarantee fairness over all arriving individuals. Relatedly, our algorithms could have the negative consequence of causing "unfairness" by violating the first-come-first-serve principle, since sometimes earlier-arriving agents are rejected in order to preserve capacity for later-arriving agents who may belong to protected groups.

[MISSING_PAGE_FAIL:11]

- 7th International Workshop_, WINE '11, pages 170-181, 2011.
* [19] Zhiyi Huang and Xinkai Shu. Online stochastic matching, poisson arrivals, and the natural linear program. In _Proceedings of the 53rd Annual ACM SIGACT Symposium on Theory of Computing_, pages 682-693, 2021.
* [20] Zhiyi Huang, Zhihao Gavin Tang, Xiaowei Wu, and Yuhao Zhang. Online vertex-weighted bipartite matching: Beating 1-1/e with random arrivals. In _45th International Colloquium on Automata, Languages, and Programming (ICALP 2018)_. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, 2018.
* [21] Zhiyi Huang, Xinkai Shu, and Shuyi Yan. The power of multiple choices in online stochastic matching. In _Proceedings of the 54th Annual ACM SIGACT Symposium on Theory of Computing_, pages 91-103, 2022.
* [22] Patrick Jaillet and Xin Lu. Online stochastic matching: New algorithms with better bounds. _Mathematics of Operations Research_, 39(3):624-646, 2013.
* [23] Chinmay Karande, Aranyak Mehta, and Pushkar Tripathi. Online bipartite matching with unknown distributions. In _Proceedings of the forty-third annual ACM symposium on Theory of computing_, pages 587-596. ACM, 2011.
* [24] Richard M. Karp, Umesh V. Vazirani, and Vijay V. Vazirani. An optimal algorithm for online bipartite matching. In _Proceedings of the 22nd Annual ACM Symposium on Theory of Computing_, STOC '90, pages 352-358, 1990.
* [25] Xin Liu, Bin Li, Pengyi Shi, and Lei Ying. Pond: Pessimistic-optimistic online dispatch. _arXiv preprint arXiv:2010.09995_, 2020.
* [26] Guodong Lyu, Wang Chi Cheung, Chung-Piaw Teo, and Hai Wang. Multi-objective online ride-matching. _Available at SSRN 3356823_, 2019.
* [27] Will Ma, David Simchi-Levi, and Jinglong Zhao. Dynamic pricing (and assortment) under a static calendar. _Management Science_, 2020.
* [28] Will Ma, Pan Xu, and Yifan Xu. Fairness maximization among offline agents in online-matching markets. _ACM Transactions on Economics and Computation_, 10(4):1-27, 2023.
* [29] Mohammad Mahdian and Qiqi Yan. Online bipartite matching with random arrivals: an approach based on strongly factor-revealing lps. In _Proceedings of the forty-third annual ACM symposium on Theory of computing_, pages 597-606. ACM, 2011.
* [30] Vahideh Manshadi, Rad Niazadeh, and Scott Rodilitz. Fair dynamic rationing. In _Proceedings of the 22nd ACM Conference on Economics and Computation_, pages 694-695, 2021.
* [31] Vahideh H Manshadi, Shayan Oveis Gharan, and Amin Saberi. Online stochastic matching: Online actions based on offline statistics. _Mathematics of Operations Research_, 37(4):559-573, 2012.
* [32] Enrico Masina. Useful review on the exponential-integral special function. _arXiv preprint arXiv:1907.12373_, 2019.
* [33] Aranyak Mehta, Amin Saberi, Umesh Vazirani, and Vijay Vazirani. Adwords and generalized online matching. _Journal of the ACM (JACM)_, 54(5):22, 2007.
* [34] Vedant Nanda, Pan Xu, Karthik Abhinav Sankararaman, John Dickerson, and Aravind Srinivasan. Balancing the tradeoff between profit and fairness in rideshare platforms during high-demand hours. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 34, pages 2210-2217, 2020.
* [35] Anik Pramanik, Pan Xu, and Yifan Xu. Equity promotion in public transportation. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 37, pages 11890-11898, 2023.
* [36] GS Sankar, A Louis, M Nasre, and P Nimbhorkar. Matchings with group fairness constraints: Online and offline algorithms. In _IJCAI International Joint Conference on Artificial Intelligence_, pages 377-383. International Joint Conferences on Artificial Intelligence, 2021.
* [37] Pan Xu and Yifan Xu. Equity promotion in online resource allocation. In _Proceedings of the AAAI Conference on Artificial Intelligence_, volume 36, pages 9962-9970, 2022.

* [38] Yifan Xu and Pan Xu. Trade the system efficiency for the income equality of drivers in rideshare. In _Proceedings of the Twenty-Ninth International Joint Conference on Artificial Intelligence, IJCAI 2020_, pages 4199-4205, 2020.

Further Discussions on the Holistic Nature of an Optimal Clairvoyant

We emphasize that in our problem, any clairvoyant optimal policy (OPT) needs to consider the entire input instance as a whole when optimizing its decisions for each specific arrival sequence of online agents. (Recall that any clairvoyant optimal policy has the advantage of optimizing its decisions after observing the full arrival sequence.) This stands in contrast to clairvoyant optimal policies for existing, well-studied online matching problems when the objectives are to maximize the (expected) total weight of all matches. In these cases, any clairvoyant optimal policy only needs to optimize its decisions for each specific arrival sequence of online agents _without_ considering any information or consequences of other possible arriving sequences.

Now, let us revisit the toy example of OM-LF, as mentioned before, where there is one single offline agent with \(b=1\) and two online types with \(\lambda_{1}=\epsilon\) and \(\lambda_{2}=1\). According to the arrival setting, agents of \(j=1\) and \(2\) each arrive following an independent Poisson process of rate \(1\) and \(\epsilon\), respectively. OPT expects the following four possible scenarios. Let \(A_{1}\) and \(A_{2}\) denote the numbers of arrivals of \(j=1,2\), respectively.

* Case 1: \(A_{1}=0,A_{2}\geq 1\), which occurs with probability equal to \(\mathsf{e}^{-\epsilon}(1-1/\mathsf{e})\);
* Case 2: \(A_{1}\geq 1,A_{2}=0\), which occurs with probability equal to \((1-\mathsf{e}^{-\epsilon})(1/\mathsf{e})\);
* Case 3: \(A_{1}\geq 1,A_{2}\geq 1\), which occurs with probability equal to \((1-\mathsf{e}^{-\epsilon})(1-1/\mathsf{e})\);
* Case 4: \(A_{1}=0,A_{2}=0\), which occurs with probability equal to \(\mathsf{e}^{-\epsilon-1}\).

Observe that since we have one single offline agent \(i\) with a unit capacity, OPT has one single choice in Cases 1, 2, and 4. For example, in Case 1, OPT will match one arrival of \(j=2\) with \(i\), and in Case 2, OPT will match any arrival of \(j=1\) with \(i\), and in Case 4, OPT can do nothing since no arrivals. The only tricky issue arises in Case 3 since OPT can choose to match the only offline agent with one arrival either from \(j=1\) or \(j=2\). Consider the following two strategies.

The first policy, denoted by **ALG-A**, which aims to maximize \(\min(\mathbb{E}[X_{1}]/\epsilon,\mathbb{E}[X_{2}]/1)\) on every arrival instance. Thus, in Case 3, **ALG-A** should match the only offline agent with one arrival of \(j=1\) and \(j=2\) with respective probabilities of \(\epsilon/(1+\epsilon)\) and \(1/(1+\epsilon)\). Note that the expected number of matches of \(j=1\) by **ALG-A** should be

\[\mathbb{E}[X_{1}]=\Pr[\text{Case 2}]\cdot 1+\Pr[\text{Case 3}]\cdot\frac{ \epsilon}{1+\epsilon}=(1-\mathsf{e}^{-\epsilon})\cdot(1/\mathsf{e})\cdot 1+(1 -\mathsf{e}^{-\epsilon})(1-1/\mathsf{e})\cdot\frac{\epsilon}{1+\epsilon}.\]

This suggests that

\[\frac{\mathbb{E}[X_{1}]}{\lambda_{1}}=\frac{\mathbb{E}[X_{1}]}{\epsilon} \rightarrow\frac{1}{\mathsf{e}}\;\;(\text{when }\epsilon\to 0).\]

Similarly, the expected number of matches of \(j=2\) by **ALG-A** should be

\[\frac{\mathbb{E}[X_{2}]}{\lambda_{2}}=\mathbb{E}[X_{2}]\to 1-1/\mathsf{e} \;\;(\epsilon\to 0).\]

Thus, we claim that **ALG-A** above achieves a long-run fairness of \(\min\left(\frac{\mathbb{E}[X_{1}]}{\lambda_{1}},\frac{\mathbb{E}[X_{2}]}{ \lambda_{2}}\right)=1/\mathsf{e}\).

Now, we consider a second strategy, denoted by **ALG-B**, which in Case 3 matches the only offline agent with one arrival of \(j=1\) and \(j=2\) with respective probabilities of \(p\) and \(1-p\), respectively, with \(p\in(0,1)\) being a constant independent of \(\epsilon\). Note that the expected number of matches of \(j=1\) by **ALG-B** should be

\[\mathbb{E}[X_{1}]=\Pr[\text{Case 2}]\cdot 1+\Pr[\text{Case 3}]\cdot p=(1- \mathsf{e}^{-\epsilon})\cdot(1/\mathsf{e})\cdot 1+(1-\mathsf{e}^{-\epsilon})(1-1/e) \cdot p.\]

Thus,

\[\frac{\mathbb{E}[X_{1}]}{\lambda_{1}}=\frac{\mathbb{E}[X_{1}]}{\epsilon} \rightarrow\frac{1}{\mathsf{e}}+(1-1/\mathsf{e})\cdot p\;\;(\epsilon\to 0).\]

Similarly, we have

\[\frac{\mathbb{E}[X_{2}]}{\lambda_{2}}=\mathbb{E}[X_{2}]\to 1-1/\mathsf{e} \;\;(\epsilon\to 0).\]Thus, the long-run fairness achieved by **ALG-B** is equal to

\[\min\Big{(}\frac{\mathbb{E}[X_{1}]}{\lambda_{1}},\frac{\mathbb{E}[X_{2}]}{\lambda_ {2}}\Big{)}=\min\Big{(}1/\mathsf{e}+(1-1/\mathsf{e})\cdot p,1-1/\mathsf{e}\Big{)},\]

which is equal to \(1-1/\mathsf{e}\) when \(p\geq(1-2/\mathsf{e})/(1-1/\mathsf{e})\approx 0.418\). That is strictly better than **ALG-A**. We can verify that **ALG-B** with \(p\geq(1-2/e)/(1-1/e)\) is a clairvoyant optimal policy.

## Appendix B A Detailed Comparison of Our Work and Ma et al. [28]

Let us detail the differences between the two studies in the following two aspects.

**Model**: As pointed out on lines 155 to 162, the model of [28] assumes integral arrival rates for all online types and then further assumes, without loss of generality, that each online type has a unit arrival rate. In contrast, we do not make that assumption. Importantly, the integral-arrival-rate assumption among online types allows them to propose a significantly stronger benchmark LP than ours. Specifically, the extra constraint \(\sum_{j\in S}x_{ij}\leq 1-\mathsf{e}^{-\lambda(S)}=1-\mathsf{e}^{-|S|}\) in the LP [28] is crucial for overcoming the \(1-1/\mathsf{e}\) barrier for algorithms in [28], where \(\lambda(S)\) denotes the total arrival rates among all online types in \(S\). As acknowledged there, their algorithms cannot surpass \(1-1/\mathsf{e}\) without that constraint. In our case, while the constraint remains valid, it becomes ineffective compared to its role in [28], which is particularly evident when most online types are rare. For instance, when each online type in \(S\) has an arrival rate as small as \(1/n^{2}\), this constraint reduces to \(\sum_{j\in S}x_{ij}\leq 1-\mathsf{e}^{-|S|/n^{2}}\), where the right-hand side approaches one as \(n\to\infty\) regardless of the size of \(S\).

**Techniques**. Inspired by the insights above, we can no longer exploit any extra constraint to surpass the \(1-1/\mathsf{e}\) barrier. Instead, we conduct a parameter-dependent competitive analysis for our sampling-based policies and explore various scenarios where our algorithm can exceed \(1-1/\mathsf{e}\) or even approach one. Specifically, we incorporate two parameters--the optimal LP value and the minimum offline serving capacity--into the analysis and the final competitive ratio. In contrast, Ma et al. [28] conducted a traditional parameter-free analysis, neglecting the potential impact of different parameters in the input instance on the final competitiveness.

Appendix C Examples Showing the Possibilities of \(\mathrm{FAIR-S}>\mathrm{FAIR-L}\) and \(\mathrm{FAIR-S}<\mathrm{FAIR-L}\)

Below are examples showing it is possible that \(\mathrm{FAIR-S}>\mathrm{FAIR-L}\) and \(\mathrm{FAIR-S}<\mathrm{FAIR-L}\).

**Example 3**.: _Consider a simple example where we have one single offline agent and one single online type with \(b=\lambda=1\). Consider the algorithm \(\mathsf{FCFS}\): serve the online agent whenever it arrives._

_Let \(A\sim\mathrm{Pois}(1)\) be the number of arrivals of online agents. Observe that \(\mathrm{FAIR-L}=\mathbb{E}[X]=\Pr[A\geq 1]=1-1/\mathsf{e}\). Note that when \(A=0\), we have \(\mathrm{FAIR-S}=1\). Thus, we can verify that_

\[\mathrm{FAIR-S} =\Pr[A=0]+\sum_{k=1}^{\infty}\frac{\Pr[A=k]}{k}>\mathsf{e}^{-1}+ \sum_{k=1}^{\infty}\frac{\mathsf{e}^{-1}}{k!}\frac{1}{k+1}\] \[=\mathsf{e}^{-1}\Big{(}1+\sum_{k=2}^{\infty}\frac{1}{k!}\Big{)}= \mathsf{e}^{-1}\Big{(}1+\mathsf{e}-2\Big{)}=1-1/\mathsf{e}=\mathrm{FAIR-L}\,.\]

Thus we claim that it is possible that \(\mathrm{FAIR-S}>\mathrm{FAIR-L}\).

**Example 4**.: _Consider a simple example where we have one single offline agent and one single online type with \(b=1\) and an online arrival rate of \(\lambda\). Consider such an algorithm featured by a threshold \(k\) as follows: serve the online agent only when it arrives for the \(k\)th time. In other words, ignore it for the first \(k-1\) arrivals. Let \(A\sim\mathrm{Pois}(\lambda)\) denote the number of online arrivals._

_Take \(\lambda=10\) and \(k=11\). We can verify that (1) \(\mathrm{FAIR-L}=\frac{\Pr[A>k]}{\lambda}\); (2)_

\[\mathrm{FAIR-S}=\Pr[A=0]+\sum_{\ell=k}^{\infty}\Pr[A=\ell]/\ell<\mathsf{e}^{- \lambda}+\Pr[A\geq k]/k<\Pr[A\geq k]/\lambda=\mathrm{FAIR-L}\,.\]

_Thus, we claim that it is possible that \(\mathrm{FAIR-S}<\mathrm{FAIR-L}\)._Proof of Lemma 4

Proof.: Part (1) follows from the fact (see _e.g._, [27]) that \(\mathbb{E}\big{[}\min\{\mathrm{Pois}(b/s),b\}\big{]}/b\) is increasing in \(b\). Part (2) is valid since: if \(s\leq 1\), then \(\kappa(b,s)=\mathbb{E}\big{[}\min\{\mathrm{Pois}(b/s),b\}\big{]}/b\) which is decreasing in \(s\); if \(s\geq 1\), then \(\kappa(b,s)=s\cdot(\mathbb{E}\big{[}\min\{\mathrm{Pois}(b/s),b\}\big{]}/b)\), which is increasing in \(s\). Furthermore, we can derive that

\[\frac{\mathbb{E}[\min\{\mathrm{Pois}(b/s),b\}]}{b}=1-\frac{1}{b}\mathbb{E}[ \max\{b-\mathrm{Pois}(b/s),0\}]=1-\sum_{k=0}^{b-1}\mathrm{e}^{-b/s}\frac{b^{k -1}}{s^{k}k!}(b-k);\]

if \(s=1\) then this equals

\[\frac{\mathbb{E}[\min\{\mathrm{Pois}(b/s),b\}]}{b}=1-\sum_{k=0}^{b-1}\mathrm{ e}^{-b}\frac{b^{k}}{k!}+\sum_{k=1}^{b-1}\mathrm{e}^{-b}\frac{b^{k-1}}{(k-1)!}=1 -\mathrm{e}^{-b}\frac{b^{b-1}}{(b-1)!}=\kappa(b,1).\]

It can be verified that \(\kappa(b,1)\) gets minimized at \(b=1\) with \(\kappa(1,1)=1-1/\mathrm{e}\). For \(b>1\),

\[\kappa(b,1)\geq 1-\mathrm{e}^{-b}\frac{b^{b-1}}{\frac{(b-1)^{b-1}}{\mathrm{e} ^{b-1}}\sqrt{2\pi(b-1)}}=1-\frac{1}{\mathrm{e}}(1+\frac{1}{b-1})^{b-1}\frac{1} {\sqrt{2\pi(b-1)}}\geq 1-\frac{1}{\sqrt{2\pi(b-1)}},\]

where we use Stirling's approximation in the first inequality. This establishes Part (3) and Part (5).

Now, we show Parts (4) and (6). Recall that \(\eta(\lambda,s)=\frac{\mathbb{E}[\min\mathrm{Pois}(\lambda),\lambda s]}{\lambda \cdot\min(s,1)}\) and \(\kappa(b,s)=\eta(b/s,s)\). Consider the first case when \(s>1\). We see that

\[\eta(\lambda,s) =\frac{\mathbb{E}[\min(\mathrm{Pois}(\lambda),\lambda s)]}{ \lambda}\geq\frac{1}{\lambda}\sum_{k=1}^{\lambda s}\frac{\mathrm{e}^{-\lambda} \lambda^{k}k}{k!}=\sum_{k=0}^{\lambda s-1}\frac{\mathrm{e}^{-\lambda}\lambda^{k }}{k!}=1-\Pr[\mathrm{Pois}(\lambda)\geq\lambda s]\] \[\geq 1-\exp\Big{(}-\lambda\cdot\frac{\ln s\cdot(s-1)^{2}}{s}\cdot (1-o(1))\Big{)}.\]

The last inequality is due to the upper tail bound of a Poisson random variable as shown by [8], where \(o(1)=\Theta(1/\ln s)\) is vanishing when \(s\to\infty\). Thus, since \(\kappa(b,s)=\eta(b/s,s)\), we see \(\kappa(b,s)\geq 1-\exp(-b\cdot\ln s\cdot(1-1/s)^{2}(1-o(1)))\), completing Part (4).

Similarly, for \(s<1\), we have

\[\eta(\lambda,s) =\frac{\mathbb{E}[\min(\mathrm{Pois}(\lambda),\lambda s)]}{\lambda s }\geq\frac{\lambda s}{\lambda s}\sum_{k=\lambda s}^{\infty}\frac{\mathrm{e}^{- \lambda}\lambda^{k}}{k!}=1-\Pr[\mathrm{Pois}(\lambda)<\lambda s]\] \[\geq 1-\exp\Big{(}-\frac{\lambda(1-s)^{2}}{2}\Big{)}.\]

The last inequality is due to [8]. Thus, by replacing \(\lambda\) with \(b/s\), we establish Part (6). 

## Appendix E An Alternative Proof for a Stronger Version of Lemma 5

Consider Example 2. We present an alternative proof for a stronger version of Lemma 5 below.

**Lemma 6**.: _For Example 1, the optimal non-rejecting policy (Non-Rej) achieves a long-run fairness of \(1/2+o(1)\) and \(1-o(1)\) for the rare type and the common type, respectively, where \(o(1)\) is a vanishing term when \(n\to\infty\)._

Since the clairvoyant optimal achieves a long-run fairness of \(1-O(1/n)\) for both common and rare types, the above lemma immediately implies that Non-Rej achieves a competitiveness of \(1/2+o(1)\).

We claim that Non-Rej above is an optimal non-rejecting algorithm for the bad example. This can be justified as follows: When a common type arrives, the best strategy is to sample an available offline neighbor (server) uniformly at random since each rare type has an equal chance of arriving subsequently.

Proof of Lemma 6.: For each \(k\) with \(0\leq k\leq n\) and \(t\in[0,1]\), let \(\pi_{k}(t)\) be the probability that there are \(k\) available servers at time \(t\). By the nature of Non-Rej, the update on the number of available servers follows a pure death process: The system starts at state \(k=n\) at time \(t=0\), i.e., \(\pi_{n}(0)=1\); given the system has \(1\leq k<n\) free servers at time \(t\), it leaves the state whenever either a common type arrives or any rare type uniquely served by any of the \(k\) free servers arrives, with a total arrival rate of \(n-1+k/n\). Thus,

\[\frac{\mathsf{d}\pi_{k}(t)}{\mathsf{d}t} =-\pi_{k}(t)\cdot n,\pi_{k}(0)=1 k=n;\] \[\frac{\mathsf{d}\pi_{k}(t)}{\mathsf{d}t} =-\pi_{k}(t)\cdot\Big{(}n-1+\frac{k}{n}\Big{)}+\pi_{k+1}(t)\Big{(} n-1+\frac{k+1}{n}\Big{)},\pi_{k}(0)=0 1\leq k<n;\] \[\pi_{0}(t) =1-\sum_{k=1}^{n}\pi_{k}(t).\]

From the above ordinary-differential-equation system, we can solve that

\[\pi_{k}(t)=\begin{cases}\Pr[\mathrm{Pois}(tn)=n-k](1+o(1)),&\text{if }1\leq k \leq n;\\ \Pr[\mathrm{Pois}(tn)\geq n](1+o(1)),&\text{if }k=0.\end{cases}\]

Let \(X\) be the (random) numbers of rare type agents that arrive and get served in Non-Rej. Therefore,

\[\mathbb{E}[X]=\int_{0}^{1}\sum_{k=1}^{n}\pi_{k}(t)\cdot(k/n)\mathsf{d}t=\int_{ 0}^{1}\sum_{k=1}^{n}\Big{(}\Pr[\mathrm{Pois}(tn)=n-k](1+o(1))\Big{)}\cdot(k/n) \mathsf{d}t\]

We can verify that \(\mathbb{E}[X]=1/2+o(1)\), where \(o(1)\) vanishes as \(n\to\infty\). By symmetry, the number of each rare type served equals \(\mathbb{E}[X]/n\), leading to a long-run fairness of \((\mathbb{E}[X]/n)/(1/n)=\mathbb{E}[X]=1/2+o(1)\). Similarly, let \(Y\) be the number of common type agents that arrive and are served in Non-Rej. Thus, the long-run fairness achieved for the common type is

\[\frac{\mathbb{E}[Y]}{n-1} =\frac{1}{n-1}\int_{0}^{1}\sum_{k=1}^{n}\pi_{k}(t)\cdot(n-1) \mathsf{d}t=\int_{0}^{1}\sum_{k=1}^{n}\Big{(}\Pr[\mathrm{Pois}(tn)=n-k](1+o(1 ))\Big{)}\mathsf{d}t\] \[=\int_{0}^{1}\Pr[\mathrm{Pois}(tn)\leq n-1]\mathsf{d}t+o(1)=\frac {1}{n}\int_{0}^{1}\Pr[\mathrm{Pois}(tn)\leq n-1]\cdot n\;\mathsf{d}t+o(1)\] \[=\frac{1}{n}\cdot\mathbb{E}\Big{[}\min\Big{(}\mathrm{Pois}(n),n \Big{)}\Big{]}-o(1)=1-o(1).\]

Thus, we establish the claim. 

Appendix F A Quantitative Study on the Tradeoff between Competitiveness and the Number of Rejected Agents

We use the bad example (Example 2) to conduct a case study on the trade-off between competitiveness and the number of rejected arriving agents (when the serving capacity remains). We hope this case study can provide insights for a comprehensive study of this trade-off in general cases. The proof of Lemma 6 in Section E offers a foundational framework for analyzing a general class of online policies. Consider an updated version of Non-Rej, denoted by \(\mathsf{Rej}(\alpha)\), where we reject each arriving common-type agent with a preset constant probability \(\alpha\in[0,1]\). We expect the parameter \(\alpha\) to serve as a useful moderator in balancing competitiveness and the number of rejected common-type agents.

Note that: (1) When \(\alpha=1\), \(\mathsf{Rej}(\alpha)\) reduces to \(\mathsf{Non-Rej}\); (2) The expected number of arriving common-type agents rejected in \(\mathsf{Rej}(\alpha)\) is at least \((1-\alpha)(n-1)\).

**Lemma 7**.: _The policy \(\mathsf{Rej}(\alpha)\) achieves a long-run fairness of \(1-\alpha/2+o(1)\) and \(\alpha-o(1)\) for the rare and common types, respectively, where \(o(1)\) is a vanishing term as \(n\to\infty\). Additionally, it rejects at least \((1-\alpha)(n-1)\) arriving common-type agents in expectation._

Proof.: For each \(k\) with \(0\leq k\leq n\) and \(t\in[0,1]\), let \(\pi_{k}(t)\) be the probability that there are \(k\) available servers at time \(t\). Following the same analysis as in the proof of Lemma 6, we have

\[\pi_{k}(t)=\begin{cases}\Pr[\mathrm{Pois}(tn\alpha)=n-k](1+o(1)),&\text{if }1 \leq k\leq n;\\ \Pr[\mathrm{Pois}(tn\alpha)\geq n](1+o(1)),&\text{if }k=0.\end{cases}\]

Let \(X\) be the (random) numbers of rare type agents that arrive and get served in \(\mathsf{Rej}(\alpha)\). Therefore,

\[\mathbb{E}[X] =\int_{0}^{1}\sum_{k=1}^{n}\pi_{k}(t)\cdot(k/n)\mathsf{d}t=\int_{ 0}^{1}\sum_{k=1}^{n}\Big{(}\Pr[\mathrm{Pois}(tn\alpha)=n-k](1+o(1))\Big{)}\cdot (k/n)\mathsf{d}t\] \[=\int_{0}^{1}\sum_{\ell=0}^{n-1}\Pr[\mathrm{Pois}(tn\alpha)=\ell] \cdot(1-\ell/n)\mathsf{d}t+o(1)\] \[=\int_{0}^{1}\sum_{\ell=0}^{n-1}\Pr[\mathrm{Pois}(tn\alpha)=\ell] \mathsf{d}t-\frac{\ell}{n}\int_{0}^{1}\sum_{\ell=0}^{n-1}\Pr[\mathrm{Pois}(tn \alpha)=\ell]\mathsf{d}t+o(1)\] \[=\int_{0}^{1}\Pr[\mathrm{Pois}(tn\alpha)\leq n-1]\mathsf{d}t-\int _{0}^{1}(t\alpha)\cdot\Pr[\mathrm{Pois}(tn\alpha)\leq n-2]\mathsf{d}t+o(1)\] \[=1-\alpha/2+o(1).\]

By symmetry, the number of each rare type served is equal to \(\mathbb{E}[X]/n\), leading to a long-run fairness of \((\mathbb{E}[X]/n)/(1/n)=\mathbb{E}[X]=1-\alpha/2+o(1)\). Similarly, let \(Y\) be the number of common type agents that arrive and are served in \(\mathsf{Rej}(\alpha)\). The long-run fairness achieved for the common type is

\[\frac{\mathbb{E}[Y]}{n-1} =\frac{1}{n-1}\int_{0}^{1}\sum_{k=1}^{n}\pi_{k}(t)\cdot(n-1)\cdot \alpha\,\mathsf{d}t=\alpha\int_{0}^{1}\sum_{k=1}^{n}\Pr[\mathrm{Pois}(tn\alpha )=n-k]\mathsf{d}t+o(1)\] \[=\alpha\int_{0}^{1}\,\Pr[\mathrm{Pois}(tn\alpha)\leq n-1]\mathsf{ d}t+o(1)=\alpha\cdot\frac{1}{n\alpha}\int_{0}^{1}\Pr[\mathrm{Pois}(tn\alpha)\leq n -1]\cdot(n\alpha)\,\mathsf{d}t+o(1)\] \[=\alpha\cdot\frac{1}{n\alpha}\cdot\mathbb{E}\Big{[}\min\Big{(} \mathrm{Pois}(n\alpha),n\Big{)}\Big{]}-o(1)=\alpha-o(1).\]

Thus, we establish the claim. 

## Appendix G Proof of Theorem 3: Extension of \(\mathrm{OM-LF}\) to Group-Level Fairness

In this section, we consider the extension of \(\mathrm{OM-LF}\) to group-level fairness. Recall that we have a collection of protected groups \(\mathcal{G}=\{g|g\subseteq J\}\), where each group \(g\in\mathcal{G}\) is a subset of \(J\) that indicates the online agent types in group \(g\). The updated long-run fairness with respect to \(\mathcal{G}\) is defined as FAIR-L(\(\mathcal{G}\)) \(=\min_{g\in\mathcal{G}}\frac{\mathbb{E}_{A,A\in\mathcal{L}}(X(g)]}{\sum_{j\in g}\lambda _{j}}\), as shown in (6). Below is an updated version of Benchmark LP for the long-run group-level fairness.

\[\max\ s \tag{10}\] \[\sum_{j\in\mathcal{N}_{i}}x_{ij} \leq b_{i} \forall i\in I\] \[\sum_{j\in g}\sum_{i\in\mathcal{N}_{j}}x_{ij} \geq s\cdot\sum_{j\in g}\lambda_{j}\ \ \forall g\in\mathcal{G}\] (11) \[\sum_{i\in\mathcal{N}_{j}}x_{ij} \leq\lambda_{j} \forall j\in J\] (12) \[s,x_{ij} \geq 0 \forall(i,j)\in E\]

Note that we add a new set of constraints (12), which are clearly valid for any clairvoyant algorithm since the constraints hold on every sample path based on the realized number of arrivals and services. Therefore, \(\mathsf{OPT}\leq s^{*}\), where \(s^{*}\) represents the optimal value of LP (10), following the same argument as presented in the proof of Lemma 1.

### Proof of Part (1) of Theorem 3: \(\mathsf{SAMP}\)-\(\mathsf{G}\) and Competitive Analysis

The algorithm \(\mathsf{SAMP}\)-\(\mathsf{G}\) for \(\mathrm{OM}\)-\(\mathrm{LF}\) under long-run group-level fairness is formally stated in Algorithm 4. Note that \(\mathsf{SAMP}\)-\(\mathsf{G}\) will reject an online agent immediately with probability \(1-\sum_{i\in\mathcal{N}_{j}}x_{ij}^{*}/\lambda_{j}\), and will also reject it if the first sampled offline agent has reached capacity.

```
1 Solve \(\mathrm{LP}\) (10) to get an optimal solution \(\{x_{ij}^{*}\}\).
2 Let an online agent (of type \(j\)) arrive at time \(t\).
3 Sample a neighbor \(i\in\mathcal{N}_{j}\) with probability \(x_{ij}^{*}/\lambda_{j}\). /* This is a valid distribution due to Constraint (12). */
4If\(i\) is safe,, \(i\) has remaining capacity, then assign \(i\) to serve \(j\); otherwise, reject \(j\).
``` ```

**ALGORITHM 4**A Sampling Algorithm for \(\mathrm{OM}\)-\(\mathrm{LF}\) under Long-Run Group-Level Fairness (\(\mathsf{SAMP}\)-\(\mathsf{G}\))

Proof of Part (1) of Theorem 3.: We provide a terse argument since detailed logic can be found in Lemmas 2-3. The incoming demand flow to an offline agent \(i\in I\) is Poisson with rate \(\sum_{j\in\mathcal{N}_{i}}\lambda_{j}\frac{x_{ij}^{*}}{\lambda_{j}}\), which is at most \(b_{i}\) by LP feasibility. Therefore, the capacity of any offline agent \(i\) has not been reached at time \(t\) with probability at least \(\Pr[\mathrm{Pois}(b_{i}t)<b_{i}]\). Using this fact, the expected number of times offline agent \(i\) serves online type \(j\) is at least

\[\int_{0}^{1}\lambda_{j}\frac{x_{ij}^{*}}{\lambda_{j}}\Pr[\mathrm{ Pois}(b_{i}t)<b_{i}]dt =\frac{x_{ij}^{*}}{b_{i}}\cdot\int_{0}^{1}b_{i}\cdot\Pr\big{[} \mathrm{Pois}(b_{i}t)<b_{i}\big{]}dt\] \[=x_{ij}^{*}\cdot\frac{\mathbb{E}[\min\{\mathrm{Pois}(b_{i}),b_{i} \}]}{b_{i}}.\]

Applying Lemma 4 twice, the expected total number of times a group \(g\in\mathcal{G}\) is served is at least

\[\sum_{j\in g}\sum_{i\in\mathcal{N}_{j}}x_{ij}^{*}\cdot\frac{ \mathbb{E}[\min\{\mathrm{Pois}(b_{i}),b_{i}\}]}{b_{i}} \geq\frac{\mathbb{E}[\min\{\mathrm{Pois}(b),b\}]}{b}\cdot\sum_{j \in g}\sum_{i\in\mathcal{N}_{j}}x_{ij}^{*}\] \[=(1-\mathsf{e}^{-b}\frac{b^{b}}{b!})\cdot\sum_{j\in g}\sum_{i\in \mathcal{N}_{j}}x_{ij}^{*}.\]

The proof is completed by using the LP inequality that \(\sum_{j\in g}\sum_{i\in\mathcal{N}_{j}}x_{ij}^{*}/\sum_{j\in g}\lambda_{j}\geq s ^{*}\). 

**Remarks on the Missing Role Played by \(s^{*}\) in the Final Competitiveness.** Below are a few notes on why the competitiveness should no longer depend on \(s^{*}\). Recall that in Theorem 1, when the focus is the fairness among all possible online types, \(s^{*}\) was interpreted as the "scale" of demand that can be served, and the competitiveness approached \(1\) if \(s^{*}\to\infty\) or \(s^{*}\to 0^{+}\). However, in the context of group-level fairness, \(s^{*}\) no longer has this interpretation, and the statements about asymptotic optimality no longer hold. To illustrate this, we provide two examples below.

First, \(s^{*}\to\infty\) is no longer possible, because \(s^{*}\leq 1\) is implied by Constraints (11) and (12). On the other hand, if we do not add these constraints, then the LP has an unbounded gap, as demonstrated by the following example. There is a single group consisting of \(n\) types with arrival rates \(1\). One type is connected to an offline agent with capacity \(n\); the other types are connected to no offline agents. Without constraints (12), the LP would be able to "overseve" the first type and achieve a fairness of \(1\); any actual algorithm would have a fairness at most \(1/n\). All in all, in the generalized model, it is no longer possible to allow an \(s\) which is greater than \(1\).

Second, if \(s^{*}\to 0^{+}\), it is no longer the case that online algorithms can achieve a fairness of \(s^{*}\), as demonstrated by the following example. There is a single group consisting of \(2\) types; one with arrival rate \(1\) and the other with arrival rate \(\lambda\to\infty\). Each type is connected to its own offline agent with capacity \(1\). In this case \(s^{*}=2/(1+\lambda)\), which approaches \(0\). However, an online algorithm makes in expectation only \(1+(1-1/\mathsf{e})\) services, achieving fairness \((2-1/\mathsf{e})/(1+\lambda)\).

### Algorithm Reserve when All Online Types are Common

In this section we introduce another regime, in which algorithms are \(1\)-competitive--the regime where all online types are common, _i.e._, all have high arrival rates. However, this regime requires a different algorithm, which we now motivate using the following example.

**Example 5**.: \(J\) _consists of a single type \(a\) with \(\lambda_{a}=n\) and \(I\) consists of \(n\) separate servers each with unit capacity. Using \(\mathsf{SAMP}\)-\(\mathsf{G}\), each server faces a separate demand according to a Poisson process of rate 1 and successfully serves demand with probability \(1-1/\mathsf{e}\). The total expected demand served is \(n(1-1/\mathsf{e})\). However, an algorithm that adaptively chooses an available server and never rejects incoming demand as long as a server is available serves a total expected demand of \(\mathbb{E}[\min\{\mathrm{Pois}(n),n\}]\). As \(n\to\infty\), the \(\mathrm{FAIR}\)-\(\mathrm{L}\) of the adaptive algorithm approaches 1, while the \(\mathrm{FAIR}\)-\(\mathrm{L}\) of \(\mathsf{SAMP}\)-\(\mathsf{G}\) is stuck at \(1-1/\mathsf{e}\)._

\(\mathsf{SAMP}\)-\(\mathsf{G}\) did not improve on this example even when the arrival rate approached \(\infty\) because it did not "pool" the servers in order to reduce the variance in demand served. Motivated by this example, we now introduce an algorithm \(\mathsf{RESERVE}\), which pre-assigns the capacity that will be used to serve each online type. In general, offline agents could be adjacent to many online types and may not be as straightforward to assign as in Example 5; however, we make use of the updated \(\mathrm{LP}\) (10) along with the dependent rounding procedure [16] to generate a randomized assignment. We state \(\mathsf{RESERVE}\) in Algorithm 5 and leave the proof of Part (2) of Theorem 3 to Appendix.

```
1Split and re-index offline agents as necessary so that \(b_{i}=1\) for all \(i\in I\).
2Solve \(\mathrm{LP}\) (10) to get an optimal solution \(\{x^{*}_{ij},s^{*}\}\), and define \(x^{*}_{j}=\sum_{i\in\mathcal{N}_{j}}x^{*}_{ij}\) for all \(j\in J\). Note that \(x^{*}_{j}\leq\lambda_{j}\) for all \(j\in J\), by Constraint (12).
3Apply dependent rounding [16] to the LP solution \(\{x^{*}_{ij}\}\), and let \(\{X^{R}_{ij}\}\) be the rounded binary vector such that \(\sum_{j\in\mathcal{N}_{i}}X^{R}_{ij}\leq 1\) for all \(i\in I\).
4For each online type \(j\), reserve the offline agents \(\{i:X^{R}_{ij}=1\}\) exclusively for serving \(j\), and match them to incoming type-\(j\) agents in a first-come-first-serve manner.
```

**ALGORITHM 5**Alternate Algorithm that Pre-reserves Capacities (\(\mathsf{RESERVE}\))

### Proof of Part (2) of Theorem 3

Proof.: For all \(j\), let \(\mathrm{Serve}(j)\) denote the set \(\{i:X^{R}_{ij}=1\}\), which is generally randomized. By the work of [16], it is possible to do the rounding in Step 3 so that the sets \(\{\mathrm{Serve}(j):j\in J\}\) are always mutually disjoint, and \(|\,\mathrm{Serve}(j)|\in\{[x^{*}_{j}],[x^{*}_{j}]\}\) for all \(j\) with \(\mathbb{E}[|\,\mathrm{Serve}(j)|]=x^{*}_{j}\). \(\mathrm{Serve}(j)\) is fixed in advance, and hence independent of the number of arrivals of type \(j\), for any \(j\in J\). Therefore,

[MISSING_PAGE_FAIL:21]

### Proof of Part (2) of Theorem 4

Proof.: Let \(b\) be the serving capacity of the single offline agent and \(\lambda\) be the total arrival rate of online types. Consider an instance with \(b=1\), and assume all online types are rare. In other words, with probability one, every online type has at most one arrival. For each \(t\in[0,1]\), let \(\sigma(\lambda,t)\) be the fairness achieved by an optimal online algorithm under \(\mathrm{FAIR-S}\) when the online process is restricted as Poisson process of rate \(\lambda t\). Thus, we care about the value \(\sigma(\lambda,1)\), which is the fairness achieved by the online optimal.

Consider an infinitesimally small period \(\delta\) during which at most one arrival can occur. Now we try to upper bound \(\sigma(\lambda,t+\delta)\). (Case 1) There is no arrival during \((t,t+\delta]\) which occurs with probability \(\mathbf{e}^{-\lambda\delta}\). In the case, we have \(\sigma(\lambda,t+\delta)=\sigma(\lambda,t)\). (Case 2) There is one arrival during \((t,t+\delta]\) which occurs with probability \(1-\mathbf{e}^{-\lambda\delta}\). In this case, we have \(\sigma(\lambda,t+\delta)\leq\min(\sigma(\lambda,t),1-\sigma(\lambda,t)+ \mathbf{e}^{-\lambda t})\), which is shown as below.

Let \(\alpha_{t,k}\) be the fairness achieved by an online optimal when there are \(k\) arrivals during \([0,t]\). Observe that \(\alpha_{t,0}=1\) for all \(t\in[0,1]\). Therefore, by definition, \(\sigma(\lambda,t)=\sum_{k=0}^{\infty}\alpha_{t,k}\Pr[\mathrm{Pois}(\lambda t) =k]\). Assume there is one arrival during \((t,t+\delta]\). Note that

\[\sigma(\lambda,t+\delta) =\sum_{k=0}^{\infty}\min(\alpha_{t,k},1-k\cdot\alpha_{t,k})\Pr[ \mathrm{Pois}(\lambda t)=k]\] \[\leq\sum_{k=0}^{\infty}\alpha_{t,k}\Pr[\mathrm{Pois}(\lambda t)=k] =\sigma(\lambda,t),\] \[\sigma(\lambda,t+\delta) \leq\sum_{k=0}^{\infty}(1-k\cdot\alpha_{t,k})\Pr[\mathrm{Pois}( \lambda t)=k]\] \[\leq 1-\sum_{k=1}^{\infty}\alpha_{t,k}\Pr[\mathrm{Pois}(\lambda t) =k]=1-(\sigma(\lambda,t)-\mathbf{e}^{-\lambda t}).\]

Thus, we claim that \(\sigma(\lambda,t+\delta)\leq\min(\sigma(\lambda,t),1-\sigma(\lambda,t)+\mathbf{ e}^{-\lambda t})\). Wrapping up all the above analysis, we have \(\sigma(\lambda,t+\delta)\leq\mathbf{e}^{-\lambda\delta}\sigma(\lambda,t)+(1- \mathbf{e}^{-\lambda\delta})\min(\sigma(\lambda,t),1-\sigma(\lambda,t)+\mathbf{ e}^{-\lambda t})\). This suggests that \(\partial\sigma(\lambda,t)/\partial t\leq-\lambda\sigma(\lambda,t)+\lambda\min( \sigma(\lambda,t),1-\sigma(\lambda,t)+\mathbf{e}^{-\lambda t})\).

For each given \(\lambda\in[0,1]\), let \(R_{\lambda}(t)\) be the unique function satisfying that \(dR_{\lambda}(t)/dt=-\lambda R_{\lambda}(t)+\lambda\min(R_{\lambda}(t),1-R_{ \lambda}(t)+\mathbf{e}^{-\lambda t})\) with \(R_{\lambda}(0)=1\). Thus, we claim that \(\sigma(\lambda,1)\leq R_{\lambda}(1)\). Recall that the offline optimal has a performance of \(\mathbf{e}^{-\lambda}(1+\lambda)+\sum_{k=2}^{\infty}\frac{\mathbf{e}^{- \lambda\lambda}}{k!k}\) under \(\mathrm{FAIR-S}\). We can numerically verify that \(R_{\lambda}(1)/\big{(}\mathbf{e}^{-\lambda}(1+\lambda)+\sum_{k=2}^{\infty} \frac{\mathbf{e}^{-\lambda\lambda}}{k!k}\big{)}\) gets its minimum value of \(0.942\) when \(\lambda=1\). Thus, we establish our result. 

Proof of Part (3) of Theorem 4: Asymptomatically Optimal Algorithm of \(\mathsf{Prob-Rej}\) for \(\mathrm{FAIR-S}\) with a Single Offline Agent

Let \(\mathcal{I}(b,\lambda)\) denote an instance of online matching under short-run fairness \(\mathrm{FAIR-S}\) with a single offline agent of capacity \(b\) and a total online arrival rate of \(\lambda\gg 1\).

**Lemma 8**.: _Consider an instance \(\mathcal{I}(b,\lambda)\) with \(b/\lambda<1\). We have \(\mathsf{OPT}\leq(b/\lambda)\cdot\big{(}1+1/\lambda+o(1/\lambda)\big{)}\)._

Proof.: Let \(A=\sum_{j\in J}A_{j}\) be the total number of online arrivals. Observe that the performance of an optimal clairvoyant under \(\mathrm{FAIR-S}\) should satisfy (1) \(\mathsf{OPT}(A)=1\) when \(A\leq b\) and (2) \(\mathsf{OPT}(A)=b/k\) when \(A=k>b\). Therefore,

\[\mathsf{OPT} =\mathbb{E}_{A}[\mathsf{OPT}(A)]\] \[=\Pr[A\leq b]\cdot 1+\sum_{k>b}^{\infty}\Pr[A=k]\cdot\frac{b}{k}\] \[\leq\Pr[A\leq\lambda(1-(1-\kappa))]+b\cdot\sum_{k=1}^{\infty} \frac{\mathbf{e}^{-\lambda}\lambda^{k}}{k!}\frac{1}{k}\]\[\leq\exp\Big{(}-\frac{\lambda(1-\kappa)^{2}}{2}\Big{)}+b\cdot\Big{(}\frac{1}{ \lambda}+\frac{1}{\lambda^{2}}+o\big{(}\frac{1}{\lambda^{2}}\big{)}\Big{)}= \kappa\Big{(}1+\frac{1}{\lambda}+o\big{(}\frac{1}{\lambda}\big{)}\Big{)}.\]

Note that the inequality on the last line is due to the lower tail bound of a Poisson random variable as shown by [8]. Another trick involved is \(\sum_{k=1}^{\infty}\frac{\lambda^{k}}{k!}\frac{1}{k}=\operatorname{Ei}(\lambda )-\ln\lambda-\gamma\) where \(\gamma\doteq\lim_{n\to\infty}\Big{(}\sum_{k=1}^{n}1/k-\ln n\Big{)}\approx 0.577\) is a constant, and \(\operatorname{Ei}\) is the Exponential integral function. As shown by [32], \(\operatorname{Ei}(\lambda)=(\mathsf{e}^{\lambda}/\lambda)(1+1/\lambda+o(1/ \lambda))\) when \(\lambda\gg 1\). Thus, we are done. 

Now, we formally present the algorithm \(\mathsf{Prob}\)-\(\mathsf{Rej}\) in Algorithm 6, which shares the spirit as RESERVE as shown in Section G.2. Part (3) of Theorem 4 shows that \(\mathsf{Prob}\)-\(\mathsf{Rej}\) is \(1\)-competitive as the total arrival rate \(\lambda\to\infty\), even if the service capacity \(b\) is increasing at the same time. Depending on whether \(b/\lambda\) is greater than 1, the probabilistic rejection probabilities have to be chosen differently. Also, note that due to dependent rounding, \(\mathsf{Prob}\)-\(\mathsf{Rej}\) is less likely to reject an agent if other agents have already been rejected, distributing equal opportunity among the first \(K\) arrivals to be served. This dependent rounding makes it different from \(\mathsf{SAMP}\), \(\mathsf{SAMP}\)-\(\mathsf{G}\), and similar algorithms in the literature.

```
1Set \(\epsilon=b/\lambda-1\) if \(b/\lambda>1\) and \(\epsilon=\sqrt{\ln\lambda/\lambda}\) otherwise. let \(K=[\lambda(1+\epsilon)]\).
2Apply dependent rounding [16] to the vector \(\mathbf{x}=(b/K)\cdot\mathbf{1}\), which has \(K\) identical entries each equal \(b/K\). \(\operatorname{Let}(Y_{k})_{k}\in\{0,1\}^{K}\) be the random vector output.
3Suppose an online agent (of type) \(j\) arrives, and let it be the \(k\)th arrival among all online arrivals.
4If \(k\leq K\) and \(Y_{k}=1\), then serve the incoming type-\(j\) agent if it is possible; otherwise, reject agent \(j\).
```

**ALGORITHM 6**Probabilistic-Rejection Algorithm for \(\operatorname{FAIR}\)-\(\mathrm{S}\) with a Single Offline Agent (\(\mathsf{Prob}\)-\(\mathsf{Rej}\))

Proof of Part (3) of Theorem 4.: For notation convenience, we use \(\mathcal{I}\) to denote \(\mathcal{I}(b,\lambda)\), which represents an instance under \(\operatorname{FAIR}\)-\(\mathrm{S}\) with a single offline agent of capacity \(b\) and a total online arrival rate of \(\lambda\). Additionally, we use \(\mathsf{ALG}\) to refer to the probabilistic-rejection algorithm \(\mathsf{Prob}\)-\(\mathsf{Rej}\). By definition, we have \(\mathsf{ALG}(\mathcal{I})=\mathbb{E}_{\mathcal{A}}\Big{[}\min_{j:A_{j}>0} \mathbb{E}_{\mathsf{ALG}}[X_{j}]/A_{j}\Big{]}\doteq\mathbb{E}_{\mathcal{A}}[ \mathsf{ALG}(\mathcal{A})]\). Consider a given arrival vector \(\mathcal{A}\) with \(A\) being the total number of online arrivals. By definition, we have \(\mathsf{ALG}(\mathcal{A})=1\) when \(A=0\). Now, we show that \(\mathsf{ALG}(\mathcal{A})=b/K\) when (1) \(0<A\leq K\) and (2) \(b/K\leq 1\). Note that by dependent rounding, we have (**P1**) \(\Pr[Y_{j}=1]=b/K\) for all \(j\in[K]:=\{1,2,\ldots,K\}\) and (**P2**) \(\Pr\big{[}\sum_{j=1}^{K}Y_{j}\leq\sum_{j=1}^{K}b/K=b\big{]}=1\). Focus on a given \(j\in J\) with \(A_{j}>0\). Consider a specific online arrival of type \(j\), which is counted as the \(k\)th arrival among all online arrivals. When \(A\leq K\), we see that \(k\leq K\) and the single offline agent will not reach the capacity upon arrival due to (**P2**). Thus, we claim that the type-\(j\) agent will be served with probability equal to \(\Pr[Y_{k}=1]=b/K\) for each of its \(A_{j}\) arrivals. Thus, \(\mathbb{E}[X_{j}]=A_{j}\cdot b/K\) and \(\mathsf{ALG}(\mathcal{A})=\min_{j:A_{j}>0}\mathbb{E}_{\mathsf{ALG}}[X_{j}]/A_{ j}=b/K\). Consider the following three cases. (Case 1) \(b>\lambda\). In this case, \(K=b\). If \(A=0\), \(\mathsf{ALG}(\mathcal{A})=1\) and if \(0<A\leq K\), \(\mathsf{ALG}(\mathcal{A})=b/K=1\). Thus, we claim that \(\mathsf{ALG}(\mathcal{A})=1\) when \(A\leq K\).

\[\mathsf{ALG}(\mathcal{I})=\mathbb{E}_{\mathcal{A}}[\mathsf{ALG}(\mathcal{A})] \geq\Pr[A\leq K]=1-\Pr[\operatorname{Pois}(\lambda)>b]\geq 1-\exp\big{(}- \lambda(b/\lambda-1)^{2}/(2b/\lambda)\big{)}.\]

Note that \(\mathsf{OPT}(\mathcal{I})\leq 1\). Thus, \(\mathsf{ALG}(\mathcal{I})/\mathsf{OPT}(\mathcal{I})\geq\mathsf{ALG}(\mathcal{ I})\) and we are done. (Case 2) \(b=\lambda\). In this case, when \(A\leq K\), \(\mathsf{ALG}(\mathcal{A})\geq b/K\geq 1/(1+\epsilon)\). Thus,

\[\mathsf{ALG}(\mathcal{I})/\mathsf{OPT}(\mathcal{I})\geq\mathsf{ALG}(\mathcal{ I})=\mathbb{E}_{\mathcal{A}}[\mathsf{ALG}(\mathcal{A})]\geq\frac{\Pr[A\leq K]}{1+ \epsilon}\geq\Big{(}1-\exp\Big{(}-\frac{\lambda\epsilon^{2}}{2(1+\epsilon)} \Big{)}\Big{)}\cdot\frac{1}{1+\epsilon}.\]

Since \(\epsilon=\sqrt{\ln\lambda/\lambda}\), we establish our claim. (Case 3) \(b<\lambda\). We have \(\mathsf{ALG}(\mathcal{A})\geq b/K\geq(b/\lambda)/(1+\epsilon)\) when \(A\leq K\). Thus,

\[\mathsf{ALG}(\mathcal{I})=\mathbb{E}_{\mathcal{A}}[\mathsf{ALG}(\mathcal{A})] \geq\Pr[A\leq K]\cdot\frac{b/\lambda}{1+\epsilon}\geq\Big{(}1-\exp\Big{(}- \frac{\lambda\epsilon^{2}}{2(1+\epsilon)}\Big{)}\Big{)}\cdot\frac{b/\lambda}{1+ \epsilon}.\]By Lemma 8, we have that for any given instance \(\mathcal{I}(b,\lambda)\) with \(b<\lambda\),

\[\frac{\mathsf{ALG}(\mathcal{I})}{\mathsf{OPT}(\mathcal{I})}\geq\Big{(}1-\exp \Big{(}-\frac{\lambda\epsilon^{2}}{2(1+\epsilon)}\Big{)}\Big{)}\cdot\frac{1}{1 +\epsilon}\cdot\frac{1}{1+1/\lambda+o(1/\lambda)}.\]

Since \(\epsilon=\sqrt{\ln\lambda/\lambda}\), we establish our claim.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes]Justification:

Guidelines:

* The answer NA means that the paper does not include theoretical results.
* All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced.
* All assumptions should be clearly stated or referenced in the statement of any theorems.
* The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.
* Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.
* Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [NA] Justification: Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material?Answer: [NA]  Justification:  Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [NA]  Justification:  Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [NA]  Justification:  Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors). * It should be clear whether the error bar is the standard deviation or the standard error of the mean. ** It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [NA] Justification: Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics [https://neurips.cc/public/EthicsGuidelines?](https://neurips.cc/public/EthicsGuidelines?) Answer: [Yes] Justification: Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [NA] Justification: Guidelines: * The answer NA means that there is no societal impact of the work performed. * If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. * Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations. * The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. * The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology. * If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).
11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: Guidelines: * The answer NA means that the paper poses no such risks. * Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters. * Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. * We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.
12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [NA] Justification: Guidelines: * The answer NA means that the paper does not use existing assets. * The authors should cite the original paper that produced the code package or dataset. * The authors should state which version of the asset is used and, if possible, include a URL. * The name of the license (e.g., CC-BY 4.0) should be included for each asset. * For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided. * If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset. * For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. * If this information is not available online, the authors are encouraged to reach out to the asset's creators.
13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets?Answer: [NA] Justification: Guidelines:

* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: Guidelines:

* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: Guidelines:

* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.