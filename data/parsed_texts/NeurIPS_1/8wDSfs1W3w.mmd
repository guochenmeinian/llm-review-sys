# Formal Representation and Solution of Plane Geometric Problems

 Xiaokai Zhang, Na Zhu, Cheng Qin, Yang Li, Tuo Leng

School of Computer Engineering and Science

Shanghai University

tleng@shu.edu.cn

Corresponding Author

Zhenbing Zeng

College of Sciences

Shanghai University

###### Abstract

Geometric problem solving has always been a long-standing challenge in the fields of mathematical reasoning and artificial intelligence. In this paper, we present formallgeo7k, a geometric problem dataset based on rigorous geometry formalization theory and consistent geometry formal system, serving as a benchmark for various tasks such as geometric diagram parsing and geometric problem solving. All problems are annotated with problem text, problem diagram, formal descriptions, and solution. Combining symbolic solver and deep learning techniques, we can achieve human-like, traceable and explainable solutions, which are stored in a hypergraph for graph-related tasks. We experiment with various methods and the best method achieves only 86.40% on formalgeo7k. This shows that formalgeo7k presents a challenge for future research.

## 1 Introduction

Geometric problem solving (GPS) has always been a long-standing challenge [22, 30, 13] in the fields of mathematical reasoning and artificial intelligence, owing to the cross-modal forms of knowledge and the absence of automated solving methods. A typical geometric problem consists of a textual problem description and a geometric diagram. GPS requires solvers to possess multimodal fusion and reasoning capabilities, which have attracted much attention recently. Existing works mostly construct a neuro-symbolic system for GPS. Deductive Database (DD) methods [14, 40, 24] parse the problem text and diagram into formal language and then solve the problem by logical reasoning. Program sequence generation (PSG) methods [5, 36, 29] encode the problem text and diagram, input the encoding into a decoder, and generate a program sequence, which is then executed by a program executor.

However, existing methods focus on the research of the neural part while neglecting the symbolic part. First, existing methods fail to achieve a human-like problem-solving process. DD methods cannot eliminate redundant theorems, and PSG methods lack mathematical rigor. This not only undermines the readability of the solutions but also limits their application in mathematics education. Second, existing methods lack research on geometry formalization theory. This not only fails to ensure the consistency of the solver's reasoning process but also hinders the expansion of symbolic systems. Defining new theorems requires modifying the solver's code, making it difficult to represent more complex problems, such as problems at International Mathematical Olympiad (IMO) level. Furthermore, existing datasets are small in scale and cannot serve as benchmarks for training and evaluating large language model (LLMs). Some datasets are poorly annotated or contain errors, making them unsuitable as a unified benchmark.

To address these issues, we develop FormalGeo, a consistent geometry formal system based on rigorous geometry formalization theory [37]. We further construct the formalgeo7k dataset, which contains 7,000 geometric problems. All problems are annotated with problem text, problem diagrams, formal descriptions, and solutions, as shown in Fig. 1. This dataset can serve as a benchmark for various tasks, such as GPS, geometric diagram parsing (GDP), geometric relation extraction (GRE), geometric problem formalization and the evaluation of LLMs reasoning abilities.

To assess the dataset difficulty, we experiment with several methods and the best method only achieves 86.40% problem solving success rate (PSSR). This shows that formaldehyde7k presents a challenge for future research.

## 2 formaldehyde7k dataset

We present formaldehyde7k, a geometric problem dataset based on rigorous geometry formalization theory and consistent geometry formal system, serving as a benchmark for various tasks such as geometric diagram parsing and geometric problem solving. All code and datasets are open-source and available at [https://github.com/FormalGeo/FormalGeo](https://github.com/FormalGeo/FormalGeo). Refer to Appx. D for instructions on how to use _pip_ to build FormalGeo formal systems and download formaldehyde7k.

### Geometry formal system

We build FormalGeo, a consistent geometry formal system based on rigorous geometry formalization theory [37]. FormalGeo incorporates diagrammatic reasoning, algebraic computation, relational reasoning, and logical operations into a unified framework of geometry predicate logic, whose syntax is similar to first-order predicate logic. Within this formal framework, we can transform geometric diagrams and text into a consistent formal language, which not only maintains good readability but can also be mechanically processed by computer. The final solution of geometric problems can be represented as hypergraph, where conditions serve as hypernodes and theorems as hyperedges, thus transforming into a human-like solution. In addition, FormalGeo uses geometry definition language (GDL) to define new predicates or theorems and uses condition declaration language (CDL) to describe geometry problems, making it extremely convenient to extend the formal system and represent complex problems. Details of GDL are provided in Appx. A. A formal representation and solution of a 2022 IMO geometry problem can be found in Appx. B.

Figure 1: An example of annotated geometric problem in formaldehyde7k.

### Dataset annotation

Our formaldehyde7k Dataset contains 7,000 plane geometric problems, sourced from the Geometry3K [14] (40.69%), GeoQA [5] (53.38%), and GeoQA+ [3] (2.93%). Our annotation task can be divided into four parts: 1. Standardizing the style of problem texts (English and Chinese). For problems lacking English or Chinese descriptions, we add the missing descriptions. 2. Redrawing geometric diagrams using GeoGebra and saving the _.gbb_ files, which contains detailed positional information of the geometric elements. 3. Annotating geometric diagrams and texts using FormalGeo formal language. 4. Adding the theorem sequences required to solve the geometric problems.

Once the problems are annotated, we assign a different annotator to review and verify the correctness of the annotations. Finally, all problems are input into a symbolic solver FGPS [38] to check the correctness of the syntax, ensure that the annotated theorems can solve the problem and eliminate redundant theorems. By treating the intermediate results of a problem as a new goal, we can decompose a geometric problem into multiple sub-problem, automatically expanding the number of problems to tens of thousands. This results in a dataset with a smoother difficulty curve, and the number of problems becomes sufficient for training and evaluating LLMs.

Sixteen trained graduate master's students participated in the dataset annotation tasks. The annotation and reviewing process took approximately 1,500 person-hours.

### Dataset Statistics

Our dataset has 7,000 geometric problems. Each problem text (English) has a maximum of 444 characters and a minimum of 58 characters, with an average problem text length of 114.22. The construction CDL describes the topological structure of a geometric problem, and the number of its statements roughly reflects the complexity of the geometric diagram. The average length of construction CDL statements is 5.97. Both text CDL and image CDL describe the conditions of the geometric problem, with the average number of statements being 4.02 and 2.87, respectively. In the text CDL, the most frequently occurring predicates are _Equal_ (61.04%), _IscentreOfCircle_ (9.67%), _PerpendicularBetweenLine_ (8.69%), _ParallelBetweenLine_ (4.92%), and _IsTangentOfCircle_ (3.22%). In the diagram CDL, The proportions of _Equal_, _PerpendicularBetweenLine_, and _ParallelBetweenLine_ are 80.95%, 12.16%, and 6.89%, respectively. The number of theorems required for GPS serves as an measure of the difficulty of the problem. Each problem involves a maximum of 28 theorems and a minimum of 1 theorems, with an average theorem number of 4.34. The detailed statistical information can be found in Appx. C.

## 3 Experiments

### Benchmark methods

We tested several methods on formaldehyde7k. It is important to note that most SOTA models for GPS are trained in specific symbolic environments (such as those provided by Geometry3K [14] or GeoQA [5]), and adapting them to the FormalGeo would require significant manual effort. Therefore, we only compare methods using the FormalGeo environment. All methods use annotated text CDL and image CDL as input to the model. Parsing CDL from the original problem diagram and text is still a challenge, and we leave it for future work.

**Forward Search**[38]. This is a purely symbolic approach. It starts from the initial conditions of the problem and continuously apply theorems to derive new conditions until the goal is achieved. We run the forward search method using four different strategies (breadth-first, depth-first, random and beam) and presented the results of the best strategy (random). The maximum search depth is set to 15, the beam size to 20, and the timeout for each problem is set to 600 seconds.

**Backward Search**[38]. This is a purely symbolic approach. It begins with the problem-solving goal, expands it into multiple sub-goals, and repeats this process until all sub-goals are resolved. The best strategy for the backward search is breadth-first, with the other parameters set the same as in the forward search. We run the search method on two Intel i9-10900X processors, one AMD Ryzen 9 5900X, and one AMD Ryzen 9 7950X, using multiple processes while maintaining a CPU utilization rate of 80%. The total duration of the search is approximately 3 days.

**FGeo-TP**[9]. This method utilizes the language model to predict the theorem sequences for GPS, reducing the search complexity. We chose BART-base [10] as the theorem predictor. The training epochs were set to 20, with an initial learning rate of \(3\times 10^{-5}\). After theorem prediction, we ran the backward search method using a random strategy.

**FGeo-DRL**[40]. This method leverages a pre-trained natural language model to establish a policy network for theorem selection and employ monte carlo tree search for heuristic exploration. We chose DistilBERT [21] as the policy network to learn how to select a theorem from a 234 action space for the current problem step. The implementation details and training methods are consistent with those in the original paper.

**HyperGNet**[39]. This method builds a neural-symbolic system to effectively embed geometry knowledge and automatically perform human-like geometric problem solving. We train HyperGNet on a single GeForce RTX 4090. During the model's training phase, we optimize the model parameters using the Adam algorithm, with a learning rate of \(10^{-5}\), batch size of 64 and training epochs of 50. Executing a single training session of the neural network only require approximately 30 minutes.

### Experimental results

To provide a more detailed comparison of different models' capabilities, we divided the dataset into 6 levels based on the length of the theorem sequence \(l\) required to solve the problem: \(L_{1}(l\leq 2)\), \(L_{2}(3\leq l\leq 4)\), \(L_{3}(5\leq\overline{l}\leq 6)\), \(L_{4}(7\leq l\leq 8)\), \(L_{5}(9\leq\overline{l}\leq 10)\), \(L_{6}(l\geq 11)\). The experimental results are shown in Tab. 1.

It is evident that the longer the theorem sequence required to solve the problem, the higher the difficulty and the lower PSSR. We can see that, compared to traditional search methods, heuristic search combined with deep learning techniques has significantly improved the problem-solving success rate. FGeo-DRL achieved the highest overall PSSR, but its performance on solving difficult problems was lacking. HyperGNet, while slightly behind FGeo-DRL in overall PSSR, performed better on more challenging problems.

## 4 Related Work

The study of GPS has a long history, which can be broadly divided into algebraic methods and synthetic methods. Algebraic methods transform geometric problems into a system of algebraic equations consisting of polynomials and inequalities, such as Wu's method [27], Grobner basis methods [2] and elimination methods [26]. Synthetic methods encompass a wider range of approaches, including search-based methods [8; 16], knowledge-based methods [7], geometric invariants-based methods [34; 6], and machine Learning and optimization methods [23; 1; 20]. GPS has seen further advancements in recent years. Existing methods predominantly integrate deep learning and symbolic reasoning to construct a neuro-symbolic system for solving geometric problems. DD methods parse the problem text and diagram into formal language and then solve the problem by logical reasoning. Representative DD methods include Inter-GPS [14], GeoDRL [18], AlphaGeometry [24], FGeo [40; 9] and E-GPS [28]. PSG methods encode the problem text and diagrams, input the encoding into a decoder, and generate a program sequence, which is then executed by a program executor. Representative PSG methods include NGS [5], Geoformer [4], DPE [3], PGPSNet [36], SAC-GPS [17], UniMath [12], LANS [11], DualGeoSolver [29] and adaptive learning model [32]. Several geometry formal systems and datasets have been developed. We compared existing datasets with formalgeo7k, as shown in Tab. 2. In addition to geometric problem solving, tasks such as geometric diagram parsing [35] and geometric formalization [15] have also begun to attract increasing attention.

\begin{table}
\begin{tabular}{c c c c c c c c} \hline Method & Total & \(L_{1}\) & \(L_{2}\) & \(L_{3}\) & \(L_{4}\) & \(L_{5}\) & \(L_{6}\) \\ \hline Forward Search & 39.71 & 59.24 & 40.04 & 33.68 & 16.38 & 5.43 & 4.79 \\ Backward Search & 35.44 & 67.22 & 33.72 & 11.15 & 6.67 & 6.07 & 1.03 \\ FGeo-TP & 80.86 & 96.43 & 85.44 & 76.12 & 62.26 & 48.88 & 29.55 \\ FGeo-DRL & 86.40 & 97.65 & 94.21 & 85.87 & 70.45 & 46.81 & 32.18 \\ HyperGNet & 85.53 & 95.44 & 89.46 & 84.25 & 77.84 & 50.00 & 45.76 \\ \hline \end{tabular}
\end{table}
Table 1: Details of PSSR.

## 5 Conclusion

Based on rigorous geometry formalization theory and a consistent geometry formal system, we developed formaldehyde7k, a dataset containing 7,000 annotated geometry problems, including problem text, problem diagrams, formal descriptions, and solutions. formaldehyde7k serves as a benchmark for various tasks such as geometric diagram parsing and geometric problem solving, directly benefiting both AI4MATH and AI4EDU research. Experimental results indicate that formaldehyde7k presents a challenge for future research.

## References

* [1] Alvin, C., Gulwani, S., Majumdar, R., Mukhopadhyay, S.: Synthesis of solutions for shaded area geometry problems. In: The Thirtieth International Flairs Conference (2017)
* [2] Buchberger, B.: Applications of grobner bases in non-linear computational geometry. Mathematical aspects of scientific software pp. 59-87 (1988)
* [3] Cao, J., Xiao, J.: An augmented benchmark dataset for geometric question answering through dual parallel text encoding. In: Calzolari, N., Huang, C.R., Kim, H., Pustejovsky, J., Wanner, L., Choi, K.S., Ryu, P.M., Chen, H.H., Donatelli, L., Ji, H., Kurohashi, S., Paggio, P., Xue, N., Kim, S., Hahm, Y., He, Z., Lee, T.K., Santus, E., Bond, F., Na, S.H. (eds.). Proceedings of the 29th International Conference on Computational Linguistics. pp. 1511-1520. International Committee on Computational Linguistics, Gyeongju, Republic of Korea (Oct 2022), [https://aclanthology.org/2022.coling-1.130](https://aclanthology.org/2022.coling-1.130)
* [4] Chen, J., Li, T., Qin, J., Lu, P., Lin, L., Chen, C., Liang, X.: UniGeo: Unifying geometry logical reasoning via reformulating mathematical expression. In: Goldberg, Y., Kozareva, Z., Zhang, Y. (eds.) Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing. pp. 3313-3323. Association for Computational Linguistics, Abu Dhabi, United Arab Emirates (Dec 2022). [https://doi.org/10.18653/v1/2022.emnlp-main.218](https://doi.org/10.18653/v1/2022.emnlp-main.218), [https://aclanthology.org/2022.emnlp-main.218](https://aclanthology.org/2022.emnlp-main.218)
* [5] Chen, J., Tang, J., Qin, J., Liang, X., Liu, L., Xing, E., Lin, L.: GeoQA: A geometric question answering benchmark towards multimodal numerical reasoning. In: Zong, C., Xia, F., Li, W., Navigli, R. (eds.) Findings of the Association for Computational Linguistics: ACL-IJCNLP 2021. pp. 513-523. Association for Computational Linguistics, Online (Aug 2021). [https://doi.org/10.18653/v1/2021.findings-acl.46](https://doi.org/10.18653/v1/2021.findings-acl.46), [https://aclanthology.org/2021.findings-acl.46](https://aclanthology.org/2021.findings-acl.46)
* [6] Chou, S.C., Gao, X.S., Zhang, J.Z.: Automated production of traditional proofs in solid geometry. Journal of Automated Reasoning **14**(2), 257-291 (1995)

\begin{table}
\begin{tabular}{c c c c c c c c c c c c} \hline \hline \multirow{2}{*}{Method} & \multirow{2}{*}{Task} & \multirow{2}{*}{Size} & \multicolumn{8}{c}{Comparative Metrics for GPS task} \\ \cline{4-11}  & & & FM & FW & BW & NT & PT & FS & HS & CR \\ \hline GEOS [23] & GPS & 186 & DD & ✓ & ✓ & & & & & \\ GEOS++ [19] & GPS & 1,406 & DD & ✓ & ✓ & & & & & \\ GEOS-OS [20] & GPS & 2,235 & DD & ✓ & ✓ & & & & & \\ Geometry3K [14] & GPS & 3,002 & DD & ✓ & ✓ & & & & & \\ GeoQA [5] & GPS & 5,010 & PSG & ✓ & ✓ & & & & & \\ GeometryQA [25] & GPS & 1,398 & PSG & ✓ & ✓ & & & & & \\ GeoRE [31] & GRE & 1,398 & - & - & - & - & - & - & - & - & - \\ GeoQA++ [33] & GPS & 7,528 & PSG & ✓ & ✓ & ✓ & & & & \\ UniGeo [4] & GPS & 14,541 & PSG & ✓ & & ✓ & ✓ & & & \\ PGDP5K [35] & GDP & 5,000 & - & - & - & - & - & - & - & - \\ PGPS9K [36] & GPS & 9,022 & PSG & ✓ & & ✓ & & & & \\ GeoEval [33] & GPS & 5050 & - & ✓ & ✓ & ✓ & & ✓ & ✓ & ✓ \\ formaldehyde7k & All & 7000 & DD & ✓ & ✓ & ✓ & ✓ & ✓ & ✓ & ✓ \\ \hline \hline \end{tabular}

* All denotes GPS+GDP+GRE. The 8 comparative metrics are: Formalization Methods, ForWard solving, BackWard solving, Numerical Targets, Proving Targets, Formal System, Human-like Solutions and Complexity Ratings.

\end{table}
Table 2: Comparative analysis with existing geometric problem datasets.

* [7] Chou, S.C., Gao, X.S., Zhang, J.Z.: A deductive database approach to automated geometry theorem proving and discovering. Journal of Automated Reasoning **25**(3), 219-246 (2000)
* [8] Gelernter, H.L.: Realization of a geometry theorem proving machine. In: IFIP congress. pp. 273-281 (1959)
* [9] He, Y., Zou, J., Zhang, X., Zhu, N., Leng, T.: Fgeo-tp: A language model-enhanced solver for euclidean geometry problems. Symmetry **16**(4) (2024). [https://doi.org/10.3390/sym16040421](https://doi.org/10.3390/sym16040421), [https://www.mdpi.com/2073-8994/16/4/421](https://www.mdpi.com/2073-8994/16/4/421)
* [10] Lewis, M.: Bart: Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension. arXiv preprint arXiv:1910.13461 (2019)
* [11] Li, Z.Z., Zhang, M.L., Yin, F., Liu, C.L.: LANS: A layout-aware neural solver for plane geometry problem. In: Ku, L.W., Martins, A., Srikumar, V. (eds.) Findings of the Association for Computational Linguistics ACL 2024. pp. 2596-2608. Association for Computational Linguistics, Bangkok, Thailand and virtual meeting (Aug 2024), [https://aclanthology.org/2024.findings-acl.153](https://aclanthology.org/2024.findings-acl.153)
* [12] Liang, Z., Yang, T., Zhang, J., Zhang, X.: UniMath: A foundational and multimodal mathematical reasoner. In: Bouamor, H., Pino, J., Bali, K. (eds.) Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing. pp. 7126-7133. Association for Computational Linguistics, Singapore (Dec 2023). [https://doi.org/10.18653/v1/2023.emnlp-main.440](https://doi.org/10.18653/v1/2023.emnlp-main.440), [https://aclanthology.org/2023.emnlp-main.440](https://aclanthology.org/2023.emnlp-main.440)
* [13] Littman, M.L., Ajunwa, I., Berger, G., Boutilier, C., Currie, M., Doshi-Velez, F., Hadfield, G., Horowitz, M.C., Isbell, C., Kitano, H., et al.: Gathering strength, gathering storms: The one hundred year study on artificial intelligence (ai100) 2021 study panel report. arXiv preprint arXiv:2210.15767 (2022)
* [14] Lu, P., Gong, R., Jiang, S., Qiu, L., Huang, S., Liang, X., Zhu, S.C.: Inter-GPS: Interpretable geometry problem solving with formal language and symbolic reasoning. In: Zong, C., Xia, F., Li, W., Navigli, R. (eds.) Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers). pp. 6774-6786. Association for Computational Linguistics, Online (Aug 2021). [https://doi.org/10.18653/v1/2021.acl-long.528](https://doi.org/10.18653/v1/2021.acl-long.528), [https://aclanthology.org/2021.acl-long.528](https://aclanthology.org/2021.acl-long.528)
* [15] Murphy, L., Yang, K., Sun, J., Li, Z., Anandkumar, A., Si, X.: Autoformalizing Euclidean geometry. In: Salakhutdinov, R., Kolter, Z., Heller, K., Weller, A., Oliver, N., Scarlett, J., Berkenkamp, F. (eds.) Proceedings of the 41st International Conference on Machine Learning. Proceedings of Machine Learning Research, vol. 235, pp. 36847-36893. PMLR (21-27 Jul 2024), [https://proceedings.mlr.press/v235/murphy24a.html](https://proceedings.mlr.press/v235/murphy24a.html)
* [16] Nevins, A.J.: Plane geometry theorem proving using forward chaining. Artificial Intelligence **6**(1), 1-23 (1975)
* [17] Ning, M., Wang, Q.F., Huang, K., Huang, X.: A symbolic characters aware model for solving geometry problems. In: Proceedings of the 31st ACM International Conference on Multimedia. p. 7767-7775. MM '23, Association for Computing Machinery, New York, NY, USA (2023). [https://doi.org/10.1145/3581783.3612570](https://doi.org/10.1145/3581783.3612570), [https://doi.org/10.1145/3581783.3612570](https://doi.org/10.1145/3581783.3612570)
* [18] Peng, S., Fu, D., Liang, Y., Gao, L., Tang, Z.: GeoDRL: A self-learning framework for geometry problem solving using reinforcement learning in deductive reasoning. In: Rogers, A., Boyd-Graber, J., Okazaki, N. (eds.) Findings of the Association for Computational Linguistics: ACL 2023. pp. 13468-13480. Association for Computational Linguistics, Toronto, Canada (Jul 2023). [https://doi.org/10.18653/v1/2023.findings-acl.850](https://doi.org/10.18653/v1/2023.findings-acl.850), [https://aclanthology.org/2023.findings-acl.850](https://aclanthology.org/2023.findings-acl.850)
* [19] Sachan, M., Dubey, K., Xing, E.: From textbooks to knowledge: A case study in harvesting axiomatic knowledge from textbooks to solve geometry problems. In: Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing. pp. 773-784 (2017)
* [20] Sachan, M., Xing, E.: Learning to solve geometry problems from natural language demonstrations in textbooks. In: Proceedings of the 6th Joint Conference on Lexical and Computational Semantics ( SEM 2017). pp. 251-261 (2017)
* [21] Sanh, V.: Distilbert, a distilled version of bert: Smaller, faster, cheaper and lighter. arXiv preprint arXiv:1910.01108 (2019)* [22] Selsam, D., de Moura, L., Buzzard, K., Barton, R., Liang, P., Loos, S., Wiedijk, F.: Imo grand challenge (2019), [https://imo-grand-challenge.github.io/](https://imo-grand-challenge.github.io/), accessed on September 14, 2024
* [23] Seo, M., Hajishirzi, H., Farhadi, A., Etzioni, O., Malcolm, C.: Solving geometry problems: Combining text and diagram interpretation. In: Proceedings of the 2015 conference on empirical methods in natural language processing. pp. 1466-1476 (2015)
* [24] Trinh, T.H., Wu, Y., Le, Q.V., He, H., Luong, T.: Solving olympiad geometry without human demonstrations. Nature **625**(7995), 476-482 (2024). [https://doi.org/10.1038/s41586-023-06747-5](https://doi.org/10.1038/s41586-023-06747-5), [https://doi.org/10.1038/s41586-023-06747-5](https://doi.org/10.1038/s41586-023-06747-5)
* [25] Tsai, S.h., Liang, C.C., Wang, H.M., Su, K.Y.: Sequence to general tree: Knowledge-guided geometry word problem solving. In: Zong, C., Xia, F., Li, W., Navigli, R. (eds.) Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 2: Short Papers). pp. 964-972. Association for Computational Linguistics, Online (Aug 2021). [https://doi.org/10.18653/v1/2021.acl-short.121](https://doi.org/10.18653/v1/2021.acl-short.121), [https://aclanthology.org/2021.acl-short.121](https://aclanthology.org/2021.acl-short.121)
* [26] Wang, D.: An elimination method for polynomial systems. Journal of Symbolic Computation **16**(2), 83-114 (1993)
* [27] Wu, W.T.: On the decision problem and the mechanization of theorem proving in elementary geometry. Scientia Sinica **21**, 157-179 (1978)
* [28] Wu, W., Zhang, L., Liu, J., Tang, X., Wang, Y., Wang, S., Wang, Q.: E-gps: Explainable geometry problem solving via top-down solver and bottom-up generator. In: Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). pp. 13828-13837 (June 2024)
* [29] Xiao, T., Liu, J., Huang, Z., Wu, J., Sha, J., Wang, S., Chen, E.: Learning to solve geometry problems via simulating human dual-reasoning process. In: Larson, K. (ed.) Proceedings of the Thirty-Third International Joint Conference on Artificial Intelligence, IJCAI-24. pp. 6559-6568. International Joint Conferences on Artificial Intelligence Organization (8 2024). [https://doi.org/10.24963/ijcai.2024/725](https://doi.org/10.24963/ijcai.2024/725), [https://doi.org/10.24963/ijcai.2024/725](https://doi.org/10.24963/ijcai.2024/725), main Track
* [30]XTXMarkets: Artificial intelligence mathematical olympiad prize (aimo prize) (2023), [https://aimoprize.com/](https://aimoprize.com/), accessed on September 14, 2024
* [31] Yu, W., Wang, M., Wang, X., Zhou, X., Zha, Y., Zhang, Y., Miao, S., Liu, J.: Geore: A relation extraction dataset for chinese geometry problems. In: 35th Conference on Neural Information Processing Systems (NeurIPS 2021) Workshop on Math AI for Education (MATHAI4ED) (2021)
* [32] Zeng, X., Liu, S.: Research on the application of knowledge mapping and knowledge structure construction based on adaptive learning model. Expert Systems with Applications **249**, 123400 (2024). [https://doi.org/https://doi.org/10.1016/j.eswa.2024.123400](https://doi.org/https://doi.org/10.1016/j.eswa.2024.123400), [https://www.sciencedirect.com/science/article/pii/S0957417424002653](https://www.sciencedirect.com/science/article/pii/S0957417424002653)
* [33] Zhang, J., Li, Z.Z., Zhang, M.L., Yin, F., Liu, C.L., Moshfeghi, Y.: GeoEval: Benchmark for evaluating LLMs and multi-modal models on geometry problem-solving. In: Ku, L.W., Martins, A., Srikumar, V. (eds.) Findings of the Association for Computational Linguistics ACL 2024. pp. 1258-1276. Association for Computational Linguistics, Bangkok, Thailand and virtual meeting (Aug 2024), [https://aclanthology.org/2024.findings-acl.73](https://aclanthology.org/2024.findings-acl.73)
* [34] Zhang, J.Z., Chou, S.C., Gao, X.S.: Automated production of traditional proofs for theorems in euclidean geometry i. the hilbert intersection point theorems. Annals of Mathematics and Artificial Intelligence **13**(1-2), 109-137 (1995)
* [35] Zhang, M.L., Yin, F., Hao, Y.H., Liu, C.L.: Plane geometry diagram parsing. In: Raedt, L.D. (ed.) Proceedings of the Thirty-First International Joint Conference on Artificial Intelligence, IJCAI-22. pp. 1636-1643. International Joint Conferences on Artificial Intelligence Organization (7 2022). [https://doi.org/10.24963/ijcai.2022/228](https://doi.org/10.24963/ijcai.2022/228), [https://doi.org/10.24963/ijcai.2022/228](https://doi.org/10.24963/ijcai.2022/228), main Track
* [36] Zhang, M.L., yin, F., Liu, C.L.: A multi-modal neural geometric solver with textual clauses parsed from diagram. In: Elkind, E. (ed.) Proceedings of the Thirty-Second International JointConference on Artificial Intelligence, IJCAI-23. pp. 3374-3382. International Joint Conferences on Artificial Intelligence Organization (8 2023). [https://doi.org/10.24963/ijcai.2023/376](https://doi.org/10.24963/ijcai.2023/376), [https://doi.org/10.24963/ijcai.2023/376](https://doi.org/10.24963/ijcai.2023/376), main Track
* [37] Zhang, X., Zhu, N., He, Y., Zou, J., Huang, Q., Jin, X., Guo, Y., Mao, C., Li, Y., Zhu, Z., Yue, D., Zhu, F., Wang, Y., Huang, Y., Wang, R., Qin, C., Zeng, Z., Xie, S., Luo, X., Leng, T.: Formalgeo: An extensible formalized framework for olympiad geometric problem solving (2024)
* [38] Zhang, X., Zhu, N., He, Y., Zou, J., Qin, C., Li, Y., Leng, T.: Fgeo-sss: A search-based symbolic solver for human-like automated geometric reasoning. Symmetry **16**(4) (2024). [https://doi.org/10.3390/sym16040404](https://doi.org/10.3390/sym16040404), [https://www.mdpi.com/2073-8994/16/4/404](https://www.mdpi.com/2073-8994/16/4/404)
* [39] Zhang, X., Zhu, N., He, Y., Zou, J., Qin, C., Li, Y., Zeng, Z., Leng, T.: Fgeo-hypergnet: Geometry problem solving integrating formal symbolic system and hypergraph neural network (2024)
* [40] Zou, J., Zhang, X., He, Y., Zhu, N., Leng, T.: Fgeo-drl: Deductive reasoning for geometric problems through deep reinforcement learning. Symmetry **16**(4) (2024). [https://doi.org/10.3390/sym16040437](https://doi.org/10.3390/sym16040437), [https://www.mdpi.com/2073-8994/16/4/437](https://www.mdpi.com/2073-8994/16/4/437)

## Appendix A Details of GDL

FormalGeo formal languages are categorized into geometry definition language (GDL) and condition declaration language (CDL). The former is used to define relations, attributes, theorems, and other elements of a geometry formal system, while the latter is employed for declaring conditions and goals in geometric problems. This chapter introduces GDL. An example of CDL can be found in Appx. B. GDL can be divided into predicate definition language and theorem definition language.

### Predicate definition language

Predicate definition language is used to define geometric relations and geometric attributions. FormalGeo comprises 89 predicates, including 25 fundamental predicates (Tab. 4) built into the solver and 12 entities (Tab. 5), 31 entity relationships (Tab. 6), and 21 attributions (Tab. 7) defined using the predicate definition language.

The detailed statements for defining a predicate is as shown in the Tab. 3, including the predicate name and point variable declaration, validity check declaration, multiple representations, and automatic expansion. Additionally, when defining attributes, it also includes symbolic form declaration.

### Theorem definition language

Theorems are defined using the geometry predicate logic, comprising two parts: premises and conclusions, as shown in the Tab. 8. FormalGeo defines 200 theorems.

## Appendix B An example of annotated IMO geometry problem

Based on rigorous geometry formalization theory and a carefully developed symbolic solver, FormalGeo can represent, verify, and solve IMO-level geometry problems. Fig. 2 shows the original problem from the 2022 IMO Problem 4 and its formalized description.

The final solution of geometric problems can be represented as a hypergraph, where conditions serve as hypernodes and theorems as hyperedges, as shown in Fig. 3. For this hypergraph, we can easily apply rule-based methods to transform it into a human-like solution, as illustrated in Fig. 4. We can also use LLMs to convert it into a more readable solution, which we leave for future research.

\begin{table}
\begin{tabular}{c c l} \hline name & item & content \\ \hline \multirow{4}{*}{IsMidpointOfLine(M,AB)} & \multicolumn{2}{c}{Point(M)} \\  & ee\_check & Line(AB) \\  & & Collinear(AMB) \\  & fv\_check & M,AB \\  & multi & M,BA \\  & extend & Equal(LengthOfLine(AM),LengthOfLine(MB)) \\ \hline \multirow{2}{*}{LengthOfLine(AB)} & ee\_check & Line(AB) \\  & sym & ll \\  & multi & BA \\ \hline \end{tabular}
\end{table}
Table 3: Detailed statement examples for defining a predicate.

\begin{table}
\begin{tabular}{c c c c} \hline id & type & name & examples \\ \hline
1 & Construction & Shape & Shape(AB,BC,CA) \\
2 & Construction & Collinear & Collinear(ABCD) \\
3 & Construction & Cocircular & Cocircular(O,ABC) \\
4 & BasicEntity & Point & Point(A) \\
5 & BasicEntity & Line & Line(AB) \\
6 & BasicEntity & Arc & Arc(OAB) \\
7 & BasicEntity & Angle & Angle(ABC) \\
8 & BasicEntity & Polygon & Polygon(ABCD) \\
9 & BasicEntity & Circle & Circle(O) \\
10 & Algebra & Equal & Equal(a,b) \\
11 & Algebra & Equation & Equation(a-b) \\
12 & Attribution & Free & Free(x) \\
13 & Operation & Add & Equal(Add(a,b,c),1) \\
14 & Operation & Sub & Equal(Sub(a,b),1) \\
15 & Operation & Mul & Equal(Mul(a,b,c),1) \\
16 & Operation & Div & Equal(Div(a,b),1) \\
17 & Operation & Pow & Equal(Pow(a,b),1) \\
18 & Operation & Mod & Equal(Mod(a,b),1) \\
19 & Operation & Sqrt & Equal(Sqrt(a),1) \\
20 & Operation & Sin & Equal(Sin(a),1/2) \\
21 & Operation & Cos & Equal(Cos(a),1/2) \\
22 & Operation & Tan & Equal(Tan(a),1) \\
23 & Target & Value & Value(a) \\
24 & Target & Equal & Equal(a,b) \\
25 & Target & Relation & Relation(RightTriangle(ABC)) \\ \hline \end{tabular}
\end{table}
Table 4: Predicates built into the solver.

\begin{table}
\begin{tabular}{c c c} \hline id & type & examples \\ \hline
26 & Entity & RightTriangle(ABC) \\
27 & Entity & IsoscelesTriangle(ABC) \\
28 & Entity & IsoscelesRightTriangle(ABC) \\
29 & Entity & EquilateralTriangle(ABC) \\
30 & Entity & Kite(ABCD) \\
31 & Entity & Parallelogram(ABCD) \\
32 & Entity & Rhombus(ABCD) \\
33 & Entity & Rectangle(ABCD) \\
34 & Entity & Square(ABCD) \\
35 & Entity & Trapezoid(ABCD) \\
36 & Entity & IsoscelesTrapezoid(ABCD) \\
37 & Entity & RightTrapezoid(ABCD) \\ \hline \end{tabular}
\end{table}
Table 5: Entities defined using the predicate definition language.

\begin{table}
\begin{tabular}{l l c} \hline id & type & examples \\ \hline
38 & Relation & IsMidpointOfLine(M,AB) \\
39 & Relation & IsMidpointOfArc(M,OAB) \\
40 & Relation & ParallelBetweenLine(AB,CD) \\
41 & Relation & PerpendicularBetweenLine(AC,BC) \\
42 & Relation & IsPerpendicularBisectorOfLine(AB,CD) \\
43 & Relation & IsBisectorOfAngle(BD,ABC) \\
44 & Relation & IsMedianOfTriangle(AD,ABC) \\
45 & Relation & IsAltitudeOfTriangle(AD,ABC) \\
46 & Relation & IsMidsegmentOfTriangle(DE,ABC) \\
47 & Relation & IsCircumcenterOfTriangle(O,ABC) \\
48 & Relation & IsIncenterOfTriangle(O,ABC) \\
49 & Relation & IsCentroidOfTriangle(O,ABC) \\
50 & Relation & IsOrthocenterOfTriangle(O,ABC) \\
51 & Relation & CongruentBetweenTriangle(ABC,DEF) \\
52 & Relation & MirrorCongruentBetweenTriangle(ABC,DEF) \\
53 & Relation & SimilarBetweenTriangle(ABC,DEF) \\
54 & Relation & MirrorSimilarBetweenTriangle(ABC,DEF) \\
55 & Relation & IsAltitudeOfQuadrilateral(EF,ABCD) \\
56 & Relation & IsMidsegmentOfQuadrilateral(G,ABCD) \\
57 & Relation & IsCircumcenterOfQuadrilateral(O,ABCD) \\
58 & Relation & IsIncenterOfQuadrilateral(O,ABCD) \\
59 & Relation & CongruentBetweenQuadrilateral(ABCD,EFGH) \\
60 & Relation & MirrorCongruentBetweenQuadrilateral(ABCD,EFGH) \\
61 & Relation & SimilarBetweenQuadrilateral(ABCD,EFGH) \\
62 & Relation & MirrorSimilarBetweenQuadrilateral(ABCD,EFGH) \\
63 & Relation & CongruentBetweenArc(OAB,OCD) \\
64 & Relation & SimilarBetweenArc(OAB,OCD) \\
65 & Relation & IsDiameterOfCircle(AB,O) \\
66 & Relation & IsTangentOfCircle(PA,O) \\
67 & Relation & IsCentreOfCircle(P,O) \\
68 & Relation & ConcyclicBetweenPoints(A,B,C,D) \\ \hline \end{tabular}
\end{table}
Table 6: Relations defined using the predicate definition language.

\begin{table}
\begin{tabular}{l l c} \hline id & type & examples \\ \hline
69 & Attribution & LengthOfLine(AB) \\
70 & Attribution & MeasureOfAngle(ABC) \\
71 & Attribution & PerimeterOfTriangle(ABC) \\
72 & Attribution & AreaOfTriangle(ABC) \\
73 & Attribution & HeightOfTriangle(ABC) \\
74 & Attribution & RatioOfSimilarTriangle(ABC) \\
75 & Attribution & RatioOfMirrorSimilarTriangle(ABC) \\
76 & Attribution & PerimeterOfQuadrilateral(ABCD) \\
77 & Attribution & AreaOfQuadrilateral(ABCD) \\
78 & Attribution & HeightOfQuadrilateral(ABCD) \\
79 & Attribution & RatioOfSimilarQuadrilateral(ABCD) \\
80 & Attribution & RatioOfMirrorSimilarQuadrilateral(ABCD) \\
81 & Attribution & LengthOfArc(OAB) \\
82 & Attribution & MeasureOfArc(OAB) \\
83 & Attribution & RatioOfSimilarArc(OAB) \\
84 & Attribution & RadiusOfCircle(O) \\
85 & Attribution & DiameterOfCircle(O) \\
86 & Attribution & PerimeterOfCircle(O) \\
87 & Attribution & AreaOfCircle(O) \\
88 & Attribution & PerimeterOfSector(OAB) \\
89 & Attribution & AreaOfSector(OAB) \\ \hline \end{tabular}
\end{table}
Table 7: Attributions defined using the predicate definition language.

Figure 3: Solution hypergraph generated by symbolic solver FGPS [38] (2022 IMO Problem 4).

\begin{table}
\begin{tabular}{c c l} \hline name & item & content \\ \hline midpoint\_of\_line & premise & \begin{tabular}{l} Collinear(AMB)\& \\ Equal(LengthOfLine(AM),LengthOfLine(MB)) \\ IsMdipointOfLine(M,AB) \\ \end{tabular} \\ \hline vertical\_angle & premise & 
\begin{tabular}{l} Collinear(AOB)\&Collinear(COD)\& \\ Angle(AOC)\&Angle(BOD) \\ Equal(MeasureOfAngle(AOC),MeasureOfAngle(BOD)) \\ \end{tabular} \\ \hline \end{tabular}
\end{table}
Table 8: Detailed statement examples for defining a theorem.

Figure 2: An example of annotated geometry problem (2022 IMO Problem 4).

### Human-like Solution

From the conditions of the problem, we have \(\angle\) ABT= \(\angle\)TEA (1), BC-DE (2), TB-TD (3), TC-TE (4);

By the theorem of adjacent supplementary angles, \(\angle\) ETD= \(\angle\)STE+180(5);

Given conditions (2)(3)(4), by the triangle congruence theorem (SSS), we have triangles TBC and TDE are congruent (6);

Given conditions (6), by the property of congruent triangles (equal angles), we have \(\angle\)CTB= \(\angle\)ETD (7);

By the theorem of adjacent supplementary angles, we have \(\angle\)BTQ= \(\angle\)CTB+180 (8);

Given conditions (5)(1)(7)(8), by the similarity theorems for triangles (AA), we have triangles QBT and STE are mirror-image similar triangles(9);

Given conditions (9), by the the property of similar triangles, TB-TE-Ratio(\(\triangle\)QBT, \(\triangle\)STE) (10);

Given conditions (9), by the the property of similar triangles, ST-Ratio(\(\triangle\)QBT, \(\triangle\)STE)=TQ (11);

Given conditions (3)(4)(10)(11), by the cyclic quadrilateral criterion (converse of the intersecting chords theorem), S, C, D, and Q are concyclic (12);

Given conditions (12), by the property of cyclic quadrilaterals (equal inscribed angles subtended by the same arc), we have \(\angle\)QCD= \(\angle\)QSD (13);

Given conditions (9), by the property of similar triangles (equal angles), we have \(\angle\)EST= \(\angle\)TQB (14);

By the triangle property (sum of interior angles equals 180deg), we have \(\angle\)PCQ= \(\angle\)QPC- \(\angle\)TQB+180 (15);

By the theorem of adjacent supplementary angles, we have \(\angle\)PCQ= \(\angle\)QCD+180 (16);

By the common sense, \(\angle\)EST= \(\angle\)QSA+ \(\angle\)QSD (17);

Given conditions ((13)(14)(15)(16)(17), by the cyclic quadrilateral criterion (based on angle relationships), P, R, Q, and S are concyclic (18);

Proof completed.

## Appendix C Statistics details

We collect information on the text length distribution, theorem length distribution, and predicate frequency in the formaldehyde7k dataset.

Figure 4: Human-like Solution (2022 IMO Problem 4).

Figure 5: Problem Text Length Distribution.

Figure 6: Construction CDL Length Distribution.

Figure 7: Image CDL Length Distribution.

Figure 8: Text CDL Length Distribution.

Figure 9: Text CDL Predicate Count.

## Appendix D Dataset download and Usage

You can use pip to download and use our formaldehyde7k dataset.

 $ conda create -n <your_env_name> python=3.10  $ conda activate <your_env_name>  $ pip install formalgeo

 >>> from formalgeo.data import download_dataset, DatasetLoader  >>> from formalgeo.solver import Interactor  >>> from formalgeo.parse import parse_theorem_seqs

 >>> download_dataset(dataset_name="formalgeo7k_v2",  datasets_path="your_datasets_path")  >>> dl = DatasetLoader(dataset_name="formalgeo7k_v2",  datasets_path="your_datasets_path")

 >>> solver = Interactor(dl.predicate_GDL, dl.theorem_GDL)  >>> problem_CDL = dl.get_problem(pid=1)  >>> solver.load_problem(problem_CDL)  >>> for t_name, t_branch, t_para in parse_theorem_seqs(problem_CDL["theorem_seqs"]):  solver.apply_theorem(t_name, t_branch, t_para)  >>> solver.problem.check_goal()

 >>> from formalgeo.tools import show_solution  >>> show_solution(solver.problem)

Figure 10: Theorem Length Distribution.