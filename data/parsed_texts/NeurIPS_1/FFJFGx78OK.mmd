# Consistency Diffusion Bridge Models

Guande He\({}^{\dagger 1}\), Kaiwen Zheng\({}^{\dagger 1}\), Jianfei Chen\({}^{1}\), Fan Bao\({}^{12}\), Jun Zhu\({}^{\ddagger 123}\)

\({}^{1}\)Dept. of Comp. Sci. & Tech., Institute for AI, BNRist Center, THBI Lab

\({}^{1}\)Tsinghua-Bosch Joint ML Center, Tsinghua University, Beijing, China

\({}^{2}\)Shengshu Technology, Beijing \({}^{3}\)Pazhou Lab (Huangpu), Guangzhou, China

guande.he17@outlook.com; zkwthu@gmail.com;

fan.bao@shengshu.ai; {jianfeic, dcszj}@tsinghua.edu.cn

Work done during an internship at Shengshu; \({}^{\dagger}\)Equal contribution; \({}^{\ddagger}\)The corresponding author.

###### Abstract

Diffusion models (DMs) have become the dominant paradigm of generative modeling in a variety of domains by learning stochastic processes from noise to data. Recently, diffusion denoising bridge models (DDBMs), a new formulation of generative modeling that builds stochastic processes between fixed data endpoints based on a reference diffusion process, have achieved empirical success across tasks with coupled data distribution, such as image-to-image translation. However, DDBM's sampling process typically requires hundreds of network evaluations to achieve decent performance, which may impede their practical deployment due to high computational demands. In this work, inspired by the recent advance of consistency models in DMs, we tackle this problem by learning the consistency function of the probability-flow ordinary differential equation (PF-ODE) of DDBMs, which directly predicts the solution at a starting step given any point on the ODE trajectory. Based on a dedicated general-form ODE solver, we propose two paradigms: consistency bridge distillation and consistency bridge training, which is flexible to apply on DDBMs with broad design choices. Experimental results show that our proposed method could sample \(4\times\) to \(50\times\) faster than the base DDBM and produce better visual quality given the same step in various tasks with pixel resolution ranging from \(64\times 64\) to \(256\times 256\), as well as supporting downstream tasks such as semantic interpolation in the data space.

## 1 Introduction

Diffusion models (DMs) [53, 21, 60] have reached unprecedented levels as a family of generative models in various areas, including image generation [10, 50, 48], audio synthesis [5, 45], video generation [20], as well as image editing [41, 42], solving inverse problems [25, 56], and density estimation [59, 28, 37, 71]. In the era of AI-generated content, the stable training, scalability & state-of-the-art generation performance of DMs successfully make them serve as the fundamental component of large-scale, high-performance text-to-image [14] and text-to-video [18, 2] models.

A critical characteristic of diffusion models is their iterative sampling procedure, which progressively drives random noise into the data space. Although this paradigm yields a sample quality that stands out from other generation models, such as VAEs [29, 46], GANs [17], and Normalizing Flows [11, 12, 30], it also results in a notoriously lower sampling efficiency compared to other arts. In response to this, consistency models [58] have emerged as an attractive family of generative models by learning a consistency function that directly predicts the solution of a probability-flow ordinary differential equation (PF-ODE) at a certain starting timestep given any points in the ODE trajectory, designed to be a one-step generator that directly maps noise to data. Consistency models can benaturally integrated with diffusion models by adapting the score estimator of DMs to a consistency function of their PF-ODE via distillation [58, 26] or fine-tuning [15], showing promising performance for few-step generation in various applications like latent space [40] and video [64].

Despite the remarkable achievements in generation quality and better sampling efficiency, a fundamental limitation of diffusion models is that their prior distribution is usually restricted to a non-informative Gaussian noise, due to the nature of their underlying data to noise stochastic process. This characteristic may not always be desirable when adopting diffusion models in some scenarios with an informative non-Gaussian prior, such as image-to-image translation. Alternatively, an emergent family of generative models focuses on leveraging diffusion bridges, a series of altered diffusion processes conditioned on given endpoints, to model transport between two arbitrary distributions [44, 36, 33, 54, 51, 72, 7]. Among them, denoising diffusion bridge models (DDBMs) [72] study the reverse-time diffusion bridge conditioned on the terminal endpoint, and employ simulation-free, non-iterative training techniques for it, showing superior performance in application with coupled data pairs such as distribution translation compared to diffusion models. However, DDBMs generally require hundreds of network evaluations to produce samples with decent quality, even using an advanced high-order hybrid sampler, potentially hindering their deployments in real-world applications.

In this work, inspired by recent advances in consistency models with diffusion ODEs [58, 57, 15], we introduce consistency diffusion bridge models (CDBMs) and develop systematical techniques to learn the consistency function of the PF-ODEs in DDBMs for improved sampling efficiency. Firstly, to facilitate flexible integration of consistency models in DDBMs, we present a unified perspective on their design spaces, including noise schedule, prediction target, and network parameterizations, termed the same as in diffusion models [28, 24]. Additionally, we derive a first-order ODE solver based on the general-form noise schedule. This universal framework largely decouples the formulation of DDBMs and the corresponding consistency models from highly practical design spaces, allowing us to reuse the successful empirical choices of various diffusion bridges for CDBMs regardless of their different theoretical premises. On top of this, we then propose two paradigms for training CDBMs: consistency bridge distillation and consistency bridge training. This approach is free of dependence on a restricted form of noise schedule and the corresponding Euler ODE solver as in previous work [58], thus enhancing the practical versatility and extensibility of the CDBM framework.

We verify the effectiveness of CDBMs in two applications: image translation and image inpainting by distilling or fine-tuning DDBMs with various design spaces. Experimental results demonstrate that our approach can improve the sampling speed of DDBMs from \(4\times\) to \(50\times\), in terms of the Frechet inception distance [19] (FID) evaluated with two-step generation. Meanwhile, given the same computational budget, CDBMs have better performance trade-offs compared to DDBMs, both quantitatively and qualitatively. CDBMs also retain the desirable properties of generative modeling, such as sample diversity and the ability to perform semantic interpolation in the data space.

Figure 1: Illustration of consistency models (CMs) on PF-ODEs of diffusion models and our proposed consistency diffusion bridge models (CDBMs) building on PF-ODEs of diffusion bridges. Different from diffusion models, the PF-ODE of diffusion bridge is only well defined in \(t<T\) due to the singularity induced by the fixed terminal endpoint. To this end, a valid input for CDBMs is some \(\mathbf{x}_{t}\) for \(t<T\), which is typically obtained by one-step posterior sampling with a coarse estimation of \(\mathbf{x}_{0}\) with an initial network evaluation.

## 2 Preliminaries

### Diffusion Models

Given the data distribution \(p_{\mathrm{data}}(\mathbf{x}),\mathbf{x}\in\mathbb{R}^{m}\), diffusion models [53; 21; 60] specify a forward-time diffusion process from an initial data distribution \(p_{0}=p_{\mathrm{data}}\) to a terminal distribution \(p_{T}\) within a finite time horizon \(t\in[0,T]\), defined by a stochastic differential equation (SDE):

\[\mathrm{d}\mathbf{x}_{t}=\mathbf{f}(\mathbf{x}_{t},t)\mathrm{d}t+g(t)\mathrm{d}\mathbf{w}_{t}, \quad\mathbf{x}_{0}\sim p_{0}, \tag{1}\]

where \(\mathbf{w}_{t}\) is a standard Wiener process, \(\mathbf{f}:\mathbb{R}^{m}\times[0,T]\to\mathbb{R}^{m}\) and \(g:[0,T]\to\mathbb{R}^{d}\) are drift and diffusion coefficients, respectively. The terminal distribution \(p_{T}\) is usually designed to approximate a tractable prior \(p_{\mathrm{prior}}\) (e.g., standard Gaussian) with the appropriate choice of \(\mathbf{f}\) and \(g\). The corresponding reverse SDE and the probability flow ordinary differential equation (PF-ODE) of the forward SDE in Eqn. (1) is given by [1; 60]:

\[\mathrm{d}\mathbf{x}_{t}=[\mathbf{f}(\mathbf{x}_{t},t)-g^{2}(t)\nabla\log p_{t}(\mathbf{x}_{t} )]\mathrm{d}t+g(t)\mathrm{d}\bar{\mathbf{w}}_{t},\quad\mathbf{x}_{T}\sim p_{T}\approx p _{\mathrm{prior}}, \tag{2}\]

\[\mathrm{d}\mathbf{x}_{t}=\left[\mathbf{f}(\mathbf{x}_{t},t)-\frac{1}{2}g^{2}(t)\nabla\log p _{t}(\mathbf{x}_{t})\right]\mathrm{d}t,\quad\mathbf{x}_{T}\sim p_{T}\approx p_{\mathrm{ prior}}, \tag{3}\]

where \(\bar{\mathbf{w}}_{t}\) is a reverse-time standard Wiener process and \(p_{t}(\mathbf{x}_{t})\) is the marginal distribution of \(\mathbf{x}_{t}\). Both the reverse SDE and PF-ODE can act as a generative model by sampling \(\mathbf{x}_{T}\sim p_{\mathrm{prior}}\) and simulating the trajectory from \(\mathbf{x}_{T}\) to \(\mathbf{x}_{0}\). The major difficulty here is that the score function \(\nabla\log p_{t}(\mathbf{x}_{t})\) remains unknown, which can be approximated by a neural network \(s_{\mathbf{\theta}}(\mathbf{x}_{t},t)\) with _denoising score matching_[63]:

\[\mathbb{E}_{t\in\mathcal{U}(0,T)}\mathbb{E}_{p_{0}(\mathbf{x}_{0})p_{t|0}(\mathbf{x}_{ t}|\mathbf{x}_{0})}\left[\lambda(t)\|\mathbf{s_{\mathbf{\theta}}(\mathbf{x}_{t},t)}-\nabla\log p _{t|0}(\mathbf{x}_{t}|\mathbf{x}_{0})\|_{2}^{2}\right], \tag{4}\]

where \(\mathcal{U}(0,T)\) is uniform distribution, \(\lambda(t)>0\) is a weighting function, and \(p_{t|0}(\mathbf{x}_{t}|\mathbf{x}_{0})\) is the transition kernel from \(\mathbf{x}_{0}\) to \(\mathbf{x}_{t}\). A common practice is to use a linear drift \(f(t)\mathbf{x}_{t}\) such that \(p_{t|0}(\mathbf{x}_{t}|\mathbf{x}_{0})\) is an analytic Gaussian distribution \(\mathcal{N}(\alpha_{t}\mathbf{x}_{0},\sigma_{t}^{2}\mathbf{I})\), where \(\alpha_{t}=e^{\int_{0}^{t}t\cdot(\tau)\mathrm{d}\tau},\sigma_{t}^{2}=\alpha_{t }^{2}\int_{0}^{t}\frac{g^{2}(\tau)}{\alpha_{t}^{2}}\mathrm{d}\tau\) is defined as the _noise schedule_[28]. The resulting score predictor \(\mathbf{s_{\mathbf{\theta}}}(\mathbf{x}_{t},t)\) can replace the true score function in Eqn. (2) and (3) to obtain the empirical diffusion SDE and ODE, which can be simulated by various SDE or ODE solvers [55; 38; 39; 16; 70].

### Consistency Models

Given a trajectory \(\{\mathbf{x}_{t}\}_{t=\epsilon}^{T}\) with a fixed starting timestep \(\epsilon\) of a PF-ODE, consistency models [58] aim to learn the solution of the PF-ODE at \(t=\epsilon\), also known as the _consistency function_, defined as \(\mathbf{h}:(\mathbf{x}_{t},t)\mapsto\mathbf{x}_{\epsilon}\). The optimization process for consistency models contains the online network \(\mathbf{h_{\mathbf{\theta}}}\) and a reference target network \(\mathbf{h_{\mathbf{\theta}^{-}}}\), where \(\mathbf{\theta}^{-}\) refers to \(\mathbf{\theta}\) with operation \(\mathrm{stopgrad}\), i.e., \(\mathbf{\theta}^{-}=\mathrm{stopgrad}(\mathbf{\theta})\). The networks are hand-designed to satisfy the boundary condition \(\mathbf{h_{\mathbf{\theta}}}(\mathbf{x}_{\epsilon},\epsilon)=\mathbf{x}_{\epsilon}\), which can be typically achieved with proper parameterization on the neural network. For PF-ODE taking the form in Eqn. (3) with a linear drift \(f(t)\mathbf{x}_{t}\), the overall learning objective of consistency models can be described as:

\[\mathbb{E}_{t\in\mathcal{U}(\epsilon,T),r=r(t)}\mathbb{E}_{p_{0}(\mathbf{x}_{0})p_ {t|0}(\mathbf{x}_{t}|\mathbf{x}_{0})}\left[\lambda(t)d\left(\mathbf{h_{\mathbf{\theta}}}(\bm {x}_{t},t),\mathbf{h_{\mathbf{\theta}^{-}}}(\hat{\mathbf{x}}_{r},r)\right)\right], \tag{5}\]

where \(r(t)\) is a function that specifies another timestep \(r\) (usually with \(t>r\)), \(d\) denotes some metric function with \(\forall\mathbf{x},\mathbf{y}:d(\mathbf{x},\mathbf{y})\geq 0\) and \(d(\mathbf{x},\mathbf{y})=0\) iff. \(\mathbf{x}=\mathbf{y}\). Here \(\hat{\mathbf{x}}_{r}\) is a function that estimates \(\mathbf{x}_{r}=\mathbf{x}_{t}+\int_{t}^{\tau}\frac{\mathrm{d}\mathbf{x}_{r}}{\mathrm{d} \tau}\mathrm{d}\tau\), which can be done by simulating the empirical diffusion ODE with a pre-trained score predictor \(\mathbf{s_{\mathbf{\theta}}}(\mathbf{x}_{t},t)\) or empirical score estimator \(-\frac{\mathbf{x}_{t}-\alpha_{t}\mathbf{x}_{0}}{\sigma_{t}^{2}}\). The corresponding learning paradigms are named _consistency distillation_ and _consistency training_, respectively.

### Denoising Diffusion Bridge Models

Given a data pair sampled from an arbitrary unknown joint distribution \((\mathbf{x},\mathbf{y})\sim q_{\mathrm{data}}(\mathbf{x},\mathbf{y}),\mathbf{x},\mathbf{y}\in\mathbb{R}^{m}\) and let \(\mathbf{x}_{0}=\mathbf{x}\), _denoising diffusion bridge models_ (DDBMs) [72] specify a stochastic processthat ensures \(\mathbf{x}_{T}=\mathbf{y}\) almost surly via applying _Doob's h-transform_[13; 47] on a reference diffusion process in Eqn. (1):

\[\mathrm{d}\mathbf{x}_{t}=\left[\mathbf{f}(\mathbf{x}_{t},t)+g^{2}(t)\nabla_{\mathbf{x}_{t}}\log p _{T|t}(\mathbf{x}_{T}=\mathbf{y}|\mathbf{x}_{t})\right]\mathrm{d}t+g(t)\mathrm{d}\mathbf{w}_{t},\;\;(\mathbf{x}_{0},\mathbf{x}_{T})=(\mathbf{x},\mathbf{y})\sim q_{\mathrm{data}}, \tag{6}\]

where \(p_{T|t}(\mathbf{x}_{T}=\mathbf{y}|\mathbf{x}_{t})\) is the transition kernel of the reference diffusion process from \(t\) to \(T\), evaluated at \(\mathbf{x}_{T}=\mathbf{y}\). Denoting the marginal distribution of Eqn. (6) as \(\{q_{t}\}_{t=0}^{T}\), it can be shown that the forward bridge SDE in Eqn. (6) is characterized by the diffusion distribution conditioned on both endpoints, that is, \(q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0},\mathbf{x}_{T})=p_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0},\mathbf{ x}_{T})\), which is an analytic Gaussian distribution. A generative model can be obtained by modeling \(q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})\), whose reverse SDE and PF-ODE are given by:

\[\mathrm{d}\mathbf{x}_{t}=\left[\mathbf{f}(\mathbf{x}_{t},t)-g^{2}(t)\left(\nabla_{\mathbf{x}_ {t}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})-\nabla_{\mathbf{x}_{t}}\log p_{T|t} (\mathbf{x}_{T}=\mathbf{y}|\mathbf{x}_{t})\right)\right]\mathrm{d}t+g(t)\mathrm{d}\bar{ \mathbf{w}}_{t}, \tag{7}\]

\[\mathrm{d}\mathbf{x}_{t}=\left[\mathbf{f}(\mathbf{x}_{t},t)-g^{2}(t)\left[\frac{1}{2} \nabla_{\mathbf{x}_{t}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})-\nabla_{\mathbf{x}_{t }}\log p_{T|t}(\mathbf{x}_{T}=\mathbf{y}|\mathbf{x}_{t})\right]\right]\mathrm{d}t. \tag{8}\]

The only unknown term remains is the score function \(\nabla_{\mathbf{x}_{t}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})\), which can be estimated with a neural network \(\mathbf{s}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y})\) via _denoising bridge score matching_ (DBSM):

\[\mathbb{E}_{t\in\mathcal{U}(0,T)}\mathbb{E}_{q_{\mathrm{data}}(\mathbf{x},\mathbf{y})q _{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0}=\mathbf{x},\mathbf{x}_{T}=\mathbf{y})}\left[\lambda(t)\|\mathbf{ s}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y})-\nabla\log q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0}= \mathbf{x},\mathbf{x}_{T}=\mathbf{y})\|_{2}^{2}\right]. \tag{9}\]

Replacing \(\nabla_{\mathbf{x}_{t}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})\) in Eqn. (7) and (8) with the learned score predictor \(\mathbf{s}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y})\) would yield the empirical bridge SDE and ODE that could be solved for generation purposes.

## 3 Consistency Diffusion Bridge Models

In this section, we introduce consistency diffusion bridge models, extending the techniques of consistency models to DDBMs to further boost their performance and sample efficiency. Define the consistency function of the bridge ODE in Eqn. (8) as \(\mathbf{h}:(\mathbf{x}_{t},t,\mathbf{y})\mapsto\mathbf{x}_{e}\) with a given starting timestep \(\epsilon\), our goal is to learn the consistency function using a neural network \(\mathbf{h}_{\mathbf{\theta}}(\cdot,\cdot,\mathbf{y})\) with the following high-level objective similar to Eqn. (5):

\[\mathbb{E}_{t\in\mathcal{U}(\epsilon,T),r=r(t)}\mathbb{E}_{q_{\mathrm{data}}( \mathbf{x},\mathbf{y})q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0}=\mathbf{x},\mathbf{x}_{T}=\mathbf{y})}\left[ \lambda(t)d\left(\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y}),\mathbf{h}_{\mathbf{\theta} -}(\hat{\mathbf{x}}_{r},r,\mathbf{y})\right)\right]. \tag{10}\]

To begin with, we first present a unified view of the design spaces such as noise schedule, network parameterization & precondition, as well as a general ODE solver for DDBMs. This allows us to: (1) decouple the successful practical designs of previous diffusion bridges from their different theoretical premises; (2) decouple the framework of consistency models from certain design choices of the corresponding PF-ODE, such as the reliance on VE schedule with Euler ODE solver of the original derivation of consistency models [58]. This would largely facilitate the development of consistency models that utilize the rich design spaces of existing diffusion bridges on DDBMs in a universal way. Then, we elaborate on two ways to train \(\mathbf{h}_{\mathbf{\theta}}\) based on different choices of \(\hat{\mathbf{x}}_{r}\), consistency bridge distillation, and consistency bridge training, with the proposed unified design spaces.

### A Unified View on Design Spaces of DDBMs

Noise ScheduleWe consider the linear drift \(f(t)\mathbf{x}_{t}\) and define:

\[\alpha_{t}=e^{\int_{0}^{t}f(\tau)\mathrm{d}\tau},\quad\bar{\alpha}_{t}=e^{- \int_{t}^{T}f(\tau)\mathrm{d}\tau},\quad\rho_{t}^{2}=\int_{0}^{t}\frac{g^{2}( \tau)}{\alpha_{\tau}^{2}}\mathrm{d}\tau,\quad\bar{\rho}_{t}^{2}=\int_{t}^{T} \frac{g^{2}(\tau)}{\alpha_{\tau}^{2}}\mathrm{d}\tau, \tag{11}\]

which aligns with the common notation of noise schedules used in diffusion models by denoting \(\sigma_{t}=\alpha_{t}\rho_{t}\). Then we could express the analytic conditional distributions of DDBMs as follows:

\[q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0},\mathbf{x}_{T})=p_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0},\bm {x}_{T})=\mathcal{N}\left(a_{t}\mathbf{x}_{T}+b_{t}\mathbf{x}_{0},c_{t}^{2}\mathbf{I} \right), \tag{12}\]

\[\text{where}\quad a_{t}=\frac{\bar{\alpha}_{t}\rho_{t}^{2}}{\rho_{T}^{2}},\quad b _{t}=\frac{\alpha_{t}\bar{\rho}_{t}^{2}}{\rho_{T}^{2}},\quad c_{t}^{2}=\frac{ \alpha_{t}^{2}\bar{\rho}_{t}^{2}\rho_{t}^{2}}{\rho_{T}^{2}}.\]

The form of \(q_{t|0T}\) is consistent with the original formulation of DDBM in [72]. Here, inspired by [6], we opt to adopt a more neat set of notations for enhanced compatibility. As shown in Table 1, with such notations, we could easily unify the design choices for diffusion bridges [33; 72; 6] that have shown effectiveness in various tasks and expeditiously employ consistency models on top of them.

Network Parameterization & PreconditionIn practice, the neural network \(\mathbf{F_{\theta}}\) in DBMs does not always directly regress to the target score function; instead, it can predict other equivalent quantities, such as the _data predictor_\(\mathbf{x_{\theta}}=\frac{\mathbf{x}_{t}-a_{t}\mathbf{x}_{T}+c_{t}^{2}\mathbf{x_{\theta}}}{b_{ t}}\) for a Gaussian \(\mathcal{N}(a_{t}\mathbf{x}_{T}+b_{t}\mathbf{x}_{0},c_{t}^{2}\mathbf{I})\) like \(q_{t}|_{0T}\). Meanwhile, the inputs and outputs of the network \(\mathbf{F_{\theta}}\) could be rescaled for a better-behaved optimization process, known as the network precondition. As shown in Table 1, we could consistently use \(\mathbf{x}_{0}\) as the prediction target with different choices of network precondition to unify the previous practical designs for DBMs.

PF-ODE and ODE SolverThe validity of a consistency model relies on an underlying PF-ODE that shares the same marginal distribution with the forward process. In the original DDBM paper [72], the marginal preserving property of the proposed ODE is justified following an analogous logic from the derivation of the PF-ODE of diffusion models [60] with Kolmogorov forward equation. However, its validity suffers from doubts as there is a singularity at the deterministic starting point \(\mathbf{x}_{T}\). Here, we provide a simple example to show that the ODE can indeed maintain the marginal distribution as long as we use a valid stochastic step to skip the singular point and start from \(T-\gamma\) for any \(\gamma>0\).

**Example 3.1**.: _Assume \(T=1\) and consider a simple Brownian Bridge between two fixed points \((x_{0},x_{1})\):_

\[\mathrm{d}x_{t}=\frac{x_{1}-x_{t}}{1-t}\mathrm{d}t+\mathrm{d}w_{t}, \tag{13}\]

_with marginal distribution \(q_{t|01}(x_{t}|x_{0},x_{1})=\mathcal{N}((1-t)x_{0}+tx_{1},t(1-t))\). The ground-truth reverse SDE and PF-ODE are given by:_

\[\mathrm{d}x_{t}=\frac{x_{t}-x_{0}}{t}\mathrm{d}t+\mathrm{d}\bar{w }_{t}, \tag{14}\] \[\mathrm{d}x_{t}=\left(\frac{1-2t}{2t(1-t)}x_{t}+\frac{1}{2(1-t)}x_ {1}-\frac{1}{2t}x_{0}\right)\mathrm{d}t. \tag{15}\]

_Then first simulating the reverse SDE in Eqn. (14) from \(t=1\) to \(t=1-\gamma\) for some \(\gamma\in(0,1)\) and then starting to simulate the PF-ODE in Eqn. (15) will preserve the marginal distribution._

The detailed derivation can be found in Appendix. B.2. Therefore, the time horizon of the consistency model based on the bridge ODE needs to be set as \(t\in[\epsilon,T-\gamma]\) for some pre-specified \(\epsilon,\gamma>0\). Additionally, the marginal preservation of the bridge ODE for more general diffusion bridges can be strictly justified by considering non-Markovian variants, as done in DBIM [69].

Another crucial element for developing consistency models is the ODE solver, as a solver with a lower local error would yield lower error for consistency distillation, as well as the corresponding

\begin{table}
\begin{tabular}{l c c c c c} \hline \hline  & **Brownian Bridge** & **I2SB**[33] & **DDBM**[72] & \multicolumn{2}{c}{**Bridge-TTS**[6]} \\  & _default_ & _default_\({}^{\dagger}\) & _VP_\({}^{\ddagger}\) & _VE_ & _gmax_ & _VP_ \\ \hline
**Schedule** & & & & & & \\ \(T\) & 1 & 1 & 1 & T & 1 & 1 \\ \(J(t)\) & 0 & 0 & \(-\frac{1}{2}\beta_{0}\) & 0 & 0 & \(-\frac{1}{2}\beta_{0}-\frac{1}{2}\beta_{d}\) \\ \(g^{2}(t)\) & \(\sigma^{2}\) & \((n_{1}-\eta_{0}|2t-1|)^{2}\) & \(\beta_{0}\) & \(2t\) & \(\beta_{0}+\beta_{d}t\) & \(\beta_{0}+\beta_{d}t\) \\ \(\alpha_{t}\) & 1 & 1 & \(e^{-\frac{1}{2}\beta_{0}t}\) & 1 & 1 & \(e^{-\frac{1}{2}\beta_{0}t-\frac{1}{2}\beta_{d}t^{2}}\) \\ \(\sigma_{t}^{2}\) & \(\sigma^{2}t\) & \(\int_{0}^{t}g^{2}(\tau)\mathrm{d}\tau\) & \(1-e^{-\frac{1}{2}\beta_{0}t}\) & \(t^{2}\) & \(\beta_{0}t+\frac{1}{2}\beta_{d}t^{2}\) & \(1-e^{-\frac{1}{2}\beta_{d}t-\frac{1}{2}\beta_{d}t^{2}}\) \\ \(\dot{\alpha}_{t}\) & 1 & \(e^{\frac{1}{2}\beta_{0}t}\) & \(1\) & 1 & 1 & \(\alpha_{t}/\alpha_{t}\) \\ \(\rho_{t}^{2}\) & \(\sigma^{2}t\) & \(\int_{0}^{t}g^{2}(\tau)\mathrm{d}\tau\) & \(e^{\frac{1}{2}\beta_{0}t}-1\) & \(t^{2}\) & \(\beta_{0}t+\frac{1}{2}\beta_{d}t^{2}\) & \(e^{\frac{1}{2}\beta_{0}t+\frac{1}{2}\beta_{d}t^{2}}-1\) \\ \(\dot{\rho}_{t}^{2}\) & \(\sigma^{2}(1-t)\) & \(\rho_{t}^{2}-\rho_{t}^{2}\) & \(e^{\frac{1}{2}\beta_{0}}-e^{\frac{1}{2}\beta_{0}t}\) & \(T^{2}-t^{2}\) & \(\rho_{t}^{2}-\rho_{t}^{2}\) & \(\rho_{t}^{2}-\rho_{t}^{2}\) \\ \hline
**Parameters** & \(\sigma\) & \(\eta_{0}=\frac{\sqrt{\beta_{0}}-\sqrt{\beta_{0}}}{\eta_{1}}\) & \(\beta_{0}\) & \(T=80\) & \(\beta_{0}=0.01\) & \(\beta_{0}=0.01\) \\  & & \(\eta_{1}=\frac{\sqrt{\beta_{0}}+\sqrt{\beta_{0}}}{\eta_{1}}\) & \(\beta_{0}=0.1\) & & \(\beta_{d}=49.99\) & \(\beta_{d}=19.99\) \\  & & \(\beta_{1}=0.3/1.0\) & & & & \\ \hline
**Parameterization by Network \(\mathbf{F_{\theta}}\)** & & & & & \\ Data Predictor \(\mathbf{x_{\theta}}\) & Dependent on Training & \(\mathbf{x}_{t}-\sigma_{t}\mathbf{F_{\theta}}\) & \(c_{\text{skip}}(t)\mathbf{x}_{t}+c_{\text{out}}(t)\mathbf{F_{\theta}}\) & \(\mathbf{F_{\theta}}\) \\ \hline \hline \end{tabular} \({}^{\dagger}\) Though I2SB is built on a discrete-time schedule for \(T=1000\) timesteps, it can be converted to a continuous-time schedule on \(t\in[0,1]\) approximately by mapping \(t\) to \(t/(T-1)\).

\({}^{\ddagger}\) The authors change to the same VP schedule as Bridge-TTS with parameters \(\beta_{0}=0.1,\beta_{d}=2\) in a revised version of their paper.

\end{table}
Table 1: Specifications of design spaces in different diffusion bridges. The details of network parameterization are in Appendix B.4 due to space limit.

consistency training objectives [58; 57]. Inspired by the successful practice of advanced ODE solvers based on the Exponential Integrator (EI) [4; 22] in diffusion models, we present a first-order bridge ODE solver in a similar fashion:

**Proposition 3.1**.: _Given an initial value \(\mathbf{x}_{t}\) at time \(t>0\), the first-order solver of the bridge ODE in Eqn. (8) from \(t\) to \(r\in[0,t]\) with the noise schedule defined in Eqn. (11) is:_

\[\mathbf{x}_{r}=\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{t}\rho_{t}\bar{\rho} _{t}}\mathbf{x}_{t}+\frac{\alpha_{r}}{\rho_{T}^{2}}\left[\left(\bar{\rho}_{r}^{2}- \frac{\bar{\rho}_{t}\rho_{r}\bar{\rho}_{r}}{\rho_{t}}\right)\mathbf{x}_{\mathbf{\theta} }(\mathbf{x}_{t},t,\mathbf{y})+\left(\rho_{r}^{2}-\frac{\rho_{t}\rho_{r}\bar{\rho}_{r}} {\bar{\rho}_{t}}\right)\frac{\mathbf{y}}{\alpha_{T}}\right]. \tag{16}\]

We provide detailed derivation in the Appendix B.1. Typically, an EI-based solver enjoys a lower discretization error and therefore has better empirical performance [16; 38; 39; 67; 70]. Another notable advantage of this general form solver, as we will show in Section 3.3, is that it could naturally establish the connection between consistency training and consistency distillation for any noise schedules that take the form in Eqn. (11), eliminating the dependence of the VE schedule and the corresponding Euler ODE solver in the common derivation [58].

### Consistency Bridge Distillation

Analogous to consistency distillation with the empirical diffusion ODE, we could leverage a pre-trained score predictor \(\mathbf{s}_{\mathbf{\phi}}(\mathbf{x}_{t},t,\mathbf{y})\approx\nabla_{\mathbf{x}_{t}}\log q_{t|T}( \mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})\) to solve the empirical bridge ODE to obtain \(\hat{\mathbf{x}}_{r}\), i.e., \(\hat{\mathbf{x}}_{r}=\hat{\mathbf{x}}_{\mathbf{\phi}}(\mathbf{x}_{t},t,r,\mathbf{y})\), where \(\hat{\mathbf{x}}_{\mathbf{\phi}}\) is the update function of a one-step ODE solver with fixed \(\mathbf{s}_{\mathbf{\phi}}\). We define the _consistency bridge distillation_ (CBD) loss as:

\[\mathcal{L}_{\mathrm{CBD}}^{\Delta t_{\mathrm{max}}}:= \tag{17}\] \[\mathbb{E}_{t\in\mathcal{U}(\epsilon,T-\gamma),r=r(t)}\mathbb{E}_{ q_{\mathrm{data}}(\mathbf{x},\mathbf{y})q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0}=\mathbf{x},\mathbf{x}_{T}= \mathbf{y})}\left[\lambda(t)d\left(\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y}),\mathbf{h }_{\mathbf{\theta}^{-}}(\hat{\mathbf{x}}_{\mathbf{\phi}}(\mathbf{x}_{t},t,r,\mathbf{y}),r,\mathbf{y}) \right)\right],\]

where \(t\) is sampled from the uniform distribution over \([\epsilon,T-\gamma]\), \(r(t)\) is a function specifies another timestep \(r\) such that \(\epsilon\leq r<t\) with \(\Delta t_{\mathrm{max}}:=\max_{t}\{t-r(t)\}\) and \(\Delta t_{\mathrm{min}}:=\min_{t}\{t-r(t)\}\), \(\lambda(t)\) is a positive weighting function, \(d\) is some distance metric function with \(\forall\mathbf{x},\mathbf{y}:d(\mathbf{x},\mathbf{y})\geq 0\) and \(d(\mathbf{x},\mathbf{y})=0\) iff. \(\mathbf{x}=\mathbf{y}\), and \(\mathbf{\theta}^{-}=\mathrm{stopgrad}(\mathbf{\theta})\). Similarly to the case of consistency distillation in empirical diffusion ODEs, we have the following asymptotic analysis of the CBD objective:

**Proposition 3.2**.: _Given \(\Delta t_{\mathrm{max}}=\max_{t}\{t-r(t)\}\) and let \(\mathbf{h}_{\mathbf{\phi}}(\cdot,\cdot,\cdot)\) be the consistency function of the empirical bridge ODE taking the form in Eqn. (8). Assume \(\mathbf{h}_{\mathbf{\theta}}\) is a Lipschitz function, i.e., there exists \(L>0\), such that for all \(t\in[\epsilon,T-\gamma],\mathbf{x}_{1},\mathbf{x}_{2},\mathbf{y}\), we have \(\|\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{1},t,\mathbf{y})-\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{2},t, \mathbf{y})\|_{2}\leq L\|\mathbf{x}_{1}-\mathbf{x}_{2}\|_{2}\). Meanwhile, assume that for all \(t,r\in[\epsilon,T-\gamma],\mathbf{y}\sim q_{\mathrm{data}}(\mathbf{y}):=\mathbb{E}_{ \mathbf{x}}[q_{\mathrm{data}}(\mathbf{x},\mathbf{y})]\), the ODE solver \(\hat{\mathbf{x}}_{\mathbf{\phi}}(\cdot,t,\mathbf{r},\mathbf{y})\) has local error uniformly bounded by \(O((t-r)^{p+1})\) with \(p\geq 1\). Then, if \(\mathcal{L}_{\mathrm{CBD}}^{\Delta t_{\mathrm{max}}}=0\), we have: \(\sup_{t,\mathbf{x},\mathbf{y}}\|\mathbf{h}_{\mathbf{\theta}}(\mathbf{x},t,\mathbf{y})-\mathbf{h}_{\mathbf{ \phi}}(\mathbf{x},t,\mathbf{y})\|_{2}=O((\Delta t_{\mathrm{max}})^{p})\)._

The vast majority of the analysis can be done by directly following the proof in [58] with minor differences between the overlapped timestep intervals \(\{t,r(t)\}\) for \(t\in[\epsilon,T-\gamma]\) used in Eqn. (17) and the fixed timestep intervals \(\{t_{n}\}_{n=1}^{N}\) used in [58]. We include it in Appendix B.5 for completeness. In this work, unless otherwise stated, we use the first-order ODE solver in Eqn. (16) as \(\hat{\mathbf{x}}_{\mathbf{\phi}}\).

### Consistency Bridge Training

In addition to distilling from pre-trained score predictor \(\mathbf{s}_{\mathbf{\phi}}\), consistency models can be trained [58; 57] or fine-tuned [15] by maintaining only one set of parameters \(\mathbf{\theta}\). To accomplish this, we could leverage the unbiased score estimator:

\[\nabla_{\mathbf{x}_{t}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})= \mathbb{E}_{\mathbf{x}_{0}}[\nabla_{\mathbf{x}_{t}}\log q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0},\mathbf{x}_{T})|\mathbf{x}_{t},\mathbf{x}_{T}=\mathbf{y}], \tag{18}\]

that is, with a single sample \((\mathbf{x},\mathbf{y})\sim q_{\mathrm{data}}\) and \(\mathbf{x}_{t}\sim q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0}=\mathbf{x},\mathbf{x}_{T}=\mathbf{y})\), the score \(\nabla_{\mathbf{x}_{t}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})\) can be estimated with \(\nabla_{\mathbf{x}_{t}}\log q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0},\mathbf{x}_{T})\). Substituting such an estimation of \(\mathbf{s}_{\mathbf{\phi}}\) into the one-step ODE solver \(\hat{\mathbf{x}}_{\mathbf{\phi}}\) in Eqn. (17) with the transformation between data and score predictor \(\mathbf{x}_{\mathbf{\phi}}=\frac{\mathbf{x}_{t}-a_{t}\mathbf{x}_{T}+c_{t}^{2}\mathbf{s}_{\mathbf{\phi}}}{ b_{t}}\), we can obtain an alternative \(\hat{\mathbf{x}}_{r}\) that does not rely on the pre-trained \(\mathbf{s}_{\mathbf{\phi}}\) for any noise schedule taking the form in Eqn. (11) as follows (detail in Appendix B.3):

\[\hat{\mathbf{x}}_{r}=\hat{\mathbf{x}}(\mathbf{x}_{t},t,r,\mathbf{x},\mathbf{y})=a_{r} \mathbf{y}+b_{r}\mathbf{x}+c_{r}\mathbf{z}, \tag{19}\]where \(a_{r},b_{r},c_{r}\) are defined as in Eqn. (11), and \(\mathbf{z}=\frac{\mathbf{x}_{\epsilon}-a_{\epsilon}\mathbf{y}-b_{\epsilon}\mathbf{x}}{c_{\epsilon}}\sim \mathcal{N}(\mathbf{0},\mathbf{I})\). Based on this instantiation of \(\hat{\mathbf{x}}_{r}\), we define the _consistency bridge training_ (CBT) loss as:

\[\mathcal{L}_{\mathrm{CBT}}^{\Delta t_{\mathrm{max}}}:= \tag{20}\] \[\mathbb{E}_{t\in\mathcal{U}(\mathbf{\epsilon},T-\gamma),\nu=r(t)} \mathbb{E}_{q_{\mathrm{data}}(\mathbf{x},\mathbf{y})}\left[\lambda(t)d\left(\mathbf{h}_{ \mathbf{\theta}}(a_{t}\mathbf{y}+b_{t}\mathbf{x}+c_{t}\mathbf{z},t,\mathbf{y}),\mathbf{h}_{\mathbf{\theta} -}(a_{r}\mathbf{y}+b_{r}\mathbf{x}+c_{r}\mathbf{z},r,\mathbf{y})\right)\right],\]

where \(t,r(\cdot),\lambda(\cdot),\mathbf{\theta}^{-1}\) are defined the same as in Eqn. (17), and \(\mathbf{z}\sim\mathcal{N}(\mathbf{0},\mathbf{I})\) is a shared Gaussian noise used in both \(\mathbf{h}_{\mathbf{\theta}}\) and \(\mathbf{h}_{\mathbf{\theta}^{-1}}\). We have the following proposition demonstrating the connection between \(\mathcal{L}_{\mathrm{CBT}}^{\Delta t_{\mathrm{max}}}\) and \(\mathcal{L}_{\mathrm{CBD}}^{\Delta t_{\mathrm{max}}}\) with the first-order one-step ODE solver:

**Proposition 3.3**.: _Given \(\Delta t_{\mathrm{max}}=\max_{t}\{t-r(t)\}\) and assume \(d,\mathbf{h}_{\mathbf{\theta}},f,g\) are twice continuously differentiable with bounded second derivatives, the weighting function \(\lambda(\cdot)\) is bounded, and \(\mathbb{E}[\|\nabla_{\mathbf{x}_{\epsilon}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T})\|_ {2}^{2}]<\infty\). Meanwhile, assume that \(\mathcal{L}_{\mathrm{CBD}}^{\Delta t_{\mathrm{max}}}\) employs the one-step ODE solver in Eqn. (16) with ground truth pre-trained score model, i.e., \(\forall t\in[\epsilon,T-\gamma],\mathbf{y}\sim q_{\mathrm{data}}(\mathbf{y}):\mathbf{s}_{ \mathbf{\phi}}(\mathbf{x}_{t},t,\mathbf{y})\equiv\nabla_{\mathbf{x}_{\epsilon}}\log q_{t|T}( \mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})\). Then, we have: \(\mathcal{L}_{\mathrm{CBD}}^{\Delta t_{\mathrm{max}}}=\mathcal{L}_{\mathrm{CBT }}^{\Delta t_{\mathrm{max}}}+o(\Delta t_{\mathrm{max}})\)._

The core part of our analysis also follows [58], except the connection between the CBD & CBT objective relies on the proposed first-order ODE solver and the estimated \(\hat{\mathbf{x}}_{r}\) in Eqn. (19) with the general noise schedule for DDBM. We include the details in Appendix B.6.

### Network Precondition and Sampling

Network PreconditionFirst, we focus on enforcing the boundary condition \(\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{\epsilon},\epsilon,\mathbf{y})=\mathbf{x}_{\epsilon}\) of our consistency bridge model, which can be done by designing a proper network precondition. Usually, a variable substitution \(\tilde{t}=t-\epsilon\) could work in most cases. For example, for the precondition for I\({}^{2}\)SB in Table 1, we have \(\mathbf{x}_{\epsilon}+\sigma_{\tilde{\epsilon}}\mathbf{F}_{\mathbf{\theta}}=\mathbf{x}_{ \epsilon}+\sqrt{\int_{0}^{\epsilon-\epsilon}g^{2}(\tau)\mathrm{d}\tau}=\mathbf{x} _{\epsilon}\). Also, the common "EDM" [24] style precondition used in DDBM also satisfies \(c_{\text{skip}}(\tilde{\epsilon})=1\) and \(c_{\text{out}}(\tilde{\epsilon})=0\). We also give a universal precondition to satisfy the boundary conditions based on the form of the ODE solver in Eqn. (16) in Appendix B.4 to cope with the case where the variable substitution is not applicable.

SamplingAs explained in Section 3.1, the PF-ODE is only well-defined within the time horizon \(0\leq t\leq T-\gamma\) for some \(\gamma\in(0,T)\). Hence, the sampling of CDBMs should start with \(\mathbf{x}_{T-\gamma}\sim q_{T-\gamma|T}(\mathbf{x}_{T-\gamma}|\mathbf{x}_{T}=\mathbf{y})\), which can be obtained by simulating the reverse SDE in Eqn. (7) from \(T\) to \(T-\gamma\). Here we opt to use one first-order stochastic step, which is equivalent to performing posterior sampling, i.e., \(\mathbf{x}_{T-\gamma}\sim q_{T-\gamma|0T}(\mathbf{x}_{T-\gamma}|\mathbf{x}_{0}=\mathbf{h}_{\bm {\theta}}(\mathbf{x}_{T},T,\mathbf{y}),\mathbf{x}_{T}=\mathbf{y})\). This sampling approach defaults to two NFEs (Number of Function Evaluations), which is aligned with the practical guideline that employing two-step sampling in CM allows for a better trade-off between quality and computation compared to other treatments such as scaling up models [15]. We could also alternate a forward noising step and a backward consistency step multiple times to further improve sample quality as consistency models do.

## 4 Experiments

### Experimental Setup

Task, Datasets, and MetricsIn this work, we conduct experiments for CDBM on image-to-image translation and image inpainting tasks with various image resolutions and scales of the data set. For image-to-image translation, we use the Edges\(\rightarrow\)Handbags [23] with \(64\times 64\) pixel resolution and DIODE-Outdoor [62] with \(256\times 256\) pixel resolution. For image inpainting, we choose ImageNet [9]\(256\times 256\) with a center mask of size \(128\times 128\). Regarding the evaluation metrics, we report the Frechet inception distance (FID) [19] for all datasets. Furthermore, following previous works [33; 72], we measure Inception Scores (IS) [3], LPIPS [68] and Mean Square Error (MSE) for image-to-image translation and Classifier Accuracy (CA) of a pre-trained ResNet50 for image-inpainting. The metrics are computed using the complete training set for Edges\(\rightarrow\)Handbags and DIODE-Outdoor, and a validation subset of 10,000 images for ImageNet.

Training ConfigurationsWe train CDBM in two ways: distill pre-trained DDBM with CBD or _fine-tuning_ DDBM with CBT. We keep the noise schedule and prediction target of the pre-trained DDBMunchanged and modify the network precondition to satisfy the boundary condition. Specifically, we adopt the design space of DDBM-VP and I\({}^{2}\)SB in Table 1 on image-to-image translation and image inpainting, respectively. We specify complete training details in Appendix C.

**Specification of Design Choices** We illustrate the specific design choices for CDBM. In this work, we use \(t\in[\epsilon,1-\gamma]\) and set \(\epsilon=0.0001,\gamma=0.001\) and sample \(t\) uniformly during training. We employ two different sets of the timestep function \(r(t)\) and the loss weighting \(\lambda(t)\), also named the _training schedule_ for CDBM. The first, following [58], specifies a constant quantity for \(\Delta t=t-r(t)\) with a simple loss weighting of \(\lambda(t)=1\). The constant gap \(\Delta t\) is treated as a hyperparameter and we search it among \(\{1/9,1/18,1/36,1/60,1/80,1/120\}\). The other employs \(r(t)\) that gradually shrinks \(t-r(t)\) during the training process and a loss weighting of \(\lambda(t)=\frac{1}{t-r(t)}\), which enjoys a better trade-off between faster convergence and performance [58; 57; 15]. Following [15], we use a sigmoid-style function \(r(t)=t(1-\frac{1}{q^{\lfloor\mathrm{iters}/\pi\rfloor}})(1+\frac{k}{1+\epsilon ^{\mathrm{gt}}})\), where \(\mathrm{iters}\) is the number of training iterations, \(q,s,k,b\) are hyperparameters. We use \(q=2,k=8\), and tune \(b\in\{1,2,5,10,20,50\}\) and \(s\in\{5000,10000\}\).

reference for the sampling acceleration ratio (Reduction factor of NFE to achieve the same FID) of CDBM. Following [72, 33], we report the result of other baselines with \(\text{NFE}\geq 40\), which consists of diffusion-based methods, diffusion bridges with different formulations, or samplers. We mainly focus on the two-step generation scenario for CDBM, which is the minimal NFEs required for CDBM using the sampling procedure described in Section 3.4.

For image-to-image translation, as shown in Table. 2, we first observed that our proposed first-order ODE solver has superior performance compared to the hybrid high-order sampler used in DDBM [72]. On top of that, CDBM's FID at \(\text{NFE}=2\) is close to or even better than DDBM's at NFE around \(100\) with the advanced ODE solver, achieving a sampling speed-up around \(50\times\). This can be corroborated by the qualitative demonstration in Fig. 4, where CDBMs drastically reduce the blurring effect on DDBMs under few-step generation settings while enjoying realistic and faithful translation performance.

For image inpainting, as shown in Table. 3, the baseline ODE solver for DDBM achieves decent sample quality at \(\text{NFE}=10\). For CDBM, as shown in Fig. 2, the acceleration ratio is relatively modest in such a large-scale and challenging dataset, achieving close to a \(4\times\) increase in sampling speed. Notably, CBT's FID at \(\text{NFE}=4\) matches DDBM at \(\text{NFE}=10\). Moreover, we find that CDBMs have better visual quality than DDBM given the same computation budget, as shown in Fig. 4 and Appendix D, which illustrates that CDBM yields a better quality-efficiency trade-off.

Meanwhile, we observe that fine-tuning DDBMs with CBT generally produces better results than CBD in all three data sets, demonstrating fine-tuning a pre-trained score model to a consistency function is a more promising solution with less computational and memory cost compared to distillation, which is consistent with recent findings [15]. We also conducted an ablation study for CBD and CBT under different training schedules (i.e., the combination of the timestep function \(r(t)\) and the loss weighting \(\lambda(t)\)) on ImageNet \(256\times 256\). As shown in Fig. 3, for a small timestep interval \(t-r(t)\), e.g., a small \(\Delta t\) in Fig. 3a or a large \(b\) in Fig. 3b (detail in Appendix C.2), the performance is generally better but also suffers from training instability, indicated by the sharp increase in FID during training when \(\Delta t=1/120\) and \(b=50\). While for a large timestep interval, the performance at convergence is usually worse. In practice, we found that adopting the training schedule that gradually shrinks \(r(t)-t\) with \(b=20\) or \(50\) with CBT could work across all tasks, whereas CBD generally needs a meticulous design for \(\Delta t\) or \(b\) to ensure stable training and satisfactory performance.

### Semantic Interpolation

We show that CDBMs support performing downstream tasks, such as semantic interpolation, similar to diffusion models [55]. Recall that the sampling process for CDBM alternates between consistency

Figure 4: Qualitative demonstration between DDBM and CDBM.

Figure 5: Example semantic interpolation result with CDBMs

function evaluation and forward sampling, we could track all noises and the corresponding timesteps to re-generate the same sample. By interpolating the noises of two sampling trajectories, we can obtain a series of samples lying between the semantics of two source samples, as shown in Fig. 5, which demonstrates that CDBMs have a wide range of generative modeling capabilities, such as sample diversity and semantic interpolation.

## 5 Conclusion

In this work, we introduce consistency diffusion bridge models (CDBMs) to address the sampling inefficiency of DDBMs and present two frameworks, consistency bridge distillation and consistency bridge training, to learn the consistency function of the DDBM's PF-ODE. Building on a unified view of design spaces and the corresponding general-form ODE solver, CDBM exhibits significant flexibility and adaptability, allowing for straightforward integration with previously established successful designs for diffusion bridges. Experimental evaluations across three datasets show that CDBM can effectively boost the sampling speed of DDBM by \(4\times\) to \(50\times\). Furthermore, it achieves the saturated performance of DDBMs with less than five NFEs and possesses the broad capacity of generative models, such as sample diversity and semantic interpolation.

Limitations and Broader ImpactWhile significantly improving the sampling efficiency in the datasets we used, it remains to be explored how the proposed CDBM, along with the DDBM formulation, performs in datasets with larger-scale or more complex characteristics. Furthermore, the consistency model paradigm typically suffers from numerical instability and it would be a promising research direction to keep improving CDBM's performance from an optimization perspective. With enhanced sampling efficiency, CDBMs could contribute to more energy-efficient deployment of generative models, aligning with broader goals of sustainable AI development. However, it could also lower the cost associated with the potential misuse for creating deceptive content. We hope that our work will be enforced with certain ethical guidelines to prevent any form of harm.

## Acknowledgments and Disclosure of Funding

This work was supported by the National Science and Technology Major Project (2021ZD0110502), NSFC Projects (Nos. 62350080, 62106122, 92248303, 92370124, 62350080, 62276149, U2341228, 62076147), Tsinghua Institute for Guo Qiang, and the High Performance Computing Center, Tsinghua University. J. Zhu was also supported by the XPlorer Prize.

## References

* [1] Brian DO Anderson. Reverse-time diffusion equation models. _Stochastic Processes and their Applications_, 12(3):313-326, 1982.
* [2] Fan Bao, Chendong Xiang, Gang Yue, Guande He, Hongzhou Zhu, Kaiwen Zheng, Min Zhao, Shilong Liu, Yaole Wang, and Jun Zhu. Vidu: a highly consistent, dynamic and skilled text-to-video generator with diffusion models. _arXiv preprint arXiv:2405.04233_, 2024.
* [3] Shane Barratt and Rishi Sharma. A note on the inception score. _arXiv preprint arXiv:1801.01973_, 2018.
* [4] Mari Paz Calvo and Cesar Palencia. A class of explicit multistep exponential integrators for semilinear problems. _Numerische Mathematik_, 102:367-381, 2006.
* [5] Nanxin Chen, Yu Zhang, Heiga Zen, Ron J. Weiss, Mohammad Norouzi, and William Chan. Wavegrad: Estimating gradients for waveform generation. In _International Conference on Learning Representations_, 2021.
* [6] Zehua Chen, Guande He, Kaiwen Zheng, Xu Tan, and Jun Zhu. Schrodinger bridges beat diffusion models on text-to-speech synthesis. _arXiv preprint arXiv:2312.03491_, 2023.
* [7] Valentin De Bortoli, Guan-Horng Liu, Tianrong Chen, Evangelos A Theodorou, and Weilie Nie. Augmented bridge matching. _arXiv preprint arXiv:2311.06978_, 2023.

* [8] Valentin De Bortoli, James Thornton, Jeremy Heng, and Arnaud Doucet. Diffusion schrodinger bridge with applications to score-based generative modeling. _Advances in Neural Information Processing Systems_, 34:17695-17709, 2021.
* [9] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. ImageNet: A large-scale hierarchical image database. In _2009 IEEE Conference on Computer Vision and Pattern Recognition_, pages 248-255. IEEE, 2009.
* [10] Prafulla Dhariwal and Alexander Quinn Nichol. Diffusion models beat GANs on image synthesis. In _Advances in Neural Information Processing Systems_, volume 34, pages 8780-8794, 2021.
* [11] Laurent Dinh, David Krueger, and Yoshua Bengio. Nice: Non-linear independent components estimation. _arXiv preprint arXiv:1410.8516_, 2014.
* [12] Laurent Dinh, Jascha Sohl-Dickstein, and Samy Bengio. Density estimation using real nvp. In _International Conference on Learning Representations_, 2016.
* [13] Joseph L Doob and JI Doob. _Classical potential theory and its probabilistic counterpart_, volume 262. Springer, 1984.
* [14] Patrick Esser, Sumith Kulal, Andreas Blattmann, Rahim Entezari, Jonas Muller, Harry Saini, Yam Levi, Dominik Lorenz, Axel Sauer, Frederic Boesel, et al. Scaling rectified flow transformers for high-resolution image synthesis. _arXiv preprint arXiv:2403.03206_, 2024.
* [15] Zhengyang Geng, Ashwini Pokle, William Luo, Justin Lin, and J Zico Kolter. Consistency models made easy. _arXiv preprint arXiv:2406.14548_, 2024.
* [16] Martin Gonzalez, Nelson Fernandez, Thuy Tran, Elies Gherbi, Hatem Hajri, and Nader Masmoudi. Seeds: Exponential sde solvers for fast high-quality sampling from diffusion models. _arXiv preprint arXiv:2305.14267_, 2023.
* [17] Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron C. Courville, and Yoshua Bengio. Generative adversarial nets. In _Advances in Neural Information Processing Systems_, volume 27, pages 2672-2680, 2014.
* [18] Agrim Gupta, Lijun Yu, Kihyuk Sohn, Xiuye Gu, Meera Hahn, Li Fei-Fei, Irfan Essa, Lu Jiang, and Jose Lezama. Photorealistic video generation with diffusion models. _arXiv preprint arXiv:2312.06662_, 2023.
* [19] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochreiter. GANs trained by a two time-scale update rule converge to a local Nash equilibrium. In Isabelle Guyon, Ulrike von Luxburg, Samy Bengio, Hanna M. Wallach, Rob Fergus, S. V. N. Vishwanathan, and Roman Garnett, editors, _Advances in Neural Information Processing Systems_, volume 30, pages 6626-6637, 2017.
* [20] Jonathan Ho, William Chan, Chitwan Saharia, Jay Whang, Ruiqi Gao, Alexey Gritsenko, Diederik P Kingma, Ben Poole, Mohammad Norouzi, David J Fleet, et al. Imagen video: High definition video generation with diffusion models. _arXiv preprint arXiv:2210.02303_, 2022.
* [21] Jonathan Ho, Ajay Jain, and Pieter Abbeel. Denoising diffusion probabilistic models. In _Advances in Neural Information Processing Systems_, volume 33, pages 6840-6851, 2020.
* [22] Marlis Hochbruck, Alexander Ostermann, and Julia Schweitzer. Exponential rosenbrock-type methods. _SIAM Journal on Numerical Analysis_, 47(1):786-803, 2009.
* [23] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation with conditional adversarial networks. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 1125-1134, 2017.
* [24] Tero Karras, Miika Aittala, Timo Aila, and Samuli Laine. Elucidating the design space of diffusion-based generative models. In _Advances in Neural Information Processing Systems_, 2022.

* [25] Bahjat Kawar, Michael Elad, Stefano Ermon, and Jiaming Song. Denoising diffusion restoration models. In _Advances in Neural Information Processing Systems_, 2022.
* [26] Dongjun Kim, Chieh-Hsin Lai, Wei-Hsiang Liao, Naoki Murata, Yuhta Takida, Toshimitsu Uesaka, Yutong He, Yuki Mitsufuji, and Stefano Ermon. Consistency trajectory models: Learning probability flow ODE trajectory of diffusion. In _The Twelfth International Conference on Learning Representations_, 2024.
* [27] Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. _arXiv preprint arXiv:1412.6980_, 2014.
* [28] Diederik P Kingma, Tim Salimans, Ben Poole, and Jonathan Ho. Variational diffusion models. In _Advances in Neural Information Processing Systems_, 2021.
* [29] Diederik P. Kingma and Max Welling. Auto-encoding variational bayes. In _International Conference on Learning Representations_, 2014.
* [30] Durk P Kingma and Prafulla Dhariwal. Glow: Generative flow with invertible 1x1 convolutions. _Advances in neural information processing systems_, 31, 2018.
* [31] Liangchen Li and Jiajun He. Bidirectional consistency models. _arXiv preprint arXiv:2403.18035_, 2024.
* [32] Yaron Lipman, Ricky TQ Chen, Heli Ben-Hamu, Maximilian Nickel, and Matthew Le. Flow matching for generative modeling. In _The Eleventh International Conference on Learning Representations_, 2022.
* [33] Guan-Horng Liu, Arash Vahdat, De-An Huang, Evangelos Theodorou, Weili Nie, and Anima Anandkumar. l\({}^{2}\)sb: Image-to-image schrodinger bridge. In _International Conference on Machine Learning_, pages 22042-22062. PMLR, 2023.
* [34] Liyuan Liu, Haoming Jiang, Pengcheng He, Weizhu Chen, Xiaodong Liu, Jianfeng Gao, and Jiawei Han. On the variance of the adaptive learning rate and beyond. In _International Conference on Learning Representations_, 2019.
* [35] Xingchao Liu, Chengyue Gong, et al. Flow straight and fast: Learning to generate and transfer data with rectified flow. In _The Eleventh International Conference on Learning Representations_, 2022.
* [36] Xingchao Liu, Lemeng Wu, Mao Ye, and qiang liu. Learning diffusion bridges on constrained domains. In _The Eleventh International Conference on Learning Representations_, 2023.
* [37] Cheng Lu, Kaiwen Zheng, Fan Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu. Maximum likelihood training for score-based diffusion odes by high order denoising score matching. In _International Conference on Machine Learning_, pages 14429-14460. PMLR, 2022.
* [38] Cheng Lu, Yuhao Zhou, Fan Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu. Dpm-solver: A fast ode solver for diffusion probabilistic model sampling in around 10 steps. In _Advances in Neural Information Processing Systems_, 2022.
* [39] Cheng Lu, Yuhao Zhou, Fan Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu. Dpm-solver++: Fast solver for guided sampling of diffusion probabilistic models. _arXiv preprint arXiv:2211.01095_, 2022.
* [40] Simian Luo, Yiqin Tan, Longbo Huang, Jian Li, and Hang Zhao. Latent consistency models: Synthesizing high-resolution images with few-step inference. _arXiv preprint arXiv:2310.04378_, 2023.
* [41] Chenlin Meng, Yang Song, Jiaming Song, Jiajun Wu, Jun-Yan Zhu, and Stefano Ermon. SDEdit: Image synthesis and editing with stochastic differential equations. In _International Conference on Learning Representations_, 2022.

* [42] Alexander Quinn Nichol, Prafulla Dhariwal, Aditya Ramesh, Pranav Shyam, Pamela Mishkin, Bob Mcgrew, Ilya Sutskever, and Mark Chen. Glide: Towards photorealistic image generation and editing with text-guided diffusion models. In _International Conference on Machine Learning_, pages 16784-16804. PMLR, 2022.
* [43] Stefano Peluchetti. Diffusion bridge mixture transports, schrodinger bridge problems and generative modeling. _Journal of Machine Learning Research_, 24(374):1-51, 2023.
* [44] Stefano Peluchetti. Non-denoising forward-time diffusions. _arXiv preprint arXiv:2312.14589_, 2023.
* [45] Vadim Popov, Ivan Vovk, Vladimir Gogoryan, Tasnima Sadekova, Mikhail Kudinov, and Jiansheng Wei. Diffusion-based voice conversion with fast maximum likelihood sampling scheme. In _International Conference on Learning Representations_, 2022.
* [46] Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic backpropagation and approximate inference in deep generative models. In _International conference on machine learning_, pages 1278-1286. PMLR, 2014.
* [47] L Chris G Rogers and David Williams. _Diffusions, Markov processes and martingales: Volume 2, Ito calculus_, volume 2. Cambridge university press, 2000.
* [48] Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Bjorn Ommer. High-resolution image synthesis with latent diffusion models. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 10684-10695, 2022.
* [49] Chitwan Saharia, William Chan, Huiwen Chang, Chris Lee, Jonathan Ho, Tim Salimans, David Fleet, and Mohammad Norouzi. Palette: Image-to-image diffusion models. In _ACM SIGGRAPH 2022 Conference Proceedings_, pages 1-10, 2022.
* [50] Chitwan Saharia, William Chan, Saurabh Saxena, Lala Li, Jay Whang, Emily Denton, Seyed Kamyar Seyed Ghasemipour, Raphael Gontijo-Lopes, Burcu Karagol Ayan, Tim Salimans, et al. Photorealistic text-to-image diffusion models with deep language understanding. In _Advances in Neural Information Processing Systems_, 2022.
* [51] Yuyang Shi, Valentin De Bortoli, Andrew Campbell, and Arnaud Doucet. Diffusion schrodinger bridge matching. _Advances in Neural Information Processing Systems_, 36, 2024.
* [52] Yuyang Shi, Valentin De Bortoli, George Deligiannidis, and Arnaud Doucet. Conditional simulation using diffusion schrodinger bridges. In _Uncertainty in Artificial Intelligence_, pages 1792-1802. PMLR, 2022.
* [53] Jascha Sohl-Dickstein, Eric Weiss, Niru Maheswaranathan, and Surya Ganguli. Deep unsupervised learning using nonequilibrium thermodynamics. In _International Conference on Machine Learning_, pages 2256-2265. PMLR, 2015.
* [54] Vignesh Ram Somnath, Matteo Pariset, Ya-Ping Hsieh, Maria Rodriguez Martinez, Andreas Krause, and Charlotte Bunne. Aligned diffusion schrodinger bridges. In _Uncertainty in Artificial Intelligence_, pages 1985-1995. PMLR, 2023.
* [55] Jiaming Song, Chenlin Meng, and Stefano Ermon. Denoising diffusion implicit models. In _International Conference on Learning Representations_, 2021.
* [56] Jiaming Song, Arash Vahdat, Morteza Mardani, and Jan Kautz. Pseudoinverse-guided diffusion models for inverse problems. In _International Conference on Learning Representations_, 2023.
* [57] Yang Song and Prafulla Dhariwal. Improved techniques for training consistency models. In _The Twelfth International Conference on Learning Representations_, 2024.
* [58] Yang Song, Prafulla Dhariwal, Mark Chen, and Ilya Sutskever. Consistency models. In _International Conference on Machine Learning_, pages 32211-32252. PMLR, 2023.
* [59] Yang Song, Conor Durkan, Iain Murray, and Stefano Ermon. Maximum likelihood training of score-based diffusion models. In _Advances in Neural Information Processing Systems_, volume 34, pages 1415-1428, 2021.

* [60] Yang Song, Jascha Sohl-Dickstein, Diederik P. Kingma, Abhishek Kumar, Stefano Ermon, and Ben Poole. Score-based generative modeling through stochastic differential equations. In _International Conference on Learning Representations_, 2021.
* [61] Xuan Su, Jiaming Song, Chenlin Meng, and Stefano Ermon. Dual diffusion implicit bridges for image-to-image translation. _arXiv preprint arXiv:2203.08382_, 2022.
* [62] Igor Vasiljevic, Nick Kolkin, Shanyi Zhang, Ruotian Luo, Haochen Wang, Falcon Z Dai, Andrea F Daniele, Mohammadreza Mostajabi, Steven Basart, Matthew R Walter, et al. Diode: A dense indoor and outdoor depth dataset. _arXiv preprint arXiv:1908.00463_, 2019.
* [63] Pascal Vincent. A connection between score matching and denoising autoencoders. _Neural computation_, 23(7):1661-1674, 2011.
* [64] Xiang Wang, Shiwei Zhang, Han Zhang, Yu Liu, Yingya Zhang, Changxin Gao, and Nong Sang. Videolcm: Video latent consistency model. _arXiv preprint arXiv:2312.09109_, 2023.
* [65] Yinhuai Wang, Jiwen Yu, and Jian Zhang. Zero-shot image restoration using denoising diffusion null-space model. In _The Eleventh International Conference on Learning Representations_, 2023.
* [66] Yuji Wang, Zehua Chen, Xiaoyu Chen, Jun Zhu, and Jianfei Chen. Framebridge: Improving image-to-video generation with bridge models. _arXiv preprint arXiv:2410.15371_, 2024.
* [67] Qinsheng Zhang and Yongxin Chen. Fast sampling of diffusion models with exponential integrator. In _The Eleventh International Conference on Learning Representations_, 2023.
* [68] Richard Zhang, Phillip Isola, Alexei A Efros, Eli Shechtman, and Oliver Wang. The unreasonable effectiveness of deep features as a perceptual metric. In _Proceedings of the IEEE conference on computer vision and pattern recognition_, pages 586-595, 2018.
* [69] Kaiwen Zheng, Guande He, Jianfei Chen, Fan Bao, and Jun Zhu. Diffusion bridge implicit models. _arXiv preprint arXiv:2405.15885_, 2024.
* [70] Kaiwen Zheng, Cheng Lu, Jianfei Chen, and Jun Zhu. Dpm-solver-v3: Improved diffusion ode solver with empirical model statistics. In _Thirty-seventh Conference on Neural Information Processing Systems_, 2023.
* [71] Kaiwen Zheng, Cheng Lu, Jianfei Chen, and Jun Zhu. Improved techniques for maximum likelihood estimation for diffusion odes. In _International Conference on Machine Learning_, pages 42363-42389. PMLR, 2023.
* [72] Linqi Zhou, Aaron Lou, Samar Khanna, and Stefano Ermon. Denoising diffusion bridge models. _arXiv preprint arXiv:2309.16948_, 2023.

Related Works

Diffusion BridgesDiffusion bridges[44, 36, 33, 54, 51, 72, 7, 6] are an emerging class of generative models with attractive flexibility in modeling the stochastic process between two arbitrary distributions. The flow matching [32], and its stochastic counterpart, bridge matching [44] assume the access of a joint distribution and an interpolation, or a forward process, between the samples, then, another SDE/ODE is learned to estimate the dynamics of the pre-defined interpolation, which can be used for generative modeling from non-Gaussian priors [33, 6, 72, 69, 66]. In particular, the forward process can be constructed via Doob's \(h\)-transform [44, 36, 72]. Among them, DDBM [72] focuses on learning the reverse-time diffusion bridge conditioned on a particular terminal endpoint with denoising score matching, which has been shown to be equivalent to conducting a conditioned bridge matching that preserves the initial joint distribution [7]. Other works tackle solving the diffuion Schrodinger Bridge problem, such as using iterative algorithms [8, 51, 43]. In this work, we use a unified view of design spaces on existing diffusion bridges, in particular, bridge matching methods, to decouple empirical choices from their different theoretical premises and properties and focus on developing the techniques of learning the consistency function of DDBM's PF-ODE with various established design choices for diffusion bridges.

Consistency ModelsRecent studies have continued to explore the effectiveness of consistency models [58]. For example, CTM [26] proposes to augment the prediction target from the starting point to the intermediate points along the PF-ODE trajectory from the input to this starting point. BCM [31] additionally expands the model to allow direct mapping at the PF-ODE trajectory points in both forward and reverse time. Beyond different formulations, several works aim to improve the performance of consistency training with theoretical and practical insights. iCT [57] systematically examines the design choices of consistency training and presents improved training schedule, loss weighting, distance metrics, etc. ECT [15] further leverages the insights to propose novel practical designs and show fine-tuning pre-trained diffusion models for learning consistency models yields decent performance with much lower computation compared to distillation. Unlike these works, we focus on constructing consistency models on top of the formulation of DDBMs with specialized design spaces and a sophisticated ODE solver for them.

## Appendix B Additional Details for CDBM Formulation, CBD, and CBT

### Derivation of First-Order Bridge ODE Solver

We first review the first-order ODE solver in Section 3.1:

**Proposition 3.1**.: _Given an initial value \(\mathbf{x}_{t}\) at time \(t>0\), the first-order solver of the bridge ODE in Eqn. (8) from \(t\) to \(r\in[0,t]\) with the noise schedule defined in Eqn. (11) is:_

\[\mathbf{x}_{r}=\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{t}\mu_{t}\bar{\rho} _{t}}\mathbf{x}_{t}+\frac{\alpha_{r}}{\rho_{T}^{2}}\left[\left(\bar{\rho}_{r}^{2} -\frac{\bar{\rho}_{t}\rho_{r}\bar{\rho}_{r}}{\rho_{t}}\right)\mathbf{x}_{\mathbf{ \theta}}(\mathbf{x}_{t},t,\mathbf{y})+\left(\rho_{r}^{2}-\frac{\rho_{t}\rho_{r}\bar{ \rho}_{r}}{\bar{\rho}_{t}}\right)\frac{\mathbf{y}}{\alpha_{T}}\right]. \tag{16}\]

Recall the PF-ODE of DDBM in Eqn. (8) with a linear drift \(f(t)\mathbf{x}_{t}\):

\[\mathrm{d}\mathbf{x}_{t}=\left[f(t)\mathbf{x}_{t}-g^{2}(t)\left[\frac{1}{2}\nabla_{ \mathbf{x}_{t}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})-\nabla_{\mathbf{x}_{t}}\log p _{T|t}(\mathbf{x}_{T}=\mathbf{y}|\mathbf{x}_{t})\,\right]\right]\mathrm{d}t. \tag{21}\]

Also recall the noise schedule in Eqn. (11) and the analytic form of \(p_{t|0}\) and \(p_{T|t}\) in diffusion models:

\[p_{t|0}(\mathbf{x}_{t}|\mathbf{x}_{0})=\mathcal{N}\left(\alpha_{t}\mathbf{x}_{0},\alpha_{t }^{2}\rho_{t}^{2}\mathbf{I}\right),\quad p_{T|t}(\mathbf{x}_{T}|\mathbf{x}_{t})=\mathcal{N }\left(\frac{\alpha_{T}}{\alpha_{t}\mathbf{x}_{t}},\alpha_{T}^{2}(\rho_{T}^{2}- \rho_{t}^{2})\mathbf{I}\right),\]

\[q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0},\mathbf{x}_{T})=p_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0},\bm {x}_{T})=\mathcal{N}\left(a_{t}\mathbf{x}_{T}+b_{t}\mathbf{x}_{0},c_{t}^{2}\mathbf{I} \right), \tag{22}\]

\[\text{where}\quad a_{t}=\frac{\bar{\alpha}_{t}\rho_{t}^{2}}{\rho_{T}^{2}}, \quad b_{t}=\frac{\alpha_{t}\bar{\rho}_{t}^{2}}{\rho_{T}^{2}},\quad c_{t}^{2}= \frac{\alpha_{t}^{2}\bar{\rho}_{t}^{2}\rho_{t}^{2}}{\rho_{T}^{2}}.\]

We thus have the corresponding score functions and the score-data transformation for \(\mathbf{s}_{\mathbf{\theta}}\) that predicts \(\nabla_{\mathbf{x}_{t}}\log q_{t|0T}\):

\[\nabla_{\mathbf{x}_{t}}\log p_{T|t}(\mathbf{x}_{T}=\mathbf{y}|\mathbf{x}_{t})=-\frac{\mathbf{x}_{t }-\bar{\alpha}_{t}\mathbf{y}}{\alpha_{t}^{2}\bar{\rho}_{t}^{2}}, \tag{23}\]\[\nabla_{\mathbf{x}_{t}}\log q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0},\mathbf{x}_{T}=\mathbf{y}) =-\frac{\mathbf{x}_{t}-(\alpha_{t}\bar{\rho}_{t}^{2}\mathbf{x}_{0}+\bar{\alpha}_{t}\rho_{ t}^{2}\mathbf{x}_{T})/\rho_{T}^{2}}{\alpha_{t}^{2}\bar{\rho}_{t}^{2}\rho_{t}^{2}/\rho_{T }^{2}}, \tag{24}\] \[\mathbf{s_{\theta}}(\mathbf{x}_{t},t,\mathbf{y}) =-\frac{\mathbf{x}_{t}-(\alpha_{t}\bar{\rho}_{t}^{2}\mathbf{x}_{\mathbf{ \theta}}(\mathbf{x}_{t},t,\mathbf{y})+\bar{\alpha}_{t}\rho_{t}^{2}\mathbf{x}_{T})/\rho_{T} ^{2}}{\alpha_{t}^{2}\bar{\rho}_{t}^{2}\rho_{t}^{2}/\rho_{T}^{2}}. \tag{25}\]

We use the data parameterization \(\mathbf{x_{\theta}}(\mathbf{x}_{t},t,\mathbf{y})\) in following discussions. For PF-ODE in Eqn. (21), substituting \(\nabla_{\mathbf{x}_{t}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})\) with Eqn. (25) and substituting \(p_{T|t}(\mathbf{x}_{T}|\mathbf{x}_{t})\) in with Eqn. (23), we have the following after some simplification:

\[\mathrm{d}\mathbf{x}_{t}=\left[f(t)\mathbf{x}_{t}-\frac{1}{2}g^{2}(t)\frac{\mathbf{x}_{t}- \bar{\alpha}_{t}\mathbf{y}}{\alpha_{t}^{2}\bar{\rho}_{t}^{2}}+\frac{1}{2}g^{2}(t) \frac{\mathbf{x}_{t}-\alpha_{t}\mathbf{x_{\theta}}(\mathbf{x}_{t},t,\mathbf{y})}{\alpha_{t}^{2} \rho_{t}^{2}}\right]\mathrm{d}t. \tag{26}\]

which shares the same form as the ODE in Bridge-TTS [6]. In the next discussions, we present an overview of deriving the first-order ODE solver and refer the reader to Appendix A.2 in [6] for details.

We begin by reviewing exponential integrators [22, 4], a key technique for developing advanced diffusion ODE solvers [38, 39, 16, 70]. Consider the following ODE:

\[\mathrm{d}\mathbf{x}_{t}=[a(t)\mathbf{x}_{t}+b(t)\mathbf{F}_{\theta}(\mathbf{x}_{t},t)] \mathrm{d}t, \tag{27}\]

where \(\mathbf{F_{\theta}}\) is a \(n\)-th differentiable parameterized function. By leveraging the "variation-of-constant" formula, we could obtain a specific form of the solution of the ODE in Eqn. (27) (assume \(r<t\)):

\[\mathbf{x}_{r}=e^{\int_{t}^{r}a(\tau)\mathrm{d}\tau}\mathbf{x}_{t}+\int_{t}^{r}e^{ \int_{\tau}^{r}a(s)\mathrm{d}s}b(\tau)\mathbf{F}_{\theta}(\mathbf{x}_{\tau},\tau) \mathrm{d}\tau, \tag{28}\]

The integral in Eqn. (28) only involves the function \(\mathbf{F}_{\theta}\), which helps reduce discretization errors.

With such a key methodology, we could derive the first-order solver for Eqn. (26). First, collecting the coefficients for \(\mathbf{x}_{t},\mathbf{y},\mathbf{x_{\theta}}\), we have:

\[\mathrm{d}\mathbf{x}_{t}=\left[\left(f(t)-\frac{g^{2}(t)}{2\alpha_{t}^{2}\bar{\rho }_{t}^{2}}+\frac{g^{2}(t)}{2\alpha_{t}^{2}\rho_{t}^{2}}\right)\mathbf{x}_{t}+\frac {g^{2}(t)\bar{\alpha}_{t}}{2\alpha_{t}^{2}\bar{\rho}_{t}^{2}}\mathbf{y}-\frac{g^{2 }(t)}{2\alpha_{t}\rho_{t}^{2}}\mathbf{x_{\theta}}(\mathbf{x}_{t},t,\mathbf{y})\right] \mathrm{d}t. \tag{29}\]

By setting:

\[a(t)=\left(f(t)-\frac{g^{2}(t)}{2\alpha_{t}^{2}\bar{\rho}_{t}^{2}}+\frac{g^{2}( t)}{2\alpha_{t}^{2}\rho_{t}^{2}}\right),\quad b_{1}(t)=\frac{g^{2}(t)\bar{\alpha} _{t}}{2\alpha_{t}^{2}\bar{\rho}_{t}^{2}},\quad b_{2}(t)=\frac{g^{2}(t)}{2 \alpha_{t}\rho_{t}^{2}}.\]

with correspondence to Eqn. (28), the exponential terms could be analytically given by:

\[e^{\int_{t}^{r}a(\tau)\mathrm{d}\tau}=\frac{\alpha_{r}\sigma_{r}\bar{\sigma}_{ r}}{\alpha_{t}\sigma_{t}\bar{\sigma}_{t}},\quad e^{\int_{\tau}^{r}a(s)\mathrm{d}s} =\frac{\alpha_{r}\sigma_{r}\bar{\sigma}_{r}}{\alpha_{\tau}\sigma_{\tau}\bar{ \sigma}_{\tau}}. \tag{30}\]

The exact solution for Eqn. (29) is thus given by:

\[\mathbf{x}_{r}=\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{t}\rho_{\bar{\rho} _{t}}}\mathbf{x}_{t}+\frac{\bar{\alpha}_{r}\rho_{r}\bar{\rho}_{r}}{2}\int_{t}^{r} \frac{g^{2}(\tau)}{\alpha_{r}^{2}\rho_{r}\bar{\rho}_{r}^{3}}\mathbf{y}\mathrm{d} \tau-\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{2}\int_{t}^{r}\frac{g^{2}(\tau)}{ \alpha_{r}^{2}\rho_{r}^{3}\bar{\rho}_{r}}\mathbf{x_{\theta}}(\mathbf{x}_{\tau},\tau) \mathrm{d}\tau \tag{31}\]

The integrals in Eqn. (31) (without considering \(\mathbf{x_{\theta}}\)) can be calculated as:

\[\int_{t}^{r}\frac{g^{2}(\tau)}{\alpha_{r}^{2}\rho_{r}\bar{\rho}_{\tau}^{3}} \mathrm{d}\tau=\frac{2}{\rho_{T}^{2}}\left(\frac{\rho_{r}}{\bar{\rho}_{r}}- \frac{\rho_{t}}{\bar{\rho}_{t}}\right),\quad\int_{t}^{r}\frac{g^{2}(\tau)}{ \alpha_{\tau}^{2}\sigma_{\tau}^{3}\bar{\sigma}_{\tau}}\mathrm{d}\tau=\frac{2}{ \rho_{T}^{2}}\left(\frac{\bar{\rho}_{t}}{\rho_{t}}-\frac{\bar{\rho}_{r}}{\rho_{ r}}\right)\]

Then, with the first order approximation \(\mathbf{x_{\theta}}(\mathbf{x}_{\tau},\tau)\approx\mathbf{x_{\theta}}(\mathbf{x}_{s},s)\), we could obtain the first order solver in Eqn. (16).

### An Illustration Example of the Validity of the Bridge ODE

Recall the provided example in Section 3.1:

**Example 3.1**.: _Assume \(T=1\) and consider a simple Brownian Bridge between two fixed points \((x_{0},x_{1})\):_

\[\mathrm{d}x_{t}=\frac{x_{1}-x_{t}}{1-t}\mathrm{d}t+\mathrm{d}w_{t}, \tag{13}\]_with marginal distribution \(q_{t|01}(x_{t}|x_{0},x_{1})=\mathcal{N}((1-t)x_{0}+tx_{1},t(1-t))\). The ground-truth reverse SDE and PF-ODE are given by:_

\[\mathrm{d}x_{t}=\frac{x_{t}-x_{0}}{t}\mathrm{d}t+\mathrm{d}\bar{w }_{t}, \tag{14}\] \[\mathrm{d}x_{t}=\left(\frac{1-2t}{2t(1-t)}x_{t}+\frac{1}{2(1-t)}x _{1}-\frac{1}{2t}x_{0}\right)\mathrm{d}t. \tag{15}\]

_Then first simulating the reverse SDE in Eqn. (14) from \(t=1\) to \(t=1-\gamma\) for some \(\gamma\in(0,1)\) and then starting to simulate the PF-ODE in Eqn. (15) will preserve the marginal distribution._

Proof.: We first demonstrate the effect of the initial SDE step, according to Table 1 and the expression of the relevant score terms in Eqn. (23) and Eqn. (25), the ground-truth reverse SDE can be derived as:

\[\mathrm{d}x_{t}=\frac{x_{t}-x_{0}}{t}\mathrm{d}t+\mathrm{d}\bar{w }_{t}.\]

Then, the analytic solution of the reverse SDE in Eqn. (7) from time \(t\) to time \(s<t\) can be derived as:

\[\mathrm{d}x_{t}-\frac{1}{t}x_{t}\mathrm{d}t=-\frac{1}{t}x_{0}+ \mathrm{d}\bar{w}_{t}\] \[\iff \mathrm{d}\left(\frac{1}{t}x_{t}\right)=-\frac{1}{t^{2}}x_{0}+ \frac{1}{t}\mathrm{d}\bar{w}_{t}\] \[\iff \frac{1}{s}x_{s}-\frac{1}{t}x_{t}=\left(\frac{1}{s}-\frac{1}{t} \right)x_{0}+\sqrt{\frac{1}{s}-\frac{1}{t}}\epsilon,\quad\epsilon\sim\mathcal{N }(0,1).\]

Let \(t=1\), we have:

\[x_{s}=(1-s)x_{0}+sx_{1}+\sqrt{s(1-s)}\epsilon,\]

i.e., \(x_{s}\) has the same marginal as the forward process at time \(s\). Similarly, the ground-truth PF-ODE can be derived as:

\[\mathrm{d}x_{t}=\left(\frac{1-2t}{2t(1-t)}x_{t}+\frac{1}{2(1-t)}x_{1}-\frac{1} {2t}x_{0}\right)\mathrm{d}t,\]

whose analytic solution from time \(t\) to time \(s<t\) can be derived as:

\[\mathrm{d}x_{t}-\frac{1-2t}{2t(1-t)}x_{t}\mathrm{d}t=\frac{1}{2(1 -t)}x_{1}\mathrm{d}t-\frac{1}{2t}x_{0}\mathrm{d}t\] \[\iff \mathrm{d}\left(\frac{1}{\sqrt{t(1-t)}}x_{t}\right)=\frac{t}{2[t( 1-t)]^{3/2}}x_{1}\mathrm{d}t-\frac{1-t}{2[t(1-t)]^{3/2}}x_{0}\mathrm{d}t\] \[\iff \frac{1}{\sqrt{s(1-s)}}x_{s}-\frac{1}{\sqrt{t(1-t)}}x_{t}=\left( \frac{s}{\sqrt{s(1-s)}}-\frac{t}{\sqrt{t(1-t)}}\right)x_{1}+\left(\frac{1-s}{ \sqrt{s(1-s)}}-\frac{1-t}{\sqrt{t(1-t)}}\right)x_{0}\] \[\iff x_{s}=\frac{\sqrt{s(1-s)}}{\sqrt{t(1-t)}}x_{t}+\left(s-\frac{ \sqrt{s(1-s)}}{\sqrt{t(1-t)}}t\right)x_{1}+\left(1-s-\frac{\sqrt{s(1-s)}}{ \sqrt{t(1-t)}}(1-t)\right)x_{0}.\]

When \(x_{t}\sim\mathcal{N}((1-t)x_{0}+tx_{1},t(1-t))\), we have:

\[x_{s} =\frac{\sqrt{s(1-s)}}{\sqrt{t(1-t)}}\left((1-t)x_{0}+tx_{1}+\sqrt{ t(1-t)}\epsilon\right)+\left(s-\frac{\sqrt{s(1-s)}}{\sqrt{t(1-t)}}t\right)x_{1}\] \[\qquad+\left(1-s-\frac{\sqrt{s(1-s)}}{\sqrt{t(1-t)}}(1-t)\right)x _{0}\] \[=(1-s)x_{0}+sx_{1}+\sqrt{s(1-s)}\epsilon.\]

Hence, once the singularity is skipped by a stochastic step, following the PF-ODE reversely will preserve the marginals in this case.

### Derivation of the CBT Objective

Given \((\mathbf{x},\mathbf{y})\sim q_{\rm data}(\mathbf{x},\mathbf{y}),\mathbf{x}_{t}\sim q_{t|0T}(\mathbf{x}_{t}| \mathbf{x}_{0}=\mathbf{x},\mathbf{x}_{T}=\mathbf{y})\) and an estimate of \(\hat{\mathbf{x}}_{r}=\hat{\mathbf{x}}_{\mathbf{\phi}}(\mathbf{x}_{t},t,\mathbf{y})\) based on the pre-trained score predictor \(\mathbf{s}_{\mathbf{\phi}}\) with the first-order ODE solver in Eqn. (16), our goal is to derive the alternative estimation of \(\hat{\mathbf{x}}_{r}=\hat{\mathbf{x}}(\mathbf{x}_{t},t,r,\mathbf{x},\mathbf{y})=a_{r}\mathbf{y}+b_{r} \mathbf{x}+c_{r}\mathbf{z}\) used in CBT, where \(\mathbf{z}=\frac{\mathbf{x}_{t}-a_{t}\mathbf{y}-b_{t}\mathbf{y}}{c_{t}}\sim\mathcal{N}(\mathbf{0},\mathbf{I})\) and \(a_{r},b_{r},c_{r}\) are defined in Eqn. (11). We begin with the estimator with pre-trained score model and first-order ODE solver:

\[\mathbf{x}_{r}=\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{t}\rho_{t}\bar{\rho }_{t}}\mathbf{x}_{t}+\frac{\alpha_{r}}{\rho_{T}^{2}}\left[\left(\bar{\rho}_{r}^{2} -\frac{\bar{\rho}_{t}\rho_{r}\bar{\rho}_{r}}{\rho_{t}}\right)\mathbf{x}_{\mathbf{\phi} }(\mathbf{x}_{t},t,\mathbf{y})+\left(\rho_{r}^{2}-\frac{\rho_{t}\rho_{r}\bar{\rho}_{r} }{\bar{\rho}_{t}}\right)\frac{\mathbf{y}}{\alpha_{T}}\right], \tag{32}\]

where \(\mathbf{x}_{\mathbf{\phi}}\) is the equivalent data predictor of the score predictor \(\mathbf{s}_{\mathbf{\phi}}\). By the transformation between data and score predictor \(\mathbf{x}_{\mathbf{\phi}}=\frac{\mathbf{x}_{t}-a_{t}\mathbf{x}_{T}+c_{t}^{2}\mathbf{s}_{\mathbf{\phi}}} {b_{t}}\) and substituting the score predictor \(\mathbf{s}_{\mathbf{\phi}}\) with the score estimator \(\nabla_{\mathbf{x}_{t}}q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0}=\mathbf{x},\mathbf{x}_{T}=\mathbf{y})\), we have:

\[\mathbf{x}_{r}=\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{t}\rho_{t}\bar{\rho }_{t}}\mathbf{x}_{t}+\frac{\alpha_{r}}{\rho_{T}^{2}}\left[\left(\bar{\rho}_{r}^{2} -\frac{\bar{\rho}_{t}\rho_{r}\bar{\rho}_{r}}{\rho_{t}}\right)\mathbf{x}+\left(\rho _{r}^{2}-\frac{\rho_{t}\rho_{r}\bar{\rho}_{r}}{\bar{\rho}_{t}}\right)\frac{\bm {y}}{\alpha_{T}}\right], \tag{33}\]

By expressing \(\mathbf{x}_{t}=a_{t}\mathbf{y}+b_{t}\mathbf{x}+c_{t}\mathbf{z}\), we could derive the corresponding coefficients for \(\mathbf{x},\mathbf{y},\mathbf{z}\) on the right-hand side.

For \(\mathbf{y}\):

\[\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{t}\rho_{t}\bar{ \rho}_{t}}a_{t}+\frac{\alpha_{r}}{\alpha_{T}\rho_{T}^{2}}\left(\rho_{r}^{2}- \frac{\rho_{t}\rho_{r}\bar{\rho}_{r}}{\bar{\rho}_{t}}\right)=\frac{\alpha_{r} \rho_{r}\bar{\rho}_{r}}{\alpha_{t}\rho_{t}\bar{\rho}_{t}}\frac{\bar{\alpha}_{t }\rho_{t}^{2}}{\rho_{T}^{2}}+\frac{\alpha_{r}}{\alpha_{T}\rho_{T}^{2}}\left( \rho_{r}^{2}-\frac{\rho_{t}\rho_{r}\bar{\rho}_{r}}{\bar{\rho}_{t}}\right)\] \[\overset{(i)}{=}\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{ T}\bar{\rho}_{t}}\frac{\rho_{t}}{\rho_{T}^{2}}+\frac{\alpha_{r}}{\alpha_{T}\rho_{T}^{2}} \left(\rho_{r}^{2}-\frac{\rho_{t}\rho_{r}\bar{\rho}_{r}}{\bar{\rho}_{t}}\right) =\frac{\bar{\alpha}_{r}\rho_{r}^{2}}{\rho_{T}^{2}}=a_{r}, \tag{34}\]

where \((i)\) is due to the fact \(\bar{\alpha}_{t}=\frac{\alpha_{t}}{\alpha_{T}}\).

For \(\mathbf{x}\):

\[\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{t}\rho_{t}\bar{\rho}_{t}}b_{t} +\frac{\alpha_{r}}{\rho_{T}^{2}}\left(\bar{\rho}_{r}^{2}-\frac{\bar{\rho}_{t} \rho_{r}\bar{\rho}_{r}}{\rho_{t}}\right)=\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r }}{\alpha_{t}\rho_{t}\bar{\rho}_{t}}\frac{\alpha_{t}\bar{\rho}_{t}^{2}}{\rho_ {T}^{2}}+\frac{\alpha_{r}}{\rho_{T}^{2}}\left(\bar{\rho}_{r}^{2}-\frac{\bar{ \rho}_{t}\rho_{r}\bar{\rho}_{r}}{\rho_{t}}\right)=\frac{\alpha_{r}\bar{\rho}_{ r}^{2}}{\rho_{T}^{2}}=b_{r}. \tag{35}\]

For \(\mathbf{z}\):

\[\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{t}\rho_{t}\bar{\rho}_{t}}c_{t} =\frac{\alpha_{r}\rho_{r}\bar{\rho}_{r}}{\alpha_{t}\rho_{t}\bar{\rho}_{t}}\frac{ \alpha_{t}\bar{\rho}_{t}\rho_{t}}{\rho_{T}}=\frac{\alpha_{r}\bar{\rho}_{r}\rho_{ r}}{\rho_{T}}=c_{r}. \tag{36}\]

Hence, we have the alternative model-free estimator \(\hat{\mathbf{x}}_{r}=\hat{\mathbf{x}}(\mathbf{x}_{t},t,r,\mathbf{x},\mathbf{y})=a_{r}\mathbf{y}+b_{r} \mathbf{x}+c_{r}\mathbf{z}\), where \(\mathbf{z}\sim\mathcal{N}(\mathbf{0},\mathbf{I})\) is the same Gaussian noise used in sampling \(\mathbf{x}_{t}=a_{t}\mathbf{y}+b_{t}\mathbf{x}+c_{t}\mathbf{z}\). Substituting \(\hat{\mathbf{x}}_{\mathbf{\phi}}(\mathbf{x}_{t},t,r,\mathbf{y})\) in the CBD objective in Eqn. (17) with \(\hat{\mathbf{x}}(\mathbf{x}_{t},t,r,\mathbf{x},\mathbf{y})\) gives the CBT objective in Eqn. (20).

### Network Parameterization

First, we show the detailed network parameterization for DDBM in Table. 1. Denote the neural network as \(\mathbf{F}_{\mathbf{\theta}}\), the data predictor \(\mathbf{x}_{\mathbf{\theta}}(\mathbf{x},t,\mathbf{y})\) is given by:

\[\mathbf{x}_{\theta}(\mathbf{x}_{t},t,\mathbf{y})=c_{\rm skip}(t)\mathbf{x}_{t}+c_{\rm out}(t) \mathbf{F}_{\theta}(c_{\rm in}(t)\mathbf{x}_{t},c_{\rm noise}(t),\mathbf{y}), \tag{37}\]

where

\[c_{\rm in}(t)=\frac{1}{\sqrt{a_{t}^{2}\sigma_{T}^{2}+b_{t}^{2} \sigma_{0}^{2}+2a_{t}b_{t}\sigma_{0T}+c_{t}}},\quad c_{\rm out}(t)=\sqrt{a_{t}^ {2}(\sigma_{T}^{2}\sigma_{0}^{2}-\sigma_{0T}^{2})+\sigma_{0}^{2}c_{t}}c_{\rm in }(t), \tag{38}\] \[c_{\rm skip}(t)=(b_{t}\sigma_{0}^{2}+a_{t}\sigma_{0T})c_{\rm in }^{2}(t),\quad c_{\rm noise}(t)=\frac{1}{4}\log t.\]

and

\[a_{t}=\frac{\bar{\alpha}_{t}\rho_{t}^{2}}{\rho_{T}^{2}},\quad b_{t}=\frac{ \alpha_{t}\bar{\rho}_{t}^{2}}{\rho_{T}^{2}},\quad c_{t}=\frac{\alpha_{t}^{2} \bar{\rho}_{t}^{2}\rho_{t}^{2}}{\rho_{T}^{2}},\quad\sigma_{0}^{2}={\rm Var}[ \mathbf{x}_{0}],\sigma_{T}^{2}={\rm Var}[\mathbf{x}_{T}],\sigma_{0T}={\rm Cov}[\mathbf{x}_{0 },\mathbf{x}_{T}]. \tag{39}\]It can be verified that, with the variable substitution \(\tilde{t}=t-\epsilon\), we have \(a_{\tilde{\epsilon}}=0,b_{\tilde{\epsilon}}=1,c_{\tilde{\epsilon}}=0\) and thus have \(c_{\text{skip}}(\tilde{\epsilon})=1\) and \(c_{\text{out}}(\tilde{\epsilon})=0\).

Meanwhile, we could generally parameterize the data predictor \(\mathbf{x}_{\mathbf{\theta}}\) with the one-step first-order solver from \(t\) to \(\epsilon\), i.e.:

\[\mathbf{f}_{\theta}(\mathbf{x}_{t},t,\mathbf{y})=\frac{\alpha_{\epsilon}\rho_{\epsilon} \bar{\rho}_{\epsilon}}{\alpha_{t}\rho_{t}\bar{\rho}_{t}}\mathbf{x}_{t}+\frac{\alpha_ {\epsilon}}{\rho_{T}^{2}}\left[\left(\bar{\rho}_{\epsilon}^{2}-\frac{\bar{\rho} _{t}\rho_{\epsilon}\bar{\rho}_{\epsilon}}{\rho_{t}}\right)\mathbf{x}_{\mathbf{\theta}}( \mathbf{x}_{t},t,\mathbf{y})+\left(\rho_{\epsilon}^{2}-\frac{\rho_{t}\rho_{\epsilon} \bar{\rho}_{\epsilon}}{\bar{\rho}_{t}}\right)\frac{\mathbf{y}}{\alpha_{T}}\right], \tag{40}\]

which naturally satisfies \(f(\mathbf{x}_{\epsilon},\epsilon,\mathbf{y})=\mathbf{x}_{\epsilon}\).

### Asymptotic Analysis of CBD

**Proposition 3.2**.: _Given \(\Delta t_{\max}=\max_{t}\{t-r(t)\}\) and let \(\mathbf{h}_{\mathbf{\theta}}(\cdot,\cdot,\cdot)\) be the consistency function of the empirical bridge ODE taking the form in Eqn. (8). Assume \(\mathbf{h}_{\mathbf{\theta}}\) is a Lipschitz function, i.e., there exists \(L>0\), such that for all \(t\in[\epsilon,T-\gamma],\mathbf{x}_{1},\mathbf{x}_{2},\mathbf{y}\), we have \(\|\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{1},t,\mathbf{y})-\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{2},t, \mathbf{y})\|_{2}\leq L\|\mathbf{x}_{1}-\mathbf{x}_{2}\|_{2}\). Meanwhile, assume that for all \(t,r\in[\epsilon,T-\gamma],\mathbf{y}\sim\delta_{\text{data}}(\mathbf{y}):=\mathbb{E}_{ \mathbf{x}}[q_{\text{data}}(\mathbf{x},\mathbf{y})]\), the ODE solver \(\hat{\mathbf{x}}_{\mathbf{\phi}}(\cdot,t,r,\mathbf{y})\) has local error uniformly bounded by \(O((t-r)^{p+1})\) with \(p\geq 1\). Then, if \(\mathcal{L}_{\text{CBD}}^{\Delta t_{\text{max}}}=0\), we have: \(\sup_{t,\mathbf{x},\mathbf{y}}\|\mathbf{h}_{\mathbf{\theta}}(\mathbf{x},t,\mathbf{y})-\mathbf{h}_{\mathbf{\phi }}(\mathbf{x},t,\mathbf{y})\|_{2}=O((\Delta t_{\max})^{p})\)._

Most of the proof directly follows the original consistency models analysis [58], with minor differences in the discrete timestep intervals (i.e., non-overlapped in [58] and overlapped in ours) and the form of marginal distribution between \(p_{t}(\mathbf{x}_{t})\) for the diffusion ODE and \(q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})\) for the bridge ODE.

Proof.: Given \(\mathcal{L}_{\text{CBD}}^{\Delta t_{\text{max}}}=0\), we have:

\[\mathbb{E}_{q_{\text{data}}(\mathbf{x},\mathbf{y})q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0}=\mathbf{ x},\mathbf{x}_{T}=\mathbf{y})}\mathbb{E}_{t,r}\left[\lambda(t)d\left(\mathbf{h}_{\mathbf{\theta}} (\mathbf{x}_{t},t,\mathbf{y})-\mathbf{h}_{\mathbf{\theta}-}(\hat{\mathbf{x}}_{\mathbf{\phi}}(\mathbf{x}_{t },t,r,\mathbf{y}),r,\mathbf{y})\right)\right]=0 \tag{41}\]

Since \(\lambda(t)>0\), and for \(t\in[\epsilon,T-\gamma]\), \(q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0}=\mathbf{x},\mathbf{y}_{0}=\mathbf{y})\) takes the form of \(\mathcal{N}(a_{t}\mathbf{x}_{T}+b_{t}\mathbf{x}_{0},c_{t}\mathbf{I})\) with \(c_{t}>0\), which entails for any \(\mathbf{x}_{t}\), \(t\in[\epsilon,T-\gamma]\), \(q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T}=\mathbf{y})=\mathbb{E}_{\mathbf{x}}[q_{t|0T}(\mathbf{x}_{t}| \mathbf{x}_{0}=\mathbf{x},\mathbf{x}_{T}=\mathbf{y})]>0\). Hence, Eqn. (41) implies that for all \(t\in[\epsilon,T-\gamma],(\mathbf{x},\mathbf{y})\sim q_{\text{data}}(\mathbf{x},\mathbf{y}),\bm {x}_{t}\sim q_{t|0T}(\mathbf{x}_{t}|\mathbf{x}_{0}=\mathbf{x},\mathbf{x}_{T}=\mathbf{y})\), we have:

\[d\left(\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y})-\mathbf{h}_{\mathbf{\theta}-}(\hat{ \mathbf{x}}_{\mathbf{\phi}}(\mathbf{x}_{t},t,r(t),\mathbf{y}),r(t),\mathbf{y})\right)\equiv 0, \tag{42}\]

By the nature of the distance metric function \(d\) and the stopgrad operator, we then have:

\[\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y})\equiv\mathbf{h}_{\mathbf{\theta}-}(\hat{\mathbf{ x}}_{\mathbf{\phi}}(\mathbf{x}_{t},t,r(t),\mathbf{y}),r(t),\mathbf{y})\equiv\mathbf{h}_{\mathbf{\theta}}( \hat{\mathbf{x}}_{\mathbf{\phi}}(\mathbf{x}_{t},t,r(t),\mathbf{y}),r(t),\mathbf{y}). \tag{43}\]

Define the error term at timestep \(t\in[\epsilon,T-\gamma]\) as:

\[\mathbf{e}_{t}:=\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y})-\mathbf{h}_{\mathbf{\phi}}(\mathbf{x}_ {t},t,\mathbf{y}). \tag{44}\]

We have:

\[\mathbf{e}_{t} =\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y})-\mathbf{h}_{\mathbf{\phi}}(\mathbf{ x}_{t},t,\mathbf{y})\] \[=\mathbf{h}_{\mathbf{\theta}}(\hat{\mathbf{x}}_{\mathbf{\phi}}(\mathbf{x}_{t},t,r(t), \mathbf{y}),r(t),\mathbf{y})-\mathbf{h}_{\mathbf{\phi}}(\mathbf{x}_{r(t)},r(t),\mathbf{y})\] \[=\mathbf{h}_{\mathbf{\theta}}(\hat{\mathbf{x}}_{\mathbf{\phi}}(\mathbf{x}_{t},t,r(t), \mathbf{y}),r(t),\mathbf{y})-\mathbf{h}_{Denote \(r_{m}(t)\) as applying \(r\) on \(t\) for \(m\) times, since \(\Delta t_{\min}=\min_{t}\{t-r(t)\}\) exists, there exists \(N\) such that \(r_{n}(t)=\epsilon\) for \(n\geq N\). We thus have:

\[\|\mathbf{e}_{t}\|_{2} \leq\|\mathbf{e}_{t}\|_{2}+\sum_{k=1}^{N}O((r_{k-1}(t)-r_{k}(t))^{p+1})\] \[=\sum_{k=1}^{N}O((r_{k-1}(t)-r_{k}(t))^{p+1})\] \[=\sum_{k=1}^{N}(r_{k-1}(t)-r_{k}(t))O((r_{k-1}(t)-r_{k}(t))^{p})\] \[\leq\sum_{k=1}^{N}(r_{k-1}(t)-r_{k}(t))O((\Delta t_{\max})^{p})\] \[=O((\Delta t_{\max})^{p})\sum_{k=1}^{N}(r_{k-1}(t)-r_{k}(t))\] \[=O((\Delta t_{\max})^{p})(t-\epsilon)\] \[\leq O((\Delta t_{\max})^{p})(T-\epsilon)\] \[=O((\Delta t_{\max})^{p}).\]

### Connection between CBD & CBT

**Proposition 3.3**.: _Given \(\Delta t_{\max}=\max_{t}\{t-r(t)\}\) and assume \(d,\mathbf{h}_{\mathbf{\theta}},f,g\) are twice continuously differentiable with bounded second derivatives, the weighting function \(\lambda(\cdot)\) is bounded, and \(\mathbb{E}[\|\nabla_{\mathbf{x}_{t}}\log q_{t|T}(\mathbf{x}_{t}|\mathbf{x}_{T})\|_{2}^{2}]<\infty\). Meanwhile, assume that \(\mathcal{L}_{\mathrm{CBD}}^{\Delta t_{\max}}\) employs the one-step ODE solver in Eqn. (16) with ground truth pre-trained score model, i.e., \(\forall t\in[t,T-\gamma],\mathbf{y}\sim q_{\mathrm{data}}(\mathbf{y}):\mathbf{s}_{\mathbf{ \phi}}(\mathbf{x}_{t},t,\mathbf{y})\equiv\nabla_{\mathbf{x}_{t}}\log q_{t|T}(\mathbf{x}_{t}|\bm {x}_{T}=\mathbf{y})\). Then, we have: \(\mathcal{L}_{\mathrm{CBD}}^{\Delta t_{\max}}=\mathcal{L}_{\mathrm{CBD}}^{\Delta t _{\max}}+o(\Delta t_{\max})\)._

The core technique for building the connection between consistency distillation and consistency training with Taylor Expansion also directly follows [58]. The major difference lies in the form of the bridge ODE and the general noise schedule & the first-order ODE solver studied in our work.

Proof.: First, for a twice continuously differentiable, multivariate, vector-valued function \(\mathbf{h}(\mathbf{x},t,\mathbf{y})\), denote \(\partial_{\mathbf{k}}\mathbf{h}(\mathbf{x},t,\mathbf{y})\) as the Jacobian of \(\mathbf{h}\) over the \(k\)-th variable. Consider the CBD objective with first-order ODE solver in Eqn. (16) (ignore terms taking expectation for notation simplicity):

\[\mathcal{L}_{\mathrm{CBD}}^{\Delta t_{\max}}=\mathbb{E}\left[\lambda(t)d\left( \mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{t},t,\mathbf{y}),\mathbf{h}_{\mathbf{\theta}^{-}}(k_{1}(t,r) \mathbf{x}_{t}+k_{2}(t,r)\mathbf{x}_{\mathbf{\phi}}+k_{3}(t,r)\mathbf{y},r,\mathbf{y})\right) \right], \tag{45}\]

where \(k_{1}(t,r)=\frac{\alpha_{r}\rho_{r}\tilde{\rho}_{r}}{\alpha_{t}\rho_{t}\tilde {\rho}_{t}},k_{2}(t,r)=\frac{\alpha_{r}}{\rho_{T}^{2}}\left(\tilde{\rho}_{r}^{ 2}-\frac{\tilde{\rho}_{t}\rho_{r}\tilde{\rho}_{r}}{\rho_{t}}\right),k_{3}(t,r) =\frac{\alpha_{r}}{\alpha_{T}\rho_{T}^{2}}\left(\rho_{r}^{2}-\frac{\tilde{\rho }_{t}\rho_{r}\tilde{\rho}_{r}}{\tilde{\rho}_{t}}\right)\) are coefficients of \(\mathbf{x}_{t},\mathbf{x}_{\mathbf{\phi}},\mathbf{y}\) in the first-order ODE solver in Eqn. (16), \(\mathbf{x}_{\mathbf{\phi}}\) is pre-trained data predictor. By applying first-order Taylor expansion on Eqn. (45), we have:

\[\mathcal{L}_{\mathrm{CBD}}^{\Delta t_{\max}}\] \[= \mathbb{E}\left[\lambda(t)d\left(\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{t}, t,\mathbf{y}),\mathbf{h}_{\mathbf{\theta}^{-}}(\mathbf{x}_{t}+(k_{1}(t,r)-1)\mathbf{x}_{t}+k_{2}(t,r) \mathbf{x}_{\mathbf{\phi}}+k_{3}(t,r)\mathbf{y},t+(r-t),\mathbf{y})\right)\right]\] \[= \mathbb{E}\left[\lambda(t)d\left(\mathbf{h}_{\mathbf{\theta}}(\mathbf{x}_{t}, t,\mathbf{y}),\mathbf{h}_{\mathbf{\theta}^{-}}(\mathbf{x}_{t},t,\mathbf{y})+\partial_{1}\mathbf{h}_{\mathbf{ \theta}^{-}}(\mathbf{x}_{t},t,\mathbf{y})\right](k_{1}(t,r)-1)\mathbf{x}_{t}+k_{2}(t,r)\mathbf{x }_{\mathbf{\phi}}+k_{3}(t,r)\mathbf{y}\right.\] \[\left.+\partial_{2}\mathbf{h}_{\mathbf{\theta}^{-}}(\mathbf{x}_{t},t,\mathbf{y})(r -t)+o(|t-r|))\right].\]

Here the error term _w.r.t._ the first variable can be obtained by applying Taylor expansion on \(k(t,r)=k(t,t)+\partial_{2}k(t,t)(r-t)+o(|t-r|)\) with \(k_{1}(t,t)-1=0,k_{2}(t,t)=k_{3}(t,t)=0\). By applyingTaylor expansion on \(d\), we have:

\[\mathcal{L}^{\Delta t_{\max}}_{\mathrm{CBD}}\] \[= \mathbb{E}\{\lambda(t)d(\boldsymbol{h_{\theta}}(\boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y }))+\lambda(t)\partial_{2}d(\boldsymbol{h_{\theta}}(\boldsymbol{x}_{t},t, \boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y}) )[\] \[\partial_{1}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y})[(k_{1}(t,r)-1)\boldsymbol{x}_{t}+k_{2}(t,r)\boldsymbol{x_{ \phi}}+k_{3}(t,r)\boldsymbol{y}]+\partial_{2}\boldsymbol{h_{\theta^{-}}}( \boldsymbol{x}_{t},t,\boldsymbol{y})(r-t)+o(|t-r|)]\}\] \[= \mathbb{E}\{\lambda(t)d(\boldsymbol{h_{\theta}}(\boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y}))\}\] \[+\mathbb{E}\{\lambda(t)\partial_{2}d(\boldsymbol{h_{\theta}}( \boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{ x}_{t},t,\boldsymbol{y}))[\partial_{1}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y})([k_{1}(t,r)-1)\boldsymbol{x}_{t}+k_{2}(t,r)\boldsymbol{x_{ \phi}}+k_{3}(t,r)\boldsymbol{y}]]\}\] \[+\mathbb{E}\{\lambda(t)\partial_{2}d(\boldsymbol{h_{\theta}}( \boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{ x}_{t},t,\boldsymbol{y}))\partial_{2}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y})(r-t)\}+\mathbb{E}\{o(|t-r|)\}.\]

Then we focus on the term related to the first-order ODE solver:

\[(k_{1}(t,r)-1)\boldsymbol{x}_{t}+k_{2}(t,r)\boldsymbol{x_{\phi}}+k_{3}(t,r) \boldsymbol{y}.\]

By the transformation between data and score predictor \(\boldsymbol{x_{\phi}}=\frac{\boldsymbol{x}_{t}-a_{t}\boldsymbol{x}_{T}+c_{t}^{ 2}\boldsymbol{s_{\phi}}}{b_{t}}\), and substitute \(\boldsymbol{s_{\phi}}(\boldsymbol{x}_{t},t,\boldsymbol{y})\) with \(\nabla_{\boldsymbol{x}_{t}}\log q_{t|T}(\boldsymbol{x}_{t}|\boldsymbol{x}_{T}= \boldsymbol{y})\), we have:

\[(k_{1}(t,r)-1)\boldsymbol{x}_{t}+k_{2}(t,r)\frac{\boldsymbol{x}_{t}-a_{t} \boldsymbol{x}_{T}+c_{t}^{2}\nabla_{\boldsymbol{x}_{t}}\log q_{t|T}( \boldsymbol{x}_{t}|\boldsymbol{x}_{T}=\boldsymbol{y})}{b_{t}}+k_{3}(t,r) \boldsymbol{y}.\]

Next, substituting the score \(\nabla_{\boldsymbol{x}_{t}}\log q_{t|T}(\boldsymbol{x}_{t}|\boldsymbol{x}_{T}= \boldsymbol{y})\) with the unbiased estimator:

\[\mathbb{E}[\nabla_{\boldsymbol{x}_{t}}\log q_{t|0T}(\boldsymbol{x}_{t}| \boldsymbol{x}_{0},\boldsymbol{x}_{T})|\boldsymbol{x}_{t},\boldsymbol{x}_{T} =\boldsymbol{y}]=\mathbb{E}\left[-\frac{\boldsymbol{x}_{t}-(a_{t}\boldsymbol {x}_{T}+b_{t}\boldsymbol{x}_{0})}{c_{t}^{2}}|\boldsymbol{x}_{t},\boldsymbol{ x}_{T}=\boldsymbol{y}\right]\]

We then have:

\[\mathbb{E}\{\lambda(t)\partial_{2}d(\boldsymbol{h_{\theta}}( \boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}( \boldsymbol{x}_{t},t,\boldsymbol{y}))[\partial_{1}\boldsymbol{h_{\theta^{-}}}( \boldsymbol{x}_{t},t,\boldsymbol{y})[(k_{1}(t,r)-1)\boldsymbol{x}_{t}+k_{2}(t,r)\boldsymbol{x_{\phi}}+k_{3}(t,r)\boldsymbol{y}]]\}\] \[= \mathbb{E}\{\lambda(t)\partial_{2}d(\boldsymbol{h_{\theta}}( \boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{ x}_{t},t,\boldsymbol{y}))[\partial_{1}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y})[\] \[(k_{1}(t,r)-1)\boldsymbol{x}_{t}+k_{2}(t,r)\frac{\boldsymbol{x}_{t}-a_{t} \boldsymbol{x}_{T}+c_{t}^{2}\mathbb{E}\left[-\frac{\boldsymbol{x}_{t}-(a_{t} \boldsymbol{x}_{T}+b_{t}\boldsymbol{x}_{0})}{c_{t}^{2}}|\boldsymbol{x}_{t}, \boldsymbol{x}_{T}=\boldsymbol{y}\right]}{b_{t}}+k_{3}(t,r)\boldsymbol{y}\] \[\overset{(i)}{=} \mathbb{E}\{\lambda(t)\partial_{2}d(\boldsymbol{h_{\theta}}( \boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y}))[\partial_{1}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y})[\] \[(k_{1}(t,r)-1)\boldsymbol{x}_{t}+k_{2}(t,r)\frac{\boldsymbol{x}_{t}-a_{t} \boldsymbol{x}_{T}-c_{t}^{2}\frac{\boldsymbol{x}_{t}-(a_{t}\boldsymbol{x}_{T}+b_{t} \boldsymbol{x}_{0})}{c_{t}^{2}}}+k_{3}(t,r)\boldsymbol{y}]\] \[= \mathbb{E}\{\lambda(t)\partial_{2}d(\boldsymbol{h_{\theta}}( \boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y}))[\partial_{1}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y})[k_{1}(t,r)\boldsymbol{x}_{t}+k_{2}(t,r)\boldsymbol{x}+k_{3}(t,r) \boldsymbol{y}-\boldsymbol{x}_{t}],\]

where \((i)\) comes from the law of total expectation. Then we apply Taylor expansion in the reverse direction:

\[\mathcal{L}^{\Delta t_{\max}}_{\mathrm{CBD}}\] \[= \mathbb{E}\{\lambda(t)d(\boldsymbol{h_{\theta}}(\boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y}))\}\] \[+\mathbb{E}\{\lambda(t)\partial_{2}d(\boldsymbol{h_{\theta}}( \boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y}))[\partial_{1}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y})[k_{1}(t,r)\boldsymbol{x}_{t}+k_{2}(t,r)\boldsymbol{x}+k_{3}(t,r) \boldsymbol{y}-\boldsymbol{x}_{t}]]\}\] \[+\mathbb{E}\{\lambda(t)\partial_{2}d(\boldsymbol{h_{\theta}}( \boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y}))\partial_{2}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y})(r-t)\}+\mathbb{E}\{o(|t-r|)\}.\] \[= \mathbb{E}\{\lambda(t)d(\boldsymbol{h_{\theta}}(\boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y}))[ \partial_{1}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y})][k_{1}(t,r) \boldsymbol{x}_{t}+k_{2}(t,r)\boldsymbol{x}+k_{3}(t,r)\boldsymbol{y}- \boldsymbol{x}_{t}]\] \[+\partial_{2}d(\boldsymbol{h_{\theta}}(\boldsymbol{x}_{t},t, \boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y})) \partial_{2}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t,\boldsymbol{y})(r-t)] \}+\mathbb{E}\{o(|t-r|)\}\] \[= \mathbb{E}\{\lambda(t)[d(\boldsymbol{h_{\theta}}(\boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y})+\partial_{1}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y})[k_{1}(t,r)\boldsymbol{x}_{t}+k_{2}(t,r)\boldsymbol{x}+k_{3}(t,r) \boldsymbol{y}-\boldsymbol{x}_{t}]\] \[+\partial_{2}\boldsymbol{h_{\theta^{-}}}(\boldsymbol{x}_{t},t, \boldsymbol{y})(r-t))]+\mathbb{E}\{o(|t-r|)\}\] \[= \mathbb{E}\{\lambda(t)[d(\boldsymbol{h_{\theta}}(\boldsymbol{x}_{t},t,\boldsymbol{y}),\boldsymbol{h_{\theta^{-}}}(k_{1}(t,r)\boldsymbol{x}_{t}+k_{2}(t,r) \boldsymbol{x}+k_{3}(t,r)\boldsymbol{y},r,\boldsymbol{y}))]\}+\mathbb{E}\{o(|t-r|)\}\] \[\overset{(ii)}{=} \mathbb{E}\{\lambda(t)[d(\boldsymbol{h_{\theta}}(\boldsymbol{a}_{t} \boldsymbol{y}+b_{t}\boldsymbol{x}+c_{t}\boldsymbol{z},t,\boldsymbol{y}),\boldsymbol{h_{ \theta^{-}}}(\boldsymbol{a}_{r}\boldsymbol{y}+b_{r}\boldsymbol{x}+c_{r} \boldsymbol{z},r,\boldsymbol{y})]\}+o(|t-r|)\] \[= \mathcal{L}^{\Delta t_{\max}}_{\mathrm{CBT}}+o(|t-r|),\]

where \((ii)\) follows the derivation in Eqn. (33) - Eqn. (36), and \(\boldsymbol{z}\sim\mathcal{N}(\boldsymbol{0},\boldsymbol{I})\).

Additional Experimental Details

### Details of Training and Sampling Configurations

We train CDBMs based on a series of pre-trained DDBMs. For two image-to-image translation tasks, we directly use the pre-trained checkpoints provided by DDBM's [72] official repository.2 For image inpainting, we re-train a model with the same I\({}^{2}\)SB style noise schedule, network parameterization, and timestep scheme in Table. 1, as well as the overall network architecture. Unlike the training setup in I\({}^{2}\)SB, our network is conditioned on \(\mathbf{x}_{T}=\mathbf{y}\) following DDBM and takes the class information of ImageNet as input, which we refer to as the base DDBM model for image inpainting on ImageNet. The model is initialized with the class-conditional version on ImageNet \(256\times 256\) of guided diffusion [10]. We used a global batch size of 256 and a constant learning rate of 1e-5 with mixed precision (fp16) to train the model for 200k steps. We train the model with 8 NVIDIA A800 80G GPUs for 9.5 days, achieving the FID reported in Table. 3 with the first-order ODE solver in Eqn. (16).

Footnote 2: [https://github.com/alexzhou907/DDBM](https://github.com/alexzhou907/DDBM)

For training CDBMs, we use a global batch size of 128 and a learning rate of 1e-5 with mixed precision (fp16) for all datasets using 8 NVIDIA A800 80G GPUs. For the constant training schedule \(r(t)=t-\Delta t\), we train the model for 50k steps, while for the sigmoid-style training schedule, we train the model for \(6s\) steps, e.g., 30k or 60k steps, due to numerical instability when \(t-r(t)\) is small. For CBD, training a model for 50k steps on a dataset with \(256\times 256\) resolution takes \(\sim\)2.5 days, while CBT takes \(\sim\)1.5 days. In this work, we normalize all images within \([-1,1]\) and adopt the RAdam [27, 34] optimizer.

For sampling, we use a uniform timestep for all baselines with the ODE solver and CDBM on two image-to-image translation tasks with \(\epsilon=0.0001,T=1.0\). For CDBM on image inpainting on ImageNet, we manually assign the second timestep to \(T-0.1\) and make other timesteps uniformly distributed between \([\epsilon,T-0.1)\), which we find yields better empirical performance on this task.

### Details of Training Schedule for CDBM

We illustrate the effect of the hyperparamter \(b\) in the sigmoid-like training schedule \(r(t)=t(1-\frac{1}{q\,(\text{linear}/s)})(1+\frac{k}{1+e^{\text{tr}}})\). Note that we further manually enforce \(r(t)\) to satisfy \(\Delta t_{\max}\) and \(\Delta t_{\min}\).

### License

We list the used datasets, codes, and their licenses.

\begin{table}
\begin{tabular}{l l l l} \hline \hline Name & URL & Citation & License \\ \hline Edges\(\sim\)Handbags & [https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix) & [23] & BSD \\ DIODE-Outdoor & [https://diode-dataset.org/](https://diode-dataset.org/) & [62] & MIT \\ ImageNet & [https://www.image-net.org](https://www.image-net.org) & [9] & \(\setminus\) \\ Guided-Diffusion & [https://github.com/epani/guided-diffusion](https://github.com/epani/guided-diffusion) & [10] & MIT \\ I\({}^{2}\)SB & [https://github.com/IVlabs/I2SB](https://github.com/IVlabs/I2SB) & [33] & CC-BY-NC-SA-4.0 \\ DDBM & [https://github.com/alexzhou907/DDBM](https://github.com/alexzhou907/DDBM) & [72] & \(\setminus\) \\ \hline \hline \end{tabular}
\end{table}
Table 4: The used datasets, codes and their licenses.

Figure 6: Illustration of the effect of the parameter \(b\) on the sigmoid-style training schedule.

## Appendix D Additional Samples

Figure 7: Additional Samples for Edges \(\rightarrow\) Handbags.

Figure 8: Additional Samples for DIODE-Outdoor.

Figure 9: Additional Samples for ImageNet \(256\times 256\).

Figure 11: Qualitative comparison between CDBM and I\({}^{2}\)SB baseline on ImageNet \(256\times 256\). Note that here the base model of CDBM is different from the officially released checkpoint of I\({}^{2}\)SB we used for evaluation.

Figure 10: Demonstration of sample diversity of the deterministic ODE sampler.

### NeurIPS Paper Checklist

1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The main claims made in the abstract and introduction accurately reflect the paper's contributions and scope. Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: The discussion is located in the "Limitations and Broad Impact" section after the main paper. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. * While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof?Answer: [Yes] Justification: Assumptions are provided with the propositions and the detailed derivation and proof is in Appendix B. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: The experimental configurations are included in Section 4 and Appendix C. The information we provided is sufficient to reproduce the results that support our claims. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. 3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code**Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [No] Justification: The release of the code needs an official procedure related to the authors' affiliation, which is not approved yet. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: The experiment configuration and details are included in Section 4 and Appendix C, which is sufficient to understand the results. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [No] Justification: The metrics for evaluating generative models are typically stable and do not require error bars. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.

* The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).
* The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)
* The assumptions made should be given (e.g., Normally distributed errors).
* It should be clear whether the error bar is the standard deviation or the standard error of the mean.
* It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified.
* For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).
* If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: We provided the information in Appendix C. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics [https://neurips.cc/public/EthicsGuidelines?](https://neurips.cc/public/EthicsGuidelines?) Answer: [Yes] Justification: The research conducted in the paper conforms with the NeurIPS Code of Ethics. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? Answer: [Yes] Justification: The discussion is located in the "Limitations and Broad Impact" section after the main paper. Guidelines: * The answer NA means that there is no societal impact of the work performed.

* If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.
* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).

11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: This work is conducted with common academic image datasets with model capability restricted with specific tasks. There is little chance posing risks for misuse. Guidelines:

* The answer NA means that the paper poses no such risks.
* Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.
* Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.
* We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.

12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: Licenses for existing assets are listed in Appendix C.3. Guidelines:

* The answer NA means that the paper does not use existing assets.
* The authors should cite the original paper that produced the code package or dataset.
* The authors should state which version of the asset is used and, if possible, include a URL.
* The name of the license (e.g., CC-BY 4.0) should be included for each asset.
* For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.

* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.
13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [NA] Justification: The paper does not release new assets. Guidelines: * The answer NA means that the paper does not release new assets. * Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc. * The paper should discuss whether and how consent was obtained from people whose asset is used. * At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.
14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: The paper does not involve crowdsourcing or research with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper. * According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.
15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: * The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. * Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.

* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.