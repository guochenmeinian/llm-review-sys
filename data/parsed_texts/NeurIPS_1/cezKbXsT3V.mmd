# On Separate Normalization in Self-supervised Transformers

 Xiaohui Chen

Department of Computer Science

Tufts University

Medford, MA 02155

xiaohui.chen@tufts.edu

Yinkai Wang

Department of Computer Science

Tufts University

Medford, MA 02155

yinkai.wang@tufts.edu

Yuanqi Du

Department of Computer Science

Cornell University

Ithaca, NY 14850

yd392@cornell.edu

&Soha Hassoun

Department of Computer Science

Tufts University

Medford, MA 02155

soha.hassoun@tufts.edu

Li-Ping Liu

Department of Computer Science

Tufts University

Medford, MA 02155

liping.liu@tufts.edu

###### Abstract

Self-supervised training methods for transformers have demonstrated remarkable performance across various domains. Previous transformer-based models, such as masked autoencoders (MAE), typically utilize a single normalization layer for both the class token \([\mathrm{CLS}]\) and the tokens. We propose in this paper a new yet simple normalization method that separately normalizes embedding vectors respectively corresponding to normal tokens and the \([\mathrm{CLS}]\) token, in order to better capture their distinct characteristics and enhance downstream task performance. Our empirical study shows that the \([\mathrm{CLS}]\) embeddings learned with our separate normalization layer better encode the global contextual information and are distributed more uniformly in its anisotropic space. When the conventional normalization layer is replaced with a separate normalization layer, we observe an average 2.7% performance improvement in learning tasks from the image, natural language, and graph domains.

## 1 Introduction

Transformer models [20] have revolutionized natural language processing (NLP) [17, 16] and demonstrated remarkable performances across a wide range of NLP tasks. The significance of transformer models lies in their ability to model context and capture complex linguistic patterns without being constrained by the sequential nature of data. Beyond NLP transformers have further found their successes in areas such as computer vision (CV) [14], speech recognition [11], and recommendation systems [21, 22, 23]. Their flexible architecture and ability to capture dependencies have made them adaptable to diverse data modalities in these domains.

Transformer architectures have been studied extensively from various perspectives such as attention mechanisms, positional encoding (Devlin et al., 2018), and normalization techniques. Specifically, layer normalization (Ba et al., 2016) and batch normalization (Ioffe and Szegedy, 2015) are employed to enhance stability and speed up convergence during training. The literature on transformers also explores parameter initialization (Xu et al., 2019), optimization algorithms (Huang et al., 2020), regularization techniques (Steiner et al., 2021; Zhou et al., 2020), and improved architectures (Han et al., 2021). This collective research has advanced transformer architectures and their applications in NLP, CV, and other learning domains.

The study of normalization in transformer architectures is motivated by several factors (Xiong et al., 2020; Shen et al., 2020; Nguyen and Salazar, 2019). For example, Xiong et al. (2020) emphasize the importance of the warm-up of the learning rate and the position of layer normalization layers for the purpose of stable training and faster convergence. Shen et al. (2020) investigates the disadvantage of using batch normalization in transformers and proposes power normalization. While most previous works focus on how the normalization layer can be modified to stabilize the training process, it is less understood how the normalization affects the encoding abilities of these embeddings.

In self-supervised transformers, the \([\mathrm{CLS}]\) symbol is frequently used as a global representation for various downstream tasks (Devlin et al., 2018; He et al., 2022). Often, the normalization applied to the \([\mathrm{CLS}]\) symbol is shared with the rest of the tokens in the sequence, which we term it as Shared Normalization (ShareNorm). Given that the \([\mathrm{CLS}]\) symbol plays a special role in representation learning, a natural question is whether we should treat it separately in the normalization operation. Driven by this question, our research first scrutinizes the behavior of the current shared normalization in transformers, particularly the properties of the \([\mathrm{CLS}]\) embedding and its influence on downstream task performance. Subsequently, we propose a replacement of ShareNorm with Separate Normalization (SepNorm), the latter of which employs distinct normalization operations for the \([\mathrm{CLS}]\) symbol and the token features, as depicted in Figure 1. Through extensive analysis, we demonstrate that \([\mathrm{CLS}]\) embeddings learned using ShareNorm have the issue of dimensional collapse, which cannot be rectified even by enforcing uniformity (Wang and Isola, 2020). However, the straightforward substitution of SepNorm for ShareNorm substantially mitigates this issue. We empirically validate the effectiveness of SepNorm in tasks from the image, text, and graph domains, demonstrating the universal advantage of the proposed SepNorm.

## 2 Background

### Pretraining Transformers with the \([\mathrm{CLS}]\) symbol

Unsupervised pretraining of a transformer-based model (Vaswani et al., 2017) is widely investigated in many domains, including NLP, computer vision (CV), and graphs.

Pretraining BERT for NLP.In NLP, Devlin et al. (2018) first develop the BERT model by pretraining a transformer-based network by performing the following two tasks - masked language modeling and next sentence prediction. During pretraining, BERT takes a pair of sentences \((\mathbf{x},\mathbf{y})\)

Figure 1: Comparison of the shared normalization (ShareNorm, left) and the proposed separate normalization (SepNorm, right) configurations for token normalization. In the ShareNorm setup, both the \([\mathrm{CLS}]\) symbol and other tokens are normalized using a single-layer normalization. In the SepNorm setup, normalization is done separately: the \([\mathrm{CLS}]\) symbol is normalized through batch normalization, while other tokens are normalized via layer normalization.

which are represented as a special sequence

\[\mathbf{s}=\big{(}[\mathrm{CLS}],\mathbf{x},[\mathrm{SEP}],\mathbf{y}\big{)}. \tag{1}\]

Here \([\mathrm{SEP}]\) is a special token that separates the two sentences. A fraction (e.g., 15%) of the tokens in \(\mathbf{x}\) and \(\mathbf{y}\) are randomly replaced by a special symbol \([\mathrm{MASK}]\). The first task in BERT is to predict the original tokens replaced by \([\mathrm{MASK}]\) with cross-entropy loss. The second task is to predict whether \(\mathbf{y}\) is the next sentence following \(\mathbf{x}\), and the decision is made by classifying the final embedding of the \([\mathrm{CLS}]\) symbol. After pretraining, the representation in the \([\mathrm{CLS}]\) is usually used for sentence-level downstream tasks such as sentiment analysis [16].

Pretraining MAE for CV.The Vision Transformer (ViT) [15] applies the transformers to computer vision tasks. In ViT, an image is usually voxelized into \(16\times 16\) patches, which are then flattened into a sequence of 256 tokens and fed into the ViT. He et al. [20] proposes a self-supervised training scheme, Masked Autoencoder (MAE), for the ViT architecture. A training image has 75% of its patches masked. The MAE feeds Tokens of unmasked patches as well as a \([\mathrm{CLS}]\) token into the encoder and gets the representations for these tokens. Then the decoder tries to reconstruct the original image by minimizing the mean square error (MSE). Only the encoder will be used for downstream tasks after pretraining. The \([\mathrm{CLS}]\) symbol is treated as the class token for linear probing and fine-tuning in the downstream tasks.

Pretraining Graphormer for molecule discovery.Graphormer [21] is a transformer-based model designed for graph representation learning tasks. It is used to predict the property of a graph rather than a node or edge. Specifically, Graphormer introduces a new symbol \([\mathrm{VNode}]\) as a node connecting to all original graph nodes. Then the vector learned for \([\mathrm{VNode}]\) represents the global information of the entire graph. The mechanism of \([\mathrm{VNode}]\) is similar to the \([\mathrm{CLS}]\) symbol in BERT and MAE.

In typical applications of transformers, the \([\mathrm{CLS}]\) symbol is not a natural data token. It summarizes other tokens to capture global information, which is especially useful in downstream tasks. For these reasons, we argue that it should be treated differently in normalization operations.

### Normalization Layers in Transformers

Given that transformers are initially proposed for NLP tasks, layer normalization (LN) Ba et al. [20] is typically the normalization method of choice [20]. LN normalizes across feature dimensions and is independent of the sequence length and the batch size. For any features \(\mathbf{h}\in\mathbb{R}^{d}\), the LN has the following computation:

\[\mathrm{LN}(\mathbf{h})=\boldsymbol{\gamma}\odot\frac{\mathbf{h}-\mu}{ \sigma}+\boldsymbol{\beta},\quad\mu=\frac{1}{d}\sum_{i=1}^{d}h_{i},\quad\sigma =\sqrt{\frac{1}{d}\sum_{i=1}^{d}\big{(}h_{i}-\mu\big{)}^{2}}. \tag{2}\]

Here \(h_{i}\) is the \(i\)-th dimension of \(\mathbf{h}\), \(\odot\) represents element-wise multiplication, and \(\boldsymbol{\gamma},\boldsymbol{\beta}\in\mathbb{R}^{d}\) are scale and bias parameters, respectively. In a transformer, all tokens, including special tokens, such as \([\mathrm{CLS}]\) and \([\mathrm{SEP}]\), are all treated equally and share the same LNs.

Batch Normalization (BN) [14] works by normalizing the input data to have zero mean and unit variance along the batch dimension, followed by an affine transformation to scale the result using gamma and beta parameters. BN normalizes a given vector \(\mathbf{h}\) as:

\[\mathrm{BN}(\mathbf{h})=\boldsymbol{\gamma}\odot\frac{\mathbf{h}-\boldsymbol{ \mu}_{B}}{\boldsymbol{\sigma}_{B}}+\boldsymbol{\beta}. \tag{3}\]

Here \(\boldsymbol{\mu}_{B},\boldsymbol{\sigma}_{B}^{2}\in\mathbb{R}^{d}\) are the running statistics (mean and variance) maintained by the BN. The running mean and variance are updated during training after each batch. They are usually calculated as an exponential moving average of the batch mean and variance. BN is widely adopted in CV but leads to significant performance degradation when naively used in NLP.

### Uniformity of the Learned Representations

The dimensional collapse in self-supervised representation learning is a common phenomenon where the embedding vectors only span a lower-dimensional subspace [17] of the entire vector space. This means that the model fails to capture data patterns with full power and instead collapses to a simpler representation. Contrastive methods (Oord et al., 2018; Chen et al., 2020b) have been one of the standard approaches to address this problem. Specifically, Wang and Isola (2020) propose the _uniformity_ metric (loss) to quantify the degree of dimensional collapse. Given a set of representation vectors \(\{\mathbf{h}_{1},\ldots,\mathbf{h}_{N}\}\) from a dataset of size \(N\), the uniformity metric \(\mathcal{L}_{\mathcal{U}}\) is computed as follows:

\[\mathcal{L}_{\mathcal{U}}=\log\frac{1}{N(N-1)/2}\sum_{\begin{subarray}{c}n=1, \\ m=n+1\end{subarray}}^{N,N}\exp^{-2\left\|\frac{\mathbf{h}_{m}}{\|\mathbf{h}_{m }\|}-\frac{\mathbf{h}_{m}}{\|\mathbf{h}_{m}\|}\right\|^{2}}. \tag{4}\]

If the distribution of the representation is perfectly uniform, then the numerical value of \(\mathcal{L}_{\mathcal{U}}\) will converge to -4 as the dimension of \(\mathbf{h}\) increases to infinity (Wang and Isola, 2020).

In self-supervised transformers, the uniformity of the representation is also taken into consideration by some works. For example, Gao et al. (2021) finetune the pretrained BERT model using the InfoNCE loss (Oord et al., 2018), and Zhang et al. (2022) jointly train the MAE loss along with uniformity loss.

## 3 Approach

### Separate Normalization

We present SepNorm, a normalization scheme that separately normalizes embeddings of the \([\mathrm{CLS}]\) symbol and embeddings of other tokens. In this work, we focus on the exploration of combinations of BN and LN for the two separate normalization channels.

For instance, if we apply BN to the \([\mathrm{CLS}]\) symbol and LN to other tokens, the learnable parameters are structured as \(g_{1}=(\mathbf{\gamma}_{1},\mathbf{\beta}_{1})\) and \(g_{2}=(\mathbf{\gamma}_{2},\mathbf{\beta}_{2})\). Let \(\mathbf{H}\in\mathbb{R}^{L\times d}\) represent the feature sequence, where \(L\) denotes the sequence length, and \(d\) is the feature dimension. Assume embedding \(\mathbf{H}_{0}\) in the first position corresponds to the \([\mathrm{CLS}]\) symbol. The normalization process is as follows:

\[\mathbf{H}^{\prime}=\big{(}\mathrm{BN}(\mathbf{H}_{0};g_{1}),\mathrm{LN}( \mathbf{H}_{1};g_{2}),\ldots,\mathrm{LN}(\mathbf{H}_{L};g_{2})\big{)}, \tag{5}\]

where \(\mathbf{H}^{\prime}\) denotes the normalized features. We can also run separate normalization with one of the three other combinations:

\[\mathbf{H}^{\prime} =\big{(}\mathrm{BN}(\mathbf{H}_{0};g_{1}),\mathrm{BN}(\mathbf{H}_ {1};g_{2}),\ldots,\mathrm{BN}(\mathbf{H}_{L};g_{2})\big{)},\] \[\mathbf{H}^{\prime} =\big{(}\mathrm{LN}(\mathbf{H}_{0};g_{1}),\mathrm{LN}(\mathbf{H}_ {1};g_{2}),\ldots,\mathrm{LN}(\mathbf{H}_{L};g_{2})\big{)},\] \[\mathbf{H}^{\prime} =\big{(}\mathrm{LN}(\mathbf{H}_{0};g_{1}),\mathrm{LN}(\mathbf{H}_ {1};g_{2}),\ldots,\mathrm{LN}(\mathbf{H}_{L};g_{2})\big{)}.\]

Separate normalization allows the \([\mathrm{CLS}]\) features to be encoded distinctly from other tokens.

As a comparison, the \([\mathrm{CLS}]\) token's embedding and other tokens' embeddings interfere with each other in a shared normalization structure. With ShareNorm, the update directions of the LN parameters \(\{\mathbf{\gamma},\mathbf{\beta}\}\) are primarily driven by the embeddings of normal tokens. Below is the gradient calculation for these parameters,

\[\frac{\delta\mathcal{L}}{\delta\gamma_{i}}=\sum_{l=1}^{L}\frac{ \delta\mathcal{L}}{\delta\tilde{\mathbf{H}}_{l,i}}\tilde{\mathbf{H}}_{l,i}, \quad\frac{\delta\mathcal{L}}{\delta\beta_{i}}=\sum_{l=1}^{L}\frac{\delta \mathcal{L}}{\delta\tilde{\mathbf{H}}_{l,i}}, \tag{6}\] \[\text{where }\tilde{\mathbf{H}}_{l,i}=\frac{\mathbf{H}_{l,i}-\mu_{l }}{\sigma_{l}},\mu_{l}=\frac{1}{d}\sum_{i=1}^{d}\mathbf{H}_{l,i},\sigma_{l}= \sqrt{\frac{1}{d}\sum_{i=1}^{d}\big{(}\mathbf{H}_{l,i}-\mu_{l}\big{)}^{2}}. \tag{7}\]

We see the summation in the gradient calculation is dominated by normal tokens given that the number of normal tokens is typically a large number. Given the potentially diverse characteristics (i.e., mean and scale) of feature distributions, it might be challenging for normalization parameters to accommodate both token types simultaneously. Moreover, mapping two types of token features into the same sphere may also mix the signal of \([\mathrm{CLS}]\) tokens with other tokens. Figure 2(a, b) demonstrates this phenomenon in the scenario where both token types utilize a ShareNorm and how using SepNorm mitigates this effect.

### Encourage the Uniformity of the \([\mathrm{CLS}]\) Embeddings via a Constrastive Term

We further relate SepNorm with the uniformity of embeddings. Higher uniformity values indicate that embeddings can better exploit the space to store information. Contrastive methods often employ negative instances to encourage uniformity. In particular, we incorporate SepNorm into transformers trained with U-MAE (Zhang et al., 2022), which uses a constrastive term to promote uniformity of features.

The U-MAE explicitly adds a uniformity loss term \(\mathcal{L}_{\mathrm{unif}}\) to the training objective to encourage uniformity of \([\mathrm{CLS}]\) embeddings.

\[\mathcal{L}_{\mathrm{U-MAE}}=\mathcal{L}_{\mathrm{MAE}}+\lambda\mathcal{L}_{ \mathrm{unif}},\ \ \text{with}\ \mathcal{L}_{\mathrm{unif}}=\mathbb{E}_{i}\left[ \mathbb{E}_{j}\left[\mathbf{h}_{\mathrm{CLS},i}^{\top}\,\mathbf{h}_{\mathrm{CLS },j}\right]\right] \tag{8}\]

Here \(\mathcal{L}_{\mathrm{MAE}}\) is the MAE training objective. The two indices \(i\) and \(j\) represent two sequences within the same batch. \([\mathrm{CLS}]\) embeddings \(\mathbf{h}_{\mathrm{CLS},i}\) and \(\mathbf{h}_{\mathrm{CLS},j}\), which are respectively for the two sequences, are obtained from our SepNorm during the transformer calculation. By minimizing \(\mathcal{L}_{\mathrm{unif}}\), \([\mathrm{CLS}]\) features tend to be different from each other.

## 4 Experiments

We examine the effectiveness of the proposed SepNorm component in three domains: CV, NLP, and graphs. We then further investigate how the ShareNorm and SepNorm affect the uniformity of the \([\mathrm{CLS}]\) embeddings.

### Computer Vision

Datasets.We investigate the model performance on the four image datasets: STL10 (Coates et al., 2011), FGVC Aircraft (Maji et al., 2013), Street View House Numbers (SVHN) (Netzer et al., 2011), and Oxford 102 Flowers (Nilsback and Zisserman, 2008). All four datasets are for classification tasks. We follow the train/test split provided in the papers introducing the datasets. We report top-1 and top-5 accuracy for all datasets.

Vision transformers (ViT) and MAE.We choose Vision Transformer (ViT) (Dosovitskiy et al., 2020) as our feature extractor for all datasets. To pretrain the ViT, we adopt the MAE training scheme (He et al., 2022). We follow MAE and use a 75% masking ratio on input image. During the downstream tasks, we use the embeddings of the \([\mathrm{CLS}]\) token to predict the class labels.

Experiment setup.We follow the setup in He et al. (2022) to pretrain and evaluate the ViT. For pertaining, we train the ViT for 4000 epochs. For linear probing, we freeze the encoder's weight and train the last layer on the specific datasets for 2000 epochs. We use a batch size of 512 for pretraining and a batch size of 128 for linear probing.

Figure 2: The effect of SepNorm on feature distributions. Each subplot shows the distributions of the first 50 feature dimensions: \([\mathrm{CLS}]\) features are in blue, and other tokens’ features are in red. The \([\mathrm{CLS}]\) features of ShareNorm are more concentrated around the mean and the mean deviates more from the zero centers, while in SepNorm, the \([\mathrm{CLS}]\) distribution is more centered and flattened.

Experiment results.The results presented in Table 1 demonstrate the performances of our model and the baseline model. Our model consistently outperforms the baseline across multiple datasets, indicating its effectiveness in image classification tasks. In the STL-10 dataset, our approach achieves the top-1 accuracy of 93.84% and the top-5 accuracy of 99.7%, higher than the baseline's respective accuracies of 92.01% and 99.5%. Similar improvements are observed in the Aircraft, SVHN, and Flower datasets, where our model consistently outperforms the baseline in both top-1 and top-5 accuracies. These results demonstrate the effectiveness of SepNorm in enhancing image classification performance. We also visualize the embeddings of ShareNorm and SepNorm using t-SNE in Figure 3. Compared with ShareNorm, SepNorm provides embeddings that have better separation among different classes.

### Natural Language Processing

Datasets.We evaluated our approach using the STS dataset, which comprises seven semantic textual similarity (STS) tasks. These tasks, including STS 2012-2016 [1, 20, 20, 2015], STS Benchmark [14], and SICK-Relatedness [13]. We also evaluate our method on multiple transfer tasks, including MR [15], CR [12], SUBJ [15], MPQA [21], SST-2 [22], TREC Voorhees and Tice [23], and MRPC [17]. Following the evaluation settings of SimCSE [1], we use Spearman's correlation coefficient as the evaluation metric.

BERT and RoBERTa.We conduct our study with pretrained checkpoints of BERT (uncased) [17] and RoBERTa (cased) [12], instead of training them from scratch. Using pretrained models is common in this research field [1] because the findings are compatible with the common practice of finetuning pretrained models in actual learning tasks. This strategy also saves significant training time and computational resources, allowing us to extend the study to more learning tasks.

Experiment setup.We follow the experiment setup in Gao et al. [2021] and further finetune the BERT and RoBERTa models on English Wikipedia. We evaluate the models using established STS tasks and employ standard evaluation metrics such as Spearman's correlation.

\begin{table}
\begin{tabular}{l c c c c c c c c} \hline \hline  & \multicolumn{2}{c}{STL10} & \multicolumn{2}{c}{Aircraft} & \multicolumn{2}{c}{SVHN} & \multicolumn{2}{c}{Flower} \\  & ACC@1 & ACC@5 & ACC@1 & ACC@5 & ACC@1 & ACC@5 & ACC@1 & ACC@5 \\ \hline MAE & 92.01 & 99.5 & 52.54 & 84.16 & 88.97 & 99.13 & 27.63 & 53.73 \\ + SepNorm & **93.84** & **99.7** & **59.02** & **86.65** & **89.18** & **99.21** & **32.51** & **60.92** \\ \hline \hline \end{tabular}
\end{table}
Table 1: Comparison of linear probing performance of ShareNorm and SepNorm across 4 image classification datasets when the ViT\({}_{\text{base}}\) is pretrained with MAE.

Figure 3: t-SNE visualization of representations learned from the STL-10 dataset.

Experiment results.The experiment results presented in Table 2 highlight the performance of our model compared to the SimCSE baseline on NLP tasks. With the SepNorm layer, BERTbase and RoBERTbase achieve overall higher average accuracy compared to ShareNorm's average accuracy. Only in the transfer learning tasks, SepNorm works slightly worse than ShareNorm in BERTbase, but the difference is marginal.

### Prediction of Molecule Properties

Datasets.We conducted experiments using the ZINC dataset [11], which contains approximately 250,000 molecular graphs. The task is to predict the properties of molecules from their graphs. We use a subset of 12,000 molecular graphs, as recommended by the benchmarking methodology outlined in [15], so that our results are comparable with other studies. Despite being smaller, the subset retained sufficient diversity and complexity for effective evaluation. We also the MolHIV dataset from the OGB [10] collection, which is widely used for training and evaluating graph-based models in molecular property prediction tasks.

Graphormer.We use Graphormer [21] as the transformer backbone to construct the predicting model. To obtain graph-level information, Graphormer adds a special node [VNode] to the graph and connects it to all normal graph nodes. The embedding of [VNode] is a summary of the entire graph and will be used in downstream classification tasks. The special node [VNode] serves the same purpose as the \([\mathrm{CLS}]\) token in traditional Transformer models. Graphormer has used three encodings to enhance the transformer's learning ability: centrality encoding captures node importance, spatial encoding considers spatial relations, and edge encoding incorporates edge features.

Experiment setup.We strictly follow Graphormer [21] in terms of the model architecture, hyperparameters, and training strategies. We replaced the ShareNorm in Graphormer with SepNorm to investigate the effectiveness of the proposed component. We evaluate the pretrained model on a broad class of graph-level prediction tasks. We report the mean absolute error for the ZINC and ZINC (subset) datasets and the area under the curve (AUC) for the MolHIV dataset.

\begin{table}
\begin{tabular}{l l c c c c c c c} \hline \hline  & & STS12 & STS13 & STS14 & STS15 & STS16 & STS-B & SICK-R & Avg. \\ \hline \multicolumn{10}{c}{Unsupervised Training} \\ \hline BERTbase & ShareNorm & 65.28 & 78.82 & 69.65 & 79.02 & 77.21 & 76.4 & **71.74** & 74.04 \\  & SepNorm & **67.01** & **82.16** & **72.48** & **81.38** & **79.11** & **77.56** & 71.36 & **75.87** \\ \hline RoBERTbase & ShareNorm & **68.25** & 81.24 & 72.78 & 81.38 & **80.31** & 79.83 & 68.16 & 76.00 \\  & SepNorm & 66.63 & **82.40** & **74.47** & **82.39** & **80.44** & **81.14** & **69.44** & **76.70** \\ \hline \multicolumn{10}{c}{Supervised Training} \\ \hline BERTbase & ShareNorm & **77.72** & 81.07 & **78.97** & **85.15** & **82.00** & 82.36 & **79.74** & 81.00 \\  & SepNorm & 75.32 & **84.41** & **79.94** & 84.91 & 80.87 & **83.63** & **79.61** & **81.23** \\ \hline RoBERTbase & ShareNorm & **77.38** & 80.87 & 78.72 & 84.02 & **82.56** & 83.08 & 78.25 & 80.70 \\  & SepNorm & 75.80 & **84.94** & **80.33** & **85.51** & 82.11 & **84.88** & **79.72** & **81.90** \\ \hline \multicolumn{10}{c}{Transfer Learning} \\ \hline BERTbase & ShareNorm & **82.78** & 88.79 & **94.69** & **89.86** & **87.94** & **84.44** & **75.99** & **86.36** \\  & SepNorm & **82.82** & **89.08** & 94.30 & 89.70 & **87.97** & 83.88 & 75.21 & 86.14 \\ \hline RoBERTbase & ShareNorm & 84.45 & **91.50** & 93.94 & **89.45** & 90.96 & 86.80 & **76.13** & 87.61 \\  & SepNorm & **85.11** & **91.56** & **94.30** & **89.43** & **91.66** & **90.96** & 75.58 & **88.37** \\ \hline \hline \end{tabular}
\end{table}
Table 2: Sentence embedding performance on STS tasks and transfer tasks.

\begin{table}
\begin{tabular}{l c c c c c c c} \hline \hline Dataset & ZINC & ZINC (subset) & MolHIV \\ \hline Metrics & \multicolumn{3}{c}{Mean absolute error\(\downarrow\)} & AUC\(\uparrow\) \\ \hline Graphormer & 0.069 & 0.164 & 73.36\% + SepNorm & **0.052** & **0.144** & **75.64\%** \\ \hline \hline \end{tabular}
\end{table}
Table 3: A comparison of ShareNorm and SepNorm in three tasks of graph property prediction.

Experiment results.Table 3 shows the performances of our model and the Graphormer baseline. For the ZINC datasets, Graphormer with SepNorm achieves a significantly lower mean absolute error compared to that with ShareNorm. On the MolHIV dataset, SepNorm also improves the AUC to 75.64%, compared with ShareNorm's AUC of 73.36%. These results are strong evidence that the embeddings of the [VNode] can better summarize the properties of the entire graph and thus give superior performance on downstream tasks.

### Uniformity Analysis

In this section, we investigate how, under both non-contrastive and contrastive training methods, ShareNorm and SepNorm respectively affect the uniformity of learned embeddings and further classification performances.

Experiment setup.We pretrain MAE on the STL10 dataset via four different losses:

* MAE loss \(\mathcal{L}_{\mathrm{MAE}}\) without any \(\mathcal{L}_{\mathrm{unif}}\) on \([\mathrm{CLS}]\) and token embeddings. This setting is a study with MAE training only.
* MAE loss \(\mathcal{L}_{\mathrm{MAE}}\) with \(\mathcal{L}_{\mathrm{unif}}\) on the \([\mathrm{CLS}]\) embeddings. We treat all \([\mathrm{CLS}]\) embeddings within the same batch (except itself) as negative instances.
* MAE loss \(\mathcal{L}_{\mathrm{MAE}}\) with \(\mathcal{L}_{\mathrm{unif}}\) on the token embeddings. We treat all token embeddings within the same batch or same images (except itself) as negative instances.
* MAE loss \(\mathcal{L}_{\mathrm{MAE}}\) with \(\mathcal{L}_{\mathrm{unif}}\) on both \([\mathrm{CLS}]\) and token embeddings.

We choose \(\lambda=\{0,0.01,0.1,1\}\). Note that the second loss with \(\lambda=0.1\) corresponds to the U-MAE [Zhang et al., 2022]. We also replace the normalization layer of the ViT in MAE with one of the following: [LN, BN, BN+LN, BN+BN]. The combination of different losses, different \(\lambda\)'s, and different normalization layers yields 40 specifications of the experiments.

We first report our results with MAE training only. The uniformity of learned embeddings is first measured by singular values of the decomposition of an embedding matrix: we randomly choose 10k embeddings to form the matrix. We do this separately for \([\mathrm{CLS}]\) embeddings and normal token embeddings. Figrue 4 shows the results, which indicate that \([\mathrm{CLS}]\) features learned from SepNorm exhibit better representational power and thus can better encode the global information.

Then the uniformity is measured by the score in Eqn. 4. Table 6(a) shows the numerical value of the uniformity on the STL10 and Aircraft datasets [Coates et al., 2011, Maji et al., 2013]. Compared to ShareNorm, **SepNorm significantly enhances the uniformity of \([\mathrm{CLS}]\) embeddings**. Interestingly, the uniformity of normal tokens' embeddings remains comparable. We also empirically verify that better uniformity on the \([\mathrm{CLS}]\) embeddings results in better performance on the downstream task (Figrue 6(b)). Another observation is that the uniformity of \([\mathrm{CLS}]\) embeddings is clearly improved when they are normalized by BN instead of LN. Our hypothesis is that BN tries to make each feature dimension useful by controlling its variance while LN may still neglect some feature dimensions.

Figure 4: **(a) Reconstruction loss of the MAE pertaining – MAE with SepNorm achieves lower MSE loss compared to ShareNorm, demonstrating a better ability to encode global contextual information. (b) & (c) Comparison of the singular values of learned (\([\mathrm{CLS}]\) and normal token) features with ShareNorm and different configurations of SepNorm. \([\mathrm{CLS}]\) embeddings learned from SepNorm have larger singular values, which suggests that vectors are better used to encode information.**

We then report results from studies with U-MAE training. Figure 5 shows the uniformity metrics obtained using different \(\lambda\)'s. When using ShareNorm, the uniformity of the \([\mathrm{CLS}]\) embeddings is no better than -3.088, and even the explicit uniformity loss does not help much. On the contrary, embeddings learned from the proposed SepNorm can easily achieve better uniformity scores. The study with the contrastive approach further verifies the advantage of SepNorm in terms of encouraging uniformity of \([\mathrm{CLS}]\) embeddings.

The results provide strong evidence that **the uniformity of the \([\mathrm{CLS}]\) embeddings is held down by ShareNorm even the minimization of an explicit contrastive loss cannot increase it**. We hypothesize that all features after LN will distribute in the same sphere, and \([\mathrm{CLS}]\) embeddings are squeezed to a small area of the sphere surface because they need to be different from embeddings of normal tokens.

Table 4 reports the downstream performance (accuracy) on STL10 across 40 different settings. We summarize our observations: (1) In the non-contrastive method MAE, with proper configuration, the performance of SepNorm is superior to that of ShareNorm. (2) In contrastive methods (\(\lambda\neq 0\)), SepNorms' advantages are further highlighted. For example, when \(\lambda=1\), the performance of SepNorm (BN+LN) is improved by 1.6% compared to the non-contrastive method. The performance gain in SepNorm (BN+BN) is less obvious as the double BNs already impose implicit uniformity loss on both \([\mathrm{CLS}]\) and token embeddings.

In contrast to SepNorm, the performance of ShareNorm is less satisfactory when using contrastive methods. We believe it is very challenging to encourage the two types of embeddings to be uniformly distributed in the same sphere and keep them separable at the same time. (3) The uniformity of the token embeddings is also vital for learning a good \([\mathrm{CLS}]\) representation, as evident by SepNorm (BN+LN) gaining accuracy with increasing \(\lambda\) on the token embeddings. We hypothesize that by enforcing uniformity, the token embeddings are forced to contain less information about others, which encourages the \([\mathrm{CLS}]\) embedding to encode as much information as possible. Our empirical study also shows that, when contrastive loss [1] is used to encourage the uniformity of \([\mathrm{CLS}]\) features in self-supervised transformers, the difference between BN and LN on \([\mathrm{CLS}]\) features is not significant anymore.

## 5 Related Works

The training of transformer architectures with self-supervised learning has seen significant advancements in both contrastive and non-contrastive training. Among self-supervised learning methods,

Figure 6: Uniformity Analysis. **(a)** Under SepNorm, the uniformity of the \([\mathrm{CLS}]\) embeddings are better preserved on the STL10 and Aircraft datasets. **(b)** Uniformity is positively related to the downstream task performance – lower uniformity results in higher classification accuracy on the STL10 dataset.

non-contrastive ones do not rely on negative samples for learning. They have emerged as a powerful approach for training transformer models and demonstrated remarkable successes in various tasks. BERT [14] and RoBERTa [17] were proposed in the NLP domain. Additionally, there are some works focus on the specific task, such as speech recognition [21], image generation [15], and heterogeneous graph generation [16].

Contrastive methods on the contrary train networks using positive and negative samples that are constructed without manual labeling. They have also been used to train transformer-based architectures. Gao et al. [20] and Zhang et al. [21] make significant strides in natural language processing tasks, while Chen et al. [20] provide valuable insights into the pre-training of transformers. Meanwhile, the potential of contrastive methods in vision transformers has been demonstrated by Caron et al. [20] and Radford et al. [20]. These collective efforts underscore the versatility and efficacy of contrastive methods in self-supervised learning of transformers.

Normalization layers, including layer normalization and batch normalization, are essential to transformer architectures because they help stabilize the training procedure and accelerate convergence. Xiong et al. [20] delve into the role of layer normalization in the transformer architecture and provide insights about how the layer improves the training stability and the performance of transformers. Similarly, Xu et al. [20] explores the intricacies of layer normalization and offers potential enhancements to its effectiveness. To address the limitations of traditional batch normalization in a transformer architecture, Shen et al. [20] introduces a new normalization layer, Powernorm, which is a variant of batch normalization. Nguyen and Salazar [20] focus on the normalization process in the self-attention mechanism of transformers and propose methods to optimize the normalization of self-attention. All the efforts above underscore the critical role of normalization layers in transformer models.

## 6 Conclusion

In this work, we have introduced SepNorm to separate the normalization of \([\mathrm{CLS}]\) embeddings from that of other tokens. Across three application domains (images, text, and graphs), SepNorm shows consistent performance improvement when it is incorporated into transformer models. Our analysis shows that SepNorm promotes uniformity of \([\mathrm{CLS}]\) embeddings and thus enhances the transformers' ability to encode information. As a valuable technique for improving the foundational transformer architecture, SepNorm has the potential to benefit a wide range of applications.

## Acknowledgement

We thank all reviewers for their constructive feedback. This research is supported by the NIGMS of the National Institutes of Health, Awards R35GM148219, the Army Research Office, MURI program, contract # W911NF2210239, and NSF Award 1909536. Chen and Liu are also supported by the NSF CAREER Award # 2239869.

\begin{table}
\begin{tabular}{l c c c c c} \hline \hline Normalization layer & \(\lambda=0\) & Negative pairs & \(\lambda=0.01\) & \(\lambda=0.1\) & \(\lambda=1\) & Best \\ \hline \multirow{3}{*}{SepNorm (BN+BN)} & \multirow{3}{*}{93.84} & token & 93.65 & 94.15 & 93.94 & 94.15 \\  & & \([\mathrm{CLS}]\) & 93.73 & 93.85 & 93.93 & 93.93 \\  & & \([\mathrm{CLS}]\) + token & 93.40 & 94.25 & 94.28 & 94.28 \\ \hline \multirow{3}{*}{SepNorm (BN+LN)} & \multirow{3}{*}{92.80} & token & 92.98 & 93.60 & 94.30 & 94.30 \\  & & \([\mathrm{CLS}]\) & 92.98 & 93.48 & 93.36 & 93.48 \\  & & \([\mathrm{CLS}]\) + token & 92.74 & 93.18 & 94.40 & **94.40** \\ \hline \multirow{3}{*}{ShareNorm (BN)} & \multirow{3}{*}{92.84} & token & 92.48 & 93.38 & 92.78 & 93.38 \\  & & \([\mathrm{CLS}]\) & 93.10 & 93.33 & 92.93 & 93.33 \\  & & \([\mathrm{CLS}]\) + token & 93.41 & 93.46 & 92.99 & 93.46 \\ \hline \multirow{3}{*}{ShareNorm (LN)} & \multirow{3}{*}{92.01} & token & 92.61 & 92.74 & 92.14 & 92.74 \\  & & \([\mathrm{CLS}]\) & 92.28 & 92.75 & 92.36 & 92.75 \\ \cline{1-1}  & & \([\mathrm{CLS}]\) + token & 92.74 & 92.38 & 92.74 & 92.74 \\ \hline \hline \end{tabular}
\end{table}
Table 4: Ablation study of the effect of \([\mathrm{CLS}]\) and token uniformity on the downstream tasks with \(\lambda\) varied. We report downstream task accuracy for the STL10 dataset.

## References

* A. Dosovitskiy et al. (2020)A. Dosovitskiy, L. Beyer, A. Kolesnikov, D. Weissenborn, X. Zhai, T. Unterthiner, M. Dehghani, M.

V. P. Dwivedi, C. K. Joshi, T. Laurent, Y. Bengio, and X. Bresson. Benchmarking graph neural networks. 2020.
* Gao et al. (2021) T. Gao, X. Yao, and D. Chen. Simcse: Simple contrastive learning of sentence embeddings. _arXiv preprint arXiv:2104.08821_, 2021.
* Gu et al. (2020) Y. Gu, Z. Ding, S. Wang, L. Zou, Y. Liu, and D. Yin. Deep multifaceted transformers for multi-objective ranking in large-scale e-commerce recommender systems. In _Proceedings of the 29th ACM International Conference on Information & Knowledge Management_, pages 2493-2500, 2020.
* Han et al. (2021) K. Han, A. Xiao, E. Wu, J. Guo, C. Xu, and Y. Wang. Transformer in transformer. _Advances in Neural Information Processing Systems_, 34:15908-15919, 2021.
* Han et al. (2022) K. Han, Y. Wang, H. Chen, X. Chen, J. Guo, Z. Liu, Y. Tang, A. Xiao, C. Xu, Y. Xu, et al. A survey on vision transformer. _IEEE transactions on pattern analysis and machine intelligence_, 45(1):87-110, 2022.
* He et al. (2022) K. He, X. Chen, S. Xie, Y. Li, P. Dollar, and R. Girshick. Masked autoencoders are scalable vision learners. In _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pages 16000-16009, 2022.
* Hu and Liu (2004) M. Hu and B. Liu. Mining and summarizing customer reviews. In _Proceedings of the tenth ACM SIGKDD international conference on Knowledge discovery and data mining_, pages 168-177, 2004.
* Hu et al. (2020a) W. Hu, M. Fey, M. Zitnik, Y. Dong, H. Ren, B. Liu, M. Catasta, and J. Leskovec. Open graph benchmark: Datasets for machine learning on graphs. _Advances in neural information processing systems_, 33:22118-22133, 2020a.
* Hu et al. (2020b) Z. Hu, Y. Dong, K. Wang, and Y. Sun. Heterogeneous graph transformer. In _Proceedings of the web conference 2020_, pages 2704-2710, 2020b.
* Huang et al. (2020) X. S. Huang, F. Perez, J. Ba, and M. Volkovs. Improving transformer optimization through better initialization. In _International Conference on Machine Learning_, pages 4475-4483. PMLR, 2020.
* Ioffe and Szegedy (2015) S. Ioffe and C. Szegedy. Batch normalization: Accelerating deep network training by reducing internal covariate shift. In _International conference on machine learning_, pages 448-456. pmlr, 2015.
* Irwin and Shoichet (2005) J. J. Irwin and B. K. Shoichet. Zinc- a free database of commercially available compounds for virtual screening. _Journal of chemical information and modeling_, 45(1):177-182, 2005.
* Jing et al. (2021) L. Jing, P. Vincent, Y. LeCun, and Y. Tian. Understanding dimensional collapse in contrastive self-supervised learning. _arXiv preprint arXiv:2110.09348_, 2021.
* Karmakar et al. (2021) P. Karmakar, S. W. Teng, and G. Lu. Thank you for attention: a survey on attention-based artificial neural networks for automatic speech recognition. _arXiv preprint arXiv:2102.07259_, 2021.
* Liu et al. (2019) Y. Liu, M. Ott, N. Goyal, J. Du, M. Joshi, D. Chen, O. Levy, M. Lewis, L. Zettlemoyer, and V. Stoyanov. Roberta: A robustly optimized bert pretraining approach. _arXiv preprint arXiv:1907.11692_, 2019.
* Maji et al. (2013) S. Maji, E. Rahtu, J. Kannala, M. Blaschko, and A. Vedaldi. Fine-grained visual classification of aircraft. _arXiv preprint arXiv:1306.5151_, 2013.
* Marelli et al. (2014) M. Marelli, S. Menini, M. Baroni, L. Bentivogli, R. Bernardi, R. Zamparelli, et al. A sick cure for the evaluation of compositional distributional semantic models. In _Lrec_, pages 216-223. Reykjavik, 2014.
* Medhat et al. (2014) W. Medhat, A. Hassan, and H. Korashy. Sentiment analysis algorithms and applications: A survey. _Ain Shams engineering journal_, 5(4):1093-1113, 2014.
* Netzer et al. (2011) Y. Netzer, T. Wang, A. Coates, A. Bissacco, B. Wu, and A. Y. Ng. Reading digits in natural images with unsupervised feature learning. 2011.
* Wang et al. (2014)T. Q. Nguyen and J. Salazar. Transformers without tears: Improving the normalization of self-attention. _arXiv preprint arXiv:1910.05895_, 2019.
* Nilsback and Zisserman (2008) M.-E. Nilsback and A. Zisserman. Automated flower classification over a large number of classes. In _2008 Sixth Indian Conference on Computer Vision, Graphics & Image Processing_, pages 722-729. IEEE, 2008.
* Oord et al. (2018) A. v. d. Oord, Y. Li, and O. Vinyals. Representation learning with contrastive predictive coding. _arXiv preprint arXiv:1807.03748_, 2018.
* Pang and Lee (2004) B. Pang and L. Lee. A sentimental education: Sentiment analysis using subjectivity summarization based on minimum cuts. _arXiv preprint cs/0409058_, 2004.
* Pang and Lee (2005) B. Pang and L. Lee. Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales. _arXiv preprint cs/0506075_, 2005.
* Radford et al. (2021) A. Radford, J. W. Kim, C. Hallacy, A. Ramesh, G. Goh, S. Agarwal, G. Sastry, A. Askell, P. Mishkin, J. Clark, et al. Learning transferable visual models from natural language supervision. In _International conference on machine learning_, pages 8748-8763. PMLR, 2021.
* Shen et al. (2020) S. Shen, Z. Yao, A. Gholami, M. Mahoney, and K. Keutzer. Powernorm: Rethinking batch normalization in transformers. In _International Conference on Machine Learning_, pages 8741-8751. PMLR, 2020.
* Socher et al. (2013) R. Socher, A. Perelygin, J. Wu, J. Chuang, C. D. Manning, A. Y. Ng, and C. Potts. Recursive deep models for semantic compositionality over a sentiment treebank. In _Proceedings of the 2013 conference on empirical methods in natural language processing_, pages 1631-1642, 2013.
* Steiner et al. (2021) A. Steiner, A. Kolesnikov, X. Zhai, R. Wightman, J. Uszkoreit, and L. Beyer. How to train your vit? data, augmentation, and regularization in vision transformers. _arXiv preprint arXiv:2106.10270_, 2021.
* Sun et al. (2019) F. Sun, J. Liu, J. Wu, C. Pei, X. Lin, W. Ou, and P. Jiang. Bert4rec: Sequential recommendation with bidirectional encoder representations from transformer. In _Proceedings of the 28th ACM international conference on information and knowledge management_, pages 1441-1450, 2019.
* Vaswani et al. (2017) A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and I. Polosukhin. Attention is all you need. _Advances in neural information processing systems_, 30, 2017.
* Voorhees and Tice (2000) E. M. Voorhees and D. M. Tice. Building a question answering test collection. In _Proceedings of the 23rd annual international ACM SIGIR conference on Research and development in information retrieval_, pages 200-207, 2000.
* Wang and Isola (2020) T. Wang and P. Isola. Understanding contrastive representation learning through alignment and uniformity on the hypersphere. In _International Conference on Machine Learning_, pages 9929-9939. PMLR, 2020.
* Wang et al. (2020) Y. Wang, A. Mohamed, D. Le, C. Liu, A. Xiao, J. Mahadeokar, H. Huang, A. Tjandra, X. Zhang, F. Zhang, et al. Transformer-based acoustic modeling for hybrid speech recognition. In _ICASSP 2020-2020 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)_, pages 6874-6878. IEEE, 2020.
* Wiebe et al. (2005) J. Wiebe, T. Wilson, and C. Cardie. Annotating expressions of opinions and emotions in language. _Language resources and evaluation_, 39:165-210, 2005.
* Wu et al. (2020) L. Wu, S. Li, C.-J. Hsieh, and J. Sharpnack. Sse-pt: Sequential recommendation via personalized transformer. In _Proceedings of the 14th ACM Conference on Recommender Systems_, pages 328-337, 2020.
* Xiong et al. (2020) R. Xiong, Y. Yang, D. He, K. Zheng, S. Zheng, C. Xing, H. Zhang, Y. Lan, L. Wang, and T. Liu. On layer normalization in the transformer architecture. In _International Conference on Machine Learning_, pages 10524-10533. PMLR, 2020.
* Xu et al. (2019) H. Xu, Q. Liu, J. van Genabith, D. Xiong, and J. Zhang. Lipschitz constrained parameter initialization for deep transformers. _arXiv preprint arXiv:1911.03179_, 2019a.
* Xu et al. (2019)J. Xu, X. Sun, Z. Zhang, G. Zhao, and J. Lin. Understanding and improving layer normalization. _Advances in Neural Information Processing Systems_, 32, 2019b.
* Ying et al. (2021) C. Ying, T. Cai, S. Luo, S. Zheng, G. Ke, D. He, Y. Shen, and T.-Y. Liu. Do transformers really perform badly for graph representation? _Advances in Neural Information Processing Systems_, 34:28877-28888, 2021.
* Zhang et al. (2022) Q. Zhang, Y. Wang, and Y. Wang. How mask matters: Towards theoretical understandings of masked autoencoders. _arXiv preprint arXiv:2210.08344_, 2022.
* Zhou et al. (2020) W. Zhou, T. Ge, K. Xu, F. Wei, and M. Zhou. Scheduled drophead: A regularization method for transformer models. _arXiv preprint arXiv:2004.13342_, 2020.