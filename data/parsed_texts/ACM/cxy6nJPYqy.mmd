# Span-Pair Interaction and Tagging for Dialogue-Level Aspect-Based Sentiment Quadruple Analysis

Anonymous Author(s)

Submission Id: 259

###### Abstract.

The Dialogue-level Aspect-based Sentiment Quadruple analysis (DiaASQ) task has recently received attention in the Aspect-Based Sentiment Analysis (ABSA) field. It aims to extract _target_, _aspect_, _opinion_, _sentiment_) quadruples from multi-turn and multi-party dialogues. Compared to previous ABSA tasks focusing on text such as sentences, the DiaASQ task involves more complex contextual information and corresponding relations between terms, as well as longer sequences. These characteristics challenge existing methods that struggle to model explicit span-level interactions or have high computational costs. In this paper, we propose a span-pair interaction and tagging method to solve these issues, which includes a novel Span-pair Tagging Scheme (STS) and a simple and efficient Multi-level Representation Model (MRM). STS simplifies the DiaASQ task to a span-pair tagging task and explicitly captures complete span-level semantics by tagging span pairs. MRM efficiently models the dialogue structure information and span-level interactions by constructing multi-level contextual representation. Besides, we train a span ranker to improve the running efficiency of MRM. Extensive experiments on multilingual datasets demonstrate that our method outperforms existing state-of-the-art methods.

Natural language processing, Aspect-based sentiment analysis, Quadruple extraction, Dialogue scene +
Footnote †: ccs: Computing methodologies Natural language processing

+
Footnote †: ccs: Computing methodologies Natural language processing

+
Footnote †: ccs: Computing methodologies Natural language processing

+
Footnote †: ccs: Computing methodologies Natural language processing

+
Footnote †: ccs: Computing methodologies Natural language processing

+
Footnote †: ccs: Computing methodologies Natural language processing

+
Footnote †: ccs: Computing methodologies Natural language processing

+
Footnote †: ccs: Computing methodologies Natural language processing

+
Footnote †: ccs: Computing methodologies Natural language processing

+
Footnote †: ccs: Computing methodologies Natural language processing

## 1. Introduction

Aspect-Based Sentiment Analysis (ABSA) is a crucial research field in natural language processing, which aims to determine the sentiment polarities towards specific aspects of targets (Han et al., 2016; Krizhevsky et al., 2012). ABSA has found wide applications in E-commerce platforms, where it helps improve products and services based on customer feedback from web content.1 In recent years, there has been a growing trend of discussing products and services through multi-turn and multi-party dialogues on social media platforms such as Twitter and Weibo. However, existing ABSA methods (Bahdanau et al., 2015; Krizhevsky et al., 2012; Krizhevsky et al., 2012; Krizhevsky et al., 2012; Krizhevsky et al., 2012; Krizhevsky et al., 2012; Krizhevsky et al., 2012; Krizhevsky et al., 2012; Krizhevsky et al., 2012) primarily focus on text-level ABSA tasks, analyzing individual texts such as sentences and documents while ignoring more complex and dynamic dialogue scenes.

Footnote 1: **Relevance to the Web:** ABSA belong to Sentiment analysis and _opinion_ mining Topic of _Web-Mining and Content Analysis_ Track, which aims to analyze and extract structural sentiment information from web content. The works involved in this paper aim to make web content more harmless and helpful for online shopping and communication.

To address this limitation and promote the development of dialogue-level ABSA, Li et al. (Li et al., 2016) proposed the Dialogue-level Aspect-based Sentiment Quadruple analysis (DiaASQ) task. This task aims to extract _target_, _aspect_, _opinion_, _sentiment_) quadruples from multi-turn and multi-party dialogues, as illustrated in Figure 1. Compared to text-level ABSA tasks, DiaASQ exhibits the following characteristics: 1) More complex contextual information resulting from the structure of multi-turn and multi-party dialogues. 2) More complex corresponding relations between terms resulting from more types of terms (a new term _target_). 3) Longer sequences due to the inclusion of multiple utterances in dialogue. These characteristics challenge existing methods in addressing the DiaASQ task.

Figure 1. An example of a DiaASQ task. The capital letters \(A_{i}\), \(B\), \(C\), and \(D\) identify the speakers. Dotted lines with arrows show the reply relations between utterances. The quadruple consists of three terms (i.e., _target_, _aspect_, _opinion_) and a sentiment polarity.

Token-pair tagging is a popular method for text-level ABSA tasks [4, 17, 26, 34], and Li et al. [14] extended the classical token-pair tagging method GTS [26] for the DiaASQ task. As illustrated on the left side of Figure 2, given a dialogue snippet containing \(N\) tokens, the method first extracts terms, relations, and sentiment polarities by tagging each token pair in an \(N\times N\) token-level matrix and then decodes quadruples from the extracted results. **However, the token-pair tagging method cannot capture complete semantic information of spans due to the lack of span-level modeling and interactions.** For example, this method identifies the token pair (_iPhone, not_) with _negative_ sentiment and the (_6, good_) with _positive_ sentiment, leading to failure to determine the sentiment polarity of the quadruple. The complex contextual information and corresponding relations between terms in the DiaASQ task exacerbate the issue. To this end, some works [6, 10, 28] proposed span-level enumeration methods to capture the complete span-level semantic information. **However, this method leads to high computational costs and label sparsity problems due to the more types of terms and longer sequences involved in the DiaASQ task.** As shown on the right side of Figure 2, this method enumerates spans to create a span list of size \(L=N(N+1)/2\). Then, it arranges spans into (_target, aspect, opinion_) triplets and predicts their sentiment polarities, leading to a high time complexity (\(O(L^{3})\)). Besides, the abundant invalid triplets cause label sparsity problems that hinder training from reaching optimal performance. In this paper, we propose a span-pair interaction and tagging method, comprising a novel Span-pair Tagging Scheme (STS) and a simple and efficient Multi-level Representation Model (MRM), to solve the issues of the above two kinds of methods. In contrast to previous works of tagging token pairs, STS can explicitly capture complete span-level semantic information by tagging span pairs in the span-level matrix. Meanwhile, MRM generates the \(L\times L\) span-level matrix by modeling the multi-level information. Compared to the span-level enumeration method, MRM exhibits stable time complexity at \(O(L^{2})\) and does not increase with the number of term types.

Concretely, STS extracts target, aspect, and opinion terms by tagging the span-level matrix diagonal. It also extracts the type of relations between terms and sentiment polarities by tagging the strictly upper triangular region of the matrix. Then, STS decodes quadruples under the verification of terms and the type of relations between terms. Furthermore, MRM models the dialogue structure information at the token level by self-attention mechanism [24] and models interactions between spans at the span level by Hadamard product operation, respectively. It enumerates all spans and constructs a \(L\times L\) span-level matrix. Then, it obtains quadruples with the help of STS. The simple structure of MRM ensures the \(O(L^{2})\) time complexity. Besides, we train a span ranker to improve the running efficiency of MRM. It further optimizes the time complexity to \(O(K^{2})\) by selecting the top \(K\) spans to reduce the size of the matrix from \(L\times L\) to \(K\times K\) (\(K\ll L\), \(K<N\), \(N\) is the number of tokens, and \(L\) is the number of spans). Our contribution can be summarized as follows:

(1) We design a Span-pair Tagging Scheme (STS) that explicitly capture complete span-level semantic information by tagging span pairs rather than token pairs. To our best knowledge, this is the first time to solve the dialogue-level ABSA task by tagging span pairs.

(2) We propose a simple and efficient Multi-level Representation Model (MRM), which explicitly models the dialogue information and the interactions between spans at the token and span level, respectively. Besides, we train a span ranker to make MRM run more efficiently than previous models.

(3) We conduct extensive experiments on multilingual DiaASQ datasets. The experimental results demonstrate that our method outperforms the state-of-the-art methods.2

Footnote 2: The code and datasets is located in Anonymous GitHub: [https://anonymous.depen.science.it/WWW24-ID259](https://anonymous.depen.science.it/WWW24-ID259).

## 2. Related Work

### Text-level Aspect-Based Sentiment Analysis

Text-level Aspect-Based Sentiment Analysis (ABSA) is a fine-grained sentiment analysis problem that aims to determine the opinion and sentiment polarity at the aspect level from sentences or documents [12, 18, 23, 33, 36]. Early works focused on single ABSA tasks such as Aspect Term Extraction (ATE) [19, 25] and Aspect Sentiment Classification (ASC) [8, 15, 27]. However, recent studies have explored compound ABSA tasks such as Aspect-Opinion Pair

Figure 2. _Left:_ Token-pair tagging method proposed by Li et al. [14]. The T/A/O label denotes the target/aspect/opinion term. The h2h and t2t identify the relation between spans by aligning the head and tail tokens between spans. The sentiment polarity label is attached to the h2h and t2t labels between the target and opinion terms. _Right:_ Span-level enumeration method.

Extraction (AOPE) (Gir et al., 2014; Chen et al., 2015; Chen et al., 2016), Aspect Sentiment Triplet Extraction (ASTE) (Gir et al., 2014; Chen et al., 2015; Chen et al., 2016; Chen et al., 2016), and Aspect Sentiment Quad Prediction (ASQP) (Chen et al., 2016; Chen et al., 2016) due to their practicality. Next, we will focus on the ASTE task and provide a detailed explanation of its methods as it is most relevant to the DiaASQ task. ASTE is a prevalent compound ABSA task that aims to extract _(aspect, opinion, sentiment)_ triplets from texts such as sentences (Wu et al., 2016). Wu et al. (2016) proposed the Grid Tagging Scheme (GTS) for the ASTE task. GTS extracts aspect terms, opinion terms, and sentiment polarities by tagging token pairs. To alleviate the boundary insensitivity and relation inconsistency problems of GTS, Zhang et al. (2016) and Liang et al. (2016) proposed Boundary-Driven Table-Filling (BDTF) and Span TAgging and Greed inference (STAGE) methods, respectively. However, these methods cannot explicitly capture complete span-level semantic information because they all belong to the token-pair tagging scheme. To this end, span-level enumeration methods are proposed (Chen et al., 2016; Chen et al., 2016; Chen et al., 2016). This method enumerates all spans, arranges them into _(aspect, opinion)_ pairs, and predicts their sentiment polarities. Xu et al. (2016) proposed an end-to-end model, Span-ASTE, which includes a dual-channel span pruning strategy to ease the high computational cost. Chen et al. (Chen et al., 2016) proposed a span-level bidirectional network to extract triplets from both aspect-to-opinion and opinion-to-aspect directions. Feng et al. (2016) infused syntax knowledge into the span-level enumeration method. However, the time complexity of the span-level enumeration methods increases exponentially with the increase of the term types.

### Dialogue-level Aspect-based Sentiment Quadruple Analysis

In recent years, there has been a proliferation of conversational scenes on social media platforms. Individuals increasingly use posts and comments on sites such as Twitter and Weibo to discuss products and services in a dialogue format. In order to promote the development of ABSA in dialogue scenarios, Li et al. (2014) proposed the Dialogue-level Aspect-based Sentiment Quadruple analysis (Di-aASQ) task and annotated large-scale datasets in both Chinese and English. The DiaASQ task aims to extract _(target, aspect, opinion, sentiment)_ quadruples given multi-turn and multi-party dialogues. Compared with text-level ABSA, DiaASQ adds the new term _target_, which denotes words or phrases that refer to the evaluated object, such as _iPhone 6_. Li et al. (2014) proposed an end-to-end token-pair tagging method based on GTS (Li et al., 2014). The method models the dialogue information by a multi-head attention mechanism (Li et al., 2014) and designs a new token-pair tagging scheme. However, it still cannot explicitly capture the complete span-level semantic information. Besides, Li et al. (2014) evaluated the span-level enumeration method on the DiaASQ task. However, high computational costs and label sparsity problems caused by characteristics of the DiaASQ task degrade its performance and efficiency. Before the span pair-level method proposed in this paper, no work could still efficiently model full span-level semantics in the DiaASQ task.

## 3. Methodology

### Task Formulation

A dialogue contains multiple utterances \(D=(u_{1},u_{2},\cdots,u_{|D|})\) with the corresponding reply sequence \(Re=(re_{1},re_{2},\cdots,re_{|D|})\) and speaker sequence \(Sp=(sp_{1},sp_{2},\cdots,sp_{|D|})\), where \(re_{i}\) denotes the index of the utterance that the \(i\)-th utterance replies to and \(sp_{i}\) denotes the speaker identity of the \(i\)-th utterance3. The goal of the DiaASQ task is to extract all _(target, aspect, opinion, sentiment)_ quadruples in \(D\). The quadruple set is denoted as:

Footnote 3: The \(|*|\) denotes the number of elements in the collection \(*\).

\[Q=\{(t_{k},a_{k},a_{k},p_{k})\}_{k=1}^{|Q|}, \tag{1}\]

where \(t\), \(a\), and \(a\) are spans from origin dialogue \(D\) and represent target, aspect, and opinion term, respectively. \(p\in\{positive,negative,other\}\) is sentiment polarity.

### Span-pair Tagging Scheme

In this section, we first introduce the definition of span-pair labels. Then, we provide a straightforward decoding process. Finally, we summarize several differences between the Span-pair Tagging Scheme (STS) and the token-pair tagging scheme proposed by Li et al. (2014) to further emphasize the advantages of STS.

#### 3.2.1. The Definition of Span-pair Labels

1) Term Types: We use the T, A, and O labels to denote the target, aspect, and opinion terms. For example, the _screen_ is an aspect term if the span pair (_screen, screen)_ is tagged with A. 2) Relations between Terms: We use TA, AO, and TO labels to denote the three relations between terms, namely target-aspect relation, aspect-opinion relation, and target-opinion relation. For example, if the span pair (_iPhone 12, screen)_ is tagged with TA, the relation between _iPhone 12_ and _screen_ is a target-aspect relation. 3) Sentiment Polarities: We use POS, NEG, and OTH labels to denote the positive, negative, and other sentiment polarities. To ensure consistency in the tagging scheme,

Figure 3. An example of span-pair tagging. Due to the space constraints, we selected a few candidate spans from Figure 1 to form the span-level matrix.

we attach sentiment labels to the TO label to form TO-POS, TO-NEG, and TO-OTH labels. For example, there is a target-opinion relation with positive sentiment if the span pair (_iPhone 13, no lag_) is tagged with TO-POS. All span-pair labels are as follows:

\[\{\text{T},\text{A},\text{O},\text{TA},\text{AO},\text{TO-POS},\text{TO-NEG}, \text{TO-OTH},\text{None}\}. \tag{2}\]

Figure 3 shows a matrix tagged by span-pair labels. It is worth noting that labels \(\{\text{T},\text{A},\text{O}\}\) are only in the matrix diagonal, while labels \(\{\text{TA},\text{AO},\text{TO-POS},\text{TO-NEG},\text{TO-OTH}\}\) are only in the strictly upper triangular region of the matrix.

#### 3.2.2. The Decoding Process

The design of span-pair labels makes the decoding process more straightforward and intuitive. When decoding quadrupoles, we first obtain the (_target_, _spect_, _opinion_) triplets under the supervision of labels \(\{\text{T},\text{A},\text{O}\}\) and \(\{\text{TA},\text{AO}\}\). Then, we filter invalid triplets and identify sentiment polarities by labels \(\{\text{TO-POS},\text{TO-NEG},\text{TO-OTH}\}\). The detailed decoding process and algorithm are in the Appendix A.

#### 3.2.3. Differences from Token-pair Tagging Scheme

Li et al. (Li et al., 2018) first applied the token-pair tagging scheme to the DiaASQ task by retrofitting the GTS (Wang et al., 2018). For convenience, we refer to the token-pair tagging scheme proposed by Li et al. (Li et al., 2018) as the GTS-Dia scheme. Our STS differs from the GTS-Dia scheme in the following ways:

(1) **the granularity of tagging is different.** STS tags at the span level, while GTS-Dia scheme tags at the token level. Therefore, STS can explicitly capture the complete semantics of spans and model the span-level interactions while the GTS-Dia scheme fails.

(2) **The difficulty of tagging is different.** The labels \(\{\text{T},\text{A},\text{O}\}\) and labels \(\{\text{TA},\text{AO},\text{TO-POS},\text{TO-NEG},\text{TO-OTH}\}\) are distributed across different regions of the span-level matrix in the STS, which reduces the difficulty of tagging. In other words, the model can narrow down the choice of labels by identifying whether two spans in a span pair are the same or not. In contrast, in the GTS-Dia scheme, all labels will likely appear in the strictly upper triangular region of the token-level matrix, making tagging more challenging.

(3) **The difficulty and efficiency of decoding are different.** The decoding process of STS is both straightforward and intuitive thanks to the design of span-pair labels, as mentioned in section 3.2.2. However, the GTS-Dia scheme requires a human-designed heuristic algorithm for complicated situations. One such issue is the difficulty in determining the correspondence between hzh and tzt labels. Besides, it can be tricky to determine the sentiment polarity when the sentiment labels attached to hzh and tzt are different. These issues complicate the decoding process of the GTS-Dia scheme.

### Multi-level Representation Model

Figure 4 shows an overview of our Multi-level Representation Model (MRM).

**Token Encoding**: We use Pre-trained Language Models (PLMs) as the contextual encoder of the dialogue \(D=(u_{1},u_{2},\cdots,u_{|D|})\). In order to take full advantage of the capabilities of the PLMs, the whole dialogue \(D\) with \(\) and \(\) is fed into the PLMs:

\[I=(>,u_{1},/s>,\cdots,>,u_{|D|},</s>), \tag{3}\]

\[\mathbf{H}=(\mathbf{h}_{1},\mathbf{h}_{2},\cdots,\mathbf{h}_{|I|})=\text{PLMs }(I), \tag{4}\]

where \(\) and \(</s>\) denote special tokens of PLMs, \(\mathbf{h}_{i}\) denotes the contextual representation of the \(i\)-th token of input sequence \(I\). We construct the reply mask \(\mathbf{M}^{Re}\) and speaker mask \(\mathbf{M}^{Sp}\) to denote the reply sequence \(Re\) and speaker sequence \(Sp\), respectively. Following previous work (Li et al., 2018), we use multi-head self-attention mechanisms (Li et al., 2018) to infuse this information:

\[\mathbf{H}^{s}=\text{Masked-MultiHead-Attn}\left(\mathbf{Q},\mathbf{K},\mathbf{V},\mathbf{M}^{*}\right)\] \[=\text{softmax}\left(\frac{(\mathbf{Q}^{T}\mathbf{K})\odot\mathbf{M}^{*}}{\sqrt{d}}\right)\mathbf{V}, \tag{5}\]

where \(*\in\{Re,Sp\}\), \(\mathbf{Q}=\mathbf{K}=\mathbf{V}=\mathbf{H},\odot\) denotes Hadamard product operation, and \(d\) denotes the hidden size. Next, we use the MaxPooling operation to obtain the contextual representations of tokens with dialogue structure information:

\[\mathbf{H}^{f}=(\mathbf{h}_{1}^{f},\mathbf{h}_{2}^{f},\cdots,\mathbf{h}_{|I|}^{f})=\text{ MaxPooling}(\mathbf{H}^{Re},\mathbf{H}^{Sp}). \tag{6}\]

**Span Generating & Pruning**: We obtain the span list \(SL\) by enumerating all spans. Then, we define the contextual representation of each span by infusing boundary and width information and obtain the span's contextual representation list \(\mathbf{S}\) corresponding to \(SL\):

\[\mathbf{s}_{i}=[\mathbf{h}_{\text{START}(span_{i})}^{f},\mathbf{h}_{\text{END}( span_{i})}^{f},\mathbf{wemb}_{\ell}],\] \[\mathbf{S}=(\mathbf{s}_{1},\mathbf{s}_{2},...,\mathbf{s}_{L}), \tag{7}\]

Figure 4. Multi-level Representation Model.

where \(span_{i}\in SL\) denotes the \(i\)-th span, \(L=|SL|=|\mathbf{S}|\) denotes the total number of spans, \(\text{START}(span_{i})\) and \(\text{END}(span_{i})\) denotes the index of the start and end token for the \(i\)-th span, and \(\mathbf{wemb}_{i}\) denotes the learnable embeddings of width \(\ell=|\text{END}(span_{i})-\text{START}(span_{i})+1|\). In order to improve running efficiency, we train a Span Ranker (It will be described below) to prune \(SL\) and S. The Span Ranker gives the score of term types for \(span_{i}\):

\[score_{i}=P(\text{T}|span_{i})+P(\text{A}|span_{i})+P(\text{O}|span_{i}), \tag{8}\]

where \(P(\text{T}|span_{i})\) denotes the probability that the \(i\)-th span is predicted as the target term. Then, we use the contextual representations of the top \(K\) spans with the highest score to form a new contextual representation list:

\[\text{S}_{top}=\{\mathbf{s}_{1},\mathbf{s}_{2},\cdots,\mathbf{s}_{K}\}, \tag{9}\]

where \(|\text{S}_{top}|=K\ll L\).

**Span pair Generating & Classifying** To model the span-level interactions and the distance information between spans, we construct the contextual representation of each span pair as:

\[\mathbf{p}_{i,l}=[\mathbf{s}_{i},\mathbf{s}_{j},\mathbf{s}_{i}\odot\mathbf{s} _{j},\mathbf{demb}_{l}], \tag{10}\]

where \(\mathbf{demb}\) denotes the learnable embeddings of distance \(\ell=min(|\text{END}(span_{j})-\text{START}(span_{i})|,|\text{START}(span_{j} )-\text{END}(span_{i})|),\)\(1\leq i\leq j\leq K\) and \(\mathbf{s}_{i},\mathbf{s}_{j}\in\mathbf{S}_{top}\). The contextual representations of all span pairs form the upper triangular matrix of size \(K\times K\). We apply a Multi-Layer Perception (MLP) to predict the probability distribution of labels:

\[P(y_{i,j})=\text{softmax}(\text{MLP}(\mathbf{p}_{i,j})), \tag{11}\]

where the label \(y_{i,j}\) is distributed among nine categories, as shown in Formula 2.

**Decoding** Finally, we obtain all quadruples from the tagged span-level matrix with the help of STS.

### Span Ranker

We train a Part-Of-Speech-aware (POS-aware) Span Ranker to score candidate spans within the MRM. Like the MRM, we concatenate utterances by special tokens of PLMs and feed them into PLMs to obtain the initial contextual representation of tokens \(\mathbf{H}=(\mathbf{h}_{1},\mathbf{h}_{2},\cdots,\mathbf{h}_{|I|})\), as shown in Formulas 3 and 4.

In fact, the type of term is closely related to its POS. For example, the _target_ term is generally a proper noun or noun phrase, and the _opinion_ term is generally an adjective or adjective phrase. Therefore, we enumerate all spans and obtain their boundary POS information using natural language processing tools (NLTK4 for English and Jieba3 for Chinese). Besides, we use the AveragePooling operation to obtain the overall semantic representation of each span. The final contextual representation of each span is as follows:

Footnote 4: [https://www.nlk.org/](https://www.nlk.org/)

Footnote 5: [https://github.com/faspy/jieba](https://github.com/faspy/jieba)

\[\begin{split}\mathbf{s}_{a,b}^{sr}=[\mathbf{h}_{a},\mathbf{p} \mathbf{emb}_{pos},\mathbf{h}_{b},\mathbf{p}\mathbf{emb}_{pos},\mathbf{wemb}_{ [b-a+1]},\\ \text{AveragePooling}(\mathbf{h}_{a},\mathbf{h}_{a+1},\cdots,\mathbf{h }_{b})],\end{split} \tag{12}\]

where superscript \(sr\) is the abbreviation for Span Ranker, \(\mathbf{p}\mathbf{emb}_{pos}\) denotes the learnable embedding of POS _pos_, and \(pos_{a}\) denotes the POS of the \(a\)-th token. We apply a MLP to predict the probability distribution of labels:

\[P(y_{a,b}^{sr})=\text{softmax}(\text{MLP}(\mathbf{s}_{a,b}^{sr})), \tag{13}\]

where the label \(y_{a,b}^{sr}\in\{\text{T},\text{A},\text{O},\text{None}\}\).

### Training

For the MRM, the loss function is defined using the span pair-level cross-entropy loss:

\[\mathcal{L}=-\sum_{l=1}^{K}\sum_{j=l}^{K}y_{i,j}\log(P(y_{i,j})). \tag{14}\]

For the Span Ranker, the loss function is defined using the span-level cross-entropy loss:

\[\mathcal{L}_{sr}=-\sum_{a=1}^{|I|}\sum_{b=a}^{|I|}y_{a,b}^{sr}\log(P(y_{a,b}^{ sr})). \tag{15}\]

## 4. Experiments

### Dataset and Metrics

We conducted experiments on the DiaASQ dataset (Song et al., 2017) derived from posts and comments on the Chinese social media platform Weibo 6. The dataset is in the mobile phone domain and includes Chinese (ZH) and English (EN) versions. Table 1 lists the statistics of the dataset.

Footnote 6: [https://weibo.com](https://weibo.com)

Following previous works (Song et al., 2017), we take identification-F1 (iden-F1 for short) (Bang et al., 2017) and micro-F1 as measurements for evaluating the DiaASQ task. The micro-F1 measures the whole quadruple, while iden-F1 does not distinguish the sentiment polarity. We also test the span match and pair extraction subtasks using exact-F1, where a prediction is only correct if the extracted span or pair matches the ground truth exactly. Besides, we use macro-F1 to measure the performance of Span Ranker.

\begin{table}
\begin{tabular}{l c c} \hline \hline Datasets & ZH & EN \\ \hline Dialogue & 1,000 & 1,000 \\ Utterance & 7,452 & 7,452 \\ \hline Target & 8,308 & 8,264 \\ Aspect & 6,572 & 6,434 \\ Opinion & 7,051 & 6,933 \\ \hline Quadruple & 5,742 & 5,514 \\ Intra & 4,467 & 4,287 \\ Inter & 1,275 & 1,227 \\ \hline Avg. of \#Word per dialogue & 206 & 181 \\ Avg. of \#Ultterance per dialogue & 7.45 & 7.45 \\ Avg. of \#Quadruple per dialogue & 15 & 14 \\ \hline \hline \end{tabular}
\end{table}
Table 1. Statistics of DiaASQ dataset. The “Intra” denotes the intra-utterance quadruples, where terms come from the same utterances. The “Inter” denotes the inter-utterance quadruples, where terms come from different utterances. The “Avg” is the abbreviation for Average.

### Baselines

Because DiaASQ is a new task, Li et al. (Li et al., 2019) redesigned several existing methods and proposed a new token-pair tagging method, GTS-Dia, based on GTS (Li et al., 2019). We redesign another token-pair tagging method, BDTF-Dia, based on the table representation approach of the BDTF (Li et al., 2019). Besides, we utilize the few-shot in-context learning method to evaluate the ChatGPT 7. The detailed settings for ChatGPT are in Appendix B. All baselines are as follows:

Footnote 7: [https://chat.openai.com/](https://chat.openai.com/)

**Token-pair Tagging Methods:** GTS-Dia (Li et al., 2019) and BDTF-Dia (Li et al., 2019).

**Span-level Enumeration Method:** Span-ASTE (Li et al., 2019).

**Few-shot In-Context Learning Method:** ChatGPT.

**Other Methods:** CRF-Extract-Classify (Chen et al., 2019), SpERT (Chen et al., 2019), and Paraphrase (Yang et al., 2019).

### Experimental Settings

All fine-tuned models use the Roberta-Large (Zhu et al., 2019) and Chinese-Roberta-wwm-base (Chen et al., 2019) as PLMs for English and Chinese datasets. For our MRM, we set \(K=128\). The max length of the span is 10. We select the model with the highest micro-F1 scores on the validation set for the test set. Our experiments run on a single Nvidia RTX 3090 GPU with 24GB of memory, and all experimental results are the average values over five runs under the seed list [0, 1, 2, 3, 4].

### Main Results

We compare our model against baselines in the DiaASQ task using micro-F1 and iden-F1 scores. Besides, we also evaluate the performance of our model in two sub-tasks (Span Match and Pair Extraction). Table 2 presents these results.

For the DiaASQ task, our model shows considerable and stable performance improvements, surpassing the previous state-of-the-art GTS-Dia by an average of **8.06%** in iden-F1 and **8.07%** in micro-F1 scores across two languages. We attribute these gains to our span-pair tagging scheme and the consideration of our model on the three characteristics of DiaASQ tasks mentioned in the Introduction. For the Pair Extraction task, our model achieves the best performance, reflected by exact-F1 scores exceeding 50% for TA, AO, and TO extraction on Chinese and English datasets. These improvements highlight the effectiveness of our model in capturing relations between terms through span-level interactions. Besides, the performance of Span-ASTE is unsatisfactory despite modeling span-level interactions. The reason is that the enumerated triplets are mostly invalid, leading to a severe label sparsity problem. The problem further prevents Span-ASTE from training toward the optimal solution. For the Span Match task, our model achieves an overall performance improvement in both languages. Furthermore, the performance of all models is poor in the Opinion Match task. The phenomenon is related to the diverse expressions of opinion.

Besides, we use 5-shot in-context learning to evaluate the performance of ChatGPT. On the one hand, ChatGPT performs better than CRF-Extract-Classify and SpERT in many cases, demonstrating its potential in resource-constrained scenarios. On the other hand, it still falls short compared to most PLMs-based fine-tuned models. The performance sharply decreases when dealing with complex tasks such as DiaASQ, indicating that ChatGPT struggles with understanding complex structured sentiment information. This conclusion is consistent with the observations of Zhang et al. (Zhang et al., 2019) and Zhao et al. (Zhao et al., 2019).

\begin{table}
\begin{tabular}{l l c c c c c c c c} \hline \hline  & & \multicolumn{3}{c}{Span Match (F1)} & \multicolumn{3}{c}{Pair Extraction (F1)} & \multicolumn{3}{c}{**DiaASQ (Main)**} \\ \cline{3-10}  & & T & A & O & TA & TO & AO & Iden-F1 & **Micro-F1** \\ \hline \multirow{8}{*}{ZH} & CRF-Extract-Classify & 91.11 & 75.24 & 50.06 & 32.47 & 26.78 & 18.90 & 9.25 & 8.81 \\  & SpERT & 90.69 & 76.81 & 54.06 & 38.05 & 31.28 & 21.89 & 14.19 & 13.00 \\  & ParaPhrase & / & / & / & 37.81 & 34.32 & 27.76 & 27.98 & 23.27 \\  & Span-ASTE & / & / & / & 44.13 & 34.46 & 32.21 & 30.85 & 27.42 \\  & BDTF-Dia & 91.08 & 76.24 & 60.88 & 51.41 & 49.33 & 52.58 & 41.06 & 34.22 \\  & GTS-Dia & 90.23 & 76.94 & 59.35 & 48.61 & 43.31 & 45.44 & 37.51 & 34.94 \\  & ChatGPT (5-shot ICL) & 68.78 & 57.87 & 36.45 & 34.98 & 42.48 & 27.43 & 20.59 & 18.41 \\ \cline{2-10}  & Ours & **91.49\({}_{\pm 0.21}\)** & **77.10\({}_{\pm 0.30}\)** & **61.24\({}_{\pm 0.35}\)** & **53.56\({}_{\pm 0.54}\)** & **50.29\({}_{\pm 0.22}\)** & **53.26\({}_{\pm 0.64}\)** & **42.82\({}_{\pm 0.37}\)** & **40.59\({}_{\pm 0.36}\)** \\ \hline \multirow{8}{*}{EN} & CRF-Extract-Classify & 88.31 & 71.71 & 47.90 & 34.31 & 20.94 & 19.21 & 12.80 & 11.59 \\  & SpERT & 87.82 & 74.65 & 54.17 & 28.33 & 21.39 & 23.64 & 13.38 & 13.07 \\  & ParaPhrase & / & / & / & 37.22 & 32.19 & 30.78 & 26.76 & 24.54 \\  & Span-ASTE & / & / & / & 42.19 & 30.44 & 45.90 & 28.34 & 26.99 \\  & BDTF-Dia & 88.60 & 73.37 & 62.53 & 49.26 & 47.55 & 49.95 & 38.80 & 31.81 \\  & GTS-Dia & 88.62 & 74.71 & 60.22 & 47.91 & 45.58 & 44.27 & 36.80 & 33.31 \\  & ChatGPT (5-shot ICL) & 68.05 & 53.22 & 45.08 & 28.76 & 37.24 & 25.36 & 17.17 & 15.26 \\ \hline \multirow{8}{*}{EN} & Ours & **89.00\({}_{\pm 0.71}\)** & **75.09\({}_{\pm 0.08}\)** & **63.57\({}_{\pm 1.07}\)** & **55.12\({}_{\pm 0.89}\)** & **53.11\({}_{\pm 0.29}\)** & **56.52\({}_{\pm 1.15}\)** & **47.61\({}_{\pm 0.78}\)** & **43.80\({}_{\pm 0.76}\

## 5. Further Analysis

### Ablation Study

We conduct ablation studies to verify the effectiveness of different modules in MRM, using the micro-F1 scores in the DiaASQ task as the measure. Besides, we study the impact of POS information in the Span Ranker, using the macro-F1 scores in three span match subtasks as the measure.

As shown in Table 3, each module positively functions on MRM. Our model performs better than the state-of-the-art baseline even without all modules, demonstrating that MRM benefits from the span-pair tagging scheme. Specifically, the performance of MRM degrades on both Chinese and English datasets when removing speaker and reply attention modules \(\mathbf{H}^{S\rho}\) and \(\mathbf{H}^{Re}\), demonstrating the necessity of dialogue structure information. The speaker and reply sequence can provide relevant information between utterances. Besides, MRM needs the width information of spans due to the imbalanced distribution of the width of terms, so removing the **w**emb hurts the performance. After removing the distance information between spans **dem**, our model cannot perceive the relative distance between spans in span pairs, so the performance drops. MRM can explicitly model the span-level interactions by Hadamard product \(s_{i}\odot s_{j}\). Removing \(s_{i}\odot s_{j}\) makes the performance of MRM sharply degrade. Finally, we study the effect of POS in Span Ranker. The performance improvement of the Span Ranker gains from POS information penn is limited. One possible reason is that PLMs acquired substantial POS knowledge during pre-training.

### Detailed Study on Complex Scenarios

To verify the ability of our model to deal with complex scenarios, we conduct the three subsets of the test set: 1)\(\mathcal{D}_{1}\): each dialogue in the \(\mathcal{D}_{1}\) contains inter-utterance quadruples. 2)\(\mathcal{D}_{2}\): the number of quadruples for each dialogue in the \(\mathcal{D}_{2}\) is not less than 15. 3)\(\mathcal{D}_{3}\): the number of utterances for each dialogue in the \(\mathcal{D}_{3}\) is not less than 8. The \(\mathcal{D}_{1}\), \(\mathcal{D}_{2}\), and \(\mathcal{D}_{3}\) accounted for 68%, 14%, and 48% of the ZH test set and 32%, 32%, and 48% of the EN test set. We compare the performance of our model with GTS-Dia and BDTF-Dia on the DiaASQ task, and the micro-F1 scores are in Table 4. The performance of GTS-Dia sharply drops when facing complex scenarios. BDTS-Dia performs more stably than GTS-Dia, but the performance is still unsatisfactory. In contrast, our model exhibits a stable and considerable performance when facing complex scenarios, outperforming the GTS-Dia and BDTF-Dia in all cases. The phenomenon suggests that our model is more effective in 1) capturing inter-utterance dependencies, 2) handling complex corresponding relations between terms caused by abundant quadruples, and 3) handling longer sequences.

### Effect of \(K\) value

The \(K\) value denotes the number of remaining spans after pruning, determining the size of the span-level matrix. We study the effect

\begin{table}
\begin{tabular}{c c c c c} \hline \hline Model & Overall & \(\mathcal{D}_{1}\) & \(\mathcal{D}_{2}\) & \(\mathcal{D}_{3}\) \\ \hline \multirow{4}{*}{\begin{tabular}{c} ZH \\ \end{tabular} } & GTS-Dia & 34.94 & 30.19(14.75) & 34.81(120.13) & 25.29(19.463) \\  & BDTF-Dia & 34.22 & 30.53(13.89) & 32.98(11.24) & 35.40(17.18) \\  & Ours & 40.59 & 37.62(12.97) & 42.34(17.75) & 40.37(10.22) \\ \hline \multirow{4}{*}{
\begin{tabular}{c} EN \\ \end{tabular} } & GTS-Dia & 33.31 & 26.65(14.63) & 31.25(12.06) & 32.85(10.46) \\  & BDTF-Dia & 31.81 & 30.00(11.13) & 30.69(11.12) & 30.89(10.87) \\  & Ours & 43.80 & 43.09(10.71) & 42.76(11.40) & 42.97(10.83) \\ \hline \hline \end{tabular}
\end{table}
Table 4. Results on complex scenarios.

Figure 5. Analysis results with respect to \(K\) on the English dataset. In the second line chart, recall@\(K\) denotes the ratio of the number of terms in the top \(K\) spans to the total number of terms; Label sparsity@\(K\) denotes the ratio of the number of None labels to the total number of labels in the \(K\times K\) matrix; Label num@\(K\) denotes the overall number of labels in the \(K\times K\) matrix. The results of the Chinese dataset are in Appendix C.

\begin{table}
\begin{tabular}{l c c c} \hline \hline Model & ZH & EN \\ \hline MRM & **40.59** & **43.80** \\  w/o all modules & 36.80(13.79) & 38.62(15.18) \\  w/o H\({}^{S\rho}\) & \(\mathbf{H}^{Re}\) & 39.35(11.24) & 42.53(11.27) \\  w/o H\({}^{S\rho}\) & 40.45(10.14) & 42.89(10.91) \\  w/o H\({}^{Re}\) & 40.53(10.06) & 43.00(10.80) \\  w/o **wemb** & 40.41(1of the \(K\) value on the English dataset, as depicted in Figure 5. We selected the model with the best performance in the validation dataset to evaluate the test dataset.

Specifically, the performance of our model is suboptimal with a small \(K\) value, such as 16. The reason is that a small \(K\) corresponds to a low recall, indicating that abundant terms do not appear in the \(K\times K\) matrix. Subsequently, our model achieves state-of-the-art performance as \(K\) increases due to increased recall and label number. However, the performance does not infinitely increase with the increase of \(K\). The reasons for this phenomenon are as follows: 1) the high label sparsity makes it difficult for the model to converge to the optimal solution during training; 2) The number of non-None labels has an upper bound. Besides, the training time of our model positively correlates with the \(K\) value. Our model exhibits extremely high training efficiency when \(K\) is less than 256. In conclusion, our model demonstrates superior performance compared to GTS-Dia and Span-ASTE regarding effectiveness and efficiency, provided that a suitable value of \(K\) is chosen (such as 64 and 128).

### Analysis of Time Complexity

Table 5 shows the time complexity of the three models. On the one hand, our model outperforms the Span-ASTE with or without using the span pruning strategy because we construct the span-level matrix rather than enumerate all spans and triplets, which leads to Span-ASTE's \(O(\max(N^{2},K^{3}))\) time complexity. On the other hand, GTS-Dia has \(O(N^{2})\) time complexity due to its token-level matrix. The time complexity of our model is slightly worse at \(O(\max(N^{2},K^{2}))\) because we enumerate spans and construct the span-level matrix. In practice, the time complexity of our model is optimized to \(O(N^{2})\) due to \(K<N\). Besides, the Span Ranker accelerates the enumeration of spans in MRM by caching the span indices so that the running speed of our model is faster than GTS-Dia.

### Case Study

In order to better understand the capacity of our model, we illustrate a case study using GTS-Dia and our model. As shown in Figure 6, our model can correctly extract all quadruples while GTS-Dia fails. Concretely, GTS-Dia ignores the _not_ and wrongly identifies the sentiment polarity by tagging the token pairs (\(OnePR,good\)) and (\(9Pro,good\)) when extracting the first quadruple. In the third quadruple, GTS-Dia wrongly extracts _consumption_ rather than _power consumption_. The reason is that GTS-Dia cannot capture the complete span-level semantics. In contrast, our model correctly extracts quadruples by tagging the span pairs.

## 6. Conclusions and Future Work

This paper proposes a novel span-pair interaction and tagging method for the Dialogue-level Aspect-based Sentiment Quadruple analysis (DiaASQ) task, which includes a novel Span-pair Tagging Scheme (STS) and a simple and efficient Multi-level Representation Model (MRM). The STS explicitly captures the complete span-level semantics by tagging span pairs in a span-level matrix. MRM enumerates spans and constructs a span-level matrix of span pairs based on the STS, explicitly modeling the dialogue information and the span-level interactions. Besides, we train a Span Ranker to improve the running efficiency of the MRM. Extensive experiments on the DiaASQ datasets demonstrate the superiority of our method.

There are also several potential limitations in this work. When K is small, the Span Ranker may filter out some terms from the candidate span list with the result that they cannot appear in the span-level matrix. These errors further limit the performance of final quadruple decoding. In the future, we will extend our work and develop an end-to-end framework to solve this issue under the premise of efficiency. Besides, there is mutual supervision information between span-pair labels in the span-level matrix. We plan to apply contrastive learning to model label-level supervision information.

\begin{table}
\begin{tabular}{l l} \hline \hline Model & Time Complexity \\ \hline GTS-Dia & \(O(N^{2})\) \\ Span-ASTE & \(O(N^{2})+O(K^{3})=O(\max(N^{2},K^{3}))\) \\ w/o span pruning & \(O(N^{2})+O(L^{3})=O(L^{3})\) \\ \hline Ours & \(O(N^{2})+O(K^{2})=O(\max(N^{2},K^{2}))\) \\ w/o span pruning & \(O(L^{2})\) \\ \hline \hline \end{tabular}
\end{table}
Table 5. Time Complexity. The \(N,L\), and \(K\) denote the number of tokens, spans, and remaining spans after pruning, where \(L\gg N\) and \(L\gg K\). We ignore the dimension of vector representations for convenience. It is worth noting that our span pruning strategy implemented by the Span Ranker differs from the span pruning strategy of the Span-ASTE.

Figure 6. An example predicted by GTS-Dia and our model.

## References

* (1)
* Barnes et al. (2021) Jeremy Barnes, Robin Kurtz, Stephan Oppen, Lilja Orwell, and Erik Veldal. 2021. Structured Sentiment Analysis as Dependency Graph Parsing. In _Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)_. Association for Computational Linguistics, Online, 3887-3942. [https://doi.org/10.11863/v1/2021.acl-long.263](https://doi.org/10.11863/v1/2021.acl-long.263)
* de la Costa et al. (2021) Honglien de la Costa, Rixia Xie, and Janitre Yu. 2021. Aspect-Category-Opinion-Sentiment (Quadrupole Extraction with Implicit Aspects and Opinions). In _Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)_. Association for Computational Linguistics, Online, 340-350. [https://doi.org/10.11863/v1/2021.acl-long.29](https://doi.org/10.11863/v1/2021.acl-long.29)
* Cai et al. (2021) Honglien Cai, Rui Xia, and Janitre Yu. 2021. Aspect-category-opinion-sentiment (quadrupole extraction with implicit aspects and opinions). In _Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)_. 340-350. [https://doi.org/10.11863/v1/2021.acl-long.263](https://doi.org/10.11863/v1/2021.acl-long.263)
* Chen et al. (2022) Hao Chen, Zepeng Zhai, Fangxiang Feng, Ruifan Li, and Xiaojie Wang. 2022. Enhanced Multi-Channel Graph Convolutional Network for Aspect Sentiment Triplet Extraction. In _Proceedings of the 66th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_. Association for Computational Linguistics, Dublin, Ireland, 2974-2985. [https://doi.org/10.18653/v1/2022.acl-long.212](https://doi.org/10.18653/v1/2022.acl-long.212)
* Chen et al. (2021) Shaowei Chen, Yu Wang, Jie Liu, and Yeulin Wang. 2021. Bidirectional machine learning composition for anger sentiment triplet extraction. In _Proceedings of the AAAI conference on artificial intelligence_. Vol. 35. 12666-12674.
* Chen et al. (2022) Yangi Chen, Chen Keming, Xian Sun, and Yeomin Zhang. 2022. A Span-level Bidirectional Network for Aspect Sentiment Triplet Extraction. In _Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing_. Association for Computational Linguistics, Abu Dhabi, United Arab Emirates, 4000-4309. [https://aclanthology.org/2022.emnl-main.289](https://aclanthology.org/2022.emnl-main.289)
* Cui et al. (2021) Yiming Cui, Wanxiang Cheng, Ting Liu, Ringu Qin, and Zixing Yang. 2021. Pre-training with whole word masking for chinese bert. _IEEE/ACM Transactions on Audio, Speech, and Language Processing_. 29 (2021), 5804-5814.
* Deng et al. (2014) Ling Deng, Pour Wei, Chengliu Li, Zhou Yang, Ming Zhou, and Ke Xu. 2014. Adaptive recursive neural network for target-dependent twitter sentiment classification. In _Proceedings of the 52nd annual meeting of the association for computational linguistics (volume 2: Short papers)_. 49-54.
* Diers and Uples (2020) Markus Diers and Adrian Uples. 2020. Span-Based Joint Entity and Relation Extraction with Transformer Pre-Training. In _ECAI 2020_. IOS Press, 2006-2013.
* Feng et al. (2022) Lingeng Feng, Bigning Zeng, Lewit He, May Xu, Huimin Deng, Pengfei Chen, Ziyeng Huang, and Weihua D. 2022. Improving Span-Based Aspect Sentiment Triplet Extraction with Abundant Syntax Knowledge. _Neural Processing Letters_ (2022), 1-22.
* Gao et al. (2021) Lei Gao, Yulong Wang, Tongcun Liu, Jingyu Wang, Lei Zhang, and Jianxin Liao. 2021. Question-driven span labeling model for aspect-opinion pair extraction. In _Proceedings of the AAAI conference on artificial intelligence_, Vol. 35. 12875-12883.
* Hu and Liu (2020) Mingqing Hu and Bing Liu. 2020. Mining and summarizing customer reviews. In _Proceedings of the fifth ACM SIGKDD international conference on Knowledge discovery and data mining_. 168-1720.
* Jing et al. (2021) Hongliang Jing, Jacoux Liu, Hai Zhao, and Shu Jiang. 2021. Seeking Common but Distinguishing Difference, a Joint Aspect-based Sentiment Analysis Model. In _Proceedings of the 3021 Conference on Empirical Methods in Natural Language Processing_. Association for Computational Linguistics, Online and Punta Cana, Dominican Republic, 3910-3922. [https://doi.org/10.11863/v1/2021.emnl-main.2318](https://doi.org/10.11863/v1/2021.emnl-main.2318)
* Li et al. (2023) Bobo Li, Hao Fei, Fei Li, Yihuan Wu, Jinqiong Zhang, Shengqiong Wu, Jinqye Li, Yijiang Liu, Lizi Liao, Tate-Seng Chua, and Donghong Ji. 2023. DataSQ: A Benchmark of Conversational Aspect-based Sentiment Quadrupole Analysis. In _Findings of the Association for Computational Linguistics, Linguistics, Lingu, China, 31449-13467. [https://doi.org/10.1863/v1/2023.findings-all.849](https://doi.org/10.1863/v1/2023.findings-all.849)
* Li et al. (2021) Ruifan Li, Hao Chen, Fangxiang Feng, Zhianyu Ma, Xiaojie Wang, and Eduard Hovy. 2021. Dual graph convolutional networks for aspect-based sentiment analysis. In _Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)_. 6319-6329.
* Li et al. (2018) Xin Li, Lidong Bing, Jiri Li, Wan Lan, and Zihang Yang. 2018. Aspect term extraction with history attention and selective transformation. In _Proceedings of the 27th International Joint Conference on Artificial Intelligence_. 4194-4200.
* Liang et al. (2020) Shao Liang, Wei Wei, Xian-Jing Mao, Yuanyuan Fu, Rui Fang, and Dayang Shen. 2020. STAGG: Span Tang and Greedy Inference Scheme for Aspect Sentiment Triplet Extraction. In _Proceedings of the AAAI Conference on Artificial Intelligence_, Vol. 37. 13174-13182.
* Liu (2012) Bing Liu. 2012. Sentiment analysis and opinion mining. _Synthesis lectures on human language technologies_ 5, 1 (2012), 1-167.
* Liu et al. (2015) Pengfei Liu, Shafiq Joty, and Helen Meng. 2015. Fine-grained Opinion Mining with Recurrent Neural Networks and Word Embeddings. In _Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing_. Association for Computational Linguistics, Lisbon, Portugal, 1433-1443. [https://doi.org/10.18653/v1/D15-1168](https://doi.org/10.18653/v1/D15-1168)
* Liu et al. (2018) Qiao Liu, Haibin Zhang, Yifu Zeng, Ziqi Huang, and Zufeng Wu. 2018. Content attention model for aspect based sentiment analysis. In _Proceedings of the 2018 world wide web conference_. 1023-1032.
* Liu et al. (2019) Yinhan Liu, Maje Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Sroyanova. 2019. Roberta: A robustly optimized bert performing approach. arXiv:1907.11692
* Peng et al. (2020) Haiyun Peng, Lux Li, Liding Bing, Fei Huang, Wei Liu, and Luc S. 2020. Knowledge with, hard, and way: A new complete solution for aspect-based sentiment analysis. In _Proceedings of the AAAI Conference on Artificial Intelligence_, Vol. 34. 8608-8607.
* Pontiki et al. (2014) Maria Pontiki, Dimitris Galanis, John Pavlopoulos, Harris Papageorgiou, Ion Androutsopoulos, and Suresh Mannadur. 2014. SenSrnl:2014 Task: Aspect Based Sentiment Analysis. In _Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2013)_. Association for Computational Linguistics, Dublin, Ireland, 27-35. [https://doi.org/10.11863/v1/D15-D140](https://doi.org/10.11863/v1/D15-D140)
* Vaswani et al. (2017) Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. _Advances in neural information processing systems_ 30 (2017).
* Wang et al. (2016) Wenyang Wang, Simo Jinqin Pan, Daniel Dahlmeier, and Xiaokui Xiao. 2016. Recursive Neural Conditional Random Fields for Aspect-based Sentiment Analysis. In _Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing_. Association for Computational Linguistics, Austin, Texas, 616-626. [https://doi.org/10.18653/v1/D15-1059](https://doi.org/10.18653/v1/D15-1059)
* Wu et al. (2020) Zhen Wu, Cheng Yang Jinq, Fei Zhao, Jianxin Liu, and Rui Xia. 2020. Gfdt Tagging Scheme for Aspect-oriented Fine-grained Opinion Extraction. In _Findings of the Association for Computational Linguistics: EMNLP 2020_. 25760-2585.
* Wu et al. (2019) Hu Xu, Bing Liu, Li Shen, and Philip S. Yu. 2019. BERT Post-Training for Review Reading Comprehension and Aspect-based Sentiment Analysis. In _Proceedings of NAACL 2019_. 2324-2335.
* Xu et al. (2021) Lu, Yu-Yen Xu, and Lidong Bing. 2021. Learning Span-Level Interactions for Aspect Sentiment Triplet Extraction. In _Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)_. 4755-4766.
* Zhang et al. (2020) Chen Zhang, Qiuzhi Li, Dawei Song, and Benyou Wang. 2020. A Multi-task Learning Framework for Opinion Topic Extraction. In _Findings of the Association for Computational Linguistics: EMNLP 2020_. Association for Computational Linguistics, Online, 819-828. [https://doi.org/10.18653/v1/2020.findings-small.72](https://doi.org/10.18653/v1/2020.findings-small.72)
* Zhang et al. (2021) Wennan Zhang, Yang Ren, Xin Li, Yifu Yuan, Lidong Bing, and Wan Li. 2021. Aspect Sentiment Quad Prediction as Praphrase Generation. In _Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing_. 9209-9219.
* Zhang et al. (2021) Wennan Zhang, Yang Deng, Xin Li, Yifu Yuan, Lidong Bing, and Wan Li. 2021. Aspect Sentiment Quad Prediction as Praphrase Generation. In _Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing_. Association for Computational Linguistics, Online and Punta Cana, Dominican Republic, 9209-9219. [https://doi.org/10.18653/v1/2021.emnl-main.276](https://doi.org/10.18653/v1/2021.emnl-main.276)
* Zhang et al. (2022) Wennan Zhang, Yue Deng, Bing Liu, Simo Jinqin Pan, and Lidong Bing. 2023. Sentiment Analysis in the F. of Large Language Models: A Reality Check. arXiv:2005.1509
* Zhang et al. (2022) Wennan Zhang, Xin Li, Yang Deng, Lidong Bing, and Wan Li. 2022. A survey on aspect-based sentiment analysis tasks, methods, and challenges. _IEEE Transactions on Knowledge and Data Engineering_ (2022).
* Zhang et al. (2022) Yue Zhang, Yifu Yang, Yihui, Li Sun Liang, Shiver Chen, Yixue Dang, Min Yang, and Ruifeng Xu. 2022. Boundary-Driven Table-Filling for Aspect Sentiment Triplet Extraction. In _Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing_. Association for Computational Linguistics, Abu Dhabi, United Arab Emirates, 6485-6498. [https://aclanthology.org/2021.emnl-main.435](https://aclanthology.org/2021.emnl-main.435)
* Zhao et al. (2020) He Zhao, Long Luang, Hong Zhang, Quan Li, and Hui. 2020. Span-based Multi-Task Learning Framework for Pair-wise Aspect and Opinion Terms Extraction. In _Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics_. Online, 3239-3248. [https://doi.org/10.18653/v1/2020-ademnl.296](https://doi.org/10.18653/v1/2020-ademnl.296)
* Zhao et al. (2016) Jun Zhao, Kang Liu, and Liheng Xu. 2016. Sentiment analysis: mining opinions, semifments, and emotions.
* Zhao et al. (2017) Weihang Zhao, Yunyan Zhao, Xin Lu, Shalong Wang, Yanpeng Tong, and Bing Qin 2022. Iss: ChatGPT Equipped with Emotional Dialogue Capabilities? arXiv:2010.09582

[MISSING_PAGE_FAIL:10]

[MISSING_PAGE_EMPTY:11]