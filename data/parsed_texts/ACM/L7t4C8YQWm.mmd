# Globally Interpretable Graph Learning via Distribution Matching

Anonymous Author(s)

###### Abstract.

Graphs neural networks (GNNs) have emerged as a powerful graph learning model due to their superior capacity in capturing critical graph patterns. Instead of treating GNNs as black boxes in an end-to-end fashion of training and deployment, people start to turn their attention to understand and explain the model behavior. Existing works mainly focus on local interpretation, which aims to reveal the discriminative pattern for individual instances. However, the retrieved pattern cannot be directly generalized to reflect the high-level model behavior, i.e., patterns captured by the model for a certain class. To gain global insights about graph learning mechanism, we aim to answer an important question that is not yet well studied: _how to provide a global interpretation for the graph learning procedure?_ We formulate this problem as _globally interpretable graph learning_, which targets on distilling high-level and human-intelligible patterns that dominate the learning procedure, such that training on this pattern can recover a similar model.

To address this problem, we first propose a new interpretation metric _model fidelity_, which is tailored for evaluating the fidelity of the resulting model trained on interpretations. Our preliminary analysis shows that interpretative patterns generated by existing global methods fail to recover the model training procedure. Thus, we further propose our solution, _Graph Distribution Matching_ (GDM), which synthesizes interpretive graphs by matching the distribution of the original and interpretive graphs in the feature space of the GNN as its training proceeds. These few interpretive graphs demonstrate the most informative patterns the model captures during training. Extensive experiments on graph classification datasets demonstrate multiple advantages of the proposed method, including high model fidelity, predictive accuracy and time efficiency, as well as the ability to reveal class-relevant structure.

Graph Neural Networks, Model Interpretability +
Footnote †: isbn: 978-1-4503-XXXX-X/18/06

+
Footnote †: isbn: 978-1-4503-XXXX-X/18/06

+
Footnote †: isbn: 978-1-4503-XXXX-X/18/06

+
Footnote †: isbn: 978-1-4503-XXXX-X/18/06

+
Footnote †: isbn: 978-1-4503-XXXX-X/18/06

+
Footnote †: isbn: 978-1-4503-XXXX-X/18/06

+
Footnote †: isbn: 978-1-4503-XXXX-X/18/06

+
Footnote †: isbn: 978-1-4503-XXXX-X/18/06

+
Footnote †: isbn: 978-1-4503-XXXX-X/18/06

## 1. Introduction

Graph neural networks (GNNs)(Ganin and Lempitsky, 2015; Goodfellow et al., 2014; Graves et al., 2014; Graves et al., 2014; Graves et al., 2014; Graves et al., 2014) have attracted enormous attention and prominently advanced the state of the art on graph learning tasks. Despite their great success, GNNs are usually treated as black boxes in an end-to-end fashion of training and deployment, which may raise trustworthiness concerns in decision making, if humans cannot really understand what pattern are really captured by the model during graph learning procedure. Lack of such understanding could be particularly risky when using a GNN model for high-stakes domains, e.g., finance (Golovin et al., 2013) and medicine (Bishop, 2006). For instance, in the context of predicting the effect of medicines, if a GNN model mistakenly learns false patterns that violate chemical principles, it may provide incorrect assessments. This highlights the importance of ensuring a comprehensive interpretation of the working mechanism for graph learning.

To improve transparency of GNNs, a large body of existing interpretation techniques focuses on providing _instance-level local interpretation_, which explains specific predictions a GNN model makes on each individual graph instance (Ganin and Lempitsky, 2015; Goodfellow et al., 2014; Graves et al., 2014; Graves et al., 2014; Graves et al., 2014; Graves et al., 2014; Graves et al., 2014; Graves et al., 2014; Graves et al., 2014). Despite different strategies adopted in these works, in general, local interpretation aims to identify critical substructure for a particular graph instance, which would require manual inspections on many local interpretations to mitigate the variance across instances and conclude a high-level pattern of the model behavior. As a sharp comparison to such instance-specific interpretations, relatively few recent works study _model-level global interpretations_(Bishop, 2006; Graves et al., 2014; Graves et al., 2014) to understand the general behavior of the model with respect to a certain class instead of any particular instance.

The goal of global interpretation is to generate a few compact interpretive graphs, which summarize class discriminative patterns the GNN model learns for decision making. Existing works generate such interpretive graphs via different strategies, including reinforcement learning (Sutton et al., 2015), concept combination (Bishop, 2006) and probabilistic generation (Sutton et al., 2015). These solutions can extract meaningful interpretive graphs with a high _predictive accuracy_, evaluated from the perspective of _model consumers_: given a pre-trained GNN model, the end user can use these interpretation methods to understand what patterns this model is leveraging for _inference_.

In this paper, we aim to interpret at the side of _model developers/providers_, who usually care about what patterns really dominate the model training, which could help improve training transparency. This demands specialized evaluation, which are long ignored: if the interpretation indeed contains essential patterns the model captures during training, then when we use these interpretive graphs to train a model from scratch, this surrogate model should present similar behavior as the original model. We are the first to realize this principle and define a new metric, _model fidelity_, which evaluates the predictive similarity between the surrogate model (trained via interpretative graphs) and the original model (normally trained via the training set). We evaluate model fidelity of existing global interpretation method, XGNN (Sutton et al., 2015) and GNNInterpreter (Sutton et al., 2015), by comparing the surrogate model and the original model for eachtraining iteration on MUTAG data. As shown in Figure 1, they have relatively low model fidelity, which suggests that their generated interpretive graphs are less discriminative for recovering the original model's training procedure. Thus these interpretation methods may not suit for explaining model training behavior.

To this end, we attempt to provide a novel globally interpretable graph learning framework, which is designed for the model developers to distill high-level and human-intelligible patterns the model learns in its training procedure. To be more specific, we propose Graph Distribution Matching (GDM) to synthesize a few compact interpretive graphs for each class following the _distribution matching principle_: as the model training progresses, the interpretive graphs maintain a similar distribution as the original graphs. We optimize interpretive graphs by minimizing the distance between the interpretive and original data distributions, measured as the maximum mean discrepancy (MMD) (Bordes et al., 2014) in a family of embedding spaces obtained by a series of model snapshots. Presumably, GDM simulates the model training trajectory, thus the generated interpretation can provide a general understanding of what patterns dominate and result in the model training behavior.

Note that as model developer, we can access the model training trajectory, and our proposed framework is an efficient plug-and-play interpretation tool that can be easily integrated to usual model development pipeline, without interfering the normal training procedure. The success of our framework enables the model develops to provide an interpretation byproduct when publishing their models, which can benefits multiple parties: for the developers, models are published with better transparency without leaking training data; for the consumers, the interpretation can help screen whether the models' discriminative patterns fit their needs.

Extensive quantitative evaluations on three synthetic and three real-world datasets for graph classification task verify the effectiveness of GDM: it can simultaneously achieve high model fidelity and predictive accuracy. Our ablation study also shows the advantage of generating interpretation guided by the model training trajectory. Qualitative study further intuitively demonstrates the human-intelligible patterns captured by GDM.

## 2. Related Work

Due to the prevalence of graph neural networks (GNNs), extensive efforts have been conducted to improve their transparency and interpretability. Existing techniques can be categorized as _local instance-level_ interpretation and _global model-level_ interpretation depending on the interpretation form.

### Local Instance-Level Interpretation

Instance-level methods provide input-dependent explanations for each individual graph (Golov et al., 2013; Velickovic et al., 2014). Given an input graph, these methods explain GNNs by extracting a small interpretive subgraph. Existing solutions can be categorized as gradient-based (Golov et al., 2013; Velickovic et al., 2014), attention-based (Golov et al., 2013), perturbation-based (Golov et al., 2013; Velickovic et al., 2014), decomposition-based (Golov et al., 2013), and surrogate-based methods (Sutskever et al., 2014). Gradient-based method directly uses the gradients as the approximations of feature importance. Attention-based methods use the attention mechanism to identify important subgraph as interpretation. Perturbation-based methods optimize a subgraph mask to captures the important nodes and edges. Surrogate-based explanation methods use data sampling to filter out unimportant features and an explainable small model - such as a probabilistic graphical model - is fitted on the filtered data as a topological explanation. Decomposition-based methods decompose predictive scores to represent how importance the input contributes to the predicted results. Again, instance-level methods are based on each input instance. Although they are helpful for getting an explanation for every single graph, they can hardly capture the commonly important features that are shared by graph instances for each class. Therefore, it is necessary to have both instance-level and model-level interpretations for GNNs.

### Global Model-Level Interpretations

Model-level interpretation aims at capturing the global behaviour of the model as a whole, such that a robust overview of the model can be summarized from individual noisy local explanations. This type of interpretation on graph learning is less studied. KQNN (Krishna et al., 2017) frames this problem as a form of input optimization, leveraging a reinforcement learning technique to sequentially generate edges based on the prediction reward. However, this approach requires domain expert knowledge to design valid reward function for different inputs, which is not always available. GNNInterpreter (Sutskever et al., 2014) learns a probabilistic generative graph distribution and identifies the key graph pattern when GNN tries to make a certain prediction. GLExplainer (Golov et al., 2013) generates explanations as Boolean combinations of learned graphical concepts, represented as clusters of local explanations. While these methods identify intuitive class-related patterns that can be recognized by the model (with high predictive accuracy), they usually ignores the training utility of these explanations. Ideally, high-quality interpretations capturing class discriminative patterns from the training data should be able to train a similar model. From this perspective, in this work, we define model fidelity as a new metric, and propose a novel globally interpretable graph learning framework that explains by matching the distribution along the model training trajectory.

## 3. Methods

We first discuss existing global training methods and provide a general form of the targeted problem. To improve the utility of class discriminative explanations in training a similar model, we propose a novel globally interpretable graph learning framework.

Figure 1. _Model Fidelity_ (i.e., cosine similarity between the predictive logits of original model and that of surrogate model) and _Predictive Accuracy_ (i.e., the original model’s accuracy on interpretive graphs) as model training proceeds.

This framework aims to align the model's behavior on original training data and synthesized interpretive data along the model training trajectory. We realize this goal via the distribution matching principle, which can be formulated as an optimization problem. We further discuss several practical constraints for optimizing interpretive graphs. Finally, we provide the designed algorithm for the proposed interpretation method.

### Graph Learning Background

We focus on explaining GNNs' global behavior for the graph classification task. A graph classification dataset with \(N\) graphs can be denoted as \(\mathcal{G}=\{G^{(1)},G^{(2)},\ldots,G^{(N)}\}\) with a corresponding ground-truth label set \(\mathcal{Y}=\{y^{(1)},y^{(2)},\ldots,y^{(N)}\}\). Each graph consists of two components, \(G^{(1)}=(\mathbf{A}^{(1)},\mathbf{X}^{(i)})\), where \(\mathbf{A}^{(1)}\in\{0,1\}^{n\times n}\) denotes the adjacency matrix and \(\mathbf{X}^{(i)}\in\mathbb{R}^{n\times d}\) is the node feature matrix. The label for each graph is chosen from a set of \(C\) classes \(y^{(i)}\in\{1,\ldots,C\}\), and \(y^{(i)}_{c}\) denotes that the label of graph \(G_{i}\) is \(c\), that is \(y^{(i)}=c\). A set of graphs that belong to class \(c\) could be further represented as \(g_{\mathcal{E}}=\{G^{(i)}|y^{(i)}=c\}\).

A GNN model \(\Phi(\cdot)\) is a concatenation of a feature extractor \(f_{\mathbf{\theta}}(\cdot)\) parameterized by \(\mathbf{\theta}\) and a classifier \(h_{\mathbf{\theta}}(\cdot)\) parameterized by \(\mathbf{\psi}\), where \(\Phi(\cdot)=h_{\mathbf{\psi}}(f_{\mathbf{\theta}}(\cdot))\). The feature extractor \(f_{\mathbf{\theta}}:\mathcal{G}\rightarrow\mathbb{R}^{d^{\prime}}\) takes in a graph and embeds it to a low-dimentional space with \(d^{\prime}\ll d\). The classifier \(h_{\mathbf{\psi}}:\mathbb{R}^{d^{\prime}}\rightarrow\{1,\ldots,C\}\) further outputs the predicted class given the graph embedding.

### Revisit Global Interpretation Problem

We now provide a general form for the global interpretation problem. The idea is to generate a small set of compact graphs that can explain the high-level behavior of the GNN model, e.g., what patterns lead the model to discriminate different classes. Specifically, given a GNN model \(\Phi^{*}\), existing global interpretation method aims to generate interpretive graphs that have the maximal predicted probability for a certain class \(y_{c}\). Formally, this problem can be defined as:

\[\min_{\mathbf{\mathcal{S}}}\mathcal{L}(\Phi^{*}(\mathbf{\mathcal{S}}),y_{c}), \tag{1}\]

where \(\mathbf{\mathcal{S}}\) is one or multiple compact interpretive graphs capturing key graph structures and node characteristics for interpretation, and \(\mathcal{L}(\cdot,\cdot)\) is the loss (e.g., cross-entropy loss) of predicting \(\mathbf{\mathcal{S}}\) as label \(y_{c}\). Existing global interpretation techniques can fit in this form but differ in the generation procedure of \(\mathbf{\mathcal{S}}\). For instance, in XGNN (Xu et al., 2018), \(\mathbf{\mathcal{S}}\) is defined as a set of completely synthesized graphs with each edge generated by a reinforcement learning strategy. The goal of the reward function is to maximize the probability of predicting \(\mathbf{\mathcal{S}}\) as a certain class \(y_{c}\). In GNNInterpreter (Shen et al., 2018), \(\mathbf{\mathcal{S}}\) is generated by sampling from an estimated graph distribution. In GLGExplainer (Chen et al., 2019), \(\mathbf{\mathcal{S}}\) is generated by a Boolean logic function. Despite their difference in generation techniques, they stand on a common ground as a model consumer: they can only access and inspect the final pre-trained model \(\Phi^{*}\) to explain its behavior.

If standing from the perspective of model provider, such a problem formulation may not fully leverage all accessible information, such as the whole training trajectory, leading to limited interpretation capability. Specifically, we consider interpretation quality from the following two aspects:

* _Predictive Accuracy_ reflects whether the extracted interpretative patterns are really class-relevant. It is calculated as the model accuracy on generated interpretive graphs. Existing works mainly focus on this aspect (Chen et al., 2019; Chen et al., 2019; Wang et al., 2020).
* _Model Fidelity_ measures whether the interpretive graphs are class discriminative enough to train a similar model. It is calculated as the cosine similarity between the predictive probabilities of the target model and that of the surrogate model (trained by interpretative graphs) on a same set of instances. This aspect however has never been inspected in prior studies.

As shown in Figure 1, existing works following this formulation provide a limited model fidelity. This observation motivates us to rethink the global interpretation problem from the model provider's perspective and design a globally interpretable learning framework.

### Globally Interpretable Graph Learning

Our goal is to generate global explanations that can not only be accurately predicted as the corresponding class, but also lead to a high-fidelity model. In order to achieve this goal, we propose to optimize the explanations in the model developing stage, such that the training trajectory information can be leveraged. We thus propose a novel research problem: _how to provide global interpretation for a model training procedure, such that training on such interpretation can recover a similar model?_ We frame this problem as _globally interpretable graph learning_, which can be defined as the following optimization problem:

\[\begin{split}&\min_{\mathbf{\mathcal{S}}}\mathbb{E}_{t\sim\mathcal{ T}}[\mathcal{L}(\Phi_{t}(\mathbf{S}),y_{c})],\\ &\text{s.t.}\,\Phi_{t}=\text{opt}-\text{al}_{\mathbf{\phi}}(\mathcal{ L}_{\text{CE}}(\Phi_{t-1}),\xi),\end{split} \tag{2}\]

where \(\mathcal{T}=[0,\ldots,T-1]\) is the normal training iterations for the target GNN model, and \(\text{opt}-\text{al}_{\mathbf{\phi}}\) is a specific model update algorithm (e.g., gradient descent) with a fixed number of steps \(\xi\). \(\mathcal{L}_{\text{CE}}(\Phi)=\mathbb{E}_{G,\mathbf{\psi}}-\theta,\mathcal{Y}[(\Phi (G),y)]\) is the cross-entropy loss used for normal GNN model training.

This formulation of globally interpretable graph learning states that the interpretable patterns \(\mathbf{\mathcal{S}}\) should be optimized based on the whole training trajectory \(\Phi_{0}\rightarrow\Phi_{1}\rightarrow\cdots\rightarrow\Phi_{T-1}\) of the model. This stands in sharp contrast to other global interpretation where only the final model \(\Phi^{*}=\Phi_{T-1}\) is considered. The training trajectory reveals more information about model's training behavior to form a constrained model space, such as essential graph patterns that dominate the training of this model.

### Interpretation via Distribution Matching

To realize globalinterpretation as demonstrated in Eq. (2), we now introduce the exact form of the objective function for optimizing interpretive graphs that encapsulate the model's learning behavior from the data. Recall that a GNN model is a combination of feature extractor and a classifier. The feature extractor \(f_{\mathbf{\theta}}\) usually carries the most essential information about the model, while the classifier is a rather simple multi-perceptron layer. Since the feature extractor plays the majority role, a natural idea for generating interpretation is to match its distribution with training graphs in the model's feature space. We name this interpretation principle as _Graph Distribution Matching_ (GDM).

#### Graph Distribution Matching (GDM)

To realize this principle, we first measure the distance between two graph distributions via their maximum mean discrepancy (MMD), which is the difference between means of distributions in a Hilbert kernel space \(\mathcal{H}\)(Golov et al., 2013):

\[\sup_{\|f\|_{\mathcal{H}}\neq 1}\left(\underset{G\to\mathcal{G}}{\mathbb{E}}\left[f_{\theta}(G)\right]- \underset{S\to\mathcal{S}_{c}}{\mathbb{E}}\left[f_{\theta}(S)\right]\right). \tag{3}\]

Empirically, MMD can be estimated as the difference between the encoded training graphs and interpretive graphs in the embedding space. Based on this idea, we instantiate the outer objective in Eq. (2) as a distribution matching loss \(\mathcal{L}_{\text{DM}}(\cdot)\):

\[\mathcal{L}(\Phi_{t}(\mathcal{S}),y_{c}) :=\mathcal{L}_{\text{DM}}(f_{\theta_{t}}(\mathcal{S}_{c}))\] \[=\|\frac{1}{|\mathcal{G}_{c}|}\sum_{G\in\mathcal{G}_{c}}f_{ \theta_{t}}(G)-\frac{1}{|\mathcal{S}_{c}|}\sum_{S\in\mathcal{S}_{c}}f_{\theta _{t}}(S)\|^{2}, \tag{4}\]

where \(\mathcal{S}_{c}\) is the interpretive graph(s) for explaining class \(c\), and \(\mathcal{G}_{c}\) is the training graphs belonging to class \(c\). By optimizing Eq. (4), we can obtain interpretive graphs that produce similar embeddings to training graphs for the current GNN feature extractor \(\theta_{t}\) in the training trajectory. Thus, the interpretive graphs provide a plausible explanation for the model learning process. Note that there can be multiple interpretive graphs for each class, i.e., \(|\mathcal{S}_{c}|\geq 1\). With this approach, we are able to generate an arbitrary number of interpretive graphs that capture different patterns.

#### Globally Interpretable Learning via Distribution Matching

By plugging the distribution matching objective Eq. (4) into Eq. (2), and simultaneously optimizing interpretive graphs for multiple classes \(\mathcal{S}=\{\mathcal{S}_{c}\}_{c=1}^{C}\), we can rewrite our learning goal as follows:

\[\underset{\mathcal{S}}{\mathbb{E}}\underset{t\to\mathcal{T}}{ \mathbb{E}}\left[\sum_{c=1}^{C}\mathcal{L}_{\text{DM}}(f_{\theta_{t}}(S_{c}))\right]\] \[\text{s.t. }\theta_{t},\psi_{t}=\text{opt}-\text{alg}_{\theta, \psi}(\mathcal{L}_{\text{CE}}(h_{\theta_{t-1}},f_{\theta_{t-1}}),\varsigma), \tag{5}\]

where the cross entropy loss is w.r.t. the feature extractor and predictive head, \(\mathcal{L}_{\text{CE}}(\Phi)=\mathcal{L}_{\text{CE}}(h_{\psi},f_{\theta})= \mathbb{E}_{G,y}-\mathcal{G},y\left[\left(h_{\psi}(f_{\theta}(G)),y\right) \right]\), and for each class \(c\), we optimize its corresponding interpretive graph(s) \(\mathcal{S}_{c}\). The interpretation procedure is based on the model training trajectory, while the model is normally trained on the original classification task. Thus this interpretation method can serve as a plug-and-play tool without interfering normal model training.

The proposed framework is illustrated in Figure 2, for each training step \(t\), we update interpretive graphs by aligning with the training graphs in the GNN model's feature space via distribution matching. Along the whole training trajectory, we keep updating interpretive graphs in a curriculum learning manner to capture the model's training behavior. It is worth noting that such a distribution matching scheme has shown success in distilling rich knowledge from training data to synthetic data (Zhu et al., 2019), which preserve sufficient discriminative information for training the underlying model. This justifies our design of distribution matching for interpretation.

### Practical Constraints in Graph Optimization

Optimizing each interpretive graph is essentially optimizing its adjacency matrix and node feature. Denote a interpretive graph as \(S=(\mathbf{A}_{s},\mathbf{X}_{s})\), with \(\mathbf{A}_{s}\in\{0,1\}^{m\times m}\) and \(\mathbf{X}_{s}\in\mathbb{R}^{m\times d}\). To generate solid graph explanations using Eq. (5), we introduce several practical constraints on \(\mathbf{A}_{s}\) and \(\mathbf{X}_{s}\). The constraints are applied on each interpretive graph, concerning discrete graph structure, matching edge sparsity, and feature distribution with the training data.

#### Discrete Graph Structure

Optimizing the adjacency matrix is challenging as it has discrete values. To address this issue, we assume that each entry in matrix \(\mathbf{A}_{s}\) follows a Bernoulli distribution \(\mathcal{B}(\Omega):p(\mathbf{A}_{s})=\mathbf{A}_{s}\odot\sigma(\Omega)+(1- \mathbf{A}_{s})\odot\sigma(-\Omega)\), where \(\Omega\in[0,1]^{m\times m}\) is the Bernoulli parameters, \(\sigma(\cdot)\) is element-wise sigmoid function and \(\odot\) is the element-wise product, following (Golov et al., 2013; Golov et al., 2013; Golov et al., 2013). Therefore, the optimization on \(\mathbf{A}_{s}\) involves optimizing \(\Omega\) and then sampling from the Bernoulli distribution. However, the sampling operation is non-differentiable, thus we employ the reparameterization method (Golov et al., 2013) to refactor the discrete random variable into a function of a new variable \(\varepsilon\sim\text{Uniform}(0,1)\). The adjacency matrix can then be defined as a function of Bernoulli parameters as follows, which is differentiable w.r.t. \(\Omega\):

\[\mathbf{A}_{s}(\Omega)=\sigma((\log\varepsilon-\log(1-\varepsilon)+\Omega)/ \tau), \tag{6}\]

where \(\tau\in(0,\infty)\) is the temperature parameter that controls the strength of continuous relaxation: as \(\tau\to 0\), the variable \(\mathbf{A}_{s}\) approaches the Bernoulli distribution. Now Eq. (6) turns the problem of optimizing the discrete adjacency matrix \(\mathbf{A}_{s}\) into optimizing the Bernoulli parameter matrix \(\Omega\).

#### Matching Edge Sparsity

Our interpretive graphs are initialized by randomly sampling subgraphs from training graphs, and their adjacency matrices will be freely optimized, which might result in too sparse or too dense graphs. To prevent such scenarios, we exert a sparsity matching loss by penalizing the distance of sparsity between the interpretive and the training graphs, following (Golov et al., 2013):

\[\mathcal{L}_{\text{sparsity}}(\mathcal{S})=\sum_{(\mathbf{A}_{s}(\Omega), \mathbf{X}_{s})\sim\mathcal{S}}\max(\Omega-\epsilon,0), \tag{7}\]

Figure 2. Overview of the proposed globally interpretable learning framework via graph distribution matching GDM.

where \(\Omega=\sum_{ij}\sigma(\Omega_{ij})/|\Omega|\) calculates the expected sparsity of a interpretive graph, and \(\epsilon\) is the average sparsity of initialized \(\sigma(\Omega)\) for all interpretive graphs, which are sampled from original training graphs thus resembles the sparsity of training dataset.

```
1:Input: Training data \(\mathcal{G}=\{\mathcal{G}_{c}\}_{c=1}^{C}\)
2:Initialize explanation graphs \(\mathcal{S}=\{\mathcal{S}_{c}\}_{c=1}^{C}\) for each class \(c\)
3:for\(t=0,\ldots,T-1\)do
4: Sample mini-batch interpretive graphs \(\mathcal{B}^{\mathcal{S}}=\{\mathcal{B}^{\mathcal{S}}_{c}-\mathcal{S}_{c}\}_{c =1}^{C}\)
5: Sample mini-batch training graphs \(\mathcal{B}^{\mathcal{G}}=\{\mathcal{B}^{\mathcal{G}}_{c}-\mathcal{S}_{c}\}_{c =1}^{C}\)
6:\(\sigma\) Optimize global interpretive graphs
7:for class \(c=1,\ldots,C\)do
8: Compute the interpretation loss following Eq. (9): \(\mathcal{L}_{c}=\mathcal{L}_{\text{DM}}(\hat{f}_{\theta_{t}}(\mathcal{B}^{ \mathcal{S}}_{c}))+\alpha\cdot\mathcal{L}_{\text{feat}}(\mathcal{B}^{\mathcal{ S}}_{c})+\beta\cdot\mathcal{L}_{\text{sparsity}}(\mathcal{B}^{\mathcal{S}}_{c})\)
9:endfor
10: Update explanation graphs \(\mathcal{S}\leftarrow\mathcal{S}-\eta\nabla_{\mathcal{S}}\sum_{c=1}^{C} \mathcal{L}_{c}\)
11:\(\sigma\) Optimize GNN model as normal
12: Compute normal training loss for graph classification task \(\mathcal{L}_{\text{CE}}(h_{\mathbf{\varphi}_{t-1}},\hat{f}_{\theta_{t-1}})=\sum_{ \mathcal{G}=\mathcal{B}^{\mathcal{G}}}(h_{\mathbf{\varphi}_{t-1}}(\hat{f}_{\theta_ {t-1}}(G),y)\)
13: Update feature extractor \(\mathbf{\theta}_{t+1}=\hat{\theta}_{t}-\eta_{1}\nabla_{\mathcal{G}}\mathcal{L}_{ \text{CE}}(h_{\mathbf{\varphi}_{t-1}},\hat{f}_{\theta_{t-1}})\)
14: Update predictive heat \(\mathbf{\psi}_{t+1}=\hat{\mathbf{\varphi}}_{t-2}\nabla_{\mathcal{G}}\mathcal{L}_{\text{ CE}}(h_{\mathbf{\varphi}_{t-1}},\hat{f}_{\theta_{t-1}})\)
15:endfor
16:Output: Explanation graphs \(\mathcal{S}^{*}=\{\mathcal{S}^{*}_{c}\}_{c=1}^{C}\) for each class \(c\)
```

**Algorithm 1** Globally Interpretable Learning via Graph Distribution Matching (GDM)

**Matching Feature Distribution** Real graphs in practice may have skewed feature distribution; without constraining the feature distribution on interpretive graphs, rare features might be overshadowed by the dominating ones. For example, in the molecule dataset MUTAG, node feature is the atom type, and certain node types such as Carbons dominate the whole graphs. Therefore, when optimizing the feature matrix of interpretive graphs for such unbalanced data, it is possible that only dominating node types are maintained. To alleviate this issue, we propose to match the feature distribution between the training graphs and the interpretive ones.

Specifically, for each graph \(G=(\mathbf{A},\mathbf{X})\) with \(n\) nodes, we estimate the graph-level feature distribution as \(\mathbf{\hat{x}}=\sum_{i=1}^{n}\mathbf{X}_{i}/n\in\mathbb{R}^{d}\), which is essentially a mean pool of the node features. For each class \(c\), we then define the following feature matching loss:

\[\mathcal{L}_{\text{feat}}(\mathcal{S}_{c})=\|\frac{1}{|\mathcal{G}_{c}|}\sum_{( \mathbf{A},\mathbf{X})\in\mathcal{G}_{c}}\mathbf{\hat{x}}-\frac{1}{|\mathcal{ S}_{c}|}\sum_{(\mathbf{A}_{c},\mathbf{X}_{c})\in\mathcal{S}_{c}}\mathbf{\hat{x}}_{c} \|^{2}, \tag{8}\]

where we empirically measure the class-level feature distribution by calculating the average of graph-level features. By minimizing the feature distribution distance in Eq. (8), even rare features can have a chance to be distilled in the interpretive graphs.

### Final Objective and Algorithm

Integrating the practical constraints discussed in Section 3.5 with the distribution matching based interpretation framework in Eq. (5), we now obtain the final objective for interpretation optimization, which essentially is determined by the Bernoulli parameters for sampling discrete adjacency matrices and the node feature matrices. Formally, we aims to solve the following optimization problem:

\[\min_{\mathcal{S}}\quad\mathop{\mathbb{E}}_{t\sim\mathcal{T}}\big{[}\sum_{c= 1}^{C}\mathcal{L}_{\text{DM}}(\hat{f}_{\theta_{t}}(\mathcal{S}_{c}))+\alpha \cdot\mathcal{L}_{\text{feat}}(\mathcal{S}_{c})+\beta\cdot\mathcal{L}_{\text{ sparsity}}(\mathcal{S})\big{]}\]

\[\text{s.t.}\;\mathbf{\theta}_{t},\mathbf{\psi}_{t}=\text{opt}-\text{alg}_{\mathbf{\phi}, \mathbf{\varphi}}(\mathcal{L}_{\text{CE}}(h_{\mathbf{\psi}_{t-1}},\hat{f}_{\theta_{t-1 }}),\varsigma) \tag{9}\]

where we use \(\alpha\) and \(\beta\) to control the strength of regularizations on feature distribution matching and edge sparsity respectively. Algorithm 1 details the steps for solving this optimization problem.

**Complexity Analysis** We now analyze the time complexity of the proposed method. Suppose for each iteration, we sample \(B_{1}\) interprettive graphs and \(B_{2}\) training graphs. Denote their average edge number as \(m\). The inner loop for interpretive graph update takes \(m(B_{1}+B_{2})\) computations on node, while the update of GNN model uses \(mB_{2}\) computations. Therefore the overall complexity is \(\mathcal{O}(mT(B_{1}+2B_{2}))\), which is of the same magnitude of complexity for normal GNN training. This demonstrates the efficiency of our interpretation method: it can simultaneously generate interpretations as the training of GNN model proceeds, without introducing extra complexity.

## 4. Experimental Studies

This section aims to verify the necessity of our proposed method for globally interpretable graph learning. Specifically, we conduct extensive experiments to answer the following questions:

* **Q1**: Does the proposed global interpretation result in similar GNN models as trained in original data (i.e., with high fidelity)?
* **Q2**: Is the training trajectory necessary for accurate global interpretation (compared with ensemble model snapshots)?
* **Q3**: Are the generated interpretations human-intelligible?

We provide both quantitative and qualitative study to evaluate the global interpretations generated by GDM, comparing with existing global interpretation baselines and ablation variants.

### Experimental Setup

**Dataset** The interpretation performance is evaluated on the following synthetic and real-world datasets for graph classification, whose statistics can be found in Table 1.

* _Real-world_ data includes: **MUTAG**(Czhang et al., 2017) consists of chemical compounds with atoms as nodes and chemical bonds as edges, labeled by whether it has a mutagenic effect on a bacterium. **GraphTwitter**(Zhou et al., 2017) includes Twitter comments for sentiment classification with three classes. Each comment sequence is presented as a graph, with word embedding as node feature. **Graph-SST5**(Zhu et al., 2017) is a similar dataset with reviews, where each review is converted to a graph labeled by one of five rating classes.
* _Synthetic_ data includes: **Shape** contains four classes, i.e., Lollipop, Wheel, Grid, and Star. Each class has the same number of synthesized graphs with a random number of nodes. **BA-Motif**(Lollipop et al., 2017) uses Barabasi-Albert (BA) graph as base graphs, among which half graphs are attached with a "house" motif and the rest with "non-house" motifs. **BA-LRP**(Shi et al., 2017) based on Barabasi-Albert (BA) graph includes one class being node-degree concentrated graphs, and the other degree-evenly graphs. These datasets do not have node features, thus we use node index as the surrogate feature.

**Baseline** We mainly compare GDM with global interpretation baselines, and ablative variants of our method.
* _Global interpretation baselines_: **XGNN**(Wang et al., 2019) generate global interpretation via reinforcement learning. Since it heavily relies on domain knowledge (e.g. chemical rules) in the reward function, thus we only evaluate it on MUTAG. **GNNInterpret**(Zhu et al., 2019) generates interpretations based on label and embedding similarity but it is only based on a pre-trained GNN model1. We also include a simple **Random** strategy as a reference, which randomly selects graphs from the training set as interpretations. Footnote 1: Since the official codebase is not yet available, its evaluation is based on our implementation following the paper
* _Ablation variants of GDM:_ We also consider the variants of GDM which generate interpretation based on selective model snapshots. **GDM-First** and **GDM-Last** uses only the first or the last model snapshot respectively for the outer optimization in Eq. (5). **GDM-Ensemble** uses the same set of model snapshots as in GDM for conducting the outer optimization of Eq. (5), but ignores the sequence of model trajectory (i.e., disabling the inner optimization).

Meanwhile, a comparison of GDM with several local interpretation methods (which extract interpretive graphs for each training instance) can be found in Appendix A.1. A simple inherently global-interpretable method is also compared in Appendix A.2.

**Evaluation Protocol** We comprehend global interpretability from two perspectives, i.e., the interpretation should lead to high-fidelity model that is similar to the original target model (i.e., the model to be explained), and should have high chance to be predicted as the right classes. Based on this intuition, we establish the following evaluation protocols accordingly:

* _Model Fidelity_ aims to verify whether the generated interpretation indeed captures essential class-discriminative patterns, such that the interpretation can be utilized to train a similar model as if it is trained on the original training set. Desired interpretation should capture patterns that dominate the model training procedure. To calculate this metric, we first use the generated interpretive graphs to train a surrogate model (with the same architecture as the original model) from scratch. Then we calculate model fidelity as the ratio of cases when the surrogate model makes the same decision as the original model on test data.
* _Model Utility_ is to investigate whether the interpretation can lead to a high-utility model. Similarly, we train a surrogate model on the interpretation graphs. Then model utility is calculated as the surrogate model's predictive accuracy on test data.
* _Predictive Accuracy_ is to validate whether the interpretation can be correctly perceived by the target model as its corresponding class. Ideal interpretive graphs should be correctly classified to their classes by the target model being explained. We report the target model's predictive accuracy on the interpretive graphs as predictive Accuracy.

**Configurations** We choose the graph convolution network (GCN) as the target GNN model for interpretation, as it is widely used for graph learning. It contain 3 layers with 256 hidden dimension, concatenated by a mean pooling layer and a dense layers in the end. Adam optimizer (Kingma and Ba, 2015) is adopted for model training. In both evaluation protocols, we split the dataset as 85% training and 15% test data, and only use the training set to generate interpretative graphs. To learn interpretive graphs that generalize to a distribution of model initializations, we empirically adopt regular model restarts to sample multiple trajectories. Given the interpretative graphs, each evaluation experiments are run 5 times, with the mean and variance reported.

### Quantitative Results

This evaluation aims to answer the first question **Q1**. Meanwhile, we also report the commonly adopted predictive accuracy.

**Model Fidelity and Model Utility Performance** In Table 2, we compare GDM with baselines in terms of model fidelity and utility. XGNN performed on MUTAG achieves 89.47 fidelity and 68.40 utility with 10 graphs per class. We observe that GDM achieves remarkably better performance almost on all datasets, which indicates that GDM indeed captures discriminative patterns the model learns during training, such that our generated interpretation can also train a similarly useful model (with high model fidelity and utility). Meanwhile, different from XGNN, we do not include any dataset specific rules, thus is a more general interpretation solution.

**Predictive Accuracy** In Table 3, we compare the predictive accuracy of GDM, XGNN and GNNInterpret respectively. Note that the predictive accuracy for GDM on all datasets except MUTAG is larger than 90%, implying that the generated graphs could preserve those essential information of the data, which plays a crucial role in guiding the desicion-making. Comparatively, GNNInterpretzel has worse performance on most datasets, including Graph-Twitter, Graph-SST5, BA-LRP, and MUTAG, which indicates that several significant patterns of the data during training trajectory are lost and GNNInterpretzel could not recover those undisclosed information along the training trajectory.

**Efficiency** Another advantage of GDM is that it generates interpretations in an efficient manner. As shown in Appendix A.3, GDM is almost 4 times faster than the global interpretation method XGNN. Our methods takes almost no extra cost to generate multiple interpretative graphs, as there are only few interpretive graphs compared with the training dataset. XGNN, however, select each edge in each graph by a reinforcement learning policy which makes the interpretation process rather expensive.

### Model Analysis

**Ablation Study** In Table 4, we generate 10 interpretive graphs per class based on model snapshots. Intuitively, only using the first

\begin{table}
\begin{tabular}{l c c c c c} \hline \hline Dataset & \#Graph & \#Node & \#Edge & \#Class & GCN Accuracy \\ \hline BA-Moff & 1000 & 25 & 50.93 & 2 & 100.00 \\ BA-LRP & 20000 & 20 & 42.04 & 2 & 97.95 \\ Shape & 100 & 53.39 & 813.93 & 4 & 100.00 \\ MUTAG & 188 & 17.93 & 19.79 & 2 & 88.63 \\ Graph-Twitter & 4998 & 21.10 & 40.28 & 3 & 61.40 \\ Graph-SST5 & 8544 & 19.85 & 37.78 & 5 & 44.39 \\ \hline \hline \end{tabular}
\end{table}
Table 1. Basic Graph Statisticsmodel snapshot would capture less feature and structure information, thus the model fidelity score would be smaller than GDM as shown in Table 4. In the ablation study, there are also notable discrepancies between the GDM-Ensemble fidelity and GDM fidelity on a few datasets, including Graph-Twitter, BA-Motif, and BA-LRP. Those ensemble snapshots would possibly preserve misleading patterns which could be filtered out during model training but been captured while distribution matching, leading to the large deviates of the fidelity score for the GDM-Ensemble model. Generally, we can observe that the distribution matching design is effective: disabling this design will greatly deteriorate the performance.

**Parameter Sensitivity** In our final objective Eq. (9), we defined two hyper-parameters \(\alpha\) and \(\beta\) to control the strength for feature matching and sparsity matching regularization, respectively.

In this subsection, we explore the sensitivity of hyper-parameters \(\alpha\) and \(\beta\). Since MUTAG is the only dataset that contains node features, we only apply the feature matching regularization on this dataset. we vary the sparsity coefficient \(\beta\), and report the utility and predictive accuracy for all of our datasets in Figure 3. For most datasets excluding Shape, the utility performance start to degrade when the \(\beta\) becomes larger than 0.5. This means that when the interpretive graph becomes more sparse, it will lose some information during training time. Given the small values of \(\beta\), the graphs are relatively dense and the model predictive accuracy for all datasets except Graph-SSTS and Graph-Twitter converges to be stationary, denoting that the sparsity of those graphs would not heavily influence generating interpretations.

Moreover, we report the model utility and model fidelity with different feature-matching coefficients \(\alpha\) in Table 5. A larger \(\alpha\) means we have a stronger restriction on the node feature distribution. We found that when we have more strict restrictions, the utility increases slightly. This is an expected behavior since the node features from the original MUTAG graphs contain rich information for classifications, and matching the feature distribution enables the interpretation to capture rare node types. By having such restrictions, we successfully keep the important feature information in our interpretive graphs. However, as the coefficient \(\alpha\) increase, the model fidelity would slightly decrease, which means the restrictions about

\begin{table}
\begin{tabular}{l c c c c c c c} \hline \hline Dataset & Graph-Twitter & Graph-SST5 & BA-Motif & BA-LRP & Shape & MUTAG & XGN on MUTAG & 779 \\ \hline GDM-First & 25.84\(\pm\)4.06 & 21.28\(\pm\)0.21 & 51.20\(\pm\)2.23 & GDM-Last & 28.61\(\pm\)3.41 & 27.19\(\pm\)0.27 & 46.40\(\pm\)2.53 & 760 \\ GDM-Ensemble & 30.68\(\pm\)6.00 & 25.70\(\pm\)0.25 & 51.40\(\pm\)5.56 & **GBM** & **58.13\(\pm\)2.74** & **36.62\(\pm\)0.76** & **91.60\(\pm\)3.72** & 782 \\ \hline Dataset & BA-LRP & Shape & MUTAG & & & & & \\ \hline GDM-First & 51.03\(\pm\)0.75 & 60.00\(\pm\)0.00 & 73.68\(\pm\)2.19 & & & & & \\ GDM-Last & 49.95\(\pm\)0.28 & 60.00\(\pm\)1.00 & 56.84\(\pm\)5.78 & & & & & \\ GDM-Ensemble & 56.39\(\pm\)0.54 & 58.00\(\pm\)0.00 & 87.37\(\pm\)0.73 & **GBM** & **95.50\(\pm\)0.50** & **64.00\(\pm\)8.00** & **94.73\(\pm\)0.00** & **94.73\(\pm\)0.00** & **94.73\(\pm\)0.00** \\ \hline \hline \end{tabular}
\end{table}
Table 4. Ablation study showing _Model Fidelity_ when generating 10 interpretive graphs per class.

\begin{table}
\begin{tabular}{l c c c c c c c} \hline \hline \multirow{2}{*}{Dataset} & \multirow{2}{*}{Graphs/Cls} & \multicolumn{3}{c}{Model Fidelity} & \multicolumn{3}{c}{Model Utility} & \multirow{2}{*}{GCN Accuracy} & \multirow{2}{*}{779} \\ \cline{3-3} \cline{5-7}  & & GDM & & & & & GDM & & & \\ \hline \multirow{4}{*}{MUTAG} & 1 & **81.05 \(\pm\) 9.76** & 79.53 \(\pm\) 2.58 & 49.47 \(\pm\) 10.84 & **71.92 \(\pm\) 2.48** & 70.17 \(\pm\) 2.48 & 50.87\(\pm\) 15.0 & 799 \\  & 5 & **92.63 \(\pm\) 2.58** & 84.21 \(\pm\) 0.00 & 65.26 \(\pm\) 6.31 & 77.19 \(\pm

[MISSING_PAGE_FAIL:8]

## References

* (1)
* Agarwal et al. (2023) Chiring Agarwal, Owen Queen, Himabindu Lakkaraju, and Marika Zitnik. 2023. Evaluating Explainability for Graph Neural Networks. _Scientific Data_ 10, 144 (2023). [https://www.nature.com/articles/s41597-0251974-x](https://www.nature.com/articles/s41597-0251974-x)
* Azin et al. (2022) Steve Azin, Antonio Long, Pietro Barbiero, Pietro Lio, and Anne Passerini. 2022. Global explainability of gnns via logic combination of learned concepts. _arXiv preprint arXiv:2210.07184_ (2022).
* Baldassar and Azinoru (2019) Federico Baldassar and Hossein Azinoru. 2019. Explainability techniques for graph convolutional networks. _arXiv preprint arXiv:1905.13688_ (2019).
* Debnath et al. (1991) Akin Kumar Debnath, Ross L Lopez de Compagnie, Greg Debnath, Alan J Shumerman, and Corwin Hanstel. 1991. Structure-activity relationship of mutagenic aromatic and heteroaromatic nitro compounds. correlation with molecular orbital energies and hydrophobicity. _Journal of medicinal chemistry_ 34, 2 (1991), 786-797.
* Duvenaud et al. (2015) David Duvenaud, Dougal Maclaurin, Jorge Aguilera-Iparraguirre, Rafael Gomez-Bombarelli, Timothy Hirzel, Alan Aspuru-Guzik, and Ryan F Adams. 2015. Convolutional Networks on Graphs for Learning Molecular Fingerprints. In _NeurIPS_.
* Gilmer et al. (2017) Justin Gilmer, Samuel S Schoenholz, Patrick F Riley, Oriol Vinyals, and George E Dahl. 2017. Neural message passing for quantum chemistry. In _International conference on machine learning_. PMLR, 1263-1272.
* Getron et al. (2012) Arthur Getron, Martin M Borgward, Mallet J Rasch, Bernhard Scholkopf, and Alexander Smola. 2012. A kernel two-sample test. _The Journal of Machine Learning Research_ 13, 1 (2012), 723-773.
* Huang et al. (2022) Gang Huang, Makoto Yamada, Yuan Tian, Dinesh Singh, and Yi Chang. 2022. GraphML: Local Interpretable Modelling Techniques for Graph Neural Networks. _IEEE Transactions on Knowledge and Data Engineering_ (2022), 1-6. [https://doi.org/10.1109/TKDE.2022.1381455](https://doi.org/10.1109/TKDE.2022.1381455)
* Jin et al. (2022) Wei Jin, Xianfeng Tang, Homing Jiang, Zheng Li, Daung Zhang, Jiliang Tang, and Bing Yin. 2022. Condensing graphs via one-step gradient matching. In _Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining_. 720-730.
* Kingma and Ba (2014) Diederik P Kingma and Jimmy Ba. 2014. Adam: A method for stochastic optimization. _arXiv preprint arXiv:1412.0980_ (2014).
* Kipf and Welling (2016) Thomas N Kipf and Max Welling. 2016. Semi-supervised classification with graph convolutional networks. _arXiv preprint arXiv:1609.02497_ (2016).
* Lin et al. (2021) Lin Lin, Hanan Blaser, and Hongqing Wang. 2021. Graph Embedding with Hierarchical Attentive Membership. _arXiv preprint arXiv:2111.0904_ (2021).
* Lin et al. (2022) Lu Lin, Ethan Blaser, and Hongqing Wang. 2022. Graph structural attack by perturbing spectral distance. In _Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining_. 99-98.
* Lin et al. (2022) Lin, Jingjiein Chen, and Hongqing Wang. 2022. Spectral Augmentation for Self-Supervised Learning on Graphs. _arXiv preprint arXiv:2210.00468_ (2022).
* Luo et al. (2020) Dongheng Luo, Wei Cheng, Dongkuan Xu, Wenchao Yu, Bo Zong, Haifeng Chen, and Xiang Zhang. 2020. Parameterized explainer for graph neural network. _Advances in neural information processing systems_ 33 (2020), 19620-19631.
* Luo et al. (2020) Dongheng Luo, Wei Cheng, Dongkuan Xu, Wenchao Yu, Bo Zong, Haifeng Chen, and Xiang Zhang. 2020. Parameterized explainer for graph neural network. _Advances in neural information processing systems_ 33 (2020), 19620-19631.
* Maddison et al. (2016) Chris Maddison, Andrey Mnih, and Yee Whye Teh. 2016. The concrete distribution: A continuous relaxation of discrete random variables. _arXiv preprint arXiv:1611.00721_ (2016).
* Miao et al. (2022) Shiqi Miao, Mia Liu, and Pan Li. 2022. Interpretable and generalizable graph learning via stochastic attention mechanism. In _International Conference on Machine Learning_. PMLR, 15524-1554.
* Pope et al. (2019) Phillip P. Pope, Soheil Kolouri, Mohammad Rostami, Charles E. Martin, and Heiko Hoffman. 2019. Explainability Methods for Graph Convolutional Neural Networks. In _Proceedings of the IEEE CVIF Conference on Computer Vision and Pattern Recognition (CVPR)_.
* Schulze et al. (2021) Thomas Schulze, Oliver Eberle, Jonas Lederer, Shinichi Nakajima, Kristof T Schutt, Kias-Robert Muller, and Gregoire Montavon. 2021. Higher-order explanations of graph neural networks via reinforcement walks. _IEEE transactions on pattern analysis and machine intelligence_ 41, 11 (2021), 7581-7596.
* Schulze et al. (2022) Thomas Schulze, Oliver Eberle, Jonas Lederer, Shinichi Nakajima, Kristof T Schutt, Klaus-Robert Muller, and Gregoire Montavon. 2022. Higher-Order Explanations of Graph Neural Networks via Relevant Walks. _IEEE Transactions on Pattern Analysis and Machine Intelligence_ 44, 11 (low 2022), 7581-7596. [http://doi.org/10.1109/tpam.2021.3115452](http://doi.org/10.1109/tpam.2021.3115452)
* Socher et al. (2013) Richard Socher, Alex Perelipjan, Jean Wu, Jason Chuang, Christopher D. Manning, Andrew Ng, and Christopher Potts. 2013. Recursive Deep Models for Semantic Compositionality Over a Sentiment Treebank. In _Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing_. Association for Computational Linguistics, Seattle, Washington, USA, 1631-1642. [https://aclanthology.org/D13-1170](https://aclanthology.org/D13-1170)
* Velickovic et al. (2017) Petr Velickovic, Guillem Cucurull, Anantxa Casanova, Adriana Romero, Pietro Lio, and Yoshua Bengio. 2017. Graph attention networks. _arXiv preprint arXiv:1708.10903_ (2017).
* Vu and Thai (2020) Minh Vu and My T Thai. 2020. Pgm-explaher: Probabilistic graphical model explanations for graph neural networks. _Advances in neural information processing systems_ 33 (2020), 12225-12235.
* Wang and Shen (2022) Xiaoqi Wang and Han-Wei Shen. 2022. CNNInterpreter: A Probabilistic Generative Model-Level Explanation for Graph Neural Networks. _arXiv preprint arXiv:2202.07924_ (2022).
* Yanghu et al. (2020) Zonghu, Wixin Shiu Tan, Fengwen Chen, Guodong Long, Chengjie Zhang, and S Yu Philip. 2020. A comprehensive survey of graph neural networks. _IEEE transactions on neural networks and learning systems_ 32, 1 (2020), 4-24.
* Ying et al. (2018) Rex Ying, Raining He, Kaifeng Chen, Pong Kisombatchai, William L Hamilton, and June Leskovec. 2018. Graph convolutional neural networks for web-scale recommender systems. In _Proceedings of the 24th ACM SIGKDD international conference on knowledge discovery & data mining_. 974-983.
* Ting et al. (2019) Zhitao Ying, Dylan Bourgeois, Jiaxuan You, Marika Zitnik, and Jure Leskovec. 2019. Gureapalibar: Generating explanations for graph neural networks. _Advances in neural information processing systems_ 32 (2019).
* You et al. (2022) Jiaxuan You, Taiyu Du, and Jure Leskovec. 2022. ROIANDS: graph learning framework for dynamic graphs. In _Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining_. 2358-2366.
* Yuan et al. (2020) Hao Yuan, Jiliang Tang, Xia Hu, and Shuiwang Ji. 2020. _Sgmn: Towards model explanations of graph neural networks. In _Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining_. 430-438.
* Yuan et al. (2021) Hao Yuan, Fan Yang, Mengnan Du, Shuiwang Ji, and Xia Hu. 2021. Towards structured NLP interpretation via graph explainers. _Applied AI Letters_ 2, 4 (2021), e38.
* Yuan et al. (2022) Hao Yuan, Haiyang Yu, Shurui Gui, and Shuiwang Ji. 2022. Explainability in graph neural networks: A taxonomic survey. _IEEE Transactions on Pattern Analysis and Machine Intelligence_ (2022).
* Zhao and Elken (2023) Bo Zhao and Hikan Elken. 2023. Dataset condensation with distribution matching. In _Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision_. 6514-6523.

## Appendix A Appendix

### GDM versus Inherently Interpretable Model

We compare the performance of GDM with a simple yet inherently global-interpretable method, logistic regression with hand-crafted graph-based features. When performing LR on these graph-structured data, we leverage the Laplacian matrix as graph features: we first sort row/column of adjacency matrix by nodes' degree to align the feature dimensions across different graphs; we then flatten the reordered laplacian matrix as input for LR model. When generating interpretations, we first train a LR on training graphs and obtain interpretations as the top most important features (i.e. edges on graph) based on regression weights where average number of edges. We then report the utility of LR interpretations, shown in the following table 7.

LR shows good interpretation utility on simple datasets like BA-Motif and BA-LRP, but it has much worse performance on more sophisticated datasets, compared with GDM in table 7. For example, interpretations generated by GDM can achieve close accuracy as the original GCN model.

### GDM versus Local Interpretation

As aforementioned, GDM provides global interpretation, which is significantly different from the extensively studied local interpretation methods: we only generate few small interpretive graphs per class to reflect the high-level discriminative patterns the model captures; while local interpretation is for each graph instance. Though our global interpretation is not directly comparable with existing local interpretation, we still compare their interpretation utility to demonstrate the efficacy of our GDM when we only generate a few interpretive graphs. The results can be found in Table 8. We compare our model with GNNExplainer1, PGExplainer2 and Captum3 on utility. For Graph-SST5 and Graph-Twitter, we generate 100 graphs for each class and 10 graphs for other datasets.

Footnote 100: [https://github.com/BexYing/gm-model-explainer](https://github.com/BexYing/gm-model-explainer)

Footnote 101: [https://github.com/bylagloo/PGExplainer](https://github.com/bylagloo/PGExplainer)

Comparing these results, we can observe that the GDM obtains higher utility score compared to different GNN explaination methods, with relatively small variance.

### Time Efficiency

The Table 9 shows the time consumed for generating 10 interpretive graphs per class on all datasets by GDM, and the time needed for generating graphs on MUTAG by XGNN

### More Qualitative Results

**MUTAG** This dataset has two classes: "non-mutagenic" and "mutagenic". As discussed in previous works (Chen et al., 2018; Chen et al., 2018), Carbon rings along with \(NO_{2}\) chemical groups are known to be mutagenic. And (Chen et al., 2018) observe that Carbon rings exist in both mutagen and non-mutagenic graphs, thus are not really discriminative. Our synthesized interpretive graphs are also consistent with these "ground-truth" chemical rules. For "mutagenic" class, we observe two \(NO_{2}\) chemical groups within one interpretative graph, and one \(NO_{2}\) chemical group and one carbon ring, or multiple carbon rings from a interpretative graph. For the class of "non-mutagenic", we observe that \(NO_{2}\) groups exist much less frequently but other atoms, such as Chlorine, Bromine, and Fluorine, appear more frequently. To visualize the structure more clearly, we limit the max number of nodes to 15 such that we do not have too complicate interpretative graphs.

**BA-Motif and BA-LRP** The qualitative results on BA-Motif dataset show that the explanations for all classes successfully identify the discriminative features. For House-shape class, all the generated graphs have captured such a pattern of house structure, regardless of the complicated base BA graph in the other part of graphs. For the other class with five-node cycle, our generated graphs successfully grasp it from the whole BA-Motif graph. In BA-LRP dataset, the first class consists of Barabasi-Albert graphs of growth parameter 1, which means new nodes attached preferably to low degree nodes, while the second class has new nodes attached to Barabasi-Albert graphs preferably to higher degree nodes. Our interpretative dataset again correctly identify discriminative patterns to differentiate these two classes, which are the tree-shape and ring-shape structures.

**Shape** In Table 10, the generated explanation graphs for all the classes are almost consistent with the desired graph patterns. Note that the difference for interpretative graphs of Star and Wheel are small. This provides a potential explanation for our post-hoc quantitative results in Table 2, where pre-trained GNN models cannot always distinguish interpretative graphs of Wheel shape with interpretative graphs of Star shape.

\begin{table}
\begin{tabular}{l r r r r r} \hline \hline Dataset & \multicolumn{2}{c}{MUTAG BA-Motif BA-LRP Shape Graph-Twitter Graph-SST5} \\ \hline LR Interpretation & 93.33\% & 100\% & 100\% & 100\% & 42.10\% & 22.68\% \\ Original LR & 96.66\% & 100\% & 100\% & 100\% & 52.06\% & 27.45\% \\ \hline \hline \end{tabular}
\end{table}
Table 7. Model Utility of Logistic Regression

\begin{table}
\begin{tabular}{l r r r r r} \hline \hline Dataset & \multicolumn{2}{c}{**Graph-Twitter Graph-SST5**} & \multicolumn{2}{c}{**BA-Motif**} & \multicolumn{1}{c}{**BA-LRP**} \\ \hline GNNExplainer & 43.00\%-0.007 & 54.12\%-14.08 & 73.64\%-53.10 & 73.26\%-24.09 & 80.00\%-4.99 & 56.65\%-4.75 \\ \hline Reliphimer & 28.4 \(\pm\) 0.00 & 55.46\%-0.03 & **52.64\%-0.04** & 25.64\%-0.04 & 73.74\%-1.85 & 50.24\%-0.18 \\ \hline Captum & 25.85\%-0.03 & 55.71\%-0.02 & **80.20\%-0.01** & **25.06\%-0.01** & 80.00\%-0.01 & 42.36\%-0.01 \\ \hline \hline \end{tabular}
\end{table}
Table 8. Utility Compared with Local Interpretation

\begin{table}
\begin{tabular}{l r r r r} \hline \hline Dataset & \multicolumn{2}{c}{**Graph-Nitter Graph-SST5**} & \multicolumn{2}{c}{**BA-Motif**} & \multicolumn{1}{c}{**BA-LRP**} \\ \hline Time (8) & 169.29 & 291.36 & 184.89 & 155.41 & 110.07 \\ \hline Dataset & \multicolumn{2}{c}{**Shape**} & \multicolumn{2}{c}{**MUTAG**} & \multicolumn{1}{c}{**XGNN on MUTAG**} \\ \hline Time (8) & 176.01 & 218.45 & 838.20 & 118.08 \\ \hline \hline \end{tabular}
\end{table}
Table 9. _Efficiency_ when generating 10 interpretive graphs per class.

\begin{table}
\begin{tabular}{p{56.9pt} p{56.9pt} p{56.9pt} p{56.9pt}} \hline \hline Dataset & Class & Training Graph Example & Synthesized Interpretation Graph \\ \hline \hline \multirow{4}{*}{**BA-Motif**} & \multirow{2}{*}{House} & \multirow{2}{*}{Non-House} & \multirow{2}{*}{Non-House} & \multirow{2}{*}{Non-House} \\  & & & 1228 \\ \hline \multirow{4}{*}{**BA-LRP**} & \multirow{2}{*}{Low Degree} & \multirow{2}{*}{Non-House} & \multirow{2}{*}{Non-House} \\  & & & 1228 \\ \hline \multirow{4}{*}{**BA-LRP**} & \multirow{2}{*}{Non-House} & \multirow{2}{*}{Non-House} & \multirow{2}{*}{Non-House} \\  & & & 1228 \\ \hline \multirow{4}{*}{**BA-LRP**} & \multirow{2}{*}{Low Degree} & \multirow{2}{*}{Non-House} & \multirow{2}{*}{Non-House} \\  & & & 1228 \\ \hline \multirow{4}{*}{**BA-LRP**} & \multirow{2}{*}{High Degree} & \multirow{2}{*}{Non-House} & \multirow{2}{*}{Non-House} \\  & & & 1228 \\ \hline \multirow{4}{*}{**MUTAG**} & \multirow{2}{*}{Mutagenicity} & \multirow{2}{*}{Non-Mutagenicity} & \multirow{2}{*}{Non-House} \\  & & & 1228 \\ \hline \multirow{4}{*}{**MUTAG**} & \multirow{2}{*}{Non-Mutagenicity} & \multirow{2}{*}{Non-Mutagenicity} & \multirow{2}{*}{Non-House} \\  & & & 1228 \\ \hline \multirow{4}{*}{**MUTAG**} & \multirow{2}{*}{Wheel} & \multirow{2}{*}{Wheel} & \multirow{2}{*}{Wheel} \\  & & & 1228 \\ \hline \multirow{4}{*}{**MUTAG**} & \multirow{2}{*}{Lollipop} & \multirow{2}{*}{Non-House} & \multirow{2}{*}{Non-House} \\  & & & 1228 \\ \hline \multirow{4}{*}{**Shape**} & \multirow{2}{*}{Grid} & \multirow{2}{*}{Non-House} & \multirow{2}{*}{Non-House} \\  & & & 1228 \\ \hline \hline \end{tabular}
\end{table}
Table 10. The qualitative results for all datasets. For each class in each dataset, as a reference, the example graph selected from the training data is displayed in the left column, while the generated explanation graphs are in the right column. Different 1280 node colors in MUTAG represent different node types.