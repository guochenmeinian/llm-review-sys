Broken Access: On the Challenges of Screen Reader Assisted Two-Factor and Passwordless Authentication

Anonymous Author(s)

###### Abstract

In today's technology-driven world, web services have opened up new opportunities for blind and visually impaired people to interact independently. Securing interactions with these services is crucial; however, currently deployed methods of web authentication mainly concentrate on sighted users, overlooking the specific needs of the blind and visually impaired community. In this paper, we address this critical gap by investigating the security and accessibility aspects of these web authentication methods when adopted by blind and visually impaired users. We model web authentication for such users as screen reader assisted authentication and introduce an evaluation framework called Authentication Workflows Accessibility Review and Evaluation (AWARE). Using AWARE, we then systematically assessed popular PC-based and smartphone-based screen readers against different types of deployed web authentication methods, including variants of 2FA and passwordless schemes, to simulate real-world scenarios for blind and visually impaired individuals. We analyzed these screen reader assisted authentication interactions with authentication methods in three settings: using a terminal (PC) with screen readers, a combination of the terminal (PC) and smartphone with screen readers, and smartphones with integrated screen readers. The results of our study underscore significant weaknesses in all of our observed screen reader assisted authentication scenarios for real-life authentication methods. These weaknesses, encompassing specific accessibility issues caused by imprecise screen reader instructions, highlight vulnerability concerning observed scenarios for both real-world and research literature based attacks, including phishing, concurrency, fatigue, cross-service, and shoulder surfing.

Broadly, our AWARE framework can be used by authentication system designers as a precursor to user studies which are typically time-consuming and tedious to perform, independently allowing to unfold security and accessibility problems early which designers can address prior to full-fledged user testing of more isolated issues.

## 1 Introduction

Security researchers and practitioners are continuously working to improve user security through secure and user-friendly authentication methods [9, 15, 73, 75, 88]. However, many studies and real-world methods often overlook the security of accessibility solutions, especially those for authenticating blind and visually impaired users. Currently, 43 million people live with blindness, and 295 million have moderate-to-severe visual impairment [70]. Many of them use assistive technologies [24, 40, 63, 71, 79, 82] to manage online bank accounts, personal accounts, and access web services. Furthermore, unauthorized access to the account of a blind or visually impaired employee within an organization could expose sensitive organizational information, increasing the risk of data breaches [2].

The focal point of our investigation is to evaluate the vulnerability and accessibility of authentication processes involving screen readers, modeling the problem as _screen reader assisted authentication_. We aim to determine if these processes introduce security risks that could aid attacker's objectives. Single-factor authentication is considered the weakest form of security [17, 25]. Due to accessibility limitations, blind and visually impaired users face challenges in selecting and identifying strong passwords [34, 74], typing passwords on smartphones [4, 59], and also raising security concerns during password entry [41]. Therefore, this research examines secure 2FA, MFA, and passwordless systems (e.g., push-based authentication and Passkeys) using assistive technologies like screen readers [8, 91], the primary medium of interaction with digital services for blind and visually impaired users [26]. Studies have highlighted issues with screen reader accessibility, such as navigation challenges and risks related to headphone usage [1], with a key security concern being potential eavesdropping during user interactions [50, 84], although these studies did not focus on authentication interactions.

Moreover, researchers have explored authentication methods and addressed accessibility issues in web authentication, including locating authentication pages and verifying credentials [27], as well as developing dedicated methods like BraillePassword [5], BendyPass [19], and AudioBindLogin [46]. However, none of these studies have specifically evaluated widely deployed authentication methods, such as those from Google, Duo, Microsoft, and Authenticators from different vendors for various platforms (e.g., smartphone, desktop), concerning both security and accessibility aspects. This gap includes understanding interaction dynamics with screen readers and their response to attacks targeting authentication methods. Expanding research in this area could offer valuable insights for improving the security and accessibility of authentication processes for individuals with blindness or visual impairments, which is the focus of our study.

To conduct our study, we designed the Authentication Workflows Accessibility Review and Evaluation (AWARE) framework, focusing on analyzing interactions between screen readers and authentication methods. The AWARE framework is designed to evaluate the security and accessibility of authentication methods for blind and visually impaired users who rely on screen readers. It works through a semi-automated process that records and analyzes screen reader interactions with various authentication workflows, using the speech-to-text conversion of the traversed authentication workflow and comparing it with the original text to assess how well instructions are conveyed. It also tests responses to simulated attacks, such as phishing, shoulder surfing, concurrent login, and notification fatigue. The framework helps identify issues early, making it a cost-effective tool for developers to improve the security and usability of authentication systems before conducting full-scale user studies.

We began with a preliminary analysis to select appropriate screen readers and authentication methods, covering a range of real-life scenarios. In the evaluation phase, we used the AWARE framework to perform authentication with the selected methods, utilizing screen readers such as JAWS and VoiceOver. This phase included generating attacks drawn from both real-world scenarios and research literature to assess the authentication methods thoroughly.

Our Contributions. Key contributions are highlighted below:

* _The notion of screen reader assisted authentication._ We model the studied problem as screen reader assisted authentication and systematically examine security and accessibility challenges in real-life authentication methods, including several 2FA and pass-wordless variants such as OTP, push notifications, FIDO, and phone calls. Unlike prior research, we assessed these methods from the perspective of blind and visually impaired users. We aimed to understand how these users interact with authentication methods in computers and smartphones.
* _A qualitative and quantitative framework and methodology for security and accessibility assessment._ We present the AWARE framework and methodology to evaluate diverse real-life authentication methods using various screen reader environments. We selected different 2FA and MFA variants for assessment with chosen terminal (PC)-based and smartphone-based screen readers in three settings: using a terminal (PC) with screen readers, a combination of terminal (PC) and smartphone with screen readers, and smartphones with integrated screen readers. These selections and usage settings cover a wide range of settings to accommodate user preferences. By conducting different attacks including phishing, concurrency (Yang et al., 2017), fatigue (Zhu et al., 2017), cross-service (Zhu et al., 2017), shoulder surfing, and downgrading (Zhu et al., 2017) attacks in screen reader assisted authentication scenarios, we aim to understand the security and accessibility challenges for blind and visually impaired individuals. _Our AWARE framework and methodology can be used as a precursor to user studies, which can be costly and time-consuming especially due to the need to recruit study subjects who are blind or visually impaired._ It can help isolate critical accessibility and security problems that the designers of the authentication system can focus on addressing prior to user testing or deployment.
* _A systematic evaluation of web authentication for targeted users._ Following our AWARE framework and methodology, we evaluated twelve different types of real-life 2FA methods using six different screen readers on both terminals (PCs) and smartphones, identifying critical vulnerabilities and accessibility challenges. The accessibility issue arises from a stark difference in comprehensibility, where screen readers achieve a comprehensibility of over 74% for general text but drop significantly for authentication instructions, with only 22 out of 33 cross-settings involving screen readers and authentication methods reaching less than 50% comprehensibility. Vulnerability challenges include the screen reader's inability to pronounce and identify phishing links, which may enable victims to inadvertently share OTP codes over the attacker's phishing channel. We observed exploitation against push-based 2FA across different attacks and vulnerabilities against FIDO-MFA and passwordless (Passkeys) for numerous attacks including downgrading and cross-service attacks. These findings indicate that screen reader-assisted users may face higher vulnerability in real-life authentication methods than those without screen readers.

**Demonstrations:** We demonstrate some of our key findings at: [https://sites.google.com/view/secure-auth-for-blind-user/home](https://sites.google.com/view/secure-auth-for-blind-user/home)

## 2. Related Work

**Security Exploitation of Screen readers.** Researchers have studied screen readers, which allow visually impaired and blind users to access the internet and smart devices. Inan et al. (2018) surveyed 20 individuals who used screen readers for internet browsing. Their research revealed security issues, including misleading links, spam emails, and poorly designed CAPTCHA verifications on web pages. Hasan and Gjossetter (2019) identified research gaps and accessibility problems in interactive maps, proposing potential solutions. Hayes et al. (2019) conducted a study in which participants expressed security concerns while using screen readers at home, work, and public places. Ambore et al. (2019) surveyed five participants to assess security-accessibility trade-offs in mobile financial services for visually impaired users. Their findings revealed usability and security issues, including the need to audibly express passwords. While these studies highlighted security concerns associated with screen readers, they did not specifically investigate the vulnerability and accessibility of authentication methods for blind and visually impaired users who rely on screen readers.

**Security and Usability Concerns of Authentication Technology for Blind and Visually Impaired Users.** Researchers also reported on the usability aspects of authentication systems for blind and visually impaired users. Dosono et al. (2019) conducted a contextual survey on blind and visually impaired individuals' authentication experiences across computers, smartphones, and websites. Their findings indicated significant authentication delays and confusing login challenges. In a literature review by Andrew et al. (2019), accessible authentication mechanisms for individuals with various impairments were analyzed, including individuals with blindness and low vision. The review highlighted the lack of thorough usability assessments in prior research and the limitation of small sample sizes that did not adequately represent the target audience. Saxena and Watt (2018) discussed authentication technologies for blind and visually impaired users a decade ago, focusing on secure user and device authentication. Their paper proposed research challenges and directions for authentication technologies. Faustino and Girouard (2020) conducted a survey to understand the security and usability challenges of authentication methods used on mobile devices and highlighted the usability challenges of blind and visually impaired users. The results highlighted a preference for easy-to-use authentication methods, such as fingerprint recognition, over other methods like PIN-based authentication. Unlike our work, these studies did not focus on the security challenges of widely used real-life authentication methods from the perspective of blind and visually impaired users.

## 3. Preliminaries

To achieve our research objective, we methodically selected screen readers and authentication methods, as described in this section.

### Selection of Screen Readers

In choosing screen readers, we aimed to consider a wide range of fully-featured options for both mobile and terminal (PC) platforms, focusing on their authentication assistance capabilities. Factors like numbers of downloads and insights from studies, particularly "Screen Reader User Survey Number 9" by WebAIM (Wen et al., 2018), influenced our decision. This study holds significant relevance to our research, with 92.30% of respondents identifying as disabled.

Based on the mentioned survey and our investigation, we have identified user preferences for terminal (PC)-based options such as JAWS, NVDA, Dolphin, and ChromeVox. It is worth noting that ChromeVox, a browser-based screen reader, was included in our list as a terminal (PC)-based screen reader and has over \(200,000\) users, as indicated in the Chrome Web Store [36].

Participants of the mentioned study indicated VoiceOver and TalkBack, the default screen readers for iPhone and Android. We also attempted to include more smartphone-based screen readers by searching the App Store and Google Play. However, after installing the apps from these searches, we found that most were designed for reading web pages, PDFs, or for object identification. Examples include Speechify Text to Speech Voice, NaturalReader - Text to Speech, Audify read aloud web browser, and TextGrabber Scan and Translate. Unfortunately, we did not find any smartphone based screen readers that can perform full interaction including authentication apart from VoiceOver and Talkback for our study. Appendix Table 4 lists the selected screen readers for both PC and smartphones.

### Selection of Authentication Methods

For selecting authentication methods, we ensured comprehensive coverage of various real-life methods, as detailed in Appendix Table 5, chosen based on their popularity (see Appendix Table 6). Methods utilizing a one-time password mechanism, such as text messages, phone calls, and authenticators, were labeled as "One-time password (OTP-2FA)", while push notification methods were categorized as "Push-2FA". Additionally, we tested Google's Titan Security Key [37], categorized as "FIDO-MFA", as it requires inserting the Fast Identity Online (FIDO) USB key into the device and then putting the user's fingerprint on the key for authentication. Duo's phone calls instruct users to press a specific number key in the keypad for authentication, it is denoted as "Phone call-2FA".

Authenticators generate OTPs for a certain duration for registered accounts to perform authentication. To investigate authentication within the terminal (PC), we selected authenticators in the form of desktop applications and browser extensions, including _Authenticator_ (browser extension), _Twilio Authy_ (desktop application) which has popular mobile version applications, _WinAuth_ (desktop application) [3], and _GAuth_ (browser extension). Some authentication methods are compatible with both PC and smartphone platforms.

We chose Duo (OTP-2FA, Push-2FA, Phone Call-2FA) based on the number of downloads, and user priority [30, 33]. Additionally, we included authentication methods provided by Google (OTP-2FA, Push-2FA, FIDO-MFA) in our study based on user preferences [16]. Microsoft's select-confirm Push-2FA is a passwordless approach that requires users to authenticate by confirming a number displayed in the login window. This confirmation is achieved by selecting the corresponding number from options presented in the push notification and unlocking the phone with face recognition, fingerprint, or PIN.

## 4 Our Aware Framework and Study Methodology

In this section, we present the Authentication Workflows Accessibility Review and Evaluation (AWARE) framework, a simple qualitative and quantitative method for evaluating the security and accessibility of screen reader-assisted web authentication. As one of the first works in this under-studied research domain, the AWARE framework is designed to identify critical issues in screen reader-assisted web (2FA/passwordless) authentication and serves as a semi-automated, inexpensive pre-study tool to highlight major concerns that can be investigated further with future user studies. Our framework highlights key concerns that designers should prioritize, rather than relying solely on user studies, as organizing such studies with this group is challenging. Designers can iteratively update and re-evaluate their solutions based on the AWARE framework's findings.

### Process of Evaluating Screen Readers

The framework allows us to assess the communicability of the screen readers, which refers to the screen reader's ability to convey instructions without any inconsistencies, by pinpointing instances where critical authentication details (such as OTPs and essential instructions) were inadequately communicated. These issues in communication could hinder blind and visually impaired users' ability to complete the authentication process, as elaborated in Section 5.1.

The framework additionally allows us to assess screen readers' ability to communicate information to the visually impaired users within web pages (for web apps) or application instances (for desktop and smartphone applications), which we termed as "comprehensibility". Comprehensibility, in this context, pertains to the clarity and relevance of the conveyed information [14] for proper authentication. Furthermore, the framework allows us to conduct a comparative analysis of comprehensibility between authentication system workflows and general-purpose web pages, such as news articles, to determine if screen readers effectively convey information for authentication system workflow compared to these broader content types (serving as a baseline for evaluation). The reason for low comprehensibility indicates the difficulty faced by screen readers because of inaccessible authentication interfaces such as the structure of presented content (e.g., maintaining heading label), alternative text for images, explain buttons, and text box adequately.

To evaluate comprehensibility, the framework takes the input of recorded output of screen readers for a news article as a general text and the authentication flow of each authentication method as authentication instruction texts in the default reading speed, which many new (non-expert) blind users prefer [18]. These recorded audio files are then converted to text using the IBM Watson speech-to-text engine [47] automatically. The generated text was compared to the original text to measure comprehensibility automatically through similarity and dissimilarity, indicating clarity.

The framework chose the speech-to-text engine due to its significant advancements and high accuracy in speech recognition technology. In certain cases, it has even outperformed professional human

Figure 1: AWARE framework and methodology as a precursor to traditional user study.

transcribers (Peters et al., 2019). To compute the similarity between the original and generated text, it utilized the pysimilar library, which is a Python library that calculates cosine similarity (Shi et al., 2019). Pysimilar utilizes the TF-IDF vectorizer to transform the text into vectors, converting them into arrays of numbers. Subsequently, cosine similarity computation is performed. Term frequency - Inverse document frequency (TF-IDF) serves as a text vectorizer that transforms the text into a usable vector (Shi et al., 2019). Using TF-IDF vectors, cosine similarity proved most effective in identifying similarities among short texts (Shi et al., 2019).

The collection process for recording authentication workflows is assisted by humans, while the evaluation process is automated, as explained above. Therefore, we describe our AWARE framework and methodology as semi-automated and a precursor to user testing. In traditional user testing-based evaluations of workflows, developciss need to run the base system and all authentication flows during user study. In contrast, our AWARE framework and methodology allow for testing authentication flows without user tests; instead, the developer tests them as they would test web accessibility. Although it involves some manual effort, this approach helps identify accessibility issues and security vulnerabilities earlier in the process. Developers can then iterate on their system to address these issues and may run the authentication workflow using our AWARE framework and methodology again. Once the developer is satisfied with the results, and if desired, the final design can be subjected to small-scale user testing to uncover any new issues that our AWARE framework and methodology might have missed. This process is illustrated in Fig. 1. Therefore, our approach is not intended to replace user testing but to reduce the cost and frequency of running user tests on entire workflows. User studies can be designed by the findings from our methodological evaluation and conducted after achieving a more refined design.

### Evaluating Screen Reader Assisted 2FA & MFA

To evaluate the vulnerability and accessibility of 2FA and MFA methods, we employed the AWARE framework and methodology with screen readers. Additionally, many blind and visually impaired users may use headphones and a screen curtain to keep themselves secure from shoulder surfers while performing authentication (Shi et al., 2019; Shi et al., 2019). Based on the WebAIM screen reader user survey number 8 (Shi et al., 2019), 41.3% of users utilize terminal (PC)-based screen readers, 9.5% use smartphone-based screen readers, and 49.2% use both simultaneously. Therefore, the framework structured the test settings accordingly, as outlined in Appendix Table 7 and explained below. While we described our selected screen readers and authentication methods for each setting, designers can choose their own screen readers or authentication methods for their evaluations.

**Terminal (PC)-based Screen Readers.** Terminal (PC)-based screen readers, including JAWS, NVDA, Dolphin, and ChromeVox, were used to assess a range of terminal (PC)-supported authentication methods. The tested methods include Google's FIDO-MFA and OTP-2FA via authenticators (e.g., authentication codes from Authy, GAuth, and WinAuth). Methods not supported in terminal (PC)-based scenarios, like Duo (specific to smartphones), were excluded.

**Smartphone-based Screen Readers.** We used smartphone-based screen readers, Talkback (Android) and VoiceOver (iPhone), to evaluate authentication methods. However, some terminal (PC)-based authenticator software like GAuth and WinAuth is not supported on smartphones, so we focused our testing on the remaining methods.

**Simultaneous use of Terminal (PC)-based and Smartphone-based Screen Readers.** We set up both a terminal (PC) and smartphones with screen readers to evaluate authentication methods. Our focus was on understanding how these methods respond to screen readers simultaneously on different devices. From Appendix Table 8, it is evident that there are a total of 8 possible combinations involving 2 smartphones and 4 PC-based screen reader configurations. However, upon observation, we noted that changing the PC-based screen reader (e.g., JAWS, NVDA) with a particular smartphone-based screen reader (e.g., VoiceOver or Talkback) did not yield significant changes or effects while evaluating PC and Smartphone concurrent use combinations. Here, the choice of smartphone-based screen reader read a more significant impact when compared to altering the screen reader on a PC-based terminal. As a result, we narrowed down our testing to only 2 combinations (JAWS-VoiceOver, NVDA-Talkback) in the PC and Smartphone concurrent use combinations.

### Evaluating Existing Threats Against Screen Reader Assisted Authentication Scenario

**Threat 0: Remotely Fingerprinting Visually Impaired Users.** Attackers may target blind and visually impaired users, viewing them as vulnerable. Detecting these users could be the first step in exploiting further vulnerabilities. Momona et al. (Momona et al., 2019) highlight the use of extensions to enhance accessibility, which can be detected via browser fingerprinting techniques (Shi et al., 2019; Shi et al., 2019; Shi et al., 2019) to identify blind or visually impaired users. We conducted a technical inspection based on the noted studies and accurately detected ChromeVox and other listed extensions. Details of this attack are in Appendix Section 8.2.

**Threat 1: Phishing.** Fraudulent requests often aim to deceive victims into revealing credentials via phishing (Shi et al., 2019). Blind and visually impaired users rely on screen readers, which often struggle to convey subtle differences in URLs because they pronounce top-level domains as whole words, complicating the detection of phishing attempts. We assessed slightly altered top-level domains, such as _bankofamerica_ vs. _bankofamerica_ and _wellsfargo_ vs. _wellsfargo_, using the same methods described in Section 4.1. Our study found that screen readers pronounced these pairs similarly, and similarity scores showed a 100% match (Appendix Fig. 2). While users can manually check links character-by-character using screen readers, this method is time-consuming, requires extra keystrokes, and attackers may exploit this by creating long or complex URLs, further obscuring detection. Additionally, Lau and Peterson (Lau and Peterson, 2019) highlighted that screen readers struggle to properly read phishing warnings generated by browsers. Attackers can exploit these limitations, using similar-looking URLs and unreadable phishing warnings to deceive visually impaired users and breach security (see Appendix Fig 3).

**Threat 2: Concurrent Loglin.** In this scenario, an attacker initiates a login session simultaneously with the victim, deceiving the victim into accepting the attacker's approach, mistakenly believing it is their own (Shi et al., 2019; Shi et al., 2019; Shi et al., 2019). An attacker can learn probable login times by monitoring the victim's browsing sessions, exploiting contextual information like peak usage times (e.g., start of a workday, after breaks, observing the victim's login behavior in physical proximity, or using social engineering techniques such as prompting the victim to log in during a fake troubleshooting session [53]). In this research, we specifically observed this vulnerability in Push-2FA variants from the perspective of blind and visually impaired users. Jay Prakash et al. simulated this attack on notification-based 2FA with 75 user-attacker pairs, discovering only 5% expressed doubts about the attack [72].

When testing Google Push with VoiceOver and Talkback, we found that the attacker's concurrent notification overrides the legitimate one. Although the notification page shows device and city details, success depends on the victim accepting the attacker's push, either assuming it's legitimate or ignoring the details. Attackers can also initiate logins from the same device and city as the victim, as these are often generic. Duo Push is particularly vulnerable, as it overrides the victim's notification and lacks attacker device details, making it nearly identical. Microsoft select-confirm appears more secure, requiring users to confirm a number and unlock the phone via fingerprint, face, or PIN. However, Mahad et al. [62] describe an attack where the attacker blocks the user's request and manipulates the authentication to present malicious options. Screen reader assisted users will not have any instruction about this attack and may mistakenly accept the attack session, assuming it to be legitimate.

**Threat 3: Notification Fatigue.** Push notification fatigue, known as MFA spanning, involves continuously sending prompts to the user until they accept it, become mentally exhausted, or the attacker ceases the attack [51]. For our observation, we fatigued on each targeted authentication method from the perspective of blind and visually impaired users in screen reader-assisted scenarios by continuously generating push notifications at fixed \(t\) time intervals, shown in Appendix Fig. 4. Our observations found that Google and Duo's push-based methods are vulnerable.

Authentication via Google Push notification is highly vulnerable with VoiceOver and Talkback. In VoiceOver, earlier notifications remain at the top, and denying the attacker's push notification redirects the victim to change passwords. After pressing "change password", the victim might mistakenly accept the next (attacker) push notification, assuming it is a password change process. In Talkback, the attacker's recent notification overrides the previous one, potentially confusing the victim and leading to accepting malicious push during password changes. Microsoft select-confirm is also vulnerable to push fatigue. After declining an attacker's push, the victim receives simple "approve" and "deny" options rather than select-confirm nature, which attackers can repeatedly trigger, causing frustration and potentially leading to acceptance out of exhaustion. Duo Push vulnerability depends on admin settings that limit attempts, where repeated notifications can lock the account.

**Threat 4: Shoulder-Surfing.** Attackers can obtain sensitive information through shoulder surfing, often without the user's awareness. This threat is heightened by hidden cameras and is especially risky for visually impaired users, who may struggle to detect an attacker's presence [44] or surveillance devices [78]. Our study found that screen readers read credentials aloud during authentication. While users may use headphones or screen curtains for protection on a single device, when using both a terminal (PC) and smartphone concurrently (e.g., receiving OTP on a smartphone while logging in from a PC), one device often remains insecure. Additionally, conflicts arise when phone calls for OTP and screen reader instructions overlap, creating further insecurity (CBI) as discussed in Section 5.

In our scenario, the attacker, in proximity or using monitoring devices, initiates authentication simultaneously with the victim. When the victim clicks the login button, a legitimate OTP is generated. However, if the attacker triggers a "forgot password" request at the same time, the OTP is sent to the victim, who assumes it is for their request. The screen reader then reads the OTP aloud, allowing the attacker to hear it and use it to complete the "forgot password" request, gaining unauthorized access (see Appendix Fig. 6). The behaviors of different OTPs during such attacks are detailed in Section 5.

**Threat 5: FIDO-Specific Threats.** We evaluated the impact of FIDO-MFA on visually impaired users with screen readers, analyzing attacks from the FIDO specification [13] and creating additional scenarios to identify vulnerabilities. Since devices like Google Titan and Yubikey use the same FIDO2 protocols (WebAuthn and CTAP), we focused the evaluation by assessing a single representative device.

_5.1: Display Overlay Attack._ This attack disrupts transactions by presenting false information over legitimate content. We found that JAWS, Dolphin, and ChromeVox were vulnerable, reading the false information, while NVDA bypassed and read the correct data.

_5.2: Phishing._ Phishing challenges blind users as screen readers make phishing links sound similar to legitimate ones (see Section 4.3, Threat 1). Attackers could exploit this to test credentials and downgrade to weaker 2FA like OTP (see Section 4.3, Threat 5.6).

_5.3: Mis-Authentication and 5.4: Mis-Registration._ These client-side threats occur when users register keys or authenticate on phishing sites, leading to credential compromise. Section 4.3 (Threat 1) described the risk of phishing for blind and visually impaired users.

_5.5: Cross-Service Attack._ In a cross-service attack, the attacker manipulates a user's possession factor device, tricking them into approving authentication for a different service, as explained in Appendix Fig. 5. ChromeVox cannot read Windows security dialogue boxes/ prompts, leaving visually impaired users vulnerable in a FIDO cross-service attack [56]. The Dolphin can read security messages but fails when drawing a fake overlay over legitimate security boxes. JAWS reads the security box but does not read the service or browser name. NVDA performs best by reading the service name even through overlays, and preventing the attack.

_5.6: Downgrading._ Ulqinaku et al. used social engineering to downgrade FIDO, replacing it with weaker two-factor authentication [87]. Attackers exploit screen reader limitations to detect and expressing phishing links to perform real-time phishing in downgrading attacks. No screen reader can express and detect phishing links instead of expressing them as legitimate, as explained in Section 4.3 (Threat 1). Additionally, screen readers can not detect fake prompts generated by attackers to achieve weaker OTP-2FA code. Hence this attack is marked as vulnerable to screen readers assisted users.

## 5 Results and Findings

### Findings on Screen Reader Output

We identified several issues in effectively communicating authentication information (e.g., OTPs, push notifications) and instructions to blind and visually impaired users by utilizing our AWARE framework. As outlined in Section 4.1, these are referred to as _communicability_ and _comprehensibility_ issues.

Table 1 highlights observed communicability issues that disrupt the transmission of critical authentication information. These issues

[MISSING_PAGE_FAIL:6]

shows how well screen readers guide users during authentication. Unclear instructions can lead to confusion and security risks.

**Terminal (PC)-based Screen Readers.** In this setting, we tested only terminal (PC)-supported authentication methods, so metrics for other methods are excluded in Table 3 and Appendix Table 10. Vulnerability for concurrent login and notification fatigue is specific to push-based authentication methods and is not represented in Table 3 for other authentication methods. None of the methods are susceptible to shoulder surfers under this setting, as victims may use headphones and screen curtains during the authentication process.

GTP by GAuth is feasible for all terminal (PC)-based screen readers, despite the 60-second validity of the authentication code. In contrast, GTP by WinAuth is infeasible as screen readers are unable to communicate the code (UCO). WinAuth displays OTPs as asterisks, requiring a mouse click to reveal them, but even then, screen readers cannot localize the code to the user. Therefore, WinAuth is categorized as not applicable to phishing, while GAuth remains vulnerable (Section 4.3, Threat 1). Success in phishing depends on the feasibility of authentication methods, as the user's ability to input the code is required. Additionally, ChromeVox cannot provide instructions for WinAuth due to its inability to communicate elements outside the browser (UCEOB).

GTP by Twilio Authy, a desktop app, is inaccessible to ChromeVox due to its inability to read outside the browser (see Section 5.1). It is partially vulnerable to phishing for the terminal (PC)-based screen readers (except ChromeVox) as it provides only partial feasibility and meaningful output. OTPs by Authy remain valid for 60-second, and transitioning between login and authentication windows takes time, hindering clear instructions from screen readers. NVDA struggles to read button names, while Dolphin pronounces OTPs in two parts (e.g., "one hundred twenty-three, four hundred fifty-six" for "123456") (see Section 5.1 (NPO)).

GTP by Google Authenticator is vulnerable to phishing with JAWS and Dolphin. NVDA and ChromeVox face the numeric pronunciation of OTP (NPO) and lack an easy method to copy and input the code, making phishing vulnerability partial. The code disappears in 30 seconds and expires in 60 seconds, complicating the process.

In Table 3, FIDO (Titan Security Key) feasibility is categorized as partial for screen readers due to imprecise instructions identified in Table 2 and the inability to communicate security prompts (UCSP) for key insertion (Section 5.1). Dolphin and ChromeVox lack clear timing instructions for key insertion, though experienced users may authenticate through assumptions. However, this raises the risk of users accepting an attacker's approach, explained in Section 4.3 (Threat 5) and shown in Appendix Table 11.

**Smartphone-based Screen Readers.** We evaluated all four smartphone supported authentication methods shown in Appendix Table 5. Push-based methods like Microsoft select-confirm, Duo Push, and Google Push offer feasibility and defense against shoulder surfing and phishing but are vulnerable to concurrent login and notification fatigue with VoiceOver and Talkback. In concurrent login, attacker notifications override legitimate push notifications, causing the screen reader to read the recent (which can be attacker-generated) notification (see Section 4.3 (Threat 2)). In Section 4.3 (Threat 3), we discussed notification fatigue. Only Duo Push prevents the attacker from generating continuous push notifications, making it partially vulnerable due to administrators setting a threshold for concurrent push notifications to block attackers, as indicated in Table 3.

The Duo phone call method is infeasible due to conflict between instructions (CBI), as explained in Section 5.1. Duo OTP via text is partially vulnerable to phishing for smartphone screen readers due to numeric OTP pronuncations (NPO), making it difficult for blind users to remember a seven-digit code. OTP via Google Text Message exhibits the same vulnerability as the Duo Text Message method. Google OTP is vulnerable to phishing with VoiceOver but only partially vulnerable with Talkback, as VoiceOver does not convey the numeric pronunciation of OTP (NPO). Google OTP via phone call is also infeasible due to conflict, and it disconnects headphones, switching to speaker mode, increasing the risk of shoulder surfing.

GTP by Twilio Authy (mobile app) shows vulnerabilities with smartphone-based screen readers. VoiceOver always easy code copying, increasing feasibility and phishing vulnerability, while Talkback struggles with copying, resulting in partial vulnerability to phishing due to limited feasibility. Similarly, Google Authenticator (app) pronounces the code numerically (NPO), making both VoiceOver and Talkback partially feasible and partially vulnerable to phishing.

Google FIDO-MFA works well with VoiceOver, but Talkback provides inadequate instructions. FIDO's threat is detailed in Section 4.3 (Threat 5). However, FIDO has convenient usability.

**Simultaneous Use of both Terminal (PC) and Smartphone Screen Readers.** In these settings, all combinations are marked as "extremely vulnerable" due to the limitation of the user using headphones for both devices simultaneously. "Extremely vulnerable" perhaps indicates an unavoidable compromise, while "partially vulnerable" suggests potential attacks or defenses in specific situations.

\begin{table}
\begin{tabular}{c c c}  & **Push-2FA** & **Our-Time Password-2FA** \\  & **VPLA** & **Plishing** \\  & **Stochastic Setting** & **Stochastic Setting** \\  & **Datelin** & **Plishing** \\  & **Stochastic Setting** & **Stochastic Setting** \\  & **ChromeVox** & **Plishing** \\  & **Concurrency Attack** & **Stochastic Setting** \\  & **ViceOver** & **Plishing** \\  & **Fatigue Attack** & **Stochastic Setting** \\  & **Concurrency Attack** & **Stochastic Setting** \\  & **Stochastic Setting** & **Stochastic Setting** \\  & **Talkback** & **Fishing** \\  & **Fatigue Attack** & **Stochastic Setting** \\  & **Fatigue Attack** & **Stochastic Setting** \\  & **Contemporary Attack** & **Stochastic Setting** \\  & **Stochastic Setting** & **Stochastic Setting**The Duo and Google push methods are feasible but lack clear authentication instructions, making them vulnerable to concurrent login (Section 4.3, Threat 2) and notification fatigue (Threat 3). However, Duo Push is only partially vulnerable to fatigue with admit-controlled attempt limits. Microsoft's select-confirm method is feasible in all combinations, but terminal (PC)-based screen readers take longer to read the value from the login window to select in the smartphone, and smartphone-based readers need extra time to select the number due to the interface. These delays expose conflicts between terminal (PC) and smartphone screen readers (CBI). The method is vulnerable to concurrent login (Threat 2) and notification fatigue (Threat 3), where it simplifies to "approve" and "deny" buttons during fatigue attacks.

The Duo Phone Call is not feasible due to instruction conflicts (CBI), as explained in Section 5.1. OTP methods are vulnerable to shoulder surfing across all screen reader combinations in this setting due to an unprotected device without headphones, allowing unauthorized access (Section 4.3, Threat 4). Duo Text Message has partial feasibility, with numeric pronunciation (NPO) and slow switching between message and login windows, making it partially vulnerable to phishing. Google Phone Call for OTP introduces conflicts (CBI) that trigger the phone's speaker, potentially exposing the OTP.

This setting shows similar accessibility and vulnerability for GAuth (extension) and WinAuth (desktop app) as terminal (PC)-based screen readers due to identical testing procedures. For OTP via Google and Authy, the desktop versions behave like terminal (PC)-based settings, while the smartphone apps simplify authentication by allowing direct code input. However, this simplicity increases vulnerability to shoulder surfing, as codes are spoken aloud, and the method's feasibility makes it vulnerable to phishing.

In this setting, we tested FIDO-MFA for terminal (PC) authentication. Combinations showed similar partial feasibility, as screen readers are unable to communicate security prompts (UCSP), as detailed in Section 5.1 with instructions to touch the key for authentication. The Dolphin also lacked key placement instructions. Detailed FIDO vulnerabilities are discussed in Section 4.3 (Threat 5).

## 6. Discussion and Further Insights

**Limitations and Potential Mitigations.** While our study offers valuable insights into the accessibility and security vulnerabilities associated with screen readers and their responses to various authentication methods, we acknowledge inherent limitations in our approach. Our research primarily focused on analyzing the speech-based output of screen readers, neglecting a comprehensive exploration of braille or other critical accessibility devices, which are also used by visually impaired individuals. However, it is important to highlight that the use of speech-based output in screen readers alleviates the need for specific hardware like braille displays for visually impaired users. Our analysis was thorough and insightful in this regard.

**Effect of Faster Speech Rates of Screen Readers.** In our evaluation of screen reader comprehensibility, we focused primarily on the default speech rate of 50%. Given some users may use faster speech rates (61), we briefly also assessed comprehensibility at various faster speech rates using VoiceOver, a smartphone-based screen reader with Authy Authenticator's authentication workflow, including 60%, 70%, 80%, 90%, and 100% speech rates. Our findings indicate that the best comprehensibility score is achieved at the default speech rate, which is 37.32%. Notably, as the speech rate increases, the comprehensibility score drops: 18.06% at 60% speech rates, 1.85% at 70% speech rates, and 0% at speech rates of 80% and above. This implies that authentication flow accessibility and security when using faster rates may significantly degrade.

**Techniques to Mitigate Risks.** Our study has successfully pinpointed several security vulnerabilities that can be actively mitigated through strategic actions by screen reader developers and accessible security researchers. One effective approach to enhance user safety is the integration of automatic phishing detection and malicious link prediction features directly into screen readers. Despite the initial perception of biometric authentication as an easy and secure solution, it presents various challenges for fingerprint (69), face (76), and iris (55), especially for visually impaired individuals who encounter issues in accurately scanning and positioning their fingerprint and face (32). Screen readers should also detect and inform users about concurrent logins and notification fatigue utilizing notifications received through their devices, and emphasizing the clear communication of service names without overly avoiding specifics can further contribute to preventing cross-service. Resolving conflicts between phone calls and screen readers is essential for improving authentication accessibility for visually impaired users.

**Recommendation and Guidelines.** We recommend that authentication system designers carefully review their authentication workflows and incorporate clear/concise written instructions at each step, ensuring compatibility with screen readers, following our methodological approach (Section 4.2). The designers should manage authentication time expiration to allow visually impaired individuals sufficient time to listen and perform the required actions while preserving usability for sighted users. Additionally, designers should be mindful of potential conflicts with screen reader communication, such as generating a phone call while the screen reader is reading instructions. It is advised to redesign any step that may cause a conflict with screen reader communication. On the other hand, screen readers need improvement in effectively identifying crucial visual elements, such as service names. They should also clearly read out the domain name before loading each page and promptly identify any overlays on the screen. Implementing intelligent security solutions like phishing URL detectors (e.g., warning users if it reads any blacklisted URL) and multiple notification detectors (e.g., warning users if the screen reader detects multiple similar notifications received in the phone's notification bar) in the screen reader can effectively prevent phishing and notification fatigue.

## 7. Conclusion

In this research, we thoroughly examined currently deployed two-factor and passwordless authentication systems, revealing significant vulnerabilities and accessibility challenges, when employed by blind and visually impaired users. Our focus was understanding authentication challenges faced by blind and visually impaired users. Existing methods fall short in balancing accessibility and security for this user group. To comprehensively address these challenges, we advocate cross-disciplinary collaboration involving security, disability services, and human-computer interaction experts. Only through such efforts can we develop authentication methods that are both secure and accessible, enabling equitable digital participation while securing privacy and security.

[MISSING_PAGE_FAIL:9]

* Koller (2022) Joe Koller. 2022. MFA Fatigue: Everything You Need to Know About the New Hacking Strategy. [https://www.rehold-security-conven/en/en/fais-fatigue/](https://www.rehold-security-conven/en/en/fais-fatigue/).
* Kaleok (2022) Jordan Kaleok. 2022. _pysimilar@_5. [https://yupi.org/project/pysimil/description_](https://yupi.org/project/pysimil/description_).
* Jabraschen et al. (2021) Mohammed Jabraschen, Prakash Shrestha, Nitesh Saxena, and Jay Prakash. 2021. _Bypassing grain-based second factor and passwords: authentication with human-intinguishable technologies. In Proceedings of the 2021 ACM Asia Conference on Computer and Communications Security_. 447-461.
* Yamanik et al. (2022) Manisha Vamaz Katsanik, Stacey J. Watson, Gareth Wignell, and Rohan L Petits. 2022. OneButtonPIN: A Single Burton Authentication Method for Blind or Low Vision Users to Improve Accessibility and Present Exceptions. _Proceedings of the ACM on Human-Computer Interaction_ 6. MIT (2022), 1-22.
* Khadek et al. (2021) Smita Khadek, Swain Altirna, Shroadh Phanskari, Katek Kotech, Shijing Gite, and Sandor D Tappad. 2021. Iris increase detection for biometric authentication: A systematic literature review and future directions. _Inventeena_ 6. 4 (2021).
* Kuchthal et al. (2023) Dhruv Kuchthal, Muhammad Sasad, Adam Oost, and Frank Li. 2023. Evaluating the Security Posture of Real-World FID20 Dedotypes. (2023).
* Lau and Peterson (2023) Ethane Lau and Zachary Peterson. 2023. A research framework and initial study of browser security for the visually impaired. In _32nd USENIX Security Symposium (USENIX Security 2023)_, 4679-4696.
* Lazar et al. (2017) Jonathan Lazar, Brian Wortz, and Marco Winckler. 2017. Information privacy and security as a human right for people with disabilities. _Dosability, Human Rights, and Informatics Technology_ (2017), 199-211.
* Leppini et al. (2012) Barbara Leppini, Maria Claudia Bozzi, and Mania Bozzi. 2012. Integrating with mobile access via VoiceVendor: usability and accessibility issues. In _Proceedings of the 24th Australian Computer-human interaction conference_. 339-348.
* Ramadhan (2021) Lufth Ramadhan. 2021. TF-IDF Simplified. [https://towardhatscience.com/tf-idf-simplified-and-inabi/3d/5d53030](https://towardhatscience.com/tf-idf-simplified-and-inabi/3d/5d53030).
* Waltersz (2021) Macio Waltersz. 2021. Screen readers: hearing the unseen. [https://platform.ucm.com/resource-content/p/p/technical/lat-faster-centers-and-earns/](https://platform.ucm.com/resource-content/p/p/technical/lat-faster-centers-and-earns/).
* Mizraid et al. (2023) Ahmed Tanvir Mizraid, Mohammed Jabraschen, and Nitesh Saxena. 2023. Breaking Mobile Notification-based Authentication with Concurrent Attacks Outside of Mobile Devices. In _Proceedings of the 29th Annual International Conference on Mobile Computing and Networking_. 1-15.
* Munari et al. (2020) Kanki Munari, Madhosh Verma, and Guany Singh. 2020. A survey on assistive technology for visually impaired. _Internet of Things_ 11 (2020), 100188.
* Corporation (2024) Microsoft Corporation. 2024. Microsoft Authenticator. [https://gaps.apple.com/support/microsoft-authenticator/wiki/3d54685](https://gaps.apple.com/support/microsoft-authenticator/wiki/3d54685).
* Corporation (2024) Microsoft Corporation. 2024. Microsoft Authenticator. [https://gaps.google.com/support/microsoft-authenticator](https://gaps.google.com/support/microsoft-authenticator).
* Momao et al. (2023) Farhani Momao, Mike Ethanesu-U-Hague, and Syedd Naumu Billah. 2023. Understanding the Usages, Lifecycle, and Opportunities of Screen Readers' Plugins. _ACM Transactions on Accessible Computing_ 12, 2 (2023), 1-35.
* Napoli et al. (2021) Daniela Napoli, Khabza Bag, Mansou, and Sonia Chasson. 2021.
* In Literally Must hoping This With [Work]: "Obstacles Blocking the Online Security and Privacy of Users with Visual Disabilities. In _Security Symposium on Unable Privacy and Security (SOUPS 2021)_, 263-280.
* Niles et al. (2017) Michael Niles, Kelley Dempye, Victoria Van Drittlent, et al. 2017. An introduction to information security. _NIST special publication_ 800, 12 (2017), 101.
* Oogami et al. (2020) Wataru Oogami, Hidding Gomi, Shiyi Yamaguchi, Shota Yamanik, and Martyn Higuani. 2020. Observation study on usability challenges for fingerprint authentication using WebAuth-enabled android smartphones. _Age_ 20 (2020), 29.
* Orbis (2021) Orbis. 2021. New data shows 33 million people living with available blindness. [https://www.orbits.org/news/2021/page-global-thinkers-data-](https://www.orbits.org/news/2021/page-global-thinkers-data-).
* Phillips and Provakis (2018) Madeline Phillips and Michael J Provakis. 2018. Social interaction without vision: an assessment of assistive technology for the visually impaired. _Technology & Information_ 20, 1-2 (2018), 88-93.
* Prakash et al. (2021) Jay Prakash, Clarice Chua Qing Yu, Tanvi Ravindra Thomber, Andrei Bytse, Mohammed Jabr, Nitesh Saxena, Lucaine Briesing, Jawing Zhou, Mary QS Quick. 2021. Counterpoint Accession in Mis "Just Trap" Push-based Authentication: A Redesign and Usability Evaluation. In _2021 IEEE European Symposium on Security and Privacy (EuroSAC)_. IEEE, 1-36.
* Rose et al. (2019) Ken Rose, Trevor Smith, Jonathan Duston, Jonathan Ambrecht, Jacob Cameron, and Keat Scamons. 2019. A Usability Study of Five (Two-Factor) Authentication Methods. In _Federal Symposium on Usable Privacy and Security (SOUPS 2019)_. 357-370.
* Renaud et al. (2021) Karen Renaud, Graham Johnson, and Jacques Olobert. 2021. Accessible authentication: dyslexia and password strategies. _Information & Computer Security_ 29, 4 (2021), 604-624.
* Yan and Yan (2018) Zhang Hao and Zang Yan. 2018. A survey on biometric authentication: Toward secure and privacy-preserving identification. _IEEE Access_ (2018), 5984-6009.
* Saiki et al. (2022) Zirina Raoel Saiki, Raish Thibit, Khanna A Zidan, and Bee Khoo. 2022. Challenges of face image authentication and suggested solutions. In _2022 International Conference on Information Technology Systems and Innovation (ICITS)_. IEEE, 189-193.
* Sanchez-Rola et al. (2017) Iskander Sanchez-Rola, Igor Santos, and Davide Balzarotti. 2017. Extension Insekdown Security Analysis of Broswers Extension Resources Control Policies.. In _USENIX Security Symposium_. 679-694.
* Saxena and Hart (2009) Nietsh Saxena and James H Hart. 2009. Authentication technologies for the blind or visually impaired. In _Proceedings of the USENIX Workshop on Hot Topics in Security (HotSec)_, Vol. 9. 130.
* Senjan et al. (2021) Saraj Singh Senjan. 2021. Smartphones as assistive technology for visual impairment. _Eye_ 35, 8 (2021), 2078-2080.
* Sharif and Foroughi (2018) After Sharif and Babak Foroughi. 2018. ewdGraphs--A?Query plugin to create web accessible graphs. In _2018 13th IEEE Annual Consumer Communications & Networking Conference (CCO)_. IEEE, 1-4.
* Shikita et al. (2019) Patsy Shikita, Krishna Pabi, Pajun Thapa, and Subaru Shakya. 2019. A Comparison of Semantic Similarity Methods for Maximum Human Interpretability. In _2019 Artificial Intelligence for Transforming Business and Society (AITR)_, Vol. 1. 1-4. [https://doi.org/10.1109/TABAS18519.89943743](https://doi.org/10.1109/TABAS18519.89943743).
* Shi and Dek (2020) Ting-Ying Tai and Das. Dek. 2020. Access technology for blind and low vision accessibility. _(No Title)_ (2020).
* Sigsten et al. (2017) Alexandre Sigsten, Steven Van Acker, and Andrei Sabelfeld. 2017. Discovering browser extensions via web accessible resources. In _Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy_. 329-336.
* Smartori et al. (2018) Berghilam F Smartori, Jitza H. Malinand, and Santiago M. Martinez. 2018. User evaluation of the smartphone screen reader Follower with visually disabled participants. _Mobile Information Systems_ 2018 (2018), 1-9.
* Starov et al. (2019) Oleksi Starov, Pierre Lapedrika, Alexandru Kapsravelos, and Nick Nikiforakis. 2019. Unnecessarily Identifiable: Quantifying the fingerti probability of browser 118.
* Shikori and Nikiforakis (2017) Oleksi Starov and Nick Nikiforakis. 2017. Xbound: Quantifying the fingertiprobability of browser extensions. In _2017 IEEE Symposium on Security and Privacy (SP)_. IEEE, 941-956.
* Uplaugh et al. (2021) Ems Uplaugh, Haifa Ashok, AbdelRahman Akbou, Sonia Chasson, and Sqilian Cugkan. 2021. Reat-time Publishing Eliminated with [FDO]? Social Engineering Downage Attacks against [FDO] Protocols. In _30th USENIX Security Symposium (USENIX Security 2021)_. 3811-3828.
* Wang et al. (2021) Xuerui Wang, Zheng Yan, Rui Zhang, and Peng Zhang. 2021. Attacks and defenses in user authentication systems: A survey. _Journal of Network and Computer Applications_ 288 (2021), 103080.
* Wang et al. (2022) Yann Wang, Ruobin Wang, Crescenta Jiang, and Yee-Seul Kim. 2022. What 122 makes web data tables accessible? Insights and a tool for rendering accessible tables for people with visual impairments. In _Proceedings of the 2022 CHI Conference on Human Factors in Computing Systems_. 1-20.
* WebM (2019) WebM. 2019. Screen reader user survey number 8 results. [https://webain.org/projects/reference/servernews/](https://webain.org/projects/reference/servernews/).
* Xiong et al. (2018) WabM.M. 2021. Screen reader user survey number 9 results. [https://webain.org/projects/screen/releases/view9/](https://webain.org/projects/screen/releases/view9/).
* Xiong et al. (2018) Wayne Xiong, Lingfeng Wu, Fili Allee, Jaka Droppo, Xuedong Huang, and Andrea Stokes. 2018c. The Microsoft 2017 conversational speech recognition system. In _2018 IEEE international conference on acoustics, speech and signal processing (ICASSP)_. IEEE, 5934-5938.
* Ye et al. (2014) Hanlu Ye, Meethu Malik, Uran Oh, and Leih Findlater. 2014. Current and future mobile and wearable device use by people with visual impairments. In _Proceedings of the SIGCHI Conference on Human Factors in Computing Systems_. 3123-3132.

## Appendix

### Other Related Works

**Security Concerns for Visually Impaired Users.** Researchers have already noted several security concerns among blind and visually impaired users. Ahmed et al. (2018) conducted a study with 14 participants to explore privacy concerns in this group and found that assistive technologies, such as screen readers, raised security concerns due to the risk of bystanders listening to sensitive information. Lazer et al. (2018) discussed privacy issues faced by visually impaired individuals when using mobile devices. In another study, Buzzi et al. (2021) identified significant accessibility and usability issues for blind users accessing e-commerce platforms via screen readers. Jahankhani et al. (2019) examined e-accessibility and security challenges in online banking for blind and visually impaired individuals. Additionally, Napoli et al. (2019) investigated measures taken by blind and visually impaired users to ensure their online security and privacy. Their analysis revealed usability issues such as misleading screen reader outputs, and inadequate security advice. These issues can exacerbate the security and privacy risks faced by users. However, their research 

[MISSING_PAGE_FAIL:11]

* [135]

\begin{table}
\begin{tabular}{p{14.2pt}|p{142.3pt} p{142.3pt}} \hline
**Platform with screen readers (settings)** & **Authentication Methods** & 1355 \\ \hline Terminal (PC) & One time password (UT-2):A (Google authentication (extension), Autfly, WinAuth, GAath (extension)) & 1337 \\ \hline Simple & PhDi-M/A (Train Supply Key) & 1338 \\ \hline Smartphone & PhDi-2FA, Google push, Dono push, Movement select-confirm & 1339 \\ \hline The pure power (UT-2):A (Google text message, phone call, and authenticator), Doo text message, Microsoft authenticator, Delhi & 1340 \\ \hline PIDG-M/A (Train Security Key) & 1341 \\ \hline Terminal (PC) and Smartphone & PhDi-Srx, Google push, Dono push, Microsoft select-confirm & 1342 \\ \hline One time password (OT-2):A (Google text message, phone call, and authenticator), Doo text message, Photo Activity, GAath (extension, WinAuth) & 1343 \\ \hline IDG (phone call:STA) & 1344 \\ \hline PIDG-M/A (Train Security Key) & 1345 \\ \hline \hline \end{tabular}
\end{table}
Table 8. Devices and platforms used in our evaluation.

\begin{table}
\begin{tabular}{p{142.3pt}|p{142.3pt}|p{142.3pt}} \hline
**Device with platform** & **Skeen readers** \\ \hline IAWS & IAWS \\ \hline Template (PC) with Windows 10 & NDega \\ \hline Chemoin (Write Google Chrome (version), sain107/0.5304.107) & 1351 \\ \hline Twitter Plus (US5) & VoiceOver \\ \hline Smartphone Galaxy S21 Ultra (Android) & Database \\ \hline \hline \end{tabular}
\end{table}
Table 9. Comprehensibility of screen readers for general article (non-authentication context).

Figure 3. Potential phishing attacks in authentication methods for screen reader assisted users.

Figure 2. Phishing link in screen reader assisted scenario.

\begin{table}
\begin{tabular}{p{142.3pt}|p{142.3pt}|p{142.3pt}} \hline
**Platform with screen readers (settings)** & **Authentication Methods** & 1355 \\ \hline Terminal (PC) & One time password (UT-2):A (Google authentication (extension), Autfly, WinAuth, GAath (extension)) & 1337 \\ \hline Simple & PhDi-M/A (Train Supply Key) & 1338 \\ \hline Smartphone & PhDi-2FA, Google push, Dono push, Movement select-confirm & 1338 \\ \hline Data & One time password (UT-2):A (Google text message, phone call, and authenticator), Doo text message, Microsoft authenticator, Delhi & 1340 \\ \hline PIDG-M/A (Train Security Key) & 1341 \\ \hline Terminal (PC) and Smartphone & PhDi-Srx, Google push, Dono push, Microsoft select-confirm & 1342 \\ \hline One time password (OT-2):A (Google text message, phone call, and authenticator), Doo text message, Photo Activity, GAath (extension), WinAuth & 1343 \\ \hline IDG (phone call:STA) & 1344 \\ \hline PIDG-M/A (Train Security Key) & 1346 \\ \hline \hline \end{tabular}
\end{table}
Table 7. Platforms tested with various two-factor and multi-factor authentication methods.

Figure 5. Scenario of cross-service attack against screen reader assisted FIDO-MFA.

Figure 6. Potential shoulder surfing against OTP-2FA for screen reader assisted user.

[MISSING_PAGE_EMPTY:14]