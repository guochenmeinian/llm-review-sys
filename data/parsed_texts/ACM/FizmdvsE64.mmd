# Navigating the Deployment Dilemma and Innovation Paradox: Open-Source v.s. Closed-source Models

Anonymous Author(s)

###### Abstract.

Recent advances in Artificial Intelligence (AI) have introduced a new paradigm in Machine Learning (ML) model development: pre-training of foundation model and domain adaptation. Two groups lead in developing foundation model: closed-source developers and open-source community. As open-source community becomes increasingly engaged, the performance open-source models are catching up with closed-source models. However, this leaves domain deployers into a dilemma: use closed-source models via API access or host open-source models on proprietary hardware. Using closed-source models incurs recurring costs, while hosting open-source models incurs substantial hardware investments and potentially lagging advancements. This paper presents a game-theoretical model to examine the economic incentives behind the deployment choice and the impact of open-source engagement strategy on technology innovation. We find that the deployer consistently opts for closed-source APIs when the open-source community engages in the market keatively by maintaining a fixed performance ratio relative to closed-source advancements. However, open-source models can be favored when a proactive open-source community produces high-performance models independently. Also, we identify conditions under which engagement and competitiveness of the open-source community can foster or inhibit technological progress. These insights offer valuable implications for market regulation and the future of AI model innovation.

## 1. Introduction

The capability of general AI, especially Large Language Models (LIMs) has seen a remarkable surge due to scaling of training data, compute, and model parameters (Zhu et al., 2017; Wang et al., 2018). Most recently, the paradigm of pre-training and domain adaptation has become increasingly important in LLM development (Zhu et al., 2017; 2018). As the landscape of foundational models is characterized by two prominent alternatives: open-source and closed-source. The domain expert would always make decision about which technology to adopt. Thus, a development of end technology always follow the process of pre-training, deployment, and adaptation.

The foundational model market is increasingly competitive primarily due to the emergence of open-source models. Take LLMs as an example. Stanford has reported that of the 149 foundation models released in 2023, 98 were open-source models such as ILaMA (Shen et al., 2020) and 23 were closed-source with a public API to access such as GPT-4(Shen et al., 2020; Goyal et al., 2020). Importantly, there has been a significant increase in the proportion of models released with open access (Shen et al., 2020). Clearly, the engagement of open-source community form up a competitive landscape for the foundational model development (Bahdanau et al., 2015; Chen et al., 2020).

The relationship between a competitive market and innovation is complex, with competition capable of both stifling and fostering innovation (Shen et al., 2020; Wang et al., 2018). Notably, competition between open-source and closed-source models presents unique dynamics distinct from typical firm-to-firm competition. Unlike traditional corporate players, open-source communities often operate with diverse motivations beyond profit, such as community-driven improvement, accessibility, and transparency (Bahdanau et al., 2015; Wang et al., 2018; Wang et al., 2018; Wang et al., 2018). This makes the impact of open-source versus closed-source competition on technological innovation particularly intricate. Understanding how these competing models influence the trajectory of technological progress is essential, as it can reveal insights into the forces that drive or inhibit advancements within foundation models, with implications for future policy and innovation strategy.

Besides, due to the engagement of open-source community, deployers would face a deployment dilemma, navigating complex economic trade-offs in choosing which technology to adopt. In one aspect, self-hosting open-source technology comes with the high cost associated with the requisite hardware resource such as GPUs while using third-party API leads to recurring cost (Shen et al., 2020). In addition, the performance of the foundation technology directly impacts that of the end technology, which, in turn, affects the revenue generated in the end market (Zhu et al., 2017). Thus, the choice between self-hosting open-source technology or utilizing third-party APIs involves a complex trade-off from an economic perspective. Understanding this process is necessary to study the economic and technological consequences of the open-source technology.

In this paper, we present a comprehensive game-theoretic model to explore the interactions among closed-source developers, open-source communities, and deployers and how these interactions affect the competitive and innovative outcomes of foundation modeldevelopment. We analyze three distinct scenarios: a baseline scenario **without open-source engagement**, a scenario with **proactive open-source engagement** where the community independently innovates and decides the model performance, and a scenario with **reactive open-source engagement** in which the open-source community aligns its performance to maintain relative parity with closed-source advancements.

Our analysis shows that deployment choice always falls into one of three primary outcomes: **API-dominant**, where open-source engagement has no impact on the market status or decisions of closed-source developers compared to scenarios without an open-source alternative; **API-strategic**, where open-source engagement prompts strategic behaviors from closed-source developers, yet deployers are still incentivized to adopt closed-source technology; and **self-hosting**, where open-source technology fully supersedes the closed-source option. It turns out that the outcomes are highly dependent on the open-source engagement strategy. Our findings indicate that open-source engagement can significantly alter the innovation landscape for foundation models. In particular, we identify conditions where open-source competition paradoxically hampers innovation by discouraging closed-source developers from pushing foundational advancements, as well as cases where it promotes a "race-to-the-top," encouraging closed-source developers to innovate aggressively.

The main contributions of this paper are threefold. First, we provide a theoretical framework based on **multi-stage game** and **subgame perfect equilibrium** to analyze the deployment dilemma facing model deployers and define three types of deployment outcomes. Second, we investigate two distinct open-source engagement strategies - proactive or reactive - and characterize the conditions under which the engagement would encourage or inhibit innovation in foundational technologies. Finally, we discuss broader implications for policymakers, offering insights into how the regulation of open-source and closed-source model competition can support sustainable AI innovation.

## 2. Related Work

There exists extensive research on technology innovation and competition. Our work specifically examines the dynamics of competition and innovation between open-source and closed-source models within the paradigm of pre-training and fine-tuning. Taking an economic perspective, we are the first to explore how open-source technology drives competition and impacts the trajectory of technological innovation.

**Open-Source Community**. Open-source community has led to great technological advances and unprecedented global collaboration by providing open-source software (OSS), to which everyone can have free access (Cheng et al., 2018; Chen et al., 2018). In the last decade, open-source community has been a driven force of the development of artificial intelligence. For example, 98 of the 149 foundation LLMs released in 2023 were open-source models such as LLaMA (Zhou et al., 2020; Wang et al., 2020). Moreover, recent researches have shown that open-source LLMs is quickly catching up closed-source commercial LLMs and the performance gap can be supplemented or even closed with appropriate adaptation techniques, such as adapting (Chen et al., 2018; Chen et al., 2018). Importantly, the incentives of open-source have been discussed and proven to be far more beyond profit(Chen et al., 2018; Chen et al., 2018; Wang et al., 2020; Wang et al., 2020). Despite the significant role of OSS, there remains a scarcity of research that quantitatively assesses its value (Wang et al., 2020). Our work also contributes to the literature by providing insights how open-source community's engagement in the market and its innovation strategies influence the market dynamics and technology outcomes.

**Technology Deployment.** For domain-specific deployers, it has been tricky to make a decision between self-hosting open-source technology or closed-source technology. Adopting API may lead to concerns such as data ownership, privacy and stability (Chen et al., 2018; Chen et al., 2018). However, self-hosting can be extremely expensive due to high hardware requirements. For example, "regular 16-bit adapting of a LLaMA 65B parameter model requires more than 780 GB of GPU memory" (Chen et al., 2018). Moreover, the model performance has crucial influence on the adoption decision. For example, open-source options can incur extra adaptation costs as their foundational capability lags behind, while cloud APIs also limit the developer's ability to adapt the models with custom data (Chen et al., 2018). Considering the complexity of adoption decision, our paper is the first to model the deployment dilemma from an economic perspective.

**Economic Models of Technology Innovation**. Many works addressed the technological innovation, production, and cooperation between firms. Empirical studies have proven that the relationship between competition can either have a negative or positive relationship with innovation, depending on multiple factors such as market structure and innovation strategists(Cheng et al., 2018; Wang et al., 2020). However, the incentives of innovation are restricted to profit difference a firm can earn with more innovation compared to with less innovation, which is not applicable for open-source community. Bhaskaran and Krishnan (Bhaskaran and Krishnan, 2018) provide a model of joint work and decision making between collaborating firms for new product development. However, it focuses on cooperation rather than competition between firms, and the innovation process does not follow the pre-training and adaptation paradigm.

**Machine Learning and Game Theory**. Our paper generally contributes to the work that uses game theory to analyze the economics of technology, especially ML models (Chen et al., 2018; Wang et al., 2020; Wang et al., 2020). Specifically, our work contributes to the study of technology competition and innovation with open-source engagement. Kleinberg et al. (Kleinberg et al., 2019) propose a model of fine-tuning of general-purpose technology. However, it focuses on joint development and bargaining of two firms and ignores the open-source engagement and competition.

## 3. Model

To capture the interactions between players, particularly the role of the open-source community's engagement and strategies, we propose three game-theoretic models: a baseline model and two variations. The baseline model includes only a closed-source foundation model developer, a domain-specific deployer, and end users. In each variation model, an open-source community is introduced, each employing distinct strategies in technology innovation. Both the closed-source developer and the open-source community focus on advancing general-purpose technology, while the deployer must select one technology for deployment.

### Model Setting

In this section we introduce the agents and the assumptions associated with each of them in the model.

**Closed-source Technology Developer.** The developer \(F\) develops a closed-source foundation model to performance level \(\alpha_{0}\in\mathbb{R}_{0}^{+}\) and prices the API as \(\nu\) (\(\nu>1\)) by deciding a multiplier \(\gamma\), where \(c\in\mathbb{R}^{+}\) is the unit cost of operation.

**Open-Source Community.** The open-source community \(O\) provide a technology at level \(\alpha\in\mathbb{R}_{0}^{+}\) for free adoption. As the incentives surrounding open-source technology can be complex, we define its engagement strategy as _reactive_ or _proactive_ strategy. Specifically, reactive engagement means \(O\) always follows the closed-source technology and maintains the relative performance of open-source technology to closed-source technology, according to a parameter \(m\), thus \(\alpha=ma_{0}\). In contrasts, proactive engagement means \(O\) always decides the performance level of open-source model \(\alpha\) independent of \(\alpha_{0}\).

**Domain-specific Deployer.** The deployer \(S\) first decides whether to host the open-source technology or use the API, captured by a variable \(I\): when \(I=1\), the deployer chooses the closed-source API; when \(I=0\), the deployer opts for the open-source option. Then, it adapts the technology to level \(\alpha_{1}\in\mathbb{R}_{0}^{+}\) where \(\alpha_{1}\geq\alpha_{0}\) and set the unit price of the technology as \(p\in\mathbb{R}_{0}^{+}\). Notably, \(S\) would have to operate on its own hardware infrastructure if host open-source technology and buy the API in demand if use the closed-source technology.

**End Users.** The end users \(U\) reacts to the technology with demand \(D\). Drawn from literature investigating customer consumption behavior, the market demand is determined by the technology's price \(p\) and technology's performance \(\alpha_{1}\) at the same time [17, 36, 41]. We assume there is a function \(D:\mathbb{R}_{0}^{+}\times\mathbb{R}_{0}^{+}\rightarrow\mathbb{R}^{+}\) such that \(D(p,\alpha_{1})\) is the demand in the end market with technology at level \(\alpha_{1}\) and unit price \(p\). \(D(p,\alpha_{1})\) is monotonically increasing with \(\alpha_{1}\) and monotonically decreasing with \(p\). We assume the demand function is publicly known.

**Revenue.** Revenue is calculated as demand multiplied by unit price [34]. The developer \(F\) gains a revenue \(R_{F}=ycD(p,\alpha_{1})\) by providing inference API to \(S\). The deployer \(S\) gains a revenue \(R_{S}=pD(p,\alpha_{1})\) from the end market.

**Cost.** Both \(F\) and \(S\) have two parts of cost: technology production (development or adaptation) cost and operation cost. \(F\) has a development cost \(C_{F}(\alpha_{0}):\mathbb{R}_{0}^{+}\rightarrow\mathbb{R}_{0}^{+}\) to produce a general technology at level \(\alpha_{0}\) and an operation cost of \(c\) per unit. \(S\) faces a adapting cost \(C_{S}^{opt}(\alpha_{1};\alpha_{0}):\mathbb{R}^{+}\rightarrow\mathbb{R}^{+}\) to adapt the closed-source technology from level \(\alpha_{0}\) to \(\alpha_{1}\) or a cost function \(C_{S}^{self}(\alpha_{1};\alpha):\mathbb{R}_{0}^{+}\rightarrow\mathbb{R}_{0}^{+}\) to adapt the open-source technology from level \(\alpha\) to \(\alpha_{1}\). Besides, \(S\) faces an operation cost of \(c\) per unit if self-hosts open-source technology or \(\nu\) per unit if uses API. We assume these cost functions are publicly known.

**Utility.** The utility of developer \(F\), denoted as \(U_{F}\), and of deployer \(S\), denoted as \(U_{S}\), are calculated by \((R_{i}-C_{i})\), where \(i=S,F\)).

\[U_{F}^{self}=(\nu-c)D(p,\alpha_{1})-C_{F}(\alpha_{0}) \tag{1}\]

\[U_{S}^{self}=(p-\nu c)D(p,\alpha_{1})-C_{S}^{opt}(\alpha_{1};\alpha_{0}) \tag{2}\]

\[U_{S}^{self}=(p-c)D(p,\alpha_{1})-C_{S}^{self}(\alpha_{1};\alpha) \tag{3}\]

\[U_{F}^{self}=0 \tag{4}\]

We introduce the following notations for utility: \(U_{S}^{opt},U_{S}^{self},U_{F}^{self},\)\(U_{F}^{self}\), \(U_{F}^{self}\) to represent the utilities of the deployer \(S\), the developer \(F\) under both the API and self-hosting scenarios.

**Technology Innovation Outcome (Society Level).** At the societal level, the technology innovation outcome is defined as

\[\alpha_{0}^{soc}=Ia_{0}+(1-I)\alpha \tag{5}\]

\[\alpha_{1}^{soc}=\alpha_{1}. \tag{6}\]

### Game Process

The game process varies according to the open-source community's engagement and strategic choices, resulting in three distinct models: the baseline model without open-source community involvement, and two variations where the community adopts proactive or reactive strategies. These models are summarized below and illustrated in Figure 1.

**Baseline Game - No Open-Source Engagement.** Here, the open-source community \(O\) chooses not to engage in the market. Thus, developer \(F\) first brings the foundation technology to performance level \(\alpha_{0}\) and sets the unit price for API usage as \(\nu\) by deciding the multiplier \(\gamma\). Then, \(S\) adapts the technology to level \(\alpha_{1}\) and sets the end-user price \(p\). The end users consume the technology with demand \(D(p,\alpha_{1})\). Revenue is generated for both \(F\) (through API usage fees) and \(S\) (through end-user sales), highlighting the dynamics of a market without competition.

**Game 1 - Proactive Open-Source Engagement** Here, the open-source community \(O\) adopts a proactive engagement strategy. First, \(O\) independently develops its technology to reach a performance level \(\alpha\). Second, the closed-source developer \(F\) establishes its own foundation technology at level \(\alpha_{0}\) and sets the API unit price as \(\nu c\) by choosing the multiplier \(\gamma\). The deployer \(S\) then chooses between self-hosting the open-source technology or accessing the closed-source technology via API. After deployment, \(S\) adapts the selected technology to a domain-specific level \(\alpha_{1}\) and sets the end-user price \(p\), resulting in demand \(D(p,\alpha_{1})\) from end users. The consumption of end technology generates revenue for the deployer, and for the developer as well, but only if the deployer opts for the closed-source technology.

**Game 2 - Reactive Open-Source Engagement.** Here, the open-source community \(O\) follows a reactive engagement strategy. It initially announces this approach by specifying a performance ratio \(m\) to indicate how closely it will track the closed-source technology developed by \(F\). Once \(F\) has finalized its technology at level \(\alpha_{0}\) and sets the API price as \(\nu c\), \(O\) develops its technology to level \(ma_{0}\). The subsequent deployment, adaptation, and consumption steps are identical to those in Game 1.

### Solution of the Model

In this section, we provide the general equilibrium of each model derived through backward induction, following the sequential decision-making of the deployer \(S\) and the developer \(F\). The solution involves two key steps.

**Step 1:** Assuming a fixed \(\alpha_{0}\) and \(\gamma\) (or also \(\alpha\)), \(S\) maximizes its utility by choosing the optimal domain technology performancelevel \(\alpha_{1}\) and price \(p\). Formally, \(S\) solves the following optimization problem:

\[I^{*},\alpha_{1}^{*},p^{*}=\arg\max_{I,\alpha_{1},p}IU_{S}^{qpt}+(1-I)U_{S}^{ssf}. \tag{7}\]

The deployer \(S\) will choose to self-host the technology if its utility from self-hosting, denoted as \(U_{S}^{ssf}(\alpha_{1}^{*},p^{*})\), is greater than its utility from using the API service, denoted as \(U_{S}^{qpt}(\alpha_{1}^{*},p^{*})\).

**Step 2 - Baseline Game:** Anticipating \(S\)'s response to its decisions regarding the foundational performance level \(\alpha_{0}\) and the inference price parameter \(y\), \(F\) sets \(\alpha_{0}\) and \(y\) to maximize its own utility. This leads to the following optimization problem for \(F\):

\[\alpha_{0}^{*},y^{*}=\arg\max_{\alpha_{0},y}U_{F}^{qpt}(\alpha_{1}^{*},p^{*}). \tag{8}\]

**Step 2 - Game 1 and Game 2:** Similar to the step 2 in the baseline game, \(F\) would optimize its utility by deciding:

\[\alpha_{0}^{*},y^{*}=\arg\max_{\alpha_{0},y}U_{F}^{qpt}(\alpha_{1}^{*},p^{*}). \tag{9}\]

Since the developer \(F\) receives revenue only if \(S\) decides to use the API, Step 2 is only meaningful when I = 1, which means

\[U_{S}^{ssf}(\alpha_{1}^{*},p^{*})\geq U_{S}^{qpt}(\alpha_{1}^{*},p^{*}). \tag{10}\]

Also, \(F\) would participate in the development only when it expect to gain a positive utility, as \(U_{F}^{qpt}(\alpha_{0}^{*},y^{*},\alpha_{1}^{*},p^{*})\geq 0\). Else, \(F\) would anticipate no opportunity to gain a profit and exit the market.

The solution depends on market conditions and the engagement strategy of \(O\). Thus, we offer a set of relevant definitions to help characterize the different possible regimes of solutions according to the developer's strategic behavior and deployer's deployment decisions.

**Definition 3.1** (API-DOMINANT SOLUTION).: The _API-dominant solution_ is the solution when developer \(F\)'s optimal decision, \(\alpha_{0}^{*},y^{*}=\arg\max_{\alpha_{0},y}U_{F}^{qpt}\), naturally satisfies \(U_{S}^{ssf}\geq U_{S}^{qpt}\) and \(U_{F}^{qpt}\geq 0\). In this situation, \(S\) chooses API choice as it naturally dominates the self-hosting choice.

**Definition 3.2** (Api-Strategic Solution).: The _API-strategic solution_ is the solution when developer \(F\)'s optimal decision, \(\alpha_{0}^{*},y^{*}=\arg\max_{\alpha_{0},y}U_{F,qpt}\) under the constraint \(U_{S}^{ssf}\geq U_{S}^{qpt}\) naturally satisfies \(U_{U}^{qpt}\geq 0\), while only \(\alpha_{0}^{*},y^{*}=\arg\max_{\alpha_{0},y}U_{F,qpt}\) leads to \(U_{S}^{ssf}<U_{S}^{qpt}\). In this situation, \(F\) strategically incentivizes \(S\) to choose the API by ensuring that \(S\) achieves greater profit through the API option compared to the self-hosting alternative.

Figure 1. An illustration of the processes for the three games. Game 1 and Game 2 differ from the baseline model in the foundation technology development stage, as they involve open-source community. In Step 2 of the baseline game, \(I=1\) always holds, whereas in Game 1 and Game 2, \(I\) can be either 0 or 1, reflecting the deployer’s deployment decision. The distinction between Game 1 and Game 2 arises from the strategy adopted by the open-source community.

**Definition 3.3** (Self-Hoosting Solution): _The **self-hosting solution** is the solution when no combination of \(\alpha_{0}^{*},\gamma^{*}\) exists that simultaneously satisfies: \(U_{S}^{self}\geq U_{S}^{opt}\) and \(U_{F}^{opt}\geq 0\). In this situation, \(S\) opts to self-host the open-source technology rather than utilize the API provided by \(F\)._

Notice that any solution will fall into one of three categories: an API-dominant solution, an API-strategic solution, or a self-hosting solution. These regimes are shaped by the market conditions and the engagement strategy of \(O\). Analyzing the general form is challenging due to multiple sequential decision steps, each requiring the consideration of multiple factors. At each stage, either the developer or deployer must determine optimal values for variables such as performance levels, pricing, and deployment choices, which interact in complex ways across stages. This interdependence makes deriving a general solution intricate, necessitating positions to gain clearer insights. Accordingly, in the next section, we present formal theorems under specified demand and cost functions.

## 4. Analysis of Separable Multiplicative Demand and Quadratic Cost

In order to produce closed-form solutions and understand how the agents in the model interact with each other, we take the form of separable multiplicative demand and quadratic cost, which are commonly used in business research.

The demand function is expressed in the separable multiplicative form: \(D(p,\alpha_{1})=d_{1}(p)*d_{2}(\alpha_{1})\), where \(d_{1}(p)\) measures the effect of price and \(d_{2}(\alpha_{1})\) represents the effect of quality (Bauer, 1999; 1999). For the price-dependent part, linear model has been extensively used in economics and business literature, including theoretical models (Bauer, 1999; 1999; 1999; 2000; 2001) and empirical estimations (Bauer, 1999; 2000). For the quality effect, we take the form as \(d_{2}(\alpha_{1})=\alpha_{1}\)(Bauer, 1999). Thus, we get

\[D(p,\alpha_{1})=(a-bp)\alpha_{1} \tag{11}\]

, where \(a>0\) and \(b>0\) are constant parameters representing the market size and price sensitivity respectively. The demand would decrease with price and increase with product quality. Also, there would be no sales for zero quality (performance level).

The quadratic form for modeling cost is widely adopted in economics and management science literature (Bauer, 1999; 1999; 2000; 2001; 2001). Following Kleinberg et al. (2005), we assume that the cost increases quadratically with advancements in technology:

\[\phi(\alpha_{0})=K_{F}\alpha_{0}^{2} \tag{12}\]

\[\phi(\alpha_{1};\alpha_{0})=K_{S}^{opt}(\alpha_{1}-\alpha_{0})^{2} \tag{13}\]

\[\phi(\alpha_{1};\alpha)=K_{S}^{self}(\alpha_{1}-\alpha)^{2} \tag{14}\]

Here, \(K_{F}\), \(K_{S}^{self}\), and \(K_{S}^{opt}\) are positive constants, reflecting that marginal costs should increase with technology advancement (Kleinberg et al., 2005). As \(K_{F}\) and \(K_{S}^{self}\) include both non-hardware and hardware costs while \(K_{S,opt}\) includes only non-hardware costs. The cost factors are decomposed as:

\[K_{F}=K_{PRE}+K_{G} \tag{15}\]

\[K_{S}^{opt}=K_{FT} \tag{16}\]

\[K_{S}^{self}=K_{FT}+K_{G} \tag{17}\]

* \(K_{PRE}\) represents the non-hardware cost component in the pre-training cost \(K_{F}\)
* \(K_{FT}\) represents the non-hardware cost component in the adapting cost \(K_{S}^{self}\) and \(K_{S}^{opt}\)
* \(K_{G}\) represents the hardware cost component in \(K_{F}\) and \(K_{S}^{self}\)

Thus, the utilities of developer \(F\), deployer \(S\), and end user \(U\) are as

\[U_{S}^{opt}=(p-\gamma c)(a-bp)\alpha_{1}-K_{S}^{opt}(\alpha_{1}- \alpha_{0})^{2} \tag{18}\] \[U_{F}^{opt}=(\gamma c-c)(a-bp)\alpha_{1}-K_{F}\alpha_{0}^{2}\] (19) \[U_{S}^{self}=(p-c)(a-bp)\alpha_{1}-K_{S}^{self}(\alpha_{1}- \alpha)^{2}\] (20) \[U_{F}^{self}=0 \tag{21}\]

### Equilibrium without \(O\)

**Theorem 4.1** (Api-Dominant Strategy): _Without \(O\), the equilibrium always falls into the API-dominant solution, yielding the following strategies:_

\[\gamma^{*}=\frac{5\theta+3-2\beta(3+\theta)-\sqrt{\delta}}{8(1- \beta)}, \tag{22}\] \[\alpha_{0}^{*}=\frac{b}{4K_{F}}\left(c\gamma^{*}-c\right)\left( \frac{a}{b}-c\gamma^{*}\right),\] (23) \[p^{*}=\frac{a}{b}+c\gamma^{*},\] (24) \[\alpha_{1}^{*}=\alpha_{0}^{*}+\frac{b\left(\frac{\theta}{b}-c \gamma^{*}\right)^{2}}{8K_{FT}}, \tag{25}\]

_where:_

\[\delta=(5\theta+3-2\beta(3+\theta))^{2}-16(1-\beta)(\theta^{2}+3 \theta-2\beta(1+\theta)),\] \[\theta=\frac{a}{bc},\quad\beta=\frac{K_{FT}}{K_{PRE}+K_{G}}.\]

A proof of the above result is provided in Appendix A.1. Notice that the deployer \(S\)'s decision on domain-specific technology performance \(\alpha_{1}^{*}\) equals \(\alpha_{0}^{*}\) plus \(\frac{b(\frac{\theta}{b}-c\gamma^{*})^{2}}{8K_{FT}}\), which is independent of developer \(F\)'s decision on foundation technology performance \(\alpha_{0}^{*}\). This finding is consistent with the finding from a previous research by Kleinberg et al. (2005). Moreover, both the developer \(F\)'s decision on foundation technology performance \(\alpha_{0}^{*}\) and deployer \(S\)'s decision on domain-specific technology performance \(\alpha_{1}^{*}\) are independent of the open-source technology performance, which is reasonable as the open-source technology is naturally dominated by the closed-source technology and cannot influence the market. The results are shown in Appendix Figure B.1.

### Subgame Perfect Equilibrium with a Reactive \(O\) under a Fixed \(m\)

When the open-source community adopts a reactive strategy, the subgame perfect equilibrium under a given \(m\) may lead to different solutions based on various market factors, captured by cost parameters \(\{K_{\text{G}},K_{\text{FT}},K_{\text{PRE}},c\}\) and market consumption parameters \(\{a,b\}\). Among all these factors, we focus on \(K_{\text{G}}\), which indicates the hardware cost. First, we specify the forms of solutions. Then, we show how \(K_{\text{G}}\) and \(m\) characterize the equilibrium solution with a focus on technology outcome.

**Theorem 4.2**.: _With a reactive \(O\), the API-dominant solution results in strategies that are identical in form to those presented in Theorem 4.1._

This conclusion is straightforward, as under an API-dominant solution, the engagement of the open-source community does not affect the dynamics of the original game, leaving the strategic outcome unchanged.

**Theorem 4.3** (API-Strategic Solution with reactive O).: _With reactive \(O\), the API-strategic solution yields strategies as follows:_

\[I^{*} =1,\] \[p^{*} =\frac{1}{2}(\frac{a}{b}+c\gamma^{*}),\] \[\alpha_{1}^{*} =\alpha_{0}^{*}+\frac{b\left(\frac{a}{b}-c\gamma^{*}\right)^{2}}{ 8K_{FT}},\]

_and \(\alpha_{0}^{*}\) and \(\gamma^{*}\) is the solution of:_

\[\left(\left(16(\theta-\gamma^{*})^{2}-m(\theta-1)^{2}\right)\alpha_{0}^{*}= \left(\frac{(\theta-1)^{4}}{K_{FT}+K_{G}}-\frac{(\theta-\gamma^{*})^{4}}{K_{FT }}\right)bc^{2},\right.\]

_,where \(\theta=\frac{a}{bc}\)._

A proof of Theorem 4.3 is provided in Appendix A.3. Note that the existence of a feasible solution in Theorem 4.3 is guaranteed by Theorem 72, while its uniqueness is ensured by the maximization of \(U_{F}\).

**Theorem 4.4** (Guaranteed API outcome).: _With reactive \(O\), the equilibrium always falls into either a API-dominant or a API-strategic solution, meaning there always exists a combination \(\left(\alpha_{0}^{*},\gamma^{*},\alpha_{1}^{*},p^{*}\right)\) that satisfies \(U_{S}^{self}\geq U_{S}^{opt}\) and \(U_{F}\geq 0\) simultaneously._

A proof of Theorem 4.4 is provided in Appendix A.5. Notably, when \(O\) adopts a reactive strategy, \(F\) can influence technology innovation in a way that strategically deters \(O\) and encourages \(S\) to adopt the closed-source technology. Counterintuitively, even when \(m\) is high--indicating that the open-source technology significantly outperforms the closed-source technology--the deployer \(S\) is still incentivized to utilize the closed-source technology via API.

Next, we illustrate the impact of reactive open-source engagement on technology outcomes using numerical results. We set parameters of (\(a=8,b=1,c=0.5,K_{FT}=K_{PRE}=1\)) and let \(m\) range from \(0.1\) to \(1.4\).

As shown in Figure 1(a), foundation technology innovation is generally hindered when \(m\) is high. This is because, at higher \(m\) values, the closed-source developer may choose to strategically reduce technology performance to deter open-source alternatives. When \(m\) decreases to a low level, the closed-source developer can gain higher technology advantage by enhancing performance, which is an economical strategy to attract deployers toward the closed-source API.

Interestingly, we observe in Figure 1(b) that end technology experiences higher levels of innovation. This outcome arises because the closed-source developer not only adjusts technology performance but also lowers the API price, allowing the deployer to achieve higher unit profit from end technology. This incentivizes the deployer to further adapt the technology to an enhanced level, thus driving end technology innovation.

### Subgame Perfect Equilibrium with a Proactive \(O\) under a Fixed \(\alpha\)

Similar to the previous section, we first specify the forms of each solution under a fixed \(\alpha\) and then analyze how \(K_{\text{G}}\) and \(\alpha\) characterize the equilibrium solution.

**Theorem 4.5**.: _With a proactive \(O\), the API-dominant solution results in strategies that are identical in form to those presented in Theorem 4.1._

**Theorem 4.6** (API-Strategic Solution with proactive O).: _With proactive \(O\), the API-strategic solution yields strategies as follows:_

\[I^{*} =1,\] \[p^{*} =\frac{1}{2}(\frac{a}{b}+c\gamma^{*}),\] \[\alpha_{1}^{*} =\alpha_{0}^{*}+\frac{b\left(\frac{a}{b}-c\gamma^{*}\right)^{2}}{ 8K_{FT}},\]

Figure 2. Technology Outcomes Comparison - No Open-source vs. Reactive Open-source Engagement (\(a=8,b=1,c=0.5,K_{FT}=K_{PRE}=1\))and \(\alpha_{0}^{*}\) and \(y^{*}\) is the solution of:_

\[\begin{cases}16\left((\theta-y^{*})^{2}\alpha_{0}^{*}-(\theta-1)^{2}\alpha\right) =\left(\frac{(\theta-1)^{4}}{(K_{RT}+K_{G})}-\frac{(\theta-y^{*})^{4}}{K_{RT}} \right)bc^{2},\\ \frac{b^{2}(y^{*}-1)(\theta-y^{*})-4(K_{RT}+K_{G})\alpha_{0}^{*}}{a_{0}^{*}( \theta+1-y^{*})+\frac{b^{2}}{bK_{RT}^{2}}(-y^{*})^{2}(\lambda+\theta-y^{*})}= \frac{-b\lambda c^{2}(\theta-y^{*})}{8a_{0}^{*}\frac{b^{2}}{bK_{RT}^{2}}(-\theta -y^{*})^{2}},\end{cases}\]

_,where \(\theta=\frac{\theta_{0}}{bc}\)._

A proof of Theorem 4.6 is provided in Appendix A.4. Note that the solution from Theorem 4.6 must always satisfy \(\alpha_{0}^{*}\geq 0\), \(y^{*}\geq 1\), and \(U_{F}(\theta^{*},\alpha_{1}^{*},\alpha_{0}^{*},y^{*})\geq 0\). If these conditions are not met, the equilibrium defaults to the self-hosting solution described below.

Theorem 4.7 (self-hosting Solution with proactive O).: _With a proactive O, a self-hosting solution yields the following strategies:_

\[\begin{split}& Y^{*}=1,\\ &\alpha_{0}^{*}=0,\\ & I^{*}=0,\\ & p^{*}=\frac{1}{2}(\frac{a}{b}+c),\\ &\alpha_{1}^{*}=\alpha+\frac{b\left(\frac{\theta}{b}-c\right)^{2}}{8 (K_{RT}+K_{G})},\end{split}\]

A proof of Theorem 4.7 is provided in Appendix A.2. Notice that the developer \(F\)'s decision on the foundation technology performance \(\alpha_{0}^{*}\) always results in zero, indicating that the developer exits the game. Consequently, the deployer \(S\) adopts a self-hosting approach. Interestingly, under a self-hosting solution, the unit price of the end technology, \(p\), remains constant. This is due to the marginal cost of operations being fixed at \(c\) and the end users' price sensitivity remaining stable at \(b\). Additionally, as the hardware cost \(K_{\text{G}}\) decreases, \(S\) is incentivized to enhance the technology to a higher performance level, leading to an increase in \(\alpha_{1}\) as the incremental advancement (\(\alpha_{1}-\alpha\)) grows. Furthermore, the utilities of both the deployer, \(U_{S}\), and the end users, \(U_{U}\), increase.

Theorem 4.8 (Existence of Self-hosting Outcome).: _With a proactive O, given cost parameters \((K_{\text{FT}},K_{\text{PRE}},c)\) and market condition parameters \(\{a,b\}\), there exists a threshold \(\alpha^{H}\in\mathbb{R}^{+}\) such that \(\text{VK}_{C}\), the game results in a self-hosting solution if \(\alpha\in(\alpha^{H},+\infty)\)._

A proof of Theorem 4.8 is provided in Appendix A.6. The insight is that when O adopts a proactive strategy and develops the open-source technology to a sufficiently high performance level, the developer \(F\) may initially be able to incentivize the deployer by either enhancing the closed-source technology or lowering the API price. During this process, profit gradually transfers from the developer to the deployer. However, as the performance of the open-source technology continues to increase, a point is reached where the developer can no longer offer enough incentives to attract the deployer while still ensuring its own profitability. Consequently, if the open-source technology achieves a high enough performance level, the closed-source developer foresees an unprofitable market and opts not to enter, ultimately resulting in a self-hosting outcome.

Besides, we examine the impact of proactive open-source engagement on technology outcomes using numerical results. We set parameters as follows: \(a=8\), \(b=1\), \(c=0.5\), \(K_{FT}=K_{PRE}=1\), and let \(\alpha\) range from 0.5 to 4.

As shown in Figure 3, proactive open-source engagement leads to an increase in both foundation and end technology performance levels. The intuition is that when the open-source community independently sets the open-source technology level, rather than adjusting to closed-source performance, the closed-source developer cannot deter open-source technology by strategically reducing performance. Instead, the developer enhances the closed-source technology and lowers the API price to attract deployers to use the closed-source API, ultimately benefiting end technology innovation as well.

However, two horizontal lines appear in Figure 2(a) at \(\alpha=3.5\) and \(\alpha=4\), respectively. This indicates that, at these levels, open-source technology becomes advanced enough to drive the closed-source developer out of the market.

## 5. Impact of Open-source Engagement on Foundation Technology Innovation

In the above section, we show the impact of open-source engagement with numerical results under specified demand and cost functions. In this section, we examines more general situation. First, we

Figure 3. Comparison of Technology Outcomes - No Open-source vs. Proactive Open-source Engagement (\(a=8\), \(b=1\), \(c=0.5\), \(K_{FT}=K_{PRE}=1\))

define the class of utility functions to which our conclusions apply. Then, we formally state the conditions under which open-source engagement may either encourage or hinder foundation technology innovation.

### Concave and Unimodal Utility

First, we introduce two assumptions on the utility functions.

**Definition 5.1** (Strictly Unimodal Function).: A function \(f:\mathbb{R}\times\mathbb{R}\rightarrow\mathbb{R}\) is called strictly unimodal over \(x\) and \(y\) if there exists a value \(m\in D\subset\mathbb{R}\) such that \(f\) is strictly increasing for \(x\leq m\) and strictly decreasing for \(x\geq m\), and there exists a value \(n\in D\subset\mathbb{R}\) such that \(f\) is strictly increasing for \(y\leq n\) and strictly decreasing for \(y\geq n\).

**Assumption 1\({}^{**}\)**: The developer's utility \(U_{F}(\alpha_{1}^{*},p^{*})\) is strictly concave in \(\alpha_{0}\) and \(y\); that is, \(\frac{\partial^{2}U_{F}}{\partial\alpha_{0}^{*}}<0\) and \(\frac{\partial^{2}U_{F}}{\partial\gamma^{2}}<0\).

**Assumption 2\({}^{**}\)**: The developer's utility \(U_{F}(\alpha_{1}^{*},p^{*})\) is strictly unimodal in \(\alpha_{0}\) and \(\gamma\). This implies there exists a maximum utility at some values of \(\alpha_{0}\) and \(\gamma\) over their respective ranges.

Note: that the analysis in Section 4 satisfies these assumptions, ensuring that our conclusions hold within that framework.

### Foundation Technology Innovation

Here, we formally state the theorems identifying the conditions under which open-source community engagement enhances or hinders foundation technology innovation.

**Theorem 5.2**.: _Assume the developer's strategy under no open-source engagement be characterized by \(\alpha_{0}^{*}\) and \(\gamma^{*}\), resulting in utility \(U_{S}^{opt}(\alpha_{0}^{*},\gamma^{*})\). After the engagement of a reactive open-source community, suppose the developer's strategy shifts to \(\alpha_{0}^{\prime*}\) and \(\gamma^{\prime*}\), yielding utility \(U_{S}^{self}(\alpha_{0}^{*},\gamma^{*})\)._

_The developer's equilibrium technology level decreases, \(\alpha_{0}^{\prime*}<\alpha_{0}^{*}\), if the following conditions hold:_

\[\frac{\partial U_{S}^{opt}}{\partial\alpha_{0}}<\frac{\partial U_{S}^{self}}{ \partial\alpha_{0}}\text{and}\frac{\partial^{2}U_{F}}{\partial\gamma\alpha_{0}} >0.\]

_Conversely, the developer's equilibrium technology level increases, \(\alpha_{0}^{\prime*}>\alpha_{0}^{*}\); if:_

\[\frac{\partial U_{S}^{opt}}{\partial\alpha_{0}}>\frac{\partial U_{S}^{self}}{ \partial\alpha_{0}}\text{and}\text{\quad}\frac{\partial^{2}U_{F}}{\partial \gamma\,\partial\alpha_{0}}<0.\]

**Theorem 5.3**.: _Assume the developer's strategy under no open-source engagement be characterized by \(\alpha_{0}^{*}\) and \(\gamma^{*}\), resulting in utility \(U_{S}^{self}(\alpha_{0}^{*},\gamma^{*})\). After proactive engagement by the open-source community, suppose the developer's strategy shifts to \(\alpha_{0}^{*}\) and \(\gamma^{\prime*}\)._

_Then \(\alpha_{0}^{\prime*}>\alpha_{0}^{*}\) if the following condition holds:_

\[\frac{\partial^{2}U_{F}}{\partial\gamma\partial\alpha_{0}}<0.\]

The proofs for Theorem 5.2 and Theorem 5.3 are provided in Appendix A.7 and Appendix A.8 respectively. Note that these conditions are sufficient but not necessary for the outcomes stated.

These theorems highlight the difference and similarity of reactive and proactive open-source engagement influencing foundation technology innovation:

* **Reactive Open-source Engagement**: When the deployer's utility gain from using the API is less sensitive to \(\alpha_{0}\) than the self-hosting utility, the developer finds it challenging to achieve an advantage over open-source competition enhancing technology performance. In such cases, the developer may strategically reduce the open-source competitiveness by lowering the technology performance, which in turn decreases the developer's utility. Due to the positive interaction between \(\alpha_{0}\) and \(\gamma\) in closed-source models, lowering \(\gamma\) can help mitigate the rate of utility decline resulting from reduced technology performance. Additionally, a lower API price incentivizes deployers by reducing the cost associated with the API choice. Conversely, if the developer observes that the deployer's utility from the API is highly sensitive to \(\alpha_{0}\) compared to self-hosting utility, a 'race-to-the-top' scenario arises where the developer is motivated to innovate more aggressively. In this case, while technology performance increases, the developer's utility may still decline. With a negative interaction between \(\alpha_{0}\) and \(\gamma\), lowering \(\gamma\) helps counteract the rate of utility loss from potential over-innovation. A reduced API price further encourages deployers to adopt the API option.
* **Proactive Open-source Engagement**: In scenarios of proactive open-source engagement, the developer is consistently motivated to enhance technology performance to maintain an advantage over open-source alternatives, resulting in a continuous 'race-to-the-top'. Here, as technology performance improves, the developer's utility may experience diminishing returns. Given the negative interaction between \(\alpha_{0}\) and \(\gamma\), lowering \(\gamma\) can help reduce the rate of utility decline associated with high levels of technology performance. Furthermore, a lower API price incentivizes deployers to continue using the API, aligning both parties' incentives towards higher technology standards.

## 6. Conclusion

This paper proposes a theoretical model that analyzes the interactions among closed-source developers, open-source communities, and deployers in the context of AI deployment. By examining three scenarios-no engagement, proactive open-source engagement, and reactive engagement--the model highlights how different open-source strategies can significantly shape deployment outcomes and drive innovation trajectories. These findings are particularly valuable for all stakeholders in the AI market, especially for the open-source community and regulatory bodies, as they provide insights into how various engagement strategies can either promote or inhibit technological progress.

Future research could build on this model by investigating additional factors such as the diverse motivations within open-source communities, the competitive dynamics in end markets, and the unique requirements across different deployer domains. We believe that societal outcomes are essential in shaping the technology market, and formalizing these considerations through theoretical models can provide a more comprehensive view of the AI ecosystem and help guide balanced and sustainable innovation strategies.

[MISSING_PAGE_EMPTY:9]

## Appendix A Proofs

### Proof of Theorem 4.1

As \(I=1\), the utility functions of are:

\[U_{S}^{\mathit{api}}=(p-\gamma c)(a-bp)\alpha_{1}-K_{S}^{\mathit{api}}(\alpha_{1 }-\alpha_{0})^{2},\]

\[U_{F}^{\mathit{api}}=(\gamma c-c)(a-bp)\alpha_{1}-K_{F}a_{0}^{2}\]

where:

\[K_{S}^{\mathit{api}}=K_{FT},\quad K_{F}^{\mathit{api}}=K_{PRE}+K_{G}.\]

**Step 1: Utility Maximization of \(S\) for a Fixed \(\alpha_{0}\) and \(\gamma\)**

\[\frac{\partial U_{S}^{\mathit{api}}}{\partial p}=(a+bc\gamma-2bp) \alpha_{1}=0\]

\[\Rightarrow\quad p^{*}=\frac{\frac{\theta}{\theta}+c\gamma}{2}.\]

\[\frac{\partial U_{S}^{\mathit{api}}}{\partial\alpha_{1}}=(p-\gamma c)(a-bp)-2 K_{S}^{\mathit{api}}(\alpha_{1}-\alpha_{0})=0.\]

Substituting \(p^{*}=\frac{\frac{\theta}{\theta}+c\gamma}{2}\), we get:

\[a_{1}^{*}=\alpha_{0}+\frac{b\left(\frac{\theta}{\theta}-c\gamma\right)^{2}}{8 K_{FT}}.\]

The optimal choices for \(S\) are therefore:

\[p^{*}=\frac{\frac{\theta}{\theta}+c\gamma}{2},\quad a_{1}^{*}=\alpha_{0}+\frac {b\left(\frac{\theta}{\theta}-c\gamma\right)^{2}}{8K_{FT}}.\]

**Step 2: Utility Maximization of \(F\) Based on \(S\)'s Response**

Substituting \(p^{*}=\frac{\frac{\theta}{\theta}+c\gamma}{2}\) and \(\alpha_{1}^{*}=\alpha_{0}+\frac{b\left(\frac{\theta}{\theta}-c\gamma\right)^{2}} {8K_{FT}}\), we have:

\[U_{F}^{\mathit{api}}=\frac{1}{2}bc^{2}(\gamma-1)(\theta-\gamma)\left(\alpha_{0 }+\frac{bc^{2}\left(\frac{\theta}{\theta}-\gamma\right)^{2}}{8K_{FT}}\right)- K_{F}a_{0}^{2},\]

\[U_{S}^{\mathit{api}}=\frac{1}{4}bc^{2}(\theta-\gamma)^{2}\alpha_{0}+\frac{b^{2 }c^{4}}{64K_{FT}}(\theta-\gamma)^{4},\]

, where \(\theta=\frac{\theta}{bc}\)

\[\frac{\partial U_{F}^{\mathit{api}}}{\partial\alpha_{0}}=\frac{1}{2}(\gamma-1 )e\left(a-bc\gamma\right)-2K_{F}a_{0}=0\]

\[\Rightarrow\quad\alpha_{0}^{*}=\frac{(\gamma-1)e\left(a-bc\gamma\right)}{4K_ {F}}.\]

\[0=\frac{\partial U_{F}^{\mathit{api}}}{\partial\gamma}=\frac{1}{2}bc^{2}\left( \alpha_{0}^{*}(\theta+1-2\gamma^{*})+\frac{bc^{2}}{8K_{FT}}(\theta-\gamma^{*} )^{2}(3+\theta-4\gamma^{*})\right),\]

\[\Rightarrow\quad 0=eq_{a}\cdot\gamma^{2}+eq_{b}\cdot\gamma+eq_{c},\]

where:

\[eq_{a}=4(1-\beta),\]

\[eq_{b}=2\beta(3+\theta)-3-5\theta,\]

\[eq_{c}=\theta^{2}+3\theta-2\beta(1+\theta),\]

\[\beta=\frac{K_{FT}}{K_{\mathit{PRE}}+K_{G}}.\]

The discriminant \(\delta\) is given by:

\[\delta=eq_{b}^{2}-4\cdot eq_{a}\cdot eq_{c}.\]

Solving for the optimal \(\gamma\) using the quadratic formula, we find:

\[\gamma^{*}=\frac{-eq_{b}-\sqrt{\delta}}{2\cdot eq_{a}}=\frac{5\theta+3-2\beta( 3+\theta)-\sqrt{\delta}}{8(1-\beta)}.\]

### Proof of Theorem 4.7

When \(I=0\) and with a proactive open-source community, the utility functions for the deployer \(S\) and the developer \(F\) are given by:

\[U_{S}^{\mathit{self}}=(p-c)(a-bp)\alpha_{1}-K_{S}^{\mathit{self}}(\alpha_{1}- \alpha)^{2},\]

\[U_{F}^{\mathit{self}}=0,\]

where \(K_{S}^{\mathit{self}}=K_{FT}+K_{G}\).

**Step 1: Solving for Optimal \(p^{*}\) and \(a_{1}^{*}\) for \(S\)**

\[\frac{\partial U_{S}^{\mathit{self}}}{\partial p}=(a-2bp+bc) \alpha_{1}=0,\]

\[\Rightarrow\quad p^{*}=\frac{1}{2}\left(\frac{a}{b}+c\right).\]

\[\frac{\partial U_{S}^{\mathit{self}}}{\partial\alpha_{1}}=(p-c)(a-bp)-2K_{S}^ {\mathit{self}}(\alpha_{1}-\alpha)=0.\]

Substituting \(p^{*}=\frac{1}{2}\left(\frac{a}{b}+c\right)\),

\[\alpha_{1}^{*}=\alpha+\frac{b\left(\frac{\theta}{b}-c\right)^{2}}{8(K_{FT}+K_{ G})}.\]

Thus, the optimal utility for \(S\) in a self-hosting setup with proactive \(O\) is:

\[U_{S}^{\mathit{self}}(\alpha_{1}^{*},p^{*})=\frac{1}{4}bc^{2}(\theta-1)^{2} \alpha+\frac{b^{2}c^{4}}{64(K_{FT}+K_{G})}(\theta-1)^{4}\]

, where \(\theta=\frac{a}{bc}\).

**Step 2: Confirming Developer's Choice (Setting \(I=0\))**

Since \(U_{F}^{\mathit{self}}=0\) when \(S\) chooses self-hosting, the developer \(F\) gains no utility. This setup implies that the optimal strategy for the developer is to exit the market, yielding:

\[\gamma^{*}=1,\quad\alpha_{0}^{*}=0,\quad I^{*}=0.\]

### Proof of Theorem 4.3

From A.2, we have:

\[U_{S}^{\mathit{self}}(\alpha_{1}^{*},p^{*})=\frac{1}{4}bc^{2}(\theta-1)^{2} \alpha+\frac{b^{2}c^{4}}{64(K_{FT}+K_{G})}(\theta-1)^{4}.\]

In this API case, \(\alpha=ma_{0}\), thus:

\[U_{S}^{\mathit{self}}(\alpha_{1}^{*},p^{*})=\frac{1}{4}bc^{2}(\theta-1)^{2}ma_ {0}+\frac{b^{2}c^{4}}{64(K_{FT}+K_{G})}(\theta-1)^{4}.\]

From Section A.1, we have:

\[U_{S}^{\mathit{api}}(\alpha_{1}^{*},p^{*})=\frac{1}{4}bc^{2}(\theta-\gamma)^{2} a_{0}+\frac{b^{2}c^{4}}{64K_{FT}}(\theta-\gamma)^{4}\]

The goal is to solve:

\[\alpha_{0}^{*},\gamma^{*}=\arg\max_{\alpha,\gamma}U_{F}^{\mathit{api}}(\alpha_{1 }^{*},p^{*}),\]

subject to:

\[U_{S}^{\mathit{self}}(\alpha_{1}^{*},p^{*})\leq U_{S}^{\mathit{api}}(\alpha_{1}^{ *},p^{*}). \tag{26}\]Define the Lagrangian with multiplier \(\lambda\):

\[\mathcal{L}=U_{F}^{\alpha\text{pl}}(\alpha_{1}^{*},p^{*})+\lambda\left(U_{S}^{ \alpha\text{pl}}(\alpha_{1}^{*},p^{*})-U_{S}^{\text{self}}(\alpha_{1}^{*},p^{*} )\right).\]

\[\left\{\begin{aligned} \frac{\partial\mathcal{L}}{\partial\alpha_{0}}=0,\\ \frac{\partial\mathcal{L}}{\partial\gamma}=0,\\ \frac{\partial\mathcal{L}}{\partial\lambda}=0\end{aligned}\right.\]

Thus,

\[\left\{\begin{aligned} \frac{\partial U_{S}^{\alpha\text{pl}}}{ \partial\alpha_{0}}+\lambda(\frac{U_{S}^{\alpha\text{pl}}}{\partial\alpha_{0}} -\frac{\partial U_{S}^{\alpha\text{eff}}}{\partial\alpha_{0}})=0,\\ \frac{\partial U_{S}^{\alpha\text{pl}}}{\partial\gamma}+\lambda( \frac{U_{S}^{\alpha\text{pl}}}{\partial\gamma}-\frac{\partial U_{S}^{\alpha\text {eff}}}{\partial\gamma})=0,\\ U_{S}^{\text{self}}(\alpha_{1}^{*},p^{*})=U_{S}^{\alpha\text{pl}}( \alpha_{1}^{*},p^{*})\end{aligned}\right.\]

Thus,

\[\left\{\begin{aligned} \frac{\partial U_{S}^{\alpha\text{pl}}}{ \partial\alpha_{0}}&(\frac{\partial U_{S}^{\alpha\text{eff}}}{ \partial\gamma}-\frac{\partial U_{S}^{\alpha\text{eff}}}{\partial\gamma})= \frac{\partial U_{S}^{\alpha\text{pri}}}{\partial\gamma}(\frac{\partial U_{S}^{ \alpha\text{eff}}}{\partial\alpha_{0}}-\frac{\partial U_{S}^{\alpha\text{eff}}} {\partial\alpha_{0}}),\\ U_{S}^{\text{self}}(\alpha_{1}^{*},p^{*})=U_{S}^{\alpha\text{pri}}( \alpha_{1}^{*},p^{*})\end{aligned}\right.\]

The partial derivatives of \(U_{S}^{\alpha\text{pl}}\) and \(U_{S}^{\text{self}}\) are as follows:

\[\left\{\begin{aligned} \frac{\partial U_{S}^{\alpha\text{pl}}}{ \partial\alpha_{0}}&=\frac{1}{4}bc^{2}(\theta-\gamma)^{2},\\ \frac{\partial U_{S}^{\alpha\text{pl}}}{\partial\gamma}& =-\frac{b^{2}c^{4}}{16Kr}(\theta-\gamma)^{3}-\frac{1}{2}bc^{2}(\theta- \gamma)\alpha_{0},\\ \frac{\partial U_{S}^{\alpha\text{eff}}}{\partial\alpha_{0}}& =\frac{1}{4}mbc^{2}(\theta-1)^{2},\\ \frac{\partial U_{S}^{\alpha\text{eff}}}{\partial\gamma}& =0,\\ \frac{\partial U_{S}^{\alpha\text{pl}}}{\partial\alpha_{0}}& =\frac{1}{2}(\gamma-1)c\left(a-bc\gamma\right)-2K_{F}\alpha_{0}, \\ \frac{\partial U_{S}^{\alpha\text{pl}}}{\partial\gamma}& =\frac{1}{2}bc^{2}\left(\alpha_{0}^{*}(\theta+1-2\gamma^{*})+\frac{bc^{2}}{8 Kr_{T}}(\theta-\gamma^{*})^{2}(3+\theta-4\gamma^{*})\right)\end{aligned}\right.\]

The optimal values \(\alpha_{0}^{*}\) and \(\gamma^{*}\) satisfy:

\[\left(16(\theta-\gamma^{*})^{2}-m(\theta-1)^{2}\right)\alpha_{0}^{*}=\left( \frac{(\theta-1)^{4}}{67\pi K_{0}^{4}}-\frac{(\theta-\gamma^{*})^{4}}{8\pi T} \right)bc^{2},\]

\[\left(\frac{2b^{2}(\gamma^{*}-1)(\theta-\gamma^{*})-4(K_{\text{FSR}}+K_{0}) \alpha_{0}^{*}}{a_{0}^{*}(\theta+1-2\gamma^{*})+\frac{bc^{2}}{8Kr}(\theta- \gamma^{*})^{2}(3+\theta-4\gamma^{*})}\right)=\frac{-bc^{2}((\theta-\gamma^{*} )^{2}-m(\theta-1)^{2})}{\frac{bc^{2}}{8Kr}(\theta-\gamma^{*})^{3}(\theta- \gamma)^{4}\alpha_{0}^{*}},\]

where \(\theta=\frac{a}{bc}\).

### Proof of Theorem 4.6

From A.2, with proactive open-source community, we have:

\[U_{S}^{\text{self}}(\alpha_{1}^{*},p^{*})=\frac{1}{4}bc^{2}(\theta-1)^{2} \alpha+\frac{b^{2}c^{4}}{64(Kr+K_{G})}(\theta-1)^{4}.\]

Same as A.3, the goal is to solve:

\[\alpha_{0}^{*},Y^{*}=\arg\max_{\alpha_{0},Y}U_{F}^{\alpha\text{pl}}(\alpha_{1 }^{*},p^{*}),\]

subject to:

\[U_{S}^{\text{self}}(\alpha_{1}^{*},p^{*})\leq U_{S}^{\alpha\text{pl}}(\alpha_{1 }^{*},p^{*}).\]

Similar as A.3, we can solve the problem with KKT. The only difference is that \(\frac{\partial U_{S}^{\alpha\text{eff}}}{\partial\alpha_{0}}=0\)

### Proof of Theorem 4.4

To prove Theorem 4.4, we need to find \(\alpha_{0}^{*},Y^{*}\) satisfying:

\[\left\{\begin{aligned} U_{S}^{\text{self}}(\alpha_{1}^{*},p^{*})& \leq U_{S}^{\alpha\text{pl}}(\alpha_{1}^{*},p^{*}),\\ U_{F}^{\alpha\text{pl}}&\geq 0,\end{aligned}\right.\]

From A.1 and A.3, we know it is equivalent to find \(\alpha_{0}^{*},Y^{*}\) satisfying:

\[\left\{\begin{aligned} &(16(\theta-\gamma^{*})^{2}-m(\theta-1)^{2} )\alpha_{0}^{*}>\left(\frac{(\theta-1)^{4}}{K_{\text{FT}}+K_{0}}-\frac{( \theta-\gamma)^{4}}{K_{\text{FT}}}\right)b^{2},\\ &\frac{1}{2}bc^{2}(\gamma-1)(\theta-\gamma)\left(\alpha_{0}+ \frac{bc^{2}(\theta-\gamma)^{2}}{8Kr_{T}}\right)-K_{F}\alpha_{0}^{2}>0\end{aligned}\right.\]

, where \(\theta=\frac{\theta}{bc}\).

Also, reasonable solution should satisfy \(\alpha_{0}^{*}>0\) and \(1<\gamma^{*}<\theta\).

\(U_{F}^{\alpha\text{pl}}(\alpha_{0})\) is a quadratic function, opening downward, with \(U_{F}^{\alpha\text{pl}}(\alpha_{0}=0)>0\) and axis of symmetry given by:

\[\frac{bc^{2}}{4K_{\text{F}}}(\gamma-1)(\theta-\gamma)>0,\]

Define \(a_{0}^{1}=\frac{bc^{2}}{4K_{F}}(\gamma-1)(\theta-\gamma)\).

#### A.5.1. Case 1: \(m\geq 1\).

\[(\theta-\gamma)^{2}-m(\theta-1)^{2}<0.\]

Thus, we must have:

\[\frac{(\theta-1)^{4}}{K_{\text{FT}}+K_{0}}<\frac{(\theta-\gamma^{*})^{4}}{K_{ \text{FT}}}\Rightarrow(\theta-\gamma)^{4}>\left(\frac{K_{\text{FT}}}{K_{ \text{FT}}+K_{0}}\right)^{1/4}.\ (\theta-1).\]

We can always find \(\gamma^{*}\) to satisfy this condition.

Also,

\[\alpha_{0}<\frac{\left(\frac{(\theta-1)^{4}}{K_{\text{FT}}+K_{0}}-\frac{(\theta- \gamma^{*})^{4}}{K_{\text{FT}}}\right)bc^{2}}{16(\theta-\gamma^{*})^{2}-m( \theta-1)^{2}}=\alpha_{0}^{\text{cut}}.\]

Thus, an example solution:

\[\left\{\begin{aligned} &\gamma^{*}=\theta-\frac{1}{2}\left( \theta-1+\left(\frac{K_{\text{FT}}}{K_{\text{FT}}+K_{0}}\right)^{1/4}\cdot( \theta-1)\right),\\ &\alpha_{0}^{*}=\min\{\alpha_{0}^{*},\alpha_{0}^{\text{cut}}\}. \end{aligned}\right.\]

#### A.5.2. Case 2: \(0<m<1\)..

If \(0\leq m^{2}<\frac{K_{\text{FT}}}{K_{\text{FT}}+K_{0}}<1\) (when hardware cost is relatively low), let

\[\gamma^{*}\in\left(1,\theta-\left(\frac{K_{\text{FT}}}{K_{\text{FT}}+K_{0}} \right)^{1/4}\cdot(\theta-1)\right),\]

which ensures:

\[\left\{\begin{aligned} &(\theta-\gamma)^{2}-m(\theta-1)^{2}>0,\\ &\frac{(\theta-1)^{4}}{K_{\text{FT}}+K_{0}}-\frac{(\theta-\gamma)^{ 4}}{K_{\text{FT}}}<0.\end{aligned}\right.\]

An example solution:

\[\left\{\begin{aligned} &\gamma^{*}=\theta-\frac{1}{2}\left( \theta-1+\left(\frac{K_{\text{FT}}}{K_{\text{FT}}+K_{0}}\right)^{1/4}\cdot( \theta-1)\right),\\ &\alpha_{0}^{*}=\alpha_{0}^{1}.\end{aligned}\right.\]If \(\frac{K_{T}}{K_{T}+K_{G}}\leq m^{2}<1\) (when hardware cost is relatively high), let

\[\gamma^{*}\in\left(1,\theta-m^{1/2}\cdot(\theta-1)\right),\]

which ensures:

\[\begin{cases}(\theta-\gamma)^{2}-m(\theta-1)^{2}>0,\\ \frac{(\theta-1)^{4}}{K_{T}+K_{G}}-\frac{(\theta-\gamma^{*})^{4}}{K_{T}}<0. \end{cases}\]

An example solution:

\[\begin{cases}\gamma^{*}=\theta-\frac{1}{2}\left(\theta-1+m^{1/2}\cdot(\theta- 1)\right),\\ \alpha_{0}^{*}=\alpha_{0}^{1}.\end{cases}\]

### Proof of Theorem 4.8

Contrary A.5, we need to illustrate: when \(\alpha\) is high, there is no solution of \(\alpha_{0}^{*},\gamma^{*}\) satisfying:

\[\begin{cases}16(\theta-\gamma^{*})^{2}\alpha_{0}^{*}-16(\theta-1)^{2}\alpha> \left(\frac{(\theta-1)^{4}}{K_{T}+K_{G}}-\frac{(\theta-\gamma^{*})^{4}}{K_{T} }\right)bc^{2},\\ \left(U_{F}^{\text{opt}}=\frac{1}{2}bc^{2}(\gamma-1)(\theta-\gamma)\left(a_{0} +\frac{bc^{2}(\theta-\gamma)^{2}}{8K_{T}}\right)-K_{F}\alpha_{0}^{2}>0\right. \end{cases}\]

, where \(\theta=\frac{a}{bc}\).

It is equivalent to:

\[\begin{cases}16(\theta-\gamma^{*})^{2}\alpha_{0}^{*}>\left(\frac{(\theta-1)^{ 4}}{K_{T}+K_{G}}-\frac{(\theta-\gamma^{*})^{4}}{K_{T}}\right)bc^{2}+16(\theta- 1)^{2}\alpha,\\ \frac{1}{2}bc^{2}(\gamma-1)(\theta-\gamma)\left(a_{0}+\frac{bc^{2}(\theta- \gamma)^{2}}{8K_{T}}\right)-K_{F}\alpha_{0}^{2}>0\end{cases}\]

Denote \(R=\left(\frac{(\theta-1)^{4}}{K_{T}+K_{G}}-\frac{(\theta-\gamma^{*})^{4}}{K_{T }}\right)bc^{2}+16(\theta-1)^{2}\alpha,L=16(\theta-\gamma^{*})^{2}\) Thus,

\[\begin{cases}La_{0}^{*}>R,\\ \frac{1}{2}bc^{2}(\gamma-1)(\theta-\gamma)\left(a_{0}+\frac{bc^{2}(\theta- \gamma)^{2}}{8K_{T}}\right)-K_{F}\alpha_{0}^{2}>0\end{cases}\]

Lets \(\alpha>\frac{(\theta-1)^{4}}{K_{T}}bc^{2}\), thus,

\[\begin{cases}\alpha_{0}^{*}>\frac{R}{L}>0,\\ \frac{1}{2}bc^{2}(\gamma-1)(\theta-\gamma)\left(a_{0}+\frac{bc^{2}(\theta- \gamma)^{2}}{8K_{T}}\right)-K_{F}\alpha_{0}^{2}>0\end{cases}\]

As \(U_{F}^{\text{opt}}(a_{0})\) is a quadratic function, opening downward, with \(U_{F}^{\text{opt}}(a_{0}=0)>0\) and axis of symmetry given by:

\[\frac{bc^{2}}{4K_{F}}(\gamma-1)(\theta-\gamma)>0,\]

We only need to substitute \(\alpha_{0}^{*}=\frac{R}{L}\) in \(U_{F}^{\text{opt}}(a_{0}*)\) and show \(U_{F}^{\text{opt}}(a_{0})<0\) when \(\alpha\) is high.

\[U_{F}^{\text{opt}}\left(a_{0}^{*}=\frac{R}{L}\right)=-K_{F}\left(\frac{R}{L} \right)^{2}+\frac{bc^{2}}{2}(\gamma-1)(\theta-1)\frac{R}{L}+\frac{b^{2}c^{4}} {16K_{\text{FT}}}(\theta-\gamma)^{3}(\gamma-1)\]

\[=(-K_{F}R^{2}+\frac{bc^{2}}{2}(\gamma-1)(\theta-1)RL+\frac{b^{2}c^{4}}{16K_{ \text{FT}}}(\theta-\gamma)^{3}(\gamma-1)L^{2})/L^{2}.\]

\[\begin{cases}R\geq R_{\min}=R(\gamma^{*}=1)=\left(\frac{(\theta-1)^{4}}{K_{T} +K_{G}}-\frac{(\theta-1)^{4}}{K_{T}}\right)bc^{2}+16(\theta-1)^{2}\alpha,\\ R\leq R-bc^{2}\frac{(\theta-1)^{4}}{K_{T}+K_{G}}=-\frac{(\theta-\gamma^{*})^{4}}{K _{T}}bc^{2}+16(\theta-1)^{2}\alpha,\\ L\leq L_{\max}=L(\gamma^{*}=1)=16(\theta-1)^{2},\end{cases}\]

\[\theta-\gamma\leq\theta-1.\]

Thus,

\[L^{2}U_{F}^{\text{opt}}\left(a_{0}^{*}=\frac{R}{L}\right)\leq-K_{F}\left( \left(\frac{(\theta-1)^{4}}{K_{\text{FT}}+K_{G}}-\frac{(\theta-\gamma^{*})^{4} }{K_{\text{FT}}}\right)bc^{2}+16(\theta-1)^{2}\alpha\right)^{2}\]

\[+\frac{bc^{2}}{2}(\gamma-1)(\theta-1)\left(-\frac{(\theta-\gamma^{*})^{4}}{K_ {\text{FT}}}bc^{2}+16(\theta-1)^{2}\alpha\right)16(\theta-1)^{2}\]

\[+\frac{b^{2}c^{4}}{16K_{\text{FT}}}(\theta-1)^{3}(\gamma-1)16^{2}(\theta-1)^{4}.\]

Obviously, \(L^{2}U_{F}^{\text{opt}}\left(a_{0}^{*}=\frac{R}{L}\right)\) is a quadratic function of \(\alpha\), opening downward. Thus, when \(\alpha\) is high enough to let \(L^{2}U_{F}^{\text{opt}}\left(a_{0}^{*}=\frac{R}{L}\right)<0\), we cannot find a solution of \(\alpha_{0}^{*},\gamma^{*}\) to make \(U_{F}^{\text{opt}}>0\), which the equilibrium falls into self-hosting. The cut-off \(\alpha^{H}\) can be the right root of \(L^{2}U_{F}^{\text{opt}}\left(a_{0}^{*}=\frac{R}{L}\right)=0\)

### Proof of Theorem 5.2

From A.2, we know \(\alpha_{0}^{*}\) and \(\gamma^{*}\) is the solution of

\[\begin{cases}\frac{\partial U_{F}^{\text{opt}}}{\partial a_{0}}+\lambda\left( \frac{\partial U_{S}^{\text{opt}}}{\partial a_{0}}-\frac{\partial U_{S}^{\text {eff}}}{\partial a_{0}}\right)=0,\\ \frac{\partial U_{S}^{\text{eff}}}{\partial\gamma}+\lambda\frac{\partial U_{S}^ {\text{eff}}}{\partial\gamma}=0,\\ U_{S}^{\text{eff}}=U_{S}^{\text{eff}}\end{cases}\]

However, \(\alpha_{0}^{*}\) and \(\gamma^{*}\) is the solution of:

\[\begin{cases}\frac{\partial U_{S}^{\text{opt}}}{\partial a_{0}}=0,\\ \frac{\partial U_{S}^{\text{eff}}}{\partial\gamma}=0,\\ \frac{1}{\partial U_{S}^{\text{eff}}}{\partial\gamma}=0,\end{cases}\]

Also, we know that \(U_{S}^{\text{eff}}(a_{0}^{*},\gamma^{*})>U_{S}^{\text{opt}}(a_{0}^{*},\gamma^{*})\). Else it falls into a API-dominant solution.

**Part One:** if

(1) \[\frac{\partial U_{S}^{\text{opt}}}{\partial a_{0}}<\frac{\partial U_{S}^{\text{ eff}}}{\partial a_{0}}and\frac{\partial^{2}U_{F}}{\partial\gamma a_{0}}>0.\] (27)

We know

\[\begin{cases}\frac{\partial U_{S}^{\text{opt}}}{\partial a_{0}}(\gamma^{*}, \alpha_{0}^{*})>0,\\ \frac{\partial U_{S}^{\text{eff}}}{\partial\gamma}(\gamma^{*},\alpha_{0}^{*})>0 \end{cases}\]

We discuss the value of \(\alpha_{0}^{*}\) and \(\gamma^{*}\):

\[\begin{cases}\alpha_{0}^{*}>\alpha_{0}^{*},\gamma^{*}>V^{*}:\text{ unreasonable. As }U_{S}^{\text{self}}(\alpha_{0}^{*},\gamma^{*})-U_{S}^{\text{eff}}(\alpha_{0}^{*},\gamma^{*})\\ >U_{S}^{\text{self}}(\alpha_{0}^{*},\gamma^{*})-U_{S}^{\text{app}}(\alpha_{0}^{*}, \gamma^{*})>U_{S}^{\text{self}}(\alpha_{0}^{*},\gamma^{*})-U_{S}^{\text{app}}(\alpha_{0}^{*}, \gamma^{*})>0\end{cases} \tag{1}\]

(2)

[MISSING_PAGE_EMPTY:13]

\begin{table}
\begin{tabular}{c c c} \hline \hline Symbols & Meanings & 1567 \\ \hline \(F\) & closed-source foundation technology developer & 1570 \\ \(S\) & Domain-specific deployer & 1572 \\ \(O\) & Open-source community & 1573 \\ \(U\) & End user & 1574 \\ \(a\) & Total potential demand in the market & 1575 \\ \(b\) & Price sensitivity of end user & 1576 \\ \(\gamma\) & Price multiplier of API & 1577 \\ \(\alpha_{0}\) & Closed-source foundation technology performance & 1578 \\ \(\alpha_{0}^{\text{soc}}\) & Foundation technology performance at social level & 1579 \\ \(a\) & Open-source foundational technology performance & 1589 \\ \(\alpha_{1}\) & End technology performance & 1581 \\ \(\alpha_{1}^{\text{soc}}\) & End technology performance at social level & 1582 \\ \(m\) & Relative performance of open-source to closed-source foundational technology & 1583 \\ \(c\) & Unit operation cost of the technology & 1584 \\ \(K_{P}\) & Cost factor for developing foundational technology & 1585 \\ \(K_{S}^{api}\) & Cost factor for adapting technology in API scenario & 1586 \\ \(K_{S}^{self}\) & Cost factor for adapting technology in self-hosting scenario & 1587 \\ \(K_{S}^{\text{SD}}\) & Cost factor for adapting hardware cost parameter & 1588 \\ \(K_{GPU}\) & Hardware cost parameter & 1589 \\ \(K_{PRE}\) & Non-hardware cost parameter for developing foundation technology & 1590 \\ \(K_{FT}\) & Non-hardware cost factor for adapting technology & 1590 \\ \(p\) & Price of domain-specific technology & 1591 \\ \(D\) & Actual demand in the end market & 1592 \\ \(U_{S}\) & Utility of deployer \(S\) & 1593 \\ \(U_{F}\) & Utility of developer \(F\) & 1594 \\ \hline \hline \end{tabular}
\end{table}
Table 1. Notations