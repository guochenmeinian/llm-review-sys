# Ares: Predictable Traffic Engineering under Controller Failures in SD-WANs

Anonymous Author(s)

###### Abstract.

Emerging web applications (_e.g._, video streaming and Web of Things applications) account for a large share of traffic in Wide Area Networks (WANs) and provide traffic with various Quality of Service (QoS) requirements. Software-Defined Wide Area Networks (SD-WANs) offer a promising opportunity to enhance the performance of Traffic Engineering (TE), which aims to enable differentiable QoS for numerous web applications. Nevertheless, SD-WANs are managed by controllers, and unpredictable controller failures may undermine flexible network management. Switches previously controlled by the failed controllers may become offline, and flows traversing these offline switches lose the path programmability to route flows on available forwarding paths. Thus, these offline flows cannot be routed/rerouted on previous paths to accommodate potential traffic variations, leading to severe TE performance degradation. Existing recovery solutions reassign offline switches to other active controllers to recover the degraded path programmability but fail to promise good TE performance since higher path programmability does not necessarily guarantee satisfactory TE performance. In this paper, we propose Ares to provide predictable TE performance under controller failures. We formulate an optimization problem to maintain predictable TE performance by jointly considering fine-grained flow-controller reassignment using P4 Runtime and flow rerouting and propose Ares to efficiently solve this problem. Extensive simulation results demonstrate that our problem formulation exhibits comparable load balancing performance to optimal TE solution without controller failures, and the proposed Ares significantly improves average load balancing performance by up to 43.36% with low computation time compared with existing solutions.

Traffic Engineering, Software-Defined Wide Area Networks, Web Services, Controller Failures. +
Footnote †: copyright: none

+
Footnote †: copyright: none

+
Footnote †: copyright: none

+
Footnote †: copyright: none

+
Footnote †: copyright: none

## 1. Introduction

Popular modern cloud services bring emerging new web applications (_e.g._, web services (Sen et al., 2016), video streaming (Han et al., 2017), web AR/VR (Kirshman et al., 2017), and tactile Internet (Kirshman et al., 2017)), which could be deployed for tenants various Quality of Service (QoS) requirements. These web services account for a large share of Wide Area Networks (WANs) traffic (WANs) (Wan et al., 2017). Traffic Engineering (TE) is a prevalent network application that aims to improve the network performance of WANs and enable differentiable QoS for numerous web applications (Song et al., 2017). TE plays a crucial role in the network operations of Internet Service Providers (ISPs) as it allows them to efficiently manage traffic distribution across their WANs. As Software-Defined Networking (SDN) has been introduced into WANs, also known as Software-Defined Wide Area Networks (SD-WANs) (Wan et al., 2017; Wang et al., 2017), the management of WANs for TE becomes much more flexible. Empowered by the SDN, TE can be implemented at the SDN controller, enabling it to respond promptly to traffic changes by leveraging a global network view (Wang et al., 2017). Once TE generates an updated routing strategy based on measured Traffic Matrices (TMs) (Song et al., 2017), the SDN controller can implement corresponding routing policies at the underlying SDN switches to reroute flows accordingly. Extensive evaluation results on WANs of world-leading giant techs (_e.g._, Google (Kirshman et al., 2017; Wang et al., 2017), Microsoft (Kirshman et al., 2017; Wang et al., 2017), and Amazon (Kirshman et al., 2017)) have proven the effectiveness of achieving a better TE performance by introducing SDN into WANs.

While the SDN offers numerous network management benefits, it still faces challenges. The flexible management of network flows in an SD-WAN relies on the functionality of the SDN controller. However, controller failure is a common problem in SD-WANs (Kirshman et al., 2017; Wang et al., 2017). An SDN controller, typically a physical server or virtual machine running a network operating system, can experience unexpected failures due to various unforeseen circumstances (_e.g._, power outage (Zhao et al., 2017) and malicious attacks (Wang et al., 2017)). When a controller fails in an SD-WAN, all the switches previously controlled by the failed controller become offline switches. Any flow traversing these offline switches becomes offline and loses its path programmability, which denotes the ability to adjust the flow's forwarding path, and consequently, the controller can no longer control the flow. Based on our new observation in Section 2.2, when controller failures happen (Kirshman et al., 2017; Wang et al., 2017), network performance cannot be guaranteed to accommodate potential traffic variations due to the loss of flexible network management. In some severe cases, several controllers may fail simultaneously or successively, leading to significant TE performance variation with a large number of offline flows.

To mitigate the impact of controller failures on web services due to TE performance degradation, state-of-the-art solutions attempt to reassign offline switches to other active controllers (Kirshman et al., 2017; Wang et al., 2017; Wang et al., 2017). These solutions are typically path programmability-centric and take maximizing the total recovered path programmability as their primary objective. However, these path programmability-centric solutions may not necessarily guarantee better TE performance, since they fail to achieve satisfactory and predictable TE performance after controller failures occur, which is attributed to path programmability being unable to reveal network performance. While higher path programmability implies a higher likelihood of accommodating unpredictable future traffic fluctuations, it cannot guarantee a predictable TE performance when the current traffic status is given (_i.e._, TMs are known). Thus, an effective recovery solution is needed to maintain web services by ensuring improved predictable TE performance under controller failures.

In this paper, we propose the _PredictAble TRAffic Engineering Solution (Ares)_, which aims to guarantee predictable TE performance under controller failures. The key idea of Ares is to jointly consider fine-grained flow-controller reassignment using P4 Runtime and flow rerouting based on the input TMs. We formulate an optimization problem named _TE Performance-aware Flow-Controller_Reassignment and Flow Recrouting (TPFCRFR), which seeks to minimize the Maximum Link Utilization (MLU) in the network under controller failures. The formulated TPFCRFR problem is a Mixed Integer Linear Programming (MLIP) with high complexity. To tackle this problem, we propose an efficient and effective heuristic solution named Ares to determine the reassignment and rerouting policies. Extensive evaluation results verify the effectiveness of our formulation: the optimal solution of our formulation exhibits comparable load balancing performance to the optimal TE solution without controller failures. The results also show that the proposed Ares can improve the average load balancing performance by up to 43.36% with low computation time compared with existing solutions.

The main contributions of this paper are summarized as follows:

* We identify that controller failures may be a severe factor affecting web service performance due to TE performance degradation, and existing recovery solutions cannot guarantee predictable TE performance.
* We formulate an optimization problem to maintain predictable TE performance by jointly considering flow-controller reassignment and flow rerouting. We further conduct simulations to prove the effectiveness of our proposed TPFCRFR problem.
* To solve the problem, we propose Ares. Extensive simulations under real-world topology and traffic traces demonstrate that Ares can guarantee good TE performance with low computation time.

The remainder of this paper is organized as follows. In Section 2, we provide the background, observations, and motivation of this paper. Section 3 discusses the design opportunity and design overview of Ares. Section 4 formulates the TPFCRFR problem. In Section 5, we propose Ares to efficiently address this problem. In Section 6, we verify the effectiveness of our formulation and compare the performance of Ares with other existing baseline solutions. Section 7 discusses the related work within this research area. Finally, we conclude the paper in Section 8.

## 2. Background and Motivation

In this section, we will introduce the background, motivation, and our new observations of this paper.

### TE Meets Various QoS Requirements for Web Services through SD-WANs

Emerging new web services require various QoS requirements. These web services are highly prioritized in the whole network and account for a large share of traffic in WANs (Shen et al., 2017). To improve the network performance to enable differentiable QoS, TE offers a promising solution to this issue. By Leveraging the capabilities of SDN, TE can be efficiently deployed at the control plane, enabling rapid response to traffic fluctuations in WANs and promise required QoS for web services through a global network perspective. Specifically, TE aims to find effective routing strategies that redistribute the traffic across the network, thereby alleviating network congestion and optimizing network performance (Bauer et al., 2017; Wang et al., 2017). Based on the given network topology and traffic demands of flows, TE will formulate an optimization problem with a specific objective function, _e.g._, minimizing the MLU, to decide the suitable path for each flow to forward. Since the SDN controller is able to maintain a global network view and update routing policies at the underlying SDN switches, TE will periodically reroute flows to achieve improved load balancing in response to dynamic changes in network traffic conditions for SD-WANs.

### Controller Failures Pose Severe Impact on TE Performance

Even though SDN brings many benefits to WANs, it is still faced with challenges. SDN controllers, typically physical servers or virtual machines running a network operating system, may fail in SD-WANs. Unforeseen circumstances (_e.g._, natural disasters, hardware or software errors, and power outages) can cause controller failures. When such controller failures occur, switches previously controlled by the failed controllers will become offline, and flows traversing these offline switches will lose their path programmability and become offline flows. The controller failure problem can cause fluctuations in network performance and even TE performance under varying network conditions due to decreased path programmability. To maintain stable network performance, it is crucial to recover these offline flows under controller failures.

Figure 1 shows our observation about the impact of controller failures on TE performance. The load balancing results are obtained by solving the Multi-Commodity Flow (MCF) problem (Meyer et al., 2017), which is detailed in Appendix A.1. MCF is a widely used TE solution that balances traffic load among all links by minimizing the MLU. We utilize GEANT topology with real-world TMs of the 23 switches at a time slot of every fifteen minutes and select 672 TMs collected during one week, specifically from June 2, 2005, to June 8, 2005. The blue line shows the MLU performance before controller failures, and the red one shows the MLU performance after controller failures. This observation demonstrates that controller failures threaten TE performance, which can increase the MLU by up to 0.35 in the worst case. The root cause lies in that flows cannot be flexibly rerouted to accommodate traffic fluctuations due to controller failures. Thus, meeting various QoS requirements for emerging web services under controller failures is challenging and non-trivial.

### State-of-the-Art Solutions and Their Limitations

A common approach to the controller failure problem is to employ a cluster deployment strategy. The cluster deployment involves

Figure 1. Comparison of the MLU performance before and after controller failures. The lower, the better.

setting up a controller cluster comprising multiple controllers to handle single controller failure (Brock et al., 2017; Bock et al., 2018). Typically, if one controller in the cluster fails, the other functioning controllers can continue operating and ensure uninterrupted control over the network. However, it is essential to note that if all controllers in a cluster fail simultaneously, such as during a power outage, this cluster design may not be effective (Krause et al., 2019). Therefore, it is necessary to develop efficient and effective solutions to address this situation, which aims to maintain network performance to keep the network functional and responsive even under multiple controller failure scenarios.

To tackle this issue, existing state-of-the-art solutions propose reassigning offline switches to active controllers to maximize recovered path programmability under controller failures. However, higher path programmability can only indicate higher flexibility in network management and may not necessarily ensure the expected improvement in network performance, particularly in TE performance. In addition, existing solutions all follow the same coarse-grained switch-controller reassignment pattern, which limits the recovery performance since some flows with large traffic volumes may not be recovered for further rerouting. In other words, state-of-the-art can not promise good TE performance under controller failures. In the forthcoming Section 3, we will elaborate on the design of our proposed Ares, and how it overcomes these limitations.

## 3. Design overview of Ares

In this section, we will introduce the opportunity to help us realize fine-grained flow-controller reassignment and present the design overview of Ares.

### Opportunity

The development of the programmable data plane has facilitated precise flow-controller assignment without requiring additional hardware. P4 is a programming language utilized to program the data plane, as indicated by (Brock et al., 2017). Additionally, P4 Runtime is a novel approach that allows the control plane to manage the data plane (Brock et al., 2017). This specification is designed for P4 programmable switches and allows multiple controllers to manage the switch via the P4 Runtime server simultaneously. This feature aligns with the design goals of enabling multiple controllers to manage a single switch. By deploying a module in each P4 Runtime server, flow redirection from failed controllers to active ones can be accomplished using reassignment strategies. The reassignment strategies are computed by solving an optimization problem outlined in Section 4, and P4 Runtime allows for flow-controller reassignment among active controllers based on these strategies.

### Overview of Ares

Ares aims to promise predictable TE performance under controller failures by jointly considering flow-controller reassignment and flow rerouting. As depicted in Figure 2, Ares has four main steps. Firstly, it collects real-time traffic traces (_e.g._, TMs) from the network periodically. Secondly, when controller failures occur, Ares updates the current network status with the required information (_e.g._, collected TMs, offline flows, and active controllers). Subsequently, flow-controller reassignment and flow rerouting policies are determined and generated by solving the optimization problem (_i.e._, TPFCRFR problem) detailed in the following Section 4. Finally, Ares reassigns offline flows to corresponding active controllers and updates routing policies, achieving predictable load balancing performance in the whole network.

## 4. Problem formulation

In this section, we will exhibit the formulation of the TPFCRFR problem, which involves deciding the reassignment strategies for offline flows to active controllers under controller failures by considering the TE performance.

### System Description

Typically, an SD-WAN consists of \(H\) controllers at \(H\) locations, and each controller controls a domain of switches. Controllers \(C_{N+1}\),..., \(C_{H}\) fail, and the set of active controllers is \(\mathcal{C}=\{C_{1},...,C_{i},...,C_{N}\}\). The set of flows is \(\mathcal{F}=\{f_{1},...,f_{j},...,f_{T}\}\), where \(f_{1}\),..., \(f_{M}\) are offline flows and \(f_{M+1}\),..., \(f_{T}\) are online flows controlled by active controllers. The set of links is \(\mathcal{E}=\{e_{1},...,e_{k},...,e_{K}\}\). The pre-configured path set for flow \(f_{j}\) is \(\mathcal{P}_{j}=\{p_{j}^{1},...,p_{j}^{1},...,p_{j}^{T}\}\). We use \(x_{ij}^{l}=1\) to denote that offline flow \(f_{j}\) (\(j\in[1,M]\)) is forwarded on path \(p_{j}^{l}\) and reassigned to controller \(C_{i}\); Otherwise \(x_{ij}^{l}=0\). We use \(y_{j}^{l}=1\) to denote that online flow \(f_{j}\) (\(j\in[M+1,T]\)) is forwarded on path \(p_{j}^{l}\); Otherwise \(y_{j}^{l}=0\).

### Problem Constraints

#### Path Selection Constraint

Each offline flow must be forwarded on one path. Thus, we have:

\[\sum_{l=1}^{L}\sum_{i=1}^{N}x_{ij}^{l}=1,\forall j\in[1,M]. \tag{1}\]

Each online flow should also select one path to forward on, which is:

\[\sum_{l=1}^{L}y_{j}^{l}=1,\forall j\in[M+1,T]. \tag{2}\]

#### Flow-Controller Reassignment Constraint

When controller failures happen, active controllers must prioritize the management of flows from offline switches while ensuring uninterrupted normal operations. The control load of a controller is determined by the overall overhead involved in controlling the flows within its designated domain. We quantify a controller's control resource based on the number of flows it can effectively handle without introducing additional delays (_e.g._, queueing delay (Brock et al., 2017)).

Figure 2. Design structure of Ares.

In the worst case, the cascading failure may happen due to the overloading of controllers (Zhu et al., 2017). Hence, ensuring that a controller's control load remains within its available control resource is crucial. We use \(h_{j}^{l}\) to denote the required available control resource of selecting path \(p_{j}^{l}\) for flow \(f_{j}\) and dispatching the control of flow \(f_{l}\) to another active controller. We use \(g_{ij}^{l}\) to denote the released control resource of controller \(C_{i}\) if flow \(f_{j}\) is forwarded on path \(p_{j}^{l}\). Figure 3 shows an example to calculate \(h_{j}^{l}\) and \(g_{ij}^{l}\). Mathematically, the flow-controller reassignment constraint can be expressed as follows:

\[\sum_{l=1}^{L}\sum_{j=1}^{M}(x_{ij}^{l}*h_{j}^{l})\leq R_{i}^{aaaa1}.+\sum_{l=1 }^{L}\sum_{j=1}^{M}(x_{ij}^{l}*g_{ij}^{l}),\forall i\in[1,N], \tag{3}\]

where \(R_{i}^{aaaul.}\) denotes the available resource of controller \(C_{i}\).

#### Link Load Constraint

The total traffic load on each link, consisting of two parts (_i.e._, the sum of the traffic load from offline and online flows on each link), should be at most its upper bound link capacity. We use \(Cap_{k}\) to denote link \(e_{k}\)'s capacity, \(V_{j}\) to denote the traffic demand from flow \(f_{j}\), \(a_{k}^{l}\) to denote the relationship between links and paths, and \(u\) to denote the MLU. The sum of the traffic load on link \(e_{k}\) is denoted as \(load_{k}\) and calculated as follows:

\[load_{k}=\sum_{l=1}^{L}\sum_{j=1}^{M}\sum_{i=1}^{N}(x_{ij}^{l}*V_{j}*a_{k}^{l}) +\sum_{l=1}^{L}\sum_{j=M+1}^{T}(y_{j}^{l}*y_{j}*a_{k}^{l}),\forall k\in[1,K]. \tag{4}\]

Then, the traffic load on each link cannot exceed the link's capacity, and the link load constraint can be formulated as follows:

\[load_{k}\leq Cap_{k}*u,\forall k\in[1,K]. \tag{5}\]

### Objective Function

The objective of our proposed TPFCRFR problem is to minimize the MLU. Thus, the objective function can be formulated as follows:

\[obj=u. \tag{6}\]

### Problem Formulation

Based on the above problem constraints and objective function, the problem can be formulated as follows:

\[\begin{split}\min_{u,v,y}& u\\ \text{s.t.}&(1)(2)(3)(4)(5),\\ & x_{ij}^{l},y_{j}^{l}\in\{0,1\},\end{split} \tag{7}\]

where \(\{x_{ij}^{l}\}\) and \(\{y_{j}^{l}\}\) are binary design variables, and \(u\) is a continues design variable. \([Cap_{k}]\) are given continues constants, \(\{R_{i}^{aaail.}\}\) are given integer constants, \(\{a_{k}^{l}\}\) are given binary constants, and \(\{h_{j}^{l}\}\) and \(\{g_{ij}^{l}\}\) are given integer constants. Given that the objective function is linear, this problem is a MILP.

## 5. Solution

The typical approach to address the above TPFCRFR problem involves obtaining an optimal result through optimization solvers. However, the TPFCRFR problem is with high complexity. As the network grows, the solution space expands substantially, making finding a feasible solution within a reasonable time frame challenging or rendering it infeasible. Consequently, we propose a heuristic algorithm to solve the problem, aiming to provide a trade-off between performance and time complexity. The key idea is to select a path for each offline flow to forward on based on the probabilities obtained from the linear programming relaxation of problem (P). The details of the algorithm are summarized in Algorithm 1, and the notations used are listed in Table 1.

The algorithm begins by initializing an empty set \(X\) (line 1). We first relax the binary variable \(x_{ij}^{l}\) in problem (P) to continuous variables and obtain the linear programming relaxation solution \(\hat{X}^{*}\). We then sort the values in \(\hat{X}^{*}\) in descending order to get vectors \(\hat{X}\) (line 2). Sorting the values in \(\hat{X}^{*}\) in descending order helps prioritize all the tests based on their probabilities. From lines 4 to 17, the algorithm tests all possible selection and reassignment strategies by rounding the decimal values in \(\hat{X}\) to configure proper reassignments. It first finds corresponding controller, flow, and path IDs \(i_{0}\) and \(j_{0}\) from \(l_{0}\) (line 5). Then, it checks if the flow \(f_{j}\) has not been reassigned yet and this reassignment is feasible based on problem constraints Eqs. (1) and (3). If it is a feasible one, this reassignment policy will be

Figure 3. An example to show how to calculate \(h_{j}^{l}\) and \(g_{ij}^{l}\). Controller \(C_{2}\) fails, and all switches within domain \(D_{2}\) become offline.

confirmed in \(\mathcal{X}\), the available control resource of active controller \(C_{j_{b}}\) will be updated, and the reassigned flow \(f_{j_{b}}\) will be removed from the set \(\mathcal{F}^{\prime}\) (lines 7-9). Besides, the released control resource will also be updated to the corresponding controllers due to the selection of different paths for the flow.

If all offline flows have been reassigned, the first step of the algorithm will stop. As for the second step of this algorithm, if there remain unreassigned flows after the initial part, the algorithm proceeds to design a reassignment policy for these flows further. From lines 19 to 25, the algorithm lets each unreassigned flow \(f_{j_{b}}\) keep forward on its original path \(p_{j_{b}}^{l_{b}}\), which will not cause any further updates on active controllers' available control resource. The reassignment policy will be confirmed in \(\mathcal{X}\), and the flow \(f_{j_{b}}\) will be removed from the set \(\mathcal{F}^{\prime}\) (lines 22 to 23). Finally, in line 26, the algorithm stops, and the updated set \(\mathcal{X}\) is returned.

```
Input :\(\mathcal{C},\mathcal{F}^{\prime},\mathcal{P}^{\prime},\mathcal{R},h_{j}^{l}, \,g_{ij}^{l}\) Output :\(\mathcal{X}\);
1\(\mathcal{X}=\emptyset\);
2generate \(\bar{\mathcal{X}}=\{x_{t},t\in[1,N*M*L]\}\) by solving the linear programming relaxation of problem (P) and sorting the results in the descending order;
3// select path for each offline flow to forward on and dispatch the control of the flow to an active controller based on the descending order of their probabilities;
4for\(x_{t_{b}}\in\bar{X}\)do
5 get controller, flow, and path IDs \(i_{0}\), \(j_{0}\), and \(l_{0}\) from \(x_{t_{b}}\);
6if\(\mathcal{X}\cup(i_{0},j_{0},l_{0})\) satisfies constraints Eqs. (1) and (3) and \(\{f_{j_{b}}\in\mathcal{F}^{\prime}\)then
7\(\mathcal{X}\leftarrow\mathcal{X}\cup(i_{0},j_{0},l_{0})\);
8\(\mathcal{F}^{\prime}\leftarrow\mathcal{F}^{\prime}\)\(\{f_{j_{b}}\);
9\(R_{j_{b}}^{\mathit{goal}}\leftarrow\)\(p_{j_{b}}^{\mathit{goal}}\)\(\leftarrow\)\(h_{j_{b}}^{\mathit{goal}}\);
10for\(C_{b}\in C\)do
11\(R_{b_{b_{b^{\prime}}}}^{\mathit{goal}}\)\(\leftarrow\)\(R_{b_{b^{\prime}}}^{\mathit{goal}}\)\(\leftarrow\)\(g_{b_{b^{\prime}}}^{\mathit{b}}\);
12 end if
13
14 end for
15if\(\mathcal{F}^{\prime}==\emptyset\)then
16 break;
17 end if
18
19 end if
20
21 end if
22if// test any remaining offline flows if there are any;
23if\(\mathcal{F}^{\prime}\neq\emptyset\)then
24for\(f_{j_{b}}\in\mathcal{F}^{\prime}\)do
25 get flow \(f_{j_{b}}\)'s original forwarding path \(p_{j_{b}}^{b}\);
26\(\mathcal{X}\leftarrow\mathcal{X}\cup(*,j_{0},l_{0})\);
27\(\mathcal{F}^{\prime}\leftarrow\mathcal{F}^{\prime}\setminus f_{j_{b}}\);
28
29 end if
30
31 end for return\(\mathcal{X}\);
```

**Algorithm 1**Heuristic Algorithm

### Evaluation Setup

In our performance evaluation of Ars, we utilize a representative backbone topology known as GEANT. This topology is based on a network infrastructure in Europe and consists of 23 switches connected by 72 links. Each topology node has a unique ID associated with latitude and longitude coordinates. We deploy five SDN controllers for our evaluation setup, each with a control resource of 500 [(8; 9; 12)]. The control resource of a controller, as defined in previous studies [(33; 35)], refers to its processing capability to perform flow state pulling operations and retrieve network state variations without introducing additional control latency [(41)]. To conduct our evaluation, we utilize a dataset that records the real-world TMs of the 23 switches at a time slot of every fifteen minutes over four months [(34)]. From this dataset, we select 672 TMs collected during one week, specifically from June 2, 2005, to June 8, 2005, to serve as our dataset for evaluation purposes.

As for the pre-configured path set for MCF, OPT-TPFCRFR, and Ars, we utilize the pre-configured SMORE path set in our evaluation. SMORE is a widely recognized TE solution that effectively mitigates network congestion and achieves load balancing by intelligently selecting paths with dynamic weight adaptation [(23)]. The pre-configured SMORE path set is calculated using Racke's oblivious routing algorithm [(28)]. Notably, SMORE leverages disks to enhance network robustness and is optimized for load balancing. For our evaluation under the GEANT topology, we select four SMORE paths with the highest weights for each flow. By leveraging SMORE's path selection algorithm, we aim to achieve efficient load balancing and improved performance in our evaluation.

\begin{table}
\begin{tabular}{c||c} Algorithm & Algorithm \\ \hline
**Input** :\(\mathcal{C},\mathcal{F}^{\prime},\mathcal{P}^{\prime},\mathcal{R},h_{j}^{l}, \,g_{ij}^{l}\); \\
**Output :\(\mathcal{X}\)**; \\
1\(\mathcal{X}=\emptyset\); \\
2generate \(\bar{\mathcal{X}}=\{x_{t},t\in[1,N*M*L]\}\) by solving the linear programming relaxation of problem (P) and sorting the results in the descending order; \\
3// select path for each offline flow to forward on and dispatch the control of the flow to an active controller based on the descending order of their probabilities; \\
4for\(x_{t_{b}}\in\bar{X}\)do
5 get controller, flow, and path IDs \(i_{0}\), \(j_{0}\), and \(l_{0}\) from \(x_{t_{b}}\); \\
6if\(\mathcal{X}\cup(i_{0},j_{0},l_{0})\) satisfies constraints Eqs. (1) and (3) and \(\{f_{j_{b}}\in\mathcal{F}^{\prime}\)then
7\(\mathcal{X}\leftarrow\mathcal{X}\cup(i_{0},j_{0},l_{0})\); \\
8\(\mathcal{F}^{\prime}\leftarrow\mathcal{F}^{\prime}\)\(\{f_{j_{b}}\); \\
9\(R_{j_{b}}^{\mathit{goal}}\leftarrow\)\(p_{j_{b}}^{\mathit{goal}}\)\(\leftarrow\)\(h

### Comparison Algorithm

1. Open Shortest Path First (**OSPF**) (Shi et al., 2018): All flows are rerouted to their respective weighted shortest paths, which are calculated using the OSPF algorithm.
2. Equal-Cost Multi-Path (**ECMP**) (Shi et al., 2018): When multiple shortest paths exist between a pair of source and destination switches, the traffic is evenly distributed among all the available next hops along these paths. In other words, each switch along the path splits the traffic equally among all the corresponding shortest paths.
3. Multi-Commodity Flow (**MCF**) (Shi et al., 2018): This scheme formulates the MCF optimization problem based on the pre-configured path set, intending to minimize the MLU to achieve a decent load balancing performance. Details of the formulation can be found in Appendix A.1. We use GUROBI optimization solver (Becker et al., 2017) to solve this problem.
4. **RetroFlow**(Shi et al., 2018): This scheme aims to recover offline flows using a two-fold approach. Firstly, offline switches are configured to operate under the legacy routing mode. Secondly, the control of the rest of the offline switches is reassigned to active controllers. OPT-OSCM is the optimal solution to the formulated problem in (Shi et al., 2018).
5. **Matchmaker**(Shi et al., 2018): This scheme adaptively modifies the control cost of offline switches based on the limited available control resource by intelligently rerouting flows to facilitate appropriate reassignment of offline switches. OPT-FRSM is the optimal solution to the formulated problem in (Shi et al., 2018).
6. ProgrammabilityMedic (**PM**) (Becker et al., 2017): This scheme focuses on recovering offline flows by ensuring that they have similar path programmability. It achieves this by determining the appropriate routing mode for flows at the recovered offline switches and configuring the mappings between switches and controllers. OPT-FRSSM is the optimal solution to the formulated problem in (Becker et al., 2017).
7. Optimal results of the TPCFR problem (**OPT-TPFCRFR**): This scheme is the optimal solution to the formulated problem (P). We use GUROBI optimization solver (Becker et al., 2017) to solve this problem.
8. **Arcs**: This scheme is shown in Algorithm 1.

Note that the results presented for OSPF, ECMP, and MCF assume that no controller failures have occurred.

### Evaluation Results

We evaluate the effectiveness of our proposed TPFCRFR formulation and Arcs with the following two metrics. The first evaluation metric in our evaluation is the MLU. The lower MLU indicates a better TE performance. The second evaluation metric is the computation time. We want to ensure our proposed Arcs is efficient and scalable enough to cope with severe controller failure scenarios and realize a fast recovery of the whole network.

To evaluate the load balancing performance, we employ the Performance Ratio (PR), which is defined as \(PR=P_{\text{MCF}}/P_{\text{scheme}}\)

\begin{table}
\begin{tabular}{c c c} \hline \hline Scheme & One controller failures & Two controller failures \\ \hline OSPF & 44.46\% & 44.46\% \\ ECMP & 56.78\% & 56.78\% \\ OPT-OSCM (Shi et al., 2018) & 60.57\% & 55.68\% \\ OPT-FRSM (Shi et al., 2018) & 58.09\% & 51.40\% \\ OPT-FASSM (Shi et al., 2018) & 58.50\% & 52.42\% \\ OPT-TPFCRFR & 100.00\% & 100.00\% \\ \hline \hline \end{tabular}
\end{table}
Table 2. Average PR Performance of TPFCRFR formulation and existing formulations. The higher, the better.

Figure 4. Comparison of PR results between TPFCRFR formulation and existing formulations under two controller failures. \(\diamond\) denotes that the load balancing results of the scheme are obtained by using GUROBI to solve the MCF problem detailed in Appendix A.1.

\(P_{\text{MCF}}\) represents the load balancing results achieved by the MCF approach without controller failures, which represents the optimal TE performance, and \(P_{\text{scheme}}\) corresponds to the load balancing results attained by a specific scheme. A PR value of 1 implies that the scheme performs on par with the optimal results. A lower PR value indicates that the scheme's performance deviates significantly from the optimal results.

#### 1. Effectiveness of proposed TPFCRR problem formulation

To evaluate the effectiveness of our formulated TPFCRFR formulation, we first compare the optimal results of the TPFCRFR problem with the optimal results of other problem formulations. Note that OPT-OSCM, OPT-FRSM, and OPT-FMSSM are the optimal results of the formulations for RetroFlow, Matchmaker, and PM, respectively. Given that these three schemes are only switch-controller reassignment solutions and do not include the TE operation part, we use \(\diamond\) to denote that their load balancing results are obtained by using GUROBI to solve the MCF problem detailed in Appendix A.1.

Figure 4 shows four specific cases of PR results of TPFCRFR formulation and existing formulations under two controller failures. It is important to note that when two out of five controllers fail, there are ten specific cases, but due to limited space, only four cases are displayed in this paper. We can see that OPT-TPFCRFR exhibits comparable TE performance with the optimal MCF solution and significantly outperforms other schemes. Table 2 shows the performance of optimal solutions' average PR. Compared with OSPF, OPT-TPFCRFR realizes the best TE performance and improves the load balancing performance by up to 55.54%. The simulation results prove that our TPFCRFR formulation benefits from jointly considering flow-controller reassignment and flow rerouting rather than separately doing the reassignment and rerouting in a two-step way in other schemes.

#### 2. Effectiveness of proposed Areas

To further evaluate the effectiveness of our proposed Area, we conduct more simulations on load balancing performance between our proposed Area and other heuristics. Note that RetroFlow, Matchmaker, and PM are only switch-controller reassignment solutions and do not include the TE operation part. Thus, we use \(\bullet\) to denote that their load balancing results are obtained by adopting the heuristic TE solution

Figure 5. Comparison of PR results between Area and existing solutions under one controller failure. \(\bullet\) denotes that the load balancing results of the scheme are obtained by adopting the heuristic TE solution detailed in Appendix A.2 (Algorithm 2).

Figure 6. Comparison of PR results between Area and existing solutions under two controller failures. \(\bullet\) denotes that the load balancing results of the scheme are obtained by adopting the heuristic TE solution detailed in Appendix A.2 (Algorithm 2).

detailed in Appendix A.2 (Algorithm 2) after the recovery procedure. Figures 5 and 6 illustrate six specific cases of heuristic solutions' PR results under one and two controller failures. From these cases, we observe that Ares consistently demonstrates compatibility with the optimal MCF performance and outperforms the other solutions. The evaluation results confirm that Ares effectively guarantees robust TE performance under controller failures since Ares jointly considers flow-controller reassignment and rerouting.

Table 3 presents the average PR of six solutions under both one and two controller failure scenarios. In the case of a single controller failure, Ares achieves the best performance compared to other schemes. Conversely, OSPF and ECMP exhibit the weakest performance as they cannot adapt the routing policy to dynamic traffic conditions. Compared to OSPF, Ares significantly improves load balancing performance, achieving up to a 43.36% enhancement. Additionally, RetroFlow, Matchmaker, and PM perform less effectively than Ares, indicating that path programmability-centric solutions fail to promise predictable TE performance under controller failures compared with Ares. Under two controller failures, the network faces more critical challenges, and maintaining satisfactory load balancing performance becomes crucial. Multiple controller failures can lead to more significant TE performance degradation due to an increased number of offline flows, and the performance of the solutions becomes vital. As illustrated in the table, Ares ensures robust TE performance and dramatically outperforms the rest of the solutions.

#### 7.2.3. Efficiency of proposed Ares

We analyze the computation time for Ares and OPT-TPFCRFR in different scenarios and record the results in Table 4. On average, Ares only requires 2.53% and 2.07% of the computation time needed by OPT-TPFCRFR in the two scenarios mentioned above. As the network size increases and the failure scenario becomes more complex, the performance gap between OPT-TPFCRFR and Ares is expected to widen. Even though Ares has a slightly lower load balancing performance than OPT-TPFCRFR, it still proves to be a highly efficient solution with low computation complexity.

## 8. Related Work

**Improving TE performance for web services.** Handigol _et al._(Handigol et al., 2015) present Plug-n-Serve, a load-balancing system for web services hosted in enterprise and campus networks that uses OpenFlow to control the routing of HTTP requests. The system aims to minimize the response time by taking both the congestion of the network and the load on the servers into account, and also propose to dynamically adjust the allocation of requests based on an integrated optimization algorithm called LOBUS. QoS-RL (Wang et al., 2016), a reinforcement learning-based TE solution, is proposed to provide good quality of service and load balancing for different priority levels of traffic in WANs. QoS-RL uses destination-based forwarding entries to reduce management overhead and service disruption, and also leverages reinforcement learning to intelligently select and update a few entries to reroute high and low-priority traffic concerning different objectives. Wang _et al._(Wang et al., 2016) propose a joint optimization of TM measurement and TE for SDNs, considering the TCAM capacity and flow aggregation constraints. They formulate the joint optimization problem as a MILP model and propose two heuristic algorithms to design flow rules for traffic measurement and routing tasks. However, none of the above-mentioned solutions considers the impact of controller failures on TE performance and how to improve TE performance under controller failures further.

**Maintaining control resiliency in SD-WANs.** Ruchel _et al._(Ruchel et al., 2017) evaluate the robustness of two open-source distributed SDN controllers, ONOS (Bach et al., 2018) and ODL (Bach et al., 2018), in different failure scenarios in both data and control planes. This paper measures the performance of the controllers in terms of latency, throughput, consistency, and recovery time using various topologies and traffic types, and also discusses the strengths and weaknesses of each controller and provides suggestions for future improvements. SDN-ESRC (Wang et al., 2019), a secure and resilient control plane for SDN based on endogenous security, uses multiple heterogeneous controllers to detect and correct malicious control messages. It also designs a scheduling algorithm to select the optimal controller set for each flow and presents a security evaluation model based on the Markov chain to analyze the performance of the proposed scheme under different attack scenarios. He _et al._(He et al., 2018) propose a preventive priority setting model to balance the load among multiple controllers in SDNs. The model assigns a priority for each controller to become the primary controller of a switch, and automatically switches to the highest-priority available controller when a failure occurs. Nevertheless, all the above-mentioned solutions fail to consider improving TE performance, which means that they cannot provide decent network performance, especially for delay-sensitive web services.

## 9. Conclusion

In this paper, we propose Ares to promise predictable TE performance in SD-WANs during controller failures. Ares jointly considers the fine-grained flow-controller reassignment and flow rerouting in a single optimization problem and tries to minimize the MLU based on the given TMs. Extensive evaluation results show that not only our proposed TPFCRFR problem formulation exhibits comparable load balancing performance to optimal TE solution without controller failures but also brings significant improvements in load balancing performance with low computation time compared with existing solutions.

\begin{table}
\begin{tabular}{c||c||c} \hline \hline Situations & Conventional Active & Reconfigurable failures \\ \hline OPT-TPFCRFR & 100\% & 100\% \\ \hline
**Ares** & 2.53\% & 2.07\% \\ \hline \hline \end{tabular}
\end{table}
Table 4. Performance of average computation time to OPT-TPFCRFR. The lower, the better.

\begin{table}
\begin{tabular}{c c c} \hline \hline Situations & Conventional Active & Reconfigurable failures \\ \hline OSPF & 44.46\% & 44.46\% \\ \hline ECMP & 56.78\% & 56.78\% \\ \hline RetroFlow & 64.01\% & 63.70\% \\ \hline Matchmaker & 57.46\% & 50.49\% \\ \hline PMs & 60.97\% & 51.44\% \\ \hline
**Axes** & **87.82\%** & **87.23\%** \\ \hline \hline \end{tabular}
\end{table}
Table 3. Average PR Performance of Ares and existing solutions. The higher, the better.

## References

* (1)
* (2023) 2023. Gurobi Optimization. [http://www.gurobi.com](http://www.gurobi.com). Accessed on August 17, 2023.
* (2023) 2023. ONOS Controller. [https://onosproject.org](https://onosproject.org). Accessed on August 17, 2023.
* (2023) 2023. OpenDayLight Controller. [https://www.opendyslight.org](https://www.opendyslight.org). Accessed on August 17, 2023.
* (2023) 2023. PRRuntime: Specification version 1.3.0. [https://pt.org/pt-spec/pruntime/main/PRRuntime-Spec.html](https://pt.org/pt-spec/pruntime/main/PRRuntime-Spec.html). Accessed on August 17, 2023.
* (2024) Pat Boskett, Dan Daly, Glen Gibt, Martin Itzard, Nick McKeown, Jennifer Rexford, Cole Schelesinger, Dan Talayco, Amin Vahdat, George Varghese, et al. 2014. Pc-Programing protocol-independent packet compression. ACM SIGCOMM Computer Communication Review 44 (3), 087-05.
* (2025) Jan Chu and Chiu-Tua Lea. 2008. Optimal link weights for IP-based networks supporting hose-mod/VPRs. IEEE/ACM Transactions on Networking 17, 3 (3), 778-788.
* (2026) Tamal Das, Vignesh Sridharan, and Mohan Gurussmany. 2019. A survey on controller placement in SDN. _IEEE communications surveys & tutorials_ 22, 1 (2019), 472-503.
* (2027) Songshi Dou, Zelua Guo, and Yuanqing Xia. 2021. ProgrammabilityMedic: Predictable path programmability recovery under multiple controller failures in SP/SWs. In _2022 IEEE 41st International Conference on Distributed Computing Systems (ICDCS)_. IEEE, 461-471.
* (2028) Songshi Dou, Guechun Miao, Zelua Guo, Chao Yao, Weiran Wu, and Yuanqing Xia. 2021. Matchmaker: Maintaining network programmability for software-defined WANs under multiple controller failures. _Computer Networks_ 192 (2021), 18045.
* (2029) Kutati D, Ahsan Pervaz, Xin Yan, Aakanha Chowdhary, Qizheng Zhang, Henry Hoffmann, and Junchen Jiang. 2020. Server-driven video streaming for deep learning inference. In _Proceedings of the Annual conference of the ACM Special Interest Group on Data Communication on the applications, technologies, architectures, and protocols for computer computation_. 557-570.
* (2030) Zebun Cao, Songshi Dou, Wenchao Jiang, and Yuanqing Xia. 2023. Toward Improved Path Programming Recovery for Software-Defired WANs Under Multiple Controller Failures. _IEEE/ACM Transactions on Networking_ (2023).
* (2031) Zelua Guo, Wendt Feng, San Lin, Wenchao Jiang, Yang Xu, and Zili-Liang. 2019. RetroFlow: Mainization control resiliency and flow programability for software-defined WANs. In _Proceedings of the IEEE/ACM International Symposium on Quality of Service (IQNS)_. 1-10.
* (2032) Nikhil Handigol, Srinivasan Seetharaman, Mario Playlik, Nick McKeown, and Ramesh Johari. 2009. Phps-in-Serve Load-balancing web traffic using OpenFlow. _ACM Sigcomm_. 2, 5 (2009), 6.
* (2033) Fujim He and Enji Choi. 2023. Preventing Priority Testing against Multiple Controller Failures in Software Defined Networks. _IEEE Transactions on Parallel and Distributed Systems_ (2023).
* (203) Qiang He, Zequn Dong, Feifei Chen, Shuiguang Deng, Weifa Liang, and Yun Yang. 2022. Pyramid Enabling hierarchical neural networks with edge computing. In _Proceedings of the ACM Web Conference_. 2022, 1806-1870.
* (203) Randon Heller, Rob Sherwood, and Nick McKeown. 2012. The controller placement problem. _ACM SIGCOMM Computer Communication Review_ 42, 4 (2012), 473-478.
* (203) Chiu-Tao Hong, Srikanth Kandula, Rahul Mahajan, Ming Zhang, Vijay Gill, Mohan Nandri, and Roger Wattenhofer. 2013. Achieving high utilization with software: NAN. In _Proceedings of the ACM SIGCOMM 2013 Conference on SIGCOMM_. 15-26.
* (203) Chiu-Tao Hong, Subhasree Mandal, Mohammad Al-Fares, Min Zhu, Richard Alimi, Chandan Bhagat, Sourabh Jain, Jay Kaulani, Shuy Liang, Kirill Mendelev, et al. 2018. R4 and alter: managing hierarchy, partitioning, and asymmetry for availability and scale in google's software-defined WANs. In _Proceedings of the 2018 Conference of the ACM Special Interest Group on Data Communication_. 74-87.
* (204) Kevin Hsieh, Aaron Harlap, Nandia Vijaykumar, Dimitris Konnois, Gregory R Ganger, Philip B Gibbons, and Onur Mutlu. 2017. Gaia: (Geo-Distributed) machine learning approaching (LAN) speeds. In _14th USENIX Symposium on Networked Systems Design and Implementation (NSDI '17)_. 92-947.
* (204) Sunshant Jain, Alike Kumar, Subhaver Mandal, Joon Chen, Dao Pontovski, Arjun Singh, Subhaik Vemkula, Jim Passner, Junlan Zhou, Min Liu, Zito Li, Zito, Zito Experience with a globally-deployed software defined WAN. _ACM SIGCOMM Computer Communication Review_ 43, 4 (2013), 3-14.
* (204) Kalkan Kalkan, Lester Alday, Gulan Gier, and Anish Alagic. 2018. JRSS: Joint entropy-based DRDs defense scheme in SDN. _IEEE Journal on Selected Areas in Communications_ 16, 10 (2018), 2385-2372.
* (205) Umesh Krishnaswamy, Rachue Singh, Nikolaja Bjaerner, and Himanshu Raj. 2022. Decentralized cloud wide-area network traffic engineering with [BLASTSITED]. In _19th USENIX Symposium on Networked Systems Design and Implementation (NSDI '20)_. 235-338.
* (206) Parsecu Kumar, Yang Yuan, Chris Yu, Mate Foster, Robert Kleinberg, Petr Laupnikov, Chinn Lin Lim, and Robert Soule. 2018. {Semi-Oblivious} Traffic Engineering: The Road Net Taken. In _15th USENIX Symposium on Networked Systems Design and Implementation (NSDI '18)_. 157-170.
* (207) Alain Mendola, Jasone Astroga, Eduardo Jacob, and Marrii Higuero. 2016. A survey on the contributions of software-defined networking to traffic engineering. _IEEE Communications Surveys & Tutorials_ 19, 2 (2016), 918-953.
* (208) Debusa Mitra and K Ramakrishnan. 1999. A case study of multiservice, multi-entity traffic engineering design for data networks. In _Searchess Internconnection for Universal Services. Global Telecommunications Conference. GLOBECOM'99.(Cat. No. 9CTSP2015)_. Vol. 1. IEEE, 1077-1083.
* (209) John Moy. 1997. _OSEF system 2. Technical Report_.
* (210) Natakorn Promusova, Amin Ebrahammad, Disha Naboulsi, Somashyeh Kainpheli, Fanta Rejosani, Roch Gilho, Neel Crespi, and Omar Alfandi. 2020. A comprehensive survey of the tactile internet: State-of-the-art and extends directions. _IEEE Communications Surveys & Tutorials_ 23, 21 (2010), 472-523.
* (210) Harald Racic. 2008. Optimal hierarchical decompositions for congestion minimization in networks. In _Proceedings of the British and ACM symposium on Theory of computing_. 255-264.
* (211) Quan Ren, Zebun Gao, Jianguing Wu, Tao Hu, Luj Ye, Yuxing Hu, and Lei He. 2022. SDN-ESEC: A Secure and Resilient Control Plane for Software-Defired Networks. _IEEE Transactions on Network and Service Management_ 19, 3 (2022), 2366-2381.
* (201) Lucas V Ruchel, Rogiric C Turchetti, and Ekion T de Camargo. 2022. Evaluation of the robustness of SDN controllers ONOS and ODL. _Computer Networks_ 219 (2021), 104903.
* (202) Arjun Singh, Joon Ong, Amir Agarwal, Glen Anderson, Ashby Armatsaid, Roy Bannou, Sober Baring, Oscar Desi, Bob Felderman, Paulke Germann, et al. 2015. Jupiter rating: A decade of clos topologies and centralized control in google's datasheet network. _ACM SIGCOMM computer communication review_ 45, 4 (2015), 183-197.
* (2000) Dave Thaler and Clipong. 2000. _Multipath issues in unicast and multicast next-hop selection_. Technical Report.
* (2001) Anin Toothorchin, Monila Ghobadi, and Yashar Ganjabi. 2010. OpenTM: Traffic matrix estimator for OpenFlow networks. In _International Conference on Passive and Active Network Assessment_. Springer, 201-210.
* (2008) Stee Uhig, Bruno Quoti, Jean Leppre, and Simon Balon. 2006. Providing public intradomain traffic matrices to the research community. _ACM SIGCOMM Computer Communication Review_ 36, 1 (2008), 83-86.
* (2014) Nidei Lu Yan Atzheim, Christian Doerr, and Fernando A Knippers. 2014. OpenTM: Network monitoring in overflow software-defined networks. In _2014 IEEE Network Operations and Management Symposium (MOSS)_. IEEE, 1-8.
* (2008) Ning Wang, Ran Ho, George Pavlou, and Michael Howarth. 2008. An overview of routing optimization for internet traffic engineering. _IEEE Communications Surveys & Tutorials_ 1, 1 (2008), 36-36.
* (2019) Xing Wang, Q. Deng, Jing Ren, Mehdi Mahbouli, Sheng Wang, Shixhong Xu, and Chen-Ree Chuah. 2019. The joint optimization of online traffic matrix measurement and traffic engineering for software-defined networks. _IEEE/ACM transactions on networking_ 28, 1 (2019), 234-247.
* (2021) Zhaoshu Wang, Zhenyu Li, Guangming Liu, Yunfei Chen, Qinghua Wu, and Gang Chen. 2021. Examination of WAN traffic characteristics in a large-scale data center network. In _Proceedings of the 21st ACM Internet Measurement Conference_. 1-14.
* (2021) Wenfei Xia, Yonggang Wen, Chuan Heng Fuh, Dusit Niyato, and Haiyong Xie. 2021. A survey on software-defined networking. _IEEE Communications Surveys & Tutorials_ 17, 1 (2014), 27-51.
* (2021) An Xu, Xiaolong Wang, Wei Wang, and Sanghu Lu. 2021. Designing a dataset-resilient network with software defined networking. In _2014 IEEE 2nd International Symposium of Quality of Service (IWQS)_. IEEE, 135-140.
* (2021) Junjie Xie, Dele Guo, Xiaoduo Li, Yibeng Shen, and Xiaolong Jiang. 2018. Cutting long-tail latency of routing response in software defined networks. _IEEE Journal on Selected Areas in Communications_ 36, 3 (2018), 384-396.
* (2021) Zhang, Yong Cui, Baechun Li, Yadong Jin, and Yi Xu. 2019. Software-defined video area network (SD-WAN): Architecture, advances and opportunities. In _2020 28th International Conference on Computer Communication and Networks (ICCCN)_. IEEE, 1-9.
* (2021) Guang Yao, Jun Ji, and Liyi Guo. 2013. On the cascading failures of multi-controllers in software defined networks. In _2013 21st IEEE International Conference on Network Protocols (JCNP)_. IEEE, 1-2.
* (2021) Minghao Ye, Fang Hu, Jianqiie Zhang, Zebun Gao, and H Jonathan Chao. 2023. Reinforcement Learning-based Traffic Engineering for QoS Provisioning and Load Balancing. In _2025 IEEE/ACM 31st International Symposium on Quality of Service (IWQS)_. IEEE, 1-10.
* (2021) Junjie Zhang, Kang Xi, Ma Luo, and H Jonathan Chao. 2021. Local balancing for multiple traffic matrices using SDN hybrid routing. In _2021st IEEE 5th International Conference on High Performance Switching and Routing (QIFS)_. IEEE, 44-49.

## Appendix A Appendix

### Formulation of the MCF Problem

In an SD-WAN, there are a total of \(H\) switches and \(K\) links connecting these switches. It is important to ensure that the utilization of each link, denoted as \(\epsilon_{k}\) (\(k\in[1,K]\)), does not exceed its specified upper bound capacity, denoted as \(Cap_{k}\). The cost of flows is denoted as \(\mathcal{F}=\{f_{1},f_{2},...,f_{m},...,f_{M}\}\). Each flow \(f_{j}\) in the set \(\mathcal{F}\) has a pre-configured path-set consisting of \(L\) paths, denoted as \(\mathcal{P}_{j}=\{p^{1}_{j},p^{2}_{j^{\prime}},...,p^{1}_{j^{\prime}},...,p^{1 }_{j^{\prime}}\}\). The traffic demand for flow \(f_{j}\) is denoted as \(V_{j}\). We use \(\alpha^{l}_{k}\) to denote the relationship between links and paths. Additionally, for each path \(p^{l}_{j}\), the traffic demand routed on that particular path is represented by the binary variable \(z^{l}_{j}\). The MLU is denoted as \(u\). The objective of the optimization problem is to minimize the MLU (_i.e._, \(u\)) in order to achieve optimal network performance while meeting the traffic demands of all flows. Therefore, the MCF formulation can be presented as follows:

\[\begin{split}\min_{u,z}& u\\ \text{s.t.}&\sum_{j=1}^{M}z^{l}_{j}=1,\\ &\sum_{l=1}^{L}\sum_{j=1}^{M}z^{l}_{j}\lor V_{j}*\alpha^{l}_{k} \leq Cap_{k}*u,\\ & z^{l}_{j}\in\{0,1\},\forall j\in[1,M],\forall l\in[1,L],\end{split}\]

where \(\{y^{l}_{j}\}\) is a binary design variable and \(u\) is a continuous design variable, \(\{V_{j}\}\), \((Cap_{k})\), \(\alpha^{l}_{k}\) are given constants.

### Heuristic Solution to the MCF Formulation

The key idea of the heuristic algorithm to the MCF formulation is similar to the proposed Algorithm 1, which aims to select a path for each flow to forward on based on the probabilities obtained from the linear programming relaxation of problem (P-MCF). The details of the algorithm are summarized in Algorithm 2. The algorithm begins by initializing an empty set \(\mathcal{Z}\) (line 1). We first relax the binary variable \(z^{l}_{j}\) in problem (P-MCF) to continuous variables and obtain the linear programming relaxation solution \(Z^{*}\). We then sort the values in \(\widetilde{Z}^{*}\) in descending order to get vectors \(\widetilde{Z}\) (line 2). Sorting the values in \(\widetilde{Z}^{*}\) in descending order helps prioritize all the tests based on their probabilities. From lines 4 to 13, the algorithm tests all possible path selections by rounding the decimal values in \(\widetilde{Z}\) to configure proper selections. It finds corresponding flow and path IDs \(j_{0}\) from \(l_{0}\) (line 5) and checks if the flow \(f_{j_{0}}\) has not been selected yet. Then, the path selection will be confirmed in \(\mathcal{Z}\) and the selected flow \(f_{j_{0}}\) will be removed from the set \(\mathcal{F}\) (lines 7-8). If all flows have been selected, the algorithm will stop (lines 10-12). Finally, in line 14, the updated set \(\mathcal{Z}\) is returned.

```
Input :\(\mathcal{F}\); Output :\(\mathcal{Z}\);
1
2\(\mathcal{Z}=\emptyset\);
3 generate \(\widetilde{Z}=\{z_{t},t\in[1,M*K]\}\) by solving the linear programming relaxation of problem (P-MCF) and sorting the results in the descending order;
4
5// select path for each flow to forward on based on the descending order of their probabilities;
6
7for\(z_{t_{0}}\in\widetilde{Z}\)do
8 get flow and path IDs \(j_{0}\) and \(l_{0}\) from \(z_{t_{0}}\);
9if\(f_{j_{0}}\in\mathcal{F}\)then
10\(\mathcal{Z}\leftarrow\mathcal{Z}\cup(j_{0},l_{0})\);
11\(\mathcal{F}\leftarrow\mathcal{F}\setminus f_{j_{0}}\);
12
13 end if
14if\(\mathcal{F}^{\prime\prime}=\emptyset\)then
15 break;
16
17 end if
18
19 end if
20return\(\mathcal{Z}\);
```

**Algorithm 2** Heuristic Algorithm to the MCF Formulation

```
Input :\(\mathcal{F}\); Output :\(\mathcal{Z}\);
1
2\(\mathcal{Z}=\emptyset\);
3 generate \(\widetilde{Z}=\{z_{t},t\in[1,M*K]\}\) by solving the linear programming relaxation of problem (P-MCF) and sorting the results in the descending order;
4
5// select path for each flow to forward on based on the descending order of their probabilities;
6
7for\(z_{t_{0}}\in\widetilde{Z}\)do
8 get flow and path IDs \(j_{0}\) and \(l_{0}\) from \(z_{t_{0}}\);
9if\(f_{j_{0}}\in\mathcal{F}\)then
10\(\mathcal{Z}\leftarrow\mathcal{Z}\cup(j_{0},l_{0})\);
11\(\mathcal{F}\leftarrow\mathcal{F}\setminus f_{j_{0}}\);
12
13 end if
14if\(\mathcal{F}^{\prime\prime}=\emptyset\)then
15 break;
16
17 end if
18
19 end if
21return\(\mathcal{Z}\);
```

**Algorithm 3** Heuristic Algorithm to the MCF Formulation