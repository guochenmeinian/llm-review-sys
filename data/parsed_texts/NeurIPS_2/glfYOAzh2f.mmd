# Selective Generation for

Controllable Language Models

 Minjae Lee

GSAI

POSTECH

minjae.lee@postech.ac.kr &Kyungmin Kim

GSAI

POSTECH

kkm959595@postech.ac.kr &Taesoo Kim

SCS & SCP

GaTech

taesoo@gatech.edu &Sangdon Park

GSAI & CSE

POSTECH

sangdon@postech.ac.kr

Equal contribution

###### Abstract

Trustworthiness of generative language models (GLMs) is crucial in their deployment to critical decision making systems. Hence, certified risk control methods such as selective prediction and conformal prediction have been applied to mitigating the hallucination problem in various supervised downstream tasks. However, the lack of appropriate correctness metric hinders applying such principled methods to language generation tasks. In this paper, we circumvent this problem by leveraging the concept of _textual entailment_ to evaluate the correctness of the generated sequence, and propose two selective generation algorithms which control the false discovery rate with respect to the textual entailment relation (FDR-E) with a theoretical guarantee: \(\mathsf{SGen}^{\text{Sup}}\) and \(\mathsf{SGen}^{\mathsf{Semi}}\). \(\mathsf{SGen}^{\text{Sup}}\), a direct modification of the selective prediction, is a supervised learning algorithm which exploits entailment-labeled data, annotated by humans. Since human annotation is costly, we further propose a semi-supervised version, \(\mathsf{SGen}^{\mathsf{Semi}}\), which fully utilizes the unlabeled data by pseudo-labeling, leveraging an _entailment set function_ learned via conformal prediction. Furthermore, \(\mathsf{SGen}^{\mathsf{Semi}}\) enables to use more general class of selection functions, _neuro-selection functions_, and provides users with an optimal selection function class given multiple candidates. Finally, we demonstrate the efficacy of the \(\mathsf{SGen}\) family in achieving a desired FDR-E level with comparable selection efficiency to those from baselines on both open and closed source GLMs. Code and datasets are provided at [https://github.com/ml-postech/selective-generation](https://github.com/ml-postech/selective-generation).

## 1 Introduction

Generative language models (GLMs) [1, 2, 3, 4] have garnered significant attention for their ability to generate human-level language [5] primarily due to underlying transformer architectures [6]. However, GLMs raise concerns about generating hallucinated facts [7], which is an undesirable property when they are used as knowledge retrieval sources. This issue can be mitigated by fine-tuning with human feedback [7, 8], but it remains expensive in terms of training and labeling costs. Certified risk control methods such as selective prediction [9] and conformal prediction [10] are promising cost-efficient alternatives, which have been applied to the hallucination mitigation in various supervised downstream tasks [9, 10, 11, 12, 13, 14].

The main bottleneck in applying such certified methods to language generation tasks is that provided risk control guarantees require correctness labels during the learning process. Specifically, in classification, high-quality correctness labels can be directly acquired by comparing true and predicted labels using exact match (EM). However, this is not the case for language generation tasks, since multiple valid answers can exist for the same question. As correctness metrics such as EM and F1-score do not account for the multiple valid answers, directly applying them to language generation tasks results in a significant gap between the true and measured correctness, which we call the _metric misalignment_. Thus, a correctness evaluation metric that accounts for multiple answers is required.

In this paper, we resolve the metric misalignment problem by leveraging _textual entailment_ to evaluate the correctness of generated answers and define the false discovery rate with respect to the textual entailment relation (FDR-E). Given two ordered sequences, a premise and a hypothesis, we say that the premise entails the hypothesis if the hypothesis is true given the premise. Based on this notion of entailment, we propose two selective generation algorithms, \(\mathsf{SGen}^{\mathsf{Sup}}\) and \(\mathsf{SGen}^{\mathsf{Semi}}\), which are generalized versions of selective classification [9] to control the FDR-E by abstaining from returning an answer when a GLM is uncertain of its answer.

In particular, \(\mathsf{SGen}^{\mathsf{Sup}}\), a direct modification of [9], is a supervised selective generator learning algorithm which requires entailment labels. This necessitates human annotations on textual entailment, where a generated answer is the premise and a true answer is the hypothesis. As labeling is expensive and \(\mathsf{SGen}^{\mathsf{Sup}}\) solely relies on entailment-labeled data, we propose a semi-supervised method, \(\mathsf{SGen}^{\mathsf{Semi}}\), which enables the exploitation of entailment-unlabeled data in learning a selective generator by pseudo-labeling textual entailment using an _entailment set function_ learned via conformal prediction [10]. Based on an entailment classifier originally developed for the natural language inference problem [15, 16], the estimated entailment set function approximates a true entailment set function, which returns all entailed answers if a true answer is given as a hypothesis.

Additionally, \(\mathsf{SGen}^{\mathsf{Semi}}\) introduces the general class of selection functions for selective generation, called _neuro-selection functions_. In selective prediction, learning a selective predictor is equivalent to learning a selection function, which is an indicator function to decide whether to abstain from returning a prediction. The standard selective prediction algorithm [9] considers the class of single-threshold indicator functions using a pre-specified confidence-rate function. For the same risk level, the better the confidence-rate function quantifies the model's uncertainty, the less likely the selective predictor is to abstain from making a prediction. We refer to this as _selection efficiency_ henceforth. As appropriate confidence calibration for language generation remains challenging, optimizing a single-threshold indicator function with a poorly calibrated confidence-rate function leads to low selection efficiency. Instead, we generalize the selection function by using a multiple-threshold indicator function with trainable features. Furthermore, \(\mathsf{SGen}^{\mathsf{Semi}}\) provides a user with an optimal class of selection functions among possible candidates in terms of the FDR-E.

Finally, we empirically demonstrate the efficacy of \(\mathsf{SGen}^{\mathsf{Semi}}\) over open and closed source GLMs, where we consider \(\mathsf{SGen}^{\mathsf{Sup}}\) as one of our baselines as it is a direct modification of [9]. To validate

Figure 1: An overview and qualitative results of our method with GPT-3.5-Turbo. The crux is to learn an entailment-aware selective generator with an abstaining option that controls the rate of hallucination (in a false discovery rate) over generated sequences with a probabilistic guarantee.

our method and its theoretical guarantee, we create a new dataset on textual entailment using the Natural Questions (NQ) dataset [17] for each GLM. Given a question and answer pair, the textual entailment is labeled by letting a generated answer as a premise and the true answer in declarative form as a hypothesis. As communities lack human-annotated entailment-labeled data for language generation, we believe that our dataset contributes to the hallucination evaluation of GLMs. For both open and closed source GLMs, SGenSemi is effective in achieving a desired FDR-E level with better selection efficiency compared to baselines.

### Related Work

We introduce two main research directions to mitigate hallucination in GLMs.

**Heuristics for hallucination mitigation.** The hallucination in language generation usually refers to the situation where a GLM generates wrong answers with high confidence, which hinders the reliable deployment of GLMs. As fine-tuning methods are expensive, heuristics for hallucination mitigation without tuning have been proposed [18; 19]. Notably, [19] proposes a performant hallucination detection method, which quantifies the self-consistency among multiple generated answers for the same question using textual entailment models to detect the hallucination. However, these methods do not provide certified control over the occurrence of hallucinated contents.

**Certified methods for hallucination mitigation.** Conformal prediction outputs a prediction set that is guaranteed to contain a true label with high probability, where a provided coverage guarantee is model-agnostic under a mild assumption on a data [10]. Although this property enables the safe deployment of complex models and has made conformal prediction popular [10; 12; 13; 20; 21; 22], the constructed prediction sets in language generation are often less-informative due to an unbounded label space, which frequently renders the coverage guarantee ineffective [23; 24]. To restrict the prediction set to a moderate size, [23] constructs the prediction set over answers by sampling them sequentially, while still satisfying the coverage guarantee. Still, post-selection of answers from the prediction set is necessary for final decision making, which may result in the selection bias [25; 26]. [27; 28] decompose generated answers into alignment-labeled sub-claims and return a set of sub-claims that contains no contradiction with high probability via conformal prediction. Even though the post-selection is unnecessary, it requires expensive alignment labels for every sub-claim.

Unlike conformal prediction, selective prediction directly manages target risk at a desired level by introducing an abstaining option on unsure predictions. [9] proposes a selective prediction method mainly for classification, which learns a threshold-based selection function that controls the false discovery rate (FDR) to a desired level. [24] generalizes the selective prediction to language generation. However, their theoretical guarantee is not focused on the target risk to control, but on a consistency property of a surrogate loss function with respect to a true loss function in optimization process. [29], concurrently published with our paper, proposes a certified selective generation method for context-given language generation which controls the FDR. Unlike [9] which takes the number of selected samples as constraint in learning the selection function, [29] set the power as constraint. However, as [24] does, they require an additional calibration set for training an entailment scoring function. Importantly, while existing selective generation methods are supervised learning methods, we propose a semi-supervised learning algorithm that can fully leverage entailment-unlabeled data.

## 2 Background

While we consider general language generation tasks, we confine our scope to the open-ended question-answering task and define the notation accordingly for the sake of clarity and for maintaining consistency in descriptions on the experiment. Specifically, let \(\mathcal{W}\) denote a token space constructed using a tokenizer, such as Byte Pair Encoding [30], and let \(\mathcal{W}^{*}\) denote a token sequence space, defined as \(\mathcal{W}^{*}\coloneqq\cup_{i=0}^{\infty}\mathcal{W}^{i}\). Let \((\mathbf{x},\mathbf{y})\in\mathcal{X}\times\mathcal{Y}\) be a question and answer sequence pair, where \(\mathcal{X}\coloneqq\mathcal{W}^{*}\) and \(\mathcal{Y}\coloneqq\mathcal{W}^{*}\) refer to the token sequence spaces of questions and answers, respectively. We assume the answer sequence is in a declarative form. Finally, \(\mathbf{x}_{i:j}\) refers to the sub-sequence of \(\mathbf{x}\) from the \(i\)-th to the \(j\)-th token.

### Language Generation

Given a question as input, a GLM generates an answer through the sequential process called decoding, which we call language generation. Here, we consider the greedy decoding, a deterministic generation process described as follows. Let \(p_{M}:\mathcal{X}\times\mathcal{W}\rightarrow\mathbb{R}_{\geq 0}\) denote a GLM which returns a next-tokendistribution given the input sequence \(\mathbf{x}\), where \(\sum_{w\in\mathcal{Y}}p_{M}(w\mid\mathbf{x})=1\) for all \(\mathbf{x}\in\mathcal{X}\). A language generator \(G:\mathcal{X}\rightarrow\mathcal{Y}\) using greedy decoding sequentially generates tokens from the GLM as follows: \(\hat{\mathbf{y}}_{i}\coloneqq\arg\max_{w\in\mathcal{W}}\,\,p_{M}(w\mid(\mathbf{ x},\hat{\mathbf{y}}_{1:i-1}))\) for \(i\geq 2\) and \(\hat{\mathbf{y}}_{1}\coloneqq\arg\max_{w\in\mathcal{W}}\,p_{M}(w\mid\mathbf{x})\). The generator \(G\) returns a generated answer \(\hat{\mathbf{y}}\coloneqq G(\mathbf{x})\) and terminates the decoding process when the end-of-sequence (EOS) token is returned. Here, the conditional probability of the answer \(\hat{\mathbf{y}}\) is defined as \(f_{M}(\mathbf{x},\hat{\mathbf{y}})\coloneqq p_{M}(\hat{\mathbf{y}}_{1}\mid \mathbf{x})\prod_{i=2}^{|\mathcal{Y}|}p_{M}(\hat{\mathbf{y}}_{i}\mid(\mathbf{ x},\hat{\mathbf{y}}_{1:i-1}))\), commonly used as its uncertainty measure.

### Selective Prediction

Selective prediction refuses to make a prediction by returning "I don't know" (IDK) if the prediction is uncertain. In classification, the selective classifier \(\hat{S}\) consists of a pair of a classifier \(\hat{y}\) and a selection function \(\hat{s}\), and is defined as follows: \(\hat{S}(\mathbf{x})\coloneqq\begin{cases}G(\mathbf{x})&\text{if }\hat{s}( \mathbf{x})=1\\ \text{IDK}&\text{otherwise}\end{cases},\) where \(\hat{y}(\mathbf{x})\coloneqq\arg\max_{y\in\mathcal{Y}}\,f(\mathbf{x},y)\). Here, \(f(\mathbf{x},y)\) refers to an estimated likelihood of the given input \(\mathbf{x}\) for being a class \(y\), determined by an underlying classification model \(f\). Although the selection function can be of arbitrary form, the common choice is a single threshold indicator function using the maximum likelihood as the confidence-rate function, _i.e.,_\(\hat{s}(\mathbf{x})\coloneqq\mathbb{I}(f(\mathbf{x},\hat{y})\geq\tau)\). Here, the confidence-rate function is defined to quantify the uncertainty of the model's prediction. Under the independent and identically distributed (i.i.d.) assumption, [9] proposed the certified threshold learning algorithm which controls the false discovery rate (FDR) with respect to the EM metric with the PAC guarantee, where the FDR is defined as \(\mathcal{R}_{\text{EM}}(\hat{S})\coloneqq\mathbb{P}\left\{\hat{y}(\mathbf{x}) \neq y\mid\hat{S}(\mathbf{x})\neq\text{IDK}\right\}\). Since EM considers the answer \(\hat{y}(\mathbf{x})\) to be correct when it is exactly the same as the reference answer \(y\), it is an inappropriate correctness metric for language generation problems that can have multiple valid sequences for the same input. This results in learning a too conservative and vacuous selection function for language generation, which is empirically verified by our experiments. Thus, we leverage the textual entailment to evaluate the correctness of the generated sequence to alleviate the metric misalignment problem.

### Textual Entailment

Natural language inference (NLI), also denoted as recognizing textual entailment, predicts whether one sequence implies another. The former refers to a premise (\(\mathbf{p}\)), and the latter refers to a hypothesis (\(\mathbf{h}\)). Since the release of two large-scale benchmarks of ordered sequence pairs labeled with textual entailment [15; 16], a number of transformer-based entailment classifiers have been proposed and shown impressive results. Each pair is classified into one of three categories: _entailment_ if \(\mathbf{h}\) is true given \(\mathbf{p}\); _contradiction_ if \(\mathbf{h}\) is false given \(\mathbf{p}\); and _neutral_ otherwise. In this paper, we define the entailment scoring function as \(f_{E}(G(\mathbf{x}),\mathbf{y})\coloneqq 1-p_{E}(\textit{contradict}\mid \mathbf{p}=G(\mathbf{x}),\mathbf{h}=\mathbf{y})\) to estimate and pseudo-label the correctness of \(G(\mathbf{x})\), where \(p_{E}(\textit{contradict}\mid\mathbf{p}=G(\mathbf{x}),\mathbf{h}=\mathbf{y})\) is the likelihood that \(G(\mathbf{x})\) contradicts \(\mathbf{y}\). While pseudo-labeling enables the full exploitation of unlabeled data to learn a selection function, controlling the mislabeling error remains as a challenge.

### Conformal Prediction

Conformal prediction [10] outputs a prediction set to quantify the uncertainty of a given model with a model-agnostic correctness guarantee under minimal assumptions on data generating process. Specifically, under the i.i.d. assumption, PAC conformal prediction [11] incorporates the interpretation of tolerance regions [31] and training-conditional inductive conformal prediction [20] through the lens of PAC learning theory [32]. In this paper, we adopt the PAC prediction set learning algorithm to control the rate of mislabeling error in pseudo-labeled samples used to learn a selection function for selective generation. See Section A.1 for detailed discussion on conformal prediction.

**Scalar-parameterized Conformal Set.** In this paper, we consider a conformal set \(C:\mathcal{X}\to 2^{\mathcal{Y}}\) parameterized by a scalar [11; 33] as \(C(\mathbf{x})\coloneqq\left\{y\in\mathcal{Y}\,\middle|\,f(\mathbf{x},y)\geq \tau\right\},\) where \(\tau\in\mathcal{H}\) is a scalar parameter to learn, \(\mathcal{H}\) is a hypothesis space (_e.g.,_\(\mathcal{H}\) a finely discretized non-negative real numbers), and \(f:\mathcal{X}\times\mathcal{Y}\rightarrow\mathbb{R}_{\geq 0}\) is called a _scoring function_. The scoring function corresponds to a target model whose uncertainty is to be quantified, where the softmax output is a common choice in classification. Specifically, \(f(\mathbf{x},y)\) measures the likelihood of \(y\) as a response given \(\mathbf{x}\) as input.

**PAC Guarantee.** The PAC prediction set learning algorithm outputs a conformal set \(\hat{C}\) which upper bounds a miscoverage rate \(\mathcal{R}_{\text{MC}}(\hat{C})\coloneqq\mathbb{P}\left\{y\notin\hat{C}( \mathbf{x})\right\}\) to a desired level \(\varepsilon\in(0,1)\), where the miscoverage rate can be generalized to risk \(\mathcal{R}_{01}(\hat{C})\coloneqq\mathbb{E}\{\ell_{01}(\hat{C},\mathbf{x},y )\},\) on any indicator losses that are monotonic with respect to \(\tau\). The algorithm is _probably approximately correct_ (PAC) in the sense that it provides a calibration data-conditional guarantee at every risk and confidence level. Specifically, it controls the risk to a desired level irrespective of which calibration data is used to learn \(\hat{C}\) with a desired confidence \(\delta\in(0,1)\) as follows: \(\mathbb{P}\left\{\mathcal{R}_{01}(\hat{C})\leq\varepsilon\right\}\geq 1-\delta\), where the probability is taken over the calibration set \(\mathbf{Z}\sim\mathcal{D}^{n}\) to learn the conformal set. In this paper, we leverage the PAC conformal set for a pseudo-labeling function such that the guarantee on the labeling quality provides the overall PAC guarantee in semi-supervised selective generator learning algorithm.

**Algorithm.** The PAC conformal set learning algorithm \(\mathcal{A}_{\text{Binom}}:(\mathcal{X}\times\mathcal{Y})^{*}\rightarrow\mathcal{H}\)[11; 20; 34] returns the conformal set parameter \(\hat{\tau}\), where \(\mathcal{H}\) is a finely-discretized \(\mathbb{R}_{\geq 0}\). Specifically, the algorithm returns \(\hat{\tau}=\max_{\tau\in\mathcal{H}}~{}\tau\) subject to \(U_{\text{Binom}}(k_{\tau};n,\delta)\leq\varepsilon\), where \(k_{\tau}:=\sum_{i=1}^{n}\ell_{01}(\hat{C},\mathbf{x}_{i},y_{i})\). Letting \(F(k;n,\theta)\) be a cumulative distribution function of a binomial distribution with \(n\) trials and success probability \(\theta\), \(U_{\text{Binom}}(k;n,\delta)\coloneqq\inf\left\{\theta\in[0,1]~{}|~{}F(k;n, \theta)\leq\delta\right\}\cup\{1\}\) is an upper binomial tail bound that satisfies \(\mathbb{P}\left\{\mathcal{R}_{01}(\hat{C})\leq U_{\text{Binom}}(k_{\tau};n, \delta)\right\}\geq 1-\delta\), where \(\delta\) is the desired confidence. Note that we similarly denote a lower binomial tail bound by \(L_{\text{Binom}}\). If optimization in the algorithm \(\mathcal{A}_{\text{Binom}}\) is infeasible, the algorithm returns \(\hat{\tau}=0\), a vacuous conformal set. Thus, the algorithm is PAC, and see Section A.1 for proof.

### Calibration

In classification, calibration aims to adjust the classifier's maximum likelihood response, or confidence, to be correct. We say the classifier response \(f:\mathcal{X}\times\mathcal{Y}\rightarrow\mathbb{R}_{\geq 0}\) is _perfectly calibrated_ with respect to a distribution \(\mathcal{D}\) over \(\mathcal{X}\times\mathcal{Y}\) and a classifier \(\hat{y}\) if \(\mathbb{P}\left\{\mathbf{y}=\hat{y}(\mathbf{x})~{}|~{}f(\mathbf{x},\hat{y}( \mathbf{x}))=t\right\}=t\) for all \(t\in[0,1]\)[35; 36]. Calibration aims to find the classifier response such that it is perfectly calibrated asymptotically. In this paper, we make an interesting connection between calibration and selective generation. In particular, given the definition of the perfect calibration for a language scoring function \(f_{M}\), we formally provide a sufficient condition for a selective generator to control the FDR with respect to the textual entailment relation at _any_ desired risk level.

## 3 Problem: Selective Generation

Let \(\mathbf{x}\in\mathcal{X}\) be a question and \(\mathbf{y}\in\mathcal{Y}\) be an answer, assuming that each question has a desired answer. Here, we assume \((\mathbf{x},\mathbf{y})\mathop{\sim}\mathcal{D}^{\prime}\), where \(\mathcal{D}^{\prime}\) is a data generating process of question-answering pairs. Then, given a generator \(G:\mathcal{X}\rightarrow\mathcal{Y}\), we consider a _selective generator_\(\hat{S}:\mathcal{X}\rightarrow\mathcal{Y}\cup\{\texttt{IDK}\}\) which refuses to return \(G(\mathbf{x})\) if a selection function \(\hat{s}(\mathbf{x},G(\mathbf{x}))\in\{0,1\}\) deems uncertain as follows:

\[\hat{S}(\mathbf{x})\coloneqq\begin{cases}G(\mathbf{x})&\text{if }\hat{s}( \mathbf{x},G(\mathbf{x}))=1\\ \texttt{IDK}&\text{otherwise.}\end{cases}.\]

Our main goal is to learn a selective generator \(\hat{S}\) to control a generalized false discovery rate (FDR) with respect to a relation \(R\) as

\[\mathcal{R}_{R}(\hat{S})\coloneqq\mathbb{P}\left\{(G(\mathbf{x}),\mathbf{y}) \notin R~{}\Big{|}~{}\hat{S}(\mathbf{x})\neq\texttt{IDK}\right\}. \tag{1}\]

Here, the probability is taken over examples \((\mathbf{x},\mathbf{y},e,v)\), where \(e\coloneqq\mathbb{1}\left((G(\mathbf{x}),\mathbf{y})\in R\right)\) is an additional label to be annotated due to unknown \(R\) and \(v\in\{0,1\}\) is a visibility flag of \(e\) for semi-supervised learning. For the data generation of \((\mathbf{x},\mathbf{y},e,v)\), we assume that a label \(e\) is observed with an unknown success probability of \(p_{v}\), independent of the generative process of \((\mathbf{x},\mathbf{y},e)\), _i.e.,_\((\mathbf{x},\mathbf{y},e,v)\sim\mathcal{D}\coloneqq\mathcal{D}^{\prime}\cdot \mathcal{V}\), where \(\mathcal{D}^{\prime}\) is a distribution over \(\mathcal{X}\times\mathcal{Y}\times\{0,1\}\) and \(\mathcal{V}\coloneqq\text{Bernoulli}(p_{v})\). Note that the definition of \(e\), \(\mathcal{D}^{\prime}\) varies by generator \(G\) even with the same data generating distribution of \((\mathbf{x},\mathbf{y})\). In this paper, we design a learning algorithm \(\mathcal{A}\) that returns a selective generator \(\hat{S}\) to control the generalized FDR with respect to \(R\) within a desired level \(\varepsilon\in(0,1)\) with probability at least \(1-\delta\in(0,1)\), _i.e.,_\(\mathbb{P}\left\{\mathcal{R}_{R}(\mathcal{A}(\mathbf{Z}))\leq\varepsilon\right\} \geq 1-\delta\). Here, the probability is taken over a calibration set \(\mathbf{Z}\sim\mathcal{D}^{n}\). This guarantee is called a probably approximately correct (PAC) guarantee [32]. Among selective generators that satisfies the PAC guarantee, we choose one that minimizes the ratio of IDK-answers with the highest _selection efficiency_. The main challenge is to find a sample and selection efficient PAC algorithm for any \(\varepsilon\) and \(\delta\) along with designing a relation \(R\) for structured labels, as in question-answering. Frequently, we may not obtain a PAC algorithm for any \(\varepsilon\), so in this paper, we use a relaxed notion of _controllable_ instead of _correct_ if the algorithm provides minimum achievable risk beoyond a given \(\varepsilon\).

Semi-Supervised Learning for Controllable Selective-Generation

In this paper, we leverage the textual entailment as the evaluation metric in language generation to consider multiple valid answers in a principled way, and propose two selective generator learning algorithms which control FDR with respect to the textual entailment: \(\mathsf{SGen}^{\mathsf{Sup}}\) and \(\mathsf{SGen}^{\mathsf{Semi}}\).

### False Discovery Rate via Textual Entailment (FDR-E)

A textual entailment relation \(R_{E}\) is an ordered subset of \(\mathcal{Y}\times\mathcal{Y}\) where \((\mathbf{y}^{\prime},\mathbf{y})\in R_{E}\) if \(\mathbf{y}^{\prime}\) entails \(\mathbf{y}\). In question-answering as an example, the generated answer \(G(\mathbf{x})\) is correct if the reference answer \(\mathbf{y}\) is a logical consequence of \(G(\mathbf{x})\). In other words, \(G(\mathbf{x})\) is valid if \(G(\mathbf{x})\in E_{\text{true}}(\mathbf{y})\), where the true entailment set function \(E_{\text{true}}:\mathcal{Y}\to 2^{\mathcal{Y}}\) is defined as follows: \(E_{\text{true}}(\mathbf{y})\coloneqq\{\mathbf{y}^{\prime}\in\mathcal{Y}\mid( \mathbf{y}^{\prime},\mathbf{y})\in R_{E}\}\). Then, an FDR with respect to the entailment relation \(R_{E}\) (FDR-E) that we aim to control is as follows:

\[\mathcal{R}_{R_{E}}(\hat{S})\coloneqq\mathbb{P}\left\{G(\mathbf{x})\notin E_{ \text{true}}(\mathbf{y})\mid\hat{S}(\mathbf{x})\neq\mathtt{IDK}\right\},\]

where the probability is taken over labeled examples, _i.e.,_\((\mathbf{x},\mathbf{y},e)\sim\mathcal{D}\). Here, the label \(e\) is specifically called an entailment label, _i.e.,_\(e\coloneqq G(\mathbf{x})\in E_{\text{true}}(\mathbf{y})\). Then, for any \(G\), \(\mathcal{D}\), \(\mathcal{V}\), and \(\hat{S}\), the FDR-E can be decomposed as follows:

\[\underbrace{\mathbb{P}_{\mathcal{D}_{\hat{S}}}\left\{G(\mathbf{x})\notin E_{ \text{true}}(\mathbf{y})\right\}}_{(\text{A})}=\underbrace{\mathbb{P}_{\mathcal{ D}_{\hat{S}}}\left\{v=1\right\}}_{(\text{B})}\underbrace{\mathbb{P}_{\mathcal{D}_{ \hat{S}}}\left\{e=0\right\}}_{(\text{C})}+\underbrace{\mathbb{P}_{\mathcal{D}_{ \hat{S}}}\left\{v=0\right\}}_{(\text{D})}\underbrace{\mathbb{P}_{\mathcal{D}_{ \hat{S}}}\left\{e=0\right\}}_{(\text{E})}, \tag{2}\]

where \(\mathbb{P}_{\mathcal{D}_{\hat{S}}}\left\{\cdot\right\}\coloneqq\mathbb{P}\left\{ \cdot\mid\hat{S}(\mathbf{x})\neq\mathtt{IDK}\right\}\). Note that as \((\mathbf{x},\mathbf{y},e)\) and \(v\) are independent, (A), (C), and (E) in (2) are of the same quantity, which is the target risk that we aim to find an upper bound.

### FDR-E Bound for Supervised Learning

We first propose the supervised learning algorithm \(\mathsf{SGen}^{\mathsf{Sup}}\) (Algorithm 8), a direct modification of [9] to language generation tasks. In particular, \(\mathsf{SGen}^{\mathsf{Sup}}\) is a supervised method in the sense that it solely exploits labeled examples \(\mathbf{Z}_{E}\coloneqq\{(\mathbf{x},\mathbf{y},e)\mid(\mathbf{x},\mathbf{y}, e,v)\in\mathbf{Z}\wedge v=1\}\) to learn a selective generator that controls the upper bound (C) in (2). Note that for supervised learning, we assume that (B) in (2) is always 1, so we only consider the the upper bound (C) via the binomial tail bound as [9].

### FDR-E Bound for Semi-Supervised Learning

As \(\mathsf{SGen}^{\mathsf{Sup}}\) requires human annotations for entailment labels and makes no use of abundant unlabeled examples \(\mathbf{Z}_{U}\coloneqq\{(\mathbf{x},\mathbf{y})\mid(\mathbf{x},\mathbf{y}, e,v)\in\mathbf{Z}\wedge v=0\}\), we further propose a novel semi-supervised learning algorithm \(\mathsf{SGen}^{\mathsf{Semi}}\) (Algorithm 5), which fully exploits both \(\mathbf{Z}_{E}\) and \(\mathbf{Z}_{U}\) while controlling the FDR-E in (2). In particular, we (1) estimate a true entailment set \(E_{\text{true}}\) via conformal prediction with labeled examples \(\mathbf{Z}_{E}\) and then (2) use the estimated entailment set \(\hat{E}\) to annotate pseudo-labels on \(\mathbf{Z}_{U}\). Finally, we (3) use both labeled and pseudo-labeled examples to learn a selective generator. Interestingly, this heuristic-looking algorithm could be a rigorous algorithm that controls the FDR-E of a selective generator, which will be described in the following sections.

#### 4.3.1 FDR-E Decomposition

\(\mathsf{SGen}^{\mathsf{Semi}}\) leverages unlabeled examples by estimating an entailment set as a pseudo-labeling function. However, the estimation error introduces wrong pseudo-labels. Here, we consider a rigorous way to derive the FDR-E upper bound by controlling the estimation error of the pseudo-labeling function. In particular, two different types of estimation errors of an estimated entailment set \(\hat{E}\) are illustrated in Figure 2, _i.e.,_ a false negative entailment rate (FNER) and a false entailment rate (FER). This results in the following decomposition.

**Lemma 1**.: _(E) in (2) is decomposed as follows:_

\[\underbrace{\mathbb{P}_{\mathcal{D}_{\hat{S}}}\left\{e=0\right\}}_{(E)}= \underbrace{\mathbb{P}_{\mathcal{D}_{\hat{S}}}\left\{e=0,\hat{e}=1\right\}}_ {\text{FER}}-\underbrace{\mathbb{P}_{\mathcal{D}_{\hat{S}}}\left\{e=1,\hat{e}= 0\right\}}_{\text{FNER}}+\underbrace{\mathbb{P}_{\mathcal{D}_{\hat{S}}} \left\{\hat{e}=0\right\}}_{\text{NER}}. \tag{3}\]Here, the first two terms are related to the entailment label estimation error and the last term is the approximate FDR-E using pseudo-labels. As three terms are inter-related, we choose to control the FER term to control (E) in (2) via conformal prediction in the following section.

#### 4.3.2 Pseudo-labeling via Conformalized Entailment Set Learning

\(\mathsf{SGen}^{\mathsf{Semi}}\) leverages the PAC conformal prediction for the entailment label estimation to control the mislabeling error. Specifically, we estimate the true entailment set function \(E_{\mathsf{true}}\) via an estimated entailment set \(\hat{E}\) using \(\mathbf{Z}_{E}\), where we use the entailment scoring function \(f_{E}\) as a scoring function, _i.e.,_\(\hat{E}(\mathbf{y})\coloneqq\{\mathbf{y}^{\prime}\in\mathcal{Y}\mid f_{E}( \mathbf{y}^{\prime},\mathbf{y})\geq\tau_{E}\}\). Here, the corresponding loss \(\ell(\hat{E},\mathbf{x},\mathbf{y},e)\coloneqq\mathbb{1}\left(e=0\wedge G( \mathbf{x})\in\hat{E}(\mathbf{y})\right)\) is a monotonically non-increasing function with respect to \(\tau_{E}\), so we can use the PAC conformal set learning algorithm. Given a desired risk \(\varepsilon_{E}\) and confidence \(\delta_{E}\) level, the corresponding algorithm \(\mathcal{A}_{\text{FER}}\) (_i.e.,_ Algorithm 1) returns the estimated entailment set function \(\hat{E}\) which controls the _false entailment rate_ (FER) of pseudo-labeled examples \(\mathcal{R}_{\text{FER}}(\hat{E})\coloneqq\mathbb{P}_{\mathcal{D}_{\hat{S}}} \{e=0\wedge G(\mathbf{x})\in\hat{E}(\mathbf{y})\}\) with the following PAC guarantee, where the probability is taken over training examples from \(\mathcal{D}_{\hat{S}}\).

\[\mathbb{P}\left\{\mathcal{R}_{\text{FER}}(\hat{E})\leq\varepsilon_{E}\right\} \geq 1-\delta_{E}. \tag{4}\]

#### 4.3.3 FDR-E Bound

We then bound the FDR-E for semi-supervised learning, _i.e.,_ (E) in (2), via the PAC guarantee by the conformal set learning on \(\mathbf{Z}_{E}\) and the binomial tail bound on \(\mathbf{Z}_{E}\) and \(\mathbf{Z}_{U}\). In particular, the FER is upper-bounded by \(\varepsilon_{E}\), the FNER is lower-bounded by the binomial tail bound using \(\mathbf{Z}_{E}\), and NER is upper-bounded by the binomial tail bound using \(\mathbf{Z}_{U}\). These bounds hold with high probability, and are therefore combined via a union bound, as in the following lemma. See Appendix G for a proof.

**Lemma 2**.: _Let \(\hat{\mathbf{Z}}_{E}\coloneqq\{(\mathbf{x},\mathbf{y},e)\in\mathbf{Z}_{E}\mid \hat{S}(\mathbf{x})\neq\texttt{IDK}\}\) and \(\hat{\mathbf{Z}}_{U}\coloneqq\{(\mathbf{x},\mathbf{y})\in\texttt{Z}_{U}\mid \hat{S}(\mathbf{x})\neq\texttt{IDK}\}\). For any \(G\), \(\mathcal{D}\), \(\mathcal{V}\), and \(\hat{S}\), if \(\hat{E}\coloneqq\mathcal{A}_{\text{FER}}(\hat{\mathbf{Z}}_{E})\) satisfies \(\mathbb{P}_{\hat{\mathbf{Z}}_{E}}\{\mathcal{R}_{\text{FER}}(\hat{E})\leq \varepsilon_{E}\}\geq 1-\delta^{\prime}_{E}/2\), we have_

\[\mathbb{P}_{\mathcal{D}}\{e=0\}\leq\varepsilon_{E}-L_{\text{Binom}}(\hat{k};| \hat{\mathbf{Z}}_{E}|,\delta^{\prime}_{E}/2)+U_{\text{Binom}}(\hat{l};|\hat{ \mathbf{Z}}_{U}|,\delta^{\prime}_{S})\eqqcolon U_{\text{SSL}} \tag{5}\]

_with probability at least \(1-\delta^{\prime}_{E}-\delta^{\prime}_{S}\), where the probability is taken over \(\mathbf{Z}\). Here, \(\hat{k}\coloneqq\sum_{(\mathbf{x},\mathbf{y},e)\in\hat{\mathbf{Z}}_{E}}\mathbb{ 1}(e=1\wedge G(\mathbf{x})\notin\hat{E}(\mathbf{y}))\) and \(\hat{l}\coloneqq\sum_{(\mathbf{x},\mathbf{y})\in\hat{\mathbf{Z}}_{U}}\mathbb{ 1}(G(\mathbf{x})\notin\hat{E}(\mathbf{y}))\)._

Notably, each of three bounds holds over a conditional distribution \(\mathcal{D}_{\hat{S}}\), but Lemma 2 relaxes this to an unconditional distribution \(\mathcal{D}\) for our final FDR-E guarantee.

**Optimizing the FDR-E Bound (5).** Lemma 2 introduces a hyper-parameter \(\varepsilon_{E}\), which controls a trade-off between the FER and other terms. To find a best trade-off, we optimize \(\varepsilon_{E}\) to minimize the upper bound (5) among \(Q\) candidates of \(\varepsilon_{E}\) via \(\mathcal{A}_{U_{\text{SSL}}\text{-Opt}}\), described in Algorithm 3. This optimization algorithm can find a tighter FDR-E bound, as in the following lemma. See Appendix H for a proof.

**Lemma 3**.: _Let \(U_{\text{SSL}}\) be as in (5) and \(\mathcal{Q}\) be the \(Q\) candidates of \(\varepsilon_{E}\). Then, we have_

\[\mathbb{P}_{\mathcal{D}}\{e=0\}\leq U_{\text{SSL}}^{\text{OPT}}\coloneqq\min_ {\varepsilon_{E}\in\mathcal{Q}}U_{\text{SSL}} \tag{6}\]

_with probability at least \(1-\delta^{\prime}_{E}/Q-\delta^{\prime}_{S}/Q\), where the probability is taken over \(\mathbf{Z}\)._

Note that for semi-supervised learning, the upper bound of (B), (C), (D), and (E) in (2) should be provided. The upper bound of (E) is provided in (5), which we denote by \(U_{\text{SSL}}\). The upper bound of (B), (C), and (D) are denoted by \(w_{\text{SL}},U_{\text{SL}}\), and \(w_{\text{SSL}}\), respectively, each of which is computed by the binomial tail bound. See Algorithm 4 and the proof of Theorem 1 for details.

```
1:Input:\(\mathbf{x}\), \(\mathbf{y}\), \(\mathbf{z}\), \(\mathbf{z}^{\prime}

score, _i.e.,_\(f_{M_{2}}(\mathbf{x},G(\mathbf{x}))\coloneqq\frac{1}{K}\sum_{k=1}^{K}f_{E}(\tilde{ \mathbf{y}}_{k},G(\mathbf{x}))\), where \(\tilde{\mathbf{y}}_{k}\) are generated answers with the same question \(\mathbf{x}\) but different random seeds. It is empirically shown that the self-consistency score properly quantifies uncertainty when a language model is uncertain of an answer [19]. The importance of score calibration with respect to the true entailment relation is demonstrated in Lemma 4, which provides the sufficient condition for the selective generation algorithm using the single-threshold indicator function (Algorithm 5) to control the FDR-E at _any_ level. See Appendix J for a proof.

**Lemma 4**.: _If we have access to \(E_{\text{true}}\) and \(f_{M}\) is perfectly calibrated with respect to \(E_{\text{true}}\), the FDR-E is monotonically non-increasing in \(\tau_{S}\)._

However, as [37] points out, calibrating the language scoring function remains an uneasy task, os it is still an active research area. Therefore, we propose a general class of selection functions, _neuro-selection functions_, which is the multiple-threshold indicator function using possibly learnable feature map \(\Phi:\mathbf{x}\mapsto\mathbb{R}^{v}\) as follows: \(\hat{s}(\mathbf{x};\Phi,\mathbf{W},\mathbf{b})\coloneqq\wedge_{i=1}^{u}( \mathbf{W}\Phi(\mathbf{x}))_{i}+\mathbf{b}_{i}\geq 0\), where \(\mathbf{W}\in\mathbb{R}^{u\times v}\) and \(\mathbf{b}\in\mathbb{R}^{u\times 1}\) are linear proejection and bias terms, respectively. In this paper, we only consider two specific sub-classes of neuro-selection functions, where the former reduces to learning the single-threshold selection function using a scoring function (Algorithm 5) and the latter reduces to learning the bi-threshold selection function using two scoring functions (Algorithm 6). Only the bias term \(\mathbf{b}\) is the learnable parameter for both algorithms, where the others set as hyperparameters. Specifically, \(\mathbf{W}=\mathbf{I}_{1}\), \(\Phi_{1}(\mathbf{x})=[f_{M}(\mathbf{x},G(\mathbf{x}))]\), and \(\mathbf{b}=-\tau_{S}\) for Algorithm 5, while \(\mathbf{W}=\mathbf{I}_{2}\), \(\Phi_{2}(\mathbf{x})=[f_{M_{1}}(\mathbf{x},G(\mathbf{x}))\ f_{M_{2}}(\mathbf{x },G(\mathbf{x}))]^{T}\), and \(\mathbf{b}=-[\tau_{S,1},\tau_{S,2}]^{T}\) for Algorithm 6 if two promising scoring functions exist. Here, developing a selection function learning algorithm where \(\mathbf{W}\) and \(\Phi(\cdot)\) are also fully learning parameters is left as future work. In the following section, we introduce our algorithm that chooses the optimal combination of scoring functions via neuro-selection functions.

### Semi-Supervised Selective Generator Learning Algorithm with Neuro-Selection

\(\mathsf{SGen}^{\mathsf{Semi}}\) is a semi-supervised learning algorithm for certified selective generation, which fully exploits unlabeled data in learning a selection function via certified pseudo-labeling and uses a neuro-selection function for choosing an optimal combination of scoring functions. In particular, \(\mathsf{SGen}^{\mathsf{Semi}}\) solves the following optimization problem over selective generators \(\mathcal{H}\) such that \(\hat{S}\) closely satisfies the equality in the constraint, as described in Algorithm 7:

\[\mathcal{A}_{\mathsf{SGen}^{\mathsf{Semi}}}:\quad\operatorname{ find}_{\hat{S}\in\mathcal{H}}\hat{S}\quad\text{subj. to}\quad w_{\text{SL}}U_{\text{SL}}+w_{\text{SSL}}U_{\text{SSL}}^{ \text{OPT}}\leq\varepsilon_{S}, \tag{7}\]

Here, \(\hat{S}\in\mathcal{H}\) has a selection function \(\hat{s}(\mathbf{x};\Phi_{2}(\mathbf{x}),\mathsf{diag}(\mathbf{w}),\mathbf{b})\), where \(\mathbf{w}\in\{[1,0]^{T},[0,1]^{T},[1,1]^{T}\}\) and \(\mathbf{b}\in\mathbb{R}^{2}_{\leq 0}\). Note that \(\mathsf{SGen}^{\mathsf{Semi}}\) returns an additional term \(\hat{U}\), which is the FDR-E bound given the selective generator \(\hat{S}\) (_i.e.,_ Algorithm 4) and informs the infeasibility of the optimization. The proposed Algorithm 7 satisfies the following controllability guarantee. See Appendix I for a proof.

**Theorem 1**.: \(\mathcal{A}_{\mathsf{SGen}^{\mathsf{Semi}}}\) _satisfies the following controllable guarantee on the FDR-E, i.e.,_

\[\mathbb{P}\left\{\mathbb{P}\left\{G(\mathbf{x})\notin E_{\text{true}}(\mathbf{ y})\mid\hat{S}(\mathbf{x})\neq\operatorname{\mathsf{IDK}}\right\}\leq\hat{U} \right\}\geq 1-\delta, \tag{8}\]

where the inner and outer probabilities are taken over \((\mathbf{x},\mathbf{y},e,v)\sim\mathcal{D}\) and \(\mathbf{Z}\sim\mathcal{D}^{n}\), respectively, and \((\hat{S},\hat{U})\coloneqq\mathcal{A}_{\mathsf{SGen}^{\mathsf{Semi}}}( \mathbf{Z})\). Here, \(\delta\coloneqq\delta_{W}+\delta_{S}+\delta_{E}\) is a desired confidence level, where \(\delta_{W}\) is for the upper bounds on \(w_{\text{SL}}\) and \(w_{\text{SSL}}\), \(\delta_{S}\) is for (C) in (2) and the NER, and \(\delta_{E}\) is for the FER and FNER.

Here, \(\mathcal{A}_{\mathsf{SGen}^{\mathsf{Semi}}}\) is _controllable_ in the sense that it upper-bounds the FDR-E of a learned selective generator to a desired level \(\varepsilon_{S}\) or at least to a minimum achievable level \(\hat{U}\) with confidence \(\delta\).

## 5 Experiments

We demonstrate the efficacy of our methods in controlling the FDR-E on pre-trained GLMs under various setups. We use two GLMs, GPT-3.5-Turbo and Alpaca-7B, alongside the Natural Questions (NQ) dataset to annotate entailment labels for question-answer pairs. Details on model configurations, datasets, and additional experimental results can be found in Section A.3 and Appendix K.

**Methods.** We consider two heuristic semi-supervised algorithms, \(\mathsf{SGen}^{\mathsf{H-Semi}}_{\mathsf{PL}}\) and \(\mathsf{SGen}^{\mathsf{H-Semi}}_{\mathsf{PL}}\) (Algorithm 9) and an unsupervised learning algorithm [9]\(\mathsf{SGen}_{\mathsf{EM}}\) (Algorithm 10) as baselines to show the efficacy of our certified semi-supervised method \(\mathsf{SGen}^{\mathsf{Semi}}\) (Algorithm 7). \(\mathsf{SGen}^{\mathsf{H-Semi}}_{\mathsf{PL}}\) and \(\mathsf{SGen}^{\mathsf{H-Semi}}_{\mathsf{PL}}\) exploit the unlabeled data by pseudo-labeling textual entailment based on a threshold as a hyperparameter without any guarantee on mislabeling error. \(\mathsf{SGen}^{\mathsf{H-Semi}}_{\mathsf{PL}}\) additionally filters out 

[MISSING_PAGE_FAIL:9]

**Why Semi-Supervised Learning.** We observe that our semi-supervised learning for selective generation is effective. In particular, the fully supervised methods in Table 3 achieves the efficiency of \(0.7535\) and \(0.2959\) for GPT-3.5 and Alpaca-7B, respectively, with the entire labeled samples \(\mathbf{Z}_{E}\) (when they satisfy a \(\varepsilon\)-FDR-E guarantee). Compared to these, the proposed semi-supervised method \(\mathsf{SGen}^{\mathsf{Semi}}\) Table 1 achieves the efficiency of \(0.7334\) and \(0.3173\) for GPT-3.5 and Alpaca-7B, respectively, by only using \(75\%\) of labeled examples. Additionally, we observe that more unlabeled samples are beneficial to achieving better efficiency as can be seen in Figure 3. This implies that if we can approximate the entailment set well and the size of \(\mathbf{Z}_{U}\) is enough, we can enjoy our certified pseudo-entailment labeling by the semi-supervised learning even with small \(\mathbf{Z}_{E}\).

**Why Neuro-Selection.** It is hard to manually find a well calibrated scoring function. But, given multiple scoring functions, a neuro-selection function learns to choose right scoring functions that achieves a desired FDR-E and maximizes selection efficiency. This is empiricially validated in Table 1, as \(\mathsf{SGen}^{\mathsf{Semi}}\) is better on average efficiency.

## 6 Conclusion

We propose selective generation, a generalized version of [9] for GLMs to handle semantic correctness between two structured answers. To this end, we leverage logical entailment to define a new entailment-based FDR (FDR-E) metric. As obtaining entailment labels are expensive, we propose novel semi-supervised learning for selective generation by using entailment sets as a pseudo-labeling function. To enhance the low selective efficiency due to inefficient scoring functions, we propose neuro-selection functions for effectively optimizing scoring functions for better selective efficiency and the FDR-E guarantee. The efficacy of our proposed algorithms \(\mathsf{SGen}^{\mathsf{Semi}}\) and \(\mathsf{SGen}^{\mathsf{Sup}}\) are theoretically and empirically justified.

**Limitations.** Our algorithm needs the i.i.d. assumption for a correctness guarantee, which can be violated in practical situations. We leverage expensive entailment labels, where the labels are obtained by considering logical entailment between a true answer and a generated answer. This limitation is partially mitigated by proposing the semi-supervised method to propagate entailment-labeled samples to samples without entailment labels. Also, our results show the empirical FDR-E is not much closely bounded under \(\varepsilon\), especially on Alpaca7B, which implies that we may need a tighter FDR-E bound.

Figure 3: Efficiency results over different numbers of unlabeled samples. (a) and (b) use \(\mathsf{SGen}^{\mathsf{Semi}}_{\mathsf{NoFS}}\) with \(f_{M_{2}}\) score. (c) and (d) use \(\mathsf{SGen}^{\mathsf{Semi}}\) that has neuro-selection function. Both methods show increasing performance as more unlabeled samples \(\mathbf{Z}_{U}\) are used. For each experiment, the values were measured after averaging 10 random splits and an error bar means standard deviation.

## Acknowledgements

This work was supported by Institute of Information & communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No.RS-2019-II191906, Artificial Intelligence Graduate School Program (POSTECH) (50%); RS-2024-00457882, National AI Research Lab Project (25%); RS-2024-00509258, Global AI Frontier Lab (25%)). Also, we appreciate valuable comments by NeurIPS reviewers.

## References

* [1]A. Radford, J. Wu, R. Child, D. Luan, D. Amodei, I. Sutskever, et al. (2019) Language models are unsupervised multitask learners. OpenAI blog1 (8), pp. 9. Cited by: SS1.
* [2]T. B. Brown, B. Mann, N. Ryder, M. Subbiah, J. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam, G. Sastry, A. Askell, S. Agarwal, A. Herbert-Voss, G. Krueger, T. Henighan, R. Child, A. Ramesh, D. M. Ziegler, J. Wu, C. Winter, C. Hesse, M. Chen, E. Sigler, M. Litwin, S. Gray, B. Chess, J. Clark, D. Berner, S. McCandlish, A. Radford, I. Sutskever, and D. Amodei (2020) Language models are few-shot learners. Cited by: SS1.
* [3]H. Touvron, T. Lavril, G. Izacard, X. Martinet, M. Lachaux, T. Lacroix, B. Roziere, N. Goyal, E. Hambro, F. Azhar, A. Rodriguez, A. Joulin, E. Grave, and G. Lample (2023) Llama: open and efficient foundation language models. Cited by: SS1.
* [4]R. Taori, I. Gulrajani, T. Zhang, Y. Dubois, X. Li, C. Guestrin, P. Liang, and T. B. Hashimoto (2023) Stanford alpaca: an instruction-following llama model. Note: [https://github.com/tatsu-lab/stanford_alpaca](https://github.com/tatsu-lab/stanford_alpaca) Cited by: SS1.
* [5]OpenAI Team (2021) ChatGPT. Note: [https://chat.openai.com/](https://chat.openai.com/) Cited by: SS1.
* [6]A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and I. Polosukhin (2017) Attention is all you need. Advances in neural information processing systems30. Cited by: SS1.
* [7]M. Li, S. Roller, I. Kulikov, S. Welleck, Y. Boureau, K. Cho, and J. Weston (2020-06) Don't say that! making inconsistent dialogue unlikely with unlikelihood training. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, Online, pp. 4715-4728. External Links: Link, Document Cited by: SS1.
* [8]L. Ouyang, J. Wu, X. Jiang, D. Almeida, C. L. Wainwright, P. Mishkin, C. Zhang, S. Agarwal, K. Slama, A. Ray, J. Schulman, J. Hilton, F. Kelton, L. Miller, M. Simens, A. Askell, P. Welinder, P. Christiano, J. Leike, and R. Lowe (2022) Training language models to follow instructions with human feedback. Cited by: SS1.
* [9]Y. Geifman and R. El-Yaniv (2017) Selective classification for deep neural networks. Advances in neural information processing systems30. Cited by: SS1.
* [10]V. Vovk, A. Gammerman, and G. Shafer (2005) Algorithmic learning in a random world. Springer Science & Business Media. Cited by: SS1.
* [11]S. Park, O. Bastani, N. Matni, and I. Lee (2020) PAC confidence sets for deep neural networks via calibrated prediction. In International Conference on Learning Representations, External Links: Link Cited by: SS1.
* [12]S. Bates, A. Angelopoulos, L. Lei, J. Malik, and M. I. Jordan (2021) Distribution-free, risk-controlling prediction sets. arXiv preprint arXiv:2101.02703. Cited by: SS1.
* [13]I. Gibbs and E. Candes (2021) Adaptive conformal inference under distribution shift. Cited by: SS1.

* [14] Sangdon Park, Osbert Bastani, and Taesoo Kim. Acon\({}^{2}\): Adaptive conformal consensus for provable blockchain oracles, 2023.
* [15] Samuel Bowman, Gabor Angeli, Christopher Potts, and Christopher D Manning. A large annotated corpus for learning natural language inference. In _Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing_, pages 632-642, 2015.
* [16] Adina Williams, Nikita Nangia, and Samuel R Bowman. A broad-coverage challenge corpus for sentence understanding through inference. In _Proceedings of NAACL-HLT_, pages 1112-1122, 2018.
* [17] Tom Kwiatkowski, Jennimaria Palomaki, Olivia Redfield, Michael Collins, Ankur Parikh, Chris Alberti, Danielle Epstein, Illia Polosukhin, Jacob Devlin, Kenton Lee, et al. Natural questions: a benchmark for question answering research. _Transactions of the Association for Computational Linguistics_, 7:453-466, 2019.
* [18] Zhengbao Jiang, Jun Araki, Haibo Ding, and Graham Neubig. How Can We Know When Language Models Know? On the Calibration of Language Models for Question Answering. _Transactions of the Association for Computational Linguistics_, 9:962-977, 09 2021.
* [19] Potsawee Manakul, Adian Liusie, and Mark Gales. Selfcheckgpt: Zero-resource black-box hallucination detection for generative large language models. In _The 2023 Conference on Empirical Methods in Natural Language Processing_, 2023.
* [20] Vladimir Vovk. Conditional validity of inductive conformal predictors. _Machine learning_, 92(2-3):349-376, 2013.
* [21] Adam Fisch, Tal Schuster, Tommi Jaakkola, and Regina Barzilay. Few-shot conformal prediction with auxiliary tasks, 2021.
* [22] Sangdon Park, Edgar Dobriban, Insup Lee, and Osbert Bastani. PAC prediction sets for meta-learning. In Alice H. Oh, Alekh Agarwal, Danielle Belgrave, and Kyunghyun Cho, editors, _Advances in Neural Information Processing Systems_, 2022.
* [23] Victor Quach, Adam Fisch, Tal Schuster, Adam Yala, Jae Ho Sohn, Tommi S. Jaakkola, and Regina Barzilay. Conformal Language Modeling, June 2024. arXiv:2306.10193 [cs].
* [24] Christopher Mohri, Daniel Andor, Eunsol Choi, and Michael Collins. Learning to reject with a fixed predictor: Application to decontextualization. _arXiv preprint arXiv:2301.09044_, 2023.
* [25] Ying Jin and Emmanuel J. Candes. Selection by Prediction with Conformal p-values, May 2023. arXiv:2210.01408 [stat].
* [26] Ying Jin and Zhimei Ren. Confidence on the Focal: Conformal Prediction with Selection-Conditional Coverage, March 2024. arXiv:2403.03868 [math, stat].
* [27] Christopher Mohri and Tatsunori Hashimoto. Language models with conformal factuality guarantees. _arXiv preprint arXiv:2402.10978_, 2024.
* [28] John J. Cherian, Isaac Gibbs, and Emmanuel J. Candes. Large language model validity via enhanced conformal prediction methods, June 2024. arXiv:2406.09714 [cs, stat].
* [29] Yu Gui, Ying Jin, and Zhimei Ren. Conformal Alignment: Knowing When to Trust Foundation Models with Guarantees, May 2024. arXiv:2405.10301 [cs, stat].
* [30] Philip Gage. A new algorithm for data compression. _C Users Journal_, 12(2):23-38, 1994.
* [31] Samuel S Wilks. Determination of sample sizes for setting tolerance limits. _The Annals of Mathematical Statistics_, 12(1):91-96, 1941.
* [32] Leslie G Valiant. A theory of the learnable. _Communications of the ACM_, 27(11):1134-1142, 1984.

* [33] Harris Papadopoulos, Kostas Proedrou, Volodya Vovk, and Alex Gammerman. Inductive confidence machines for regression. In _European Conference on Machine Learning_, pages 345-356. Springer, 2002.
* [34] Sangdon Park, Edgar Dobriban, Insup Lee, and Osbert Bastani. PAC prediction sets under covariate shift. In _International Conference on Learning Representations_, 2022.
* [35] Morris H DeGroot and Stephen E Fienberg. The comparison and evaluation of forecasters. _Journal of the Royal Statistical Society: Series D (The Statistician)_, 32(1-2):12-22, 1983.
* [36] Bianca Zadrozny and Charles Elkan. Transforming classifier scores into accurate multiclass probability estimates. In _Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining_, pages 694-699. ACM, 2002.
* [37] Yao Zhao, Mikhail Khalman, Rishabh Joshi, Shashi Narayan, Mohammad Saleh, and Peter J Liu. Calibrating sequence likelihood improves conditional language generation. In _The Eleventh International Conference on Learning Representations_, 2022.
* [38] Dorottya Demszky, Kelvin Guu, and Percy Liang. Transforming question answering datasets into natural language inference datasets. _arXiv preprint arXiv:1809.02922_, 2018.
* [39] Jifan Chen, Eunsol Choi, and Greg Durrett. Can NLI Models Verify QA Systems' Predictions?, September 2021. arXiv:2104.08731 [cs].

Discussion

### Conformal Prediction

Conformal prediction [10] provides a promising way to quantify uncertainty of a model with a correctness guarantee under minimal assumptions. Here, we consider PAC prediction sets [11], an interpretation of tolerance region [31] and training-conditional inductive conformal prediction [20] in the lens of PAC learning theory [32] (_i.e.,_ learning a "good" function within a function family from data). This interpretation inspires us to generalize selective generation for GLMs via neural selection functions.

**Conformal Set Model.** We consider a _conformal (prediction) set model_\(\hat{C}:\mathcal{X}\to 2^{\mathcal{Y}}\) that measures the uncertainty of a target model; in conformal prediction, this model is specifically called a _scoring function_\(f:\mathcal{X}\times\mathcal{Y}\rightarrow\mathbb{R}_{\geq 0}\) that measures the conformity (or likelihood) of \(\mathbf{x}\) for being \(\mathbf{y}\) with respect to \(f\); thus, \(f(\mathbf{x},\mathbf{y})\) is called a _conformity score_. In particular, we consider scalar parameterization of a conformal set [11, 33] as follows: \(C(\mathbf{x})\coloneqq\left\{\mathbf{y}\in\mathcal{Y}\mid f(\mathbf{x}, \mathbf{y})\geq\tau\right\},\) where \(\tau\in\mathbb{R}_{\geq 0}\) is a scalar parameter.

**Conformal Sets and Uncertainty.** The output of the conformal set model is a set of labels, which naturally represents the _uncertainty of a scoring function on an example_ via the size of a conformal set. In particular, if the scoring function \(f\) is unsure on its prediction on \(\mathbf{x}\) (due to uncertainty on a label distribution of \(\mathbf{x}\), _i.e.,_ aleatoric uncertainty, and due to uncertainty in the modeling of \(f\), _i.e.,_ epistemic uncertainty), the conformal set is larger than it is when the scoring function is sure on its prediction.

To be precise, we consider a _true conformal set_\(C^{*}(\mathbf{x})\coloneqq\left\{\mathbf{y}\in\mathcal{Y}\mid f(\mathbf{x}, \mathbf{y})\geq f(\mathbf{x},\mathbf{y}^{*})\right\}\), where \(\mathbf{y}^{*}\) is the true label of \(x\). In particular, the true conformal set is a minimal set that contains a true label and labels with larger scores than the true label score; thus, the size of the true conformal set intuitively measures the uncertainty of a scoring function on the given example, _i.e.,_ the scoring function's possibilities on making wrong predictions, instead of the true prediction.

The true conformal set clearly captures the uncertainty, but the true label is unknown in inference time. Thus, the true conformal set is approximated via scalar parameterization [11, 33] as follows:

\[C(\mathbf{x})\coloneqq\left\{\mathbf{y}\in\mathcal{Y}\mid f(\mathbf{x}, \mathbf{y})\geq\tau\right\}, \tag{9}\]

where \(\tau\in\mathbb{R}_{\geq 0}\) is a scalar parameter.

**Correctness.** As we desire to construct a conformal set close to the true conformal set, we define the correctness of the conformal set based on its similarity to the true one. In particular, we wish to have the smallest \(C(\mathbf{x})\) such that \(C^{*}(\mathbf{x})\subseteq C(\mathbf{x})\), or equivalently \(C(\mathbf{x})\) needs to have the smallest \(\tau\) while \(y\in C(\mathbf{x})\). This correctness definition is realized into two ways: a coverage guarantee [10] or a PAC guarantee [20].

**Assumption.** We assume that samples are independent and identically distributed (i.i.d.), _i.e.,_ the i.i.d. assumption. In particular, all samples for testing and learning prediction sets are independently drawn from the same but known distribution \(\mathcal{D}\).

**PAC guarantee.** Under the i.i.d. assumption, we learn a conformal set \(\hat{C}\) that includes the most true labels (_approximately correct_). In particular, this means that the miscoverage of \(\hat{C}\) is less than a desired level \(\varepsilon\in(0,1)\), _i.e.,_\(\mathcal{R}_{\text{MC}}(\hat{C})\coloneqq\mathbb{P}\left\{\mathbf{y}\notin \hat{C}(\mathbf{x})\right\}\leq\varepsilon\), where the probability is taken over i.i.d. samples \((\mathbf{x},\mathbf{y})\sim\mathcal{D}\). This risk on micoverage can be generalized to be the risk on indicator loss, \(\mathcal{R}_{01}(\hat{C})\coloneqq\mathbb{E}_{\mathcal{D}}\ell_{01}(\hat{C},\mathbf{x},\mathbf{y})\). Here, the conformal set \(\hat{C}\) is learned from a randomly drawn calibration set, so we desire to construct \(\hat{C}\) that has a desired error for the most of random calibration sets (_probably approximately correct_), _i.e.,_\(\mathbb{P}\left\{\mathcal{R}_{01}(\hat{C})\leq\varepsilon\right\}\geq 1-\delta,\) where \(\delta\in(0,1)\) is a desired confidence level and the probability is taken over \(n\) i.i.d. calibration samples \(\mathbf{Z}\sim\mathcal{D}^{n}\), used to learn \(\hat{C}\).

**Algorithm.** The PAC conformal prediction set method [11, 34] considers the following algorithm \(\mathcal{A}_{\text{Binom}}:(\mathcal{X}\times\mathcal{Y})^{*}\rightarrow\mathcal{H}\) to learn a conformal set model \(\hat{C}\), parameterized by \(\hat{\tau}\), where \(\mathcal{H}\) is a finely-discretized \(\mathbb{R}_{\geq 0}\):

\[\mathcal{A}_{\text{Binom}}\lx@note{footnote}{$\hat{\tau}=\max_{\tau\in\mathcal{H} }\ \tau$\quad$subj. to $U_{\text{Binom}}(k_{\tau};n,\delta)\leq \varepsilon$}, \tag{10}\]where \(k_{\tau}\coloneqq\sum_{i=1}^{n}\ell_{01}(\hat{C},\mathbf{x}_{i},\mathbf{y}_{i})\). Here, \(U_{\text{Binom}}\) is a binomial tail bound, _i.e.,_\(\mathbb{P}\left\{\mathcal{R}_{01}(C)\leq U_{\text{Binom}}(k_{\tau};n,\delta) \right\}\geq 1-\delta\) for any \(C\), where \(U_{\text{Binom}}(k;n,\delta)\coloneqq\inf\left\{\theta\in[0,1]\,|\,F(k;n, \theta)\leq\delta\right\}\cup\{1\}\) and \(F(k;n,\theta)\) is a cumulative distribution function (CDF) of a binomial distribution with \(n\) trials and success probability \(\theta\). This algorithm is PAC.

**Theorem 2**.: _([11, 20, 34]) The algorithm \(\mathcal{A}_{\text{Binom}}\) is PAC, i.e., for any \(f\), \(\varepsilon\in(0,1)\), \(\delta\in(0,1)\), and \(n\in\mathbb{Z}_{\geq 0}\), we have \(\mathbb{P}\left\{\mathcal{R}_{01}(\hat{C})\leq\varepsilon\right\}\geq 1-\delta\), where the probability is taken over i.i.d. labeled examples \(\mathbf{Z}\sim\mathcal{D}^{n}\), and \(\hat{C}=\mathcal{A}_{\text{Binom}}(\mathbf{Z})\)._

Here, we slightly generalize the known PAC guarantee to hold for any risk with indicator loss. See Appendix F for a proof. Note that the PAC guarantee generally holds only if an enough number of samples is provided (when we know a function family including a true function). However, we consider PAC algorithms that hold for any number of samples due to the structural property of prediction sets, _i.e.,_ a prediction set is always correct if \(\tau=0\) (thus \(\hat{C}(\mathbf{x})=\mathcal{Y}\)), regardless of the sample size. In other words, if the calibration samples are not sufficient, the prediction set is constructed to return \(\mathcal{Y}\) to satisfy the PAC guarantee.

### Sample Space Decomposition

Given the generator \(G\) and the entailment set function \(\hat{E}\), the sample space \(\Omega\coloneqq\mathcal{X}\times\mathcal{Y}\times\mathcal{E}\times\mathcal{V}\) can be partitioned as follows:

\[\Omega =\underbrace{\{(\mathbf{x},\mathbf{y},e,v)\mid G(\mathbf{x})\in E_ {\text{true}}(\mathbf{y})\}}_{\Omega_{\text{ID}}^{\text{Elim}}}\cup\underbrace {\{(\mathbf{x},\mathbf{y},e,v)\mid G(\mathbf{x})\notin E_{\text{true}}(\mathbf{ y})\}}_{\Omega_{\text{ID}}^{\text{Elim}}}\] \[=\underbrace{\{(\mathbf{x},\mathbf{y},e,v)\mid e=0\}}_{\Omega_{ \text{ID}}^{\text{Elim}}}\cup\underbrace{\{(\mathbf{x},\mathbf{y},e,v)\mid e=1 \}}_{\Omega_{\text{ID}}^{\text{Elim}}}\] \[=\underbrace{\{(\mathbf{x},\mathbf{y},e,v)\mid e=1\text{ and }G( \mathbf{x})\in\hat{E}(\mathbf{y})\}}_{\Omega_{\text{IR}}^{\text{Elim}}}\cup \underbrace{\{(\mathbf{x},\mathbf{y},e,v)\mid e=1\text{ and }G(\mathbf{x})\notin\hat{E}(\mathbf{y})\}}_{\Omega_{\text{IR}}^{\text{Elim}}}\cup\] \[=\underbrace{\{\Omega_{\text{TE}}^{\hat{E}}\cup\Omega_{\text{TE}}^{ \hat{E}}\}}_{\Omega_{\text{ID}}^{\hat{E}}}\cup\underbrace{\{\Omega_{\text{ FNE}}^{\hat{E}}\cup\Omega_{\text{INE}}^{\hat{E}}\}}_{\Omega_{\text{IR}}^{\hat{E}}}.\]

Here, the short-hands are defined as follows:

* True discovery rate (TDR): \(\mathbb{P}(\Omega_{\text{TD}}^{E_{\text{inv}}})\)
* False discovery rate (FDR): \(\mathbb{P}(\Omega_{\text{TD}}^{E_{\text{inv}}})\)
* True entailment rate (TER): \(\mathbb{P}(\Omega_{\text{TE}}^{\hat{E}})\)
* False non-entailment rate (FNER): \(\mathbb{P}(\Omega_{\text{FNE}}^{\hat{E}})\)
* True non-entailment rate (TNER): \(\mathbb{P}(\Omega_{\text{TNE}}^{\hat{E}})\)
* False entailment rate (FER): \(\mathbb{P}(\Omega_{\text{FER}}^{\hat{E}})\)

### Experiment Setup

#### a.3.1 Computing Environment

Our system environment consists of 4 NVIDIA A100 80GB with 128 CPUs.

#### a.3.2 Models and Datasets

We use two large language models (LLMs), _GPT-3.5-Turbo_ and _Alpaca-7B_, for language generation. We use deberta-v2-xxlarge-mnli as our entailment model.

[MISSING_PAGE_FAIL:16]

[MISSING_PAGE_FAIL:17]

[MISSING_PAGE_EMPTY:18]

```
1:procedureSGen-Semi-MS(\(f_{M_{1}}\), \(f_{M_{2}}\), \(f_{E}\), \(G\), \(\mathbf{Z}_{E}\), \(\mathbf{Z}_{U}\), \(\varepsilon_{S}\), \(\delta_{S}\), \(Q\), \(\delta_{E}\), \(\delta_{W}\))
2:\(\mathcal{M}_{\text{Success}}=\{\}\); \(\mathcal{M}_{\text{Fail}}=\{\}\)
3:\((\tau_{S_{1}},\hat{U}_{1},\mathsf{Bounded}_{1})\leftarrow\mathsf{SGen-Semi}(f_ {M_{1}},f_{E},G,\mathbf{Z}_{E},\mathbf{Z}_{U},\varepsilon_{S},\delta_{S}/3,Q, \delta_{E}/3,\,\mathsf{return\_bool}=\mathsf{True})\)
4:\((\tau_{S_{2}},\hat{U}_{2},\mathsf{Bounded}_{2})\leftarrow\mathsf{SGen-Semi}(f_ {M_{2}},f_{E},G,\mathbf{Z}_{E},\mathbf{Z}_{U},\varepsilon_{S},\delta_{S}/3,Q, \delta_{E}/3,\,\mathsf{return\_bool}=\mathsf{True})\)
5:\((\tau_{S_{3}},\hat{U}_{3},\mathsf{Bounded}_{3})\leftarrow\mathsf{SGen-Semi}(f_ {M_{1}},f_{M_{2}},f_{E},G,\mathbf{Z}_{E},\mathbf{Z}_{U},\varepsilon_{S},\delta _{S}/3,Q,\delta_{E}/3,\,\delta_{W}/3,\,\mathsf{return\_bool}=\mathsf{True})\)
6:\(\mathcal{M}\coloneqq\{(\tau_{S_{1}},\hat{U}_{1},s_{1},\mathsf{Bounded}_{1}),( \tau_{S_{2}},\hat{U}_{2},s_{2},\mathsf{Bounded}_{2}),(\tau_{S_{3}},\hat{U}_{3},s_{3},\mathsf{Bounded}_{3})\}\)
7:\((\triangleright)\,s_{i}\) refers to the scoring function(s) used in each algorithm.
8:for\((\tau_{S},\hat{U},s,\mathsf{Bounded})\) in \(\mathcal{M}\)do
9:if\(\mathsf{Bounded}=\text{Success}\)then
10:\(\mathcal{M}_{\text{Success}}\leftarrow\mathcal{M}_{\text{Success}}\cup\{( \tau_{S},\hat{U},s)\}\)
11:else
12:\(\mathcal{M}_{\text{Fail}}\leftarrow\mathcal{M}_{\text{Fail}}\cup\{(\tau_{S}, \hat{U},s)\}\)
13:if\(\mathcal{M}_{\text{Success}}=\{\}\)then
14:return\((\tau_{S},\hat{U},s)\leftarrow\arg\min_{(\tau_{S},\hat{U},s)\in\mathcal{M}_ {\text{Fail}}}\ \hat{U}\)
15:else
16:return\((\tau_{S},\hat{U},s)\leftarrow\arg\max_{(\tau_{S},\hat{U},s)\in\mathcal{M}_ {\text{Success}}}\ \hat{U}\)
```

**Algorithm 7** Semi-supervised Selective Generator Learning with Neuro-Selection

[MISSING_PAGE_EMPTY:20]

## Appendix D Semi-supervised Selective Generation Algorithms (Heuristic)

```
1:procedureSG-PSL-H-Semi(\(f_{M}\), \(f_{E}\), \(G\), \(\mathbf{Z}_{E}\), \(\mathbf{Z}_{U}\), \(\varepsilon\), \(\delta\), \(\tau_{\text{PL}}\), FILTER)
2:if FILTER == TRUE then
3:\(\mathbf{Z}_{U}\leftarrow\{(\mathbf{x},\mathbf{y})\mid f_{E}(G(\mathbf{x}), \mathbf{y})\geq\tau_{\text{PL}}\text{ or }1-f_{E}(G(\mathbf{x}),\mathbf{y})\geq\tau_{ \text{PL}}\}\)
4:\(\mathbf{Z}_{U}\leftarrow\{(\mathbf{x},\mathbf{y},\tilde{e})\mid(\mathbf{x}, \mathbf{y})\in\mathbf{Z}_{U},\tilde{e}=\mathbb{1}\big{(}f_{E}(G(\mathbf{x}), \mathbf{y})\geq\tau_{\text{PL}}\big{)}\}\)
5:\(\mathbf{Z}_{E}\leftarrow\{(\mathbf{x},\mathbf{y},\tilde{e})\mid(\mathbf{x}, \mathbf{y},e)\in\mathbf{Z}_{U},\tilde{e}=e\}\)
6:\(\mathbf{Z}_{U,E}\leftarrow\textsc{Sort}_{f_{M}}(\mathbf{Z}_{E}\cup\mathbf{Z} _{U})\)
7:\((\underline{i},\hat{i})\leftarrow(1,|\mathbf{Z}_{U,E}|)\)
8:for\(i=1\)to\(\lceil\log_{2}|\mathbf{Z}_{U,E}|\rceil\)do
9:\(\tau_{S}^{(i)}\gets f_{M}(\mathbf{x}_{\lceil(\underline{i}+\hat{i})/2\rceil },G(\mathbf{x}_{\lceil(\underline{i}+\hat{i})/2\rceil}))\)
10:\(\mathbf{Z}_{U,E}^{(i)}\leftarrow\{(\mathbf{x},\mathbf{y})\in\mathbf{Z}_{U,E} \mid f_{M}(\mathbf{x},G(\mathbf{x}))\geq\tau_{S}^{(i)}\}\)
11:\(k^{(i)}\leftarrow\sum_{(\mathbf{x},\mathbf{y},\tilde{e})\in\mathbf{Z}_{U,E}^{( i)}}\mathbb{1}(\tilde{e}=0)\)
12:\(U^{(i)}\gets U_{\text{Binom}}(k^{(i)};|\mathbf{Z}_{U,E}^{(i)}|,\delta/ \lceil\log_{2}|\mathbf{Z}_{U,E}|\rceil)\)
13:if\(U^{(i)}\leq\varepsilon\)then
14:\(\tilde{i}\leftarrow\lceil(\underline{i}+\tilde{i})/2\rceil\)
15:else
16:\(\hat{i}\leftarrow\lceil(\underline{i}+\tilde{i})/2\rceil\)
17:\(\tau_{S}\leftarrow\tau_{S}^{(i)}\)
18:\(\tilde{U}\gets U^{(i)}\)
19:return\(\tau_{S},\hat{U}\)
```

**Algorithm 9** Semi-supervised Selective Generator Learning with Pseudo-entailment Labels

## Appendix E Unsupervised Selective Generation Algorithms (Certified)

```
1:procedureSG-EM(\(f_{M}\), \(G\), \(\mathbf{Z}_{E}\), \(\mathbf{Z}_{U}\), \(\varepsilon\), \(\delta\))
2:\(\mathbf{Z}_{U,E}\leftarrow\mathbf{Z}_{U}\cup\mathbf{Z}_{E}\)
3:\(\mathbf{Z}_{U,E}\leftarrow\textsc{Sort}_{f_{M}}(\mathbf{Z}_{U,E})\)
4:\((\underline{i},\hat{i})\leftarrow(1,|\mathbf{Z}_{U,E}|)\)
5:for\(i=1\)to\(\lceil\log_{2}|\mathbf{Z}_{U,E}|\rceil\)do
6:\(\tau_{S}^{(i)}\gets f_{M}(\mathbf{x}_{\lceil(\underline{i}+\tilde{i})/2 \rceil},G(\mathbf{x}_{\lceil(\underline{i}+\tilde{i})/2\rceil}))\)
7:\(\mathbf{Z}_{U,E}^{(i)}\leftarrow\{(\mathbf{x},\mathbf{y})\in\mathbf{Z}_{U,E} \mid f_{M}(\mathbf{x},G(\mathbf{x}))\geq\tau_{S}^{(i)}\}\)
8:\(k^{(i)}\leftarrow\sum_{(\mathbf{x},\mathbf{y})\in\mathbf{Z}_{U,E}^{(i)}}\mathbb{1 }(G(\mathbf{x})\neq\mathbf{y})\)
9:\(U^{(i)}\gets U_{\text{Binom}}(k^{(i)};|\mathbf{Z}_{U,E}^{(i)}|,\delta/ \lceil\log_{2}|\mathbf{Z}_{U,E}|\rceil)\)
10:if\(U^{(i)}\leq\varepsilon\)then
11:\(\tilde{i}\leftarrow\lceil(\underline{i}+\tilde{i})/2\rceil\)
12:else
13:\(\hat{i}\leftarrow\lceil(\underline{i}+\tilde{i})/2\rceil\)
14:\(\tau_{S}\leftarrow\tau_{S}^{(i)}\)
15:\(\hat{U}\gets U^{(i)}\)
16:return\(\tau_{S},\hat{U}\)
```

**Algorithm 10** Unsupervised Selective Generator Learning with \(\mathcal{R}_{\text{EM}}(\hat{S})\) Control [9]Proof of Theorem 2

Let \(C_{\tau}\) be a prediction set \(C\) with a parameter \(\tau\), \(\mathcal{H}_{\varepsilon}\coloneqq\{\tau\in\mathcal{H}\mid\mathcal{R}_{01}(C_{ \tau})>\varepsilon\}\), and \(\tau^{*}\coloneqq\inf\mathcal{H}_{\varepsilon}\), where \(\mathcal{H}\) is finely-discretized non-negative real values. Then, we have

\[\mathbb{P}\Big{\{}\mathcal{R}_{01}(\mathcal{A}_{\text{Binom}}( \mathbf{Z}))>\varepsilon\Big{\}} \leq\mathbb{P}\Big{\{}\exists\tau\in\mathcal{H}_{\varepsilon},U_{ \text{Binom}}(k_{\tau};n,\delta)\leq\varepsilon\Big{\}}\] \[\leq\mathbb{P}\Big{\{}U_{\text{Binom}}(k_{\tau^{*}};n,\delta)\! \leq\!\varepsilon\Big{\}} \tag{11}\] \[\leq\mathbb{P}\Big{\{}\mathcal{R}_{01}(C_{\tau^{*}})>\varepsilon \wedge U_{\text{Binom}}(k_{\tau^{*}};n,\delta)\leq\varepsilon\Big{\}}\] \[\leq\mathbb{P}\Big{\{}\mathcal{R}_{01}(C_{\tau^{*}})>U_{\text{ Binom}}(k_{\tau^{*}};n,\delta)\Big{\}}\leq\delta, \tag{12}\]

where the last equality in (11) holds as \(\mathbb{1}\left(\mathbf{y}\notin C_{\tau}(\mathbf{x})\right)\) and \(U_{\text{B}}\) are non-decreasing in \(\tau\) (_i.e.,_ Lemma 2 in [34]) and the last inequality in (12) is due to the property of the binomial tail bound \(U_{\text{Binom}}\).

## Appendix G Proof of Lemma 2

Since (E) in (2) is decomposed into three terms in Lemma 1, we first find upper bounds on each of the terms and take the union bound as follows. This will return a single upper bound on (E) in (2), which we denote \(U_{\text{SSL}}\).

**FER Bound.** First, recall that

\[\mathcal{R}_{\text{FER}}(\hat{E})\coloneqq\mathbb{P}_{\mathcal{D}_{\hat{S}}}\{ e=0\wedge G(\mathbf{x})\in\hat{E}(\mathbf{y})\}.\]

Learning \(\hat{E}\) via \(\mathcal{A}_{\text{FER}}\) is equivalent to the PAC prediction set learning algorithm that considers the optimization problem in (10), where the indicator loss is \(\ell_{01}(\hat{E},\mathbf{x},\mathbf{y},e)\coloneqq\mathbb{1}\left(e=0\wedge G (\mathbf{x})\in\hat{E}(\mathbf{y})\right)\) and the target model is the entailment scoring function \(f_{E}\). Therefore, by Theorem 2, for any \(n_{E}\coloneqq\left|\mathbf{Z}_{E}\right|\), we have

\[\mathbb{P}_{\mathbf{Z}_{E}}\left\{\mathcal{R}_{\text{FER}}(\hat{ E})\leq\varepsilon_{E}\right\} =\sum_{m=1}^{n_{E}}\mathbb{P}_{\mathbf{Z}_{E}}\left\{\mathcal{R}_ {\text{FER}}(\hat{E})\leq\varepsilon_{E}\ \Big{|}\ \middle|\hat{\mathbf{Z}}_{E} \middle|=m\right\}\cdot\mathbb{P}_{\mathbf{Z}_{E}}\left\{\middle|\hat{ \mathbf{Z}}_{E}\middle|=m\right\}\] \[\geq\sum_{m=1}^{n_{E}}(1-\delta_{E}^{\prime}/2)\cdot\mathbb{P}_{ \mathbf{Z}_{E}}\left\{\middle|\hat{\mathbf{Z}}_{E}\middle|=m\right\} \tag{13}\] \[=1-\delta_{E}^{\prime}/2. \tag{14}\]

Note that (13) holds as the PAC guarantee for conformal prediction holds for any number of samples.

The same bound holds with respect to \(\mathbf{Z}\). Specifically, letting \(\ell_{\text{FER}}(\mathbf{Z}_{E},\mathbf{Z}_{U})\coloneqq\mathbb{1}\left( \mathcal{R}_{\text{FER}}(\hat{E})\leq\varepsilon_{E}\right)\), we have

\[\mathbb{P}_{\mathbf{Z}}\left\{\mathcal{R}_{\text{FER}}(\hat{E}) \leq\varepsilon_{E}\right\} =\int\ell_{\text{FER}}(\mathbf{Z}_{E},\mathbf{Z}_{U})\ \mathrm{d} \mathbb{P}(\mathbf{Z})\] \[=\int\ell_{\text{FER}}(\mathbf{Z}_{E},\mathbf{Z}_{U})\ \mathrm{d} \mathbb{P}(\mathbf{Z}_{E})\mathrm{d}\mathbb{P}(\mathbf{Z}_{U})\] \[\geq\int(1-\delta_{E}^{\prime}/2)\mathrm{d}\mathbb{P}(\mathbf{Z} _{U})\]

[MISSING_PAGE_FAIL:23]

Proof of Lemma 3

Let \(U_{\text{SSL}}^{(i)}\) be \(U_{\text{SSL}}\) for the \(i\)-th candidate of \(\varepsilon_{E}\) in Algorithm 3. Due to Lemma 2, the following holds:

\[\mathbb{P}_{\mathbf{Z}}\big{\{}\mathbb{P}_{\mathcal{D}_{\hat{S}}}\{e=0\}>U_{ \text{SSL}}^{(i)})\big{\}}\leq(\delta_{E}^{\prime}+\delta_{S}^{\prime})/Q.\]

Since \(U_{\text{SSL}}^{\text{OPT}}=\underset{i\in[Q]}{\text{min}}\ U_{\text{SSL}}^{(i)}\), we have

\[\mathbb{P}_{\mathbf{Z}}\big{\{}\mathbb{P}_{\mathcal{D}_{\hat{S}}} \{e=0\}>U_{\text{SSL}}^{\text{OPT}}\big{\}} \leq\mathbb{P}_{\mathbf{Z}}\big{\{}\exists\,i\in\{1,\ldots,Q\}, \mathbb{P}_{\mathcal{D}_{\hat{S}}}\{e=0\}>U_{\text{SSL}}^{(i)}\big{\}}\] \[\leq\sum_{i=1}^{Q}\mathbb{P}_{\mathbf{Z}}\big{\{}\mathbb{P}_{ \mathcal{D}_{\hat{S}}}\{e=0\}>U_{\text{SSL}}^{(i)}\big{\}}\] \[\leq\delta_{E}^{\prime}+\delta_{S}^{\prime},\]

where the second inequality is due to a union bound. This completes the proof.

## Appendix I Proof of Theorem 1

Let \(\mathcal{H}\) be the calibration set-dependent hypothesis space of selective generators, where \(n_{\mathcal{H}}\coloneqq|\mathcal{H}|\) is always calibration set independent. Letting \(U^{(i)}\) be the FDR-E bound computed given the \(i\)-th selective generator \(S_{i}\) in \(\mathcal{H}\), we first describe how to derive an upper bound of the FDR-E for a given hypothesis \(S_{i}\).

Since an upper bound of (E) in (2) is proved in Lemma 3, the remaining parts are (i) to derive upper bounds on the others and (ii) to take the union bound. For proportions of the visibility of textual entailment labels, _i.e.,_ (B) and (D) in (2), and the FDR-E for the supervised case only using entailment-labeled examples, _i.e.,_ (C) in (2), the followings hold due to the binomial tail bound:

\[\mathbb{P}_{\mathbf{Z}}\Big{\{}\mathbb{P}_{\mathcal{D}_{S_{i}}}\{ v=1\} \leq\underbrace{U_{\text{Binom}}(|\hat{\mathbf{Z}}_{E}|;|\hat{\mathbf{Z}}_{E}|+| \hat{\mathbf{Z}}_{U}|,\delta_{W}/(2\times|\mathcal{H}|))}_{\coloneqq w_{\text{ SL}}^{(i)}}\Big{\}}\geq 1-\delta_{W}/(2\times|\mathcal{H}|);\] \[\mathbb{P}_{\mathbf{Z}}\Big{\{}\mathbb{P}_{\mathcal{D}_{S_{i}}}\{ v=0\} \leq\underbrace{U_{\text{Binom}}(|\hat{\mathbf{Z}}_{U}|;|\hat{\mathbf{Z}}_{E}|+| \hat{\mathbf{Z}}_{U}|,\delta_{W}/(2\times|\mathcal{H}|))}_{\coloneqq w_{\text{ SL}}^{(i)}}\Big{\}}\geq 1-\delta_{W}/(2\times|\mathcal{H}|);\] \[\mathbb{P}_{\mathbf{Z}}\Big{\{}\mathbb{P}_{\mathcal{D}_{S_{i}}}\{ e=0\} \leq\underbrace{U_{\text{Binom}}(|\hat{\mathbf{Z}}_{E}^{e=0}|;|\hat{\mathbf{Z}}_{E}|, \delta_{S}/(2\times|\mathcal{H}|))}_{\coloneqq U_{\text{SL}}^{(i)}}\Big{\}} \geq 1-\delta_{S}/(2\times|\mathcal{H}|),\]

where \(\hat{\mathbf{Z}}_{E}\) and \(\hat{\mathbf{Z}}_{U}\) are defined same as Lemma 2 does, and \(\hat{\mathbf{Z}}_{E}^{e=0}\coloneqq\{(\mathbf{x},\mathbf{y},e)\in\hat{\mathbf{ Z}}_{E}\mid e=0\}\). Note that the binomial tail bound is applied to filtered sets by the given selective generator (_e.g.,_\(\hat{\mathbf{Z}}_{E}\)), but we can use the same bound for the non-filtered set \(\mathbf{Z}\), by using the same marginalization technique over the size of a filtered set, as in, _e.g.,_ (15).

Thus, by taking the union bound along with Lemma 3 when \(\delta_{E}^{\prime}=\delta_{E}\) and \(\delta_{S}^{\prime}=\delta_{S}/2\),

\[\mathbb{P}_{\mathbf{Z}}\big{\{}\mathcal{R}_{E}(S_{i})\leq U^{(i)}\big{\}}\geq 1 -(\delta_{E}+\delta_{S}+\delta_{W})/|\mathcal{H}|, \tag{20}\]

where \(U_{i}\coloneqq w_{\text{SL}}^{(i)}U_{\text{SL}}^{(i)}+w_{\text{SSL}}^{(i)}U_{ \text{SSL}}^{\text{OPT}^{(i)}}\) is the computed FDR-E bound a given selective generator \(S_{i}\). Here, \(U_{\text{SSL}}^{\text{OPT}^{(i)}}\) refers to the smallest FDR-E bound of (E) in (2) given the \(i\)-th selective generator.

Since (20) holds for all \(S_{i}\in\mathcal{H}\), and the final bound \(\hat{U}\) is chosen among them, this completes the proof by taking an union bound, _i.e.,_\[\mathbb{P}_{\mathbf{Z}}\left\{\mathcal{R}_{E}(\hat{S})>\hat{U}\right\} \leq\mathbb{P}_{\mathbf{Z}}\left\{\exists S_{i}\in\mathcal{H}, \mathcal{R}_{E}(S_{i})>U_{i}\right\}\] \[=\sum_{k=1}^{n_{\mathcal{H}}}d\mathbb{P}_{\mathbf{Z}}\left\{ \exists S_{i}\in\mathcal{H},\mathcal{R}_{E}(S_{i})>U_{i},|\mathcal{H}|=k\right\}\] \[=\sum_{k=1}^{n_{\mathcal{H}}}\mathbb{P}_{\mathbf{Z}}\left\{ \exists S_{i}\in\mathcal{H},\mathcal{R}_{E}(S_{i})>U_{i}\mid|\mathcal{H}|=k \right\}\mathbb{P}_{\mathbf{Z}}\left\{|\mathcal{H}|=k\right\}\] \[\leq\sum_{k=1}^{n_{\mathcal{H}}}\sum_{i=1}^{k}\mathbb{P}_{ \mathbf{Z}}\left\{\mathcal{R}_{E}(S_{i})>U_{i}\mid|\mathcal{H}|=k\right\} \mathbb{P}_{\mathbf{Z}}\left\{|\mathcal{H}|=k\right\}\] \[\leq\sum_{k=1}^{n_{\mathcal{H}}}\sum_{i=1}^{k}\left(\frac{ \delta_{E}+\delta_{S}+\delta_{W}}{k}\right)\mathbb{P}_{\mathbf{Z}}\left\{| \mathcal{H}|=k\right\}\] \[=\delta_{E}+\delta_{S}+\delta_{W}.\]

## Appendix J Proof of Lemma 4

We say \(f_{M}\) is perfectly calibrated with respect to \(\mathcal{D}\), \(G\), \(E_{\text{true}}\) if

\[\mathbb{P}_{\mathcal{D}}\{G(\mathbf{x})\in E_{\text{true}}(\mathbf{y})\mid f_ {M}(\mathbf{x},G(\mathbf{x}))=t\})=t,\forall t. \tag{21}\]

The true discovery rate with respect to \(E_{\text{true}}\) conditioned on \(f_{M}(\mathbf{x},G(\mathbf{x}))\geq\tau_{S}\), _i.e.,_\(1-\text{FDR-E}\), is as follows:

\[\mathbb{P}\{ G(\mathbf{x})\in E_{\text{true}}(\mathbf{y})\mid f_{M}( \mathbf{x},G(\mathbf{x}))\geq\tau_{S}\}\] \[=\frac{\int_{\tau_{S}}^{1}\mathbb{P}\{G(\mathbf{x})\in E_{\text{ true}}(\mathbf{y})\mid f_{M}(\mathbf{x},G(\mathbf{x}))=t\}\mathbb{P}\{f_{M}( \mathbf{x},G(\mathbf{x}))=t\}dt}{\int_{\tau_{S}}^{1}\mathbb{P}\{f_{M}( \mathbf{x},G(\mathbf{x}))=t\}dt}\] \[=\frac{\int_{\tau_{S}}^{1}\mathbb{P}\{f_{M}(\mathbf{x},G(\mathbf{ x}))=t\}dt}{\int_{\tau_{S}}^{1}\mathbb{P}\{f_{M}(\mathbf{x},G(\mathbf{x}))=t\}dt}, \tag{22}\]

where and (22) holds as \(f_{M}\) is perfectly calibrated, _i.e.,_ (21).

Letting \(h(t)\coloneqq\mathbb{P}\{f_{M}(\mathbf{x},G(\mathbf{x}))=t\}\), \(H(t)\coloneqq\int_{t}^{1}h(t^{\prime})dt^{\prime}\), \(i(t)\coloneqq t\mathbb{P}\{f_{M}(\mathbf{x},G(\mathbf{x}))=t\}\), and \(I(t)\coloneqq\int_{t}^{1}i(t^{\prime})dt^{\prime}\), since we have \(\tau_{S}\leq\frac{\int_{\tau_{S}}^{1}\frac{t}

[MISSING_PAGE_EMPTY:26]

[MISSING_PAGE_FAIL:27]

write a justification to elaborate. All supporting evidence can appear either in the main paper or the supplemental material, provided in appendix. If you answer [Yes] to a question, in the justification please point to the section(s) where related material for the question can be found.

IMPORTANT, please:

* **Delete this instruction block, but keep the section heading "NeurIPS paper checklist"**,
* **Keep the checklist subsection headings, questions/answers and guidelines below.**
* **Do not modify the questions and only use the provided macros for your answers**.
1. **Claims** Question: Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? Answer: [Yes] Justification: The theoretical guarantee and the proposed algorithm are illustrated in Section 4. Detailed proofs and algorithmic descriptions can be found in the appendix. Experimental results are illustrated in Section 5 Guidelines: * The answer NA means that the abstract and introduction do not include the claims made in the paper. * The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. * The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. * It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper.
2. **Limitations** Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] Justification: The limitations due to assumptions made for the theoretical guarantee and the expensive data labeling process are illustrated in Section 6. Guidelines: * The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. * The authors are encouraged to create a separate "Limitations" section in their paper. * The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. * The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. * The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. * The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. * If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.

* While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren't acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations.
3. **Theory Assumptions and Proofs** Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? Answer: [Yes] Justification: We provide the correct and complete proofs with full set of assumptions made for each theoretical result, which are illustrated in detail in the appendix. Furthermore, the limitations of the theoretical guarantees induced by the assumptions are stated in Section 6. Guidelines: * The answer NA means that the paper does not include theoretical results. * All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced. * All assumptions should be clearly stated or referenced in the statement of any theorems. * The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. * Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. * Theorems and Lemmas that the proof relies upon should be properly referenced.
4. **Experimental Result Reproducibility** Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? Answer: [Yes] Justification: Datasets, models, and hyperparameters used in implementing proposed algorithms are all described in detail. See Section 5. Guidelines: * The answer NA means that the paper does not include experiments. * If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. * If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable. * Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general, releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed. * While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example 1. If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. 2. If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. *3. If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). 4. We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results.
5. **Open access to data and code** Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] Justification: We will provide the code to train and evaluate the proposed algorithm, which reproduces the experiment results in the paper after the rebuttal process. Guidelines: * The answer NA means that paper does not include experiments requiring code. * Please see the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details. * While we encourage the release of code and data, we understand that this might not be possible, so "No" is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark). * The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines ([https://nips.cc/public/guides/CodeSubmissionPolicy](https://nips.cc/public/guides/CodeSubmissionPolicy)) for more details. * The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc. * The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. * At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). * Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted.
6. **Experimental Setting/Details** Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? Answer: [Yes] Justification: We provide the details of our experiments including generation. Guidelines: * The answer NA means that the paper does not include experiments. * The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. * The full details can be provided either with the code, in appendix, or as supplemental material.
7. **Experiment Statistical Significance** Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? Answer: [Yes]Justification: This paper includes holdout experiments to assess statistical significance and provide error bars for the reported results. Guidelines: * The answer NA means that the paper does not include experiments. * The authors should answer "Yes" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. * The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions). * The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.) * The assumptions made should be given (e.g., Normally distributed errors). * It should be clear whether the error bar is the standard deviation or the standard error of the mean. * It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis of Normality of errors is not verified. * For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates). * If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text.
8. **Experiments Compute Resources** Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? Answer: [Yes] Justification: We wrote the details in Appendix. Guidelines: * The answer NA means that the paper does not include experiments. * The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage. * The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. * The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn't make it into the paper).
9. **Code Of Ethics** Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics [https://neurips.cc/public/EthicsGuidelines?](https://neurips.cc/public/EthicsGuidelines?) Answer: [Yes] Justification: The research is conducted with the NeurIPS Code of Ethics. Guidelines: * The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. * If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. * The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction).
10. **Broader Impacts** Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed?Answer: [Yes]

Justification: The paper can measure the uncertainty of generative large language models, which is crucial for decision making problems.

Guidelines:

* The answer NA means that there is no societal impact of the work performed.
* If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.
* Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.
* The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.
* The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.
* If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML).

11. **Safeguards** Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? Answer: [NA] Justification: This paper poses no such risks Guidelines:

* The answer NA means that the paper poses no such risks.
* Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.
* Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.
* We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort.

12. **Licenses for existing assets** Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] Justification: This paper cite the original papers such as dataset. Guidelines:

* The answer NA means that the paper does not use existing assets.
* The authors should cite the original paper that produced the code package or dataset.

* The authors should state which version of the asset is used and, if possible, include a URL.
* The name of the license (e.g., CC-BY 4.0) should be included for each asset.
* For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.
* If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.
* For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.
* If this information is not available online, the authors are encouraged to reach out to the asset's creators.

13. **New Assets** Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? Answer: [Yes] Justification: This paper will release code for running experiments and it is well documented. Guidelines:

* The answer NA means that the paper does not release new assets.
* Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.
* The paper should discuss whether and how consent was obtained from people whose asset is used.
* At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file.

14. **Crowdsourcing and Research with Human Subjects** Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? Answer: [NA] Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines:

* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.
* According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector.

15. **Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects** Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines:* The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.
* Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.
* We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.
* For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review.